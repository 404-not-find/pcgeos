/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  ffFieldEdges.goc
 * FILE:	  ffFieldEdges.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Oct  5, 1992
 *
 * DESCRIPTION:
 *	This file contains the definition for the field edge controller,
 *	used to toggle edges of flat file database fields.
 *
 * RCS STAMP:
 *	$Id: ffFieldEdges.goc,v 1.1 97/04/04 18:03:19 newdeal Exp $
 *
 ***********************************************************************/
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <Ansi/string.h>

#include <geoworks.h>
#include <math.h>
#include <parse.h>
#include <system.h>

@include <ffile.goh>
#include <extern.h>
@include <Objects/FlatFile/ffileC.goh>
@include <Objects/FlatFile/ffDbase.goh>
@include <Objects/FlatFile/ffFldEdg.goh>
@include <Objects/FlatFile/ffTextC.goh>
#include <ffFatal.h>

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

@extern chunk @FFEName;

typedef struct {
    word shme;
    byte ack;
} OH_LORD_WHY_DO_YOU_INFLICT_METAWARE_ON_US;

/*
 ***************************************************************************
 *		Forward Declarations
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@classdecl	FFEdgeControllerClass;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start FFEdgeControllerUI, notDetachable ;

@object GenBooleanGroupClass FFEdgeList = {
    GI_states = @default & ~GS_USABLE;
    GI_comp = @FFEdgeTop, @FFEdgeLeft, @FFEdgeRight, @FFEdgeBottom;
    GBGI_destination = (TO_OBJ_BLOCK_OUTPUT);
    GBGI_selectedBooleans = FEF_ALL_EDGES;
    GBGI_applyMsg = MSG_FFE_EDGE_CHANGE;
}

@object GenBooleanClass FFEdgeTop = {
    GI_visMoniker = 'T', "Top edge";
    GBI_identifier = FEF_TOP;
}

@object GenBooleanClass FFEdgeLeft = {
    GI_visMoniker = 'L', "Left edge";
    GBI_identifier = FEF_LEFT;
}

@object GenBooleanClass FFEdgeRight = {
    GI_visMoniker = 'R', "Right edge";
    GBI_identifier = FEF_RIGHT;
}

@object GenBooleanClass FFEdgeBottom = {
    GI_visMoniker = 'B', "Bottom edge";
    GBI_identifier = FEF_BOTTOM;
}

@end FFEdgeControllerUI

/***********************************************************************
 *
 * MESSAGE:     MSG_GEN_CONTROL_GET_INFO for FFEdgeControllerClass
 *
 * DESCRIPTION: Return information for building the controller
 *
 * PARAMTERS:
 *      (GenControlBuildInfo *info)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      jeremy	10/5/92	    	Initial version
 *
 ***********************************************************************/
@method FFEdgeControllerClass, MSG_GEN_CONTROL_GET_INFO
{

#ifdef __HIGHC__
_pragma_const_in_code;
#endif
    static const GCNListType FFE_gcnList[] = {
        {MANUFACTURER_ID_GEOWORKS,
	     GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_APPEARANCE_CHANGE}
    };

    static const NotificationType FFE_notifyTypeList[] = {
        {MANUFACTURER_ID_GEOWORKS, GWNT_FLAT_FILE_FIELD_APPEARANCE_CHANGE}
    };

    /* --- */

    static const GenControlChildInfo FFE_childList[] = {
        {@FFEdgeList, FFE_EDGE_LIST, GCCF_IS_DIRECTLY_A_FEATURE}
    };

    /*
     * Careful, this table is in the *opposite* order as the record which
     * it corresponds to.
     */

    static const GenControlFeaturesInfo FFE_featuresList[] = {
        {@FFEdgeList, @FFEName, 0}
    };

    /* The ## denote fields filled in dynamically */

    static const GenControlBuildInfo FFE_dupInfo = {
	0,				    /* GCBI_flags */
	NULL,				    /* GCBI_initFileKey */
	FFE_gcnList,			    /* GCBI_gcnList */
	ARRAY_LEN(FFE_gcnList,GCNListType), /* GCBI_gcnCount */
	FFE_notifyTypeList,		    /* GCBI_notificationList */
	ARRAY_LEN(FFE_notifyTypeList, NotificationType),
					    /* GCBI_notificationCount */
	@FFEName,	    	    	    /* GCBI_controllerName */

	/* ## */ NullHandle,		    /* GCBI_dupBlock */
	FFE_childList,			    /* GCBI_childList */
	ARRAY_LEN(FFE_childList, GenControlChildInfo),
					    /* GCBI_childCount */
	FFE_featuresList,		    /* GCBI_featuresList */
	ARRAY_LEN(FFE_featuresList, GenControlFeaturesInfo),
					    /* GCBI_featuresCount */
	FFE_DEFAULT_FEATURES,		    /* GCBI_features */

	NullHandle,			    /* GCBI_toolBlock */
	0,				    /* GCBI_toolList */
	0,				    /* GCBI_toolCount */
	0,				    /* GCBI_toolFeaturesList */
	0,				    /* GCBI_toolFeaturesCount */
	0,				    /* GCBI_toolFeatures */
    };

#ifdef __HIGHC__
_pragma_end_const_in_code;
#endif

    /*
     * Copy our structure which contains most of the correct
     * fields (everything that can be correct given compiler limitations)
     */
    memcpy(info, MemLockFixedOrMovable(&FFE_dupInfo),
	   sizeof(GenControlBuildInfo));
    MemUnlockFixedOrMovable(&FFE_dupInfo);

    /*
     * Fill in the rest of the fields by hand
     */
    info->GCBI_dupBlock = HandleOf(@FFEdgeList);
}


/***********************************************************************
 *
 * MESSAGE:	MSG_FFE_EDGE_CHANGE for FFEdgeControllerClass
 *
 * DESCRIPTION:	This message wanders over when an edge boolean item
 *	    	gets changed.
 *
 * PARAMETERS:
 *      void (word selectedBooleans,
 *	      word indeterminateBooleans,
 *            word modifiedBooleans)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	10/ 5/92	Initial version
 *
 ***********************************************************************/
@method FFEdgeControllerClass, MSG_FFE_EDGE_CHANGE
{
    EventHandle msg;

    msg = @record FFTextFieldGuardianClass::
	MSG_FFTFG_SET_EDGES((FieldEdgeFlags) selectedBooleans, TRUE);
    
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_CONTROL_UPDATE_UI for FFEdgeControllerClass
 *
 * DESCRIPTION:	Handle notification of attributes change
 *
 * PARAMTERS:
 *	void (MemHandle childBlock, word toolboxFeatures, word features,
 *	      optr toolTree, MemHandle data, word changeID,
 *	      ManufacturerID manufID)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	10/5/92		Initial version
 *
 ***********************************************************************/
@method FFEdgeControllerClass, MSG_GEN_CONTROL_UPDATE_UI
{
    FFFieldAppearanceChangeMessageBlock  *status;

    /* Get ahold of the status message block.	*/
    status = MemLock(data);

    /*
     * Set the edge booleans appropriately.
     */
    @send childBlock, (ChunkHandle)@FFEdgeList::
	MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(status->FFESCM_setEdges,
					     status->FFESCM_indeterminateEdges);
    
    MemUnlock(data);
}
