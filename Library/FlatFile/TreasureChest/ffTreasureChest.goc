/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PC/GEOS
 * MODULE:	  Flat file database library
 * FILE:	  ffTreasureChest.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Mar 3rd, 1992
 *
 * DESCRIPTION:
 *	The Flat File Treasure Chest UI controller definitions and code.
 *
 * RCS STAMP:
 *	$Id: ffTreasureChest.goc,v 1.1 97/04/04 18:03:23 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include_ files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <char.h>
#include <parse.h>
#include <geoworks.h>
#include <gstring.h>

#include <Ansi/ctype.h>
#include <Ansi/string.h>

@include <ffile.goh>
#include <ffFatal.h>
@include <Objects/FlatFile/ffileC.goh>
#include <Objects/FlatFile/ffTChst.h>
@include <Objects/FlatFile/ffUICtrl.goh>

@start AppIconMonikerResource, data ;
@include <Art/mkrRightArrowSC.goh>	/* artwork for right arrow */
//@include <Art/mkrRightArrowSM.goh>
//@include <Art/mkrRightArrowSCGA.goh>
@include <Art/mkrLeftArrowSC.goh>	/* artwork for left arrow */
//@include <Art/mkrLeftArrowSM.goh>
//@include <Art/mkrLeftArrowSCGA.goh>	
@end AppIconMonikerResource

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		External Declarations
 ***************************************************************************
 */

extern MemHandle   GetChildHandle(optr obj);

/*
 ***************************************************************************
 *		Forward Declarations
 ***************************************************************************
 */

static void _pascal FFTCLayoutListStatusChange
		(FFDListStatusChangeMessageBlock *lscmbPtr,
		 optr oself,
		 MemHandle childBlock,
		 word features);

static void _pascal FFTCDatabaseListStatusChange
		(FFDListStatusChangeMessageBlock *lscmbPtr,
		 optr oself,
		 MemHandle childBlock,
		 word features);

void FFTCUpdateList(MemHandle childBlock,
		    ChunkHandle listChunk,
		    byte fieldId,
		    FFFieldListChangeStatus action,
		    byte highlightItem);

void FFTCUpdateNotes(MemHandle childBlock,
		     ChunkHandle listChunk,
		     optr oself,
		     FieldListQuery whichList);

void FFTCEnableFieldActions(MemHandle childBlock);
void FFTCDisableFieldActions(MemHandle childBlock, word features);

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@classdecl	FFTreasureChestClass;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start FFTreasureChestUI, notDetachable ;

@visMoniker TreasureChestTextMoniker = "Field Organizer";

@object	GenInteractionClass FFTCFieldListGroup = {
    GI_comp = @FFTreasureChestDatabaseFieldList,
    	      @FFTreasureChestTransferTriggers,
    	      @FFTreasureChestLayoutFieldList;
    HINT_DIVIDE_WIDTH_EQUALLY;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    GI_states       = @default & ~GS_USABLE;
}

@object GenInteractionClass FFTreasureChestTransferTriggers = {
    GI_comp = @FFTreasureChestTransferDatabaseToLayoutTrigger,
    	      @FFTreasureChestTransferLayoutToDatabaseTrigger;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_CENTER_CHILDREN_VERTICALLY;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}

@object GenTriggerClass FFTreasureChestTransferDatabaseToLayoutTrigger = {
    GI_visMoniker = list {
			  @RightArrowSCMoniker/*,
			  @RightArrowSMMoniker,
			  @RightArrowSCGAMoniker*/
			 }
    GI_states = @default & ~GS_ENABLED;
    GTI_actionMsg = MSG_FFTC_TRANSFER_FROM_DATABASE_TO_LAYOUT;
    GTI_destination = (TO_OBJ_BLOCK_OUTPUT);
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
}

@object GenTriggerClass FFTreasureChestTransferLayoutToDatabaseTrigger = {
    GI_visMoniker = list {
			  @LeftArrowSCMoniker/*,
			  @LeftArrowSMMoniker,
			  @LeftArrowSCGAMoniker*/
			 }
    GI_states = @default & ~GS_ENABLED;
    GTI_actionMsg = MSG_FFTC_TRANSFER_FROM_LAYOUT_TO_DATABASE;
    GTI_destination = (TO_OBJ_BLOCK_OUTPUT);
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
}

@object GenTextClass FFTCFieldNotes = {
    GI_attrs = GA_READ_ONLY;
    GI_visMoniker = "Notes:";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    ATTR_GEN_TEXT_SELECTABLE;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    GI_states       = @default & ~GS_USABLE;
    HINT_FIXED_SIZE =
    	{
	    0, SST_LINES_OF_TEXT | 1, 0  
    	};
}

@object GenTriggerClass FFTCCreateNewFieldTrigger = {
    GI_visMoniker = 'C', "Create New Fields";
    GTI_actionMsg = MSG_FFFP_INITIATE_NEW_FIELD_INTERACTION;
    HINT_SEEK_REPLY_BAR;
    GI_states       = @default & ~GS_USABLE;
 /* GTI_destination is set in MSG_GEN_CONTROL_UPDATE_UI below. */
}

@object GenTriggerClass FFTCEditFieldTrigger = {
    GI_visMoniker = 'E', "Edit This Field";
    GI_states = @default & ~GS_ENABLED;
    GTI_actionMsg = MSG_FFTC_EDIT_A_FIELD;
    GTI_destination = (TO_OBJ_BLOCK_OUTPUT);
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
    HINT_SEEK_REPLY_BAR;
/*    HINT_TRIGGER_BRINGS_UP_WINDOW; */
    GI_states       = @default & ~(GS_USABLE | GS_ENABLED);
}

@object GenTriggerClass FFTCDeleteFieldTrigger = {
    GI_visMoniker = 'D', "Delete This Field";
    GI_states = @default & ~(GS_ENABLED | GS_USABLE);
    GTI_destination = (TO_OBJ_BLOCK_OUTPUT);
    GTI_actionMsg = MSG_FFTC_DELETE_FIELD;
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
    HINT_SEEK_REPLY_BAR;
}

/*********************************************************
 * 	    	    List definitions	    	    	 *
 *********************************************************/

@object GenDynamicListClass FFTreasureChestDatabaseFieldList = {
    GI_visMoniker = "Fields Not in Current Layout";
    GIGI_behaviorType = GIGBT_EXTENDED_SELECTION;

    GDLI_numItems = 0;
    GIGI_applyMsg = MSG_FFTC_DATABASE_LIST_NOTIFICATION;
    GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
    ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS = 0;
    GDLI_queryMsg = MSG_FFTC_DATABASE_LIST_MONIKER_QUERY    ;

    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ITEM_GROUP_SCROLLABLE;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_DRAW_IN_BOX;
    HINT_MINIMUM_SIZE = {SST_AVG_CHAR_WIDTHS | 23, 0, 0};
}

@object GenDynamicListClass FFTreasureChestLayoutFieldList = {
    GI_visMoniker = "Fields in Current Layout";
    GIGI_behaviorType = GIGBT_EXTENDED_SELECTION;

    GDLI_numItems = 0;
    GIGI_applyMsg = MSG_FFTC_LAYOUT_LIST_NOTIFICATION;
    GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
    ATTR_GEN_DESTINATION_CLASS = {(ClassStruct *) &FFTreasureChestClass};
    ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS = 0;

    GDLI_queryMsg = MSG_FFTC_LAYOUT_LIST_MONIKER_QUERY;

    HINT_ITEM_GROUP_SCROLLABLE;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_DRAW_IN_BOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_MINIMUM_SIZE = {SST_AVG_CHAR_WIDTHS | 23, 0, 0};
}

@end FFTreasureChestUI

/*
 * Toolbox UI
 */

/* (NONE) */

/*
 * Strings for controllers
 */

@extern chunk @FFTreasureChestName;
@extern chunk @FFTCFieldListsFeatureName;
@extern chunk @FFTCCreateNewFeatureName;
@extern chunk @FFTCEditFeatureName;
@extern chunk @FFTCDeleteFeatureName;
@extern chunk @FFTCNotesFeatureName;

/*
 ***************************************************************************
 *		Code for FFTreasureChestControlClass
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE: 	MSG_GEN_CONTROL_GET_INFO for FFTreasureChestControlClass
 *
 * DESCRIPTION:	Return information for building the controller
 *
 * PARAMETERS:
 *	(GenControlDupInfo *info)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	1/22/92		Initial revision
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_GEN_CONTROL_GET_INFO
{

#ifdef __HIGHC__
_pragma_const_in_code;
#endif

    static const GCNListType FFTC_gcnList[] = {
	{MANUFACTURER_ID_GEOWORKS,
	 GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_LIST_CHANGE}
    };

    static const NotificationType FFTC_notifyTypeList[] = {
	{MANUFACTURER_ID_GEOWORKS, GWNT_FLAT_FILE_FIELD_LIST_CHANGE}
    };

    /* --- */

    static const GenControlChildInfo FFTC_childList[] = {
	{@FFTCFieldListGroup,
	 FFTC_FIELD_LISTS_FEATURE, 
	 0},
	{@FFTCFieldNotes,
	 FFTC_FIELD_NOTES_FEATURE, 
	 0},
	{@FFTCCreateNewFieldTrigger,
	 FFTC_CREATE_NEW_FIELD_FEATURE, 
	 GCCF_IS_DIRECTLY_A_FEATURE},
	{@FFTCEditFieldTrigger,
	 FFTC_EDIT_FIELD_FEATURE, 
	 GCCF_IS_DIRECTLY_A_FEATURE},
	{@FFTCDeleteFieldTrigger,
	 FFTC_DELETE_FIELD_FEATURE, 
	 GCCF_IS_DIRECTLY_A_FEATURE}
    };

    /*
     * Careful, this table is in the *opposite* order as the record which
     * it corresponds to.
     */

    static const GenControlFeaturesInfo FFTC_featuresList[] = {
	{@FFTCDeleteFieldTrigger, @FFTCDeleteFeatureName, 0},
	{@FFTCEditFieldTrigger, @FFTCEditFeatureName, 0},
	{@FFTCCreateNewFieldTrigger, @FFTCCreateNewFeatureName, 0},
	{@FFTCFieldNotes, @FFTCNotesFeatureName, 0},
	{@FFTCFieldListGroup, @FFTCFieldListsFeatureName, 0},
    };

    /* The ## denote fields filled in dynamically */

    static const GenControlBuildInfo FFTC_dupInfo = {
	0,				    /* GCBI_flags */
	NULL,				    /* GCBI_initFileKey */
	FFTC_gcnList,			    /* GCBI_gcnList */
	ARRAY_LEN(FFTC_gcnList,GCNListType),/* GCBI_gcnCount */
	FFTC_notifyTypeList,		    /* GCBI_notificationList */
	ARRAY_LEN(FFTC_notifyTypeList, NotificationType),
					    /* GCBI_notificationCount */
	@FFTreasureChestName,	    /* GCBI_controllerName */

	/* ## */ NullHandle,		    /* GCBI_dupBlock */
	FFTC_childList,			    /* GCBI_childList */
	ARRAY_LEN(FFTC_childList, GenControlChildInfo),
					    /* GCBI_childCount */
	FFTC_featuresList,		    /* GCBI_featuresList */
	ARRAY_LEN(FFTC_featuresList, GenControlFeaturesInfo),
					    /* GCBI_featuresCount */
	FFTC_DEFAULT_FEATURES,		    /* GCBI_features */

	NullHandle,			    /* GCBI_toolBlock */
	0,				    /* GCBI_toolList */
	0,				    /* GCBI_toolCount */
	0,				    /* GCBI_toolFeaturesList */
	0,				    /* GCBI_toolFeaturesCount */
	0,				    /* GCBI_toolFeatures */
    };

#ifdef __HIGHC__
_pragma_end_const_in_code;
#endif

    /*
     * Copy our structure which contains most of the correct
     * fields (everything that can be correct given compiler limitations)
     */
    memcpy(info, MemLockFixedOrMovable(&FFTC_dupInfo),
	   sizeof(GenControlBuildInfo));
    MemUnlockFixedOrMovable(&FFTC_dupInfo);

    /*
     * Fill in the rest of the fields by hand
     */
    info->GCBI_dupBlock = HandleOf(@FFTCFieldListGroup);
}

/***********************************************************************
 *
 * MESSAGE: 	MSG_GEN_CONTROL_GENERATE_UI for FFTreasureChestControlClass
 *
 * DESCRIPTION:	Set the output for the "Create new field" trigger
 *
 * PARAMETERS:
 *	()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	anna	12/04/92	Initial revision
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_GEN_CONTROL_GENERATE_UI
{
    MemHandle childBlock;

    @callsuper();

    pself = ObjDerefGen(oself);

    childBlock = GetChildHandle(oself);

    if (pself->FFTC_createNewFieldOptr) {
        @call childBlock, OptrToChunk (@FFTCCreateNewFieldTrigger)::
	    MSG_GEN_TRIGGER_SET_DESTINATION(pself->FFTC_createNewFieldOptr);
    }

}
/***********************************************************************
 *
 * MESSAGE: 	reloc handler for FFTreasureChestControlClass
 *
 * DESCRIPTION:	Handles relocation.
 *
 * PARAMETERS:
 *	()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	anna	12/04/92	Initial revision
 *
 ***********************************************************************/
@method FFTreasureChestClass, _reloc
{
    /*
     *	Nuke cached ODs when we restore from state
     */
    if (vmRelocType == VMRT_RELOCATE_AFTER_READ) {
	pself->FFTC_currentDatabaseObject = 0;
    }
    return (@callsuper());
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_SET_FIELD_PROPERTIES_UIC_INFO for FFTreasureChestClass
 *
 * DESCRIPTION:	This sets the "Create New Field" and "Edit Field" triggers.
 *
 * PARAMETERS:
 *	void (optr createNewUICOptr, optr editFieldUICOptr)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/29/92		Initial version
 *	anna	12/4/92		Changed "create new field" optr to be
 *					in instance data too.
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_SET_FIELD_PROPERTIES_UIC_INFO
{
    MemHandle childBlock;

    childBlock = GetChildHandle(oself);

    /* make sure pself is not dorked */
    pself = ObjDerefGen(oself);

    pself->FFTC_editFieldOptr = editFieldUICOptr;
    pself->FFTC_createNewFieldOptr = createNewUICOptr;

    @call childBlock, OptrToChunk (@FFTCCreateNewFieldTrigger)::
	    MSG_GEN_TRIGGER_SET_DESTINATION(createNewUICOptr);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_DATABASE_LIST_MONIKER_QUERY for FFTreasureChestClass
 *
 * DESCRIPTION:	The database dynamic list has requested a moniker for a specific
 *	    	entry.  Incidentally, set the Notes field if need be.
 *
 * PARAMETERS:
 *	void (optr list, word item)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	2/27/92		Initial version
 *	jeremy	4/23/92	    	Updated to use the new dynamic lists.
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_DATABASE_LIST_MONIKER_QUERY
{
    EventHandle msg;

    msg = @record FlatFileDatabaseClass::
	MSG_FFD_REQUEST_FIELD_MONIKER(list, item, NOT_IN_LAYOUT_NAME_LIST);

    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_LAYOUT_LIST_MONIKER_QUERY for FFTreasureChestClass
 *
 * DESCRIPTION:	The layout dynamic list has requested a moniker for a specific
 *	    	entry.  Incidentally, set the Notes field if need be.
 *
 * PARAMETERS:
 *	void (optr list, word item)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	2/27/92		Initial version
 *	jeremy	4/23/92	    	Updated to use the new dynamic lists.
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_LAYOUT_LIST_MONIKER_QUERY
{
    EventHandle msg;

    msg = @record FlatFileDatabaseClass::
	MSG_FFD_REQUEST_FIELD_MONIKER(list, item, LAYOUT_NAME_LIST);

    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_CONTROL_UPDATE_UI
 *
 * DESCRIPTION:	If we get this message, we need to redraw the field lists.
 *
 * PARAMTERS:
 *	void (MemHandle toolBlock, MemHandle childBlock,
 *		word toolboxFeatures, word features,
 *		MemHandle data, word changeID,
 *		ManufacturerID manufID)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	1/23/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_GEN_CONTROL_UPDATE_UI
{
    FFDListStatusChangeMessageBlock	*lscmbPtr;
    EventHandle msg;
    optr GCI_output = pself->GCI_output;

    /* Get ahold of the status message block.	*/
    lscmbPtr = MemLock(data);

    /*
     * Is the source a new target database, or do we need to
     * reset entirely?
     */
    if ((pself->FFTC_currentDatabaseObject != lscmbPtr->databaseOptr) ||
	(INVALID_FIELD_LIST_QUERY <= lscmbPtr->whichList) ||
	(lscmbPtr->changeType == RESET)) {

	/*
	 * Yep.  Update the current database object pointer.
	 */
	pself->FFTC_currentDatabaseObject = lscmbPtr->databaseOptr;

	/*
	 * Request the number of layout and database list items from the
	 * database object.
	 */
	if (features & FFTC_FIELD_LISTS_FEATURE) {
	    msg = @record FlatFileDatabaseClass::
		MSG_FFD_GET_NUMBER_OF_FIELDS
		    (ConstructOptr(childBlock, @FFTreasureChestLayoutFieldList),
		     LAYOUT_NAME_LIST);
	    @call self::MSG_GEN_OUTPUT_ACTION(msg, GCI_output);

	    msg = @record FlatFileDatabaseClass::
		MSG_FFD_GET_NUMBER_OF_FIELDS
		  (ConstructOptr(childBlock, @FFTreasureChestDatabaseFieldList),
		     NOT_IN_LAYOUT_NAME_LIST);
	    @call self::MSG_GEN_OUTPUT_ACTION(msg, GCI_output);
	}

	/*
	 * Dis-enable the Edit and Move triggers.
	 */
	FFTCDisableFieldActions(childBlock, features);

    } else {
	/*
	 * Nope.  Update the specified list.
	 */
	switch (lscmbPtr->whichList) {
	    case LAYOUT_NAME_LIST:
		FFTCLayoutListStatusChange (lscmbPtr, oself, childBlock,
						features);
		break;

	    case NOT_IN_LAYOUT_NAME_LIST:
		FFTCDatabaseListStatusChange (lscmbPtr, oself, childBlock,
						features);
		break;

	    case DATABASE_NAME_LIST:
		/* Nothing to do?! */
		break;
	}
    }

    /*
     * Do we want to disable ourselves?
     */
    if (lscmbPtr->disableImmediately) {
	@call oself::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }

    /* All done. */
    MemUnlock(data);

}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FFTCLayoutListStatusChange
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update the FFTreasureChest lists that correspond to the
		database's Layout list.

CALLED BY:	Internal --	MSG_GEN_CONTROL_UPDATE_UI.

PASS:		FFDListStatusChangeMessageBlock	*lscmbPtr
						= Message status block
						  containing field list
						  change information.
		optr		oself		= The Treasure Chest.
		MemHandle	childBlock	= Memory block containing
						  the UI children.
		word		features	= what UI features are
						  included?
RETURN:		Void.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Update the Treasure Chest's layout list to account for the
	specified change in the database.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.01	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal  FFTCLayoutListStatusChange
		(FFDListStatusChangeMessageBlock *lscmbPtr,
		 optr oself,
		 MemHandle childBlock,
		 word features)
{
    /*
     * Something's happened with the current layout list.
     * If we're just to redisplay one field name, don't deselect the
     * current selection(s).
     */
    if (lscmbPtr->changeType != SHOW_NOTES &&
	lscmbPtr->changeType != CHANGED) {
	FFTCDisableFieldActions (childBlock, features);

	if (features & FFTC_FIELD_LISTS_FEATURE) {
	    @call childBlock, OptrToChunk (@FFTreasureChestLayoutFieldList)::
	        MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED (FALSE);
	}
    }

    /* Update the list appropriately for the specified action.	*/
    switch (lscmbPtr->changeType)
	{
	case RESET:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        @call childBlock, OptrToChunk
					(@FFTreasureChestLayoutFieldList)::
		    MSG_GEN_DYNAMIC_LIST_INITIALIZE (lscmbPtr->numFields);
	    }
	    break;
        case ADDED:
        case DELETED:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        FFTCUpdateList (childBlock,
			    OptrToChunk (@FFTreasureChestLayoutFieldList),
			    lscmbPtr->fieldIndex,
			    lscmbPtr->changeType,
			    NO_ITEM_HIGHLIGHT);
	    }
	    break;
        case CHANGED:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        @send oself::MSG_FFTC_LAYOUT_LIST_MONIKER_QUERY
		    (ConstructOptr (childBlock,
				OptrToChunk
					(@FFTreasureChestLayoutFieldList)),
		     lscmbPtr->fieldIndex);
	    }
	    break;
	case SHOW_NOTES:
	    if (features & FFTC_FIELD_NOTES_FEATURE) {
	        FFTCUpdateNotes (childBlock,
			     OptrToChunk (@FFTreasureChestLayoutFieldList),
			     oself,
			     LAYOUT_NAME_LIST);
	    }
	    break;
	}    
}	/* End of FFTCLayoutListStatusChange().	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FFTCDatabaseListStatusChange
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update the TreasureChest lists that correspond to the
		database's Database name list.

CALLED BY:	Internal --	MSG_GEN_CONTROL_UPDATE_UI

PASS:		FFDListStatusChangeMessageBlock	*lscmbPtr
						= Message status block
						  containing field list
						  change information.
		optr		oself		= The Treasure Chest.
		MemHandle	childBlock	= Memory block containing
						  the UI children.
		word		features	= which UI features do we
						  have?
RETURN:		Void.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Update the Treasure Chest's layout list to account for the
	specified change in the database.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.01	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal
FFTCDatabaseListStatusChange(FFDListStatusChangeMessageBlock *lscmbPtr,
			     optr oself,
			     MemHandle childBlock,
			     word features)
{
    /*
     * Something's happened with the current database list.
     * If we're just to redisplay the notes, don't deselect the
     * current selection(s).
     */
    if (lscmbPtr->changeType != SHOW_NOTES) {
	FFTCDisableFieldActions(childBlock, features);

	if (features & FFTC_FIELD_LISTS_FEATURE) {
	    @call childBlock, OptrToChunk (@FFTreasureChestDatabaseFieldList)::
		MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	}
    }

    /* Update the list appropriately for the specified action.	*/
    switch (lscmbPtr->changeType) {
	case RESET:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        @call childBlock, OptrToChunk(@FFTreasureChestDatabaseFieldList)::
		    MSG_GEN_DYNAMIC_LIST_INITIALIZE(lscmbPtr->numFields);
	    }
	    break;

        case ADDED:
        case DELETED:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        FFTCUpdateList (childBlock,
			    OptrToChunk(@FFTreasureChestDatabaseFieldList),
			    lscmbPtr->fieldIndex,
			    lscmbPtr->changeType,
			    NO_ITEM_HIGHLIGHT);
	    }
	    break;

        case CHANGED:
	    if (features & FFTC_FIELD_LISTS_FEATURE) {
	        @send oself::MSG_FFTC_DATABASE_LIST_MONIKER_QUERY
		    (ConstructOptr(childBlock,
			       OptrToChunk(@FFTreasureChestDatabaseFieldList)),
		 lscmbPtr->fieldIndex);
	    }
	    break;

	case SHOW_NOTES:
	    if (features & FFTC_FIELD_NOTES_FEATURE) {
	        FFTCUpdateNotes (childBlock,
			     OptrToChunk
				(@FFTreasureChestDatabaseFieldList),
			     oself, NOT_IN_LAYOUT_NAME_LIST);
	    }
	    break;
    }
}

/***********************************************************************
 *
 * FUNCTION:	FFTCUpdateList
 *
 * DESCRIPTION:	This function notifies a dynamic list of field
 *	        names that a field has been added or deleted, and
 *	        redisplays the list as appropriate.
 *
 * PARAMETERS:	childBlock - this particular UI controller's block.
 *	    	listChunk - chunk of the list we're dealing with.
 *	    	fieldId - The affected database list field id
 *	    	action - a FFFieldChangeStatus: ADDED or DELETED.
 *	    	highlightItem - which item to select.  Use
 *	    	    	    	NO_ITEM_HIGHLIGHT for nothing.
 *
 * CALLED BY:	MSG_GEN_CONTROL_UPDATE_UI handler.
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/24/92		Initial Revision
 *
 ***********************************************************************/
void
FFTCUpdateList(MemHandle childBlock,
	       ChunkHandle listChunk,
	       byte fieldId,
	       FFFieldListChangeStatus action,
	       byte highlightItem)
{
    switch (action) {
	case ADDED:
	    @call childBlock, listChunk::
		MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(fieldId, 1);
	    break;
	case DELETED:
	    @call childBlock, listChunk::
		MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(fieldId, 1);
	    break;
    }

    if (highlightItem != NO_ITEM_HIGHLIGHT) {
	@call childBlock, listChunk::
	    MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION((word) highlightItem,
						    FALSE);
    }
}


/***********************************************************************
 *
 * FUNCTION:	FFTCUpdateNotes
 *
 * DESCRIPTION:	This function check if there is one element selected, and
 *	    	if so requests new notes for it.
 *
 * PARAMETERS:	childBlock - this particular UI controller's block.
 *	    	listChunk - chunk of the list we're dealing with.
 *	    	oself - an optr to the current treasure chest.
 *	    	whichList - which list to get notes for.
 *
 * CALLED BY:	INTERNAL
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	6/19/92		Initial Revision
 *
 ***********************************************************************/
void
FFTCUpdateNotes(MemHandle childBlock,
		ChunkHandle listChunk,
		optr oself,
		FieldListQuery whichList)
{
    FFTreasureChestInstance *pself;
    word selectedItem;
    Message msg;

    /*
     * Only do more work if there is just one item selected.
     */
    if (@call childBlock, listChunk::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS()
	!= 1) {
	return;
    }

    /* Get the current selected item from the list. */
    selectedItem = @call childBlock, listChunk::
	MSG_GEN_ITEM_GROUP_GET_SELECTION();
    
    msg = @record FlatFileDatabaseClass::
		MSG_FFD_REQUEST_FIELD_NOTES
			(selectedItem, whichList,
			ConstructOptr (childBlock,
			OptrToChunk (@FFTCFieldNotes)));

    /* Our chunk might have moved. */
    pself = ObjDerefGen(oself);
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_TRANSFER_FROM_DATABASE_TO_LAYOUT for
 *	    	FFTreasureChestClass
 *
 * DESCRIPTION:	Handles when the "right-arrow" trigger is hit.  Any selected
 *	    	fields in the database list are moved into the current
 *	    	layout list.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/30/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_TRANSFER_FROM_DATABASE_TO_LAYOUT
{
    EventHandle msg;
    MemHandle childBlock, selectedItemsHandle;
    word numItems, *selectedItems;

    childBlock = GetChildHandle(oself);

    /* Get the current number of items in the database list. */
    numItems = @call childBlock,
    	       OptrToChunk (@FFTreasureChestDatabaseFieldList)::
		   MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();

#if ERROR_CHECK
    if (numItems == 0) {
	EC_ERROR(NO_ITEMS_TO_BE_TRANSFERRED);
    }
#endif /* ERROR_CHECK */

    selectedItemsHandle = MemAlloc(numItems * sizeof(word),
				   HF_DYNAMIC | HF_SHARABLE, 
				   HAF_STANDARD | HAF_ZERO_INIT | HAF_NO_ERR);
    selectedItems = MemLock(selectedItemsHandle);

    /* Get the current selected items from the database list. */
     @call childBlock, OptrToChunk (@FFTreasureChestDatabaseFieldList)::
	 MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(selectedItems, numItems);

    /*
     * Tell the database library to move the fields from the
     * not_in_layout_list to the layout_list.
     */
    MemUnlock(selectedItemsHandle);
    msg = @record FlatFileDatabaseClass::
	MSG_FFD_MOVE_FIELDS_INTO_LAYOUT_LIST(selectedItemsHandle, numItems);

    /* Our chunk might have moved. */
    pself = ObjDerefGen(oself);
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);

    /* Turn the "right arrow" trigger off. */
    @call childBlock,
	OptrToChunk (@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_TRANSFER_FROM_LAYOUT_TO_DATABASE for
 *	    	FFTreasureChestClass
 *
 * DESCRIPTION:	Handles when the "left-arrow" trigger is hit.  Any selected
 *	    	fields in the current layout list are moved into the database
 *	    	list.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/30/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_TRANSFER_FROM_LAYOUT_TO_DATABASE
{
    EventHandle msg;
    MemHandle childBlock, selectedItemsHandle;
    word numItems, *selectedItems;

    childBlock = GetChildHandle(oself);

    /* Get the current number of items in the database list. */
    numItems = @call childBlock,
    	       OptrToChunk (@FFTreasureChestLayoutFieldList)::
		   MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();

#if ERROR_CHECK
    if (numItems == 0) {
	EC_ERROR(NO_ITEMS_TO_BE_TRANSFERRED);
    }
#endif /* ERROR_CHECK */

    selectedItemsHandle = MemAlloc(numItems * sizeof(word),
				   HF_DYNAMIC | HF_SHARABLE, 
				   HAF_STANDARD | HAF_ZERO_INIT | HAF_NO_ERR);
    selectedItems = MemLock(selectedItemsHandle);

    /* Get the current selected items from the layout list. */
     @call childBlock, OptrToChunk (@FFTreasureChestLayoutFieldList)::
	 MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(selectedItems, numItems);

    /*
     * Tell the database library to move the fields from the layout_list
     * to the not_in_layout_list.
     */
    MemUnlock(selectedItemsHandle);
    msg = @record FlatFileDatabaseClass::
	MSG_FFD_MOVE_FIELDS_OUT_OF_LAYOUT_LIST(selectedItemsHandle, numItems);

    /* Our chunk might have moved. */
    pself = ObjDerefGen(oself);
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);

    /* Turn the "left arrow" trigger off. */
    @call childBlock,
	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_DATABASE_LIST_NOTIFICATION for FFTreasureChestClass
 *
 * DESCRIPTION:	This message is sent out by the database list when an element
 *	    	is selected or deselected.
 *
 * PARAMETERS:
 *	void (word selection, numSelections, flags)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/31/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_DATABASE_LIST_NOTIFICATION
{
    MemHandle childBlock;
    EventHandle msg;

    @callsuper();
    pself = ObjDerefGen(oself);

    childBlock = GetChildHandle(oself);

    if (numSelections == 0) {
	/* We're being turned off.  Disable our transfer trigger, too*/
	@call childBlock,
	OptrToChunk (@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	/* If this flag is set, don't disable the field action gadgetry. */
	if (pself->suppressButtonDisabling != TRUE) {
	    FFTCDisableFieldActions(childBlock, 
					FFTC_FIELD_LISTS_FEATURE |
					FFTC_FIELD_NOTES_FEATURE |
					FFTC_CREATE_NEW_FIELD_FEATURE    |
					FFTC_EDIT_FIELD_FEATURE |
					FFTC_DELETE_FIELD_FEATURE);
	}
	return;
    }

    /* We've selected at least one field.  Enable the right arrow trigger. */
    @call childBlock,
    	OptrToChunk (@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_ENABLED(VUM_NOW);
    @call childBlock,
	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* Deselect any field in the database list */
    pself->suppressButtonDisabling = TRUE;
    @call childBlock, OptrToChunk (@FFTreasureChestLayoutFieldList)::
	MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
    pself->suppressButtonDisabling = FALSE;

    FFTCEnableFieldActions(childBlock);

    /*
     * If there is only one field selected, then tell the database library
     * to give us the notes for this field.
     */
    if (numSelections == 1) {
	msg = @record FlatFileDatabaseClass::
		MSG_FFD_REQUEST_FIELD_NOTES
			(selection, NOT_IN_LAYOUT_NAME_LIST,
			 ConstructOptr (childBlock,
			 OptrToChunk (@FFTCFieldNotes)));

	/* Our chunk might have moved. */
	pself = ObjDerefGen(oself);

	@send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_LAYOUT_LIST_NOTIFICATION for FFTreasureChestClass
 *
 * DESCRIPTION:	This message is sent out by the layout list when an element
 *	    	is selected or deselected.
 *
 * PARAMETERS:
 *	void (word selection, numSelections, flags)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/31/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_LAYOUT_LIST_NOTIFICATION
{
    MemHandle childBlock;
    EventHandle msg;

    @callsuper();
    pself = ObjDerefGen(oself);
    childBlock = GetChildHandle(oself);

    if (numSelections == 0) {
	/* We're being turned off.  Disable our transfer trigger, too*/
	@call childBlock,
	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	/* If this flag is set, don't disable the field action gadgetry. */
	if (pself->suppressButtonDisabling != TRUE) {
	    FFTCDisableFieldActions(childBlock, 
					FFTC_FIELD_LISTS_FEATURE |
					FFTC_FIELD_NOTES_FEATURE |
					FFTC_CREATE_NEW_FIELD_FEATURE    |
					FFTC_EDIT_FIELD_FEATURE |
					FFTC_DELETE_FIELD_FEATURE);
	}
	return;
    }

    /* We've selected at least one field.  Enable the left arrow trigger. */
    @call childBlock,
    	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_SET_ENABLED(VUM_NOW);
    @call childBlock,
	OptrToChunk (@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* Deselect any field in the database list */
    pself->suppressButtonDisabling = TRUE;
    @call childBlock, OptrToChunk (@FFTreasureChestDatabaseFieldList)::
	MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
    pself->suppressButtonDisabling = FALSE;

    FFTCEnableFieldActions(childBlock);

    /*
     * If there is only one field selected, then tell the database library
     * to give us the notes for this field.
     */
    if (numSelections == 1) {
	msg = @record FlatFileDatabaseClass::
		MSG_FFD_REQUEST_FIELD_NOTES
			(selection, LAYOUT_NAME_LIST,
			 ConstructOptr (childBlock,
			 OptrToChunk (@FFTCFieldNotes)));

	/* Our chunk might have moved. */
	pself = ObjDerefGen(oself);

	@send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
    }
}


/***********************************************************************
 *
 * FUNCTION:	FFTCEnableFieldActions
 *
 * DESCRIPTION:	This function enables appropriate UI (e.g., the Notes
 *	    	field, the Edit trigger, and the Delete trigger) when
 *	    	a field is selected in one of the field lists in the
 *	    	Treasure Chest.
 *
 * PARAMETERS:	MemHandle childBlock -- the block of this UI controller.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/ 1/92		Initial Revision
 *
 ***********************************************************************/
void
FFTCEnableFieldActions(MemHandle childBlock)
{
    word numInDFL, numInLFL;

    numInDFL = @call childBlock,
		OptrToChunk (@FFTreasureChestDatabaseFieldList)::
				MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
    numInLFL = @call childBlock,
		OptrToChunk (@FFTreasureChestLayoutFieldList)::
				MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();

    /*
     * The edit trigger and notes line are enabled when one and only
     * one item is selected in either list.
     */
    if (numInDFL == 1 || numInLFL == 1) {
	@call childBlock, OptrToChunk (@FFTCEditFieldTrigger)::
		MSG_GEN_SET_ENABLED(VUM_NOW);
	@call childBlock, OptrToChunk (@FFTCFieldNotes)::
		MSG_GEN_SET_ENABLED(VUM_NOW);
    } else {
	@call childBlock, OptrToChunk (@FFTCEditFieldTrigger)::
			MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call childBlock, OptrToChunk (@FFTCFieldNotes)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }

    /*
     * The delete trigger is enabled only when selections are in the
     * database list.
     */
    if (numInDFL) {
	@call childBlock,
		OptrToChunk (@FFTCDeleteFieldTrigger)::
			MSG_GEN_SET_ENABLED(VUM_NOW);
    } else {
	@call childBlock,
		OptrToChunk (@FFTCDeleteFieldTrigger)::
			MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
}

/***********************************************************************
 *
 * FUNCTION:	FFTCDisableFieldActions
 *
 * DESCRIPTION:	This function disables appropriate UI (e.g., the Notes
 *	    	field, the Edit trigger, and the Delete trigger) when
 *	    	a field is deselected in one of the field lists in the
 *	    	Treasure Chest.
 *
 * PARAMETERS:	MemHandle childBlock -- the block of this UI controller.
 *		word features -- which UI features are included?
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/ 1/92		Initial Revision
 *
 ***********************************************************************/
void
FFTCDisableFieldActions(MemHandle childBlock, word features)
{
    TCHAR *nullText = _TEXT("");

    if (features & FFTC_EDIT_FIELD_FEATURE) {
        @call childBlock, OptrToChunk (@FFTCEditFieldTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
    if (features & FFTC_DELETE_FIELD_FEATURE) {
        @call childBlock, OptrToChunk (@FFTCDeleteFieldTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
    if (features & FFTC_FIELD_NOTES_FEATURE) {
        @call childBlock, OptrToChunk (@FFTCFieldNotes)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
        @call childBlock, OptrToChunk (@FFTCFieldNotes)::
		MSG_VIS_TEXT_REPLACE_ALL_PTR(nullText, 0);
    }
    if (features & FFTC_FIELD_LISTS_FEATURE) {
        @call childBlock,
	    OptrToChunk (@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
        @call childBlock,
	    OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_DELETE_FIELD for FFTreasureChestClass
 *
 * DESCRIPTION:	This message is sent when the Delete trigger is hit.
 *	    	We check to see which list is currently active by
 *	    	examining which "transfer" trigger is enabled, since
 *	    	only one will be enabled at a time.  
 *	    	
 *	    	We also tell the edit field properties dialog box
 *	    	to go away, to prevent embarassing crashes.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	3/31/92		Initial version
 *	jeremy	3/25/93	    	Added dismiss of field properties box
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_DELETE_FIELD
{
    MemHandle childBlock, selectedItemsHandle;
    word numItems, *selectedItems;
    EventHandle msg;
    optr appObject;

    childBlock = GetChildHandle(oself);

    /* which of the two transfer triggers are enabled? */
    if (@call childBlock,
	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_GET_ENABLED()) {
	/*
	 * The Layout list is active, but shouldn't be...
	 */
	EC_ERROR(CANT_DELETE_A_FIELD_IN_A_LAYOUT);
    } else {
	/*
	 * The database list is active.  Call the database library to deal
	 * with the request.
	 */
	appObject = GeodeGetAppObject(0);
	@call appObject::MSG_GEN_APPLICATION_IGNORE_INPUT();

	/*
	 * Make sure the "Edit This Field" trigger and the right
	 * arrow trigger are not enabled.
	 */
	@call childBlock,
	    OptrToChunk(@FFTreasureChestTransferDatabaseToLayoutTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call childBlock, OptrToChunk(@FFTCEditFieldTrigger)::
		MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	/*
	 * Tell an open field properties boxes to close down.
	 */
	pself = ObjDerefGen(oself);
	@call pself->FFTC_editFieldOptr::MSG_FFFP_CLOSE();
	    
	@call appObject::MSG_GEN_APPLICATION_ACCEPT_INPUT();

	/* Get the current selected position of the database list. */
	numItems = @call childBlock,
		OptrToChunk (@FFTreasureChestDatabaseFieldList)::
			MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();

        #if ERROR_CHECK
	if (numItems == 0) {
	    EC_ERROR(NO_ITEMS_TO_BE_DELETED);
	}
        #endif /* ERROR_CHECK */

	selectedItemsHandle = MemAlloc(numItems * sizeof(word),
				       HF_DYNAMIC | HF_SHARABLE, 
				       HAF_STANDARD | HAF_ZERO_INIT 
						| HAF_NO_ERR);
	selectedItems = MemLock(selectedItemsHandle);

	/* Get the current selected items from the layout list. */
	@call childBlock, OptrToChunk (@FFTreasureChestDatabaseFieldList)::
		MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS
			(selectedItems, numItems);

	MemUnlock(selectedItemsHandle);

	/*
	 * Tell the database library to delete the darn thangs (but ask for
	 * permission first).
	 */
	msg = @record FlatFileDatabaseClass::
	    MSG_FFD_DELETE_FIELDS_BUT_ASK_FIRST(selectedItemsHandle,
						NOT_IN_LAYOUT_NAME_LIST,
						numItems);

	/* Our chunk might have moved. */
	pself = ObjDerefGen(oself);
	@send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);

        /* send a notification to map controller */

	msg = @record FlatFileDatabaseClass::
	    MSG_FFD_CREATE_DATA_BLOCK_AND_SEND_NOTIFICATION();
	pself = ObjDerefGen(oself);
	@send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
    }
}


/***********************************************************************
 *
 * MESSAGE:	MSG_FFTC_EDIT_A_FIELD for FFTreasureChestClass
 *
 * DESCRIPTION:	This message is sent when the Edit trigger is hit.
 *	    	We check to see which list is currently active by
 *	    	examining which "transfer" trigger is enabled, since
 *	    	only one will be enabled at a time.  
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/3/92		Initial version
 *
 ***********************************************************************/
@method FFTreasureChestClass, MSG_FFTC_EDIT_A_FIELD
{
    MemHandle childBlock;
    word currentSelection;
    EventHandle msg;

    childBlock = GetChildHandle(oself);

    /* which of the two transfer triggers are enabled? */
    if (@call childBlock,
	OptrToChunk (@FFTreasureChestTransferLayoutToDatabaseTrigger)::
		MSG_GEN_GET_ENABLED()) {
	/*
	 * The Layout list is active. 
	 */

#if ERROR_CHECK
    	if (@call childBlock,
		OptrToChunk (@FFTreasureChestLayoutFieldList)::
			MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS() != 1) {
	    EC_ERROR(TOO_MANY_ITEMS_SELECTED);
	}
#endif /* ERROR_CHECK */

	/* Get the current selected position of the layout list. */
	currentSelection = @call childBlock,
		OptrToChunk (@FFTreasureChestLayoutFieldList)::
			MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/*
	 * Tell the database library that we want to edit this critter.
	 */
	msg = @record FlatFileDatabaseClass::
	    MSG_FFD_EDIT_FIELD_PROPERTIES(LAYOUT_NAME_LIST, currentSelection,
					  pself->FFTC_editFieldOptr);
    } else {
	/*
	 * The Database list is active.
	 */

#if ERROR_CHECK
    	if (@call childBlock,
		OptrToChunk (@FFTreasureChestDatabaseFieldList)::
			MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS() != 1) {
	    EC_ERROR(TOO_MANY_ITEMS_SELECTED);
	}
#endif /* ERROR_CHECK */

	currentSelection = @call childBlock,
		OptrToChunk (@FFTreasureChestDatabaseFieldList)::
			MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/*
	 * Tell the database library that we want to edit this critter.
	 */
	msg = @record FlatFileDatabaseClass::
	    MSG_FFD_EDIT_FIELD_PROPERTIES(NOT_IN_LAYOUT_NAME_LIST,
					  currentSelection,
					  pself->FFTC_editFieldOptr);
    }

    pself = ObjDerefGen(oself);
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}
