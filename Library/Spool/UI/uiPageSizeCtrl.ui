/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  Spool/UI
 * FILE:	  uiPageSizeCtrl.ui
 *
 * AUTHOR:  	  Don Reeves, Jan 23, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/23/92	  don	    Initial version
 *
 * DESCRIPTION:
 *	Contains the user-interface descriptions for the
 *	PageSizeControlClass.
 *
 * 	$Id: uiPageSizeCtrl.ui,v 1.1 97/04/07 11:10:25 newdeal Exp $
 *
 ***********************************************************************/

#include "mkrPageSizeTool.ui"

/* Page Setup artwork */
#include "mkrEnvUp.ui"
#include "mkrEnvRight.ui"
#include "mkrPaperPort.ui"
#include "mkrPaperLand.ui"


/* Printer artwork */
#if _PAPER_FED_BACKWARDS
#include "mkrPrEnvDownDown.ui"
#include "mkrPrEnvRightDown.ui"
#include "mkrPrPaperPortDown.ui"
#include "mkrPrPaperLandDown.ui"
#else
#include "mkrPrEnvUp.ui"
#include "mkrPrEnvRight.ui"
#include "mkrPrPaperPort.ui"
#include "mkrPrPaperLand.ui"
#endif

#if _POSTCARDS
#include "mkrPaperPostcardLand.ui"
#include "mkrPaperPostcardPort.ui"
#include "mkrPrPostcardLand.ui"
#include "mkrPrPostcardPort.ui"
#endif


/***********************************************************************
 * 		Page Size Controller UI
 ***********************************************************************/

start	PageSizeControlUI, notDetachable;

/****************************************
 * Page Type List
 ****************************************/

visMoniker PageTypeListMonikerPageSize	= 'T', "Page Type:";

visMoniker PageTypeListMonikerPrinter	= 'T', "Type of Paper in Printer:";

PageTypeList = GenItemGroup {
	moniker = PageTypeListMonikerPageSize;
	children =
		PageTypePaper,
#if	_LABELS
		PageTypeEnvelope,
  #if	_POSTCARDS
		PageTypeLabel,
		PageTypePostcard;
  #else
		PageTypeLabel;
  #endif
#else
  #if	_POSTCARDS
		PageTypeEnvelope,
		PageTypePostcard;
  #else
		PageTypeEnvelope;
  #endif
#endif

	selection = "PT_PAPER";
	numSelections = 1;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -usable;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
#if	!_LABELS
		HINT_IF_SYSTEM_ATTRS {SystemAttrs mask SA_HORIZONTALLY_TINY},
			HINT_ITEM_GROUP_MINIMIZE_SIZE,
			HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		HINT_ENDIF,
#endif
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {word MSG_PZC_SET_PAGE_TYPE}
	}
}

PageTypePaper = GenItem {
	moniker = "Paper";
	identifier = "PT_PAPER";
}

PageTypeEnvelope = GenItem {
	moniker = "Envelope";
	identifier = "PT_ENVELOPE";
}

#if	_LABELS
PageTypeLabel = GenItem {
	moniker = "Label";
	identifier = "PT_LABEL";
}
#endif

#if	_POSTCARDS
PageTypePostcard = GenItem {
	moniker = "Postcard";
	identifier = "PT_POSTCARD";
}
#endif

/****************************************
 * Page Size List
 ****************************************/

visMoniker PageSizeListMonikerPageSize	= 'S', "Page Size:";

visMoniker PageSizeListMonikerPrinter	= 'S', "Size of Paper in Printer:";

PageSizeListParent = GenInteraction {
	moniker = PageSizeListMonikerPageSize;    
	children =
		PageSizeList;
	genStates = default -usable;
}

PageSizeList = GenDynamicList {
	moniker = "Custom";               /* Displayed by default */
	queryMsg = MSG_PZC_REQUEST_PAGE_SIZE_MONIKER;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_PZC_SET_PAGE_SIZE_ENTRY
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 26>
			SpecHeight <>
		}
	}
}


/****************************************
 * Page Size Ranges
 ****************************************/

#if 0
PageCustomSize = GenInteraction {
	children =
		PageSizeWidth,
		PageSizeHeight;
	genStates = default -usable;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}
#endif

PageSizeWidth = GenValue {
	moniker = 'W', "Width:";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	displayFormat = inchesOrCentimeters;
	increment = 36;
	value   = "MINIMUM_PAGE_WIDTH_VALUE";
	minimum = "MINIMUM_PAGE_WIDTH_VALUE";
	maximum = "MAXIMUM_PAGE_WIDTH_VALUE";
	genStates = default -usable;
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <22705, 28>},
		ATTR_GEN_VALUE_STATUS_MSG {word MSG_PZC_SET_PAGE_WIDTH}
	}
}

PageSizeHeight = GenValue {
	moniker = 'H', "Height:";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	displayFormat = inchesOrCentimeters;
	increment = 36;
        value   = "MINIMUM_PAGE_HEIGHT_VALUE";
	minimum = "MINIMUM_PAGE_HEIGHT_VALUE";
	maximum = "MAXIMUM_PAGE_HEIGHT_VALUE";
	genStates = default -usable;
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <22705, 28>},
		ATTR_GEN_VALUE_STATUS_MSG {word MSG_PZC_SET_PAGE_HEIGHT}
	}
}

/****************************************
 * Page Size Layout
 ****************************************/

/* visMoniker PageSizeLayoutPaperMkrPageSize	= 'P', "Page Layout:"; */
visMoniker PageSizeLayoutPaperMkrPageSize	= "Layout:";
visMoniker PageSizeLayoutPaperMkrPrinter	= "Paper Feed:";

/* visMoniker PageSizeLayoutEnvelopeMkrPageSize	= 'E', "Envelope Layout:"; */
visMoniker PageSizeLayoutEnvelopeMkrPageSize	= "Layout:";
visMoniker PageSizeLayoutEnvelopeMkrPrinter	= "Envelope Feed:";

/* visMoniker PageSizeLayoutLabelMkrPageSize	= 'L', "Label Layout:"; */
visMoniker PageSizeLayoutLabelMkrPageSize	= "Layout:";
visMoniker PageSizeLayoutLabelMkrPrinter	= "Label Layout:";

/* visMoniker PageSizeLayoutPostcardMkrPageSize	= 'P', "Postcard Layout"; */
visMoniker PageSizeLayoutPostcardMkrPageSize	= "Layout";
visMoniker PageSizeLayoutPostcardMkrPrinter	= "Postcard Feed";

PageSizeLayout = GenInteraction {
	children =
		PageSizePaperLayout,
		PageSizeEnvelopeLayout,
		PageSizeLabelLayout,
		PageSizePostcardLayout;
	genStates = default -usable;
}


/****************************************
 * Page Size Paper Layout
 ****************************************/

PageSizePaperLayout = GenInteraction {
	children =
		PageSizePaperOrientation;
}

PageSizePaperOrientation = GenItemGroup {
	children =
		PageSizePaperOrientationPortrait,
		PageSizePaperOrientationLandscape;
	selection = "PO_PORTRAIT";
	numSelections = 1;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_TOOLBOX,
		HINT_ALLOW_CHILDREN_TO_WRAP,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_PZC_SET_PAPER_ORIENTATION
		}
	}
}


visMoniker PaperPortraitMonikerListPageSize	= list {
		PaperPortSCMoniker,
		PaperPortSMMoniker,
		PaperPortSCGAMoniker
}

visMoniker PaperPortraitMonikerListPrinter	= list {
#if	_PAPER_FED_BACKWARDS
		PrPaperPortDownSCMoniker,
		PrPaperPortDownSMMoniker,
		PrPaperPortDownSCGAMoniker
#else
		PrPaperPortSCMoniker,
		PrPaperPortSMMoniker,
		PrPaperPortSCGAMoniker
#endif
}

PageSizePaperOrientationPortrait = GenItem {
	moniker	= PaperPortraitMonikerListPageSize;
	identifier = "PO_PORTRAIT";
}

HackGlyph1 = GenGlyph {
	moniker = PaperPortraitMonikerListPrinter;
}


visMoniker PaperLandscapeMonikerListPageSize	= list {
		PaperLandSCMoniker,
		PaperLandSMMoniker,
		PaperLandSCGAMoniker
}

visMoniker PaperLandscapeMonikerListPrinter	= list {
#if	_PAPER_FED_BACKWARDS
		PrPaperLandDownSCMoniker,
		PrPaperLandDownSMMoniker,
		PrPaperLandDownSCGAMoniker
#else
		PrPaperLandSCMoniker,
		PrPaperLandSMMoniker,
		PrPaperLandSCGAMoniker
#endif
}

PageSizePaperOrientationLandscape = GenItem {
	moniker = PaperLandscapeMonikerListPageSize;
	identifier = "PO_LANDSCAPE";
}

HackGlyph2 = GenGlyph {
	moniker = PaperLandscapeMonikerListPrinter;
}


/****************************************
 * Page Size Envelope Layout
 ****************************************/

PageSizeEnvelopeLayout = GenInteraction {
	children =
		PageSizeEnvelopeOrientation;
	genStates = default -usable;
}

PageSizeEnvelopeOrientation = GenItemGroup {
	children =
		PageSizeEnvelopeOrientationPortrait,
		PageSizeEnvelopeOrientationLandscape;
	selection = "EO_PORTRAIT";
	numSelections = 1;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_TOOLBOX,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_PZC_SET_ENVELOPE_ORIENTATION
		}
	}
}


visMoniker EnvelopePortraitMonikerListPageSize	= list {
		EnvRightSCMoniker,
		EnvRightSMMoniker,
		EnvRightSCGAMoniker
}

visMoniker EnvelopePortraitMonikerListPrinter 	= list {
#if _PAPER_FED_BACKWARDS
		PrEnvRightDownSCMoniker,
		PrEnvRightDownSMMoniker,
		PrEnvRightDownSCGAMoniker
#else
		PrEnvRightSCMoniker,
		PrEnvRightSMMoniker,
		PrEnvRightSCGAMoniker
#endif
}

PageSizeEnvelopeOrientationPortrait = GenItem {
	moniker = EnvelopePortraitMonikerListPageSize;
	identifier = "EO_PORTRAIT";
}

HackGlyph3 = GenGlyph {
	moniker = EnvelopePortraitMonikerListPrinter;
}


visMoniker EnvelopeLandscapeMonikerListPageSize	= list {
		EnvUpSCMoniker,
		EnvUpSMMoniker,
		EnvUpSCGAMoniker
}

visMoniker EnvelopeLandscapeMonikerListPrinter	= list {
#if _PAPER_FED_BACKWARDS
		PrEnvDownDownSCMoniker,
		PrEnvDownDownSMMoniker,
		PrEnvDownDownSCGAMoniker
#else
		PrEnvUpSCMoniker,
		PrEnvUpSMMoniker,
		PrEnvUpSCGAMoniker
#endif
}

PageSizeEnvelopeOrientationLandscape = GenItem {
	moniker = EnvelopeLandscapeMonikerListPageSize;
	identifier = "EO_LANDSCAPE";
}

HackGlyph4 = GenGlyph {
	moniker = EnvelopeLandscapeMonikerListPrinter;
}


/****************************************
 * Page Size Label Layout
 ****************************************/

PageSizeLabelLayout = GenInteraction {
#if	_LABELS
	children =
		PageSizeLabelColumns,
		PageSizeLabelRows;
#endif
	genStates = default -usable;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

#if	_LABELS
PageSizeLabelColumns = GenValue {
	moniker = 'A', "Across:";
	value = 1;
	minimum = 1;
	maximum = "MAXIMUM_LABELS_ACROSS";
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {word MSG_PZC_SET_LABEL_COLUMNS}
	}
}

PageSizeLabelRows = GenValue {
	moniker = 'D', "Down:";
	minimum = 1;
	maximum = "MAXIMUM_LABELS_DOWN";
	value = 1;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {word MSG_PZC_SET_LABEL_ROWS}
	}
}
#endif



/****************************************
 * Page Size Postcard Layout
 ****************************************/

PageSizePostcardLayout = GenInteraction {
#if     _POSTCARDS
	children =
		PageSizePostcardOrientation;
#endif
	genStates = default -usable;
}

#if     _POSTCARDS
PageSizePostcardOrientation = GenItemGroup {
	children =
		PageSizePostcardOrientationPortrait,
		PageSizePostcardOrientationLandscape;
	selection = "PCO_PORTRAIT";
	numSelections = 1;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_TOOLBOX,
		HINT_ALLOW_CHILDREN_TO_WRAP,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_PZC_SET_PAPER_ORIENTATION
		}
	}
}


visMoniker PostcardPortraitMonikerListPageSize	= list {
		PaperPostcardPortSCMoniker,
		PaperPostcardPortSMMoniker,
		PaperPostcardPortSCGAMoniker
}

visMoniker PostcardPortraitMonikerListPrinter	= list {
		PrPostcardPortSCMoniker,
		PrPostcardPortSMMoniker,
		PrPostcardPortSCGAMoniker
}

PageSizePostcardOrientationPortrait = GenItem {
	moniker	= PostcardPortraitMonikerListPageSize;
	identifier = "PCO_PORTRAIT";
}

HackGlyphPC1 = GenGlyph {
	moniker = PostcardPortraitMonikerListPrinter;
}


visMoniker PostcardLandscapeMonikerListPageSize	= list {
		PaperPostcardLandSCMoniker,
		PaperPostcardLandSMMoniker,
		PaperPostcardLandSCGAMoniker
}

visMoniker PostcardLandscapeMonikerListPrinter	= list {
		PrPostcardLandSCMoniker,
		PrPostcardLandSMMoniker,
		PrPostcardLandSCGAMoniker
}

PageSizePostcardOrientationLandscape = GenItem {
	moniker = PostcardLandscapeMonikerListPageSize;
	identifier = "PCO_LANDSCAPE";
}

HackGlyphPC2 = GenGlyph {
	moniker = PostcardLandscapeMonikerListPrinter;
}
#endif


/****************************************
 * Margins
 ****************************************/

PageSizeMargins = GenInteraction {
	moniker = 'M', "Margins:";
	children =
		PageSizeMarginsLeftGroup,
		PageSizeMarginsRightGroup;
	genStates = default -usable;
	hints = {
		HINT_IF_SYSTEM_ATTRS { SystemAttrs mask SA_HORIZONTALLY_TINY },
			HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_ELSE,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_ENDIF
	}
}

PageSizeMarginsLeftGroup = GenInteraction {
	children =
		PageSizeMarginLeft,
		PageSizeMarginTop;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

PageSizeMarginLeft = GenValue {
	moniker = "Left:";
	displayFormat = inchesOrCentimeters;
	increment = 18;
	maximum = "MAXIMUM_PAGE_WIDTH_VALUE";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <11353, 14>},
		ATTR_GEN_VALUE_STATUS_MSG {word	MSG_PZC_SET_MARGIN_LEFT}
	}
}

PageSizeMarginTop = GenValue {
	moniker = "Top:";
	displayFormat = inchesOrCentimeters;
	increment = 18;
	maximum = "MAXIMUM_PAGE_HEIGHT_VALUE";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <11353, 14>},
		ATTR_GEN_VALUE_STATUS_MSG {word	MSG_PZC_SET_MARGIN_TOP}
	}
}

PageSizeMarginsRightGroup = GenInteraction {
	children =
		PageSizeMarginRight,
		PageSizeMarginBottom;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

PageSizeMarginRight = GenValue {
	moniker = "Right:";
	displayFormat = inchesOrCentimeters;
	increment = 18;
	maximum = "MAXIMUM_PAGE_WIDTH_VALUE";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <11353, 14>},
		ATTR_GEN_VALUE_STATUS_MSG {word	MSG_PZC_SET_MARGIN_RIGHT}
	}
}

PageSizeMarginBottom = GenValue {
	moniker = "Bottom:";
	displayFormat = inchesOrCentimeters;
	increment = 18;
	maximum = "MAXIMUM_PAGE_HEIGHT_VALUE";
	destination = "TO_OBJ_BLOCK_OUTPUT";	
	hints = {
		ATTR_GEN_VALUE_METRIC_INCREMENT {WWFixed <11353, 14>},
		ATTR_GEN_VALUE_STATUS_MSG {word	MSG_PZC_SET_MARGIN_BOTTOM}
	}
}

end	PageSizeControlUI;



/***********************************************************************
 * 		Page Setup Toolbox UI
 ***********************************************************************/

start	PageSizeToolboxUI, notDetachable;

PageSizeToolTrigger = GenTrigger {
	moniker = list {
		PageSizeToolTCMoniker,
		PageSizeToolTMMoniker,
		PageSizeToolTCGAMoniker
	}
	action = MSG_GEN_INTERACTION_INITIATE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -usable;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		ATTR_GEN_FOCUS_HELP {
			optr	PZCName
		}
	}
}

end	PageSizeToolboxUI;



/***********************************************************************
 * 		Control & Toolbox strings
 ***********************************************************************/

start	ControlStrings, data;

chunk	PZCName			= "Page Setup";

chunk	PageTypeListName	= "Page Type List";

chunk	PageSizeListName	= "Page Size List";

chunk	PageSizeLayoutName	= "Page Layout Options";

chunk	PageCustomSizeName	= "Custom Page Size";

chunk	PageSizeMarginsName	= "Page Margins";

chunk	PageSizeToolDBName	= "Page Setup Dialog Box";

end	ControlStrings;
