COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		User Interface
FILE:		GenToolControl

DESCRIPTION:	UI Controller for Tool & Toolbox Management

	$Id: GenToolControl.doc,v 1.3.34.1 97/03/29 03:37:31 canavese Exp $

------------------------------------------------------------------------------@

Synopsis
--------
	If you're using UI controllers in your application, chances are you'll
	want to take advantage of GenToolControlClass.

	GenToolControlClass is a UI controller object which manages 
	GenToolGroup objects, & the controllers that they reference.
	Specifically, it:

		* Has as instance data:
			1) A list of GenInteractions which the application
			   designates as being "Toolbox" areas.
			2) A list of GenToolGroups which are children of the
			   above tool areas.

		* Turns into a "Manage Tools.." button, which leads to a
		  dialog box of the same name.  The dialog box allows the
		  user to scroll through a list of all the Tool Groups within
		  the application & change both which toolbox each controller's
		  tools should appear in, & to individually select which
		  of the controller's features should appear as tools.

Limitations
-----------
	Displays & allows modifications onto to the GenGroup (& referenced
	GenControl objects) listed in the GTCI_toolGroupList instance data.

	Supports only tools created by objects subclassed off of
	GenControlClass.  If your app would like to provide tools
	beyond those inherited with the inclusion of existing
	GenControl (UI controller) objects,  you'll have to create a new
	subclassing of GenControl in order to work w/this object.

Alternatives
------------
	GenToolControl is a convenient way to specify toolboxes & let the
	user customize their tool arrangement, but it is by no means necessary.
	By default, UI controllers create only the "Normal" UI gadgetry,
	usually menu items, but don't create the functionally redundant
	"Tools".  The tools can be made to appear without the use of
	GenToolControl by simply placing GenToolGroup objects whereever desired,
	storing in their only instance data field the optr of the controller
	whose tools should be built below the ToolGroup.
	GenControl itself provides the necessary API for turning on/off
	individual tools, or moving all Tools within a GenControl to
	another Toolbox.  So, as you can see, it's quite possible to
	implement your own custom control for Toolboxes within your apps. 
	Or, you can save yourself lots of time & drop in a GenToolControl :)

Implementation Status
---------------------

	Done.

See Also
--------
	GenControlClass

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------
	Tool	- a generic gadget (GenTrigger/GenListEntry, GenRange, etc),
		  which has been defined in a UI controller (A subclassing
		  of GenControlClass) for the purpose of providing a graphical,
		  mouse-based shorcut for a particular function of the
		  application (which is normally available via the menu as
		  well).  The standard graphic size of 16X16 pixels meshes
		  nicely with other screen gadgetry such as scrollbars, menus,
		  etc., & is recommended, but not required for this reason.

	Tool group
		- A GenToolGroupClass object.  Always placed in a toolbox of
		  some kind.  Children are dynamically added by the controller
		  that the tool group references, when the group becomes
		  visible.

	Toolbox	- a generic object, almost always a GenInteraction, in which
		  ToolGroups are placed.  Includes floating toolboxes,
		  horizontal or vertical "bars" of tools placed in the
		  tree below GenPrimary, GenDisplay, or GenView objects.

	UI controller - An object subclassed off of GenControlClass

Relationships/Context
---------------------
	GenToolControl is an optional component that allows the user to
	manage the arrangement of GenToolGroup objects, the toolbox
	interactions they are placed in, and the set of visible tools
	as provided by the controller that the GenToolGroup references.

Conceptual Overview
-------------------
	GenControlClass offers an API for UI controllers which allows setting
	up & modifying which tools should appear, & where they should appear.
	GenToolControlClass provides a standard user interface for the above,
	in the form of a "Manage Tools" dialog.  It additionally allows an
	application to specify which GenInteractions in its interface should
	be used has Toolboxes, & what the "names" of these areas are, so
	that the user may select them in the "Manage Tools" dialog.  To
	get full use out of GenToolControlClass, you need to:

		* Setup an instance of one in the static object description
		  for your application (.ui or .goc)

		* Place the object on the application's active list

		* Provide a  "Save Options" menu item, to allow the user
		  to save the custom tool configuration they've set up.
		  (This can be accomplished with a single GenTrigger whose
		  action is MSG_META_SAVE_OPTIONS (no data), & destination
		  is the GenApplication object for the application)

	That's it.

Warnings
--------
	At least ONE Toolbox MUST be specified when setting up an instance
	of GenToolControlClass.  Failure to do so will result in a fatal
	error.

Usage: Basic setup
------------------
	Before using the GenToolControl object, you should set up:

		- The controllers your app will use
		- One or more toolboxes (any GenInteraction will do)
		- A GenToolGroup object for each controller that you'd like
		  to be able to present tools for.  Each of these needs to
		  be placed as a child of one of the toolboxes.

	Then, add a GenToolControl to your application:

		- Place it whereever you'd like the "Manage Tools.." menu
		  item to appear (generally the Options menu)
		- It must be placed on the GAGCNLT_STARTUP_LOAD_OPTIONS list
		  of the application object.
		- Its only instance data is a reference to chunks holding
		  lists of both the toolboxes & tool groups you set up above.

	A GenToolControl setup (in assembly format) might look like:

	TUIToolControl = GenToolControl {
		toolboxList = TUIToolboxList;
		toolGroupList = TUIToolGroupList;
		hints = { HINT_SUB_GROUP, HINT_SAME_CATEGORY_AS_PARENT }
	}

	chunk TUIToolboxList = data {
		UN_OPTR	TUIToolArea
		UN_OPTR TUIToolAreaName
		UN_OPTR	TUIViewArea
		UN_OPTR	TUIViewAreaName
	}

	chunk TUIToolGroupList = data {
		UN_OPTR	TUIEditTools
		UN_OPTR	TUIViewTools
	}

	TUIToolArea = GenInteraction {
		children = TUIEditTools;
		hints = {
			HINT_TOOLBOX,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_ALLOW_CHILDREN_TO_WRAP,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY
		}
	}
	chunk TUIToolAreaName = "Standard tool area";
	
	TUIViewArea = GenInteraction {
		attributes = default +independentlyDisplayable;
		children = TUIViewTools;
	}
	chunk TUIViewAreaName = "View tool area";

	NOTE:  Applications at this time are completely free to place
	toolboxes wherever they like, with whatever geometry they like.
	This is partly to allow customization of application appearance, &
	partly to make it easier to experiment w/Tools & Toolboxes in general.
	Once we figure out what we like, we could incorporate some of the
	preferred toolbox styles back into GenToolControlClass.  Apps would
	continue to be able to add their own unique toolbox areas, & likely
	turn "off" standard areas, if they do not fit well with the app.

	NOTE:  The use of children below a GenToolControl object is
	"reserved for future use", i.e. should not be done at this time.


Usage: Toolbox areas in Displays
--------------------------------
	Applications supporting multiple displays, & wishing to have tools
	show up in those displays will have to make use of a mechanism
	of GenDisplayClass:   ATTR_GEN_DISPLAY_TRAVELING_OBJECTS.  What this
	does is solve the problem of having multiple displays, but only
	one Tool area.  ATTR_GEN_DISPLAY_TRAVELING_OBJECTS simply moves
	the single object around, so that it always resides on the top-most
	display.  See declaration of ATTR_GEN_DISPLAY_TRAVELING_OBJECTS for
	full details.

	Code example:

	
	TUIDisplay = GenDisplay {
		...
		hints = {
			ATTR_GEN_DISPLAY_TRAVELING_OBJECTS {
				word offset TUITravelingObjects
			}
		}
	}

	chunk TUITravelingObjects = data {
        	UN_OPTR TUITopOfDisplayBar
		; The traveling object -- a horizontal tool area

        	word    offset  TUIDisplay
		; Object within this display below which the TUITopOfDisplayBaro		; should be added whenever the display comes to the top.
		; NOTE: must be in same block as the display.

        	word    mask CCF_MARK_DIRTY or CCO_FIRST
		; Flags for how to add traveling object to its parent.

		<next traveling object would go here, any number may be listed>
	}

	TUITopOfDisplayBar = GenInteraction {
		genStates = default -usable;
		hints = {
			HINT_TOOLBOX,
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
	}
	chunk TUITopOfDisplayBarName = "Top of Display";

	An entry for TUITopOfDisplayBar would also need to be added to the
	list of toolboxes for the GenToolControl, TUIToolboxList in this case.


In-Depth: Tools next to scrollbars of GenView's
-----------------------------------------------
	Tools plus a shorter scrollbar may be made to replace a long scrollbar
	within a GenView.  To do this, place a GenInteraction below the
	GenView with HINT_SEEK_X_SCROLLER_AREA or HINT_SEEK_Y_SCROLLER_AREA.
	Then place a tool interaction area below this interaction.  If the
	GenView resides within a Display, setup the tool interaction to
	be not USABLE, & specify it as a "traveling object" using
	ATTR_GEN_DISPLAY_TRAVELING_OBJECTS, with the permanent GenInteraction
	below the GenView as the "parent" to use for the "traveling object"
	when the display comes to the top.

	Code example:

	TUIDisplay = GenDisplay {
		children = TUIView;
		hints = {
			ATTR_GEN_DISPLAY_TRAVELING_OBJECTS {
				word offset TUITravelingObjects
			}
		}
	}

	TUIView = GenView {
		...
		children = TUIHorizScrollbarInteraction;
		horizAttributes = default +scrollable;
	}
	TUIHorizScrollbarInteraction = GenInteraction {
		hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_SEEK_X_SCROLLER_AREA
		}
	}

	TUINextToScrollbar = GenInteraction {
		genStates = default -usable;
		hints = {
			HINT_TOOLBOX,
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
	}
	chunk TUINextToScrollbarName = "Next to Scrollbar";

	chunk TUITravelingObjects = data {
		UN_OPTR TUINextToScrollbar
		word	offset TUIHorizScrollbarInteraction
		word	mask CCF_MARK_DIRTY or CCO_FIRST
	}

	Again, the TUINextToScrollbar would need to be added to the list
	of toolboxes for the GenToolControl object.

See Also
--------
	GenControlClass

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------


Sample Code/Programming Tips
----------------------------
	<useful code snippets, references to sample applications & a short
	 description of them>

Include Files Needed
--------------------

Assembly Tips
-------------

Debugging Tools & Tips
----------------------

See Also
--------
	Appl/SDK_Asm/UICtrl
	Appl/SDK_C/UICtrl

	<Sample apps, related tools, other documentation>

;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

	<anytime someone asks you a question about this object, clear up
	 the documentation above to explain it, or add an entry here>


