File: General_Change_Notification
Description: This document describes the General Change Notification mechanism.
Author: brianc
Date: 9/23/91 (updated)

$Id: GeneralChangeNotification.doc,v 1.5.34.1 97/03/29 03:36:46 canavese Exp $

COMMENT @MECHANISM DESCRIPTION-------------------------------------------------


			General Change Notification


Synopsis
--------
In a multi-tasking environment like PC/GEOS, with multiple-threads of execution
and shared resources, there is a need for one thread to know when the state of
some resource or some other thread changes.  The General Change Notification
mechanism provides for this by allowing objects or processes to request that
they be notified when a certain change in the system occurs.

A clarification regarding practical usage:

GCNListAdd, GCNListRemove & GCNListSend all operate on the kernel's GCN lists,
which are intended for system-wide use.  The kernel itself, & several PC/GEOS
librarys, send notifications to these lists.  The lists, & the messages
which are sent to them, are documented in gcnlist.def under
GCNStandardListType.  Any application interested in getting notified about
these events will want to use GCNListAdd to get on the list, & GCNListRemove
to get off it.  GCNListSend, on the other hand, is used only by the kernel  
& librarys generating system-wide notifications.  If developers are creating
such a  library, they too, might use GCNListSend.

The META_GCN_* messages may be called/sent on any GenApplication object to 
access the application-local GCN lists.  There are already quite a number of
lists & notification types, which are enumerated in geoworks.def, under
NotifyStandardNotificationTypes & GenAppGCNListType.  An application wishing
to tap into these might use the ADD & REMOVE messages.  GenControlClass does
this automatically for any given controller, adding any instance of that
class to the lists that are specified via a GenControlDupInfo structure.
Data objects (such as text, spreadsheet, grobj, etc.) actually send messages
to the app GCN lists via MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST (a message of GenProcessClass,
the class all app processes come off of) for obscure synchronization issues
(see message definition).  A developer creating a new data object w/companion
controllers would then use MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST.

That's it.  There are many other GCN routines (GCNListAddToBlock, etc.), but
they are really only used internally.  The MSG_META_GCN_* are indeed MetaClass
messages, but at this time are used only for GenApplicationClass objects.  I
would discourage their use elsewhere.

Doug

Limitations
-----------
	* Notification generally occurs asynchronously (unless sender is run
	  by same thread as optr on list) -- the object or process
	  interested in a particular change will receive notification at some
	  time after the change has actually occurred.
	  (see "Usage:  Generating a general change notification" section)

Alternatives
------------
	* Notification can be done simply by sending messages between objects
	  and processes, but the General Change Notification mechanism
	  eliminates any need to manually keep track of what type of
	  notification is desired by which objects and which processes.

Implementation Status
---------------------
	TO BE DONE:
		* remove-from-all-lists feature
		* free list when last item is removed?
			NOTE:  don't do this if status event set
		* add EC code to DetachObjBlock and FreeGeodeLow

See Also
--------

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------
GCN -		General Change Notification

GCN List -	general change notification list -- a structure holding
		a GCNListType and a list of optrs interested in events
		related to the type.   Objects or processes interested in
		certain types of changes add themselves to the list whose
		type they are interested in.

GCNListType - 	GCN List type identifier.   Used to uniquely identify 
		a particular list.  Includes both a Manufacturer ID, and
		an enumerated word type for each Manufacturer, so that new
		list types may easily be defined.  For the pre-defined
		manufacturer ID of MANUFACTURER_ID_GEOWORKS, the
		pre-defined types are in the GCNStandardListType enum.

GCN List Group -
		a collection of GCN lists.  PC/GEOS supports a system-level
		GCN List Group, but others may be created & used.

NotificationType -
		Notification type identifier.  Passed in MSG_META_NOTIFY and
		MSG_META_NOTIFY_WITH_DATA_BLOCK, identify, NotificationType consists
		also of a Manufacturer ID and a word enumerated type, though
		this enumeration is unrelated to that used in GCNListType.
		For the pre-defined manufacturer ID of MANUFACTURER_ID_GEOWORKS, the
		pre-defined types are in the NotifyStandardNotificationTypes
		enum.  MSG_META_NOTIFY & MSG_META_NOTIFY_WITH_DATA_BLOCK are 
		expandable, general purpose META messages, and for that
		reason are commonly used to pass notification information
		to GCN Lists.  See the declaration of any particular
		GCNListType to find out what messages can be expected to
		be sent to the list.


Relationships/Context
---------------------
	The general change notification mechanism is built on the ChunkArray
	mechanism, which in turn, is built on the local-memory mechanism.

Conceptual Overview
-------------------
	The General Change Notification API is simple.  Objects or processes
	that want to receive certain notification messages simply ask to be
	added to the list having the desired GCNListType.

	When a particular type of change occurs, GCNListSend is called to
	notify all objects and processes on the appropriate list of the
	change.  Notification is in the form of a MetaClass message being
	sent to the object or process.  Each list type generally has one or
	more particular messages associated with it.  For instance,
	MSG_NOTIFY_FILE_CHANGE is sent to the MANUFACTURER_ID_GEOWORKS/
	GCNSLT_FILE_SYSTEM list whenever a file in the system changes in some
	way.  A process or object interested in receiving this message would
	then add itself to the MANUFACTURER_ID_GEOWORKS/GCNSLT_FILE_SYSTEM list.
	Some lists have multiple messages which are sent to optrs on them --
	see the declaration of the GCNListType to find out what messages are
	sent to the list.

	When an object or process is dying, it must remove itself from all GCN
	lists that it added itself to.

	New list types & messages may be defined simply by extending the 
	enumerated type field in GCNListType, and if MSG_META_NOTIFY or
	MSG_META_NOTIFY_WITH_DATA_BLOCK are being used, extending the enumerated
	type in NotificationType as well.  The GCN mechanism internally keeps
	phsyical lists around only for GCNListType to which objects or 
	processes have requested to be listed on.

	GCN routines exist for several levels:  The highest level operates
	directly on the system's GCN list group.  The intermediate level
	routines allow the creation of, and operation on, a GCN list group
	seperate from the system's.  The lowest level routines allow access
	to individual GCN lists.

	GCN lists may also be used to provide something akin to a "watched"
	variable, though the "variable" is a actually a recorded event,
	which may optionally reference a data block.  Such events are referred
	to here as "status" events.  A single status event may be set, replaced,
	or cleared for each GCN list, via a flag passed to GCNListSend.
	Objects adding themselves to a GCNList are automatically sent the status
	event.  This capability is used as a part of the UI Controller update
	mechanism, specifically to cache the current status of various target
	object data types, where GenControl objects may easily access them.

Warnings
--------
	Several messages sent via the GCN mechanism pass a handle to
	a memory block starting with the structure NotificationDataBlockHeader.
	It is important that such messages eventually reach the default
	MetaClass handler, which decrements the in-use count stored in the
	header & frees the block once the count reaches zero.  Failure to
	do this will result in garbage being left on the heap.


Usage:  Addition to a general change notification list
------------------------------------------------------
	If an object or process wants to be notified when some change occurs,
	the following code can be used:
		mov	bx, ManufacturerID
		mov	ax, list_type
		mov	cx, object_handle_or_process_handle
		mov	dx, object_chunk
		call	GCNListAdd
	ManufacturerID and list_type specifies the type of change that is
	of interest.

	Notification will be sent to the object or process when the specified
	change occurs.  The notification message sent depends on the type of
	change occurring.  There are pre-defined messages for many of
	the pre-defined change types.  Custom change types should use
	MSG_META_NOTIFY or MSG_META_NOTIFY_WITH_DATA_BLOCK.  The later allows
	additional information about the change, if any, to be sent in a
	global heap block.  The object or process should handle the
	notification message by doing whatever processing it needs to,
	accessing any additional information in the heap block with MemLock
	and MemUnlock.  Then the object or process's superclass should be
	called.  The block containing the additional information must not be
	freed.  It will be freed by the system when all objects and
	processes that requested notification have finished with it
	(MetaClass does this, hence the need for calling the superclass).

	The optr can be added at any time during they object's/process's life.
	Usually, a process's METHOD_UI_OPEN_APPLICATION handler or an object's
	METHOD_ATTACH(?) handler is an appropriate place for GCNListAdd.

	Note that if GCNListAdd is called while the change of interest is
	occurring (i.e. someone else is calling GCNListSend), the new optr
	will indeed get notification as it is added to the end of the
	notification list.

	If the list being added to has a status event stored with it, the event
	will be sent to the new optr as notification of the current status.

Usage:  Removal from a general change notification list
-------------------------------------------------------
	When an object or process is dying, it must remove itself from any
	general change notification lists that it added itself to.  If this
	were not done, the general change notification mechanism would try
	to send notification messages to non-existent objects -- a bad thing.
	Removal can be done like this:
		mov	bx, manufacturer_id
		mov	ax, list_type
		mov	cx, object_handle_or_process_handle
		mov	dx, object_chunk
		call	GCNListAdd
	manufacturer_id and list_type specifies the notification list to be
	removed from.  The optr for the object or process will be removed, if
	it is on the list.  Alternately, if manufacturer_id and list_type
	are both passed as 0xffff, the object or process will be removed from
	ALL general change notification lists that it appears on.  This is
	less efficient than specifying the exact list(s), however, because all
	lists will need to be searched.
	<*** remove-from-all-lists not implemented yet ***>

Usage:  Generating a general change notification
------------------------------------------------
	When a change of interest occurs and notification needs to be sent,
	the following code is used:
		mov	ax, notification_message
		<fill in message params here>
		mov	di, mask MF_RECORD
		call	ObjMessage
		mov	cx, di
		clr	dx		- if no data block passed in message,
					  otherwise must be handle of data
					  block (yes, only one allowed.)  Also,
					  must start with NotificationDataBlock-
					  Header.  NOTE:  Don may change this
					  so that this info is stored in the
					  "otherinfo" field of the handle of
					  the block, making this unecessary.
		mov	bx, manufacturer_id
		mov	ax, list_type
		mov	bp, gcn_list_send_flags
		call	GCNListSend

	notification_message will be sent to all optrs that requested to
	be notified about the change specified by manufacturer_id and
	list_type.  The message will be sent via the appropriate message
	queue, if the destination optr is run by a different thread than the
	caller.  If the same thread is used, the call will be synchronous,
	with no queue delays.

	Note that the notification message and data is passed to GCNListSend
	as a classed event (see Classed Event documentation for more info).

	The notification_message sent depends on the type of change occurring.
	There are pre-defined MetaClass messages for some of the pre-defined
	list types.  Custom change types can use MSG_META_NOTIFY or
	MSG_META_NOTIFY_WITH_DATA_BLOCK.

	In all cases, the caller of GCNListSend is responsible for setting up
	the message parameters indicating the nature of the change.  This 
	includes setting up an NotificationDataBlock whose handle may be
	passed in the message.  Note that MSG_META_NOTIFY_WITH_DATA_BLOCK should
	be used whenever a new message with such a NotificationDataBlock is
	needed, as there must be a default MetaClass handler to correctly
	deal with freeing the block once the useCount reaches zero.

	gcn_list_send_flags must be selected from GCNListSendFlags.  Current
	options are:

        GCNLSF_SET_STATUS:1
        ; Additionally saves the message as the list's current "status".
        ; The "status" message is automatically sent to any object
        ; adding itself to the list at a later point in time.
        ;
        GCNLSF_IGNORE_IF_STATUS_TRANSITIONING:1
        ; Optimization bit used to avoid lull in status when transitioning
        ; between two different sources -- such as when the source is the
        ; current target object, and one has just lost, & another may soon
        ; gain, the exclusive.  (The bit should be set only when sending
        ; the "null"/"lost"/"not selected" status, as this is the event that
        ; should be tossed if another non-null status comes along shortly)
        ; Implementation is NOT provided by the kernel primitive routines,
        ; which ignore this bit, but may be provided by objects managing
        ; their own GCN lists.  GenApplication responds to this bit by
        ; delaying the request until after the UI & app queues have been
        ; cleared, & then only sets the status as indicated if no other
        ; status has been set since the first request.  Other objects
        ; may use their own logic to implement this optimization as is
        ; appropriate.  Mechanisms which can not tolerate the delayed status
        ; setting nature of this optimization, or require that all changes
        ; are registered, should not pass this bit set.



In-Depth:  Low-level access to General Change Notification mechanism
--------------------------------------------------------------------
	Description
	-----------
	In addition to using the above three routines (GCNListAdd,
	GCNListRemove, and GCNListSend), the General Change Notification
	mechanism may also be accessed at a lower-level.  To see the motivation
	behind this, it helps to understand a bit about the internals of the
	mechanism.  When PC/GEOS starts up, a global heap block is allocated
	for the purpose of holding the various ODs that will be added with the
	GCNListAdd routine.  The ODs are organized into different lists, one
	list for each type of notification (specified by manufacturer_id and
	list_type).  There is another list that keeps track of the lists for
	each notification type.  All the lists are implemented as ChunkArrays.
	The elements of the ChunkArray for a notification-type list are the
	ODs (GCNListElement).  The elements for the list of lists hold the
	notification type (GCNListType) of the list and the
	chunk handle of the ChunkArray for the notification-type list.  The
	lists are managed by the General Change Notification mechanism so that
	when one of the three routines are called, the correct notification-
	type list is located and used.

	There are two sets of routines that provide lower-level access to the
	General Change Notification mechanism.  One allows a thread to have
	it's own list of lists and set of notification-type lists in a block
	that it owns or has access to (GCN*Block routines).  The other allows
	a thread to deal directly with notification-type lists (GCN*List
	routines).

	GCN*Block routines
	------------------
	These lower-level access routines allow a thread to have its own
	set of General Change Notification data structures in a block it
	owns, but with the General Change Notification mechanism managing
	all access to those data structures.  The same notification type
	used for the three main routines are used for these routines.  All
	that is different is that the thread maintains its own set of
	lists, allowing for more efficient handling of thread-specific
	(i.e. application-specific) notification.

	Here are the lower-level access routines and a summary of what each
	does:
		- GCNListAddToBlock	adds OD to desired list in given block
					(specified by segment, list of lists
					chunk)
		- GCNListRemoveFromBlock remove OD from desired list in given
					 block (specified by segment, list
					 of lists chunk)
		- GCNListSendToBlock	send message to ODs in desired list in
					given block (specified by segment,
					list of lists chunk)
		- GCNListFindListInBlock find list given list of lists chunk
		- GCNListInitBlock	creates list of lists chunk in given
					block

	GCN*List routines
	-----------------
	These lower-level access routines allow a thread to manage its own
	lists.  There is no list of lists.  All actions deal directly with
	a notification type list for a specific notification type that must
	be understood by the thread and any ODs that are added to the list.
	If mulitple notification types need to be handled, they must be managed
	by the thread.

	Here are the lower-level access routines and a summary of what each
	does:

		- GCNListAddToList	adds OD to passed notification type
					list (specified by segment:chunk)
		- GCNListRemoveFromList	remove OD from passed notification
					type list (specified by segment:chunk)
		- GCNFindItemInList	find OD in passed notification type
					list (specified by segment:chunk)
		- GCNListSendToList	send message to ODs in passed
					notification type list (specified by
					segment:chunk)
		- GCNListCreate		create empty notification type list
					in passed heap block (specified by
					segment)

	Usage
	-----
	Note that as with all LMem-based mechanisms, these routines may moved
	a locked block containing LMem chunks.  The routines updates the
	segment passed in if the the block moves.

	A caveat more specific to this mechanism is that if thread-managed
	lists are going to be accessed by multiple threads, those lists should
	be protected by a semaphore.  If not, one thread could be in the
	process of using a list when another thread comes in and uses the list,
	possibly moving the locked LMem block containing the list and causing
	havoc for the other thread.

See Also
--------

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------


Sample Code/Programming Tips
----------------------------

Include Files Needed
--------------------
	gcnlist.def/gcnlist.h

Assembly Tips
-------------

Debugging Tools & Tips
----------------------

See Also
--------


;------------------------------------------------------------------------------
;	Internal Structure
;------------------------------------------------------------------------------


;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

	<anytime someone asks you a question about this object, clear up
	 the documentation above to explain it, or add an entry here>


;------------------------------------------------------------------------------
;	Declaration
;------------------------------------------------------------------------------

(see Library/Kernel/LMem/lmemGCNList.asm for routine headers)

	NOTE: The section between "Declaration" and "End Declaration" is
	      copied into uilib.def by "pmake def"

Declaration
-----------

;------------------------------------------------------------------------------
;	Constants & Structures
;------------------------------------------------------------------------------

(see Include/gcnlist.def and CInclude/Objects/gcnlist.goh)

	<Use this section only for files which actually make declarations
	 relative to the mechanism, i.e. are code & not just documentation>

End Declaration
---------------

------------------------------------------------------------------------------@
