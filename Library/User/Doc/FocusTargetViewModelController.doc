COMMENT @MECHANISM DESCRIPTION-------------------------------------------------

File:		FocusTargetViewModelController
Description:	Keeping track of, & getting messages to currently active objects
Author:		doug
Date:		9/26/91

$Id: FocusTargetViewModelController.doc,v 1.13.15.1 97/03/29 03:37:26 canavese Exp $


Synopsis
--------

	         	Focus, Target, & Model Hierarchies

				       -or-

		      Keeping track of, & getting messages to
	         	     currently active objects



	The generic & visible object libraries have built in hierarchies for
	controlling the flow of keyboard data & marking the active UI gadgets,
	windows & data selections that a user has made.  They are the
	Focus, Target, View, Model & Controller hierarchies.  Nodes on the
	hierarchy store the optr of the next object down in the hierarchy which
	is currently active.
	
	The Focus hierarchy is special in that the leaf active object is
	automatically given the keyboard exclusive, & thereby receives all
	keyboard input.

	Though messages exist for modifying which objects on each hierarchy
	are active within their level, the specific UI automatically makes
	many objects the active focus and if appropriate, the active target,
	when the user clicks within the visible bounds of the object.

	Being of a hierarchical nature, the active objects within each level
	of the hierarchy are "remembered" even if the parent objects are not
	currently active.  For instance if you are typing into a text field
	of an application, click on another app, & then click on the header
	of the original application, the cursor will again blink in the same
	object as before.  This behavior works as well within Displays &
	Dialog boxes.

	Messages may be directed to objects down each of these hierachies
	using MSG_META_SEND_CLASSED_EVENT, making the hierarchies quite 
	useful indeed.  Many UI controller objects exported by libraries for
	use by applications use this message to deliver messages to key
	objects within the application.

Limitations
-----------
	* Only one object below each node in the hierarchy may have the 
	  exclusive within that level in the hierarchy.  Thus, the above
	  hierarchies may only be useful down to the GenView/VisIsoContent
	  for applications allowing multiple selections.

Alternatives
------------
	Focus:  No alternatives while in generic object world.  The specific UI
		uses the Focus hierarchy to control where keyboard data will go.

	Target, Model:
		None, if application is to be compatible with the assorted
		libraries of UI controller objects & various system utilities
		which rely on MSG_META_SEND_CLASSED_EVENT "TO_TARGET" &
		"TO_MODEL" capabilities.

	OR, as Tony said in jest:  "Use this or die" :)


Implementation Status
---------------------
	Implemented except for HINT_DEFAULT_MODEL.  There
	is also some screwy behavior with regards to HINT_DEFAULT_FOCUS &
	TARGET described below under "IMPLEMENTATION STATUS" to be fixed.
	Also -- documentation needs to be added for effect on focus/target,
	defaults, from USABLE/NOT_USABLE/ENABLED_DISABLED.  I don't know if
	objects are currently providing any kind of consistent behavior here.
	Lastly, the manner of use of the model exclusive for the
	GenUIDocumentControl is not completely sorted out.

	-- Doug

See Also
--------
	<related objects, mechanisms, modules, other documentation>

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------

	Focus	-- Where keyboard input should go;  the leaf object
		   on this hierarchy is automatically given the
		   keyboard exclusive.  Nearly every object in an
		   application may at some point or another get the
		   focus.  This hierararchy is also the default
		   "Controller" hierarchy (See below).

		   Nodes:  	GenSystem
				GenField
				GenApplication
				GenPrimary
				GenDisplayControl
				GenDisplay

				GenView/VisIsoContent

				GenInteraction (Indep. displayable only)
				GenSummons


		   Leaves:	Any object

	Target	-- Used to identify active UI display windows, views,
		   & data selections, i.e. things that are selected
		   by the user, & may then be operated on, via the
		   use of menus, dialog boxes, etc.  This hierarchy
		   is also the default "Model" hierarchy (see
		   below)

		   Nodes:	Same as Focus
		   Leaves:	Any object

	Model	-- Used to identify objects which represent the actual
		   data which the user is working with.  The
		   hierarchy by this name need only be used if the
		   Target hierarchy does not lead to the current Model
		   objects, as the Target hierarchy will be used by
		   default if the Model hierarchy is not in use, for
		   Model-related operations.  In common practice, a
		   Model hierarchy is established only for the generic
		   document objects (GenAppDocumentControl,
		   GenUIDocumentControl & GenDocument)

		   Nodes:	GenSystem
				GenApplication
				GenDocumentControl/GenDocumentGroup
		   Leaves:	GenDocument

Relationships/Context
---------------------
	<Relationship of this mechanisms to others, tree relationship of
	 objects>


Conceptual Overview
-------------------
	The Generic UI has built in a number of hierarchies for the purpose
	of controlling keyboard input flow, and identifying active windows,
	data selections, & UI components that the user is currently working
	with.  It is extremely useful that these functions are provided at
	the system level, as not only does the developer not have to code
	similar functionality, the hierarchies provide communication paths to
	data & interface componentry that is standard across applications,
	& may therefore be counted on by library objects & utility applications.

	Initial state
	-------------
	If application code does not intervene, an application will come up
	with certain objects having the exclusive within their level in the
	hierarchy, particularly on the "Focus" & "Target" hierarchies, so that
	the user may immediately begin typing or operating on the visible data.
	Which objects are so selected depends on a few factors:

		1) Objects must first be allowed to have an exclusive in
		   question.  GenClass & derivatives have an attribute
		   "GA_TARGETABLE" which must be set in order for the object
		   to be able to get the target exclusive, for example.  The
		   following classes set this bit by default upon instantiation,
		   or declaration in UIC:

		   	GenField
		   	GenApplication
		   	GenPrimary
		   	GenDisplayControl
		   	GenDisplay
		   	GenView

		   There are currently just two other such restrictions in
		   the base generic object set:

		   GenView - "GVA_FOCUSABLE" must be set in order for a view
			     to be able to get the focus.  (This bit is 
			     set by default upon instantition or declaration
			     in UIC)

		2) For all windowed objects plus the app object, the focus
		   & target, if allowed in (1) will automatically be given
		   to the object which is visually "on top" where the user
		   can interact with it.  These objects include:

		   	GenField
		   	GenApplication
			Modal GenInteraction/GenSummons (takes precedence
							 over primary windows)
		   	GenPrimary			(takes precedence over
							 non-modal windows)
			Non-modal GenInteraction/GenSummons
		   	GenDisplay

		3) The GenUIDocumentControl automatically grabs the model
		   exclusive upon attach, & releases it at detach.  This may
		   change to allow more flexibility with respect to this
		   object.

		4) For all other objects, which lie in a flat plane within a
		   single window, or don't sit in a window at all (DocCtrl),
		   the initial exclusive, within each exclusive level, will be
		   granted to the one having the following hint associated
		   with it:

		   	HINT_DEFAULT_FOCUS
		   	HINT_DEFAULT_TARGET
		   	HINT_DEFAULT_MODEL

		   If no objects have the HINT_DEFAULT_FOCUS hint, the focus is
		   generally given to the first object on the kbd navigation
		   loop.

		   NOTE: The specific UI additionally uses these hints, in
			 cases where it wishes to ensure that SOME object
			 always have the exclusive, to decided which object
			 an unclaimed exclusive should be given to.

		   IMPLEMENTATION STATUS:
			Gadgets at this time implement HINT_DEFAULT_FOCUS well,
			activating themselves as the focus whenever a default
			focus is broacasted for.  Text objects & Views respond
			to both HINT_DEFAULT_FOCUS & HINT_DEFAULT_TARGET at
			MSG_SPEC_BUILD time by instantly grabbing the exlusives.
			The Text object, but not the View, will respond to
			a broadcast for default focus, & manages to give itself
			the target as well by a gross hack:  anytime it 
			gains the focus exclusive it turns around and grabs
			the target exclusive.  This behavior should be cleaned
			up, & we should decide whether the default target
			should be broadcasted for separately.  No objects
			recognize DEFAULT_MODEL at this time.  (Will wait
			until larger model is in place to see how these should
			be used)

		5) Visible objects.  The focus/target within a .ui or .goc
		   defined visible object tree can be specified in the
		   VisContent instance data directly.  In assembly:

			focusExcl = SomeVisibleObject;
			targetExcl = SomeVisibleObject;

		   In "C":

			VCNI_focusExcl = { SomeVisibleObject, MAEF_FOCUS };
			VCNI_targetExcl = { SomeVisibleObject, MAEF_TARGET };

	User-invoked transitions
	------------------------
	The specific UI additionally provides a great amount of behavior
	in the way of changing the focus/target/etc. based on the user's
	actions, typically that of clicking on the object in question.  The
	default behavior is typically, by group:

	Focus, target if "GA_TARGETABLE:"
		GenField
		GenApplication
		GenPrimary
		GenDisplayControl
		GenDisplay
		GenSummons
		GenInteraction (window)
		GenText
		GenFileSelector
		GenList/GenListEntry
		GenRange

	Focus if "GVA_FOCUSABLE", Target if "GA_TARGETABLE":
		GenView/VisIsoContent

	Focus
		GenTrigger

	Focus if "GDA_FOCUSABLE", Target if "GA_TARGETABLE",
	Model if "GDA_MODELABLE":
		GenDocument		(on selection of document)

	No Default behavior
		GenUIDocumentControl/GenAppDocumentControl
		GenTextDisplay
		GenGlyph
		GenInteraction (non-window)
		GenSpinGadget
		GenGadget

	NOTE:	The specific UI gets to define exactly how focus &
		target selections are made intially & by the user;  while
		usually a result of a mouse press over the object, the
		specific UI is also free to implement a real-estate
		focus system.  Also, note that the focus will
		additionally be moved around between these various
		objects by way of "keyboard navigation" as defined
		by the specific UI)


	Application-invoked transitions
	-------------------------------
	May be sent to any generic or visible object, to make it
	become/release the active object on the specified hierarchy within
	its level:

		MSG_META_GRAB_FOCUS_EXCL	MSG_META_RELEASE_FOCUS_EXCL
		MSG_META_GRAB_TARGET_EXCL	MSG_META_RELEASE_TARGET_EXCL
		MSG_META_GRAB_MODEL_EXCL	MSG_META_RELEASE_MODEL_EXCL

						MSG_META_RELEASE_FTVMC_EXCL

	The following utility routines, which bypass generic & specific
	interpretations of the above messages, would also be available
	for specific UI object method handlers:

		MetaGrabFocusExclLow		MetaReleaseFocusExclLow
		MetaGrabTargetExclLow		MetaReleaseTargetExclLow
		MetaGrabModelExclLow		MetaReleaseModelExclLow

						MetaReleaseFTVMCExclLow

	The following is the internal message used to implement MSG_META_
	[GRAB/RELEASE]_[FOCUS/TARGET/MODEL]_EXCL within the
	visible & generic tree hierarchies:

		MSG_META_MUP_ALTER_FTVMC_EXCL

	Other transitions
	-----------------
	< INFO on results of USABLE/NOT_USABLE/ENABLED/NOT_ENABLED to go here >

	Status/Notification
	-------------------
	The following messages may be called on any node of its type, to get
	the optr of the current active object within that level (regardless
	of whether node itself is active):

		MSG_META_GET_FOCUS_EXCL
		MSG_META_GET_TARGET_EXCL
		MSG_META_GET_MODEL_EXCL

	The following will be received, always in pairs, by any object
	which becomes the fully active object for its hierarchy, meaning
	that it, and ALL nodes above it are all the active node within
	their level:


		MSG_META_GAINED_FOCUS_EXCL	MSG_META_LOST_FOCUS_EXCL
		MSG_META_GAINED_TARGET_EXCL	MSG_META_LOST_TARGET_EXCL
		MSG_META_GAINED_MODEL_EXCL	MSG_META_LOST_MODEL_EXCL

		NOTE:  it is important that objects intercepting these
		       messages pass them on to their superclass, so that node
		       handlers may pass the exclusive on down to their children


Warnings
--------
	* Focus & Target nodes are not built into any objects in the 
	  visible object library below VisIsoContent.  Visible objects can
	  still grab & release the focus & target exclusives from the
	  VisIsoContent, but there is no built-in hierarchy to the grabs
	  below this point.  For common uses, a hierarchy is not needed.  If
	  you are creating an application that will have multiple visible
	  layers which the user is switching between, however, you may wish
	  to add Focus & Target nodes to the top object of each visible layer,
	  in order to keep track of the current focus/target within each layer.
	  If a hierarchy is needed, the code necessary to implement a node may
	  be added to any class object you desire down the visible tree.
	  (See In-Depth: Extending a hierarchy below)
	  
	* Model nodes:  There are very few generic objects which have nodes
	  for this exclusive, as the Target & Focus hierarchies cover most
	  every situation.  Avoid extending this mechanism if you can 
	  accomplish what you need via Focus & Target extensions.


Usage: <Usage #1>
-----------------

Usage: <Usage #2>
-----------------
	<Describe the common case, then exactly what the programmer has to do
	 to completely support it.  If 1 or more "In-Depth" topics apply, refer
	 to them.>

...


Usage:  Delivery of messages to objects down the Hierarchies
------------------------------------------------------------
	
	Larger applications commonly create new UI objects or branches which
	are used to display the application's data.  Since these objects are
	created & not pre-existing in a resource of the application, messages
	may not be sent to them by name.  Even if all such objects are
	pre-defined in the resources of the applications, you may want to get
	a message to the currently selected one, not a particular one.

	The INCORRECT way to go about doing this is to query around trying to
	figure out which object is active, & then send a message to it.  The
	problem with this is that in a two-thread application model (App thread
	plus UI thread) by the time you get the optr of the destination object,
	and send a message to it, it might no longer be the active object
	(Aren't threads fun?).

	The CORRECT way to do this is to use MSG_META_SEND_CLASSED_EVENT, which
	offers a great number of "TravelOptions" for getting the message to
	the desired destination.  For example, "TO_APP_TARGET" will cause the
	message to be delivered to the current target object within the
	application.

	The more primitive "TO_FOCUS", "TO_TARGET", & "TO_MODEL" options of
	MSG_META_SEND_CLASSED_EVENT are implemented by a method handler at
	each Hierarchical node.  The basic idea is to deliver the message
	to an object somewhere down the specified hierarchy.  Which object
	this is is determined by the class stored in the "ClassedEvent":

		NULL		-> Message is delivered to the leaf object
				   in the hierarchy, that is, either the
				   first object which is not itself a node,
				   or if it is a node, where there is no
				   active object for that hierarchy below
				   that point.

		object class	-> Message is delivered to first object down
				   the hierarchy belonging to this class


In-Depth: Extending a hierarchy
-------------------------------

	If objects below a specific object class you've created will 
	be grabbing a particular exclusive, & you'd like to be able to 
	restore that exclusive to them should you lose & then regain the
	exclusive, you can get this behavior by making your object class
	implement a hierarchical node.  To implement a Focus node in
	"VisibleLayerClass," for instance:

	1) Add a new instance variable to your class of type
	   HierarchicalGrab:

		VLI_focusExcl	HierarchicalGrab

	2) Add the following message handlers to allow objects below you
	   to grab or release the focus (The various "Grab" & "Release"
	   routines & message all end up being converted to this message):

	   VisibleLayerAlterFTVMCExcl	method	VisibleLayerClass, \
	   					MSG_META_MUP_ALTER_FTVMC_EXCL

		; Check to see whether request should skip this object &
		; go on up hierarchy.
		;
		test	bp, mask MAEF_NOT_HERE
		jz	handleHere

		and	bp, not mask MAEF_NOT_HERE
		jmp	callSuper

	    handleHere:
		; Since we're a focus node, check to see if this request
		; includes a change to the focus hierarchy.
		;
		test	bp, mask MAEF_FOCUS
		jz	callSuper		; if not, skip & send to
						; superclass

		; Call Flow utility routine to handle modifying the node
		;
		push	ax			; save message
						; Utility routine requires
						; "Gained" message in ax
		mov	ax, MSG_META_GAINED_FOCUS_EXCL
		push	bp			; save original flags
						; Pass only the "GRAB" flag &
						; which hierarchy this node is.
		and	bp, mask MAEF_GRAB or mask MAEF_FOCUS
		mov	bx, offset Vis_offset
		mov	di, offset VLI_focusExcl
		call	FlowAlterHierarchicalGrab
		pop	bp			; restore original flags
		pop	ax			; restore message
						; Now that we've updated the
						; focus node, clear that portion
						; of the request from the flags
		and	bp, not mask MAEF_FOCUS

						; If request was also to
						; grab/release on other nodes,
						; pass on request
		test	bp, MAEF_MASK_OF_ALL_HIERARCHIES
		jz	done			; otherwise done.

	   callSuper:
		; Pass message on to superclass for handling outside of
		; this class.
		;
		mov	di, offset VisibleLayerClass
		call	ObjCallSuperNoLock
	   done:
		ret
	   VisibleLayerAlterFTVMCExcl	endm

      2.5) MSG_META_MUP_ALTER_FTVMC_EXCL is not deliverd to all visible
	   objects, rather only those marked as VTF_WIN_GROUP or
	   VTF_IS_INPUT_NODE.  If you have provided a handler (as in 2 above)
	   & are not a WinGroup, you will need to set the VTF_IS_INPUT_NODE
	   bit in your init routine to ensure getting the message.

	3) Add the following message handlers to pass "Gained" & "Loss"
	   message on down when your own objects gets & loses the exclusive:


	   VisibleLayerUpdateFocusExcl	method	VisibleLayerClass, \
						MSG_META_GAINED_FOCUS_EXCL,
						MSG_META_LOST_FOCUS_EXCL,
						MSG_META_GAINED_SYS_FOCUS_EXCL,
						MSG_META_LOST_SYS_FOCUS_EXCL
		mov	bx, offset Vis_offset
		mov	di, offset VLI_focusExcl
		mov	bp, MSG_META_GAINED_FOCUS_EXCL	; pass in "Base" message
		call	FlowUpdateExcl
		ret
	   VisibleLayerUpdateFocusExcl	endm

	   That's all there is to it.  Other hierarchical nodes may be 
	   created by just substituting their name for "focus" & "FOCUS" above.

	4) Implement MSG_META_GET_XXX for the object:

	   VisibleLayerGetFocus	method	VisibleLayerClass, \
						MSG_META_GET_FOCUS
		; Simply return current grab within this level, as 
		; stored in the HierarchicalGrab structure.
		;
		mov	cx, ds:[di].VLI_focusExcl.HG_OD.handle
		mov	dx, ds:[di].VLI_focusExcl.HG_OD.chunk
		stc				; Indicate successful response
		ret
	   VisibleLayerGetFocus	endm

	5) Finally, you have to extend the MSG_META_SEND_CLASSED_EVENT
	   behavior to reflect your new node.  If your object has a 
	   Focus node only, Focus requests should be redirected
	   to the OD stored in the Hierarchical grab.  For instance:

	   VisibleLayerSendClassedEvent	method	VisibleLayerClass, \
						MSG_META_SEND_CLASSED_EVENT

		; Focus & Controller requests should be passed on to the
		; object having the focus within this node's level.
		;
		cmp	dx, TO_FOCUS
		je	sendToFocus

		; All other requests should be passed to superclass for
		; handling.
		;
		mov	di, offset VisLayerClass
		GOTO	ObjCallSuperNoLock

	   sendToFocus:
		; Call handing utility routine to pass on ClassedEvent,
		; deliver here if no object to pass on to, or if can't deliver
		; here because of class requirement, destroy the ClassedEvent
		;
		mov	bx, ds:[di].VLI_focusExcl.HG_OD.handle
		mov	bp, ds:[di].VLI_focusExcl.HG_OD.chunk
		clr	di
		call	FlowDispatchSendOnOrDestroyClassedEvent
		ret

	   VisibleLayerSendClassedEvent	endm


In-Depth: Meaning of Focus, Target hierarchies above GenApplication
-------------------------------------------------------------------

The need for both Focus & Target hierarchies at the GenField & GenSystem
level is not immediately obvious.  The purpose of this section is to give
an example which points out their uses.

First, let's describe the behavior of a particular specific UI:

	* The UI is real-estate focus driven, i.e. the focus goes to
	  whatever the mouse is over.  This allows the user to enter
	  text into a field just by moving the cursor over it & then typing.

	* Keyboard shortcuts, <CR> & <ESC> would be supported without
	  changing focus.  Use of <ALT> to go to menu bar, mnemonic navigation,
	  or <TAB> would cause the mouse to dissappear & not reappear until 
	  moved, or until menu navigation was complete, or the focus leaves
	  all dialog boxes & is returned to the primary window.
	  
	* Applications & Windows are brought to the top ONLY when the header
	  of a/the window is clicked in.  This allows the user to independently
	  control window layering & interaction with the application(s).

	* In addition to the menu bars within applications, there is a global
	  menu/tool bar, placed as a child of the field window, containing the 
	  express menu, & attribute menus for common attributes (font, style,
	  area color, etc.)  This global UI would never get the target, but
	  would act on whatever application & objects within it which had
	  the target.

	* Applications, Windows & gadgets which are targetable would be given
	  the target ONLY when they are given input, that is, the mouse is
	  pressed inside of them, or the keyboard is used while the focus is
	  on them.  This would be necessary to prevent the target from moving
	  while moving the mouse up to the global menu bar.  (Or to the app
	  menu bar from within overlapping displays, for that matter)

The focus lineage would then change as the mouse was moved around the screen,
including moving to the non-targetable application presenting the global
menu/tool bar.

The target lineage would then separately change either when an application
was clicked in, or text was typed while the mouse was over an application.

The application/display/interaction on top would then have nothing to do with
either the focus or target hierarchies.

The effects of the following messages would be:

	MSG_GEN_BRING_TO_TOP		- Would raise the app/display/
					  interaction to the top, call
					  MSG_META_GRAB_TARGET_EXCL &
					  MSG_META_GRAB_FOCUS_EXCL

	MSG_GEN_LOWER_TO_BOTTOM		- Pushes window to the bottom, calls
					  MSG_META_RELEASE_TARGET_EXCL &
					  MSG_META_RELEASE_FOCUS_EXCL,
					  then tries to make sure there is
					  an active target within level, &
					  focus if in Kbd Navigation mode.

	MSG_META_GRAB_TARGET_EXCL	- Gives object target excl within level
					  if its GA_TARGET is set.
	MSG_META_RELEASES_TARGET_EXCL	- Releases target excl if object has it.

	MSG_META_GRAB_FOCUS_EXCL	- Gives object focus excl within level
					  if the mouse is over the object or
					  if the application is in
					  Keyboard Navigation mode.
	MSG_META_RELEASE_FOCUS_EXCL	- Releses focus excl if object has it.

Whereas in a typical "click to raise, give focus & target" environment:

	MSG_GEN_BRING_TO_TOP		- Would raise the app/display/
					  interaction to the top, call
					  MSG_META_GRAB_TARGET_EXCL &
					  MSG_META_GRAB_FOCUS_EXCL

	MSG_GEN_LOWER_TO_BOTTOM		- Pushes window to the bottom, calls
					  MSG_META_RELEASE_TARGET_EXCL &
					  MSG_META_RELEASE_FOCUS_EXCL,
					  then tries to make sure there is
					  an active target & focus within
					  level

	MSG_META_GRAB_TARGET_EXCL	- Gives object target excl within level
					  if its GA_TARGET is set.
	MSG_META_RELEASES_TARGET_EXCL	- Releases target excl if object has it.

	MSG_META_GRAB_FOCUS_EXCL	- Gives object focus excl within level
	MSG_META_RELEASE_FOCUS_EXCL	- Releses focus excl if object has it.


In-Depth: <Topic #3>
--------------------

...


See Also
--------
	<related objects, mechanisms, modules, other documentation>

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------


Sample Code/Programming Tips
----------------------------
	<useful code snippets, references to sample applications & a short
	 description of them>

Include Files Needed
--------------------

Assembly Tips
-------------

Debugging Tools & Tips
----------------------

See Also
--------
	<Sample apps, related tools, other documentation>


;------------------------------------------------------------------------------
;	Internal Structure
;------------------------------------------------------------------------------


;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

	<anytime someone asks you a question about this object, clear up
	 the documentation above to explain it, or add an entry here>


;------------------------------------------------------------------------------
;	Declaration
;------------------------------------------------------------------------------

	NOTE: The section between "Declaration" and "End Declaration" is
	      copied into uilib.def by "pmake def"

Declaration
-----------

;------------------------------------------------------------------------------
;	Constants & Structures
;------------------------------------------------------------------------------

	<Use this section only for files which actually make declarations
	 relative to the mechansism, i.e. are code & not just documentation>

End Declaration
---------------

------------------------------------------------------------------------------@
