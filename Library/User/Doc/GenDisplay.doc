COMMENT `CLASS DESCRIPTION-----------------------------------------------------


		        GenDisplayClass/GenPrimaryClass

$Id: GenDisplay.doc,v 1.2.34.1 97/03/29 03:37:28 canavese Exp $

Synopsis
--------
	GenDisplay and GenPrimary are high-level windowed objects that can be
	used to organize and display application information.

	GenDisplays are used under a GenDisplayGroup to provide a managed
	set of application windows under the main application window.

	GenPrimary, a subclass of GenDisplay, is the generic object used to
	implement the "main" window (or windows) of an application.

	A GenDisplay is an organizing object.  Aside from providing of a menu
	bar, near the top of the window, nothing appears in the window.  The
	application is responsible for setting up the contents of the window.

Limitations
-----------
	GenDisplays can only be used with a GenDisplayGroup.  A GenPrimary
	is only way to get a main application window with menus.

Alternatives
------------
	Other windowed objects, like GenInteraction may be used to implement
	a main application window, but it will not support menus.

Implementation Status
---------------------
	<XXX: Done as of 4/?/92>

See Also
--------
	GenDisplayGroup, GenDisplayControl

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------
	Long-Term Moniker - secondary moniker used by GenPrimary to display
			additional information.  In Motif, this is displayed
			next to the regular moniker, seperated by a '-' in the
			window header.
	Maximized - state of a GenDisplay where it takes up all the room
			available in its parent area.  The Specific UI
			determines exactly how this is implemented.  In Motif,
			a maximized GenDisplay under a GenDisplayGroup will
			fill the working area of the GenDisplayGroup.  A
			maximized GenPrimary will fill the field it is in.
			The specific UI also provides gadgets to maximized and
			unmaximized a GenDisplay.
	Minimized - state of a GenDisplay where it takes up minimimal space
			in its parent area.  The Specific UI determines exactly
			how this is implemented.  In Motif, a minimized
			GenPrimary will be represented by a "icon" in the field
			it is in.  A minimized GenDisplay under a
			GenDisplayGroup will appear only in the "Windows"
			menu provided by the GenDisplayControl.  The specific
			UI also provides gadgets to minimized and unminimized
			a GenDisplay.
	Startup - HINT_<>_ON_STARTUP applies to objects defined in .ui/.goc
			file and placed on appropriate active list, or when
			object is set usable.

Relationships/Context
---------------------
	GenDisplays must be children of a GenDisplayGroup.  A GenPrimary must
	be a child of a GenApplication.  There can be one or more GenPrimarys.
	Almost all of the generic object may be children of GenDisplays and
	GenPrimarys.

Conceptual Overview
-------------------
	Most of the convenience of a GenDisplay is in the Specific UI provided
	functionality it automatically provides to the user.  There are,
	however, some things that the application can do with GenDisplays.

	GenDisplays under a GenDisplayGroup can come up as part of the
	initial interface for an application by defining them in the .UI/.GOC
	file.  When doing this, they must also be on the active list of the
	GenDisplayGroup.  A GenPrimary, which is ususally part of the initial
	interface of an application, should be a child of the GenApplication
	object and on its active list.  GenDisplays may also be created
	dynamically.  In these cases, they can be added as children of a
	GenDisplayGroup.  They must be not GS__USABLE when added.  To make
	the GenDisplay a visible part of the application's interface, set the
	GenDisplay GS__USABLE with MSG_GEN_SET_USABLE.  To remove a GenDisplay
	from the application's visible interface, set it not GS__USABLE with
	MSG_GEN_SET_NOT_USABLE.

	MSG_GEN_DISPLAY_SET_MINIMIZED and MSG_GEN_DISPLAY_SET_NOT_MINIMIZED are
	used to minimize and unminimize a GenDisplay.
	MSG_GEN_DISPLAY_GET_MINIMIZED returns the GenDisplay's current
	minimized state.  MSG_GEN_DISPLAY_SET_MAXIMIZED and
	MSG_GEN_DISPLAY_SET_NOT_MAXIMIZED are used to maximize and unmaximize
	a GenDisplay.  MSG_GEN_DISPLAY_GET_MAXIMIZED returns the GenDisplay's
	current maximized state.

	Although the Specific UI should be allowed to determine whether a
	GenDisplay should come up maximized or minimized, the application can
	suggest one or the other with HINT_GEN_DISPLAY_MINIMIZED_ON_STARTUP or
	HINT_GEN_DISPLAY_MAXIMIZED_ON_STARTUP.  Also, as the Specific UI could
	decide to minimize or maximize on startup, the application can suggest
	against these with HINT_GEN_DISPLAY_NOT_MINIMIZED_ON_STARTUP or
	HINT_GEN_DISPLAY_NOT_MAXIMIZED_ON_STARTUP.

	In some cases, the application may require that the GenDislay not be
	minimizable or maximizable.  This can be done with
	ATTR_GEN_DISPLAY_NOT_MINIMIZABLE and ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE.
	This will disallow both the messages for minimizing/maximizing and
	disable any gadgets provided by the Specific UI that the allows user to
	minimize/maximize.  Less obvious, but just as useful is
	ATTR_GEN_DISPLAY_NOT_RESTORABLE.  This can be used on a maximized or
	minimized GenDisplay to disallow restoring it to its previous size and
	location.  This will disallow the MSG_GEN_DISPLAY_SET_NOT_MINIMIZED
	and MSG_GEN_DISPLAY_SET_NOT_MAXIMIZED messages and disable any Specific
	UI gadgets that do this.

	A GenPrimary supports a GenDisplayGroup's (see GenDisplayGroup
	documentation) ability to display multiple documents by allowing a
	secondary moniker to be displayed with its GI_visMoniker.  In Motif,
	the long-term moniker is displayed in the GenPrimary's title bar to
	the right of the GI_visMoniker, preceded by a seperating '-'.  If a
	GenPrimary has a GenDisplayGroup as a child, the GenDisplayGroup
	will use the long-term moniker to display the moniker of the target
	GenDisplay under the GenDisplayGroup.  If there is no
	GenDisplayGroup under the GenPrimary, or if the developer wishes to
	override this behavior, the long-term moniker can be used for other
	purposes.  It will still be shown to the right of the GenPrimary's
	GI_visMoniker, seperated with a '-', but can be set to anything the
	developer desires.  MSG_GEN_PRIMARY_USE_LONG_TERM_MONIKER is used to
	switch the long-term moniker to a VisMoniker chunk already existing in
	the object block containing the GenPrimary.
	MSG_GEN_PRIMARY_REPLACE_LONG_TERM_MONIKER is used to replace the current
	long-term moniker with a new VisMoniker.  The source moniker options are
	the same as those for MSG_GEN_REPLACE_VIS_MONIKER.

	A GenPrimary is used is for the main window of most applications, both
	full-function applications like word processors, spreadsheets, and draw
	programs and for utilities or desk accessories like PIMs (personal
	information managers).  When a GenPrimary is used for full-function
	applications, HINT_PRIMARY_FULL_SCREEN can be placed on the GenPrimary
	to indicate to the specific UI that it should be given a significant
	amount of screen real estate.

	While the specific UI may provide a way for the user to close a
	GenDisplay, the GenDisplay object itself provides no default
	functionality for closing.  It is wholly the responsibility of the
	application to define the behavior of closing a GenDisplay.  This
	behavior may be minimizing the GenDisplay, removing the GenDisplay from
	the GenDisplayGroup and destroying it, placing it at the bottom of
	the window stack, etc.  An application implements the desired close
	behavior by subclassing the GenDisplay and intercepting
	MSG_GEN_DISPLAY_CLOSE.  This message is sent by the specific UI when
	the user closes the GenDisplay.  It may also be sent by the application
	if it wants to close the GenDisplay.  The MSG_GEN_DISPLAY_CLOSE handler
	should do whatever is necessary to implement the close behavior.  The
	superclass need not be called as there is no default behavior.

	An exception to the application-defined close behavior is a GenDisplay
	that has an associated GenDocument (see GenDocument documentation).  In
	this case, the default handler for MSG_GEN_DISPLAY_CLOSE will send a
	MSG_GEN_DOCUMENT_CLOSE to the GenDocument.  If MSG_GEN_DISPLAY_CLOSE is
	subclassed, the superclass should be called, unless the default behavior
	is being replaced completely.

	A GenPrimary handles MSG_GEN_DISPLAY_CLOSE by quitting the application.
	This can be overridden by subclassing the GenPrimary and intercepting
	MSG_GEN_DISPLAY_CLOSE.

	The GenDisplayAttr GDA_USER_DISMISSABLE indicates whether a GenDisplay 
	is closable or not.  By default, it is set, allowing the specific UI to
	enable the gadgets that let the user close the GenDisplay.  If cleared
	by the application, the specific UI close gadgetry will be disabled.
	It can be cleared in the .UI/.GOC file or dynamically with
	MSG_GEN_DISPLAY_SET_ATTRS.  The current GDA_USER_DISMISSABLE state can
	be retreived with MSG_GEN_DISPLAY_GET_ATTRS.

	When a GenDisplay or GenPrimary is minimized, the specific UI may
	decided to represent the minimized GenDisplay or GenPrimary as an
	icon (Motif does this only for GenPrimarys).  The icon consists of a
	small picture with a single line of text under it.  The picture and
	text are built from gstring and textual monikers found in either the
	GenPrimary or the parent GenApplication object.  If the GenPrimary's
	GI_visMoniker contains a moniker list with a normal complement of
	gstring and textual monikers (i.e. for the various video modes -- see
	VisMoniker documentation), the gstring moniker and textual moniker will
	be taken from that moniker list.  If either a gstring moniker or texual
	moniker is not found in the GenPrimary's GI_visMoniker (either because
	it is a single moniker and not a moniker list or because the moniker
	list doesn't contain the appropriate moniker), the GenApplication's
	GI_visMoniker will be searched.  Normally, the GenApplication is used
	to store the moniker list.  The GenPrimary may be used to store the
	moniker list if more than one GenPrimary is used with one GenApplication
	and distinct icons are desired when the GenPrimarys are iconified.  If
	the same icon may be used for all iconified GenPrimarys, the
	GenApplication may have the moniker list.

	<window sizing hints>

Warnings
--------

Usage: <Usage #1>
-----------------
	<Describe the common case, then exactly what the programmer has to do
	 to completely support it.  If 1 or more "In-Depth" topics apply, refer
	 to them.>

Usage: <Usage #2>
-----------------
	<If more than one common case..>

...

In-Depth: <Topic #1>
--------------------

In-Depth: <Topic #2>
--------------------

...

See Also
--------
	<related objects, mechanisms, modules, other documentation>

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------

Sample Code/Programming Tips
----------------------------
	<useful code snippets, references to sample applications & a short
	 description of them>

Include Files Needed
--------------------

Assembly Tips
-------------

Debugging Tools & Tips
----------------------

See Also
--------
	<Sample apps, related tools, other documentation>

;------------------------------------------------------------------------------
;	Implementation Notes
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

	<anytime someone asks you a question about this object, clear up
	 the documentation above to explain it, or add an entry here>


;------------------------------------------------------------------------------
;	Inheritance
;------------------------------------------------------------------------------

< Add entries for every superclass, including instance data, methods & hints,
  & then document how they are used within this object.   Example: >

<List hints here, explain how, if at all they pertain to this object>


Imported Messages Handled
-------------------------

<List any imported messages handled by this class or its superclasses.>


;------------------------------------------------------------------------------
;	Declaration
;------------------------------------------------------------------------------

see Include/Objects/gDispC.def and Include/Objects/gPrimC.def for ASM
see CInclude/Objects/gDispC.goh and CInclude/Objects/gPrimC.goh for C
