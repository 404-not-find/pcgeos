COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		User Interface
FILE:		StateLazarusEngine

DESCRIPTION:	This file documents the testing of State file, App lazarus &
		Engine mechanisms of applications.

	$Id: TestingStateLazarusEngine.doc,v 1.4.15.1 97/03/29 03:38:04 canavese Exp $

------------------------------------------------------------------------------@


   Prep for debugging
   ------------------

        1. Remove any state file-deleting line that you may have your batch
	   file for starting up GEOS, as you should no longer be worried
	   about "old state files" getting in the way of debugging everything
	   else, but rather now wish to test the app as it will really be used.

	2. You'll need to be able to run in both Zoomer simulation, & in
	   "desktop" mode, in particular a .ini file that allows a swap file
	   & works in standard launch mode (i.e. "launchModel = 1",
	   & does not have "memory =" nor "maxTotalHeapSpace =" lines).  I use
	   two different .ini files, named zoom[ec].ini & desk[ec].ini to
	   make switching between the two styles as easy as copying one or the
	   other over geos[ec].ini.

   Testing state save/restore
   --------------------------
	Desktop stations use state save/restore capability whenever a DOS
	file is launched, & whenever the user Exits to DOS, & then re-launches
	GEOS.

   	Zoomer depends *heavily* on the state file mechanism, as apps are never
   	exited, but rather just "switched" to by the user, either just brought
	to the front if already running, or brought back from state if
	transparently detached since last use.  An app will need to be able to
	robustly shut down from state & restore from state repeatedly, all the
	while using the same state file.

	Since applications get shut down to state (as a result of being
	transparently detached) & restored only as needed, it's easier to
	test state file operation in isolation, to ensure correct
	functionality, than by normal use, where apps may or may not end up
	just being cached & not shut down/restored at all.  Some things
	to try:

	In the EC software, with swat attached:

        1. Run the app, use it, "Exit to DOS", & then restart the unit.  It
           should come back exactly where left off, (& should not crash,
           of course).  You will want to test many cases of dialogs being
           used or not used, data present but not entered in various places,
           etc.  All this simulates the app having to be shut down to state,
           & then reloaded as the app is "Activated" or started back from
           state.

        2. Try the above using various debugging aids in swat.  (Note that
	   the kernel is required to be loaded to change the level of "ec",
	   so in starting back up, you'll need to break after the kernel
	   has loaded, or use "spawn geos" to get to that point.)

                - Using "ec +lmemObject +segment" to get the system to push
                  blocks & chunks around for you more often than normal
                  occurs (bug can & does legally occur)

                - Using "freeze" to freeze various high priority threads,
                  to ensure that the code doesn't depend on probably
                  execution sequences.

		- Using "ec all".  This is painfully slow, but it is worth
		  it to try once (while you're leaving for lunch, say), just
		  to make sure it passes the test)

	Tips:


	* General rules:

		1. IgnoreDirty should not be used on any generic objects
		   outside of the specific UI library code itself (which is then
		   reponsible to make sure it isn't messing itself up,
		   but at least can do this because it alone is responsible
		   for the ramifications).

		2. Any connected set of generic objects, i.e. any branch,
		   either in the .ui file, or at detach time, whether usable
		   or not, should be either completely detachable or completely
		   not detachable.  These branches can then be added & removed
		   at the program's liesure, though at detach time:

		3. Any generic tree that's fully usable (i.e. part of the
	 	   main tree) at detach time should be completely detachable,
		   i.e. should reside completely in detachable blocks.  (Again,
		   the spui can do it's own thing here since it knows exactly
		   what the internal constraints are for its implementation of
		   the UI)

	* For the greatest efficiency in in-memory & in-state-file storage
	  requirements of an object branch where it's known when an object
	  branch is going to be used & when no longer used, or were multiple
	  copies of the same branch may be needed, use object templates.
	  To set up a template, place the UI branch in a single resource,
	  marked as read-only & sharable in the .gp file.  Mark it as
	  detachable in the .ui/.goc files if you ever want copies of it
	  saved to state.  Leave the branch separated from the main tree &
	  mark the top object as not usable.  Objects in template blocks
	  are never directly messaged.  Rather, to use:

		1. Call ObjDuplicateResource to create an in-memory copy
		   of the UI branch.  You can then reference/message objects
		   in it using the handle returned by ObjDuplicateResource,
		   & the offset of the original object.  To get on-screen,
		   add the top object into the main tree, & set it USABLE.
		   (If it is a GenInteraction, you'll need to additionally
		   call MSG_GEN_INTERACTION_INITIATE to get it on screen.)
		   If on-screen at the time of detach, the block will be
		   saved to state (If the template was marked as detachable,
		   that is.  If marked notDetachable, then the branch mus
		   be removed before going to state, as it won't be saved)

		2. When done with the UI, send a MSG_GEN_DESTROY_AND_FREE_BLOCK
		   to the top object in the block, which will remove it from
		   the tree, set it not USABLE, & destroy the block, all as
		   efficiently as the specific UI knows how to do.  If you
		   don't want on-screen copies ever to be saved to state,
		   this must be done for all created blocks before the return
		   of MSG_GEN_PROCESS_CLOSE_APPLICATION.  If this isn't done,
		   the block will simply be saved to state & later restored.
		   Duplicates always destroyed before going to state, though,
		   may have their template marked as notDetachable in the
		   resource file.

	  Where possible, use the built-in UI facilities for taking advantage
	  or managing the use of templates for you.  These are:

		1. UserCreateDialog/UserDoDialog/UserDestroyDialog.  These
		   work much like UserStandardDialog but allow you to
		   specify the UI branch for the dialog, in template form.
		   These templates should be marked read-only, shared, and
		   can additionally be marked notDetachable, because 
		   UserDoDialogs are never saved to state -- they are always
		   knocked off screen by the UI, with a return value of IC_NULL,
		   when a detach request comes in (this is so that the
		   DETACH itself can proceed).  All uses of UserDoDialog &
		   UserStandardDialog must deal with the possibly of a return
		   value of IC_NULL, generall by taking the safest action.

		2. Using subclass of GenControl.  Part of the specication
		   of a GenControl subclass is the generic branch of UI to
		   be duplicated & used.  Additionally, a branch of tools to
		   be used can be specified.  GenControl templates are also
		   not saved to state, & can therefore be marked notDetachable.

	* Though somewhat easier to use, there is less freedom w/regards to
	  in-memory & state file space usage by UI resources that are not
	  templates.  Non-read-only UI resources, once loaded, will stay in
	  memory until the app leaves.  If the machine has swap space, they
	  will commonly be swapped out while not in use.  If it does not, the
	  block ends up just filling valuable heap space.  Detachable UI
	  resources are saved to state.  It is possible to mark certain
	  resources as "notDetachable", but any one generic object branch
	  must be entirely detachable, or entirely "notDetachable".  The
	  object branch starting at GenApplication must be left detachable.
	  The "notDetachable" indication may be used on objects branches
	  that are added dynamically, & removed dynamically before the
	  application goes to state, such as:

		- Object branches added & set usable wherever needed or in
		  MSG_GEN_PROCESS_OPEN_APPLICATION & set not usable & removed
		  when no no longer needed or in
		  MSG_GEN_PROCESS_CLOSE_APPLICATION at the latest.

		- Object branches added & removed by an object, where that
		  object is on the active list for the application, on
		  its receiving MSG_META_ATTACH & MSG_META_DETACH.

	  As resources of an application cannot be freed, & unfortunately can't
	  even be marked as DISCARDABLE (because of the need to adequately
	  flush the queues of events destined for objects in the block & 
	  the possibility of re-use at any time), it's not possible to keep
	  non-template resources from lingering around memory once they
	  are used.  "notDetachable" resources never go to state, though, and
	  It is possible to keep detachable ones from going to state:

		1. The branch should start out separated from the main tree,
		   with the usable bit cleared.

		2. When needed, lock the block with ObjLockObjBlock,
		   set the LMF_DETACHABLE bit (in case it was cleared earlier
		   as you'll see in a moment) in the LMBH_flags in the
		   LMemBlockHeader structure at the start of the block (you'll
		   need to include lmem.def/.h to do this), & then unlock
		   it (with MemUnlock).  Then, add the branch into the main
		   generic tree & set USABLE as usual.  (If it is a
		   GenInteraction, you'll additionally need to call
		   MSG_GEN_INTERACTION_INITIATE).

		3. When it's no longer needed, or in
		   MSG_GEN_PROCESS_CLOSE_APPLICATION at the latest,set it
		   NOT_USABLE, and remove it from the tree.  Then, use
		   ObjLockObjBlock again and AND out the LMF_DETACHABLE bit
		   set earlier, followed by a MemUnlock.  The block will not
		   be saved to state.

	  Then again, if you've already got your code to the point where
	  its adding & removing UI branches, I'd highly suggest changing
	  the UI branch to start out in a template, so that the block
	  may be destroyed when no longer needed, thereby going to state
	  only when needed, & taking up heap space only while needed.


   Testing "Application Lazarus"
   -----------------------------
	In GEOS, if an app is selected from the express menu (or the hard
	icon bar), the system first looks to see if an instance is already
	running in the system.  If one is found in "app mode", that is, on
	screen, it is simply brought to the front.  If the app is running,
	but only in "engine mode" (not visible, used only for token
	installation), it is opened in "app mode" for user use (the app
	receives a MSG_GEN_PROCESS_OPEN_APPLICATION)  If the app is in
	the process of detaching, i.e. is transitioning from app mode to
	engine mode (which apps to before exiting the system), a flag is
	set such that at completion of the transition, the app is started
	back up into "app mode", that is, receives another
	MSG_GEN_PROCESS_OPEN_APPLICATION, without actually ever leaving the
	system.  We refer to this as an Application Lazarus.
	
	On Zoomer, this can happen if an app has started to transparently
	detach as the result of another app being loaded.  If, before the 
	app has exited, the user selects the app again, it will be Lazarused,
	instead of launched again.  The "Activating" dialog does not appear
	in this case.  To test:

	In the EC software, with swat attached:

	1. On a desktop-style system, i.e. one not using the transparent
	   launch model (So that a Close application  icon will appear),
	   launch the application, then be prepared to do some careful
	   timing:  You will need to hit the close icon, then attempt to
	   re-launch the application (via either the hard icon bar or
	   express menu) right after the app's window has dissappeared from
	   the screen, but before it exits from the system.  You will know
	   if the app has been "Lazarus"'d by virtue of the fact that the
	   app has not exited the system, as indicated by the lack of a
	   "Thread 0 of zmanager exited 0"-type message appearing in swat.
	   This is easier to accomplish on a slow machine, although just
	   the fact that you're running the EC software may do the trick.

	2. Repeat, after using most all features of the application.

        3. Try the above using various debugging aids in swat.  (Note that
	   the kernel is required to be loaded to change the level of "ec",
	   so in starting back up, you'll need to break after the kernel
	   has loaded, or use "spawn geos" to get to that point.)

                - Using "ec +lmemObject +segment" to get the system to push
                  blocks & chunks around for you more often than normal
                  occurs (bug can & does legally occur)

                - Using "freeze" to freeze various high priority threads,
                  to ensure that the code doesn't depend on probably
                  execution sequences.

		- Using "ec all".  This is painfully slow, but it is worth
		  it to try once (while you're leaving for lunch, say), just
		  to make sure it passes the test)

   Testing Token installation
   --------------------------
	Token installation of the apps shipped on desktop products,& those
	built-in apps on Zoomer will generally not be something the user
	sees, but this is something that needs to work for plug-in cards,
	add-on products, upgrades, etc.

	In the EC software, with swat attached:

	1. Delete \PRIVDATA\TOKEN_000.DB.  Startup & go to the File Manager.
	   traverse to all directories containing applications.  Each app
	   will be launched in turn, in engine mode, & instructed to installs
	   its token(s), then exited.  "Exit to DOS", & repeat (one crash
	   that came up recently happened one out of every 10 times, so you
	   will likely want to do this a couple dozen times)

	   NOTE:  Errors in launching, such as "Insufficient Heap Space" are
	   not reported for token installation in File Manager.  Rather, the
	   token is just not installed & the default token appears.  One problem
	   that I have noticed is that some apps have a large heapspace
	   requirement such that while they run on Zoomer (total heapspace
	   around 31000), they will not run on a desktop system set at
	   21000).  To perform this test, you will likely have to up the
	   maxTotalHeapSpace line in your .ini file to Zoomer level (31000
	   at this writing) Doing this will allow these apps to be loaded,
	   but if the value is larger than that generated by the TCL
	   function "heapspace total" on the machine, don't be surprised if
	   it later allows too many apps to be cached & runs out of memory
	   as a result.

        2. Try the above using various debugging aids in swat.  (Note that
	   the kernel is required to be loaded to change the level of "ec",
	   so in starting back up, you'll need to break after the kernel
	   has loaded, or use "spawn geos" to get to that point.)

                - Using "ec +lmemObject +segment" to get the system to push
                  blocks & chunks around for you more often than normal
                  occurs (bug can & does legally occur)

                - Using "freeze" to freeze various high priority threads,
                  to ensure that the code doesn't depend on probably
                  execution sequences.

		- Using "ec all".  This is painfully slow, but it is worth
		  it to try once (while you're leaving for lunch, say), just
		  to make sure it passes the test)

    "Final exam"
    ------------
	In the Non-EC software:

	1. On a desktop-style system, i.e. one not using the transparent
	   launch model, and having a fair amount of memory & a swap file,
	   select *all* apps being tested & "File" "Open" them.  Once the
	   launch is complete, use the apps a fair degree and then "Exit to DOS"
	   to shut all apps down to state.  Start up GEOS again, which will
	   re-launch all apps from state.  Repeat this use-apps, "Exit to DOS"
	   & re-launch cycle 30 times, checking to make sure that the state
	   files to not continue to grow in size, but stabilize at some point.
	   If the apps pull through this OK, they will be in good shape for
	   extended use.

	2. Try extended Zoomer use.  Spend an hour using Zoomer, with an
	   emphasis of switching between apps, using desk accessories, etc,
	   spending only 0-30 seconds within each app, though trying to hit
	   all of the functionality over that hour.  This will test both
	   state-saving & app-lazarus in "real-life" situations.

	3. Delete \PRIVDATA\TOKEN_000.DB.  Startup and go to the File Manager.
	   traverse to all directories containing applications.  Each app
	   will be launched in turn, in engine mode, & instructed to installs
	   its token(s), then exited.  Repeat 30 times.


