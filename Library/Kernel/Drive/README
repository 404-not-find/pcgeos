11/29/90

This file provides a general overview, from high altitude, of the structure of
the Drive module of the kernel.

*******************************************************************************
				 FILE LAYOUT
*******************************************************************************

The Drive module is responsible for discovering the drives available in the
system and providing very low-level (read: sector) access to the drives in a
consistent manner. As such, most of its code lies in kinit and is much more
dependent on the particular DOS version under which GEOS is running than any
other part of the kernel (since the filesystem driver masks most other
dependencies from the kernel).

The different files (not including the standard .def files) that make up the
module contain the following sorts of things:

	driveEC.asm		EC code, as you might expect.

	driveHigh.asm		This is the kernel- and system-global API for
				the module, meaning that any non-initialization
				function that can be called from outside the
				kernel, or from another module, resides in
				this file.

	driveInit.asm		This is, as the name implies, the code for
				initializing the Drive module. It is heavily
				DOS-version dependent.

	driveLow.asm		These are utility routines used by driveHigh and
				driveInit.asm

	driveManager.asm	The usual.

	driveMedia.asm		Utility routines for building parameter blocks
				for all the drives. This is not currently
				used, but exists in case we ever support the
				formatting of fixed disks.

*******************************************************************************
				THE DRIVE MAP
*******************************************************************************

InitDrive(), located in driveInit.asm, is the driving function for
initializing the module, as you'd expect. When it's complete the array
"driveStatusTable" contains an entry for each available drive in the system,
giving the following information about each:

	1 If the disk can be removed from the drive.
	2 If the disk is located on a network server. Some drives have this
	  bit set even though they're local, owing to the way they're accessed
	  (via MS-NET software interrupt protocols).
	3 If the disk partition is greater than 32 Mb. This is mostly used
	  internally to determine what interface to use when reading or
	  writing a sector on the drive.
	4 The type of drive: 5.25", 3.5", fixed, RAM, CD-ROM, 8", or unknown.
	5 The highest-density media that can be read or written by the drive.
	6 If the drive has a change line that can tell if the drive door has
	  been opened or if the disk in the drive has changed.
	7 A far pointer to the DOS-level device driver for the drive.
	8 The subunit number of the drive from the DOS-level device driver's
	  perspective.
	9 The number of bytes in a sector on the device.
       10 A far pointer to the DeviceControlBlock DOS uses to handle the
	  drive.
       11 A ModuleLock to provide exclusive access to the drive.

Not all fields will be initialized for all drives. The most notable exceptions
are the device-driver/subunit/device control block/sector size for network
disks.

The most common way to access the drive map is via the DriveGetStatus call,
which returns in AH the first 4 elements of the above list. It is also
possible to find the default media for the drive (#5), or see if a drive
supports a particular media density. A caller can also get a far pointer to
the entire drive map entry for a particular drive, though this is seldom done.

Much of this information is gleaned from DOS-internal data structures, most
notably the DeviceControlBlock chain that DOS maintains. For DOS versions 3.1
or above, InitDrive also looks at the "Current Directory Table", also known as
the "Logical Drive Table" so it knows whether the drive is a network drive,
JOINed, SUBSTed, or whatever (these last two are ignored and do not show up in
the drive map, as they cause serious trouble for other parts of the kernel).

*******************************************************************************
				GENERAL NOTES
*******************************************************************************

The Drive module makes use of the filesystem driver for one function: to
determine if the disk in a given drive has been changed since the last access.
Its use is very simplistic (it just locks the auxiliary sector buffer in the
Disk module and calls the DR_FS_CHECK_MEDIA function of the fs driver), but it
does require the fs driver be loaded and active.

The other functions of the Drive module that are not related to querying the
drive map are DriveLock, DriveUnlock, DriveReadSectors and DriveWriteSectors.

DriveLock and DriveUnlock use the ModuleLock in the drive map for the drive to
provide exclusive access to a drive. This was added primarily to prevent any
access to a drive where formatting is taking place. Formatting used to be
protected by the then-monolithic DOS semaphore. When the synchronization of
the File module was broken into finer-grained module locks, this protection
was lost.

Few things call DriveLock and DriveUnlock directly (DiskFormat being a notable
exception to this), using instead the Disk module interface (and thus a disk
handle, not a drive number) to this functionality.

DriveReadSectors and DriveWriteSectors provide sector-level access to disks,
while also handling disk changes for those versions of DOS that don't handle
them on absolute sector reads (all versions of MS-DOS). The only other thing
of note in these functions is, when reading or writing the 0th track
(actually, absolute sectors 0 through 7) of a floppy drive, they will use the
INT 13H interface in preference to the INT 25H/INT 26H DOS calls. This is to
avoid problems with DOS-cached sectors from track 0. We don't use it for
sectors above 7 as we can't be sure if they're on track 0 in the majority of
the cases when DriveReadSectors is called (when we're trying to determine the
geometry of the disk that's in the drive).
