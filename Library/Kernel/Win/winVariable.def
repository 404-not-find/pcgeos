
COMMENT }-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved


PROJECT:	PC GEOS
MODULE:		Win
FILE:		winVariable.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains the variables for the Heap module.

	$Id: winVariable.def,v 1.1 97/04/05 01:16:17 newdeal Exp $

-------------------------------------------------------------------------------}

idata	segment

				; Semaphore for futzing w/window tree
				;	& multiple window region
				;	region recalculations
winTreeSem	Semaphore	<1,>

				; Semaphore for accessing wPtrFinalWin,
				; W_gadgetPtrImage, W_winPtrImage & calling
				; WinActivatePtrImages (which calls
				; ImSetPtrImage to adjust PIL_GADGET &
				; PIL_WINDOW image levels)
				; Grab semaphore around entire operation
				; involving these variables.  This semaphore
				; is lower level than winTreeSem, but higher
				; than the P/V of windows.
winPtrImageSem	Semaphore	<1,>


;
;	Rectangular region
;	Drawn with ax, bx, cx, dx = bounds
;
; This is not only used in the window code, it is also used in the
; graphics region code. See GrSetClipRect().
;
rectRegion		label	word
	word	PARAM_1-1,					EOREGREC
	word	PARAM_3, PARAM_0, PARAM_2,			EOREGREC
	word	EOREGREC

ife	USE_SAVE_UNDER_REG
					; Storage for rectangular
					;	save-under region
underRegion		label	word
underRegionTopM1		label	word
	word					;top-1
	word	EOREGREC
;underRegionBottom	label	word
	word					;bottom
underRegionLeft		label	word
	word					;left
underRegionRight		label	word
	word					;right
	word	EOREGREC
	word	EOREGREC
endif
	even


idata	ends

;---

udata	segment



;------------------------------------------------------------------------------
;	Variables used for basic window operations
;------------------------------------------------------------------------------

					; wChangeBounds.  Temporary storage
					;	for area under change while
					;	traversing tree.  Used to
					;	avoid useless work by testing
					;	for regions not being affected
					;	by virtue of being outside
					;	wChangeBounds.
					; Window being changed in operation
wCurBranch		hptr.Window ; current branch being validated
wChangeWin		hptr.Window ; branch being changed

wChangeBounds		Rectangle

wValidateFlags		WinValidateFlags
wChangeSaveUnder	byte	(?)

	even



;------------------------------------------------------------------------------
;	Variables used for Enter/Leave Change Notification
;------------------------------------------------------------------------------
;
;         ***********!!!!!!  PLEASE NOTE !!!!!!!!!************
;
; Many of the below variables are not typed as well as they should be, but
; there is a reason for this.  The kernel does not currently have a
; udata segment which is 0'd out on init.  These variables are in idata.
; Therefore, if we want them to have an initial value of 0, we have to put in
; a 0 instead of the typing information.

				; Recipient of MSG_META_WIN_CHANGE.  Must
				; have ints off to set or retrieve.
wPtrOutputOD	optr

wPtrEventQueue	hptr		; Queue holding ptr events
				; accumulated through pass of window tree
wPtrSendQueue	hptr		; Queue holding "finished" events to be sent
				; to the UI.



if      (WIN_ENTER_LEAVE_CONTROL)
WinChangeFlags	record
	WCF_MOUSE_GRABBED:1,
	; Set if mouse has been grabbed for exclusive use
	; by one or more windows.
	;
	WCF_IMPLIED_CHANGE_SENT:1,
	; Set if, during any one traversal of the
	; window system, a MSG_META_IMPLIED_WIN_CHANGE
	; has been sent out.  Used to insure no more
	; that one is sent.
	;
	WCF_FLUSHING_QUEUE:1
	; Set if we're in the routine WinFlushSendQueue.  Used to 
	; cause flushing to only happen at first entry & not reentrant
	; entries.
	;
	:5
WinChangeFlags	end
else
WinChangeFlags	record
	WCF_IMPLIED_CHANGE_SENT:1,
	; Set if, during any one traversal of the
	; window system, a MSG_META_IMPLIED_WIN_CHANGE
	; has been sent out.  Used to insure no more
	; that one is sent.
	;
	WCF_FLUSHING_QUEUE:1
	; Set if we're in the routine WinFlushSendQueue.  Used to 
	; cause flushing to only happen at first entry & not reentrant
	; entries.
	;
	:6
WinChangeFlags	end
endif


;
wPtrChangeFlags	byte	0	; WinChangeFlags describing state of enter/leave
				; notification system


if	WIN_ERROR_CHECK
wPtrRawWin	hptr	0	; RAW_ENTER/LEAVE state
endif


;------------------------------------------------------------------------------
;	 Ptr location & save-under info at start of each WinRedoMovePtr call
;------------------------------------------------------------------------------
;
; The variables below are used only by WinMovePtr, WinRedoMovePtr,
; and WinForceWinChange
;
; NOTE:  INTS must be off to access:

				; current ptr location (set by WinMovePtr)
wPtrLocAtWinMovePtr	Point 	<0,0>

				; current tree ptr is in (set in WinMovePtr)
wPtrTreeAtWinMovePtr	hptr	0

				; Save under areas that ptr is in
wPtrSUFlagsAtWinMovePtr	byte	0


;------------------------------------------------------------------------------
;	 Vars shared between WinMovePtr & WinChangAck
;------------------------------------------------------------------------------
;
; These variables are set during the traversal of the window system in following
; the movement of the mouse, & tested against in WinMovePtr
;
; NOTE:  INTS must be off to access
;
wPtrChangeCount	word	0		; # of pending MSG_META_WIN_CHANGE's
					; inc'd before sending of method,
					; dec'd after WinChangeAck completed.

wPtrTestBounds	Rectangle <0,0,0,0>	; Must be assumed to be invalid if
					; wChangeCount != 0



;------------------------------------------------------------------------------
;	 Variables used to keep track of last traversed pointer position
;------------------------------------------------------------------------------
;
; Basic ptr tracking variables.
; NOTE:  MUST have winTreeSem to access the following variables:
;

wPtrLastLoc	Point 	<0,0>
wPtrLastTree	word	0	; last window tree that ptr was in (set to
				; 0 if destroyed)
				; Last video driver

wPtrImpliedWin	word	0	; Last window ptr was in (set to 0 if destroyed)
				; Bounds of rectangle in region that pointer
				; as last in
wPtrImpliedWinProc	word	0	; Process owning last window that ptr
				; was in
wPtrImpliedWinOD	dword	0	; Input OD of above window



;------------------------------------------------------------------------------
;	 Variables used to implement window grabs
;------------------------------------------------------------------------------
;
; NOTE:  MUST have winTreeSem to access the following variables:
;

if      (WIN_ENTER_LEAVE_CONTROL)
wPtrGrabCount	word	0	; # of grabbed windows  - if 0, mouse is
				; allowed to enter any window.  if non-zero,
				; mouse may only enter grabbed windows

wPtrWinAtGrab	hptr.Window	; Location of ptr when the grab was
wPtrTreeAtGrab	hptr.Window	; started.  Is used to update windows
				; when the grab is released.


wPtrLastGrabWin	hptr.Window	; Last grabbed window that ptr was in
				; If wPtrImpliedWin doesn't match this,
				; then WinChangeAck returns current
				; window of 0, indicating that the
				; ptr is not in one of the grab windows
endif


wGeodeWinVarsOffset	word	; offset to GeodeWinVars structure in 
				; Geode private data area
				; Requires wPtrImageSem to reference.

				; Temporary buffer for storing data
				; fetched from Geode private data
				; Requires wPtrImageSem to use.
wGeodeVarsBuffer	GeodeWinVars

				; Active Geode, if any.  Supercedes implied
				; Geode.  Set directly via WinSetActiveGeode
				; Requires wPtrImageSem to reference.
wPtrActiveGeode	hptr.GeodeHeader

				; Final window, as determined, set, & tested
				; in WinCommonEnd routine.  Indicates which
				; window's PtrImage data will be used for
				; the PIL_GADGET & PIL_WINDOW levels.
				; Requires wPtrImageSem to reference.
wPtrFinalWin	hptr.Window

				; Geode owning above window, as determined, set
				; & tested in WinCommonEnd routine. 
				; Indicates which Geode's PtrImage data will
				; be used for the PIL_GEODE level.
				; Requires wPtrImageSem to reference.
wPtrFinalGeode	hptr.GeodeHeader
				

;------------------------------------------------------------------------------
;	 Variables used to implement window exclusion within Enter/Leave
;------------------------------------------------------------------------------
;
; NOTE:  MUST have winTreeSem to access the following variables:
;

if      (WIN_ENTER_LEAVE_CONTROL)
				; Location of ptr when an excluded
				; window branch was entered.  Used so
				; that we can update windows when
				; the branch is included again.

wPtrWinAtExclude	hptr.Window
endif


;------------------------------------------------------------------------------
;	 Temporary variables used within Enter/Leave
;------------------------------------------------------------------------------

				; Handle of window that ptr is actually in,
				; as determined by WinLocateCommon.  Used
				; only when the mouse is in an area having
				; a save under in effect, to make sure that
				; the enter/leave stuff leaves the mouse in
				; the correct window when all is said & done.
wPtrLocatedVisWin	hptr	0


				; Temp storage for use within
				; WinProcessEventGroup, where it passes this
				; data to a callback routine
;
WinProcessEventData	struct
	WPED_wPtrWin		hptr
	WPED_wPtrWinProc	hptr
	WPED_wPtrWinOD		optr
WinProcessEventData	ends
;
wPtrProcessEventData	WinProcessEventData


;;; wPtrNewTree	hptr		; Holds wPtrTree while being processed in
				; WinCommonTraverse

udata	ends
