COMMENT }----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Timer
FILE:		timerVariable.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains the variables for the Heap module.

	$Id: timerVariable.def,v 1.1 97/04/05 01:15:31 newdeal Exp $

------------------------------------------------------------------------------}

udata	segment

timerSave	fptr.far	;old timer interrupt

if	HARDWARE_RTC_SUPPORT
GULL <oldRTCHandler	fptr.far	;old real-time clock interrupt handler>
endif

totalCount	dword		;used to compute system idle time

cpuSpeed	word		;CPU speed (ratio to base XT * 10)

	; The following variables are for the time and date keeping
	; Don't change the order of years -> seconds!

years		word		;years since 1980
months		byte
days		byte
dayOfWeek	byte
hours		byte
minutes		byte
seconds		byte

hundredCount	byte

if	INTERRUPT_RATE gt 255
ticks		word
else
ticks		byte
endif

if 	NO_ACTIONS_UNTIL_OLD_TIMER_RETURNS
nestedOldInts	word		; number of handed-off timer interrupts active
endif

udata	ends

;---

idata	segment

	even

if DECAY_TIME ne INTERRUPT_RATE
 if	DECAY_TIME gt 255
decayCount	word	DECAY_TIME
 else
decayCount	byte	DECAY_TIME
 endif
endif
	even

systemCounter	dword	0	;system counter. Incremented for each 60-ips
				;clock tick.

timeListPtr	hptr.HandleTimer	;head ptr of timer list

realTimeListPtr	hptr.Handletimer	;heap ptr of real-time timer list

timerID		word	0	;ID used to verify timer stuff. incremented
				;before use, but never allowed to be 0, as
				;that's the ID returned for continual timers
				;and is how we know whether the caller thinks
				;the timer is continual or one-shot

unitsLost	word	0	;units lost due to timer programming problems
				;(required interval was shorter than
				;MINIMUM_TIMER_VALUE, so the slop we introduced
				;to deal with that is recorded here and must
				;be made up for on the next interval).

currentTimerCount	word	GEOS_TIMER_VALUE	;current timer value

unitsSinceLastTick	word	0	;The number of timer units that have
					;passed since the last tick that are
					;not acounted for in the difference
					;between currentTimerCount and the
					;current value of the timer

timebaseDeficit		word	0	;The number of timer units lost getting
					;the timebase stable again. This happens
					;on the timebase interrupt following the
					;firing of the final ms-timer. To get
					;out of reprogramming the timer to
					;GEOS_TIMER_VALUE-the_time_since_the_
					;timebase_interrupt_happened each time
					;through TimerInterrupt, we record the
					;units sacrificed at that point here,
					;then take it out of the interval
					;programmed for the first ms-timer to
					;become active after that point.

msTimerFlag	byte	0	;True if a special timer value is set for
				;a milisecond timer

timerInitialized byte	0	; set non-zero once InitTimer is called

passCount	word	PASS_COUNT_TIMES_10000


ifidn	HARDWARE_TYPE, <RESPG2>
    possibleChange	ResponderMachineStatus 0
endif

idata	ends
