==========
COMMENT
@----------------------------------------------------------------------

FUNCTION:	ComputeCPUSpeed

DESCRIPTION:	Compute the CPU speed by timing a known loop

CALLED BY:	SetTimerInterrupt

PASS:
	ds - kernel variable segment

RETURN:
	cpuSpeed - set

DESTROYED:

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	1/91		Initial version

------------------------------------------------------------------------------@


	; Base count is 53666, so the number should be 1118, but that gives
	; the wrong result.  This seems to give the right result.

BASE_XT_TOTAL_COUNT_DIV_BY_30_MUL_10_DIV_16	=	2817

versionKeyStr		char	"version", 0
versionCategoryStr	char	"system", 0


ComputeCPUSpeed	proc	near

if not KERNEL_EXECUTE_IN_PLACE and (not FULL_EXECUTE_IN_PLACE)

	; to make the computation of totalCount consistent on 386's, it is
	; essential for the paragraph offset of the loop used here (waitLoop)
	; to be the same each time.

	mov	ax, offset countLoop
	and	ax, 15
	jz	noMoveNecessary

	; need to move the loop backward ax bytes

	push	ds
	segmov	ds, cs
	segmov	es, cs
	mov	si, offset countLoop		;source = countLoop
	mov	di, si
	sub	di, ax				;compute dest
	mov	cx, (offset endCountLoop) - (offset countLoop)
	rep	movsb

	; store nop's at the end

	mov	cx, ax
	mov	ax, 0x90		;nop
	rep	stosb
	pop	ds
noMoveNecessary:
endif
	mov	bx,offset runQueue	;for testing...
	mov	ds:[runQueue],0
	mov	ds:[ticks],2 + 2

	; wait to sync on first interrupt...

if	INTERRUPT_RATE gt 255

	mov	ax, 2
waitLoop:
	cmp	ax,ds:[ticks]
	jnz	waitLoop

else

	mov	al, 2
waitLoop:
	cmp	al,ds:[ticks]
	jnz	waitLoop

endif

	; time this loop...

	nop				;16 nop's so that we can move the
	nop				;loop (above)
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

countLoop:
	cmp	word ptr ds:[bx],0
	jnz	endCountLoop
	inc	ds:[curStats].SS_idleCount.low	;increment double word
	jnz	countLoop
	inc	ds:[curStats].SS_idleCount.high
	jmp	countLoop

endCountLoop:

	; divide count by magic number to get CPU speed

	; ugly math here to keep precision.  The count that we have is for
	; two interrupts (1/30 of a second).  Multiply this value by 16, then
	; divide by BASE_COUNT/(30*10/16).  This leaves us a value * 10
	; speed of the machine.

	clr	dx		; reset idleCount for COmputeDispatchLoopSpeed
	mov	ax, dx		;  as we fetch the idleCount we got
	xchg	dx, ds:[curStats].SS_idleCount.high
	xchg	ax, ds:[curStats].SS_idleCount.low	;dx:ax = count
	mov	cx, 4
10$:
	shl	ax
	rcl	dx
	loop	10$

	; check for right kernel version
	push	ds, ax, dx
	segmov	ds, cs, cx
	mov	si, offset versionCategoryStr
	mov	dx, offset versionKeyStr		
	call	InitFileReadInteger
	jnc	gotValue

	pop	ds, ax, dx
	jmp	versionError	
gotValue:
	dec	ax
	dec	ax
	dec	ax
	dec	ax
	tst	ax
	pop	ds, ax, dx
	jne	versionError	
	
	; check for overflow on fast CPU before hand
	; fix fast CPU bug
	cmp	dx, 0x0b00
	jbe	noOverflow

	mov	dx, 0x0b00
	mov	ax, 0xffff

noOverflow:
versionError:
	mov	cx, BASE_XT_TOTAL_COUNT_DIV_BY_30_MUL_10_DIV_16
	div	cx
	cmp	dx, BASE_XT_TOTAL_COUNT_DIV_BY_30_MUL_10_DIV_16/2
	jbe	noRound
	inc	ax

noRound:
	tst	ax
	jnz	notNull
	dec	ax
notNull:
	mov	ds:[cpuSpeed], ax

	ret

ComputeCPUSpeed	endp
