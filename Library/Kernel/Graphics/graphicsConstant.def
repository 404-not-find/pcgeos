COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved


PROJECT:	PC GEOS
MODULE:		Graphics
FILE:		grConstant.def

AUTHOR:		Jim DeFrisco

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	4/88...		Initial version

DESCRIPTION:
	This file contains constants local to the graphics module.

	$Id: graphicsConstant.def,v 1.1 97/04/05 01:13:41 newdeal Exp $

------------------------------------------------------------------------------@

;	Graphics state constants
;
; 				**** WARNING ***
; If you change any of the following GState constants, then you absoutely, 
; positively, must change the default GState layout in graphicsVariable.def,
; and possibly the initialization code in GrInitSys.

gsStateStart	=	GS_appReg	;Start of real state

					;Size of gstate + two handles + space
					;for a rectangular path. The opcodes
					;used for this calculation are
					;reflected in the "rectPath" variable
					;currently located in graphicsPathLow
RECT_REGION_SIZE =	((size Path+\
		 		((size OpBeginPath+\
				  size OpSetTransform+\
				  size OpMoveTo+\
				  size OpDrawRect+\
				  size OpEndPath+1) and not 1))/4)*4

ROUNDED_GSTATE_SIZE =	((size GState+3)/4)*4
DEF_GSTATE_SIZE	=	(((ROUNDED_GSTATE_SIZE+RECT_REGION_SIZE+4) + 15)/16)*16

MAX_LINE_WIDTH	=	4096


;	Debugging constant to allow display of CMYK bitmaps.
;	THIS SHOULD BE FALSE FOR THE PRODUCTION SOFTWARE

DISPLAY_CMYK_BITMAPS equ FALSE		; set to TRUE to enable display of 
					; CMYK bitmaps. (works only on VGA-type
					; displays and is for debugging 
					; purposes only).  There is a 
					; corresponding constant in the driver
					; in vidcomConstant.def that also
					; needs to be set TRUE.

;******************************************************************************
;	font constants
;******************************************************************************

FID_SIG_LO	equ	('S' shl 8) or 'B' ;font signature bytes
FID_SIG_HI	equ	('F' shl 8) or 'W'

if DBCS_PCGEOS
MAX_MAJOR_VER	equ	2	;can't handle major font versions > 2
else
MAX_MAJOR_VER	equ	1	;can't handle major font versions > 1
endif

;******************************************************************************
;	font structures
;******************************************************************************

;
; The first 8 bytes read in contain the signature.  This is matched with the
; constants above.
;
FontFileInfo	struct
    FFI_signature	word	2 dup (?)	;"BSWF"
    FFI_minorVer	byte			;minor version
    FFI_majorVer	byte			;major version
    FFI_headerSize	word			;size of font info section
FontFileInfo	ends


;
; The second chunk in the font header block will contain a list of what
; fonts are currently in memory.  Some of the fonts may be discarded.
; here is the format of an entry in that list.
;
FontsInUseEntry	struc
    FIUE_attrs		FontCommonAttrs		;attributes (ID, size, style)
    FIUE_dataHandle	hptr.FontBuf		;block handle to data
    FIUE_refCount	word			;reference count
    FIUE_flags		FontBufFlags		;flags describing data
    FIUE_matrix		FontMatrix		;upper 2x2 of transform
FontsInUseEntry	ends

;
; There will also be a chunk for a list of all the font drivers that
; are available on disk.
;
DriversAvailEntry struct
    DAE_makerID		FontMaker	;manufacturer ID
    DAE_driverHandle	word	(?)	;handle of driver geode
    DAE_strategy	fptr.far	;strategy routine
DriversAvailEntry ends

;
; The font names chunk is used to store the modification data so that
; we can figure out when the file has changed
;
FontModificationInfo	struct
	FMI_modified	FileDateAndTime
	FMI_fileSize	dword
FontModificationInfo	ends

;
;	Allocation constants
;

;
; Size of font name buffer that FileEnum excretes into
;
FID_NAME_BUFSIZE	=	(size FEDosInfo) * MAX_FONTS

;
; Initial size of the font info block.
;
INIT_FONT_BLK_SIZE	=	FID_NAME_BUFSIZE + 30

;
; Allocation flags for the font info block.
;
; The heap code looks through this to get information about the fonts that
; are loaded, so it cannot be swappable...
;
FID_BLK_ALLOC_FLAGS =  (HAF_STANDARD_NO_ERR_LOCK shl 8) or mask HF_SHARABLE

;
; Allocation flags for default font.
;
; This is needed to display error messages, so it should not be swappable
;
DEF_FONT_ALLOC_FLAGS =  (HAF_STANDARD_NO_ERR_LOCK shl 8) or mask HF_SHARABLE
;
; Allocation flags for a font data block.  Same as for font info block,
; except it's discardable.
;

FID_SET_FLAGS	=  ALLOC_STATIC_NO_ERR or mask HF_SHARABLE or mask HF_DISCARDED

;
; When allocating the block discarded, we need a non-zero size.
;
FID_INIT_SIZE	= 16

;
; Default for maximum number of font files open
;
FID_DEFAULT_FILE_HANDLES = 8
FID_MIN_FILE_HANDLES	= 2
FID_MAX_FILE_HANDLES	= 32


;******************************************************************************
;	Polygon structures and constants
;******************************************************************************

; 	Structure definition for edge record in used in filling a polygon
;	read the Data Structures section in graphicsPolygon.asm for more info

ER_edgeInfoRec record		
		:2,
		ER_deltaXNeg:1,
		ER_useYRoutine:1,
		ER_ccw:1,
		ER_horiz:1,
		ER_shortenTop:1,
		ER_shortenBottom:1
ER_edgeInfoRec	end

AEL_allHead	equ	0		;offset to offset to first 
					;edge record in Active Edge List
ET_begBucket	equ AEL_allHead+2	;offset to start of Bucket Table

EdgeRecord	struct
    ER_xLeft		dw	?	;initially x coord of that forms
					;the top vertex of edge with yMin, 
					;then left x of scanline span of edge
    ER_yMin		dw	?	;y value of top edge vertex
    ER_xRight		dw	?	;right x of scanline span of edge
    ER_yMax		dw	?	;y value at bottom edge vertex
    ER_xBottom		dw	?	;x value at bottom edge vertex
    ER_bresD		dw	?	;bresenham decision variable
    ER_bresIncr1	dw	?	;bresenham variable
    ER_bresIncr2	dw	?	;breshenham variable
    ER_clockwise	dsw		;1 if clockwise, -1 if ccw. Used to
					;implement winding rule. cw = downward
					;ccw = upward
    ER_edgeInfo		ER_edgeInfoRec <>;see BuildET Header
    ER_scanLineInfo	db	?	;see below
    ER_allLink		dw	?	;link to next edge record or 0
    EdgeRecord	ends


;ER_scanLineInfo holds either SPAN_TOGGLE or SPAN_ONLY. See Overview section
;of graphicsPolygon.asm, headers for GetOnOff, SetEvenOddScanLineInfo and
;SetWindingScanLineInfo
SPAN_ONLY		=	1
SPAN_TOGGLE		=	2

;offset past polygon bounds, first y value and its EOREGREC
OFFSET_REG_BUFFER	=	12	

PolylineStatus etype word, 0
NORMAL_EDGE enum PolylineStatus		;code expects this to be zero 
CONNECTING_EDGE enum PolylineStatus
FIRST_REAL_EDGE enum PolylineStatus


CONNECT_FLAG	equ	0x8000		; high bit is set when calling 
					; DrawArcLow
;--------------------------------------------------------------------------
; 			End of Polygon structures and constants
;--------------------------------------------------------------------------

;--------------------------------------------------------------------------
;			Ellipse Structures and Constants
;--------------------------------------------------------------------------

EllipseDeltaBlock	struct
	EDB_numDeltas		dw	?	;num of deltas in buffer
	EDB_deltaX		dw	?
	EDB_deltaY		dw	?
	EDB_doNotCombine	dw	?	;flag 
EllipseDeltaBlock	ends
		
EDB_startDeltas		equ 	size EllipseDeltaBlock

CalcEllipseTrans	etype	word, 0, 1
    CET_TRANSFORM	enum CalcEllipseTrans	; transform passed points
    CET_DONT_TRANSFORM	enum CalcEllipseTrans	; don't transform points - 
						;   ONLY WORKS WITH ELLIPSES

CalcEllipseType		etype	word, 0, 2
    CET_ELLIPSE		enum CalcEllipseType	; an ellipse
    CET_BOUNDED_ARC	enum CalcEllipseType	; bounded arcs
    CET_BOUNDED_ARC_RR	enum CalcEllipseType	; bounded arcs for rounded rects
    CET_3PT_ARC		enum CalcEllipseType	; 3-point arcs

CalcEllipseFlags	record
    CEF_TRANSFORM	CalcEllipseTrans:1	; transform passed points,or no
    CEF_COLINEAR:1				; set if arc points colinear
    :11						; unused bits
    CEF_TYPE		CalcEllipseType:3	; type of "ellipse"
CalcEllipseFlags	end

; Passed to CalcEllipse from DrawArcEllipseLow & FillArcEllipseLow
;
BoundedArcParams	struct
    BAP_startPoint	Point			; starting point (device coords)
    BAP_endPoint	Point			; ending point (device coords)
BoundedArcParams	ends

; Returned from CalcEllipse to FillArcEllipseLow for arc filling purposes
;
ArcReturnParams		struct
    ARP_start		Point			; start of arc
    ARP_end		Point			; end of arc
    ARP_center		Point			; center of arc (ellipse)
ArcReturnParams		ends

; Internal structure for converting from three-point arcs to bounded arcs
; Don't change the order of anything without looking at Convert3PointToBounds()
;
ConvertThreePoint	struct
   CTP_x1		WWFixed
   CTP_y1		WWFixed
   CTP_y2		WWFixed
   CTP_x2		WWFixed
   CTP_m1		WWFixed
   CTP_m2		WWFixed
ConvertThreePoint	ends

;--------------------------------------------------------------------------
;			End of Ellipse Structures and Constants
;--------------------------------------------------------------------------


;--------------------------------------------------------------------------
;			RoundRect Structures and Constants
;--------------------------------------------------------------------------

RoundRectCorner		struct
    RRC_pointBuffer	hptr			; buffer holding points
    RRC_pointCount	word			; # of points in buffer
    RRC_params		BoundedArcParams	; start/end in device coords
RoundRectCorner		ends

;--------------------------------------------------------------------------
;			End of RoundRect Structures and Constants
;--------------------------------------------------------------------------


;--------------------------------------------------------------------------
;			Conic Section Structures and Constants
;--------------------------------------------------------------------------

ConicType	etype	byte
   CT_ELLIPSE		enum ConicType
   CT_ARC		enum ConicType

ConicArcInfo	etype	byte
   CAI_FIND_START	enum ConicArcInfo	; looking for the start point
   CAI_FIND_END		enum ConicArcInfo	; looking for the end point
   CAI_DONE		enum ConicArcInfo

		; yes, it's come to 64-bit integers.  Sigh.
HugeInt		struct
    HI_lo	dword			; the low 32-bits
    HI_hi	sdword			; the high 32-bits
HugeInt		ends

		; this structure passed to the conic section algorithm
ConicParams	struct
		; The conic section algorithm needs a start and end point
   C_xOffset	word		; X translation for beg/end points (EC-only)
   C_yOffset	word		; Y translation for beg/end points (EC-only)
   C_center	Point		; center of conic section
   C_beg	Point		; starting point for conic section algorithm
   C_end	Point		; ending point for conic section algorithm
		; the following are the coefficients of the general conic
		; section equation Ax^2 + Bxy + Cy^2 + Dx + Ey + F = 0
		; for an ellipse, F=0.
    C_A		HugeInt		; conic section equation coefficient
    C_B		HugeInt		; conic section equation coefficient
    C_C		HugeInt		; conic section equation coefficient
    C_D		HugeInt		; conic section equation coefficient
    C_E		HugeInt		; conic section equation coefficient
    C_F		HugeInt		; conic section equation coefficient
		; a few incidentals, like a buffer handle
    C_hBuffer	hptr		; handle of ellipse point buffer
    C_sBuffer	word		; size of ellipse point buffer
    C_winTop	sword		; top coordinate of window
    C_winBot	sword		; bottom coordinate of window
		; bounding box for the conic section
    C_bounds	Rectangle	; bounding box
		; specific stuff for non-ellipse conic sections
    C_conicType	ConicType	; ellipse, arc, parabola, ...
    C_conicInfo	ConicArcInfo	; should be a union'd struct, but for now...
    C_conicBeg	Point		; beginning Point of the conic section
    C_conicEnd	Point		; ending Point of the conic section
if  DEBUG_CONIC_SECTION_CODE
    C_gstate	hptr.GState	; handle of GState (for debugging only)
    C_window	hptr.Window	; handle of Window (for debugging only)
endif
ConicParams	ends

;--------------------------------------------------------------------------
;			End of Conic Section Structures and Constants
;--------------------------------------------------------------------------

;--------------------------------------------------------------------------
;			Dashed Lines Structures and Constants
;--------------------------------------------------------------------------

BYTES_PER_ON_SEGMENT	= 10		;two points, one SEPARATOR

		;These fields are described in the headers for
		;PolyDashedLineLow and ConvertPointsToDashes
DashIntermediateStruct	struct
	DIS_numDashArrayElements	dw	?
	DIS_dashSkipByteOffset		dw	?
	DIS_offsetTo1stPtNextStatus	dw	?
	DIS_currentStatus		db	?
	DIS_wordAlign			db	?
	DIS_offsetToNextArrayElement	dw	?
	DIS_destOffset			dw	?
	DIS_dashArrayOfByteOffsets	dw (MAX_DASH_ARRAY_PAIRS*2) dup (?)
	DIS_bresPoints			dw	? ; only used as on offset
DashIntermediateStruct	ends

DashStatus etype byte, 0
STATUS_OFF enum DashStatus			;code expects to be zero
STATUS_ON enum DashStatus

LineSegmentStatus etype byte, 0
LINE_INITIAL enum LineSegmentStatus		;code expects to be zero
LINE_NORMAL enum LineSegmentStatus
LINE_SEPARATOR enum LineSegmentStatus		;code expects > NORMAL
LINE_TERMINATOR enum LineSegmentStatus		;code expects > NORMAL

;--------------------------------------------------------------------------
;			End Of Dashed Lines Structures and Constants
;--------------------------------------------------------------------------

;--------------------------------------------------------------------------
;			Pattern Structures and Constants
;--------------------------------------------------------------------------

; Structures at top of system pattern segments
;
SysPatternLMemBlockHeader	struct
    SPLMBH_header	LMemBlockHeader <>
    SPLMBH_numPatterns	word
    SPLMBH_patterns	label	nptr
SysPatternLMemBlockHeader	ends

; Local variable structure used by the pattern routines
;
PatternInfo	struct
    PI_fillBounds	Rectangle	; rect bounds to fill (document coords)
    PI_lineLength	WWFixed		; length of current line (0 = inifinite)
    PI_yPos		WWFixed		; current Y position for line
    PI_bmWidth		word		; width of bitmap we're tiling
    PI_bmHeight		word		; hiehgt of bitmap we're tiling
PatternInfo	ends

;--------------------------------------------------------------------------
;			End Of Pattern Structures and Constants
;--------------------------------------------------------------------------

;--------------------------------------------------------------------------
;		TextField GString Structures
;--------------------------------------------------------------------------
;
; The format of a TextField gstring element is as follows:
;
;	size		description
;	----		-----------
;	***************************  FIRST COMES THE FIXED PART...
;	word		count = size of fixed header + size of string + 
;				size style run
;	size GDF_saved 	GDF_saved structure
;	***************************  NEXT COMES THE STRING
;	n		text string
;	***************************  NEXT COMES THE FIRST STYLE RUN
;	size TFStyleRun	TFStyleRun structure
;	
;	*************************** This is followed by additional style
;				    run structures, as needed
;
; This is the fixed header part of the GrDrawTextField gstring format
;
TFFixedHeader	struct
    TFFH_count	word	?	; size of TFFixedHeader + size TFStyleRun +
				;  size of text string
    TFFH_saved	GDF_saved <>	; part of GDF_vars that is saved
TFFixedHeader	ends
;
; This is the structure of each style run written to the
; gstring.  It is used in both StoreTextField (graphicsStoreString.asm) and
; PETextField (graphicsString.asm)

;TFStyleRun	struct
;    TFSR_count	word		;size of TextAttr + size word
;    TFSR_attr	TextAttr	;TextAttr to print
;TFStyleRun	ends

;------------------------------------------------------------------------------
;	Internal structures/constants for Regions/Paths:
;------------------------------------------------------------------------------

IntRegionPoint struct
    IRP_x	WBFixed
    IRP_y	WBFixed
IntRegionPoint ends

IntRegionBezier	struct
    IRB_p0	IntRegionPoint
    IRB_p1	IntRegionPoint
    IRB_p2	IntRegionPoint
    IRB_p3	IntRegionPoint
IntRegionBezier ends

;
; Amount to up region block size when resizing:
;
REGION_BLOCK_REALLOC_INC_SIZE	=	1024


;--------------------------------------------------------------------------
;			Enter Graphics Frame
;--------------------------------------------------------------------------

;	this structure represents the state of the stack in a graphics
;	routine after the call to EnterGraphics.  It can be used to access
;	any of the passed variables, including bp (which is returned 
;	pointing to the EGframe.

;	to use this in a graphics routine, use the following convention.
;	if you've pushed anything since the call to EnterGraphics, you'll
;	have to adjust the second instruction to subtract off 2 for each
;	push.

;	mov	ax, [bp].EG_ax		;


EGframe	struct
    EG_di		word			; location of di register
    EG_es		word			; location of es register
    EG_ds		word			; location of ds register
    EG_si		word			; location of si register
    EG_ax		word			; location of ax register
    EG_bx		word			; location of bx register
    EG_cx		word			; location of cx register
    EG_dx		word			; location of dx register
    EG_bp		word			; location of bp register
    EG_grRet		fptr			; return to graphics routine
    EG_appRet		fptr			; ret to caller's caller
    EG_param1		word			; possible passed parameters
    EG_param2		word			;
    EG_param3		word			;
EGframe	ends

;--------------------------------------------------------------------------
;			Enter Translate Frame
;--------------------------------------------------------------------------

;	this structure represents the state of the stack in a transform
;	routine after the call to EnterTranslate.  It can be used to access
;	any of the passed variables, including bp (which is trashed by
;	EnterTranslate)

;	to use this in a transform routine, use the following convention.
;	if you've pushed anything since the call to EnterTranslate, you'll
;	have to adjust the second instruction to subtract off 2 for each
;	push.

;	mov	bp, sp
;	mov	si, [bp].ET_si


ETframe	struct
    ET_si		word			; location of si register
    ET_es		word			; location of es register
    ET_ds		word			; location of ds register
    ET_bp		word			; location of bp register
ETframe	ends


;--------------------------------------------------------------------------
;		Graphics String Constants/Structures
;--------------------------------------------------------------------------

; GSflags record
;       This record is used to distinguish between various gstring types.`
;		GSF_IN_USE	- indicates if the GString or Path is
;				  currently open (now used olny for paths)
;               GSF_WRITE_ERROR - set to indicate disk full error encountered
;               GSF_FILE_HAN    - set to indicate gstring is a stream, as
;                                   as opposed to a memory block
;               GSF_READ_ONLY   - set to indicate gstring is being read
;               GSF_DEF_TRANS_SET - set to indicate default transformation
;                                       has already been initialized
;               GSF_LAST_STOP_FF - set to indicate that the last time the
;                                       graphics string drawing stopped, it
;                                       was due to a NEW_PAGE element

GSflags record  
    :6,			
    GSF_FIGURE_BOUNDS:1,		; 1 to calc bounds instead of play
    GSF_COMPACT_BITMAPS:1,		; 1 to always compact BMs when writing
    GSF_VMEM_LOCKED:1,			; HugeArray is locked down
    GSF_CONTINUING:1,			; continuing from previous call 
    GSF_XFORM_SAVED:1,			; 1 if transform has been saved
    GSF_ERROR:1, 			; 1 if some error (probably disk)
    GSF_ELEMENT_READY:1,		; 1 if elem ready, but not executed.
    GSF_HANDLE_TYPE GStringType:3	; type of gstring
GSflags end  

;	Graphics String Structure
;
;	This structure is used by the graphics string code to hold a number
;	of variables, a disk buffer (if needed), and substring definitions.
;	It is an LMem managed block, with each substring definition occupying
;	a separate chunk.  See the spec file (Spec/gSeg.doc) for more
;	information.

GString	struct
    GSS_header		LMemBlockHeader <> ; LMem header
    GSS_flags		GSflags	<>	; holds file/mem flags, etc.
    GSS_fileBuffer	lptr		; handle to file buffer or
					;  gstring chunk (mem strings)
    GSS_hString		hptr		; file handle or mem handle
					;  (to gstring)
    GSS_firstBlock	word		; starting VM block handle or
					;  chunk handle 
    GSS_curPos		dword		; current string pointer
    GSS_cacheLink	hptr.GString	; used for GString struc cache
    GSS_lastKern 	fptr.far	; kernel graphics routine
    GSS_lastRout 	fptr.far	; gstring play routine
    GSS_lastSize 	word		; size of element
    GSS_lastPtr		fptr		; pointer to element
    GSS_vmemNext 	word		; count of elements left in this block
    GSS_vmemPrev 	word		; count of prev elements in this block
    GSS_filePos		dword		; initial file position for STREAM ones

    GSS_readBuffer	lptr		; handle to file buffer or
					;  gstring chunk (mem strings)
    GSS_readOffset	word		; offset in GSS_readBuffer for start
					;  of data
    GSS_readBytesAvail	word		; # bytes available in GSS_readBuffer
GString	ends


; Size to let a temporary block fill before writing out to MS-DOS's disk
; buffer.
;
GS_WRITE_THRESHOLD	=	2048

; Amount of data to read at once for file-based GStrings. Remember that
; this data is stored in a chunk, so we cannot make it too large.
;
GS_READ_BUFFER_SIZE	=	2048

; initial size for gstring structure buffer.  Include space for two lmem
; handles, round up to nearest paragraph, don't include any for file buffer
; or string definitions.  Define constant for initial mem allocation flags.
;
INIT_GSTRING_SIZE	=	(((size GString+10) + 15)/16)*16
INIT_GSTRING_FLAGS = ((HAF_STANDARD_NO_ERR_LOCK or mask HAF_ZERO_INIT) shl 8) or mask HF_SHARABLE or mask HF_SWAPABLE

	; this record is passed to AllocGString, and controls certain
	; aspects of how graphics strings are created.
CreateGStringControl	record	
    CGSC_WRITING:1,			; INTERNAL FLAG
    :7,					; for future use
CreateGStringControl	end

		; this flag is passed to GSStore to control whether the data
		; should be flushed or not
GStringStoreControl	etype	byte, 0, 1
    GSSC_DONT_FLUSH enum	GStringStoreControl
    GSSC_FLUSH 	    enum	GStringStoreControl
    GSSC_FORCE_FLUSH enum	GStringStoreControl 

; DrawString stack frame
; 	All the routines that play graphics string elements have to 
;	access the stack frame structure allocated in the kernel by
;	GrDrawString and GrPlayString.
DrawStringFrame	struc
    DSF_hSrc		hptr.GState	; passed handle to gstring source
    DSF_hDest   	hptr.GState	; passed handle to gstate target
    DSF_hGString 	hptr.GString	; handle to source gstring block
    DSF_flags   	GSControl	; passed flags
    DSF_tempMatrix	TransMatrix	; temp place to store a matrix
    DSF_tlBound		PointDWFixed	; upper left bound
    DSF_brBound		PointDWFixed
    DSF_trCorner	PointDWFixed	; upper right bound
    DSF_blCorner	PointDWFixed	; lower left bound
    DSF_tempCoord	PointDWFixed
    DSF_callBack	fptr.far	; callback for GrParseGString
    DSF_savedBP		word		; save BP during ParseString so we
					;  can pass it to the callback
DrawStringFrame	ends

;--------------------------------------------------------------------------
;		Region/Path Constants/Structures
;--------------------------------------------------------------------------


;
;	Size of a region line with no on/off points:
;
REGION_LINE_SIZE	=	4
;
;	Minimum number of on/off points per line:
;
MIN_REGION_POINTS	=	2
;
;	Minimum size of line (including #, on/off points, EOR):
;
MIN_REGION_LINE_SIZE	=	REGION_LINE_SIZE + MIN_REGION_POINTS*2
;
;	Unused point in region being converted:
;
UNUSED_POINT		=	0x8001

;--------------------------------------------------------------------------
;		Miscellaneous path structures & constants
;--------------------------------------------------------------------------

PathOutputTextParams	struct
    POTP_numChars	word			; number of characters in string
    POTP_function	FontFunction		; font function to call
    POTP_dataCX		word			; data to pass in CX
    POTP_maker		FontMaker		; true maker of the font
PathOutputTextParams	ends

;--------------------------------------------------------------------------
;		Stack frame used in GrDrawBitmap.  Also needed by some
;		KLib routines.
;--------------------------------------------------------------------------

BMOpType	record	
    BMOT_FILL_MASK:1	; set to draw mask instead of mono bitmap
    BMOT_SCALE_NEGY:1,	; negative scale factor in y
    BMOT_SCALE_NEGX:1,	; negative scale factor in x
    BMOT_PARTIAL:1,	; partial slice drawn
    BMOT_ROTATE:1,	; rotation required
    BMOT_DECOMPACT:1,	; decompaction required
    BMOT_FORMAT:1,	; format change required
    BMOT_SCALE:1,	; scaling required
BMOpType	end

BMStateFlags	record
    :14
    BMSF_SKIPPING_SCANLINES_OUTSIDE_MASK:1; skipping d/s/fc of scanlines outside mask
    BMSF_DONE_FIRST_SOURCE_SCANLINE:1	; done processing first source scanline
BMStateFlags	end

BitmapFrame	struct
			; a place to save these until we call the video driver
    BF_gstate		sptr.GState	; ptr to locked gstate
    BF_window		sptr.Window	; ptr to locked window
			; these are used by the scaling routine
    BF_xScale		WWFixed		; composite scale factor,inc resol diff
    BF_yScale		WWFixed		; composite scale factor,inc resol diff
    BF_curScan		WWFixed		; current source scan/remainder
    BF_lastPix		word		; last source bit we copied
    BF_lastScan 	word		; last source scan we copied
			; these are used if the bitmap is expanding
    BF_partScaleFunc 	nptr		; scan line scaling function
    BF_partScaleScans 	word		; Counter for how many scans of the 
					;  orig BM still need to be scaled in
					;  this slice.
    BF_partScaleDPtr 	word		; current pointer into unscaled data
			; this buffer is used by the format change code
    BF_formatPtr	nptr		; offset to format change info
    BF_formatScan	word		; current scan line of the bitmap
    BF_formatMaskPtr	word		; pointer to bitmap masks
    BF_origBMtype	byte		; type of the original Bitmap
    BF_deviceType 	byte		; Device bitmap format (BMFormat)
    BF_formatCombo	word		; index to use for format jump tables
    BF_scaledScanSize	word		; final width, without format conv
    BF_palette		hptr		; handle of allocated palette block
    BF_hugeBMlocked	sptr		; segment of locked huge array dir.
					;  Set by InitBitmapPalette
    BF_lastMapIndexRed	word		; index returned by last call to
    BF_lastMapBlueGreen	word		;  MapRGBtoIndex for given RGB value
			; these are used by the rotation routine
    BF_rotUpLeft	Point		; save rotated upper left
    BF_rotUpRight	Point		;      rotated upper right
    BF_rotLowLeft	Point		;      rotated lower left
    BF_slope		WWFixed		; slope of the line
    BF_curPoint		WWFixed		; current point along left side
    BF_xbump		word		; standard x inc/dec for left side
    BF_ybump		word		; standard y inc/dec for left side
    BF_count		word		; for rotation routine
			; these are used by the callback routine
    BF_drawPoint 	Point		; device coordinate to draw bitmap 
    BF_drawPointErrorX	sword		; fraction error in X device coordinate
    BF_drawPointErrorY	sword		; fraction error in Y device coordinate
    BF_cbFunc		dword		; address of far callback routine
    BF_getSliceDSize	nptr		; how much of buffer used for data
    BF_getSliceScalePtr	nptr		; pointer to scaled scan part
    BF_getSliceMaskPtr	nptr		; pointer to pixel data masks/jumps
    BF_getSliceMaskPtr2	nptr		; pointer to pixel mask masks/jumps
    BF_xtraScanLinePtr	nptr		; ptr to xtra buff for Partial scaling 
    BF_imageFlags	ImageFlags	; from GrDrawImage
    BF_opType 		BMOpType	; which ops to perform (scale,decomp..)
    BF_stateFlags	BMStateFlags	; state flags - what more can I say?
    BF_origBM		dword		; pointer to original bitmap structure
					;  (also used for HugeArray handle)
    BF_origBMdata 	word		; pointer to original bitmap data
    BF_origBMscans 	word		; #orig scans that fit per final slice 
    BF_origBMcurScan 	word		; curr starting original scan for slice
    BF_origBMmaskSize	word		; #bytes per original scan, mask
    BF_origBMscanSize	word		; #bytes req'd per unscaled orig scan
    BF_origBMwidth 	word		; width of original bitmap, pixels
    BF_origBMheight 	word		; height of original bitmap, scans
    BF_origBMscansLeft 	word		; scans left in original slice
					;  (also used for HugeArray unscaled..)
    BF_origBMcompact    BMCompact	; compaction mode
    BF_origBMfirstScan	word		; first scanline drawn in window mask
    BF_finalBMwidth 	word		; width of destination, pixels
    BF_finalBMheight 	word		; height of destination, scans
    BF_finalBMscanSize	word		; #bytes req'd per scaled target scan
    BF_finalBMsliceSize word		; #original bytes per target slice
    BF_finalBMhan 	hptr		; memory handle for allocated block

    BF_finalBMdata 	word		; current ptr into bitmap data
    BF_finalBM 		dword		; ptr to bitmap sent to video driver

    BF_args		PutBitsArgs	; structure that gets passed to driver

BitmapFrame	ends

;--------------------------------------------------------------------------
;		Other miscellaneous graphics constants
;--------------------------------------------------------------------------

DEF_BITMAP_RES		equ	72	; 72 dpi

;-----------

TM_KERNING	equ	mask TM_TRACK_KERN \
			or mask TM_PAIR_KERN

TM_INTERNAL	equ	TM_KERNING \
			or mask TM_PAD_SPACES

;	Constants for SEPARATOR format for storing points list

SEPARATOR = 8000h

;---

DEFAULT_GS_VMEM_SIZE	equ	4000		; default size for vmem blks
