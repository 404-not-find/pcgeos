
Overview of the parse library.
		John Wedgwood,  February 1st, 1991

$Id: README,v 1.1.35.1 97/03/29 03:48:33 canavese Exp $

******************************************************************************


The parse library is intended to provide a parser for a spreadsheet language.
In addition it may fill the role for applications which want a mathematical
expression based language.

The parser breaks down into a few distinct areas:
	Parser:		Converts text expressions into a sequence of tokens.
	Evaluator:	Evaluates a sequence of tokens.
	Formatter:	Convert a sequence of tokens into text.

The parser takes an expression as text (as entered by the user for example)
and converts it to a sequence of tokens. It does as much error checking
of the expression as it can, reporting any errors it finds.

The evaluator takes a sequence of tokens produced by the parser and evaluates
the expression that the sequence of tokens represents.

The formatter converts a sequence of tokens into a text string. The formatter
exists so that applications will not need to save both the text entered by
the user and the parsed result. Saving just the parsed result saves space.
The formatter allows the application to redisplay the string in a form that
the user will understand.

******************************************************************************
				PARSER
******************************************************************************

The grammar that is understood by the parser is outlined in the file GRAMMAR.

The grammar is a simple infix notation expression grammar with the addition
of the following:
	Functions:	Built in functions are provided and the application
			can define its own functions as well.

	Cells:		Cell references will most likely be used by the
			spreadsheet and database. If an application wants
			to use them, they are provided.

	Ranges:		Ranges of cells are also most likely to be used by
			the spreadsheet and database.

	Named Items:	Named items can be anything at all. These items
			are recognized as being possibly any one of:
				Number
				String
				Cell
				Range
			They are resolved by the evaluator.

Identifiers which are not recognized are handled by calling back to the
application. The application must identify them as either a function (defined
in the application) or a named item. Named items are resolved by the
evaluator. 

******************************************************************************
				EVALUATOR
******************************************************************************

The evaluator computes the result of a parsed expression.

These are the built-in functions:
	AVG	- Compute the average of a list of numbers
	SUM	- Compute the sum of a list of numbers

These are the built-in operators:
    Unary operators:
	-	(negation)
	%	(percent)

    Binary operators:
	%	(modulo)		*       (multiplication)
	-	(subtraction)		/       (division)      
					+       (addition)      
					^       (exponentiation)
		<	(less than)
		>	(greater than)
		=	(equality)
		<=	(less than or equal)
		>=	(greater than or equal)
		<>	(not equal)

Functions which were determined to be defined in the application cause the
evaluator to call back to the application to compute their result.

The application is also required to fill in the data-type and data for named
items.

******************************************************************************
				FORMATTER
******************************************************************************

The formatter reads through a stream of parsed tokens and generates a string
of text. When application defined functions or named items are encountered,
the formatter calls back to the application and has it fill in the text
associated with the token.


******************************************************************************
				ERRORS
******************************************************************************

Many errors can be returned by the parser and evaluator. As a help to the
application, error codes can be passed to a library routine and converted to
an error message string. The advantage to using the built in errors is that
you won't need to translate those strings if you are translating your
application for a foreign market.

******************************************************************************
				USAGE
******************************************************************************

This is an example of how a spreadsheet would use the parse library.

The user enters a formula in the edit-bar and hits return. A spreadsheet
would want to do the following:
	Tokenize the expression (using the parser)

	Evaluate the expression (using the evaluator)

	Display the result in a cell
	Display the parsed formula in the edit-bar

The user enters:
	=sum(a1:c3, 1+2)

The parser turns this into a stream of tokens:
	Token		Data		Comment
	-----		----		-------
	FUNCTION	sum
	CELL		a1
	OPERATOR	:
	CELL		c3
	ARG_END				End of first argument
	NUMBER		1
	OPERATOR	+
	NUMBER		2
	ARG_END				End of second argument
	CLOSE_FUNCTION			End of function call

The evaluator then evaluates this stream of tokens using the built in
function "Sum" and the built in operators ":" and "+".

The result is returned to the application. It can then display the result in
a cell.

The application can then turn around and pass the string of tokens to the
formatter to turn it into a formula suitable for display in the edit-bar of
the spreadsheet.

******************************************************************************
				BUFFERS
******************************************************************************

The parse library requires memory buffers in order to accomplish its tasks.
These buffers are passed in by the application. The parser and evaluator make
sure that they never exceed the bounds of the buffers passed by the
application.

******************************************************************************
				FILES
******************************************************************************

The overview files in this directory are:
	README		- You're reading it now :-)
	GRAMMAR		- A formal definition of the spreadsheet grammar
	THOUGHTS	- A somewhat organized discussion of how the
			  library works, at a much lower level than what
			  you've read here.
	ORGANIZATION	- A discussion of which source files contain the
			  the different bits of functionality.
