/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved
 *
 * PROJECT:	  
 * MODULE:	  
 * FILE:	  scanControl.ui
 *
 * AUTHOR:  	  Lulu Lin, Oct  6, 1994
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	LL	10/ 6/94   	Initial version
 *
 * DESCRIPTION:
 *	This file contains ui objects for scanning.
 *	Attn:  Search for "FILL_IN" this indicate any incomplete portion 
 *	that needs your attention.
 *
 * 	$Id: scanControl.ui,v 1.1 97/04/07 10:44:44 newdeal Exp $
 *
 ***********************************************************************/
#include "generic.uih"
#include "config.uih"
#include "parentc.uih"
#include "Art/mkrdialog.ui"

start	PCControlPasswordUI;

/*
 *  Set Password
 */
SetPassword = PrefInteraction {
    moniker = "Set Password";
    visibility = dialog;
    type = multipleResponse;
    genStates = default -usable;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = SetPasswordTitle, SetPasswordInput, ConfirmatPasswordText, ConfirmPassword,
	SetPasswordOK, SetPasswordCancel, PasswordInconsistent;
    hints = {
  	HINT_INTERACTION_MODAL,
	HINT_CENTER_CHILDREN_HORIZONTALLY
    }
}

SetPasswordTitle = GenText {
    text = "You will use this password to access internet areas that are blocked by KidGuard, and to turn KidGuard off.  (Note: for your protection, only asterisks will be entered as you type.)";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 50>,
	    SpecHeight <>
	}
    }
}

SetPasswordInput = GenText {
    moniker = "Enter password:";
    textDisplayAttributes = default +singleLineText;
    maxLength = MAX_PASSWORD_SOURCE_LENGTH;
    hints = {
	HINT_PLACE_MONIKER_ABOVE,
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
	    optr ConfirmPassword; 
	},
	HINT_CENTER_MONIKER,
	ATTR_GEN_TEXT_CHAR_ATTR {
	    word passwordChunk
	}
    }
}

ConfirmatPasswordText = GenText 
{
    text = "To confirm, enter the same password again:";
    textDisplayAttributes = default +singleLineText;
    genAttributes = readOnly;
}

ConfirmPassword = GenText {

    textDisplayAttributes = default +singleLineText;
    maxLength = MAX_PASSWORD_SOURCE_LENGTH;
    genStates = default -enabled;
    hints = {
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
	    optr SetPasswordOK
	},
	ATTR_GEN_TEXT_CHAR_ATTR {
	    word passwordChunk
	}
    }
}

chunk passwordChunk = data {
	CHAR_ATTR_FONT_SIZE(FID_BISON, 13)
}


SetPasswordOK = PrefTrigger {
    moniker = "Set Password";
    genAttributes = signalInteractionComplete;
    genStates = default -enabled;
    hints = {
  	HINT_SEEK_REPLY_BAR,
#ifndef GPC_ONLY
	HINT_DEFAULT_DEFAULT_ACTION,
#endif
  	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
  	    word IC_OK
  	}
    }
}
SetPasswordCancel = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Cancel";
#endif
    genAttributes = signalInteractionComplete;
    hints = {
  	HINT_SEEK_REPLY_BAR,
  	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
  	    word IC_DISMISS
   	}
    }
}


/*
 *  Enter password
 */
EnterPassword = PrefInteraction {
    moniker = "Enter Password";
    visibility = dialog;
    type = multipleResponse;
    genStates = default -usable;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = EnterPasswordTitle, EnterPasswordInput,
	EnterPasswordOK, EnterPasswordCancel, InvalidPassword;
    hints = {
  	HINT_INTERACTION_MODAL,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}
EnterPasswordTitle = GenText {
    text = "The KidGuard password is required to change the Internet access levels.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 50>,
	    SpecHeight <>
	}
    }
}

EnterPasswordInput = GenText {
    moniker = "Enter password:";
    textDisplayAttributes = default +singleLineText;
    maxLength = MAX_PASSWORD_SOURCE_LENGTH;
    hints = {
	HINT_PLACE_MONIKER_ABOVE,
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
	    optr EnterPasswordOK
	},
	HINT_CENTER_MONIKER,
	ATTR_GEN_TEXT_CHAR_ATTR {
	    word passwordChunk
	}
    }
}
EnterPasswordOK = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "OK";
#endif
    genAttributes = signalInteractionComplete;
    genStates = default -enabled;
    hints = {
  	HINT_SEEK_REPLY_BAR,
#ifndef GPC_ONLY
	HINT_DEFAULT_DEFAULT_ACTION,
#endif
  	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
  	    word IC_OK
  	}
    }
}
EnterPasswordCancel = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Cancel";
#endif
    genAttributes = signalInteractionComplete;
    hints = {
  	HINT_SEEK_REPLY_BAR,
  	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
  	    word IC_DISMISS
   	}
    }
}


PasswordInconsistent = PrefInteraction {
    moniker = "Inconsistent Passwords!";
    visibility = dialog;
    type = notification;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = InconsistenPasswordText;
    hints = {
  	HINT_INTERACTION_MODAL,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

InconsistenPasswordText = GenText {
    text = "The entered passwords are not the same.  Please re-enter.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 50>,
	    SpecHeight <>
	}
    }
}


InvalidPassword = PrefInteraction {
    moniker = "Invalid Password!";
    visibility = dialog;
    type = notification;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = InvalidPasswordText;
    hints = {
  	HINT_INTERACTION_MODAL,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

InvalidPasswordText = GenText {
    text = "The entered password is invalid.  Please re-enter.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 50>,
	    SpecHeight <>
	}
    }
}

end PCControlPasswordUI;


start PCControlWebSiteUI;
/*
 *  Edit list for permissible sites
 */
WWWDialog = PrefInteraction {
    moniker = "Permissible World Wide Web Sites";
    visibility = dialog;
    type = multipleResponse;
    genStates = default -usable;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = PermissibleText, PermissibleListGroup, DonePermissionButton,
	PermissionModifyDialog, PermissionAddDialog;
    hints = {
  	HINT_INTERACTION_MODAL
    }
}

DonePermissionButton = PrefTrigger {
    moniker = 'D', "Done";
    genAttributes = signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_OK
	}
    }
}

PermissibleText = GenText {
    text = "List of web sites to which you want to allow access:";
    genAttributes = readOnly;
}

PermissibleListGroup = PrefInteraction {
    children = PermissibleList, PermissibleControlGroup;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
}


PermissibleList = WWWDynamicList {

    /* Message and destination for when user changes are applied to the list. */
/*    applyMsg = MSG_OPTR_LIST_APPLY; */
    destination = PermissibleList;

    /* Message to send to destination to get a moniker for an item. */
    queryMsg = MSG_WWW_LIST_MONIKER_QUERY;

    /* Initial number of items in the list */
    numItems = 0;

    /* Make the initial selection C_WHITE.   In this example, we're keeping 
     * track of colors, where the item position corresponds directly to a
     * color.
     */
/*    selection = C_WHITE; */
/*    numSelections = 1; */

    hints = {
	/* Make the list scrollable. */
/*	HINT_EXPAND_WIDTH_TO_FIT_PARENT, */
	HINT_ITEM_GROUP_SCROLLABLE,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <SST_LINES_OF_TEXT, 8>
	    word 8
	}
    }
}

PermissibleControlGroup = PrefInteraction {
    children = AddButton, ModifyButton, DeleteButton;
	hints = {
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT
	 }
}

AddButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Add...";
#else
    moniker = 'A', "Add";
#endif
    action = MSG_GEN_INTERACTION_INITIATE, PermissionAddDialog;
    hints = {
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#ifndef GPC_ONLY
	HINT_TRIGGER_BRINGS_UP_WINDOW,
#endif
	HINT_CENTER_MONIKER
    }
}

ModifyButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Modify...";
#else
    moniker = 'M', "Modify";
#endif
    action = MSG_GEN_INTERACTION_INITIATE, PermissionModifyDialog;
    genStates = default -enabled;
    hints = {
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#ifndef GPC_ONLY
	HINT_TRIGGER_BRINGS_UP_WINDOW,
#endif
	HINT_CENTER_MONIKER
    }
}

DeleteButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Delete";
#else
    moniker = 'D', "Delete";
#endif
    action = MSG_PC_DELETE_WEBSITE, "TO_OBJ_BLOCK_OUTPUT";
    genStates = default -enabled;
    hints = {
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	HINT_CENTER_MONIKER
    }
}

/*
 * Permission Add dialog
 */
PermissionAddDialog = PrefInteraction {
    moniker = "Add Permissible Web Site";
    visibility = dialog;
    type = multipleResponse; /* properties; */
    attributes = modal, notUserInitiatable;
    children = PermissionAddText, PermissionAddInput, 
	PermissionAddButton, PermissionDontAddButton;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

PermissionAddText = PrefText {
    text = "Enter the addresses of the web sites you would like to add to the list of permissible web sites:\\\r(example: www.yahoo.com)";
    genAttributes = readOnly;
}

PermissionAddInput = WWWSiteText {
    textDisplayAttributes = default +initScrolling;
    hints = {
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
	    optr PermissionAddButton
	},
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

PermissionAddButton = PrefTrigger {
    moniker = "Add";
    genAttributes = signalInteractionComplete;
    genStates = default -enabled;
    action = MSG_PC_SET_WEBSITES, "TO_OBJ_BLOCK_OUTPUT";
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_APPLY
	}
    }
}
PermissionDontAddButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Don't Add";
#endif
    genAttributes = signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_DISMISS
	}
    }
}

/*
 *  Permission Modify dialog
 */
PermissionModifyDialog = PrefInteraction {
    moniker = "Modify Entry";
    visibility = dialog;
    type = properties;
    attributes = modal, notUserInitiatable;
    children = PermissionModifyInput, 
	PermissionChangeButton, PermissionDontChangeButton;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

PermissionModifyInput = ModifyPrefText {
    moniker = "Location:";
    textDisplayAttributes = default +singleLineText;
    hints = {
	ATTR_GEN_TEXT_NO_SPACES,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}
PermissionChangeButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Change";
#endif
    genAttributes = signalInteractionComplete;
    action = MSG_PC_MODIFY_WEBSITE, "TO_OBJ_BLOCK_OUTPUT";
    hints = {
	HINT_SEEK_REPLY_BAR,
#ifndef GPC_ONLY
	HINT_DEFAULT_DEFAULT_ACTION,
#endif
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_APPLY
	}
    }
}
PermissionDontChangeButton = PrefTrigger {
#ifdef GPC_ONLY
    moniker = "Don't Change";
#endif
    genAttributes = signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_DISMISS
	}
    }
}

end PCControlWebSiteUI;


start PCControlCheckPasswordUI;
/*
 *  Bring up password db for entering the news reader.
 */
CheckPassWordDialog = PrefInteraction {
    moniker = "KidGuard";
    visibility = dialog;
    type = command;
    genStates = default -usable;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = PasswordTitleGroup, NewsReaderEnterPassword, CheckPassWordOK,
	InvalidPassword2;
    hints = {
  	HINT_INTERACTION_MODAL
    }
}

/* edwdig was here */

/*
 * Putting the graphic moniker on the GenText caused it to draw incorrectly.
 * Solution was to replace the GenText with a GenInteraction, which holds
 * a GenGlyph and a GenText.
 */

/*
PasswordTitle = GenText {
    moniker = list { dialogMoniker }
    text = "The KidGuard password is required to access newsgroups.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 35>
	    SpecHeight <>
	}
    }
}
*/

PasswordTitleGroup = GenInteraction {
    children = PasswordTitleIcon, PasswordTitle;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

PasswordTitleIcon = GenGlyph {
    moniker = list { dialogMoniker }
}

PasswordTitle = GenText {
    text = "The KidGuard password is required to access newsgroups.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 35>
	    SpecHeight <>
	}
    }
}

/* end of edwdig's changes */

chunk newsgroupPasswordChunk = data {
	CHAR_ATTR_FONT_SIZE(FID_BISON, 13)
}

NewsReaderEnterPassword = PrefText {
    moniker = "Password:";
    textDisplayAttributes = default +singleLineText;
    maxLength = MAX_PASSWORD_SOURCE_LENGTH;
    hints = {
	HINT_DEFAULT_FOCUS,
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
	    optr CheckPassWordOK
	},
	ATTR_GEN_TEXT_CHAR_ATTR {
	    word newsgroupPasswordChunk
	}
    }
}

CheckPassWordOK = GenTrigger {
    genStates = default -enabled;
    hints = {
	HINT_SEEK_REPLY_BAR,
#ifndef GPC_ONLY
	HINT_DEFAULT_DEFAULT_ACTION,
#endif
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    InteractionCommand IC_OK
	}
    }
}

InvalidPassword2 = PrefInteraction {
    moniker = "Invalid Password!";
    visibility = dialog;
    type = notification;
    attributes = default + modal, +notUserInitiatable, +initiatedViaUserDoDialog;
    children = InvalidPassword2Text;
    hints = {
  	HINT_INTERACTION_MODAL,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 30>
	    SpecHeight <>
	}
    }
}

InvalidPassword2Text = GenText {
    text = "The entered password is invalid.  Please re-enter.";
    genAttributes = readOnly;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 50>,
	    SpecHeight <>
	}
    }
}

end PCControlCheckPasswordUI;


start PCControlStrings, data;

chunk wwwTitle = "The KidGuard password is required to access the internet.";
chunk chatTitle = "The KidGuard password is required to access chat rooms.";
chunk newsgroupTitle = "The KidGuard password is required to access newsgroups.";
chunk emailTitle = "The KidGuard password is required to access email.";
chunk defaultTitle = "The KidGuard password is required.";
chunk pcTitle = "The KidGuard password is required to change the internet access levels.";

end PCControlStrings;
