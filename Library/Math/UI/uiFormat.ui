
/*------------------------------------------------------------------------------

	Copyright (c) Geoworks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		floatCtrl.ui

AUTHOR:		Cheng, 10/92

ROUTINES:
	Name			Description
	----			-----------
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Cheng	2/92		Initial revision

DESCRIPTION:
		
	$Id: uiFormat.ui,v 1.1 97/04/05 01:23:20 newdeal Exp $

------------------------------------------------------------------------------*/

/*******************************************************************************
	FloatFormatUI
*******************************************************************************/

start FloatFormatUI, notDetachable;

ChooseFormatDB = GenInteraction {
	children =
#ifdef GPC_ONLY
	    ChooseFormatTopGroup,
#else
		FormatsList,
#endif
		UIFmtMainFormatGroup,
#ifdef GPC
	    UIFmtMainSampleSeparator,
#endif
		UIFmtMainSamplesGroup;
	genStates = default -usable;
}

#ifdef GPC
#ifdef GPC_ONLY
ChooseFormatTopGroup = GenInteraction {
    children = FormatsList, UIFmtMainTriggersGroup;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}
#endif

UIFmtMainSampleSeparator = GenGlyph {
    hints = {
	HINT_GLYPH_SEPARATOR,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
}
#endif

FormatsList = GenDynamicList {
	moniker = "Formats";
	behaviorType = exclusive;
	numSelections = 1;
	applyMsg = MSG_FORMAT_APPLY;
	queryMsg = MSG_FC_REQUEST_MONIKER;
	destination = "TO_OBJ_BLOCK_OUTPUT";

	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_DRAW_IN_BOX,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 37>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { word MSG_FORMAT_SELECTED }
	}
}

/*******************************************************************************
	UIFmtMainFormatGroup
*******************************************************************************/

UIFmtMainFormatGroup = GenInteraction {
	children =
		UIFmtMainFormatStr;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

UIFmtMainFormatStr = GenText {
#ifdef GPC_ONLY
    moniker = "Format Definition:";
#endif
#ifndef GPC_ONLY
	genAttributes = readOnly;
#endif
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 38>
			SpecHeight <>
		}
	}
}

/*******************************************************************************
	UIFmtMainSamplesGroup
*******************************************************************************/

UIFmtMainSamplesGroup = GenInteraction {
	children = 
#ifdef GPC_ONLY
	    UIFmtMainSampleTitle,
	    UIFmtMainSample1Group,
	    UIFmtMainSample2Group;
#else
		UIFmtMainSample1,
		UIFmtMainSample2;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
#ifdef GPC_ONLY
		HINT_CENTER_CHILDREN_ON_MONIKERS
#else
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
#endif
	}
}

#ifdef GPC_ONLY

UIFmtMainSampleTitle = GenGlyph {
    moniker = "Examples of positive and negative numbers:";
}

UIFmtMainSample1Group = GenInteraction {
    children = UIFmtMainSample1Base, UIFmtMainSample1Is, UIFmtMainSample1Sample;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

UIFmtMainSample1Base = GenText {
    text = "1234.567";
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
	    SpecHeight <>
	}
    }
}

UIFmtMainSample1Is = GenGlyph {
    moniker = " is displayed as: ";
}

UIFmtMainSample1Sample = GenText {
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
	    SpecHeight <>
	}
    }
}

UIFmtMainSample2Group = GenInteraction {
    children = UIFmtMainSample2Base, UIFmtMainSample2Is, UIFmtMainSample2Sample;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

UIFmtMainSample2Base = GenText {
    text = "-0.567";
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
	    SpecHeight <>
	}
    }
}

UIFmtMainSample2Is = GenGlyph {
    moniker = " is displayed as: ";
}

UIFmtMainSample2Sample = GenText {
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
	    SpecHeight <>
	}
    }
}

chunk UIFmtMainSample2MainMoniker	= "-0.567";
chunk UIFmtMainSample2NullMoniker	= "";

#else

UIFmtMainSample1 = GenText {
	genAttributes = readOnly;
	moniker = "1234.567 =";
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
			SpecHeight <>
		}
	}
}

UIFmtMainSample2 = GenText {
	genAttributes = readOnly;
	moniker = UIFmtMainSample2MainMoniker;
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
			SpecHeight <>
		}
	}
}

visMoniker UIFmtMainSample2MainMoniker	= "-0.567 =";
visMoniker UIFmtMainSample2NullMoniker	= "";

#endif

/*******************************************************************************
	UIFmtMainTriggersGroup
*******************************************************************************/

UIFmtMainTriggersGroup = GenInteraction {
#ifdef GPC_ONLY
    moniker = " "; /* dummy moniker to line up with list */
#endif
#ifndef GPC_ONLY
	genStates = default -usable;
#endif
	children =
		UIFmtMainTriggerCreate,
		UIFmtMainTriggerEdit,
		UIFmtMainTriggerDelete,
		UIFmtUserDefDB;
	hints = {
#ifdef GPC_ONLY
	    HINT_PLACE_MONIKER_ABOVE
#else
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#endif
	}
}

/*******************************************************************************

	The number formatting UI is organized around 2 dialog boxes.
	The UIFmtMainListGroup is a list of pre-defined and user-defined
	formats.  The user chooses from these formats or he can choose
	to create a new format, or edit or delete an existing format.

	To create a new format, the UIFmtUserDefDB dialog box is brought up.

	All number formatting UI objects are prefixed by "UIFmt".
	"UIFmtMain" identifies the object as belonging to UIFmtMainListGroup.

*******************************************************************************/

/*******************************************************************************
	UIFmtDefFormatGroup
*******************************************************************************/

UIFmtMainTriggerCreate = GenTrigger {
	moniker = 't', "Create";
	action = MSG_FORMAT_USER_DEF_INVOKE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
#ifdef GPC_ONLY
	    HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	    HINT_CENTER_MONIKER,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

UIFmtMainTriggerEdit = GenTrigger {
	moniker = 'E', "Edit";
	genStates = default -enabled;
	action = MSG_FORMAT_USER_DEF_INVOKE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
#ifdef GPC_ONLY
	    HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	    HINT_CENTER_MONIKER,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

UIFmtMainTriggerDelete = GenTrigger {
	moniker = 'D', "Delete";
	genStates = default -enabled;
	action = MSG_FORMAT_DELETE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
#ifdef GPC_ONLY
	    HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	    HINT_CENTER_MONIKER,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

/*******************************************************************************
	UIFmtUserDefDB
*******************************************************************************/

UIFmtUserDefDB = GenInteraction {
	moniker = "Define Format";
	children =
		UIFmtNameGroup,
#ifdef GPC_ONLY
	    UIFmtCompTop,
	    UIFmtCompBottom,
#else
		UIFmtComp1,
		UIFmtCharsGroup,
#endif
		UIFmtFormatStr,
#ifdef GPC_ONLY
	    UIFmtSamplesSeparator,
#endif
		UIFmtSamplesGroup,
		UIFmtReplyOK, UIFmtReplyCancel;
	attributes = default +notUserInitiatable, +modal;
	type = command;
	visibility = dialog;
	hints = {
		ATTR_GEN_HELP_CONTEXT {
			char "dbDefFormat", 0
		}
	}
}

#ifdef GPC_ONLY
UIFmtCompTop = GenInteraction {
    children = UIFmtDecimalGroup, UIFmtFormatGroup;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	HINT_DIVIDE_WIDTH_EQUALLY
    }
}

UIFmtCompBottom = GenInteraction {
    children = UIFmtOptionsGroup, UIFmtCharsGroup;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	HINT_DIVIDE_WIDTH_EQUALLY
    }
}

UIFmtFormatGroup = GenInteraction {
    moniker = "Format";
    children = UIFmtBooleanComp1;
    hints = {
	HINT_PLACE_MONIKER_ABOVE,
	HINT_DRAW_IN_BOX,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_CENTER_CHILDREN_VERTICALLY
    }
}

UIFmtOptionsGroup = GenInteraction {
    moniker = "Options";
    children = UIFmtBooleanComp2;
    hints = {
	HINT_PLACE_MONIKER_ABOVE,
	HINT_DRAW_IN_BOX,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
	HINT_CENTER_CHILDREN_HORIZONTALLY,
	HINT_CENTER_CHILDREN_VERTICALLY
    }
}

UIFmtSamplesSeparator = GenGlyph {
    hints = {
	HINT_GLYPH_SEPARATOR,
	HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
}
#endif

/*******************************************************************************
	UIFmtNameGroup
*******************************************************************************/

UIFmtNameGroup = GenText {
	moniker = "Name of Format:";
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 20>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = 40;
}

/*******************************************************************************
	UIFmtComp1
*******************************************************************************/

#ifndef GPC_ONLY
UIFmtComp1 = GenInteraction {
	children =
		UIFmtDecimalGroup,
		UIFmtOptionsGroup;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

UIFmtDecimalGroup = GenInteraction {
	moniker = "Decimal";
	children =
		UIFmtNumDecimals,
		UIFmtDecimalOffset;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
#ifdef GPC_ONLY
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
#else
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
#endif
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

UIFmtNumDecimals = GenValue {
	moniker = 'P', "Places:";
	minimum = 0;
	maximum = DECIMAL_PRECISION;
	value = 2;
	increment = 1;
	applyMsg = MSG_FORMAT_NUM_DECIMALS;
	destination = "TO_OBJ_BLOCK_OUTPUT";
#ifdef GPC_ONLY
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 3>
			SpecHeight <>
		}
	}
#endif
}

UIFmtDecimalOffset = GenValue {
	moniker = 'f', "Offset:";
	minimum = "-DECIMAL_PRECISION";
	maximum = DECIMAL_PRECISION;
	value = 0;
	increment = 1;
	applyMsg = MSG_FORMAT_DECIMAL_OFFSET;
	destination = "TO_OBJ_BLOCK_OUTPUT";
#ifdef GPC_ONLY
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 3>
			SpecHeight <>
		}
	}
#endif
}


UIFmtCharsGroup = GenInteraction {
#ifdef GPC_ONLY
	moniker = "Number Display";
#endif
	children =
#ifdef GPC_ONLY
	    FirstColumn, SecondAndThirdColumn;
#else
		FirstRow,
		SecondAndThirdRow;
#endif
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#ifdef GPC_ONLY
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#else
		HINT_ORIENT_CHILDREN_VERTICALLY
#endif
	}
}

#ifdef GPC_ONLY

FirstColumn = GenInteraction {
    children = EmptySpace, AllLabel, PositiveLabel, NegativeLabel;
    hints = {
	HINT_DIVIDE_HEIGHT_EQUALLY,
	HINT_RIGHT_JUSTIFY_CHILDREN
    }
}

SecondAndThirdColumn = GenInteraction {
    children = SecondColumn, ThirdColumn;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY,
	HINT_DIVIDE_WIDTH_EQUALLY
    }
}
SecondColumn = GenInteraction {
    children = LeadingLabel, UIFmtHeader, UIFmtPrePositive, UIFmtPreNegative;
    hints = {
	HINT_DIVIDE_HEIGHT_EQUALLY,
	HINT_CENTER_CHILDREN_HORIZONTALLY
    }
}

ThirdColumn = GenInteraction {
    children = TrailingLabel, UIFmtTrailer, UIFmtPostPositive, UIFmtPostNegative;
    hints = {
	HINT_DIVIDE_HEIGHT_EQUALLY,
	HINT_CENTER_CHILDREN_HORIZONTALLY
    }
}

LeadingLabel = GenGlyph {
    moniker = "Leading:";
}

TrailingLabel = GenGlyph {
    moniker = "Trailing:";
}

#else

FirstRow	= GenInteraction {
	children =
		EmptySpace,
		PositiveLabel,
		NegativeLabel,
		AllLabel;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 20>
			}
		}
}

SecondAndThirdRow = GenInteraction {
	children =
		SecondRow,
		ThirdRow;
	hints	= {
		HINT_RIGHT_JUSTIFY_CHILDREN,
		HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

SecondRow	= GenInteraction {
	children =
		UIFmtPrePositive,
		UIFmtPreNegative,
		UIFmtHeader;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 20>
			}
		}
}
		
ThirdRow	= GenInteraction {
	children =
		UIFmtPostPositive,
		UIFmtPostNegative,
		UIFmtTrailer;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 20>
			}
		}
}

#endif

EmptySpace	= GenGlyph {
	moniker = " ";
#ifndef GPC_ONLY
	hints	= {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
			SpecHeight <SST_LINES_OF_TEXT, 1>
			word 1
			}
		}
#endif
}

PositiveLabel	= GenGlyph {
#ifdef GPC_ONLY
	moniker = "Positive:";
#else
	moniker = "Positive";
#endif
#ifndef GPC_ONLY
	hints	= {
		HINT_FIXED_SIZE {
#if DO_PIZZA
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN+2>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
			word 1
			}
		}
#endif
}

NegativeLabel	= GenGlyph {
#ifdef GPC_ONLY
	moniker	= "Negative:";
#else
	moniker	= "Negative";
#endif
#ifndef GPC_ONLY
	hints	= {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, PAD_STR_LEN>
			SpecHeight <SST_LINES_OF_TEXT, 1>
			word 1
			}
		}
#endif
}

AllLabel	= GenGlyph {
#ifdef GPC_ONLY
	moniker	= "All:";
#else
	moniker	= "All";
#endif
#ifndef GPC_ONLY
	hints	= {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, PAD_STR_LEN>
			SpecHeight <SST_LINES_OF_TEXT, 1>
			word 1
			}
		}
#endif
}
		
UIFmtPrePositive = GenText {
#ifndef GPC_ONLY
	moniker	= 'L', "Leading:";
#endif
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = SIGN_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

UIFmtPostPositive = GenText {
#ifndef GPC_ONLY
	moniker	= 'T', "Trailing:";
#endif
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = SIGN_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

UIFmtPreNegative = GenText {
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = SIGN_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

UIFmtPostNegative = GenText {
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, SIGN_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = SIGN_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

UIFmtHeader = GenText {
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, PAD_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = PAD_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

UIFmtTrailer = GenText {
	textDisplayAttributes =
		noWordWrapping,
		useTabForNavigation,
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
#ifdef GPC_ONLY
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, PAD_STR_LEN>
#endif
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
	maxLength = PAD_STR_LEN;
        applyMsg = MSG_META_DUMMY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

/*******************************************************************************
	UIFmtOptionsGroup
*******************************************************************************/

#ifndef GPC_ONLY
UIFmtOptionsGroup = GenInteraction {
	children =
		UIFmtBooleanComp2,
		UIFmtBooleanComp1;
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}
#endif

UIFmtBooleanComp1 = GenItemGroup {
	children =
		UIFmtFixed,
		UIFmtScientific;
	applyMsg = MSG_FORMAT_OPTION_STYLE_CHANGE;
	destination = "TO_OBJ_BLOCK_OUTPUT";
#ifdef GPC_ONLY
	hints = {
	    HINT_ORIENT_CHILDREN_VERTICALLY,
	    /* eat double press */
	    ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
		word MSG_META_DUMMY
	    }
	}
#endif
}

UIFmtFixed = GenItem {
	moniker = 'x', "Fixed";
	identifier = 0;
}

UIFmtScientific = GenItem {
	moniker = 'S', "Scientific";
	identifier = 1;
}

UIFmtBooleanComp2 = GenBooleanGroup {
#ifndef GPC_ONLY
	moniker = 'O', "Options";
#endif
	children =
		UIFmtComma,
		UIFmtPct,
		UIFmtLead0,
		UIFmtTrailZero,
		UIFmtHeaderSignPos,
		UIFmtTrailerSignPos;
	applyMsg = MSG_FORMAT_OPTION_BOOLEAN_CHANGE;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
#ifdef GPC_ONLY
	    HINT_ORIENT_CHILDREN_VERTICALLY,
	    HINT_CUSTOM_CHILD_SPACING {
		word 0
	    }
#else
		HINT_BOOLEAN_GROUP_MINIMIZE_SIZE
#endif
	}
}

#ifdef GPC_ONLY
#define SMALLER_BOOLEAN	\
	hints = {\
	    HINT_FIXED_SIZE { \
		SpecWidth <> | \
		SpecHeight <SST_PIXELS, 12> \
	    }\
	}
#else
#define SMALLER_BOOLEAN
#endif

UIFmtComma = GenBoolean {
	moniker = "Use Commas";
	identifier = "mask FO_COMMA";
	SMALLER_BOOLEAN
}

UIFmtPct = GenBoolean {
	moniker = "Percent (%)";
	identifier = "mask FO_PCT";
	SMALLER_BOOLEAN
}

UIFmtLead0 = GenBoolean {
	moniker = "No Leading Zero";
	identifier = "mask FO_LEAD_ZERO";
	SMALLER_BOOLEAN
}

UIFmtTrailZero = GenBoolean {
	moniker = "No Trailing Zeros";
	identifier = "mask FO_TRAIL_ZERO";
	SMALLER_BOOLEAN
}

UIFmtHeaderSignPos = GenBoolean {
	moniker = "Sign Follows Header";
	identifier = "mask FO_HEADER_SIGN_POS";
	SMALLER_BOOLEAN
}

UIFmtTrailerSignPos = GenBoolean {
	moniker = "Sign Precedes Trailer";
	identifier = "mask FO_TRAILER_SIGN_POS";
	SMALLER_BOOLEAN
}

/*******************************************************************************
	UIFmtSamplesGroup
*******************************************************************************/

UIFmtFormatStr = GenText {
#ifdef GPC_ONLY
    moniker = "Format Definition:";
#endif
#ifndef GPC_ONLY
	genAttributes = readOnly;
#endif
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 38>
			SpecHeight <>
		}
	}
}

UIFmtSamplesGroup = GenInteraction {
	children = 
#ifdef GPC_ONLY
		UIFmtSampleTitle,
		UIFmtSample1Group,
		UIFmtSample2Group;
#else
		UIFmtSample1,
		UIFmtSample2;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

#ifdef GPC_ONLY

UIFmtSampleTitle = GenGlyph {
    moniker = "Examples of positive and negative numbers:";
}

UIFmtSample1Group = GenInteraction {
    children = UIFmtSample1Base, UIFmtSample1Is, UIFmtSample1Sample;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

UIFmtSample1Base = GenText {
    text = "1234.567";
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
	    SpecHeight <>
	}
    }
}

UIFmtSample1Is = GenGlyph {
    moniker = " is displayed as: ";
}

UIFmtSample1Sample = GenText {
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
	    SpecHeight <>
	}
    }
}

UIFmtSample2Group = GenInteraction {
    children = UIFmtSample2Base, UIFmtSample2Is, UIFmtSample2Sample;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

UIFmtSample2Base = GenText {
    text = "-0.567";
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
	    SpecHeight <>
	}
    }
}

UIFmtSample2Is = GenGlyph {
    moniker = " is displayed as: ";
}

UIFmtSample2Sample = GenText {
    textDisplayAttributes = singleLineText;
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
	    SpecHeight <>
	}
    }
}

#else

UIFmtSample1 = GenText {
	genAttributes = readOnly;
	moniker = "1234.567 =";
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
			SpecHeight <>
		}
	}
}

UIFmtSample2 = GenText {
	genAttributes = readOnly;
	moniker = "-0.567 =";
	textDisplayAttributes =
		singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 28>
			SpecHeight <>
		}
	}
}

#endif

/*******************************************************************************
	UIFmtMainReplyGroup
*******************************************************************************/

UIFmtReplyOK = GenTrigger {
#ifdef GPC_ONLY
	moniker = "Create";
#else
	moniker = "OK";
#endif
	action = MSG_FORMAT_USER_DEF_OK, "TO_OBJ_BLOCK_OUTPUT";
	/* no signalInteractionComplete */
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION
	}
}

UIFmtReplyCancel = GenTrigger {
#ifdef GPC_ONLY
	moniker = "Don't Create";
#endif
	genAttributes = signalInteractionComplete;
	action = MSG_FORMAT_USER_DEF_CANCEL, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

end FloatFormatUI;

start ControlStrings, data;

chunk FCName = {Float Format}
chunk ChooseFormatName = {Choose Format}
chunk DefineFormatName = {Define Format}

chunk formatConfirmDeleteStr = {Are you sure you want to delete the \"\1\" format?}


chunk formatNoName = \
        {You cannot define a format without giving it a name. Enter a name and try again.\r\rError Code: MT-01}

chunk formatNameNotUnique = \
        {A format with this name already exists. Enter a new name and try again.\r\rError Code: MT-02}

chunk formatTooManyFormats = \
        {You have reached the limit for the number of user-defined formats. The operation could not be completed.\r\rError Code: MT-03}

chunk formatAllocError = \
        {Unable to create format.\r\rError Code: MT-04}

chunk overflowStr	= "overflow";
chunk underflowStr	= "underflow";
chunk errorStr		= "error";

end ControlStrings;
