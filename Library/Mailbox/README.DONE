
	$Id: README.DONE,v 1.2.7.1 97/03/29 05:23:50 canavese Exp $


------------------------------------------------------------------------------

			    TAKEN CARE OF

------------------------------------------------------------------------------

MailboxMessageControlPanel:
	control panel destroyed when Done is clicked
	removal of child causes panel array entry to be deleted
	criteria for system panels tracked specially:
		- if system panel changed to be equivalent to specific, then
		  specific comes down (want routine that can take criteria
		  and return optr of panel displaying the equivalent) => if
		  switch to All mode, all specific panels for that queue come
		  down.
	knows if should display Show: list
	knows if needs to update message list on inbox/outbox change
		=> can construct the list itself (just needs DBQMatch +
		   offset & bytes to match + queue)
	knows to get verb from first message (either MMD_transVerb or by
		mapping MMF_VERB to appropriate text, based on msg's transport)
	knows when to show Verb All trigger
	- NEED TO TRACK THE ONES THAT ARE UP FOR QUERY PURPOSES AND HAVE
	A MECHANISM FOR CHECKING IF A PARTICULAR MESSAGE MATCHES THE QUERY
		Types of queries (time bounds common to all):
			- destined for app
			- uses particular medium & unit
			- uses transport with particular address
		app object messages:
			DISPLAY_PANEL(query_type, data_block)
			UPDATE_PANELS(msg)
			SYSTEM_OUT_PANEL(trans_data, med_data)
			SYSTEM_IN_PANEL(app_token)
		control panel remains in existence for nnn seconds after
			user clicks Done. If notified of new message that
			matches criteria, then comes back on screen

	When given display criteria:
	- alloc transmit & query queues & trans addr list ID
	- foreach message:
	    if matches:
		if message is no_query & time is within bounds
		    add to transmit queue
		else
		    add to query queue
	    "match":
		if by_app compare destApp
		else
		    if by_medium & transport doesn't use medium, or
			by_transport and not same transport, no match
		    grab xmit thread block & look for thread for transport
			+ medium
		    if exists, set flag if message is in thread's queue
		    foreach address that's not sent & talID isn't thread's
			queued or xmit ID:
			if by_transport, make direct comparison and mark if
			    matched
			if by_medium, check the criteria against the address
				medium, using the medium token in the address.
				mark if matched
		    if no_query & one+ match, add to transmit queue
		    else if one+match, add to query queue
		    release xmit thread block

	- if anything in transmit queue, OutboxTransmitMessageQueue(queue,
	  tal ID)
	- if anything in the query queue, put up modified control panel,
	  passing the queue of messages & tal ID to the MMLC

add generation number to OutboxThreadData and pass that in OP_SETUP so in
	handling IC_STOP, we can make sure the data we get is for the same
	thread, since the thread handle could be reused...

    Media:
1/2d	- someone should maintain the union of all the poof messages that
 +	  can be sent, based on the capabilities of available transport
 +	  drivers (e.g. when transport appended to medium entry in
 +	  mediaTransport, should get capabilities from transport dmap and
 +	  merge in poof message bits). This record would then be used by
 +	  the OutboxPoofControlClass to decide whether to be usable or no.
 +	  When new bit is added, notification must be sent out.
 +--	- similar thing (can be in same variable) should be maintained for
	  ability to receive messages, with notification sent out when union
	  bit goes from 0 to 1
-----
.5d

when message sent @ deadline and failed, reschedule for ?

MailboxNotifyMediumAvailable:
	- record medium & unit
	- send mbapp::DISPLAY_PANEL(BY_MEDIUM, block)

MailboxNotifyMediumConnected:
	- mark medium & unit
	- get transports for medium
	- foreach transport:
		- load driver
		- get dest addr
		- if got addr, send mbapp::DISPLAY_PANEL(BY_TRANSPORT, block)
		- unload driver

MailboxApplicationClass:
	MSG_MA_DISPLAY_PANEL

initialization:
	if AdminInit() fails, put up box and die
	SysHookNotification
	- retry timer shme will have to go in here as well

	
need extern method decl for MSG_MAILBOX_PROCESS_NEW_TRANSPORT -> MTNewTransport
	in MailboxProcessClass

MainRegisterFileChangeCallback:
	ax	= callback data
	cx:dx	= vfptr of routine:
			ax	= callback data
			dx	= FileChangeNotificationType (never FCNT_BATCH)
			es:di	= FileChangeNotificationData
			-> nothing
	-> nothing
	
	callback is *not* persistent. probably stored in app block.

DO NOT CREATE STATE FILE

MailboxMessageListClass:
	initialized with DBQ & tal ID (0 => all addresses) of messages to
		display
	if message transport isn't M_ID_GW/GMTID_LOCAL, list trans addrs
	else list dest app
	take dbq and sort it:
		outgoing: reverse chron
		incoming: prio, then reverse chron
		have chunk array with queue indices to map dlist indices to.
	returns MailboxMessage tokens with added refs (DBQDelRef must be called
	for each when done)

	the idea here:
	    - have DBQ of source queue (inbox or outbox)
	    - have criteria chunks
	    - run through the queue using DBQGetItem, calling selection routine
	      for each message. selection routine is responsible for calling 
	      MessageListAddMessage, passing message + address #. remove ref
	    - call ArrayQuickSort. callback points to the two messages and
	      passes them + the address #s to subclass callback. (1st 
	      element may have been locked by lock callback provided by ML. 2nd 
	      will not have been locked.) 
	      
	      possible optimization: callback negates result from subclass
	      callback. messages are in reverse order in DBQ, sorting things in
	      descending order allows us to not sort in the outbox case (if the
	      outbox callback knows to process the addresses in reverse order),
	      simply subtracting the list index from the # of entries to get
	      the entry index for finding the message.

MailboxTransportListClass:
	- depending on mode, uses media -> transport map to find transports
	  that should be listed (must pair medium+transport and look that up to
	  get the moniker list to use...), or (if for control panel) looks in
	  outbox to find those transport/medium pairs that have at least one
	  message. In control panel mode, also displays All token.
	- accept array of MailboxMedium tokens indicating there is address info
	for that medium (array may be empty; invocation of method passing array
	indicates list should display additional graphic in moniker saying
	if info is available)
	- add hint/attribute to select tool monikers or text monikers, then use
	MTLC in menu UI and tool UI for MSC
	- attr to add "All" item, with appropriate notification
	- message to map index to transport token
	
MCP adds itself to the inbox/outbox notification list on SET_SPECIFIC, removes
	on META_BLOCK_FREE. Send ML_UPDATE_LIST on MESSAGE_ADDED or 
	MESSAGE_REMOVED

ML will use scan routines to decide whether to add stuff on _ADDED, or will
	run through the array and remove references to the message on _REMOVED

MD adds itself to the inbox/outbox notification list on SET_MESSAGE, removes
	on ReleaseMessage. if message removed while box is up, box is 
	IC_DISMISSed, which will release the reference.

add detail box subclass:
	- calls self to get string for \1 in moniker
	- knows to display subject & date
	- calls self to fill in additional details:
		- outbox: destination (marked / all...), # failures, failure
			  reason, bounding times
		- inbox: message size, priority, deadline
	- dup each time, or just have one per panel?
	- must take down detail box if it gets deleted (poss. because now
	  fully sent)

add utility routine to format a FileDateAndTime into a chunk (handle Eternity)

if message is added with SEND_WITHOUT_QUERY and medium is available, do not
	give outbox confirmation: progress box will be the confirmation

progress box Stop button sends message to dialog, which then looks through
	the thread data to find the one using the dialog & setting the cancel
	flag (while holding thread data lock)

MessageCreateMoniker:
	- create a moniker from a MailboxMessage
	- told whether to include transport/destination app
	- MailboxMessage.MMD_transport tells what format to use
	- 2 lines max for inbox, 1 line/trans addr
	- given trans addr token (0 => all addresses)
	- needs also to accept talID that is address #, if each-addr-is-msg
	  model is implemented
	- if trans addr selected & !TID_ADDR_INDEX, includes all unsent
	  duplicates
	- assumption: if specific address(es) selected, all duplicates will
	  be properly marked, if they are to be included.

	algorithm:
	    - if sizes not computed yet:
		- ask app object for a gstate for computation purposes
		- first line is 45 chars (subject) + 16 chars (date/time)
		- subsequent lines begin 3 chars in and extends to end of
		  first line
		- record rounded GFMI_MAX_ADJUSTED_HEIGHT
		- destroy gstate
	    - create lmem gstring
	    - set first-field clipping rectangle
	    - if transport local:
		- if MMF_ALL_VIEW, draw app name from token as first string
		  @ 0,0
		- else, draw first line of subject as first string
		  (want subroutine that, when given a chunk will return the
		  start & # chars to the EOS or \r)
	    - else
		- if MMF_ALL_VIEW, get string for transport+medium of message
		  and draw that at 0,0, followed by ": " @CP
		- else move to 0,0
		- draw 1st line of subject @cp
	    - remove clip rect
	    - format & draw message date & time in second field of first line
	    - if !local:
		- set cury to line height
		- foreach marked (if non-z search talID)/non-dup (if z search
		  talID), unsent address:
		    - subroutine:
			- set clip rect from 3-chars-in, cury to
			  1st-line len, cury+line-height
			- draw "To: " @ 3-chars-in, cury
			- draw 1st line of user addr @CP
			- cury += line-height
		    - if talID==0:
			- foreach duplicate:
			    - call subroutine for it
	    - else if MMF_ALL_VIEW:
		- set clip rect from 3-chars-in, line-height to
		  1st-line len, 2*line-height
		- draw 1st line of subject @ 3-chars-in, line-height
		- cury = 2*line-height
	    - else
		- cury = line-height
	    - end gstring
	    - destroy gstring, preserving data
	    - LMemInsertAt room for VisMoniker+VisMonikerGString @ 0
	    - set VM_type to VMT_GSTRING + DAR_NORMAL + DC_TEXT
	    - set VM_width to max length of 1st line
	    - set VM_height to cury
		

need something *not* in the admin file that tracks whether a message is
	actively being transmitted, or the user is being asked about it.
	- OutboxThreads block...

transmission thread:
	- setup local frame & set cancelFlag offset variable in dgroup
	- create progress box
	- allocate tal ID for actual transmission
	- store progress box & transmit talID in thread data block
	- load transport driver
	- while there are still messages in the queue (plock data block, then
	  check queue contents. if empty, remove thread entry from data
	  structure, delete the queue, release the block, and exit):
		- find all messages with same significant address bytes in
		  addresses with thread's talID (requires same medium token to
		  bother with comparison), storing them in yet another
		  queue, marking the addresses that match with transmit
		  tal ID.
		- call DR_MBTD_PREPARE_FOR_TRANSPORT for each message in batch
		  queue
			- if first and only message gets TRY_LATER error, notify
			  user of error, remove from thread queue & bail
			- else if TRY_LATER, adjust address tal IDs back to
			  thread's tal ID, and remove from batch queue
		- call DR_MBTD_CONNECT, passing address w/ transmit tal ID from
		  first message in the batch
		- if successful, for each message:
			- initialize progress box (DBQAddRef, send MM, xmit 
			  tal ID)
			- initialize cancel flag
			- call DR_MBTD_TRANSMIT_MESSAGE
			- add log entry
			- if successful, mark address(es) as SENT
				- if no more addresses w/thread's talID, remove
				  message from thread queue
				- if no more addresses unsent, delete message
				  from outbox
			- else if user canceled
				- mark addresses with tal ID of 0
				- ask if entire batch should be canceled.
				- if yes, do same as for connection
				  lost & no retry.
				- if no, then loop
			- if connection lost
				- notify user and ask if should retry.
				- if yes
					- reset all xmit tal IDs to thread's
				- if no
					- reset all xmit tal IDs to 0
				- in any case, break out of loop
		- if connect unsuccessful, store reason and mark all addresses
		  with reason token (subr: mark all addresses !SENT & xmit
		  talID with reason token)
		- destroy batch queue
		- call DR_MBTD_END_CONNECT
				  
possibility:
	- maintain an element array of var-sized elements holding medium/unit
	  pairs. each internal address would hold a ref to such a thing,
	  determined when message was registered
	- maintain an element array of fixed-sized elements holding
	  transport/medium pairs. existence of element => message for that
	  pair.
	- change media -> transport map to store not just transport ref, but
	  also ref to name array that holds verb, and chunk holding moniker
	  list (all monikers in list are copied in to same block, yes?)


outbox tracks transmission threads with data structure that holds: thread
	handle, dbq for messages being transmitted, transport driver token,
	progress box optr, queued-tal-ID for message addresses to be used,
	transmit-tal-ID for messages being transmitted

OutboxTransmitMessage (msg, talID):
	- plock data block
	- look for thread for transport driver
	- if found, add message to queue, setting addresses with passed tal ID
	  to the thread's own tal ID
	- if not found:
		- alloc dbq & entry in tracking block
		- add msg to dbq
		- set thread's tal ID to message's
		- spawn thread
		- store handle
	- release block

OutboxTransmitMessageQueue (dbq, talID):
	- if all messages not for the same transport:
		- break dbq into multiple dbqs, one per transport and call
		  internal form on each one
	- else call internal for dbq

OutboxTransmitMessageQueueInternal:
	- plock data block
	- look for thread for transport driver
	- if found, add all messages to queue, adjusting tal IDs of messages to
	  thread's tal ID
	- if not found:
		- alloc entry in tracking block & set passed dbq as thread's dbq
		- set thread's tal ID to queue's
		- spawn thread
		- store handle
	- release block

should D/D/D boxes have a Close button when more than one message is present?
	-> no longer an issue. D/D/D boxes are just an inbox/outbox panel

how do we deal with media that are found *before* the mailbox library gets
	loaded? should the library go on a quest? should notifications go
	via the kernel and get queued up or something like that? And what
	about things like mother-board serial ports where the only one
	to know the thing exists is the serial driver, which isn't loaded
	all the time? it might get loaded when a transport driver that uses
	it gets loaded for some reason, I suppose...

	- add routines to kernel to perform possibly-delayed routine
	notification:
		si	= subsystem
		di	= notification type
		ax, bx, cx, dx, bp = notification data
		-> nothing
	and to hook the notification:
		si	= subsystem
		cx:dx	= vfptr of notification routine
		-> carry set if subsystem already hooked
	and to unhook the notification:
		si	= subsystem
		-> nothing
	and to flag subsystem as not supported (so notifications are flushed)
		si	= subsystem
		-> nothing

	if not hooked, notification gets queued (else routine gets called)
	when hooked, all notifications get processed in-order before hook-set
		routine returns

MediaTransportAddMedium:
	if medium not in the map, record number of elements & EAH_freePtr before
		querying the known transport drivers (XXX: how do we find the
		known drivers without deadlock?). if new element added, then
		send out notification to MailboxTransportListClass objects

MediaNewTransport:
	just send message to process to cope with this, so media trans map is
	always locked before trans driver map

Queue
	queue is actually a HugeArray whose handle is returned.

	Operations that need to be performed:
		find all elements for a particular transport
		find all elements for an app
		find all elements for a transport with an address that
			can be sent now
		find element by index (list of all things)

	ax = DBQCreate(bx)
		create a queue
		bx 	= file
		-> ax	= queue id

	DBQAdd(bx, si, dxax)
		append an item to a queue
		bx	= file
		si	= queue id
		dxax	= DBGroupAndItem
		-> nothing
		
	DBQRemove(bx, si, dxax)
		remove an item from a queue
		bx	= file
		si	= queue id
		dxax	= DBGroupAndItem
		-> nothing

	dxax = DBQFindIndex(bx, si, cx)
		Find the nth entry of a queue
		bx	= file
		si	= queue id
		cx	= index #
		-> dxax	= entry (0_0 if not that many entries in the queue)
		
	DBQEnum(bx, si, cx:dx)
		iterate over all elements of a queue
		bx	= file
		si	= queue id
		cx:dx	= callback routine:
			  bx	= file
			  sidi	= DBGroupAndItem
			  cx, dx, bp = as returned by previous call
			  -> carry set to stop:
			  	ax, cx, dx, bp = to return
			     clear to continue:
			     	cx, dx, bp = for next callback
			  	
		-> carry set if callback stopped iteration:
			ax, cx, dx, bp = as returned by callback
		   carry clear if callback didn't stop iteration:
		   	ax, cx, dx, bp = as returned by callback
			
	ax = DBQMatch(bx, si, dx:di, cx, ax)
		match bytes in each entry against the passed buffer and
		store the DBGroupAndItem for each match in the HugeArray
		whose handle is returned.
		bx	= file
		si	= queue id
		dx:di	= buffer containing comparison bytes
		cx	= number of bytes to compare
		ax	= offset within each entry of data to compare
		-> ax	= handle of HugeArray containing the DBGroupAndItem
			  refs of those elements that matched

DriverMap module:
	ax = DMapAlloc(geode_token, path, protocol, init_func)
	carry = DMapCheckExists(map_handle, token)
	bx:handle, ax:GLE = DMapLoad(map_handle, token)
	DMapFree(map_handle)

media -> transport map must return transport tokens, not allow callback

media -> transport map is persistent. the presence of a transport driver in
	this map is what allows a transport driver to appear in the list of
	possible transports in the mailbox send control. (map is organized as
	an element array, holding transport tokens, and a variable-sized
	chunk array, keyed by medium followed by array of element #'s)

transport dmap must have an init routine bound to it so when each driver
	is added to the map, the driver is loaded and asked about each
	medium that has ever been seen (as indicated by the media -> transport
	map)


MessageCreateMoniker & MailboxApplicationListClass both need a quick way to go
	from an app token to an app name.

need mainDisplayType set on OPEN_APPLICATION for OTL to use

have GCN list on the Mailbox app object to which MSCs add themselves to receive
	notification of new transport drivers....

need notification list in mb app for when new transport is added to a medium 
	that's been seen, so MailboxTransportListClass objects can update

1d	InboxDetailsClass:
		- call driver to get body size & place in box
		- place string for priority in box
		- get delivery verb from message flags.
1/2d	InboxNotifyAppLoaded:
		- if server mode is user-interactible and app token ref count
		  > 1, send out DISPLAY_PANEL(token) to app object
1d	InboxControlPanelClass:
		- if any driver can retrieve messages, provide Get New trigger
		  that brings up menu with transport list in get_new mode.
		- if asked to get_new:
			- spawn thread
			- load driver
			- call DR_MBTD_RETRIEVE_MESSAGES(medium)
			- unload driver
1/2d	InboxMessageListClass
		- select by comparing token (or doing nothing, if in All mode)
		- sort by priority (primary) & date (secondary)
1/2d	InboxApplicationListClass:
		- can use element #s from app-tokens array, as they never go
		  away.
		- needs notification when new app added (or old unknown is
		  found to be an alias, or old unknown is found)
1/2d	InboxMessageAdded:
		- add token to app-token map (first add token, then add
		  reference if new; notify IALs if ref count == 2)
		- send out INBOX_CHANGED notification
		- if token is marked as an alias in the app-token map,
		  change the MMD_destApp to the real token, adjusting
		  reference counts accordingly.
1/2d	InboxGetAppName:
		- if alias, go to non-alias entry
		- if name not known, call IACPLocateServer
			- if server found, fill in name
			- else return "Unknown Application"
		- else, return name
2d	InboxNotifyNewIACPBinding:
		- if token in app-token array
			- perform IACPLocateServer.
			- if found:
				- see if server has same FEA_TOKEN
				- if not, mark token as alias and change the
				  destApp field of all messages for the alias
				  to be the real one (generate appropriate
				  notification for inbox change [pretend
				  message removed and added again] & app list
				  change)
				- if so, and ref count > 1, generate 
				  notification to rebuild app list
				- nuke ALB
	InboxInit
		- needs to look for any token whose app name is unknown, if
		  there are messages for it
1/2d	MessageControlPanelClass:
		- track optional delivery trigger:
			- update its moniker as message criteria change
			- set usable/not usable depending on whether in
			  single / all view mode
1/2d	MailboxAcknowledgeMessageReceipt
1/2d	MailboxDeleteMessage
1/2d	MailboxGetStorageType
 +--	MailboxGetBodyFormat
1/2d	MailboxGetSubjectLMem
 +--	MailboxGetSubjectBlock
1/2d	MailboxGetBodyRef
1d	MailboxChangeBodyFormat
1/2d	MailboxStealBody
1/2d	MailboxDoneWithBody
1/2d	MUCleanupNotifyTransport
		- needs to do same sort of shme as MUDeleteBody if transport
		  can't be loaded
		- needs to pass MMD_transData, not the message, to
		  DR_MBTD_DELETE
2d	OutboxTransportListClass:
		- when operating in menu, tool, get_new or poof mode, needs to
		  hook the list to get notification of available transports
		- needs poof mode where it can be told what type of poof
		  message that is being built and can customize its list 
		  accordingly
		- needs get_new mode where transports are restricted to those
		  whose driver says it can retrieve messages (just run through
		  the list of eligible transports, when in this mode, deleting
		  anything whose capabilities doesn't include that bit; this
		  can be a subroutine shared with the poof mode, as both are
		  just looking for a single bit in the capabilities [retrieved
		  using DMapGetAttributes(ds:[di].MT_transport)] record for
		  the transport driver)
1d	MTNewTransport:
		- generate notification if new transport uses medium that we
		  already knew about. (time estimate includes adding handler
		  for notification to interested parties)
 +-	OutboxCleanupAddresses

1d		- hook in EMObjectManager to create & bring up system inbox
 +		  and outbox panels
	MessageControlPanelClass:
		- on criteria change, if panel is system, let mailbox app
		  know of the change (determine inbox/outbox by looking
		  at object class...)
		- add message that MessageList can call to say there are
		  no messages in the list. specific panels will destroy
		  themselves, while system panel may change to another
		  transport/app, or do nothing, waiting for the transport/app
		  list to tell them to switch.
1/2d	MessageDetailsClass:
		- adjust time-bounds moniker with delivery verb
	MailboxApplicationClass:
 +-		- adjust system inbox/outbox panel criteria when user changes
		  views, bringing down any specific panel showing the same or
		  a subset of the new messages

PCMCIA Drivers, Spooler, Mailbox library:
2d	- Spooler needs to generate medium-available notification for all
	  printers on startup. if no printers installed, we think we want it
	  to generate medium-available notification for bogus printer so
	  Print is always available in Send menus.
2d	- Mailbox library may need to consult ini file or something to
	  generate system-specific notifications for media that's always
	  around (like INFRARED)
