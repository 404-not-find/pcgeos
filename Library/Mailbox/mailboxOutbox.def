COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		mailboxOutbox.def

AUTHOR:		Adam de Boor, Apr 19, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	4/19/94		Initial revision


DESCRIPTION:
	Interface to Outbox module.
		
	$Id: mailboxOutbox.def,v 1.1 97/04/05 01:19:52 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


Init	segment	resource

global	OutboxCreate:near
;	Desc:	Create the structures for tracking the outbox
;
;	Pass:	bx	= handle of Admin file
;	Return:	carry set if couldn't create
;		carry clear if outbox created:
;			ax	= VM handle of outbox queue
;			cx	= VM handle of outbox media map
;

global	OutboxCreateQueue:near
;	Desc:	Create the outbox queue.
;
;	Pass:	nothing
;	Return:	carry set if couldn't create
;		carry clear if outbox queue created:
;			ax	= VM handle of outbox queue
;		dx - destroyed
;

global	OutboxFix:near
;	Desc:	Fix up the reference counts for all messages in the outbox,
;		cleaning up the thing after a crash. Any message with
;		no more unsent addresses will be deleted. Everything else will
;		have a reference count of 2.
;
;	Pass:	nothing
;	Return:	nothing
;

global	OutboxInit:near
;	Desc:	Prepare the Outbox module for operation.
;
;	Pass:	nothing
;	Return:	nothing
;

global	OutboxMediaInitRefCounts:near
;	Desc:	Set the reference counts of all media tokens to 1.
;
;	Pass:	nothing
;	Return:	nothing
;

global	OutboxMediaAddRefForMsg:near
;	Desc:	Add a reference to the medium token for each address of the
;		message.
;
;	Pass:	dxax	= MailboxMessage
;	Return:	nothing
;

global	OutboxMediaDecRefCounts:near
;	Desc:	Remove a reference from all non-free media tokens.
;
;	Pass:	nothing
;	Return:	nothing
;

Init	ends

Outbox	segment	resource

global	OutboxMessageAdded:far
;	Desc:	Note that a message was added to the outbox, and act accordingly
;
;	Pass:	bx	= VM file handle holding the message
;		di	= DBQ handle for inbox
;		dxax	= DBGroupAndItem of the message
;	Return:	nothing
;

global	OutboxNotifyMediumAvailable:far
;	Desc:	Take note that some new medium has come on the scene,
;		locating messages that could go via that medium and
;		asking the user if she wishes to send them.
;
;	Pass:	cxdx	= MediumType
;		bx	= unit number (ignored if MUT_NONE)
;		al	= MediumUnitType
;	Return:	nothing
;	Destroyed:	nothing
;

global	OutboxNotifyMediumConnected:far
;	Desc:	Take note that some medium has become connected, locating
;		messages not already slated for transmission whose
;		address matches that returned by any transport driver
;		that says it can use the connection and asking the user if
;		they should be sent.
;
;	Pass:	cxdx	= MediumType
;		bx	= unit number (ignored if MUT_NONE)
;		al	= MediumUnitType
;	Return:	nothing
;	Destroyed:	nothing
;

global	OutboxNotifyMediumNotConnected:far
;	Desc:	Take note that some medium has become available by virtue of
;		no longer being connected.
;
;	Pass:	cxdx	= MediumType
;		bx	= unit number (ignored if MUT_NONE)
;		al	= MediumUnitType
;	Return:	nothing
;	Destroyed:	nothing
;

global	OutboxNotifyMediumNotAvailable:far
;	Desc:	Note that some medium unit is now gone and complain if
;		we've got a message queued for it.
;
;	Pass:	cxdx	= MediumType
;		bx	= unit number (ignored if MUT_NONE)
;		al	= MediumUnitType
;	Return:	nothing
;

global	OutboxTransmitMessage:far
;	Desc:	Queue up a message for transmission to one or more addresses.
;
;	Pass:	dxax	= MailboxMessage
;		cx	= talID for the addresses to which the message is
;			  to be sent
;	Return:	carry set if message couldn't be queued:
;			ax	= MailboxError
;		carry clear if message queued
;			ax	= destroyed

global	OutboxStoreAddresses:far
;	Desc:	Store the addresses for an outgoing message.
;
;	Pass:	cx	= number of addresses
;		es:si	= MailboxTransAddr array
;		*ds:di	= MailboxMessageDesc (MMD_transAddrs points to an
;			  empty variable-sized chunk array)
;		ds:bx	= MailboxMessageDesc
;		ax	= MailboxTransportOption
;	Return:	carry set if address couldn't be stored:
;			ax	= MailboxError
;		carry clear if all addresses stored:
;			ax	= destroyed
;		ds	= fixed up
;	Destroyed:	es, si, cx, bx
;

global	OMCheckMediumAvailable:far
;	Desc:	See if the medium required by a message is currently available.
;
;	Pass:	ax	= medium token, returned by OMRegister
;	Return:	carry set if it is
;		carry clear if it ain't
;

global	OutboxMediaGetTransportString:far
;	Desc:	Retrieve the text string for a transport/medium combination.
;
;	Pass:	ds	= locked lmem block
;		cxdx	= MailboxTransport
;		ax	= medium reference token (from MITA_medium field)
;	Return:	*ds:ax	= text chunk holding string.
;

global	OutboxMediaGetTransportVerb:far
;	Desc:	Retrieve the verb for a transport/medium combination.
;
;	Pass:	ds	= locked lmem block
;		cxdx	= MailboxTransport
;		ax	= medium reference token (from MITA_medium field)
;		bx	= MailboxTransportOption
;	Return:	*ds:ax	= text chunk holding the mixed-case verb.
;

global	OutboxMediaGetTransportAbbrev:far
;	Desc:	Retrieve the abbreviation for a transport/medium combination.
;
;	Pass:	ds	= locked lmem block
;		cxdx	= MailboxTransport
;		ax	= medium reference token (from MITA_medium field)
;		bx	= MailboxTransportOption
;	Return:	*ds:ax	= text chunk holding the mixed-case verb.
;

global	OutboxMediaCleanupAddresses:far
;	Desc:	Clean up after the addresses registered for the message.
;
;	Pass:	*ds:di	= MailboxMessageDesc
;	Return:	nothing
;

global	MailboxGetTransAddr:far
global	MailboxSetTransAddr:far
global	MailboxGetNumTransAddrs:far
global	MailboxGetUserTransAddrLMem:far
global	MailboxGetCancelFlag:far

global	OutboxDoEvent:far
;	Desc:	Callback routine to process one message in the outbox queue.
;		Put up notify dialog boxes when some bounds are reached.
;
;	Pass:	sidi	= MailboxMessage
;		ss:bp	= inherited stack frame from MADoNextEvent
;	Return:	carry set to stop enumerating (always clear)
;		ax, cx, dx - destroyed
;


ife	_CONTROL_PANELS
global	OutboxDisplayOutboxPanel:far
;	Desc:	Respond to a request to display an outbox control panel by
;		queueing any unqueued messages that would be displayed in such
;		a control panel were control panels supported on this system.
;
;	Pass:	cx	= MailboxDisplayPanelType
;		^hdx	= MailboxDisplayPanelCriteria
;		if MDPT_BY_TRANSPORT:
;			^hbp	= MailboxDisplayPanelCriteria for
;				  MDPT_BY_MEDIUM
;	Return:	memory block(s) freed
;		bp - unchanged
;		ax, cx, dx - destroyed
;
endif	; !_CONTROL_PANELS

global	OutboxThreadCancel:far
;	Desc:	Cope with MainThreadCancel() having been called for a
;		transmission thread, performing outbox-specific actions.
;
;	Pass:	ds:di	= OutboxThreadData for thread
;	Return:	nothing
;		ax, bx, cx, dx, si, bp, es - may be destroyed
;


Outbox		ends

OutboxUICode	segment	resource

if	_CONTROL_PANELS
global	OutboxGetDefaultSystemCriteria:far
;	Desc:	Fetch the panel criteria to use for the system outbox control
;		panel. Most likely, this will be based on the last message added
;		to the outbox.
;
;	Pass:	nothing
;	Return:	cx	= MailboxDisplayPanelType
;		^hdx	= MailboxDisplayPanelCriteria
;		if MDPT_BY_TRANSPORT:
;			^hbp	= MailboxDisplayPanelCriteria for MDPT_BY_MEDIUM
;
endif	; _CONTROL_PANELS

OutboxUICode	ends

MessageCode	segment	resource

global	OutboxCleanupAddresses:far
;	Desc:	Clean up after the addresses in a message that's being deleted.
;
;	Pass:	*ds:si	= ChunkArray of MailboxInternalTransAddrs
;		*ds:di	= MailboxMessageDesc
;	Return:	nothing
;

MessageCode	ends

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;			 OutboxProgressBoxClass
;

if	MAILBOX_PERSISTENT_PROGRESS_BOXES

OutboxProgressClass	class	MailboxProgressBoxClass

;MSG_MPB_SETUP		message
; Sets the transport & medium for which progress is being given. This causes 
; the box to attach itself to the mailbox application and set itself usable, 
; then come up on screen.
;
; Context:	Sent from the transmit thread when the box is first created.
;
; Pass:
; 		ss:bp	= OPSetupArgs
; Return:
; 		nothing
; 		ax, cx, dx - destroyed
; 

OPSetupArgs	struct
    OPSA_meta		MPBSetupArgs	<>
    OPSA_transport	MailboxTransport	<>
    OPSA_transOption	MailboxTransportOption
    OPSA_medium		MediumType		<>
OPSetupArgs	ends

MSG_OP_SET_MESSAGE	message	
; Sets the message & address(es) currently being transmitted to.
;
; Context:	Sent from the transmit thread before calling the driver to
;		transmit the message.
;
; Pass:
;		cxdx	= MailboxMessage (reference must be removed when object
;			  is done with it)
;		bp	= talID of addresses being transmitted to
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OP_SET_PREPARING_MESSAGE	message	
; Sets the message that's being prepared.
;
; Context:	Sent by the transmit thread if the driver has requested the
;		user be given feedback on the progress of preparation.
;
; Pass:
;		cxdx	= MailboxMessage (reference must be removed when object
;			  is done with it)
;		bp	= index of address being prepared
; Return:
;		nothing
;		bp - unchanged
;		ax, cx, dx - destroyed
;


MSG_OP_SET_CONNECTING		message
; Tell the user we are connecting to the destination.
;
; Context:	Sent by the transmit thread before calling DR_MBTD_CONNECT
;
; Pass:
; 		cxdx	= MailboxMessage (reference must be removed when object
;			  is done with it)
;		bp	= index of address being connected to
; Return:
; 		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OP_SET_ERROR		message
; Tell the user of the error that occurred during transmission/connect.
;
; Context:	Sent by the transmit thread when it receives an error back
;		from the transport driver.
;
; Pass:
; 		cx	= outbox reason token
; Return:
; 		nothing
; 		dx, cx, bp - unchanged
; 		ax - destroyed
;

    OPI_transport	MailboxTransport	<>
    OPI_transOption	MailboxTransportOption
    OPI_medium		MediumType		<>
    OPI_lastMode	MessageGlyphMessages	0
if 	_TRANSMIT_THREADS_KEYED_BY_MEDIUM
    OPI_templateMoniker	lptr.VisMoniker	0
endif	; _TRANSMIT_THREADS_KEYED_BY_MEDIUM

OutboxProgressClass	endc
endif	; MAILBOX_PERSISTENT_PROGRESS_BOXES

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;			OutboxMessageListClass
;

if	_CONTROL_PANELS
OutboxMessageListClass	class	MessageListClass
; MSG_ML_RESCAN: setup transmitQueue, transmitID, currentTime, and sigAddrBytes
; MSG_ML_UPDATE_LIST: set transmitQueue.high to 0, don't need to bother
;		      with currentTime, and sigAddrBytes should be left over
;		      from previous rescan

    OMLI_transmitQueue	vptr
    ; The queue on which to place messages that are SEND_WITHOUT_QUERY if we
    ; find one, during MSG_ML_RESCAN, between whose time bounds we find
    ; ourselves. .high will be 0 if no queue has been allocated because no unit
    ; of the necessary medium is available.
		noreloc	OMLI_transmitQueue
    
    OMLI_transmitID	TalID
    ; TalID with which to mark messages that are added to OMLI_transmitQueue

    OMLI_currentTime	FileDateAndTime
    ; Time at the start of the scan, for use in determining if a message is
    ; eligible for transmission.
    
    OMLI_sigAddrBytes	word
    ; If MDPT_BY_TRANSPORT, this is the number of significant bytes in an
    ; address, for comparison purposes

OutboxMessageListClass	endc
endif	; _CONTROL_PANELS

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		   OutboxSendableConfirmationClass
;

if	not _OUTBOX_SEND_WITHOUT_QUERY

OutboxSendableConfirmationClass	class	MessageSendableNotifyDialogClass

MSG_OSC_IDLE_TIMEOUT	message
; Desc:		Timer message sent when the idle timeout period has expired
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

    OSCI_useIdleTimeout		BooleanByte
    OSCI_idleTimerHandle	hptr
    OSCI_idleTimerID		word
    ; timer handle and ID for no-input timeout.

OutboxSendableConfirmationClass endc

endif	; not _OUTBOX_SEND_WITHOUT_QUERY

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		OutboxConfirmationClass
;
; This class is used to create dialogs for messages that are not-yet sendable
; (either the transmission window is not yet open, or the medium is currently
; not available.)
;
OC_SUPER	equ	<GenInteractionClass>

OutboxConfirmationClass	class	OC_SUPER

MSG_OC_SET_MESSAGE	message
; Sets the message & addresses to display in the dialog box.
;
; Context:	Sent before the confirmation dialog is initiated.
; Source:	MailboxApplication
; Interception:	Unlikely.
;
; Pass:
;		cxdx	= MailboxMessage w/one extra reference
;		bp	= talID (if applicable)
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OC_DISMISS	message
; Brings down the dialog and destroys the dialog block.  The message reference
; is also removed.
;
; Source:	The OK trigger.
; Interception:	Unlikely
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

    OCI_message	MailboxMessage
    OCI_talID	TalID

OutboxConfirmationClass	endc

if	_QUERY_DELETE_AFTER_PERMANENT_ERROR

OutboxErrorRetryClass	class	GenInteractionClass

MSG_OER_SET_MESSAGE	message
; Sets the message to be displayed in the error retry dialog.
;
; Pass:
;		ss:bp	= OERSetMessageArgs
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

OERSetMessageArgs	struct
	OERSMA_message	MailboxMessage
	OERSMA_addr	word
	OERSMA_reason	word
	OERSMA_delay	word		; high byte = hours, low byte = minutes
OERSetMessageArgs	ends

MSG_OER_RETRY	message
; Schedules the message displayed to retry transmission later.
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp = destroyed
;

MSG_OER_DELETE_MESSAGE	message
; Delete the message displayed from the outbox.
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp = destroyed
;

    OERI_message	MailboxMessage
    OERI_talID		TalID
    OERI_delay		word		; hour.minute of delivery time
					;  extension

OutboxErrorRetryClass	endc

endif	; _QUERY_DELETE_AFTER_PERMANENT_ERROR

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		       OutboxTransportListClass
;


if	_CONTROL_PANELS or _POOF_MESSAGE_CREATION
OutboxTransportListClass	class	GenDynamicListClass

MSG_OTL_GET_TRANSPORT	message	
; Fetch the transport & medium the user has selected.
;
; Context:	Called by OutboxControlPanel when it's been told the user has
;		chosen a new transport. The result is used to build the
;		criteria for the panel.
; Source:	OutboxControlPanel
;
; Pass:
;		cx	= transport index
;		dx:bp	= MailboxMediaTransport to fill in
; Return:
;		MailboxMediaTransport filled in
;		ax, cx, dx - destroyed
;

MSG_OTL_SET_TRANSPORT	message
; Set the transport & medium we've selected for the user.
;
; Context:	Called by OutboxControlPanel when it's told what criteria
;		it should be using.
; Source:	OutboxControlPanel
;
; Pass:
; 		dx:bp	= MailboxMediaTransport from which to find the thing
; Return:
; 		carry set if passed MailboxMediaTransport isn't an option.
; 		carry clear if selection made (no notification sent)
; 		ax, cx, dx - destroyed
; 

MSG_OTL_REBUILD_LIST	message	
; Rebuild the list of possible transports.
;
; Context:	Delivered via MSG_META_SEND_CLASSED_EVENT using
;		TO_OUTBOX_TRANSPORT_LIST when the list of transport/media
;		pairs managed by outboxMedia.asm has an entry added or
;		removed from the list. The change to the list has already
;		happened, so the list can be rebuilt immediately.
;
; 		This is also sent by OutboxControlPanel when it receives its
;		MSG_MCP_SET_SPECIFIC and finds the thing isn't specific.
;
; Source:	OMRegister/OMUnregister
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

OTLAttrs	record
    OTLA_INITIALIZED:1
    OTLA_NOTIFY_OF_INITIAL_SET:1
    :6
OTLAttrs	end

    OTLI_monikerSource	lptr		0
    ; The source object that manages our monikers.
    
    OTLI_attrs		OTLAttrs	0
    ; Type of list this is. Controls what transports are displayed and what
    ; type of monikers are used to do that displaying

OutboxTransportListClass	endc

endif	; _CONTROL_PANELS or _POOF_MESSAGE_CREATION

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		       OutboxTransportMenuClass
;
; Creates as many GenTrigger children as there are available transports when
; it receives MSG_SPEC_BUILD for the main part (if SA_USES_DUAL_BUILD is set,
; this happens when SBF_WIN_GROUP set, else it happens when SBF_WIN_GROUP is
; clear)


OutboxTransportMenuClass	class	GenInteractionClass

MSG_OTM_GET_TRANSPORT	message	
; Fetch the transport & medium the user has selected.
;
; Context:	Called by InboxControlPanel and MailboxSendControl when they've
;		been send a message by one of the triggers we've created.
; Source:	InboxControlPanel, MailboxSendControl
;
; Pass:
;		cx	= transport index
;		dx:bp	= MailboxMediaTransport to fill in
; Return:
;		MailboxMediaTransport filled in
;		ax, cx, dx - destroyed
;

MSG_OTM_REBUILD_LIST	message	
; Rebuild the list of possible transports.
;
; Context:	Delivered via MSG_META_SEND_CLASSED_EVENT using
;		TO_OUTBOX_TRANSPORT_LIST when the list of transport/media
;		pairs managed by outboxMedia.asm has an entry added or
;		removed from the list. The change to the list has already
;		happened, so the list can be rebuilt immediately.
;
; 		This is also sent by OutboxControlPanel when it receives its
;		MSG_MCP_SET_SPECIFIC and finds the thing isn't specific.
;
; Source:	OMRegister/OMUnregister
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OTM_TRANSPORT_SELECTED	message	private
; Generate our action message based on the trigger that was selected.
;
; Context:	Action message set in each GenTrigger we create
; Source:	GenTrigger
;
; Pass:
; 		^lcx:dx	= GenTrigger selected
; Return:
; 		nothing
;		ax, cx, dx, bp - destroyed
;

OTMAttrs	record
    OTMA_BRINGS_UP_WINDOW:1
    ; Set if message will cause a window to be brought up.
    
    :7
OTMAttrs	end

    OTMI_attrs		OTMAttrs	0
    ; Misc attributes.

    OTMI_destination	optr	0
    ; Destination for OTMI_actionMsg
    
    OTMI_actionMsg	word
    ; Message sent out when one of the created triggers is pressed:
    ;
    ; Pass:	cx	= transport index
    ; Return:	nothing
    ;		ax, cx, dx, bp - destroyed

    OTMI_monikerSource	lptr		0
    ; The source object that manages our monikers.
    
OutboxTransportMenuClass	endc

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		     OutboxTransportMonikerSource
;
OutboxTransportMonikerSourceClass class	MetaClass

MSG_OTMS_REBUILD	message	
; Rebuilds the list of transports
;
; Context:	Called by the user of this beast when it has been told the
;		transport list has changed.
; Source:	OutboxTransportListClass, OutboxTransportMenuClass
; Destination:  OutboxTransportMonikerSourceClass
; Interception: not
;
; Pass:
;		cx	= current selection (-1 == GIGS_NONE if none)
; Return:
;		cx	= new index for previous selection (-1 if was -1
;			  on entry or passed index was for a transport that's
;			  no longer available)
;		ax	= number of transports in the list
;		dx, bp - unchanged
;

MSG_OTMS_GET_MONIKER	message	
; Extract the moniker for a particular transport
;
; Context:	Called by the user of this beast when it needs a moniker for
;		one of its elements
; Source:	OutboxTransportListClass, OutboxTransportMenuClass
; Destination:  OutboxTransportMonikerSourceClass
; Interception: not
;
; Pass:
;		cx	= transport index
; Return:
;		carry clear if ok:
;		      ^lcx:dx	= new moniker (ownership passes to caller, if
;				  cx == ds:[LMBH_handle])
;			ax	= TRUE if transport should be selectable
;				= FALSE if no format specified via
;				  MSG_OTMS_SET_FORMATS is acceptable to the
;				  indicated transport
;		carry set if error
;		bp - unchanged
;

MSG_OTMS_GET_COUNT	message	
; Retrieves the number of elements in the current list
;
; Context:	Called by the user of this beast when...?
; Source:	?
; Destination:  OutboxTransportMonikerSourceClass
; Interception: not
;
; Pass:
;		nothing
; Return:
;		cx	= number of transports in the list
;		dx, bp - unchanged
;		ax - destroyed
;

MSG_OTMS_GET_TYPE	message	
; Fetch the list type bound to this object
;
; Context:	Called by OutboxTransportList when it's initializing to decide
;		whether it should add itself to certain GCN lists
; Source:	OutboxTransportListClass
; Destination:  OutboxTransportMonikerSourceClass
; Interception: not
;
; Pass:
;		nothing
; Return:
;		al	= OTMSType
;		ah, cx, dx, bp - unchanged
;

MSG_OTMS_SET_TYPE	message	
; Set the list type and maybe the filter for this object. It is the caller's
; responsibility to send MSG_OTMS_REBUILD if it needs new monikers because of
; this change.
;
; Context:	Called by MailboxSendControl when it finds a need to filter
;		its monikers
; Source:	MailboxSenedControl
;
; Pass:
;		cl	= OTMSType
;		dx	= MailboxTransportCapabilities, if cl = OTMST_FILTERED
; Return:
;		nothing
;		bp - unchanged
;		ax, cx, dx, - destroyed
;
MSG_OTMS_GET_TRANSPORT	message	
; Fetch the actual MailboxMediaTransport for an entry in the list
;
; Context:	Called by OutboxTransportList and OutboxTransportMenu when
;		someone asks them about the transport
; Source:	OutboxTransportMenuClass, OutboxTransportListClass
; Destination:  OutboxTransportMonikerSourceClass
; Interception: not
;
; Pass:
;		cx	= transport index
;		dx:bp	= MailboxMediaTransport buffer to fill in
; Return:
;		dx:bp	= filled in
;		ax, cx - destroyed
;

MSG_OTMS_MAP_TRANSPORT	message
; Map a transport & medium to an index
;
; Context:	Called by OutboxTransportList when it's told to select
;		something by transport.
; Source:	OutboxTransportList
;
; Pass:
; 		dx:bp	= MailboxMediaTransport from which to find the thing
; Return:
; 		carry set if passed MailboxMediaTransport isn't an option.
; 		carry clear if found it:
;			cx	= transport index
; 		ax, cx, dx - destroyed
; 

MSG_OTMS_SET_AVAILABLE_FORMATS	message	
; Record the list of formats to be used in deciding whether a transport
; should be selectable.
;
; Context:	Called by MailboxSendControl when it is told a list of
;		formats that can be created (via MSG_MAILBOX_SEND_CONTROL_-
;		SET_AVAILABLE_FORMATS)
; Source:	MailboxSendControl
;
; Pass:
;		cx:dx	= array of MailboxDataFormats, ending with one that
;			  is MANUFACTURER_ID_GEOWORKS/GMDFID_INVALID
; Return:
;		nothing
;		bp - unchanged
;		ax, cx, dx - destroyed
;

OTMSType		etype	byte
    OTMST_PANEL		enum OTMSType	; Popup list for control panel. Adds
					;  "All" entry to list. Transports
					;  are those for which there are
					;  messages in the outbox
    OTMST_MENU_UI	enum OTMSType	; List for MailboxSendControl's menu UI
					;  Transports are those for which media
					;  they use have ever been seen.
    OTMST_TOOL_UI	enum OTMSType	; List for MailboxSendControl's tool UI
					;  Transports are those for which media
					;  they use have ever been seen.
    OTMST_FILTERED	enum OTMSType	; Similar to MENU_UI and TOOL_UI, but
					;  list is also restricted to those
					;  that have the bit in OTLI_filter set
					;  in their capabilities.

OTMST_PANEL_SEARCH_FLAGS	equ	(VMS_TEXT shl offset VMSF_STYLE)
OTMST_MENU_SEARCH_FLAGS		equ	(VMS_TEXT shl offset VMSF_STYLE)
OTMST_TOOL_SEARCH_FLAGS		equ	(VMS_TOOL shl offset VMSF_STYLE) or \
					mask VMSF_GSTRING
OTMST_FILTERED_SEARCH_FLAGS	equ	(VMS_TEXT shl offset VMSF_STYLE)

    OTMSI_transports	lptr.ChunkArrayHeader	?
    ; MailboxMediaTransport structures from last rebuild
    
    OTMSI_type		OTMSType	OTMST_PANEL
    ; What the associated transport list or menu is used for, so we know what
    ; sort of monikers to return and how to filter things.

    OTMSI_filter	MailboxTransportCapabilities	0
    ; Filter to apply to transport's capabilities to include it in the display.
    ; Must have one bit non-zero when OTMSI_type is OTMST_FILTERED

ATTR_OTMS_AVAILABLE_FORMATS	vardata	MailboxDataFormat
; The available formats, as provided by MSG_OTMS_SET_AVAILABLE_FORMATS
;

OutboxTransportMonikerSourceClass endc

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		       OutboxControlPanelClass
;

if	_CONTROL_PANELS
OutboxControlPanelClass	class	MessageControlPanelClass

MSG_OCP_SET_TRANSPORT	message	
; Change the criteria for displaying messages, according to the user's desires
;
; Context:	Sent by the OutboxTransportList associated with the panel when
;		the user changes the transport, or when we send it its
;		MSG_OTL_REBUILD_LIST for the first time, or when the selected
;		transport no longer has any messages in the outbox for it.
; Source:	OutboxTransportList
;
; Pass:
;		cx	= transport index # (must be mapped via
;			  MSG_OTL_GET_TRANSPORT)
;		dl	= GenItemGroupStateFlags
;		bp	= number of selections (0 or 1)
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OCP_NEW_POOF_MESSAGE_POSSIBLE	message	
; Take note that a new class of Poof message can now be sent, owing to the
; availability of a new transport.
;
; This is received only by the system outbox panel. If the Poof! menu isn't
; usable, receipt of this message should cause it to be set usable.
;
; Context:	Sent by MTAddTransport when it finds a driver that has a
;		poof-message capability bit not previously seen in any other
;		driver. It is delivered via a META_SEND_CLASSED_EVENT sent
;		TO_SYSTEM_OUTBOX_PANEL
;
; Pass:
;		cx	= new bits (may have bits other than the poof-related
;			  ones set)
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

;MSG_MCP_SET_SPECIFIC:	send OTL_REBUILD_LIST to OutboxPanelTransports if system
;MSG_MCP_SET_CRITERIA:	if specific, mangle moniker

OutboxControlPanelClass	endc
endif	; _CONTROL_PANELS

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;			  OutboxDetailsClass
;

if	_CONTROL_PANELS
OutboxDetailsClass	class	MessageDetailsClass

ODLS_LIST_ALL		equ	1

MSG_OD_LIST_ALL_ADDRESSES	message	
; Turn the display of all the message's addresses on or off.
;
; Context:	Sent from the OutboxPanelDetailsListAllGroup when the
;		List All Addresses item is selected or deselected
;
; Pass:
;		cx	= Booleans currently selected (only bit 0 is defined:
;			  set if should show all, clear if not)
;		dx	= indeterminate booleans
;		bp	= modified booleans
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OD_SEND_MESSAGE	message	
; Send the message to the currently-displayed set of addresses (if they're not
; currently being sent to already...)
;
; Context:	Sent by the delivery trigger for the detail box
; Source:	guess
; Destination:  guess again
; Interception: seems kinda pointless
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MSG_OD_DELETE_MESSAGE	message	
; Delete the currently-displayed set of addresses (if they're not currently
; being sent to already...). Deletion is accomplished by setting
; MTF_ADDR_STATE to MAS_SENT for each address.
;
; Context:	Sent by the Delete trigger for the detail box
; Source:	guess
; Destination:  guess again
; Interception: seems kinda pointless
;
; Pass:
;		nothing
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

    ODI_curID		TalID	; ID of addresses being displayed

OutboxDetailsClass	endc
endif	; _CONTROL_PANELS

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		       OutboxPoofMenuClass
;
; Creates as many GenTrigger children as there are supported system message
; types from all available transports when
; it receives MSG_SPEC_BUILD for the main part (if SA_USES_DUAL_BUILD is set,
; this happens when SBF_WIN_GROUP set, else it happens when SBF_WIN_GROUP is
; clear)

if	_POOF_MESSAGE_CREATION
OutboxPoofMenuClass	class	GenInteractionClass

MSG_OPM_POOF_TYPE_SELECTED	message
; Generate our action message based on the trigger that was selected.
;
; Context:	Action message set in each GenTrigger we create
; Source:	GenTrigger
; Destination:  OutboxPoofMenuClass object
; Interception: unlikely
;
; Pass:
;		^lcx:dx	= GenTrigger selected
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

OPMAttrs	record
    OPMA_BRINGS_UP_WINDOW:1
    ; Set if message will cause a window to be brought up.
    
    :7
OPMAttrs	end

    OPMI_attrs		OPMAttrs	0
    ; Misc attributes.

OutboxPoofMenuClass	endc
endif	; _POOF_MESSAGE_CREATION

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		    OutboxControlHeaderViewClass
;		    OutboxControlHeaderGlyphClass
;
; These classes are for geometry hacks.  By putting the glyph inside a
; content inside a scrollable view, the glyph will be placed at the right
; of an invisible scrollbar such that it aligns vertically with the items.
; in the message list (which is also at the right of a scroll bar).
;
if	_RESPONDER_OUTBOX_CONTROL

OutboxControlHeaderViewClass	class	GenViewClass
OutboxControlHeaderViewClass	endc

OutboxControlHeaderGlyphClass	class	GenGlyphClass
OutboxControlHeaderGlyphClass	endc

endif	; _RESPONDER_OUTBOX_CONTROL

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
;
;		    OutboxControlMessageListClass
;
OCMLSuper	equ	<OutboxMessageListClass>

OutboxControlMessageListClass	class	OCMLSuper

MSG_OCML_DELETE_MESSAGE		message
;	Delete's selected message, aborting send, if sending.

MSG_OCML_STOP_MESSAGE			message
;	If message is being transmitted, cancels it, but leaves the message
;	in the outbox.

MSG_OCML_SEND_MESSAGE			message
;	Places the message in the transmission queue.

MSG_OCML_ENSURE_SELECTION		message
;	If nothing is currently selected, select the first message.
;	This is queued when SET_NONE_SELECTED is received, so if nothing
;	alters the selection after that, the first entry will be selected.

OutboxControlMessageListClass	endc

;------------------------------------------------------------------------------
;
;			 OutboxFeedbackClass
;
;------------------------------------------------------------------------------

if	_OUTBOX_FEEDBACK

OutboxFeedbackNoteClass	class	FlashingNoteClass

MSG_OFN_SET_DIALOG	message
; Note the message-creation dialog that needs to be taken off-screen when
; we come off-screen.
;
; Context:	Sent by MailboxSendDialog when the box is created.
; Source:	MailboxSendDialog
;
; Pass:
; 		^lcx:dx	= dialog to be dismissed, eventually
; Return:
; 		nothing
; 		bp - unchanged
; 		ax, cx, dx, - destroyed
;

MSG_OFN_SET_SUMMARY	message	
; Note the summary of the message that's going to be sent.
;
; Context:	Sent by MailboxSendControl or MailboxSendDialog once the
;		summary has been copied into the MSC block
; Source:	see above
;
; Pass:
;		^lcx:dx	= summary text.
; Return:
;		nothing
;		bp - unchanged
;		ax, cx, dx - destroyed
;

MSG_OFN_SET_MESSAGE	message	
; Record the message token for which this thing is showing feedback, once the
; message has been registered.
;
; Context:	Sent by MailboxSendControl when the message has been registered.
; Source:	MailboxSendControl
;
; Pass:
;		cxdx	= MailboxMessage. If cx = 0, the message couldn't be
;			  registered, and box should destroy itself.  If
;			  cx = -1, the message couldn't be register but the
;			  user shouldn't be notified.
; Return:
;		nothing
;		bp - unchanged
;		ax, cx, dx - destroyed
;

TEMP_OFN_ACCEPT_USER_ACTION_AFTER_MESSAGE_SET	vardata	word
; If present, the object has received MSG_FLASHING_NOTE_ACCEPT_USER_ACTION
; (timer ID saved in this vardata) but it hasn't been passed to our
; superclass because MSG_OFN_SET_MESSAGE hasn't been received.  In this state
; the object still doesn't accept keystrokes.  Once MSG_OFN_SET_MESSAGE is
; received, the object will send MSG_FLASHING_NOTE_ACCEPT_USER_ACTION to it's
; superclass (with the saved timer ID) and will accept keystrokes.
;

    OFNI_message	MailboxMessage	0
    OFNI_dialog		optr		0

OutboxFeedbackNoteClass	endc

OutboxFeedbackGlyphClass	class	GenGlyphClass

MSG_OFG_DRAW_FRAME			message
;	Desc:	Draw the indicated frame in our space after erasing the thing.
;
;	Pass:	cx	= frame # to draw
;		dl	= DrawFlags
;		bp	= gstate to use, or 0 if object should create its own
;	Return:	nothing
;

MSG_OFG_NEXT_FRAME			message private
;	Desc:	Message sent by timer expiration. Advances to the next frame
;		in the sequence.
;
;	Pass:	nothing
;	Return:	nothing
;


    OFGI_timer		hptr
    	noreloc OFGI_timer
    OFGI_timerID	word
    OFGI_curFrame	word
OutboxFeedbackGlyphClass	endc

endif	; _OUTBOX_FEEDBACK


