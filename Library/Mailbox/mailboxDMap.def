COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Mailbox library -- driver map maintenance
FILE:		mailboxDMap.def

AUTHOR:		Adam de Boor, Mar 30, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	3/30/94		Initial revision


DESCRIPTION:
	Interface to DMap module of the Mailbox library.
	
	The DMap maintains a mapping from 32-bit tokens to device
	drivers in a subdirectory of SYSTEM. The 32-bit token is sought
	immediately following the DriverInfoStruct for each device driver.
	If one attempts to use a 32-bit token for which no driver is known,
	the code will search for it in the path given when the map was
	allocated.
	
	Each DMap is allocated in its own VM block in the admin file, so the
	admin file must be opened before any DMap function may be called.
		
	$Id: mailboxDMap.def,v 1.1 97/04/05 01:19:59 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

DMapFlags	record
    :2				; reserved by DriverMapFlags in dmapConstant.def
    DMAPF_AUTO_DETECT:1		; set if should look for new drivers when the
				;  map is reinitialized and should look for
				;  new drivers whenever the directory changes
    :5
DMapFlags	end

Init		segment	resource

global	DMapAlloc:near
;	Desc:	Allocate a driver map for tracking the mapping between a set
;		of 32-bit tokens and device drivers.
;
;	Pass:	ds:si	= pointer to GeodeToken to match
;		es:di	= subdirectory of SP_SYSTEM in which to look
;		ax	= major protocol number expected
;		bx	= minor protocol number expected
;		cx	= entry point # of routine to call for each driver
;			  added to the map (DMAP_NO_INIT_ROUTINE if none)
;			  Pass:	ds:si	= driver name
;				cxdx	= driver token
;				ax	= dmap handle
;				current dir is driver directory
;			  Return:	nothing
;			  Destroy:	ax, bx, cx, dx, si, di, es
;		dl	= DMapFlags
;
;	Return:	ax	= map handle for subsequent calls
;

global	DMapRegisterFileChange:near
;	Desc:	Register a driver map for file-change notification.
;
;	Pass:	ax	= map handle
;	Return:	nothing
;	Destroy:cx, dx
;

DMAP_NO_INIT_ROUTINE	equ	-1

Init		ends

DMap		segment	resource

global	DMapInit:far
;	Desc:	Initialize a driver map at the start of a new GEOS session.
;
;	Pass:	ax	= map handle
;	Return:	nothing
;	Destroy:ax
;

global	DMapCheckExists:far
;	Desc:	See if a driver for the indicated token exists.
;
;	Pass:	cxdx	= 32-bit token of desired driver
;		ax	= map handle
;	Return:	carry set if driver exists
;		carry clear if driver does not exist
;

global	DMapLoad:far
;	Desc:	Attempt to load a driver, given its 32-bit token.
;
;	Pass:	cxdx	= 32-bit token of desired driver
;		ax	= map handle
;	Return:	carry set if couldn't load:
;			ax	= GeodeLoadError
;		carry clear if driver loaded:
;			bx	= driver handle
;

global	DMapGetAttributes:far
;	Desc:	Locate a driver with the given token and return its attributes
;		word (the word that follows the 32-bit token in the driver's
;		DriverTable)
;
;	Pass:	cxdx	= 32-bit token of desired driver
;		ax	= map handle
;	Return:	carry set if no such driver defined.
;		carry clear if driver found:
;			ax	= attribute word (contents depend on driver
;				  type)
;

global	DMapGetDriverHandle:far
;	Desc:	Retrive the handle of a driver that is already loaded
;
;	Pass:	cxdx	= 32-bit token of desired driver
;		ax	= map handle
;	Return:	carry set if no such driver, or driver not loaded
;		carry clear if driver is loaded
;			bx	= driver handle
;

global	DMapUnload:far
;	Desc:	Unloads a driver
;
;	Pass:	cxdx	= 32-bit token of desired driver
;		ax	= map handle
;	Return:	carry set if driver exited
;

global	DMapGetAllTokens:far
;	Desc:	Retrieve the tokens of all known drivers.
;
;	Pass:	ds	= lmem block in which to allocate array
;		ax	= map handle
;	Return:	*ds:ax	= ChunkArray of 32-bit tokens for all known drivers
;

global	DMapRegisterLoadCallback:far
;	Desc:	Registers a routine to be called when a particular driver is
;		next loaded.
;
;	Pass:	ax	= map handle
;		cx, dx	= data to pass to the callback
;		bx	= exported routine # to call in library:
;				Pass:	cx, dx	= as passed
;					bx	= driver handle
;				Return:	carry clear if callback may be deleted
;					carry set if callback should be
;						made again on next load
;				Destroy:cx, dx
;		sidi	= 32-bit token of driver whose loading should trigger
;			  the callback
;	Return:	nothing
;

global	DMapStoreErrorMsg:far
;	Desc:	Record an error message to be used if a driver cannot be
;		loaded.
;
;		NOTE: It is a fatal error to register a message for a driver
;		      that's not known to the map.
;
;	Pass:	ax	= map handle
;		cxdx	= 32-bit token of driver for which the message is
;		^lbx:si	= optr of null-terminated error string
;	Return:	nothing
;

DMap		ends
