/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved
 *
 * PROJECT:	  PC GEOS
 * MODULE:	  CommonUI/CMain
 * FILE:	  cmainPenInputControl.ui
 *
 * AUTHOR:  	  David Litwin, Apr  8, 1994
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dlitwin	4/ 8/94   	Initial version
 *				this entire file was moved from the UI to
 *				the SPUI.  The old file was:
 *				/staff/pcgeos/Library/User/UI/uiPenInput.ui
 *
 * DESCRIPTION:
 *	This file contains the user interface descripition for a
 *	pen input control.
 *
 *
 * 	$Id: cmainPenInputControl.ui,v 1.1 97/04/07 10:52:22 newdeal Exp $
 *
 ***********************************************************************/



start	GenPenInputControlUI, notDetachable;

#if !_GRAFFITI_UI
#include <../CommonUI/CArt/mkrInsert.ui>
#endif

PenGroup = GenInteraction {
	genStates = default -usable;
#if !_GRAFFITI_UI
	children = HWRContextGroup, PenInputView, PenToolGroup;
#else
	children = GraffitiGroup;
#endif

	hints = {
#if !_GRAFFITI_UI
#if !STYLUS_KEYBOARD
		HINT_FIXED_SIZE {
			SpecWidth <>
			SpecHeight <SST_PIXELS, FLOATING_KEYBOARD_MAX_HEIGHT>
		},
		HINT_CENTER_CHILDREN_VERTICALLY,
#endif
#endif
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_MINIMIZE_CHILD_SPACING
	}
}

#if !_GRAFFITI_UI

HWRContextGroup = GenInteraction {
	children = HWRContextObj, HWRInsertList;	
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
#if !STYLUS_KEYBOARD
		HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, FLOATING_KEYBOARD_MAX_WIDTH>
			SpecHeight<>
		},
#endif
		HINT_BOTTOM_JUSTIFY_CHILDREN,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY
	}	
}

HWRInsertList = GenItemGroup {
	children = HWRInsertItem;
	behaviorType = nonExclusive;
	hints = {
		ATTR_GEN_NOT_PROPERTY
	}
}

HWRInsertItem = GenItem {
	moniker = InsertMoniker;
	identifier = 0;
}

HWRContextObj = HWRGridContextText {
	genAttributes = readOnly;
	text = "";
	textDisplayAttributes = default +singleLineText;
	hints = {
			HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

PenInputView = NotifyEnabledStateGenView {
	output = PenInputContent;
	genAttributes = default -targetable;
	horizAttributes = default +noLargerThanContent, +noSmallerThanContent;
	vertAttributes = default +noLargerThanContent, +noSmallerThanContent;
	viewAttributes = default -focusable, +dontSendPtrEvents, +noWinFrame, +sameColorAsParentWin;
	inkType = "GVIT_QUERY_OUTPUT";
}

PenInputContent = VisContent {
}

KeyboardObj = VisKeyboard {
	right = "KEYBOARD_WIDTH";
	bottom = "KEYBOARD_HEIGHT+1";
	kbdLayoutOffset = "KEYBOARD_LAYOUT_OFFSET";
	kbdLayoutLength	= "KEYBOARD_LAYOUT_LENGTH";
	kbdDrawOutlines	= "KEYBOARD_DRAW_OUTLINES_ROUTINE_OFFSET";
	keyHeight	= "KEYBOARD_KEY_HEIGHT";
	letterFontType	= "KEYBOARD_LETTER_FONT_TYPE";
	letterFontSize	= "KEYBOARD_LETTER_FONT_SIZE";
	wordFontType	= "KEYBOARD_WORD_FONT_TYPE";
	wordFontSize	= "KEYBOARD_WORD_FONT_SIZE";
}

#if STYLUS_KEYBOARD
BigKeysObj = VisKeymap {
	right = "STYLUS_BK_KEYBOARD_WIDTH";
	bottom = "STYLUS_BK_KEYBOARD_HEIGHT";
	desc = "offset StylusBigKeyLayout,			\
		length StylusBigKeyLayout,			\
		offset BigKeysLowerCaseCharData,		\
		offset VisKeymapDrawStylusBigKeyOutlines,	\
		STYLUS_BK_LETTER_FONT_TYPE,			\
		STYLUS_BK_LETTER_FONT_SIZE,			\
		STYLUS_BK_WORD_FONT_TYPE,			\
		STYLUS_BK_WORD_FONT_SIZE";
	tempStates	= "mask KSB_SHIFT";
	specialKeys	= "offset StylusSpecialKeys";
	descTable	= "offset BigKeyStateLayoutTable";
}

NumbersObj = VisKeymap {
	right = "STYLUS_NUM_RIGHT_MARGIN+1";
	bottom = "STYLUS_NUM_BOTTOM_MARGIN+1";
	desc = "offset StylusNumbersLayout,			\
		length StylusNumbersLayout,			\
		offset NumbersKeymapCharData,			\
		offset VisKeymapDrawNumbersOutlines,		\
		STYLUS_NUM_LETTER_FONT_TYPE,			\
		STYLUS_NUM_LETTER_FONT_SIZE,			\
		STYLUS_NUM_WORD_FONT_TYPE,			\
		STYLUS_NUM_WORD_FONT_SIZE";
	specialKeys	= "offset StylusSpecialKeys";
}

PunctuationObj = VisKeymap {
	right = "STYLUS_PUN_RIGHT_MARGIN+1";
	bottom = "STYLUS_PUN_BOTTOM_MARGIN+1";
	desc = "offset StylusPunctuationLayout,			\
		length StylusPunctuationLayout,			\
		offset PunctuationKeymapCharData,		\
		offset VisKeymapDrawPunctuationOutlines,	\
		STYLUS_PUN_LETTER_FONT_TYPE,			\
		STYLUS_PUN_LETTER_FONT_SIZE,			\
		STYLUS_PUN_WORD_FONT_TYPE,			\
		STYLUS_PUN_WORD_FONT_SIZE";
	specialKeys	= "offset StylusSpecialKeys";
}

#else		/* else of if STYLUS_KEYBOARD */

/* ----- */
CharTableObj = VisCharTable {
	right = "KEYBOARD_CHAR_TABLE_WIDTH";
	bottom = "KEYBOARD_CHAR_TABLE_HEIGHT+1";
	line1 = CharTableLine1Data;
	line2 = CharTableLine2Data;
	line3 = CharTableLine3Data;
	line4 = CharTableLine4Data;
	line5 = CharTableLine5Data;
	fontType = "KEYBOARD_LETTER_FONT_TYPE";
	fontSize = "KEYBOARD_LETTER_FONT_SIZE";
	hints = { ATTR_CHAR_TABLE_SPECIAL_LAST_LINE {word 0} }
}
CharTableSymbolsObj = VisCharTable {
	right = "KEYBOARD_CHAR_TABLE_WIDTH";
	bottom = "KEYBOARD_CHAR_TABLE_HEIGHT+1";
	line1 = CharTableSymbolsLine1Data;
	line2 = CharTableSymbolsLine2Data;
	line3 = CharTableSymbolsLine3Data;
	line4 = CharTableSymbolsLine4Data;
	line5 = CharTableSymbolsLine5Data;
	fontType = "KEYBOARD_LETTER_FONT_TYPE";
	fontSize = "KEYBOARD_LETTER_FONT_SIZE";
}
CharTableInternationalObj = VisCharTable {
	right = "KEYBOARD_CHAR_TABLE_WIDTH";
	bottom = "KEYBOARD_CHAR_TABLE_HEIGHT+1";
	line1 = CharTableInternationalLine1Data;
	line2 = CharTableInternationalLine2Data;
	line3 = CharTableInternationalLine3Data;
	line4 = CharTableInternationalLine4Data;
	line5 = CharTableInternationalLine5Data;
	fontType = "KEYBOARD_LETTER_FONT_TYPE";
	fontSize = "KEYBOARD_LETTER_FONT_SIZE";
}
CharTableMathObj = VisCharTable {
	right = "KEYBOARD_CHAR_TABLE_WIDTH";
	bottom = "KEYBOARD_CHAR_TABLE_HEIGHT+1";
	line1 = CharTableMathLine1Data;
	line2 = CharTableMathLine2Data;
	line3 = CharTableMathLine3Data;
	line4 = CharTableMathLine4Data;
	line5 = CharTableMathLine5Data;
#if !_NIKE_EUROPE
	hints = { ATTR_CHAR_TABLE_SPECIAL_LAST_LINE {word 1} }
#endif
	fontType = "KEYBOARD_LETTER_FONT_TYPE";
	fontSize = "KEYBOARD_LETTER_FONT_SIZE";
}
CharTableCustomObj = VisCharTable {
	right = "KEYBOARD_CHAR_TABLE_WIDTH";
	bottom = "KEYBOARD_CHAR_TABLE_HEIGHT+1";
	fontType = "KEYBOARD_LETTER_FONT_TYPE";
	fontSize = "KEYBOARD_LETTER_FONT_SIZE";
}


#endif		/* endif of else of if STYLUS_KEYBOARD */

HWRGridObj = VisHWRGrid {
      right = "KEYBOARD_CHAR_TABLE_WIDTH";
      bottom = "KEYBOARD_HWR_GRID_HEIGHT+(KEYBOARD_HWR_GRID_VERTICAL_MARGIN*2)";
}

HWRGridTools = GenInteraction {
	genStates = default -usable;
	children = HWRStartTrigger, HWRFastBackTrigger, 
		   HWRBackTrigger, HWRForwardTrigger, 
		   HWRFastForwardTrigger, HWREndTrigger;
	hints = {
			HINT_FIXED_SIZE {
				SpecWidth <SST_PIXELS, HWR_TOOLS_WIDTH>
				SpecHeight<SST_PIXELS, HWR_TOOLS_HEIGHT>
			},
			HINT_TOOLBOX,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_MINIMIZE_CHILD_SPACING,
			ATTR_GEN_FEATURE_LINK {lptr HWRContextGroup}
		}
}

HWRStartTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_GOTO_START, HWRGridObj;
	moniker = list {StartTMMoniker}
}
HWRFastBackTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_PAGE_BACK, HWRGridObj;
	moniker = list {FastBackTMMoniker}
}
HWRBackTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_STEP_BACK, HWRGridObj;
	moniker = list {BackTMMoniker}
}
HWRForwardTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_STEP_FORWARD, HWRGridObj;
	moniker = list {ForwardTMMoniker}
}
HWRFastForwardTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_PAGE_FORWARD, HWRGridObj;
	moniker = list {FastForwardTMMoniker}
}
HWREndTrigger = GenTrigger {
	genStates = default -enabled;
	action = MSG_HWR_GRID_AREA_GOTO_END, HWRGridObj;
	moniker = list {EndTMMoniker}
}


PenToolGroup = GenInteraction {
	genStates = default -usable;
	children =
#if STYLUS_KEYBOARD
			HWRGridPICGadgetsView,
#endif
			HWRGridTools;
	hints = {
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
			HINT_BOTTOM_JUSTIFY_CHILDREN
		}     
}

#if STYLUS_KEYBOARD

HWRGridPICGadgetsView = NotifyEnabledStateGenView {
	output	= HWRGridPICGadgetsContent;
	genAttributes = default -targetable;
	docRight = "STYLUS_PIC_KMP_R + 1";	/* content size	*/
	docBottom = "STYLUS_PIC_KMP_WIDTH + 1";	/* content size	*/
	horizAttributes = default +noLargerThanContent, +noSmallerThanContent;
	vertAttributes = default +noLargerThanContent, +noSmallerThanContent;
	viewAttributes = default -focusable, +dontSendPtrEvents, +noWinFrame, +sameColorAsParentWin;
}

HWRGridPICGadgetsContent = VisContent {
	children = HWRGridPICGadgetsKeymap;
}

HWRGridPICGadgetsKeymap = VisKeymap {
	right = "STYLUS_PIC_KMP_R + 1";
	bottom = "STYLUS_PIC_KMP_HEIGHT + 1";
	desc = "offset StylusHWRGridLayout,		\
		length StylusHWRGridLayout,		\
		offset HWRGridKeymapCharData,		\
		offset VisKeymapDrawHWRGridOutlines,	\
		KEYBOARD_LETTER_FONT_TYPE,		\
		KEYBOARD_LETTER_FONT_SIZE,		\
		KEYBOARD_WORD_FONT_TYPE,		\
		KEYBOARD_WORD_FONT_SIZE";
	specialKeys	= "offset StylusSpecialKeys";
}

#endif		/* #if STYLUS_KEYBOARD */

#endif		/* #if !_GRAFFITI_UI */

#if _GRAFFITI_UI
GraffitiGroup = KeyboardControl {
#if PEN_INPUT_CONTROL_ALWAYS_ACTIVE
	genStates = default +enabled;
#endif
}
#endif




/*
 * We need to have a parent interaction around the TitlePenDisplayList, because
 * the system dies if you put a PopupList directly in the title bar
 */

#if !_GRAFFITI_UI

TitlePenToolGroup = GenInteraction {
	genStates = default -usable;
	children = TitlePenDisplayList;
	hints = {
		HINT_MINIMIZE_CHILD_SPACING,
#if !STYLUS_KEYBOARD
		HINT_SEEK_TITLE_BAR_RIGHT,
#endif
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}
TitlePenDisplayList = GenItemGroup {
	applyMsg = MSG_GEN_PEN_INPUT_CONTROL_SET_DISPLAY;
	children =	
			TitleKeyboardItem,
			TitleCharTableItem,
			TitleCharTableSymbolsItem,
			TitleCharTableInternationalItem,
			TitleCharTableMathItem,
			TitleCharTableCustomItem,
			TitleHWRGridItem;
	hints = {
			HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
			HINT_ITEM_GROUP_MINIMIZE_SIZE,
			ATTR_GEN_NOT_PROPERTY,
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS, 15>
				SpecHeight<>
			}
		}
	destination = "TO_OBJ_BLOCK_OUTPUT";
}
TitleKeyboardItem = GenItem {
	moniker = "Keyboard";
	identifier = PIDT_KEYBOARD;
}

TitleCharTableItem = GenItem {
	moniker = "Alphabetic";
	identifier = PIDT_CHAR_TABLE;
}

TitleCharTableSymbolsItem = GenItem {
	moniker = "Symbols";
	identifier = PIDT_CHAR_TABLE_SYMBOLS;
}
TitleCharTableInternationalItem = GenItem {
	moniker = "International";
	identifier = PIDT_CHAR_TABLE_INTERNATIONAL;
}
TitleCharTableMathItem = GenItem {
	moniker = "Math Symbols";
	identifier = PIDT_CHAR_TABLE_MATH;
}
TitleCharTableCustomItem = GenItem {
	moniker = "Custom";
	identifier = PIDT_CHAR_TABLE_CUSTOM;
}


/* ------- */
TitleHWRGridItem = GenItem {
	moniker = "Writing Grid";
	identifier = PIDT_HWR_ENTRY_AREA;
	hints = {
			ATTR_GEN_FEATURE_LINK {lptr HWRGridTools}
		}
}

#endif		/* if !_GRAFFITI_UI */

end	GenPenInputControlUI;




start	GenPenInputControlToolboxUI, notDetachable;

#if !_GRAFFITI_UI

InitiateTrigger = GenTrigger {
	MKR_TEXT(TE)
	genStates = default -usable;
	action = MSG_GEN_INTERACTION_INITIATE, "TO_OBJ_BLOCK_OUTPUT";
}

chunk	String_TAB	= "Tab";
chunk	String_DEL	= "Del";
chunk	String_CAPSLOCK	= "Caps";
chunk	String_LSHIFT	= "Shift";

chunk	String_RCTRL	= "Ctrl";

chunk	String_ALT	= "Alt";

chunk	String_ALT_GR	= "Alt Gr";
chunk	String_BS	= "<-";
chunk	String_ENTER	= "Enter";
chunk	String_SPACE	= "Space";
chunk	String_THINSPACE	= "Thin Space";
chunk	String_ENSPACE		= "En Space";
chunk	String_EMSPACE		= "Em Space";
chunk	String_NONBRKSPACE	= "Non-Breaking Space";
chunk	String_OPTHYPHEN	= "-";

#if STYLUS_KEYBOARD
chunk	String_RSHIFT	= "Symbol";
chunk	String_LCTRL	= "Internat'l";
#else
chunk	String_RSHIFT	= "Shift";
chunk	String_LCTRL	= "Ctrl";
#endif		/* else of if STYLUS_KEYBOARD */

#endif	/* if !_GRAFFITI_UI */

end	GenPenInputControlToolboxUI;

#if !_GRAFFITI_UI

#if !STYLUS_KEYBOARD
start CharTableStrings, data;

#ifdef DO_DBCS

/* ----- */
chunk	CharTableLine1Data = "abcdefghijklm";
chunk	CharTableLine2Data = "nopqrstuvwxyz";
chunk	CharTableLine3Data = "ABCDEFGHIJKLM";
chunk	CharTableLine4Data = "NOPQRSTUVWXYZ";
chunk	CharTableLine5Data = data {
	wchar	"!?,.;':"
	wchar	C_QUOTATION_MARK, C_TAB, C_SPACE, C_ENTER, C_BACKSPACE, 0
}
/* ----- */
chunk	CharTableSymbolsLine1Data = data {
	wchar	"@^~#[]{}()%"
	wchar	"$"
	wchar	C_CENT_SIGN, 0
}
chunk	CharTableSymbolsLine2Data = data {
	wchar	"`"
	wchar	C_POUND_SIGN, C_YEN_SIGN, C_CURRENCY_SIGN, 0
}
chunk	CharTableSymbolsLine3Data = data {
	wchar	"/"
	wchar	C_BACKSLASH
	wchar	"_"
	wchar	C_HORIZONTAL_ELLIPSIS, C_DAGGER, C_DOUBLE_DAGGER
	wchar	C_SECTION_SIGN, C_BULLET, C_PARAGRAPH_SIGN, 0
}
chunk	CharTableSymbolsLine4Data = data {
	wchar	C_SPACING_ACUTE, C_SPACING_GRAVE
	wchar	C_SPACING_CIRCUMFLEX, C_SPACING_DIAERESIS, C_SPACING_TILDE
	wchar	C_SPACING_MACRON, C_SPACING_BREVE
	wchar	C_SPACING_DOT_ABOVE, C_SPACING_RING_ABOVE
	wchar	".", 0
}
chunk	CharTableSymbolsLine5Data = data {
	wchar	"1234567890"
	wchar	C_REGISTERED_TRADE_MARK_SIGN, C_COPYRIGHT_SIGN
	wchar	C_TRADEMARK, 0
}
/* ----- */
chunk	CharTableInternationalLine1Data = data {
	wchar	C_LATIN_CAPITAL_LETTER_A_ACUTE
	wchar	C_LATIN_CAPITAL_LETTER_A_GRAVE
	wchar	C_LATIN_CAPITAL_LETTER_A_CIRCUMFLEX
	wchar	C_LATIN_CAPITAL_LETTER_A_DIAERESIS
	wchar	C_LATIN_CAPITAL_LETTER_A_TILDE
	wchar	C_LATIN_CAPITAL_LETTER_A_RING
	wchar	C_LATIN_SMALL_LETTER_A_ACUTE
	wchar	C_LATIN_SMALL_LETTER_A_GRAVE
	wchar	C_LATIN_SMALL_LETTER_A_CIRCUMFLEX
	wchar	C_LATIN_SMALL_LETTER_A_DIAERESIS
	wchar	C_LATIN_SMALL_LETTER_A_TILDE
	wchar	C_LATIN_SMALL_LETTER_A_RING
	wchar	C_LATIN_CAPITAL_LETTER_C_CEDILLA, 0
}
chunk	CharTableInternationalLine2Data = data {
	wchar	0
}
chunk	CharTableInternationalLine3Data = data {
	wchar	0

}
chunk	CharTableInternationalLine4Data = data {
	wchar	0
}
chunk	CharTableInternationalLine5Data = data {
	wchar	C_INFINITY, 0
}
/* ----- */
chunk	CharTableMathLine1Data = data {
	wchar	"789+"
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	"<>", C_LESS_THAN_OR_EQUAL_TO
	wchar	C_GREATER_THAN_OR_EQUAL_TO
	wchar	C_NOT_SIGN, C_SQUARE_ROOT
	wchar	0
}
chunk	CharTableMathLine2Data = data {
	wchar	"456-"
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	"=",C_APPROXIMATELY_EQUAL_TO, C_NOT_EQUAL_TO
	wchar	C_INTEGRAL, C_INFINITY, C_PLUS_OR_MINUS_SIGN
	wchar	0
}
chunk	CharTableMathLine3Data = data {
	wchar	"123*"
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	C_FRACTION_SLASH
	wchar	"&|%", C_PER_MILLE_SIGN, C_DEGREE_SIGN
	wchar	0
}
chunk	CharTableMathLine4Data = data {
	wchar	"(0)", C_DIVISION_SIGN
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	0
}
chunk	CharTableMathLine5Data = data {
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	wchar	",.", C_ENTER, C_BACKSPACE
	wchar	0
}

#else		/* #ifdef DO_DBCS */

/* ----- */
chunk	CharTableLine1Data = "abcdefghijklm";
chunk	CharTableLine2Data = "nopqrstuvwxyz";
chunk	CharTableLine3Data = "ABCDEFGHIJKLM";
chunk	CharTableLine4Data = "NOPQRSTUVWXYZ";
chunk	CharTableLine5Data = data {
	char	"!?,.;':"
	byte	C_QUOTE, C_TAB, C_SPACE, C_ENTER, C_BS, 0
}
/* ----- */
chunk	CharTableSymbolsLine1Data = data {
	char	"@^~#[]{}()%"
	char	"$"
	byte	C_CENT, 0
}
chunk	CharTableSymbolsLine2Data = data {
	char	"`"
	byte	C_QUOTEDBLLEFT, C_QUOTEDBLRIGHT
	byte	C_QUOTESNGLEFT, C_QUOTESNGRIGHT
	byte	C_SNGQUOTELOW, C_DBLQUOTELOW
	byte	C_GUILLEDBLLEFT, C_GUILLEDBLRIGHT
	byte	C_FLORIN, C_STERLING, C_YEN, C_CURRENCY, 0
}
chunk	CharTableSymbolsLine3Data = data {
	char	"/"
	byte	C_BACKSLASH
	char	"_"
	byte	C_ELLIPSIS, C_DAGGER, C_DBLDAGGER
if _NIKE
	byte	C_SECTION, C_BULLET, C_PARAGRAPH, C_CNTR_DOT, C_ASTERISK
else
	byte	C_SECTION, C_BULLET, C_PARAGRAPH, C_CNTR_DOT, C_LOZENGE
endif
	byte	C_QUESTIONDOWN, C_EXCLAMDOWN, 0
}
chunk	CharTableSymbolsLine4Data = data {
if _NIKE
	byte	C_ACUTE, C_CARON, C_CIRCUMFLEX, C_DIERESIS, C_TILDE
else
	byte	C_ACUTE, C_GRAVE, C_CIRCUMFLEX, C_DIERESIS, C_TILDE
endif
	byte	C_MACRON, C_BREVE, C_DOTACCENT, C_RING, C_HUNGARUMLAT
	byte	C_CEDILLA, C_OGONEK
	char	".", 0
}
chunk	CharTableSymbolsLine5Data = data {
	char	"1234567890"
	byte	C_REGISTERED, C_COPYRIGHT, C_TRADEMARK, 0
}
/* ----- */
chunk	CharTableInternationalLine1Data = data {
	byte	C_UA_ACUTE, C_UA_GRAVE, C_UA_CIRCUMFLEX
	byte	C_UA_DIERESIS, C_UA_TILDE, C_UA_RING
	byte	C_LA_ACUTE, C_LA_GRAVE, C_LA_CIRCUMFLEX
	byte	C_LA_DIERESIS, C_LA_TILDE, C_LA_RING
	byte	C_UC_CEDILLA, 0
}
chunk	CharTableInternationalLine2Data = data {
	byte	C_UO_ACUTE, C_UO_GRAVE, C_UO_CIRCUMFLEX
	byte	C_UO_DIERESIS, C_UO_TILDE, C_UO_SLASH
	byte	C_LO_ACUTE, C_LO_GRAVE, C_LO_CIRCUMFLEX
	byte	C_LO_DIERESIS, C_LO_TILDE, C_LO_SLASH
	byte	C_LC_CEDILLA, 0
}
chunk	CharTableInternationalLine3Data = data {
	byte	C_UE_ACUTE, C_UE_GRAVE, C_UE_CIRCUMFLEX, C_UE_DIERESIS
	byte	C_UI_ACUTE, C_UI_GRAVE, C_UI_CIRCUMFLEX, C_UI_DIERESIS
	byte	C_UU_ACUTE, C_UU_GRAVE, C_UU_CIRCUMFLEX, C_UU_DIERESIS
	byte	C_UN_TILDE, 0

}
chunk	CharTableInternationalLine4Data = data {
	byte	C_LE_ACUTE, C_LE_GRAVE, C_LE_CIRCUMFLEX, C_LE_DIERESIS
	byte	C_LI_ACUTE, C_LI_GRAVE, C_LI_CIRCUMFLEX, C_LI_DIERESIS
	byte	C_LU_ACUTE, C_LU_GRAVE, C_LU_CIRCUMFLEX, C_LU_DIERESIS
	byte	C_LN_TILDE, 0
}
chunk	CharTableInternationalLine5Data = data {
	byte	C_UY_ACUTE, C_LY_ACUTE, C_UY_DIERESIS, C_LY_DIERESIS
	byte	C_U_AE, C_L_AE, C_U_OE, C_L_OE
	byte	C_LI_DOTLESS, C_GERMANDBLS, C_ORDMASCULINE, C_ORDFEMININE
if _NIKE
	byte	0
else
	byte	C_INFINITY, 0
endif
}
/* ----- */
chunk	CharTableMathLine1Data = data {
	char	"789+"
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
if _NIKE
	char	"<>", C_LOGICAL_NOT, C_DEGREE
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
else
	char	"<>", C_LESSEQUAL, C_GREATEREQUAL
	char	C_LOGICAL_NOT, C_ROOT
endif
	char	0
}
chunk	CharTableMathLine2Data = data {
	char	"456-"
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
if _NIKE
	char	"="
	char	C_PLUSMINUS, "[]"
else
	char	"=",C_APPROX_EQUAL, C_NOTEQUAL 
	char	C_INTEGRAL, C_INFINITY, C_PLUSMINUS
endif
	char	0
}
chunk	CharTableMathLine3Data = data {
	char	"123*"
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
if _NIKE
	char	"&|%", C_PERTHOUSAND
else
	char	"&|%", C_PERTHOUSAND, C_DEGREE
endif
	char	0
}
chunk	CharTableMathLine4Data = data {
	char	"(0)", C_DIVISION
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
if _NIKE
	char	C_L_MU, C_FLORIN, C_GERMANDBLS, C_SECTION
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
else
	char	C_U_DELTA, C_L_DELTA
/*	char	C_U_OMEGA 	*/
	char	C_L_MU, C_U_SIGMA, C_U_PI, C_L_PI
endif
	char	0
}
chunk	CharTableMathLine5Data = data {
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	char	CHAR_TABLE_SPACE_FILLER_CHAR, CHAR_TABLE_SPACE_FILLER_CHAR
	char	",.", C_ENTER, C_BS
	char	0
}

/* ----- */


#endif		/* #ifdef DO_DBCS */
end	CharTableStrings;
#endif 		/* #if !STYLUS_KEYBOARD */

/* ----- */


#if STYLUS_KEYBOARD
start VisKeymapData, data;

chunk	BigKeyStateLayoutTable = data {
	KeymapDesc <	StylusBigKeyLayout,
			length StylusBigKeyLayout,
			BigKeysLowerCaseCharData,
			VisKeymapDrawStylusBigKeyOutlines,
			STYLUS_BK_LETTER_FONT_TYPE,
			STYLUS_BK_LETTER_FONT_SIZE,
			STYLUS_BK_WORD_FONT_TYPE,
			STYLUS_BK_WORD_FONT_SIZE
	>
	KeymapDesc <	StylusBigKeyLayout,
			length StylusBigKeyLayout,
			BigKeysUpperCaseCharData,
			VisKeymapDrawStylusBigKeyOutlines,
			STYLUS_BK_LETTER_FONT_TYPE,
			STYLUS_BK_LETTER_FONT_SIZE,
			STYLUS_BK_WORD_FONT_TYPE,
			STYLUS_BK_WORD_FONT_SIZE
	>
}


chunk	BigKeysLowerCaseCharData = data {
	TCHAR	"qwertyuiop"
	TCHAR	"asdfghjkl"
	TCHAR	"-zxcvbnm,."
	TCHAR	C_CTRL_B, C_CTRL_W, C_CTRL_D, C_CTRL_E, C_CTRL_F, C_CTRL_G
	/* C_CTRL_{B-G} are the dismiss key and five keyboard choices */
	TCHAR	C_SPACE, C_CTRL_A, C_BS
		/* we use C_CTRL_A for shift */
}

chunk	BigKeysUpperCaseCharData = data {
	TCHAR	"QWERTYUIOP"
	TCHAR	"ASDFGHJKL"
	TCHAR	"/ZXCVBNM'?"
	TCHAR	C_CTRL_B, C_CTRL_W, C_CTRL_D, C_CTRL_E, C_CTRL_F, C_CTRL_G
	/* C_CTRL_{B-G} are the dismiss key and five keyboard choices */
	TCHAR	C_SPACE, C_CTRL_A, C_BS
		/* we use C_CTRL_A for shift */
}

chunk	NumbersKeymapCharData = data {
	TCHAR	"123456789(0)"
	TCHAR	".:-,", C_ENTER, C_SPACE
	TCHAR	"*#/@+$=%", C_BS
	TCHAR	C_CTRL_B, C_CTRL_C, C_CTRL_D, C_CTRL_X, C_CTRL_F, C_CTRL_G
	/* C_CTRL_{B-G} are the dismiss key and five keyboard choices */
}

chunk	PunctuationKeymapCharData = data {
	TCHAR	",.?!()'", C_QUOTE, "-/;:&*"
	TCHAR	C_SPACE, C_ENTER, C_BS
	TCHAR	C_CTRL_B, C_CTRL_C, C_CTRL_D, C_CTRL_E, C_CTRL_Y, C_CTRL_G
	/* C_CTRL_{B-G} are the dismiss key and five keyboard choices */
}

chunk	HWRGridKeymapCharData = data {
	TCHAR	C_CTRL_B, C_CTRL_C, C_CTRL_D, C_CTRL_E, C_CTRL_F, C_CTRL_Z
}

#ifdef DO_DBCS

chunk	StylusSpecialKeys = data {
	KeymapSpecialKeyInfo <C_ENTER or (CS_CONTROL_HB shl 8),\
				<KSKDT_STRING, EnterString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_TAB or (CS_CONTROL_HB shl 8),\
				<KSKDT_STRING, TabString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_SPACE or (CS_LATIN_1 shl 8),\
				<KSKDT_STRING, SpaceString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_BS or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, BackspaceBitmap>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_CTRL_A or (CS_CONTROL_HB shl 8),\
				<KSKDT_STRING, ShiftString>, mask KSB_SHIFT,\
				VisKeymapChangeState, mask KSB_SHIFT>
	KeymapSpecialKeyInfo <C_CTRL_B or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, DismissPict>, 0, \
				VisKeymapDismissPIC, 0>
	KeymapSpecialKeyInfo <C_CTRL_C or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, BigKeysPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_BIG_KEYS>
	KeymapSpecialKeyInfo <C_CTRL_D or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, KeyboardPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_KEYBOARD>
	KeymapSpecialKeyInfo <C_CTRL_E or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, NumbersPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_NUMBERS>
	KeymapSpecialKeyInfo <C_CTRL_F or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, PunctuationPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_PUNCTUATION>
	KeymapSpecialKeyInfo <C_CTRL_G or (CS_CONTROL_HB shl 8),\
				<KSKDT_BITMAP, HWRGridPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_HWR_ENTRY_AREA>
	KeymapSpecialKeyInfo <C_CTRL_U or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_GREY or KSKDT_BITMAP,\
					KeyboardPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_V or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_GREY or KSKDT_BITMAP,\
					HWRGridPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_W or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					BigKeysPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_X or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					NumbersPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_Y or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					PunctuationPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_Z or (CS_CONTROL_HB shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					HWRGridPict>, 0, \
				 VisKeymapDoNothing, 0>
	word	0
}



chunk	StylusSymIntTables = data {
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 01 */
StylusSymIntStruct <C_YEN,		C_EXCLAMDOWN,	C_NULL>		/* 02 */
StylusSymIntStruct <C_CENT,		C_NULL,		C_NULL>		/* 03 */
StylusSymIntStruct <C_FLORIN,		C_NULL,		C_NULL>		/* 04 */
StylusSymIntStruct <C_SECTION,		C_NULL,		C_NULL>		/* 05 */
StylusSymIntStruct <C_PARAGRAPH,	C_NULL,		C_NULL>		/* 06 */
StylusSymIntStruct <C_BULLET,		C_NULL,		C_NULL>		/* 07 */
StylusSymIntStruct <C_DEGREE,		C_ORDMASCULINE,	C_NULL>		/* 08 */
StylusSymIntStruct <C_EXCLAMDOWN,	C_ORDFEMININE,	C_NULL>		/* 09 */
StylusSymIntStruct <C_QUESTIONDOWN,	C_NULL,		C_NULL>		/* 0a */
StylusSymIntStruct <C_NOTEQUAL,		C_NULL,		C_NULL>		/* 0b */
StylusSymIntStruct <C_PLUSMINUS,	C_NULL,		C_NULL>		/* 0c */
StylusSymIntStruct <C_GUILLEDBLLEFT,	C_NULL,		C_NULL>		/* 0d */
StylusSymIntStruct <C_SYS_BACKSPACE,	C_SYS_BACKSPACE,C_SYS_BACKSPACE>	/* 0e */
StylusSymIntStruct <C_SYS_TAB,		C_SYS_TAB,	C_SYS_TAB>	/* 0f */
StylusSymIntStruct <C_INFINITY,		C_LA_ACUTE,	C_UA_ACUTE>	/* 10 */
StylusSymIntStruct <C_U_SIGMA,		C_LA_DIERESIS,	C_UA_DIERESIS>	/* 11 */
StylusSymIntStruct <C_LOZENGE,		C_LA_GRAVE,	C_UA_GRAVE>	/* 12 */
StylusSymIntStruct <C_REGISTERED,	C_LA_CIRCUMFLEX,C_UA_CIRCUMFLEX>/* 13 */
StylusSymIntStruct <C_COPYRIGHT,	C_LA_TILDE,	C_UA_TILDE>	/* 14 */
StylusSymIntStruct <C_TRADEMARK,	C_LA_RING,	C_UA_RING>	/* 15 */
StylusSymIntStruct <C_QUOTEDBLLEFT,	C_LC_CEDILLA,	C_UC_CEDILLA>	/* 16 */
StylusSymIntStruct <C_QUOTEDBLRIGHT,	C_LE_ACUTE,	C_UE_ACUTE>	/* 17 */
StylusSymIntStruct <C_QUOTESNGLEFT,	C_LE_DIERESIS,	C_UE_DIERESIS>	/* 18 */
StylusSymIntStruct <C_QUOTESNGRIGHT,	C_LE_GRAVE,	C_LE_GRAVE>	/* 19 */
StylusSymIntStruct <C_LESS_THAN,	C_LE_CIRCUMFLEX,C_UE_CIRCUMFLEX>/* 1a */
StylusSymIntStruct <C_GREATER_THAN,	C_LI_DOTLESS,	C_NULL>		/* 1b */
StylusSymIntStruct <C_SYS_ENTER,	C_SYS_ENTER,	C_SYS_ENTER>	/* 1c */
StylusSymIntStruct <C_SYS_LEFT_CTRL,	C_SYS_LEFT_CTRL,C_SYS_LEFT_CTRL>	/* 1d */
StylusSymIntStruct <C_NULL,		C_LI_ACUTE,	C_UI_ACUTE>	/* 1e */
StylusSymIntStruct <C_DAGGER,		C_LI_DIERESIS,	C_UI_DIERESIS>	/* 1f */
StylusSymIntStruct <C_DBLDAGGER,	C_LI_GRAVE,	C_UI_GRAVE>	/* 20 */
StylusSymIntStruct <C_PARTIAL_DIFF,	C_LI_CIRCUMFLEX,C_UI_CIRCUMFLEX>/* 21 */
StylusSymIntStruct <C_FRACTION,		C_LN_TILDE,	C_UN_TILDE>	/* 22 */
StylusSymIntStruct <C_CURRENCY,		C_LO_ACUTE,	C_UO_ACUTE>	/* 23 */
StylusSymIntStruct <C_U_DELTA,		C_LO_DIERESIS,	C_UO_DIERESIS>	/* 24 */
StylusSymIntStruct <C_PERTHOUSAND,	C_LO_GRAVE,	C_UO_GRAVE>	/* 25 */
StylusSymIntStruct <C_LOGICAL_NOT,	C_LO_CIRCUMFLEX,C_UO_CIRCUMFLEX>/* 26 */
StylusSymIntStruct <C_ELLIPSIS,		C_LO_TILDE,	C_UO_TILDE>	/* 27 */
StylusSymIntStruct <C_NULL,		C_LO_SLASH,	C_UO_SLASH>	/* 28 */
StylusSymIntStruct <C_STERLING,		C_NULL,		C_NULL>		/* 29 */
StylusSymIntStruct <C_NULL,		C_SYS_LEFT_SHIFT,	C_SYS_LEFT_SHIFT>	/* 2a */
StylusSymIntStruct <C_GUILLEDBLRIGHT,	C_NULL,		C_NULL>		/* 2b */
StylusSymIntStruct <C_U_OMEGA,		C_NULL,		C_NULL>		/* 2c */
StylusSymIntStruct <C_APPROX_EQUAL,	C_GERMANDBLS,	C_NULL>		/* 2d */
StylusSymIntStruct <C_L_PI,		C_LU_ACUTE,	C_UU_ACUTE>	/* 2e */
StylusSymIntStruct <C_U_PI,		C_LU_DIERESIS,	C_UU_DIERESIS>	/* 2f */
StylusSymIntStruct <C_RADICAL,		C_LU_GRAVE,	C_UU_GRAVE>	/* 30 */
StylusSymIntStruct <C_INTEGRAL,		C_LU_CIRCUMFLEX,C_UU_CIRCUMFLEX>/* 31 */
StylusSymIntStruct <C_L_MU,		C_LY_DIERESIS,	C_UY_DIERESIS>	/* 32 */
StylusSymIntStruct <C_LESSEQUAL,	C_L_AE,		C_U_AE>		/* 33 */
StylusSymIntStruct <C_GREATEREQUAL,	C_L_OE,		C_U_OE>		/* 34 */
StylusSymIntStruct <C_DIVISION,		C_QUESTIONDOWN,	C_NULL>		/* 35 */
StylusSymIntStruct <C_SYS_RIGHT_SHIFT,	C_SYS_RIGHT_SHIFT,	C_SYS_RIGHT_SHIFT>	/* 36 */
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 37 */
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 38 */
StylusSymIntStruct <C_ENSPACE,		C_SPACE,	C_SPACE>	/* 39 */
StylusSymIntStruct <C_NULL,		C_SYS_CAPS_LOCK,C_SYS_CAPS_LOCK>	/* 3a */
}

#else  /* #ifdef DO_DBCS */

chunk	StylusSpecialKeys = data {
	KeymapSpecialKeyInfo <C_ENTER or (CS_CONTROL shl 8),\
				<KSKDT_STRING, EnterString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_TAB or (CS_CONTROL shl 8),\
				<KSKDT_STRING, TabString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_SPACE or (CS_BSW shl 8),\
				<KSKDT_STRING, SpaceString>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_BS or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, BackspaceBitmap>, 0,\
				0, 0>
	KeymapSpecialKeyInfo <C_CTRL_A or (CS_CONTROL shl 8),\
				<KSKDT_STRING, ShiftString>, mask KSB_SHIFT,\
				VisKeymapChangeState, mask KSB_SHIFT>
	KeymapSpecialKeyInfo <C_CTRL_B or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, DismissPict>, 0, \
				VisKeymapDismissPIC, 0>
	KeymapSpecialKeyInfo <C_CTRL_C or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, BigKeysPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_BIG_KEYS>
	KeymapSpecialKeyInfo <C_CTRL_D or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, KeyboardPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_KEYBOARD>
	KeymapSpecialKeyInfo <C_CTRL_E or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, NumbersPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_NUMBERS>
	KeymapSpecialKeyInfo <C_CTRL_F or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, PunctuationPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_PUNCTUATION>
	KeymapSpecialKeyInfo <C_CTRL_G or (CS_CONTROL shl 8),\
				<KSKDT_BITMAP, HWRGridPict>, 0, \
				VisKeymapChangeDisplayStub, PIDT_HWR_ENTRY_AREA>
	KeymapSpecialKeyInfo <C_CTRL_U or (CS_CONTROL shl 8),\
				<mask KSKDI_GREY or KSKDT_BITMAP,\
					KeyboardPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_V or (CS_CONTROL shl 8),\
				<mask KSKDI_GREY or KSKDT_BITMAP,\
					HWRGridPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_W or (CS_CONTROL shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					BigKeysPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_X or (CS_CONTROL shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					NumbersPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_Y or (CS_CONTROL shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					PunctuationPict>, 0, \
				 VisKeymapDoNothing, 0>
	KeymapSpecialKeyInfo <C_CTRL_Z or (CS_CONTROL shl 8),\
				<mask KSKDI_INVERT or KSKDT_BITMAP,\
					HWRGridPict>, 0, \
				 VisKeymapDoNothing, 0>
	word	0
}


chunk	StylusSymIntTables = data {
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 01 */
StylusSymIntStruct <C_YEN,		C_EXCLAMDOWN,	C_NULL>		/* 02 */
StylusSymIntStruct <C_CENT,		C_NULL,		C_NULL>		/* 03 */
StylusSymIntStruct <C_FLORIN,		C_NULL,		C_NULL>		/* 04 */
StylusSymIntStruct <C_SECTION,		C_NULL,		C_NULL>		/* 05 */
StylusSymIntStruct <C_PARAGRAPH,	C_NULL,		C_NULL>		/* 06 */
StylusSymIntStruct <C_BULLET,		C_NULL,		C_NULL>		/* 07 */
StylusSymIntStruct <C_DEGREE,		C_ORDMASCULINE,	C_NULL>		/* 08 */
StylusSymIntStruct <C_EXCLAMDOWN,	C_ORDFEMININE,	C_NULL>		/* 09 */
StylusSymIntStruct <C_QUESTIONDOWN,	C_NULL,		C_NULL>		/* 0a */
StylusSymIntStruct <C_NOTEQUAL,		C_NULL,		C_NULL>		/* 0b */
StylusSymIntStruct <C_PLUSMINUS,	C_NULL,		C_NULL>		/* 0c */
StylusSymIntStruct <C_GUILLEDBLLEFT,	C_NULL,		C_NULL>		/* 0d */
StylusSymIntStruct <VC_BACKSPACE,	VC_BACKSPACE,	VC_BACKSPACE>	/* 0e */
StylusSymIntStruct <VC_TAB,		VC_TAB,		VC_TAB>		/* 0f */
StylusSymIntStruct <C_INFINITY,		C_LA_ACUTE,	C_UA_ACUTE>	/* 10 */
StylusSymIntStruct <C_U_SIGMA,		C_LA_DIERESIS,	C_UA_DIERESIS>	/* 11 */
StylusSymIntStruct <C_LOZENGE,		C_LA_GRAVE,	C_UA_GRAVE>	/* 12 */
StylusSymIntStruct <C_REGISTERED,	C_LA_CIRCUMFLEX,C_UA_CIRCUMFLEX>/* 13 */
StylusSymIntStruct <C_COPYRIGHT,	C_LA_TILDE,	C_UA_TILDE>	/* 14 */
StylusSymIntStruct <C_TRADEMARK,	C_LA_RING,	C_UA_RING>	/* 15 */
StylusSymIntStruct <C_QUOTEDBLLEFT,	C_LC_CEDILLA,	C_UC_CEDILLA>	/* 16 */
StylusSymIntStruct <C_QUOTEDBLRIGHT,	C_LE_ACUTE,	C_UE_ACUTE>	/* 17 */
StylusSymIntStruct <C_QUOTESNGLEFT,	C_LE_DIERESIS,	C_UE_DIERESIS>	/* 18 */
StylusSymIntStruct <C_QUOTESNGRIGHT,	C_LE_GRAVE,	C_LE_GRAVE>	/* 19 */
StylusSymIntStruct <C_LESS_THAN,	C_LE_CIRCUMFLEX,C_UE_CIRCUMFLEX>/* 1a */
StylusSymIntStruct <C_GREATER_THAN,	C_LI_DOTLESS,	C_NULL>		/* 1b */
StylusSymIntStruct <VC_ENTER,		VC_ENTER,	VC_ENTER>	/* 1c */
StylusSymIntStruct <VC_LCTRL,		VC_LCTRL,	VC_LCTRL>	/* 1d */
StylusSymIntStruct <C_NULL,		C_LI_ACUTE,	C_UI_ACUTE>	/* 1e */
StylusSymIntStruct <C_DAGGER,		C_LI_DIERESIS,	C_UI_DIERESIS>	/* 1f */
StylusSymIntStruct <C_DBLDAGGER,	C_LI_GRAVE,	C_UI_GRAVE>	/* 20 */
StylusSymIntStruct <C_PARTIAL_DIFF,	C_LI_CIRCUMFLEX,C_UI_CIRCUMFLEX>/* 21 */
StylusSymIntStruct <C_FRACTION,		C_LN_TILDE,	C_UN_TILDE>	/* 22 */
StylusSymIntStruct <C_CURRENCY,		C_LO_ACUTE,	C_UO_ACUTE>	/* 23 */
StylusSymIntStruct <C_U_DELTA,		C_LO_DIERESIS,	C_UO_DIERESIS>	/* 24 */
StylusSymIntStruct <C_PERTHOUSAND,	C_LO_GRAVE,	C_UO_GRAVE>	/* 25 */
StylusSymIntStruct <C_LOGICAL_NOT,	C_LO_CIRCUMFLEX,C_UO_CIRCUMFLEX>/* 26 */
StylusSymIntStruct <C_ELLIPSIS,		C_LO_TILDE,	C_UO_TILDE>	/* 27 */
StylusSymIntStruct <C_NULL,		C_LO_SLASH,	C_UO_SLASH>	/* 28 */
StylusSymIntStruct <C_STERLING,		C_NULL,		C_NULL>		/* 29 */
StylusSymIntStruct <C_NULL,		VC_LSHIFT,	VC_LSHIFT>	/* 2a */
StylusSymIntStruct <C_GUILLEDBLRIGHT,	C_NULL,		C_NULL>		/* 2b */
StylusSymIntStruct <C_U_OMEGA,		C_NULL,		C_NULL>		/* 2c */
StylusSymIntStruct <C_APPROX_EQUAL,	C_GERMANDBLS,	C_NULL>		/* 2d */
StylusSymIntStruct <C_L_PI,		C_LU_ACUTE,	C_UU_ACUTE>	/* 2e */
StylusSymIntStruct <C_U_PI,		C_LU_DIERESIS,	C_UU_DIERESIS>	/* 2f */
StylusSymIntStruct <C_RADICAL,		C_LU_GRAVE,	C_UU_GRAVE>	/* 30 */
StylusSymIntStruct <C_INTEGRAL,		C_LU_CIRCUMFLEX,C_UU_CIRCUMFLEX>/* 31 */
StylusSymIntStruct <C_L_MU,		C_LY_DIERESIS,	C_UY_DIERESIS>	/* 32 */
StylusSymIntStruct <C_LESSEQUAL,	C_L_AE,		C_U_AE>		/* 33 */
StylusSymIntStruct <C_GREATEREQUAL,	C_L_OE,		C_U_OE>		/* 34 */
StylusSymIntStruct <C_DIVISION,		C_QUESTIONDOWN,	C_NULL>		/* 35 */
StylusSymIntStruct <VC_RSHIFT,		VC_RSHIFT,	VC_RSHIFT>	/* 36 */
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 37 */
StylusSymIntStruct <C_NULL,		C_NULL,		C_NULL>		/* 38 */
StylusSymIntStruct <C_ENSPACE,		C_SPACE,	C_SPACE>	/* 39 */
StylusSymIntStruct <C_NULL,		VC_CAPSLOCK,	VC_CAPSLOCK>	/* 3a */
}

#endif  /* DO_DBCS */

chunk	EnterString = "Enter";
chunk	TabString = "Tab";
chunk	SpaceString = "Space";
chunk	ShiftString = "Shift";


chunk BackspaceBitmap = data {
	Bitmap <12, 9, BMC_UNCOMPACTED, BMF_MONO>
	db	00001111b, 11110000b
	db	00010000b, 00010000b
	db	00100100b, 01010000b
	db	01000010b, 10010000b
	db	10000001b, 00010000b
	db	01000010b, 10010000b
	db	00100100b, 01010000b
	db	00010000b, 00010000b
	db	00001111b, 11110000b
}

chunk	BigKeysPict = data {
	Bitmap <6, 8, BMC_UNCOMPACTED, BMF_MONO>
	db	01111000b
	db	11001100b
	db	11001100b
	db	11001100b
	db	11111100b
	db	11001100b
	db	11001100b
	db	11001100b
}

chunk	KeyboardPict = data {
	Bitmap <4, 8, BMC_UNCOMPACTED, BMF_MONO>
	db	00000000b
	db	00000000b
	db	01100000b
	db	10010000b
	db	10010000b
	db	11110000b
	db	10010000b
	db	10010000b
}

chunk	NumbersPict = data {
	Bitmap <11, 7, BMC_UNCOMPACTED, BMF_MONO>
	db	00001101b, 10000000b
	db	00001101b, 10000000b
	db	01111111b, 11100000b
	db	00011011b, 00000000b
	db	11111111b, 11000000b
	db	00110110b, 00000000b
	db	00110110b, 00000000b
}

chunk	PunctuationPict = data {
	Bitmap <7, 9, BMC_UNCOMPACTED, BMF_MONO>
	db	00000110b
	db	00000110b
	db	00000110b
	db	01100110b
	db	01100110b
	db	00000110b
	db	01100000b
	db	01100110b
	db	11000000b
}

chunk	HWRGridPict = data {
	Bitmap <9, 9, BMC_UNCOMPACTED, BMF_MONO>
	db	00000100b, 00000000b
	db	00011000b, 00000000b
	db	00100000b, 00000000b
	db	00101100b, 10000000b
	db	01001101b, 00000000b
	db	01010001b, 00000000b
	db	01100110b, 00000000b
	db	10111000b, 00000000b
	db	11000000b, 00000000b
}

	
chunk	DismissPict = data {
	Bitmap <28, 14, BMC_UNCOMPACTED, BMF_MONO>
	db	0x1f, 0xff, 0xff, 0xe0
	db	0x3f, 0xff, 0xff, 0xf0
	db	0x30, 0x00, 0x00, 0x30
	db	0xaf, 0xeb, 0x6d, 0xb0
	db	0xdf, 0xdb, 0x6d, 0xb0
	db	0xff, 0x80, 0x00, 0x30
	db	0xff, 0x5b, 0x6d, 0xb0
	db	0xfe, 0xdb, 0x6d, 0xb0
	db	0xfc, 0x00, 0x00, 0x30
	db	0xfe, 0x7f, 0xfb, 0xb0
	db	0xff, 0x7f, 0xfb, 0xb0
	db	0x00, 0x00, 0x00, 0x30
	db	0x3f, 0xff, 0xff, 0xf0
	db	0x1f, 0xff, 0xff, 0xe0
}


end VisKeymapData;
#endif		/* #if STYLUS_KEYBOARD */

#endif		/* if !_GRAFFITI_UI */

start ControlStrings, data;

chunk GPICName = "Pen Input";
#if !_GRAFFITI_UI
chunk InitiatePenInputName = "Text Entry Area";	
chunk HWRGridName = "Handwriting Entry";
chunk CharTableName = "Alphabetic";
chunk CharTableSymbolsName = "Symbols";
chunk CharTableInternationalName = "International";
chunk CharTableMathName = "Math Symbols";
chunk CharTableCustomName = "Special Layout";
chunk KeyboardName = "Keyboard";
#endif

#if _GRAFFITI_UI
chunk GraffitiName = "Graffiti";
#endif

end ControlStrings;

