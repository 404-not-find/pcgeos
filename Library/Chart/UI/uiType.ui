/*
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS 
 * MODULE:	Chart library
 * FILE:	uiType.ui
 *
 * AUTHOR:	Chris Boyke
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CDB	12/ 9/91	Initial version.
 *
 * DESCRIPTION:
 *	UI controller for chart type, etc.
 *
 * 	$Id: uiType.ui,v 1.1 97/04/04 17:47:27 newdeal Exp $
 *
 */

start TypeControlUI, notDetachable;

ChartTypeInteraction = GenInteraction {
	genStates = default -usable;
	children =
		ChartTypeItemGroup,
		ChartVariationInteraction;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

/**************************************************************************
 *	CHART TYPE LIST
 **************************************************************************/ 



ChartTypeItemGroup = GenItemGroup {
#ifdef	SPIDER_CHART
	children =
		ColumnItem,
		BarItem,
		LineItem,
		AreaItem,
		ScatterItem,
		PieItem,
		HighLowItem,
		SpiderItem;
#else
	children =
		ColumnItem,
		BarItem,
		LineItem,
		AreaItem,
		ScatterItem,
		PieItem,
		HighLowItem;
#endif
	destination = "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_ALLOW_CHILDREN_TO_WRAP,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_CTC_TYPE_CHANGE
		}
	}
}

ColumnItem = GenItem {
	moniker = 'C', "Column";
	identifier = "CT_COLUMN";
}

BarItem = GenItem {
	moniker = 'B', "Bar";
	identifier = "CT_BAR";
}

LineItem = GenItem {
	moniker = 'L', "Line";
	identifier = "CT_LINE";
}

AreaItem = GenItem {
	moniker = 'A', "Area";
	identifier = "CT_AREA";
}

ScatterItem = GenItem {
	moniker = 'X', "X-Y Plot";
	identifier = "CT_SCATTER";
}

PieItem = GenItem {
	moniker = 'P', "Pie";
	identifier = "CT_PIE";
}

HighLowItem = GenItem {
	moniker = 'H', "High-Low";
	identifier = "CT_HIGH_LOW";
}

#ifdef	SPIDER_CHART
SpiderItem = GenItem {
	moniker = 'S', "Spider";
	identifier = "CT_SPIDER";
}
#endif

/**************************************************************************
 *	CHART VARIATIONS
 **************************************************************************/ 
ChartVariationInteraction = GenInteraction {
	moniker = 'V', "Variations";
#ifdef	SPIDER_CHART
	children = ColumnItemGroup, 
			BarItemGroup,
			LineItemGroup,
			AreaItemGroup,
			ScatterItemGroup,
			PieItemGroup,
			HighLowItemGroup,
			SpiderItemGroup;
#else
	children = ColumnItemGroup, 
			BarItemGroup,
			LineItemGroup,
			AreaItemGroup,
			ScatterItemGroup,
			PieItemGroup,
			HighLowItemGroup;
#endif
	hints = { 
		HINT_DRAW_IN_BOX,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 8>
			word 1
			}
		}
}
/**************************************************************************
 *	VARIATION LISTS
 **************************************************************************/ 
#define VARIATION_LIST_VALUES	\
	applyMsg = MSG_CTC_VARIATION_CHANGE;	\
	destination = "TO_OBJ_BLOCK_OUTPUT";
	

/**************************************************************************
 *	COLUMN LIST
 **************************************************************************/ 
ColumnItemGroup = GenItemGroup {
	VARIATION_LIST_VALUES
	children = 
		ColumnStandard,
		ColumnOverlapped,
		ColumnStacked,
		ColumnFullStacked,
		ColumnOneColorWithValues,
		ColumnOneColorSquished;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
			}
		}

}

#define COLUMN_ITEM(name,mon,eData) Column ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_COLUMN"; }

COLUMN_ITEM(Standard,Standard,CCV_STANDARD)
COLUMN_ITEM(Overlapped,Overlapped,CCV_OVERLAPPED)
COLUMN_ITEM(Stacked,Stacked,CCV_STACKED)
COLUMN_ITEM(FullStacked,Stacked Percentage,CCV_FULL_STACKED)
COLUMN_ITEM(OneColorWithValues,One Color With Values, 
					CCV_ONE_COLOR_WITH_VALUES)
COLUMN_ITEM(OneColorSquished,One Color With No Space Between Categories, CCV_ONE_COLOR_SQUISHED)

/**************************************************************************
 *	BAR CHART
 **************************************************************************/ 
BarItemGroup = GenItemGroup {
	VARIATION_LIST_VALUES	
	genStates = default -usable;
	children = 
			BarStandard,
			BarOverlapped,
			BarStacked,
			BarFullStacked,
			BarOneColorWithValues,
			BarOneColorSquished;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}
}


#define BAR_ITEM(name,mon,eData) Bar ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_BAR"; }

BAR_ITEM(Standard,Standard,CBV_STANDARD)
BAR_ITEM(Overlapped,Overlapped,CBV_OVERLAPPED)
BAR_ITEM(Stacked,Stacked,CBV_STACKED)
BAR_ITEM(FullStacked,Stacked Percentage,CBV_FULL_STACKED)
BAR_ITEM(OneColorWithValues,One Color With Values,CBV_ONE_COLOR_WITH_VALUES)
BAR_ITEM(OneColorSquished,One Color With No Space Between Categories,CBV_ONE_COLOR_SQUISHED)

/**************************************************************************
 *	LINE CHART
 **************************************************************************/ 
LineItemGroup = GenItemGroup {	
	VARIATION_LIST_VALUES
	genStates = default -usable;
	children = 
			LineStandard,
			LineLinesOnly,
			LineMarkersOnly,
			LineVLineGrouping;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}

}

#define LINE_ITEM(name,mon,eData) Line ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_LINE"; }

LINE_ITEM(Standard, Standard, CLV_STANDARD)
LINE_ITEM(LinesOnly,Lines Only, CLV_LINES_ONLY)
LINE_ITEM(MarkersOnly, Markers Only, CLV_MARKERS_ONLY)
LINE_ITEM(VLineGrouping, Drop Lines, CLV_V_LINE_GROUPING)


/**************************************************************************
 *	AREA 
 **************************************************************************/ 
AreaItemGroup = GenItemGroup {	
	VARIATION_LIST_VALUES
	genStates = default -usable;
	children = 
			AreaStandard,
			AreaFull,
			AreaDropLines,
			AreaSeriesName;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}
}

#define AREA_ITEM(name,mon,eData) Area ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_AREA"; }

AREA_ITEM(Standard, Standard, CAV_STANDARD)
AREA_ITEM(Full, Stacked Percentage, CAV_FULL)
AREA_ITEM(DropLines, Drop Lines, CAV_DROP_LINES)
AREA_ITEM(SeriesName, Series Name, CAV_SERIES_NAME)


/**************************************************************************
 *	SCATTER
 **************************************************************************/ 
ScatterItemGroup = GenItemGroup {
	VARIATION_LIST_VALUES
	genStates = default -usable;
	children = 	ScatterStandard,
			ScatterLinesOnly,
			ScatterMarkersOnly;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}

}

#define SCATTER_ITEM(name,mon, eData) Scatter ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_SCATTER"; }

SCATTER_ITEM(Standard, Standard, CSV_STANDARD)
SCATTER_ITEM(LinesOnly, Lines Only, CSV_LINES_ONLY)
SCATTER_ITEM(MarkersOnly, Markers Only, CSV_MARKERS_ONLY)


/**************************************************************************
 *	PIE
 **************************************************************************/ 
PieItemGroup = GenItemGroup {
	genStates = default -usable;
	VARIATION_LIST_VALUES
	children = 
			PieStandard,
			PieCategoryTitles,
			PieOneColorCategoryTitles,
			PieOneExploded,
			PieAllExploded,
			PiePercentages;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,	
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}
}

#define PIE_ITEM(name,mon,eData) Pie ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_PIE"; }

PIE_ITEM(Standard, Standard, CPV_STANDARD)
PIE_ITEM(CategoryTitles, Category Titles, CPV_CATEGORY_TITLES)
PIE_ITEM(OneColorCategoryTitles, One Color With Category Titles, \
					CPV_ONE_COLOR_CATEGORY_TITLES)
PIE_ITEM(OneExploded, First Wedge Exploded, CPV_ONE_EXPLODED)
PIE_ITEM(AllExploded, All Exploded, CPV_ALL_EXPLODED)
PIE_ITEM(Percentages, With Percentages, CPV_PERCENTAGES)

/**************************************************************************
 *	HIGH_LOW
 **************************************************************************/ 
HighLowItemGroup = GenItemGroup {
	genStates = default -usable;
	VARIATION_LIST_VALUES
	children = 
			HighLowStandard;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,	
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}
}

#define HIGH_LOW_ITEM(name,mon,eData) HighLow ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_HIGH_LOW"; }

HIGH_LOW_ITEM(Standard, Standard, CHLV_STANDARD)

#ifdef	SPIDER_CHART
/**************************************************************************
 *	SPIDER
 **************************************************************************/ 
SpiderItemGroup = GenItemGroup {
	genStates = default -usable;
	VARIATION_LIST_VALUES
	children = 
			SpiderStandard,
			SpiderCategoryTitles,
			SpiderMarkersWithCategoryTitles,
			SpiderLinesWithCategoryTitles,
			SpiderMarkersOnly,
			SpiderLinesOnly;

	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,	
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word 6
		}
	}
}

#define SPIDER_ITEM(name,mon,eData) Spider ## name = GenItem {\
	moniker = #mon;\
	identifier = #eData " shl 8 or CT_SPIDER"; }

SPIDER_ITEM(Standard, Standard, CSPV_STANDARD)
SPIDER_ITEM(CategoryTitles, Category Titles, CSPV_CATEGORY_TITLES)
SPIDER_ITEM(MarkersWithCategoryTitles, Markers With Category Titles, \
					CSPV_MARKERS_WITH_CATEGORY_TITLES)
SPIDER_ITEM(LinesWithCategoryTitles, Lines With Category Titles, \
					CSPV_LINES_WITH_CATEGORY_TITLES)
SPIDER_ITEM(MarkersOnly, Markers Only, CSPV_MARKERS_ONLY)
SPIDER_ITEM(LinesOnly, Lines Only, CSPV_LINES_ONLY)

#endif	/* SPIDER_CHART */

end TypeControlUI;



/**************************************************************************
 *	Tools
 **************************************************************************/ 

#ifdef GPC_ART
start AppTCMonikerResource, data;
#include "Art/mkrAreaTC.ui"
#include "Art/mkrLineTC.ui"
#include "Art/mkrBarTC.ui"
#include "Art/mkrColumnTC.ui"
#include "Art/mkrPieTC.ui"
#include "Art/mkrScatterTC.ui"
#include "Art/mkrHighLowTC.ui"
end AppTCMonikerResource;
#else
#include "Art/mkrArea.ui"
#include "Art/mkrLine.ui"
#include "Art/mkrBar.ui"
#include "Art/mkrColumn.ui"
#include "Art/mkrPie.ui"
#include "Art/mkrScatter.ui"
#include "Art/mkrHighLow.ui"
#endif
#ifdef	SPIDER_CHART
#include "Art/mkrSpider.ui"
#endif

start TypeControlToolboxUI, notDetachable;

ChartTypeTool = GenItemGroup {
	genAttributes = default +initiatesInputIgnore, +initiatesBusyState;
	genStates = default -usable;
#ifdef	SPIDER_CHART
	children =
		ColumnTool,
		BarTool,
		LineTool,
		AreaTool,
		ScatterTool,
		PieTool,
		HighLowTool,
		SpiderTool;
#else
	children =
		ColumnTool,
		BarTool,
		LineTool,
		AreaTool,
		ScatterTool,
		PieTool,
		HighLowTool;
#endif
	applyMsg = MSG_CTC_TYPE_TOOL_CHANGE;
	destination = "TO_OBJ_BLOCK_OUTPUT";
}

ColumnTool = GenItem {
#ifdef GPC_ART
	moniker = list { ColumnTCMoniker }
#else
	TOOL_MONIKER_LIST(Column)
#endif
	identifier = "CT_COLUMN or (CCV_STANDARD shl 8)";
}

BarTool = GenItem {
#ifdef GPC_ART
	moniker = list { BarTCMoniker }
#else
	TOOL_MONIKER_LIST(Bar)
#endif
	identifier = "CT_BAR or (CBV_STANDARD shl 8)";
}

LineTool = GenItem {
#ifdef GPC_ART
	moniker = list { LineTCMoniker }
#else
	TOOL_MONIKER_LIST(Line)
#endif
	identifier = "CT_LINE or (CLV_STANDARD shl 8)";
}

AreaTool = GenItem {
#ifdef GPC_ART
	moniker = list { AreaTCMoniker }
#else
	TOOL_MONIKER_LIST(Area)
#endif
	identifier = "CT_AREA or (CAV_STANDARD shl 8)";
}

ScatterTool = GenItem {
#ifdef GPC_ART
	moniker = list { ScatterTCMoniker }
#else
	TOOL_MONIKER_LIST(Scatter)
#endif
	identifier = "CT_SCATTER or (CSV_STANDARD shl 8)";
}

PieTool = GenItem {
#ifdef GPC_ART
	moniker = list { PieTCMoniker }
#else
	TOOL_MONIKER_LIST(Pie)
#endif
	identifier = "CT_PIE or (CPV_CATEGORY_TITLES shl 8)";
}

HighLowTool = GenItem {
#ifdef GPC_ART
	moniker = list { HighLowTCMoniker }
#else
	TOOL_MONIKER_LIST(HighLow)
#endif
	identifier = "CT_HIGH_LOW or (CHLV_STANDARD shl 8)";
}

#ifdef	SPIDER_CHART
SpiderTool = GenItem {
	TOOL_MONIKER_LIST(Spider)
	identifier = "CT_SPIDER or (CSPV_CATEGORY_TITLES shl 8)";
}
#endif

end TypeControlToolboxUI;

/*
 * Strings for controllers
 */


start StringUI, data;

chunk CTCName = "Chart Type";

chunk ColumnName = "Column";
chunk BarName = "Bar";
chunk LineName = "Line";
chunk AreaName = "Area";
chunk ScatterName = "X-Y Plot";
chunk PieName = "Pie";
chunk HighLowName = "High-Low";
#ifdef	SPIDER_CHART
chunk SpiderName = "Spider";
#endif

/* chunk ChartTitleName = "Chart Title";
chunk XAxisName = "X Axis Title";
chunk YAxisName = "Y Axis Title";	*/

end StringUI;
