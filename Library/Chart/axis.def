COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		axis.def

AUTHOR:		John Wedgwood, Oct  7, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	10/ 7/91	Initial revision


DESCRIPTION:
	Definition of the axis class.
		
	$Id: axis.def,v 1.1 97/04/04 17:46:06 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;	CONSTANTS		
;-----------------------------------------------------------------------------

NUMBER_WIDTH_FUDGE_FACTOR	equ	8

AXIS_MIN_PLOT_DISTANCE		=	50
; This is the minimum initial plot distance for an axis.  The actual
; plot distance may be less.  If this number is decreased, make sure
; that the maxLabelSize calculations are adjusted accordingly.
 
AXIS_ABOVE_HEIGHT		=	4
AXIS_STANDARD_AXIS_HEIGHT	=	(2 * AXIS_ABOVE_HEIGHT) + 1

AXIS_LEFT_WIDTH			=	4
AXIS_STANDARD_AXIS_WIDTH	=	(2 * AXIS_LEFT_WIDTH) + 1

AXIS_MAX_LABEL_WIDTH		=	50	; pixels

AXIS_STANDARD_TICK_ATTRIBUTES = mask ATA_MAJOR_TICKS or \
				mask ATA_LABELS

SKIP_MINOR_TOLERANCE	=	6

;
; The AxisAttributes is a composite of all of the above enumerated types.
;
AxisAttributes	record
	AA_VERTICAL:1
	;
	; If set then the axis is vertical.
	;

	AA_USER_SET_BOUNDS:1
	;
	; If set then the user has set the range of the axis or the
	; position of the related axis.
	;

	AA_OVERLAY:1
	; Set if this axis is an "overlay" axis. NOT CURRENTLY USED

	AA_VALUE:1
	; Set if axis is a value axis.  Note:  this isn't strictly
	; object-oriented, but hey!

	:4

AxisAttributes	end

; TickEnumFlags -- describe what type of enumeration is being
; performed.  This is rather complex.  The CURRENT_IS_MAJOR flag is
; set if the current enumeration is over the MAJOR ticks.
; The lower 2 bits specify what is being enumerated in the overall scheme.
; This is to prevent minor ticks (and grids) from being drawn when
; major ticks are being drawn and drawing the 2 would result in
; overlap. 

TickEnumFlags	record
	:5
	TEF_CURRENT_IS_MAJOR:1
	TEF_MAJOR:1
	TEF_MINOR:1
TickEnumFlags	end

TickEnumVars	struct
	TEV_callback		nptr
	TEV_plotBounds		Rectangle
	TEV_relatedPlotBounds	Rectangle
	TEV_gstate		hptr.GState
	TEV_tickMajorUnit	word
	TEV_tickMinorUnit	word
	TEV_flags		TickEnumFlags

	; The following variables are only used by AxisDrawTickLabels

	TEV_ctp			CreateTextParams
	TEV_charAttr		VisTextCharAttr
	TEV_paraAttr		VisTextParaAttr

TickEnumVars	ends




;-----------------------------------------------------------------------------
; Tick Attributes - major tick style, minor tick style, and label
; style 
;-----------------------------------------------------------------------------
 

AxisTickAttributes	record
	ATA_USER_SET:1
	; If set, then the user has changed some of the tick
	; attributes, so don't do any automatic setting of these.

	ATA_LABELS:1
	ATA_MAJOR_TICKS:1
	ATA_MINOR_TICKS:1
AxisTickAttributes	end

; Make it easy to convert between AxisTickAttributes and TickEnumFlags

.assert	mask ATA_MAJOR_TICKS eq mask TEF_MAJOR 
.assert	mask ATA_MINOR_TICKS eq mask TEF_MINOR

;-----------------------------------------------------------------------------
; Notification data sent to the controllers		
;-----------------------------------------------------------------------------

AxisFloatDiffs	record
	AFD_MIN:1
	AFD_MAX:1
	AFD_TICK_MAJOR_UNIT:1
	AFD_TICK_MINOR_UNIT:1
AxisFloatDiffs	end

AxisNotificationBlock	struct
	ANB_header		ChartNotifyBlockHeader
	ANB_attr		AxisAttributes
	ANB_attrDiffs		AxisAttributes
	ANB_xAxisTickAttr	AxisTickAttributes
	ANB_xAxisTickAttrDiffs 	AxisTickAttributes
	ANB_yAxisTickAttr	AxisTickAttributes
	ANB_yAxisTickAttrDiffs 	AxisTickAttributes
	ANB_min			FloatNum
	ANB_max			FloatNum
	ANB_tickMajorUnit	FloatNum
	ANB_tickMinorUnit	FloatNum
	ANB_floatDiffs		AxisFloatDiffs
AxisNotificationBlock	ends
	

;----------------------------------------------------------------------------
;				  Axis Class
;----------------------------------------------------------------------------
AxisClass	class	ChartObjectMultipleClass


;
; Constants which define the height/width of the parts of the axis.
; These have not been tested out, but they assume that the axes will
; look like this:
;	Horizontal axis:
;			|		|		|  <== above height
;		   -----+---------------+---------------+  <== one point high
;			|		|		|  <== above height
;				 Label		  Label
;
;	Vertical axis:
;		|
;		|
;	Label  -+-
;		|
;		|
;	Label  -+-
;		   ^^^
;		   /|\
;	left  / | \ left
;	width+  |  +width
;		|
;		   one
;		  point
;		  wide
;

;
; When text along a vertical value axis is rotated (and when text along a
; horizontal value axis is not) we need to guess how wide each label is
; likely to be. This constant defines the number of average character widths
; we feel will be required to hold these labels.
;
ROUGH_AXIS_CHARACTER_ESTIMATE	=	5


;-----------------------------------------------------------------------------
;				   Messages
;-----------------------------------------------------------------------------
MSG_AXIS_SET_ATTRIBUTES			message
; Modify the AxisAttributes
;
; Pass:		cl - bits to SET
;		ch - bits to CLEAR
;			
; Return:	cl - old attributes
;
; Destroyed:	nothing 
;


MSG_AXIS_SET_TICK_ATTRIBUTES		message
;
; Set the tick attributes 
;
;	PASS:	cl - AxisTickAttributes to SET
;		ch - AxisTickAttributes to CLEAR
;		dx - if zero -- this message should only be handled by
;			a HORIZONTAL (X) axis.
;		     If nonzero, this message should only be handled
;		     	by a VERTICAL (Y) axis
;
;
; 	RETURN: nothing 
;	DESTROYED: nothing 
;

MSG_AXIS_GET_INTERSECTION_POSITION	message
;
; Get the position that the related axis intersects this axis.
;	RETURN:	ax	= Intersection position,
;				Y position for vertical axis
;				X position for horizontal axis
;	DESTROYED: nothing 

MSG_AXIS_GET_INTERSECTION_REL_POSITION	message
;
; get the position that the related axis intersects this axis --
; relative to this axis' bounds.
;
; Pass:		nothing 
; Return:	ax - position wrt plot bounds.
; Destroyed: 	nothing



MSG_AXIS_GET_OUTSIDE_TOP		message
MSG_AXIS_GET_OUTSIDE_BOTTOM		message
MSG_AXIS_GET_OUTSIDE_LEFT		message
MSG_AXIS_GET_OUTSIDE_RIGHT		message
;
; Get the amount of the axis that is outside of the series area.
;	RETURN:	ax	= Space outside
;

MSG_AXIS_GET_PLOTTABLE_WIDTH	message
;
; Only applies to horizontal axes. This is the same as:
;		axis.width - (axis.outsideLeft + axis.outsideRight)
;
;	RETURN:	ax	= Width of the plottable area.
;

MSG_AXIS_GET_PLOTTABLE_HEIGHT	message
;
; Only applies to vertical axes. This is the same as:
;		axis.height - (axis.outsideTop + axis.outsideBottom)
;
;	RETURN:	ax	= Height of the plottable area.
;

MSG_AXIS_GET_PLOT_BOUNDS	message
; Return the axis' plot bounds - in ChartGroup coordinates.
;
;	PASS:	nothing
;	RETURN: ax, bp, cx, dx
;	DESTROYED: nothing 

MSG_AXIS_GET_PLOT_BOUNDS_INTERNAL message
; Get the plot bounds relative to the AXIS' upper left-hand corner.
;
; Context:	
; Source:	
; Destination:  
; Interception: 
;
; Pass:		nothing 
;			
; Return:	ax,bp,cx,dx - bounds
;
; Destroyed:	nothing 



MSG_AXIS_SET_RELATED_AXIS	message
;
; Set the related and other fields of the axis.
; Pass::	cx	= Related axis
; Destroyed: 	nothing
; Return: 	nothing
;

MSG_AXIS_GET_RELATED_AXIS	message
;
; Get the related axis
;	PASS: 	nothing 
;	RETURN: cx - related axis

MSG_AXIS_GET_RANGE		message
;
; Push the axis max and min on the floating point stack. (Max first)
;	RETURN:	Floating point stack contains:
;			AI_minimum	<- Top of stack
;			AI_maximum
;

MSG_AXIS_GET_VALUE_POSITION	message
;
; If passed to a VALUE axis, gets the floating-point value for the
; given series & category, and returns the position in PlotArea
; coordinaes.  If passed to a CATEGORY axis, returns the label
; position of the category number.
;
;	PASS:	cx - series #
;		dx - category #
;
;	RETURN:	ax - plottable position of number.
;

MSG_AXIS_VALUE_TO_POSITION	message
;
; Convert a floating point value to a plottable position
;	PASS:	(on FP stack) floating point number
;	RETURN; ax - plottable position
;

MSG_AXIS_REL_POSITION_TO_POSITION	message
;
; Convert a relative position to an absolute (plottable) position
;	PASS: (on FP stack) Floating point RelPosition
;	RETURN: ax - plottable position

MSG_AXIS_COMBINE_NOTIFICATION_DATA	message
; Update the passed notification block 
;	PASS:	dx:bp	- notification data block
;		cl	- AxisCombineFlags
; 	RETURN: cx, dx unchanged, bp - TraverseFlags updated
;	DESTROYED: nothing


;-----------------------------------------------------------------------------
;	GEOMETRY MESSAGES		
;-----------------------------------------------------------------------------
 

MSG_AXIS_GEOMETRY_PART_2		message
;
; Second-pass geometry calculation.  During this pass, axes resolve
; disputes between each-other.  Note:  The first pass is done during
; the regular old CHART_OBJECT_RECALC_SIZE
;
;	PASS:	nothing 
; 	RETURN: nothing
;	DESTROYED: nothing

;-----------------------------------------------------------------------------
;	MESSAGES DEALING WITH TITLES		
;-----------------------------------------------------------------------------

MSG_AXIS_GET_TITLE		message
; Return the chunk handle of the TitleClass object for this axis
;
;
;	PASS:	nothing
;	RETURN:	cx - chunk handle of title object
;	DESTROYED: nothing

MSG_AXIS_CREATE_TITLE		message
; Create a title object for this axis
;
;	PASS:	nothing 
;	RETURN: nothing 
;	DESTROYED: nothing 

MSG_AXIS_DESTROY_TITLE		message
; Destroy the title for this axis
;	PASS:	nothing 
;	RETURN: nothing 
;	DESTROYED: nothing 

MSG_AXIS_DRAW_GRID_LINES	message
; Draw grid lines
;	PASS:	cl - GridFlags
; 	RETURN: nothing
;	DESTROYED: nothing


;
;----------------------------------------------------------------------------
;			  Instance Variables
;----------------------------------------------------------------------------
	AI_attr			AxisAttributes
	AI_tickAttr		AxisTickAttributes

	; Keep these next 4 in the same order as in the
	; AxisNotifyBlock structure!

	AI_min		FloatNum	<0,0,0,0,<0,0>>
	AI_max		FloatNum	<0,0,0,0,<0,0>>
	AI_tickMajorUnit	FloatNum	<0,0,0,0,<0,0>>
	AI_tickMinorUnit	FloatNum	<0,0,0,0,<0,0>>

	AI_intersect	FloatNum	<0,0,0,0,<0,0>>
	; The position that the related axis intersects this axis.

	AI_related		lptr
	; Chunk handle of the related axis. The related axis is
	; the axis which crosses this one and with which we are plotting data.
	;
	
	AI_plotBounds	Rectangle
	; We need to save the bounds of the area where the actual plotting
	; will occur. These bounds are relative to the axis.

	AI_numLabels	word	
	; Number of labels.  For a value axis, this is equal to the
	; number of major ticks.  For a category axis, this is one
	; less.  It is stored here as a speed optimization.

	AI_maxLabelSize		Point
	; Maximum size (x,y) of an axis.  Used in geometry
	; calculations. 

	AI_title	nptr
	; Chunk handle of title object.  When the axis moves, notification
	; is sent to the title so that it can center itself properly.

	AI_group	optr
	; the "Group" object which contains the grobjects associated
	; with this axis.

AxisClass	endc

;-----------------------------------------------------------------------------
;	Category axis		
;-----------------------------------------------------------------------------

CategoryAxisClass	class AxisClass


;-----------------------------------------------------------------------------
;	Constants 		
;-----------------------------------------------------------------------------
AXIS_CATEGORY_MARGIN	=	15
 

;-----------------------------------------------------------------------------
;	Messages		
;-----------------------------------------------------------------------------

MSG_CATEGORY_AXIS_GET_CATEGORY_WIDTH	message
; Get the width of a category in document coordinates
;	PASS:	nothing 
;	RETURN: on FP stack:  category width
;
;	DESTROYED: nothing 

MSG_CATEGORY_AXIS_GET_CATEGORY_POSITION	message
; Return the (center) position of a category on the FP stack
;	PASS:	nothing 
;	RETURN: on FP stack:  category position
;
;	DESTROYED: nothing 


;-----------------------------------------------------------------------------
;	Instance data		
;-----------------------------------------------------------------------------
  

	; Margin is used (for category axes) to specify a margin of
	; white space between categories.  It's a percentage between 0
	; and 100.

	CAI_margin	byte

CategoryAxisClass	endc

;-----------------------------------------------------------------------------
;	Value axis		
;-----------------------------------------------------------------------------
ValueAxisClass	class	AxisClass
 
;-----------------------------------------------------------------------------
;	Constants
;-----------------------------------------------------------------------------
 
;-----------------------------------------------------------------------------
;	Messages		
;-----------------------------------------------------------------------------

MSG_VALUE_AXIS_SET_MIN	message
;	PASS:	
; 	RETURN: nothing
;	DESTROYED: nothing 

MSG_VALUE_AXIS_SET_MAX	message
;	PASS:	
; 	RETURN: nothing
;	DESTROYED: nothing

MSG_VALUE_AXIS_SET_MAJOR_TICK_UNIT	message
;	PASS: 	
; 	RETURN: nothing
;	DESTROYED: nothing

MSG_VALUE_AXIS_SET_MINOR_TICK_UNIT	message
;	PASS: 	
; 	RETURN: nothing
;	DESTROYED: nothing

MSG_VALUE_AXIS_SET_SERIES	message
; Set the range of series that this axis covers
;
;	PASS:	cl - first series
;		ch - last series (pass MAX_SERIES_COUNT for all)
;
; 	RETURN: nothing
;	DESTROYED: nothing


;-----------------------------------------------------------------------------
;	Instance data		
;-----------------------------------------------------------------------------
  

	; A value axis covers a range of series -- these are specified
	; here. 

	VAI_firstSeries	byte	
	VAI_lastSeries	byte
	VAI_diffOrder	word	; 10^(AI_max - AI_min)

ValueAxisClass	endc

ifdef	SPIDER_CHART
;-----------------------------------------------------------------------------
;	Spider axis		
;-----------------------------------------------------------------------------
SpiderAxisClass	class	ValueAxisClass
 
;-----------------------------------------------------------------------------
;	Constants
;-----------------------------------------------------------------------------
 
;-----------------------------------------------------------------------------
;	Messages		
;-----------------------------------------------------------------------------


;-----------------------------------------------------------------------------
;	Instance data		
;-----------------------------------------------------------------------------

	SAI_array	lptr

SpiderAxisType	etype	byte
	SAT_ARRAY	equ	offset SAI_array

	SAT_TITLES		equ	SAT_ARRAY

SpiderAxisClass	endc
endif

