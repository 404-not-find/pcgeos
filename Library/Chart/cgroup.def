COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		cgroup.def

AUTHOR:		John Wedgwood, Oct  8, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	10/ 8/91	Initial revision


DESCRIPTION:
	Definitions for the ChartGroup class
		
	$Id: cgroup.def,v 1.1 97/04/04 17:46:02 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;----------------------------------------------------------------------------
;			   Chart Group Class
;----------------------------------------------------------------------------
ChartGroupClass	class	ChartCompClass

; This record is used internally to describe the data block

ChartDataAttributes	record
	CDA_ROWS_ARE_SERIES:1
	;
	; If set then rows of data in the parameter block are considered
	; to be series. 
	; If clear then the rows are categories and the columns are series.

	CDA_OVERRIDE:1
	; Set if the CDA_ROWS_ARE_SERIES flag has been set by the user.

	CDA_HAS_SERIES_TITLES:1
	;
	; If set then the parameter block is considered to contain series
	; titles. These titles will be in the first row or the first column
	; depending on the setting of the CDA_ROWS_ARE_SERIES bit.

	CDA_HAS_CATEGORY_TITLES:1	; Set: Data contains category titles.
	;
	; If set then the parameter block is considered to contain category
	; titles. These titles will be in the first column or the first row
	; depending on the setting of the CDA_ROWS_ARE_SERIES bit.

	CDA_HAS_DUPLICATES:1
	;
	; Set if a duplicate number structure has been built out.


ChartDataAttributes	end



;-----------------------------------------------------------------------------
; This record determines the various objects that are optional parts
; of the chart.
;-----------------------------------------------------------------------------
 
ChartGroupFlags	record
	CGF_LEGEND:1
	; Set if legend exists

	CGF_LEGEND_VERTICAL:1
	; Set if legend is vertical (at right edge of chart).  If
	; clear, legend is horizontal (along bottom of chart)

	CGF_CHART_TITLE:1

	CGF_X_AXIS_TITLE:1
	CGF_Y_AXIS_TITLE:1
	:3

ChartGroupFlags	end

;-----------------------------------------------------------------------------
;	GridFlags - specify what type of grid is to be drawn		
;-----------------------------------------------------------------------------
GridFlags	record
	:4
	GF_MAJOR_X:1
	GF_MINOR_X:1
	GF_MAJOR_Y:1
	GF_MINOR_Y:1
GridFlags	end	


;-----------------------------------------------------------------------------
; Structures for enumerating over the data block		
;-----------------------------------------------------------------------------
 
DataEnumFlags	record
	DEF_ADJUST_FOR_SERIES_TITLES:1
	DEF_ADJUST_FOR_CATEGORY_TITLES:1
DataEnumFlags	end

DataEnumVars	struct
	DEV_firstSeries		byte
	DEV_lastSeries		byte
	DEV_firstCategory	word
	DEV_lastCategory	word
	DEV_enumFlags		DataEnumFlags
	DEV_callback		word
SBCS<	DEV_text		char MAX_CHART_TEXT_LENGTH+1 dup (?)	>
DBCS<	DEV_text		wchar MAX_CHART_TEXT_LENGTH+1 dup (?)	>
DataEnumVars	ends

;-----------------------------------------------------------------------------
; Notification structure sent from chart objects to controllers		
;-----------------------------------------------------------------------------
ChartCombineFlags	record
	CCF_FOUND:1
	CCF_FOUND_VALUE_AXIS:1
	CCF_FOUND_X_AXIS:1
	CCF_FOUND_Y_AXIS:1
	:4
ChartCombineFlags	end

;-----------------------------------------------------------------------------
;	This structure is the common header of any notification data
;	blocks created by the chart objects.		
;-----------------------------------------------------------------------------
 
ChartNotifyBlockHeader	struct
	CNBH_flags	ChartCombineFlags
ChartNotifyBlockHeader	ends

TypeNotificationBlock	struct
	TNB_header	ChartNotifyBlockHeader
	TNB_type	ChartType
	TNB_variation	ChartVariation
TypeNotificationBlock	ends

GroupNotificationFlags record
    GNF_CHART_TITLE_DIFF:1
    GNF_X_AXIS_TITLE_DIFF:1
    GNF_Y_AXIS_TITLE_DIFF:1

    :5
GroupNotificationFlags end

GroupNotificationBlock	struct
	GNB_header		ChartNotifyBlockHeader
	GNB_groupFlags		ChartGroupFlags
	GNB_groupFlagDiffs 	ChartGroupFlags
	GNB_gridFlags		GridFlags
	GNB_gridFlagDiffs	GridFlags
	GNB_type		ChartType

	GNB_notificationFlags	GroupNotificationFlags
	GNB_chartTitleSize	word
	GNB_xAxisTitleSize	word
	GNB_yAxisTitleSize	word
	GNB_xAxisTitle		nptr
	GNB_yAxisTitle		nptr
	GNB_chartTitle		label	char
GroupNotificationBlock	ends

;-----------------------------------------------------------------------------
;				   Messages
;-----------------------------------------------------------------------------
MSG_CHART_GROUP_SET_DOC_POSITION	message
; Set the position.  Unlike the internal chart objects, the group's
; position is a 32-bit value.
;
; Pass:	ss:bp - PointDWord position (32-bit coordinates)
; Return: nothing
; Destroyed: nothing

MSG_CHART_GROUP_GET_DOC_POSITION	message
; Return the document's 32-bit position.  
;
; Pass:		ss:bp - buffer of size PointDWord
; Return: 	ss:bp - buffer filled in
; Destroyed: 	nothing

MSG_CHART_GROUP_SET_CHART_TYPE		message
; Pass:  	cl - ChartType
;		ch - ChartVariation
; Return: 	nothing
; Destroyed: 	ax

MSG_CHART_GROUP_SET_DATA		message
; Set the parameters block
; Pass:		cx 	= parameters block handle
; Return: 	nothing
; Destroyed: 	ax

MSG_CHART_GROUP_GET_VALUE		message
;
; Get a number that corresponds to a given data point
; Pass:	cl	= Series number
;		dx	= Category number
; Return:	Number pushed on the floating point stack
;

MSG_CHART_GROUP_GET_SERIES_TITLE		message
;
; Get the text that corresponds to a series name.
; Pass:		cx	= Series number
;		dx:bp	= Buffer large enough to hold the text
;			  CHART_PARAMETER_MAX_TEXT_LENGTH chars/wchars.
; Return:	Buffer filled with the text
;

MSG_CHART_GROUP_GET_CATEGORY_TITLE	message
;
; Get the text that corresponds to a category name.
; Pass:		cx	= Category number
;		dx:bp	= Buffer large enough to hold the text
; Return:	Buffer filled with the text
;

MSG_CHART_GROUP_GET_SERIES_MAX_MIN	message
;
; Get the maximum and minimum values for a range of series.
;
; Pass:		cl - first series over which to get info
;		ch - last series
; Return:	IF VALUES AVAILABLE:
;			carry clear
;			Max and min pushed on floating point stack.
;			Max is pushed first, then min.
;		ELSE:
;			carry set
;

MSG_CHART_GROUP_GET_RANGE_MAX_MIN	message
; Return the MAX/MIN of a range of categories/series
;
; Pass:   	cl - first series
;		ch - last series
;		dx - first category
;		bp - last category
;
; Return: IF VALUES AVAILABLE:
;			carry clear
;			Max & Min pushed on FP stack
;			Max pushed first, then Min.
;		ELSE:
;			carry set

MSG_CHART_GROUP_GET_SERIES_COUNT		message
;
; Get the number of series
; Return:	cx	= Number of series
;

MSG_CHART_GROUP_GET_CATEGORY_COUNT	message
;
; Get the number of categories
; Return:	cx	= Number of categories
;

;-----------------------------------------------------------------------------
;	Grid Flags		
;-----------------------------------------------------------------------------

MSG_CHART_GROUP_SET_GRID_FLAGS		message
; change grid flags
; Pass:		cl - GridFlags that are set
;		bp - GridFlags that have been modified
;
; Return: nothing
;
; Destroyed: nothing

MSG_CHART_GROUP_GET_GRID_FLAGS		message
; return grid flags
; Pass:		nothing
; Return: 	cl - GridFlags
; Destroyed: 	nothing

MSG_CHART_GROUP_SET_GROUP_FLAGS		message
; Set title flags and instantiate or destroy title objects depending
; on the state of the flags
; Pass:		cl - ChartGroupFlags to set
;		ch - ChartGroupFlags to reset
; Return: nothing 

MSG_CHART_GROUP_GET_GROUP_FLAGS		message
; Pass: 	nothing 
; Return: 	cl - ChartGroupFlags
;

;-----------------------------------------------------------------------------
; Messages for combining attributes in preparation for updating the UI.	
;-----------------------------------------------------------------------------
 
MSG_CHART_GROUP_COMBINE_CHART_TYPE	message
;
; Compare the passed chart type to the object's internal values --
; If they're the same, return the passed value, otherwise return a
; value signalling that the two are different.  
; Pass:	cx - handle of TypeNotificationBlock

; Return: nothing 
; Destroyed: nothing 

MSG_CHART_GROUP_COMBINE_GROUP_FLAGS	message

; Pass:	cx- handle of GroupNotificationBlock
; Return: nothing
; Destroyed: nothing


;-----------------------------------------------------------------------------
;	GrObj messages		
;-----------------------------------------------------------------------------
 
MSG_CHART_GROUP_GET_DATA_ATTRIBUTES		message
; Fetch the chartDataAttributes
;
; Pass:		nothing
; Return: 	al - ChartDataAttributes
; Destroyed: 	nothing

MSG_CHART_GROUP_DESTROY				message
; Have the group remove itself from the body, destroy all grobjes
; associated with it, and then kill itself.  Not a very nice message.
; The ChartGroup sends this to itself when its grobj is deleted.  The
; ChartBody may also send this message to the group.
;
; Pass:		nothing 
; Return: 	nothing
; Destroyed: 	ax

MSG_CHART_GROUP_SET_TITLE_TEXT			message
; Sets the chart title
;
; Pass:		cx = block handle
; Return:	nothing
; Destroyed:	?

MSG_CHART_GROUP_UPDATE_TOP_GROBJ		message
; Update the group's ATTR_CHART_GROUP_TOP_GROBJ vardata, and return a
; value suitable for calling MSG_GB_ADD_GROBJ.
; Pass:		^lcx:dx - optr of new top grobj
; Return:	bp - parameter to pass to MSG_GB_ADD_GROBJ in bp
; 		(forward draw list position).

MSG_CHART_GROUP_SET_X_AXIS_TEXT			message
; Sets the chart x-axis title
;
; Pass:		cx = block handle
; Return:	nothing
; Destroyed:	?

MSG_CHART_GROUP_SET_Y_AXIS_TEXT			message
; Sets the chart y-axis title
;
; Pass:		cx = block handle
; Return:	nothing
; Destroyed:	?

;----------------------------------------------------------------------------
;	Instance data
;----------------------------------------------------------------------------


	CGI_docPosition PointDWord
	; The chart group has a 32-bit position in the document.

	CGI_data	word	
	; VM block handle of data block

	; These 2 must be next to each other
	CGI_type	ChartType		<>
	CGI_variation	ChartVariation		<>
	.assert (CGI_variation eq CGI_type +1)

	CGI_flags	ChartFlags		<>
	CGI_dataAttrs	ChartDataAttributes	<>
	CGI_groupFlags	ChartGroupFlags		<>
	CGI_gridFlags	GridFlags		<>

	CGI_legend	lptr
	; chunk handle of the legend object.  Stored here so we don't
	; have to go searching for it.

	CGI_buildChangeFlags	BuildChangeFlags	<>
	; flags are stored here when a build is pending

;-----------------------------------------------------------------------------
;	VARIABLE_DATA		
;-----------------------------------------------------------------------------

GROBJ_POSITION_UNKNOWN = GOBAGOR_LAST or mask GOBAGOF_DRAW_LIST_POSITION

TEMP_CHART_GROUP_TOP_GROBJ	vardata	word
; position of the "top" grobj in this chart.  This functionality was added
; after the chart stuff had already been released, otherwise I would
; have made it instance data.

ChartGroupClass	endc


