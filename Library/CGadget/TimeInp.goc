/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Interface Gadgets
MODULE:		Time Input Gadget
FILE:		uiTimeInput.asm

AUTHOR:		Skarpi Hedinsson, Jul  6, 1994


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 6/94   	Initial revision
	jfh	08/10/04		port to GOC


DESCRIPTION:
	Implementation of TimeInputClass.
	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <Objects\cgadget.goh>
@include "externs.goh"

void TimeInputUpdateText(TimeStruct time, optr tiText);
void TimeInputFormatTime(TimeStruct time, char *buf);
void SendTIActionMessage(optr tiObj, Message msg, optr dest);
void TISendApplyMsg(optr tiObj, Message msg, optr dest);
Boolean TIParseTimeStringIfModified(optr tiObj);

/* a lonely global */
optr g_tiText = 0;
char g_fmtTStr[DATE_TIME_FORMAT_SIZE];

@classdecl TimeInputTextClass;

@classdecl TimeInputClass;

/*----------------------------------------------------------------------

MESSAGE:	MSG_GEN_CONTROL_GET_INFO for TimeInputClass

DESCRIPTION:	Return group

PASS:
	*ds:si 	- instance data
	es 	- segment of TimeInputClass
	ax 	- The message
	cx:dx	- GenControlBuildInfo structure to fill in

	GenControlBuildInfo *info
RETURN:
	cx:dx - list of children

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	10/31/91		Initial version
	jfh	08/10/04		port to GOC - melded gadgets & docs controller example
-----------------------------------------------------------------------------*/
@method TimeInputClass, MSG_GEN_CONTROL_GET_INFO
{
 /* Features information constants */
 static const  GenControlChildInfo TIC_childList[] = {
		{@TimeInputGroup, TIF_DATE, GCCF_ALWAYS_ADD}};

 /* The order of this list is actually backwards from the
  * record it reflects. */
 static const  GenControlFeaturesInfo TIC_featuresList[] = {
		{@TimeInputGroup, @TimeInputName, 0}};

 /* Our constant for the GenControlBuildInfo structure.
  * Fields with a marker to the left of their names are
  * filled in dynamically by the handler following the
  * constant definition. */
 static const  GenControlBuildInfo TIC_dupInfo = {
			GCBF_NOT_REQUIRED_TO_BE_ON_SELF_LOAD_OPTIONS_LIST,	/* GCBI_flags */
			0, 					/* GCBI_initFileKey */
			0, 					/* GCBI_gcnList */
			0, 					/* GCBI_gcnCount */
			0, 					/* GCBI_notificationList */
			0,						/* GCBI_notificationCount */
			0, 					/* GCBI_controllerName */
/* ## */ NullHandle,			/* GCBI_dupBlock */
			TIC_childList,		/* GCBI_childList */
			ARRAY_LEN(TIC_childList, GenControlChildInfo),	/* GCBI_childCount */
			TIC_featuresList,			/* GCBI_featuresList */
			ARRAY_LEN(TIC_featuresList, GenControlFeaturesInfo), /* GCBI_featuresCount */
			TI_DEFAULT_FEATURES,		/* GCBI_features */
			0, 					/* GCBI_toolBlock */
			0, 					/* GCBI_toolList */
			0,						/* GCBI_toolCount */
			0, 					/* GCBI_toolFeaturesList */
			0,						/* GCBI_toolFeaturesCount */
			0 						/* GCBI_toolFeatures */
			};


	/* Here is the code that fills in the above missing fields and
	 * returns the proper structure. */

	/* Copy the structure containing most of the correct information. */
	memcpy(info, MemLockFixedOrMovable(&TIC_dupInfo), sizeof(GenControlBuildInfo));
	MemUnlockFixedOrMovable(&TIC_dupInfo);

	/* Fill the remaining field in manually. */
	info->GCBI_dupBlock = HandleOf(@TimeInputGroup);

}

/*----------------------------------------------------------------------
MESSAGE:	 MSG_GEN_CONTROL_GENERATE_UI for TimeInputClass

DESCRIPTION:	This message is subclassed to set the monikers of
		the filled/unfilled items

PASS:
	*ds:si - instance data
	es - segment of TimeInputClass
	ax - The message

RETURN:
	nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Skarpi	06/22/94	Initial version
   	PBuck	03/24/95	Added ATTR_DATE_INPUT_TARGETABLE handler
	jfh	8/23/04	port to GOC
-----------------------------------------------------------------------------*/
@method TimeInputClass, MSG_GEN_CONTROL_GENERATE_UI
{
 GenControlGetFeaturesReturn	features;
 optr				tiObj;


	@callsuper();

	/* we'll need the optr of the text obj */
	tiObj = @call oself::MSG_GEN_FIND_CHILD_AT_POSITION(0);
	g_tiText = @call tiObj::MSG_GEN_FIND_CHILD_AT_POSITION(0);

	/* Set up the text object to be targetable if so specified */
	if (ObjVarFindData(oself, ATTR_TIME_INPUT_TARGETABLE)) {
		@send g_tiText::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		@send g_tiText::MSG_GEN_SET_ATTRS(GA_TARGETABLE, 0);
		@send g_tiText::MSG_GEN_SET_USABLE(VUM_NOW);
		}

	/* If the do draw/don't draw feature isn't set, then we have no worries */
	@call oself::MSG_GEN_CONTROL_GET_NORMAL_FEATURES(&features);
	if (!features.GCSR_features & TIF_DATE)
		return;

	/* Get the time format. */
	LocalGetDateTimeFormat(g_fmtTStr, DTF_HM);

	/* If the time in instance data is all -1 then we set the time to
		the current time.  Else we display the time in instance data. */
	if (pself->TII_time.T_hours == 0xff)
		@send oself::MSG_TIME_INPUT_SET_CURRENT_TIME();
	else {
		/* Set the GenText to display the time in TII_time. */
		TimeInputUpdateText(pself->TII_time, g_tiText);
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TISpecActivateObjectWithMnemonic
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	This message is sent whenever the user enters the keyboard
		mnemonic for this control.  We call superclass if the 
		activation was a success when we pass the the focus and
		target to the GenText.

CALLED BY:	MSG_SPEC_ACTIVATE_OBJECT_WITH_MNEMONIC
PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
		es 	= segment of TimeInputClass
		ax	= message #
		cx	= character value
		dl	= CharFlags
		dh	= ShiftState (ModBits)
		bp low	= ToggleState
		bp high = scan code
RETURN:		carry set if mnemonic found
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/18/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
TISpecActivateObjectWithMnemonic	method dynamic TimeInputClass, 
					MSG_SPEC_ACTIVATE_OBJECT_WITH_MNEMONIC
		.enter
	;
	; Call superclass.  If the mnemonic is a match the carry is set.
	;
		mov	di, offset TimeInputClass
		call	ObjCallSuperNoLock
		jnc	done

	;
	; We have a match.  Send MSG_GEN_MAKE_FOCUS to the GenText object.
	;
		mov	di, offset TIText
		mov	ax, MSG_GEN_MAKE_FOCUS
		call	ObjCallControlChild
		stc					; return carry

done:
		.leave
		ret
TISpecActivateObjectWithMnemonic	endm


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TIMetaGainedFocusExcl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Pass focus on to the GenText.  If we don't do this,
		then explicitly sending focus grab to us won't work.

CALLED BY:	MSG_META_GAINED_FOCUS_EXCL
PASS:		*ds:si	= TimeInputClass object
		es 	= segment of TimeInputClass
		ax	= message #
RETURN:		nothing
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	1/30/95   	Initial version
	jfh	8/27/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_META_GAINED_FOCUS_EXCL
{

	@callsuper();

	/* Pass focus on to text obj.  */
	@send g_tiText::MSG_META_GRAB_FOCUS_EXCL();

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TITimeIncDec
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Increment/decrement the time by incrementValue or
		incrementAltValue.

CALLED BY:	MSG_TI_TIME_INC, MSG_TI_TIME_DEC

PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
		ax	= message #
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	Updates the TII_time instance data.

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	6/27/94   	Initial version
	jfh	8/24/04	port to GOC
	jfh	10/12/04	added selectable hours etc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TI_TIME_INC, MSG_TI_TIME_DEC
{
 VisTextRange	range;
 char				timeStr[25], rangeStr[25];
 Boolean			hr24 = TRUE;
 word				type, incVal, len, i;


	/* First parse the text in the text object and save the data to
		instance data. */
	@call oself::MSG_TI_PARSE_TIME_STRING();

	/* see if we're in 12 or 24 hour time format */
	if (strlen(g_fmtTStr) > 9) hr24 = FALSE;

	/* lets let the user inc/dec HH, MM, AMPM separately.  If there is no
		selection we'll do the minutes inc value, but if h, m or ampm is selected
		we'll do just that one. */
	@call g_tiText::MSG_VIS_TEXT_GET_SELECTION_RANGE(&range);
	if (range.VTR_start != range.VTR_end) {
		/* first an error trap - to make sure a separator isn't selected
			in the range */
		len = @call g_tiText::MSG_VIS_TEXT_GET_SELECTION_PTR(rangeStr);
		for (i = 0; i < len; i++) {
			if (rangeStr[i] == g_fmtTStr[4]) {
				/* show an error message */
				NotifyDBox (0, @TimeSelectErrorMessage);
				@send g_tiText::MSG_VIS_TEXT_SELECT_END();
				return;
				}
			}
		/* grab the time */
		len = @call g_tiText::MSG_VIS_TEXT_GET_ALL_PTR(timeStr);
		/* now we need to figure out what time format we have -
			it will be |xH(h)|:|xm| |AP| with or without the AMPM
			indicator and maybe in 24 hour mode */
		if (!range.VTR_start) {
			type = ID_HOUR;
			}
		else if ((range.VTR_end == len) && (!hr24)) {
			type = ID_AMPM;
			}
		else {
			type = ID_MINUTE;
			incVal = 1;
			}
		}
	else {
		/* no selection so we do minutes increment */
		type = ID_INC;
		incVal = pself->TII_incrementValue;
		}

	if (type == ID_INC || type == ID_MINUTE) {
		/* Increment/decrement the minute by incVal */
		if (message == MSG_TI_TIME_DEC) {
			/* Decrement minute */
			if (incVal <= pself->TII_time.T_minutes)  {
				/* subtract it */
				pself->TII_time.T_minutes -= incVal;
				}
			else {
				/* borrow from hours */
				pself->TII_time.T_minutes = pself->TII_time.T_minutes + 60 - incVal;
				if (!pself->TII_time.T_hours)
					pself->TII_time.T_hours = 23;
				else
					pself->TII_time.T_hours--;
				}
			}
		else {
			/* Increment minute  */
			pself->TII_time.T_minutes += incVal;
			if (pself->TII_time.T_minutes > 59) {
				pself->TII_time.T_minutes -= 60;
				pself->TII_time.T_hours += 1;
				if (pself->TII_time.T_hours > 23)
					pself->TII_time.T_hours = 0;
				}
			}
		} /* end of no selection increment */
	else if (type == ID_HOUR) {
		/* Inc/dec the hour */
		if (message == MSG_TI_TIME_DEC) {
			/* Decrement */
			if (!pself->TII_time.T_hours)
				pself->TII_time.T_hours = 23;
			else
				pself->TII_time.T_hours--;
			}
		else {
			/* Increment */
			pself->TII_time.T_hours++;
			if (pself->TII_time.T_hours > 23)
				pself->TII_time.T_hours = 0;
			}
		}
	else {
		/* toggle the AM/PM indicator */
		pself->TII_time.T_hours += 12;
		if (pself->TII_time.T_hours > 23)
			pself->TII_time.T_hours -= 24;
		}

	/* Display the new time. */
	TimeInputUpdateText(pself->TII_time, g_tiText);

	/* if there was a selection, re-select it */
	if (range.VTR_start != range.VTR_end) {
		/* get the newly displayed time */
		len = @call g_tiText::MSG_VIS_TEXT_GET_ALL_PTR(timeStr);
		/* if hours were selected */
		if (type == ID_HOUR) {
			for (i = 0; i < len; i++) {
				if (timeStr[i] == g_fmtTStr[4]) {
					/* we're at the separator */
					range.VTR_end = i;
               range.VTR_start = 0;
					break;
					}
				}
			}
		/* if minutes were selected */
		else if (type == ID_MINUTE) {
			for (i = 0; i < len; i++) {
				if (timeStr[i] == g_fmtTStr[4]) {
					/* we're at the separator */
					range.VTR_start = i + 1;
					break;
					}
				}
			for (i = range.VTR_start; i < len; i++) {
				if (timeStr[i] < '0' || timeStr[i] > '9') {
					range.VTR_end = i;
					break;
					}
				}
			}
		/* if AM/PM was selected */
		else if (type == ID_AMPM) {
			range.VTR_end = len;
			range.VTR_start = len -2;
			}
		@send g_tiText::MSG_VIS_TEXT_SELECT_RANGE(range.VTR_end, range.VTR_start);
		}  /* end of re-select range if */

	/* Send message letting the output know the time has changed */
	if (pself->TII_actionMsg)
		SendTIActionMessage(oself, pself->TII_actionMsg, pself->GCI_output);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TIParseTimeStringIfModified
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	If the text has been modified by the user,
		then re-parse the string.

CALLED BY:	
PASS:		*ds:si = DateInput object
RETURN:		carry set if string not valid.

	GOC
	FALSE if string not valid

		ds fixed up
DESTROYED:	nothing
SIDE EFFECTS:	

		This could move the object block around.

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CT	6/ 9/95    	Initial version
	jfh	8/28/04	port to goc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
Boolean TIParseTimeStringIfModified(optr tiObj)
{
 Boolean		valid = FALSE;


	if (@call g_tiText::MSG_GEN_TEXT_IS_MODIFIED())  {
		valid = @call tiObj::MSG_TI_PARSE_TIME_STRING();
		}
	return (valid);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TISetCurrentTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sets the TII_time value to be the current system time.

CALLED BY:	MSG_TIME_INPUT_SET_CURRENT_TIME
PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
		ds:bx	= TimeInputClass object (same as *ds:si)
		es 	= segment of TimeInputClass
		ax	= message #
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/19/94   	Initial version
	jfh	8/24/04	ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_SET_CURRENT_TIME
{
 TimerDateAndTime		time;


	/* Get the current time */
	TimerGetDateAndTime(&time);

	/* Copy the current date to instance data */
	pself->TII_time.T_hours = time.TDAT_hours;
	pself->TII_time.T_minutes = time.TDAT_minutes;
	pself->TII_time.T_seconds = time.TDAT_seconds;

	/* Update the GenText with the current date  */
	TimeInputUpdateText(pself->TII_time, g_tiText);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TISetTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Message sent to the TimeInput to change the current
		displayed time.

CALLED BY:	MSG_TIME_INPUT_SET_TIME
PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
		ds:bx	= TimeInputClass object (same as *ds:si)
		es 	= segment of TimeInputClass
		ax	= message #
		ch	= hours
		dl	= minutes
		dh	= seconds
		GOC
		(sbyte hours, sbyte minutes, sbyte seconds)
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 1/94   	Initial version
	jfh	8/27/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_SET_TIME
{


	/* First change the instance data TII_time to reflect the new time */
	pself->TII_time.T_hours = hours;
	pself->TII_time.T_minutes = minutes;
	pself->TII_time.T_seconds = seconds;

	/* Now update the time in the GenText */
	TimeInputUpdateText(pself->TII_time, g_tiText);


}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TIGetTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Returns the current time of the TimeInput.

CALLED BY:	MSG_TIME_INPUT_GET_TIME
PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
		es 	= segment of TimeInputClass
		ax	= message #

		GOC
		(TimeStruct *retVal)
RETURN:		ch	= hour
		dl	= minutes
		dh	= seconds

		GOC
		filled in retVal
DESTROYED:	cl
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 1/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_GET_TIME
{

	/* Act like a GenValue: first expand out the currently entered
		thing.  But only if we are built out, and the text has been
		modified. */
//	TIParseTimeStringIfModified(oself);

	/* Get the time from instance data */
	retVal->T_hours = pself->TII_time.T_hours;
	retVal->T_minutes = pself->TII_time.T_minutes;
	retVal->T_seconds = pself->TII_time.T_seconds;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TITimeInputRedisplayTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Forces the time to be redisplayed, using the current
		time format.

CALLED BY:	MSG_TIME_INPUT_REDISPLAY_TIME
PASS:		*ds:si	= TimeInputClass object
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CT	9/29/94   	Initial version
	jfh	8/27/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_REDISPLAY_TIME
{


	TimeInputUpdateText(pself->TII_time, g_tiText);
 
}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TITimeInputSetIncrementValue
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sets the TII_incrementValue which is used when incrementing
		or decrementing the time.

CALLED BY:	MSG_TIME_INPUT_SET_INCREMENT_VALUE
PASS:		ds:di	= TimeInputClass instance data
		cx	= Increment value
		GOC
		word increment
RETURN:		nothing
DESTROYED:	
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 8/94   	Initial version
	jfh	8/26/04	ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_SET_INCREMENT_VALUE
{

	/* Set TII_incrementValue  */
	pself->TII_incrementValue = increment;

}

/* @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TITimeInputGetIncrementValue
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Returns the TII_incrementValue used when incrementing or
		decrementing the time.

CALLED BY:	MSG_TIME_INPUT_GET_INCREMENT_VALUE
PASS:		ds:di	= TimeInputClass instance data
RETURN:		cx	= Increment value
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 8/94   	Initial version
	jfh	8/26/04	ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TIME_INPUT_GET_INCREMENT_VALUE
{

	/* Return TII_incrementValue */
	return(pself->TII_incrementValue);

}

/*@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SendTIActionMessage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sends the action message (TII_actionMsg) to the output 
		(GCI_output).

CALLED BY:	(INTERNAL) TIMetaTextLostFocus, TITimeIncDec
PASS:		*ds:si	= object

	GOC - need some parameters passed in
			(optr tiObj, Message msg, optr dest)


RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	6/30/94    	Initial version
	jfh	8/27/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void SendTIActionMessage(optr tiObj, Message msg, optr dest)
{
 EventHandle	event;
 TimeStruct		time;


	@send tiObj::MSG_GEN_MAKE_APPLYABLE();

	/* get the updated time */
   @call tiObj::MSG_TIME_INPUT_GET_TIME(&time);

	/* record and send the message */
	event = @record {TIME_INPUT_ACTION} NullOptr::msg(time.T_hours, time.T_minutes,
							time.T_seconds);
	@call tiObj::MSG_GEN_OUTPUT_ACTION(event, dest);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TIParseTimeString
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Parses the time string in TIText and stores the time value
		in TII_time.

CALLED BY:	MSG_TI_PARSE_TIME_STRING
PASS:		*ds:si	= TimeInputClass object
		ds:di	= TimeInputClass instance data
RETURN:		carry	= set if parse not valid
				GOC - TRUE if parse OK
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/19/94   	Initial version
	jfh	8/25/04	ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TI_PARSE_TIME_STRING
{
 DateTimeBuffer		timeBuf;
 TimerDateAndTime		tTime;
 Boolean					parseOK;


	/* Get the text from the GenText */
	@call g_tiText::MSG_VIS_TEXT_GET_ALL_PTR(timeBuf);

	/* Parse the text into a valid time  */
	parseOK = LocalParseDateTime(timeBuf, DTF_HM, &tTime);


	if (parseOK == -1) {
		/* Update the instance data with the new time...  We'll make
			seconds 0 since we parsed with only H & M */
		pself->TII_time.T_hours = tTime.TDAT_hours;
		pself->TII_time.T_minutes = tTime.TDAT_minutes;
		pself->TII_time.T_seconds = 0;

		@send g_tiText::MSG_GEN_TEXT_SET_MODIFIED_STATE(TRUE);

		return(TRUE);
		}

	else {
/*notValid:
	;
	; Time in GenText is not a valid date, we therefore do not update
	; the TII_time.  First we will sound the alarm indicating the date
	; is not valid.
	;
		mov	ax, SST_ERROR
		call	UserStandardSound

	;
		/* Restore the "old" date in the GenText object. */
		TimeInputUpdateText(pself->TII_time, g_tiText);

		/* The parse was no good so we return FALSE  */
		return(FALSE);
		}


}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TimeInputUpdateText
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Displays the current time in the TIText GenText object.

CALLED BY:	(INTERNAL) TIMetaNotify, TIParseTimeString,
		TISetCurrentTime, TISetTime, TITimeIncDec,
		TITimeInputRedisplayTime, TimeInputGenerateUI
PASS:		*ds:si	- Object
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
	Since in GOC, routines can't directly get to instance & var data
	I've added that info as arguements to this routine
				TimeStruct		time,
				optr				tiText,
				TimeInputType	type

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 1/94    	Initial version
	jfh	8/24/04	Ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void TimeInputUpdateText(TimeStruct time, optr tiText)
{
 DateTimeBuffer		timeBuf;


	/* Format the date according to the system defaults */
	TimeInputFormatTime(time, &timeBuf);

	/* Now update the GenText with the short date */
	@call tiText::MSG_VIS_TEXT_REPLACE_ALL_PTR(timeBuf, 0);

	/* Reset the modified state of the text */
	@send tiText::MSG_GEN_TEXT_SET_MODIFIED_STATE(TRUE);


}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TimeInputFormatTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Formats the time correctly depending on the TII_timeType.

CALLED BY:	(INTERNAL) IntervalAutoCompletionLow, TimeAutoCompletion,
		TimeInputUpdateText
PASS:		*ds:si	= TimeInput Object
		es:di   = buffer for text
		ch	= Hours (0-23)
		dl	= Minutes (0-59)
		dh	= Seconds (0-59)
RETURN:		cx	= length of string
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
	Since in GOC, routines can't directly get to instance & var data
	I've added that info as arguements to this routine
				TimeStruct		time,
				TimeInputType	type,
				char				*buf)

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/13/94    	Initial version
	jfh	8/24/04	Ported to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void TimeInputFormatTime(TimeStruct time, char *buf)
{
 TimerDateAndTime	tTime;


	/* Format the time */
	tTime.TDAT_hours = time.T_hours;
	tTime.TDAT_minutes = time.T_minutes;
	tTime.TDAT_seconds = time.T_seconds;

	LocalFormatDateTime(buf, DTF_HM, &tTime);
}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TIMetaTextLostFocus
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sent whenever the text object loses the focus.

CALLED BY:	MSG_META_TEXT_LOST_FOCUS
PASS:		*ds:si	= TimeInputClass object
RETURN:		nothing
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		Get the date out of the GenText and store it in the
		DateInput instance data.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/ 5/94   	Initial version
	jfh	8/27/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_META_TEXT_LOST_FOCUS
{


	/* Act like a GenValue: only send out the apply message if
		the text has been modified. */
	if (!@call g_tiText::MSG_GEN_TEXT_IS_MODIFIED()) return;

	/* Don't send apply message if we have
		ATTR_DONT_SEND_APPLY_MSG_ON_TEXT_LOST_FOCUS set. */
	if (!ObjVarFindData(oself, ATTR_DONT_SEND_APPLY_MSG_ON_TEXT_LOST_FOCUS)) {

		/* Everything's fine.  Send the apply message. */
		if (pself->TII_actionMsg)
			TISendApplyMsg(oself, pself->TII_actionMsg, pself->GCI_output);
		}
	return;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TITextApply
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Respond to internal text object's apply message --
		send message to output.

CALLED BY:	MSG_TI_TEXT_APPLY
PASS:		*ds:si	= TimeInputClass object
RETURN:		nothing
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	2/ 3/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method TimeInputClass, MSG_TI_TEXT_APPLY
{

	if (pself->TII_actionMsg)
		TISendApplyMsg(oself, pself->TII_actionMsg, pself->GCI_output);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TISendApplyMsg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Complete text and send out the apply message.

CALLED BY:	(INTERNAL) TIMetaTextLostFocus, TITextApply
PASS:		*ds:si	= TimeInputClass object
RETURN:		nothing
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	2/ 3/95    	Initial version
	jfh	8/28/04	port to GOC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void TISendApplyMsg(optr tiObj, Message msg, optr dest)
{

	/* Parse the time string */
	if (TIParseTimeStringIfModified(tiObj)) {
		/* Let the output know that a new time has been set. */
		if (msg) {
			SendTIActionMessage(tiObj, msg, dest);
			}
		}

}

