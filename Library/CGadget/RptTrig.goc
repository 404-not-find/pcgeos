/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Interface Gadgets
MODULE:		Repeat trigger gadget
FILE:		uiRepeatTrigger.asm

AUTHOR:		Skarpi Hedinsson, Jul 12, 1994

ROUTINES:
	Name			Description
	----			-----------
    INT SetUpRepeatAction       Starts the repeat timer.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/12/94   	Initial revision
	jfh	8/13/04	port to GOC

DESCRIPTION:
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <Objects\cgadget.goh>

@classdecl RepeatTriggerClass;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTMetaStartSelect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Subclass this message to set up the repeat timer.

CALLED BY:	MSG_META_START_SELECT
PASS:		*ds:si	= RepeatTriggerClass object
		es 	= segment of RepeatTriggerClass
		ax	= message #
RETURN:		ax	= MRF_PROCESSED

 * PARAMETERS:       MouseReturnParams *retVal
 *			  	 sword xPosition,
 *			   	 sword yPosition,
 *			   	 word inputState;

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/12/94   	Initial version
	jfh	8/13/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_META_START_SELECT
{
 word		count, id;
 TimerHandle	tHan;


	/* Call superclass first. */
	@callsuper();

	/* Setup the repeat action of the trigger (made in-line vs routine) */
	/* Set up a delay.  For the first few repeats, we'll repeat slowly; then
		we'll crank it up.  */
	if (pself->RTI_repeatCount)
		count = @call oself::MSG_REPEAT_TRIGGER_GET_REPEAT_RATE(pself->RTI_repeatCount);
	else
		count = INITIAL_REPEAT_DELAY;
	tHan = TimerStart(TIMER_EVENT_ONE_SHOT, oself, count, MSG_RT_REPEAT_ACTION, 0, &id);
	/* Save away the timer handle and ID so we can stop the timer later on. */
	pself->RTI_timerID = id;
	pself->RTI_timerHandle = tHan;
	pself->RTI_repeatCount++;

	/* Setup return values. */
	retVal->flags = MRF_PROCESSED;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTRepeatAction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Called by the repeat timer to send the action message to
		the GenTrigger.

CALLED BY:	MSG_RT_REPEAT_ACTION
PASS:		*ds:si	= RepeatTriggerClass object
		ds:di	= RepeatTriggerClass instance data
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/12/94   	Initial version
	jfh	8/13/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_RT_REPEAT_ACTION
{
 word		count, id;
 TimerHandle	tHan;


	/* Send action message and repeat the action if the timer has
		not been stopped by MSG_META_END_SELECT.  */
	if (pself->RTI_timerHandle)  {

		/* Send MSG_GEN_TRIGGER_SEND_ACTION message to the object which
			in turn sends out the action message.  */
		@send oself::MSG_GEN_TRIGGER_SEND_ACTION(FALSE);
		/*	call	SetUpRepeatAction
		/* Set up a delay.  For the first few repeats, we'll repeat slowly; then
			we'll crank it up.  */
		if (pself->RTI_repeatCount)
			count = @call oself::MSG_REPEAT_TRIGGER_GET_REPEAT_RATE(pself->RTI_repeatCount);
		else
			count = INITIAL_REPEAT_DELAY;
		tHan = TimerStart(TIMER_EVENT_ONE_SHOT, oself, count, MSG_RT_REPEAT_ACTION, 0, &id);
		/* Save away the timer handle and ID so we can stop the timer later on. */
		pself->RTI_timerID = id;
		pself->RTI_timerHandle = tHan;
		pself->RTI_repeatCount++;
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTMetaEndSelect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Subclass to turn of the repeat timer.

CALLED BY:	MSG_META_END_SELECT
PASS:		*ds:si	= RepeatTriggerClass object
		ds:di	= RepeatTriggerClass instance data
		ds:bx	= RepeatTriggerClass object (same as *ds:si)
		es 	= segment of RepeatTriggerClass
		ax	= message #

 * PARAMETERS:       MouseReturnParams *retVal
 *			  	 sword xPosition,
 *			   	 sword yPosition,
 *			   	 word inputState;

RETURN:		nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/12/94   	Initial version
	jfh	8/13/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass,
					MSG_META_END_SELECT/*,
					MSG_META_LOST_DEFAULT_EXCL,
					MSG_META_LOST_MOUSE_EXCL  */
{


	/* Stop the repeat timer  */
	TimerStop(pself->RTI_timerHandle, pself->RTI_timerID);
	pself->RTI_repeatCount = 0;
	pself->RTI_timerHandle = 0;

	/* Call superclass */
	@callsuper();

	/* Setup return values */
	retVal->flags = MRF_PROCESSED;

}

@method RepeatTriggerClass, MSG_META_LOST_DEFAULT_EXCL,
					MSG_META_LOST_MOUSE_EXCL  
{


	/* Stop the repeat timer  */
	TimerStop(pself->RTI_timerHandle, pself->RTI_timerID);
	pself->RTI_repeatCount = 0;
	pself->RTI_timerHandle = 0;

	/* Call superclass */
	@callsuper();

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTMetaPtr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Stop sending actions if mouse moves from the bounds of
		the trigger.  We do this here, 'cuz otherwise these
		objects won't work in the Jedi menu bar. 

CALLED BY:	MSG_META_PTR
PASS:		*ds:si	= RepeatTriggerClass object
		es 	= segment of RepeatTriggerClass
		ax	= message #
		cx	= X position of mouse
		dx	= Y position of mouse
		bp	= other stuff superclass cares about
RETURN:		nothing

 * PARAMETERS:  
 *      void (word xPosition, word yPosition, word inputState,
 *                                      MouseReturnParams *retVal)
 *    

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	2/ 7/95   	Initial version
	jfh	8/13/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_META_PTR
{
 Rectangle	rect;


	@call oself::MSG_VIS_GET_BOUNDS(&rect);
	if ((xPosition < rect.R_left) ||
		(xPosition > rect.R_right) ||
		(yPosition < rect.R_top) ||
		(yPosition > rect.R_bottom)) {

		/* We are outside, so the user has moved off of the trigger.
			Stop the actions, if the timer's running.  */
		if (pself->RTI_timerHandle)  {
			TimerStop(pself->RTI_timerHandle, pself->RTI_timerID);
			pself->RTI_repeatCount = 0;
			pself->RTI_timerHandle = 0;
			retVal->flags = MRF_PROCESSED;
			return; /* don't callsuper */
			}
		}

	@callsuper();
	retVal->flags = MRF_PROCESSED;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTGetRepeatRate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Returns the repeat rate of the trigger.

CALLED BY:	MSG_REPEAT_TRIGGER_GET_REPEAT_RATE
PASS:		*ds:si	= RepeatTriggerClass object
		ds:di	= RepeatTriggerClass instance data
		ds:bx	= RepeatTriggerClass object (same as *ds:si)
		es 	= segment of RepeatTriggerClass
		ax	= message #
		cx	= number of repeats so far
		word repeats (so far)

RETURN:		cx	= repeat rate to use

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SH	7/12/94   	Initial version
	jfh	8/13/04	port to GOC - plus did some fixing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_REPEAT_TRIGGER_GET_REPEAT_RATE
{

	/* Check if we are in accelerate mode? */
	if (pself->RTI_accelerate) {
		if (repeats > 3) {
			/* reset the repeat count */
			pself->RTI_repeatCount = 1;
			/* speed up the repeat rate - maybe */
			if (pself->RTI_repeatRate == MINIMUM_REPEAT_DELAY)
				return (pself->RTI_repeatRate);
			else {
				pself->RTI_repeatRate -= 5;
            return (pself->RTI_repeatRate);
				}
			}
		}
	return (pself->RTI_repeatRate);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTSpecNavigationQuery
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Make sure we don't get focus if hint tells us so.

CALLED BY:	MSG_SPEC_NAVIGATION_QUERY
PASS:		*ds:si	= RepeatTriggerClass object
		es 	= segment of RepeatTriggerClass
		ax	= message #
		^lcx:dx	= object which originated this query
		bp	= NavigateFlags (see below)
RETURN:		carry set if object to give focus to, with:
			^lcx:dx	= object which is replying
		else
			^lcx:dx = next object to query
		bp	= NavigateFlags (will be altered as message is
			  passed around)
		al	= set if the object is focusable via backtracking
			  (i.e. can take the focus if it is previous to the
			  originator in backwards navigation)
		GOC
			NavigationQueryParams *retValue = bpaxdxcx,
			optr queryOrigin = cx:dx, 
			NavigationFlags navFlags = bp) = carry;
typedef struct {
	word	NQP_navFlags;
	byte	NQP_backtrackFlag;
	byte	NQP_unused;
	optr	NQP_nextObject;
} NavigationQueryParams;

DESTROYED:	everything
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	1/30/95   	Initial version
	jfh	8/19/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_SPEC_NAVIGATION_QUERY
{
 NavigateCommonParams	params;


	if (!ObjVarFindData(oself, HINT_REPEAT_TRIGGER_NOT_FOCUSABLE)) {
		@callsuper();
		/*return;*/
		}
	else {
		/* Do magic that will cause us to pass the focus along to a more
			deserving object. */

		/* fill in the params */
		params.NCP_object = queryOrigin;
		params.NCP_navFlags = navFlags;
		params.NCP_navCommonFlags = 0;
		params.NCP_genPart = 0;
		params.NCP_backtrackFlag = 0;

		/*call	VisNavigateCommon   */
		/* this msg is the GOC equivalent of the VisNavigateCommon ESP routine */
		@send oself::MSG_SPEC_NAVIGATE_COMMON(&params);

		/* and fill in the return stuff for this QUERY */
		queryOrigin = params.NCP_object;
		retValue->NQP_navFlags = params.NCP_navFlags;
		retValue->NQP_backtrackFlag = params.NCP_backtrackFlag;
		retValue->NQP_nextObject = queryOrigin;
		return (FALSE);
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTMetaMupAlterFtvmcExcl
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Prevent us from getting focus if we the hint
		HINT_REPEAT_TRIGGER_NOT_FOCUSABLE is set.

CALLED BY:	MSG_META_MUP_ALTER_FTVMC_EXCL
PASS:		*ds:si	= RepeatTriggerClass object
		es 	= segment of RepeatTriggerClass
		ax	= message #
		^lcx:dx	- object wishing to grab/release exlusive(s)
		bp	- MetaAlterFTVMCExclFlags

		GOC
					optr objectWantingControl = cx:dx, 
					MetaAlterFTVMCExclFlags flags = bp);  

RETURN:		nothing
DESTROYED:	ax, cx, dx, bp
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JAG	2/10/95   	Initial version
	jfh	8/23/04	port to GOC
                  this message doesn't appear to be used
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method RepeatTriggerClass, MSG_META_MUP_ALTER_FTVMC_EXCL
{


	/* Do nothing if hint hasn't been set.  */
	if (!ObjVarFindData(oself, HINT_REPEAT_TRIGGER_NOT_FOCUSABLE)) {
		@callsuper();
		}
	else {
		/* Clear focus flag. */
		flags = flags & !MAEF_FOCUS;

		/* If no flags are now set, then don't forward to stuperclass. */
		if (flags & MAEF_MASK_OF_ALL_HIERARCHIES)
			return;
		else @callsuper();
      }

}




