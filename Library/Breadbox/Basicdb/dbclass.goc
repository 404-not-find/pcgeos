/***************************************************************************

                Copyright (c) Breadbox Computer Company 1998
                         -- All Rights Reserved --

  PROJECT:      Generic Database System
  MODULE:       Basic Database System / DataBaseClass
  FILE:         dbClass.goc

  AUTHOR:       Gerd Boerrigter

  $Header: /Home Bulletin Board/Library/BasicDB/DBCLASS.GOC 7     7/16/98 18:29 Gerdb $

  DESCRIPTION:


  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.
    98-09-10  GerdB     Fixed 2 small bugs.

***************************************************************************/

@include <stdapp.goh>
#include <Ansi/string.h>

#include <basicDB.h>
@include <Objects/basicDB.goh>
#include "internal.h"


/***************************************************************************
    DataBaseClass
***************************************************************************/
@classdecl DataBaseClass;


/*==========================================================================
    Working with records:
==========================================================================*/


/***************************************************************************
    MSG_DATABASE_USE_DATABASE
----------------------------------------------------------------------------
    Specifies the database to use.

    @param  file        contains our database.
    @param  dirBlock    database directory block.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_USE_DATABASE
/*  MediaError
    (
    VMFileHandle    file,           contains our database.
    VMBlockHandle   dirBlock        database directory block.
    ) */
{
    EC( ECVMCheckVMFile( file ); )
    EC( ECVMCheckVMBlockHandle( file, dirBlock ); )
    EC_ERROR_IF( ( NullHandle != pself->DBI_file ),
            DATABASE_OBJECT_ALREADY_IN_USE );

    pself->DBI_file = file;
    pself->DBI_dir  = dirBlock;

    return BDBE_NO_ERROR;

} /* MSG_DATABASE_USE_DATABASE */


/***************************************************************************
    MSG_DATABASE_EXIT_DATABASE
----------------------------------------------------------------------------
    Frees all resources used for the current database.

    @return The Error

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_EXIT_DATABASE
/*  MediaError
    (
    void
    ) */
{
    EC_ERROR_IF(( NullHandle == pself->DBI_file ),
            DATABASE_OBJECT_NOT_IN_USE );

    pself->DBI_file = NullHandle;

    return BDBE_NO_ERROR;

} /* MSG_DATABASE_EXIT_DATABASE */


/***************************************************************************
    MSG_DATABASE_CREATE_RECORD
----------------------------------------------------------------------------
    Create a new empty record in memory.  And will be the current record
    for all other messages.
    The record is not added to a database, this happens only with
    C<MSG_DATABASE_SAVE_RECORD>.
    The recordID is also assigned during saving.

    @return The Error (BDBE_MEMORY_ALLOCATION_ERROR)

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_CREATE_RECORD
/*  BasicDBError
    (
    void
    ) */

{
    EC_ERROR_IF(( NullHandle != pself->DBI_record ),
            CURRENT_RECORD_ALREADY_IN_USE );

    pself->DBI_record = BasicDBCreateRecord();

    if ( NullHandle == pself->DBI_record )
    {
        return BDBE_MEMORY_ALLOCATION_ERROR;
    }
    return BDBE_NO_ERROR;

} /* MSG_DATABASE_CREATE_RECORD */


/***************************************************************************
    MSG_DATABASE_SAVE_RECORD
----------------------------------------------------------------------------
    Saves the current record in the memory to the database file and
    frees the memory block.  If the recordID is C<0>, then a new unique
    recordID is assigned to this record.  If the record was deleted
    meanwhile, it will be saved into the DB again.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_SAVE_RECORD
/*  BasicDBError
    (
    BasicDBRecordID*    recordID
    ) */
{
    BasicDBError            error = BDBE_NO_ERROR;

    MemHandle               recordHandle;

    EC_ERROR_IF(( NullHandle == pself->DBI_record ), NO_CURRENT_RECORD );

    /* Save and discard record. */
    error = BasicDBSaveRecord(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        pself->DBI_callback,
        recordID );

    pself->DBI_record   = NullHandle;
    pself->DBI_recordID = 0;

    return error;

} /* MSG_DATABASE_SAVE_RECORD */



/***************************************************************************
    MSG_DATABASE_DISCARD_RECORD
----------------------------------------------------------------------------
    Frees the memory block without saving it to the database.  The
    database is completly unchanged.

    @return The Error

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_DISCARD_RECORD
/*  void
    (
    void
    ) */
{
    EC_ERROR_IF(( NullHandle == pself->DBI_record ), NO_CURRENT_RECORD );

    BasicDBDiscardRecord( pself->DBI_record );

    pself->DBI_record   = NullHandle;
    pself->DBI_recordID = 0;

} /* MSG_DATABASE_DISCARD_RECORD */



/***************************************************************************
    MSG_DATABASE_GET_RECORD
----------------------------------------------------------------------------
    Get a record -- given its ID -- from the database into memory.
    The record will be the current record.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_RECORD
/*  BasicDBError
    (
    BasicDBRecordID recordID        ID of the record.
    ) */
{
    BasicDBError    error = BDBE_NO_ERROR;
    MemHandle       recordHandle;    /* handle of record */

    EC_ERROR_IF(( NullHandle != pself->DBI_record ),
            CURRENT_RECORD_ALREADY_IN_USE );

    error = BasicDBGetRecord(
        pself->DBI_file,
        pself->DBI_dir,
        recordID,
        &recordHandle );

    if ( BDBE_NO_ERROR == error )
    {
        pself->DBI_record   = recordHandle;
        pself->DBI_recordID = @call self::MSG_DATABASE_GET_RECORD_ID();
    }
    return error;

} /* MSG_DATABASE_GET_RECORD */



/***************************************************************************
    MSG_DATABASE_GET_RECORD_BY_ELEM_NUM
----------------------------------------------------------------------------
    Get a record -- given its element number in the HugeArray -- from the
    database into memory.
    The record will be the current record.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_RECORD_BY_ELEM_NUM
/*  BasicDBError
    (
    dword           elemNum         index in HugeArray of the record.
    ) */
{
    BasicDBError    error = BDBE_NO_ERROR;
    MemHandle       recordHandle;   /* handle of record */

    EC_ERROR_IF(( NullHandle != pself->DBI_record ),
            CURRENT_RECORD_ALREADY_IN_USE );

    error = BasicDBGetRecordByElemNum(
        pself->DBI_file,
        pself->DBI_dir,
        elemNum,
        &recordHandle );

    if ( BDBE_NO_ERROR == error )
    {
        pself->DBI_record = recordHandle;
        pself->DBI_recordID = @call self::MSG_DATABASE_GET_RECORD_ID();
    }
    return error;

} /* MSG_DATABASE_GET_RECORD_BY_ELEM_NUM */


/***************************************************************************
    MSG_DATABASE_GET_RECORD_BY_INDEX
----------------------------------------------------------------------------
    Get a record -- given a position in an index -- from the database into
    memory.
    The record will be the current record.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_RECORD_BY_INDEX
/*  BasicDBError
    (
    VMBlockHandle   indexArray,     HugeArray of the index array to use.
    dword           elemNum         element to get from the index.
    ) */
{
    BasicDBError    error = BDBE_NO_ERROR;
    MemHandle       recordHandle;   /* handle of record */

    EC_ERROR_IF(( NullHandle != pself->DBI_record ),
            CURRENT_RECORD_ALREADY_IN_USE );

    error = BasicDBGetRecordByIndex(
        pself->DBI_file,
        pself->DBI_dir,
        indexArray,
        elemNum,
        &recordHandle );

    if ( BDBE_NO_ERROR == error )
    {
        pself->DBI_record   = recordHandle;
        pself->DBI_recordID = @call self::MSG_DATABASE_GET_RECORD_ID();
    }
    return error;

} /* MSG_DATABASE_GET_RECORD_BY_INDEX */


/***************************************************************************
    MSG_DATABASE_DELETE_RECORD
----------------------------------------------------------------------------
    Deletes the current record from the database.  If the record was
    actually never saved to the database, it frees the memory block
    without saving it to the database and the database is completly
    unchanged.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_DELETE_RECORD
/*  BasicDBError
    (
    ) */
{
    BasicDBError    error = BDBE_NO_ERROR;

    EC_ERROR_IF(( NullHandle == pself->DBI_record ), NO_CURRENT_RECORD );

    error = BasicDBDeleteRecord(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        pself->DBI_callback );

    pself->DBI_record   = NullHandle;
    pself->DBI_recordID = 0;

    return error;

} /* MSG_DATABASE_DELETE_RECORD */



/***************************************************************************
    MSG_DATABASE_DELETE_RECORD_BY_ID
----------------------------------------------------------------------------
    Deletes the record given by its record ID from the database.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_DELETE_RECORD_BY_ID
/*  BasicDBError
    (
    BasicDBRecordID recordID,       record ID of record to delete.
    ) */
{
    BasicDBError    error = BDBE_NO_ERROR;

    EC_ERROR_IF(( recordID == pself->DBI_recordID ),
            NOT_ALLOWED_ON_CURRENT_RECORD );

    error = BasicDBDeleteRecordByID(
        pself->DBI_file,
        pself->DBI_dir,
        recordID,
        pself->DBI_callback );

    return error;

} /* MSG_DATABASE_DELETE_RECORD_BY_ID */


/***************************************************************************
    MSG_DATABASE_GET_RECORD_ID
----------------------------------------------------------------------------
    Returns the recordID of the current record.  If the return value is
    C<0> the record is not yet saved into the database.

  @internal
    These function should not get the value out of C<DBI_recordID>
    because it is also called to set that instance data.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_RECORD_ID
/*  BasicDBRecordID
    (
    void
    ) */
{
    return BasicDBDeleteRecordByID(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        pself->DBI_callback );

} /* MSG_DATABASE_GET_RECORD_ID */


/*==========================================================================
    Working with fields:
==========================================================================*/


/***************************************************************************
    MSG_DATABASE_ADD_FIELD
----------------------------------------------------------------------------
    Adds a new (empty) field to the current record.  The returned
    BasicDBFieldID is the unique ID to identify this field in this record.
    For simplicity we add every new field to the end of the record.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_ADD_FIELD
/*  BasicDBError
    (
    BasicDBFieldCategory    fieldCategory,
    BasicDBFieldType        fieldType,
    TCHAR *         fieldName,      Namestring of the field.
    BasicDBFieldID* fieldID         ID assigned to that field.
    ) */
{
    return BasicDBAddField(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        fieldCategory,
        fieldType,
        fieldName,
        fieldID );

} /* MSG_DATABASE_ADD_FIELD */




/***************************************************************************
    MSG_DATABASE_DELETE_FIELD
----------------------------------------------------------------------------
    Deletes the field with the given field ID from the current record.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_DELETE_FIELD
/*  BasicDBError
    (
    BasicDBFieldID  fieldID
    ) */
{
    return BasicDBDeleteField(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        fieldID );

} /* MSG_DATABASE_DELETE_FIELD */



/***************************************************************************
    MSG_DATABASE_SET_FIELD_DATA
----------------------------------------------------------------------------
    Stores data in the specified field of the current record.

    When storing ASCII data (strings), the strings should I<not> be null
    terminated. For example, if you want to store the string "ABCD", then
    pass a pointer to the string, and dataSize = 4.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_SET_FIELD_DATA
/*  BasicDBError
    (
    BasicDBFieldID  fieldID,
    void *          data,
    word            dataSize
    ) */
{
    return BasicDBSetFieldData(
             pself->DBI_record, fieldID, data, dataSize );

} /* MSG_DATABASE_SET_FIELD_DATA */


/***************************************************************************
    MSG_DATABASE_GET_FIELD_DATA
----------------------------------------------------------------------------
    Gets data of a field.  Returns the number of bytes used for the data.
    If C<0> is returned, the field does not exist or is empty.  If the
    return value is greater than C<destSize> it indicates, that not all
    data could be copied.

    If the destination pointer c<dest> is c<NULL> or the
    c<maxBytesToGet> is c<0>, then just the number of bytes used
    for the data is returned.

    Note: The standard (most efficient) way to store string data is
          I<without> a null terminator, so callers will need to use the
          returned data size.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_FIELD_DATA
/*  word                            size of data
    (
    BasicDBFieldID  fieldID,
    void *          dest,
    word            maxBytesToGet   size of dest buffer
    ) */
{
    return BasicDBGetFieldData(
             pself->DBI_record, fieldID, dest, maxBytesToGet );

} /* MSG_DATABASE_GET_FIELD_DATA */


/***************************************************************************
    MSG_DATABASE_GET_FIELD_DATA_SIZE
----------------------------------------------------------------------------
    Returns the number of bytes used for the data.
    If C<0> is returned, the field does not exist or is empty.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-06-23  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_FIELD_DATA_SIZE
/*  word                            size of data
    (
    BasicDBFieldID  fieldID,
    ) */
{
    return BasicDBGetFieldDataSize(
             pself->DBI_record, fieldID );

} /* MSG_DATABASE_GET_FIELD_DATA_SIZE */


/***************************************************************************
    MSG_DATABASE_SET_FIELD_NAME
----------------------------------------------------------------------------
    Changes the name of the specified field.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_SET_FIELD_NAME
/*  BasicDBError
    (
    BasicDBFieldID  fieldID,
    TCHAR *         fieldName       New name of the field.
    ) */
{
    return BasicDBSetFieldName(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        fieldID,
        fieldName );

} /* MSG_DATABASE_SET_FIELD_NAME */


/***************************************************************************
    MSG_DATABASE_GET_FIELD_NAME
----------------------------------------------------------------------------
    Gets the name of the specified field.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_FIELD_NAME
/*  BasicDBError
    (
    BasicDBFieldID  fieldID,
    TCHAR *         fieldName,      buffer for name string.
    word            maxBytesToGet   size of buffer for the null
                                        terminated name string.
    ) */
{
    return BasicDBGetFieldName(
        pself->DBI_file,
        pself->DBI_dir,
        pself->DBI_record,
        fieldID,
        fieldName,
        maxBytesToGet );

} /* MSG_DATABASE_GET_FIELD_NAME */


/***************************************************************************
    MSG_DATABASE_GET_FIELD_ID
----------------------------------------------------------------------------
    Gets the fieldID of the field with the given C<value>
    If C<nth> is greater than 1, the fieldID of the nth found field is
    returned, otherwise the first found field is returned.

    If the field could not be found in the record, C<BDBE_FIELD_NOT_FOUND>
    is returned and the field ID is C<0>.

    @return The BasicDBError

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_GET_FIELD_ID
/*  BasicDBError
    (
    BasicDBFieldHeaderElement   searchFor,
    word    value,                  value to search for.
    int     nth,
    BasicDBFieldID* fieldId
    ) */
{
    BasicDBFieldID id;

    id = BasicDBGetFieldID( pself->DBI_record, searchFor, value, nth );

    *fieldId = id;

    return ( 0 == id ) ? BDBE_FIELD_NOT_FOUND : BDBE_NO_ERROR;

} /* MSG_DATABASE_GET_FIELD_ID */


/*==========================================================================
    Indices:
==========================================================================*/


/***************************************************************************
    MSG_DATABASE_INDEX_CREATE
----------------------------------------------------------------------------
    Creates a new index.

    If the flag C<BDBILF_AUTO_UPDATE> is set, the index will be
    automatically updated, if records are added or deleted.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_INDEX_CREATE
/*  BasicDBError
    (
    BasicDBIndexListFlags    flags,
    word                valueForCallback,
    VMBlockHandle *     indexArray      HugeArray of the index array.
    ) */
{
    return BasicDBIndexCreate(
        pself->DBI_file,
        pself->DBI_dir,
        flags,
        valueForCallback,
        indexArray );

} /* MSG_DATABASE_INDEX_CREATE */


/***************************************************************************
    MSG_DATABASE_INDEX_DESTROY
----------------------------------------------------------------------------
    Destroys an index by destroying the HugeArray containing it and to free
    the element in the index list, if the index was present there.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_INDEX_DESTROY
/*  BasicDBError
    (
    VMBlockHandle       indexToDestroy  HugeArray of the index array.
    ) */
{
    return BasicDBIndexDestroy(
        pself->DBI_file,
        pself->DBI_dir,
        indexToDestroy );

} /* MSG_DATABASE_INDEX_DESTROY */


/***************************************************************************
    MSG_DATABASE_INDEX_ELEMENT_ADD
----------------------------------------------------------------------------
    Adds a record to an index.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_INDEX_ELEMENT_ADD
/*  BasicDBError
    (
    BasicDBRecordID     recordID,       ID of the record.
    VMBlockHandle       indexArray,     HugeArray of the index array to use.
    word                valueForCallback,
    BasicDBCallback     Callback        Callback function for sorting indices.
    ) */
{
EC( ECVMCheckVMFile( pself->DBI_file ); )
EC( ECVMCheckVMBlockHandle( pself->DBI_file, pself->DBI_dir ); )
EC( ECVMCheckVMBlockHandle( pself->DBI_file, indexArray ); )

    return BasicDBIndexElementAdd(
        pself->DBI_file,
        pself->DBI_dir,
        recordID,
        indexArray,
        valueForCallback,
        Callback );

} /* MSG_DATABASE_INDEX_ELEMENT_ADD */


/***************************************************************************
    MSG_DATABASE_INDEX_ELEMENT_DELETE
----------------------------------------------------------------------------
    Deletes a record from an index.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_INDEX_ELEMENT_DELETE
/*  BasicDBError
    (
    BasicDBRecordID     recordID,       ID of the record.
    VMBlockHandle       indexArray,     HugeArray of the index array to use.
    word                valueForCallback,
    BasicDBCallback     Callback        Callback function for sorting indices.
    ) */
{
EC( ECVMCheckVMFile( pself->DBI_file ); )
EC( ECVMCheckVMBlockHandle( pself->DBI_file, pself->DBI_dir ); )
EC( ECVMCheckVMBlockHandle( pself->DBI_file, indexArray ); )

    return BasicDBIndexElementDelete(
        pself->DBI_file,
        pself->DBI_dir,
        recordID,
        indexArray,
        valueForCallback,
        Callback );

} /* MSG_DATABASE_INDEX_ELEMENT_DELETE */


/***************************************************************************
    MSG_DATABASE_INDEX_GET_COUNT
----------------------------------------------------------------------------
    Get the number of elements in the index.

  REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-05-29  GerdB     Initial version.

***************************************************************************/
@method DataBaseClass, MSG_DATABASE_INDEX_GET_COUNT
/*  BasicDBError
    (
    VMBlockHandle       indexArray,     HugeArray of the index array to use.
    dword *             count           elements in the index.
    ) */
{
    return BasicDBIndexGetCount(
        pself->DBI_file,
        pself->DBI_dir,
        indexArray,
        count );

} /* MSG_DATABASE_INDEX_GET_COUNT */

