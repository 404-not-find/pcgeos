/*
 *      PALMFILE.GOC - access routines for PalmOS files from Geos
 *
 *      by Marcus Groeber, mgroeber@compuserve.com
 */

@include <stdapp.goh>

#include "palmfile.h"


typedef struct {
  dword dOffset;
  dword dIndex;
} PDBRecEntry;

typedef struct {
  FileHandle    fh;                     // Handle of associated Geos file

  dword         filesize;               // size of DOS file
  word          numRecs;                // number of records in file

  dword         type;                   // creator ID
  dword         creator;                // file type ID

  PDBRecEntry   rec[1];                 // record directory starts here *
} PDBHData;


// all numbers in these structs are big-endian, MAC format
struct tPDBHeader {
	char sName[32];		// 32 bytes
        word wFlags;            // 36
        word wVersion;          // 38
        dword dwCreationTime;   // 40
        dword dwModTime;        // 44
        dword dwBackupTime;     // 48
        dword dwLastSync;       // 52
        dword ofsAppInfo;       // 56
        dword ofsSortInfo;      // 60
        dword dwType;           // 64
        dword dwCreator;        // 68
        dword dwUniqueIDSeed;   // 72
        dword dwNextRecordID;   // 76
        word  wNumRecs;         // 78
};


/*
 *      Open a Palm DB file, given its DOS name.
 */
PalmDBHandle PalmDBOpenDOS(char *dosname)
{
    FileHandle fh;
    MemHandle mh;
    struct tPDBHeader head;
    PDBHData *pdbh;
    word numRecs,i;

    fh = FileOpen(dosname, FILE_ACCESS_R | FILE_DENY_W);
    if(fh)                              // Successfully opened file?
    {
      // Get header of PDB file
      FileRead(fh, &head, sizeof(head), TRUE);

      // Get number of records in file
      numRecs = PalmWORD(head.wNumRecs);

      // Allocate space for PDB descriptor with enough room for all records
      mh = MemAlloc(sizeof(*pdbh) + (numRecs-1)*sizeof(pdbh->rec[0]),
        HF_DYNAMIC, HAF_LOCK | HAF_NO_ERR);

      pdbh = MemLock(mh);

      // Store file parameters into descriptor
      pdbh->fh = fh;
      pdbh->filesize = FileSize(fh);
      pdbh->numRecs = numRecs;

      pdbh->type = head.dwType;
      pdbh->creator = head.dwCreator;

      // Get record directory from PDB file, and fix up endian-ness...
      FileRead(fh, pdbh->rec, numRecs * sizeof(pdbh->rec[0]), TRUE);
      for(i=0; i<numRecs; i++)
      {
        pdbh->rec[i].dOffset = PalmDWORD(pdbh->rec[i].dOffset);
        pdbh->rec[i].dIndex = PalmDWORD(pdbh->rec[i].dIndex);
      }

      MemUnlock(mh);
    }
    else
      mh = NullHandle;

    return mh;                          // Return handle to open file
}

/*
 *      Close a Palm DB file.
 */
void PalmDBClose(PalmDBHandle db)
{
    PDBHData *pdbh;

    pdbh = MemLock((MemHandle)db);
    FileClose(pdbh->fh, TRUE);          // Close associated Geos file
    MemFree((MemHandle)db);
}

/*
 *      Read a record from a Palm DB file to a newly allocated block on the
 *      heap.
 */
MemHandle PalmDBReadRec(PalmDBHandle db, word recnr, word *size)
{
    MemHandle mh;
    PDBHData *pdbh;

    pdbh = MemLock((MemHandle)db);

    if(recnr < pdbh->numRecs)           // Requested an existing record?
    {
      if(recnr+1>=pdbh->numRecs)        // Determine size of record
        *size = (word)(pdbh->filesize - pdbh->rec[recnr].dOffset);
      else
        *size = (word)(pdbh->rec[recnr+1].dOffset - pdbh->rec[recnr].dOffset);

      // Allocate buffer for holding record
      mh = MemAlloc(*size, HF_DYNAMIC, HAF_LOCK | HAF_NO_ERR);

      // Get record data into buffer
      FilePos(pdbh->fh, pdbh->rec[recnr].dOffset, FILE_POS_START);
      FileRead(pdbh->fh, MemDeref(mh), *size, TRUE);

      MemUnlock(mh);
    }
    else
      mh = NullHandle;                  // No data

    MemUnlock((MemHandle)db);

    return mh;
}

/*
 *      Get info about Palm database.
 */
dword PalmDBGetInfo(PalmDBHandle db, word infoType)
{
    PDBHData *pdbh;
    dword info;

    pdbh = MemLock((MemHandle)db);

    switch(infoType)                    /* get requested info type */
    {
      case PALM_INFO_RECCOUNT:  info = pdbh->numRecs;   break;
      case PALM_INFO_CREATOR:   info = pdbh->creator;   break;
      case PALM_INFO_TYPE:      info = pdbh->type;      break;

      default:
        FatalError(-1);                 /* invalid info type */
    }

    MemUnlock((MemHandle)db);
    return info;
}
