/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 */

/***************************************************************************
 *  FILE:  INTERAL.GOH
 ***************************************************************************/


@define D_BLOCK   (pself->GFLI_dataBlock)
@define D_LIST    ConstructOptr(pself->GFLI_dataBlock, pself->GFLI_list)
@define D_SORT    ConstructOptr(pself->GFLI_dataBlock, pself->GFLI_orderList)
@define UI_LIST   ConstructOptr(pself->GFLI_uiBlock, OptrToChunk(@FileListUIList))
@define CHILD(child)  ConstructOptr(pself->GFLI_uiBlock, OptrToChunk(child))

typedef struct {
    /* The names are kept as separate chunks elsewhere in the same block */
    ChunkHandle FLE_name ;

    /* Byte size of the file */
    dword FLE_size ;

    /* Date last modified as reported */
    FileDateAndTime FLE_modified ;

    /* 1 if directory, else 0 */
    byte FLE_isDir ;
} T_fileListEntry ;  /* 13 bytes per structure */

typedef struct {
    ChunkHandle VE_name ;
    ChunkHandle VE_displayedName ;
    word VE_id ;
} T_volumeEntry ;

/* INTERNAL PROTOTYPES: */
ChunkHandle IFileListFilenameAdd(MemHandle data, TCHAR *p_filename) ;
void IFileListFilenameRemove(MemHandle data, ChunkHandle fileChunk) ;
word IFileListFileEntryRemove(
         MemHandle data,
         ChunkHandle list,
         ChunkHandle sortList,
         T_fileListID index) ;
T_fileListID IFileListFileEntryAdd(
         MemHandle data,
         ChunkHandle list,
         ChunkHandle sortList,
         TCHAR *p_filename,
         dword filesize,
         FileDateAndTime modified,
         Boolean isDir,
         word *p_sortEntry,
         T_fileListField sortField,
         Boolean sortOrder) ;
word IFileListSortEntryInsert(
         MemHandle data,
         ChunkHandle list,
         ChunkHandle sortList,
         T_fileListID fileID,
         T_fileListField sortField,
         Boolean sortOrder) ;
Boolean IFileListCompareFiles(
            MemHandle data,
            ChunkHandle list,
            T_fileListID fileA,
            T_fileListID fileB,
            T_fileListField sortField,
            Boolean sortOrder) ;
void IFileListSortEntryRemove(
         MemHandle data,
         ChunkHandle sortList,
         word sortIndex) ;
void IFileListFileChangeName(
         MemHandle data,
         ChunkHandle list,
         T_fileListID index,
         TCHAR *p_newName) ;
void IFileListEntryResort(
         MemHandle data,
         ChunkHandle list,
         ChunkHandle sortList,
         T_fileListField sortField,
         Boolean sortOrder,
         T_fileListID index,
         word *p_old,
         word *p_new) ;
void IFileListFileChangeSize(
         MemHandle data,
         ChunkHandle list,
         T_fileListID index,
         dword newSize) ;
word IFileListResortAll(
         MemHandle data,
         ChunkHandle list,
         ChunkHandle sortList,
         T_fileListField sortField,
         Boolean sortOrder) ;
T_fileListID IFileListSortEntryGetNth(
                 MemHandle mem,
                 ChunkHandle sortList,
                 word index) ;
word IFileListFileEntryGetSortPosition(
         MemHandle data,
         ChunkHandle sortlist,
         T_fileListID file) ;
void IFileListFileChangeModified(
         MemHandle data,
         ChunkHandle list,
         T_fileListID index,
         FileDateAndTime modified) ;
void IConvertToSizing(dword size, char *p_sizing) ;
word IDetermineWidth(
         char *p_string, 
         word len, 
         FontID font, 
         WWFixedAsDWord pointSize) ;

@class FileListTableClass, GenDynamicListClass ;
    @message void MSG_FILE_LIST_SET_DESTINATION(optr dest) ;
    @message void MSG_FILE_LIST_SET_DRAW_MESSAGE(Message drawMsg) ;
    @message void MSG_FILE_LIST_TABLE_RECALC() ;
@endc

/***************************************************************************
 *  END OF FILE:  INTERAL.GOH
 ***************************************************************************/
