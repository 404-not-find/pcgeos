@include <ibtree.goh>

typedef struct {
    IBDLLList    ITFS_list ;
    IBTreeFolder ITFS_parentFolder ;
    IBTreeEntry  ITFS_parentEntry ;
    dword        ITFS_entryData ;
} IBTreeFolderStruct ;

/*
   Internal notes:

   The header data on a folder's list points back to the folder object.
*/

/* Quick routine actions */
#define IBTREE_FOLDER_START    IBTreeFolderStruct *p_folder = NULL ; \
                               if (folder)  { \
                                   p_folder = IBMSLock(memory, folder) ; \
                                   if (p_folder)  {

#define IBTREE_FOLDER_END              IBMSUnlock(memory, p_folder) ; \
                                   } \
                               }

typedef byte IBTreeInternalFlags ;

typedef union  {
    IBDLLUserFlags ITFF_flags ;
    struct {
        IBTreeUserFlags     user ;
        IBTreeInternalFlags internal ;
    } ITFF_splitFlags ;
} IBTreeFullFlags ;

#define IBTREE_INTERNAL_FLAGS_FOLDER  0x80

/*-------------------------------------------------------------------------*/
/* Create a new folder in the system (free floating with no parent) */
IBTreeFolder IBTreeFolderCreate(IBMSHandle memory)
{
    IBMSIndex newFolder = IBMS_BAD ;
    IBTreeFolderStruct *p_folder = NULL ;
    Boolean got = FALSE ;
    IBDLLList list ;

    /* Allocate the new folder object */
    newFolder = IBMSAlloc(memory, sizeof(IBTreeFolderStruct)) ;
    if (newFolder)  {
        /* Lock in the folder object */
        p_folder = IBMSLock(memory, newFolder) ;
        if (p_folder)  {
            /* Create the linked list of folder elements */
            IBMSUnlock(memory, p_folder) ;
            list = IBDLLCreate(memory, newFolder) ;
            p_folder = IBMSLock(memory, newFolder) ;
            p_folder->ITFS_list = list ;
            if (p_folder->ITFS_list)  {
                /* Link to NO parent */
                p_folder->ITFS_parentFolder = IBTREE_FOLDER_BAD ;
                p_folder->ITFS_parentEntry = IBTREE_ENTRY_BAD ;
                p_folder->ITFS_entryData = 0 ;
                IBMSDirty(p_folder) ;
                IBMSUnlock(memory, p_folder) ;
                got = TRUE ;
                IBDLLItemSetFlags(
                    memory,
                    newFolder,
                    IBTREE_INTERNAL_FLAGS_FOLDER) ;
            }
        }

        /* If we didn't get the folder object initialized, free it */
        if (!got)  {
            /* Couldn't allocate the list item.  Free the folder */
            if (p_folder)
                IBMSUnlock(memory, p_folder) ;
            IBMSFree(memory, newFolder) ;
            newFolder = IBMS_BAD ;
        }
    }

    /* Return the newly created folder, or IBMS_FOLDER_BAD */
    return newFolder ;
}

/*-------------------------------------------------------------------------*/
/* Destroys a folder and all of its children entries and sub-folders */
void IBTreeFolderDestroy(IBMSHandle memory, IBTreeFolder rootFolder)
{
    IBTreeEntry entry ;
    IBTreeFolder subFolder ;

    /* Go through all the children and delete all the items */
    entry = IBTreeFolderGetEntry(
                memory,
                rootFolder,
                IBTREE_LOCATION_FIRST) ;
    while (entry != IBTREE_ENTRY_BAD)  {
        /* Delete the entry and see if it had a folder */
        subFolder = IBTreeEntryDelete(memory, rootFolder, entry) ;

        /* Get rid of the sub-folder if its left */
        if (subFolder)
            IBTreeFolderDestroy(memory, subFolder) ;

        /* Get the next first item */
        entry = IBTreeFolderGetEntry(
                    memory,
                    rootFolder,
                    IBTREE_LOCATION_FIRST) ;
    }
}

/*-------------------------------------------------------------------------*/
/* Insert a piece of data into the tree's folder.  Pass IBTREE_ENTRY_BAD
   to append at the end. */
IBTreeEntry IBTreeFolderInsertData(
                IBMSHandle memory,
                IBTreeFolder folder,
                IBTreeEntry entryToInsertBefore,
                IBTreeData data,
                IBTreeUserFlags flags)
{
    IBTreeEntry newEntry = IBTREE_ENTRY_BAD ;
    IBTreeFullFlags fullflags ;
    IBDLLList list = IBDLL_LIST_BAD ;

    IBTREE_FOLDER_START ;
    list = p_folder->ITFS_list ;
    IBTREE_FOLDER_END ;

    if (list)  {
        /* Just pass on the request and insert the new item in the linked list */
        fullflags.ITFF_splitFlags.user = flags ;
        fullflags.ITFF_splitFlags.internal = 0 ;
        newEntry = IBDLLInsert(
                       memory,
                       list,
                       data,
                       fullflags.ITFF_flags,
                       entryToInsertBefore) ;
    }

    return newEntry ;
}

/*-------------------------------------------------------------------------*/
/* Insert a sub-folder into the tree's folder */
/* This routine is the same as IBTreeFolderInsertData except it fixes up */
/* the link between the sub-folder and the parent folder */
IBTreeEntry IBTreeFolderInsertFolder(
                IBMSHandle memory,
                IBTreeFolder folder,
                IBTreeEntry entryToInsertBefore,
                IBTreeFolder subFolder,
                IBTreeData data,
                IBTreeUserFlags flags)
{
    IBTreeEntry newEntry = IBTREE_ENTRY_BAD ;
    IBTreeFolderStruct *p_subFolder ;
    IBTreeFullFlags fullflags ;
    IBDLLList list = IBDLL_LIST_BAD ;

    IBTREE_FOLDER_START ;

    list = p_folder->ITFS_list ;
    IBTREE_FOLDER_END ;

    /* Lock in the subfolder's information */
    if (subFolder && list)  {
        fullflags.ITFF_splitFlags.user = flags ;
        fullflags.ITFF_splitFlags.internal = IBTREE_INTERNAL_FLAGS_FOLDER ;
        newEntry = IBDLLInsert(
                       memory,
                       list,
                       subFolder,
                       fullflags.ITFF_flags,
                       entryToInsertBefore) ;

        if (newEntry)  {
            /* Now link up the folder links */
            p_subFolder = IBMSLock(memory, subFolder) ;

            /* If there are already links, this will crash in EC */
EC(         if ((p_subFolder->ITFS_parentFolder) || (p_subFolder->ITFS_parentEntry))  )
EC(             FatalError(-100) ;   /* Folder already a sub-folder */          )

            p_subFolder->ITFS_parentFolder = folder ;
            p_subFolder->ITFS_parentEntry = newEntry ;
            p_subFolder->ITFS_entryData = data ;
            IBMSDirty(p_subFolder) ;
            IBMSUnlock(memory, p_subFolder) ;
        }
    }

    return newEntry ;
}

/*-------------------------------------------------------------------------*/
/* Delete a single entry in the folder.  If the entry is a folder, that
   folder is just detached (not destroyed) and returned.  You can then
   call IBTreeFolderDestroy on it. */
IBTreeFolder IBTreeEntryDelete(
                 IBMSHandle memory,
                 IBTreeFolder folder,
                 IBTreeEntry entry)
{
    IBTreeFolder subFolder = IBTREE_FOLDER_BAD ;
    IBTreeFullFlags flags ;
    IBTreeFolderStruct *p_sub ;

    IBTREE_FOLDER_START ;

    /* Get the folder first (if any) */
    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    if (flags.ITFF_splitFlags.internal & IBTREE_INTERNAL_FLAGS_FOLDER)  {
        /* Pull out the folder, but then write out no data */
        /* NOTE that the entry data is lost at this point */
        subFolder = IBDLLItemGetData(memory, entry) ;
        flags.ITFF_splitFlags.internal &= (~IBTREE_INTERNAL_FLAGS_FOLDER) ;
        IBDLLItemSetData(memory, entry, IBTREE_FOLDER_BAD) ;
        IBDLLItemSetFlags(memory, entry, flags.ITFF_flags) ;

        /* Mark the sub folder unlinked to anywhere */
        p_sub = IBMSLock(memory, subFolder) ;
        p_sub->ITFS_parentFolder = IBTREE_FOLDER_BAD ;
        p_sub->ITFS_parentEntry = IBTREE_ENTRY_BAD ;
        IBMSDirty(p_folder) ;
        IBMSUnlock(memory, p_folder) ;
    }

    /* Now do the actual delete of the entry */
    IBDLLItemDelete(memory, p_folder->ITFS_list, entry) ;

    IBTREE_FOLDER_END ;

    return subFolder ;
}

/*-------------------------------------------------------------------------*/
/* Find an entry in a folder by its Nth location or the above constants */
IBTreeEntry IBTreeFolderGetEntry(
                IBMSHandle memory,
                IBTreeFolder folder,
                IBTreeLocation location)
{
    IBTreeEntry foundEntry = IBTREE_ENTRY_BAD ;

    IBTREE_FOLDER_START ;
    foundEntry = IBDLLGetItem(memory, p_folder->ITFS_list, location) ;
    IBTREE_FOLDER_END ;

    return foundEntry ;
}

/*-------------------------------------------------------------------------*/
/* Get the number of items in this folder */
dword IBTreeFolderGetCount(IBMSHandle memory, IBTreeFolder folder)
{
    dword count = 0 ;

    IBTREE_FOLDER_START ;
    count = IBDLLGetCount(memory, p_folder->ITFS_list) ;
    IBTREE_FOLDER_END ;

    return count ;
}


/*-------------------------------------------------------------------------*/
/* Given a folder, return the parent folder and entry in the folder */
IBTreeFolder IBTreeFolderGetParent(
                 IBMSHandle memory,
                 IBTreeFolder folder,
                 IBTreeEntry *p_returnedEntry)
{
    IBTreeFolder parentFolder = IBTREE_FOLDER_BAD ;

    IBTREE_FOLDER_START ;

    /* Copy over the parent information */
    parentFolder = p_folder->ITFS_parentFolder ;
    *p_returnedEntry = p_folder->ITFS_parentEntry ;

    IBTREE_FOLDER_END ;

    return parentFolder ;
}

/*-------------------------------------------------------------------------*/
/* Routines to get/set the data attached to any entry */
IBTreeData IBTreeEntryGetData(IBMSHandle memory, IBTreeEntry entry)
{
    IBTreeData data ;
    IBTreeFolder folder ;
    IBTreeFolderStruct *p_folder = NULL ;
    IBTreeFullFlags flags ;

    /* The data for an entry can be in one of two locations.  Either it */
    /* is the DLL's data or it's within the folder information.  */
    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    if (flags.ITFF_splitFlags.internal & IBTREE_INTERNAL_FLAGS_FOLDER)  {
        /* Data is in folder.  Look it up */
        data = 0 ;
        folder = IBDLLItemGetData(memory, entry) ;
        if (folder)  {
            p_folder = IBMSLock(memory, folder) ;
            if (p_folder)  {
                data = p_folder->ITFS_entryData ;
                IBMSUnlock(memory, p_folder) ;
            }
        }
    } else {
        /* Data is in link list item */
        data = IBDLLItemGetData(memory, entry) ;
    }

    return data ;
}

/*-------------------------------------------------------------------------*/
void IBTreeEntrySetData(
         IBMSHandle memory,
         IBTreeEntry entry,
         IBTreeData newData)
{
    IBTreeData data ;
    IBTreeFolder folder ;
    IBTreeFolderStruct *p_folder ;
    IBTreeFullFlags flags ;

    /* The data for an entry can be in one of two locations.  Either it */
    /* is the DLL's data or it's within the folder information.  */
    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    if (flags.ITFF_splitFlags.internal & IBTREE_INTERNAL_FLAGS_FOLDER)  {
        /* Data is in folder.  Look it up */
        data = 0 ;
        folder = IBDLLItemGetData(memory, entry) ;
        if (folder)  {
            p_folder = IBMSLock(memory, folder) ;
            if (p_folder)  {
                p_folder->ITFS_entryData = data ;
                IBMSDirty(p_folder) ;
                IBMSUnlock(memory, p_folder) ;
            }
        }
    } else {
        /* Data is in link list item */
        IBDLLItemSetData(memory, entry, newData) ;
    }
}

/*-------------------------------------------------------------------------*/
/* Routines to get/set the user flags */
IBTreeUserFlags IBTreeEntryGetFlags(IBMSHandle memory, IBTreeEntry entry)
{
    IBTreeFullFlags flags ;

    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    return flags.ITFF_splitFlags.user ;
}

/*-------------------------------------------------------------------------*/
void IBTreeEntrySetFlags(
         IBMSHandle memory,
         IBTreeEntry entry,
         IBTreeUserFlags newFlags)
{
    IBTreeFullFlags flags ;
    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    flags.ITFF_splitFlags.user = newFlags ;
    IBDLLItemSetFlags(memory, entry, flags.ITFF_flags) ;
}

/*-------------------------------------------------------------------------*/
/* Routines to walk through a folder.  Routines IBTREE_ENTRY_BAD if no
   next or previous. */
IBTreeEntry IBTreeEntryGetPrevious(IBMSHandle memory, IBTreeEntry entry)
{
    return IBDLLItemGetPrevious(memory, entry) ;
}

/*-------------------------------------------------------------------------*/
IBTreeEntry IBTreeEntryGetNext(IBMSHandle memory, IBTreeEntry entry)
{
    return IBDLLItemGetNext(memory, entry) ;
}

/*-------------------------------------------------------------------------*/
IBTreeFolder IBTreeEntryGetFolder(IBMSHandle memory, IBTreeEntry entry)
{
    IBTreeFolder folder ;
    IBTreeFullFlags flags ;

    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;

    if (flags.ITFF_splitFlags.internal & IBTREE_INTERNAL_FLAGS_FOLDER)  {
        folder = IBDLLItemGetData(memory, entry) ;
    } else {
        folder = IBTREE_FOLDER_BAD ;
    }

    return folder ;
}

/*-------------------------------------------------------------------------*/
IBTreeEntry IBTreeEntryMoveTo(
                IBMSHandle memory,
                IBTreeFolder folder,                /* Folder containing entry to move */
                IBTreeEntry entry,                  /* Entry to move (folder or normal) */
                IBTreeFolder insertIntoFolder,    /* Folder containing new entry */
                IBTreeEntry insertBeforeEntry)      /* Entry to move before */
{
    IBTreeFolder subFolder ;
    dword entryData ;
    IBTreeFullFlags flags ;
    IBTreeEntry newEntry ;

    flags.ITFF_flags = IBDLLItemGetFlags(memory, entry) ;
    entryData = IBTreeEntryGetData(memory, entry) ;

    /* Detach the folder or destroy the entry */
    subFolder = IBTreeEntryDelete(memory, folder, entry) ;

    /* Now create a new entry in the target list */
    /* as either a folder or standard entry */
    if (flags.ITFF_splitFlags.internal & IBTREE_INTERNAL_FLAGS_FOLDER)  {
        newEntry = IBTreeFolderInsertFolder(
                       memory,
                       insertIntoFolder,
                       insertBeforeEntry,
                       subFolder,
                       entryData,
                       flags.ITFF_splitFlags.user) ;
    } else {
         newEntry = IBTreeFolderInsertData(
                        memory,
                        insertIntoFolder,
                        insertBeforeEntry,
                        entryData,
                        flags.ITFF_splitFlags.user) ;
    }

    /* Return the new handle to this entry */
    return newEntry ;
}

