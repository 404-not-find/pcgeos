/***********************************************************************
 *
 * PROJECT:       browser
 * FILE:          impdoc.goc
 *
 * AUTHOR:        Brian Chin
 *
 * Note: This code uses many functions that are similar to the
 *       functions in the ImpGraph driver.
 *
 ***********************************************************************/

/**************************************************************************
 *                Include files
 **************************************************************************/
@include <stdapp.goh>
#include <initfile.h>
#include <library.h>
@include <iacp.goh>
#include <Ansi/string.h>
#include <geoMisc.h>

#include <htmldrv.h>

/* buffer for returning list of supported formats */
/* MIME type, 0, extension, 0, 0, ..., MIME type, 0, extension, 0, 0, 0 */
int formatSize = 0;
TCHAR formatList[MIME_INFO_MAXBUF];


/* list of MIME type to token */
typedef struct {
    int        MTT_offset;
    GeodeToken MTT_token;
    Boolean    MTT_engineMode;
    Boolean    MTT_deathToProcess;
} MimeToToken;

/* minsize(MIME type)+null+minsize(extension)+null */
#define TOKEN_LIST_SIZE 50
int tokenNum = 0;
MimeToToken tokenList[TOKEN_LIST_SIZE];

/* DOS longname support */
Boolean useLongname = TRUE;


/**************************************************************************
 *        Message strings
 **************************************************************************/
@start  HTMLResource, data;
  @chunk TCHAR MsgCouldntStartApp[] = _TEXT(
    "<H1>Helper application could not be started</H1>");
@end    HTMLResource;


optr ToolsFormatMessage(optr msg)
{
    word size;
    MemHandle mh;
    TCHAR *dst;

    MemLock(OptrToHandle(msg));         /* copy message to new data block */

    size = (strlen(LMemDeref(msg))+2)*sizeof(TCHAR);    /* basic size of HTML message */

    mh = MemAlloc(size, HF_DYNAMIC, HAF_NO_ERR);
    dst = MemLock(mh);
    strcpy(dst, LMemDeref(msg));
    MemUnlock(mh);

    MemUnlock(OptrToHandle(msg));

    return ConstructOptr(mh,0);         /* return optr to data block */
}

void BuildAssocList(void)
{
    int sectionNum = 0;
    MemHandle dataB;
    word dataSize;
    TCHAR *dataP;
    TCHAR *outputP = formatList;
    int i;
    dword manuf;

    tokenNum = 0;
    while(!InitFileReadStringSectionBlock("mimeDoc", "fileTypes",
					 sectionNum++, &dataB, 0, &dataSize)) {
	if (dataB && dataSize) {
	    dataP = MemLock(dataB);
	    /* it is fine to repeat the same MIME type with multiple
               extensions using separate entries */
	    if (dataP && *dataP) {
		tokenList[tokenNum].MTT_engineMode = 
		  tokenList[tokenNum].MTT_deathToProcess = FALSE;
                /* skip separators */
@ifdef DO_DBCS
		while ((*dataP == C_SPACE) || (*dataP == C_HORIZONTAL_TABULATION)) dataP++;
@else
		while ((*dataP == C_SPACE) || (*dataP == C_TAB)) dataP++;
@endif
		/* if '!', engine mode */
		if (*dataP == '!') {
		    tokenList[tokenNum].MTT_engineMode = TRUE;
		    dataP++;  /* skip it */
		    /* skip separators */
@ifdef DO_DBCS
		    while ((*dataP == C_SPACE) || (*dataP == C_HORIZONTAL_TABULATION)) dataP++;
@else
		    while ((*dataP == C_SPACE) || (*dataP == C_TAB)) dataP++;
@endif
		}
		/* if '@', will quit calling process on app launch */
		else if (*dataP == '@') {
		    tokenList[tokenNum].MTT_deathToProcess = TRUE;
		    dataP++;  /* skip it */
		    /* skip separators */
@ifdef DO_DBCS
		    while ((*dataP == C_SPACE) || (*dataP == C_HORIZONTAL_TABULATION)) dataP++;
@else
		    while ((*dataP == C_SPACE) || (*dataP == C_TAB)) dataP++;
@endif
		}
                /* copy mime type to formatList */
		tokenList[tokenNum].MTT_offset = (word)(outputP-formatList);
		while (*dataP && (*dataP != C_SPACE)) {
		    *outputP++ = *dataP++;
		}
		*outputP++ = C_NULL;
		/* skip separators */
@ifdef DO_DBCS
		while ((*dataP == C_SPACE) || (*dataP == C_HORIZONTAL_TABULATION)) dataP++;
@else
		while ((*dataP == C_SPACE) || (*dataP == C_TAB)) dataP++;
@endif
		/* copy file extension to formatList */
		while (*dataP && (*dataP != C_SPACE)) {
		    *outputP++ = *dataP++;
		}
		*outputP++ = C_NULL;
                *outputP++ = C_NULL;    /* second zero terminates ext list */
                /* skip separators */
@ifdef DO_DBCS
		while ((*dataP == C_SPACE) || (*dataP == C_HORIZONTAL_TABULATION)) dataP++;
@else
		while ((*dataP == C_SPACE) || (*dataP == C_TAB)) dataP++;
@endif
		/* copy token to tokenList */
		for (i = 0; i < TOKEN_CHARS_LENGTH; i++ ) {
		    if (*dataP) {
			tokenList[tokenNum].MTT_token.GT_chars[i] = *dataP++;
		    }
		}
		if ((*dataP++ == (TCHAR) C_COMMA) &&
		    !UtilAsciiToHex32((char*)dataP, (long*)&manuf)) {
		    tokenList[tokenNum].MTT_token.GT_manufID = (word)manuf;
		    tokenNum++;
		    /* if filled our buffer, stop reading entries */
		    if (tokenNum == TOKEN_LIST_SIZE) break;
		} else {
		    /* something wrong with string section format, don't
		       advance tokenNum and reset pointer into formatList */
		    outputP = formatList + tokenList[tokenNum].MTT_offset;
		}
	    }
	}
	if (dataB) MemFree(dataB);
    }
    /* end format list */
    *outputP = C_NULL;

    /* store size of list */
    formatSize = (outputP-formatList+1)*sizeof(TCHAR);
}


#pragma argsused
VMBlockHandle _pascal _export MimeDrvNothing(_MimeGraphicParams_)
{
    return 0;
}

/*
 *  Import file whose name is specified in *file, assume it has the MIME
 *  type that is passed in *mimeType.
 */
#pragma argsused
dword _pascal _export MimeDrvMain(_MimeTextParams_)
{
    GeodeToken *tokenP = 0;
    MemHandle alb;
    AppLaunchBlock *albP;
    TCHAR *fileName;
    word numServers;
    IACPConnection extConn;
    dword retVal = 0;
    int i;
    Boolean engineMode = FALSE, deathToProcess = FALSE;

    /* assume error */
    tad->TAD_type = TAD_TYPE_HTML_OPTR;

    /* find mime type in list */
    for (i = 0; i < tokenNum; i++ ) {
        if (!strcmpi((char*)formatList+tokenList[i].MTT_offset, (char*)mimeType)) {
	    tokenP = &tokenList[i].MTT_token;
	    engineMode = tokenList[i].MTT_engineMode;
	    deathToProcess = tokenList[i].MTT_deathToProcess;
	    break;
	}
    }
    /* use filename in URL for name (okay to modify url buffer) */
    fileName = strrchr(url, '/');
    if (fileName) {
	TCHAR *p, *q, *dotP;
	/* remove URL arguments */
	q = strchr(fileName, '?');
	if (q) *q = C_NULL;
	fileName++;  /* skip separator */
	/* convert URL filename back from unencoded format */
	p = q = fileName;
	while (*p) {
	    if (*p == '%') {
		int c;
		p++;
		if (*p >= '0' && *p <= '9') {
		    c = (*p-'0') * 16;
		} else if (*p >= 'A' && *p <= 'F') {
		    c = ((*p-'A')+10) * 16;
		} else if (*p >= 'a' && *p <= 'f') {
		    c = ((*p-'a')+10) * 16;
		}
		p++;
		if (*p >= '0' && *p <= '9') {
		    c += *p-'0';
		} else if (*p >= 'A' && *p <= 'F') {
		    c += (*p-'A')+10;
		} else if (*p >= 'a' && *p <= 'f') {
		    c += (*p-'a')+10;
		}
		p++;
		*q++ = (char)c;
	    } else if (*p == '+') {
		*q++ = ' ';
		p++;
	    } else {
		*q++ = *p++;
	    }
	}
	*q = C_NULL;
	/* enforce length limits */
	dotP = strrchr(fileName, '.');
	if (strlen(fileName) > (useLongname ? FILE_LONGNAME_LENGTH :
	    (dotP ? DOS_DOT_FILE_NAME_LENGTH : DOS_FILE_NAME_CORE_LENGTH))) {
	    if (dotP) {
		/* collapse down to maximum length */
		strcpy(fileName+(
		    (useLongname ?
		     FILE_LONGNAME_LENGTH : DOS_DOT_FILE_NAME_LENGTH) -
		    (strlen(dotP))),
		       dotP);
	    } else {
		/* no extension, just truncate */
		fileName[(useLongname ? FILE_LONGNAME_LENGTH : DOS_FILE_NAME_CORE_LENGTH)] = C_NULL;
	    }
	}
    } else {
	/* just use cache file name */
	fileName = strrchr(file, '\\');
	if (fileName) {
	    fileName++;  /* skip separator */
	}
    }
    /* if filename okay and mime-type found, launch app */
    if (fileName && tokenP) {
	alb = IACPCreateDefaultLaunchBlock((engineMode ?
					    MSG_GEN_PROCESS_OPEN_ENGINE :
					    MSG_GEN_PROCESS_OPEN_APPLICATION));
	if (alb) {
	    albP = MemLock(alb);
	    if (albP) {
		int retry;
		FileLongName retryName;
		/* copy file into SP_PRIVATE_DATA/impdoc */
		FilePushDir();
		FileSetStandardPath(SP_PRIVATE_DATA);
		FileCreateDir((char*)_TEXT("impdoc"));
		FileSetCurrentPath(SP_PRIVATE_DATA, (char*)_TEXT("impdoc"));
		/* try a few times to get unique name */
		retry = 0;
		*retryName = C_NULL;
		while (retry < 10) {
		    (void)FileGetAttributes((char*)(*retryName ? retryName : fileName));
		    if (ThreadGetError() == ERROR_FILE_NOT_FOUND) {
			break;
		    } else {
			word nameLen = strlen(fileName);
			TCHAR *dotP = strrchr(fileName, '.');
			if (dotP) {
			    /* have dot */
			    strncpy(retryName, fileName, dotP-fileName);
			    if (nameLen > FILE_LONGNAME_LENGTH-2) {
				/* change last char before last dot to digit */
				retryName[(dotP-fileName)-2] = '-';
				retryName[(dotP-fileName)-1] = retry+'0';
				/* add extension back in */
				strcpy(retryName+(dotP-fileName), dotP);
			    } else {
				/* add digit before extension */
				retryName[(dotP-fileName)] = '-';
				retryName[(dotP-fileName)+1] = retry+'0';
				/* add extension back in */
				strcpy(retryName+(dotP-fileName)+2, dotP);
			    }
			} else {
			    /* no dot */
			    strcpy(retryName, fileName);
			    if (nameLen > FILE_LONGNAME_LENGTH-2) {
				/* change last char to digit */
				retryName[FILE_LONGNAME_LENGTH-2] = '-';
				retryName[FILE_LONGNAME_LENGTH-1] = retry+'0';
			    } else {
				/* append digit */
				retryName[nameLen] = '-';
				retryName[nameLen+1] = retry+'0';
				retryName[nameLen+2] = C_NULL;
			    }
			}
		    }
		    retry++;  /* try next one */
		}
		/* either found available name, or gave up (just overwrite
		   last retryName) */
		if (FileCopy((char*)file, (char*) (*retryName ? retryName : fileName), 0, 0) == 0) {
		    /* store filename */
		    strcpy(albP->ALB_dataFile, *retryName ? retryName : fileName);
		    /* store path */
		    strcpy(albP->ALB_path, _TEXT("impdoc"));
		    albP->ALB_diskHandle = SP_PRIVATE_DATA;
		    MemUnlock(alb);
		    extConn = IACPConnect(tokenP, IACPCF_FIRST_ONLY, alb,
					  (optr)0, &numServers);
		    if (extConn) {
			IACPShutdown(extConn, (optr)0);
			/* success */
			tad->TAD_type = TAD_TYPE_NOP;
			if (deathToProcess)
			{
			    optr appobj = GeodeGetAppObject(GeodeGetProcessHandle());
			    if (appobj != NullOptr)
				@send, forceQueue appobj::MSG_META_QUIT();
			}
		    }
		}
		FilePopDir();
	    } else {
		/* can't lock ALB */
		MemFree(alb);
	    }
	}
    }
    if (tad->TAD_type == TAD_TYPE_HTML_OPTR) {
	retVal = (dword)ToolsFormatMessage(@MsgCouldntStartApp);
    }
    return retVal;
}

#pragma argsused
char * _pascal _export MimeDrvInfo(_MimeInfoParams_)
{
    return memcpy(buf, formatList, formatSize);
}

#pragma argsused
Boolean _pascal _export LibraryEntry(LibraryCallType ty, GeodeHandle client)
{
     if (ty == LCT_ATTACH)
     {
          /* read mappings from .ini file */
          BuildAssocList();
          EC_ERROR_IF(formatSize > MIME_INFO_MAXBUF*sizeof(TCHAR), -1);
	  InitFileReadBoolean("mimedoc", "useLongname", &useLongname);
     }

     return FALSE;
}
