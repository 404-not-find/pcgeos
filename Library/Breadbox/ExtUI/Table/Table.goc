/**************************************************************************
*
*   Copyright (C) 1999  Breadbox Computer Company
*                       All Rights Reserved
*   
*   Project:    Extended UI Library
*   Modul:      Library/ExtUI/Table/Table.goc
*   Author:     Falk Rehwagen
*   Created:    June 9th 1999
*
**************************************************************************/


/**************************************************************************
*       Includes
**************************************************************************/

/* GEOS headers */
@include <stdapp.goh>

/* library herader */
@include "ExtUI/Table.goh"
@include "ExtUI/Utils.goh"
@include "Table/TblItemC.goh"


/**************************************************************************
*       Class Declaration
**************************************************************************/

@classdecl ExtUITableClass ;

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_QUERY_LINE {

    if(pself->EUITI_emptyState) {
    
        if(item == 0) {
        
            if(pself->EUITI_emptyStateText) {

                @call oself::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
                                item,
                                /*RIMF_NOT_ENABLED jfh */ 0 ,
                                0,
                                0,
                                0,
                                VMDT_TEXT,
                                VMST_OPTR,
                                ConstructOptr(HandleOf(oself), pself->EUITI_emptyStateText)) ;
            }
        }

    } else {

        /* if the dynamic list queries a line */

        /* if we have defined clumns */
        if(pself->EUITI_columnDesc) {
    
            /* draw each field */
            @send oself::MSG_EXTUI_TABLE_DRAW_FIELD(list, item) ;
        }
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_APPLY {

    @send (pself->EUITI_destination)::
                {GEN_ITEM_GROUP_APPLY_MSG}
                        (pself->EUITI_applyMsg)(
                            selection,
                            numSelections,
                            stateFlags) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_DOUBLE_PRESS {

    @send (pself->EUITI_destination)::
                {GEN_ITEM_GROUP_APPLY_MSG}
                        (pself->EUITI_doublePressMsg)(
                            selection,
                            numSelections,
                            stateFlags) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_GET_FIELD_BOUNDS {

    if(pself->EUITI_columnDesc) {
    
        ExtUITableColumn *p_column ;
        word columnCount ;
        word freeWidth, freeCount ;
        word lastWidth ;
        dword width, height ;
        word xPos ;
        word columnWidth ;
        optr itemChild ;
        Rectangle rect ;

        p_column = LMemDeref(ConstructOptr(
                            HandleOf(oself), pself->EUITI_columnDesc)) ;

        itemChild = @call oself::
                        MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(item) ;

        @call itemChild::MSG_VIS_GET_BOUNDS(&rect) ;
    
        width = rect.R_right - rect.R_left ;
        width = pself->EUITI_viewWidth ;
        height =  rect.R_bottom - rect.R_top ;

        freeCount = 0 ; freeWidth = width ;
        columnCount = 0 ;
        while(p_column->EUITC_width) {

            if(p_column->EUITC_width != EUITCW_EXPAND) {

                if(p_column->EUITC_width & EUITCW_PERCENT) {
                
                    /* this value is in percent */
                    columnWidth = (width * 
                                    (p_column->EUITC_width & 
                                        EUITCW_VALUE_MASK)) / 100 ;

                } else {
                
                    columnWidth = p_column->EUITC_width ;
                } 
                
                freeWidth -= columnWidth ;

            } else {
                
                freeCount++ ;
            }

            p_column++ ;
        }

        p_column = LMemDeref(ConstructOptr(
                        HandleOf(oself), pself->EUITI_columnDesc)) ;

        xPos = 0 ;
        columnCount = 0 ;
        lastWidth = freeWidth ;
        while(p_column->EUITC_width) {

            if(p_column->EUITC_width == EUITCW_EXPAND) {

                columnWidth = freeWidth / freeCount ;
                lastWidth -= freeWidth / freeCount ;

            } else {

                if(p_column->EUITC_width & EUITCW_PERCENT) {
             
                    /* this value is in percent */
                    columnWidth = (width * 
                                    (p_column->EUITC_width & 
                                        EUITCW_VALUE_MASK)) / 100 ;

                } else {
            
                    columnWidth -= p_column->EUITC_width ;
                } 
            
                freeWidth -= columnWidth ;
            }

            if((columnCount >= column) && 
                                (columnCount < (column + ccount))) {
        
                bounds[columnCount - column].R_top = 1 ;
                bounds[columnCount - column].R_bottom = height - 1 ;
                bounds[columnCount - column].R_left = xPos ;
                bounds[columnCount - column].R_right = xPos + columnWidth ;
            
                if(!(p_column + 1)->EUITC_width) {

                    bounds[columnCount - column].R_right += lastWidth ;
                }

                if(@call oself::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() == (item + 1)) {
        
                    bounds[columnCount - column].R_top-- ;
                    bounds[columnCount - column].R_bottom-- ;
                }
            }

            xPos += columnWidth ;


            p_column++ ;
            columnCount++ ;
        }

        p_column = LMemDeref(ConstructOptr(
                        HandleOf(oself), pself->EUITI_columnDesc)) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_DRAW_FIELD {

    @send (pself->EUITI_destination)::
        {EXTUI_TABLE_DRAW_FIELD_MSG}
            (pself->EUITI_drawMsg)(list, item) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_UPDATE_LINE {

    @send oself::MSG_GEN_DYNAMIC_LIST_QUERY_ITEM_MONIKER(oself, line) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_LINE_SET_IDENTIFIER {

    if(identifier < pself->GDLI_numItems) {

        @send (pself->EUITI_destination)::
            {EXTUI_TABLE_INFO_FIELD_MSG}
                (pself->EUITI_infoMsg)(oself, identifier) ;    
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_DRAW_FIELD_TEXT {

    /* do we already have a line gstring */
    if(!(pself->EUITI_tempGString)) {
    
        WWFixedAsDWord fontSize ;
        FontID fontID ;

        pself->EUITI_tempMem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
        pself->EUITI_tempGString = 
                            GrCreateGString(
                                    pself->EUITI_tempMem, GST_CHUNK, 
                                    (word*) &pself->EUITI_tempChunk) ;
        pself->EUITI_tempItem = item ;

        GrSaveState(pself->EUITI_tempGString) ;

        fontID = GrGetFont(pself->EUITI_tempGString, &fontSize) ;
    
        if(pself->EUITI_fontID) {
            
            fontID = pself->EUITI_fontID ;
        }

        if(pself->EUITI_fontSize) {
            
            fontSize = pself->EUITI_fontSize ;
        }

        GrSetFont(pself->EUITI_tempGString, fontID, fontSize) ;

    } else {   

        if(item != pself->EUITI_tempItem) {

            return ;
        }
    }

    /* draw the new field */
    GrSetClipRect(
            pself->EUITI_tempGString, PCT_REPLACE, bounds->
            R_left, bounds->R_top, 
            bounds->R_right, bounds->R_bottom) ;

    ExtUIUtilsDrawTextLimited(pself->EUITI_tempGString, 
                    bounds->R_left, bounds->R_top, text,
                    bounds->R_right - bounds->R_left - 1, 
                    (attrs & EUITCA_JUSTIFICATION) == 
                                        EUITCA_RIGHT_JUSTIFIED) ;

    /* if we are final, draw it */
    if(final) {
    
        GrRestoreState(pself->EUITI_tempGString) ;

        GrEndGString(pself->EUITI_tempGString) ;

        /* Get rid of the copy */
        GrDestroyGString(
                    pself->EUITI_tempGString, 0, GSKT_LEAVE_DATA) ;

        /* set the new item monikter */
        @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
                      item,
                      0,
                      pself->EUITI_tempHeight,
                      pself->EUITI_tempWidth,
                      0,
                      VMDT_GSTRING,
                      VMST_OPTR,
                      ConstructOptr(pself->EUITI_tempMem, 
                                           pself->EUITI_tempChunk)) ;

        /* destroy the gstring */
        pself->EUITI_tempGString = 0 ;
        
        MemFree(pself->EUITI_tempMem) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_DRAW_FIELD_BITMAP_TEXT {

    word bmpHeight, areaHeight ;
    Bitmap *p_bitmap ;

    /* do we already have a line gstring */
    if(!(pself->EUITI_tempGString)) {
    
        WWFixedAsDWord fontSize ;
        FontID fontID ;

        pself->EUITI_tempMem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
        pself->EUITI_tempGString = 
                            GrCreateGString(
                                    pself->EUITI_tempMem, GST_CHUNK, 
                                    (word*) &pself->EUITI_tempChunk) ;
        pself->EUITI_tempItem = item ;

        GrSaveState(pself->EUITI_tempGString) ;

        fontID = GrGetFont(pself->EUITI_tempGString, &fontSize) ;
    
        if(pself->EUITI_fontID) {
            
            fontID = pself->EUITI_fontID ;
        }

        if(pself->EUITI_fontSize) {
            
            fontSize = pself->EUITI_fontSize ;
        }

        GrSetFont(pself->EUITI_tempGString, fontID, fontSize) ;

    } else {   

        if(item != pself->EUITI_tempItem) {

            return ;
        }
    }

    /* draw the new field */
    GrSetClipRect(
            pself->EUITI_tempGString, PCT_REPLACE, bounds->
            R_left, bounds->R_top, 
            bounds->R_right, bounds->R_bottom) ;

    MemLock(HandleOf(bitmap)) ;

    p_bitmap = LMemDeref(bitmap) ;

    bmpHeight = p_bitmap->B_height ;
    areaHeight = bounds->R_bottom - bounds->R_top ;

    GrDrawBitmap(
        pself->EUITI_tempGString, 
        bounds->R_left, bounds->R_top + areaHeight / 2 - bmpHeight / 2, 
        p_bitmap, 0) ;

    MemUnlock(HandleOf(bitmap)) ;


    bounds->R_left += 20 ;

    ExtUIUtilsDrawTextLimited(pself->EUITI_tempGString, 
                    bounds->R_left, bounds->R_top, text,
                    bounds->R_right - bounds->R_left - 1, 
                    (attrs & EUITCA_JUSTIFICATION) == 
                                        EUITCA_RIGHT_JUSTIFIED) ;

    /* if we are final, draw it */
    if(final) {
    
        GrRestoreState(pself->EUITI_tempGString) ;

        GrEndGString(pself->EUITI_tempGString) ;

        /* Get rid of the copy */
        GrDestroyGString(
                    pself->EUITI_tempGString, 0, GSKT_LEAVE_DATA) ;

        /* set the new item monikter */
        @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
                      item,
                      0,
                      pself->EUITI_tempHeight,
                      pself->EUITI_tempWidth,
                      0,
                      VMDT_GSTRING,
                      VMST_OPTR,
                      ConstructOptr(pself->EUITI_tempMem, 
                                           pself->EUITI_tempChunk)) ;

        /* destroy the gstring */
        pself->EUITI_tempGString = 0 ;
        
        MemFree(pself->EUITI_tempMem) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_INITIALIZE {

    @send oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(lines) ;
    pself->EUITI_lines = lines ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_SPEC_BUILD {
    
    CompSizeHintArgs fixedSize ;

    if(pself->EUITI_doublePressMsg) {

        Message msg = MSG_EXTUI_TABLE_DOUBLE_PRESS ;
    
        @call oself::MSG_META_ADD_VAR_DATA(
                        ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS,
                        sizeof(Message),
                        (word *) &msg) ;
    } 

    if(pself->EUITI_lineHeight) {

        fixedSize.CSHA_width = 0 ;
        fixedSize.CSHA_height = pself->EUITI_lineHeight ;
        fixedSize.CSHA_count = 0 ;
        @call oself::MSG_META_ADD_VAR_DATA(HINT_INITIAL_SIZE, 
                                    sizeof(fixedSize), &fixedSize) ;

    } else if(pself->EUITI_fontSize) {
        
        fixedSize.CSHA_width = 0 ;
        fixedSize.CSHA_height = 
                    IntegerOf(pself->EUITI_fontSize) * 150 / 100 ;
        fixedSize.CSHA_count = 0 ;
        @call oself::MSG_META_ADD_VAR_DATA(HINT_INITIAL_SIZE, 
                                    sizeof(fixedSize), &fixedSize) ;
    }

    pself = ObjDerefGen(oself) ;

    @send oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->EUITI_lines) ;
    @callsuper() ;
}
/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_SPEC_UNBUILD {

    @callsuper() ;

    @call oself::MSG_META_DELETE_VAR_DATA(
                    ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_META_CONTENT_VIEW_SIZE_CHANGED {

    pself->EUITI_viewWidth = viewWidth ;

    @callsuper() ;
    @send oself::MSG_EXTUI_TABLE_RECALC() ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_RECALC {

    word count, itemCount ;

    /* invalidate all items shown */
    itemCount = @call oself::MSG_GEN_COUNT_CHILDREN() ;

	count = 0 ;
	while(count < itemCount) {

        optr childObj ;
        word childIdentifier ;

        childObj = @call oself::MSG_GEN_FIND_CHILD_AT_POSITION(count) ;

        @call childObj::MSG_GEN_ITEM_SET_INTERACTABLE_STATE(FALSE) ;

        childIdentifier = @call childObj::MSG_GEN_ITEM_GET_IDENTIFIER() ;

        if(childIdentifier < pself->GDLI_numItems) {
            
            @send oself::
                MSG_GEN_DYNAMIC_LIST_QUERY_ITEM_MONIKER(
                                              oself, childIdentifier) ;
        }

		count ++ ;
	}
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_GEN_DYNAMIC_LIST_GET_ITEM_CLASS {

    return(&TableItemClass) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_ADD_LINES {

    @call oself::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(item, lines) ;
    @call oself::MSG_EXTUI_TABLE_RECALC() ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_REMOVE_LINES {

    @call oself::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(item, lines) ;
    @call oself::MSG_EXTUI_TABLE_RECALC() ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_SET_COLUMN_WIDTH {

    ExtUITableColumn *p_column ;

    p_column = LMemDeref(ConstructOptr(
                        HandleOf(oself), pself->EUITI_columnDesc)) ;

    while(p_column->EUITC_width) {
    
        if(!col) {
        
            (*p_column) = (*size) ;

            /* update the list */
            @send oself::MSG_EXTUI_TABLE_RECALC() ;

            break ;
        }

        col-- ;
        p_column++ ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITableClass, MSG_EXTUI_TABLE_SET_EMPTY_STATE {

    if(empty) {

        pself->EUITI_emptyState = empty ;
    
        @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(1) ; 
    
    } else {
    
        if(pself->EUITI_emptyState) {

            pself->EUITI_emptyState = empty ;

            @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ; 
        }
    }
}

/*************************************************************************/


