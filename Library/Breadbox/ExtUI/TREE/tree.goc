/**************************************************************************
*
*   Copyright (C) 1999  Breadbox Computer Company
*                       All Rights Reserved
*   
*   Project:    Extended UI Library
*   Modul:      Library/ExtUI/Tree/Tree.goc
*   Author:     Falk Rehwagen, June 9th 1999
*
*
**************************************************************************/


/**************************************************************************
*       Includes
**************************************************************************/

/* GEOS headers */
@include <stdapp.goh>

/* library herader */
@include "ExtUI/Tree.goh"
@include "Table/TblItemC.goh"


/**************************************************************************
*       Internal Type Definition
**************************************************************************/



/**************************************************************************
*       DataResources
**************************************************************************/

@start BitmapResource, data ;

/*-----------------------------------------------------------------------*/

@chunk byte ExpandBitmap[] = {

		Bitmap (9,9,BMC_PACKBITS,(BMF_4BIT)),
		0xfd, 0x88, 0x00, 0x8f, 0x00, 0x8f, 0xfe, 0xff, 
		0x00, 0x8f, 0x04, 0x8f, 0xff, 0x0f, 0xff, 0x8f, 
		0x04, 0x8f, 0xff, 0x0f, 0xff, 0x8f, 0x04, 0x8f, 
		0x00, 0x00, 0x0f, 0x8f, 0x04, 0x8f, 0xff, 0x0f, 
		0xff, 0x8f, 0x04, 0x8f, 0xff, 0x0f, 0xff, 0x8f, 
		0x00, 0x8f, 0xfe, 0xff, 0x00, 0x8f, 0xfd, 0x88, 
		0x00, 0x8f

} ;

/*-----------------------------------------------------------------------*/

@chunk byte UnexpandBitmap[] = {

		Bitmap (9,9,BMC_PACKBITS,(BMF_4BIT)),
		0xfd, 0x88, 0x00, 0x8f, 0x00, 0x8f, 0xfe, 0xff, 
		0x00, 0x8f, 0x00, 0x8f, 0xfe, 0xff, 0x00, 0x8f, 
		0x00, 0x8f, 0xfe, 0xff, 0x00, 0x8f, 0x04, 0x8f, 
		0x00, 0x00, 0x0f, 0x8f, 0x00, 0x8f, 0xfe, 0xff, 
		0x00, 0x8f, 0x00, 0x8f, 0xfe, 0xff, 0x00, 0x8f, 
		0x00, 0x8f, 0xfe, 0xff, 0x00, 0x8f, 0xfd, 0x88, 
		0x00, 0x8f 
} ;

/*-----------------------------------------------------------------------*/

@end BitmapResource ;


/**************************************************************************
*       Class Declaration
**************************************************************************/

@classdecl ExtUITreeClass ;

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_INIT_LINE {

    DrawMask oldDM ;
    word elemSize ;
    ExtUITreeCacheElement *elemPtr ;
    word loopCount ;
    word itemCount ;
    Rectangle bounds ;
    optr itemChild ;

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    HugeArrayLock(
            ClipboardGetClipboardFile(),
            pself->EUITRI_cacheArray,
            lineIndex,
            (void**) &elemPtr,
            &elemSize) ;

    pself->EUITRI_tempLevel = elemPtr->EUITCE_level ;

    HugeArrayUnlock(elemPtr) ;

    /* do we already have a line gstring */
    if(!(pself->EUITI_tempGString)) {
    
        WWFixedAsDWord fontSize ;
        FontID fontID ;

        pself->EUITI_tempMem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
        pself->EUITI_tempGString = 
                            GrCreateGString(
                                    pself->EUITI_tempMem, GST_CHUNK, 
                                    (word*) &pself->EUITI_tempChunk) ;
        pself->EUITI_tempItem = lineIndex ;

        GrSaveState(pself->EUITI_tempGString) ;

        fontID = GrGetFont(pself->EUITI_tempGString, &fontSize) ;
    
        if(pself->EUITI_fontID) {
            
            fontID = pself->EUITI_fontID ;
        }

        if(pself->EUITI_fontSize) {
            
            fontSize = pself->EUITI_fontSize ;
        }

        GrSetFont(pself->EUITI_tempGString, fontID, fontSize) ;

    } else {   

        if(lineIndex != pself->EUITI_tempItem) {

            return ;
        }
    }

    @callsuper oself::ExtUITreeClass::
        MSG_EXTUI_TABLE_GET_FIELD_BOUNDS(lineIndex, pself->EUITRI_treeColumn, 1, &bounds) ;


    GrGetLineMask(pself->EUITI_tempGString, oldDM) ;
    GrSetLineMaskSys(pself->EUITI_tempGString, SDM_50) ;

    itemCount = HugeArrayGetCount(ClipboardGetClipboardFile(), pself->EUITRI_cacheArray) ;

    loopCount = 0 ;
    while(loopCount <= pself->EUITRI_tempLevel) {

        Boolean continued = FALSE ;
        word loopCount2 ;

        loopCount2 = lineIndex + 1 ;
        while(loopCount2 < itemCount) {

            word elemSize ;
            ExtUITreeCacheElement *elemPtr ;

            HugeArrayLock(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray,
                    loopCount2,
                    (void**) &elemPtr,
                    &elemSize) ;
        
            if(elemPtr->EUITCE_level == (loopCount + 1)) {
            
                continued = TRUE ;
                HugeArrayUnlock(elemPtr) ;
                break ;
            }

            if(elemPtr->EUITCE_level < (loopCount + 1)) {
            
                HugeArrayUnlock(elemPtr) ;
                break ;
            }

            HugeArrayUnlock(elemPtr) ;

            loopCount2 ++;
        }

        /* something else is coming on this level before end */
        if(continued) {

            if(lineIndex) {

                if(loopCount < pself->EUITRI_tempLevel) {

                    GrDrawLine(
                        pself->EUITI_tempGString,
                        loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                        bounds.R_top - 1,
                        loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                        bounds.R_bottom) ;
                
                } else {

                    GrDrawLine(
                        pself->EUITI_tempGString,
                        loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                        (bounds.R_top + bounds.R_bottom) / 2,
                        loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                        bounds.R_bottom) ;
                }
                
                                
            } else {

                GrDrawLine(
                    pself->EUITI_tempGString,
                    loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                    (bounds.R_top + bounds.R_bottom) / 2,
                    loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                    bounds.R_bottom) ;
            }
                        
        } else {

            if((loopCount + 1) == pself->EUITRI_tempLevel) {

                GrDrawLine(
                    pself->EUITI_tempGString,
                    loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                    bounds.R_top - 1,
                    loopCount * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
                    (bounds.R_top + bounds.R_bottom) / 2) ;
            }
        }

        loopCount++ ;
    }

    GrDrawLine(
        pself->EUITI_tempGString,
        (pself->EUITRI_tempLevel - 1) * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
        (bounds.R_top + bounds.R_bottom) / 2,
        pself->EUITRI_tempLevel * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2,
        (bounds.R_top + bounds.R_bottom) / 2) ;

    itemChild = @call oself::MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(lineIndex) ;

    /* if children */
    if(children) {

        if(itemChild) {

            @call itemChild::MSG_TABLE_ITEM_SET_ATTRS(TIA_HAS_CHILDREN, 0) ;
        } 

        if(itemCount > (lineIndex + 1)) {
        
            word elemSize ;
            ExtUITreeCacheElement *elemPtr ;
            word nextLevel ;

            HugeArrayLock(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray,
                    lineIndex + 1,
                    (void**) &elemPtr,
                    &elemSize) ;
        
            nextLevel = elemPtr->EUITCE_level ;

            HugeArrayUnlock(elemPtr) ;
            
            MemLock(HandleOf(@ExpandBitmap)) ;

            if(nextLevel > pself->EUITRI_tempLevel) {
                
                /* draw unexpander */
                GrDrawBitmap(
                    pself->EUITI_tempGString,
                    (pself->EUITRI_tempLevel - 1) * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2 - 4,
                    (bounds.R_top + bounds.R_bottom) / 2 - 4,
                    LMemDeref(@UnexpandBitmap), 0 ) ;
            
            } else {
            
                /* draw expander */
                GrDrawBitmap(
                    pself->EUITI_tempGString,
                    (pself->EUITRI_tempLevel - 1) * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2 - 4,
                    (bounds.R_top + bounds.R_bottom) / 2 - 4,
                    LMemDeref(@ExpandBitmap), 0 ) ;
            }


            MemUnlock(HandleOf(@UnexpandBitmap)) ;

        } else {

            MemLock(HandleOf(@UnexpandBitmap)) ;

            /* draw expander */
            GrDrawBitmap(
                pself->EUITI_tempGString,
                (pself->EUITRI_tempLevel - 1) * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2 - 4,
                (bounds.R_top + bounds.R_bottom) / 2 - 4,
                LMemDeref(@ExpandBitmap), 0 ) ;

            MemUnlock(HandleOf(@UnexpandBitmap)) ;
        }

    } else {

        if(itemChild) {

            @call itemChild::MSG_TABLE_ITEM_SET_ATTRS(0, TIA_HAS_CHILDREN) ;
        } 
    }

    GrSetLineMaskCustom(pself->EUITI_tempGString, oldDM) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TABLE_GET_FIELD_BOUNDS {

    @callsuper() ;

    /* if we have an level */
    if(pself->EUITRI_tempLevel && 
        ( (column <= pself->EUITRI_treeColumn) &&
                    (pself->EUITRI_treeColumn < (column + ccount)) )) {

        bounds[pself->EUITRI_treeColumn - column].R_left += 
                                    (pself ->EUITRI_treeStep * 
                                            pself->EUITRI_tempLevel) ;

//        pself->EUITRI_tempLevel = 0 ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_SPEC_BUILD {

    pself->EUITRI_cacheArray = HugeArrayCreate(
                                ClipboardGetClipboardFile(),
                                sizeof(ExtUITreeCacheElement),
                                0) ;

    if(pself->EUITRI_cacheArray) {
    
        /* build the tree */
        @call oself::MSG_EXTUI_TREE_OPEN_NODE(0xFFFF) ;
    }

    @callsuper() ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_SPEC_UNBUILD {

    /* close the tree */
    @call oself::MSG_EXTUI_TREE_CLOSE_NODE(0xFFFF) ;

    /* remove the huge array */
    HugeArrayDestroy(
        ClipboardGetClipboardFile(), pself->EUITRI_cacheArray) ;
    pself->EUITRI_cacheArray = 0 ;

    @callsuper() ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_OPEN_NODE {

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    /* enums the path specified add it to the list and to 
     * the screen */
    if(index == 0xFFFF) {
    
        /* get cache reference */
        @call oself::MSG_EXTUI_TREE_ATTACH_NODE(
                                            oself, 0, 0, EUITAF_ACTIVE_OPEN) ;   

    } else {
  
        word elemSize ;
        ExtUITreeCacheElement *elemPtr ;
        dword parent ;
        word parentIndex ;

        HugeArrayLock(
                ClipboardGetClipboardFile(),
                pself->EUITRI_cacheArray,
                index,
                (void**) &elemPtr,
                &elemSize) ;

        parent = elemPtr->EUITCE_parent ;
        parentIndex = elemPtr->EUITCE_index ;

        HugeArrayUnlock(elemPtr) ;

        /* if not cached yet */
        @call oself::MSG_EXTUI_TREE_ATTACH_NODE(
                    oself, parent, parentIndex, EUITAF_ACTIVE_OPEN) ;   
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_NODE_ATTACHED {

    word newLevel = 0 ;

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    if((node == 0) && (count == 0)) {
    
        @call oself::MSG_EXTUI_TABLE_SET_EMPTY_STATE(TRUE) ;
       
    } else {

        @call oself::MSG_EXTUI_TABLE_SET_EMPTY_STATE(FALSE) ;
    }

    /* add the new children to */
//    if(cache) 
    {

        word itemIndex ;
        word loopCount ;

        /* get the index of the node */
        itemIndex = @call oself::MSG_EXTUI_TREE_FIND_NODE(
                            node, index) ;

        if(itemIndex != 0xFFFF) {

            word elemSize ;
            ExtUITreeCacheElement *elemPtr ;

            HugeArrayLock(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray,
                    itemIndex,
                    (void**) &elemPtr,
                    &elemSize) ;

            newLevel = elemPtr->EUITCE_level ;

            HugeArrayUnlock(elemPtr) ;
        }


        if(count) {

            /* add to caching HugeArray */
            HugeArrayInsert(
                ClipboardGetClipboardFile(),
                pself->EUITRI_cacheArray, count, ((word) itemIndex + 1),
                0) ;

            /* init new items */
            loopCount = 0 ;
            while(loopCount < count) {
        
                word elemSize ;
                ExtUITreeCacheElement *elemPtr ;

                HugeArrayLock(
                        ClipboardGetClipboardFile(),
                        pself->EUITRI_cacheArray,
                        itemIndex + 1 + loopCount,
                        (void**) &elemPtr,
                        &elemSize) ;

                elemPtr->EUITCE_cache = 0 ;
                elemPtr->EUITCE_parent = cache ;
                elemPtr->EUITCE_index = loopCount ;
                elemPtr->EUITCE_level = newLevel + 1 ;

                HugeArrayDirty(elemPtr) ;
                HugeArrayUnlock(elemPtr) ;

                loopCount ++ ;
            }

            /* add items visually */
            @call oself::MSG_EXTUI_TABLE_ADD_LINES(itemIndex + 1, count) ;

            /* set the cache reference */

            /* cascade opening if requested */
            if(newLevel != 1) {

                loopCount = 0 ;
                while(loopCount < count) {
            
                    @call oself::MSG_EXTUI_TREE_ATTACH_NODE(oself, cache, itemIndex + 1 + loopCount, 0) ;   

                    loopCount++ ;
                }
            }

            if(itemIndex != 0xFFFF) {
                
                @send oself::
                    MSG_GEN_DYNAMIC_LIST_QUERY_ITEM_MONIKER(
                                                  oself, itemIndex) ;
            }
        }
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_CLOSE_NODE {

    dword cache ;
    word cacheIdx ;

    cache = @call oself::MSG_EXTUI_TREE_GET_ITEM_CACHE(index, &cacheIdx) ;

    @call oself::MSG_EXTUI_TREE_DETACH_NODE(
                            oself, cache, cacheIdx) ;

    if(cache == 0) {
    
        @call oself::MSG_EXTUI_TABLE_SET_EMPTY_STATE(FALSE) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_GET_ITEM_CACHE {

    dword cache = 0 ;
    word elemSize ;
    ExtUITreeCacheElement *elemPtr ;

    if(!pself->EUITRI_cacheArray) {
    
        return 0 ;
    }

    if(index != 0xFFFF) {

        HugeArrayLock(
                ClipboardGetClipboardFile(),
                pself->EUITRI_cacheArray,
                index,
                (void**) &elemPtr,
                &elemSize) ;

        cache = elemPtr->EUITCE_parent ;
        (*cacheIdx) = elemPtr->EUITCE_index ;

        HugeArrayUnlock(elemPtr) ;
    }

    return(cache) ;
}
/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_FINALIZE_DETACH {

    word itemCount ;
    word index ;

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    /* get current index and item count */
    index = @call oself::MSG_EXTUI_TREE_FIND_NODE(cache, cacheIdx) ;
    itemCount = @call oself::MSG_EXTUI_TREE_COUNT_SUB_ITEMS(index) ;

    /* called by the process to fulfill the detach */
    /* remove the tree from list / ui / memory */
    @call oself::MSG_EXTUI_TABLE_REMOVE_LINES(index + 1, itemCount) ;
    pself = ObjDerefGen(oself) ;

    HugeArrayDelete(
        ClipboardGetClipboardFile(),
        pself->EUITRI_cacheArray,
        itemCount,
        index + 1) ;

    if(index != 0xFFFF) {    

        @send oself::
                MSG_GEN_DYNAMIC_LIST_QUERY_ITEM_MONIKER(
                                              oself, index) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_ATTACH_NODE {

    /* can be defined here but usually defined at the process level
     * so we forward this message to the destination */
    if(pself->EUITI_destination && pself->EUITRI_attachMsg) {

        @send (pself->EUITI_destination)::
                    {EXTUI_TREE_ATTACH_NODE_MSG}
                        (pself->EUITRI_attachMsg)(tree, cache, index, flags) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_DETACH_NODE {

    /* can be defined here but usually defined at the process level
     * so we forward this message to the destination */
    if(pself->EUITI_destination && pself->EUITRI_detachMsg) {

        @send (pself->EUITI_destination)::
                    {EXTUI_TREE_DETACH_NODE_MSG}
                            (pself->EUITRI_detachMsg)(tree, cache, index) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_FIND_NODE {

    word retIndex = 0xFFFF ;

    if(!pself->EUITRI_cacheArray) {
    
        return 0xFFFF ;
    }

    if(node) {
    
        word loopCount ;
        word itemCount ;

        itemCount = HugeArrayGetCount(
                        ClipboardGetClipboardFile(),
                        pself->EUITRI_cacheArray) ;

        /* search the array */
        loopCount = 0 ;
        while(loopCount < itemCount) {
        
            word elemSize ;
            ExtUITreeCacheElement *elemPtr ;

            HugeArrayLock(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray,
                    loopCount,
                    (void**) &elemPtr,
                    &elemSize) ;

            if((elemPtr->EUITCE_parent == node) &&
                (elemPtr->EUITCE_index == index)) {
            
                retIndex = loopCount ;
                HugeArrayUnlock(elemPtr) ;
                break ;
            }

            HugeArrayUnlock(elemPtr) ;

            loopCount ++ ;
        }
    } 

    return(retIndex) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_GET_LINE_ATTRS {

    word elemSize ;
    ExtUITreeCacheElement *elemPtr ;

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    if(HAL_COUNT(HugeArrayLock(
            ClipboardGetClipboardFile(),
            pself->EUITRI_cacheArray,
            line,
            (void**) &elemPtr,
            &elemSize))) {

        (*data) = (*elemPtr) ;

        HugeArrayUnlock(elemPtr) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TABLE_LINE_START_SELECT {

    word elemSize ;
    ExtUITreeCacheElement *elemPtr ;
    Rectangle bounds ;
    word thisLevel ;
    optr childItem ;

    if(!pself->EUITRI_cacheArray) {
    
        return ;
    }

    childItem = @call oself::MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(identifier) ;

    if(childItem) {

        HugeArrayLock(
                ClipboardGetClipboardFile(),
                pself->EUITRI_cacheArray,
                identifier,
                (void**) &elemPtr,
                &elemSize) ;

        thisLevel = elemPtr->EUITCE_level ;

        HugeArrayUnlock(elemPtr) ;

        if(@call childItem::MSG_TABLE_ITEM_GET_ATTRS() & TIA_HAS_CHILDREN) {

            /* get treeing column area */
            @callsuper oself::ExtUITreeClass::
                        MSG_EXTUI_TABLE_GET_FIELD_BOUNDS(
                                    identifier, pself->EUITRI_treeColumn, 1, &bounds) ;

            /* determine position of expander/unexpander symbol */
            bounds.R_left += 
                (thisLevel - 1) * pself->EUITRI_treeStep + pself->EUITRI_treeStep / 2  - 4 ;
            bounds.R_top +=
                (bounds.R_top + bounds.R_bottom) / 2 - 4 ;
            bounds.R_right = bounds.R_left + 9 ;
            bounds.R_bottom = bounds.R_top + 9 ;

            if( ((bounds.R_left <= xPosition)  && (bounds.R_right >= xPosition)) &&
                ((bounds.R_top <= yPosition)  && (bounds.R_bottom >= yPosition)) )  {

                @send oself::MSG_EXTUI_TREE_TOOGLE_NODE(identifier) ;

                retVal->flags = MRF_PROCESSED ;
            }
        }
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_TOOGLE_NODE {

    word subItems ;

    subItems = @call oself::MSG_EXTUI_TREE_COUNT_SUB_ITEMS(line) ;

    if(subItems) {
    
        @call oself::MSG_EXTUI_TREE_CLOSE_NODE(line) ;
    
    } else {
    
        /* it is closed or there are no sub items */
        @call oself::MSG_EXTUI_TREE_OPEN_NODE(line) ;
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_COUNT_SUB_ITEMS {

    word itemCount ;   
    word elemSize ;
    ExtUITreeCacheElement *elemPtr ;
    word listSize ;
    word thisLevel ;

    if(!pself->EUITRI_cacheArray) {
    
        return(0) ;
    }

    listSize = HugeArrayGetCount(
                            ClipboardGetClipboardFile(),
                            pself->EUITRI_cacheArray) ;

    if(index != 0xFFFF) {

        itemCount = 0 ;

        HugeArrayLock(
                ClipboardGetClipboardFile(),
                pself->EUITRI_cacheArray,
                index,
                (void**) &elemPtr,
                &elemSize) ;

        thisLevel = elemPtr->EUITCE_level ;

        HugeArrayUnlock(elemPtr) ;

        index++ ;
        while(index < listSize) {
    
            HugeArrayLock(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray,
                    index,
                    (void**) &elemPtr,
                    &elemSize) ;

            if(elemPtr->EUITCE_level <= thisLevel) {
        
                HugeArrayUnlock(elemPtr) ;
                break ;
            }
        
            HugeArrayUnlock(elemPtr) ;
    
            itemCount++ ;
            index++ ;
        }
    
    } else {
    
        itemCount = listSize ;
    }
        
    return(itemCount) ;
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_SET_NODE_LINE {

    optr itemChild ;

    itemChild = @call oself::MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(item) ;

    if(children) {

        if(itemChild) {

            @call itemChild::MSG_TABLE_ITEM_SET_ATTRS(TIA_HAS_CHILDREN, 0) ;
        } 
  
    } else {

        if(itemChild) {

            @call itemChild::MSG_TABLE_ITEM_SET_ATTRS(0, TIA_HAS_CHILDREN) ;
        }
    }
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_ADD_ITEMS {

@if 0
    /* add the items to the tree structure */
    word newLevel = 0 ;

    /* add the new children to */
    if(cache) {

        word itemIndex ;
        word loopCount ;
        word itemCount ;

        /* get the index of the node */
        itemIndex = @call oself::MSG_EXTUI_TREE_FIND_NODE_PARENT(cache) ;
        itemCount = @call oself::MSG_EXTUI_TREE_COUNT_SUB_ITEMS(itemIndex) ;

        if(itemCount) {

            if(itemIndex != 0xFFFF) {

                word elemSize ;
                ExtUITreeCacheElement *elemPtr ;

                HugeArrayLock(
                        ClipboardGetClipboardFile(),
                        pself->EUITRI_cacheArray,
                        itemIndex,
                        &elemPtr,
                        &elemSize) ;

                newLevel = elemPtr->EUITCE_level ;

                HugeArrayUnlock(elemPtr) ;
            }

            if(count) {

                /* add to caching HugeArray */
                HugeArrayInsert(
                    ClipboardGetClipboardFile(),
                    pself->EUITRI_cacheArray, count, ((word) itemIndex + 1 + start),
                    0) ;

                /* init new items */
                loopCount = 0 ;
                while(loopCount < count) {
        
                    word elemSize ;
                    ExtUITreeCacheElement *elemPtr ;

                    HugeArrayLock(
                            ClipboardGetClipboardFile(),
                            pself->EUITRI_cacheArray,
                            itemIndex + 1 + loopCount + start,
                            &elemPtr,
                            &elemSize) ;

                    elemPtr->EUITCE_cache = 0 ;
                    elemPtr->EUITCE_parent = cache ;
                    elemPtr->EUITCE_index = loopCount ;
                    elemPtr->EUITCE_level = newLevel + 1 ;

                    HugeArrayDirty(elemPtr) ;
                    HugeArrayUnlock(elemPtr) ;

                    loopCount ++ ;
                }

                /* add items visually */
                @call oself::MSG_EXTUI_TABLE_ADD_LINES(itemIndex + 1, count) ;

                /* set the cache reference */

                /* cascade opening if requested */
                if(newLevel != 1) {

                    loopCount = 0 ;
                    while(loopCount < count) {
            
                        @call oself::MSG_EXTUI_TREE_ATTACH_NODE(oself, cache, itemIndex + 1 + loopCount, 0) ;   

                        loopCount++ ;
                    }
                }
            }
                    
        } else {

            /* update the item if not added something */
            if(itemIndex != 0xFFFF) {
            
                @send oself::
                    MSG_GEN_DYNAMIC_LIST_QUERY_ITEM_MONIKER(
                                                  oself, itemIndex) ;
            }
        }
    }
@endif
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_REMOVE_ITEMS {

    /* remove items visually */

    /* detach them */

    /* remove them from the tree storage */
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_UPDATE_NODE {

    
}

/*-----------------------------------------------------------------------*/

@method ExtUITreeClass, MSG_EXTUI_TREE_INITIALIZE {

    /* close the tree */
    @call oself::MSG_EXTUI_TREE_CLOSE_NODE(0xFFFF) ;
    @call oself::MSG_EXTUI_TREE_OPEN_NODE(0xFFFF) ;
}

/*************************************************************************/
