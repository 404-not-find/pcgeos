/***********************************************************************
 *
 * MODULE:    expjpeg (Jpeg Export)
 * FILE:      expjpeg.goc
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <graphics.h>
#include <Ansi/stdio.h>
#include <jpeglib.h>
@include <impex.goh>
#include <xlatLib.h>
#include <Ansi/string.h>
#include <gstring.h>
@include "Palette/palette.goh"

extern word set_error_handler(word *context);

/*
 * Sample routine for JPEG compression.  We assume that the target file name
 * and a compression quality factor are passed in.
 */

dword _pascal
JpegExport(ExportFrame *frame)
{
  /* This struct contains the JPEG compression parameters and pointers to
   * working space (which is allocated as needed by the JPEG library).
   * It is possible to have several such structures, representing multiple
   * compression/decompression processes, in existence at once.  We refer
   * to any one struct (and its associated working data) as a "JPEG object".
   */
  struct jpeg_compress_struct cinfo;
  /* This struct represents a JPEG error handler.  It is declared separately
   * because applications often want to supply a specialized error handler
   * (see the second half of this file for an example).  But here we just
   * take the easy way out and use the standard error handler, which will
   * print a message on stderr and call exit() if compression fails.
   * Note that this struct must live as long as the main JPEG parameter
   * struct, to avoid dangling-pointer problems.
   */
  struct jpeg_error_mgr jerr;
  /* More stuff */
  FILE * outfile = NULL;		/* target file */
  JSAMPROW row_pointer[1];	/* pointer to JSAMPLE row[s] */

  VMBlockHandle bmblock;
  MemHandle bmmem;
  GStateHandle bmstate;
  Handle gstring;
  sword image_width, image_height;
  Rectangle rect;
  byte *palptr, *bmptr, *bufptr;
  MemHandle palette = NullHandle, buffer = NullHandle;
  word offset;
  word size;
  byte *lineptr;
  word count;
#if 1
  word idxpal, idx ;
#else
  byte *lineptr2;
  byte *idxpal;
  byte *idx ;
#endif

  word element;
  FileHandle tmpfile; 
  word quality, *qptr;
  word color ;
  word i ;
  word errorHandlerContext;

  /* getting quality */ 
  qptr = MemLock(frame->EF_exportOptions);
  quality = *qptr;
  MemUnlock(frame->EF_exportOptions);

  /* Step 1: allocate and initialize JPEG compression object */

  /* We have to set up the error handler first, in case the initialization
   * step fails.  (Unlikely, but it could happen if you are out of memory.)
   * This routine fills in the contents of struct jerr, and returns jerr's
   * address which we place into the link field in cinfo.
   */
  cinfo.err = jpeg_std_error(&jerr);

  /* set error handler */
  if (!set_error_handler(&errorHandlerContext)) {
      jpeg_set_error_handler_context((j_common_ptr)&cinfo, errorHandlerContext);
  } else {
      jpeg_set_error_handler_context((j_common_ptr)&cinfo, 0);
      jpeg_destroy_decompress((j_decompress_ptr)&cinfo);
	  if (buffer != NullHandle)
		MemFree(buffer);
	  if (palette != NullHandle)
		MemFree(palette);
	  if (outfile)
		fdclose(outfile);
      return TE_EXPORT_ERROR;
  }

  /* Now we can initialize the JPEG compression object. */
  jpeg_create_compress(&cinfo);

  /* Step 2: specify data destination (eg, a file) */
  /* Note: steps 2 and 3 can be done in either order. */

  /* Here we use the library-supplied code to send compressed data to a
   * stdio stream.  You can also write your own code to do something else.
   * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
   * requires it in order to write binary files.
   */
  if ((outfile = fdopen(frame->EF_outputFile, "wV")) == NULL)
    return TE_FILE_WRITE;

  /* calculating size of output bitmap */
  gstring = GrLoadGString(frame->EF_transferVMFile, GST_VMEM,
                          VMCHAIN_GET_VM_BLOCK(frame->EF_transferVMChain));
  bmstate = GrCreateState(0);
  GrGetGStringBounds(gstring, bmstate, 0, &rect);
  image_width = rect.R_right - rect.R_left - 2;
  image_height = rect.R_bottom - rect.R_top - 2;
  if (image_width <= 0)
      image_width = 1 ;
  if (image_height <= 0)
      image_height = 1 ;
  GrDestroyState(bmstate);

  /* creating output bitmap */
  bmblock = GrCreateBitmap(BMF_8BIT|BMT_PALETTE|BMT_COMPLEX,
                           image_width, image_height,
                           frame->EF_transferVMFile, 0, &bmstate);
  GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);

  /* get best palette from gstring */ 
  palette = PalParseGString(gstring, 256);

  /* attach palette to bitmap */
  if( palette != 0)
  {
    palptr = MemLock(palette);
    bmptr = VMLock(frame->EF_transferVMFile, bmblock, &bmmem);
    offset = bmptr[0x28]+256*(bmptr[0x29]);
    offset += 0x1c;
//    memcpy(&(bmptr[offset]), palptr,3*256);
    memcpy(palptr, &(bmptr[offset]), 3*256);
    VMDirty(bmmem);
    VMUnlock(bmmem);
    MemUnlock(palette);
  } 

  /* writing gstring */
  bmstate = GrEditBitmap(frame->EF_transferVMFile, bmblock, 0);

  GrCreatePalette(bmstate);
  palptr = MemLock(palette);
//  GrSetPalette(bmstate, palptr, 0, 256);
  MemUnlock(palette);
  //WinRealizePalette(GrGetWinHandle(bmstate));

  GrSetAreaColorMap(bmstate, CMT_CLOSEST);
  GrDrawGString(bmstate, gstring, (-rect.R_left)-1, (-rect.R_top)-1, 0, &element);
  GrDestroyGString(gstring, 0, GSKT_LEAVE_DATA);
  GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);

  jpeg_stdio_dest(&cinfo, outfile);

  /* Step 3: set parameters for compression */

  /* First we supply a description of the input image.
   * Four fields of the cinfo struct must be filled in:
   */
  cinfo.image_width = image_width; 	/* image width and height, in pixels */
  cinfo.image_height = image_height;
  cinfo.input_components = 3;		/* # of color components per pixel */
  cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
  /* Now use the library's routine to set default compression parameters.
   * (You must set at least cinfo.in_color_space before calling this,
   * since the defaults depend on the source color space.)
   */
  jpeg_set_defaults(&cinfo);
  /* Now you can set any non-default parameters you wish to.
   * Here we just illustrate the use of quality (quantization table) scaling:
   */
  jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);

  /* Step 4: Start compressor */

  /* TRUE ensures that we will write a complete interchange-JPEG file.
   * Pass TRUE unless you are very sure of what you're doing.
   */
  jpeg_start_compress(&cinfo, TRUE);

  /* Step 5: while (scan lines remain to be written) */
  /*           jpeg_write_scanlines(...); */

  /* Here we use the library's state variable cinfo.next_scanline as the
   * loop counter, so that we don't have to keep track ourselves.
   * To keep things simple, we pass one scanline per call; you can pass
   * more if you wish, though.
   */
  buffer = MemAlloc(image_width * 3, 0, 0);  /* JSAMPLEs per row in image_buffer */

  bufptr = MemLock(buffer);
  if(palette != 0)
    palptr = MemLock(palette);

  while (cinfo.next_scanline < cinfo.image_height) {
    /* jpeg_write_scanlines expects an array of pointers to scanlines.
     * Here the array is only one element long, but you could pass
     * more than one scanline at a time if that's more convenient.
     */

    HugeArrayLock(frame->EF_transferVMFile ,bmblock,
                  cinfo.next_scanline,(void**)&lineptr,&size);


#if 1
    count = 0;
    while(count != image_width)
    {

      idx = count * 3;
      idxpal = lineptr[count] * 3;
      bufptr[idx] = palptr[idxpal];
      bufptr[idx + 1] = palptr[idxpal + 1];
      bufptr[idx + 2] = palptr[idxpal + 2];

      count++;
    }
#else
    count = image_width ;
    idx = bufptr ;
    lineptr2 = lineptr;
    while(count--)
    {
      idxpal = palptr + 3*(*(lineptr2++)) ;
      ((word *)idx)[0] = ((word *)idxpal)[0] ;
//      idx[1] = idxpal[1] ;
      idx[2] = idxpal[2] ;
      idx += 3 ;
    }
#endif

    HugeArrayUnlock(lineptr);

    row_pointer[0] = bufptr;
    (void) jpeg_write_scanlines(&cinfo, row_pointer, 1);
  }

  /* Add 8 lines of padding to ensure the jpeg works on badly written */
  /* importers like Word 7.0 for Win95. */
  for (i=0; i<8; i++)
    (void) jpeg_write_scanlines(&cinfo, row_pointer, 1);

  /* destroying temporary bitmap */
  bmstate = GrEditBitmap(frame->EF_transferVMFile, bmblock, 0);
  GrDestroyBitmap(bmstate, BMD_KILL_DATA);

  MemUnlock(buffer);
  MemFree(buffer);
  buffer = NullHandle;

  /* Step 6: Finish compression */

  jpeg_finish_compress(&cinfo);
  /* After finish_compress, we can close the output file. */
  fdclose(outfile);

  /* Step 7: release JPEG compression object */

  /* This is an important step since it will release a good deal of memory. */
  jpeg_destroy_compress(&cinfo);

  /* And we're done! */
  if(palette != 0)
  {
/*
    FilePushDir();
    FileSetCurrentPath(SP_DOCUMENT, ".");
    tmpfile = FileCreate("TEMP.INF", FILE_CREATE_TRUNCATE|FCF_NATIVE|
                                 FILE_ACCESS_RW, 0);

    if(tmpfile != 0)
    {
      FileWrite(tmpfile, "palette", 7, 0);
      FileWrite(tmpfile, palptr, 3*256, 0);
      FileClose(tmpfile, 0);  
    }
    FilePopDir();
*/
    MemUnlock(palette);
    MemFree(palette);
	palette = NullHandle;
  }

  return(TE_NO_ERROR);
}


/*
 * SOME FINE POINTS:
 *
 * In the above loop, we ignored the return value of jpeg_write_scanlines,
 * which is the number of scanlines actually written.  We could get away
 * with this because we were only relying on the value of cinfo.next_scanline,
 * which will be incremented correctly.  If you maintain additional loop
 * variables then you should be careful to increment them properly.
 * Actually, for output to a stdio stream you needn't worry, because
 * then jpeg_write_scanlines will write all the lines passed (or else exit
 * with a fatal error).  Partial writes can only occur if you use a data
 * destination module that can demand suspension of the compressor.
 * (If you don't know what that's for, you don't need it.)
 *
 * If the compressor requires full-image buffers (for entropy-coding
 * optimization or a multi-scan JPEG file), it will create temporary
 * files for anything that doesn't fit within the maximum-memory setting.
 * (Note that temp files are NOT needed if you use the default parameters.)
 * On some systems you may need to set up a signal handler to ensure that
 * temporary files are deleted if the program is interrupted.  See libjpeg.doc.
 *
 * Scanlines MUST be supplied in top-to-bottom order if you want your JPEG
 * files to be compatible with everyone else's.  If you cannot readily read
 * your data in that order, you'll need an intermediate array to hold the
 * image.  See rdtarga.c or rdbmp.c for examples of handling bottom-to-top
 * source data using the JPEG code's internal virtual-array mechanisms.
 */



