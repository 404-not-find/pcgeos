/****************************************************************************
 *
 * ==CONFIDENTIAL INFORMATION== 
 * COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 * ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 * NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 * Project: Word For Windows Core Library
 * File:    charset.goc
 *
 ***************************************************************************/

#include <geos.h>
#include <heap.h>
#include <lmem.h>
#include <char.h>
#include <ec.h>
#include <localize.h>
#include "warnings.h"
#include "charset.h"


/* Normal code pages start with CP_MIN_MAP_CHAR and end at MAX_MAP_CHAR */
#define CP_MIN_MAP_CHAR 128
#define CP_MAX_MAP_CHAR 255
#define CPNM '.'

#define UNICODE_SET(wc)     ( (byte)((wc) >> 8) )
#define UNICODE_SET_BASE(s) ( (wchar(s) << 8 )
#define MAP_CHAR_BASE(wc)   ( (byte)(wc) )

@start CodePages, data;

@chunk wchar Ansi1252ToGeos[] = {
  /* Extensions based on Windows/ANSI characters set */
  CPNM, CPNM, 0xE2, 0xC4, 0xE3, 0xC9, 0xA0, 0xE0,  0xF6, 0xE4, CPNM, 0xDC, 0xCE, CPNM, CPNM, CPNM,  // 80
  CPNM, 0xD4, 0xD5, 0xD2, 0xD3, 0xA5, 0xD0, 0xD1,  0xF7, 0xAA, CPNM, 0xDD, 0xCF, CPNM, CPNM, 0xD9,  // 90
  /* Regular ISO Latin character set */
  0xCA, 0xC1, 0xA2, 0xA3, 0xDB, 0xB4, 0x7C, 0xA4,  0xFD, 0xA9, 0xBB, 0xC7, 0xC2, 0x1F, 0xA8, 0xF8,  // A0
  0xA1, 0xB1, CPNM, CPNM, 0xAB, 0xB5, 0xA6, 0xE1,  0xFC, CPNM, 0xBC, 0xC8, CPNM, CPNM, CPNM, 0xC0,  // B0
  0xCB, 0xE7, 0xE5, 0xCC, 0x80, 0x81, 0xAE, 0x82,  0xE9, 0x83, 0xE6, 0xE8, 0xED, 0xEA, 0xEB, 0xEC,  // C0
  CPNM, 0x84, 0xF1, 0xEE, 0xEF, 0xCD, 0x85, 0x78,  0xAF, 0xF4, 0xF2, 0xF3, 0x86, 0xDF, CPNM, 0xA7,  // D0
  0x88, 0x87, 0x89, 0x8B, 0x8A, 0x8C, 0xBE, 0x8D,  0x8F, 0x8E, 0x90, 0x91, 0x93, 0x92, 0x94, 0x95,  // E0
  CPNM, 0x96, 0x98, 0x97, 0x99, 0x9B, 0x9A, 0xD6,  0xBF, 0x9D, 0x9C, 0x9E, 0x9F, 0xDE, CPNM, 0xD8   // F0
};
@localize not;

@chunk wchar GeosToAnsi1252[] = {
  0xC4, 0xC5, 0xC7, 0xC9, 0xD1, 0xD6, 0xDC, 0xE1,  0xE0, 0xE2, 0xE4, 0xE3, 0xE5, 0xE7, 0xE9, 0xE8,  // 80
  0xEA, 0xEB, 0xED, 0xEC, 0xEE, 0xEF, 0xF1, 0xF3,  0xF2, 0xF4, 0xF6, 0xF5, 0xFA, 0xF9, 0xFB, 0xFC,  // 90
  0x86, 0xB0, 0xA2, 0xA3, 0xA7, 0x95, 0xB6, 0xDF,  0xAE, 0xA9, 0x99, 0xB4, 0xA8, CPNM, 0xC6, 0xD8,  // A0
  CPNM, 0xB1, CPNM, CPNM, 0xA5, 0xB5, CPNM, CPNM,  CPNM, CPNM, CPNM, 0xAA, 0xBA, CPNM, 0xE6, 0xF8,  // B0
  0xBF, 0xA1, 0xAC, CPNM, 0x83, CPNM, CPNM, 0xAB,  0xBB, 0x85, 0xA0, 0xC0, 0xC3, 0xD5, 0x8C, 0x9C,  // C0
  0x96, 0x97, 0x93, 0x94, 0x91, 0x92, 0xF7, CPNM,  0xFF, 0x9F, CPNM, 0xA4, 0x8B, 0x9B, 0xFD, 0xDD,  // D0
  0x87, 0xB7, 0x82, 0x84, 0x89, 0xC2, 0xCA, 0xC1,  0xCB, 0xC8, 0xCD, 0xCE, 0xCF, 0xCC, 0xD3, 0xD4,  // E0
  CPNM, 0xD2, 0xDA, 0xDB, 0xD9, CPNM, 0x88, 0x98,  0xAF, CPNM, CPNM, CPNM, 0xB8, 0xA8, CPNM, CPNM   // F0
};
@localize not;

@end CodePages;

@start UnicodePage00, data;

@chunk wchar UC00ToGeos[] = {
  CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM,  CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM,  // 80
  CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM,  CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM, CPNM,  // 90
  0xCA, 0xC1, 0xA2, 0xA3, 0xDB, 0xB4, CPNM, 0xA4,  0xAC, 0xA9, 0xBB, 0xC7, 0xC2, CPNM, 0xA8, 0xF8,  // A0
  0xA1, 0xB1, CPNM, CPNM, 0xAB, 0xB5, 0xA6, 0xE1,  0xFC, CPNM, 0xBC, 0xC8, CPNM, CPNM, CPNM, 0xC0,  // B0
  0xCB, 0xE7, 0xE5, 0xCC, 0x80, 0x81, 0xAE, 0x82,  0xE9, 0x83, 0xE6, 0xE8, 0xED, 0xEA, 0xEB, 0xEC,  // C0
  CPNM, 0x84, 0xF1, 0xEE, 0xEF, 0xCD, 0x85, CPNM,  0xAF, 0xF4, 0xF2, 0xF3, 0x86, 0xDF, CPNM, 0xA7,  // D0
  0x88, 0x87, 0x89, 0x8B, 0x8A, 0x8C, 0xBE, 0x8D,  0x8F, 0x8E, 0x90, 0x91, 0x93, 0x92, 0x94, 0x95,  // E0
  CPNM, 0x96, 0x98, 0x97, 0x99, 0x9B, 0x9A, 0xDB,  0xBF, 0x9D, 0x9C, 0x9E, 0x9F, 0xDE, CPNM, 0xD8   // F0
};
@localize not;

@end UnicodePage00;

DosCodePage nCodePage = CP_NIL;
byte nUnicodeSet = 0;
MemHandle mhCodePage = NullHandle;
wchar* pGeosToCodePage = NULL;
wchar* pCodePageToGeos = NULL;

void WFWUnloadCodePage(void)
	{
	if (mhCodePage != NullHandle)
		{
		MemUnlock(mhCodePage);
		mhCodePage = NullHandle;
		}
	pGeosToCodePage = pCodePageToGeos = NULL;
	nCodePage = CP_NIL;
	}

void WFWLoadCodePage(DosCodePage nCP, optr chCPToGeos, optr chGeosToCP)
	{
	/* Make sure our codepage resource is locked. */
	if (mhCodePage == NullHandle)
		{
		if (MemLock(HandleOf(chCPToGeos)) == NULL)
			{
			EC_WARNING (WFW_WARNING_CODEPAGE_LOCK_FAILED);
			WFWUnloadCodePage();
			return;
			}
		mhCodePage = HandleOf(chCPToGeos);
		}
	/* Retrieve pointers to the codepages. */
	pGeosToCodePage = LMemDeref(chGeosToCP);
	pCodePageToGeos = LMemDeref(chCPToGeos);
	if (pGeosToCodePage == NULL || pCodePageToGeos == NULL)
		{
		EC_WARNING (WFW_WARNING_CODEPAGE_DEREF_FAILED);
		WFWUnloadCodePage();
		return;
		}
	nCodePage = nCP;
	}

wchar WFWUnicodeToGeos(wchar ch)
{
    byte set = UNICODE_SET(ch);
    byte base = MAP_CHAR_BASE(ch);
    wchar ret = CPNM;
    
    switch (set)
    {
    case 0x01:                  // 0x0100 - 0x01FF
        if (base == 0x31)
            ret = 0xF5;
        else if (base == 0x52)
            ret = 0xCE;
        else if (base == 0x53)
            ret = 0xCF;
        else if (base == 0x78)
            ret = 0xD9;
        else if (base == 0x92)
            ret = 0xC4;
        break;
    case 0x02:                  // 0x0200 - 0x02FF
        if (base == 0xC6)
            ret = 0xF6;
        else if (base == 0xC7)
            ret = 0xFF;
        else if (base == 0xD8)
            ret = 0xF9;
        else if (base == 0xD9)
            ret = 0xFA;
        else if (base == 0xDA)
            ret = 0xFB;
        else if (base == 0xDB)
            ret = 0xFE;
        else if (base == 0xDC)
            ret = 0xF7;
        break;
    case 0x03:                  // 0x0300 - 0x03FF
        if (base == 0x0B)
            ret = 0xFD;
        else if (base == 0xC0)
            ret = 0xB9;
        break;
    case 0x20:                  // 0x2000 - 0x20FF
        if (base == 0x13)
            ret = 0xD0;
        else if (base == 0x14)
            ret = 0xD1;
        else if (base == 0x18)
            ret = 0xD4;
        else if (base == 0x19)
            ret = 0xD5;
        else if (base == 0x1A)
            ret = 0xE2;
        else if (base == 0x1C)
            ret = 0xD2;
        else if (base == 0x1D)
            ret = 0xD3;
        else if (base == 0x1E)
            ret = 0xE3;
        else if (base == 0x20)
            ret = 0xA0;
        else if (base == 0x21)
            ret = 0xE0;
        else if (base == 0x22)
            ret = 0xA5;
        else if (base == 0x26)
            ret = 0xC9;
        else if (base == 0x30)
            ret = 0xE4;
        else if (base == 0x39)
            ret = 0xDC;
        else if (base == 0x3A)
            ret = 0xDD;
        else if (base == 0x44)
            ret = 0xDA;
        break;
    case 0x21:                  // 0x2100 - 0x21FF
        if (base == 0x22)
            ret = 0xAA;
        else if (base == 0x26)
            ret = 0xBD;
        break;
    case 0x22:                  // 0x2200 - 0x22FF
        if (base == 0x02)
            ret = 0xB6;
        else if (base == 0x06)
            ret = 0xC6;
        else if (base == 0x0F)
            ret = 0xB8;
        else if (base == 0x11)
            ret = 0xB7;
        else if (base == 0x1A)
            ret = 0xC3;
        else if (base == 0x1E)
            ret = 0xB0;
        else if (base == 0x2B)
            ret = 0xBA;
        else if (base == 0x48)
            ret = 0xC5;
        else if (base == 0x60)
            ret = 0xAD;
        else if (base == 0x64)
            ret = 0xB2;
        else if (base == 0x65)
            ret = 0xB3;
        break;
    case 0x25:                  // 0x2500 - 0x25FF
        if (base == 0xCA)
            ret = 0xD7;
        break;
    }
    return ret;
}

wchar WFWCodePageToGeos(wchar ch)
	{
	if (nCodePage == CP_NIL)
		return ch;
	if (nCodePage == CP_UNICODE)
	{
	    if (ch > CP_MAX_MAP_CHAR)
    	    return WFWUnicodeToGeos(ch);
	}
	if (!mhCodePage)
		return LocalCodePageToGeosChar(ch, nCodePage, CPNM);
	if (!pCodePageToGeos)
		return CPNM;
	if (ch >= CP_MIN_MAP_CHAR && ch <= CP_MAX_MAP_CHAR)
		ch = pCodePageToGeos[ch - CP_MIN_MAP_CHAR];
	return ch;
	}

wchar WFWGeosToCodePage(wchar ch)
	{
	if (nCodePage == CP_NIL)
		return ch;
	if (!mhCodePage)
		return LocalGeosToCodePageChar(ch, nCodePage, CPNM);
	if (!pGeosToCodePage)
		return CPNM;
	if (ch >= CP_MIN_MAP_CHAR && ch <= CP_MAX_MAP_CHAR)
		ch = pGeosToCodePage[ch - CP_MIN_MAP_CHAR];
	return ch;
	}

void WFWSetCodePage(DosCodePage nCP)
	{
	/* If this codepage is already set, return. */
	if (nCodePage == nCP)
		return;

    /* Unload the current codepage. */
	WFWUnloadCodePage();

	/* If this codepage is supported by us, load it. */
	/* Otherwise, unload ours, and see if GEOS supports it. */
	switch (nCP)
		{
		case CP_WESTEUROPE:
			WFWLoadCodePage(nCP, @Ansi1252ToGeos, @GeosToAnsi1252);
			break;
		case CP_UNICODE:
		    WFWLoadCodePage(nCP, @UC00ToGeos, @UC00ToGeos);
		    break;
		/* Other codepages go here. */
		default:
			if (LocalIsCodePageSupported(nCP))
				nCodePage = nCP;
			break;
		}
	}

