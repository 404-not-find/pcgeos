/****************************************************************************
 *
 * ==CONFIDENTIAL INFORMATION== 
 * COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 * ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 * NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 * Project: Word For Windows Core Library
 * File:    font.c
 *
 ***************************************************************************/

#include <geos.h>
#include <heap.h>
#include <lmem.h>
#include <chunkarr.h>
#include <ec.h>
#include <Ansi/string.h>
#include <system.h>
#include <char.h>
#include "global.h"
#include "structs.h"
#include "global.h"
#include "warnings.h"
#include "charset.h"
#include "rtfdefs.h"
#include "debug.h"

#pragma warn -pia

#define SEEK(s,o,m) (retval = !StgStreamSeek(s,o,m))
/* Seek relative (from cur pos) */
#define SEEKR(s,o) SEEK(s,o,STG_POS_RELATIVE)
/* Seek absolute (from start) */
#define SEEKA(s,o) SEEK(s,o,STG_POS_START)
#define READ(s,p,c) (retval = (StgStreamRead(s,p,c) == c))
/* Read a variable */
#define READV(s,v) READ(s,&v,sizeof(v))

#define SEEKT(o,m) SEEK(hInputTableStream,o,m)
#define SEEKRT(o) SEEKR(hInputTableStream,o)
#define SEEKAT(o) SEEKA(hInputTableStream,o)
#define READT(p,c) READ(hInputTableStream,p,c)
#define READVT(v) READV(hInputTableStream,v)
#define POSAT() StgStreamPos(hInputTableStream);

#define MAX_FONT_ENTRIES 50

optr FontTable = NullHandle;

typedef struct
    {
    word FWS_FontID;
    char FWS_name[FID_NAME_LEN + 1];
    byte FWS_charset;
    FontFamily FWS_family;
    Boolean FWS_bFixedWidth;
    }
FontWorkStruct;

typedef struct
{
    FontID FTE_GEOSFontID;
    DosCodePage FTE_DosCodePage;
}
FontTableEntry;

void strcpyu2a(char *dest, wchar *source)
{
    while ((*(dest++) = (char)*(source++)) != '\0')
        /* nop */;
}

void FontAddFont(FontWorkStruct *pWork, FontTableEntry *pElement);

DosCodePage GetCodePage(uchar chs)
{
    DosCodePage page;
    
	switch (chs)
	{
	case ANSI_CHARSET:
	case EASTEUROPE_CHARSET:
	case DEFAULT_CHARSET:
	default:
		page = DEFAULT_CODEPAGE;
		break;
	case SYMBOL_CHARSET:
	case INVALID_CHARSET:
		page = CP_NIL;
		break;
	case PC437_CHARSET:
	case OEM_CHARSET:
		page = CP_OEM_437;
		break;
	}
    return page;
}

FontFamily GetFontFamily(uchar wff)
{
    FontFamily ff;
    
    switch (wff)
    {
        case WFF_ROMAN:     ff = FF_SERIF; break;
        case WFF_SWISS:     ff = FF_SANS_SERIF; break;
        case WFF_MODERN:    ff = FF_MONO; break;
        case WFF_SCRIPT:    ff = FF_SCRIPT; break;
        case WFF_DECORATIVE:ff = FF_ORNAMENT; break;
        case WFF_DONTCARE:
        default:            ff = FF_NON_PORTABLE; break;
    }
    return ff;
}

Boolean FontRead(FIBFCLCB sttbfffn)
{
    MemHandle mh;
    ChunkHandle chFont;
    Boolean retval = TRUE;
    long lcb = 0;
    word ftc;
    long lcffn;

    // Create the lmem heap for the chunk array
    mh = MemAllocLMem(LMEM_TYPE_GENERAL, sizeof(LMemBlockHeader));
    if (mh == NullHandle)
    {
        SetError(TE_OUT_OF_MEMORY);
        return FALSE;
    }

    MemLock(mh);

    chFont = ChunkArrayCreate (mh, sizeof(FontTableEntry), 0, 0);
    if (chFont == NullChunk)
    {
        MemFree(mh);
        SetError(TE_OUT_OF_MEMORY);
        return FALSE;
    }

    FontTable = ConstructOptr(mh, chFont);

    // Read the entries of the sttbfffn
    SEEKAT(sttbfffn.fc);
    READVT(lcffn);
    for (ftc = 0; ftc < lcffn; ftc++)
    {
        FontWorkStruct fws;
        FontTableEntry *fte;
        byte cbFfn, cbxszFfn;
        FFN ffn;
        wchar xszFfn[FID_NAME_LEN + 1];

        if (lcb >= sttbfffn.lcb)
        {
            EC_WARNING(WFW_WARNING_STTBFFFN_ENDED_EARLY);
            break;
        }

        // Create a new FontTableEntry.
        if (ChunkArrayGetCount(FontTable) < MAX_FONT_ENTRIES)
        {
            fte = ChunkArrayAppend(FontTable, 0);
            fte->FTE_GEOSFontID = DEFAULT_FONT_ID;
            fte->FTE_DosCodePage = DEFAULT_CODEPAGE;
        }
        else
        {
            EC_WARNING(WFW_WARNING_FONT_ADD_FAILED);
            SetError(TE_OUT_OF_MEMORY);
            break;
        }
        
        // Read the size of the FFN.
        READVT(cbFfn);
        if (cbFfn <= sizeof(ffn))
        {
            EC_WARNING(WFW_WARNING_INVALID_FFN);
            retval = FALSE;
            break;
        }

        // Read the base FFN struct.
        if (!READVT(ffn))
            break;

        // Read as much of the name as we can handle.
        cbxszFfn = cbFfn - sizeof(ffn);
        if (cbxszFfn > sizeof(xszFfn))
            cbxszFfn = sizeof(xszFfn);
        if (!READT(xszFfn, cbxszFfn)
          || !SEEKRT((cbFfn - sizeof(ffn)) - cbxszFfn))
            break;
        xszFfn[FID_NAME_LEN] = 0;

        // Convert the FFN to a FontTableEntry.
        strcpyu2a(fws.FWS_name, xszFfn);
        // If you don't specify TRUE/FALSE, it stores 1/0, but TRUE != 1.
        fws.FWS_bFixedWidth = (ffn.prq == prqFixed) ? TRUE : FALSE;
        fws.FWS_family = GetFontFamily(ffn.ff);
        fws.FWS_charset = ffn.chs;

#ifdef DEBUG
        printf("ftc #%d: ", ftc);
        printf("prq = %d ", ffn.prq);
        printf("ff = %d ", ffn.ff);
        printf("chs = %d ", ffn.chs);
        printf("name = %s\n", fws.FWS_name);
#endif

        FontAddFont(&fws, fte);

        lcb += cbFfn;
    }

    MemUnlock(mh);
    return retval;
}

@start WKFontsResource, data;

@chunkArray FontWorkStruct WellKnownFonts = {
    { FID_DTC_URW_ROMAN, "Times New Roman", ANSI_CHARSET, FF_SERIF, FALSE },
    { FID_DTC_URW_MONO, "Courier New", ANSI_CHARSET, FF_MONO, TRUE },
    { FID_DTC_URW_SANS, "Arial", ANSI_CHARSET, FF_SANS_SERIF, FALSE },
    { FID_DTC_URW_SYMBOLPS, "Symbol", SYMBOL_CHARSET, FF_SERIF, FALSE },
    { DEFAULT_FONT_ID, "System", ANSI_CHARSET, FF_SANS_SERIF, FALSE }
};
@localize not;

@end WKFontsResource;

FontID FindFont(FontWorkStruct* pWork)
{
    FontID GEOSFontID = FID_INVALID;
    FontEnumStruct EnumBuffer;
    FontEnumFlags fEnumFlags;
    FontWorkStruct *pWKF;
    int nIdx;
    int nArrayLen;

    /* First, we look in the well known fonts table. */
    if (MemLock(HandleOf(@WellKnownFonts)) != NULL)
    {
        nArrayLen = ChunkArrayGetCount(@WellKnownFonts);
        for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
        {
            pWKF = ChunkArrayElementToPtr(@WellKnownFonts, nIdx, NULL);
            if (!strncmp(pWKF->FWS_name, pWork->FWS_name, FID_NAME_LEN)
              && pWKF->FWS_family == pWork->FWS_family
              && pWKF->FWS_bFixedWidth == pWork->FWS_bFixedWidth)
            {
                GEOSFontID = pWKF->FWS_FontID;
#ifdef DEBUG
                printf(" Found well-known font, id = %04X\n", GEOSFontID);
#endif
                break;
            }
        }
        MemUnlock(HandleOf(@WellKnownFonts));
    }

    /* Otherwise, we get a list of valid fonts, and pick the first one. */
    if (GEOSFontID == FID_INVALID)
    {
        fEnumFlags = FEF_USEFUL | FEF_FAMILY | FEF_OUTLINES;
        if (pWork->FWS_bFixedWidth)
            fEnumFlags |= FEF_FIXED_WIDTH;
        if (GrEnumFonts (&EnumBuffer, 1, fEnumFlags, pWork->FWS_family) == 1)
        {
            GEOSFontID = EnumBuffer.FES_ID;
#ifdef DEBUG
            printf(" Found matching font, name = %s, id = %04X\n", EnumBuffer.FES_name, GEOSFontID);
#endif
        }
    }
    return GEOSFontID;
}

void FontAddFont(FontWorkStruct *pWork, FontTableEntry *pElement)
{
    FontID nFID;

	if (pWork == NULL)
		return;

    /* Do we have font data to work with? */
    if (pWork->FWS_name[0] != '\0')
    {
        /* Find the closest matching system font possible. */
        nFID = FindFont(pWork);

        /* Record the results in the table. */
        if (nFID != FID_INVALID)
        {
            pElement->FTE_GEOSFontID = nFID;
    		pElement->FTE_DosCodePage = GetCodePage(pWork->FWS_charset);
#ifdef DEBUG
    		printf(" Charset %d mapped to DosCodePage %d\n", (uint)(pWork->FWS_charset), pElement->FTE_DosCodePage);
#endif
        }
    }
}

FontID FontFindFont(word ftc, DosCodePage *pcp)
{
    FontID GEOSFontID = FID_INVALID;
    FontTableEntry *pEntry;

    /* Index array to find match, return FID_INVALID if not found. */
    MemLock(OptrToHandle(FontTable));
    if (ftc < ChunkArrayGetCount(FontTable)
      && (pEntry = ChunkArrayElementToPtr(FontTable, ftc, NULL)) != NULL)
    {
        GEOSFontID = pEntry->FTE_GEOSFontID;
        *pcp = pEntry->FTE_DosCodePage;
    }
    MemUnlock(OptrToHandle(FontTable));
    return GEOSFontID;
}

