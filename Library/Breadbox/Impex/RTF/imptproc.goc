/***********************************************************************
 *
 * PROJECT:       RTF
 * FILE:          ImptProc.goc
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>
@include <Objects/clipbrd.goh>
@include <impex.goh>
#include <vm.h>
#include <xlatLib.h>
#include <Ansi/string.h>
#include <localize.h>
#include <Ansi/ctype.h>
#include "impdefs.h"
#include "rtf.h"
#include "global.h"

#define PAGE_WIDTH 8.5*72
#define PAGE_HEIGHT 11*72
#define PAGE_LEFT_MARGIN 1*72
#define PAGE_RIGHT_MARGIN 1*72
#define PAGE_TOP_MARGIN 1*72
#define PAGE_BOTTOM_MARGIN 1*72

/*
 * Add page layout structure to import format.
 */
void AddPageLayout(VMFileHandle vmf,VMBlockHandle bh,PageSetupInfo *pInfo)
{
    VMBlockHandle h;
    MemHandle mh;
    TextTransferBlockHeader *ttbh;
    PageSetupInfo *psi;

    h = VMAlloc(vmf,sizeof(PageSetupInfo),0);
    psi = VMLock(vmf,h,&mh);
    VMDirty(mh);
    memcpy(psi,pInfo,sizeof(PageSetupInfo));
    VMUnlock(mh);

    ttbh = VMLock(vmf,bh,&mh);
    ttbh->TTBH_pageSetup = VMCHAIN_MAKE_FROM_VM_BLOCK(h);
    VMDirty(mh);
    VMUnlock(mh);
}

#define TEST_STRING "rtf"
#define TEST_SIZE 3

sword _pascal GetFormat(FileHandle fh)
{
    word format = NO_IDEA_FORMAT;
    unsigned char acTestBuffer[TEST_SIZE + 1];
    int count;

    /* get start of file to be tested */
    FilePos(fh, FILE_POS_START, 0);		/* reset file position */

    /* Skip whitespace until we find the first opening brace. */
    while ((count = FileRead( fh, acTestBuffer, 1, FALSE )) == 1
    	&& isspace(*acTestBuffer))
		;
	if (count == 1 && *acTestBuffer == '{')
		{
		/* Skip whitespace until we find the first backslash. */
	    while ((count = FileRead( fh, acTestBuffer, 1, FALSE )) == 1
	    	&& isspace(*acTestBuffer))
			;
		if (count == 1 && *acTestBuffer == '\\')
			{
			/* Make sure the first control matches TEST_STRING. */
		    if (FileRead( fh, acTestBuffer, TEST_SIZE, FALSE ) == TEST_SIZE)
		        {
		        acTestBuffer[TEST_SIZE] = '\0';

		        if( LocalCmpStrings( (char *)acTestBuffer, TEST_STRING, TEST_SIZE )==0 )
		              format = 0;                   /* yes! */
		        }
			}
		}
    FilePos(fh, FILE_POS_START, 0);		/* reset file position */
    return format;                      /* return result of test */
}

#ifdef DO_GRAPHICS
void ProcessGraphics(optr obj, VMFileHandle vmf, char *current,
  MemHandle mh, ChunkHandle imageArray)
{
    GStateHandle gstate;
    VMBlockHandle dataVMBlock;
    VisTextGraphic vtg;

    gstate = GrCreateGString(vmf, GST_VMEM, &dataVMBlock);
    GrSetLineColor(gstate,C_BLACK,CF_INDEX,0,0);
    GrDrawRect(gstate,0,0,19,9);
    GrEndGString(gstate);
    GrDestroyGString(gstate, 0, GSKT_LEAVE_DATA);

    memset(&vtg,0,sizeof(VisTextGraphic));
    vtg.VTG_type = VTGT_GSTRING;
    vtg.VTG_flags = 0;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e11.WWF_int = 1;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e22.WWF_int = 1;
    vtg.VTG_vmChain = VMCHAIN_MAKE_FROM_VM_BLOCK(dataVMBlock);
    vtg.VTG_size.XYS_width = 20;
    vtg.VTG_size.XYS_height = 10;

    @call obj::MSG_VIS_TEXT_REPLACE_WITH_GRAPHIC(vtg, vmf, 0, 0, 0);
}
#endif

dword _pascal _export ImportProcedure(ImportFrame *ieb,VMChain *vmc)
{
    optr textObj;
    VMBlockHandle transferItem;
    int cif,ret;
    MemHandle mh;
    RTFTransferData dataBlock;
#ifdef DO_GRAPHICS
    word *p;
    char fullname[PATH_BUFFER_SIZE];
#endif

    /* Perform initial format verification. */
	if (GetFormat(ieb->IF_sourceFile) != 0)
		return TE_IMPORT_ERROR;

    textObj = TextAllocClipboardObject(ieb->IF_transferVMFile,
      VTSF_MULTIPLE_CHAR_ATTRS | VTSF_MULTIPLE_PARA_ATTRS
#ifdef DO_GRAPHICS
       | VTSF_GRAPHICS
#endif

#if _DO_HELP
       | VTSF_TYPES                     /* don't delete.  We need it for help
					   context interpretation */
#endif
      , 0);

    if(!textObj) return TE_ERROR;       /* return error if alloc fails */

    mh = MemAllocLMem(LMEM_TYPE_GENERAL,0);
                                        /* allocate block for more data */
    MemLock(mh);                        /* lock block for additional data */

    /* call parser to process file and import it into the text object */
    ret = RTFImport (ieb->IF_sourceFile, textObj, &dataBlock);

    if(ret)                             /* error returned by parser */
    {
      MemFree(mh);                      /* release additional data block */
      TextFinishWithClipboardObject(
        textObj,
        TCO_RETURN_NOTHING,
        HandleToOptr(GeodeGetProcessHandle()),
        "");
      return ret;                       /* general error... */
    }

#ifdef DO_GRAPHICS
    p=fullname;                         /* make double indirection clean */
    FileConstructFullPath( &p, PATH_BUFFER_SIZE,
      ieb->IF_sourcePathDisk, ieb->IF_sourcePathName, TRUE );

    /* process additional HTML features */
    ProcessGraphics( textObj, ieb->IF_transferVMFile, fullname,
      mh, ext.HE_imageArray );          /* process images in array */
#endif

    MemFree(mh);                        /* release additional data block */

    transferItem = TextFinishWithClipboardObject(
      textObj,
      TCO_RETURN_TRANSFER_FORMAT,
      HandleToOptr(GeodeGetProcessHandle()),
      "");

    AddPageLayout( ieb->IF_transferVMFile, transferItem, &dataBlock.RTFTD_pageInfo );
                                        /* add simple page layout to the file */

    *vmc = VMCHAIN_MAKE_FROM_VM_BLOCK( transferItem );

    cif = CIF_TEXT;                     /* we have created a text item */
    return TE_NO_ERROR+(((dword)cif)<<16);
}
