@include <stdapp.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include "warnings.h"
#include "scan.h"
#include "output.h"
#include "scanfunc.h"
#include "text.h"
#include "charset.h"
#include "global.h"

/******************************************************/
/******************* SCANNER TABLES *******************/
/******************************************************/

@start SCAN_ARRAYS, data;

#define CA_OFFSET(f)    offsetof(VisTextCharAttr, f)
#define PA_OFFSET(f)    offsetof(VisTextParaAttr, f)
#define CAD_OFFSET(f)   offsetof(VisTextCharAttrDiffs, f)
#define PAD_OFFSET(f)   offsetof(VisTextParaAttrDiffs, f)

/*  An OffsetDiffPair's gives a starting byte offset for a field in a
    VisText...Attr struct and the corresponding bit number to set in the
    VisText...AttrDiffs struct for that field. */
/*  A field whose ODP_bit == ODP_BIT_COMP has a duplicate entry in the
    ..Diffs struct, and the field's individual bits are compared. */
/*  For the scanner routines to work, the first entry (it will be
    skipped) must have an offset of zero, and the last entry must be
    the final reserved field. */

#define ODP_BIT_COMP    0xFFFF
#define ODP_TEST_BIT_COMP(p)    ( ((p)->ODP_bit == ODP_BIT_COMP) ? ((p)->ODP_flag) : 0)

typedef struct
    {
    byte ODP_offset;            /* byte offset of start of this field */
    byte ODP_flag;              /* byte offset of flag */
    word ODP_bit;               /* flag to set */
    }
OffsetDiffPair;

typedef byte ScanSourceDestType;
#define MAKE_SSDT(s,d)		((s) | ((d) << 4))
#define SSDT_GET_SRC(sd)	((sd) & 0x0F)
#define SSDT_GET_DEST(sd)	(((sd) & 0xF0) >> 4)

#define STE_END	0xFF
#define STE_ALWAYS_EMIT	0xFE

typedef struct
    {
    byte STE_flagOff;			/* byte offset of flag */
    word STE_flag;				/* flag to check for */
    char STE_label[SCAN_LABEL_MAX_LENGTH + 1];
    ScanFunc* STE_pfFunc;		/* optional function */
	byte STE_offset;			/* byte offset into struct */
	ScanSourceDestType STE_SDType;
	word STE_extra;	
    }
ScanTableEntry;

@chunk OffsetDiffPair ODPChar[] = {
{ CA_OFFSET(VTCA_meta), CAD_OFFSET(VTCAD_diffs), 0 },
{ CA_OFFSET(VTCA_fontID), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_FONT_IDS },
{ CA_OFFSET(VTCA_pointSize), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_POINT_SIZES },
{ CA_OFFSET(VTCA_textStyles), CAD_OFFSET(VTCAD_textStyles), ODP_BIT_COMP },
{ CA_OFFSET(VTCA_color), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_COLORS },
{ CA_OFFSET(VTCA_trackKerning), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_TRACK_KERNINGS },
{ CA_OFFSET(VTCA_fontWeight), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_FONT_WEIGHTS },
{ CA_OFFSET(VTCA_fontWidth), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_FONT_WIDTHS },
{ CA_OFFSET(VTCA_extendedStyles), CAD_OFFSET(VTCAD_extendedStyles), ODP_BIT_COMP },
{ CA_OFFSET(VTCA_grayScreen), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_GRAY_SCREENS },
{ CA_OFFSET(VTCA_pattern), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_PATTERNS },
{ CA_OFFSET(VTCA_bgColor), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_BG_COLORS },
{ CA_OFFSET(VTCA_bgGrayScreen), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_BG_GRAY_SCREENS },
{ CA_OFFSET(VTCA_bgPattern), CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_BG_PATTERNS },
{ CA_OFFSET(VTCA_reserved), CAD_OFFSET(VTCAD_diffs), 0 }
};
@localize not;

@chunk OffsetDiffPair ODPPara[] = {
{ PA_OFFSET(VTPA_meta), PAD_OFFSET(VTPAD_diffs), 0 },
{ PA_OFFSET(VTPA_borderFlags), PAD_OFFSET(VTPAD_borderDiffs), ODP_BIT_COMP },
/*{ PA_OFFSET(VTPA_borderFlags) + 1, PAD_OFFSET(VTPAD_borderDiffs) + 1, ODP_BIT_COMP },*/
{ PA_OFFSET(VTPA_borderColor), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_COLORS },
{ PA_OFFSET(VTPA_attributes), PAD_OFFSET(VTPAD_attributes), ODP_BIT_COMP },
{ PA_OFFSET(VTPA_leftMargin), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_LEFT_MARGINS },
{ PA_OFFSET(VTPA_rightMargin), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_RIGHT_MARGINS },
{ PA_OFFSET(VTPA_paraMargin), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_PARA_MARGINS },
{ PA_OFFSET(VTPA_lineSpacing), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_LINE_SPACINGS },
{ PA_OFFSET(VTPA_leading), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_LEADINGS },
{ PA_OFFSET(VTPA_spaceOnTop), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_TOP_SPACING },
{ PA_OFFSET(VTPA_spaceOnBottom), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BOTTOM_SPACING },
{ PA_OFFSET(VTPA_bgColor), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BG_COLORS },
{ PA_OFFSET(VTPA_numberOfTabs), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_TAB_LISTS },
{ PA_OFFSET(VTPA_borderWidth), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_WIDTHS },
{ PA_OFFSET(VTPA_borderSpacing), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_SPACINGS },
{ PA_OFFSET(VTPA_borderShadow), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_SHADOWS },
/*{ PA_OFFSET(VTPA_borderGrayScreen), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_GRAY_SCREENS },*/
{ PA_OFFSET(VTPA_bgGrayScreen), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BG_GRAY_SCREENS },
/*{ PA_OFFSET(VTPA_borderPattern), PAD_OFFSET(VTPAD_borderDiffs), VTPABF_MULTIPLE_BORDER_PATTERNS },*/
{ PA_OFFSET(VTPA_bgPattern), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BG_PATTERNS },
{ PA_OFFSET(VTPA_defaultTabs), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_DEFAULT_TABS },
{ PA_OFFSET(VTPA_startingParaNumber), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_STARTING_PARA_NUMBERS},
{ PA_OFFSET(VTPA_prependChars), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_PREPEND_CHARS },
{ PA_OFFSET(VTPA_hyphenationInfo), PAD_OFFSET(VTPAD_hyphenationInfo), ODP_BIT_COMP },
{ PA_OFFSET(VTPA_keepInfo), PAD_OFFSET(VTPAD_keepInfo), ODP_BIT_COMP },
{ PA_OFFSET(VTPA_dropCapInfo), PAD_OFFSET(VTPAD_dropCapInfo), ODP_BIT_COMP },
{ PA_OFFSET(VTPA_nextStyle), PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_NEXT_STYLES },
{ PA_OFFSET(VTPA_language), PAD_OFFSET(VTPAD_diffs2), VTPAF2_MULTIPLE_LANGUAGES },
{ PA_OFFSET(VTPA_reserved), PAD_OFFSET(VTPAD_diffs), 0 }
};
@localize not;

/* Table entries marked with XXX can only be set. They must be reset by
attribute restoration through \pard, \plain, or by a group stack pop. */

@chunk ScanTableEntry STEChar[] = {
{ CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_FONT_IDS, "f", EmitFontID, CA_OFFSET(VTCA_fontID), MAKE_SSDT(SST_WORDNUM, SDT_VALUE), 0 },
{ CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_POINT_SIZES, "fs", MultiplyByExtra, CA_OFFSET(VTCA_pointSize), MAKE_SSDT(SST_WBFIXED, SDT_VALUE), 2 },
{ CAD_OFFSET(VTCAD_textStyles), TS_BOLD, "b", NULL, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), TS_BOLD },
{ CAD_OFFSET(VTCAD_textStyles), TS_UNDERLINE, "ul", NULL, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), TS_UNDERLINE },
{ CAD_OFFSET(VTCAD_textStyles), TS_ITALIC, "i", NULL, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), TS_ITALIC },
{ CAD_OFFSET(VTCAD_textStyles), TS_STRIKE_THRU, "strike", NULL, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), TS_STRIKE_THRU },
{ CAD_OFFSET(VTCAD_textStyles), TS_OUTLINE, "outl", NULL, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), TS_OUTLINE },
{ CAD_OFFSET(VTCAD_textStyles), TS_SUPERSCRIPT | TS_SUBSCRIPT, "nosupersub super sub", EmitSuperSub, CA_OFFSET(VTCA_textStyles), MAKE_SSDT(SST_WORD, SDT_FLAG), 0 },
{ CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_COLORS, "cf", LookupColor, CA_OFFSET(VTCA_color), MAKE_SSDT(SST_DWORD, SDT_VALUE), 0 },
/* Skip VTCA_trackKerning */
/* Skip VTCA_fontWeight */
{ CAD_OFFSET(VTCAD_diffs), VTCAF_MULTIPLE_FONT_WIDTHS, "charscalex", NULL, CA_OFFSET(VTCA_fontWidth), MAKE_SSDT(SST_BYTENUM, SDT_VALUE), 0 },
{ CAD_OFFSET(VTCAD_extendedStyles), VTES_ALL_CAP, "caps", NULL, CA_OFFSET(VTCA_extendedStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), VTES_ALL_CAP },
{ CAD_OFFSET(VTCAD_extendedStyles), VTES_SMALL_CAP, "scaps", NULL, CA_OFFSET(VTCA_extendedStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), VTES_SMALL_CAP },
{ CAD_OFFSET(VTCAD_extendedStyles), VTES_HIDDEN, "v", NULL, CA_OFFSET(VTCA_extendedStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), VTES_HIDDEN },
{ CAD_OFFSET(VTCAD_extendedStyles), VTES_BUTTON, "", OutputButtonStyle, CA_OFFSET(VTCA_extendedStyles), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), VTES_BUTTON },
/* Skip VTCA_grayScreen */
/* This covers VTCAF_MULTIPLE_BG_GRAY_SCREENS | VTCAF_MULTIPLE_BG_PATTERNS | VTCAF_MULTIPLE_BG_COLORS */
/*XXX*/{ CAD_OFFSET(VTCAD_extendedStyles), VTES_BACKGROUND_COLOR, "chshdng chbg chcfpat chcbpat", EmitCharBG, CA_OFFSET(VTCA_bgColor), MAKE_SSDT(SST_DWORD, SDT_VALUE), 0 },
{ STE_END, 0, "", NULL, 0, 0, 0 }
};
@localize not;

@chunk ScanTableEntry STEPara[] = {
/*XXX*/{ PAD_OFFSET(VTPAD_borderDiffs), 0xFFFF, "", EmitBorders, PA_OFFSET(VTPA_borderFlags), MAKE_SSDT(SST_WORD, SDT_FLAG), 0 },
{ PAD_OFFSET(VTPAD_attributes), VTPAA_JUSTIFICATION, "ql qr qc qj", EmitJustification, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORD, SDT_FLAG), 0 },
/*XXX*/{ PAD_OFFSET(VTPAD_attributes), VTPAA_KEEP_PARA_WITH_NEXT, " keepn", NULL, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORDFLAG, SDT_FLAG), VTPAA_KEEP_PARA_WITH_NEXT },
/*XXX*/{ PAD_OFFSET(VTPAD_attributes), VTPAA_KEEP_PARA_TOGETHER, " keep", NULL, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORDFLAG, SDT_FLAG), VTPAA_KEEP_PARA_TOGETHER },
/*XXX*/{ PAD_OFFSET(VTPAD_attributes), VTPAA_COLUMN_BREAK_BEFORE, " pagebb", NULL, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORDFLAG, SDT_FLAG), VTPAA_COLUMN_BREAK_BEFORE },
{ PAD_OFFSET(VTPAD_attributes), VTPAA_ALLOW_AUTO_HYPHENATION, "hyphpar", NULL, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORDFLAG, SDT_TOGGLE), VTPAA_ALLOW_AUTO_HYPHENATION },
{ PAD_OFFSET(VTPAD_attributes), VTPAA_KEEP_LINES, "nowidctlpar widctlpar", NULL, PA_OFFSET(VTPA_attributes), MAKE_SSDT(SST_WORDFLAG, SDT_FLAG), VTPAA_KEEP_LINES },
{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_LEFT_MARGINS | VTPAF_MULTIPLE_PARA_MARGINS, "li fi", EmitLeftAndParaMargins, PA_OFFSET(VTPA_leftMargin), MAKE_SSDT(SST_133, SDT_VALUE), 0 },
{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_RIGHT_MARGINS, "ri", MultiplyByExtra, PA_OFFSET(VTPA_rightMargin), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_LINE_SPACINGS, "sl", MultiplyByExtra, PA_OFFSET(VTPA_lineSpacing), MAKE_SSDT(SST_BBFIXED, SDT_VALUE), 240 },
{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_TOP_SPACING, "sb", MultiplyByExtra, PA_OFFSET(VTPA_spaceOnTop), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BOTTOM_SPACING, "sa", MultiplyByExtra, PA_OFFSET(VTPA_spaceOnBottom), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
/*XXX*/{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_TAB_LISTS | VTPAF_MULTIPLE_DEFAULT_TABS, "tx tb tqc tqr tqdec", EmitTabs, PA_OFFSET(VTPA_numberOfTabs), MAKE_SSDT(SST_BYTENUM, SDT_VALUE), 0 },
/* Skip VTPA_borderWidth, borderSpacing, borderShadow, borderGrayScreen, borderPattern */
/*XXX*/{ PAD_OFFSET(VTPAD_diffs), VTPAF_MULTIPLE_BG_GRAY_SCREENS | VTPAF_MULTIPLE_BG_PATTERNS | VTPAF_MULTIPLE_BG_COLORS, "shading bg cfpat cbpat", EmitParaBG, PA_OFFSET(VTPA_bgColor), MAKE_SSDT(SST_DWORD, SDT_VALUE), 0 },
/* Skip VTPA_defaultTabs, startingParaNumber, prependChars, hyphenationInfo, keepInfo, dropCapInfo, nextStyle, language */
{ STE_END, 0, "", NULL, 0, 0, 0 }
};
@localize not;

@chunk ScanTableEntry STEDoc[] = {
{ STE_ALWAYS_EMIT, 0, "paperw", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_page.XYS_width), MAKE_SSDT(SST_WORDNUM, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "paperh", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_page.XYS_height), MAKE_SSDT(SST_WORDNUM, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "margl", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_leftMargin), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "margr", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_rightMargin), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "margt", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_topMargin), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "margb", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_bottomMargin), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
/*XXX*/{ STE_ALWAYS_EMIT, 0, " landscape", NULL, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_layout), MAKE_SSDT(SST_WORDFLAG, SDT_FLAG), PLP_ORIENTATION },
{ STE_ALWAYS_EMIT, 0, "cols", NULL, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_numColumns), MAKE_SSDT(SST_WORDNUM, SDT_VALUE), 0 },
{ STE_ALWAYS_EMIT, 0, "colsx", MultiplyByExtra, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_columnSpacing), MAKE_SSDT(SST_133, SDT_VALUE), 20 },
{ STE_ALWAYS_EMIT, 0, "linebetcol", ColumnRule, offsetof(RTFDocumentAttr, RTFDA_pageInfo.PSI_ruleWidth), MAKE_SSDT(SST_WORDNUM, SDT_VALUE), 0 },
{ STE_END, 0, "", NULL, 0, 0, 0 }
};
@localize not;

@chunk char CSBorders[] = "brdrl brdrt brdrr brdrb brdrbtw brdrs brdrdb brdrsh brdrw brdrcf brsp";
@localize not;

/* Control strings for special characters. */
@chunk char SpecTab[] = "tab";
@localize not;
@chunk char SpecEnSpace[] = "enspace";
@localize not;
@chunk char SpecEmSpace[] = "emspace";
@localize not;
@chunk char SpecNonBrkHyphen[] = "_";
@localize not;
@chunk char SpecOptHyphen[] = "-";
@localize not;
@chunk char SpecBackslash[] = "\\";
@localize not;
@chunk char SpecNonBrkSpace[] = "~";
@localize not;
@chunk char SpecLeftBrace[] = "{";
@localize not;
@chunk char SpecRightBrace[] = "}";
@localize not;
@chunk char SpecSectBrk[] = "sect";
@localize not;
@chunk char SpecPageBrk[] = "page";
@localize not;
@chunk char SpecColBrk[] = "column";
@localize not;
@chunk char SpecEmDash[] = "emdash";
@localize not;
@chunk char SpecEnDash[] = "endash";
@localize not;
@chunk char SpecBullet[] = "bullet";
@localize not;
@chunk char SpecQuoteSngLeft[] = "lquote";
@localize not;
@chunk char SpecQuoteSngRight[] = "rquote";
@localize not;
@chunk char SpecQuoteDblLeft[] = "ldblquote";
@localize not;
@chunk char SpecQuoteDblRight[] = "rdblquote";
@localize not;

@end SCAN_ARRAYS;

#if _DO_HELP
extern word wHyperlinkNeedsFinishingToken;
extern word wHyperlinkNeedsFinishingFilenameToken;
#endif

/******************************************************/
/*********** VISTEXT????ATTRDIFFS GENERATORS **********/
/******************************************************/

void FindAttrDiffs(void* ps1, void* ps2, void* psd, int nLen,
  OffsetDiffPair* paPairs)
    {
    byte *p1, *p2;
    byte n, nSkip, nXOR;

    /* Skip the first "field". (Usually a _meta.) */
    paPairs++;
    n = paPairs->ODP_offset;
    p1 = (byte*)ps1 + n, p2 = (byte*)ps2 + n;
    nXOR = ODP_TEST_BIT_COMP(paPairs);

    while (n < nLen)
        {
        if (nXOR)
            /* Do an XOR to cover all bits at once. */
            *((byte*)psd + nXOR++) = *p1 ^ *p2;
        /* Do the byte comparison. */
        else if (*p1 != *p2)
            {
            /* A mismatch was found! Set the flag. */
            *(word*)((byte*)psd + paPairs->ODP_flag) |= paPairs->ODP_bit;

            /* Skip the rest of the field. */
            paPairs++;
            nXOR = ODP_TEST_BIT_COMP(paPairs);
            nSkip = paPairs->ODP_offset - n;
            n = paPairs->ODP_offset;
            p1 += nSkip, p2 += nSkip;
            continue;
            }

        /* Go on to next byte. */
        p1++, p2++, n++;
        /* Point to the next ..Pair if we've reached it. */
        if ((paPairs+1)->ODP_offset == n)
            {
            paPairs++;
            nXOR = ODP_TEST_BIT_COMP(paPairs);
            }
        }
    }

void ScanFindCharAttrDiffs(VisTextCharAttr* p1, VisTextCharAttr* p2,
  VisTextCharAttrDiffs *pd)
    {
    FindAttrDiffs(p1, p2, pd, sizeof(VisTextCharAttr), LMemDeref(@ODPChar));
    /* Combine background changes to extended flag. */
    if ((p2->VTCA_extendedStyles & VTES_BACKGROUND_COLOR) &&
      (pd->VTCAD_diffs & (VTCAF_MULTIPLE_BG_GRAY_SCREENS
      | VTCAF_MULTIPLE_BG_PATTERNS | VTCAF_MULTIPLE_BG_COLORS)))
      	pd->VTCAD_extendedStyles |= VTES_BACKGROUND_COLOR;
    }

void ScanFindParaAttrDiffs(VisTextParaAttr* p1, VisTextParaAttr* p2,
  VisTextParaAttrDiffs *pd)
    {
    FindAttrDiffs(p1, p2, pd, sizeof(VisTextParaAttr), LMemDeref(@ODPPara));
    /* Fixup multiple tab reporting (must do direct byte comp) */
    if (!(pd->VTPAD_diffs & VTPAF_MULTIPLE_TAB_LISTS)
      && p1->VTPA_numberOfTabs > 0
      && memcmp((byte*)p1 + sizeof(VisTextParaAttr), (byte*)p2
      + sizeof(VisTextParaAttr), p1->VTPA_numberOfTabs * sizeof(Tab)))
        pd->VTPAD_diffs |= VTPAF_MULTIPLE_TAB_LISTS;
    }

Boolean ScanTestUnresettableCharAttrs(VisTextCharAttr* pa,
  VisTextCharAttrDiffs* pd, Boolean* pbAttrChangeOrReset)
	{
	if (pd->VTCAD_extendedStyles & VTES_BACKGROUND_COLOR)
		{
		if (pa->VTCA_bgGrayScreen != SDM_0)
			*pbAttrChangeOrReset = TRUE;
		return TRUE;
		}
	return FALSE;
	}
	

/******************************************************/
/************* VISTEXT????ATTR CONVERTERS *************/
/******************************************************/

/*	Copies the n'th word from pString into pBuf. nWord = 1,2,.. */
/*	nBufLen must include enough room for the word and the terminating zero,
/*	or the output will be truncated. */
char* StringCopyWord(char* pString, char* pBuf, int nBufLen, int nWord)
	{
	char* pc = pString;
	char* pce = strchr(pc, ' ');

	if (nWord == 0)
		return NULL;
	nWord--;
	while (nWord && pce)
		{
		pc = pce + 1;
		pce = strchr(pc, ' ');
		nWord--;
		}
	if (pce == NULL)
		pce = strchr(pc, 0);
	if (!nWord && pc != pce)
		{
		int n = (pce - pc) / sizeof(char);
		if (nBufLen < n + 1)
			n = nBufLen - 1;
		strncpy(pBuf, pc, n);
		pBuf[n] = '\0';
		return pBuf;
		}
	return NULL;
	}

WWFixedAsDWord ScanConvertData(void* pData, ScanSourceType sst, word extra)
	{
	WWFixedAsDWord work = 0;

	switch (sst)
		{
		case SST_WWFIXED:
		case SST_DWORD:
			work = *(dword*)pData;
			break;
		case SST_BYTEFLAG:
			if (*(ByteFlags*)pData & (ByteFlags)extra)
				WWFixedToInt(work) = 1;
			break;
		case SST_WORDFLAG:
			if (*(WordFlags*)pData & (WordFlags)extra)
				WWFixedToInt(work) = 1;
			break;
		case SST_BYTENUM:
			WWFixedToInt(work) = *(byte*)pData;
			break;
		case SST_WORDNUM:
		case SST_WORD:
			WWFixedToInt(work) = *(word*)pData;
			break;
		case SST_BBFIXED:
			work = ((sdword)*(sword*)pData) << 8;
			break;
		case SST_WBFIXED:
			work = *(sdword*)pData << 8;
			break;
		case SST_133:
			work = ((sdword)*(sword*)pData) << 13;
			break;
        default:
            /* Unknown ScanSourceType! */
            EC_WARNING(RTF_WARNING_UNKNOWN_SCAN_SOURCE_TYPE);
		}
	return work;
	}

Boolean ScanEmitControlFromData(long int nParam, ScanDestType sdt, char* pcaControl,
  int nWord)
	{
    char caControlOut[SCAN_LABEL_MAX_LENGTH + 12];

	caControlOut[0] = '\0';
	if (sdt != SDT_FLAG)
		{
		if (nWord)
			StringCopyWord(pcaControl, caControlOut, SCAN_LABEL_MAX_LENGTH + 12,
			  nWord);
		else
			strcpy(caControlOut, pcaControl);
		}
    /* Construct the control. */
	switch (sdt)
		{
		case SDT_NONE:
			break;
		case SDT_VALUE:
			sprintf(strchr(caControlOut, 0), "%ld", nParam);
			break;
		case SDT_FLAG:
			StringCopyWord(pcaControl, caControlOut,
			  SCAN_LABEL_MAX_LENGTH + 12, nParam + 1);
			break;
		case SDT_TOGGLE:
			if (!nParam)
				/* Append "0" if no parameter (toggle off). */
				strcat(caControlOut, "0");
			break;
		}
		
	/* Do that emit thing. */
	if (caControlOut[0] != '\0')
		return RTFOutputAddControl(caControlOut, FALSE);
	else
		return TRUE;
	}

Boolean ScanEmitDiffs(void* pNew, void* pd, ScanTableEntry* pEntry)
    {
    Boolean noError = TRUE;
    WordFlags diff = 0, mask;
    byte offset;
    char* pcaControlEntry;
    void* pData;
    WWFixedAsDWord fxParam;
    ScanSourceType sst;
    ScanDestType sdt;
    word extra;
    dword nStartPos = RTFOutputGetPos();

    /* Loop for each handled flag. */
    while (noError && pEntry->STE_flagOff != STE_END)
		{
		/* Get offset of the flag and the mask. */
		mask = pEntry->STE_flag;
		offset = pEntry->STE_flagOff;
		if (pd)
			diff = *(WordFlags*)((byte*)pd + offset);

		/* Is the flag set? */
		if ((offset == STE_ALWAYS_EMIT) || (diff & mask))
			{
			/* Get info from entry. */
			pcaControlEntry = pEntry->STE_label;
			sst = SSDT_GET_SRC(pEntry->STE_SDType);
			sdt = SSDT_GET_DEST(pEntry->STE_SDType);
			pData = (void*)((byte*)pNew + pEntry->STE_offset);
			extra = pEntry->STE_extra;

			/* Get the data and make the conversion. */
			fxParam = ScanConvertData(pData, sst, extra);
			
			if (pEntry->STE_pfFunc)
				/* Execute the optional function. */
				noError = ProcCallFixedOrMovable_cdecl(pEntry->STE_pfFunc,
				  fxParam, pNew, sst, sdt, pcaControlEntry, extra);
			else
				/* Take the default action if no function. */
				noError = ScanEmitControlFromData(WWFixedToInt(fxParam), sdt,
				  pcaControlEntry, 0);
			}
		pEntry++;
	    }
	/* Append a space for separation, only if anything was emitted. */
	if (noError && nStartPos != RTFOutputGetPos())
		noError = RTFOutputAddChar(' ');
	return noError;
    }

Boolean ScanEmitCharDiffs(VisTextCharAttr* pNew, VisTextCharAttrDiffs* pd)
	{
	return ScanEmitDiffs(pNew, pd, LMemDeref(@STEChar));
	}

Boolean ScanEmitParaDiffs(VisTextParaAttr* pNew, VisTextParaAttrDiffs* pd)
	{
	return ScanEmitDiffs(pNew, pd, LMemDeref(@STEPara));
	}

Boolean ScanEmitDocAttrs(void)
	{
	return ScanEmitDiffs(&DefaultDocAttrs, NULL, LMemDeref(@STEDoc));
	}

Boolean ScanEmitChar(unsigned char c)
    {
    optr string = NullOptr;
    Boolean bSpace = TRUE;	/* control symbols don't have a delimiting space */
    Boolean success;

#if _DO_HELP
    word currHyperlinkNameToken, currHyperlinkFilenameToken;
#endif

	switch (c)
    	{
    	case C_TAB:
    		string = @SpecTab; break;
    	case C_CR:
	        RTFOutputFlush();

#if _DO_HELP
                    currHyperlinkNameToken = wHyperlinkNeedsFinishingToken;
                    currHyperlinkFilenameToken = wHyperlinkNeedsFinishingFilenameToken;
		    RTFOutputEndOfHyperlink();
#endif
		    success = RTFOutputAddControl("par", TRUE);
#if _DO_HELP
                    RTFOutputStartOfHyperlink(currHyperlinkNameToken, currHyperlinkFilenameToken);
#endif
		return success;
	    case C_ENSPACE:
	    	string = @SpecEnSpace; break;
	    case C_EMSPACE:
	    	string = @SpecEmSpace; break;
	    case C_NONBRKHYPHEN:
	    	string = @SpecNonBrkHyphen; bSpace = FALSE; break;
	    case C_OPTHYPHEN:
	    	string = @SpecOptHyphen; bSpace = FALSE; break;
	    case C_BACKSLASH:
	    	string = @SpecBackslash; bSpace = FALSE; break;
	    case C_NONBRKSPACE:
	    	string = @SpecNonBrkSpace; bSpace = FALSE; break;
	    case C_LEFT_BRACE:
	    	string = @SpecLeftBrace; bSpace = FALSE; break;
	    case C_RIGHT_BRACE:
	    	string = @SpecLeftBrace; bSpace = FALSE; break;
	    case C_SECTION_BREAK:
	    	string = @SpecSectBrk; break;
	    case C_PAGE_BREAK:
	    	string = @SpecPageBrk; break;
//	    case C_COLUMN_BREAK:
//	    	string = @SpecColBrk; break;
	    case C_EMDASH:
	    	string = @SpecEmDash; break;
	    case C_ENDASH:
	    	string = @SpecEnDash; break;
	    case C_BULLET:
	    	string = @SpecBullet; break;
	    case C_QUOTESNGLEFT:
	    	string = @SpecQuoteSngLeft; break;
	    case C_QUOTESNGRIGHT:
	    	string = @SpecQuoteSngRight; break;
	    case C_QUOTEDBLLEFT:
	    	string = @SpecQuoteDblLeft; break;
	    case C_QUOTEDBLRIGHT:
	    	string = @SpecQuoteDblRight; break;
	    
	    default:
	    	if (c >= 0x20) {
		    return RTFOutputAddChar((unsigned char)RTFGeosToCodePage(c));
		}
    	}
	if (string)
		return RTFOutputAddControl(LMemDeref(string), bSpace);
	return TRUE;
    }

/***************************************************************************/

Boolean ScanInit(void)
    {
    return (MemLock(HandleOf(@ODPChar)) != NULL);
    }

void ScanFree(void)
    {
    MemUnlock(HandleOf(@ODPChar));
    }
