/******************** GROUP STRUCTURES *******************/

@include <stdapp.goh>
#include <Ansi/string.h>
#include "groups.h"
#include "import.h"
#include "warnings.h"
#include "text.h"
#include "output.h"
#include "rtfdefs.h"
#include "charset.h"
#include "global.h"

#define MAX_FONT_ENTRIES 50
#define MAX_COLORS 65
#define GROUPS_INIT_SIZE 700

typedef struct
    {
    LMemBlockHeader GSH_meta;
    optr GSH_document;
    optr GSH_fontTable;
    optr GSH_colorTable;
    }
GroupStructsHeader;

static MemHandle Groups;

/*********************************************************/
/***************** DOCUMENT BODY (GT_RTF) ****************/
/*********************************************************/

typedef struct
    {
    VisTextCharAttr DS_charAttrs;
    VisTextMaxParaAttr DS_paraAttrs;
    Boolean DS_charAttrsDirty;
    Boolean DS_paraAttrsDirty;
    Tab DS_tempTab;
    }
DocumentStruct;

static Boolean GroupDocumentInit(GroupStructsHeader* pHeader)
    {
    Boolean success = FALSE;
    ChunkHandle chDoc;
    optr oDoc;
    DocumentStruct *pDoc;

    /* Create the chunk. */
    chDoc = LMemAlloc (Groups, sizeof(DocumentStruct));
    if (chDoc)
        {
        /* Put pointers in heap header. */
        oDoc = ConstructOptr (Groups, chDoc);
        pHeader->GSH_document = oDoc;

        /* Initialize the structure. */
        pDoc = LMemDeref (oDoc);
        if (pDoc)
            {
            memcpy (&pDoc->DS_charAttrs, &DefaultCharAttrs,
              sizeof(DefaultCharAttrs));
            memcpy (&pDoc->DS_paraAttrs, &DefaultParaAttrs,
              sizeof(DefaultParaAttrs));
            pDoc->DS_charAttrsDirty = FALSE;
            pDoc->DS_paraAttrsDirty = FALSE;
            memset (&pDoc->DS_tempTab, 0, sizeof(Tab));
            success = TRUE;
            }
        }
    return success;
    }

static void GroupDocumentFree(GroupStructsHeader* pHeader)
    {
    LMemFree (pHeader->GSH_document);
    pHeader->GSH_document = NullChunk;
    }

static void GroupDocumentOpen(void)
    {
    }

static void GroupDocumentClose(void)
    {
    }

static void GroupDocumentEmitText(char* pText)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    if (GetDestination() == DT_RTF)
        {
        if (pDoc->DS_charAttrsDirty)
            {
            TextAppendCharAttrs (&pDoc->DS_charAttrs);
            pDoc->DS_charAttrsDirty = FALSE;
            }
        if (pDoc->DS_paraAttrsDirty)
            {
            TextAppendParaAttrs (&pDoc->DS_paraAttrs.VTMPA_paraAttr);
            pDoc->DS_paraAttrsDirty = FALSE;
            }
        TextAppendText (pText);
        }
	MemUnlock(Groups);
    }

static VisTextCharAttr* GroupDocumentGetCharAttrs(GroupStructsHeader* pHeader)
    {
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    VisTextCharAttr *pAttr = &pDoc->DS_charAttrs;
	return pAttr;
    }

static VisTextParaAttr* GroupDocumentGetParaAttrs(GroupStructsHeader* pHeader)
    {
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    VisTextParaAttr *pAttr = &pDoc->DS_paraAttrs.VTMPA_paraAttr;
    return pAttr;
    }

static void GroupDocumentSetCharAttrsDirty(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    pDoc->DS_charAttrsDirty = TRUE;
	MemUnlock(Groups);
    }

static void GroupDocumentSetParaAttrsDirty(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    pDoc->DS_paraAttrsDirty = TRUE;
	MemUnlock(Groups);
    }

static Tab* GroupDocumentGetWorkTab(GroupStructsHeader* pHeader)
    {
    DocumentStruct *pDoc = LMemDeref (pHeader->GSH_document);
    Tab *pTab = &pDoc->DS_tempTab;
    return pTab;
    }


/*********************************************************/
/***************** FONT TABLE (GT_FONTTBL) ***************/
/*********************************************************/

typedef struct
    {
    word FWS_FontID;
    char FWS_name[FID_NAME_LEN + 1];
    byte FWS_charset;
    FontFamily FWS_family;
    Boolean FWS_bFixedWidth;
    }
FontWorkStruct;

typedef struct
    {
    word FTE_RTFFontID;
    FontID FTE_GEOSFontID;
    char FTE_name[FID_NAME_LEN + 1];
    byte FTE_charset;
    FontFamily FTE_family;
    Boolean FTE_bFixedWidth;
    }
FontTableEntry;

typedef struct
    {
    ChunkArrayHeader FTH_meta;
    FontWorkStruct FTH_work;
    }
FontTableHeader;

static Boolean GroupFontTableInit(GroupStructsHeader* pHeader)
    {
    ChunkHandle chFont;
    optr oFont;
    Boolean success = FALSE;

    chFont = ChunkArrayCreate (Groups, sizeof(FontTableEntry),
      sizeof(FontTableHeader), 0);
    if (chFont != NullChunk)
        {
        /* Put pointers in heap header. */
        oFont = ConstructOptr (Groups, chFont);
        pHeader->GSH_fontTable = oFont;
        success = TRUE;
        }
    return success;
    }

static void GroupFontTableFree(GroupStructsHeader* pHeader)
    {
    LMemFree (pHeader->GSH_fontTable);
    pHeader->GSH_fontTable = NullChunk;
    }

static void GroupFontTableOpen(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;

    /* Initialize chunk array header. */
    memset(pWork, 0, sizeof(FontWorkStruct));
	pWork->FWS_charset = DEFAULT_CHARSET;
	MemUnlock(Groups);
    }

static void GroupFontTableClose(void)
    {
    }
  
void GroupFontTableAddFont(void);

static void GroupFontTableEmitText(char* pText)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;

    /* Copy text into workspace. */
    if (*pText != ';')
        {
        if (strlen(pWork->FWS_name) < FID_NAME_LEN)
            strcat(pWork->FWS_name, pText);
        }
    else
        GroupFontTableAddFont();
	MemUnlock(Groups);
    }

@start WKFontsResource, data;

@chunkArray FontWorkStruct WellKnownFonts = {
    { FID_DTC_URW_ROMAN, "Times New Roman", ANSI_CHARSET, FF_SERIF, FALSE },
    { FID_DTC_URW_MONO, "Courier New", ANSI_CHARSET, FF_MONO, TRUE },
    { FID_DTC_URW_SANS, "Arial", ANSI_CHARSET, FF_SANS_SERIF, FALSE },
    { FID_DTC_URW_SYMBOLPS, "Symbol", SYMBOL_CHARSET, FF_SERIF, FALSE },
    { DEFAULT_FONT_ID, "System", ANSI_CHARSET, FF_SANS_SERIF, FALSE }
};
@localize not;

@end WKFontsResource;

FontID FindFont(FontWorkStruct* pWork)
    {
    FontID GEOSFontID = FID_INVALID;
    FontEnumStruct EnumBuffer;
    FontEnumFlags fEnumFlags;
    FontWorkStruct *pWKF;
    int nIdx;
    int nArrayLen;

    /* First, we look in the well known fonts table. */
    if (MemLock(HandleOf(@WellKnownFonts)) != NULL)
        {
        nArrayLen = ChunkArrayGetCount(@WellKnownFonts);
        for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
            {
            pWKF = ChunkArrayElementToPtr(@WellKnownFonts, nIdx, NULL);
            if (!strncmp(pWKF->FWS_name, pWork->FWS_name, FID_NAME_LEN)
              && pWKF->FWS_family == pWork->FWS_family
              && pWKF->FWS_bFixedWidth == pWork->FWS_bFixedWidth)
                {
                GEOSFontID = pWKF->FWS_FontID;
                break;
                }
            }
        MemUnlock(HandleOf(@WellKnownFonts));
        }

    /* Otherwise, we get a list of valid fonts, and pick the first one. */
    if (GEOSFontID == FID_INVALID)
        {
        fEnumFlags = FEF_USEFUL | FEF_FAMILY | FEF_OUTLINES;
        if (pWork->FWS_bFixedWidth)
            fEnumFlags |= FEF_FIXED_WIDTH;
        if (GrEnumFonts (&EnumBuffer, 1, fEnumFlags, pWork->FWS_family) == 1)
            GEOSFontID = EnumBuffer.FES_ID;
        }
    return GEOSFontID;
    }

Boolean FontFileGetAttrs(FontTableEntry* pEntry)
	{
	/* Attempt to open the font file. */
	/* Make sure the file token is correct. */
	/* Use FileRead() to get the data we need. */
	return FALSE;
	}

void GroupFontTableAddFontByID(FontID nFID)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontTableEntry entry;
    int nIdx;
    int nArrayLen;
    FontWorkStruct *pWKF;
    FontEnumStruct fontEnum;
    FontTableEntry* pElement;

	/* Scan the table to prevent duplicates. */
    if ((ChunkHandle) oFonts == NullChunk)
    	{
   		MemUnlock(Groups);
    	return;
    	}
    nArrayLen = ChunkArrayGetCount(oFonts);
    if (nArrayLen == MAX_FONT_ENTRIES)
	    {
		MemUnlock(Groups);
    	return;			/* font table is full */
	    }
    for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
        {
        pElement = ChunkArrayElementToPtr(oFonts, nIdx, NULL);
        if (pElement->FTE_GEOSFontID == nFID)
            break;
        }
    if (nIdx != nArrayLen)
	    {
		MemUnlock(Groups);
    	return;			/* entry already exists */
	    }

	/* Look in the well known fonts table. */
    if (MemLock(HandleOf(@WellKnownFonts)) != NULL)
        {
        nArrayLen = ChunkArrayGetCount(@WellKnownFonts);
        for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
            {
            pWKF = ChunkArrayElementToPtr(@WellKnownFonts, nIdx, NULL);
            if (pWKF->FWS_FontID == nFID)
            	{
            	entry.FTE_bFixedWidth = pWKF->FWS_bFixedWidth;
            	entry.FTE_charset = pWKF->FWS_charset;
            	entry.FTE_family = pWKF->FWS_family;
            	strcpy(entry.FTE_name, pWKF->FWS_name);
            	break;
            	}
            }
        MemUnlock(HandleOf(@WellKnownFonts));
        }
    else
    	nIdx = nArrayLen;
    /* If no match, generate a generic entry. */
    if (nIdx == nArrayLen)
    	{
    	/* Enum available fonts for the needed info. */
    	if (GrEnumFonts(&fontEnum, 1, 0, 0) != 1)
    		{
    		EC_WARNING(RTF_WARNING_UNAVAILABLE_FONT_ID_IN_TEXT);
			MemUnlock(Groups);
    		return;
    		}
    	if (!FontFileGetAttrs(&entry))
    		{
			EC_WARNING(RTF_WARNING_ADD_FONT_FAILED);
			MemUnlock(Groups);
    		return;
    		}
    	}

    /* Append this font to the list. */
    pElement = ChunkArrayAppend(oFonts, sizeof(FontTableEntry));
    if (pElement != NULL)
    	{
    	entry.FTE_RTFFontID = ChunkArrayGetCount(oFonts) - 1;
    	entry.FTE_GEOSFontID = nFID;
   		memcpy(pElement, &entry, sizeof(FontTableEntry));
    	}
    else
        EC_WARNING(RTF_WARNING_ADD_FONT_FAILED);
	MemUnlock(Groups);
	}

void GroupFontTableAddFont(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontWorkStruct* pWork = &((FontTableHeader*)LMemDeref (oFonts))->FTH_work;
    FontID nFID;
    FontTableEntry* pElement;

	if (pWork == NULL)
		{
		MemUnlock(Groups);
		return;
		}
    /* Do we have font data to work with? */
    if (pWork->FWS_name[0] != '\0')
        {
        /* Find the closest matching system font possible. */
        nFID = FindFont(pWork);

        /* Record the results in the table. */
        if (nFID != FID_INVALID && ChunkArrayGetCount(oFonts) < MAX_FONT_ENTRIES)
            {
            pElement = ChunkArrayAppend(oFonts, sizeof(FontTableEntry));
            if (pElement != NULL)
                {
                /* Deref pWork, as the heap might have resized and moved. */
                pWork = &((FontTableHeader*)LMemDeref (oFonts))->FTH_work;
                pElement->FTE_RTFFontID = pWork->FWS_FontID;
                pElement->FTE_GEOSFontID = nFID;
                strcpy(pElement->FTE_name, pWork->FWS_name);
				pElement->FTE_charset = pWork->FWS_charset;
				pElement->FTE_family = pWork->FWS_family;
				pElement->FTE_bFixedWidth = pWork->FWS_bFixedWidth;
                }
            else
                EC_WARNING(RTF_WARNING_ADD_FONT_FAILED);
            }
        }
	/* Clear the workspace. */
    memset(pWork, 0, sizeof(FontWorkStruct));
	pWork->FWS_charset = DEFAULT_CHARSET;
	MemUnlock(Groups);
    }

void GroupFontTableWorkSetFontID(word nFID)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;

    /* Store font ID in the workspace. */
    pWork->FWS_FontID = nFID;
    MemUnlock(Groups);
    }

void GroupFontTableWorkSetCharset(byte nCharSet)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;

    /* Store nCharSet in the workspace. */
    pWork->FWS_charset = nCharSet;
    MemUnlock(Groups);
	}

void GroupFontTableWorkSetFamily(FontFamily eFamily)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;

    /* Store eFamily in the workspace. */
    pWork->FWS_family = eFamily;
    MemUnlock(Groups);
    }

void GroupFontTableWorkSetPitch(word nFixed)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    FontWorkStruct* pWork = &((FontTableHeader*)
      LMemDeref (pHeader->GSH_fontTable))->FTH_work;
    Boolean bFixed;

    /* Translate nPitch into a fixed_width flag. */
    switch (nFixed)
        {
        case prqFixed:		/* Fixed pitch. */
            bFixed = TRUE;
            break;
        case prqDefault:	/* Default pitch. I like variable. */
        case prqVariable:	/* Variable pitch. */
        default:    /* Default for unknown. */
            bFixed = FALSE;
            break;
        }

    /* Store it in the workspace. */
    pWork->FWS_bFixedWidth = bFixed;
    MemUnlock(Groups);
    }

FontID GroupFontTableFindFont(word nFID)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontID GEOSFontID = FID_INVALID;
    FontTableEntry *pEntry;
    int nIdx;
    int nArrayLen;

    /* Enum array to find match, return FID_INVALID if not found. */
    if ((ChunkHandle) oFonts != NullChunk)
        {
        nArrayLen = ChunkArrayGetCount(oFonts);
        for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
            {
            pEntry = ChunkArrayElementToPtr(oFonts, nIdx, NULL);
            if (pEntry->FTE_RTFFontID == nFID)
                {
                GEOSFontID = pEntry->FTE_GEOSFontID;
                break;
                }
            }
        }
    MemUnlock(Groups);
    return GEOSFontID;
    }

Boolean GroupFontTableFindFontIndex(FontID nFID, word* pnIdx)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontTableEntry *pEntry;
    int nIdx;
    int nArrayLen;

	/* Iterate list for matching nFID. */
    if ((ChunkHandle) oFonts != NullChunk)
        {
        nArrayLen = ChunkArrayGetCount(oFonts);
        for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
            {
            pEntry = ChunkArrayElementToPtr(oFonts, nIdx, NULL);
            if (pEntry->FTE_GEOSFontID == nFID)
                {
				/* If found, set nIdx to its index and return TRUE. */
				*pnIdx = nIdx;
			    MemUnlock(Groups);
                return TRUE;
                }
            }
        }
    MemUnlock(Groups);
	return FALSE;
	}

Boolean EmitFontFamily(FontFamily family)
	{
	const char* szaFamilies[] = { "froman", "fswiss", "fscript", "fdecor",
		"ftech", "fmodern", "fnil", "fnil" };
	if (family > sizeof(szaFamilies) / sizeof(szaFamilies[0]))
		return TRUE;
	return RTFOutputAddControl(szaFamilies[family], FALSE);
	}

Boolean EmitFontCharset(FontTableEntry* pEntry)
	{
	int param = pEntry->FTE_charset;
	return RTFOutputAddControlParameter("fcharset", param, FALSE);
	}

DosCodePage GroupFontTableGetCodePage(word nIdx)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontTableEntry *pEntry;
    DosCodePage page;

	if (nIdx >= ChunkArrayGetCount(oFonts)
		|| (pEntry = ChunkArrayElementToPtr(oFonts, nIdx, NULL)) == NULL)
		page = CP_NIL;
	else
		{
		switch (pEntry->FTE_charset)
			{
			case ANSI_CHARSET:
			case EASTEUROPE_CHARSET:
			case DEFAULT_CHARSET:
				page = DEFAULT_CODEPAGE;
				break;
			case SYMBOL_CHARSET:
			case INVALID_CHARSET:
				page = CP_NIL;
				break;
			case PC437_CHARSET:
			case OEM_CHARSET:
				page = CP_OEM_437;
				break;
			default:
				page = DEFAULT_CODEPAGE;
			}
		}
    MemUnlock(Groups);
	return page;
	}

Boolean EmitFontPrq(Boolean bFixed)
	{
	int param = (bFixed) ? prqFixed : prqVariable;
	return RTFOutputAddControlParameter("fprq", param, TRUE);
	}

/*	This function emits the font table to the RTF output. */
Boolean GroupFontTableEmitTable(void)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    optr oFonts = pHeader->GSH_fontTable;
    FontTableEntry *pEntry;
    int nIdx;
    int nArrayLen;

    if ((ChunkHandle) oFonts == NullChunk)
    	{
	    MemUnlock(Groups);
    	return TRUE;
    	}
	/* Emit the table prologue. */
	if (!RTFOutputAddChar('{') || !RTFOutputAddControl("fonttbl", FALSE))
		{
	    MemUnlock(Groups);
		return FALSE;
		}
	/* Emit the table entries. */
    nArrayLen = ChunkArrayGetCount(oFonts);
    for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
        {
        pEntry = ChunkArrayElementToPtr(oFonts, nIdx, NULL);
        if (!RTFOutputAddChar('{')
          || !RTFOutputAddControlParameter("f", pEntry->FTE_RTFFontID, FALSE)
          || !EmitFontFamily(pEntry->FTE_family)
          || !EmitFontCharset(pEntry)
          || !EmitFontPrq(pEntry->FTE_bFixedWidth)
          || !RTFOutputAddString(pEntry->FTE_name)
          || !RTFOutputAddChar(';')
          || !RTFOutputAddChar('}'))
          	{
			MemUnlock(Groups);
		  	return FALSE;
          	}
        }
    MemUnlock(Groups);
	return RTFOutputAddChar('}');
	}


/*********************************************************/
/**************** COLOR TABLE (GT_COLOR TBL) *************/
/*********************************************************/

typedef struct
    {
    int CTS_nColorCount;
    int CTS_nDefaultColorCount;
    ColorQuad CTS_work;
    ColorQuad CTS_aColors[MAX_COLORS];
    }
ColorTableStruct;

static Boolean GroupColorTableInit(GroupStructsHeader* pHeader)
    {
    Boolean success = FALSE;
    ChunkHandle chColor;
    optr oColor;
    ColorTableStruct* pColorTbl = NULL;

    /* Create the chunk. */
    chColor = LMemAlloc (Groups, sizeof(ColorTableStruct));
    if (chColor)
        {
        /* Put pointers in heap header. */
        oColor = ConstructOptr (Groups, chColor);
        pHeader->GSH_colorTable = oColor;

        /* Initialize the structure. */
        pColorTbl = LMemDeref (oColor);
        memset (pColorTbl, 0, sizeof(ColorTableStruct));
        success = TRUE;
        }
    return success;
    }

static void GroupColorTableFree(GroupStructsHeader* pHeader)
    {
    LMemFree (pHeader->GSH_colorTable);
    pHeader->GSH_colorTable = NullChunk;
    }

static void GroupColorTableOpen(void)
    {
    /* Initialize a few things. */
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    pColorTbl->CTS_nColorCount = 0;
    pColorTbl->CTS_work.CQ_info = CF_RGB;
    MemUnlock(Groups);
    }

static void GroupColorTableClose(void)
    {
    }

static void GroupColorTableEmitText(char* pText)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);

    /* Semicolons separate color info. */
    if (pText[0] == ';' && pColorTbl->CTS_nColorCount < MAX_COLORS)
        {
        /* Copy working data into array and increment count. */
        memcpy (&pColorTbl->CTS_aColors[pColorTbl->CTS_nColorCount++],
          &pColorTbl->CTS_work, sizeof(ColorQuad));
        /* Clear workspace. */
        pColorTbl->CTS_work.CQ_redOrIndex = 0;
        pColorTbl->CTS_work.CQ_info = CF_RGB;
        pColorTbl->CTS_work.CQ_green = 0;
        pColorTbl->CTS_work.CQ_blue = 0;
        }
    MemUnlock(Groups);
    }

ColorQuad* GroupColorTableGetWorkspace()
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    ColorQuad* pColor = &pColorTbl->CTS_work;
    MemUnlock(Groups);

    return pColor;
    }

Boolean GroupColorTableFindColor(int nIndex, ColorQuad* pColor)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    Boolean result = FALSE;

    if (nIndex >= 0 && nIndex < pColorTbl->CTS_nColorCount)
        {
        memcpy (pColor, &pColorTbl->CTS_aColors[nIndex], sizeof(ColorQuad));
        result = TRUE;
        }
    MemUnlock(Groups);
    return result;
    }

Boolean GroupColorTableFindColorByQuad(ColorQuad* pColor,
	int* pIndex)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    int nIndex = 0;
	ColorQuad *pQuad = pColorTbl->CTS_aColors;
	Boolean result = FALSE;

	if (pColor->CQ_info == CF_INDEX
	  && pColor->CQ_redOrIndex < pColorTbl->CTS_nDefaultColorCount)
	  	{
	  	*pIndex = pColor->CQ_redOrIndex;
	  	result = TRUE;
	  	}
	else
		for (nIndex = 0; nIndex < pColorTbl->CTS_nColorCount; nIndex++, pQuad++)
			if (*(ColorQuadAsDWord*)pQuad == *(ColorQuadAsDWord*)pColor)
				{
				*pIndex = nIndex;
				result = TRUE;
				break;
				}
	MemUnlock(Groups);
	return result;
	}


/* 	This function adds an RGB triplet to the color table at the next available
	index. Set bDefault to TRUE if color is in default palette and can be found
	by CF_INDEX. It as assumed that default colors are added first and
	sequentially. */
void GroupColorTableAddColor(ColorQuad* pColor, Boolean bDefault)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    int nIndex = pColorTbl->CTS_nColorCount;

	if (pColor->CQ_info != CF_RGB)
		{
		EC_WARNING(RTF_WARNING_UNSUPPORTED_COLOR_TYPE);
		MemUnlock(Groups);
		return;
		}
	if (nIndex < MAX_COLORS)
		{
		*(ColorQuadAsDWord*)&pColorTbl->CTS_aColors[nIndex]
		  = *(ColorQuadAsDWord*)pColor;
		pColorTbl->CTS_nColorCount++;
		if (bDefault)
			pColorTbl->CTS_nDefaultColorCount++;
		}
	MemUnlock(Groups);
	}

/*	This function emits the color table to the RTF output. */
Boolean GroupColorTableEmitTable(void)
	{
    GroupStructsHeader* pHeader = MemLock(Groups);
    ColorTableStruct* pColorTbl = LMemDeref (pHeader->GSH_colorTable);
    int nCount = pColorTbl->CTS_nColorCount;
	ColorQuad *pQuad = pColorTbl->CTS_aColors;

	/* Emit the table prologue. */
	if (!RTFOutputAddChar('{') || !RTFOutputAddControl("colortbl", FALSE))
		{
		MemUnlock(Groups);
		return FALSE;
		}
	/* Emit the table entries. */
	for (; nCount; pQuad++, nCount--)
		{
		if (!RTFOutputAddControlParameter("red", pQuad->CQ_redOrIndex, FALSE)
		  || !RTFOutputAddControlParameter("green", pQuad->CQ_green, FALSE)
		  || !RTFOutputAddControlParameter("blue", pQuad->CQ_blue, FALSE)
		  || !RTFOutputAddChar(';'))
			{
			MemUnlock(Groups);
		  	return FALSE;
			}
		}
	MemUnlock(Groups);
	return RTFOutputAddChar('}');
	}

/*******************************************************/


Boolean GroupsInit(void)
    {
    Boolean success = FALSE;

    Groups = MemAlloc (GROUPS_INIT_SIZE, HF_DYNAMIC, HAF_STANDARD_LOCK);
    if (Groups != NullHandle)
        {
	    GroupStructsHeader *pHeader;
        LMemInitHeap (Groups, LMEM_TYPE_GENERAL, 0, sizeof(GroupStructsHeader),
          4, STD_INIT_HEAP);
        pHeader = MemDeref(Groups);
        if (GroupDocumentInit(pHeader) &&
          GroupFontTableInit(pHeader) &&
          GroupColorTableInit(pHeader) )
            success = TRUE;
        MemUnlock (Groups);
        }
    else
        SetError(TE_OUT_OF_MEMORY);
    return success;
    }

void GroupsFree(void)
    {
    if (Groups != NullHandle)
        {
        GroupStructsHeader *pHeader = MemLock(Groups);
        GroupDocumentFree(pHeader);
        GroupFontTableFree(pHeader);
        GroupColorTableFree(pHeader);
        MemUnlock (Groups);
        MemFree (Groups);
        }
    }

/* 	All functions which return a pointer must call GroupsUnlock() when done
	with the pointer.  The returned pointer may become invalid after calling
	GroupsUnlock(). */
void GroupsUnlock(void)
	{
	MemUnlock (Groups);
	}

#pragma argsused
void EmitTextToCurrentDestination(char *pText, int nLen)
    {
    switch (GetGroup())
        {
        case GT_NONE:
/*        	SetError(TE_IMPORT_ERROR); */
        	break;
        case GT_RTF:
            GroupDocumentEmitText(pText);
            break;
        case GT_FONTTBL:
            GroupFontTableEmitText(pText);
            break;
        case GT_COLORTBL:
            GroupColorTableEmitText(pText);
            break;
        }
    }

VisTextCharAttr* GetGroupCharAttrs(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    VisTextCharAttr* pAttrs = NULL;
    if (GetGroup() == GT_RTF)
        pAttrs = GroupDocumentGetCharAttrs(pHeader);
    return pAttrs;
    }

void SetGroupCharAttrsDirty(void)
    {
    if (GetGroup() == GT_RTF)
        GroupDocumentSetCharAttrsDirty();
    }

VisTextParaAttr* GetGroupParaAttrs(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    VisTextParaAttr* pAttrs = NULL;
    if (GetGroup() == GT_RTF)
        pAttrs = GroupDocumentGetParaAttrs(pHeader);
    return pAttrs;
    }

void SetGroupParaAttrsDirty(void)
    {
    if (GetGroup() == GT_RTF)
        GroupDocumentSetParaAttrsDirty();
    }

Tab* GetGroupWorkTab(void)
    {
    GroupStructsHeader* pHeader = MemLock(Groups);
    Tab* pTab = NULL;
    if (GetGroup() == GT_RTF)
        pTab = GroupDocumentGetWorkTab(pHeader);
    return pTab;
    }

void CloseGroup(GroupType eType)
    {
    switch (eType)
        {
        case GT_NONE: break;    /* do nothing, entry point */
        case GT_RTF: GroupDocumentClose(); break;
        case GT_FONTTBL: GroupFontTableClose();
                SetGroupFlag(GF_FONTTBL); break;
        case GT_COLORTBL: GroupColorTableClose();
                SetGroupFlag(GF_COLORTBL); break;
        }
    }

void OpenGroup(GroupType eType)
    {
    switch (eType)
        {
        case GT_NONE: break;    /* do nothing, finale */
        case GT_RTF: GroupDocumentOpen(); break;
        case GT_FONTTBL: GroupFontTableOpen(); break;
        case GT_COLORTBL: GroupColorTableOpen(); break;
        }
    }
