@include <stdapp.goh>
#include "vltinput.h"
#include "output.h"
#include "groups.h"
#include "global.h"

typedef struct
	{
	byte CPE_index;
	RGBDelta CPE_rgb;
	}
ColorPaletteEntry;

@start ColorPaletteResource, data;
  
@chunkArray ColorPaletteEntry Standard16 = {
	{ C_BLACK, {0, 0, 0} },
	{ C_BLUE, {0, 0, 170} },
	{ C_GREEN, {0, 170, 0} },
	{ C_CYAN, {0, 170, 170} },
	{ C_RED, {170, 0, 0} },
	{ C_VIOLET, {170, 0, 170} },
	{ C_BROWN, {170, 85, 0} },
	{ C_LIGHT_GRAY, {170, 170, 170} },
	{ C_DARK_GRAY, {85, 85, 85} },
	{ C_LIGHT_BLUE, {85, 85, 255} },
	{ C_LIGHT_GREEN, {85, 255, 85} },
	{ C_LIGHT_CYAN, {85, 255, 255} },
	{ C_LIGHT_RED, {255, 85, 85} },
	{ C_LIGHT_VIOLET, {255, 85, 255} },
	{ C_YELLOW, {255, 255, 85} },
	{ C_WHITE, {255, 255, 255} }
};
@localize not;

@end ColorPaletteResource;

void AddColorQuad(ColorQuad* pCQ)
	{
	int dummy;

	if (pCQ->CQ_info == CF_RGB
	  && !GroupColorTableFindColorByQuad(pCQ, &dummy))
		GroupColorTableAddColor(pCQ, FALSE);
	}

Boolean PrescanColorAndFontTables(optr source)
	{
	int nArrayLen, nIdx;
	ColorQuad cq;
	word token;
	MemHandle hArray;
	VisTextCharAttr* pCharAttr;
	VisTextParaAttr* pParaAttr;

	if (VLTInputInit(source))
		{
		/* Add the standard 16-color palette. */
		if (MemLock(HandleOf(@Standard16)) != NULL)
			{
			nArrayLen = ChunkArrayGetCount(@Standard16);
			for (nIdx = 0; nIdx < nArrayLen; nIdx ++)
				{
				ColorPaletteEntry* pCPE = ChunkArrayElementToPtr(@Standard16, nIdx, NULL);
				cq.CQ_info = CF_RGB;
				cq.CQ_redOrIndex = pCPE->CPE_rgb.RGBD_red;
				cq.CQ_green = pCPE->CPE_rgb.RGBD_green;
				cq.CQ_blue = pCPE->CPE_rgb.RGBD_blue;
				GroupColorTableAddColor(&cq, TRUE);
				}
			}

		/* Make sure the default font gets index #0 in the font table. */
		GroupFontTableAddFontByID(DefaultCharAttrs.VTCA_fontID);

		/* Scan the character elements for all ColorQuad and font fields. */
		hArray = NullHandle;
		token = VLTInputGetNextCharToken(&hArray);
		while (token != CA_NULL_ELEMENT)
			{
			pCharAttr = VLTInputGetCharAttrByToken(token, &hArray);
			AddColorQuad(&pCharAttr->VTCA_color);
			AddColorQuad(&pCharAttr->VTCA_bgColor);
			GroupFontTableAddFontByID(pCharAttr->VTCA_fontID);
			token = VLTInputGetNextCharToken(&hArray);
			}
		if (hArray != NullHandle)
			VMUnlock(hArray);

		/* Scan the paragraph elements for all ColorQuad fields. */
		hArray = NullHandle;
		token = VLTInputGetNextParaToken(&hArray);
		while (token != CA_NULL_ELEMENT)
			{
			pParaAttr = VLTInputGetParaAttrByToken(token, &hArray);
			AddColorQuad(&pParaAttr->VTPA_borderColor);
			AddColorQuad(&pParaAttr->VTPA_bgColor);
			token = VLTInputGetNextParaToken(&hArray);
			}
		if (hArray != NullHandle)
			VMUnlock(hArray);

		}

	VLTInputFree();
	return (GetError() == TE_NO_ERROR);
	}
