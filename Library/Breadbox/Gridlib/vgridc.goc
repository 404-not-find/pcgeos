/***************************************************************************
 *  FILE:  VGridC.GOC                                                      *
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Library:  VisGridClass
 *-------------------------------------------------------------------------
 |
 | Objective:
 |    Setup to create a grid vis object for handling layout of simple tables
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/09/99  Created
 |
 *-----------------------------------------------------------------------*/

/***************************************************************************
 *		Include files
 ***************************************************************************/

@include <stdapp.goh>
@include <Ansi/string.h>
@include <Ansi/stdio.h>
@include <Objects/vTGridC.goh>

Boolean IVisGridKeyAction(optr oself, byte character, word flags) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SET_DESTINATION
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Declare where messages are go for this grid.
 |
 | Inputs:
 |    optr destination            -- object to receive messages
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/16/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SET_DESTINATION
/* (optr destination) ; */
{
    pself->VGI_destination = destination ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_COLUMN_WIDTH
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine the width of a current column.
 |
 | Inputs:
 |    word column                 -- Column to get width
 |
 | Outputs:
 |    word                        -- Pixel width of column, or 0 if
 |                                   illegal column
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_GET_COLUMN_WIDTH
/* (word column) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word size ;
    word *p_array ;
    word width=0 ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellWidths)  {
        array = ConstructOptr(mem, pself->VGI_cellWidths) ;
        num = ChunkArrayGetCount(array) ;
        if (column < num)  {
            p_array = ChunkArrayElementToPtr(array, column, &size) ;
            width = *p_array ;
        }
    }
    return width ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_ROW_HEIGHT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine the width of a current row.
 |
 | Inputs:
 |    word row                    -- Row to get height
 |
 | Outputs:
 |    word                        -- Pixel hieght of row, or 0 if
 |                                   illegal row
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_GET_ROW_HEIGHT
/* (word row) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word size ;
    word *p_array ;
    word height=0 ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellHeights)  {
        array = ConstructOptr(mem, pself->VGI_cellHeights) ;
        num = ChunkArrayGetCount(array) ;
        if (row < num)  {
            p_array = ChunkArrayElementToPtr(array, row, &size) ;
            height = *p_array ;
        }
    }
    return height ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_COLUMN_X
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Find the pixel X position of the start of the given column.  If
 |    VIS_GRID_LOCATION_PAST_END is given, the pixel position past the last
 |    column is found.
 |
 | Inputs:
 |    word column                 -- Beginning pixel of column to find
 |
 | Outputs:
 |    word                        -- Pixel position found
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_FIND_COLUMN_X
/* (word column) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word size ;
    word *p_array ;
    word width=0 ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    width += pself->VGI_rimWidth ;
    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellWidths)  {
        array = ConstructOptr(mem, pself->VGI_cellWidths) ;
        num = ChunkArrayGetCount(array) ;
        if (column >= num)  {
            column = num ;
            width -= pself->VGI_dividerWidth ;
        }
        p_array = ChunkArrayElementToPtr(array, 0, &size) ;
        if (column)  {
            while (column--)
                width += *(p_array++) + pself->VGI_dividerWidth ;
        }
    }
    return width ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_ROW_Y
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Find the pixel Y position of the start of the given row.  If
 |    VIS_GRID_LOCATION_PAST_END is given, the pixel position past the last
 |    row is found.
 |
 | Inputs:
 |    word row                    -- Beginning pixel of row to find
 |
 | Outputs:
 |    word                        -- Pixel position found
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_FIND_ROW_Y
/* (word row) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word size ;
    word *p_array ;
    word height=0 ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    height += pself->VGI_rimWidth ;
    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellHeights)  {
        array = ConstructOptr(mem, pself->VGI_cellHeights) ;
        num = ChunkArrayGetCount(array) ;
        if (row >= num)  {
            row = num ;
            height -= pself->VGI_dividerWidth ;
        }
        p_array = ChunkArrayElementToPtr(array, 0, &size) ;
        if (row)  {
            while (row--)
                height += *(p_array++) + pself->VGI_dividerWidth ;
        }
    }
    return height ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_RIGHT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell to right of selection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_RIGHT
{
    IVisGridKeyAction(oself, VC_RIGHT, 0) ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_LEFT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell to left of selection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_LEFT
{
    IVisGridKeyAction(oself, VC_LEFT, 0) ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_UP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell above the selection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_UP
{
    IVisGridKeyAction(oself, VC_UP, 0) ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_DOWN
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell below the selection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_DOWN
{
    IVisGridKeyAction(oself, VC_DOWN, 0) ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_HOME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell on the first column of the current selection row.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_HOME
{
    IVisGridKeyAction(oself, VC_HOME, 0) ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_END
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Select cell on the last column of the current selection row.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_SELECT_CELL_MOVE_END
{
    IVisGridKeyAction(oself, VC_END, 0) ;
}

/*-------------------------------------------------------------------------
 | Routine:  IVisGridKeyAction
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Process one key stroke for the grid (most likely an arrow key)
 |
 | Inputs:
 |    optr oself                  -- VisGrid object to affect
 |    byte character              -- character pressed (VC_...)
 |    word flags                  -- control flags (SHIFT?)
 |
 | Outputs:
 |    Boolean                     -- TRUE if the key was used in an
 |                                   action, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
Boolean IVisGridKeyAction(optr oself, byte character, word flags)
{
    word numHigh=0, numWide=0 ;
    optr array ;
    MemHandle mem ;
    word newX, newY ;
    VisGridInstance *pself ;
    Boolean didAction = TRUE ;

    pself = ObjDerefVis(oself) ;
    mem = OptrToHandle(oself) ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    /* Because most actions involve moving the selected cell, */
    /* find out the number of columns and rows */
    if (pself->VGI_cellWidths)  {
        array = ConstructOptr(mem, pself->VGI_cellWidths) ;
        numWide = ChunkArrayGetCount(array) ;
    }
    if (pself->VGI_cellHeights)  {
        array = ConstructOptr(mem, pself->VGI_cellHeights) ;
        numHigh = ChunkArrayGetCount(array) ;
    }

    /* Where are we now? */
    newX = pself->VGI_selectionX ;
    newY = pself->VGI_selectionY ;

    if (character == VC_ENTER)
        character = pself->VGI_remapEnterKey ;

    /* Do the appropriate math for the appropriate movement command */
    switch (character)  {
        case VC_UP:
            if (newY == 0)  {
                newY = numHigh-1 ;
            } else if (newY==VIS_GRID_SELECTION_NONE)  {
                newY = numHigh-1 ;
                newX = 0 ;
            } else  {
                newY-- ;
            }
            break ;
        case VC_LEFT:
            if (newX == 0)  {
                newX = numWide-1 ;
            } else if (newX==VIS_GRID_SELECTION_NONE)  {
                newX = numWide-1 ;
                newY = 0 ;
            } else
                newX-- ;
            break ;
        case VC_RIGHT:
            if (newX==VIS_GRID_SELECTION_NONE)  {
                newX = newY = 0 ;
            } else {
                newX++ ;
                if (newX >= numWide)
                    newX = 0 ;
            }
            break ;
        case VC_DOWN:
            if (newY==VIS_GRID_SELECTION_NONE)  {
                newX = newY = 0 ;
            } else {
                newY++ ;
                if (newY >= numHigh)
                    newY = 0 ;
            }
            break ;
        case VC_TAB:
            if ((flags>>8) & (SS_LSHIFT|SS_RSHIFT))  {
                if ((newX==VIS_GRID_SELECTION_NONE)||
                    (newY==VIS_GRID_SELECTION_NONE))  {
                    newX = numWide-1 ;
                    newY = numHigh-1 ;
                } else {
                    newX-- ;
                    if (newX == 0xFFFF)  {
                        newX = numWide-1 ;
                        newY-- ;
                        if (newY == 0xFFFF)
                            newY = numHigh-1 ;
                    }
                }
            } else {
                if ((newX==VIS_GRID_SELECTION_NONE)||
                    (newY==VIS_GRID_SELECTION_NONE))  {
                    newX = newY = 0 ;
                } else {
                    newX++ ;
                    if (newX >= numWide)  {
                        newX = 0 ;
                        newY++ ;
                        if (newY >= numHigh)
                            newY = 0 ;
                    }
                }
            }
            break ;
        case VC_HOME:
            newX = 0 ;
            break ;
        case VC_END:
            newX = numWide-1 ;
            break ;
        default:
            didAction = FALSE ;
            break ;
    }

    /* Check if we actually moved, and if so, make that the new selection */
    if ((newX != pself->VGI_selectionX) ||
            (newY != pself->VGI_selectionY))
        @call oself::MSG_VIS_GRID_SELECT_CELL(newX, newY) ;

    /* Return TRUE if we actually processed a keystroke */
    return didAction ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_KBD_CHAR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Process one key stroke for the grid (most likely an arrow key)
 |    but call the superclass if it wasn't an arrow/movement key.
 |
 | Inputs:
 |    word character              -- Extended character
 |    word flags                  -- control flags (SHIFT?)
 |    word state                  -- press/release?
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_META_KBD_CHAR
/*MSG_META_FUP_KBD_CHAR*/
/*
				word character = cx,
				word flags = dx,
				word state = bp) = carry;
*/
{
    if ((flags & CF_RELEASE)==0)  {
        if (!IVisGridKeyAction(oself, character & 0x00FF, state))
            @callsuper() ;
    } else {
        @callsuper() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_FUP_KBD_CHAR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This method is called when a child object (usually a
 |    VisTextGridText object) passes up a keystroke action.
 |
 | Inputs:
 |    word character              -- Extended character
 |    word flags                  -- control flags (SHIFT?)
 |    word state                  -- press/release?
 |
 | Outputs:
 |    Boolean                     -- TRUE if keystroke used.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/14/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_META_FUP_KBD_CHAR
/*MSG_META_FUP_KBD_CHAR*/
/*
				word character = cx,
				word flags = dx,
				word state = bp) = carry;
*/
{
    if ((flags & CF_RELEASE)==0)  {
        if (!IVisGridKeyAction(oself, character & 0x00FF, flags))
            return @callsuper() ;
        else
            return TRUE ;
    } else {
        return @callsuper() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_OPEN
 *-------------------------------------------------------------------------
 |
 | Description:
 |    When an object is started up for visibility, the VisGrid will
 |    initialize the chunk arrays that store the column and row sizes.
 |    A call to MSG_VIS_GRID_INITIAL_CELLS will immediately follow.
 |
 | Inputs:
 |    WindowHandle window         -- Passed to superclass, but ignored
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/11/99  Created
 |
 *-----------------------------------------------------------------------*/

@extern method VisGridClass, MSG_VIS_OPEN
{
    @callsuper() ;

    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_INITIAL_CELLS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This method resets all the column and row widths to zero or to
 |    those defined in ATTR_VIS_GRID_INITIAL_WIDTHS and ..._HEIGHTS.
 |    All past column and row widths are destroyed.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/11/99  Created
 |
 *-----------------------------------------------------------------------*/

@extern method VisGridClass, MSG_VIS_GRID_INITIAL_CELLS
{
    word *p_widthList ;
    word *p_heightList ;
    ChunkHandle *p_chunk ;
    ChunkHandle chunk ;
    word i ;
    MemHandle mem ;
    ChunkHandle newArray ;


    /* Create the chunk arrays to hold the column locations if not */
    /* already defined */
    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellWidths == NullHandle)  {
        newArray = ChunkArrayCreate(mem, sizeof(word), 0, OCF_DIRTY) ;
        pself = ObjDerefVis(oself) ;
        if (newArray)
            pself->VGI_cellWidths = newArray ;
    }

    if (pself->VGI_cellHeights == NullHandle)  {
        newArray = ChunkArrayCreate(mem, sizeof(word), 0, OCF_DIRTY) ;
        pself = ObjDerefVis(oself) ;
        if (newArray)
            pself->VGI_cellHeights = newArray ;
    }

    pself->VGI_flags |= VIS_GRID_FLAG_INITIAL_CELLS_MADE ;

    if (pself->VGI_cellWidths)  {
        ChunkArrayZeroHandles(
            OptrToHandle(oself),
            pself->VGI_cellWidths) ;
        pself = ObjDerefVis(oself) ;
        @call oself::MSG_META_SUSPEND() ;

        p_chunk = ObjVarFindData(oself, ATTR_VIS_GRID_INITIAL_WIDTHS) ;
        if ((p_chunk) && (*p_chunk))  {
            chunk = *p_chunk ;
            i = 0 ;
            while (1)  {
                p_widthList = LMemDerefHandles(OptrToHandle(oself), chunk) ;
                if (p_widthList[i] == 0)
                    break ;
                @call oself::MSG_VIS_GRID_ADD_COLUMN(VIS_GRID_LOCATION_PAST_END, p_widthList[i]) ;
                i++ ;
            }
        } else {
            @call oself::MSG_VIS_GRID_ADD_COLUMN(
                      VIS_GRID_LOCATION_PAST_END,
                      VIS_GRID_DEFAULT_CELL_WIDTH) ;
        }
    }
    if (pself->VGI_cellHeights)  {
        p_chunk = ObjVarFindData(oself, ATTR_VIS_GRID_INITIAL_HEIGHTS) ;
        if ((p_chunk) && (*p_chunk))  {
            chunk = *p_chunk ;
            i = 0 ;
            while (1)  {
                p_heightList = LMemDerefHandles(OptrToHandle(oself), chunk) ;
                if (p_heightList[i] == 0)
                    break ;
                @call oself::MSG_VIS_GRID_ADD_ROW(VIS_GRID_LOCATION_PAST_END, p_heightList[i]) ;
                i++ ;
            }
        } else {
            @call oself::MSG_VIS_GRID_ADD_ROW(
                      VIS_GRID_LOCATION_PAST_END,
                      VIS_GRID_DEFAULT_CELL_HEIGHT) ;
        }

        @call oself::MSG_META_UNSUSPEND() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_RESIZE_COLUMN
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Changes the pixel width of a given column.
 |
 |    NOTE:  As of 4/16/1999, this does not affect the placement of the
 |           selection.  Unselect and then reselect for now.  LES
 |
 | Inputs:
 |    word column                 -- Column to resize
 |    word size                   -- new pixel width
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_RESIZE_COLUMN
/* (word column, word size) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word sizeElement ;
    word *p_array ;
    Boolean isBigger ;

EC(    EC_ERROR_IF(size >= 0x4000, -1) ; )
    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellWidths)  {
        array = ConstructOptr(mem, pself->VGI_cellWidths) ;
        num = ChunkArrayGetCount(array) ;

        /* Only bother if we have a column that exists */
        if (column < num)  {
            p_array = ChunkArrayElementToPtr(array, column, &sizeElement) ;
            if (size != *p_array)  {
                /* Correctly invalidate the cell range either before
                   or after depending on if we are growing or shrinking */
                if (size > *p_array)
                    isBigger = TRUE ;
                else
                    isBigger = FALSE ;
                if (!isBigger)
                    @call oself::MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
                        column,
                        0,
                        VIS_GRID_LOCATION_PAST_END,
                        VIS_GRID_LOCATION_PAST_END) ;

                /* store the new size */
                *p_array = size ;
                if (isBigger)
                    @call oself::MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
                        column,
                        0,
                        VIS_GRID_LOCATION_PAST_END,
                        VIS_GRID_LOCATION_PAST_END) ;
                @call oself::MSG_VIS_RECALC_SIZE(0, 0) ;
            }
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_RESIZE_ROW
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Changes the pixel height of a given row.
 |
 |    NOTE:  As of 4/16/1999, this does not affect the placement of the
 |           selection.  Unselect and then reselect for now.  LES
 |
 | Inputs:
 |    word row                    -- Row to resize
 |    word size                   -- new pixel height
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/12/99  Created
 |
 *-----------------------------------------------------------------------*/
@extern method VisGridClass, MSG_VIS_GRID_RESIZE_ROW
/* (word row, word size) ; */
{
    optr array ;
    MemHandle mem ;
    word num ;
    word sizeElement ;
    word *p_array ;
    Boolean isBigger ;

EC(    EC_ERROR_IF(size >= 0x4000, -1) ; )
    if (!(pself->VGI_flags & VIS_GRID_FLAG_INITIAL_CELLS_MADE))
        @call oself::MSG_VIS_GRID_INITIAL_CELLS() ;

    mem = OptrToHandle(oself) ;
    if (pself->VGI_cellHeights)  {
        array = ConstructOptr(mem, pself->VGI_cellHeights) ;
        num = ChunkArrayGetCount(array) ;
        if (row < num)  {
            p_array = ChunkArrayElementToPtr(array, row, &sizeElement) ;
            if (size != *p_array)  {
                /* Correctly invalidate the cell range either before
                   or after depending on if we are growing or shrinking */
                if (size > *p_array)
                    isBigger = TRUE ;
                else
                    isBigger = FALSE ;
                if (!isBigger)
                    @call oself::MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
                        0,
                        row,
                        VIS_GRID_LOCATION_PAST_END,
                        VIS_GRID_LOCATION_PAST_END) ;
                *p_array = size ;
                if (isBigger)
                    @call oself::MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
                        0,
                        row,
                        VIS_GRID_LOCATION_PAST_END,
                        VIS_GRID_LOCATION_PAST_END) ;
                @call oself::MSG_VIS_RECALC_SIZE(0, 0) ;
            }
        }
    }
}

/***************************************************************************
 *  END OF FILE:  VGridC.GOC                                                      *
 ***************************************************************************/
