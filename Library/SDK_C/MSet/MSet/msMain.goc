/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		msMain.goc

AUTHOR:		Paul DuBois, Aug  4, 1993

ROUTINES:
	Name			Description
	----			-----------
MSG_MSET_INITIALIZE		Sets up the VM File and MSetCalc object

MSCreateDefaultParamsBlock	Creates a block with default values for
				MSI_msetVMBlock.

MSG_MSET_PAUSE_CALCULATION	Pauses the calculation

MSG_MSET_CONTINUE_CALCULATION	Continues the calculation

MSG_MSET_RESET_CALCULATION	Resets the calculation thread and data

MSG_MSET_STOP_CALCULATION	Detaches the MSetCalc object

MSG_MSET_NO_CALC_MEMORY		Notification that thread has run out of
				memory

MSG_META_DETACH			Starts a detach, detaches MSetCalc object

MSG_META_DETACH_COMPLETE	Stub, does nothing


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	8/ 4/93   	Initial version.

DESCRIPTION:
	This file contains the class declaration, initialization
	and shutdown methods, and thread manipulation methods for
	the MSet class.

	$Id: msMain.goc,v 1.1 97/04/07 12:04:30 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>

@include <SDK_C/mset.goh>		/* Exported enums, structs */
@include <Objects/SDK_C/msetC.goh>	/* MSetClass definition */
@include <Objects/SDK_C/msCalcC.goh>	/* MSetCalcClass definition */

#include "msConst.h"			/* Constants and such */
#include "msFatErr.h"			/* Fatal errors */
@include "Local/strings.goh"		/* Extern chunk declarations */

/***********************************************************************
		Class Declarations and externally defined messages
***********************************************************************/
@classdecl	MSetClass ;

/*
 * Note that if you define a method, but forget to provide an @extern
 * declaration for it here, your library or application will link without
 * errors.  Since objects simply ignore messages for which they don't have a
 * handler, this bug can be difficult to track down.  The easiest way to
 * avoid this is to make sure that this section always matches the @message
 * definitions in the class definition (in this case, in msetC.goh).
 */

/*
 * These methods are defined in msDraw.goc
 */
@extern method MSetClass, MSG_MSET_NEW_LINE;
@extern method MSetClass, MSG_MSET_DRAW;
@extern method MSetClass, MSG_VIS_DRAW;

/*
 * These methods are defined in msNote.goc
 */
@extern method MSetClass, MSG_MSET_CONTROLLER_SET_COLOR_SCHEME;
@extern method MSetClass, MSG_MSET_LOAD_PARAM_BLOCK;
@extern method MSetClass, MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE;
@extern method MSetClass, MSG_MSET_SEND_NULL_STATUS_NOTIFICATION;
@extern method MSetClass, MSG_META_GAINED_TARGET_EXCL;
@extern method MSetClass, MSG_META_LOST_TARGET_EXCL;

/*
 * These methods are defined in msParms.goc
 */
@extern method MSetClass, MSG_MSET_SET_PRIORITY;
@extern method MSetClass, MSG_MSET_SET_COLOR_SCHEME;
@extern method MSetClass, MSG_VIS_SET_SIZE;
@extern method MSetClass, MSG_MSET_SET_POSITION;
@extern method MSetClass, MSG_MSET_SET_RESOLUTION;
@extern method MSetClass, MSG_MSET_SET_PRECISION;
@extern method MSetClass, MSG_MSET_SET_SELECT_XY;
@extern method MSetClass, MSG_MSET_SET_MAX_DWELL;

/*
 * These methods are defined in msZoom.goc
 */
@extern method MSetClass, MSG_MSET_ZOOM;
@extern method MSetClass, MSG_META_START_SELECT;


/***********************************************************************
 *		Function Prototypes (internal)
 ***********************************************************************/
static VMBlockHandle	MSCreateDefaultParamsBlock(VMFileHandle);
static void		MSDestroyParamsBlock(VMFileHandle, VMBlockHandle);

/***********************************************************************
 *		Message handlers
 ***********************************************************************/

/***********************************************************************
 *		MSG_MSET_INITIALIZE for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Sets up the VM File
 * PARAMETERS:	VMFileHandle	vmfh
 *		VMBlockHandle	vmbh
 * RETURN:	VMBlockHandle
 *	Returns NullHandle if initialization failed.
 *
 * SIDE EFFECTS:
 *	If successful:
 *	
 *	If vmbh == NullHandle, some VM blocks attached to vmfh.
 *	An event-driven thread is created.
 *	MSI_initialized		set to TRUE
 *	MSI_calcThread		contains handle of spawned thread
 *	MSI_vmFile		contains handle of passed VM File
 *	MSI_msetVMBlock		contains handle of passed VM Block
 *				or handle of newly-created VM Block
 *
 *	If unsuccessful, the VM file and instance data are left the way they
 *	were, and NullHandle is returned.
 *
 * STRATEGY:
 *
 * This message sets up all the VM storage that the MSet object needs to
 * store the results of its calculations.  There are two possibilities:
 * 
 * 1.	A new MSet is being calculated
 * 	Pass in the VMFileHandle, and a NULL VMBlockHandle.  The MSet will
 *	initialize a block for its own use and return its VMFileHandle.
 *	Pass this VMFileHandle when restoring from a VM File.
 *
 * 2.	The MSet is being restored from a VM File
 *	Pass in the VMFileHandle and the VMBlockHandle of the MSet data
 *	block, described above in #2.
 * 
 * Once the VMFile and VMBlock have been set up, spawn off a thread to
 * calculate the MSet, but don't tell it to start calculating yet.
 *
 * NOTES:
 *	The MSet uses (Height+7)/8 VM blocks to hold the data.  This makes
 *	finding a data point given an x,y coordinate a little easier.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/ 6/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_MSET_INITIALIZE
{
    ThreadHandle	newThread;
    Boolean		threadRetVal;
    Boolean		newBlock = FALSE;


    EC_ERROR_IF(pself->MSI_initialized != FALSE,
		ERROR_ALREADY_INITIALIZED);

    if (vmbh == NullHandle)
    {
	/*
	 *  Create and attach a new VM Block, which will be used to store
	 *  the state of the MSet.  This block will be shared between the
	 *  MSet object and the calculation thread.  Return NullHandle on
	 *  error.
	 */

	vmbh = MSCreateDefaultParamsBlock(vmfh);
	if (vmbh == NullHandle) return NullHandle;
	newBlock = TRUE;	/* Must clean this block up if thread */
				/* creation fails */
    }


    /*
     *	Create a new event-driven thread.  Return NullHandle on error.
     *	Event-driven threads are ususally objects of type ProcessClass
     *	or a subclass thereof.  This one is no exception.  Set the priority
     *	to something nice and low, so it doesn't interfere with other
     *	running apps.
     */
    threadRetVal = @call process::MSG_PROCESS_CREATE_EVENT_THREAD
	(&newThread,			/* Handle to thread is stored here */
	 &MSetCalcClass,		/* Class of the thread itself */
	 512);				/* Stack size -- 512 is standard */
    if (threadRetVal) {			/* FALSE means successful */
	if (newBlock) MSDestroyParamsBlock(vmfh, vmbh);
	return NullHandle;
    }
    ThreadModify(newThread, PRIORITY_LOW, TMF_BASE_PRIO);


    /*
     *	Re-create any fields in the parameter block which need to be
     *	"refreshed" -- those that have become invalid between closing and
     *	opening the VM File.  This is also a convenient time to set the size
     *	of the Vis object. FIXME documentation
     */
{
    MemHandle		mspH;
    MSetParameters*	mspP;

    mspP = (MSetParameters*) VMLock(vmfh, vmbh, &mspH);
    @call self::MSG_VIS_SET_SIZE(mspP->MSP_pixelWidth, mspP->MSP_pixelHeight);
    VMUnlock(mspH);
}

    /*
     *	We've successfully set everything up.  All that's left to do is
     *	alter our instance data.
     */
    pself = ObjDerefVis(oself);
    pself->MSI_vmFile = vmfh;
    pself->MSI_msetVMBlock = vmbh;
    pself->MSI_calcThread = newThread;
    pself->MSI_initialized = TRUE;

    return vmbh;
}				/* End of MSG_MSET_INITIALIZE.	*/

/***********************************************************************
 *		MSCreateDefaultParamsBlock
 ***********************************************************************
 * SYNOPSIS:	Creates a block with default values for MSI_msetVMBlock.
 *		Attaches it to the passed VM file.
 * CALLED BY:	Handler for MSG_MSET_INITIALIZE
 * RETURN:	VMBlockHandle to the initialized block of memory
 * SIDE EFFECTS:
 *	Calls MemAlloc, so it could shuffle the heap.
 *	If successful, adds three blocks to the VM File.
 *
 * STRATEGY:	    
 *	Allocates a block of memory containing an MSetParameters
 *	struct with its values initialized to defaults.  The block
 *	also contains as many MSetDataHandles as are needed for an
 *	MSet of default size; these are initialized to all zeros.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/11/93   	Initial Revision
 *
 ***********************************************************************/
static VMBlockHandle
MSCreateDefaultParamsBlock (VMFileHandle vmfh)
{
    VMBlockHandle	dataVM;	/* VM Handle to array of MSetDataHandles */
    MemHandle		mspH, mscpH, dataH;

    /*
     *	Allocate memory and check for failure.  If unsuccessful, free
     *	any blocks which were successfully allocated and return.
     */
    mspH = MemAlloc(sizeof (MSetParameters),
		    HF_SWAPABLE, HAF_ZERO_INIT | HAF_LOCK);
    mscpH = MemAlloc(sizeof (MSetCalcParameters),
		    HF_SWAPABLE, HAF_ZERO_INIT | HAF_LOCK);
    dataH = MemAlloc( (MSET_DEF_HEIGHT+7)/8 * sizeof (MSetDataHandle),
		     HF_SWAPABLE, HAF_ZERO_INIT);

    if ((mspH == NullHandle)  ||
	(mscpH == NullHandle) ||
	(dataH == NullHandle))
    {
	if (mspH)  MemFree(mspH);
	if (mscpH) MemFree(mscpH);
	if (dataH) MemFree(dataH);
	return NullHandle;
    }

    dataVM = VMAttach(vmfh, NullHandle, dataH);
    /*
     *	Set up the MSetCalcParameters block.  Since we passed the HAF_LOCK
     *	flag to MemAlloc, the block is already locked; therefore, we use
     *	MemDeref instead of MemLock.
     */
 {
    MSetCalcParameters*	mscpP = MemDeref(mscpH);

    mscpP->MSCP_dataMapBlock =	dataVM;
    mscpP->MSCP_pixelWidth =	MSET_DEF_WIDTH;
    mscpP->MSCP_pixelHeight = 	MSET_DEF_HEIGHT;
    mscpP->MSCP_left.FN_high =	MSET_DEF_LEFT;
    mscpP->MSCP_top.FN_high =	MSET_DEF_TOP;
    mscpP->MSCP_hRes.FN_high =	MSET_DEF_RESOLUTION;
    mscpP->MSCP_vRes.FN_high =	MSET_DEF_RESOLUTION;
    mscpP->MSCP_maxDwell =	MSET_DEF_MAX_DWELL;
/*  mscpP->MSCP_count =		## no default ## */
/*  mscpP->MSCP_vars =		## no default ## */
    /*
     *	The calculation vectors are near pointers; to fill them in, it is
     *	convenient to use an assembly routine defined in the same code
     *	segment as the routines.
     */
    MSSetupCalcVectors(mscpP, MSET_DEF_PRECISION);
    MemUnlock(mscpH);
 }

    /*
     *	Set up the MSetParameters block.  Again, just use MemDeref.
     */
 {
    MSetParameters* mspP = MemDeref(mspH);

    mspP->MSP_calcBlock =	VMAttach(vmfh, NullHandle, mscpH);
    mspP->MSP_dataMapBlock =	dataVM;
    mspP->MSP_colorScheme =	MSET_DEF_COLOR_SCHEME;
    mspP->MSP_precision =	MSET_DEF_PRECISION;
    mspP->MSP_pixelWidth =	MSET_DEF_WIDTH;
    mspP->MSP_maxDwell =	MSET_DEF_MAX_DWELL;
    mspP->MSP_pixelHeight = 	MSET_DEF_HEIGHT;
/*  mspP->MSP_threadPriority =	## no default ## */
    mspP->MSP_selectedX =	MSET_DEF_WIDTH >> 1;
    mspP->MSP_selectedY =	MSET_DEF_HEIGHT >> 1;
    mspP->MSP_lastZoom = 	0x0100;
    mspP->MSP_lastLine =	-1;
    MemUnlock(mspH);
 }
	   
    return( VMAttach(vmfh, NullHandle, mspH) );
}				/* End of MSCreateDefaultParamsBlock.	*/


/***********************************************************************
 *		MSDestroyParamsBlock
 ***********************************************************************
 * SYNOPSIS:	Properly destroys a vm block which contains an
 *		MSetParameters structure.
 * CALLED BY:	Handler for MSG_MSET_INITIALIZE
 * RETURN:	void
 * SIDE EFFECTS:
 *	Frees the passed block, and all block handles within the block.
 *
 * STRATEGY:
 *	Free MSP_calcBlock and MSP_dataMapBlock as well as the passed
 *	block.
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	10/25/93   	Initial Revision
 *
 ***********************************************************************/
static void
MSDestroyParamsBlock (VMFileHandle vmfh, VMBlockHandle mspVM)
{
    MemHandle		unused;	/* VMLock requires a MemHandle parameter */
    MSetParameters*	mspP;

    mspP = VMLock(vmfh, mspVM, &unused);
    VMFree(vmfh, mspP->MSP_calcBlock);
    VMFree(vmfh, mspP->MSP_dataMapBlock);
    VMFree(vmfh, mspVM);
}	/* End of MSDestroyParamsBlock.	*/

/***********************************************************************
 *		MSG_MSET_PAUSE_CALCULATION for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Stops the MSet thread's calculations
 * PARAMETERS:	none
 * RETURN:	none
 * SIDE EFFECTS:
 *	The calculation thread will stop calculating.  VM blocks used by the
 *	MSet object are guaranteed to be unlocked when this message _exits_.
 *	Note that this implies using @call.  No guarantees are made if this
 *	message is sent with @send.
 *	
 *	To continue calculations, send a MSG_MSET_CONTINUE_CALCULATION.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_MSET_PAUSE_CALCULATION
{
    if(!pself->MSI_initialized) {
	EC_WARNING(WARNING_MESSAGING_UNINITIALIZED_MSET);
	return;
    }

    /*
     * We send messages to the thread by constructing a
     * pseudo-optr.  The ThreadHandle goes in the high word (where the
     * MemHandle normally goes.  The low word (the ChunkHandle) will be
     * ignored by the messaging system because we're passing a handle to a
     * thread and not an object block.
     */
    @call pself->MSI_calcThread, NullChunk::MSG_MSC_PAUSE();
}	/* End of MSG_MSET_PAUSE_CALCULATION.	*/

/***********************************************************************
 *		MSG_MSET_CONTINUE_CALCULATION for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Un-pauses the calculation thread
 * PARAMETERS:	none
 * RETURN:	none
 * SIDE EFFECTS:
 *	The calculation thread will begin running again, if it isn't already.
 *	VM blocks used by the MSet and MSetCalc objects might become locked.
 *
 * STRATEGY:
 *	Just send a MSG_MSC_CALCULATE.  If the MSetCalc object is currently
 *	calculating, it will stop and then start up again.
 *
 * BUGS/NOTES:
 *	Might want to add a MSP_calculating field so we don't bother sending
 *	the MSG_MSC_CALCULATE message if the thread is already running;
 *	sending it would be redundant, and would just slow the thread down
 *	for a bit.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_MSET_CONTINUE_CALCULATION
{
    MemHandle		mspH;
    MSetParameters*	mspP;

    if(!pself->MSI_initialized) {
	EC_WARNING(WARNING_MESSAGING_UNINITIALIZED_MSET);
	return;
    }

    mspP = VMLock(pself->MSI_vmFile,
		  pself->MSI_msetVMBlock,
		  &mspH);

    @send pself->MSI_calcThread, NullChunk::
	MSG_MSC_CALCULATE(oself,
			  pself->MSI_vmFile,
			  mspP->MSP_calcBlock);

    VMUnlock(mspH);
}	/* End of MSG_MSET_CONTINUE_CALCULATION.	*/

/***********************************************************************
 *		MSG_MSET_RESET_CALCULATION for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Causes the calculation to start over from scratch
 * PARAMETERS:	none
 * RETURN:	none
 * SIDE EFFECTS:
 *	Pauses the calculation thread, frees all the old data blocks.
 *	Clear our message queue of any messages the MSetCalc object might
 *	have sent us.
 *	
 * STRATEGY:
 *	Send ourselves a MSG_MSET_NEW_LINE, passing -1.  This has the useful
 *	effect of wiping out any previous _NEW_LINE that may have been
 *	sent by the calculation thread before it was halted.  The handler
 *	for _NEW_LINE will do nothing if -1 is passed.
 *	
 *	Note that to do this, we must make the assumption that at most one
 *	_NEW_LINE message may be in the queue at a time.  This is no
 *	problem because everywhere it is sent, the forceQueue and
 *	checkDuplicate flags are used.
 *	
 *	We also reset lastLine "by hand" to -1 instead of relying on the
 *	_NEW_LINE we just sent, since the message could easily be replaced
 *	by a _NEW_LINE from the newly restarted calculation thread.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_MSET_RESET_CALCULATION
{
    VMBlockHandle	dataVM;
    word		numBlocks;

    if(!pself->MSI_initialized) {
	EC_WARNING(WARNING_MESSAGING_UNINITIALIZED_MSET);
	return;
    }

    /*
     *	We don't want the calc thread running while we muck with its data
     */
    @call pself->MSI_calcThread, NullChunk::MSG_MSC_PAUSE();


    /*
     *	Reset lastLine; extract the handle for the data map block
     */
  {
      MemHandle		mspH;
      MSetParameters*	mspP;

      mspP = VMLock(pself->MSI_vmFile,
		    pself->MSI_msetVMBlock,
		    &mspH);

      dataVM =	mspP->MSP_dataMapBlock;
      numBlocks = (mspP->MSP_pixelHeight+7) / 8; /* 8 lines per block */
      mspP->MSP_lastLine = -1;	/* So the next redraw starts from the top */

      VMDirty(mspH);
      VMUnlock(mspH);
  }

    /*
     *	Free all the data blocks; new ones will be allocated by the calc
     *	thread as needed, when it starts up again.
     */
  {
      MemHandle		dataH;
      MSetDataHandle*	dataP;
      int	i;

      dataP = VMLock(pself->MSI_vmFile,
		     dataVM,
		     &dataH);
      for(i=0; i < numBlocks; i++)
      {
	  if (dataP[i].MSDH_blockHandle != NullHandle)
	  {
	      VMFree(pself->MSI_vmFile, dataP[i].MSDH_blockHandle);
	      dataP[i].MSDH_blockHandle = NullHandle;
	  }
      }
	
      VMUnlock(dataH);
  }

    /*
     *	Send MSG_MSET_NEW_LINE in case an old _NEW_LINE is sitting in our
     *	event queue.  If it gets through without being replaced by a
     *	subsequent NEW_LINE, the -1 will cause the message handler to just
     *	ignore the message.  By design, only one MSG_MSET_NEW_LINE at a time
     *	can be sitting in the queue; this technique wouldn't work otherwise.
     */
    @send, forceQueue, checkDuplicate, replace
	self::MSG_MSET_NEW_LINE(-1);

    @send self::MSG_VIS_INVALIDATE();
}	/* End of MSG_MSET_RESET_CALCULATION.	*/

/***********************************************************************
 *		MSG_MSET_STOP_CALCULATION for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Kills the calculation thread.
 *		Note that after this, many messages will do nothing:
 *		_PAUSE_CALCULATION, _CONTINUE_CALCULATION, _NEW_LINE, etc.
 *
 *		The vm file will not be accessed after this method finishes;
 *		be sure to use @call if you need this functionality.
 *
 * PARAMETERS:	none
 * RETURN:	none
 * SIDE EFFECTS:
 *	Kills the calculating thread.
 *	Sets the object to its un-initialized state.
 *	nulls out the other MSet instance data.
 *
 * STRATEGY:
 *	Un-initialize the MSet object.
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/

@method MSetClass, MSG_MSET_STOP_CALCULATION
{
    if(!pself->MSI_initialized) {
	EC_WARNING(WARNING_MESSAGING_UNINITIALIZED_MSET);
	return;
    }

    /*
     * Send a pause, just so we at least know that the thread will not
     * have any VM blocks locked when this message returns.
     */
    @call pself->MSI_calcThread, NullChunk::MSG_MSC_PAUSE();
    @send pself->MSI_calcThread, NullChunk::
	MSG_META_DETACH(0, NullOptr);

    pself->MSI_initialized = FALSE;
    pself->MSI_calcThread = NullHandle;
    pself->MSI_vmFile = NullHandle;
    pself->MSI_msetVMBlock = NullHandle;

}	/* End of MSG_MSET_STOP_CALCULATION.	*/

/***********************************************************************
 *		MSG_MSET_NO_CALC_MEMORY for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Notification that calc thread has run out of memory
 * PARAMETERS:	none
 * RETURN:	none
 * SIDE EFFECTS:
 *	Does nothing -- apps should subclass this message if they want
 *	notification of the thread's pausing.
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	9/ 7/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_MSET_NO_CALC_MEMORY
{
}	/* End of MSG_MSET_NO_CALC_MEMORY.	*/

/***********************************************************************
 *		MSG_META_DETACH for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Causes the thread to destroy itself.
 *	
 *	We subclass MSG_META_DETACH because the calculation thread is
 *	treated as another of the MSet object's resources, which must be
 *	detached/freed (ie, destroyed) before the MSet itself is detached
 *	from the system.  The VM File is owned by either the MSet object or
 *	one of its parents; in either case, the MSet must ensure that the
 *	thread does not try to access the VM File after the file has been
 *	closed.
 *	
 * PARAMETERS:	word	callerID,
 *		optr	caller
 * RETURN:	void
 * SIDE EFFECTS:
 *	Causes thread to die.
 * STRATEGY:
 *	Initialize the detach mechanism
 *	Call ObjIncDetach once, because we're only sending out one
 *		MSG_META_DETACH
 *	"Send" a detach to the thread
 *	Allow superclass to do its own detaching
 *	call ObjEnableDetach
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/16/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_META_DETACH
{
    ObjInitDetach(MSG_META_DETACH, oself, callerID, caller);

    if (pself->MSI_initialized) {
	ObjIncDetach(oself);
	@send pself->MSI_calcThread, NullChunk::
	    MSG_META_DETACH(0, oself);
    }

    @callsuper();

    ObjEnableDetach(oself);
}	/* End of MSG_META_DETACH.	*/

/***********************************************************************
 *		MSG_META_DETACH_COMPLETE for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Useful for putting in debugging code, but otherwise does
 *		nothing.
 * PARAMETERS:	
 * RETURN:
 * SIDE EFFECTS:
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/18/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetClass, MSG_META_DETACH_COMPLETE
{
    @callsuper();
}	/* End of MSG_META_DETACH_COMPLETE.	*/
