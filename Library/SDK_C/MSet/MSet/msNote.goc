/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		msNote.goc

AUTHOR:		Paul DuBois, Aug 27, 1993

ROUTINES:
	Name			Description
	----			-----------
MSG_MSET_CONTROLLER_SET_COLOR_SCHEME
				Sends a _SET_COLOR_SCHEME to the MSet

MSG_MSET_LOAD_PARAM_BLOCK
MSetClass			Copy the MSet object's info into a passed
				MSetParams block.

MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE
MSetClass			send notifcation to the controllers
				with the current MSetParameters

MSG_MSET_SEND_NULL_STATUS_NOTIFICATION
MSetClass			send NULL status notification to the GCN list

MSG_META_GAINED_TARGET_EXCL
                                intercepted to send notification 
				to the controllers

MSG_META_LOST_TARGET_EXCL
                                intercepted to send a NULL status 
				to the controllers

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	8/27/93   	Initial version.

DESCRIPTION:
	This file contains the controller support routines for the MSet
	object -- mostly notification messages sent to or from a controller
	object.

	$Id: msNote.goc,v 1.1 97/04/07 10:43:45 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>
#include <SDK_C/SDK.h>			/* SDK application local notification lists */
@include <Objects/SDK_C/msetC.goh>	/* MSet class definition */
@include <Objects/SDK_C/msColCC.goh>	/* color control */
#include <string.h>
#include "msFatErr.h"			/* Fatal errors */



/***********************************************************************
 *		MSG_MSET_CONTROLLER_SET_COLOR_SCHEME for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Sends the MSet a _SET_COLOR_SCHEME, checkDuplicate, replace
 * PARAMETERS:	MSetColor	newColor
 * RETURN:	void
 * SIDE EFFECTS:
 *	Sends a message to the MSet
 * STRATEGY:
 *	This message is only sent by the MSetColorControlClass.  The
 *	controller is sending a recorded message, so it cannot set any
 *	of the various flags.  However, we only really want one of these
 *	messages in our queue at once, since the user can change color
 *	schemes faster than we can redraw.  So, we define this intermediary
 *	message to send the real message.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	9/14/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_CONTROLLER_SET_COLOR_SCHEME
{
    @send, forceQueue, checkDuplicate, replace self::
	MSG_MSET_SET_COLOR_SCHEME(newColor);
}	/* End of MSG_MSET_CONTROLLER_SET_COLOR_SCHEME.	*/

/***********************************************************************
 *		MSG_META_GAINED_TARGET_EXCL for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    intercepted to send notification to controllers
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    
 *
 * DESCRIPTION:	Received when the mset object gets the target.  
 * 		Here, we send notification to the various controllers
 * 		that need to be updated.
 *
 * STRATEGY:
 *  The strategy is to send a MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE
 *  message to our self which will take care of notifying the controllers.
 *  
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/10/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_META_GAINED_TARGET_EXCL
{
    /* First, call the superclass to preserve all default
     * functionality of the method.  Then dereference the
     * pself pointer to the object's instance data. */
    @callsuper();
    pself = ObjDerefVis( oself );

    @call self::MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE(); 

}	/* End of MSG_META_GAINED_TARGET_EXCL.	*/



/***********************************************************************
 *		MSG_META_LOST_TARGET_EXCL for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    intercepted to send a NULL status to the GCN list
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    
 *
 * STRATEGY:    
 *  This message is received when the mset object loses the target. 
 * 
 *  It can mean two things when we receive this message:
 * 
 *  1) that the user has just unselected a mset object and is not 
 *     going to select a new one right away, in which case we want
 *     to send a null status notification to the controllers because 
 *     there is no current target.
 *     
 *  2) or that the user is switching between mset objects,
 *     in which case
 *     We want to avoid a lull in status when transitioning between two 
 *     different mset objects. Since the GCNList we are using for the MSet 
 *     controllers is run by the application we can do this by using the 
 *     GCNListSendFlag GCNLSF_IGNORE_IF_STATUS_TRANSITIONING. This will 
 *     cause the GenApplication to delay the notification until after the 
 *     UI & app queues have been cleared, & then only set the status as 
 *     indicated if no other status has been set since the first request.
 *              
 *  So, the strategy is to send a MSG_MSET_SEND_NULL_STATUS_NOTIFICATION
 *  message to our self which will take care of sending the null 
 *  notification with the GCNLSF_IGNORE_IF_STATUS_TRANSITIONING flag.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/10/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_META_LOST_TARGET_EXCL
{
    /* First, call the superclass to preserve all default
     * functionality of the method.  Then dereference the
     * pself pointer to the object's instance data. */
    @callsuper();
    pself = ObjDerefVis( oself );

    @call self::MSG_MSET_SEND_NULL_STATUS_NOTIFICATION();

}	/* End of MSG_META_LOST_TARGET_EXCL.	*/



/***********************************************************************
 *		MSG_MSET_LOAD_PARAM_BLOCK for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Copy the MSet object's info into a passed MSetParams block 
 * PARAMETERS:	MSetParameters *infoPtr
 * RETURN:	void
 * SIDE EFFECTS:none
 *
 * STRATEGY:	just copy the data from the local msetParameters block stored
 *              in the VM file to the passed msetParameters block pointer
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/11/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_LOAD_PARAM_BLOCK
{
    MSetParameters*	sourceParamsPtr;
    MemHandle		sourceMem;	/* Memory handle of the local info block */

    if (pself->MSI_initialized == FALSE)
    {
	memset(infoPtr, 0, sizeof(MSetParameters));
    }
    else
    {

	/* 
	 * Lock down the VM Block containing the local MSetParameters struct
	 */
	sourceParamsPtr = VMLock(pself->MSI_vmFile, 
				 pself->MSI_msetVMBlock,
				 &sourceMem);
	/*
	 * Copy the info 
	 */
	memcpy(infoPtr,
	       sourceParamsPtr, 
	       sizeof(MSetParameters));

	/* 
	 * Unlock the local info block
	 */
	VMUnlock(sourceMem);
    }

}	/* End of MSG_MSET_LOAD_PARAM_BLOCK.	*/



/***********************************************************************
 *	MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE for MSetClass
 ***********************************************************************
 * SYNOPSIS:	    send notification and data block to the GCN list
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    some memory is allocated
 *
 * STRATEGY: Allocate a data block to be sent with the notification 
 *           message.  Have the MSet object fill in the data block.
 *           Encapsulate the MSG_META_NOTIFY_WITH_DATA_BLOCK message
 *           and send it off to the GCN list.
 *
 * BUGS:	FatalErrors when out of memory.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/10/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE
{
    MemHandle paramDataBlock;
    MSetParameters *paramDataPtr;
    EventHandle event;

    /*
     * Allocate and lock down a block for the data structure. This 
     * will be passed along with the notification. 
     * NOTE: data blocks must be sharable 
     */
    paramDataBlock = MemAlloc(sizeof(MSetParameters), 
			     (HF_SWAPABLE | HF_SHARABLE), 
			     (HAF_NO_ERR | HAF_STANDARD | HAF_ZERO_INIT));

    paramDataPtr = MemLock(paramDataBlock);
	
    /*
     * call the MSet object to fill in the param data block
     */
    @call self::MSG_MSET_LOAD_PARAM_BLOCK(paramDataPtr);

    /*
     * Unlock the memory block and set its reference count.
     * The reference count is set by calling MemInitRefCount() with
     * the data block and the total number of lists (not objects) 
     * we are sending the notification to. In this case we set the
     * reference count to 1 since we are only sending the notification
     * to one list.
     */
    MemUnlock(paramDataBlock);
    MemInitRefCount(paramDataBlock, (word) 1);
    
    /*
     * Now encapsulate a MSG_META_NOTIFY_WITH_DATA_BLOCK message.
     * Since it is being recorded for no particular class, use
     * NullClass as its class type.
     */
    event = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
            MANUFACTURER_ID_SDK,     /* Manufacturer's ID */
            SDK_NT_MSET_ATTR_CHANGE, /* Manufacturer's list type*/
	    paramDataBlock);	     /* Handle of data block */

    /*
     * Finally, send the message off to the notification list. 
     *
     * NOTE: Need to use MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST
     *       instead of sending a MSG_META_GCN_LIST_SEND directly
     *       to the application object to ensure orderly updating 
     *       of the list status events. 
     *       An example failure case which is fixed is two target 
     *       text objects, one run by the process thread in a view, 
     *       the other a GenText run by the ui thread.  If the GenText
     *       has the target, & the user clicks quickly on view 
     *       then GenText, the GenText may process both LOST & GAINED
     *       messages before the process text object gets the GAINED 
     *       & LOST pair.  If both objects were to send 
     *       MSG_META_GCN_LIST_SEND directly to the GenApplication 
     *       object, the GenText's status would be wiped out by the
     *       subsequent reporting by the process text object.  This 
     *       problem is avoided by having both process & UI objects 
     *       call here to pass status update info. This works because 
     *       target changes start out ordered in the UI thread, & that
     *       order is passed on to the process thread in either of the 
     *       two cases. (from docs on the message)
     * Note: Make sure to use a send instead of a call because we are
     *       crossing thread boundaries.
     */
    @send process::MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST(
	        (word) GCNLSF_SET_STATUS,
                /* GCNListSendFlags 
		 * The flag GCNLSF_SET_STATUS will cause the GCNList
		 * system to additionally save the message as the list's 
		 * current "status".  The "status" message is 
		 * automatically sent to any object adding itself to 
		 * the list at a later point in time.
		 */
		(EventHandle) event,      /* Handle to classed event */
                (MemHandle) paramDataBlock,
                                          /* Handle of extra data block */
		(word) SDK_GAGCNLT_APP_TARGET_NOTIFY_MSET_ATTR_CHANGE,
                                          /* Manufacturer's list type */
                (word) MANUFACTURER_ID_SDK);
                                          /* Manufacturer's ID */

    /*
     * The paramDataBlock will be MemFree()'d automatically
     * by the General Change Notification System. The notification
     * handlers each call MemDecRefCount() and the data block is
     * freed when the reference count reaches 0.
     */

}	/* End of MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE.  */



/***********************************************************************
 *	MSG_MSET_SEND_NULL_STATUS_NOTIFICATION for MSetClass
 ***********************************************************************
 * SYNOPSIS:	    send NULL status notification to the GCN list
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    
 *
 * DESCRIPTION:     
 *   This message is sent by an MSet object when it loses the target.
 *
 * STRATEGY:
 *   Encalsulate a MSG_META_NOTIFY_WITH_DATA_BLOCK with a NULL data block.
 *   Send it off to the GCN list with the GCNListSendFlags  
 *   GCNLSF_SET_STATUS and GCNLSF_IGNORE_IF_STATUS_TRANSITIONING.
 * 
 *   We use the GCNLSF_IGNORE_IF_STATUS_TRANSITIONING flag to avoid a 
 *   lull in status when transitioning between two different documents. 
 *   This flag will cause the GenApplication to delay the notification 
 *   until after the UI & app queues have been cleared, & then only set
 *   the NULL status as indicated if no other status has been set since 
 *   the first request.
 * 
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/23/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_SEND_NULL_STATUS_NOTIFICATION
{
    EventHandle event;

    /*
     * Encapsulate a MSG_META_NOTIFY_WITH_DATA_BLOCK message.
     * Since this is a NULL status, use a NULL data block handle.
     * Since it is being recorded for no particular class, use
     * NullClass as its class type.
     */
    event = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
            MANUFACTURER_ID_SDK,     /* Manufacturer's ID */
            SDK_NT_MSET_ATTR_CHANGE, /* Manufacturer's list type*/
	    0);	                     /* Handle of NULL data block */

    /*
     * Send the message off to the notification list. 
     *
     * NOTE: Need to use MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST
     *       instead of sending a MSG_META_GCN_LIST_SEND directly
     *       to the application object to ensure orderly updating 
     *       of the list status events. 
     *       An example failure case which is fixed is two target 
     *       text objects, one run by the process thread in a view, 
     *       the other a GenText run by the ui thread.  If the GenText
     *       has the target, & the user clicks quickly on view 
     *       then GenText, the GenText may process both LOST & GAINED
     *       messages before the process text object gets the GAINED 
     *       & LOST pair.  If both objects were to send 
     *       MSG_META_GCN_LIST_SEND directly to the GenApplication 
     *       object, the GenText's status would be wiped out by the
     *       subsequent reporting by the process text object.  This 
     *       problem is avoided by having both process & UI objects 
     *       call here to pass status update info. This works because 
     *       target changes start out ordered in the UI thread, & that
     *       order is passed on to the process thread in either of the 
     *       two cases. (from docs on the message)
     * Note: Make sure to use a send instead of a call because we are
     *       crossing thread boundaries.
     */
    @send process::MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST(
	        (word) (GCNLSF_SET_STATUS | 
			GCNLSF_IGNORE_IF_STATUS_TRANSITIONING),
                /* GCNListSendFlags 
		 * The flag GCNLSF_SET_STATUS will cause the GCNList
		 * system to additionally save the message as the list's 
		 * current "status".  The "status" message is 
		 * automatically sent to any object adding itself to 
		 * the list at a later point in time.
		 * 
		 * The flag GCNLSF_IGNORE_IF_STATUS_TRANSITIONING is 
		 * used to avoid a lull in status when transitioning 
		 * between two different documents. This flag will cause 
		 * the GenApplication to delay the notification until 
		 * after the UI & app queues have been cleared, & then 
		 * only set the NULL status as indicated if no other 
		 * status has been set since the first request.
		 */
		(EventHandle) event,      /* Handle to classed event */
                (MemHandle) 0,
                                        /* Handle of NULL data block */
		(word) SDK_GAGCNLT_APP_TARGET_NOTIFY_MSET_ATTR_CHANGE,
                                          /* Manufacturer's list type */
                (word) MANUFACTURER_ID_SDK);
                                          /* Manufacturer's ID */

}	/* End of MSG_MSET_SEND_NULL_STATUS_NOTIFICATION.  */
