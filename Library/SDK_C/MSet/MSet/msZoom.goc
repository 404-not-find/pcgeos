/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		msZoom.goc

AUTHOR:		Paul DuBois, Sep 13, 1993

ROUTINES:
	Name			Description
	----			-----------
MSG_META_START_SELECT		Where to zoom; handling double-clicks.
MSG_MSET_ZOOM			Code to implement zooming.
FixNumAddMultByInt (INTERNAL)	Utility procedure -- FN1 += FN2 * INT

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	9/13/93   	Initial version.

DESCRIPTION:
	Code to handle zooming in and out of the MSet.

	$Id: msZoom.goc,v 1.1 97/04/07 10:43:47 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>

@include <SDK_C/mset.goh>		/* Exported enums, structs */
@include <Objects/SDK_C/msetC.goh>
#include "msFatErr.h"

static void
FixNumAddMultByInt (FixNum* destP, FixNum* srcP, sword factor);

/***********************************************************************
 *		MSG_META_START_SELECT for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Sets the "selected point" to the mouse coordinates.
 *		If double-click, then zoom in.
 * PARAMETERS:	MouseReturnParams*	retVal,
 *		sword			xPosition,
 *		sword			yPosition,
 *		word			inputState
 * RETURN:
 *	Modify retVal->flags to indicate that we've processed the mouse
 *	event.
 *
 * SIDE EFFECTS:
 *	If a single-click, then just sets the "selected point".  If
 *	double-click, then sets the point and zooms on it, using the last
 *	value passed to MSG_MSET_ZOOM.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	9/14/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_META_START_SELECT
{
    MSetParameters*	mspP;
    MemHandle		mspH;
    
    @call self::MSG_MSET_SET_SELECT_XY(xPosition, yPosition);

    /*
     *	The lower byte of inputState contains ButtinInfo flags.
     */
    if (inputState & BI_DOUBLE_PRESS) {
	mspP = VMLock(pself->MSI_vmFile,
		      pself->MSI_msetVMBlock,
		      &mspH);
	@call self::MSG_MSET_ZOOM(mspP->MSP_lastZoom);
	VMUnlock(mspH);
    }
	
    /*
     *	Signal that we've handled this button event
     */
    retVal->flags = MRF_PROCESSED;
}	/* End of MSG_META_START_SELECT.	*/

/***********************************************************************
 *		MSG_MSET_ZOOM for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Zooms in on the "Selected point"
 *
 * PARAMETERS:	BBFixedAsWord	zoomVal		(integer portion < 16)
 * RETURN:	void
 * SIDE EFFECTS:
 *	Causes the Calc thread to restart from scratch.
 *	Can modify:
 *		MSCP_left, MSCP_top
 *		MSCP_hRes, MSCP_vRes
 *
 * STRATEGY:
 *	In short, re-centers the MSet on the selected point, and scales hRes
 *	and vRes by zoomVal.  Note that passing zoomVal > 1.0 causes zoom-out
 *	and passing zoomVal < 1.0 causes zoom-in, by the definition of hRes
 *	and vRes.
 *	
 *	Convert the "selected point" from pixel coordinates to coordinates
 *	on the complex plane.  Move the top-left corner of the mset to those
 *	coordinates.  Modify the resolution according to the passed zoomVal,
 *	and then move the top-left corner up and left to where it should be.
 *	
 *	Converting a BBFixed to a FixNum involves shifting it left 4 bits;
 *	FixNums have 4 bits of integer, WWFixeds have 8.  We store the
 *	converted zoomVal in the calc thread's scratch space, because the
 *	FixNum math routines want all the operands in the same segment.
 *	This is all right, because the thread is being restarted anyway.
 *	
 *	These are the calculations involved.  Note that normally hRes == vRes.
 *	Also, note that screen coordinates increase as you move down;
 *	but "normal" coordinates _decrease_ as you move down.
 *	
 *	MSCP_left	+=	MSCP_hRes * xPixel
 *	MSCP_top	-=	MSCP_hRes * yPixel
 *	
 *	MSCP_hRes,vRes	*=	zoomVal
 *	
 *	MSCP_left	-=	hRes * pixelWidth/2
 *	MSCP_top	+=	vRes * pixelHeight/2
 *
 * BUGS/IDEAS:
 *	Right now, all the calculated points are thrown away.  However,
 *	many of these points may be re-cycled.  This is especially true when
 *	using integral (or inverse integral) zoomVals.
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	9/ 9/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_ZOOM
{
    MSetParameters*	mspP;
    MSetCalcParameters*	mscpP;
    MemHandle		mspH, mscpH;
    FixNum		*zoomValFN;
    sword		xPixel, yPixel;
    SizeAsDWord		size;

    /*
     *	Pause calc thread, clear out its data blocks.
     */
    @call oself::MSG_MSET_RESET_CALCULATION();
    pself = ObjDerefVis(oself);
    mspP = VMLock(pself->MSI_vmFile,
		  pself->MSI_msetVMBlock,
		  &mspH);

    mscpP = VMLock(pself->MSI_vmFile,
		   mspP->MSP_calcBlock,
		   &mscpH);

    xPixel = mspP->MSP_selectedX;
    yPixel = mspP->MSP_selectedY;

    /*
     *	Check for xPixel or yPixel out of bounds
     *	If they are, just put them in the center.
     */
    size = @call self::MSG_VIS_GET_SIZE();
    if (xPixel > DWORD_WIDTH(size)	||
	yPixel > DWORD_HEIGHT(size))
    {
	EC_WARNING( WARNING_POINT_OUT_OF_BOUNDS );
	xPixel = DWORD_WIDTH(size) / 2;
	yPixel = DWORD_HEIGHT(size) / 2;
    }

    /*
     *	Getting a zoomVal of 0 will wreck hRes and vRes -- once they are
     *	zero, zooming in and/or out won't change them a bit.
     *	This is also a convenient place to store zoomVal.
     */
    if (zoomVal == 0) zoomVal=(word)(1*256);
    mspP->MSP_lastZoom = zoomVal;
	
    zoomVal <<= 4;
    zoomValFN = &(mscpP->MSCP_vars.MN_A.MSN_48bit);
    zoomValFN->FN_high = zoomVal;
    zoomValFN->FN_middle = 0;
    zoomValFN->FN_low = 0;


    /*
     *	Start the calculations here
     */
    FixNumAddMultByInt(&(mscpP->MSCP_left), &(mscpP->MSCP_hRes), xPixel);
    FixNumAddMultByInt(&(mscpP->MSCP_top),  &(mscpP->MSCP_vRes), -yPixel);
    FixNumUMult(&(mscpP->MSCP_hRes), &(mscpP->MSCP_hRes), zoomValFN);
    FixNumUMult(&(mscpP->MSCP_vRes), &(mscpP->MSCP_vRes), zoomValFN);
    FixNumAddMultByInt(&(mscpP->MSCP_left),
		       &(mscpP->MSCP_hRes),
		       -(mscpP->MSCP_pixelWidth/2));
    FixNumAddMultByInt(&(mscpP->MSCP_top),
		       &(mscpP->MSCP_vRes),
		       (mscpP->MSCP_pixelHeight/2));


    /*
     *	Finally, change the selected point so that repeated zooms will zoom
     *	in on the same area.
     */
    mspP->MSP_selectedX = mspP->MSP_pixelWidth /2;
    mspP->MSP_selectedY = mspP->MSP_pixelHeight /2;

    VMDirty(mscpH);
    VMUnlock(mscpH);

    VMDirty(mspH);
    VMUnlock(mspH);
    
    /*
     *	Start calculating again!
     */
    @call oself::MSG_MSET_CONTINUE_CALCULATION();
    @call oself::MSG_MSET_SEND_NOTIFICATION_OF_PARAM_CHANGE();
}	/* End of MSG_MSET_ZOOM.	*/

/***********************************************************************
 *		FixNumMultByInt
 ***********************************************************************
 * SYNOPSIS:	 Mutiply a FixNum by an int in a stupid and slow way
 *	         srcP and destP must NOT point to the same number!
 * CALLED BY:	 MSG_MSET_ZOOM
 * RETURN:	 void
 * SIDE EFFECTS:
 *	dest += src * factor
 *
 * STRATEGY:
 *	FixNums have only 4 bits of integer.  So, if we want to multiply
 *	by more than 7 (or 15, unsigned), we have to either be tricky or
 *	slow.  Writing code for the slow version is very simple, and this
 *	function isn't called very often, so we'll do it that way.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	9/14/93   	Initial Revision
 *
 ***********************************************************************/
static void
FixNumAddMultByInt (FixNum* destP, FixNum* srcP, sword factor)
{
    sword i;

    if (factor > 0)
    {
	for (i=0; i<factor; i++)
	    FixNumAdd(destP, destP, srcP);
    }
    else if (factor < 0)
    {
	for (i=0; i>factor; i--)
	    FixNumSub(destP, destP, srcP);
    }
}	/* End of FixNumMultByInt.	*/
