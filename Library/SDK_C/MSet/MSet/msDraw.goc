/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		msDraw.goc

AUTHOR:		Paul DuBois, Aug 27, 1993

ROUTINES:
	Name			Description
	----			-----------
MSG_MSET_NEW_LINE	Updates the screen image of the MSet with
			newly-calculated points.

MSG_VIS_DRAW		Draws the MSet

MSG_MSET_DRAW		Code common to MSG_MSET_NEW_LINE and MSG_VIS_DRAW

MSetDrawLine		Draws one line of the MSet

SetLineColor		Maps from dwell values to colors.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	8/27/93   	Initial version.

DESCRIPTION:
	This file contains the drawing code for the MSet object

	$Id: msDraw.goc,v 1.1 97/04/07 10:43:42 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>
@include <Objects/SDK_C/msetC.goh>	/* MSetClass definition */

@include <SDK_C/mset.goh>		/* Exported enums, structs */
#include "msConst.h"			/* Constants and such */
#include "msFatErr.h"			/* Fatal errors */

/***********************************************************************
 *		Function Prototypes (internal)
 ***********************************************************************/
void	SetLineColor (GStateHandle	gstate,
		      MSetColor		colorScheme,
		      word		dwell,
		      word		maxDwell);

void	MSetDrawLine (GStateHandle	gstate,
		      MSetColor		colorScheme,
		      word*		dataPtr,
		      word		width,
		      word		maxDwell);


/***********************************************************************
 *		MSG_MSET_NEW_LINE for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Draws the newly-calculated section of the MSet
 * PARAMETERS:	sword	newLine
 * RETURN:	void
 * SIDE EFFECTS:
 *	Updates the drawable area of the MSet.
 *
 * STRATEGY:
 *	The MSetCalc object sends this message with the checkDuplicate and
 *	replace flags.  Therefore, we're not guaranteed of a 1:1
 *	correspondence between new lines and MSG_MSET_NEW_LINE messages.
 *	However, newLine should always be increasing.
 *	
 *	We keep around the last value of newLine that we received; when we
 *	get this message, we draw from the last value of newLine+1 to the
 *	most recently passed value.
 *
 * NOTES:
 *	MSG_MSET_RESET_CALCULATION assumes that there will be at most one
 *	MSG_MSET_NEW_LINE in the event queue.  Therefore, this message
 *	should only be sent with the `forceQueue' and `checkDuplicate'
 *	flags.  Most of the time, you will also want to use the `replace'
 *	flag as well.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_NEW_LINE
{
    MemHandle		mspH;
    MSetParameters*	mspP;
    GStateHandle	gstate;
    sword		oldLastLine;

    /*
     *	We don't want to respond to this message if we have been shut down
     *	already -- the vm file and vm block will be invalid.  This situation
     *	occurs when a MSG_MSET_NEW_LINE finds its way into the event queue
     *	behind a MSG_MSET_STOP_CALCULATION.
     */
    if(!pself->MSI_initialized)
    {
	EC_WARNING(WARNING_MESSAGING_UNINITIALIZED_MSET);
	return;
    }

    mspP = VMLock(pself->MSI_vmFile,
		  pself->MSI_msetVMBlock,
		  &mspH);

    oldLastLine = mspP->MSP_lastLine;
    mspP->MSP_lastLine = (sword)newLine;
    VMDirty(mspH);
    VMUnlock(mspH);

    if (newLine != -1)
    {
	gstate = @call self::MSG_VIS_VUP_CREATE_GSTATE();
	@call self::MSG_MSET_DRAW(gstate, oldLastLine, newLine);
	GrDestroyState(gstate);
    }

}	/* End of MSG_MSET_NEW_LINE.	*/

/***********************************************************************
 *		MSG_VIS_DRAW for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Draws the MSet
 * PARAMETERS:	DrawFlags	drawFlags
 *		GStateHandle	gstate
 * RETURN:	void
 * SIDE EFFECTS:
 *	Locks some VM blocks temporarily.
 *
 * STRATEGY:
 *	Use MSG_MSET_DRAW to do all the dirty work.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/12/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_VIS_DRAW
{
    MemHandle		mspH;
    MSetParameters*	mspP;
    sword		lastLine;

    mspP = VMLock(pself->MSI_vmFile,
		  pself->MSI_msetVMBlock,
		  &mspH);
    lastLine = mspP->MSP_lastLine;
    VMUnlock(mspH);

    if (lastLine >= 0)
	@call self::MSG_MSET_DRAW(gstate, -1, lastLine);

}	/* End of MSG_VIS_DRAW.	*/

/***********************************************************************
 *		MSG_MSET_DRAW for MSetClass
 ***********************************************************************
 * SYNOPSIS:	Code common to MSG_MSET_NEW_LINE and MSG_VIS_DRAW
 * PARAMETERS:	GStateHandle	gstate,
 *		word		lowLine,
 *		word		highLine
 * RETURN:	void
 * SIDE EFFECTS:
 *	Draws all lines > lowLine and <= highLine.
 *
 * STRATEGY:
 *	Draw a black background.
 *	We actually draw by blocks instead of by lines, but since the
 *	background is black, it's not noticable.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/27/93   	Initial Revision
 *
 ***********************************************************************/
@extern method MSetClass, MSG_MSET_DRAW
{
    VMBlockHandle	dataVM;		/* VM handle to array of VM blocks */
    MemHandle		dataH;		/* handle to array of VM blocks */
    MSetDataHandle*	dataP;		/* pointer to array of VM blocks */

    MemHandle		dBlockH;	/* handle to a data block */
    word*		dBlockP = 0;	/* pointer to a data block */

    MSetColor		colorScheme;
    Rectangle		bounds;
    word		width, maxDwell;
    int		i;
    

    /*
     *	Don't keep msetVMBlock locked for long!
     */
{
    MemHandle		mspH;
    MSetParameters*	mspP;

    mspP = VMLock(pself->MSI_vmFile, pself->MSI_msetVMBlock, &mspH);

    maxDwell =		mspP->MSP_maxDwell;
    width =		mspP->MSP_pixelWidth;
    colorScheme =	mspP->MSP_colorScheme;
    dataVM =		mspP->MSP_dataMapBlock;

    VMUnlock(mspH);
}

    lowLine += 1;		/* Simplify later code -- draw all lines */
				/* between lowLine and highLine inclusive */

/*
 *  Set up for loop -- move cursor to top-left corner of the MSet.  Set up
 *  dataHandles, which we will treat as an array of MSetDataHandles.
 */
    @call self::MSG_VIS_GET_BOUNDS(&bounds);
    pself = ObjDerefVis(oself);

    GrMoveTo(gstate, bounds.R_left, bounds.R_top+lowLine);
    GrSetLineColorMap(gstate, CMM_ON_BLACK | CMT_DITHER);

/*
 *  This is the main line-drawing loop.  Note, each block holds 8 lines.
 *  dBlockP == null when a data block needs to be locked down.
 */
    dataP = VMLock(pself->MSI_vmFile, dataVM, &dataH);
    for (i = lowLine; i <= highLine; i++)
    {
	word block = i/8;	/* index to block containing current line */
	word offset = i%8;	/* index of current line within the block */

	/*
	 * Lock down a new block, if necessary
	 */
	if (dBlockP == NULL) {
	    EC_ERROR_IF((dataP[block].MSDH_blockHandle == NullHandle),
			ERROR_MSET_DRAW_DRAWING_NULL_BLOCK_HANDLE);

	    dBlockP = (word*) VMLock(pself->MSI_vmFile,
				     dataP[block].MSDH_blockHandle,
				     &dBlockH);
	    dBlockP += width*offset;	/* Point to the right line */
	}

	MSetDrawLine(gstate, colorScheme, dBlockP, width, maxDwell);

	GrRelMoveTo(gstate, 0, MakeWWFixed(1));

	if ( offset == 7 ) {	/* No more data in block */
	    VMUnlock(dBlockH);
	    dBlockP = NULL;	/* Signal the need to lock another block */
	} else {
	    dBlockP += width;	/* Point to the next line */
	}
    }
    if (dBlockP != NULL) {	/* Data block might still be locked */
	VMUnlock(dBlockH);
    }
    VMUnlock(dataH);
}	/* End of MSG_MSET_DRAW.	*/

/***********************************************************************
 *				MSetDrawLine
 ***********************************************************************
 * SYNOPSIS:	Draws one line of the MSet at the current cursor position.
 * CALLED BY:	MSet's MSG_VIS_DRAW
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	Draws a line on the screen.
 *	The cursor position is not changed, but the color may be.
 *	
 * STRATEGY:
 *	lineOffset ranges from 0 to (# lines in a data block)-1.
 *	Using curLine and the width of a line (stored in mspP), find
 *	the offset to the data for the current line.  Draw this on the
 *	screen using the color map specified in mspP.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/12/93   	Initial Revision
 *
 ***********************************************************************/
void
MSetDrawLine (GStateHandle	gstate,
	      MSetColor		colorScheme,
	      word*		dataP,
	      word		width,
	      word		maxDwell)
{
    word	i;
    XYValueAsDWord	cursorPosition;
    sword	x,y;
    word	oldDwell, curDwell;
    word	leftX;
    
    cursorPosition = GrGetCurPos(gstate);
    x = DWORD_X(cursorPosition);
    y = DWORD_Y(cursorPosition);

    for(i=0, leftX=x, oldDwell=*dataP;
	i<width;
	i++, dataP++, x++)
    {
	/*
	 * PRECONDITION:
	 *	oldDwell is value at (leftX, y)
	 */
	
	curDwell = *dataP;

	/*
	 * If we've hit a new dwell value, draw everything up to (but not
	 * including) this point.
	 */
	if (curDwell != oldDwell) {
	    SetLineColor(gstate, colorScheme, oldDwell, maxDwell);
	    GrDrawHLine(gstate, leftX, y, x-1);
	    oldDwell = curDwell;
	    leftX = x;
	}
	/*
	 * POSTCONDITION:	(after incrementing i,x,dataP)
	 *  	oldDwell is value at (leftX, y)
	 *  	line from leftX to x-1 hasn't been drawn yet
	 */
    }

    /* don't forget the last line segment */
    SetLineColor(gstate, colorScheme, oldDwell, maxDwell);
    GrDrawHLine(gstate, leftX, y, x-1);

    GrMoveTo(gstate, DWORD_X(cursorPosition), DWORD_Y(cursorPosition));
}	/* End of MSetDrawLine.	*/

/***********************************************************************
 *		SetLineColor
 ***********************************************************************
 * SYNOPSIS:	Sets the current color based on the dwell value and the
 *		color scheme.
 * CALLED BY:	MSetDrawLine
 * RETURN:	void
 * SIDE EFFECTS:
 *	Modifies the current line color of the passed gstate
 * STRATEGY:
 *	By convention, points in the Mandelbrot set (those that stayed
 *	within the escape radius for the prescribed number of iterations)
 *	are colored black.  Their dwells will be >= maxDwell.
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/31/93   	Initial Revision
 *
 ***********************************************************************/
#define max(x,y) ((x)<(y)?(y):(x))
void
SetLineColor (GStateHandle	gstate,
	      MSetColor		colorScheme,
	      word		dwell,
	      word		maxDwell)
{
    byte	red,green,blue;

    static Color brightTable[15] = {
	C_BLUE, C_LIGHT_BLUE, C_GREEN, C_LIGHT_GREEN,
	C_CYAN, C_LIGHT_CYAN, C_RED, C_LIGHT_RED,
	C_VIOLET, C_LIGHT_VIOLET, C_BROWN, C_YELLOW,
	C_DARK_GRAY, C_LIGHT_GRAY, C_WHITE
    };

    static Color contrastTable[15] = {
	C_BLUE, C_LIGHT_RED,
	C_GREEN, C_LIGHT_VIOLET,
	C_CYAN, C_YELLOW,
	C_RED, C_WHITE,
	C_VIOLET, C_DARK_GRAY, C_LIGHT_CYAN,
	C_BROWN, C_LIGHT_BLUE,
	C_LIGHT_GRAY, C_LIGHT_GREEN
    };

    /*
     *	Make sure that points in the Mandelbrot set are really black
     */
    if (dwell >= maxDwell) {
	GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0,0);
	return;
    }

    switch (colorScheme)
    {
    case MSC_COUNT:
	/*
	 * We don't want any points not in the Mandelbrot set to be colored
	 * black; any points that are assigned black, we re-assign to
	 * whatever color is farthest from black (index-wise).
	 */
	dwell %= 16;
	if (dwell == C_BLACK) dwell = C_DARK_GRAY;
	GrSetLineColor(gstate, CF_INDEX, dwell&0x1f,0,0);
	break;
    case MSC_BRIGHT:
	GrSetLineColor(gstate, CF_INDEX,
		       brightTable[dwell%15],0,0);
	break;
    case MSC_CONTRAST:
	GrSetLineColor(gstate, CF_INDEX,
		       contrastTable[dwell%15],0,0);
	break;
    case MSC_DOUG:
	/* this color scheme has a period of 256*3 */
	dwell *= 17;		/* nice prime number */
	dwell %= 256*3;
	if (dwell < 256) {
	    red = dwell;
	    green = 255 - dwell;
	    blue = 0;
	} else if (dwell < 512) {
	    dwell -= 256;
	    red = 255 - dwell;
	    green = 0;
	    blue = dwell;
	} else {
	    dwell -= 512;
	    red = 0;
	    green = dwell;
	    blue = 255 - dwell;
	}
	GrSetLineColor(gstate, CF_RGB, red,green,blue);
	break;
    case MSC_GREY:
	GrSetLineColor(gstate, CF_GRAY, (byte)(dwell),0,0);
	break;
    default:
	break;
    }
}	/* End of SetLineColor.	*/
