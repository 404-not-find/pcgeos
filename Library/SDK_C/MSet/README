/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		README

AUTHOR:		Paul DuBois, Sep  19, 1993

DESCRIPTION:
	This file contains a high-level overview of the MSet library.

	$Id: README,v 1.2.4.1 97/03/29 05:28:13 canavese Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The MSet library is significantly larger than the other sample applications,
and demonstrates some of the more powerful and complex features of the GEOS
operating system.  This file should help you get acquainted with the code.

Directory Structure
-------------------

\pcgeos\Include:

	\Include\SDK_C:
		mset.goh --	Structs, enums, and routines exported by the
				MSet library.

	\Include\Objects\SDK_C:
		msetC.goh --	Defines MSetClass	
		msCalcC.goh --	Defines MSetCalcClass
		msColCC.goh --	Defines MSetColorControlClass
		msPrecCC.goh --	Defines MSetPrecisionControlClass


\pcgeos\Library\SDK_C\MSet:

	\MSet:
		mset.def --	The analogue of mset.goh, this file is used
				only by the assembly math routines.
		msConst.h --	#defined constants used by the library.
		msFatErr.h --	defines some enum FatalError and Warnings
				for use with the EC_WARNING and EC_ERROR
				macros.
		mset.gp --	Geode parameters file for the MSet library.

	\MSet\Art:
		mkrCtrl.goh --	visMonikers for the toolbar portions of the
				controller classes.

	\MSet\AsmCalc:
		ac.def --	exported routines from the assembly module
		ac16Bit.asm --	16-bit math routines
		ac48Bit.asm --	48-bit math routines
		acLine.asm --	Line-based alg. for calculating the MSet
		manager.asm --	includes all of the above files; the input
				file to the assembler.

	\MSet\Control:
		colorCtr.goc --	code for MSetColorControlClass
		preciCtr.goc --	code for MSetPrecisionControlClass

	\MSet\Local:
		strings.goh --	@extern chunk declarations for strings.goc
		strings.goc --	Constant strings used by the MSet library

	\MSet\MSet:
		msMain.goc --	Initialization, shutdown, and thread control
		msDraw.goc --	Drawing code
		msNote.goc --	Controller support code -- various
				notification methods
		msParms.goc --	_GET_ and _SET_ methods
		msZoom.goc --	Zooming code

	\MSet\MSetCalc:
		mscMain.goc --	Code for MSetCalcClass


Data structures
---------------

There are three main data structures used in the library; each one resides
in its own VM block.  They are:

	struct MSetParameters
	struct MSetCalcParameters
	array of MSetDataHandles

The VM Handle for the MSetParameters block is passed to the MSet object by
upon initialization, but should be otherwise opaque to clients of the
library.  VM handles to the other two structures are stored in the
MSetParameters block.

The MSetParameters block is used by the MSet object, and the
MSetCalcParameters is used by the MSetCalc object.  The structures were
defined in such a way that the MSet or MSetCalc object should not have to
refer to the other object's structure, although there are some exceptions --
the MSet object takes care of modifying the MSetCalcParameters block when
the client requests the change (such as with MSG_MSET_ZOOM).

The array of MSetDataHandles is used by both objects; they try to keep it
locked down as little as possible to minimize potential blocking.  Each
MSetDataHandle contains a VM handle to 8 * sizeof(word) * <width in pixels>
bytes of calculated dwell values.  The data are interpreted as 8 "lines" of
word-sized values.

Variable Naming Conventions
---------------------------

mspVM	VMBlockHandle to an MSetParameters block
mspH	MemHandle to an MSetParameters block
mspP	pointer to an MSetParameters block

mscpVM	VMBlockHandle to an MSetCalcParameters block
mscpH	MemHandle to an MSetCalcParameters block
mscpP	pointer to an MSetCalcParameters block

dataVM	VMBlockHandle to an array of MSetDataHandles
dataH	MemHandle to an array of MSetDataHandles
dataP	pointer to an array of MSetDataHandles

vmfh	VM File handle
vmbh	VM block handle (generic)

To learn about ...
------------------

...creating and supporting controllers, see MSet\Control\*.goc,
MSet\MSet\msNote.goc, and the controller header files (msColCC.goh,
msPrecCC.goh)

...setting up an event-driven thread, see MSG_MSET_INITIALIZE and
MSG_META_DETACH in MSet\MSet\msMain.goc, MSetCalc\mscMain.goc, and
msCalcC.goh.

...attaching, locking, dirtying, removing VM Blocks, see MSG_MSC_CALCULATE
in MSetCalc\mscMain.goc and MSG_MSET_RESET_CALCULATION in MSet\msMain.goc

...handling click and double-click events, see MSG_META_START_SELECT in
MSet\msZoom.goc.  See the TicTac sample application for samples of handling
drag events.

How the library works
---------------------

To do its calculations, the MSet object spawns off an event-driven thread.
Event-driven threads are normally of type ProcessClass; to implement the
calculation functionality, we subclassed ProcessClass to create
MSetCalcClass.

The MSetCalcClass only defines two new messages: MSG_MSC_CALCULATE and
MSG_MSC_PAUSE.  MSG_MSC_CALCULATE calculates the points in the MSet, not
returning until it is done, or until a message arrives in the thread's
message queue.  MSG_MSC_PAUSE does nothing; its very existence in the thread
queue causes MSG_MSC_CALCULATE to stop its work.

Whenever the thread has finished calculating a line, it will send the MSet
object a message notifying it of this fact.  To keep these messages from
piling up, the message is sent with the checkDuplicate and replace flags.
Note that we cannot just use @call, or we might get into a situation where
both threads are @calling (and blocking) on each other -- deadlock.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
