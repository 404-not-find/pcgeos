$Id: SPEC,v 1.3.29.1 97/03/29 04:31:42 canavese Exp $
This document contains random thoughts on religion.


Possible Edit/Undo possibilities:

Scenario 1:	Backup Bitmap
		-------------
		The tool writes directly to the main bitmap; a copy of the
		bitmap *before* the changes are made is kept around in case
		the user wants to discard the last edit.

		+ The main bitmap represents the "latest and greatest";
		  Nothing extra needs to be drawn on visual updates, etc.

		- Takes up lots (too much) memory for many tools that simply
		  don't need it.

		- Must either copy entire bitmap before editing, or know
		  how big the edit is going to be through some mechanism
		  (e.g., store in gstring, then determine size) and copy
		  portion of the bitmap.

Scenario 2:	Changes Bitmap
		--------------
		Tool edits are drawn to a clear bitmap, then drawn through
		to the main bitmap before the next edit can take place.

		-Must write changes to bitmap before next edit.

Scenario 3:	Changes Gstring
		---------------
		Changes are kept in a gstring, written through to the bitmap
		when necessary.

		+ Small for small edits.

		+ Small for single GrDoShit tools like line, rect, etc.

		- Drawing the string to the bitmap


Tool		scenario
----		--------
Pencil		

Eraser

Brush

Fill

Select

Rect

Text

Spline

Air Brush






				VisTool
				   |
	   +---------------+-------+-----+----------------+-------------+
	   |		   |		 |		  |		|
	MonoGeo		MultiGeo	Fill		Object		Select?
	   |		   |				  |
	line,rect	   +				text,spline
			   |
		  +--------+-----+
		  |	   |	 |
		pencil	eraser brush








	No Undo
		When a new edit starts
		  Tool is passed writable main bitmap.
		  Tool draws to passed bitmap.

	Backup Bitmap
		When a new edit starts
		  Portion of main bitmap is copied to backup bitmap.
		  Tool is passed writable main bitmap.
		  Tool draws to passed bitmap.
		  Tool returns bounds of its changes when done.

		- Potentially lots of extra data
		+ Only one draw on visual update
		? Speed of copying to backup bitmap at start of next edit

	Changes Data
		When a new edit starts
		  The changes data, in form of gstring or bitmap, 
		  is written into main bitmap.
		  Tool is passed unwritable main bitmap.
		  Tool writes its changes data to a bitmap or gstring
		  that it creates itself.
		  Tool returns changes data when done.

		- Slow to update main bitmap at start of next edit
		- Slow visual update on expose
		+ Great for drag open things
		+ Good for small edits
		- Things like fill could end up making entire copy
		  of main bitmap

	Backup Bitmap and Prev Changes Data
		When a new edit starts,
		  Tool is passed writeable main bitmap
		  Tool writes changes to main bitmap and it creates
		  separate changes data in a bitmap or gstring
		  Tool returns changes data
		When tool completes an edit
		  Write changes of previous tool to backup
		  New changes become the prev changes.

		+ No delay when starting new edit
		+ Only one draw on visual update
		- Delay at end of edit before new can be started
		- Wasted data, as much as three copies of bitmap

	Changes and Prev Changes
		When a new edit starts
		  Tool is passed unwriteable bitmap
		  Tool writes its changes data to a bitmap or gstring
		  that it creates itself.
		  Tool returns changes data when done.
		When tool completes an edit
		  Write changes of previous tool to main bitmap
		  New changes become the prev changes

		+ No delay when starting new edit
		- Three draws on visual update
		+ Great for drag open things
		+ Good for small edits
		- Things like fill could end up making entire copy
		  of main bitmap
		- Causes trouble for pencil and fill tool which 
		  need to know current status of bitmap.		

		Shitty ways around pencil and fill problem. 
			Force black and white to always use back up bitmap
			and just draw in the current pencil color for
			color bitmaps
			
			Fill is slow anyway. So do a forced update of
			main bitmap from changes data and then do fill.
		

	Small Backup
		When new edit starts
		  Tool is passed unwritable bitmap
		  Tool writes its changes data to a bitmap or gstring
		  that it creates itself.
		   Tool returns changes data and bounds when done
		When edit ends
		  Bitmap creates small backup bitmap
		  Bitmap copies changes area from main to backup
		  Bitmap writes changes data to main bitmap

		+ No delay when starting new update
		+ Only one draw on visual update
		- Small backup bitmap could be quite large
		- Delay at end of edit







