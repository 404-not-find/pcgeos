/**********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:        Mail	
 * MODULE:	   BBXMail
 * FILE:	   buffer.h
 * 
 * DESCRIPTION:
 * 
 ****************************************************************************/

@include <stdapp.goh>
@include <bbxmlib.goh>
@include <socket.goh>
#include <resource.h>
#include <chunkarr.h>
#include <Ansi/string.h>
#include <Ansi/stdlib.h>
#include <Ansi/stdio.h>
#include <resource.h>


static char six2pr[64] = {  /* 6 bits to 8-bit printable char table */
    'A','B','C','D','E','F','G','H','I','J','K','L','M',
    'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
    'a','b','c','d','e','f','g','h','i','j','k','l','m',
    'n','o','p','q','r','s','t','u','v','w','x','y','z',
    '0','1','2','3','4','5','6','7','8','9','+','/'
};

static unsigned char pr2six[256];

/*
 * Initially pr2six table is not initialized. It will be initialized
 * when we first call MailB64DECODE.
 */
static Boolean pr2sixNeedsInitialize = TRUE;


static char CRLF[] = {CR,LF,0};

/***********************************************************************
 *		MailB64EncodePtr
 ***********************************************************************
 *
 * SYNOPSIS:	Same as MailB64EncodePtr, but take two byte pointers.
 * CALLED BY:	Client
 * RETURN:	Same as MailB64EncodePtr
 * STRATEGY:	
 *	
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	kkee    	5/13/97   	Initial Revision
 *	
 ***********************************************************************/
int _far _pascal
MailB64EncodePtr (byte *bufToCode, int nbytes, byte *bufCoded)
{
#define ENC(c) six2pr[c]

    byte *start;
    word i;

    if (!bufToCode || !nbytes || !bufCoded) return 0;

    start = bufCoded;
    
    PUSHDS;
    SET_DS_LIB_DGROUP;  /* To use ENC(c) */
    
    for (i=0; i<nbytes; i += 3) {
	*(bufCoded++) = ENC(*bufToCode >> 2);             /*c1*/
	*(bufCoded++) = ENC(((*bufToCode << 4) & 060) | 
			  ((bufToCode[1] >> 4) & 017)); /*c2*/
	*(bufCoded++) = ENC(((bufToCode[1] << 2) & 074) | 
			  ((bufToCode[2] >> 6) & 03));  /*c3*/
	*(bufCoded++) = ENC(bufToCode[2] & 077);          /*c4*/
	
	bufToCode += 3;
    }
    
    /* 
     * If nbytes was not a multiple of 3, then we have encoded too
     * many characters.  Adjust appropriately.
     */
    if(i == nbytes+1) {
	/* There were only 2 bytes in that last group */
	bufCoded[-1] = '=';
    } else if (i == nbytes+2) {
	/* There was only 1 byte in that last group */
	bufCoded[-1] = '=';
	bufCoded[-2] = '=';
    }
    *bufCoded = '\0';

    i = bufCoded - start;

    POPDS;

    return i;
}	



/***********************************************************************
 *		MailB64DecodePtr
 ***********************************************************************
 *
 * SYNOPSIS:	Same as HTUUDECODE, but take two byte pointers.
 * CALLED BY:	Client
 * RETURN:	Same as HTUUDECODE
 *	
 * STRATEGY:	
 *	
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	kkee    	5/13/97   	Initial Revision
 *	
 ***********************************************************************/
int _far _pascal
MailB64DecodePtr (byte *bufferCoded, int inbufsize,
	       byte *bufferPlain, int outbufsize)
{
/* single character decode */
#define DEC(c) pr2six[(int)c]
#define MAXVAL 63

   int nbytesdecoded, j;
   register int nprbytes;
   register byte *bufin = bufferCoded;
   register byte *bufout = bufferPlain;

   PUSHDS;
   SET_DS_LIB_DGROUP;
	
   /* 
    * If this is the first call, initialize the mapping table.
    * This code should work even on non-ASCII machines.
    */
   if(pr2sixNeedsInitialize) {
      pr2sixNeedsInitialize = FALSE;
      for(j=0; j<256; j++) pr2six[j] = MAXVAL+1;
      for(j=0; j<64; j++) pr2six[(int)six2pr[j]] = (unsigned char) j;
   }

   /* Figure out how many characters are in the input buffer.
    * If this would decode into more bytes than would fit into
    * the output buffer, adjust the number of input bytes downwards.
    */
   while(pr2six[(int)*(bufin++)] <= MAXVAL);
   nprbytes = bufin - bufferCoded - 1;
   nprbytes = (nprbytes < inbufsize) ? nprbytes : inbufsize;
   nbytesdecoded = ((nprbytes+3)/4) * 3;
   if(nbytesdecoded > outbufsize)
       nprbytes = (outbufsize*4)/3;

   bufin = bufferCoded;
   while (nprbytes > 0) {
      *(bufout++) = (unsigned char) ((DEC(*bufin) << 2) | (DEC(bufin[1]) >> 4));
      *(bufout++) = (unsigned char) ((DEC(bufin[1]) << 4) | (DEC(bufin[2]) >> 2));
      *(bufout++) = (unsigned char) ((DEC(bufin[2]) << 6) | DEC(bufin[3]));
      bufin += 4;
      nprbytes -= 4;
   }
   
   if(nprbytes & 03) {
      if(pr2six[(int)bufin[-2]] > MAXVAL) {
         nbytesdecoded -= 2;
      } else {
         nbytesdecoded -= 1;
      }
   }

   POPDS;

   return(nbytesdecoded);
}	


/***********************************************************************
 *		UpdateProgress64
 ***********************************************************************
 *
 * SYNOPSIS:	Call email app to update the progress
 * CALLED BY:	
 * RETURN:	Return boolean to indicate if we should stop.
 ***********************************************************************/
Boolean _pascal
UpdateProgress64 (FileHandle file, void *callback, dword size, TCHAR *attachName, dword *updateTime)
{
    dword pos = 0, remainingSize;
    int percent;
    TCHAR buf[FILE_LONGNAME_LENGTH + 2*UHTA_NO_NULL_TERM_BUFFER_SIZE + 10];
    TCHAR *attachFN;
    Boolean stop = FALSE;
    word rsFrac, tsFrac;
    dword now = TimerGetCount();

    pos = FilePos(file,pos,FILE_POS_RELATIVE);
    remainingSize = size - pos;
    if (callback) {
	percent = ((size - remainingSize) * 100) / size;
	if (percent == 100 || (now - (*updateTime) > 60L)) {
	*updateTime = now;
	/*
	 * passed name is complete path; find filename at end and show it
	 */
	attachFN = strrchr(attachName, '\\');
	if (!attachFN) {
	    attachFN = attachName;
	} else {
	    attachFN++;
	}
	rsFrac = ((pos % 1024) * 10) / 1024;
	tsFrac = ((size % 1024) * 10) / 1024;
	sprintf(buf, "%s (%ld.%dK/%ld.%dK)", attachFN,
		pos>>10, rsFrac, size>>10, tsFrac);
	ProcCallFixedOrMovable_pascal(MakeWWFixed(percent), 
				      buf, &stop, callback);
	}
    }
    return stop;
}	/* End of UpdateProgress64	*/


/***********************************************************************
 *		MailPutBase64Encoded
 ***********************************************************************
 *
 * SYNOPSIS:	Read from a file, encode the data using mime
 *              base64 encoding and then send the data using 
 *              the passed socket.  Call back can be passed to 
 *              update the sending progress.
 * CALLED BY:	
 * RETURN:	
 ***********************************************************************/
SocketError _pascal
MailPutBase64Encoded( Socket sock, FileHandle file, void *callback, TCHAR *attachName) 
{
    byte *data, *edata;
    MemHandle edataHandle, dataHandle;
    int len, nbytes, mbytes;
    int encodedLen;
    SocketError ret = SE_NORMAL;  /* in case empty attachment */
    dword size=0, oldpos = 0;
    Boolean stop;
    dword updateTime = 0;

    PUSHDS;
    SET_DS_LIB_DGROUP;
    
    oldpos = FilePos(file,oldpos,FILE_POS_RELATIVE);
    size = FilePos(file, size, FILE_POS_END);
    FilePos(file, oldpos, FILE_POS_START);

    edataHandle = MemAlloc(BASE64_ENCODED_SIZE, HF_SWAPABLE | HF_SHARABLE, 
			   HAF_LOCK | HAF_NO_ERR);
    if (!edataHandle) {
	POPDS;
	return SE_INTERNAL_ERROR;
    }
    edata = MemDeref(edataHandle);

    dataHandle = MemAlloc(BASE64_ENCODING_CHUNK, HF_SWAPABLE | HF_SHARABLE, 
			   HAF_LOCK | HAF_NO_ERR);
    if (!dataHandle) {
	MemFree(edataHandle);
	POPDS;
	return SE_INTERNAL_ERROR;
    }
    data = MemDeref(dataHandle);

    /* Body of the attachment */
    while ((len = FileRead(file, data, 513, 0)) != 0) {
	stop = UpdateProgress64(file, callback, size, attachName, &updateTime);
	if (stop) {
	    ret = ME_USER_INTERRUPTED;
	}
	while (len && (!stop)) {
	    nbytes = (len >= BASE64_ENCODING_CHUNK) ? BASE64_ENCODING_CHUNK : len;
	    len -= nbytes;
	    
	    edata = MemDeref(edataHandle);
	    encodedLen = MailB64EncodePtr((byte *)data, nbytes, edata);
	    data += nbytes;
	    
	    while (encodedLen) {
		/* 
		 * Put encoded data to target. The encoded buffer is multiple
		 * of 76 bytes since the input buffer is multiple of of 56 
		 * bytes, except for the last buffer.
		 */
		mbytes = (encodedLen >= 76) ? 76 : encodedLen;
		encodedLen -= mbytes;

		ret = SocketSend(sock, edata, mbytes, 0, 
				 (SocketError *)0);
		edata += mbytes;
		
		if (mbytes == 76) {
		    ret = SocketSend(sock, (byte *)CRLF, 2, 0,
				     (SocketError *)0);
		}

		if (ret != SE_NORMAL) {
		    len = 0;
		    break;
		}
	    }
	}
	data = MemDeref(dataHandle);
    }

    MemUnlock(dataHandle);
    MemUnlock(edataHandle);
    MemFree(dataHandle);
    MemFree(edataHandle);
    POPDS;
    return ret;
}
    

/***********************************************************************
 *		MailUUDecodePtr
 ***********************************************************************
 *
 * SYNOPSIS:	UUDecode passed buffer
 * CALLED BY:	
 * RETURN:	number of bytes decoded
 ***********************************************************************/
#define DECUU(c)  (((c) - ' ') & 077)
int _far _pascal
MailUUDecodePtr (byte *bufferCoded, int inbufsize,
	       byte *bufferPlain, int outbufsize)
{
    byte *s, *d;
    int i=0,j=0,n=0;
      /* N is used to avoid writing out all the characters at the end of
         the file.  */
    s = bufferCoded;
    d = bufferPlain;

    n = DECUU (*s);
    if (n <= 0)
	return j;
    for (++s; (n > 0) && (i<inbufsize) && (j<outbufsize); 
	 i+=4, s += 4, n -= 3)
    {
	if (n >= 1)
	{
	    d[j] = ((DECUU(s[0])) << 2) | ((DECUU(s[1])) >> 4); 
	    ++j;
	}
	if (n >= 2)
	{
	    d[j] = ((DECUU(s[1])) << 4) | ((DECUU(s[2])) >> 2); 
	    ++j;
	}
	if (n >= 3) {
	    d[j] = ((DECUU(s[2])) << 6) | (DECUU(s[3]));
	    ++j;
	}
    }
    return j;
}	/* End of MailUUDecodePtr.	*/

