COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC/GEOS Sound System	
MODULE:		Sound Library
FILE:		nsoundError.def

AUTHOR:		Todd Stumpf, Aug 25, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	8/25/92		Initial revision


DESCRIPTION:
	This file contains all the error checking definitions for
	the Sound Library
	
		
	$Id: soundError.def,v 1.1 97/04/07 10:46:26 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;		Fatal Errors for Sound Library
;-----------------------------------------------------------------------------

SOUND_STREAM_DRIVER_LIED_TO_US		enum FatalErrors
;  STREAM_DRIVER_LIED_TO_US indicates that at some point,
;  the stream driver gave us the go ahead to read from
;  the stream, but for some reason, the read failed.  As these
;  reads are occuring at interrupt time, this is a fatal error.


SOUND_PROBLEM_ALLOCATING_STREAM		enum FatalErrors
;  PROBLEM_ALLOCATING_...  indicates we ran out of memory
;  and we don't know what to do...


SOUND_PROBLEM_ALLOCATING_STREAM_STATUS_BLOCK	enum FatalErrors
;  PROBLEM_ALLOCATING_...  indicates we ran out of memory
;  and we don't know what to do...


SOUND_BAD_EVENT_COMMAND			enum FatalErrors
;  BAD_EVENT_COMMAND indicates that an event read from
;  a sound stream is of odd value, or exceeds
;  some bounds.  As both the type and the events are used
;  as offsets into jump-tables, this is a bad thing.  Bad
;  enough to rate as a fatal error


SOUND_BAD_SOUND_DRIVER			enum FatalErrors
;  BAD_SOUND_DRIVER is used whenever there is a problem
;  loading the sound driver in SoundEntry


SOUND_VOICE_MANAGER_CALLED_WITH_INTS_ENABLED	enum FatalErrors
;  VOICE_MANAGER_CALLED_WITH_INTS_ENABLED indicates that
;  someone called a voice manager routine without disabling
;  interrupts.  This means that a context switch or timer
;  could occur and cause the voice manager to deal with
;  a corrupt voice list.


SOUND_VOICE_MANAGER_CALLED_WITH_NO_VOICES	enum FatalErrors
;  VOICE_MANAGER_CALLED_WITH_NO_VOICES indicates that
;  someone made a call to the voice manager but we
;  have no voice to deal with.


SOUND_VOICE_MANAGER_CALLED_WITH_ILLEGAL_VOICE	enum FatalErrors
;  VOICE_MANAGER_CALLED_WITH_ILLEGAL_VOICE indicates
;  that the voice Manager was called to handle a voice
;  of an illegal value.  Probably cx was trashed by
;  the calling routine, or the SVS_physicalVoice of
;  of the sound was scribbled over.


SOUND_CORRUPT_VOICE_LIST			enum FatalErrors
;  CORRUPT_VOICE_LIST indicates that some how one of
;  the two linked lists of voices (those that are
;  used, and those that aren't) have been corrupted.


SOUND_CORRUPT_SOUND_BLOCK			enum FatalErrors
;  CORRUPT_SOUND_BLOCK indicates that a sound
;  routine was passed a sound block that was not
;  valid.  This may be a simple segment register
;  mix up, or a sign of a scribbling bug...

SOUND_BAD_STREAM_IN_NOTIFICATION		enum FatalErrors
;  BAD_STREAM_IN_NOTIFICATION indicates that the
;  sound strucuture passed to the notification routine
;  contains a reference to some other stream.  This
;  is probably a scribbling bug.

SOUND_CORRUPT_SOUND_STREAM			enum FatalErrors
;  CORRUPT_SOUND_STREAM indicates that the stream for
;  the sound is no longer in a correct state.  Either
;  someone scribbled over it, or somewhere in the sound
;  code, some math was messed up.

SOUND_ATTEMPT_TO_WRITE_NO_DATA_TO_STREAM	enum FatalErrors
;  ATTEMPT_TO_WRITE_NO_DATA_TO_STREAM means that someone
;  wanted to add an empty buffer to the DAC stream.  This
;  causes "problems", so we just make the calling app
;  handle it.

SOUND_WRITE_TO_CLOSING_STREAM			enum FatalErrors
;  WRITE_TO_CLOSING_STREAM indicates that the sound code
;  attempted to write to a sound stream that was in the
;  process of closing.  This should not happen.  It either
;  means that you called PlayToStream after you called
;  FreeStream, or there is bug in the sound library.

SOUND_CONTROL_BLOCK_IN_DISCARDED_RESOURCE	enum FatalErrors
;  This usually indicates that the library tried to lock
;  a block containing a SoundControl structure and it recieved
;  and error.  SoundControl blocks must be allocated in
;  non-discardable resources.

SOUND_BUFFER_IN_DISCARDED_RESOURCE		enum FatalErrors
;  This indicates that the user called SoundLibDriverPlayLMemSimpleFM
;  with a handle that MemLock tried to lock down, and returned an
;  error.  Sound buffers must be in non-discardable resources.

SOUND_INVALID_WRITE_STREAM_STATUS		enum FatalErrors
;  This indicates that status returned by writing to stream is not a
;  valid status

if PZ_PCGEOS
SOUND_DELAYED_BY_EXCLUSIVE_ACCESS		enum Warnings
;  This indicates that the sound was not played when required because
;  someone had exclusive access
endif

;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------

