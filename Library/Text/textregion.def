COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		textregion.def

AUTHOR:		John Wedgwood, Feb 12, 1992

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	 2/12/92	Initial revision


DESCRIPTION:
	External stuff from TextRegion module.
		
	$Id: textregion.def,v 1.1 97/04/07 11:19:12 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
TextRegion	segment	resource
	global	TextRegion_DerefVis_SI:far
	global	TextRegion_DerefVis_DI:far

	global	TR_RegionWidth:far
	;
	; Get the width of the region at a given y position.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		dx	= Y position within that region
	;		bx	= Integer height of the line at that position
	;	RETURN:	ax	= Width of the region at that point.
	;

	global	TR_RegionGetTrueWidth:far
	;
	; Get width of region bounding rectangle.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		bx	= non-zero to get value for blt-ing
	;	RETURN:	ax	= Width
	;

	global	TR_RegionLeftRight:far
	;
	; Get the bounds of the region at a given y position.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		dx	= Y position within that region
	;		bx	= Integer height of the line at that position
	;	RETURN:	ax	= Left edge of the region at that point.
	;		bx	= Right edge of the region at that point.
	;

	global	TR_RegionLinesInClipRect:far
	;
	; Get the range of lines in a region that fall inside a given rectangle.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		ss:bp	= TextRegionEnumParameters
	;		ss:bx	= VisTextRange to fill in
	;	RETURN:	VisTextRange holds the range of lines
	;		carry set if no lines appear in the region
	;
	
	global	TR_RegionNextSegmentTop:far
	;
	; Get the next segment of a region.
	;	PASS:	*ds:si	= Instance
	;		bx	= non-zero to get value for blt-ing
	;		cx	= Region number
	;		dx	= Y position within that region
	;	RETURN:	dx	= Y position of the top of the next segment
	;		carry set if there are no more segments
	;
	
	global	TR_RegionAdjustForReplacement:far
	;
	; Adjust the text positions (sizes) for a replacement
	;	PASS:	*ds:si	= Instance
	;		ss:bp	= VisTextReplaceParameters
	;
	
	global	TR_RegionSetStartOffset:far
	;
	; Set the starting offset associated with a given region.  This
	; adjusts all following regions as well.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		dx.ax	= Starting offset
	;

	global	TR_RegionInsertLines:far
	;
	; Insert lines into a given region
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;		dx.ax	= Number of lines to insert
	;

	global	TR_RegionAdjustNumberOfLines:far
	;
	; Adjust the number of lines in a region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		bx.di	= Starting line
	;		dx.ax	= (signed) number of lines inserted/deleted
	;

	global	TR_RegionSetTopLine:far
	;
	; Set the top-line associated with a given region.  This adjusts
	; all following regions as well.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		bx.di	= Line at the top of that region
	;

	global	TR_RegionGetTopLine:far
	;
	; Get the top-line associated with a given region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	bx.di	= Line at the top of that region
	;
	
	global	TR_RegionGetStartOffset:far
	;
	; Get the starting offset associated with a given region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	dx.ax	= Starting offset
	;

	global	TR_RegionAdjustHeight:far
	;
	; Adjust a region's height.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		dx.al	= Height change
	;

	global	TR_RegionGetHeight:far
	;
	; Get calculated height of region bounding rectangle.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	dx.al	= Calculated height
	;

	global	TR_RegionGetTrueHeight:far
	;
	; Get height of region bounding rectangle.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	dx.al	= Height
	;

	global	TR_RegionMakeNextRegion:far
	;
	; Force the creation of another region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number to append after
	;		dx	= Non-zero to skip to next region
	;	RETURN:	cx	= Next region
	;
	; For a small object this will just return the carry set. For a large
	; object it will depend on what the OD of the object wants to do.
	;
	; The assumption is that if you call this routine, the region which
	; is created becomes the "last" region in the current section.
	;

	global	TR_RegionClearToBottom:far
	;
	; Clear from a given line to the bottom of the region containing that
	; line.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;
	
	global	TR_RegionClearSegments:far
	;
	; Clear an area, taking into account the region boundarise.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;		ax	= Top of area
	;		bx	= Bottom of area
	;		dx	= Left edge of area
	;
	
	global	TR_RegionGetLineCount:far
	;
	; Get the number of lines in a given region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;	RETURN:	cx	= Number of lines
	;
	
	global	TR_RegionGetCharCount:far
	;
	; Get the number of lines in a given region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;	RETURN:	dx.ax	= Number of lines
	;
	
	global	TR_RegionFromOffset:far
	;
	; Get the region associated with a given text offset.
	;	PASS:	*ds:si	= Instance
	;		dx.ax	= Offset
	;	RETURN:	cx	= Region
	;

	global	TR_RegionFromOffsetGetStartLineAndOffset:far
	;
	; Get information about the region associated with a given text offset.
	;	PASS:	*ds:si	= Instance
	;		dx.ax	= Offset
	;	RETURN:	dx.ax	= Region start offset
	;		bx.di	= Region start line
	;

	global	TR_RegionFromLineGetStartLineAndOffset:far
	;
	; Get information about the region associated with a given line.
	;	PASS:	*ds:si	= Instance
	;		bx.di	= Line
	;	RETURN:	dx.ax	= Region start offset
	;		bx.di	= Region start line
	;

	global	TR_RegionFromPoint:far
	;
	; Get the region associated with a given point.
	;	PASS:	*ds:si	= Instance
	;		ss:bp	= PointDWFixed
	;	RETURN:	cx	= Region
	;			= CA_NULL_ELEMENT if not in any region
	;		ax	= Relative X position
	;		dx	= Relative Y position
	;
	
	global	TR_RegionIsLastInSection:far
	;
	; Find out if a region is the last one in a section.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	carry set if it is the last region in the section
	;		zero flag set if it's the last region entirely
	;
TextRegion	ends


ifdef PROFILE_TIMES
TextProfile	segment resource
	global	TR_ProfilePoint:far
	;
	; Profiling point routine to output to log if enough time has passed.
	;
	;       PASS:   ax      = Profile point ID
	;       RETURN: nothing

TextProfile	ends
endif

	;
	; ProfilePoint macro to call TR_ProfilePoint and not affect any registers
	; or flags
	; Also creates no code if not profiling version compiled.
	;
ProfilePoint	macro	id
ifdef PROFILE_TIMES
    push ax
    mov	ax, id
    call TR_ProfilePoint
    pop ax
endif
endm


TextFixed	segment
	global	TR_RegionFromLine:far
	;
	; Get the region associated with a given line.
	;	PASS:	*ds:si	= Instance
	;		bx.di	= Line
	;	RETURN:	cx	= Region
	;

	global	TR_RegionGetTopLeft:far
	;
	; Get the top/left edge of a region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;		ss:bp	= PointDWord to fill in
	;	RETURN:	PointDWord contains the top-left corner of the region
	;

	global	TR_RegionTransformGState:far
	;
	; Transform the gstate so that 0,0 falls at the upper-left of the region
	; and set the clip region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;		dl	= DrawFlags
	;
	
	global	TR_RegionNext:far
	;
	; Move to the next region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	carry flag set if there is no next region
	;		carry flag clear otherwise
	;			zero flag clear (nz) if passed region is last
	;			zero flag set   (z) otherwise
	;			cx	= Next region number
	;

	global	TR_RegionPrev:far
	;
	; Move to the previous region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	carry set if there is no previous region
	;		cx	= Previous region number
	;

	global	TR_RegionPrevSkipEmpty:far
	;
	; Move backwards, skipping empty regions. This operation will return
	; either the immediately previous region, or the first of a series of
	; empty regions which fall before the passed region.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	carry set if there is no previous region
	;		cx	= Previous region number
	;

	global	TR_RegionIsLast:far
	;
	; Notify someone that the current region is the last one in its section
	; that contains any data.
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number which is the last
	;	RETURN:	bx.dx.ax= Sum of calc'd height of nuked regions (DWFixed)
	;		cx	= Number of non-empty regions deleted
	; For a small object this will do nothing. For a large object it will
	; depend on what the OD of the object wants to do.
	;

	global	TR_RegionIsComplex:far
	;
	; Determine if the given region is complex (non-rectangular)
	;	PASS:	*ds:si	= Instance
	;		cx	= Region number
	;	RETURN:	carry	= set if region is complex
	;
	
TextFixed	ends

TextLargeRegion	segment	resource
	global	TR_RegionAlterFlags:far
	;
	; Alter the VTRAE_flags
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;		ax	= Bits to set
	;		dx	= Bits to clear
	;

	global	TR_RegionGetFlags:far
	;
	; Alter the VTRAE_flags
	;	PASS:	*ds:si	= Instance
	;		cx	= Region
	;	RETURN:	ax	= VisTextRegionFlags
	;
	
	global	TR_CheckCrossSectionChange:far
	;
	; Check to see if a range crosses a section break.
	;	PASS:	*ds:si	= Instance
	;		ss:bp	= VisTextRange
	;	RETURN:	carry set if the ange crosses sections
	;
	
TextLargeRegion	ends

TextInstance	segment	resource

if 0
	global	TR_RegionGetSectionRange:far
	;
	; Get the range of text covered by a given section.
	;	PASS:	*ds:si	= Instance
	;		cx	= Section which we want info for
	;	RETURN:	dx.ax	= Start of section
	;		cx.bx	= End of section (start of next section)
endif

TextInstance	ends

TextDrawCode	segment	resource
	
	global	TR_RegionEnumRegionsInClipRect:far
	;
	; Enumerate all of the regions in the clip-rectangle associated with
	; the window containing the text object.
	;	PASS:	*ds:si	= Instance
	;		ss:bp	= TextRegionEnumParameters w/ at least these set:
	;				TREP_callback
	;				TREP_flags
	;	RETURN:	nothing
	;	DESTROYED: nothing
	;
	; Callback should be defined as:
	;	PASS:	*ds:si	= Instance
	;		ss:bp	= TextRegionEnumParameters
	;	RETURN:	carry set to stop calling back
	;
	; The callback will be called for every *non-empty* region that falls
	; in the clip-rectangle of the window. The gstate for the object will
	; *not* be transformed for the region when the callback occurs.
	;

TextRegionEnumParameters	struct
    TREP_region		word			; Current region
    TREP_regionTopLeft	PointDWord		; Top/Left of current region
    TREP_regionHeight	word			; Height of current region
    TREP_regionWidth	word			; Width  of current region
    TREP_regionPtr	fptr			; Pointer to region data, if any
    TREP_regionFirstLine dword			; First line of region
    TREP_regionLineCount dword			; Number of lines in region
    TREP_regionFirstChar dword			; First character in region
    TREP_regionCharCount dword			; Number of chars in region
    TREP_clipRect	RectDWord		; Clip rect, relative to region
    TREP_flags		TextClearBehindFlags	; Flags passed in
    align	word
	;
	; The following items are used by the enumeration code and shouldn't
	; need to be used by the callback, though it can...
	;
    TREP_callback	fptr			; Callback passed in
    TREP_object		dword			; The object itself
    TREP_displayMode	VisLargeTextDisplayModes ; The display mode
    TREP_regionSpacing	word			; Spacing between regions
    TREP_draftRegionSize XYSize			; Size of draft regions
    TREP_globalClipRect	RectDWord		; Clip rectangle for window
	;
	; The following exist for:
	;   TextScreenUpdate -
	;	Reflects the range of lines that are selected.
	;   InvertRange -
	;	Reflects the range of lines left to be operated on.
	;
    TREP_selectLines	VisTextRange		; Range of lines selection covers
	;
	; The following exist for InvertRange
	;
    TREP_charRange	VisTextRange		; Range of characters to invert
TextRegionEnumParameters	ends

TextDrawCode	ends

