COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		tsConstant.def

AUTHOR:		John Wedgwood, Nov 19, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	11/19/91	Initial revision


DESCRIPTION:
	Constants and structures for the TextStorage module
		
	$Id: tsConstant.def,v 1.1 97/04/07 11:22:22 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
; This enumerated type defines an entry for all the routines in this module
; which have a different handler depending on whether the text object is
; a small object (with the text stored in a chunk) or a large object (with
; the text stored in a huge-array).
;
; If you modify this list you must also modify the Small/LargeStorageHandler
; tables in tsAccess.asm.
;
TextStorageVariant	etype	word, 0, 6
TSV_REPLACE_RANGE	enum	TextStorageVariant
;
; Replace a range of text
;	PASS:	*ds:si	= Text object instance
;		ss:bp	= VisTextReplaceParameters
;

TSV_CHECK_LEGAL_CHANGE	enum	TextStorageVariant
;
; Check that a change won't result in too much text in the object.
;	PASS:	*ds:si	= Text object instance
;		ss:bp	= VisTextReplaceParameters
;	RETURN:	carry set if the change is legal
;

TSV_GET_TEXT_RANGE	enum	TextStorageVariant
;
; Get the character at a given offset.
;	PASS:	*ds:si	= Text object instance
;		ss:bx	= VisTextRange filled in
;		ss:bp	= TextReference filled in
;	RETURN:	dx.ax	= Number of bytes copied
;

;
; Initial size of the text stream (space for a NULL)
;
if DBCS_PCGEOS
TEXT_INIT_STREAM	= 2		; Can not be zero.
else
TEXT_INIT_STREAM	= 1		; Can not be zero.
endif

TSV_FIND_STRING_IN_TEXT enum	TextStorageVariant
;
; Find a string in a text object.
;	PASS:	*ds:si	= Instance ptr
;		dx.ax	= Offset into text to start search at
;		cx.bx	= Offset of last char to include in search
;			= -1:-1 to use all text in the object
;		es	= Segment address of SearchReplaceStruct
;	RETURN:	carry set if string not found
;		dx.ax	= Offset to start of string found
;		cx.bx	= Number of characters which matched
;

;*****************************************************************************
;		   These are only valid for EC code
;*****************************************************************************
TSV_CHECK_PARAMS	enum	TextStorageVariant
;
; Validate VisTextReplaceParameters
;	PASS:	*ds:si	= Text object instance
;		ss:bp	= VisTextReplaceParameters
;

;-----------------------------------------------------------------------------

TSV_GET_TEXT_SIZE	enum	TextStorageVariant
;
; Get the size of the text.
;	PASS:	*ds:si	= Text object instance
;	RETURN:	dx.ax	= Number of bytes of text
;

TSV_LOCK_TEXT_PTR	enum	TextStorageVariant
;
; Get a pointer to an offset in the text.
;	PASS:	*ds:si	= Text object instance
;		dx.ax	= Offset into the text
;	RETURN:	ds:si	= Pointer to the text at that offset
;		ax	= Number of valid characters after ds:si
;		cx	= Number of valid characters before ds:si
;

TSV_UNLOCK_TEXT_PTR	enum	TextStorageVariant
;
; Release a block of text
;	PASS:	*ds:si	= Text object instance
;		ax	= Segment containing the text
;

TSV_GET_CHAR_AT_OFFSET	enum	TextStorageVariant
;
; Get the character at a given offset.
;	PASS:	*ds:si	= Text object instance
;		dx.ax	= Offset of character
;	RETURN:	ax	= Character at that position
;

TSV_NEXT_CHAR_IN_CLASS	enum	TextStorageVariant
;
; Move to the next character of a given class.
;	PASS:	*ds:si	= Instance ptr
;		dx.ax	= Offset to start at
;		bx	= CharacterClass record
;	RETURN:	dx.ax	= Offset of next character of this class
;		carry set if there is no next character in this
;			class.
;		if no character of this class was found, dx.ax will
;			hold the offset of the end of the text object.
;

TSV_PREV_CHAR_IN_CLASS	enum	TextStorageVariant
;
; Move to the previous character of a given class.
;	PASS:	*ds:si	= Instance ptr
;		dx.ax	= Offset to start at
;		bx	= CharacterClass record
;	RETURN:	dx.ax	= Offset of previous character of this class
;		carry set if there is no previous character in this
;			class.
;		if no character of this class was found, dx.ax will
;			hold the offset of the start of the text object.
;


