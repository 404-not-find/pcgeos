/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		lzwc.h

AUTHOR:		Maryann Simmons, May  5, 1992

METHODS:

Name			Description
----			-----------

FUNCTIONS:

Scope	Name			Description
-----	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	MS	5/ 5/92   	Initial version.

DESCRIPTION:
	

	$Id: lzwc.h,v 1.1 97/04/07 11:27:51 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/***************** constants and macros *******************/

#ifndef MAXSHORT
 #define    MAXSHORT   (0x7FFF)            /* maximum 16-bit signed int */
 #define    MINSHORT   (0x8000)
 #define    MAXWORD    ((WORD)0xFFFF)      /* maximum 16-bit unsigned int */
 #define    MAXLONG    0x7FFFFFFFL         /* maximum 32-bit signed int */
 #define    MAXDWORD   ((DWORD)0xFFFFFFFFL)/* max 32-bit unsigned int */
#endif

/* some LZW constants */

#define MAXCODEWIDTH     12                   /* maximum code width, in bits */
#define MAXTABENTRIES    (1<<MAXCODEWIDTH)    /* max # of table entries */
#define CLEARCODE        256
#define EOICODE          257
#define DBMSG(p)         (printf p )
#define SUCCESS          (HSI_ERROR_CODE)0
#define CHARBITS    8    /* bit depth; */




typedef struct {
    /* initialized at open time: */
    LPSTR         lpTable;        /* the table */
    LPSTR         lpOutStripBuf;  /* where we'll write the compressed output */
    LPSTR         lp16Buf;        /* for storing 16-bit LZW codes temporarily */
    WORD        OutStripBufSize;
} LZWSTRUCT;

typedef LZWSTRUCT *PLZWSTRUCT;
typedef LZWSTRUCT _far *LPLZWSTRUCT;

/* Ternary tree node structure.
 *
 * The "pointers" are simply TREENODE array indices.
 *
 * Here's how we use it.  Suppose we've got 7-bit ASCII values to compress.
 * To see if the string "BCA" is in the table, we perform the following
 * tests:
 *        We know "B" is in the table, because the table is initialized with
 *         with all the 1-character strings.  In our 7-bit case, we'll have an
 *         array of 128 tree nodes, and we'll start our search at the Bth
 *         element of the array.  The Left and Right pointers are NULL at
 *         this top level.
 *        To get to the "C", we follow the NextSuffix pointer.  If that
 *         tree node contains "C", we follow its NextSuffix pointer, since
 *         we still need another character.  If not, we follow the Left or
 *         Right pointer to try to find the "C," using the standard binary
 *         tree search algorithm.  Assuming we find it, we follow its
 *         NextSuffix pointer.
 *        So we've followed a NextSuffix pointer to a tree node that we
 *         hope contains an "A".  If not, we go down Left or Right pointers
 *         until we've either found it or failed in the search.  If we find
 *         it, we'll start searching for the string "BCAX".  Otherwise,
 *         we'll add it to the tree at the appropriate position.
 *
 * Actually, in our application, we're always going to be searching only
 * one binary search tree at a time, since we're always adding a character
 * to our current string and seeing if the result is in the table.
 *
 * So what we've got here is a whole bunch of binary search trees,
 * pointed to by NextSuffix pointers.
 */
typedef struct {
    BYTE    Suffix;        /* character to be added to the current string */
    BYTE    Pad;
    WORD    NextSuffix;    /* pointer to NextSuffix tree */
    WORD    Left;        /* pointer to left son in ThisSuffix binary sort tree */
    WORD    Right;        /* pointer to right son in ThisSuffix binary sort tree */
} TREENODE;

typedef TREENODE FAR * LPTREENODE;

HSI_ERROR_CODE     ClearTab (LPTREENODE lpTab);

HSI_ERROR_CODE     
LzwShrinkCodes (
                   PLZWSTRUCT pLzw,     
                   DWORD    dwNumCodes,     // number of 16-bit codes in hCodeStrip 
                   DWORD    *pdwOutByteCnt);// number of bytes written into hCmStrip 

HSI_ERROR_CODE     
Lzw16          (
                   LZWSTRUCT    *pLzw,         // the control structure 
                   LPBYTE       lpIn,          // the input values 
                   DWORD        dwInCount,     // number of bytes to compress 
                   DWORD        *pdwNumCodes );// OUT: number of 16-bit codes generated by this routine 

HSI_ERROR_CODE 
LzwCmStrip     (PLZWSTRUCT,DWORD,LPBYTE,DWORD *);
HSI_ERROR_CODE LzwCmOpen   (PLZWSTRUCT *,DWORD);
void           LzwCmClose  (PLZWSTRUCT);

