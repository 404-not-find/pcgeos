COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		GrObj
FILE:		grobjMacro.def

AUTHOR:		Steve Scholl, November 15, 1989

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ss      11/15/89        Initial revision.


DESCRIPTION:
	Macro definitions for this module.
		
	$Id: grobjMacro.def,v 1.1 97/04/04 18:07:45 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GrObjApplySpriteAttrs	macro
	push	ax,bx,dx
	clr	dx, ax
	call	GrSetLineWidth
	mov	al, SPRITE_MODE
	call	GrSetMixMode
	mov	al, SPRITE_MASK
	call	GrSetLineMask				
	mov	al,LE_BUTTCAP
	call	GrSetLineEnd
	mov	al,LJ_BEVELED
	call	GrSetLineJoin
	mov	al, SPRITE_STYLE
	clr	bl
	call	GrSetLineStyle
	pop	ax,bx,dx

endm

GrObjApplySimpleSpriteAttrs	macro
	push	ax,bx,dx
	clr	dx, ax
	call	GrSetLineWidth
	mov	al, SIMPLE_SPRITE_MODE
	call	GrSetMixMode
	mov	al, SIMPLE_SPRITE_MASK
	call	GrSetLineMask				
	mov	al,LE_BUTTCAP
	call	GrSetLineEnd
	mov	al,LJ_BEVELED
	call	GrSetLineJoin
	mov	al, SIMPLE_SPRITE_STYLE
	clr	bl
	call	GrSetLineStyle
	pop	ax,bx,dx

endm

addpdf	macro	dest, source, trashreg
	adddwf	dest.PDF_x, source.PDF_x, trashreg
	adddwf	dest.PDF_y, source.PDF_y, trashreg
endm

subpdf	macro	dest, source, trashreg
	subdwf	dest.PDF_x, source.PDF_x, trashreg
	subdwf	dest.PDF_y, source.PDF_y, trashreg
endm

movpdf	macro	dest, source, trashreg
	movdwf	dest.PDF_x, source.PDF_x, trashreg
	movdwf	dest.PDF_y, source.PDF_y, trashreg
endm

if 0
movpdf	macro	destpdf, sourcepdf, trashreg
	destSeg		substr <destpdf>, 1, 2
	sourceSeg	substr <sourcepdf>, 1, 2

	ifdif	<trashreg>, <cx>
		ifdif	<trashreg>, <ax>
			push	cx
		else
			mov_tr	ax, cx
		endif
	endif

	ifdif	<sourceSeg>,<ds>
		push	ds
		segmov	ds, sourceSeg
	endif

	ifdif	<destSeg>,<es>
		push	es
		segmov	es, sourceSeg
	endif

	push	si, di

	;
	;	We have to make sure that the second lea doesn't
	;	depend on the register loaded in the first lea.
	;
siPos	instr	<&destpdf>, <si>		;siPos checks for si in dest
diPos	instr	<&sourcepdf>, <si>		;diPos checks for di in source

	if (siPos eq 0)				;if si not in dest, we're ok
		lea	si, sourcepdf
		lea	di, destpdf
	else
		if (diPos eq 0)			;if di not in source, switch
			lea	di, destpdf
			lea	si, sourcepdf
		else
			lea	cx, sourcepdf	;both lea's depend on the other
			lea	di, destpdf	;so store the first one in cx
			mov	si, cx		;and load si properly here
		endif
	endif

	mov	cx, size PointDWFixed / 2
	rep	movsw
	pop	si, di

	ifdif	<destSeg>,<es>
		pop	es
	endif

	ifdif	<sourceSeg>,<ds>
		pop	ds
	endif

	ifdif	<trashreg>, <cx>
		ifdif	<trashreg>, <ax>
			pop	cx
		else
			mov_tr	cx, ax
		endif
	endif
endm

endif

GrObjGetBodyOD	macro

	movdw	bxsi, ds:[OLMBH_output]
EC <	call	ECGrObjBodyCheckLMemOD			>

endm

GrObjDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].GrObj_offset
endm

GOAMDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjAttributeManagerCheckLMemObject		>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].GrObjAttributeManager_offset
endm

RectDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Rect_offset
endm

EllipseDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Ellipse_offset
endm

LineDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Line_offset
endm

ArcDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Arc_offset
endm

GroupDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Group_offset
endm

GrObjVisGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].GrObjVisGuardian_offset
endm

BitmapGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].BitmapGuardian_offset
endm

TextGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].TextGuardian_offset
endm

MultTextGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].MultTextGuardian_offset
endm

EditTextGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].EditTextGuardian_offset
endm

SplineGuardianDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].SplineGuardian_offset
endm

RoundedRectDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].RoundedRect_offset
endm

PointerDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].Pointer_offset
endm

RotatePointerDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].RotatePointer_offset
endm

BitmapPointerDeref	macro	destOffset, sourceSeg, sourceChunk
EC <	push	ds, si						>
ifdif	<sourceSeg>,<ds>
EC <	segmov	ds, sourceSeg					>
endif
ifdif	<sourceChunk>,<si>
EC <	mov	si, sourceChunk					>
endif
EC <	call	ECGrObjCheckLMemObject				>
EC <	pop	ds, si						>
	mov	destOffset,sourceSeg:[sourceChunk]
	add	destOffset,sourceSeg:[destOffset].BitmapPointer_offset
endm




CheckEvenSize	macro	structname
CheckHack <(size structname AND 1) eq 0>
endm

unclr	macro	location
	mov	location, sp
endm

ClearZeroFlagPreserveCarry	macro trashreg
ifb	<trashReg>
	push	ax
	mov	ax, 0
	inc	ax
	pop	ax
else
	mov	trashreg, 0
	inc	trashreg
endif
endm

movnf	macro	reg, constant
if (constant ne 0)
	mov	reg, constant
else
	clr	reg
endif
endm

addnf	macro	reg, constant
if (constant ne 0)
   if (constant eq 1)
	inc	reg
   else
	add	reg, constant
   endif
endif
endm

subnf	macro	reg, constant
if (constant ne 0)
   if (constant eq 1)
	dec	reg
   else
	sub	reg, constant
   endif
endif
endm

MoveConstantNumBytes	macro	numBytes, trashReg

ifb	<trashReg>
	push	cx
else
	ifdif	<trashReg>,<cx>
		mov_tr	trashReg,cx
	endif
endif

	mov	cx,numBytes/2
if ((numBytes and 1) ne 0)
	movsb
endif
	rep	movsw

ifb	<trashReg>
	pop	cx
else
	ifdif	<trashReg>,<cx>
		mov	cx,trashReg
	endif
endif
endm


MoveBytes	macro	numBytes, trashReg
local	moveWords

;    Protect cx, using trashReg if it is not cx
;

ifb	<trashReg>
	push	cx
else
	ifdif <trashReg>,<cx>
		mov	trashReg,cx
	endif
endif

;    Copy as words with check for odd number of bytes
;

ifdif	<numBytes>,<cx>
	mov	cx,numBytes
endif
	shr	cx,1
	jnc	moveWords
	movsb
moveWords:
	rep	movsw

;    Recover cx if it was saved
;

ifb	<trashReg>
	pop	cx
else
	ifdif <trashReg>,<cx>
		mov	cx,trashReg
	endif
endif
endm


StoreConstantNumBytes	macro	numBytes, trashReg

ifb	<trashReg>
	push	cx
else
	ifdif	<trashReg>,<cx>
		mov_tr	trashReg,cx
	endif
endif

	mov	cx,numBytes/2
if ((numBytes and 1) ne 0)
	stosb
endif
	rep	stosw

ifb	<trashReg>
	pop	cx
else
	ifdif	<trashReg>,<cx>
		mov	cx,trashReg
	endif
endif
endm

CallModAXBX	macro routine
	push	ax,bx
	CallMod	routine
	pop	ax,bx
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Neg32
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Negate a 32-bit integer

ARGUMENTS:	low, high - low, high words of number

RETURN:		low, high - low, high words of result

DESTROYED:	nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	03/89		Initial version
	Adam	8/89		Changed to use neg and cmc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NegWWFixed	macro	int,frac
	neg	frac		;; negate frac, leaving CF in opposite state
	not	int		;;  from that desired ('not' doesn't change CF)
	cmc			;; Get CF to proper state (1 if frac was 0)
	adc	int, 0		;; Ripple carry to high to complete operation
endm



NegDWFixed	macro	intH,intL,frac
	NegWWFixed	intL,frac
	not	intH
	adc	intH,0
endm

NegDWFixedPtr	macro	ptr
	neg	ptr.DWF_frac
	not	ptr.DWF_int.low
	cmc	
	adc	ptr.DWF_int.low,0
	not	ptr.DWF_int.high
	adc	ptr.DWF_int.high,0
endm


;Round a WWFixed so that the low byte of the frac is zero
;

RoundWWFtoWBF	macro	int,frac
local	R_10
ifdif	<frac>,<ax>
	push	ax
	mov	ax,frac
endif
	tst	al
	jns	R_10
	add	ah,1
	adc	int,0
R_10:
	clr	al
ifdif	<frac>,<ax>
	mov	frac,ax
	pop	ax
endif
endm

RoundDWFtoDWBF	macro	intH,intL,frac
local	R_10
ifdif	<frac>,<ax>
	push	ax
	mov	ax,frac
endif
	tst	al
	jns	R_10
	add	ah,1
	adc	intL,0
	adc	intH,0
R_10:
	clr	al
ifdif	<frac>,<ax>
	mov	frac,ax
	pop	ax
endif
endm


			;Rounds 32 bit fixed point
			;x.5 is rounded towards positive infinity
RoundWWFixed	macro	int,frac
local	R_10
	tst	frac
	jns	R_10		;jmp if high bit off
	inc	int
R_10:
endm


RoundDWFixed	macro	intH,intL,frac
local	R_10
	tst	frac
	jns	R_10
	add	intL,1
	adc	intH,0
R_10:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is less than or equal to WWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jleWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	jl	label
	jg	end
	cmp	frac1,frac2
	jbe	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is greater than or equal to WWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jgeWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	jg	label
	jl	end
	cmp	frac1,frac2
	jae	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is less than WWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jlWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	jl	label
	jg	end
	cmp	frac1,frac2
	jb	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is less than WWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jlWWFPtr	macro	int,frac,ptr,label
local	end
	cmp	int,ptr.WWF_int
	jl	label
	jg	end
	cmp	frac,ptr.WWF_frac
	jb	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is below  WWFixed2. An unsigned comparison is
; done, but remember the frac portion is always unsigned.

jbWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	jb	label
	ja	end
	cmp	frac1,frac2
	jbe	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is above  WWFixed2. An unsigned comparison is
; done, but remember the frac portion is always unsigned.

jaWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	ja	label
	jb	end
	cmp	frac1,frac2
	ja	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is greater than  WWFixed2. An signed comparison is
; done, but remember the frac portion is always unsigned.

jgWWF	macro	int1,frac1,int2,frac2,label
local	end
	cmp	int1,int2
	jg	label
	jl	end
	cmp	frac1,frac2
	ja	label
end:
endm

; Compares the WWFixed1 to the WWFixed2 value and jumps to the label
; if WWFixed1 is greater than WWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jgWWFPtr	macro	int,frac,ptr,label
local	end
	cmp	int,ptr.WWF_int
	jg	label
	jl	end
	cmp	frac,ptr.WWF_frac
	ja	label
end:
endm


; Compares the DWord1 to the DWord2 value and jumps to the label
; if DWord1 is greater than  DWord2. An signed comparison is
; done, but remember the low portion is always unsigned.

jgDW	macro	high1,low1,high2,low2,label
	jgWWF	high1,low1,high2,low2,label
endm

; Compares the DWord1 to the DWord2 value and jumps to the label
; if DWord1 is greater than  or equal to DWord2. An signed comparison is
; done, but remember the low portion is always unsigned.

jgeDW	macro	high1,low1,high2,low2,label
	jgeWWF	high1,low1,high2,low2,label
endm

; Compares the DWord1 to the DWord2 value and jumps to the label
; if DWord1 is less than  DWord2. An signed comparison is
; done, but remember the low portion is always unsigned.

jlDW	macro	high1,low1,high2,low2,label
	jlWWF	high1,low1,high2,low2,label
endm

;***************************************************************************
;
;   			 DWFixed Macros
;
;***************************************************************************


; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is greater than DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jgDWF	macro	int1H,int1L,frac1,int2H,int2L,frac2,label
local	end
	cmp	int1H,int2H
	jg	label
	jl	end
	cmp	int1L,int2L
	ja	label
	jb	end
	cmp	frac1,frac2
	ja	label
end:
endm

; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is greater than DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jgDWFPtr	macro	int1H,int1L,frac1,ptr,label
local	end
	cmp	int1H,ptr.DWF_int.high
	jg	label
	jl	end
	cmp	int1L,ptr.DWF_int.low
	ja	label
	jb	end
	cmp	frac1,ptr.DWF_frac
	ja	label
end:
endm

; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is less than DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jlDWF	macro	int1H,int1L,frac1,int2H,int2L,frac2,label
local	end
	cmp	int1H,int2H
	jl	label
	jg	end
	cmp	int1L,int2L
	jb	label
	ja	end
	cmp	frac1,frac2
	jb	label
end:
endm

; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is less than DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jlDWFPtr	macro	int1H,int1L,frac1,ptr,label
local	end
	cmp	int1H,ptr.DWF_int.high
	jl	label
	jg	end
	cmp	int1L,ptr.DWF_int.low
	jb	label
	ja	end
	cmp	frac1,ptr.DWF_frac
	jb	label
end:
endm

; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is less than or equal to DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jleDWF	macro	int1H,int1L,frac1,int2H,int2L,frac2,label
local	end
	cmp	int1H,int2H
	jl	label
	jg	end
	cmp	int1L,int2L
	jb	label
	ja	end
	cmp	frac1,frac2
	jbe	label
end:
endm


; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is greater than or equal to DWFixed2. A signed comparison is
; done, but remember the frac portion is always unsigned.

jgeDWF	macro	int1H,int1L,frac1,int2H,int2L,frac2,label
local	end
	cmp	int1H,int2H
	jg	label
	jl	end
	cmp	int1L,int2L
	ja	label
	jb	end
	cmp	frac1,frac2
	jae	label
end:
endm

; Compares the DWFixed1 to the DWFixed2 value and jumps to the label
; if DWFixed1 is above or equal to DWFixed2. An unsigned comparison is
; done

jaeDWF	macro	int1H,int1L,frac1,int2H,int2L,frac2,label
local	end
	cmp	int1H,int2H
	ja	label
	jb	end
	cmp	int1L,int2L
	ja	label
	jb	end
	cmp	frac1,frac2
	jae	label
end:
endm

ShrDWF	macro	intH,intL,frac
	sar	intH,1
	rcr	intL,1
	rcr	frac,1
endm

ShlDWF	macro	intH,intL,frac
	shl	frac,1
	rcl	intL,1
	rcl	intH,1
endm

ShlDWFPTR	macro	ptr
	shl	ptr.DWF_frac,1
	rcl	ptr.DWF_int.low,1
	rcl	ptr.DWF_int.high,1
endm

SubDWF	macro	arg1, arg2, arg3, arg4, arg5, arg6, arg7
ifnb <arg7>
	ErrMessage	"Too many arguments passed to SubDWF macro (geez!)"

else
	ifnb <arg6>
		SubDWFRegReg	arg1, arg2, arg3, arg4, arg5, arg6

	else
		ifb <arg4>
			SubDWFPtrPtr	arg1, arg2, arg3

		else
			if (.TYPE (arg1)) AND 10h		;0 if non-reg
				SubDWFRegPtr	arg1, arg2, arg3, arg4

			else
				SubDWFPtrReg	arg1, arg2, arg3, arg4
			endif
		endif
	endif
endif
endm

SubDWFRegReg  macro destIntH,destIntL,destFrac,sourceIntH,sourceIntL,sourceFrac
	sub	destFrac,sourceFrac
	sbb	destIntL,sourceIntL
	sbb	destIntH,sourceIntH
endm

SubDWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.DWF_frac
	sub	destp.DWF_frac, trashreg
	mov	trashreg, sourcep.DWF_int.low
	sbb	destp.DWF_int.low, trashreg
	mov	trashreg, sourcep.DWF_int.high
	sbb	destp.DWF_int.high, trashreg
else
	push	ax
	SubDWFPtrPtr	destp, sourcep, ax
	pop	ax
endif
endm

SubDWFRegPtr	macro	destIntH, destIntL, destFrac, sourcep
	sub	destFrac, sourcep.DWF_frac
	sbb	destIntL, sourcep.DWF_int.low
	sbb	destIntH, sourcep.DWF_int.high
endm

SubDWFPtrReg	macro	destp, sourceIntH, sourceIntL, sourceFrac
	sub	destp.DWF_frac, sourceFrac
	sbb	destp.DWF_int.low, sourceIntL
	sbb	destp.DWF_int.high, sourceIntH
endm

AddDWF	macro	arg1, arg2, arg3, arg4, arg5, arg6, arg7
ifnb <arg7>
	ErrMessage	"Too many arguments passed to AddDWF macro (geez!)"

else
	ifnb <arg6>
		AddDWFRegReg	arg1, arg2, arg3, arg4, arg5, arg6

	else
		ifb <arg4>
			AddDWFPtrPtr	arg1, arg2, arg3

		else
			if (.TYPE (arg1)) AND 10h		;0 if non-reg
				AddDWFRegPtr	arg1, arg2, arg3, arg4

			else
				AddDWFPtrReg	arg1, arg2, arg3, arg4
			endif
		endif
	endif
endif
endm

AddDWFRegReg  macro destIntH,destIntL,destFrac,sourceIntH,sourceIntL,sourceFrac
	add	destFrac,sourceFrac
	adc	destIntL,sourceIntL
	adc	destIntH,sourceIntH
endm

AddDWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.DWF_frac
	add	destp.DWF_frac, trashreg
	mov	trashreg, sourcep.DWF_int.low
	adc	destp.DWF_int.low, trashreg
	mov	trashreg, sourcep.DWF_int.high
	adc	destp.DWF_int.high, trashreg
else
	push	ax
	AddDWFPtrPtr	destp, sourcep, ax
	pop	ax
endif
endm

AddDWFRegPtr	macro	destIntH, destIntL, destFrac, sourcep
	add	destFrac, sourcep.DWF_frac
	adc	destIntL, sourcep.DWF_int.low
	adc	destIntH, sourcep.DWF_int.high
endm

AddDWFPtrReg	macro	destp, sourceIntH, sourceIntL, sourceFrac
	add	destp.DWF_frac, sourceFrac
	adc	destp.DWF_int.low, sourceIntL
	adc	destp.DWF_int.high, sourceIntH
endm

MovDWF	macro	arg1, arg2, arg3, arg4, arg5, arg6, arg7
ifnb <arg7>
	ErrMessage	"Too many arguments passed to MovDWF macro (geez!)"

else
	ifnb <arg6>
		MovDWFRegReg	arg1, arg2, arg3, arg4, arg5, arg6

	else
		ifb <arg4>
			MovDWFPtrPtr	arg1, arg2, arg3

		else
			if (.TYPE (arg1)) AND 10h		;0 if non-reg
				MovDWFRegPtr	arg1, arg2, arg3, arg4

			else
				MovDWFPtrReg	arg1, arg2, arg3, arg4
			endif
		endif
	endif
endif
endm

MovDWFRegReg  macro destIntH,destIntL,destFrac,sourceIntH,sourceIntL,sourceFrac
	mov	destFrac,sourceFrac
	mov	destIntL,sourceIntL
	mov	destIntH,sourceIntH
endm

MovDWFRegPtr	macro 	destIntH,destIntL,destFrac,sourcePtr
	mov	destFrac,sourcePtr.DWF_frac
	mov	destIntL,sourcePtr.DWF_int.low
	mov	destIntH,sourcePtr.DWF_int.high
endm

MovDWFPtrReg	macro	destPtr,sourceIntH,sourceIntL,sourceFrac
	mov	destPtr.DWF_frac,sourceFrac
	mov	destPtr.DWF_int.low,sourceIntL
	mov	destPtr.DWF_int.high,sourceIntH
endm

MovDWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.DWF_frac
	mov	destp.DWF_frac, trashreg
	mov	trashreg, sourcep.DWF_int.low
	mov	destp.DWF_int.low, trashreg
	mov	trashreg, sourcep.DWF_int.high
	mov	destp.DWF_int.high, trashreg
else
	push	ax
	MovDWFPtrPtr	destp, sourcep, ax
	pop	ax
endif
endm

;***************************************************************************
;
;   			 WWFixed Macros
;
;***************************************************************************


SubWWF	macro	arg1, arg2, arg3, arg4, arg5
ifnb <arg5>
	ErrMessage	"Too many arguments passed to SubWWF macro (geez!)"

else
	ifnb <arg4>
		SubWWFRegReg	arg1, arg2, arg3, arg4

	else
		if (.TYPE (arg1)) AND 10h		;0 if non-reg

			SubWWFRegPtr	arg1, arg2, arg3

		elseif (.TYPE (arg2)) AND 10h		;0 if non-reg

			SubWWFPtrReg	arg1, arg2, arg3

		else

			SubWWFPtrPtr	arg1, arg2, arg3

		endif
	endif
endif
endm

SubWWFRegReg  macro destInt,destFrac,sourceInt,sourceFrac
	sub	destFrac,sourceFrac
	sbb	destInt,sourceInt
endm

SubWWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.WWF_frac
	sub	destp.WWF_frac, trashreg
	mov	trashreg, sourcep.WWF_int
	sbb	destp.WWF_int, trashreg
else
	push	ax
	SubWWFPtrPtr	destp, sourcep, ax
	pop	ax
endif
endm

SubWWFRegPtr	macro	destInt, destFrac, sourcep
	sub	destFrac, sourcep.WWF_frac
	sbb	destInt, sourcep.WWF_int
endm

SubWWFPtrReg	macro	destp, sourceInt, sourceFrac
	sub	destp.WWF_frac, sourceFrac
	sbb	destp.WWF_int, sourceInt
endm

AddWWF	macro	arg1, arg2, arg3, arg4, arg5,
ifnb <arg5>
	ErrMessage	"Too many arguments passed to AddWWF macro (geez!)"

else
	ifnb <arg4>
		AddWWFRegReg	arg1, arg2, arg3, arg4

	else
		if (.TYPE (arg1)) AND 10h		;0 if non-reg

			AddWWFRegPtr	arg1, arg2, arg3

		elseif (.TYPE (arg2)) AND 10h		;0 if non-reg

			AddWWFPtrReg	arg1, arg2, arg3

		else

			AddWWFPtrPtr	arg1, arg2, arg3

		endif
	endif
endif
endm

AddWWFRegReg  macro destInt,destFrac,sourceInt,sourceFrac
	add	destFrac,sourceFrac
	adc	destInt,sourceInt
endm

AddWWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.WWF_frac
	add	destp.WWF_frac, trashreg
	mov	trashreg, sourcep.WWF_int
	adc	destp.WWF_int, trashreg
else
	push	ax
	AddWWFPtrPtr	destp, sourcep, ax
	pop	ax
endif
endm

AddWWFRegPtr	macro	destInt, destFrac, sourcep
	add	destFrac, sourcep.WWF_frac
	adc	destInt, sourcep.WWF_int
endm

AddWWFPtrReg	macro	destp, sourceInt, sourceFrac
	add	destp.WWF_frac, sourceFrac
	adc	destp.WWF_int, sourceInt
endm

MovWWF	macro	arg1, arg2, arg3, arg4, arg5, arg6, arg7
ifnb <arg5>
	ErrMessage	"Too many arguments passed to MovWWF macro (geez!)"

else
	ifnb <arg4>
		MovWWFRegReg	arg1, arg2, arg3, arg4

	else
		if (.TYPE (arg1)) AND 10h		;0 if non-reg

			MovWWFRegPtr	arg1, arg2, arg3

		elseif (.TYPE (arg2)) AND 10h		;0 if non-reg

			MovWWFPtrReg	arg1, arg2, arg3

		else

			MovWWFPtrPtr	arg1, arg2, arg3

		endif
	endif
endif
endm

MovWWFRegReg  macro destInt,destFrac,sourceInt,sourceFrac
	mov	destFrac,sourceFrac
	mov	destIntL,sourceInt
endm

MovWWFRegPtr	macro 	destInt,destFrac,sourcePtr
	mov	destFrac,sourcePtr.WWF_frac
	mov	destInt,sourcePtr.WWF_int
endm

MovWWFPtrReg	macro	destPtr,sourceInt,sourceFrac
	mov	destPtr.WWF_frac,sourceFrac
	mov	destPtr.WWF_int,sourceInt
endm

MovWWFPtrPtr	macro	destp, sourcep, trashreg
ifnb <trashreg>
	mov	trashreg, sourcep.WWF_frac
	mov	destp.WWF_frac, trashreg
	mov	trashreg, sourcep.WWF_int
	mov	destp.WWF_int, trashreg
else
	push	ax
	MovWWFPtrPtr	destp, sourcep, axn
	pop	ax
endif
endm

;Shift the wwfixed value left the number of shifts in 
;INCREASE_RESOLUTION_SHIFT. Works up to a max of 4

IncreaseResolutionShift	macro	int,frac
	rept	INCREASE_RESOLUTION_SHIFT
	shl	frac
	rcl	int
	endm
endm

; expects cx,dx has 16 bit mouse position info and creates PointDWFixed 
; stack frame
; trashReg should not be cx,dx,bp

ConvertMouseEventToStackFrame	macro trashReg
	push	bp
	mov	trashReg,bp				;ButtonInfo, UIFA
	sub	sp,size PointDWFixed
	mov	bp,sp
	mov	ss:[bp].PDF_x.DWF_int.low,cx	
	mov	ss:[bp].PDF_y.DWF_int.low,dx
	clr	dx
	mov	ss:[bp].PDF_x.DWF_int.high,dx
	mov	ss:[bp].PDF_y.DWF_int.high,dx
	mov	ss:[bp].PDF_x.DWF_frac,dx
	mov	ss:[bp].PDF_y.DWF_frac,dx
	mov	dx,trashReg
endm

	
CleanMouseStackFrame	macro
	add	sp,size PointDWFixed
	pop	bp
endm





	;    Convert passed point to WWFixed DOCUMENT OFFSET RELATIVE.
	;    Check for either x or y value being way out of range
	;    Put results in dx:cx and bx:ax
	;    WARNING, the jump to badLabel leaves a word on the stack

ConvertPointDWFToDOR	macro	ptSeg,ptOffset,docSeg,docOffset,badLabel
local	checkWidth,doHeight,checkHeight,done

	mov	ax,ptSeg:[ptOffset].PDF_x.DWF_int.high
	mov	dx,ptSeg:[ptOffset].PDF_x.DWF_int.low
	mov	cx,ptSeg:[ptOffset].PDF_x.DWF_frac
	sub	dx,docSeg:[docOffset].PD_x.low
	sbb	ax,docSeg:[docOffset].PD_x.high
	pushf
	jns	checkWidth
	NegDWFixed	ax,dx,cx
checkWidth:

	jgDWF ax,dx,cx,(MAX_DISTANCE_FROM_DOC_OFFSET shr 16),\
			MAX_DISTANCE_FROM_DOC_OFFSET,0,badLabel

	popf
	jns	doHeight
	NegWWFixed	dx,cx

doHeight:
	push	dx					;x.int of DOR

	mov	dx,ptSeg:[ptOffset].PDF_x.DWF_int.high
	mov	bx,ptSeg:[ptOffset].PDF_x.DWF_int.low
	mov	ax,ptSeg:[ptOffset].PDF_x.DWF_frac
	sub	bx,docSeg:[docOffset].PD_x.low
	sbb	dx,docSeg:[docOffset].PD_x.high
	pushf
	jns	checkHeight
	NegDWFixed	dx,bx,ax
checkHeigt:

	jgDWF dx,bx,ax,(MAX_DISTANCE_FROM_DOC_OFFSET shr 16),\
			MAX_DISTANCE_FROM_DOC_OFFSET,0,badLabel

	popf
	pop	dx					;x.int of DOR
	jns	done
	NegWWFixed	bx,ax

done:

endm




AccessNormalTransformChunk	macro	destOffset,sourceSeg,sourceChunk
	GrObjDeref	destOffset,sourceSeg,sourceChunk
	mov	destOffset,sourceSeg:[destOffset].GOI_normalTransform
EC <	tst	destOffset				>
EC <	ERROR_Z	NORMAL_TRANSFORM_DOESNT_EXIST		>
	mov	destOffset,sourceSeg:[destOffset]
endm

AccessSpriteTransformChunk	macro	destOffset,sourceSeg,sourceChunk
	GrObjDeref	destOffset,sourceSeg,sourceChunk
	mov	destOffset,sourceSeg:[destOffset].GOI_spriteTransform
EC <	tst	destOffset				>
EC <	ERROR_Z	SPRITE_TRANSFORM_DOESNT_EXIST		>
	mov	destOffset,sourceSeg:[destOffset]
endm


