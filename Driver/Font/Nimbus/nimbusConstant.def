COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Font Driver
FILE:		nimbusConstant.def

AUTHOR:		Gene Anderson

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Gene	11/3/89		Initial revision

DESCRIPTION:
	Definitions, constants, etc needed for the PC/GEOS Nimbus font driver

	$Id: nimbusConstant.def,v 1.1 97/04/18 11:45:25 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;----------------------------------------------------------------------------
;	Font Style Factors
;----------------------------------------------------------------------------

SCRIPT_FACTOR_INT	=	0
SCRIPT_FACTOR_FRAC	=	0x8000		;superscript,subscript = 1/2

SUBSCRIPT_OFFSET_INT	=	0
SUBSCRIPT_OFFSET_FRAC	=	0x1a00		;offset below

SUPERSCRIPT_OFFSET_INT	=	0
SUPERSCRIPT_OFFSET_FRAC	=	0x6000		;offset above

BOLD_FACTOR_INT		=	0x0001
BOLD_FACTOR_FRAC	=	0x2000		;bold = 1.10

ITALIC_FACTOR_INT	=	0
ITALIC_FACTOR_FRAC	=	0x366A		;italic = tan(12)
NEG_ITALIC_FACTOR_INT	=	0xffff
NEG_ITALIC_FACTOR_FRAC	=	0xC996		;italic = -tan(12)

;
; Styles that affect the width of the character:
;
WIDTH_STYLES	= mask TS_SUPERSCRIPT or \
		  mask TS_SUBSCRIPT or \
		  mask TS_BOLD
;
; Styles that affect the transformation matrix used:
;
TRANSFORM_STYLES = mask TS_SUPERSCRIPT or \
		   mask TS_SUBSCRIPT or \
		   mask TS_ITALIC or \
		   mask TS_BOLD

;----------------------------------------------------------------------------
;	Miscellaneous constants
;----------------------------------------------------------------------------

DEFAULT_CHAR	= '.'
NIMBUS_CHAR_MIDPOINT = 0x80			;halfway point in the data
;
; These sizes are in pixels, not points, since that's what
; really matters for these cutoff points.
;
; Continuity checking is not done above:
;
MAX_CONTINUITY_SIZE	=	30
;
; Characters are stored as regions instead of bitmaps above:
;
MAX_BITMAP_SIZE		=	125
SCRIPT_SAFETY_SIZE	=	10
;
; The Nimbus code is not accurate above:
;
MAX_NIMBUS_SIZE		=	490

;----------------------------------------------------------------------------
;	Region constants
;----------------------------------------------------------------------------

UNUSED_PER_LINE =	4			;# of unused points / line

;----------------------------------------------------------------------------
;	Font Errors
;----------------------------------------------------------------------------

if	ERROR_CHECK

FONT_BAD_CHAR_FLAG					enum FatalErrors
; Characters in fonts are marked as either missing or not built.  Font
; drivers should only be called for characters that are not built, and
; should not be called for a character that is already built.
; This may indicate either a bug in the video driver, or a memory-trashing
; bug some where in the system that has trashed a font block.

FONT_BAD_ROUTINE					enum FatalErrors
; A bad function passed to the Nimbus driver.  The function passed in
; di must be in the FontFunction enumerated type.

FONT_CHAR_TOO_BIG					enum FatalErrors
; The graphics system was passed a pointsize that was too large for the
; Nimbus driver to render.  What pointsize did you pass to GrSetFont()
; or set in your text object?  The maximum pointsize currently supported
; is MAX_POINT_SIZE (792 points).

OVERDOSE						enum FatalErrors
; The Nimbus code has gone off the deep end, and was attempting to
; write outside its bitmap block.

BAD_NIMBUS_COMMAND					enum FatalErrors
; The outline data may be corrupted, as the Nimbus driver was unable to
; parse the data.  May indicate a bad font or memory trashing.

NIMBUS_PASSED_NON_EXISTENT_FONT				enum FatalErrors
; The Nimbus driver has been called with a font that does not exist.
; This may indicate a bug in the Font Manager or the video driver.

RECURSIVE_CALL_TO_FONT_DRIVER				enum FatalErrors
; The Nimbus driver is non-reentrant, so only one thread can be in the
; driver at a time.  This may indicate a bug in the Font Manager.
 
CANNOT_USE_DOUBLE_BYTE_CHARS_IN_THIS_VERSION		enum FatalErrors
; Font driver functions take 16-bit characters.  Currently, however, only
; the 8-bit PC/GEOS character set is supported.

NIMBUS_GEN_CHAR_IN_REGION_SHOULD_NEVER_BE_CALLED	enum FatalErrors
; This should never happen.  The DR_FONT_GEN_IN_REGION call uses common
; routines and structures to generate region characters.  This may
; indicate that the structures have been incorrectly changed but not
; in all the appropriate places, or there is a memory-trashing bug.

BAD_FONT_HEADER_FOR_KERNING				enum FatalErrors
; The header for the outline font data is invalid.  The size indicated
; by the number of characters does not match the size of the resource,
; which normally indicates that there are kerning pairs for the font.
; However, the extra data was somehow corrupt.  This may indicate
; a bad font file or memory trashing.

NIMBUS_CALLED_WITH_NON_NIMBUS_FONT			enum FatalErrors
; The Nimbus driver was called with a non-Nimbus font or with a bad font
; block.

NIMBUS_VARS_UNINITIALIZED				enum FatalErrors
; A necessary variable for the Nimbus driver was not initialized on entry
; to the driver.

NIMBUS_NOT_PASSED_INFO_BLOCK				enum FatalErrors
; The Nimbus driver was not passed the font info block segment as required.

endif

;----------------------------------------------------------------------------
; constants for Nimbus font driver
;----------------------------------------------------------------------------

NIMBUS_TAG_V2		equ	1314310		;Nimbus font ID tag, version 2
NIMBUS_TAG_V3		equ	18091526	;Nimbus font ID tag, version 3
NIMBUS_BLOCK_SIZE	equ	1024		;initial block size
NIMBUS_GRID_SIZE	equ	1000		;grid size
NIMBUS_FIRST_CHAR	equ	' '		;first char in fonts
NIMBUS_FRAC_FACTOR	equ	32768		;implied fraction used

NimbusCommands etype byte
NIMBUS_MOVE	enum NimbusCommands		;=0
NIMBUS_LINE	enum NimbusCommands		;=1
NIMBUS_BEZIER	enum NimbusCommands		;=2
NIMBUS_DONE	enum NimbusCommands		;=3
NIMBUS_ILLEGAL	enum NimbusCommands		;=4
NIMBUS_ACCENT	enum NimbusCommands		;=5
NIMBUS_VERT_LINE enum NimbusCommands		;=6
NIMBUS_HORZ_LINE enum NimbusCommands		;=7
NIMBUS_REL_LINE	 enum NimbusCommands		;=8
NIMBUS_REL_CURVE enum NimbusCommands		;=9

; Pixel positions have 4 bits of fraction:
;
ONE_HALF	=	0x8
ONE		=	0x10
TWO		=	0x20
FRACTION	=	0xf

;----------------------------------------------------------------------------
; structure of Nimbus bitmaps
;----------------------------------------------------------------------------

NimbusBitmap struct
    NB_lox		sword	(?)	;left extent of image
    NB_hiy		sword	(?)	;top extent of image
    NB_width		sword	(?)	;width of image (in bits)
    NB_height		sword	(?)	;height of image (in bits)
    NB_bytesperline	sword	(?)	;each row padded to bytes per line
    NB_segment		word	(?)	;segment of bitmap block
NimbusBitmap ends

;----------------------------------------------------------------------------
; structure for chararcter data
;----------------------------------------------------------------------------

NimbusData struct
    ND_xmin		sword	(?)	;x min
    ND_ymin		sword	(?)	;y min
    ND_xmax		sword	(?)	;x max
    ND_ymax		sword	(?)	;y max
NimbusData ends

;----------------------------------------------------------------------------
;	miscellaneous Nimbus constants
;----------------------------------------------------------------------------
MAX_COUNT	=	512
MAX_HINTS	=	64
NUM_REFLINES	=	5

;----------------------------------------------------------------------------
;	RegionPathRoutines for building Regions
;----------------------------------------------------------------------------

RegionPathRoutines	etype	word, 0, 4
REGION_CLEAN			enum RegionPathRoutines
REGION_MOVE_PEN			enum RegionPathRoutines
REGION_ADD_LINE_CP		enum RegionPathRoutines
REGION_ADD_BEZIER_CP		enum RegionPathRoutines
REGION_ADD_ON_OFF_POINT		enum RegionPathRoutines

;----------------------------------------------------------------------------
;	structure of ODE_extraData chunk
;----------------------------------------------------------------------------
if DBCS_PCGEOS
NimbusOutlineEntry	struct
	NOE_offset	dword		; offset in file
	NOE_size	word		; size (in bytes)
	NOE_handle	hptr		; handle (if loaded)
NimbusOutlineEntry	ends

;
; NimbusOutlineExtraData is a chunk whose handle sits in ODE_extraData
;
NimbusOutlineExtraData	struct
	NOED_reserved	word			; reserved for future use
	NOED_header	NimbusOutlineEntry	; header
	NOED_part1	NimbusOutlineEntry	; first half
	NOED_part2	NimbusOutlineEntry	; second half
NimbusOutlineExtraData	ends
endif

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Character Data Section
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	The character data section of the file consists of (num_chars)
contiguous character images.  Each character image is an array of
short integers (16 bits) containing setting, feature control and shape
data.

The setting data occupies the first five elements of the array:
	data[0] - set width of the character image (ND_setwidth)
	data[1,2,3,4] - bounding box of image (ND_[x,y][min,max])

The feature control data occupies the next (2+3N+3M) elements:
	data[5] - N, number of "x-triples"
	data[6..6+3N] - x-triples data
	data[6+3N] - M, number of "y-triples"
	data[7+3N..7+3N+3M] - y-triples data

	The shape data begins at data[7+3N+3M] and consists of one or
more segments.  Each segment consists of a short integer (16 bits)
indicating the data type, followed by zero or more short integers of
data (NimbusCommands):

	type	data		interpretation
	----	--------------	--------------
	0	x,y		set current postion (CP) to <x,y>
	1	x,y		draw a line from CP to <x,y>; set CP=<x,y>
	2	x1,y1,x2,y2,x3	draw bezier curve from CP to <x3,y3>; set CP
	3	-none-		end of character
	4	** unused **
	5	c1, x,y, c2	draw char 1, draw char 2 at (+x,+y)
	6	d		vertical line to +d; set CP
	7	d		horizontal line to +d; set CP
	8	x:8,y:8		line to (+x,+y); set CP
	9	x1:8,y1:8, x2:8,y2:8, x3:8,y3:8
				bezier curve to (+x1,+y1)
						(+x1+x2,+y1+y2)
						(+x1+x2+x3,+y1+y2+y3); set CP

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NimbusMoveData	struct
    NMD_x	sword	(?)
    NMD_y	sword	(?)
NimbusMoveData	ends

NimbusLineData	struct
    NLD_x	sword	(?)
    NLD_y	sword	(?)
NimbusLineData	ends

NimbusBezierData	struct
    NBD_x1	sword	(?)
    NBD_y1	sword	(?)
    NBD_x2	sword	(?)
    NBD_y2	sword	(?)
    NBD_x3	sword	(?)
    NBD_y3	sword	(?)
NimbusBezierData	ends

NimbusTuple	struct
    NT_start	sword	(?)
    NT_end	sword	(?)
    NT_width	sword	(?)
NimbusTuple	ends

NimbusAccentData	struct
    NAD_char1	byte	(?)
    NAD_x	sword	(?)
    NAD_y	sword	(?)
    NAD_char2	byte	(?)
NimbusAccentData	ends

NimbusVertData	struct
    NVD_length	sword	(?)
NimbusVertData	ends

NimbusHorizData	struct
    NHD_length	sword	(?)
NimbusHorizData	ends

NimbusRelLineData	struct
    NRLD_y	sbyte	(?)
    NRLD_x	sbyte	(?)
NimbusRelLineData	ends

NimbusRelBezierData	struct
    NRBD_y1	sbyte	(?)
    NRBD_x1	sbyte	(?)
    NRBD_y2	sbyte	(?)
    NRBD_x2	sbyte	(?)
    NRBD_y3	sbyte	(?)
    NRBD_x3	sbyte	(?)
NimbusRelBezierData	ends

;----------------------------------------------------------------------------
; structure of Nimbus font header
;----------------------------------------------------------------------------

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    NFH_fontID		dword	(?)		;font tag = 1314310
    NFH_copyright	char	80 dup(?)	;copyright notice
    NFH_fullname	char	80 dup(?)	;full name of font (URW Sans)
    NFH_fontname	char	80 dup(?)	;name of font	(Sans)
    NFH_family		char	80 dup(?)	;font family	(Serif)
    NFH_weight		char	80 dup(?)	;weight		(Bold)
    NFH_version		char	80 dup(?)	;version	(31 MAR 89)
    NFH_characterSet	char	80 dup(?)	;char set	(Adobe Std)
    NFH_italic		byte	8 dup(?)	;italic angle	(degrees)
    NFH_fixed		word	(?)		;1 if fixed width chars
    NFH_spaceWidth	word	(?)		;width of space	(font units)
    NFH_underPos	word	(?)		;underline pos	(font units)
    NFH_underThick	word	(?)		;underline size	(font units)
    NFH_h_height	word	(?)		;top of "H"	(font units)
    NFH_x_height	word	(?)		;top of "x"	(font units)
    NFH_ascender	word	(?)		;top of "d"	(font units)
    NFH_descender	word	(?)		;bottom of "p"	(font units)
    NFH_numChars	word	(?)		;number of characters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;----------------------------------------------------------------------------
; my version of the Nimbus font header
;----------------------------------------------------------------------------

;
; from Nimbus header:
;
NimbusFontHeader	struct
    NFH_h_height	word	(?)		;top of 'H'
    NFH_x_height	word	(?)		;top of 'x'
    NFH_ascender	word	(?)		;top of 'd'
    NFH_descender	word	(?)		;bottom of 'p'
NimbusFontHeader	end

;
; from nim2pc:
;
NewFontHeader struct
    NFH_nimbus		NimbusFontHeader	;stuff from real Nimbus header
    NFH_avgwidth	word	(?)		;average character width
    NFH_maxwidth	word	(?)		;widest character width
    NFH_height		word	(?)		;height of font box
    NFH_accent		word	(?)		;height of accents
    NFH_ascent		word	(?)		;height of caps
    NFH_descent		word	(?)		;descent (from baseline)
    NFH_baseAdjust	word	(?)		;adjustment for baseline
    NFH_firstChar	char	(?)		;first char defined
    NFH_lastChar	char	(?)		;last char defined
    NFH_defaultChar	char	(?)		;default character
    NFH_underPos	word	(?)		;position of underline
    NFH_underThick	word	(?)		;thickness of underline
    NFH_strikePos	word	(?)		;position of strikethrough
    NFH_numChars	word	(?)		;number of characters
    NFH_minLSB		sword	(?)		;minimum left side bearing
    NFH_minTSB		sword	(?)		;minimum top side bound
    NFH_maxBSB		sword	(?)		;maximum bottom side bound
    NFH_maxRSB		sword	(?)		;maximum right side bound
    NFH_continuitySize	sword	(?)		;continuity cutoff
NewFontHeader ends

NewWidth	struct
    NW_width		word			;width of character
    NW_flags		CharTableFlags		;character data flags
NewWidth	ends

;
; This structure contains values that are used in generating new
; characters from outline data. They are constant for any given
; face, but of no use to anyone except the font driver. They are
; declared separately so that bitmap faces don't waste the space.
; They are stored immediately after the table of widths and
; before the data for the first character.
;

CharGenRouts	struct
    CGR_xor_func	nptr.near		;function to invert bits
    CGR_bit_func	nptr.near		;function to set bits
    CGR_alloc_rout	nptr.near		;routine to alloc bmap/region
    CGR_make_rout	nptr.near		;routine to make a character
    CGR_resize_rout	nptr.near		;routine to resize font
CharGenRouts	ends

;
; Use one of three sets of routines:
;	(1) hinted bitmaps   (<= MAX_BITMAP_SIZE)
;	(2) hinted regions   (<= MAX_NIMBUS_SIZE)
;	(3) unhinted regions (<= MAX_POINT_SIZE)
;
CSR_NIMBUS_BITMAP	equ offset NimbusBitmapRouts
CSR_NIMBUS_REGION	equ offset NimbusRegionRouts
CSR_UNHINTED_REGION	equ offset UnhintedRouts

CharGenData	struct
    CGD_matrix		FontMatrix		;(a,b,c,d)
    CGD_reflines	sword NUM_REFLINES dup (?)
    CGD_x_scl		sword
    CGD_y_scl		sword
    CGD_style		TextStyle		;styles to implement
    CGD_heightX		sword			;baseline height, x component
    CGD_heightY		sword			;  "        "	, y     "
    CGD_scriptX		sword			;offset for subscript, x comp
    CGD_scriptY		sword			;  "          "      , y  "
    CGD_trans_fn	nptr.near		;function to transform points
    CGD_check		BooleanByte		;TRUE if doing continuity check
    CGD_routs		nptr.near		;type of routines to use
CharGenData	ends

;
; The Nimbus engine only uses (and works with) the fractional
; portion of the FontMatrix passed. This is because it only deals
; with values from [0.5,-0.5) (w/ an implied denominator of 32768)
; The integer portions of the FontMatrix are for non-hinted chars.
;
transform0	equ	<CGD_matrix.FM_11.WWF_frac>	;a
transform1	equ	<CGD_matrix.FM_21.WWF_frac>	;b
transform2	equ	<CGD_matrix.FM_12.WWF_frac>	;c
transform3	equ	<CGD_matrix.FM_22.WWF_frac>	;d

;----------------------------------------------------------------------------
;	Structures for local variables
;----------------------------------------------------------------------------

MetricsLocals	struct
    ML_flags		FontGenPathFlags
    ML_fontHeight	word			;=NFH_height
    ML_baseAdjust	word			;=NFH_baseAdjust
    ML_ascent		word			;=NFH_ascent
    ML_accent		word			;=NFH_accent
    ML_charWidth	word
    ML_tmatrix		TMatrix
if DBCS_PCGEOS
    ML_firstChar	char
    ML_lastChar		char
    ML_defaultChar	char
else
    ML_firstChar	Chars
    ML_lastChar		Chars
    ML_defaultChar	Chars
endif
    ML_fontID		FontID
    ML_styles		TextStyle
    ML_infoSeg		sptr.LMemBlockHeader
MetricsLocals	ends

WidthLocals	struct
    WL_gstate		sptr.GState	;passed GState
    WL_widthScale	WWFixed		;scale factor for widths
    WL_heightScale	WWFixed		;scale factor for height info
    WL_register		WWFixed		;scratch space
    WL_tmatrix		FontMatrix	;used for matrix concatination
    WL_xform		fptr.TMatrix	;ptr to xform (in GState or Window)
    WL_numKernPairs	word		;# of kerning pairs
    WL_transformAll	BooleanWord	;transform all in AddGraphicsTransform,
WidthLocals	ends

;----------------------------------------------------------------------------
;	Constants for paths
;----------------------------------------------------------------------------

BEZIER_POINTS		=	4	;number of points in Bezier curve
BEZIER_ACCURACY		=	5	;accuracy (2^#) of Bezier curve
