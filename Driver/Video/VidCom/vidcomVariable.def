COMMENT @-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		VidCom
FILE:		vidcomVariable.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	11/88		Initial version

DESCRIPTION:
	This file contains variables common to all video drivers
	
	$Id: vidcomVariable.def,v 1.1 97/04/18 11:41:55 newdeal Exp $

-------------------------------------------------------------------------------@

;----------------------------------------------------------------------------
;		Color dithering buffers and variables
;----------------------------------------------------------------------------

; this represents the color for which the following ditherMatrix is valid
ifdef IS_CLR24
ifndef   IS_DIRECT_COLOR
ditherColor	RGBValue <0,0,0>
ditherRotX	byte
ditherRotY	byte	
		ForceRef ditherRotY
ditherMatrix    word        16 dup(0)                         
endif

else

ifdef	BIT_CLR4
DitherOrColor	etype	byte
	DOC_MATRIX_HOLDS_COLOR_INDEX	enum	DitherOrColor
	DOC_MATRIX_HOLDS_DITHER_PATTERN	enum	DitherOrColor

ditherOrColor	DitherOrColor
	;If non-zero, then the ditherMatrix holds a dither pattern, not
	; a color index. This fixes a bug where someone draws a graphic
	; in a dither pattern, then draws something in a color (which 
	; changes the ditherMatrix), then draws it in the dither pattern
	; again - SetDither thinks the dither matrix is still valid, even
	; though it now contains the color index, not the dither pattern
endif
ditherColor	RGBValue <0,0,0>
ifdef IS_MONO
ditherMapMode	ColorMapMode
endif
ditherRotX	byte
ditherRotY	byte	
		ForceRef ditherRotY
MEM <bigDitherRotY	word						>
endif

; dither matrices for video drivers
;
; Each is a little different.  The 4 and 8 bit color matrices use a 4x4 matrix
; to replicate.  In the C4 case, there are 2 bytes per scan line of the dither
; pattern, so the color nibbles are packed.  In the 8-bit case, there are
; 4 bytes per scan line, one for each pixel.  In the CMYK case, the dither
; superpixel is also 4x4, but a clustered dither is used instead of the 
; dispersed dither used for the other formats.  
; For the mono case, for vidmem, we need a larger dither matrix since we
; are allowing the use of a clustered dither pattern, which requires a larger
; (6x24) matrix.  This would be 6 scans high by three bytes wide.  In order
; to make the drawing code faster, we bump the size of the buffer to 4 bytes
; wide, which helps out the code that pulls the data out.
C2   < ditherMatrix byte	8 dup(0)	;8 pixels x 4 scan	>
C4   < ditherMatrix byte	16 dup(0)				>
C8   < ditherMatrix byte	16 dup(0)				>

CMYK < ditherMatrix byte	YELLOW_DITHER_SIZE dup (0) ; yellow	>
CMYK < cyanDither   byte	CMYK_DITHER_SIZE dup (0) ; cyan		>
CMYK < magentaDither byte	CMYK_DITHER_SIZE dup (0) ; magenta	>
CMYK < blackDither  byte	BLACK_DITHER_SIZE dup (0); black	>

ifdef IS_MEM
MONO < ditherMatrix byte	24 dup(0)				>
else
MONO < ditherMatrix byte	8 dup (0)				>
endif
; transfer function tables
; this handle is to an unlocked block supplied to the video driver.  It
; contains transfer functions that can be used to do gamma correction on
; colors before display.

MEM <colorTransfer	hptr	0					>
MEM <ForceRef	colorTransfer						>

	; Current "color" and pattern

setColor	word		; 0s if background white, 1s if 
				;  background black (set by SetColor)
resetColor	word		; inverse of setColor


;----------------------------------------------------------------------------
;		Video State 
;----------------------------------------------------------------------------

driverState	VideoState <>			; video driver current state
ForceRef	driverState
NMEM < videoEnabled	sbyte			; for turning off the screen>
NMEM < prevVideoMode	byte			; prior video mode set  >
		byte				;  PADDING
saveSS		word				; so we can switch stacks
saveSP		word				; so we can switch stacks

ifdef IS_DIRECT_COLOR				; real 24-bit color

	; keep this following four bytes together
currentDrawMode	MixMode	?
currentColor	RGBValue

elifdef IS_CLR24				; really 15/16-bit color

	; keep this following three bytes together
currentDrawMode	MixMode	?
currentColor	word

else
	; keep this following three bytes together
currentMapMode	byte	?			; current map mode
currentDrawMode	MixMode ?			; current draw mode
currentColor	byte	?			; current color index
		ForceRef currentColor

endif

bmType		byte				;  bitmap type byte

;----------------------------------------------------------------------------
;		Pointer variables
;----------------------------------------------------------------------------

NMEM <hiddenFlag	sbyte	?		;flag for pointer hidden >
NMEM <			sbyte	?		; hold current color (bitmap)>
	
NMEM <cursorX		word	?		; current cursor position >
NMEM <cursorY		word	?		; 			>
NMEM <cursorHotX	byte	?		; current cursor hot point > 
NMEM <cursorHotY	byte	?		; 			>
NMEM <cursorCount	byte	?					>

ifndef IS_CLR24
ifndef IS_CASIO
ifndef IS_CLR8
ifndef BIT_CLR4
ifndef BIT_CLR2
NMEM <cursorImage	byte	CUR_IMAGE_SIZE*2 dup(?)			>
endif
endif
endif
endif
endif

;----------------------------------------------------------------------------
;		Rectangle/Bitmap/Region variables
;----------------------------------------------------------------------------


maskBuffer	DrawMask <>

d_x1		sword				; hold an x position
d_x2		sword				;  hold another
d_y1		sword				; hold a y position
d_y2		word				; another name for d_lineCount
d_lineCount	sword				;  hold another
d_bytes		word				; # bytes/plane/scan (bitmaps)
bmSeg		word				; segment of bitmap (used by
bmLOffset	word				; offset to BM line data
bmWidth		word				; width of bitmap (pixels)
putStart	sword				; left side of bm for PutLine
saveBP		word				; save for passing to callback
saveDS		word				; save for passed gstate seg
bmArgs		word				; pointer to PutBitsArts struc

unitCount	word				; # bytes/words to blt/put 
lineMask	byte				; draw mask for this scan line
BIT <linePatt	byte				; pattern for this scan line >
NMEM <defPalFlag	byte			; 0 if custom palette, 1=def >
BIT <ForceRef	linePatt						>
;----------------------------------------------------------------------------
;		Line/Blt variables
;----------------------------------------------------------------------------

lineX1		sword				; positions
lineY1		sword				; positions
lineX2		sword				; positions
lineY2		sword				; positions
signX		sword				; 1 for left->right, else -1
signY		sword				; 1 for top->bottom, else -1
putlineRout	nptr				; offset to bitmap routine

d_dx		word				; ABS(x2-x1)
d_dy		word				; ABS(y2-y1)
d_x1src		word				; holds source x1

polyCount	word				; count of polygon pts passed
polyAttr	word				; offset to polygon points 
polyPoints	fptr				; fptr passed to polygon rout
polyMax		word				; pointer to max y coord index
polyMaxY	word				; y coord of max
polyMaxYxval	word				; x coord when y coord max
polyMin		word				; pointer to min y coord index
polyMinY	word				; y coord of min
polyLast	word				; pointer to last coord in buff
polyFlag	byte				; 1 if points supplied r clockw

;----------------------------------------------------------------------------
;		Bitmap optimization variables
;----------------------------------------------------------------------------

		; these variable are calculated by the routine PutLineSetup
		; each time the clip region left/right bounds change while
		; drawing the bitmap. (could be multiple times on one scan).
bmLeft		word				; max (leftRegion, leftImage)
bmRight		word				; min (rightRegion, rightImage)
bmPreload	byte				; preload test flag
bmShift		byte				; #bits to shift
bmRMask		byte				; rightmask
bmLMask		byte				; left mask
ForceRef	bmLMask
bmMaskSize	word				; size of mask per scan line
bmPalette	dword				; far pointer to palette info

ifdef	IS_CLR24
ifndef	IS_DIRECT_COLOR
transPalette	word 256 dup (?)		; bmPalette converted to RGB
endif
endif

;----------------------------------------------------------------------------
;		Text variables
;----------------------------------------------------------------------------

MAX_CHAR_BYTES		=	40

lineDataBuffer		byte	MAX_CHAR_BYTES dup (?) ; clip buffer for a line
lineCacheHandle		word			; handle of window whose line
						;  clip buffer is valid

			; allow different sizing for drivers supporting mult
			; resolutions
ifdef	MAX_MASK_BUFFER
NMEM < lineMaskBuffer	byte	MAX_MASK_BUFFER dup (?)
else
NMEM < lineMaskBuffer	byte	SCREEN_BYTE_WIDTH dup (?)		>
endif

bytesToDraw		byte			;Keep these two in this order
extraBytesToDraw	byte			;""
shiftCount		byte	
linesToDraw		byte	

charByteOffset		word	

currentLine		sword	
currentWin		sptr.Window	


		; these are pushed together by VidSaveState, don't 
		; separate them !
fracPosition		sbyte
fracYPosition		sbyte

drawMask		DrawMask <>

		; these are pushed together by VidSaveState, don't 
		; separate them !
stateFlags		byte	
textMode		TextMode  <>
ForceRef	textMode

		; these are pushed together by VidSaveState, don't 
		; separate them !
if DBCS_PCGEOS
lastChar		Chars				;last char drawn
lastFlags		CharTableFlags			;last char flags
			byte	0
else
lastChar		char				;last char drawn
lastFlags		CharTableFlags			;last char flags
endif

;----------------------------------------------------------------------------
;		XOR region variables
;----------------------------------------------------------------------------

ifndef	IS_MEM

even

xorRegionHandle	hptr	0		;if zero -> no region
xorRegion	fptr.Region		;current xor region
xorParams	Rectangle <>		;paramters to region
xorFlags	VisXORFlags <>
xorHiddenFlag	byte			;if non-zero -> region hidden

endif

;-----------------------------------------------------------------------------
;		HALF-SCREEN variables
;-----------------------------------------------------------------------------

ifdef	IS_HALF_SCREEN
idata		segment

ifdef	IS_16
	DEFAULT_SPACE	equ	ALT_BUFFER_BYTE_WIDTH / 2
else
	DEFAULT_SAPCE	equ	ALT_BUFFER_BYTE_WIDTH
endif

suSpaceInHalfBuffer	word	DEFAULT_SPACE

suSaveSpaceFree		word	ALT_BUFFER_TOTAL_SIZE

idata		ends
endif
