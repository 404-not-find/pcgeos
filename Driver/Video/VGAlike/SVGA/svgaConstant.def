
COMMENT }%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1990 -- All Rights Reserved


PROJECT:	PC GEOS
MODULE:		SVGA Video Driver
FILE:		svgaConstant.def

AUTHOR:		Jim DeFrisco

REVISION HISTORY:
	Name	Date	Description
	----	----	-----------
	Jim	9/90	initial version


DESCRIPTION:
		
	$Id: svgaConstant.def,v 1.1 97/04/18 11:42:26 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%}


;----------------------------------------------------------------------------
;	Driver type constants
;----------------------------------------------------------------------------

IS_VGALIKE		=	TRUE
IS_8			=	TRUE	;8 bit driver
IS_CLR4			=	TRUE	; 4-bit color
ALT_VIDEO_RAM		=	FALSE	;Has alternate video ram
SAVE_UNDER_COUNT	=	3	;Number of save under areas

;****************************************************************************
;	SCREEN SIZE EQUATES
;****************************************************************************

BWID_SCR	=	100		; width of screen, bytes
HEIGHT_SCR	=	600		; height of screen, scan lines

SCREEN_BYTE_WIDTH	=	BWID_SCR	; For common code
SCREEN_PIXEL_WIDTH	=	BWID_SCR*8	; For common code
SCREEN_HEIGHT		=	HEIGHT_SCR	; For common code


;****************************************************************************
;	VIDEO PBUFFER SEGMENT DEFINITION
;****************************************************************************

SCREEN_BUFFER	=	0a000h			; EGA video buffer segment addr

SCREEN_SIZE		=	SCREEN_BYTE_WIDTH * SCREEN_HEIGHT


;	this is the location in the extra video memory where the backing
;	store for the cursor is kept
;	XXX: we add 16 to CURSOR_BACK b/c we've encountered a mouse driver
;	(in windows 3.0 -- the Logitech bus mouse driver) that likes to store
;	private information immediately after the screen buffer for whatever
;	mode it's in. Why the f*** it does this is anyone's guess (keeps it
;	out of conventional RAM, I guess), but it screws up the cursor
;	save area. We figure that 16 bytes should be enough storage for the
;	monster...(it currently stores at +5 and +6...) -- a & j 10/29/90

CURSOR_BACK		=	SCREEN_SIZE+16

CURSOR_SIZE		=	CUR_SIZE*CUR_BWIDTH

ALT_SCREEN_BUFFER	=	SCREEN_BUFFER+((CURSOR_BACK+CURSOR_SIZE)+15)/16

SAVE_AREA_SIZE		=	(0b000h - ALT_SCREEN_BUFFER) * 16


;****************************************************************************
;	ADDITIONAL BIOS CALLS (VGA ONLY)
;****************************************************************************

ALT_SELECT		=	12h		; major bios function number
VIDEO_SCREEN_ON_OFF	=	36h		; subfunction number
VGA_ENABLE_VIDEO 	=	0h		;  bios arg, video enabled
VGA_DISABLE_VIDEO 	=	1h		;  bios arg, video disabled

;****************************************************************************
;	VESA BIOS EXTENSIONS
;****************************************************************************

VESA_BIOS_EXT		=	0x4f		; VESA defined BIOS extensions

			; VESA extended BIOS functions
VESA_GET_SVGA_INFO	=	0		; VESA fn 0, get SVGA info
VESA_GET_MODE_INFO	=	1		; VESA fn 1, get mode info
VESA_SET_MODE		=	2		; VESA fn 2, set video mode
VESA_GET_MODE		=	3		; VESA fn 3, get current mode
VESA_SAVE_STATE		=	4		; VESA fn 4, save/restore state
VESA_WINDOW_CONTROL	=	5		; VESA fn 5, memory window cntrl

			; VESA defined mode numbers
VESA_640x400_8BIT	=	0x100		; 640x400 256-color
VESA_640x480_8BIT	=	0x101		; 640x480 256-color
VESA_800x600_4BIT_OLD	=	0x6a		; 800x600 16-color (old #)
VESA_800x600_4BIT	=	0x102		; 800x600 16-color (new #)
VESA_800x600_8BIT	=	0x103		; 800x600 256-color 
VESA_1Kx768_4BIT	=	0x104		; 1024x768 16-color 
VESA_1Kx768_8BIT	=	0x105		; 1024x768 256-color 
VESA_1280x1K_4BIT	=	0x106		; 1280x1024 16-color 
VESA_1280x1K_8BIT	=	0x107		; 1280x1024 256-color 

;****************************************************************************
;	MANUFACTURER SPECIFIC CONSTANTS
;****************************************************************************

HEADLAND_INQUIRE	equ	0x6f00		; Headland/Video 7
HEADLAND_SET_MODE	equ	0x6f05		; Headland/Video 7
HEADLAND_GET_CONFIG	equ	0x6f07		; Headland/Video 7
HEADLAND_800_MODE	equ	0x62

EVEREX_SET_MODE	equ	0x70			; Everex Viewpoint
EVEREX_800_MODE	equ	0x02

AHEAD_SET_MODE	equ	0x00			; Ahead Systems VGA Wizard
AHEAD_800_MODE	equ	0x6a			; (uses old VESA method)

ATI_800_MODE	equ	0x6a			; (uses old VESA method)

CIRRUS_800_MODE	equ	0x6a			; (uses old VESA method)

CHiPS_800_MODE equ	0x6a			; (uses old VESA method)

GENOA_800_MODE	equ	0x79			; Genoa SuperVGA card

OAK_800_MODE	equ	0x52			; Oak Technologies OTI-037 set

TVGA_800_MODE	equ	0x5b			; Trident TVGA chip set

TSENG_800_MODE	equ	0x29			; Tseng ET3000 chip set

PARADISE_800_MODE equ	0x58			; Paradise BIOS chip set

