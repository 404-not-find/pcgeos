
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Memory video Driver
FILE:		monoMacro.def

AUTHOR:		Jim DeFrisco

MACROS:
		Name		Function
		----		--------
		InitDitherIndex
		NextDitherScan
		NextDitherWord

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Jim	12/91		Initial version

DESCRIPTION:
		This file contains macros for the Memory Video driver

	$Id: monoMacro.def,v 1.1 97/04/18 11:42:42 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		InitDitherIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Init bx and si to point into the ditherMatrix

PASS:		bReg	- optional register to use for  base dither address.
			  Uses si if none supplied.

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
InitDitherIndex		macro	bReg
ifidn @CurSeg, <Mono>
	dgseg	=	cs
else
	dgseg	=	ss
endif
	mov	bl, dgseg:[ditherTopIndex]	; load index into dither
	clr	bh
ifb	<bReg>
	mov	si, bx				; use si for base
	add	si, offset dgseg:ditherMatrix	; cs:bx -> ditherMatrix scan
else
	mov	bReg, bx
	add	bReg, offset dgseg:ditherMatrix
endif
	mov	bl, dgseg:[ditherLeftIndex]	; use bx for X index
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherScan
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump pointers to next scan of ditherMatrix

PASS:		bReg	- same register passed to InitDitherIndex (could
			  be blank)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NextDitherScan		macro	bReg
ifidn @CurSeg, <Mono>
	dgseg	=	cs
else
	dgseg	=	ss
endif
		local	haveDitherIndex
		mov	bl, dgseg:[ditherLeftIndex]
ifb	<bReg>
		add	si, MONO_DITHER_WIDTH	;increment pattern pointer
		cmp	si, (offset ditherMatrix) + MONO_DITHER_SIZE	
		jb	haveDitherIndex
		sub	si, MONO_DITHER_SIZE
else
		add	bReg, MONO_DITHER_WIDTH
		cmp	bReg, (offset ditherMatrix) + MONO_DITHER_SIZE
		jb	haveDitherIndex
		sub	bReg, MONO_DITHER_SIZE
endif		
haveDitherIndex:
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherWord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump pointers to next byte of ditherMatrix

PASS:		bReg	- same reg passed to InitDitherIndex

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NextDitherWord		macro	bReg
ifidn @CurSeg, <Mono>
	dgseg	=	cs
else
	dgseg	=	ss
endif
		local	done
ifb	<bReg>
		mov	ax, dgseg:[bx][si]
else
		xchg	bReg, si
		mov	ax, dgseg:[bx][si]
		xchg	bReg, si
endif
		dec	bx
		jns	done
		mov	bx, 2
done:
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherByte
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	get next byte

PASS:		baseReg	- same reg passed to InitDitherIndex (assumed si)
		indexReg - reg used for index (assumed bx)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NextDitherByte		macro	bReg, iReg
ifidn @CurSeg, <Mono>
	dgseg	=	cs
else
	dgseg	=	ss
endif

ifnb	<bReg>
		xchg	bReg, si
endif
ifnb	<iReg>
		xchg	iReg, bx
endif
		mov	al, dgseg:[bx][si]
ifnb	<iReg>
		xchg	iReg, bx
endif
ifnb	<bReg>
		xchg	bReg, si
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		BumpDitherIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump a register that holds a line index to a dither matrix

PASS:		iReg	- register to bump

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/13/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
BumpDitherIndex		macro	iReg
	local	haveNext
	inc	iReg
	cmp	iReg, MONO_DITHER_WIDTH-1
	jb	haveNext
	clr	iReg
haveNext:
endm






