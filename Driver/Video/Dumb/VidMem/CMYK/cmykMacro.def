
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Memory video Driver
FILE:		cmykMacro.def

AUTHOR:		Jim DeFrisco, Aug 25, 1989

MACROS:
		Name		Function
		----		--------
		InitDitherIndex
		NextDitherScan
		NextDitherWord

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Jim	12/91		Initial version

DESCRIPTION:
		This file contains macros for the Memory Video driver

	$Id: cmykMacro.def,v 1.1 97/04/18 11:43:07 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		InitDitherIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Init bx and si to point into the ditherMatrix

PASS:		bReg	- optional register to use for  base dither address.
			  Uses si if none supplied.

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
InitDitherIndex		macro	bReg
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
else
	dgseg	=	ss
endif
	mov	bl, dgseg:[blackTopIndex]	; load index into dither
	clr	bh
ifidn 	@CurSeg, <CMYKClrBitmap>
else
	add	bx, offset dgseg:blackDither	; calc black base
endif
	mov	dgseg:[blackBase], bx		; save for black
	mov	bl, dgseg:[cyanTopIndex]
	clr	bh
	mov	dgseg:[cyanBase], bx
	mov	bl, dgseg:[yellowTopIndex]
	clr	bh
ifb	<bReg>
	mov	si, bx				; use si for base
else
    ifidn 	@CurSeg, <CMYKClrBitmap>
	mov	bReg, bx
    else
	mov	bReg, bx
	clr	bh
    endif
endif
	mov	bl, dgseg:[blackLeftIndex]	; save this
	mov	dgseg:[blackIndex], bl
	mov	bl, dgseg:[cyanLeftIndex]
	mov	dgseg:[cyanIndex], bl
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherScan
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump pointers to next scan of ditherMatrix

PASS:		bReg	- same register passed to InitDitherIndex (could
			  be blank)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NextDitherScan		macro	bReg
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
else
	dgseg	=	ss
endif
		local	haveBlackBase, haveCyanBase
		mov	bl, dgseg:[blackLeftIndex]	; save this
		mov	dgseg:[blackIndex], bl
		mov	bl, dgseg:[cyanLeftIndex]
		mov	dgseg:[cyanIndex], bl
ifb	<bReg>
		add	si, 2			; bump to next scan
		and	si, 7			; only 8 in yellow
		push	si
		mov	si, dgseg:[blackBase]
		add	si, BLACK_DITHER_WIDTH	;increment pattern pointer
		cmp	si, (offset blackDither) + BLACK_DITHER_SIZE	
		jb	haveBlackBase
		sub	si, BLACK_DITHER_SIZE
haveBlackBase:
		mov	dgseg:[blackBase], si
		mov	si, dgseg:[cyanBase]
		add	si, CMYK_DITHER_WIDTH
		cmp	si, CMYK_DITHER_SIZE
		jb	haveCyanBase
		sub	si, CMYK_DITHER_SIZE
haveCyanBase:
		mov	dgseg:[cyanBase], si
		pop	si
else
		add	bReg, 2			; bump to next scan
		and	bReg, 7			; only 8 in yellow
		push	bReg
		mov	bReg, dgseg:[blackBase]
		add	bReg, BLACK_DITHER_WIDTH ;increment pattern pointer
		cmp	bReg, (offset blackDither) + BLACK_DITHER_SIZE	
		jb	haveBlackBase
		sub	bReg, BLACK_DITHER_SIZE
haveBlackBase:
		mov	dgseg:[blackBase], bReg
		mov	bReg, dgseg:[cyanBase]
		add	bReg, CMYK_DITHER_WIDTH
		cmp	bReg, CMYK_DITHER_SIZE
		jb	haveCyanBase
		sub	bReg, CMYK_DITHER_SIZE
haveCyanBase:
		mov	dgseg:[cyanBase], bReg
		pop	bReg
endif		
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherWord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump pointers to next byte of ditherMatrix

PASS:		bReg	- same reg passed to InitDitherIndex

RETURN:
		ax	- next yellow word
		
PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NextDitherWord		macro	bReg
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
else
	dgseg	=	ss
endif
		local	newBlkIndex, newCyanIndex

		push	si
		mov	si, dgseg:[blackBase]
		mov	bl, dgseg:[blackIndex]
		clr	bh
		mov	ax, dgseg:[bx][si]
		mov	dgseg:[blackWord], ax
		dec	bl
		jns	newBlkIndex
		mov	bl, 2
newBlkIndex:
		mov	dgseg:[blackIndex], bl
		mov	bl, dgseg:[cyanIndex]
		mov	si, dgseg:[cyanBase]
		mov	ax, {word} dgseg:cyanDither[bx][si]
		mov	dgseg:[cyanWord], ax
		mov	ax, {word} dgseg:magentaDither[bx][si]
		mov	dgseg:[magentaWord], ax
		sub	bl, 3
		jns	newCyanIndex
		add	bl, 5
newCyanIndex:
		mov	dgseg:[cyanIndex], bl
ifnb	<bReg>
	ifdif <bReg>, <si>
		mov	si, bReg
		mov	ax, {word} dgseg:[ditherMatrix][si]
		pop	si
	else
		pop	si
		mov	ax, {word} dgseg:[ditherMatrix][si]
	endif
else
		pop	si
		mov	ax, {word} dgseg:[ditherMatrix][si]
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextDitherByte
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	grab next byte, don't bump index

PASS:		baseReg (si), indexReg (bx)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/28/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NextDitherByte		macro	bReg
	local	haveNextCyan, haveNextBlack
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
else
	dgseg	=	ss
endif

		push	si		
		mov	si, dgseg:[blackBase]
		mov	bl, dgseg:[blackIndex]
		clr	bh
		mov	al, dgseg:[bx][si]
		mov	{byte} dgseg:[blackWord], al
		inc	bl
		cmp	bl, BLACK_DITHER_WIDTH-1
		jb	haveNextBlack
		clr	bl
haveNextBlack:
		mov	dgseg:[blackIndex], bl
		mov	bl, dgseg:[cyanIndex]
		mov	si, dgseg:[cyanBase]
		mov	al, dgseg:cyanDither[bx][si]
		mov	{byte} dgseg:[cyanWord], al
		mov	al, dgseg:magentaDither[bx][si]
		mov	{byte} dgseg:[magentaWord], al
		inc	bl
		cmp	bl, CMYK_DITHER_WIDTH-1
		jb	haveNextCyan
		clr	bl
haveNextCyan:
		mov	dgseg:[cyanIndex], bl
ifnb	<bReg>
    ifdif <bReg>, <si>
		mov	si, bReg
		mov	al, dgseg:[ditherMatrix][si]
		pop	si
    else
		pop	si
		mov	al, dgseg:[ditherMatrix][si]
    endif
else
		pop	si
		mov	al, dgseg:[ditherMatrix][si]
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		BumpDitherIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	bump a register that holds a line index to a dither matrix

PASS:		nothing

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/13/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
BumpDitherIndex		macro	
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
else
	dgseg	=	ss
endif
	mov	bl, dgseg:[cyanIndex]
	inc	bl
	cmp	bl, CMYK_DITHER_WIDTH-1
	jb	haveNextCyan
	clr	bl
haveNextCyan:
	mov	dgseg:[cyanIndex], bl
	mov	bl, dgseg:[blackIndex]
	inc	bl
	cmp	bl, BLACK_DITHER_WIDTH-1
	jb	haveNextBlack
	clr	bl
haveNextBlack:
	mov	dgseg:[blackIndex], bl
endm







