
COMMENT }%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved


PROJECT:	PC GEOS
MODULE:		Memory video driver
FILE:		vidmemVariable.def

AUTHOR:		Jim DeFrisco

REVISION HISTORY:
	Name	Date	Description
	----	----	-----------
	Jim	12/91	initial version

DESCRIPTION:
	This file contains the variables for the memory driver.

	$Id: vidmemVariable.def,v 1.1 97/04/18 11:42:56 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%}

bm_segment	word			; address of bitmap used for buffer
bm_handle	dword			; VM file/block handle
bm_byteOffset	word			; offset into scan line
bm_byteOffsetSrc word			; offset into scan line
bm_lastSeg	sptr			; segment of last locked HA data block
bm_lastSegSrc	sptr			; need another for when we blt
MONO <bm_flags	BitmapMode		; clustered dither, edit mask	>
CMYK <bm_flags	BitmapMode		; clustered dither, edit mask	>
bm_scansNext	word			; #scans left in this HugeArray block
bm_scansPrev	word			; #scans left in this HugeArray block
bm_scansNextSrc	word			; #scans left in this HugeArray block
bm_scansPrevSrc	word			; #scans left in this HugeArray block
bm_bpScan	word			; # bytes per scan line
bm_bpMask	word			; # bytes per scan line of mask
bm_cacheWid	word			; B_width for valid bpScan
bm_dataOffset	word			; set at Entry, controls whether 
					;  to the mask or to the picture data
bmScan		word			; what scan line we're on
bm_cacheTypeWord label	word
bm_cacheType	byte			; B_type for valid bpScan
MONO <bm_editedMask	byte		; set to non-zero when mask edited. >

EC <bm_ec_lastOffset	word		; offset of last HugeArray line	>
EC <bm_ec_lastLineSize	word		; size of last HugeArray line	>
EC <bm_ec_lastSliceSize	word		; size of last HugeArray slice	>


ifdef IS_CLR8
bm_bpMaskRndDwn	word			; same as bm_bpMask, but rounded down.
					;   Used in character drawing code to
					;   ensure we don't write beyond the
					;   right edge of the bitmap!
bm_nonIntegralPixels	word		; if bm_bmMask != bm_bpMaskRndDwn, then
					;   this value holds the difference in
					;   the number of pixels
endif

ifdef IS_CLR24
bm_bpMaskRndDwn	word			; same as bm_bpMask, but rounded down.
					;   Used in character drawing code to
					;   ensure we don't write beyond the
					;   right edge of the bitmap!
bm_nonIntegralPixels	word		; if bm_bmMask != bm_bpMaskRndDwn, then
					;   this value holds the difference in
					;   the number of pixels
endif

ifdef IS_CMYK
		; these are the equivalent indices for CYAN and MAGENTA
blackLeftIndex	byte			;
blackTopIndex	byte			;
cyanLeftIndex	byte			; modulo (ditherMatrix width) 
cyanTopIndex	byte			; modulo (ditherMatrix height)
yellowTopIndex	byte			; modulo (ditherMatrix height)

blackIndex	byte			; to step though dither
cyanIndex	byte			; to step though dither
blackBase	word			; to step though dither
cyanBase	word			; to step though dither
yellowBase	word			; to step though dither

cyanWord	word			; temp holding place
magentaWord	word			; temp holding place
blackWord	word			; temp holding place

; when doing color bitmaps, we need to lock down the colorTransfer block
; and the CMYKDither resource.  Here is where we will put the segment values

colorTransferSeg sptr			; color transfer segment
colorDitherSeg	sptr			; and the CMYKDither resource seg

else
		; these are used for clustered dither 
		; DON'T SEPARATE THEM
NC24 <ditherLeftIndex	byte		; modulo (width of ditherMatrix)  >
NC24 <ditherTopIndex	byte		; modulo (height of ditherMatrix) >
NC24<ForceRef	ditherLeftIndex						>
NC24<ForceRef	ditherTopIndex						>

C4 <dataBuff4	word 2 dup(?)		; build out 8 pixels of whatever >
C4 <maskBuff4	byte 32 dup(?)		; build out 8x8 pixels of mask data >
C4 <buff4Left	byte			; index into Buff4 scan >
C4 <buff4Top	byte			; index into Buff4 buffer >

C4 <ditherScan	word			; one word of dither pattern	>

endif





