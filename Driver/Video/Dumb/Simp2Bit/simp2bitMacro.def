COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996.  All rights reserved.

PROJECT:	PC GEOS
MODULE:		Simp2Bit video driver
FILE:		simp2bitMacro.def

AUTHOR:		Joon Song, Oct 7, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	joon	10/7/96   	Initial revision

DESCRIPTION:
	Macros for the Simp2Bit video driver
		
	$Id: simp2bitMacro.def,v 1.1 97/04/18 11:43:53 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

COMMENT @----------------------------------------------------------------------

MACRO:		SetBuffer	segreg, trashReg

DESCRIPTION:	Set segreg to SCREEN_BUFFER

PASS:
	segreg - segment register to set
	trashReg - register that can be trashed

RETURN:
	segreg - set

------------------------------------------------------------------------------@

SetBuffer	macro	segreg, trashReg
	segmov	segreg,SCREEN_BUFFER,trashReg
endm

COMMENT @----------------------------------------------------------------------

MACRO:		NextScan

DESCRIPTION:	Increment to the next scan line

PASS:
	dest - register with scan line address
	adjust - modification (in bytes) to position on next scan

RETURN:
	reg - updated

------------------------------------------------------------------------------@

NextScan	macro	dest, adjust
ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	add	dest, SCREEN_BYTE_WIDTH+(adjust)
    else
	add	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	add	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @----------------------------------------------------------------------

MACRO:		PrevScan

DESCRIPTION:	Decrement to the previous scan line

PASS:
	dest 	- location with scan line address
	adjust 	- modification (in bytes) to position on next scan

RETURN:
	dest 	- updated

------------------------------------------------------------------------------@

PrevScan	macro	dest, adjust
ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	add	dest, (adjust)-SCREEN_BYTE_WIDTH
    else
	sub	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	sub	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @----------------------------------------------------------------------

MACRO:		StoreNextScanMod

DESCRIPTION:	Store a self modified value for NextScanMod

PASS:
	dest - destination address
	reg - register with value to modify or constant

RETURN:
	reg - destroyed

------------------------------------------------------------------------------@

StoreNextScanMod	macro	dest, adjust
ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	mov	dest, SCREEN_BYTE_WIDTH+(adjust)
    else
	mov	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	mov	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @----------------------------------------------------------------------

MACRO:		NextScanMod

DESCRIPTION:	Increment register to the next scan line

PASS:
	reg - register with scan line address
	sym - symbol for word to relocate

RETURN:
	reg - updated

------------------------------------------------------------------------------@

NextScanMod	macro	reg, sym
	local	stuff

stuff	label	word
sym	=	stuff + 2
	add	reg, 1234h
endm

COMMENT @----------------------------------------------------------------------

MACRO:		StorePrevScanMod

DESCRIPTION:	Store a self modified value for PrevScanMod
		For the MCGA, this is the same as StoreNextScanMod

PASS:
	dest - destination address
	reg - register with value to modify

RETURN:
	reg - destroyed

------------------------------------------------------------------------------@

StorePrevScanMod	macro	dest, adjust
ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	mov	dest, (adjust)-SCREEN_BYTE_WIDTH
    else
	mov	dest, -SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	mov	dest, -SCREEN_BYTE_WIDTH
endif

endm

COMMENT @----------------------------------------------------------------------

MACRO:		PrevScanMod

DESCRIPTION:	Increment register to the next scan line

PASS:
	reg - register with scan line address
	sym - symbol for word to relocate

RETURN:
	reg - updated

------------------------------------------------------------------------------@

PrevScanMod	macro	reg, sym
	local	stuff

stuff	label	word
sym	=	stuff + 2
	add	reg, 1234h
endm

COMMENT @----------------------------------------------------------------------

MACRO:		CalcScanLine

DESCRIPTION:	Calculate the beginning scan line position

PASS:
	reg - register containing line number
	offsetReg - register containing offset to add to base scan line address

RETURN:
	reg - address
	offsetReg - destroyed

------------------------------------------------------------------------------@

	; result should be: reg = 320L + O
	;		where:
	;			L = line number (passed in reg)
	;			O = offset (passed in offsetReg)

CalcScanLine	macro	reg, offsetReg
	CheckHack <SCREEN_BYTE_WIDTH eq 160>
	sal	reg,5			;reg = 32L
	add	offsetReg,reg		;offsetReg = 32L+O
	sal	reg,2			;reg = 128L
	add	reg,offsetReg		;reg = 160L+O

endm
