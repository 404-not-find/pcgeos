COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		taskConstant.def

AUTHOR:		Adam de Boor, Oct  4, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	10/4/91		Initial revision


DESCRIPTION:
	Common constants for task-switch drivers
		
	$Id: taskConstant.def,v 1.1 97/04/18 11:58:13 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;==============================================================================
;
; Set appropriate TRUE/FALSE constants
;
;==============================================================================
ifdef	TASKMAX

_TASKMAX	equ	TRUE
_BNF		equ	FALSE
_DOS5		equ	FALSE
_GEOSTS		equ	FALSE

elifdef BACK_AND_FORTH

_TASKMAX	equ	FALSE
_BNF		equ	TRUE
_DOS5		equ	FALSE
_GEOSTS		equ	FALSE

elifdef DOS5

_TASKMAX	equ	FALSE
_BNF		equ	FALSE
_DOS5		equ	TRUE
_GEOSTS		equ	FALSE

elifdef GEOSTS

_TASKMAX	equ	FALSE
_BNF		equ	FALSE
_DOS5		equ	FALSE
_GEOSTS		equ	TRUE

endif

;==============================================================================
;		   Fatal Errors Used in Common Code
;==============================================================================
GASP_CHOKE_WHEEZE					enum	FatalErrors
INVALID_DRIVER_FUNCTION					enum	FatalErrors
PASSED_LIST_ENTRY_NOT_ONE_OF_OURS			enum	FatalErrors
CANNOT_BRING_UP_NONEXISTENT_CONTROL_BOX			enum	FatalErrors

;==============================================================================
;		      ADDITIONAL OBJECT CLASSES
;==============================================================================


;
; TaskItemClass is used for the entries in our Task List Dialog
;
TaskItemClass	class	GenItemClass

MSG_TI_NUKE_TASK		message
;	Pass:	nothing
;	Return:	nothing
;
;	Destroy the task referred to by this item. Removes the item from the
;	list if the task is actually destroyed.
;

MSG_TI_CONFIRMATION_CHOICE	message
;	Pass:	cx	= StandardDialogBoxResponses from the standard box
;			  that TI_NUKE_TASK put up
;	Return:	nothing
;

TaskItemClass	endc


;
; TaskTriggerClass is used for representing DOS tasks in the Express Menu
; Control's DOS Tasks List
;
TaskTriggerClass	class	GenTriggerClass

MSG_TT_SET_INDEX		message
;	Pass:	cx	= index of this task
;	Return:	nothing
;

    TTI_index	word	0	; index for the task, from the switcher's
				;  perspective

TaskTriggerClass	endc


TaskApplicationClass	class	GenApplicationClass
MSG_TA_REDO_TASKS		message
;	Pass:	nothing
;	Return:	nothing
;
;	Make sure all express menus contain entries for the various tasks
;	known by the task-switcher.
;

MSG_TA_BUILD_TASK_LIST		message
;	Pass:	^lcx:dx	= list to which to add entries for active tasks
;	Return:	nothing
;
;	Add ignore-dirty entries for all active tasks, except our own, to
;	the passed list.
;

MSG_TA_BRING_UP_CONTROL_BOX	message
;	Pass:	nothing
;	Return:	nothing
;
;	Initiates the control box pointed to by TAI_controlBox.
;

MSG_TA_DOS_TASKS_LIST_ITEM_CREATED	message
;	Pass:	ss:bp = CreateExpressMenuControlItemResponseParams
;	Return:	nothing
;
;	Sent when a new DOS Tasks List item is created for us.
;

MSG_TA_CONTROL_PANEL_ITEM_CREATED	message
;	Pass:	ss:bp = CreateExpressMenuControlItemResponseParams
;	Return:	nothing
;
;	Sent when a new Control Panel item is created for us.
;

TAEMControl	struct
    TAEMC_emc		optr			; address of the express
						;  menu control
    TAEMC_tasks		lptr.ChunkArrayHeader	; chunk array containing the
						;  optrs of the TaskItem
						;  objects created for the
						;  currently-known tasks
    TAEMC_panel		optr			; address of the control
						;  panel we added for this
						;  express menu.
TAEMControl	ends

    TAI_expressMenuControls	lptr.ChunkArrayHeader
    ;	An array of TAEMControl structures, one of which is created each time
    ;	MSG_NOTIFY_EXPRESS_MENU_CHANGE(GCNEMNT_CREATED) is received. Each
    ;	express menu has its own set of TaskItem objects we create, and we
    ;	need to keep their optrs around so we can biff them if required.

TATaskFlags	record
    TATF_OLD:1		; set if entry is out of date and should be
			;  biffed.
    TATF_NEW:1		; set if entry is new and has no TaskItem objects
			;  created for it
    TATF_CHANGED:1	; set if index has changed and identifier in its
			;  TaskItem object must be updated
TATaskFlags	end

TaskName	type	TASK_NAME_LENGTH dup(char)

TATask		struct
    TAT_name	TaskName	; name of the task
    TAT_index	word		; actual index from the T/S's point of view
    TAT_flags	TATaskFlags	; guess what?
TATask		ends

    TAI_tasks			lptr.ChunkArrayHeader
    ;	Array of TATask structures, one for each task known the last time
    ;	MSG_TA_REDO_TASKS was received. The index of a TATask within the array
    ;	is also the index of the optr for the associated TaskItem object within
    ;	each TAEMC_tasks array.


    TAI_controlBox		lptr
    ;	System-modal GenInteraction to control the switcher. A trigger is
    ;	added to each express menu to bring this thing up if it is non-0.
    ;	The moniker for this beast is copied as the moniker for the trigger.
;
; Support routines used by this class and provided by task-switcher-
; dependent code:
; 	TAFetchTasks:
; 		Pass:	ds	= object block
; 		Return:	*ds:ax	= chunk array of TATask structures. TAT_flags
;				  is ignored.
;

TaskApplicationClass	endc

TaskDriverClass		class	GenProcessClass

MSG_TD_SUSPEND_CONFIRMED	message
;	Pass:	cx	= 0 if suspend denied; non-zero if allowed
;	Return:	nothing
;
;	Sent by SysShutdown once it's gotten an answer back from everyone
;	on the GCNSLT_SHUTDOWN_CONTROL list.

MSG_TD_SWITCH			message
;	Pass:	dx	= index of task to which to switch
;	Return:	nothing
;

MSG_TD_CONTINUE_SWITCH		message
;	Pass:	dx	= index of task to which to switch
;	Return:	nothing
;

MSG_TD_ABORT_SWITCH		message
;	Pass:	dx	= index of task to which to switch
;	Return:	nothing
;
.assert MSG_TD_ABORT_SWITCH eq MSG_TD_CONTINUE_SWITCH+1



MSG_TD_DOS_EXEC			message
;	Pass:	cx	= handle of DosExecArgs block
;	Return:	nothing
;

MSG_TD_CONTINUE_DOS_EXEC	message
;	Pass:	cx	= handle of DosExecArgs block
;	Return:	nothing
;

MSG_TD_ABORT_DOS_EXEC		message
;	Pass:	cx	= handle of DosExecArgs block
;	Return:	nothing
;
.assert MSG_TD_ABORT_DOS_EXEC eq MSG_TD_CONTINUE_DOS_EXEC+1

MSG_TD_CONTINUE_DELETE		message
;	Pass:	^lcx:dx	= TaskItem object whose task is being biffed
;		bp	= index of task it describes
;	Return:	nothing
;

MSG_TD_ABORT_DELETE		message
;	Pass:	^lcx:dx	= TaskItem object whose task is being biffed
;		bp	= index of task it describes
;	Return:	nothing
;
.assert MSG_TD_ABORT_DELETE eq MSG_TD_CONTINUE_DELETE+1


;MSG_META_ATTACH		message	MetaMessages
;
; Sent to the process to start it going. TaskDriverClass intercepts it
; to create the AppLaunchBlock required by GenProcessClass to start the
; application going.
;
; Context:	initial message received by an event-driven thread, during
;		the handling of which it should initialize itself.
; Source:	sent by system when it creates an event-driven thread.
; Destination:	any object
; Interception:	if the switcher-specific subclass intercepts this message,
;		it must be sure not to do anything before calling its
;		superclass that it would need to undo before the thread
;		exits. If DRE_TEST_DEVICE has determined that the switcher
;		isn't present, the TaskDriver handler for this message will
;		exit directly without sending any other messages.
;
; Pass:		see metaC.def
; Return:	see metaC.def
; 

TaskDriverClass		endc

