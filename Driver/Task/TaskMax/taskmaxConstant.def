COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		taskmaxConstant.def

AUTHOR:		Adam de Boor, Sep 19, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	9/19/91		Initial revision


DESCRIPTION:
	Constants for this hack.
		
	$Id: taskmaxConstant.def,v 1.1 97/04/18 11:58:07 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;==============================================================================
;			     Fatal Errors
;==============================================================================

;==============================================================================
; definition of the API for the DR DOS 6.0 (aka TaskMax) task switcher.
;==============================================================================
TM_TASK_NAME_LENGTH	equ	8	; task names are at most 8 chars

TaskMaxAPI	etype	word, 2700h
    TMAPI_CHECK_INSTALL		enum	TaskMaxAPI
    ;	pass:	ax 	= TMAPI_CHECK_INSTALL
    ;	return:	al	= ffh if installed

    TMAPI_FIND_TASKS		enum	TaskMaxAPI
    ;	pass:	ax	= TMAPI_FIND_TASKS
    ;	return:	ax	= max # tasks supported
    ;		bx	= current task index
    ;		cx	= # of active tasks
    ;		dx	= version # (1 for DR DOS 6.0)
    ;		es:si	= task table: an array of bytes providing a mapping
    ;			  from a task *index* to a task *ID*. The index of
    ;			  a task changes as tasks get added and deleted,
    ;			  but the ID is invariant, and is what indexes the
    ;			  task name table.
    ;		es:di	= task names (8 bytes each entry, null-terminated
    ;			  if fewer than 8 bytes). Indexed by task ID.
    ;

    TMAPI_GET_MAX_LIM		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_MAX_LIM
    ;	Return:	dx	= maximum LIM pages per app
    ;

    TMAPI_SET_MAX_LIM		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_SET_MAX_LIM
    ;		dx	= max LIM pages per application
    ;	Return:	nothing
    ;

    TMAPI_SET_TASK_MGR		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_SET_TASK_MGR
    ;		dl	= 0/1 to un/register task manager
    ;	Return:	dl	= previous state. If 1, then task-switching support
    ;			  should be disabled...in theory.
    ;
    ; 	The task manager is the task to which Ctrl+Esc will return the user.
    ; 

    TMAPI_DISABLE_SWITCH	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_DISATMLE_SWITCH
    ;		dl	= 0/1 to disable/enable direct switching from kbd
    ;			  using the Ctrl+NumPad (including + and -)
    ;	Return:	nothing
    ;

    TMAPI_SWITCH_TO_TASK	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_SWITCH_TO_TASK
    ;		dx	= index of task to which to switch
    ;	Return:	dx	= index of last active task
    ;

    TMAPI_START_TASK		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_START_TASK
    ;		cx	= tick count for return to task manager (0 = none,
    ;			  i.e. let the new task run)
    ;		ds:dx	= ASCIZ name of .EXE or .COM to exec
    ;		es:bx	= DosExec parameter block.
    ;	Return:	dx	= task index for new task (0xffff if already dead)
    ;	Notes:	the environment segment is currently ignored.
    ;
    
    TMAPI_DELETE_TASK		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_DELETE_TASK
    ;		dx	= index of task to delete
    ;	Return:	dx	= 0xffff (active task deleted)
    ;
    
    TMAPI_NAME_TASK		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_NAME_TASK
    ;		dx	= task ID (not index)
    ;		ds:si	= pointer to 8-byte name (all 0's to remove name)
    ;	Return:	es:di	= pointer to name in task name table
    ;		bx	= task ID
    ;		al	= TASK_TABLE[bx]:
    ;			  0	= task ID not used, or task terminated
    ;			  1	= task ID in use (task name entry valid)
    ;			  81h	= task ID in use and name is fixed
    ;
    
    TMAPI_CONVERT_INDEX		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_CONVERT_INDEX
    ;		dx	= task index
    ;	Return:	dx	= task ID, or -1 if index invalid
    ;
    
    TMAPI_CONVERT_ID		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_CONVERT_ID
    ;		dx	= task ID
    ;	Return:	dx	= task index, or -1 if task not active
    ;

    TMAPI_CHECK_OPEN_FILES	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_CHECK_OPEN_FILES
    ;		dx	= task ID
    ;	Return:	ax	= number of open files.
    ;	Notes:	if a task has any open files, it should not be deleted.
    ;
    
    TMAPI_TASK_AT_ROOT?		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_TASK_AT_ROOT
    ;		dx	= task ID
    ;	Return:	dx	= 0 if root process (command.com) is running
    ;			= 1 if not at root
    ;	Notes:	if a task is not at the root, it should not be deleted, as
    ;		EMS/XMS memory may be lost.
    ;

    TMAPI_GET_SET_TEXT_LEAD_IN	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_SET_TEXT_LEAD_IN
    ;		ds:si	= pointer to text paste lead-in string
    ;		cx	= new length of string, or 0 to get current
    ;	Return:	es:di	= pointer to current lead-in string
    ;
    
    TMAPI_GET_SET_NUMERIC_LEAD_IN enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_SET_NUMERIC_LEAD_IN
    ;		ds:si	= pointer to numeric paste lead-in string
    ;		cx	= new length of string, or 0 to get current
    ;	Return:	es:di	= pointer to current lead-in string
    ;
    
    TMAPI_GET_SET_ENTER_STRING	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_SET_ENTER_STRING
    ;		ds:si	= pointer to enter string
    ;		cx	= new length of string, or 0 to get current
    ;	Return:	es:di	= pointer to current enter string
    ;
    
    TMAPI_GET_SET_DECIMAL_POINT	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_SET_DECIMAL_POINT
    ;		dx	= ascii code for separator, or 0xffff to get current
    ;	Return:	dl	= current separator
    ;
    
    TMAPI_EXPORT_DATA		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_EXPORT_DATA
    ;		dx	= task index
    ;	Return:	nothing
    ;
    
    TMAPI_IMPORT_DATA		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_IMPORT_DATA
    ;		dx	= task index into which to import
    ;	Return:	nothing
    ;
    ;	Notes:	forces user to type a char to specify the import format.
    ;
    
    TMAPI_GET_SWAP_INFO		enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_GET_SWAP_INFO
    ;	Return:	dx	= available swap space (Kb)
    ;		cx	= total swap space (Kb)
    ;
    
    TMAPI_SWITCH_TO_MANAGER	enum	TaskMaxAPI
    ;	Pass:	ax	 = TMAPI_SWITCH_TO_MANAGER
    ;	Return:	nothing
    ;

    ; VERSION 1.1 FUNCTIONS
    
    TMAPI_QUERY_CLIPBOARD_STATUS enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_QUERY_CLIPBOARD_STATUS
    ;	Return:	ax	= 0, if function supported.
    ;		cx	= number of bytes in the clipboard
    ;		dx	= serial number for clipboard
    ;	Notes:	to properly handle 1.0 TM, should pass CX as 0 so we just think
    ;		there's nothing in the clipboard if this function isn't
    ;		supported.
    ;
    
    TMAPI_FETCH_CLIPBOARD_DATA	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_FETCH_CLIPBOARD_DATA
    ;		es:di	= place to store the data
    ;		cx	= # bytes in the buffer
    ;	Return:	ax	= 0, if function supported.
    ;		cx	= # bytes copied (-1 if too many to fit)
    ;		dx	= serial number of clipboard data actually fetched
    ;
    
    TMAPI_STORE_CLIPBOARD_DATA	enum	TaskMaxAPI
    ;	Pass:	ax	= TMAPI_STORE_CLIPBOARD_DATA
    ;		ds:si	= characters to store
    ;		cx	= # characters in the buffer
    ;	Return:	ax	= 0, if function supported.
    ;		dx	= serial number of data stored.
    ;
    

;==============================================================================
;		      ADDITIONAL OBJECT CLASSES
;==============================================================================

TaskMaxClass	class	TaskDriverClass
    MSG_TM_SET_CB_SUPPORT		message
    ;	Turn clipboard support on/off.
    ;
    ;	Pass:	cx	= TRUE to turn it on, FALSE to turn it off.
    ;	Return:	nothing.
    ;

TaskMaxClass	endc

;
; Subclass to initialize the box before it comes up
; 
TaskMaxSummonsClass class GenInteractionClass 
    MSG_TMS_TASK_SELECT		message
    ;	Take note that a task has been selected (or deselected) from the list
    ;
    ;	Pass:	cx	= task index selected
    ;		bp	= number of selected entries (0 or 1)
    ;	Return:	nothing
    ;
    
    MSG_TMS_RUN_SELECTED_TASK	message
    ;	Switch to the selected task.
    ;
    ;	Pass:	nothing
    ;	Return:	nothing
    ;
    
    MSG_TMS_DELETE_SELECTED_TASK	message
    ;	Delete the selected task.
    ;
    ;	Pass:	nothing
    ;	Return:	nothing
    ;

    MSG_TMS_ADD_NEW_SHELL		message
    ;	Start another task with command.com running in it.
    ;
    ;	Pass:	nothing
    ;	Return:	nothing
    ;

    TMSI_curTask	word	-1	; Currently-selected task index
    TMSI_doEMSStuff	byte	0	; set if EMS limit stuff should be
					;  handled by us.

TaskMaxSummonsClass endc

