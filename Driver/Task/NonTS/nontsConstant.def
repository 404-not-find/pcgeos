COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		nontsConstant.def

AUTHOR:		Adam de Boor, Apr 28, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	4/28/92		Initial revision


DESCRIPTION:
	Constants for the non-task-switching task-switching driver..
		
	$Id: nontsConstant.def,v 1.1 97/04/18 11:58:18 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;------------------------------------------------------------------------------
;	Frame we overlay on the transient kernel code for which we allocate
;	a fixed block on the heap in DosExec
;------------------------------------------------------------------------------

DOS_PATH_BUFFER_SIZE = MSDOS_DRIVE_REF_LENGTH + DOS_STD_PATH_LENGTH + 1

NTSExecFrame	struct
    ;
    ; Stack used while issuing calls to get the program running
    ;
    NTSEF_stack		byte	80 dup(?); upped to 80 (from 50) b/c DR-DOS uses
					;  more stack space
    ;
    ; Data the kernel figured out for us.
    ; 
    NTSEF_args		DosExecArgs
    ;
    ; Saved bootupPath for recovery
    ;
    NTSEF_bootPath 	char	DOS_PATH_BUFFER_SIZE dup(?)
    ;
    ; Path of loader, for recovery
    ;
    NTSEF_loader	DosExecLoaderInfo
    ;
    ; Parameter block passed to DOS to exec a program.
    ;
    NTSEF_execBlock 	DosExecuteArgs
    NTSEF_fcb1		StdFCB
    NTSEF_fcb2		StdFCB
			even
    ;
    ; Extra strings needed by NTSStub. All strings are in this same
    ; block.
    ; 
    NTSEF_execError	nptr.char
    NTSEF_prompt	nptr.char
    NTSEF_failedReload	nptr.char
    NTSEF_noMemory	nptr.char
NTSExecFrame	ends

NTSReloadFrame	struct
    ;
    ; Parameter block for reloading the system.
    ;
    NTSRF_execBlock	DosLoadOverlayArgs
    ;
    ; Info about the loader.
    ; 
    NTSRF_loaderInfo	DosExecLoaderInfo
    ;
    ; PSP to pass to the loader in ds and es
    ; 
    NTSRF_psp		sptr.ProgramSegmentPrefix
    ;
    ; Stack we use during the reload
    ;
    NTSRF_stack		byte	96 dup(?)
NTSReloadFrame	ends

;--------------------------------------------------------------------------
;	Number of paragraphs for the stack that we use between the time
;	we return from EXEC and the time we reload PC/GEOS
;--------------------------------------------------------------------------

TEMP_STACK_SIZE		=	(size RDPRecovFrame + 15) / 16

;--------------------------------------------------------------------------

INVALID_TASK_FUNCTION					enum FatalErrors

SHUTDOWN_NOT_CALLED_FROM_KERNEL_THREAD			enum FatalErrors
; We should not get a DR_TASK_SHUTDOWN_COMPLETE from anywhere but the
; kernel thread.	
