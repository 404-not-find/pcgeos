COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

			GEOWORKS CONFIDENTIAL

PROJECT:	Socket
MODULE:		PPP Driver		
FILE:		ppp.def

AUTHOR:		Jennifer Wu, Apr 19, 1995

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jwu	4/19/95		Initial revision


DESCRIPTION:
	Definitions file for the PPP driver.	
		
	$Id: ppp.def,v 1.28 98/08/12 17:20:52 jwu Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

COMMENT |------------------------------------------------------------------

_RESPONDER will enable Responder phone specific changes.

_MUST_HAVE_PHONE_NUMBER	will forbid any direct serial 
	connections, requiring a phone number for every 
	connection

_SEND_NOTIFICATIONS will cause PPP to send out SubSystem 
	notifications when the link is connected or 
	disconnected.  This must be true if either of
	the following are true.

_SEND_MEDIUM_NOTIFICATIONS will cause PPP to send medium
	SubSystem notifications to the mailbox library.

_SEND_SOCKET_NOTIFICATIONS will cause PPP to send socket
	link status SubSystem notifications.  Useful if
	a geode wants to know when PPP is connected.  
	Usually not needed.

--------------------------------------------------------------------------|

;
; Intialize to all FALSE for the following ifidns.
;
	_RESPONDER			equ     FALSE
	_PENELOPE			equ	FALSE

ifidn	PRODUCT, <RESPONDER>
	_RESPONDER 			equ	TRUE
	_MUST_HAVE_PHONE_NUMBER		equ	TRUE
	_SEND_NOTIFICATIONS		equ	TRUE	
	_SEND_MEDIUM_NOTIFICATIONS	equ	FALSE
	_SEND_SOCKET_NOTIFICATIONS	equ	TRUE

elifidn	PRODUCT, <PENELOPE>
ifidn 	HARDWARE_TYPE, <PC>
	_PENELOPE			equ	FALSE
	_MUST_HAVE_PHONE_NUMBER		equ	FALSE
else
	_PENELOPE			equ	TRUE
	_MUST_HAVE_PHONE_NUMBER		equ	TRUE
endif
	_SEND_NOTIFICATIONS		equ	TRUE
	_SEND_MEDIUM_NOTIFICATIONS	equ	FALSE
	_SEND_SOCKET_NOTIFICATIONS	equ	TRUE
else
	_RESPONDER			equ     FALSE
	_PENELOPE			equ	FALSE
	_MUST_HAVE_PHONE_NUMBER		equ	FALSE
	_SEND_NOTIFICATIONS		equ	TRUE
	_SEND_MEDIUM_NOTIFICATIONS	equ	TRUE
	_SEND_SOCKET_NOTIFICATIONS	equ	FALSE
endif

;---------------------------------------------------------------------------
;		Constants
;---------------------------------------------------------------------------

;
; Default port and baud rates if no ini settings.
;
PPP_DEFAULT_PORT	equ	SERIAL_COM1
PPP_DEFAULT_BAUD	equ	SB_9600

; 
; Value passed to GeodeRequestSpace. 
; 
PPP_SPACE_NEEDED		equ	4	; (in Ks)

PPP_TIMEOUT_INTERVAL		equ	30	; half a second
PPP_DEFAULT_OPEN_TIMEOUT	equ	240	; 2 minutes (in intervals)
PPP_PASSWORD_PROMPT_TIMEOUT	equ	60 * 60	; 1 minute (in ticks)

PPP_CONNECTION_HANDLE	equ	1234h		; arbitrary value
PPP_INPUT_BUFFER_SIZE	equ	100		; arbitrary value
PPP_SERIAL_BUFFER_SIZE	equ	1000		; arbitrary value

;
; PPP's minimum header size is the size of a PacketHeader, plus 4 bytes 
; for the optr (so C code doesn't have to deal with it), plus size of 
; PPP header.  PPP header consists of address (1 byte), control (1 byte),
; protocol (2 bytes), code (1 byte), id (1 byte), length (2 bytes).
; FCS can be at most 4 bytes (32-bit FCS option).  
;
PPP_HEADER_SIZE		equ	8
PPP_MIN_HDR_SIZE	equ	(size PppPacketHeader + PPP_HEADER_SIZE)

;
; Minimum datagram header space TCP should tell its clients to reserve.
; TCP adds in the PacketHeader size so don't include it here.  Only need
; room for the PPP header and the optr.
;
PPP_MIN_DGRAM_HDR	equ	(PPP_HEADER_SIZE + 4)

;
; Arbitrary constants for HugeLMemCreate and allocation.  
;
MIN_OPTIMAL_BLOCK_SIZE		equ	100
MAX_OPTIMAL_BLOCK_SIZE		equ	8000
HUGELMEM_ALLOC_WAIT_TIME 	equ	60		; one second 

MAX_IP_ADDR_OFFSET		equ	3

PppLinkState	etype	byte, 0, 1
PLS_CLOSED		enum	PppLinkState
PLS_CLOSING 		enum	PppLinkState
PLS_LOGIN_INIT		enum	PppLinkState	; login app initializing
PLS_OPENING		enum	PppLinkState	; physical connection phase
PLS_LOGIN		enum	PppLinkState	; manual login phase
PLS_NEGOTIATING		enum	PppLinkState	; PPP protocol phase
PLS_OPEN		enum	PppLinkState

;
; Size of PPP thread's stack space.  Need more space for the logging 
; version because logging builds the formatted string on the stack.
; Default size is too small because MST loves local vars, lots of params,
; and functions get called through many many layers.
;
ifdef LOGGING_ENABLED
PPP_STACK_SIZE			equ	2500
else
ifdef MSCHAP
PPP_STACK_SIZE			equ	2000
else
PPP_STACK_SIZE			equ	1500
endif
endif

MAX_PHONE_NUMBER_LENGTH		equ	99
MAX_PHONE_NUMBER_LENGTH_ZT 	equ	100

MAX_PASSWORD_LENGTH		equ	50

MAX_PASSWORD_TEXT_WIDTH		equ	25
MAX_TEXT_OBJ_WIDTH		equ	MAX_PASSWORD_TEXT_WIDTH + 4

;
; Extra space includes LinkType, SACA_opaqueSize, plus a null terminator 
; for the user readable string.  
;

PPP_EXTRA_ADDR_SPACE	equ (size LinkType + size SACA_opaqueSize + size TCHAR)

;
; Async HDLC values
;
PPP_FLAG	equ	0x7E	; Flag Sequence
PPP_ALLSTATIONS	equ	0xFF	; All-Stations broadcast address
PPP_UI		equ	0x03	; Unnumbered Information 
PPP_ESCAPE	equ	0x7D	; Asynchronous Control Escape
PPP_TRANS	equ	0x20	; Async transparency modifier
;
; Certain Escaped values, used in PPP data recognition FSM
;
PPP_FE		equ	(PPP_FLAG xor PPP_TRANS)
PPP_AE		equ	(PPP_ALLSTATIONS xor PPP_TRANS)
PPP_UE		equ	(PPP_UI xor PPP_TRANS)

;
; FSM states for recognizing the 3-byte PPP signature
;   PPP_FLAG, PPP_ALLSTATIONS, PPP_UI
;
FSMTransition	struct

	FSMT_input		byte	; Input for a given state to match.
	FSMT_newState		nptr.FSMTransition ; new state to move to
	FSMT_action		nptr.near ; action to take on transition
	FSMT_next		nptr.FSMTransition ; next input to search

FSMTransition	ends
	

;
; The only ECI messages we care about right now are ECI_CALL_TERMINATE_STATUS
; and ECI_CALL_RELEASE_STATUS and ECI_CALL_CREATE_STATUS.
;
if _RESPONDER
PPP_NUM_ECI_ALL		equ	3
PPP_NUM_ECI_END		equ	2

ONE_SECOND		equ	60		; for call logging duration

endif

;---------------------------------------------------------------------------
;		Structures
;---------------------------------------------------------------------------

ClientStatus	record
	:2
	CS_MANUAL_LOGIN:1		; use manual login for this connection
	CS_MEDIUM_CONNECTED:1		; notified system medium is connected
	CS_DEVICE_OPENED:1		; physical connection is open
	CS_PASSIVE:1			; PPP is in passive mode (server)
	CS_BLOCKED:1			; mutex needs to be V-ed
	CS_REGISTERED:1			; client is registered
ClientStatus	end

PppClientInfo	struct
	PCI_unit	word		
	PCI_domain	word		; domain handle assigned by client
	PCI_accpnt	word		; accpnt ID, 0 if not using accpnts
	PCI_clientEntry fptr		; SCO entry for client
	PCI_status	ClientStatus
	PCI_linkState	PppLinkState	
	PCI_timer	word		; decay counter (time is in timer 
					; 	intervals)
	PCI_mutex	hptr		; semaphore for blocking operations
	PCI_error	word		; SocketDrError & SpecSocketDrError
PppClientInfo	ends

PppPacketHeader	struct
	PPH_common	PacketHeader
	PPH_optr	optr		; optr of buffer
PppPacketHeader ends

; Internet dialup definitions moved to Include for common access.
; -dhunter 10/16/00

include Internal/ppp.def

COMMENT |------------------------------------------------------------------

		PPP Process Class

The driver has its own thread for processing events.  Routines for the
driver's interface will usually do some small bookkeeping and then queue
the event for the driver to process.  The PPPProcessClass is created to
run the driver's thread.

--------------------------------------------------------------------------|

PPPProcessClass		class	ProcessClass

MSG_PPP_OPEN_LINK			message
;	Description:  Open the device and start up PPP link configuration.
;	Pass: 	cx	= addr size 
;		ss:bp	= non-null terminated address
;	Return: nothing
;	Destroys: ax, cx, dx, bp
;

MSG_PPP_CLOSE_LINK			message
;	Description:  Signal PPP to close link.
;	Pass:	nothing
;	Return: nothing
;	Destroys: ax, cx, dx, bp
;

MSG_PPP_SEND_FRAME			message
;	Description:  Send the buffer's data enclosed in a PPP frame.
;	Pass:	dx:bp	= optr of buffer
;		cx	= size of data in buffer
;	Return:	nothing
;	Destroys: ax, cx, dx, bp
;

MSG_PPP_HANDLE_DATA_NOTIFICATION	message
;	Description:  Data notification handler for incoming data.
;	Pass:	nothing
;	Return: nothing
;	Destroys: ax, cx, dx, bp
;

MSG_PPP_TIMEOUT				message
;	Description:  Adjusts all PPP timers.
;	Pass:	nothing
;	Return:	nothing
;	Destroys: ax, cx, dx, bp
;

MSG_PPP_MANUAL_LOGIN_INIT_COMPLETE	message
;	Description: Sent by login app when initialization is done.
;	Pass:		cx = token passed in LAI_connection
;			dx = LoginResponse
;	Return:		nothing
;	Destroys:	ax, cx, dx, bp

MSG_PPP_MANUAL_LOGIN_COMPLETE		message
;	Description:  Return control of serial port to PPP after login.
;	Pass:		cx = token passed in LII_connection
;			dx = LoginResponse
;	Return:		nothing
;	Destroys:	ax, cx, dx, bp

; MSG_META_DETACH			message
;	Intercepted to deny detach if a client is still registered.
;	This is to prevent the system from shutting down the driver
;	before the client has unregistered,  I don't recall the exact
; 	bug this fixes, but I had to do it in both TCP/IP and SLIP...
;

if _RESPONDER

MSG_PPP_ECI_NOTIFICATION		message
;	Description: Handle ECI notification from VP library.
;	Pass:	cx	= mem handle of data block
;		dx	= ECI message ID
;	Return: nothing
;	Destroys: ax, cx, dx, bp
;

endif

if _PENELOPE

MSG_PPP_HANDLE_PAD_STREAM_STATUS		message
;	Description:  Status notification handler for PAD upStream.
;	Pass:	nothing
;	Return: nothing
;	Destroys: ax, cx, dx, bp
;

endif

if _PENELOPE

MSG_CLIENT_DATA_PROTO	message
;
; Implements a message protoype defined by PAD so PPP can receive data
; from PAD.
;
; Context:	Response
; Source:	PAD
; Destination:  PPPProcess
; Interception: Implement a PAD message prototype.
;
; Pass:		cx	= atTranslationType_e
;		dx	= MemHandle
;
; Return:	Nothing
;
;	- unchanged
;	- destroyed
;

endif

if _PENELOPE

MSG_CLIENT_CONNECT_PROTO	message
;
; Implements a message prototype defined by PAD so that PPP can
; receive connect responses from PAD.
;
; Context:	Response
; Source:	PAD
; Destination:  PPPProcess
; Interception: Implement a PAD message prototype.
;
; Pass:		cx	= GeodeHandle for hStream
; 		dx	= StreamToken for upStream
; 		bp	= StreamToken for dnStream
;			
; Return:	Nothing
;
;	- unchanged
;	- destroyed
;

endif

if _PENELOPE

MSG_CLIENT_ERROR_PROTO	message
;
; Implements a message prototype defined by PAD so that PP can receive
; error codes from PAD.
;
; Context:	Response
; Source:	PAD
; Destination:  PPPProcess
; Interception: Implement a PAD message prototype.
;
; Pass:		cx:dx	= one of ERR_PAD_... error codes.
;			
; Return:	Nothing
;
;	- unchanged
;	- destroyed
;

endif

if _PENELOPE

MSG_CLIENT_MODE_PROTO	message
;
; Implements a message prototype defined by PAD. This method does
; nothing as PPP does not need to receive the message from PAD.
; This message is only sent to System Bus Handler (sbh), not PPP.
;
; Context:	Response
; Source:	PAD
; Destination:  PPPProcess
; Interception: Implement a PAD message prototype
;
; Pass:		cx - sbhMsg, mode switch.
;		sbhMsg_e etype word, 0, 1
;		DataMode	enum sbhMsg_e, 0
; 		NormalMode	enum sbhMsg_e, 1
;
; Return:	Nothing
;
;	- unchanged
;	- destroyed
;

endif

MSG_PPP_MODEM_SIGNAL_CHANGE	message
;
; If we are using a modem, this message will be sent when carrier
; detect or the ring indicator signals from the modem change.  If
; the carrier detect gets dropped when we are connected, we will
; force the connection to be closed.
;
; Context:	Response from Modem
; Source:	Modem Driver
; Destination:	PPPProcess
; Interception:	Wouldn't recommend it
;
; Pass:		cx = ModemLineStatus
;
; Return:	Nothing
;
;	ax, cx, dx, bp - destroyed
;


PPPProcessClass		endc

;---------------------------------------------------------------------------
;		PPPUIClass
;
; UI threads created for displaying dialogs get their own class becasue 
; the detach handler for the PPP thread will prevent these threads from
; detaching.
;
;---------------------------------------------------------------------------

PPPUIClass	class	ProcessClass

MSG_PPP_UI_PROMPT_PASSWORD			message
;	Description:  Put up a dialog allowing user to enter a password,
;		retrieve the password and then queue a MSG_META_DETACH
;		message to self.  
;		NOTE: Only to be called by UI thread created by PPP.
;	Pass:	^hdx	= username block
;		cx	= username size
;		bp	= accpnt ID
;	Return:	^hcx	= password
;		ax	= size (excluding null terminator)
;	Destroys: dx, bp
;

MSG_PPP_UI_WARN_DISKSPACE			message
;	Description:  Put up a dialog warning user that there may not
;		be enough memory (diskspace).  Retrieve user selection
;		and then queue a MSG_META_DETACH message to self.
;	Pass:	nothing
;	Return: ax	= IC_YES or IC_DISMISS
;	Destroys: dx, bp
;

PPPUIClass	endc


;---------------------------------------------------------------------------
;		Fatal Errors   
;---------------------------------------------------------------------------

PPP_INVALID_CLIENT_HANDLE		enum	FatalErrors
PPP_INVALID_CONNECTION_HANDLE		enum	FatalErrors

PPP_TOO_MANY_TASKS			enum	FatalErrors
; The driver can only have one blocking task at a time.  The only
; tasks that block are opening and closing of the link.  Only one
; of these should be called at a time! 
;

PPP_BAD_LINK_STATE			enum	FatalErrors
PPP_BAD_CLIENT_STATUS			enum	FatalErrors
PPP_BAD_DATA_SIZE			enum	FatalErrors
PPP_BAD_DATA_OFFSET			enum	FatalErrors

PPP_INVALID_UNIT_TYPE			enum	FatalErrors
PPP_INVALID_PORT			enum	FatalErrors
PPP_INVALID_MEDIUM_TYPE			enum	FatalErrors
PPP_INVALID_LINK_ADDRESS_TYPE		enum	FatalErrors
PPP_INVALID_ACCESS_POINT		enum	FatalErrors

PPP_CORRUPT_CLIENT_INFO			enum	FatalErrors

PPP_MISSING_CHILD_BLOCK			enum	FatalErrors
PPP_REFUSE_SUSPEND_STRING_TOO_LONG	enum	FatalErrors

PPP_INTERNAL_ERROR			enum	FatalErrors
; For catching coding errors.
;

PPP_MANUAL_LOGIN_BAD_NOTIFICATION	enum	FatalErrors
; Manual login app has passed a bad notification to the callback

PPP_INVALID_MANUAL_LOGIN_CONNECTION	enum	FatalErrors
; A login app has specified an invalid connection in the callback

PPP_MANUAL_LOGIN_ERROR			enum	FatalErrors
; Something went wrong in manual login mechanism

PPP_INCORRECT_CONNECTION_TOKEN		enum	FatalErrors
; The external login application has passed an invalid connect token
; to the PPP driver.  Check to see that the connection token being
; passed is the same as was given to the login app in LII_connection.

if _RESPONDER

PPP_BAD_ECI_NOTIFICATION		enum	FatalErrors
; Only ECI message we care about is ECI_CALL_TERMINATE_STATUS so why
; is the VP library notifying us about events we didn't register for?
;

endif

if _PENELOPE
PPP_INVALID_PAD_ERROR			enum	FatalErrors
; An invalid PAD response value was returned.
;

PPP_PAD_CONNECTING_WHILE_NOT_OPENING    enum    FatalErrors
; PAD is sending MSG_CLIENT_CONNECT_PROTO to PPP while PPP is not in
; PLS_OPENING state. This is not allowed and not supposed to happen.
;
endif


;---------------------------------------------------------------------------
;		Warnings
;---------------------------------------------------------------------------

PPP_DIRTY_SHUTDOWN				enum	Warnings
PPP_PORT_CLOSED					enum	Warnings
PPP_NOT_SINGLE_ADDRESS				enum	Warnings

PPP_NO_CHILDREN_FOR_SET_ADDRESSES		enum	Warnings
; Address controller has been called to set addresses before its 
; children have been built.  The set addresses will have no effect.
;

PPP_CLIENT_UNREGISTERING_BEFORE_LINK_CLOSED	enum	Warnings

PPP_MODEM_RESET_ERROR				enum	Warnings
; Could not reset the modem.  Stubborn modem?
;

PPP_MODEM_INIT_ERROR				enum	Warnings
; Could not initialize modem.  Make sure initialization string is 
; correct and modem is properly connected.  Some modems are stubborn
; about being initialized, thus this is a warning and not an error.
;

PPP_MODEM_HANGUP_ERROR				enum 	Warnings
; For some reason, the ATHO hangup command did not terminate the 
; connection.  Serial port will be closed anyways.
;

SERIAL_DRIVER_RETURNED_INVALID_MANUFACTURER_ID	enum	Warnings
; Added to remind VSer programmers to fix DR_SERIAL_GET_MODEM
; to return the ID in DX.  DX is currently left unchanged.
;

PPP_COULD_NOT_LOAD_SERIAL_DRIVER		enum	Warnings
PPP_COULD_NOT_LOAD_MODEM_DRIVER			enum	Warnings

PPP_NO_MANUAL_LOGIN_CONNECTION			enum	Warnings
PPP_NOT_IN_MANUAL_LOGIN_MODE			enum	Warnings

if _PENELOPE
PPP_COULD_NOT_LOAD_PAD				enum	Warnings
PPP_PAD_NO_BEARER_CAPABILITY 			enum	Warnings
; PAD's bearerCapability should be set in accessPoint in the INI file.
;
endif

if _RESPONDER
PPP_ECI_REGISTRATION_FAILED			enum	Warnings
PPP_ECI_UNREGISTRATION_FAILED			enum	Warnings
PPP_LOG_ADD_ENTRY_FAILED			enum	Warnings
endif

