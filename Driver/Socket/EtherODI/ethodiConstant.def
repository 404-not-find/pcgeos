COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Native Ethernet Support
MODULE:		ODI Ethernet driver
FILE:		ethodiConstant.def

AUTHOR:		Todd Stumpf

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TDS	7/30/98		Initial revision

DESCRIPTION:
	This file contains all the constant and macro definitions
	for the 16-bit Novell ODI driver.

	$Id:$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	;
	;  Device-specific macros
EthDevSendDXBP		macro
		call	EthODITransmitPacket
			endm

EthDevProcessIpPacket	macro
		call	EthODIProcessIpPacket
			endm

EthDevCheckLinkAddr	macro
		clc
			endm

EthDevInit		macro
		local	exit
		call	EthODIContactLSL
		jc	exit		; => LSL error
		call	EthODIArpInit
		call	EthODIInitRecvBuffers
		clc

exit:
			endm

EthDevExit		macro
		call	EthODIDetachLSL
			endm



;
; Constants
;
NODE_ADDR_SIZE		equ	6
PROTOCOL_ID_SIZE	equ	6

;
; MTU for an implementation is actually arbitary, as long as it's bigger
; than the total size of headers.  But since SunOS 4.1.4, Linux 2.0.31 and
; FreeBSD 2.2.6 all use 1500, I guess it's a pretty good number.
;
ETHER_MTU		equ	1500

;
; The link layer header we use for EtherODI driver is simply an ECB with
; one (1) PacketFragmentPtr.
;
LINK_HEADER_SIZE	equ	(size ECB + size PacketFragmentPtr * 1)

;
; Constants for receiving buffers
;
NUM_RECV_BUFFERS	equ	10
RECV_BUFFER_SIZE	equ	ETHER_MTU



;
; Types
;
NodeAddr	type	NODE_ADDR_SIZE dup (byte)
ProtocolID	type	PROTOCOL_ID_SIZE dup (byte)



	;
	;  ODI constants
LSL_INT		equ	0x2F
LSL_SIGNATURE_FUNC	equ	0xC000
		; PASS :	AX	-> LSL_INSTALL_FUNC
		; RETURN :	AL	<- 0xFF if installed
		;		DX:BX	<- FPTR.FAR to LSL entry point
		;		ES:SI	<- FPTR.ASCII to "LINKSUP$"
		;

LSLInitFunction		etype	word

	LSLIF_MLID_REG		enum	LSLInitFunction, 0x0001
		; PASS :	BX	-> LSLF_MLID_REGISTER
		;		ES:SI	-> RegistrationStruct
		;		DS:DI	-> LSLInfoBlock to fill out
		; RETURN :	AX	<- LSLErrorCode
		;		DS:SI	<- filled out on success
		; DESTROY :	BX, CX
		;

		RegistrationStruct	struct
			RS_entry	fptr.far
			RS_reserved	dword
			RS_data	label	dword
		RegistrationStruct	ends

		LSLInfoBlock		struct
			LSLIB_entry	fptr.far
			LSLIB_reserved	dword
		LSLInfoBlock		ends

	LSLIF_GET_PROTSUP_ENTRY	enum	LSLInitFunction, 0x0002
		; PASS :	BX	-> LSLF_GET_ENTRY_POINTS
		;		ES:SI	-> ProtSupEntryStruct
		; RETURN:	ES:SI	<- filled out
		;

		ProtSupEntryStruct	struct
			PSES_protoEntry	fptr.far	; for making LSLProtoFunc calls
			PSES_genEntry	fptr.far	; for making LSLGenFunc calls
		ProtSupEntryStruct	ends

LSLProtoFunc			etype	word
	LSLPF_GET_ECB		enum	LSLProtoFunc, 0x0000
		; PASS:		interrups disabled
		; RETURN:	AX	<- LSLErrorCode (LSLEC_SUCCESSFUL,
		;				LSLEC_OUT_OF_RESOURCES)
		;		if LSLEC_SUCCESSFUL
		;			ES:SI	<- ECB
		; DESTROY:	bx, cx, dx, si, di, es
	LSLPF_SCHEDULE_AES	enum	LSLProtoFunc, 0x0003
		; PASS:		ES:SI	-> ECB to schedule
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_CANCEL_AES	enum	LSLProtoFunc, 0x0004
		; PASS:		ES:SI	-> ECB to cancel
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_GET_INTERVAL	enum	LSLProtoFunc, 0x0005
		; PASS:		nothing
		; RETURN:	DX:AX	<- interval marker in milliseconds
		; DESTROY:	nothing
	LSLPF_REGISTER_PROTO_STACK	enum	LSLProtoFunc, 0x0006
		; PASS:		AX	-> Logical board #
		;		ES:SI	-> ProtoStackInfoStruct
		; RETURN:	AX	<- LSLErrorCode
		;		BX	<- stack ID on success
		; DESTROY:	nothing
	LSLPF_DEREGISTER_STACK		enum	LSLProtoFunc, 0x0007
		; PASS:		AX	-> stack ID
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_REGISTER_DEFAULT_STACK	enum	LSLProtoFunc, 0x0008
		; PASS:		AX	-> logical board #
		;		ES:SI	-> DefaultStackInfoStruct
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_DEREGISTER_DEFAULT_STACK	enum	LSLProtoFunc, 0x0009
		; PASS:		AX	-> logical board #
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_REGISTER_PRESCAN_STACK	enum	LSLProtoFunc, 0x000A	;;;???
		; PASS:		AX	-> logical board #
		;		ES:SI	-> DefaultStackInfoStruct
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_DEREGISTER_PRESCAN_STACK	enum	LSLProtoFunc, 0x000B	;;;???
		; PASS:		AX	-> logical board #
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_SEND_PACKET		enum	LSLProtoFunc, 0x000C
		; PASS:		ES:SI	-> ECB to send
		; RETURN:	nothing (interrupts disabled)
		; DESTROY:	ax, bx, cx, dx, si, di, es
	LSLPF_GET_STACK_ID_FROM_NAME	enum	LSLProtoFunc, 0x0010
		; PASS:		ES:SI	-> ASCIIZ protocol name (15 char max)
		; RETURN:	AX	<- LSLErrorCode
		;		BX	<- stack ID
		; DESTROY:	nothing
	LSLPF_GET_PROTOCOL_ID		enum	LSLProtoFunc, 0x0011
		; PASS:		AX	-> stack ID
		;		CX	-> logical board
		; 		ES:SI	-> buffer for protocol ID (6 bytes)
		; RETURN:	ES:SI	<- protocol ID
	LSLPF_GET_MLID_CONTROL_ENTRY	enum	LSLProtoFunc, 0x0012
		; PASS:		AX	-> logical board #
		; RETURN:	AX	<- LSLErrorCode
		;		ES:SI	<- MLID control handler
		; NOTES:  See MLIDFuncs below
	LSLPF_GET_PROTO_CONTROL_ENTRY	enum	LSLProtoFunc, 0x0013
		; PASS:		AX	-> stack ID (or -1 for default, or -2 for prescan)
		; RETURN:	AX	<- LSLErrorCode
		;		ES:SI	<- Protocol control handler
		; NOTES: see ProtoStackFunc below
	LSLPF_GET_LSL_STATISTICS	enum	LSLProtoFunc, 0x0014
		; PASS:		nothing
		; RETURN:	AX	<- LSLErrorCode
		;		ZF	<- set on success
		;		ES:SI	<- LSLStatsStruct
	LSLPF_BIND_STACK		enum	LSLProtoFunc, 0x0015
		; PASS:		AX	-> stack ID
		;		CX	-> logical board #
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_UNBIND_STACK		enum	LSLProtoFunc, 0x0016
		; PASS:		AX	-> stack ID
		;		CX	-> logical board #
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLPF_ADD_PROTO_ID		enum	LSLProtoFunc, 0x0017
		; PASS:		AX	-> Frame type ID code
		;		ES:SI	-> 6-byte protocol ID
		;		CX:DI	-> ASCIIZ protocol name (15 char max)
	LSLPF_RELINQUISH_CONTROL	enum	LSLProtoFunc, 0x0018
		; PASS:		nothing
		; RETURN:	nothing
		; DESTROY:	nothing
		; NOTE: Just lets LSL take care of processing
	LSLPF_GET_LSL_CONFIG		enum	LSLProtoFunc, 0x0019
		; PASS:		nothing
		; RETURN:	AX	<- LSLErrorCode
		;		ZF	<- set on success
		;		ES:SI	<- LSLConfigStruct
	LSLPF_GET_TICK_MARKER		enum	LSLProtoFunc, 0x001A
		; PASS:		nothing
		; RETURN:	AX	<- # of 55ms ticks LSL has been loaded
		; DESTROY:	BX

	LSLPF_REGISTER_DEFAULT_CHAIN	enum	LSLProtoFunc, 0x001B

	LSLPF_REGISTER_PRESCAN_RX_CHAIN	enum	LSLProtoFunc, 0x001C

		StackRequestType	etype	word
		SR_FIRST	enum	StackRequestType, 0
		SR_NEXT_FIRST	enum	StackRequestType, 1
		SR_DEPENDS	enum	StackRequestType, 2
		SR_LEXT_LAST	enum	StackRequestType, 3
		SR_LAST		enum	StackRequestType, 4

		LDestType	record
			:5
			LDT_RX_PRIORITY_FRAME:1		; priority level is
							;  indicated
			LDT_RX_8022_TYPE2:1		; 802.2 type 2 packet
			LDT_RX_8022_TYPE1:1		; 802.2 type 1 packet
			LDT_DEST_DIRECT:1
			LDT_DEST_MAC_FRAME:1		; exclusive bit
			LDT_DEST_ERRORED:1		; super exclusive bit
			LDT_DEST_SOURCE_ROUTE:1		; source route info
			LDT_DEST_REMOTE_MULTICAST:1
			LDT_DEST_REMOTE_UNICAST:1
			LDT_DEST_BROADCAST:1
			LDT_DEST_MULTICAST:1
		LDestType	end
		LDT_RX_NOT_8022		equ	0000h	; non-802.2 packet
		LDT_DEST_PROMISCUOUS	equ	0ffffh	; all packets (filter
							;  mask set by
							;  protocols to get all
							;  packets, including
							;  errors

		LPacketAttrib	record
			LPA_IMM_ADDR_MSB_FORM:1	; immediate addr is MSB format
			:8
			LPA_MALFORM_ERR:1	; malformed packet
			LPA_TYPE_ERR:1		; packet for unsupported frame
						;  type
			LPA_BIG_ERR:1		; packet larger than media
						;  allowed
			:1
			LPA_RUNT_ERR:1		; runt packet
			LPA_ALIGN_ERR:1		; CRC/frame alignment error
			LPA_CRC_ERR:1		; CRC error / (FCS error)
		LPacketAttrib	end

		StackChainStruct	struct
			SCS_link	fptr.StackChainStruct	; link field
			SCS_boardNum	word		; logical board #
			SCS_positReq	StackRequestType ; chain pos requested
			SCS_handler	fptr.far	; Tx or Rx handler
			SCS_control	fptr.far	; control entry point
			SCS_id		word		; stack ID
			SCS_mask	LDestType
			SCS_reserved	dword
		StackChainStruct	ends

		LookAheadStruct	struct
			LAS_mediaHeaderPtr	fptr
			LAS_lookAheadPtr	fptr
			LAS_lookAheadLen	word
			LAS_protId		ProtocolID
			LAS_boardNum		word
			LAS_dataSize		word
			LAS_immAddress		NodeAddr
			LAS_packetAttrib	LPacketAttrib
			LAS_destType		LDestType
			LAS_startCopyOffset	word
			LAS_priorityLevel	byte
			LAS_reserved		byte	3 dup (?)
		LookAheadStruct	ends


LSLGenFunc				etype	word, 0, 2
	LSLGF_ADD_GENERAL_SERVICE	enum	LSLGenFunc, 0x0005
		; PASS:		ES:SI	-> GenServControlBlock
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLGF_REMOVE_GENERAL_SERVICE	enum	LSLGenFunc, 0x0006
		; PASS:		ES:SI	-> GenServControlBlock
		; RETURN:	nothing
		; DESTROY:	nothing
	LSLGF_GET_NET_CFG_PATH		enum	LSLGenFunc, 0x0007
		; PASS:		nothing
		; RETURN:	AX	<- LSLErrorCode
		;		DS:DX	<- ASCIIZ pathname for NET.CFG on success
		; DESTROY:	nothing
	LSLGF_GET_CRIT_SECT_COUNT	enum	LSLGenFunc, 0x000A
		; PASS:		nothing
		; RETURN:	BX	<- nesting level of CS
		; DESTROY:	nothing
	LSLGF_SERVICE_EVENTS		enum	LSLGenFunc, 0x000B
		; PASS:		interrupts disabled
		; RETURN:	interrupts disabled
		; DESTROY:	nothing
		; NOTES: I have no idea what this does...
	LSLGF_GET_STACK_ECB		enum	LSLGenFunc, 0x000C
		; PASS:		DS:SI	-> LookaheadStruct
		; 		interrupts disabled
		; RETURN:	AX	<- LSLErrorCode
		;		ZF	<- set on success
		;		ES:SI	-> ECB on success
		;		interrupts disabled

MLIDFunctions			etype	word, 0, 1
		;
		; All functions take AX -> logical board #
	MLIDF_GET_MLID_CONFIG		enum	MLIDFunctions, 0x0000
	MLIDF_GET_MLID_STATS		enum	MLIDFunctions, 0x0001
	MLIDF_ADD_MULTICAST_ADDR	enum	MLIDFunctions, 0x0002
	MLIDF_DEL_MULTICAST_ADDR	enum	MLIDFunctions, 0x0003
	MLIDF_SHUTDOWN			enum	MLIDFunctions, 0x0005
	MLIDF_RESET			enum	MLIDFunctions, 0x0006
	MLIDF_SET_LOOKAHEAD_SIZE	enum	MLIDFunctions, 0x0009
	MLIDF_CHANGE_PROMISCUITY	enum	MLIDFunctions, 0x000A
	MLIDF_REGISTER_MONITOR		enum	MLIDFunctions, 0x000B

ProtoStackFunc				etype	word, 0, 1
	PSF_GET_STACK_CONFIG		enum	ProtoStackFunc, 0x0000
	PSF_GET_STACK_STATS		enum	ProtoStackFunc, 0x0001
	PSF_BIND_TO_MLID		enum	ProtoStackFunc, 0x0002
	PSF_UNBIND_TO_MLID		enum	ProtoStackFunc, 0x0003
	PSF_MLID_DEREGISTER		enum	ProtoStackFunc, 0x0004

AESECBStruct		struct
	AESECBS_aesLink		dword
	AESECBS_msecDelay	dword
	AESECBS_aesStatus	dword
	AESECBS_expireFunc	fptr.far
AESECBStruct		ends

LSLConfigStruct		struct
	LSLCS_tabVerMajor	byte
	LSLCS_tabVerMinor	byte
	LSLCS_reserved1		byte 8 dup (?)
	LSLCS_lslVerMajor	byte
	LSLCS_lslVerMinor	byte
	LSLCS_maxBoards		byte
	LSLCS_maxProtos		byte
	LSLCS_reserved2		byte 12 dup (?)
LSLConfigStruct		ends

LSLStatsStruct		struct

	LSLSS_tabVerMajor	byte
	LSLSS_tabVerMinor	byte
	LSLSS_numGenCounts	word
	LSLSS_validCountMask	dword
	LSLSS_totalTxPackets	dword
	LSLSS_res1		dword 2 dup (?)
	LSLSS_aesEventCount	dword
	LSLSS_postponedEvents	dword
	LSLSS_cancelAESFailures	dword
	LSLSS_res2		dword 2 dup (?)
	LSLSS_totalRxPackets	dword
	LSLSS_unclaimedPackets	dword
	LSLSS_numCustoms	word
	LSLSS_startCustom label dword
LSLStatsStruct			ends

ProtoStatStruct		struct
	PSS_tabVerMajor		byte
	PSS_tabVerMinor		byte
	PSS_numGenCounters	word
	PSS_validCountMask	dword
	PSS_totalTxPackets	dword
	PSS_totalRxPackets	dword
	PSS_ignoreRxPackets	dword
	PSS_numCustoms		word
	PSS_startCustom	label	dword
ProtoStatStruct		ends

ProtoStackConfigStruct		struct
	PSCS_tabVerMajor	byte
	PSCS_tabVerMinor	byte
	PSCS_longName		fptr.ASCIIZ
	PSCS_shortNAme		fptr.ASCIIZ ; max 15 chars
	PSCS_protVerMajor	byte
	PSCS_protVerMinor	byte
	PSCS_reserved		byte 16 dup (?)
ProtoStackConfigStruct		ends


	MultiCastMode		etype	byte,	0, 1
		MCM_GROUP	enum	MultiCastMode, 0x0
		MCM_INVALID	enum	MultiCastMode, 0x1
		MCM_MLID	enum	MultiCastMode, 0x2
		MCM_HW		enum	MultiCastMode, 0x3


SharingFlags	record
	SF_SHARE_DMA2	:1
	SF_SHARE_DMA1	:1
	SF_SHARE_IRQ2	:1
	SF_SHARE_IRQ1	:1
	SF_SHARE_MEM2	:1
	SF_SHARE_MEM1	:1
	SF_SHARE_IO2	:1
	SF_SHARE_IO1	:1
SharingFlags	end

MulticastFlags	record
					:5
	MF_MULTI_MODE	   MultiCastMode:2
					:6
	MF_MICRO_CHANNEL		:1
	MF_ISA_CARD			:1
	MF_EISA_CARD			:1
MulticastFlags	end

MLIDConfigStruct		struct
	MLIDCS_signature	byte	'HardwareDriverMLID        '
	MLIDCS_tabVerMinor	byte
	MLIDCS_tabVerMajor	byte
	MLIDCS_nodeAddr		NodeAddr
	MLIDCS_mlidMode		word
	MLIDCS_boardNum		word
	MLIDCS_boardInstance	word
	MLIDCS_maxPacketSize	word
	MLIDCS_bestDataSize	word
	MLIDCS_worstDataSize	word
	MLIDCS_longNICName	fptr.ASCIIZ
	MLIDCS_shortNICName	fptr.ASCIIZ
	MLIDCS_frameMediaType	fptr
	MLIDCS_reserved1	word
	MLIDCS_frameTypeID	word
	MLIDCS_transportTime	word	; in msecs
	MLIDCS_sourceRoute	fptr
	MLIDCS_lookaheadSize	word
	MLIDCS_lineSpeed	word	; MBps if high bit clear, lese KBps
	MLIDCS_queueDepth	word
	MLIDCS_reserved2	byte 6 dup (?)
	MLIDCS_drvVerMajor	byte
	MLIDCS_drvVerMinor	byte
	MLIDCS_multicastFlags	MulticastFlags
	MLIDCS_sendRetries	word
	MLIDCS_configTableLink	dword
	MLIDCS_mlidSharingFlags	SharingFlags
	MLIDCS_slotNum		word
	MLIDCS_ioAddr1		word
	MLIDCS_ioRange1		word
	MLIDCS_ioAddr2		word
	MLIDCS_ioRange2		word
	MLIDCS_memAddr1		dword
	MLIDCS_memSize1		word
	MLIDCS_memAddr2		dword
	MLIDCS_memSize2		word
	MLIDCS_irq1		byte
	MLIDCS_irq2		byte
	MLIDCS_dma1		byte
	MLIDCS_dma2		byte
MLIDConfigStruct		ends

MLIDMode	record
	MDLIDM_OCTET_REVERSAL		:1
	MDLIDM_NON_CANONICAL_NODE	:1
	MDLIDM_PROMISCUOUS		:1
					:5
	MDLIDM_LDATASIZE_IN_LOOKAHEAD	:1
	MDLIDM_RAW_SEND			:1
	MDLIDM_REQUIRES_POLLING		:1
					:1
	MDLIDM_MULTICASTING		:1
					:1
	MDLIDM_USES_DMA			:1
	MDLIDM_REAL_MODE_DRIVER		:1
MLIDMode	end

MLIDStatsStruct		struct
	MLIDSS_tabVerMajor	byte
	MLIDSS_tabVerMinor	byte
	MLIDSS_numGenCounters	word
	MLIDSS_validCounterMask	dword
	MLIDSS_totalTxCount	dword
	MLIDSS_totalRxCount	dword
	MLIDSS_NoECBAvailCount	dword
	MLIDSS_txTooBigCount	dword
	MLIDSS_txTooSmallCount	dword
	MLIDSS_rxOverflowCount	dword
	MLIDSS_rxTooBigCount	dword
	MLIDSS_rxTooSmallCount	dword
	MLIDSS_txMiscCount	dword
	MLIDSS_rxMiscCount	dword
	MLIDSS_txRetryCount	dword
	MLIDSS_rxCSErrorCount	dword
	MLIDSS_rxMismatchCount	dword
	MLIDSS_numCustoms	word
	MLIDSS_startCustom label dword
MLIDStatsStruct		ends

ProtoStackInfoStruct		struct
	PSIS_short		fptr.ASCIIZ
	PSIS_recvHandler	fptr.far
	PSIS_cntrlHandler	fptr.far
ProtoStackInfoStruct		ends

StackInfoStruct			struct
	SIS_recvHandler		fptr.far
	SIS_cntrlHandler	fptr.far
StackInfoStruct			ends

GenServControlBlock	struct
	GSCB_nextGSCB		fptr.GenServControlBlock
	GSCB_entry		fptr.far
	GSCB_commandCode	word
GenServControlBlock	ends

if 0	; What's this?
LookaheadStruct			struct
	LS_mediaHeader		fptr
	LS_lookaheadBuffer	fptr
	LS_sizeLookaheadBuffer	word
	LS_protoID		ProtocolID
	LS_boardNum		word
	LS_lookaheadSize	word	; Huh?  How's this different?
LookaheadStruct			ends
endif

PacketFragmentPtr	struct
	PFP_addr	fptr
	PFP_size	word
PacketFragmentPtr	ends

LSLErrorCode				etype	word, 0, 1
	LSLEC_SUCCESSFUL		enum	LSLErrorCode, 0x0000
	LSLEC_PENDING_SUCCESS		enum	LSLErrorCode, 0x0001
	LSLEC_OUT_OF_RESOURCES		enum	LSLErrorCode, 0x8001
	LSLEC_BAD_PARAMETER		enum	LSLErrorCode, 0x8002
	LSLEC_NO_MORE_ITEMS		enum	LSLErrorCode, 0x8003
	LSLEC_ITEM_NOT_PRESENT		enum	LSLErrorCode, 0x8004
	LSLEC_FAILED			enum	LSLErrorCode, 0x8005
	LSLEC_RX_OVERFLOW		enum	LSLErrorCode, 0x8006
	LSLEC_CANCELLED			enum	LSLErrorCode, 0x8007
	LSLEC_BAD_COMMAND		enum	LSLErrorCode, 0x8008
	LSLEC_DUPLICATE_ENTRY		enum	LSLErrorCode, 0x8009
	LSLEC_NO_SUCH_HANDLER		enum	LSLErrorCode, 0x800A
	LSLEC_NO_SUCH_DRIVER		enum	LSLErrorCode, 0x800B

;
; We make use of the protocol workspace field (ECB_protocolWS) in the ECB
; struct in the form of an LSLPacketRef struct.  Since the ECB_protocolWS
; field is defined to be 8 bytes (see Novell ODI spec), our LSLPacketRef
; must be 8 bytes.
;
LSLPacketRef	union
	LSLPR_self	optr.PacketHeader	; optr to the packet itself,
						;  used during transmittion
	LSLPR_next	optr.PacketHeader	; optr to the next packet, used
						;  by ARP table
	LSLPR_unused	byte	8 dup (?)	; pad to 8-byte boundary
LSLPacketRef	ends

ECB		struct
	ECB_nextLink		fptr.ECB
	ECB_prevLink		fptr.ECB
	ECB_status		LSLErrorCode
	ECB_ESR			fptr.far
	ECB_stackID		word
	ECB_protID		ProtocolID
	ECB_boardNum		word
	ECB_immAddr		NodeAddr
	ECB_driverWS		byte 4 dup (?)
	ECB_protocolWS		LSLPacketRef	; "byte 8 dup (?)" from Novell
						;  ODI spec
		.assert size LSLPacketRef eq 8,
			"LSLPacketRef does not match ECB_protocolWS in size"
	ECB_dataLen		word
	ECB_fragCount		word
	ECB_fragments		label	PacketFragmentPtr
ECB		ends

;
; Only used for declaring receive buffer array.  Use ECB whenever possible.
;
ECBAndFragDesc	struct
	EAFD_ECB	ECB
	EAFD_fragDesc	PacketFragmentPtr
ECBAndFragDesc	ends





;----------------------------------------------------------------------
; ARP stuff
;----------------------------------------------------------------------

;
; Structure for using ARP for IP -> 10Mb/s Ethernet resolution.
;
IpEtherArp	struct
	IEA_arpHeader		ArpHeader
	IEA_senderHwAddr	NodeAddr
	IEA_senderProtoAddr	IPAddr
	IEA_targetHwAddr	NodeAddr
	IEA_targetProtoAddr	IPAddr
IpEtherArp	ends



;
; Structures for Ip -> 10Mb/s Ethernet ARP table entries
;
IEAEAddrOrTimestamp	union
	IAOT_etherAddr	NodeAddr	; ethernet address (for complete entry)
	IAOT_timestamp	word		; lower word of system counter when
					;  request was made (for incomplete
					;  entry)
IEAEAddrOrTimestamp	end

IpEtherArpEntry	struct
	IEAE_ipAddr	IPAddr		; internet address, stored in network
					;  byte order for speed
	IEAE_addrOrTs	IEAEAddrOrTimestamp
	IEAE_lastRef	byte		; minutes since last reference
	IEAE_flags	ArpEntryFlags
	IEAE_packets	optr.PacketHeader	; list of packets waiting for
						;  this IP addr until resolved
						;  or timeout
IpEtherArpEntry	ends





;
; FatalErrors
;
PROTOCOL_ID_MISMATCH					enum	FatalErrors
PACKET_SIZE_MUST_BE_KNOWN				enum	FatalErrors

OUT_OF_RECV_BUFFERS					enum	Warnings
IP_PACKET_TOO_SMALL					enum	Warnings
IP_PACKET_TOO_LARGE_FOR_US				enum	Warnings
ARP_PACKET_TOO_SMALL					enum	Warnings
ARP_PACKET_TOO_LARGE_FOR_US				enum	Warnings
RECV_BUFFER_OVERFLOW					enum	Warnings
RECV_CANCELLED_BY_MLID					enum	Warnings

DebugLogFuncs			etype	byte
	LOG_NULL		enum	DebugLogFuncs
	LOG_ARPRECV_START	enum	DebugLogFuncs
	LOG_ARPRECV_END		enum	DebugLogFuncs
	LOG_ARPRECV_COMP_START	enum	DebugLogFuncs
	LOG_ARPRECV_COMP_END	enum	DebugLogFuncs
	LOG_IPRECV_START	enum	DebugLogFuncs
	LOG_IPRECV_END		enum	DebugLogFuncs
	LOG_IPRECV_COMP_START	enum	DebugLogFuncs
	LOG_IPRECV_COMP_END	enum	DebugLogFuncs
	LOG_TRANSMIT_START	enum	DebugLogFuncs
	LOG_TRANSMIT_END	enum	DebugLogFuncs
	LOG_ARP_SEND_COMP_START	enum	DebugLogFuncs
	LOG_ARP_SEND_COMP_END	enum	DebugLogFuncs
