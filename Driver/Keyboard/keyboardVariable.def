COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1990 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Keyboard Driver
FILE:		keyboardVariable.def

AUTHOR:		Gene Anderson, Feb  8, 1990

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	eca	2/ 8/90		Initial revision

DESCRIPTION:
	variables for the keyboard driver.
		
	$Id: keyboardVariable.def,v 1.1 97/04/18 11:46:59 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


idata	segment

semKbdStrat		Semaphore	<>	; Semaphore for kbd Strategy
						;	routines
idata	ends


; For strategy routine: intialized to 0 when driver loaded
;	-- IS NOT cleared by KbdInit
;
udata	segment
kbdStratFlags		KbdStratFlags	<>
udata	ends

idata	segment
kbdMonitor		Monitor	<>	; input monitor
idata	ends

udata	segment
kbdCurDownElement	fptr.KeyDownElement	0	; pointer to current
							;  KeyDownElement
kbdOutputProcHandle	hptr	0	; where to send events

kbdShiftState		ShiftState 0	; State of shift keys & modifiers
kbdToggleState		ToggleState 0	; State of toggle keys
kbdXState1		byte	0	; State of language toggle keys
kbdXState2		byte	0	; Additional state extension

kbdModeIndState		ToggleState 0	; State of mode indicators on keyboard
kbdTypematicState	KbdTypematics 0	; State of kbd typematic value

;
; list of keys down at one time:
;
keysDownList		KeyDownElement	MAX_KEYS_DOWN dup (<>)

; The purpose of this list is to keep track of keys that have been pressed.
; This allows us to:
;	1) Know if a key is repeated.
;	2) Implement the concept of STATE-capturing on the press
;	   of any key (state of SHIFT, etc. on press of key is
;	   preserved throughout repeat & release, even if SHIFT,
;	   etc. keys change state during this time period.)
;	3) Assures a release for every initial press. (Even if
;	   SHIFT changes before release)
;	4) Prevents repeated non-ALT modified keys being sent if:
;	    ALT-press
;	    key-press
;	    ALT-release
;	    delay till auto-repeat..
;	5) Know if a repeated key was modified by a previous accent character.
;
; when a key is pressed, it's scan code & data portion of the event
; created are stored here.  The element is removed on receiving a release
; of the key, at which time the same data is passed as part of the event.
; If a key is repeated by the keyboard, it will be found here, & the REPEAT
; flag will be sent, & that data sent as the event.

if DBCS_PCGEOS
kbdAccentPending	Chars	0	; Accent char of last char if lone
else
kbdAccentPending	byte	0	; Accent char of last char if lone
endif
					;	accent that could translate
					;	next char (or 0 if not)
kbdAccentOffset		byte	0	; Offset of accent if pending.


ifidn			HARDWARE_TYPE, <PC>

kbdSQSize		byte	0	; # of bytes in kbdSendQueue
kbdSendQueue		db	SEND_QUEUE_SIZE dup (?)

kbdCmdByte		KbdCommandBits	; Saved value of original keyboard
					;	command byte

kbdScanExtension	byte	0	; Keyboard extension byte, if any

endif
					; Location to store away original
					;	keboard vector
kbdVector		fptr.far	0

keyboardOptions		KeyboardOptions

ifidn			HARDWARE_TYPE, <PC>
;
; Table of registered hotkeys. High byte is ShiftState, low byte is scan code
; 
keyboardHotkeys		word	MAX_HOTKEYS dup(?)
;
; Action descriptors to send out if hotkey recognized. Broken into their
; respective words to make loading them a bit faster & because the
; ActionDescriptor structure is no more.
; 
keyboardADChunks	word	MAX_HOTKEYS dup(?)
keyboardADHandles	word	MAX_HOTKEYS dup(?)
keyboardADMessages	word	MAX_HOTKEYS dup(?)

;
; Number of slots in keyboardHotKeys table that are populated. This is actually
; a high-water mark, so if slots in the middle are removed, the other entries
; remain where they are. Only when the final entry in the table is removed do
; we check the preceding ones to locate a non-zero entry and set the number
; there.
;
; Maybe.
; 
keyboardNumHotkeys	word	0
endif


if			_E3G_KBD_SCAN

kbdIntCols		word	KBD_NUM_COLS dup(?)
kbdPollCols		word	KBD_NUM_COLS dup(?)
kbdInt			fptr.far	0
kbdPollCount		word		0
kbdRateCount		byte		0

PENE <kbdDigTimerRunning	byte	0>
      ; This is true if the timer to unmask the digitizer interrupt is
      ; running.

endif		      ; _E3G_KBD_SCAN

udata	ends

idata	segment

if			_E3G_KBD_SCAN
kbdTypematicValue	word KBD_TYPEMATIC
; high byte = Typematic delay (value*25ms)
; low byte  = Typematic rate  (value*25)

endif		      ; _E3G_KBD_SCAN

; Q&D way to go from number (0-7) to corresponding bit
;
bitTable	label	byte
	byte	00000001b
	byte	00000010b
	byte	00000100b
	byte	00001000b
	byte	00010000b
	byte	00100000b
	byte	01000000b
	byte	10000000b

idata	ends



