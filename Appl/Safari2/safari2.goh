/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari Builder
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <Ansi/string.h>
@include <Ansi/stdio.h>
@include <win.h>
@include <safari.goh>
@include <game.goh>
@include <sound.h>
@include <initfile.h>

#define VUM_DLYD  VUM_DELAYED_VIA_APP_QUEUE

#define COUNTDOWN_TIMER_DEFAULT_TIME   20

#define PLAYER_NAME_MAX_LENGTH    20

#define SCORE_PIXEL_WIDTH         40

typedef ByteEnum GameMode;
#define GM_IDLE             0
#define GM_WAITING          1
#define GM_ASKING_QUESTION  2
#define GM_SHOWING_ANSWER   3

#define NUM_LED_FLASHES     8
#define QUESTION_FLASH_TIME 10

#define TIME_GETTING_LOW_TIME 5

#define SHOW_ANSWER_DEFAULT 5
#define SHOW_ANSWER_MIN 2
#define SHOW_ANSWER_MAX 10

typedef ByteFlags QuestionStatus;
#define QS_NUM_LEFT   0x03	/* number of times left to ask */
#define QS_QUESTION   0x04	/* question exists */
#define QS_PLAYER_1   0x10	/* player 1 */
#define QS_PLAYER_2   0x20	/* player 2 */
#define QS_RIGHT      0x40	/* answered right */
#define QS_WRONG      0x80	/* answered wrong */

typedef ByteFlags SoundStatus;
#define SS_SYNTH   0x1
#define SS_SAMPLED 0x2

typedef QuestionStatus QuizArray[SAFARI_MAX_QUESTIONS];

#define BACKGROUND_WIDTH 40
#define BACKGROUND_HEIGHT 80

/**************************************************************************
 *		Class & Message Definitions
 *************************************************************************/

/***
 *** SafariAppClass: our GenApplicationClass
 ***/
@class  SafariAppClass, GenApplicationClass;

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_SAF_APP_SET_NUM_PLAYERS;
/*
 * Set the number of players
 */

@message void MSG_SAF_APP_QUIT_QUIZ_OR_APP();
/*
 * Quit the quiz or the app
 * Pass:   none
 * Return: none
 */

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SAF_APP_RESTART_QUIZ;
/*
 * restart the quiz after changing the number of players
 */

@endc

/***
 *** SafariProcessClass: our process class
 ***/
@class	SafariProcessClass, GenProcessClass;

@message void MSG_SAF_PROCESS_PLAY_SOUND(StandardPath stdPath, TCHAR *path, TCHAR *filename);
/*
 * Play a sampled sound
 * Pass:   stdPath - StandardPath
 *         path - path
 *         filename - filename
 * Return: none
 */

@endc

/***
 *** SafGameCardClass: adds selecting answers
 ***/
@class SafGameCardClass, GameCardClass;

@message void MSG_SAF_GAME_CARD_DRAW_SELECTION(GStateHandle gs);
/*
 * Draw the selection, if any
 * Pass:   gs - GState handle
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_SET_SELECTION(word left, word top, word right, word bottom);
/*
 * Set the selection
 * Pass:   (left,top,right,bottom) - bounds
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_CLEAR_SELECTION();
/*
 * clear the selection, if any
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_SET_QUIZ(PathName *path, StandardPath stdPath, FileLongName *filename);
/*
 * Set the quiz
 * Pass:   path - PathName
 *         stdPath - StandardPath
 *         filename - FileLongName of quiz
 */

@message void MSG_SAF_GAME_CARD_ASK_QUESTION();
/*
 * Ask a question
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_RIGHT_ANSWER();
/*
 * The player answered the question correctly
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_WRONG_ANSWER(Boolean timesUp);
/*
 * The player answered the question incorrectly
 * Pass:   timesUp - TRUE if timer expired
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_SHOW_ANSWER();
/*
 * Show the answer
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_COUNTDOWN();
/*
 * Countdown for showing the answer
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_INIT_FOR_QUESTION(Boolean noDelete);
/*
 * initialize in prepearation for a question
 * Pass:   noDelete - TRUE to not clear question text
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_NEXT_QUESTION();
/*
 * Set up to ask the next question
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_END_OF_QUIZ();
/*
 * Asked all the questions
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_RESET_QUIZ();
/*
 * Reset the quiz to take again
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_STOP_QUIZ();
/*
 * Stop taking the quiz
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_CLOSE_FILE();
/*
 * close any opened file(s)
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_ANSWER_QUESTION();
/*
 * try answering a question
 * Pass:   none
 * Return: none
 */

@message FileHandle MSG_SAF_GAME_CARD_GET_QUIZ();
/*
 * return quiz file if loaded
 * Pass:   none
 * Return: file handle of quiz else 0
 */

@message void MSG_SAF_GAME_CARD_NEXT_QUIZ();
/*
 * go to the next linked quiz
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_PLAY_ANSWER_SOUND(word *synthSound, word synthSize, TCHAR *sampSound);
/*
 * play an answer sound
 * Pass:   synthSound - ptr to synthesized sound, if any
 *         synthSize - size of synthesized sound
 *         sampSound - ptr to sample sound (.WAV)
 * Return: none
 */

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SAF_GAME_CARD_SET_SELECTION_TYPE;
/*
 * set the selection type
 * Pass:   selection - TRUE for outline; FALSE for filled
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_RESTART_QUIZ();
/*
 * restart the quiz after changing the number of players
 * Pass:   none
 * Return: none
 */

@message void MSG_SAF_GAME_CARD_INIT_QUIZ();
/*
 * (re)initialize a quiz
 * Pass:   none
 * Return: none
 */

    @instance Rectangle      SBGCI_selection;
    @instance QuestionStatus SBGCI_curPlayer;
    @instance GameMode       SBGCI_mode;
    @instance byte           SBGCI_curQuestion;
    @instance QuizArray      SBGCI_quizArray;
    @instance TimerHandle    SBGCI_timer;
    @instance word           SBGCI_timerID;
    @instance word           SBGCI_countdown;
    @instance SafariFilterType SBGCI_filterType;
    @instance Boolean        SBGCI_frameRect;

@endc

/***
 *** LogoDisplayClass
 ***/
@class LogoDisplayClass, GenInteractionClass;

@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_LOGO_DISPLAY_FILE_SELECTED;

    @instance VMBlockHandle LDI_bitmap;
    @instance Boolean       LDI_imported;
    @instance FileHandle    LDI_file;

@endc

/***
 *** GameTimerClass
 ***/
@class GameTimerClass, SpacerClass;

@message void MSG_GAME_TIMER_START(Boolean resume);
/*
 * start counting down
 * Pass:   resume - TRUE to resume from pause
 * Return: none
 */

@message void MSG_GAME_TIMER_STOP();
/*
 * stop counting down
 * Pass:   none
 * Return: none
 */

@message void MSG_GAME_TIMER_COUNTDOWN();
/*
 * one more tick of the timer
 * Pass:   none
 * Return: none
 */

@message void MSG_GAME_TIMER_PAUSE();
/*
 * pause the timer
 * Pass:   none
 * Return: none
 */

    @instance TimerHandle        GTI_timer;
    @instance word               GTI_timerID;
    @instance sword              GTI_countdown;
    @instance sword              GTI_maxCount;
    @instance SafariTimebarState GTI_state;

@endc

/***
 *** SettingsButtonClass: minimize button when no title bar, etc.
 ***/
/* jh - don't need any more
@class SettingsButtonClass, SpacerClass;
@endc
*/

/***
 *** PlayerInputClass: for keyboard input
 ***/

@class PlayerInputClass, GenTextClass;

@message sword MSG_PLAYER_INPUT_GET_ANSWER();
/*
 * convert the text to an answer number
 * Pass:   none
 * Return: number (-1 if no text)
 */

    @instance word    PII_width;

@endc

/***
 *** SafBackgroundClass: for drawing wacky backgrounds
 ***/

@class SafBackgroundClass, GenInteractionClass;

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SAF_BACKGROUND_SET_BACKGROUND;
/*
 * set the background bitmap
 * Pass:   background - background number
 * Return: none
 */

@message void MSG_SAF_BACKGROUND_RANDOM_BACKGROUND();
/*
 * set a new random background, if desired
 * Pass:   none
 * Return: none
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_SAF_BACKGROUND_QUERY_MONIKER;
/*
 * Get the moniker for the specified BG list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

    @instance word SBI_background = 0;
    @instance word SBI_backIndex = 1;

@endc
