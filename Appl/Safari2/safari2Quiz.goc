/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include "safari2.goh"
@include "global.goh"



/***********************************************************************
 *	QuestionLeft
 ***********************************************************************
 * SYNOPSIS:	    See if a question is left
 * PASS:            question - QuestionStatus for question
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
Boolean
QuestionLeft(QuestionStatus question, QuestionStatus player)
{
    if (((question & player) || !(question & (QS_PLAYER_1|QS_PLAYER_2)))
	&& (question & QS_NUM_LEFT)
	&& !((question & QS_RIGHT) || (question & QS_WRONG))) {
	return(TRUE);
    }
    return(FALSE);
}


/***********************************************************************
 *	QuizInit
 ***********************************************************************
 * SYNOPSIS:	    initialize a quiz
 * PASS:            quiz - ptr to QuizArray
 *                  numQuestions - # of questions used
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
void
QuizInit(QuizArray quiz, word numQuestions)
{
    word i;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (i < numQuestions) {
	    quiz[i] = QS_QUESTION | 3;
	} else {
	    quiz[i] = 0;
	}
    }
}



/***********************************************************************
 *	QuizRestart
 ***********************************************************************
 * SYNOPSIS:	    restart a quiz
 * PASS:            quiz - ptr to QuizArray
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	10/10/99	Initial Revision
 *
 ***********************************************************************/
void
QuizRestart(QuizArray quiz)
{
    word i;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (quiz[i] & QS_QUESTION) {
	    quiz[i] = QS_QUESTION | 3;
	}
    }
}


/***********************************************************************
 *	QuizNumLeft
 ***********************************************************************
 * SYNOPSIS:	    Get number of questions left
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          number of questions left
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
word
QuizNumLeft(QuizArray quiz, QuestionStatus player)
{
    word i, numQuestions = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (QuestionLeft(quiz[i], player)) {
	    numQuestions++;
	}
    }
    return(numQuestions);
}


/***********************************************************************
 *	QuizChooseQuestion
 ***********************************************************************
 * SYNOPSIS:	    Choose a question
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          question #
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
word
QuizChooseQuestion(QuizArray quiz, QuestionStatus player)
{
    word i, q, qi, numQuestions = QuizNumLeft(quiz, player);

    q = GameRandom(numQuestions);
    for (i = qi = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (QuestionLeft(quiz[i], player)) {
	    /*
	     * if the correct question, return the index
	     */
	    if (qi == q) {
		quiz[i] |= player; /* set for this player */
		quiz[i]--;	   /* asked one more time */
		break;
	    }
	    /*
	     * one more match
	     */
	    qi++;
	}
    }
    return(i);
}



/***********************************************************************
 *	QuizNextQuestion
 ***********************************************************************
 * SYNOPSIS:	    Get the next question
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          question #
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	6/17/99		Initial Revision
 *
 ***********************************************************************/
word
QuizNextQuestion(QuizArray quiz, QuestionStatus player)
{
    word i;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (QuestionLeft(quiz[i], player)) {
	    quiz[i] |= player; /* set for this player */
	    quiz[i]--;	   /* asked one more time */
	    break;
	}
    }
    return(i);
}


/***********************************************************************
 *	QuizNumRight
 ***********************************************************************
 * SYNOPSIS:	    Get number of questions right for a player
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          number of questions right
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
word
QuizNumRight(QuizArray quiz, QuestionStatus player)
{
    word i, numQuestions = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if ((quiz[i] & QS_RIGHT) && (quiz[i] & player)) {
	    numQuestions++;
	}
    }
    return(numQuestions);
}


/***********************************************************************
 *	QuizNumTotal
 ***********************************************************************
 * SYNOPSIS:	    Get number of questions for a player
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          number of questions
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/13/99		Initial Revision
 *
 ***********************************************************************/
word
QuizNumTotal(QuizArray quiz, QuestionStatus player)
{
    word i, numQuestions = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (quiz[i] & player) {
	    numQuestions++;
	}
    }
    return(numQuestions);
}



/***********************************************************************
 *	QuizReset
 ***********************************************************************
 * SYNOPSIS:	    reset a quiz
 * PASS:            quiz - ptr to QuizArray
 * RETURN:          num left to ask (0 if asked maximum times)
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/14/99		Initial Revision
 *
 ***********************************************************************/
word
QuizReset(QuizArray quiz)
{
    word i, left = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if (quiz[i] & QS_WRONG) {
	    quiz[i] &= ~QS_WRONG;
	    left |= (quiz[i] & QS_NUM_LEFT);
	}
    }
    return(left);
}



/***********************************************************************
 *	QuizScore
 ***********************************************************************
 * SYNOPSIS:	    Get the score for a player
 * PASS:            quiz - ptr to QuizArray
 *                  player - QS_PLAYER_1 or QS_PLAYER_2
 * RETURN:          score
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/14/99		Initial Revision
 *
 ***********************************************************************/
word
QuizScore(QuizArray quiz, QuestionStatus player)
{
    word i, score = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if ((quiz[i] & player) && (quiz[i] & QS_RIGHT)) {
	    score += (quiz[i] & QS_NUM_LEFT)+1;
	}
    }
    return(score);
}



/***********************************************************************
 *	QuizNumReview
 ***********************************************************************
 * SYNOPSIS:	    Get number of questions left for review
 * PASS:            quiz - ptr to QuizArray
 * RETURN:          number of questions left
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/22/99		Initial Revision
 *
 ***********************************************************************/
word
QuizNumReview(QuizArray quiz)
{
    word i, numQuestions = 0;

    for (i = 0; i < SAFARI_MAX_QUESTIONS; i++) {
	if ((quiz[i] & QS_NUM_LEFT) && (quiz[i] & QS_WRONG)) {
	    numQuestions++;
	}
    }
    return(numQuestions);
}
