/*
 * Project:	PC/GEOS
 * Module:	TwoDLists (Sample PC/GEOS application)
 * File:	twodlists.ui
 *
 * Author:	Eric E. Del Sesto
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * RCS STAMP:
 *	$Id: twodlists.ui,v 1.1 97/04/04 16:34:54 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

#include "generic.uih"

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/

start	AppResource;

TwoDListsApp = GenApplication {
	children = TwoDListsPrimary;	
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = TwoDListsPrimary;
	moniker = list {		
		TwoDListsTextMoniker	
	}
}

visMoniker TwoDListsTextMoniker = "TwoDLists Sample Application";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/

start	Interface;		

TwoDListsPrimary = GenPrimary {
    children = TwoDListsGroup;		
    hints = {
	    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE,
	    HINT_SIZE_WINDOW_AS_DESIRED
    }
}

TwoDListsGroup = GenInteraction {
  children = FirstDList,
            TransferTriggers,
            SecondDList;
  hints = {
	  HINT_ORIENT_CHILDREN_HORIZONTALLY
  }
}

FirstDList = GenDynamicList {
  moniker = "First list:";
  hints = {
    HINT_PLACE_MONIKER_ABOVE,
    /* Make scrollable. */
    HINT_ITEM_GROUP_SCROLLABLE
  }

  /* Let's make the list have extended-selection behavior. */
  behaviorType = extendedSelection;  
  

  /* Initializing first list to have all the colors. */
  numItems = NUM_TOTAL_COLORS;

  /* Message and destination for sending applies to user changes of the list */
  applyMsg = MSG_TDLP_FIRST_DLIST_APPLY;
  destination = process;

  /* Message to send to destination to query for monikers */
  queryMsg = MSG_TDLP_FIRST_DLIST_MONIKER_QUERY;
}

TransferTriggers = GenInteraction {
  children = FirstToSecondTransferTrigger,
             SecondToFirstTransferTrigger;
  hints = {
      HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
      HINT_CENTER_CHILDREN_VERTICALLY,
      HINT_ORIENT_CHILDREN_VERTICALLY
  }
}

FirstToSecondTransferTrigger = GenTrigger {
  moniker = "->";
  genStates = default -enabled;
  action = MSG_TDLP_FIRST_TO_SECOND_TRANSFER, process;
}

SecondToFirstTransferTrigger = GenTrigger {
  moniker = "<-";
  genStates = default -enabled;
  action = MSG_TDLP_SECOND_TO_FIRST_TRANSFER, process;
}

SecondDList = GenDynamicList {
  moniker = "Second list:";

  hints = {
	  HINT_PLACE_MONIKER_ABOVE,
	  /* Make scrollable. */
	  HINT_ITEM_GROUP_SCROLLABLE
  }

  /* Let's make the list have extended-selection behavior. */
  behaviorType = extendedSelection;

  /* Initializing second list to have none of the colors. */
  numItems = 0;

  /* Message and destination for sending applies to user changes of the list */
  applyMsg = MSG_TDLP_SECOND_DLIST_APPLY;
  destination = process;

  /* Message to send to destination to query for monikers */
  queryMsg = MSG_TDLP_SECOND_DLIST_MONIKER_QUERY;

}





end Interface;


start ItemText;

chunk BlackText = data {
	byte	"Black",0
}

chunk DkBlueText = data {
	byte	"Dark Blue",0
}

chunk DkGreenText = data {
	byte	"Dark Green",0
}

chunk DkCyanText = data {
	byte	"Dark Cyan",0
}

chunk DkRedText = data {
	byte	"Dark Red",0
}

chunk DkVioletText = data {
	byte	"Dark Violet",0
}

chunk BrownText = data {
	byte	"Brown",0
}

chunk LtGrayText = data {
	byte	"Light Grey",0
}

chunk DkGrayText = data {
	byte	"Dark Grey",0
}

chunk LtBlueText = data {
	byte	"Light Blue",0
}

chunk LtGreenText = data {
	byte	"Light Green",0
}

chunk LtCyanText = data {
	byte	"Light Cyan",0
}

chunk LtRedText = data {
	byte	"Light Red",0
}

chunk LtVioletText = data {
	byte	"Light Violet",0
}

chunk YellowText = data {
	byte	"Yellow",0
}

chunk WhiteText = data {
	byte	"White",0
}


end ItemText;

