COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		SndPlay
FILE:		README

AUTHOR:		Steve Yegge, Jun 20, 1993

ROUTINES:
	Name			Description
	----			-----------
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	stevey	6/20/93		Initial revision

DESCRIPTION:

	This file contains the description of the SoundPlay lab.	

	$Id: README,v 1.1.13.1 97/03/29 09:35:34 canavese Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

                        Local Memory Heaps
                          Lab Session

Overview:
        The purpose of this lab is to give you a change to write code
        that deals with global memory blocks as well as Local Memory
        Heaps.

        To begin, you will write code to create and manage a linked
        list using a chunk in an LMem heap for each node of the list.

        The data structures and routines that you create will fulfull
        the back-end storage and retrieval requirements of a very
        simple application which allows the recording and playing
        of musical notes.

        The only file that you should need to change is sndplayList.asm.
        Look for bracketed sections like this:

        ;##################################################################
        ;               FILL IN CODE HERE

        ;##################################################################
        ;


What you should know before starting:
        - Global Memory Blocks
        - Local Memory Blocks
        - how to use the development tools, such as pmake and swat


What you will learn:
        - Locking & unlocking blocks on the heap
        - Allocating an LMem heap and chunks within it.
        - Dereferencing chunk handles to get offset


Lecture before lab:
        - LMem heaps : the important points
        - Defining a data structure
        - Sample code for creating an LMem heap
        - Sample code for allocating LMem chunks
        - Accessing chunks within a heap



Starting the lab:

        - Move to ./Appl/SDK_Asm/SndPlay in your development tree

        - lock out the source file sndplayList.asm.  Run pmake,
                download sndplayec.geo to your PC, and run it.

        - Set breakpoints at the routines that you will be filling
                in, and run the program some more to get a sense
                as to when they are called, and how they are used

        - Sit back and think about how you can manage a linked list.
                How will you organize the data in each node?
                What operations are you going to perform on the list?
                What should the initial state of the list look like?

        - Once you have an idea has to how the list operations will
                be implemented, add the missing code and test the
                results with swat.



Good Luck!
Todd


Other things to try if you have time and are already prepared for
the next section:

        - Figure out a way to add Error Checking (EC) code to your
                routines so that you will verify you are using
                legal offsets and not addressing random locations
                in memory.

        - If you've created any variables in dgroup that refer
                to the state of the LMem heap, try moving them
                INTO the LMem block.  They should lie immediately
                after the LMemBlockHEader structure, but before
                the LMem handle table.

        - Examine the ChunkArray code and modify your program to
                use a single chunk array.



