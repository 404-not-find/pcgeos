/*
 *
 * Project:	PC GEOS
 * Module:	Large Vis Tree Sample Application
 * File:	largeVisTree.ui
 *
 * Author:	Doug Fults
 *
 *	This file contains the user Interface description for this
 * appilication. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info
 *
 * RCS STAMP:
 *	$Id: largeVisTree.ui,v 1.1 97/04/04 16:34:12 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
        Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/* ----------------------------------------------------------------------------
       Object classes defined by this application
-----------------------------------------------------------------------------*/

/* Here we declare "VisLargeCompClass", which is implemented in 
 * largeVisTree.asm.  VisLargeCompClass operates like VisCompClass,
 * in that it has 16-bit bounds, & 16-bit children, & provides default 
 * visible behavior for DRAW & mouse events  What it adds is a 32-bit
 * translation, or offset, into 32-bit document space.  Behavior is added
 * so that 16-bit visible children continue to function correctly, but at
 * the 32-bit offset.  One alternative for creating a 32-bit document space
 * would then be to have a number of VisLargeCompClasses, each covering a 16-bit
 * space, tiled or otherwise laid out over a 32-bit document */

class VisLargeComp = VisComp {

	translationX = dwordComp : 0;
	translationY = dwordComp : 0;
	/* Add 32-bit translation values -- these will indicate where the
	 * composite sits within the 32-bit document space. */
}


/* ----------------------------------------------------------------------------
        Application Object
-----------------------------------------------------------------------------*/

/* The very top-level generic object of an application MUST be a GenApplication
 * object. The largevissamp.gp file contains "appobj" statement which indicates
 * that this "LargeVisTreeApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

LargeVisTreeApp = GenApplication {

	moniker = list {
		TextMoniker
	}

	/* Four letters used as index to refer to this application in the
	 * token database. The geoManager uses this token information to store
	*  this application's icon in a database. */

	/* manufacturer ID number. Also used for accessing database, to ensure
	 * uniqueness. */

	children = LargeVisTreePrimary;
	/* The GenApplication object only has one child: the main application
	 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = LargeVisTreePrimary;
	/* The main window should appear on-screen when the application
	 * is launched. */
}

visMoniker TextMoniker = "Large Vis Tree Sample App";

end	AppResource;



/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/

/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start PrimaryResource;

LargeVisTreePrimary = GenPrimary {
	moniker = "Mile-high Document using Visible Objects";
	/* this title will appear at the top of the window. */

	children = LargeVisTreeView;
	/* Place only a view inside of Primary */
}

/* In order to demonstrate a large (32-bit) visible object model, we need a
 * GenView to display it inside of.  */

LargeVisTreeView = GenView {		

	output = LargeVisTreeIsoContent;
	/* Set up the view to direct all communications to our
	 * LargeVisTreeIsoContent object */

/*	scaleX = typeComp "WWFixed" : "0, 2";	*/
/*	scaleY = typeComp "WWFixed" : "0, 2";	*/

	docRight = "(17/2)*72";	/* 8.5 inches at 72 dots per inch */
	docBottom = "5280*12*72";	/* 1 mile, at 72 dots per inch */
	/* Set up a huge document, so as to demonstrate the ability to use
	 * 32-bit coordinates */

	horizAttributes = scrollable, noLargerThanContent;
	vertAttributes = scrollable, noLargerThanContent;
	/* Let user scroll around this immense space */

	viewAttributes = windowCoordinateMouseEvents;
}

end PrimaryResource;


start DocResource;

LargeVisTreeIsoContent	= VisIsoContent {
	view = LargeVisTreeView;
	/* Hook the content up to the correct view */

	contentAttrs = largeDocumentModel,
		       windowCoordinateMouseEvents;
	/* Match largeDocumentModel & windowCoordinateMouseEvents attributes
	 * as set in View */
					/* turn off geometry manager */
	visCompGeoFlags = default +dontManage;

	children = DocLargeComp1;
	/* Set up one child, which will be our large (32-bit) composite */
}


DocLargeComp1 = VisLargeComp {
	left = 0;
	top = 0;
	right = "3*72";			    /* 3 inches wide */
	bottom = "3*72";		    /* 3 inches tall */

	translationX = 36;		    /* Offset 1/2 inch in X */
	translationY = 36;		    /* Offset 1/2 inch in Y */

/*	translationY = "5280*12*72-3*72";   Offset 1 mile - 3 inches in Y */

					/* turn off geometry manager */
	visCompGeoFlags = default +dontManage;

	children = DocVisText1, DocVisText2;
	/* Set up two text objects as children				*/
}


DocVisText1 = VisText {
	left = 0;			    /* No offset from 32-bit origin */
	top = 0;
	right = 72;			    /* 1 inch wide */
	bottom = 72;			    /* 1 inch tall */

					    /* Geometry is valid - we set it */
	attr = default -managed;
	optFlags = default -geometryInvalid, -updatePath;

	text = "This is the first text object, blah, blah, blah, blah, blah";
	states = editable, selectable;
}

DocVisText2 = VisText {
	left = "2*72";
	top = "2*72";
	/* Offset 2 inches, in both X & Y, from 32-bit origin */

	right = "2*72+72";		    /* 1 inch wide */
	bottom = "2*72+72";		    /* 1 inch tall */

					    /* Geometry is valid - we set it */
	attr = default -managed;
	optFlags = default -geometryInvalid, -updatePath;

	text = "This is the second text object, blah, blah, blah, blah, blah";
	states = editable, selectable;
}

end DocResource;

