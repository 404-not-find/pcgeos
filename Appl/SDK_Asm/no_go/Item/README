
							 GeoWorks University
								Summer, 1992

			Local Memory Heaps
			   Lab Session

Revision:
	$Id: README,v 1.2.23.1 97/03/29 09:35:23 canavese Exp $

Overview:
	This purpose of this lab is to give you a chance to write code
	that deals with global memory blocks, and chunks within a Local
	Memory heap.

	You will write code to create and manage a linked list, using
	a chunk in an LMem heap for each item in the list. (Yes, there
	might be easier ways to handle this, but that would spoil the fun :)

	The data structures and routines that you create will fulfill the
	back-end storage and retrieval requirements of the list that
	is presented to the user on the screen. The user will be able to
	scroll through your list of items, inserting new items, deleting items,
	and changing item values.

***	The only file that you should need to change is list.asm. Look for
	the sections bracketed like this:

	;######################################################################
	;FILL THIS IN

	;######################################################################


What you should know before starting:
	- Global Memory Blocks
	- Local Memory Heaps
	- how to use the development tools, such as pmake and swat

What you will learn:
	- Locking & unlocking global blocks to access data within them

	- Allocating an LMem heap, and items within it. Dereferencing
	chunk handles to get offsets.

Lecture before lab:
	- LMem heaps: the important points

	- Defining a data structure a typical item.

	- Sample code for allocating LMem chunks, accessing chunk data.

	- What the ItemInitList routine does (allocate a block, create
	an LMem heap with in, etc.)



Starting the lab:
	- Set up this alias:

  alias pcsi 'pcsend -n -d/n/berkeley/users/eric/geosec.20x/world itemec.geo'

	...being sure to change the path according to the path that you get
	from the Novell "map" command, for your F: drive. This will allow
	you to download your version of the executable into your WORLD
	directory on the network, rather than into the ASM directory
	below that.

	- lock out each of the source files that you need into your
	local development tree. Run pmake, download itemec.geo to your
	PC, and run it.
	
	- Set breakpoints at the routines that you will be filling in,
	to get a sense of when they are called.

	- Set a in ItemInitList, and step through it (using "is", then
	pressing "n" several times) to see how it works. Examine
	the LMem heap which is created using:

		lhwalk ds
		bytes ds:0
		print LMemBlockHeader ds:0

	Compare the results.

	- Sit back and think about how you can manage the linked list.
	How will you organize the data in each item? What operations are you
	going to perform on the list? What should the initial state of the
	list look like?

	- Add the missing code, and test the results. Use swat to track
	down "unexpected features".

Good luck!
Eric

Other things to try, if you have time, and are already prepared for the
next section:

	- Make the Items variable-sized. When you set the value for an item,
	resize it to include that number of bytes of additional storage.

	- Figure out a way that you can add EC code to your routines,
	so that you can at certain points verify that you are actually
	pointing to an item in the list, and not a random memory location.

	- If you've created any variables in dgroup that refer to the
	contents of the LMem block, try to move those variables _into_
	the LMem block. They should lie immediately after the
	LMemBlockHeader structure ends, but before the LMem handle table
	starts. You will have to change the call to LMemInitHeap to
	set aside this space.

	- Write a TCL function to walk your list. You might look at
	lhwalk as an example.

	- Rewrite your code to use a single ChunkArray within a chunk.
