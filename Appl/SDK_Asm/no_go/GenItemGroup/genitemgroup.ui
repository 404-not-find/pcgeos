/*
 * Project:	PC/GEOS
 * Module:	GenItemGroup (Sample PC/GEOS application)
 * File:	genitemgroup.ui
 *
 * Author:	Eric E. Del Sesto
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * RCS STAMP:
 *	$Id: genitemgroup.ui,v 1.1 97/04/04 16:34:24 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The genitemgroup.gp file contains "appobj" statement which indicates
 * that this "GenItemGroupApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

GenItemGroupApp = GenApplication {
	/* The geoManager uses this token information to store this
	 * application's icon in a database. */

					/* four letters used as index to
					 * refer to this application in the
					 * token database. */

					/* manufacturer ID number. Also used
					 * for accessing database, to ensure
					 * uniqueness. */

	children = GenItemGroupPrimary;	/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = GenItemGroupPrimary;
					/* The main window should appear
					 * on-screen when the application
					 * is launched. */

	moniker = list {		/* The application object has a list
					 * of visual monikers */
		GenItemGroupTextMoniker	/* Used in the express menu and in
					 * the header for the primary window */
	}
}

visMoniker GenItemGroupTextMoniker = "GenItemGroup Sample Application";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

GenItemGroupPrimary = GenPrimary {
	children = GenItemGroupMenu, SelectionGroup, GenItemGroupView;	
					
	/* At present, we are not supplying the icon image for this application,
	 * (just the text moniker given above), so we want to prevent the
	 * user from minimizing this window. */

	hints = {
		ATTR_GEN_DISPLAY_NOT_MINIMIZABLE,
		HINT_SIZE_WINDOW_AS_DESIRED
	}
}


GenItemGroupMenu = GenInteraction {
    moniker = "Options";
    children = SetColorsDialog;
    visibility = popup;
}


SetColorsDialog =  GenInteraction {
    moniker = "Set colors";
    children = ColorsGroup, RGBGroup; 

    type = properties;
    visibility = dialog;
    hints = {
	    HINT_CENTER_CHILDREN_ON_MONIKERS
    }
}

SelectionGroup = GenItemGroup {
  moniker = "Selection:";
  children = ThisSelection, IsSelection, ASelection, TestSelection;

  /* We'll make this non-exclusive, so that we can select any or all of the
   * parts of the example text.  Later we'll make this extended-selection.
   */
  behaviorType = nonExclusive;

  /* Message to send on an apply */
  destination = process;
	
  hints = {
	  /* Send a message on any user press */
	  ATTR_GEN_ITEM_GROUP_STATUS_MSG {
		word	MSG_SELECTION_STATUS
	  },
	  /* Make scrollable */
	  HINT_ITEM_GROUP_SCROLLABLE,
	  HINT_ORIENT_CHILDREN_HORIZONTALLY,

	  /* Limit to the width needed for the items. */
	  HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 20>
	    SpecHeight <>
	    word 4
	  }
  }
}

ThisSelection = GenItem {
	moniker = "This";
	identifier = SELECTION_THIS;
}
IsSelection = GenItem {
	moniker = "is";
	identifier = SELECTION_IS;
}
ASelection = GenItem {
	moniker = "a";
	identifier = SELECTION_A;
}
TestSelection = GenItem {
	moniker = "test";
	identifier = SELECTION_TEST;
}

ColorsGroup = GenItemGroup {
  moniker = "Color:";
  children = BlackColor, BlueColor, GreenColor, CyanColor, RedColor, 
             VioletColor, BrownColor, GreyColor;

  /* Initialize our various properties as disabled. */
  genStates = default -enabled;

  /* Message to send on an apply */
  destination = process;
  applyMsg = MSG_COLOR_APPLY;

  /* Message to send after any user action.  We'll use this to update the
   * RGB group to match the colors group.
   */
  hints = {
	  ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
		word MSG_COLOR_STATUS
	  },
  	  HINT_WRAP_AFTER_CHILD_COUNT { 
		word 4
	  }
  }
}

BlackColor = GenItem {
	moniker = "Black";
	identifier = C_BLACK;
}
BlueColor = GenItem {
	moniker = "Blue";
	identifier = C_BLUE;
}
GreenColor = GenItem {
	moniker = "Green";
	identifier = C_GREEN;
}
CyanColor = GenItem {
	moniker = "Cyan";
	identifier = C_CYAN;
}
RedColor = GenItem {
	moniker = "Red";
	identifier = C_RED;
}
VioletColor = GenItem {
	moniker = "Violet";
	identifier = C_VIOLET;
}
BrownColor = GenItem {
	moniker = "Brown";
	identifier = C_BROWN;
}
GreyColor = GenItem {
	moniker = "Grey";
	identifier = C_LIGHT_GREY;
}
RGBGroup = GenBooleanGroup {
  moniker = "Color by component:";  
  children = RSetting, GSetting, BSetting; 

  /* Initialize our various properties as disabled. */
  genStates = default -enabled;

  /* Message and destination for an apply. */
  destination = process;
  applyMsg = MSG_RGB_APPLY;

  /* Message to send after any user action.  We'll use this to update the
   * colors group to match the RGB group.  
   */
  hints = {
	  ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
		word	MSG_RGB_STATUS
	  }
  }
}

RSetting = GenBoolean {
	moniker = "Red";
	identifier = C_RED;
}
GSetting = GenBoolean {
	moniker = "Green";
	identifier = C_GREEN;
}
BSetting = GenBoolean {
	moniker = "Blue";
	identifier = C_BLUE;
}

GenItemGroupView = GenView {
	/* make view scrollable in X and Y.  Also, we'll keep the view
	 * from getting larger than the content.
	 */
	horizAttributes = scrollable;
	vertAttributes  = scrollable;

	/* when the contents of this view (i.e. the document) must be updated,
	 * the UI should send a MSG_META_EXPOSED to the GenItemGroupProcess
	 * object. */

	output = process;
}

end Interface;
