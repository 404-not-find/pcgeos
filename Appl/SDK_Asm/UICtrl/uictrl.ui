/*
 * Project:	PC/GEOS
 * Module:	UICtrl (Sample PC/GEOS application)
 * File:	uictrl.ui
 *
 * Author:	Tony Requist
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * IMPORTANT NOTE:
 *	This sample application is primarily intended to demonstrate a
 *	model for handling documents.  Basic parts of a PC/GEOS application
 *	are not documented heavily here.  See the "Hello" sample application
 *	for more detailed documentation on the standard parts of a PC/GEOS
 *	application.
 *
 * RCS STAMP:
 *	$Id: uictrl.ui,v 1.1 97/04/04 16:32:26 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

#include "generic.uih"
#include "uitsctrl.uih"

#include "uitsctrl.ui"

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/

start	AppResource;

UICApp = GenApplication {
	children = Primary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = Primary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_STARTUP_LOAD_OPTIONS) =
		ToolControl;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
		TextStyleControl;
	moniker = list {
		UICTextMoniker
	}
}

visMoniker UICTextMoniker = "UICtrl Sample Application";

end	AppResource;

/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/

start	Interface;		/* this resource is for misc UI objects */

Primary = GenPrimary {
	children = StylesMenu, OptionsMenu, ToolArea1, Text, ToolArea2;
	hints = {
		ATTR_GEN_DISPLAY_NOT_MINIMIZABLE,
		HINT_SIZE_WINDOW_AS_DESIRED
	}
}

/*
 * Style menu to put an instance of our Style controller into
 */
StylesMenu = GenInteraction {
	moniker = 'S', "Styles";
	children = TextStyleControl;
	visibility = popup;
}

/*
 * An instance of the controller object we've created, which allows the
 * user to change text styles.
 */
TextStyleControl = UICTextStyleControl {
}

/* 
 * Options menu to stick the ToolControl into, where t will turn into a 
 * "Manage Tools.." button.
 */
OptionsMenu = GenInteraction {
	moniker = 'O', "Options";
	children = ToolControl;
	visibility = popup;
}


/* 
 * The ToolControl itself.  Let's the user pick which tools will be visible,
 * & move them around to different tool areas
 */
ToolControl = GenToolControl {
	toolboxList = ToolboxList;
	toolGroupList = ToolGroupList;
}

chunk ToolboxList = data {
	UN_OPTR ToolArea1
	UN_OPTR ToolArea1Name
	UN_OPTR ToolArea2
	UN_OPTR ToolArea2Name
}
chunk ToolArea1Name = "Above text";
chunk ToolArea2Name = "Below text";


chunk ToolGroupList = data {
	UN_OPTR TextStyleTools
}

/*
 * Our two tool areas.  An app can have as many as it wants.  We'll default
 * to having the text style tools show up in ToolArea1, by placing a tool
 * group for it in that interaction.
 */

ToolArea1 = GenInteraction {
	children = TextStyleTools;
	hints = {
    		HINT_ALLOW_CHILDREN_TO_WRAP,
    		HINT_ORIENT_CHILDREN_HORIZONTALLY,
	}
}

ToolArea2 = GenInteraction {
	hints = {
    		HINT_ALLOW_CHILDREN_TO_WRAP,
    		HINT_ORIENT_CHILDREN_HORIZONTALLY,
	}
}

TextStyleTools = GenToolGroup {
	controller = TextStyleControl;
	hints = {
		HINT_SAME_ORIENTATION_AS_PARENT,
		HINT_MINIMIZE_CHILD_SPACING
	}
}


/*
 * Text object to act on
 */

Text = GenText {
	genAttributes = default +targetable;
	textDisplayAttributes = default -useTabForNavigation;
	hints = {
		ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS {
			word	UICCharAttrRuns
		},
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT
	}
}

chunk UICCharAttrRuns = data {
    RUN_ARRAY_HEADER(2, UICCharAttrElements)
    TextRunArrayElement TRAE_ALL(UICSE_element0),
    TRAE_END
}

chunk UICCharAttrElements = data {
    CHAR_ATTR_ELEMENT_ARRAY_HEADER(1)
UICSE_element0 = 0
    CHAR_ATTR_FONT_SIZE(FID_DTC_URW_ROMAN, 12)
}

end Interface;
