COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992-1995 -- All rights reserved.
	GEOWORKS CONFIDENTIAL

PROJECT:	GEOS
MODULE:		Sokoban
FILE:		sokoban.def

AUTHOR:		Steve Yegge


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	stevey	11/10/92	initial version
	stevey	7/25/95		port to Jedi

DESCRIPTION:

	$Id: sokoban.def,v 1.1 97/04/04 15:12:48 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;			Constants & structures
;-----------------------------------------------------------------------------

MAX_LEVELS		equ	90
SCREENS_PER_RESOURCE	equ	15

SOKOBAN_STATUS_BAR_FONT_ID	= FID_DTC_URW_SANS
SOKOBAN_STATUS_BAR_POINT_SIZE	= 12

MAX_ROWS		equ	20
MAX_COLUMNS		equ	20

; the next four constants also appear in editor.ui

VGA_BITMAP_WIDTH	equ	16
VGA_BITMAP_HEIGHT	equ	16
CGA_BITMAP_WIDTH	equ	16
CGA_BITMAP_HEIGHT	equ	8

MAX_USER_NAME_LENGTH	equ	32

SOKOBAN_DOCUMENT_PROTO_MAJOR	equ	2
SOKOBAN_DOCUMENT_PROTO_MINOR	equ	0

;-----------------------------------------------------------------------------
;		Fatal Errors
;-----------------------------------------------------------------------------

REQUESTED_INVALID_BITMAP		enum	FatalErrors
NO_GSTATE_AVAILABLE_FOR_DRAWING		enum	FatalErrors

;-----------------------------------------------------------------------------
;		Map related errors
;-----------------------------------------------------------------------------

SokobanMapError			etype	0,2
SME_NO_ERROR			enum	SokobanMapError
SME_MAP_NOT_FOUND		enum	SokobanMapError
SME_NO_PLAYER			enum	SokobanMapError
SME_MULTIPLE_PLAYERS		enum	SokobanMapError
SME_TOO_MANY_BAGS		enum	SokobanMapError
SME_TOO_FEW_BAGS		enum	SokobanMapError
SME_ZERO_BAGS			enum	SokobanMapError

;
;  Some constants used for scoring.
;

BASE_LEVEL_SCORE_FACTOR		equ	10000
BASE_MOVES_SCORE_FACTOR		equ	10000
EXTRA_MOVES_SCORE_FACTOR	equ	9000
BASE_PUSHES_SCORE_FACTOR	equ	1000
MAX_SIGNIFICANT_MOVES		equ	8192
MAX_SIGNIFICANT_PUSHES		equ	4096
STAT_STRING_LENGTH		equ	33

;
;  Define some constants that equate sokoban map pieces with the
;  text characters that make up the original screens.
;
S_GRASS		equ	95			; underscore	'_'
S_WALL		equ	35			; numbersign	'#'
S_GROUND	equ	32			; space		' '
S_SAFE		equ	46			; period	'.'
S_PLAYER	equ	64			; at		'@'
S_PACKET	equ	36			; dollarsign	'$'
S_SAFE_PLAYER	equ	38			; ampersand	'&'
S_SAFE_PACKET	equ	42			; asterisk	'*'

SokobanGameState	record
	:8
	SGS_EXTERNAL_LEVEL:1			; user created level
	SGS_MOVING_MAN:1			; moving man with mouse?
	SGS_CAN_UNDO:1				; are they allowed to undo?
	SGS_MOVED_BAG:1				; did they just move a bag?
	SGS_SAVED_BAG:1				; did they just save a bag?
	SGS_UNSAVED_BAG:1			; did they just unsave a bag?
	SGS_SAVED_POS:1				; have they saved a position?
	SGS_WON_GAME:1				; did they finish level 85?
SokobanGameState	end

;
; A MapRow is an array of FloorType
; A MapArray is really a 2d array of FloorType, or a 1d array of MapRow
;

MapArray type	MAX_ROWS*MAX_COLUMNS	dup (byte)

;
;  A MapHeader keeps some information on the map that wouldn't be too
;  easy to get without scanning the map (hence it's initialized by
;  scanning the map).
;
MapHeader	struct
	MH_columns	byte	0		; width
	MH_rows		byte	0		; height
	MH_packets	byte	0
	MH_saved	byte	0
	MH_position	Point	<0,0>
	MH_reserved	char	4 dup (0)
MapHeader	ends

;
;  A Map consists of a header and a data buffer
;
Map	struct
	M_header	MapHeader
	M_data		MapArray
Map	ends

;--------------------------------
;	SokobanSquareType
;--------------------------------

;
; Each byte in the array currentMap is of this type.  The notation:
;
; SST_WALL_NSEW
;
; means that the element is a wall with walls to the north, south,
; east and west of it.
;

SokobanSquareType	etype	byte, 0, 1
;
; WARNING: THE WALLS MUST COME FIRST
;
SST_WALL	enum	SokobanSquareType, 0	; wall w/ no direct neighbors
						; NSWE
SST_WALL_E	enum	SokobanSquareType	; 0001
SST_WALL_W	enum	SokobanSquareType	; 0010
SST_WALL_EW	enum	SokobanSquareType	; 0011
SST_WALL_S      enum	SokobanSquareType	; 0100
SST_WALL_SE     enum	SokobanSquareType	; 0101
SST_WALL_SW	enum	SokobanSquareType	; 0110
SST_WALL_SWE    enum	SokobanSquareType	; 0111
SST_WALL_N      enum	SokobanSquareType	; 1000
SST_WALL_NE	enum	SokobanSquareType	; 1001
SST_WALL_NW	enum	SokobanSquareType	; 1010
SST_WALL_NWE	enum	SokobanSquareType	; 1011
SST_WALL_NS 	enum	SokobanSquareType	; 1100
SST_WALL_NSE	enum	SokobanSquareType	; 1101
SST_WALL_NSW    enum    SokobanSquareType       ; 1110
SST_WALL_NSEW	enum	SokobanSquareType	; 1111

.assert SST_WALL_NSEW eq 0xf

;
; Ok, everything from here on out can be whatever you want
;
SST_PLAYER	enum	SokobanSquareType ; not on goal area
SST_SAFE_PLAYER	enum	SokobanSquareType ; on goal area
SST_BAG		enum	SokobanSquareType ; not on goal area
SST_SAFE_BAG	enum	SokobanSquareType ; on goal area
SST_GROUND	enum	SokobanSquareType ; inside maze
SST_GRASS	enum	SokobanSquareType ; outside maze
SST_SAFE	enum	SokobanSquareType ; part of goal area

;
; SokobanSquareTypes are converted into characters by indexing
; into this string:
;
SOKOBAN_SQUARE_TYPE_CHARS	equ	"################@&$* _."
;
;  A TempSaveStruct saves all the information needed to restore
;  the game to a saved position. (Except for the map).
;
TempSaveStruct	struct
	TSS_moves		word
	TSS_pushes		word
TempSaveStruct	ends

;
;  Undo used to take you back one move, but now it takes you
;  back to the last bag you pushed (and undoes the push).
;  The information required is the same, however, and the
;  structure didn't need to change.  All we had to do differently
;  was also update the square where they're standing before they
;  perform the undo.
;
UndoStruct	struct
	US_pos1		Point
	US_pos2		Point
	US_pos3		Point
	US_moves	word			; how many moves they had
	US_square1	SokobanSquareType
	US_square2	SokobanSquareType
	US_square3	SokobanSquareType
UndoStruct	ends

SokobanSoundOptions	etype	byte, 0, 1
	SSO_SOUND_OFF	enum	SokobanSoundOptions
	SSO_SOUND_ON	enum	SokobanSoundOptions
	SSO_USE_DEFAULT	enum	SokobanSoundOptions

;-----------------------------------------------------------------------------
;			Animation constants
;
;  Since I probably won't say this elsewhere:  animation is done after the
;  fact.  During the move, the following are stored in a global record:
;
;		* Whether you moved onto a ground or a safe spot.
;		* Whether you pushed a bag.
;		* What direction you moved.  If you moved right or left,
;		  the FACE flag is updated accordingly.
;		* The LEGS bit is toggled.
;
;  When it comes time to draw the bitmap, the record is checked and the
;  appropriate bitmap is drawn.  The guy stays like that (possibly with
;  arms akimbo) until you decide he's had enough and you move him.
;
;  Until animation is supported in CGA, there's no need to have 2 bits
;  in the WalkState record for video mode.  For now, there are only 2
;  CGA player bitmaps (player/safePlayer), so no entries are needed in
;  the tables for them.
;
;-----------------------------------------------------------------------------

MoveDir			etype	word, 0, 1
	MD_UP		enum	MoveDir
	MD_DOWN		enum	MoveDir
	MD_RIGHT	enum	MoveDir
	MD_LEFT		enum	MoveDir

SokobanVideoMode	etype	word, 0, 2
	SVM_CGA		enum	SokobanVideoMode	; CGA (mono)
	SVM_MONO	enum	SokobanVideoMode	; MCGA (mono)
	SVM_VGA		enum	SokobanVideoMode	; VGA (16-color)

NUM_VIDEO_MODES		equ	3

WalkState	record
	:1				; unused
	WS_MODE:1			; set = VGA, clear = MONO
	WS_FACE:1			; set = facing RIGHT, clear = LEFT
	WS_SAFE:1			; set = on safe spot, clear = on ground
	WS_LEGS:1			; set = APART, clear = TOGETHER
	WS_PUSH:1			; set = pushed a bag, clear = didn't
	WS_DIR MoveDir :2		; keeps track of direction.  LOW BITS.
WalkState	end

;
; Structure for the saved game map block.
;
SokobanMapBlock		struct
	SMB_map			hptr	; handle of current map
	SMB_level		word
	SMB_moves		word
	SMB_pushes		word
	SMB_state		SokobanGameState
	SMB_name		char	MAX_USER_NAME_LENGTH+1	dup (0)
	SMB_savedMap		hptr	; handle of saved position map
	SMB_savedMoves		word
	SMB_savedPushes		word
	SMB_internalLevel	word
	SMB_walkState		WalkState
	SMB_reserved		char	9 dup (0)
SokobanMapBlock		ends

;------------------------------------------------------------------------------
;				map types
;------------------------------------------------------------------------------

;
; These are some handy masks for getting to the proper type of
; SokobanSquareType.  For example:
;
;	NORTH or SOUTH == SST_WALL_NS
;
EAST	equ 0x1					
WEST	equ 0x2
SOUTH	equ 0x4
NORTH	equ 0x8

;-----------------------------------------------------------------------------
;				tables
;-----------------------------------------------------------------------------

CommonCode	segment	resource

screenOffsetTable	word	offset	Screen1,
				offset	Screen2,
				offset	Screen3,
				offset	Screen4,
				offset	Screen5,
				offset	Screen6,
				offset	Screen7,
				offset	Screen8,
				offset	Screen9,
				offset	Screen10,
				offset	Screen11,
				offset	Screen12,
				offset	Screen13,
				offset	Screen14,
				offset	Screen15,
				offset	Screen16,
				offset	Screen17,
				offset	Screen18,
				offset	Screen19,
				offset	Screen20,
				offset	Screen21,
				offset	Screen22,
				offset	Screen23,
				offset	Screen24,
				offset	Screen25,
				offset	Screen26,
				offset	Screen27,
				offset	Screen28,
				offset	Screen29,
				offset	Screen30,
				offset	Screen31,
				offset	Screen32,
				offset	Screen33,
				offset	Screen34,
				offset	Screen35,
				offset	Screen36,
				offset	Screen37,
				offset	Screen38,
				offset	Screen39,
				offset	Screen40,
				offset	Screen41,
				offset	Screen42,
				offset	Screen43,
				offset	Screen44,
				offset	Screen45,
				offset	Screen46,
				offset	Screen47,
				offset	Screen48,
				offset	Screen49,
				offset	Screen50,
				offset	Screen51,
				offset	Screen52,
				offset	Screen53,
				offset	Screen54,
				offset	Screen55,
				offset	Screen56,
				offset	Screen57,
				offset	Screen58,
				offset	Screen59,
				offset	Screen60,
				offset	Screen61,
				offset	Screen62,
				offset	Screen63,
				offset	Screen64,
				offset	Screen65,
				offset	Screen66,
				offset	Screen67,
				offset	Screen68,
				offset	Screen69,
				offset	Screen70,
				offset	Screen71,
				offset	Screen72,
				offset	Screen73,
				offset	Screen74,
				offset	Screen75,
				offset	Screen76,
				offset	Screen77,
				offset	Screen78,
				offset	Screen79,
				offset	Screen80,
				offset	Screen81,
				offset	Screen82,
				offset	Screen83,
				offset	Screen84,
				offset	Screen85,
				offset	Screen86,
				offset	Screen87,
				offset	Screen88,
				offset	Screen89,
				offset	Screen90
CommonCode	ends

;-----------------------------------------------------------------------------
;			    Process Class
;-----------------------------------------------------------------------------

SokobanProcessClass	class	GenProcessClass

MSG_SOKOBAN_ADVANCE_LEVEL		message
MSG_SOKOBAN_SET_SOUND			message
MSG_SOKOBAN_REPLAY_LEVEL		message
MSG_SOKOBAN_CREATE_LEVEL		message
MSG_SOKOBAN_EDIT_LEVEL			message
MSG_SOKOBAN_PLAY_EXTERNAL_LEVEL		message
MSG_SOKOBAN_PLAY_INTERNAL_LEVEL		message

SokobanProcessClass	endc

;-----------------------------------------------------------------------------
;		SokobanApplicationClass
;-----------------------------------------------------------------------------

SokobanApplicationClass		class	GenApplicationClass
SokobanApplicationClass		endc

;-----------------------------------------------------------------------------
;			MapContentClass
;-----------------------------------------------------------------------------

MapContentClass		class	VisContentClass

MSG_MAP_PLAYER_MOVE			message
;
;  Moves the player.
;
;  Pass:	cx	= MovementDirection
;
;  Return:	nothing
;  Destroyed:	ax, cx, dx, bp
;
MSG_MAP_SHIFT_MOVE			message
;
;  Moves the player (and up to 1 bag) until they hit a wall.
;
;  Pass:	cx	= MovementDirection
;
;  Return:	nothing
;  Destroyed:	ax, cx, dx, bp
;
MSG_MAP_CONTROL_MOVE			message
;
;  Moves the player in one direction until adjacent to a bag or wall.
;
;  Pass:	cx	= MovementDirection
;
;  Return:	nothing
;  Destroyed:	ax, cx, dx, bp
;

MSG_MAP_NEW_GAME			message
MSG_MAP_SAVE_GAME			message
MSG_MAP_RESTORE_GAME			message

MSG_MAP_SAVE_POSITION			message
;
;  Save the user's current position (this might be called if
;  the user is sure they've done everything correctly up to
;  a certain point, and now they want to experiment with
;  different combinations and be able to return to this point.)
;
;  Pass:	nothing
;  Return:	nothing
;  Destroyed:	nothing
;
MSG_MAP_RESTORE_POSITION		message
;
;  Restore from MSG_MAP_SAVE_POSITION.  Unrecoverable.
;
;  Pass:	nothing
;  Return:	nothing
;  Destroyed:	nothing
;
MSG_MAP_UNDO_LEVEL			message
;
;  Start the entire level over in sheer frustration.
;
;  Pass:	nothing
;  Return:	nothing
;  Destroyed:	nothing
;
MSG_MAP_UNDO_MOVE			message
;
;  Undo the last move.
;
;  Pass:	nothing
;  Return:	nothing
;  Destroyed:	nothing
;
MSG_MAP_SET_BACK_COLOR			message
;
;  Set the content's background color.
;
;  Pass:	cx = color
;  Return:	nothing
;  Destroyed:	ax, cx, dx, bp
;

MapContentClass		endc

MapViewClass	class	GenViewClass

MSG_MAP_VIEW_MAINTAIN_CONTEXT	message
; Make sure the player is on-screen with enough context around it to give the
; user some clue where to go.
;
; Context:	Sent by the content when the player is moved
; Source:	MapContent
; Destination:  MapView
; Interception: not
;
; Pass:
;		cx, dx	= coordinate of the player
;		es:[bitmapWidth], es:[bitmapHeight] set
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;

MapViewClass 	endc

;-----------------------------------------------------------------------------
;		Edit Content Class
;-----------------------------------------------------------------------------

if LEVEL_EDITOR

EditContentClass	class	VisContentClass

MSG_EDIT_CONTENT_CREATE_LEVEL	message
MSG_EDIT_CONTENT_LOAD_LEVEL	message
MSG_EDIT_CONTENT_SAVE_LEVEL	message
MSG_EDIT_CONTENT_INITIATE_RESIZE message
MSG_EDIT_CONTENT_RESIZE_LEVEL	message
MSG_EDIT_CONTENT_SELECT_TOOL	message

MSG_EDIT_CONTENT_LEVEL_CHANGED	message

MSG_EDIT_CONTENT_GET_DIRTY_FLAG	message
MSG_EDIT_CONTENT_SET_DIRTY_FLAG	message

ECI_dirty	byte	0

EditContentClass	endc

endif	; LEVEL_EDITOR

;-----------------------------------------------------------------------------
;		High-score controller subclass
;-----------------------------------------------------------------------------

if HIGH_SCORES
SokobanHighScoreClass	class	HighScoreClass
SokobanHighScoreClass	endc
endif

;-----------------------------------------------------------------------------
;		global routines
;-----------------------------------------------------------------------------

CommonCode	segment	resource
	global	ConvertTextMap:far
	global	UpdateContentSize:far
	global	UpdateLevelData:far
	global	UpdateBagsData:far
	global	UpdateSavedData:far
	global	UpdateMovesData:far
	global	UpdatePushesData:far
	global	UpdateViewColor:far
CommonCode	ends

DocumentCode	segment	resource
	global	SokobanMarkBusy:far
	global	SokobanMarkNotBusy:far
	global	DirtyTheSavedGame:far
	global	SaveGameToFile:far
DocumentCode	ends
