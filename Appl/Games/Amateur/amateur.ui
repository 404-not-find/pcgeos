/*---------------------------------------------------------------------

	Copyright (c) GeoWorks 1991 -- All rights reserved

PROJECT:		
MODULE:		User Interface
FILE:		amateur.ui

AUTHOR:		Chris Boyke

ROUTINES:
	Name			Description
	----			-----------
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------

DESCRIPTION:

	$Id: amateur.ui,v 1.1 97/04/04 15:12:25 newdeal Exp $
------------------------------------------------------------------------*/

#include "generic.uih"
#include "game.uih"

#include "Art/mkrAmateur.ui"
/* Send in the clowns */

start	ClownLCResource, data;

#include "Art/mkrLCClown0.ui"
#include "Art/mkrLCClown1.ui"
#include "Art/mkrLCClown2.ui"
#include "Art/mkrLCClown3.ui"
#include "Art/mkrLCClown4.ui"
#include "Art/mkrLCClown5.ui"

#include "Art/mkrLCDead0.ui"
#include "Art/mkrLCDead1.ui"
#include "Art/mkrLCDead2.ui"
#include "Art/mkrLCDead3.ui"
#include "Art/mkrLCDead4.ui"
#include "Art/mkrLCDead5.ui"

end	ClownLCResource;

start	ClownLMResource, data;

#include "Art/mkrLMClown0.ui"
#include "Art/mkrLMClown1.ui"
#include "Art/mkrLMClown2.ui"
#include "Art/mkrLMClown3.ui"
#include "Art/mkrLMClown4.ui"
#include "Art/mkrLMClown5.ui"

#include "Art/mkrLMDead0.ui"
#include "Art/mkrLMDead1.ui"
#include "Art/mkrLMDead2.ui"
#include "Art/mkrLMDead3.ui"
#include "Art/mkrLMDead4.ui"
#include "Art/mkrLMDead5.ui"

end	ClownLMResource;

start	ClownCGAResource, data;

#include "Art/mkrCGAClown0.ui"
#include "Art/mkrCGAClown1.ui"
#include "Art/mkrCGAClown2.ui"
#include "Art/mkrCGAClown3.ui"
#include "Art/mkrCGAClown4.ui"
#include "Art/mkrCGAClown5.ui"

#include "Art/mkrCGADead0.ui"
#include "Art/mkrCGADead1.ui"
#include "Art/mkrCGADead2.ui"
#include "Art/mkrCGADead3.ui"
#include "Art/mkrCGADead4.ui"
#include "Art/mkrCGADead5.ui"

end	ClownCGAResource;

start	BlasterLCResource, data;

#include "Art/mkrLCLeftBlaster.ui"
#include "Art/mkrLCRightBlaster.ui"
#include "Art/mkrLCLeftAltBlaster.ui"
#include "Art/mkrLCRightAltBlaster.ui"

end	BlasterLCResource;

start	BlasterLMResource, data;

#include "Art/mkrLMLeftBlaster.ui"
#include "Art/mkrLMRightBlaster.ui"
#include "Art/mkrLMLeftAltBlaster.ui"
#include "Art/mkrLMRightAltBlaster.ui"

end	BlasterLMResource;

start	BlasterCGAResource, data;

#include "Art/mkrCGALeftBlaster.ui"
#include "Art/mkrCGARightBlaster.ui"
#include "Art/mkrCGALeftAltBlaster.ui"
#include "Art/mkrCGARightAltBlaster.ui"

chunk mousePtr = data {
  PointerDef	< \
	16,				; PD_width
	16,				; PD_height
	7,				; PD_hotX
	7				; PD_hotY
>
	byte	00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b,
		00000000b, 00000000b

	byte	00000011b, 10000000b,
		00001100b, 01100000b,
		00010000b, 00010000b,
		00100011b, 10001000b,
		01000100b, 01000100b,
		01001000b, 00100100b,
		10010001b, 00010010b,
		10010010b, 10010010b,
		10010001b, 00010010b,
		01001000b, 00100100b,
		01000100b, 01000100b,
		00100011b, 10001000b,
		00010000b, 00010000b,
		00001100b, 01100000b,
		00000011b, 10000000b,
		00000000b, 00000000b
}


end	BlasterCGAResource;


class AmateurContent = VisContent {

	status = byteComp : 0;
	timerHandle = wordComp : 0;
	timerID	= wordComp : 0;
	actInfo = typeComp "ActInfo" : "";

	colorInfo = typeComp "ColorInfo" : "C_BLACK";
	clownsLeft = byteComp : 0;
	array = wordComp : 0;
	callOnEnd = wordComp : 0;

	callOnNotEnd = wordComp : 0;
	act = wordComp : 1;
	startAct = wordComp : 1;
	score = dwordComp : 0;

	scoreLastAct = dwordComp : 0;
	display = byteComp : 0;
	sound	= byteComp : 0;
	screenPeanuts = wordComp : 0;

	screenTomatoes = wordComp : 0;
	mouse	= typeComp "Point" : "";
	jokeHandle = hptrComp : null;
	bufferSize = wordComp : 0;

	jokeCount = wordComp : 0;
	attrs = byteComp : "mask GCA_JOKES or mask GCA_SOUND";
	blasterHeight = wordComp : 0;

	ACI_pellets =  byteComp : "MAX_PELLETS*SIZE HandleStruct dup (?)";
	ACI_peanuts = byteComp : "MAX_PEANUTS*SIZE HandleStruct dup (?)";
	ACI_Tomatoes = byteComp : "MAX_TOMATOES * size HandleStruct dup (?)";
	ACI_clouds = byteComp: "MAX_CLOUDS*SIZE HandleStruct dup (?)";
	
}
class	Bitmap = Vis {
	moniker = nptrComp : null;
	altMoniker = nptrComp : null;
	state = byteComp : 0;
}

class	Blaster = Bitmap {

}

class	Clown = Bitmap {
	status	= byteComp : "CS_ALIVE" ;
	aliveMoniker = wordComp : 0;
	deadMoniker = wordComp : 0;
}


start Interface;


ScudApp = GenApplication {
	moniker = list { 
		AmateurTextMoniker,
		AmateurLCMoniker,
		AmateurLMMoniker,
		AmateurSCMoniker,
		AmateurSMMoniker,
		AmateurSCGAMoniker,
      AmateurTCMoniker
	}
      	children = AmateurPrimary;
	active_list = AmateurPrimary, AmateurHighScore;
	windows_list = AmateurPrimary;
	startup_load_options_list = OptionsMenu;
}

SummonsGroup = GenInteraction {
	children = JokeSummons;
}

visMoniker AmateurTextMoniker = "Amateur Night";

AmateurPrimary = GenPrimary {
	moniker = "Amateur Night";
	children = GameMenu, 
			OptionsMenu, 
			AmateurView, 
			DisplayGroup, 
			SummonsGroup;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_KEEP_ENTIRELY_ONSCREEN,
		HINT_PRIMARY_NO_FILE_MENU,
		ATTR_GEN_HELP_CONTEXT {
			char "TOC",0
		}
	}

}


GameMenu = GenInteraction {
	visibility = popup;
	moniker = 'G',"Game";
	children = StartTrigger, 
		AbortTrigger,
		PauseTrigger, 
		ContinueTrigger, 
		AmateurHighScore;
	hints =	{
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_FILE_MENU
		}
	}
}

StartTrigger = GenTrigger {
	moniker = 'S',"Start New Game";
	kbdAccelerator = ctrl 'S';	
	action = MSG_CONTENT_START_GAME, ContentObject;
}

AbortTrigger = GenTrigger {
	moniker = 'A', "Abort Current Game";
	kbdAccelerator = ctrl 'A';
	genStates = default -enabled;
	action = MSG_CONTENT_ABORT_GAME, ContentObject;
}

PauseTrigger = GenTrigger {
	moniker = 'P', "Pause Game";
	genStates = default -enabled;
	kbdAccelerator = ctrl 'P';
	action = MSG_CONTENT_PAUSE_GAME, ContentObject;
}

ContinueTrigger = GenTrigger {
	moniker = 'C', "Continue Game";
	genStates = default -enabled;
	kbdAccelerator = ctrl 'C';
	action = MSG_CONTENT_CONTINUE_GAME, ContentObject;
}

AmateurHighScore = HighScore {
	fileName = "Amateur Night High Scores";
	creator = {
		<'AMAT'>, MANUFACTURER_ID_GEOWORKS;
	}
	highScoreTitle = "Amateur Night Hall of Fame";
}



DisplayGroup = GenInteraction {
	children = ScoreDisplay, ActDisplay, PelletDisplay;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}


#define SINGLE_LINE_TEXT	textDisplayAttributes = default	\
			+singleLineText,	\
			+noWordWrapping, 	\
			+dontScrollToChanges;
			

ScoreDisplay = GenText {
	genAttributes = readOnly;
	moniker = "Score:";
	text = "0";
	SINGLE_LINE_TEXT
	hints = {
		HINT_MAXIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 8>
			SpecHeight <>
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 8>
			SpecHeight <>
		}
	}
	
}

ActDisplay = GenText {
	genAttributes = readOnly;
	moniker = "Act:";
	text = " ";
	SINGLE_LINE_TEXT		
	hints = {
		HINT_MAXIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 4>
			SpecHeight <>
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 4>
			SpecHeight <>
		}
	}
	
}

PelletDisplay = GenText {
	genAttributes = readOnly;
	moniker = "Pellets left:";
	text = " ";
	SINGLE_LINE_TEXT
	hints = {
		HINT_MAXIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 4>
			SpecHeight <>
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 4>
			SpecHeight <>
		}
	}
}

/**************************************************************************
 *	OPTIONS MENU
 **************************************************************************/ 

OptionsMenu = GenInteraction {
	moniker = 'O', "Options";
	visibility = popup;
	children = SetLevelInteraction, 
			SoundInteraction,
			JokesList,
			SaveOptionsTrigger;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}


SetLevelInteraction = GenInteraction {
	visibility = dialog;
	attributes = default +modal;
	type = properties;
	moniker = 'A',"Set Starting Act";
	children = SetLevelRange,SetLevelTrigger, CancelLevelTrigger;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
		ATTR_GEN_HELP_CONTEXT {
			char "dbStartingAct", 0
		}
	}
}


CancelLevelTrigger = GenTrigger {
	moniker = 'C',"Cancel";
	genAttributes = default +signalInteractionComplete;
	action = MSG_CONTENT_CANCEL_SET_START_ACT, ContentObject;
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS},
		HINT_SEEK_REPLY_BAR
	}
	
}

SetLevelTrigger = GenTrigger {
	moniker = 'S',"Set";
	genAttributes = default +signalInteractionComplete;
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY},
		HINT_SEEK_REPLY_BAR
	}
	
}

SetLevelRange = GenValue {
	moniker = "Starting Act:";
	minimum = 1;
	maximum = "MAX_ACT - 10";
	value = 1;
	destination = ContentObject;
	applyMsg = MSG_CONTENT_SET_START_ACT;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "startingAct",0
		}
	}
}

SoundInteraction = GenInteraction {
	moniker = 'S', "Sound";
	visibility = popup;
	children = SoundList;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}

}

SoundList = GenItemGroup {
	behaviorType = exclusive;
	numSelections  = 1;
	selection = SS_SOUND_OFF;
	children = SoundOnEntry, SoundOffEntry, SoundSystemDefaultEntry;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "sound",0
		}
	}
}

SoundOnEntry = GenItem {
	moniker = 'S',"Sound On";
	identifier = SS_SOUND_ON;
}

SoundOffEntry = GenItem {
	moniker = 'O',"Sound Off";
	identifier = SS_SOUND_OFF;
}

SoundSystemDefaultEntry = GenItem {
	moniker = 'P',"Use System Preference";
	identifier = "SS_SOUND_USE_SYSTEM_DEFAULT";
}

JokesList = GenBooleanGroup {
	children = JokesBoolean;
	selectedBooleans = -1;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "jokes",0
		},
		ATTR_GEN_BOOLEAN_GROUP_INIT_FILE_BOOLEAN
	}
}

JokesBoolean = GenBoolean {
	moniker = 'J',"Display Jokes";
	identifier = -1;
}	
	


SaveOptionsTrigger = GenTrigger {
	moniker = 'O',"Save Options";
	action = MSG_META_SAVE_OPTIONS, ScudApp;
}
	
	
AmateurView = GenView {
	viewAttributes = default +dontSendKbdReleases;
	backColorR = C_BLACK;
	output = ContentObject; 
	hints = {
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, 600>
			SpecHeight <>
		}
	}
}

end Interface;


/**************************************************************************
 *	CONTENT
 **************************************************************************/ 

start	GameObjects, notDetachable;


ContentObject = AmateurContent {
	visCompGeoAttrs = default +customManageChildren;
	left = 0;
	top = 0;
	right = 800;
	bottom = 600;
}

chunk listOfMonikerLists = data {
	lptr	Clown0Moniker,
		Clown1Moniker,
		Clown2Moniker,
		Clown3Moniker,
		Clown4Moniker,
		Clown5Moniker,
		LeftBlasterMoniker,
		RightBlasterMoniker,
		LeftAltBlasterMoniker,
		RightAltBlasterMoniker,
		Dead0Moniker,
		Dead1Moniker,
		Dead2Moniker,
		Dead3Moniker,
		Dead4Moniker,
		Dead5Moniker
}

/* Macro to specify the 3 vis monikers used in the program:  Large
Color, Large Mono, and CGA */

#define THREE_VIS_MONIKERS(name) visMoniker name = list { \
	LC##name, LM##name, CGA##name }

THREE_VIS_MONIKERS(Clown0Moniker)
THREE_VIS_MONIKERS(Clown1Moniker)
THREE_VIS_MONIKERS(Clown2Moniker)
THREE_VIS_MONIKERS(Clown3Moniker)
THREE_VIS_MONIKERS(Clown4Moniker)
THREE_VIS_MONIKERS(Clown5Moniker)

THREE_VIS_MONIKERS(Dead0Moniker)
THREE_VIS_MONIKERS(Dead1Moniker)
THREE_VIS_MONIKERS(Dead2Moniker)
THREE_VIS_MONIKERS(Dead3Moniker)
THREE_VIS_MONIKERS(Dead4Moniker)
THREE_VIS_MONIKERS(Dead5Moniker)

THREE_VIS_MONIKERS(LeftBlasterMoniker)
THREE_VIS_MONIKERS(LeftAltBlasterMoniker)
THREE_VIS_MONIKERS(RightBlasterMoniker)
THREE_VIS_MONIKERS(RightAltBlasterMoniker)

Clown0 = Clown {
}


Clown1 = Clown {
}

Clown2 = Clown {
}

Clown3 = Clown {
}

Clown4 = Clown {
}

Clown5 = Clown {
}


LeftBlaster = Blaster {
	moniker = LeftBlasterMoniker;
	altMoniker = LeftAltBlasterMoniker;
}

RightBlaster = Blaster {
	moniker = RightBlasterMoniker;
	altMoniker = RightAltBlasterMoniker;
}



end 	GameObjects;


start	StringsUI, data;

chunk 	GamePausedText = "Game Paused";
chunk	GameOverText = "Game Over";

end	StringsUI;


/**************************************************************************
 *	JOKES
 **************************************************************************/ 
 
start	Interface;

JokeSummons = GenInteraction {
	visibility = dialog;
	attributes = notUserInitiatable, modal, initiatedViaUserDoDialog;
	children = JokeTextDisplay, HaHaTrigger;
}


JokeTextDisplay = GenText {
	genAttributes = readOnly;
	hints = {
		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE
	}
}

HaHaTrigger = GenTrigger {
	genAttributes = default +signalInteractionComplete;
	moniker = "Ha Ha";
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND	{
			InteractionCommand IC_DISMISS
		}
	}
}

end	Interface;


