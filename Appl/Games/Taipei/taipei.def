COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1995 -- All Rights Reserved

PROJECT:	PC GEOS (Trivia project)
MODULE:		Taipei
FILE:		taipei.def

AUTHOR:		Jason Ho, 1/22/95

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	kho	1/22/95		Initial revision


DESCRIPTION:
	Definitions for Taipei application
		
	$Id: taipei.def,v 1.2 98/05/02 22:29:53 gene Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;------------------------------------------------------------------------------
;			    Constant declarations
;------------------------------------------------------------------------------
INITIAL_NUMBER_OF_TILES		equ	144

; ONE_SECOND is the number of ticks per second
ONE_SECOND 			equ 	60

; spacing for timer text
EVEN_DATE_TIME_BUFFER_SIZE 	equ ((DATE_TIME_BUFFER_SIZE+1)/2)*2

; a dummy value to indicate, say, no tile is at the left of a
; particular tile
NO_TILE				equ	145

; tiles are 27x42 big

TILE_WIDTH			equ	27
TILE_HEIGHT			equ	42

; tile effective area (with shadow)
TILE_SHADOW_AMOUNT		equ	3
TILE_WIDTH_WITH_SHADOW		equ	TILE_WIDTH + TILE_SHADOW_AMOUNT
TILE_HEIGHT_WITH_SHADOW		equ	TILE_HEIGHT + TILE_SHADOW_AMOUNT

; offset of the game space from the window frame
GAME_X_OFFSET			equ	25
GAME_Y_OFFSET			equ	-36

; How big is the game board
GAME_WIDTH			equ	17 * TILE_WIDTH + 2 * GAME_X_OFFSET
GAME_HEIGHT			equ	10 * TILE_HEIGHT + 2 * GAME_Y_OFFSET

; color of tile _shadow_
;
; shadows are drawn like this:
;
;	reactagle frame with TITLE_DARK_SHADOW
;	shift left/up a bit
;	reactagle frame with TITLE_BOTTOM_RIGHT_COLOR
;	shift left/up a bit
;	reactagle frame with TITLE_BOTTOM_RIGHT_COLOR
;	shift left/up a bit
;	reactagle frame with TITLE_BOTTOM_RIGHT_COLOR
;	shift left/up a bit
;	Draw two light lines as top / left border with TOP_LEFT_COLOR

TILE_TOP_LEFT_COLOR		equ	C_WHITE
TILE_DARK_SHADOW		equ	C_BLACK
TILE_BOTTOM_RIGHT_COLOR		equ	C_DARK_GRAY


; other colors
TILE_BACKGROUND			equ	C_LIGHT_GRAY
TILE_HILITE_COLOR		equ	C_YELLOW

GAME_BACKGROUND			equ	C_BLUE

;
; time between flashes when user presses "HINT" in seconds
;
if _GIVE_HINT
HINT_TIME_BETWEEN_FLASH		equ	2
endif

; amount of shifting along different levels
X_OFFSET_DELTA			equ	3
Y_OFFSET_DELTA			equ	3

LEVEL_0_X_OFFSET		equ	GAME_X_OFFSET
LEVEL_0_Y_OFFSET		equ	GAME_Y_OFFSET
LEVEL_1_X_OFFSET		equ	GAME_X_OFFSET - X_OFFSET_DELTA
LEVEL_1_Y_OFFSET		equ	GAME_Y_OFFSET - Y_OFFSET_DELTA
LEVEL_2_X_OFFSET		equ	GAME_X_OFFSET - 2 * X_OFFSET_DELTA
LEVEL_2_Y_OFFSET		equ	GAME_Y_OFFSET - 2 * Y_OFFSET_DELTA
LEVEL_3_X_OFFSET		equ	GAME_X_OFFSET - 3 * X_OFFSET_DELTA
LEVEL_3_Y_OFFSET		equ	GAME_Y_OFFSET - 3 * Y_OFFSET_DELTA
LEVEL_4_X_OFFSET		equ	GAME_X_OFFSET - 4 * X_OFFSET_DELTA
LEVEL_4_Y_OFFSET		equ	GAME_Y_OFFSET - 4 * Y_OFFSET_DELTA
LEVEL_5_X_OFFSET		equ	GAME_X_OFFSET - 5 * X_OFFSET_DELTA
LEVEL_5_Y_OFFSET		equ	GAME_Y_OFFSET - 5 * Y_OFFSET_DELTA
LEVEL_6_X_OFFSET		equ	GAME_X_OFFSET - 6 * X_OFFSET_DELTA
LEVEL_6_Y_OFFSET		equ	GAME_Y_OFFSET - 6 * Y_OFFSET_DELTA

; some constants for error checking

MAX_TILE_INDEX			equ	NO_TILE
MAX_GRID_X_POSITION		equ	31
MAX_GRID_Y_POSITION		equ	17


;------------------------------------------------------------------------------
;			    Array types
;------------------------------------------------------------------------------
ByteArray	type	INITIAL_NUMBER_OF_TILES dup (byte)

if _GIVE_HINT
NUM_OF_DIFF_TILE_TYPES	equ	42
TILE_NOT_FREE		equ	NUM_OF_DIFF_TILE_TYPES + 1
TileTypeArray	type	NUM_OF_DIFF_TILE_TYPES dup (word)
endif

;------------------------------------------------------------------------------
;			  Taipei Tile Type
;------------------------------------------------------------------------------
TaipeiTileType			etype	word, 0, 1

	TTT_BAMBOO_ONE		enum	TaipeiTileType
	TTT_BAMBOO_TWO		enum	TaipeiTileType
	TTT_BAMBOO_THREE	enum	TaipeiTileType
	TTT_BAMBOO_FOUR		enum	TaipeiTileType
	TTT_BAMBOO_FIVE		enum	TaipeiTileType
	TTT_BAMBOO_SIX		enum	TaipeiTileType
	TTT_BAMBOO_SEVEN	enum	TaipeiTileType
	TTT_BAMBOO_EIGHT	enum	TaipeiTileType
	TTT_BAMBOO_NINE		enum	TaipeiTileType

	TTT_CRAK_ONE		enum	TaipeiTileType	
	TTT_CRAK_TWO		enum	TaipeiTileType
	TTT_CRAK_THREE		enum	TaipeiTileType
	TTT_CRAK_FOUR		enum	TaipeiTileType
	TTT_CRAK_FIVE		enum	TaipeiTileType
	TTT_CRAK_SIX		enum	TaipeiTileType
	TTT_CRAK_SEVEN		enum	TaipeiTileType
	TTT_CRAK_EIGHT		enum	TaipeiTileType
	TTT_CRAK_NINE		enum	TaipeiTileType

	TTT_DOT_ONE		enum	TaipeiTileType
	TTT_DOT_TWO		enum	TaipeiTileType
	TTT_DOT_THREE		enum	TaipeiTileType
	TTT_DOT_FOUR		enum	TaipeiTileType
	TTT_DOT_FIVE		enum	TaipeiTileType
	TTT_DOT_SIX		enum	TaipeiTileType
	TTT_DOT_SEVEN		enum	TaipeiTileType
	TTT_DOT_EIGHT		enum	TaipeiTileType
	TTT_DOT_NINE		enum	TaipeiTileType
 
	TTT_DRAGON_C		enum	TaipeiTileType
	TTT_DRAGON_F		enum	TaipeiTileType
	TTT_DRAGON_P		enum	TaipeiTileType

	TTT_WIND_N		enum	TaipeiTileType
	TTT_WIND_S		enum	TaipeiTileType
	TTT_WIND_E		enum	TaipeiTileType
	TTT_WIND_W		enum	TaipeiTileType

	TTT_SEASON_SP		enum	TaipeiTileType
	TTT_SEASON_SU		enum	TaipeiTileType
	TTT_SEASON_AU		enum	TaipeiTileType
	TTT_SEASON_WI		enum	TaipeiTileType

	TTT_FLOWER_PLUM		enum	TaipeiTileType
	TTT_FLOWER_BAMBOO	enum	TaipeiTileType
	TTT_FLOWER_ORCHID	enum	TaipeiTileType
	TTT_FLOWER_MUM		enum	TaipeiTileType


;------------------------------------------------------------------------------
;			  Taipei Level Type
;------------------------------------------------------------------------------
TaipeiLevelType			etype	word, 0, 1

	TLT_LEVEL_ZERO		enum	TaipeiLevelType
	TLT_LEVEL_ONE		enum	TaipeiLevelType
	TLT_LEVEL_TWO		enum	TaipeiLevelType
	TLT_LEVEL_THREE		enum	TaipeiLevelType
	TLT_LEVEL_FOUR		enum	TaipeiLevelType
	TLT_LEVEL_FIVE		enum	TaipeiLevelType
	TLT_LEVEL_SIX		enum	TaipeiLevelType


;------------------------------------------------------------------------------
;			    Process Class
;------------------------------------------------------------------------------
TaipeiProcessClass	class	GenProcessClass

TaipeiProcessClass	endc

;------------------------------------------------------------------------------
;			    Application Class
;------------------------------------------------------------------------------
TaipeiApplicationClass	class	GenApplicationClass
TaipeiApplicationClass	endc


;------------------------------------------------------------------------------
;			  Flags for Taipei Content class
;------------------------------------------------------------------------------
TaipeiContentFlags	record
	TCF_FREE_PAIR_FOUND: 1	; Is any free pair found after user
				; request for hint? 
	TCF_TRIED_TO_CHEAT:1	; did the user try to cheat? Used to
				; eliminate excessive "No cheating!"
				; dialog box. 
	TCF_CHEATING:1		; is the user cheating right now? Get
				; turned off after every legal move
	TCF_CHEATED:1		; did the user successfully cheated at
				; least once? Give different dialog
				; box at win-game 
	:4
TaipeiContentFlags	end

;------------------------------------------------------------------------------
;			  Taipei Content Class
;------------------------------------------------------------------------------
TaipeiContentClass	class	VisContentClass

;------------------------------
;       Messages
;------------------------------
	MSG_TAIPEI_CONTENT_INITIALIZE	message
	;
	; Initialize instance data
	;
	; Pass: 	Nothing
	; Return:	Nothing
	; Destroy:	ax, cx, dx, bp
	;
	MSG_TAIPEI_CONTENT_CREATE_TILES		message
	;
	; Called by OpenApplication
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, cx, dx
	;
	MSG_TAIPEI_CONTENT_MAKE_ONE_TILE	message
	;
	; Create one tile
	;
	; Pass:		cx	tile index (zero based)
	; Return:	Nothing
	; Destroy:	Everything except cx, bp
	;
	MSG_TAIPEI_CONTENT_IS_TILE_IN		message
	;
	; Query if a particular child is in the board
	;
	; Pass:		cx	index of tile being queried
	; Return:	ax <- TRUE if child is in, FALSE otherwise
	; Destroy:	
	;
	MSG_TAIPEI_CONTENT_IS_TILE_FREE		message
	;
	; Query if a particular child is _free_ in the board
	;
	; Pass:		cx	index of tile being queried
	; Return:	ax <- 1 if child is free, 0 otherwise
	; Destroy:	
	;
	MSG_TAIPEI_CONTENT_TILE_GONE		message
	;
	; Called by a tile notifying the content that it is
	; leaving the content. Here, the content sets the stillIn
	; array, and notifies the tileCount GenValue
	;
	; Pass:		cx	index of tile
	; Return:	Nothing
	; Destroy:	ax, bx, cx, dx, bp
	;
	MSG_TAIPEI_CONTENT_TILE_COME_BACK	message
	;
	; Called by a tile notifying the content that it is
	; coming back to the content. Here, the content sets the stillIn
	; array, and notifies the tileCount GenValue
	;
	; Pass:		cx	index of tile
	; Return:	Nothing
	; Destroy:	ax, bx, cx, dx, bp
	;
	MSG_TAIPEI_CONTENT_ONE_TILE_SELECTED	message
	;
	; Called by a tile notifying the content that is is
	; being selected
	;
	; Pass:		cx	Chunk handle of tile
	;		dx	TTI_type
	; Return:	Nothing
	; Destroy:	ax, bx, cx, dx, di, si
	;
	MSG_TAIPEI_CONTENT_CHEAT_NOW		message
	;
	; Mark that user is going to cheat
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	Nothing
	;
	MSG_TAIPEI_CONTENT_ANOTHER_GAME		message
	;
	; A game is being played. Discard and reinitialize with new
	; random tiles.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	everything
	;

	MSG_TAIPEI_CONTENT_NO_CHEAT		message
	;
	; User clicks on cheat. Notify him no cheat available.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, dx, si, di
	;
	MSG_TAIPEI_CONTENT_UNDO			message
	;
	; Add the last two removed (in fact, hidden) tiles back to
	; ViewContent 
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, bx, dx, bp, di, si
	;
	MSG_TAIPEI_CONTENT_START_TIMER		message
	;
	; Start the timer and gives a mesg every one second
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, bx, dx
	;
	MSG_TAIPEI_CONTENT_STOP_TIMER		message
	;
	; Turn off the timer
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, bx
	;
	MSG_TAIPEI_CONTENT_ONE_SECOND_ELAPSED	message
	;
	; A message generated by a timer. Do what we should do every
	; one second (update the time display)
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	everything
	;

	MSG_TAIPEI_CONTENT_RESTART_GAME		message
	;
	; A message from trigger. Restart the current game.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	everything
	;

	MSG_TAIPEI_CONTENT_GAME_CLEARED		message
	;
	; User cleared the game! Take out appropriate dialog box
	;
	; Pass:
	; Return:	Nothing
	; Destroy:	ax, bx, dx, di, si
	;

if _GIVE_HINT
	MSG_TAIPEI_CONTENT_HINT			message
	;
	; Give hints to user, ie. flash matching free tiles
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	Everything
	;

	MSG_TAIPEI_CONTENT_UPDATE_FREE_STATUS	message
	;
	; Update instance data TCI_currentlyFree.
	; Could be called because of: new game, two tiles taken
	; away, etc.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroyed:	Everything
	;

	MSG_TAIPEI_CONTENT_TYPE_FREE		message
	;
	; Mark that there is a free tile of type (passed cx).
	;
	; Pass:		cx - TileType
	; Return:	Nothing
	; Destroy:	Nothing
	;

	MSG_TAIPEI_CONTENT_NUM_OF_FREE_WITH_TYPE	message
	;
	; Return the number of free tiles that have the passed
	; type (or compatible type)
	;
	; Pass:		cx - TileType
	; Return:	cx - Num of tiles that are free and compatible
	; 		with the passed type.
	; Destroy:	Everything
	;
endif
;------------------------------
;	Instance Data
;------------------------------
	TCI_tilesLeft	word
	;
	; How many tiles left?
	;

	TCI_stillIn	ByteArray
	;
	; Which tiles are still in the content
	;

if _GIVE_HINT
	TCI_numFreeTileOfType TileTypeArray
	;
	; How many free tiles of each type is in the content
	;

	TCI_hintTimeElapsed	byte
	;
	; How many seconds since the tiles flash for the first time
	; (after "hint" given)?
	;
endif	
	TCI_selectedTileHandle	lptr
	TCI_selectedTileType	TaipeiTileType
	;
	; store the info about the tile that is selected before
	;

	TCI_miscFlags		TaipeiContentFlags

	TCI_lastRemovedTile1Handle	lptr
	TCI_lastRemovedTile2Handle	lptr
	;
	; save the last two removed tiles for implementing undo
	;

	TCI_time		word
	;
	; how long has the game elapsed?
	;

	TCI_timerHandle		lptr
	;
	; store the handle of the timer because we have to turn it off
	; later.
	;

TaipeiContentClass	endc



;-----------------------------------------------------------------------------
;				tables
;-----------------------------------------------------------------------------
CommonCode	segment	resource

tileBitmapOffsetTable	word	offset	Bamboo1,
				offset	Bamboo2,
				offset	Bamboo3,
				offset	Bamboo4,
				offset	Bamboo5,
				offset	Bamboo6,
				offset	Bamboo7,
				offset	Bamboo8,
				offset	Bamboo9,

				offset	Crak1,
				offset	Crak2,
				offset	Crak3,
				offset	Crak4,
				offset	Crak5,
				offset	Crak6,
				offset	Crak7,
				offset	Crak8,
				offset	Crak9,

				offset	Dots1,
				offset	Dots2,
				offset	Dots3,
				offset	Dots4,
				offset	Dots5,
				offset	Dots6,
				offset	Dots7,
				offset	Dots8,
				offset	Dots9,

				offset	DragonC,
				offset	DragonF,
				offset	DragonP,

				offset	North,
				offset	South,
				offset	East,
				offset	West,
				
				offset	Spring,
				offset	Summer,
				offset	Fall,
				offset	Winter,

				offset	Bamboo,
				offset	Mum,
				offset	Orchid,
				offset	Plum
CommonCode	ends
		
				
				

;------------------------------------------------------------------------------
;			  Flags for Taipei Tile class
;------------------------------------------------------------------------------
if _GIVE_HINT


TaipeiTileFlags	record
	TTF_SELECTED: 1		; Am I being selected?
	TTF_CURRENTLY_FREE:1	; Am I free in the content right now?
	; This flag is not valid all the time. We cannot use
	; this to determine whether a tile is free in
	; MSG_META_START_SELECT. It is valid only after ViewContent
	; sends MSG_TAIPEI_TILE_CHECK_STATUS to children.
	:6
TaipeiTileFlags end


else

TaipeiTileFlags	record
	TTF_SELECTED: 1		; Am I being selected?
	:7
TaipeiTileFlags end

endif

;------------------------------------------------------------------------------
;			      TaipeiTile Class
;
; A TaipeiTile object is a vis-object with a certain tile index.
; It knows how to draw itself.
;------------------------------------------------------------------------------
TaipeiTileClass	class	VisClass

;------------------------------
;	Constants, etc
;------------------------------

;
; This defines the supported object types.
;
	
;------------------------------
;	Messages
;------------------------------
	MSG_TAIPEI_TILE_SET_INFO	message
	;
	; Set the various info of the tile
	;
	; Pass:		ss:bp =	type
	;			index
	;			level
	;			left tile index
	;			right tile index
	;			
	; Return:	Nothing
	; Destroy:	ax, cx
	;
	MSG_TAIPEI_TILE_HIDE		message
	;
	; Hide the tile from VisContent
	;
	; Pass:		
	; Return:	Nothing
	; Destroy:	Everything
	;
	MSG_TAIPEI_TILE_UNHIDE		message
	;
	; Unhide the tile from VisContent
	;
	; Pass:		
	; Return:	Nothing
	; Destroy:	Everything except bx
	;
	MSG_TAIPEI_TILE_UNSELECTED	message
	;
	; Notified by the content that the tile is no longer selected
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, bx, cx, dx, di
	;
	MSG_TAIPEI_TILE_ANOTHER_GAME	message
	;
	; User requests new game, and each tile gets this message
	; from the content
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	Everything
	;
	MSG_TAIPEI_TILE_RESTART_GAME	message
	;
	; User requests restart game, and each tile gets this message
	; from the content
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	Everything
	;
	MSG_TAIPEI_TILE_CHECK_STATUS 	message
	;
	; Request from the content. Check if itself is free, and if
	; so, return cx TRUE. If it is not free, return
	; cx FALSE. If GIVE_HINT: Instance data (TTI_currentlyFree) is
	; updated. 
	;
	; Pass: 	Nothing
	; Return:	cx	TRUE if free
	;		cx	FALSE otherwise
 	; Destroy:	Everything
	;

if _GIVE_HINT
	MSG_TAIPEI_TILE_HINT_FLASH	message
	;
	; Called by content: flash if it is free and there is
	; matching free tiles in the content.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	Everything
	;

endif
;------------------------------
;	Instance Data
;------------------------------
	TTI_type		TaipeiTileType	; Type of the object
						; (bamboo, ...)
	TTI_index		word		; index of tile
	TTI_tileTop1		word		; index of tile on top
	TTI_tileTop2		word		; index of tile on top
	TTI_level		TaipeiLevelType	; the level of tile within
						; the board
						; level = 0 at the bottom
	TTI_position		Point		; Where in the level am I?
	TTI_miscFlags		TaipeiTileFlags	
TaipeiTileClass	endc

;------------------------------------------------------------------------------
;			BoardConfigBlock
;
;	stores the board info
;
;	BCT_position: the grid is half size of a tile
;------------------------------------------------------------------------------
BoardConfigBlock	struct
	BCT_type	TaipeiTileType		; Type of tile
						; (bamboo, ...)
	BCT_index	word			; index of tile
	BCT_left1	word			; index of tile at left
	BCT_left2	word			; you could have two left
						; neighbors.
	BCT_right1	word			; index of tile at right
	BCT_right2	word

	BCT_top1	word			; index of tile above
	BCT_top2	word			; you could have four
	BCT_top3	word			; tiles at top
	BCT_top4	word

	BCT_level	word			; level of tile within
						; the board
						; level = 0 at the bottom
	BCT_position	Point			; position within the level
BoardConfigBlock	ends
		
