//========================================================================
//
// Stream.h
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifndef STREAM_H
#define STREAM_H

#ifdef __GNUC__
#pragma interface
#endif


@include "gtypes.goh"


//------------------------------------------------------------------------
// Stream (base class)
//------------------------------------------------------------------------

  // Constructor.
extern
void StreamInit(Stream *stream);

  // Destructor.
extern
void StreamFree(Stream *stream);

  // Reference counting.
extern
  long StreamIncRef(Stream *stream);
extern
  long StreamDecRef(Stream *stream);

extern
FileHandle StreamGetFile(Stream *str);

extern
long StreamGetChar(Stream *str);
extern
long StreamLookChar(Stream *str);

extern
Dict *StreamGetDict(Stream *str);

extern
void StreamReset(Stream *str);

extern
long StreamGetLength(Stream *str);
extern
long StreamGetPos(Stream *str);
extern
void StreamSetPos(Stream *str, long pos1);

extern
Stream *StreamAddFilters(Stream *str1, Obj *dict, XRef *xref);

extern
GBool StreamIsBinary(Stream *str, GBool last);

extern
void StreamGetLine(Stream *str, char *buf, long size);

extern
void StreamResetImage(Stream *stream, short width1, short nComps1, short nBits1);

extern
GBool StreamGetImagePixel(Stream *this, Guchar *pix);

#if 0
  // Get kind of stream.
  virtual StreamKind getKind() = 0;

  // Reset stream to beginning.
  virtual void reset() = 0;

  // Reset stream and allocate buffers for use by getPixel().
  // The image has <width1> pixels per line, <nComps1> components per
  // pixel, and <nBits1> bits per component.
  virtual void resetImage(long width1, long nComps1, long nBits1);

  // Get next char from stream.
  virtual long getChar() = 0;

  // Peek at next char in stream.
  virtual long lookChar() = 0;

  // Get next line from stream.
  virtual char *getLine(char *buf, long size);

  // Gets the next pixel from the stream.  (resetImage() must be called
  // first.)  <pix> should be able to hold at least nComps elements.
  // Returns false at end of file.
  virtual GBool getImagePixel(Guchar *pix);

  // Skip an entire line from the image.
  virtual void skipImageLine();

  // Get current position in file.
  virtual long getPos() = 0;

  // Go to a position in the stream.
  virtual void setPos(long pos1);

  // Get PostScript command for the filter(s).
  virtual GString *getPSFilter(char *indent);

  // Does this stream type potentially contain non-printable chars?
  virtual GBool isBinary(GBool last = gTrue) = 0;

  // Get the base FileStream or SubStream of this stream.
  virtual Stream *getBaseStream() = 0;

  // Get the base file of this stream.
  virtual FILE *getFile() = 0;

  // Get the dictionary associated with this stream.
  virtual Dict *getDict() = 0;

  // Is this an encoding filter?
  virtual GBool isEncoder() { return gFalse; }

  // Add filters to this stream according to the parameters in <dict>.
  // Returns the new stream.
  Stream *addFilters(Object *dict);


#endif /* 0 */

//------------------------------------------------------------------------
// FileStream
//------------------------------------------------------------------------


void FStreamInit(Stream *this, FileHandle f1, long start1, long length1, Obj *dict1);
void FStreamFree(Stream *this);

//  virtual StreamKind getKind() { return strFile; }

void FStreamReset(Stream *str);
void FStreamSetPos(Stream *str, long pos1);

  // Check for a PDF header on this stream.  Skip past some garbage
  // if necessary.

GBool FStreamCheckHeader(Stream *str);

GBool FStreamIsBinary(Stream *str);
long FStreamGetChar(Stream *str);
long FStreamLookChar(Stream *str);
long FStreamGetLength(Stream *str);
long FStreamGetPos(Stream *str);
FileHandle FStreamGetFile(Stream *str);
Dict *FStreamGetDict(Stream *str);

  // Get position of first byte of stream within the file.

long FStreamGetStart(Stream *str);



//------------------------------------------------------------------------
// SubStream
//------------------------------------------------------------------------

void SubStreamInit(Stream *str, Stream *str1, Obj *dict1);
void SubStreamFree(Stream *str);
void SubStreamReset(Stream *str);


#if 0

class SubStream: public Stream {
public:

  SubStream(Stream *str1, Object *dict1);
  virtual ~SubStream();
  virtual StreamKind getKind() { return str->getKind(); }
  virtual void reset() {}
  virtual int getChar() { return str->getChar(); }
  virtual int lookChar() { return str->lookChar(); }
  virtual int getPos() { return str->getPos(); }
  virtual GBool isBinary(GBool last = gTrue) { return last; }
  virtual Stream *getBaseStream() { return this; }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return dict.getDict(); }

private:

  Stream *str;
  Object dict;
};

//------------------------------------------------------------------------
// ASCIIHexStream
//------------------------------------------------------------------------

class ASCIIHexStream: public Stream {
public:

  ASCIIHexStream(Stream *str1);
  virtual ~ASCIIHexStream();
  virtual StreamKind getKind() { return strASCIIHex; }
  virtual void reset();
  virtual int getChar()
    { int c = lookChar(); buf = EOF; return c; }
  virtual int lookChar();
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent);
  virtual GBool isBinary(GBool last = gTrue);
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }

private:

  Stream *str;
  int buf;
  GBool eof;
};

//------------------------------------------------------------------------
// ASCII85Stream
//------------------------------------------------------------------------

class ASCII85Stream: public Stream {
public:

  ASCII85Stream(Stream *str1);
  virtual ~ASCII85Stream();
  virtual StreamKind getKind() { return strASCII85; }
  virtual void reset();
  virtual int getChar()
    { int ch = lookChar(); ++index; return ch; }
  virtual int lookChar();
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent);
  virtual GBool isBinary(GBool last = gTrue);
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }

private:

  Stream *str;
  int c[5];
  int b[4];
  int index, n;
  GBool eof;
};

#endif /* 0 */

//------------------------------------------------------------------------
// LZWStream
//------------------------------------------------------------------------


extern
void LZWStreamInit(Stream *str, Stream *str2, long predictor1, long columns1, long colors1,
		     long bits1, long early1);
extern
void LZWStreamFree(Stream *str);
extern
void LZWStreamReset(Stream *str);
extern
GBool LZWStreamIsBinary(Stream *str, GBool last);
extern
long LZWStreamGetChar(Stream *str);
extern
long LZWStreamLookChar(Stream *str);


#if 0

//------------------------------------------------------------------------
// RunLengthStream
//------------------------------------------------------------------------

class RunLengthStream: public Stream {
public:

  RunLengthStream(Stream *str1);
  virtual ~RunLengthStream();
  virtual StreamKind getKind() { return strRunLength; }
  virtual void reset();
  virtual int getChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr++ & 0xff); }
  virtual int lookChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr & 0xff); }
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent);
  virtual GBool isBinary(GBool last = gTrue);
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }

private:

  Stream *str;
  char buf[128];		// buffer
  char *bufPtr;			// next char to read
  char *bufEnd;			// end of buffer
  GBool eof;

  GBool fillBuf();
};

//------------------------------------------------------------------------
// CCITTFaxStream
//------------------------------------------------------------------------

struct CCITTCodeTable;

class CCITTFaxStream: public Stream {
public:

  CCITTFaxStream(Stream *str1, int encoding1, GBool byteAlign1,
		 int columns1, int rows1, GBool black1);
  virtual ~CCITTFaxStream();
  virtual StreamKind getKind() { return strCCITTFax; }
  virtual void reset();
  virtual int getChar()
    { int c = lookChar(); buf = EOF; return c; }
  virtual int lookChar();
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent);
  virtual GBool isBinary(GBool last = gTrue);
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }

private:

  Stream *str;			// stream
  int encoding;			// 'K' parameter
  GBool byteAlign;		// 'EncodedByteAlign' parameter
  int columns;			// 'Columns' parameter
  int rows;			// 'Rows' parameter
  GBool black;			// 'BlackIs1' parameter
  GBool eof;			// true if at eof
  GBool nextLine2D;		// true if next line uses 2D encoding
  int inputBuf;			// input buffer
  int inputBits;		// number of bits in input buffer
  short *refLine;		// reference line changing elements
  int b1;			// index into refLine
  short *codingLine;		// coding line changing elements
  int a0;			// index into codingLine
  int outputBits;		// remaining ouput bits
  int buf;			// character buffer

  short getTwoDimCode();
  short getWhiteCode();
  short getBlackCode();
  short look13Bits();
  void eatBits(int bits) { inputBits -= bits; }
};

//------------------------------------------------------------------------
// DCTStream
//------------------------------------------------------------------------

// DCT component info
struct DCTCompInfo {
  int id;			// component ID
  GBool inScan;			// is this component in the current scan?
  int hSample, vSample;		// horiz/vert sampling resolutions
  int quantTable;		// quantization table number
  int dcHuffTable, acHuffTable;	// Huffman table numbers
  int prevDC;			// DC coefficient accumulator
};

// DCT Huffman decoding table
struct DCTHuffTable {
  Guchar firstSym[17];		// first symbol for this bit length
  Gushort firstCode[17];	// first code for this bit length
  Gushort numCodes[17];		// number of codes of this bit length
  Guchar sym[256];		// symbols
};

class DCTStream: public Stream {
public:

  DCTStream(Stream *str1);
  virtual ~DCTStream();
  virtual StreamKind getKind() { return strDCT; }
  virtual void reset();
  virtual int getChar();
  virtual int lookChar();
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent);
  virtual GBool isBinary(GBool last = gTrue);
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }
  Stream *getRawStream() { return str; }

private:

  Stream *str;			// stream
  int width, height;		// image size
  int mcuWidth, mcuHeight;	// size of min coding unit, in data units
  DCTCompInfo compInfo[4];	// info for each component
  int numComps;			// number of components in image
  int colorXform;		// need YCbCr-to-RGB transform?
  int restartInterval;		// restart interval, in MCUs
  Guchar quantTables[4][64];	// quantization tables
  int numQuantTables;		// number of quantization tables
  DCTHuffTable dcHuffTables[4];	// DC Huffman tables
  DCTHuffTable acHuffTables[4];	// AC Huffman tables
  int numDCHuffTables;		// number of DC Huffman tables
  int numACHuffTables;		// number of AC Huffman tables
  Guchar *rowBuf[4][32];	// buffer for one MCU
  int comp, x, y, dy;		// current position within image/MCU
  int restartCtr;		// MCUs left until restart
  int restartMarker;		// next restart marker
  int inputBuf;			// input buffer for variable length codes
  int inputBits;		// number of valid bits in input buffer

  void restart();
  GBool readMCURow();
  GBool readDataUnit(DCTHuffTable *dcHuffTable, DCTHuffTable *acHuffTable,
		     Guchar quantTable[64], int *prevDC, Guchar data[64]);
  int readHuffSym(DCTHuffTable *table);
  int readAmp(int size);
  int readBit();
  GBool readHeader();
  GBool readFrameInfo();
  GBool readScanInfo();
  GBool readQuantTables();
  GBool readHuffmanTables();
  GBool readRestartInterval();
  GBool readAdobeMarker();
  GBool readTrailer();
  int readMarker();
  int read16();
};

#endif /* 0 */

//------------------------------------------------------------------------
// FlateStream
//------------------------------------------------------------------------

extern
void FlateStreamInit(Stream *str, Stream *str1, long predictor1, long columns1,
			 long colors1, long bits1);
extern
void FlateStreamFree(Stream *str);
extern
void FlateStreamReset(Stream *str);
extern
long FlateStreamGetChar(Stream *str);
extern
long FlateStreamLookChar(Stream *str);
extern
GBool FlateStreamIsBinary(Stream *str, GBool last);


//------------------------------------------------------------------------
// EOFStream
//------------------------------------------------------------------------

void EOFStreamInit(Stream *str, Stream *str2);

void EOFStreamFree(Stream *str);

void EOFStreamReset(Stream *str);

long EOFStreamGetChar(Stream *str);

long EOFStreamLookChar(Stream *str);


#if 0
//------------------------------------------------------------------------
// FixedLengthEncoder
//------------------------------------------------------------------------

class FixedLengthEncoder: public Stream {
public:

  FixedLengthEncoder(Stream *str1, int length1);
  ~FixedLengthEncoder();
  virtual StreamKind getKind() { return strWeird; }
  virtual void reset();
  virtual int getChar();
  virtual int lookChar();
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent) { return NULL; }
  virtual GBool isBinary(GBool last = gTrue) { return gFalse; }
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }
  virtual GBool isEncoder() { return gTrue; }

private:

  Stream *str;
  int length;
  int count;
};

//------------------------------------------------------------------------
// ASCII85Encoder
//------------------------------------------------------------------------

class ASCII85Encoder: public Stream {
public:

  ASCII85Encoder(Stream *str1);
  virtual ~ASCII85Encoder();
  virtual StreamKind getKind() { return strWeird; }
  virtual void reset();
  virtual int getChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr++ & 0xff); }
  virtual int lookChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr & 0xff); }
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent) { return NULL; }
  virtual GBool isBinary(GBool last = gTrue) { return gFalse; }
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }
  virtual GBool isEncoder() { return gTrue; }

private:

  Stream *str;
  char buf[8];
  char *bufPtr;
  char *bufEnd;
  int lineLen;
  GBool eof;

  GBool fillBuf();
};

//------------------------------------------------------------------------
// RunLengthEncoder
//------------------------------------------------------------------------

class RunLengthEncoder: public Stream {
public:

  RunLengthEncoder(Stream *str1);
  virtual ~RunLengthEncoder();
  virtual StreamKind getKind() { return strWeird; }
  virtual void reset();
  virtual int getChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr++ & 0xff); }
  virtual int lookChar()
    { return (bufPtr >= bufEnd && !fillBuf()) ? EOF : (*bufPtr & 0xff); }
  virtual int getPos() { return str->getPos(); }
  virtual GString *getPSFilter(char *indent) { return NULL; }
  virtual GBool isBinary(GBool last = gTrue) { return gFalse; }
  virtual Stream *getBaseStream() { return str->getBaseStream(); }
  virtual FILE *getFile() { return str->getFile(); }
  virtual Dict *getDict() { return str->getDict(); }
  virtual GBool isEncoder() { return gTrue; }

private:

  Stream *str;
  char buf[131];
  char *bufPtr;
  char *bufEnd;
  char *nextEnd;
  GBool eof;

  GBool fillBuf();
};

#endif /* 0 */

#endif
