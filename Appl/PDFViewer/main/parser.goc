//========================================================================
//
// Parser.cc
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifdef __GNUC__
#pragma implementation
#endif

@include "pdfvu.goh"
@include "obj.goh"
@include "array.goh"
@include "diction.goh"
@include "parser.goh"
@include "lexer.goh"
@include "stream.goh"

/*
 * Forward decls
 */
GBool ParserMakeStream (Parser *parser, Stream **str, Obj *dict);

/*
 * Code
 */

void ParserInit(Parser *parser, Lexer *lexer1) {
  parser->lexer = lexer1;
  parser->inlineImg = 0;
  LexerGetObj(parser->lexer, &parser->buf1);
  LexerGetObj(parser->lexer, &parser->buf2);
}

void ParserFree(Parser *parser) {

  LexerFree(parser->lexer);
  gfree(parser->lexer);
  ObjFree(&parser->buf1);
  ObjFree(&parser->buf2);
}

void
ParserGetObj (Parser *parser, Obj *obj)
{
/* Object *Parser::getObj(Object *obj) {
*/
  char *key;
  Stream *str = NULL;
  Obj obj2;
  long num;
  Obj *pbuf1 = &parser->buf1;
  Obj *pbuf2 = &parser->buf2;

  // refill buffer after inline image data
  if (parser->inlineImg == 2) {
    ObjFree(pbuf1);
    ObjFree(pbuf2);
    LexerGetObj(parser->lexer, pbuf1);
    LexerGetObj(parser->lexer, pbuf2);
    parser->inlineImg = 0;
  }

  // array
  if (isCmdSame(pbuf1, "[")) {
    ParserShift(parser);
    initArray(obj);
    while (!isCmdSame(pbuf1, "]") && !isEOF(pbuf1)) {
      ParserGetObj(parser, &obj2);
      ObjArrayAdd(obj, &obj2);
      ObjFree(&obj2);
    }
    if (isEOF(pbuf1))
      EC_WARNING(-1);
//      error(getPos(), "End of file inside array");
    ParserShift(parser);

  // dictionary or stream
  } else if (isCmdSame(pbuf1, "<<")) {
    ParserShift(parser);
    initDict(obj);
    while (!isCmdSame(pbuf1, ">>") && !isEOF(pbuf1)) {
      if (!isName(pbuf1)) {
	EC_WARNING(-1);
//	error(getPos(), "Dictionary key must be a name object");
	ParserShift(parser);
      } else {
	key = copyString(getName(pbuf1));
	ParserShift(parser);
	if (isEOF(pbuf1) || isError(pbuf1))
	  break;
	ParserGetObj(parser, &obj2);
	DictAdd(obj->u.dict, key, &obj2);
	ObjFree(&obj2);
      }
    }
    if (isEOF(pbuf1))
	EC_WARNING(-1);
//      error(getPos(), "End of file inside dictionary");
    if (isCmdSame(pbuf2, "stream")) {
	if (ParserMakeStream(parser, &str, obj)) {
	    ObjFree(obj);
	    initStream(obj, str);
	} else {
	    ObjFree(obj);
	    initError(obj);
	}
    } else {
	ParserShift(parser);
    }

  // indirect reference or integer
  } else if (isInt(pbuf1)) {
    num = getInt(pbuf1);
    ParserShift(parser);
    if (isInt(pbuf1) && isCmdSame(pbuf2, "R")) {
      initRef(obj, num, getInt(pbuf1));
      ParserShift(parser);
      ParserShift(parser);
    } else {
      initInt(obj, num);
    }

  // simple object
  } else {
    ObjCopy(obj, pbuf1);
    ParserShift(parser);
  }
}


GBool
ParserMakeStream (Parser *parser, Stream **str, Obj *dict)
{
//Stream *Parser::makeStream(Object *dict) {
  Obj obj, obj2;
  long pos, length;


  // get stream start position
  LexerSkipToNextLine(parser->lexer);
  pos = LexerGetPos(parser->lexer);

  // get length
  ObjDictLookup(dict, "Length", &obj, LexerGetXRef(parser->lexer));
  if (isInt(&obj)) {
    length = getInt(&obj);
    ObjFree(&obj);

  } else if (isRef(&obj)) {
      ObjFetch(&obj2, &obj, LexerGetXRef(parser->lexer));
      if (isInt(&obj2)) {
	  length = getInt(&obj2);
	  ObjFree(&obj);
	  ObjFree(&obj2);
      } else {
	  EC_WARNING(-1); /* bad length attr */
	  ObjFree(&obj);
	  ObjFree(&obj2);
	  return gFalse;
      }
  } else {
    EC_WARNING(-1);
//    error(getPos(), "Bad 'Length' attribute in stream");
    ObjFree(&obj);
    return gFalse;
  }

  // make base stream
//  str = new FileStream(lexer->getStream()->getFile(), pos, length, dict);

  *str = gmalloc( sizeof(Stream) );
  FStreamInit(*str,
	      StreamGetFile(LexerGetStream(parser->lexer)),
	      pos,
	      length,
	      dict);

  /* XXX: needs to not access stream data directly */
//  str->fHan = StreamGetFile(LexerGetStream(parser->lexer));
//  str->pos = pos;
//  str->length = length;
//  ObjCopy(&str->oDict, dict);

  // get filters
  *str = StreamAddFilters(*str, dict, LexerGetXRef(parser->lexer));

  // skip over stream data
  LexerSetPos(parser->lexer, pos + length);

  // refill token buffers and check for 'endstream'
  ParserShift(parser);  // kill '>>'
  ParserShift(parser);  // kill 'stream'
  if (isCmdSame(&parser->buf1, "endstream"))
    ParserShift(parser);
  else
    EC_WARNING(-1);
//    error(getPos(), "Missing 'endstream'");

  return gTrue;

}	/* End of ParserMakeStream.	*/

void
ParserShift (Parser *parser)
{
/* void Parser::shift() {
*/
  if (parser->inlineImg > 0) {
    ++parser->inlineImg;
  } else if (isCmdSame(&parser->buf2, "ID")) {
    LexerGetChar(parser->lexer);	// skip char after 'ID' command
    parser->inlineImg = 1;
  }
  ObjFree(&parser->buf1);
  ObjCopy(&parser->buf1, &parser->buf2);
  ObjFree(&parser->buf2);
  if (parser->inlineImg > 0)		// don't buffer inline image data'
    initNull(&parser->buf2);
  else
    LexerGetObj(parser->lexer, &parser->buf2);

}	/* End of ParserShift.	*/

long ParserGetPos (Parser *parser) {

    return StreamGetPos(LexerGetStream(parser->lexer));
}

long ParserGetLength (Parser *parser) {

    return StreamGetLength(LexerGetStream(parser->lexer));
}
