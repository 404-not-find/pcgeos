//========================================================================
//
// GfxFont.cc
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifdef __GNUC__
#pragma implementation
#endif

@include "pdfvu.goh"

#include <Ansi/stdlib.h>
//#include <stddef.h>
//#include <stdio.h>
//#include <string.h>
//#include <ctype.h>
//#include "gfile.h"
//#include "config.h"
@include "obj.goh"
@include "array.goh"
@include "diction.goh"
@include "stream.goh"
@include "gfxFont2.goh"
@include "gfxFont.goh"
//#include "FontInfo.h"

#if JAPANESE_SUPPORT
#include "CMapInfo.h"
#endif

/*
 * forward decls
 */
void CopyNamedEncoding(GfxFont *this, Obj *pObj);
void GfxFontMakeWidths(GfxFont *this, Dict *fontDict, XRef *xref);
void GfxFontMakeEncoding(GfxFont *this, Dict *fontDict, XRef *xref);
void GfxFontAddChar(byte *charMap, char **charName, char *name);
int GfxFontEncodingBinarySearch(char *name, int start, int end,
				 char **pCharNames);



#if 0

//------------------------------------------------------------------------

static int CDECL cmpWidthExcep(const void *w1, const void *w2);

//------------------------------------------------------------------------

static Gushort *defCharWidths[12] = {
  courierWidths,
  courierObliqueWidths,
  courierBoldWidths,
  courierBoldObliqueWidths,
  helveticaWidths,
  helveticaObliqueWidths,
  helveticaBoldWidths,
  helveticaBoldObliqueWidths,
  timesRomanWidths,
  timesItalicWidths,
  timesBoldWidths,
  timesBoldItalicWidths
};

//------------------------------------------------------------------------
// GfxFontEncoding
//------------------------------------------------------------------------

inline int GfxFontEncoding::hash(char *name) {
  int h;

  h = name[0];
  if (name[1])
    h = h * 61 + name[1];
  return h % gfxFontEncHashSize;
}

GfxFontEncoding::GfxFontEncoding() {
  int i;

  encoding = (char **)gmalloc(256 * sizeof(char *));
  freeEnc = gTrue;
  for (i = 0; i < 256; ++i)
    encoding[i] = NULL;
  for (i = 0; i < gfxFontEncHashSize; ++i)
    hashTab[i] = -1;
}

GfxFontEncoding::GfxFontEncoding(char **encoding1, int encSize) {
  int i;

  encoding = encoding1;
  freeEnc = gFalse;
  for (i = 0; i < gfxFontEncHashSize; ++i)
    hashTab[i] = -1;
  for (i = 0; i < encSize; ++i) {
    if (encoding[i])
      addChar1(i, encoding[i]);
  }
}

void GfxFontEncoding::addChar(int code, char *name) {
  int h, i;

  // replace character associated with code
  if (encoding[code]) {
    h = hash(encoding[code]);
    for (i = 0; i < gfxFontEncHashSize; ++i) {
      if (hashTab[h] == code) {
	hashTab[h] = -2;
	break;
      }
      if (++h == gfxFontEncHashSize)
	h = 0;
    }
    gfree(encoding[code]);
  }

  // associate name with code
  encoding[code] = name;

  // insert name in hash table
  addChar1(code, name);
}

void GfxFontEncoding::addChar1(int code, char *name) {
  int h, i, code2;

  // insert name in hash table
  h = hash(name); 
  for (i = 0; i < gfxFontEncHashSize; ++i) {
    code2 = hashTab[h];
    if (code2 < 0) {
      hashTab[h] = code;
      break;
    } else if (encoding[code2] && !strcmp(encoding[code2], name)) {
      // keep the highest code for each char -- this is needed because
      // X won't display chars with codes < 32
      if (code > code2)
	hashTab[h] = code;
      break;
    }
    if (++h == gfxFontEncHashSize)
      h = 0;
  }
}

GfxFontEncoding::~GfxFontEncoding() {
  int i;

  if (freeEnc) {
    for (i = 0; i < 256; ++i) {
      if (encoding[i])
	gfree(encoding[i]);
    }
    gfree(encoding);
  }
}

int GfxFontEncoding::getCharCode(char *name) {
  int h, i, code;

  h = hash(name);
  for (i = 0; i < gfxFontEncHashSize; ++i) {
    code = hashTab[h];
    if (code == -1 ||
	(code > 0 && encoding[code] && !strcmp(encoding[code], name)))
      return code;
    if (++h >= gfxFontEncHashSize)
      h = 0;
  }
  return -1;
}

#endif /* 0 */

//------------------------------------------------------------------------
// GfxFont
//------------------------------------------------------------------------

void GfxFontCheckWellKnown(GfxFont *this, const char *name)
{
    WellKnownFont *pFont = wellKnownFonts;
    int i;

    /* Ignore any unique tag (name starts with "AAAAAA+"). */
    if (strlen(name) > 8 && isalpha(name[0]) && isalpha(name[1])
      && isalpha(name[2]) && isalpha(name[3]) && isalpha(name[4])
      && isalpha(name[5]) && name[6] == '+')
        name = &name[7];

    /*
     * Search the list of well-known fonts for a match.  A match is found
     * if the well-known font name matches a substring of the passed name,
     * where the substring must begin at the first character.
     *
     * When a match is found, the fontSymbolic flag is cleared, and the 
     * fontSerif and fontFixedWidth flags are set appropriately.
     */
    
    for (i = 0, pFont = wellKnownFonts;
      i < ARRAY_LEN(wellKnownFonts, WellKnownFont);
      i++, pFont++)
    {
        if (!strncmp(name, pFont->WKF_name, strlen(pFont->WKF_name)))
        {
    	    this->flags &= ~(fontSymbolic | fontSerif | fontFixedWidth);
            this->flags |= pFont->WKF_flags;
            break;
        }
    }
}

void GfxFontInit(GfxFont *this, char *tag1, Ref id1, Dict *fontDict, XRef *xref) {
//  BuiltinFont *builtinFont;
  char buf[256];
  Obj obj1, obj2, obj3;
  char *p1, *p2;
  char *pPdfToGeosMap;
  char **pNameMap;
  long i;
  int code;

  // get font tag and ID
  GStrInitString(&this->tag, tag1);
  this->id.num = id1.num;
  this->id.gen = id1.gen;

  // get base font name
  GStrInit(&this->name);
  DictLookup(fontDict, "BaseFont", &obj1, xref);
  if (isName(&obj1))
      GStrAppendString(&this->name, getName(&obj1));
  ObjFree(&obj1);

  // is it a built-in font?
//  builtinFont = NULL;
#if 0
  if (GStrGetLength(&this->name)) {
    for (i = 0; i < numBuiltinFonts; ++i) {
      if (!strcmp(builtinFonts[i].name, GStrGetCString(&this->name))) {
	builtinFont = &builtinFonts[i];
	break;
      }
    }
  }
#endif

  // get font type
  this->type = fontUnknownType;
  DictLookup(fontDict, "Subtype", &obj1, xref);
  if (isNameSame(&obj1, "Type1"))
    this->type = fontType1;
  else if (isNameSame(&obj1, "Type3"))
    this->type = fontType3;
  else if (isNameSame(&obj1, "TrueType"))
    this->type = fontTrueType;
  else if (isNameSame(&obj1, "Type0"))
    this->type = fontType0;
  ObjFree(&obj1);
  this->is16 = gFalse;

  // get info from font descriptor
  // for flags: assume Times-Roman (or TimesNewRoman), but
  // explicitly check for others -- FontDescriptors for Arial,
  // Helvetica, TimesNewRoman, CourierNew, and Symbol are optional.
  this->flags = fontSerif;   // assume Times-Roman by default
  if ((this->type == fontTrueType && !GStrCmpStringN(&this->name, "Arial", 5))
    || (this->type == fontType1 && !GStrCmpStringN(&this->name, "Helvetica", 9)))
      this->flags = 0;
  else if ((this->type == fontTrueType && !GStrCmpStringN(&this->name, "CourierNew", 10))
    || (this->type == fontType1 && !GStrCmpStringN(&this->name, "Courier", 7)))
      this->flags = fontFixedWidth;
  else if ((this->type == fontTrueType || this->type == fontType1) 
    && !GStrCmpStringN(&this->name, "Symbol", 6))
      this->flags = fontSymbolic;

/* duplicate the standard (or symbol) character map */

  if (this->flags & fontSymbolic)
  {
    for (code = 0; code < 256; code ++)
        this->charMap[code] = code;
  }
  else
  {
    MemLock(OptrToHandle(@pdfToGeosMap));
    pPdfToGeosMap = LMemDeref(@pdfToGeosMap);
    memcpy(this->charMap, pPdfToGeosMap, sizeof (this->charMap));
    MemUnlock(OptrToHandle(@pdfToGeosMap));
  }

  MemLock(OptrToHandle(@standardEncodingNames));
  pNameMap = LMemDeref((this->flags & fontSymbolic ? 
    @symbolEncodingNames : @standardEncodingNames));
  memcpy(this->charNames, pNameMap, sizeof(this->charNames));
  MemUnlock(OptrToHandle(@standardEncodingNames));

  this->embFontID.num = -1;
  this->embFontID.gen = -1;
  this->hasCharSet = gFalse;
  this->fontWidthFactor = 0;
  GStrInit(&this->embFontName);
  GStrInit(&this->extFontFile);

  DictLookup(fontDict, "FontDescriptor", &obj1, xref);
  if (isDict(&obj1)) {

    /* Is CharSet entry present? */

    ObjDictLookup(&obj1, "CharSet", &obj2, xref);
    if (!isNull(&obj2))
	this->hasCharSet = gTrue;
    ObjFree(&obj2);

    // flags
    ObjDictLookup(&obj1, "Flags", &obj2, xref);
    if (isInt(&obj2))
      this->flags = getInt(&obj2);
    ObjFree(&obj2);
/*
 * I've had trouble with various fonts having 'symbol' set in their flags.
 * So, check for them by name, zero out symbol and set things right.
 */
    if (this->flags & fontSymbolic)
        GfxFontCheckWellKnown(this, GStrGetCString(&this->name));
/*
 * Maybe this is too tailored to a specific problem, but I've had a 
 * case of the 'symbol' flag getting set for non-symbol fonts:
 */
    if (this->flags & (fontSerif | fontFixedWidth)) {
	this->flags &= ~fontSymbolic;
    }

    // embedded Type 1 font file and font name
    if (this->type == fontType1) {
      ObjDictLookupNF(&obj1, "FontFile", &obj2);
      if (isRef(&obj2)) {
	this->embFontID = getRef(&obj2);

	// get font name from the font file itself since font subsets
	// sometimes use the 'AAAAAA+foo' name and sometimes use just 'foo'
	ObjFetch(&obj3, &obj2, xref);
	if (isStream(&obj3)) {
	  ObjStreamReset(&obj3);
	  for (i = 0; i < 64; ++i) {
	    ObjStreamGetLine(&obj3, buf, sizeof(buf));
	    if (!strncmp(buf, "/FontName", 9)) {
	      if ((p1 = strchr(buf+9, '/')) != NULL) {
		++p1;
		for (p2 = p1; *p2 && !isspace(*p2); ++p2) ;
		GStrAppendStringN(&this->embFontName, p1, p2 - p1);
	      }
	      break;
	    }
	  }
	}
	ObjFree(&obj3);
	ObjFree(&obj2);

	// couldn't find font name so just use the one in the PDF font
	// descriptor
	if (!GStrGetLength(&this->embFontName)) {
	  ObjDictLookup(&obj1, "FontName", &obj2, xref);
	  if (isName(&obj2))
	    GStrAppendString(&this->embFontName, getName(&obj2));
	}
      }
      ObjFree(&obj2);

    // embedded TrueType font file
    } else if (this->type == fontTrueType) {
      ObjDictLookupNF(&obj1, "FontFile2", &obj2);
      if (isRef(&obj2))
	this->embFontID = getRef(&obj2);
      ObjFree(&obj2);
    }
  }
  ObjFree(&obj1);

  /* The font code uses the fontBold and fontItalic flags to set the bold
   * and italic text styles, respectively.  However, the built-in fonts
   * may not have descriptors to set those flags, other fonts may not set
   * those flags to reflect their style, and the fontBold flag doesn't even
   * mean that the font is bold.  So, we'll now check the font name for the
   * presence of the words "Bold" and "Italic" or "Oblique" and set those flags.
   */
  if (strstr(GStrGetCString(&this->name), "Bold")
    || strstr(GStrGetCString(&this->name), "Black"))
      this->flags |= fontBold;
  if (strstr(GStrGetCString(&this->name), "Italic")
    || strstr(GStrGetCString(&this->name), "Oblique"))
      this->flags |= fontItalic;

#if 0
/* We don't seem to use this... */
  // get font matrix
  this->fontMat[0] = this->fontMat[3] = 1;
  this->fontMat[1] = this->fontMat[2] = this->fontMat[4] = this->fontMat[5] = 0;
  DictLookup(fontDict, "FontMatrix", &obj1, xref);
  if (isArray(&obj1)) {
      for (i = 0; i < 6 && i < ObjArrayGetLength(&obj1); ++i) {
	  ObjArrayGet(&obj1, i, &obj2, xref);
	  if (isNum(&obj2))
	      this->fontMat[i] = getNum(&obj2);
	  ObjFree(&obj2);
      }
  }
  ObjFree(&obj1);
#endif

#if 0
  // get encoding and character widths
  if (this->type == fontType0) {
    getType0EncAndWidths(fontDict);
  } else if (builtinFont) {
    makeEncoding(fontDict, builtinFont->encoding);
    makeWidths(fontDict, builtinFont->encoding, builtinFont->widths);
  } else {
    makeEncoding(fontDict, NULL);
    makeWidths(fontDict, NULL, NULL);
  }
#else
/*
 * Homegrown char encoding merging
*/
    if (this->type != fontType0) {
	GfxFontMakeEncoding(this, fontDict, xref);
/*
 * Make widths too
 */
	GfxFontMakeWidths(this, fontDict, xref);
    }

#endif
}

void GfxFontFree(GfxFont *this) {
  GStrFree(&this->tag);
  GStrFree(&this->name);
//  if (!this->is16 && encoding)
//    delete encoding;
  GStrFree(&this->embFontName);
  GStrFree(&this->extFontFile);
//  if (this->is16)
//    gfree(widths16.exceps);
}

/*
 * Read the array of widths from the font dict.
 * This should probably be merged with default widths from FontInfo.h (in the xpdf
 * distribution), but I haven't done it yet.
 */

void GfxFontMakeWidths(GfxFont *this, Dict *fontDict, XRef *xref) {
  Obj obj1, obj2;
  short firstChar, lastChar;
  short code;

  // initialize all widths to zero
    memset(this->widths, 0, 256 * sizeof(short));
//    for (code = 0; code < 256; ++code)
//	this->widths[code] = 0;

    DictLookup(fontDict, "FirstChar", &obj1, xref);
    firstChar = isInt(&obj1) ? getInt(&obj1) : 0;
    ObjFree(&obj1);
    DictLookup(fontDict, "LastChar", &obj1, xref);
    lastChar = isInt(&obj1) ? getInt(&obj1) : 255;
    ObjFree(&obj1);

    DictLookup(fontDict, "Widths", &obj1, xref);
    if (isArray(&obj1)) {
      for (code = firstChar; code <= lastChar; ++code) {
    	ObjArrayGet(&obj1, code - firstChar, &obj2, xref);
    	if (isInt(&obj2))
	    this->widths[code] = getInt(&obj2);
	    ObjFree(&obj2);
      }
    }
    else
    {
        // Initialize with the default widths for the nearest font family.
        // Note that for non-symbolic fonts, the width tables are ordered by 
        // the standard character set, and for symbolic fonts, the table is
        // ordered by the symbol character set. So, we must first map each glyph
        // in our character set to the standard character set.  Not a trivial task.
        optr owidths = @helveticaWidths;
        unsigned short *widths;
        char *name;
        int j, tableLen;
        char **pNames;
        long style = this->flags & (fontBold | fontItalic);

        if (this->flags & fontSerif)
        {
          /* Times-Roman derivatives */
          if (style == (fontBold | fontItalic))
              /* Times-BoldItalic */
              owidths = @timesBoldItalicWidths;
          else if (style == fontBold)
              /* Times-Bold */
              owidths = @timesBoldWidths;
          else if (style == fontItalic)
              /* Times-Italic */
              owidths = @timesItalicWidths;
          else
              /* Times-Roman */
              owidths = @timesRomanWidths;
        }
        else if (this->flags & fontFixedWidth)
          /* all Courier derivatives have the same widths */
          owidths = @courierWidths;
        else if (this->flags & fontSymbolic)
          /* Symbol */
          owidths = @symbolWidths;
        else
        {
          if (style == (fontBold | fontItalic))
              /* Helvetica-BoldOblique */
              owidths = @helveticaBoldObliqueWidths;
          else if (style == fontBold)
              /* Helvetica-Bold */
              owidths = @helveticaBoldWidths;
          else if (style == fontItalic)
              /* Helvetica-Oblique */
              owidths = @helveticaObliqueWidths;
          else
              /* Helvetica */
              owidths = @helveticaWidths;
        }
        MemLock(OptrToHandle(owidths));
        widths = LMemDeref(owidths);
        MemLock(OptrToHandle(@standardEncodingNames));
        pNames = LMemDeref((this->flags & fontSymbolic) ?
          @symbolEncodingNames : @standardEncodingNames);
        tableLen = (this->flags & fontSymbolic) ? 
          symbolEncodingSize : standardEncodingSize;
        for (code = 0; code < 256; code++)
            if ((name = this->charNames[code]) != NULL)
                for (j = 0; j < tableLen; j++)
                    if (pNames[j] != NULL && 
                      ((name == pNames[j]) || !strcmp(name, pNames[j])))
                    {
                        this->widths[code] = widths[j];
                        break;
                    }
        MemUnlock(OptrToHandle(@standardEncodingNames));
        MemUnlock(OptrToHandle(owidths));
    }

    ObjFree(&obj1);
}

void GfxFontMakeEncoding(GfxFont *this, Dict *fontDict, XRef *xref) {
//  GfxFontEncoding *baseEnc;
  Obj obj1, obj2, obj3;
  word code, i;
  Parser parser;
  Lexer *lexer;

  // get encoding from font dict
  DictLookup(fontDict, "Encoding", &obj1, xref);

  // encoding specified by dictionary
  if (isDict(&obj1)) {
    ObjDictLookup(&obj1, "BaseEncoding", &obj2, xref);
    if (isName(&obj2))
        CopyNamedEncoding(this, &obj2);
    ObjFree(&obj2);

    ObjDictLookup(&obj1, "Differences", &obj2, xref);
    if (isArray(&obj2)) {
      code = 0;
      for (i = 0; i < ObjArrayGetLength(&obj2); ++i) {
	ObjArrayGet(&obj2, i, &obj3, xref);
	if (isInt(&obj3)) {
	  code = getInt(&obj3);
	} else if (isName(&obj3)) {
	  if (code < 256)
	    GfxFontAddChar(&this->charMap[code], &this->charNames[code], getName(&obj3));
	  ++code;
	} else {
	    EC_WARNING(-1);
//	  error(-1, "Wrong type in font encoding resource differences (%s)",
//		obj3.getTypeName());
	}
	ObjFree(&obj3);
      }
    }
    ObjFree(&obj2);

  // encoding specified by name or null
    /*
     * Check the names we know
     */
  } else if (isName(&obj1)) {
      /*
       * copy the specified encoding map wholesale.
       */
      CopyNamedEncoding(this, &obj1);
  }

  // free the font dict encoding
  ObjFree(&obj1);

#if 0
/*
 * I'm commenting this out because I still have pdf files that give custom
 * names, 'symbol'-font designation, and drawing instructions for normal
 * text.  That is, if I simply draw the text as-is it's fine.  Arrghh!
*/
/*
 * If a fontfile stream exists, zero out the encoding for characters it
 * specifies how to draw.  (I.e., we don't know how to draw custom-specified
 * characters.)  Only do this for "symbol" -type fonts; I hope this means
 * that custom fonts with normal encodings are still drawn okay.
 */
    if (!(this->flags & fontSymbolic)) return;
    if (this->embFontID.num == -1) return;
/*
 * Create a stream for the fontfile
 */
    XRefFetch(xref, this->embFontID.num, this->embFontID.gen, &obj1);
    if (!isStream(&obj1)) {
	ObjFree(&obj1);
	return;
    }
/*
 * Parse it, searching for the /Encoding marker
 */
    lexer = gmalloc( sizeof (Lexer) );
    LexerInitFromStream(lexer, getStream(&obj1), xref);
    ParserInit(&parser, lexer);

    ParserGetObj(&parser, &obj2);
    while (!isNameSame(&obj2, "Encoding") &&
	   !isCmdSame(&obj2, "currentdict") &&
	   !isEOF(&obj2)) {
	ObjFree(&obj2);
	ParserGetObj(&parser, &obj2);
    }
/*
 * Look for patterns of the type "dup 32 /space put", etc.
 */
    if (isNameSame(&obj2, "Encoding")) {
	ObjFree(&obj2);
	ParserGetObj(&parser, &obj2);

	while(!isCmdSame(&obj2, "currentdict") &&
	      !isEOF(&obj2)) {
	    if (isCmdSame(&obj2, "dup")) {
		ObjFree(&obj2);
		ParserGetObj(&parser, &obj2);

		if (isInt(&obj2)) {
		    code = getInt(&obj2);
		    ObjFree(&obj2);
		    ParserGetObj(&parser, &obj2);
/*
 * This will insert '0' for the code, if the name is unrecognized.
 * Custom chars usually have names like H#### or c##.
 */
		    if (isName(&obj2)) {
			GfxFontAddChar(this->charMap, code, getName(&obj2));
		    }
		}
	    }
	    ObjFree(&obj2);
	    ParserGetObj(&parser, &obj2);
	}
    }
    ObjFree(&obj2);
/*
 * Free the parser.  LexerInitFromStream takes over the reference to the stream,
 * so no need to free obj1.  (Not a great design, I know.)
 */
    ParserFree(&parser);
#endif
}



/***********************************************************************
 *		CopyNamedEncoding
 ***********************************************************************
 *
 * SYNOPSIS:	Copy the built-in encoding map to this font's map.
 * CALLED BY:	GfxFontMakeEncoding
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	mevissen	6/02/99   	Initial Revision
 *  dhunter     1/26/2000   Changed to copy different encodings
 *
 ***********************************************************************/
void CopyNamedEncoding(GfxFont *this, Obj *pObj)
{
    optr charMap, nameMap;

    if (isNameSame(pObj, "MacRomanEncoding"))
    {
        charMap = @macRomanToGeosMap;
        nameMap = @macRomanEncodingNames;
    }
    else if (isNameSame(pObj, "WinAnsiEncoding"))
    {
        charMap = @winAnsiToGeosMap;
        nameMap = @winAnsiEncodingNames;
    }
    else
        return;

    MemLock(OptrToHandle(charMap));
    memcpy(this->charMap, LMemDeref(charMap), sizeof (this->charMap));
    MemUnlock(OptrToHandle(charMap));

    MemLock(OptrToHandle(nameMap));
    memcpy(this->charNames, LMemDeref(nameMap), sizeof(this->charNames));
    MemUnlock(OptrToHandle(nameMap));
}	/* End of CopyNamedEncoding.	*/


/*
 * char at postion 'code' in array charMap should be set to
 * correspond to character named by string 'name'
 */
void GfxFontAddChar(byte *charMap, char **charName, char *name) {
    char **pCharNames;
    char *pCharGEOSEquiv;
    int searchResult;

    *charName = name;

/*
 * if a (normal) single-char name, simply use that character
 */
    if (name[1] == '\0') {
	if (name[0] >= ' ' && name[0] < C_DELETE) {
	    *charMap = (byte) name[0];
	    return;
	}
    }
/*
 * if name == ".notdef", we zero out that encoding
 */
    if (!strcmp(name, ".notdef")) {
	*charMap = 0;
    *charName = NULL;
	return;
    }

/*
 * if name == "H###", I think that's an embedded char which
 * we don't know how to decode.
*/
    if (name[0] == 'H' && name[1] >= '0' && name[1] <= '9') {
	*charMap = 0;
	return;
    }
/*
 * if name == "G###", take a chance and decode the integer value.
 */
    if (name[0] == 'G' && name[1] >= '0' && name[1] <= '9')
    {
        int value = atoi(name + 1);
        if (value < 256)
        {
            MemLock(OptrToHandle(@pdfToGeosMap));
            pCharGEOSEquiv = LMemDeref(@pdfToGeosMap);
            value = pCharGEOSEquiv[value];
            MemUnlock(OptrToHandle(@pdfToGeosMap));
        }
        else
            value = 0;
        *charMap = value;
        return;
    }
    
/*
 * else, we need to search for this name and use the GEOS char
 * code that it maps to
 */

    MemLock(OptrToHandle(@charGEOSEquiv));
    pCharNames = LMemDeref(@charNames);
    pCharGEOSEquiv = LMemDeref(@charGEOSEquiv);

/*
 * (chunks are dword-aligned, so we get the size of the char-pointers
 * array (4-byte elements) and divide by 4 to get the # of elements  Else,
 * I'm not sure how we get the (unpadded) size of the arrays.)
 */
    searchResult = GfxFontEncodingBinarySearch(name, 
						0, 
						(LMemGetChunkSize(@charNames) >> 2) - 1,
						pCharNames);
    if (searchResult != -1)
        *charMap = pCharGEOSEquiv[searchResult];
    else
        *charMap = 0;
    MemUnlock(OptrToHandle(@charGEOSEquiv));
}

/*
 * recursively search for a name matching 'name'
 */
int GfxFontEncodingBinarySearch(char *name, int start, int end,
				 char **pCharNames) {
    int ind;
    sword comp;

    ind = (start + end) / 2;
    if (!(comp = strcmp(pCharNames[ind], name))) {
	return ind;
    }
   /*
    * Search again
    */
    if (comp > 0) {
	if (ind == start) return -1;
	return GfxFontEncodingBinarySearch(name, start, ind - 1,
					   pCharNames);
    } else {
	if (ind == end) return -1;
	return GfxFontEncodingBinarySearch(name, ind + 1, end,
					   pCharNames);
    }
}

char GfxFontMapChar(GfxFont *this, unsigned char c, char defaultChar)
{
    char trans = this->charMap[c];

    if (trans == 0)
        trans = defaultChar;
    return trans;
}

/*
 * Map a string to the GEOS charset
 */
void GfxFontMapString(GfxFont *this, unsigned char *str, word len, char defaultChar) {
    word i;
    char trans;

    for (i=0; i<len; i++){
	if ((trans = this->charMap[str[i]]) != 0) {
	    str[i] = trans;
	} else {
	    str[i] = defaultChar;
	}
    }
}

char GfxFontFindChar(GfxFont *this, unsigned char ch)
{
    int i;
    for (i = 1; i < 256; i++)
        if (ch == this->charMap[i])
            return i;
    return 0;
}

gdouble GfxFontGetWidthChar(GfxFont *this, char c)
{
    return IntToGdouble(this->widths[(unsigned char)c]) / 1000;
}

gdouble GfxFontGetWidth(GfxFont *this, GooString *s)
{
    gdouble w;
    int i;
    int length = (int)GStrGetLength(s);
    unsigned char *p = GStrGetCString(s);

    w = 0;
    for (i = 0; i < length; ++i, ++p)
        w += IntToGdouble(this->widths[*p]) / 1000;
    return w;
}

//------------------------------------------------------------------------
// GfxFontDict
//------------------------------------------------------------------------

void GfxFontDictInit(GfxFontDict *this, Dict *fontDict, XRef *xref) {
  long i;
  Obj obj1, obj2;

  initNull(&obj1);
  initNull(&obj2);

  this->numFonts = DictGetLength(fontDict);
  this->fonts = (GfxFont **)gmalloc(this->numFonts * sizeof(GfxFont *));
  for (i = 0; i < this->numFonts; ++i) {
    DictGetValNF(fontDict, i, &obj1);
    ObjFetch(&obj2, &obj1, xref);
    if (isRef(&obj1) && ObjIsDictSame(&obj2, "Font")) {
      this->fonts[i] = gmalloc( sizeof(GfxFont) );
      GfxFontInit(this->fonts[i], DictGetKey(fontDict, i), getRef(&obj1),
			     getDict(&obj2), xref);
    } else {
	EC_WARNING(-1);
//      error(-1, "font resource is not a dictionary");
      this->fonts[i] = NULL;
    }
    ObjFree(&obj1);
    ObjFree(&obj2);
  }
}

void GfxFontDictFree(GfxFontDict *this) {
  long i;

  for (i = 0; i < this->numFonts; ++i) {
      if (this->fonts[i]) {
	  GfxFontFree(this->fonts[i]);
	  gfree(this->fonts[i]);
      }
  }
  gfree(this->fonts);
}

GfxFont *GfxFontDictLookup(GfxFontDict *this, char *tag) {
  long i;

  for (i = 0; i < this->numFonts; ++i) {
    if (GfxFontMatches(this->fonts[i], tag))
      return this->fonts[i];
  }
  return NULL;
}

  GBool GfxFontMatches(GfxFont *this, char *tag1)
	{ return !GStrCmpString(&this->tag, tag1); }

  GBool GfxFontIs16Bit(GfxFont *this) { return this->is16; }

