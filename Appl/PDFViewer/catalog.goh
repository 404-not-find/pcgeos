//========================================================================
//
// Catalog.h
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifndef CATALOG_H
#define CATALOG_H

#ifdef __GNUC__
#pragma interface
#endif


  // Constructor.
extern
void CatalogInit(Catalog *cat, Obj *catDict, VMFileHandle vmFile, XRef *xref);
extern
void CatalogInitNull(Catalog *cat);


  // Destructor.
extern
void CatalogFree(Catalog *cat);

  // Is catalog valid?
extern
  GBool CatalogIsOk(Catalog *cat);

  // Get number of pages.
extern
  long CatalogGetNumPages(Catalog *cat);

  // Get a page.
//extern
//  Page *CatalogGetPage(Catalog *cat, long i);
extern
Page *CatalogLockPage(Catalog *cat, long i);
extern
void CatalogUnlockPage(Page *page);


#ifdef KEEP_PAGE_REFS

  // Find a page, given its object ID.  Returns page number, or 0 if
  // not found.
extern
long CatalogFindPage(Catalog *cat, long num, long gen);

#endif

extern
long CatalogReadPageTree(Catalog *cat, Dict *pagesDict, PageAttrs *attrs, long start, XRef *xref);

#if 0
  // Find a named destination.  Returns the link destination, or
  // NULL if <name> is not a destination.
  LinkDest *findDest(GString *name);

#endif


#endif
