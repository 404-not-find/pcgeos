/*
 * gmem.c
 *
 * Memory routines with out-of-memory checking.
 *
 * Copyright 1996 Derek B. Noonburg
 */

@include "pdfvu.goh"
#include <Ansi/stdlib.h>
#include <stddef.h>
#include <string.h>
@include "gmem.goh"


#ifdef DEBUG_MEM
typedef struct _GMemHdr {
  long size;
  long index;
  struct _GMemHdr *next;
} GMemHdr;

#define gMemHdrSize ((sizeof(GMemHdr) + 7) & ~7)
#define gMemTrlSize (sizeof(long))

#if gmemTrlSize==8
#define gMemDeadVal 0xdeadbeefdeadbeef
#else
#define gMemDeadVal 0xdeadbeef

/* round data size so trailer will be aligned */
#define gMemDataSize(size) \
  ((((size) + gMemTrlSize - 1) / gMemTrlSize) * gMemTrlSize)

#endif

static GMemHdr *gMemList = NULL;
static long gMemIndex = 0;
static long gMemAlloc = 0;
#endif

#define GMALLOC_RETRY_COUNT     20
#define GMALLOC_RETRY_INTERVAL  60

void *gmalloc(long size) {
#if DEBUG_MEM
  long size1;
  char *mem;
  GMemHdr *hdr;
  void *data;
  long *trl, *p;

  if (size == 0)
    return NULL;
  size1 = gMemDataSize(size);
  if (!(mem = (char *)malloc(size1 + gMemHdrSize + gMemTrlSize))) {
    fprintf(stderr, "Out of memory\n");
    exit(1);
  }
  hdr = (GMemHdr *)mem;
  data = (void *)(mem + gMemHdrSize);
  trl = (long *)(mem + gMemHdrSize + size1);
  hdr->size = size;
  hdr->index = gMemIndex++;
  hdr->next = gMemList;
  gMemList = hdr;
  ++gMemAlloc;
  for (p = (long *)data; p <= trl; ++p)
    *p = gMemDeadVal;
  return data;
#else
  void *p;
  int retries = GMALLOC_RETRY_COUNT;

  if (size == 0)
    return NULL;
  while (!(p = malloc(size)) && retries--) {
//    fprintf(stderr, "Out of memory\n");
//    exit(1);
  /*
   * If out of memory, should we FatalError or try sleeping?
   */
      EC_WARNING(-1);
      TimerSleep(GMALLOC_RETRY_INTERVAL);
  }
  return p;
#endif
}

void *grealloc(void *p, long size) {
#if DEBUG_MEM
  GMemHdr *hdr;
  void *q;
  long oldSize;

  if (size == 0) {
    if (p)
      gfree(p);
    return NULL;
  }
  if (p) {
    hdr = (GMemHdr *)((char *)p - gMemHdrSize);
    oldSize = hdr->size;
    q = gmalloc(size);
    memcpy(q, p, size < oldSize ? size : oldSize);
    gfree(p);
  } else {
    q = gmalloc(size);
  }
  return q;
#else
  void *q = 0;

  if (size == 0) {
    if (p)
      free(p);
    return NULL;
  }
  while (!q) {
      if (p)
	  q = realloc(p, size);
      else
	  q = malloc(size);
      if (!q) {
	  //    fprintf(stderr, "Out of memory\n");
	  //    exit(1);
	  EC_WARNING(-1);
	  TimerSleep(30);
      }
  }
  return q;
#endif
}

void gfree(void *p) {
#ifdef DEBUG_MEM
  long size;
  GMemHdr *hdr;
  GMemHdr *prevHdr, *q;
  long *trl, *clr;

  if (p) {
    hdr = (GMemHdr *)((char *)p - gMemHdrSize);
    for (prevHdr = NULL, q = gMemList; q; prevHdr = q, q = q->next) {
      if (q == hdr)
	break;
    }
    if (q) {
      if (prevHdr)
	prevHdr->next = hdr->next;
      else
	gMemList = hdr->next;
      --gMemAlloc;
      size = gMemDataSize(hdr->size);
      trl = (long *)((char *)hdr + gMemHdrSize + size);
      if (*trl != gMemDeadVal) {
	fprintf(stderr, "Overwrite past end of block %d at address %p\n",
		hdr->index, p);
      }
      for (clr = (long *)hdr; clr <= trl; ++clr)
	*clr = gMemDeadVal;
      free(hdr);
    } else {
      fprintf(stderr, "Attempted to free bad address %p\n", p);
    }
  }
#else
  if (p)
    free(p);
#endif
}

#ifdef DEBUG_MEM
void gMemReport(FILE *f) {
  GMemHdr *p;

  fprintf(f, "%d memory allocations in all\n", gMemIndex);
  if (gMemAlloc > 0) {
    fprintf(f, "%d memory blocks left allocated:\n", gMemAlloc);
    fprintf(f, " index     size\n");
    fprintf(f, "-------- --------\n");
    for (p = gMemList; p; p = p->next)
      fprintf(f, "%8d %8d\n", p->index, p->size);
  } else {
    fprintf(f, "No memory blocks left allocated\n");
  }
}
#endif

char *copyString(char *s) {
  char *s1;

  s1 = (char *)gmalloc(strlen(s) + 1);
  strcpy(s1, s);
  return s1;
}

long 
  atol(const TCHAR *__s)
{
    long i, n=0;

    for (i=0; __s[i] >= _TEXT('0') && __s[i] <= _TEXT('9'); ++i)
	n = 10 * n + (__s[i] - _TEXT('0'));


    return  n;
}
