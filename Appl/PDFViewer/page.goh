//========================================================================
//
// Page.h
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifndef PAGE_H
#define PAGE_H

#ifdef __GNUC__
#pragma interface
#endif


//------------------------------------------------------------------------
// PageAttrs
//------------------------------------------------------------------------


  // Construct a new PageAttrs object by merging a dictionary
  // (of type Pages or Page) into another PageAttrs object.  If
  // <attrs> is NULL, uses defaults.
extern
void PageAttrsInit(PageAttrs *this, PageAttrs *attrs, Dict *dict, XRef *xref);

  // Destructor.
extern
void PageAttrsFree(PageAttrs *this);

  // Accessors.
extern
  gdouble PageAttrsGetX1(PageAttrs *this);
extern
  gdouble PageAttrsGetY1(PageAttrs *this);
extern
  gdouble PageAttrsGetX2(PageAttrs *this);
extern
  gdouble PageAttrsGetY2(PageAttrs *this);
extern
  GBool PageAttrsIsCropped(PageAttrs *this);
extern
  gdouble PageAttrsGetCropX1(PageAttrs *this);
extern
  gdouble PageAttrsGetCropY1(PageAttrs *this);
extern
  gdouble PageAttrsGetCropX2(PageAttrs *this);
extern
  gdouble PageAttrsGetCropY2(PageAttrs *this);
extern
  long PageAttrsGetRotate(PageAttrs *this);


//extern
//Dict *PageAttrsGetResourceDict(PageAttrs *this);
extern
void PageAttrsCopyResourceDict(PageAttrs *this, Obj *dest, XRef *xref);


//------------------------------------------------------------------------
// Page
//------------------------------------------------------------------------


  // Constructor.
extern
void PageInit(Page *page, long num1, Dict *pageDict, PageAttrs *attrs1);

  // Destructor.
extern
void PageFree(Page *page);

  // Is page valid?
extern
  GBool PageIsOk(Page *page);

  // Get page parameters.
extern
  gdouble PageGetX1(Page *page);
extern
  gdouble PageGetY1(Page *page);
extern
  gdouble PageGetX2(Page *page);
extern
  gdouble PageGetY2(Page *page);
extern
  GBool  PageIsCropped(Page *page);
extern
  gdouble PageGetCropX1(Page *page);
extern
  gdouble PageGetCropY1(Page *page);
extern
  gdouble PageGetCropX2(Page *page);
extern
  gdouble PageGetCropY2(Page *page);
extern
  gdouble PageGetWidth(Page *page);
extern
  gdouble PageGetHeight(Page *page);
extern
  long PageGetRotate(Page *page);


  // Get resource
//extern
//  Dict *PageGetResourceDict(Page *page);
extern
void PageCopyResourceDict(Page *page, Obj *dest, XRef *xref);

  // Get annotations array.
extern
  void PageGetAnnots(Page *page, Obj *obj, XRef *xref);

  // Get contents.
extern
  void PageGetContents(Page *page, Obj *obj, XRef *xref);

#if 0
  // Display a page.
  void display(OutputDev *out, long dpi, long rotate);
#endif


#endif
