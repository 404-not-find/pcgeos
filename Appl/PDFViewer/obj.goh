//========================================================================
//
// Object.h
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifndef PDF_OBJECT_H
#define PDF_OBJECT_H

#ifdef __GNUC__
#pragma interface
#endif


  // Default constructor.
//  Object():
//    type(objNone) {}

  // Initialize an object.
extern
  void initBool(Obj *obj, GBool booln1);
extern
  void initInt(Obj *obj, long intg1);
extern
  void initReal(Obj *obj, gdouble real1);
extern
  void initString(Obj *obj, GooString *string1);
extern
  void initName(Obj *obj, char *name1);
extern
  void initNull(Obj *obj);
extern
  void initRef(Obj *obj, long num1, long gen1);
extern
  void initCmd(Obj *obj, char *cmd1);
extern
  void initError(Obj *obj);
extern
  void initEOF(Obj *obj);

extern
void initArray(Obj *obj);
extern
void initDict(Obj *obj);
extern
void initDictData(Obj *obj, Dict *dict1);
extern
void initStream(Obj *obj, Stream *stream1);


  // Copy an object.
extern
void ObjCopy(Obj *obj, Obj *obj2);

  // If object is a Ref, fetch and return the referenced object.
  // Otherwise, return a copy of the object.
extern
void ObjFetch(Obj *dest, Obj *obj, XRef *xref);

  // Free object contents.
extern
void ObjFree(Obj *obj);

  // Type checking.
extern
  GBool isBool(Obj *obj);
extern
  GBool isInt(Obj *obj);
extern
  GBool isReal(Obj *obj);
extern
  GBool isNum(Obj *obj);
extern
  GBool isString(Obj *obj);
extern
  GBool isName(Obj *obj);
extern
  GBool isNull(Obj *obj);
extern
  GBool isArray(Obj *obj);
extern
  GBool isDict(Obj *obj);
extern
  GBool isStream(Obj *obj);
extern
  GBool isRef(Obj *obj);
extern
  GBool isCmd(Obj *obj);
extern
  GBool isError(Obj *obj);
extern
  GBool isEOF(Obj *obj);
extern
  GBool isNone(Obj *obj);

  // Special type checking.
extern
  GBool isNameSame(Obj *obj, char *name1);
extern
  GBool isCmdSame(Obj *obj, char *cmd1);

  // Accessors.  NB: these assume object is of correct type.
extern
  GBool getBool(Obj *obj);
extern
  long getInt(Obj *obj);
extern
  gdouble getReal(Obj *obj);
extern
  gdouble getNum(Obj *obj);
extern
  GooString *getString(Obj *obj);
extern
  char *getName(Obj *obj);
extern
  Array *getArray(Obj *obj);
extern
  Dict *getDict(Obj *obj);
extern
  Stream *getStream(Obj *obj);
extern
  Ref getRef(Obj *obj);
extern
  long getRefNum(Obj *obj);
extern
  long getRefGen(Obj *obj);


  // Array accessors.
extern
 long ObjArrayGetLength(Obj *obj);
extern
 void ObjArrayAdd(Obj *obj, Obj *elem);
extern
 void ObjArrayGet(Obj *obj, long i, Obj *obj2, XRef *xref);
extern
 void ObjArrayGetNF(Obj *obj, long i, Obj *obj2);


  // Dict accessors.
extern
 long ObjDictGetLength(Obj *obj);
extern
 void ObjDictAdd(Obj *obj, char *key, Obj *val);
extern
 GBool ObjDictIsSame(Obj *obj, char *dictType);
extern
 GBool ObjIsDictSame(Obj *obj, char *dictType);
extern
 void ObjDictLookup(Obj *obj, char *key, Obj *obj2, XRef *xref);
extern
 void ObjDictLookupNF(Obj *obj, char *key, Obj *obj2);
extern
 char *ObjDictGetKey(Obj *obj, long i);
extern
 void ObjDictGetVal(Obj *obj, long i, Obj *obj2, XRef *xref);
extern
 void ObjDictGetValNF(Obj *obj, long i, Obj *obj2);


  // Stream accessors.

extern
 GBool ObjStreamIs(Obj *obj, char *dictType);

extern
 GBool ObjIsStream(Obj *obj, char *dictType);

extern
 void ObjStreamReset(Obj *obj);

extern
 int ObjStreamGetChar(Obj *obj);

extern
 int ObjStreamLookChar(Obj *obj);

extern
 long ObjStreamGetPos(Obj *obj);

extern
 void ObjStreamSetPos(Obj *obj, long pos);

extern
 FileHandle ObjStreamGetFile(Obj *obj);

extern
 Dict *ObjStreamGetDict(Obj *obj);

extern
 void ObjStreamGetLine(Obj *obj, char *buf, int size);


#if 0
  // Output.
  char *getTypeName();
  void print(FILE *f = stdout);

  // Memory testing.
  static void memCheck(FILE *f);
#endif

#ifdef DEBUG_MEM
  static long			// number of each type of object
    numAlloc[numObjTypes];	//   currently allocated
#endif


#endif
