/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
*/
/**************************************************************************
 *      Include files
 **************************************************************************/

@include <stdapp.goh>
@include <Objects/Text/tCtrlC.goh>

#include <initfile.h>
#include <fileEnum.h>
#include <sysStats.h>
#include <sem.h>

#include <ansi\string.h>
#include <ansi\stdio.h>
#include <ansi\stdlib.h>
#include <geomisc.h>

@include <fixes.goh>
@include "htmlview.goh"
@ifdef COMPILE_OPTION_BOOKMARKS
@include "bookmark.goh"
@endif
@ifdef COMPILE_OPTION_FAVORITES
@include "favorite.goh"
@endif
@include "urlfetch.goh"
@include "importg.goh"
@include "expire.goh"
@include "stattext.goh"

@ifdef COMPILE_OPTION_AUTO_BROWSE
@extern object AutoBrowseOptions ;
@endif

@ifdef COMPILE_OPTION_PROGRESS_INDICATOR
/* TRUE if we are using the progress indicator to show download status */
extern Boolean G_progressStatus;
@extern object ProgressIndicator ;
@endif


@extern object CurrentURLText ;
@extern object HTMLSettingsBoolGroup ;
@extern object SimpleURLToolbar ;
@extern object StatusBar ;
@extern object HTMLVApp ;
@extern object MsgBlank;
@extern object HTMLVPrimary ;
@extern object LinkStatus;
@extern object NavigateBack ;
@extern object NavigateBackBut ;
@extern object NavigateBackBut2 ;
@extern object NavigateForward ;
@extern object NavigateFwdBut ;
@extern object NavigateFwdBut2 ;
@extern object NavigateReload ;
@extern object NavigateStop ;
@extern object NavigateStopBut ;
@extern object NavigateStopBut2 ;
@extern object NavigateHome ;
@extern object NavigateHomeBut ;
@extern object newHomeTrigger ;
@extern object EditTrigger ;
@extern object EditTriggerBut ;
@extern object NavigateReloadBut ;
@extern object NavigateLoadGraphicsNow ;
@extern object NavigateLoadGraphicsBut ;
@extern object HistoryList ;
@extern object HistoryList2 ;
@extern object PrintControl ;

@ifdef COMPILE_OPTION_TOGGLE_BARS
@ifdef COMPILE_OPTION_TOGGLE_GOTO_BAR
@extern chunk HideGotoBarMoniker ;
@extern chunk ShowGotoBarMoniker ;
@extern object ToggleGotoBar ;
@endif
@ifdef COMPILE_OPTION_TOGGLE_STATUS_BAR
@extern chunk HideStatusBarMoniker ;
@extern chunk ShowStatusBarMoniker ;
@extern object ToggleStatusBar ;
@endif
@extern object SimpleToolbarGoto ;
@extern object JumpEntry ;
@extern object GotoEntry ;
@endif

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
@extern object SimpleToolbarBack ;
@extern object SimpleToolbarNext ;
@extern object SimpleToolbarReload ;
@extern object SimpleToolbarHome ;
@extern object SimpleToolbarStop ;
@extern object SimpleToolbar ;
@endif

@ifdef COMPILE_OPTION_DOWNLOAD_PROGRESS_DIALOG
@extern @object DownloadProgressDialog;
@endif

@ifdef JAVASCRIPT_SUPPORT
@extern @object WindowOpenWindow;
@endif

void LOCAL EnabledOrNot(optr obj, word enable)
{
    if(enable)
      @send obj::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
      @send obj::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
}

void LOCAL UsableOrNot(optr obj, word enable)
{
    if(enable)
      @send obj::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    else
      @send obj::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
}

void UpdateNavigation(WordFlags flags)
{
    word num;

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarBack,    (flags & HTML_HIST_BACK)) ;
@endif
    EnabledOrNot(@NavigateBack,         (flags & HTML_HIST_BACK));
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarBack,          (flags & HTML_HIST_BACK));
@endif
    EnabledOrNot(@NavigateBackBut,      (flags & HTML_HIST_BACK));
    EnabledOrNot(@NavigateBackBut2,     (flags & HTML_HIST_BACK));

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarNext,    (flags & HTML_HIST_FORWARD)) ;
@endif
    EnabledOrNot(@NavigateForward,      (flags & HTML_HIST_FORWARD));
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarForward,       (flags & HTML_HIST_FORWARD));
@endif
    EnabledOrNot(@NavigateFwdBut,       (flags & HTML_HIST_FORWARD));
    EnabledOrNot(@NavigateFwdBut2,      (flags & HTML_HIST_FORWARD));

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarReload,  (flags & HTML_HIST_CURRENT)) ;
@endif
    EnabledOrNot(@NavigateReload,       (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@newHomeTrigger,       (flags & HTML_HIST_CURRENT));
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarReload,        (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@IconBarPrint,         (flags & HTML_HIST_CURRENT));
@endif
@ifdef COMPILE_OPTION_HTML_EDITOR
    EnabledOrNot(@EditTrigger,          (flags & HTML_HIST_CURRENT));
@endif
    EnabledOrNot(@NavigateReloadBut,    (flags & HTML_HIST_CURRENT));
@ifdef COMPILE_OPTION_HTML_EDITOR
    EnabledOrNot(@EditTriggerBut,       (flags & HTML_HIST_CURRENT));
@endif
@ifdef COMPILE_OPTION_LOCAL_PAGES
    EnabledOrNot(@LocalSaveTrigger,     (flags & HTML_HIST_CURRENT));
@endif
    EnabledOrNot(@PrintControl,         (flags & HTML_HIST_CURRENT));

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarHome,    (flags & HTML_HIST_HOME)) ;
@endif
    EnabledOrNot(@NavigateHome,         (flags & HTML_HIST_HOME));
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarHome,          (flags & HTML_HIST_HOME));
@endif
    EnabledOrNot(@NavigateHomeBut,      (flags & HTML_HIST_HOME));

    EnabledOrNot(@NavigateLoadGraphicsNow,
      (flags & HTML_HIST_LOAD_GR));
    EnabledOrNot(@NavigateLoadGraphicsBut,
      (flags & HTML_HIST_LOAD_GR));

    num = HistoryGetEntryNum();

@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarHistory,       num);
@endif
    EnabledOrNot(@HistoryList,          num);
    EnabledOrNot(@HistoryList2,         num);
    @send HistoryList::MSG_GEN_DYNAMIC_LIST_INITIALIZE( num?num:1 );
@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
    @send HistoryList2::MSG_GEN_DYNAMIC_LIST_INITIALIZE( num?num:1 );
@endif
    if(num)                             /* first entry reflects current page */
    {
      @send HistoryList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
      @send HistoryList2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
@endif
    }
}

void UpdateToolbar(Boolean enabled)
{
@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
    UsableOrNot(@SmallNavigator,       !enabled);
    UsableOrNot(@MainToolbar,          enabled);
@endif
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    UsableOrNot(@SmallNavigator,       !enabled);
    UsableOrNot(@IconBar,              enabled);
@endif
@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    UsableOrNot(@SimpleToolbar,        enabled);
@endif
@ifdef COMPILE_OPTION_SHOW_HIDE_TOOLBAR
    UsableOrNot(@ShowToolbarTrigger,   !enabled);
    UsableOrNot(@HideToolbarTrigger,   enabled);
@endif
}

@ifdef COMPILE_OPTION_TOGGLE_BARS
void UpdateToggleBars(word toggleBars)
{
    /* Goto bar */
@ifdef COMPILE_OPTION_TOGGLE_GOTO_BAR
    if (toggleBars & TOGGLE_BARS_GOTO_ON) {
	/* update moniker */
	@send ToggleGotoBar::MSG_GEN_USE_VIS_MONIKER(
	    OptrToChunk(@HideGotoBarMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	/* add URL toolbar */
	@send SimpleURLToolbar::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	/* remove Goto button in toolbar */
	@send SimpleToolbarGoto::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    } else {
	/* update moniker */
	@send ToggleGotoBar::MSG_GEN_USE_VIS_MONIKER(
	    OptrToChunk(@ShowGotoBarMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	/* remove URL toolbar */
	@send SimpleURLToolbar::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	/* add Goto button in toolbar */
	@send SimpleToolbarGoto::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    }
@endif
@ifdef COMPILE_OPTION_TOGGLE_STATUS_BAR
    /* status bar */
    if (toggleBars & TOGGLE_BARS_STATUS_ON) {
	/* update moniker */
	@send ToggleStatusBar::MSG_GEN_USE_VIS_MONIKER(
	    OptrToChunk(@HideStatusBarMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	/* add status bar */
	@send StatusBar::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    } else {
	/* update moniker */
	@send ToggleStatusBar::MSG_GEN_USE_VIS_MONIKER(
	    OptrToChunk(@ShowStatusBarMoniker), VUM_NOW);
	/* remove status bar */
	@send StatusBar::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    }
@endif
}
@endif

@extern method HTMLVProcessClass, MSG_HMLVP_NOTIFY_NAVIGATION_CHANGE
{
    UpdateNavigation(flags);
}

@ifdef GLOBAL_INTERNET_BUILD
Boolean HandleJumpword(TCHAR *url)
{
    Boolean handled = FALSE;

    if (!strchr(url, ':') && !strchr(url, '/') &&
	!strchr(url, '.')) {
	@call JumpEntry::MSG_VIS_TEXT_REPLACE_ALL_PTR(url, 0);
	@call process::MSG_HMLVP_JUMP();
	handled = TRUE;
    } else {
	TCHAR *p = url, *q = url;

	/* strip all spaces */
	while (p && *p) {
	    if (*p != C_SPACE) {
		*q++ = *p++;
	    } else {
		p++;
	    }
	}
	*q = C_NULL;
    }
    return handled;
}
@endif

@extern method HTMLVProcessClass, MSG_HMLVP_URL_CHANGED
{
    TCHAR *urlP;
    MemHandle urlH;
    NameToken url;
    EventHandle evt;

    HWChecksumCheck() ;
    urlH = @call CurrentURLText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    urlP = MemLock(urlH);
    /* clear mod state so we can detect user changes during operation */
    @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
    HWChecksumCheck() ;
@ifdef GLOBAL_INTERNET_BUILD
     if (HandleJumpword(urlP)) {
	 MemFree(urlH);
	 return;
     }
@endif
    url = NamePoolTokenize(namePool, urlP, TRUE);
    MemFree(urlH);
    evt = @record
      URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
    HWChecksumCheck() ;
    @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
                                        /* load new URL */
    HWChecksumCheck() ;
}

@extern method HTMLVProcessClass, MSG_HMLVP_HOME_TRIGGER
{
    MemHandle homeH;
    TCHAR *homeP;
    NameToken url;
    EventHandle evt;

    HWChecksumCheck() ;
    if(NavigateGetHome(&homeH))
    {
      HWChecksumCheck() ;
      homeP = MemLock(homeH);
      /* clear mod state so we'll update URL with current page */
      @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
      url = NamePoolTokenize(namePool, homeP, TRUE);
      MemFree(homeH);
      evt = @record
        URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
      @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
                                             /* load home URL if defined */
    }
    HWChecksumCheck() ;
}

@ifdef COMPILE_OPTION_TOGGLE_BARS
@extern method HTMLVProcessClass, MSG_HMLVP_GOTO
{
    MemHandle gotoH;
    TCHAR *gotoP;
    NameToken url;
    EventHandle evt;

    gotoH = @call GotoEntry::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    gotoP = MemLock(gotoH);
    if (!(*gotoP)) {
	MemFree(gotoH);
	return;
    }
@ifdef GLOBAL_INTERNET_BUILD
     if (HandleJumpword(gotoP)) {
	 MemFree(gotoH);
	 return;
     }
    /* update with space-stripped version */
    @call GotoEntry::MSG_VIS_TEXT_REPLACE_ALL_PTR(gotoP, 0);
@endif
    url = NamePoolTokenize(namePool, gotoP, TRUE);
    MemFree(gotoH);
    evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
    @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
}
@endif

@ifdef GLOBAL_INTERNET_BUILD
@extern method HTMLVProcessClass, MSG_HMLVP_JUMP
{
    MemHandle jumpBlk, jumpArgs;
    word jumpSize, jumpURLLen;
    TCHAR *jumpURL, *jumpArgP;
    NameToken url;
    EventHandle evt;
#ifdef SECURE_INI_URLS
    int secureFlag = 0;
    static TCHAR defJumpURL[] = SECURE_INI_JUMP;
#endif

    if (!(InitFileReadStringBlock(HTMLVIEW_CATEGORY, "jumpURL",
				  &jumpBlk, 0, &jumpSize)) && jumpBlk) {
#ifdef SECURE_INI_URLS
	InitFileReadInteger(HTMLVIEW_CATEGORY, SECURE_INI_KEY, &secureFlag);
	if (secureFlag != SECURE_INI_FLAG) {
	    MemFree(jumpBlk);
	    jumpBlk = 0;
	}
    }
    /* if none or not valid, use default */
    if (!jumpBlk) {
	jumpBlk = MemAlloc((strlen(defJumpURL)+1)*sizeof(TCHAR), HF_DYNAMIC, HAF_STANDARD);
	if (jumpBlk) {
	    jumpURL = MemLock(jumpBlk);
	    strcpy(jumpURL, defJumpURL);
	    jumpSize = strlen(jumpURL);
	    MemUnlock(jumpBlk);
	}
    }
    /* process */
    if (jumpBlk) {
#endif
	if (jumpSize) {
	    int jLen;
	    jLen = @call JumpEntry::MSG_VIS_TEXT_GET_TEXT_SIZE();
	    MemReAlloc(jumpBlk, jumpSize+((jLen+1)*sizeof(TCHAR)), HAF_STANDARD);
	    jumpURL = MemLock(jumpBlk);
	    jumpURLLen = strlen(jumpURL);
	    /* append jumpword to jump URL, temporarily */
	    @call JumpEntry::MSG_VIS_TEXT_GET_ALL_PTR(
		jumpURL+jumpURLLen);
	    /* URL-encode jumpword, if any */
	    if (*(jumpURL+jumpURLLen)) {
		jumpArgs = FormStringCreate();
		FormStringConvertAndAppend(jumpArgs, jumpURL+jumpURLLen);
		jumpArgP = MemLock(jumpArgs);
		if (jumpArgP) {
		    jumpArgP = FormStringDerefData(jumpArgs);
		    /* append URL-encoded jumpword */
		    strcpy(jumpURL+jumpURLLen, jumpArgP);
		    url = NamePoolTokenize(namePool, jumpURL, TRUE);
		    evt = @record URLDocumentClass::
			MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
		    @send application::MSG_META_SEND_CLASSED_EVENT(
			evt, TO_APP_MODEL);
		}
		MemFree(jumpArgs);
	    }
	}
	MemFree(jumpBlk);
    }
}

@extern method HTMLVProcessClass, MSG_HMLVP_SEARCH
{
    MemHandle searchBlk;
    word searchSize;
    TCHAR *searchURL;
    NameToken url;
    EventHandle evt;
    char searchKey[20];

@ifdef DO_DBCS
    sprintfsbcs(searchKey, SEARCH_URL_TEMPLATE, type);
@else
    sprintf(searchKey, SEARCH_URL_TEMPLATE, type);
@endif
    if (!(InitFileReadStringBlock(HTMLVIEW_CATEGORY, searchKey,
                &searchBlk, 0, &searchSize)) && searchBlk) {
    if (searchSize) {
        searchURL = MemLock(searchBlk);
        if (searchURL) {
        url = NamePoolTokenize(namePool, searchURL, TRUE);
        evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(
            url, DIR_GO);
        @send application::MSG_META_SEND_CLASSED_EVENT(evt,
                                   TO_APP_MODEL);
        }
    }
    MemFree(searchBlk);
    }
}
@endif

@ifdef COMPILE_OPTION_IGNORE_INPUT_DURING_LOADING
@extern method HTMLVApplicationClass, MSG_HMLVA_IGNORE_INPUT
{
    pself->HVAI_ignoreInput = TRUE;
}
@extern method HTMLVApplicationClass, MSG_HMLVA_ACCEPT_INPUT
{
    pself->HVAI_ignoreInput = FALSE;
}
@extern method HTMLVApplicationClass, MSG_HMLVA_IGNORING_INPUT
{
    extern Boolean G_ignoreInput;

    return (G_ignoreInput && pself->HVAI_ignoreInput);
}
@endif

void MarkBusy(HTMLVApplicationInstance *p, optr app)
{
@ifdef JAVASCRIPT_SUPPORT
    if (@call WindowOpenWindow::MSG_VIS_GET_ATTRS() & VA_VISIBLE) {
	@call app::MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY();
	p->HVAI_busy |= BF_COMPLETELY;
    } else {
	@call app::MSG_GEN_APPLICATION_MARK_BUSY();
    }
@else
    @call app::MSG_GEN_APPLICATION_MARK_BUSY();
@endif
}

void MarkNotBusy(HTMLVApplicationInstance *p, optr app)
{
@ifdef JAVASCRIPT_SUPPORT
    if (p->HVAI_busy & BF_COMPLETELY) {
	@call app::MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY();
	p->HVAI_busy &= ~BF_COMPLETELY;
    } else {
	@call app::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
    }
@else
    @call app::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
@endif
}

@extern method HTMLVApplicationClass, MSG_HMLVA_MARK_BUSY
{
    if (!(pself->HVAI_busy & BF_BUSY)) {
	if (!(pself->HVAI_busy & BF_OVERRIDE)) {
	    MarkBusy(pself, oself);
	}
	pself->HVAI_busy |= BF_BUSY;
    } else {
	if (pself->HVAI_busy & BF_OVERRIDE) {
	    MarkBusy(pself, oself);
	}
    }
    pself->HVAI_busy &= ~BF_OVERRIDE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_MARK_NOT_BUSY
{
    if (pself->HVAI_busy & BF_BUSY) {
	if (!(pself->HVAI_busy & BF_OVERRIDE)) {
	    MarkNotBusy(pself, oself);
	}
	pself->HVAI_busy &= ~BF_BUSY;
    }
    pself->HVAI_busy &= ~BF_OVERRIDE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_OVERRIDE_BUSY
{
    if ((pself->HVAI_busy & BF_BUSY) && !(pself->HVAI_busy & BF_OVERRIDE)) {
	MarkNotBusy(pself, oself);
	pself->HVAI_busy |= BF_OVERRIDE;
    }
}

@extern method HTMLVApplicationClass, MSG_HMLVA_RESTORE_BUSY
{
    if ((pself->HVAI_busy & BF_BUSY) && (pself->HVAI_busy & BF_OVERRIDE)) {
	MarkBusy(pself, oself);
	pself->HVAI_busy &= ~BF_OVERRIDE;
    }
}

void UserAbortStart(void)
{
    extern Boolean G_stopped ;
    G_stopped = TRUE;
}

void UserAbortEnd(void)
{
    extern Boolean G_stopped ;
    G_stopped = FALSE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_STOP_TRIGGER
{
@ifdef COMPILE_OPTION_AUTO_BROWSE
    IBM = 0;                          /* signal termination to auto browser */
@endif
    /* clear mod state so we'll update URL with current page */
    @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();

@ifdef COMPILE_OPTION_DOWNLOAD_PROGRESS_DIALOG
    /* ensure download progress dialog is closed */
    @send DownloadProgressDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
@endif

    /* disable Stop trigger for feedback */
    UpdateStop(FALSE);

    @AbortOperation(FALSE, FALSE, 0);             /* abort current operation */
}

void UpdateStop(Boolean enabled)
{
    EnabledOrNot(@NavigateStop,      enabled);
@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarStop, enabled);
@endif
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarStop,       enabled);
@endif
    EnabledOrNot(@NavigateStopBut,   enabled);
    EnabledOrNot(@NavigateStopBut2,  enabled);
}


@ifdef COMPILE_OPTION_TOGGLE_BARS
@extern method HTMLVProcessClass, MSG_HMLVP_TOGGLE_GOTO_BAR, MSG_HMLVP_TOGGLE_STATUS_BAR
{
    word toggleBars = 0;

    /* get current bar states */
    if (@call SimpleURLToolbar::MSG_GEN_GET_USABLE()) {
	toggleBars |= TOGGLE_BARS_GOTO_ON;
    }
    if (@call StatusBar::MSG_GEN_GET_USABLE()) {
	toggleBars |= TOGGLE_BARS_STATUS_ON;
    }
    /* toggle desired one */
    if (message == MSG_HMLVP_TOGGLE_GOTO_BAR) {
	toggleBars ^= TOGGLE_BARS_GOTO_ON;
    } else {
	toggleBars ^= TOGGLE_BARS_STATUS_ON;
    }
    /* update with new bar state */
    UpdateToggleBars(toggleBars);
}
@endif

@ifndef COMPILE_OPTION_SHOW_HIDE_TOOLBAR
@extern method HTMLVProcessClass, MSG_HMLVP_OPTIONS_CHANGED
{
    HWChecksumCheck() ;
    if(modifiedBooleans & HTMLV_ENABLE_TOOLBAR)
      UpdateToolbar(selectedBooleans & HTMLV_ENABLE_TOOLBAR);
    HWChecksumCheck() ;
}
@endif


