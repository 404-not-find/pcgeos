
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/***********************************************************************
 *
 *
 * PROJECT:	GPC Banker
 * FILE:	     bnkr30.goh
 * AUTHOR:	John F. Howard,   12/98
 *
 * DESCRIPTION:
 *	This file has the global variables
 *      and structures for the application.
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <gstring.h>
#include <Ansi/string.h>
#include <initfile.h>
@include <math.goh>
#include <print.h>      /* These two for printing  */
@include <spool.goh>
@include <iacp.goh>     /* to launch calculator */
#include <token.h>	/* for assigning doc token */
@include <Objects/Text/tCtrlC.goh>  /* for controllers */
@include <Objects/vLTextC.goh>    /* VisLargeText definitions */
//#include <bnkrdraw.h>   /* for drawing the entry backgrounds */
/*@ifndef COMPILEGPC */
@include <n2txt.goh>   /* for the number to text conv in check printing */
/*@endif  */
/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
@class	GPCBnkrProcessClass, GenProcessClass ;

   /* Messages for handling accounts */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_SELECT_ACCOUNT;
   @message void MSG_CANCEL_SELECT_ACCOUNT();
   @message void MSG_OPEN_NEW_ACCOUNT();
   @message (GEN_TRIGGER_ACTION) MSG_NEW_ACCOUNT;
   @message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_AUTONUM_BOOLEAN_STATUS;
   @message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_MOD_AUTONUM_BOOLEAN_STATUS;
   @message void MSG_USE_ACCOUNT();
   @message void MSG_USE_ACCOUNT_FROM_VIEW_MENU(int whichAcct);
   @message void MSG_OPEN_MANAGE_ACCTS();
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_MODIFY_ACCOUNT;
   @message (GEN_TRIGGER_ACTION) MSG_MODIFY_ACCOUNT;
   @message (GEN_TRIGGER_ACTION) MSG_DELETE_ACCOUNT;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ACCT_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ACCT_DLIST_APPLY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MNG_ACCT_DLIST_APPLY;
   @message void MSG_UPDATE_VIEW_MENU(int whichUpdate);
   @message (GEN_TRIGGER_ACTION) MSG_LAUNCH_CALC;
//   @message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_COPY_SELECTOR_ACTION;

   /* Messages for handling transfers */
   @message void MSG_ENTER_TRANSFER();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TO_DLIST_APPLY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_FROM_DLIST_APPLY;

   /* Messages for handling transactions */
   @message void MSG_OPEN_ENTRY(word whichEntry);
//   @message void MSG_CANCEL_ENTRY();
   @message void MSG_SET_ENTRY_FORM(word whichType);
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ENTRY_TYPE_LIST_APPLY;
   @message void MSG_ENTER_TRANS();
   @message (GEN_TRIGGER_ACTION) MSG_MODIFY_TRANS;
   @message (GEN_TRIGGER_ACTION) MSG_VOID_TRANS;
   @message (GEN_TRIGGER_ACTION) MSG_DELETE_TRANS;

   /* Messages for handling multiples */
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_CREATE_MULTI_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_CREATE_MULTI_DLIST_MONIKER_QUERY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_MULTI_CATS;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_ADD_MULTIPLE;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_MULTI_CAT_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MULTI_CAT_DLIST_APPLY;
   @message (GEN_TRIGGER_ACTION) MSG_ADD_MULTICAT;
   @message (GEN_TRIGGER_ACTION) MSG_DELETE_MULTI_CAT;
   @message void MSG_MCAT_DBL_CLICK();

   /* Messages for handling find */
   @message void MSG_OPEN_SEARCH();
   @message void MSG_SEARCH_TRANS(word whichSearch);

   /* Messages for handling cat & pay lists */
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_CAT_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_CAT_DLIST_APPLY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_SELECT_CATEGORIES;
   @message (GEN_TRIGGER_ACTION) MSG_USE_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_NEW_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_MODIFY_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_NEW_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_MODIFY_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_DELETE_CATEGORY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_NEW_SUBCATEGORY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_PAY_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_PAY_DLIST_APPLY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_SELECT_PAYEES;
   @message (GEN_TRIGGER_ACTION) MSG_USE_PAYEE;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_NEW_PAYEE;
   @message (GEN_TRIGGER_ACTION) MSG_NEW_PAYEE;
	@message (GEN_TRIGGER_ACTION) MSG_MODIFY_PAYEE;
	@message (GEN_TRIGGER_ACTION) MSG_DELETE_PAYEE;
//	@message (GEN_TRIGGER_ACTION) MSG_CLOSE_PAYEE;

   /* ImpEx messages */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_IMPORT;
   @message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_IMPORT_SELECTOR_ACTION;
   @message void MSG_IMPORT_QIF();
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_EXPORT;
   @message void MSG_EXPORT_QIF();

   /* Messages for handling register */
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_REGISTER_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_REGISTER_DLIST_STATUS;
   @message void MSG_REG_DBL_CLICK();
   @message (GEN_TRIGGER_ACTION) MSG_ZOOM_REGISTER;

   /* Messages for handling reconciliation */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_RECONCILE;
   @message (GEN_TRIGGER_ACTION) MSG_RECONCILE;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_RECON_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RECON_DLIST_APPLY;
   @message void MSG_RECONCILE_MARK();
   @message (GEN_TRIGGER_ACTION) MSG_RECONCILE_DONE;
   @message (GEN_TRIGGER_ACTION) MSG_RECONCILE_CANCEL;

   /* Messages for creating reports */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_REPORT;
   @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_RPT_DISPLAY_SELECTED;
   @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_RPT_CAT_SELECTED;
   @message (GEN_TRIGGER_ACTION) MSG_CREATE_REPORT;
   @message (GEN_TRIGGER_ACTION) MSG_CLEAR_REPORT_CATEGORIES; 
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_CATSEL_DLIST_APPLY;
   @message void MSG_CLOSE_REPORT_WINDOW();
   @message void MSG_DO_SELECT_ALL();

   /* Messages for handling check printing */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_CHECK_PRINT;
   @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_CKP_SINGLE_SELECTED;
   @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_CKP_RANGE_SELECTED;
   @message (GEN_TRIGGER_ACTION) MSG_SET_PRINTER_OFFSET;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_PRINTER_OFFSET;

@endc

/* This class is for checking entry win close */
@class	GPCBnkrEntryInteractionClass, GenInteractionClass;
@endc

/* This class is for checking MultiCatDB win close */
@class	MultiDBGenInteractionClass, GenInteractionClass;
@endc

/* This class is for checking AddMultiCatDB win close */
@class	AddMultiDBGenInteractionClass, GenInteractionClass;
@endc

/* This class is for drawing the entry form backgrounds */
//@class	GPCBnkrFormInteractionClass, GenInteractionClass;
//@endc

/* This class is for drawing the welcome db background */
//@class	WelcomeGenInteractionClass, GenInteractionClass;
//@endc

/* This class is for category entry checks */
@class	GPCBnkrCatGenTextClass, GenTextClass;
@endc

/* This class is for find entry checks */
@class	FindGenTextClass, GenTextClass;
@endc

/* This class is for amount entry filtering */
@class	AmountGenTextClass, GenTextClass;
@endc

/* This class is to resize the tax boolean item on the entry form */
@class   TaxGenBooleanClass  GenBooleanClass;
@endc

/* This class is for our documents */
@class	GPCBnkrDocumentClass, GenDocumentClass;
@endc

/* This is to intercept doc stuff for save to folder */
@class GPCBnkrDocCtrlClass, GenDocumentControlClass;
@endc

/* This class is to intercept dbl clicks of .CSV files */
@class	GPCBnkrApplicationClass, GenApplicationClass;
@endc

/* to get right click help */
@class	RegGenInteractionClass, GenInteractionClass;
@endc
@class	RegGenDynamicListClass, GenDynamicListClass;
@endc

/* to intercept closing of cat & pay dboxes */
@class	CatPayGenInteractionClass, GenInteractionClass;
@endc

@class	NewPayGenInteractionClass, GenInteractionClass;
@endc

/* to filter out current file in copy cats & payees file selector */
@class	CopyFileSelectorClass, GenFileSelectorClass;
@endc

/*
 ***************************************************************************
 *		Global variables and definitions
 ***************************************************************************
 */

extern FileHandle  GPCBnkrFile;	/* handle to the file that's open. */
extern Boolean onTV;
extern word  currentAcct;      /* the currently selected account */
extern DBGroup  currentAcctGroup;      /* the current account's DBGroup*/
extern word  toAcct;      /* the currently selected to account */
extern word  fromAcct;      /* the currently selected from account */
extern word  currentCat;      /* the currently selected cat */
extern word  currentMulti;      /* the currently selected multi parent index */
extern word  currentPayee;      /* the currently selected payee */
extern byte  currentType;      /* the currently selected trans-type */
//extern word  formBitmap;
extern word  numTrans;		/* the number of transactions in the
						* currently selected account */
extern word  numAccounts;
extern word  whichTrans;	/* keeps track of the trans
					 * on the screen */
					 
extern word sysPointSize;  
extern word regPointSize;  /* these two kept in ini */
extern Boolean closeOnUse;


extern byte attachUse;		/* to keep from dirtying vmblock
						* when use acct is called by attach */

extern Boolean autoNum;
extern word formUp;

extern FloatNum multiAmount;
extern Boolean multiFlag;
extern byte numMultis;
extern byte whichMulti;

extern word currentRecon;	/* the currently selected reconcile item */
extern Boolean reconcileFlag;  /* indicates reconcile in progress */

/* globals for the cat, payee and sort lists */
extern MemHandle   payListHeapHandle, catListHeapHandle;
extern MemHandle   transListHeapHandle;
extern MemHandle   multiHeapHandle;
extern VMBlockHandle  payListVMBHandle, catListVMBHandle;
extern VMBlockHandle  transListVMBHandle;
extern ChunkHandle    payListChunkArray, catListChunkArray;
extern ChunkHandle   transListChunkArray;
extern ChunkHandle   multiChunkArray;
extern word payNumItems, catNumItems;

/* for the register dlist */
extern word		transSelected, newSelection;

/* for the cat selection box */
extern optr		catSelOpenedBy;
extern word		selMCat;
extern word		newCatSel;

/* for the find stuff */
extern word		findTrans;
extern word		findField;
extern word		findPosit;


/* constants for various char strings */
#define ENTRY_SIZE 41
#define CAT_SIZE 20
#define DATE_SIZE 22
#define CKNUM_SIZE 8
#define ACCTNUM_SIZE 20
#define DOLLAR_IN_SIZE 14
#define DOLLAR_OUT_SIZE 21
  /* for float to currency conv */
#define MAX_TEXT_LEN (FLOAT_TO_ASCII_HUGE_BUF_LEN + 1)

#define REG_TOTAL_WIDTH 615

#define DEFAULT_LIST_LINES 10
#define DEFAULT_MULTI_LINES 8

#define MAX_ACCOUNTS 20

/* constant for autonumbering boolean */
#define A_AUTONUM 1

/* constants for view menu updating */
#define UV_BUILD 1
#define UV_ADD 2
#define UV_DELETE  3
#define UV_CLEAR  4
#define UV_MOD  5

#define E_NEW 1
#define E_MOD 2

#define CTYPE_INC 1
#define CTYPE_EXP 2

/* constants for ack dboxes */
typedef ByteEnum AckDB;
#define ACK_YES 1
#define ACK_NO 2

/* constant for the taxable boolean list */
typedef WordFlags TaxItem;
#define TI_TAX	0x0001

/* constant for the cleared boolean list */
typedef WordFlags ClearedItem;
#define CI_CLEARED	0x0001

/* constantS for the reports selectons lists */
#define R_SUM		1
#define R_IE		2
#define R_TAX		3
#define R_DATE		4
#define R_CAT		5
#define R_ALL		6
#define R_SEL		7

#define R_SUBS		1
#define R_MEMO		2

/* constants for first/next/search trans */
#define FIRST 1
#define NEXT 2

/* constants for VM File ID numbers */
typedef ByteEnum VMFileID;
#define ALLSORT 1             /* used with currentAcct */
					    /* to generate the VMFile ID */
#define SAVE 255
#define PAYLIST 254
#define CATLIST 253
#define TEMPLIST 253		/* to update payees to 2.x */

/* constants transaction types */
#define TRANS_CK 1
#define TRANS_CR 2
#define TRANS_DP 3
#define TRANS_DB 4
#define TRANS_XFP 5
#define TRANS_XFM 6
#define	BANKER_BITMAP_CHECK	0
#define	BANKER_BITMAP_DEPOSIT	2
#define	BANKER_BITMAP_DEBIT	4
#define	BANKER_BITMAP_CREDIT	6
#define	BANKER_BITMAP_XFER	8
#define	BANKER_BITMAP_WELCM	10


/* constants for the check printing selectons lists */
typedef ByteEnum CheckPrintItems;
#define CK_SINGLE		1
#define CK_RANGE		2
#define CK_LASER		3
#define CK_DOT			4
#define CK_STD			5
#define CK_WALLET		6
#define CK_LEDGER		7

/*
 ***************************************************************************
 *		Structure Definitions
 ***************************************************************************
 */

/* This is the structure of the DB mapblock  */
typedef struct {
    word	MS_numAccts;	/* the number of accounts */
} DBMapStruct;


/* AcctStruct */
typedef struct {
    DBGroup	AS_group;		/* DB Group ID for this account */
  /*  DBItem	AS_head;		/* First item in the group */
    word		AS_numTrans;		/* Number of transactions in acct */
    ChunkHandle	AS_transChunkHan;
    char		AS_bank[ENTRY_SIZE];	/* Bank's name */
    char		AS_number[ACCTNUM_SIZE];/* account number*/
    FloatNum	AS_balance;
    FloatNum	AS_reconStartBal;
    char		AS_reconChgCat[ENTRY_SIZE];
    char		AS_reconCrdtCat[ENTRY_SIZE];
    word		AS_reconYear;		/* statement date */
    byte		AS_reconMonth;
    byte		AS_reconDay;
    dword		AS_nextNum;             /* next check number */
    dword		AS_nextPrintNum;             /* next check to print number */
    word		AS_reserved;
} AcctStruct;

/* TransStruct */
typedef struct {
    DBGroup	TS_multiGroup;		/* multi's DBGroup */
    DBItem	TS_multiItem;                /* pointer to any multis */
    word		TS_year;		/* trans date */
    byte		TS_month;
    byte		TS_day;
    dword      TS_number;		/* check number */
    FloatNum	TS_amount;		/* amount */
    char	TS_payee[ENTRY_SIZE];	/* payee */
    char	TS_memo[ENTRY_SIZE];	/* memo */
    char	TS_category[ENTRY_SIZE];	/* category */
    Boolean	TS_cleared;
    Boolean	TS_taxItem;
    int		TS_type;		/* eg Check, Deposit, ATM... */
    byte	TS_numMultis;           /* number of multis included */
    DBItem	TS_multiOf;		/* for multi = DBitem of parent */
    word	TS_reserved;		
} TransStruct;

/* SaveStruct - To store globals to be saved with doc file */
typedef struct {
    word        SS_currentAcct;
    word        SS_transType;
} SaveStruct;

/* a structure for categories to be saved in the array */
typedef struct {
    char	CPS_category[CAT_SIZE];
    char	CPS_subOf[CAT_SIZE];    /* parent cat if any */
    word	CPS_type;				/* income or expense */
    word	CPS_numSubs;			/* number of sub cats */
    Boolean	CPS_isSub;          /* is it a sub cat */
    Boolean	CPS_isSelected;		/* for reports module */
} CatPickStruct;

/* a structure for payees to be saved in the array */
typedef struct {
    char	PPS_payee[ENTRY_SIZE];
    FloatNum	PPS_amount;		/* amount */
    char	PPS_category[ENTRY_SIZE];   /* category */
    char	PPS_memo[ENTRY_SIZE];   /* memo */
} PayPickStruct;

/* a structure to hold the number of list items and
   the chunk handles of the arrays */
typedef struct {
    word	MS_catNumber;
    ChunkHandle	MS_catChunkHan;
    word	MS_payNumber;
    ChunkHandle	MS_payChunkHan;
} VMMapStruct;

/*  a structure to hold transaction info for the array which
 *  sorts/indexes all the transactions in an account
 */
typedef struct {
    int		TSS_type;		/* eg Check, Deposit, ATM... */
    dword	TSS_ckNumber;
    word	TSS_year;
    byte	TSS_month;
    byte	TSS_day;
    DBItem	TSS_item;
    FloatNum	TSS_runBal;
    Boolean	TSS_cleared;
    Boolean	TSS_toClear;
} TransSortStruct;

/*  a structure to temporarily hold multi info  */
typedef struct {
    char		TMS_cat[ENTRY_SIZE];
    char		TMS_note[ENTRY_SIZE];
    FloatNum	TMS_amount;
} TempMultiStruct;


/* Prototypes ----------------------------------------------------- */

void DrawRegTitles (void);

void DrawPctMoniker (void);

word TransIndexInsert(dword transDateNumber,
			 TimerDateAndTime date,
			 dword chkNum,
			 FloatNum amount,
		      Boolean isCleared,
			 DBItem transItem);

void TransIndexAdjRunBal(word insertedAt, FloatNum amount);

void TransIndexDelete(word index);

FloatNum EnterTransaction(/*Boolean multi,*/
			  Boolean import,
			  FloatNum amount,
			  word year,
			  byte month,
			  byte day,
			  dword chkNum,
			  char payee[ENTRY_SIZE],
			  char memo[ENTRY_SIZE],
			  char cat[ENTRY_SIZE],
			  Boolean tax,
			  Boolean cleared,
			 /* word multiOf, */
			  DBItem	*transItem);   /* this is a return value */

Boolean DateCheck(char dateString[DATE_SIZE]);

Boolean AmountChecksOK(char amountStr[DOLLAR_IN_SIZE],
				   Boolean NegOK,
				   Boolean zeroOK);

Boolean AddCatCheck(char catString[CAT_SIZE],
				char parentString[CAT_SIZE],
				word classification);

Boolean CatThere(char catString[ENTRY_SIZE]);

void AddCatOK(void);

Boolean CheckIsNewCat(char catString[ENTRY_SIZE]);

void ChangeCharAttr(optr whichAttrs); 

void ChangeParaAttr(optr whichAttrs);

void ClearDisplay(void);

void EnableUI(void);

dword MakeDateNum(TimerDateAndTime date);

word AckDBox (char* string1, char* string2, optr ackMsg);

void NotifyDBox (char* string1, optr notifyMsg);

void TotalAllAccounts (void);


