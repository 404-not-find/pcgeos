
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			reg_mtds.goc
 *  PROJECT:		GPC Banker
 *  DESCRIPTION:	This file has methods for the register
 *			     functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "bnkr30.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

 /* to get right click help */
 @classdecl	RegGenInteractionClass;
 @classdecl	RegGenDynamicListClass;

/****************************************************************************
 *		Code for BBProcessClass Register stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	TestAmountSize  (word  width)
 *
 * CALLED BY:  MSG_REGISTER_DLIST_MONIKER_QUERY
 *
 *
 * STRATEGY:   Notify user to zoom out if number is too big to fit
 *             (can get up to 7 dollar digits in full out zoom)
 *
 ***********************************************************************/
void TestAmountSize (word width)
{
 Boolean	initError, haveShown;


    if (width > 72)  {
	  /* we want to show this message only once */
	  initError = InitFileReadBoolean("Banker", "ZoomMsg", &haveShown);
	  if (initError || !haveShown) {
		NotifyDBox(0, @NumberZoomMsg);
		InitFileWriteBoolean("Banker", "ZoomMsg", TRUE);
		InitFileCommit();
          }
	  }

}

/***********************************************************************
 *
 * FUNCTION:	DrawRegTitles
 *
 * CALLED BY:  OPEN_APP
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
void DrawRegTitles (void)
{
 ChunkHandle			chunk ;
 MemHandle			mem ;
 GStateHandle			gstate ;
 word				width;


    /* draw the register title */
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
    gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
    /* try telling the list the size of the gstring */
    GrSetGStringBounds(gstate, 0, 0, REG_TOTAL_WIDTH + 4, 20);  /* L, T, R, B */
    /* draw horizontal top line */
    GrSetLineWidth(gstate, MakeWWFixed(2));
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrDrawHLine(gstate, 3, 0, REG_TOTAL_WIDTH);  /* L, B, R */
    /* draw left edge */
    GrDrawVLine(gstate, 3, 0, 20);
    /* draw right edge */
    GrDrawVLine(gstate, REG_TOTAL_WIDTH + 3, 0, 20);
    GrSetLineColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0);
    GrSetLineWidth(gstate, MakeWWFixed(1));
    /* draw date separator */
    GrDrawVLine(gstate, 75+4, 0, 20);
    /* draw item separator */
    GrDrawVLine(gstate, 145+4, 0, 20);
    /* draw from to  separator */
    GrDrawVLine(gstate, 365+4, 0, 20);
    /* draw cleared separator */
    GrDrawVLine(gstate, 390+4, 0, 20);
    /* draw payment separator */
    GrDrawVLine(gstate, 465+4, 0, 20);
    /* draw deposit separator */
    GrDrawVLine(gstate, 540+4, 0, 20);
    /* fill in the data */
    GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    MemLock (OptrToHandle(@RegDateMoniker));
    /* get length to center justify */
    width = GrTextWidth(gstate, LMemDeref(@RegDateMoniker),
						  strlen(LMemDeref(@RegDateMoniker)));
    GrDrawText(gstate, 0 + ((75 - width)/2), 2, LMemDeref(@RegDateMoniker), 0);
    /* get length to center justify */
    width = GrTextWidth(gstate, LMemDeref(@RegItemMoniker),
						  strlen(LMemDeref(@RegItemMoniker)));
    GrDrawText(gstate, 75+4 + ((70 - width)/2), 2, LMemDeref(@RegItemMoniker), 0);
    GrDrawText(gstate, 145+4, 2, LMemDeref(@RegTFCatMoniker), 0) ;
    GrDrawText(gstate, 365+4, 2, LMemDeref(@RegClrMoniker), 0) ;
    /* get length to center justify */
    width = GrTextWidth(gstate, LMemDeref(@RegPmntMoniker),
						  strlen(LMemDeref(@RegPmntMoniker)));
    GrDrawText(gstate, 390+4 + ((75 - width)/2), 2, LMemDeref(@RegPmntMoniker), 0);
    /* get length to center justify */
    width = GrTextWidth(gstate, LMemDeref(@RegDepMoniker),
						  strlen(LMemDeref(@RegDepMoniker)));
    GrDrawText(gstate, 465+4 + ((75 - width)/2), 2, LMemDeref(@RegDepMoniker), 0);
    /* get length to center justify */
    width = GrTextWidth(gstate, LMemDeref(@RegBalMoniker),
						  strlen(LMemDeref(@RegBalMoniker)));
    GrDrawText(gstate, 540+4 + ((75 - width)/2), 2, LMemDeref(@RegBalMoniker), 0);
    /* terminate the gstring */
    GrEndGString(gstate) ;

    @call RegisterHeader::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  20,				/* height */
				  REG_TOTAL_WIDTH + 4,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

 }

/*-------------------------------------------------------------------------
 | Method:  GenDListProcessClass::MSG_REGISTER_DLIST_MONIKER_QUERY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the information for a single list item
 |
 | Inputs:
 |    optr list                   -- Which list needs the moniker
 |    word item                   -- What item on the list is needed
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  11/16/98  Created
 |
 *-----------------------------------------------------------------------*/
@extern method GPCBnkrProcessClass, MSG_REGISTER_DLIST_MONIKER_QUERY
{
 TransStruct		*trans;
 DBItem			transItem;
 char			amtString[MAX_TEXT_LEN], numString[/*CKNUM_SIZE*/13];
 char			runBalString[MAX_TEXT_LEN];
 char			dateString[DATE_SIZE], payee[ENTRY_SIZE];
 char			category[ENTRY_SIZE];
 char			memo[ENTRY_SIZE];
 TimerDateAndTime	date;
 MemHandle		indexMH;
 TransSortStruct	*trArrayElement;
 Boolean			isCleared, isData = FALSE;
 byte			transType;
 ChunkHandle		chunk ;
 MemHandle		mem ;
 GStateHandle		gstate ;
 word			width, numChars, baseLine, eWidth;
 Point		checkPoints[5] =  {{375,12},
						   {378,16},
						   {382,7},
						   {378,13},
						   {375,12}};


    /* to let us show blank lines on the register we need to check
	* first for a file and then see if the moniker requested is valid
	*/
    if (GPCBnkrFile && (item < numTrans))  {
	  /* get the index array VMBlock */
	  transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
	  VMLock(GPCBnkrFile, transListVMBHandle ,&indexMH);
	  /* get the selected element info */
	  trArrayElement = ChunkArrayElementToPtrHandles(
		   indexMH,
		   transListChunkArray,
		   item,
		   0);
	  transItem = trArrayElement->TSS_item;
	  isCleared = trArrayElement->TSS_cleared;
	  /* convert the running bal */
	  FloatFloatToAscii_StdFormat(runBalString,
						 &trArrayElement->TSS_runBal,
						 FFAF_FROM_ADDR,
						 14,
						 2);
	  VMUnlock(indexMH);

	  /* get our transaction */
	  trans = DBLock(GPCBnkrFile, currentAcctGroup, transItem);
	  /* collect the transaction data  */
	  UtilHex32ToAscii(numString, (sdword) trans->TS_number, UHTAF_NULL_TERMINATE);
	  /* get the date values  */
	  date.TDAT_year = trans->TS_year;
	  date.TDAT_month = trans->TS_month;
	  date.TDAT_day = trans->TS_day;
	  /* format it */
	  LocalFormatDateTime(dateString, DTF_SHORT, &date);
	  /* convert the amount */
	  FloatFloatToAscii_StdFormat(amtString,
				  &trans->TS_amount,
						 FFAF_FROM_ADDR,
						 14,
						 2);
	  strcpy(payee, trans->TS_payee);
	  strcpy(category, trans->TS_category);
	  strcpy(memo, trans->TS_memo);
	  transType = trans->TS_type;
	  DBUnlock(trans);
	  isData = TRUE;
	  } /* end of valid file handle if */

    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
    gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
    /* try telling the list the size of the gstring */
    GrSetGStringBounds(gstate, 0, 0, REG_TOTAL_WIDTH, 39);  /* L, T, R, B */
    /* do a border */
    GrSetLineWidth(gstate, MakeWWFixed(2));
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrDrawRect(gstate, 0, 0, REG_TOTAL_WIDTH, 39);
//@ifdef GPC_ONLY
//    if (item == newSelection) {   /* selected fill color */
 	  /* fill in the top half */
// 	  GrSetAreaColor(gstate, CF_RGB, 0, 0, 85);
// 	  GrFillRect(gstate, 3, 3, REG_TOTAL_WIDTH-3, 20);
 	  /* and the bottom half */
// 	  GrSetAreaColor(gstate, CF_RGB, 42, 60, 166);
// 	  GrFillRect(gstate, 3, 21, REG_TOTAL_WIDTH-3, 36);
 	  /* set the text color */
// 	  GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);
 	  /* set for dividing lines */
// 	  GrSetLineColor(gstate, CF_RGB, 150, 162, 233);
//	  }
//    else  {    /* non-selected fill color */
 	  /* fill in the top half */
// 	  GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
// 	  GrFillRect(gstate, 1, 1, REG_TOTAL_WIDTH-1, 20);
 	  /* and the bottom half */
// 	  GrSetAreaColor(gstate, CF_RGB, 255, 255, 150);
// 	  GrFillRect(gstate, 1, 21, REG_TOTAL_WIDTH-1, 38);
 	  /* set the text color */
// 	  GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
 	  /* set for dividing lines */
// 	  GrSetLineColor(gstate, CF_INDEX, C_BLUE, 0, 0);
// 	  }
//@else
    if (item == newSelection) {   /* selected fill color */
	  /* fill in the top half */
	  GrSetAreaColor(gstate, CF_RGB, 0, 0, 170);
	  GrFillRect(gstate, 3, 3, REG_TOTAL_WIDTH-3, 20);
	  /* and the bottom half */
	  GrSetAreaColor(gstate, CF_RGB, 85, 85, 255);
	  GrFillRect(gstate, 3, 21, REG_TOTAL_WIDTH-3, 36);
	  /* set the text color */
	  GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  /* set for dividing lines */
	  GrSetLineColor(gstate, CF_RGB, 170, 170, 170);
	  }
    else  {    /* non-selected fill color */
	  /* fill in the top half */
	  GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  GrFillRect(gstate, 1, 1, REG_TOTAL_WIDTH-1, 20);
	  /* and the bottom half */
	  GrSetAreaColor(gstate, CF_RGB, 255, 255, 85);
	  GrFillRect(gstate, 1, 21, REG_TOTAL_WIDTH-1, 38);
	  /* set the text color */
	  GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	  /* set for dividing lines */
	  GrSetLineColor(gstate, CF_INDEX, C_BLUE, 0, 0);
	  }
//@endif
    /* draw horizontal separator */
    GrSetLineWidth(gstate, MakeWWFixed(1));
    GrDrawHLine(gstate, 1, 20, REG_TOTAL_WIDTH-1);  /* L, B, R */
    /* draw date separator */
    GrDrawVLine(gstate, 75, 1, 39);
    /* draw item separator */
    GrDrawVLine(gstate, 145, 1, 39);
    /* draw cat  separator */
    GrDrawVLine(gstate, 257, 21, 39);
    /* draw from to  separator */
    GrDrawVLine(gstate, 365, 1, 39);
    /* draw cleared separator */
    GrDrawVLine(gstate, 390, 1, 39);
    /* draw payment separator */
    GrDrawVLine(gstate, 465, 1, 39);
    /* draw deposit separator */
    GrDrawVLine(gstate, 540, 1, 39);

    if (isData) {  /* if there is data to fill in */
	  /* set the font for all but cat & memo */
	  GrSetFont(gstate, FID_BERKELEY, MakeWWFixed(regPointSize));

	  /* set the baseLine & ellipsis width depending on font size */
	  if (regPointSize == 10) {
		baseLine = 6;
		eWidth = 8;
		}
	  else if (regPointSize == 12) {
		baseLine = 4;
		eWidth = 10;
		}
	  else  {
		baseLine = 2;
		eWidth = 12;
		}

	  /* fill in the date */
	  GrDrawText(gstate, 2, baseLine, dateString, 0) ;

	  /* fill in the check num / trans type */
	  MemLock (OptrToHandle(@DepText));
	  switch (transType) {
		case TRANS_DP:
		   strcpy(numString, LMemDeref(@DepText));
		   break;
		case TRANS_DB:
		   strcpy(numString, LMemDeref(@DebText));
		   break;
		case TRANS_CR:
		   strcpy(numString, LMemDeref(@CrdText));
		   break;
		case TRANS_XFM:
		   strcpy(numString, LMemDeref(@XferAcct));
		   break;
		case TRANS_XFP:
		   strcpy(numString, LMemDeref(@XferAcct));
		   break;
		} /* end switch */
	  MemUnlock (OptrToHandle(@DepText));
	  /* get length to rt justify item */
	  width = GrTextWidth(gstate, numString, strlen(numString));
	  GrDrawText(gstate, 75 + (70 - 3 - width), baseLine, numString, 0) ;

	  /* fill in the to/from field */
	  if (payee[0]) {
		width = GrTextWidth(gstate, payee, strlen(payee));
		if(width > 217)  {
		   /* truncate text and add ellipsis */
		   while (width > (217 - eWidth)) {
			 numChars = strlen(payee);
			 payee[numChars - 1] = 0;
			 width = GrTextWidth(gstate, payee, strlen(payee));
			 }
		   strcat(payee, "...");
		   }
		GrDrawText(gstate, 148, baseLine, payee, 0) ;
		}

	  /* fill in the payment field */
	  if (amtString[0] &&
		  ((transType == TRANS_CK) || (transType == TRANS_DB)
		  || (transType == TRANS_XFM))) {
		/* get length to rt justify */
		width = GrTextWidth(gstate, amtString, strlen(amtString));
		TestAmountSize(width);
		GrDrawText(gstate, 390 + (75 - 3 - width), baseLine, amtString, 0) ;
		}

	  /* fill in the deposit field */
	  if (amtString[0] &&
		   ((transType == TRANS_DP) || (transType == TRANS_CR)
		   || (transType == TRANS_XFP))) {
		/* get length to rt justify */
		width = GrTextWidth(gstate, amtString, strlen(amtString));
		TestAmountSize(width);
		GrDrawText(gstate, 465 + (75 - 3 - width), baseLine, amtString, 0) ;
		}

	  /* fill in the balance field */
	  if (runBalString[0]) {
		/* get length to rt justify */
		width = GrTextWidth(gstate, runBalString, strlen(runBalString));
		TestAmountSize(width);
		GrDrawText(gstate, 540 + (75 - 3 - width), baseLine, runBalString, 0) ;
		}

	  /* set the font for payee and memo */
	  if (!onTV) {
		GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(regPointSize));
//@ifdef GPC_ONLY
//		if (item == newSelection)    /* selected */
//		   GrSetTextColor(gstate, CF_RGB, 200, 200, 200);
//		else
//		   GrSetTextColor(gstate, CF_RGB, 110, 110, 43);
//@else
		if (item == newSelection)    /* selected */
		   GrSetTextColor(gstate, CF_RGB, 255, 255, 255);
		else
		   GrSetTextColor(gstate, CF_RGB, 0, 0, 0);
//@endif
		}
	  /* fill in the category field */
	  if (category[0]) {
		width = GrTextWidth(gstate, category, strlen(category));
		if(width > 109)  {
		   /* truncate text and add ellipsis */
		   while (width > (109 - eWidth)) {
			 numChars = strlen(category);
			 category[numChars - 1] = 0;
			 width = GrTextWidth(gstate, category, strlen(category));
			 }
		   strcat(category, "...");
		   }
		GrDrawText(gstate, 148, baseLine + 17, category, 0) ;
		}

	  /* fill in the memo field */
	  if (memo[0]) {
		width = GrTextWidth(gstate, memo, strlen(memo));
		if(width > 103)  {
		   /* truncate text and add ellipsis */
		   while (width > (103 - eWidth)) {
			 numChars = strlen(memo);
			 memo[numChars - 1] = 0;
			 width = GrTextWidth(gstate, memo, strlen(memo));
			 }
		   strcat(memo, "...");
		   }
		GrDrawText(gstate, 260, baseLine + 17, memo, 0) ;
		}

	  /* fill in the cleared field */
	  if (isCleared) {
		if (item == newSelection)    /* selected fill color */
		   GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
		else  GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0, 0);
		GrFillPolygon(gstate, ODD_EVEN, checkPoints, 5);
		}
	  } /* end of isData if */

    /* terminate the gstring */
    GrEndGString(gstate) ;
    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  39,				/* height */
				  REG_TOTAL_WIDTH,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

}

/*-------------------------------------------------------------------------
 | Method:  GPCBnkrProcessClass::MSG_REGISTER_DLIST_STATUS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the information for a single list item
 |
 | Inputs:
 |    word numSelections
 |    word selection
 |    byte stateFlags
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  11/22/98  Created
 |
 *-----------------------------------------------------------------------*/
@extern method GPCBnkrProcessClass, MSG_REGISTER_DLIST_STATUS
{

    /* get the new selection */
    newSelection = selection;
    /* redraw its moniker to show selected */
    @call self::MSG_REGISTER_DLIST_MONIKER_QUERY(
						    @RegisterDList,
						    newSelection);
    /* redraw the old moniker to show not selected */
    @call self::MSG_REGISTER_DLIST_MONIKER_QUERY(
						    @RegisterDList,
						    transSelected);
    /* update the current selection global */
    transSelected = newSelection;

    /* grey the modify button if on an empty item */
    if (transSelected > (numTrans - 1))
	  @send ModifyButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else @send ModifyButton::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_REG_DBL_CLICK() for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles register double click.
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_REG_DBL_CLICK
{

    if (transSelected <= (numTrans - 1))
	  @call ModifyButton::MSG_GEN_ACTIVATE();
	  
}

/***********************************************************************
 *
 * FUNCTION:	DrawPctMoniker
 *
 * CALLED BY:  OPEN_APP, ZOOM
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
void DrawPctMoniker (void)
{
 ChunkHandle			chunk ;
 MemHandle			mem ;
 GStateHandle			gstate ;
 word				width, i;
 optr	pctMoniker[3] = {@Red75Moniker, @NormalMoniker, @Enl125Moniker};
 optr	pctObject[3] = {@Red75, @Normal, @Enl125};
 Point	checkPoints[5] =  {{2,11}, {5,15}, {9,6}, {5,12}, {2,11}};


    /* draw all three zooms */
    for (i = 0; i < 3; i++)  {
	  /* set up the mem and gstate */
	  mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
	  gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
	  /* draw the check if selected */
	  if (((i == 0) && (regPointSize == 10)) ||
			 ((i == 1) && (regPointSize == 12)) ||
			 ((i == 2) && (regPointSize == 14)))
		GrFillPolygon(gstate, ODD_EVEN, checkPoints, 5);
	  /* draw the name */
	  MemLock (OptrToHandle(pctMoniker[i]));
	  width = GrTextWidth(gstate, LMemDeref(pctMoniker[i]),
						  strlen(LMemDeref(pctMoniker[i])));
	  GrDrawText(gstate, 15, 2, LMemDeref(pctMoniker[i]), 0);
	  MemUnlock (OptrToHandle(pctMoniker[i]));
	  /* terminate the gstring */
	  GrEndGString(gstate) ;
	  @call pctObject[i]::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_DELAYED_VIA_APP_QUEUE,
				  sysPointSize + 4,
				  width + 20,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));
	  /* and 86 the gstate and mem */
	  GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
	  MemFree(mem) ;
	  } /* end of for */

 }

/***********************************************************************
 *
 * MESSAGE:	MSG_ZOOM_REGISTER() for GPCBnkrProcessClass
 *
 * DESCRIPTION:	zooms the register and saves size to ini
 *
 * PARAMETERS:      optr trigger
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_ZOOM_REGISTER
{

    if (trigger == @ZoomIn)  {
	  if (regPointSize == 12) {
		regPointSize = 14;
		@send ZoomIn::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  if (regPointSize == 10) {
		regPointSize = 12;
		@send ZoomOut::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  DrawPctMoniker();
	  }
    else if (trigger == @ZoomOut)  {
	  if (regPointSize == 12) {
		regPointSize = 10;
		@send ZoomOut::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  if (regPointSize == 14) {
		regPointSize = 12;
		@send ZoomIn::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  DrawPctMoniker();
	  }
    else if (trigger == @Red75)  {
	  if (regPointSize != 10)  {
		regPointSize = 10;
		@send ZoomOut::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ZoomIn::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		DrawPctMoniker();
		}
	  }
    else if (trigger == @Normal)  {
	  if (regPointSize != 12)  {
		regPointSize = 12;
		@send ZoomOut::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ZoomIn::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		DrawPctMoniker();
		}
	  }
    else if (trigger == @Enl125)  {
	  if (regPointSize != 14)  {
		regPointSize = 14;
		@send ZoomOut::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ZoomIn::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		DrawPctMoniker();
		}
	  }

    /* re-init the register dlist */
    if (numTrans > DEFAULT_LIST_LINES-1)
	  @call RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numTrans);
    else
	  @call RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_LIST_LINES);
    @call RegisterDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(transSelected, FALSE);

    InitFileWriteInteger("Banker", "Zoom", regPointSize);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_MOVE_COPY() for RegGenInteractionClass
 *
 * DESCRIPTION:	opens help on right click
 *
 * PARAMETERS:       MouseReturnParams *retVal
 *			  	 sword xPosition,
 *			   	 sword yPosition,
 *			   	 word inputState;
 *
 *
 ***********************************************************************/
@method RegGenInteractionClass, MSG_META_START_MOVE_COPY
{

    @callsuper();


    @send self::MSG_META_BRING_UP_HELP();

    /* Note that we have processed the mouse event */
    retVal->flags |= MRF_PROCESSED;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_MOVE_COPY() for RegGenDynamicListClass
 *
 * DESCRIPTION:	opens help on right click
 *
 * PARAMETERS:       MouseReturnParams *retVal
 *			  	 sword xPosition,
 *			   	 sword yPosition,
 *			   	 word inputState;
 *
 *
 ***********************************************************************/
@method RegGenDynamicListClass, MSG_META_START_MOVE_COPY
{

    @callsuper();


    @send self::MSG_META_BRING_UP_HELP();

    /* Note that we have processed the mouse event */
    retVal->flags |= MRF_PROCESSED;
}

