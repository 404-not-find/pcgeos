
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/* txt_strs.goc */
/* all the strings that may need to be localized */

/*
 * We don't want the overhead of @including stdapp.goh, so we include just
 * those files that are necessary to get the @chunk declarations through the
 * C compiler.
 */
#include <geos.h>
#include <geode.h>
#include <object.h>

@start TextStrings, data;

/* strings in act_mtds.goc */
@chunk char AcctSP[] = "Account: ";
@localize "This preceedes the bank name, account type and account number";
@chunk char spNumSym[] = " #";
@localize "Separates bank name acct type and acct number";
@chunk char BegBalText[] = "Beginning Balance";
@localize "Text inserted as beginnign balance in new account";
@chunk char ModAcctMsg[] = "Are you sure you want to change this Account?";
@localize "The dialog box message confirming user changing account bank name, acct type and/or number";
@chunk char DelAcctMsg[] = "Are you sure you want to delete the account \"\001\"? If you delete it you will not be able to recover its records of all the transactions for this account.";
@localize "The FIRST confirmation dialog box when the user clicks delete an account";
@chunk char MaxAcctsMsg[] = "You already have the maximum (20) number of accounts.";
@localize "The dialog box message telling user he can't add any more accts";
@chunk char NoAcctNameMsg[] = "Please enter a name for this account.";
@localize "The dialog box message telling user he needs an account name";
@chunk char NoCheckNumberMsg[] = "Please enter a starting check number for this account.";
@localize "The dialog box message telling user he needs a starting check number";

@chunk char PayTo[] = "Pay to:";
@localize "Moniker for the Payee/Payor line for a check"; 
@chunk char WriteCheck[] = "Check";
@localize "Title of the transaction form for a check";
@chunk char From[] = "From: ";
@localize "Moniker of the Payee/Payor line for a deposit or credit";
@chunk char MakeDeposit[] = "Deposit";
@localize "Title of the transaction form for a deposit";
@chunk char To[] = "To: ";
@localize "Moniker of the Payee/Payor line for a debit, withdrawal or ATM withdrawal";
@chunk char DebitAcct[] = "Debit";
@localize "Title of the transaction form for a debit from the account";
@chunk char CreditAcct[] = "Credit";
@localize "Title of the transaction form for a credit to the account";
@chunk char XferAcct[] = "Transfer";
@localize "Title of the transaction form for a transfer to/from the account";
@chunk char MngAcctNameText[] = "Name";
@localize "Name header in manage accts dbox";
@chunk char MngAcctNumberText[] = "Number";
@localize "Number header in manage accts dbox";
@chunk char MngAcctBalText[] = "Balance";
@localize "Balance header in manage accts dbox";

/* strings in doc_mtds.goc */
@chunk char BankerFolderTxt[] = "Banker Files";
@localize "The name of the default folder for Banker data files";
@chunk char QIFDblClickMsg[] = "This file contains financial data which can be imported into Banker.  To import it into a new account open Banker, set up a new account and then use the \"Import...\" command in the \"File\" menu to import this file.  To merge this data into an existing  Banker account open Banker, open the account into which this data is to be merged and then use the \"Import...\" command in the \"File\" menu to import this file.";
@chunk char CopyListsQuest[] = "Would you like to copy category and payee lists from another Banker file?";
@chunk char CantCopyListsMsg[] = "You cannot copy the lists from this file. The default list will be used.";

/* strings in fnctns.goc */
@chunk char BadDateMsg[] = "The date is invalid.  Please re-enter.";
@localize "Message for date entry (all date fields) which won't parse"; 
@chunk char InvalidAmountMsg[] = "The amount you entered: \"\001\" is invalid.  Please re-enter.";
@chunk char NoRoomMsg[] = "No more room for transactions!";

/* strings in imp_mtds.goc */
@chunk char ImportMsg[] = "Are you sure you want to import data from \"\001\" into this account?";
@localize "Message to confirm import action. Make sure the string in quotes does not change!";
@chunk char ImpOpenErrMsg[] = "There was an error opening the .QIF file.";
@localize "Import error message";
@chunk char ImpBadTypeErrMsg[] = "Not a valid QIF Bank type file.";
@localize "Error message when Banker can't find !Type:Bank line in QIF file";
@chunk char ImpCloseErrMsg[] = "There was an error closing the .QIF file.";
@localize "Import error message";
@chunk char ImpQIFDEP[] = "DEP";
@localize "If this string is read from QIF file Banker makes that transaction a deposit";
@chunk char ImpQIFXfer[] = "Xfer";
@localize "If this string is read from QIF file Banker makes that transaction an ATM withdrawal";
@chunk char ImpQIFDEB[] = "DEB";
@localize "If this string is read from QIF file Banker makes that transaction an ATM withdrawal";
@chunk char ImpQIFCR[] = "CR";
@localize "If this string is read from QIF file Banker makes that transaction an ATM withdrawal";
@chunk char ImpReadErrMsg[] = "There was an error reading the .QIF file.";
@localize "Message shown when import doesn't recognize a QIF line type symbol";
@chunk char MPayPrefix[] = "M/";
@localize "Prefix for payee of a multiple item";
@chunk char MultCatText[] = "[Multiple]";
@localize "Category assigned for the parent of a multiple category transaction";
@chunk char Type1String[] = "!Type:Bank";
@localize "Header of Bank QIF file";
@chunk char Type2String[] = "!Type:Bank ";
@localize "Header of Bank QIF file with trailing space";

/* strings in lst_mtds.goc */
@chunk char DupeCatMsg[] = "This Category already exists.";
@localize "Message telling user that a category they want to add already is in the category list";
@chunk char ModCatMsg[] = "Are you sure you want to replace category \"\001\" with a new category named \"\002\"?  Remember - this will change the category for all accounts in this file!";
@localize "Message to confirm user change of category name.  Make sure the strings in quotes do not change!";
@chunk char DelCatMsg[] = "Are you sure you want to delete the category \"\001\"?  This will delete this category along with its subcategories for all accounts you are tracking in this Banker file.";
@localize "Message to confirm user deleting a category.  Make sure the string in quotes does not change!";
@chunk char ColonWarnMsg[] = "The name you have created contains a colon (:), which is a special character reserved for separating categories and subcategories in Banker. Please create a new name without using a colon.";
@localize "Message to warn user not to use a colon (:)";
@chunk char ModPayMsg[] = "Are you sure you want to replace payee \"\001\" with new payee \"\002\"?  This will NOT change any payee or amount already in your files!";
@localize "Message to confirm user change of payee name and/or amount.  Make sure the strings in quotes do not change!";
@chunk char DelPayMsg[] = "Are you sure you want to delete \"\001\" from the list?  (This will not change any of your records, and you can always add this payee again later.)";
@localize "Message to confirm user deleting payee.  Make sure the string in quotes does not change!";
@chunk char SubCatText[] = "This sub-category will be included in the category \"";
@localize "The default sub-cat text - parent cat gets appended";
@chunk char TooLongCatMsg[] = "You are only allowed 19 characters for a category name.";
@localize "message telling the user the category has too many characters";
@chunk char MultiToSingleCatMsg[] = "Your Multiple Category listings will be deleted if you assign a single category to this transaction.  Do you want to assign a single category?";
@localize "message telling the user he's changing from multi to single cat";
@chunk char NewCatMoniker[] = "New Category";
@chunk char CancelMoniker[] = "Cancel";
@chunk char ModCatMoniker[] = "Modify Category";
//@ifdef GPC_ONLY
//@chunk char DontChangeMoniker[] = "Don't Change";
//@else
@chunk char DontChangeMoniker[] = "Cancel";
//@endif
@chunk char NewSubCatMoniker[] = "New Sub-category";
@chunk char ModSubCatMoniker[] = "Modify Sub-category";
@chunk char NewPayMoniker[] = "New Payee/Payer";
@chunk char ModPayMoniker[] = "Modify Payee/Payer";

/* strings in mlt_mtds.goc */
@chunk char MTotalMoniker[] = "Total:  ";
@chunk char MCatMoniker[] = "Category";
@chunk char MNoteMoniker[] = "Note";
@chunk char MAmountMoniker[] = "Amount";
@chunk char AddMultiMoniker[] = "Add Multiple Category";
@chunk char ModMultiMoniker[] = "Modify Multiple Category";


@chunk char ModTransMsg[] = "Are you sure you want to change this Transaction?";
@localize "Message confirming user change of a transaction";
@chunk char VoidTransMsg[] = "Are you sure you want to Void this Transaction?";
@localize "Message confirming user voiding a transaction";
@chunk char VoidLongText[] = "V - O - I - D";
@localize "Text string placed in Payee field of voided transaction";
@chunk char VoidText[] = "VOID";
@localize "Text string placed in Memo field of voided transaction";
@chunk char ZeroText[] = "0.00";
@localize "Text string placed in amount field of voided transaction";


/* strings in rcn_mtds.goc */
@chunk char ReconMoniker[] = "Reconcile ";
@localize "first word of reconcile dbox moniker - filled in w/acct info by app";
@chunk char ReconDep[] = "Deposit";
@localize "Transaction type string shown in reconcile scrolling list" ;
@chunk char ReconDeb[] = "Debit";
@localize "Transaction type string shown in reconcile scrolling list";
@chunk char ReconCrd[] = "Credit";
@localize "Transaction type string shown in reconcile scrolling list";
@chunk char ReconXfO[] = "XFerOut";
@localize "Transaction type string shown in reconcile scrolling list";
@chunk char ReconXfI[] = "XFerIn";
@localize "Transaction type string shown in reconcile scrolling list";
@chunk char ReconCharges[] = "Bank Charges";
@localize "Moniker for reconcile bank charges amount field";
@chunk char ReconCredits[] = "Bank Credits";
@localize "Moniker for reconcile bank credits amount field";
@chunk char NoReconBalMsg[] = "You left the Beginning or Ending balance blank.  Are you sure you want to reconcile this account?";
@localize "Dialog box message to confirm reconcile";
@chunk char DiffNotZeroMsg[] = "The difference between your Cleared Total and Ending Balance is not zero.  Are you sure you want to finish the Reconcile process?";
@localize "Dialog box message to confirm reconcile Done";
@chunk char ReconEndBeginDateMsg[] = "Please enter an Ending date later than the Beginning date.";
@localize "Dialog box message to confirm reconcile";


/* strings in reg_mtds.goc */
@chunk char DepText[] = "Deposit";
@localize "Transaction type text string shown in reports & uncleared transaction display";
@chunk char DebText[] = "Debit";
@localize "Transaction type text string shown in reports & uncleared transaction display";
@chunk char CrdText[] = "Credit";
@localize "Transaction type text string shown in reports & uncleared transaction display";
@chunk char XfOText[] = "XferOut";
@localize "Transaction type text string shown in reports & uncleared transaction display";
@chunk char XfIText[] = "XferIn";
@localize "Transaction type text string shown in reports & uncleared transaction display";
@chunk char RegDateMoniker[] = "Date";
@chunk char RegItemMoniker[] = "Item";
@chunk char RegTFCatMoniker[] = "To/From, Category";
@chunk char RegClrMoniker[] = "Clr";
@chunk char RegPmntMoniker[] = "Payment";
@chunk char RegDepMoniker[] = "Deposit";
@chunk char RegBalMoniker[] = "Balance";
@chunk char Red75Moniker[] = "Reduced to 75 %";
@chunk char NormalMoniker[] = "Normal Size";
@chunk char Enl125Moniker[] = "Enlarged to 125 %";
@chunk char NumberZoomMsg[] = "If the number is too large to fit in the space, you may make the text smaller by selecting Zoom Out in the View menu.";

/* strings in rpt_mtds.goc */
@chunk char RptToFromMsg[] = "Please enter a To: date later than From:.";
@localize "Error message when user enters a to date earlier than a from date in the reports dialog box.";
@chunk char RptSummary[] = "Summary Report";
@localize "Name of report window for summary reports";
@chunk char RptIE[] = "Income/Expense Report";
@localize "Name of report window for I/E reports";
@chunk char RptTax[] = "Tax Deductions Report";
@localize "Name of report window for tax reports";
@chunk char UncatText[] = "Uncategorized";
@localize "Text string in reports for uncategorized transactions";
@chunk char TaxMarkText[] = "\tT";
@localize "Indicates a tax item in a report";
@chunk char RptSubtotalText[] = "\r\t\tSubTotal...\t";
@localize "Text for category amount subtotal in report.  Put 2 tabs befor the string and one tab after.";
@chunk char RptTotalText[] = "\r\t\tTotal...\t\t";
@localize "Text for total amount in report.  Put 2 tabs befor the string and one tab after.";
@chunk char IncomeText[] = "\rINCOME";
@localize "Text string in reports for income transactions";
@chunk char ExpenseText[] = "\rEXPENSE";
@localize "Text string in reports for expense transactions";
@chunk char IncTotalText[] = "\t\tTotal Income...\t";
@localize "Text for income total amount in report.  Put 2 tabs befor the string and one tab after.";
@chunk char ExpTotalText[] = "\t\tTotal Expense...\t";
@localize "Text for expense total amount in report.  Put 2 tabs befor the string and one tab after.";
@chunk char IETotalText[] = "\t\tIncome - Expense...\t";
@localize "Text for income - expense total amount in report.  Put 2 tabs befor the string and one tab after.";

/* strings in trn_mtds.goc */
@chunk char TransNumWarnMsg[] = "You are reaching the limit of 2,000 transactions in this account.";
@chunk char TransNumStopMsg[] = "You have reached the limit of 2,000 transactions in this account.";
@chunk char NoAmountMsg[] = "Please enter an amount.";
@localize "message when there is no amount on the entry form";
@chunk char DupeChkNumMsg[] = "Check number \001 is already in use.  Do you want to use it again?";
@localize "warns on duplicate check numbers";
@chunk char ModMultiAmtMsg[] = "Cannot Modify amount of a MultiCat transaction.  Please check Help for further information.";
@localize "Message when user tries to change the amount of a parent multi trans in the transaction form";
@chunk char INCMsg1[] = "This category is not on your Category List.  Would you like to add \"";
@localize "1st part of is new category - add it to list message";
@chunk char INCMsg2[] = "\" to your Category List?";
@localize "2nd part of is new category - add it to list message";
@chunk char DelTransMsg[] = "Are you sure you want to Delete this Transaction?";
@localize "Message confirming user deleteing a transaction";
@chunk char XferNoOppositeAcctMsg[] = "Cannot find the other Transfer Account.";
@localize "Message confirming user deleteing a transaction";
@chunk char XferNoOppositeTransMsg[] = "Cannot find the other Transfer Transaction.";
@localize "Message confirming user deleteing a transaction";
@chunk char CantModXferMsg[] = "You cannot Modify a Transfer.  To make any changes, either Delete or Void the transfer then Enter a new one.";
@localize "Message telling user he can't modify a transfer";
@chunk char CantModClearedWarnMsg[] = "You will not be able Modify a Cleared transaction, you can only review it.  To make any changes, Delete the transaction then Enter a new one.";
@localize "Message warning user he won't be able to modify a cleared";
@chunk char CantModClearedMsg[] = "You cannot Modify a Cleared transaction.  To make any changes, Delete the transaction then Enter a new one.";
@localize "Message telling user he can't modify a cleared";
@chunk char NewEntryMoniker[] = "New Entry";
@chunk char ModEntryMoniker[] = "Modify Entry";
@chunk char TypeTextCheck[] = "Check";
@chunk char TypeTextDeposit[] = "Deposit";
@chunk char TypeTextCredit[] = "Credit";
@chunk char TypeTextDebit[] = "Debit";
@chunk char TypeTextXfer[] = "Transfer";


/* strings in xfr_mtds.goc */
@chunk char XferAmtMsg[] = "Please enter an amount to transfer.";
@localize "Message if the user fails to enter an amount to transfer";
@chunk char XferAcctsMsg[] = "From and To accounts must be different.";
@localize "Message when user selects the same account in the transfer dialog box";
@chunk char XferOutText[] = "Transfer Out";
@localize "Text placed in Payee/Payor field of transfer from account transaction";
@chunk char XferInText[] = "Transfer In";
@localize "Text placed in Payee/Payor field of transfer to account transaction";

/* strings in exp_mtds.goc */
@chunk char ExpOpenErrMsg[] = "There was an error opening the .QIF file.";
@localize "Error message on opening an export QIF file";
@chunk char ExpCreateErrMsg[] = "There was an error creating the .QIF file.";
@localize "Error message when creating an export QIF file";
@chunk char ExpWriteErrMsg[] = "There was an error writing the .QIF file.";
@localize "Error message when writing to an export QIF file";
@chunk char ExpCloseErrMsg[] = "There was an error closing the .QIF file.";
@localize "Error message when closing an export QIF file";
@chunk char FileExistsErrMsg[] = "There is already a file with that name.  Please chose another name.";
@localize "Error message when the export filename already exists";
@chunk char QIFEOLString[] = "\r\n";
@localize "End of line control codes";
@chunk char QIFDateString[] = "D";
@localize "QIF Date code";
@chunk char QIFAmountString[] = "T";
@localize "QIF Amount code";
@chunk char QIFClearedString[] = "Cx\r\n";
@localize "QIF Cleared Status code";
@chunk char QIFCheckString[] = "N";
@localize "QIF Check number code";
@chunk char QIFPayeeString[] = "P";
@localize "QIF Payee code";
@chunk char QIFMemoString[] = "M";
@localize "QIF Memo code";
@chunk char QIFCategoryString[] = "L";
@localize "QIF Category code";
@chunk char QIFSplitCatString[] = "S";
@localize "QIF Split Category code";
@chunk char QIFSplitMemoString[] = "E";
@localize "QIF Split Memo code";
@chunk char QIFSplitAmountString[] = "$";
@localize "QIF Split Amount code";
@chunk char QIFEOEString[] = "^\r\n";
@localize "QIF End of entry code";
@chunk char DefaultQIF[] = "UNNAMED.QIF";
@localize "default QIF file name";

/* strings in ckp_mtds.goc */
@chunk char ChkPrntToFromMsg[] = "From Check Number is greater than To Check Number";
@localize "from > to check print error";
@chunk char ChkPrntNoCheckMsg[] = "Check number \"\001\" cannot be found.";
@localize "check doesn't exist error";

/* strings in sch_mtds.goc */
@chunk char SrchNotFoundMsg[] = "The text \"\001\" does not appear anywhere in this account register.";
@localize "Message when no records match the search text";
@chunk char SrchNextNotFoundMsg[] = "You have finished searching the entire account register.";
@localize "Message when no more records match the search text";

@end TextStrings;
