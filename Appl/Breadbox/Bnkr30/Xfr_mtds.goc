
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			xfr_mtds.goc
 *  PROJECT:		GPC Banker
 *  DESCRIPTION:	This file has methods for the transfer beteewn
 *				accounts functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "bnkr30.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/****************************************************************************
 *		Code for GPCBnkrProcessClass Transfer stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_ENTER_TRANSFER for GPCBnkrProcessClass
 *
 * DESCRIPTION:	does the transfer of $$ between accounts
 *     
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_ENTER_TRANSFER
{
 char		dateString[DATE_SIZE];
 char		amtInString[DOLLAR_IN_SIZE];
 char		memo[ENTRY_SIZE];
char			bankString[ENTRY_SIZE];
 word		length, numRecon, sortPos, sortPosReg;
 dword		transDateNum;
 FloatNum		amount, balance;
 TimerDateAndTime	date;
 TransStruct		*trans;
 DBGroup		fromGroup, toGroup;
 DBItem		transItem, fromItem, toItem;
 Boolean		savedFrom, savedTo;
 Boolean		updateReg = FALSE;
AcctStruct	*acct;
DBGroupAndItem	mapitem;
DBMapStruct*	mapPtr;
 word	  savedCurrentAcct;
 word	  savedNumTrans;
 ChunkHandle	  savedTLCArray;


    /* Exit if no amount */
    length = @call NEFDAmount::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    if (!length) {
	  NotifyDBox(0, @XferAmtMsg);
	  @send NEFDAmount::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  } /* end of no amount */

    /* Exit if amount invalid */
    if (!AmountChecksOK(amtInString, FALSE, FALSE))  {
	  /* send the focus back to the field */
	  @send NEFDAmount::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    /* exit if same accts selected */
    if (fromAcct == toAcct)  {
	  NotifyDBox(0, @XferAcctsMsg);
       return;
       } /* end of can't do same acct */

    /* Exit if date no good */
    @call NEFDDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    if (!DateCheck(dateString))  {
	  /* send the focus back to the date field */
	  @send NEFDDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    /* dismiss the dbox */
    @send NewEntryDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* get the rest of the info */
    @call NEFMemoText::MSG_VIS_TEXT_GET_ALL_PTR(memo);

    /* convert the amount to a value */
    FloatAsciiToFloat(FAF_STORE_NUMBER,
			length,
			amtInString,
			&amount);

    /* parse the date */
    LocalParseDateTime(dateString, DTF_SHORT, &date);

    /* convert to comparison number */
    transDateNum = MakeDateNum(date);

    /* FOR THE FROM ACCOUNT */
    currentType = TRANS_XFM;
    mapitem = DBGetMap(GPCBnkrFile);
    mapPtr = DBLockUngrouped(GPCBnkrFile, mapitem);
    acct = (AcctStruct *) (mapPtr + sizeof(DBMapStruct));
    if (currentAcct != fromAcct) {
	  /* save globals...  */
	  savedFrom = TRUE;
	  savedCurrentAcct = currentAcct;
	  savedNumTrans = numTrans;
	  savedTLCArray = transListChunkArray;
	  /* and reset for the "from" account */
	  currentAcct = fromAcct;
	  numTrans = acct[currentAcct].AS_numTrans;
	  transListChunkArray = acct[currentAcct].AS_transChunkHan;
	  fromGroup = acct[currentAcct].AS_group;
	  }
    else  {
	  savedFrom = FALSE;
	  updateReg = TRUE;
	  fromGroup = currentAcctGroup;
	  }
    strcpy(bankString, acct[toAcct].AS_bank);
    DBUnlock(mapPtr);

    /* now call the function that enters this transaction */
    balance =  EnterTransaction(
				   FALSE,   /* import */
				   amount,
				   date.TDAT_year,
				   date.TDAT_month,
				   date.TDAT_day,
				   0,
				   bankString,
				   memo,
				   "",
				   FALSE,    /* tax */
				   FALSE,       /* cleared */
				   &transItem);        /* returned */

    /* add this transaction to the acct sort index array */
    sortPos = TransIndexInsert(transDateNum,
						 date,
						 0,
						 amount,
						 FALSE,
						 transItem);

    /* save this trans' DBItem */
    fromItem = transItem;

    /* restore the globals */
    if (savedFrom) {
	  currentAcct = savedCurrentAcct;
	  numTrans = savedNumTrans;
	  transListChunkArray = savedTLCArray;
	  }
    else  sortPosReg = sortPos;

    /* FOR THE TO ACCOUNT */
    currentType = TRANS_XFP;
    mapitem = DBGetMap(GPCBnkrFile);
    mapPtr = DBLockUngrouped(GPCBnkrFile, mapitem);
    acct = (AcctStruct *) (mapPtr + sizeof(DBMapStruct));
    if (currentAcct != toAcct) {
	  /* save globals...  */
	  savedTo = TRUE;
	  savedCurrentAcct = currentAcct;
	  savedNumTrans = numTrans;
	  savedTLCArray = transListChunkArray;
	  /* and reset for the "from" account */
	  currentAcct = toAcct;
	  numTrans = acct[currentAcct].AS_numTrans;
	  transListChunkArray = acct[currentAcct].AS_transChunkHan;
	  toGroup = acct[currentAcct].AS_group;
	  }
    else  {
	  savedTo = FALSE;
	  updateReg = TRUE;
	  toGroup = currentAcctGroup;
	  }
    strcpy(bankString, acct[fromAcct].AS_bank);
    DBUnlock(mapPtr);

    /* now call the function that enters this transaction */
    balance =  EnterTransaction(
				   FALSE,   /* import */
				   amount,
				   date.TDAT_year,
				   date.TDAT_month,
				   date.TDAT_day,
				   0,
				   bankString,
				   memo,
				   "",
				   FALSE,    /* tax */
				   FALSE,       /* cleared */
				   &transItem);        /* returned */


    /* add this transaction to the acct sort index array */
    sortPos = TransIndexInsert(transDateNum,
						 date,
						 0,
						 amount,
						 FALSE,
						 transItem);

    /* save this trans' DBItem */
    toItem = transItem;

    /* restore the globals */
    if (savedTo) {
	  currentAcct = savedCurrentAcct;
	  numTrans = savedNumTrans;
	  transListChunkArray = savedTLCArray;
	  }
    else  sortPosReg = sortPos;

    /* now put the from's Group & Item in the to's multi G&I fields
	* and vice versa, so that we can quickly find the other half
	* of the transfer for void, mod and del operations
	*/
    trans = DBLock(GPCBnkrFile, fromGroup, fromItem);
    trans->TS_multiGroup = toGroup;
    trans->TS_multiItem = toItem;
    DBDirty(trans);
    DBUnlock(trans);
    trans = DBLock(GPCBnkrFile, toGroup, toItem);
    trans->TS_multiGroup = fromGroup;
    trans->TS_multiItem = fromItem;
    DBDirty(trans);
    DBUnlock(trans);

    /* do this stuff if one of the acted on accounts is on the screen */
    if (updateReg == TRUE)  {
	  /* init the register dlist */
	  if (numTrans > DEFAULT_LIST_LINES-1)
		@send RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numTrans);
	  else
		@send RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_LIST_LINES);
	  @send RegisterDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sortPosReg, FALSE);
       }

    /* clear the fields */
    @send NEFDAmount::MSG_VIS_TEXT_DELETE_ALL();
    @send NEFMemoText::MSG_VIS_TEXT_DELETE_ALL();

    /* update reconcile stuff if necessary */
    if (reconcileFlag)  {
	  numRecon = @call RCLDList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS();
	  @send RCLDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecon + 1);
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TO_DLIST_APPLY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles an apply of user selection in the to account list.
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_TO_DLIST_APPLY
{


    toAcct = selection;


}

/***********************************************************************
 *
 * MESSAGE:	MSG_FROM_DLIST_APPLY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles an apply of user selection in the from account list.
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * 
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_FROM_DLIST_APPLY
{


    fromAcct = selection;


}


