@include <stdapp.goh>
#include <graphics.h>
#include <Ansi/string.h>
#include "IMPBMP/impbmp.h"
#include "IMPBMP/ibcommon.h"
@include "statbar/statbar.goh"

#define IB_BUFFER_SIZE 16384

ImpBmpStatus _pascal ImpBMPGetHeader(FileHandle source, ImpBMPFileHeader *fh)
{
  int result; /* normally word */

  result = FileRead(source, fh, sizeof(ImpBMPFileHeader), 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != sizeof(ImpBMPFileHeader))
	 return(IBS_WRONG_FORMAT);
  if(strncmp(fh->IBFH_type, "BM", 2) != 0)
	 return(IBS_WRONG_FORMAT);
  return(IBS_NO_ERROR);
};

ImpBmpStatus _pascal ImpBMPProcessPicDesc(FileHandle source, ImpBMPPicDesc *pd)
{
  dword len;
  ImpBMPBitmapInfo1 bi;
  BMFormat type;
  int result;
  ImpBmpStatus status;

  result = FileRead(source, &len, 4, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != 4)
	 return(IBS_WRONG_FILE);

  status = IBS_NO_ERROR;
  if(len == 40)
  {
	 result = FileRead(source, &bi, sizeof(ImpBMPBitmapInfo1), 0);
	 if(result == -1)
		return(IBS_SYS_ERROR);
	 if(result != sizeof(ImpBMPBitmapInfo1))
		return(IBS_WRONG_FILE);

	 pd->IBPD_width = bi.IBBI_width;
	 pd->IBPD_height = bi.IBBI_height;
	 pd->IBPD_pack = bi.IBBI_compression;
	 pd->IBPD_bits = bi.IBBI_bitCount;

	if(pd->IBPD_pack != 0)
		return(IBS_UNSUPPORTED_COMPRESSION);

	 if(bi.IBBI_bitCount == 1)
		type=BMF_MONO;
	 else
		if(bi.IBBI_bitCount == 4)
		  type=BMF_4BIT;
		else
		  if(bi.IBBI_bitCount == 8)
			 type=BMF_8BIT;
		  else

		  if(bi.IBBI_bitCount == 24)
			  type=BMF_24BIT;
		  else

			 status = IBS_WRONG_FORMAT;
	 pd->IBPD_format = type;
  }
  else
	return(IBS_WRONG_FORMAT);
  return(status);
};

ImpBmpStatus _pascal
ImpBMPGetPalette(FileHandle source, MemHandle palmem,
						 word palsize/*, byte type*/)
{
  RGBValue *pal;
  ImpBMP_RGBquad entry1;
  int result;
  ImpBmpStatus status;
  word counter;

  counter=0;
  pal = MemLock(palmem);
  status = IBS_NO_ERROR;
  while((counter!=palsize) && (status == IBS_NO_ERROR))
  {
	 result = FileRead(source, &entry1, sizeof(ImpBMP_RGBquad), 0);
	 if(result == sizeof(ImpBMP_RGBquad))
	 {
		pal->RGB_red = entry1.IBRQ_red;
		pal->RGB_green = entry1.IBRQ_green;
		pal->RGB_blue = entry1.IBRQ_blue;
		pal++;
		counter++;
	 }
	 else
	  status = IBS_WRONG_FILE;
  };

  MemUnlock(palmem);
  return(status);
};

ImpBmpStatus _pascal ImpBMPGetRawByte(ImpBmpStream *stream, byte *value)
{
  byte *buffer;
  int result;
  ImpBmpStatus status;

  buffer = stream->IBST_mem;
  status = IBS_NO_ERROR;
  if(stream->IBST_count == 0)
  {
	 result = FileRead(stream->IBST_file, buffer, stream->IBST_size, 0);
	 if(result == -1)
		status = IBS_SYS_ERROR;
	 if(result == 0)
		status = IBS_WRONG_FILE;
	 if (status == IBS_NO_ERROR)
	 {
		stream->IBST_index = 0;
		stream->IBST_count = result;
	 };
  };
  *value = buffer[stream->IBST_index];
  stream->IBST_index++;
  stream->IBST_count--;
  return(status);
};

ImpBmpStatus _pascal ImpBMPReadByte(ImpBmpStream *stream,
			  /*ImpBMPStream *bmpstr, */byte *value)
{
  byte read;
  ImpBmpStatus status;

  status = ImpBMPGetRawByte(stream, &read);
  *value = read;
  return(status);
};

ImpBmpStatus _pascal ImpBMPReadLine(byte *ptr,
												ImpBmpStream *stream,
												ImpBMPStream *bmpstr)
{
  word count/*, count3*/;
  byte /*pass, */count2;
  ImpBmpStatus status;
  byte read;

  switch(bmpstr->IBS_format)
  {
	 case BMF_MONO:
			{
			  count = 0;
			  do
			  {
				 status = ImpBMPReadByte(stream/*, bmpstr*/, &read);
				 if(count < bmpstr->IBS_size)
					ptr[count] = read ^ 0xff;
				 count++;
			  }
			  while(( ((((bmpstr->IBS_width+7)/8)+3)&~3) !=  count)&&
								  (status == IBS_NO_ERROR));
			};
			break;

	 case BMF_4BIT:
			{
			  count = 0;
			  do
			  {
				 status = ImpBMPReadByte(stream/*, bmpstr*/, &read);
				 if(count < bmpstr->IBS_size)
					ptr[count] = read;
				 count++;
			  }
			  while(( ((((bmpstr->IBS_width+1)/2)+3)&~3) !=  count)&&
								  (status == IBS_NO_ERROR));
			};
			break;

	 case BMF_8BIT:
			{
			  count = 0;
			  do
			  {
				 status = ImpBMPReadByte(stream/*, bmpstr*/, &read);
				 if(count < bmpstr->IBS_size)
					ptr[count] = read;
				 count++;
			  }
			  while(( ((bmpstr->IBS_width+3)&~3) !=  count)&&
								  (status == IBS_NO_ERROR));
			};
			break;

	 case BMF_24BIT:
			{
			  count2 = 0;
			  count = 0;
			  do
			  {
				 status = ImpBMPReadByte(stream/*, bmpstr*/, &read);
				 if(count < bmpstr->IBS_size)
				 {
					ptr[count] = read;
					count2++;
					if(count2 == 3)
					{
					  count2 = ptr[count];
					  ptr[count] = ptr[count - 2];
					  ptr[count-2] = count2;
					  count2 = 0;
					};
				 };
				 count++;
			  }
			  while(( ((bmpstr->IBS_width*3+3)&~3) !=  count)&&
								  (status == IBS_NO_ERROR));
			};
			break;
  };
  return(status);

};


ImpBmpStatus _pascal ImpBMPProcessFile(ImpBmpParams *params)
{
  byte *palptr, *bmptr;
  word offset;
  MemHandle bmmem;
  word size;
  void *lineptr;
  word count;
  ImpBMPStream bmpstr;
  ImpBmpStatus status;
  ImpBMPFileHeader fh;
  ImpBMPPicDesc pd;
  ImpBmpStream stream;
  MemHandle buffermem, palmem;
  GStateHandle bmstate;
  VMBlockHandle bmblock;
  Boolean flag;

  strcpy(params->IBP_impForm, ".BMP (Windows 3.x DIB)");

  if(FilePos(params->IBP_source,0,FILE_POS_START)!=0)
	 return(IBS_WRONG_FILE);

  /* switch in status bar */
  @call params->IBP_status::MSG_SB_START_PROCESS();

  status = ImpBMPGetHeader(params->IBP_source, &fh);

  if(status == IBS_NO_ERROR)
	 status = ImpBMPProcessPicDesc(params->IBP_source, &pd);

  if(status != IBS_NO_ERROR)
  {
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(status);
  };

  /* read palette */
  if((pd.IBPD_format>=BMF_4BIT)&&(pd.IBPD_format<BMF_24BIT))
  {
	 palmem = MemAlloc((((word)1) << pd.IBPD_bits)*3, HF_SWAPABLE, 0);
	 if(palmem == 0)
	 {
		if(params->IBP_status != NULL)
			@call params->IBP_status::MSG_SB_STOP_PROCESS();
		return(IBS_NO_MEMORY);
	 };

	 status = ImpBMPGetPalette(params->IBP_source, palmem, ((word)1) << pd.IBPD_bits/*,
				 pd.IBPD_srcType*/);
	 if(status != IBS_NO_ERROR)
	 {
		MemFree(palmem);
		if(params->IBP_status != NULL)
			@call params->IBP_status::MSG_SB_STOP_PROCESS();
		return(IBS_NO_MEMORY);
	 };
  };

  /* buffer for reading gif file */
  buffermem = MemAlloc(IB_BUFFER_SIZE, HF_FIXED, 0);
  if(buffermem == NULL)
  {
	 MemFree(palmem);
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(IBS_NO_MEMORY);
  };

  /* define file stream */
  stream.IBST_mem = MemDeref(buffermem);
  stream.IBST_size = IB_BUFFER_SIZE;
  stream.IBST_file = params->IBP_source;
  stream.IBST_count = 0;

  if(FilePos(params->IBP_source, fh.IBFH_offset,FILE_POS_START)
						  !=fh.IBFH_offset)
  {
	 MemFree(buffermem);
	 MemFree(palmem);
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(IBS_NO_MEMORY);
  };

  /* Create bitmap hugearray */
  params->IBP_format = pd.IBPD_format;
  params->IBP_width = pd.IBPD_width;
  params->IBP_height = pd.IBPD_height;
  bmblock =
  params->IBP_bitmap = GrCreateBitmap(pd.IBPD_format|BMT_COMPLEX|BMT_PALETTE,
								 pd.IBPD_width, pd.IBPD_height,
								 params->IBP_dest, 0, &bmstate);

  GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);

  bmpstr.IBS_pack = pd.IBPD_pack;
  bmpstr.IBS_count = 0;
  bmpstr.IBS_format = pd.IBPD_format;
  bmpstr.IBS_width = pd.IBPD_width;

  /* read bitmap line by line */
  count = 0;
  do
  {
	 if(HAL_COUNT(HugeArrayLock(params->IBP_dest ,bmblock,
				(dword)params->IBP_height-count-1,&lineptr,&size)) != 0)
	 {
		bmpstr.IBS_size = size;
		status = ImpBMPReadLine(lineptr, &stream, &bmpstr);
		HugeArrayDirty(lineptr);
		HugeArrayUnlock(lineptr);
		count++;
		if(params->IBP_status != NULL)
		  flag = @call params->IBP_status::
				  MSG_SB_SET_STATUS_VALUE(((dword)count)*100/params->IBP_height);
		if(flag == FALSE)
		  status = IBS_IMPORT_STOPPED;
	 }
	 else
		status = IBS_SYS_ERROR;
  } while((count != params->IBP_height) && (status == IBS_NO_ERROR));

  /* save palette */
  if(status == IBS_NO_ERROR)
	 if((pd.IBPD_format>=BMF_4BIT)&&(pd.IBPD_format<BMF_24BIT))
	 {
		palptr = MemLock(palmem);
		bmptr = VMLock(params->IBP_dest, params->IBP_bitmap, &bmmem);
		offset = bmptr[0x28]+256*(bmptr[0x29]);
		offset += 0x1c;

		memcpy(&(bmptr[offset]), palptr, 3*(((word)1)<<pd.IBPD_bits));
		VMDirty(bmmem);
		VMUnlock(bmmem);
		MemUnlock(palmem);
		MemFree(palmem);
	};

  if(status != IBS_NO_ERROR)
  {
	 bmstate = GrEditBitmap(params->IBP_dest, bmblock, 0);
	 GrDestroyBitmap(bmstate, BMD_KILL_DATA);
  };

  /* free buffer */
  MemFree(buffermem);

  /* stop slider */
  if(params->IBP_status != NULL)
	 @call params->IBP_status::MSG_SB_END_PROCESS();

  return(status);
};

ImpBmpStatus _pascal ImpBMPTestFile(FileHandle file)
{
  int result;
  byte read[2];

  if(FilePos(file, 0, FILE_POS_START)!=0)
	 return(IBS_WRONG_FILE);
  result = FileRead(file, &read, 2, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != 2)
	 return(IBS_WRONG_FILE);
  if(strncmp((const char *) read, "BM", 2) == 0)
	 return(IBS_NO_ERROR);
  return(IBS_WRONG_FORMAT);
};
