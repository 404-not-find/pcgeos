
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			fld_mtds.goc
 *  PROJECT:		Breadbox GPCBase
 *  DESCRIPTION:	This file has methods for field management
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "gpcbase.goh"
@include "externs.goh"

#define TO_DATE 1
#define TO_STRING 2

optr cNameOptr[MAX_FIELDS] = {
    @CName1,
    @CName2,
    @CName3,
    @CName4,
    @CName5,
    @CName6,
    @CName7,
    @CName8,
    @CName9,
    @CName10
} ;
/*
 ***************************************************************************
 *		Code for GPCBaseProcessClass   field management
 ***************************************************************************
 */
/***********************************************************************
 *
 * FUNCTION:	DeleteField
 *              (word newNum)
 * CALLED BY:
 *
 *
 * STRATEGY:    deletes data from fields chopped by reducing #
 *		of fields in display
 *
 ***********************************************************************/
void DeleteField (word newNum)
{
word		i, newLength;
RecordStruct	*record;
DBItem		recordItem;
DBGroup		groupGroup;
word		j;
word		bufCount, fieldCount;
char		fieldString[DATA_LEN];
char		strBuffer[(MAX_FIELDS * DATA_LEN)];


    /* cycle through the records */
    for (i = 0; i < numRecords; i++)  {
	  /* get the record struct address */
	  GetGroupAndItem (&groupGroup, &recordItem, i);
	  record = DBLock(GPCBFile, groupGroup, recordItem);
	  /* copy the record to the buffer */
	  strcpy(strBuffer, record->RS_data);

	  /* now cycle the data into the recordBuffer */
	  bufCount = 0;
	  record->RS_data[0] = NULL;
	  /* first copy the newNum # of fields */
	  for (j = 1; j <= newNum; j++)  {
		for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		   if (strBuffer[bufCount] != (char) FIELD_SEP)  {  /* fill fieldStr */
			 fieldString[fieldCount] = strBuffer[bufCount];
			 bufCount++;
                }
		  else  {   /* end of field */
			 fieldString[fieldCount] = NULL;
			 bufCount++;
			 strcat (record->RS_data, fieldString);
			 /* add end of field marker */
			 strcat (record->RS_data, FIELD_SEP_STRING);
			 fieldCount = DATA_LEN; /* force exit loop */
			 }  /* end field else */
		   } /* end this field for */
		} /* end copy fields for */

	  /* now empty the deleted fields */
       for (j = newNum + 1; j <= numFields; j++)  {
          for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		   if (strBuffer[bufCount] != (char) FIELD_SEP)  {
			 /* just keep counting */
			 bufCount++;
                }
		   else  {   /* end of field */
			 fieldString[0] = NULL;
			 bufCount++;
			 strcat (record->RS_data, fieldString);
			 /* add end of field marker */
			 strcat (record->RS_data, FIELD_SEP_STRING);
			 fieldCount = DATA_LEN; /* force exit loop */
			 }  /* end field else */
		   } /* end this field for */
		} /* end deleted fields for */

	  /* get the new length */
	  newLength = strlen(record->RS_data);
	  DBUnlock(record);

       /* resize the truncated record DBItem */
	  DBReAlloc(GPCBFile, groupGroup, recordItem, (newLength + 1));

    } /* end of loop thru records for */

    return;

}

/***********************************************************************
 *
 * FUNCTION:	ConvertAllDates
 *              (word whichField, word whichWay)
 * CALLED BY:	MSG_CHANGE_ATTR
 *
 *
 * STRATEGY:   When user changes field type from T_DAT to something else
 *             we convert our datenumbers to strings  or   when user changes
 *             to T_DAT from something we try to convert to datenumbers
 *
 *
 ***********************************************************************/
void ConvertAllDates(word whichField, word whichWay)
{
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		i, j, originalLength;
 word		bufCount, fieldCount, fieldStart;
 char		fieldString[DATA_LEN], dateString[11], tempString[5];
 char		strBuffer[(MAX_FIELDS * DATA_LEN)];
 char		remainingBuffer[(MAX_FIELDS * DATA_LEN)];
 TimerDateAndTime	date;
 optr fieldOptr[MAX_FIELDS] = {
		@Field1,
		@Field2,
		@Field3,
		@Field4,
		@Field5,
		@Field6,
		@Field7,
		@Field8,
		@Field9,
		@Field10};


    /* cycle through the records */
    for (i = 0; i < numRecords; i++)  {
	  /* get the group and item  */
	  GetGroupAndItem (&groupGroup, &recordItem, i);
	  /* get the record struct address */
	  record = DBLock(GPCBFile, groupGroup, recordItem);
	  /* copy the record to the buffer */
	  strcpy(strBuffer, record->RS_data);
	  originalLength = strlen(strBuffer);

	  /* now go to the desired field */
	  bufCount = 0;
	  j = 0;
	  while (j != whichField) {
		if (strBuffer[bufCount] == (char) FIELD_SEP)  j++;
		bufCount++;
		}
	  fieldStart = bufCount;
	  /* get the selected field's data */
	  for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		if (strBuffer[bufCount] != (char) FIELD_SEP)  {
		   if (whichWay == TO_STRING)
				  dateString[fieldCount] = strBuffer[bufCount];
		   else fieldString[fieldCount] = strBuffer[bufCount];
		   bufCount++;
		   }
		else  {
		   if (whichWay == TO_STRING)
			    dateString[fieldCount] = NULL;
		   else  fieldString[fieldCount] = NULL;
		   fieldCount = DATA_LEN; /* force exit loop */
		   }
		}
	  /* keep the remaining fields */
	  strcpy(remainingBuffer, &strBuffer[bufCount]);
	  /* null term the main buffer after SEP beginning selected field */
	  strBuffer[fieldStart] = NULL;

	  if (whichWay == TO_STRING)  {
		ConvFromDateNum (dateString, fieldString);
		strcat(strBuffer, fieldString);
		}
	  else  {
		/* convert to date number */
		if (strlen(fieldString))  {
		   /* parse the date string */
		   if (LocalParseDateTime(fieldString, DTF_SHORT, &date) == -1) {
			 /* we have a valid date */
			 UtilHex32ToAscii(dateString,
						   (sdword) date.TDAT_year,
						   UHTAF_NULL_TERMINATE);
			 UtilHex32ToAscii(tempString,
						   (sdword) date.TDAT_month,
						   UHTAF_NULL_TERMINATE);
			 if (strlen(tempString) == 1) strcat(dateString, "0");
			 strcat(dateString, tempString);
			 UtilHex32ToAscii(tempString,
						   (sdword) date.TDAT_day,
						   UHTAF_NULL_TERMINATE);
			 if (strlen(tempString) == 1) strcat(dateString, "0");
			 strcat(dateString, tempString);
			 }
		   else dateString[0] = NULL;
		   }
		else  dateString[0] = NULL;
		strcat(strBuffer, dateString);

		/* if we couldn't convert it we have to blank the field that is
		 * showing on the screen */
		if (!dateString[0] && (i == currentRecord))  {
		   @send fieldOptr[whichField]::MSG_VIS_TEXT_DELETE_ALL();
		   }
		}  /* end of conv from datenum else */

	  /* put our record string back together */
	  strcat(strBuffer, remainingBuffer);

	  /* is the new record longer? */
	  if (originalLength < strlen(strBuffer))  {
		/* yes */
		/* resize the record DBItem (bigger) */
		DBUnlock(record);
		DBReAlloc(GPCBFile, groupGroup, recordItem, (strlen(strBuffer) + 1));
		/* re-open that record since pointers may have changed */
		GetGroupAndItem (&groupGroup, &recordItem, i);
		record = DBLock(GPCBFile, groupGroup, recordItem);
		/* put the converted record back */
		strcpy(record->RS_data, strBuffer);
		DBDirty(record);
		DBUnlock(record);
		}
	  /* is the new record shorter? */
	  else if (originalLength > strlen(strBuffer))  {
		/* put the converted record back */
		strcpy(record->RS_data, strBuffer);
		DBDirty(record);
		DBUnlock(record);
		/* resize the record DBItem (smaller) */
		DBReAlloc(GPCBFile, groupGroup, recordItem, (strlen(strBuffer) + 1));
		}
	  else  {  /*no change in size */
		/* put the converted record back */
		strcpy(record->RS_data, strBuffer);
		DBDirty(record);
		DBUnlock(record);
		}

	  }  /* end of cycle thru recs for */

    return;

}

/***********************************************************************
 *
 * FUNCTION:	ConvertGenToNum
 *                         (word whichField)
 * CALLED BY:	MSG_CHANGE_ATTR
 *
 *
 * STRATEGY:   When user changes field type from Gen to Num we make sure
 *             there are only numeric characters else we null the string.
 *                       (signed decimal)
 *
 *
 ***********************************************************************/
void ConvertGenToNum(word whichField)
{
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		i, j;
 word		bufCount, fieldCount, fieldStart;
 char		fieldString[DATA_LEN];
 char		strBuffer[(MAX_FIELDS * DATA_LEN)];
 char		remainingBuffer[(MAX_FIELDS * DATA_LEN)];
 Boolean		isNum;
 optr fieldOptr[MAX_FIELDS] = {
		@Field1,
		@Field2,
		@Field3,
		@Field4,
		@Field5,
		@Field6,
		@Field7,
		@Field8,
		@Field9,
		@Field10};


    /* cycle through the records */
    for (i = 0; i < numRecords; i++)  {
	  /* get the group and item  */
	  GetGroupAndItem (&groupGroup, &recordItem, i);
	  /* get the record struct address */
	  record = DBLock(GPCBFile, groupGroup, recordItem);
	  /* copy the record to the buffer */
	  strcpy(strBuffer, record->RS_data);
	  isNum = TRUE;
	  /* now go to the desired field */
	  bufCount = 0;
	  j = 0;
	  while (j != whichField) {
		if (strBuffer[bufCount] == (char) FIELD_SEP)  j++;
		bufCount++;
		}
	  fieldStart = bufCount;
	  /* get the selected field's data */
	  for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		if (strBuffer[bufCount] != (char) FIELD_SEP)  {
		   /* check is signed decimal */
	    /*	   if (LocalIsNumChar(strBuffer[bufCount])) */
				  fieldString[fieldCount] = strBuffer[bufCount];
	    /*	   else  isNum = FALSE;  */
		   /* but we'll keep going thru the field to get to the next field */
		   bufCount++;
		   }
		else  {  /* end of field */
		   fieldString[fieldCount] = NULL;
		   if (!NumCheck(fieldString))  isNum = FALSE;

		   fieldCount = DATA_LEN; /* force exit loop */
		   }
		}  /* end of get the field data for (fieldCount) */


	  /* take action if we couldn't convert */
	  if (!isNum)  {
		/* save the remaining fields */
		strcpy(remainingBuffer, &strBuffer[bufCount]);
		/* null term the main buffer after FIELD_SEP beginning selected field */
		strBuffer[fieldStart] = NULL;
		/* null out teh field we couldn't convert */
		fieldString[0] = NULL;
		/* copy it to the buffer */
		strcat(strBuffer, fieldString);
		/* put our record string back together */
		strcat(strBuffer, remainingBuffer);

		/* put the converted record back */
		strcpy(record->RS_data, strBuffer);
		DBDirty(record);
		DBUnlock(record);
		/* resize the record DBItem (smaller) */
		DBReAlloc(GPCBFile, groupGroup, recordItem, (strlen(strBuffer) + 1));

		/* if we couldn't convert it we have to blank the field that is
		 * showing on the screen */
		if (!fieldString[0] && (i == currentRecord))  {
		   @send fieldOptr[whichField]::MSG_VIS_TEXT_DELETE_ALL();
		   }

		}  /* end of couldn't convert to num */

	  else DBUnlock(record);

	  }  /* end of cycle thru recs for */

    return;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_CHANGE_ATTR for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:	Called to initialize Field Attrs Change DB.
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_OPEN_CHANGE_ATTR
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 word		i;
optr cTypeOptr[MAX_FIELDS] = {
    @CType1,
    @CType2,
    @CType3,
    @CType4,
    @CType5,
    @CType6,
    @CType7,
    @CType8,
    @CType9,
    @CType10
} ;


    /* check for changes in displayed data */
    if (CheckForChanges()) return;

    /* set the starting number */
    @call NumberOfFields::MSG_GEN_VALUE_SET_INTEGER_VALUE((word) numFields, FALSE);

    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);

    /* get the field names */
    for (i = 0; i < MAX_FIELDS; i++)  {
	  @call cNameOptr[i]::
		    MSG_VIS_TEXT_REPLACE_ALL_PTR(VMmapPtr->VMS_fieldName[i], 0);
	  /*  and show the field type  */
	  @call cTypeOptr[i]::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(VMmapPtr->VMS_fieldType[i], FALSE);
	  }
    VMUnlock(mh);

    @send ChangeAttrsButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* show the right number of fields */
    @call process::MSG_DISPLAY_FIELDS(numFields);

    /* Open the dialog box */
    @call ChangeAttrsDB::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CHANGE_ATTR for GPCBaseProcessClass
 *              
 *
 * DESCRIPTION:	Changes the field attributes.
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_CHANGE_ATTR
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 word		i, newNumFields, newType, numChanges, checkFields;
 Boolean		deleteFieldInfo = FALSE;
 char		nameString[FIELD_NAME_LEN], dBoxMsg[500];
 optr		changeArray[MAX_FIELDS];
 InteractionCommand	changeTypeAnswer;
optr cTypeOptr[MAX_FIELDS] = {
    @CType1,
    @CType2,
    @CType3,
    @CType4,
    @CType5,
    @CType6,
    @CType7,
    @CType8,
    @CType9,
    @CType10
} ;
 optr defFieldNameOptr[MAX_FIELDS] = {
		@f1Str,
		@f2Str,
		@f3Str,
		@f4Str,
		@f5Str,
		@f6Str,
		@f7Str,
		@f8Str,
		@f9Str,
		@f10Str};
 optr fieldOptr[MAX_FIELDS] = {
		@Field1,
		@Field2,
		@Field3,
		@Field4,
		@Field5,
		@Field6,
		@Field7,
		@Field8,
		@Field9,
		@Field10};


    /* NUMBER */
    /* get the user's input */
    newNumFields = @call NumberOfFields::MSG_GEN_VALUE_GET_INTEGER_VALUE();

    /* are there fewer fields? */
    if ((newNumFields < numFields) && numRecords)  {
	  /* yup - ask if they want to delete data */
	  if (AckDBox(NULL, @DelDataMsg) == ACK_YES) {
		/* call the delete field routine */
		DeleteField(newNumFields);
		deleteFieldInfo = TRUE;
		}
	  }

    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = VMLock(GPCBFile, vmbh, &mh);

    /* NAMES & TYPES */
    /* store the new field names and types */
    if (newNumFields <= numFields) checkFields = newNumFields;
    else checkFields = numFields; /* don't check a newly added field */
    /* first check for data loss conversions (Num or Gen to Date &
	* Gen to Num) and if there are any tell the user giving a choice
	* to not change */
    numChanges = 0;
    for (i = 0; i < checkFields; i++)  {
	  @call cNameOptr[i]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
	  newType = @call cTypeOptr[i]::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  /* num or gen to date */
	  if ((VMmapPtr->VMS_fieldType[i] != T_DAT) && (newType == T_DAT)) {
		if (numRecords)  {
		   changeArray[numChanges] = cNameOptr[i];
		   numChanges++;
		   }
		}
	  /* gen to num */
	  else if ((VMmapPtr->VMS_fieldType[i] == T_GEN) && (newType == T_NUM)) {
		if (numRecords)  {
		   changeArray[numChanges] = cNameOptr[i];
		   numChanges++;
		   }
		}
	  } /* end of data loss type change for loop */
    VMUnlock(mh);

    if (numChanges) {
	  /* OK there is at least one data loss type change...
	   * Put together the dbox message. */
	  MemLock (OptrToHandle(@TypeWarnMsg1));
	  strcpy(dBoxMsg, LMemDeref(@TypeWarnMsg1));
	  if (numChanges == 1) strcat(dBoxMsg, LMemDeref(@TypeWarnMsg2S));
	  else strcat(dBoxMsg, LMemDeref(@TypeWarnMsg2P));
	  strcat(dBoxMsg, LMemDeref(@TypeWarnMsg3));
	  if (numChanges == 1)  {
		strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_1));
		@call changeArray[0]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
		strcat(dBoxMsg, nameString);
		}
	  else if (numChanges == 2) {
		strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_2F));
		@call changeArray[0]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
		strcat(dBoxMsg, nameString);
		strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_2A));
		@call changeArray[1]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
		strcat(dBoxMsg, nameString);
		}
	  else {
		strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_3F));
		for(i = 0; i < numChanges - 1; i++) {
		   if (!i) strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_3Q));
		   else strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_3CQ));
		   @call changeArray[i]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
		   strcat(dBoxMsg, nameString);
		   strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_3Q));
		   }
		strcat(dBoxMsg, LMemDeref(@TypeWarnMsg4_3A));
		@call changeArray[numChanges - 1]::MSG_VIS_TEXT_GET_ALL_PTR(nameString);
		strcat(dBoxMsg, nameString);
		}
	  strcat(dBoxMsg, LMemDeref(@TypeWarnMsg5));
	  MemUnlock (OptrToHandle(@TypeWarnMsg1));
	  @call CTWText::MSG_VIS_TEXT_REPLACE_ALL_PTR(dBoxMsg, 0);
	  changeTypeAnswer = UserDoDialog(@ChangeTypesWarningDBox);
	  if (changeTypeAnswer != IC_YES) return;
	  } /* end of warn on type changes if */

    /* OK - let's implement the changes */

    /* store the new number of fields*/
    numFields = newNumFields;
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = VMLock(GPCBFile, vmbh, &mh);
    VMmapPtr->VMS_numFields = numFields;

    /* do the names and types */
    if (!deleteFieldInfo)  newNumFields = MAX_FIELDS;
    for (i = 0; i < newNumFields; i++)  {
	  @call cNameOptr[i]::MSG_VIS_TEXT_GET_ALL_PTR(VMmapPtr->VMS_fieldName[i]);
	  newType = @call cTypeOptr[i]::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  /* CHECK FOR TYPE CHANGES */
	  /* date to string */
	  if ((VMmapPtr->VMS_fieldType[i] == T_DAT) && (newType == T_GEN)) {
		if (numRecords)  ConvertAllDates(i, TO_STRING);
		}
	  /* num or gen to date */
	  if ((VMmapPtr->VMS_fieldType[i] != T_DAT) && (newType == T_DAT)) {
		if (numRecords)  ConvertAllDates(i, TO_DATE);
		}
	  /* gen to num */
	  if ((VMmapPtr->VMS_fieldType[i] == T_GEN) && (newType == T_NUM)) {
		if (numRecords)  ConvertGenToNum(i);
		}
	  /* don't need any conversion for date to num since date is stored
	   * as a number string, nor one for num to gen since num is stored
	   * as a number string */
	  VMmapPtr->VMS_fieldType[i] = newType;
	  } /* end of manes & type change for loop */

    if (deleteFieldInfo)  {
	  /* reset names and types of del'd fields to the default */
	  MemLock (OptrToHandle(@f1Str));
	  for (i = newNumFields; i < MAX_FIELDS; i++)  {
		/* show the default field names */
		@call fieldOptr[i]::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
		    LMemDeref(defFieldNameOptr[i]),
		    VUM_DELAYED_VIA_APP_QUEUE);
		/* save them */
		strcpy(VMmapPtr->VMS_fieldName[i], LMemDeref(defFieldNameOptr[i]));
		/* and clear the text in that field in the main display */
		@call fieldOptr[i]::MSG_VIS_TEXT_DELETE_ALL();
		/* and save the default type */
		VMmapPtr->VMS_fieldType[i] = T_GEN;
		}
	  MemUnlock (OptrToHandle(@f1Str));
	  }
    VMDirty(mh);
    VMUnlock(mh);

    /* update the fields shown in create new & attrs db*/
    @call process::MSG_DISPLAY_FIELDS(numFields);

    /* show the new names */
    @call process::MSG_DISPLAY_NAMES();

    /* re-initialize the records list since we may need to redraw the
     * displayed field data */
    @call RecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);

    /* update field data - if any */
    if (numRecords == 0) return;  /* no records */
    if (currentRecord == numRecords) return;  /* new record showing */
    ShowData(); /* since we may have changed the # of fields to show */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_DISPLAY_NAMES for GPCBaseProcessClass
 *              
 *
 * DESCRIPTION:	Displays the field names.
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_DISPLAY_NAMES
{
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 word			i;
 optr fieldOptr[MAX_FIELDS] = {
    @Field1,
    @Field2,
    @Field3,
    @Field4,
    @Field5,
    @Field6,
    @Field7,
    @Field8,
    @Field9,
    @Field10
} ;


    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);

    /* display the field names */
    for (i = 0; i < MAX_FIELDS; i++)  {
	  @call fieldOptr[i]::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			  VMmapPtr->VMS_fieldName[i],
			  VUM_DELAYED_VIA_APP_QUEUE);
	  }

    VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_DISPLAY_FIELDS for GPCBaseProcessClass
 *              (int number)
 *
 * DESCRIPTION:	Displays the proper number of fields in the create
 *				new & change attributes dialog box.
 *				11-25 and update sort genItems
 *                  11-27 and set text filters based on type
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_DISPLAY_FIELDS
{
 word		i;
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
optr newDataOptr[MAX_FIELDS] = {
    @NewData1,
    @NewData2,
    @NewData3,
    @NewData4,
    @NewData5,
    @NewData6,
    @NewData7,
    @NewData8,
    @NewData9,
    @NewData10
} ;
optr CAFieldOptr[MAX_FIELDS] = {
    @CAField1,
    @CAField2,
    @CAField3,
    @CAField4,
    @CAField5,
    @CAField6,
    @CAField7,
    @CAField8,
    @CAField9,
    @CAField10
} ;
 optr fieldOptr[MAX_FIELDS] = {
    @Field1,
    @Field2,
    @Field3,
    @Field4,
    @Field5,
    @Field6,
    @Field7,
    @Field8,
    @Field9,
    @Field10
} ;


    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);

    /* display the fields & set the text filters */
    for (i = 0; i < MAX_FIELDS; i++)  {
	  /* set the filters */
	  @call fieldOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call newDataOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  if (VMmapPtr->VMS_fieldType[i] != T_GEN)  {
		if (VMmapPtr->VMS_fieldType[i] == T_NUM)  {
		/*   @call fieldOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_DATE); */
		   @call fieldOptr[i]::MSG_META_ADD_VAR_DATA(
			 (ATTR_GEN_TEXT_SIGNED_DECIMAL), 0, NULL);
		/*   @call newDataOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_DATE);  */
		   @call newDataOptr[i]::MSG_META_ADD_VAR_DATA(
			 (ATTR_GEN_TEXT_SIGNED_DECIMAL), 0, NULL);
		   }
		else  {
		   @call fieldOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_SIGNED_DECIMAL);
	    /*	   @call fieldOptr[i]::MSG_META_ADD_VAR_DATA(
			 (ATTR_GEN_TEXT_DATE), 0, NULL); */
		   @call newDataOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_SIGNED_DECIMAL);
	    /*	   @call newDataOptr[i]::MSG_META_ADD_VAR_DATA(
			 (ATTR_GEN_TEXT_DATE), 0, NULL); */
		   }
		}
	  else  {
		@call fieldOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_SIGNED_DECIMAL);
	  /*	@call fieldOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_DATE); */
		@call newDataOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_SIGNED_DECIMAL);
	  /*	@call newDataOptr[i]::MSG_META_DELETE_VAR_DATA(
					    ATTR_GEN_TEXT_DATE);  */
		}

	  /*  show/hide the fields  */
	  if (i < number) {
		@send newDataOptr[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send CAFieldOptr[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send fieldOptr[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  else  {
		@send CAFieldOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  }  /* end of for loop */

    VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CHANGE_NUM_FIELDS_SHOWING for GPCBaseProcessClass
 *              (GEN_VALUE_STATUS_MSG)
 *			 	WWFixedAsDWord  value
 *				word  stateFlags
 *
 * DESCRIPTION:	Displays the proper number of fields in the attrs
 *				dbox as the GenValue is changed - not permanent!
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_CHANGE_NUM_FIELDS_SHOWING
{
 Boolean		isUsable;
 word		i;
optr fieldOptr[MAX_FIELDS] = {
    @CAField1,
    @CAField2,
    @CAField3,
    @CAField4,
    @CAField5,
    @CAField6,
    @CAField7,
    @CAField8,
    @CAField9,
    @CAField10
} ;


    /* display the fields */
    /* field 1 is always usable so start at field 2*/
    for (i = 2; i <= MAX_FIELDS; i++)  {
	  isUsable = @call fieldOptr[i-1]::MSG_GEN_GET_USABLE();
	  if (IntegerOf(value) < i) {
		if (isUsable)
		   @send fieldOptr[i-1]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  else  {
		if (!isUsable)
		   @send fieldOptr[i-1]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  }

    @send ChangeAttrsButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_FIELDS_DLIST_MONIKER_QUERY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (optr list, word item)
 *
 * DESCRIPTION:	shows entries in the various field lists.
 *
 *
 *
 ***********************************************************************/

@extern method GPCBaseProcessClass, MSG_FIELDS_DLIST_MONIKER_QUERY
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;


    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = VMLock(GPCBFile, vmbh, &mh);

    if ((list == @SDBViewList) || (list == @SDBSortFirstList)) {
	/* Show the name in the list item. */
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
	      item, VMmapPtr->VMS_fieldName[item]);
    }
    else {
	if (!item) {
	    MemLock(OptrToHandle(@noneStr));
	    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
		item, LMemDeref(@noneStr));
	    MemUnlock(OptrToHandle(@noneStr));
	    
	}
	else
	    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
		item, VMmapPtr->VMS_fieldName[item - 1]);
    }
	  
    VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_FIELD_TYPE_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	enables change button
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_FIELD_TYPE_STATUS
{

    if(!@call ChangeAttrsButton::MSG_GEN_GET_ENABLED())
	   @send ChangeAttrsButton::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_TEXT_SET_USER_MODIFIED for GPCBaseFieldTextClass
 *
 * PARAMETERS:   	
 *
 * DESCRIPTION:	enables change button as soon as any
 *                  change is made while text fields have the focus
 *
 *
 ***********************************************************************/
@extern method GPCBaseFieldTextClass, MSG_VIS_TEXT_SET_USER_MODIFIED
{

    if(!@call ChangeAttrsButton::MSG_GEN_GET_ENABLED())
	   @send ChangeAttrsButton::MSG_GEN_SET_ENABLED(VUM_NOW);
    @callsuper();

}


