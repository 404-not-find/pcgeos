
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/* txt_strs.goc */
/* all the strings that may need to be localized */

/*
 * We don't want the overhead of @including stdapp.goh, so we include just
 * those files that are necessary to get the @chunk declarations through the
 * C compiler.
 */
#include <geos.h>
#include <geode.h>
#include <object.h>

@start TextStrings, data;

/* strings in dta_mtds.goc */
@chunk char DelRecMsg[] = "Are you sure you want to delete this record?";
@localize "The dialog box message confirming user deleting a record";
@chunk char NumRecsMoniker1[] = "Total: ";
@localize "1st part of number of records";
@chunk char NumRecsMoniker2[] = " Records";
@localize "2nd part of number of records";
@chunk char RecNumMoniker[] = "Record #";
@localize "record number moniker";
@chunk char BadDateMsg[] = "The date \"\001\" is invalid.  Please re-enter.";
@chunk char BadDateMsgCUIDone[] = "The date is invalid.  Please re-enter.";
@localize "Message for date entry (all date fields) which won't parse";
@chunk char BadNumMsg[] = "The number \"\001\" is invalid.  Please re-enter.";
@chunk char BadNumMsgCUIDone[] = "The number is invalid.  Please re-enter.";
@localize "Message for number entry (numeric fields) which won't parse";
@chunk char NoEntryDataMsg[] = "There is no data in this record to save.";
@chunk char NoModEntryDataMsg[] = "There is no data in this record.  Please either delete the record or leave some data.";
@chunk char RecNumWarnMsg[] = "You are reaching the limit of 5,000 records in this database.";
@chunk char RecNumStopMsg[] = "You have reached the limit of 5,000 records in this database.";

/* strings in imp_mtds.goc */
@chunk char ImportMsg[] = "Are you sure you want to import data from \"\001\" into this file?";
@localize "Message to confirm import action. Make sure the string in quotes does not change!";
@chunk char ImpOpenErrMsg[] = "There was an error opening the .CSV file.";
@localize "Import error message";
@chunk char ImpBadTypeErrMsg[] = "Not a valid .CSV file.";
@localize "import error message when the file is not a CSV type";
@chunk char ImpReadErrMsg[] = "There was an error reading the .CSV file.";
@localize "Message shown when there was an import reading problem";
@chunk char ImpCloseErrMsg[] = "There was an error closing the .CSV file.";
@localize "Import error message on closing the imported file";
@chunk char ImpTooManyErrMsg[] = "There were more than 10 fields in the .CSV file.";
@localize "import error message when there are too many fields in the import file";
@chunk char ImpStatusText[]  = "Records imported:  ";
@localize "shows num recs imported in the prog DB";

/* strings in exp_mtds.goc */
@chunk char ExpCreateErrMsg[] = "There was an error creating the .CSV file.";
@localize "Error message when creating an export csv file";
@chunk char ExpWriteErrMsg[] = "There was an error writinging the .CSV file.";
@localize "Error message when writing to an export csv file";
@chunk char ExpCloseErrMsg[] = "There was an error closing the .CSV file.";
@localize "Error message when closing an export csv file";
@chunk char FileExistsErrMsg[] = "There is already a file with that name.  Please chose another name.";
@localize "Error message when the export filename already exists";
@chunk char DefaultCSV[] = "UNNAMED.CSV";
@localize {"The default CSV file name" 1-12};
@chunk char ExpStatusText[]  = "Records exported:  ";
@localize "shows num recs exported in the prog DB";

/* strings in fld_mtds.goc */
@chunk char DelDataMsg[] = "Do you wish to delete the data from the eliminated field(s)?";
@localize "Delete data question when reducing # of fields";
@chunk char TypeWarnMsg1[] = "Are you sure you want to change ";
@chunk char TypeWarnMsg2S[] = "this field type";
@chunk char TypeWarnMsg2P[] = "these field types";
@chunk char TypeWarnMsg3[] = "?  If you do, any text you have entered in the ";
@chunk char TypeWarnMsg4_1[] = "field \"";
@chunk char TypeWarnMsg4_2F[] = "fields \"";
@chunk char TypeWarnMsg4_2A[] = "\" and \"";
@chunk char TypeWarnMsg4_3F[] = "fields ";
@chunk char TypeWarnMsg4_3Q[] = "\"";
@chunk char TypeWarnMsg4_3CQ[] = ", \"";
@chunk char TypeWarnMsg4_3A[] = " and \"";
@chunk char TypeWarnMsg5[] = "\" of all the records in this database will be converted to other data types. Some of this text may not be of a type that can be converted, in which case those field entries will be left blank.";

/* strings in srt_mtds.goc */
@chunk char NumNotConvMsg[] = "At least one number would not sort properly.";
@localize "Message when at least one num wouldn't convert";

/* strings in rpt_mtds.goc */
@chunk char TotalString[] = "Total of... ";
@localize "header for totals of fields (if selected)";
@chunk char IsString[] = " is:\t";
@localize "follows field name in totals section";

@chunk char f1Str[] = "Field 1";
@localize "default field name";
@chunk char f2Str[] = "Field 2";
@localize "default field name";
@chunk char f3Str[] = "Field 3";
@localize "default field name";
@chunk char f4Str[] = "Field 4";
@localize "default field name";
@chunk char f5Str[] = "Field 5";
@localize "default field name";
@chunk char f6Str[] = "Field 6";
@localize "default field name";
@chunk char f7Str[] = "Field 7";
@localize "default field name";
@chunk char f8Str[] = "Field 8";
@localize "default field name";
@chunk char f9Str[] = "Field 9";
@localize "default field name";
@chunk char f10Str[] = "Field 10";
@localize "default field name";

/* strings in fld_mtds.goc */
@chunk char noneStr[] = "(None)";
@localize "(none) field name displayed on Sort dialog box.";

/* Quick Help strings */
@chunk char NextButtonHelp[] = "Display the next record in your database";
@localize "Quick Help for Next button";
@chunk char PrevButtonHelp[] = "Display the previous record in your database";
@localize "Quick Help for Previous button";
@chunk char FirstButtonHelp[] = "Display the first record in your database";
@localize "Quick Help for First button";
@chunk char LastButtonHelp[] = "Display the last record in your database";
@localize "Quick Help for Last button";
@chunk char CreateButtonHelp[] = "Create a new record in your database";
@localize "Quick Help for Create button";
@chunk char DeleteButtonHelp[] = "Delete this record from the current database";
@localize "Quick Help for Delete button";
@chunk char FindButtonHelp[] = "Find a record in your database";
@localize "Quick Help for Find button";

/* Quick Diabled Help strings */
@chunk char LastButtonDisabledHelp[] = "The last record is already displayed";
@localize "Quick Disabled Help for Last button";
@chunk char NextButtonDisabledHelp[] = "There is no next record to display";
@localize "Quick Disabled Help for Next button";
@chunk char FirstButtonDisabledHelp[] = "The first record is already displayed";
@localize "Quick Disabled Help for First button";
@chunk char PrevButtonDisabledHelp[] = "There is no previous record to display";
@localize "Quick Disabled Help for Previous button";
@chunk char FindButtonDisabledHelp[] = "There are no records to search";
@localize "Quick Disabled Help for Find button";
@chunk char DeleteButtonDisabledHelp[] = "There is no record to delete";
@localize "Quick Disabled Help for Delete button";


@end TextStrings;
