@include <StdApp.goh>
@include "newsread.goh"
@include "extern.goh"
@include "Localize/strings.goh"
@include "UIClass/statdiag.goh"
@include "options.goh"
@include "errors.goh"
#include "news.h"
@include "newsdata.goh"
@include <INetMsg/ADL.goh>

MemHandle G_saveFilesList = 0 ;
word G_saveFilesCount = 0 ;

extern byte G_data[1024] ;
extern byte G_mainListLevel;
extern word G_mainListPath[] ;
extern word G_mainListMessage ;


@extern method NewsProcessClass, MSG_NP_SAVE_FILES_EXTRACT_FILE_LIST {

    /* parse the message and create list of attachments */
    dword bodyLines, headerLines ;
    Boolean header = TRUE ;
    Boolean newPart = TRUE ;

    dword loopCount = 0 ;

    ADHandle adhandle ;
    ADError adstat ;
    ADState adstate ;

    bodyLines = BucketHugeArrayGetCount(
                        G_databaseVMFH, G_article->AE_body) ;
    headerLines = BucketHugeArrayGetCount(
                            G_databaseVMFH, G_article->AE_headers) ;

    /* init the ADL object */
    adhandle = ADCreate(&adstat) ;

    if(adstat == ADE_NO_ERROR) {

        /* loop passing the lines trought */
        loopCount = 0 ;
        while(header ? 
                (loopCount < headerLines) :
                (loopCount < (bodyLines + 1)) ) {

            byte *elemPtr ;
            word elemSize ;

            /* put one line into the machine */
            if(header) {

                /* lock the line */
                BucketHugeArrayLock(
                            G_databaseVMFH,
                            G_article->AE_headers,
                            loopCount,
                            &elemPtr,
                            &elemSize) ;
                
                /* put the line */
                adstat = ADPutLine(
                            adhandle, (TCHAR *) elemPtr, 
                            G_data, &adstate, ADPLF_DECODE) ;

                BucketHugeArrayUnlock(elemPtr) ;

            } else {
            
                /* if send read body */
                if(loopCount) {

                    /* lock the line */
                    BucketHugeArrayLock(
                                G_databaseVMFH,
                                G_article->AE_body,
                                loopCount - 1,
                                &elemPtr,
                                &elemSize) ;

                    /* put the line */
                    adstat = ADPutLine(
                                adhandle, (TCHAR *) elemPtr, 
                                G_data, &adstate, ADPLF_DECODE) ;

                    BucketHugeArrayUnlock(elemPtr) ;

                } else {

                    TCHAR nullString ;
                
                    nullString = 0 ;

                    /* send header separator */
                    adstat = ADPutLine(
                                adhandle, &nullString, 
                                G_data, &adstate, ADPLF_DECODE) ;

                }
            }

            if(adstat == ADE_NO_ERROR) {

                if(adstate.ADS_flags & ADSF_NEW) {
                
                    /* we have a new part in any way */
                    newPart = TRUE ;
                }
            
                /* add decoded data if no file name is attached */
                /* if mime and "text/plain" or none mime and level 0 */
                if(adstate.ADS_length) {

                    MemHandle dataBlock ;

                    dataBlock = ADGetVar(adhandle, ADV_FILENAME +
                                                adstate.ADS_lev, 0) ;

                    /* decide if the next part is text or not */
                    if(dataBlock) {
                
                        FileLongName *p_filesList ;

                        /* add to filename list */
                        if(G_saveFilesList) {
                        
                            int result ;

                            p_filesList = MemLock(G_saveFilesList) ;
                            result = strcmp(p_filesList, MemDeref(dataBlock)) ;
                            MemUnlock(G_saveFilesList) ;

                            if(result || newPart) {

                                G_saveFilesCount++ ;
                                G_saveFilesList = MemReAlloc(G_saveFilesList, sizeof(FileLongName) * G_saveFilesCount, 0) ;
                            }

                        } else {

                            G_saveFilesCount = 1 ;
                            G_saveFilesList = MemAlloc(sizeof(FileLongName) * G_saveFilesCount, HF_SWAPABLE, 0) ;
                        }

                        p_filesList = MemLock(G_saveFilesList) ;
                        strcpy(p_filesList[G_saveFilesCount - 1], MemDeref(dataBlock)) ;
                        MemUnlock(G_saveFilesList) ;

                        MemFree(dataBlock) ;

                        newPart = FALSE ;

                    } else {

                        if(adstate.ADS_flags & ADSF_MIME) {

                            dataBlock = ADGetVar(adhandle, ADV_CONTENT_TYPE +
                                                        adstate.ADS_lev, 0) ;
                
                            if(dataBlock) {
                        
                                FileLongName *p_filesList ;

                                if(LocalCmpStringsNoCase(
                                        MemDeref(dataBlock),
                                        "text/plain",
                                        10)) {
                        
                                    /* no text add a unnamed item */
                                    if(G_saveFilesList) {
                        
                                        int result ;

                                        p_filesList = MemLock(G_saveFilesList) ;
                                        result = strcmp(p_filesList, MemDeref(dataBlock)) ;
                                        MemUnlock(G_saveFilesList) ;

                                        if(result || newPart) {

                                            G_saveFilesCount++ ;
                                            G_saveFilesList = MemReAlloc(G_saveFilesList, sizeof(FileLongName) * G_saveFilesCount, 0) ;
                                        }
                        
                                    } else {

                                        G_saveFilesCount = 1 ;
                                        G_saveFilesList = MemAlloc(sizeof(FileLongName) * G_saveFilesCount, HF_SWAPABLE, 0) ;
                                    }

                                    p_filesList = MemLock(G_saveFilesList) ;
                                    strcpy(p_filesList[G_saveFilesCount - 1], "UNNAMED.DAT") ;
                                    MemUnlock(G_saveFilesList) ;
                                
                                    newPart = FALSE ;
                                }
  
                                MemFree(dataBlock) ;
                            }
                        } 
                    }
                
                }
            
            } else {
                            
                goto errorEnd ;
            }

            /* finish up handling this line */
            loopCount++ ;

            if(header && (loopCount == headerLines)) {
        
                header = FALSE ;
                loopCount = 0 ;
            }
        }

    errorEnd:
    
        ADDestroy(adhandle) ;
    }
} 

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_EXTRACT_FILE {

    /* parse the message and create list of attachments */
    dword bodyLines, headerLines ;
    Boolean header = TRUE ;
    Boolean newPart = TRUE ;
    word fileCount = 0, listCount = 0 ;
    dword loopCount = 0 ;

    ADHandle adhandle ;
    ADError adstat ;
    ADState adstate ;

    FileHandle currentFile = 0 ;

    bodyLines = BucketHugeArrayGetCount(
                        G_databaseVMFH, G_article->AE_body) ;
    headerLines = BucketHugeArrayGetCount(
                            G_databaseVMFH, G_article->AE_headers) ;

    /* init the ADL object */
    adhandle = ADCreate(&adstat) ;

    if(adstat == ADE_NO_ERROR) {

        /* loop passing the lines trought */
        loopCount = 0 ;
        while(header ? 
                (loopCount < headerLines) :
                (loopCount < (bodyLines + 1)) ) {

            byte *elemPtr ;
            word elemSize ;

            /* put one line into the machine */
            if(header) {

                /* lock the line */
                BucketHugeArrayLock(
                            G_databaseVMFH,
                            G_article->AE_headers,
                            loopCount,
                            &elemPtr,
                            &elemSize) ;
                
                /* put the line */
                adstat = ADPutLine(
                            adhandle, (TCHAR *) elemPtr, 
                            G_data, &adstate, ADPLF_DECODE) ;

                BucketHugeArrayUnlock(elemPtr) ;

            } else {
            
                /* if send read body */
                if(loopCount) {

                    /* lock the line */
                    BucketHugeArrayLock(
                                G_databaseVMFH,
                                G_article->AE_body,
                                loopCount - 1,
                                &elemPtr,
                                &elemSize) ;

                    /* put the line */
                    adstat = ADPutLine(
                                adhandle, (TCHAR *) elemPtr, 
                                G_data, &adstate, ADPLF_DECODE) ;

                    BucketHugeArrayUnlock(elemPtr) ;

                } else {

                    TCHAR nullString ;
                
                    nullString = 0 ;

                    /* send header separator */
                    adstat = ADPutLine(
                                adhandle, &nullString, 
                                G_data, &adstate, ADPLF_DECODE) ;

                }
            }

            if(adstat == ADE_NO_ERROR) {

                if(adstate.ADS_flags & ADSF_NEW) {
                
                    /* we have a new part in any way */
                    newPart = TRUE ;
                }
            
                /* add decoded data if no file name is attached */
                /* if mime and "text/plain" or none mime and level 0 */
                if(adstate.ADS_length) {

                    MemHandle dataBlock ;

                    dataBlock = ADGetVar(adhandle, ADV_FILENAME +
                                                adstate.ADS_lev, 0) ;

                    /* decide if the next part is text or not */
                    if(dataBlock) {
                
                        FileLongName *p_filesList ;
                        int result ;

                        /* add to filename list */
                        p_filesList = MemLock(G_saveFilesList) ;
                        result = strcmp(p_filesList, MemDeref(dataBlock)) ;
                        MemUnlock(G_saveFilesList) ;

                        if(result || newPart) {

                            fileCount++ ;

                            /* is there an pending open file */
                            if(currentFile) {
                        
                                /* close this file */
                                FileClose(currentFile, 0) ;
                                currentFile = 0 ;

                                /* remove it from the list */
                            }
                        }

                        p_filesList = MemLock(G_saveFilesList) ;


                        /* if the current file is selected */
                        if(fileList[listCount] == (fileCount - 1)) {
                        
                            /* create it */
                            currentFile = FileCreate(
                                                p_filesList[fileCount - 1], 
                                                FCF_NATIVE | FILE_ACCESS_W | FILE_DENY_RW,
                                                0) ;

                            listCount++ ;
                        }

                        MemUnlock(G_saveFilesList) ;

                        MemFree(dataBlock) ;

                        newPart = FALSE ;

                    } else {

                        if(adstate.ADS_flags & ADSF_MIME) {

                            dataBlock = ADGetVar(adhandle, ADV_CONTENT_TYPE +
                                                        adstate.ADS_lev, 0) ;
                
                            if(dataBlock) {
                        
                                FileLongName *p_filesList ;

                                if(LocalCmpStringsNoCase(
                                        MemDeref(dataBlock),
                                        "text/plain",
                                        10)) {
                        
                    
                                    int result ;

                                    p_filesList = MemLock(G_saveFilesList) ;
                                    result = strcmp(p_filesList, MemDeref(dataBlock)) ;
                                    MemUnlock(G_saveFilesList) ;

                                    if(result || newPart) {

                                        fileCount++ ;

                                        /* is there an pending open file */
                                        if(currentFile) {
                    
                                            /* close this file */
                                            FileClose(currentFile, 0) ;
                                            currentFile = 0 ;

                                            /* remove it from the list */
                                        }
                                    }
                        
                                    p_filesList = MemLock(G_saveFilesList) ;

                                    /* if the current file is selected */
                                    if(fileList[listCount] == (fileCount - 1)) {
                    
                                        /* create it */
                                        currentFile = FileCreate(
                                                p_filesList[fileCount - 1], 
                                                FCF_NATIVE | FILE_ACCESS_W | FILE_DENY_RW,
                                                0) ;

                                        listCount++ ;
                                    }

                                    MemUnlock(G_saveFilesList) ;
                                
                                    newPart = FALSE ;
                                }
  
                                MemFree(dataBlock) ;
                            }
                        } 
                    }
                
                    /* if we have a file */
                    if(currentFile) {
                    
                        FileWrite(currentFile, G_data, adstate.ADS_length, 0) ;
                    }
                
                } else {

                    if(newPart) {

                        /* is there an pending open file */
                        if(currentFile) {
                    
                            /* close this file */
                            FileClose(currentFile, 0) ;
                            currentFile = 0 ;

                            /* remove it from the list */
                        }
                    }
                }
            
            } else {
                            
                goto errorEnd ;
            }

            /* finish up handling this line */
            loopCount++ ;

            if(header && (loopCount == headerLines)) {
        
                header = FALSE ;
                loopCount = 0 ;
            }
        }

    errorEnd:
    
        /* is there an pending open file */
        if(currentFile) {

            /* close this file */
            FileClose(currentFile, 0) ;
            currentFile = 0 ;

            /* remove it from the list */
        }

        ADDestroy(adhandle) ;
    }

    return(FALSE) ;
}

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_OPEN {

    if(G_mainListLevel && (G_mainListMessage != 0xFFFF)) {

        if(G_mainListLevel == 1) {

            NewsDataSelectGroup(G_mainListPath[0]) ;
            NewsDataGroupSelectThread(G_mainListMessage - 1) ;
            NewsDataThreadSelectArticle(0) ;
        
        } else {

            NewsDataSelectGroup(G_mainListPath[0]) ;
            NewsDataGroupSelectThread(G_mainListPath[1]) ;
            NewsDataThreadSelectArticle(G_mainListMessage - 1) ;
        }

        @call NewsApp::MSG_GEN_APPLICATION_MARK_BUSY() ;

        @send SaveFilesSelector::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send SaveFilesSelectorDummy::MSG_GEN_SET_USABLE(VUM_NOW) ;

        @send SaveFilesDialog::MSG_GEN_INTERACTION_INITIATE() ;

        @call oself::MSG_NP_SAVE_FILES_EXTRACT_FILE_LIST() ;

        @call NewsApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;

        /* init attachemt selector */
        @call SaveFilesSelector::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_saveFilesCount) ;
        @send SaveFilesSelectorDummy::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send SaveFilesSelector::MSG_GEN_SET_USABLE(VUM_NOW) ;

        NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
        NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
        NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;

        /* if we have one file only */
        if(G_saveFilesCount == 1) {
        
            /* select the file for immediate saving */
            @send SaveFilesSelector::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE) ;
            @send oself::MSG_NP_SAVE_FILES_APPLY_SELECTION(0, 1, 0) ;

        } else {

            @send oself::MSG_NP_SAVE_FILES_APPLY_SELECTION(0xFFFF, 0, 0) ;
        }
    }
}

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_CLOSE {

    @call SaveFilesSelector::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ;

    if(G_saveFilesList) {
    
        MemFree(G_saveFilesList) ;
        G_saveFilesList = 0 ;
        G_saveFilesCount = 0 ;
    }
}

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_MONIKER_QUERY {

    if((item < G_saveFilesCount) && G_saveFilesList) {
    
        FileLongName *p_fileList ;

        p_fileList = MemLock(G_saveFilesList) ;
        @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, p_fileList[item]) ;
        MemUnlock(G_saveFilesList) ;
    }
}

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_SAVE {

    word fileCount, fileCount2 ;
    MemHandle fileList ;
    FileLongName name ;
    PathName storagePath ;
    DiskHandle storageDisk ;

    @call SaveFilesNameEntry::MSG_VIS_TEXT_GET_ALL_PTR(name) ;

    /* save the selected files */
    fileCount = @call SaveFilesSelector::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS() ;
    fileCount2 = fileCount ;

    if(fileCount) {

        fileList = MemAlloc(sizeof(word) * fileCount, HF_SWAPABLE, 0) ;

        if(fileList) {

            word *p_fileList = MemLock(fileList) ;

            @call SaveFilesSelector::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(p_fileList, fileCount) ;

            if(G_mainListLevel && (G_mainListMessage != 0xFFFF)) {

                word count1, count2 ;

                if(G_mainListLevel == 1) {

                    NewsDataSelectGroup(G_mainListPath[0]) ;
                    NewsDataGroupSelectThread(G_mainListMessage - 1) ;
                    NewsDataThreadSelectArticle(0) ;
        
                } else {

                    NewsDataSelectGroup(G_mainListPath[0]) ;
                    NewsDataGroupSelectThread(G_mainListPath[1]) ;
                    NewsDataThreadSelectArticle(G_mainListMessage - 1) ;
                }

                /* sort selection list */
                count1 = 0 ;
                while(count1 < fileCount) {
                
                    count2 = 0 ;
                    while(count2 < fileCount) {
                    
                        if(p_fileList[count1] < p_fileList[count2]) {
                        
                            word temp ;

                            temp = p_fileList[count1] ;
                            p_fileList[count1] = p_fileList[count2] ;
                            p_fileList[count2] = temp ;
                        }

                        count2++ ;
                    }

                    count1++ ;
                }

                /* set the storage path */
                FilePushDir() ;
                
                storageDisk = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(
                                    @call SaveFilesDestination::
                                            MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(storagePath)) ;
    
                if(FileSetCurrentPath(storageDisk, storagePath)) {

                    @call oself::MSG_NP_SAVE_FILES_EXTRACT_FILE(p_fileList, name, &fileCount) ;
                }

                /* restore path */
                FilePopDir() ;

                NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
                NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
                NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;
            }

            if(fileCount) {
    
                /* mark the remaining files */
                @call SaveFilesSelector::
                            MSG_GEN_ITEM_GROUP_SET_MULTIPLE_SELECTIONS(p_fileList, fileCount) ;

                /* not all files saved */
                if(fileCount2 != 1) {

                    NotifyMessage(@SaveFilesMultipleError) ;
                
                } else {

                    NotifyMessage(@SaveFilesSingleError) ;
                }

            } else {
    
                /* everything saved successfully */
                NotifyMessage(@SavingFinishedText) ;
            }

            MemFree(fileList) ;
        }
    }
}

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_APPLY_SELECTION {

    /* selection state changed */
    if(numSelections == 1) {
    
        @call SaveFilesNameEntry::MSG_GEN_SET_ENABLED(VUM_NOW) ;
        @call SaveFilesNameEntry::MSG_VIS_TEXT_REPLACE_ALL_PTR("NAME", 0) ;
    
    } else {
    
        @call SaveFilesNameEntry::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
        @call SaveFilesNameEntry::MSG_VIS_TEXT_DELETE_ALL() ;
    }

    if(numSelections) {

        @send SaveFilesSaveTrigger::MSG_GEN_SET_ENABLED(VUM_NOW) ;
    
    } else {

        @send SaveFilesSaveTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
    }
}
