@include <stdapp.goh>
@include <socket.goh>

@include "utils.goh"
#include <ansi/string.h>
#include <ansi/stdlib.h>
#include <ansi/stdio.h>
#include <sockmisc.h>

@include "newsread.goh"
@include "extern.goh"
@include "Localize/strings.goh"
@include "UIClass/statdiag.goh"
@include "options.goh"
#include "news.h"
#include "newssock.h"
@include "newsdata.goh"

/**********************************************************************
 * Globals                                                            *
 **********************************************************************/

extern NewsgroupEntry *G_group ;
extern Socket NewsSocket;
extern MemHandle G_socketData ;
#define NEWS_SOCKET_BUFFER_SIZE         4000
extern word G_socketDataPos ;
extern word G_socketDataLen ;
extern char TCPDomain[] ;
#define TCP_DOMAIN_LEN  5
/* FR */
#define SGETC_LONG_TIMEOUT  (60*60)
#define QUICK_TIMEOUT       (0)
extern word sgetc(void) ;
extern ResolvedTCPAddress   G_hostaddr ;
extern void sputs(char *line);
extern Boolean HeaderLineCanBeAdded(char *buffer) ;


/**********************************************************************
 * Internal Functions                                                 *
 **********************************************************************/

Boolean
ICheckForAuthorizationRequest(TCHAR *buf);

Boolean 
ISendAuthorization(char *lineBuf);

Boolean GetHeadersWithXOver(byte *lineBuf, NewsgroupEntry *p_group, dword start, 
							dword numToGet, dword *p_messages, 
							Boolean *isCancelled);
void GetHeadersWithHead(byte *lineBuf, NewsgroupEntry *p_group, dword pos, 
						dword numToGet, dword *p_messages, 
						Boolean *isCancelled);

long atol(const char **s)
{
	long retval = 0;

    while (**s >= '0' && **s <= '9') {
        retval *= 10;
        retval += (**s - '0');
        (*s)++;
    }
	return retval;
}

/*-------------------------------------------------------------------------
 | Routine:  GetNewMessages
 *-------------------------------------------------------------------------
 |
 | Description:
 |    See if there are any new messages in a given group from the server.
 |
 | Inputs:
 |    byte *lineBuf               -- Buffer to store line data
 |    word groupNum               -- Group (in subscribed list) to get msgs
 |    Boolean *isCancelled        -- Returned value of user cancelling
 |
 | Outputs:
 |    dword                       -- Number of messages found.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |    LES  11/10/98  Modified to use new database
 |
 *-----------------------------------------------------------------------*/
dword GetNewMessages(byte *lineBuf, word groupNum, Boolean *isCancelled)
{
    NewsgroupEntry *p_group = NULL ;
    word result ;
    dword first = 0, last = 0, start, numToGet;
    char *buffer, number[10], *find;
//    dword lastHead = 0 ;
//    word numAhead = 10 ;
    Boolean retry ;
    dword /*estimate = 0, */messages = 0;

    NewsDataSelectGroup(groupNum) ;

    *isCancelled = FALSE ;

    /* Send out a request to switch to this group */
    p_group = NewsDataGroupLock(groupNum) ;

    do {
    
        retry = FALSE ;

        sprintf((TCHAR *) lineBuf, "GROUP %s\r\n", (TCHAR *) p_group->NE_groupName);
        sputs((char *)lineBuf);

        /* Get the response */
        buffer = sgets((char *) lineBuf);
    
        if(!buffer)
            break;

        if(ICheckForAuthorizationRequest(buffer)) {
            
            if(ISendAuthorization((char*)lineBuf)) {
                
                *isCancelled  = TRUE ;

                break;
            }

            retry = TRUE;
        }


    } while(retry) ;

#ifdef COMPILE_OPTION_DEBUG_WINDOW
    /* Show the response */
    @call DebugText::MSG_VIS_TEXT_APPEND_PTR(buffer, 0);
    @call DebugText::MSG_VIS_TEXT_APPEND_PTR("\r", 0);
#endif

    /* What is the number of the code? */
    if (buffer)  {
        strncpy(number, buffer, 3);
        number[3] = 0;
        result = atoi(number);
    }

    /* If 211 or we didn't bet a buffer, quit */
    if ((result != 211) || (buffer == NULL)) {
        /* Check for a no such group error msg */
        ErrorMessage(@ErrorNoSuchGroup);
        messages = 0 ;
    } else {
        /* Parse the return answer */
        find = buffer + 3;
        
        while (isspace(*find)) {
            find++;
        }
        
		/*estimate = */atol(&find);

        while (isspace(*find)) {
            find++;
        }

        /* Convert to a long (get first numbered message) */
		first = atol(&find);

        while (isspace(*find)) {
            find++;
        }

        /* Convert next one to a long (get last numbered message) */
		last = atol(&find);

#ifdef COMPILE_OPTION_DEBUG_WINDOW
        /* Output what the range of numbers are and what we have in our */
        /* database */
        sprintf(buffer, "First: %lu  Last: %lu  Last Read: %lu\r",
              first, last, p_group->NE_lastRead);
        @call DebugText::MSG_VIS_TEXT_APPEND_PTR(buffer, 0);
#endif

      /* Start at the last point we read, or at the whole beginning */
      if (first > p_group->NE_lastRead) {
          start = first;
      } else {
          start = p_group->NE_lastRead + 1;
      }

      /* See if there is any we need */
      if (last <= p_group->NE_lastRead) {
          
            messages = 0 ;
            ErrorMessage(@NoNewsOnTheServerError) ;
      
      } else {
            
            /* Make each entry marked as unread */
            NewsDataGroupDirty(p_group);

            /* Go through the list counting how many we have left */
            numToGet = last - start + 1;

            /* check how much we want */
            if(numToGet) {

		if(@call process::MSG_NP_DETERMINE_DOWNLOAD_COUNT(
		    &numToGet, p_group->NE_groupName, 0)) {

                    start = last - numToGet + 1 ;


                    @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TITLE_OPTR(
                            @DownloadStatusNewMessages) ;
                    @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR("") ;
                    @send DownloadGroupsDialog::MSG_STATUS_DIALOG_OPEN(
                                            TRUE, TRUE, G_group->NE_groupName, TRUE) ;

                    /* Update the status */
		            MemLock(OptrToHandle(@HeaderDownloadStatus));
                    sprintf((TCHAR*)lineBuf, (TCHAR*)LMemDeref(@HeaderDownloadStatus), 
						(dword) 0);
			        MemUnlock(OptrToHandle(@HeaderDownloadStatus));

                    @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR((TCHAR*)lineBuf) ;
                    @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_PROGRESS(0) ;

					/* Try using XOVER to retrieve the header data */
					if (!GetHeadersWithXOver(lineBuf, p_group, start, numToGet,
						&messages, isCancelled))

						/* Failing that, use the old HEAD method. */
						GetHeadersWithHead(lineBuf, p_group, start, numToGet,
							&messages, isCancelled);
                
	            }
            } else {
            
                /* no new message there */
                messages = 0 ;
                ErrorMessage(@NoNewsOnTheServerError) ;
            }
      }
  }

  @call DownloadGroupsDialog::MSG_STATUS_DIALOG_CLOSE() ;

  if (p_group)
      NewsDataGroupUnlock(p_group) ;

  NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;

  return(messages);
}

/*-------------------------------------------------------------------------
 | Routine:  GetHeadersTestAndReportGroupFull
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Test if the current group is full, and display a warning dialog if so.
 |
 | Inputs:
 |    none
 |
 | Outputs:
 |    TRUE if group is full, otherwise false.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/12/2000 Created
 |
 *-----------------------------------------------------------------------*/
Boolean GetHeadersTestAndReportGroupFull(void)
{
	if (NewsDataGroupCountArticles() >= MAX_ARTICLES_PER_GROUP)
	{
		UserStandardDialogOptr(NULL, NULL, NullHandle, 
			NullHandle, @NewsGroupFull,
			(CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
		return TRUE;
	}
	return FALSE;
}

/*-------------------------------------------------------------------------
 | Routine:  GetHeadersWithXOver
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Use the XOVER command to retrieve header data from an article range.
 |
 | Inputs:
 |    byte *lineBuf               -- Buffer to store line data
 |    p_group                     -- Group (in subscribed list) to get msgs
 |    start                       -- Article number with which to start
 |    numToGet                    -- Total number of article numbers in range
 |    p_messages                  -- Number of headers actually retrieved
 |									 (sometimes less than size of range)
 |    Boolean *isCancelled        -- Returned value of user cancelling
 |
 | Outputs:
 |    FALSE if server rejected the command, otherwise TRUE.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/12/2000 Created
 |
 *-----------------------------------------------------------------------*/
Boolean GetHeadersWithXOver(byte *lineBuf, NewsgroupEntry *p_group, dword start, 
							dword numToGet, dword *p_messages, Boolean *isCancelled)
{
    ArticleEntry article;
	char *buffer, fieldEnd;
	dword count, end = start + numToGet - 1, pos, lastStatusCount = 0;
    static char headers[5][13] = {
        "Subject: ",
        "From: ",
        "Date: ",
        "Message-ID: ",
        "References: ",
    } ;
	int idx_header;

	/* Send the best NNTP extension ever conceived. */
    sprintf((TCHAR*)lineBuf, "XOVER %lu-%lu\r\n", start, end);
	sputs((char *)lineBuf);

    /* Get the response for the header */
    buffer = (char*)sgets((char*)lineBuf);

    if (buffer != NULL) {

	    /* Anything other than a 2xx response means failure */
	    if (buffer[0] != '2')
			return FALSE;

		do {
			/* If user cancelled, stop here */
			if (@call DownloadGroupsDialog::MSG_STATUS_DIALOG_IS_CANCELLED())  {
				*isCancelled = TRUE ;
			}
			
			/* If the group is full, stop here. */
			if (*isCancelled || GetHeadersTestAndReportGroupFull())
			{
				/* disconnect/cancel the connection */
				DisconnectFromServer(FALSE);
				break ;
			}

			/* Get the article number */
			if ((buffer = sgetfield((char *)lineBuf, &fieldEnd)) != NULL
				&& fieldEnd == '\t')
			{
				/* Create the article to store the header */
				NewsDataInitArticle(&article) ;
				pos = article.AE_messageId = atol(&buffer);

				/* Read all of the header fields. */
				idx_header = 0;
				while ((buffer = sgetfield((char *)lineBuf, &fieldEnd)) != NULL
					&& fieldEnd != '\n')
				{
					if (idx_header >= 0)
					{
						BucketHugeArrayAppend(
							G_databaseVMFH,
							article.AE_headers,
							strlen(headers[idx_header]),
							headers[idx_header]);
						BucketHugeArrayAppend(
							G_databaseVMFH,
							article.AE_headers,
							strlen(buffer) + 1,
							buffer);

						/* Read only the headers we care about. */
						if ((++idx_header) == 5)
							idx_header = -1;
					}
				}

				/* Add the message to the database */
				if (buffer != NULL)
				{
					/* Note we now have one more article */
					if (NewsDataStoreArticle(&article))
					{
						(*p_messages)++;
						p_group->NE_lastRead = pos;
						NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
					}

					/* Update the status. */
					/* Try to limit updates to every ten headers. */
					count = pos - start + 1;
					if (count - lastStatusCount >= 10)
					{
						lastStatusCount = (count / 10) * 10;

						MemLock(OptrToHandle(@HeaderDownloadStatus));
						sprintf((TCHAR*)lineBuf, 
							(TCHAR*)LMemDeref(@HeaderDownloadStatus), 
							(count * 100) / numToGet);
						MemUnlock(OptrToHandle(@HeaderDownloadStatus));

						@call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR(
							(TCHAR*)lineBuf) ;
						@call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_PROGRESS(
							(count * 100) / numToGet) ; 
					}
				}
			}
		} while (buffer != NULL && lineBuf[0] != '.');
	}

	if (buffer == NULL)
	{
		ErrorMessage(@ErrorConnectionLost);
        (*isCancelled) = TRUE ;
    }
	
	return TRUE;
}

/*-------------------------------------------------------------------------
 | Routine:  GetHeadersWithHead
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Use the HEAD command to retrieve header data from an article range.
 |
 | Inputs:
 |    byte *lineBuf               -- Buffer to store line data
 |    p_group                     -- Group (in subscribed list) to get msgs
 |    start                       -- Article number with which to start
 |    numToGet                    -- Total number of article numbers in range
 |    p_messages                  -- Number of headers actually retrieved
 |									 (sometimes less than size of range)
 |    Boolean *isCancelled        -- Returned value of user cancelling
 |
 | Outputs:
 |    nothing
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/12/2000 Extracted from GetNewMessages
 |
 *-----------------------------------------------------------------------*/
void GetHeadersWithHead(byte *lineBuf, NewsgroupEntry *p_group, dword pos, 
						dword numToGet, dword *p_messages, Boolean *isCancelled)
{
    ArticleEntry article;
    Boolean errorAbort = FALSE;
	char *buffer;
	dword count, last = pos + numToGet - 1;

    for (count = 0; pos <= last; pos++) {

		/* If user cancelled, stop here */
		if (@call DownloadGroupsDialog::MSG_STATUS_DIALOG_IS_CANCELLED())  {
			*isCancelled = TRUE ;
		}
		
		/* If the group is full, stop here. */
		if (*isCancelled || GetHeadersTestAndReportGroupFull())
		{
			/* disconnect/cancel the connection */
			DisconnectFromServer(FALSE);
			break ;
		}

        sprintf((TCHAR*)lineBuf, "HEAD %lu\r\n", pos);
        sputs((char*)lineBuf);

        /* Get the response for the header */
        buffer = (char*)sgets((char*)lineBuf);
    
        if (buffer == NULL) {
        
            ErrorMessage(@ErrorConnectionLost);
            (*isCancelled) = TRUE ;
            break ;
        }

        /* All 4xx responses mean we are done */
        if (buffer[0] == '4') {
      
            p_group->NE_lastRead = pos;
//			continue; // fall-thru to update status even if no header -dhunter 2/10/2000
  
        } else {
        
            /* Now let's get the header information */

            /* Create the article to store the header */
            NewsDataInitArticle(&article) ;
            article.AE_messageId = pos;

            while (1) {
            
                /* Keep reading lines until we get a line */
                /* starting with a period. */
                buffer = (char*) sgets((char*)lineBuf);
            
                if (buffer == NULL)  {
              
                    /* No data! */
                    ErrorMessage(@ErrorConnectionLost);
                    errorAbort = TRUE;
                    (*isCancelled) = TRUE ;
                    break ;
                }

                if (strcmp(buffer, ".") == 0) {
              
                    /* Found the end.  We're done. */
                    /* Add the message to the database */

                    /* Note we now have one more article */
                    if (NewsDataStoreArticle(&article))
					{
						(*p_messages)++;
						p_group->NE_lastRead = pos;
	                    NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
					}

                    break;

                } else {

                    /* Keep appending the header text */
                    BucketHugeArrayAppend(
                        G_databaseVMFH,
                        article.AE_headers,
                        strlen(buffer) + 1,
                        buffer);
                }
            }

            if(errorAbort)
                break;

//			if(messages > estimate) {
//
//				estimate++ ;
//			}
        }

        /* Update the status */
		count ++;
        MemLock(OptrToHandle(@HeaderDownloadStatus));
        sprintf((TCHAR*)lineBuf, (TCHAR*)LMemDeref(@HeaderDownloadStatus), 
                (count * 100) / numToGet);
        MemUnlock(OptrToHandle(@HeaderDownloadStatus));

        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR((TCHAR*)lineBuf) ;
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_PROGRESS((count * 100) / numToGet) ; 
		// was (((messages + 1) * 100) / numToGet)  - dhunter 2/10/2000
    }
}

/*************************************************************************/

Boolean GetMessageBodyDirectly(
        NewsgroupEntry *p_group,
        ArticleEntry *p_article,
        char *lineBuf)
{
    char *p_line = NULL;
    Boolean error = TRUE ;
    Boolean retry ;

    /* Select the right group */
    do {
    
        retry = FALSE;
    
        sprintf(lineBuf, "GROUP %s\r\n", p_group->NE_groupName);
        sputs(lineBuf);

        p_line = sgets(lineBuf);

        if(!p_line)
            break ;

        if(ICheckForAuthorizationRequest(p_line)) {
            
            if(ISendAuthorization(lineBuf)) {
				
                break ;
            }

            retry = TRUE ;
        }


    } while(retry) ;

    /* Get the return value and check for an error */
    if ((!p_line) || (atoi(p_line) != 211))  {
        ErrorMessage(@ErrorNoSuchGroup);
    } else {
        /* Ok, selected newsgroup */
        /* Request the body */
#ifdef COMPILE_OPTION_DEBUG_WINDOW
        @call DebugText::MSG_VIS_TEXT_APPEND_PTR(output, 0);
#endif

        do {

            retry = FALSE ;

            sprintf(lineBuf, "BODY %lu\r\n", p_article->AE_messageId);
            sputs(lineBuf);
        
            p_line = sgets(lineBuf);

            if(!p_line)
                break ;

            if(ICheckForAuthorizationRequest(p_line)) {
                
                if(ISendAuthorization(lineBuf)) {
                    break ; 
                }

                retry = TRUE ;
            }

        } while(retry) ;

        /* If we got nothing, we lost connection (or timed out) */
        if (p_line == NULL)   {
            ErrorMessage(@ErrorConnectionLost);

        } else {

            /* If we got a 4xx message, that's it we quit */
            /* Otherwise go on */
            if (p_line[0] != '4') {
                /* Ok, everything fine to actually get the body of the text */
                while (1) {
                    /* Get the data line by line */
                    /* stopping on a period. */
                    p_line = sgets(lineBuf);

                    if(!p_line)
                        break;

                    if (strcmp(p_line, ".") == 0) {
                    
                        break;
                
                    } else  {
                    
			/*
			 * convert the text from ISO 8859-1
			 */
			LocalCodePageToGeos(p_line, 0, CODE_PAGE_LATIN_1, '.');

                        /* Append the text line by line */
                        NewsDataArticleAppendBodyText(p_line) ;
                    }
                }
                p_article->AE_flags |= AEF_HAS_BODY_TEXT ;
                NewsDataArticleDirty(p_article) ;
				error = FALSE;
            
            } else {

                ErrorMessage(@ErrorArticleOutdated);

            } 
        }
    }

    return(error) ;
}

/*-------------------------------------------------------------------------
 | Routine:  GetMessageBody
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the body of a message.
 |
 | Inputs:
 |    word groupIndex             -- Group (in subscribed list) to get body
 |    word threadIndex            -- Thread within group to get
 |    word articleIndex           -- article within group to get
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |    LES  11/12/98  Modified to handle new database and diff proto
 |
 *-----------------------------------------------------------------------*/
Boolean GetMessageBody(
         word groupIndex,
         word threadIndex,
         word articleIndex)
{
    char lineBuf[1024] ;
    NewsgroupEntry *p_group ;
    Boolean error = FALSE ;
    ArticleEntry *p_article ;

    if ((groupIndex != NEWS_DATA_NEWSGROUP_NONE) &&
        (threadIndex != NEWS_DATA_THREAD_NONE) &&
        (articleIndex != NEWS_DATA_ARTICLE_NONE))  {

        /* Ok, we're connected */
        NewsDataSelectGroup(groupIndex) ;
        NewsDataGroupSelectThread(threadIndex) ;
        NewsDataThreadSelectArticle(articleIndex) ;

        p_article = NewsDataArticleLock(articleIndex) ;
        if (!(p_article->AE_flags & AEF_HAS_BODY_TEXT)) {

            word result ;

            /* ask if the user wants to be connected */

            if(!CheckIfConnected()) {

                MemLock(HandleOf(@ConnectQuestion)) ;
                result = UserStandardDialog(
                    0,                                  /* helpContext */
                    0,                                  /* customTriggers */
                    0,                                  /* arg2 */
                    0,                                  /* arg1 */
                    LMemDeref(@ConnectQuestion),        /* string */
                    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) | 
                        (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
                                                        /* dialogFlags */
                ) ;
                MemUnlock(HandleOf(@ConnectQuestion)) ;
            
            } else {
            
                result = IC_YES ;
            }

            if(result == IC_YES) {

                /* Connect if not connected */
                if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {

                    NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
                    NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
                    NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;

                    ConnectToServer();

                    NewsDataSelectGroup(groupIndex) ;
                    NewsDataGroupSelectThread(threadIndex) ;
                    NewsDataThreadSelectArticle(articleIndex) ;
                }

                /* Quit if not connected */
                if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {

                    NewsDataArticleUnlock(p_article) ;

                    NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
                    NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
                    NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;

                    return(TRUE) ;
                }

            } else {
            
                NewsDataArticleUnlock(p_article) ;

                NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
                NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
                NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;

                return(TRUE) ;
            }

            /* Article needs a body */
            p_group = NewsDataGroupLock(groupIndex) ;
            
            error = GetMessageBodyDirectly(p_group, p_article, lineBuf);

            NewsDataGroupUnlock(p_group) ;
        }
        NewsDataArticleUnlock(p_article) ;

        NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
        NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
        NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;
    }
    return error ;
}
