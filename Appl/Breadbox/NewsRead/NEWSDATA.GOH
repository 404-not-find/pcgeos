#ifndef __NEWSDATA
#define __NEWSDATA

@include "news.h"

#define NEWS_DATA_NEWSGROUP_NONE 0xFFFF
#define NEWS_DATA_THREAD_NONE    0xFFFF
#define NEWS_DATA_ARTICLE_NONE   0xFFFF

/* Complete database actions: */
Boolean NewsDataOpen(void) ;
void NewsDataClose(void) ;
DatabaseMapBlock *NewsDataLock(void) ;
void NewsDataUnlock(void) ;
word NewsDataCountNewsgroups(void) ;
word NewsDataCountUnsubNewsgroups(void) ;
word NewsDataCreateGroup(char *p_name, Boolean doErrorMsg) ;
word NewsDataCreateUnsubGroup(char *p_name) ;
word NewsDataSelectGroup(word groupIndex) ;
#define NewsDataUnselectGroup()   \
            NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE)
word NewsDataGetSelectedGroup(void) ;
void NewsDataClearUnsubGroups(void) ;
void NewsDataDeleteGroup(word index) ;

/* Unsubscribed newsgroup entry actions */
UnsubscribedGroupEntry *NewsDataUnsubGroupLock(word groupIndex) ;
void NewsDataUnsubGroupUnlock(UnsubscribedGroupEntry *p_group) ;

/* Subscribed Newsgroup entry actions */
NewsgroupEntry *NewsDataGroupLock(word groupIndex) ;
void NewsDataGroupUnlock(NewsgroupEntry *p_group) ;
#define NewsDataGroupDirty(p_group)   BucketHugeArrayDirty(p_group)
word NewsDataGroupCreateThread(void) ;
word NewsDataGroupCountThreads(void) ;
word NewsDataGroupCountArticles(void) ;
word NewsDataGroupSelectThread(word threadIndex) ;
#define NewsDataGroupUnselectThread()        \
            NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE)
word NewsDataGroupGetSelectedThread(void) ;
void NewsDataGroupDeleteThread(word index) ;
void NewsDataGroupMarkRead(word groupIndex);
Boolean NewsDataGroupDeleteRead(word groupIndex, word threadIndex);

/* Thread entry actions */
ThreadEntry *NewsDataThreadLock(word threadIndex) ;
void NewsDataThreadUnlock(ThreadEntry *p_thread) ;
word NewsDataThreadCountArticles(void) ;
word NewsDataThreadSelectArticle(word articleIndex) ;
#define NewsDataThreadUnselectArticle()        \
            NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE)
void NewsDataThreadDeleteArticle(word index) ;
void NewsDataThreadGetName(char *p_name, word len) ;
void NewsDataThreadMarkRead(word threadIndex);
void NewsDataThreadDeleteRead(word threadIndex);

/* Article entry actions */
void NewsDataInitArticle(ArticleEntry *p_article) ;
Boolean NewsDataStoreArticle(ArticleEntry *p_article) ;
void *NewsDataLockArticleHeaderLine(
         ArticleEntry *p_article,
         char *prefix) ;
void NewsDataUnlockHeaderLine(char *p_line) ;
char *NewsDataLockArticleMessageID(ArticleEntry *p_article) ;
ArticleEntry *NewsDataArticleLock(word articleIndex) ;
void NewsDataArticleUnlock(ArticleEntry *p_entry) ;
void NewsDataArticleUnlock(ArticleEntry *p_article) ;
void NewsDataArticleAppendHeadersToText(optr text) ;
void NewsDataArticleAppendBodyToText(optr text) ;
void NewsDataArticleAppendBodyText(char *p_text) ;
#define NewsDataArticleDirty(p_article)   BucketHugeArrayDirty(p_article)
void NewsDataArticleMarkRead(word articleIndex);
MemHandle NewDataArticleGetMessageID(word index);

#endif
