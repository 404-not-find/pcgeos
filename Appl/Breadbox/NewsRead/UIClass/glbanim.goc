@include <stdapp.goh>
@include "UIClass/glbanim.goh"

@classdecl GlobeAnimClass;

@if 0
@start Globe1Resource, data;

@chunk byte GlobeAnimState1[] = 
@include "globeart/globe1.goh"

@end Globe1Resource;

@start Globe2Resource, data;

@chunk byte GlobeAnimState2[] = 
@include "globeart/globe2.goh"

@end Globe2Resource;

@start Globe3Resource, data;

@chunk byte GlobeAnimState3[] = 
@include "globeart/globe3.goh"

@end Globe3Resource;

@start Globe4Resource, data;

@chunk byte GlobeAnimState4[] = 
@include "globeart/globe4.goh"

@end Globe4Resource;

@start Globe5Resource, data;

@chunk byte GlobeAnimState5[] = 
@include "globeart/globe5.goh"

@end Globe5Resource;

@start Globe6Resource, data;

@chunk byte GlobeAnimState6[] = 
@include "globeart/globe6.goh"

@end Globe6Resource;
@endif


@include "Art/GI020A_8.goh"
@include "Art/GI020B_8.goh"
@include "Art/GI020C_8.goh"
@include "Art/GI020D_8.goh"
@include "Art/GI020E_8.goh"
@include "Art/GI020F_8.goh"
@include "Art/GI020G_8.goh"
@include "Art/GI020H_8.goh"
@include "Art/GI020I_8.goh"
@include "Art/GI020J_8.goh"
@include "Art/GI020K_8.goh"
@include "Art/GI020L_8.goh"
@include "Art/GI020M_8.goh"
@include "Art/GI020N_8.goh"
@include "Art/GI020O_8.goh"



@method GlobeAnimClass, MSG_GLBANIM_DATA_RECEIVED
{
	pself->GAI_current += count;

	if(pself->GAI_current > pself->GAI_limit)
		@send oself::MSG_GLBANIM_NEXT_STATE();
}

@method GlobeAnimClass, MSG_GLBANIM_NEXT_STATE
{
	if(pself->GAI_timerID)
	{
		// stop timer here
		if(pself->GAI_timerHandle)
			TimerStop(pself->GAI_timerHandle, pself->GAI_timerID);
		pself->GAI_timerID = 0;
		pself->GAI_timerHandle = 0;
	}

	pself->GAI_state ++;

    if(pself->GAI_state == 15)
		pself->GAI_state = 0;

	pself->GAI_current = 0;

	@send oself::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    pself = ObjDerefGen(oself) ;

	if(pself->GAI_autoRun) {
		// start timer here
		pself->GAI_timerHandle = TimerStart(
			TIMER_EVENT_ONE_SHOT,
			oself,
			30,
			MSG_GLBANIM_NEXT_STATE,
			30,
			&pself->GAI_timerID);
	}
}

@method GlobeAnimClass, MSG_GLBANIM_SET_LIMIT
{
	pself->GAI_limit = limit;
}

@method GlobeAnimClass, MSG_GLBANIM_GET_LIMIT
{
	return(pself->GAI_limit);
}

@method GlobeAnimClass, MSG_GLBANIM_AUTO_RUN
{
	pself->GAI_autoRun = autorun;

	if(pself->GAI_autoRun)
        @send oself::MSG_GLBANIM_NEXT_STATE();
}

@method GlobeAnimClass, MSG_VIS_RECALC_SIZE
{
	return(MAKE_SIZE_DWORD(38, 38));
}

@method GlobeAnimClass, MSG_VIS_DRAW
{
//	GStateHandle gstring;
//	GStringElement element;
	Rectangle rect;

	@call oself::MSG_VIS_GET_BOUNDS(&rect);
/*
	if(pself->GAI_state == 0)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState1), 
			GST_CHUNK, ChunkOf(@GlobeAnimState1));
	else if(pself->GAI_state == 1)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState2), 
			GST_CHUNK, ChunkOf(@GlobeAnimState2));
	else if(pself->GAI_state == 2)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState3), 
			GST_CHUNK, ChunkOf(@GlobeAnimState3));
	else if(pself->GAI_state == 3)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState4), 
			GST_CHUNK, ChunkOf(@GlobeAnimState4));
	else if(pself->GAI_state == 4)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState5), 
			GST_CHUNK, ChunkOf(@GlobeAnimState5));
	else if(pself->GAI_state == 5)
		gstring = GrLoadGString(HandleOf(@GlobeAnimState6), 
			GST_CHUNK, ChunkOf(@GlobeAnimState6));

	GrDrawGString(gstate, gstring, rect.R_left, rect.R_top, 0, &element);

	GrDestroyGString(gstring, 0, GSKT_LEAVE_DATA);
*/
    GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0 , 0) ; 
    GrFillRect(gstate,rect.R_left+1, rect.R_top+1,rect.R_left+37, rect.R_top+37) ;
    GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0 , 0) ; 
    GrDrawRect(gstate,rect.R_left, rect.R_top,rect.R_left+37, rect.R_top+37) ;

    rect.R_top += 3 ;
    rect.R_left += 3 ;

	if(pself->GAI_state == 0) {

        MemLock(HandleOf(@GlobeBitmap1)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap1), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap1)) ;	
    
    } else if(pself->GAI_state == 1) {

        MemLock(HandleOf(@GlobeBitmap2)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap2), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap2)) ;	
    
    } else if(pself->GAI_state == 2) {

        MemLock(HandleOf(@GlobeBitmap3)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap3), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap3)) ;	
    
    } else if(pself->GAI_state == 3) {

        MemLock(HandleOf(@GlobeBitmap4)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap4), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap4)) ;	
    
    } else if(pself->GAI_state == 4) {

        MemLock(HandleOf(@GlobeBitmap5)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap5), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap5)) ;	
    
    } else if(pself->GAI_state == 5) {

        MemLock(HandleOf(@GlobeBitmap6)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap6), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap6)) ;	
    
    } else if(pself->GAI_state == 6) {

        MemLock(HandleOf(@GlobeBitmap7)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap7), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap7)) ;	
    
    } else if(pself->GAI_state == 7) {

        MemLock(HandleOf(@GlobeBitmap8)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap8), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap8)) ;	
    
    } else if(pself->GAI_state == 8) {

        MemLock(HandleOf(@GlobeBitmap9)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap9), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap9)) ;	
    
    } else if(pself->GAI_state == 9) {

        MemLock(HandleOf(@GlobeBitmap10)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap10), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap10)) ;	
    
    } else if(pself->GAI_state == 10) {

        MemLock(HandleOf(@GlobeBitmap11)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap11), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap11)) ;	
    
    } else if(pself->GAI_state == 11) {

        MemLock(HandleOf(@GlobeBitmap12)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap12), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap12)) ;	
    
    } else if(pself->GAI_state == 12) {

        MemLock(HandleOf(@GlobeBitmap13)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap13), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap13)) ;	
    
    } else if(pself->GAI_state == 13) {

        MemLock(HandleOf(@GlobeBitmap14)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap14), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap14)) ;	
    
    } else if(pself->GAI_state == 14) {

        MemLock(HandleOf(@GlobeBitmap15)) ;	
		GrDrawBitmap(gstate, rect.R_left, rect.R_top, LMemDeref(@GlobeBitmap15), 0) ;
        MemUnlock(HandleOf(@GlobeBitmap15)) ;	
    
    } 
   
}


@method GlobeAnimClass, MSG_VIS_OPEN /*MSG_META_CONTENT_VIEW_WIN_OPENED*/
{

	pself->GAI_current = 0;
	pself->GAI_state = 0;

	@callsuper();

	@send oself::MSG_GLBANIM_AUTO_RUN(pself->GAI_autoRun);
}

@method GlobeAnimClass, MSG_VIS_CLOSE /*MSG_META_CONTENT_VIEW_WIN_CLOSED*/
{
	if(pself->GAI_timerID)
	{
		// stop timer here
		if(pself->GAI_timerHandle)
			TimerStop(pself->GAI_timerHandle, pself->GAI_timerID);
		pself->GAI_timerID = 0;
		pself->GAI_timerHandle = 0;
	}

	@callsuper();
}
