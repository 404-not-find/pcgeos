/**********************************************************************
 * FILE:  NTEXT.GOC - NewsTextClass Code
 * Project - News Reader
 * Started 4/28/98
 **********************************************************************/

/**********************************************************************
 * Includes                                                           *
 **********************************************************************/

@include <stdapp.goh>

@include "utils.goh"
#include <ansi/stdio.h>
#include <ansi/string.h>

@include "newsread.goh"
@include "Localize/strings.goh"

/**********************************************************************
 * Class Declarations                                                 *
 **********************************************************************/

@classdecl NewsTextClass;
@classdecl NewsHeaderTextClass;

/**********************************************************************
 * Global Variables                                                   *
 **********************************************************************/

@extern object NewsArticleView ;

/**********************************************************************
 * Methods                                                            *
 **********************************************************************/

/*-------------------------------------------------------------------------
 | Method:  NewsTextClass::MSG_PRINT_GET_DOC_NAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Use the standard print name.
 |    NOTE:  Should probably change to be the subject at some point.
 |
 | Inputs:
 |    optr printCtrlOD            -- Print control object
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsTextClass, MSG_PRINT_GET_DOC_NAME
{
  MemLock(OptrToHandle(@NewsPrintName));
  @call printCtrlOD::MSG_PRINT_CONTROL_SET_DOC_NAME(\
    LMemDeref(@NewsPrintName));
  MemUnlock(OptrToHandle(@NewsPrintName));
}

/*************************************************************************/

@method NewsTextClass, MSG_PRINT_START_PRINTING {

    dword curPage, pageHeight;
    word numPages, pageWidth;
    PageSizeReport pageSize;
    Boolean keepPrinting;
    XYValueAsDWord textSize;
    Boolean textChanged;
    VisLargeTextGetRegionPosReturnStruct regPos;
    VisTextCharAttr charAttrs ;
    VisTextCharAttrDiffs attrDiffs ;
    WWFixed pSize ;

    @call NewsArticleView::MSG_GEN_VIEW_SUSPEND_UPDATE() ;

    EC(ECCheckObject(printCtrlOD));

    @call printCtrlOD::MSG_PRINT_CONTROL_GET_PAPER_SIZE_INFO(&pageSize);
  
    pageWidth  = 
        pageSize.PSR_width - 
        pageSize.PSR_margins.PCMP_left -
        pageSize.PSR_margins.PCMP_right;
    pageHeight = 
        pageSize.PSR_height - 
        pageSize.PSR_margins.PCMP_top -
        pageSize.PSR_margins.PCMP_bottom;
    
    @call printCtrlOD::
        MSG_PRINT_CONTROL_SET_DOC_SIZE(
                                pageSize.PSR_width,
                                pageSize.PSR_height);

    @call process::MSG_GEN_PROCESS_UNDO_IGNORE_ACTIONS(FALSE);
  
    pself = ObjDerefVis(oself);
    textChanged = @call self::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    textSize = @call self::MSG_VIS_LARGE_TEXT_GET_DRAFT_REGION_SIZE(0);

    @call self::MSG_VIS_TEXT_GET_CHAR_ATTR(
                     0,
					 &attrDiffs,
					 &charAttrs,
       	    	     0, 
					 0) ;

    pSize.WWF_int = 10 ;
    pSize.WWF_frac = 0 ;

    @send self::MSG_META_SUSPEND();
    @send self::MSG_VIS_TEXT_SET_POINT_SIZE(pSize, TEXT_ADDRESS_PAST_END, 0) ;
    @send self::MSG_VIS_LARGE_TEXT_SET_DRAFT_REGION_SIZE(pageWidth, pageHeight);
    @call self::MSG_META_UNSUSPEND();

    pSize.WWF_int = charAttrs.VTCA_pointSize.WBF_int ;
    pSize.WWF_frac = charAttrs.VTCA_pointSize.WBF_frac ;

    numPages = @call self::MSG_VIS_LARGE_TEXT_GET_REGION_COUNT();
    @call printCtrlOD::MSG_PRINT_CONTROL_SET_TOTAL_PAGE_RANGE(1, numPages);

    for(curPage = 0; curPage < numPages; curPage++) {
        
        keepPrinting = @call printCtrlOD::
                MSG_PRINT_CONTROL_REPORT_PROGRESS(PCPT_PAGE, curPage+1);
    
        if (keepPrinting == FALSE) {
    
            break;
        }
        
        GrSaveState(gstate);
        
        @call self::MSG_VIS_LARGE_TEXT_GET_REGION_POS(&regPos, curPage);
    
        GrSetClipRect(
                    gstate, 
                    PCT_REPLACE, 
                    pageSize.PSR_margins.PCMP_left,
                    pageSize.PSR_margins.PCMP_top,
                    pageWidth + pageSize.PSR_margins.PCMP_right,
                    regPos.VLTGRPRS_height + pageSize.PSR_margins.PCMP_bottom);
    
        GrApplyTranslationDWord(
                    gstate, 
                    pageSize.PSR_margins.PCMP_left,
                    -(regPos.VLTGRPRS_yPosition -
                    pageSize.PSR_margins.PCMP_top));
        
        GrInitDefaultTransform(gstate);
    
        @call self::MSG_VIS_DRAW(DF_PRINT, gstate);
        
        GrRestoreState(gstate);
        GrNewPage(gstate, PEC_FORM_FEED);
    }

    @send self::MSG_META_SUSPEND();
    @send self::MSG_VIS_TEXT_SET_POINT_SIZE(pSize, TEXT_ADDRESS_PAST_END, 0) ;
    @send self::MSG_VIS_LARGE_TEXT_SET_DRAFT_REGION_SIZE(
                                    DWORD_X(textSize), DWORD_Y(textSize));
    @send self::MSG_META_UNSUSPEND();

    if (textChanged == FALSE) {
        
        @send self::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
    }
  
    @send process::MSG_GEN_PROCESS_UNDO_ACCEPT_ACTIONS();
    
    if (keepPrinting == TRUE) {
        
        @send printCtrlOD::MSG_PRINT_CONTROL_PRINTING_COMPLETED();
    
    } else {
        
        @send printCtrlOD::MSG_PRINT_CONTROL_PRINTING_CANCELLED();
    }

    @call NewsArticleView::MSG_GEN_VIEW_UNSUSPEND_UPDATE() ;
}

/*************************************************************************/

@method NewsTextClass, MSG_META_CLIPBOARD_COPY {

    VisTextRange selRange ;

    /* get selection */
    @call oself::MSG_VIS_TEXT_GET_SELECTION_RANGE(&selRange);
    
    if(selRange.VTR_start == selRange.VTR_end) {
    
        @call self::MSG_META_SUSPEND();
        
        @call oself::MSG_VIS_TEXT_SELECT_RANGE(0xFFFFFFFF, 0);
        
        @callsuper() ;

        @call oself::MSG_VIS_TEXT_SELECT_RANGE(
                                selRange.VTR_end, selRange.VTR_start) ;

        @call self::MSG_META_UNSUSPEND();
    
    } else {
    
        @callsuper() ;
    }

}

/*************************************************************************/

@method NewsTextClass, MSG_NEWS_TEXT_OPEN
{
    FileHandle fileHan;

    fileHan = ClipboardGetClipboardFile();
    @call oself::MSG_VIS_TEXT_SET_VM_FILE(fileHan);
    @call oself::MSG_VIS_LARGE_TEXT_CREATE_DATA_STRUCTURES();
    @call oself::MSG_VIS_TEXT_CREATE_STORAGE(storage, TRUE);
    @call oself::MSG_VIS_NOTIFY_GEOMETRY_VALID();

    /*
     * if any content, add ourselves as a child
     */
    if (content) {
	    
        @call content::MSG_VIS_ADD_CHILD(oself, CCO_FIRST);
    }
}

/*************************************************************************/

@method NewsTextClass, MSG_NEWS_TEXT_CLOSE
{
    @call oself::MSG_VIS_TEXT_FREE_ALL_STORAGE( TRUE );
    @call oself::MSG_VIS_TEXT_SET_VM_FILE( NullHandle );

    /*
     * if any content, remove ourselves as a child
     */
    if (content) {
	    
        @call content::MSG_VIS_REMOVE_CHILD(oself, CCO_FIRST);
    }
}

/*************************************************************************/

void
GetMaxHdrWidth(word *max, GStateHandle gs, char *str)
{
    word w;

    w = GrTextWidth(gs, str, 0)*8;
    if (w > *max) {
	*max = w;
    }
}


@method NewsHeaderTextClass, MSG_NEWS_TEXT_RECALC_TAB_WIDTH
{
    word max = 0;
    GStateHandle gs;
    VisTextCharAttr attrs;
    VisTextCharAttrDiffs diffs;
    Tab anchor;

    /*
     * get a GState and initialize it to the correct font and pointsize,
     * and make sure it is bold
     */
    gs = @call oself::MSG_VIS_VUP_CREATE_GSTATE();
    @call oself::MSG_VIS_TEXT_GET_CHAR_ATTR(0,
					    &diffs,
					    &attrs,
					    0,
					    0);
    GrSetFont(gs, attrs.VTCA_fontID,
	      MakeWWFixed(attrs.VTCA_pointSize.WBF_int));
    GrSetTextStyle(gs, TS_BOLD, 0);
    /*
     * get the maximum width of To:, From: etc.
     */
    GetMaxHdrWidth(&max, gs, "Subject: ");
    GetMaxHdrWidth(&max, gs, "From: ");
    GetMaxHdrWidth(&max, gs, "Date: ");
//    GetMaxHdrWidth(&max, gs, "Message-ID: ");
//    GetMaxHdrWidth(&max, gs, "References: ");
    GrDestroyState(gs);

    /*
     * update the anchored tab, clearing the old one first
     */
    @call oself::MSG_META_SUSPEND();
    @call oself::MSG_VIS_TEXT_CLEAR_ALL_TABS(TEXT_ADDRESS_PAST_END, 0);
    anchor.T_anchor = ':';
    anchor.T_lineSpacing = 0;
    anchor.T_lineWidth = 0;
    anchor.T_position = max + 8;
    anchor.T_grayScreen = 0;
    anchor.T_attr = (TL_NONE << TabLeader_OFFSET) | TT_ANCHORED;
    @call oself::MSG_VIS_TEXT_SET_TAB(anchor,tabEnd, 0);
    @call oself::MSG_VIS_TEXT_SET_LEFT_MARGIN(max + 16, tabEnd, 0);
    @call oself::MSG_META_UNSUSPEND();
    pself->NTI_tabEnd = tabEnd ;
}

@method NewsHeaderTextClass, MSG_VIS_TEXT_SET_POINT_SIZE {

    @call oself::MSG_META_SUSPEND();

    rangeStart = 0;
    rangeEnd = TEXT_ADDRESS_PAST_END;

    @callsuper();

    @send oself::MSG_NEWS_TEXT_RECALC_TAB_WIDTH(pself->NTI_tabEnd) ;

    @call oself::MSG_META_UNSUSPEND();
}

@method NewsHeaderTextClass, MSG_VIS_TEXT_SET_LARGER_POINT_SIZE,
                            MSG_VIS_TEXT_SET_SMALLER_POINT_SIZE
{
    @call oself::MSG_META_SUSPEND();

    rangeStart = 0;
    rangeEnd = TEXT_ADDRESS_PAST_END;
    @callsuper();
    /*
     * recalculate the header width
     */
    @send oself::MSG_NEWS_TEXT_RECALC_TAB_WIDTH(pself->NTI_tabEnd) ;

    @call oself::MSG_META_UNSUSPEND();
}

@method NewsHeaderTextClass, MSG_VIS_TEXT_SET_FONT_ID {

    @call oself::MSG_META_SUSPEND();

    rangeStart = 0;
    rangeEnd = TEXT_ADDRESS_PAST_END;

    @callsuper() ;

    @send oself::MSG_NEWS_TEXT_RECALC_TAB_WIDTH(pself->NTI_tabEnd) ;

    @call oself::MSG_META_UNSUSPEND();
}

/**********************************************************************
 * END OF FILE:  NTEXT.GOC - NewsTextClass Code
 **********************************************************************/
