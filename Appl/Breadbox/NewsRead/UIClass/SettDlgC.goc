@include <stdapp.goh>

@include "newsread.goh"
@include "extern.goh"
@include "Localize/strings.goh"
@include "newsdata.goh"

#include <initfile.h>
#include <sockmisc.h>
#include <Ansi/string.h>
#include <uDialog.h>

/**********************************************************************
 *  Settings Dialog Class
 **********************************************************************/

@classdecl SettingsDialogClass ;

/*-------------------------------------------------------------------------
 | Method:  SettingsDialogClass::MSG_GEN_INTERACTION_INITIATE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Intercept of opening the dialog.  Just need it to update the
 |    button status.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/29/98  Created
 |
 *-----------------------------------------------------------------------*/
@method SettingsDialogClass, MSG_GEN_INTERACTION_INITIATE
{
    @call oself::MSG_SETTINGS_CHANGED() ;
    @callsuper() ;
}

/*-------------------------------------------------------------------------
 | Method:  SettingsDialogClass::MSG_SETTINGS_CHANGED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Called when the text changes in some way.  Called to update the
 |    the buttons in the dialog.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/29/98  Created
 |
 *-----------------------------------------------------------------------*/
@method SettingsDialogClass, MSG_SETTINGS_CHANGED
{
    Boolean isOk = FALSE ;

    if (((@call NewsServerName::MSG_VIS_TEXT_GET_TEXT_SIZE()) != 0) &&
        ((@call EmailAddress::MSG_VIS_TEXT_GET_TEXT_SIZE()) != 0))  {
       isOk = TRUE ;
    }

    if (isOk)  {
        @call SettingsExit::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
        @call SettingsOK::MSG_GEN_SET_USABLE(VUM_NOW) ;
    } else {
        @call SettingsOK::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
        @call SettingsExit::MSG_GEN_SET_USABLE(VUM_NOW) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SettingsDialogClass::MSG_SETTINGS_INIT_FILE_READ_STRING
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Read from the InitFile a string under the category specified by the
 |    vardata of this object and the key specified by the vardata of
 |    the passed child object.  This is optimized for memory as it avoids 
 |    having to call each object individually and copy the vardata into a
 |    separate buffer.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/28/00   Created
 |
 *-----------------------------------------------------------------------*/
@method SettingsDialogClass, MSG_SETTINGS_INIT_FILE_READ_STRING
{
	char *cat, *key;
	word size;
	Boolean retval;

	cat = ObjVarDerefData(oself, ATTR_GEN_INIT_FILE_CATEGORY);
	key = ObjVarDerefData(child, ATTR_GEN_INIT_FILE_KEY);

	retval = InitFileReadStringBuffer(cat, key, buf, buflen, &size);
	return retval;	
}

char itoh(int i)
{
    if (i < 10) {
	return ('0'+i);
    } else if (i < 16){
	return ('A'+i-10);
    } else {
	return ('0');
    }
}

void ScramblePassword(optr passwd)
{
	char pwbuf[33];
        char newbuf[33];
	char *pP, *nP;

    @call passwd::MSG_VIS_TEXT_GET_ALL_PTR(pwbuf) ;

	pP = pwbuf;
	nP = newbuf;
	*nP++ = '*';
/* Scrambles password prefixed with an asterix to denote that it is scambled.  */
	while(*pP) {
			*nP++ = itoh((*pP^0xbc) / 16);
			*nP++ = itoh((*pP^0xbc) % 16);
			pP++;
	}
	*nP = C_NULL;

    @call passwd::MSG_VIS_TEXT_REPLACE_ALL_PTR(newbuf, 0) ;
}

int htoi(char c)
{
    if ((c >= '0') && (c <= '9')) {
	return (c-'0');
    } else if ((c >= 'A') && (c <= 'F')) {
	return (c-'A'+10);
    } else {
	return 0;
    }
}

void UnScramblePassword(optr passwd)
{
	char pwbuf[33];
	char *iP, *pP;

    @call passwd::MSG_VIS_TEXT_GET_ALL_PTR(pwbuf) ;
	pP = pwbuf;
	iP = pP;
/* Checks for an asterix to verify that the password is encrypted.  If no, do nothing and let the application save it scrambled properly the next time.  */
	if (*pP++ == '*') {
	while(*pP && *(pP+1)) {
	   *iP++ = (htoi(*pP)*16 + htoi(*(pP+1))) ^ 0xbc;
	   pP += 2;
	}
	*iP = C_NULL;
	} 

    @call passwd::MSG_VIS_TEXT_REPLACE_ALL_PTR(pwbuf, 0) ;
}

void SaveINIPassword(optr passwd)
{

   char	*cat = "newsreader";
   char *key = "password";
   char pwbuf[33];
   char *temp;

   ScramblePassword(passwd);
   @call passwd::MSG_VIS_TEXT_GET_ALL_PTR(pwbuf);
   temp = pwbuf;
   InitFileWriteString(cat, key, temp);
   InitFileCommit(); 
   UnScramblePassword(passwd);
}


/*-------------------------------------------------------------------------
 | Routine:  SettingsDialogHandleNewsServerChange
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Handle the user changing the News Server setting.
 |
 | Pseudo-code:
 |    If it changed and wasn't previously blank:
 |       Prompt user to allow wiping database
 |          If yes, wipe database
 |          Else, restore original setting
 |
 | Returns: FALSE if user disallowed the wipe
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/28/00   Created
 |
 *-----------------------------------------------------------------------*/
Boolean SettingsDialogHandleNewsServerChange(void)
{
	MemHandle buf;
	char *pinibuf, *ptextbuf;
	Boolean retval = TRUE, restore = FALSE, clean = FALSE;

	if ((buf = MemAlloc(MAX_IP_ADDR_STRING_LENGTH_ZT * 2, HF_DYNAMIC,
		HAF_STANDARD_LOCK)) == NullHandle)
	{
		/* Alloc failed - restore original setting */
		restore = TRUE;
	}
	else
	{
		pinibuf = MemDeref(buf);
		ptextbuf = pinibuf + MAX_IP_ADDR_STRING_LENGTH_ZT;

		if (!(@call SettingsDialog::MSG_SETTINGS_INIT_FILE_READ_STRING(
			@NewsServerName, pinibuf, MAX_IP_ADDR_STRING_LENGTH_ZT))
		    && pinibuf[0] != '\0')
		{
			/* The initfile contained a non-null entry. */
			@call NewsServerName::MSG_VIS_TEXT_GET_ALL_PTR(ptextbuf);
			if (strcmp(pinibuf, ptextbuf))
			{
				/* The setting has changed.  Prompt the user. */
				word result = UserStandardDialogOptr(NULL, NULL, NullHandle, 
					NullHandle, @ChangeNewsServerQuestion,
					(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
					(GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));

				if (result == IC_YES)
				{
					/* Yes; clean the database and return success */
					clean = TRUE;
				}
				else if (result == IC_NO)
				{
					/* No; restore original and return failure. */
					restore = TRUE;
					retval = FALSE;
				}
				else
				{
					/* App detaching; restore original, but return success. */
					restore = TRUE;
				}
			}
		}
		MemFree(buf);
	}

	if (clean)
	{
		word i;

	    @call application::MSG_GEN_APPLICATION_MARK_BUSY();

		/* Remove all subscribed newsgroups. */
		i = NewsDataCountNewsgroups();

		while ((i --) > 0)
			NewsDataDeleteGroup(i);

		/* Remove the unsubscribed newsgroup list. */
		NewsDataClearUnsubGroups();

		/* Update the lists. */
        @call process::MSG_NP_MAIN_LIST_INITIALIZE();
        @send process::MSG_NP_PICK_LIST_INITIALIZE();
        @send process::MSG_NP_GROUP_LIST_INITIALIZE();
	@send ANDList::MSG_NEWS_GROUP_SHOW_ALL();
	
		/* Dismiss any open message windows. */
@ifndef COMPILE_OPTION_PRIMARY_MESSAGE_COMPOSER
        @send PostWindow::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
@else
        @send PostPrimary::MSG_GEN_DISPLAY_CLOSE();
@endif
        @send MessageWindow::MSG_GEN_DISPLAY_CLOSE() ;

		@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	}
	if (restore)
	{
		/* Restore the original setting. */
		@call NewsServerName::MSG_META_LOAD_OPTIONS();
	}
	
	return retval;
}


/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NP_SETTINGS_SAVE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Save the settings to the ini file.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/28/00   Moved to process class
 |    LES  10/29/98  Created
 |
 *-----------------------------------------------------------------------*/
@extern method NewsProcessClass, MSG_NP_SETTINGS_SAVE
{
	/* Before the new settings take effect, check if the news server
	   setting changed. */

	SaveINIPassword(@AccountPassword);

	if (!SettingsDialogHandleNewsServerChange())
	{
		if (!quit)
		{
			/* User cancelled the change -
			   raise the settings dialog. */
			@send SettingsDialog::MSG_GEN_INTERACTION_INITIATE();
		} 
		return;
	}

	if (!quit)
	{

		/* User pressed "OK" button. */
		@send process::MSG_NEWS_UPDATE_ARTICLE();

		/* Copy the authorization info into the Login dialog. */
		@send process::MSG_NP_SETTINGS_TRANSFER_AUTHINFO(FALSE);

		@send application::MSG_META_SAVE_OPTIONS() ;
	}
	else
	{

		/* User pressed "Exit" button. */
		/* Options are saved by MSG_META_QUIT. */
		@send, forceQueue application::MSG_META_QUIT();
	}
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NP_SETTINGS_TRANSFER_AUTHINFO
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Transfer the authorization information between the Login dialog
 |    and the Settings dialog.
 |
 | Passed:
 |    direction - TRUE =  Login    -> Settings
 |                FALSE = Settings -> Login
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  3/28/00   Initial version
 |
 *-----------------------------------------------------------------------*/
@extern method NewsProcessClass, MSG_NP_SETTINGS_TRANSFER_AUTHINFO
{
    TCHAR buf[33];
    optr srcUser = @UserNameEntry,	/* Initially Login -> Settings */
	 destUser = @AccountUserName,
	 srcPwd = @PasswordEntry,
	 destPwd = @AccountPassword;

    if (!direction)
    {
	optr temp;			/* Change to Settings -> Login */

	temp = srcUser; srcUser = destUser; destUser = temp;
	temp = srcPwd; srcPwd = destPwd; destPwd = temp;
    }
    @call srcUser::MSG_VIS_TEXT_GET_ALL_PTR(buf) ;
    @call destUser::MSG_VIS_TEXT_REPLACE_ALL_PTR(buf, 0) ;
    @call srcPwd::MSG_VIS_TEXT_GET_ALL_PTR(buf) ;
    @call destPwd::MSG_VIS_TEXT_REPLACE_ALL_PTR(buf, 0) ;
}
