
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/
@include "gpcchat.goh"
@include "externs.goh"

@classdecl GenTextLimitClass ;
@classdecl ChatTextClass ;
@classdecl PrivTextClass ;

Boolean g_notified = FALSE;

@method GenTextLimitClass, MSG_GEN_TEXT_LIMIT_TRIM_LINES
{
    word lines ;
    word maxLines ;
    word cutLines ;
    optr lineInfo ;
    VisTextInstance *p_vis ;
    LineInfo *p_line ;
    word size ;
    word count ;
    VisTextRange selection ;
    dword numChars ;
    word lineNum ;

    maxLines = pself->GTXLI_maxLines ;
    cutLines = pself->GTXLI_cutLines ;

    /* Get the vis part and find our lines */
    p_vis = ObjDerefVis(oself) ;
    lineInfo = ConstructOptr(OptrToHandle(oself), p_vis->VTI_lines) ;

    if (OptrToChunk(lineInfo) == 0) return;

    /* How many lines are there right now? */
    lines = ChunkArrayGetCount(lineInfo) ;

    if (lines > maxLines)  {
	   numChars = 0 ;
        lineNum = 0 ;
        while (lines > cutLines)  {
            /* We have at least one line over sized */
            /* Delete the first line, but first find how long it is */
            p_line = ChunkArrayElementToPtr(lineInfo, lineNum, &size) ;
            count = p_line->LI_count.WAAH_low ;
            if (count == 0)
                break ;
            numChars += count ;
            lineNum++ ;
            lines-- ;
        }
        if (numChars)  {
            @call oself::MSG_VIS_TEXT_GET_SELECTION_RANGE(&selection);
            @call oself::MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, numChars) ;
            @call oself::MSG_VIS_TEXT_DELETE_SELECTION();
		  /* preserve any selection */
		  if ((selection.VTR_end != selection.VTR_start) &&
				(selection.VTR_start > numChars))
			 @call oself::MSG_VIS_TEXT_SELECT_RANGE(
					 selection.VTR_end - numChars,
					 selection.VTR_start - numChars);
		  else @call oself::MSG_VIS_TEXT_SELECT_END();
        }
    }
}

@method GenTextLimitClass, MSG_VIS_TEXT_APPEND_BLOCK
{
    @callsuper() ;
    @call oself::MSG_GEN_TEXT_LIMIT_TRIM_LINES() ;
}

@method GenTextLimitClass, MSG_VIS_TEXT_APPEND_PTR
{
    @callsuper() ;
    @call oself::MSG_GEN_TEXT_LIMIT_TRIM_LINES() ;
}

@method GenTextLimitClass, MSG_VIS_TEXT_SET_POINT_SIZE
{
    rangeStart = 0;
    rangeEnd = TEXT_ADDRESS_PAST_END;
    @callsuper() ;
    return;
}


@method GenTextLimitClass, MSG_VIS_TEXT_SET_FONT_ID
{
    rangeStart = 0;
    rangeEnd = TEXT_ADDRESS_PAST_END;
    @callsuper() ;
    return;
}

@method ChatTextClass, MSG_VIS_TEXT_SET_POINT_SIZE
{
 optr	myLine, myRight, myDisplay;


    /* get the associated main window */
    myLine = @call self::MSG_GEN_FIND_PARENT();
    myRight = @call myLine::MSG_GEN_FIND_PARENT();
    myDisplay = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);

    /* tell the display to change it's size too */
    @call myDisplay::MSG_VIS_TEXT_SET_POINT_SIZE(pointSize, 0, 0);

    /* force a redraw to adjust the size */
    @send myLine::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    @send myLine::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

    @callsuper() ;
    return;
}


@method ChatTextClass, MSG_VIS_TEXT_SET_FONT_ID
{
 optr	myLine, myRight, myDisplay;


    /* get the associated main window */
    myLine = @call self::MSG_GEN_FIND_PARENT();
    myRight = @call myLine::MSG_GEN_FIND_PARENT();
    myDisplay = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);

    /* tell the display to change it's font too */
    @call myDisplay::MSG_VIS_TEXT_SET_FONT_ID(fid, 0, 0);

    @callsuper() ;
    return;
}

@method ChatTextClass, MSG_IRC_CHAT_SEND_LINE
{
    optr child=NULL, parent = @call self::MSG_GEN_FIND_PARENT();
    int i;
    if (parent) {
	i = @call parent::MSG_GEN_COUNT_CHILDREN() - 1;
	while (i >= 0) {
	    child = @call parent::MSG_GEN_FIND_CHILD_AT_POSITION(i);
	    if (@call child::MSG_META_IS_OBJECT_IN_CLASS(&GenTriggerClass)) {
		@send, forceQueue child::MSG_GEN_TRIGGER_SEND_ACTION(0);
		break;
	    }
	    i--;
	}
    }
    return;
}

/*-------------------------------------------------------------------------
 | Method:  ChatTextClass, MSG_VIS_TEXT_GENERATE_NOTIFY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    To keep font/point ctrlrs from seeing the text entry window
 |    
 |
 | Inputs:   VisTextGenerateNotifyParams  *params
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  11/11/99  Created.
 |    GPC  12/10/99  fixed   (Brian Chin)
 |                   -- but stops Edit from working in Entry field
 |    bc   12/27/99  added SELECT_STATE line to get Edit back
 *-----------------------------------------------------------------------*/
@method ChatTextClass, MSG_VIS_TEXT_GENERATE_NOTIFY
{
VisTextGenerateNotifyParams	myParams;
VisTextInstance			*visInstance;
optr					myLine, myRight, myText;

    myParams = *params;
    @callsuper();

    visInstance = ObjDerefVis(oself);
    if (visInstance->VTI_intSelFlags & VTISF_IS_TARGET) {
	  /* don't override Cut/Copy/Paste settings */
	  myParams.VTGNP_notificationTypes &= ~VTNF_SELECT_STATE;
	  /* get the text window associated with this entry window */
	  myLine = @call self::MSG_GEN_FIND_PARENT();
	  myRight = @call myLine::MSG_GEN_FIND_PARENT();
	  myText = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);

	  @send myText::MSG_VIS_TEXT_GENERATE_NOTIFY(&myParams);
	  }

}



#define TEXT_FORMAT FormatIDFromManufacturerAndType(MANUFACTURER_ID_GEOWORKS, \
						    CIF_TEXT)

/***********************************************************************
 *				CheckPasteable
 ***********************************************************************
 * SYNOPSIS:	    See if the current transfer item of the indicated
 *		    type is something we can handle.
 * CALLED BY:	    (INTERNAL) SendSelectNotify,
 *
 * RETURN:	    TRUE if we can, FALSE if we can't
 * SIDE EFFECTS:    none
 *
 * STRATEGY:	    Look at the formats in which the indicated item
 *		    has been stored and see if any one of them is
 *	    	    MANUFACTURER_ID_GEOWORKS::CIF_TEXT
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *   jfh  12/20/99  Created.        from CLIPSAMP.GOC
 *
 ***********************************************************************/
static Boolean
CheckPasteable(ClipboardItemFlags transferFlags)
{
 ClipboardQueryArgs	query;
 Boolean 	pasteable = FALSE;


    ClipboardQueryItem(transferFlags, &query);
    pasteable = (query.CQA_numFormats &&
		 ClipboardTestItemFormat(query.CQA_header, TEXT_FORMAT));

    ClipboardDoneWithItem(query.CQA_header);

    return (pasteable);
}


/***********************************************************************
 *				SendSelectNotify
 ***********************************************************************
 * SYNOPSIS:	    Tell the world about our selection state: whether
 *		    we can paste the current clipboard item, and whether
 *		    we've got anything to copy to the clipboard, if asked.
 * CALLED BY:	    (INTERNAL)	PasteCommon,
 * RETURN:	    nothing
 * SIDE EFFECTS:    none
 *
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *   jfh  12/20/99  Created.        from CLIPSAMP.GOC
 *
 ***********************************************************************/
static void
SendSelectNotify(void)
{
 MemHandle	data;
 NotifySelectStateChange *nsscPtr;
 EventHandle	notifyEvent;


    data = MemAlloc(sizeof(NotifySelectStateChange), HF_DYNAMIC|HF_SHARABLE,
		    HAF_STANDARD_NO_ERR);
    nsscPtr = (NotifySelectStateChange *)MemLock(data);

    nsscPtr->NSSC_selectionType = SDT_TEXT;
    
    nsscPtr->NSSC_clipboardableSelection =
		   nsscPtr->NSSC_deleteableSelection = TRUE;

    nsscPtr->NSSC_selectAllAvailable = FALSE;
    
    nsscPtr->NSSC_pasteable = CheckPasteable(TIF_NORMAL);
    
    MemUnlock(data);
    MemInitRefCount(data, 1);
    
    notifyEvent =
	@record null::MSG_META_NOTIFY_WITH_DATA_BLOCK(MANUFACTURER_ID_GEOWORKS,
						      GWNT_SELECT_STATE_CHANGE,
						      data);

    @call application::MSG_META_GCN_LIST_SEND
	(GCNLSF_SET_STATUS,
	 notifyEvent,
	 data,
	 GAGCNLT_APP_TARGET_NOTIFY_SELECT_STATE_CHANGE,
	 MANUFACTURER_ID_GEOWORKS);

}
/***********************************************************************
 *				PasteCommon
 ***********************************************************************
 * SYNOPSIS:	    Paste the normal or quick-transfer item as our
 *	    	    text block
 * CALLED BY:	    (INTERNAL) ClipSampProcess::MSG_META_CLIPBOARD_PASTE
 *			       ClipSampProcess::MSG_META_END_MOVE_COPY
 * RETURN:	    ClipboardQuickNotifyFlags for ClipboardEndQuickTransfer
 * SIDE EFFECTS:
 *
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *   jfh  12/20/99  Created.        from CLIPSAMP.GOC
 *        01/11/00  added whichEntryWin for PrivMsg windows pasting
 *
 *
 ***********************************************************************/
static ClipboardQuickNotifyFlags
PasteCommon(ClipboardItemFlags transferFlags, word whichEntryWin)
{
 ClipboardQueryArgs			query;
 ClipboardRequestArgs    	request;
 ClipboardQuickNotifyFlags	retVal;
 optr					textObj, myDbox, myEntryWin;
 MemHandle				textMemHan;
 char *					p_text;
 word					length, i;
 optr					targetDisplay, myRight, myLine, myEntry;


    ClipboardQueryItem(transferFlags, &query);
    if (query.CQA_numFormats) {
	   if (ClipboardTestItemFormat(query.CQA_header, TEXT_FORMAT)) {
		 ClipboardRequestItemFormat(TEXT_FORMAT, query.CQA_header, &request);
		 textObj = TextAllocClipboardObject(ClipboardGetClipboardFile(), 0, 0);
		 @call textObj::MSG_VIS_TEXT_REPLACE_WITH_TEXT_TRANSFER_FORMAT(
					   VMCHAIN_GET_VM_BLOCK(request.CRA_data),
					   request.CRA_file,
					   0,
					   TEXT_ADDRESS_PAST_END,
					   0);
		 textMemHan = @call textObj::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
		 length = @call textObj::MSG_VIS_TEXT_GET_TEXT_SIZE();
		 SendSelectNotify();
		 p_text = MemLock(textMemHan);
		 for (i = 0; i < length; i++) {
		    if ((p_text[i] == '\r') || (p_text[i] == '\n')) p_text[i] = ' ';
		    }
		 /* see where to paste it */
		 if (whichEntryWin == MAIN_ENTRY_PASTE) {
		    /* in a chat window... figger out which one */
		    @call IRCDisplayGroup::MSG_META_GET_TARGET_EXCL(&targetDisplay);
		    myRight = @call targetDisplay::MSG_GEN_FIND_CHILD_AT_POSITION(1);
		    myLine = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(1);
		    myEntry = @call myLine::MSG_GEN_FIND_CHILD_AT_POSITION(0);
		    @call myEntry::MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK(
										    textMemHan,
										    length);
              /* make Enter key active */
		    @call myEntry::MSG_GEN_TEXT_SET_MODIFIED_STATE(TRUE);
		    }
		 else {
		    myDbox = @call IRCDialogs::
					    MSG_GEN_FIND_CHILD_AT_POSITION(whichEntryWin);
		    myEntryWin = @call myDbox::MSG_GEN_FIND_CHILD_AT_POSITION(3);
		    @call myEntryWin::MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK(
										    textMemHan,
										    length);
		    }

		 MemFree(textMemHan);

		 retVal = CQNF_COPY;

		 TextFinishWithClipboardObject(textObj, TCO_RETURN_NOTHING, 0, 0);
		 }
	   else {
		 retVal = CQNF_NO_OPERATION;
		 }
	   }
    else {
	  retVal = CQNF_NO_OPERATION;
	  }

    ClipboardDoneWithItem(query.CQA_header);

    return(retVal);

}

/*-------------------------------------------------------------------------
 | Method:  ChatTextClass, MSG_META_CLIPBOARD_PASTE and
 |                         MSG_META_END_MOVE_COPY
 |                         MSG_META_LARGE_END_MOVE_COPY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    To intercept a normal or quick paste and replace and CR/LFs with
 |    spaces so that the text can paste into the single line entry
 |	 object. [from clipsamp]
 |
 | Inputs:   none
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  12/20/99  Created.
 |
 *-----------------------------------------------------------------------*/
@method ChatTextClass, MSG_META_CLIPBOARD_PASTE
{
    (void) PasteCommon(TIF_NORMAL, MAIN_ENTRY_PASTE);
}


@method ChatTextClass, MSG_META_END_MOVE_COPY
{
    /*
     * paste the thing, PasteCommon returns ClipboardQuickNotifyFlags to pass to
     * ClipboardEndQuickTransfer
     */
    ClipboardEndQuickTransfer(PasteCommon(CIF_QUICK, MAIN_ENTRY_PASTE));
    retVal->flags = MRF_PROCESSED;	/* this event processed */
}

@method ChatTextClass, MSG_META_LARGE_END_MOVE_COPY
{
    /*
     * paste the thing, PasteCommon returns ClipboardQuickNotifyFlags to pass to
     * ClipboardEndQuickTransfer
     */
    ClipboardEndQuickTransfer(PasteCommon(CIF_QUICK, MAIN_ENTRY_PASTE));
    retVal->flags = MRF_PROCESSED;	/* this event processed */
}

/*-------------------------------------------------------------------------
 | Method:  PrivTextClass, MSG_META_CLIPBOARD_PASTE and
 |                         MSG_META_END_MOVE_COPY
 |                         MSG_META_LARGE_END_MOVE_COPY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    To intercept a normal or quick paste and replace and CR/LFs with
 |    spaces so that the text can paste into the single line entry
 |	 object. [from clipsamp]
 |
 | Inputs:   none
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  01/11/00  Created.
 |
 *-----------------------------------------------------------------------*/
@method PrivTextClass, MSG_META_CLIPBOARD_PASTE
{
 optr	myDbox;
 word	childNum;


    /* get our dbox optr */
    myDbox = @call self::MSG_GEN_FIND_PARENT();
    /* find out which PrivMsg dbox we're in */
    childNum = @call IRCDialogs::MSG_GEN_FIND_CHILD(myDbox);

    (void) PasteCommon(TIF_NORMAL, childNum);
    
}

@method PrivTextClass, MSG_META_END_MOVE_COPY
{
 optr	myDbox;
 word	childNum;


    /* get our dbox optr */
    myDbox = @call self::MSG_GEN_FIND_PARENT();
    /* find out which PrivMsg dbox we're in */
    childNum = @call IRCDialogs::MSG_GEN_FIND_CHILD(myDbox);

    /*
     * paste the thing, PasteCommon returns ClipboardQuickNotifyFlags to pass to
     * ClipboardEndQuickTransfer
     */
    ClipboardEndQuickTransfer(PasteCommon(CIF_QUICK, childNum));
    retVal->flags = MRF_PROCESSED;	/* this event processed */
}

@method PrivTextClass, MSG_META_LARGE_END_MOVE_COPY
{
 optr	myDbox;
 word	childNum;


    /* get our dbox optr */
    myDbox = @call self::MSG_GEN_FIND_PARENT();
    /* find out which PrivMsg dbox we're in */
    childNum = @call IRCDialogs::MSG_GEN_FIND_CHILD(myDbox);

    /*
     * paste the thing, PasteCommon returns ClipboardQuickNotifyFlags to pass to
     * ClipboardEndQuickTransfer
     */
    ClipboardEndQuickTransfer(PasteCommon(CIF_QUICK, childNum));
    retVal->flags = MRF_PROCESSED;	/* this event processed */
}


