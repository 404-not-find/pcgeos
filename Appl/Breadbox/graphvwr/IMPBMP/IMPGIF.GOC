@include <stdapp.goh>
#include <ansi\string.h>
#include <graphics.h>
#include "impbmp\impgif.h"
#include "impbmp\ibcommon.h"
@include "statbar\statbar.goh"

#define IG_BUFFER_SIZE 16384

ImpBmpStatus _pascal ImpGIFReadSimpleByte(FileHandle file, byte *read)
{
  int result;

  result = FileRead(file, read, 1, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != 1)
	 return(IBS_WRONG_FILE); 
  return(IBS_NO_ERROR);
};

ImpBmpStatus _pascal ImpGIFProcessExtentions(FileHandle file, word *transparent)
{
  ImpBmpStatus status;
  byte read, count, count2;
  byte buffer[256];

  status = ImpGIFReadSimpleByte(file, &read);
  while((read == '!')&&(status == IBS_NO_ERROR))
  {
	 status = ImpGIFReadSimpleByte(file, &read);
	 if(status == IBS_NO_ERROR)
		status = ImpGIFReadSimpleByte(file, &count);


   if(read == 0xF9)
   {

	 count2 = 0;
	 do
	 {
	   status = ImpGIFReadSimpleByte(file, &buffer[count2]);
	   count2++;
	   count--;
	 } while ((count != 0) && (status == IBS_NO_ERROR));

	 if(status == IBS_NO_ERROR)
	 {
	   if(buffer[0] & 0x01)
	 *transparent = buffer[3];
	   ImpGIFReadSimpleByte(file, &count);
	 }

	 while((count != 0)&&(status == IBS_NO_ERROR))
	 {

	  do
	  {
	status = ImpGIFReadSimpleByte(file, &read);
	count--;
	  } while ((count != 0) && (status == IBS_NO_ERROR));

	  if(status == IBS_NO_ERROR)
	ImpGIFReadSimpleByte(file, &count);
	 }

   }
   else
   {
	 while((count != 0)&&(status == IBS_NO_ERROR))
	 {

	  do
	  {
	status = ImpGIFReadSimpleByte(file, &read);
	count--;
	  } while ((count != 0) && (status == IBS_NO_ERROR));

	  if(status == IBS_NO_ERROR)
	ImpGIFReadSimpleByte(file, &count);
	 };
   }

	 if(status == IBS_NO_ERROR)
		status = ImpGIFReadSimpleByte(file, &read);
  };

  FilePos(file, -1, FILE_POS_RELATIVE);
  return(status);
};

ImpBmpStatus _pascal ImpGIFGetHeader(FileHandle source,
									  ImpGIFFileHeader *fh)
{
  int result; /* normally word */

  result = FileRead(source, fh, IG_HEADER_LEN, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != IG_HEADER_LEN)
	 return(IBS_WRONG_FORMAT);
  if(strncmp(fh->IGFH_sign, "GIF", 3) != 0)
	 return(IBS_WRONG_FORMAT);

  if(strncmp(fh->IGFH_version, "87a", 3) != 0)
	 if(strncmp(fh->IGFH_version, "89a", 3) != 0)
		return(IBS_WRONG_FORMAT);

  fh->IGFH_globPal = ((fh->IGFH_info & 0x80) == 0x80);
  fh->IGFH_bitsPerPix = 1 + (fh->IGFH_info & 0x07);
  fh->IGFH_rgbBits = 1 + ((fh->IGFH_info >> 4) & 0x07);
  fh->IGFH_colMapSize = 1 << fh->IGFH_bitsPerPix;

  return(IBS_NO_ERROR);
};

ImpBmpStatus ImpGIFGetPicDesc(FileHandle source,
										ImpGIFPicDescriptor *pd)
{
  int result; /*normally word */

  result = FileRead(source, pd, IG_PICDESC_LEN, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != IG_PICDESC_LEN)
	 return(IBS_WRONG_FILE);
  if(pd->IGPD_sign != ',')
	 return(IBS_WRONG_FILE);
  pd->IGPD_interlace = ((pd->IGPD_flags & 0x40) == 0x40);
  pd->IGPD_localPal = ((pd->IGPD_flags & 0x80) == 0x80);
  pd->IGPD_pixSize = (pd->IGPD_flags & 0x07) + 1;
  pd->IGPD_colMapSize = 1 << pd->IGPD_pixSize;
  return(IBS_NO_ERROR);
};

ImpBmpStatus _pascal ImpGIFGetPalette(FileHandle source,
										MemHandle palmem,
										word size)
{
  int result;
  ImpBmpPalette *pal;

  pal = MemLock(palmem);
  result = FileRead(source, pal, size*3, 0);
  MemUnlock(palmem);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != size*3)
	 return(IBS_WRONG_FILE);
  return(IBS_NO_ERROR);
};

ImpBmpStatus _pascal ImpGIFGetRawByte(ImpBmpStream *stream, byte *value)
{
  byte *buffer;
  int result;
  ImpBmpStatus status;

  buffer = stream->IBST_mem;
  status = IBS_NO_ERROR;
  if(stream->IBST_count == 0)
  {
	 result = FileRead(stream->IBST_file, buffer, stream->IBST_size, 0);
	 if(result == -1)
		status = IBS_SYS_ERROR;
	 if(result == 0)
		status = IBS_OUT_OF_DATA;
	 if (status == IBS_NO_ERROR)
	 {
		stream->IBST_index = 0;
		stream->IBST_count = result;
	 };
  };
  *value = buffer[stream->IBST_index];
  stream->IBST_index++;
  stream->IBST_count--;
  return(status);
};

ImpBmpStatus _pascal ImpGIFGetByte(ImpBmpStream *stream,
									ImpGIFStream *gifstr,
									byte *value)
{
  ImpBmpStatus status;

  status = IBS_NO_ERROR;
  if(gifstr->IGST_blockCount==0)
	 status = ImpGIFGetRawByte(stream, &gifstr->IGST_blockCount);

  if(status == IBS_NO_ERROR)
  {
	if(gifstr->IGST_blockCount != 0)
	{
		gifstr->IGST_blockCount--;
		status = ImpGIFGetRawByte(stream, value);
	}
	else
		return(IBS_OUT_OF_DATA);
  };
  return(status);
}

ImpBmpStatus _pascal ImpGIFReadCode(ImpBmpStream *stream, ImpGIFStream *gifstr,
									 word *code, byte csize)
{
  ImpBmpStatus status;
  word mask[] = { 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f,
						0x00ff, 0x01ff, 0x03ff, 0x07ff, 0x0fff};
  byte value;
  word value2;

  status = IBS_NO_ERROR;
  if(gifstr->IGST_inCount >= 8)
  {
	 if(gifstr->IGST_inCount >= 16)
	 {

		gifstr->IGST_inBuffer.val = gifstr->IGST_inBuffer.val >> 16;
		status = ImpGIFGetByte(stream, gifstr, &value);
		value2 = value;
		gifstr->IGST_inBuffer.single[0] =
		  (gifstr->IGST_inBuffer.single[0] & 0x00ff)|(value2*256);
		gifstr->IGST_inCount -= 16;
	 }
	 else
	 {
		gifstr->IGST_inBuffer.val = gifstr->IGST_inBuffer.val >> 8;
		gifstr->IGST_inCount -= 8;
	 };
	 if(status == IBS_NO_ERROR)
	 {
		status = ImpGIFGetByte(stream, gifstr, (byte *) &gifstr->IGST_inBuffer.single[1]);
		if(status == IBS_WRONG_FILE)
		{
		  gifstr->IGST_max = 16;
		  status = IBS_NO_ERROR;
		};
	 }
	 else
		if(status == IBS_WRONG_FILE)
		{
		  gifstr->IGST_max = 8;
		  status = IBS_NO_ERROR;
		};
  };
  if(csize > gifstr->IGST_max)
	 return(IBS_WRONG_FILE);
  *code = (gifstr->IGST_inBuffer.val >> gifstr->IGST_inCount)& mask[csize-2];
  gifstr->IGST_inCount += csize;
  return(status);
};

ImpBmpStatus _pascal ImpGIFPutPixel(ImpBmpOutStream *stream, byte pixel,
							optr status)
{
  Boolean flag;
  struct
  {
	 byte inc;
	 byte nextY;
  } INTERLACE[4] = {{8,4},{8,2},{4,1},{2,0}};
  byte MASK[] = {0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01};
  word    size;
  void    *lineptr;
  Boolean outflag;
  byte    *array;

  if(stream->IBOST_transparent != 0xFFFF)
  {
	if(pixel != stream->IBOST_transparent)
	{
	  stream->IBOST_mask |= MASK[stream->IBOST_maskCount]; 
	}
	stream->IBOST_maskCount++;
	if(stream->IBOST_maskCount == 8)
	{
	  array = MemLock(stream->IBOST_mem);
	  array[stream->IBOST_maskIndex] = stream->IBOST_mask;
	  stream->IBOST_maskIndex++;
	  MemUnlock(stream->IBOST_mem);
	  stream->IBOST_maskCount = 0;
	  stream->IBOST_mask = 0;
	}
  }

  outflag = FALSE;

  /* set pixel */
  if(stream->IBOST_format == BMF_MONO)
  {
	 stream->IBOST_outByte = stream->IBOST_outByte << 1;

   if(stream->IBOST_inverse == FALSE)
	  stream->IBOST_outByte = stream->IBOST_outByte | (pixel&0x01);
   else
	 stream->IBOST_outByte = stream->IBOST_outByte | ((pixel&0x01)^0x01);
	 stream->IBOST_inCount++;
	 if(stream->IBOST_inCount == 8)
	 {
		outflag = TRUE;
		stream->IBOST_inCount = 0;
	 };
  };
  if(stream->IBOST_format == BMF_4BIT)
  {
	 stream->IBOST_outByte = stream->IBOST_outByte << 4;
	 stream->IBOST_outByte = stream->IBOST_outByte | (pixel&0x0f);
	 stream->IBOST_inCount++;
	 if(stream->IBOST_inCount == 2)
	 {
		outflag = TRUE;
		stream->IBOST_inCount = 0;
	 };
  };
  if(stream->IBOST_format == BMF_8BIT)
  {
	 outflag = TRUE;
	 stream->IBOST_outByte = pixel;
  };

  /* put byte into bitmap line */
  if(outflag == TRUE)
  {
	 array = MemLock(stream->IBOST_mem);
   array[stream->IBOST_index] = stream->IBOST_outByte;
	 stream->IBOST_index++;
	 MemUnlock(stream->IBOST_mem);
  };

  /* next point */
  stream->IBOST_x++;

  /* if end of line then save line, next line or error if pic ready */
  if(stream->IBOST_x == stream->IBOST_width)
  {
	 if(stream->IBOST_inCount!=0)
	 {
		if(stream->IBOST_format == BMF_MONO)
		{
		  stream->IBOST_outByte = stream->IBOST_outByte <<
									  (8 - stream->IBOST_inCount);
		}
		else
		{
		  stream->IBOST_outByte = stream->IBOST_outByte << 4;
		};
		array = MemLock(stream->IBOST_mem);
		array[stream->IBOST_index]=stream->IBOST_outByte;
		stream->IBOST_index++;
		MemUnlock(stream->IBOST_mem);
	 };
   if(stream->IBOST_maskCount != 0)
   {
	 array = MemLock(stream->IBOST_mem);
	 array[stream->IBOST_maskIndex]= stream->IBOST_mask;
	 MemUnlock(stream->IBOST_mem);
   }
   stream->IBOST_index = stream->IBOST_maskoff;
	 stream->IBOST_x = 0;
	 stream->IBOST_inCount = 0;
   stream->IBOST_mask = 0;
   stream->IBOST_maskCount = 0;
   stream->IBOST_maskIndex = 0;

  if(stream->IBOST_ycount < stream->IBOST_height)
  {
	if(HAL_COUNT(HugeArrayLock(stream->IBOST_file,stream->IBOST_block,
						(dword) stream->IBOST_y,&lineptr,&size))!=0)
	{
	  array = MemLock(stream->IBOST_mem);
	  memcpy(lineptr, array, size);
	  MemUnlock(stream->IBOST_mem);
	  HugeArrayDirty(lineptr);
	  HugeArrayUnlock(lineptr);
	}
	else
	  return(IBS_SYS_ERROR);

	if(stream->IBOST_interlace == FALSE)
	  stream->IBOST_y++;
	else
	{
	  stream->IBOST_y += INTERLACE[stream->IBOST_pass].inc;
	  if(stream->IBOST_y >= stream->IBOST_height)
	  {
	stream->IBOST_y = INTERLACE[stream->IBOST_pass].nextY;
	stream->IBOST_pass++;
	  };

	};
	stream->IBOST_ycount++;

	if(status != NULL)
	{
		flag = @call status::MSG_SB_SET_STATUS_VALUE(((dword)stream->IBOST_ycount)*100/stream->IBOST_height);
		
		if(flag == FALSE)
			return(IBS_IMPORT_STOPPED);
	}
  }
  else
  {
	stream->IBOST_finished = TRUE;
  }
  }
  return(IBS_NO_ERROR);
};

ImpBmpStatus _pascal ImpGIFReadPic(ImpBmpParams *params, ImpGIFPicDescriptor *pd,
				ImpBmpOutStream *out_stream)
{
  /* names conventions and error don't checked !!! */

  byte CodeMask[] = {1, 3, 7, 15, 31, 63, 127, 255};
  word PowersOf2[] = {1, 2, 4, 8, 16, 32, 64, 128, 256};

  word ClearCode, EOFCode, OutCount, MaxCode;
  word Code, CurCode, OldCode, InCode;
  word FirstFree, FreeCode;
  byte CodeSize, InitCodeSize, FinChar, BitMask;
  int i;
  MemHandle buffermem, tablemem;

  ImpBmpStatus status;
  ImpBmpStream in_stream;
  ImpGIFStream in_gif_stream;
  ImpGIFTables *table;

  /* buffer for reading gif file */
  buffermem = MemAlloc(IG_BUFFER_SIZE, HF_FIXED, 0);
  if(buffermem == NULL)
	 return(IBS_NO_MEMORY);

  /* buffer for tables */
  tablemem = MemAlloc(sizeof(ImpGIFTables), HF_FIXED, 0);
  if(tablemem == NULL)
  {
	 MemFree(buffermem);
	 return(IBS_NO_MEMORY);
  };
  table = MemDeref(tablemem);

  /* define file stream */
  in_stream.IBST_mem = MemDeref(buffermem);
  in_stream.IBST_size = IG_BUFFER_SIZE;
  in_stream.IBST_file = params->IBP_source;
  in_stream.IBST_count = 0;

  /* define bit stream */
  in_gif_stream.IGST_blockCount = 0;
  in_gif_stream.IGST_max = 24;
  status = ImpGIFGetRawByte(&in_stream, &CodeSize);
  if(status != IBS_NO_ERROR)
  {
	 MemFree(buffermem);
	 MemFree(tablemem);
	 return(status);
  };
  status = ImpGIFGetByte(&in_stream, &in_gif_stream,(byte *)
			 &(in_gif_stream.IGST_inBuffer.single[1]));
  if(status != IBS_NO_ERROR)
  {
	 MemFree(buffermem);
	 MemFree(tablemem);
	 return(status);
  };
  in_gif_stream.IGST_inCount = 16;

  /* define codes */
  ClearCode = PowersOf2[CodeSize];
  EOFCode = ClearCode + 1;
  FirstFree = ClearCode + 2;
  FreeCode = FirstFree;
  CodeSize = CodeSize+1; /* ??? */
  InitCodeSize = CodeSize;
  MaxCode = ClearCode*2;
  BitMask = CodeMask[pd->IGPD_pixSize-1];
  OutCount = 0;

	do
	{
		status = ImpGIFReadCode(&in_stream, &in_gif_stream, &Code, CodeSize);

		if(status == IBS_OUT_OF_DATA)
		{
			if(OutCount)
			{
				for(i = OutCount-1; ((i >= 0)&&(status == IBS_NO_ERROR)&&(out_stream->IBOST_finished == FALSE)); i--)
				{
					status = ImpGIFPutPixel(out_stream, table->Outcode[i], params->IBP_status);
				};
				OutCount = 0;
			}
			status = IBS_NO_ERROR;
			break;
		}

		if((Code != EOFCode)&&(status == IBS_NO_ERROR))
		{
			if(Code == ClearCode)
			{
				for(i = 0; i < ClearCode; ++i)
				{
					table->Prefix[i]=0;
					table->Suffix[i]=i;
				};

				for(;i < (1<<12); ++i)
				{
					table->Prefix[i] = table->Suffix[i] = 0;
				};
	
				CodeSize = InitCodeSize;
				MaxCode = ClearCode*2;
				FreeCode = FirstFree;
				
				do
				{
					status = ImpGIFReadCode(&in_stream, &in_gif_stream, &Code, CodeSize);
				}
				while((status == IBS_NO_ERROR)&&(Code == ClearCode));

				if(status == IBS_OUT_OF_DATA)
				{
					status = IBS_NO_ERROR;
					break;
				}

				if(status == IBS_NO_ERROR)
				{
					CurCode = Code;
					OldCode = Code;
					FinChar = Code & BitMask;
					status = ImpGIFPutPixel(out_stream, FinChar, params->IBP_status);
				};
			}
			else
			{
				CurCode = Code;
				InCode = Code;

				if(Code >= FreeCode)
				{
					CurCode = OldCode;

					table->Outcode[OutCount] = FinChar;
					OutCount++;
				};

				while(CurCode >= ClearCode)
				{
					table->Outcode[OutCount] = table->Suffix[CurCode];
					OutCount++;
					CurCode = table->Prefix[CurCode];
				};
			
				FinChar = CurCode & BitMask;

				table->Outcode[OutCount] = FinChar;
				OutCount++;
  
				for(i = OutCount-1; ((i >= 0)&&(status == IBS_NO_ERROR)&&(out_stream->IBOST_finished == FALSE)); i--)
				{
					status = ImpGIFPutPixel(out_stream, table->Outcode[i], params->IBP_status);
				};
				OutCount = 0;
				
				if(FreeCode < (1 << 12))
				{
					table->Prefix[FreeCode] = OldCode;
					table->Suffix[FreeCode] = FinChar;
					FreeCode++;
				
					if((FreeCode>=MaxCode)&&(CodeSize<12))
					{
						CodeSize++;
						MaxCode=MaxCode<<1;
					};
				};
			 
				OldCode = InCode;
			};
		 };
	} 
	while ((Code!=EOFCode)&&(status == IBS_NO_ERROR)&&
	   (out_stream->IBOST_finished == FALSE));

	/* free tables */
	MemFree(tablemem);
	/* free buffer */
	MemFree(buffermem);

	return(status);
};

ImpBmpStatus _pascal ImpGIFProcessFile(ImpBmpParams *params)
{
  ImpBmpStatus status;
  ImpGIFFileHeader fh;
  ImpGIFPicDescriptor pd;
  ImpBmpOutStream out_stream;
  MemHandle palmem, bmmem;
  GStateHandle bmstate;
  BMFormat bmformat;
  byte pixsize;
  RGBValue *palette;
  word offset;
  byte *bmblock;

  strcpy(params->IBP_impForm, ".GIF"); 
  if(params->IBP_status != NULL)
	 @call params->IBP_status::MSG_SB_START_PROCESS();

  /* file position at start */
  if(FilePos(params->IBP_source, 0, FILE_POS_START)!=0)
  {
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(IBS_WRONG_FILE);
  };

  /* read gif header */
  status = ImpGIFGetHeader(params->IBP_source, &fh);

  if(status != IBS_NO_ERROR)
  {
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(status);
  };

  /* read palette */
  palmem = MemAlloc(3*256, HF_SWAPABLE, 0);
  if(palmem == NULL)
  {
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(IBS_NO_MEMORY);
  };

  if(fh.IGFH_globPal)
  {
	 status = ImpGIFGetPalette(params->IBP_source, palmem, fh.IGFH_colMapSize);
	 if(status != IBS_NO_ERROR)
	 {
		MemFree(palmem);
		if(params->IBP_status != NULL)
		  @call params->IBP_status::MSG_SB_STOP_PROCESS();
		return(status);
	 };
  };

  /* process extention blocks */
  fh.IGFH_transparent = 0xFFFF;     /* setup to be not transparent */
  status = ImpGIFProcessExtentions(params->IBP_source, &fh.IGFH_transparent);

  if(status == IBS_NO_ERROR)
	 /* read pic descriptor */
	 status = ImpGIFGetPicDesc(params->IBP_source, &pd);
  else

  if(status != IBS_NO_ERROR)
  {
	 MemFree(palmem);
	 if(params->IBP_status != NULL)
		@call params->IBP_status::MSG_SB_STOP_PROCESS();
	 return(status);
  };

  if((pd.IGPD_flags & 0x80) == 0)
  {
	pd.IGPD_pixSize = fh.IGFH_bitsPerPix;
	pd.IGPD_colMapSize = fh.IGFH_colMapSize;
  }

  /* read optional palette */
  if(pd.IGPD_localPal)
  {
	 status = ImpGIFGetPalette(params->IBP_source, palmem, pd.IGPD_colMapSize);
	 if(status != IBS_NO_ERROR)
	 {
		if(params->IBP_status != NULL)
		  @call params->IBP_status::MSG_SB_STOP_PROCESS();
		MemFree(palmem);
		return(status);
	 };
  };

  if(pd.IGPD_pixSize == 1)
  {
	palette = MemLock(palmem);

	if((palette[0].RGB_red == 0) &&
	   (palette[0].RGB_green == 0) &&
	   (palette[0].RGB_blue == 0) &&
	   (palette[1].RGB_red == 255) &&
	   (palette[1].RGB_green == 255) &&
	   (palette[1].RGB_blue == 255))
	{
	  bmformat = BMF_MONO;
	  pixsize = 1;
	  out_stream.IBOST_inverse = TRUE;
	}
	else
	  if((palette[0].RGB_red == 255) &&
	 (palette[0].RGB_green == 255) &&
	 (palette[0].RGB_blue == 255) &&
	 (palette[1].RGB_red == 0) &&
	 (palette[1].RGB_green == 0) &&
	 (palette[1].RGB_blue == 0))
	  {
	bmformat = BMF_MONO;
	pixsize = 1;
	out_stream.IBOST_inverse = FALSE;
	  }
	  else
	  {
	bmformat = BMF_4BIT;
	pixsize = 4;
	  }

	MemUnlock(palmem);
  }
  else
	 if(pd.IGPD_pixSize <= 4)
	 {
		bmformat = BMF_4BIT;
		pixsize = 4;
	 }
	 else
		if(pd.IGPD_pixSize <= 8)
		{
		  bmformat = BMF_8BIT;
		  pixsize = 8;
		};

  /* create bitmap and save palette */
  params->IBP_format = bmformat;
  params->IBP_width = pd.IGPD_width;
  params->IBP_height = pd.IGPD_height;

  if(fh.IGFH_transparent != 0xFFFF)
	bmformat |= BMT_MASK;

  params->IBP_bitmap =
  out_stream.IBOST_block = GrCreateBitmap(bmformat|BMT_PALETTE|BMT_COMPLEX,
						pd.IGPD_width, pd.IGPD_height,
					  params->IBP_dest, 0, &bmstate);

  /* destroy bitmap gstate */
  GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);

  /* save palette only for 16 or 256 color bmps */
  if(((bmformat&7)>=1) && ((fh.IGFH_globPal!=FALSE)||(pd.IGPD_localPal!=FALSE)))
  {
	 palette = MemLock(palmem);
	 bmblock = VMLock(params->IBP_dest, params->IBP_bitmap, &bmmem);
	 offset = bmblock[0x28]+256*(bmblock[0x29]);
	 offset += 0x1c;

   memcpy(&(bmblock[offset]), palette, 3*pd.IGPD_colMapSize);
	 VMDirty(bmmem);
	 VMUnlock(bmmem);
	 MemUnlock(palmem);
  };

  /* free palette */
  MemFree(palmem);


  /* create out stream */
  out_stream.IBOST_finished = FALSE;
  out_stream.IBOST_width = pd.IGPD_width;
  out_stream.IBOST_height = pd.IGPD_height;
  out_stream.IBOST_x = 0;
  out_stream.IBOST_y = 0;
  out_stream.IBOST_ycount = 0;
  out_stream.IBOST_pass = 0;
  out_stream.IBOST_interlace = pd.IGPD_interlace;
  out_stream.IBOST_mem = MemAlloc(((pixsize*pd.IGPD_width)+7)/8 +
	 ((fh.IGFH_transparent != 0xFFFF) ? ((pd.IGPD_width+7)/8): 0), 0, 0);
  out_stream.IBOST_file = params->IBP_dest;
  out_stream.IBOST_format = bmformat & ~BMT_MASK;
  out_stream.IBOST_inCount = 0;
  out_stream.IBOST_index = out_stream.IBOST_maskoff =
	((fh.IGFH_transparent != 0xFFFF)?((pd.IGPD_width+7)/8):0);
  out_stream.IBOST_maskIndex = 0;
  out_stream.IBOST_maskCount = 0;
  out_stream.IBOST_transparent = fh.IGFH_transparent;
  out_stream.IBOST_mask = 0;

  if(out_stream.IBOST_mem == NULL)
	 status = IBS_NO_MEMORY;

  /* read pic data */
  if(status == IBS_NO_ERROR)
	 status = ImpGIFReadPic(params, &pd, &out_stream);

  if(status != IBS_NO_ERROR)
  {
	 bmstate = GrEditBitmap(params->IBP_dest, out_stream.IBOST_block, 0);
	 GrDestroyBitmap(bmstate, BMD_KILL_DATA);
  };

  /* free buffer line */
  if(out_stream.IBOST_mem != NULL)
	 MemFree(out_stream.IBOST_mem);

  if(params->IBP_status != NULL)
	 @call params->IBP_status::MSG_SB_END_PROCESS();

  return(status);
};

ImpBmpStatus _pascal ImpGIFTestFile(FileHandle file)
{
  int result;
  byte read[3];

  if(FilePos(file, 0, FILE_POS_START)!=0)
	 return(IBS_WRONG_FILE);
  result = FileRead(file, &read, 3, 0);
  if(result == -1)
	 return(IBS_SYS_ERROR);
  if(result != 3)
	 return(IBS_WRONG_FILE);
  if(strncmp((const char *) read, "GIF", 3) == 0)
	 return(IBS_NO_ERROR);
  return(IBS_WRONG_FORMAT);
};
