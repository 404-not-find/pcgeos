/*
 **************************************************************************
 *  FILE:		rpt_mtds.goc
 *  PROJECT:		HomeBase
 *  DESCRIPTION:	This file has methods for the reports
 *			functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "hbase.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/* Declare UI object references to those in hbase.goc */
@extern object TextWindow;
@extern object ReportGroup;
@extern object RDBFileSel;
@extern object RDBDateSel;
@extern object RDBFNameSel;
@extern object RDBFirstOnlySel;
@extern object HBaseDocumentGroup;
@extern object RDBWhichSumSel;
@extern object RDBSumSel;
@extern object RDBSumSect;
@extern object RDBRAllSel;
@extern object RDBRFromToSect;
@extern object RDBRFromSel;
@extern object RDBRFromVal;
@extern object RDBRToVal;
@extern object HBaseApp;

@extern chunk TotalString;


/****************************************************************************
 *		Code for HBaseProcessClass Reports
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_REPORT for HBaseProcessClass
 *
 * DESCRIPTION:	Fills in the report text object based on the dbox
 *              selections.
 *     
 *              
 *
 ***********************************************************************/

@extern method HBaseProcessClass, MSG_CREATE_REPORT
{
    char		reportBuffer[100];
    char		strBuffer[(10 * DATA_LEN)];
    char		fileName[FILE_LONGNAME_BUFFER_SIZE];
    char		sumBuffer[FLOAT_TO_ASCII_HUGE_BUF_LEN + 1];
    optr		currentDoc;
    word		i, firstSelect, sumSelect, fromToSelect;
    word		fileSelect, dateSelect, nameSelect, error;
    word		fromNum, toNum;
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		currentGroup, currentGroupRec;
    word		bufCount, fieldCount, currentNumGroupRecs;
    char		fieldString[DATA_LEN];
    word		j, k, sumField;
    char		dateString[DATE_TIME_BUFFER_SIZE + 1];
    TimerDateAndTime	date;
    VMBlockHandle	vmbh;
    VMMapStruct		*VMmapPtr;
    MemHandle		mh;
    WWFixed		size;
    FloatNum		sumValue = 0;
    FloatNum		fieldValue;
    char *		msgString;
    char		charBuffer[2];
    char		numOnlyString[DATA_LEN];
    Tab Rpt1Tab = {
	  2 * 8 * PIXELS_PER_INCH, /* a 2" left tab */
	  TL_NONE | TT_LEFT,
	  SDM_100,
	  0,
	  0,
	  NULL
	};

    /* delete any old text */
/*    @call TextWindow::MSG_VIS_TEXT_DELETE_ALL();

    /* mark app busy */
    @send HBaseApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* set size and font */
    size.WWF_int  = 12;
    size.WWF_frac = 0;
    @send TextWindow::MSG_VIS_TEXT_SET_POINT_SIZE(
                size, TEXT_ADDRESS_PAST_END, 0);
    @send TextWindow::MSG_VIS_TEXT_SET_FONT_ID(
                FID_DTC_URW_MONO, TEXT_ADDRESS_PAST_END, 0); 
    /* Set the tab */
    @call TextWindow::MSG_VIS_TEXT_SET_TAB(Rpt1Tab, TEXT_ADDRESS_PAST_END, 0);

    /* now see if we're to use file name in title... */
    fileSelect = @call RDBFileSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see if we're to use date in title... */
    dateSelect = @call RDBDateSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see what records we're to show ... */
    fromToSelect = @call RDBRFromSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    if (fromToSelect == R_FROM) {
       fromNum = @call RDBRFromVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
       toNum = @call RDBRToVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
       }
      else  {
       fromNum = 1;
       toNum = numRecords;
       }
    /* see if we're to show field names... */
    nameSelect = @call RDBFNameSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see if we're to show 1st field only... */
    firstSelect = @call RDBFirstOnlySel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see if we're to sum a field ... */
    sumSelect = @call RDBSumSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    if (sumSelect == R_SUM) 
       sumField = @call RDBWhichSumSel::MSG_GEN_VALUE_GET_INTEGER_VALUE();
      else sumField = 0;

    /* Open the report window */
    @call ReportGroup::MSG_GEN_INTERACTION_INITIATE();

    /* display the title */
    reportBuffer[0] = 0;
    if (fileSelect == R_TITLE)  {
       /* put in the file name */
		 currentDoc = @call HBaseDocumentGroup
                   ::MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE(HBFile);
       @call currentDoc::MSG_GEN_DOCUMENT_GET_FILE_NAME(fileName);
		 strcpy(reportBuffer, "\t");
       strcat(reportBuffer, fileName);
       strcat(reportBuffer, "\r");
       }
    if (dateSelect == R_DATE)  {
       /* put in the system date */
       TimerGetDateAndTime(&date);
       LocalFormatDateTime(dateString, DTF_LONG_NO_WEEKDAY_CONDENSED, &date);
       strcat(reportBuffer, "\t");
       strcat(reportBuffer, dateString);
       strcat(reportBuffer, "\r\r");
       }
    @call TextWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(reportBuffer, 0);
    reportBuffer[0] = 0;
    /* done with title stuff */

    /* now go for the data */
    for (i = (fromNum - 1); i <= (toNum - 1); i++)  {
       /* first get the cG and cGR based on currentRecord */
       GetGroupAndGrpRec (i,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);

       /* Get the record info */
       mapPtr = DBLockMap(HBFile);
       group = (GroupStruct *) (mapPtr + 1);
       groupGroup = group[currentGroup].GS_group;
       /* Extract the item handle for the record. */
       indexItem = group[currentGroup].GS_indexStart;
       DBUnlock(mapPtr);

       /* get the index array address */
       index = DBLock(HBFile, groupGroup, indexItem);
       recordItem = index[currentGroupRec];
       DBUnlock(index);

       /* get the record struct address */
       record = DBLock(HBFile, groupGroup, recordItem);
       /* copy the record to the buffer */
       strcpy(strBuffer, record->RS_data);
       DBUnlock(record);

       /* and each field data */
       bufCount = 0;
       for (j = 1; j <= numFields; j++)  {
          /* did user want field names? */
	  if (nameSelect == R_FNAME)  {
	     /* insert the field name */
	     vmbh = VMGetMapBlock(HBFile);
             VMmapPtr = (VMMapStruct *) VMLock(HBFile, vmbh, &mh);
	     switch (j)  {
		case 1: strcat(reportBuffer, VMmapPtr->VMS_fn1);
                   break;
		case 2: strcat(reportBuffer, VMmapPtr->VMS_fn2);
                   break;
		case 3: strcat(reportBuffer, VMmapPtr->VMS_fn3);
                   break;
		case 4: strcat(reportBuffer, VMmapPtr->VMS_fn4);
                   break;
		case 5: strcat(reportBuffer, VMmapPtr->VMS_fn5);
                   break;
		case 6: strcat(reportBuffer, VMmapPtr->VMS_fn6);
                   break;
		case 7: strcat(reportBuffer, VMmapPtr->VMS_fn7);
                   break;
		case 8: strcat(reportBuffer, VMmapPtr->VMS_fn8);
                   break;
		case 9: strcat(reportBuffer, VMmapPtr->VMS_fn9);
                   break;
		case 10: strcat(reportBuffer, VMmapPtr->VMS_fn10);
                   break;
		} /* end of switch */
             VMUnlock(mh);
	     strcat(reportBuffer, "\t");
             }  /* end of insert field name if */

          /* now the data */
	  for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
	     if (strBuffer[bufCount] != '~')  {  /* fill fieldStr */
		fieldString[fieldCount] = strBuffer[bufCount];
	        bufCount++;
                }
	     else  {   /* end of field */
	        fieldString[fieldCount] = NULL;
		bufCount++;

	        /* collect the field data */
	        /* indent fields after 1 */
	        if ((j != 1) && (nameSelect != R_FNAME))
	           strcat(reportBuffer, "   ");
		strcat (reportBuffer, fieldString);
	        strcat (reportBuffer, "\r");

                /* are we summing? */
	        if (j == sumField) {
                   /* initialize numOnlyString */
                   numOnlyString[0] = 0;

                   /* cycle through string stripping non number stuff */
		   for (k = 0; k <= (strlen(fieldString)); k++) {
                      /* test the ith char */
		      if (LocalIsNumChar((word)fieldString[k]))  {
                         /* add the char to number string */
			 charBuffer[0] = fieldString[k];
                         charBuffer[1] = '\000';
                         strcat(numOnlyString, charBuffer);
	                 }
                      }

                   /* convert to a value */
                   FloatAsciiToFloat(FAF_STORE_NUMBER,
		               strlen(numOnlyString),
		               numOnlyString,
			       &fieldValue);

                   sumValue += fieldValue;

	           } /* end of are we summing */

		fieldCount = DATA_LEN; /* force exit loop */
	        }  /* end field else */

	     } /* end this field for */

	  /* check if 1st field only */
	  if (firstSelect == R_FIRST) j = numFields;

	  if ((j == numFields) && (firstSelect != R_FIRST))
		    strcat (reportBuffer, "\r");

	  /* show the line */
          @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
          reportBuffer[0] = 0;


       } /* end of field data for */

    } /* end of loop thru records for */

    /* show sum if selected */
    if (sumSelect == R_SUM) {
       /* buffer the total string */
       MemLock (OptrToHandle(@TotalString));
       msgString = LMemDeref(@TotalString);
       strcpy(reportBuffer, msgString);
       MemUnlock (OptrToHandle(@TotalString));

       /* buffer the field name */
       /* get our VMmap block */
       vmbh = VMGetMapBlock(HBFile);
       VMmapPtr = (VMMapStruct *) VMLock(HBFile, vmbh, &mh);
       switch (sumField) {
	  case 1: strcat(reportBuffer, VMmapPtr->VMS_fn1);
             break;
	  case 2: strcat(reportBuffer, VMmapPtr->VMS_fn2);
             break;
	  case 3: strcat(reportBuffer, VMmapPtr->VMS_fn3);
             break;
	  case 4: strcat(reportBuffer, VMmapPtr->VMS_fn4);
             break;
	  case 5: strcat(reportBuffer, VMmapPtr->VMS_fn5);
             break;
	  case 6: strcat(reportBuffer, VMmapPtr->VMS_fn6);
             break;
	  case 7: strcat(reportBuffer, VMmapPtr->VMS_fn7);
             break;
	  case 8: strcat(reportBuffer, VMmapPtr->VMS_fn8);
             break;
	  case 9: strcat(reportBuffer, VMmapPtr->VMS_fn9);
             break;
	  case 10: strcat(reportBuffer, VMmapPtr->VMS_fn10);
	     break;
          } /* end case */
       VMUnlock(mh);

       strcat(reportBuffer, " is: ");

       /* buffer the number */
       FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
                         NullHandle,
		         NullHandle,
			 &sumValue,
			 sumBuffer);

       strcat(reportBuffer, sumBuffer);
       strcat(reportBuffer, "\r");
       @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
       }

    @send HBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    /* and make the text obj the target */
    @send TextWindow::MSG_META_GRAB_TARGET_EXCL();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SUM_SELECT_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	turns field select GenValue on and off
 *              and 1st field only
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_SUM_SELECT_APPLY
{

    if (selection == R_SUM)  {
       @send RDBWhichSumSel::MSG_GEN_SET_ENABLED(VUM_NOW);
       @send RDBWhichSumSel::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(numFields));
       @send RDBFirstOnlySel::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       }
      else  {
       @send RDBWhichSumSel::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       @send RDBFirstOnlySel::MSG_GEN_SET_ENABLED(VUM_NOW);
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_FIRST_ONLY_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	turns sum select on and off
 *
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_FIRST_ONLY_APPLY
{

    if (selection == R_FIRST) 
       @send RDBSumSect::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
      else
       @send RDBSumSect::MSG_GEN_SET_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_ALL_RECORDS_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	turns from/to on and off
 *
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_ALL_RECORDS_APPLY
{

    if (selection == R_ALL) 
       @send RDBRFromToSect::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
      else
       @send RDBRFromToSect::MSG_GEN_SET_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FROM_TO_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	turns from/to GenValues on and off
 *              and all records
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_FROM_TO_APPLY
{

    if (selection == R_FROM)  {
       @send RDBRFromVal::MSG_GEN_SET_ENABLED(VUM_NOW);
       @send RDBRFromVal::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(numRecords));
       @send RDBRToVal::MSG_GEN_SET_ENABLED(VUM_NOW);
       @send RDBRToVal::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(numRecords));
       @send RDBRAllSel::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       }
      else  {
       @send RDBRFromVal::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       @send RDBRToVal::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       @send RDBRAllSel::MSG_GEN_SET_ENABLED(VUM_NOW);
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_FROM_VAL_STATUS for HBaseProcessClass
 *
 * PARAMETERS:  void (WWFixedAsDWord value, word stateFlags)
 *
 * DESCRIPTION:	keeps from and to in synch
 *
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_FROM_VAL_STATUS
{
    word	toNum, fromNum;


    toNum = @call RDBRToVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
    fromNum = IntegerOf(value);

    /* keep to <= from */
    if (toNum < fromNum)  {
       @call RDBRToVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(fromNum, FALSE);
       }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_TO_VAL_STATUS for HBaseProcessClass
 *
 * PARAMETERS:  void (WWFixedAsDWord value, word stateFlags)
 *
 * DESCRIPTION:	keeps from and to in synch
 *
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_TO_VAL_STATUS
{
    word	toNum, fromNum;


    fromNum = @call RDBRFromVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
    toNum = IntegerOf(value);

    /* keep from <= to */
    if (fromNum > toNum)  {
       @call RDBRFromVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(toNum, FALSE);
       }
}

