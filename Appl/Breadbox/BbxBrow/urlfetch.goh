/***********************************************************************
 *
 * PROJECT:	  HTMLView
 * FILE:      HTMLFetch.goh
 *
 * AUTHOR:	  Lysle Shields
 *
 ***********************************************************************/

/* Routines: */
Boolean URLFetchEngineStart(void) ;
void URLFetchEngineStop(void) ;
#if PROGRESS_DISPLAY
void URLFetchRequest(
         NameToken url,
         word loadMode,
         HTMLFormDataHandle postData,
	 NameToken referer,
         optr ackObject,
         Message ackMessage,
         dword extraData, _LoadProgressParams_) ;
#else
void URLFetchRequest(
         NameToken url,
         word loadMode,
         HTMLFormDataHandle postData,
	 NameToken referer,
         optr ackObject,
         Message ackMessage,
         dword extraData) ;
#endif
void URLFetchEngineAbortAll(Boolean ignoreAbortMsg) ;
optr URLFetchExtraMemoryAlloc(word size) ;
void URLFetchExtraMemoryFree(optr extraMem) ;
void *URLFetchExtraMemoryLock(optr em) ;
void URLFetchExtraMemoryUnlock(optr em) ;
#define URLFetchExtraMemoryDeref(em)   LMemDeref(em)

/* Data returned when a URL is fetched */
typedef struct {
    NameToken url ;                 /* Note what URL we just loaded */
    TCHAR mimeType[MIME_MAXBUF] ;    /* Type of URL */
    TCHAR curHTML[PATH_BUFFER_SIZE]; /* Filename of the HTML item */
    word retType ;                  /* Type and flags of response */
    dword htmlMsg ;                 /* Response data */
    dword extraData ;               /* Optional extra data */
                                    /* (passed to URLFetchRequest) */
    NameToken anchor ;              /* updated anchor passed back */
} URLFetchResult ;

/* Define a prototype for a URL acknowledgement */
@prototype void URL_FETCH_ACK(MemHandle urlFetchMem);

/* Use this macro at the end of all URL_FETCH_ACK methods */
/* NOTE:  The memory block urlFetchMem MUST be freed */
/*        by the handling method.  This macro handles that. */
#define URLFetchAckComplete()  \
           { MemFree(urlFetchMem) ;  urlFetchMem = NullHandle ; }

#if PROGRESS_DISPLAY
/* needed by import thread to create appropriate number of import threads */
extern int G_numFetchChildren;
#endif

typedef struct {
    dword requestToken ;   /* Request identifier */
    NameToken anchor ;     /* Frame anchor */
    NameToken referer ;    /* Referring URL */
    Boolean objCache ;     /* Cache flag when request made */
    word dir ;
} HTMLV_URLRequestState ;

