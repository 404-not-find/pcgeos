
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			sch_mtds.goc
 *  PROJECT:		GPCBase
 *  DESCRIPTION:	This file has methods for the search
 *			functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "gpcbase.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/* init globals for the Search Next functionality */
word SNChar = 0;
word SNField = 1;
word SNRecord = 0; 

/****************************************************************************
 *		Code for GPCBaseProcessClass Search
 ***************************************************************************
 */

 /***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_FIND for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:	Calls the dialog box when the menu item
 *              	is clicked
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_OPEN_FIND
{


    /* check for changes in displayed data */
    if (CheckForChanges()) return;

    /* set the buttons */
    @send FDBSearch::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send FDBSearchNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* clear the text */
    @call FDBSearchText::MSG_VIS_TEXT_DELETE_ALL();

    /* Open the dialog box */
    @call FindDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SEARCH_FIELDS for GPCBaseProcessClass
 *              (int whichSearch)
 *
 * DESCRIPTION:
 *
 *
 *
 *
 ***********************************************************************/

@extern method GPCBaseProcessClass, MSG_SEARCH_FIELDS
{
 char		searchStr[DATA_LEN];
 word		length, i;
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		j, k, passField;
 sword		match;
 word		bufCount, fieldCount;
// char		strBuffer[(MAX_FIELDS * DATA_LEN)];
 char		fieldString[DATA_LEN], dateString[11];
 MemHandle	mh;
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 optr fieldOptr[MAX_FIELDS] = {
    @Field1,
    @Field2,
    @Field3,
    @Field4,
    @Field5,
    @Field6,
    @Field7,
    @Field8,
    @Field9,
    @Field10
} ;


    /* check for changes in displayed data */
    if(CheckForChanges()) return;

    /* is this a FIRST search? */
    if (whichSearch == FIRST)  SNRecord = 0;

    /*get the search string */
    length = @call FDBSearchText::MSG_VIS_TEXT_GET_ALL_PTR(searchStr);

    /* set match to none found */
    match = 1;

    /* start the search */
    for (i = SNRecord; i < numRecords; i++)  {
	  /* get the record struct address */
	  GetGroupAndItem (&groupGroup, &recordItem, i);
	  record = DBLock(GPCBFile, groupGroup, recordItem);
	  /* copy the record to the buffer */
    //	  strcpy(strBuffer, record->RS_data);
   //	  DBUnlock(record);

	  /* is this a FIRST search? */
	  if (whichSearch == FIRST) SNField = 1;

	  /* now cycle the data into the fieldString */
	  bufCount = 0;
	  passField = 1;
	  /* first - count past already searched fields */
	  while (passField < SNField)  {
		if (record->RS_data[bufCount] == (char) FIELD_SEP) passField++;
		bufCount++;
		}
	  /* and get the next field info */
	  for (j = SNField; j <= numFields; j++)  {
		for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		   if (record->RS_data[bufCount] != (char) FIELD_SEP)  {  /* fill fieldStr */
			 fieldString[fieldCount] = record->RS_data[bufCount];
			 bufCount++;
			 }
		   else  {   /* end of field */
			 fieldString[fieldCount] = NULL;
			 bufCount++;

			 /* do we need to conv to local date? */
			 vmbh = VMGetMapBlock(GPCBFile);
			 VMmapPtr = VMLock(GPCBFile, vmbh, &mh);
			 if (VMmapPtr->VMS_fieldType[j-1] == T_DAT)  {
			    ConvFromDateNum(fieldString, dateString);
			    strcpy(fieldString, dateString);
			    }
			 VMUnlock(mh);

			 /* check lengths - no match if searchStr > dataStr */
			 if (strlen(fieldString) >= length) {
			    /* is this a FIRST search? */
			    if (whichSearch == FIRST) SNChar = 0;

			    /* check for match */
			    for (k = SNChar; k <= (strlen(fieldString) - length); k++) {
				  /* compare strings ignoring case */
				  match = LocalCmpStringsNoCase(searchStr,
						 &fieldString[k],
						 length);

				  if (match == 0)  { /* found one! */
					@send FDBSearchNext::MSG_GEN_SET_ENABLED(VUM_NOW);
					@send FDBSearch::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
					/* save our search indices here */
					SNChar = k + 1;
					SNField = j;
					SNRecord = i;
					/* show the found record */
					currentRecord = i;

					ShowData();

					/*  hi-lite the found string here */
					@send fieldOptr[j-1]::MSG_META_GRAB_FOCUS_EXCL();
					@send fieldOptr[j-1]::MSG_META_GRAB_TARGET_EXCL();
					/* this line ensures that the whole found string
					 * will be visible in the text window */
					@call fieldOptr[j-1]::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
							    k + length, k + length);
					@call fieldOptr[j-1]::MSG_VIS_TEXT_SELECT_RANGE_SMALL(
							    k, k + length);
					/* and exit method */
					DBUnlock(record);
					return;
					}  /* end of found if */
				  }  /* end of check for */
			    /* reset SNChar */
			    SNChar = 0;
			    }  /* end of lengths check if */
			 fieldCount = DATA_LEN; /* force exit loop */
			 }  /* end field else */
		   } /* end this field for */

		} /* end cycle thru fields for */
	  /* reset SNField */
       SNField = 1;
	  DBUnlock(record);
	  } /* end of loop thru records for */
    /* reset SNRecord */
    SNRecord = 0;

    if (match != 0)  { /* no match found */
	  /* tell user */
	  @call ContinueFindDBox::MSG_GEN_INTERACTION_INITIATE();
       /* and reset search indices */
       SNChar = 0;
       SNField = 1;
       /* and disable the search next button */
	  @send FDBSearchNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  }


}

 /***********************************************************************
 *
 * MESSAGE:	MSG_SEARCH_DONT_CONTINUE for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:	kills the dialog boxes when the trigger
 *              	is clicked
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SEARCH_DONT_CONTINUE
{


    @send ContinueFindDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
@ifdef GPC_ONLY
    @send FindDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
@endif

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_TEXT_SET_USER_MODIFIED for GPCBaseFindTextClass
 *
 * PARAMETERS:
 *
 * DESCRIPTION:	enables find/find next buttons
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseFindTextClass, MSG_META_KBD_CHAR
{
    if (flags & CF_FIRST_PRESS) {
	  @call self::MSG_GEN_TEXT_SEND_STATUS_MSG(FALSE);
       }
    @callsuper();


}

@extern method GPCBaseProcessClass, MSG_FIND_TEXT_STATUS
{
 char	string[DATA_LEN];


    if (@call FDBSearchText::MSG_VIS_TEXT_GET_ALL_PTR(string)) {
	   @send FDBSearch::MSG_GEN_SET_ENABLED(VUM_NOW);
	   }
    else  {
	   @send FDBSearch::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	   @send FDBSearchNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	   }

}



