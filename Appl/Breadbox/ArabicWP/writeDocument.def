COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		GeoWrite
FILE:		writeDocument.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	2/92		Initial version

DESCRIPTION:
	This file contains the description of the GeoWrite document class

	$Id: writeDocument.def,v 1.1 97/04/04 15:57:40 newdeal Exp $

------------------------------------------------------------------------------@

if _DWP
include Internal/printDr.def
ifdef _VS150
include Internal/redPrint.def
else
include Internal/dwpPrint.def
endif
endif

include system.def
include timedate.def
include initfile.def
include userinfo.def
include Objects/Text/tCtrlC.def
ifdef GPC
include spell.def
endif

WriteDocumentCtrlClass	class	GenDocumentControlClass

;-----------------------------------------------------------------------------
;		Messages
;-----------------------------------------------------------------------------

MSG_WRITE_DC_GET_SELECTED_FILE_TYPE	message
;
; Called when the save-as dialog is up to get the selection from
; the "File Type" item group.
;
; Pass:		nothing
; Return:	cx = WriteDocumentFileType
; Destroyed:	nothing
;

MSG_WRITE_DC_FILE_TYPE_CHANGED		message
;
; Notification message sent out by ItemGroup whenever the user changes
; the file type in the "Save As" dialog box
;
; Pass:		nothing
; Return:	cx = WriteDocumentFileType
; Destroyed:	nothing
;

MSG_WRITE_DC_IMPORT_IN_PROGRESS		message
;
; Note that an import is in progress, so don't display the New/Open
; dialog box until either an import has occurred on an error was
; returned.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
;

MSG_WRITE_DOCUMENT_CONTROL_LAUNCHED_DA message
;
;  Get state of DALaunched value.  It tells if Design assisten has been
;  launched from the Document control object.  This is used whether
;  Design assistent has a right to quit GeoWrite
;  Return: cx - 0 - never launch Design Assistent.  1 - yes.
;

;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Instance Data
;-----------------------------------------------------------------------------

	WDCI_importInProgress	BooleanByte	; set to ignore New/Open
	WDCI_DALaunched	 byte	; keeps track whether Design assisten has
				; been launched from this ctrl object.

WriteDocumentCtrlClass	endc


WriteDocumentClass	class	GenDocumentClass
	uses	VisContentClass

;-----------------------------------------------------------------------------
;		Messages
;-----------------------------------------------------------------------------

ifdef _VS150
MSG_POSITION_CURSOR			message
MSG_POSITION_CURSOR_DELAYED		message
;MSG_META_KBD_CHAR			message
;
; This is the message sent out on any keyboard press or release.
; Subclassed so that PageUp/Down can simulate a mouse click on the screen
; to position the cursor.
;
; Pass:
;	cx = character value
;	dl = CharFlags
;	dh = ShiftState
;	bp low = ToggleState
;	bp high = scan code
; Return:
;	nothing
;	ax, cx, dx, bp - destroyed
;
endif


MSG_WRITE_DOCUMENT_SET_POSITION		message
MSG_WRITE_DOCUMENT_SET_POSITION_ABS	message
;
; Set the current position within the document.  This causes notifications to
; be sent out if this document is the target.
;
; The ABS version always takes a page position, regardless of the display mode
;
; Pass:
;	cx - x position
;	dx.bp - y position
; Return:
;	none

MSG_WRITE_DOCUMENT_INSERT_PAGE		message
;
; Insert a page before the current page
;
; Pass:
;	none
; Return:
;	none

MSG_WRITE_DOCUMENT_APPEND_PAGE		message
;
; Append a page after the current page
;
; Pass:
;	none
; Return:
;	none

MSG_WRITE_DOCUMENT_INSERT_APPEND_PAGES_LOW	message
;
; Low-level routine to insert/append one master page group worth of pages
;
; Pass:
;	cx - section #
;	dx - MSG_WRITE_DOCUMENT_INSERT_PAGE to insert or
;	     MSG_WRITE_DOCUMENT_APPEND_PAGE to append
;	bp - page # in section
; Return:
;	none

MSG_WRITE_DOCUMENT_DELETE_PAGE		message
;
; Delete the current page
;
; Pass:
;	none
; Return:
;	none

MSG_WRITE_DOCUMENT_SET_STARTING_SECTION	message
;
; Set the starting section number
;
; Pass:
;	cx - starting section number
; Return:
;	none

MSG_WRITE_DOCUMENT_SET_DISPLAY_MODE	message
;
; Set the display mode
;
; Pass:
;	cx - VisTextDisplayModes
; Return:
;	none

MSG_WRITE_DOCUMENT_SET_DISPLAY_MODE_LOW	message
;
; Set the display mode without changing any of the UI
;
; Pass:
;	cx - VisTextDisplayModes
; Return:
;	dx - old VisTextDisplayModes

MSG_WRITE_DOCUMENT_SET_TARGET_BASED_ON_TOOL	message
;
; Set the target based on the current tool
;

MSG_WRITE_DOCUMENT_FLOW_REGION_CHANGED	message
;
; Notification that a flow region has been changed
;
; Pass:
;	ss:bp - FlowRegionChangedParams
; Return:
;	bp - data depending on call type

FlowRegionChangedParams	struct
    FRCP_action		GrObjActionNotificationType
    FRCP_object		optr
    FRCP_masterPage	word
    FRCP_article	word
FlowRegionChangedParams	ends

MSG_WRITE_DOCUMENT_RECALC_LAYOUT	message
;
; Recalculate the layout for any sections that need recalculation

MSG_WRITE_DOCUMENT_RECALC_INVAL	message
;
; Recalculate the invalid area of the document

MSG_WRITE_DOCUMENT_GROBJ_PRE_WRAP_NOTIFICATION	message
;
; Notification that a grobj object is about to change its wrap area
;
; Pass:
;	cx:dx  - grobj object
;	bp - VM block of master page (or 0 for main body)

MSG_WRITE_DOCUMENT_GROBJ_WRAP_NOTIFICATION	message
;
; Notification that a grobj object has changed its wrap area
;
; Pass:
;	cx:dx  - grobj object
;	bp - VM block of master page (or 0 for main body)

;---------------

MSG_WRITE_DOCUMENT_INIT_SECTION_LIST	message
;
; Initialize a section list (send # of entries)
;
; Pass:
;	cx:dx - GenDynamicList

MSG_WRITE_DOCUMENT_QUERY_SECTION_LIST	message
;
; Handle a dynamic list query for a section name
;
; Pass:
;	cx:dx - GenDynamicList
;	bp - item number

MSG_WRITE_DOCUMENT_INSERT_SECTION	message
;
; Insert a section
;

MSG_WRITE_DOCUMENT_APPEND_SECTION	message
;
; Insert a section
;

MSG_WRITE_DOCUMENT_DELETE_SECTION	message
;
; Delete a section
;

MSG_WRITE_DOCUMENT_RENAME_SECTION	message
;
; Delete a section
;

MSG_WRITE_DOCUMENT_UPDATE_RENAME_SECTION	message
;
; Update the text object in the rename section dialog box
;

MSG_WRITE_DOCUMENT_CHANGE_PAGE_SETUP	message
;
; Change the page setup
;

MSG_WRITE_DOCUMENT_EDIT_MASTER_PAGE	message
;
; Edit the master page for the current section
;

MSG_WRITE_DOCUMENT_OPEN_MASTER_PAGE	message
;
; Open a master page
;
; Pass:
;	cx - memory handle of master page to open
;

MSG_WRITE_DOCUMENT_EDIT_HEADER	message
;
; Edit the header for the current section
;

MSG_WRITE_DOCUMENT_EDIT_FOOTER	message
;
; Edit the header for the current section
;

MSG_WRITE_DOCUMENT_CREATE_TITLE_PAGE	message
;
; Create a title page
;

MSG_WRITE_DOCUMENT_GOTO_TITLE_PAGE	message
;
; Goto the title page
;
MSG_WRITE_DOCUMENT_DELETE_TITLE_PAGE	message
;
; Delete the title page
;

MSG_WRITE_DOCUMENT_CLOSE_MASTER_PAGE	message
;
; Close a master page
;
; Pass:
;	cx - master page body VM block

MSG_WRITE_DOCUMENT_FINISH_IMPORT	message
;
; Finish importing
;
; Pass:
;	ss:bp - ImpexTranslationParams

MSG_WRITE_DOCUMENT_SET_DOCUMENT_SIZE	message
;
; Set the document size
;
; Pass:
;	ss:bp - RectDWord
; Return:

;--------------------------
; The messages below come from the APPEND_REGION and REGION_IS_LAST
; messages sent to the articles.  They assume things about the ordering
; of these messages, so these messages should be be sent from elsewhere
;--------------------------

MSG_WRITE_DOCUMENT_APPEND_PAGES_VIA_POSITION	message
;
; Append pages after a given position
;
; Pass:
;	cx - x pos
;	dxbp - y pos
; Return:
;	none

MSG_WRITE_DOCUMENT_DELETE_PAGES_AFTER_POSITION	message
;
; Delete all pages in a section after a given position
;
; Pass:
;	cx - x pos
;	dxbp - y pos
; Return:
;	none

MSG_WRITE_DOCUMENT_SEND_TO_ALL_ARTICLES	message
;
; Send a message to all the articles
;
; Pass:
;	cx - message
; Return:
;	none

MSG_WRITE_DOCUMENT_CONTINUE_PRINTING	message
;
; Continue printing...
;
; Pass:
;	cx - message
; Return:
;	none

MSG_WRITE_DOCUMENT_SEND_TO_FIRST_ARTICLE	message
;
; Send a message to the first article
;
; Pass:
;	^lcx:dx	= print control object
;	bp	= gstate
;

MSG_WRITE_DOCUMENT_GENERATE_HELP_FILE				message
;
; Create a help file from the current GeoWrite document
;
; Pass:
;	none
; Return:
;	none

MSG_WRITE_DOCUMENT_GET_GRAPHIC_TOKENS_FOR_STYLE	message
;
; Get the attribute tokens for a graphic style
;
; Pass:
;	cx - style
; Return:
;	cx - line attr token
;	dx - area attr token

MSG_WRITE_DOCUMENT_GET_TEXT_TOKENS_FOR_STYLE	message
;
; Get the attribute tokens for a text style
;
; Pass:
;	cx - style
; Return:
;	cx - char attr token
;	dx - para attr token

MSG_WRITE_DOCUMENT_RESET_REAPPLY_MASTER_PAGE	message
;
; Reapply formatting for a master page
;

MSG_WRITE_DOCUMENT_REAPPLY_EXISTING_MASTER_PAGE	message
;
; Reapply formatting for a master page
;

MSG_WRITE_DOCUMENT_MP_BODY_SUSPEND message
;
; Notification that a master page body has been suspended
;

MSG_WRITE_DOCUMENT_MP_BODY_UNSUSPEND message
;
; Notification that a master page body has been unsuspended
;

MSG_WRITE_DOCUMENT_PRINTING_CANCELLED message
;
; Notification to self that printing has been cancelled (only used if
; SINGLE_PAGE_SPOOLING is set, but defined always for simplicity)
;

MSG_WRITE_DOCUMENT_GET_TOC_CONTEXT_MONIKER message	; _INDEX_NUMBERS only
; get the appropriate moniker for the list of TOC contexts for the current
; article

MSG_WRITE_DOCUMENT_TOC_CONTEXT_LIST_VISIBLE message	; _INDEX_NUMBERS only
; update the list of contexts for the TOC shme

MSG_WRITE_DOCUMENT_GET_STATE		message
;
; Return the document state.   Currently only available with SINGLE_PAGE_-
; SPOOLING = TRUE, since it's not needed elsewhere.
;
; Pass:		nothing
; Return:	ax -- WriteDocumentState
;		cx, dx, bp -- preserved
;

MSG_WRITE_DOCUMENT_GET_TOKEN_FOR_CONTEXT	message	; _INDEX_NUMBERS only
;
; Return the proper token, as would be stored in a type run, for a given
; context in the current article.
;
; Pass:		cx - context index (current file)
; Return:	cx - context token (CA_NULL_ELEMENT if context invalid)
; 

MSG_WRITE_DOCUMENT_DO_REGION_LIMIT_WARNING	message	; _REGION_LIMIT only
;
; If still necessary, put up the region limit warning.
;
; Pass:		nothing
; Return:	nothing
;

MSG_WRITE_DOCUMENT_UNSUSPEND_WIN_UPDATE message
;
; A message to call WinUnsuspend, so the timing should allow
; internal dirty work be completed before calling WinUnSuspend.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

ifdef GPC
MSG_WRITE_DOCUMENT_CLEAR_SEARCH_WRAP_CHECK message
MSG_WRITE_DOCUMENT_SET_SEARCH_WRAP_CHECK message
; sigh...clear/set below flag

;
; vardata for search
;
TEMP_WRITE_DOCUMENT_NO_SEARCH_WRAP_CHECK	vardata
TEMP_WRITE_DOCUMENT_SEARCH_WRAPPED	vardata
endif


;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

DISTANCE_1_CM		=	227
DISTANCE_1_2_CM		=	113
DISTANCE_2_CM		=	454

DOCUMENT_PROTOCOL_MAJOR	=	3
DOCUMENT_PROTOCOL_MINOR	=	0

DEFAULT_NUMBER_OF_COLUMNS	=	1
DEFAULT_RULE_WIDTH		=	0

US_DEFAULT_COLUMN_SPACING	=	(72/8)*8	;1/8 inch
US_DEFAULT_DOCUMENT_MARGIN	=	72*8		;1 inch
US_DEFAULT_LABEL_MARGIN		=	(72/8)*8	;1/8 inch
US_DEFAULT_DOCUMENT_LEFT_MARGIN	=	US_DEFAULT_DOCUMENT_MARGIN
US_DEFAULT_DOCUMENT_TOP_MARGIN	=	US_DEFAULT_DOCUMENT_MARGIN
US_DEFAULT_DOCUMENT_RIGHT_MARGIN =	US_DEFAULT_DOCUMENT_MARGIN
US_DEFAULT_DOCUMENT_BOTTOM_MARGIN =	US_DEFAULT_DOCUMENT_MARGIN

METRIC_DEFAULT_COLUMN_SPACING	=	113		;5 mm
METRIC_DEFAULT_DOCUMENT_MARGIN	=	454		;20 mm
METRIC_DEFAULT_LABEL_MARGIN	=	113		;5 mm
ifdef NIKE_EUROPE				
METRIC_DEFAULT_DOCUMENT_LEFT_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
METRIC_DEFAULT_DOCUMENT_TOP_MARGIN =	680		;3.0 mm (allow header)
METRIC_DEFAULT_DOCUMENT_RIGHT_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
METRIC_DEFAULT_DOCUMENT_BOTTOM_MARGIN =	680		;3.0 mm (allow footer)
else
METRIC_DEFAULT_DOCUMENT_LEFT_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
METRIC_DEFAULT_DOCUMENT_TOP_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
METRIC_DEFAULT_DOCUMENT_RIGHT_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
METRIC_DEFAULT_DOCUMENT_BOTTOM_MARGIN =	METRIC_DEFAULT_DOCUMENT_MARGIN
endif

MAXIMUM_NUMBER_OF_COLUMNS	=	32

if PZ_PCGEOS
MINIMUM_COLUMN_SPACING		=	57		; .25 cm
MINIMUM_COLUMN_SPACING_INT	=	7
MINIMUM_COLUMN_SPACING_FRAC	=	5676
MAXIMUM_COLUMN_SPACING		=	567		; 2.5 cm
MAXIMUM_COLUMN_SPACING_INT	=	70
MAXIMUM_COLUMN_SPACING_FRAC	=	56763
else
MINIMUM_COLUMN_SPACING		=	9*8
MAXIMUM_COLUMN_SPACING		=	72*8
endif

MAXIMUM_RULE_WIDTH		=	9*8

ifdef _VS150
MINIMUM_LEFT_MARGIN_SIZE	=	18*8			;left = 1/4"
MINIMUM_RIGHT_MARGIN_SIZE	=	18*8			;right = 1/4"
MINIMUM_TOP_MARGIN_SIZE		=	PR_MARGIN_TOP*8		;top = 1/8"
MINIMUM_BOTTOM_MARGIN_SIZE	=	PR_MARGIN_BOTTOM*8	;bottom = 40/72"
else
if PZ_PCGEOS
MINIMUM_MARGIN_SIZE		=	57		; .25 cm
MINIMUM_MARGIN_SIZE_INT		=	7
MINIMUM_MARGIN_SIZE_FRAC	=	5676
else
MINIMUM_MARGIN_SIZE		=	18*8
endif
endif

MINIMUM_LABEL_MARGIN_SIZE	=	9*8		; 1/8" margin for labels
							
if PZ_PCGEOS
MAXIMUM_MARGIN_SIZE		=	3402
MAXIMUM_MARGIN_SIZE_INT		=	425
MAXIMUM_MARGIN_SIZE_FRAC	=	12901
else
MAXIMUM_MARGIN_SIZE		=	6*72*8
endif

HEADER_FOOTER_INSET_X		=	72/4

ifdef _VS150
HEADER_FOOTER_INSET_TOP		=	PR_MARGIN_TOP
HEADER_FOOTER_INSET_BOTTOM	=	PR_MARGIN_BOTTOM
HEADER_FOOTER_SPACING		=	72/8
else
HEADER_FOOTER_INSET_Y		=	72/4
HEADER_FOOTER_SPACING		=	72/4
endif


ifdef _VS150
MINIMUM_HEADER_FOOTER_HEIGHT	=	72/6
else
MINIMUM_HEADER_FOOTER_HEIGHT	=	72/4
endif

FLOW_REGION_BOUNDS_BUMP		=	4

if DBCS_PCGEOS
MAX_MERGE_FEEDBACK_STRING_SIZE	=	96
else
MAX_MERGE_FEEDBACK_STRING_SIZE	=	48
endif
MERGE_FEEDBACK_STRING_NUMBER_LOCATION	= MAX_MERGE_FEEDBACK_STRING_SIZE - UHTA_NULL_TERM_BUFFER_SIZE

if _ABBREVIATED_PHRASE
MAX_ABBREV_PHRASE_PAIR		= 30
MAX_ABBREV_LENGTH		= 8
MAX_PHRASE_LENGTH		= 67
SPACE_BET_STRINGS		= 10
PHRASE_POS			= 100
ABBREV_PHRASE_LENGTH		= 100
endif
;-----------------------------------------------------------------------------
;		Structures -- Map Block
;-----------------------------------------------------------------------------

; The core data for the data file is kept in the map block.

MapBlockHeader	struct
    MBH_meta		LMemBlockHeader

    MBH_charAttrElements word		;VM block of char attr elements
    MBH_paraAttrElements word		;VM block of para attr elements
    MBH_graphicElements word		;VM block of graphic elements
    MBH_typeElements	word		;VM block of type elements
    MBH_nameElements	word		;VM block of name elements
    MBH_textStyles	word		;VM block of text styles 

    MBH_lineAttrElements word		;VM block of line attr elements
    MBH_areaAttrElements word		;VM block of area attr elements
    MBH_graphicStyles	word		;VM block of graphic styles

    MBH_grobjBlock	word		;VM block handle containing body
					;and attribute manager -- chunks are
					;fixed
    MBH_startingSectionNum word		;starting section number
    MBH_totalPages	word		;total pages in document
    MBH_pageSize	XYSize		;page size
    MBH_pageInfo	PageLayout	;page layout
    MBH_displayMode	VisLargeTextDisplayModes
    MBH_draftFont	FontID
    MBH_draftPointSize	word

    MBH_invalidRect	RectDWord
    
    MBH_revisionStamp	FileDateAndTime	; Time when file was last written out

    MBH_reserved	byte 28 dup (?)
MapBlockHeader	ends

; The section array is a name array with the data for each element being
; the following structure

MAX_MASTER_PAGES	=	4

SectionFlags	record
    SF_PAGE_NUMBER_FOLLOWS_LAST_SECTION:1

    SF_NEEDS_RECALC:1
    :14
SectionFlags	end

SectionArrayElement	struct
    SAE_meta1		NameArrayElement

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; This is somewhat kludgy, and we're not saving much by copying 6
; bytes less.  In addition, SAE_startCopyVars is only referenced in
; three consecutive code lines (in the same file).
; So, give me the word Don, and I'll remove the conditions
; 6/12/95 - ptrinh


if _SECTION_SUPPORT or _ALLOW_STARTING_PAGE
    SAE_startCopyVars	label	word
endif

    SAE_flags		SectionFlags
    SAE_startingPageNum word		;starting page number

if not _SECTION_SUPPORT and (not _ALLOW_STARTING_PAGE)
    SAE_startCopyVars	label	word
endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    SAE_numMasterPages	word
    SAE_numColumns	word
    SAE_ruleWidth	word		;points*8, 0 for no rules
    SAE_columnSpacing	word		;points*8
    SAE_leftMargin	word		;points*8
    SAE_topMargin	word		;points*8
    SAE_rightMargin	word		;points*8
    SAE_bottomMargin	word		;points*8

    SAE_endCopyVars	label	word

    SAE_masterPages	word MAX_MASTER_PAGES dup (?)	;VM blocks

	; These variables keep track of the things biffed by deleting
	; regions in the section

    SAE_charsDeleted	dword
    SAE_linesDeleted	dword
    SAE_spaceDeleted	WBFixed

    SAE_numPages	word		;# of pages in section
    SAE_reserved	byte 16 dup (?)
SectionArrayElement	ends

MAX_SECTION_NAME_SIZE	=	32

; The article array is a name array with the following data being stored
; with each name

ArticleArrayElement	struct
    AAE_meta		NameArrayElement
    AAE_articleBlock	word		;VM block of article information
    AAE_reserved1	byte 32 dup (?)
ArticleArrayElement	ends

;-----------------------------------------------------------------------------
;		Structures -- Master Page Block
;-----------------------------------------------------------------------------

MasterPageFlags	record
    MPF_USER_MODIFIED:1
    :15
MasterPageFlags	end

MasterPageBlockHeader	struct
    MPBH_meta		ObjLMemBlockHeader
    MPBH_header		dword		;vm block, chunk handle
    MPBH_footer		dword		;vm block, chunk handle
    MPBH_flags		MasterPageFlags
    MPBH_reserved	byte 32 dup (?)
MasterPageBlockHeader	ends

; The flow region array has an entry for each region of the master page into
; which text can flow

FlowRegionArrayElement	struct
    FRAE_position	XYOffset
    FRAE_size		XYSize
    FRAE_textRegion	dword		;db item
    FRAE_drawRegion	dword		;db item
    FRAE_flowObject	dword		;vm block, chunk handle
    FRAE_ruleObject	dword		;vm block, chunk handle
    FRAE_article	word
    FRAE_reserved	byte 8 dup (?)
FlowRegionArrayElement	ends

;-----------------------------------------------------------------------------
;		Structures -- Article Block
;-----------------------------------------------------------------------------

ArticleRegionArrayElement	struct
    ARAE_meta			VisLargeTextRegionArrayElement
    ARAE_inheritedTextRegion	dword		;db item
    ARAE_drawRegion		dword		;db item
    ARAE_object			dword		;vm block, chunk handle
    ARAE_reserved	byte 8 dup (?)
ArticleRegionArrayElement	ends

;-----------------------------------------------------------------------------
;		Structures -- Other
;-----------------------------------------------------------------------------

WriteDocumentState	record
    WDS_TARGET:1
    WDS_MODEL:1
    WDS_SEND_SIZE_PENDING:1
    WDS_SUSPENDED_FOR_APPENDING_REGIONS:1
    WDS_RECALC_ABORTED:1
    WDS_REPLAY:1			;Redwood-only
    WDS_GOTO_PAGE:1			;Redwood-only
    WDS_PRINT_JOB_ABORTED:1		;Redwood-only
    :8
WriteDocumentState	end

; To keep track of open master pages the document keeps a chunk array with
; an element for each open master page.  This chunk is saved to state.

OpenMasterPage	struct
    OMP_display		hptr
    OMP_content		hptr
    OMP_vmBlock		word
OpenMasterPage	ends

;-----------------------------------------------------------------------------
;		Instance Data
;-----------------------------------------------------------------------------

    WDI_size			PointDWord	;content's size (not including
						;page margin)
    WDI_pageHeight		word		;page height
    WDI_currentPage		word		;starting at 0
    WDI_currentSection		word		;starting at 0
    WDI_state			WriteDocumentState
    WDI_mpBodySuspendCount	word
    WDI_suspendCount		word

ifdef _VS150
    WDI_selectCount		word		;Redwood-only
endif

if    _SUPER_IMPEX
    WDI_dosFileName		FileLongName
endif

WriteDocumentClass	endc

;============================================================================

ifdef GPC

WSpellControlClass class SpellControlClass
WSpellControlClass endc

WSearchReplaceControlClass class SearchReplaceControlClass
WSearchReplaceControlClass endc

endif

;============================================================================
;============================================================================

WriteMasterPageContentClass	class	VisContentClass

;-----------------------------------------------------------------------------
;		Messages
;-----------------------------------------------------------------------------

MSG_WRITE_MASTER_PAGE_CONTENT_SET_DOCUMENT_AND_MP	message
;
; Set the associated document
;
; Pass:
;	cx:dx - document
;	bp - master page body block

;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Instance Data
;-----------------------------------------------------------------------------

    WMPCI_document	optr
    WMPCI_mpBodyVMBlock	word

WriteMasterPageContentClass	endc

;============================================================================
;============================================================================

if _ABBREVIATED_PHRASE
WriteAbbrevListClass	class	GenDynamicListClass

;-----------------------------------------------------------------------------
;		Messages
;-----------------------------------------------------------------------------
MSG_WAL_STORE_ABBREV_PHRASE_TO_CHUNK_ARRAY	message
;	To store the abbreviated phrase data base in the chunk array
;	of the WriteAbbrevList object.
;
; Context:	Send when intercept MSG_GEN_PROCESS_OPEN_APPLICATION
; Source:	anything
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed	nothing
; Changed:	nothing

MSG_WAL_GET_ABBREV_PHRASE_TO_DYNAMIC_LIST	message
;	To bring up the abbrevation to the scrollable window in dialog box.
;
; Context:	Send when the user clicks "Abbreviated Phrase"
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed	nothing
; Changed:	nothing

MSG_WAL_LOAD_ABBREV_PHRASE	message
;	To load the abbreviated phrase database from the disk to memory.
;
; Context:	Send when user click "Load.." in abbreviated phrase dialog
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_SAVE_ABBREV_PHRASE	message
;	To save the abbreviated phrase database from the memory to disk
;
; Context:	Send when user click "Save..." in abbreviated phrase dialog
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_ADD_ABBREV_PHRASE	message
;	To add more entries to existing abbreviated phrase database in 
;	memory.
; Context:	Send when user click "Add..." in abbreviated phrase dialog
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_EDIT_ABBREV_PHRASE	message
;	To edit the current selected abbreviated phrase pair.
;
; Context:	Send when user click "Edit" in abbreviated phrase dialog
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_DELETE_ABBREV_PHRASE	message
;	To delete one entry of an existing abbreviated phrase database in
;	memory.
; Context:	Send when user click "Delete..." in abbreviated phrase dialog
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_DELETE_ALL_ABBREV_PHRASE	message
;	To delete all the entries of an existing abbreviated phrase database
;	in memory.
; Context:	Send when user click "Delete All" in abbreviated
; 		phrase dialog.
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_CLEAR_ABBREV_PHRASE	message
;	To clear the handle and chunk of the abbreviation chunk array.
;
; Context:	Send when the user close the application
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_ABBREV_MODIFIED	message
;	This message is sent when the user click apply trigger in the 
;	dialog box where they could edit or add new abbreviated phrase.
;	To take care of updating the dynamic list containing the
;	abbreviated phrase database.  
; Context:	Send when the user click Apply in Add/Edit dialog box
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing
; Changed:	nothing

MSG_WAL_GET_PHRASE_FROM_ABBREV	message
;	This message will send the current text to search through the
; abbreviation database to see if such text exists as an abbreviation.
; If such abbreviation exists, the method will pass out the phrase
; corresponds to that abbreviation.  NOTE:  When pass in the pointer to
; the abbreviation, allocate the maximum length of the phrase so that
; the phrase can be stored to that pointer.
; 
; Context:	Send when the user click "Expand Abbreviation" 
; Source:	UI
; Destination:  a WriteAbbrevListClass object
; Interception: shouldn't
; Pass:		none
; Return:	none	
; Destroyed:	none
; Changed:	none

;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Instance Data
;-----------------------------------------------------------------------------
	WALI_carray	optr 	null
	noReloc	WALI_carray
	WALI_mode	byte	WriteAbbrevModifyFlag
WriteAbbrevListClass	endc

WriteAbbrevModifyFlag	etype	byte
	WAMF_EDIT	enum	WriteAbbrevModifyFlag
	WAMF_ADD	enum	WriteAbbrevModifyFlag

endif

;============================================================================
;============================================================================

if	_DWP
WritePrintCtrlClass		class	PrintControlClass

;-----------------------------------------------------------------------------
;		Messages
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		Instance Data
;-----------------------------------------------------------------------------

WritePrintCtrlClass		endc
endif

;============================================================================
;============================================================================

WriteTemplateWizardDataType	etype	byte
	WTWDT_TEXT		enum	WriteTemplateWizardDataType
	WTWDT_DATE		enum	WriteTemplateWizardDataType
	WTWDT_USER_NAME		enum	WriteTemplateWizardDataType
	WTWDT_USER_ADDRESS	enum	WriteTemplateWizardDataType
	WTWDT_USER_PHONE	enum	WriteTemplateWizardDataType
	WTWDT_USER_EMAIL	enum	WriteTemplateWizardDataType

WriteTemplateWizardState	record
	WTWS_SEARCHING:1
	WTWS_FINISHED:1
	WTWS_REPLACING:1
	WTWS_DESTROYING:1
	WTWS_DETACHING:1
WriteTemplateWizardState	end

ReplacementTextItem	struct
	RTI_dataType		WriteTemplateWizardDataType
	RTI_dataBlock		hptr
	RTI_extraData		word
ReplacementTextItem	ends

WriteTemplateWizardClass	class	GenInteractionClass

MSG_WRITE_TEMPLATE_WIZARD_INITIALIZE		message
;
; Initialize and start template wizard.
;
; Pass:		^lcx:dx	= GenDocumentClass object
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_FIND_NEXT_TAG		message
;
; Find next tag.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_REPLACE_TAG		message
;
; Find next tag.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_PARSE_TAGS		message
;
; Parse tags for template wizard.  (Block must be freed by method.)
;
; Pass:		cx	= block containing tags
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_TAG_NOT_FOUND		message
;
; End template wizard when no more tags.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_CANCEL_AND_CLOSE	message
;
; Cancel template wizard and close document.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_UNDO			message
;
; Undo last change.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_DATE_SELECTED		message
;
; A date has been selected in the TemplateWizardDateGroup.
;
; Pass:		cx	= current selection
;		bp	= number of selections
;		dl	= GenItemGroupStateFlags
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_WRITE_TEMPLATE_WIZARD_FIELD_TEXT_STATUS	message
;
; Status message from TemplateWizardFieldText.
;
; Pass:		bp	= GenTextStateFlags
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

	WTWI_document	optr
	WTWI_state	WriteTemplateWizardState
	WTWI_tagNum	word
	WTWI_dataType	WriteTemplateWizardDataType
	WTWI_textArray	lptr

WriteTemplateWizardClass	endc

;============================================================================
;============================================================================

WriteTemplateImageClass		class	GenGlyphClass

MSG_WRITE_TEMPLATE_IMAGE_SET_IMAGE_PATH	message
;
; Sets the path where we can find the image files
;
; Pass:		cx:dx	= path buffer
;		bp	= disk handle
; Return:	nothing
; Destroyed:	ax, cx, dx, bp
;

MSG_WRITE_TEMPLATE_IMAGE_OPEN_IMAGE_FILE	message
;
; Open image file
;
; Pass:		cx:dx	= fptr to image filename
; Return:	nothing
; Destroyed:	ax, cx, dx, bp
;

MSG_WRITE_TEMPLATE_IMAGE_CLOSE_IMAGE_FILE	message
;
; Close image file
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp
;

	WTI_pathBuffer	PathName
	WTI_pathDisk	hptr
	WTI_bitmap	optr
	WTI_bitmapSize	Point

WriteTemplateImageClass		endc

;============================================================================
;============================================================================

WriteTemplateFieldTextClass	class	GenTextClass
WriteTemplateFieldTextClass	endc

;
; global procedures
;
DocOpenClose	segment	resource
	global ExportDocTransparently:far
	global ImportDocTransparently:far
DocOpenClose	ends

StringsUI	segment	lmem
	global	duplicateContextNameErrorText:chunk
StringsUI	ends
