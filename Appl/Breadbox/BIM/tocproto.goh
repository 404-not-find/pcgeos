/**********************************************************************
 * TOCPROTO.H - TOC Protocol Definitions Header                       *
 * Project - AIM Client                                               *
 * Started 12/27/98                                                   *
 **********************************************************************/

#ifndef __TOCPROTO_GOH
#define __TOCPROTO_GOH

@include <socket.goh>

/**********************************************************************
 * Typedefs, Defines, Enums, Structs...
 **********************************************************************/

#define MAX_USER_NAME_LEN       16
#define MAX_USER_NAME_SZ_LEN    17
#define MAX_PASSWORD_LEN        16
#define MAX_GROUP_NAME_LEN      20
#define MAX_GROUP_NAME_SZ_LEN   21

typedef char BuddyName[MAX_USER_NAME_SZ_LEN];
typedef char GroupName[MAX_GROUP_NAME_SZ_LEN];

typedef struct
{
    Socket          TCD_sock;
    word            TCD_type;
    word            TCD_outSeq;
    word            TCD_inSeq;
    BuddyName       TCD_screenName;
    BuddyName       TCD_normalName;
    MemHandle       TCD_recv;
    MemHandle       TCD_send;
    SemaphoreHandle TCD_sem;
    Boolean         TCD_interrupt;
}
TocConnectionData;

typedef enum {
    RS_NONE,            /* Bad status */
    RS_NO_DATA,         /* No data was received. */
    RS_COMPLETE,        /* The receive completed. */
    RS_PARTIAL,         /* Part of a FLAP was received. */
    RS_ERROR,           /* An error was encountered. */
    RS_INTERRUPT        /* The user interrupted the process. */
} ReceiveStatus;

typedef ByteFlags AddStringFlags;
#define ASF_QUOTES          0x01
#define ASF_PREPEND_SPACE   0x02
#define ASF_NULL_TERM       0x04
#define ASF_DONT_ESCAPE     0x08

typedef ByteEnum TocPermitDenyMode;
#define TOC_PDMODE_PERMIT_ALL   1
#define TOC_PDMODE_DENY_ALL     2
#define TOC_PDMODE_PERMIT_SOME  3
#define TOC_PDMODE_DENY_SOME    4

/**********************************************************************
 * Functions                                                          *
 **********************************************************************/

/**** Connection control routines ****/

word TocCreateConnection(TocConnectionData *);
/* Initializes the connection structure.
 * Returns zero if no error.
 * Returns non-zero if out of memory.
 */

word TocConnect(TocConnectionData *acd, const char *password);
/* Connects to the remote server.
 * Returns zero if no error.
 * Returns non-zero for all errors; usually a SocketError value.
 */

void TocDisconnect(TocConnectionData *);
/* Disconnects from the remote server. */

void TocDestroyConnection(TocConnectionData *);
/* Destroys the connection structure. */

void TocSetConnectStatus(optr message);
/* Sets the VisMoniker for the connection status dialog if message is not
 * NullOptr, otherwise dismisses the dialog.
 */

/**** Receive routines ****/

ReceiveStatus TocReceiveFromToc(TocConnectionData *acd, word timeout);
/* Receives data from the remote server.
 * timeout is the timeout value used in calls to SocketRecv.
 * Returns a ReceiveStatus value to indicate success or failure:
 *   RS_NO_DATA - no data was received before the timeout expired.
 *   RS_COMPLETE - a complete packet was received and can be read.
 *   RS_PARTIAL - only a portion of a packet was received before the timeout.
 *   RS_ERROR - an error was returned by SocketRecv.
 *   RS_INTERRUPT - the receive was interrupted by TocReceiveInterrupt.
 */
 
byte *TocReceiveGetBuffer(TocConnectionData *, word *length);
/* Returns a pointer to the latest data received from the remote server.
 * If not null, length will be set to the length of the data.
 * The receive buffer must be locked before calling this routine, otherwise
 *   NULL will be returned.  The buffer is locked after RS_COMPLETE is returned
 *   by TocReceiveFromToc.
 */
 
void TocReceiveUnlockBuffer(TocConnectionData *);
/* Unlocks and clears the receive buffer.  After this routine is called,
 * the pointer returned by TocReceiveGetBuffer is considered invalid.
 */
 
void TocReceiveInterrupt(TocConnectionData *);
/* Interrupts a connect or receive in progress.  Usually called by a thread
 * other than the one performing the connect or receive.
 */

/**** Send routines ****/

word TocSendAddBuffer(TocConnectionData *, byte *data, word datalen);
/* Adds the byte buffer pointed to by data to the send buffer.
 * Returns zero if no error.
 * Returns non-zero if the connection is invalid or the size limit of the
 *   send buffer would be exceeded.
 */

word TocSendAddString(TocConnectionData *, const char *string, AddStringFlags asf);
/* Adds the null-terminated string pointed to by string to the send buffer.
 * asf may be set to any combination of the following flags:
 *   ASF_QUOTES - place double quotes around the string.
 *   ASF_PREPEND_SPACE - place a space before the string.
 *   ASF_NULL_TERM - append a null terminator after the string.
 *   ASF_DONT_ESCAPE - don't escape special characters in the string
 *     (don't use backslash encoding).
 *
 * Returns zero if no error.
 * Returns non-zero if the connection is invalid or the size limit of the
 *   send buffer would be exceeded.
 */

word TocSendToToc(TocConnectionData *);
/* Sends the data in the send buffer to the remove server and clears the
 *   send buffer.
 * Returns zero if no error.
 * Returns non-zero for all errors; usually a SocketError value.
 */ 

void TocSendClose(TocConnectionData *);
/* Closes the send side of the connection.  Only a disconnect can be done
   after this has been called. */

#endif /* __TOC_H */

