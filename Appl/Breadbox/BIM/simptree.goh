@ifndef __SIMPTREE_GOH
@define __SIMPTREE_GOH

@include <Objects/gItemGC.goh>
@include <Objects/gDListC.goh>

// This is a simple tree list implemented on top of the GenDynamicListClass.
// I say simple because only two levels of branching are supported.
// From the hidden, abstract root can branch any number of level 1 children,
// and from the level 1 children can branch any number of level 2 children.
// Methods exposed to the application will reference level 1 children by
// a zero-based index and level 2 children by a one-based index.

@class GenSimpleTreeListClass, GenDynamicListClass;

// PRIVATE

@instance ChunkHandle   GSTLI_levelArray = NullChunk;   // ChunkArray of LevelStructs
@instance word          GSTLI_levelCount;   // Number of level 1 children

// PUBLIC

#define GSTLAL_LAST     (0xFFFF)

@message void MSG_GEN_SIMPLE_TREE_LIST_ADD_LEVEL(word levelOne, word levelTwo,
   Boolean bOpened);
// (Insert/Append) a level 1 child
    // Flag for opened or closed
// or, (Insert/Append) a level 2 child to a level 1 child

@message void MSG_GEN_SIMPLE_TREE_LIST_REMOVE_LEVEL(word levelOne, word levelTwo);
// Remove a level 1 child and all level 2 children under it
// or, Remove a level 2 child

@message void MSG_GEN_SIMPLE_TREE_LIST_INITIALIZE();
// Remove all level 1 and level 2 children

@prototype void GEN_SIMPLE_TREE_LIST_QUERY_MSG(optr list, word levelOne,
    word levelTwo);
// Prompt for update of a level 1 or level 2 child

#define GSTLGS_LEVEL_ONE(dw) ((dw) >> 16)
#define GSTLGS_LEVEL_TWO(dw) ((dw) & 0xFFFF)
    
@message dword MSG_GEN_SIMPLE_TREE_LIST_GET_SELECTION();
// Get current selection state
// Level one or GIGS_NONE is in high word
// Level two is in low word

@message void MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_MONIKER(
		word levelOne, word levelTwo, ReplaceItemMonikerFlags flags, 
		word height, word width, word length,
		VisMonikerDataType dataType,
		VisMonikerSourceType sourceType,
		dword source);

@message void MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_MONIKER_OPTR(word levelOne,
                    word levelTwo, optr moniker);

@message void MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_TEXT(word levelOne,
                    word levelTwo, char *text);

typedef WordFlags GSTLReplaceItemFlags;
#define GSTLRIF_DRAW_TEXT_GRAYED    0x8000

@message void MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_BITMAP_AND_TEXT(
    word levelOne, word levelTwo, optr bitmap, const char *text,
    word bitmapX, word textX, GSTLReplaceItemFlags flags);
// Methods to replace item moniker.

@message Boolean MSG_GEN_SIMPLE_TREE_LIST_IS_LEVEL_OPENED(word levelOne);
// Returns TRUE if level is currently opened.

@message void MSG_GEN_SIMPLE_TREE_LIST_TOGGLE_LEVEL(word levelOne);
// Open/close a level, usually in response to a double-click.

@message void MSG_GEN_SIMPLE_TREE_LIST_MAKE_ITEM_VISIBLE(word levelOne,
                    word levelTwo);
// Scroll the list to make an item visible.  This will expand a level if
// a levelTwo item is in a closed level.
                    
@endc;

@endif

