@include "tocproto.goh"

@ifndef __TOCCFG_GOH
@define __TOCCFG_GOH

/**********************************************************************
 * Typedefs, Defines, Enums, Structs...
 **********************************************************************/

typedef ChunkHandle GroupHandle;

typedef struct
{
    word        CES_groupIdx;
    GroupHandle CES_groupHandle;
    word        CES_buddyIdx;
}
ConfigEnumStruct;

#define INVALID_BUDDY       (CA_NULL_ELEMENT)
#define INVALID_GROUP       (NullChunk)
#define INVALID_GROUP_INDEX ((word)-1)

typedef ByteFlags ConfigListType;
#define CONFIG_LIST_TYPE_BUDDY  0x01
#define CONFIG_LIST_TYPE_PERMIT 0x02
#define CONFIG_LIST_TYPE_DENY   0x03

/**********************************************************************
 * Function Declarations
 **********************************************************************/

/**** Configuration Management Routines ****/

Boolean ConfigInitialize(void);
/* Initializes the configuration structures.
 * Returns zero if no error.
 * Returns non-zero if out of memory.
 */

GroupHandle ConfigGetDefaultGroup(void);
/* Returns the handle to the first buddy group if one exists.
 * Returns INVALID_GROUP if there are no buddy groups.
 */

word ConfigGetGroupCount(void);
/* Returns the total number of buddy groups. */

GroupHandle ConfigGetGroupByIndex(word index, GroupName);
/* Returns the handle to the index of the passed group.
 * Returns INVALID_GROUP if the index was too large.
 * If not NULL, GroupName is set to the name of the indexed group.
 */
 
word ConfigGetGroupIndex(GroupHandle);
/* Returns the index of the group with the passed handle if valid.
 * Returns INVALID_GROUP_INDEX if the handle was invalid.
 */
 
GroupHandle ConfigFindGroup(GroupName);
/* Searches for a buddy group with a name exactly matching the passed group name.
 * Returns the handle of the group if found, otherwise INVALID_GROUP.
 */
 
GroupHandle ConfigAddGroup(GroupName);
/* Adds a buddy group to the configuration and sets its name to the passed name.
 * Returns the handle to the new group on success.
 * Returns INVALID_GROUP if the maximum number of buddy groups has already been
 *   reached.
 */

Boolean ConfigAddBuddyToGroup(GroupHandle, BuddyName, ConfigListType);
/* Adds a buddy to the group with the passed handle.
 * May be used to add buddies to any buddy, permit, or deny group.
 * ConfigListType is used to indicate the type of the group being referenced:
 *   Use CONFIG_LIST_TYPE_BUDDY for normal buddy groups.
 *   Use CONFIG_LIST_TYPE_PERMIT for the permit group.
 *   Use CONFIG_LIST_TYPE_DENY for the deny group.
 * In all cases, the group handle must refer to the proper group.
 * Returns zero on success.
 * Returns non-zero if the maximum number of buddies for the group has already
 *   been reached.
 */
 
word ConfigFindBuddyInGroup(GroupHandle, BuddyName);
/* Searches a specific group for the named buddy.
 * All buddy name comparisons are performed normalized.
 * Returns the index of the buddy if found, otherwise INVALID_BUDDY.
 */
 
Boolean ConfigFindBuddy(GroupHandle *group, BuddyName name,
  Boolean bUpdateConfig);
/* Searches all buddy groups for the named buddy.
 * All buddy name comparisons are performed normalized.
 * If the buddy is found:
 *   If bUpdateConfig is non-zero, ConfigUpdateConfigBuddy() is called with
 *     the passed name.
 *   If not NULL, group is set to the handle of the group containing the user.
 * Returns zero if the buddy was found, otherwise non-zero.
 */
 
void ConfigUpdateConfigBuddy(GroupHandle group, word buddyIdx, BuddyName name);
/* Sets the name of the buddy at the passed index in the passed group.
 * This is useful for updating the config with the proper non-normalized
 * buddy name.
 */

void ConfigRemoveBuddyFromGroup(GroupHandle, BuddyName);
/* Removes the named buddy from the group with the passed handle.
 * May be used to remove buddies from any buddy, permit, or deny group.
 */
 
void ConfigRemoveGroup(word index);
/* Removes the indexed buddy group and all buddies within. */

/**** Configuration Enumeration Routines ****/

GroupHandle ConfigGetFirstGroup(ConfigEnumStruct *, GroupName);
/* Initializes the passed ConfigEnumStruct to the first buddy group.
 * Must be done before calling any of the following enumeration routines
 *   for a newly declared ConfigEnumStruct.
 * If such a group exists:
 *   If not NULL, GroupName is set to the name of the group.
 * Returns the handle of the first group, otherwise INVALID_GROUP.
 */

GroupHandle ConfigGetNextGroup(ConfigEnumStruct *, GroupName);
/* Advances the passed ConfigEnumStruct to the next buddy group.
 * If such a group exists:
 *   If not NULL, GroupName is set to the name of the group.
 * Returns the handle of the new group, otherwise INVALID_GROUP.
 */
 
Boolean ConfigGetFirstBuddy(ConfigEnumStruct *, BuddyName);
/* Initializes the passed ConfigEnumStruct to the first buddy in the
 *   current group.  Must be done before calling ConfigGetNextBuddy.
 * If such a buddy exists:
 *   If not NULL, BuddyName is set to the name of the buddy.
 * Returns zero if such a buddy exists, otherwise non-zero.
 */
 
Boolean ConfigGetNextBuddy(ConfigEnumStruct *, BuddyName);
/* Advances the passed ConfigEnumStruct to the next buddy in the
 *   current group.
 * If such a buddy exists:
 *   If not NULL, BuddyName is set to the name of the buddy.
 * Returns zero if such a buddy exists, otherwise non-zero.
 */

/**** Permit/Deny Access Routines ****/

void ConfigSetPermitDenyMode(TocPermitDenyMode);
/* Sets the current permit/deny mode of the configuration. */

TocPermitDenyMode ConfigGetPermitDenyMode(void);
/* Returns the current permit/deny mode of the configuration. */

GroupHandle ConfigGetPermit(ConfigEnumStruct *);
/* Returns the handle of the permit group.
 * If not NULL, ConfigEnumStruct is initialized to this group.
 */

GroupHandle ConfigGetDeny(ConfigEnumStruct *);
/* Returns the handle of the deny group.
 * If not NULL, ConfigEnumStruct is initialized to this group.
 */

@endif
