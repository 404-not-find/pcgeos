@include <stdapp.goh>
@include <socket.goh>
#include <sockmisc.h>
#include <Ansi/string.h>
#include <sem.h>

@include "aim.goh"
@include "tocproto.goh"
@include "error.goh"
@include "extern.goh"
#include "init.h"
#include "debug.h"
#include "miscfunc.h"

/**********************************************************************
 * Typedefs, Defines, Enums, Structs...
 **********************************************************************/

#ifdef SHOW_MESSAGES
#define SM(x)   x
#else
#define SM(x)
#endif

#define TOC_INIT_KEY_TOC_HOST           "tocHost"
#define TOC_TOC_HOST_DEFAULT            "toc.oscar.aol.com"
#define TOC_INIT_KEY_TOC_PORT           "tocPort"
#define TOC_TOC_PORT_DEFAULT            9999
#define TOC_INIT_KEY_AUTH_HOST          "authHost"
#define TOC_AUTH_HOST_DEFAULT           "login.oscar.aol.com"
#define TOC_INIT_KEY_AUTH_PORT          "authPort"
#define TOC_AUTH_PORT_DEFAULT           5190
#define TOC_INIT_KEY_CONNECT_TIMEOUT    "connectTimeout"
#define TOC_CONNECT_TIMEOUT_DEFAULT     (30 * 60)
#define TOC_FLAP_SIGNON_TIMEOUT         (20 * 60)
#define TOC_FLAP_RECV_TIMEOUT           (10)

typedef ByteEnum FlapFrameType;

#define FFT_SIGNON      0x01
#define FFT_DATA        0x02
#define FFT_ERROR       0x03
#define FFT_SIGNOFF     0x04
#define FFT_KEEPALIVE   0x05

typedef struct {
  byte  FH_start; /* always 0x2a */
  byte  FH_type;
  word  FH_seq;
  word  FH_len;
} FlapHeader;

#define FLAP_START          0x2a

#define FLAP_RECV_LEN_MAX   8192
#define FLAP_SEND_LEN_MAX   1024

#define FLAP_VERSION        0x00000001
#define FLAP_TLV_TAG        0x0001

typedef struct
{
    word        RBH_buflen;
    word        RBH_datalen;
    word        RBH_remain;
    Boolean     RBH_locked;
    FlapHeader  RBH_header;
}
RecvBufHeader;

#define RBH_DATA(rbh)       ( (byte *)(&((rbh)->RBH_header)) )
#define RBH_DATA_END(rbh)   ( RBH_DATA(rbh) + (rbh)->RBH_datalen )
#define RBH_DATA_INIT_SIZE  100

typedef struct
{
    word        SBH_freelen;
    word        SBH_datalen;
    FlapHeader  SBH_header;
}
SendBufHeader;

#define SBH_DATA(sbh)       ( (byte *)(&((sbh)->SBH_header)) )
#define SBH_DATA_END(sbh)   ( SBH_DATA(sbh) + (sbh)->SBH_datalen )
#define SBH_DATA_INIT_SIZE  100

typedef struct {
  TcpAccPntExtendedAddress UTA_link;
  TCHAR                    UTA_ip[MAX_IP_ADDR_STRING_LENGTH_ZT];
} UnresolvedTCPAddress;

typedef struct {
  SocketAddress            RTA_sock;
  TcpAccPntResolvedAddress RTA_addr;
} ResolvedTCPAddress;

typedef struct {
    dword   SF_version;
    word    SF_tag;
    word    SF_namelen;
} SignonFrame;

/**********************************************************************
 * Globals and Locals
 **********************************************************************/

char tcpDomain[] = "TCPIP";

/**********************************************************************
 * Strings
 **********************************************************************/

@start StringResource, data;
@chunk char InitCategoryAim[] = AIM_INIT_CATEGORY_AIM;
@localize not;
@chunk char InitKeyTocHost[] = TOC_INIT_KEY_TOC_HOST;
@localize not;
@chunk char InitKeyTocPort[] = TOC_INIT_KEY_TOC_PORT;
@localize not;
@chunk char InitKeyAuthHost[] = TOC_INIT_KEY_AUTH_HOST;
@localize not;
@chunk char InitKeyAuthPort[] = TOC_INIT_KEY_AUTH_PORT;
@localize not;

@chunk char TocHostDefault[] = TOC_TOC_HOST_DEFAULT;
@localize not;
@chunk char FlapSignon[] = "FLAPON\r\n\r\n";
@localize not;
@chunk char TocSignon[] = "toc_signon";
@localize not;
@chunk char TocLanguage[] = "english";
@localize not;
@chunk char TocClient[] = "Breadbox IM (TOC)";
@localize not;
@chunk char TocAuthDefault[] = TOC_AUTH_HOST_DEFAULT;
@localize not;
@chunk char TocSignonResp[] = "SIGN_ON:";
@localize not;
@chunk char TocErrorResp[] = "ERROR:";
@localize not;
@chunk char TocClientVersion[] = "TOC1.0";
@localize not;
@end StringResource;

/**********************************************************************
 * Functions                                                          *
 **********************************************************************/

void TocInitiateConnectStatus(void);
word TocConnectReceive(TocConnectionData *tcd, ChunkHandle *pError);
void TocReceiveResetBuffer(RecvBufHeader *rbh);
void TocSendResetBuffer(TocConnectionData *tcd);
word TocSendCountEscapes(const char *string);

/**********************************************************************
 * htons() - Host to Network Short                                    *
 **********************************************************************/
#pragma warn -rvl
word htons(word num)
{
    _asm mov ah, byte ptr ss:[num];
    _asm mov al, byte ptr ss:[num + 1];
}
#pragma warn +rvl

#define ntohs(x) htons(x)

/**********************************************************************
 * htonl() - Host to Network Long                                     *
 **********************************************************************/
#pragma warn -rvl
dword htonl(dword num)
{
    _asm mov dh, byte ptr ss:[num];
    _asm mov dl, byte ptr ss:[num + 1];
    _asm mov ah, byte ptr ss:[num + 2];
    _asm mov al, byte ptr ss:[num + 3];
}
#pragma warn +rvl

#define ntohl(x) htonl(x)

void TocSetConnectStatus(optr message)
{
    if (message != NullOptr)
        @call ConnectStatus::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(message,
          VUM_DELAYED_VIA_UI_QUEUE);
    else
        @call ConnectDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
}

void TocInitiateConnectStatus(void)
{
    @call ConnectCancel::MSG_GEN_SET_ENABLED(VUM_NOW);
    @call ConnectDialog::MSG_GEN_INTERACTION_INITIATE();
}

word TocCreateConnection(TocConnectionData *tcd)
{
    word retval = 0;

    tcd->TCD_recv = NullHandle;
    tcd->TCD_send = NullHandle;
    tcd->TCD_sock = 0;
    tcd->TCD_type = 0;
    tcd->TCD_outSeq = 0;
    tcd->TCD_inSeq = 0;
    tcd->TCD_screenName[0] = '\0';
    tcd->TCD_normalName[0] = '\0';
    tcd->TCD_interrupt = FALSE;

    retval = (tcd->TCD_recv = MemAlloc(RBH_DATA_INIT_SIZE, HF_DYNAMIC,
      HAF_STANDARD_LOCK)) == NullHandle;
    if (!retval)
    {
        RecvBufHeader *rbh;

        rbh = MemDeref(tcd->TCD_recv);
        rbh->RBH_buflen = RBH_DATA_INIT_SIZE - sizeof(RecvBufHeader)
          + sizeof(FlapHeader);
        TocReceiveResetBuffer(rbh);
        MemUnlock(tcd->TCD_recv);

        retval = (tcd->TCD_send = MemAlloc(SBH_DATA_INIT_SIZE, HF_DYNAMIC,
          HAF_STANDARD_LOCK)) == NullHandle;
    }
    if (!retval)
    {
        SendBufHeader *sbh;

        sbh = MemDeref(tcd->TCD_send);
        sbh->SBH_header.FH_start = FLAP_START;
        TocSendResetBuffer(tcd);
        MemUnlock(tcd->TCD_send);

        retval = ((tcd->TCD_sem = ThreadAllocSem(1)) == NullHandle);
    }
    return retval;
}

word TocConnectReceive(TocConnectionData *tcd, ChunkHandle *pError)
{
    ReceiveStatus rs = RS_NONE;
    word retval = 0;

    while ((rs = TocReceiveFromToc(tcd, TOC_FLAP_SIGNON_TIMEOUT))
      == RS_PARTIAL)
        /* nop */ ;
    if (rs == RS_ERROR)        /* An error occurred. */
    {
        retval = ThreadGetError();
SM(     printf("TocReceiveFromToc error %d\n", retval); )
        if (!retval)
            retval = TRUE;
        /* display signon - general error message */
        *pError = ChunkOf(@ErrorSignonGeneral);
    }
    else if (rs == RS_NO_DATA)      /* Timeout or empty frame */
    {
SM(     printf("Receive timeout!\n"); )
        retval = TRUE;
        /* display signon - timeout message */
        *pError = ChunkOf(@ErrorSignonTimeout);
    }
    else if (rs == RS_INTERRUPT)    /* User interrupt */
        retval = TRUE;

    return retval;
}

word TocConnect(TocConnectionData *tcd, const char *password)
{
#ifdef USE_SIMULATOR
    /* Set a non-zero sock value to allow other routines to succeed. */
    tcd->TCD_sock = 0xABCD;

    /* Display the connect status: connecting... */
    TocSetConnectStatus(@TocCSConnecting);
    TocInitiateConnectStatus();

    TimerSleep(30);

    /* Display the connect status: authenticating... */
    TocSetConnectStatus(@TocCSAuth);

    TimerSleep(30);

    /* Always return no error. */
    return FALSE;

#else
    UnresolvedTCPAddress    hostname;
    ResolvedTCPAddress      hostaddr = {{{0, MANUFACTURER_ID_SOCKET_16BIT_PORT},
                                        sizeof( tcpDomain ) - 1, tcpDomain, 0}};
    word retval = 0;
    char *p;
    word len;
    byte *buf;
    ChunkHandle error = NullChunk;

    /* Reset the user interrupt indicator. */
    tcd->TCD_interrupt = FALSE;

    /* Display the connect status: connecting... */
    TocSetConnectStatus(@TocCSConnecting);
    TocInitiateConnectStatus();

    /* Fill the unresolved address. */
    /* TBD: currently, we hard code the use of access point #1. Must change. */
    hostname.UTA_link.TAPEA_linkSize = 3;
    hostname.UTA_link.TAPEA_linkType = LT_ID;
    hostname.UTA_link.TAPEA_accPntID = 1;
    GetInitStringOrDefault(@InitCategoryAim, @InitKeyTocHost, hostname.UTA_ip,
      sizeof(hostname.UTA_ip), @TocHostDefault);

    /* Fill the resolved address. */
    hostaddr.RTA_sock.SA_port.SP_port = GetInitIntegerOrDefault(
      @InitCategoryAim, @InitKeyTocPort, TOC_TOC_PORT_DEFAULT);

    /* Resolve the unresolved address. */
    if ((hostaddr.RTA_sock.SA_addressSize = SocketResolve(tcpDomain, (byte*) &hostname,
      sizeof(hostname.UTA_link) + strlen(hostname.UTA_ip), (byte*)&hostaddr.RTA_addr,
      sizeof(hostaddr.RTA_addr))) == 0)
    {
        retval = ThreadGetError();
SM(     printf("SocketResolve error %d\n", retval);     )
    }
    /* Check for user interrupt. */
    else if (tcd->TCD_interrupt)
    {
        retval = SE_INTERRUPT;
    }
    /* Create the socket. */
    else if ((tcd->TCD_sock = SocketCreate(SDT_STREAM)) == 0)
    {
        retval = ThreadGetError();
SM(     printf("SocketCreate error %d\n", retval);      )
    }
    /* Connect to the TOC server. */
    if (!retval)
    {
SM(     printf("Connecting to %s:%d\n", hostname.UTA_ip, hostaddr.RTA_sock.SA_port.SP_port);  )
        retval = SocketConnect(tcd->TCD_sock, (SocketAddress*)&hostaddr, 300);
SM(     if (retval != SE_NORMAL)                            )
SM(         printf("SocketConnect error %d\n", retval);     )
    }
    if (retval)
    {
        if (retval != SE_INTERRUPT)
        {
            /* Display signon - cannot connect to server error */
            error = ChunkOf(@ErrorSignonCantConnect);
        }
    }
    else
    {
        /* Init FLAP connection. */
SM(     printf("Connected, sending FLAPON\n");     )
        MemLock(HandleOf(@FlapSignon));
        p = LMemDeref(@FlapSignon);
        retval = SocketSend(tcd->TCD_sock, p, strlen(p), 0, 0);
        MemUnlock(HandleOf(@FlapSignon));
        if (retval != SE_NORMAL && retval != SE_INTERRUPT)
        {
SM(         printf("SocketSend error %d\n", retval);        )
            /* Display signon - general error */
            error = ChunkOf(@ErrorSignonGeneral);
        }
    }
    if (!retval)
    {
        /* Get response indicating server FLAP version. */
SM(     printf("Waiting for FLAP version response\n");      )

        tcd->TCD_type = FFT_SIGNON;     /* Set sign-on FLAP type */

        retval = TocConnectReceive(tcd, &error);
        if (!retval)
        {
            buf = TocReceiveGetBuffer(tcd, &len);
            if (buf == NULL)
            {
SM(             printf("TocConnect: TocReceiveGetBuffer returned NULL!\n"); )
                retval = TRUE;
            }
            else if (len != sizeof(dword))
            {
SM(             printf("TocConnect: Signon frame was wrong size!\n"); )
                retval = TRUE;
            }
            else if (ntohl(*(dword *)buf) != FLAP_VERSION)
            {
SM(             printf("TocConnect: Signon version incorrect!\n"); )
                retval = TRUE;
            }
            else
SM(             printf("FLAP version received and correct\n"); )

            if (retval)
                /* display signon - general error message */
                error = ChunkOf(@ErrorSignonGeneral);

            TocReceiveUnlockBuffer(tcd);
        }
    }
    if (!retval)
    {
        /* Send FLAP signon request. */
        SignonFrame sf;

SM(     printf("Sending signon request, username %s\n", tcd->TCD_normalName); )

        sf.SF_version = htonl(FLAP_VERSION);
        sf.SF_tag = htons(FLAP_TLV_TAG);
        sf.SF_namelen = htons(strlen(tcd->TCD_normalName));

        TocSendAddBuffer(tcd, (byte*)&sf, sizeof(sf));
        TocSendAddBuffer(tcd, (byte *)tcd->TCD_normalName, ntohs(sf.SF_namelen));
        retval = TocSendToToc(tcd);
    }
    if (!retval)
    {
        /* Send signon command. */
        char authbuf[MAX_IP_ADDR_STRING_LENGTH_ZT];
        word authport;

SM(     printf("Sending toc_signon\n"); )

        /* Display the connect status: authenticating... */
        TocSetConnectStatus(@TocCSAuth);

        tcd->TCD_type = FFT_DATA;       /* Set normal FLAP type */

        MemLock(HandleOf(@TocSignon));
        TocSendAddString(tcd, LMemDeref(@TocSignon), 0);
        GetInitStringOrDefault(@InitCategoryAim, @InitKeyAuthHost, authbuf,
          sizeof(authbuf), @TocAuthDefault);
        TocSendAddString(tcd, authbuf, ASF_PREPEND_SPACE);
        authport = GetInitIntegerOrDefault(@InitCategoryAim, @InitKeyAuthPort,
          TOC_AUTH_PORT_DEFAULT);
        UtilHex32ToAscii(authbuf, authport, UHTAF_NULL_TERMINATE);
        TocSendAddString(tcd, authbuf, ASF_PREPEND_SPACE);
        TocSendAddString(tcd, tcd->TCD_normalName, ASF_PREPEND_SPACE);
        TocSendAddString(tcd, password, ASF_PREPEND_SPACE);
        TocSendAddString(tcd, LMemDeref(@TocLanguage), ASF_PREPEND_SPACE);
        TocSendAddString(tcd, LMemDeref(@TocClient),
          ASF_PREPEND_SPACE | ASF_QUOTES | ASF_NULL_TERM);
        MemUnlock(HandleOf(@TocSignon));
        retval = TocSendToToc(tcd);

        /* Check for user interrupt. */
        if (tcd->TCD_interrupt)
            retval = TRUE;
    }
    if (!retval)
    {
        /* Get signon response. */

SM(     printf("Waiting for signon response\n");      )

        retval = TocConnectReceive(tcd, &error);
        if (!retval)
        {
            buf = TocReceiveGetBuffer(tcd, &len);
            if (buf == NULL)
            {
SM(             printf("TocConnect: TocReceiveGetBuffer returned NULL!\n"); )
                retval = TRUE;
            }
            else
            {
                /* Check for proper command. */
                word plen;
                MemLock(HandleOf(@TocSignonResp));
                p = LMemDeref(@TocSignonResp);
                plen = strlen(p);
                if (strncmp((char *)buf, p, plen))
                {
                    /* Display signon - general error message */
                    error = ChunkOf(@ErrorSignonGeneral);

                    p = LMemDeref(@TocErrorResp);
                    plen = strlen(p);

                    if (!strncmp((char *)buf, p, plen))
                    {
                        char *argv[2];
                        dword srverror;

SM(                     printf("TocConnect: Received %s\n", buf);               )

                        /* Parse authorization errors. */
                        ParseArgs((char *)(buf + plen), 2, argv);
                        if (!UtilAsciiToHex32(argv[0], &srverror))
                        {
                            if ((word)srverror == 980)
                                /* Display signon - incorrect nickname or password */
                                error = ChunkOf(@ErrorSignonAuth);
                            else if ((word)srverror == 981)
                                /* Display signon - service temporarily unavailable */
                                error = ChunkOf(@ErrorSignonUnavailable);
                            else if ((word)srverror == 982)
                                /* Display signon - warning level too high */
                                error = ChunkOf(@ErrorSignonWarning);
                            else if ((word)srverror == 983)
                                /* Display signon - be patient */
                                error = ChunkOf(@ErrorSignonFrequent);
                        }
                    }
                    else
                    {
SM(                     printf("TocConnect: Expected %s, got %s!\n", p, buf);   )
                    }
                    retval = TRUE;
                }
                /* Check for correct client version. */
                else if (strcmp((char *)buf + strlen(p),
                  LMemDeref(@TocClientVersion)))
                {
SM(                 printf("TocConnect: Expected %s, got %s!\n", LMemDeref(@TocClientVersion), (char *)buf + strlen(p));    )
                    /* Display signon - wrong client version error message */
                    error = ChunkOf(@ErrorSignonVersion);
                    retval = TRUE;
                }
                else
                {
SM(                 printf("Signon complete.\n");  )
                }
                MemUnlock(HandleOf(@TocSignonResp));
            }
            TocReceiveUnlockBuffer(tcd);
        }
    }

    if (retval && tcd->TCD_sock)
    {
        ThreadPSem(tcd->TCD_sem);
        SocketClose(tcd->TCD_sock);
        tcd->TCD_sock = 0;
        ThreadVSem(tcd->TCD_sem);
    }

    /* Display an error message if an error was set. */
    if (error != NullChunk)
        ErrorDisplaySignon(error, retval);

    return retval;
#endif /* USE_SIMULATOR */
}

void TocDisconnect(TocConnectionData *tcd)
{
    ThreadPSem(tcd->TCD_sem);

    if (tcd->TCD_sock)
    {
#ifndef USE_SIMULATOR
        SocketClose(tcd->TCD_sock);
SM(     printf("TocDisconnect: Socket closed\n");   )
#endif /* USE_SIMULATOR */
        tcd->TCD_sock = 0;
    }

    ThreadVSem(tcd->TCD_sem);
}

void TocDestroyConnection(TocConnectionData *tcd)
{
    if (tcd->TCD_recv != NullHandle)
    {
        MemFree(tcd->TCD_recv);
        tcd->TCD_recv = NullHandle;
    }
    if (tcd->TCD_send != NullHandle)
    {
        MemFree(tcd->TCD_send);
        tcd->TCD_send = NullHandle;
    }
    if (tcd->TCD_sem)
    {
        ThreadFreeSem(tcd->TCD_sem);
        tcd->TCD_sem = NullHandle;
    }
}

void TocReceiveResetBuffer(RecvBufHeader *rbh)
{
    rbh->RBH_datalen = 0;
    rbh->RBH_remain = sizeof(FlapHeader);
    rbh->RBH_locked = FALSE;
}

ReceiveStatus TocReceiveFromToc(TocConnectionData *tcd, word timeout)
{
    ReceiveStatus retval = RS_NONE;
    RecvBufHeader *rbh;
    word size;

    if (!tcd->TCD_sock || tcd->TCD_recv == NullHandle)
    {
SM(     printf("TocReceiveFromToc: No connection and/or buffer!\n");     )
        retval = RS_ERROR;
    }
    else
    {
        rbh = MemLock(tcd->TCD_recv);

        if (rbh->RBH_locked)
        {
SM(         printf("TocReceiveFromToc: Cannot receive into locked buffer!\n");  )
            retval = RS_ERROR;
        }
        else /* (!rbh->RBH_locked) */
        {
            /* Continue receiving until a return value is set. */
            while (retval == RS_NONE)
            {
                /* Receive what we can of the FLAP frame. */
//SM(             printf("TocReceiveFromToc: Getting %d bytes,", rbh->RBH_remain);  )
                size = SocketRecv(tcd->TCD_sock, RBH_DATA_END(rbh),
                  rbh->RBH_remain, timeout, 0, 0);
//SM(             printf(" got %d bytes\n", size);    )
//SM(             dump((char *)RBH_DATA_END(rbh), size);      )
                rbh->RBH_datalen += size;
                rbh->RBH_remain -= size;

                if (size == 0)
                {
                    /* No data was received, and/or an error occurred. */
                    word error = ThreadGetError();
                    if (error == SE_INTERRUPT)
                        retval = RS_INTERRUPT;
                    else if (SOCKET_GENERIC_ERROR(error) != SE_TIMED_OUT)
                    {
                        /* An error occurred, discard all data. */
SM(                     printf("TocReceiveFromToc: SocketRecv error %d\n", error); )
                        retval = RS_ERROR;
                        TocReceiveResetBuffer(rbh);
                    }
                    else
                        retval = RS_NO_DATA;
                }
                else /* (size != 0) */
                {
                    if (rbh->RBH_datalen <= sizeof(FlapHeader))
                    {
                        /* Analyze the part of the header we just received. */
                        /* Check start byte for asterisk */
//SM(                     printf("TocReceiveFromToc: Checking FLAP header\n"); )
                        if (rbh->RBH_datalen == size    /* First byte was recvd */
                          && rbh->RBH_header.FH_start != FLAP_START)    /* Was it right? */
                        {
SM(                         printf("TocReceiveFromToc: FLAP header started with 0x%02dh!\n", rbh->RBH_header.FH_start); )
                            retval = RS_ERROR;
                        }
                        /* Check frame type */
                        /* Check Sequence number */
                        /* Upon receiving the full header... */
                        else if (rbh->RBH_datalen == sizeof(FlapHeader))
                        {
                            word framelen = ntohs(rbh->RBH_header.FH_len);

//SM(                         printf("TocReceiveFromToc: Full header received\n"); )
                            /* If data length is zero, return complete. */
//SM(                         printf("TocReceiveFromToc: Data length is %d\n", framelen); )
                            if (framelen == 0)
                                retval = RS_COMPLETE;
                            else if (framelen > FLAP_RECV_LEN_MAX)
                                /* Data length is too large, error. */
                            {
SM(                             printf("TocReceiveFromToc: Data length of %d is too large!\n", framelen); )
                                retval = RS_ERROR;
                            }
                            else
                            {
                                word totlen = sizeof(RecvBufHeader)
                                  + framelen + 1;   /* +1 for our null term */

                                /* Set the data length to RBH_remain. */
                                rbh->RBH_remain = framelen;
                                /* Resize the block if necessary to make room. */
                                if (rbh->RBH_buflen < totlen)
                                {
                                    if (MemReAlloc(tcd->TCD_recv, totlen, 0)
                                      == NullHandle)
                                    {
SM(                                     printf("TocReceiveFromToc: Buffer resize failed!\n"); )
                                        retval = RS_ERROR;
                                    }
                                    else
                                    {
                                        rbh = MemDeref(tcd->TCD_recv);
                                        rbh->RBH_buflen = totlen;
/*REMOVE                                retval = RS_PARTIAL; */
                                    }
                                }
/*REMOVE                        else */
/*REMOVE                            retval = RS_PARTIAL; */

                            } /* endif (framelen ...) */
                        } /* endif (rbh->RBH_datalen ...) */
                    }
                    else /* (rbh->RBH_datalen > sizeof(FlapHeader)) */
                    {
//SM(                     printf("TocReceiveFromToc: FLAP data received, %d remains\n", rbh->RBH_remain); )
                        /* If no data remains, lock buffer and return complete. */
                        if (rbh->RBH_remain == 0)
                        {
                            retval = RS_COMPLETE;
                            *RBH_DATA_END(rbh) = '\0';
                        }
                        else
                            retval = RS_PARTIAL;
                    }
                } /* endif (size == 0) */

            } /* endwhile (retval == RS_NONE) */

            /* Common state responses. */
            if (retval == RS_COMPLETE)
                rbh->RBH_locked = TRUE; /* Lock buffer on complete recv */
            else if (retval == RS_ERROR || retval == RS_INTERRUPT)
                TocReceiveResetBuffer(rbh); /* Reset buffer on error or interrupt */

        } /* endif (!rbh->RBH_locked) */

        /* Buffer remains locked in memory if "locked" */
        if (retval != RS_COMPLETE)
            MemUnlock(tcd->TCD_recv);

    } /* endif (!tcd->TCD_sock || tcd->TCD_recv == NullHandle) */

    /* If this happens, then something's probably wrong with the above code. */
SM( if (retval == RS_NONE)                                          )
SM(     printf("TocReceiveFromToc: Return status never set!\n");    )

    return retval;
}

byte *TocReceiveGetBuffer(TocConnectionData *tcd, word *length)
{
    RecvBufHeader *rbh;
    byte *retval = NULL;

    if (!tcd->TCD_sock || tcd->TCD_recv == NullHandle)
    {
SM(     printf("TocReceiveGetBuffer: No connection and/or buffer!\n");     )
    }
    else
    {
        rbh = MemLock(tcd->TCD_recv);

        if (!rbh->RBH_locked)
        {
SM(         printf("TocReceiveGetBuffer: Buffer not locked!\n"); )
        }
        else /* (rbh->RBH_locked) */
        {
            retval = RBH_DATA(rbh) + sizeof(FlapHeader);
            if (length != NULL)
                *length = ntohs(rbh->RBH_header.FH_len);
        }
        MemUnlock(tcd->TCD_recv);
    }

    return retval;
}

void TocReceiveUnlockBuffer(TocConnectionData *tcd)
{
    RecvBufHeader *rbh;

    if (!tcd->TCD_sock || tcd->TCD_recv == NullHandle)
    {
SM(     printf("TocReceiveUnlockBuffer: No connection and/or buffer!\n");     )
    }
    else
    {
        rbh = MemLock(tcd->TCD_recv);

        if (!rbh->RBH_locked)
        {
SM(         printf("TocReceiveUnlockBuffer: Buffer not locked!\n"); )
        }
        else /* (rbh->RBH_locked) */
        {
            TocReceiveResetBuffer(rbh);
            MemUnlock(tcd->TCD_recv);
        }
        MemUnlock(tcd->TCD_recv);
    }
}

void TocReceiveInterrupt(TocConnectionData *tcd)
{
    /* In case this is called while the semaphore is locked for a potentially
       long time (i.e. during SocketClose()), this will return immediately. */
    if (ThreadPTimedSem(tcd->TCD_sem, 0) == SE_NO_ERROR)
    {
        if (!tcd->TCD_sock)
        {
SM(         printf("TocReceiveInterrupt: No connection!\n");     )
        }
#ifndef USE_SIMULATOR
        else
            SocketInterrupt(tcd->TCD_sock);
#endif
        ThreadVSem(tcd->TCD_sem);
    }
    tcd->TCD_interrupt = TRUE;
}


void TocSendResetBuffer(TocConnectionData *tcd)
{
    SendBufHeader *sbh = MemDeref(tcd->TCD_send);

    sbh->SBH_freelen = MemGetInfo(tcd->TCD_send, MGIT_SIZE)
      - sizeof(SendBufHeader);
    sbh->SBH_datalen = sizeof(FlapHeader);
    sbh->SBH_header.FH_len = htons(0);
}

#define SEND_GROW_BUFFER_STEP_SIZE  32

word TocSendGrowBuffer(TocConnectionData *tcd, SendBufHeader **psbh, word min)
{
    word retval = FALSE;

    if (min > 0)
    {
        if ((*psbh)->SBH_freelen < min)
        {
            word addlen = ((min - 1) / SEND_GROW_BUFFER_STEP_SIZE + 1)
              * SEND_GROW_BUFFER_STEP_SIZE;
            word curlen = MemGetInfo(tcd->TCD_send, MGIT_SIZE);

            if (MemReAlloc(tcd->TCD_send, curlen + addlen, 0) == NullHandle)
            {
SM(             printf("TocSendGrowBuffer: Buffer resize failed!\n"); )
                retval = TRUE;
            }
            else
            {
                *psbh = MemDeref(tcd->TCD_send);
                (*psbh)->SBH_freelen += addlen;
                EC_BOUNDS(SBH_DATA_END(*psbh) + (*psbh)->SBH_freelen - 1);
            }
        }
    }
    return retval;
}

word TocSendAddBuffer(TocConnectionData *tcd, byte *data, word datalen)
{
    SendBufHeader *sbh;
    word retval = 0;

    if (!tcd->TCD_sock || tcd->TCD_send == NullHandle)
    {
SM(     printf("TocSendAddBuffer: No connection and/or buffer!\n");     )
        retval = TRUE;
    }
    else
    {
        sbh = MemLock(tcd->TCD_send);

        /* Make sure we don't exceed the legal send limit. */
        if (sbh->SBH_datalen + datalen - sizeof(FlapHeader) > FLAP_SEND_LEN_MAX)
        {
SM(         printf("TocSendAddBuffer: Legal send limit exceeded!\n");   )
            retval = TRUE;
        }
        /* Resize the chunk if necessary to make room. */
        else if (!(retval = TocSendGrowBuffer(tcd, &sbh, datalen)))
        {
            EC_BOUNDS(data);
            EC_BOUNDS(SBH_DATA_END(sbh));
            EC_BOUNDS(SBH_DATA_END(sbh) + datalen - 1);
            memcpy(SBH_DATA_END(sbh), data, datalen);
            sbh->SBH_datalen += datalen;
            sbh->SBH_freelen -= datalen;
        }
        MemUnlock(tcd->TCD_send);
    }
    return retval;
}

word TocSendCountEscapes(const char *string)
{
    word count = 0;
    char c;

    while ((c = *(string++)) != '\0')
        if (c == '\"' || c == '\\' || c == '$' || c == '[' || c == ']'
          || c == '{' || c == '}')
            count++;
    return count;
}

word TocSendAddString(TocConnectionData *tcd, const char *string, AddStringFlags asf)
{
    SendBufHeader *sbh;
    word retval = 0;
    word datalen = 0;

    if (!tcd->TCD_sock || tcd->TCD_send == NullHandle)
    {
SM(     printf("TocSendAddBuffer: No connection and/or buffer!\n");     )
        retval = TRUE;
    }
    else
    {
        sbh = MemLock(tcd->TCD_send);

        /* Make sure we don't exceed the legal send limit. */
        if (string == NULL)
            datalen = 0;
        else
        {
            datalen = strlen(string);
            if (!(asf & ASF_DONT_ESCAPE))
                datalen += TocSendCountEscapes(string);
        }
        if (asf & ASF_QUOTES)
            datalen += 2;
        if (asf & ASF_PREPEND_SPACE)
            datalen += 1;
        if (asf & ASF_NULL_TERM)
            datalen += 1;
        if (sbh->SBH_datalen + datalen - sizeof(FlapHeader) > FLAP_SEND_LEN_MAX)
        {
SM(         printf("TocSendAddBuffer: Legal send limit exceeded!\n");   )
            retval = TRUE;
        }
        /* Resize the chunk if necessary to make room. */
        else if (!(retval = TocSendGrowBuffer(tcd, &sbh, datalen)))
        {
            char *p = (char *)SBH_DATA_END(sbh);
            char c;

            EC_BOUNDS(p);
            EC_BOUNDS(p + datalen - 1);

            /* Add optional space. */
            if (asf & ASF_PREPEND_SPACE)
                *(p++) = ' ';

            /* Add optional opening quote. */
            if (asf & ASF_QUOTES)
                *(p++) = '\"';

            /* Add string. */
            if (string != NULL)
            {
                if (asf & ASF_DONT_ESCAPE)
                    p += strlen(strcpy(p, string));
                else
                    while ((c = *(string++)) != '\0')
                    {
                        if (c == '\"' || c == '\\' || c == '$' || c == '['
                          || c == ']' || c == '{' || c == '}')
                            *(p++) = '\\';
                        *(p++) = c;
                    }
            }

            /* Add optional closing quote. */
            if (asf & ASF_QUOTES)
                *(p++) = '\"';

            /* Add optional null terminator. */
            if (asf & ASF_NULL_TERM)
                *(p++) = '\0';

            EC_BOUNDS(p - 1);

            sbh->SBH_datalen += datalen;
            sbh->SBH_freelen -= datalen;
        }
        MemUnlock(tcd->TCD_send);
    }
    return retval;
}

word TocSendToToc(TocConnectionData *tcd)
{
    SendBufHeader *sbh;
    word retval = 0;

    if (!tcd->TCD_sock || tcd->TCD_send == NullHandle)
    {
SM(     printf("TocSendAddBuffer: No connection and/or buffer!\n");     )
        retval = TRUE;
    }
    else
    {
        ThreadPSem(tcd->TCD_sem);

        sbh = MemLock(tcd->TCD_send);

SM(     printf("%s\n", (char *)(SBH_DATA(sbh) + sizeof(FlapHeader))); )
        /* Fill in FLAP header. */
        sbh->SBH_header.FH_type = tcd->TCD_type;
        sbh->SBH_header.FH_seq = htons(tcd->TCD_outSeq++);
        sbh->SBH_header.FH_len = htons(sbh->SBH_datalen - sizeof(FlapHeader));

        /* Send the frame. */
//SM(     dump((char *)SBH_DATA(sbh), sbh->SBH_datalen);  )
#ifndef USE_SIMULATOR
        retval = SocketSend(tcd->TCD_sock, SBH_DATA(sbh),
          sbh->SBH_datalen, 0, 0);
SM(     if (retval != SE_NORMAL)                                     )
SM(         printf("TocSendToToc: SocketSend error %d\n", retval);   )
#endif

        /* Reset send buffer. */
        TocSendResetBuffer(tcd);

        ThreadVSem(tcd->TCD_sem);

        MemUnlock(tcd->TCD_send);
    }
    return retval;
}

void TocSendClose(TocConnectionData *tcd)
{
    if (!tcd->TCD_sock)
    {
SM(     printf("TocSendClose: No connection!\n");     )
    }
#ifndef USE_SIMULATOR
    else
        SocketCloseSend(tcd->TCD_sock);
#endif
}
