/***********************************************************************
 *
 *
 * PROJECT:	Test Applications
 * MODULE:	Geos names
 * FILE:		gname.goc
 * AUTHOR:	jfh  2/02
 *
 * DESCRIPTION:
 *
 *
 *
 *
 *
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <ansi/string.h>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	TestProcessClass, GenProcessClass ;
	@message void MSG_TEST_MAKE_DNAME();
	@message void MSG_TEST_SHOW_PRIM_MKR();

@endc

@classdecl	TestProcessClass, neverSaved ;


/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass TestApp = {
	 GI_visMoniker = list { @TestTextMoniker }
    GI_comp = @TestPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @TestPrimary;
}

@visMoniker TestTextMoniker = "Geos Names";

@end	AppResource

@start	Interface;

@object GenPrimaryClass TestPrimary  = {
	 GI_comp = @GNameEntryWindow, @DNameWindow, @PrimButton;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenTextClass GNameEntryWindow = {
	 GI_visMoniker = "Enter Geos Name:";
	 GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 GTXI_maxLength = 32;
	 GTXI_destination = process;
	 GTXI_applyMsg = MSG_TEST_MAKE_DNAME;
	 HINT_PLACE_MONIKER_ABOVE;
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenTextClass DNameWindow = {
	 GI_visMoniker = "DOS Name:";
	 GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 HINT_PLACE_MONIKER_ABOVE;
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	 HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
	 HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenTriggerClass PrimButton = {
	GI_visMoniker = "Prim";
	GTI_actionMsg = MSG_TEST_SHOW_PRIM_MKR;
	GTI_destination = process;
}

@end Interface

/*
 ***************************************************************************
 *		Code for TestProcessClass
 ***************************************************************************
 */

/*-------------------------------------------------------------------------
 | Routine:  Make8Dot3Name
 *-------------------------------------------------------------------------
 | Description:
 |     Convert a filename that may be too long down to a regular DOS
 |     style name (XXXXXXXX.EEE)
 |
 | Inputs:
 |    char *shortpathname         -- Where to store the resulting string
 |    char *pathname              -- Current longer file name
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    GB   10/04/98  Created
 |    jfh  02/08/02  Cleaned up to treat Geos names that have . in them
 |                   e.g. Crossword puzzle names correctly
 *-----------------------------------------------------------------------*/
void Make8Dot3Name(char* shortpathname, char* pathname)
{
byte		i, dotPos, len;
Boolean	hasDot = FALSE;
char		longName[33];


	/* is there a . in the name? */
	strcpy(longName, pathname);
	len = strlen(pathname);
	for (i = 0; i < len; i++) {
		if (longName[i] == '.')  {
			hasDot = TRUE;
			dotPos = i;
			break;
			}
		}

	/* don't change a thing if 8 or less chars and no . */
	if ((len < 9) && !hasDot)  {
		strcpy (shortpathname, pathname);
		return;
		}

	/* don't change if it looks like a valid DOS name */
	if (hasDot && (len < 13) && (dotPos > len-4) && (dotPos != len-1)) {
		strcpy (shortpathname, pathname);
		return;
		}

	/* It doesn't look like a DOS name so just make an 8.3 name and
	 * after it's DLed we'll grab its Geos long name from the header */

	 /* Copy up to the first 8 characters before the dot or end */
    for (i=0; i<8; i++)  {
        if (*pathname == '\0')
            break ;

        /* Skip anything that is not letters or numbers */
        if (!isalnum(*pathname))  {
            i-- ;
            pathname++ ;
            continue ;
        }

        *(shortpathname++) = *(pathname++) ;
    }

    /* Skip over to the dot or end */
	 while ((*pathname != '\0') && (*pathname != '.'))
		  pathname++ ;

    /* If we did find a dot, then copy the first 3 characters */
    if (*pathname == '.')  {
        *(shortpathname++) = *(pathname++) ;
        for (i=0; i<3; i++)  {
	  /*       if (*pathname == '\0')
                break ;

            /* Skip anything that is not letters or numbers */
	  /*       if (!isalnum(*pathname))  {
                i-- ;
                pathname++ ;
                continue ;
            }

				*(shortpathname++) = *(pathname++) ;  */
            *(shortpathname++) = '5' ;
        }
    }

    /* Cap off the end */
    *shortpathname = '\0' ;

}


  /***********************************************************************
 *
 * MESSAGE:	MSG_TEST_MAKE_DNAME for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_MAKE_DNAME
{
 char		gName[33], dName[13];


	@send DNameWindow::MSG_VIS_TEXT_DELETE_ALL();
	if (@call GNameEntryWindow::MSG_VIS_TEXT_GET_ALL_PTR(gName)) {
		Make8Dot3Name(&dName, &gName);
		@call DNameWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(dName, 0);
		}

}


@method TestProcessClass, MSG_TEST_SHOW_PRIM_MKR
{
 char				name[100];
 MemHandle  	mh;
 ChunkHandle	ch;


   mh = OptrToHandle(@TestPrimary);
	ch = @call TestPrimary::MSG_GEN_PRIMARY_GET_LONG_TERM_MONIKER();

	ObjLockObjBlock(mh);


	@call DNameWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(LMemDerefHandles(mh, ch), 0);
	MemUnlock(mh);

}




