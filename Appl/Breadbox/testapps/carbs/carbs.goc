/***********************************************************************
 *
 *
 * PROJECT:	Test Applications
 * MODULE:	Insulin Dose Calculator
 * FILE:		carbs.goc
 * AUTHOR:	jfh  4/04
 *
 * DESCRIPTION:
 *
 *              parse the USDA carbs file
 *
 *
 *
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <ansi/string.h>
#include <ansi/stdlib.h>

/*
 ***************************************************************************
 *		Structures
 ***************************************************************************
 */

typedef struct {
	VMBlockHandle		CMS_carbsBlockHan;
	word					CMS_alphaArray[28];
} CarbsMapStruct;

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	TestProcessClass, GenProcessClass ;
	@message void MSG_TEST_PARSE();
	@message void MSG_TEST_MAKE_DATA_FILE();
@endc

@classdecl	TestProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass TestApp = {
	GI_visMoniker = list { @TestTextMoniker }
	GI_comp = @TestPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @TestPrimary;
}

@visMoniker TestTextMoniker = "Carbs Parser";

@end	AppResource

@start	Interface;

@object GenPrimaryClass TestPrimary  = {
	GI_comp = @FileSelGroup, @ButtonGroup, @ParseProgDB;
	HINT_CENTER_CHILDREN_HORIZONTALLY;
	HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenInteractionClass FileSelGroup = {
	GI_comp = @SourceFileSelGroup, @DestFileSelGroup;
	HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass SourceFileSelGroup = {
	GI_visMoniker = "Source File";
	GI_comp = @SourceFileSel;
	HINT_DRAW_IN_BOX;
	HINT_PLACE_MONIKER_ABOVE;
	HINT_CENTER_MONIKER;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object GenFileSelectorClass SourceFileSel = {
	GFSI_fileCriteria = FSFC_MASK_CASE_INSENSITIVE |
					 FSFC_DIRS |
					 FSFC_NON_GEOS_FILES;
	ATTR_GEN_PATH_DATA = {SP_DOCUMENT, "."};
//	HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 8;
//	HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object GenInteractionClass DestFileSelGroup = {
	GI_visMoniker = "Destination File";
	GI_comp = @DestFileName, @DestFileSel;
	HINT_DRAW_IN_BOX;
	HINT_PLACE_MONIKER_ABOVE;
	HINT_CENTER_MONIKER;
}

@object GenTextClass DestFileName = {
	GI_visMoniker = "File Name:";
	GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	GTXI_maxLength = (12);
	ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES;
	ATTR_GEN_TEXT_MAKE_UPPERCASE;
	ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS = @ParseButton;
	HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenFileSelectorClass DestFileSel = {
	GFSI_fileCriteria = FSFC_MASK_CASE_INSENSITIVE |
					 FSFC_DIRS |
					 FSFC_NON_GEOS_FILES;
	GFSI_attrs = @default | FSA_SHOW_FILES_DISABLED;
	ATTR_GEN_PATH_DATA = {SP_DOCUMENT, "."};
//	HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 8;
//	HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
}

@object GenInteractionClass ButtonGroup = {
	GI_comp = @ParseButton, @DataFileButton;
	HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenTriggerClass ParseButton = {
	 GI_visMoniker = "Parse File";
	 GI_states = @default &~GS_ENABLED;
	 GTI_destination = process;
	 GTI_actionMsg = MSG_TEST_PARSE;
}

@object GenTriggerClass DataFileButton = {
	 GI_visMoniker = "Make Data File";
	 GTI_destination = process;
	 GTI_actionMsg = MSG_TEST_MAKE_DATA_FILE;
}

/* ---------------------------------------- */
@object GenInteractionClass ParseProgDB = {
	GI_visMoniker = "Line Parsing Status";
	GI_comp = @PPCount;
	GII_visibility = GIV_DIALOG;
	GII_type = GIT_NOTIFICATION;
	GII_attrs = @default | GIA_NOT_USER_INITIATABLE;
}

@object GenTextClass PPCount = {
    GI_visMoniker = "Lines parsed:";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    GTXI_text = "0";
	 HINT_MAXIMUM_SIZE = {SST_AVG_CHAR_WIDTHS | 14, 0, 0};
    HINT_TEXT_NO_FRAME;
}

@end Interface

/*
 ***************************************************************************
 *		Code for TestProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE:	MSG_TEST_PARSE for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_PARSE
{
 dword		selFlags, i, sFileSize;
 char			sName[FILE_LONGNAME_BUFFER_SIZE], dName[FILE_LONGNAME_BUFFER_SIZE];
 char			sPath[PATH_BUFFER_SIZE], dPath[PATH_BUFFER_SIZE];
 FileHandle	sfh, dfh;
 DiskHandle	sdh, ddh;
 char			charBuf[2], sLineBuf[250], dLineBuf[250], countBuf[10];
 word			charRead, numLines, lineLen, length, j, k;
 Boolean		isSpace;


	/*
	 * open the source file
	 */
	selFlags = @call SourceFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(sName);
	/* check to see if it's a file */
	if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
		return;
		}

	/* get the file's path and disk handle */
	@call SourceFileSel::MSG_GEN_PATH_GET(sPath, sizeof(sPath));
	sdh = @call SourceFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	FileSetCurrentPath(sdh, sPath);

	/* and open the source file */
	sfh = FileOpen(sName, (FILE_ACCESS_R | FILE_DENY_W));
	if (!sfh)  {
		return;
		}

	/*
	 * create the dest file
	 */
	/* get the dest file name */
	@call DestFileName::MSG_VIS_TEXT_GET_ALL_PTR(dName);

	/* get the file's path and disk handle */
	@call DestFileSel::MSG_GEN_PATH_GET(dPath, sizeof(dPath));
	ddh = @call DestFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	FileSetCurrentPath(ddh, dPath);

	/* and create the destination file */
	dfh = FileCreate(dName,
					 ((FILE_CREATE_ONLY | FCF_NATIVE)
					 | (FILE_ACCESS_RW | FILE_DENY_RW)),
					 0);
	if (!dfh)  {
		FileClose(sfh, FALSE);
		return;
		}

	/*
	 * init some things
	 */
	@call ParseProgDB::MSG_GEN_INTERACTION_INITIATE();
	@send TestApp::MSG_GEN_APPLICATION_MARK_BUSY();
	numLines = 0;
	lineLen = 0;
	sFileSize = FileSize(sfh);
	sLineBuf[0] = 0;

	/*
	 * start the parsing loop
	 */
	for (i = 0; i < sFileSize; i++)  {
		/*
		 * read in a line from the source
		 */
		charRead = FileRead(sfh, charBuf, 1, FALSE);
		if (charRead == 1)  {  /* good read */
			/* add null to end of char buffer */
			charBuf[1] = NULL;
			/* check for CR/LF */
			if ((charBuf[0] != '\r') && (charBuf[0] != '\n'))  {
				/* not CR/LF so add to line */
				strcat(sLineBuf, charBuf);
				lineLen++;
				}  /*  end of not CR/LF if */
			else if (charBuf[0] == '\r')  {
				/*
				 * check for really the end of the line
				 */
				if ((LocalIsNumChar(sLineBuf[lineLen - 1])) &&
					 (LocalIsNumChar(sLineBuf[lineLen - 2])) &&
					 (LocalIsNumChar(sLineBuf[lineLen - 3])) &&
					 (sLineBuf[lineLen - 4] == '.'))  {
					/* ok - it's really the end of the line */
					/*
					 * remove the ID# and space
					 */
					strcpy(dLineBuf, &sLineBuf[6]);
               lineLen = strlen(dLineBuf);
					/*
					 * Scan thru to the first occurance of number, space,
					 * number.  This is the last digit of the gram weight of the
					 * common serving size and the first digit of the common
					 * serving size
					 */
					isSpace = FALSE;
					for (j = 3; j < lineLen; j++) {
						if ((LocalIsNumChar(dLineBuf[j])) &&
							 (dLineBuf[j + 1] == ' ') &&
							 (LocalIsNumChar(dLineBuf[j + 2])))  {
							/* found it - now backup to the previous space */
							k = j;
							while (!isSpace)  {
								if (dLineBuf[k] != ' ')  k--;
								else isSpace = TRUE;
								}
							/* replace the above gram weight number (and preceeding &
							 * following spaces) with tab
							 */
							dLineBuf[k] = '\t';
							/* we'll use sLineBuf to hold the end of the line data */
							strcpy (sLineBuf, &dLineBuf[j + 2]);
							dLineBuf[k + 1] = 0;
							strcat(dLineBuf, sLineBuf);
							break;
							}  /* end of found gram weight if */
						}  /* end of gram weight for */
					/*
					 * back-scan from the last number (num plul 3 decimal places)
					 */
					isSpace = FALSE;
					k = strlen(dLineBuf) - 1;
					while (!isSpace) {
						if (dLineBuf[k] == ' ') {
							isSpace = TRUE;
							/* replace the space with tab */
							dLineBuf[k] = '\t';
							}
						else  k--;
						}
					/*
					 * place parsed line in dest file
					 */
					strcat(dLineBuf, "\r");
					length = FileWrite(dfh, dLineBuf, strlen(dLineBuf), FALSE);
					if (length != strlen(dLineBuf))  {
						/* write error - bail out */
						FileClose(sfh, FALSE);
						FileClose(dfh, FALSE);
						//@send ParseProgDB::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
						@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
						return;
						}

					/*
					 * clean up & inform user
					 */
					sLineBuf[0] = 0;
					lineLen = 0;
					numLines++;
					UtilHex32ToAscii(countBuf, (dword) numLines, UHTAF_NULL_TERMINATE);
					@call PPCount::MSG_VIS_TEXT_REPLACE_ALL_PTR(countBuf, 0);
					}  /* end of really end of line if */
				else {
					/* replace the \r with a space and continue */
					strcat(sLineBuf, " ");
					lineLen++;
					}  /* emd of not really end of line else */

				}  /* end of maybe end of line else */

			} /* end of good read if */

		else  {
			/* read error - bail out */
			FileClose(sfh, FALSE);
			FileClose(dfh, FALSE);
			//@send ParseProgDB::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
			@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			return;
			}  /* end of bad read else */

		} /* end of source reading for */

	/*
	 * close things out
    */
	/* mark app not busy */
	@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

	/* close the files */
	FileClose(sfh, FALSE);
	FileClose(dfh, FALSE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TEST_MAKE_DATA_FILE for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_MAKE_DATA_FILE
{
 dword		selFlags, i, sFileSize;
 char			sName[FILE_LONGNAME_BUFFER_SIZE];
 char			sPath[PATH_BUFFER_SIZE];
 FileHandle	sfh;
 DiskHandle	sdh;
 VMFileHandle	vmfh;
 VMBlockHandle	vmbh, mapbh;
 MemHandle		mh;
 CarbsMapStruct	*carbsMapPtr;
 char			charBuf[2], sLineBuf[250], countBuf[13];
 word			charRead, numLines, lineLen;


	/*
	 * open the source file
	 */
	selFlags = @call SourceFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(sName);
	/* check to see if it's a file */
	if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
		return;
		}

	/* get the file's path and disk handle */
	@call SourceFileSel::MSG_GEN_PATH_GET(sPath, sizeof(sPath));
	sdh = @call SourceFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	FileSetCurrentPath(sdh, sPath);

	/* and open the source file */
	sfh = FileOpen(sName, (FILE_ACCESS_R | FILE_DENY_W));
	if (!sfh)  {
		return;
		}

	/*
	 * create the dest file
	 */
	FileSetStandardPath(SP_DOCUMENT);
	vmfh = VMOpen("carbs.vm",
					 VMAF_FORCE_READ_WRITE,
					 VMO_CREATE,
					 0);
	if (!vmfh)  {
      FileClose(sfh, FALSE);
		return;
		}

	/* create the huge array */
	vmbh = HugeArrayCreate(vmfh, 0, 0);

	/* create the map block */
	mapbh = VMAlloc(vmfh, sizeof(CarbsMapStruct), 0);
	VMSetMapBlock(vmfh, mapbh);
	carbsMapPtr = VMLock(vmfh, mapbh, &mh);
	carbsMapPtr->CMS_carbsBlockHan = vmbh;
	for (i = 0; i < 28; i++) {
		carbsMapPtr->CMS_alphaArray[i] = 0xffff;
		}

	/* init some things */
	@send TestApp::MSG_GEN_APPLICATION_MARK_BUSY();
	@call ParseProgDB::MSG_GEN_INTERACTION_INITIATE();
	numLines = 0;
	lineLen = 0;
	sFileSize = FileSize(sfh);
	sLineBuf[0] = 0;

	/* everything's ready - copy the text file into the data file */
	for (i = 0; i < sFileSize; i++)  {
		/* read in a line from the source */
		charRead = FileRead(sfh, charBuf, 1, FALSE);
		if (charRead == 1)  {  /* good read */
			/* add null to end of char buffer */
			charBuf[1] = NULL;
			/* check for CR/LF */
			if ((charBuf[0] != '\r') && (charBuf[0] != '\n'))  {
				/* not CR/LF so add to line */
				strcat(sLineBuf, charBuf);
				/* and enter the line number of the first line starting with
					a given letter to the alpha array */
				if (!lineLen)  {
					if (carbsMapPtr->CMS_alphaArray[(charBuf[0] - 'A')] == 0xffff) {
						carbsMapPtr->CMS_alphaArray[(charBuf[0] - 'A')] = numLines;
						}
					}
				lineLen++;
				}
			else if (charBuf[0] == '\r')  {
				/* before we put this line in the data file let's truncate the
					3 decimal places down to 1 */
				sLineBuf[lineLen - 2] = 0;

				/* place line in data file */
				HugeArrayAppend(vmfh, vmbh, lineLen /*+ 1*/- 1, sLineBuf);

				/* clean up & inform user */
				sLineBuf[0] = 0;
				lineLen = 0;
				numLines++;
				UtilHex32ToAscii(countBuf, (dword) numLines, UHTAF_NULL_TERMINATE);
				@call PPCount::MSG_VIS_TEXT_REPLACE_ALL_PTR(countBuf, 0);
				}  /* end of end of line else */
			} /* end of good read if */
		else  {
			/* read error - bail out */
			FileClose(sfh, FALSE);
			VMClose(vmfh, FALSE);
			@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			return;
			}  /* end of bad read else */

		} /* end of source reading for */

	/* eliminate the extra space */
	HugeArrayCompressBlocks(vmfh, vmbh);

	/* close the map */
	VMDirty(mh);
	VMUnlock(mh);

	/* close the files */
	FileClose(sfh, FALSE);
	VMSave(vmfh);
	VMClose(vmfh, 0);

	/* and we're done */
	@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();



}



