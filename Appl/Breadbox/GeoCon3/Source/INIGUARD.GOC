/***************************************************************************
 *  FILE:  INIGUARD.GOC
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Project:  GeoCon 3.0
 |           Copyright (c) 1997 Breadbox Computer Company
 *-----------------------------------------------------------------------*/

@include <stdapp.goh>
@include "source\iniguard.goh"
@include "source\geocon.goh"
#include <initfile.h>

/*=========================================================================*
 *  METHODS FOR CLASS:  INIGuardianClass
 *=========================================================================*/


    @classdecl INIGuardianClass ;


/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_LOAD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Loads values from the .INI file and initializes the UI object.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_LOAD
{
    char *p_entry ;
    char *p_key ;
    Boolean boolValue ;

    /* This routine doesn't work unless we have a category and key */
    if ((pself->IG_category == NullHandle) ||
        (pself->IG_key == NullHandle))
        return ;

    /* Find the entry and key */
    p_entry = LMemDerefHandles(OptrToHandle(oself), pself->IG_category) ;
    p_key = LMemDerefHandles(OptrToHandle(oself), pself->IG_key) ;

    switch (pself->IG_entryType)  {
        case IG_TYPE_BOOLEAN:
            /* Read the value and check if we got one */
            if (InitFileReadBoolean(p_entry, p_key, &boolValue) == FALSE)  {
                /* Got a value */
                /* Move the value to the correct entry */
                if (boolValue == pself->IG_onData)
                    pself->IG_originalData = TRUE ;
                else
                    pself->IG_originalData = FALSE ;
            } else {
                /* Didn't get a value.  Use the default */
                pself->IG_originalData = pself->IG_defaultData ;
            }
            break ;
        case IG_TYPE_BITWISE:
            /* Read the value and check if we got one */
            if (InitFileReadInteger(
                   p_entry,
                   p_key,
                   &pself->IG_originalData) == FALSE)  {
                /* Got a value */
            } else {
                /* Didn't get a value.  Use the default */
                pself->IG_originalData = pself->IG_defaultData ;
            }

            /* Determine if the data is on or off */
            if ((pself->IG_originalData & pself->IG_mask) ==
                    pself->IG_onData)  {
                /* The bit is clearly on */
                pself->IG_originalData = TRUE ;
            } else if ((pself->IG_originalData & pself->IG_mask) ==
                    pself->IG_offData)  {
                pself->IG_originalData = FALSE ;
            } else {
                /* Hmmm ... doesn't appear on or off.  Use the default */
                pself->IG_originalData = pself->IG_defaultData ;

                /* Process this default data */
                if ((pself->IG_originalData & pself->IG_mask) ==
                        pself->IG_onData)  {
                    /* The bit is clearly on */
                    pself->IG_originalData = TRUE ;
                } else {
                    pself->IG_originalData = FALSE ;
                }
            }
            break ;
        case IG_TYPE_COLOR:
        case IG_TYPE_CHOICE:
            /* This is the easy one.  Its just a value */
            if (InitFileReadInteger(
                   p_entry,
                   p_key,
                   &pself->IG_originalData) == FALSE)  {
                /* Got a value */
            } else {
                /* Didn't get a value.  Use the default */
                pself->IG_originalData = pself->IG_defaultData ;
            }
            break ;
        case IG_TYPE_LIST:
            /* This is handled by the subclass */
            break ;
        default:
            /* Error if we reach here! */
            EC_ERROR(-1) ;
            break ;
    }

    /* Now that we have the original data loaded, revert the */
    /* state of the system to the original data */
    @call oself::MSG_INI_GUARDIAN_REVERT() ;
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_SAVE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Saves the .INI value to the .INI file.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_SAVE
{
    char *p_entry ;
    char *p_key ;
    word currentValue ;
    Boolean isFalse = FALSE ;

    /* Only save if there is a detectable change */
    if ((@call oself::MSG_INI_GUARDIAN_CHECK_IF_CHANGED()) == TRUE)  {
        /* This routine doesn't work unless we have a category and key */
        if ((pself->IG_category == NullHandle) ||
            (pself->IG_key == NullHandle))
            return ;

        /* Find the entry and key */
        p_entry = LMemDerefHandles(OptrToHandle(oself), pself->IG_category) ;
        p_key = LMemDerefHandles(OptrToHandle(oself), pself->IG_key) ;

        switch (pself->IG_entryType)  {
            case IG_TYPE_BOOLEAN:
                /* Booleans just write out their state */
                if (pself->IG_uiState)  {
                    InitFileWriteBoolean(p_entry, p_key, pself->IG_onData) ;
                } else  {
                    InitFileWriteBoolean(p_entry, p_key, pself->IG_offData) ;
                    isFalse = TRUE;
                }
                break ;
            case IG_TYPE_BITWISE:
                /* Read the current value or get the default if none */
                /* is available */
                if (InitFileReadInteger(p_entry, p_key, &currentValue) == TRUE)
                    currentValue = pself->IG_defaultData ;

                /* Zero out the bits we are going to affect */
                currentValue &= (~pself->IG_mask) ;

                /* Set the bits for on or off */
                /* (NOTE:  off may just be zero bits. */
                if (((Boolean)pself->IG_uiState) == TRUE)  {
                    currentValue |= pself->IG_onData ;
                } else {
                    currentValue |= pself->IG_offData ;
                    isFalse = TRUE ;
                }

                InitFileWriteInteger(p_entry, p_key, currentValue) ;
                break ;
            case IG_TYPE_CHOICE:
            case IG_TYPE_COLOR:
                /* Write out the choice */
                InitFileWriteInteger(p_entry, p_key, pself->IG_uiState) ;
                break ;
            case IG_TYPE_LIST:
                break ;
            default:
                break ;
        }

        if ((isFalse == TRUE) && (pself->IG_deleteOnFalse == TRUE))  {
            InitFileDeleteEntry(p_entry, p_key) ;
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_REVERT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Goes back to the original data and resets the ui object.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_REVERT
{
    /* Make the ui state equal the original state */
    pself->IG_uiState = pself->IG_originalData ;

    @call oself::MSG_INI_GUARDIAN_UPDATE_UI() ;
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_USE_DEFAULT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Uses the default value and updates the UI accordingly.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_USE_DEFAULT
{
    word oldOriginal ;

    /* Cheat, make the system think the default data is the original */
    /* data. */
    oldOriginal = pself->IG_originalData ;
    pself->IG_originalData = pself->IG_defaultData ;

    /* Revert to this default state. */
    @call oself::MSG_INI_GUARDIAN_REVERT() ;

    /* And put back our original original value. */
    pself->IG_originalData = oldOriginal ;
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_UPDATE_UI
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Make the attached UI object reflect the state of the INI guardian.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_UPDATE_UI
{
    word id ;
    optr parent ;
    static ColorQuad color = { 0, CF_INDEX, 0, 0 } ;

    /* Doesn't work if no UI object attached */
    if (pself->IG_uiObject == NullHandle)
        return ;

    switch (pself->IG_entryType)  {
        case IG_TYPE_BOOLEAN:
        case IG_TYPE_BITWISE:
            id = @call (pself->IG_uiObject)::MSG_GEN_BOOLEAN_GET_IDENTIFIER() ;
            parent = @call (pself->IG_uiObject)::MSG_GEN_FIND_PARENT() ;
            @call parent::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
                      id,
                      pself->IG_uiState) ;
            break ;
        case IG_TYPE_CHOICE:
            @call (pself->IG_uiObject)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                             pself->IG_uiState,
                             FALSE) ;
            break ;
        case IG_TYPE_COLOR:
            color.CQ_redOrIndex = pself->IG_uiState ;
            @call (pself->IG_uiObject)::MSG_COLOR_SET_COLOR(
                             pself->IG_onData,
                             color) ;
            break ;
        case IG_TYPE_LIST:
            break ;
        default:
            EC_ERROR(-2) ;
            break ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_CHECK_IF_CHANGED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine if the UI has changed from the UI guardian.
 |
 | Outputs:
 |    Boolean                     -- TRUE if changed, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_CHECK_IF_CHANGED
{
    /* Get the correct UI state */
    @call oself::MSG_INI_GUARDIAN_GET_UI_STATE() ;

    /* See if we have made a change */
    if (pself->IG_uiState != pself->IG_originalData)
        return TRUE ;

    return FALSE ;
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_CHECK_IF_REQUIRE_REBOOT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Returns TRUE if changing this guardian/ui object requires reboot.
 |
 | Outputs:
 |    Boolean                     -- TRUE if reboot required, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_CHECK_IF_REQUIRE_REBOOT
{
    return pself->IG_requireReboot ;
}

/*-------------------------------------------------------------------------
 | Method:  INIGuardianClass::MSG_INI_GUARDIAN_GET_UI_STATE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Get the attached UI object's state and put in IG_uiState.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/15/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIGuardianClass, MSG_INI_GUARDIAN_GET_UI_STATE
{
    word id ;
    optr parent ;
    word state ;
    ColorQuad color ;

    /* Doesn't work if no UI object attached */
    if (pself->IG_uiObject == NullHandle)
        return ;

    switch (pself->IG_entryType)  {
        case IG_TYPE_BOOLEAN:
        case IG_TYPE_BITWISE:
            id = @call (pself->IG_uiObject)::MSG_GEN_BOOLEAN_GET_IDENTIFIER() ;
            parent = @call (pself->IG_uiObject)::MSG_GEN_FIND_PARENT() ;
            state = @call parent::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() ;

            /* Interpret the bit as true or false */
            if (state & id)
                pself->IG_uiState = TRUE ;
            else
                pself->IG_uiState = FALSE ;
            break ;
        case IG_TYPE_CHOICE:
            pself->IG_uiState =
                @call (pself->IG_uiObject)::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;
            break ;
        case IG_TYPE_COLOR:
            color = @call (pself->IG_uiObject)::MSG_COLOR_GET_COLOR(
                             pself->IG_onData) ;
            pself->IG_uiState = color.CQ_redOrIndex ;
            break ;
        case IG_TYPE_LIST:
            break ;
        default:
            EC_ERROR(-3) ;
            break ;
    }
}

/***************************************************************************
 *  END OF FILE:  INIGUARD.GOC
 ***************************************************************************/

