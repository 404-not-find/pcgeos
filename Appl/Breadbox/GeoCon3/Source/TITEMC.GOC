/***************************************************************************
 *  FILE:  TITEMC.GOC
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Module:  Titled Item Module
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This module provides the class TitledItemClass (a sub class
 | of GenClass) that draws a title at the bottom of the button.
 | The key step to make this handle all graphic monikers is to add 12
 | to the second parameter of cachedSize in all of your monikers.
 | Perhaps in the future, this can be fixed.
 |
 *-----------------------------------------------------------------------*/

/***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************/

@include <stdapp.goh>
@include "source\titemc.goh"

@classdecl TitledItemClass ;

/*=========================================================================*
 *  METHODS FOR CLASS:
 *=========================================================================*/

/*-------------------------------------------------------------------------
 | Method:  TitledItemClass::MSG_VIS_DRAW
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Routine to draw the title under the moniker for a titled button.
 |
 | Inputs:
 |    DrawFlags drawFlags         -- Condition of drawing
 |    GStateHandle gstate         -- GState to draw to
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/14/97  Created
 |
 *-----------------------------------------------------------------------*/
@method TitledItemClass, MSG_VIS_DRAW
{
    Rectangle r ;
    char *p_title ;
    char *p_pos ;
    word maxWidth ;
    word pixelWidth ;
    word count ;
    word cwidth ;

    @callsuper() ;

    /* Only do this if we have a title */
    if (pself->TII_title)  {
        /* Determine the size of the button */
        @call oself::MSG_VIS_GET_BOUNDS(&r) ;

        /* Get the title we are using */
        p_title = LMemDerefHandles(OptrToHandle(oself), pself->TII_title) ;

        /* Use 10 point berkley */
        GrSetFont(gstate, DEFAULT_FONT_ID, MakeWWFixed(DEFAULT_FONT_SIZE)) ;

        /* Calculate width and check where to clip the size */
//        if (pself->TII_offsetX == -1)  {
            maxWidth = r.R_right - r.R_left - 4;

            /* Determine the width up to where we fall off */
            p_pos = p_title ;
            pixelWidth = 0 ;
            count = 0 ;
            while (*p_pos)  {
                cwidth = GrCharWidth(gstate, *p_pos) >> 16 ;
                if (pixelWidth + cwidth >= maxWidth)
                    break ;
                pixelWidth += cwidth ;
                count++ ;
                p_pos++ ;
            }

            /* Calculate the centering position and cache */
            pself->TII_offsetX = 3 + ((maxWidth - pixelWidth)>>1) ;
            pself->TII_cutCount = count ;
//        }

        /* Draw the text centered */
        GrDrawText(
            gstate,
            r.R_left + pself->TII_offsetX,
            r.R_bottom-4-DEFAULT_FONT_SIZE,
            p_title,
            pself->TII_cutCount) ;
    }
}

/***************************************************************************
 *  END OF FILE:  TITEMC.GOC
 ***************************************************************************/

