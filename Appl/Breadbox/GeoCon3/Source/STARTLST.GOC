/***************************************************************************
 *  FILE:  STARTLST.GOC
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Project:  GeoCon 3.0
 |           Copyright (c) 1997 Breadbox Computer Company
 *-----------------------------------------------------------------------*/

@include <stdapp.goh>
@include "source\iniguard.goh"
@include "source\startlst.goh"
@include "source\geocon.goh"
#include <initfile.h>
@include <Ansi\string.h>

/*=========================================================================*
 *  Externals:
 *=========================================================================*/

@extern object StartupList ;
@extern object StartupFileDialog ;
@extern object StartupFileSelector  ;

/*=========================================================================*
 *  Types and defines:
 *=========================================================================*/

#define MAX_STARTUP_LIST_ITEMS      20
#define MAX_STARTUP_APP_LENGTH      100

typedef char T_startupItem[MAX_STARTUP_APP_LENGTH] ;

typedef struct {
    word numApps ;
    T_startupItem appArray[MAX_STARTUP_LIST_ITEMS] ;
} T_startupList ;

/*=========================================================================*
 *  Prototypes:
 *=========================================================================*/

Boolean far StartupLoadCallback(
            const char *p_stringSection,
            word sectionNum,
            void *p_data) ;
Boolean far StartupCompareCallback(
            const char *p_stringSection,
            word sectionNum,
            void *p_data) ;
typedef Boolean far (*T_myInitFileEnumCallback)(
            const char *p_stringSection,
            word sectionNum,
            void *p_data) ;
extern Boolean MyInitFileEnumStringSection(
            const char *category,
            const char *key,
            InitFileReadFlags flags,
            T_myInitFileEnumCallback callback,
            word codeSegment,
            void *enumData) ;

/*=========================================================================*
 *  METHODS FOR CLASS:  INIStartupListClass
 *=========================================================================*/


    @classdecl INIStartupListClass ;


/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_LOAD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Loads the startup list from the guardian class and starts up
 |    the UI.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_GUARDIAN_LOAD
{
    T_startupList *p_list ;
    MemHandle listBlock ;

    /* First, make sure we have no data. */
    @call oself::MSG_INI_STARTUP_LIST_DELETE_ALL() ;

    /* Ok, now allocate a block for the empty list */
    listBlock = MemAlloc(sizeof(T_startupList), HF_SWAPABLE, HAF_ZERO_INIT) ;
    if (listBlock)  {
        p_list = MemLock(listBlock) ;

        /* We have no entries in the list */
        p_list->numApps = 0 ;

        /* Load in the sections */
        MyInitFileEnumStringSection(
            "ui",
            "execOnStartup",
            0,
/*
            (IFCC_INTACT << IFRF_CHAR_CONVERT_OFFSET) |
                    MAX_STARTUP_APP_LENGTH,
*/
            (T_myInitFileEnumCallback)StartupLoadCallback,
            _CS,
            (void *)p_list) ;
/*
    strcpy(p_list->appArray[0], "testing") ;
    p_list->numApps = 1 ;
*/
        MemUnlock(listBlock) ;

        /* Record this new block as the state block */
        pself->IG_uiState = listBlock ;

        /* Make the UI reflect this change */
        @call oself::MSG_INI_GUARDIAN_UPDATE_UI() ;
    }
}

/*-------------------------------------------------------------------------
 | Routine: StartupLoadCallback
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Goes through all the entries in the startup list and adds them
 |    to the given T_statupList structure.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

Boolean far StartupLoadCallback(
            const char *p_stringSection,
            word sectionNum,
            void *p_data)
{
    T_startupList *p_list ;

    /* Get the correct type of the data */
    p_list = (T_startupList *)p_data ;

    /* Only add to the list if the list is not full. */
    if (p_list->numApps < MAX_STARTUP_LIST_ITEMS)  {
        /* Copy the app name into the list */
        strcpy(p_list->appArray[p_list->numApps++], p_stringSection) ;
    }

    /* Keep processing */
    return FALSE ;
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_SAVE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Saves the execOnStartup section in the .INI file.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_GUARDIAN_SAVE
{
    T_startupList *p_list ;
    word i ;

    /* Only process this if we have a list */
    if (pself->IG_uiState)  {
        /* First, delete the whole section. */
        InitFileDeleteEntry("ui", "execOnStartup") ;

        /* Now add all the entries */
        p_list = MemLock(pself->IG_uiState) ;

        /* Append all the entries */
        for (i=0; i<p_list->numApps; i++)
            InitFileWriteStringSection(
                "ui",
                "execOnStartup",
                p_list->appArray[i]) ;

        MemUnlock(pself->IG_uiState) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_REVERT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Goes back to the original data and resets the ui object.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_GUARDIAN_REVERT
{
    /* We are going to old data */
    /* Just reload */
    @call oself::MSG_INI_GUARDIAN_LOAD() ;
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_USE_DEFAULT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Uses the default value and updates the UI accordingly.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_GUARDIAN_USE_DEFAULT
{
    T_startupList *p_list ;

    /* The default is our own making. */
    /* For the desktop, the lights out launcher is always */
    /* the default and only one in the list. */
    if (pself->IG_uiState)  {
        p_list = MemLock(pself->IG_uiState);
@ifdef ENSEMBLE_BUILD
        p_list->numApps = 1 ;
        strcpy(p_list->appArray[0], "Lights Out Launcher") ;
@endif
@ifdef NEWDEAL98_BUIlD
        p_list->numApps = 0 ;   /* None on the startup list */
@endif
        MemUnlock(pself->IG_uiState) ;
        @call oself::MSG_INI_GUARDIAN_UPDATE_UI() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_UPDATE_UI
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Make the attached UI object reflect the state of the INI guardian.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_GUARDIAN_UPDATE_UI
{
    T_startupList *p_list ;

    /* Only bother if we got a block and a uiObject */
    if ((pself->IG_uiState != NullHandle) &&
            (pself->IG_uiObject != NullHandle))  {
        p_list = MemLock(pself->IG_uiState) ;
        @call (pself->IG_uiObject)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(
                   p_list->numApps) ;
        MemUnlock(pself->IG_uiState) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_GUARDIAN_CHECK_IF_CHANGED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Determine if the startup list is different from the saved list.
 |
 | Outputs:
 |    Boolean                     -- TRUE if changed, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

static word G_numCompares ;

@method INIStartupListClass, MSG_INI_GUARDIAN_CHECK_IF_CHANGED
{
    T_startupList *p_list ;
    Boolean isDirty = FALSE ;

    /* To do the check, we are going to enumerate through all the */
    /* currently saved items in the list and see if they are */
    /* the same. */
    if (pself->IG_uiState)  {
        p_list = MemLock(pself->IG_uiState) ;

        /* Count number of compares */
        G_numCompares = 0 ;

        /* Load in the sections */
        isDirty = MyInitFileEnumStringSection(
                      "ui",
                      "execOnStartup",
                      (IFCC_INTACT << IFRF_CHAR_CONVERT_OFFSET) |
                              MAX_STARTUP_APP_LENGTH,
                      (T_myInitFileEnumCallback)StartupCompareCallback,
                      _CS,
                      (void *)p_list) ;

        /* One last check, if we didn't compare the right number */
        /* of items, its had items added */
        if (G_numCompares != p_list->numApps)
            isDirty = TRUE ;

        MemUnlock(pself->IG_uiState) ;
    }

    return isDirty ;
}

/*-------------------------------------------------------------------------
 | Routine: StartupCompareCallback
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Compares the given entry with the one in the startup list.
 |    If they are different (or we ran out of spots), return TRUE signaling
 |    an end of the process and a difference.
 |
 | Outputs:
 |    Boolean                     -- TRUE to stop and say 'different'
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

Boolean far StartupCompareCallback(
            const char *p_stringSection,
            word sectionNum,
            void *p_data)
{
    T_startupList *p_list ;

    /* Get the correct type of the data */
    p_list = (T_startupList *)p_data ;

    /* Stop if the section is past the end */
    if (sectionNum >= p_list->numApps)
         return TRUE ;

    /* Compare the given with the entry. */
    /* Return TRUE if different. */
    if (strcmp(p_list->appArray[sectionNum], p_stringSection) != 0)
         return TRUE ;

    /* Another correct one */
    G_numCompares++ ;

    /* No problem.  Keep processing */
    return FALSE ;
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_DELETE_ALL
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Delete any attached data to this object.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_DELETE_ALL
{
    /* Free up the list of startup items */
    if (pself->IG_uiState)  {
        MemFree(pself->IG_uiState) ;
        pself->IG_uiState = NullHandle ;
    }
}


/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_QUERY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Handles the query message for displaying items in a GenDynamicList.
 |
 | Inputs:
 |    optr list                   -- Querying list.
 |    word item                   -- Entry position.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_QUERY
{
    T_startupList *p_list ;

    if (pself->IG_uiState)  {
        p_list = MemLock(pself->IG_uiState) ;

        @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
                  item,
                  p_list->appArray[item]) ;

        MemUnlock(pself->IG_uiState) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_REMOVE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Handles the trigger message to remove an item from the list.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger.  Ignored.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_REMOVE
{
    word item ;
    T_startupList *p_list ;

    /* Doesn't work if we have no state info */
    if (pself->IG_uiState)  {
        /* What's selected? */
        item = @call StartupList::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;

        p_list = MemLock(pself->IG_uiState) ;

        /* Only remove if the item is selected on the list */
        if (item < p_list->numApps)  {
            /* Constrict the list (unless at the end) */
            if ((item+1) != p_list->numApps)
                memcpy(
                    p_list->appArray+item,
                    p_list->appArray+item+1,
                    sizeof(p_list->appArray[0]) *
                        (p_list->numApps - item - 1)) ;

            /* One less now */
            p_list->numApps-- ;

            /* Remove that item from the gen list */
            @call StartupList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(item, 1) ;
        }

        MemUnlock(pself->IG_uiState) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_ADD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Request for the addition of another app on the startup list.
 |
 | Inputs:
 |    optr trigger                -- Calling trigger.  Ignored.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_ADD
{
    T_startupList *p_list ;
    dword flagsAndDrive ;
    char buffer[200] ;
    DiskHandle disk ;
    char *p_pos ;
    GeosFileType fileType ;

    /* Doesn't work if we have no state info */
    if (pself->IG_uiState)  {
        /* First, we need a file to work with.  Call up a file dialog. */
        flagsAndDrive =
            @call StartupFileSelector::
                MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(
                    buffer) ;

        /* Extract the disk handle */
        disk = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(flagsAndDrive) ;

        /* Construct the full path at the end of the app list */
        p_list = MemLock(pself->IG_uiState) ;
        if (p_list->numApps < MAX_STARTUP_LIST_ITEMS)  {
            p_pos = p_list->appArray[p_list->numApps] ;
            FileConstructFullPath(
                &p_pos,
                MAX_STARTUP_APP_LENGTH,
                disk,
                buffer,
                TRUE) ;
            /* One last check, is this really a geos file or a subdir? */
            FileGetPathExtAttributes(
                p_list->appArray[p_list->numApps],
                FEA_FILE_TYPE,
                &fileType,
                sizeof(fileType)) ;

            /* Only add executables */
            if (fileType == GFT_EXECUTABLE)  {
                @call StartupList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(
                    p_list->numApps,
                    1) ;
                p_list->numApps++ ;
            }
        }
        MemUnlock(pself->IG_uiState) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_GO_TO_WORLD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Change to the world directory
 |
 | Inputs:
 |    optr trigger                -- Calling trigger.  Ignored.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_GO_TO_WORLD
{
    /* Jump over the to the world directory  */
    @call StartupFileSelector::MSG_GEN_FILE_SELECTOR_SET_FULL_SELECTION_PATH(
              "\\",
              SP_APPLICATION) ;
}

/*-------------------------------------------------------------------------
 | Method:  INIStartupListClass::MSG_INI_STARTUP_LIST_OPEN_FILE_SELECTOR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Bring up the file selector
 |
 | Inputs:
 |    optr trigger                -- Calling trigger.  Ignored.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

@method INIStartupListClass, MSG_INI_STARTUP_LIST_OPEN_FILE_SELECTOR
{
    @call oself::MSG_INI_STARTUP_LIST_GO_TO_WORLD(trigger) ;
    @call StartupFileDialog::MSG_GEN_INTERACTION_INITIATE() ;
}

/*-------------------------------------------------------------------------
 | Routine:  MyInitFileEnumStringSection
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This routine is a fix for InitFileEnumStringSection whose stub does
 |    not appear to be in order.
 |
 | Inputs:
 |    const char *category        -- Category for string section
 |    const char *key             -- key in category for string section
 |    InitFileReadFlags flags     -- Option flags to set upper/lower/normal
 |                                   case.
 |    Boolean (*callback ...)     -- Callback routine to call per entry
 |    void *enumData              -- Pointer to pass to callback routine.
 |
 | Outputs:
 |    Boolean                     -- Returns TRUE if any callbacks returned
 |                                   TRUE and stopped the enumerating.
 |                                   Otherwise, FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  08/18/97  Created
 |
 *-----------------------------------------------------------------------*/

Boolean MyInitFileEnumStringSection(
            const char *category,
            const char *key,
            InitFileReadFlags flags,
            T_myInitFileEnumCallback callback,
            word codeSegment,
            void *enumData)
{
    char buffer[200] ;
    word size ;
    word i ;
    Boolean ret ;

    i = 0 ;
    /* Get one string at a time into the buffer */
    while (InitFileReadStringSectionBuffer(
               category,
               key,
               i,
               buffer,
               flags | sizeof(buffer),
               &size) == FALSE) {
        /* Make sure it is null terminated */
        buffer[size] = '\0' ;

        /* Call the callback with this section and buffer */
        ((word *)&callback)[1] = codeSegment ;
        ret = callback(buffer, i, enumData) ;
        i++ ;

        /* Quit if we got a TRUE status */
        if (ret == TRUE)  {
            return TRUE ;
        }
    }

    /* If we got here, nobody called the enumerating. */
    return FALSE ;
}

/***************************************************************************
 *  END OF FILE:  STARTLST.GOC
 ***************************************************************************/

