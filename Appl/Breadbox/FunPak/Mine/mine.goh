/***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************/

    /*---------------------------------------------------------------------*/
    @class MineProcessClass, GenProcessClass ;
        @message void MSG_VIEW_INVALIDATE() ;
        @message void MSG_VIEW_MINE_NEW() ;
        @message void MSG_MINE_SIZE_CHANGED() ;
        @message void MSG_MINE_COMPLETED() ;
        @message void MSG_MINE_REDRAW_SQUARE(sword pos_x, sword pos_y) ;
        @message void MSG_MINE_REDRAW_SQUARE_9(sword pos_x, sword pos_y) ;
        @message void MSG_MINE_FOUND() ;
        @message void MSG_MINE_UNCOVER_ALL() ;
        @message void MSG_MINE_UPDATE_FLAG_COUNT() ;
        @message void MSG_MINE_UPDATE_SCORE() ;
        @message void MSG_MINE_UPDATE_HIGH_SCORES() ;
        @message void MSG_MINE_PLACE_HIGH_SCORE() ;
        @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MINE_SET_DENSITY;
        @message (GEN_BOOLEAN_GROUP_APPLY_MSG) MSG_MINE_SET_BOOLEANS;
    @endc
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class MineTimerClass, GenGlyphClass ;
        @message void MSG_MINE_CHANGE_TIME() ;
        @message void MSG_MINE_RESET_TIMER() ;
        @message void MSG_MINE_TIMER_CHANGE() ;
    @endc
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class MineViewClass, GenViewClass ;
    @endc
    /*---------------------------------------------------------------------*/




    /*---------------------------------------------------------------------*/
    @class MineContentClass, VisContentClass ;
    @endc
    /*---------------------------------------------------------------------*/



    /*---------------------------------------------------------------------*/
    @class MinePrimaryClass, GenPrimaryClass ;
    @endc
    /*---------------------------------------------------------------------*/


typedef struct {
    char name[80] ;
    word score ;
} high_score ;

extern MemHandle mine_field_handle ;
extern word game_mode ;
extern byte fun_mode;
extern word size_x ;
extern word size_y ;
extern byte time_sec ;
extern byte time_min ;
extern byte time_hour ;
extern word timer_id ;
extern word timer_handle ;
extern word num_mines ;
extern word num_squares_left ;
extern word num_flags ;
extern word player_score ;
extern Boolean timer_going ;
extern byte density ;
extern char  pname[14] ;
extern Boolean growBoolean ;
extern Boolean timedBoolean ;
extern Boolean flaggingBoolean ;
extern Boolean areaClearBoolean ;
extern high_score high_scores[10] ;
extern word num_high_scores ;
extern char mine_state_file[25] ;
extern char BombPicture[] ;

#define SQUARE_SIZE           16
#define TEXT_SIZE             (SQUARE_SIZE-2)

#define MINE_FIELD_COVER_BIT  0x80
#define MINE_FIELD_MARK_BIT   0x40
#define MINE_FIELD_HASH_BIT   0x20

#define quick_mine_field(posx, posy)  ((posx)+((posy)*(size_x)))

#define DOC_WIDTH             INITIAL_SIZE*SQUARE_SIZE
#define DOC_HEIGHT            DOC_WIDTH

void UncoverAll(void) ;

void mycopy(char *s, char *t, word size) ;

#define INITIAL_SIZE 14

#define MINE_VERY_LOW_DENSITY 10
#define MINE_LOW_DENSITY 8
#define MINE_LOW_TO_MEDIUM_DENSITY 7
#define MINE_MEDIUM_DENSITY 5
#define MINE_MEDIUM_TO_HIGH_DENSITY 4
#define MINE_HIGH_DENSITY 3
#define MINE_IMPOSSIBLE_DENSITY 2


/* I'll define my bit-in-word value for the GenBooleanClass I'll be
   using. */
#define MINE_BOOLEAN_GROW_BIT       1
#define MINE_BOOLEAN_TIMER_BIT      2
#define MINE_BOOLEAN_FLAGGING_BIT   4
#define MINE_BOOLEAN_AREA_CLEAR_BIT 8

void MineMake(byte* mine_field, word size_x, word size_y) ;
word MyRandom(void) ;
void MineDraw(GStateHandle gstate,
              RectDWord *rect) ;
void UncoverAll() ;
char *convert_word_to_str(char *buffer, word value) ;




