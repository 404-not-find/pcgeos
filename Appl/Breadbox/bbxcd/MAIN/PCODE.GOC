/************************************************
 *						*
 *	project:	BSW-CD			*
 *	module:		MAIN\PCODE.GOC		*
 *						*
 * 	subroutines for the process object and	*
 *      the UI                                  *
 *						*
 ************************************************/

@include <stdapp.goh>
@include <Ui\define.goh>
#include <bbxcd.h>		/* selbsterstellte Datenstrukt.*/
#include <Lib\cdlib.h>
@include <Main\process.goh>
@include <UI\UIMain.goh>
@include <UI\UIMAX.goh>
#include <Main\Subcode.h>
#include <Main\Pcode.h>
#include <Main\Display.h>
#include <ansi/string.h>
#include <stdio.h>

@ifdef TIMELIMIT
@include <timedate.h>
@endif

@extern chunk IncompatDBaseTxt;
@extern chunk CreatingDBaseTxt;
@extern chunk DBaseWriteErrorTxt;
@extern chunk MSCDEXErrorTxt;
@extern chunk NoneTxt;
@extern chunk ScanTxt;
@extern chunk OffTxt;
@extern chunk MinTrackTxt;
@extern chunk NoDiscTxt;

void _pascal CheckForValidDatabase(void)
// checking for existing and valid database
{
  flag found;
  FileHandle fHand;
  byte	i;

  FileSetCurrentPath(SP_PUBLIC_DATA,".");
  found = FALSE;
  fHand = FileOpen (dbName,FILE_DENY_W|FA_READ_ONLY);
  if (fHand) {
    found = TRUE;
    FilePos(fHand,0,FILE_POS_START);
    if (FileRead(fHand,globalText,33,FALSE)==33)
      if (strcmp(globalText,dbHeader)) {
        //moving incompatible database file
        found = FALSE;
			MemLock (OptrToHandle(@IncompatDBaseTxt));
		  UserStandardDialog( 0,0,0,0,
			 LMemDeref(@IncompatDBaseTxt),
			 ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
          (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET))
        );
			MemUnlock (OptrToHandle(@IncompatDBaseTxt));
		  FileClose(fHand,FALSE);
        FileRename(dbName,"bbcdplay.bak");
        fHand=0;
      }
    if (fHand)
      FileClose(fHand,FALSE); // close if still open (in case of correct database)
  }
  if (!found) {
  // creating new Database file
	 MemLock (OptrToHandle(@CreatingDBaseTxt));
	 UserStandardDialog( 0,0,0,0,
		LMemDeref(@CreatingDBaseTxt),
    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
     (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET))
    );
	 MemUnlock (OptrToHandle(@CreatingDBaseTxt));
	 fHand = FileCreate (dbName,
                         FILE_CREATE_ONLY|FCF_NATIVE|FILE_ACCESS_RW|FILE_DENY_RW,
                         FA_ARCHIVE);
    if (fHand) {
		/* jfh 12/08/03 - initialize some stuff to get the initial strings into
			a resource for localization */
		MemLock (OptrToHandle(@MinTrackTxt));
		for (i = 1; i <= MaxTracks; i++) {
			sprintf(dbEntry.trackName[i],LMemDeref(@MinTrackTxt),i);
			}
		strcpy(dbEntry.cd_NAME, LMemDeref(@NoDiscTxt));

		MemUnlock (OptrToHandle(@MinTrackTxt));


		FilePos(fHand,0,FILE_POS_START);
      FileWrite(fHand,dbHeader,33,FALSE);
      FileWrite(fHand,&dbEntry,sizeof(dbEntry),FALSE);
      FileClose(fHand,FALSE);
    } else {
	 MemLock (OptrToHandle(@DBaseWriteErrorTxt));
		UserStandardDialog( 0,0,0,0,
		  LMemDeref(@DBaseWriteErrorTxt),
      ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
       (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET))
      );
	 MemUnlock (OptrToHandle(@DBaseWriteErrorTxt));
	 }
  }
}


void _pascal Reset_Application (byte drive)
{
  long playtime;
  byte track;
  int  i,lvol,rvol;

  noInterrupt = TRUE;
  CD_Drive_Dos_Close();
  CD_Drive_Set (drive) ;
  CD_Drive_Dos_Open();
  noInterrupt = FALSE;

  if (!(CD_Drive_Get_Status () & CD_STATUS_DOOR_OPEN))
    ShowEjectMoniker(1);
  else
    ShowEjectMoniker(0);
  CD_Drive_Get_Change();
  ReadCDData();

  // Lautst„rkesteuerung nur aktiv wenn FBG_VOLUME
  // wenn nicht aktiv ==> Dummywerte = 255
  if (optionFlags&FBG_VOLUME)
  {
    lvol=(int)CD_Drive_Get_Volume(0);
    rvol=(int)CD_Drive_Get_Volume(1);
  }
  else
  {
    lvol=255;
    rvol=255;
  }

  volume = (rvol>lvol ? rvol:lvol) ;
  @send VolumeValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(volume,FALSE);
  if (balance == 50){
    if (volume && (lvol != rvol))
      if (lvol > rvol ) {
        balance = rvol * 50 / lvol;
      } else {
        balance = 100 - (lvol * 50 / rvol);
      }
    @send BalanceValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(balance,FALSE);
  }
  @send process::MSG_BCD_SET_VOLUME();
  if(CD_Get_Play_Status()!= -1) {
    isPlaying = TRUE;
    pauseState=FALSE;
    if(CD_Get_Play_Status()== 1)
      pauseState = TRUE;
    ShowPlayMoniker(0);
    playtime=CD_Get_Play_Position(0);
    track = playtime>>24 ;
    currentTrack = track;
    CalendarFrame(track,C_YELLOW);
    for (i=0; (i<currentTrack)&&(i<=MaxTracks); i++) {
      calendarFrame[i] = backGroundColor;
      tracksToPlay[i]=0;
    }
    RedrawCalendar(NullHandle);
  }
  ShowTrackTime();
  RedrawStatus(NullHandle);
}



void _pascal Gen_Process_Open_Application(void)
/* general initialisation */
{
  word MSCDEX_Version ;
  byte MSCDEX_DriveNr ;
  byte i;
  MSCDEX_Version = MSCDEX_Get_Version();
  if (MSCDEX_Version <0x200)
  {
    defaultMessage = ERR_MSG_DEMO_MODE;
	MemLock (OptrToHandle(@MSCDEXErrorTxt));
	 UserStandardDialog( 0,0,0,0,
	  LMemDeref(@MSCDEXErrorTxt),
	 ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
     (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET))
    );
	MemUnlock (OptrToHandle(@MSCDEXErrorTxt));
  } else {
    defaultMessage = ERR_MSG_CREDITS;
  }
  @send BCPrimary::MSG_BC_PRIM_SET_FIRST_AID(defaultMessage);
  sprintf (globalText,"%u.%u",MSCDEX_Version>>8,MSCDEX_Version%256);
  @call CITR1A::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(globalText,VUM_NOW);
  driveMax = MSCDEX_Get_Drives() ;
  globalText[0] = 0;
  for (i=0;(i<driveMax)&&(i<8);i++)
    sprintf (&globalText[3*i],"%c: ",MSCDEX_Get_Drive_Letter (i)+65);
  if (!MSCDEX_Version) {
		MemLock (OptrToHandle(@NoneTxt));
		sprintf (globalText,LMemDeref(@NoneTxt));
	   MemUnlock (OptrToHandle(@NoneTxt));
  }
  @call CITR1::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(globalText,VUM_NOW);
  @call BCPrimary::MSG_BC_PRIM_SET_DRIVES_MAX();   //Laufwerksanzahl berechnen
  MSCDEX_DriveNr = MSCDEX_Get_Drive_Letter (drivenum-1) ;
  CD_Drive_Set (MSCDEX_DriveNr) ;
  CheckForValidDatabase();
  // dummy open to cover the automatic close in Reset_Application()
  CD_Drive_Dos_Open();
  Reset_Application(MSCDEX_DriveNr);
}

void _pascal Change_Display_Mode (void)
/* cyclic change of DisplayMode (0 to 3) */
{
  displayMode = (++displayMode) % 4 ;
  ShowTrackTime();
}


void _pascal Bcd_Trig_Eject (void)
/* open or close drive door */
{
  word CD_Status ;
  if (CD_Get_Play_Status()!=-1 )
    Bcd_Trig_Stop();
  CD_Status = CD_Drive_Get_Status () ;
  if (CD_Status & CD_STATUS_DOOR_OPEN )
    CD_Drive_Door (1);
  else
    CD_Drive_Door (0);
}


void _pascal  Bcd_Trig_Play(void)
/* play disc */
{
  byte i;
  if (CD_Drive_Get_Status()& CD_STATUS_DOOR_OPEN) {
    Bcd_Trig_Eject();
    return;
  }
  if (isPlaying) {
    if (pauseState) {
      CD_Play_Resume();
      pauseState = FALSE;
      ShowPlayMoniker(0);
      SetTurnMonikers (8);
    } else {
      CD_Play_Stop(1);
      pauseState = TRUE;
      SetTurnMonikers (8);
      ShowPlayMoniker(1);
    }
  } else {
    i= GetNextTrack();
    if (i) {
      CalendarFrame(currentTrack,backGroundColor);
      currentTrack = i ;
      StartPlaying (currentTrack);
      CalendarFrame(currentTrack,C_YELLOW);
      RedrawCalendar(NullHandle);
    } else {
      ErrorSound(ERR_MSG_NO_AUDIO_CD);
    }
  }
  ShowTrackTime();
  RedrawStatus(NullHandle);
}

void _pascal Bcd_Trig_Stop (void)
/* stop playing */
{
  int i;
  CD_Play_Stop(0);
  if (pauseState) {
    pauseState = FALSE;
    SetTurnMonikers (8);
  }
  isPlaying = FALSE;
  currentTrack = 0;
  programCounter = 0;
  for (i=1;i<=MaxTracks;i++)
    calendarFrame[i] = backGroundColor;
  for (i=1;i<=MaxTracks;i++) {
    if (validTracks[i]==1) {
      tracksToPlay[i] = 1;
      if (programMode != MIG_PROGRAM)
        calendarFrame[i] = C_WHITE;
    }
    if (programMode == MIG_PROGRAM)
      calendarFrame[programTracks[i]] = C_WHITE;
  }
  ShowPlayMoniker (1) ;
  CDLib_Reset_Valid_Flags();
  noInterrupt = FALSE;		// !!! La.24.05.97
  ShowTrackTime();
  RedrawAll();
}

void _pascal Bcd_Trig_Rew (void)
// play previous track or restart track
// add support for more than 1 data track
{
  byte track;
  long playtime;
  if (CD_Drive_Get_Status()& CD_STATUS_DOOR_OPEN)
    Bcd_Trig_Eject();
  if (isPlaying) {
    playtime=CD_Get_Play_Position(0);
    if (((playtime&0x00ffff00L)<0x00000200L)) {
      track = GetPreviousTrack();
      TracksToPlay(track,1);
      CalendarFrame(currentTrack,C_WHITE);
      CalendarFrame(track,C_YELLOW);
      currentTrack = track;
      StartPlaying (track);
      if (!currentTrack) Bcd_Trig_Stop();
    } else {
      StartPlaying(currentTrack);
    }
  } else {
    Bcd_Trig_Fwd();
    return;
  }
  ShowTrackTime();
  RedrawStatus(NullHandle);
  RedrawCalendar(NullHandle);
}

void _pascal Bcd_Trig_Fwd(void)
// skip to next track
{
  byte track;
  if (CD_Drive_Get_Status()& CD_STATUS_DOOR_OPEN)
    Bcd_Trig_Eject();
  track = GetNextTrack();
  if (track) {
    CalendarFrame(currentTrack,backGroundColor);
    if (programMode != MIG_PROGRAM)
      TracksToPlay(currentTrack,0);
    currentTrack = track;
    CalendarFrame(currentTrack,C_YELLOW);
    StartPlaying (currentTrack);
    if (!currentTrack)
      Bcd_Trig_Stop();
    RedrawCalendar(NullHandle);
    ShowTrackTime();
    RedrawStatus(NullHandle);
  }
}


void _pascal Bcd_Trig_Scan(void)
// enter or leave title scan mode
{
  if (scanMode <30)
    scanMode += 10;
  else
    scanMode = 0;
  MemLock (OptrToHandle(@ScanTxt));
  sprintf(titleTimeText,LMemDeref(@ScanTxt));
  sprintf(titleRemText,LMemDeref(@ScanTxt));
  if (scanMode) {
    sprintf(discTimeText,"%u",scanMode);
    sprintf(discRemText,"%u",scanMode);
  } else {
	 sprintf(discTimeText,LMemDeref(@OffTxt));
	 sprintf(discRemText,LMemDeref(@OffTxt));
  }
  MemUnlock (OptrToHandle(@ScanTxt));
  RedrawTime(NullHandle);
  if (!isPlaying)
    Bcd_Trig_Play();
}




