
/* This class sets up repeating triggers */
@class HBaseTriggerClass, GenTriggerClass;
   @instance TimerHandle HBTI_timer = NullHandle;
   @instance word HBTI_timerId = 0;
   @instance word HBTI_wait = 8;
   @instance Boolean HBTI_held = FALSE;

   @message void MSG_HB_TRIGGER_CLICK();
@endc

@classdecl HBaseTriggerClass;



@object HBaseTriggerClass NextIcon = {
    GI_visMoniker = list {@NextButtonIcon};
    GTI_destination = process;
    GTI_actionMsg = MSG_NAV_RECORDS;
    ATTR_GEN_TRIGGER_ACTION_DATA = NEXT;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	sets instance data in HBTriggerClass to get ready
 *		for a possibly held down button
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_META_START_SELECT
{
    pself->HBTI_wait = 20 ;  /* could set this in .goh */
    pself->HBTI_held = TRUE ;
    @send oself::MSG_HB_TRIGGER_CLICK() ;
    @callsuper() ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_HB_TRIGGER_CLICK for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	repeats trigger action if button held down
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_HB_TRIGGER_CLICK
{

    /* bail if PrevButton and first record */
    if ((currentRecord == 0) && (oself == @PrevButton))
       return; 

    /* bail if NextButton and last record */
    if ((currentRecord == numRecords - 1) && (oself == @NextButton))
       return; 

    /* sends the button action MSG every 20/60s of a second */
    if (pself->HBTI_held == TRUE)  {
       /* this adds a delay so a single click reacts right */
       if (pself->HBTI_wait != 20)
          @send oself::MSG_GEN_TRIGGER_SEND_ACTION(FALSE) ;
       if (pself->HBTI_wait != 19)
	  pself->HBTI_wait-- ;
       pself->HBTI_timer = TimerStart(
                                TIMER_EVENT_ONE_SHOT,
                                oself,
                                pself->HBTI_wait,
                                MSG_HB_TRIGGER_CLICK,
                                pself->HBTI_wait,
                                &pself->HBTI_timerId);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_LOST_MOUSE_EXCL for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	resets instance data in HBTriggerClass
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_META_LOST_MOUSE_EXCL
{
    pself->HBTI_held = FALSE ;
    @callsuper() ;
}

Please remember that this code belongs to Breadbox and is for use in Breadbox
applications only.  Please do not distribute this code to anyone other than
Dirk.

John ;-)


