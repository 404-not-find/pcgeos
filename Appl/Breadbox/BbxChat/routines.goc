
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/***************************************************************************
 *  FILE:  ROUTINES.GOC
 ***************************************************************************/
@include "gpcchat.goh"
@include "externs.goh"

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   IRC data transfer routines.
 *-----------------------------------------------------------------------*/

ResolvedTCPAddress   hostaddr = {{{0,MANUFACTURER_ID_SOCKET_16BIT_PORT},
							sizeof(IRC_DOMAIN)-1,IRC_DOMAIN,
							0}};

/*-------------------------------------------------------------------------
 | Routine:  IRCSendData
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Send data out the IRC socket port.
 |
 | Inputs:
 |    byte *p_data                -- array of bytes to send
 |    word len                    -- Number of bytes to send
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  03/26/99  added Latin code page
 *-----------------------------------------------------------------------*/
void IRCSendData(char *p_data, word len)
{

    LocalGeosToCodePage(p_data, len, CODE_PAGE_LATIN_1, '.');

	 SocketSend(G_sock, p_data, len, NULL, 0);

@ifdef DUMP_TO_FILE
	 FileWrite(DumpFileHandle, "OUT - ", 6, FALSE);
	 FileWrite(DumpFileHandle, p_data, len, FALSE);
	 FileWrite(DumpFileHandle, "\r\n", 2, FALSE);
@endif
}

/*-------------------------------------------------------------------------
 | Routine:  IRCSendString
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Send a null terminated string out the port.
 |
 | Inputs:
 |    byte *p_text                -- Null terminated text
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
void IRCSendString(char *p_str)
{
    IRCSendData(p_str, strlen(p_str)) ;
}

/*-------------------------------------------------------------------------
 | Routine:  IRCOpen
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Start an IRC connection.
 |
 | What's happening:
 |    The routine basically blocks while trying to open the IRC connection
 |    and may take some time doing it.  The following steps are taken while
 |    outputting messsages to the display object (in the UI thread):
 |        * Resolve the name of the port connection into an ip address
 |        * Use the ip number of open a connection
 |
 | Inputs:
 |    char *siteName              -- Site to connect to.
 |    word sitePort               -- Site's port number
 |    word accPnt                 -- Access Point
 |
 | Outputs:
 |    Boolean                     -- TRUE if connection established
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
Boolean IRCOpen(char *siteName, word sitePort, word accPnt)
{
word error ;
char buffer[80];
UnresolvedTCPAddress hostname;


    hostname.UTA_link.TAPEA_linkSize =
      sizeof(hostname.UTA_link.TAPEA_linkType) +
      sizeof(hostname.UTA_link.TAPEA_accPntID);

    MemLock(OptrToHandle(@SearchingStr));
    strcpy(buffer, LMemDeref(@SearchingStr));
    MemUnlock(OptrToHandle(@SearchingStr));
    DisplayMsg(buffer, G_curDisplay, FALSE) ;

    /* TBD: currently, we hard code the use of access point #1. Must change. */

    hostname.UTA_link.TAPEA_linkType = LT_ID;
  /*  hostname.UTA_link.TAPEA_accPntID = 1;   TRY THIS v*/
    hostname.UTA_link.TAPEA_accPntID = accPnt;

    hostaddr.RTA_sock.SA_port.SP_port = sitePort ;
    strncpy(hostname.UTA_ip, siteName, MAX_IP_ADDR_STRING_LENGTH);

    hostaddr.RTA_sock.SA_addressSize =
        SocketResolve(
            IRC_DOMAIN,
            (byte*) &hostname,
            sizeof(hostname.UTA_link) + strlen(hostname.UTA_ip),
            (byte*) &hostaddr.RTA_addr,
            sizeof(hostaddr.RTA_addr));

    if (!hostaddr.RTA_sock.SA_addressSize)  {
	/*   G_ircError = ThreadGetError() ; */
			 G_ircError = SOCKET_GENERIC_ERROR(ThreadGetError());
	   return FALSE ;
    }
    MemLock(OptrToHandle(@SearchingStr));
    strcpy(buffer, LMemDeref(@FoundAddrStr));
    DisplayMsg(buffer, G_curDisplay, FALSE) ;
    strcpy(buffer, LMemDeref(@StartConnStr));
    DisplayMsg(buffer, G_curDisplay, FALSE) ;
    MemUnlock(OptrToHandle(@SearchingStr));
    G_sock = SocketCreate(SDT_STREAM);
    error = SOCKET_GENERIC_ERROR(SocketConnect(
    			G_sock, &hostaddr.RTA_sock, IRC_TIMEOUT));
    if (error != SE_NORMAL)  {
        SocketClose(G_sock) ;
        G_ircError = error ;
        return FALSE ;
    }
    MemLock(OptrToHandle(@SearchingStr));
    strcpy(buffer, LMemDeref(@ConnEstabStr));
    DisplayMsg(buffer, G_curDisplay,FALSE) ;
    MemUnlock(OptrToHandle(@SearchingStr));

    return TRUE ;
}

/*-------------------------------------------------------------------------
 | Routine:  IRCClose
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Close an IRC connection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
void IRCClose(void)
{
    Socket sock ;
    char	buffer[30];

    if (G_sock)  {
	   MemLock(OptrToHandle(@ClosingStr));
	   strcpy(buffer, LMemDeref(@ClosingStr));
	   DisplayMsg(buffer, G_curDisplay, FALSE) ;
        IRCSendString("QUIT\r\n") ;
        sock = G_sock;
        G_sock = NullHandle ;
        SocketClose(sock) ;
	   strcpy(buffer, LMemDeref(@ClosedStr));
	   DisplayMsg(buffer, G_curDisplay, FALSE) ;
	   MemUnlock(OptrToHandle(@ClosingStr));
    }
}

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   General String Parsing Routines
 *-----------------------------------------------------------------------*/


/*-------------------------------------------------------------------------
 | Routine:  SkipSpaces
 *-------------------------------------------------------------------------
 |
 | Description:
 |    SkipSpaces takes in a pointer to a string and goes to the end or
 |    skips all spaces (but not all white spaces, just ' ').
 |
 | Inputs:
 |    char *p_text                -- Null terminated text
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

char *SkipSpaces(char *p_text)
{
    /* Skip the spaces */
    while ((*p_text) && (*p_text == ' '))
	   p_text++ ;

    return p_text ;
}

/*-------------------------------------------------------------------------
 | Routine:  GetSpaceDelimited
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Reads a string and finds the next space delimited item (or ends
 |    in '\0').
 |
 | Inputs:
 |    char *p_text                -- Null terminated string
 |    char *section               -- Pull out section.  Returns "\0" if
 |                                   none found.
 |    word sectionLimit           -- Limit on the number of characters in
 |                                   the section string.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

char *GetSpaceDelimited(
	    char *p_text,
	    char *section,
	    word sectionLimit)
{
    /* Skip any spaces at the front */
    p_text = SkipSpaces(p_text) ;

    /* Stop if we find the end of the line */
    while ((*p_text) &&
		 (*p_text != '\r') &&
		 (*p_text != '\n') &&
		 (*p_text != ' '))  {
	   if (sectionLimit)  {
		  *(section++) = *p_text ;
		  sectionLimit-- ;
	   }
	   p_text++ ;
    }
    *section = '\0' ;

    return SkipSpaces(p_text) ;
}

/*-------------------------------------------------------------------------
 | Routine:  ParseNicknameFromServerString
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Finds the nick name from the server string which is in the format:
 |        :nick!host
 |
 | Inputs:
 |    char *p_server              -- Server string (null terminated)
 |    char *p_nickname            -- String to return nick name in.
 |    word nickMaximum            -- Maximum nick name characters
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

void ParseNicknameFromServerString(
	char *p_server,
	char *p_nickname,
	word nickMaximum)
{
    if (*p_server == ':')
        p_server++ ;

    while ((nickMaximum) && (*p_server) && (*p_server != '!'))  {
        *(p_nickname++) = *(p_server++) ;
        nickMaximum-- ;
    }
    *p_nickname = '\0' ;
}

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   Text Output Routines
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Routine:  CheckLogChan
 *-------------------------------------------------------------------------
 |
 | Description:
 |    sees if the text is going to the channel with the focus (and is
 |      being logged)
 |
 | Inputs:
 |      optr whichDisp
 | Return:
 |      True if in the chan with the focus, false if not
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  07/14/00  Created.
 |
 *-----------------------------------------------------------------------*/

Boolean CheckLogChan(optr whichDisp)
{
 optr	targetDisplay, myRight, myDisp;


    /* is this the channel with the focus? if not don't log */
    @call IRCDisplayGroup::MSG_META_GET_TARGET_EXCL(&targetDisplay);
    myRight = @call targetDisplay::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myDisp = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    if (whichDisp != myDisp)
       return (FALSE);

    /* have we changed channels? */
    if (strcmp(G_prevChannel, G_currentChannel))  {
	  /* yes - tell the log */
	  FileWrite(LogFileHandle, "Logging in: ", 12, FALSE);
	  FileWrite(LogFileHandle, G_currentChannel, strlen(G_currentChannel), FALSE);
	  FileWrite(LogFileHandle, "\r", 1, FALSE);
	  strcpy(G_prevChannel, G_currentChannel);
	  }

    return(TRUE);

}

/*-------------------------------------------------------------------------
 | Routine:  DisplayText
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Displays any text to the text object
 |
 |
 | Inputs:
 |    char *p_msg                 -- Null terminated text
 |    optr whichDisplay           -- The recipient text window
 |    Boolean needTrans           -- to supress translation
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/27/98  added multi chan
 |    jfh  03/26/99  added Latin code page
 |    jfh  02/11/00  added supression of translation
 |
 *-----------------------------------------------------------------------*/

void DisplayText(char *p_msg, optr whichDisplay, Boolean needTrans)
{

    if (needTrans)
	  LocalCodePageToGeos(p_msg, strlen(p_msg), CODE_PAGE_LATIN_1, '.');

    @call whichDisplay::MSG_VIS_TEXT_APPEND_PTR(p_msg, 0) ;

    if (logging) {
	  if (!CheckLogChan(whichDisplay)) return;

	  /* convert Geos to DOS */
	  LocalGeosToDos(p_msg, strlen(p_msg), '-');
	  FileWrite(LogFileHandle,
					p_msg,
					strlen(p_msg),
					FALSE);
	  }
}

/*-------------------------------------------------------------------------
 | Routine:  DisplayMsg
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Displays a message to the text object.  Adds a carriage return
 |    to the text.
 |
 | Inputs:
 |    char *p_msg                 -- Null terminated message
 |    optr whichDisplay           -- The recipient text window
 |    Boolean needTrans           -- to supress translation
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/27/98  added multi chan
 |    jfh  03/26/99  added Latin code page
 |    jfh  02/11/00  added supression of translation
 |
 *-----------------------------------------------------------------------*/

void DisplayMsg(char *p_msg, optr whichDisplay, Boolean needTrans)
{

    if (needTrans)
	  LocalCodePageToGeos(p_msg, strlen(p_msg), CODE_PAGE_LATIN_1, '.');
 /*   @call whichDisplay::MSG_VIS_TEXT_APPEND_PTR("\r", 1) ; */
    @call whichDisplay::MSG_VIS_TEXT_APPEND_PTR(p_msg, 0) ;
    @call whichDisplay::MSG_VIS_TEXT_APPEND_PTR("\r", 1) ; /* back jfh */

    if (logging) {
	  if (!CheckLogChan(whichDisplay)) return;

	  /* convert Geos to DOS */
	  LocalGeosToDos(p_msg, strlen(p_msg), '-');
	  FileWrite(LogFileHandle,
					p_msg,
					strlen(p_msg),
					FALSE);
	  FileWrite(LogFileHandle,
					"\r",
					1,
					FALSE);
	  }

}

/*-------------------------------------------------------------------------
 | Routine:  DisplayError
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Displays the global error state (in G_ircError) to the text object.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

void DisplayError(void)
{
    char buffer[80] ;

    sprintf(buffer, "Error \043%d", G_ircError) ;
    DisplayText(buffer, G_curDisplay, FALSE) ;
    MemLock(OptrToHandle(@LostConnErrorMsg));
    if ((G_ircError == SE_CONNECTION_FAILED)
		  || (G_ircError == SE_CONNECTION_CLOSED)
		  || (G_ircError == SE_CONNECTION_RESET)
		  || (G_ircError == SE_TIMED_OUT)
		  || (G_ircError == SE_IMPROPER_CONDITION)
		  || (G_ircError == SE_LINK_FAILED)
		  || (G_ircError == SE_INTERNAL_ERROR))  {
	  strcpy(buffer, LMemDeref(@LostConnErrorMsg));
	  }
    else if ((G_ircError == SE_CONNECTION_REFUSED)
		  || (G_ircError == SE_UNKNOWN_DOMAIN)
		  || (G_ircError == SE_MEDIUM_BUSY)
		  || (G_ircError == SE_DESTINATION_UNREACHABLE)
		  || (G_ircError == SE_TEMPORARY_ERROR))  {
	  strcpy(buffer, LMemDeref(@CantConnErrorMsg));
	  }
    else strcpy(buffer, LMemDeref(@MiscConnErrorMsg));
    MemUnlock(OptrToHandle(@LostConnErrorMsg));
    DisplayMsg(buffer, G_curDisplay, FALSE);
}

/*-------------------------------------------------------------------------
 | Routine:  OutputTextPastColon
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Displays message to the display past the colon (if any).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

void OutputTextPastColon(char *p_msg)
{
    p_msg = strchr(p_msg, ':') ;
    if ((p_msg) && (p_msg[1]))  {
	   DisplayMsg(p_msg+1, G_curDisplay, TRUE) ;
    }
}


