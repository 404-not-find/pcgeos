/***********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mainProcess.goc
 *
 * AUTHOR:  	  Gene Anderson
 *
 * DESCRIPTION:
 *	MailProcessClass for the Mail application
 *
 ***********************************************************************/


@include "mail.goh"
@include "class.goh"
@include "global.goh"
@include <bbxmlib.goh>
@include <objects/clipbrd.goh>
#include <sem.h>
@include "parentc.goh"
#include <initfile.h>

@classdecl MailProcessClass, neverSaved;

ThreadLockHandle TheMessageListLock = NULL;

#ifdef __BORLANDC__
#pragma codeseg InitCode
#endif

const char crashKey[] = "clnOnCrash";

FileHandle g_logHan = NullHandle;


/**************************************************************
*          
* FUNCTION:        MSG_GEN_PROCESS_OPEN_APPLICATION
* PASS:            attachFlags - AppAttachFlags
*                  launchBlock - handle of AppLaunchBlock
*                  extraState - handle of extra state
* RETURN:          none
* DESCRIPTION:     Handle opening the application     
***************************************************************/
@method MailProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    MailAccountError err;
    Boolean crash;
    TCHAR acctName[FILE_LONGNAME_BUFFER_SIZE];
    TCHAR buf[MAIL_NAME_MAX];
	 AccessFlags pcAccess;
 Boolean		initError, logging;


	 FileSetCurrentPath(SP_PRIVATE_DATA, "");
        
    /*
     * Allocate a lock to control access to the message list files
     */
    TheMessageListLock = ThreadAllocThreadLock();

    GetDefaultAccount(acctName);
    err = MailAddAccount(acctName, NULL, NULL, NULL, NULL, NULL, NULL, MAIL_DEFAULT_APP_OPTIONS);

    /*
     * initialize the large text objects
     */
    @call PrintTextObject::MSG_MAIL_LARGE_TEXT_OPEN(NULL, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);
    @call ReadBodyText::MSG_MAIL_LARGE_TEXT_OPEN(@ReadBodyContent, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);
    @call ComposeBodyText::MSG_MAIL_LARGE_TEXT_OPEN(@ComposeBodyContent, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);


	/*
	 * If we previously crashed, make sure we clean up the mail directories
	 */
	if (!err || err == MAE_ACCOUNT_EXISTS) {
		@call MailAppObj::MSG_META_GET_INI_CATEGORY(buf);
		if (InitFileReadBoolean(buf, crashKey, &crash) || crash)  {
			@call TheMessageList::MSG_MAIL_LIST_CLOSE_MESSAGE_ARRAY();
			@call TheFolderList::MSG_FOLDER_LIST_CLEAN_FOLDERS();
			/*
			 * Initialize the mail folders.
			 */
			@call PfAccountList::MSG_ACCOUNT_LIST_REBUILD(-1);
			@call TheFolderList::MSG_FOLDER_LIST_INIT_MSGLIST();
			}
		else {
			@call PfAccountList::MSG_ACCOUNT_LIST_REBUILD(-1);
			}
		InitFileWriteBoolean(buf,crashKey,TRUE);
		InitFileCommit();
		}
	     
	@call MailSearchControl::MSG_GEN_CONTROL_NOTIFY_INTERACTABLE(GCIF_CONTROLLER|GCIF_NORMAL_UI);
	@call MailSearchControl::MSG_GEN_CONTROL_ENABLE_DISABLE(MSG_GEN_SET_ENABLED, VUM_DLYD);

	if (attachFlags & AAF_RESTORING_FROM_STATE)   {
		/* don't rebuild */
		}
	else {
		/* build the tabbed account UI */
		@call PfAccountList::MSG_ACCOUNT_LIST_UPDATE_TABS(UT_BUILD);
		}

	  /*
      * call our superclass to get the ball rolling
      */
     @callsuper();

	 /* check for parental control */
	 pcAccess = ParentalControlGetAccessInfo();
	 /* if no access, ask for password */
	 if (pcAccess & AF_EMAIL)  {
	  if (@call PCRoot::MSG_PC_CHECK_PASSWORD_DB(PC_EMAIL) == IC_OK) {
		/* allow access */
		}
	  else {
		@send, forceQueue MailAppObj::MSG_META_QUIT();
		}
	  }

	  /*
      * deal with any error creating the default account
      */
     if (err && err != MAE_ACCOUNT_EXISTS) {
	 @send, forceQueue MailAppObj::MSG_MAIL_APP_DEFAULT_ACCOUNT_ERROR();
	  }

	/* see if we are to do a log */
	initError = InitFileReadBoolean("bbxmail", "smtplog", &logging);
	if (initError) logging = FALSE;
	if (logging) {
		FilePushDir();
		FileSetStandardPath(SP_DOCUMENT);
		g_logHan = FileCreate("SMTP.LOG",
					 ((FILE_CREATE_TRUNCATE | FCF_NATIVE)
			       | (FILE_ACCESS_RW | FILE_DENY_RW)),
					 0);
		FilePopDir();
		}

}



/**************************************************************
*          
* FUNCTION:        MSG_GEN_PROCESS_TRANSITION_FROM_ENGINE_TO_APPLICATION_MODE
* PASS:            attachFlags - AppAttachFlags
*                  launchBlock - handle of AppLaunchBlock
* RETURN:          none
* DESCRIPTION:     Handle lazarus
*
***************************************************************/
@method MailProcessClass, MSG_GEN_PROCESS_TRANSITION_FROM_ENGINE_TO_APPLICATION_MODE
{
	/*
	 * initialize the large text objects
	 */
	@call PrintTextObject::MSG_MAIL_LARGE_TEXT_OPEN(NULL, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);
	@call ReadBodyText::MSG_MAIL_LARGE_TEXT_OPEN(@ReadBodyContent, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);
	@call ComposeBodyText::MSG_MAIL_LARGE_TEXT_OPEN(@ComposeBodyContent, VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);

	/*
	 * call our superclass to get the ball rolling
	 */
	@callsuper();
}


/***********************************************************************
 *		MSG_PROCESS_CREATE_UI_THREAD for MailProcessClass
 ***********************************************************************
 *
 * FUNCTION:   MSG_PROCESS_CREATE_UI_THREAD
 * PASS:       none
 * RETURN:     none
 * DESCRIPTION:  Increase the size of the ui thread stack
 *
 ***********************************************************************/
@method MailProcessClass, MSG_PROCESS_CREATE_UI_THREAD
{
  stackSize = 4048;     /* print controller need more stack size */
  return @callsuper();
}


/**************************************************************
*          
* FUNCTION:        MSG_GEN_PROCESS_CLOSE_APPLICATION
* PASS:            none
* RETURN:          none
* DESCRIPTION:     Handle closing the application
***************************************************************/
@method MailProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    TCHAR buf[MAIL_NAME_MAX];
    /*
     * if the option is selected, empty the trash
     */
    if (@call PfStartOptionList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() & MSEO_EMPTY_TRASH) {
        EmptyTrash();
    }

    /* not safe to delete the message list lock, until the trash has
     * been emptied
     */
    ThreadFreeThreadLock(TheMessageListLock);
    TheMessageListLock = NULL;

    /* If we crash after shutdown it does not matter, so turn the crashKey
     * off (tells us to ignore system crash flag on startup);
     */
    @call MailAppObj::MSG_META_GET_INI_CATEGORY(buf);
    InitFileWriteBoolean(buf,crashKey,FALSE);
    InitFileCommit();

    /*
     * clean up the text objects
     */
    @call PrintTextObject::MSG_MAIL_LARGE_TEXT_CLOSE(NULL);
    @call ReadBodyText::MSG_MAIL_LARGE_TEXT_CLOSE(@ReadBodyContent);
    @call ComposeBodyText::MSG_MAIL_LARGE_TEXT_CLOSE(@ComposeBodyContent);
    /*
     * tell various things to clean up
     */
    @call TheFolderList::MSG_FOLDER_LIST_FREE();
    @call PfAccountList::MSG_ACCOUNT_LIST_FREE();
    @call ReadAttachList::MSG_ATTACH_LIST_FREE();
    @call ComposeAttachList::MSG_ATTACH_LIST_FREE();
	 @call ComposeAddressDialog::MSG_ADDRESS_DIALOG_FREE();


	 if (g_logHan) FileClose(g_logHan, FALSE);

    /*
     * return no extra state
     */
    return(0);
}


/**************************************************************
*          
* FUNCTION:        MSG_MAIL_PROCESS_DO_MAIL
* PASS:            iabh - handle of InternetAppBlock (0 if none)
* RETURN:          none
* DESCRIPTION:     Do a mail operation during start up.
*                  Needs to be in the process thread to let stuff get
*                  set up -- forceQueue isn't sufficient
***************************************************************/

@method MailProcessClass, MSG_MAIL_PROCESS_DO_MAIL
{
    InternetAppBlock *iab;


    if (iabh) {
	iab = MemLock(iabh);
	switch (iab->IAB_type) {
	case IADT_MAIL_TO:
	    @send, forceQueue ComposeMailWin::MSG_MAIL_COMPOSER_MAIL_TO(iabh);
	    break;
        default:
	    MemFree(iabh);
	}
    }
}

/**************************************************************
Code to send and receive mail messages
**************************************************************/

#ifdef __BORLANDC__
#pragma codeseg SendCode
#endif

/***********************************************************************
 *		OpenSMTPConnection
 ***********************************************************************
 *
 * SYNOPSIS:	Call the mail library to open a smtp connection for 
 *              sending mail.
 * CALLED BY:	MSG_MSR_SEND_MESSAGES
 * PASS:        box - * OUTBOX
 * RETURN:	
 ***********************************************************************/
MailError
OpenSMTPConnection (OUTBOX *box)
{
	 MemHandle smtpHandle, bufHandle, passHandle;
    char *smtp, *user, *pass;
    OutboxStruct *oboxPtr;
    MailError ret;

    smtpHandle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_SMTP();
    smtp = MemLock(smtpHandle);
    bufHandle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_USER_ACCOUNT();
    user = MemLock(bufHandle);
	 passHandle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_USER_PASSWORD();
	 pass = MemLock(passHandle);
	 ret = MailoutOpen(smtp, OUTB_PROTOCOL_ESMTP, user, pass, box, 1);
    oboxPtr = MemLock(*box);
    oboxPtr->OB_wrapLength = WRAP_TEXT_LENGTH;
    MemUnlock(*box);
    MemFree(smtpHandle);
    MemFree(bufHandle);
    return ret;
}	/* End of OpenSMTPConnection.	*/


/***********************************************************************
 *		OpenPOP3Connection
 ***********************************************************************
 *
 * DESCRIPTION:
 * CALLED BY:	
 * PASS:        
 * RETURN:	
 ***********************************************************************/
TCHAR backSlashStr3[] = "\\";
MailError 
OpenPOP3Connection (INBOX *box)
{
	 MemHandle pop3Handle, userHandle, passHandle;
	 char *pop3,*user,*pass;
	 PathName path;
    MailError ret;
//	 word curAcct;
	 TCHAR buf[MAIL_NAME_MAX*2];
    TCHAR *mdName;
@ifdef MULTIPLE_ACCOUNT_SUPPORT
	 MemHandle acctHandle;
	 char *acct;
	 word curAcct;

    /* get relevant account info */
    pop3Handle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_POP3();
    pop3 = MemLock(pop3Handle);
    userHandle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_USER_ACCOUNT();
    user = MemLock(userHandle);
    passHandle = @call PfAccountList::MSG_ACCOUNT_LIST_GET_USER_PASSWORD();
	 pass = MemLock(passHandle);
@ifdef MULTIPLE_ACCOUNT_SUPPORT
	 curAcct = @call PfAccountList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    acctHandle=@call PfAccountList::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(curAcct);
	 acct = MemLock(acctHandle);
@endif
	 /*
     * if no password specified, prompt the user
     */
    if (!pass[0]) {
	MemFree(passHandle);
	LockStrings();
	sprintf(buf, LMemDeref(@enterPasswordStr), user);
	@call GPPrompt::MSG_VIS_TEXT_REPLACE_ALL_PTR(buf, 0);
	UnlockStrings();
	/*
	 * see if the user already entered a password last time
	 */
	passHandle = @call GPPassword::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
	pass = MemLock(passHandle);
	if (!pass[0]) {
	    /*
		  * prompt the user for a password
	     */
		 ret = UserDoDialog(@GetPasswordDB);
	    if (ret != IC_OK) {
		/*
		 * if cancel, clear the dialog for next time
		 */
		@call GPPassword::MSG_VIS_TEXT_DELETE_ALL();
		ret = ME_LOGIN_FAILED;
		goto exitCancel;
	    }
	    passHandle = @call GPPassword::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
	    pass = MemLock(passHandle);
	}
    }

    /* create the path for incoming files */
	 mdName = MailLockStdString(MSS_MAIL_DIR);
    strcpy(path, mdName);
    MailUnlockStdString(MSS_MAIL_DIR);
@ifdef MULTIPLE_ACCOUNT_SUPPORT
	 strcat(path, backSlashStr3);
    strcat(path, acct);
@endif

    ret = MailinOpen(pop3,IB_PROTOCOL_POP3,user,pass,path,box, 1);

exitCancel:
    MemFree(passHandle);
    MemFree(pop3Handle);
    MemFree(userHandle);
    return ret;

}	/* End of OpenPOP3Connection.	*/


/***********************************************************************
 *		CreateOutboxFilePath
 ***********************************************************************
 *
 * SYNOPSIS:	Pass a buffer with length PathName that contains the 
 *              filename you want to send.  The buffer will be converted
 *              to a path from PrivateData down to the filename.
 * CALLED BY:	MSG_MSR_SEND_MESSAGES
 * PASS:
 * RETURN:	
 ***********************************************************************/
void
CreateOutboxFilePath (char *fileName)
{
	 PathName tempFileName;
	 TCHAR backSlash[] = "\\";
    TCHAR *mdName;
@ifdef MULTIPLE_ACCOUNT_SUPPORT
	 MemHandle bufHandle;
	 char *data;
	 word curAcct;
@endif

    strcpy(tempFileName, fileName);

    /* create a path composed of
	  * [mailDirName]\[mail account name]\[outbox]\[filename]
     */

    mdName = MailLockStdString(MSS_MAIL_DIR);
	 strcpy(fileName,mdName);
    MailUnlockStdString(MSS_MAIL_DIR);

@ifdef MULTIPLE_ACCOUNT_SUPPORT
	 strcat(fileName,backSlash);
    curAcct = @call PfAccountList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    bufHandle=@call PfAccountList::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(curAcct);
    data = MemLock(bufHandle);
    strcat(fileName,data);
    MemFree(bufHandle);
@endif

	 strcat(fileName,backSlash);
    mdName = MailLockStdString(MSS_OUTBOX_FOLDER);
    strcat(fileName, mdName);
    MailUnlockStdString(MSS_OUTBOX_FOLDER);

    strcat(fileName,backSlash);
    strcat(fileName,tempFileName);
    
}	/* End of CreateOutboxFilePath.	*/


/***********************************************************************
 *
 * FUNCTION:	    SetNewStatus
 * PASS:            status - optr of status string
 * RETURN:	    none
 * DESCRIPTION:
 *        Set a new status in the dialog and the progress to zero
 ***********************************************************************/
void
SetNewStatus(optr status)
{
    LockStrings();
    @call SendReceiveDialog::MSG_MSR_UPDATE_STATUS(LMemDeref(status));
    UpdateProgress(MakeWWFixed(0), " ", NULL);
    UnlockStrings();
}


/***********************************************************************
 *
 * FUNCTION:	    CheckAttachmentsExist
 * PASS:            filename - ptr to filename (in Outbox)
 * RETURN:	    TRUE if all attachments exist
 * DESCRIPTION:
 *        make sure attachments for a message exist
 ***********************************************************************/

typedef struct {
    word CAE_err;
} CAEStruct;


Boolean
_pascal CheckAttachmentCB(void *el, void *retVal)
{
    AttachFilePath *p1 = el;
    CAEStruct *r1 = retVal;
    FileHandle fh;

    fh = FileOpen(p1->AFP_full, FILE_ACCESS_R|FILE_DENY_W);
    if (fh) {
	FileClose(fh, FALSE);
    } else {
	r1->CAE_err = ThreadGetError();
    }
    return(r1->CAE_err);
}

word
CheckAttachmentsExist(TCHAR *filename)
{
    MemHandle mh;
    FileHandle fileHan;
    word retVal = TRUE;
    CAEStruct caes;
    TCHAR *oboxName;

    FilePushDir();
    oboxName = MailLockStdString(MSS_OUTBOX_FOLDER);
    GotoMailDirectory(oboxName);
    MailUnlockStdString(MSS_OUTBOX_FOLDER);
    fileHan = FileOpen(filename, FILE_ACCESS_RW|FILE_DENY_W);
    if (fileHan) {
	mh = CreateChunkArrayBlock(sizeof(AttachFilePath));
	ReadAttachments(mh, fileHan);
	caes.CAE_err = 0;
	ChunkArrayEnum(ME_FIRST_CHUNK, &caes, CheckAttachmentCB);
	MemFree(mh);
	FileClose(fileHan, FALSE);
	retVal = !caes.CAE_err;
    } else {
	retVal = FALSE;
    }
    FilePopDir();
    return(retVal);
}



/***********************************************************************
 *		MSG_MAIL_PROCESS_SEND_MESSAGES for MailProcessClass
 ***********************************************************************
 *
 * DESCRIPTION:	    Call mail library to send the message, then make the 
 *                  appropriate changes to the message lists.
 * PASS:
 * RETURN:
 ***********************************************************************/
typedef struct {
    word SMCB_numMsgs;
    word SMCB_curMsg;
    word SMCB_vmf;
    word SMCB_vmbh;
    optr SMCB_chunkArray;
    MailError SMCB_retVal;
} SMCBStruct;
#define MAX_STATUS_LENGTH 50
Boolean _pascal SendMailCB(void *el, void*retVal)
{
    OUTBOX obox;
    OutboxStruct *oboxPtr;
    word i, numMsgs;
    TCHAR *fn, *dPtr;
    MessageListStruct *mls;
    MessageIndexStruct *mis=(MessageIndexStruct *)el;
    char statusMsg[MAX_STATUS_LENGTH]; 
    SMCBStruct *data = retVal;
    MailError ret = ME_NONE;
    MailMessage msg;
    PathName path;
    MemHandle mh;
    FileLongName fns;
	 TCHAR *oboxName, *draftsName, *sentName;
	 char logString[50];
	 Boolean auth;

    HugeArrayLock(data->SMCB_vmf, data->SMCB_vmbh, mis->MIS_index,&mls,&i);

    data->SMCB_curMsg += 1;
    i = data->SMCB_curMsg;
    numMsgs = data->SMCB_numMsgs;


    fn = mls->MLS_filename;

    if (!(@call SendReceiveDialog::MSG_MSR_SHOULD_STOP())) {
	if (!CheckAttachmentsExist(fn)) {
	    /*
	     * one or more of the attachments does not exist.
	     * see if the user wants to send it anyway
	     */
	    if (DoYesNo(@attachNoExistStr, NULL) == IC_NO) {
		/*
		 * don't send it; move it to Drafts instead
		 */
		oboxName = MailLockStdString(MSS_OUTBOX_FOLDER);
		draftsName = MailLockStdString(MSS_DRAFTS_FOLDER);
		MoveMessageFile(fn, oboxName, draftsName, &mh);
		MailUnlockStdString(MSS_OUTBOX_FOLDER);
		MailUnlockStdString(MSS_DRAFTS_FOLDER);
		DeleteMessageListArrayName(MFID_OUTBOX, fn);
		fn = MemLock(mh);
		InsertMessageListArray(MFID_DRAFTS, fn);
		strcpy(fns, fn);
		fn = fns;
		MemFree(mh);
		HugeArrayUnlock(mls);
		return FALSE;
	    }
	}
	/*
	 * tell the user we're connecting, then open a connection,
	 * then tell them which message we're downloading
	 */
	LockStrings();
	sprintf(statusMsg, LMemDeref(@sendProgress), i, numMsgs);
	@call SendReceiveDialog::MSG_MSR_UPDATE_STATUS(statusMsg);
	UnlockStrings();
	if (g_logHan) {
		strcpy(logString, "Opening SMTP connection\r\n");
		FileWrite(g_logHan, logString, strlen(logString), FALSE);
		}
	ret = OpenSMTPConnection(&obox);

	if (!ret) {
		if (g_logHan) {
			strcpy(logString, "SMTP connected\r\n");
			FileWrite(g_logHan, logString, strlen(logString), FALSE);
			}
		 MailMessageInit(&msg);
	    msg.MM_progressRoutine = (UpdateProgress);
	    strcpy(path,fn);
	    CreateOutboxFilePath(path);
	    ret = MailoutLoadHeader(&msg,path);
	    if (!ret) {
		if (g_logHan) {
			strcpy(logString, "Sending email message\r\n");
			FileWrite(g_logHan, logString, strlen(logString), FALSE);
			}
		auth = @call PfSMTPAuthGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(SMTP_AUTH);
		ret = MailoutSendMail(obox, &msg, g_logHan, auth);
		if (!ret) {
		    oboxName = MailLockStdString(MSS_OUTBOX_FOLDER);
		    sentName = MailLockStdString(MSS_SENT_FOLDER);
		    /*
		     * move the message to the "Sent" folder if:
		     */
		    if (@call PfMessageOptionList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() & MMO_LOG_OUTGOING) {
			/*
			 * if logging outgoing messages,
			 * move it to the Sent directory
			 */
			MoveMessageFile(fn, oboxName, sentName,	&mh);
			HugeArrayUnlock(mls);
			mls = NULL;
			DeleteMessageListArrayNL(data->SMCB_vmf, 
						 data->SMCB_vmbh,
						 data->SMCB_chunkArray,
						 mis->MIS_index);
			fn = MemLock(mh);
			InsertMessageListArray(MFID_SENT,fn);
			MemFree(mh);
		    } else {
			/*
			 * else delete the message file
			 */
			FilePushDir();
			GotoMailDirectory(oboxName);
			DeleteMessageFile(fn);
			HugeArrayUnlock(mls);
			mls = NULL;
			DeleteMessageListArrayNL(data->SMCB_vmf, 
						 data->SMCB_vmbh,
						 data->SMCB_chunkArray,
						 mis->MIS_index);
			FilePopDir();
		    }
		    MailUnlockStdString(MSS_OUTBOX_FOLDER);
		    MailUnlockStdString(MSS_SENT_FOLDER);
		} else {
		    /* for some reason we failed to send the message
		     * let the user know what happenned.
		     */
		    switch(ret) {
		    case ME_SOME_BAD_RECIPIENTS:
			oboxPtr = MemLock(obox);
			dPtr = MemLock(oboxPtr->OB_errorData);
			ReportWarning(@warnBadAddress, mls->MLS_subject, dPtr);
			break;
		    case ME_NO_RECIPIENTS:
			ReportWarning(@warnBadAddress2, mls->MLS_subject, NULL);
			break;
		    default:
			goto exitError;
		    }
		}
	    }
	    if (ret != ME_USER_INTERRUPTED) {
		MailoutClose(obox);
	    } else {
		MailoutClose(obox);
		data->SMCB_retVal = ret;
		HugeArrayUnlock(mls);
		return TRUE;
	    }
	} else {
	    /* we could not open a connection to the smtp server
	     * so we want to stop now
	     */
	exitError:
	    data->SMCB_retVal = ret;
	    HugeArrayUnlock(mls);
	    return TRUE;
	}
    } 

    if (mls) {
	HugeArrayUnlock(mls);
    }
    return FALSE;
}

@method MailProcessClass, MSG_MAIL_PROCESS_SEND_MESSAGES
{
    return(@call oself::MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE(0, 0xffff));
}


/***********************************************************************
 *		MSG_MAIL_PROCESS_SEND_MESSAGE_NOW
 ***********************************************************************
 *
 * DESCRIPTION:	    Send passed message, or if multiple messages in
 *                  outbox, ask user if passed or all should be sent.
 * PASS:            
 * RETURN:            
 *
 ***********************************************************************/

@ifdef COMPOSE_SEND_NOW
@method MailProcessClass, MSG_MAIL_PROCESS_SEND_MESSAGE_NOW
{
    word numMsgs;
    MailError ret;

    /* check if multiple messages in Outbox */
    numMsgs = @call TheFolderList::MSG_FOLDER_LIST_GET_NUM_MESSAGES(MFID_OUTBOX);
    if (numMsgs > 1) {
	if (DoYesNo(@composeSendNowMultipleStr, NULL) == IC_YES) {
	    /* send all in Outbox */
	    ret = @call oself::MSG_MAIL_PROCESS_SEND_MESSAGES();
	} else {
	    /* send only this one */
	    ret = @call oself::MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE(messageNum, 1);
	}
    } else {
	/* only our new email in Outbox, send it */
	ret = @call oself::MSG_MAIL_PROCESS_SEND_MESSAGES();
    }
}
@endif


/***********************************************************************
 *		MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE
 ***********************************************************************
 *
 * DESCRIPTION:	    Call mail library to send the message, then make the 
 *                  appropriate changes to the message lists.
 * PASS:
 * RETURN:
 ***********************************************************************/

@method MailProcessClass, MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE
{
    VMFileHandle vmf;
    VMBlockHandle vmbh;
    optr indexArray;
    MailError ret = ME_NONE;
    word numMsgs;
	 Boolean inuse = FALSE;
	 char logString[50];

    SMCBStruct data;
    
    if (@call SendReceiveDialog::MSG_MSR_SHOULD_STOP()) {
	return ret;
    }

    LockStrings();
    inuse = GetMessageArrays(MFID_OUTBOX, &vmf, &vmbh, &indexArray);
    numMsgs = ChunkArrayGetCount(indexArray);
    if (numMsgs) {
	SetNewStatus(@sendingStatus);
    }

    if (count < numMsgs) {
	numMsgs = count;
    }
    data.SMCB_numMsgs = numMsgs;
    data.SMCB_curMsg = 0;
    data.SMCB_vmf = vmf;
    data.SMCB_vmbh = vmbh;
    data.SMCB_chunkArray = indexArray;
	 data.SMCB_retVal = 0;
	 if (g_logHan) {
		strcpy(logString, "User clicked send\r\n");
		FileWrite(g_logHan, logString, strlen(logString), FALSE);
		}
	 ChunkArrayEnumRange(indexArray, start, count, &data, SendMailCB);

    UnlockStrings();

    VMUnlock(OptrToHandle(indexArray));
    if (!inuse) {
	VMClose(vmf,FALSE);
    }
    ThreadReleaseThreadLock(TheMessageListLock);
    if (numMsgs) {
	RebuildFolderList(MFID_LEAVE_SELECTION, TRUE);
    }

    @call SendReceiveDialog::MSG_MSR_DEC_REF_COUNT();
    /*
     * if any error, report it
     */
    ret = data.SMCB_retVal;
    if (ret != ME_NONE) {
	@call SendReceiveDialog::MSG_MSR_REPORT_ERROR(ret);
    }

    return(data.SMCB_retVal);
}


/***********************************************************************
 *
 * FUNCTION:	    ReceiveOneMessage
 * PASS:            ibox - INBOX
 *                  i - zero-based message number
 * RETURN:	    MailError - ME_NONE if none
 *                  *warnLevel - 
 * DESCRIPTION:
 *        Download one message
 ***********************************************************************/

MailError
ReceiveOneMessage(INBOX ibox, word i, word count, word *downCount, word *warnLevel)
{
    MailMessage msg;
    TCHAR statusMsg[MAX_STATUS_LENGTH]; 
    TCHAR *fileName;
    MailError ret;
    dword msize;
    MailUIDL uidl;

    /*
     * init and get the size and UIDL
     */
    *warnLevel = 0;

    MailMessageInit(&msg);
    msg.MM_progressRoutine = (UpdateProgress);
    MailinGetMessageSize(ibox, i, &msize);
    if (msize == 0) {
	return(ME_NONE);
    }
    msg.MM_size = msize;

@ifdef LEAVE_MAIL_ON_SERVER
	 ret = MailinGetUIDL(ibox, i, uidl);
    if (ret == ME_UIDL_NOT_SUPPORTED) {
        EC_WARNING(MAIL_UIDL_NOT_SUPPORTED);
	goto getMessage;
    }

	 /*
     * if the message has already been downloaded, don't do it again
     */
    if (UIDLCheckFlag(MOSS_ON_SERVER, uidl)) {
	return(ME_NONE);
    }
@endif

	 /*
     * get the message
     */
getMessage:
    UpdateProgress(MakeWWFixed(0), NULL, NULL);
    LockStrings();
    sprintf(statusMsg, LMemDeref(@receiveProgress), i+1, count);
    @call SendReceiveDialog::MSG_MSR_UPDATE_STATUS(statusMsg);
    UnlockStrings();

    ret = MailinGetMessage(ibox,i,&msg);
	 if (ret) {
	return(ret);
    }

	 /*
     * one more message actually downloaded
     */
    (*downCount)++;

    /*
     * record the message in our cache
     */
    MemLock(msg.MM_storageBlock);
    fileName = LMemDeref(ConstructOptr(msg.MM_storageBlock, msg.MM_fileName));
    *warnLevel = InsertMessageListArray(MFID_INBOX,fileName);
    MemUnlock(msg.MM_storageBlock);

@ifdef LEAVE_MAIL_ON_SERVER
    /*
     * delete the message from the server if appropriate
     */
	 if (@call PfMessageOptionList::
	       MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() & MMO_LEAVE_ON_SERVER) {
	/*
	 * add the message to the "left on server" list
	 */
	UIDLSetFlag(MOSS_ON_SERVER, uidl, TRUE);
    } else {
	MailinMessageDelete(ibox, i);
	MailMessageClose(&msg);
	 }
@else

	 /*
     * delete the message from the server
     */
    MailinMessageDelete(ibox, i);
	 MailMessageClose(&msg);

@endif // LEAVE_MAIL_ON_SERVER

	 return(ME_NONE);
}


@ifdef LEAVE_MAIL_ON_SERVER


/***********************************************************************
 *
 * FUNCTION:	    DeleteOneMessage
 * PASS:            ibox - INBOX
 *                  i - zero-based message number
 * RETURN:	    MailError - ME_NONE if none
 *                  *warnLevel - 
 * DESCRIPTION:
 *        Download one message
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *      gene            2/25/00         Initial Revision
 *
 ***********************************************************************/

MailError
DeleteOneMessage(INBOX ibox, word i)
{
    TCHAR statusMsg[MAX_STATUS_LENGTH]; 
    MailError ret = ME_NONE;
    MailUIDL uidl;

    ret = MailinGetUIDL(ibox, i, &uidl);
    if (ret == ME_UIDL_NOT_SUPPORTED) {
	goto exitError;
    }

    if (UIDLCheckFlag(MOSS_DELETE_FROM_SERVER, uidl)) {
	/*
	 * update the progress
	 */
	LockStrings();
	sprintf(statusMsg, LMemDeref(@deleteProgress), i+1);
	UpdateProgress(MakeWWFixed(0), statusMsg, NULL);
	UnlockStrings();
	/*
	 * delete the message and the entry
	 */
	MailinMessageDelete(ibox, i);
	UIDLDeleteEntry(uidl);
    }

exitError:
    return(ret);
}

@endif

/***********************************************************************
 *
 * FUNCTION:	    MSG_MAIL_PROCESS_RECEIVE_MESSAGES
 * PASS:            
 * RETURN:	    
 * DESCRIPTION:
 *        Receive one message
 ***********************************************************************/

@method MailProcessClass, MSG_MAIL_PROCESS_RECEIVE_MESSAGES
{
    INBOX ibox;
    MailError ret = ME_NONE;
    word count, downCount, i, opts;
    Boolean warnLevel;

    if (@call SendReceiveDialog::MSG_MSR_SHOULD_STOP()) {
	return ret;
    }

    /* update the status dialog to let the user know we are now receiving
     * mail
     */
    SetNewStatus(@connectingStatus);
    ret = OpenPOP3Connection(&ibox);
    SetNewStatus(@checkMailStatus);


    if (ret == ME_NONE) {
	ret = MailinGetMessageCount(ibox, &count);
	for (i = 0, downCount = 0; i < count; ++i) {
	    if (!(@call SendReceiveDialog::MSG_MSR_SHOULD_STOP())) {
		ret = ReceiveOneMessage(ibox, i, count, &downCount,
					&warnLevel);
		if (ret != ME_NONE || warnLevel) {
			 break;
		} else {
		    downCount++;
		}
	    }
	}

	if (ret == ME_NONE) {
@ifdef LEAVE_MAIL_ON_SERVER
            /*
	     * check for messages on the server we can delete
	     * we do this in a separate pass so that we if any messages
	     * are still in our list afterwards, we can clean up the
	     * list
	     */
            if (UIDLHasEntries() && count) {
		LockStrings();
		@call SendReceiveDialog::MSG_MSR_UPDATE_STATUS(LMemDeref(@deleteStatus));
		UnlockStrings();
		for (i = 0; i < count; i++) {
		    if (!(@call SendReceiveDialog::MSG_MSR_SHOULD_STOP())) {
			ret = DeleteOneMessage(ibox, i);
			if (ret != ME_NONE) {
			    break;
			}
		    }
		}
		/*
		 * remove any entries that are still marked as on the server
		 */
		UIDLClean();
	    }
@endif
		 MailinClose(ibox);
	} else {
	    /* we don't want to wait around for the 
	     * other side to finish sending the mail 
	     * before we close the connection
	     */
	    MailinCloseFast(ibox);
	}
    }

    @call SendReceiveDialog::MSG_MSR_DEC_REF_COUNT();
    /*
     * if any error, report it
     */
    if (ret != ME_NONE) {
	@call SendReceiveDialog::MSG_MSR_REPORT_ERROR(ret);
	/*
	 * rescan if we've download any messages
	 */
	if (downCount) {
	    RebuildFolderList(MFID_LEAVE_SELECTION, TRUE);
	}
    } else {
        opts = MAO_NOTIFY_SELECT_INBOX;
	/*
	 * rebuild the folder list, and set the selection
	 * to the Inbox so the user can see messages that arrived
	 */
	if (downCount) {
	    if (opts & MAO_NOTIFY_SELECT_INBOX) {
		RebuildFolderList(MFID_INBOX, TRUE);
		@call TheMessageList::MSG_MAIL_LIST_RESET_SELECTION(-2);
	    } else {
		RebuildFolderList(MFID_LEAVE_SELECTION, TRUE);
	    }
	}
    }
    return ret;
}

/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG)
 *			MSG_EMAIL_PROC_ADDR_BOOK_SEL_NOTIFICATION for MailProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:
 *
 *              checks for dbl click and en/disables trigger
 *
 *
 ***********************************************************************/
@method MailProcessClass, MSG_EMAIL_PROC_ADDR_BOOK_SEL_NOTIFICATION
{

	/* was it a double click? */
	if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {
		if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  {
			@send, forceQueue process::MSG_EMAIL_PROC_SAVE_SELECTED_ADDR_BOOK();
			}
		}
	else  {  /* if not dbl click see if we're on a file */
		if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
			@send SABOKTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		else
			@send SABOKTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_EMAIL_PROC_SAVE_SELECTED_ADDR_BOOK for MailProcessClass
 *
 * DESCRIPTION:
 *					Saves the name & path of the addr book file to .ini
 *
 *
 ***********************************************************************/
@method MailProcessClass, MSG_EMAIL_PROC_SAVE_SELECTED_ADDR_BOOK
{
 char		name[FILE_LONGNAME_BUFFER_SIZE];
 char		path[PATH_BUFFER_SIZE];
 DiskHandle		dh;
 word		drive;


	/* get the file name of the selection */
	@call SABFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(name);
	/* get the file's path, disk handle & drive num */
	@call SABFileSel::MSG_GEN_PATH_GET(path, sizeof(path));
	dh = @call SABFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	drive = DiskGetDrive(dh);

	/* and save it all to the .ini */
	InitFileWriteString("bbxmail", "addrName", name);
	InitFileWriteString("bbxmail", "addrPath", path);
	InitFileWriteInteger("bbxmail", "addrDh", dh);
	InitFileWriteInteger("bbxmail", "addrDr", drive);
	InitFileCommit();

	/* dismiss the file selector box now */
	@send SelAddrBookDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_MAIL_PROCESS_DEFAULT_ACCT_BOOLEAN_STATUS for MailProcessClass
 *
 * DESCRIPTION:
 *					void	GEN_BOOLEAN_GROUP_STATUS_MSG(
 *							  word	selectedBooleans,
 *							  word	indeterminateBooleans,
 *							  word	changedBooleans);
 *
 *			Don't let the user de-select a default acct setting.  The user
 *			needs to select a different account which will, in turn, de-select
 *			the currently selected account
 *
 ***********************************************************************/
@method MailProcessClass, MSG_MAIL_PROCESS_DEFAULT_ACCT_BOOLEAN_STATUS
{

	if (!(selectedBooleans & MDO_IS_DEFAULT)) {
		/* the user tried to de-select it - notify... */
		UserStandardDialogOptr(0, 0, 0, 0,
			  @CantDeselectDefaultMsg,
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
      /* and get it selected again */
      @send PfDefaultAcctList::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
		  								           MDO_IS_DEFAULT, TRUE);
		}

}




