/***********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailFile.goc
 *
 * DESCRIPTION:
 *	code for reading a mail message file
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"

#ifdef __BORLANDC__
#pragma codeseg ReadCode
#endif


/**************************************************************
 *      
 * FUNCTION:        OpenMessageFile
 * PASS:            fileName - handle of block w/ file name
 * RETURN:          file handle (NULL if error)
 * DESCRIPTION:
 *         Open the file name and free the block
 ***************************************************************/
FileHandle
OpenMessageFile(MemHandle fileName)
{
    TCHAR *fp;
    FileHandle fileHan;

    EC ( ECCheckMemHandle(fileName) );

    fp = MemLock(fileName);
    fileHan = FileOpen(fp, FILE_DENY_W | FILE_ACCESS_RW);
    MemFree(fileName);
    return(fileHan);
}


/**************************************************************
 * FUNCTION:        MailReadHeaders
 * PASS:            fh - FileHandle of file
 * RETURN:          handle of buffer (0 - error)
 * DESCRIPTION:
 *         Read the headers in preparation for calling MailGetHeader()
 ***************************************************************/
MemHandle
MailReadHeaders(FileHandle fh)
{
    MemHandle rbh = MemAlloc(MAX_HEADER_SIZE,
			     HF_DYNAMIC,
			     HAF_STANDARD);
    TCHAR *rb;
    dword bytesRead;

    if (!rbh) {
        return(0);
    }
    rb = MemLock(rbh);
    FilePos(fh, 0, FILE_POS_START);
    bytesRead = FileRead(fh, rb, MAX_HEADER_SIZE-1, FALSE);
    rb[bytesRead] = C_NULL;
    MemUnlock(rbh);
    /*
     * resize (always smaller or to same size)
     */
    MemReAlloc(rbh, bytesRead+1, HAF_STANDARD);
    return(rbh);
}


/**************************************************************
 * FUNCTION:        MailGetHeader
 * PASS:            dataHan - handle of header data
 *                  header - ptr to header to find
 * RETURN:          handle of buffer (0 - not found)
 * DESCRIPTION:
 *         Find the specified header in a message file
 ***************************************************************/

MemHandle
MailGetHeader(MemHandle dataHan, TCHAR *header)
{
        MemHandle rbh;
	TCHAR *rb, *data;

	/*
	 * allocate a buffer to work with
	 */
	rbh = MemAlloc((FIELD_BUFFER_BLOCK_SIZE+1)*sizeof(TCHAR),
		       HF_DYNAMIC,
		       HAF_STANDARD);
	if (!rbh) {
	    return(0);
	}
	rb = MemLock(rbh);
	data = MemLock(dataHan);
	MailGetHdrValue(header, rb, FIELD_BUFFER_BLOCK_SIZE, data);
	MemUnlock(dataHan);
	/*
	 * make sure there is some data in it
	 */
	if (!rb[0]) {
	    MemFree(rbh);
	    return(0);
	}
	MemUnlock(rbh);
	return(rbh);
}



/**************************************************************
 * FUNCTION:        MailFindBody
 * DESCRIPTION:     find the body on the message
 *
 * PASS:            fileHan - handle of message file
 *                  buf - ptr to buffer
 *                  off - offset (return)
 * RETURN:          # of bytes read (0 if not found)
 *                  off - offset into buffer of body start
 ***************************************************************/

word
MailFindBody(FileHandle fileHan, TCHAR *buf, word *off)
{
    word i = 0, bytesRead;
    Boolean found = FALSE;

    FilePos(fileHan, 0, FILE_POS_START);
    /*
     * read the first part of the file and NULL-terminate it
     */
    bytesRead = FileRead(fileHan, buf, MESSAGE_BUF_LEN, FALSE);
    buf[bytesRead] = 0;
    /*
     * the body starts after a blank line after the headers
     * i.e., after two consecutive CRs
     */
    i = 1;
    while (!found) {
	found = (buf[i-1] == '\r' && buf[i] == '\r');
	i++;
	/*
	 * if we haven't found the body, keep reading
	 */
	if (i >= bytesRead*sizeof(TCHAR)) {
	    if (buf[i-1] == '\r') {
		/*
		 * if we ended on a CR, keep it in case the next
		 * character is a CR, too
		 */
		bytesRead = FileRead(fileHan, buf+1, MESSAGE_BUF_LEN-1,
				     FALSE);
		buf[0] = '\r';
		bytesRead += 1;
	    } else {
		bytesRead = FileRead(fileHan, buf, MESSAGE_BUF_LEN, FALSE);
	    }
	    buf[bytesRead] = 0;
	    if (!bytesRead) {
		return(0);
	    }
	    i = 1;
	}
    }
    *off = i;
    return(bytesRead);
}


/**************************************************************
 *          
 * FUNCTION:        MailGetStyleType
 * DESCRIPTION:     Get the style type (plain, HTML, rich text)
 *
 * PASS:            buf - ptr to buffer
 *                  bufHan - handle of buffer
 * RETURN:          MailStyleType
 ***************************************************************/

static const TCHAR contentType[] = "CONTENT-TYPE";
static const TCHAR textHTML[] = "text/html";
static const TCHAR textEnriched[] = "text/enriched";
static const TCHAR tagHTML[] = "<x-html>";
static const TCHAR tagEnriched[] = "<x-rich>";
static const TCHAR tag2HTML[] = "<html>";
static const TCHAR tag3HTML[] = "<HTML>";

MailStyleType
MailGetStyleType(TCHAR *buf, MemHandle bufHan)
{
    MailStyleType mailStyles = MST_NONE;
    MemHandle shh;
    TCHAR *shp;

    shh = MailGetHeader(bufHan, &contentType);
    if (shh) {
	shp = MemLock(shh);
	if (!strncmp(shp, textHTML, strlen(textHTML))) {
	    mailStyles = MST_HTML;
	} else if (!strncmp(shp, textEnriched, strlen(textEnriched))) {
	    mailStyles = MST_RICH;
	}
	MemFree(shh);
    }
    /*
     * check a little closer for styles...allow <x-html> or <x-rich>
     * in the body, without the content-type header
     */
    if (mailStyles == MST_NONE) {
	if (strstr(buf, tagHTML)) {
	    mailStyles = MST_HTML;
	} else if (strstr(buf, tag2HTML)) {
            mailStyles = MST_HTML;
	} else if (strstr(buf, tag3HTML)) {
	    mailStyles = MST_HTML;
        } else if (strstr(buf, tagEnriched)) {
	    mailStyles = MST_RICH;
	}
    }
    return(mailStyles);
}

@ifdef SHOW_RAW_MESSAGE


/**************************************************************
 * FUNCTION:        MailReadRawMessage
 * DESCRIPTION:     read the raw message data
 *
 * PASS:            fileHan - handle of message file
 *                  textObj - optr of text object to append to
 * RETURN:          non-zero for error/not found
 ***************************************************************/

word
MailReadRawMessage(FileHandle fileHan, optr textObj)
{
    word bytesRead;
    MemHandle rbh;
    TCHAR *rbuf;
    word ret = 0xffff;

    /*
     * create a buffer for reading the file
     * including extra for a NULL terminator
     */
    rbh = MemAlloc(MESSAGE_BUF_LEN+sizeof(TCHAR),
		   HF_DYNAMIC,
		   HAF_STANDARD);
    if (!rbh) {
	return(ret);
    }
    rbuf = MemLock(rbh);
    /*
     * suspend the text object and mark ourselves busy
     */
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_BUSY();
    @call textObj::MSG_META_SUSPEND();
    /*
     * read the data til EOF
     */
    ret = 0;
    FilePos(fileHan, 0, FILE_POS_START);
    do {
	bytesRead = FileRead(fileHan, rbuf, MESSAGE_BUF_LEN, FALSE);
	if (bytesRead) {
	    @call textObj::MSG_VIS_TEXT_APPEND_PTR(rbuf, bytesRead);
	}
    } while (bytesRead != 0);
    MemFree(rbh);
    /*
     * unsuspend the text object and mark ourselves not busy
     */
    @call textObj::MSG_META_UNSUSPEND();
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
    return(ret);
}

@endif


/**************************************************************
 * FUNCTION:        MailReadBody
 * DESCRIPTION:     read the body from the file and append it to the text
 *
 * PASS:            fileHan - handle of message file
 *                  textObj - optr of text object to append to
 * RETURN:          non-zero for error/not found
 ***************************************************************/

word
MailReadBody(FileHandle fileHan, optr textObj)
{
    MailStyleType mailStyles;
    word bytesRead, so, eo;
    MemHandle rbh;
    TCHAR *rbuf;
    FilterState state;
    FilterMode mode;

    /*
     * create a buffer for reading the file
     * including extra for a NULL terminator
     */
    rbh = MemAlloc(MESSAGE_BUF_LEN+sizeof(TCHAR),
		   HF_DYNAMIC,
		   HAF_STANDARD);
    if (!rbh) {
	return(-1);
    }
    rbuf = MemLock(rbh);
    /*
     * find the body
     */
    bytesRead = MailFindBody(fileHan, rbuf, &so);
    if (!bytesRead) {
	MemFree(rbh);
	return(-1);
    }
    /*
     * mark ourselves busy
     */
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_BUSY();
    /*
     * suspend the text object so the text loads faster
     */
    @call textObj::MSG_META_SUSPEND();
    /*
     * check for styles
     */
    mailStyles = MailGetStyleType(rbuf+so, rbh);
    /*
     * found the start of the body -- read until EOF
     */
@ifdef MAIL_STYLES_SUPPORT
    StyleStackInit();
@endif
    state = FS_IN_BODY;
    mode = 0;
    eo = bytesRead;
    while (bytesRead) {
	if (mailStyles == MST_NONE) {
	    FilterURLs(textObj, rbuf, &so, &eo, &state);
	} else {
	    FilterMailStyles(textObj, rbuf, &so, &eo, &state, mailStyles, &mode);
	}
	bytesRead = ReloadBuffer(fileHan, textObj, rbuf, &so, &eo, state, mode);
    }
@ifdef MAIL_STYLES_SUPPORT
    StyleStackFree();
@endif
    MemFree(rbh);
    /*
     * unsuspend the text object
     */
    @call textObj::MSG_META_UNSUSPEND();
    /*
     * mark ourselves not busy
     */
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
    return(0);
}



/**************************************************************
 * FUNCTION:        MailFileInsertSpace
 * PASS:            fileHan - handle of message file
 *                  numBytes - # of bytes to insert
 * RETURN:          non-zero for error
 * DESCRIPTION:
 *         Insert the specified # of bytes at the start of the file
 ***************************************************************/

word
MailFileInsertSpace(FileHandle fileHan, word numBytes)
{
    sdword curOff, fSize, bufSize;
    byte *buf;
    MemHandle mh = MemAlloc(MESSAGE_BUF_LEN, HF_DYNAMIC, HAF_STANDARD);
    if (!mh) {
        return(-1);
    }
    buf = MemLock(mh);

    /*
     * extend the file the specified number of bytes
     */
    fSize = FileSize(fileHan);
    FilePos(fileHan, numBytes, FILE_POS_END);

    curOff = fSize - MESSAGE_BUF_LEN;
    bufSize = MESSAGE_BUF_LEN;
    if (curOff < 0) {
        curOff = 0;
	bufSize = fSize;
    }

    /*
     * work from the end backwards, copying the data up the specified amount
     */
    while (curOff >= 0) {
        FilePos(fileHan, curOff, FILE_POS_START);
	if (!FileRead(fileHan, buf, bufSize, FALSE)) {
	    MemFree(mh);
	    return(-1);
	}
	FilePos(fileHan, curOff+numBytes, FILE_POS_START);
	FileWrite(fileHan, buf, bufSize, FALSE);
	if (curOff > 0 && curOff < bufSize ) {
	   bufSize = curOff;
	   curOff = 0;
	} else {
	   curOff -= bufSize;
	}
    }
    MemFree(mh);
    return(0);
}
