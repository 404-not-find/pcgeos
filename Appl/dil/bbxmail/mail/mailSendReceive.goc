/***********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailSendReceive.goc
 *
 * DESCRIPTION:
 *	MailSendReceiveClass 
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"
#include <Internal/ppp.h>

@classdecl MailWarningClass;
@classdecl MailSendReceiveClass;

#ifdef __BORLANDC__
#pragma codeseg SendCode
#endif


/***********************************************************************
 *		MSG_GEN_GUP_INTERACTION_COMMAND for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailWarningClass, MSG_GEN_GUP_INTERACTION_COMMAND
{
    @send oself::MSG_GEN_DESTROY(VUM_DELAYED_VIA_UI_QUEUE, NULL);
    return @callsuper();
}	/* End of MSG_GEN_GUP_INTERACTION_COMMAND.	*/



/***********************************************************************
 *		MSG_MSR_SEND_AND_RECEIVE_MESSAGES for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    Send messages from Outbox and Get all messages from 
 *                  The server.
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 ***********************************************************************/

Boolean
FieldIsOK(optr textObj, Boolean reportError)
{
    dword tSize;

    tSize = @call textObj::MSG_VIS_TEXT_GET_TEXT_SIZE();
    if (!tSize) {
	if (reportError) {
	    ReportError(@noServerErr, NULL);
	    @call PfAccountsDialog::MSG_GEN_INTERACTION_INITIATE();
	}
	return(FALSE);
    }
    return(TRUE);
	
}

@method MailSendReceiveClass, MSG_MSR_SEND_MESSAGES
{
    if (!@call oself::MSG_MSR_CHECK_SERVER_SETUP(TRUE)) {
	return;
    }
    @call oself::MSG_MSR_INIT(1);
    @send process::MSG_MAIL_PROCESS_SEND_MESSAGES();
}

@method MailSendReceiveClass, MSG_MSR_RECEIVE_MESSAGES
{
    if (!@call oself::MSG_MSR_CHECK_SERVER_SETUP(TRUE)) {
	return;
    }
    if (FieldIsOK(@PfPOP3Server, TRUE)) {
	@call oself::MSG_MSR_INIT(1);
	@send process::MSG_MAIL_PROCESS_RECEIVE_MESSAGES();
    }
}

@method MailSendReceiveClass, MSG_MSR_SEND_MESSAGE_RANGE
{
    if (!@call oself::MSG_MSR_CHECK_SERVER_SETUP(TRUE)) {
	return;
    }
    @call oself::MSG_MSR_INIT(1);
    @send process::MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE(start, count);
}

@method MailSendReceiveClass, MSG_MSR_SEND_MESSAGE_NOW
{
    if (!@call oself::MSG_MSR_CHECK_SERVER_SETUP(TRUE)) {
	return;
    }
    @call oself::MSG_MSR_INIT(1);
    @send process::MSG_MAIL_PROCESS_SEND_MESSAGE_NOW(messageNum);
}


/***********************************************************************
 *		MSG_MSR_SHOULD_STOP for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	Check to see if the user has requested to stop the 
 *              email exchange.
 * PARAMETERS:	    
 * Return:      Boolean indicating if mail exchange should be cancelled.
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailSendReceiveClass, MSG_MSR_SHOULD_STOP
{
    if (pself->MSR_stop) {
	@call oself::MSG_MSR_SET_REF_COUNT(0);
    }
    return pself->MSR_stop;
}


/***********************************************************************
 *		MSG_GEN_SET_USABLE for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailSendReceiveClass, MSG_GEN_SET_USABLE
{
    pself->MSR_stop = FALSE;
    @callsuper();
}


/***********************************************************************
 *		MSG_GEN_SET_NOT_USABLE for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailSendReceiveClass, MSG_GEN_SET_NOT_USABLE
{
    pself->MSR_stop = TRUE;
    @callsuper();
}


/***********************************************************************
 *		MSG_GEN_GUP_INTERACTION_COMMAND for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailSendReceiveClass, MSG_GEN_GUP_INTERACTION_COMMAND
{
    if (command == IC_STOP) {
	pself->MSR_stop = TRUE;
    }
    if (pself->MSR_okToDismiss) {
	command = IC_DISMISS;
    }
    @call srSendReceiveStatusText::MSG_VIS_TEXT_REPLACE_ALL_OPTR(@stoppingStr, 0);
    return @callsuper();
}


/***********************************************************************
 *		MSG_MSR_NO_DISMISS for MailSendReceiveClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    dismissable - TRUE if dismissable
 * SIDE EFFECTS:    
 ***********************************************************************/
@method MailSendReceiveClass, MSG_MSR_SET_DISMISS_MODE
{
    pself->MSR_okToDismiss = dismissable;
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_SET_REF_COUNT
 * PASS:            refCount - new reference count
 * RETURN:          none
 * DESCRIPTION:
 *         Set the reference count on the dialog
 ***************************************************************/

@method MailSendReceiveClass, MSG_MSR_SET_REF_COUNT
{
    /*
     * set the new reference count
     */
    pself->MSR_refCount = refCount;
    /*
     * if the reference count is zero, dismiss the dialog
     */
    if (refCount == 0) {
	@call oself::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    }
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_DEC_REF_COUNT
 * PASS:            none
 * RETURN:          none
 * DESCRIPTION:
 *         decrement the reference count on the dialog; dismiss when zero
 ***************************************************************/

@method MailSendReceiveClass, MSG_MSR_DEC_REF_COUNT
{
    /*
     * if not already zero, decrement the reference count
     */
    if (pself->MSR_refCount > 0) {
	pself->MSR_refCount--;
	@call oself::MSG_MSR_SET_REF_COUNT(pself->MSR_refCount);
    }
}



/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_INIT
 * PASS:            refCount - initial ref count
 * RETURN:          none
 * DESCRIPTION:
 *         initialize the dialog for send and receive
 ***************************************************************/
static const TCHAR upSpc[] = " ";

@method MailSendReceiveClass, MSG_MSR_INIT
{

    /*
     * setup our instance data
     */
    pself->MSR_stop = FALSE;
    @call oself::MSG_MSR_SET_REF_COUNT(refCount);
    @call oself::MSG_MSR_SET_DISMISS_MODE(FALSE);

    /*
     * set up the Stop trigger
     */
    LockStrings();
    @call srStopTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(LMemDeref(@stopStopTrigger),VUM_NOW);
    UnlockStrings();

    /*
     * initialize the progress displays to zero
     */
    UpdateProgress(MakeWWFixed(0), &upSpc, NULL);
    @call oself::MSG_MSR_UPDATE_STATUS(&upSpc);

    /*
     * bring ourselves on screen if we're supposed to
     *
     */
    @call oself::MSG_GEN_SET_USABLE(VUM_NOW);
    @call oself::MSG_GEN_INTERACTION_INITIATE();
}




/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_CHECK_SERVER_SETUP
 * PASS:            reportError - TRUE to report error
 * RETURN:          TRUE if server info setup
 * DESCRIPTION:
 *         See if the server information is setup
 ***************************************************************/

@method MailSendReceiveClass, MSG_MSR_CHECK_SERVER_SETUP
{
    if (FieldIsOK(@PfSMTPServer, reportError)) {
	if (FieldIsOK(@PfMailAccountText, reportError)) {
	    return(TRUE);
	}
    }
    return(FALSE);
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_REPORT_ERROR
 * PASS:            mailError - MailError
 * RETURN:          none
 * DESCRIPTION:
 *         report an error
 ***************************************************************/

@method MailSendReceiveClass, MSG_MSR_REPORT_ERROR
{
    @call oself::MSG_MSR_SET_REF_COUNT(0);

    switch(mailError) {
    case SE_DESTINATION_UNREACHABLE:
	ReportError(@meHostUnreachable, NULL);
	break;
    case ME_SMTP_SERVER_FAILED_TO_RESPOND:
    case ME_FAILED_TO_CONNECT_TO_SMTP:
	ReportError(@meFailedToConnectSMTP,NULL);
	break;

    case ME_HOST_NOT_RESOLVED:
	ReportError(@meHostNotResolved,NULL);
	break;
	
    case ME_LOGIN_FAILED:
	ReportError(@meLoginFailed,NULL);
	break;

    case ME_NETWORK_ERROR:
	ReportError(@meNetworkError,NULL);
	break;

    case ME_USER_INTERRUPTED:
	ReportError(@meUserStopped,NULL);
	break;

    case ME_SERVER_CLOSED:
    case ME_HOST_NOT_ACTIVE:
    case ME_OUT_OF_MEMORY:
    case ME_MESSAGE_TOO_LARGE:
    case ME_ALL_BAD_RECIPIENTS:
    case ME_SOME_BAD_RECIPIENTS:
    case ME_NO_RECIPIENTS:
    case ME_FILE_ERROR:
    case ME_PROTOCOL_NOT_SUPPORTED:
    case ME_POP3_HEADER_TOO_LARGE:
    case ME_UNEXPECTED_VALUE:
    case ME_COULD_NOT_OPEN_FILE:
    default:
	ReportError(@meUnknownError,NULL);
	break;
    }
}



/**************************************************************
 *      
 * FUNCTION:        MSG_MSR_REPORT_ERROR
 * PASS:            mailError - MailError
 * RETURN:          none
 * DESCRIPTION:
 *         report an error
 ***************************************************************/

@method MailSendReceiveClass, MSG_MSR_UPDATE_STATUS
{
    /*
     * only update the status if we're not stopping
     */
    if (!pself->MSR_stop) {
	@call srSendReceiveStatusText::MSG_VIS_TEXT_REPLACE_ALL_PTR(status,0); 
    }
}


/***********************************************************************
 *		UpdateProgress
 ***********************************************************************
 *
 * SYNOPSIS:	Utility routine to update the progress dialog.
 * CALLED BY:	
 * RETURN:	Status of any disconnect request.
 * SIDE EFFECTS:
 *	        This routine is also passed to the mail send and 
 *              receive libraries so they can call it to update
 *              the progress during updload and download.  
 ***********************************************************************/

void _pascal
UpdateProgress (WWFixedAsDWord percentage, TCHAR *status, Boolean *stop)
{
    @call srProgress::MSG_GEN_VALUE_SET_VALUE(percentage, 0);
    if (status) {
	@call srProgressText::MSG_VIS_TEXT_REPLACE_ALL_PTR(status, 0);
    }
    if (stop != NULL) {
	*stop = @call SendReceiveDialog::MSG_MSR_SHOULD_STOP();
    }
}	/* End of UpdateProgress.	*/

