#include <geos.h>
#include <heap.h>
#include <file.h>
#include <graphics.h>
#include <vm.h>
#include <hugearr.h>
#include <Ansi/string.h>

@include <Objects/clipbrd.goh>
@include <giflib.goh>

extern VMBlockHandle	G_bitmapHandle;
extern word				G_currentLine;
word G_bitmapWidth;
word G_bitmapHeight;


Boolean _pascal _export
GIFPrologue(BMFormat fmt, FileHandle file, word width, word height)
{
	file++;

	if(fmt == BMF_24BIT)
	{
		GStateHandle bmstate;
		G_bitmapHandle = GrCreateBitmap(
								fmt, width, height,
								ClipboardGetClipboardFile(), 0, &bmstate);

		if(G_bitmapHandle)
		{
			GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);
  			G_currentLine = 0;
			G_bitmapWidth = width;
			G_bitmapHeight = height;

			return FALSE;
		}
	}

	return TRUE;
}

Boolean _pascal _export
GIFSlice(FileHandle file, MemHandle memblock, word size)
{
	byte *p_data;
	Bitmap *p_header;
	word loop;
	byte *elemPtr;
	word elemSize;
	word lineLoop;

	size++;

	p_header = MemLock(memblock);

	if(p_header)
	{
		word hal_count = 0;

		p_data = (byte*) (p_header + 1);

		elemPtr = 0;

		loop = 0;
		while(loop < p_header->B_height)
		{
			if(!hal_count)
			{
				if(elemPtr)
				{
					HugeArrayDirty(elemPtr);
					HugeArrayUnlock(elemPtr);
				}

				hal_count = HAL_COUNT(HugeArrayLock(
					ClipboardGetClipboardFile(),
					G_bitmapHandle,
					loop + G_currentLine,
					(void**)&elemPtr,
					&elemSize));

				if(!hal_count)
				{
					goto error;
				}
			}

			lineLoop = 0;
			while(lineLoop < elemSize)
			{
				elemPtr[lineLoop] = p_data[lineLoop];

				lineLoop++;
			}

			p_data += p_header->B_width * 3;
			hal_count--;
			elemPtr += elemSize;

			loop++;
		}

		HugeArrayDirty(elemPtr);
		HugeArrayUnlock(elemPtr);

		G_currentLine += loop;

		MemUnlock(memblock);

		if(G_currentLine == G_bitmapHeight)
		{
			VMBlockHandle bitmap;
			GStateHandle bmstate;

			bitmap = GrCreateBitmap(
									BMF_8BIT|BMT_PALETTE, G_bitmapWidth, G_bitmapHeight,
									ClipboardGetClipboardFile(), 0, &bmstate);

			if(bitmap)
			{
				GifError gifstat;

				GrDrawHugeBitmap(bmstate, 0, 0, ClipboardGetClipboardFile(), G_bitmapHandle);

				gifstat = GifExportBitmapFHandle(ClipboardGetClipboardFile(), bitmap, file);

				GrDestroyBitmap(bmstate, BMD_KILL_DATA);

				if(gifstat != GE_NO_ERROR)
				{
					goto error;
				}
			}
		}

		return FALSE;
	}

error:

	/* remove the temporary bitmap */
	VMFreeVMChain(ClipboardGetClipboardFile(),
								VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));
	return TRUE;
}

Boolean _pascal _export
GIFEpilogue(FileHandle file)
{
	file++;

	/* remove the temporary bitmap */
	VMFreeVMChain(ClipboardGetClipboardFile(),
								VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));

	return FALSE;
}
