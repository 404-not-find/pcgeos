@include <stdapp.goh>
#include <graphics.h>
#include <Ansi\stdio.h>
#include <vm.h>
#include <hugearr.h>
#include <Ansi/string.h>
#include <jpeglib.h>

@include <Objects/clipbrd.goh>

extern VMBlockHandle	G_bitmapHandle;
extern word				G_currentLine;
extern word G_bitmapWidth;
extern word G_bitmapHeight;

extern word set_error_handler(word *context);


Boolean _pascal _export
JPEGPrologue(BMFormat fmt, FileHandle file, word width, word height)
{
	file++;

	if(fmt == BMF_24BIT)
	{
		GStateHandle bmstate;
		G_bitmapHandle = GrCreateBitmap(
								fmt, width, height, 
								ClipboardGetClipboardFile(), 0, &bmstate);

		if(G_bitmapHandle)
		{
			GrDestroyBitmap(bmstate, BMD_LEAVE_DATA);
  			G_currentLine = 0;
			G_bitmapWidth = width;
			G_bitmapHeight = height;

			return FALSE;
		}
	}

	return TRUE;
}

Boolean _pascal _export
JPEGSlice(FileHandle file, MemHandle memblock, word size)
{
	byte *p_data;
	Bitmap *p_header;
	word loop;
	byte *elemPtr;
	word elemSize;
	word lineLoop;

	size++;
	
	p_header = MemLock(memblock);

	if(p_header)
	{
		word hal_count = 0;

		p_data = p_header + 1;

		elemPtr = 0;

		loop = 0;
		while(loop < p_header->B_height)
		{
			if(!hal_count)
			{
				if(elemPtr)
				{
					HugeArrayDirty(elemPtr);
					HugeArrayUnlock(elemPtr);
				}

				hal_count = HAL_COUNT(HugeArrayLock(
					ClipboardGetClipboardFile(),
					G_bitmapHandle, 
					loop + G_currentLine,
					&elemPtr,
					&elemSize));
			}

			lineLoop = 0;
			while(lineLoop < elemSize)
			{
				elemPtr[lineLoop] = p_data[lineLoop];
				
				lineLoop++;
			}

			p_data += p_header->B_width * 3;
			hal_count--;
			elemPtr += elemSize;

			loop++;
		}

		HugeArrayDirty(elemPtr);
		HugeArrayUnlock(elemPtr);

		G_currentLine += loop;

		MemUnlock(memblock);

		if(G_currentLine == G_bitmapHeight)
		{
			/* This struct contains the JPEG compression parameters and pointers to
			 * working space (which is allocated as needed by the JPEG library).
			 * It is possible to have several such structures, representing multiple
			 * compression/decompression processes, in existence at once.  We refer
			 * to any one struct (and its associated working data) as a "JPEG object".
			 */
			struct jpeg_compress_struct cinfo;
			/* This struct represents a JPEG error handler.  It is declared separately
			 * because applications often want to supply a specialized error handler
			 * (see the second half of this file for an example).  But here we just
			 * take the easy way out and use the standard error handler, which will
			 * print a message on stderr and call exit() if compression fails.
			 * Note that this struct must live as long as the main JPEG parameter
			 * struct, to avoid dangling-pointer problems.
			 */
			struct jpeg_error_mgr jerr;
			/* More stuff */
			FILE * outfile = NULL;		/* target file */
			JSAMPROW row_pointer[1];	/* pointer to JSAMPLE row[s] */

			word size;
			byte *lineptr;

			word quality;
			word i ;
			word errorHandlerContext;

			/* getting quality */ 
			quality = 75;

			/* Step 1: allocate and initialize JPEG compression object */

			/* We have to set up the error handler first, in case the initialization
			 * step fails.  (Unlikely, but it could happen if you are out of memory.)
			 * This routine fills in the contents of struct jerr, and returns jerr's
			 * address which we place into the link field in cinfo.
			 */
			cinfo.err = jpeg_std_error(&jerr);

			/* set error handler */
			if (!set_error_handler(&errorHandlerContext)) {
      
				jpeg_set_error_handler_context(&cinfo, errorHandlerContext);
			
			} else {
      
				jpeg_set_error_handler_context(&cinfo, 0);
				jpeg_destroy_decompress(&cinfo);
				
				if (outfile)
					fdclose(outfile);
				
				goto error;
			}

			/* Now we can initialize the JPEG compression object. */
			jpeg_create_compress(&cinfo);

			/* Step 2: specify data destination (eg, a file) */
			/* Note: steps 2 and 3 can be done in either order. */

			/* Here we use the library-supplied code to send compressed data to a
			 * stdio stream.  You can also write your own code to do something else.
			 * VERY IMPORTANT: use "b" option to fopen() if you are on a machine that
			 * requires it in order to write binary files.
			 */
			if ((outfile = fdopen(file, "wV")) == NULL)
				goto error;

			jpeg_stdio_dest(&cinfo, outfile);

			/* Step 3: set parameters for compression */

			/* First we supply a description of the input image.
			 * Four fields of the cinfo struct must be filled in:
			 */
			cinfo.image_width = G_bitmapWidth; 	/* image width and height, in pixels */
			cinfo.image_height = G_bitmapHeight;
			cinfo.input_components = 3;		/* # of color components per pixel */
			cinfo.in_color_space = JCS_RGB; 	/* colorspace of input image */
  
			/* Now use the library's routine to set default compression parameters.
			 * (You must set at least cinfo.in_color_space before calling this,
			 * since the defaults depend on the source color space.)
			 */
			jpeg_set_defaults(&cinfo);
			
			/* Now you can set any non-default parameters you wish to.
			 * Here we just illustrate the use of quality (quantization table) scaling:
			 */
			jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);

			/* Step 4: Start compressor */

			/* TRUE ensures that we will write a complete interchange-JPEG file.
			 * Pass TRUE unless you are very sure of what you're doing.
			 */
			jpeg_start_compress(&cinfo, TRUE);

			/* Step 5: while (scan lines remain to be written) */
			/*           jpeg_write_scanlines(...); */

			/* Here we use the library's state variable cinfo.next_scanline as the
			 * loop counter, so that we don't have to keep track ourselves.
			 * To keep things simple, we pass one scanline per call; you can pass
			 * more if you wish, though.
			 */
			
			while (cinfo.next_scanline < cinfo.image_height) {
				
				/* jpeg_write_scanlines expects an array of pointers to scanlines.
				 * Here the array is only one element long, but you could pass
				 * more than one scanline at a time if that's more convenient.
				 */

				if(!HAL_COUNT(HugeArrayLock(ClipboardGetClipboardFile(), G_bitmapHandle,
						  cinfo.next_scanline, &lineptr, &size)))
				{
					jpeg_set_error_handler_context(&cinfo, 0);
					jpeg_destroy_decompress(&cinfo);
					
					if (outfile)
						fdclose(outfile);
					goto error;
				}

				row_pointer[0] = lineptr;
				(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);

				HugeArrayUnlock(lineptr);
			}

			/* Add 8 lines of padding to ensure the jpeg works on badly written */
			/* importers like Word 7.0 for Win95. */
			for (i=0; i<8; i++)
				(void) jpeg_write_scanlines(&cinfo, row_pointer, 1);


			/* Step 6: Finish compression */

			jpeg_finish_compress(&cinfo);
			/* After finish_compress, we can close the output file. */
  
			fdclose(outfile);

			/* Step 7: release JPEG compression object */
			/* remove the temporary bitmap */

			/* This is an important step since it will release a good deal of memory. */
			jpeg_destroy_compress(&cinfo);

		}

		return FALSE;
	}

error:
	VMFreeVMChain(ClipboardGetClipboardFile(), 
								VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));

	return TRUE;
}

Boolean _pascal _export
JPEGEpilogue(FileHandle file)
{
	file++;

	VMFreeVMChain(ClipboardGetClipboardFile(), 
								VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));

	return FALSE;
}
