COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		visClock.def

AUTHOR:		Adam de Boor, Jan  1, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	1/ 1/92		Initial revision


DESCRIPTION:
	Class definition for the VisClock class.
		
	$Id: visClock.def,v 1.1 97/04/04 14:50:30 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

VisClockClass	class	VisCompClass, master
MSG_VC_GET_REGION_PARAMS		message
;
;	Message sent to self to get any parameters needed for the region
;	bound to the object to define the shape of the window.
;
;	Pass:	nothing
;	Return:	ax, cx, dx, bp	= AX_PARAM, CX_PARAM, DX_PARAM and BX_PARAM,
;				  respectively, for WinOpen. If no region
;				  bound to the object, these are the coordinates
;				  of the rectangular window to open (ax,bp) is
;				  upper-left, (cx,dx) is lower-right
;

MSG_VC_GET_WINDOW_COLOR		message
;
;	Message sent to self to get the WinColorFlags and color for opening
;	the window. By default, the window is opened with a color of C_BLACK
;	and generating exposure events.
;
;	Pass:	nothing
;	Return:	ah	= WinColorFlags
;		al	= color index or red value, if using RGB
;		dl	= green value, if using RGB
;		dh	= blue value, if using RGB
;

MSG_VC_SET_INTERVAL			message
;
;	Set the interval between clock updates. If the update interval might
;	cause a change in the appearance of the clock, the subclass should
;	field this message and react appropriately.
;
;	Pass:	cx	= ticks between updates.
;	Return:	nothing
;

MSG_VC_CLOCK_TICK			message
;
;	The timer has ticked again, so update the display. VisClock will
;	field this, create a GState and send itself a MSG_VIS_DRAW, but
;	subclasses may field this themselves if, for example, they have
;	a GState cached.
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_VC_SET_FIXED_POSITION		message
;
;	Set the fixed position and justification for the clock.
;
;	Pass:	cx	= fixed X position
;		dx	= fixed Y position
;		bp.low	= horizontal justification
;		bp.high	= vertical justification
;	Return:	nothing
;

MSG_VC_DISCONNECT			message
;
;	Message sent by the ClockApp when it is switching clocks.
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_VC_SET_PART			message
;
;	Set the part to which following SET_PART_COLOR messages apply.
;
;	Pass:	cx	= part number
;	Return:	nothing
;

; MSG_META_COLORED_OBJECT_SET_COLOR
;
;	Set the color of the selected part of the clock.
;
;	Pass:	dxcx	= ColorQuad
;	Return:	nothing
;

VC_CLOCK	equ	1	; constant used in outputs of TemplateColorGroup
				;  to signal a message should go to the clock
				;  doing the building.

VisClockFlags	record
    VCF_MOVING:1		; set if currently moving the clock around
				;  on the screen
    VCF_RESTORED:1		; set if restored from the state file.
    :6
VisClockFlags	end

    ;
    ; Internal instance variables active only while clock is on-screen.
    ; 
    VCI_timer		hptr		; handle of timer that's telling us
					;  what to do
    		noreloc	VCI_timer
    VCI_timerID		word		; ID to give when we tell it what to do
    
    VCI_flags		VisClockFlags

    VCI_clickPoint	Point		; point at which mouse was clicked
					;  before drag started.
    VCI_regionCopy	hptr.Region	; copy of region made for move
    VCI_colorGroup	optr		; Color-selection group, if built
    VCI_colorList	optr		; Color-list child of same.

    ;
    ; Persistent state variables.
    ; 
    VCI_region		lptr.Region 0	; Chunk holding the parameterized
					;  region for the window to be
					;  displayed.
    VCI_interval	word		; Interval for timer, in ticks. If
					;  > 60, then no seconds should be
					;  displayed.


    ;
    ; Positioning information.
    ; 
    VC_RIGHT_EDGE	equ	4000h
    VC_LEFT_EDGE	equ	0
    VC_BOTTOM_EDGE	equ	4000h
    VC_TOP_EDGE		equ	0

    VCI_fixedPosition	Point		; Position at which clock was last
					;  located, since vis data will
					;  go away when we're shut down.
    VCI_horizJust	Justification	; Justification of window w.r.t.
					;  VCI_fixedPosition.P_x
    VCI_vertJust	Justification	; Justification of window w.r.t.
					;  VCI_fixedPosition.P_y
    J_BOTTOM		equ	J_RIGHT	; alias for VCI_vertJust
    J_TOP		equ	J_LEFT	; alias for VCI_vertJust

    ;
    ; Option stuff.
    ; 
    VCI_optionTree	optr		; Root of additional options for this
					;  clock
    VCI_category	lptr.char	; Category for saving position in
					;  the ini file.
    VCI_selectedPart	word		; Part of the clock selected for
					;  color changes
    VCI_colorsPtr	word		; Offset w/in instance data for
					;  array of colors (ColorQuad structs).
    VCI_numParts	word		; Number of parts whose color may
					;  be set.
    VCI_firstPartString	lptr.char	; Chunk holding first string describing
					;  a part of the clock. Strings
					;  describing other parts of the clock
					;  follow in successive chunks.

VisClockClass	endc
