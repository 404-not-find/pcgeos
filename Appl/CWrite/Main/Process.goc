/*---------------------------------------------------------------------

	Copyright (c) Breadbox Computer Company LLC 2004 -- All Rights Reserved

PROJECT:	GEOS32
MODULE:		CWrite
FILE:		process.goc

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jfh	6/04		Initial version

DESCRIPTION:
	This file contains the code for WriteProcessClass


-----------------------------------------------------------------------------*/

/*ifdef _SUPER_IMPEX
include fileEnum.def
include library.def
include Internal\xlatLib.def
endif
*/
@include "proc.goh"

@classdecl	WriteProcessClass, neverSaved;

/*idata	segment
miscSettings	WriteMiscSettings
idata ends

AppInitExit segment resource


/*----------------------------------------------------------------------

MESSAGE:	WriteProcessUIInstallToken -- MSG_GEN_PROCESS_INSTALL_TOKEN
						for WriteProcessClass

DESCRIPTION:	Install the tokens for GeoWrite

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	3/18/92		Initial version

------------------------------------------------------------------------------@
WriteProcessUIInstallToken	method dynamic	WriteProcessClass,
						MSG_GEN_PROCESS_INSTALL_TOKEN
	;
	; Call our superclass to get the ball rolling...
	;
	mov	di, offset WriteProcessClass
	call	ObjCallSuperNoLock

	; install datafile token

	mov	ax, ('W') or ('D' shl 8)	; ax:bx:si = token used for
	mov	bx, ('A') or ('T' shl 8)	;	datafile
	mov	si, MANUFACTURER_ID_GEOWORKS
	call	TokenGetTokenInfo		; is it there yet?
	jnc	done				; yes, do nothing
	mov	cx, handle DatafileMonikerList	; cx:dx = OD of moniker list
	mov	dx, offset DatafileMonikerList
	clr	bp				; list is in data resource, so
						;  it's already relocated
	call	TokenDefineToken		; add icon to token database
done:

	ret

WriteProcessUIInstallToken	endm

ifdef GPC
WriteProcessOpenApplication	method dynamic	WriteProcessClass,
					MSG_GEN_PROCESS_OPEN_APPLICATION
	;
	; Call our superclass to get the ball rolling...
	;
	mov	di, offset WriteProcessClass
	call	ObjCallSuperNoLock
	;
	; set View to 125% if TV. If we're not on the TV, then look at
	; the .INI file to determine what value to use, and by default
	; use 100%.
	;
	mov	ax, MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME
	call	UserCallApplication
	and	ah, mask DT_DISP_ASPECT_RATIO
	cmp	ah, DAR_TV shl offset DT_DISP_ASPECT_RATIO
	mov	dx, 125			; 125%
	je	setView
	;
	; OK - we're not on the TV. Check the .INI file. Note that
	; we use the category key defined in the application object,
	; which must *always* be defined!
	;
	sub	sp, MAX_INITFILE_CATEGORY_LENGTH
	mov	cx, ss
	mov	dx, sp
	mov	ax, MSG_META_GET_INI_CATEGORY
	call	UserCallApplication
EC <	ERROR_NC WRITE_INTERNAL_LOGIC_ERROR				>

	mov	ds, cx			; category => DS:SI
	mov	si, dx
	mov	cx, cs
	mov	dx, offset defaultZoomKey
	mov	ax, 100			; default to 100%
	call	InitFileReadInteger
	add	sp, MAX_INITFILE_CATEGORY_LENGTH
	mov_tr	dx, ax			; default zoom value => DX
	;
	; Finally - set the view scale factor
	;
setView:
	GetResourceHandleNS	WriteViewControl, bx
	mov	si, offset WriteViewControl
	mov	ax, MSG_GVC_SET_SCALE
	clr	di
	GOTO	ObjMessage
WriteProcessOpenApplication	endm

defaultZoomKey	char	"defaultZoom", 0
endif

AppInitExit ends

;---

DocCommon segment resource

COMMENT @----------------------------------------------------------------------

MESSAGE:	WriteProcessInsertColumnBreak --
		MSG_WRITE_PROCESS_INSERT_COLUMN_BREAK for WriteProcessClass

DESCRIPTION:	Insert a C_COLUMN_BREAK character

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	6/ 9/92		Initial version

------------------------------------------------------------------------------@
WriteProcessInsertColumnBreak	method dynamic	WriteProcessClass,
					MSG_WRITE_PROCESS_INSERT_COLUMN_BREAK

SBCS <	mov	cx, (VC_ISCTRL shl 8) or VC_ENTER			>
DBCS <	mov	cx, C_SYS_ENTER						>
	mov	dx, (mask SS_LCTRL) shl 8
	mov	ax, MSG_META_KBD_CHAR

	mov	di, mask MF_RECORD
	call	EncapsulateToTargetVisText
	ret

WriteProcessInsertColumnBreak	endm

;---

EncapsulateToTargetVisText	proc	far

	;
	; Encapsulate the message the caller wants, sending it to a VisText
	; object.
	; 
	push	si
	mov	bx, segment VisTextClass
	mov	si, offset VisTextClass
	call	ObjMessage
	pop	si

	;
	; Now queue the thing to the app target, since we can't rely on the
	; model hierarchy to match the target hierarchy (e.g. when editing
	; a master page, the WriteDocument still has the model, but the
	; WriteMasterPageContent object has the target). This bones anything
	; that must be synchronous, but such is life.
	; 
	mov	cx, di
	mov	dx, TO_APP_TARGET
	mov	ax, MSG_META_SEND_CLASSED_EVENT
	clr	bx
	call	GeodeGetAppObject
	mov	di, mask MF_FORCE_QUEUE		;keep that stack usage down
	call	ObjMessage
	ret

EncapsulateToTargetVisText	endp

DocCommon ends

DocDrawScroll segment resource


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetNowAsTimeStamp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Convert the current date and time into two 16-bit records
		(FileDate and FileTime)

CALLED BY:	INTERNAL
PASS:		nothing
RETURN:		ax	= FileDate
		bx	= FileTime
DESTROYED:	nothing

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/4/92		Stolen from primary IFS drivers (hence the
				formatting)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GetNowAsTimeStamp	proc	far
		uses	cx, dx
		.enter
		call	TimerGetDateAndTime
	;
	; Create the FileDate record first, as we need to use CL to the end...
	; 
		sub	ax, 1980	; convert to fit in FD_YEAR
			CheckHack <offset FD_YEAR eq 9>
		mov	ah, al
		shl	ah		; shift year into FD_YEAR
		mov	al, bh		; install FD_DAY in low 5 bits
		
		mov	cl, offset FD_MONTH
		clr	bh
		shl	bx, cl		; shift month into place
		or	ax, bx		; and merge it into the record
		xchg	dx, ax		; dx <- FileDate, al <- minutes,
					;  ah <- seconds
		xchg	al, ah
	;
	; Now for FileTime. Need seconds/2 and both AH and AL contain important
	; stuff, so we can't just sacrifice one. The seconds live in b<0:5> of
	; AL (minutes are in b<0:5> of AH), so left-justify them in AL and
	; shift the whole thing enough to put the MSB of FT_2SEC in the right
	; place, which will divide the seconds by 2 at the same time.
	; 
		shl	al
		shl	al		; seconds now left justified
		mov	cl, (8 - width FT_2SEC)
		shr	ax, cl		; slam them into place, putting 0 bits
					;  in the high part
	;
	; Similar situation for FT_HOUR as we need to left-justify the thing
	; in CH, so just shift it up and merge the whole thing.
	; 
		CheckHack <(8 - width FT_2SEC) eq (8 - width FT_HOUR)>
		shl	ch, cl
		or	ah, ch
		mov_tr	bx, ax		; bx <- time
		mov_tr	ax, dx		; ax <- date
		.leave
		ret
GetNowAsTimeStamp	endp

DocDrawScroll ends

DocMiscFeatures segment resource



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessInsertTextualDateTime
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Insert a textual representation of the current date or
		time into the document at the current insertion point.

CALLED BY:	MSG_WRITE_PROCESS_INSERT_TEXTUAL_DATE_TIME
PASS:		cx	= DateTimeFormat to use
RETURN:		nothing
DESTROYED:	everything
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/ 5/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
WriteProcessInsertTextualDateTime method dynamic WriteProcessClass, 
				MSG_WRITE_PROCESS_INSERT_TEXTUAL_DATE_TIME
	.enter
	;
	; Allocate a block into which we can put the text, since we can't
	; make this call synchronous.
	; 
	push	cx
	mov	ax, DATE_TIME_BUFFER_SIZE
	mov	cx, ALLOC_DYNAMIC_LOCK
	call	MemAlloc
	pop	si			; si <- DateTimeFormat
	jc	done
	
	;
	; Format the current time appropriately.
	; 
	mov	es, ax
	push	bx
	clr	di			; es:di <- destination
	call	TimerGetDateAndTime	; get now
	call	LocalFormatDateTime	; format now
	pop	dx		; dx <- handle
	mov	bx, dx
	call	MemUnlock	; guess what?

	;
	; Now send the block off to the target text object to replace the
	; current selection.
	; 
	mov	ax, 1
	call	MemInitRefCount		; set reference count to 1 so when the
					;  target vistext decrements it for us
					;  it will go away
	mov	ax, MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK
	mov	di, mask MF_RECORD
	push	dx
	call	EncapsulateToTargetVisText
	pop	cx
	
	;
	; Send a message to the same place to decrement the reference count
	; for that block so it goes away when the text object is done with it.
	; 
	mov	ax, MSG_META_DEC_BLOCK_REF_COUNT
	clr	dx			; no second handle
	mov	di, mask MF_RECORD
	call	EncapsulateToTargetVisText
done:
	.leave
	ret
WriteProcessInsertTextualDateTime endm

if _INDEX_NUMBERS


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessTOCContextListVisible
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

CALLED BY:	MSG_WRITE_PROCESS_TOC_CONTEXT_LIST_VISIBLE
PASS:		^lcx:dx	= list
		bp	= non-zero if visible
RETURN:		
DESTROYED:	
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	3/30/94		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
WriteProcessTOCContextListVisible		method dynamic WriteProcessClass, MSG_WRITE_PROCESS_TOC_CONTEXT_LIST_VISIBLE
		.enter
		tst	bp
		jz	done
		mov	ax, MSG_WRITE_DOCUMENT_TOC_CONTEXT_LIST_VISIBLE
		mov	bx, es
		mov	si, offset WriteDocumentClass
		mov	di, mask MF_RECORD
		call	ObjMessage
		mov	cx, di
		mov	ax, MSG_META_SEND_CLASSED_EVENT
		mov	dx, TO_MODEL
		GetResourceHandleNS	WriteDocumentGroup, bx
		mov	si, offset WriteDocumentGroup
		mov	di, mask MF_CALL
		call	ObjMessage
done:
		.leave
		ret
WriteProcessTOCContextListVisible		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessInsertContextNumber
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

CALLED BY:	MSG_WRITE_PROCESS_INSERT_CONTEXT_NUMBER
PASS:		
RETURN:		
DESTROYED:	
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	3/30/94		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
WriteProcessInsertContextNumber		method dynamic WriteProcessClass, MSG_WRITE_PROCESS_INSERT_CONTEXT_NUMBER
		mov	si, offset InsertContextNumberNumberList
		mov	di, offset InsertContextNumberFormatList
		GOTO	WriteProcessInsertVariableCommon
WriteProcessInsertContextNumber		endm

endif

COMMENT @----------------------------------------------------------------------

MESSAGE:	WriteProcessInsertNumber -- MSG_WRITE_PROCESS_INSERT_NUMBER
							for WriteProcessClass

DESCRIPTION:	Insert a number

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	9/30/92		Initial version

------------------------------------------------------------------------------@
WriteProcessInsertNumber	method dynamic	WriteProcessClass,
						MSG_WRITE_PROCESS_INSERT_NUMBER

	mov	si, offset NumberTypeList
	mov	di, offset NumberFormatList
	GOTO	WriteProcessInsertVariableCommon
WriteProcessInsertNumber	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	WriteProcessInsertNumber -- MSG_WRITE_PROCESS_INSERT_DATE
							for WriteProcessClass

DESCRIPTION:	Insert a date

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	9/30/92		Initial version

------------------------------------------------------------------------------@
WriteProcessInsertDate	method dynamic	WriteProcessClass,
						MSG_WRITE_PROCESS_INSERT_DATE

	mov	si, offset DateTypeList
	mov	di, offset DateFormatList
	GOTO	WriteProcessInsertVariableCommon
WriteProcessInsertDate	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	WriteProcessInsertTime -- MSG_WRITE_PROCESS_INSERT_TIME
							for WriteProcessClass

DESCRIPTION:	Insert a time

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	9/30/92		Initial version

------------------------------------------------------------------------------@
WriteProcessInsertTime	method dynamic	WriteProcessClass,
						MSG_WRITE_PROCESS_INSERT_TIME

	mov	si, offset TimeTypeList
	mov	di, offset TimeFormatList
	FALL_THRU	WriteProcessInsertVariableCommon
WriteProcessInsertTime	endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessInsertVariableCommon
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Common routine to handle inserting a number, date, or time

CALLED BY:	(INTERNAL) WriteProcessInsertNumber,
			   WriteProcessInsertDate,
			   WriteProcessInsertTime
PASS:		^lbx:si	= GenItemGroup with selected number/date/time
		^lbx:di = GenItemGroup with selected format
RETURN:		nothing
DESTROYED:	ax, cx, dx, bp, si, di
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/ 3/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
WriteProcessInsertVariableCommon proc	far
		CheckHack <segment NumberTypeList eq segment DateTypeList>
		CheckHack <segment NumberTypeList eq segment TimeTypeList>

	GetResourceHandleNS	NumberTypeList, bx
	push	di
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov	di, mask MF_CALL
	call	ObjMessage			;ax = type
	pop	si
	push	ax

	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov	di, mask MF_CALL
	call	ObjMessage			;ax = format
	mov_tr	bp, ax				;bp = format
	pop	dx
	mov	cx, MANUFACTURER_ID_GEOWORKS

	FALL_THRU	WriteProcessInsertVariableGraphic
WriteProcessInsertVariableCommon endp


COMMENT @----------------------------------------------------------------------

MESSAGE:	WriteProcessInsertVariableGraphic --
		MSG_WRITE_PROCESS_INSERT_VARIABLE_GRAPHIC for WriteProcessClass

DESCRIPTION:	Insert a variable type graphic

PASS:
	*ds:si - instance data
	es - segment of WriteProcessClass

	ax - The message

	cx - manufacturer ID
	dx - VisTextVariableType
	bp - data

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	9/29/92		Initial version

------------------------------------------------------------------------------@
WriteProcessInsertVariableGraphic	method WriteProcessClass,
				MSG_WRITE_PROCESS_INSERT_VARIABLE_GRAPHIC

	mov	bx, bp				;bx = data

	sub	sp, size ReplaceWithGraphicParams
	mov	bp, sp

	; zero out the structure

	segmov	es, ss
	mov	di, bp
	push	cx
	mov	cx, size ReplaceWithGraphicParams
	clr	ax
	rep	stosb
	pop	cx

	mov	ss:[bp].RWGP_graphic.VTG_type, VTGT_VARIABLE
	mov	ss:[bp].RWGP_graphic.VTG_flags, mask VTGF_DRAW_FROM_BASELINE
	mov	ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_manufacturerID,
									cx
	mov	ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_type, dx
	mov	{word} \
		ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_privateData, bx

	mov	ax, VIS_TEXT_RANGE_SELECTION
	mov	ss:[bp].RWGP_range.VTR_start.high, ax
	mov	ss:[bp].RWGP_range.VTR_end.high, ax

	;
	; If it's MANUFACTURER_ID_GEOWORKS:VTVT_STORED_DATE_TIME, we need to get
	; the current date and time and store them in the 2d and 3d words of
	; private data.
	; 
	cmp	cx, MANUFACTURER_ID_GEOWORKS
	jne	doReplace
	cmp	dx, VTVT_STORED_DATE_TIME
if _INDEX_NUMBERS
	jne	checkContext
else
	jne	doReplace
endif
	call	GetNowAsTimeStamp
	mov	{word} \
		ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_privateData[2],
			ax	; date
	mov	{word} \
		ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_privateData[4],
			bx	; time
doReplace:
	mov	ax, MSG_VIS_TEXT_REPLACE_WITH_GRAPHIC
	mov	dx, size ReplaceWithGraphicParams
	mov	di, mask MF_RECORD or mask MF_STACK
	call	EncapsulateToTargetVisText

	add	sp, size ReplaceWithGraphicParams
	ret

if _INDEX_NUMBERS
checkContext:
	;
	; If it's a context thing, we have to get the context to use.
	; 
	cmp	dx, VTVT_CONTEXT_PAGE
	jb	doReplace
	cmp	dx, VTVT_CONTEXT_SECTION
	ja	doReplace

	GetResourceHandleNS	InsertContextNumberContextList, bx
	mov	si, offset InsertContextNumberContextList
	push	bp
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov	di, mask MF_CALL
	call	ObjMessage			;ax = type index
	
	;
	; Find the current document from the document group by asking it for the
	; model.
	; 
	GetResourceHandleNS	WriteDocumentGroup, bx
	mov	si, offset WriteDocumentGroup
	push	ax
	mov	ax, MSG_META_GET_MODEL_EXCL
	mov	di, mask MF_CALL
	call	ObjMessage
	movdw	bxsi, cxdx
	pop	cx

	;
	; Map the index to the token via that document.
	; 
	mov	ax, MSG_WRITE_DOCUMENT_GET_TOKEN_FOR_CONTEXT
	mov	di, mask MF_CALL
	call	ObjMessage
	pop	bp
	
	mov	{word} \
		ss:[bp].RWGP_graphic.VTG_data.VTGD_variable.VTGV_privateData[2],
			cx
	jmp	doReplace
endif

WriteProcessInsertVariableGraphic	endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessPrintDialog
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

CALLED BY:	MSG_WRITE_PROCESS_PRINT_DIALOG
PASS:		*ds:si	= WriteProcessClass object
		ds:di	= WriteProcessClass instance data
		ds:bx	= WriteProcessClass object (same as *ds:si)
		es 	= segment of WriteProcessClass
		ax	= message #
RETURN:		
DESTROYED:	
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	BC	9/ 8/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ifdef _VS150

WriteProcessPrintDialog	method dynamic WriteProcessClass, 
					MSG_WRITE_PROCESS_PRINT_DIALOG
	uses	ax, cx, dx, bp
	.enter
	GetResourceHandleNS	WritePrintControl, bx
	mov	si, offset WritePrintControl
	mov	ax, MSG_PRINT_CONTROL_INITIATE_PRINT
	clr	di
	call	ObjMessage
	.leave
	ret
WriteProcessPrintDialog	endm

endif


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		WriteProcessMergeFile
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

CALLED BY:	MSG_WRITE_PROCESS_MERGE_FILE
PASS:		*ds:si	= WriteProcessClass object
		ds:di	= WriteProcessClass instance data
		ds:bx	= WriteProcessClass object (same as *ds:si)
		es 	= segment of WriteProcessClass
		ax	= message #
RETURN:		
DESTROYED:	
SIDE EFFECTS:	

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	BC	6/16/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ifdef _VS150

GeoDexTokens 	char	"ADBK", 0, 0

WriteProcessMergeFile	method dynamic WriteProcessClass, 
					MSG_WRITE_PROCESS_MERGE_FILE
	uses	ax, cx, dx, bp
	.enter
	push	si
	mov	cx, IC_DISMISS
	CallObject	MSG_GEN_GUP_INTERACTION_COMMAND, MergeFileSelector
	pop	si
	;
	; Create a launch block so IACP can launch the app if it's not
	; around yet.
	; 
	mov	dx, MSG_GEN_PROCESS_OPEN_APPLICATION
	call	CreateAppLaunchBlock
	jc	exit
	;
	; Connect to the server, telling IACP to create it if it's not there.
	; 
	segmov	es, cs
	mov	di, offset GeoDexTokens
	mov	ax, mask IACPCF_FIRST_ONLY or \
		(IACPSM_USER_INTERACTIBLE shl offset IACPCF_SERVER_MODE)
	call	IACPConnect
	jc	exit

	clr	cx
	push	cx, bp
	mov	ax, MSG_ROLODEX_MERGE_DIALOG
	clr	bx, si
	mov	di, mask MF_RECORD
	call	ObjMessage
	pop	cx, bp
	mov	bx, di			; bx <- msg to send
	mov	dx, TO_PROCESS
	mov	ax, IACPS_CLIENT
	;
	; PASS:           bp      = IACPConnection
	;                 bx      = recorded message to send
	;                 dx      = TravelOption, -1 if recorded message
	;				contains the proper destination already
	;                 cx      = completionMsg, 0 if none
	;                 ax      = IACPSide doing the sending.
	; RETURN:         ax      = number of servers to which message was sent
	;
	call	IACPSendMessage

	; That's it, we're done.  Shut down the connection we opened up, so
	; that GeoDex is allowed to exit.  -- Doug 2/93
	;
	clr	cx, dx			; shutting down the client
	call	IACPShutdown
	clc	
exit:		
	.leave
	ret
WriteProcessMergeFile	endm

endif


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			CreateAppLaunchBlock
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Creates AppLaunchBlock for launching GeoDex.

CALLED BY:	
PASS:
RETURN:		bx	- handle of AppLaunchBlock

DESTROYED:	nothing

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	BCHOW	6/93		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ifdef _VS150

CreateAppLaunchBlock	proc	far	uses	bp, di, ds, es
	.enter
	;
	; set up AppLaunchBlock for UserLoadApplication
	;
	mov	ax, size AppLaunchBlock
	mov	cx, (mask HAF_ZERO_INIT shl 8) or mask HF_SHARABLE or \
					ALLOC_DYNAMIC_LOCK
	call	MemAlloc
	mov	es, ax
	jc	error
	;
	; enough memory to allocate block
	;
	; bx = AppLaunchBlock
	;
	mov	es:[ALB_appRef.AIR_fileName], 0
	mov	es:[ALB_appRef.AIR_stateFile], 0
	mov	es:[ALB_appRef.AIR_diskHandle], 0
	mov	es:[ALB_appRef.AIR_savedDiskData], 0
	;
	; launching datafile
	;
	mov	es:[ALB_appMode], MSG_GEN_PROCESS_OPEN_APPLICATION
	clr	es:[ALB_launchFlags]
	;
	; get the name of the file selected into ALB_dataFile
	;
	push	si, bx
	mov	cx, es
	lea	dx, es:[ALB_dataFile]
	mov     si, offset MergeFileSelector
	GetResourceHandleNS     MergeFileSelector, bx
	mov     ax, MSG_GEN_FILE_SELECTOR_GET_SELECTION
	mov     di, mask MF_CALL
	call    ObjMessage
	;
	; get the path name of the datafile into ALB_path, and the
	; disk handle into ALB_diskHandle
	;
	mov	dx, es
	lea	bp, es:[ALB_path]
	mov     si, offset MergeFileSelector
	mov	cx, PATH_BUFFER_SIZE
	GetResourceHandleNS     MergeFileSelector, bx
	mov     ax, MSG_GEN_PATH_GET
	mov     di, mask MF_CALL
	call    ObjMessage
	mov	es:[ALB_diskHandle], cx
	pop	si, bx
	;
	; bx = AppLaunchBlock
	;
	call	MemUnlock
	clc
error:
	.leave
	ret
CreateAppLaunchBlock	endp

endif


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MergeFileCheck
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Checks to see if the current selection is a directory or
		a normal file and enables or disables the "OK"
		button accordingly.  Also edits or creates double-clicked file.

CALLED BY:	GLOBAL
PASS:	 	cx:dx - OD of GenFileSelector (will be needed later when
				default-action support is added)
		bp - 	GenFileSelectorEntryFlagsh       record

RETURN:		nada
DESTROYED:	various important but undocumented things
 
PSEUDO CODE/STRATEGY:
		This page intentionally left blank

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dlitwin	3/11/92		Stole from wTrans

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ifdef _VS150

MergeFileCheck	method WriteProcessClass, MSG_WRITE_PROCESS_MERGE_FILE_CHECK
	.enter

	GetResourceHandleNS	MergeTrigger, bx
	mov	si, offset MergeTrigger

objectSet:
	mov	ax, MSG_GEN_SET_NOT_ENABLED	;Assume its NOT a normal file
	push	bp
	test	bp, mask GFSEF_NO_ENTRIES	;If nothing selected, treat
	jne	common				; like directory
	and	bp, mask GFSEF_TYPE 
	cmp	bp, GFSET_FILE shl offset GFSEF_TYPE
	jne	common				;Branch if not a file
	mov	ax, MSG_GEN_SET_ENABLED	;Not a dir, so is a normal file
common:
	mov	dl, VUM_NOW
	clr	di
	call	ObjMessage
	pop	bp
	cmp	ax, MSG_GEN_SET_ENABLED
	jne	exit
	test	bp, mask GFSEF_OPEN		;If double click, activate 
	je	exit				; default button
	mov	ax, MSG_GEN_ACTIVATE
	mov	di, mask MF_CALL
	call	ObjMessage
exit:
	.leave
	ret
MergeFileCheck	endm

endif



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		strcpy
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	copies a string (null-terminated)

CALLED BY:	GLOBAL
PASS:		ds:si - src
		es:di - dest
RETURN:		ax - # of chars copied including null
DESTROYED:	nothing

PSEUDO CODE/STRATEGY:
		

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	es:di must have space to fit ds:si string
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ISR	3/20/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
strcpy	proc	far
	uses	cx,si,di
	.enter
; 	GET LENGTH OF SRC STRING

	segxchg	ds,es
	push	di
	mov	di,si			;es:di - src
	mov	cx, -1
	clr	ax
	repne	scasb
	not	cx			;CX <- # chars + null in src str
	mov	ax,cx
	segxchg	ds,es
	pop	di			;ds:si - src buf  es:di - dest buf
	shr	cx, 1
	jnc	5$
	movsb
5$:
	rep	movsw			;strcpy
	.leave
	ret
strcpy	endp

endif

DocMiscFeatures ends

*/




