/***********************************************************************
 *
 *	Copyright (c) Geoworks 1996 -- All Rights Reserved
 *
 * PROJECT:	  
 * MODULE:	  
 * FILE:	  dove.ui
 *
 * AUTHOR:  	  Eric Yeh, Aug  6, 1996
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CEY	8/ 6/96   	Initial version
 *
 * DESCRIPTION:
 *	specific ui for dove Network app that is not already included in 
 *	termui.ui.  
 *
 * 	$Id: dove.ui,v 1.1 97/04/04 16:56:26 newdeal Exp $
 *
 ***********************************************************************/

start PrimaryInterface;

/*---------------------------------------------------------------------------
		Main Network Display Triggers
---------------------------------------------------------------------------*/

KbdSpaceAndDoveMainTriggerList = GenInteraction {
	children = KbdSpaceGroup, DoveMainTriggerList;
	hints = {
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY
	}
}

KbdSpaceGroup = GenInteraction {
	children = KbdSpace;
	hints = {
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

KbdSpace = FloatingKbdSpace {
}

DoveMainTriggerList = GenInteraction {
	children = DoveMainTriggerListLeft, DoveMainTriggerListRight;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_TOOLBOX
	}
}

DoveMainTriggerListLeft = GenInteraction {
	children = ConnectTrigger, NetworkHangUpTrigger, MacroList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

/* BufferTrigger = GenTrigger {
	moniker = "Buffer";
	action = MSG_TERM_WRITE_FILE_CONTENTS, process;
} */



DoveMainTriggerListRight = GenInteraction {
	children = KeyBoardTrigger, HistoryToggle, 
			FunctionsGroup; 
	

	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

/* ****************************************
		Macro Trigger
**************************************** */

MacroList = GenInteraction {
	moniker = MacroMoniker;	
	children =	MacroTrigger1, MacroTrigger2, MacroTrigger3, 
			MacroTrigger4, MacroTrigger5, KeyMacroBoxTrigger;
	visibility = popup;
	hints = { 
			HINT_AVOID_MENU_BAR
		}
}

MacroTrigger1 = GenTrigger {
	moniker = "";
	action = MSG_TERM_WRITE_KEY_MACRO1, process;
}

MacroTrigger2 = GenTrigger {
	moniker = "";
	action = MSG_TERM_WRITE_KEY_MACRO2, process;
}

MacroTrigger3 = GenTrigger {
	moniker = "";
	action = MSG_TERM_WRITE_KEY_MACRO3, process;
}

MacroTrigger4 = GenTrigger {
	moniker = "";
	action = MSG_TERM_WRITE_KEY_MACRO4, process;
}

MacroTrigger5 = GenTrigger {
	moniker = "";
	action = MSG_TERM_WRITE_KEY_MACRO5, process;
}


KeyMacroBoxTrigger= GenTrigger {
	moniker = "Edit Macros...";
	action = MSG_TERM_ACTIVATE_SET_KEY_MACRO, process;
}


ExitTrigger =	GenTrigger {
	moniker = ExitMoniker; /* NOTE: must set localizable */
	action = MSG_META_DETACH, process;

} 






/* ****************************************
	Activate Software Keyboard
**************************************** */
KeyBoardTrigger =	GenTrigger {
	moniker = KBMoniker; 
/*	action = MSG_GEN_TOGGLE_FLOATING_KBD, "TO_APP_FOCUS"; */
	action = MSG_TERM_TOGGLE_KBD, process;
}


/* ****************************************
	History Record Switch
**************************************** */
HistoryToggle =	GenTrigger {
	moniker = HistoryMoniker; /* NOTE: must set localizable */
/*	action = MSG_ASCII_RECV_START, process; */
	action = MSG_TERM_HISTORY_TOGGLE, process;

}

SettingsTrigger =	GenTrigger {
	moniker = SettingsMoniker; /* NOTE: must set localizable */
	genAttributes = default +initiatesInputIgnore;
	action = MSG_TERM_SETTING_BUTTON_HIT, process; /* temp for demo */

}

ConnectTrigger =	GenTrigger {
	moniker = ConnectMoniker; /* NOTE: must set localizable */
	action = MSG_TERM_CONNECT_BUTTON_HIT, process;
	genAttributes = default +initiatesInputIgnore;
/*	action = MSG_TERM_ACTIVATE_CONNECTION_CONFIRM, process; */
/*	action = MSG_GEN_INTERACTION_INITIATE, ConnectionConfirmDialog; */
}


NetworkHangUpTrigger = GenTrigger {
	moniker = "Disconnect";
	action = MSG_TERM_DISCONNECT_BUTTON_HIT, process;
/*	action = MSG_HANG_UP, process; */
}


FunctionsGroup = GenInteraction {
	moniker = "Functions";
	children =	CopySelect, PasteSelect, SettingsTrigger;
	visibility = popup;
	hints = { 
			HINT_AVOID_MENU_BAR
		}
}




/* ---------------------------------------------------------------------- 
		Dialogs associated with Main Connection (3.1)
---------------------------------------------------------------------- */

BreakConnectionDialog = GenInteraction {
	children = BreakConnectionDialogMesgText, 
			BreakConnectionDialogChoiceText;
	visibility = dialog;
	type = affirmation;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		}
}



ChangeAppKeepConnectionDialog = GenInteraction {
	children = ChangeAppKeepConnectionDialogMesgText,
			ChangeAppKeepConnectionDialogChoiceText;
	visibility = dialog;
	type = affirmation;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		}
}


 
ConnectNoSetDialog = GenInteraction {
	moniker = ConnectNoSetMoniker;
	children = ConnectionNoSetDialogMesgText;
	attributes = default +modal, +notUserInitiatable;
	type = notification;
	visibility = dialog;
	hints = { 
			HINT_NOT_MOVABLE
		}
}



/* ---------------------------------------------------------------------- */
ConnectionConfirmDialog = GenInteraction {
/* (3.2) in spec */
	moniker = ConfirmConnectionMoniker;
	children =	ConnectionConfirmAccessPointGroup,
		 	ConnectionConfirmContentBox,
			ConnectionConfirmTriggers;
	visibility = dialog;
	type = multipleResponse; 
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		} 
}

/* Content elements */
ConnectionConfirmContentBox = GenInteraction {
	moniker = ContentsMoniker;
	children =	ConnectionConfirmNetworkName,
			ConnectionConfirmContentSecondary,
			ConnectionConfirmNetworkID,
			LogHistoryGroup;

	hints = {	
			HINT_DRAW_IN_BOX,
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_PLACE_MONIKER_ABOVE
		}
}


ConnectionConfirmAccessPointGroup =  GenInteraction {
	children =	ConnectionConfirmAccessPointLabel, 
			ConnectionConfirmAccessPointName;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}


ConnectionConfirmAccessPointLabel = GenText {
	text = AccessPointNameText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

ConnectionConfirmAccessPointName = GenDynamicList {
	numItems = MAX_IAPL_COUNT;
	queryMsg = MSG_TERM_UPDATE_IAPL_NAME_LIST;
	applyMsg = MSG_TERM_SET_IAPL_SELECTION;
	destination = process;
	selection = 0;
	hints = {
			HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
			HINT_ITEM_GROUP_MINIMIZE_SIZE,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS,ACCESS_POINT_NAME_WIDTH>
			}
		}
}





ConnectionConfirmContentSecondary = GenInteraction {
	children =	ConnectionConfirmAccessPoint,
			ConnectionConfirmTelephoneNumber;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

ConnectionConfirmAccessPoint = GenText  {
	moniker = AccessPointMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, CONNECTION_POINT_FIELD_WIDTH>
			}
		}
}

ConnectionConfirmTelephoneNumber = GenText  {
	moniker = TelephoneNumberMoniker;	
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, TELEPHONE_NUMBER_FIELD_WIDTH>
			}		
		}
}

ConnectionConfirmNetworkName = GenText {
	moniker = NetworkNameMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_NAME_FIELD_WIDTH>
			}
		}
}

ConnectionConfirmNetworkID = GenText {
	moniker = NetworkIDMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_ID_FIELD_WIDTH>
			}	
		}
}

/*
ConnectionConfirmConnectionMethod = GenText {
	moniker = ConnectionMethodMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, CONNECT_METHOD_FIELD_WIDTH>
			}
		}
} */

LogHistoryGroup = GenBooleanGroup {
	children = LogHistoryCheckBox;
/*	applyMsg = MSG_TERM_TOGGLE_SETTING_CHANGES; */
	destination = process;

}

LogHistoryCheckBox = GenBoolean {
	moniker	= "Log History";
	identifier = LOG_HISTORY;
}


/*
ConnectionConfirmTextField = GenText {
	text = ConnectionConfirmText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
} */

/* Triggers */

ConnectionConfirmTriggers = GenInteraction {
	children =	ConnectionConfirmOKButton,
			ConnectionConfirmChangeButton,
			ConnectionConfirmCancelButton;
/*			MyComList; */
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}		
/*	genStates = default -usable; */
}


ConnectionConfirmOKButton = GenTrigger {
	moniker = OKMoniker;
	genAttributes = default +signalInteractionComplete; 
	action = MSG_TERM_CONNECT_OK_BUTTON_HIT, process; 
	hints = {
			HINT_SEEK_REPLY_BAR
		} 

}

ConnectionConfirmChangeButton = GenTrigger {
	moniker = ChangeMoniker;	
	genAttributes = default +signalInteractionComplete; 

	hints = {
			HINT_SEEK_REPLY_BAR
		} 

	action = MSG_TERM_ACTIVATE_CONNECTION_SETTING, process;
}

ConnectionConfirmCancelButton = GenTrigger {
	moniker = CancelMoniker;
	genAttributes = default +signalInteractionComplete; 

	hints = {
			HINT_SEEK_REPLY_BAR
		}	
	action = MSG_TERM_FINISH_BUTTON_HIT, process;
}

/*
MyComList = GenItemGroup {
	moniker	= 'M', "Modem Port:";
	children = mySetCom1, mySetCom2, mySetCom3, mySetCom4;
	applyMsg = MSG_TERM_SET_PORT;
	destination =  process;
	hints	= {
		HINT_SEEK_REPLY_BAR,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

mySetCom1 = GenItem {
	moniker = '1', "Com1";			
	identifier	= MY_SERIAL_COM1;
}

mySetCom2 = GenItem {
	moniker = '2', "Com2";			
	identifier	= MY_SERIAL_COM2;
}

mySetCom3 = GenItem {
	moniker = '3', "Com3";			
	identifier	= MY_SERIAL_COM3;
}

mySetCom4 = GenItem {
	moniker = '4', "Com4";			
	identifier	= MY_SERIAL_COM4;
} */



/* ---------------------------------------------------------------------- */
/* (3.3) in spec.  Note this is really just 3.2 with a new set of triggers */

ConnectionSettingTriggers = GenInteraction {
	children =	NewAccessPtButton,
			ConnectionSettingChangeButton, 
			DeleteButton, 
			ExitDialogButton;
	genStates = default -usable;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}	
}

/* Triggers */
NewAccessPtButton = GenTrigger {
	moniker = NewAccessPointMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}

	action = MSG_TERM_ACTIVATE_NETWORK_SELECTION_NEW, process;
}

ConnectionSettingChangeButton = GenTrigger {
	moniker = ChangeMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_ACTIVATE_NETWORK_SELECTION_CHANGE, process;
}

DeleteButton = GenTrigger {
	moniker = DeleteMoniker;
	genAttributes = default +signalInteractionComplete; 
	action = MSG_TERM_DELETE_IAPL_RECORD, process;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
}

ExitDialogButton = GenTrigger {
	moniker = FinishMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_FINISH_BUTTON_HIT, process;
}








/* ---------------------------------------------------------------------- */
NetworkSelectionDialog = GenInteraction {
/* (3.4) in spec */
	moniker  =	NetworkSelectionMoniker;
	children =	NetworkSelectionServicesList, 
			NetworkSelectionNextButton,
			NetworkSelectionCancelButton;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_NOT_MOVABLE
		} 
}

/* Content elements */


NetworkSelectionServicesList = GenItemGroup {
/*	numItems = MAX_SERVICE_COUNT; */
/*	queryMsg = MSG_TERM_UPDATE_NETWORK_NAME_LIST; */
	applyMsg = MSG_TERM_SET_NETWORK_SELECTION;
	destination = process;
	selection = 0;
	children = 	PCVANItem, NiftyServeItem, ASCIINETItem,
			PeopleItem, OtherItem;

	hints = {
			HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
			HINT_ITEM_GROUP_SCROLLABLE,
			ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS,ACCESS_POINT_NAME_WIDTH>
			}
		}
}

PCVANItem = GenItem {
	moniker = PCVANMoniker;
	identifier = PC_VAN;
}

NiftyServeItem = GenItem {
	moniker = NiftyServeMoniker;
	identifier = NIFTY_SERVE;
}

ASCIINETItem = GenItem {
	moniker = ASCIINETMoniker;
	identifier = ASCIINET;
}

PeopleItem = GenItem {
	moniker = PeopleMoniker;
	identifier = PEOPLE;
}

OtherItem = GenItem {
	moniker = OtherMoniker;
	identifier = OTHER;
}


/*

NetworkSelectionTextField = GenText  {
	moniker = SelectedNetworkNameMoniker;
	textDisplayAttributes = default +singleLineText;
	destination = process;
	applyMsg = MSG_TERM_SET_NETWORK_SELECTION;
	maxLength = TELEPHONE_NUMBER_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, TELEPHONE_NUMBER_FIELD_WIDTH>
			}	
		}
} */



/* Triggers */


NetworkSelectionNextButton = GenTrigger {
	moniker = NextMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_INITIALIZE_NETWORK_ELEMENT, process;
}

NetworkSelectionCancelButton = GenTrigger {
	moniker = CancelMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_FINISH_BUTTON_HIT, process;
/*	action = MSG_TERM_CANCEL_BUTTON_HIT, process; */
}



/* ---------------------------------------------------------------------- */
NetworkElementDialog = GenInteraction {
/* (3.5) in spec */
	moniker = "Network Element"; 
	children =	NetworkElementContentBox,
			NetworkElementNextButton,
			NetworkElementBackButton,
			NetworkElementDeleteButton,
			NetworkElementAdvancedButton,
			NetworkElementScriptButton,
			NetworkElementCancelButton;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		} 
}

/* Content elements */
NetworkElementContentBox = GenInteraction {
	moniker = ContentsMoniker;
	children =	NetworkElementContentPrimary,
			NetworkElementContentTertiary;

	hints = {	
			HINT_DRAW_IN_BOX,
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_PLACE_MONIKER_ABOVE
		}
}

NetworkElementContentPrimary = GenInteraction {
	children =	NetworkElementAccessPointList,
			NetworkElementContentSecondary;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

NetworkElementAccessPointList = GenDynamicList {
			numItems = MAX_SERVICE_COUNT;
			queryMsg = MSG_TERM_UPDATE_ACCESS_POINT_LIST;
			applyMsg = MSG_TERM_SET_ACCESS_POINT; 
			destination = process;
			selection = 0;
	hints = {
			HINT_ITEM_GROUP_SCROLLABLE,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, ACCESS_POINT_NAME_WIDTH>				
			}
		}
}


NetworkElementContentSecondary = GenInteraction {
	children =	NetworkElementAccessPoint,
			NetworkElementTelephoneNumber;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}



NetworkElementAccessPoint = GenText  {
	moniker = AccessPointMoniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = CONNECTION_POINT_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, CONNECTION_POINT_FIELD_WIDTH>
			}
		}
}

NetworkElementTelephoneNumber = GenText  {
	moniker = TelephoneNumberMoniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = TELEPHONE_NUMBER_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, TELEPHONE_NUMBER_FIELD_WIDTH>
			}		
		}
}

NetworkElementContentTertiary = GenInteraction {
	children =	NetworkElementNetworkID,
			NetworkElementNetworkPassword;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}


NetworkElementNetworkID = GenText {
	moniker = NetworkIDMoniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = NETWORK_ID_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_ID_FIELD_WIDTH>
			}	
		}
}


NetworkElementNetworkPassword = ProtectedGenText {
	moniker = NetworkPasswordMoniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = NETWORK_ID_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_ID_FIELD_WIDTH>
			},
			ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
                    		VisTextDefaultCharAttr <
                        	0, 0, 0,
                        	C_BLACK,
                       	 	VTDF_BISON
                    		>
                }	
		}
}


/* triggers */

NetworkElementNextButton = GenTrigger {
	moniker = NextMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
/*	action = MSG_GEN_INTERACTION_INITIATE, SetKeyMacroDialog; */
/*	action = MSG_TERM_ACTIVATE_SET_KEY_MACRO, process; */
	action = MSG_TERM_ACTIVATE_CONFIRM_SAVE, process;
}

NetworkElementBackButton = GenTrigger {
	moniker = BackMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_GEN_INTERACTION_INITIATE, NetworkSelectionDialog; 
/*	action = MSG_TERM_ACTIVATE_NETWORK_SELECTION, process; */
}

NetworkElementDeleteButton = GenTrigger {
	moniker = DeleteMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_DELETE_ACCESS_POINT, process;
}


NetworkElementAdvancedButton = GenTrigger {
	moniker = "Advanced";
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_ACTIVATE_SET_TERMINAL, process;
}

NetworkElementScriptButton = GenTrigger {
	moniker = ScriptMoniker;
	genAttributes = default +signalInteractionComplete; 
	action = MSG_TERM_SCRIPT_EDITOR_OPEN, process;
/*	action = MSG_GEN_BRING_TO_TOP, ScriptEditorPrimary; */
	hints = {
			HINT_SEEK_REPLY_BAR
		}
}

NetworkElementCancelButton = GenTrigger {
	moniker = CancelMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
/*	action = MSG_TERM_CANCEL_BUTTON_HIT, process; */
	action = MSG_TERM_NETWORK_SETTINGS_CANCEL_BUTTON, process;
}


/* ---------------------------------------------------------------------- */
SetKeyMacroDialog = GenInteraction {
/* (3.6) in spec */
	moniker = SetKeyMacroMoniker; 
	children =	KeyMacro1Field, KeyMacro2Field, KeyMacro3Field,
			KeyMacro4Field, KeyMacro5Field,
			SetKeyMacroOkButton,
			SetKeyMacroCancelButton;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_NOT_MOVABLE
		} 
}

KeyMacro1Field = GenText {
	moniker = KeyMacro1Moniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = MACRO_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}		
		}
}

KeyMacro2Field = GenText {
	moniker = KeyMacro2Moniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = MACRO_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}		
		}
}

KeyMacro3Field = GenText {
	moniker = KeyMacro3Moniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = MACRO_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}		
		}
}

KeyMacro4Field = GenText {
	moniker = KeyMacro4Moniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = MACRO_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}		
		}
}

KeyMacro5Field = GenText {
	moniker = KeyMacro5Moniker;
	textDisplayAttributes = default +singleLineText;
	maxLength = MACRO_FIELD_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}		
		}
}

/*
SetKeyMacroNextButton = GenTrigger {
	moniker = NextMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_ACTIVATE_SET_TERMINAL, process;
}

SetKeyMacroBackButton = GenTrigger {
	moniker = BackMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_GO_BACK_NET_ELT, process; 
} */

SetKeyMacroOkButton = GenTrigger {
	moniker = "OK";
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_KEY_MACRO_OK_BUTTON_HIT, process;
}

SetKeyMacroCancelButton = GenTrigger {
	moniker = CancelMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_KEY_MACRO_CANCEL_BUTTON_HIT, process;
}

/* ---------------------------------------------------------------------- */

/* For set terminal (3.7), use ProtocolBox */

/* ---------------------------------------------------------------------- */
ConfirmSaveDataDialog = GenInteraction {
/* (3.8) in spec */
	moniker = ConfirmSaveDataMoniker; 
	children =	ConfirmSaveDataContent,
			ConfirmSaveDataTextField,
			ConfirmSaveDataNextButton,
			ConfirmSaveDataBackButton,
			ConfirmSaveDataDetailsButton, 
			ConfirmSaveDataCancelButton;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		} 
}

ConfirmSaveDataNextButton = GenTrigger {
	moniker = NextMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_TERM_SAVE_ACCESS_POINT, process;
/*	action = MSG_TERM_ACTIVATE_CONNECTION_SETTING, process; */
	/* saves data */
}

ConfirmSaveDataDetailsButton = GenTrigger {
	moniker = DetailsMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_GEN_INTERACTION_INITIATE, ConfirmSaveDataDetailsDialog; 
}

ConfirmSaveDataBackButton = GenTrigger {
	moniker = BackMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_GEN_INTERACTION_INITIATE, NetworkElementDialog; 
/*	action = MSG_TERM_GO_BACK_NET_ELT, process; */
}

ConfirmSaveDataCancelButton = GenTrigger {
	moniker = CancelMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
/*	action = MSG_TERM_CANCEL_BUTTON_HIT, process; */
	action = MSG_TERM_CONFIRM_SAVE_CANCEL, process;
}


/* Contents */
ConfirmSaveDataContent = GenInteraction {
	children =	ConfirmSaveDataIAPLName,
			ConfirmSaveDataNetworkName,
			ConfirmSaveDataLowerContent,
			ConfirmSaveDataNetworkID;

	hints = {		
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

ConfirmSaveDataLowerContent = GenInteraction {
	children =	ConfirmSaveDataAccessPoint,
			ConfirmSaveDataTelephoneNumber;
	hints = {		
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

ConfirmSaveDataIAPLName = GenText {
	moniker = ServiceNameMoniker;
	textDisplayAttributes = default +singleLineText;
/*	genAttributes = default +readOnly;*/
	maxLength = SERVICE_NAME_WIDTH;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, SERVICE_NAME_WIDTH>
			}
		}
}

ConfirmSaveDataNetworkName = GenText {
	moniker = NetworkNameMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_NAME_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataAccessPoint = GenText {
	moniker = AccessPointMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, CONNECTION_POINT_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataTelephoneNumber= GenText {
	moniker = TelephoneNumberMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, TELEPHONE_NUMBER_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataNetworkID= GenText {
	moniker = NetworkIDMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, NETWORK_ID_FIELD_WIDTH>
			}
		}
}


ConfirmSaveDataTextField= GenText {
	text = ConfirmSaveDataText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT
		}
}






/* ---------------------------------------------------------------------- */
ConfirmSaveDataDetailsDialog = GenInteraction {
/* (3.9) in spec */
	moniker = ConfirmSaveDataDetailsMoniker; 
	children =	ConfirmSaveDataDetailsSettingContents,
			ConfirmSaveDataDetailsTextField,
			ConfirmSaveDataDetailsBackButton;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE
		} 
}

ConfirmSaveDataDetailsTextField = GenText {
	text = ConfirmSaveDataDetailsText;
	genAttributes = default +readOnly;
}

ConfirmSaveDataDetailsBackButton = GenTrigger {
	moniker = BackMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
			HINT_SEEK_REPLY_BAR
		}
	action = MSG_GEN_INTERACTION_INITIATE, ConfirmSaveDataDialog;
}

/* Contents */
/*
ConfirmSaveDataDetailsMacroContents = GenInteraction {
	children =	ConfirmSaveDataDetailsKeyMacro1,
			ConfirmSaveDataDetailsKeyMacro2,
			ConfirmSaveDataDetailsKeyMacro3,
			ConfirmSaveDataDetailsKeyMacro4,
			ConfirmSaveDataDetailsKeyMacro5;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
} */

ConfirmSaveDataDetailsSettingContents = GenInteraction {
	children =	ConfirmSaveDataDetailsLeftColumn,
			ConfirmSaveDataDetailsRightColumn;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

ConfirmSaveDataDetailsLeftColumn = GenInteraction {
	children =	ConfirmSaveDataDetailsBaud,
			ConfirmSaveDataDetailsDataBits,
			ConfirmSaveDataDetailsFlowControl,
			ConfirmSaveDataDetailsKanjiFont;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

ConfirmSaveDataDetailsRightColumn = GenInteraction {
	children =	ConfirmSaveDataDetailsStopBits,
			ConfirmSaveDataDetailsParityBit,
			ConfirmSaveDataDetailsTerminalType;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

ConfirmSaveDataDetailsKeyMacro1 = GenText {
	moniker = KeyMacro1Moniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsKeyMacro2 = GenText {
	moniker = KeyMacro2Moniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsKeyMacro3 = GenText {
	moniker = KeyMacro3Moniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsKeyMacro4 = GenText {
	moniker = KeyMacro4Moniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsKeyMacro5 = GenText {
	moniker = KeyMacro5Moniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, MACRO_FIELD_WIDTH>
			}
		}
}

/* settings content text fields */
ConfirmSaveDataDetailsBaud = GenText {
	moniker = BaudMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, BAUD_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsDataBits = GenText {
	moniker = DataBitsMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, DATA_BITS_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsFlowControl = GenText {
	moniker = FlowControlMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, FLOW_CONTROL_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsKanjiFont = GenText {
	moniker = KanjiFontMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, KANJI_FONT_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsStopBits = GenText {
	moniker = StopBitsMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, STOP_BITS_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsParityBit = GenText {
	moniker = ParityBitMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, PARITY_BIT_FIELD_WIDTH>
			}
		}
}

ConfirmSaveDataDetailsTerminalType = GenText {
	moniker = TerminalTypeMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, TERMINAL_TYPE_FIELD_WIDTH>
			}
		}
}

/*
ConfirmSaveDataDetailsConnectionMethod = GenText {
	moniker = ConnectionMethodMoniker;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
			HINT_PLACE_MONIKER_TO_LEFT,
			HINT_FIXED_SIZE {
				SpecWidth <SST_WIDE_CHAR_WIDTHS, CONNECT_METHOD_FIELD_WIDTH>
			}
		}
} */



/* **************************************************
		Monikers used
************************************************** */
visMoniker AccessPointMoniker = "Access Point";
visMoniker BackMoniker = "Back";
visMoniker BaudMoniker = "Baud";
visMoniker CancelMoniker = "Cancel";
visMoniker ScriptMoniker = "script";
visMoniker ChangeMoniker = "Change";
visMoniker ConfirmConnectionMoniker = "Confirm Connection";
visMoniker ConfirmSaveDataDetailsMoniker = "Confirm Save Data Details";
visMoniker ConfirmSaveDataMoniker = "Confirm Save Data";
visMoniker ConnectMoniker = "Connect";
/* visMoniker ConnectionMethodMoniker = "Connection Method"; */
visMoniker ConnectNoSetMoniker = "Cannot set while connecting";
visMoniker ContentsMoniker = "Contents";
visMoniker DataBitsMoniker = "Data Bits";
visMoniker DetailsMoniker = "Details";
visMoniker DeleteMoniker = "Delete";
visMoniker ExitMoniker = "Exit";
visMoniker FinishMoniker = "Finish";
visMoniker FlowControlMoniker = "Flow Control";
visMoniker HistoryMoniker = "History";
visMoniker KanjiFontMoniker = "Kanji Font";
visMoniker KBMoniker = "KB";
visMoniker KeyMacro1Moniker = "Key Macro 1";
visMoniker KeyMacro2Moniker = "Key Macro 2";
visMoniker KeyMacro3Moniker = "Key Macro 3";
visMoniker KeyMacro4Moniker = "Key Macro 4";
visMoniker KeyMacro5Moniker = "Key Macro 5";
visMoniker MacroMoniker = "Macro";
visMoniker NetworkIDMoniker = "Network ID";
visMoniker NetworkNameMoniker = "Network Name";
visMoniker NetworkPasswordMoniker = "Password";
visMoniker NetworkSelectionMoniker = "Select Network";
visMoniker NewAccessPointMoniker = "New";
visMoniker NextMoniker = "Next";
visMoniker OKMoniker = "OK";
visMoniker ParityBitMoniker = "Parity Bit";
visMoniker SelectedNetworkNameMoniker = "Selected Network";
visMoniker ServiceNameMoniker = "Connection Name";
visMoniker SetKeyMacroMoniker = "Set Key Macro";
visMoniker SettingsMoniker = "Settings";
visMoniker StopBitsMoniker = "Stop Bits";
visMoniker TelephoneNumberMoniker = "Access Number";
visMoniker TerminalTypeMoniker = "Terminal Type";

visMoniker PCVANMoniker = "PC-VAN";
visMoniker NiftyServeMoniker = "Nifty-Serve";
visMoniker ASCIINETMoniker = "ASCII-NET";
visMoniker PeopleMoniker = "People";
visMoniker OtherMoniker = "Other";

/* ****************************************
		Strings used
**************************************** */
chunk AccessPointNameText = "Access Point Name";
chunk BreakConnectionDialogMesgText = "Break network connection?";
chunk BreakConnectionDialogChoiceText = "Choose yes to break connection and end the program";
chunk ChangeAppKeepConnectionDialogMesgText = "Change application but keep connection?";
chunk ChangeAppKeepConnectionDialogChoiceText = "Choose ?";
chunk ConfirmSaveDataDetailsText = "Now, the above settings okay?";
chunk ConfirmSaveDataText = "Save the settings?";
chunk ConnectionAreaText = "Connection Area:";
chunk ConnectionConfirmText = "Connect to the selected access point";
chunk ConnectionNoSetDialogMesgText = "Logging onto network, cannot set access point.";
chunk ConnectionProcedureText = "Connection Procedure:";
chunk NetworkIDText = "Network ID:";
chunk NetworkNameText = "Network Name:";
chunk TelephoneNumberText = "Telephone Number:";

/* ****************************************
	Settings text strings
**************************************** */
/* chunk BaudText = "Baud";
chunk DataText = "Data Bits";
chunk FlowText = "Flow Control";
chunk ParityText = "Parity";
chunk StopText = "Stop Bits";
chunk TerminalText = "Terminal";
chunk KanjiFontText = "KanjiFont";
*/


end PrimaryInterface;

start MenuInterface;
ProtocolBox = ProtocolInteraction {
	moniker = SetTerminalMoniker;
	children =	ChangeSettingsGroup,
			ProtocolSettingsContent, 
			ProtocolOkTrigger,
			ProtocolCancelTrigger;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;

	hints = {
		HINT_NOT_MOVABLE, 
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbProtocol", 0
		}
	} 
}

visMoniker SetTerminalMoniker = "Set Terminal";

end MenuInterface;


start ProtocolUI;

ProtocolSettingsContent = GenInteraction {
	children =	ProtocolSettingsSecondaryContent,
			FlowGroup,
			ProtocolLowerContent;
	genStates = default -enabled;
	hints = {
			HINT_DRAW_IN_BOX,
			HINT_ORIENT_CHILDREN_VERTICALLY
		}	
}

ChangeSettingsGroup = GenBooleanGroup {
	children = ChangeSettingsCheckBox;
	applyMsg = MSG_TERM_TOGGLE_SETTING_CHANGES;
	destination = process;

}

ChangeSettingsCheckBox = GenBoolean {
	moniker	= ChangeSettingsMoniker;
	identifier = CHANGE_SETTINGS;
}


ProtocolSettingsSecondaryContent = GenInteraction {
	children = ProtocolSettingsLeft, ProtocolSettingsRight;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}


ProtocolSettingsLeft = GenInteraction {
	children = BaudGroup, DataGroup;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

ProtocolSettingsRight = GenInteraction {
	children = StopGroup, ParityGroup;
	hints = {
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}


/*
ProtocolNextTrigger = GenTrigger {
	moniker = ProtocolBoxNextMoniker;
	genAttributes = default +signalInteractionComplete;
	action = MSG_TERM_ACTIVATE_CONFIRM_SAVE, process;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR
	}
}

ProtocolBackTrigger = GenTrigger {
	moniker = ProtocolBoxBackMoniker;
	genAttributes = default +signalInteractionComplete;
	action = MSG_GEN_INTERACTION_INITIATE, SetKeyMacroDialog;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
} */

ProtocolOkTrigger = GenTrigger {
	moniker = "OK";
	genAttributes = default +signalInteractionComplete;
	action = MSG_TERM_PROTOCOL_OK_BUTTON_HIT, process;
/*	action = MSG_TERM_ACTIVATE_CONFIRM_SAVE, process; */
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR
	}
}

ProtocolCancelTrigger = GenTrigger {
	moniker = ProtocolBoxCancelMoniker;
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
/*	action = MSG_TERM_CANCEL_BUTTON_HIT, process; */
	action = MSG_TERM_PROTOCOL_CANCEL_BUTTON_HIT, process; 
}

ProtocolLowerContent = GenInteraction {
	children = TerminalGroup, KanjiFontGroup;
/*	children = CommunicationHistoryGroupBox, ComboBoxList; */
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

/*
CommunicationHistoryGroupBox = GenBooleanGroup {
	moniker	= CommunicationHistoryLabelMoniker;	
	selectedBooleans = CHECK_COMMUNICATION_HISTORY;
	children = CommunicationHistoryBox;
	applyMsg = MSG_TERM_SET_MAKE_CHECK_BOX;
	destination = process;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE
	}
} */

/*
CommunicationHistoryBox = GenBoolean {
	moniker	= CommunicationHistoryCheckBoxMoniker;	
	identifier = CHECK_COMMUNICATION_HISTORY;
} */


/* ----------------------------------------------------------------------
		ComboBox Method List
---------------------------------------------------------------------- */
/*
ComboBoxList = GenItemGroup {
	children =	AutomaticControl,
			ManualControl;
	
	applyMsg = MSG_TERM_SET_COMBO_BOX; 
	destination = process;
	selection = CM_ONLY_AUTO_CONNECTION;
	numSelections = 1;
	hints	= {
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED
	}
}

AutomaticControl = GenItem {
	moniker = AutomaticMoniker;
	identifier = CT_COMBO_BOX_AUTOMATIC;
}

ManualControl = GenItem {
	moniker = ManualMoniker;
	identifier = CT_COMBO_BOX_MANUAL;
} */



/*-----------------------------------------------------------------------------
	Baud List
-----------------------------------------------------------------------------*/
BaudGroup = GenInteraction {
	children = BaudLabel, BaudList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

BaudLabel = GenText {
	text = BaudText;	
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

BaudList = GenItemGroup {
	children =	Set300, Set1200, Set2400, Set4800, Set9600
, Set19200,
			Set38400;
	applyMsg = MSG_TERM_SET_BAUD; 
/*	applyMsg = MSG_TERM_DOVE_SET_BAUD_RATE; */
	destination = process;
	selection = SB_19200; /* for DoCoMo Demo */
	numSelections = 1;
	hints	= {
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED
	}
}

Set38400 = GenItem {
	moniker = Baud38400Moniker;
	identifier	= SB_38400;
}

Set19200 = GenItem {
	moniker = Baud19200Moniker;
	identifier	= SB_19200;
}

Set9600 = GenItem {
	moniker = Baud9600Moniker;
	identifier	= SB_9600;
}

Set4800 = GenItem {
	moniker = Baud4800Moniker;
	identifier	= SB_4800;
}


Set2400 = GenItem {
	moniker = Baud2400Moniker;
	identifier	= SB_2400;
}

Set1200 = GenItem {
	moniker = Baud1200Moniker;
	identifier	= SB_1200;
}

Set300 = GenItem {
	moniker = Baud300Moniker;
	identifier	= SB_300;
}

/*-----------------------------------------------------------------------------
	Character Data Settings
-----------------------------------------------------------------------------*/
DataGroup = GenInteraction {
	children = DataLabel, DataList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

DataLabel = GenText {
	text = DataText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

DataList = GenItemGroup {
	children = FiveBits, SixBits,SevenBits, EightBits;
	applyMsg = MSG_TERM_ADJUST_FORMAT1; 
/*	applyMsg = MSG_TERM_DOVE_SET_DATA_BIT; */
	destination = process;
	selection = "(SL_8BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
	numSelections = 1;
	hints	= {
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_TERM_ADJUST_USER_FORMAT
		}
	}
}

FiveBits = GenItem {
	moniker = FiveDataBitMoniker;
	identifier="(SL_5BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

SixBits = GenItem {
	moniker = SixDataBitMoniker;
	identifier="(SL_6BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}


SevenBits = GenItem {
	moniker = SevenDataBitMoniker;
	identifier="(SL_7BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

EightBits = GenItem {
	moniker = EightDataBitMoniker;
	identifier="(SL_8BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

/*-----------------------------------------------------------------------------
	Stop Bits
-----------------------------------------------------------------------------*/
StopGroup = GenInteraction {
	children = StopLabel, StopList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

StopLabel = GenText {
	text = StopText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

StopList = GenItemGroup {
	children = OneBits, OneHalfBits, TwoBits;
 	applyMsg = MSG_TERM_ADJUST_FORMAT2; 
/*	applyMsg = MSG_TERM_DOVE_SET_STOP_BIT; */
	destination = process;
	selection = SBO_ONE;
	numSelections = 1;
	hints	= {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
	}
}

OneBits = GenItem {
	moniker = OneStopBitMoniker;
	identifier = SBO_ONE;
}

OneHalfBits = GenItem {
	moniker = OnePtFiveStopBitMoniker;
	identifier = SBO_ONEANDHALF;
	genStates = default -enabled;
}

TwoBits = GenItem {
	moniker = TwoStopBitMoniker;
	identifier = SBO_TWO;
}

/*-----------------------------------------------------------------------------
	Parity Settings
-----------------------------------------------------------------------------*/
ParityGroup = GenInteraction {
	children = ParityLabel, ParityList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

ParityLabel = GenText {
	text = ParityText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}


ParityList = GenItemGroup {
	children = NoParity, OddParity, EvenParity, MarkParity, SpaceParity;
 	applyMsg = MSG_TERM_ADJUST_FORMAT3; 
/*	applyMsg = MSG_TERM_DOVE_SET_PARITY_BIT; */
	destination = process;
	selection= "(SP_NONE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
	numSelections = 1;
	hints	= {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,		
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
	}
}


NoParity = GenItem {
	moniker = NoParityMoniker;
	identifier= "(SP_NONE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

OddParity = GenItem {
	moniker = OddParityMoniker;
	identifier= "(SP_ODD shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

EvenParity = GenItem {
	moniker = EvenParityMoniker;
	identifier= "(SP_EVEN shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

SpaceParity = GenItem {
	moniker = SpaceParityMoniker;
	identifier= "(SP_SPACE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

MarkParity = GenItem {
	moniker = MarkParityMoniker;
	identifier= "(SP_MARK shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

/*-----------------------------------------------------------------------------
	Handshake Settings
-----------------------------------------------------------------------------*/
FlowGroup = GenInteraction {
	children = FlowLabel, FlowList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

FlowLabel = GenText {
	text = FlowText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

FlowList = GenBooleanGroup {
	children = FlowNone, FlowHardware, FlowSoftware;
 	applyMsg = MSG_TERM_SET_FLOW; 
	destination = process;
	selectedBooleans = "mask SFC_HARDWARE"; 

	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word	MSG_TERM_SET_USER_FLOW
		}
	}
}

FlowHardware = GenBoolean {
	moniker = FlowHardwareMoniker;
	identifier = "mask SFC_HARDWARE";
}

FlowSoftware = GenBoolean {
	moniker = FlowSoftwareMoniker;
	identifier = "mask SFC_SOFTWARE";
}

FlowNone = GenBoolean {
	moniker = FlowNoneMoniker;
	identifier = "mask FFB_NONE";
}

/* ----------------------------------------------------------------------
		Terminal type settings
---------------------------------------------------------------------- */
TerminalGroup = GenInteraction {
	children = TerminalLabel, TerminalList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

TerminalLabel = GenText {
	text = TerminalText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

TerminalList = GenItemGroup {
	children =	TermSetTTY, TermSetVt52, TermSetVt100,
			TermSetWyse, TermSetAnsi, TermSetIBM3101, 
			TermSetTVI950;

	applyMsg = MSG_TERM_SET_TERMINAL;
	destination = process;
	selection = VT100;
	hints= {
			HINT_ITEM_GROUP_MINIMIZE_SIZE,
			HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
			ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
				word 0
			}
		}
}

TermSetTTY = GenItem {
	moniker = "TTY";
	identifier	= TTY;
}

TermSetAnsi = GenItem {
	moniker = "ANSI";
	identifier	= ANSI;
}

TermSetWyse = GenItem {
	moniker = "WYSE 50";
	identifier	= WYSE50;
}

TermSetVt52 = GenItem {
	moniker = "VT 52";
	identifier	= VT52;
}

TermSetVt100 = GenItem {
	moniker = "VT 100";
	identifier	= VT100;
}

TermSetIBM3101 = GenItem {
	moniker = "IBM 3101";
	identifier	= IBM3101;
}

TermSetTVI950 = GenItem {
	moniker = "TVI 950";
	identifier	= TVI950;
}



/*-----------------------------------------------------------------------------
		Kanji Font Settings
-----------------------------------------------------------------------------*/
KanjiFontGroup = GenInteraction {
	children = KanjiFontLabel, KanjiFontList;
	hints = {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

KanjiFontLabel = GenText {
	text = KanjiFontText;
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
}

KanjiFontList = GenItemGroup {
/*	children =	KanjiShiftJIS, KanjiJIS, KanjiOldJIS,
			KanjiNEC, KanjiEUC; */
	children =	KanjiShiftJIS, KanjiJIS, KanjiEUC;

/*	applyMsg = MSG_TERM_SET_KANJI_CODE; */
	applyMsg = MSG_TERM_SET_CODE_PAGE;
	destination = process; 
	hints	= {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word	MSG_TERM_SET_USER_FLOW
		}
	}
}

/* NOTE: need to get support for NEC and Old JIS fonts */

KanjiShiftJIS = GenItem {
	moniker = "Shift JIS";
	identifier = CODE_PAGE_SJIS;
}

KanjiJIS = GenItem {
	moniker = "JIS";
	identifier = CODE_PAGE_JIS;
}

/* 
KanjiOldJIS = GenItem {
	moniker = "Old JIS";
	identifier = PFK_KANJI_CODE_OLD_JIS;
}

KanjiNEC = GenItem {
	moniker = "NEC";
	identifier = CODE_PAGE_EUC;
} */

KanjiEUC = GenItem {
	moniker = "EUC";
	identifier = CODE_PAGE_EUC;
}


/* ****************************************
	Settings box text strings
**************************************** */
chunk BaudText = "Baud";
chunk DataText = "Data Bits";
chunk FlowText = "Flow Control";
chunk ParityText = "Parity";
chunk StopText = "Stop Bits";
chunk TerminalText = "Terminal";
chunk KanjiFontText = "KanjiFont";

/* ****************************************
	Settings box monikers
**************************************** */
/* change settings monikers */
visMoniker ChangeSettingsMoniker = "Change Settings";

/* stop bit monikers */
visMoniker OneStopBitMoniker = "1";
visMoniker OnePtFiveStopBitMoniker = "1.5";
visMoniker TwoStopBitMoniker = "2";

/* data bit monikers */
visMoniker FiveDataBitMoniker = "5";
visMoniker SixDataBitMoniker = "6";
visMoniker SevenDataBitMoniker = "7";
visMoniker EightDataBitMoniker = "8";

/* parity monikers */
visMoniker NoParityMoniker = "None";
visMoniker OddParityMoniker = "Odd";
visMoniker EvenParityMoniker = "Even";
visMoniker SpaceParityMoniker = "Space";
visMoniker MarkParityMoniker = "Mark";

/* Flow control monikers */
visMoniker FlowHardwareMoniker = "Hardware";
visMoniker FlowSoftwareMoniker = "Software";
visMoniker FlowNoneMoniker = "None";

/* Baud rate monikers */
visMoniker Baud38400Moniker = "38400";	
visMoniker Baud19200Moniker = "19200";
visMoniker Baud9600Moniker = "9600";
visMoniker Baud4800Moniker = "4800";
visMoniker Baud2400Moniker = "2400";
visMoniker Baud1200Moniker = "1200";
visMoniker Baud300Moniker = "300";

/* communication history moniker */
visMoniker CommunicationHistoryLabelMoniker = "Communication History";
visMoniker CommunicationHistoryCheckBoxMoniker = "Do it";

/* Combo Box History Method Monikers */
/*visMoniker AutomaticMoniker = "Automatic";
visMoniker ManualMoniker = "Manual"; */

/* trigger monikers */
visMoniker ProtocolBoxBackMoniker = "Back";
visMoniker ProtocolBoxCancelMoniker = "Cancel";
visMoniker ProtocolBoxNextMoniker = "Next";

/* I will tolerate the existence of these things only as long as I need them
to make the code run.  After that code is removed, slice! */

ComList = GenItemGroup {
	moniker	= 'M', "Modem Port:";
	children = SetCom1, SetCom2, SetCom3, SetCom4;
	applyMsg = MSG_TERM_SET_PORT;
	destination =  process;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED
	}
}

SetCom1 = GenItem {
	moniker = '1', "Com1";			
	identifier	= MY_SERIAL_COM1;
}

SetCom2 = GenItem {
	moniker = '2', "Com2";			
	identifier	= MY_SERIAL_COM2;
}

SetCom3 = GenItem {
	moniker = '3', "Com3";			
	identifier	= MY_SERIAL_COM3;
}

SetCom4 = GenItem {
	moniker = '4', "Com4";			
	identifier	= MY_SERIAL_COM4;
}
 

HardwareHandshakeGroup = GenInteraction {
	children = HardwareHandshakeTitle, StopRemoteList, StopLocalList;
	hints = {HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_DO_NOT_USE_MONIKER}
	genStates = default -enabled;
}

HardwareHandshakeTitle = GenText {
	genAttributes = default +readOnly;
	text = "Hardware Handshaking Options:";
	textDisplayAttributes = singleLineText;
}

StopRemoteList = GenBooleanGroup {
	moniker = 'R', "Stop Remote:";
	children = DTREntry, RTSEntry;
	applyMsg = MSG_TERM_STOP_REMOTE_SIGNAL;
	destination = process;
	selectedBooleans = "mask SMC_RTS";
	hints	= {
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word	MSG_TERM_USER_STOP_REMOTE_SIGNAL
		}
	}
}

DTREntry = GenBoolean {
	moniker = "DTR";
	identifier = "mask SMC_DTR";
}

RTSEntry = GenBoolean {
	moniker = "RTS";
	identifier = "mask SMC_RTS";
}

StopLocalList = GenBooleanGroup {
	moniker = 'L', "Stop Local:";
	children = CTSEntry, DCDEntry, DSREntry;
	applyMsg = MSG_TERM_STOP_LOCAL_SIGNAL;
	destination = process;
	selectedBooleans = "mask SMS_CTS";
}

CTSEntry = GenBoolean {
	moniker = "CTS";
	identifier = "mask SMS_CTS";
}

DCDEntry = GenBoolean {
	moniker = "DCD";
	identifier = "mask SMS_DCD";
}

DSREntry = GenBoolean {
	moniker = "DSR";
	identifier = "mask SMS_DSR";
}


end ProtocolUI;


/* mini-Memo-like script editor UI */
start	ScriptEditorResource;

ScriptEditorPrimary = GenPrimary {
	moniker = "Script Editor"; /* will be changed by current script 
				      being edited */	
	children = ScriptEditorText, ScriptEditorButtons, 
			ScriptEditorCloseDialog;
/* 	children = ScriptEditorView, ScriptEditorButtons; */
}

/*
ScriptEditorView = GenView {
	output	= ScriptEditorVisContent;
	viewAttributes	= dragScrolling, focusable;
	horizIncrement = DEF_FONT_WIDTH;
	vertIncrement = DEF_FONT_HEIGHT;
	horizAttributes = scrollable, sizeAMultipleOfIncrement, 
			  noLargerThanContent;	
	vertAttributes = scrollable, sizeAMultipleOfIncrement,
			 noLargerThanContent;
	docRight = MAX_WIDTH;
	docBottom = MAX_HEIGHT;
	hints = { 
		HINT_DEFAULT_FOCUS,
		HINT_INITIAL_SIZE {
			SpecWidth <SST_PIXELS, INIT_WIDTH>
			SpecHeight <SST_PIXELS, INIT_HEIGHT>
		}
	}
}


ScriptEditorVisContent = VisContent {
	view = ScriptEditorView;
	right = MAX_WIDTH;
	bottom = MAX_HEIGHT;
	children = ScriptEditorText;
	hints = {
		HINT_DEFAULT_FOCUS
	}
} */

ScriptEditorButtons = GenInteraction {
	children = ScriptEditorSearchButton, ScriptEditorCloseButton; 
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_BOTTOM_JUSTIFY_CHILDREN
	}
}

ScriptEditorSearchButton= GenTrigger {
	moniker = "Search";
}


ScriptEditorCloseButton= GenTrigger {
	moniker = "Close";
/*	action = MSG_GEN_BRING_TO_TOP, TermPrimary; */
	action = MSG_TERM_SCRIPT_EDITOR_CLOSE, process;
}

ScriptEditorText = GenText {
	maxLength = MAX_SCRIPT_EDITOR_CHARS;
	hints = {
			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS, SCRIPT_EDITOR_WIDTH>
				SpecHeight <SST_LINES_OF_TEXT, SCRIPT_EDITOR_LINES >
			}
		}
}

ScriptEditorCloseDialog	= GenInteraction {
	children =	ScriptEditorClosedDialogText,
			ScriptEditorClosedDialogButtons;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	hints = { 
			HINT_NOT_MOVABLE,
			HINT_ORIENT_CHILDREN_VERTICALLY
		}
}

ScriptEditorClosedDialogText = GenText {
	genAttributes = default +readOnly;
	text = CloseDialogText;
}

ScriptEditorClosedDialogButtons = GenInteraction {
	children =	ScriptEditorCloseYesButton, 
			ScriptEditorCloseNoButton, 
			ScriptEditorCloseCancelButton;
	hints = { 
			HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

ScriptEditorCloseYesButton = GenTrigger {
	moniker = "Yes";
	genAttributes = default +signalInteractionComplete;
	action = MSG_TERM_SCRIPT_EDIT_DIALOG_YES, process;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

ScriptEditorCloseNoButton = GenTrigger {
	moniker = "No";
	genAttributes = default +signalInteractionComplete;
	action = MSG_TERM_SCRIPT_EDIT_DIALOG_NO, process;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

ScriptEditorCloseCancelButton = GenTrigger {
	moniker = "Cancel";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

chunk CloseDialogText = "Save changes to script?";


end	ScriptEditorResource;


start	StringResource, data;
chunk	DeleteConnectionStr = "Delete this connection?";
chunk	DeleteAccessPointStr = "Delete this access point?";

chunk	SaveScriptChangesStr = "Save changes to script?";

chunk	EnterAccessPointStr = "Please enter an Access Point.";
chunk	EnterAccessNumberStr = "Please enter a Telephone Number.";
chunk	EnterNetworkIDStr = "Please enter a Network ID.";
chunk	EnterNetworkPasswordStr = "Please enter a Password.";

chunk	MaxConnectionErrorStr = "There are already 20 connections.  Cannot create another.";

chunk	ScriptEditorWarningString = "WARNING: Changing your Network Login Script can make it impossible to connect to that network.  Do you wish to continue?";

chunk	LoseChangesString = "Lose changes to this connection?";

chunk	PleaseEnterconnectionNameString = "Please enter a Connection Name.";

end	StringResource;








