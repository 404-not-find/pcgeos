/***********************************************************************
 *
 *
 * PROJECT: Breadbox GeoPoint
 * FILE:      show.goc
 * AUTHOR:  John F. Howard,   08/03
 *
 * DESCRIPTION:
 *  This file has the show class code
 *
 *
 *
 ***********************************************************************/

 @include "geopoint.goh"

 @extern object SlideControl;
 @extern object ScrapView;
 @extern object NextTool;
 @extern object PrevTool;

 Rectangle			f_rect;
 GStateHandle		f_gstate;
 word					f_width;
 word					f_sleep;
 word					f_wipe;
 word					f_steps;
 word					f_delay;
 word					f_message;

/***********************************************************************
 *
 * FUNCTION: TestIfThreadShouldExit (void)
 *
 *
 * DESCRIPTION:	snagged from procthrd sample app
 *
 *
 ***********************************************************************/
void TestIfThreadShouldExit (void)
{
 SemaphoreError semError;

	/* Should this thread exit? (Has the user exited the app?) */
	semError = ThreadPTimedSem(g_transThreadShouldExit, 1);
	if ( semError == SE_TIMEOUT ) {
		/* Yes, ShouldExit semaphore was set: time to exit! */
		ThreadVSem(g_transThreadIsRunning);
		ThreadDestroy(THREAD_EXIT_DUE_TO_USER_NAV,
				NullOptr,
				0); 
		}
	else {
		/* Else, ShouldExit wasn't set: not time to exit.
		 * Release newThreadShouldExit semaphore. */
		ThreadVSem(g_transThreadShouldExit);
		}

} 


/***********************************************************************
 *
 * FUNCTION: DoAWipeOrFade (word transType)
 *
 *
 * DESCRIPTION:	transition done in own thread
 *
 *
 ***********************************************************************/
void DoAWipeOrFade (word transType)
{
 word		i;


	if (transType == TRANS_TYPE_WIPE) {
		while (f_width) {
			/* this kills the thread if the user tried to nav */
			TestIfThreadShouldExit();
			/* go on with the wipe */
			TimerSleep(f_sleep);
			if (f_wipe & WIPE_LEFT)  {
				GrFillRect(f_gstate, f_rect.R_left, f_rect.R_top,
											 f_rect.R_left + f_width, f_rect.R_bottom);
				f_rect.R_left += f_width;
				}
			if (f_rect.R_left >= f_rect.R_right) break;

			if (f_wipe & WIPE_BOTTOM)  {
				GrFillRect(f_gstate, f_rect.R_left, f_rect.R_bottom - f_width,
											 f_rect.R_right, f_rect.R_bottom);
				f_rect.R_bottom -= f_width;
				}
			if (f_rect.R_bottom <= f_rect.R_top) break;

			if (f_wipe & WIPE_RIGHT)  {
				GrFillRect(f_gstate, f_rect.R_right - f_width, f_rect.R_top,
											 f_rect.R_right, f_rect.R_bottom);
				f_rect.R_right -= f_width;
				}
			if (f_rect.R_right <= f_rect.R_left) break;

			if (f_wipe & WIPE_TOP)  {
				GrFillRect(f_gstate, f_rect.R_left, f_rect.R_top,
											 f_rect.R_right, f_rect.R_top + f_width);
				f_rect.R_top += f_width;
				}
			if (f_rect.R_top >= f_rect.R_bottom) break;
			}
		} /* end of wipe */

	else {  /* it's a fade  */
		for (i = SDM_0; i >= SDM_100; i -= f_steps) {
			/* this kills the thread if the user tried to nav */
			TestIfThreadShouldExit();
			/* go on with the fade */
			TimerSleep(f_sleep);
			GrSetAreaMaskSys(f_gstate, i);
			GrFillRect(f_gstate, f_rect.R_left, f_rect.R_top,
										f_rect.R_right, f_rect.R_bottom);
			}
		}
	@send SlideControl::MSG_SLIDE_SHOW_FINISH_NAV();


}

/***********************************************************************
 *
 * FUNCTION: InitNewTransThread (word transType)
 *
 *
 * DESCRIPTION:	start the transition
 *                transition done in own thread
 *
 ***********************************************************************/
word InitNewTransThread (word transType)
{


	/* New thread is running now: grab the IsRunning semaphore */
	ThreadPSem(g_transThreadIsRunning);

	TestIfThreadShouldExit();

	/* do the appropriate trans */
	DoAWipeOrFade(transType);

	/* Release the IsRunning semaphore */
	ThreadVSem(g_transThreadIsRunning);

	/* Have to return a word value, so why not transType? */
	return(transType);

}


 @classdecl  SlideShowClass;
/* ----------------------------------------------------------------------------
	SlideShowClass Code
-----------------------------------------------------------------------------*/

/***********************************************************************
 *
 * MESSAGE: MSG_META_EXPOSED for SlideShowClass
 *               (WindowHandle win)
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method SlideShowClass,	MSG_META_EXPOSED
{

	if (!pself->SSI_window) return;

	win = pself->SSI_window;
	@send process::MSG_SCRAPBOOK_DRAW_SLIDE_WINDOW(win);

}

/***********************************************************************
 *
 * MESSAGE: MSG_SLIDE_SHOW_START for SlideShowClass
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method SlideShowClass, MSG_SLIDE_SHOW_START
{
 GenReturnParams 		retValue;
 Rectangle				rect;
 WindowHandle			winHan;
 ColorQuad				color;
 word 					delay;


   if (!GetNumScraps()) return;

	/* get the field dimensions */
	@call application::MSG_GEN_GUP_QUERY(&retValue, GUQT_FIELD);
	WinGetWinScreenBounds(retValue.GRP_bp, &rect);

	/* get the slide's trans info */
	color = @call process::MSG_SCRAPBOOK_GET_SHOW_BACKGROUND();
	delay = @call process::MSG_SCRAPBOOK_GET_SLIDE_TRANSITION_DELAY(g_currentScrap);

	/* open the full screen window */
	winHan = WinOpen(retValue.GRP_bp,  // parentWinOrVidDr - push 3
								@SlideControl,  // inputRecipient
								@SlideControl,  // exposureRecipient
								color.CQ_info,  // colorFlags
								color.CQ_redOrIndex,  // redOrIndex
								color.CQ_green,  // green
								color.CQ_blue,  // blue
								(LAYER_PRIO_ON_TOP << WPF_LAYER_PRIORITY_OFFSET)
											 | WIN_PRIO_ON_TOP,  // flags
								0,  // layerID - push 1
								GeodeGetProcessHandle(), // owner - push 2
								0,  // *winReg - push 4&5
								rect.R_left, // axParam - push 9
								rect.R_top, // bxParam - push 8
								rect.R_right, // cxParam - push 7
								rect.R_bottom);  // dxParam - push 6

	/* save the window handle */
	pself->SSI_window = winHan;

	/* do a timer? */
	if (delay)
		pself->SSI_timerHan = TimerStart(
						  TIMER_EVENT_ONE_SHOT,
						  @SlideControl,
						  delay * 60,
						  MSG_SLIDE_SHOW_AUTO_ADVANCE,
						  delay * 60,
						  &pself->SSI_timerID);

	g_showInProg = TRUE;

	@send ScrapView::MSG_META_GRAB_FOCUS_EXCL();


}

/***********************************************************************
 *
 * MESSAGE: MSG_SLIDE_SHOW_END for SlideShowClass
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method SlideShowClass,	MSG_SLIDE_SHOW_END
{


	/* stop any timer */
	if (pself->SSI_timerHan)
		TimerStop(pself->SSI_timerHan, pself->SSI_timerID);

	/* close the window */
	if (pself->SSI_window) {
		WinClose(pself->SSI_window);
		pself->SSI_window = 0;
		}

	g_showInProg = FALSE;

}

/***********************************************************************
 *
 * MESSAGE: MSG_SLIDE_SHOW_PREVIOUS/NEXT for SlideShowClass
 *                (Boolean abort)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method SlideShowClass, MSG_SLIDE_SHOW_PREVIOUS, MSG_SLIDE_SHOW_NEXT
{
 word					trans;
 ColorQuad			color;
 word					fadeSpeed;
 word					slide, numSlides;
 word 		fadeSpeeds[] = {8, 5, 1};
 word			fadeSteps[] = {1, 2, 8};
 word			wipeSizes[] = {7, 6, 4};
 word			wipeSpeeds[] = {6, 4, 2};


	if (!pself->SSI_window) return;
	f_message = message;

	/* stop any timer */
	if (pself->SSI_timerHan)
		TimerStop(pself->SSI_timerHan, pself->SSI_timerID);

	numSlides = GetNumScraps();
	/* should we end the show? */
	if (!(@call process::MSG_SCRAPBOOK_GET_CYCLE_THRU_MODE())
			&& message == MSG_SLIDE_SHOW_NEXT
			&& g_currentScrap == numSlides - 1) {
		@send oself::MSG_SLIDE_SHOW_END();
		return;
		}

	/* OK get the next/prev slide's trans info */
	if (message == MSG_SLIDE_SHOW_PREVIOUS) {
		if (g_currentScrap == 0) slide = numSlides - 1;
		else slide = g_currentScrap - 1;
		}
	else {
		slide = g_currentScrap + 1;
		if (slide == numSlides) slide = 0;
		}
	color = @call process::MSG_SCRAPBOOK_GET_SHOW_BACKGROUND();
	f_delay = @call process::MSG_SCRAPBOOK_GET_SLIDE_TRANSITION_DELAY(slide);
	if (!abort)
		trans = @call process::MSG_SCRAPBOOK_GET_SLIDE_TRANSITION_TYPE(g_currentScrap);
	else trans = TRANS_TYPE_NONE;
	if (trans)
		fadeSpeed =  @call process::MSG_SCRAPBOOK_GET_SLIDE_TRANSITION_SPEED(
																					g_currentScrap);
		if (trans == TRANS_TYPE_WIPE)
			f_wipe =  @call process::MSG_SCRAPBOOK_GET_SLIDE_TRANSITION_WIPE(
																					g_currentScrap);

	/* clear the window with selected transition */
	WinGetWinScreenBounds(pself->SSI_window, &f_rect);
	f_rect.R_right++;
	f_rect.R_bottom++;
	f_gstate = GrCreateState(pself->SSI_window);
   /* the color that gets wiped or faded in */
	GrSetAreaColor(f_gstate, color.CQ_info,
								color.CQ_redOrIndex,
								color.CQ_green,
								color.CQ_blue);

	switch (trans) {
		case TRANS_TYPE_WIPE:
			/* pretty much the wipe code from screen saver */
			f_sleep = wipeSpeeds[fadeSpeed];
			f_steps = wipeSizes[fadeSpeed];
			f_width = f_rect.R_right - f_rect.R_left;
			f_width = (f_width >> f_steps);  // divides by 16, 64 or 128
			f_width++;                   // protects against zero
			/* create a new thread to do the wipe */
			ThreadCreate(PRIORITY_STANDARD,
				  TRANS_TYPE_WIPE, /* set transType  */
				  InitNewTransThread,	/* routine to run */
				  3076, /* use 3k stack, since drawing to UI object */
				  GeodeGetProcessHandle());
			break;
		case TRANS_TYPE_FADE:
			/* the fade code from screen saver */
			f_sleep = fadeSpeeds[fadeSpeed];
			f_steps = fadeSteps[fadeSpeed];
			/* create a new thread to do the fade */
			ThreadCreate(PRIORITY_STANDARD,
				  TRANS_TYPE_FADE,
				  InitNewTransThread,
				  3076,
				  GeodeGetProcessHandle());

			break;
		default:
			/* SSTT_CLEAR - no wipe/fade at all */
			@send oself::MSG_SLIDE_SHOW_FINISH_NAV();
			break;
		}

}

/***********************************************************************
 *
 * MESSAGE: MSG_SLIDE_SHOW_FINISH_NAV for SlideShowClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method SlideShowClass, MSG_SLIDE_SHOW_FINISH_NAV
{

	GrDestroyState(f_gstate);

	/* do a timer */
	if (f_delay)
		pself->SSI_timerHan = TimerStart(
						  TIMER_EVENT_ONE_SHOT,
						  @SlideControl,
						  f_delay * 60,
						  MSG_SLIDE_SHOW_AUTO_ADVANCE,
						  f_delay * 60,
						  &pself->SSI_timerID);

	if (f_message == MSG_SLIDE_SHOW_PREVIOUS)
		@send process::MSG_SCRAPBOOK_PREV_NEXT(@PrevTool);
	else
		@send process::MSG_SCRAPBOOK_PREV_NEXT(@NextTool);

	/* invalidate our window to force redraw */
	WinInvalReg(pself->SSI_window, 0, 0, 0, MAX_COORD, MAX_COORD);

}

/***********************************************************************
 *
 * MESSAGE: MSG_SLIDE_SHOW_AUTO_ADVANCE for SlideShowClass
 *
 * DESCRIPTION:	Since the timer can't send a message with params
 *                we'll do it this way...
 *
 ***********************************************************************/
@method SlideShowClass, MSG_SLIDE_SHOW_AUTO_ADVANCE
{

	@send oself::MSG_SLIDE_SHOW_NEXT(FALSE);

}

/***********************************************************************
 *
 * MESSAGE: MSG_META_START_MOVE_COPY for SlideShowClass
 *          MouseReturnParams *retVal
 *			  	sword xPosition,
 *			   sword yPosition,
 *			   word inputState;
 *
 * DESCRIPTION:	next slide if right button pressed
 *
 *
 ***********************************************************************/
@method SlideShowClass, MSG_META_START_MOVE_COPY
{

	@send oself::MSG_SLIDE_SHOW_NEXT(StopTransition());

	retVal->flags = MRF_PROCESSED;

}

/***********************************************************************
 *
 * MESSAGE: MSG_META_START_SELECT for SlideShowClass
 *          MouseReturnParams *retVal
 *			  	sword xPosition,
 *			   sword yPosition,
 *			   word inputState;
 *
 * DESCRIPTION:	prev slide if left button pressed
 *
 *
 ***********************************************************************/
@method SlideShowClass, MSG_META_START_SELECT
{

	@send oself::MSG_SLIDE_SHOW_PREVIOUS(StopTransition());

	retVal->flags = MRF_PROCESSED;

}



