/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
MODULE:		Main		
FILE:		mainInit.asm

AUTHOR:		Ted H. Kim, March 4, 1992

ROUTINES:
	Name			Description
	----			-----------
	RolodexOpenApp		Does initial work for launching an application 
	AddToTextSelectGCNList	Add GeoDex to text select state change GCNList
	ReadInViewMode		Read in view mode setting from .INI file
	RolodexApplicationAttach Deal with user level stuff
	RolodexApplicationLoadOptions
				Read in user level settings from .INI file
	RolodexApplicationUpdateAppFeatures
				Update feature states
	RolodexApplicationSetUserLevel
				Set the new user level
	SetViewMode		Set the current view mode to card view
	RolodexApplicationInitiateFineTune
				Bring up the fine tune DB
	RolodexApplicationFineTune
				Set the fine tune settings
	RolodexApplicationResetOptions
				Reset the options menu
	CreateDataBlock		Create a data block to be sent to GCN list
	SendDataBlockToGCNList	Send the data block to GCN list
	RolodexInstallToken	Install tokens
	RolodexRestoreState	Restores variables saved with state file
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial revision

DESCRIPTION:
	Contains various routines called when GeoDex is starting.	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "cdex.goh"

@classdecl	RolodexProcessClass, neverSaved;
	/* in misc\view.goc */
	@extern method RolodexProcessClass, MSG_ROLODEX_CHANGE_VIEW;
	/* in misc\search.goc */
	@extern method RolodexProcessClass, MSG_ROLODEX_REQUEST_ENTRY_MONIKER;
	@extern method RolodexProcessClass, MSG_ROLODEX_FIND_RECORD;
	@extern method RolodexProcessClass, MSG_ROLODEX_EXPAND_TO_BOTH_VIEW;
	/* in main\exit.goc */
	@extern method RolodexProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION;
	/* in main\geodex.goc */
	@extern method	RolodexProcessClass, MSG_ROLODEX_NOTES;
	@extern method	RolodexProcessClass, MSG_ROLODEX_PREVIOUS;
	@extern method	RolodexProcessClass, MSG_ROLODEX_NEXT;
	@extern method	RolodexProcessClass, MSG_ROLODEX_NEW;
	@extern method	RolodexProcessClass, MSG_ROLODEX_CR;
	/* in main\edit.goc */
	@extern method RolodexProcessClass, MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED;
	@extern method RolodexProcessClass, MSG_ROLODEX_DELETE;
	@extern method RolodexProcessClass, MSG_ROLODEX_COPY_RECORD;
	@extern method RolodexProcessClass, MSG_ROLODEX_PASTE_RECORD;
	@extern method RolodexProcessClass, MSG_ROLODEX_UNDO;
	/* in file\document.goc */
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_PHYSICAL_SAVE;
	@extern method RolodexProcessClass, MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED;
	/* in dial\phone.goc */
	@extern method RolodexProcessClass, MSG_ROLODEX_PHONE_DOWN_TEXT;
	@extern method RolodexProcessClass, MSG_ROLODEX_PHONE_DOWN;
	@extern method RolodexProcessClass, MSG_ROLODEX_PHONE_UP;
	/* in db\record.goc */
	@extern method RolodexProcessClass, MSG_ROLODEX_FIND_LETTER;
	/* in dial\dutils.goc */
	@extern method RolodexProcessClass, MSG_ROLODEX_APPLY_DIAL_OPTIONS;


@classdecl	RolodexApplicationClass;


@extern chunk DexListString1;
@extern chunk DexListString2;
@extern chunk DexListString3;
@extern chunk DexListString4;
@extern chunk DexListString5;
@extern chunk DexListString6;
@extern chunk DexListString7;
@extern chunk DexListString8;
@extern chunk DexListString9;
@extern chunk DexListString10;
@extern chunk DexListString11;
@extern chunk DexListString12;
@extern chunk DexListString13;
@extern chunk DexListString14;
@extern chunk DexListString15;
@extern chunk DexListString16;
@extern chunk DexListString17;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ReadInViewMode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Reads in initial view mode from GEOS.INI file.

CALLED BY:	RolodexOpenApp

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version
	jfh	12/07/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void ReadInViewMode(void)
{
 word			viewMode, features;
 Boolean		error;


	/* see if we have a view menu at the user level we're in */
	error = InitFileReadInteger("address book", "features", &features);
	if (!error) {
		/* check to see if the view menu feature is enabled */
		if (!(features & GF_VIEW_MENU)) return;
		}
	/* if no features key or there is a view menu at our level then
		read in the view mode from .ini file */
	/* assume card view */
	g_displayStatus = CARD_VIEW;
	error = InitFileReadInteger("address book", "view", &viewMode);
	if (!error) {
		if (viewMode == BROWSE_VIEW) {
			/* do the ax thing
			mov	ax, -1   */
			RolodexBrowse(TRUE);
			}
		else if (viewMode == BOTH_VIEW) {
			RolodexBoth();
			}
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CreateDataBlock
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Create a data block that will be sent to the GCN list.

CALLED BY:	RolodexOpenApp

PASS:		nothing

RETURN:		bx - handle of data block

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	6/92		Initial version
	jfh	12/7/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
MemHandle CreateDataBlock(void)
{
 MemHandle		mh;
 ChunkHandle	ch;
 ImpexMapFileInfoHeader		*header;
 word				i, len;
 char				dexText[50];
 char				*text;
 optr				textOptr[] = {@DexListString1, @DexListString2, @DexListString3,
									  @DexListString4, @DexListString5, @DexListString6,
									  @DexListString7, @DexListString8, @DexListString9,
									  @DexListString10, @DexListString11, @DexListString12,
									  @DexListString13, @DexListString14, @DexListString15,
									  @DexListString16, @DexListString17};


	/* allocate a data block */
	mh = MemAllocLMem(LMEM_TYPE_GENERAL, sizeof(ImpexMapFileInfoHeader));
	/* mark it shareable */
	MemModifyFlags(mh, HF_SHARABLE, 0);
	/* lock it */
	header = MemLock(mh);

	/* create a chunk array */
	ch = ChunkArrayCreate(mh, 0, 0, 0);

	/* save the info in the Impex header for Impex field mapping */
	header->IMFIH_fieldChunk = ch;
	header->IMFIH_numFields = GEODEX_NUM_FIELDS + NUM_PHONE_TYPE_FIELDS;
	header->IMFIH_flag = DFNU_FIXED;

	/* lock the strings block*/
	MemLock (OptrToHandle(textOptr[0]));

	/* fill the array */
	for (i = 0; i < GEODEX_NUM_FIELDS + NUM_PHONE_TYPE_FIELDS; i++) {
		/* grab the next string */
		strcpy(dexText, LMemDeref(textOptr[i]));
		len = strlen(dexText);
		/*  add a new element */
		text = ChunkArrayAppendHandles(mh, ch, len + 1);
		/* copy the null termed string to it */
		strncpy(text, dexText, len + 1);
		}

	MemUnlock (OptrToHandle(textOptr[0]));
	MemUnlock(mh);

   return(mh);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SendDataBlockToGCNList
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sends newly created data block to the GCN list.

CALLED BY:	RolodexOpenApp

PASS:		bx - handle of data block to be sent

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	6/92		Initial version
   jfh	12/06/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void SendDataBlockToGCNList(MemHandle mh)
{
 EventHandle	msg;


	/* Create the classed event */
	msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
					 MANUFACTURER_ID_GEOWORKS, GWNT_MAP_APP_CHANGE,  mh);


	/* Setup the GCNListMessageParams & send it!! */
	@call process::MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST(
						 GCNLSF_SET_STATUS, msg, mh,
						 GAGCNLT_APP_TARGET_NOTIFY_APP_CHANGE,
						 MANUFACTURER_ID_GEOWORKS);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexOpenApp 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Does a lot of initial work for launching an application

CALLED BY:	UI (MSG_GEN_PROCESS_OPEN_APPLICATION)

PASS:		bp - handle of extra state block, or 0 if none 
		cx - AppAttachFlags
                dx - Handle of AppLaunchBlock, or 0 if none.
 *               (AppAttachFlags	attachFlags,
 *			  MemHandle		launchBlock,
 *			  MemHandle 		extraState)

RETURN:		nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/10/89	Initial version
	jfh	12/13/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	RolodexProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
 MemHandle		mh;


	/*  ignore all input */
	g_ignoreInput = TRUE;

	/* read in & set view mode option from .ini */
	ReadInViewMode();

	@callsuper();

	/* send notification data block to Impex Mapping Controller */
	/* create the data block */
	mh = CreateDataBlock();
	/* initialize the reference count to one*/
	MemInitRefCount(mh, 1);
	/* send the data block */
	SendDataBlockToGCNList(mh);

	/* get the process handle and save it away - XXX do we need to?
	call    GeodeGetProcessHandle
	mov	ds:[processID], bx	

	/* add GeoDex to clipboard notification list */
	ClipboardAddToNotificationList(HandleToOptr(GeodeGetProcessHandle()));

	/* initialize other stuff XXX
	call	InitComUse		; initialize serial port */

	/* add GeoDex to text select GCNList */
	@call GeodeGetAppObject(0)::MSG_META_GCN_LIST_ADD (
					HandleToOptr(GeodeGetProcessHandle()),
					GAGCNLT_APP_TARGET_NOTIFY_SELECT_STATE_CHANGE,
					MANUFACTURER_ID_GEOWORKS);

}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexInstallToken
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Install tokens
CALLED BY:	MSG_GEN_PROCESS_INSTALL_TOKEN

PASS:		none
RETURN:		none
DESTROYED:	ax, cx, dx, si, di

PSEUDO CODE/STRATEGY:
KNOWN BUGS/SIDE EFFECTS/IDEAS:
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	eca	2/19/90		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RolodexInstallToken	method GeoDexClass, MSG_GEN_PROCESS_INSTALL_TOKEN
	
	; Call our superclass to get the ball rolling...
	
	mov	di, offset GeoDexClass
	call	ObjCallSuperNoLock

	; install datafile token

	mov	ax, ('a') or ('d' shl 8)	; ax:bx:si = token used for
	mov	bx, ('b') or ('k' shl 8)	;	datafile
	mov	si, MANUFACTURER_ID_GEOWORKS
	call	TokenGetTokenInfo		; is it there yet?
	jnc	done				; yes, do nothing
	mov	cx, handle DatafileMonikerList	; cx:dx = OD of moniker list
	mov	dx, offset DatafileMonikerList
	clr	bp				; moniker list is in data
						;  resource, so no relocation
	call	TokenDefineToken		; add icon to token database
done:
	ret

RolodexInstallToken	endm

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexRestoreState
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Restores variables that were saved with state file.

CALLED BY:	UI (MSG_GEN_PROCESS_RESTORE_FROM_STATE)

PASS:		bp - handle of data block that contains saved variables
		es - segment address of core block
 *               (AppAttachFlags	attachFlags,
 *			  MemHandle		launchBlock,
 *			  MemHandle 		extraState)

RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Lock the data block
	Read in data into udata segment of each module
	Free the data block

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/10/89	Initial version
   jdh	12/15/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	RolodexProcessClass, MSG_GEN_PROCESS_RESTORE_FROM_STATE
{
 SaveStateStruct	*state;


	/* set the flag */
	g_startFromScratch = TRUE;

	@callsuper();

	/* is there a block saved? if not, skip */
	if (extraState)  {
		/* lock the state block */
		state = MemLock(extraState);
		/* read state block into udata */
		g_curRecord = state->SS_curRecord;
		g_curOffset = state->SS_curOffset;
		strncpy(g_curLetter, state->SS_curLetter, MAX_TAB_LETTER_LENGTH);
		g_curLetterLen = state->SS_curLetterLen;
		g_recStatus = state->SS_recStatus;
		g_curPhoneType = state->SS_curPhoneType;
		g_displayStatus = state->SS_displayStatus;
		g_dirtyFields = state->SS_dirtyFields;
		/* unlock state data block */
		MemUnlock(extraState);
		}

}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplicationLoadOptions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Load in the features settings from .INI file.	

CALLED BY:	MSG_META_LOAD_OPTIONS

PASS:		*ds:si - instance data
		es - segment of GeoDexClass
		ax - the message

RETURN:		nothing

DESTROYED:	bx, si, di, ds, es (message handler)

SIDE EFFECTS:

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	10/92		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SettingTableEntry	struct
    STE_features	GeoDexFeatures
SettingTableEntry	ends

settingsTable	SettingTableEntry	\
 <INTRODUCTORY_FEATURES>,
 <BEGINNING_FEATURES>,
 <INTERMEDIATE_FEATURES>,
 <INTERMEDIATE_FEATURES>

featuresKey	char	"features", 0
viewString	char	"view", 0
dial1String	char	"dial1", 0
dial2String	char	"dial2", 0

RolodexApplicationLoadOptions	method dynamic	RolodexApplicationClass, 
						MSG_META_LOAD_OPTIONS,
						MSG_META_RESET_OPTIONS
	mov	di, offset RolodexApplicationClass
	call	ObjCallSuperNoLock

	; if no features settings are stored then use
	; defaults based on the system's user level

	mov	bx, offset featuresKey
	call	GetIniCategory
	jnc	checkView

	; no .ini file settings -- set objects correctly based on level

	call	UserGetDefaultLaunchLevel	;ax = UserLevel (0-3)
	mov	bl, size SettingTableEntry
	mul	bl
	mov_tr	di, ax				;calculate array offset

	push	si
	push	cs:[settingsTable][di].STE_features	;save default settings

	; get the currently selected features

	GetResourceHandleNS	UserLevelList, bx
	mov	si, offset UserLevelList
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov     di, mask MF_CALL or mask MF_FIXUP_DS
	call    ObjMessage
	pop	cx

	; are they equal to the default settings?

	cmp	ax, cx
	jz	restoreSI0			; if so, skip

	; if not equal, then we must change the feature settings

	push	cx

	; first, change the settings in GenItemGroup

	mov	ax, MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	clr	dx
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; mark the object modified

	mov	cx, 1					
	mov	ax, MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; now apply the state change

	mov	ax, MSG_GEN_APPLY
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage
	pop	ax				; feature settings
restoreSI0:
	pop	si
checkView:
	mov	es:[appFeatures], ax		;save the features bits

	; get the value of 'view' field from .ini file 

	mov	bx, offset viewString
	call	GetIniCategory
	jnc	checkDial1			; if field exits, skip 

	; no .ini setting for 'view' field - use default setting
if _OPTIONS_MENU_VIEW
	push	si

	; get the current setting of start up view list

	GetResourceHandleNS	StartUpViewList, bx
	mov	si, offset StartUpViewList
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov     di, mask MF_CALL or mask MF_FIXUP_DS
	call    ObjMessage

	cmp	ax, CARD_VIEW		; is it equal to the default setting?
	jz	restoreSI2		; if so, skip

	; if not equal, change it to the default setting

	mov	cx, CARD_VIEW
	mov	ax, MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	clr	dx
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; mark the object modified 

	mov	cx, 1					
	mov	ax, MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; apply the state change

	mov	ax, MSG_GEN_APPLY
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage
restoreSI2:
	pop	si

endif 	;if _OPTIONS_MENU_VIEW

checkDial1:
	; get the value of 'dial1' field from .ini file 

	mov	bx, offset dial1String
	call	GetIniCategory
	jnc	checkDial2			; if field exits, skip

	; no .ini setting for 'dial1' field - use default setting

	push	si

	; get the current setting of phone list option

	GetResourceHandleNS	PhoneListOption, bx
	mov	si, offset PhoneListOption
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov     di, mask MF_CALL or mask MF_FIXUP_DS
	call    ObjMessage

	tst	ax			; is it equal to the default setting?
	jnz	restoreSI3		; if so, skip

	; if not equal, change it to the default setting

	mov	cx, 1
	mov	ax, MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	clr	dx
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; mark the object not modified so as not to enable 
	; or disable the apply trigger

	clr	cx					
	mov	ax, MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage
restoreSI3:
	pop	si
checkDial2:
	; get the value of 'dial2' field from .ini file 

	mov	bx, offset dial2String
	call	GetIniCategory
	jnc	done			; if field exists, skip

	; no .ini setting for 'dial2' field - use default setting
	; get the current setting of dial options

	GetResourceHandleNS	DialingOptions, bx
	mov	si, offset DialingOptions
	mov	ax, MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS
	mov     di, mask MF_CALL or mask MF_FIXUP_DS
	call    ObjMessage

	cmp	ax, mask DOF_CONFIRM 	; are they equal to default settings?
	jz	done			; if so, exit

	; if not equal, change them to the default settings

	mov	cx, mask DOF_CONFIRM
	mov	ax, MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE
	clr	dx
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage

	; mark the object not modified so as not to enable 
	; or disable the apply trigger

	clr	cx
	mov	dx, mask DOF_RESET or mask DOF_CONFIRM
	mov	ax, MSG_GEN_BOOLEAN_GROUP_SET_GROUP_MODIFIED_STATE
	mov     di, mask MF_FIXUP_DS
	call    ObjMessage
done:
	ret
RolodexApplicationLoadOptions	endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetIniCategory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Read in the integer value of geodex key field from
		the .ini file.

CALLED BY:	UTILITY	

PASS:		*ds:si - instance data
		bx - offset to the key string

RETURN:		carry clear if successful
			ax - value
		else carry set
			ax - unchanged

DESTROYED:	ax, cx, dx, bp

SIDE EFFECTS:	none

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	1/93		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GetIniCategory	proc	near	uses	si
	.enter

	sub	sp, INI_CATEGORY_BUFFER_SIZE
	movdw	cxdx, sssp		; cx:dx - buffer for .ini category 
	mov	ax, MSG_META_GET_INI_CATEGORY
	call	ObjCallInstanceNoLock	; read in category string into the buf.
	mov	ax, sp
	push	si, ds
	segmov	ds, ss
	mov_tr	si, ax			; ds:si - category string
	mov	cx, cs
	mov	dx, bx			; cx:dx - key string
	call	InitFileReadInteger	; ax - value
	pop	si, ds
	mov	bp, sp
	lea	sp, ss:[bp+INI_CATEGORY_BUFFER_SIZE]	; restore sp

	.leave
	ret
GetIniCategory	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplicationUpdateAppFeatures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Updates feature states

CALLED BY:	MSG_GEN_APPLICATION_UPDATE_APP_FEATURES

PASS:		*ds:si - instance data
		es - segment of RolodexApplicationClass
		ax - the message
		ss:bp - GenAppUpdateFeaturesParams

RETURN:		nothing

DESTROYED:	bx, si, di, ds, es (message handler)

SIDE EFFECTS:

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK			Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

; This table has an entry corresponding to each feature bit.  The entry is a
; point to the list of objects to turn on/off

usabilityTable	fptr	\
	notesFeatureList,	;GF_NOTES_FEATURE
	geoPlannerList,		;GF_GEOPLANNER
	utilMenuList,		;GF_UTILS_MENU
	viewMenuList,		;GF_VIEW_MENU
	searchFeatureList,	;GF_SEARCH_FEATURES
if _QUICK_DIAL
	sortFeatureList,		;GF_SORT_OPTION
	dialFeatureList		;GF_DIAL_OPTION
else
	sortFeatureList		;GF_SORT_OPTION
endif

notesFeatureList	label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple PrintNotes
	GenAppMakeUsabilityTuple NotesTrigger, end

geoPlannerList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple CalendarTrigger, end

utilMenuList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple UtilMenu, end

if _OPTIONS_MENU_VIEW
viewMenuList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple ShowMenu 
	GenAppMakeUsabilityTuple StartUpViewOption, end
else
viewMenuList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple ShowMenu, end
endif	;if _OPTIONS_MENU_VIEW

searchFeatureList	label	GenAppUsabilityTuple
ifdef GPC
	GenAppMakeUsabilityTuple SearchPrompt, reversed
endif
	GenAppMakeUsabilityTuple SearchOptionList, end

sortFeatureList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple SortOptions, end

if _QUICK_DIAL
dialFeatureList		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple PhoneOptions, end
endif

levelTable		label	GenAppUsabilityTuple
	GenAppMakeUsabilityTuple RolUIDocControl, recalc
        GenAppMakeUsabilityTuple RolodexSearchControl, recalc, end

RolodexApplicationUpdateAppFeatures	method dynamic	RolodexApplicationClass,
					MSG_GEN_APPLICATION_UPDATE_APP_FEATURES
	; call general routine to update usability

	mov	ss:[bp].GAUFP_table.segment, cs
	mov	ss:[bp].GAUFP_table.offset, offset usabilityTable
	mov	ss:[bp].GAUFP_tableLength, length usabilityTable
	mov     ss:[bp].GAUFP_levelTable.segment, cs
	mov     ss:[bp].GAUFP_levelTable.offset, offset levelTable
	mov     ax, MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE
	call	ObjCallInstanceNoLock
	ret
RolodexApplicationUpdateAppFeatures	endm

ifdef GPC
RolodexApplicationSetAppFeatures	method	dynamic	RolodexApplicationClass,
					MSG_GEN_APPLICATION_SET_APP_FEATURES
	
	push	ds
	GetResourceSegmentNS	dgroup, es
	test	es:[gpcFeatures], mask GPCNF_UTIL_MENU
	jnz	leaveUtil
	andnf	cx, not mask GF_UTILS_MENU
leaveUtil:
	test	es:[gpcFeatures], mask GPCNF_SORT_OPTIONS
	jnz	leaveSort
	andnf	cx, not mask GF_SORT_OPTION
leaveSort:
	test	es:[gpcFeatures], mask GPCNF_DIAL_OPTIONS
	jnz	leaveDial
	andnf	cx, not mask GF_DIAL_OPTION
leaveDial:
	pop	ds
	mov	di, offset RolodexApplicationClass
	call	ObjCallSuperNoLock
	ret
RolodexApplicationSetAppFeatures	endm

;
; ignore when attaching
;
if not _NDO1998
RolodexApplicationOptionsChanged	method	dynamic RolodexApplicationClass,
					MSG_ROLODEX_OPTIONS_CHANGED
	test	ds:[di].GAI_states, mask AS_ATTACHING
	jnz	done
	mov	ax, MSG_GEN_APPLICATION_OPTIONS_CHANGED
	GOTO	ObjCallInstanceNoLock
done:
	ret
RolodexApplicationOptionsChanged	endm
endif

;
; in case we are used before app obj gets META_ATTACH
;
RolodexApplicationGetIniCat	method	dynamic RolodexApplicationClass,
					MSG_META_GET_INI_CATEGORY
	mov	di, offset RolodexApplicationClass
	call	ObjCallSuperNoLock
	jnc	exit			; not found
	push	cx, dx
	movdw	esdi, cxdx
	cmp	{char}es:[di], C_NULL
	je	done
	mov	cx, -1
	clr	ax
	repne scasb			; es:di points past null
	cmp	{char}es:[di-2], '0'	; CUI name?
	jne	done			; nope, don't care
	call	UserGetDefaultUILevel	; ax = UIIL
	cmp	ax, UIIL_INTRODUCTORY
	je	done			; CUI, leave it
	mov	{char}es:[di-2], C_NULL	; else, make AUI name
done:
	pop	cx, dx
	stc				; indicate found
exit:
	ret
RolodexApplicationGetIniCat	endm
endif


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplicationSetUserLevel
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the user level.

CALLED BY:	MSG_ROLODEX_APPLICATION_SET_USER_LEVEL

PASS:		*ds:si - instance data
		es - segment of RolodexApplicationClass
		ax - the message
		cx - user level (as feature bits)

RETURN:		nothing

DESTROYED:	bx, si, di, ds, es (message handler)

SIDE EFFECTS:

PSEUDO CODE/STRATEGY:
	NOTE: the user level set here is expressed in terms of feature bits

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	10/92		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RolodexApplicationSetUserLevel	method dynamic	RolodexApplicationClass,
					MSG_ROLODEX_APPLICATION_SET_USER_LEVEL
	mov	es:[appFeatures], cx		;save the features bits
	mov	ax, cx				;ax <- new features
	;
	; find the corresponding bar states and level
	;
	push	si
	clr	di, bp
	mov	cx, (length settingsTable)	;cx <- # entries
	mov	dl, UIIL_INTRODUCTORY		;dl <- UIInterfaceLevel
	mov	dh, dl				;dh <- nearest so far (level)
	mov	si, 16				;si <- nearest so far (# bits)
findLoop:
	cmp	ax, cs:settingsTable[di].STE_features
	je	found
	push	ax, cx
	;
	; See how closely the features match what we're looking for
	;
	mov	bx, ax
	xor	bx, cs:settingsTable[di].STE_features
	clr	ax				;no bits on
	mov	cx, 16
countBits:
	ror	bx, 1
	jnc	nextBit				;bit on?
	inc	ax				;ax <- more bit
nextBit:
	loop	countBits

	cmp	ax, si				;fewer differences?

	jae	nextEntry			;branch if not fewer difference
	;
	; In the event we don't find a match, use the closest
	;
	mov	si, ax				;si <- nearest so far (# bits)
	mov	dh, dl				;dh <- nearest so far (level)
	mov	bp, di				;bp <- corresponding entry
nextEntry:
	pop	ax, cx
	inc	dl				;dl <- next UIInterfaceLevel
	add	di, (size SettingTableEntry)
	loop	findLoop
	;
	; No exact match -- set the level to the closest
	;
	mov	dl, dh				;dl <- nearest level
	mov	di, bp				;di <- corresponding entry
	;
	; Set the app features
	;
found:
	pop	si
	clr	dh				;dx <- UIInterfaceLevel
	push	ax
	push	dx
	mov	cx, ax				;cx <- features to set
	mov	ax, MSG_GEN_APPLICATION_SET_APP_FEATURES
	call	ObjCallInstanceNoLock
	pop	cx				;cx <- UIInterfaceLevel to set
	mov	ax, MSG_GEN_APPLICATION_SET_APP_LEVEL
	call	ObjCallInstanceNoLock
	pop	ax
	;
	; if not attaching, save after user level change
	;
	mov	di, ds:[si]
	add	di, ds:[di].Gen_offset
	test	ds:[di].GAI_states, mask AS_ATTACHING
	jnz	done
	push	ax
ifdef PRODUCT_NDO2000
	mov	ax, MSG_GEN_APPLICATION_OPTIONS_CHANGED
	call	ObjCallInstanceNoLock
else
	mov	ax, MSG_META_SAVE_OPTIONS
	call	UserCallApplication
endif
	pop	ax
done:
	call	SetViewMode
	ret
RolodexApplicationSetUserLevel	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	RolodexApplicationChangeUserLevel --
		MSG_ROLODEX_APPLICATION_CHANGE_USER_LEVEL
						for RolodexApplicationClass

DESCRIPTION:	User change to the user level

PASS:
	*ds:si - instance data
	es - segment of RolodexApplicationClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	11/16/92		Initial version

------------------------------------------------------------------------------@
RolodexApplicationChangeUserLevel	method dynamic	RolodexApplicationClass,
					MSG_ROLODEX_APPLICATION_CHANGE_USER_LEVEL

	push	si
	mov	ax, MSG_GEN_GUP_INTERACTION_COMMAND
	mov	cx, IC_APPLY
	GetResourceHandleNS	SetUserLevelDialog, bx
	mov	si, offset SetUserLevelDialog
	clr	di
	call	ObjMessage
	pop	si

	ret

RolodexApplicationChangeUserLevel	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	RolodexApplicationCancelUserLevel --
		MSG_ROLODEX_APPLICATION_CANCEL_USER_LEVEL
						for RolodexApplicationClass

DESCRIPTION:	Cancel User change to the user level

PASS:
	*ds:si - instance data
	es - segment of RolodexApplicationClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	11/16/92		Initial version

------------------------------------------------------------------------------@
RolodexApplicationCancelUserLevel	method dynamic	RolodexApplicationClass,
					MSG_ROLODEX_APPLICATION_CANCEL_USER_LEVEL

	mov	cx, ds:[di].GAI_appFeatures

	GetResourceHandleNS	UserLevelList, bx
	mov	si, offset UserLevelList
	mov	ax, MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	clr	dx
	clr	di
	call	ObjMessage

	GetResourceHandleNS	SetUserLevelDialog, bx
	mov	si, offset SetUserLevelDialog
	mov	ax, MSG_GEN_GUP_INTERACTION_COMMAND
	mov	cx, IC_DISMISS
	clr	di
	call	ObjMessage

	ret

RolodexApplicationCancelUserLevel	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	RolodexApplicationQueryResetOptions --
		MSG_ROLODEX_APPLICATION_QUERY_RESET_OPTIONS
						for RolodexApplicationClass

DESCRIPTION:	Make sure that the user wants to reset options

PASS:
	*ds:si - instance data
	es - segment of RolodexApplicationClass

	ax - The message

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	11/24/92		Initial version

------------------------------------------------------------------------------@
RolodexApplicationQueryResetOptions	method dynamic	RolodexApplicationClass,
				MSG_ROLODEX_APPLICATION_QUERY_RESET_OPTIONS

	; ask the user if she wants to reset the options

	push	ds:[LMBH_handle]
	clr	ax
	pushdw	axax				;SDOP_helpContext
	pushdw	axax				;SDOP_customTriggers
	pushdw	axax				;SDOP_stringArg2
	pushdw	axax				;SDOP_stringArg1
	GetResourceHandleNS	ResetOptionsQueryString, bx
	mov	ax, offset ResetOptionsQueryString
	pushdw	bxax
	mov	ax, CustomDialogBoxFlags <0, CDT_QUESTION, GIT_AFFIRMATION, 0>
	push	ax
	call	UserStandardDialogOptr
	pop	bx
	call	MemDerefDS
	cmp	ax, IC_YES
	jnz	done

	mov	ax, MSG_META_RESET_OPTIONS
	call	ObjCallInstanceNoLock
done:
	ret

RolodexApplicationQueryResetOptions	endm

COMMENT @----------------------------------------------------------------------

MESSAGE:	RolodexApplicationUserLevelStatus --
		MSG_ROLODEX_APPLICATION_USER_LEVEL_STATUS
						for RolodexApplicationClass

DESCRIPTION:	Update the "Fine Tune" trigger

PASS:
	*ds:si - instance data
	es - segment of RolodexApplicationClass

	ax - The message

	cx - current selection

RETURN:

DESTROYED:
	bx, si, di, ds, es (message handler)

REGISTER/STACK USAGE:

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	11/24/92		Initial version

------------------------------------------------------------------------------@
if 0
RolodexApplicationUserLevelStatus	method dynamic	RolodexApplicationClass,
				MSG_ROLODEX_APPLICATION_USER_LEVEL_STATUS

	mov	ax, MSG_GEN_SET_ENABLED
	cmp	cx, INTERMEDIATE_FEATURES
	jz	10$
	mov	ax, MSG_GEN_SET_NOT_ENABLED
10$:
	mov	dl, VUM_NOW
	GetResourceHandleNS	FineTuneTrigger, bx
	mov	si, offset FineTuneTrigger
	clr	di
	GOTO	ObjMessage

RolodexApplicationUserLevelStatus	endm
endif

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SetViewMode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Change the view mode to card view.

CALLED BY:	(INTERNAL)

PASS:		ax - feature bits 
		es - segment address of dgroup

RETURN:		nothing

DESTROYED:	bx, cx, dx, si, di

SIDE EFFECTS:	none

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	10/92		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SetViewMode	proc	near	uses	ax
	.enter

	test	ax, mask GF_VIEW_MENU	; is view menu enabled?
	jne	exit			; if so, skip
	push	ds
	segmov	ds, es
	mov	cx, CARD_VIEW
ifdef GPC
	;
	; default to both view in CUI
	;
	call	UserGetDefaultUILevel
	cmp	ax, UIIL_INTRODUCTORY
	jne	haveView
	mov	cx, BOTH_VIEW
haveView:
endif
	call	RolodexChangeView	; change to card view
	pop	ds
exit:
	.leave
	ret
SetViewMode	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplicationInitiateFineTune
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Bring up the fine tune dialog box.

CALLED BY:	MSG_ROLODEX_APPLICATION_INITIATE_FINE_TUNE

PASS:		*ds:si - instance data
		es - segment of RolodexApplicationClass
		ax - the message

RETURN:		nothing

DESTROYED:	bx, si, di, ds, es (message handler)

SIDE EFFECTS:

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	10/92		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RolodexApplicationInitiateFineTune	method dynamic	RolodexApplicationClass,
				MSG_ROLODEX_APPLICATION_INITIATE_FINE_TUNE

	GetResourceHandleNS	UserLevelList, bx
	mov	si, offset UserLevelList
	mov	ax, MSG_GEN_ITEM_GROUP_GET_SELECTION
	mov     di, mask MF_CALL
	call    ObjMessage

	mov_tr	cx, ax
	clr	dx
	GetResourceHandleNS	FeaturesList, bx
	mov	si, offset FeaturesList
	mov	ax, MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE
	mov     di, mask MF_FIXUP_DS
	call	ObjMessage

	GetResourceHandleNS	FineTuneDialog, bx
	mov	si, offset FineTuneDialog
	mov	ax, MSG_GEN_INTERACTION_INITIATE
	mov     di, mask MF_FIXUP_DS
	call	ObjMessage
	ret

RolodexApplicationInitiateFineTune	endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplicationFineTune
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the fine tune settings

CALLED BY:	MSG_ROLODEX_APPLICATION_FINE_TUNE

PASS:		*ds:si - instance data
		es - segment of RolodexApplicationClass
		ax - the message

RETURN:		nothing

DESTROYED:	bx, si, di, ds, es (message handler)

SIDE EFFECTS:

PSEUDO CODE/STRATEGY:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	10/92		Initial revision

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RolodexApplicationFineTune	method dynamic	RolodexApplicationClass,
				MSG_ROLODEX_APPLICATION_FINE_TUNE

	; get fine tune settings

	GetResourceHandleNS	FeaturesList, bx
	mov	si, offset FeaturesList
	mov	ax, MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS
	mov     di, mask MF_CALL or mask MF_FIXUP_DS
	call	ObjMessage

	mov_tr	cx, ax				;cx = new features
	GetResourceHandleNS	UserLevelList, bx
	mov	si, offset UserLevelList
	mov	ax, MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	clr	dx
	mov     di, mask MF_FIXUP_DS
	call	ObjMessage
	mov	cx, 1					;mark modified
	mov	ax, MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE
	mov     di, mask MF_FIXUP_DS
	call	ObjMessage
	;
	; if not attaching, save after fine tune
	;
	mov	si, offset RolodexApp
	mov	di, ds:[si]
	add	di, ds:[di].Gen_offset
	test	ds:[di].GAI_states, mask AS_ATTACHING
	jnz	done
ifdef PRODUCT_NDO2000
	mov	ax, MSG_GEN_APPLICATION_OPTIONS_CHANGED
	call	ObjCallInstanceNoLock
else
	mov	ax, MSG_META_SAVE_OPTIONS
	call	UserCallApplication
endif
done:
	ret

RolodexApplicationFineTune	endm


Init	ends
*/

