/***********************************************************************
 *
 *
 * PROJECT:	Breadbox Installer
 * FILE:		install.goc
 * AUTHOR:	Lysle, Marcus, John
 *
 * DESCRIPTION:
 *	This is the code for the Breadbox Installer application.
 *       7/5/01 added GPC
 *
 ***********************************************************************/


/* Include files ***/
@include <stdapp.goh>
@include <thread.h>
#include <gstring.h>
#include <ansi/string.h>
@include <initfile.h>


/* Definitions and Macros */
#define NUMBER_FILES 7   /*  <------  CHANGE AS NEEDED  */
#define SPACE_NEEDED 1000    /* <-------  CHANGE AS NEEDED  */
#define BLOCK_SIZE 4000

/**********
 *    Prototypes
 **********/
word InstallFile(word fileNum) ;
byte VersionCheck(void);

/**********
 *    Externals
 **********/
extern optr arrayA[],   /*  <------  ADD OR DELETE AS NEEDED  */
				arrayB[],              /* (1 PER FILE TO BE INSTALLED) */
				arrayC[],
				arrayD[],
				arrayE[],
				arrayF[],
				arrayG[];

/**********
 *    Class & Message Definitions
***********/
	 /*---------------------*/
	 @class InstallProcessClass, GenProcessClass ;
		 @message (GEN_TRIGGER_ACTION) MSG_INSTALL_STEP_COMPLETED;
	 @endc

	 @classdecl InstallProcessClass, neverSaved ;
	 /*---------------*/

/******* UI Objects */
/*========================*/
@start  AppResource ;
	 /*--------------------*/
	 @object GenApplicationClass InstallApp = {
			GI_visMoniker = list { @InstallTextMoniker,
					@Moniker0 }
			GI_comp       = @InstallPrimary ;
			gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS)
							  = @InstallPrimary;
			HINT_APP_IS_PRODUCTIVITY_ORIENTED;
	 }
	 /*--------------------*/         /* vvv  YOUR APP'S TEXT MONIKER  */
	 @visMoniker InstallTextMoniker =  "Ensemble 4.01 Patch 1" ;
	 @include "instico.goh"   /* <------  YOUR INSTALLER ICON'S FILE  */
	 /*--------------------*/
@end    AppResource

/*========================*/
@start  Interface ;
    @object GenPrimaryClass InstallPrimary  = {
         GI_comp            = @InstallMessageBox,
                              @InstallDialogs,
                              @InstallStatusBox,
						@InstallTriggers ;
         HINT_ORIENT_CHILDREN_VERTICALLY ;
         HINT_CENTER_CHILDREN_HORIZONTALLY ;
         HINT_SIZE_WINDOW_AS_DESIRED;
    }

    /* Install box:                                                        */
    @object GenInteractionClass InstallMessageBox = {
         GI_comp = @LeftColumn, @RightColumn;
         HINT_ORIENT_CHILDREN_HORIZONTALLY;
         HINT_EXPAND_WIDTH_TO_FIT_PARENT;
         HINT_DIVIDE_WIDTH_EQUALLY;
    }
    @object GenInteractionClass LeftColumn = {
         GI_comp = @InstallIcon;
         HINT_CENTER_CHILDREN_VERTICALLY;
         HINT_CENTER_CHILDREN_HORIZONTALLY;
         HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
         HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    }
    @object GenGlyphClass InstallIcon = {
		 GI_visMoniker = list { @Moniker0 };/* <------  YOUR INSTALLER'S ICON */
    }
    @object GenInteractionClass RightColumn = {
         GI_comp = @Line1,
			    @Line2,
				 @Line3,
				 @Line4;
         HINT_ORIENT_CHILDREN_VERTICALLY;
         HINT_CENTER_CHILDREN_HORIZONTALLY;
         HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
         HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    }
	 @object GenGlyphClass Line1 = {
		 GI_visMoniker = "Thank you for purchasing Ensemble" ;
    }
    @object GenGlyphClass Line2 = {
		 GI_visMoniker = "This update will improve";
	 }
	 @object GenGlyphClass Line3 = {
		 GI_visMoniker = "your Ensemble experience." ;
	 }
	 @object GenGlyphClass Line4 = {
		 GI_visMoniker = "Breadbox Computer Company LLC" ;
	 }

	 /* Status box:                    */
    @object GenInteractionClass InstallStatusBox = {
	    GI_visMoniker = "Status" ;
	    GI_comp = @InstallMessage ;
	    HINT_DRAW_IN_BOX ;
	    HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
	    HINT_CENTER_CHILDREN_HORIZONTALLY ;
    }
    @object GenGlyphClass InstallMessage = {
	    GI_visMoniker = "Ready to install. Click on Install button to start." ;
    }

    /* Triggers to start everything.                                        */
    /*--------------------*/
    @object GenInteractionClass InstallTriggers = {
	    GI_comp = @InstallTrigger,
			    @GBDriveFTrigger,
			    @GBPCCardTrigger ;
	    HINT_ORIENT_CHILDREN_HORIZONTALLY ;
	    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
	    HINT_INCLUDE_ENDS_IN_CHILD_SPACING;
    }
    @object GenTriggerClass InstallTrigger = {   /* for PC install */
	    GI_visMoniker = "Install" ;
         GTI_destination = process ;
         GTI_actionMsg = MSG_INSTALL_STEP_COMPLETED ;
    } ;
    @object GenTriggerClass GBDriveFTrigger = {   /* for GeoBook install */
	    GI_visMoniker = "Install to Drive F" ;
	    GI_states = @default & ~GS_USABLE;
	    GTI_destination = process ;
         GTI_actionMsg = MSG_INSTALL_STEP_COMPLETED ;
    } ;
    @object GenTriggerClass GBPCCardTrigger = {   /* for GeoBook PC card inst */
	    GI_visMoniker = "Install to PC Card" ;
	    GI_states = @default & ~GS_USABLE;
         GTI_destination = process ;
         GTI_actionMsg = MSG_INSTALL_STEP_COMPLETED ;
    } ;

    /* Any dialogs boxes that need to be built be UserDoDialog'd.          */
    @object GenInteractionClass InstallDialogs = {
	   GI_comp = @InstallCompletedBox;
	   GII_type = GIT_ORGANIZATIONAL ;
	   GII_visibility = GIV_DIALOG ;
	   GII_attrs       = @default | GIA_NOT_USER_INITIATABLE ;
    }

    /* Install completed box:                                              */
    @object GenInteractionClass InstallCompletedBox = {
	   GI_visMoniker = "Install complete!" ;
	   GI_comp = @InstallComplete1,
			   @InstallComplete2 ;
	   GII_visibility  = GIV_DIALOG ;
	   GII_type        = GIT_NOTIFICATION ;
	   GII_attrs       = @default                         |
					 GIA_INITIATED_VIA_USER_DO_DIALOG |
					 GIA_MODAL                        |
					 GIA_NOT_USER_INITIATABLE         ;
	   HINT_CENTER_CHILDREN_HORIZONTALLY ;
    }
    /*--------------------------*/
    @object GenGlyphClass InstallComplete1 = {
		GI_visMoniker = "Ensemble 4.01 Patch 1 is now installed." ;
    }
    /*--------------------*/
    @object GenGlyphClass InstallComplete2 = {
		GI_visMoniker = "Happy Computing!" ;  /*  <------ OR OTHER SHORT MESSAGE */
    }


    /*--------------------*/
    @visMoniker ErrorGeneral =
	 "An error has occurred in the install!";
	 /*--------------------*/
	 @visMoniker ErrorNotEnufRoom =
	 "There is not enough room to install this program.";
	 /*--------------------*/
	 @chunk char BadVerErrorMsg[] = "This patch is for Ensemble version 4.01 only.";


@end Interface ;


/*************************
 *              Global variables
 *************************/
word g_installStep = 0xFFFF ;
optr	g_whichInstall;

/* Tables: */
optr *g_arrays[] = {
    arrayA,        /*  <------  ADD OR DELETE AS NEEDED  */
	 arrayB,                   /* (1 PER FILE TO BE INSTALLED) */
	 arrayC,
	 arrayD,
	 arrayE,
	 arrayF,
	 arrayG
} ;
DiskHandle g_diskDrives[NUMBER_FILES] = {
	 SP_APPLICATION,     /* <------ THE NEAREST STANDARD PATH FOR EACH FILE */
	 SP_APPLICATION,
	 SP_SYSTEM,
	 SP_SYSTEM,
	 SP_SYSTEM,
	 SP_HELP_FILES,
	 SP_HELP_FILES
} ;
char g_subdirectories[NUMBER_FILES][80] = {
	 ".",             /* <------  ANY NON-GPC SUBDIRS FROM THE ABOVE STANDARD PATH */
	 "Internet",
	 "Task",
	 ".",
	 ".",
	 ".",
	 "."
} ;

char g_fileNames[NUMBER_FILES][13] = {
	 "graphvwr.geo",        /* <------  THE DOS NAMES OF THE FILES TO INSTALL */
	 "bbxmail.geo",
	 "nonts.geo",
	 "pen.geo",
	 "ffile.geo",
	 "file_fin.000",
	 "writer.000"
} ;

@start Interface ;    /* <------  MESSAGES TO SHOW IN THE INSTALL WINDOW  */
	 @visMoniker Message1 =
	 "Installing Graphics Viewer in World Directory";
	 @visMoniker Message2 =
	 "Installing EMail in Internet directory";
	 @visMoniker Message3 =
	 "Installing Task library in Task directory";
	 @visMoniker Message4 =
	 "Installing Pen library in System directory";
	 @visMoniker Message5 =
	 "Installing Flat File library in System directory";
	 @visMoniker Message6 =
	 "Installing File Finder help in Help directory";
	 @visMoniker Message7 =
	 "Installing Writer help in Help directory";
	 @visMoniker MessageX =
	 "Install complete!";
@end Interface ;

optr g_messages[NUMBER_FILES] = {
	 @Message1,    /* <------  TIE THE ABOVE MESSAGES TO EACH INSTALLED FILE */
	 @Message2,
	 @Message3,
	 @Message4,
	 @Message5,
	 @Message6,
	 @Message7
} ;


/*========================*/
/*  Methods:                                                               */
/*------------------------*/
/***********************************************************************
 *
 * MESSAGE:	MSG_INSTALL_STEP_COMPLETED for InstallProcessClass
 *
 * DESCRIPTION:	 do the install
 *              
 *
 ***********************************************************************/
@method InstallProcessClass, MSG_INSTALL_STEP_COMPLETED
{
 DiskHandle	drive;
 dword		space;


    /* Each file installed is a separate step of the installing process.
       While not all of the files have been created, this method will
       keep being called until it is done.  When it is done, this method
       brings up a dialog box stating the install is completed. */
    /* Start by incrementing the step that we are on.  Since g_installStep
       is originally declared as 0xFFFF, it will roll over to 0 -- the
	  correct starting number. */
    g_installStep++ ;

    /* save the trigger that started us */
    g_whichInstall = trigger;

    /* see if there is enough room to install the file(s)
	* and disable the install trigger */
    if (g_installStep == 0) {
	  @call InstallTriggers::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
	  drive = SP_TOP ;

	  space = DiskGetVolumeFreeSpace(drive);
	  if (space < SPACE_NEEDED) {
		@send InstallMessage::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(
			   @ErrorNotEnufRoom,
			   VUM_DELAYED_VIA_UI_QUEUE) ;
		return;
		}
	  }

	 if (g_installStep < NUMBER_FILES)  {
	   /* Since we are about to install file, put up corresponding message. */
		@send InstallMessage::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(
						g_messages[g_installStep],
						VUM_DELAYED_VIA_UI_QUEUE) ;
		/* install this file */
		InstallFile(g_installStep);
    } else {
		  /* When the program is done, put up a message stating so.  When
		     OK is clicked on the dialog, the installer will close itself */
        @send InstallMessage::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(
						@MessageX,
                  VUM_NOW) ;

		UserDoDialog(@InstallCompletedBox) ;

		@send InstallApp::MSG_META_QUIT();
	 }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_OPEN_APPLICATION for InstallProcessClass
 *
 * DESCRIPTION:	 check if we're on a yago or GPC
 *              
 *
 ***********************************************************************/
@method InstallProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
Boolean		initReadErr;
char			verStr[10];
word			size;


	@callsuper();

	/* make sure we're on Ensemble 4.01 */
	initReadErr = InitFileReadStringBuffer("system",
								 "version",
								 &verStr,
								 10,
								 &size);
	if (initReadErr || strcmp(verStr, "4.010")) {
		/* not our version  */
		UserStandardDialogOptr(0, 0, 0, 0,
					@BadVerErrorMsg,
					((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
					(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
		@send InstallApp::MSG_META_QUIT();
		}


}

/*-------------------------------------------------------------------------*/
/*  Subroutines:                                                           */
/*-------------------------------------------------------------------------*/

/* --------------------------------------------------- */
word InstallFile(word fileNum)
{
	 FileHandle fout ;     /* File to write out. */
    DiskHandle drive ;    /* Drive file is to be written on. */
    char *subdir ;        /* Directory in drive. */
    char *file ;          /* Filename of file. */
    optr *block_list ;    /* Pointer to list of blocks. */
    optr block ;          /* Object pointer to current block in list. */
    byte *data ;          /* Byte pointer to current data block. */
    word size ;           /* Size of current data block. */
    long full_size ;      /* Full size of file left to write out. */
    Boolean once ;        /* Flag to help extra size info
                             from first block. */

    /* Get the standard path and subdirectory (if any) for the file
	  we're installing in this step. */
	 drive = g_diskDrives[fileNum] ;  /* standard paths */
	 subdir = g_subdirectories[fileNum] ;
	 file = g_fileNames[fileNum] ;
	 /* Change to the specified drive or standard path constant. */
	 FileSetCurrentPath(drive, ".") ;
	 /* Try to create the requested subdirectory.  If the subdirectory already
       exists (or is illegal), nothing happens and we continue. */
	 FileCreateDir(subdir) ;
	 /* Move into the subdirectory. */
	 FileSetCurrentPath(drive, subdir) ;

	 /* If the file was there before, delete it.  This makes it start fresh. */
	 FileDelete(file) ;
    /* Open the file. */
    fout    = FileCreate(file,
		    FILE_CREATE_TRUNCATE |
		    FILE_ACCESS_RW |
		    FILE_DENY_NONE |
              FCF_NATIVE,
              FILE_ATTR_NORMAL) ;
    /* If the file is valid, we'll continue, else we'll stop for errors. */
    if (fout != NullHandle)  {
        /* Since we have a valid file, let's start by finding which of
           the block arrays we need. */
		  block_list = g_arrays[fileNum] ;
        /* Declare that this is the first time in the loop.  We'll use
           this flag to extract the file size from the first block. */
        once = FALSE ;
        /* This loop keeps going until the file_size is zero (or we
           haven't executed it before).  (No, a do-while is not much
           better because of the condition inside of the loop). */
        while ((full_size>0L) || (!once))  {
            /* Get a block off our block list and increment to the next
               location in the table. */
            block = *(block_list++) ;
            /* Lock the block into memory. */
            MemLock(OptrToHandle(block)) ;
            /* Since the block is an LMem heap, we need to get the particular
               start of the block data, not the LMem's index table. */
            data = (byte *)LMemDeref(block) ;
            /* If this is the first time through, get the file size from
               this block, move past that information, and declare this
               no longer as being the first time through. */
            if (!once)  {
                once = TRUE ;
                full_size = *((long *)data) ;
                data += sizeof(long) ;
            }
            /* Let us now determine the size of data we have in our block.
               If the amount we have left is bigger than 4K, then we must
               only write out 4K.  If it is smaller, then we will make it
               the remainder. */
            if (full_size > (long)BLOCK_SIZE)
                size = BLOCK_SIZE ;
            else
                size = (word)full_size ;
            /* Write out the information. */
            FileWrite(fout, data, size, FALSE) ;
            /* Subtract out the size we just wrote. */
            full_size -= (long)size ;
            /* We are now done with the data block.  Unlock it so that
               memory is freed. */
            MemUnlock(OptrToHandle(block)) ;
        }
        /* The above keeps looping until the whole file is written.
		 when it is, we just close the file. */
        FileClose(fout, FALSE) ;
        /* If everything went ok, we are now done.  Send a message to
           the waiting application process that this install step has
           been completed. */
		  @send process::MSG_INSTALL_STEP_COMPLETED(g_whichInstall) ;
	 } else {
	   /* Something went wrong.   */
        /* Stop installing and report an error. */
	   @send InstallMessage::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(
			   @ErrorGeneral,
			   VUM_DELAYED_VIA_UI_QUEUE) ;
	 }
	 return 0;
} ;


