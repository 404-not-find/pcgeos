/********************************************************************
 *
 *      Copyright (c) Geoworks 1995 -- All Rights Reserved.
 *
 * PROJECT:     FP2ASCII (floating point <==> ASCII sample application)
 * MODULE:      Static Objects and Methods
 * FILE:        fp2asc.goc
 *
 * AUTHOR:      Paul P. Chen, 30 October 1995
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      PPC     10/30/95        Initial version
 *      NF      9/26/96         Changed the following:
 *                              MSG_FP2ASCII_CONVERT_ASCII_TO_FP
 *
 * DESCRIPTION:
 *      This file implements a test application for converting
 *      64-bit and 80-bit IEEE floating point numbers to and from ASCII.
 *      (Floating point numbers in Geos are represented by the IEEE 754
 *      standard, 80-bit format, which is also employed by Intel.)
 *
 *      Just to make the example a bit more interesting, whenever an FP
 *      is converted to ASCII, we display the number as though it were a
 *      value of US dollars.
 *
 *      It is processed by Goc, compiled by Borland C++ compiler, and
 *      linked by Glue to produce a runnable .geo file.
 *
 *      For further information on floating point numbers in Geos,
 *      see Concepts, Appendix D, "The Math Library," as well as the
 *      header files math.h and float.h.
 *
 * RCS STAMP:
 *      $Id: fp2asc.goc,v 1.1 97/04/04 16:40:32 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
    @include <stdapp.goh>
    @include <math.goh>      /* includes math.h */
    #include <Ansi/string.h> /* for strcpy */

/********************************************************************
 *              Global Variables
 ******************************************************************/
      /* MAX_DIGITS_FOR_NORMAL_NUMBERS is defined in math.h */
    #define MAX_DIGITS MAX_DIGITS_FOR_NORMAL_NUMBERS

    /* When converting using FloatFloatToAscii, the receiving
     * ASCII buffer must be FLOAT_TO_ASCII_NORMAL_BUF_LEN or
     * FLOAT_TO_ASCII_HUGE_BUF_LEN in size.  These are defined
     * in math.h.  We use HUGE_BUF_LEN because this is the
     * prescribed size to use if no scientific notation is desired. */
    #define MAX_TEXT_LEN FLOAT_TO_ASCII_HUGE_BUF_LEN

/********************************************************************
 *              Class Definitions
 *******************************************************************/
    @class  FP2ASCIIProcessClass, GenProcessClass;
    @message void MSG_FP2ASCII_CONVERT_FP_TO_ASCII();
    @message void MSG_FP2ASCII_CONVERT_ASCII_TO_FP();
    @endc;

/********************************************************************
 *              Class Declarations
 *******************************************************************/
    @classdecl FP2ASCIIProcessClass, neverSaved;

/********************************************************************
 *              Static Object Resources
 *******************************************************************/

/********************************************************************
 *              AppResource Resource
 * This resource holds the application object.
 *******************************************************************/
@start AppResource;

@object GenApplicationClass FP2ASCIIApp = {
    GI_visMoniker = list { @FP2ASCIITextMoniker };
    GI_comp = @FP2ASCIIPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @FP2ASCIIPrimary;
}

@visMoniker FP2ASCIITextMoniker = "FP <=> ASCII";

@end AppResource;



/********************************************************************
 *              Interface Resource
 * This resource holds the UI objects for this application.
 *******************************************************************/
@start Interface;

@object GenPrimaryClass FP2ASCIIPrimary  = {
    GI_comp = @FPDisplay,
              @TextDisplay;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_CENTER_CHILDREN_HORIZONTALLY;
}

  /*
   * This object accepts user ASCII input for conversion to FP,
   * or displays FP input in ASCII.
   * When an FP is converted to ASCII and displayed here, we display
   * it as if it were a US dollar value: the conversion prepends a "$"
   * symbol, and also limits the output to 2 decimal places.
   */
@object GenTextClass TextDisplay = {
    GI_visMoniker = "ASCII text:";
    GTXI_text = "";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    GTXI_maxLength = MAX_TEXT_LEN;
    GTXI_applyMsg = MSG_FP2ASCII_CONVERT_ASCII_TO_FP;
    GTXI_destination = process;
    ATTR_GEN_TEXT_SIGNED_DECIMAL;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_CENTER_MONIKER;
}

  /*
   * This object accepts user FP input for conversion to ASCII,
   * or displays ASCII input as as FP.  Since we're going to display
   * money values, we limit the number of decimal places to 2.
   */
@object GenValueClass FPDisplay = {
    GI_visMoniker = "Floating point:";
    GVLI_value = MakeWWFixed( 0.0 );
      /* Known SDK bug: MakeWWFixed() doesn't work properly with
       * negative decimal numbers: use a negative integer instead. */
    GVLI_minimum = MakeWWFixed( -32700 );
      /* Assume monetary input: 1 cent increments. */
    GVLI_increment = MakeWWFixed( 0.01 );
    GVLI_displayFormat = GVDF_DECIMAL;
    GVLI_applyMsg = MSG_FP2ASCII_CONVERT_FP_TO_ASCII;
    GVLI_destination = process;
      /* Limiting the number decimal places causes rounding. */
    ATTR_GEN_VALUE_DECIMAL_PLACES = { 2 };
    HINT_PLACE_MONIKER_ABOVE;
    HINT_CENTER_MONIKER;
}

@end Interface;

/********************************************************************
 *              Code for FP2ASCIIProcessClass
 *******************************************************************/

/********************************************************************
 *              MSG_FP2ASCII_CONVERT_ASCII_TO_FP
 ********************************************************************
 * SYNOPSIS:     Converts:
 *                 ASCII number input ==>
 *                 Geos 80 FP format (IEEE 754; long double) ==>
 *                 IEEE64 (double) ==>
 *                 Geos WWFixedAsDWord.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: Changes numeric display in @FPDisplay.
 * STRATEGY:     1/ Get ASCII from @TextDisplay (text filtered to
 *                  accept only numeric/decimal point/sign input).
 *               2/ Convert from ASCII ==> float via
 *                  FloatAsciiToFloat() (result is a Geos80 format FP).
 *               3/ Convert from Geos80 ==> IEEE64, using
 *                  FloatGeos80ToIEEE64().
 *               4/ Display result in @FPDisplay, by converting
 *                  IEEE64==> WWFixedAsDWord.  Use macro MakeWWFixed().
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      ppc     10/30/95        Initial Revision
 *      NF      9/26/96         Changed comparison to <
 *******************************************************************/
@method FP2ASCIIProcessClass, MSG_FP2ASCII_CONVERT_ASCII_TO_FP {
      /*
       * numAscii           - Ascii string version of number.
       * textLen            - Length of ascii string.
       * numIEEE64          - IEEE version of number.
       * FPDisplayMax       - Largest number value can display.
       * FPDisplayMaxDouble - Same as above but as a double.
       * intPart            - Integer portion of fixed number.
       * fracPart           - Fractional portion of fixed number.
       */
    char           numAscii[MAX_TEXT_LEN + 1];
    word           textLen;
    double         numIEEE64;
    WWFixedAsDWord FPDisplayMax;
    double         FPDisplayMaxDouble;
    int            intPart;
    word           fracPart;

      /*
       * Get the string from the text object.
       * Call FloatAsciiToFloat with the result ending up
       * on the stack. Pass the length of the ascii string,
       * the string itself, and the resultLocation (unused).
       */
    textLen = @call TextDisplay::MSG_VIS_TEXT_GET_ALL_PTR( numAscii );
    FloatAsciiToFloat( FAF_PUSH_RESULT, textLen, numAscii, 0 );

      /*
       * Convert GEOS 80-bit FP number (on-stack) to IEEE64 number.
       */
    FloatGeos80ToIEEE64( &numIEEE64 );

      /*
       * Update UI display -- but prevent overflow manually,
       * because MakeWWFixed() is only a macro and doesn't
       * do bounds checking
       */
    FPDisplayMax = @call FPDisplay::MSG_GEN_VALUE_GET_MAXIMUM();
    intPart = IntegerOf( FPDisplayMax );
    fracPart = FractionOf( FPDisplayMax );
    FPDisplayMaxDouble = (double)intPart + ( (double)fracPart / 65536 );
      /*
       * This comparison fails to work as > under GEOS,
       * so use < instead. Backwards but it works.
       */
    if ( numIEEE64 < FPDisplayMaxDouble ) {
        @call FPDisplay::MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM();
    }
    else {
        @call FPDisplay::MSG_GEN_VALUE_SET_VALUE(
            MakeWWFixed( numIEEE64 ), FALSE );
    }
} /* MSG_FP2ASCII_CONVERT_ASCII_TO_FP */

/********************************************************************
 *              MSG_FP2ASCII_CONVERT_FP_TO_ASCII
 ********************************************************************
 * SYNOPSIS:	 Converts:
 *                 Geos WWFixedAsDWord ==>
 *                 IEEE 64 FP format (double) ==>
 *                 Geos 80 FP format (IEEE 754; long double) ==>
 *                 ASCII string.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: Replaces ASCII text in @TextDisplay.
 * STRATEGY:     1/ Get number from @FPDisplay.  This is in
 *                  WWFixedAsDWord format.
 *               2/ Convert from WWFixedAsDWord ==> IEEE64 format,
 *                  using macros IntegerOf() and FractionOf().
 *               3/ Convert from IEEE64 ==> Geos80 format,
 *                  using FloatIEEE64ToGeos80().
 *               4/ Use FloatFloatToAscii() to perform IEEE64 ==>
 *                  ASCII conversion.
 *               5/ Update text in @TextDisplay.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      ppc     10/30/95        Initial Revision
 *      NF      9/26/96         Eliminated first option which no
 *                              longer works.
 *******************************************************************/
@method FP2ASCIIProcessClass, MSG_FP2ASCII_CONVERT_FP_TO_ASCII {
      /*
       * numWWFixed - The fixed-point version of the number.
       * intPart    - Integer portion of fixed-point number.
       * fracPart   - Fractional portion of fixed-point number.
       * numIEEE64  - The IEEE version of the number.
       * numGeos80  - The Geos 80-bit version of the number.
       * numAscii   - Ascii string version of the number.
       * numChars   - Number of characters in numAscii.
       * stackFrame - Floating point stack frame.
       *              Used with FloatFloatToAscii().
       */
    WWFixedAsDWord numWWFixed;
    int            intPart;
    word           fracPart;
    double         numIEEE64;
    long double    numGeos80;
    char           numAscii[MAX_TEXT_LEN + 1];
    word           numChars;
    FFA_stackFrame stackFrame;

      /*
       * Get the number from the GenValue and
       * convert it from WWFixedAsDWord to IEEE64 format.
       */
    numWWFixed = @call FPDisplay::MSG_GEN_VALUE_GET_VALUE();
    intPart = IntegerOf( numWWFixed );
    fracPart = FractionOf( numWWFixed );
    numIEEE64 = (double)intPart + ( (double)fracPart / 65536 );

      /*
       * Convert IEEE64 to Geos80 FP number.
       * FP number returned on top of FP stack
       * Use FloatPopNumber() to get the FP number
       * off the FP stack.
       */
    FloatIEEE64ToGeos80( &numIEEE64 );
    FloatPopNumber( &numGeos80 );

      /*
       * Set up stackFrame parameter for FloatFloatToAscii()
       * Note: Setting up an FFA_stackFrame structure can be avoided
       *       by using FloatFloatToAscii_StdFormat(), which sets up
       *       such a structure automatically, with default settings.
       *       We chose to set up the structure manually,
       *         (a) to show how it's done, and
       *         (b) so we could provide the "$" header
       *       for our number format.
       */
    stackFrame.FFA_float.FFA_params.formatFlags =
        FFAF_FROM_ADDR |
        FFAF_DONT_USE_SCIENTIFIC |
        FFAF_USE_COMMAS |
        FFAF_NO_TRAIL_ZEROS |
        FFAF_HEADER_PRESENT;
    stackFrame.FFA_float.FFA_params.decimalOffset = 0;
    stackFrame.FFA_float.FFA_params.totalDigits = MAX_DIGITS;

      /*
       * Limiting the number decimal places causes rounding.
       * Notice we're not displaying a + sign for positive
       * numbers and the header is a $ for dollars. This is
       * not localizable code. You should try to use the
       * localization routines to get the proper characters.
       */
    stackFrame.FFA_float.FFA_params.decimalLimit = 2;
    strcpy( stackFrame.FFA_float.FFA_params.preNegative,  "-" );
    strcpy( stackFrame.FFA_float.FFA_params.postNegative, ""  );
    strcpy( stackFrame.FFA_float.FFA_params.prePositive,  ""  );
    strcpy( stackFrame.FFA_float.FFA_params.postPositive, ""  );
    strcpy( stackFrame.FFA_float.FFA_params.header,       "$" );
    strcpy( stackFrame.FFA_float.FFA_params.trailer,      ""  );

      /*
       * Do the conversion.
       * Update UI text display.
       * If FloatFloatToAscii() bailed, then numChars == 0.
       */
    numChars = FloatFloatToAscii( &stackFrame, numAscii, &numGeos80 );
    if ( numChars > 0 ) {
        @call TextDisplay::MSG_VIS_TEXT_REPLACE_ALL_PTR(
            numAscii, numChars );
    }
    else {
        @call TextDisplay::MSG_VIS_TEXT_DELETE_ALL();
    }
} /* MSG_FP2ASCII_CONVERT_FP_TO_ASCII */

