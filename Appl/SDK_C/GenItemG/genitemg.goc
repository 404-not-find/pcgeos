/*******************************************************************
 *
 *	Copyright (c) Geoworks 1991-96 -- All Rights Reserved.
 *
 * PROJECT:	Sample Applications
 * MODULE:	GenItemGroup example
 * FILE:	genitemg.goc
 *
 * AUTHOR:	Tony Requist: April 1, 1991
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    4/1/91          Initial version
 *      NF      10/3/96         Added EC code
 *
 * DESCRIPTION:
 *	This file source code for the GenItemGroup application. It
 *      demonstrates the various ways one can use the GenItemGroup
 *      and GenBooleanGroup objects. The GenDynamicList object is
 *      demonstrated in its own application, GenDList.
 *
 *	(Throughout this file you will see references like this:
 *      [Con 7.2.1] This is a reference to chapter 7, section 7.2.1
 *      of the Concepts manual. [Obj 7.2.1] is a reference to chapter 7,
 *      section 7.2.1 of the Objects manual. You should use these
 *      references to locate further information about the topic being
 *      discussed if anything is unclear.)
 *
 *      This sample app assumes some basic knowledge of basic GEOS
 *      programming. To see more commented examples of a GenView,
 *      GenPrimary, GenApplication, etc., see SDK_C/Hello.
 *
 * RCS STAMP:
 *	$Id: genitemg.goc,v 1.1 97/04/04 16:39:09 newdeal Exp $
 *
 *******************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	GenItemGroupProcessClass, GenProcessClass;

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_GIGP_SELECTION_STATUS;
/*
 * Parameters: void (word selection, word numSelections, byte stateFlags)
 *
 * Handles any change to the selection object.  The selection object basically
 * is a poor man's way of selecting the sample text.  We'll use the status
 * message to notify us of any user change to the selection group.  Any time
 * we receive the message, we'll recalculate the correct attributes to set
 * for the selection.
 *
 */

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GIGP_COLOR_APPLY;
/*
 * Parameters: void (word selection, word numSelections, byte stateFlags)
 *
 * Handles an apply of the color group, to set a new color for the current
 * selection.
 *
 */

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_GIGP_COLOR_STATUS;
/*
 * Parameters: void (word selection, word numSelections, byte stateFlags)
 *
 * Sent on any user change to the color group.  Used to adjust the RGB group
 * to match the color group.
 *
 */

@message (GEN_BOOLEAN_GROUP_APPLY_MSG) MSG_GIGP_RGB_APPLY;
/*
 * Parameters: void (word selectedBooleans, word indeterminateBooleans, 
 *                   word modifiedBooleans)
 *
 * Sent on any apply of the RGB group.  We'll make appropriate changes to 
 * anything that was specifically modified here by the user.
 *
 */

@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_GIGP_RGB_STATUS;
/*
 * Parameters: void (word selectedBooleans, word indeterminateBooleans, 
 *                   word changedBooleans)
 *
 * Sent on any user change to the RGB group.  Used to adjust the color group
 * to match the RGB group. 
 *
 */

@endc;

#define MAX_SELECTIONS 4      /* Number of selections in our sample text */
#define NUM_COLOR_BITS 3      /* RGB bits */

typedef enum /* word */ {
  SELECTION_THIS,
  SELECTION_IS,
  SELECTION_A,
  SELECTION_TEST
} SelectionItem;

/* The current colors for each possible selection in the text. */
Color textColor[MAX_SELECTIONS] = { C_VIOLET, C_VIOLET, 
				   C_VIOLET, C_VIOLET };

/* The current parts of the text that are selected. */
word curTextSelections[MAX_SELECTIONS];

/* The number of parts that are selected. */
word numTextSelections = 0;
  
  

@classdecl	GenItemGroupProcessClass, neverSaved;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass GenItemGroupApp = {
    GI_visMoniker = list { @GenItemGroupTextMoniker };
    GI_comp = @GenItemGroupPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @GenItemGroupPrimary;
}

@visMoniker GenItemGroupTextMoniker = "C GenItemGroup Sample Application";

@end	AppResource;


@start	Interface;		/* this resource is for misc UI objects */

@object GenPrimaryClass GenItemGroupPrimary  = {
    GI_comp = @GenItemGroupMenu, @SelectionGroup, @GenItemGroupView;

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenInteractionClass GenItemGroupMenu = {
    GI_comp = @SetColorsDialog;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_OPTIONS_MENU);
}


@object GenInteractionClass SetColorsDialog = {
    GI_visMoniker = "Set colors";
    GI_comp = @ColorsGroup, @RGBGroup;

    GII_type = GIT_PROPERTIES;
    GII_visibility = GIV_DIALOG;
}

@object GenItemGroupClass SelectionGroup = {
    GI_visMoniker = "Selection:";
    GI_comp = @ThisSelection, @IsSelection, @ASelection, @TestSelection;

    /* We'll make this non-exclusive, so that we can select any or all of the
     * parts of the example text.  Later we'll make this extended-selection.
     */
    GIGI_behaviorType = GIGBT_NON_EXCLUSIVE;

    /* Message to send on any user change. */
    GIGI_destination = process;
    ATTR_GEN_ITEM_GROUP_STATUS_MSG = MSG_GIGP_SELECTION_STATUS;

    /* Make the thing scrollable and horizontal, so it appears as a sentence
     * whose words can be individually selected (in OSF/Motif, at any rate),
     * even though this puts a useless scrollbar on the screen. */
    HINT_ITEM_GROUP_SCROLLABLE;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;

    /* Limit to the width needed for the items. */
    HINT_FIXED_SIZE = {
	SST_AVG_CHAR_WIDTHS | 20,   /* Width */
			      0,    /* Height */
			      4	    /* Count */
    };
}

@object GenItemClass ThisSelection = {
    GI_visMoniker = "This ";
    GII_identifier = SELECTION_THIS;
}
@object GenItemClass IsSelection = {
    GI_visMoniker = "is ";
    GII_identifier = SELECTION_IS;
}
@object GenItemClass ASelection = {
    GI_visMoniker = "a ";
    GII_identifier = SELECTION_A;
}
@object GenItemClass TestSelection = {
    GI_visMoniker = "test";
    GII_identifier = SELECTION_TEST;
}

/*
 * The list of colors to which the user can set the text. This is very
 * carefully chosen so that bit 0 is blue, bit 1 is green and bit 2 is
 * red. This allows us to easily play games with the GenBooleanGroup object
 * that comes later, based on which item in this list is selected, and
 * vice-versa.
 */
@object GenItemGroupClass ColorsGroup = {
    GI_visMoniker = "Color:";
    GI_comp = @BlackColor, @BlueColor, @GreenColor, @CyanColor, @RedColor,
    	    @VioletColor, @BrownColor, @GreyColor;

    /*
     * Place moniker to the left if the screen is wider than it is
     * tall or above if it's taller than it is wide. This will
     * allow things to look ok both on the desktop and, for example,
     * on Zoomer.
     */
    HINT_PLACE_MONIKER_ALONG_LARGER_DIMENSION;

    /* Initialize our various properties as disabled. */
    GI_states = @default & ~GS_ENABLED;

    /* Message to send on an apply */
    GIGI_destination = process;
    GIGI_applyMsg = MSG_GIGP_COLOR_APPLY;

    /* Message to send after any user action.  We'll use this to update the
     * RGB group to match the colors group.
     */
    ATTR_GEN_ITEM_GROUP_STATUS_MSG = MSG_GIGP_COLOR_STATUS;

    HINT_WRAP_AFTER_CHILD_COUNT = 4;
}

@object GenItemClass BlackColor = {
    GI_visMoniker = "Black";
    GII_identifier = C_BLACK;
}
@object GenItemClass BlueColor = {
    GI_visMoniker = "Blue";
    GII_identifier = C_BLUE;
}
@object GenItemClass GreenColor = {
    GI_visMoniker = "Green";
    GII_identifier = C_GREEN;
}
@object GenItemClass CyanColor = {
    GI_visMoniker = "Cyan";
    GII_identifier = C_CYAN;
}
@object GenItemClass RedColor = {
    GI_visMoniker = "Red";
    GII_identifier = C_RED;
}
@object GenItemClass VioletColor = {
    GI_visMoniker = "Violet";
    GII_identifier = C_VIOLET;
}
@object GenItemClass BrownColor = {
    GI_visMoniker = "Brown";
    GII_identifier = C_BROWN;
}
@object GenItemClass GreyColor = {
    GI_visMoniker = "Grey";
    GII_identifier = C_LIGHT_GREY;
}

@object GenBooleanGroupClass RGBGroup = {
    GI_visMoniker = "Color by component:";
    GI_comp = @RSetting, @GSetting, @BSetting;

    /*
     * Place moniker to the left if the screen is wider than it is
     * tall or above if it's taller than it is wide. This will
     * allow things to look ok both on the desktop and, for example,
     * on Zoomer.
     */
    HINT_PLACE_MONIKER_ALONG_LARGER_DIMENSION;

    /* Initialize our various properties as disabled. */
    GI_states = @default & ~GS_ENABLED;

    /* Message and destination for an apply. */
    GBGI_destination = process;
    GBGI_applyMsg = MSG_GIGP_RGB_APPLY;

    /* Message to send after any user action.  We'll use this to update the
     * colors group to match the RGB group.
     */
    ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG = MSG_GIGP_RGB_STATUS;
}


@object GenBooleanClass RSetting = {
    GI_visMoniker = "Red";
    GBI_identifier = C_RED;
}
@object GenBooleanClass GSetting = {
    GI_visMoniker = "Green";
    GBI_identifier = C_GREEN;
}
@object GenBooleanClass BSetting = {
    GI_visMoniker = "Blue";
    GBI_identifier = C_BLUE;
}

@object GenViewClass GenItemGroupView = {
    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;

    /* Set some document bounds (we'll just use 8 1/2 by 11 inches) */
    GVI_docBounds = {0, 0, 72*17/2, 11*72};

    GVI_content = process;
    HINT_INITIAL_SIZE = {
	(SST_PIXELS|300),   	/* Width */
	(SST_PIXELS|200),   	/* Height */
	0
    };
    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@end Interface;

/*
 ***************************************************************************
 *		Code for GenItemGroupProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_META_EXPOSED for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Redraw the recently-exposed portion of the View
 * PARAMETERS:	    void (WindowHandle win)
 * SIDE EFFECTS:    the invalid region of the window is cleared out
 *
 * STRATEGY:	    Create a gstate and draw the four pieces of text,
 *	    	        one after another, in their respective colors.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	4/91		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    /* draw code goes here */
    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(48.0));

    GrSetTextColor(gstate, CF_INDEX, textColor[0], 0, 0);
    GrDrawText(gstate, 0, 0, "This ", 0);

    GrSetTextColor(gstate, CF_INDEX, textColor[1], 0, 0);
    GrDrawTextAtCP(gstate, "is ", 0);

    GrSetTextColor(gstate, CF_INDEX, textColor[2], 0, 0);
    GrDrawTextAtCP(gstate, "a ", 0);

    GrSetTextColor(gstate, CF_INDEX, textColor[3], 0, 0);
    GrDrawTextAtCP(gstate, "test.", 0);

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}



/***********************************************************************
 *		MSG_GIGP_SELECTION_STATUS for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Note a change in which piece(s) of text is(are)
 *	    	    selected.
 * PARAMETERS:	    void (word selection, word numSelections, byte stateFlags)
 * SIDE EFFECTS:    The color gadgetry is set to reflect what's selected.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 7/92		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_GIGP_SELECTION_STATUS
{
    word colorAtSelStart, indeterminateColor;
    int i;

    /* Get the current selections. */
    numTextSelections = numSelections;

    if (numTextSelections > 1) {
	/*
	 * In this case, "selection" is only the first thing selected,
	 * but we need to know all the things that are currently selected,
	 * so ask the item group for its array of selections.
	 */
	@call SelectionGroup::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS
	    (curTextSelections, MAX_SELECTIONS);
    }
    else {
	curTextSelections[0] = selection;
    }

    if (numTextSelections == 0) {
	/*
	 * Since nothing's selected, disable various UI gadgets that pertain
	 * to a selection.
	 */
	@call ColorsGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call RGBGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    }
    else {

	/*
	 * Make sure the various UI gadgets that pertain to a selection are
	 * enabled, as they might have been disabled before.
	 */
	@call ColorsGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call RGBGroup::MSG_GEN_SET_ENABLED(VUM_NOW);

	/*
	 * Set the proper state for the various UI gadgets.  We'll get the color
	 * of the first selection, and keep track of which color bits are
	 * indeterminate, by comparing them to the first selection's state.
	 * (The individual bits' indeterminate states are needed for the RGB
	 * group.) This is made possible by the careful layout of the Color
	 * enumerated type, such that bits 0-2 are Blue (bit 0), Green (bit 1)
	 * and Red (bit 2).
	 *
	 * At the end of the loop, indeterminateColor will be the bits that
	 * differ among the selections (for setting the RGBGroup), or non-zero
	 * if the colors differ (for setting the ColorsGroup).
	 */
	indeterminateColor = 0;
	colorAtSelStart = textColor[curTextSelections[0]];
	for (i=1; i<numTextSelections; i++) {
	    indeterminateColor |= textColor[curTextSelections[i]] ^ colorAtSelStart;
	}
	/*
	 * Try and set the selected item in ColorsGroup to match the color
	 * of the selected text pieces. If they are of different colors,
	 * indeterminateColor will be non-zero, overriding the colorAtSelStart
	 * identifier we're passing and setting the whole item group into an
	 * indeterminate state.
	 */
	@call ColorsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	    (colorAtSelStart, indeterminateColor);
	/*
	 * Set the appropriate bits in the RGBGroup. Again the
	 * indeterminateColor bits we pass override bits we're passing in
	 * colorAtSelStart, so we need not modify colorAtSelStart in our
	 * call; if all the selected pieces are of the same color,
	 * indeterminateColor will be 0 and the RGBGroup will be set according
	 * to the Red, Green and Blue components of the selected color, else
	 * some of the entries in the RGBGroup will be set indeterminate.
	 */
	@call RGBGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE
	    (colorAtSelStart, indeterminateColor);
    } 
}



/***********************************************************************
 *				RedrawViewArea
 ***********************************************************************
 * SYNOPSIS:	    Force the view to redraw itself.
 * CALLED BY:	    (INTERNAL)
 * RETURN:	    nothing
 * SIDE EFFECTS:    the entire view is marked invalid, so any drawing
 *	    	    	between now and when the MSG_META_EXPOSED is
 *			received will be thrown out.
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 7/92		Initial Revision
 *
 ***********************************************************************/
static void
RedrawViewArea(void)
{
    WindowHandle viewWindow;
    GStateHandle gstate;

    /* Get the view window to invalidate. */
    viewWindow = @call GenItemGroupView::MSG_GEN_VIEW_GET_WINDOW();
EC( ECCheckWindowHandle( viewWindow ); )
    gstate = GrCreateState(viewWindow);
    GrInvalRect(gstate, 0, 0, 1000, 1000); /* some large area */
    GrDestroyState(gstate);
}



/***********************************************************************
 *		MSG_GIGP_COLOR_APPLY for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Change the color of all selected text pieces to
 *		    match the color selected in the ColorsGroup. This
 *		    message is sent by the ColorsGroup GenItemGroup when
 *		    it receives a MSG_GEN_APPLY after the user has changed
 *	    	    the selected item.
 * PARAMETERS:	    void (word selection, word numSelections, byte stateFlags)
 * SIDE EFFECTS:    the view is redrawn
 *
 * STRATEGY:	    Change the entries in the textColor array for all
 *		        the selected pieces of text (the curTextSelections
 *			array) and force the view to redraw. The color
 *	    	    	to which to set the pieces is just the identifier
 *			for the item selected in ColorsGroup, which
 *			identifier is passed to us as "selection".
 *
 *	    	    We need to field both this message and MSG_GIGP_RGB_APPLY
 *	    	        as our updating the RGBGroup to reflect the color
 *			chosen in this object does not appear as a user-
 *			made change, so when that object receives the
 *			MSG_GEN_APPLY, it will *not* send out its applyMsg.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 7/92		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_GIGP_COLOR_APPLY
{
    int i;

    for (i=0; i<numTextSelections; i++) {
	textColor[curTextSelections[i]] = selection;
    }
    RedrawViewArea();
}


/***********************************************************************
 *		MSG_GIGP_COLOR_STATUS for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Update the RGBGroup object to reflect the color
 *	    	    selected in the ColorsGroup.
 * PARAMETERS:	    void (word selection, word numSelections, byte stateFlags)
 * SIDE EFFECTS:    the selected parts of RGBColors change to reflect the
 *		    bits set in the selected color
 *
 * STRATEGY:	    Set the selected color as the selection for the
 *		        RGBColors group.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 7/92		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_GIGP_COLOR_STATUS
{
    /* We'll set the RGB Group to match the Color group, taking advantage of
     * the fact that the data of each is identical.  Also, since the user has
     * set a new color for the *entire* selection, there is no longer any
     * indeterminate state.  We will not mark the RGB group modified, as
     * we only really need to send an apply message from the ColorGroup if
     * this turns out to be the only user action.
     *
     * If the boolean list were in a separate dialog box, and we wanted to
     * mark it as modified, so the user could apply the change to whatever
     * the other box operates on, we would send it a
     * MSG_GEN_BOOLEAN_GROUP_SET_GROUP_MODIFIED_STATE with the appropriate
     * bits.
     */
    @call RGBGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(selection, 0);
}


/***********************************************************************
 *		MSG_GIGP_RGB_APPLY for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Change the color of all selected text pieces to
 *		    match the color selected in the RGBGroup. This
 *		    message is sent by the RGBGroup GenBooleanGroup
 *		    when it receives a MSG_GEN_APPLY after the user has
 *		    changed the selected item. 
 * PARAMETERS:	    void (word selectedBooleans, word indeterminateBooleans,
 *                    	word modifiedBooleans)
 * SIDE EFFECTS:    the view is redrawn
 *
 * STRATEGY:	    Change the bits in the colors for the selected pieces
 *	    	        that the user changed (passed in modifiedBooleans).
 *
 *	    	    We need to field both this message and MSG_GIGP_COLOR_APPLY
 *	    	        as our updating the ColorGroup to reflect the color
 *			chosen in this object does not appear as a user-
 *			made change, so when that object receives the
 *			MSG_GEN_APPLY, it will *not* send out its applyMsg.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 8/92		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_GIGP_RGB_APPLY
{
    int i;

    /* Just change the color bits in the modified booleans. */
    for (i=0; i<numTextSelections; i++) {

	/* If this color bit has been modified, set the textColor to match the
	 * corresponding bit in selectedBooleans.  We'll clear the bits that
	 * have been modified, then set the bits that need setting. This isn't
	 * strictly necessary for this program, but we're trying to demonstrate
	 * the sorts of things one does with a GenBooleanGroup object...
	 */
	textColor[curTextSelections[i]] =
	    ((textColor[curTextSelections[i]] & ~modifiedBooleans) | 
	     (selectedBooleans & modifiedBooleans));
    }
    RedrawViewArea();
}


/***********************************************************************
 *		MSG_GIGP_RGB_STATUS for GenItemGroupProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Update the ColorGroup object to reflect the color
 *		    selected in the RGBGroup.
 * PARAMETERS:	    void (word selectedBooleans, word indeterminateBooleans,
 *                    	word changedBooleans)
 * SIDE EFFECTS:    the single selection in ColorsGroup changes to
 *	    	        reflect the selectedBooleans we were given.
 *
 * STRATEGY:	    Set the single selection of the ColorsGroup to match
 *		        the booleans that are selected, as we've already
 *			established, in earlier documentation, that the
 *			bits are cleverly laid out so their union forms
 *			the appropriate color value.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/ 7/92		Initial Revision
 *
 ***********************************************************************/
@method GenItemGroupProcessClass, MSG_GIGP_RGB_STATUS
{
    /* We'll go set the ColorsGroup to match the RGBGroup, taking advantage
     * of the fact that the data is identical for both, and that if anything is
     * still indeterminate for the RGB Group, the Color group must stay 
     * indeterminate.  We will not set the ColorGroup modified, as only one
     * of the two groups really need send an apply message for this action.
     */
    @call ColorsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
	(selectedBooleans, indeterminateBooleans);
}

