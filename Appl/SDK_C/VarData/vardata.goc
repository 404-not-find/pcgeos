/********************************************************************
 *
 * 	Copyright (c) Geoworks 1992 -- All Rights Reserved.
 *
 * PROJECT:	GEOS Sample Applications
 * MODULE:	Vardata test app
 * FILE:	vardata.goc
 *
 * AUTHOR:	Tom Manshreck: October 14, 1992
 *
 * REVISION HISTORY:
 * 	Name	Date		Description
 * 	----	----		-----------
 * 	TM	10/14/92   	Initial version.
 *
 * DESCRIPTION:
 *	Normal instance data always occupies space within an
 *  	object, whether that instance data is used or not.
 *  	Vardata allows your object to selectively include data
 *  	for an object; only if a vardata attribute is actually
 *  	included within the object declaration will space
 *  	within that object be made for it.
 *
 *  	This is obviously desirable if data is infrequently
 *  	used or optional. Objects will be much more compact
 *  	with efficient use of vardata.
 *
 *  	There is a tradeoff with the use of vardata - its ease
 *  	of use. Normal instance data may be set and accessed
 *  	rather easily. Because it is always present, it is
 *  	always at a set location within the object's instance
 *  	data section. You cannot access vardata in the same
 *  	manner, because its position within the object is not
 *  	set.
 *
 *  	There are several messages and routines that you must
 *  	use if you wish to access or change vardata
 *  	dynamically. This application tests these methods of
 *  	adding, altering, and deleting vardata entries.
 *
 *  	One GenInteraction in this app will manage and alter
 *  	its vardata through the use of the vardata messages.
 *  	Another identical GenInteraction will perform the same
 *  	function through use of vardata routines instead. In
 *  	this manner, you can see the differences in either
 *  	approach.
 *
 * RCS STAMP:
 * 	$Id: vardata.goc,v 1.1 97/04/04 16:37:21 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include Files
 *******************************************************************/
    @include <stdapp.goh>

/********************************************************************
 *		Data Types
 *******************************************************************/
      /*
       * Define a structure for the data entry of
       * HINT_WRAP_AFTER_CHILD_COUNT. This data type will
       * be used in specifying the size of passed data in
       * MSG_VAR_DATA_WRAP_CHILDREN and
       * MSG_VAR_DATA_INT_WRAP_CHILDREN.
       */
    typedef struct {
        word WACCE_childCount;
    } WrapAfterChildCountData;

      /*
       * Define a structure to contain a set of flags to
       * indicate which hints are present.
       */
    typedef struct {
        unsigned has_horiz:1;
        unsigned has_vert:1;
        unsigned has_allow_wrap:1;
        unsigned has_wrap_after:1;
    } HasWhichHints;

      /*
       * This is the data that we pass to the
       * VarDataInteractionHintHandler routine.
       */
    typedef struct {
        HasWhichHints HD_flags;
    } HandlerData;

/********************************************************************
 *		Class Definitions
 *******************************************************************/
    @class VarDataProcessClass, GenProcessClass;
      /*
       * These messages are sent to the process by the various
       * triggers in the MessageVardataGroup interaction (see below).
       * This group of messages demonstrates the use of the vardata
       * Meta messages (MSG_META_ADD_VAR_DATA, MSG_META_DELETE_VAR_DATA,
       * etc.) in dealing with the contents of an object's vardata.
       */
    @message void MSG_VAR_DATA_HORIZ_SAVE();
    @message void MSG_VAR_DATA_HORIZ_NO_SAVE();
    @message void MSG_VAR_DATA_VERT();
    @message void MSG_VAR_DATA_DEFAULT();
    @message void MSG_VAR_DATA_WRAP_CHILDREN();
    @message void MSG_VAR_DATA_NO_WRAP();
    @endc;

      /*
       * This is a subclass of a GenInteraction that is used to
       * demonstrate the various ObjVar routines by changing its
       * geometry hints.
       */
    @class VarDataInteractionClass, GenInteractionClass;

      /*
       * These messages are sent to the VarDataInteraction by the
       * various triggers in the RoutineVardataGroup interaction
       * (see below). This group of messages demonstrates the use
       * of the object vardata routines (ObjVarAddData,
       * ObjVarDeleteData, etc.) in altering the contents of an
       * object's vardata.
       */
    @message void MSG_VAR_DATA_INT_HORIZ_SAVE();
    @message void MSG_VAR_DATA_INT_HORIZ_NO_SAVE();
    @message void MSG_VAR_DATA_INT_VERT();
    @message void MSG_VAR_DATA_INT_DEFAULT();
    @message void MSG_VAR_DATA_INT_WRAP_CHILDREN();
    @message void MSG_VAR_DATA_INT_NO_WRAP();

      /*
       * This vardata attribute stores an optr; this attribute
       * demonstrates how vardata that initializes and uses
       * relocatable optrs should be declared.
       */
    @vardata optr ATTR_SOME_OPTR;
    @reloc ATTR_SOME_OPTR, 0, optr

      /*
       * Define a structure to access the data stored with
       * ATTR_SOME_OPTR.
       */
    typedef struct {
        optr SOD_optr;
    } SomeOptrData;
    @endc;

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    @classdecl VarDataProcessClass, neverSaved;
    @classdecl VarDataInteractionClass;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

@object GenApplicationClass VarDataApp = {
    GI_visMoniker = list { @VarDataTextMoniker };
    GI_comp = @VarDataPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @VarDataPrimary;
}

@visMoniker VarDataTextMoniker = "VarData";

@end AppResource;

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start Interface;

@object GenPrimaryClass VarDataPrimary  = {
    GI_comp = @MessageGroup,
	      @RoutineGroup;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

  /*
   * This GenInteraction containing triggers demonstrates how
   * the vardata messages are used.  Here, we use them to change
   * geometry hints of GenInteractions.
   */
@object GenInteractionClass MessageGroup = {
    GI_comp = @WrapAt3One,
	      @NoWrapOne,
	      @DefaultOne,
	      @VertOne,
	      @HorizSaveOne,
	      @HorizNoSaveOne;
    HINT_DRAW_IN_BOX;
}

  /*
   * This trigger orients the MessageGroup GenInteraction
   * horizontally, saving this information to state.
   */
@object GenTriggerClass HorizSaveOne = {
    GI_visMoniker = "Horiz: Save";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_HORIZ_SAVE;
}

  /*
   * This trigger orients the MessageGroup GenInteraction
   * horizontally, but does not save this information to state.
   */
@object GenTriggerClass HorizNoSaveOne = {
    GI_visMoniker = "Horiz: No Save";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_HORIZ_NO_SAVE;
}

  /*
   * This trigger orients the MessageGroup GenInteraction vertically.
   */
@object GenTriggerClass VertOne = {
    GI_visMoniker = "Vert";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_VERT;
}

  /*
   * This trigger orients the MessageGroup GenInteraction to its
   * default setting (i.e. without any vardata hints whatsoever).
   */
@object GenTriggerClass DefaultOne = {
    GI_visMoniker = "Default";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_DEFAULT;
}

  /*
   * This trigger instructs the MessageGroup to wrap their children
   * (in whatever direction they are currently oriented) after a
   * child count of three.
   */
@object GenTriggerClass WrapAt3One = {
    GI_visMoniker = "Wrap at 3";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_WRAP_CHILDREN;
}

  /*
   * This trigger undoes any wrapping hint placed on the MessageGroup.
   */
@object GenTriggerClass NoWrapOne = {
    GI_visMoniker = "No Wrap";
    GTI_destination = process;
    GTI_actionMsg = MSG_VAR_DATA_NO_WRAP;
}

  /*
   * This GenInteraction contains triggers that demonstrate how the
   * ObjVar routines are used.  Here, we use them to change geomtry
   * hints of the RoutineGroup. The functionality of this Interaction
   * duplicates the same functionality of the MessageGroup Interaction,
   * except that the changes in geometry are effected through routines
   * rather than messages.
   */
@object VarDataInteractionClass RoutineGroup = {
    GI_comp = @WrapAt3Two,
	      @NoWrapTwo,
	      @DefaultTwo,
	      @VertTwo,
	      @HorizSaveTwo,
	      @HorizNoSaveTwo;
    HINT_DRAW_IN_BOX;
    ATTR_SOME_OPTR = @NoWrapOne;
}

@object GenTriggerClass HorizSaveTwo = {
    GI_visMoniker = "Horiz - Save";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_HORIZ_SAVE;
}

@object GenTriggerClass HorizNoSaveTwo = {
    GI_visMoniker = "Horiz - No Save";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_HORIZ_NO_SAVE;
}

@object GenTriggerClass VertTwo = {
    GI_visMoniker = "Vert";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_VERT;
}

@object GenTriggerClass DefaultTwo = {
    GI_visMoniker = "Default";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_DEFAULT;
}

@object GenTriggerClass WrapAt3Two = {
    GI_visMoniker = "Wrap at 3";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_WRAP_CHILDREN;
}

@object GenTriggerClass NoWrapTwo = {
    GI_visMoniker = "No Wrap";
    GTI_destination = RoutineGroup;
    GTI_actionMsg = MSG_VAR_DATA_INT_NO_WRAP;
}

@end Interface;

/********************************************************************
 *		Code for VarDataProcessClass
 *******************************************************************/

/********************************************************************
 *		MSG_VAR_DATA_HORIZ_SAVE
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction to
 * 		 orient its children (all triggers) horizontally. This
 *		 behavior will be saved to state, and therefore
 *		 carried across shutdowns.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_VERTICALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_HORIZONTALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_HORIZ_SAVE
{

      /*
       * In order to add or remove vardata, the object involved
       * must not be GS_USABLE. Here, we set the object
       * non-GS_USABLE, delete and add vardata, and then set it
       * GS_USABLE again.
       */
    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );

      /*
       * Remove the hint orienting the children vertically, if
       * present. If the hint is not present, this message will
       * not result in an error.
       */
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
        HINT_ORIENT_CHILDREN_VERTICALLY );

      /*
       * Add the hint orienting the children horizontally.
       * This hint will also be saved to state.
       */
    @call MessageGroup::MSG_META_ADD_VAR_DATA(
        ( HINT_ORIENT_CHILDREN_HORIZONTALLY | VDF_SAVE_TO_STATE ),
        0,
        NULL );

      /*
       * Set the object usable again so that the object will be
       * visually rebuilt according to the new criteria.
       */
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_HORIZ_SAVE */

/********************************************************************
 *		MSG_VAR_DATA_HORIZ_NO_SAVE
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction to
 * 		 orient its children (all triggers) horizontally. This
 *		 behavior will not be saved to state.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_VERTICALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_HORIZONTALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_HORIZ_NO_SAVE
{

    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
        HINT_ORIENT_CHILDREN_VERTICALLY );
    @call MessageGroup::MSG_META_ADD_VAR_DATA(
          /*
           * Vardata to add is specified here.
           */
        HINT_ORIENT_CHILDREN_HORIZONTALLY,
          /*
           * If the vardata itself contains data, the size of
           * that data is specified here. In this case, the hint
           * does not contain any data, so this is zero.
           */
        0,
          /*
           * If the vardata contains data, the data type is
           * specified here. We set this NULL, as there is no
           * specified data.
           */
        NULL);
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_HORIZ_NO_SAVE */

/********************************************************************
 *		MSG_VAR_DATA_VERT
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction to
 * 		 orient its children (all triggers) vertically. This
 *		 behavior will not be saved to state.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_HORIZONTALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_VERTICALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_VERT
{

    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
        HINT_ORIENT_CHILDREN_HORIZONTALLY );
    @call MessageGroup::MSG_META_ADD_VAR_DATA(
        ( HINT_ORIENT_CHILDREN_VERTICALLY | VDF_SAVE_TO_STATE ),
        0,
        NULL );
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_VERT */

/********************************************************************
 *		MSG_VAR_DATA_DEFAULT
 ********************************************************************
 * SYNOPSIS:	 This message returns the GenInteraction to its
 *		 default state, removing any orientation and child-
 *		 wrapping hints currently in use.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 We simply remove any vardata that may be in use by
 *		 this GenInteraction. Without any hints, the
 *		 GenInteraction will revert to its default state.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_DEFAULT
{

    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
	HINT_ORIENT_CHILDREN_VERTICALLY );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
        HINT_ORIENT_CHILDREN_HORIZONTALLY );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
	HINT_ALLOW_CHILDREN_TO_WRAP );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
	HINT_WRAP_AFTER_CHILD_COUNT );
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_DEFAULT */

/********************************************************************
 *		MSG_VAR_DATA_WRAP_CHILDREN
 ********************************************************************
 * SYNOPSIS:	 This message adds hints that allow this GenInteraction
 *		 to wrap its children. First, we add
 *		 HINT_ALLOW_CHILDREN_TO_WRAP and then we add
 *		 HINT_WRAP_AFTER_CHILD_COUNT, passing this hint the
 *		 child count to wrap children.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Add the hint to force the children to wrap after
 *               a certain count.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_WRAP_CHILDREN
{
      /*
       * wrapData - We set the child count to begin wrapping here.
       */
    WrapAfterChildCountData wrapData = { 3 };

    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );

      /*
       * To allow child wrapping at all, we must add
       * HINT_ALLOW_CHILDREN_TO_WRAP. This hint contains no data.
       */
    @call MessageGroup::MSG_META_ADD_VAR_DATA(
        ( HINT_ALLOW_CHILDREN_TO_WRAP | VDF_SAVE_TO_STATE ),
        0,
        NULL );

      /*
       * The child count to begin wrapping is specified with
       * HINT_WRAP_AFTER_CHILD_COUNT. This hint contains data, so we
       * must pass this data to MSG_META_ADD_VAR_DATA.
       */
    @call MessageGroup::MSG_META_ADD_VAR_DATA(
        ( HINT_WRAP_AFTER_CHILD_COUNT | VDF_SAVE_TO_STATE ),
          /*
           * Size of the passed structure.
           */
        sizeof( WrapAfterChildCountData ),
          /*
           * Pointer to the structure containing the data.
           */
        &wrapData );
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_WRAP_CHILDREN */

/********************************************************************
 *		MSG_VAR_DATA_NO_WRAP for VarDataProcessClass
 ********************************************************************
 * SYNOPSIS:	 This message removes any child wrapping hints placed
 *		 on the GenInteraction.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Delete the hint we added in the previous method.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataProcessClass, MSG_VAR_DATA_NO_WRAP
{

    @call MessageGroup::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
        HINT_ALLOW_CHILDREN_TO_WRAP );
    @call MessageGroup::MSG_META_DELETE_VAR_DATA(
	HINT_WRAP_AFTER_CHILD_COUNT );
    @call MessageGroup::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_NO_WRAP */

/********************************************************************
 *		Code for VarDataInteractionClass
 *******************************************************************/

/********************************************************************
 *		MSG_VAR_DATA_INT_HORIZ_SAVE
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction to
 * 		 orient its children (all triggers) horizontally. This
 *		 behavior will be saved to state, and therefore carried
 *		 across shutdowns.
 *		 This message also shows how to retrieve a relocatable
 *               optr stored in vardata.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_VERTICALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_HORIZONTALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_HORIZ_SAVE
{
    /*
     * data- This code just retrieves relocatable data
     *       (an optr) set within vardata. Its only purpose
     *       here is to show you how to do it.
    SomeOptrData * data;

    data = (SomeOptrData*)ObjVarFindData( oself, ATTR_SOME_OPTR );
     */

      /*
       * Now we do the actual work of setting the object not usable,
       * changing the vardata, and setting the object usable again.
       */
    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    ObjVarDeleteData(
        oself,
	HINT_ORIENT_CHILDREN_VERTICALLY );
    ObjVarAddData(
        oself,
	( HINT_ORIENT_CHILDREN_HORIZONTALLY | VDF_SAVE_TO_STATE ),
	0 );
    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_HORIZ_SAVE */

/********************************************************************
 *		MSG_VAR_DATA_INT_HORIZ_NO_SAVE
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction
 * 		 to orient its children (all triggers) horizontally.
 *		 This behavior will not be saved to state.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_VERTICALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_HORIZONTALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_HORIZ_NO_SAVE
{

    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    ObjVarDeleteData(
	oself,
	HINT_ORIENT_CHILDREN_VERTICALLY );
    ObjVarAddData(
	oself,
	HINT_ORIENT_CHILDREN_HORIZONTALLY,
	0 );
    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_HORIZ_NO_SAVE */

/********************************************************************
 *		MSG_VAR_DATA_INT_VERT
 ********************************************************************
 * SYNOPSIS:	 This message changes the MessageGroup interaction to
 * 		 orient its children (all triggers) vertically. This
 *		 behavior will not be saved to state.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 This message removes any
 * 		 HINT_ORIENT_CHILDREN_HORIZONTALLY vardata, if present,
 *		 and adds HINT_ORIENT_CHILDREN_VERTICALLY, so that
 *		 these hints don't conflict with each other.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_VERT
{

    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    ObjVarDeleteData(
	oself,
	HINT_ORIENT_CHILDREN_HORIZONTALLY );
    ObjVarAddData(
	oself,
	( HINT_ORIENT_CHILDREN_VERTICALLY | VDF_SAVE_TO_STATE ),
	0 );
    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_VERT */

/********************************************************************
 *		VarDataInteractionHintHandler
 ********************************************************************
 * SYNOPSIS:     VarDataInteractionHintHandler will be called by
 *               ObjVarScanData when a data type corresponding to it
 *               in the VarDataCHandler table below is encountered.
 *               We use VarDataInteractionHintHandler to handle several
 *               different data types.
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:
 * NOTE:         VarDataInteractionHintHandler, like any handler
 *               used in a VarDataCHandler structure, *must* be
 *               declared _pascal.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
void _pascal
VarDataInteractionHintHandler( MemHandle      mh,
                               ChunkHandle    chnk,
                               VarDataEntry * extraData,
                               word           dataType,
                               void *         handlerData )
  /*
   * mh          - Handle of memory block.
   * chnk        - Chunk handle of lmem block.
   * extraData   - Pointer to the data block.
   * dataType    - What type of data is being passed.
   * handlerData - Indicates which hints to use.
   */
{
#pragma argsused

    if ( dataType == HINT_ORIENT_CHILDREN_HORIZONTALLY ) {
	((HandlerData*)handlerData)->HD_flags.has_horiz = 1;
    }
    else if ( dataType == HINT_ORIENT_CHILDREN_VERTICALLY ) {
	((HandlerData*)handlerData)->HD_flags.has_vert = 1;
    }
    else if ( dataType == HINT_ALLOW_CHILDREN_TO_WRAP ) {
	((HandlerData*)handlerData)->HD_flags.has_allow_wrap = 1;
    }
    else if ( ( dataType == HINT_WRAP_AFTER_CHILD_COUNT ) &&
	    ( ( (WrapAfterChildCountData*)extraData)->WACCE_childCount
                == 3 ) ) {
	((HandlerData*)handlerData)->HD_flags.has_wrap_after = 1;
    }
} /* VarDataInteractionHintHandler */

  /*
   * This is the VarDataCHandler table. A VarDataCHandler
   * consists of a data type/handler pair; when a table of
   * such pairs is passed to ObjVarScanData, the appropriate
   * handler, in this case always VarDataInteractionHintHandler,
   * is called each time a vardata entry of a type found in the
   * table is encountered.
   */
static VarDataCHandler varDataInteractionHandlerTable[] = {
    { HINT_ORIENT_CHILDREN_HORIZONTALLY, VarDataInteractionHintHandler },
    { HINT_ORIENT_CHILDREN_VERTICALLY, VarDataInteractionHintHandler },
    { HINT_ALLOW_CHILDREN_TO_WRAP, VarDataInteractionHintHandler },
    { HINT_WRAP_AFTER_CHILD_COUNT, VarDataInteractionHintHandler }
};

/********************************************************************
 *		MSG_VAR_DATA_INT_DEFAULT
 ********************************************************************
 * SYNOPSIS:	 This message returns the GenInteraction to its default
 *		 state, removing any orientation and child-wrapping
 *		 hints currently in use.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 We simply remove any vardata that may be in use by
 *		 this GenInteraction. Without any hints, the
 *		 GenInteraction will revert to its default state.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92 	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_DEFAULT
{
      /*
       * hData - Indicates which hints to use.
       */
    HandlerData	hData;

    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );

      /*
       * This is a typical way of scanning vardata.  First, we
       * initialize the handler data, then we scan the vardata, looking
       * for hints. For each hint encountered, a routine of type
       * VarDataCHandler will modify the handler data.  After scanning,
       * we take action depending on the modified handler data.
       *
       * Alternatively, action can be taken in the VarDataCHandler
       * routines themselves. However, care must be taken when doing
       * this. VarDataCHandlers are not allowed to modify vardata, so
       * ObjVar routines cannot be called  within a VarDataCHanddler.
       */

      /*
       * Initialize all data to zero.
       */
    hData.HD_flags.has_horiz = 0;
    hData.HD_flags.has_vert = 0;
    hData.HD_flags.has_allow_wrap = 0;
    hData.HD_flags.has_wrap_after = 0;

      /*
       * Use ObjVarScanData() to look through the Interaction's vardata.
       * For each present vardata hint, the corresponding HandlerData
       * entry will be set.
       *
       * ObjVarScanData() goes through the passed table
       * (varDataInteractionHandlerTable) and calls the routine set up in
       * that table (VarDataInteractionHintHandler) with each table
       * entry.
       */
    ObjVarScanData(
	oself,
	sizeof( varDataInteractionHandlerTable ) /
            sizeof( VarDataCHandler ),
	varDataInteractionHandlerTable,
	&hData );

    if ( hData.HD_flags.has_horiz ) {
	ObjVarDeleteData( oself, HINT_ORIENT_CHILDREN_HORIZONTALLY );
    }
    if ( hData.HD_flags.has_vert ) {
	ObjVarDeleteData( oself, HINT_ORIENT_CHILDREN_VERTICALLY );
    }
    if ( hData.HD_flags.has_allow_wrap ) {
	ObjVarDeleteData( oself, HINT_ALLOW_CHILDREN_TO_WRAP );
    }
    if ( hData.HD_flags.has_wrap_after ) {
	ObjVarDeleteData( oself, HINT_WRAP_AFTER_CHILD_COUNT );
    }

    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_DEFAULT */

/********************************************************************
 *		MSG_VAR_DATA_INT_WRAP_CHILDREN
 ********************************************************************
 * SYNOPSIS:	 This message adds hints that allow this GenInteraction
 *		 to wrap its children. First, we add
 *		 HINT_ALLOW_CHILDREN_TO_WRAP and then we add
 *		 HINT_WRAP_AFTER_CHILD_COUNT, passing this hint the
 *		 child count to wrap children.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Set the wrap count of the interaction to be three.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_WRAP_CHILDREN
{
      /*
       * data - Pointer to data indicating when to wrap.
       */
    WrapAfterChildCountData * data;

    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    ObjVarAddData(
	oself,
	( HINT_ALLOW_CHILDREN_TO_WRAP | VDF_SAVE_TO_STATE ),
	0 );

      /*
       * ObjVarAddData returns a pointer to the data portion (if there
       * is one) of the added vardata. Therefore we set the variable
       * 'data' to this location.
       */
    data = ObjVarAddData(
	oself,
	( HINT_WRAP_AFTER_CHILD_COUNT | VDF_SAVE_TO_STATE ),
	sizeof( WrapAfterChildCountData ) );

      /*
       * Now we set the data section for
       * HINT_WRAP_AFTER_CHILD_COUNT to three.
       */
    data->WACCE_childCount = 3;
    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_WRAP_CHILDREN */

/********************************************************************
 *		MSG_VAR_DATA_INT_NO_WRAP
 ********************************************************************
 * SYNOPSIS:	 This message removes any child wrapping hints placed
 *		 on the GenInteraction.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Delete the hint we added in the previous method.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/15/92	Initial version
 *******************************************************************/
@method VarDataInteractionClass, MSG_VAR_DATA_INT_NO_WRAP
{
      /*
       * data - Pointer to data indicating when to wrap.
       */
    WrapAfterChildCountData * data;

    @call self::MSG_GEN_SET_NOT_USABLE( VUM_NOW );
    ObjVarDeleteData(
	oself,
	HINT_ALLOW_CHILDREN_TO_WRAP );

      /*
       * This is a typical usage of ObjVarFindData and
       * ObjVarDeleteDataAt. A particular data type is searched
       * for by ObjVarFindData which returns a pointer to the
       * data entry for that data type.  Some processing of that
       * data entry is done, then the data entry is deleted with
       * ObjVarDeleteDataAt.
       */
    data = (WrapAfterChildCountData*)ObjVarFindData(
	oself,
	HINT_WRAP_AFTER_CHILD_COUNT );
    if ( data->WACCE_childCount == 3 ) {
	ObjVarDeleteDataAt( oself, PtrToOffset( data ) );
    }
    @call self::MSG_GEN_SET_USABLE( VUM_NOW );
} /* MSG_VAR_DATA_INT_NO_WRAP */

