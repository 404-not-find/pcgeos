/********************************************************************
 *
 *      Copyright (c) Geoworks 1996 -- All Rights Reserved.
 *
 * PROJECT:     Simple Word Processor
 * MODULE:      Static Objects and Methods
 * FILE:        simpwp.goc
 *
 * AUTHOR:      Lawrence Hosken: Sep 21, 1992
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 *      EB      12/16/93        Fixed up scrolling, default focus, and
 *                              targeting Text object for EditControl.
 *      NF      9/23/96         Added EC code
 *
 * DESCRIPTION:
 *      This is a simple word processor.
 *
 *      So far, we've set up a good framework. We've got multiple
 *      documents appearing in multiple displays. It will be a simple
 *      matter to add features (largely by adding controllers).
 *
 * RCS STAMP:
 *      $Id: simpwp.goc,v 1.1 97/04/04 16:37:16 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
    @include <stdapp.goh>

/********************************************************************
 *              Class Definitions
 *******************************************************************/
      /* This class is bound to the primary thread of the application
       * and handles behind-the-scenes application specifics. */
    @class SWPProcessClass, GenProcessClass;
    @endc;

      /* This class defines the document objects that will
       * manage the document files created with the word processor. */
    @class SWPDocumentClass, GenDocumentClass;
    @endc;

/********************************************************************
 *              Class Declarations
 *******************************************************************/
    @classdecl SWPProcessClass;
    @classdecl SWPDocumentClass;

/********************************************************************
 *              Constants
 *******************************************************************/
      /* These constants are used to define document prototols
       * (used to ensure compatibility at run-time) and document
       * size. */
    #define SWP_DOCUMENT_PROTOCOL_MAJOR 1
    #define SWP_DOCUMENT_PROTOCOL_MINOR 0
    #define SWP_DOCUMENT_HEIGHT         300
    #define SWP_DOCUMENT_WIDTH          300

/********************************************************************
 *              Data Types
 *******************************************************************/
       /* Map block structure. */
    typedef struct {
        VMBlockHandle SWPMB_vmhTextBlock;
    } SWPMapBlock;

/********************************************************************
 *              Static Object Resources
 *******************************************************************/

/********************************************************************
 *              AppResource
 * This resource contains only the GenApplication object.
 * This is done for efficiency when the application is minimized.
 *******************************************************************/
@start AppResource;

@object GenApplicationClass SWPApp = {
    GI_visMoniker = list { @SWPTextMoniker };
    GI_comp = @SWPPrimary;

      /* The following GCN (General Change Notification)
       * lists define which objects must receive which types
       * of notification.  The WINDOWS list identifies windowed
       * objects that must be made visible at startup. The ACTIVE
       * list identifies objects that need special notification
       * at shutdown and at other times.  The other two lists
       * define how the various objects store and restore their
       * option states. */
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @SWPPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, MGCNLT_ACTIVE_LIST ) =
	@SWPDocumentControl,
        @SWPDisplayControl;
    gcnList( MANUFACTURER_ID_GEOWORKS, MGCNLT_APP_STARTUP ) =
	@SWPDocumentControl;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_STARTUP_LOAD_OPTIONS ) =
	@SWPToolControl;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS ) =
	@SWPDocumentControl,
        @SWPToolControl,
	@SWPEditControl,
        @SWPDisplayControl;
    HINT_APP_IS_PRODUCTIVITY_ORIENTED;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@visMoniker SWPTextMoniker = "Simple Word Processor";

@end AppResource;

/********************************************************************
 *              Interface
 * This resource contains the primary window and much of the
 * other UI gadgetry associated with the application in
 * general.  Often the contents of menus will be put in a separate
 * resource so they are not loaded along with the primary window but
 * only when they are needed.
 *******************************************************************/
@start Interface;

@object GenPrimaryClass SWPPrimary = {
    GI_comp = @SWPFileGroup,
              @SWPEditGroup,
              @SWPOptionsGroup,
	      @SWPWindowGroup,
              @SWPToolbar,
              @SWPDisplayGroup;
}

  /* This GenInteraction creates the File menu.
   * Its only child is the GenDocumentControl object,
   * which will update the menu as appropriate. */
@object GenInteractionClass SWPFileGroup = {
    GI_comp =   @SWPDocumentControl;
      /* This field defines the functionality of the
       * GenInteraction; GIV_POPUP indicates it is a
       * "pop-up" group.  In OSF/Motif, this will be a
       * standard menu. */
    GII_visibility = GIV_POPUP;
      /* This attribute sets up the GenInteraction as
       * a File menu.  It is a standard GenInteractionGroup
       * type, and the UI will create the proper triggers
       * and lists as its children, as well as giving it the
       * standard moniker for this type of menu. */
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_FILE_MENU );
}

  /* The GenDocumentControl object provides the UI gadgetry
   * to manage the GenDocumentGroup and thereby all the
   * documents.  It determines the toolbox and menu UI to
   * be used and creates it all automatically. */
@object GenDocumentControlClass SWPDocumentControl = {
      /* This is the token that identifies the icon of
       * document files created by this application. */
    GDCI_documentToken = { "SWOP", MANUFACTURER_ID_GEOWORKS };
      /* This is the moniker displayed when there is
       * no document open. */
    GDCI_noNameText = "No Document";
      /* This is the optr of the GenDocumentGroup object,
       * which manages the GenDocuments. */
    GDCI_documentGroup = @SWPDocumentGroup;
      /* This is a record of attribute flags that determine
       * the properties of this particular document
       * control object.  This object uses the default
       * flags in addition to allowing multiple open files. */
    GDCI_attrs = @default | GDCA_MULTIPLE_OPEN_FILES;
      /* This attribute requires the tool for saving files
       * to always be displayed, even if all the other document
       * control tools are hidden. */
    ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI = { ( GDCTF_SAVE ) };
}

  /* This GenInteraction creates the Edit menu. */
@object GenInteractionClass SWPEditGroup = {
    GI_comp = @SWPEditControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_EDIT_MENU );
}

  /* This controller displays the Edit tools and menu items. */
@object GenEditControlClass SWPEditControl = {
}

  /* This GenInteraction provides the Options menu. */
@object GenInteractionClass SWPOptionsGroup = {
    GII_visibility = GIV_POPUP;
      /* The only child is the GenToolControl, which allows the
       * user to specify tool visibility and location. */
    GI_comp = @SWPToolControlBox,
              @SWPToolbox;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_OPTIONS_MENU );
}

@object GenInteractionClass SWPToolControlBox = {
    GI_visMoniker = "Customize Toolbars";
    GI_comp = @SWPToolControl;
    GII_visibility = GIV_DIALOG;
}

  /* This controller provides the UI and functions to allow the
   * user to specify tool location and visibility.  It uses the
   * SWPToolboxList table (below) to determine potential locations
   * for the tools defined by other controller objects. */
@object GenToolControlClass SWPToolControl = {
      /* This is the chunk handle of the chunk containing
       * the toolbox list. */
    GTCI_toolboxList = @SWPToolboxList;
      /* This is the optr of the GenToolGroup object, which
       * manages the tools in each toolbox. */
    GTCI_toolGroupList = @SWPToolGroupList;
      /* This hint indicates that the ToolControl should
       * not be set apart from other children by a visual
       * separator (line). */
    HINT_SAME_CATEGORY_AS_PARENT;
}

  /* This GenInteraction is a floating toolbox in which tools
   * of the various controller objects are placed.  It is
   * managed by the GenToolControl and is a child of the
   * Window menu. */
@object GenInteractionClass SWPToolbox = {
    GI_visMoniker = "Floating Toolbox";
    GII_visibility = GIV_DIALOG;
    GII_type = GIT_ORGANIZATIONAL;
      /* This hint indicates that this GenInteraction is
       * a tool box and should display tools. */
    HINT_TOOLBOX;
      /* These hints help determine the geometry
       * behavior of this toolbox. */
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
    HINT_CENTER_WINDOW;
    HINT_INTERACTION_MAKE_RESIZABLE;
    HINT_ALLOW_CHILDREN_TO_WRAP;
}

  /* This is not an object but a data chunk used by the
   * GenToolControl object.  Each entry in this table specifies
   * the optr of a toolbar or toolbox, along with the chunk
   * containing the name of that toolbox. */
@chunk ToolboxInfo SWPToolboxList[] = {
    { @SWPToolbar, @SWPToolbarName },
    { @SWPToolbox, @SWPToolboxName }
};


@chunk char SWPToolbarName[] = "Toolbar";
@chunk char SWPToolboxName[] = "Floating Toolbox";

  /* This is not an object but a data chunk used by the
   * GenToolControl object.  Each entry in this table specifies
   * a GenToolGroup object. */
@chunk ToolGroupInfo SWPToolGroupList[] = {
    { @SWPDocumentToolToolGroup }
};

  /* This GenInteraction provides the Window menu. */
@object GenInteractionClass SWPWindowGroup = {
    GI_comp = @SWPDisplayControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_WINDOW_MENU );
}

  /* This controller uses only its default settings and
   * provides the UI gadgetry to manage the GenDisplayGroup
   * object which, in turn, manages the multiple GenDisplay
   * objects. */
@object GenDisplayControlClass SWPDisplayControl = {
}

  /* This GenInteraction provides the toolbar at the top of
   * the GenPrimary window.  The user may, by using the
   * GenToolControl, place tools of other controller objects
   * within this GenInteraction. */
@object GenInteractionClass SWPToolbar = {
    GI_comp = @SWPDocumentToolToolGroup;
    HINT_TOOLBOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

  /* This GenToolGroup object helps manage the tools within
   * a toolbox GenInteraction. */
@object GenToolGroupClass SWPDocumentToolToolGroup = {
    GTGI_controller = @SWPDocumentControl;
    HINT_MINIMIZE_CHILD_SPACING;
    HINT_SAME_ORIENTATION_AS_PARENT;
}

  /* This GenDisplayGroup object manages multiple GenDisplay
   * objects.  It interacts with the GenDisplayControl. */
@object GenDisplayGroupClass SWPDisplayGroup = {
    ATTR_GEN_DESTINATION_CLASS = { (ClassStruct*)&SWPDocumentClass };
    HINT_DEFAULT_TARGET;
      /* The focus will propagate down to the GenDisplay, GenView,
       * SWPDocument, and VisText.  Since the focus is set, key
       * presses will default to the VisText, so the user doesn't
       * have to worry about setting the focus to the VisText. */
    HINT_DEFAULT_FOCUS;
}

@end Interface;

/********************************************************************
 *              DocGroupResource
 * This resource contains the GenDocumentGroup object, which
 * will manage the multiple GenDocument objects.
 *******************************************************************/
@start DocGroupResource;

@object GenDocumentGroupClass SWPDocumentGroup = {
    GDGI_untitledName = "Simple Untitled";
      /* The name of a new document before it is saved.*/
    GDGI_documentClass = (ClassStruct*)&SWPDocumentClass;
      /* A pointer to the document object's class definition. */
    GDGI_documentControl = @SWPDocumentControl;
      /* The optr of the GenDocumentControl object that
       * will provide the UI gadgetry for document control. */
    GDGI_genDisplayGroup = @SWPDisplayGroup;
      /* The optr of the GenDisplayGroup object used to
       * manage the multiple GenDisplay objects. */
    GDGI_genView = @DisplayView;
      /* The optr of the GenView object used to display
       * the documents.  This is a child of the DisplayGroup. */
    GDGI_genDisplay = @SWPDisplayDisplay;
      /* The optr of the GenDisplay object to duplicate and use to
       * display the documents.
       * The following fields define the document protocol level
       * of the documents supported by this application. */
    GDGI_protocolMajor = SWP_DOCUMENT_PROTOCOL_MAJOR;
    GDGI_protocolMinor = SWP_DOCUMENT_PROTOCOL_MINOR;
      /* Makes sure that it will manage the view of
       * the documents.  Management means scrolling. */
    GDGI_attrs = ( @default | GDGA_VM_FILE_CONTAINS_OBJECTS ) &
                 ~GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN;
}

@end DocGroupResource;

/********************************************************************
 *              DisplayResource
 * This entire resource is duplicated by the GenDocumentGroup each
 * time it creates a new GenDocument object.
 * Each GenDocument is linked to the GenView that is the display's
 * child and is displayed within that GenView.
 *******************************************************************/
@start DisplayResource;

  /* This GenDisplay is a template and will be duplicated for
   * each document. */
@object GenDisplayClass SWPDisplayDisplay = {
      /* Set the GenDisplay not usable so it does not
       * try to draw itself before being dynamically
       * linked to the GenDisplayGroup. */
    GI_states = @default & ~GS_USABLE;
    GI_comp = @DisplayView;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
}

  /* This GenView provides the scrolling window in which the
   * document's VisText object will be displayed.  The GenView
   * is duplicated with the GenDisplay and is linked to the
   * GenDocument object (created dynamically for each document
   * file opened) through the GenView/VisContent linking scheme.
   * The GenView takes care of all window-related issues such
   * as clipping and redrawing. */
@object GenViewClass DisplayView = {
    GVI_docBounds = { 0, 0, SWP_DOCUMENT_WIDTH, SWP_DOCUMENT_HEIGHT };
    GVI_horizAttrs = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs = @default | GVDA_SCROLLABLE;
    HINT_DEFAULT_TARGET;
}

@end DisplayResource;

/********************************************************************
 *              TemplateResource
 * This resource will be duplicated by the GenDocument object
 * and will actually be the document managed by the GenDocument.
 * The resource contains the VisText object, the only object
 * the document actually needs.
 * The resource is marked notDetachable as its duplicates will
 * (and should) never be saved to the application state file if
 * the system is shut down. Instead, they will be placed in the
 * document files themselves. Marking it notDetachable prevents
 * the system from creating a data structure to track the block
 * for the purpose of putting it in the state file.
 *******************************************************************/
@start TemplateResource, notDetachable;

  /* This VisText object is not actually used.  Instead, the
   * entire resource is duplicated, and the duplicates of this
   * object are used by the GenDocument.  The VisText provides
   * the main part of the application--all the text input and
   * display as well as the text formatting and storage. */
@object VisTextClass SWPText = {
    VI_bounds = { 0, 0, SWP_DOCUMENT_WIDTH, SWP_DOCUMENT_HEIGHT };
      /*
       * You must set the VTI_text field or you'll have problems.
       */
    VTI_text = "";
      /* The optFlags determine what parts of the object need
       * to be updated. Because this object isn't managed by the
       * geometry manager, we must clear the VOF_GEOMETRY_INVALID and
       * VOF_WINDOW_UPDATE_PATH flags. */
    VI_optFlags = @default & ~( VOF_GEOMETRY_INVALID
                              | VOF_WINDOW_UPDATE_PATH );
      /* The state bits determine various aspects of the VisText.
       * To allow full user interaction with this text object, it
       * is set to be both editable and selectable.  To allow the
       * Controller objects to work with the text object, it is
       * set to be targetable, too.  A message to grab the target
       * for the Text object can be sent from
       * MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT. */
    VTI_state = @default | VTS_EDITABLE
                         | VTS_SELECTABLE
		         | VTS_TARGETABLE;
}

@end TemplateResource;

/********************************************************************
 *              Function Definitions
 *******************************************************************/

/********************************************************************
 *              SWPDocGetTextOD
 ********************************************************************
 * SYNOPSIS:     Return the optr to the VisText object stored in the
 *               passed document file.
 * RETURNS:      Optr of text object.
 * SIDE EFFECTS: none
 * STRATEGY:     Get the map block of our file. Return the handle
 *               stored in the map block.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 ***********************************************************************/
optr
SWPDocGetTextOD( FileHandle docFileHandle )
  /*
   * docFileHandle - File the document is using.
   */
{
      /*
       * vmhMapBlock - Map block vm handle.
       * pMapBlock   - Pointer to map block.
       * vmhText     - Text object in vm block.
       * mhText      - Text object in a memory block.
       */
    VMBlockHandle vmhMapBlock;
    VMBlockHandle vmhText;
    SWPMapBlock * pMapBlock;
    MemHandle     mhText;

      /*
       * Get the map block of the VM file passed.  This is done
       * with the kernel routine VMGetMapBlock().  Then lock
       * the map block into memory with VMLock() so we can
       * get the handle from it.
       */
    vmhMapBlock = VMGetMapBlock( docFileHandle );
    pMapBlock = VMLock( docFileHandle, vmhMapBlock, &mhText );

      /*
       * Get the handle from the map block, then unlock the
       * map block so the memory manager can swap it if necessary.
       */
    vmhText = pMapBlock->SWPMB_vmhTextBlock;
    VMUnlock( mhText );

      /*
       * Translate the VM handle just retrieved into its memory
       * equivalent.  This will be the global handle portion of
       * the text object's optr (since it is the handle of the
       * block containing the VisText object).
       */
    mhText = VMVMBlockToMemBlock( docFileHandle, vmhText );

      /*
       * Return the entire optr of the VisText object in this
       * document.  The optr is built with the macro
       * ConstructOptr, which makes an optr out of a global
       * handle and a chunk handle.  The chunk handle is retrieved
       * with the macro OptrToChunk using the optr of the
       * template VisText object.  The chunk handle of that
       * object may be used because chunk handles are preserved
       * by ObjDuplicateResource().
       */
    return( ConstructOptr( mhText, OptrToChunk( @SWPText ) ) );
} /* SWPDocGetTextOD */

/********************************************************************
 *              Methods for SWPDocumentClass
 *******************************************************************/

/********************************************************************
 *              MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
 ********************************************************************
 * SYNOPSIS:     This message is sent when the GenDocument object
 *               first creates a new document and the file must be
 *               initialized.  The method duplicates the template
 *               resource and attaches it to the file.
 * PARAMETERS:   void
 * RETURNS:      Boolean
 * SIDE EFFECTS: none
 * STRATEGY:     Duplicate the memory resource containing our
 *               document template (a text object). Attach this
 *               duplicated resource to the document file. Set up
 *               a map block for the document file. (This can come
 *               in handy if we add more objects to our document later.)
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 *******************************************************************/
@method SWPDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE {
      /*
       * vmhMapBlock - Map block vm handle.
       * mhMapBlock  - Map block mem handle.
       * pMapBlock   - Pointer to map block.
       * vmhText     - Text object in vm block.
       * mhText      - Text object in duplicate block.
       */
    VMBlockHandle   vmhMapBlock;
    MemHandle       mhMapBlock;
    SWPMapBlock *   pMapBlock;
    VMBlockHandle   vmhText;
    MemHandle       mhText;

      /*
       * First, call the superclass to make sure default
       * functionality is preserved.
       */
    @callsuper();
    pself = ObjDerefGen( oself );

      /*
       * Duplicate the resource template and then attach it
       * to the file stored in the GenDocument's instance data.
       * ObjDuplicateResource() copies the entire specified
       * resource, allocating a new memory block on the global
       * heap for the duplicate and preserving the chunk handles.
       */
    mhText = ObjDuplicateResource( OptrToHandle( @SWPText ), 0, 0 );
EC( ECCheckMemHandle( mhText ); )
    vmhText = VMAttach( pself->GDI_fileHandle, 0, mhText );
EC( ECVMCheckVMBlockHandle( pself->GDI_fileHandle, vmhText ); )

      /*
       * Set the VM file to preserve the memory handle for the block
       * holding the text object as long as the file is open.  This
       * allows the block to be swapped or taken out of memory but
       * the same handle to be used as long as the file is not closed.
       * This is required, owing to the text object being in the
       * visible tree (below the SWPDocument object).
       */
    VMPreserveBlocksHandle( pself->GDI_fileHandle, vmhText );

      /*
       * Set the map block of the file (a special block set aside
       * so you can always get the beginning of your data) to
       * a new block in the file.  Allocate the VM block with
       * VMAlloc(), then set it as the map block. The only thing we
       * store in the map block is the VMBlockHandle of the block that
       * holds the text object, so we use sizeof(VMBlockHandle) in the
       * allocation request.
       */
    vmhMapBlock = VMAlloc( pself->GDI_fileHandle,
                           sizeof( SWPMapBlock ), 0 );
EC( ECVMCheckVMBlockHandle( pself->GDI_fileHandle, vmhMapBlock ); )
    VMSetMapBlock( pself->GDI_fileHandle, vmhMapBlock );

      /*
       * Lock the map block into memory and store the new block's
       * VM handle in it.  Then unlock the map block and return.
       */
    pMapBlock = VMLock( pself->GDI_fileHandle, vmhMapBlock, &mhMapBlock );
EC( ECCheckMemHandle( mhMapBlock ); )
EC( ECCheckBounds( pMapBlock ); )
    pMapBlock->SWPMB_vmhTextBlock = vmhText;
    VMDirty( mhMapBlock );
    VMUnlock( mhMapBlock );
    return( FALSE );
} /* MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE */

/********************************************************************
 *              MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
 ********************************************************************
 * SYNOPSIS:     This message is sent to the GenDocument object
 *               when a particular document is about to be displayed.
 *               It allows the document to attach any UI objects, or
 *               objects that should be displayed, to the GenDocument
 *               so that the first visual update will draw everything.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Get an object pointer to the text object stored
 *               in our document file. Once we have that pointer,
 *               we add the text object to the visual tree associated
 *               with the document.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 *******************************************************************/
@method SWPDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT {
      /*
       * odText - Optr to text object in document.
       */
    optr odText;

    @callsuper();

      /*
       * Use the internal routine SWPDocGetTextOD to fetch the
       * optr for the text object from the document and set the
       * text object as our first visible child.
       */
    pself = ObjDerefGen( oself );
    odText = SWPDocGetTextOD( pself->GDI_fileHandle );
EC( ECCheckLMemOD( odText ); )
    @send self::MSG_VIS_ADD_NON_DISCARDABLE_VM_CHILD( odText, CCO_FIRST );

      /*
       * Send a message to the Text object telling it to grab
       * the target. It must grab the target because control
       * objects work with whichever object has the target.
       */
    @send SWPDocGetTextOD( pself->GDI_fileHandle )::
	MSG_META_GRAB_TARGET_EXCL();
} /* MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT */

/********************************************************************
 *              MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
 ********************************************************************
 * SYNOPSIS:     This message is sent to the GenDocument object when
 *               the document is about to be closed.  It allows the
 *               GenDocument to detach all the UI objects it attached
 *               earlier before closing.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Get an object pointer to the text object stored
 *               in our document file. Once we have that pointer,
 *               we remove the text object from the document's
 *               visual tree.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 *******************************************************************/
@method SWPDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT {
      /*
       * odText - Optr to duplicate text object.
       */
    optr odText;

      /*
       * Next, remove the text object from the visible tree; this
       * is done by sending it MSG_VIS_REMOVE, which will close the
       * object (remove it from the screen) and take it out of
       * the tree.
       */
    odText = SWPDocGetTextOD( pself->GDI_fileHandle );
EC( ECCheckLMemOD( odText ); )
    @send odText::MSG_VIS_REMOVE_NON_DISCARDABLE( VUM_MANUAL );

      /*
       * Finally, call the superclass to make sure the GenDocument
       * can detach other UI it may have attached in its superclass.
       */
    @callsuper();
} /* MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT */

