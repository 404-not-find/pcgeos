/********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved.
 *
 * PROJECT:	GEOS Sample Applications
 * MODULE:	IACP/Client1
 * FILE:	client1.goc
 *
 * AUTHOR:	Ed Ballot, Feb 23, 1994
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      EB      2/23/94         Initial version
 *      NF      10/7/96         Added EC code
 *
 * DESCRIPTION:
 *	This is the Client part of a sample application group that
 *      demonstrates the use of IACP.  This application will send
 *      commands via IACP to the server application.
 *
 *      This client does the following to form the IACP connection
 *      and send messages:
 *      1) Connect using IACPConnect(), you need the GeodeToken of
 *         the server.
 *      2) Encapsulate the message to be sent using @record.
 *      3) Send the message using IACPSendMessage().
 *
 * RCS STAMP:
 *	$Id: client1.goc,v 1.1 97/04/04 16:39:58 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include files
 *******************************************************************/
    @include <stdapp.goh>
    @include <iacp.goh>

/********************************************************************
 *		Class Definitions
 *******************************************************************/
    @class Client1ProcessClass, GenProcessClass;
    @message void MSG_CLIENT_PROCESS_SEND_DISMISS_MESSAGE_VIA_IACP();
    @endc;

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    @classdecl Client1ProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

@object GenApplicationClass Client1App = {
    GI_visMoniker = list { @Client1Title };
    GI_comp = @Client1Primary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @Client1Primary;
}

@visMoniker Client1Title = "IACP Client1";

@end AppResource;

/********************************************************************
 *		Interface Resource
 *******************************************************************/
@start  Interface;

@object GenPrimaryClass Client1Primary  = {
    GI_comp = @Client1DismissTrigger,
              @Client1StatusText;
    HINT_SIZE_WINDOW_AS_DESIRED;
}


@object GenTriggerClass Client1DismissTrigger = {
    GI_visMoniker = 'D', "Send Dismiss Message";
    GTI_actionMsg = MSG_CLIENT_PROCESS_SEND_DISMISS_MESSAGE_VIA_IACP;
    GTI_destination = process;
}


@object GenTextClass Client1StatusText = {
    GI_visMoniker = "Status Display";
    HINT_PLACE_MONIKER_ABOVE;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@end Interface;

/********************************************************************
 *		Strings Resource
 * Localizable strings should be placed in their own resource.
 * When strings are stored in chunks they can be localized using
 * the ResEdit translation tool.
 *******************************************************************/
@start Strings, data;

@chunk char msgSend[] = "Message sent to server\r";
@localize { "Displayed when connection to server succeeded." };

@chunk char msgCompleted[] = "Completion message received\r";
@localize { "Displayed when message received by client." };

@chunk char msgNoConnect[] = "Can't connect to server. Is it launched?\r";
@localize { "Displayed when client can't find server." };

@end Strings;

/********************************************************************
 *              Code for Client1ProcessClass
 *******************************************************************/

/********************************************************************
 *              MSG_CLIENT_PROCESS_SEND_DISMISS_MESSAGE_VIA_IACP
 ********************************************************************
 * SYNOPSIS:     Uses IACP to shut down the server application.
 * CONTEXT:      User has envoked the 'Dismiss' trigger.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Try to get an IACP connection to the server application.
 *               If connection is made, send MSG_META_QUIT to the
 *               Application class. If no connection, then say so.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB	2/23/94	   	Initial Revision
 *******************************************************************/
@method Client1ProcessClass, MSG_CLIENT_PROCESS_SEND_DISMISS_MESSAGE_VIA_IACP
{
      /*
       * iacpConnectionToken - Token for the IACP connection.
       * connectionFlags     - Flags used when making IACP connection.
       * serverCount         - Number of servers running.
       * hMsgToSend          - Message being sent to server.
       * hCompletionMsg      - Message sent to us when IACPSendMessage
       *                       is done.
       * serverGeodeToken    - You can dynamically obtain a geode's
       *                       GeodeToken with the routine
       *                       FileGetPathExtAttributes(), with
       *                       parameter attr = FEA_CREATOR.
       */
    IACPConnection   iacpConnectionToken;
    IACPConnectFlags connectionFlags;
    word             serverCount;
    EventHandle      hMsgToSend;
    EventHandle      hCompletionMsg;
      /* Defining "SRVR" with separate characters avoids a really
       * bizarre HighC compiler error. */
    GeodeToken       serverGeodeToken = { { 'S', 'R', 'V', 'R' }, 
                                          MANUFACTURER_ID_SDK };

      /*
       * Establish a connection with the running server.
       * We won't need any of the connection flags for this sample.
       */
    connectionFlags = 0;
    iacpConnectionToken = IACPConnect( &serverGeodeToken,
                                       connectionFlags,
				       NULL,
                                       NullOptr,
                                       &serverCount );

      /*
       * Make sure that there is a connection to send to.
       */
    if( IACP_NO_CONNECTION != iacpConnectionToken ) {

          /*
           * Encapsulate the message to be sent using @record.
           * Make sure to send the message to the correct class,
           * otherwise it could be lost or even worse be processed
           * by the wrong object.
           */
	hMsgToSend = @record GenApplicationClass::MSG_META_QUIT();
EC(     ECCheckEventHandle( hMsgToSend ); )

          /*
           * Encapsulate the completion message, which will come
           * back to us. Specifically it will have a string be
           * appended to the status text object.
           */
	hCompletionMsg = @record Client1StatusText::
            MSG_VIS_TEXT_APPEND_OPTR( @msgCompleted, 0 );
EC(     ECCheckEventHandle( hCompletionMsg ); )

          /*
           * Send the server message using IACPSendMessage.
           */
	IACPSendMessage( iacpConnectionToken,
                         hMsgToSend,
                         TO_MODEL,
                         hCompletionMsg,
                         IACPS_CLIENT );

          /*
           * Display the fact that the status message was sent.
           */
	@send Client1StatusText::MSG_VIS_TEXT_APPEND_OPTR( @msgSend, 0 );

          /*
           * Make sure to shut down the connection (especially since
           * we have detached (dismissed) the server).
           */
	IACPShutdown( iacpConnectionToken, NullOptr );
    }
    else {
	@send Client1StatusText::MSG_VIS_TEXT_APPEND_OPTR(
            @msgNoConnect, 0 );
    }
} /* MSG_CLIENT_PROCESS_SEND_DISMISS_MESSAGE_VIA_IACP */

