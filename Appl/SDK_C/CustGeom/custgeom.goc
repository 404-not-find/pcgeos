/********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved.
 *
 * PROJECT:	  GEOS Sample Applications
 * MODULE:	  Custom Geometry
 * FILE:	  custgeom.goc
 *
 * AUTHOR:  	  Chris Hawley: February 9, 1992
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      chris   2/9/92          Initial version
 *
 * DESCRIPTION:
 *      This application shows some of the special positioning
 *      hints that you can use to override the geometry manager.
 *      Note that these should be used with care, since all sorts
 *      of problems can occur with different system fonts or
 *      language translations (e.g. objects overlapping each other,
 *      or an object outside the bounds of its parent, which is not
 *      allowed and generates a fatal error in the error-checking
 *      system).
 *
 * RCS STAMP:
 *	$Id: custgeom.goc,v 1.1 97/04/04 16:38:45 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include Files
 *******************************************************************/
    @include <stdapp.goh>

/********************************************************************
 *		Class Definitions
 *******************************************************************/
    @class CustomGeoProcessClass, GenProcessClass;
    @endc;

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    @classdecl CustomGeoProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

@object GenApplicationClass CustomGeoApp = {
    GI_visMoniker = list { @CustomGeoTextMoniker };
    GI_comp = @CustomGeoPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @CustomGeoPrimary;
}

@visMoniker CustomGeoTextMoniker = "Custom Geometry";

@end AppResource;

/********************************************************************
 *		Interface Resource
 *******************************************************************/
@start Interface;

@object GenPrimaryClass CustomGeoPrimary  = {
    GI_comp = @CustomGeoComp1,
              @CustomGeoComp2,
              @CustomGeoComp3;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

  /*
   * CustomGeoComp1 will pack its children in vertically, sizing
   * itself vertically just large enough to accomodate its four
   * children. The children will stagger themselves diagonally,
   * with "One" being in the upper-left of CustomGeoComp1, and
   * "Four" being in the lower-right:
   *
   *	One
   *	      Two
   *	            Three
   *	    	          Four
   *
   * Notice how setting the X position of CustomGeoButtonOne to
   * be 0 causes the trigger to overlap the frame that is drawn
   * around CustomGeoComp1 by the HINT_DRAW_IN_BOX. The same
   * effect occurs in CustomGeoComp2 and CustomGeoComp3.
   */
@object GenInteractionClass CustomGeoComp1 = {
    GI_comp = @CustomGeoButtonOne,
              @CustomGeoButtonTwo,
              @CustomGeoButtonThree,
              @CustomGeoButtonFour;

      /*
       * Force a certain amount of horizontal space to do our
       * custom positioning games. Vertical space will be
       * determined via normal geometry methods. 230 points
       * should be enough, but if the font is particularly large,
       * CustomGeoButtonFour might extend more than 80 points and
       * be wider than CustomGeoComp1, which will get no wider
       * than 230 points, due to the hint.
       */
    HINT_FIXED_SIZE = {
        SST_PIXELS | 230,
        0,
        0
    };

      /*
       * Orient the children vertically.
       * We'll muck with horizontal positions.
       */
    HINT_ORIENT_CHILDREN_VERTICALLY;

      /*
       * Draw a frame around us, so it's clear
       * where the children are positioned.
       */
    HINT_DRAW_IN_BOX;
}

@object GenTriggerClass CustomGeoButtonOne = {
    GI_visMoniker = "One";

      /*
       * Use geometry-calculated y position,
       * but force x position (relative to
       * left edge of CustomGeoComp1, of course).
       */
    ATTR_GEN_POSITION_X = 0;
}

@object GenTriggerClass CustomGeoButtonTwo = {
    GI_visMoniker = "Two";
    ATTR_GEN_POSITION_X = 50;
}

@object GenTriggerClass CustomGeoButtonThree = {
    GI_visMoniker = "Three";
    ATTR_GEN_POSITION_X = 100;
}

@object GenTriggerClass CustomGeoButtonFour = {
    GI_visMoniker = "Four";
    ATTR_GEN_POSITION_X = 150;
}

  /*
   * CustomGeoComp2 will pack its children in horizontally,
   * sizing itself horizontally just large enough to
   * accomodate its five children. The children will arrange
   * themselves in a very flat V shape. "Five" and "Nine"
   * will be at the top of the group, at the left and right
   * edges, respectively. "Six" and "Eight" will be four points
   * down from their top, and "Seven" will be in the center,
   * four points lower than those two:
   *	Five                 Nine
   *	     Six       Eight
   *	         Seven
   */
@object GenInteractionClass CustomGeoComp2 = {
    GI_comp = @CustomGeoButtonFive,
              @CustomGeoButtonSix,
              @CustomGeoButtonSeven,
              @CustomGeoButtonEight,
              @CustomGeoButtonNine;

      /*
       * Force a certain amount of vertical space to do
       * our custom positioning games. Horizontal space
       * will be determined via normal geometry methods.
       */
    HINT_FIXED_SIZE = {
        0,
        SST_PIXELS | 40,
        0
    };

      /*
       * Orient the children horizontally.
       * We'll muck with vertical positions.
       */
    HINT_ORIENT_CHILDREN_HORIZONTALLY;

      /*
       * Draw a frame around us, so it's clear where
       * the children are positioned.
       */
    HINT_DRAW_IN_BOX;
}

@object GenTriggerClass CustomGeoButtonFive = {
    GI_visMoniker = "Five";

      /*
       * We'll force this guy to the upper left corner,
       * overriding any margin the interaction might
       * otherwise apply. This is primarily intended to
       * demonstrate the ability to position things with
       * a specific coordinate, relative to the containing
       * composite object.
       */
    ATTR_GEN_POSITION = { 0, 0 };
}

@object GenTriggerClass CustomGeoButtonSix = {
    GI_visMoniker = "Six";

      /*
       * Use geometry-calculated x position, but force y position.
       */
    ATTR_GEN_POSITION_Y = 4;
}

@object GenTriggerClass CustomGeoButtonSeven = {
    GI_visMoniker = "Seven";
    ATTR_GEN_POSITION_Y = 8;
}

@object GenTriggerClass CustomGeoButtonEight = {
    GI_visMoniker = "Eight";
    ATTR_GEN_POSITION_Y = 4;
}

@object GenTriggerClass CustomGeoButtonNine = {
    GI_visMoniker = "Nine";
    ATTR_GEN_POSITION_Y = 0;
}

  /*
   * CustomGeoComp3 and its children conspire to demonstrate
   * the ability of the geometry manager to position objects
   * with respect to other ones, even others that are in a
   * different interaction. The end result is something that
   * looks like this:
   *
   *	Ten 	    Thirteen
   *	     Eleven        Twelve
   */
@object GenInteractionClass CustomGeoComp3 = {
    GI_comp = @CustomGeoButtonTen,
              @CustomGeoButtonEleven,
              @CustomGeoButtonTwelve,
              @CustomGeoButtonThirteen;

      /*
       * Orient the children vertically, and let them wrap
       * after two children. This will work out nicely because
       * we'll let the first two objects have their vertical
       * positions chosen by the geometry manager, then we'll
       * mess with the horizontal and vertical positions of
       * the other two.
       */
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_WRAP_AFTER_CHILD_COUNT = 2;

      /*
       * Force a certain amount of horizontal space to do our
       * custom positioning games. Vertical space will be
       * determined via normal geometry methods; the horizontal
       * space must be large enough to contain the four children
       * given their various special horizontal and vertical
       * positioning hints. A fatal error will occur if visual
       * objects are outside the bounds of their visual parent
       * because of one or more of these custom positioning
       * hints, as the visual world cannot handle such a situation.
       */
    HINT_FIXED_SIZE = {
        SST_PIXELS | 230,
        0,
        0
    };

      /*
       * Draw a frame around us, so it's clear
       * where the children are positioned.
       */
    HINT_DRAW_IN_BOX;
}

@object GenTriggerClass CustomGeoButtonTen = {
    GI_visMoniker = "Ten";

      /*
       * We'll align the left edges of this object
       * and CustomGeoButtonOne. Y position of this object
       * is determined by the geometry manager.
       */
    HINT_ALIGN_LEFT_EDGE_WITH_OBJECT = @CustomGeoButtonOne;
}

@object GenTriggerClass CustomGeoButtonEleven = {
    GI_visMoniker = "Eleven";

      /*
       * We'll align the left edges of this object
       * and CustomGeoButtonTwo. Y position of this object
       * is determined by the geometry manager.
       */
    HINT_ALIGN_LEFT_EDGE_WITH_OBJECT = @CustomGeoButtonTwo;
}

@object GenTriggerClass CustomGeoButtonTwelve = {
    GI_visMoniker = "Twelve";

      /*
       * We'll align the right edges of this object and
       * CustomGeoButtonFour. Then we'll line up the bottoms
       * of this object and CustomGeoButtonEleven, just to be
       * troublesome (the geometry would have wrapped the
       * composite and lined this object's top up with
       * CustomGeoButtonTen).
       */
    HINT_ALIGN_RIGHT_EDGE_WITH_OBJECT = @CustomGeoButtonFour;
    HINT_ALIGN_BOTTOM_EDGE_WITH_OBJECT = @CustomGeoButtonEleven;
}

@object GenTriggerClass CustomGeoButtonThirteen = {
    GI_visMoniker = "Thirteen";

      /*
       * We'll align the right edges of this object and
       * CustomGeoButtonThree. Then we'll line up the bottoms
       * of this object and CustomGeoButtonTen, just to be
       * troublesome (the geometry would have lined this object's
       * top up with CustomGeoButtonEleven).
       */
    HINT_ALIGN_RIGHT_EDGE_WITH_OBJECT = @CustomGeoButtonThree;
    HINT_ALIGN_BOTTOM_EDGE_WITH_OBJECT = @CustomGeoButtonTen;
}

@end Interface

