/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	  GEOS
 * MODULE:	  Hello (Sample GEOS application)
 * FILE:	  hello3.goc
 *
 * AUTHOR:	  Doug Fults, 2/3/91
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	2/3/91	  doug	    Initial version
 *
 * DESCRIPTION:
 *	This file implements a Hello World-type application for GEOS.
 *	It is processed by GOC, compiled by your favorite C compiler, and
 *	linked by Glue to produce a runnable .geo file.
 *
 *	$Id: hello3.goc,v 1.1 97/04/04 16:37:57 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *			Include files
 *  These files are the standard inclusion files to use the basics of
 *  the GEOS system and libraries.  All applications should include
 *  at least the following files. 
 ***************************************************************************
 */

@include <stdapp.goh>

/***********************************************************************
 *			Global Variables
 ***********************************************************************/

word helloTextColor = C_BLUE;	    /* Color in which to draw the text */
WindowHandle winHan;	    	    /* Handle of window in which we draw.
				     * 0 if the view hasn't opened the window
				     * yet. */


/***********************************************************************
 *			Class & Message Definitions
 *  This section contains the definition of the application's Process
 *  class and its messages.  Other classes can also be defined here.
 ***********************************************************************/

/*
 * Here we define "HelloProcessClass" as a subclass of the system provided
 * "GenProcessClass". As this application is launched, an instance of this class
 * will be created, and will handle all application-related events (messages).
 * The application thread will be responsible for running this object,
 * meaning that whenever this object handles a message, we will be executing
 * in the application thread.
 *
 * You will find no object in this file declared to be of this class. Instead,
 * it is specified as the class for the application thread in "hello.gp".
 */

@class	HelloProcessClass, GenProcessClass ;

/*  The messages HelloProcessClass objects can handle that are not
 *  system-defined are enumerated here.  Each of these messages is sent
 *  by one of the triggers in the dialog box.  This is where application-
 *  specific messages (not system-defined messages) are defined. */

@message void MSG_HELLO_CHANGE_TO_BLUE();	/* sent by Blue trigger */
@message void MSG_HELLO_CHANGE_TO_GOLD();	/* sent by Gold trigger */

@message void MSG_HELLO_REDRAW_DOCUMENT();

@endc		/* signifies end of class definition */

/*
 * Each object class requires a "class record" be stored in fixed memory
 * for it. The class record is used by the GEOS message system for the
 * delivery of messages sent to an object of the class. The class record needs
 * to be defined in the file where the methods (i.e. the routines defined
 * with @method) for the class are defined. The @classdecl GOC directive ;
 * tells GOC to create the class record here.
 *
 * The neverSaved flag is necessary because ProcessClass objects are
 * hybrid objects. It tells the system that no object of this class will
 * ever be loaded from or stored to a file.
 */

@classdecl	HelloProcessClass, neverSaved ;

/************************************************************************
 *			UI Objects
 *  This section defines the generic UI tree of the application.  Different
 *  UI objects will be in different resources.  Any number of generic
 *  objects may be declared in this section.
 ************************************************************************/

/*
 *		Application Object
 *
 * The very top-level generic object of an application MUST be a GenApplication
 * object. The hello.gp file contains "appobj" statement which indicates
 * that this "HelloApp" object is in fact the top-level UI object.
 *
 * This object should be in its own resource, as it is all that need be in
 * memory when the application is iconified. As such, its resource should be
 * as small as possible.
 */

@start AppResource	/* Begin definition of objects in AppResource. */ ;

@object GenApplicationClass HelloApp = {
	
    /*
     * While the application object isn't shown on the screen, it has a list
     * of VisMonikers for three purposes:
     *	1) the GenPrimary (see below) inherits the moniker when it comes up
     *	   on screen.
     *	2) when GeoManager needs to display an icon for the application, and
     *	   there's none for it in the Token Database, it launches the app and
     *	   sends a message to the application object to install its list of
     *	   monikers in the token database under the application's token.
     *	3) when the GenPrimary is minimized, it uses the most appropriate
     *	   graphical moniker from this list for the application's icon.
     *	   if there's an abbreviated-text moniker in the list, that's used
     *	   as the icon title. else any regular-text moniker is used.
     */
    GI_visMoniker = list { @HelloTextMoniker }

    /*
     * The GI_comp instance variable lists all the generic children of a
     * generic object. The GenApplication object has at least one child:
     * the main application window.
     */
    GI_comp = @HelloPrimary;
	
    /*
     * The main window should appear on-screen when the application is
     * launched, so place it on the GAGCNLT_WINDOWS GCN list. This causes
     * the application object to bring it on-screen at the appropriate time.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @HelloPrimary;
}

@visMoniker HelloTextMoniker = "C Hello Sample Application";

@end	AppResource	/* End definition of objects in AppResource. */

/*
 *		Primary window
 *
 * Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components such as menus or lists can be placed.  These UI components
 * are declared as children of the primary window in the GI_comp attribute.
 */

@start	Interface		/* This resource is for misc UI objects. */ ;

@object GenPrimaryClass HelloPrimary  = {
    /*
     * This object will inherit its GI_visMoniker instance variable from the
     * GenApplication object. This only happens for GenPrimary objects.
     */

    GI_comp = @HelloView, @HelloMenu;
			/* This window has two children, the GenView object
			 * and the GenInteraction menu object. */

    /*
     * For simplicity, this application is not given an icon.  Therefore,
     * we must prevent the user from being able to minimize the
     * application.  This is done by applying the following hint to
     * the GenPrimary object:
     */
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    /*
     * Some specific UI's force an app to be a particular size, larger than
     * they desire. This hint asks that this window be exempted from such
     * behaviour
     */
    HINT_SIZE_WINDOW_AS_DESIRED;
    /*
     * When the specific UI permits, let's not show the menu bar on
     * startup. Some applications would find the extra space this leaves
     * helpful, in particular on the small screens of pen-based devices,
     * though for this simple application it doesn't really matter.
     */
    ATTR_GEN_DISPLAY_MENU_BAR_POPPED_OUT;
    HINT_DISPLAY_MENU_BAR_HIDDEN_ON_STARTUP;
}

/*
 *		GenView object
 *
 * This GenView object creates a window where the application can display
 * portions of a document as necessary.  As we want this window to be
 * scrollable, the specific UI (Motif) will create scroll bars which the
 * user can interact with.  Whenever a portion of the window needs to be
 * redrawn, the GenView object will invalidate a portion of the window,
 * causing a MSG_META_EXPOSED to be sent to the application. The application
 * will draw the document into the window as requested. The window keeps
 * track of a mask which is used to clip the application's drawing operations
 * so that only the invalid portion of the window is drawn.
 */

@object GenViewClass HelloView = {
    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
			/* This makes the View scrollable in the horizontal
			 * dimension and keeps it from growing larger than
			 * the document it displays. */
    GVI_vertAttrs = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
			/* This makes the View scrollable in the vertical
			 * dimension and keeps it from growing larger than
			 * the document it displays. */

    /* Set some document bounds (we'll just use 8 1/2 by 11 inches) */
    GVI_docBounds = {0, 0, 72*17/2, 11*72};

    GVI_content = process;
			/* This sets the output of the View--where it
			 * will send its MSG_META_EXPOSED and other messages --
			 * to be the application's Process object. */
    /*
     * This view will not take text input, so specify that no floating
     * keyboard should come up. Otherwise, we would get a floating
     * keyboard by default on pen-based systems.
     */
     ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}


/*
 *		Menu Objects and Dialog Box
 *
 *	The MenuResource resource contains all the UI contained in the
 *	Hello World menu, but not the menu itself. It is to your advantage
 *	to organize things this way, owing to the way objects are linked
 *	together into trees. By placing the contents of a menu in a separate
 *	resource from the menu container itself, the menu contents need not
 *	be brought into memory until the user actually selects the menu.
 *	This can speed up complex applications significantly.
 */


/*	HelloMenu Menu
 * Menus are of GenInteractionClass.  The moniker of a menu is used to show
 * the menu on the GenPrimary's menu bar (thus, "Menu" will show up in Hello
 * World's menu bar).  Each of the menu's children (in the GI_comp field)
 * will be an entry or a collection of entries in the menu.
 */
@object GenInteractionClass HelloMenu = {
    GI_visMoniker = 'M', "Menu"; /* The moniker of the menu is used in
				  * the primary window's menu bar (if the
				  * specific UI employs a menu bar). */
    GI_comp = @HelloColorBox;	 /* The only child of the menu (the only
				  * item in the menu) is the dialog box. */
    GII_visibility = GIV_POPUP;  /* This attribute designates the interaction
				  * as a menu or a submenu. */
}

@end Interface		/* End definition of objects in this resource. */

@start MenuResource ;


/*	HelloColorBox Dialog Box
 * Dialog boxes are also of GenInteractionClass.
 *
 * In some implementations, the moniker of the dialog box will appear at the
 * top, like a title for the box.  Additionally, if the GenInteraction is a
 * child of a menu or other interaction, the moniker will also serve as the
 * text that will appear in the menu item or button that brings up the dialog
 * box.
 *
 * The dialog will automatically size itself to be just large enough to
 * hold all its children.  Thus, this dialog will be small (with just two
 * children, each a trigger with a short moniker).
 */

@object GenInteractionClass HelloColorBox = {
    GI_comp = @HelloBlueTrigger, @HelloGoldTrigger;
    GI_visMoniker = 'C', "Color";
    GII_visibility = GIV_DIALOG;
}

/*	GenTriggers
 * Buttons are implemented by GenTriggerClass.  When the trigger is pushed by
 * the user (clicked with the mouse), it will send the specified message
 * to the specified output object.  In both cases below, the trigger will
 * send an application-defined defined message to the application's Process
 * object.
 *
 * A trigger's moniker is displayed within the trigger.  In this
 * case both are text, but any graphics commands could be used instead to create
 * graphical triggers easily.
 */

@object GenTriggerClass HelloBlueTrigger = {
    GI_visMoniker = 'B', "Blue"; /* The 'B' indicates the keyboard navigation
				  * character for this trigger. */
    GTI_destination = process;	 /* Send the message to the Process object. */
    GTI_actionMsg = MSG_HELLO_CHANGE_TO_BLUE;	/* Send this message. */
}

@object GenTriggerClass HelloGoldTrigger = {
    GI_visMoniker = 'G', "Gold"; /* The 'G' indicates the keyboard navigation
				  * character for this trigger. */
    GTI_destination = process;	 /* Send the message to the Process object. */
    GTI_actionMsg = MSG_HELLO_CHANGE_TO_GOLD;	/* Send this message. */
}

@end MenuResource



/*
 ***************************************************************************
 *			Code for HelloProcessClass
 *  Now that all the UI gadgetry has been defined, we must provide the
 *  methods and routines used by the application.  For simplicity, all
 *  messages will be handled by the HelloProcessClass object.
 ***************************************************************************
 */

/* Define constants used by the color-setting methods.  Each of these
 * is a document size parameter in points.  Therefore, the document is
 * 8.5 inches wide by 11 inches tall (one point is 1/72 of an inch). */

#define	HORIZ_DOC_SIZE		(17*72/2)
#define VERT_DOC_SIZE		(11*72)

/* These constants are used in the code below: */
#define TEXT_POINT_SIZE		48	/* point size */
#define TEXT_X_POSITION		30	/* x position, in document coords. */
#define TEXT_Y_POSITION		100	/* y position, in document coords. */


/***********************************************************************
 *				HelloDrawText
 ***********************************************************************
 * SYNOPSIS:	    Draw a single line of text onto the document. Note
 *		    that it has no concept of the screen or the view --
 *		    it is given a graphics state and draws through it.
 * CALLED BY:	    (INTERNAL) HelloProcess::MSG_META_EXPOSED
 * RETURN:	    nothing
 * SIDE EFFECTS:    attributes in the gstate are altered
 *
 * STRATEGY:	    We separate the drawing from the exposure handler
 *		    so the same routine can be used for both window
 *		    refresh and for printing.
 *
 *	    	    Set the font, point size and color, then draw the
 *		    text.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	7/29/92		Initial Revision
 *
 ***********************************************************************/
void
HelloDrawText(GStateHandle gstate)  	/* Graphics state to draw through */
{

    /* First change some of the default GState values such as the font
     * and point size. */

    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(TEXT_POINT_SIZE));

    /* Set the text color to the value in helloTextColor. */

    GrSetTextColor(gstate, CF_INDEX, helloTextColor, 0, 0);

    /* Draw the text onto the document. */

    GrDrawText(gstate, TEXT_X_POSITION, TEXT_Y_POSITION,
		"Welcome to GEOS!", 0);
}


/***********************************************************************
 *		MSG_META_CONTENT_VIEW_WIN_OPENED for HelloProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Record the handle of the view window when the
 *		    view creates it. This allows us to more-easily
 *		    update the document when the user changes the
 *		    text color.
 * PARAMETERS:	    void (word viewWidth,
 *			  word viewHeight,
 *			  WindowHandle viewWin)
 * SIDE EFFECTS:    winHan is set to viewWindow
 *
 * STRATEGY:	    none, really
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	7/29/92		Initial Revision
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_META_CONTENT_VIEW_WIN_OPENED
{
    /*
     * Get the window handle of the View.  We need this handle in order to
     * simulate a window invalidation, causing the View to send a
     * MSG_META_EXPOSED to the Process object and thereby forcing a redraw
     * of the window.
     */
    winHan = viewWindow;
}


/***********************************************************************
 *		MSG_META_CONTENT_VIEW_WIN_CLOSED for HelloProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Take note that the view is now closed, so we don't
 *		    try and draw to it or invalidate it any more (at
 *		    least until it reopens)
 * PARAMETERS:	    void (WindowHandle viewWindow)
 * SIDE EFFECTS:    winHan is set to 0
 *
 * STRATEGY:	    none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	7/29/92		Initial Revision
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_META_CONTENT_VIEW_WIN_CLOSED {
    /* Set our window handle variable to zero. */
    winHan = 0;
}


/***********************************************************************
 *		MSG_META_EXPOSED for HelloProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Redraw the recently-exposed portion of the View
 * PARAMETERS:	    void (WindowHandle win)
 * SIDE EFFECTS:    the invalid region of the window is cleared out
 *
 * STRATEGY:	    This message is sent by the windowing system when a
 *	    	    portion of the GenView has become invalid, either
 *	    	    because a window that was obscuring it has been moved,
 *	    	    or because some called GrInvalRect.
 *
 *	    	    We redraw the entire document, after telling the
 *		    graphics system we're drawing to the invalid portion
 *		    of the window.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	4/91		Initial Revision
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_META_EXPOSED
{
    /*
     * The local variable gstate will hold a GState handle.  We will do
     * our drawing to this gstate.
     */
    GStateHandle gstate;

    /*
     * Get a new, default graphics state that we can use while drawing.
     * We must allocate a new graphics state for the View window using
     * the kernel routine GrCreateState().  We pass the window handle of
     * the View window, which we received in a parameter called "win".
     */

    gstate = GrCreateState(win);

    /*
     * Start a window update. This tells the windowing system that we are in
     * the process of drawing to the invalid portion of this window.
     * GrBeginUpdate/GrEndUpdate are necessary only when handling
     * MSG_META_EXPOSED. For drawing at other times, all you need do is create
     * a graphics state and draw through it.
     */
    GrBeginUpdate(gstate);

    /*
     * If we had background graphics to draw, we could call the apropriate
     * graphics routines now.  But we don't.
     */

    /*
     * Draw our text into the window (pass the GState).  This is done here
     * by calling the function HelloDrawText, which knows how to draw
     * the appropriate document.
     */

    HelloDrawText(gstate);	/* Special Hello World routine (above). */

    /*
     * Now indicate that we are done drawing to the invalid area and free the
     * gstate.
     */
    GrEndUpdate(gstate);	/* Tell graphics system update is complete */
    GrDestroyState(gstate);	/* Destroy the temporary GState. */
}



/***********************************************************************
 *		MSG_HELLO_REDRAW_DOCUMENT for HelloProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Force the document to be redrawn by marking the
 *	    	    entire document area in the view as invalid.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    Any drawing to the document area between this
 *		    message and the MSG_META_EXPOSED that it generates
 *		    will not show up, as the entire window will be invalid.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	7/29/92		Initial Revision
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_HELLO_REDRAW_DOCUMENT
{
    /*
     * Now create a temporary GState to use for window invalidation
     * if the window handle is valid, then redraw the window.
     */
    if (winHan != 0) {
	GStateHandle gstate = GrCreateState(winHan);

	/*
	 * Call GrInvalRect using the GState.  Invalidate the entire document.
	 * This will cause the View to redraw itself and send a MSG_META_EXPOSED
	 * to the Process object.
	 */
	GrInvalRect(gstate, 0, 0, HORIZ_DOC_SIZE, VERT_DOC_SIZE);
	GrDestroyState(gstate);	/* Now free the GState and return. */
    }
}

/***********************************************************************
 *		MSG_HELLO_CHANGE_TO_BLUE for HelloProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the text color to dark blue and redraw the text.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    helloTextColor is set to C_BLUE
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	7/29/92		Initial Revision
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_HELLO_CHANGE_TO_BLUE
{
    helloTextColor = C_BLUE;	/* Set the helloTextColor variable to blue. */

    @call oself::MSG_HELLO_REDRAW_DOCUMENT();
}

 
/***********************************************************************
 *
 * METHOD:	HelloChangeToGold--handler for MSG_HELLO_CHANGE_TO_GOLD
 *
 * DESCRIPTION:	Set the text color to yellow and redraw the text in
 *		the new color.
 *
 * STRATEGY:	Set helloTextColor to C_YELLOW
 *		Get the window handle of the View
 *		Create a temporary GState
 *		Simulate window invalidation, forcing a MSG_META_EXPOSED
 *		Free the temporary GState and return.
 *
 * RETURN:	Nothing
 *
 * PARAMETERS:  void()
 *
 ***********************************************************************/
@method HelloProcessClass, MSG_HELLO_CHANGE_TO_GOLD
{
    helloTextColor = C_YELLOW;	/* Set the helloTextColor variable to gold. */

    @call oself::MSG_HELLO_REDRAW_DOCUMENT();
}
