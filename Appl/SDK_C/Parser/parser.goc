/********************************************************************
 *
 *    Copyright (c) Geoworks 1994 -- All Rights Reserved.
 *
 * PROJECT:	Sample Applications
 * MODULE:	Parser Sample
 * FILE:	parser.goc
 *
 * AUTHOR:	Christian Puscasiu: Apr 15, 1994
 *
 * ROUTINES:
 *	Name			Description
 *	----			-----------
 *	ParserCallback		Handles dealing with unknowns in the
 *				input string.
 *
 * REVISION HISTORY:
 * 	Name	Date		Description
 * 	----	----		-----------
 * 	CP	4/15/94   	Initial version.
 * 	EB	3/18/96		Corrected MSG_PARSER_PROCESS_CALCULATE
 * 	NF	7/8/96		Removed HINT_FIXED_SIZE and made
 * 				changes to remove compiler warnings.
 *	NF	8/6/96		Made changes to the following:
 *				MSG_PARSER_PROCESS_CALCULATE
 *                              ParserCallback
 *
 * DESCRIPTION:
 * 	This program demonstrates how to use the parser library.
 * 	The parser library gives the user commands such as ABS() and
 * 	SUM() which can be used in long expressions. The Parser
 * 	will evaluate these expressions and return a result.
 *
 * RCS STAMP:
 * 	$Id: parser.goc,v 1.1 97/04/04 16:40:06 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include files
 *******************************************************************/
    @include <stdapp.goh>

      /* Include all the libraries neccessary for the app. */
    #include <parse.h>
    @include <ssheet.goh>
    #include <math.h>
    #include <Ansi/stdio.h>
    #include <Ansi/string.h>

/********************************************************************
 *		Class Definitions
 *******************************************************************/
      /* Process class */
    @class ParserProcessClass, GenProcessClass;
      /* Message that initiates the calculation. */
    @message void MSG_PARSER_PROCESS_CALCULATE();
    @endc;

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    @classdecl ParserProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

  /* Application object */
@object GenApplicationClass ParserApp = {
    GI_visMoniker = "C Parser Application";
    GI_comp = @ParserPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @ParserPrimary;
}

@end AppResource;

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start Interface;

  /*
   * This builds out the objects that are visible on the screen:
   * The top line contains a text object that take the input formula
   * that is to be parsed and a Trigger that initiates the
   * calcualtion.  Below that is a text object that displays the
   * result.
   */
@object GenPrimaryClass ParserPrimary  = {
    GI_comp = @ParserInputInteraction,
              @ParserResultText;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenInteractionClass ParserInputInteraction = {
    GI_comp = @ParserText,
              @ParserTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_VERTICALLY;
}

@object GenTextClass ParserText = {
    GI_visMoniker = "Input:";
    GTXI_text = "SUM(1,2,3)";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
}

@object GenTriggerClass ParserTrigger = {
    GI_visMoniker = "Calculate";
    GTI_destination = process;
    GTI_actionMsg = MSG_PARSER_PROCESS_CALCULATE;
    HINT_DEFAULT_DEFAULT_ACTION;
}

@object GenTextClass ParserResultText = {
    GI_visMoniker = "Result:";
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_text = "6.0";
}

@end Interface;

/********************************************************************
 *		Code for ParserProcessClass
 *******************************************************************/


/********************************************************************
 *		ParserCallback
 ********************************************************************
 * SYNOPSIS:	 Needed callback function for ParserParseString. It
 *		 returns the token for any unrecognized strings.
 * CALLED BY:	 EXTERNAL:ParserParseString
 * RETURN:	 void
 * SIDE EFFECTS: none
 * STRATEGY:	 Use the parameter so compiler won't complain.
 *		 This will crash if the user inputs an unknown
 *		 function or name.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CP	4/15/94   	Initial Revision
 *	NF	7/8/96		Make compiler happy by using the
 *				parameter.
 *******************************************************************/
void
ParserCallback( C_CallbackStruct * cbStruct )
  /*
   * cbStruct - Contains lots of stuff. See INCLUDE\PARSE.H
   *            for a description of C_CallbackStruct.
   */
{

    cbStruct->C_align = 0;
} /* ParserCallback */


/********************************************************************
 *		MSG_PARSER_PROCESS_CALCULATE for ParserProcessClass
 ********************************************************************
 * SYNOPSIS:	 Calculates result from the formula input by the user.
 * PARAMETERS:	 void
 * RETURNS:	 void
 * SIDE EFFECTS: Updates the result text field with the result of
 *               evaluating the formula.
 * STRATEGY:	 Get the formula string, send it through the parser,
 *		 display the result.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CP	4/15/94   	Initial Revision
 *	EB	3/18/96		Made eElement correctly point to result &
 *				fixed vType to check for ESAT_NUMBER.
 *	NF	7/8/96		Make compiler happy by typecasting
 *				some assignments.
 *	NF	8/6/96		Improved handling of result. Corrected
 *				handling of empty input string.
 *******************************************************************/
@method ParserProcessClass, MSG_PARSER_PROCESS_CALCULATE
{
      /*
       * acrUserInput  - Original input expression.
       * tokenizedExpr - Tokenized expression.
       * scratch       - Used by parser evaluator.
       * result        - Holds the result of the evaluation.
       */
    char acrUserInput[100];
    byte tokenizedExpr[100];
    byte scratch[100];
    byte result[100];
      /*
       * pParams - Parameters for ParserParseString.
       * rVal    - ?
       */
    CParserStruct       pParams;
    CParserReturnStruct rVal;
      /*
       * dummy,
       * format   - Used in converting floats to strings.
       * vType    - Type of result on stack.
       * eElement - The ArgumentStackElement stored in result
       *            after call to ParserEvalExpression.
       * eParams  - Parameters for ParserEvalExpression.
       */
    FloatNum                     dummy;
    FloatFloatToAsciiFormatFlags format;
    EvalStackArgumentType        vType;
    ArgumentStackElement *       eElement;
    CEvalStruct                  eParams;

      /*
       * Get the string that contians the formula into acrUserInput.
       * NF - Return immediately if empty input string. Parser
       * doesn't like empty input strings.
       */
    @call ParserText::MSG_VIS_TEXT_GET_ALL_PTR( acrUserInput );
    if ( 0 == strlen( acrUserInput ) ) {
        return;
    }

      /*
       * Initialize the parameters that are sent to ParserParseString:
       * Since this routine is used mainly in spreadsheet objects it
       * requires the use of row, columns, and cells.  We null them out,
       * so that the function won't get confused and tries to look at
       * non-existent cells.
       */
    pParams.C_parameters.PP_common.CP_row = 0;
    pParams.C_parameters.PP_common.CP_column = 0;
    pParams.C_parameters.PP_common.CP_maxRow = 0;
    pParams.C_parameters.PP_common.CP_maxColumn = 0;
    pParams.C_parameters.PP_common.CP_cellParams = NULL;
    pParams.C_parameters.PP_parserBufferSize = 100;
    pParams.C_parameters.PP_flags = PF_OPERATORS |
	                            PF_NUMBERS |
				    PF_FUNCTIONS;
      /*
       * It also needs a callback function that gets called
       * when the string contains symbols that the parser
       * doesn't understand.
       */
#ifdef __HIGHC__
      /* NF - HighC doesn't like the (void*) */
    pParams.C_callbackPtr = ParserCallback;
#else
      /* But Borland C wants it there. */
    pParams.C_callbackPtr = (void*)&ParserCallback;
#endif

      /*
       * Parse the string and check for an error.
       * Handle errors in else condition below.
       * XXX --------------------------------------------
       *     THIS CRASHES ON UNKNOWN FUNCTIONS AND NAMES.
       * XXX --------------------------------------------
       */
    if ( !( ParserParseString( acrUserInput, tokenizedExpr,
                               &pParams, &rVal ) ) ) {

          /*
           * Initialize the paprmeters for ParserEvalExpression
           * in a similar way.
           */
	eParams.CE_parameters.EP_common.CP_row = 0;
	eParams.CE_parameters.EP_common.CP_column = 0;
	eParams.CE_parameters.EP_common.CP_maxRow = 0;
	eParams.CE_parameters.EP_common.CP_maxColumn = 0;
	eParams.CE_parameters.EP_common.CP_cellParams = NULL;
	eParams.CE_parameters.EP_flags = 0;
#ifdef __HIGHC__
          /* Placating compiler again. */
	eParams.CE_callbackPtr = ParserCallback;
#else
	eParams.CE_callbackPtr = (void*)ParserCallback;
#endif

          /*
           * Check for an error an let it be known to the user.
           * Parser crashes on illegal functions. So entering
           * "faalse()" will crash the system.
           */
	if ( ParserEvalExpression( tokenizedExpr, scratch, result,
                                   100, &eParams ) ) {
	    strcpy( (char*)result, "Error occured in evaluation." );
        }
        else {
              /*
               * We're now going to retrieve the result.
               * We have to handle a couple of cases, and
               * each is a little different.
               */
            eElement = (ArgumentStackElement*)result;
            vType = eElement->ASE_type;

              /*
               * Stack is empty or there was an error.
               */
            if ( ESAT_EMPTY == vType ) {
                strcpy( (char*)result, "Eval stack is empty." );
            }
            if ( ESAT_ERROR == vType ) {
                strcpy( (char*)result, "Error in evaulation." );
            }
              /*
               * The result is a number of some type.
               * Could be a value, a boolean (0 or 1),
               * or a date/time number. All three are handled
               * the same way - convert from float to string.
               */
            if ( ESAT_NUMBER & vType ) {
                format = 0;
                FloatFloatToAscii_StdFormat(
                    (char*)result, &dummy, format, 15, 5 );
            }
              /*
               * NF - vType must be something else, such as
               * ESAT_STRING or ESAT_RANGE. We will handle
               * that a little differently.
               * If vType is ESAT_STRING then the string length
               * is at result+1, aka ASE_data, and the string
               * is at result+3.
               */
            if ( ( ESAT_STRING == vType ) ||
                 ( ESAT_RANGE == vType ) ) {
                strcpy( (char*)result, (char*)(result + 3) );
            }
        }
    }
    else {
          /*
           * User typed in a string that was malformed.
           * They may have forgotten a ) or ".
           */
        strcpy( (char*)result, "Malformed expression." );
    }

      /*
       * Set the result in the text object.
       */
    @call ParserResultText::MSG_VIS_TEXT_REPLACE_ALL_PTR( (char*)result, 0 );
} /* MSG_PARSER_PROCESS_CALCULATE */

