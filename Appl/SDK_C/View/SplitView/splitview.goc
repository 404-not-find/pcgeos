/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1992 -- All Rights Reserved

PROJECT:	Sample Applications
MODULE:		Split GenView test app
FILE:		splitview.goc

AUTHOR:		Tom Manshreck, Oct 27, 1992

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TM	10/27/92   	Initial version.

DESCRIPTION:

	GenViews may be linked to other GenViews. 
	This application demonstrates the linking of GenViews.
	Views may be linked together in either the horizontal or
	vertical dimension, or both. Each GenView may have, if it so
	desires, one horizontal and one vertical link.
	

	$Id: splitview.goc,v 1.1 97/04/04 16:36:11 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

#define TEXT_POINT_SIZE		14.0	/* point size */
#define TEXT_X_POSITION		30	/* x position, in document coords. */
#define TEXT_Y_POSITION		20	/* y position, in document coords. */

#define DOC_WIDTH 200
#define DOC_HEIGHT 300
/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	SplitViewProcessClass, GenProcessClass ;

/* define methods for this class here. */

@message void MSG_SVP_ZOOM();
@message void MSG_SVP_UNZOOM();
@message void MSG_SVP_SCROLL_ONE();
@message void MSG_SVP_SCROLL_THREE();
@message void MSG_SVP_SET_NOT_USABLE();
@message void MSG_SVP_SET_USABLE();

@endc   /* end of class definition */

@classdecl	SplitViewProcessClass, neverSaved ;

/*
 * The StupidView subclass allows you to turn off the split view's
 * automatic linking behavior. 
 */
@class StupidViewClass, GenViewClass ;
  
@message void MSG_STUPID_VIEW_IGNORE_MESSAGES();
@message void MSG_STUPID_VIEW_UNIGNORE_MESSAGES();

  @instance byte SVI_ignoreFlag;

@endc

@classdecl    StupidViewClass ;


/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource ;

@object GenApplicationClass SplitViewApp = {

    GI_visMoniker = list { @SplitViewTextMoniker }
    GI_comp = @SplitViewPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @SplitViewPrimary;
}

@visMoniker SplitViewTextMoniker = "C SplitView Sample Application";

@end	AppResource

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass SplitViewPrimary  = {

    GI_comp = @TriggerComp, @ViewGroup;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_USE_INITIAL_BOUNDS_WHEN_RESTORED;
}

@object GenInteractionClass TriggerComp = {
    GI_comp = @ZoomComp, @ScrollComp, @SetUsableComp;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass ZoomComp = {
    GI_comp = @ZoomTrigger, @UnzoomTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_DRAW_IN_BOX;
}

@object GenInteractionClass ScrollComp = {
    GI_comp = @ScrollOneTrigger, @ScrollThreeTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_DRAW_IN_BOX;
}

@object GenInteractionClass SetUsableComp = {
    GI_comp = @SetUsableTrigger, @SetNotUsableTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_DRAW_IN_BOX;
}

@object GenTriggerClass ZoomTrigger = {
    GI_visMoniker = "Zoom 3";
    GTI_destination = process;
    GTI_actionMsg = MSG_SVP_ZOOM;
}

@object GenTriggerClass UnzoomTrigger = {
    GI_visMoniker = "Unzoom 3";
    GTI_destination = process;
    GTI_actionMsg = MSG_SVP_UNZOOM;
}

@object GenTriggerClass ScrollOneTrigger = {
    GI_visMoniker = "Scroll 1";
    GTI_destination = process;
    GTI_actionMsg = MSG_SVP_SCROLL_ONE;
}

@object GenTriggerClass ScrollThreeTrigger = {
    GI_visMoniker = "Scroll 3";
    GTI_destination = process;
    GTI_actionMsg = MSG_SVP_SCROLL_THREE;
}

@object GenTriggerClass SetNotUsableTrigger = {
  GI_visMoniker = "Set not usable";
  GTI_destination = process;
  GTI_actionMsg = MSG_SVP_SET_NOT_USABLE;
}

@object GenTriggerClass SetUsableTrigger = {
  GI_visMoniker = "Set usable";
  GTI_destination = process;
  GTI_actionMsg = MSG_SVP_SET_USABLE;
}

@object GenInteractionClass ViewGroup = {
  GI_comp = @TopComp, @BottomComp;
  HINT_ORIENT_CHILDREN_VERTICALLY;
}

@object GenInteractionClass TopComp = {
  GI_comp = @SplitView1, @SplitView2;
  HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass BottomComp = {
  GI_comp = @SplitView3, @SplitView4;
  HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object StupidViewClass SplitView1 = {
    GVI_attrs = GVA_DRAG_SCROLLING;
    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_DONT_DISPLAY_SCROLLBAR;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE | GVDA_DONT_DISPLAY_SCROLLBAR;
    GVI_vertLink = SplitView3;
    GVI_horizLink = SplitView2;
    GVI_content = process;
    GVI_docBounds = {0, 0, DOC_WIDTH, DOC_HEIGHT};
    HINT_INITIAL_SIZE = { SST_PIXELS | 120, SST_PIXELS | 100 };
}

@object GenViewClass SplitView2 = {
    GVI_attrs = GVA_DRAG_SCROLLING;
    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_DONT_DISPLAY_SCROLLBAR;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
    GVI_vertLink = SplitView4;
    GVI_horizLink = SplitView1;
    GVI_docBounds = {0, 0, DOC_WIDTH, DOC_HEIGHT};
    GVI_content = process;
    HINT_INITIAL_SIZE = { SST_PIXELS | 120, SST_PIXELS | 100 };
}

@object GenViewClass SplitView3 = {
    GVI_attrs = GVA_DRAG_SCROLLING;
    GVI_horizAttrs  = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs   = @default | GVDA_SCROLLABLE | GVDA_DONT_DISPLAY_SCROLLBAR;
    GVI_vertLink = SplitView1;
    GVI_horizLink = SplitView4;
    GVI_docBounds = {0, 0, DOC_WIDTH, DOC_HEIGHT};
    GVI_content = process;
    HINT_INITIAL_SIZE = { SST_PIXELS | 120, SST_PIXELS | 100 };
}

@object GenViewClass SplitView4 = {
    GVI_attrs = GVA_DRAG_SCROLLING;
    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
    GVI_vertLink = SplitView2;
    GVI_horizLink = SplitView3;
    GVI_docBounds = {0, 0, DOC_WIDTH, DOC_HEIGHT};
    GVI_content = process;
    HINT_INITIAL_SIZE = { SST_PIXELS | 120, SST_PIXELS | 100 };
}

@end Interface

/*
 ***************************************************************************
 *		Code for SplitViewProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_META_EXPOSED for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    This method is sent by the Windowing System when we must
 *		    redraw a portion of the document in the View area.   
 * PARAMETERS:      void (WindowHandle win) *	
 * SIDE EFFECTS:    none    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    /*
     * Get a default graphics state that we can use while drawing.
     */
    gstate = GrCreateState(win);
    /*
     * Start a window update. This tells the windowing system that we are in
     * the process of drawing to this window.
     */
    GrBeginUpdate(gstate);
    /*
     * Change some of the default GState values, such as font.
     */
    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(TEXT_POINT_SIZE));
    /*
     * Set the text color according to our textColor variable
     */
    GrSetTextColor(gstate, CF_INDEX, C_LIGHT_BLUE, 0, 0);
    /*
     * Draw some text onto the document
     */
    GrDrawText(gstate, TEXT_X_POSITION, TEXT_Y_POSITION,
		"The quick brown fox jumped over the lazy dog.", 0);

    /*
     * Now indicate that we are done drawing to the window and free the gstate.
     */
    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}


/***********************************************************************
 *		MSG_SVP_ZOOM for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Make the text bigger in all the views by sending
 *                  a message to SplitView1 and letting it propagate
 *                  through the linked views.
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_ZOOM
{
    GetScaleParams newScaleFactor;

    /*
     * Get the current scale factor for one of views to zoom and use
     * it to calculate a new scale factor that's one higher.
     */
    (void) @call SplitView2::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);
    newScaleFactor.GSP_xScaleFactor += MakeWWFixed(1);
    newScaleFactor.GSP_yScaleFactor += MakeWWFixed(1);
    /*
     * Tell SplitView1 not to act on messages it receives except by passing
     * them on to its linked views.
     */
    @call SplitView1::MSG_STUPID_VIEW_IGNORE_MESSAGES();
    /*
     * Now set the scale factor for all the views except SplitView1, which
     * will transmit the message but will not itself act on it.
     */
    @call SplitView1::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);
    /*
     * Tell SplitView1 that it should once again act on any message
     * it receives.
     */
    @call SplitView1::MSG_STUPID_VIEW_UNIGNORE_MESSAGES();
}


/***********************************************************************
 *		MSG_SVP_UNZOOM for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Make the text smaller in all the views except SplitView1
 *                  by sending a message to SplitView1 and letting it propagate
 *                  through the linked views.
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_UNZOOM
{
    GetScaleParams newScaleFactor;

    /*
     * Get the current scale factor for one of views to unzoom and use
     * it to calculate a new scale factor that's half as much.
     */
    (void) @call SplitView2::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);
    newScaleFactor.GSP_xScaleFactor /= 2;
    newScaleFactor.GSP_yScaleFactor /= 2;
    /*
     * Tell SplitView1 not to act on messages it receives except by passing
     * them on to its linked views.
     */
    @call SplitView1::MSG_STUPID_VIEW_IGNORE_MESSAGES();
    /*
     * Now set the scale factor for all the views except SplitView1, which
     * will transmit the message but will not itself act on it.
     */
    @call SplitView1::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);
    /*
     * Tell SplitView1 that it should once again act on any message
     * it receives.
     */
    @call SplitView1::MSG_STUPID_VIEW_UNIGNORE_MESSAGES();
}


/***********************************************************************
 *		MSG_SVP_SCROLL_ONE for SpliViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Vertically scrolls one View (the Stupid View) without
 *		    scrolling the View to which it is horizontally linked
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_SCROLL_ONE {
    EventHandle scrollMessage;

    /*
     * Record a message which will scroll SplitView1 up by 10 and
     * right by 0. Then send the message to SplitView1 in such a way
     * that its linked views won't get it. Note that horizontally
     * linked views share vertical scroll events and vertically linked
     * views share horizontal scroll events. Since in this case the
     * horizontal component of the amount to be scrolled is zero,
     * SplitView1's vertical link, SplitView3, would not scroll even
     * if we were not using MSG_GEN_VIEW_CALL_WITHOUT_LINKS.
     */
    scrollMessage = @record SplitView1::MSG_GEN_VIEW_SCROLL(10L, 0L);

    @call SplitView1::MSG_GEN_VIEW_CALL_WITHOUT_LINKS(
		scrollMessage, MF_CALL);
}


/***********************************************************************
 *		MSG_SVP_SCROLL_THREE for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Scroll three of the views by sending a message to one 
 *                  of them and letting it propagate to the linked views.
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_SCROLL_THREE {
    /*
     * Tell SplitView4 to scroll up by 10 and right by 10. It will both
     * do so and pass the message on to its linked views; its vertical
     * link, SplitView2, will scroll right, and its horizontal
     * link, SplitView3, will scroll up.
     */
    @call SplitView4::MSG_GEN_VIEW_SCROLL(10L, 10L);
}


/***********************************************************************
 *		MSG_SVP_SET_USABLE for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the ViewGroup usable.
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_SET_USABLE {
    @call ViewGroup::MSG_GEN_SET_USABLE(VUM_NOW);
}


/***********************************************************************
 *		MSG_SVP_SET_NOT_USABLE for SplitViewProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the ViewGroup unusable.
 * PARAMETERS:	    void(void)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method SplitViewProcessClass, MSG_SVP_SET_NOT_USABLE {
    @call ViewGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
}

/*********************************
 *
 *    StupidViewClass messages
 *
 ********************************/


/***********************************************************************
 *		MSG_STUPID_VIEW_IGNORE_MESSAGES for StupidViewClass
 ***********************************************************************
 * SYNOPSIS:	    Set the ignoreFlag in the view's instance data TRUE.
 * PARAMETERS:	    void (void)    
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method StupidViewClass, MSG_STUPID_VIEW_IGNORE_MESSAGES {
    pself->SVI_ignoreFlag = TRUE;
}


/***********************************************************************
 *		MSG_STUPID_VIEW_UNIGNORE_MESSAGES for StupidViewClass
 ***********************************************************************
 * SYNOPSIS:	    Set the ignoreFlag in the view's instance data FALSE.
 * PARAMETERS:	    void (void)    
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method StupidViewClass, MSG_STUPID_VIEW_UNIGNORE_MESSAGES {
    pself->SVI_ignoreFlag = FALSE;
}


/***********************************************************************
 *		MSG_GEN_VIEW_SEND_TO_VLINK for StupidViewClass
 ***********************************************************************
 * SYNOPSIS:	    Sends a GenView message to the vertical link.  We'll 
 *                  subclass it to avoid dispatching the message to
 *		    ourselves, if the ignore flag is set.   
 * PARAMETERS:	    void (EventHandle event, optr originator)    
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method StupidViewClass, MSG_GEN_VIEW_SEND_TO_VLINK {
    if (pself->SVI_ignoreFlag) {
    	if (originator != pself->GVI_vertLink) {
      	    @call pself->GVI_vertLink::MSG_GEN_VIEW_SEND_TO_VLINK(
				event, originator);
    	}
    } 
    else {
    	@callsuper();
    }
}


/***********************************************************************
 *		MSG_GEN_VIEW_SEND_TO_HLINK for StupidViewClass
 ***********************************************************************
 * SYNOPSIS:	    Sends a GenView message to the horizontal link.  We'll 
 *                  subclass it to avoid dispatching the message to
 *		    ourselves, if the ignore flag is set.   
 * PARAMETERS:	    void (EventHandle event, optr originator)    
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method StupidViewClass, MSG_GEN_VIEW_SEND_TO_HLINK {
    if (pself->SVI_ignoreFlag) {
    	if (originator != pself->GVI_horizLink) {
      	    @call pself->GVI_horizLink::MSG_GEN_VIEW_SEND_TO_HLINK(
				event, originator);
    	}
    } 
    else {
    	@callsuper();
    }
}


