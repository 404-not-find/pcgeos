/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1993 -- All Rights Reserved

PROJECT:	GEOS Sample Application	
MODULE:		Benoit (Mandelbrot Set Sample Application)
FILE:		benoit.goc

AUTHOR:		Tom Lester, Aug  3, 1993

METHODS:
	Name		Description
	----		-----------
	MSG_VIS_RECALC_SIZE
	                Specify how big we want the document object to be

	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
                  	Initialize a newly-created document file.

	MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
	                Create the MSet object for this document

	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
	                Initialize the MSet object and add it
			as a child of the document

	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
	                Remove the MSet object from the vis tree

	MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
	                Destroy the MSet object

	MSG_GEN_DOCUMENT_SAVE_AS
                        subclassed to re-initialize the MSet object with 
			the new file handle

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TL	8/10/93   	Initial version.

DESCRIPTION:
	This file contains the BDocumentClass declaration and the
	methods for the BDocumentClass.

	$Id: bDocC.goc,v 1.1 97/04/04 16:39:44 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include "Document/bDocC.goh"	/* BDocumentClass definition */

@define __BENOIT_DOC_DOCUMENT_GOC	/* don't over-define */
@include "benoit.goh"			/* Benoit Application */

@include <Objects/SDK_C/msetC.goh> /* MSet class definition */
@include <SDK_C/mset.goh>	/* MSet structures and definitions */
@include "Local/BStrings.goh"	/* @chunk string declarations */

/*
 ***************************************************************************
 *		Class Declaration
 ***************************************************************************
 */
@classdecl	BDocumentClass ;


/*
 **********************************************************************
 *	Template MSet Object Resource
 * 
 *	This resource will be duplicated by the GenDocument object and
 *	contains the MSet object that will be placed under the GenDocument.
 *********************************************************************
 */
@start MSetTemplateResource, notDetachable;

/*
 * This MSet object is not actually used.  Instead, the
 * entire resource is duplicated, and the duplicates of this
 * object are used by the GenDocument.
 */
@object MSetClass templateMSet = {
}

@end MSetTemplateResource;

/*
 ***************************************************************************
 *		Code for BDocumentClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_VIS_RECALC_SIZE for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Specify how big we want the document object to be
 * PARAMETERS:	    SizeAsDWord (word width, word height)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:	    We ignore the suggested width and height and insist
 *		    on our predetermined dimensions.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/23/93		Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_VIS_RECALC_SIZE
{
    return( MAKE_SIZE_DWORD(DOCUMENT_WIDTH, DOCUMENT_HEIGHT) );
}



/***********************************************************************
 *	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize a newly-created document file.
 * PARAMETERS:	    void
 * RETURN:	    Boolean - True if the new file could not be initialized.
 *                 
 * SIDE EFFECTS:    The map block is allocated, initialized and set for
 *		    the file. 
 *
 * CONTEXT:         
 *   When a new document is created, the document object sends this 
 *   message to itself. VM file based applications will generally 
 *   respond to this message by allocating and initializing the map 
 *   block. DOS file based applications will commonly initialize data 
 *   structures for a default file. If an application maintains data 
 *   caches for its files, it should initialize the caches at this point.
 *
 *   The application should not take any UI-related actions; those 
 *   should be postponed until the messages 
 *   MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT and 
 *   MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT are received.
 * 
 * STRATEGY: 	    Handle this message by creating our version of an empty
 *		    document, which is a map block with the BDocMapBlock
 *		    structure in it. Initialize the MSet object and save
 *                  the returned MSet data block VMBlockHandle in the 
 *                  map block.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/11/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
    VMBlockHandle mapBlock;  /* VM block handle of the file's map block,
			      * which holds the VMBlockHandle of the 
			      * MSet data block */

    /* First, call the superclass to preserve all default
     * functionality of the method.  Then dereference the
     * pself pointer to the object's instance data. */
    @callsuper();
    pself = ObjDerefGen( oself );

    /*
     * Allocate a block, make it the map block and initialize it
     */
    mapBlock = VMAlloc(pself->GDI_fileHandle, sizeof(BDocMapBlock), 0);
    VMSetMapBlock(pself->GDI_fileHandle, mapBlock);

    return(FALSE);	/* Return no error */
}	/* End of MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE.	*/



/***********************************************************************
 *		MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    create the MSet object for this document
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    
 *
 * CONTEXT:
 *   The GenDocument object sends this message to itself after a 
 *   document has been created or opened. Before this message is 
 *   sent, the GenDocumentControl object will enable those objects
 *   on its GDCI_enableDisableList, and the GenDocumentGroup object
 *   will copy the GenDisplay block for the document (if one is defined).
 * 
 *   Applications that use dynamic UI objects will commonly respond 
 *   to this message by creating the objects for the newly-opened 
 *   document. Applications that use static UI objects will commonly 
 *   respond to this message by enabling the objects.
 *
 * STRATEGY:   
 *   This method uses ObjDuplicateResource() to duplicate the
 *   template 'templateMSet' located within MSetTemplateResource.
 *   Then we save the optr to the MSet object in the document 
 *   instance data.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/30/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
{
    /*
     * This will temporarily hold the handle of the newly duplicated
     * templateMSet block.
     */
    MemHandle newBlock;
    /*
     * This will hold the optr of the new MSet in newly duplicated
     * block. 
     */
    optr newMSet;

    /* 
     * First, call the superclass to preserve all default
     * functionality of the method.  Then dereference the
     * pself pointer to the object's instance data. 
     */
    @callsuper();
    pself = ObjDerefGen( oself );

    /*
     * Copy a MSet block with ObjDuplicateResource().
     *
     * ObjDuplicateResource() is used to duplicate the entire template
     * object block containing the MSet object.
     *
     * We pass ObjDuplicateResource() the MemHandle of the object
     * block to duplicate, 0 to have the process own the new object,
     * and 0 to have the process thread run the object.
     */
    newBlock = ObjDuplicateResource( OptrToHandle(@templateMSet), 0, 0);

    /*
     * The MSet object within the newly duplicated block has the same
     * chunk handle it has in the template block, so we can construct the
     * optr of the new MSet object from the newly duplicate block's block
     * handle and the chunk handle of the MSet object.
     */
    newMSet = ConstructOptr(newBlock, OptrToChunk(@templateMSet) );
    
    /* 
     * Save the optr to the new MSet object in the instance data 
     * of the document so we can access it later.
     */
    pself->BDI_mset = newMSet;

    /* 
     * Set up the memory block that contains the new MSet object to 
     * be saved to the state file when the user exits to DOS.
     */
    ObjSaveBlock( newBlock );     

}	/* End of MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT.	*/



/***********************************************************************
 *		MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    initialize the MSet object and add it
 *                  as a child of the document
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    The mset object is initialized.
 *
 * CONTEXT:
 *   The document object sends this message to itself when the UI 
 *   for a newly-opened document has been created. It also sends
 *   this message when re-opening a document as part of restoring 
 *   GEOS from a state file. Applications may respond to this by 
 *   attaching dynamic UI objects and setting the values of static 
 *   UI objects.
 * 
 * STRATEGY:
 *  	Call the superclass to preserve old functionality.
 *  	Add the MSet object to our list of children, and send it an
 *	invalidation message so it is marked for a visual update.
 *	
 *	Send the MSet object the proper initialization message depending on
 *	whether this is a new file or an already existing file.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/30/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
    VMBlockHandle mapBlock;  /* VM block handle of the file's map block,
			      * which holds the VMBlockHandle of the 
			      * MSet data block */
    BDocMapBlock *mapPtr;    /* The locked map block */
    MemHandle mem;  	     /* Memory handle of the locked map block,
			      * for marking the block dirty */
    VMBlockHandle dataBlock; /* VM block handle of the MSet data block. */

    CustomDialogBoxFlags errDialogFlags = 
	(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
	    (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET);
				/* Flags to pass to UserStandardDialog */
				/* These flags determine the format of the */
				/* dialog which will appear on screen. */


    @callsuper();
    pself = ObjDerefGen( oself );


    /*
     *	Set up the MSet by adding it to our child list and marking it as
     *	invalid.  Also, have it grab the target exclusive so the target
     *	chain will lead to it.  The controllers send their notification
     *	messages to the application's target object, and we want the MSet to
     *	receive them.
     *	
     *	The message MSG_META_GRAB_TARGET_EXCL is the method equivalent of
     *	the GenClass hint HINT_DEFAULT_TARGET.
     */
    @call self::MSG_VIS_ADD_CHILD(pself->BDI_mset, CCO_LAST);
    @call pself->BDI_mset::MSG_VIS_MARK_INVALID(VOF_WINDOW_INVALID, 
						 VUM_NOW);
    @call pself->BDI_mset::MSG_META_GRAB_TARGET_EXCL();


    /*
     *	Now we can initialize the MSet object.
     *
     *	If we don't already have a VM block set aside for the MSet's use,
     *	we pass a NULL VMBlockHandle, and the MSet will set one up for
     *	itself.  We must save the handle of the block it creates for later
     *	reference.  We'll store it in the VM Map Block, so it's easy to get
     *	at. 
     *	
     *	If some previous MSet has set up a parameters block in this VM File
     *	(ie, this is not a new file), we pass that block to the MSet's
     *	initialization method.
     */
    if (pself->GDI_operation == GDO_NEW)
    {				/* MSet's block doesn't exist yet */
	dataBlock = @call pself->BDI_mset::
	    MSG_MSET_INITIALIZE(pself->GDI_fileHandle, NullHandle);

	pself = ObjDerefGen(oself);
	
	/*
	 * Fetch and lock down the map block for the file so we can 
	 * save the MSet data block VMBlockHandle in it.  Since we 
	 * are modifying the contents of the block it is essential
	 * that we call VMDirty to let the VM code know that the 
	 * block is modified, and do it *before* we call VMUnlock 
	 * (else the block might be thrown out before we can mark 
	 * it dirty).
	 */
	mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
	mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
	VMDirty(mem);
	mapPtr->BDMB_dataBlock = dataBlock;
	VMUnlock(mem);
    }
    else			/* Block should already exist */
    {
	/* 
	 * Fetch and lock down the map block for the file.
	 * Grab the VMBlockHandle of the MSet data block out of it, and use
	 * it to initialize the MSet.
	 */
	mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
	mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
	dataBlock = @call pself->BDI_mset::
	    MSG_MSET_INITIALIZE(pself->GDI_fileHandle,
				mapPtr->BDMB_dataBlock);
	VMUnlock(mem);
    }


    /*
     *	If the MSet returned NullHandle (this is its error signal), put up a
     *	dialog for the user.  Otherwise, tell the MSet to start calculating.
     */
    if (dataBlock == NullHandle)
    {
	UserStandardDialogOptr
	    (NullOptr,		/* help context */
	     NullOptr,		/* custom triggers */
	     NullOptr,		/* arg2 to string */
	     NullOptr,		/* arg1 to string */
	     @InitErr,		/* string */
	     errDialogFlags);	/* dialog type */
    }
    else
    {
	@send pself->BDI_mset::MSG_MSET_CONTINUE_CALCULATION();
    }
}	/* End of MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT.	*/



/***********************************************************************
 *		MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    remove the MSet object from the vis tree
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    
 *
 * CONTEXT:
 *   The document object sends this message when a document is 
 *   being closed, whether because a user closes the file or because 
 *   the application is being closed. It also sends this message 
 *   when GEOS is in the process of saving itself to a state file
 *   prior to shutting down. Applications generally respond to this 
 *   by detaching dynamic UI objects. Note that the GenDocumentControl
 *   object will automatically disable any objects in its 
 *   GDCI_enableDisableList.
 *
 * STRATEGY:
 *   First tell the MSet object to stop calculation so we will not have to
 *   worry about it trying to write to a closed VM file.  We take advantage
 *   of the fact that MSG_MSET_STOP_CALCULATION is set up to synchronously
 *   stop the calculation thread.  We then remove it from our visual tree.
 * 
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/30/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
{
    /* 
     * We need to have the MSet object destroy its calculation thread
     * and unlock the VM blocks. Do this by calling the mset object
     * with MSG_MSET_STOP_CALCULATION.  This message also nulls the
     * VMFileHandle in the mset object's instance data so any messages 
     * left in its queue will know that the VM file is gone.
     *
     * NOTE: must use a call so that the VM blocks are unlocked by the 
     *       time this call returns.
     */
    @call pself->BDI_mset::MSG_MSET_STOP_CALCULATION();  

    /*
     * remove the MSet object from the document 
     */
    @call pself->BDI_mset::MSG_VIS_REMOVE(VUM_NOW);

    /* Now, call the superclass to preserve all default
     * functionality of the method.  We don't need to 
     * dereference the pself pointer to the object's 
     * instance data because we don't use it before we 
     * return from the method. */
    @callsuper();

}	/* End of MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT.	*/



/***********************************************************************
 *		MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    destroy the MSet object
 * PARAMETERS:	    void ()
 * SIDE EFFECTS:    the mset object block is destroyed.
 *
 * CONTEXT:
 *   The GenDocumentGroup object sends this message out when a 
 *   document is being closed, whether because a user closes the 
 *   file or because the application is being closed. Applications
 *   will generally disable static display objects and delete dynamic
 *   display objects. Note that the GenDocumentControl object will 
 *   automatically disable all objects in its GDCI_enableDisableList,
 *   and the GenDocumentGroup will delete the display block it created 
 *   for a document, if any.
 * 
 * STRATEGY:
 *   Just destroy the resource block that was duplicated for the 
 *   Mset object.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/30/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
{

    /* free the duplicated block */
    @send pself->BDI_mset::MSG_META_BLOCK_FREE();

    /* null the mset pointer */
    pself->BDI_mset = NULL;

    /* Now, call the superclass to preserve all default
     * functionality of the method. */
    @callsuper();

}	/* End of MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT.	*/



/***********************************************************************
 *		MSG_GEN_DOCUMENT_SAVE_AS for BDocumentClass
 ***********************************************************************
 * SYNOPSIS:	Re-initialize the MSet object
 * PARAMETERS:	word error   -- a pointer to a word in which an error 
 *                              should be returned
 *		FileHandle file -- FileHandle of the associated file
 *
 * RETURN:	Boolean -- true if error occurs
 *		*error  -- FileError code (or zero if no error)
 * 
 * CONTEXT:	This message is sent when the user does a save-as
 *		or when the document is initially saved.
 *
 * STRATEGY:
 *	The Save-as operation changes the VMFileHandle, so we need to
 *	re-initialize the MSet object after the save-as is done and the file
 *	handle has been changed.
 *	
 *	We don't bother re-initializing the MSet if the document is in the 
 *	process of being closed.
 *	
 *	Un-initialize the MSet object.
 *	Call the superclass to do the save-as operation.
 *	Re-initialize the MSet object with the new file handle.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	9/ 7/93   	Initial Revision
 *
 ***********************************************************************/
@method BDocumentClass, MSG_GEN_DOCUMENT_SAVE_AS
{
    VMBlockHandle	mapVM;	/* VM block handle of the file's map block, */
    				/* which holds the VMBlockHandle of the MSet */
				/* data block */
    MemHandle		mapH;	/* Memory handle of the locked map block, */
				/* for marking the block dirty */
    BDocMapBlock*	mapP;	/* The locked map block */

    VMBlockHandle msetDataVM;	/* VM block handle of the MSet data block. */
    Boolean		retval;


    @call pself->BDI_mset::MSG_MSET_STOP_CALCULATION();

    retval = @callsuper();
    pself = ObjDerefGen( oself );

    /* 
     * Reinitialize and restart the MSet object passing the VMFileHandle
     * and VMBlockHandle of the MSet data block except if this
     * MSG_GEN_DOCUMENT_SAVE_AS is part of a document closing operation.
     * We can check this by examining the GDI_operation field of the
     * GenDocument.
     */
    if (pself->GDI_operation != GDO_CLOSE &&
	pself->BDI_mset != NULL)
    {
	/* 
	 * Fetch and lock down the map block for the file.
	 * Grab the VMBlockHandle of the MSet data block out of it.
	 */
	mapVM = VMGetMapBlock(pself->GDI_fileHandle);
	mapP =  VMLock(pself->GDI_fileHandle, mapVM, &mapH);
	msetDataVM = mapP->BDMB_dataBlock;
	VMUnlock(mapH);
	
	@call pself->BDI_mset::
	    MSG_MSET_INITIALIZE(pself->GDI_fileHandle, msetDataVM);
	@call pself->BDI_mset::MSG_MSET_CONTINUE_CALCULATION();
    }

    return retval;
}	/* End of MSG_GEN_DOCUMENT_SAVE_AS.	*/

