/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	Sample Applications
 * MODULE:	Multiple Document-in-a-view Sample
 * FILE:	multview.goc
 * AUTHOR:	Tony Requist: September 4, 1991
 *
 * REVISION HISTORY:
 *	Date	Name	    Description
 *	----	----	    -----------
 *	9/4/91	tony	    Initial version
 *
 * DESCRIPTION:
 *	This is one of the sample applications that demonstrate the use
 *	of the GenDocumentControl object. This particular one shows the
 *	display of the document through a GenView, with the GenDocument
 *	object acting as the VisContent part of the view/content pair.
 *	You should especially note that this is identical to DocView, the
 *	sample app that handles only a single document at a time, with the
 *	exception of a GenDisplayControl/GenDisplayGroup/GenDisplay sequence,
 *	and a couple extra attributes set in the GenDocumentControl.
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	All the sample applications in the Document subdirectory except
 *      DosFile share a common document format: a VM file whose map block
 *      stores the X and Y position, in document coordinates, of a small
 *      blue square. Most of the applications, including this one, actually
 *      display such a square; when you click the mouse in the view, the
 *	coordinates of the square change to be where you clicked. 
 *
 *	You should understand about VM files [Con 19] and how to manipulate
 *	them before reading on.
 *
 *		      Document Control Overview [Obj 13]
 *
 *	The document-control system of GEOS is made from three object
 *	classes that work together to produce an harmonious whole (sorry,
 *	got carried away there). The responsibilities are divided as follows:
 *
 *	GenDocumentControl  	is responsible for providing what you might
 *				consider the UI of the document control. It
 *				produces menus, submenus, and dialog boxes
 *				with which the user interacts when s/he wishes
 *				to open, close, create, or save a document.
 *				It usually is run by the UI thread of an
 *				application, to provide fast feedback to
 *				the user.
 *
 *	GenDocument 	    	is the low-level object that deals with a
 *				single document file. It does all the work
 *				of interacting with the file and VM systems
 *	    	    	    	to save/revert/auto-save/revert the document
 *				itself.
 *
 *	GenDocumentGroup    	is a conduit between the GenDocumentControl
 *				and the GenDocument objects. It is responsible
 *				for creating, managing, and destroying the
 *				GenDocument objects, selecting a single object
 *				as the current document, etc. GenDocumentGroup
 *	    	    	    	instantiates a separate GenDocument object
 *				for each document it's told by the
 *				GenDocumentControl to manage.
 *
 *
 *		      Multiple Document Interface [Obj 4]
 *
 *	The ease with which we've changed from a single-document application
 *	into a multiple-document application is owed to another trio of
 *	objects organized along identical lines to the trio that make up
 *	the document-control:
 *
 *	GenDisplay  	    	is akin to a GenInteraction, in that it is
 *	    	    	    	used to organize other generic objects. Unlike
 *	    	    	    	a GenInteraction, which may or may not have a
 *	    	    	    	window of its own, GenDisplays always open
 *	    	    	    	their own window. GenDisplays generally stay
 *				on-screen longer than windowed GenInteractions,
 *				which tend to be dialog boxes and menus.
 *
 *	GenDisplayGroup	    	organizes all the GenDisplay objects for an
 *				application. It provides methods whereby all
 *				the displays can be manipulated en masse.
 *
 *	GenDisplayControl   	gives the user the UI whereby s/he can invoke
 *				the methods of the GenDisplayGroup, as the
 *				GenDisplayGroup has no UI of its own.
 *
 *	$Id: multview.goc,v 1.1 97/04/04 16:36:38 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

/*
 * The major and minor protocol number for the document file is an abstract
 * thing, given meaning only with respect to other protocol numbers, as
 * described in [Con 6.1.7] and [Obj 13.5.1]. In our case, we've never changed
 * the format of our document, so our protocol number remains 1.0
 */
#define DOCUMENT_PROTOCOL_MAJOR	1
#define DOCUMENT_PROTOCOL_MINOR	0

/*
 * Define the extent of the coordinate space on our document. It's specified
 * in terms of points, so our document is 20 inches by 20 inches.
 */
#define DOCUMENT_WIDTH		(20*72)
#define DOCUMENT_HEIGHT		(20*72)

#define VIEW_BACKGROUND_COLOR	C_WHITE

/*
 * Initial position (in document coordinates) of our mystical blue square.
 */
#define INITIAL_X_POS		20
#define INITIAL_Y_POS		20

/*
 * Dimensions (in document coordinates) of our blue square.
 */
#define BOX_WIDTH		10
#define BOX_HEIGHT		10

/*
 * This is the structure of a datafile.  It is incredibly simple, storing just
 * a x,y position of the center of the square in the VM file's map block.
 */

typedef	struct {
    word	MVMB_xPos;
    word	MVMB_yPos;
} MVMapBlock;

/*
 ***************************************************************************
 *		Global variables
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	MVProcessClass, GenProcessClass ;
@endc   /* end of class definition */

/*
 * MVDocument class is our subclass of GenDocument that we use to add
 * behavior to the GenDocument
 */

@class	MVDocumentClass, GenDocumentClass ;
@endc


@classdecl	MVProcessClass, neverSaved ;
@classdecl	MVDocumentClass ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 *		Application Object
 */

@start	AppResource ;

@object GenApplicationClass MVApp = {
    GI_visMoniker = list { @MVTextMoniker }
    GI_comp = @MVPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @MVPrimary;
    /*
     * The GenDocumentControl object must be on the "active list" so it can
     * have access to the AppLaunchBlock, passed with MSG_META_ATTACH, that
     * contains the data file the application is supposed to open.
     *
     * The GenDisplayControl object must also be on the "active list" so it
     * will always be on the GCN list to be notified of changes in the
     * ordering of GenDisplays under the GenDisplayGroup even if the menu
     * in which the GenDisplayControl is located has never been brought down
     * (so the GenDisplayControl would otherwise never have been built).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) = @MVDocumentControl,
	@MVDisplayControl;
    /*
     * The GenDocumentControl object must also be on the "application startup"
     * list so the application can manipulate documents when started as a
     * server for another application (NOTE: it must be on this list even if
     * you don't ever expect your application to act as such a server).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) = @MVDocumentControl;
    /*
     * The GenDocumentControl and GenDisplayControl will load their saved
     * options from the .ini file by themselves, but need to be told when to
     * save them.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
	@MVDocumentControl,
	@MVDisplayControl;
    /*
     * Specify the INI file category [Con 6.3] under which to save all options
     * for this application.
     */
    ATTR_GEN_INIT_FILE_CATEGORY = "multview";
}

@visMoniker MVTextMoniker = "C MultView Sample Application";

@end	AppResource

/*
 *		Primary window
 */

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass MVPrimary  = {
    GI_comp = @MVFileMenu, @MVWindowMenu, @MVDisplayGroup;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenInteractionClass MVFileMenu = {
    /*
     * Turn this thing into the File menu for the application. In an ideal
     * world, we could just turn the GenDocumentControl object into the
     * File menu and be done with it (it is a subclass of GenInteraction,
     * after all). Sadly, due to implementation details, GenDocumentControl
     * can only be a GIV_ORGANIZATIONAL interaction, so we have a separate
     * GIV_POPUP interaction to contain it.
     */
    GI_comp = @MVDocumentControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

@object GenInteractionClass MVWindowMenu = {
    /*
     * Turn this thing into the Window menu for the application. In an ideal
     * world, we could just turn the GenDisplayControl object into the
     * Window menu and be done with it (it is a subclass of GenInteraction,
     * after all). Sadly, due to implementation details, GenDisplayControl
     * can only be a GIV_ORGANIZATIONAL interaction, so we have a separate
     * GIV_POPUP interaction to contain it.
     */
    GI_comp = @MVDisplayControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_WINDOW_MENU);
}

@object GenDisplayControlClass MVDisplayControl = {
}

/*
 *	GenDocumentControl
 *
 * There are a few things to keep in mind when deciding in what resource to
 * place the GenDocumentControl object:
 *	1) because it must be on the application's MGCNLT_ACTIVE_LIST list,
 *	   the resource that contains it will always be brought in on start-up.
 *	   If that resource is particularly large, it could slow down the
 *	   application's start-up.
 *	2) it is actually used only rarely, when the user wishes to open, close
 *	   or save a document.
 *	3) it creates a number of different objects (triggers for the File
 *	   menu, dialog boxes, etc.) that could make the resource in which
 *	   it sits become somewhat bloated.
 * If there were more elements of the File menu (for example, a
 * SpoolPrintControl object), you might put all the elements into a single
 * FileMenu resource. For this example, however, we're just going to put it
 * in the Interface resource, as there's not much else for this app to do.
 */

@object GenDocumentControlClass MVDocumentControl = {
    /*
     * Document file's token
     */
    GDCI_documentToken = { "SAMP", MANUFACTURER_ID_GEOWORKS };
    /*
     * Text to display in the header area of the primary when no
     * document is open.
     */
    GDCI_noNameText = "No Document";
    /*
     * Specify subdirectory of SP_TEMPLATE in which Use Template... should look.
     */
    GDCI_templateDir = "Sample";
    /*
     * Special attributes: allow multiple open files, don't display
     * name on primary (this will be handled via the display control)
     */
    GDCI_attrs = @default | GDCA_MULTIPLE_OPEN_FILES;
    GDCI_features = @default & ~GDCF_NAME_ON_PRIMARY;
    /*
     * Pointer to the GenDocumentGroup, which manages the GenDocument objects
     * themselves (run by the process thread, usually).
     */
    GDCI_documentGroup = MVDocumentGroup;
}

@end Interface

/*
 *	Document Group
 *
 * The GenDocumentGroup should be put in a resource of its own run by
 * the application thread. It is responsible for creating and administering
 * the various GenDocument objects (one per document), coordinating its actions
 * with the GenDocumentControl object.
 */

@start DocumentUI ;

@object GenDocumentGroupClass MVDocumentGroup = {
    /*
     * Name for untitled documents
     */
    GDGI_untitledName = "MV Untitled";
    /*
     * Class for document objects
     */
    GDGI_documentClass = &MVDocumentClass;
    /*
     * In order to display multiple documents, we cannot have just a single
     * view in which all the documents are displayed. Instead, each document
     * is shown within its own GenDisplay, which contains a GenView for which
     * the MVDocument object becomes the content.
     *
     * After instantiating the MVDocument object, the GenDocumentGroup will
     * duplicate the resource containing MVDisplay and add the display as
     * a generic child of MVDisplayGroup, then make the MVDocument object be
     * the content for the duplicated MVView. In this way, the process of
     * dealing with the GenDisplayControl et al is competely taken care of
     * for you.
     *
     * NOTE: if you specify both GDGI_genDisplay and GDGI_genView, the GenView
     * *must* lie in the same resource as the GenDisplay. The resource should
     * contain only those objects required to display the document within the
     * GenDisplay; do not attempt to make the same resource hold objects for
     * some other purpose, as this will just waste memory.
     */
    GDGI_genDisplayGroup = MVDisplayGroup;
    GDGI_genDisplay = MVDisplay;
    GDGI_genView = MVView;
    /*
     * Document protocol
     */
    GDGI_protocolMajor = DOCUMENT_PROTOCOL_MAJOR;
    GDGI_protocolMinor = DOCUMENT_PROTOCOL_MINOR;
    /*
     * Pointer to the GenDocumentControl
     */
    GDGI_documentControl = MVDocumentControl;
}

@end DocumentUI;

/*
 *	GenDisplayGroup object
 *
 * Manages and actually manipulates all the GenDisplay objects the document
 * control creates for us. The GenDisplay objects are clipped to our bounds,
 * in most specific UI's, so we make them sizeable.
 */

@start Interface ;

@object GenDisplayGroupClass MVDisplayGroup = {
    /*
     * Specify the size to which we want to open (to give our children enough
     * room) to be 70% of the screen (field) width, and 55% of the screen
     * height.
     */
    HINT_INITIAL_SIZE = {
	SST_PCT_OF_FIELD_WIDTH | PCT_70,
	SST_PCT_OF_FIELD_HEIGHT | PCT_55,
	0
    };

    /*
     * Make sure that we snag the focus and the target [Con 12.5] from the
     * GenPrimary when we come up on-screen, so any GenDisplay we adopt
     * will get the focus and target if it wants it.
     */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
}

@end Interface

/*
 *	Resource to duplicate for each document. The only objects that should
 *	be in this resource are the ones for displaying a particular document.
 */

@start DisplayUI ;

@object GenDisplayClass MVDisplay = {
    /*
     * The display starts not usable since it is not in the generic tree.
     * It will be set usable by the GenDocumentGroup after being added as a
     * child of the display group.
     */
    GI_states = @default & ~GS_USABLE;
    GI_comp = @MVView;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
}

@object GenViewClass MVView = {
    /*
     * Specify the bounds of the document the view will be displaying to be
     * the dimensions of the documents we create.
     */
    GVI_docBounds = {0, 0, DOCUMENT_WIDTH, DOCUMENT_HEIGHT};

    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;

    /*
     * This view will not take text input, so specify that no floating
     * keyboard should come up.
     */
     ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@end DisplayUI

/*
 ***************************************************************************
 *		Code for MVDocumentClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_VIS_RECALC_SIZE for MVDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Specify how big we want the document object to be
 * PARAMETERS:	    SizeAsDWord (word width, word height)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:	    We ignore the suggested width and height and insist
 *		    on our predetermined dimensions.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/91		Initial Revision
 *
 ***********************************************************************/
@method MVDocumentClass, MSG_VIS_RECALC_SIZE
{
    return( MAKE_SIZE_DWORD(DOCUMENT_WIDTH, DOCUMENT_HEIGHT) );
}


/***********************************************************************
 *	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for MVDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize a newly-created document file.
 * PARAMETERS:	    Boolean (void)
 * SIDE EFFECTS:    The map block is allocated, initialized and set for
 *		    the file.
 *
 * STRATEGY: 	    Handle this message by creating our version of an empty
 *		    document, which is a map block with the MVMapBlock
 *		    structure in it and initialized to default values.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/91		Initial Revision
 *
 ***********************************************************************/
@method MVDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
    VMBlockHandle mapBlock; /* VM block handle of the file's map block,
			     * which holds the coordinates of the mystic
			     * square. */
    MVMapBlock *mapPtr;	    /* The locked map block */
    MemHandle mem;  	    /* Memory handle of the locked map block,
			     * for marking the block dirty */

    /*
     * Allocate a block, make it the map block and initialize it
     */
    mapBlock = VMAlloc(pself->GDI_fileHandle, sizeof(MVMapBlock), 0);
    VMSetMapBlock(pself->GDI_fileHandle, mapBlock);

    /*
     * Lock the newly created block so that we can use it.  Since we
     * are modifying the contents of the block it is essential that we
     * call VMDirty to let the VM code know that the block is modified,
     * and do it *before* we call VMUnlock (else the block might be
     * thrown out before we can mark it dirty).
     */
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
    VMDirty(mem);
    mapPtr->MVMB_xPos = INITIAL_X_POS;
    mapPtr->MVMB_yPos = INITIAL_Y_POS;
    VMUnlock(mem);

    return(FALSE);	/* Return no error */
}


/***********************************************************************
 *		MSG_VIS_DRAW for MVDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Draw ourselves in the document space.
 * PARAMETERS:	    void (DrawFlags drawFlags, GStateHandle gstate)
 * SIDE EFFECTS:    Attributes of the gstate are altered.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/91		Initial Revision
 *
 ***********************************************************************/
@method MVDocumentClass, MSG_VIS_DRAW
{
    VMBlockHandle mapBlock; /* VM block handle of the map block, which
			     * contains the coordinates of the mystic square */
    MVMapBlock *mapPtr;	    /* Locked map block */
    MemHandle mem;  	    /* Memory handle of same, for unlocking the block */
    VisInstance *visPtr;    /* The Vis portion of our instance data, so we
			     * can get our bounds */

    /*
     * If we were not called as the result of a MSG_META_EXPOSED, then we need
     * to clear the object first (otherwise we're only permitted, by the
     * graphics system, to draw to the invalid portion of the view, which has
     * been cleared out by the system for us).
     */

    if (!(drawFlags & DF_EXPOSED)) {
	GrSetAreaColor(gstate, CF_INDEX, VIEW_BACKGROUND_COLOR, 0, 0);
	visPtr = ObjDerefVis(oself);
	GrFillRect(gstate, visPtr->VI_bounds.R_left, visPtr->VI_bounds.R_top,
		   visPtr->VI_bounds.R_right, visPtr->VI_bounds.R_bottom);
    }
    /*
     * Change to the color of our mystical square.
     */
    GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_BLUE, 0, 0);

    /*
     * Get position from data file and draw the rectangle
     */

    mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
    GrFillRect(gstate,
	       mapPtr->MVMB_xPos - BOX_WIDTH/2,
	       mapPtr->MVMB_yPos - BOX_HEIGHT/2,
	       mapPtr->MVMB_xPos + BOX_WIDTH/2,
	       mapPtr->MVMB_yPos + BOX_HEIGHT/2);
    VMUnlock(mem);
}


/***********************************************************************
 *		MSG_META_START_SELECT for MVDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Field a pointer click within our document.
 * PARAMETERS:	    void (MouseReturnParams *retVal,
 *			  sword xPosition,
 *			  sword yPosition,
 *			  word inputState)
 * SIDE EFFECTS:    The position in the map block of the document is
 *		    updated and the map block (and hence the document)
 *		    is marked dirty.
 *
 * STRATEGY:	    Lock down the map block and store the pointer
 *		    position (which is already in document coordinates)
 *		    into it, marking the block dirty.
 *
 *	    	    Call ourselves to redraw the entire document.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/31/91		Initial Revision
 *
 ***********************************************************************/
@method MVDocumentClass, MSG_META_START_SELECT
{
    VMBlockHandle mapBlock;
    MVMapBlock *mapPtr;
    MemHandle mem;

    /*
     * Fetch and lock down the map block for the file.
     */
    mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);

    /*
     * Store the click position as the new center of the mystic square.
     */
    mapPtr->MVMB_xPos = xPosition;
    mapPtr->MVMB_yPos = yPosition;
    /*
     * Mark the map block dirty and unlock it.
     */
    VMDirty(mem);
    VMUnlock(mem);

    /*
     * Tell ourselves to redraw the entire object.
     */
    @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    /*
     * Tell the sender of the message that we've handled it.
     */
    retVal->flags = MRF_PROCESSED;
}
