/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	  Sample Applications
 * MODULE:	  UI-Object Document Run By Process Sample
 * FILE:	  docui.goc
 *
 * AUTHOR:  	  Tony Requist: September 4, 1991
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	9/4/91	  tony	    Initial version
 *
 * DESCRIPTION:
 *	This is one of the sample applications that demonstrate the use
 *	of the GenDocumentControl object. This particular one shows how
 *	to use your process thread, rather than a subclass of GenDocumentClass
 *	to display your document. The process thread, here, turns around
 *	and uses UI objects to display the contents of a document, rather
 *	than drawing things into a GenView. This is similar to what GeoDex
 *	does.
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	All the sample applications in the Document subdirectory except
 *      DosFile share a common document format: a VM file whose map block
 *      stores the X and Y position, in document coordinates, of a small
 *      blue square. Most of the applications actually display such a
 *      square; when you click the mouse in the view, the coordinates of
 *	the square change to be where you clicked. 
 *
 *	Note that, in this application, rather than displaying a blue square
 *	inside a GenView, we have two GenValue objects that both display
 *	and manipulate the coordinates.
 *
 *	You should understand about VM files [Con 19] and how to manipulate
 *	them before reading on.
 *
 *		      Document Control Overview [Obj 13]
 *
 *	The document-control system of GEOS is made from three object
 *	classes that work together to produce an harmonious whole (sorry,
 *	got carried away there). The responsibilities are divide as follows:
 *
 *	GenDocumentControl  	is responsible for providing what you might
 *				consider the UI of the document control. It
 *				produces menus, submenus, and dialog boxes
 *				with which the user interacts when s/he wishes
 *				to open, close, create, or save a document.
 *				It usually is run by the UI thread of an
 *				application, to provide fast feedback to
 *				the user.
 *
 *	GenDocument 	    	is the low-level object that deals with a
 *				single document file. It does all the work
 *				of interacting with the file and VM systems
 *	    	    	    	to save/revert/auto-save/revert the document
 *				itself.
 *
 *	GenDocumentGroup    	is a conduit between the GenDocumentControl
 *				and the GenDocument objects. It is responsible
 *				for creating, managing, and destroying the
 *				GenDocument objects, selecting a single object
 *				as the current document, etc. GenDocumentGroup
 *	    	    	    	instantiates a separate GenDocument object
 *				for each document it's told by the
 *				GenDocumentControl to manage.
 *
 *	 Process- vs. GenDocument-controlled Document Display
 *
 *	The major difference between this sample application and all the
 *	other document-control sample apps (except ProcView) is that all
 *	the other samples actually subclass GenDocumentClass and respond
 *	to messages in their subclass to implement the functionality of
 *	the document (drawing it, responding to mouse clicks, etc.).
 *
 *	The GenDocument and GenDocumentGroup are set up so you can avoid
 *	having to worry about LMem things and dereferencing object master
 *	parts and similar complexities, using your ProcessClass and global
 *	variables to simplify the display and management of your document.
 *
 *	The actual mechanism whereby the UI accomplishes this is described
 *	in [Obj 13.1.3]. In brief, most messages a GenDocument object can
 *	receive have a default handler that sends a corresponding message
 *	from the MSG_META_DOC_OUTPUT family of messages to the object
 *	specified by the GDGI_output instance variable of the GenDocumentGroup.
 *	This will, in all but the most peculiar circumstances, be the
 *	application thread (aka "process") for the application. You just
 *	write a method for your ProcessClass for these messages, store
 *	things in global variables, etc.
 *
 *	Note that you cannot have multiple documents open using this
 *	"procedural" model of handling the document.
 *
 *	$Id: procui.goc,v 1.1 97/04/04 16:36:43 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

/*
 * The major and minor protocol number for the document file is an abstract
 * thing, given meaning only with respect to other protocol numbers, as
 * described in [Con 6.1.7] and [Obj 13.5.1]. In our case, we've never changed
 * the format of our document, so our protocol number remains 1.0
 */
#define DOCUMENT_PROTOCOL_MAJOR	1
#define DOCUMENT_PROTOCOL_MINOR	0

/*
 * Define the extent of the coordinate space on our document. It's specified
 * in terms of points, so our document is 20 inches by 20 inches.
 */
#define DOCUMENT_WIDTH		(20*72)
#define DOCUMENT_HEIGHT		(20*72)

#define VIEW_BACKGROUND_COLOR	C_WHITE

/*
 * Initial position (in document coordinates) of our mystical blue square.
 */
#define INITIAL_X_POS		20
#define INITIAL_Y_POS		20

/*
 * This is the structure of a datafile.  It is incredibly simple, storing just
 * a x,y position of the center of the square in the VM file's map block.
 */

typedef	struct {
    word	PUIMB_xPos;
    word	PUIMB_yPos;
} PUIMapBlock;

/*
 ***************************************************************************
 *		Global variables
 ***************************************************************************
 */

FileHandle ourFile = NullHandle;    /* The handle of the document that's
				     * currently open. */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	PUIProcessClass, GenProcessClass ;

/*
 * These are the messages sent out when the user fiddles with the GenValue
 * objects. Their parameters are taken from the GEN_VALUE_APPLY_MSG prototype
 * defined in gValueC.goh, but the message number is all our own.
 */
@message(GEN_VALUE_APPLY_MSG) MSG_PUI_PROCESS_X_CHANGE;
@message(GEN_VALUE_APPLY_MSG) MSG_PUI_PROCESS_Y_CHANGE;

@endc   /* end of class definition */


@classdecl	PUIProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 *		Application Object
 */

@start	AppResource ;

@object GenApplicationClass PUIApp = {
    GI_visMoniker = list { @PUITextMoniker }
    GI_comp = @PUIPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @PUIPrimary;
    /*
     * The GenDocumentControl object must be on the "active list" so it can
     * have access to the AppLaunchBlock, passed with MSG_META_ATTACH, that
     * contains the data file the application is supposed to open.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) = @PUIDocumentControl;
    /*
     * The GenDocumentControl object must also be on the "application startup"
     * list so the application can manipulate documents when started as a
     * server for another application (NOTE: it must be on this list even if
     * you don't ever expect your application to act as such a server).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) = @PUIDocumentControl;
    /*
     * The GenDocumentControl will load its saved options from the .ini file
     * itself, but needs to be told when to save them.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
	@PUIDocumentControl;
    /*
     * Specify the INI file category [Con 6.3] under which to save all options
     * for this application.
     */
    ATTR_GEN_INIT_FILE_CATEGORY = "procui";
}

@visMoniker PUITextMoniker = "C ProcUI Sample Application";

@end	AppResource

/*
 *		Primary window
 */

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass PUIPrimary  = {
    GI_comp = @PUIFileMenu, @PUIValueX, @PUIValueY;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;

    /*
     * Let's say we want a floating keyboard to come up on pen-based
     * systems to allow keyboard input to the GenValue children of this
     * primary. As of Dec. 1993, GenValues cause keyboards to come up
     * automatically, but to get this behavior on the original Zoomer
     * release, we must tell the parent of a GenValue to override the
     * default no-keyboard behavior.
     */
    ATTR_GEN_WINDOW_KBD_OVERRIDE = (KO_KEYBOARD_REQUIRED);
}

@object GenInteractionClass PUIFileMenu = {
    /*
     * Turn this thing into the File menu for the application. In an ideal
     * world, we could just turn the GenDocumentControl object into the
     * File menu and be done with it (it is a subclass of GenInteraction,
     * after all). Sadly, due to implementation details, GenDocumentControl
     * can only be a GIV_ORGANIZATIONAL interaction, so we have a separate
     * GIV_POPUP interaction to contain it.
     */
    GI_comp = @PUIDocumentControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

/*
 *	GenDocumentControl
 *
 * There are a few things to keep in mind when deciding in what resource to
 * place the GenDocumentControl object:
 *	1) because it must be on the application's MGCNLT_ACTIVE_LIST list,
 *	   the resource that contains it will always be brought in on start-up.
 *	   If that resource is particularly large, it could slow down the
 *	   application's start-up.
 *	2) it is actually used only rarely, when the user wishes to open, close
 *	   or save a document.
 *	3) it creates a number of different objects (triggers for the File
 *	   menu, dialog boxes, etc.) that could make the resource in which
 *	   it sits become somewhat bloated.
 * If there were more elements of the File menu (for example, a
 * SpoolPrintControl object), you might put all the elements into a single
 * FileMenu resource. For this example, however, we're just going to put it
 * in the Interface resource, as there's not much else for this app to do.
 */

@object GenDocumentControlClass PUIDocumentControl = {
    /*
     * Document file's token
     */
    GDCI_documentToken = { "SAMP", MANUFACTURER_ID_GEOWORKS };
    /*
     * Text to display in the header area of the primary when no
     * document is open.
     */
    GDCI_noNameText = "No Document";
    /*
     * Specify subdirectory of SP_TEMPLATE in which Use Template... should look.
     */
    GDCI_templateDir = "SAMPLE";
    /*
     * Pointer to the GenDocumentGroup, which manages the GenDocument objects
     * themselves (run by the process thread, usually).
     */
    GDCI_documentGroup = PUIDocumentGroup;
    /*
     * List of objects to enable/disable based on whether or not a
     * document exists. For us, this is the two GenValues that show the
     * coordinates.
     */
    GDCI_enableDisableList = PUIUIEnableList;
}

@chunk optr PUIUIEnableList[] = {
    @PUIValueX, @PUIValueY
};

@end Interface

/*
 *	Document Group
 *
 * The GenDocumentGroup should be put in a resource of its own run by
 * the application thread. It is responsible for creating and administering
 * the various GenDocument objects (one per document), coordinating its actions
 * with the GenDocumentControl object.
 *
 * Because we do not give a value for the GDGI_genView instance variable,
 * the GenDocumentGroup will not attempt to hook the GenDocument (actually
 * PUIDocument) objects it creates to a GenView; it assumes the document
 * has some other means of displaying its data rather than acting as a
 * VisContent for a GenView.
 *
 * Set GDGI_output to be our process so MSG_META_DOC_OUTPUT messages from
 * the GenDocument objects the GenDocumentGroup (silently) creates will
 * reach our process.
 */

@start DocumentUI ;

@object GenDocumentGroupClass PUIDocumentGroup = {
    /*
     * Name for untitled documents
     */
    GDGI_untitledName = "PUI Untitled";
    /*
     * Document protocol for current document version.
     */
    GDGI_protocolMajor = DOCUMENT_PROTOCOL_MAJOR;
    GDGI_protocolMinor = DOCUMENT_PROTOCOL_MINOR;
    /*
     * Object to send notification messages to (send them to the process)
     */
    GDGI_output = process;
    /*
     * Pointer to the GenDocumentControl
     */
    GDGI_documentControl = PUIDocumentControl;
}

@end DocumentUI;

/*
 *	UI objects to display the document
 */

@start Interface ;

@object GenValueClass PUIValueX = {
    GI_visMoniker = 'X', "X Coordinate:";
    /*
     * All objects in the enableDisable list of the GenDocumentControl
     * must start life disabled.
     */
    GI_states = @default & ~GS_ENABLED;

    GVLI_minimum = MakeWWFixed(0);
    GVLI_maximum = MakeWWFixed(DOCUMENT_WIDTH-1);

    GVLI_destination = process;
    GVLI_applyMsg = MSG_PUI_PROCESS_X_CHANGE;
}

@object GenValueClass PUIValueY = {
    GI_visMoniker = 'Y', "Y Coordinate:";
    /*
     * All objects in the enableDisable list of the GenDocumentControl
     * must start life disabled.
     */
    GI_states = @default & ~GS_ENABLED;

    GVLI_minimum = MakeWWFixed(0);
    GVLI_maximum = MakeWWFixed(DOCUMENT_HEIGHT-1);

    GVLI_destination = process;
    GVLI_applyMsg = MSG_PUI_PROCESS_Y_CHANGE;
}

@end Interface

/*
 ***************************************************************************
 *		Code for PUIProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *				UpdateUIForDocument
 ***********************************************************************
 * SYNOPSIS:	    Update the UI components to display the values
 *		    stored in the document.
 * CALLED BY:	    (INTERNAL)
 * RETURN:	    nothing
 * SIDE EFFECTS:    the values displayed by PUIValueX and PUIValueY
 *		    are altered.
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/4/91		Initial Revision
 *
 ***********************************************************************/
static void
UpdateUIForDocument(void)
{
    VMBlockHandle mapBlock; /* VM block handle of the file's map block,
			     * which holds the coordinates of the mystic
			     * square. */
    PUIMapBlock *mapPtr;    /* The locked map block */
    MemHandle mem;  	    /* Memory handle of the locked map block,
			     * for unlocking it. */

    /*
     * Get position from data file (file handle previously stored in global
     * variable ourFile).
     */
    mapBlock = VMGetMapBlock(ourFile);
    mapPtr = VMLock(ourFile, mapBlock, &mem);

    /*
     * Set the positions as the value for their respective GenValue objects.
     */
    @send GeodeGetOptrNS(@PUIValueX)::MSG_GEN_VALUE_SET_INTEGER_VALUE(
				    mapPtr->PUIMB_xPos, FALSE);
    @send GeodeGetOptrNS(@PUIValueY)::MSG_GEN_VALUE_SET_INTEGER_VALUE(
				    mapPtr->PUIMB_yPos, FALSE);
    VMUnlock(mem);
}


/***********************************************************************
 *	MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE for PUIProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize a newly-created document file.
 * PARAMETERS:	    void (optr document, FileHandle file)
 * SIDE EFFECTS:    A map block is allocated, initialized, and set for
 *		    the file.
 *
 * STRATEGY: 	    Handle this message by creating our version of an empty
 *		    document, which is a map block with the PUIMapBlock
 *		    structure in it and initialized to default values.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/4/91		Initial Revision
 *
 ***********************************************************************/
@method PUIProcessClass, MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE
{
    VMBlockHandle mapBlock; /* VM block handle of the file's map block,
			     * which holds the coordinates of the mystic
			     * square. */
    PUIMapBlock *mapPtr;    /* The locked map block */
    MemHandle mem;  	    /* Memory handle of the locked map block,
			     * for marking the block dirty */

    /*
     * Allocate a block, make it the map block and initialize it
     */
    mapBlock = VMAlloc(file, sizeof(PUIMapBlock), 0);
    VMSetMapBlock(file, mapBlock);

    /*
     * Lock the newly created block so that we can use it.  Since we
     * are modifying the contents of the block it is essential that we
     * call VMDirty to let the VM code know that the block is modified,
     * and do it *before* we call VMUnlock (else the block might be
     * thrown out before we can mark it dirty).
     */
    mapPtr = VMLock(file, mapBlock, &mem);
    mapPtr->PUIMB_xPos = INITIAL_X_POS;
    mapPtr->PUIMB_yPos = INITIAL_Y_POS;
    VMDirty(mem);
    VMUnlock(mem);
    return(FALSE);		/* Return no error */
}


/***********************************************************************
 *	MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT for PUIProcessClass
 ***********************************************************************
 * SYNOPSIS:	    The document has been opened, and any UI required
 *		    has been created, so initialize the UI itself.
 * PARAMETERS:	    void (optr document, FileHandle file)
 * SIDE EFFECTS:    ourFile is set to the handle of the document that
 *		    is now our current document.
 *
 * STRATEGY:	    Since our UI always stay the same we just need to
 *		    save the file handle and redraw our window to
 *		    reflect the document that we are now attached to.

 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/ 4/91		Initial Revision
 *
 ***********************************************************************/
@method PUIProcessClass, MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT
{
    ourFile = file;
    UpdateUIForDocument();
}


/***********************************************************************
 *	MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT for PUIProcessClass
 ***********************************************************************
 * SYNOPSIS:	    The document is about to be closed, so we need to
 *		    disconnect it from the UI gadgetry being used to
 *		    display it.
 * PARAMETERS:	    void (optr document, FileHandle file)
 * SIDE EFFECTS:    ourFile is set to 0, to signal we have no current
 *		    document.
 *
 * STRATEGY:	    Just 0 ourFile; we can leave the UI gadgets alone,
 *		    as the GenDocumentControl will disable them once the
 *		    document is gone.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/ 4/91		Initial Revision
 *
 ***********************************************************************/
@method PUIProcessClass, MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT
{
    /*
     * Detach ourselves from the document by severing our only link to it,
     * our storage of the file handle
     */
    ourFile = NullHandle;
}


/***********************************************************************
 *	MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED for PUIProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Note that the document is now residing in a different
 *		    file and can be reached via a different file handle.
 *	    	    As the name implies, this is sent after a Save As
 *		    has been performed.
 * PARAMETERS:	    void (optr document, FileHandle file)
 * SIDE EFFECTS:    ourFile is changed to the passed FileHandle
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/ 4/91		Initial Revision
 *
 ***********************************************************************/
@method PUIProcessClass, MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED
{
    /*
     * "save as" causes a new file to be created and causes the file
     * handle to change.  Therefore we must store the new file handle
     */
    ourFile = file;
}

/***********************************************************************
 *		MSG_PUI_PROCESS_X_CHANGE and
 *		MSG_PUI_PROCESS_Y_CHANGE for PUIProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Note a change in one of the coordinates stored in
 *		    the document.
 * PARAMETERS:	    void (WWFixedAsDWord value, word stateFlags)
 * SIDE EFFECTS:    The appropriate coordinate is updated and the
 *		    document marked dirty.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	9/4/91		Initial Revision
 *
 ***********************************************************************/
@method PUIProcessClass, MSG_PUI_PROCESS_X_CHANGE,
    	    	    	 MSG_PUI_PROCESS_Y_CHANGE
{
    if (ourFile != NullHandle) {
	VMBlockHandle mapBlock;
	PUIMapBlock *mapPtr;
	MemHandle mem;
	
	/*
	 * Find the handle for the document's map block and lock the thing down.
	 */
	mapBlock = VMGetMapBlock(ourFile);
	mapPtr = VMLock(ourFile, mapBlock, &mem);

	/*
	 * Adjust the appropriate coordinate, based on which message we're
	 * handling. We just ignore the fractional portion of the value, since
	 * we can't store it anywhere.
	 */
	if (message == MSG_PUI_PROCESS_X_CHANGE) {
	    mapPtr->PUIMB_xPos = IntegerOf(value);
	} else {
	    mapPtr->PUIMB_yPos = IntegerOf(value);
	}
	/*
	 * Mark the map block dirty before we unlock it, then unlock it.
	 */
	VMDirty(mem);
	VMUnlock(mem);
    }
}
