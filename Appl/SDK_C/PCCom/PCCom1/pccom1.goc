/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved
 *
 * PROJECT:	  GEOS
 * MODULE:	  PCCom1 (Sample GEOS application)
 * FILE:	  pccom1.goc
 *
 * AUTHOR:	  Cassie Hartzog, Jan 20, 1994
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/20/94	  cassie    Initial version
 *
 * DESCRIPTION:
 *	The PCCom1 sample application demonstrates normal use of the
 *	PCCom library. Those wanting to use the PCCom library will
 *	probably find this application more helpful than the PCCom2 sample
 *	application, which uses the PCCom library to show the general
 *	principles of dynamic library loading and calling through library
 *	entry points.
 *
 *	$Id: pccom1.goc,v 1.1 97/04/04 16:39:17 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <pccom.goh>
#include <library.h>

/*
 ***************************************************************************
 *		Global constants/variables
 ***************************************************************************
 */

#if ERROR_CHECK
static char *pccomName = "pccomec.geo"; 
#else
static char *pccomName = "pccom.geo"; 
#endif

static Boolean 	    connected = FALSE;
static ThreadHandle thread = NullHandle;

void ResetText(void);


/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	PCCom1ProcessClass, GenProcessClass ;

/* define messages for this class here. */

@message void MSG_PCCOM1_START_PCCOM();	    /* start a serial connection   */
@message void MSG_PCCOM1_EXIT_PCCOM();	    /* shut down the connection    */
@message void MSG_PCCOM1_ABORT_PCCOM();	    /* abort the current operation */
@message void MSG_PCCOM1_RESET_PCCOM();	    /* reset the connection 	   */

@endc   /* end of class definition */


@class	PCCom1TextClass, GenTextClass ;

@endc

@classdecl	PCCom1ProcessClass, neverSaved ;
@classdecl	PCCom1TextClass ;


/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass PCCom1App = {
    GI_visMoniker = "PCCom1 Sample Application";
    GI_comp = @PCCom1Primary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @PCCom1Primary;
}

@end	AppResource;

@start	Interface;

/*****************************
 *	Primary window
 *****************************/

@object GenPrimaryClass PCCom1Primary  = {
    GI_comp = @PCCom1Menu, 
    	      @PCCom1OptionsMenu, 
    	      @PCCom1TextObj;

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;	/* The window may not be iconified */
}

/****************************
 *	PCCom1 menu
 ****************************/

@object GenInteractionClass PCCom1Menu = {
    GII_visibility = GIV_POPUP;
    GI_visMoniker = 'P', "PCCom";
    GI_comp = 
	@PCCom1StartTrigger,
	@PCCom1ExitTrigger,
	@PCCom1AbortTrigger;
}

@object GenTriggerClass PCCom1StartTrigger = {
    GI_visMoniker = 'S', "Start PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM1_START_PCCOM;
}

@object GenTriggerClass PCCom1ExitTrigger = {
    GI_visMoniker = 'E', "Exit PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM1_EXIT_PCCOM;
}

@object GenTriggerClass PCCom1AbortTrigger = {
    GI_visMoniker = 'A', "Abort PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM1_ABORT_PCCOM;
}


/****************************
 *	PCCom1 options menu
 ****************************/

@object GenInteractionClass PCCom1OptionsMenu = {
    GII_visibility = GIV_POPUP;
    GI_visMoniker = 'O', "Options";
    GI_comp = 
	@PCCom1PortGroup,
	@PCCom1BaudGroup,
	@PCCom1ResetTrigger;
}


@object GenInteractionClass PCCom1PortGroup = {
    GI_comp		= @PCCom1ComPortList;
    GII_type		= GIT_PROPERTIES;
    GII_visibility  	= GIV_POPUP;
    GI_visMoniker	= "Port";
}

@object GenItemGroupClass PCCom1ComPortList = {
    GI_comp		= @Com1Setting,
			  @Com2Setting,
			  @Com3Setting,
			  @Com4Setting; 
    GIGI_selection  = SERIAL_COM2;
    GIGI_numSelections  = 1;
}

@object GenItemClass Com1Setting = {
    GI_visMoniker	= "COM 1";
    GII_identifier	= SERIAL_COM1;
}

@object GenItemClass Com2Setting = {
    GI_visMoniker	= "COM 2";
    GII_identifier	= SERIAL_COM2;
}

@object GenItemClass Com3Setting = {
    GI_visMoniker	= "COM 3";
    GII_identifier	= SERIAL_COM3;
}

@object GenItemClass Com4Setting = {
    GI_visMoniker	= "COM 4";
    GII_identifier	= SERIAL_COM4;
}

@object GenInteractionClass PCCom1BaudGroup = {
    GI_visMoniker   	= "Baud Rate"; 
    GI_comp		= @PCCom1BaudRateList;
/*    GII_type		= GIT_PROPERTIES; */
    GII_visibility  	= GIV_POPUP;
}

@object GenItemGroupClass PCCom1BaudRateList = {
    GI_comp		= @Baud1200,
			  @Baud2400,
			  @Baud4800,
			  @Baud9600,
			  @Baud14400,
			  @Baud19200,
			  @Baud38400;
    GIGI_selection	= SB_9600;
    GIGI_numSelections	= 1;
}

@object GenItemClass Baud1200 = {
    GI_visMoniker	= "1200";
    GII_identifier	= SB_1200;
}
    
@object GenItemClass Baud2400 = {
    GI_visMoniker	= "2400";
    GII_identifier	= SB_2400;
}
    
@object GenItemClass Baud4800 = {
    GI_visMoniker	= "4800";
    GII_identifier	= SB_4800;
}
    
@object GenItemClass Baud9600 = {
    GI_visMoniker	= "9600";
    GII_identifier	= SB_9600;
}

@object GenItemClass Baud14400 = {
    GI_visMoniker	= "14400";
    GII_identifier	= SB_14400;
}

@object GenItemClass Baud19200 = {
    GI_visMoniker	= "19200";
    GII_identifier	= SB_19200;
}

@object GenItemClass Baud38400 = {
    GI_visMoniker	= "38400";
    GII_identifier	= SB_38400;
}

@object GenTriggerClass PCCom1ResetTrigger = {
    GI_visMoniker = 'R', "Reset Connection";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM1_RESET_PCCOM;
    HINT_DRAW_IN_BOX;
}



@object PCCom1TextClass PCCom1TextObj = {
    /* Make it read only so the user can't modify what is being displayed */
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_attrs = @default | GTA_INIT_SCROLLING;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_TEXT_WHITE_WASH_COLOR;
}

@end Interface



/*
 ***************************************************************************
 *		Code for PCCom1ProcessClass 
 ***************************************************************************
 */



/***********************************************************************
 *		MSG_PCCOM1_START_PCCOM for PCCom1ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize serial connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1ProcessClass, MSG_PCCOM1_START_PCCOM
{
    SerialPortNum   port;
    SerialBaud	    baud;

    /* If a connection has not yet been opened, open one now */

    if (!connected) {

    /* Get the com port and baud rate to pass to PCCOMINIT() */

	port = @call PCCom1ComPortList::
	    MSG_GEN_ITEM_GROUP_GET_SELECTION();
	baud = @call PCCom1BaudRateList::
	    MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* 
     * PCComInit loads the serial driver and initializes a serial 
     * connection. The default values for use on a Zoomer are Com1 
     * (SERIAL_COM1) at 9600 baud (SB_9600).
     * The 10 is a timeout value for waiting for the serial driver to
     * initialize the port.
     *
     * The flags tell PCCom Library to send text output to PCCom1TextObj, 
     * and to notify us if the user exits PCCom from the remote machine.
     * 
     * Note that the PCCom Library creates a thread to run the serial
     * port.  It is up to this application to make sure that PCComExit
     * is called before the application exits, in order to close the
     * serial connection and destroy the thread.
     */
	if (PCComInit(port, baud, 10, @PCCom1TextObj, 
	      PCCIF_NOTIFY_OUTPUT | PCCIF_NOTIFY_EXIT) == PCCRT_NO_ERROR)
	    connected = TRUE;
    }
}



/***********************************************************************
 *		MSG_PCCOM1_ABORT_PCCOM for PCCom1ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Abort the current file transfer.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1ProcessClass, MSG_PCCOM1_ABORT_PCCOM
{
    if (connected) {
    	PCComAbort();
    }
    ResetText();
}



/***********************************************************************
 *		MSG_PCCOM1_EXIT_PCCOM for PCCom1ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Close the serial connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1ProcessClass, MSG_PCCOM1_EXIT_PCCOM
{
    if (connected) {
	/*
	 * Close down the serial connection and destroy the thread
	 * created to run it.
	 */
    	PCComExit();	    	    /* ignore the return value */
	connected = FALSE;
    }
    ResetText();
}



/***********************************************************************
 *		MSG_PCCOM1_RESET_PCCOM for PCCom1ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Reset the connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1ProcessClass, MSG_PCCOM1_RESET_PCCOM
{
    if (connected) {
    	@call self::MSG_PCCOM1_EXIT_PCCOM();
    }
    @send self::MSG_PCCOM1_START_PCCOM();
}



/***********************************************************************
 *		MSG_META_DETACH for PCCom1ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Close the serial connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1ProcessClass, MSG_META_DETACH
{
    if (connected) {
	/*
	 * Close down the serial connection and destroy the thread
	 * created to run it before exiting the application.
	 */
    	PCComExit();	    	    /* ignore the return value */
    	connected = FALSE;
    }

    /* Let our superclass do the rest of the detach work */
    @callsuper();
}


/*
 ***************************************************************************
 *		Code for PCCom1TextClass 
 ***************************************************************************
 */

/***********************************************************************
 *		MSG_META_NOTIFY
 ***********************************************************************
 * SYNOPSIS:	    Display a char sent from PCCom Library
 * PARAMETERS:	    character = char to display
 *
 * STRATEGY: 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1TextClass, MSG_META_NOTIFY
{
    char character;

    if (notificationType == GWNT_PCCOM_DISPLAY_CHAR) {
	character = (char)data;

	/*
	 * If character is backspace, reset position to previous position 
	 * and draw a white rectangle to "erase" the character which
	 * was drawn there.
	 */
	if (character == C_BS) {
	    if (@call self::MSG_VIS_TEXT_GET_TEXT_SIZE() > 0) {
		@call self::MSG_VIS_TEXT_SELECT_END();
		@call self::MSG_VIS_TEXT_SELECT_RELATIVE(-1,0);
		@call self::MSG_VIS_TEXT_DELETE_SELECTION();
	    }
	    
	} else {
	    @call self::MSG_VIS_TEXT_APPEND_PTR(&character, 1);
	}
    } else if (notificationType == GWNT_PCCOM_EXIT) {

	/*
	 * If the serial connection was closed from the remote machine,
	 * note that in the "connected" flag.
	 */
	ResetText();
	connected = FALSE;
    }
}



/***********************************************************************
 *		MSG_META_NOTIFY_WITH_DATA_BLOCK
 ***********************************************************************
 *
 * SYNOPSIS:	    Display a string sent from PCCom Library
 * PARAMETERS:	    block = handle of block containing null-terminated string
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom1TextClass, MSG_META_NOTIFY_WITH_DATA_BLOCK
{
    if	(notificationType == GWNT_PCCOM_DISPLAY_STRING) {
	@call self::MSG_VIS_TEXT_APPEND_BLOCK(data, 0);
	MemFree(data);
    }
}



/***********************************************************************
 *		ResetText
 ***********************************************************************
 * SYNOPSIS:	    Delete all text.
 * PARAMETERS:	    void (void)
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
void ResetText()
{
    @call PCCom1TextObj::MSG_VIS_TEXT_DELETE_ALL();
}

