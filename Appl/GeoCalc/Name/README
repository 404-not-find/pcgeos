
How names are implemented.
	John Wedgwood,  2/25/91

$Id: README,v 1.1.30.1 97/03/29 09:26:38 canavese Exp $
******************************************************************************


Name Information:
-----------------
Defined Names:
	- These are names which the user has given a definition for. They
	  are created explicitly using the Add-Name dialog box.

Undefined Names:
	- These are created implicitly when the user references a name in
	  a formula and that name has not been created. If the user defines
	  one of these names later, we will know what cells depend on it and
	  can update them correctly.

A name consists of several pieces of information:
	The text of the name.
	A token (1 word) which the parser library uses to refer to the name.
	The parsed definition of the name (cell or range).
	The actual cell/range that the name refers to.
	The list of cells which refer to this name (dependencies).

Some of the name information is stored in cell data structures in a
non-visible area of the spreadsheet.


The Name Block Data Structures:
-------------------------------
The names themselves are stored in a separate VM block which has the form:
	--- Block Header ---
	Size of the VM block	(word)
	# of defined names	(word)
	# of undefined names	(word)
	Next token # to use	(word)

	--- Name Definitions ---
	flags			(byte)
	token #			(word)
	length of next name	(word)
	text of name		(n bytes)
	...

This list of names is stored in alphabetical order (case insensitive). The
defined names are stored in with the undefined names.


Where the Name Definitions are Stored:
--------------------------------------
The other information about each name is stored in a row of the spreadsheet
which is referred to with the constant NAME_ROW.

Since the parser library refers to names by the token we return it, the
token number that is stored in the name-list is the same as the column
in the NAME_ROW in which the data for a name is stored. Given a token, we
can find the definition in the cell-file at {row=NAME_ROW, column=Token#}.

I am making the assumption that the user will never define more than
65,536 names in a single file. If they do that, the only current remedy is
to generate a fatal-error when the token-# wraps back to zero. I'm not
entirely happy with this, but when I think of a better method for assigning
token numbers, then we'll really be in business. The assignment of tokens
is done in only one place so modifying the scheme later shouldn't be too
difficult.


The need for Undefined Names:
-----------------------------
We want the user to be able to enter names which are not already defined and
have the program accept these names. This requires us to keep a list of
undefined names. Unfortunately the parser will require us to return tokens
for these undefined names so we need to allocate tokens for them.

When the parser calls back to the application to identify a name, if we
find the name then we return the token associated with the name. If we don't
find the name then we allocate an undefined-name and return the token
associated with it.

Since the parser will not ask us to resolve names into tokens until it knows
that the expression has parsed we will not be stuck in a position where we
have added an undefined name, but there are no dependencies for it. We are
guaranteed that if we add an undefined name there will be a dependency for it
unless there is a stack overflow when determining the dependencies. I can't
think of anything to do about that except to leave the undefined name in the
table. This sucks since it leaves a floating name, but the sequence of events
seems so unlikely that it probably shouldn't be a great concern. If we are
really worried we can add code that checks for this and cleans up. (Probably
something we could do when we are closing the file).


Names and Dependencies:
-----------------------
A name structure cannot be deleted unless it has no dependencies. If the
user deletes a defined name and that name has dependencies, then the name
is just marked as undefined.

If the last dependency for an undefined name is deleted, then the name can
be removed.

Since names are definitions of a sequence of tokens and not actually formulas
which are evaluated independently, names do not depend on the cells that they
reference. Instead they depend only on the names that they reference.

For more information on how names work from the parser/evaluator point of
view see the file NAMES in the parser/evaluator library.
