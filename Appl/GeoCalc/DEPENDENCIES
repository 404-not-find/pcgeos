
How dependencies are implemented.
	John Wedgwood,  2/25/91

$Id: DEPENDENCIES,v 1.1.30.1 97/03/29 09:25:12 canavese Exp $
******************************************************************************


Overview:
---------
Managing dependencies is something of a pain. The addition of name support
makes it even harder. This file outlines the techniques I use to keep the
dependency lists accurate.


Definitions:
------------
Dependency:
	A dependency is an entry in the data-structure for a cell which
tells of another cell whose results depend on the data in this cell.

For example if you had the following cells and definition:
	Cell	Definition
	----	----------
	a1	5
	a2	2 * a1

Then cell a1 would contain a dependency which tells us that cell a2 depends
on it. It is important to understand that even though the formula "2*a1"
resides with the data for cell a2, the dependency generated by that formula
resides in cell a1.

Dependency List:
	A dependency list is a list of dependencies. Each cell contains
a possibly empty dependency list. You can think of it as a list of all
cells which depend on the data of this cell.

Box:
	This is the term I use to refer to the "current" cell. It allows
me to phrase things more clearly because I don't have to keep distinguishing
between a cell whose dependencies we are generating and the cells whose
dependency lists we are updating.


How Dependencies are Generated:
-------------------------------
Once a box parses correctly, dependencies for it are generated. These
dependencies are all the cells which the box references. The box will be
added to the dependency lists for each of these cells.

A list of the cells which need the box added to their dependency lists is
created and saved in a global memory handle. There is a routine in the parse
library which, given an expression, will generate such a block. There is
another routine which, given this block, will add the dependencies.

The evaluator is used to generate the actual cell dependencies for the box.
The way this is accomplished is by evaluating the expression, but rather
than type-checking arguments and actually attempting to evaluate operators
and functions, only the arguments to these operators and functions are noted.
These cells, names, and functions are all added to the list of entries in
this block.

Dependencies for Names:
-----------------------
Names do not depend on the cells they reference, only on the names which they
reference directly. For this reason no dependencies are added to cells when
we are generating the dependencies for a name definition.

This actually does make sense. A name is a definition, it does not have a
value. If a cell that is referenced in a name changes, nothing about the name
changes. If a name that a name references changes, then the definition of the
name itself changes.


Algorithm for the Spreadsheet:
------------------------------
Here is the algorithm for updating dependencies in a cell:
	blockNew = GenerateDependencies( newCellDefinition );
	blockOld = GenerateDependencies( oldCellDefinition );
	RemoveDependencies( blockOld );
	AddDependencies( blockNew );

Circular Dependencies and Intelligent Recalc:
---------------------------------------------
We need to be able to detect circular dependencies. It's important for a few
reasons.
	- In most spreadsheets it's a "bug" that the user has introduced
	  and which we want to warn them about.

	- If we don't detect it we will calculate forever, unless we run out
	  of room for the list of cells to calculate.

	- In cells where there circular dependencies are intended the user
	  will want to set the number of iterations and some convergence
	  factor to tell us when to stop.

This is a description of an algorithm which will allow us to detect circular
references during calculation. The calculation technique is known as
intelligent recalc because only the cells which need to be calculated get
calculated.

Notation will help us in discussion how we detect circular reference.
It is useful to think of the dependencies as a tree:
		A <----+
	       / \     |
	      B   C    |
		 / \   |
		D   E--+

In this case the cells B and C depend on the value in cell A. The cells D and
E depend on the value in cell C. Unfortunately cell A depends on the value in
cell E. This is a circular dependence.

If we examine the dependency lists for each cell we see:
	Cell	Dependency List
	----	---------------
	A	B C
	B
	C	D E
	D
	E	A

In order to do intelligent recalc we will be keeping a list of cells that
need calculating. When a cells value is computed and it is determined that
the value has changed, all the cells that depend on it are also computed.

So... Let's look at how we build this list of cells starting with a change to
cell A.
	(1) First we add A to the list.			A
	(2) Then we compute A and add the cells which
	    depend on A.				ABC
	(3) We compute the next cell on the list (B)
	    and then add Bs dependents to the list.	ABC
	(4) We compute the next cell on the list (C)
	    and then add Cs dependents to the list.	ABCDE
	(5) We compute the next cell on the list (D)
	    and add Ds dependents to the list.		ABCDE
	(6) We compute the next cell on the list (E)
	    and add Es dependents to the list.		ABCDEA

OK... We've hit the circular reference. The question is how do we detect that
this is in fact a circular reference?

Here are the rules:
	a) To start add the cell that has changed to the list.

	b) Always evaluate the cell at the end of the list. Mark it as
	   evaluated.
	
	c) After you have evaluated a cell, if the cell has changed then
	   you want to add the dependents of that cell to the list in
	   reverse order.
	
	d) If the current cell has already been evaluated, remove it from
	   the list.

	e) When there are no more cells to compute you are done.

	f) If you add a cell to the list and the cell is already in the list
	   and has been evaluated, then you have a circular reference.

The notation I'll use is to use capital letters to indicate cells which have
been evaluated, lower case letters indicate cells which haven't been
evaluated.

This makes the 6 steps above look like this:
	1		a			<- rule (a)
	2		Acb			<- rule (b) and (c)
	3		AcB			<- rule (b)
			Ac 			<- rule (d)
	4		ACed			<- rule (b) and (c)
	5		ACeD			<- rule (b)
			ACe			<- rule (d)
	6		ACEa			<- rule (b) and (c)
	*** Error ***				<- rule (f)

The way we detect a circular reference is that if at any time an entry in
that we are adding to the list already exists and has been evaluated, then
we have a circular reference.

The list of evaluated cells records the path we have taken to get to our
current state so if we encounter an entry twice, we know we are looking at
a circular reference.


Let's look at another example that doesn't include a circular reference:
		A
	       /|\
	      B C D
	       / \ \
	      E   F G


	Rule		List
	----		----
	a		a

	b		A		<- Eval A
	c		Adcb

	b		AdcB		<- Eval B
	d		Adc

	b		AdC		<- Eval C
	c		AdCfe
	
	b		AdCfE		<- Eval E
	d		AdCf
	
	b		AdCF		<- Eval F
	d		AdC
	d		Ad
	
	b		AD		<- Eval D
	c		ADg

	b		ADG		<- Eval G
	d		AD
	d		A
	d		** Empty **

So here is an algorithm based on the 5 rules with the basic building blocks
being:
	AddToList	- Add a cell entry to the list.
	MarkEntry	- Mark an entry as evaluated.
	EvalEntry	- Evaluate the last item on the list.
	RemoveFromList	- Remove the last item on the list.
	AddDependencies	- Add the dependency list for the current cell.
			  Returns -1 if one of the dependencies already exists.
	TestEntry	- Returns non-zero if the entry has been evaluated.

;------
	AddToList( currentCell )	; Initialization
	
	while there are entries do
	    EvalEntry()			; Evaluate current entry
	    MarkEntry()			; Mark current entry as evaluated
	    if AddDependencies() ==  -1 then
	        ;
		; One of the cells we went to add already existed. That's an
		; error.
		;
		goto error
	    else
		while there are entries && TestEntry() do
		    ;
		    ; Current cell was already evaluated, remove it.
		    ;
		    RemoveFromList()
		end
	    endif
	end


It is useful to note that it really doesn't matter whether or not the
dependents of a cell go on the list in reverse order. It just means that the
order of calculation of cells might not be exactly what an observer might
expect since we are always computing the cell at the end of the list. For
this reason AddDependencies() doesn't really need to care about how it adds
the dependencies to the list.

One possible problem with any sort of intelligent recalculation is that this
list of cells can grow very large. For most cases it will actually stay quite
small, but it is possible to produce cases where it grows very large indeed.
This is a problem with dependency lists in general.

Since most of the dependency code, and now the intelligent recalc code,
considers dependency lists to be quite opaque data structures it is possible
that at a later date we may want to consider having dependency lists be
composed not only of a list of cells, but as a list of cells and ranges. This
might allow us to handle enormous dependency lists that the user could
generate without producing obscenely large data files.
