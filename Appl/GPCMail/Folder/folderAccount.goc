/***********************************************************************
 *
 *	Copyright (c) New Deal 1998 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  folderAccount.goc
 *
 * AUTHOR:  	  Gene Anderson: 12/2/98
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	12/11/98   gene	    Initial version
 *
 * DESCRIPTION:
 *	AccountListClass for the Mail application
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"

@classdecl AccountListClass;
@classdecl AccountDialogClass;

#ifdef __BORLANDC__
#pragma codeseg InitCode
#endif


/**************************************************************
 *      
 * FUNCTION:        MSG_ACCOUNT_LIST_FREE
 * PASS:            none
 * RETURN:          none
 * DESCRIPTION:
 *         we're shutting down
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      10/26/99    Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_FREE
{
    if (pself->ALI_accountArray) {
	LMemFree(pself->ALI_accountArray);
	pself->ALI_accountArray = 0;
    }
}

#ifdef __BORLANDC__
#pragma codeseg FolderCode
#endif



/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_GET_DIR
 * DESCRIPTION:     get the directory for the current account
 *
 * PASS:            none
 * RETURN:          handle of block w/top-level directory for account
 *                  name is of form Mail/<user>
 *                  NOTE: sizeof(block) = sizeof(PathName)
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/
TCHAR backSlashStr2[] = "\\";

@method AccountListClass, MSG_ACCOUNT_LIST_GET_DIR
{
        MemHandle mh, dh;
	void *mp, *dp;
	TCHAR *mdName;

	mh = MemAlloc(sizeof(PathName), HF_DYNAMIC, HAF_STANDARD);
	if (!mh) {
	    return(mh);
	}
	mp = MemLock(mh);
	/*
	 * Get Mail/
	 */
	mdName = MailLockStdString(MSS_MAIL_DIR);
	strcpy(mp, mdName);
	MailUnlockStdString(MSS_MAIL_DIR);
	strcat(mp, backSlashStr2);
	/*
	* Get Mail/<user>
	*/
	dh = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(pself->GIGI_selection);
	dp = MemLock(dh);
	strcat(mp, dp);
	MemFree(dh);

	MemUnlock(mh);
	return(mh);
}


/***********************************************************************
 *		MSG_ACCOUNT_LIST_GET_POP3 for AccountListClass
 ***********************************************************************
 *
 * SYNOPSIS:	    return the current account pop3 server
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	12/22/98   	Initial Revision
 *
 ***********************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_POP3
{
    return @call PfPOP3Server::MSG_VIS_TEXT_GET_ALL_BLOCK(0);

}	/* End of MSG_ACCOUNT_LIST_GET_POP3.	*/


/***********************************************************************
 *		MSG_ACCOUNT_LIST_GET_SMTP for AccountListClass
 ***********************************************************************
 *
 * SYNOPSIS:	    return the current account smtp server
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	12/22/98   	Initial Revision
 *
 ***********************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_SMTP
{
    return @call PfSMTPServer::MSG_VIS_TEXT_GET_ALL_BLOCK(0);

}	/* End of MSG_ACCOUNT_LIST_GET_SMTP.	*/


/***********************************************************************
 *		MSG_ACCOUNT_LIST_GET_USER_ACCOUNT for AccountListClass
 ***********************************************************************
 *
 * SYNOPSIS:	    Return the current account user name
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	12/22/98   	Initial Revision
 *
 ***********************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_USER_ACCOUNT
{
    return @call PfMailAccountText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);

}	/* End of MSG_ACCOUNT_LIST_GET_USER_ACCOUNT.	*/


/***********************************************************************
 *		MSG_ACCOUNT_LIST_GET_USER_PASSWORD for AccountListClass
 ***********************************************************************
 *
 * SYNOPSIS:	    Return the current accounts password
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	12/22/98   	Initial Revision
 *
 ***********************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_USER_PASSWORD
{

    return @call PfPasswordText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);

}	/* End of MSG_ACCOUNT_LIST_GET_USER_PASSWORD.	*/


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_QUERY_MONIKER
 * DESCRIPTION:     get the moniker for the specified list entry
 *
 * PASS:            none
 * RETURN:          handle of block w/top-level directory for account
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_QUERY_MONIKER
{
    MemHandle bufHan;

    TCHAR *acctName;

    /*
     * it would be nice to just use ChunkArrayElementToPtr() here,
     * but ...LIST_REPLACE_ITEM_TEXT doesn't like having the source
     * in same block as the destination if it is fixed.
     */
    bufHan = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(item);
    acctName = MemLock(bufHan);
    @call oself::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, acctName);
    MemFree(bufHan);
}


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_GET_NUM_ACCOUNTS
 * DESCRIPTION:     get the number of accounts
 *
 * PASS:            none
 * RETURN:          handle of block w/top-level directory for account
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_NUM_ACCOUNTS
{
    if (pself->ALI_accountArray) {
	return(ChunkArrayGetCount(pself->ALI_accountArray));
    } else {
	return(0);
    }
}


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME
 * DESCRIPTION:     get the name of specifed account
 *
 * PASS:            accountNum - index of account
 * RETURN:          handle of block w/account name
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME
{
    TCHAR *arrP, *buf;
    MemHandle mh;
    word eSize;

    arrP = ChunkArrayElementToPtr(pself->ALI_accountArray, accountNum, &eSize);
    mh = MemAlloc(eSize, HF_DYNAMIC, HAF_STANDARD|HAF_NO_ERR);
    buf = MemLock(mh);
    strcpy(buf, arrP);
    MemUnlock(mh);
    return(mh);
}

#ifdef __BORLANDC__
#pragma codeseg RareCode
#endif


/**************************************************************
 *          
 * FUNCTION:        MungePassword
 * DESCRIPTION:     encrypt or decrypt a password
 *
 * PASS:            
 * RETURN:          handle of block w/account name
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/

void
MungePassword(TCHAR *passwd)
{
      word i;

      for (i = 0; passwd[i] != 0; i++) {
	  passwd[i] = passwd[i] ^ 0xea;
      }
}


/**************************************************************
 *          
 * FUNCTION:        UpdateAccountUI()
 * DESCRIPTION:     update account UI
 *
 * PASS:            none (CWD=account)
 * RETURN:          non-zero for error
 *                  appOpts - filled in
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/17/98    Initial Revision
 ***************************************************************/
word
UpdateAccountUI(MailAppOptions *appOpts)
{
        FileHandle fh;
	MemHandle mh;
	MailAccountStruct *acp;
	word numBytes;
@ifdef CHECK_MAIL_ON_INTERVALS
        word interval;
@endif
        word opts;
@ifdef MULTIPLE_ACCOUNT_SUPPORT
	TCHAR defAcctName[FILE_LONGNAME_LENGTH];
        word curAcct;
	MemHandle acctHan;
	TCHAR *acctName;
	MailDefaultOptions defOpts;
@endif
        TCHAR *acctInfoName;

	/*
	 * open and read the file
	 */
        acctInfoName = MailLockStdString(MSS_ACCT_INFO_FILE);
	fh = FileOpen(acctInfoName, FILE_ACCESS_R|FILE_DENY_W);
	MailUnlockStdString(MSS_ACCT_INFO_FILE);
	mh = MemAlloc(sizeof(MailAccountStruct), HF_DYNAMIC, HAF_STANDARD|HAF_ZERO_INIT|HAF_NO_ERR);
	acp = MemLock(mh);
	if (fh) {
	    numBytes = FileRead(fh, acp, sizeof(MailAccountStruct), FALSE);
	}
	/*
	 * if the file is not the right size, fill in defaults
	 * (rest is already filled with zeros)
	 */
	if (numBytes != sizeof(MailAccountStruct)) {
	    acp->MAS_messageOptions = MAIL_DEFAULT_MESSAGE_OPTIONS;
	    acp->MAS_startExitOptions = MAIL_DEFAULT_START_EXIT_OPTIONS;
	    acp->MAS_appOptions = MAIL_DEFAULT_APP_OPTIONS;
            acp->MAS_checkInterval = MAIL_DEFAULT_CHECK_INTERVAL;
	    acp->MAS_checkOptions = MAIL_DEFAULT_CHECK_OPTIONS;
	}
	/*
	 * return desired info
	 */
	*appOpts = acp->MAS_appOptions;
	/*
	 * fill in the text objects
	 */
	@call PfMailAccountText::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_account, 0);
	@call PfReturnAddr::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_returnAddr, 0);
	@call PfRealNameText::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_realName, 0);
	@call PfSMTPServer::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_smtp, 0);
	@call PfPOP3Server::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_pop3, 0);
	@call PfSignature::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_signature, 0);
	MungePassword(acp->MAS_password);
	@call PfPasswordText::MSG_VIS_TEXT_REPLACE_ALL_PTR(acp->MAS_password, 0);
	/*
	 * Set the options
	 */
	@call PfMessageOptionList::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(acp->MAS_messageOptions & ~MMO_AUTO_SIGN, 0);
@ifdef AUTO_SIGNATURE_OPTION
        @call PfSigOptList::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(acp->MAS_messageOptions & MMO_AUTO_SIGN, 0);
@endif
        opts = acp->MAS_startExitOptions & ~MSEO_APP_START;
	@call PfStartOptionList::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(opts, 0);
@ifdef APP_START_OPTIONS
	@call PfAppStartOptionList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(acp->MAS_startExitOptions & MSEO_APP_START, 0);
@endif // APP_START_OPTIONS

@ifdef RECEIVE_NOTIFY_OPTIONS
        @call PfNotifyOptionsList::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(acp->MAS_appOptions, 0);
@endif // RECEIVE_NOTIFY_OPTIONS

        /*
	 * set the check on interval options and (re)start the timer
	 */
@ifdef CHECK_MAIL_ON_INTERVALS
        interval = acp->MAS_checkInterval;
        @call PfCheckInterval::MSG_GEN_VALUE_SET_INTEGER_VALUE(interval, 0);
        opts = acp->MAS_checkOptions;
        @call PfMailIntervalOptions::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(opts & MCO_CHECK_INTERVALS, 0);
	@call PfMailIntervalOptions2::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(opts & MCO_IF_CONNECTED, 0);
	@call PfCheckMailOptions::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(opts & ~(MCO_CHECK_INTERVALS|MCO_IF_CONNECTED), 0);
	@call SendReceiveDialog::MSG_MSR_SET_TIMER(interval, opts);
	@call PfMailIntervalOptions::MSG_GEN_BOOLEAN_GROUP_SEND_STATUS_MSG(0);
@endif // CHECK_MAIL_ON_INTERVALS

	MemFree(mh);
	if (fh) {
	    FileClose(fh, FALSE);
	}

        /*
	 * deal with the default account
	 */
@ifdef MULTIPLE_ACCOUNT_SUPPORT
@ifndef DEFAULT_ACCOUNT_IS_CURRENT
        GetDefaultAccount(defAcctName);
        curAcct = @call PfAccountList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
        acctHan = @call PfAccountList::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(curAcct);
	acctName = MemLock(acctHan);
	defOpts = 0;
	if (!strcmp(acctName, defAcctName)) {
	    defOpts = MDO_IS_DEFAULT;
	}
	MemFree(acctHan);
	@call PfDefaultAcctList::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(defOpts, 0);
@endif // DEFAULT_ACCOUNT_IS_CURRENT
@endif // MULTIPLE_ACCOUNT_SUPPORT

	return(FALSE);
}

@ifdef BCC_SUPPORT


/**************************************************************
 *          
 * FUNCTION:        UpdateBCCUI
 * DESCRIPTION:     update the UI for BCC support
 *
 * PASS:            opts - current MailMessageOptions
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      9/18/99    Initial Revision
 ***************************************************************/

void
UpdateBCCUI(MailMessageOptions opts)
{
    if (@call MailAppObj::MSG_MAIL_APP_GET_USER_LEVEL() > UIIL_INTRODUCTORY) {
	if (opts & MMO_SHOW_BCC) {
	    @call ComposeBccTrigger::MSG_GEN_SET_USABLE(VUM_DLYD);
	    @call ComposeBccField::MSG_GEN_SET_USABLE(VUM_DLYD);
	    @call ComposeCCField::MSG_MAIL_FIELD_TEXT_SET_NEXT_FIELD(@ComposeBccField);
	} else {
	    @call ComposeBccTrigger::MSG_GEN_SET_NOT_USABLE(VUM_DLYD);
	    @call ComposeBccField::MSG_GEN_SET_NOT_USABLE(VUM_DLYD);
@ifdef ALTERNATE_FIELD_ORDER
            @call ComposeCCField::MSG_MAIL_FIELD_TEXT_SET_NEXT_FIELD(@ComposeSubjectField);
@else
            @call ComposeCCField::MSG_MAIL_FIELD_TEXT_SET_NEXT_FIELD(@ComposeBodyView);
@endif
         }
     }
}

@endif


/**************************************************************
 *          
 * FUNCTION:        UpdatePrimaryMoniker
 * DESCRIPTION:     update the moniker on the primary
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      3/3/99    Initial Revision
 ***************************************************************/

void
UpdatePrimaryMoniker(void)
{
    MemHandle acctHan;

    /*
     * set the moniker of the primary to "Mail - <account@foo.com>"
     */
    acctHan = @call PfReturnAddr::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
@ifdef VERBOSE_TITLE_BAR
    if (acctHan) {
	TCHAR *strP, *p, *q;
	word templateLen;
	MemLock(OptrToHandle(@titleBarTemplate));
	templateLen = LMemGetChunkSize(@titleBarTemplate) - 1;
	MemReAlloc(acctHan, MemGetInfo(acctHan, MGIT_SIZE) + templateLen, 0);
	strP = MemLock(acctHan);
	if (*strP) {
	    p = strP+strlen(strP)+1;  /* past NULL at end of email addr */
                              /* past NULL at end of template + email addr */
	    q = strP+templateLen+strlen(strP)+1;
	    while (p > strP) {
		*(--q) = *(--p);
	    }
	    memcpy(strP, LMemDeref(@titleBarTemplate), templateLen);
	}
	MemUnlock(OptrToHandle(@titleBarTemplate));
	MemUnlock(acctHan);
    }
@endif
    @call MailPrimary::MSG_GEN_PRIMARY_REPLACE_LONG_TERM_MONIKER(VUM_DLYD,
								 0, 0, 0,
								 VMDT_TEXT,
								 VMST_HPTR,
								 (dword) acctHan << 16);
    MemFree(acctHan);
}


@ifdef GPC_PORTAL_SUPPORT
/*
 * in debug mode?
 */
Boolean DebugMode()
{
    Boolean debug = FALSE;

    if (InitFileReadBoolean("fileManager", "debug", &debug)) {
	/* not found */
	debug = FALSE;
    }
    return debug;
}
@endif



/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_ACCOUNT_SELECTED
 * DESCRIPTION:     an account was selected
 *
 * PASS:            selection - item #
 *                  numSelections - # of selections
 *                  stateFlags - GenItemGroupStateFlags
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_ACCOUNT_SELECTED
{
@ifdef MULTIPLE_ACCOUNT_SUPPORT
    word defIndex;
    FileLongName acctName;
@endif
@ifdef BCC_SUPPORT
    MailAppOptions opts;
@endif
    MailAppOptions appOpts;

    /*
     * go to our directory
     */
    GotoMailDirectory(NULL);
    /*
     * update the accounts UI
     */
    UpdateAccountUI(&appOpts);
@ifdef GPC_PORTAL_SUPPORT
    @call oself::MSG_META_ADD_VAR_DATA(
	TEMP_ACCOUNT_LIST_CURRENT_APP_OPTIONS|VDF_SAVE_TO_STATE,
	sizeof(MailAppOptions), &appOpts);
@endif
@ifdef BCC_SUPPORT
    opts = @call PfMessageOptionList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
    UpdateBCCUI(opts);
@endif
    /*
     * rebuild the folder list
     */
    RebuildFolderList(MFID_DEFAULT, FALSE);
    /*
     * update other UI
     */
    EnableDisableEmptyTrash();
    /*
     * clear the prompt password so we don't try to use the password
     * from a different account
     */
    @call GPPassword::MSG_VIS_TEXT_DELETE_ALL();
    /*
     * if the default account is selected, disable "Delete"
     * or if it is an account managed by the portal
     */
@ifdef MULTIPLE_ACCOUNT_SUPPORT
    /*
     * allow deleting the account as long as it isn't the default
     */
@ifndef DEFAULT_ACCOUNT_IS_CURRENT
    GetDefaultAccount(acctName);
    defIndex = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX(acctName);
    if (defIndex == selection) {
	@call PfAccountDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
    } else {
	@call PfAccountDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_DLYD);
    }
@endif

@ifdef GPC_PORTAL_SUPPORT
    defIndex = @call oself::MSG_ACCOUNT_LIST_GET_NUM_ACCOUNTS();
    if (defIndex <= 1 || ((appOpts & MAO_PORTAL_ACCOUNT) && !DebugMode())) {
	@call PfAccountDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
    } else {
	@call PfAccountDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_DLYD);
    }
@endif // GPC_PORTAL_SUPPORT
@endif // MULTIPLE_ACCOUNT_SUPPORT
    /*
     * update the moniker on the primary to Mail - account@foo.com
     */
    UpdatePrimaryMoniker();
    /*
     * Make sure the message lists are built out for the folders in this new account
     */
    @call TheFolderList::MSG_FOLDER_LIST_INIT_MSGLIST();
}

@ifdef MULTIPLE_ACCOUNT_SUPPORT


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_NEW_ACCOUNT
 * DESCRIPTION:     create a new account
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_NEW_ACCOUNT
{
        MemHandle ach;
	TCHAR *acp;
	word err;
@ifndef GPC_PORTAL_SUPPORT
        word acctIndex;
@endif

	ach = @call PfAccountsNewName::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
	acp = MemLock(ach);
	GotoTopLevelDirectory();
	err = MailAddAccount(acp, NULL, NULL, NULL, NULL, NULL, NULL, MAIL_DEFAULT_APP_OPTIONS);
	switch (err) {
	case MAE_NO_ERROR:
	    /*
	     * no error: dismiss the dialog and clear the text for next time
	     */
	    @call PfAccountNewDialog::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS);
	    @call PfAccountsNewName::MSG_VIS_TEXT_DELETE_ALL();
	    /*
	     * also set the focus back to the Preferences dialog
	     */
	    @call PfAccountsDialog::MSG_META_GRAB_FOCUS_EXCL();
@ifndef GPC_PORTAL_SUPPORT
	    @call PfAccountList::MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();
	    acctIndex = @call PfAccountList::MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX(acp);
	    @call PfAccountList::MSG_ACCOUNT_LIST_REBUILD(acctIndex);
@endif
	    break;
	case MAE_ACCOUNT_EXISTS:
	    ReportError(@accountExistsErr, acp);
	    break;
	default:
	    ReportError(@unableToCreateAccountErr, acp);
	    break;
	}
	MemFree(ach);
}


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_DELETE_ACCOUNT
 * DESCRIPTION:     delete an account
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/28/99     Initial Revision
 ***************************************************************/
@method AccountListClass, MSG_ACCOUNT_LIST_DELETE_ACCOUNT
{
    word resp, index, err = 0;
    TCHAR *acctName;
    MemHandle dh;

    index = pself->GIGI_selection;
    dh = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(index);
    acctName = MemLock(dh);
    resp = DoYesNo(@deleteAccountStr, acctName);
    if (resp == IC_YES) {
	/*
	 * close the message array file
	 */
	@call TheMessageList::MSG_MAIL_LIST_CLOSE_MESSAGE_ARRAY();
	/*
	 * delete all messages in each folder, then each folder
	 */
	err = MailDeleteAccount(acctName);
	if (err) {
	    /*
	     * report any error
	     */
	    ReportError(@deleteAccountErr, acctName);
	} else {
@ifndef GPC_PORTAL_SUPPORT
	    @call PfAccountList::MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();
	    @call PfAccountList::MSG_ACCOUNT_LIST_REBUILD(-1);
@endif
	}
    }
    MemFree(dh);
}

@ifdef GPC_PORTAL_SUPPORT


/**************************************************************
 *      
 * FUNCTION:        MSG_META_NOTIFY_WITH_DATA_BLOCK
 * PASS:            manufID - ManufacturerID
 *                  notificationType - notification type
 *                  data - data for notification
 * RETURN:          none
 * DESCRIPTION:
 *         note when the mail accounts change
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      01/07/00    Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_META_NOTIFY_WITH_DATA_BLOCK
{
    NotifyMailDatabaseChange *nPtr;
    word acctIndex;

    if (manufID == MANUFACTURER_ID_GEOWORKS && notificationType == GWNT_EMAIL_DATABASE_CHANGE) {
	nPtr = MemLock(data);
	switch(nPtr->NMDBC_change) {
	case MDBCT_ACCOUNT_ADDED:
	case MDBCT_ACCOUNT_SELECTED:
	    @call oself::MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();
	    acctIndex = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX(nPtr->NMDBC_account);
	    @send, forceQueue oself::MSG_ACCOUNT_LIST_REBUILD(acctIndex);
	    break;
	case MDBCT_ACCOUNT_DELETED:
	    @call oself::MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();
	    @send, forceQueue oself::MSG_ACCOUNT_LIST_REBUILD(-1);
	    break;
	}
	MemUnlock(data);
    }
    @callsuper();
}

@endif

@endif /* @ifdef MULTIPLE_ACCOUNT_SUPPORT */



/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_SAVE_ACCOUNT
 * DESCRIPTION:     save an account
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/15/98    Initial Revision
 ***************************************************************/

void
GetPfText(optr textObj, TCHAR *buf)
{
        @call textObj::MSG_VIS_TEXT_GET_ALL_PTR(buf);
}

@method AccountListClass, MSG_ACCOUNT_LIST_SAVE_ACCOUNT
{
        MemHandle ach;
	FileHandle fh;
	MailAccountStruct *acp;
	word opts;
@ifdef CHECK_MAIL_ON_INTERVALS
	word interval;
@endif
@ifdef MULTIPLE_ACCOUNT_SUPPORT
        TCHAR mailCat[INI_CATEGORY_BUFFER_SIZE];
        MemHandle acctHan;
	TCHAR *acctName;
	word curAcct;
@endif
        TCHAR *acctInfoName;
@ifdef GPC_PORTAL_SUPPORT
        MailAppOptions appOptions = 0;
@endif

	ach = MemAlloc(sizeof(MailAccountStruct), HF_DYNAMIC, HAF_STANDARD|HAF_ZERO_INIT);
	if (!ach) {
	    ReportError(@unableToSaveAccountErr, NULL);
	    return;
	}
	/*
	 * create an ACCTINFO file in the appropriate directory
	 */
	FilePushDir();
	GotoMailDirectory(NULL);
	acctInfoName = MailLockStdString(MSS_ACCT_INFO_FILE);
	fh = FileCreate(acctInfoName, FCF_NATIVE|FILE_DENY_RW|FILE_ACCESS_RW|FILE_CREATE_TRUNCATE, 0);
	MailUnlockStdString(MSS_ACCT_INFO_FILE);
	FilePopDir();
	if (!fh) {
	     MemFree(ach);
	     ReportError(@unableToSaveAccountErr, NULL);
	     return;
	}
	/*
	 * write the user data into the buffer then the file
	 */
	acp = MemLock(ach);
	GetPfText(@PfMailAccountText, acp->MAS_account);
	GetPfText(@PfReturnAddr, acp->MAS_returnAddr);
	GetPfText(@PfRealNameText, acp->MAS_realName);
	GetPfText(@PfSMTPServer, acp->MAS_smtp);
	GetPfText(@PfPOP3Server, acp->MAS_pop3);
	GetPfText(@PfSignature, acp->MAS_signature);
	/*
	 * get the password and do a simple encryption
	 */
	GetPfText(@PfPasswordText, acp->MAS_password);
	MungePassword(acp->MAS_password);
	/*
	 * get the options
	 */
	acp->MAS_messageOptions = @call PfMessageOptionList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
@ifdef BCC_SUPPORT
	UpdateBCCUI(acp->MAS_messageOptions);
@endif
@ifdef AUTO_SIGNATURE_OPTION
        acp->MAS_messageOptions |= @call PfSigOptList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
@endif
	acp->MAS_startExitOptions = @call PfStartOptionList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
@ifdef APP_START_OPTIONS
	acp->MAS_startExitOptions |= @call PfAppStartOptionList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
@endif

        /*
	 * save check on interval settings, and (re)start the timer
	 */
@ifdef CHECK_MAIL_ON_INTERVALS
        opts = @call PfMailIntervalOptions::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
        opts |= @call PfMailIntervalOptions2::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
	opts |= @call PfCheckMailOptions::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
        acp->MAS_checkOptions = opts;
        interval = @call PfCheckInterval::MSG_GEN_VALUE_GET_INTEGER_VALUE();
        acp->MAS_checkInterval = interval;
	@call SendReceiveDialog::MSG_MSR_SET_TIMER(interval, opts);
@else
        acp->MAS_checkOptions = MAIL_DEFAULT_CHECK_OPTIONS;
	acp->MAS_checkInterval = 0;
@endif

@ifdef RECEIVE_NOTIFY_OPTIONS
        opts = @call PfNotifyOptionsList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
@else
	opts = MAIL_DEFAULT_APP_OPTIONS;
@endif
@ifdef GPC_PORTAL_SUPPORT
        /* restore PORTAL_ACCOUNT flag */
        @call oself::MSG_META_GET_VAR_DATA(
	    TEMP_ACCOUNT_LIST_CURRENT_APP_OPTIONS,
	    sizeof(MailAppOptions), &appOptions);
        opts |= (appOptions & MAO_PORTAL_ACCOUNT);
@endif
        acp->MAS_appOptions = opts;
	/*
	 * write the new user data
	 */
	FileWrite(fh, acp, sizeof(MailAccountStruct), FALSE);
	/*
	 * clean up and report any error
	 */
	FileClose(fh, FALSE);
	MemFree(ach);

@ifdef MULTIPLE_ACCOUNT_SUPPORT
        /*
	 * deal with default account setting
	 */
@ifndef DEFAULT_ACCOUNT_IS_CURRENT
        if (@call PfDefaultAcctList::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() & MDO_IS_DEFAULT) {
@endif // DEFAULT_ACCOUNT_IS_CURRENT
	    curAcct = @call PfAccountList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	    acctHan = @call PfAccountList::MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(curAcct);
	    acctName = MemLock(acctHan);
	    @call MailAppObj::MSG_META_GET_INI_CATEGORY(mailCat);
	    InitFileWriteString(mailCat, defKey, acctName);
	    MemFree(acctHan);
@ifndef DEFAULT_ACCOUNT_IS_CURRENT
	}
@endif // DEFAULT_ACCOUNT_IS_CURRENT
@endif // MULTIPLE_ACCOUNT_SUPPORT

@ifdef SERVER_MOD_WARNING
        /*
	 * mark the various fields as not modified, so we can warn the user
	 * as appropriate next time
	 */
        @call PfMailAccountText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
        @call PfPasswordText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
	@call PfReturnAddr::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
	@call PfSMTPServer::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
	@call PfPOP3Server::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
@endif
	/*
	 * update the moniker on the primary to Mail - account@foo.com
	 */
	UpdatePrimaryMoniker();
}



/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_DONE
 * DESCRIPTION:     save an account and close the dialog
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/5/99      Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_DONE
{
@ifdef SERVER_MOD_WARNING
    word resp, mods;
@endif
    MailAppOptions appOpts = 0;

    /*
     * verify the return address looks OK
     */
    if (!ValidMailAddresses(@PfReturnAddr)) {
	return;
    }

@ifdef GPC_PORTAL_SUPPORT
    /* if any fields are modified (except signature) for portal account,
       give error */
    @call oself::MSG_META_GET_VAR_DATA(TEMP_ACCOUNT_LIST_CURRENT_APP_OPTIONS,
				       sizeof(MailAppOptions), &appOpts);
    if ((appOpts & MAO_PORTAL_ACCOUNT) && !DebugMode()) {
	mods = @call PfMailAccountText::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	mods |= @call PfPasswordText::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	mods |= @call PfReturnAddr::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	mods |= @call PfRealNameText::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	mods |= @call PfSMTPServer::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	mods |= @call PfPOP3Server::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
	if (mods) {
	    ReportError(@changePortalError, NULL);
	    /*
	     * reset the UI
	     */
	    FilePushDir();
	    GotoMailDirectory(NULL);
	    UpdateAccountUI(&appOpts);
	    FilePopDir();
	    return;
	}
    }
@endif

@ifdef SERVER_MOD_WARNING
    /*
     * if the user changed any server settings, put up a hideous warning,
     * telling the user that their changes may bring about the end of
     * the world as we know it
     */
    mods = @call PfMailAccountText::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    mods |= @call PfPasswordText::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    mods |= @call PfReturnAddr::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    mods |= @call PfSMTPServer::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    mods |= @call PfPOP3Server::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();
    if (mods) {
	resp = DoYesNo(@changeServerWarning, NULL);
	if (resp == IC_NO) {
	    /*
	     * reset the UI
	     */
	    FilePushDir();
	    GotoMailDirectory(NULL);
	    UpdateAccountUI(&appOpts);
	    FilePopDir();
	    return;
	}
    }
@endif

    @call oself::MSG_ACCOUNT_LIST_SAVE_ACCOUNT();
    if (ThreadGetError()) {
        ReportError(@unableToSaveAccountErr, NULL);
    } else {
      @call PfAccountsDialog::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS);
    }
}


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX
 * DESCRIPTION:     Get the list index of an account by name
 *
 * PASS:            account - ptr to account name
 * RETURN:          list index # of account (GIGS_NONE if not found)
 *
 * NOTE:
 *        This bit of ugliness is required because there is no
 *        way to know where in the list any new account has been
 *        added.  After creating a new account, we want to select it.
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/19/99      Initial Revision
 ***************************************************************/

TCHAR wildAIStr[] = "*";

@method AccountListClass, MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX
{
    optr arr = pself->ALI_accountArray;
    TCHAR *arrP;
    word eSize, numDirs;
    sword acctIndex;

    numDirs = ChunkArrayGetCount(arr);
    for (acctIndex = 0; acctIndex < numDirs; acctIndex++) {
	arrP = ChunkArrayElementToPtr(arr, acctIndex, &eSize);
	if (!strcmp(arrP, account)) {
	    return(acctIndex);
	}
    }
    return(GIGS_NONE);
}

@ifdef CHECK_MAIL_ON_INTERVALS


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_INTERVAL_OPTIONS_CHANGED
 * DESCRIPTION:     the interval options have changed
 *
 * PASS:            selectedBooleans
 *                  indeterminateBooleans
 *                  modifiedBooleans
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      9/19/99      Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_INTERVAL_OPTIONS_CHANGED
{
    if (selectedBooleans & MCO_CHECK_INTERVALS) {
	@call PfCheckInterval::MSG_GEN_SET_ENABLED(VUM_DLYD);
	@call PfCheckMinGlyph::MSG_GEN_SET_ENABLED(VUM_DLYD);
@ifndef INTERIM_NEWDEAL_16_COLOR_ART
	@call PfCMOIfConnected::MSG_GEN_SET_ENABLED(VUM_DLYD);
@endif
    } else {
	@call PfCheckInterval::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
	@call PfCheckMinGlyph::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
@ifndef INTERIM_NEWDEAL_16_COLOR_ART
	@call PfCMOIfConnected::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
@endif
    }
}

@endif


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_INIT_NAME_ARRAY
 * DESCRIPTION:     initialize the name array
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      9/29/99      Initial Revision
 ***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_INIT_NAME_ARRAY
{
    MemHandle dirHan;
    word numDirs, i, eSize;
    optr arr;
    ChunkHandle chl;
    FileLongName *bufP, *arrP;

    FilePushDir();
    GotoTopLevelDirectory();
    arr = pself->ALI_accountArray;

    /*
     * make sure there's a chunk array
     */
    if (arr) {
	ChunkArrayZero(arr);
    } else {
	chl = ChunkArrayCreate(OptrToHandle(oself), 0, 0, 0);
	arr = ConstructOptr(OptrToHandle(oself), chl);
	ObjDerefGen(oself);
	pself->ALI_accountArray = arr;
    }
    /*
     * get the directory names and build an array
     */
    dirHan = GetDirNames(&numDirs);
    bufP = MemLock(dirHan);
    for (i = 0; i < numDirs; i++) {
	eSize = LocalStringSize(bufP[i])+sizeof(TCHAR);
	arrP = ChunkArrayAppend(arr, eSize);
	strcpy(arrP, bufP[i]);
    }
    MemFree(dirHan);
    FilePopDir();
}



/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_LIST_REBUILD
 * DESCRIPTION:     rebuild the accounts list
 *
 * PASS:            selection - item to select (-1 for default)
 * RETURN:          none
 * DESCRIPTION:
 *         
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/4/98     Initial Revision
***************************************************************/

@method AccountListClass, MSG_ACCOUNT_LIST_REBUILD
{
    word numAccounts;
    TCHAR acctName[FILE_LONGNAME_BUFFER_SIZE];

    @call oself::MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();

    if (selection == -1) {
	GetDefaultAccount(acctName);
	selection = @call oself::MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX(acctName);
	if (selection == GIGS_NONE) {
	    selection = 0;
	}
    }

    numAccounts = @call PfAccountList::MSG_ACCOUNT_LIST_GET_NUM_ACCOUNTS();
    @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numAccounts);
    @call oself::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection, 0);
    @call oself::MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(0);
}


/**************************************************************
 *          
 * FUNCTION:        MSG_GEN_INTERACTION_ACTIVATE_COMMAND
 * DESCRIPTION:     reset options
 *
 * PASS:            command - InteractionCommand
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/5/99      Initial Revision
 ***************************************************************/

@method AccountDialogClass, MSG_GEN_INTERACTION_ACTIVATE_COMMAND
{
    MailAppOptions appOpts;

    @callsuper();

    if (command == IC_DISMISS) {
	FilePushDir();
	GotoMailDirectory(NULL);
	UpdateAccountUI(&appOpts);
	FilePopDir();
    }
}

@ifdef SCROLLING_OPTIONS


/**************************************************************
 *          
 * FUNCTION:        MSG_ACCOUNT_DIALOG_OPTION_GROUP_SELECTED
 * DESCRIPTION:     reset options
 *
 * PASS:            selection - item #
 *                  numSelections - # of selections
 *                  stateFlags - GenItemGroupStateFlags
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/20/00     Initial Revision
 ***************************************************************/

const optr groupObjs[] = {
    @PfMessageGroup,
    @PfStartExitGroup,
    @PfCheckMailGroup,
    @PfSignatureGroup
@ifdef RECEIVE_NOTIFY_OPTIONS
    , @PfNotifyGroup
@endif
};

@method AccountDialogClass, MSG_ACCOUNT_DIALOG_OPTION_GROUP_SELECTED
{
    word i;

    for (i = 0; i < lengthof(groupObjs, optr); i++) {
	if (i == selection) {
	    @call groupObjs[i]::MSG_GEN_SET_USABLE(VUM_DLYD);
	} else {
	    @call groupObjs[i]::MSG_GEN_SET_NOT_USABLE(VUM_DLYD);
	}
    }
}

@endif
