/***********************************************************************
 *
 *	Copyright (c) New Deal 1998 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailAdvertisement.goc
 *
 * AUTHOR:  	  Ian Porteous: 12/2/98
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	12/2/98    ian	    Initial version
 *
 * DESCRIPTION:
 *	Advertisement Class
 *
 * 	$Id$
 *
 ***********************************************************************/

#include <product.h>
@include "mail.goh"
@include "class.goh"
@include "global.goh"
#include <graphics.h>
#include <HTMLDRV.H>
@include <objects/clipbrd.goh>
#include <ansi/string.h>
#include <vm.h>
#include <graphics.h>
#include <library.h>
#include <initfile.h>


@ifdef EMAIL_ADS

@classdecl AdvertisementClass;

#define X_CUSHION 5
#define Y_CUSHION 5
#define FRAME_DELAY 20

/***********************************************************************
 *		MSG_VIS_DRAW for AdvertisementClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	4/13/98   	Initial Revision
 *
 ***********************************************************************/
@method AdvertisementClass, MSG_VIS_DRAW
{
    Rectangle rect;
    VMFileHandle vmf;
    GStateHandle gsString;
    word lastElement, cf, id;
    MemHandle mh;
    AnimationHeader *hdr;
    VMChain *bitmaps;
    
    @call self::MSG_VIS_GET_BOUNDS(&rect);

    if (pself->AI_bitmapGString == NULL) {
	@call self::MSG_ADVERTISEMENT_LOAD_AD();
    }

    if (pself->AI_bitmapGString != NULL) {
	vmf = ClipboardGetClipboardFile();
	if (pself->AI_iad.IAD_type == IAD_TYPE_GSTRING) {
	    gsString = GrLoadGString(vmf,GST_VMEM,pself->AI_bitmapGString);
	    GrDrawGString(gstate,gsString,rect.R_left+X_CUSHION,
			  rect.R_top+Y_CUSHION
			  ,0,&lastElement);
	    GrDestroyGString(gsString, 0, GSKT_LEAVE_DATA);
	} else {
	    hdr = VMLock(vmf,pself->AI_bitmapGString,&mh);
	    /* Don't currently use any of the information in the 
             * frames 
	     * frames=((byte*) hdr)+sizeof(AnimationHeader);
             */
	    bitmaps = ((byte *)hdr)+hdr->AH_tree.VMCT_offset;
	    if (pself->AI_currentFrame >= hdr->AH_tree.VMCT_count) {
		pself->AI_currentFrame = 0;
	    }
	    cf = pself->AI_currentFrame;
	    GrDrawHugeBitmap(gstate,rect.R_left+X_CUSHION,
			     rect.R_top+Y_CUSHION,
			     vmf,VMCHAIN_GET_VM_BLOCK(bitmaps[cf]));
	    VMUnlock(mh);
            
	    if (!(pself->AI_timer)) {
		pself->AI_timer = TimerStart(TIMER_EVENT_ONE_SHOT,oself,FRAME_DELAY,
					     MSG_ADVERTISEMENT_ANIMATE,0,&id);
		pself->AI_timerID = id;
	    }
	}
    } 

    @callsuper();
}

/***********************************************************************
 *		MSG_ADVERTISEMENT_ANIMATE for AdvertisementClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	4/13/98   	Initial Revision
 *
 ***********************************************************************/
@method AdvertisementClass, MSG_ADVERTISEMENT_ANIMATE
{
    Rectangle rect;
    VMFileHandle vmf;
    MemHandle mh;
    AnimationHeader *hdr;
    VMChain *bitmaps;
    GStateHandle gstate;
    word id, cf;


    gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE() ;

    @call self::MSG_VIS_GET_BOUNDS(&rect);

    vmf = ClipboardGetClipboardFile();

    hdr = VMLock(vmf,pself->AI_bitmapGString,&mh);
    if (pself->AI_currentFrame >= hdr->AH_tree.VMCT_count) {
	pself->AI_currentFrame = 0;
    }

    bitmaps = ((byte *)hdr)+hdr->AH_tree.VMCT_offset;
    cf = pself->AI_currentFrame;
    GrDrawHugeBitmap(gstate,rect.R_left+X_CUSHION,
		     rect.R_top+Y_CUSHION,
		     vmf,VMCHAIN_GET_VM_BLOCK(bitmaps[cf]));
    VMUnlock(mh);
    
    pself->AI_currentFrame += 1;
    pself->AI_timer = TimerStart(TIMER_EVENT_ONE_SHOT,oself,FRAME_DELAY,
				 MSG_ADVERTISEMENT_ANIMATE,0,&id);
    pself->AI_timerID = id;
    GrDestroyState(gstate);

}

/***********************************************************************
 *		MSG_ADVERTISEMENT_STOP for AdvertisementClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	4/13/98   	Initial Revision
 *
 ***********************************************************************/
@method AdvertisementClass, MSG_ADVERTISEMENT_STOP
{
    if (pself->AI_timer) {
	TimerStop(pself->AI_timer,pself->AI_timerID);
    }
    @call oself::MSG_ADVERTISEMENT_CLEAR_AD();
}


/***********************************************************************
 *		LoadAnimGifDriver
 ***********************************************************************
 *
 * SYNOPSIS:	Load Mime import driver
 *              
 * CALLED BY:	
 * RETURN:	
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	12/15/98   	Initial Revision
 *
 ***********************************************************************/
GeodeHandle LoadAnimGifDriver(void) {
    GeodeHandle mimeDriver;
    GeodeLoadError err;

    FilePushDir();
    FileSetStandardPath(SP_SYSTEM);
    FileSetCurrentPath(NULL,"impex");
    mimeDriver = NULL;
#if ERROR_CHECK
    mimeDriver = GeodeUseLibrary("impgrape.geo",MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR,&err);
#else 
    mimeDriver = GeodeUseLibrary("impgraph.geo",MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR,&err);
#endif

    FilePopDir();
    return mimeDriver;
}

void UnloadAnimGifDriver(word driver) 
{
    GeodeFreeLibrary(driver);
}

char mimeType[] = "image/gif";
char fileCat[] = "emailSetup";
char fileKey[] = "add";

/***********************************************************************
 *		MSG_ADVERTISEMENT_LOAD_AD for AdvertisementClass
 ***********************************************************************
 *
 * SYNOPSIS:	    
 *                  
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	4/13/98   	Initial Revision
 *
 ***********************************************************************/

@method AdvertisementClass, MSG_ADVERTISEMENT_LOAD_AD
{
    GeodeHandle mimeDriver;
    void *ImportGraphic = NULL;
    VMBlockHandle dataVMBlock;
    VMFileHandle vmf;
    ImageAdditionalData iad;
    dword usedMem;
    char *file = NULL;
    int len;
    MemHandle mh;

    vmf = ClipboardGetClipboardFile();

    mimeDriver = LoadAnimGifDriver();
    if (mimeDriver) {
	ImportGraphic=ProcGetLibraryEntry(mimeDriver, MIME_ENTRY_GRAPHIC);
    } else {
	return;
    }

    if (ImportGraphic) {
	vmf = ClipboardGetClipboardFile();

	/* get the name of the add file 
	 */
	if (!InitFileReadStringBlock(fileCat, fileKey, &mh, 0, &len)) {
	    file = MemLock(mh);

	    /* assume the add file is in the top diretory
	     */
	    FilePushDir();
	    FileSetStandardPath(SP_TOP);
#if PROGRESS_DISPLAY
	    dataVMBlock = ((pcfm_MimeDrvGraphic *)ProcCallFixedOrMovable_pascal)
		(mimeType, file, vmf, &iad, MIME_RES_DISPLAY_DEFAULT, NULL, 
		 &usedMem, NULL, ImportGraphic);          
#else
	    dataVMBlock = ((pcfm_MimeDrvGraphic *)ProcCallFixedOrMovable_pascal)
		(mimeType, file, vmf, &iad, MIME_RES_DISPLAY_DEFAULT, NULL, 
		 &usedMem, ImportGraphic);          
#endif
	    MemFree(mh);

	    if (dataVMBlock) {
		pself->AI_bitmapGString = dataVMBlock;
		memcpy(&(pself->AI_iad),&iad,sizeof(ImageAdditionalData));
		pself->AI_currentFrame = 0;
	    }
	    
	    FilePopDir();


	}
           /* call library to handle URL */
    }

    if (mimeDriver) {
	UnloadAnimGifDriver(mimeDriver);
    }


}

/***********************************************************************
 *		MSG_ADVERTISEMENT_CLEAR_AD for AdvertisementClass
 ***********************************************************************
 *
 * SYNOPSIS:  Free up everything allocated for the ad
 *                  
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	        Date		Description
 *	----	        ----		-----------
 *	porteous	4/13/98   	Initial Revision
 *
 ***********************************************************************/
@method AdvertisementClass, MSG_ADVERTISEMENT_CLEAR_AD
{
    VMFileHandle vmf;
    MemHandle mh;
    AnimationHeader *hdr;
    VMChain *bitmaps;
    word i;
    
    if (pself->AI_bitmapGString) {
	vmf = ClipboardGetClipboardFile();
	
        hdr = VMLock(vmf,pself->AI_bitmapGString,&mh);
	bitmaps = ((byte *)hdr)+hdr->AH_tree.VMCT_offset;
	for (i=0;i<hdr->AH_tree.VMCT_count;++i) {
	    VMFree(vmf,	VMCHAIN_GET_VM_BLOCK(bitmaps[i]));
	}
        VMUnlock(mh);
	VMFree(vmf,pself->AI_bitmapGString);
    }
}

@endif /*EMAIL_ADS*/
