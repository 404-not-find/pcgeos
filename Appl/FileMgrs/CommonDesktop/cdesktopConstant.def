COMMENT @----------------------------------------------------------------------
	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Desktop
FILE:		cdesktopConstant.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	brianc	8/89		Initial version

DESCRIPTION:
	This file contains contains global constants for the desktop.

	$Id: cdesktopConstant.def,v 1.4 98/08/20 05:08:14 joon Exp $

------------------------------------------------------------------------------@

;------------------------------------------------------------------------------
;			Constants
;------------------------------------------------------------------------------
; DesktopFeatures:  This record is the basis for the scalable UI of
; GeoManager.  Unlike other major apps, there is no way to set this UI
; in the app itself -- since UI is likely to be set different ways for
; different products, and it may be undesirable for the user to be
; able to change these settings.
;
; These features are stored in app object's GAI_features field, and
; can be fetched using MSG_GEN_APPLICATION_GET_APP_FEATURES.  However,
; the proper way to use this record is in conjunction with the
; usability tables set up in DeskApplicationUpdateAppFeatures.

DesktopFeatures	record
	DF_CONNECT:1
	; If this flag is set, GeoManager will have a "Connect" icon,
	; and a connect trigger in the disk menu.  Note that this can
	; only be used if the file manager is compiled with the
	; CONNECT_TO_REMOTE flag.

	:12

	DF_SHOW_REMOTE:1
	; If set, shows remote (or merged SP) files with underline

	DF_SHOW_LINKS:1
	; If set, links filenames will be drawn in blue

	DF_WRAP:1
	; Allow word-wrapping of filenames
DesktopFeatures end


; This default should reflect the state of the .ui file with respect
; to usable/not usable.  Ie, if a flag is SET by default, then the
; objects that that flag controls should be USABLE, and vice-versa.

DEFAULT_DESKTOP_FEATURES = mask DF_CONNECT


;
; used for changes for small screens
;
DESKTOP_SMALL_SCREEN_WIDTH_THRESHOLD	equ 512
DESKTOP_SMALL_SCREEN_HEIGHT_THRESHOLD	equ 320

; text mode icon bitmap dimensions
;
if GPC_TEXT_MODE_ICONS
TEXT_ICON_WIDTH			equ 15
TEXT_ICON_HEIGHT		equ 15
else
TEXT_ICON_WIDTH			equ 16
TEXT_ICON_HEIGHT		equ 9
endif
TEXT_ICON_HORIZ_SPACING		equ 4

;
; direct action bitmap mouse ptr image dimensions
;
DRAG_REGION_WIDTH		equ 20
DRAG_REGION_HEIGHT		equ 16

;
; spacing between columns in long text mode
;
if GPC_NAMES_AND_DETAILS_TITLES
LONG_TEXT_HORIZ_SPACING		equ 15
else
LONG_TEXT_HORIZ_SPACING		equ 5
endif

;
; tree outline mode icon dimensions
;
TREE_OUTLINE_ICON_WIDTH		equ 16
TREE_OUTLINE_ICON_HEIGHT	equ 9
TREE_OUTLINE_ICON_HORIZ_SPACING	equ 4
TREE_OUTLINE_ICON_INDENT	equ 10

;
; sizes of the various parts of the Base Window
;
FOLDER_PANE_HORIZ_DOC		equ 0		; Doc size will be calculated
FOLDER_PANE_VERT_DOC		equ 0		; when folder is drawn.
FOLDER_PANE_HORIZ_OPEN		equ 60
FOLDER_PANE_VERT_OPEN		equ 60
FOLDER_PANE_VERT_MIN		equ 30

TREE_PANE_HORIZ_DOC		equ 10000
TREE_PANE_VERT_DOC		equ 10000
TREE_PANE_HORIZ_OPEN		equ 120
TREE_PANE_VERT_OPEN		equ 150

ASSOC_PANE_HORIZ_OPEN		equ 300
ASSOC_PANE_VERT_OPEN		equ 100

;
; default tree display mode
;
DEFAULT_TREE_DISPLAY_MODE	equ mask TIDM_OUTLINE	; speedy outline mode

;
; more start-up nonsense
;
INIT_NUM_COLLAPSED_BRANCH_BUFFER_ENTRIES	equ 10

;
; general non-existance, end-of-list marker
;
NIL				equ 0ffffh

;
; TokenLookupMoniker search flags
;
SMALL_ICON_SEARCH_FLAGS 	equ mask VMSF_GSTRING or \
				(VMS_TOOL shl offset VMSF_STYLE)

LARGE_ICON_SEARCH_FLAGS		equ mask VMSF_GSTRING or \
				(VMS_ICON shl offset VMSF_STYLE)

;
; file search attributes
;
ALL_FILES_ATTRIBUTES		equ mask FA_SUBDIR or mask FA_SYSTEM or \
						mask FA_HIDDEN
JUST_FILES_ATTRIBUTES		equ mask FA_SYSTEM or mask FA_HIDDEN

;
; length of buffer needed to hold command tail for DOS programs
;
DOS_PARAMETERS_BUFFER_LENGTH	equ 128+1

;
; font to use in all displays
;
if DBCS_PCGEOS
DESKTOP_FONT_ID			equ FID_PIZZA_KANJI
DESKTOP_FONT_SIZE		equ 16
else
DESKTOP_FONT_ID			equ FID_UNIVERSITY
DESKTOP_FONT_SIZE		equ 9
endif

;
; maximum number of folder windows that can be opened at once.
; must be at least 2 because during switching between folders, both
; are open at the same time.
;
if _BMGR
MAX_NUM_FOLDER_WINDOWS		equ 4
else
MAX_NUM_FOLDER_WINDOWS		equ 32		; just like PM File System!!
endif

;
; number of Folder Windows and Tree Window to cache
; Note: this really shouldn't be based WINDOW_MENU. Having more than one
; cached folder can still be useful on a system with quick directory
; buttons like world and document.
; 
;

if _WINDOW_MENU
NUM_LRU_ENTRIES			equ 3
else
NUM_LRU_ENTRIES			equ 1
endif


;
; Relevant information about a folder's primary for message passing
; via the stack.
;
FolderWindowInfo	struct
	FWI_position		SpecWinSizePair
	FWI_size		SpecWinSizePair		; SWSP_x = width
							; SWSP_y = height
FolderWindowInfo	ends


;
; flags to GetDiskInfo
;
GetDiskInfoFlags	record
	GDIF_REPORT_ERROR:1,
	GDIF_ASK_FOR_VOLUME_LABEL:1,
	GDIF_UNUSED:14
GetDiskInfoFlags	end

;
; flags returned by GetTreeFolderClicked and GetFolderIconClicked to
; indicate whether name or icon was clicked on
;
CLICKED_ON_ICON			equ 0
CLICKED_ON_NAME			equ 1

;
; maximum length of file cabinet button text
;
TITLE_MAX_LEN			equ 32

;
; folder window tracking stuff
;
FolderTrackingEntryState	record
	FTES_RESCAN:1,			; need to rescan this window
	FTES_CLOSE:1,			; need to close this window
	FTES_REDRAW:1,			; need to redraw this window
	FTES_SUSPEND:1,			; suspend window immediately
	FTES_UNSUSPEND:1,		; unsuspend window immediately
	:11
FolderTrackingEntryState	end

FolderTrackingEntry	struct
	FTE_folder	optr
	FTE_state	FolderTrackingEntryState
FolderTrackingEntry	ends

FolderWindowUpdateFlags	record
	FWUF_CLOSE_SOURCE:1		; close source (ds:dx) directory
	FWUF_CLOSE_DEST:1		; close dest. (es:di) directory
	FWUF_GREY_SOURCE_FILE:1		; grey out source (ds:dx) file
	FWUF_REDRAW_SOURCE:1		; redraw source (to clean-up grey)
	FWUF_SUSPEND:1			; suspend file-change response in
					;  source directory (FQTH) and dest
					;  directory (current dir)
	FWUF_UNSUSPEND:1		; unsuspend file-change response in
					;  source directory (FQTH) and dest
					;  directory (current dir)
	FWUF_CUR_DIR_HOLDS_SOURCE:1	; thread's current directory holds
					;  the source file (ds:dx)
	FWUF_DS_IS_FQT_BLOCK:1		; ds:dx is in a block where ds:0 is
					;  a FileQuickTransferHeader holding
					;  the directory in which the source
					;  file lives.
	:1
	FWUF_CUR_DIR_HOLDS_DEST:1	; thread's current directory holds
					;  the destination file (es:di)
	:6
FolderWindowUpdateFlags	end

SUSPEND_UPDATE_STRATEGY		equ	mask FWUF_SUSPEND or \
					mask FWUF_DS_IS_FQT_BLOCK or \
					mask FWUF_CUR_DIR_HOLDS_DEST

UNSUSPEND_UPDATE_STRATEGY	equ	mask FWUF_UNSUSPEND or \
					mask FWUF_DS_IS_FQT_BLOCK or \
					mask FWUF_CUR_DIR_HOLDS_DEST

CREATE_DIR_UPDATE_STRATEGY	equ	mask FWUF_CUR_DIR_HOLDS_SOURCE

CHANGE_ATTR_UPDATE_STRATEGY	equ	mask FWUF_GREY_SOURCE_FILE or	\
					mask FWUF_DS_IS_FQT_BLOCK

COPY_UPDATE_STRATEGY		equ	mask FWUF_REDRAW_SOURCE or	\
					mask FWUF_GREY_SOURCE_FILE or	\
					mask FWUF_DS_IS_FQT_BLOCK or	\
					mask FWUF_CUR_DIR_HOLDS_DEST

MOVE_UPDATE_STRATEGY		equ	mask FWUF_CLOSE_SOURCE or	\
					mask FWUF_GREY_SOURCE_FILE or	\
					mask FWUF_DS_IS_FQT_BLOCK or	\
					mask FWUF_CUR_DIR_HOLDS_DEST

RENAME_UPDATE_STRATEGY		equ	mask FWUF_CLOSE_SOURCE or	\
					mask FWUF_GREY_SOURCE_FILE or	\
					mask FWUF_DS_IS_FQT_BLOCK

DELETE_UPDATE_STRATEGY		equ	mask FWUF_CLOSE_SOURCE or	\
					mask FWUF_GREY_SOURCE_FILE or	\
					mask FWUF_DS_IS_FQT_BLOCK
;
; one pathname in the collapsed branch buffer
;
CollapsedBranchEntry	struct
	CBE_size		word
	CBE_diskHandle		word
	CBE_pathname		PathName
CollapsedBranchEntry	ends

if 0	; don't track floppy status - 4/6/90
;
; floppy tracking stuff
;
FloppyTrackingEntry	struct
	FTE_driveNumber	byte
	FTE_diskInfo	DiskInfoStruct
FloppyTrackingEntry	ends
endif

;
; structure and constants for finding COMMAND.COM (needed to run batch files)
;
PATH_AND_FILE_MAX_LEN	equ	PATH_BUFFER_SIZE + FILE_LONGNAME_BUFFER_SIZE

;
; flags for launcher
;

LauncherDataFlags	record
	LDF_PROMPT_USER:1,		; Prompt user before restarting Geos?
	LDF_NO_ARGS:1,			; launcher has no command Line args
	LDF_PROMPT_ARGS:1		; prompt user for args runtime?
	LDF_ARGS_SET:1,			; launcher has args in LDC_Arguments
	LDF_PROMPT_FILE:1		; simple append-file-to-end-of-args
	LDF_CONFIRM:1,			; confirm arguments after expasion
	LDF_PROMPT_DOC:1		; prompt to run app or read doc?
	LDF_UNUSED:1
LauncherDataFlags	end

	LauncherDataChunks etype word, 0, 2
LDC_LAUNCHER_FLAGS	enum LauncherDataChunks
LDC_LAUNCH_FILE		enum LauncherDataChunks
LDC_ARGUMENTS		enum LauncherDataChunks
LDC_WORKING_DIRECTORY	enum LauncherDataChunks
LDC_CHECKFILE1		enum LauncherDataChunks
LDC_CHECKFILE2		enum LauncherDataChunks
LDC_DISK_HANDLE		enum LauncherDataChunks
LDC_DOCFILE		enum LauncherDataChunks
LDC_DOCREADERTOKEN	enum LauncherDataChunks
LDC_APPORDOCCUSTOMTEXT	enum LauncherDataChunks

ICONS_SHOWN_IN_LIST		equ 7
STANDARD_ICON_WIDTH		equ 48
STANDARD_ICON_HEIGHT		equ 30
CGA_ICON_HEIGHT			equ 14

;
; sane maximum length for the AppOrDoc custom text chunk
;
APPORDOC_CUSTOM_TEXT_LENGTH	equ 4096

;
; sheesh, we allocate this many bytes space on the stack
;
EVEN_DATE_TIME_BUFFER_SIZE equ ((DATE_TIME_BUFFER_SIZE+1)/2)*2

ifdef GEOLAUNCHER
;
; picture numbers for TitleGenTrigger buttons
; (centralizes changes if we add something to the normal-width ones)
;
PN_TO_DOS	equ	0
PN_OPEN		equ	1
PN_GET_INFO	equ	2
PN_MOVE		equ	3
PN_COPY		equ	4
PN_DUPLICATE	equ	5
PN_RENAME	equ	6
PN_FORMAT	equ	7
;	below here are wide	
;	(if things added above, change FIRST_WIDE_ICON and icon tables
;	 in deskdisplayTitledTrigger.asm)
PN_DELETE	equ	8
PN_OPEN_DIR	equ	9
PN_CLOSE_DIR	equ	10
PN_CREATE_DIR	equ	11
PN_DOCUMENTS	equ	12
PN_DOSROOM	equ	12	; FIX this is TEMPORARILY same as documents
PN_HELP		equ	13

endif

;
; Identifiers for Options menu items
;
OptionsMenuItems	record
	OMI_CONFIRM_EMPTY_WB:1
	OMI_WB_NEVER_SAVES:1
	OMI_CONFIRM_READ_ONLY:1
	OMI_CONFIRM_REPLACE:1
	OMI_CONFIRM_EXECUTABLE:1
	OMI_TILE_VERTICALLY:1
	OMI_MINIMIZE_ON_RUN:1
	OMI_ASK_BEFORE_RETURNING:1
	OMI_SHOW_USERDATA:1
	OMI_SHOW_ADV_DISK_OPTIONS:1
	OMI_CONFIRM_EXIT_GMGR:1
	OMI_SINGLE_WARNING:1
	OMI_MULTIPLE_WARNINGS:1
	OMI_HIDE_B_DRIVE:1
	:2
OptionsMenuItems	end

if _NEWDESK
OptionsConfirmDeleteLevel etype byte, 0
OCDL_NONE 	enum OptionsConfirmDeleteLevel
OCDL_SINGLE 	enum OptionsConfirmDeleteLevel
OCDL_FULL 	enum OptionsConfirmDeleteLevel
endif		; if _NEWDESK

;
; Identifiers for full-sized/overlapping list in icon area
;
QuickViewToggleItems	record
	QVTI_FULL_SIZED:1,
	QVTI_OVERLAPPING:1
QuickViewToggleItems	end

;
; ConnectionType
;
if _CONNECT_TO_REMOTE
ConnectionType		etype	word, 0, 2
    CT_FILE_LINKING	enum	ConnectionType
    CT_FILE_TRANSFER	enum	ConnectionType
endif

;
; The max. number  characters of the long file name
;
LONG_FILENAME_LENGTH		equ	32

;
; The max. number characters of the dos filename
;
FILENAME_WITH_EXT		equ	11

;
; The number of characters of attributes
;
WIDEST_ATTR_LENGTH		equ	6

if _DOCMGR
; we use some code from NewDesk that needs these
STANDARD_PATH_OF_DESKTOP_VOLUME		equ	SP_TOP
ND_DESKTOP_RELATIVE_PATH		equ	"DESKTOP"
ND_DESKTOP_PATH_LENGTH			equ	7
endif




;==============================================================================
;			Classes and Methods
;==============================================================================

;------------------------------------------------------------------------------
; desktop process
;------------------------------------------------------------------------------

DesktopClass	class	FileManagerClass

;
; sent to instance of FolderClass via DesktopSendToCurrentOrTree
;
MSG_OPEN_SELECT_LIST				message	MetaApplicationMessages
MSG_FOLDER_CLOSE				message	MetaApplicationMessages
MSG_FM_START_RENAME				message	MetaApplicationMessages
MSG_FM_START_DELETE				message	MetaApplicationMessages
MSG_FM_START_THROW_AWAY				message	MetaApplicationMessages
MSG_FM_START_RECOVER				message	MetaApplicationMessages
MSG_FM_START_CREATE_DIR				message	MetaApplicationMessages
MSG_FM_START_MOVE				message	MetaApplicationMessages
MSG_FM_START_COPY				message	MetaApplicationMessages
MSG_FM_START_DUPLICATE				message	MetaApplicationMessages
MSG_FM_START_CHANGE_ATTR			message	MetaApplicationMessages
MSG_FM_START_CHANGE_TOKEN			message	MetaApplicationMessages
MSG_FM_START_PRINT				message	MetaApplicationMessages
MSG_CREATE_DOS_LAUNCHER				message	MetaApplicationMessages
MSG_EDIT_DOS_LAUNCHER		 		message	MetaApplicationMessages
;
; we leave this in even though the this should really only exist if the
; CREATE_LINKS compiler flag is defined.  Having a bogus message number
; allocated won't hurt, as the handler for it is conditioned out with the
; same flag, and this way we don't have to copy the entire
; DesktopSendToCurrentOrTree message list won't have to be copied twice,
; once for the CREATE_LINKS case and once without.  dlitwin 4/20/93
MSG_FM_START_CREATE_LINK			message	MetaApplicationMessages

if _NEWDESK
MSG_FOLDER_CLOSE_AND_SAVE			message MetaApplicationMessages

if _NEWDESKBA
MSG_BA_DISTRIBUTE_FILES				message MetaApplicationMessages


MSG_NDBA_CLASSES_CREATE_CLASS			message MetaApplicationMessages

MSG_BA_APP_RUN_ICLAS_BATCH_FILE_IF_NEEDED	message
; Checks to see if it needs to run a batch file to add courseware to
; a class folder
; Pass:		nothing
; Return:	nothing
; Destroyed	nothing



endif		; if _NEWDESKBA

endif		; if _NEWDESK

;
; handled by FolderClass and TreeClass
;
MSG_UPDATE_FREE_SPACE				message	MetaApplicationMessages
; Update this folder's display of the free space available on the disk
; its on
;
; Pass:	cx:dx - free space
; 	bp - disk handle
;
; Return: nothing
; Destroy: nothing

MSG_UPDATE_DISK_NAME				message	MetaApplicationMessages


;
; handled by DesktopClass
;
;;new menu delete behavior (usability) - 5/8/90
;;MSG_FM_END_DELETE				message
MSG_FM_END_RENAME				message
MSG_FM_END_CREATE_DIR	message
;;new menu move/copy behavior (usability) - 5/8/90
;;MSG_FM_END_MOVE				message
;;MSG_FM_END_COPY				message
MSG_FM_END_DUPLICATE				message

MSG_RENAME_NEXT					message
MSG_DUPLICATE_NEXT				message

MSG_FM_END_CHANGE_ATTR				message
MSG_CHANGE_ATTR_NEXT				message

MSG_FM_END_CHANGE_TOKEN				message
MSG_CHANGE_TOKEN_NEXT				message

MSG_FILE_OP_SKIP_FILE				message

MSG_GET_INFO_NEXT				message
MSG_GET_INFO_OK					message
MSG_HACK_GET_INFO_OK				message
if GPC_GET_INFO_DB
MSG_GET_INFO_ENABLE_OK				message
endif
if GPC_FOLDER_WINDOW_MENUS
MSG_DELAYED_SAVE_OPTIONS			message
endif

;
; sent to instance of FolderClass via DesktopSendToCurrentWindow
;
MSG_FM_GET_INFO					message	MetaApplicationMessages
MSG_SELECT_ALL					message	MetaApplicationMessages
MSG_DESELECT_ALL				message	MetaApplicationMessages

;
; sent to instance of FolderClass via DesktopSendToCurrentOrDefault
;
;MSG_FM_END_DISPLAY_OPTIONS			message	MetaApplicationMessages
MSG_SET_VIEW_MODE				message MetaApplicationMessages
MSG_SET_SORT_MODE				message MetaApplicationMessages
MSG_SET_VIEW_OPTIONS				message MetaApplicationMessages
if _NEWDESK ; GPC_FOLDER_WINDOW_MENUS
MSG_SET_BROWSE_MODE				message MetaApplicationMessages
endif

MSG_GET_DISK_INFO				message	MetaApplicationMessages
;
; handled by DesktopClass
;
MSG_DISK_COPY_SOURCE_DRIVE			message
MSG_DISK_FORMAT_SOURCE_DRIVE			message
MSG_DISK_COPY_COPY				message
MSG_DISK_FORMAT_FORMAT				message
MSG_DISK_RENAME_DRIVE				message
MSG_DISK_RENAME					message
MSG_META_START_DISK_COPY_BOX			message
MSG_META_START_DISK_FORMAT_BOX			message
MSG_META_START_DISK_RENAME_BOX			message

;
; handled by DesktopClass
;
MSG_DESKTOOL_QT_INTERNAL			message
MSG_DIRTOOL_QT_INTERNAL				message
MSG_DRIVETOOL_QT_INTERNAL			message
MSG_DRIVETOOL_INTERNAL				message
MSG_EMPTY_WASTEBASKET				message
;	Empty the wastebasket and prompt user if applicable.
;
; Pass:		global variable 'loggingOut':
;			= non-zero to give waring if Option is set
;			  0 to bypass warning (regardless of the UI option).
;				This should only be used when emptying on
;				logout.
; Return:	none
; Destroyed:	???
;

;
; handled by DesktopClass, sent on to FolderClass and TreeClass
;	(or SendToTreeAndBroadcast)
;
MSG_WINDOWS_REFRESH_CURRENT			message	MetaApplicationMessages
MSG_CLOSE_IF_MATCH				message	MetaApplicationMessages
MSG_WINDOWS_CLOSE_TARGET			message	MetaApplicationMessages


;
; handled by DesktopClass
;
MSG_WINDOWS_REFRESH_ALL				message
MSG_WINDOWS_CLOSE_ALL				message

;
; handled by DesktopClass
;
MSG_QUICK_APPL					message
MSG_QUICK_DOC					message
if _DOCMGR
MSG_QUICK_ARCHIVE				message
endif
MSG_QUICK_DOS_ROOM				message
MSG_QUICK_WASTEBASKET				message
MSG_QUICK_BACKUP				message
MSG_QUICK_CLOSE					message
MSG_OVERLAPPING_FULL_SIZED_TOGGLE		message

if	_TREE_MENU
MSG_QUICK_TREE					message
MSG_NEW_TREE_DRIVE				message
endif		; if _TREE_MENU

ifdef _FCAB	; GeoLauncher has open/close directory buttons
MSG_OPEN_DIRECTORY				message
MSG_CLOSE_DIRECTORY				message
MSG_EXIT_TO_DOS					message	; also has Exit To
							; DOS button
endif		; ifdef _FCAB

MSG_DESKTOP_RESET_OPTIONS			message
MSG_DESKTOP_CANCEL_OPTIONS			message

;
; handled by DesktopClass
;
MSG_DESKTOP_LOAD_APPLICATION			message
;
; Pass:		cx - LoadAppData block handle
;		dx - AppLaunchBlock handle
;			
; Return:	nothing 
;
; Destroyed:	nothing 
;

LoadAppData	struct
    LAD_file	FileLongName		; name of file/app being loaded
    LAD_token	GeodeToken		; token of app
LoadAppData	ends


MSG_REMOTE_ERROR_BOX				message

;
;	DOS Launcher messages
;
MSG_DOS_LAUNCHER_CREATE_FILE_CHECK	 	message
MSG_DOS_LAUNCHER_EDIT_FILE_CHECK	 	message

MSG_DOS_LAUNCHER_CREATE_FILE_SELECTED	 	message
MSG_DOS_LAUNCHER_EDIT_FILE_SELECTED	 	message

MSG_DOS_LAUNCHER_ARGS_LIST_CHANGE		message
MSG_DOS_LAUNCHER_SET_LIST_OPTIONS		message
MSG_DOS_LAUNCHER_SET_OPTIONS			message
MSG_DOS_LAUNCHER_POP_UP_OPTIONS			message

MSG_MAKE_DOS_LAUNCHER				message
MSG_DOS_LAUNCHER_CANCEL_EDIT_BOX		message

MSG_LAUNCHER_REQUEST_ICON_MONIKER		message

MSG_OPEN_KEYBOARD_DRIVE				message

MSG_SET_DRIVES_LOCATION				message

MSG_MOVE_FILE_CHECK				message
MSG_COPY_FILE_CHECK				message
MSG_RECOVER_FILE_CHECK				message
MSG_RECOVER_SRC_FILE_CHECK			message

MSG_DOS_LAUNCHER_FILE_SELECTED			message

MSG_DESKTOP_FOLDER_CLOSING			message
;
; Handle notification that a folder is about to close
;
; Pass:		^lcx:dx - OD of folder object that's about to close.
;			
; Return:	nothing 
;
; Destroyed:	nothing 

if _NEWDESK
MSG_DESKTOP_CONFIRM_LOGOUT			message
;
; Confirms that the user wanted to log out
;
; Pass:		nothing
; Return:	nothing
;
endif

if _NEWDESKBA
MSG_DESKTOP_CHANGE_PASSWORD			message
;
; This message will run the Change Password application.
;
; PASS:		nothing
;
; RETURN:	nothing
;
endif		; if _NEWDESKBA


if INSTALLABLE_TOOLS

MSG_META_APP_GET_SELECTION	message	MetaApplicationMessages
; Return the currently-selected files or directories, if any.
;
; Context:	Called by process to target Folder or Tree object
;		when it is handling MSG_FM_GET_SELECTED_FILES
; Source:	process
; Destination:  Folder or Tree object
; Interception: not intercepted
;
; Pass:
;		nothing
; Return:
;		ax - handle of block with FileQuickTransferHeader and
;		     FileOperationInfoEntry structures, or 0 if couldn't
;		     allocate the block.
;		cx, dx, bp - destroyed
;

MSG_DESKTOP_CALL_TOOL_LIBRARY			message
; Call a particular routine in a tool library on the process thread of the
; file manager.
;
; Context:	Issued when the user clicks on a tool
; Source:	ToolManager object (run by the UI thread) so the tool library
;		can call the file manager process to do things.
; Destination:  process thread
; Interception: not intercepted
;
; Pass:		cx	= handle of library to call
; 		si	= entry point to call
; 		dx,bp	= as appropriate to the call
;
; 		cx will be replaced by the handle of the process before the
;		call is issued
;			
; Return:
;		nothing
;		ax, cx, dx, bp - destroyed
;
endif		; if INSTALLABLE_TOOLS

if _CONNECT_TO_REMOTE

MSG_DESKTOP_OPEN_CONNECTION					message
;
; Open a connection with another machine. If a connection already exists
; this message is ignored.
;
; Context:	Issued when the user clicks on a menu item
; Source:	ConnectMenu (run by the UI thread) so the process
;		can invoke RFSD or another driver to do things
; Destination:  Process thread
; Interception: not intercepted
;
; Pass:		CX	= ConnectionType
;			
; Return:	Nothing
;		ax, cx, dx, bp - destroyed
;

MSG_DESKTOP_CLOSE_CONNECTION					message
;
; Close any open connection with another machine
;
; Context:	Issued when the user clicks on a UI gadget
; Source:	ConnectionIcon (run by the UI thread)
; Destination:  Process thread
; Interception: not intercepted
;
; Pass:		Nothing
;			
; Return:	Nothing
;		ax, cx, dx, bp - destroyed
;

endif

MSG_DESKTOP_UPDATE_FREE_SPACE				message
; Determine the disk space of the passed disk handle, and broadcast
; this information to all open folders & the tree
;
; Pass:		cx - disk handle
; Return:	nothing
; Destroyed:	ax,cx,dx,bp

if _CONNECT_TO_REMOTE
MSG_DESKTOP_CANCEL_FILE_LINKING				message
;
; Cancel pending file linking.
;
; Pass:		nothing
; Return:	nothing
;
endif

MSG_DESKTOP_PRINT_FILE	message
;
; Message added so it can be force-queued, to cause printing to happen
; when fewer blocks are locked.
;
; Pass:		cx - filename block
;		dx - AppLaunchBlock
;
;  Return:	nothing
; Destroy:	nothing
;
;

if _PEN_BASED
MSG_DESKTOP_ABORT_QUICK_TRANSFER	message
;
; Abort quick-transfer on END_OTHER from UI thread.
;
; Pass:		nothing
; Return:	nothing
;
endif

;
; handled by DesktopClass, sent on to FolderClass and TreeClass
;	(or SendToTreeAndBroadcast)
;
MSG_CLOSE_IF_DRIVE			message	MetaApplicationMessages
; Close Tree/Folder window if drive matches.  Used when drive goes away.
; Pass:		cl - drive number
; Return:	nothing
; Destroyed:	nothing

MSG_DISK_FORMAT_FORMAT_LOW	message
;
;	Format a disk using the past parameters. Handler will still
;	ask for a volume name.
;
; Context:	Sent after querying user for drive and MediaType. Also
;		sent after exiting to dos to partition ATA PCMCIA cards.
; Source:	Unrestricted
; Destination	process
; Interception	Unlikely
;
; Pass
;	ch - MediaType
;	cl - drive number
;	dh - max number of media
;	bp - DiskFormatFlags
;
; Return
;	nothing
;
; Destroyed
;	ax,cx,dx,bp

MSG_DESKTOP_LAUNCH_PREFERENCES	message
;
;	Launch the Preferences application. Used by Preferences launching
;	button in icon bar.
;
; Context:	Unrestricted
; Source:	Unrestricted
; Destination:  process
; Interception: Unlikely
;
; Pass
;	nothing
;
; Return
;	nothing
;
; Destroyed
;	ax,cx,dx,bp
;

MSG_DESKTOP_LAUNCH_FROM_TOKEN	message
;
; Launch app from passed token.
;
; Pass:	cxdx - token chars
;	bp - manuf ID
;

;; Another DOS Launcher msg added later.
;
MSG_DOS_LAUNCHER_TOKEN_OPTIONS_CHANGE	message
;
; Options changed;
;
; Pass:	cx - current selection
;	bp - num selections
;	dl = GemItemGroupStateFlags
; Return: nothing
; Destroyed ax, cx, dx, bp (allowed)
;

if GPC_UI_LEVEL_DIALOG
MSG_DESKTOP_CHANGE_UI_LEVEL		message
;
; The user has chosen a new default launch level.
;
; Pass: nothing
; Return: nothing
; Destroyed: everything allowed
;
endif ; GPC_UI_LEVEL_DIALOG

DesktopClass	endc

DesktopVars	struct
; This structure was created in an attempt to shrink the huge size of
; dgroup.  These variables are to be thought of as instance data for
; the process


	DV_folderTrackingTable	FolderTrackingEntry MAX_NUM_FOLDER_WINDOWS dup (<>)

	;
	; used for building out complete pathname of folder window to
	; be updated
	;
	DV_folderUpdateCurDir	PathName

DesktopVars	ends


;-----------------------------------------------------------------------------
;	DesktopViewClass		
;-----------------------------------------------------------------------------
 
DesktopViewClass	class	GenViewClass

MSG_DESKTOP_VIEW_SET_INITIAL_BG_COLOR	message
;
; PASS:		cl = background color
; RETURN:	nothing
;
; Set what the background color of the view should be if the displayType
; is not monochrome.
;

	DVI_backGrColor		byte		; background color of view

DesktopViewClass	endc

;-----------------------------------------------------------------------------
;	ShellObjectClass		
;-----------------------------------------------------------------------------
ShellObjectClass	class	MetaClass
;
; This is the superclass of FolderClass.

MSG_SHELL_OBJECT_MOVE 			message
;
; Move a set of files.  
;
; NOTE: There may be multiple files in the block, but they may be of
; different types, and might need to be handled by different classes.
; The recipient of this message should start by processing the FIRST
; entry in the block, and then repeatedly call
; UtilGetNextInfoEntryOfSameType until all entries of that type have
; been processed.
;
; Pass:		cx:0  - FileQuickTransferHeader.
;			
; Return:	nothing 
;
; Destroyed:	ax,cx,dx,bp
;

MSG_SHELL_OBJECT_MOVE_ENTRY		message
; Move a single FileOperationInfoEntry
;
; Context:	Part of transfer mechanism
; Source:	ShellObjectClass 
; Destination:  Dummy object of type determined by the FOIE_info field
; Interception: default behavior is to perform the move if the
; 		SOF_MOVABLE flag is set.  Subclass can override this
;		behavior if desired
;
;
; Pass:		cx:dx - FileOperationInfoEntry
; Return:	carry SET to abort this and all subsequent operations
; Destroyed:	ax,cx,dx,bp


MSG_SHELL_OBJECT_COPY 			message
; Copy a set of files.  See the note in MSG_SHELL_OBJECT_MOVE
;
; Pass:		cx:0  - FileQuickTransferHeader
;			
; Return:	nothing 
;
; Destroyed:	ax,cx,dx,bp
;

MSG_SHELL_OBJECT_COPY_ENTRY		message
; Copy a single FileOperationInfoEntry
;
; Context:	part of transfer mechanism
; Source:	
; Destination:  Dummy object of type determined by the FOIE_info field
; Interception: default behavior is to perform the move if the
; 		SOF_COPYABLE flag is set.  Subclass can override this
;		behavior if desired
;
;
; Pass:		cx:dx - FileOperationInfoEntry
; Return:	carry SET to abort this and all subsequent operations
; Destroyed:	ax,cx,dx,bp
;


MSG_SHELL_OBJECT_DELETE 		message
; Delete a set of files.  See the note in MSG_SHELL_OBJECT_MOVE
;
; Pass:		cx:0  - FileQuickTransferHeader
;			
; Return:	nothing 
;
; Destroyed:	ax,cx,dx,bp
;

MSG_SHELL_OBJECT_DELETE_ENTRY		message
; Delete a single FileOperationInfoEntry. 
;
; Context:	Part of transfer mechanism
; Source:	
; Destination:  Dummy object of type determined by the FOIE_info field
; Interception: ShellObjectClass will put up a dialog asking user to
; 		confirm before deleting -- subclasser can eliminate
; 		this behavior if desired.
;
; Pass:		cx:dx - FileOperationInfoEntry
;		cwd set to directory containing file
;			
; Return:	nothing 
;
; Destroyed:	ax,cx,dx,bp  Callee MUST preserve the cwd.
;


MSG_SHELL_OBJECT_THROW_AWAY 		message
; Throw away a set of files.  See the note in MSG_SHELL_OBJECT_MOVE
;
; Pass:		cx:0  - FileQuickTransferHeader
;			
; Return:	nothing 
;
; Destroyed:	ax,cx,dx,bp
;

MSG_SHELL_OBJECT_THROW_AWAY_ENTRY	message
; Throw away a single FileOperationInfoEntry
;
; Context:	part of transfer mechanism
; Source:	
; Destination:  Dummy object of type determined by the FOIE_info field
; Interception: 
;
;
; Pass:		cx:dx - FileOperationInfoEntry
; Return:	carry SET to abort this and all subsequent operations
; Destroyed:	ax,cx,dx,bp
;


MSG_SHELL_OBJECT_OPEN			message
; "Open" this shell object  XXX: NOT YET IMPLEMENTED
;
; Context:	Normally occurs when user double-clicks on an icon
; Source:	unrestricted.  Usually FolderClass
; Destination:  Any ShellObjectClass subclass
; Interception: no default behavior.  See FolderClass for "standard"
; 		behavior. 
;
; Pass:		dx:bp - path of object
;		cx - disk handle
;	
; Return:	nothing 
;
; Destroyed:	nothing 
;

MSG_SHELL_OBJECT_BEGIN_TRANSFER		message
; Not implemented.  Not even designed. 


MSG_SHELL_OBJECT_CHECK_TRANSFER_ENTRY	message
;
;	This message is sent to a dummy of the object type
;corresponding to the DESTINATION of a transfer operation.  The
;handler can decide whether to accept this object, or reject it, and
;put up an error box notifying the user.  Note that even if this
;destination object accepts the transfer, the object being transferred
;may reject the operation.  Kind of like a kidney transplant.
;
;This message works with the attributes
;ATTR_SHELL_OBJECT_ALLOW_TRANSFERS and ATTR_SHELL_OBJECT_RESTRICT_TRANSFERS
;
; Pass:	dx:0	- FileQuickTransferHeader
;	dx:bp	- FileOperationInfoEntry in in the FileQuickTransfer
;	current directory is the destination directory (dest. object)
;
; Return: carry
;		- set if this item has been handled specially, or rejected.
;			It will be taken out of the
;			FileQuickTransfer block so it will not
;			be copied, moved or whatever the
;			default operation was.
;
;		- clear if this item is normal and should be
;		   handled normally 
;

;-----------------------------------------------------------------------------
;	INSTANCE DATA		
;-----------------------------------------------------------------------------

ShellObjectAttrs	record
	SOA_MOVABLE:1
	; SET by default
	SOA_COPYABLE:1
	; SET by default

	SOA_DELETABLE:1
	; SET by default

	SOA_RECEIVES_TRANSFERS:1
	; If set, this object can receive transfers (SET by default)

	SOA_ALLOWS_TRANSFERS:1
	; this object allows transfers OUT of it (NOT IMPLEMENTED)

	SOA_FORCE_DELETE:1
	; This flag causes the THROW_AWAY_MESSAGE to always be
	; converted to a DELETE for this object.

	:2
ShellObjectAttrs	end

	SOI_attrs	ShellObjectAttrs

;-----------------------------------------------------------------------------
;	VARIABLE DATA		
;-----------------------------------------------------------------------------
 
ATTR_SHELL_OBJECT_RESTRICT_TRANSFERS	vardata	word
; NewDeskObjectType(s) of objects that can't be moved into this object.

ATTR_SHELL_OBJECT_ACCEPT_TRANSFERS	vardata	word
; NewDeskObjectType(s) of the only objects that CAN be moved into this
; object. 


ShellObjectClass	endc



;------------------------------------------------------------------------------
; desktop visible object class
;------------------------------------------------------------------------------

DeskVisClass	class	ShellObjectClass

MSG_DV_DRAW					message
MSG_REDRAW					message
; Invalidate the current window so that it gets redrawn
;

MSG_INIT					message
MSG_SCAN					message
MSG_RESCAN					message

	DVI_gState		hptr.GState
	DVI_window		hptr.Window
		noreloc	DVI_gState, DVI_window
DeskVisClass	endc


;------------------------------------------------------------------------------
; directory tree
;------------------------------------------------------------------------------

TreeClass	class	MetaClass

MSG_TREE_DRAW					message
MSG_TREE_REDRAW					message
MSG_TREE_SCAN					message
MSG_TREE_STORE_NEW_DRIVE			message
MSG_TREE_RESCAN					message
;MSG_OUTLINE_TREE				message
MSG_COLLAPSE_BRANCH				message
MSG_EXPAND_ONE_LEVEL				message
MSG_EXPAND_BRANCH				message
MSG_EXPAND_ALL					message
MSG_MARK_BRANCH_DIRTY				message
MSG_UPDATE_TREE					message
MSG_UPDATE_TREE_DRIVE				message
MSG_TREE_CLOSE					message

;
; display modes for Tree Window
;
TreeDisplayMode	record
	TIDM_OUTLINE:1			; tree is in outline mode
	TIDM_ROOT_LEVEL:1		; set if TreeScan should only read
					;	root level (as desired when
					;	starting up)
	TIDM_SCANNED:1			; set if tree info has been read from
					;	disk
	TIDM_BOGUS:1			; set if we should close Tree Window
					;	ASAP b/c something dorked
					;	when starting it up
	TIDM_DISALLOW_DOUBLE:1		; used to ignore all double-clicks
					;	except those immediately
					;	preceded by a single-click
	TIDM_FEEDBACK_ON:1		; set if doing quick-transfer feedback
	TIDM_ON_FILE_CHANGE_LIST:1	; convenient place to record if on
					;  the system-wide file-change list
	:9
TreeDisplayMode	end

VIEW_MAX_SUBVIEWS	equ	1	;added cbh 3/15/91, hopefully one is OK
			
TEMP_TREE_SAVED_DISK_HANDLE	vardata	byte
			
	TI_subviews		hptr.Window	VIEW_MAX_SUBVIEWS dup (?)
	TI_gStates		hptr.GState	VIEW_MAX_SUBVIEWS dup (?)
	TI_drive		word
	TI_diskInfo		DiskInfoStruct
	TI_disk			word		; disk handle
	TI_treeBuffer		hptr.TreeEntry
	TI_treeBufferSize	word
	TI_treeBufferNext	word
	TI_diskBuffer		hptr.TreeAttrs
	TI_selectedFolder	word
	TI_displayMode		TreeDisplayMode

		noreloc	TI_subviews, TI_gStates, TI_treeBuffer, TI_diskBuffer
TreeClass	endc



;------------------------------------------------------------------------------
; folder window object
;------------------------------------------------------------------------------

FolderClass	class	DeskVisClass

MSG_INIT_DEFAULT				message
MSG_SEND_DISPLAY_OPTIONS			message

MSG_FOLDER_CHECK_PATH				message
; Compare the folder's ACTUAL path against the passed path
;
; Pass:		cx - disk handle of passed path
;		dx:bp - path name
;			
; Return:	carry clear if paths the same
;		carry set if different, ax = 0 if folder is a subdir
;			of passed path, nonzero otherwise
;
; Destroyed:	nothing 
;
;
;
;

MSG_FOLDER_GET_PATH				message
; Get the path for this folder
; Pass:		dx:bp - buffer for path (must be PATH_BUFFER_SIZE bytes)
;			
; Return:	dx:bp - buffer filled in
;		cx - disk handle (or StandardPath)
;
; Destroyed:	ax

MSG_FOLDER_SET_PATH				message
; Sent to the folder object on initialization.  Default behavior is to
; store the path in vardata, and set the primary's moniker.
;
; Pass:		cx:dx - path (fptr)
;		bp	- disk handle
;
; Return:	nothing 
; Destroyed:	ax,cx,dx,bp
;

MSG_FOLDER_SAVE_ICON_POSITIONS			message
;
; Saves the current icon positions to the Directory Information file.
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	nothing


MSG_SET_DISPLAY_OPTIONS				message
; Set the display options.  
;
; Pass:		cl - file types to display
;		ch - file attributes to display
;		dl - FI_DisplaySort 	flags
;		dh - FI_DisplayMode	flags
;
; Return: 	nothing 
; Destroyed:	nothing 
;
;

MSG_GET_DISPLAY_OPTIONS				message
MSG_FOLDER_BRING_TO_FRONT			message
MSG_CLOSE_FOLDER_WIN				message
MSG_CLOSE_IF_GONE				message
MSG_HIDE_SELECTION				message
MSG_UNHIDE_SELECTION				message
MSG_GREY_FILE					message
MSG_FOLDER_UP_DIR				message
MSG_UPDATE_UP_DIR_BUTTON			message
MSG_UP_DIR_QT					message
MSG_CLOSE_FOR_BAD_CREATE			message
MSG_OPEN_FILE_IN_SELECT_LIST			message
MSG_FOLDER_GET_STATE				message
MSG_FOLDER_STOP_FEEDBACK			message

MSG_FOLDER_OPEN_ICON				message
; Open the object whose name matches the name passed in. 
;
; Pass:		cx:dx - fptr to name of object to open
; Return:	if carry clear
;			ax	= GeosFileType of object opened
;			^lcx:dx	= FolderClass object if ax == GFT_DIRECTORY
;		if carry set
;			error
;


MSG_FOLDER_SET_PRIMARY_MONIKER			message
;	Sets the moniker of the Folder's Primary to the path of 
; that folder object (truncated to the last element in NewDesk).
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	none
;

MSG_FOLDER_SET_CUR_PATH		message
; Set the CWD from the folder's instance data
;
; Pass:		nothing 
; Return:	if error
;			carry set
;			ax - FileError
;		else
;			carry clear
;			ax - destroyed
;
; Destroyed: 	nothing

MSG_FOLDER_CHECK_FILE_ID	message
; See if the passed file ID matches one of those belonging to this
; folder 
; Pass:		cx:dx - FileID
;		bp - disk handle, or 0 to match any
; Return:	if match:
;			CARRY SET
;			cx:dx - OD of folder
;		else:
;			carry clear
; Destroyed: 	nothing

MSG_FOLDER_GET_FILE_ID	message
; Fetch the file ID of this folder.  This is just the file ID of the
; folder as it appears as a FILE -- does not take into account the
; multiple file IDs normally associated with a folder.
;
; Pass:	nothing 
; Return:	cx:dx - ID
;		bp - disk handle
;


MSG_FOLDER_MARK_NOT_BUSY	message
; Mark the application not busy.  This is a message so that it can be
; sent via the queue

MSG_FOLDER_SET_DOC_BOUNDS	message
; Set the "document" bounds of the folder
; Pass:		cx, dx - document size
; Return:	nothing 
; Destroyed:	ax,cx,dx,bp

MSG_FOLDER_QUIT_QUICK_TRANSFER	message
; Quit quick-transfer.  Only used for ZMGR.
;
; Pass:		nothing
; Return:	nothing
;


MSG_FOLDER_GET_WINDOW_BLOCK	message
;	Returns the window block associated with a folder object.
;
; Pass:		nothing
; Return:	cx - handle of the window block
; Destroyed:	nothing
;

MSG_FOLDER_UNSUSPEND_WINDOW	message
; Un suspend the window
; Pass:		nothing 
; Return:	nothing 
; Destroyed:	nothing

if _NEWDESK ;GPC_FOLDER_WINDOW_MENUS
MSG_FOLDER_DISPLAY_NEW_PATH	message
; Do everything to switch to display new path in folder window.
; Pass:		dx = path block
;		bp = disk handle
; Return:	nothing
; Destroyed:	nothing
endif

ifdef SMARTFOLDERS
MSG_RESTORE_DISPLAY_OPTIONS				message
; Restore display options from dir info file.
;
; Pass:		cl - file types to display
;		ch - file attributes to display
;		dl - FI_DisplaySort 	flags
;		dh - FI_DisplayMode	flags
;
; Return: 	nothing 
; Destroyed:	nothing 
;
;
endif

if GPC_NAMES_AND_DETAILS_TITLES
MSG_FOLDER_RESET_NAMES_AND_DETAILS			message
;
; Reset size of names and details column headers.
;
endif


;-----------------------------------------------------------------------------
;	DATA STRUCTURES USED IN INSTANCE DATA		
;-----------------------------------------------------------------------------
 
;
; display options for a File Icons within a Folder window
;

FI_DisplayTypes	record
	FIDT_ALL:1,			; display all files
	FIDT_DIRS:1,			; display directories only
	FIDT_PROGS:1,			; display programs only (COM, EXE, BAT)
	FIDT_DATAS:1			; display datafiles only ^(COM,EXE,BAT)
FI_DisplayTypes	end

FI_DisplayAttrs	record
	FIDA_ALL:1,			; display files with any attribute
	FIDA_RO:1,			; display files with R/O attribute
	FIDA_ARCHIVE:1,			; display files with ARCHIVE attributes
	FIDA_HIDDEN:1			; display files with HIDDEN attribute
	FIDA_SYSTEM:1,			; display files with SYSTEM attributes
	FIDA_COMPRESSED:1,		; convenient place for this
					;	set if display is compress,
					;	allowing more files to show up
	FIDA_INFO:1			; convenient place for this
					;	set if Folder Info string is
					;	shown in Folder Window
FI_DisplayAttrs	end

DEFAULT_DISPLAY_ATTRS equ mask FIDA_RO or mask FIDA_ARCHIVE or mask FIDA_INFO


FI_DisplaySort	record
	FIDS_CREATION:1,		; sort by creation date
	FIDS_NAME:1,			; sort by name
	FIDS_EXT:1,			; sort by extension
	FIDS_DATE:1,			; sort by date
	FIDS_SIZE:1			; sort by file size
	FIDS_DOS:1			; sort by DOS order
FI_DisplaySort	end

if _ZMGR and SEPARATE_NAMES_AND_DETAILS
FI_DisplayMode	record
	FIDM_SHORT:1,			; short text mode (filename only)
	FIDM_FULL:1,			; full file details (time, size, attrs)
	FIDM_LICON:1,			; large icon mode
	FIDM_SICON:1,			; small icon mode
	FIDM_FULL_DATES:1		; if true, names and dates
					; if false, names and sizes
FI_DisplayMode	end
else
FI_DisplayMode	record
	FIDM_SHORT:1,			; short text mode (filename only)
	FIDM_FULL:1,			; full file details (time, size, attrs)
	FIDM_LICON:1,			; large icon mode
	FIDM_SICON:1			; small icon mode
FI_DisplayMode	end
endif

if _NEWDESK ; GPC_FOLDER_WINDOW_MENUS
FI_BrowseMode	record
	FIBM_SINGLE:1,			; browse in single window
	FIBM_MULTIPLE:1			; browse in multiple windows
FI_BrowseMode	end
endif

FI_PositionFlags	record
	FIPF_POSITIONED:1
	; this Folder has one or more custom placed icons

	FIPF_DIRTY:1
	; this Folder needs to write out icon position information

	FIPF_RECALC:1			
	; recalculate positions  (after sort, or load dirinfo)

	FIPF_TRANSFER:1		
	; this folder is in the process of transfering files, so it
	; may need to be treated specially.  This bit is set in
	; Folder(Start/End)MoveCopy and cleared in
	; Folder(Save/Load)DirInfo

 	FIPF_PERCENTAGES:1		
	; the icon positions of this folder are stored as percentages,
	; and need to be converted.

ifdef SMARTFOLDERS
	FIPF_WIN_SAVED:1
	; the size and position of folder window is saved, don't delete
	; dir info file even if no icons are positioned.

	FIPF_RESTORE_OPTS:1
	; set when restoring display options -- do not force resorting,
	; which overrides manual icon placement
endif


FI_PositionFlags	end

;
; folder object state flags
;
FolderObjectStates	record
	FOS_TARGET:1,			; this Folder Window is target
	FOS_FOCUS:1,			; this Folder Window is focus
	FOS_UPDATE_PENDING:1,		; update pending in this Folder Window
	FOS_SCANNED:1,			; set if folder contents have been
					;	read from disk
	FOS_BOGUS:1,			; set if we should close Folder Window
					;	ASAP b/c something dorked
					;	when starting it up
	FOS_DISALLOW_DOUBLE:1,		; no double-clicks allowed
	FOS_FEEDBACK_ON:1,		; set if quick-transfer feedback
					;	cursor set
	FOS_IN_VIEW:1,			; set on MSG_VIS_{ENTER,LEAVE}
	FOS_SRC_LIST_CLEARED:1,		; set if providing source-feedback
	FOS_REBUILD_ON_UNSUSPEND:1	; set if should rebuild display list
					;  when unsuspended.
	FOS_RESORT_ON_UNSUSPEND:1	; set if should resort display list
					;  when unsuspended
 	FOS_REDRAW_ON_UNSUSPEND:1	; set if should redraw the folder
					;  when unsuspended
	FOS_RESCAN_ON_UNSUSPEND:1	; set if should rescan the folder
					;  when unsuspended
	FOS_MULTI_SELECT_MODE:1		; set if folder is in multi-select mode
					;  (moving cursor wont't cause
					;   selection to change)
	:2
FolderObjectStates	end

;-----------------------------------------------------------------------------
;	INSTANCE DATA		
;-----------------------------------------------------------------------------
 


	FOI_displayTypes	FI_DisplayTypes		<>
	FOI_displayAttrs	FI_DisplayAttrs		<>
	FOI_displaySort		FI_DisplaySort		<>
	FOI_displayMode		FI_DisplayMode		<>
	FOI_diskInfo		DiskInfoStruct		<>
	FOI_buffer		hptr.FolderBufferHeader
		noreloc	FOI_buffer

	FOI_bufferSize		word
	FOI_fileCount		word
	FOI_displayList		word
	FOI_selectList		word
	FOI_windowBlock		hptr
	FOI_displayType		DisplayType		<>
	FOI_folderState		FolderObjectStates	<>
	FOI_winBounds		Point
	FOI_docBounds		Point
	FOI_anchor		Point
	FOI_anchorIcon		word
	FOI_cursor		word
	FOI_objectClick		word
	FOI_positionFlags	FI_PositionFlags	<>
	; flags that insure the right thing is done  with positioned icons

 	FOI_suspendCount	byte		
	; number of unbalanced  MSG_META_SUSPENDs received.


	FOI_chunkHandle		lptr
	; We store the chunk handle as part of the instance data since
	; there are so many places in the code that lose the chunk
	; handle.  It's easier to store this here than to clean up the
	; code...

	FOI_remoteFlag		word
	; Why are we using an entire word to store a single bit of data?
	; dlitwin: because this corresponds to CIFI_extra2 of the Quick
	; Transfer mechanism, which is a word, but we use it only for the
	; remoteFlag as present (more quicktransfer flags in the future?)

	FOI_actualDisk		word
	; actual disk handle.  Different than the value stored in the
	; vardata, because that value may have been parsed down to a
	; standard path.  This is a TRUE disk handle.

	FOI_invalidate		word
	; this is the offset to a FolderRecord that the mouse was last over
	; if that FolderRecord was a link to something on a removable drive.
	; It is used because when the mouse moves over the FolderRecord's file,
	; the diskhandle of this link is cached in the FolderRecord for the 
	; duration that the mouse is over it, but once the mouse leaves we 
	; have no guarantee that the disk will not have changed, so this 
	; cached diskhandle must be invalidated.  The code that handles the
	; pointer over whitespace during a quickcopy knows of this and will
	; invalidate the FolderRecord pointed to by this any time it is set.
	; NIL (-1) indicates no file, or nothing to invalidate.

;-----------------------------------------------------------------------------
;	VARIABLE DATA		
;-----------------------------------------------------------------------------
 
; vardata holding the folder's path/disk handle

ATTR_FOLDER_PATH_DATA			vardata	GenFilePath
TEMP_FOLDER_SAVED_DISK_HANDLE		vardata byte

; Vardata holding the ACTUAL path

ATTR_FOLDER_ACTUAL_PATH			vardata	GenFilePath
TEMP_FOLDER_ACTUAL_SAVED_DISK_HANDLE	vardata byte

if _NEWDESK
ATTR_FOLDER_HELP_CONTEXT		vardata char
;
; Specifies the help context for this object.
; eg:
;	ATTR_FOLDER_HELP_CONTEXT {
;		char "fonts", 0
;	}
; Used for Dummy objects of NewDesk, so they know what help context to bring
; up when they receive a MSG_ND_FOLDER_HELP message.
;
endif		; if _NEWDESK


TEMP_FOLDER_PATH_IDS		vardata FilePathID

TEMP_FOLDER_ANCESTOR_IDS	vardata FilePathID
; The FileIDs of every directory in this folder's lineage.  Includes
; both logical and actual paths.

TEMP_FOLDER_DRIVE		vardata	byte
;
; Drive number - used when DRIVE_CHANGE indicates drive is removed, we close
; all Folder Windows for that drive.

FolderClass	endc


;==============================================================================
; other (sub)classes
;==============================================================================

;------------------------------------------------------------------------------
; subclass of GenApplication to handle detach-while-active stuff
;------------------------------------------------------------------------------

DeskApplicationClass	class	GenApplicationClass
	uses	VisContentClass
	; see NewDeskApplicationEnsureActiveFT

MSG_APP_ACTIVE_ATTENTION			message
MSG_APP_ACTIVE_CONTINUE_DETACH			message
MSG_APP_ACTIVE_ABORT_DETACH			message
MSG_APP_MARK_ACTIVE				message
MSG_APP_MARK_NOT_ACTIVE				message
MSG_APP_CHANGE_ICON_CHANGE_TOKEN		message		; HACK

if _NEWDESK
MSG_APP_LOGOUT					message
endif		; if _NEWDESK

MSG_APP_OPTIONS_CHANGED				message

;    Info stored in vardata before shutting down to format an ATA pcmcia
;    card.

DesktopFormattingATACard	struct
	DFAC_driveNumber	byte	
	DFAC_maxMedia		byte					
	DFAC_diskFormatFlags	DiskFormatFlags
DesktopFormattingATACard	ends

;	If exists then we exited to dos to format a Flash pcmcia card
;
ATTR_DESKTOP_FORMATTING_FLASH_CARD	vardata 

;	If exists then we exited to dos to format a ATA pcmcia card
;
ATTR_DESKTOP_FORMATTING_ATA_CARD	vardata DesktopFormattingATACard


DeskApplicationClass	endc


;------------------------------------------------------------------------------
; subclass of GenPrimary to prevent min/max during file linking
;------------------------------------------------------------------------------

if _KEEP_MAXIMIZED
MaximizedPrimaryClass	class	GenPrimaryClass

MSG_MAXIMIZED_PRIMARY_MAXIMIZE_TEMPORARILY	message
MSG_MAXIMIZED_PRIMARY_RESTORE			message

;-----------------------------------------------------------------------------
;	VARIABLE DATA		
;-----------------------------------------------------------------------------

TEMP_MAXIMIZED_PRIMARY_WAS_MAXIMIZED_BEFORE	vardata
; If set, the primary was maximized before we started file linking,
; and so should remain so afterwards

MaximizedPrimaryClass	endc
endif

;------------------------------------------------------------------------------
; GeoManager subclass of GenDisplay to handle MSG_GEN_DISPLAY_CLOSE
;------------------------------------------------------------------------------

DeskDisplayClass	class	GenDisplayClass
if CLOSE_IN_OVERLAP
MSG_DESKDISPLAY_GET_OPEN_STATE			message
MSG_DESKDISPLAY_SET_OPEN_STATE			message
endif
MSG_DESKDISPLAY_SET_USAGE			message
MSG_DESKDISPLAY_CLOSE_OLDEST_CHECK		message
MSG_DESKDISPLAY_CLOSE_OLDEST			message
;;MSG_DRAW_LASSO				message
;;MSG_META_END_LASSO				message

if CLOSE_IN_OVERLAP
	DDI_openState	word
endif
	DDI_usage	word

DeskDisplayClass	endc

;------------------------------------------------------------------------------
; subclass of GenDisplayGroup to deal with MSG_DESKDISPLAY_CLOSE_OLDEST_CHECK
;------------------------------------------------------------------------------

DeskDisplayGroupClass	class	GenDisplayGroupClass

MSG_DESKDG_CLOSE_OLDEST_CHECK			message
MSG_DESKDG_CLOSE_OLDEST				message

DeskDisplayGroupClass	endc


;------------------------------------------------------------------------------
; subclass of GenDisplayControl to deal with setting 'maximized-name-on-primary'
;------------------------------------------------------------------------------

DeskDisplayControlClass	class	GenDisplayControlClass

MSG_DESKDC_SET_MAXIMIZED_NAME_STATE		message
; used to turn on or off 'maximized-name-on-primary'.  Used before calling
; superclass in MSG_GEN_PROCESS_OPEN_APPLICATION handler.
;
; Pass:
;	cl - TRUE to set 'maximized-name-on-primary', FALSE otherwise
; Return:
;	nothing

DeskDisplayControlClass	endc




;------------------------------------------------------------------------------
; Title GenTrigger for GeoLauncher
;------------------------------------------------------------------------------

ifdef GEOLAUNCHER

TitledGenTriggerClass	class	GenTriggerClass
	TGTI_title		lptr.char ; title to display/center for moniker
	TGTI_pictureNumber	byte	; # of moniker to display
TitledGenTriggerClass	endc

endif



;------------------------------------------------------------------------------
; class for icons of Trash, Drives, Printer, etc.
;------------------------------------------------------------------------------

ifndef GEOLAUNCHER		; Trash Can is button in GeoLauncher
DeskToolClass	class	GenGlyphClass
else
DeskToolClass	class	TitledGenTriggerClass
endif

MSG_DESK_TOOL_GET_TYPE				message
;
; pass: nothing
; return: dl - DeskToolType
;

DesktopToolFlags	record
	DTF_FEEDBACK_ON:1		; used for during quick-transfer
					;	feedback
DesktopToolFlags	end

	DeskToolType etype byte,	0
DESKTOOL_WASTEBASKET		enum DeskToolType

	DT_flags	DesktopToolFlags
	DT_toolType	DeskToolType

DeskToolClass	endc


;------------------------------------------------------------------------------
; class for icons of Appl/Doc buttons and up-directory button
;------------------------------------------------------------------------------

ifndef GEOLAUNCHER
DirToolClass	class	GenTriggerClass
else
DirToolClass	class	TitledGenTriggerClass
endif

MSG_DIR_TOOL_GET_TYPE				message
;
; pass: nothing
; return: dl - DirToolType
;

MSG_DIR_TOOL_SET_DISK_HANDLE			message
;
; pass: bp = disk handle
; return: nothing
;

	DirToolType etype byte,	0

DIRTOOL_APPLDIR		enum DirToolType
DIRTOOL_DOCDIR		enum DirToolType
DIRTOOL_UPDIR		enum DirToolType
DIRTOOL_DOSROOMDIR	enum DirToolType
DIRTOOL_WASTEDIR	enum DirToolType

	DrT_flags	DesktopToolFlags
	DrT_toolType	DirToolType
	DrT_diskHandle	word

DirToolClass	endc



;------------------------------------------------------------------------------
; class specifically for Drives
;------------------------------------------------------------------------------

DriveToolClass	class	GenTriggerClass

MSG_DRIVE_TOOL_SET_DRIVE			message
;
; pass: bp - drive number
; return: nothing
;

MSG_DRIVE_TOOL_GET_DRIVE			message
;
; pass: nothing
; return: bp - drive number
;	  dx - disk handle
;

MSG_DRIVE_TOOL_SET_LETTER			message
;
; pass: nothing
; return: nothing
;

MSG_DRIVE_TOOL_GET_TYPE				message
;
; pass: nothing
; return: dl - DriveToolType

	DriveToolType etype byte,	0

DRIVETYPE_FLOPPY_525	enum DriveToolType
DRIVETYPE_FLOPPY_35	enum DriveToolType
DRIVETYPE_HARDDISK	enum DriveToolType
DRIVETYPE_RAMDISK	enum DriveToolType
DRIVETYPE_CDROMDISK	enum DriveToolType
DRIVETYPE_NETDISK	enum DriveToolType
DRIVETYPE_PCMCIADISK	enum DriveToolType
DRIVETYPE_REMOVABLEDISK	enum DriveToolType

if PZ_PCGEOS

DRIVETOOL_LABEL_FONT	equ	FID_PIZZA_KANJI
DRIVETOOL_LABEL_POINTSIZE equ	16

else

DRIVETOOL_LABEL_FONT	equ	FID_BERKELEY
DRIVETOOL_LABEL_POINTSIZE equ	10

endif

DRIVETOOL_LABEL_GUTTER	equ	1	; 1 pixel between right edge of label
					;  and bitmap

	DvT_flags	DesktopToolFlags
	DT_driveType	byte
	DT_driveNumber	byte
	DT_disk		word		; disk handle

DriveToolClass	endc



;------------------------------------------------------------------------------
; class for drive letters in disk copy and disk format dialog boxes
;------------------------------------------------------------------------------

DriveLetterClass	class	GenItemClass

MSG_DRIVE_LETTER_SET_DRIVE			message
;
; pass: bp - drive number
;	cx - TRUE to set mnemonic
;	     FALSE to not set mnemonic
; return: ax = GenItem identifier
;

MSG_DRIVE_LETTER_GET_DRIVE			message
;
; pass: nothing
; return: bp - drive number
;

DriveLetterClass	endc



;------------------------------------------------------------------------------
; class for file lists in file operation dialog boxes
;------------------------------------------------------------------------------

FileOpFileListClass	class	GenTextClass

MSG_SET_FILE_LIST				message
;
; pass: dx - handle of FileQuickTransfer block
; return: nothing
;

MSG_SHOW_NEXT_FILE				message
;
; pass: nothing
; return: carry set if no next file to show
;

MSG_GET_CURRENT_FILE				message
;
; pass: 	nothing
; return: 	carry set if no more files
;  		carry clear if file returned:
; 			^hcx:dx	= FileOperationInfoEntry
;

MSG_CLEAR_FILE_LIST				message
;
; pass: nothing
; return: nothing
;

MSG_GET_NUM_FILES_LEFT				message
;
; pass: nothing
; return: cx - number of files left (including current one)
;

MSG_CLEAR_FILE_LIST_VIA_PROCESS			message
;
; Same as MSG_CLEAR_FILE_LIST except this goes through the
; process queue to avoid synchronization problems.
;

	FOFL_buffer	hptr.FileQuickTransferHeader
	FOFL_count	word
	FOFL_current	word

		noreloc	FOFL_buffer
FileOpFileListClass	endc



;------------------------------------------------------------------------------
; class for pathname in file operation dialog boxes
;------------------------------------------------------------------------------

PathnameStorageClass	class	GenTextClass

;MSG_GEN_PATH_SET				message
;
; Pass:	 	cx:dx - null-terminated pathname; may not be in the same
;			block as the object receiving this message.
;			(if null, uses root directory of disk specified by
;			 disk handle; if relative, path is taken current to
;			 selector's current path)
;		bp - disk handle of path, or StandardPath constant
;			(if 0, will use object's current disk handle)
; Return:	carry set if path couldn't be set (was invalid):
; 			ax - error code (FileError)
; 		carry clear if path successfully set:
; 			ax - destroyed
;		cx, dx, bp - destroyed
;

;MSG_GEN_PATH_GET				message
;
; Pass:		dx:bp - address to which to copy. if dx is 0, the path is
;			copied to a block allocated on the global heap and
;			cx is ignored.
;		cx - size of buffer (may be zero)
; Return:	carry set if error (path won't fit in the passed buffer or is
;			invalid):
; 			ax - number of bytes required (0 => path is invalid)
;			cx - disk handle of path
;		carry clear if ok:
;			if dx:bp passed as far pointer:
;				dx:bp - filled with path (fptr preserved)
;			if dx 0:
;				dx - handle of block containing the path
;			cx - disk handle of path
;

;PathnameStorageBuffer	type	SEARCH_NAME_BUFFER_LENGTH dup (char)

PathnameStorageClass	endc



;------------------------------------------------------------------------------
; class for file operation dialog boxes
;------------------------------------------------------------------------------

FileOperationBoxClass	class	GenInteractionClass

MSG_FOB_SET_DISK_HANDLE				message
;
; pass: cx - disk handle
; return: nothing
;

MSG_FOB_GET_DISK_HANDLE				message
;
; pass: nothing
; return: cx - disk handle
;

MSG_FOB_MOVE_TO_ITEM_SELECTED			message
;
; pass: nothing
; return: nothing
;

MSG_FOB_COPY_TO_ITEM_SELECTED			message
;
; pass: nothing
; return: nothing
;

MSG_FOB_RECOVER_TO_ITEM_SELECTED		message
;
; pass: nothing
; return: nothing
;

ifdef CREATE_LINKS
MSG_FOB_LINK_TO_ITEM_SELECTED			message
;
; pass: nothing
; return: nothing
;
endif

	FOB_diskHandle	word

FileOperationBoxClass	endc


FileOperationBoxTypeTableEntry struct
	FOBTTE_fileSelectorHandle	word
	FOBTTE_fileSelectorOffset	word
	FOBTTE_curDirTextHandle	word
	FOBTTE_curDirTextOffset	word
	FOBTTE_prependTextOffset	word
if GPC_DISABLE_MOVE_COPY_FOR_SOURCE
	FOBTTE_sourceDirHandle		word
	FOBTTE_sourceDirOffset		word
	FOBTTE_actionButtonHandle	word
	FOBTTE_actionButtonOffset	word
endif
FileOperationBoxTypeTableEntry ends

FileOperationBoxType	etype byte, 0, (size FileOperationBoxTypeTableEntry)
FOBT_MOVE	enum FileOperationBoxType
FOBT_COPY	enum FileOperationBoxType
FOBT_RECOVER	enum FileOperationBoxType

ifdef CREATE_LINKS
FOBT_LINK	enum FileOperationBoxType
endif



;------------------------------------------------------------------------------
; class for file operation dialog boxes which initiate active state
;------------------------------------------------------------------------------

FileOpAppActiveBoxClass	class	FileOperationBoxClass
FileOpAppActiveBoxClass	endc



;------------------------------------------------------------------------------
; cancel button
;------------------------------------------------------------------------------

CancelTriggerClass	class	GenTriggerClass
CancelTriggerClass	endc

;------------------------------------------------------------------------------
; subclass of file selector
;------------------------------------------------------------------------------

if _DOS_LAUNCHERS
WFileSelectorClass	class	GenFileSelectorClass
	WFSI_filterData	word	0
WFileSelectorClass	endc
endif

DriveButtonLocations	etype	byte
DRIVES_SHOWING	enum DriveButtonLocations
DRIVES_FLOATING	enum DriveButtonLocations
DRIVES_HIDDEN	enum DriveButtonLocations

;------------------------------------------------------------------------------
; subclass of GenInteraction
;------------------------------------------------------------------------------
ToolAreaClass	class	GenInteractionClass
MSG_TA_MOVE_DRIVE_TOOLS				message
MSG_TA_SET_DRIVE_LOCATION			message
MSG_TA_GET_DRIVE_LOCATION			message
MSG_TA_FIND_DRIVE				message
;
; pass:
;	cx = starting location of search (0-based child #)
; return:
;	^lcx:dx = child (or NULL if not found)
;
	TA_driveButtonLocation	DriveButtonLocations TOOLAREA
ToolAreaClass	endc

;------------------------------------------------------------------------------
; subclass of GenItemGroup for drive lists
;------------------------------------------------------------------------------

DriveListClass	class	GenItemGroupClass

MSG_DRIVE_LIST_GET_DRIVE_OPTR		message
;
; Pass:
;	cl = drive #
; Return:
;	^lcx:dx = drive optr (or null)
;

DriveListClass	endc


if INSTALLABLE_TOOLS
include cdesktopToolManager.def
endif

;------------------------------------------------------------------------------
; subclass of GenTextClass for ZMGR's path info display that deals with
; hacked START_SELECT quick transfer that we do in ZMGR
;------------------------------------------------------------------------------

if _PEN_BASED

if GPC_FOLDER_DIR_TOOLS
NoQTTextClass	class	PathnameStorageClass
else
NoQTTextClass	class	GenTextClass
endif
NoQTTextClass	endc

endif

;------------------------------------------------------------------------------
;			Error table entry
;------------------------------------------------------------------------------

DesktopErrorTableFlags	record
	DETF_SHOW_FILENAME:1
	; filename should be reported.  The global variable
	; fileOperationInfoEntryBuffer will be used

	DETF_USE_DS_DX_NAME:1		; use ds:dx for filename
	DETF_USE_DS_DX_STRING:1		; use the whole string in ds:dx for
					;   filename
	DETF_USE_DX_BUFFER_NAME:1	; use name in ^hdx
	DETF_NO_CANCEL:1		; no CANCEL button
	DETF_NOTICE:1			; a notice instead of an error
	DETF_PROMPT:1			; for prompting (OK/CANCEL, notice)
	DETF_SYS_MODAL:1		; make error box sys modal (app launch)
	DETF_DESTRUCTIVE:1
	; If set, then the affirmative response for this dialog
	; denotes a destructive action, and shouldn't be made the
	; default.

	:7
DesktopErrorTableFlags	end

DesktopErrorTableEntry	struct
	DETE_error	word
	DETE_string	optr.char
	DETE_flags	DesktopErrorTableFlags
DesktopErrorTableEntry	ends


;------------------------------------------------------------------------------
;			Fatal errors
;------------------------------------------------------------------------------

DESKTOP_FATAL_ERROR			enum FatalErrors
NO_SORT_FIELD				enum FatalErrors
NO_GSTATE				enum FatalErrors
TOO_MANY_DIRECTORIES			enum FatalErrors
FOLDER_TRACKING_TABLE_FULL		enum FatalErrors
ASSOC_ENTRY_NOT_FOUND			enum FatalErrors
CANT_FIND_FOLDER_MONIKER		enum FatalErrors
CANT_FIND_FILE_MONIKER			enum FatalErrors
BUILD_DISPLAY_LIST_NO_DISPLAY_MODE	enum FatalErrors
FILE_HEADER_NOT_LOADED			enum FatalErrors
NOT_GEOS_FILE				enum FatalErrors
UNKNOWN_DRIVE_TYPE			enum FatalErrors
TREE_DRAGGING_NOTHING			enum FatalErrors
DESK_BAD_PARAMS				enum FatalErrors
ERROR_COPY_FORMAT_DISK			enum FatalErrors
USER_NOTES_TOO_BIG			enum FatalErrors
CANT_FIND_ENTRY_IN_DISPLAY_LIST		enum FatalErrors
GOOFY_KEYBOARD_CHAR			enum FatalErrors
PATH_WITH_NO_SLASH			enum FatalErrors
BAD_FOLDER_DISPLAY_MODE			enum FatalErrors
BAD_DRAW_FOLDER_OBJECT_ICON_FLAGS	enum FatalErrors
RENAME_VOLUME_NAME_TOO_LONG		enum FatalErrors
GET_INFO_UNKNOWN_FILE_TYPE		enum FatalErrors
BAD_COPY_MOVE_FILE_TO_DIR_FLAGS		enum FatalErrors
FILE_COPY_FILE_NO_PATH			enum FatalErrors
BAD_FILE_CHECK_AND_DELETE_FLAGS		enum FatalErrors
DRIVE_LETTER_NOT_ALLOWED		enum FatalErrors
BAD_MARK_WINDOW_FOR_UPDATE_FLAGS	enum FatalErrors
BAD_BROADCAST_OBJ_MESSAGE_FLAGS		enum FatalErrors
NO_RESPONSE_TO_GUQT_FIELD		enum FatalErrors
BOGUS_USER_STANDARD_DIALOG_RESPONSE	enum FatalErrors
UNKNOWN_COPY_CALLBACK_VALUE		enum FatalErrors
UNKNOWN_DIRTOOL_TYPE			enum FatalErrors
BAD_FILE_OP_PROGRESS_TYPE		enum FatalErrors
PATH_BUFFER_TOO_SMALL			enum FatalErrors
DRIVE_TOOL_BUILT_BEFORE_DRIVE_NUMBER_SET enum FatalErrors
DRIVE_TOOL_BOUND_TO_INVALID_DRIVE	enum FatalErrors
EVIL_NAME_TOO_LONG???			enum FatalErrors
NO_BITMAP_AVAILABLE_FOR_DRIVE_TYPE	enum FatalErrors
GOT_INVALID_NAME_FROM_FILE_ENUM		enum FatalErrors
BAD_W_FILE_FILTER_TYPE			enum FatalErrors
LAUNCHER_BAD_FILE_TYPE			enum FatalErrors
BOGUS_ICON_CHOSEN			enum FatalErrors

ILLEGAL_SEGMENT				enum FatalErrors 
BLOCK_NOT_LOCKED			enum FatalErrors 
ILLEGAL_OFFSET				enum FatalErrors 

DS_SI_NOT_FOLDER_INSTANCE_DATA		enum FatalErrors 
; ds:si is not a pointer to folder instance data

BAD_PICTURE_NUMBER			enum FatalErrors

DS_SI_NOT_FOLDER_OBJECT			enum FatalErrors 
; *ds:si is not a FolderClass object

ILLEGAL_FOLDER_RECORD			enum FatalErrors 
; es:di is not pointing to a valid folder record

CORRUPT_FOLDER_BUFFER_HEADER		enum FatalErrors
; The folder buffer for this folder was not initialized properly.

CALLBACK_ROUTINE_TRASHED_DS		enum FatalErrors 

NEWDESK_COULD_NOT_ADD_HINT		enum FatalErrors

INVALID_FM_PARENT			enum FatalErrors
; Tool library invoked MSG_FM_DUP_AND_ADD with an invalid FileManagerParent
; number.

IMPORTED_TOOL_LIBRARY_PROVIDES_NO_TOOLS	enum FatalErrors
; An tool library has returned a table length of 0, which is illegal

ILLEGAL_PATH				enum FatalErrors 
; A bogus path is being passed around.

ILLEGAL_OBJECT_TYPE			enum FatalErrors 
; The NewDesk object type is invalid

ILLEGAL_WARNING				enum FatalErrors
; DesktopYesNoWarning was passed a bogus warning type

ILLEGAL_VALUE				enum FatalErrors 
; generic error

INVALID_FILE_QUICK_TRANSFER_HEADER	enum FatalErrors 
INVALID_FILE_OPERATION_INFO_ENTRY	enum FatalErrors 

if _NEWDESKBA

INVALID_USER_TYPE_FOR_ADD_TO_CLASS	enum FatalErrors
; The wrong type of user (i.e. not a student or generic) is being
; added to a class


endif	; if _NEWDESKBA

ILLEGAL_CONNECTION_TYPE			enum FatalErrors
; An illegal ConnectionType has been passed to this routine
;

ILLEGAL_FLAGS				enum FatalErrors

EXPECTED_NONZERO_VALUE		enum FatalErrors

if ERROR_CHECK
NOT_DGROUP				enum	FatalErrors
endif

;------------------------------------------------------------------------------
;			Desktop warnings
;------------------------------------------------------------------------------

	DesktopWarnings etype word

WARNING_DELETE_FILE			enum DesktopWarnings
WARNING_DELETE_DIR			enum DesktopWarnings
WARNING_DELETE_READONLY			enum DesktopWarnings
WARNING_DELETE_LINK			enum DesktopWarnings
WARNING_THROW_AWAY_FILE			enum DesktopWarnings
WARNING_THROW_AWAY_DIR			enum DesktopWarnings
WARNING_THROW_AWAY_READONLY		enum DesktopWarnings
WARNING_THROW_AWAY_LINK			enum DesktopWarnings
WARNING_REPLACE_32_FILE			enum DesktopWarnings
WARNING_REPLACE_WASTEBASKET_FILE	enum DesktopWarnings
WARNING_DELETE_ITEMS			enum DesktopWarnings
WARNING_THROW_AWAY_ITEMS		enum DesktopWarnings
WARNING_RECURSIVE_ACCESS_DENIED		enum DesktopWarnings
WARNING_EMPTY_WASTEBASKET		enum DesktopWarnings
WARNING_DELETING_APPLICATION		enum DesktopWarnings
;
; disk format stuff
;
WARNING_DISK_FORMAT_NO_NAME		enum DesktopWarnings
WARNING_FORMAT_LO_IN_HI			enum DesktopWarnings
;
; disk copy stuff
;
WARNING_DISK_COPY_SOURCE		enum DesktopWarnings
WARNING_DISK_COPY_DEST			enum DesktopWarnings
WARNING_DISK_COPY_NUM_SWAPS		enum DesktopWarnings
WARNING_DISK_COPY_DESTROY_DEST_NAME	enum DesktopWarnings
WARNING_DISK_COPY_DESTROY_DEST_NO_NAME	enum DesktopWarnings
;
; BA stuff
;
if _NEWDESKBA
WARNING_ADDING_STUDENT			enum DesktopWarnings
WARNING_ADDING_PROGRAM			enum DesktopWarnings
WARNING_REMOVING_PROGRAM		enum DesktopWarnings
WARNING_REMOVING_CLASS			enum DesktopWarnings
WARNING_REMOVE				enum DesktopWarnings
WARNING_DELETE				enum DesktopWarnings
WARNING_CREATING_STUDENT_UTILITY_DRIVE	enum DesktopWarnings
WARNING_REMOVING_STUDENT_UTILITY_DRIVE	enum DesktopWarnings
endif		; if _NEWDESK

if _CONNECT_TO_REMOTE
WARNING_FILE_TRANSFER			enum DesktopWarnings
endif

if _KEEP_MAXIMIZED
WARNING_FILE_LINKING			enum DesktopWarnings
endif

WARNING_OPERATION_FILE_IN_USE		enum DesktopWarnings
WARNING_MOVE_READONLY			enum DesktopWarnings
WARNING_TREAT_REMOTE_FILES_LIKE_READ_ONLY enum DesktopWarnings


DesktopWarningFlags	record
	DWF_NO_SKIP_TRIGGER:1
	; If this flag is set, and if the specified warning involves a
	; "skip" trigger as its second trigger, then nuke that trigger.

	DWF_WARNING DesktopWarnings:15
DesktopWarningFlags	end


WarningTableEntry	struct
	WTE_warning		DesktopWarnings
	WTE_string		optr.char
	WTE_flags		DesktopErrorTableFlags
	WTE_customTriggers	nptr.StandardDialogResponseTriggerTable
WarningTableEntry	ends

;------------------------------------------------------------------------------
;			Desktop errors
;------------------------------------------------------------------------------

;
; start above DOS errors
;
	DesktopErrors etype word,	1000

;ERROR_NO_MULTIPLE_NAMES		enum DesktopErrors
YESNO_NO			enum DesktopErrors
YESNO_YES			enum DesktopErrors
YESNO_CANCEL			enum DesktopErrors
DESK_DB_DETACH			enum DesktopErrors
OKCANCEL_OK			enum DesktopErrors
OKCANCEL_CANCEL			enum DesktopErrors
;;cannot enter wildcard chars - 6/12/90
;;ERROR_NO_WILDCARDS		enum DesktopErrors
ERROR_COPY_MOVE_TO_CHILD	enum DesktopErrors
ERROR_REPLACE_PARENT		enum DesktopErrors
ERROR_NO_PARENT_APPLICATION	enum DesktopErrors
ERROR_SAME_FILE			enum DesktopErrors
ERROR_ROOT_FILE_OPERATION	enum DesktopErrors
ERROR_TOO_MANY_FOLDER_WINDOWS	enum DesktopErrors
ERROR_CANT_OPEN_FILE		enum DesktopErrors
ERROR_CANT_FORMAT_SYSTEM_DRIVE	enum DesktopErrors
;ERROR_NO_MULTIPLE_DATAFILES	enum DesktopErrors
ERROR_INSUFFICIENT_SPACE	enum DesktopErrors
ERROR_INSUFFICIENT_SPACE_NO_SUGGESTION	enum DesktopErrors
ERROR_COPY_DEST_PATH_TOO_LONG	enum DesktopErrors
if (not _FCAB and not _ZMGR)
ERROR_THROW_AWAY_DEST_PATH_TOO_LONG	enum DesktopErrors
endif		; if ((not _FCAB) and (not _ZMGR))
ERROR_WASTEBASKET_FULL		enum DesktopErrors
DISK_COPY_OK			enum DesktopErrors
ERROR_TOO_MANY_FILES		enum DesktopErrors
ERROR_DISK_RENAME		enum DesktopErrors
ERROR_CANT_CREATE_DIR		enum DesktopErrors
ERROR_SYSTEM_FOLDER_DESTRUCTION	enum DesktopErrors
ERROR_BAD_VOLUME_NAME		enum DesktopErrors
ERR_CANCEL_SANS_DEST		enum DesktopErrors
ERROR_MASTER_LAUNCHER_MISSING	enum DesktopErrors
ERROR_MASTER_LAUNCHER_BAD	enum DesktopErrors
ERROR_LAUNCHER_FAILED		enum DesktopErrors
ERROR_LAUNCHER_NAME_CONFLICT	enum DesktopErrors
ERROR_RECOVER_TO_WASTEBASKET	enum DesktopErrors
ERROR_THROW_AWAY_FILE_IN_WB	enum DesktopErrors
ERROR_NO_SELECTION		enum DesktopErrors
ERROR_CANNOT_MOVE		enum DesktopErrors
ERROR_CANNOT_COPY		enum DesktopErrors
ERROR_CANNOT_DELETE		enum DesktopErrors
ERROR_BLANK_NAME		enum DesktopErrors

if _FCAB
ERROR_FILE_CABINET_CANNOT_DELETE_FILE enum DesktopErrors
endif		; if _FCAB

ERROR_REJECT_ENTRY		enum DesktopErrors
ERROR_LINK_TARGET_GONE		enum DesktopErrors

if _NEWDESK
ERROR_DRIVE_LINK_TARGET_GONE	enum DesktopErrors
ERROR_ND_OBJECT_NOT_ALLOWED	enum DesktopErrors
ERROR_CANNOT_OVERWRITE_THIS_WOT	enum DesktopErrors
endif		; if _NEWDESKBA

if GPC_FOLDER_WINDOW_MENUS
ERROR_DRAG_NOT_ALLOWED		enum DesktopErrors
endif

if _NEWDESKBA
ERROR_OPEN_INCORRECT_SELECTION			enum DesktopErrors
ERROR_THROW_AWAY_NO_SELECTION			enum DesktopErrors
ERROR_RECOVER_NO_SELECTION			enum DesktopErrors
ERROR_COPY_NO_SELECTION				enum DesktopErrors
ERROR_DISTRIBUTE_NO_SELECTION			enum DesktopErrors
ERROR_DISTRIBUTE_WRONG_OBJECT_TYPE		enum DesktopErrors
ERROR_STUDENT_MANAGE_INCORRECT_SELECTION	enum DesktopErrors
ERROR_CLASS_DELETE_NO_SELECTION			enum DesktopErrors
ERROR_CLASS_MANAGE_INCORRECT_SELECTION		enum DesktopErrors
ERROR_CLASS_MODIFY_INCORRECT_SELECTION		enum DesktopErrors
ERROR_ROSTER_REMOVE_NO_SELECTION		enum DesktopErrors
ERROR_ROSTER_STUDENT_FILES_NO_SELECTION		enum DesktopErrors
ERROR_CLASS_OPEN_INCORRECT_SELECTION		enum DesktopErrors
ERROR_CLASS_BOOKMARK_NO_SELECTION		enum DesktopErrors
ERROR_LIST_TOO_MANY_SELECTIONS			enum DesktopErrors
ERROR_HOME_UNSUPPORTED_TRANSFER_OPERATION	enum DesktopErrors
ERROR_CLASSES_UNSUPPORTED_TRANSFER_OPERATION	enum DesktopErrors
ERROR_ROSTER_UNSUPPORTED_TRANSFER_OPERATION	enum DesktopErrors
ERROR_DESKTOP_UNSUPPORTED_TRANSFER_OPERATION	enum DesktopErrors
ERROR_FOLDER_UNSUPPORTED_TRANSFER_OPERATION	enum DesktopErrors
ERROR_INVALID_CLASS_DESCRIPTION			enum DesktopErrors
ERROR_DUPLICATE_CLASS_DESCRIPTION		enum DesktopErrors
ERROR_TOO_MANY_CLASSES				enum DesktopErrors
ERROR_UNABLE_TO_CREATE_CLASS			enum DesktopErrors
ERROR_UNABLE_TO_ADD_STUDENT			enum DesktopErrors
ERROR_CANT_ADD_STUDENT_TWICE			enum DesktopErrors
ERROR_CANT_ADD_PROGRAM_TWICE			enum DesktopErrors
ERROR_UNABLE_TO_CREATE_STUDENT_LINK		enum DesktopErrors
ERROR_UNABLE_TO_ADD_COURSEWARE			enum DesktopErrors
ERROR_UNABLE_TO_ADD_SPECIAL_UTILITY		enum DesktopErrors
ERROR_UNABLE_TO_ADD_OFFICE_APP			enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_STUDENT			enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_CLASS			enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_COURSEWARE		enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_SPECIAL_UTILITY		enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_OFFICE_APP		enum DesktopErrors
ERROR_UNABLE_TO_MODIFY_CLASS			enum DesktopErrors
ERROR_UNABLE_TO_CHANGE_PASSWORD			enum DesktopErrors
ERROR_UNABLE_TO_SET_BOOKMARK			enum DesktopErrors
ERROR_ONLY_FILE_CAN_BE_SELECTED			enum DesktopErrors
ERROR_FILE_OPEN					enum DesktopErrors
ERROR_INVALID_FILE_FORMAT			enum DesktopErrors
ERROR_NO_MATCHING_STUDENTS			enum DesktopErrors
ERROR_NO_MATCHING_PROGRAMS			enum DesktopErrors
ERROR_STUDENT_HAS_TOO_MANY_CLASSES		enum DesktopErrors
ERROR_TOO_MANY_STUDENTS_IN_CLASS		enum DesktopErrors
ERROR_TOO_MANY_PROGRAMS_IN_CLASS		enum DesktopErrors
ERROR_TOO_MANY_PROGRAMS_IN_HOME			enum DesktopErrors
ERROR_CREATING_STUDENT_UTILITY			enum DesktopErrors
ERROR_CANT_CREATE_STUDENT_UTILITY_FROM_LIST	enum DesktopErrors
ERROR_DELETE_COURSEWARE_NOT_ALLOWED		enum DesktopErrors
ERROR_MANAGE_CLASS_SUBFOLDERS_NOT_ALLOWED	enum DesktopErrors
ERROR_DELETE_IN_THIS_FOLDER_NOT_ALLOWED		enum DesktopErrors
ERROR_GENERIC_HOME_NOT_OPENABLE			enum DesktopErrors
ERROR_TRANSFER_TO_GENERIC_HOME_NOT_ALLOWED	enum DesktopErrors
ERROR_GENERICS_CANT_BE_STUDENT_UTILITY		enum DesktopErrors
ERROR_CANT_ADD_OFFICE_APPS_TO_CLASS		enum DesktopErrors
ERROR_APPLICATION_ALREADY_RUNNING		enum DesktopErrors
ERROR_NO_DELETE_FROM_TEACHER_LIBRARY		enum DesktopErrors
ERROR_UNABLE_TO_REMOVE_STUDENT_UTILITY_DRIVE	enum DesktopErrors
ERROR_BA_DRIVE_NO_LONGER_VALID			enum DesktopErrors
endif		; if _NEWDESKBA

if _CONNECT_TO_REMOTE
;
; connect stuff
;
ERROR_RFSD_ACTIVE				enum DesktopErrors
if _KEEP_MAXIMIZED
ERROR_RFSD_ACTIVE_2				enum DesktopErrors
endif

endif


if (_ZMGR and not _PMGR)

;
; ZMGR limits number of WORLD dirs
;
ERROR_TOO_MANY_WORLD_DIRS			enum DesktopErrors
endif		; if (_ZMGR and (not _PMGR))

if	_PCMCIA_FORMAT
ERROR_UNABLE_TO_EXECUTE_DOS_PROGRAM_TO_FORMAT_PCMCIA	enum DesktopErrors
FORMAT_PCMCIA_EXIT_TO_DOS_SHORT				enum DesktopErrors
FORMAT_PCMCIA_EXIT_TO_DOS_LONG				enum DesktopErrors
FORMAT_PCMCIA_FLASH_SUCCESSFUL				enum DesktopErrors
FORMAT_PCMCIA_FAILED_DISPLAY_ERROR_NUMBER		enum DesktopErrors
FORMAT_PCMCIA_WRITE_PROTECTED				enum DesktopErrors
FORMAT_PCMCIA_FAILED_FOR_UNKNOWN_REASON			enum DesktopErrors
PARTITION_PCMCIA_ATA_FAILED				enum DesktopErrors
endif

ERROR_NO_PRINTER					enum DesktopErrors

ERROR_LINK_EXISTS					enum DesktopErrors

;------------------------------------------------------------------------------
;			why application is active
;------------------------------------------------------------------------------

	;
	; start at 0, inc by 4 (dword tables)
	;
ActiveType etype word, 0, 4

ACTIVE_TYPE_DISK_FORMAT		enum ActiveType
ACTIVE_TYPE_DISK_COPY		enum ActiveType
ACTIVE_TYPE_FILE_OPERATION	enum ActiveType

;------------------------------------------------------------------------------
;		constants for file-operation progress reporting
;------------------------------------------------------------------------------

	;
	; start at 0, even numbers only (used as word table offset)
	;
	FileOperationProgressTypes etype word, 0, 2

FOPT_NONE	enum FileOperationProgressTypes
FOPT_DELETE	enum FileOperationProgressTypes
FOPT_THROW_AWAY	enum FileOperationProgressTypes
FOPT_COPY	enum FileOperationProgressTypes
FOPT_MOVE	enum FileOperationProgressTypes


;------------------------------------------------------------------------------
;			Wastebasket constants
;------------------------------------------------------------------------------

WastebasketTypes	etype	byte
NOT_THE_WASTEBASKET	enum WastebasketTypes
WASTEBASKET_WINDOW	enum WastebasketTypes
WASTEBASKET_BUTTON	enum WastebasketTypes

WASTEBASKET_BACKGROUND	equ C_LIGHT_CYAN

;------------------------------------------------------------------------------
;			Exit confirmation constants
;------------------------------------------------------------------------------

					; used as InteractionCommand
ExitTypes		etype	word, IC_CUSTOM_START, 1
EXIT_GM		enum	ExitTypes
EXIT_DOS	enum	ExitTypes

;------------------------------------------------------------------------------
;			Filename conflict constants
;------------------------------------------------------------------------------
ConflictLocationType	etype	word
CLT_NO_CONFLICT		enum	ConflictLocationType
CLT_REMOTE_SELF		enum	ConflictLocationType
CLT_REMOTE_OTHER	enum	ConflictLocationType
CLT_LOCAL		enum	ConflictLocationType


;------------------------------------------------------------------------------
;		How Remote files are moved/copied/deleted
;------------------------------------------------------------------------------
RemoteFileBehaviorType	etype	byte
RFBT_NOT_DETERMINED	enum	RemoteFileBehaviorType
RFBT_LIKE_NORMAL	enum	RemoteFileBehaviorType
RFBT_LIKE_READ_ONLY	enum	RemoteFileBehaviorType


;------------------------------------------------------------------------------

FileDragFlag	record
	FDF_MOVECOPY:1,			; direct manipulation active
	FDF_REGION:1,			; selection rect. active
	FDF_EXPOSED:1			; EXPOSED came in during drag
	FDF_DRAG_STARTED:1		; moved or timed out since mouse down
	FDF_MOVECOPY_PENDING:1		; waiting for DRAG_SELECT to start
					;	quick-transfer on START_SELECT
					;	(only ZMGR)
	FDF_SELECT_MOVECOPY:1		; set for START_SELECT quick-transfer
					;	(only ZMGR)
	FDF_FAKE_COPY:1			; set for copy override (only ZMGR)
	FDF_FAKE_MOVE:1			; set for move override (only ZMGR)
FileDragFlag	end

if _NEWDESK
include	cNewDeskConstant.def
endif

if _NEWDESKBA
include BAConstant.def
endif

;------------------------------------------------------------------------------
;			Warnings
;------------------------------------------------------------------------------

if _NEWDESKBA
WARNING_WRONG_SIZE_DATA_IN_STUDENT_LINK			enum Warnings
; There is either too much or too little data stored in a link to a
; student's home directory.  The link should contain a UserInfoStruct
; for the student.

WARNING_UNABLE_TO_SET_TOKEN				enum Warnings
; A call to set the token of a file unexpectedly returned carry set.

WARNING_UNABLE_TO_CREATE_LINK_FROM_STUDENT		enum Warnings
; The attempt to create a link from a student's classes directory to
; the class was unsuccessful.  May mean that the student has not
; logged in yet (no DESKTOP\CLASSES directory), or that the link
; already exists for some reason

endif	; _NEWDESKBA


WARNING_FILE_ERROR_IGNORED				enum Warnings
; The File System returned an error which is not handled, and was
; ignored. 


if _PCMCIA_FORMAT		
WARNING_MISSING_INI_FILE_STUFF_FOR_PCMCIA_FORMAT enum Warnings
;  A dos command needs to be executed to format FLASH and ATA pcmcia cards.
;  The command and its arguments are supposed to be in the .ini file.
;  The category is pcmciaFormat and the keys are either
;  	flashCommand and flashArgs
;		or
;	ataCommand and ataArgs
;
;  Apparently this stuff is not in the ini file


WARNING_DOS_EXEC_ERROR_ATTEMPTING_PCMCIA_FORMAT enum Warnings
;  A dos command needs to be executed to format FLASH and ATA pcmcia cards.
;  If you get this warning then a error was returned from DosExec when 
;  attempting to run the dos command.
;

endif	;_PCMCIA_FORMAT

;------------------------------------------------------------------------------
;  FULL_EXECUTE_IN_PLACE : Indicates that the net lib is going to
;	be used in a system where all geodes (or most, at any rate)
;	are to be executed out of ROM.  
;------------------------------------------------------------------------------
ifndef FULL_EXECUTE_IN_PLACE
	FULL_EXECUTE_IN_PLACE		equ	FALSE
endif

;
; Sounds
; 
if GPC_DRAG_SOUND
SoundType etype word
ST_DRAG	enum	SoundType
endif
