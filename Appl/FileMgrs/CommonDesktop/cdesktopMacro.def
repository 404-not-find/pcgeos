COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Desktop
FILE:		desktopMacros.asm

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	brianc	8/89		Initial version

DESCRIPTION:
	This file contains contains macros for desktop.

	$Id: cdesktopMacro.def,v 1.2 98/06/03 13:19:18 joon Exp $

------------------------------------------------------------------------------@

;------------------------------------------------------------------------------
;	Single-line specific desktop macros
;------------------------------------------------------------------------------

GM	macro	line
	if _GMGR
line
	endif
endm

;--------------------------------------------------

FC	macro	line
	if _FCAB
line
	endif
endm

;--------------------------------------------------

NOTFC	macro	line
	if not _FCAB
line
	endif
endm

;--------------------------------------------------

GMONLY	macro	line
	if _GMGRONLY
line
	endif
endm

;--------------------------------------------------

ND	macro	line
	if _NEWDESK
line
	endif
endm

;--------------------------------------------------

BA	macro	line
	if _NEWDESKBA
line
	endif
endm

;--------------------------------------------------

NOTBA	macro	line
	if not _NEWDESKBA
line
	endif
endm

;--------------------------------------------------

NDONLY	macro	line
	if _NEWDESKONLY
line
	endif
endm

;--------------------------------------------------

NOFCBA	macro	line
	if (not _FCAB and not _NEWDESKBA)
line
	endif
endm

;------------------------------------------------------------------------------

NK	macro	line
endm

;--------------------------------------------------

IC_AREA macro	line
	if IC_AREA
line
	endif
endm

;--------------------------------------------------



;-----------------------------------------------------------------------------
;	DerefFolderObject	
;	- produce a pointer to the instance data -- in case we ever
;	make Folder a master class... 		
;-----------------------------------------------------------------------------
DerefFolderObject	macro	seg, chunk, dest
    if ERROR_CHECK
	ifdif <seg>, <ds>
		push	ds
		segmov	ds, seg
	endif
	ifdif	<chunk>, <si>
		push	si
		mov	si, chunk
	endif
	call	ECCheckFolderObjectDSSI
	ifdif	<chunk>, <si>
		pop	si
	endif
	ifdif <seg>, <ds>
		pop	ds
	endif
    endif
	mov	dest, seg:[chunk]
endm

LoadBXSI	macro	obj
	mov	bx, handle obj
	mov	si, offset obj
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		movfptr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Moves a label into a fptr variable

PASS:		var	= variable to store fptr in
		ptr	= far label

PSEUDO CODE/STRATEGY:
KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	martin	11/15/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
movfptr		macro	var, ptr
regargs = 0
_ParseDWordArg	<var>, varl, varh, regargs, <movfptr>
	mov	varh, segment ptr
	mov	varl, offset  ptr
endm


; memmov -- for moving a word of memory

memmov	macro	dest, source, usereg
	segmov	dest, source, usereg
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		_ParsePointArg

DESCRIPTION:	Parse an argument to a dword math macro

PASS:
	arg - argument passed to macro
	regcount - # of register-pair arguments
	op - string to emit for error-identification
RETURN:
	rx - x value
	ry - y value
	regcount - # of register-pair or constant arguments

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

_ParsePointArg	macro	arg, rx, ry, regcount, op

alen	sizestr	<&arg>

ifnb <arg>

if (4 AND .TYPE (arg))
    rx catstr <((arg) SHR 16)>
    ry catstr <((arg) AND 0xffff)>
    regcount=regcount+1
else
    if (alen eq 4)
	rx substr <arg>, 1, 2
	ry substr <arg>, 3, 2
	regcount=regcount+1
    else
        rx catstr <arg>, <.P_x>
        ry catstr <arg>, <.P_y>
    endif
endif

else
    ErrMessage <op : missing argument>
endif

endm



;******************************************************************************
;	MovP	- move Point.  Takes 2-register arguments similar to
;	movdw, except registers are specified X first, ie
;	movP ds:[di].point, cxdx  (cx is X, dx is Y)
;******************************************************************************
 
movP	macro	dest, source, trashreg
	local	drx, dry, srx, sry, regargs

regargs = 0
_CheckDWordTwoArg	<dest>, <source>, <movP>
_ParsePointArg	<dest>, drx, dry, regargs, <movP>
_ParsePointArg	<source>, srx, sry, regargs, <movP>

if (regargs gt 0)
	mov	dry, sry
	mov	drx, srx
elseifnb <trashreg>
	mov	trashreg, sry
	mov	dry, trashreg
	mov	trashreg, srx
	mov	drx, trashreg
else
	ErrMessage <movP : need trash register to move mem, mem>
endif

endm


;******************************************************************************
; Max - make DEST the maximum of DEST and SOURCE
;******************************************************************************
Max	macro	dest, source
local	done
	cmp	dest, source
	jge	done
	mov	dest, source
done:
endm 

;******************************************************************************
; Min - make DEST the maximum of DEST and SOURCE
;******************************************************************************
Min	macro	dest, source
local	done
	cmp	dest, source
	jle	done
	mov	dest, source
done:
endm 



ECCheckFlags	macro	value, flagtype
if ERROR_CHECK
	pushf
	test	value, not mask flagtype
	ERROR_NZ	ILLEGAL_FLAGS
	popf
endif
endm	

ECMakeSureNonZero	macro	value
if ERROR_CHECK
	tst	value
	ERROR_Z EXPECTED_NONZERO_VALUE
endif
endm



if ERROR_CHECK

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ECCheckDGroup
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Check if es/ds is pointing to dgroup

PASS:		segreg	= either ds or es

DESTROY:	NOTHING

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CL	7/ 1/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ECCheckDGroup		macro	segreg

		push	ax, bx, ds

ifidn	<segreg>, <ds>
		mov	ax, ds			; ax = dgroup (supposed)
else
		mov	ax, es			; ax = dgroup (supposed)
endif

		GetResourceSegmentNS dgroup, ds	; ds = dgroup
		mov	bx, ds			; bx = dgroup
		cmp	ax, bx
		ERROR_NE	NOT_DGROUP

		pop	ax, bx, ds
		
		endm
endif
