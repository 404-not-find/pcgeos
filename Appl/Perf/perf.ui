/*
 * Project:	PC/GEOS
 * Module:	Perf (Performance Meter Application)
 * File:	perf.ui
 *
 * Author:	Tony Requist, Adam de Boor, Eric E. Del Sesto
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * RCS STAMP:
 *	$Id: perf.ui,v 1.1 97/04/04 16:27:05 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"
#include "Objects/colorC.uih"

/* now read artwork files */

#include "Art/mkrPerf.ui"
#include "Art/mkrPerfTiny.ui"
#include "strings.ui"

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The perf.gp file contains "appobj" statement which indicates
 * that this "PerfApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

PerfApp = GenApplication {
	moniker = list {
		PerfTextMoniker,
		PerfLCMoniker,
		PerfLMMoniker,
		PerfSCMoniker,
		PerfSMMoniker,
		PerfLCGAMoniker,
		PerfSCGAMoniker,
		PerfTinyTCMoniker,
		PerfTinyTMMoniker,
		PerfTinyTCGAMoniker
	}
	children = PerfPrimary;		/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = PerfPrimary;
					/* The main window should appear
					 * on-screen when the application
					 * is launched. */
}

visMoniker PerfTextMoniker = "Perf";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

PerfPrimary = GenPrimary {
	genStates = default -usable;
					/* do not open maximized */

	children =	PerfView,
			PerfControlsGroup;

	hints = {
		HINT_PRIMARY_NO_FILE_MENU,
		ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE,
		ATTR_GEN_HELP_CONTEXT { char "TOC", 0 },
		/* keep the GenPrimary window snug around the controls */
		HINT_SIZE_WINDOW_AS_DESIRED,
		/* default position close to bottom center of screen */
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
			SpecWinSizePair < mask SWSS_RATIO or PCT_10, \
			                  mask SWSS_RATIO or PCT_75>
		}
	}
}

end Interface;


/*-----------------------------------------------------------------------------
	GenView object
-----------------------------------------------------------------------------*/

start Interface;

/* This GenView object creates a window where the application can display
 * portions of the document as necessary. */

PerfView = GenView {	/* MUST remember state, so will redraw correctly
			 * after restarting. */

	horizAttributes = default +noLargerThanContent, +noSmallerThanContent;
	vertAttributes = default +noLargerThanContent, +noSmallerThanContent;

	/* when the contents of this view (i.e. the document) must be updated,
	 * the UI should send a MSG_EXPOSED to the PerfProcessClass
	 * object. */

	output = process;

	/* set colors */

	backColorR = OVERALL_BACKGROUND_COLOR;
}

end Interface;

/******************************************************************************
			PerfControlsGroup
 *****************************************************************************/

start Interface;

PerfControlsGroup = GenInteraction ignoreDirty {
	children = PerfSettingsBox, PerfCPUSpeedTrigger;
	hints = {
					/* (from Concepts p.387) */
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING
	}
}

PerfCPUSpeedTrigger = GenTrigger ignoreDirty {
	moniker = 'C', "CPU Speed";
	action = MSG_PERF_DISPLAY_CPU_SPEED, process;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}


end Interface;

/******************************************************************************
			Settings Dialog Box
 *****************************************************************************/

start SettingsResource;

PerfSettingsBox = GenInteraction {		/* MUST save state! */
	moniker = 'S', "Settings";

	type = properties;
	visibility = dialog;

	children = PerfOnOffGenItemGroup,
		   PerfMeterGenInteraction,
		   DisplayOptionsCheckboxes,
		   GraphColorsGenInteraction;

	hints = {
		ATTR_GEN_HELP_CONTEXT { char "dbSettings", 0 },
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_DRAW_IN_BOX
	}
}

/******************************************************************************
			On/Off List
 *****************************************************************************/

PerfOnOffGenItemGroup = GenItemGroup ignoreDirty {
	moniker = "Performance Meters:";
	children = OnGenItem, OffGenItem;
	applyMsg = MSG_PERF_SET_ON_OFF_STATE;
	destination = "TO_PROCESS";
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT
	}
}
OnGenItem = GenItem ignoreDirty {
	moniker = "On";
	identifier = "TRUE";
}
OffGenItem = GenItem ignoreDirty {
	moniker = "Off";
	identifier = "FALSE";
}

/******************************************************************************
			Performance Meter Checkboxes
 *****************************************************************************/

PerfMeterGenInteraction = GenInteraction ignoreDirty {
	moniker = "Performance Statistics";
	children = PerfMeterCheckboxes;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

PerfMeterCheckboxes = GenBooleanGroup ignoreDirty {
	children =
		GraphCPU,
		GraphLoadAverage,
		GraphInterrupts,
		GraphContextSwitches,
		GraphHeapAllocated,
		GraphHeapFixed,
		GraphHeapFragmentation,
		GraphSwapMemAllocated,
		GraphSwapFileAllocated,
		GraphSwapOut,
		GraphSwapIn,
		GraphPPPIn,
		GraphPPPOut,
		GraphHandlesFree;
	applyMsg = MSG_PERF_SET_GRAPH_MODE;
	destination = "TO_PROCESS";
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_WRAP_AFTER_CHILD_COUNT {
		    SpecChildCount < 5 >
		}
	}
}

GraphCPU = GenBoolean ignoreDirty {
	moniker = "CPU usage";
	identifier = "mask STM_CPU_USAGE";
}
GraphLoadAverage = GenBoolean ignoreDirty {
	moniker = "Load Average";
	identifier = "mask STM_LOAD_AVERAGE";
}
GraphInterrupts = GenBoolean ignoreDirty {
	moniker = "Interrupts";
	identifier = "mask STM_INTERRUPTS";
}
GraphContextSwitches = GenBoolean ignoreDirty {
	moniker = "Context switches";
	identifier = "mask STM_CONTEXT_SWITCHES";
}
GraphHeapAllocated = GenBoolean ignoreDirty {
	moniker = "Memory Used";
	identifier = "mask STM_HEAP_ALLOCATED";
}
GraphHeapFixed = GenBoolean ignoreDirty {
	moniker = "Fixed Memory";
	identifier = "mask STM_HEAP_FIXED";
}
GraphHeapFragmentation = GenBoolean ignoreDirty {
	moniker = "Heap Fragmentation";
	identifier = "mask STM_HEAP_FRAGMENTATION";
}
GraphSwapMemAllocated = GenBoolean ignoreDirty {
	moniker = "Swap Memory Used";
	identifier = "mask STM_SWAP_MEM_ALLOCATED";
}
GraphSwapFileAllocated = GenBoolean ignoreDirty {
	moniker = "Swap File Used";
	identifier = "mask STM_SWAP_FILE_ALLOCATED";
}
GraphSwapOut = GenBoolean ignoreDirty {
	moniker = "Swap Out";
	identifier = "mask STM_SWAP_OUT";
}
GraphSwapIn = GenBoolean ignoreDirty {
	moniker = "Swap In";
	identifier = "mask STM_SWAP_IN";
}
GraphPPPIn = GenBoolean ignoreDirty {
	moniker = "PPP Receive";
	identifier = "mask STM_PPP_IN";
}
GraphPPPOut = GenBoolean ignoreDirty {
	moniker = "PPP Transmit";
	identifier = "mask STM_PPP_OUT";
}
GraphHandlesFree = GenBoolean ignoreDirty {
	moniker = "Free Handles";
	identifier = "mask STM_HANDLES_FREE";
}

/******************************************************************************
			Display Options
 *****************************************************************************/

/**** this is only needed if we have other display options
DisplayOptionsGenInteraction = GenInteraction ignoreDirty {
	moniker = "Display Options";
	children = DisplayOptionsCheckboxes,
		   ValuesInsideOrBelowGraphGenList;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_DRAW_IN_BOX
	}
}
****/

DisplayOptionsCheckboxes = GenBooleanGroup ignoreDirty {
	moniker = "Display options";
	children = ShowGraphsGenBoolean,
		   ShowValuesGenBoolean,
		   ShowCaptionsGenBoolean;
		   /* DrawVerticalGenBoolean */
		   /* BarChartGenBoolean */

	applyMsg = MSG_PERF_SET_DISPLAY_OPTIONS;
	destination = "TO_PROCESS";

	hints = {
		HINT_DRAW_IN_BOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
				/* or HEIGHT? */
	}
}
ShowGraphsGenBoolean = GenBoolean ignoreDirty {
	moniker = "Show graphs";
	identifier = "mask PDO_SHOW_GRAPHS";
}
ShowValuesGenBoolean = GenBoolean ignoreDirty {
	moniker = "Show values";
	identifier = "mask PDO_SHOW_VALUES";
}
ShowCaptionsGenBoolean = GenBoolean ignoreDirty {
	moniker = "Show captions";
	identifier = "mask PDO_SHOW_CAPTIONS";
}

#if 0	/* UNSUPPORTED FOR NOW */
DrawVerticalGenBoolean = GenBoolean ignoreDirty {
	moniker = "Stack graphs vertically";
	identifier = "mask PDO_VERTICAL";
}
BarChartGenBoolean = GenBoolean ignoreDirty {
	moniker = "Bar chart";
	identifier = "mask PDO_BAR_CHART";
}
#endif

/******************************************************************************
			Values Inside/Below Graph GenList
 *****************************************************************************/

#if 0	/* UNSUPPORTED FOR NOW */
ValuesInsideOrBelowGraphGenList = GenList ignoreDirty {
	moniker = "Place values";
	children = BelowGraphGenItem, InsideGraphGenItem;
	attributes = type exclusive, listMethod, listMethodIsData;
	action = MSG_PERF_SET_VALUE_LOCATION, process;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_PLACE_MONIKER_ABOVE
	}
}
BelowGraphGenItem = GenItem ignoreDirty {
	moniker = "Below graph";
	method = "TRUE";
}
InsideGraphGenItem = GenItem ignoreDirty {
	moniker = "Inside graph";
	method = "FALSE";
}
#endif

/******************************************************************************
			Update Rate GenRange
 *****************************************************************************/
/* Nuked because we in most cases we aren't given data more than once
 * per second. */

#if 0	/* UNSUPPORTED FOR NOW */
UpdateRateRange = GenRange ignoreDirty {
	moniker = "Updates per second";
	minimum = 1;
	maximum = 10;
	increment = 1;
	action = MSG_PERF_SET_UPDATE_RATE, process;
}
#endif

/******************************************************************************
			Graph Colors
 *****************************************************************************/

GraphColorsGenInteraction = GenInteraction ignoreDirty {
	moniker = "Graph Colors";
	children = GraphColorText, PerfColorSelector;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

GraphColorText = GenText ignoreDirty {
	genAttributes = readOnly;
	text =  "To choose the color for a particular graph, " \
		"click on the graph, then choose the color " \
		"below and click on Apply.";
}

PerfColorSelector = ColorSelector ignoreDirty {
	output = process;
	hints = {
		ATTR_GEN_CONTROL_REQUIRE_UI {	/* only show 16 colors */
			word mask CSF_INDEX
		},
		ATTR_GEN_CONTROL_PROHIBIT_UI {	/* only show 16 colors */
			word mask CSF_DRAW_MASK or mask CSF_PATTERN
		},
	}
}

end SettingsResource;
