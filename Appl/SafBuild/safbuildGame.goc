/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari Builder
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include "safbuild.goh"
@include "global.goh"

@classdecl  SBGameCardClass;



/***********************************************************************
 *		MSG_META_START_SELECT
 ***********************************************************************
 * SYNOPSIS:	    Handle a click on the game card
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_META_START_SELECT
{
    XYValueAsDWord pos;
    word x,y;

    retVal->flags = MRF_PROCESSED;
    if (!@call QuestionDB::MSG_QUESTION_DIALOG_ON_SCREEN()) {
	return;
    }
    @call oself::MSG_VIS_GRAB_MOUSE();

    pos = @call oself::MSG_VIS_GET_POSITION();
    x = xPosition-DWORD_X(pos);
    y = yPosition-DWORD_Y(pos);
    /*
     * Set the selection and the anchor to the starting point
     */
    @call oself::MSG_SB_GAME_CARD_SET_SELECTION(x,y,x,y);
    ObjDerefGen(oself);
    pself->SBGCI_anchor.P_x = x;
    pself->SBGCI_anchor.P_y = y;
    @call QuestionDB::MSG_GEN_MAKE_APPLYABLE();
}



/***********************************************************************
 *		MSG_META_PTR
 ***********************************************************************
 * SYNOPSIS:	    Handle a release on the game card
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_META_PTR
{
    XYValueAsDWord pos;

    retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
    if (!@call QuestionDB::MSG_QUESTION_DIALOG_ON_SCREEN()) {
	return;
    }
    retVal->flags = MRF_PROCESSED | MRF_SET_POINTER_IMAGE;
    retVal->ptrImage = @selectPtr;

    if (!(GET_UI_FUNCTIONS_ACTIVE(inputState) & UIFA_SELECT)) {
	return;
    }
    pos = @call oself::MSG_VIS_GET_POSITION();
    @call oself::MSG_SB_GAME_CARD_SET_SELECTION(pself->SBGCI_anchor.P_x, pself->SBGCI_anchor.P_y, xPosition-DWORD_X(pos), yPosition-DWORD_Y(pos));
}


/***********************************************************************
 *		MSG_META_END_SELECT
 ***********************************************************************
 * SYNOPSIS:	    Handle a release on the game card
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_META_END_SELECT
{
    retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
    if (!@call QuestionDB::MSG_QUESTION_DIALOG_ON_SCREEN()) {
	return;
    }
    @call oself::MSG_VIS_RELEASE_MOUSE();
}


/***********************************************************************
 *		MSG_VIS_DRAW
 ***********************************************************************
 * SYNOPSIS:	    Draw
 * PASS:            gstate - handle of GState
 *                  drawFlags - DrawFlags
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_VIS_DRAW
{
    @callsuper();
    @call oself::MSG_SB_GAME_CARD_DRAW_SELECTION(gstate);
}


/***********************************************************************
 *		MSG_SB_GAME_CARD_DRAW_SELECTION
 ***********************************************************************
 * SYNOPSIS:	    Draw the selection
 * PASS:            gs - handle of GState
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/

#define SELECTION_OVERHANG  20

@method SBGameCardClass, MSG_SB_GAME_CARD_DRAW_SELECTION
{
    Rectangle bounds;

    if (!(pself->SBGCI_selection.R_left | pself->SBGCI_selection.R_top | pself->SBGCI_selection.R_right | pself->SBGCI_selection.R_bottom)) {
	return;
    }
    GrSaveState(gs);
    @call oself::MSG_VIS_GET_BOUNDS(&bounds);
    /*
     * change the line width to make the selection more visible
     */
@if 0
    GrSetLineWidth(gs, MakeWWFixed(2));
@endif
    /*
     * set a clip rectangle so we don't draw on someone else
     */
    GrSetClipRect(gs, PCT_REPLACE,
		  bounds.R_left,
		  bounds.R_top,
		  bounds.R_right,
		  bounds.R_bottom);
    /*
     * translate as needed
     */
    GrApplyTranslation(gs, 
		       MakeWWFixed(bounds.R_left),
		       MakeWWFixed(bounds.R_top));
    /*
     * invert
     */
    GrSetMixMode(gs, MM_INVERT);

    GrDrawHLine(gs,
		pself->SBGCI_selection.R_left-SELECTION_OVERHANG,
		pself->SBGCI_selection.R_top,
		pself->SBGCI_selection.R_right+SELECTION_OVERHANG);
    GrDrawHLine(gs,
		pself->SBGCI_selection.R_left-SELECTION_OVERHANG,
		pself->SBGCI_selection.R_bottom,
		pself->SBGCI_selection.R_right+SELECTION_OVERHANG);
    GrDrawVLine(gs,
		pself->SBGCI_selection.R_left,
		pself->SBGCI_selection.R_top-SELECTION_OVERHANG,
		pself->SBGCI_selection.R_bottom+SELECTION_OVERHANG);
    GrDrawVLine(gs,
		pself->SBGCI_selection.R_right,
		pself->SBGCI_selection.R_top-SELECTION_OVERHANG,
		pself->SBGCI_selection.R_bottom+SELECTION_OVERHANG);

    GrRestoreState(gs);
}


/***********************************************************************
 *		MSG_SB_GAME_CARD_SET_SELECTION
 ***********************************************************************
 * SYNOPSIS:	    Set the selection
 * PASS:            (left,top,right,bottom) - bounds
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_SB_GAME_CARD_SET_SELECTION
{
    GStateHandle gs;

    @call QuestionDB::MSG_GEN_MAKE_APPLYABLE();
    gs = @call oself::MSG_VIS_VUP_CREATE_GSTATE();
    /*
     * erase old selection, if any
     */
    @call oself::MSG_SB_GAME_CARD_DRAW_SELECTION(gs);

    /*
     * check for X swapped
     */
    if (left < right) {
	pself->SBGCI_selection.R_left = left;
	pself->SBGCI_selection.R_right = right;
    } else {
	pself->SBGCI_selection.R_right = left;
	pself->SBGCI_selection.R_left = right;
    }
    /*
     * check for Y swapped
     */
    if (top < bottom) {
	pself->SBGCI_selection.R_top = top;
	pself->SBGCI_selection.R_bottom = bottom;
    } else {
	pself->SBGCI_selection.R_bottom = top;
	pself->SBGCI_selection.R_top = bottom;
    }

    /*
     * update the UI
     */
    @send QBLeft::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->SBGCI_selection.R_left, 0);
    @send QBTop::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->SBGCI_selection.R_top, 0);
    @send QBRight::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->SBGCI_selection.R_right, 0);
    @send QBBottom::MSG_GEN_VALUE_SET_INTEGER_VALUE(pself->SBGCI_selection.R_bottom, 0);

    /*
     * draw the new selection
     */
    @call oself::MSG_SB_GAME_CARD_DRAW_SELECTION(gs);

    GrDestroyState(gs);
}



/***********************************************************************
 *		MSG_SB_GAME_CARD_CLOSE_FILE
 ***********************************************************************
 * SYNOPSIS:	    close any files
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	7/1/99		Initial Revision
 *
 ***********************************************************************/
@method SBGameCardClass, MSG_SB_GAME_CARD_CLOSE_FILE
{
    @call oself::MSG_GAME_CARD_SET_BITMAP("");
    if (pself->GCI_fileHan) {
	VMClose(pself->GCI_fileHan, FALSE);
	pself->GCI_fileHan = 0;
    }
}
