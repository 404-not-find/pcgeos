/***************************************************************************
 *  FILE:  SOURCE\CLASSES\CPROCESS.GOH
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   Main Process Class handling routines
 |           Copyright (c) 1998 Breadbox Computer Company
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |                   (LES = Lysle Shields)
 *-----------------------------------------------------------------------*/

@extern chunk NoSlashCmdErrMsg;
@extern chunk CantTalkMsg;
@extern chunk ConnClosedByServerMsg;
@extern chunk StartMODMsg;
@extern chunk EndMODMsg;
@extern chunk JoiningStr;
@extern chunk EntersStr;
@extern chunk LeavesStr;
@extern chunk QuitStr;
@extern chunk KickOtherStr;
@extern chunk KickMeStr;
@extern chunk ChangesNickStr;
@extern chunk NotInChanStr;

/*=========================================================================*
 *  METHODS FOR CLASS:  IRCProcessClass
 *=========================================================================*/

@classdecl IRCProcessClass, neverSaved ;
@classdecl NickGenTextClass;

/*-------------------------------------------------------------------------
 | Routine:  IsValidNick
 *-------------------------------------------------------------------------
 |
 | Description:
 |    makes sure user's nick is valid
 |
 |
 | Inputs:
 |    char nick[10]
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  03/06/99  Created.
 |
 *-----------------------------------------------------------------------*/
Boolean IsValidNick(char nick[10])
{

    /* the first character has to be alpha */
    if (LocalIsAlpha((word) nick[0])) return(TRUE);
    else {
	  UserStandardDialogOptr(
				 0, 0, 0, 0,
				 @BadNickErrMsg,
				 ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
				 (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET)));
	  return(FALSE);
	  }
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_GEN_PROCESS_OPEN_APPLICATION
 *-------------------------------------------------------------------------
 |
 | Description:
 |    On started up, call our startup code
 |
 | Inputs:
 |    AppAttachFlags attachFlags
 |    MemHandle launchBlock
 |    MemHandle extraState
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
 Tab nickTab = {
	  1.25 * 8 * PIXELS_PER_INCH, /* an 1.25" left tab */
	  TL_NONE | TT_LEFT,
	  SDM_100,
	  0,
	  0,
	  NULL
	};

	
    @callsuper() ;


@ifdef COMPILE_OPTION_EXPIRE_ON
    @call ExpireDialog::MSG_EXPIRE_DIALOG_CHECK_DATE(
              @EXPIRE_DATE_MONTH,
              @EXPIRE_DATE_DAY,
              @EXPIRE_DATE_YEAR,
              TRUE) ;
@else
    @send ,forceQueue oself::MSG_IRC_START_CONNECT() ;

@endif

    /* set the tabs */ 
    @call IRCText::MSG_VIS_TEXT_SET_TAB(
				   nickTab, TEXT_ADDRESS_PAST_END, 0);

    @call IRCFontControl::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call IRCPointControl::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* needed to install tiny icon for NDO 3.0 */
    @call IRCApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_GEN_PROCESS_CLOSE_APPLICATION
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Be sure to close the connection before exiting.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    @call oself::MSG_IRC_CONNECTION_SEVERED() ;
    IRCClose() ;

    return @callsuper() ;
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_START_CONNECT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Do all the startup code as follows:
 |        * Bring up the startup dialog.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_START_CONNECT
{
 char	nickStr[10];


    if (UserDoDialog(@IRCConnectDialog) == IC_OK)  {
	   /* check for valid nick */
	   @call ConnectSiteNick::MSG_VIS_TEXT_GET_ALL_PTR(nickStr) ;
	   if (!IsValidNick(nickStr)) return;
	   /* OK - keep going */
	   @send IRCConnectDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	   @call oself::MSG_IRC_DO_CONNECT() ;
    } else {
	   @send IRCConnectDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	   @call IRCApp::MSG_META_QUIT() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_END_CONNECT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Do all the end connection code as follows:
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_END_CONNECT
{

    if (G_sock)  {
        @call oself::MSG_IRC_CONNECTION_SEVERED() ;
        IRCClose() ;

	   /* Might as well immediately ask for a new connection
	    * or let the user exit */
	   @send ,forceQueue oself::MSG_IRC_START_CONNECT() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_DO_CONNECT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Start up the connection and do the appropriate login based on the
 |    connect dialog.
 |    If a connection is made, a polling timer is started.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_DO_CONNECT
{
    MemHandle siteNameBlock ;
    char *p_siteName ;
    MemHandle portBlock ;
    char *p_port ;
    word port ;
    char buffer[100] ;
    char *p_nick;
    MemHandle nickBlock ;
    word accPnt;
    char lowerNick[20] ;
    word i ;
    word j ;

    /* get the access point */
    accPnt = 1;

    /* Determine the site and site's port and do a connection based on */
    /* that. */
    @call IRCApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
    siteNameBlock = @call ConnectSiteName::MSG_VIS_TEXT_GET_ALL_BLOCK(0) ;
    if (siteNameBlock)  {
        p_siteName = MemLock(siteNameBlock) ;

        portBlock = @call ConnectSitePort::MSG_VIS_TEXT_GET_ALL_BLOCK(0) ;
        if (portBlock)  {
            /* Get the port number */
            p_port = MemLock(portBlock) ;
            port = atoi(p_port) ;
            MemUnlock(portBlock) ;
            MemFree(portBlock) ;

		  if (IRCOpen(p_siteName, port, accPnt))  {
                @call oself::MSG_IRC_START_POLL_TIMER() ;
            } else {
                DisplayError() ;
                G_sock = NullHandle ;
            }
        }

        MemUnlock(siteNameBlock) ;
        MemFree(siteNameBlock) ;
    }

    /* Do we have a connection now? */
    if (G_sock)  {
        /* Do all activation code */
        @call oself::MSG_IRC_CONNECTION_ESTABLISHED() ;

        @call ConnectSiteChannel::MSG_VIS_TEXT_GET_ALL_PTR(G_firstChannel) ;

        /* Let's now sign in with our nick name */
        nickBlock = @call ConnectSiteNick::MSG_VIS_TEXT_GET_ALL_BLOCK(0) ;
        if (nickBlock)
            p_nick = MemLock(nickBlock) ;
        else
            p_nick = "Unknown" ;
        strncpy(G_currentNick, p_nick, sizeof(G_currentNick)-1) ;

        /* lowerNick was added for Mike's server to recognize nicks */
	   for (i=j=0; p_nick[i]; i++)
            if (isalpha(p_nick[i]))
                lowerNick[j++] = tolower(p_nick[i]) ;
        lowerNick[j] = '\0' ;

        sprintf(
            buffer,
            "USER %s %s %s :%s\r\nNICK %s\r\n",
            lowerNick,
            lowerNick,
            lowerNick,
            lowerNick,
            p_nick) ;
        IRCSendString(buffer) ;
        if (nickBlock)  {
            MemUnlock(nickBlock) ;
            MemFree(nickBlock) ;
        }
    }

    @call IRCApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_SEND_LINE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Takes the text entered on the line and sends it out.
 |    Determines if it is a message or a command and handles it
 |    correctly.
 |
 | Inputs:
 |    word stateFlags             -- GenText state (ignored)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_SEND_LINE
{
    MemHandle mem ;
    char *p_mem ;
    char talk[600] ;

    /* Grab the text from the text line */
    mem = @call IRCEntry::MSG_VIS_TEXT_GET_ALL_BLOCK(0) ;
    @call IRCEntry::MSG_VIS_TEXT_GET_TEXT_SIZE() ;
    if (mem)  {
        /* Is user entering a command or what? */
        p_mem = MemLock(mem) ;
        if (p_mem[0] == '/')  {
            /* Its a command.  Send it like it is typed */
		  MemLock(OptrToHandle(@NoSlashCmdErrMsg));
		  DisplayMsg(LMemDeref(@NoSlashCmdErrMsg)) ;
		  MemUnlock(OptrToHandle(@NoSlashCmdErrMsg));

	   } else {  /* is is just a post */
            if (G_currentChannel[0] == '\0')  {
			 MemLock(OptrToHandle(@CantTalkMsg));
			 DisplayMsg(LMemDeref(@CantTalkMsg)) ;
			 MemUnlock(OptrToHandle(@CantTalkMsg));
		  } else {
			 sprintf(talk, ":%s PRIVMSG %s :%s\r\n", G_currentNick, G_currentChannel, p_mem) ;
			 IRCSendData(talk, strlen(talk)) ;
                @call oself::MSG_IRC_HANDLE_INCOMING_MESSAGE(talk) ;
            }
        }
        MemUnlock(mem) ;
        MemFree(mem) ;

        @call IRCEntry::MSG_VIS_TEXT_DELETE_ALL() ;
    }
    /* maybe here tell the curdisp to put ins point at the end */
    @send IRCText::MSG_VIS_TEXT_SELECT_END();
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_START_POLL_TIMER
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Starts a timer to poll the socket for incoming data.
 |
 | Inputs:
 |    word stateFlags             -- GenText state (ignored)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_START_POLL_TIMER
{
    if (G_sock)  {
        G_timer =
            TimerStart(
                TIMER_EVENT_ONE_SHOT,
                oself,
                10,
                MSG_IRC_POLL_SOCKET,
                10,
                &G_timer) ;
    } else {
        G_timer = NullHandle ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_POLL_SOCKET
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Message created by a timer and handled to read the IRC socket
 |    connection for incoming data.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
#define POLL_TIMEOUT 1  /* 2/60ths of a second ... very short */
@method IRCProcessClass, MSG_IRC_POLL_SOCKET
{
    char line[512] ;
    word num ;
    word len ;
    char *p_return ;
    Boolean doLoop ;


    /* Read as many lines in the incoming side as possible. */
    do {
        doLoop = FALSE ;
        if (G_sock)  {
            /* Peek as much as possible */
            num = SocketRecv(
                      G_sock,
                      line,
                      sizeof(line)-2,
                      POLL_TIMEOUT,
                      SRF_PEEK,
                      NULL) ;
            if (num > sizeof(line)-2)  {
                num = sizeof(line)-2 ;
            }
            line[num] = '\0' ;
            if (num)  {
breakhere:
                /* Do we have a carriage return & linefeed character? */
                if ((p_return = strchr(line, '\n')) != NULL)  {
                    len = p_return - line ;

                    /* For now, show the line with the linefeed stripped */
                    if (len)  {
                        /* Read in the line now (including \n) */
                        SocketRecv(G_sock, line, len+1, POLL_TIMEOUT, 0, NULL) ;
                        line[len-1] = '\0' ;
                        @call oself::MSG_IRC_HANDLE_INCOMING_MESSAGE(line) ;

                        doLoop = TRUE ;
                    } else {
                        /* skip the linefeed character */
                        SocketRecv(G_sock, line, 1, POLL_TIMEOUT, 0, NULL) ;
                    }
                }
            } else {
                /* If num is zero, it might be an error */
                if ((G_ircError = ThreadGetError()) != SE_NORMAL)  {
                    if (G_ircError != SE_TIMED_OUT)
                        DisplayError() ;

                    if (G_ircError == SE_CONNECTION_CLOSED)  {
                        @call oself::MSG_IRC_CONNECTION_SEVERED() ;
                        SocketClose(G_sock) ;
                        G_sock = NullHandle ;
								MemLock(OptrToHandle(@ConnClosedByServerMsg));
								DisplayMsg(LMemDeref(@ConnClosedByServerMsg)) ;
								MemUnlock(OptrToHandle(@ConnClosedByServerMsg));
						  }
                }
            }
        }
    } while (doLoop) ;

    /* Trigger the timer again if we have not timed out */
    if (G_sock)
        @call oself::MSG_IRC_START_POLL_TIMER() ;
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_HANDLE_INCOMING_MESSAGE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Main routine for processing messages received from the server.
 |
 | Inputs:
 |    char *p_msg                 -- Message to interpret and process
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_HANDLE_INCOMING_MESSAGE
{
    char serverName[80] ;
    char command[20] ;
    word comNum;
    char ourname[50] ;
    char data[80] ;
    char buffer[100] ;
    char *p_all ;
    Boolean dumpRemaining = FALSE ;
    char nick[50] ;
    char who[50] ;
    Boolean sayRemaining = FALSE ;
    char *p_end ;

    p_all = p_msg ;

    /* strip CR and LF */
    p_end = strchr(p_msg, '\r') ;
    if (p_end)
        *p_end = '\0' ;
    p_end = strchr(p_msg, '\n') ;
    if (p_end)
        *p_end = '\0' ;

    /* Skip any spaces at the beginning */
    p_msg = SkipSpaces(p_msg) ;

    /* Does this message start with a server name? */
    nick[0] = '\0' ;
    if (p_msg[0] == ':')  {
	   p_msg = GetSpaceDelimited(p_msg+1, serverName, sizeof(serverName)-1) ;
	   ParseNicknameFromServerString(serverName, nick, sizeof(nick)-1) ;
    } else {
	   serverName[0] = '\0' ;
    }

    /* Let's get the command or command number */
    p_msg = GetSpaceDelimited(p_msg, command, sizeof(command)-1) ;

    /* Only go on if we have a command */
    if (command[0])  {
        /* Only deal with upper case commands */
        LocalUpcaseString(command, strlen(command)) ;

        /* Is the command a number or a string? */
        if (isdigit(command[0]))  {
            comNum = atoi(command) ;
            p_msg = GetSpaceDelimited(p_msg, ourname, sizeof(ourname)-1) ;
            switch (comNum)  {
                case RPL_NOTOPIC:
                case RPL_LIST:
                case RPL_TOPIC:
                    p_msg = GetSpaceDelimited(p_msg, buffer, sizeof(buffer)-1) ;
				break ;
            }
		  switch (comNum)  {
                case RPL_ENDOFNAMES:
                    @call IRCList::MSG_SORT_LIST_UPDATE() ;
                    break ;
			 case RPL_NAMREPLY:
				p_msg = strchr(p_msg, ':') ;
				if (p_msg)  {
                        p_msg++ ;
				    /* Keep adding names */
                        while ((p_msg = GetSpaceDelimited(
                                            p_msg,
                                            buffer,
                                            sizeof(buffer)-1)) != NullHandle)  {
					   if ((buffer[0] == '@') || (buffer[0]=='+'))
						  @call IRCList::MSG_SORT_LIST_ADD_ITEM_QUIETLY(buffer+1) ;
					   else @call IRCList::MSG_SORT_LIST_ADD_ITEM_QUIETLY(buffer) ;
				    if (p_msg[0] == '\0')
                                break ;
				    }
                    }
                    break ;
                case RPL_NOTOPIC:
                    strncpy(G_currentChannel, buffer, sizeof(G_currentChannel)-1) ;
                    @call IRCChannelHeader::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;
				break ;
                case RPL_TOPIC:
                    strncpy(G_currentChannel, buffer, sizeof(G_currentChannel)-1) ;
                    @call IRCChannelHeader::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;
				p_msg = strchr(p_msg, ':') ;
				if ((p_msg) && (*p_msg != '\0'))  {
                        @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR(" [", 0) ;
				    @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR(p_msg+1, 0) ;
                        @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR("]", 0) ;
				}
                    @call IRCChannelHeader::MSG_VIS_TEXT_SELECT_START();
				break ;
/*                case RPL_LIST:
				DisplayText("\rChannel:\t") ;
                    DisplayText(buffer) ;
                    DisplayText(" [") ;
                    DisplayText(p_msg) ;
				DisplayText("]") ;
				break ;
                case RPL_LISTEND:
						  DisplayMsg("Channel:\tEnd of list") ;
                    break ;
                case RPL_LISTSTART:
                    DisplayMsg("Channel:\tStart of list") ;
                    break ;
*/              case RPL_MOTDSTART:
						  MemLock(OptrToHandle(@StartMODMsg));
						  DisplayMsg(LMemDeref(@StartMODMsg)) ;
						  MemUnlock(OptrToHandle(@StartMODMsg));
						  break ;
                case RPL_MOTD:
                    DisplayText("\r\t") ;
                    dumpRemaining = TRUE ;
                    break ;
                case RPL_ENDOFMOTD:
						  MemLock(OptrToHandle(@EndMODMsg));
						  DisplayMsg(LMemDeref(@EndMODMsg)) ;
						  MemUnlock(OptrToHandle(@EndMODMsg));
						  if (G_firstChannel[0])  {
                        sprintf(buffer, "JOIN :%s%s\r\n",
                            (G_firstChannel[0]=='\043')?"":"\043",
                            G_firstChannel) ;
                        IRCSendString(buffer) ;
								MemLock(OptrToHandle(@JoiningStr));
								sprintf(buffer, LMemDeref(@JoiningStr), G_firstChannel) ;
								MemUnlock(OptrToHandle(@JoiningStr));
								DisplayMsg(buffer) ;
								strcpy(G_currentChannel, G_firstChannel) ;
                        @call IRCChannelHeader::MSG_VIS_TEXT_REPLACE_ALL_PTR(G_firstChannel, 0) ;

                    }
                    break ;
                case RPL_NICKNAMEINUSE:
                    /* Require a new nickname to be entered */
                    UserStandardDialogOptr(
                        NullHandle,
                        NullHandle,
                        NullHandle,
                        NullHandle,
				    @MessageNicknameInUse,
                        ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
                         (CDT_WARNING<<CDBF_DIALOG_TYPE_OFFSET))) ;
                    @send ,forceQueue IRCCommandChangeNickname::MSG_GEN_INTERACTION_INITIATE() ;
                    DisplayText("\r\t") ;
                    dumpRemaining = TRUE ;
                    break ;
                default:
                    /* Not sure what we got */
                    /* Just output the data then */
                    if ((comNum == 333) || (comNum == 328))  {
                        /* I don't know what they are, but ignore them. */
                    } else {
                        if (comNum >= 200)
					   sprintf(buffer, "\r%d:\t", comNum) ;
                        else
                            strcpy(buffer, "\r\t") ;
				    DisplayText(buffer) ;
				    dumpRemaining = TRUE ;
                    }
                    break ;
		  }  /* end of command is a number switch */

	   } else {   /* command is a string */
		  if (strcmp(command, "NOTICE") == 0)  {
			 /* Skip our name */
                p_msg = GetSpaceDelimited(p_msg, ourname, sizeof(ourname)-1) ;
			 sayRemaining = TRUE ;
		  } else if (strcmp(command, "PING")==0)  {
					 /* Got the ping message.  Need to respond with PONG */
                GetSpaceDelimited(p_msg, data, sizeof(data)-1) ;
                sprintf(buffer, "PONG %s\r\n", data) ;
                IRCSendString(buffer) ;
		  } else if (strcmp(command, "JOIN")==0)  {
                if (G_showEnterLeaveMsgs)  {
						  MemLock(OptrToHandle(@EntersStr));
						  sprintf(buffer, LMemDeref(@EntersStr), nick) ;
						  MemUnlock(OptrToHandle(@EntersStr));
						  DisplayMsg(buffer) ;
                }
			 if (nick[0] && (strcmp(nick, G_currentNick)))
				@call IRCList::MSG_SORT_LIST_ADD_ITEM(nick) ;
            } else if (strcmp(command, "PART")==0)  {
                if (G_showEnterLeaveMsgs)  {
						  MemLock(OptrToHandle(@LeavesStr));
						  sprintf(buffer, LMemDeref(@LeavesStr), nick) ;
						  MemUnlock(OptrToHandle(@LeavesStr));
						  DisplayMsg(buffer) ;
                }
                @call IRCList::MSG_SORT_LIST_DELETE_ITEM(nick) ;
            } else if (strcmp(command, "QUIT")==0)  {
			 if (G_showEnterLeaveMsgs)  {
						  MemLock(OptrToHandle(@QuitStr));
						  sprintf(buffer, LMemDeref(@QuitStr), nick) ;
						  MemUnlock(OptrToHandle(@QuitStr));
						  DisplayText(buffer) ;
                    dumpRemaining = TRUE ;
                }
                @call IRCList::MSG_SORT_LIST_DELETE_ITEM(nick) ;
            } else if (strcmp(command, "MODE")==0)  {
			 /* Ignore mode commands */
		  } else if (strcmp(command, "KICK")==0)  {
			 p_msg = GetSpaceDelimited(p_msg, data, sizeof(buffer)-1) ;
			 p_msg = GetSpaceDelimited(p_msg, who, sizeof(who)-1) ;
			 MemLock(OptrToHandle(@KickOtherStr));
			 sprintf(buffer, LMemDeref(@KickOtherStr), nick, who) ;
			 MemUnlock(OptrToHandle(@KickOtherStr));
			 if (strcmp(who, G_currentNick)) {
			    /* it was somebody else */
			    DisplayText(buffer) ;
			    dumpRemaining = TRUE ;
			    @call IRCList::MSG_SORT_LIST_DELETE_ITEM(who) ;
			    }
			 else  { /* it was us :-(  */
			    /* close that channel */
			    @send process::MSG_IRC_LEAVE_CHANNEL();
			    /* notify user in a dbox */
				 MemLock(OptrToHandle(@KickMeStr));
				 sprintf(buffer, LMemDeref(@KickMeStr), nick, data);
				 MemUnlock(OptrToHandle(@KickMeStr));
				 UserStandardDialog(0, 0, 0, 0,
					buffer,
					((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
					(CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
	          @call IRCApp::MSG_META_QUIT() ;
			    }

		  } else if (strcmp(command, "NICK")==0)  {
			 MemLock(OptrToHandle(@ChangesNickStr));
			 sprintf(buffer, LMemDeref(@ChangesNickStr), nick) ;
			 MemUnlock(OptrToHandle(@ChangesNickStr));
			 DisplayText(buffer) ;
			 dumpRemaining = TRUE ;
			 p_msg = strchr(p_msg, ':') ;
			 if (p_msg)  {
				p_msg++ ;
				@call IRCList::MSG_SORT_LIST_RENAME_ITEM(nick, p_msg) ;
				if (LocalCmpStringsNoCase(
                            p_msg,
                            G_currentNick,
                            sizeof(G_currentNick))==0)  {
                        strncpy(G_currentNick, p_msg, sizeof(G_currentNick)) ;
                    }
                    p_msg-- ;
                }
            } else if (strcmp(command, "PRIVMSG")==0)  {
                /* Get the receiver of the message */
                /* Next should be our name or channel (our name */
                /* represents a private msg) */
			 p_msg = GetSpaceDelimited(p_msg, ourname, sizeof(ourname)-1) ;

                /* If starts with # then it is the name of a room */
                /* Check here if it is our room.  Else ignore */
                /* TBD !!! */

                /* To get rid of private messages, only output messages to */
                /* the room. */
                if (ourname[0] == '\043')
                    sayRemaining = TRUE ;
                else  {
				sayRemaining = FALSE ;
			 }

		  } else if (strcmp(command, "TOPIC")==0)  {
			 p_msg = GetSpaceDelimited(p_msg, buffer, sizeof(buffer)-1) ;
			 if (p_msg)  {
                    strncpy(G_currentChannel, buffer, sizeof(G_currentChannel)-1) ;
				@call IRCChannelHeader::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;

				p_msg = strchr(p_msg, ':') ;
				if ((p_msg) && (*p_msg != '\0'))  {
                        @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR(" [", 0) ;
                        @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR(p_msg+1, 0) ;
                        @call IRCChannelHeader::MSG_VIS_TEXT_APPEND_PTR("]", 0) ;
				}
				@call IRCChannelHeader::MSG_VIS_TEXT_SELECT_START();
                }
            } else {
                DisplayMsg("???") ;
                DisplayMsg(p_all) ;
                dumpRemaining = TRUE ;
            }
        }

	   if (sayRemaining)  {  /*  PRIVMSG */
            p_msg = strchr(p_msg, ':') ;
            if (p_msg)  {
                p_msg++ ;
                if (strncmp(p_msg, "\001ACTION", 7) == 0)  {
				sprintf(buffer, "\r%s", nick) ;
                    p_msg += 7 ;
                    dumpRemaining = TRUE ;
                } else {
				sprintf(buffer, "\r%s:\t ", nick) ;
                }
			 DisplayText(buffer) ;
		   /*	 DisplayMsg(p_msg) ;  */
			 DisplayText(p_msg) ;
		  }
        }
	   if (dumpRemaining)
            if (p_msg)
                OutputTextPastColon(p_msg) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_CHANGE_NICKNAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Verifies that the requested nickname is legal and sends a command
 |    to change it.
 |
 | Inputs:
 |    optr trigger                -- Trigger that caused event
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/08/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_CHANGE_NICKNAME
{
    char name[20] ;
    char command[40] ;

    @call IRCNewNickname::MSG_VIS_TEXT_GET_ALL_PTR(name) ;
    if (!IsValidNick(name)) return;

    /* Let's try changing it by sending the /NICK <newnick> command */
    sprintf(command, "NICK %s\r\n", name) ;
    IRCSendString(command) ;

    /* and change our name internally - jfh */
    strcpy(G_currentNick, name);
	   
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_CONNECTION_ESTABLISHED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Take care of any tasks that occur when we just connect (like enabling
 |    UI features).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/08/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_CONNECTION_ESTABLISHED
{
    /* No channel yet. */
    G_currentChannel[0] = '\0' ;

    /* Save the settings since we connected */
    @call IRCPrimary::MSG_META_SAVE_OPTIONS();
    InitFileCommit() ;

    /* Enable UI features */
    @call IRCCommandChangeNickname::MSG_GEN_SET_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;
    @call IRCCommandDisconnect::MSG_GEN_SET_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;

    /* Disable UI features */
    @call IRCCommandConnect::MSG_GEN_SET_NOT_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;
}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_CONNECTION_SEVERED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Take care of any tasks that occur when we just disconnect (like
 |    disabling UI features).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/08/98  Created.
 |
 *-----------------------------------------------------------------------*/
@method IRCProcessClass, MSG_IRC_CONNECTION_SEVERED
{
	 MemLock(OptrToHandle(@NotInChanStr));
	 @call IRCChannelHeader::MSG_VIS_TEXT_REPLACE_ALL_PTR(LMemDeref(@NotInChanStr), 0) ;
	 MemUnlock(OptrToHandle(@NotInChanStr));
	 @call IRCList::MSG_SORT_LIST_CLEAR() ;

    /* Disable UI features */
    @call IRCCommandChangeNickname::MSG_GEN_SET_NOT_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;
    @call IRCCommandDisconnect::MSG_GEN_SET_NOT_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;

    /* Enable UI features */
    @call IRCCommandConnect::MSG_GEN_SET_ENABLED(
              VUM_DELAYED_VIA_UI_QUEUE) ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for NickGenTextClass
 *
 * PARAMETERS:   	char		character
 *
 * DESCRIPTION:	traps the . and /
 *                  see the comment in the UI file...
 *
 *
 ***********************************************************************/
@extern method NickGenTextClass, MSG_META_KBD_CHAR
{

    if (((character == C_PERIOD) || (character == C_SLASH)) &&
		(flags & CF_FIRST_PRESS)) return;

    else  @callsuper();

}


/***************************************************************************
 *  END OF FILE:  SOURCE\CLASSES\CPROCESS.GOH
 ***************************************************************************/

