/***************************************************************************
 *  FILE:  SOURCE\ROUTINES\IRC.GOH
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   IRC data transfer routines.
 |           Copyright (c) 1998 Breadbox Computer Company
 |
 | Description:
 |    Does the work of opening, closing, sending, and receiving IRC
 |    data via the Socket connection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |                   (LES = Lysle Shields)
 *-----------------------------------------------------------------------*/

@extern chunk SearchingStr;
@extern chunk FoundAddrStr;
@extern chunk StartConnStr;
@extern chunk ConnEstabStr;
@extern chunk ClosingStr;
@extern chunk ClosedStr;

/*-------------------------------------------------------------------------
 | Routine:  IRCSendData
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Send data out the IRC socket port.
 |
 | Inputs:
 |    byte *p_data                -- array of bytes to send
 |    word len                    -- Number of bytes to send
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  06/10/99  added Latin code page
 |
 *-----------------------------------------------------------------------*/
void IRCSendData(char *p_data, word len)
{
    LocalGeosToCodePage(p_data, len, CODE_PAGE_LATIN_1, '.');
    SocketSend(G_sock, p_data, len, NULL, 0);
}

/*-------------------------------------------------------------------------
 | Routine:  IRCSendString
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Send a null terminated string out the port.
 |
 | Inputs:
 |    byte *p_text                -- Null terminated text
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
void IRCSendString(char *p_str)
{
    IRCSendData(p_str, strlen(p_str)) ;
}

/*-------------------------------------------------------------------------
 | Routine:  IRCOpen
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Start an IRC connection.
 |
 | What's happening:
 |    The routine basically blocks while trying to open the IRC connection
 |    and may take some time doing it.  The following steps are taken while
 |    outputting messsages to the display object (in the UI thread):
 |        * Resolve the name of the port connection into an ip address
 |        * Use the ip number of open a connection
 |
 | Inputs:
 |    char *siteName              -- Site to connect to.
 |    word sitePort               -- Site's port number
 |    word accPnt                 -- Access Point
 |
 | Outputs:
 |    Boolean                     -- TRUE if connection established
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
Boolean IRCOpen(char *siteName, word sitePort, word accPnt)
{
    word error ;

    hostname.UTA_link.TAPEA_linkSize =
      sizeof(hostname.UTA_link.TAPEA_linkType) +
      sizeof(hostname.UTA_link.TAPEA_accPntID);

	 MemLock(OptrToHandle(@SearchingStr));
	 DisplayMsg(LMemDeref(@SearchingStr)) ;
	 MemUnlock(OptrToHandle(@SearchingStr));

    hostname.UTA_link.TAPEA_linkType = LT_ID;

    hostname.UTA_link.TAPEA_accPntID = accPnt;

    hostaddr.RTA_sock.SA_port.SP_port = sitePort ;
    strncpy(hostname.UTA_ip, siteName, MAX_IP_ADDR_STRING_LENGTH);

    hostaddr.RTA_sock.SA_addressSize =
        SocketResolve(
            IRC_DOMAIN,
            &hostname,
            sizeof(hostname.UTA_link) + strlen(hostname.UTA_ip),
            &hostaddr.RTA_addr,
            sizeof(hostaddr.RTA_addr));

    if (!hostaddr.RTA_sock.SA_addressSize)  {
        G_ircError = ThreadGetError() ;
        return FALSE ;
    }
	 MemLock(OptrToHandle(@FoundAddrStr));
	 DisplayMsg(LMemDeref(@FoundAddrStr)) ;
	 DisplayMsg(LMemDeref(@StartConnStr)) ;
	 MemUnlock(OptrToHandle(@FoundAddrStr));
	 G_sock = SocketCreate(SDT_STREAM);
    error = SocketConnect(G_sock, &hostaddr, IRC_TIMEOUT);
    if (error != SE_NORMAL)  {
        SocketClose(G_sock) ;
        G_ircError = error ;
        return FALSE ;
    }
	 MemLock(OptrToHandle(@ConnEstabStr));
	 DisplayMsg(LMemDeref(@ConnEstabStr)) ;
	 MemUnlock(OptrToHandle(@ConnEstabStr));


    return TRUE ;
}

/*-------------------------------------------------------------------------
 | Routine:  IRCClose
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Close an IRC connection.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/
void IRCClose(void)
{
    Socket sock ;

    if (G_sock)  {
		  MemLock(OptrToHandle(@ClosingStr));
		  DisplayMsg(LMemDeref(@ClosingStr)) ;
		  MemUnlock(OptrToHandle(@ClosingStr));
		  IRCSendString("QUIT\r\n") ;
        sock = G_sock;
        G_sock = NullHandle ;
        SocketClose(sock) ;
		  MemLock(OptrToHandle(@ClosedStr));
		  DisplayMsg(LMemDeref(@ClosedStr)) ;
		  MemUnlock(OptrToHandle(@ClosedStr));
	 }
}

/***************************************************************************
 *  END OF FILE:  SOURCE\ROUTINES\IRC.GOH
 ***************************************************************************/

