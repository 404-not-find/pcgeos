/***********************************************************************
 *
 *
 * PROJECT: Breadbox Test Generator
 * FILE:        tgen.goh
 * AUTHOR:  John F. Howard,   08/02
 *
 * DESCRIPTION:
 *  This file has the global variables
 *      and structures for the application.    
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <gstring.h>
#include <ansi/string.h>
@include <iacp.goh>     /* to launch calculator */
#include <token.h>  /* for assigning doc token */
#include <math.h>
#include <initfile.h>
#include <basicdb.h>
@include <Objects\treport.goh>

/*
 ***************************************************************************
 *      Global variables and definitions
 ***************************************************************************
 */

/* constants for ack d boxes */
#define ACK_YES 1
#define ACK_NO 2

#define APP_CALC 1
#define APP_PLAN 2

#define QTYPE_MC 1
#define QTYPE_TF 2
#define QTYPE_FILL 3

#define MC_SELECT_A 1
#define MC_SELECT_B 2
#define MC_SELECT_C 3
#define MC_SELECT_D 4
#define MC_SELECT_E 5
#define MC_SELECT_F 6

#define TF_TRUE 1
#define TF_FALSE 2

#define MAX_QUESTION_LENGTH 500
#define MAX_CHOICE_LENGTH 250
#define MAX_TITLE_LENGTH 100

#define MAX_NUM_QUESTIONS 500
#define MAX_TEST_QUESTIONS 150

/* for the bank index callbacks */
#define VFC_TYPE 1
#define VFC_ALPHA 2

/* category constants for the data fields */
/* CAUTION - do not add anything between CAT_MCCHOICE_A and
 *           CAT_MCCHOICE_F!!!!! */
#define FIELD_CAT_Q_TYPE 1
#define FIELD_CAT_QUESTION 2
#define FIELD_CAT_MCCHOICE_A 3
#define FIELD_CAT_MCCHOICE_B 4
#define FIELD_CAT_MCCHOICE_C 5
#define FIELD_CAT_MCCHOICE_D 6
#define FIELD_CAT_MCCHOICE_E 7
#define FIELD_CAT_MCCHOICE_F 8
#define FIELD_CAT_ANSWER 9
#define FIELD_CAT_FREE_ANS_LINES 10 
#define FIELD_CAT_WEIGHT 11   /* not used yet */
/*  next 4 added for protocol 1.1 files */
#define FIELD_CAT_STU_ANS 12
#define FIELD_CAT_ANS_WRONG 13
#define FIELD_CAT_ANS_RIGHT 14
#define FIELD_CAT_BANK_ID 15
#define FIELD_CAT_LAST 16


#define GEN_YES 1
#define GEN_NO 2

#define SO_NONE 1
#define SO_TYPE 2
#define SO_ALPHA 3

#define TO_PAPER 1
#define TO_PC 2

/* constants from TAide for its database files  */
#define STU_L_NAME  1
#define STU_F_NAME  2
#define STU_M_NAME  3
#define STU_NUMBER  4
#define STU_GRADES_1  35
#define STU_GRADE_SUM_1  41

#define NAME_SIZE 40
#define MAX_GRADE_PDS 6
#define GRADE_DESCRIPT 50
#define DATE_SIZE 12
#define MAX_ELEMENTS 100
#define NO_GRADE 255
#define MAX_GRADE_TYPES 10
#define NO_SUMMARY 0xffffffff
#define EQUAL_WEIGHT 255
#define VFC_NAME 1

#define GRADE_TYPES 204
#define GRADE_ELEM_1 300


/* and a few lonely globals */
extern word g_numQuestions;
extern VMFileHandle g_testFileHandle;
extern VMFileHandle  g_taFileHandle;
extern word g_height;
extern word g_eWidth;
extern word g_vSep;
extern FontID g_fontID;
extern word g_sysPointSize;
extern Boolean g_showingStats;

/*
 ***************************************************************************
 *      Prototypes
 ***************************************************************************
 */

MemHandle MakeNewRecord (FileHandle docFile, VMBlockHandle whichDB);
Boolean SaveQandAData (MemHandle openRecMH);
sword _pascal TypesIndexCallBack (MemHandle m1,
						  MemHandle m2,
						  word valueForCallback);
void SetQADBoxType(byte type);

word AckDBox (char* string1, char* string2, optr ackMsg);
void NotifyDBox (char* string1, optr notifyMsg);


/*
 ***************************************************************************
 *      Structure Definitions
 ***************************************************************************
 */


/* a structure to hold the various globals that we'll
   need across app closings */
typedef struct {

	 word						VMMS_numQuestions;
	 word						VMMS_numMCQuestions;
	 word						VMMS_numTFQuestions;
	 word						VMMS_numFreeQuestions;
	 VMBlockHandle			VMMS_bankDBHan;
	 VMBlockHandle       VMMS_bankTypeIndex;
	 VMBlockHandle       VMMS_bankAlphaIndex;
	 VMBlockHandle       VMMS_bankCurrentIndex;
	 char						VMMS_titleLine1[MAX_TITLE_LENGTH];
	 char						VMMS_titleLine2[MAX_TITLE_LENGTH];
	 char						VMMS_titleLine3[MAX_TITLE_LENGTH];

} VMMapStruct;

/* a map structure for computer test header stuff (shared with the test
	taking app) */
typedef struct {

	 word						TMS_numQuestions;
	 word						TMS_ansQuestions;
	 VMBlockHandle			TMS_testDBHan;
	 char						TMS_nameLine[MAX_TITLE_LENGTH];
	 char						TMS_dateLine[MAX_TITLE_LENGTH];
	 char						TMS_titleLine1[MAX_TITLE_LENGTH];
	 char						TMS_titleLine2[MAX_TITLE_LENGTH];
	 char						TMS_titleLine3[MAX_TITLE_LENGTH];
	 Boolean					TMS_finished;
    Boolean					TMS_studentGradable;
	 char						TMS_bankName[FILE_LONGNAME_BUFFER_SIZE];

} TestMapStruct;

/* the Teachers Aide VMMap structure */
typedef struct {
	 dword               TAVMMS_numStudents;
	 VMBlockHandle       TAVMMS_StuDBHan;
	 VMBlockHandle       TAVMMS_stuNameIndex;
	 VMBlockHandle       TAVMMS_stuNumIndex;
	 VMBlockHandle       TAVMMS_curStuIndex;
	 VMBlockHandle       TAVMMS_stuDefDBHan;
	 VMBlockHandle       TAVMMS_delStuDBHan;  /* not used */
	 dword               TAVMMS_numDelStudents;  /* not used */
	 ChunkHandle     TAVMMS_pickListChunkArray[4];
	 ChunkHandle     TAVMMS_gradeTypesChunkArray;
	 ChunkHandle     TAVMMS_gradeElemChunkArray[MAX_GRADE_PDS];
	 ChunkHandle     TAVMMS_attCodeChunkArray;
	 ChunkHandle     TAVMMS_holidayChunkArray;
	 char                TAVMMS_extraFieldName[15];
	 word                 TAVMMS_gpStart[MAX_GRADE_PDS];
	 word                 TAVMMS_gpEnd[MAX_GRADE_PDS];
	 word                TAVMMS_curNumAttDays;
	 word                TAVMMS_curStuNoteSortPref;
	 Boolean         TAVMMS_showWeekends;
	 Boolean         TAVMMS_showSemesters;
	 word                TAVMMS_curGradePd;
	 word                TAVMMS_curModule;
	 word                TAVMMS_numGradePds;
	 word                TAVMMS_numTypes;
	 word                TAVMMS_numElements[MAX_GRADE_PDS];
	 VMBlockHandle        TAVMMS_seatingLayout ;
	 char			TAVMMS_teacher[NAME_SIZE];
	 char			TAVMMS_school[NAME_SIZE];
	 char			TAVMMS_system[NAME_SIZE];
} TAVMMapStruct;

/* a structure to hold the grade elements info from Teacher's Aide*/
typedef struct {
	 char                GES_type[NAME_SIZE];
    char                 GES_description[GRADE_DESCRIPT];
    char                 GES_date[DATE_SIZE];
    word                GES_weight;
} GradeElementStruct;

/* a structure to hold the grade types info */
typedef struct {

    char                GTS_type[NAME_SIZE];
    word                GTS_weight[MAX_GRADE_PDS];

} GradeTypeStruct;



/*
 ***************************************************************************
 *      Class & Message Definitions
 ***************************************************************************
 */
@class  TGenProcessClass, GenProcessClass ;
	/* General Messages */
	@message void MSG_TGEN_PROCESS_LAUNCH_TOOL(word whichApp);
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_PROCESS_QTYPE_APPLY;

   @endc

/* This class is for checking entry win close */
@class	TGenQAInteractionClass, GenInteractionClass;
@endc

/* This class is for checking grading win close */
@class	TGGradeInteractionClass, GenInteractionClass;
@endc

/* This class is for checking TA win close */
@class	TGTAInteractionClass, GenInteractionClass;
@endc

/* This class is to get the size of the summary question dlist*/
@class   TGenGenDynamicListClass  GenDynamicListClass;
@endc

@class	TGenDocumentGroupClass	GenDocumentGroupClass;
@endc

@class  TGenDocumentClass, GenDocumentClass;
	/* instance data to store doc file specific info */
	@instance VMBlockHandle TGDI_bankDBHan = NullHandle;
	@instance VMBlockHandle TGDI_bankTypeIndex = NullHandle;
	@instance VMBlockHandle TGDI_bankAlphaIndex = NullHandle;
	@instance VMBlockHandle TGDI_bankCurrentIndex = NullHandle;
	@instance word TGDI_numMCQuestions = 0;
	@instance word TGDI_numTFQuestions = 0;
	@instance word TGDI_numFreeQuestions = 0;
	@instance word TGDI_selectedQ = GIGS_NONE;
	@instance MemHandle TGDI_openEntryRecMH = NullHandle;
	@instance Boolean TGDI_isNewEntry = FALSE;
	@instance Boolean TGDI_testGenerated = FALSE;
	@instance word TGDI_qArray[MAX_NUM_QUESTIONS];
	@instance char TGDI_titleLine1[MAX_TITLE_LENGTH];
	@instance char TGDI_titleLine2[MAX_TITLE_LENGTH];
	@instance char TGDI_titleLine3[MAX_TITLE_LENGTH];
	@instance VMBlockHandle TGDI_testDBHan = 0;

	/* General Messages */
	@message (GEN_TRIGGER_ACTION) MSG_TGEN_DOCUMENT_OPEN_QA_FORM;
	@message void MSG_TGEN_DOCUMENT_SAVE_ENTRY();
	@message void MSG_TGEN_DOCUMENT_DELETE_QUESTION();
	@message (GEN_DYNAMIC_LIST_QUERY_MSG)
									 MSG_TGEN_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY;
	@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_TGEN_DOCUMENT_SUMMARY_DLIST_STATUS;
	@message void MSG_TGEN_DOCUMENT_SUMMARY_DLIST_DBL_CLICK();
	@message void MSG_TGEN_DOCUMENT_SHOW_STATS_TOGGLE();

	@message (GEN_TRIGGER_ACTION) MSG_TGEN_DOCUMENT_OPEN_GENERATE;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_TEST_TYPE_APPLY;
	@message void MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS(word totalQs,
																		word testQs,
																		Boolean again,
																		word numSel,
																		word gradable);
	@message void MSG_TGEN_DOCUMENT_GENERATE_COMMON();
	@message (GEN_TEXT_REPORT_GENERATE) MSG_TGEN_DOCUMENT_GENERATE_PAPER_TEST;
	@message Boolean MSG_TGEN_DOCUMENT_GENERATE_PC_TEST();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_NUM_Q_APPLY;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_SEL_Q_APPLY;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_TITLE_BLOCK_APPLY;
	@message void MSG_TGEN_DOCUMENT_SET_TITLE_BLOCK();

	@message void MSG_TGEN_DOCUMENT_OPEN_GRADE_SEL();
	@message void MSG_TGEN_DOCUMENT_OPEN_GRADE();
	@message (GEN_DYNAMIC_LIST_QUERY_MSG)
	                                MSG_TGEN_DOCUMENT_MARK_DLIST_MONIKER_QUERY;
	@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG)
											  MSG_TGEN_DOCUMENT_GRADE_SELECTOR_ACTION;
	@message void MSG_TGEN_DOCUMENT_MARK_DLIST_DBL_CLICK();
	@message void MSG_TGEN_DOCUMENT_ENTER_GRADE();
	@message void MSG_TGEN_DOCUMENT_SAVE_STATS();
	@message void MSG_TGEN_DOCUMENT_OPEN_ADD_DATA();
	@message void MSG_TGEN_DOCUMENT_DELETE_DATA();
	@message void MSG_TGEN_DOCUMENT_ENTER_STATS_DATA();
	@message void MSG_TGEN_DOCUMENT_ERASE_STATS();

	@message void MSG_TGEN_DOCUMENT_OPEN_TAFILE_SEL();
	@message void MSG_TGEN_DOCUMENT_OPEN_TAFILE();
	@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG)
											  MSG_TGEN_DOCUMENT_TAFILE_SELECTOR_ACTION;
	@message (GEN_DYNAMIC_LIST_QUERY_MSG)
										 MSG_TGEN_DOCUMENT_TANAME_DLIST_MONIKER_QUERY;
	@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_TGEN_DOCUMENT_TANAME_DLIST_STATUS;
	@message (GEN_DYNAMIC_LIST_QUERY_MSG)
										 MSG_TGEN_DOCUMENT_TAGRELEM_DLIST_MONIKER_QUERY;
	@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_TGEN_DOCUMENT_TAGRELEM_DLIST_STATUS;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_TAGP_APPLY;
	@message void MSG_TGEN_DOCUMENT_SHOW_EXISTING_GRADE();
	@message void MSG_TGEN_DOCUMENT_SAVE_GRADE_TO_TA();

	@message void MSG_TGEN_DOCUMENT_OPEN_SORT_OPTS();
	@message void MSG_TGEN_DOCUMENT_CHANGE_SORT();

	@message void MSG_OPEN_EXPORT();
	@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_EXP_Q_SEL_BOOLEAN_STATUS;
	@message void MSG_EXPORT_TEST_DATA();
	@message void MSG_OPEN_SELECT_QUESTIONS();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SEL_Q_DLIST_APPLY;
	@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_SEL_Q_DLIST_MONIKER_QUERY;
	@message void MSG_SEL_Q_CLEAR_ALL();
	@message void MSG_OPEN_IMPORT();
	@message void MSG_IMPORT_TEST_DATA();

@endc  /* TGenDocumentClass */



