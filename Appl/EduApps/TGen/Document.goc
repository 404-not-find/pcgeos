/***************************************************************************
 *  FILE:           document.goc
 *  PROJECT:        Breadbox Test Generator
 *  DESCRIPTION:    This file has methods for document manipulation
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"


/*
 ***************************************************************************
 *      Class Declarations
 ***************************************************************************
 */

@classdecl  TGenDocumentClass;

/* we have some methods in the genr8.goc file */
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_GENERATE;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_TEST_TYPE_APPLY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_COMMON;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_PAPER_TEST;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_PC_TEST;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_NUM_Q_APPLY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_SEL_Q_APPLY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_TITLE_BLOCK_APPLY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SET_TITLE_BLOCK;

/* and in the grade.goc file */
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_GRADE_SEL;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_GRADE;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_MARK_DLIST_MONIKER_QUERY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GRADE_SELECTOR_ACTION;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_MARK_DLIST_DBL_CLICK;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_ENTER_GRADE;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SAVE_STATS;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_ADD_DATA;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_DELETE_DATA;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_ENTER_STATS_DATA;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_ERASE_STATS;

/* and in the talink.goc file */
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_TAFILE_SEL;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_TAFILE;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TAFILE_SELECTOR_ACTION;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TANAME_DLIST_MONIKER_QUERY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TANAME_DLIST_STATUS;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TAGRELEM_DLIST_MONIKER_QUERY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TAGRELEM_DLIST_STATUS;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_TAGP_APPLY;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SHOW_EXISTING_GRADE;
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SAVE_GRADE_TO_TA;

/* and in the export.goc file */
@extern method TGenDocumentClass, MSG_OPEN_EXPORT;
@extern method TGenDocumentClass, MSG_EXP_Q_SEL_BOOLEAN_STATUS;
@extern method TGenDocumentClass, MSG_EXPORT_TEST_DATA;
@extern method TGenDocumentClass, MSG_OPEN_SELECT_QUESTIONS;
@extern method TGenDocumentClass, MSG_SEL_Q_DLIST_APPLY;
@extern method TGenDocumentClass, MSG_SEL_Q_DLIST_MONIKER_QUERY;
@extern method TGenDocumentClass, MSG_SEL_Q_CLEAR_ALL;

/* and in the import.goc file */
@extern method TGenDocumentClass, MSG_OPEN_IMPORT;
@extern method TGenDocumentClass, MSG_IMPORT_TEST_DATA;

@classdecl  TGenGenDynamicListClass;

/*********************************************************************
 *  the globals declared as extern in .goh
 ********************************************************************
*/
 word 	g_numQuestions = 0;
 VMFileHandle g_testFileHandle = 0;
 VMFileHandle g_taFileHandle = 0;
 word		g_height = 0;
 word 	g_eWidth = 0;
 word 	g_vSep = 0;
 FontID	g_fontID = 0;
 word		g_sysPointSize = 0;
 Boolean g_showingStats = FALSE;

 /* global to this file only */
 word		g_dListWidth = 0;

/*
 ***************************************************************************
 *      Code for Document Manipulation
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE: MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for
 *                                    TGenDocumentClass
 *
 *
 * DESCRIPTION: Called to initialize a newly created document.
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
 VMMapStruct		*VMmapPtr;
 MemHandle			mh;
 VMBlockHandle		vmbh;
 BasicDBError		error;
 Boolean				badDB = FALSE;


	/* create the question bank database */
	pself->TGDI_bankDBHan = 0;
	error = BasicDBCreate(pself->GDI_fileHandle, &pself->TGDI_bankDBHan, FALSE);
	if (error)  {
		NotifyDBox(0, @BDBCreateError);
		badDB = TRUE;
		}
	else {
		/* create the type index array */
		error = BasicDBIndexCreate(pself->GDI_fileHandle,
							pself->TGDI_bankDBHan,
							BDBILF_AUTO_UPDATE,
							VFC_TYPE,
							&pself->TGDI_bankTypeIndex);
		if (error) {
			NotifyDBox(0, @BDBCreateIndexError);
			badDB = TRUE;
			}
		/* and the alpha index array */
		error = BasicDBIndexCreate(pself->GDI_fileHandle,
							pself->TGDI_bankDBHan,
							BDBILF_AUTO_UPDATE,
							VFC_ALPHA,
							&pself->TGDI_bankAlphaIndex);
		if (error) {
			NotifyDBox(0, @BDBCreateIndexError);
			badDB = TRUE;
			}
		}


	if (!badDB) {
		/* ok - we have our DB and indices so carry on... */
		g_numQuestions = 0;
		pself->TGDI_numMCQuestions = 0;
		pself->TGDI_numTFQuestions = 0;
		pself->TGDI_numFreeQuestions = 0;
		pself->TGDI_titleLine1[0] = 0;
		pself->TGDI_titleLine2[0] = 0;
		pself->TGDI_titleLine3[0] = 0;

		/* start out with no sort */
		pself->TGDI_bankCurrentIndex = 0;

		/* now a VM Map Block */
		vmbh = VMAlloc(pself->GDI_fileHandle, sizeof(VMMapStruct), 0);
		VMSetMapBlock(pself->GDI_fileHandle, vmbh);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);

		/* store some globals we'll need */
		VMmapPtr->VMMS_bankDBHan = pself->TGDI_bankDBHan;
		VMmapPtr->VMMS_bankTypeIndex = pself->TGDI_bankTypeIndex;
		VMmapPtr->VMMS_bankAlphaIndex = pself->TGDI_bankAlphaIndex;
		VMmapPtr->VMMS_bankCurrentIndex = 0;
		VMmapPtr->VMMS_numQuestions = 0;
		VMmapPtr->VMMS_numMCQuestions = 0;
		VMmapPtr->VMMS_numTFQuestions = 0;
		VMmapPtr->VMMS_numFreeQuestions = 0;
		VMmapPtr->VMMS_titleLine1[0] = 0;
		VMmapPtr->VMMS_titleLine2[0] = 0;
		VMmapPtr->VMMS_titleLine3[0] = 0;


		VMDirty(mh);
		VMUnlock(mh);
		}

	return(badDB);
}

/***********************************************************************
 *
 * MESSAGE: MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for
 *                                    TGenDocumentClass
 *
 *
 * DESCRIPTION: Called to initialize a newly opened document.
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
 VMMapStruct        *VMmapPtr;
 MemHandle      mh;
 VMBlockHandle      vmbh;
 char				numStr[11];


	/* get our VMmap block */
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
	/* retrieve saved info to get started */
	pself->TGDI_bankDBHan = VMmapPtr->VMMS_bankDBHan;
	pself->TGDI_bankTypeIndex = VMmapPtr->VMMS_bankTypeIndex;
	pself->TGDI_bankAlphaIndex = VMmapPtr->VMMS_bankAlphaIndex;
	pself->TGDI_bankCurrentIndex = VMmapPtr->VMMS_bankCurrentIndex;
	g_numQuestions = VMmapPtr->VMMS_numQuestions;
	pself->TGDI_numMCQuestions = VMmapPtr->VMMS_numMCQuestions;
	pself->TGDI_numTFQuestions = VMmapPtr->VMMS_numTFQuestions;
	pself->TGDI_numFreeQuestions = VMmapPtr->VMMS_numFreeQuestions;
	strcpy(pself->TGDI_titleLine1, VMmapPtr->VMMS_titleLine1);
	strcpy(pself->TGDI_titleLine2, VMmapPtr->VMMS_titleLine2);
	strcpy(pself->TGDI_titleLine3, VMmapPtr->VMMS_titleLine3);

	VMUnlock(mh);

	pself->TGDI_openEntryRecMH = 0;
	pself->TGDI_selectedQ = GIGS_NONE;

	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
	/* and update the ui */
	UtilHex32ToAscii(numStr, (dword)pself->TGDI_numMCQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBMCNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	UtilHex32ToAscii(numStr, (dword)pself->TGDI_numTFQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBTFNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	UtilHex32ToAscii(numStr, (dword)pself->TGDI_numFreeQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBFINumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	UtilHex32ToAscii(numStr, (dword)g_numQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBTotNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);


}

/***********************************************************************
 *
 * MESSAGE: MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT for
 *                                    TGenDocumentClass
 *
 *    Return: Boolean
 * 	If the application successfully updates the document,
 *			it should return zero 
 *
 * DESCRIPTION:   Takes a Proto 1.0 document (if there are any out there)
 * 		and adds the new fields to each of the records.  It then updates
 *			the doc's protocol from 1.0 to 1.1
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT
{
 VMMapStruct        *VMmapPtr;
 MemHandle      mh;
 VMBlockHandle      vmbh, bankVMBH, indexVMBH;
 word			num, i, j;
 WWFixed		newProto;
// BasicDBError		error;


	/* grab the records in the data base and add the new fields */
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
	bankVMBH = VMmapPtr->VMMS_bankDBHan;
	indexVMBH = VMmapPtr->VMMS_bankCurrentIndex;
	num = VMmapPtr->VMMS_numQuestions;
	VMUnlock(mh);

	for (i = 0; i < num; i++)  {
		if (indexVMBH)
			BasicDBGetRecordByIndex(pself->GDI_fileHandle, bankVMBH, indexVMBH, i, &mh);
		else
			BasicDBGetRecordByElemNum(pself->GDI_fileHandle, bankVMBH, i, &mh);
		/* add the new fields */
		for (j = FIELD_CAT_STU_ANS; j < FIELD_CAT_LAST; j++) {
			BasicDBAddField(pself->GDI_fileHandle, bankVMBH, mh, j, 0, 0, 0);
			}
		/* store the record */
		/*error = */BasicDBSaveRecord(pself->GDI_fileHandle, bankVMBH, mh, TypesIndexCallBack, 0);
//		if (error) NotifyDBox(0, @ErrMsgCouldntSaveRec);
//		BasicDBDiscardRecord(mh);
		}

	/* and update file protocol # */
	newProto.WWF_frac = 1;  /* major protocol */
	newProto.WWF_int = 1;   /* minor protocol */
	FileSetHandleExtAttributes(pself->GDI_fileHandle,
					    FEA_PROTOCOL,
					    (void *) &newProto,
						 sizeof(dword));

	return(0);


}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_OPEN_QA_FORM for TGenDocumentClass
 *          (GEN_TRIGGER_ACTION)
 *          optr trigger
 * DESCRIPTION: 
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_QA_FORM
{
 word		sel, size, i, ans;
 byte		type;
 MemHandle		mh;
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 char					qString[MAX_QUESTION_LENGTH];
 optr					choice[] = {@MEQAMCQSelectA, @MEQAMCQSelectB, @MEQAMCQSelectC,
										@MEQAMCQSelectD, @MEQAMCQSelectE, @MEQAMCQSelectF};


	if (trigger == @MESBNewQButton) {
		/* first we'll make sure we'r not going over the limit */
		if (g_numQuestions == MAX_NUM_QUESTIONS) {
			NotifyDBox(0, @ErrMsgMaxRecords);
			return;
			}

		pself->TGDI_isNewEntry = TRUE;
		/* make sure its enabled so the type can be changed */
		@send MEQAQuestionTypeGroup::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

		@send MEQuestionAnswerGroup::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@NewQButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);
		}

	else  {  /* set up to modify a question */
		/* make sure there's a question selected */
		sel = @call MESummaryDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		if (sel == GIGS_NONE) return;
		else {
			pself->TGDI_isNewEntry = FALSE;
			/* grab the info from the db and show it */
			if (pself->TGDI_bankCurrentIndex)
				error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									sel, &mh);
			else
				error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									sel, &mh);
			if (error) {
				NotifyDBox(0, @BDBGetByIndexError);
				return;
				}
			/* get the type */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
			BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
			/* set up the db and type */
			SetQADBoxType(type);
			@send MEQAQuestionTypeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
													type, FALSE);
			/* and we'll grey it out so the type can't be changed */
			@send MEQAQuestionTypeGroup::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

			/* get the question */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
			size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
			/* show the question */
			@call MEQAQuestionText::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
			if (type == QTYPE_MC)  {
				/* show the choices */
				for (i = 0; i < 6; i++) {
					fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
														 FIELD_CAT_MCCHOICE_A + i, 1);
					size = BasicDBGetFieldData(mh, fieldID,
														qString, MAX_QUESTION_LENGTH);
					if (size)
						@call choice[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
					}
				}

			/* and now do the answers */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
			if (type != QTYPE_FILL)  {
				BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
				if (type == QTYPE_MC)
					@send MEQAMCAnswer::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(ans, FALSE);
				else
					@send MEQATFAnswer::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(ans, FALSE);
				}
			else {
				size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
				@call MEQAFillAnswer::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
				/* and any lines */
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_FREE_ANS_LINES, 1);
				BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
				@send MEQAFillLines::MSG_GEN_VALUE_SET_INTEGER_VALUE(ans, FALSE);
				}
			BasicDBDiscardRecord(mh);
			}  /* end of question selected else */

		@send MEQuestionAnswerGroup::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@ModQButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);
		}  /* end of modify question else */


	/* Open the dialog box */
	@send MEQuestionAnswerGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_SAVE_ENTRY for TGenDocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_SAVE_ENTRY
{
 word					sel;
 BasicDBError		error = 0;
 BasicDBRecordID    recordID;
 Boolean			wasProblem = FALSE;
 Boolean			savedOK;
 MemHandle		vmh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 byte				type;
 char				numStr[11];
 char				string[MAX_QUESTION_LENGTH];


	/* first do some error trapping... */
	type = @call MEQAQuestionTypeGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/* no mc answer a */
	if (type == QTYPE_MC)  {
		if (!@call MEQAMCQSelectA::MSG_VIS_TEXT_GET_ALL_PTR(string))  {
			NotifyDBox(0, @ErrMsgNoChoices);
			return;
			}
		}
	/* no free ans */
	else if (type == QTYPE_FILL)  {
		if (!@call MEQAFillAnswer::MSG_VIS_TEXT_GET_ALL_PTR(string))  {
			NotifyDBox(0, @ErrMsgNoAnswer);
			return;
			}
		}

	if (pself->TGDI_isNewEntry)  {
		/* create a new record */
		pself->TGDI_openEntryRecMH = MakeNewRecord(pself->GDI_fileHandle,
															 pself->TGDI_bankDBHan);
		if(!pself->TGDI_openEntryRecMH) {
			NotifyDBox(0, @ErrMsgCouldntCreateNewRec);
			return;
			}
		}
	else  {
		/* open the record to be changed  */
		sel = @call MESummaryDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		if (pself->TGDI_bankCurrentIndex)
			error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									sel, &pself->TGDI_openEntryRecMH);
		else
			error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									sel, &pself->TGDI_openEntryRecMH);
		if (error) {
			NotifyDBox(0, @BDBGetByIndexError);
			return;
			}
		}

	/* save the data */
	savedOK = SaveQandAData(pself->TGDI_openEntryRecMH);
	if (savedOK) {
		/* store the record */
		error = BasicDBSaveRecord(pself->GDI_fileHandle,
						pself->TGDI_bankDBHan,
						pself->TGDI_openEntryRecMH,
						TypesIndexCallBack,
					   &recordID);
		if (error) wasProblem = TRUE;
		else  {
			/* saving the record free'd it so we need to zero out the instance */
			pself->TGDI_openEntryRecMH = 0;
			}
		}  /* end of saved ok if */
	else wasProblem = TRUE;

	if (wasProblem) {
		if (pself->TGDI_openEntryRecMH) {
			BasicDBDiscardRecord(pself->TGDI_openEntryRecMH);
			}
		pself->TGDI_openEntryRecMH = 0;
		NotifyDBox(0, @ErrMsgCouldntSaveRec);
		return;
		}

	@send MEQuestionAnswerGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

	if (pself->TGDI_isNewEntry)  {
		/* ok - update & save the mapblock stuff if this was a new entry */
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
		g_numQuestions++;
		VMmapPtr->VMMS_numQuestions = g_numQuestions;
		if (type == QTYPE_MC) {
			pself->TGDI_numMCQuestions++;
			VMmapPtr->VMMS_numMCQuestions = pself->TGDI_numMCQuestions;
			}
		else if (type == QTYPE_TF) {
			pself->TGDI_numTFQuestions++;
			VMmapPtr->VMMS_numTFQuestions = pself->TGDI_numTFQuestions;
			}
		else  {
			pself->TGDI_numFreeQuestions++;
			VMmapPtr->VMMS_numFreeQuestions = pself->TGDI_numFreeQuestions;
			}
		VMDirty(vmh);
		VMUnlock(vmh);

		/* and update the ui if it is a new entry */
		if (type == QTYPE_MC)  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numMCQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBMCNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		else if (type == QTYPE_TF)  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numTFQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBTFNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		else  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numFreeQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBFINumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		UtilHex32ToAscii(numStr, (dword)g_numQuestions,
							  UHTAF_NULL_TERMINATE);
		@call MESBTotNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
      } /* end of new entry if */

	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_DELETE_QUESTION for TGenDocumentClass
 *
 * DESCRIPTION:
 *                
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_DELETE_QUESTION
{
 word		sel;
 byte		type;
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 MemHandle		vmh, mh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 char				numStr[11];


	/* make sure there's a question selected */
	sel = @call MESummaryDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if (sel == GIGS_NONE) return;
	else {
      /* confirm the delete */
		if(AckDBox(0, 0, @ConfirmDeleteRec) == ACK_NO) return;

		/* grab the record from the db */
		if (pself->TGDI_bankCurrentIndex)
			error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									sel, &mh);
		else
			error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									sel, &mh);
		if (error) {
			NotifyDBox(0, @BDBGetByIndexError);
			return;
			}
		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
		/* and delete the record */
		BasicDBDeleteRecord(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									mh,
									TypesIndexCallBack);

		/* and change the counts */
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
		g_numQuestions--;
		VMmapPtr->VMMS_numQuestions = g_numQuestions;
		if (type == QTYPE_MC) {
			pself->TGDI_numMCQuestions--;
			VMmapPtr->VMMS_numMCQuestions = pself->TGDI_numMCQuestions;
			}
		else if (type == QTYPE_TF) {
			pself->TGDI_numTFQuestions--;
			VMmapPtr->VMMS_numTFQuestions = pself->TGDI_numTFQuestions;
			}
		else  {
			pself->TGDI_numFreeQuestions--;
			VMmapPtr->VMMS_numFreeQuestions = pself->TGDI_numFreeQuestions;
			}
		VMDirty(vmh);
		VMUnlock(vmh);

		/* and update the ui */
		if (type == QTYPE_MC)  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numMCQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBMCNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		else if (type == QTYPE_TF)  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numTFQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBTFNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		else  {
			UtilHex32ToAscii(numStr, (dword)pself->TGDI_numFreeQuestions,
							  UHTAF_NULL_TERMINATE);
			@call MESBFINumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
			}
		UtilHex32ToAscii(numStr, (dword)g_numQuestions,
							  UHTAF_NULL_TERMINATE);
		@call MESBTotNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);

		@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
		}  /* end of record selected else */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY for TGenDocumentClass
 *
 * DESCRIPTION:	Queries for monikers for summary list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY
{
 MemHandle		mh;
 char			qString[MAX_QUESTION_LENGTH], typeString[13];
 word			size, width, numChars, fudge, rights, wrongs;
 byte			type;
 BasicDBFieldID	fieldID;
 ChunkHandle		chunk ;
 MemHandle		mem ;
 GStateHandle		gstate ;


	/* open the record */
	if (pself->TGDI_bankCurrentIndex)
		BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									  pself->TGDI_bankDBHan,
									  pself->TGDI_bankCurrentIndex,
									  item, &mh);
	else
		BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									  pself->TGDI_bankDBHan,
									  item, &mh);

 	/* get the type */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
										 FIELD_CAT_Q_TYPE, 1);
	BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
	MemLock (OptrToHandle(@MCShortText));
	if(type == QTYPE_MC)
		strcpy(typeString, LMemDeref(@MCShortText));
	else if(type == QTYPE_TF)
		strcpy(typeString, LMemDeref(@TFLongText));
	else
		strcpy(typeString, LMemDeref(@FFLongText));
	MemUnlock (OptrToHandle(@MCShortText));

	/* and the question */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
	size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH+1);
	qString[size] = 0;
	if (g_showingStats)  {
		/* and the right and wrong stats */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANS_RIGHT, 1);
		size = BasicDBGetFieldData(mh, fieldID, &rights, sizeof(word));
		if (!size) rights = 0;
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANS_WRONG, 1);
		size = BasicDBGetFieldData(mh, fieldID, &wrongs, sizeof(word));
		if (!size) wrongs = 0;
      }
	BasicDBDiscardRecord(mh);

	/* set up the mem and gstate */
	mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
	gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
	/* tell the list the size of the gstring */
	GrSetGStringBounds(gstate, 0, 0, g_dListWidth, g_height);  /* L, T, R, B */

	/* NOTE - the right edge isn't exact because I think g_dListWidth is
	 * the entire width including any scroll bar.  But we'll need a fudge
	 * factor for questions that are too long to fit.
	 */
	fudge = 20;

	/* it looks like I need to set the font & pointsize to make GrTextWidth
	 * work properly */
	GrSetFont(gstate, g_fontID, MakeWWFixed(g_sysPointSize));

	/* set the colors based on the type */
	if (item == pself->TGDI_selectedQ) {   /* selected fill color */
		GrSetAreaColor(gstate, CF_INDEX, C_BLUE, 0, 0);
		GrFillRect(gstate, 1, 1, g_dListWidth-4, g_height-4);
		/* set the text color */
		GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);
		}
	else  {    /* non-selected fill color */
		if (type == QTYPE_MC)
			GrSetAreaColor(gstate, CF_INDEX, C_YELLOW, 0, 0);
		else if (type == QTYPE_TF)
			GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GREEN, 0, 0);
		else
			GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_CYAN, 0, 0);
		GrFillRect(gstate, 1, 1, g_dListWidth-4, g_height-4);
		/* set the text color */
		GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
		}
	/* do a border */
	GrSetLineWidth(gstate, MakeWWFixed(2));
	GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	GrDrawRect(gstate, 0, 0, g_dListWidth-4, g_height-3);
	/* draw type vertical separator */
	GrSetLineWidth(gstate, MakeWWFixed(1));
	GrDrawVLine(gstate, g_vSep, 1, g_height-3);

	/* show the type */
	GrDrawText(gstate, 5, 1, typeString, 0);

	if (g_showingStats)  {
		/* adjust fudge to account for 2 new columns */
		fudge += 51;
		/* and draw the 2 vlines */
		GrDrawVLine(gstate, g_dListWidth - 66, 1, g_height-3);
		GrDrawVLine(gstate, g_dListWidth - 35, 1, g_height-3);
		/* and the stats */
		UtilHex32ToAscii(typeString, (dword)rights, UHTAF_NULL_TERMINATE);
		GrDrawText(gstate, g_dListWidth - 62, 1, typeString, 0);
		UtilHex32ToAscii(typeString, (dword)wrongs, UHTAF_NULL_TERMINATE);
		GrDrawText(gstate, g_dListWidth - 31, 1, typeString, 0);
		}

	/* show the question */
	width = GrTextWidth(gstate, qString, strlen(qString));
	if(width > g_dListWidth - g_vSep - fudge)  {
		/* truncate text and add ellipsis */
		numChars = strlen(qString);
		while (width > (g_dListWidth - g_vSep - fudge - g_eWidth)) {
			qString[numChars - 1] = 0;
         numChars--;
			width = GrTextWidth(gstate, qString, strlen(qString));
			}
		strcat(qString, "...");
		}
	GrDrawText(gstate, g_vSep+5, 1, qString, 0) ;

	/* terminate the gstring */
	GrEndGString(gstate) ;
	/* and tell the DList */
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  g_height,
				  g_dListWidth,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

	/* and 86 the gstate and mem */
	GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
	MemFree(mem) ;


}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_SUMMARY_DLIST_STATUS for TGenDocumentClass
 *               (GEN_ITEM_GROUP_STATUS_MSG)
 *
 * DESCRIPTION:	the selection has changed
 *
 * PARAMETERS:  void (word numSelections, word selection, byte stateFlags)
 *
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_SUMMARY_DLIST_STATUS
{
 word		oldSelection;


	oldSelection = pself->TGDI_selectedQ;
	pself->TGDI_selectedQ = selection;

	/* redraw selected q's moniker to show selected */
	@call self::MSG_TGEN_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY(
							 @MESummaryDList,
							 selection);
	/* redraw the old moniker to show not selected */
	if (oldSelection != GIGS_NONE)
		@call self::MSG_TGEN_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY(
						    @MESummaryDList,
							 oldSelection);
	else {
		/* enable the del & mod buttons */
		@send MESBDelQButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBModQButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBAddDataButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteDataDBox::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_SUMMARY_DLIST_DBL_CLICK() for TGenDocumentClass
 *
 * DESCRIPTION:	Handles question double click.
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_SUMMARY_DLIST_DBL_CLICK
{

	if (!g_showingStats)
		@call MESBModQButton::MSG_GEN_ACTIVATE();
	else
		@call MESBAddDataButton::MSG_GEN_ACTIVATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_RECALC_SIZE() for TGenGenDynamicListClass
 *
 * DESCRIPTION:	gets the width of the dlist window and re-inits the dlist
 *                if the width is changed
 *
 * PARAMETERS:    SizeAsDWord
 *						(RecalcSizeArgs width,
 *						RecalcSizeArgs height)
 * (Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value)
 *
 ***********************************************************************/
@method TGenGenDynamicListClass, MSG_VIS_RECALC_SIZE
{
 SizeAsDWord		size;
 word					returnWidth;
 Boolean				change = FALSE;


	size = @callsuper();
	returnWidth = DWORD_WIDTH(size);

	/* See if we want to re-init the dlist to truncate any long lines
	 * if necessary.  If any are 0 we're in a start-up situation and
	 * don't want to get involved. */
	if (returnWidth && width && g_dListWidth) {
		/* ok - none are 0 so we may have a redraw situation */
		/* The first pass through, after a width change, g_dL is still
		 * the old width and rW is the new width.  But we don't want to re-init
		 * yet since there'll be another pass through here.  On that second
		 * pass they'll be the same and now's when we need to re-init, however
		 * counter-intuitive that may be. */
		if (returnWidth == g_dListWidth)
			change = TRUE;
		}
	/* extract the superclass computed width so the moniker
	 * query routine will know */
	g_dListWidth = returnWidth;

	if (change) {
		@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
		}

	return(size);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_OPEN_SORT_OPTS for TGenDocumentClass
 *
 * DESCRIPTION:	Opens the sort opts dbox
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_SORT_OPTS
{
 word		sort;

	/* set the current sort item */
	if (pself->TGDI_bankCurrentIndex == pself->TGDI_bankTypeIndex)
		sort = SO_TYPE;
	else if (pself->TGDI_bankCurrentIndex == pself->TGDI_bankAlphaIndex)
		sort = SO_ALPHA;
	else sort = SO_NONE;
	@send SortOptsItemGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
													sort, FALSE);

	/* Open the dialog box */
	@send SortOptsDBox::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_CHANGE_SORT for TGenDocumentClass
 *
 * DESCRIPTION:	Sets up the new sort and re-inits dlist
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_CHANGE_SORT
{
 word					sort;
 VMMapStruct		*VMmapPtr;
 MemHandle			mh;
 VMBlockHandle		vmbh;
 Boolean				wasChanged = FALSE;


	sort = @call SortOptsItemGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/* make sure this was a change before we carry on */
	if ((sort == SO_NONE) && (pself->TGDI_bankCurrentIndex)) wasChanged = TRUE;
	else if ((sort == SO_TYPE) && (pself->TGDI_bankCurrentIndex !=
							pself->TGDI_bankTypeIndex)) wasChanged = TRUE;
	else if ((sort == SO_ALPHA) && (pself->TGDI_bankCurrentIndex !=
							pself->TGDI_bankAlphaIndex)) wasChanged = TRUE;

	/* if changed - reset the sort and save the new sort */
	if (wasChanged) {
		switch (sort) {
			case SO_NONE:
				pself->TGDI_bankCurrentIndex = 0;
				break;
			case SO_TYPE:
				pself->TGDI_bankCurrentIndex = pself->TGDI_bankTypeIndex;
				break;
			case SO_ALPHA:
				pself->TGDI_bankCurrentIndex = pself->TGDI_bankAlphaIndex;
				break;
			}

		/* save the new current index */
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
		VMmapPtr->VMMS_bankCurrentIndex = pself->TGDI_bankCurrentIndex;
		VMDirty(mh);
		VMUnlock(mh);

		/* and resort the list */
		@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
		}  /* end of wasChanged if */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TGEN_DOCUMENT_SHOW_STATS_TOGGLE for TGenDocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@method TGenDocumentClass, MSG_TGEN_DOCUMENT_SHOW_STATS_TOGGLE
{


	/* toggle the moniker & UI gadgetry */
	if (g_showingStats)  {
		g_showingStats = FALSE;
		@send ShowStatsMenuItem::MSG_GEN_USE_VIS_MONIKER(
										OptrToChunk(@ShowStatsButtonMoniker), VUM_NOW);
		@send MESHStatsGlyph::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBAddDataButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteDataDBox::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBDelQButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBModQButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBNewQButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send EraseStatsDBox::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	else  {
		g_showingStats = TRUE;
		@send ShowStatsMenuItem::MSG_GEN_USE_VIS_MONIKER(
									OptrToChunk(@DontShowStatsButtonMoniker), VUM_NOW);
		@send MESHStatsGlyph::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBAddDataButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteDataDBox::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBDelQButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBModQButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MESBNewQButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send EraseStatsDBox::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}

	/* and update the list */
	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);

}


