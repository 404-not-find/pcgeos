/***************************************************************************
 *  FILE:           genr8.goc
 *  PROJECT:        Breadbox Test Generator
 *  DESCRIPTION:    This file has methods for document manipulation
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *      Code for Test Generation
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:		SetGenDBoxUI(word whichTestType)
 *
 *
 * DESCRIPTION:	Sets either paper or computer dialog box
 *
 *
 ***********************************************************************/
void SetGenDBoxUI(word whichTestType)
{

	if (whichTestType == TO_PAPER) {
		/* test type UI stuff */
		@send GenAnswersStuff::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNameBlockGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenCFileStuff::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenStuGradableGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}  /* end of paper open */
	else {  /* computer test */
		/* test type UI stuff */
		@send GenAnswersStuff::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNameBlockGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenCFileStuff::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenStuGradableGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send TestFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);
		}

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_OPEN_GENERATE for TGenDocumentClass
 *          (GEN_TRIGGER_ACTION)
 *          optr trigger
 * DESCRIPTION:	Opens either paper or computer dialog box
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_OPEN_GENERATE
{
 word		testType;


	/* we're generating a new test */
	pself->TGDI_testGenerated = FALSE;

	/* set the number of questions stuff */
	if (MAX_TEST_QUESTIONS > g_numQuestions)
		@send GenNumQuestions::MSG_GEN_VALUE_SET_MAXIMUM(
											  MakeWWFixed(g_numQuestions));
	else
		@send GenNumQuestions::MSG_GEN_VALUE_SET_MAXIMUM(
											  MakeWWFixed(MAX_TEST_QUESTIONS));

	@send GenNumQuestions::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	if ((g_numQuestions) < 10 ) {
		@send GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
		@send GNQ10::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ25::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ50::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNumQuestions::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNumQuestions::MSG_GEN_VALUE_SET_INTEGER_VALUE(
															g_numQuestions, FALSE);
		}
	else if ((g_numQuestions) < 25 ) {
		@send GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(10, FALSE);
		@send GNQ10::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ25::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ50::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNumQuestions::MSG_GEN_VALUE_SET_INTEGER_VALUE(
															g_numQuestions, FALSE);
		}
	else if ((g_numQuestions) < 52 ) {
		@send GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(25, FALSE);
		@send GNQ10::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ25::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		if ((g_numQuestions) < 50 )
			@send GNQ50::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		else
			@send GNQ50::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNumQuestions::MSG_GEN_VALUE_SET_INTEGER_VALUE(
															g_numQuestions, FALSE);
		}
	else {
		@send GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(25, FALSE);
		@send GNQ10::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ25::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GNQ50::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GenNumQuestions::MSG_GEN_VALUE_SET_INTEGER_VALUE(51, FALSE);
		}

	@send GenSelQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(GEN_NO, FALSE);

	/* set first time opening stuff */
	@send GenCancel::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@GenCancelButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	@send GenQuestionsStuff::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send GenShuffleGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send GenGenerate::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@GenNewButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);

	/* tell the report object the destination*/
	@call GenTest::MSG_GEN_TEXT_REPORT_SET_DESTINATION(oself);

	/* do some stuff based on which test type */
	testType = @call TestTypeGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	SetGenDBoxUI(testType);

	/* Open the dialog box */
	@call GenerateDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_TEST_TYPE_APPLY
 *								for TGenDocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: sets the generate dbox UI
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_TEST_TYPE_APPLY
{

	SetGenDBoxUI(selection);

}

/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_NUM_Q_APPLY
 *								for TGenDocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: enables spinner if none selected
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_NUM_Q_APPLY
{

	if(selection == GIGS_NONE)
		@send GenNumQuestions::MSG_GEN_SET_ENABLED(VUM_NOW);
	else
		@send GenNumQuestions::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_SEL_Q_APPLY
 *								for TGenDocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: opens the sel q dbox if yes
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_SEL_Q_APPLY
{

	if(selection == GEN_YES)
		@send oself::MSG_OPEN_SELECT_QUESTIONS();

}

/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_DOCUMENT_GEN_TITLE_BLOCK_APPLY
 *								for TGenDocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: opens the title dbox if yes
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GEN_TITLE_BLOCK_APPLY
{

	if(selection == GEN_YES)  {
      /* fill in any info that's stored */
		if (pself->TGDI_titleLine1[0])
			@call GTLine1::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->TGDI_titleLine1, 0);
		else @send GTLine1::MSG_VIS_TEXT_DELETE_ALL();

		if (pself->TGDI_titleLine2[0])
			@call GTLine2::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->TGDI_titleLine2, 0);
		else @send GTLine2::MSG_VIS_TEXT_DELETE_ALL();

		if (pself->TGDI_titleLine3[0])
			@call GTLine3::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->TGDI_titleLine3, 0);
		else @send GTLine3::MSG_VIS_TEXT_DELETE_ALL();

		@send GenTitleStuff::MSG_GEN_INTERACTION_INITIATE();
		}


}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_SET_TITLE_BLOCK  for TGenDocumentClass
 *
 * PARAMETERS:
 *
 * DESCRIPTION:  Save the new title info
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SET_TITLE_BLOCK
{
 VMMapStruct        *VMmapPtr;
 MemHandle      mh;
 VMBlockHandle      vmbh;

	/* get our VMmap block */
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);

	if (@call GTLine1::MSG_VIS_TEXT_GET_ALL_PTR(pself->TGDI_titleLine1))
		strcpy(VMmapPtr->VMMS_titleLine1, pself->TGDI_titleLine1);
	else VMmapPtr->VMMS_titleLine1[0] = 0;

	if (@call GTLine2::MSG_VIS_TEXT_GET_ALL_PTR(pself->TGDI_titleLine2))
		strcpy(VMmapPtr->VMMS_titleLine2, pself->TGDI_titleLine2);
	else VMmapPtr->VMMS_titleLine2[0] = 0;

	if (@call GTLine3::MSG_VIS_TEXT_GET_ALL_PTR(pself->TGDI_titleLine3))
		strcpy(VMmapPtr->VMMS_titleLine3, pself->TGDI_titleLine3);
	else VMmapPtr->VMMS_titleLine3[0] = 0;

	VMDirty(mh);
	VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS for TGenDocumentClass
 *             (word totalQs		questions in bank
 *             word testQs			questions in this test
 *					Boolean again		FALSE if new shuffle
 *					word numSel			# of specifically selected Qs
 *             word gradable)
 *
 * CALLED BY:  MSG_TGEN_DOCUMENT_GENERATE_COMMON
 *
 * STRATEGY:	if there are specifically selected Qs, they are already
 *					at the beginning of qArray
 *
 *  01/22/03	jfh	changed from function to message to make it easier
 *							to check for FF questions and keep them from the array
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS
{
 word			unShuffled[MAX_NUM_QUESTIONS];
 word			i, j, max, randNum, foundSels, foundFFs;
 long double	randomX;
 Boolean		alreadySelected, dumpFF;
 BasicDBFieldID	fieldID;
 MemHandle		mh;
 byte			type;
 char			numStr[11];


 	foundFFs = 0;
	if(!again) {
		/* don't put Qs that are already in qArray into the
			* unshuffled array */
		foundSels = 0;
		for (i = 0; i < totalQs; i++)  {
			alreadySelected = FALSE;
			for (j = 0; j < numSel; j++)  {
				if (pself->TGDI_qArray[j] == i)  {
					/* OK - this q is a specifically selected one */
					alreadySelected = TRUE;
					foundSels++;
					break;
					}
				}
			if (!alreadySelected)  {
				/* here's where we need to keep FF questions from getting into the
					unshuffled array */
				dumpFF = FALSE;
				if (gradable == GEN_YES) {
					if (pself->TGDI_bankCurrentIndex)
						BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									i, &mh);
					else
						BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									i, &mh);
					fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
					BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
					BasicDBDiscardRecord(mh);
					if (type == QTYPE_FILL)  {
						dumpFF = TRUE;
						foundFFs++;
               	}
					}
				if (!dumpFF)
					unShuffled[i - foundSels - foundFFs] = i;
				}  /* end of !alreadySelected if */
			}  /* end of loop thru Qs for */
		}  /* end of new shuffle if */
	else {
		/* set up to reshuffle what's already in the array */
		for (i = 0; i < totalQs; i++)  {
			unShuffled[i] = pself->TGDI_qArray[i];
			}
		}

	/* inform the teacher if there were insufficient TF/MC questions to fill
		the requested number of questions if ths was a student gradable test
		- reset the numQs UI for any follow on test gens
		- reset testQs for the random routine */
	if ((gradable == GEN_YES) && (!again))  {
		if (testQs > (totalQs - foundFFs))  {
			testQs = totalQs - foundFFs;
			@call GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
																				  GIGS_NONE, FALSE);
			@call GenNumQuestions::MSG_GEN_VALUE_SET_INTEGER_VALUE(testQs, FALSE);
			UtilHex32ToAscii(numStr, (dword)testQs, UHTAF_NULL_TERMINATE);
			NotifyDBox(numStr, @ChangedNumQsErrMsg);
			}
		}

	totalQs -= foundFFs;

	/* now randomly move question numbers from the unshuffled array into the
		array that will be used by the generating routines. */
	/* initialize randomizer using TimerGetCount as a seed (dword) */
	FloatRandomize(RGIF_USE_SEED, TimerGetCount());
	max = totalQs - numSel - 1;
	for (i = 0; i < (testQs - numSel); i++)  {
		if (i == totalQs - numSel - 1)
			pself->TGDI_qArray[i + numSel] = unShuffled[0];
		else {
			/* get a random # between 0(incl) and max(excl) */
			randomX = max + 1;   /* the 1 is to include max */
			FloatPushNumber(&randomX);
			FloatRandomN();
			FloatPopNumber(&randomX);
			randNum = (word) randomX;
			/* put the random Q from the unshuffled array into the ith
			 * element of our shuffled array */
			pself->TGDI_qArray[i + numSel] = unShuffled[randNum];
			/* now remove that element from unshuffled array */
			if (randNum < max)  {
				for (j = randNum; j < max; j++)  {
					unShuffled[j] = unShuffled[j + 1];
					}
				}
			}
		max--;
		}

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_GENERATE_COMMON for TGenDocumentClass
 *
 *
 * DESCRIPTION:	Does all the pre and post test generation work
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_COMMON
{
 word		numQs, tType, stuGrade;
 word			numSel, k;
 word			selList[MAX_NUM_QUESTIONS];
 BasicDBFieldID	fieldID;
 MemHandle		mh;
 byte			type;


	/* get some info from the dialog box */
	tType = @call TestTypeGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	stuGrade = @call GenStuGradableGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	numQs = @call GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (numQs == GIGS_NONE)
		numQs = @call GenNumQuestions::MSG_GEN_VALUE_GET_INTEGER_VALUE();

	numSel = 0;
	if(!pself->TGDI_testGenerated)  {
		/* were there any specifically selected questions? */
		if ((@call GenSelQuestionsGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION())
																					== GEN_YES) {
			numSel = @call SDBDList::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
			/* make sure that there are enough total questions selected to
				hold the included selected questions */
			if (numSel > numQs) {
				NotifyDBox(0, @NumSelQsErrMsg);
				return;
				}
			if (numSel) {
				@call SDBDList::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(
															 selList, numSel);
				for (k = 0; k < numSel; k++) {
					/* put the specifically selected questions into our array - BUT
						FIRST check to see if there are any FF included if we're
						gonna have a student gradable test */
					if ((tType == TO_PC) && (stuGrade == GEN_YES)) {
						if (pself->TGDI_bankCurrentIndex)
							BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									selList[k], &mh);
						else
							BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									selList[k], &mh);
						fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
						BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
						BasicDBDiscardRecord(mh);
						if (type == QTYPE_FILL)  {
							NotifyDBox(0, @FFSelQsErrMsg);
							return;
							}
						}
					pself->TGDI_qArray[k] = selList[k];
					}  /* end of selected Qs for */
				}  /* end of numQs if */
			}  /* end of selQs if */
		/* fill the array with that many question numbers */
		@call oself::MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS(
										g_numQuestions, numQs, FALSE, numSel, stuGrade);
		}
	else {
		/* see if user wants to reshuffle the existing questions */
		if ((@call GenShuffleGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION()) == GEN_YES)
			@call oself::MSG_TGEN_DOCUMENT_SHUFFLE_QUESTIONS(
													 numQs, numQs, TRUE, numSel, stuGrade);
		}


	/* here's where we generate either the paper ot PC test... */
	if (tType == TO_PAPER)
		@call GenTest::MSG_GEN_INTERACTION_INITIATE();
	else  {
		if(!@call oself::MSG_TGEN_DOCUMENT_GENERATE_PC_TEST())
			/* there was an error creating the test file (message already shown) */
         return;
		}


	/* and now fix things up after we've generated the test
		- set the generated flag so we can regenerate the same test with
	 * answers or maybe reshuffle the same questions */
	pself->TGDI_testGenerated = TRUE;
	/* and swap the visMonikers to reinforce the concept */
	@send GenGenerate::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@GenAgainButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	@send GenCancel::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@GenDoneButtonMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	/* and other UI stuff... */
	@send GenQuestionsStuff::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send GenShuffleGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);


}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_GENERATE_PAPER_TEST for TGenDocumentClass
 *          (GEN_TEXT_REPORT_GENERATE)
 *          optr textObj
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_PAPER_TEST
{
 word		numQs, i, j, size, ansSel, onTestSel, ans, lines;
 byte		type;
 char		qString[MAX_QUESTION_LENGTH], tempStr[25];
 BasicDBFieldID	fieldID;
 MemHandle		mh;
 char				choices[] = "(a)  (b)  (c)  (d)  (e)  (f)  ";


	/* get some info from the dialog box */
	numQs = @call GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (numQs == GIGS_NONE)
		numQs = @call GenNumQuestions::MSG_GEN_VALUE_GET_INTEGER_VALUE();
	ansSel = @call GenWithAnswersGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	onTestSel = @call GenAnsOnTestGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/* suspend the text object while adding to it... */
	@call textObj::MSG_META_SUSPEND() ;

	/* show the name block? */
	if ((@call GenNameBlockGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION()) == GEN_YES) {
		@RT_PARA_ATTR(@TRepTestParaAttrs);
		@RT_CHAR_ATTR(@TRepTestBoldCharAttrs);
		@RT_TAB_GROUP(@NameBlockTabs) ;
		MemLock (OptrToHandle(@NameBlockText));
		@RT_APPEND(LMemDeref(@NameBlockText));
		MemUnlock (OptrToHandle(@NameBlockText));
		}

	/* show the title block? */
	if ((@call GenTitleBlockGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION()) == GEN_YES) {
		@RT_PARA_ATTR(@TRepTitleParaAttrs);
		@RT_CHAR_ATTR(@TRepTitleCharAttrs);
		if (pself->TGDI_titleLine1[0]) {
			@RT_APPEND(pself->TGDI_titleLine1);
			@RT_APPEND("\r");
			}
		if (pself->TGDI_titleLine2[0]) {
			@RT_APPEND(pself->TGDI_titleLine2);
			@RT_APPEND("\r");
			}
		if (pself->TGDI_titleLine3[0]) {
			@RT_APPEND(pself->TGDI_titleLine3);
			@RT_APPEND("\r");
			}
      @RT_APPEND("\r");
		}

	@RT_PARA_ATTR(@TRepTestParaAttrs);
	@RT_TAB_GROUP(@QuestionTabs) ;
	/* let's do it */
	for(i = 0; i < numQs; i++) {
		/* grab the info from the db and show it */
		if (pself->TGDI_bankCurrentIndex)
			BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									pself->TGDI_qArray[i], &mh);
		else
			BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_qArray[i], &mh);

		/* get the question stuff */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
		size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
		qString[size] = 0;
		/* show the question based on its type */
		/* first the q # stuff... */
		UtilHex32ToAscii(tempStr, (dword)i+1, UHTAF_NULL_TERMINATE);
		strcat(tempStr, ".\t");
		@RT_CHAR_ATTR(@TRepTestBoldCharAttrs);
		@RT_APPEND(tempStr);
		/* the body of the question... */
		@RT_CHAR_ATTR(@TRepTestCharAttrs);
		@RT_APPEND(qString);
		@RT_APPEND("\r");
		/* the mult choices ... */
		if (type == QTYPE_MC) {
			for (j = 0; j < 6; j++) {
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
																FIELD_CAT_MCCHOICE_A+j, 1);
				size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
            if (!size) break;
				@RT_APPEND("\t\t");
				qString[size] = 0;
				strncpy(tempStr, &choices[j*5], 5);
            tempStr[5] = 0;
				@RT_APPEND(tempStr);
				@RT_APPEND(qString);
				@RT_APPEND("\r");
				}
			}  /* end of multiple choice type */
		/* the true false ... */
		else if (type == QTYPE_TF) {
			@RT_APPEND("\t\t");
			MemLock (OptrToHandle(@TrueText));
			@RT_APPEND(LMemDeref(@TrueText));
			@RT_APPEND("     ");
			@RT_APPEND(LMemDeref(@FalseText));
			MemUnlock (OptrToHandle(@TrueText));
			@RT_APPEND("\r");

			}
		/* the free form ... */
		else {
			if(onTestSel == GEN_YES && ansSel == GEN_NO) {
            /* see if we need to leave any blank lines */
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
																 FIELD_CAT_FREE_ANS_LINES, 1);
				BasicDBGetFieldData(mh, fieldID, &lines, sizeof(word));
				if(lines) {
					for(j = 0; j < lines; j++) {
						@RT_APPEND("\r");
						}
					}
				}
			}  /* end of free form type */

		/* are we showing answers? */
		if (ansSel == GEN_YES) {
			/* Ok grab the answer */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
			@RT_CHAR_ATTR(@TRepTestBoldCharAttrs);
			@RT_APPEND("\r");
			MemLock (OptrToHandle(@AnswerText));
			@RT_APPEND(LMemDeref(@AnswerText));
			MemUnlock (OptrToHandle(@AnswerText));
			@RT_APPEND(": ");
			@RT_CHAR_ATTR(@TRepTestCharAttrs);
			if (type != QTYPE_FILL)  {
				BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
				if (type == QTYPE_MC) {
					strncpy(tempStr, &choices[(ans-1)*5], 5);
               tempStr[5] = 0;
					@RT_APPEND(tempStr);
					@RT_APPEND("\r");
					}
				else {
					MemLock (OptrToHandle(@TrueText));
					if (ans == TF_TRUE) @RT_APPEND(LMemDeref(@TrueText));
					else  @RT_APPEND(LMemDeref(@FalseText));
					MemUnlock (OptrToHandle(@TrueText));
					@RT_APPEND("\r");
					}
				}
			else {
				size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
				qString[size] = 0;
				@RT_APPEND(qString);
				@RT_APPEND("\r");
				}
			}  /* end of showing answers if */

		@RT_APPEND("\r");

		BasicDBDiscardRecord(mh);
		}  /* end of show the test for loop */

	/* let's get back to the top of the report */
	@send textObj::MSG_VIS_TEXT_SELECT_START();
	/* and show our work */
	@call textObj::MSG_META_UNSUSPEND();

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_DOCUMENT_GENERATE_PC_TEST for TGenDocumentClass
 *
 *
 * DESCRIPTION:	Instead of sending the info to the report library we'll
 *			throw it into a BasicDB and save it plus a map block
 *	 		in a vm file.  We'll give the vm file the attributes of
 *       the test taking app.
 *
 *       RETURN: True if everything OK, else FALSE
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_TGEN_DOCUMENT_GENERATE_PC_TEST
{
 word		numQs, i, stuGrade;
 BasicDBError		error;
 MemHandle		mh;
 char			testName[FILE_LONGNAME_LENGTH + 1];
 char			testPath[PATH_BUFFER_SIZE];
 DiskHandle		testDiskHan;
 VMFileHandle	testFileHan;
 TestMapStruct		*mapPtr;
 VMBlockHandle		vmbh, testDBHan;
 MemHandle			vmh, recMemHan;
 BasicDBRecordID	recID;
 BasicDBFieldID	fieldID;
 byte				type;
 GeodeToken		ttAppToken = {"TTa1", 16431};
 GeodeToken		ttDocToken = {"TTd1", 16431};
 ProtocolNumber	ttDocProtoNum;


	/* get some info from the dialog box */
	numQs = @call GenNumQuestionsGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (numQs == GIGS_NONE)
		numQs = @call GenNumQuestions::MSG_GEN_VALUE_GET_INTEGER_VALUE();
	stuGrade = @call GenStuGradableGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/* OK - create a .vm file to hold the test */
	if (!@call TestFileName::MSG_VIS_TEXT_GET_ALL_PTR(testName)) {
		NotifyDBox(0, @TestNoNameErrMsg);
      return(FALSE);
		}
	@call TestFileSel::MSG_GEN_PATH_GET(testPath, sizeof(testPath));
	testDiskHan = @call TestFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	FilePushDir();
	FileSetCurrentPath(testDiskHan, testPath);
	testFileHan = VMOpen(testName,
								VMAF_FORCE_READ_WRITE,
								VMO_CREATE_ONLY, 0);
	if (!testFileHan)  {
		/* if file exists just tell user & wait for new name */
		if (ThreadGetError() == VM_FILE_EXISTS)
			NotifyDBox(testName, @FileExistsErrMsg);
		/* for any other error... */
		else  NotifyDBox(0, @TestCreateErrMsg);
		FilePopDir();
		return(FALSE);
		}

	/* create the question database */
	testDBHan = 0;
	error = BasicDBCreate(testFileHan, &testDBHan, FALSE);
	if (error) {
		NotifyDBox(0, @BDBCreateError);
		/* lets delete the file */
		VMClose(testFileHan, FALSE);
		FileDelete(testName);
		FilePopDir();
		return(FALSE);
		}

	/* fill in the data in the map block */
	vmbh = VMAlloc(testFileHan, sizeof(TestMapStruct), 0);
	VMSetMapBlock(testFileHan, vmbh);
	mapPtr = VMLock(testFileHan, vmbh, &vmh);
	mapPtr->TMS_numQuestions = numQs;
	mapPtr->TMS_ansQuestions = 0;
	mapPtr->TMS_testDBHan = testDBHan;
	mapPtr->TMS_nameLine[0] = 0;
	mapPtr->TMS_dateLine[0] = 0;
	mapPtr->TMS_finished = FALSE;
	if (stuGrade == GEN_YES)
		mapPtr->TMS_studentGradable = TRUE;
	else
		mapPtr->TMS_studentGradable = FALSE;
	/* fill in the title block? */
	if ((@call GenTitleBlockGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION()) == GEN_YES) {
		if (pself->TGDI_titleLine1[0]) {
			strcpy(mapPtr->TMS_titleLine1, pself->TGDI_titleLine1);
			}
		else mapPtr->TMS_titleLine1[0] = 0;
		if (pself->TGDI_titleLine2[0]) {
			strcpy(mapPtr->TMS_titleLine2, pself->TGDI_titleLine2);
			}
		else mapPtr->TMS_titleLine2[0] = 0;
		if (pself->TGDI_titleLine3[0]) {
			strcpy(mapPtr->TMS_titleLine3, pself->TGDI_titleLine3);
			}
		else mapPtr->TMS_titleLine3[0] = 0;
		}
   /* and save the name of the test bank file from whence the questions come */
	@call oself::MSG_GEN_DOCUMENT_GET_FILE_NAME(mapPtr->TMS_bankName);
	VMDirty(vmh);
	VMUnlock(vmh);

	/* let's do it */
	for(i = 0; i < numQs; i++) {
		/* grab the record from the test bank */
		if (pself->TGDI_bankCurrentIndex)
			BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_bankCurrentIndex,
									pself->TGDI_qArray[i], &mh);
		else
			BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TGDI_bankDBHan,
									pself->TGDI_qArray[i], &mh);
		/* get it's ID */
		recID = BasicDBGetRecordID(mh);
		/* duplicate it */
		recMemHan = BasicDBDuplicateRecord(mh);

      /* save the test bank recID in the new test question record */
		fieldID = BasicDBGetFieldID(recMemHan, BDBFHE_CATEGORY, FIELD_CAT_BANK_ID, 1);
		BasicDBSetFieldData(recMemHan, fieldID, &recID, sizeof(recID));

		/* we don't want to include any free form answers in the test file */
		fieldID = BasicDBGetFieldID(recMemHan, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
		if (type == QTYPE_FILL) {
			fieldID = BasicDBGetFieldID(recMemHan, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
			BasicDBDeleteField(testFileHan, testDBHan, recMemHan, fieldID);
			}

		/* and store it in the test database */
		BasicDBSaveRecord(testFileHan,
						testDBHan,
						recMemHan,
						/*TypesIndexCallBack*/0,
						/*&recordID*/0);
      /* and discard the bank record */
		BasicDBDiscardRecord(mh);
		}  /* end of save the test for loop */

	/* and set the attributes for a test taker data file */
	FileSetHandleExtAttributes(testFileHan, FEA_CREATOR,
										&ttAppToken, sizeof(GeodeToken));
	FileSetHandleExtAttributes(testFileHan, FEA_TOKEN,
										&ttDocToken, sizeof(GeodeToken));
	ttDocProtoNum.PN_major = 1;
	ttDocProtoNum.PN_minor = 0;
	FileSetHandleExtAttributes(testFileHan, FEA_PROTOCOL,
										&ttDocProtoNum, sizeof(ProtocolNumber));

	VMSave(testFileHan);
	VMClose(testFileHan, FALSE);
	FilePopDir();

	return(TRUE);

}


