/***************************************************************************
 *  FILE:           process.goc
 *  PROJECT:        Breadbox Test Generator
 *  DESCRIPTION:    This file has process methods
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *      Class Declarations
 ***************************************************************************
 */

@classdecl  TGenProcessClass, neverSaved;
@classdecl  TGenQAInteractionClass;
@classdecl  TGGradeInteractionClass;
@classdecl  TGTAInteractionClass;

/*********************************************************************
 *  the globals declared as extern in .goh
 ********************************************************************
*/


/*
 ***************************************************************************
 *      Code for Document Manipulation
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE: MSG_GEN_PROCESS_OPEN_APPLICATION for TGenProcessClass
 *
 * DESCRIPTION:  do some opening stuff
 *
 *
 ***********************************************************************/
@method TGenProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
 Boolean			initError;
 word				size;
 char				fontName[20];


	/* get the font info for the main window metrics */
	initError = InitFileReadInteger("ui", "fontsize", &g_sysPointSize);
	if (initError) g_sysPointSize = 12;
	initError = InitFileReadStringBuffer("ui", "fontid", fontName, 20, &size);
	if (initError) g_fontID = FID_BERKELEY;
	else if (!strcmp(fontName, "Esquire")) g_fontID = FID_ESQUIRE;
	else g_fontID = FID_BERKELEY;
	g_height = g_sysPointSize + 8;
	/* set the ellipsis width based on font size */
	switch (g_sysPointSize) {
		case 9: g_eWidth = 7; break;
		case 10: g_eWidth = 8; break;
		case 12: g_eWidth = 10; break;
		case 14: g_eWidth = 12; break;
		case 18: g_eWidth = 16; break;
		default: g_eWidth = 10;
		}
	if (g_fontID == FID_ESQUIRE) g_vSep = g_sysPointSize * 7;
	else g_vSep = g_sysPointSize * 8;


	@callsuper();

	/* needed to install app tiny token in newUI */
	@call TGenApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

	/* needed to install doc token */
	@call process::MSG_GEN_PROCESS_INSTALL_TOKEN();


}

/***********************************************************************
 *
 * MESSAGE: MSG_GEN_PROCESS_CLOSE_APPLICATION for TGenProcessClass
 *
 * DESCRIPTION:  do some closing stuff
 *
 *
 ***********************************************************************/
@method TGenProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{


	 @callsuper();

	 return NULL;

}


/***********************************************************************
 *
 * MESSAGE: MSG_GEN_PROCESS_INSTALL_TOKEN for TGenProcessClass
 *
 * DESCRIPTION: Associates token with docs
 *
 *              needs token.h include
 ***********************************************************************/

@method TGenProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN
{
 dword   TATokenChars;
 TokenFlags  TATokenFlags;

	@callsuper();

	TATokenChars = TOKEN_CHARS('T', 'G', (dword) 'd', (dword) '1');
	/* it won't work w/o the two casts */
	if (!TokenGetTokenInfo(TATokenChars, 16431, &TATokenFlags))
		TokenDefineToken(TATokenChars, 16431, @TGDocIconMonikerList, 0);

 }


/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_TGEN_PROCESS_QTYPE_APPLY
 *								for TGenProcessClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: sets the proper type's Q & A GenInters usable/not usable
 *
 *
 *
 *
 ***********************************************************************/
@method TGenProcessClass, MSG_TGEN_PROCESS_QTYPE_APPLY
{

	SetQADBoxType((byte)selection);

}

/***********************************************************************
 *
 * MESSAGE: MSG_TGEN_PROCESS_LAUNCH_TOOL for TGenProcessClass
 *                  (word whichApp)
 * DESCRIPTION: launches a Geos app
 *                  Won't bring up minimized app !!!
 *
 *
 *
 ***********************************************************************/
@method TGenProcessClass, MSG_TGEN_PROCESS_LAUNCH_TOOL
{
 GeodeToken     appToken;
 GeodeHandle    appHandle;
 MemHandle      mh;
 word           numServers;
 IACPConnection iacpConnectionToken;
 EventHandle    eventToTop;
 word           connectionFlags = 0;


    appToken.GT_manufID = 0;
    if (whichApp == APP_CALC)  {
	  strcpy(appToken.GT_chars, "BCAL");
	  /* check to see if app is running already */
	  appHandle = GeodeFind("bigcalc",7,0,0);
	  }
    if (whichApp == APP_PLAN)  {
	  strcpy(appToken.GT_chars, "PLNR");
	  /* check to see if app is running already */
	  appHandle = GeodeFind("geoplan",7,0,0);
	  }


    if(appHandle == NullHandle)  {  /* calc is not running */
	  /* set up a launch block for it */
	  mh = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);
	  /* start it */
	  iacpConnectionToken = IACPConnect(
		   &appToken,
             IACPCF_OBEY_LAUNCH_MODEL||IACPSM_USER_INTERACTIBLE,
             mh,
             0,
             &numServers);
	  /* check to see if it got started */
	  if (numServers != 1) {
		/* it didn't so bail out... */
		return;
		}
	  /* and close the IACP connection */
	  IACPShutdown(iacpConnectionToken, NullOptr);
	  }  /* end of not running if */

	 else  {  /* it is already running */
	  /* connect to it */
	  iacpConnectionToken = IACPConnect(
			 &appToken,
					 connectionFlags,
                NULL,
                NullOptr,
                &numServers);
	  /* encapsulate a message telling calc to come to the top */
	  eventToTop = @record GenApplicationClass::MSG_GEN_BRING_TO_TOP();
	  /* send our message to calc */
	  IACPSendMessage(iacpConnectionToken,
                   eventToTop,
						 TO_MODEL,
                   NullHandle,  /* no return msg needed */
                   IACPS_CLIENT);
	  /* close the connection */
	  IACPShutdown(iacpConnectionToken, NullOptr);
	  }  /* end of found it running else */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE() for TGenQAInteractionClass
 *
 * DESCRIPTION:	clears the fields in the Entry dbox.
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TGenQAInteractionClass, MSG_VIS_CLOSE
{


	/* clear the fields */
	@send MEQAQuestionText::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectA::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectB::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectC::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectD::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectE::MSG_VIS_TEXT_DELETE_ALL();
	@send MEQAMCQSelectF::MSG_VIS_TEXT_DELETE_ALL();

	@send MEQAFillAnswer::MSG_VIS_TEXT_DELETE_ALL();

	@callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE() for TGGradeInteractionClass
 *
 * DESCRIPTION:	closes any open test file
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TGGradeInteractionClass, MSG_VIS_CLOSE
{

	if (g_testFileHandle) {
		VMClose(g_testFileHandle, FALSE);
//		FilePopDir();
		g_testFileHandle = 0;
		}

	@callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE() for TGTAInteractionClass
 *
 * DESCRIPTION:	closes any open test file
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TGTAInteractionClass, MSG_VIS_CLOSE
{

	if (g_taFileHandle) {
		VMClose(g_taFileHandle, FALSE);
//		FilePopDir();
		g_taFileHandle = 0;
		}

	@callsuper();
}


