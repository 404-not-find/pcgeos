/*
 **************************************************************************
 *  FILE:			export.goc
 *  PROJECT:		Breadbox Test Generator
 *  DESCRIPTION:	This file has methods for the export
 *			     functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ExportFileWrite (char* buffer, FileHandle fh)
 *
 * CALLED BY:	MSG_EXPORT_TEST_DATA
 *      	
 *
 * STRATEGY:    returns FALSE for no error TRUE for error
 *		
 *
 ***********************************************************************/
Boolean ExportFileWrite (char* buffer, FileHandle fh)
{
word			length, fileCloseError;


	/* now write the buffer to the .BTG file */
	length = FileWrite(fh, buffer, strlen(buffer), FALSE);
	/* check for write error */
	if (length != strlen(buffer))  {
		/* show message and bail out */
		NotifyDBox(0, @ExpWriteErrMsg);
		fileCloseError = FileClose(fh, FALSE);
		if (fileCloseError) NotifyDBox(0, @ExpCloseErrMsg);
		FilePopDir();
		@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		return (TRUE);
		}
	else  return (FALSE);

}


/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_EXPORT for TGenDocumentClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *                  is clicked
 *
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_OPEN_EXPORT
{
 char	fileName[14];
 byte	count;


    /* start out in Document folder */
    @call ExpFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

    /* set default name */
	 MemLock (OptrToHandle(@DefaultExpFileName));
	 @call ExpFileName::MSG_VIS_TEXT_REPLACE_ALL_PTR(
	 									LMemDeref(@DefaultExpFileName), 0);
	 MemUnlock (OptrToHandle(@DefaultExpFileName));

    /* Open the dialog box */
    @call ExportDBox::MSG_GEN_INTERACTION_INITIATE();

    /* select UNNAMED part of default name */
    @call ExpFileName::MSG_VIS_TEXT_GET_ALL_PTR(fileName);
    count = 0;
    while (fileName[count] != '.')  count++;

    @send ExpFileName::MSG_META_GRAB_FOCUS_EXCL();
    @send ExpFileName::MSG_META_GRAB_TARGET_EXCL(); 
    @send ExpFileName::MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, count);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_EXP_Q_SEL_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:	Handles export question selection boolean.
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_EXP_Q_SEL_BOOLEAN_STATUS
{

	if (selectedBooleans)
		@send ExpSelQTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	else @send ExpSelQTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_EXPORT_TEST_DATA for TGenDocumentClass
 *
 * DESCRIPTION:	 Creates the selected file and does the export
 *              
 *
 *              
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_EXPORT_TEST_DATA
{
 char		fileName[14], buffer[MAX_QUESTION_LENGTH+15],
			dataStr[MAX_QUESTION_LENGTH], numStr[13];
 char		TDPath[PATH_BUFFER_SIZE];
 FileHandle	TDFileHandle;
 DiskHandle	TDDiskhandle;
 word		i, j, size, fileCloseError, dataWord;
 byte		type;
 BasicDBFieldID	fieldID;
 MemHandle		mh;
 Boolean			allQ, thisQ;
 word			numSel, retSel, ss;
 word			selList[MAX_NUM_QUESTIONS];


	/* get the exp file name */
	@call ExpFileName::MSG_VIS_TEXT_GET_ALL_PTR(fileName);

	/* get the file's path and disk handle */
	@call ExpFileSel::MSG_GEN_PATH_GET(TDPath, sizeof(TDPath));
	TDDiskhandle = @call ExpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

	/* save our TGen file directory */
	FilePushDir();

	/* and set the TD file dir  - FileSel doesn't do this */
	FileSetCurrentPath(TDDiskhandle, TDPath);

	/* and create the TD file */
	TDFileHandle = FileCreate(fileName,
			       ((FILE_CREATE_ONLY | FCF_NATIVE)
			       | (FILE_ACCESS_RW | FILE_DENY_RW)),
			       0);
	/* if TDFileHandle is NULL then there was an error */
	if (!TDFileHandle)  {
		/* if file exists just tell user & wait for new name */
		if (ThreadGetError() == ERROR_FILE_EXISTS)  {
			NotifyDBox(fileName, @FileExistsErrMsg);
			}
		/* for any other error - bail out */
		else  {
			NotifyDBox(0, @ExpCreateErrMsg);
			@send ExportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
			}
		FilePopDir();
		return;
		}

	/* see if all or selected questions */
	allQ = @call ExpQSelectGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1);
	if(!allQ) {
		numSel = @call SDBDList::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
		retSel = @call SDBDList::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(
															 selList, numSel);
		}

	/* dismiss the file selector box now */
	@send ExportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

	/* mark app busy */
	@send TGenApp::MSG_GEN_APPLICATION_MARK_BUSY();

	/* init the file */
	strcpy(buffer, "[TGEN-DATA-FILE-V1]\r\n");
	if (ExportFileWrite (buffer, TDFileHandle)) return;

	/* OK - start exporting records */
	for (i = 0; i < (word)(g_numQuestions); i++)  {
		/* if not all questions selected do we want this question */
		if (allQ) thisQ = TRUE;
		else {
			thisQ = FALSE;
			for (ss = 0; ss < retSel; ss++) {
				if (i == selList[ss]) {
					thisQ = TRUE;
					break;
					}
				}
			}
		if (thisQ) {
			/* grab the record */
			if (pself->TGDI_bankCurrentIndex)
				BasicDBGetRecordByIndex(pself->GDI_fileHandle,
						pself->TGDI_bankDBHan,
						pself->TGDI_bankCurrentIndex,
						i, &mh);
			else
				BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
						pself->TGDI_bankDBHan,
						i, &mh);

			/* and now the fields */
			/* the type */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
			BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
			strcpy(buffer, "T:");
			MemLock (OptrToHandle(@MCLongText));
			switch (type) {
				case QTYPE_MC: strcat(buffer, LMemDeref(@MCLongText)); break;
				case QTYPE_TF: strcat(buffer, LMemDeref(@TFLongText)); break;
				case QTYPE_FILL: strcat(buffer, LMemDeref(@FFLongText)); break;
            }
			MemUnlock (OptrToHandle(@MCLongText));
			strcat(buffer, "\r\n");
			if (ExportFileWrite (buffer, TDFileHandle)) return;
			/* the question */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
			size = BasicDBGetFieldData(mh, fieldID, dataStr, MAX_QUESTION_LENGTH);
			if (size) {
				dataStr[size] = 0;
				strcpy(buffer, "Q:");
				strcat(buffer, dataStr);
				strcat(buffer, "\r\n");
				if (ExportFileWrite (buffer, TDFileHandle)) return;
				}
			/* the choices if QTYPE_MC */
			if (type == QTYPE_MC) {
				for (j = 0; j < 6; j++) {
					fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
														 FIELD_CAT_MCCHOICE_A+j, 1);
					size = BasicDBGetFieldData(mh, fieldID, dataStr,
														 MAX_QUESTION_LENGTH);
					if (size) {
						dataStr[size] = 0;
						buffer[0] = 'A'+j;
						buffer[1] = 0;
						strcat(buffer, ":");
						strcat(buffer, dataStr);
						strcat(buffer, "\r\n");
						if (ExportFileWrite (buffer, TDFileHandle)) return;
						}
					else break;
					}
				}  /* end of QTYPE_MC if */
			/* the answer */
			strcpy(buffer, "W:");
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
			if (type == QTYPE_FILL) {
				size = BasicDBGetFieldData(mh, fieldID, dataStr, MAX_QUESTION_LENGTH);
				if (size) {
					dataStr[size] = 0;
					strcat(buffer, dataStr);
					}
				}
			else  {
				BasicDBGetFieldData(mh, fieldID, &dataWord, sizeof(word));
				if (type == QTYPE_MC)  {
					size = strlen(buffer);
					buffer[size] = 'A'+dataWord-1;
					buffer[size+1] = 0;
					}
				else  {
					MemLock (OptrToHandle(@TrueText));
					if (dataWord == TF_TRUE)
						strcat(buffer, LMemDeref(@TrueText));
					else
						strcat(buffer, LMemDeref(@FalseText));
					MemUnlock (OptrToHandle(@TrueText));
					}
				}
			strcat(buffer, "\r\n");
			if (ExportFileWrite (buffer, TDFileHandle)) return;
			/* the answer lines if free form */
			if (type == QTYPE_FILL) {
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
				                                  FIELD_CAT_FREE_ANS_LINES, 1);
				BasicDBGetFieldData(mh, fieldID, &dataWord, sizeof(word));
				strcpy(buffer, "L:");
				UtilHex32ToAscii(numStr, (dword) dataWord, UHTAF_NULL_TERMINATE);
				strcat(buffer, numStr);
				strcat(buffer, "\r\n");
				if (ExportFileWrite (buffer, TDFileHandle)) return;
				}

			BasicDBDiscardRecord(mh);

			/* end the record */
			strcpy(buffer, "X\r\n");
			if (ExportFileWrite (buffer, TDFileHandle)) return;
			} /* end of we want this question if */
		}  /* end of loop thru questions for */

	/* Done so close the file */
	fileCloseError = FileClose(TDFileHandle, FALSE);
	if (fileCloseError) NotifyDBox(0, @ExpCloseErrMsg);
	FilePopDir();
	@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_SELECT_QUESTIONS for TGenDocumentClass
 *
 * DESCRIPTION:	Opens the select questions dialog box.
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_OPEN_SELECT_QUESTIONS
{


	/* initialize the list */
	@call SDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
	@call SDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	@call SDBQsSelected::MSG_VIS_TEXT_REPLACE_ALL_PTR("0", 0);

	/* en/disable the buttons */
	@send SDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

	/* open the dbox */
	@call SelQDBox::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_SEL_Q_CLEAR_ALL for TGenDocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:  
 *
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_SEL_Q_CLEAR_ALL
{

	@call SDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	@send SDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SDBQsSelected::MSG_VIS_TEXT_REPLACE_ALL_PTR("0", 0);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SEL_Q_DLIST_APPLY for TGenDocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_SEL_Q_DLIST_APPLY
{
 char		numStr[13];


	/* en/disable the button */
	if (numSelections)
		@send SDBClear::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	else
		@send SDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

	/* show how many selections */
	UtilHex32ToAscii(numStr, (dword)numSelections, UHTAF_NULL_TERMINATE);
	@call SDBQsSelected::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SEL_Q_DLIST_MONIKER_QUERY for TGenDocumentClass
 *
 * DESCRIPTION:	Queries for monikers for export sel questions list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_SEL_Q_DLIST_MONIKER_QUERY
{
 MemHandle		mh;
 char			qString[50], fullString[60];
 word			size;
 byte			type;
 BasicDBFieldID	fieldID;


	/* open the record */
	if (pself->TGDI_bankCurrentIndex)
		BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									  pself->TGDI_bankDBHan,
									  pself->TGDI_bankCurrentIndex,
									  item, &mh);
	else
		BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									  pself->TGDI_bankDBHan,
									  item, &mh);

	/* get the type */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
										 FIELD_CAT_Q_TYPE, 1);
	BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
	MemLock (OptrToHandle(@MCAbbrText));
	if(type == QTYPE_MC)
		strcpy(fullString, LMemDeref(@MCAbbrText));
	else if(type == QTYPE_TF)
		strcpy(fullString, LMemDeref(@TFAbbrText));
	else
		strcpy(fullString, LMemDeref(@FFAbbrText));
	MemUnlock (OptrToHandle(@MCAbbrText));

	/* and the question */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
										 FIELD_CAT_QUESTION, 1);
	size = BasicDBGetFieldData(mh, fieldID, qString, 50);
	if (size >= 50)
		qString[50] = 0;
	else
		qString[size] = 0;
	strcat(fullString, qString);
	BasicDBDiscardRecord(mh);

	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fullString);

}


