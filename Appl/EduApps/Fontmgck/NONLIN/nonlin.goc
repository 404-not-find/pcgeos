/***********************************************************************
 *
 *      Portions Copyright (c) GeoWorks 1991-92 -- All Rights Reserved
 *
 * PROJECT:       FontMagick
 * FILE:          nonlin.goc - nonlinear transformation routines
 *
 * AUTHOR:        Marcus Gr”ber
 *
 ***********************************************************************/
@include <stdapp.goh>
#include <graphics.h>
#include <gstring.h>
#include <math.h>

#include "fontmagi.h"

/* "signed" version of IntegerOf macro (sign important in shift operation) */
#define sIntegerOf(op) ((sword) (((sdword) (op)) >> 16))

/*
   These must be static variables to keep Borland C from creating code that
   blows up the borlandc.geo float emulator.
 */
PointDWord corner1,corner2;
PointDWord reference;

void XlatePoint(Point *p,GStateHandle gs,struct Distortion_struct *trans)
{
        PointDWord center;
        sdword width,height;
        PointDWord p1,p2;
        dword v_ref;                    /* vertical reference line */
        sword updown;                   /* +1 for "down", -1 for "up" */
        WWFixedAsDWord wfact,wpos,wdiv;

        width=corner2.PD_x-corner1.PD_x;
        height=corner2.PD_y-corner1.PD_y;
        center.PD_x=(corner1.PD_x+corner2.PD_x)/2;
        center.PD_y=(corner1.PD_y+corner2.PD_y)/2;
                                      /* compute important data of effect */

        GrTransformDWord(gs, p->P_x, p->P_y, &p1);

        switch( (trans->options & OPT_VREF) >> OPT_VREF_OFFSET )
                                        /* select vertical line of reference */
        {
          case VREF_TOP:
            reference.PD_y=corner1.PD_y;
            break;
          case VREF_BOTTOM:
            reference.PD_y=corner2.PD_y;
            break;
          case VREF_CENTER:
          default:
            reference.PD_y=center.PD_y;
            break;
        }

        if( trans->options & OPT_BEND_UP )
          updown=-1;                    /* set factor for up/down mirroring */
        else
          updown=+1;

        wfact = GrSDivWWFixed(MakeWWFixed(trans->sizeFactor),MakeWWFixed(100));

        switch( trans->distortion )
        {
          case DIST_INFLATE:
            wdiv = GrSDivWWFixed(
              MakeWWFixed(p1.PD_x-center.PD_x),
              MakeWWFixed(width/2));
            p1.PD_y = reference.PD_y +
              sIntegerOf(GrMulWWFixed(
                MakeWWFixed(p1.PD_y-reference.PD_y),
                MakeWWFixed(1)+GrMulWWFixed(
                  wfact-MakeWWFixed(1),
                  MakeWWFixed(1)-GrMulWWFixed(wdiv,wdiv))));
            break;

          case DIST_INFLATE_P:
            wdiv = GrSDivWWFixed(
              MakeWWFixed(p1.PD_x-center.PD_x),
              MakeWWFixed(width/2));
            if((sdword)wdiv<0) wdiv=-wdiv;
            p1.PD_y = reference.PD_y +
              sIntegerOf(GrMulWWFixed(
                MakeWWFixed(p1.PD_y-reference.PD_y),
                MakeWWFixed(1)+GrMulWWFixed(
                  wfact-MakeWWFixed(1),
                  MakeWWFixed(1)-wdiv)));
            break;

          case DIST_BEND:
            wdiv = GrSDivWWFixed(
              MakeWWFixed(p1.PD_x-center.PD_x),
              MakeWWFixed(width/2));
            p1.PD_y += updown*sIntegerOf(
              GrMulWWFixed(
                GrMulWWFixed(
                  MakeWWFixed(height),
                  GrMulWWFixed(wdiv,wdiv)),
                wfact));
            break;

          case DIST_BOOK:
            wdiv = GrSDivWWFixed(
              MakeWWFixed(p1.PD_x-center.PD_x),
              MakeWWFixed(width/2));
            if((sdword)wdiv<0) wdiv=-wdiv;
            p1.PD_y += updown*sIntegerOf(
              GrMulWWFixed(
                GrMulWWFixed(
                  MakeWWFixed(height),
                  wdiv),
                wfact));
            break;

          case DIST_SINE:
            p1.PD_y += updown * sIntegerOf(
              GrMulWWFixed(
                GrMulWWFixed(
                  MakeWWFixed(height),
                  GrQuickSine(
                    GrMulWWFixed(
                      MakeWWFixed(p1.PD_x-corner1.PD_x),
                      GrSDivWWFixed(
                        MakeWWFixed(trans->waveNumber * 360),
                        MakeWWFixed(width))))),
                wfact));
            break;

          case DIST_CIRC:
            wdiv=GrSDivWWFixed(MakeWWFixed(width),MakeWWFixed(trans->angle));
            wpos=GrMulWWFixed(wdiv,MakeWWFixed(180/3.14159));
            if(updown>0)
            {
              p2.PD_x = corner1.PD_x+height+sIntegerOf(wpos-
                GrMulWWFixed(
                  GrQuickCosine( MakeWWFixed(90)+
                    GrSDivWWFixed(
                      MakeWWFixed(p1.PD_x-center.PD_x),
                      wdiv)),
                  wpos+MakeWWFixed(corner2.PD_y-p1.PD_y)));
              p2.PD_y = corner1.PD_y+height+sIntegerOf(wpos-
                GrMulWWFixed(
                  GrQuickSine( MakeWWFixed(90)+
                    GrSDivWWFixed(
                      MakeWWFixed(p1.PD_x-center.PD_x),
                      wdiv)),
                  wpos+MakeWWFixed(corner2.PD_y-p1.PD_y)));
            }
            else
            {
              p2.PD_x = corner1.PD_x+height+sIntegerOf(wpos-
                GrMulWWFixed(
                  GrQuickCosine( MakeWWFixed(90)+
                    GrSDivWWFixed(
                      MakeWWFixed(p1.PD_x-center.PD_x),
                      wdiv)),
                  wpos+MakeWWFixed(p1.PD_y-corner1.PD_y)));
              p2.PD_y = corner1.PD_y-height-sIntegerOf(wpos-
                GrMulWWFixed(
                  GrQuickSine( MakeWWFixed(90)+
                    GrSDivWWFixed(
                      MakeWWFixed(p1.PD_x-center.PD_x),
                      wdiv)),
                  wpos+MakeWWFixed(p1.PD_y-corner1.PD_y)));
            }
            p1=p2;
            break;
        }

        wfact = GrSDivWWFixed(
          MakeWWFixed(trans->perspectiveFactor),MakeWWFixed(100));

        switch( trans->dist_pers )
        {
          case DIST_PERS_BF:
            wpos = GrSDivWWFixed(
              MakeWWFixed(p1.PD_x-corner1.PD_x),
              MakeWWFixed(width));
            p1.PD_y = center.PD_y+sIntegerOf(
              GrMulWWFixed(
                MakeWWFixed(p1.PD_y-center.PD_y),
                wfact + GrMulWWFixed(MakeWWFixed(1)-wfact,wpos)
              ));
            p1.PD_x = corner1.PD_x+sIntegerOf(
              GrMulWWFixed(
                MakeWWFixed(p1.PD_x-corner1.PD_x),
                wfact + (sdword)GrMulWWFixed(MakeWWFixed(1)-wfact,wpos)/2
              ));
            break;

          case DIST_PERS_AB:
            wpos = GrSDivWWFixed(
              MakeWWFixed(p1.PD_y-corner1.PD_y),
              MakeWWFixed(height));
            p1.PD_x = center.PD_x+sIntegerOf(
              GrMulWWFixed(
                MakeWWFixed(p1.PD_x-center.PD_x),
                wfact + GrMulWWFixed(MakeWWFixed(1)-wfact,wpos)
              ));
            p1.PD_y = corner1.PD_y+sIntegerOf(
              GrMulWWFixed(
                MakeWWFixed(p1.PD_y-corner1.PD_y),
                wfact + (sdword)GrMulWWFixed(MakeWWFixed(1)-wfact,wpos)/2
              ));
            break;
        }

        GrUntransformDWord(gs, p1.PD_x, p1.PD_y, &p2);
        p->P_x=(sword)p2.PD_x;
        p->P_y=(sword)p2.PD_y;
}

void DrawGStringNonlinearTransform(GStateHandle gstate,GStateHandle gstate2,
  sword x,sword y,struct Distortion_struct *trans)
{
    word elm,elm_last,elmsize;
    GSRetType gsr;
    Point p,cur,cur_t;

    struct {
      byte cmd;
      union {
        sword coord;
        Point points[4];
        PointWWFixed pwf;
      } arg;
    } element;


    for(gsr = GrDrawGString(gstate,gstate2,x,y,GSC_ONE,&elm);
        gsr == GSRT_ONE;
        gsr = GrDrawGString(gstate,gstate2,x,y,GSC_ONE,&elm))
    {
        GrGetGStringElement(gstate,gstate2,sizeof(element),&element,&elmsize);
        switch(elm)
        {
          case GR_MOVE_TO:              /* remove move_to's */
            cur=element.arg.points[0];  /* store untranslated position */
            XlatePoint(element.arg.points,gstate,trans);
            cur_t=element.arg.points[0];/* store translated position */
            GrSetGStringPos(gstate2,GSSPT_SKIP_1,0);
            break;

          case GR_DRAW_CURVE_TO:
          case GR_DRAW_REL_CURVE_TO:
          case GR_DRAW_HLINE_TO:
          case GR_DRAW_VLINE_TO:
          case GR_DRAW_LINE_TO:
          case GR_DRAW_REL_LINE_TO:
            if(elm==GR_DRAW_REL_CURVE_TO)
            {
              element.arg.points[0].P_x+=cur.P_x;
              element.arg.points[0].P_y+=cur.P_y;
              element.arg.points[1].P_x+=cur.P_x;
              element.arg.points[1].P_y+=cur.P_y;
              element.arg.points[2].P_x+=cur.P_x;
              element.arg.points[2].P_y+=cur.P_y;
            }
            else if(elm!=GR_DRAW_CURVE_TO)
            {
              if(elm==GR_DRAW_HLINE_TO)
              {
                element.arg.points[0].P_x=element.arg.coord;
                element.arg.points[0].P_y=cur.P_y;
              }
              else if(elm==GR_DRAW_VLINE_TO)
              {
                element.arg.points[0].P_y=element.arg.coord;
                element.arg.points[0].P_x=cur.P_x;
              }
              else if(elm==GR_DRAW_REL_LINE_TO)
              {
                p.P_x=cur.P_x+element.arg.pwf.PF_x.WWF_int;
                p.P_y=cur.P_y+element.arg.pwf.PF_y.WWF_int;
                element.arg.points[0].P_x=p.P_x;
                element.arg.points[0].P_y=p.P_y;
              }
              /* turn a line into a curve... */
              element.arg.points[2].P_x=element.arg.points[0].P_x;
              element.arg.points[2].P_y=element.arg.points[0].P_y;
              element.arg.points[0].P_x=(2*cur.P_x+element.arg.points[2].P_x)/3;
              element.arg.points[0].P_y=(2*cur.P_y+element.arg.points[2].P_y)/3;
              element.arg.points[1].P_x=(cur.P_x+2*element.arg.points[2].P_x)/3;
              element.arg.points[1].P_y=(cur.P_y+2*element.arg.points[2].P_y)/3;
            }
            cur=element.arg.points[2];  /* store new current position */

            XlatePoint(element.arg.points+0,gstate,trans);
            XlatePoint(element.arg.points+1,gstate,trans);
            XlatePoint(element.arg.points+2,gstate,trans);

            if(elm_last==GR_MOVE_TO)
            {
              element.arg.points[3]=element.arg.points[2];
              element.arg.points[2]=element.arg.points[1];
              element.arg.points[1]=element.arg.points[0];
              element.arg.points[0]=cur_t;
              GrDrawCurve(gstate,element.arg.points);
              cur_t=element.arg.points[3];
            }
            else
            {
              GrDrawCurveTo(gstate,element.arg.points);
              cur_t=element.arg.points[2];
            }

            GrSetGStringPos(gstate2,GSSPT_SKIP_1,0);
            break;

          case GR_COMMENT:              /* remove comments from gstring */
            GrSetGStringPos(gstate2,GSSPT_SKIP_1,0);
            break;
        }
        elm_last=elm;
    }
}
