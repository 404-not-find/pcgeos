/***********************************************************************
 *
 *  Copyright (c) Breadbox Computer Company LLC 2001 -- All Rights Reserved
 *
 * PROJECT:   Kids' NUMBERS
 * MODULE:    sounds
 * FILE:      sounds.goc
 *
 * AUTHOR:    John Howard
 *
 * REVISION HISTORY:
 *  Date        Name                Description
 *  ----        ----                -----------
 *  10/01		jfh						all taken from Thinker Pro sound stuff
 *
 *
 ************************************************************************/

@include "numbers.goh"
@include <stdapp.goh>
@include <Ansi/string.h>

/* Generic return value for bad indexes into arrays */
#define INDEX_NONE                  0xFFFF

/* Maximum number of levels actually in the tables */
#define MAX_LEVELS                  10

/* Number of sounds to allow to be played simultaneously */
#define MAX_SOUND_CHANNELS          2

/* Sounds below this frequency are not played */
#define SOUND_FREQ_CUTOFF           30

/* Structure of a single sound */
typedef struct {
    word length ;
    word priority ;

    #define MAX_SOUND_SAMPLES  100
    word samples[MAX_SOUND_SAMPLES] ;
} T_simplePCSound ;

typedef struct {
    word soundNum ;             /* Value of INDEX_NONE means no sound */
    word pos      ;             /* Position within sample list */
    word priority ;             /* Level priority of sound */
} T_soundState ;

/* Timer used to update sound */
TimerHandle G_soundTimer = NullHandle ;
word G_soundTimerId ;

T_simplePCSound G_sounds[16] ;
T_soundState G_channelArray[MAX_SOUND_CHANNELS] ;
Boolean G_soundIsOn = TRUE ;
Boolean G_soundIsRunning = FALSE ;


void PlayFrequency(word freq, word duration) ;
void ResetSound(void) ;
void SoundsWaitUntilDone(void) ;
word RandomNumber(void) ;



/*=========================================================================*
 *  ROUTINES:
 *=========================================================================*/

/*-------------------------------------------------------------------------
 | Routine:  LoadSounds
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Load the sounds to be played later.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void LoadSounds(void)
{
    FileHandle file ;

    ResetSound() ;
    memset(G_sounds, 0, sizeof(G_sounds)) ;

    FilePushDir() ;
    FileSetCurrentPath(SP_PRIVATE_DATA, "thinker");
    file = FileOpen("sounds.dat", FILE_DENY_NONE|FILE_ACCESS_R) ;
    if (file)  {
        FileRead(file, &G_sounds, sizeof(G_sounds), FALSE) ;
        FileClose(file, FALSE) ;
    }
    FilePopDir() ;
}

/*-------------------------------------------------------------------------
 | Routine:  PlayFrequency
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Play a frequency on the PC Speaker (with logical checks)
 |
 | Inputs:
 |    word freq                   -- Frequency to use (per GEOS sound.h)
 |    word duration               -- Length of time in 1/60ths of a second
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void PlayFrequency(word freq, word duration)
{
    static word lastFreq = 0xFFFF ;

    if (freq == lastFreq)
        if (RandomNumber()&1)
            freq-- ;
        else
            freq++ ;
    lastFreq = freq ;
    UserStandardSound(SST_CUSTOM_NOTE, freq, duration) ;
}

/*-------------------------------------------------------------------------
 | Routine:  PlaySimpleSound
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Plays a banked sound out the PC speaker.  Actually just sets up
 |    the sound for playing.
 |
 | Inputs:
 |    word soundId                -- Index into G_sounds
 |    word priority               -- 0-65535 priority level if the given
 |                                   sound doesn't have a priority already.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void PlaySimpleSound(word soundId, word priority)
{
    T_simplePCSound *p_sound ;
    word i ;
    word best = INDEX_NONE ;
    word bestPriority = 0xFFFF ;
    T_soundState *p_channel ;

    if (G_soundIsOn)  {
        p_sound = G_sounds + soundId ;
        if (p_sound->priority)
            priority = p_sound->priority ;

        /* Find the best free channel or one with a lower priority */
        for (i=0, p_channel=G_channelArray;
             i<MAX_SOUND_CHANNELS;
             i++, p_channel++)  {
            /* Take emty channels immediately */
            if (p_channel->soundNum == INDEX_NONE)  {
                best = i ;
                bestPriority = 0xFFFF ;
                break ;
            }

            /* Otherwise, look for the lowest priority sound */
            if (p_channel->priority <= bestPriority)  {
                best = i ;
                bestPriority = p_channel->priority ;
            }
        }

        /* Only process the sound if we found a channel */
        /* and the lowest priority sound is lower or equal to what we */
        /* want to play */
        if ((best != INDEX_NONE) &&
            ((bestPriority <= priority) || (bestPriority==0xFFFF)))  {
            p_channel = G_channelArray + best ;
            p_channel->soundNum = soundId ;
            p_channel->pos = 0 ;
            p_channel->priority = priority ;
        }
    }
}

/*-------------------------------------------------------------------------
 | Routine:  RandomNumber
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Generate a RandomNumber of value 0 to 65535.
 |
 | Outputs:
 |    word                        -- 0 to 65535 number
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/31/99  Created
 |
 *-----------------------------------------------------------------------*/
word RandomNumber(void)
{
    static word rand1 = 0xf32d ;
    static word rand2 = 0x0103 ;
    static word rand3 = 0x4326 ;
    static word rand4 = 0x4878 ;
    word old ;

    old = rand1 ;
    rand1 = rand2 ;
    rand2 = rand3 ;
    rand3 = rand4 ;
    rand4 ^= old^rand1^rand2^rand3 ;
    rand3 += rand1+rand2+rand4 ;
    rand4 >>= 1 ;
    rand4 |= (old&0x8000) ;
    rand4 += TimerGetCount() ;
    rand2 ^= 0xFFFF ;
    return old ;
}

/*-------------------------------------------------------------------------
 | Routine:  ResetSound
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Reset the sound effects
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void ResetSound(void)
{
    word i ;

    for (i=0; i<MAX_SOUND_CHANNELS; i++)  {
        G_channelArray[i].soundNum = INDEX_NONE ;
        G_channelArray[i].pos = 0 ;
        G_channelArray[i].priority = 0 ;
    }
}

/*-------------------------------------------------------------------------
 | Routine:  SoundStart
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Start the sound system (mainly timer)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void SoundStart(void)
{
    if (!G_soundIsRunning)  {
        G_soundIsRunning = TRUE ;
        if (!G_soundTimer)
            G_soundTimer = TimerStart(
                           TIMER_EVENT_ONE_SHOT,
                           ConstructOptr(GeodeGetCodeProcessHandle(), 0),
                           1,
                           MSG_KN_PROCESS_UPDATE_SOUND,
                           1,
                           &G_soundTimerId) ;
    }
}

/*-------------------------------------------------------------------------
 | Routine:  SoundStop
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Stops the sound system (mainly timer)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void SoundStop(void)
{
    if (G_soundIsRunning)  {
        G_soundIsRunning = FALSE ;
        if (G_soundTimer)  {
            TimerStop(G_soundTimer, G_soundTimerId) ;
            G_soundTimer = NullHandle ;
        }
    }
}

/*-------------------------------------------------------------------------
 | Routine:  SoundsWaitUntilDone
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Updates the sound effects until we are done.  Also stops the sound
 |    system.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void SoundsWaitUntilDone(void)
{
    word i ;
    Boolean isSoundPlaying ;

    SoundStop() ;

    do {
        isSoundPlaying = FALSE ;
        for (i=0; i<MAX_SOUND_CHANNELS; i++)  {
            if (G_channelArray[i].soundNum != INDEX_NONE)  {
                isSoundPlaying = TRUE ;
                break ;
            }
        }

        /* Stop if finally no sound is playing */
        if (!isSoundPlaying)
            break ;
        UpdateSound() ;
        TimerSleep(1) ;
    } while (1) ;
}

/*-------------------------------------------------------------------------
 | Routine:  UpdateSound
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Update the sound effects using the current settings.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  04/01/99  Created
 |
 *-----------------------------------------------------------------------*/
void UpdateSound(void)
{
    static word channel = 0 ;
    T_soundState *p_state ;
    T_simplePCSound *p_sound ;
    word sample ;

    p_state = G_channelArray + channel ;
    if (p_state->soundNum != INDEX_NONE)  {
        p_sound = G_sounds + p_state->soundNum ;
        sample = p_sound->samples[p_state->pos] ;
        if (sample > SOUND_FREQ_CUTOFF)  {
            /* Play that frequency */
            PlayFrequency(sample, 1) ;
            p_state->pos++ ;
        } else if (sample == 0)  {
            /* Sound is done.  Stop here */
            p_state->soundNum = INDEX_NONE ;
            p_state->priority = 0 ;
            p_state->pos = 0 ;
        } else {
            p_state->pos++ ;
        }
    }

    /* Go to the next channel next time */
    channel = ((channel+1)%MAX_SOUND_CHANNELS) ;
}
