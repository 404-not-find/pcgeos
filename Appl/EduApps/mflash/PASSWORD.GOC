@include <stdapp.goh>
@include <Ansi\string.h>
@include "password.goh"
@include <initfile.h>

@extern object PwdPasswordChangeTrigger ;
@extern object PwdAskPasswordDialog ;
@extern object PwdChangePasswordHint ;
@extern object PwdChangePasswordNote ;
@extern object PwdChangePasswordError ;
@extern object PwdChangePasswordDialog ;
@extern object PwdPasswordText ;
@extern object PwdHintText ;
@extern object PwdPasswordOKTrigger ;
@extern object PwdChangePassword1 ;
@extern object PwdChangePassword2 ;
@extern object PwdChangePasswordOK ;
@extern chunk PwdBadPassword ;

/*-------------------------------------------------------------------------
 | Routine:  PwdAskPassword
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Ask for a password in a dialog and return.
 |
 | Inputs:
 |    TCHAR *p_enteredPassword    -- returned password if entered
 |    TCHAR *p_hint               -- Textual hint to give to user
 |                                   (or pass \0 if none)
 |    Boolean askChange           -- TRUE if you want a "Change Password"
 |                                   option.
 |
 | Outputs:
 |    AskPasswordResult           -- Returned code value
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/16/99  Created
 |    LES  06/23/99  Changed to support a 'change' button
 |
 *-----------------------------------------------------------------------*/

AskPasswordResult PwdAskPassword(T_password *p_password, Boolean askChange)
{
    InteractionCommand answer ;
    AskPasswordResult result = ASK_PASSWORD_RESULT_CANCEL ;

    /* Delete any old password */
    @call PwdPasswordText::MSG_VIS_TEXT_DELETE_ALL() ;
    if (p_password->P_hint[0])  {
        @call PwdHintText::MSG_VIS_TEXT_REPLACE_ALL_PTR(p_password->P_hint, 0) ;
        @call PwdHintText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    } else {
        @call PwdHintText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    }
    @call PwdPasswordOKTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    if (askChange)  {
        UITurnOn(@PwdPasswordChangeTrigger) ;
    } else {
        UITurnOff(@PwdPasswordChangeTrigger) ;
    }

    answer = UserDoDialog(@PwdAskPasswordDialog) ;
    if (answer == IC_OK)  {
        /* User is trying to enter a password */
        /* Get the entered data */
        result = ASK_PASSWORD_RESULT_OK ;
        @call PwdPasswordText::MSG_VIS_TEXT_GET_ALL_PTR(p_password->P_password) ;
    }
    if (answer == IC_RESET)  {
        result = ASK_PASSWORD_RESULT_CHANGE ;
        @call PwdPasswordText::MSG_VIS_TEXT_GET_ALL_PTR(p_password->P_password) ;
    }

    return result ;
}

/*-------------------------------------------------------------------------
 | Routine:  PwdChangePassword
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Ask for a new password in a dialog and return.
 |
 | Inputs:
 |    T_password *p_password      -- Old hint and place for new password
 |    Boolean changeHint          -- TRUE if you want the user to change
 |                                   the hint right.
 |
 | Outputs:
 |    Boolean                     -- FALSE if aborted, else TRUE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/22/99  Created
 |
 *-----------------------------------------------------------------------*/

Boolean PwdChangePassword(T_password *p_password, Boolean changeHint)
{
    InteractionCommand answer ;
    Boolean havePassword = FALSE ;
    char password1[PASSWORD_MAX_LENGTH+1] ;
    char password2[PASSWORD_MAX_LENGTH+1] ;
    Boolean repeat ;

    ECCheckStack() ;
    memset(password1, 0, sizeof(password1)) ;
    memset(password2, 0, sizeof(password2)) ;
    @call PwdChangePasswordHint::MSG_VIS_TEXT_REPLACE_ALL_PTR(p_password->P_hint, 0) ;
    do {
        repeat = FALSE ;

        /* Delete any old password */
        @call PwdChangePassword1::MSG_VIS_TEXT_DELETE_ALL() ;
        @call PwdChangePassword2::MSG_VIS_TEXT_DELETE_ALL() ;
        @call PwdChangePasswordOK::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;

        if (changeHint)  {
            UITurnOn(@PwdChangePasswordHint) ;
            UITurnOn(@PwdChangePasswordNote) ;
        } else {
            UITurnOff(@PwdChangePasswordHint) ;
            UITurnOff(@PwdChangePasswordNote) ;
        }

        @call PwdChangePassword1::MSG_META_GRAB_FOCUS_EXCL() ;
        @call PwdChangePassword1::MSG_META_GRAB_TARGET_EXCL() ;
        answer = UserDoDialog(@PwdChangePasswordDialog) ;
        if (answer == IC_OK)  {
            /* User is trying to enter a new password */
            /* Get the entered data and return positively (if matched) */
            @call PwdChangePassword1::MSG_VIS_TEXT_GET_ALL_PTR(password1) ;
            @call PwdChangePassword2::MSG_VIS_TEXT_GET_ALL_PTR(password2) ;
            if (strcmp(password1, password2)==0)  {
                strcpy(p_password->P_password, password1) ;
                @call PwdChangePasswordHint::MSG_VIS_TEXT_GET_ALL_PTR(
                          p_password->P_hint) ;
                havePassword = TRUE ;
            } else {
                /* Display an error message */
                GEOSMessageBox(
                    @PwdChangePasswordError,
                    CDT_ERROR,
                    GIT_NOTIFICATION) ;

                repeat = TRUE ;
            }
        }
    } while (repeat) ;

    /* Clear the old text out of memory */
    @call PwdChangePassword1::MSG_VIS_TEXT_DELETE_ALL() ;
    @call PwdChangePassword2::MSG_VIS_TEXT_DELETE_ALL() ;

    /* Return with our status */
    return havePassword ;
}

/*-------------------------------------------------------------------------
 | Routine:  PwdComparePasswords
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Compare two passwords by decrypting and seeing if the password
 |    appears.
 |
 | Inputs:
 |    T_password *p_entered       -- Password recently entered
 |    T_password *p_stored        -- Password to compare to
 |
 | Outputs:
 |    Boolean                     -- TRUE if passwords match, else FALSE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/21/99  Created
 |    LES  06/24/99  Removed use of 'index' parameter (was never used)
 |
 *-----------------------------------------------------------------------*/

Boolean PwdComparePasswords(
         T_password *p_entered,
         T_password *p_stored)
{
    Boolean isMatch = FALSE ;

    ECCheckStack() ;

    if (strncmp(p_entered->P_password, p_stored->P_password, PASSWORD_MAX_LENGTH)==0)
        isMatch = TRUE ;

    return isMatch ;
}

/*-------------------------------------------------------------------------
 | Routine:  GEOSMessageBox
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Short hand method of doing a UserStandardDialogOptr call.
 |
 | Inputs:
 |    optr string                 -- Message to display
 |    CustomDialogType type       -- Type of dialog (CDT_ERROR?)
 |    GenInteractionType itype    -- Type of dialog question (GIT_NOTIF?)
 |
 | Outputs:
 |    InteractionCommand          -- Answer to question
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/22/99  Created
 |
 *-----------------------------------------------------------------------*/

InteractionCommand GEOSMessageBox(
                       optr string,
                       CustomDialogType type,
                       GenInteractionType itype)
{
    ECCheckStack() ;
    return UserStandardDialogOptr(
               NullHandle,
               NullHandle,
               NullHandle,
               NullHandle,
               string,
               (type << CDBF_DIALOG_TYPE_OFFSET) |
                  (itype << CDBF_INTERACTION_TYPE_OFFSET)) ;
}

/*-------------------------------------------------------------------------
 | Routine:  UITurnOff
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Disable an UI object
 |
 | Inputs:
 |    optr object                 -- item to turn off
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/16/99  Created
 |
 *-----------------------------------------------------------------------*/

void UITurnOff(optr object)
{
    @call object::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call object::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
}

/*-------------------------------------------------------------------------
 | Routine:  UITurnOn
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Enable an UI object
 |
 | Inputs:
 |    optr object                 -- item to turn off
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/16/99  Created
 |
 *-----------------------------------------------------------------------*/

void UITurnOn(optr object)
{
    @call object::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call object::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
}

/*-------------------------------------------------------------------------
 | Routine:  PwdCheckPasswordInINI
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Does the work of checking if there is a password in the .ini and
 |    if so, may allow the user to change it.
 |
 | Inputs:
 |    optr object                 -- item to turn off
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/16/99  Created
 |
 *-----------------------------------------------------------------------*/

Boolean PwdCheckPasswordInINI(
            char *category,
            char *key,
            Boolean askChange,
            Boolean useHint)
{
    T_password password ;
    T_password entered ;
    word size ;
    Boolean doRepeat ;
    AskPasswordResult result ;
    Boolean isMatch ;
    word i ;

    do {
        /* Read in the password and hint from the ini file (if any) */
        isMatch = FALSE ;
        doRepeat = FALSE ;
        if (!InitFileReadDataBuffer(
                category,
		        key,
		        &password,
                sizeof(password),
                &size))  {
            /* Unencode the password with a simple XOR trick */
            for (i=0; i<sizeof(password); i++)
                ((byte *)(&password))[i] ^= (byte)((i+1)*119) ;
        } else {
            /* Clear the data if we didn't find any */
            memset(&password, 0, sizeof(password)) ;
        }

        /* If no hints supported, make sure there is no hint */
        if (!useHint)
            password.P_hint[0] = '\0' ;

        memcpy(&entered, &password, sizeof(entered)) ;
        result = PwdAskPassword(&entered, askChange) ;
        switch (result)   {
            default:
            case ASK_PASSWORD_RESULT_CANCEL:
                break ;
            case ASK_PASSWORD_RESULT_OK:
                /* Compare passwords and see if we have a match */
                if (strcmp(entered.P_password, password.P_password)==0)
                    isMatch = TRUE ;
                else
                    GEOSMessageBox(
                        @PwdBadPassword,
                        CDT_ERROR,
                        GIT_NOTIFICATION) ;
                break ;
            case ASK_PASSWORD_RESULT_CHANGE:
                /* Change only allowed when we have a match */
                if (strcmp(entered.P_password, password.P_password)==0)  {
                    if (PwdChangePassword(&entered, useHint))  {
                        /* If we got a good request to change, encrypt */
                        /* and store the password */
                        for (i=0; i<sizeof(entered); i++)
                            ((byte *)(&entered))[i] ^= (byte)((i+1)*119) ;
                        InitFileWriteData(
                            category,
		                    key,
		                    &entered,
                            sizeof(entered)) ;
                        InitFileCommit() ;
                    }

                    doRepeat = TRUE ;
                } else  {
                    GEOSMessageBox(
                        @PwdBadPassword,
                        CDT_ERROR,
                        GIT_NOTIFICATION) ;
                }
                break ;
        }
    } while (doRepeat) ;

    return isMatch ;
}
