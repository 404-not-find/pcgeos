#ifndef _MAPBOARD_H_
#define _MAPBOARD_H_

typedef struct {
    char digit ;
    word x ;
    word y ;
//    char cmd ;         /* 0 for digit, 1 for hide line */
} T_step ;

typedef struct {
#define MAP_BOARD_WIDTH 16
#define MAP_BOARD_HEIGHT 16
#define MAP_BOARD_UNDERLINE_OFF  ((sword)-1)
#define MAP_BOARD_MAX_STEPS   100
    char board[MAP_BOARD_HEIGHT][MAP_BOARD_WIDTH] ;
    char correctBoard[MAP_BOARD_HEIGHT][MAP_BOARD_WIDTH] ;
    char checkBoard[MAP_BOARD_HEIGHT][MAP_BOARD_WIDTH] ;
    sword underline[MAP_BOARD_HEIGHT][2] ;
    T_step steps[MAP_BOARD_MAX_STEPS] ;
    word numSteps ;
    word stepIndex ;
    Rectangle inval ;
    Boolean needInval ;
} T_mapBoard ;

void MapBoardInit(T_mapBoard *mapBoard) ;
sdword MapBoardGetNum(T_mapBoard *mapBoard, sword x, sword y, word count) ;
void MapBoardSetNum(T_mapBoard *mapBoard, sword x, sword y, sdword value, word width) ;
void MapBoardSetSquare(T_mapBoard *mapBoard, word x, word y, char c) ;
void MapBoardSetCheckSquare(T_mapBoard *mapBoard, word x, word y, char c) ;
char MapBoardGetSquare(T_mapBoard *mapBoard, word x, word y) ;
char MapBoardGetCorrectSquare(T_mapBoard *mapBoard, word x, word y) ;
char MapBoardGetCheckSquare(T_mapBoard *mapBoard, word x, word y) ;
void MapBoardGetBounds(T_mapBoard *mapBoard, Rectangle *rect) ;
void MapBoardDraw(T_mapBoard *mapBoard, GStateHandle gstate, word height, word width, word correctColor, word incorrectColor, word uncheckedColor) ;
void MapBoardUnderlineOn(T_mapBoard *mapBoard, word y, word startX, word endX) ;
void MapBoardUnderlineOff(T_mapBoard *mapBoard, word y) ;
Boolean MapBoardIsUnderline(T_mapBoard *mapBoard, word y) ;
void MapBoardGetUnderline(T_mapBoard *mapBoard, word y, word *startX, word *endX) ;
void MapBoardMakeUnderline(T_mapBoard *mapBoard, word y) ;
void MapBoardMakeUnderline2(T_mapBoard *mapBoard, word y, word y2) ;
T_step *MapBoardLookupStep(T_mapBoard *mapBoard, word n) ;
void MapBoardAddStep(T_mapBoard *mapBoard, word x, word y, char digit) ;
void MapBoardAddStepsForNumberLeftToRight(T_mapBoard *mapBoard, word x, word y) ;
void MapBoardAddStepsForNumberRightToLeft(T_mapBoard *mapBoard, word x, word y) ;
void MapBoardHideAllSteps(T_mapBoard *mapBoard) ;
void MapBoardPromptCurrentStep(T_mapBoard *mapBoard) ;
void MapBoardStartSteps(T_mapBoard *mapBoard) ;
void MapBoardReplaceCurrentStep(T_mapBoard *mapBoard, char c) ;
void MapBoardPreviousStep(T_mapBoard *mapBoard) ;
void MapBoardNextStep(T_mapBoard *mapBoard) ;
void MapBoardSetCorrectBoardFromCurrentBoard(T_mapBoard *mapBoard) ;
void MapBoardResetInvalidation(T_mapBoard *mapBoard) ;
void MapBoardMarkForInvalidation(T_mapBoard *mapBoard, sword x, sword y) ;
void MapBoardInvalidate(T_mapBoard *mapBoard, GStateHandle gstate, word height, word width) ;
Boolean MapBoardIsAllCorrect(T_mapBoard *mapBoard) ;
void MapBoardSetupCheckBoard(T_mapBoard *mapBoard) ;

void MapBoardSetupTest(T_mapBoard *mapBoard) ;

#endif
