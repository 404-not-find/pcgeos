@include <stdapp.goh>
@include <Ansi/string.h>
@include <Ansi/stdio.h>
@include <Ansi/stdlib.h>
@include "stud_db.goh"

#define HEADER_INDEX 0

@extern chunk DBDefault;
@extern chunk DBGuest;
@extern chunk DBTeacher;
@extern chunk DBOpenErrMsg;


void ErrorBox(char *msg)
{
    UserStandardDialog(NULL, NULL, NULL, NULL, msg, 
        (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) | 
        (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET)) ;
}

void InitDefaultStudents(StudentDB *db)
{
    StudentRecord *record ;
    StudentDBHeader *header ;
    word dummy ;
    
    StudentIndex index ;

    /* Create the header to track all the students */
    HugeArrayAppend(db->SDB_file, db->SDB_array, sizeof(StudentDBHeader), 0) ;
    HugeArrayLock(db->SDB_file, db->SDB_array, HEADER_INDEX, (void**) &header, &dummy) ;
    header->SDBH_numStudents = 0 ;
    header->SDBH_password.P_hint[0] = '\0' ;
    header->SDBH_password.P_password[0] = '\0' ;
    HugeArrayDirty(header) ;
    HugeArrayUnlock(header) ;

    /* Create the Default record */
    index = StudentDBCreateStudent(db) ;
    record = StudentDBGetStudent(db, index) ;
    record->SR_allowSigns = FALSE ;
    record->SR_range1Low = 0 ;
    record->SR_range2Low = 0 ;
    record->SR_range1High = 20 ;
	 record->SR_range2High = 20 ;
	 MemLock(OptrToHandle(@DBDefault));
	 strcpy(record->SR_name, LMemDeref(@DBDefault)) ;
	 MemUnlock(OptrToHandle(@DBDefault));
	 record->SR_numProblems = 100 ;
    record->SR_problemType = PROBLEM_ADD ;
    record->SR_allowChanges = TRUE ;
    StudentDBPutStudent(db, index, record) ;

    /* Create the Guest record */
    index = StudentDBCreateStudent(db) ;
    record = StudentDBGetStudent(db, index) ;
    record->SR_allowSigns = FALSE ;
    record->SR_range1Low = 0 ;
    record->SR_range2Low = 0 ;
    record->SR_range1High = 20 ;
    record->SR_range2High = 20 ;
	 MemLock(OptrToHandle(@DBGuest));
	 strcpy(record->SR_name, LMemDeref(@DBGuest)) ;
	 MemUnlock(OptrToHandle(@DBGuest));
	 record->SR_numProblems = 100 ;
    record->SR_problemType = PROBLEM_ADD ;
    record->SR_allowChanges = FALSE ;
    StudentDBPutStudent(db, index, record) ;

    /* Create the teacher record */
    index = StudentDBCreateStudent(db) ;
    record = StudentDBGetStudent(db, index) ;
    record->SR_allowSigns = FALSE ;
    record->SR_range1Low = 0 ;
    record->SR_range2Low = 0 ;
    record->SR_range1High = 20 ;
    record->SR_range2High = 20 ;
	 MemLock(OptrToHandle(@DBTeacher));
	 strcpy(record->SR_name, LMemDeref(@DBTeacher)) ;
	 MemUnlock(OptrToHandle(@DBTeacher));
	 record->SR_numProblems = 100 ;
    record->SR_problemType = PROBLEM_MIXED ;
    record->SR_allowChanges = FALSE ;
    StudentDBPutStudent(db, index, record) ;
}


Boolean StudentDBOpenOrCreate(FileLongName name, StudentDB *db, char *dirname)
{
    EC_ERROR_IF(db == NULL, -1) ;

    FilePushDir() ;
    FileSetStandardPath(SP_PRIVATE_DATA) ;
    FileCreateDir(dirname) ;
    FileSetCurrentPath(SP_PRIVATE_DATA, dirname);

    db->SDB_file = VMOpen(name, VMAF_FORCE_READ_WRITE/*FILE_DENY_NONE|FILE_ACCESS_RW*/, VMO_OPEN, 0) ;

    /* Initialize the record 0 in memory as if it is the only one */
    if (!db->SDB_file)  {
        db->SDB_file = VMOpen(
                        name, 
                        VMAF_FORCE_READ_WRITE,
                        VMO_CREATE_TRUNCATE, /* FILE_CREATE_NO_TRUNCATE|FILE_DENY_NONE|FILE_ACCESS_RW, FILE_ATTR_NORMAL*/
                        0) ;
        if (!db->SDB_file)  {
				MemLock(OptrToHandle(@DBOpenErrMsg));
				ErrorBox(LMemDeref(@DBOpenErrMsg)) ;
				MemUnlock(OptrToHandle(@DBOpenErrMsg));
				return FALSE ;
        } else {
            /* Create the huge array */
            db->SDB_array = HugeArrayCreate(db->SDB_file, 0, 0) ;
            VMSetMapBlock(db->SDB_file, db->SDB_array) ;
            InitDefaultStudents(db) ;
        }
    } else {
        db->SDB_array = VMGetMapBlock(db->SDB_file) ;
    }

    FilePopDir() ;
    return TRUE ;
}

void StudentDBClose(StudentDB *db)
{
    EC_ERROR_IF(db == NULL, -1) ;
    EC_ERROR_IF(db->SDB_file == NULL, -1) ;
    VMClose(db->SDB_file, FALSE) ;
    db->SDB_file = 0 ;
}

StudentIndex StudentDBCreateStudent(StudentDB *db)
{
    static StudentRecord G_standardRecord = {
        0,
        "<<No name>>",
        PROBLEM_ADD,
        10,
        FALSE,
        0,
        20,
        0,
        20,
        TRUE,
        FALSE,
        0
    } ;

    dword index ;
    StudentDBHeader *header ;
    StudentIndex studentIndex ;

    EC_ERROR_IF(db == NULL, -1) ;
    /* Just create a new record at the end */
    header = StudentDBLockHeader(db) ;
    studentIndex = header->SDBH_numStudents ;
    if (studentIndex >= MAX_STUDENTS)
        return BAD_STUDENT ;
    strcpy(header->SDBH_nameArray[studentIndex].SIR_name, "<<No name>>") ;
    index = HugeArrayAppend(db->SDB_file, db->SDB_array, sizeof(StudentRecord), &G_standardRecord) ;
    header->SDBH_nameArray[studentIndex].SIR_index = index ;
    header->SDBH_numStudents++ ;
    StudentDBUnlockHeader(header, TRUE) ;

    return studentIndex ;
}

StudentRecord *StudentDBGetStudent(StudentDB *db, StudentIndex index)
{
    /* Just lock it, but use the header */
    StudentDBHeader *header ;
    StudentRecord *record = 0 ;
    StudentRecord *retRecord = 0 ;
    word size ;
    MemHandle mem ;

    header = StudentDBLockHeader(db) ;
    if (index < header->SDBH_numStudents)  {
        HugeArrayLock(
            db->SDB_file, 
            db->SDB_array, 
            header->SDBH_nameArray[index].SIR_index, 
            (void**)&record,
            &size) ;
        mem = MemAlloc(size, HF_DYNAMIC, HAF_LOCK) ;
        retRecord = MemDeref(mem) ;
        memcpy(retRecord, record, size) ;
        retRecord->SR_memHandle = mem ;
        HugeArrayUnlock(record) ;
    }
    StudentDBUnlockHeader(header, FALSE) ;

    return retRecord ;
}

void StudentDBPutStudent(StudentDB *db, StudentIndex index, StudentRecord *record)
{
    /* Store the student AND put in the index */
    StudentDBHeader *header ;
    word size ;
    StudentRecord *aRecord ;

    header = StudentDBLockHeader(db) ;
    strcpy(header->SDBH_nameArray[index].SIR_name, record->SR_name) ;

    /* Store the record */
    HugeArrayLock(db->SDB_file, db->SDB_array, header->SDBH_nameArray[index].SIR_index, (void**)&aRecord, &size) ;
    memcpy(aRecord, record, size) ;
    HugeArrayDirty(aRecord) ;
    HugeArrayUnlock(aRecord) ;

    /* Done with the student record, free it */
    StudentDBDiscardStudentRecord(record) ;

    /* Done withthe header */
    StudentDBUnlockHeader(header, TRUE) ;
}

void StudentDBDeleteStudent(StudentDB *db, StudentIndex index)
{
    StudentDBHeader *header ;

    /* Need to shift all the records down on this one */
    header = StudentDBLockHeader(db) ;
    HugeArrayDelete(db->SDB_file, db->SDB_array, 1, header->SDBH_nameArray[index].SIR_index) ;
    for (; (index+1)<header->SDBH_numStudents; index++)  {
        memcpy(
            header->SDBH_nameArray+index, 
            header->SDBH_nameArray+index+1, 
            sizeof(header->SDBH_nameArray[0])) ;
    }
    header->SDBH_numStudents-- ;
    StudentDBUnlockHeader(header, TRUE) ;
}


/* Really more for internal */
StudentDBHeader *StudentDBLockHeader(StudentDB *db)
{
    StudentDBHeader *header = 0 ;
    word size ;
    HugeArrayLock(db->SDB_file, db->SDB_array, HEADER_INDEX, (void**)&header, &size) ;
    return header ;
}

void StudentDBUnlockHeader(StudentDBHeader *header, Boolean isDirty)
{
    if (isDirty)
        HugeArrayDirty(header) ;
    HugeArrayUnlock(header) ;
}

void IStudentDBResizeStudentHistory(StudentDB *db, StudentIndex index, word numEntries)
{
    word newSize ;
    StudentDBHeader *header ;
    dword pos ;

    newSize = sizeof(StudentRecord) + numEntries * sizeof(StudentHistoryEntry) ;
    header = StudentDBLockHeader(db) ;
    pos = header->SDBH_nameArray[index].SIR_index ;
    StudentDBUnlockHeader(header, FALSE) ;
    HugeArrayResize(db->SDB_file, db->SDB_array, pos, newSize) ;
}

void StudentDBAppendHistoryEntryToStudent(StudentDB *db, StudentIndex index, StudentHistoryEntry *entry)
{
    /* Tricky to do, but we just need to expand a student's record and plop in an entry */
    StudentRecord *record ;
//    StudentDBHeader *header ;
    word newSize ;
//    dword pos ;
    StudentHistoryEntry *p_newEntry ;

    record = StudentDBGetStudent(db, index) ;
    if (record)  {
//        newSize = sizeof(StudentRecord) + (record->SR_numHistoryItems + 1) * sizeof(StudentHistoryEntry) ;
        newSize = record->SR_numHistoryItems + 1 ;
        StudentDBDiscardStudentRecord(record) ;

        IStudentDBResizeStudentHistory(db, index, newSize) ;

/*
        header = StudentDBLockHeader(db) ;
        pos = header->SDBH_nameArray[index].SIR_index ;
        StudentDBUnlockHeader(header, FALSE) ;
        HugeArrayResize(db->SDB_file, db->SDB_array, pos, newSize) ;
*/

        /* Store the new history entry in the newly sized student */
        record = StudentDBGetStudent(db, index) ;
        p_newEntry = (StudentHistoryEntry *)(record+1) ;
        p_newEntry += record->SR_numHistoryItems++ ;
        memcpy(p_newEntry, entry, sizeof(*p_newEntry)) ;
        StudentDBPutStudent(db, index, record) ;
    }
}

void StudentDBDiscardStudentRecord(StudentRecord *record)
{
    MemHandle mem = record->SR_memHandle ;
    MemUnlock(mem) ;
    MemFree(mem) ;
}

void StudentDBGetName(StudentDB *db, StudentIndex index, char *name)
{
    StudentDBHeader *header ;

    header = StudentDBLockHeader(db) ;
    if (index < header->SDBH_numStudents)
        strcpy(name, header->SDBH_nameArray[index].SIR_name) ;
    else
        name[0] = '\0' ;
    StudentDBUnlockHeader(header, FALSE) ;
}

word StudentDBGetCount(StudentDB *db)
{
    word num = 0 ;
    StudentDBHeader *header ;

    header = StudentDBLockHeader(db) ;
    if (header)  {
        num = header->SDBH_numStudents ;
        StudentDBUnlockHeader(header, FALSE) ;
    }

    return num ;
}

void StudentDBRename(StudentDB *db, StudentIndex index, char *name)
{
    StudentDBHeader *header ;
    StudentRecord *record ;

    header = StudentDBLockHeader(db) ;
    if (header)  {
        if (index < header->SDBH_numStudents)  {
            strcpy(header->SDBH_nameArray[index].SIR_name, name) ;
            record = StudentDBGetStudent(db, index) ;
            strcpy(record->SR_name, name) ;
            StudentDBPutStudent(db, index, record) ;
            StudentDBUnlockHeader(header, TRUE) ;
        }
    }
}

void StudentDBClearHistory(StudentDB *db, StudentIndex index)
{
    StudentRecord *record ;

    record = StudentDBGetStudent(db, index) ;
    if (record)  {
        /* Mark it as having no history items */
        record->SR_numHistoryItems = 0 ;
        StudentDBPutStudent(db, index, record) ;

        /* Zero out the history size */
        IStudentDBResizeStudentHistory(db, index, 0) ;
    }
}
