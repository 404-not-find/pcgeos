/***********************************************************************
 *
 *
 * PROJECT: Breadbox Outliner
 * FILE:        find.goc
 * AUTHOR:  John F. Howard,   05/03
 *
 * DESCRIPTION:
 *  This file has the document class code for the search functionality.
 *
 ***********************************************************************/


/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/
@include "oliner.goh"

@extern object OLPrimary;
@extern object FindDBox;
@extern object FDBSearchText;
@extern object FDBFind;
@extern object FDBFindNext;
@extern object MainWindow;
@extern object DialogGroup;
@extern object CardDList;
@extern object OLCardInfo;
@extern object CardTitle;
@extern object CardText;

@extern chunk SrchNotFoundMsg;
@extern chunk SrchNextNotFoundMsg;

/* file globals */
word	g_findNext = 0;
word	g_dataPos = 0xffff;
Boolean g_openNext = FALSE;
Boolean g_checkCard = FALSE;

/****************************************************************************
 *		Code for OLDocumentClass Search
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	CheckTitleMatch (VMBlockHandle whichDB,
 *                           word recNum,
 *									  word len,
 *                           char* searchStr)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    returns ffff if no match, else returns the pos of the match
 *
 *
 ***********************************************************************/
word CheckTitleMatch(VMBlockHandle whichDB,
								word recNum,
								word len,
								char* searchStr)
{
 char		tString[MAX_TITLE_LENGTH + 1];
 word		i;


	/* get its title from the db */
	GetItemTitle(whichDB, recNum, &tString);
	/* check lengths - no match if searchStr > tString */
	if (strlen(tString) >= len) {
		/* check for match */
		for (i = 0; i <= (strlen(tString) - len); i++) {
			if (!LocalCmpStringsNoCase(searchStr, &tString[i], len))  {
				/* found one! */
				return (i);
				}
			}
		}
	return (0xffff);

}

/***********************************************************************
 *
 * FUNCTION:	CheckCardDataMatch (VMBlockHandle whichDB,
 *                           word recNum,
 *									  word len,
 *                           char* searchStr,
 *                           word start)
 *
 * CALLED BY:   various
 *
 *
 * STRATEGY:    returns ffff if no match, else returns the pos of the match
 *
 *
 ***********************************************************************/
word CheckCardDataMatch(VMBlockHandle whichDB,
								word recNum,
								word len,
								char* searchStr,
								word start)
{
 MemHandle			mh;
 BasicDBFieldID	fieldID;
 word					size, i;
 char 		*p_data;
 void			*p_record;


	/* get the card data */
	BasicDBGetRecordByElemNum(g_curDocHan, whichDB, recNum, &mh);
	MemLock(mh);
	p_record = MemDeref(mh);
	fieldID = BasicDBGetFieldIDPtr(p_record, BDBFHE_CATEGORY, FIELD_CAT_CARD_DATA, 1);
	size = BasicDBGetPtrToFieldData(p_record, fieldID, &p_data);
	p_data[size] = 0;

	/* check lengths - no match if searchStr > p_data */
	if (strlen(p_data) >= len) {
		/* check for match */
		for (i = start; i <= (strlen(p_data) - len); i++) {
			if (!LocalCmpStringsNoCase(searchStr, &p_data[i], len))  {
				/* found one! */
				MemUnlock(mh);
				BasicDBDiscardRecord(mh);
				return (i);
				}
			}
		}
	MemUnlock(mh);
	BasicDBDiscardRecord(mh);
	return (0xffff);



}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_DOC_OPEN_FIND for OLDocumentClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *              	is clicked
 *
 *
 *
 ***********************************************************************/
@extern method OLDocumentClass, MSG_OLINER_DOC_OPEN_FIND
{


	/* first see if we need to save any changes to a card */
	if (g_cardMayHaveChanged) 
		if (!CheckForChanges(pself->OLDI_curSel, oself))
			return;

	/* do the buttons */
	@send FDBFindNext::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send FDBFind::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

	@send FDBSearchText::MSG_VIS_TEXT_DELETE_ALL();

	/* Open the dialog box */
	@call FindDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_DOC_SEARCH_OUTLINE for OLDocumentClass
 *              (optr trigger)
 *
 * DESCRIPTION:   Goes thru the dlist titles to find the string opening
 *                closed topics to search.  If the search was successful
 *                in a closed topic it leaves that topic(s) open, otherwise
 *                it closes em back up.
 *
 *                And it searches the card text too :-)
 *
 *
 ***********************************************************************/

@extern method OLDocumentClass, MSG_OLINER_DOC_SEARCH_OUTLINE
{
 MemHandle		mh;
 VMBlockHandle		vmbh;
 IndexStruct	*indexElement;
 IndexStruct	searchItem;
 char		searchStr[MAX_TITLE_LENGTH + 1];
 word		length, total, i, j, numOpen = 0, start, titlePos;
 Boolean	checkOpens;
 Boolean	tMatch = FALSE, cMatch = FALSE, itemChanged;
 word		openDiff[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 word		openStart[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


	/*get the search string */
	length = @call FDBSearchText::MSG_VIS_TEXT_GET_ALL_PTR(searchStr);
	if (!length)   return;

	/* mark app busy */
	@send application::MSG_GEN_APPLICATION_MARK_BUSY();

	@send FDBFind::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	/* set up the search loop */
	total = pself->OLDI_indexItems;
	if (trigger == @FDBFind)  {
		i = 0;
		g_openNext = FALSE;
		g_checkCard = FALSE;
		}
	else  i = g_findNext;

	while (i < total) {
		/* get the info on the ith item */
		vmbh = VMFind(g_curDocHan, NullHandle, INDEX_LIST);
		VMLock(g_curDocHan, vmbh ,&mh);
		indexElement = ChunkArrayElementToPtrHandles(mh, g_indexCArray, i, 0);
		searchItem = *indexElement;
		VMUnlock(mh);

		/* first see if there is a match in the title */
		titlePos = CheckTitleMatch(searchItem.ISS_dbHan, searchItem.ISS_recNum,
				length, &searchStr);
		if ((titlePos != 0xffff) && !g_openNext && !g_checkCard) {
			/* save our findNext start */
			if (searchItem.ISS_type == T_CLOSED_TOPIC) {
				/* this is in case a closed topic was a match - we'll
					still need to open it on a FindNext */
				g_findNext = i;
				g_openNext = TRUE;
				g_checkCard = FALSE;
				}
			else if (searchItem.ISS_type == T_CARD) {
				/* this is in case a card title was a match - we'll
					still need to check the card on a FindNext */
				g_findNext = i;
				g_checkCard = TRUE;
				g_openNext = FALSE;
				}
			else  {
				g_findNext = i + 1;
				g_openNext = FALSE;
				g_checkCard = FALSE;
				}
			tMatch = TRUE;
			/* we'll leave this one open all the way back */
			for (j = 0; j < numOpen; j++) {
				openDiff[j] = 0;
				openStart[j] = 0;
				}
			numOpen = 0;
         break;
			} /* end of title match if */

		/* OK - see if there is a match in the card data */
		if ((searchItem.ISS_type == T_CARD) || (g_dataPos != 0xffff)) {
			if (g_dataPos == 0xffff) start = 0;
			else start = g_dataPos + 1;
			g_dataPos = CheckCardDataMatch(searchItem.ISS_dbHan,
							       searchItem.ISS_recNum, length, &searchStr, start);
			if (g_dataPos != 0xffff)  {
				g_findNext = i;
				cMatch = TRUE;
				break;
				}
			else  {
				g_dataPos = 0xffff;
				g_checkCard = FALSE;
				}
			}

		/* no match, maybe we need to open a closed topic */
		if (searchItem.ISS_type == T_CLOSED_TOPIC) {
			/* open up the closed topic */
			@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(i, FALSE);
			@send oself::MSG_OLINER_DOC_CARD_DLIST_DOUBLE_CLICK();
			openDiff[numOpen] = pself->OLDI_indexItems - total;
			openStart[numOpen] = i;
			numOpen++;
			total = pself->OLDI_indexItems;
         g_openNext = FALSE;
			}

		/* do we have an open topic where nothing was found that needs to
			be closed? */
		checkOpens = TRUE;
		while (checkOpens) {
			if (numOpen && openDiff[numOpen - 1] &&
								i == openStart[numOpen - 1] + openDiff[numOpen -1 ]) {
				@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
														i - openDiff[numOpen - 1], FALSE);
				@send oself::MSG_OLINER_DOC_CARD_DLIST_DOUBLE_CLICK();
				total = pself->OLDI_indexItems;
				i -= openDiff[numOpen - 1];
				openDiff[numOpen - 1] = 0;
				openStart[numOpen - 1] = 0;
				numOpen--;
				}
			else checkOpens = FALSE;
			}  /* end of checkOpens while */

		i++;
		} /* end of search transactions while */

	@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	if (tMatch || cMatch) {
		/* select the found item - unless it hasn't changed (don't want
			to redraw the card text) */
		if (pself->OLDI_curSel == i) itemChanged = FALSE;
		else itemChanged = TRUE;
		if (tMatch || (cMatch && itemChanged)) {
			@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(i, FALSE);
			@send oself::MSG_OLINER_DOC_CARD_DLIST_APPLY(i, 1, GIGSF_MODIFIED);
			@send FDBFindNext::MSG_GEN_SET_ENABLED(VUM_NOW);
			}
		/* select the found text in the card title */
		if (tMatch && (searchItem.ISS_type == T_CARD)) {
			@send FindDBox::MSG_META_RELEASE_TARGET_EXCL();
			@send OLPrimary::MSG_META_GRAB_TARGET_EXCL();
			@send MainWindow::MSG_META_GRAB_TARGET_EXCL();
			@send OLCardInfo::MSG_META_GRAB_TARGET_EXCL();
			@send CardTitle::MSG_META_GRAB_FOCUS_EXCL();
			@send CardTitle::MSG_META_GRAB_TARGET_EXCL();
			/* this to force entire found string on screen */
			@send CardTitle::MSG_VIS_TEXT_SELECT_RANGE_SMALL(titlePos + length,
																			  titlePos + length);
			@send CardTitle::MSG_VIS_TEXT_SELECT_RANGE_SMALL(titlePos,
																			  titlePos + length);

			}
		/* select the found text in the card */
		if (cMatch) {
			if (itemChanged) {
				@send FindDBox::MSG_META_RELEASE_TARGET_EXCL();
				@send OLPrimary::MSG_META_GRAB_TARGET_EXCL();
				@send MainWindow::MSG_META_GRAB_TARGET_EXCL();
				}
			@send OLCardInfo::MSG_META_GRAB_TARGET_EXCL();
			@send CardText::MSG_META_GRAB_FOCUS_EXCL();
			@send CardText::MSG_META_GRAB_TARGET_EXCL();
			/* this to force entire found string on screen */
			@send CardText::MSG_VIS_TEXT_SELECT_RANGE_SMALL(g_dataPos + length,
																			  g_dataPos + length);
			@send CardText::MSG_VIS_TEXT_SELECT_RANGE_SMALL(g_dataPos,
																			  g_dataPos + length);
			}
		@send FDBFindNext::MSG_META_GRAB_FOCUS_EXCL();
		}
	else  {
		/* tell user */
		if (trigger == @FDBFind) NotifyDBox(searchStr, @SrchNotFoundMsg);
		else NotifyDBox(0, @SrchNextNotFoundMsg);
		/* and disable the search next button */
		@send FDBFindNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send FDBSearchText::MSG_VIS_TEXT_DELETE_ALL();
		}

}

/* ----------------------------------------------------------------------------
	FindGenTextClass Code
-----------------------------------------------------------------------------*/

@classdecl	FindGenTextClass;

/***********************************************************************
 *
 * MESSAGE:		MSG_META_KBD_CHAR for FindGenTextClass
 *
 *
 * DESCRIPTION:   enables find button on text changes
 *
 *
 *
 *
 ***********************************************************************/

@extern method FindGenTextClass, MSG_META_KBD_CHAR
{
 char		searchStr[MAX_TITLE_LENGTH + 1];


	@callsuper();

	if(@call FDBSearchText::MSG_VIS_TEXT_GET_ALL_PTR(searchStr)) {
		@send FDBFind::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send FDBFindNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
      }
	else  {
		@send FDBFind::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send FDBFindNext::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}

}

