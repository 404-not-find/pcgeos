/**********************************************************************
 * THINKER.GOH - Class, document info, etc.                           *
 * Project - Thinker Pro                                              *
 **********************************************************************/

@ifndef __THINKER_GOH
@define __THINKER_GOH

/**********************************************************************
 * Classes                                                            *
 **********************************************************************/

@class ThinkerProcessClass, GenProcessClass;
@message void MSG_THINKER_PROCESS_UPDATE_SOUND() ;
@message void MSG_THINKER_PROCESS_TOGGLE_SOUND_ON_OFF() ;
@endc

@class ThinkerDocumentClass, GenDocumentClass;
@message void MSG_THINKER_DOCUMENT_ADD_ITEM();
@message void MSG_THINKER_DOCUMENT_DELETE_ITEM();
@message void MSG_THINKER_DOCUMENT_PREV_ITEM();
@message void MSG_THINKER_DOCUMENT_NEXT_ITEM();
@message void MSG_THINKER_DOCUMENT_CHECK_MODIFIED();
@message void MSG_THINKER_DOCUMENT_DISPLAY_ENTRY(word entry);
@message void MSG_THINKER_DOCUMENT_START_QUIZ();
@message void MSG_THINKER_DOCUMENT_QUIZ_NEXT_QUESTION();
@message void MSG_THINKER_DOCUMENT_ANSWER_QUESTION();
@message void MSG_THINKER_DOCUMENT_ABORT_QUIZ();
@message void MSG_THINKER_DOCUMENT_QUIZ_QUESTION_RIGHT();
@message void MSG_THINKER_DOCUMENT_QUIZ_QUESTION_WRONG();
@message void MSG_THINKER_DOCUMENT_QUIZ_TOTALS();
@message void MSG_THINKER_DOCUMENT_CONTINUE_QUIZ();
@message void MSG_THINKER_DOCUMENT_RESTART_QUIZ();
@message void MSG_THINKER_DOCUMENT_STOP_QUIZ();
@message void MSG_THINKER_DOCUMENT_EDIT();

@instance word TDI_curEntry;
@instance word TDI_numEntries;
@instance MemHandle TDI_asked;
@instance word TDI_numLeft;
@instance word TDI_numWrong;
@instance word TDI_numRight;
@instance word TDI_curQuestion;
@instance word TDI_totalRight;
@instance word TDI_totalWrong;
@endc

@class AnswerTriggerClass, GenTriggerClass ;
@endc

@class ThinkerDocumentControlClass, GenDocumentControlClass ;
@endc

/**********************************************************************
 * Defines                                                            *
 **********************************************************************/

#define QUESTION_DB_ITEM  0x000E
#define ANSWER_DB_ITEM    0x0006

#define DOCUMENT_PROTOCOL_MAJOR  2
#define DOCUMENT_PROTOCOL_MINOR  0

/**********************************************************************
 * Structs                                                            *
 **********************************************************************/

typedef struct {
  word DMB_versionMajor;
  word DMB_versionMinor;
  word DMB_numEntries;
  word DMB_lastEdit;
  DBGroup DMB_data[3000];
} DocumentMapBlockV1;

typedef struct {
  DBGroup QE_group;
  DBItem  QE_question;
  DBItem  QE_answer;
} QuizEntry;

typedef struct {
  word      DMB_numEntries;
  word      DMB_lastEdit;
  QuizEntry DMB_data[];
} DocumentMapBlock;

/**********************************************************************
 * Enums                                                              *
 **********************************************************************/

typedef enum {
  QQV_NOT_ANSWERED,
  QQV_RIGHT,
  QQV_WRONG
} QuizQuestionValues;

void LoadSounds(void) ;
void PlayFrequency(word freq, word duration) ;
void PlaySimpleSound(word soundId, word priority) ;
void ResetSound(void) ;
void SoundStart(void) ;
void SoundStop(void) ;
void SoundsWaitUntilDone(void) ;
void UpdateSound(void) ;
word RandomNumber(void) ;

/* Generic return value for bad indexes into arrays */
#define INDEX_NONE                  0xFFFF

/* Maximum number of levels actually in the tables */
#define MAX_LEVELS                  10

/* Number of sounds to allow to be played simultaneously */
#define MAX_SOUND_CHANNELS          2

/* Sounds below this frequency are not played */
#define SOUND_FREQ_CUTOFF           30

/* Structure of a single sound */
typedef struct {
    word length ;
    word priority ;

    #define MAX_SOUND_SAMPLES  100
    word samples[MAX_SOUND_SAMPLES] ;
} T_simplePCSound ;

typedef struct {
    word soundNum ;             /* Value of INDEX_NONE means no sound */
    word pos      ;             /* Position within sample list */
    word priority ;             /* Level priority of sound */
} T_soundState ;

@endif
