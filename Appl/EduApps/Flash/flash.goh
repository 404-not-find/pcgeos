/***********************************************************************
 *
 *
 * PROJECT:	Breadbox Flashcard
 * FILE:		flash.goh
 * AUTHOR:	John F. Howard,   9/97
 *             based on DC, LES and EDG groundwork
 *
 * DESCRIPTION:
 *	   This file has the header information
 *      and structures for the Flashcard application.
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <gstring.h>
#include <Ansi/string.h>
#include <math.h>
#include <token.h>	/* for assigning doc token */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
@class FlashCardProcessClass, GenProcessClass;
    @message void MSG_OPEN_PWORD_TO_EDITOR();
    @message void MSG_OPEN_EDITOR();
    @message void MSG_CLOSE_EDITOR();
    @message void MSG_ADD_CARD();
    @message void MSG_DELETE_CARD();
    @message (GEN_VALUE_STATUS_MSG) MSG_EDIT_SELECT_CARD;
@endc

@class VisFlashContentClass, VisContentClass;
@endc

/* holds the top and middle group vis objects */
@class VisFCCompClass, VisCompClass;
@endc

/* the deck and exit buttons */
/*@class VisFCButtonClass, VisClass;
    @instance Boolean VFCBI_pressed = FALSE;
@endc */

/* the title text (to detect dbl click) */
@class VisTitleTextClass, VisTextClass;
@endc

/* the decks on either side */
@class VisFlashDeckClass, VisClass;
@endc

 /* the big white card */
@class VisFlashCardClass, VisCompClass;
    @message void MSG_SET_TO_QUESTION();

    @instance word VFDI_QorA;
    @instance Boolean VFDI_pressed = FALSE;
@endc

@class TextEnableClass, GenTextClass;
    @instance optr TE_button;
@endc


@class FlashApplicationClass, GenApplicationClass;
@endc

/* This class is for our documents */
@class FlashDocumentClass, GenDocumentClass;
@endc

/* This is to intercept doc stuff for save to folder */
@class FlashDocCtrlClass, GenDocumentControlClass;
@endc


/* function prototypes */
void SaveNewCard(void);

void CheckDataChange(void);

word AckDBox (char* string1, optr ackMsg);

void NotifyDBox (optr notifyMsg);

void ShowDeck(void);

void Shuffle(void);

/**********************************************************************
 * Typedefs                                                           *
 **********************************************************************/

typedef VMBlockHandle FCardHandle;

/**********************************************************************
 * Constants                                                          *
 **********************************************************************/
/* constants for ack dboxes */
typedef ByteEnum AckDB;
#define ACK_YES 1
#define ACK_NO 2

#define DECK_TITLE_SIZE	31
#define DECK_DESCR_SIZE	75
#define QA_SIZE		21
#define QA_DATA_SIZE	61
#define MAX_CARDS		100
#define VER_1			0x0100
#define VER_2			0x0200

#define QUESTION		1
#define ANSWER			2

/**********************************************************************
 * Global Variables                                                   *
 **********************************************************************/
extern Boolean		g_newDeck;
extern Boolean		g_newCard;
extern Boolean		g_isYago;
extern Boolean		g_isSPN;

extern FileHandle	g_flashFileHan;
extern word		g_numCards;
extern word		g_currentCard;
extern word		g_shuffled[MAX_CARDS];

/**********************************************************************
 * Structs                                                            *
 **********************************************************************/

typedef struct {
    word			FDMB_version;  /*Hex value of 0x0100 for version 1.0*/
    char			FDMB_questionString[QA_SIZE];
	 char			FDMB_answerString[QA_SIZE];
	 word			FDMB_numCards;
	 FCardHandle	FDMB_cardArray[MAX_CARDS];
	 char			FDMB_descriptString[DECK_DESCR_SIZE];
} FlashDeckMapBlock;

typedef struct {
    char		FCB_front[QA_DATA_SIZE];
    char		FCB_back[QA_DATA_SIZE];
} FlashCardBlock;
