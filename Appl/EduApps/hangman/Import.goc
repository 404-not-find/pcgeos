/***********************************************************************
 *Copyright 1994-2001 Breadbox Computer Company LLC  All Rights Reserved
 *
 * PROJECT:	Breadbox HangMan
 * FILE:		import.goc
 * AUTHOR:	John Howard   07/02
 *
 *
 *
 *
 ***********************************************************************/

@include "hangman.goh"
@include "externs.goh"


/***************************************************************************
 * HMAddWord
 ***************************************************************************
 * SYNOPSIS:    Called by MSG_HM_IMPORT_WORD_LIST
 *
 * PARAMETERS:  char* wordToAdd
 *					 Returns: FALSE if list full
 *
 *
 * STRATEGY:    Add the provided word to the word list.
 *              The word list is case-insensitive.
 *
 **************************************************************************/
Boolean HMAddWord(char* wordToAdd)
{
 optr oWordList;
 Boolean retVal = TRUE;


	LocalUpcaseString(wordToAdd, 0);

	/* Lock the word list. */
	MemLock(g_cListMemHan);
	oWordList = ConstructOptr(g_cListMemHan, g_cListChunkHan);

	/* Ensure that the list hasn't reached its maximum length. */
	if (ChunkArrayGetCount(oWordList) < WORD_LIST_MAX_SIZE) {

		/* Append a new element to the array. */
		ChunkArrayAppend(oWordList, 0);

		/* Copy the new word into the new element. */
		strcpy(ChunkArrayElementToPtr(oWordList, CA_LAST_ELEMENT, 0),
							  wordToAdd);

		}  /* end of list size if */
	else {
		NotifyDBox(0, @ListTooLongMsg);
		retVal = FALSE;
		}

	MemUnlock(g_cListMemHan);

	return (retVal);
}

/***************************************************************************
 * HMCreateCustomListArray
 ***************************************************************************
 * SYNOPSIS:    Called by MSG_HM_IMPORT_WORD_LIST
 *
 * PARAMETERS:  void
 *
 *
 *
 * STRATEGY:
 *
 *
 **************************************************************************/
void HMCreateCustomListArray(void)
{


	 /* first free any existing block */
	 if (g_cListMemHan)  MemFree(g_cListMemHan);

	 /* create a mem block and chunk array */
	 g_cListMemHan = MemAlloc(2048, HF_SWAPABLE, HAF_LOCK);
	 LMemInitHeap(g_cListMemHan, LMEM_TYPE_GENERAL, 0, sizeof(LMemBlockHeader),
					  STD_INIT_HANDLES, STD_INIT_HEAP);
    /* create the chunk array  */
	 g_cListChunkHan = ChunkArrayCreate(g_cListMemHan, WORD_ELEMENT_SIZE, 0, 0);
	 MemUnlock(g_cListMemHan);

}

 /***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_HM_IMPORT_SELECTOR_ACTION
 *                 for HMProcessClass
 *             (word entryNum, word entryFlags)
 * DESCRIPTION:	 
 *
 *
 *
 *
 ***********************************************************************/
@extern method HangManProcessClass, MSG_HM_IMPORT_SELECTOR_ACTION
{

	 /* was it a double click? */
    if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  {
		@send, forceQueue process::MSG_HM_IMPORT_WORD_LIST();
		}
	  }
    else  {  /* if not dbl click see if we're on a file */
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
		@send HMImportButton::MSG_GEN_SET_ENABLED(VUM_NOW);
	  else
		@send HMImportButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_HM_IMPORT_WORD_LIST for HMProcessClass
 *
 * DESCRIPTION:	 Reads in the selected word list
 *
 *
 *
 *
 ***********************************************************************/
@extern method HangManProcessClass, MSG_HM_IMPORT_WORD_LIST
{
char		fileName[FILE_LONGNAME_BUFFER_SIZE], filePath[PATH_BUFFER_SIZE];
dword		i, fileSize, readStart;
FileHandle		fileHan;
DiskHandle		diskHan;
word		charRead, wordSize, numWords, j, badWords;
char		lineBuffer[100], charBuffer[2];
char		numWordsStr[13], badWordsStr[13];
Boolean	headerStarted, foundHeader, goodWord;
Boolean	wasAdded;


	/* first get the file name of the selection */
	@call HMImpFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(fileName);

	/* get the file's path and disk handle */
	@call HMImpFileSel::MSG_GEN_PATH_GET(filePath, sizeof(filePath));
	diskHan = @call HMImpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

	/* save our current file directory */
	FilePushDir();

	/* and set the import file dir  - FileSel doesn't do this */
	FileSetCurrentPath(diskHan, filePath);

	/* dismiss the file selector box now */
	@send HMImportDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

	/* and open the file */
	fileHan = FileOpen(fileName, (FILE_ACCESS_R | FILE_DENY_W));
	/* if fileHan is NULL then there was an error */
	if (!fileHan)  {
		NotifyDBox(0, @ImpOpenErrMsg);
		FilePopDir();
		/* so reset to the WM list */
		@send HMWordListGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
										CUSTOM_LIST,
										FALSE);
		g_customList = FALSE;
		return;  /* bail out */
		}

	/* OK let's read the file...
	 * FileRead returns -1 if there was an error */
	/* first get the file size */
	fileSize = FileSize(fileHan);
	/* set the file read start */
	readStart = 0;
	/* first check for start marker - [LIST-START] */
	headerStarted = FALSE;
	wordSize = 0;
	foundHeader = FALSE;
	lineBuffer[0] = 0;  /* init the buffer */
	for (i = 0; i < fileSize; i++)  {
		charRead = FileRead(fileHan, charBuffer, 1, FALSE);
		if (charRead == 1)  {  /* good read */
			readStart++;
			/* add null to end of char buffer */
			charBuffer[1] = NULL;
			/* check for starting [ or header text */
			if ((charBuffer[0] == '[') || headerStarted) {
				/* let's start and/or add to buffer */
				headerStarted = TRUE;
				strcat(lineBuffer, charBuffer);
				wordSize++;
				/* see if we've exceeded the length of our marker */
				if (wordSize > MARKER_SIZE) {
					/* this was a spurious [] pair... keep looking */
					headerStarted = FALSE;
					lineBuffer[0] = 0;
					wordSize = 0;
					}
				}
			/* check for ending ] */
			if ((charBuffer[0] == ']') && headerStarted)  {
				/* here's where we check the header */
				if (!strcmp(lineBuffer, "[LIST-START]")) {
					/* this starts a valid list file */
					foundHeader = TRUE;
					break;
					}
				else  {
					/* this was a spurious [] pair... keep looking */
					headerStarted = FALSE;
					lineBuffer[0] = 0;
					wordSize = 0;
					}
				}  /* end of check for ending ] */
			} /* end of good read if */
		else  {
			/* read error */
			NotifyDBox(0, @ImpReadErrMsg);
			/* close the file */
			if (FileClose(fileHan, FALSE)) NotifyDBox(0, @ImpCloseErrMsg);
			/* and restore the HM file dir */
			FilePopDir();
			/* so reset to the WM list */
			@send HMWordListGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
										CUSTOM_LIST,
										FALSE);
			g_customList = FALSE;
			return;
			}  /* end of bad read else */

		} /* end of look for start marker for */

	if (!foundHeader) {
		/* not a valid start marker */
		NotifyDBox(0, @ImpBadTypeErrMsg);
		/* close the file */
		if (FileClose(fileHan, FALSE)) NotifyDBox(0, @ImpCloseErrMsg);
		FilePopDir();
		/* so reset to the WM list */
		@send HMWordListGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
										CUSTOM_LIST,
										FALSE);
		g_customList = FALSE;
		return;
		}   /* end of no start marker if */

	/* OK now read file one char at a time ------------------- */
	/* initialize the line buffer */
	lineBuffer[0] = NULL;
	wordSize = 0;
	numWords = 0;
	badWords = 0;
	goodWord = TRUE;
	/* start the reading loop */
	for (i = readStart; i < fileSize; i++) {
		charRead = FileRead(fileHan, charBuffer, 1, FALSE);
		/* make sure it's a good read */
		if (charRead == 1)  {  /* good read */
			/* add null to end of char buffer */
			charBuffer[1] = NULL;
			/* check for CR/LF */
			if ((charBuffer[0] != '\r') && (charBuffer[0] != '\n'))  {
				/* not CR/LF so add to buffer */
				strcat(lineBuffer, charBuffer);
				wordSize++;
				/* check for the unlikely event of a word buffer overflow */
				if (wordSize >= 99) {
					/* let's keep reading but just not add any more letters
					 * to the buffer */
					lineBuffer[99] = 0;
					wordSize--;
					}
				}
			else if ((charBuffer[0] == '\r') && wordSize) {
				/* here's where we end the line and check the word */
				/* first see if it is the end marker */
				if (!strcmp(lineBuffer, "[LIST-END]")) {
					/* we're done */
					break;
					}
				/* see if we're within the word length limits */
				if ((wordSize < WORD_MIN_SIZE) || (wordSize > WORD_MAX_SIZE)) {
		/*			if (wordSize < WORD_MIN_SIZE)
						NotifyDBox(lineBuffer, @WordTooShortMsg);
					else NotifyDBox(lineBuffer, @WordTooLongMsg);
		*/			goodWord = FALSE;
					badWords++;
					}
				else {
					/* are all the chars valid? */
					for (j = 0; j < wordSize; j++) {
						if (!LocalIsAlpha(lineBuffer[j])) {
	  //                NotifyDBox(lineBuffer, @WordInvalidCharMsg);
							goodWord = FALSE;
                     badWords++;
							break;
							}
						}
					}
				/* our checks are done, if it's good add it to the list */
				if (goodWord) {
					if (!numWords) {
						/* create the array since we have at least 1 good word */
						HMCreateCustomListArray();
						}

					wasAdded = HMAddWord(lineBuffer);

					/* any error?   if it was a list to long error we'll break */
					if (!wasAdded) break;
					else numWords++;

					}
				/* now reset the line buffer for next word */
				lineBuffer[0] = NULL;
				wordSize = 0;
				goodWord = TRUE;
				}  /* end of end the line else if */
			}  /* end of good read if */
		else  {  /* bad read */
			NotifyDBox(0, @ImpReadErrMsg);
			break; /* bail out of for loop*/
			}

		}  /* end of reading for loop */

	/* close the file */
	if (FileClose(fileHan, FALSE)) NotifyDBox(0, @ImpCloseErrMsg);

	/* and restore the HM file dir */
	FilePopDir();

	/* some checking... */
	if (!g_cListMemHan || !numWords) {
		/* either no words are in the list or no list got created...
		 * so reset to the WM list */
		@send HMWordListGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
										CUSTOM_LIST,
										FALSE);
		g_customList = FALSE;
		}
	else {
		/* show the completion message */
		UtilHex32ToAscii(numWordsStr, (dword)numWords, UHTAF_NULL_TERMINATE);
		UtilHex32ToAscii(badWordsStr, (dword)badWords, UHTAF_NULL_TERMINATE);
		MemLock (OptrToHandle(@ImpCompleteMsg));
		UserStandardDialog(0, 0,
			  badWordsStr,
			  numWordsStr,
			  LMemDeref(@ImpCompleteMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
		MemUnlock (OptrToHandle(@ImpCompleteMsg));

		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_HM_CANCEL_IMPORT_WORD_LIST for HangManProcessClass
 *
 * DESCRIPTION:	 re-sets the custom list boolean to the WM list
 *
 *
 *
 *
 ***********************************************************************/
@extern method HangManProcessClass, MSG_HM_CANCEL_IMPORT_WORD_LIST
{

	@send HMWordListGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
										CUSTOM_LIST,
										FALSE);
	g_customList = FALSE;

}


