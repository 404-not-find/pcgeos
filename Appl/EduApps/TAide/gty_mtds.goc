/***************************************************************************
 *  FILE:			gty_mtds.goc
 *  PROJECT:		Breadbox Teacher's Aide
 *  DESCRIPTION:	This file has methods for grade types set-up stuff
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "taide.goh"
@include "externs.goh"
                   
/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Code for grade types set up stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ShowGradeTypeTotals
 *
 * CALLED BY:  MSG_OPEN_GRADE_TYPE_SETUP, MSG_NEW_GTYPE
 *
 * STRATEGY:   adds up the weights of grade types & displays
 *		
 *
 ***********************************************************************/
void ShowGradeTypeTotals(FileHandle fileHandle,
					VMBlockHandle gradeTypesChunkArray,
					word numGradePds)
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 GradeTypeStruct	*gradeTypePtr;
 char			wtString[10];
 word			width, numTypes, i, j;
 word			total[MAX_GRADE_PDS];

 
    memset(total, 0, MAX_GRADE_PDS * 2);

    /* get the grade types list */
    vmbh = VMFind(fileHandle, NullHandle, GRADE_TYPES);
    VMLock(fileHandle, vmbh ,&mh);
    numTypes = ChunkArrayGetCountHandles(mh, gradeTypesChunkArray);
    /* get the weights for each type */
    for (i = 0; i < numTypes; i++)  {
	  gradeTypePtr = ChunkArrayElementToPtrHandles(
				  mh,
				  gradeTypesChunkArray,
				  i,
				  0);
	  /* and for each grade pd */
	  for (j = 0; j < numGradePds; j++)  {
		total[j] += gradeTypePtr->GTS_weight[j];
		}
	  }
    VMUnlock(mh);

    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
	 gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
	 MemLock(OptrToHandle(@TotWtsStr));
	 GrDrawText(gstate, 0, 0, LMemDeref(@TotWtsStr), 0);
	 MemUnlock(OptrToHandle(@TotWtsStr));
	 UtilHex32ToAscii(wtString, (dword) (total[0]),UHTAF_NULL_TERMINATE);
    GrDrawText(gstate, 150, 0, wtString, 0);
    width = 190;
    if (numGradePds > 1) {
	  UtilHex32ToAscii(wtString, (dword) (total[1]), UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 190, 0, wtString, 0);
	  width = 230;
	  }
    if (numGradePds > 2) {
	  UtilHex32ToAscii(wtString, (dword) (total[2]), UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 230, 0, wtString, 0);
	  width = 270;
	  }
    if (numGradePds > 3) {
	  UtilHex32ToAscii(wtString, (dword) (total[3]), UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 270, 0, wtString, 0);
	  width = 310;
	  }
    if (numGradePds > 4) {
	  UtilHex32ToAscii(wtString, (dword) (total[4]), UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 310, 0, wtString, 0);
	  width = 350;
	  }
    if (numGradePds > 5) {
	  UtilHex32ToAscii(wtString, (dword) (total[5]), UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 350, 0, wtString, 0);
	  width = 390;
	  }
    GrEndGString(gstate) ;

    /* and replace the visMoniker */
    @call GTypeWeightTotals::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  g_sysPointSize + 2,
				  width,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));


    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_GRADE_TYPE_SETUP for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_GRADE_TYPE_SETUP
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 word			width;
 char			string[10];


    /* draw the dlist title */
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
	 MemLock (OptrToHandle(@GrdElemPeriodHdr));
	 GrDrawText(gstate, 0, 0, LMemDeref(@GrdElemTypeHdr), 0);
	 strcpy(string, LMemDeref(@GPStr));
	 strcat(string, "-1");
	 GrDrawText(gstate, 150, 0, string, 0);
    width = 190;
    if (pself->TADI_numGradePds > 1) {
	  strcpy(string, LMemDeref(@GPStr));
	  strcat(string, "-2");
	  GrDrawText(gstate, 190, 0, string, 0);
	  width = 230;
	  }
    if (pself->TADI_numGradePds > 2) {
	  strcpy(string, LMemDeref(@GPStr));
	  strcat(string, "-3");
	  GrDrawText(gstate, 230, 0, string, 0);
	  width = 270;
	  }
    if (pself->TADI_numGradePds > 3) {
	  strcpy(string, LMemDeref(@GPStr));
	  strcat(string, "-4");
	  GrDrawText(gstate, 270, 0, string, 0);
	  width = 310;
	  }
    if (pself->TADI_numGradePds > 4) {
	  strcpy(string, LMemDeref(@GPStr));
	  strcat(string, "-5");
	  GrDrawText(gstate, 310, 0, string, 0);
	  width = 350;
	  }
    if (pself->TADI_numGradePds > 5) {
	  strcpy(string, LMemDeref(@GPStr));
	  strcat(string, "-6");
	  GrDrawText(gstate, 350, 0, string, 0);
	  width = 390;
	  }
    MemUnlock (OptrToHandle(@GrdElemPeriodHdr));
    GrEndGString(gstate) ;

    @call GSUGradeTypeHeader::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  g_sysPointSize + 2,
				  width,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

    /* and initialize the list */
    @call GTypeDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->TADI_numTypes);
    @call GTypeDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* disable the delete & edit buttons */
    @call GTypeDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call GTypeEdit::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* show the totals */
    ShowGradeTypeTotals(pself->GDI_fileHandle,
				    pself->TADI_gradeTypesChunkArray,
				    pself->TADI_numGradePds);


    @send GradeTSetUpGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_NEW_GTYPE for TADocumentClass
 *                  (GEN_TRIGGER_ACTION)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_NEW_GTYPE
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 GradeTypeStruct	*gType;
 word		selection, i;
 char		wtString[10];
 optr	gPWeight[MAX_GRADE_PDS] = {@NGTIWt1, @NGTIWt2, @NGTIWt3,
							  @NGTIWt4, @NGTIWt5, @NGTIWt6};


    if (trigger == @GTypeEdit)  g_isNewGTypeOrElem = FALSE;
    else g_isNewGTypeOrElem = TRUE;

    /* bail out if we've maxed types */
    if (g_isNewGTypeOrElem) {
	  if (pself->TADI_numTypes >= (MAX_GRADE_TYPES - 1)) {
		NotifyDBox(0, @GrdTypeMaxedMsg);
		return;
		}
	  }

    /* disable grade pds that don't have dates */
    for (i = 1; i < (MAX_GRADE_PDS); i++)  {
	   if (i < (pself->TADI_numGradePds))
		 @send gPWeight[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   else
		 @send gPWeight[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   }

    if (!g_isNewGTypeOrElem)  {
	  /* get the selection */
	  selection = @call GTypeDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  /* get the list */
	  vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
	  VMLock(pself->GDI_fileHandle, vmbh ,&mh);
	  gType = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeTypesChunkArray,
		   selection,
		   0);
	  @call NGTIName::MSG_VIS_TEXT_REPLACE_ALL_PTR(gType->GTS_type, 0);
	  }
    else @send NGTIName::MSG_VIS_TEXT_DELETE_ALL();

    /* fill in weight data or clean it out */
    for (i = 0; i < (pself->TADI_numGradePds); i++) {
	  if (!g_isNewGTypeOrElem) {
		UtilHex32ToAscii(wtString,
					  (dword) (gType->GTS_weight[i]),
					  UHTAF_NULL_TERMINATE);
		@call gPWeight[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(wtString, 0);
		}
	  else
		@send gPWeight[i]::MSG_VIS_TEXT_DELETE_ALL();
	  }

    if (!g_isNewGTypeOrElem) VMUnlock(mh);


    /* Open the dialog box */
    @call NewGTypeItemDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_GTYPE for TADocumentClass
 *
 * DESCRIPTION:	Lets the user put a new grade type into the list
 *                  or edit an existing one
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_NEW_GTYPE
{
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 GradeTypeStruct	*gradeTypePtr;
 char			typeStr[NAME_SIZE], wtString[10];
 word			selection, i, j, oldWeight;
 dword			weight;
 optr	gPWeight[MAX_GRADE_PDS] = {@NGTIWt1, @NGTIWt2, @NGTIWt3,
							  @NGTIWt4, @NGTIWt5, @NGTIWt6};
 BasicDBFieldID	fieldID;
 BasicDBRecordID	recordID;
 BasicDBError		error;
 dword			gradeSum[MAX_GRADE_TYPES];
 Boolean			gpWeightChange[MAX_GRADE_TYPES] = {
				  FALSE,FALSE,FALSE,FALSE,FALSE,FALSE};
 Boolean			oneWtChanged = FALSE;
 WWFixedAsDWord	avg;

 
    @call NGTIName::MSG_VIS_TEXT_GET_ALL_PTR(typeStr);

    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);

    if (g_isNewGTypeOrElem)  {
	  /* append the new item */
	  gradeTypePtr = ChunkArrayAppendHandles(
		      mh,
			 pself->TADI_gradeTypesChunkArray,
			 0);
	  pself->TADI_numTypes++;
	  }
    else {
	  /* get the selection */
	  selection = @call GTypeDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  /* replace the existing */
	  gradeTypePtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeTypesChunkArray,
		   selection,
		   0);
	  }
    /* save the name */
    strcpy(gradeTypePtr->GTS_type, typeStr);
    /* and its weights */
    for (i = 0; i < (pself->TADI_numGradePds); i++) {
	  @call gPWeight[i]::MSG_VIS_TEXT_GET_ALL_PTR(wtString);
	  UtilAsciiToHex32(wtString, &weight);
	  oldWeight = gradeTypePtr->GTS_weight[i];
	  if (oldWeight != (word) weight) {
		gpWeightChange[i] = TRUE;
		oneWtChanged = TRUE;
		}
	  gradeTypePtr->GTS_weight[i] = (word) weight;
	  }
    VMDirty(mh);
    VMUnlock(mh);

    /* and tell the list */
    if (g_isNewGTypeOrElem)
	  @call GTypeDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);
    else
	  @send self::MSG_GTYPE_DLIST_MONIKER_QUERY(@GTypeDList, selection);

    /* show the totals */
    ShowGradeTypeTotals(pself->GDI_fileHandle,
				    pself->TADI_gradeTypesChunkArray,
				    pself->TADI_numGradePds);

    /* and tell the grids and the student grades arrays*/
    if (g_isNewGTypeOrElem || oneWtChanged)  {
	  /* the students */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
		/* get the student record */
		error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   i,
					   &mh);
		/* each grade period */
		for (j = 0; j < pself->TADI_numGradePds; j++) {
		   /* now the grade summary field */
		   fieldID = BasicDBGetFieldID(mh,
					BDBFHE_CATEGORY,
					STU_GRADE_SUM_1 + j,
					1);
		   BasicDBGetFieldData(mh, fieldID, gradeSum,
						   (MAX_GRADE_TYPES * sizeof(dword)));

		   if (g_isNewGTypeOrElem) {
			 /* shuffle the final gp array element up 1 */
			 gradeSum[pself->TADI_numTypes] = gradeSum[pself->TADI_numTypes - 1];
			 /* and initialize the new type */
			 gradeSum[pself->TADI_numTypes - 1] = NO_SUMMARY;
			 }
		   else if (gpWeightChange[j]) {
			 /* recalculate the final for that grade period */
			 avg = CalcGPFinal (pself->TADI_numTypes,
						  pself->GDI_fileHandle,
						  j,
						  pself->TADI_gradeTypesChunkArray,
						  gradeSum);
			 /* and put the final into the array */
			 if (avg) gradeSum[pself->TADI_numTypes] = avg;
			 else gradeSum[pself->TADI_numTypes] = NO_SUMMARY;
			 }

		   /* set the new field data */
		   error = BasicDBSetFieldData(mh, fieldID, gradeSum,
								 (MAX_GRADE_TYPES * sizeof(dword)));
		   }  /* end of grade periods loop - j */

		/* and store the record */
		error = BasicDBSaveRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   mh,
					   StudentsCallback,
					   &recordID);
		} /* end of cycle thru students for - i */

	  /* the grids... */
	  if (g_isNewGTypeOrElem) {
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradeTitlesGrid))::
			 MSG_VIS_GRID_ADD_COLUMN(pself->TADI_numElements[pself->TADI_curGradePd] + pself->TADI_numTypes - 1, GRADE_WIDTH);
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
			 MSG_VIS_GRID_ADD_COLUMN(pself->TADI_numElements[pself->TADI_curGradePd] + pself->TADI_numTypes - 1, GRADE_WIDTH);
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_UNSUSPEND();
		}
	  @call self::MSG_TADOC_UPDATE_GRID_CONTENTS();

	  }  /* end of update grids and students if */

    /* save the new numTypes */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    VMmapPtr->VMMS_numTypes = pself->TADI_numTypes;
    VMDirty(mh);
    VMUnlock(mh);

    /* mark app not busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_GTYPE for TADocumentClass
 *
 * DESCRIPTION:	Deletes the hilited grade type from the list
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_DELETE_GTYPE
{
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 GradeTypeStruct	*gradeTypePtr;
 GradeElementStruct*    element;
 word			selection, i, j;
 BasicDBFieldID	fieldID;
 BasicDBRecordID	recordID;
 BasicDBError		error;
 dword			gradeSum[MAX_GRADE_TYPES];
 char			typeString[NAME_SIZE];
 Boolean			foundDelType = FALSE;


    /* make sure there are no elements of this type stored */
    /* get the selection */
    selection = @call GTypeDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    gradeTypePtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeTypesChunkArray,
		   selection,
		   0);
    strcpy(typeString, gradeTypePtr->GTS_type);
    VMUnlock(mh);
    /* cycle thru the GPs */
    for (i = 0; i < pself->TADI_numGradePds; i++) {
	  /* and thru the elements in each GP */
	  vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_ELEM_1 + i);
	  VMLock(pself->GDI_fileHandle, vmbh ,&mh);
	  for (j = 0; j < pself->TADI_numElements[i]; j++) {
		element = ChunkArrayElementToPtrHandles(
			  mh,
			  pself->TADI_gradeElemChunkArray[i],
			  j,
			  0);
		/* is this a type to be deleted? */
		if (!strcmp(element->GES_type, typeString)) {
		   foundDelType = TRUE;
		   j = pself->TADI_numElements[i];
		   i = pself->TADI_numGradePds;
		   }
		} /* end of elements loop (j) */
	  VMUnlock(mh);
	  }  /* end of GP loop (i) */
    if (foundDelType) {
	  NotifyDBox(0, @CantDeleteGTypeMsg);
	  return;
	  }


    /* put up an are you sure dbox */
    if (AckDBox(0, 0, @ConfMsgDeleteGType) == ACK_NO) return;

    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    gradeTypePtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeTypesChunkArray,
		   selection,
		   0);
    /* delete this item */
    ChunkArrayDeleteHandle(pself->TADI_gradeTypesChunkArray, gradeTypePtr);
    VMDirty(mh);
    VMUnlock(mh);

    /* set the instance */
    pself->TADI_numTypes--;

    /* show the totals */
    ShowGradeTypeTotals(pself->GDI_fileHandle,
				    pself->TADI_gradeTypesChunkArray,
				    pself->TADI_numGradePds);

    /* disable the delete button */
    @call GTypeEdit::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call GTypeDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* and tell the list */
    @call GTypeDList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(selection, 1);
    @call GTypeDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* and tell the students */
    for (i = 0; i < pself->TADI_numStudents; i++)  {
	  /* get the student record */
	  error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   i,
					   &mh);
	  /* now the grade summary field */
	  fieldID = BasicDBGetFieldID(mh,
					BDBFHE_CATEGORY,
					STU_GRADE_SUM_1  + pself->TADI_curGradePd,
					1);
	  BasicDBGetFieldData(mh, fieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));

	  /* shuffle the type avg array elements down 1 */
	  for (j = selection; j < (pself->TADI_numTypes + 1); j++) {
		   gradeSum[j] = gradeSum[j + 1];
		   }

	  /* and initialize the removed one */
	  gradeSum[pself->TADI_numTypes] = NO_SUMMARY;

	  /* set the new field data */
	  error = BasicDBSetFieldData(mh, fieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));
	  /* and store the record */
	  error = BasicDBSaveRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   mh,
					   StudentsCallback,
					   &recordID);

	  } /* end of cycle thru students for */

    /* and tell the grids */
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
/*    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradeTitlesGrid))::
			    MSG_META_SUSPEND();
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
			    MSG_META_SUSPEND();
*/    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradeTitlesGrid))::
			 MSG_VIS_GRID_DELETE_COLUMN(selection + pself->TADI_numElements[pself->TADI_curGradePd]);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
			 MSG_VIS_GRID_DELETE_COLUMN(selection + pself->TADI_numElements[pself->TADI_curGradePd]);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_UNSUSPEND();
/*    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradeTitlesGrid))::
			    MSG_META_UNSUSPEND();
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
			    MSG_META_UNSUSPEND();
*/    @call self::MSG_TADOC_UPDATE_GRID_CONTENTS();

    /* save the new numTypes */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    VMmapPtr->VMMS_numTypes = pself->TADI_numTypes;
    VMDirty(mh);
    VMUnlock(mh); 

    /* mark app not busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GTYPE_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection in the grade type list.
 *                  Enables use and delete buttons
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_GTYPE_DLIST_APPLY
{

    @call GTypeEdit::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call GTypeDelete::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GTYPE_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for grade types list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_GTYPE_DLIST_MONIKER_QUERY
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 GradeTypeStruct	*gradeTypePtr;
 char			wtString[10];
 word			width;

 
    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    gradeTypePtr = ChunkArrayElementToPtrHandles(
			    mh,
			    pself->TADI_gradeTypesChunkArray,
			    item,
			    0);

    if (list == @GSUEGradeTypeList)  {
       /* we show just the name */
	  @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, gradeTypePtr->GTS_type);
	  VMUnlock(mh);
	  }
    else {
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
    GrDrawText(gstate, 0, 0, gradeTypePtr->GTS_type, 0);
    UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[0]),
					  UHTAF_NULL_TERMINATE);
    GrDrawText(gstate, 150, 0, wtString, 0);
    if (pself->TADI_numGradePds > 1) {
	  UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[1]),
					  UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 190, 0, wtString, 0);
	  width = 230;
	  }
    if (pself->TADI_numGradePds > 2) {
	  UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[2]),
					  UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 230, 0, wtString, 0);
	  width = 270;
	  }
    if (pself->TADI_numGradePds > 3) {
	  UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[3]),
					  UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 270, 0, wtString, 0);
	  width = 310;
	  }
    if (pself->TADI_numGradePds > 4) {
	  UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[4]),
					  UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 310, 0, wtString, 0);
	  width = 350;
	  }
    if (pself->TADI_numGradePds > 5) {
	  UtilHex32ToAscii(wtString,
					  (dword) (gradeTypePtr->GTS_weight[5]),
					  UHTAF_NULL_TERMINATE);
	  GrDrawText(gstate, 350, 0, wtString, 0);
	  width = 390;
	  }
    VMUnlock(mh);
    GrEndGString(gstate) ;

    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  g_sysPointSize + 4,
				  width,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;
    } /* end of show the weights else */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_GRADE_CONV_SETUP for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_GRADE_CONV_SETUP
{
LGVMMapStruct		*mapPtr;
VMBlockHandle		vmbh;
MemHandle			mh;
Boolean			plusMinus;
char				letters[6];
word				i;
WWFixedAsDWord		numVal[30];
optr				ltrObj[5] = {@GCSLetter1, @GCSLetter2, @GCSLetter3,
                                 @GCSLetter4, @GCSLetter5};
optr				numObjG[10] = {@GCSRange1Upper, @GCSRange1Lower,
							@GCSRange2Upper, @GCSRange2Lower,
							@GCSRange3Upper, @GCSRange3Lower,
							@GCSRange4Upper, @GCSRange4Lower,
							@GCSRange5Upper, @GCSRange5Lower};
optr				numObjM[10] = {@GCSRangeM1Upper, @GCSRangeM1Lower,
							@GCSRangeM2Upper, @GCSRangeM2Lower,
							@GCSRangeM3Upper, @GCSRangeM3Lower,
							@GCSRangeM4Upper, @GCSRangeM4Lower,
							@GCSRangeM5Upper, @GCSRangeM5Lower};
optr				numObjP[10] = {@GCSRangeP1Upper, @GCSRangeP1Lower,
							@GCSRangeP2Upper, @GCSRangeP2Lower,
							@GCSRangeP3Upper, @GCSRangeP3Lower,
							@GCSRangeP4Upper, @GCSRangeP4Lower,
							@GCSRangeP5Upper, @GCSRangeP5Lower};


    if (!g_letterFileHan)  {
	  /* then create the file */
	  FilePushDir();
       FileSetCurrentPath(SP_USER_DATA, ".");
	  g_letterFileHan = VMOpen("TA Letter Grades",
					 VMAF_FORCE_READ_WRITE,
					 VMO_CREATE_ONLY, 0);
	  FilePopDir();
	  /* initialize the data in the map block */
	  vmbh = VMAlloc(g_letterFileHan, sizeof(LGVMMapStruct), 0);
	  VMSetMapBlock(g_letterFileHan, vmbh);
	  mapPtr = VMLock(g_letterFileHan, vmbh, &mh);
	  mapPtr->LGS_plusMinus = FALSE;
	  strcpy(mapPtr->LGS_letters, "ABCDE");
	  for (i = 0; i < 30; i++) {
		mapPtr->LGS_numVal[i] = 0;
		numVal[i] = 0;
		}
	  VMDirty(mh);
	  VMUnlock(mh);
	  VMSave(g_letterFileHan);
	  plusMinus = FALSE;
	  strcpy(letters, "ABCDE");
	  }
    else {
       /* get the data */
	  vmbh = VMGetMapBlock(g_letterFileHan);
	  mapPtr = VMLock(g_letterFileHan, vmbh, &mh);
	  plusMinus = mapPtr->LGS_plusMinus;
	  strcpy(letters, mapPtr->LGS_letters);
	  for (i = 0; i < 30; i++) {
		numVal[i] = mapPtr->LGS_numVal[i];
		}
	  VMUnlock(mh);
	  }

    /* fill in the dbox accordingly */
    /* first the letters */
    if (letters[0]) {
	  for (i = 0; i < 5; i++)  {
		@call ltrObj[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(&letters[i], 1);
		}
	  }
    /* now the numbers */
    for (i = 0; i < 10; i++) {
	  @call numObjG[i]::MSG_GEN_VALUE_SET_VALUE(numVal[i], FALSE);
	  }
    for (i = 0; i < 10; i++) {
	  @call numObjM[i]::MSG_GEN_VALUE_SET_VALUE(numVal[i + 10], FALSE);
	  }
    for (i = 0; i < 10; i++) {
	  @call numObjP[i]::MSG_GEN_VALUE_SET_VALUE(numVal[i + 20], FALSE);
	  }

    /* set the boolean */
    @call GCSUGPlusMinusBGroup::
		  MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(GC_PLUS_MINUS, plusMinus);

    /* show or hide the + and - groups */
    if (plusMinus) {
	  @send GCSUGGradeMinus::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @send GCSUGGradePlus::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @send GCSUGGradeMinus::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @send GCSUGGradePlus::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    @send GradeConvSetUpGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SAVE_GRADE_CONV_SETUP for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_SAVE_GRADE_CONV_SETUP
{
LGVMMapStruct		*mapPtr;
VMBlockHandle		vmbh;
MemHandle			mh;
char				gradeLetter[2];
word				i;
optr				ltrObj[5] = {@GCSLetter1, @GCSLetter2, @GCSLetter3,
                                 @GCSLetter4, @GCSLetter5};
optr				numObjG[10] = {@GCSRange1Upper, @GCSRange1Lower,
							@GCSRange2Upper, @GCSRange2Lower,
							@GCSRange3Upper, @GCSRange3Lower,
							@GCSRange4Upper, @GCSRange4Lower,
							@GCSRange5Upper, @GCSRange5Lower};
optr				numObjM[10] = {@GCSRangeM1Upper, @GCSRangeM1Lower,
							@GCSRangeM2Upper, @GCSRangeM2Lower,
							@GCSRangeM3Upper, @GCSRangeM3Lower,
							@GCSRangeM4Upper, @GCSRangeM4Lower,
							@GCSRangeM5Upper, @GCSRangeM5Lower};
optr				numObjP[10] = {@GCSRangeP1Upper, @GCSRangeP1Lower,
							@GCSRangeP2Upper, @GCSRangeP2Lower,
							@GCSRangeP3Upper, @GCSRangeP3Lower,
							@GCSRangeP4Upper, @GCSRangeP4Lower,
							@GCSRangeP5Upper, @GCSRangeP5Lower};


    if (!g_letterFileHan)  {
	  return;
	  }
    else {
	  /* save the data */
	  vmbh = VMGetMapBlock(g_letterFileHan);
	  mapPtr = VMLock(g_letterFileHan, vmbh, &mh);
	  /* the boolean */
	  mapPtr->LGS_plusMinus = @call GCSUGPlusMinusBGroup::
				   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(GC_PLUS_MINUS);
       /* the grade letters */
	  mapPtr->LGS_letters[0] = 0;
	  for (i = 0; i < 5; i++)  {
		@call ltrObj[i]::MSG_VIS_TEXT_GET_ALL_PTR(gradeLetter);
		if (!gradeLetter) strcpy(gradeLetter, " ");
		mapPtr->LGS_letters[i] = gradeLetter[0];
		}
	  /* the values */
	  for (i = 0; i < 10; i++) {
		mapPtr->LGS_numVal[i] = @call numObjG[i]::MSG_GEN_VALUE_GET_VALUE();
		}
	  if (mapPtr->LGS_plusMinus) {
		for (i = 0; i < 10; i++) {
		   mapPtr->LGS_numVal[i + 10] = @call numObjM[i]::MSG_GEN_VALUE_GET_VALUE();
		   }
		for (i = 0; i < 10; i++) {
		   mapPtr->LGS_numVal[i + 20] = @call numObjP[i]::MSG_GEN_VALUE_GET_VALUE();
		   }
		}
	  VMDirty(mh);
	  VMUnlock(mh);
	  VMSave(g_letterFileHan);

	  /* and enable the menu item */
	  @send SUShowLettersItem::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* close the dbox */
    @send GradeConvSetUpGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GRADE_CONV_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_GRADE_CONV_BOOLEAN_STATUS
{

	if (selectedBooleans) {
	   @send GCSUGGradeMinus::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   @send GCSUGGradePlus::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   }
	else {
	   @send GCSUGGradeMinus::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   @send GCSUGGradePlus::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	   /* to get the dialog to redraw w/o space for the above two */
        @send GradeConvSetUpGroup::MSG_GEN_RESET_TO_INITIAL_SIZE(VUM_NOW);
	   }


}

/***********************************************************************
 *
 * MESSAGE:	MSG_TOGGLE_SHOW_LETTER_GRADES for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_TOGGLE_SHOW_LETTER_GRADES
{

    if (!g_showLetters) {
	  @call SUShowLettersItem::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@DontShowLettersMoniker),
						   VUM_NOW);
	  g_showLetters = TRUE;
	  }
    else  {
	  @call SUShowLettersItem::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@ShowLettersMoniker),
						   VUM_NOW);
	  g_showLetters = FALSE;
	  }

    InitFileWriteBoolean("Teacher's Aide", "letterGrades", g_showLetters);
    InitFileCommit();

    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
				 MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
				   0, 0, VIS_GRID_LOCATION_PAST_END, VIS_GRID_LOCATION_PAST_END);

}


