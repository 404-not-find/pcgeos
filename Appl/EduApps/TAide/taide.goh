/***********************************************************************
 *
 *
 * PROJECT: Breadbox Teacher's Aide
 * FILE:        taide.goh
 * AUTHOR:  John F. Howard,   2/99
 *
 * DESCRIPTION:
 *  This file has the global variables
 *      and structures for the application.    
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <gstring.h>
#include <Ansi/string.h>
@include <iacp.goh>     /* to launch calculator */
#include <token.h>  /* for assigning doc token */
#include <float.h>
#include <initfile.h>
#include <basicdb.h>
@include <Objects/vTGridC.goh>
@include "seating.goh"
@include <Objects/vLTextC.goh>
@include <Objects/treport.goh>

/*
 ***************************************************************************
 *      Global variables and definitions
 ***************************************************************************
 */

/* constants for ack d boxes */
#define ACK_YES 1
#define ACK_NO 2

/* for grid heights and widths */
#define TITLE_HEIGHT 45
#define ATT_WIDTH 30
#define ATT_SUMMARY_WIDTH 60
#define GRADE_WIDTH 55
#define NAME_HEIGHT 20
#define NAME_WIDTH 200

/* constants for various char strings */
#define NAME_SIZE 40
#define GRADE_DESCRIPT 50
#define DATE_SIZE 12
#define ATT_STRING_SIZE 250

#define NUM_ONLY 1
#define NUM_AND_NAME 2

/* for the stu name and number callbacks */
#define VFC_NAME 1
#define VFC_NUMBER 2

/* for the stu notes date and subj callbacks */
#define VFC_DATE 3
#define VFC_SUBJ 4

/* setup constants */
#define YSU_WEEKENDS 1
#define YSU_SEMESTERS 2
#define HSU_TEACHWORK 1
#define MOD_ATTENDANCE 1
#define MOD_GRADES 2
#define MOD_SEATING 3

/* constants for student data categories
 * Make sure these are sequential and they always end
 * with the dummy STU_LAST_CAT
 */
#define STU_L_NAME  1
#define STU_F_NAME  2
#define STU_M_NAME  3
#define STU_NUMBER  4
#define STU_GRADE  5
#define STU_TEAM  6
#define STU_BDAY  7
#define STU_AGE  8
#define STU_MED  9
#define STU_CAT  10
#define STU_CLASS  11
#define STU_ROOM  12
#define STU_BUS  13
#define STU_TEXT  14
#define STU_SPARE  15
#define STU_ADDR  16  
#define STU_CITY  17
#define STU_STATE  18
#define STU_ZIP  19
#define STU_PHONE  20
#define STU_EMAIL  21
#define STU_MNAME  22
#define STU_MHPHONE  23
#define STU_MWPHONE  24
#define STU_MEMAIL  25
#define STU_FNAME  26
#define STU_FHPHONE  27
#define STU_FWPHONE  28
#define STU_FEMAIL  29
#define STU_NUM_NOTES  30
#define STU_NOTES_DB  31
#define STU_NOTES_D_INDX  32
#define STU_NOTES_S_INDX  33
#define STU_ATTENDANCE  34
#define STU_GRADES_1  35
#define STU_GRADES_2  36
#define STU_GRADES_3  37
#define STU_GRADES_4  38
#define STU_GRADES_5  39
#define STU_GRADES_6  40
#define STU_GRADE_SUM_1  41
#define STU_GRADE_SUM_2  42
#define STU_GRADE_SUM_3  43
#define STU_GRADE_SUM_4  44
#define STU_GRADE_SUM_5  45
#define STU_GRADE_SUM_6  46
#define STU_EMERG_CONT  47
#define STU_LAST_CAT  48

#define STU_NOTE_DATE 100
#define STU_NOTE_SUBJ 101
#define STU_NOTE_TEXT 102

#define MAX_GRADE_PDS 6
#define GC_PLUS_MINUS 1

/* VMBlock IDs */
#define STU_PICK_TEAM 200
#define STU_PICK_MED 201
#define STU_PICK_CAT 202
#define STU_PICK_CLASS 203
#define GRADE_TYPES 204
#define GRADE_ELEM_1 300  /* one for each gp */
#define GRADE_ELEM_2 301
#define GRADE_ELEM_3 302
#define GRADE_ELEM_4 303
#define GRADE_ELEM_5 304
#define GRADE_ELEM_6 305
#define ATT_CODE 400
#define HOLIDAY 401

#define FROM_GEN_ITEM 255 /* gp selection from dbox vs menu */
#define NEW_ELEM 0xffff
#define EDIT_ELEM 0xfffe
#define MAX_ELEMENTS 100
#define NO_GRADE 255
#define NO_SUMMARY 0xffffffff
#define EQUAL_WEIGHT 255
#define NUM_DEFAULT_GRADE_TYPES 6
#define MAX_GRADE_TYPES 10

#define TA_LAYOUT_SP     SP_USER_DATA 
#define TA_LAYOUT_DIR    "TA Layouts"
#define TA_LAYOUT_ICON_TOKEN       "TALa"
#define TA_LAYOUT_ICON_MFID        16431

#define RPT_PROG 1
#define RPT_ROSTER 2
#define RPT_ATT 3
#define RPT_NOTE 4
#define RPT_GRADE 5
#define RPT_BDAY 6
#define RGS_NUM 1
#define RGS_NUM_NAME 2
#define RH_SCHOOL 1
#define RH_TEACHER 2
#define RH_DATE 4
#define RC_ELEMENTS 1
#define RC_TYPES 2
#define RC_SEMESTER 4
#define RC_FINAL 8
#define RC_PAGE 16
#define RC_NOTE 32
#define RS_ALL 1
#define RR_ADDRESS 1
#define RR_PHONE 2
#define RR_EMAIL 4
#define RR_MOTHER 8
#define RR_FATHER 16
#define RR_EMERG 32
#define RA_GP 1
#define RA_YTD 2

#define RPT_GRD_PD_1 0
#define RPT_GRD_PD_2 1
#define RPT_GRD_PD_3 2
#define RPT_GRD_PD_4 3
#define RPT_GRD_PD_5 4
#define RPT_GRD_PD_6 5
#define RPT_GRD_PD_S 6

/* for import read types */
#define RT_TAG 1
#define RT_DATA 2
#define RT_NUM_NOTES 3
#define RT_N_SUBJ 4
#define RT_N_DATE 5
#define RT_NOTE 6

#define APP_CALC 1
#define APP_PLAN 2

extern word g_sysPointSize;
extern Boolean g_isNewGTypeOrElem;
extern Boolean g_importing;
extern Boolean g_noTyping;
extern Boolean g_showLetters;
extern VMFileHandle g_letterFileHan;
extern word g_numName;

/*
 ***************************************************************************
 *      Prototypes
 ***************************************************************************
 */

word AckDBox (char* string1, char* string2, optr ackMsg);

void NotifyDBox (char* string1, optr notifyMsg);

Boolean DateCheck(char dateString[12]);

word CountDays(word startDateNum, word endDateNum, Boolean showWeekends);

MemHandle MakeNewStuRec (FileHandle docFile, VMBlockHandle whichDB);

MemHandle ShowStuData (FileHandle docFile,
                 VMBlockHandle whichDB,
                 VMBlockHandle curStuIndex,
                 Boolean isDefault,
                 dword  whichStudent);

dword ShowStuNote (MemHandle openStuRecMH);

Boolean SaveStuData (MemHandle openStuRecMH);

sword _pascal StudentsCallback (MemHandle m1,
                          MemHandle m2,
                          word valueForCallback );

sword _pascal StuNotesCallback (MemHandle m1,
                          MemHandle m2,
                          word valueForCallback );

sword _pascal StuDefaultsCallback (MemHandle m1,
                          MemHandle m2,
                          word valueForCallback );

void StudentSeatingLabelDeclare( FileHandle docFile,
                           VMBlockHandle stuDBHan,
                           VMBlockHandle curStuIndex,
                           MemHandle display,
                           dword value,
                                 Boolean isIndex) ;
void StudentSeatingLabelDeclareAll(FileHandle docFile,
                            VMBlockHandle stuDBHan,
                            VMBlockHandle curStuIndex,
                            MemHandle display) ;
void StudentSeatingLabelDelete(MemHandle display, BasicDBRecordID recordID) ;

void StudentSeatingLabelsReset(FileHandle docFile,
                         VMBlockHandle stuDBHan,
                         VMBlockHandle curStuIndex,
                         MemHandle display) ;
void StudentSeatingSetCurrent(FileHandle docFile,
                        VMBlockHandle stuDBHan,
                        VMBlockHandle curStuIndex,
                        MemHandle display,
                        word index) ;

WWFixedAsDWord CalcTypeAvg (word numElements,
			   FileHandle fileHandle,
			   word curGradePd,
			   char* gTypeString,
			   ChunkHandle gradeElemChunkArray,
			   byte* grades);

WWFixedAsDWord CalcGPFinal (word numTypes,
			   FileHandle fileHandle,
			   word curGradePd,
			   ChunkHandle gradeTypesChunkArray,
			   dword* gradeSum);
			   
void GetLetterGrade(WWFixedAsDWord grade,
				char* tempStr);

/*
 ***************************************************************************
 *      Structure Definitions
 ***************************************************************************
 */


/* a structure to hold the various globals that we'll
   need across app closings */
typedef struct {

    dword               VMMS_numStudents;
    VMBlockHandle       VMMS_StuDBHan;
    VMBlockHandle       VMMS_stuNameIndex;
    VMBlockHandle       VMMS_stuNumIndex;
    VMBlockHandle       VMMS_curStuIndex;
    VMBlockHandle       VMMS_stuDefDBHan;
    VMBlockHandle       VMMS_delStuDBHan;  /* not used */
    dword               VMMS_numDelStudents;  /* not used */
    ChunkHandle     VMMS_pickListChunkArray[4];
    ChunkHandle     VMMS_gradeTypesChunkArray;
    ChunkHandle     VMMS_gradeElemChunkArray[MAX_GRADE_PDS];
    ChunkHandle     VMMS_attCodeChunkArray;
    ChunkHandle     VMMS_holidayChunkArray;
    char                VMMS_extraFieldName[15];
    word                 VMMS_gpStart[MAX_GRADE_PDS];
    word                 VMMS_gpEnd[MAX_GRADE_PDS];
    word                VMMS_curNumAttDays;
    word                VMMS_curStuNoteSortPref;
    Boolean         VMMS_showWeekends;
    Boolean         VMMS_showSemesters;
    word                VMMS_curGradePd;
    word                VMMS_curModule;
    word                VMMS_numGradePds;
    word                VMMS_numTypes;
    word                VMMS_numElements[MAX_GRADE_PDS];
    VMBlockHandle        VMMS_seatingLayout ;
    char			VMMS_teacher[NAME_SIZE];
    char			VMMS_school[NAME_SIZE];
    char			VMMS_system[NAME_SIZE];
} VMMapStruct;

/* a structure to hold the letter grade file VMMap block */
typedef struct {

    Boolean			LGS_plusMinus;
    char				LGS_letters[6];
    WWFixedAsDWord		LGS_numVal[30];

} LGVMMapStruct;

/* a structure to hold the grade types info */
typedef struct {

    char                GTS_type[NAME_SIZE];
    word                GTS_weight[MAX_GRADE_PDS];

} GradeTypeStruct;

/* a structure to hold the grade elements info */
typedef struct {

    char                GES_type[NAME_SIZE];
    char                 GES_description[GRADE_DESCRIPT];
    char                 GES_date[DATE_SIZE];
    word                GES_weight;

} GradeElementStruct;

/* a structure to hold the attendance codes info */
typedef struct {

    char                ACS_type[NAME_SIZE];
    char                 ACS_code[2];

} AttCodeStruct;

/* a structure to hold the holidays info */
typedef struct {

    char                HS_name[NAME_SIZE];
    word                 HS_start;
    word                 HS_end;
    Boolean          HS_tWork;

} HolidaysStruct;


/*
 ***************************************************************************
 *      Class & Message Definitions
 ***************************************************************************
 */
@class  TAProcessClass, GenProcessClass ;

   /* General Messages */
   @message void MSG_LAUNCH_TOOL(word whichApp);


   @endc

@class  TADocumentClass, GenDocumentClass;
    /* instance data to store doc file specific info */
    @instance VMBlockHandle TADI_stuDBHan = NullHandle;
    @instance VMBlockHandle TADI_stuNameIndex = NullHandle;
    @instance VMBlockHandle TADI_stuNumIndex = NullHandle;
    @instance VMBlockHandle TADI_curStuIndex = NullHandle;
    @instance VMBlockHandle TADI_stuDefDBHan = NullHandle;
  //  @instance VMBlockHandle TADI_delStuDBHan = NullHandle;
    @instance Boolean TADI_isNewStu = FALSE;
    @instance Boolean TADI_isNewNote = FALSE;
    @instance dword TADI_numStudents = 0;
    @instance MemHandle TADI_openStuRecMH = NullHandle;
    @instance dword TADI_curStudent = -1;
    @instance dword TADI_curStuNumNotes = 0;
    @instance word TADI_curPickList = 0;
    @instance word TADI_pickListChunkArray[4] = {0, 0, 0, 0};
    /* for some reason I get a compiler error (invalid indirection)
    * when I give the arrays a type of ChunkHandle.  They work with word.
    */
    @instance ChunkHandle TADI_gradeTypesChunkArray = 0;
    @instance word TADI_gradeElemChunkArray[MAX_GRADE_PDS] = {0,0,0,0,0,0};
    @instance ChunkHandle TADI_attCodeChunkArray = 0;
    @instance ChunkHandle TADI_holidayChunkArray = 0;
    @instance word TADI_curNumAttDays = 0;
    @instance word TADI_curStuNoteSortPref = VFC_DATE;
    @instance Boolean TADI_showWeekends = FALSE;
    @instance Boolean TADI_showSemesters = FALSE;
    @instance word TADI_curGradePd = 0;
    @instance word TADI_curModule = MOD_ATTENDANCE;
    @instance word TADI_numGradePds = 0;
    @instance word TADI_numTypes = NUM_DEFAULT_GRADE_TYPES;
    @instance word TADI_numElements[MAX_GRADE_PDS] = {0,0,0,0,0,0};
    @instance word TADI_reportType = RPT_PROG;


   /* messages getting/setting instance data */
   @message void MSG_TADOC_SET_CUR_STUDENT(dword curStudent);
   @message FileHandle MSG_TADOC_GET_FILE_HANDLE();
   @message VMBlockHandle MSG_TADOC_GET_STUDB_HANDLE();
   @message VMBlockHandle MSG_TADOC_GET_CUR_STU_INDEX_HANDLE();
   @message word MSG_TADOC_GET_CUR_GRADE_PD();
   @message ChunkHandle MSG_TADOC_GET_GRADE_ELEMENT_ARRAY(word whichGP);
   @message word MSG_TADOC_GET_CUR_NUM_ATT_DAYS();


   @message void MSG_CHANGE_MODULE(word whichMod);
   @message void MSG_SAVE_STUDENT_INFO();
   @message void MSG_DELETE_STUDENT();
   @message void MSG_CLOSE_STUDENT_DB();
   @message void MSG_SAVE_STUDENT_NOTE();
   @message void MSG_DELETE_STUDENT_NOTE();
   /* Messages for student database and dialog box */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_STUDENT;
   @message (GEN_TRIGGER_ACTION) MSG_PREV_NEXT_STUDENT;
   @message void MSG_NEW_STUDENT();
   @message (GEN_TRIGGER_ACTION) MSG_STUDENT_TAB;
   @message void MSG_SAVE_STU_DEFAULTS();
   /* the four student pick lists */
   @message void MSG_OPEN_STUDENT_PICK_LIST(word whichPick);
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_STU_PICK_DLIST_MONIKER_QUERY;
   @message void MSG_NEW_PICK_ITEM();
   @message void MSG_USE_PICK_ITEM();
   @message void MSG_DELETE_PICK_ITEM();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_STU_PICK_DLIST_APPLY;
   /* the student settings */
   @message void MSG_OPEN_STUDENT_SETTINGS();
   @message void MSG_SET_STUDENT_SETTINGS();
   @message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_EF_BOOLEAN_STATUS;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SF_ITEM_APPLY;
//   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_NOTES_SF_ITEM_APPLY;

   /* Messages for student notes */
   @message void MSG_NEW_STUDENT_NOTE();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_NOTE_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_NOTE_DLIST_MONIKER_QUERY;

   /* set-up messages */
   @message void MSG_OPEN_GRADE_PERIODS();
   @message void MSG_SET_GRADE_PERIOD(word whichGP);
   @message void MSG_OPEN_SCHOOL_YEAR();
   @message void MSG_SET_SCHOOL_YEAR();
   /* attendance */
   @message void MSG_OPEN_ATT_CODES();
   @message void MSG_OPEN_ADD_ATT_CODE();
   @message void MSG_NEW_ATT_CODE();
   @message void MSG_DELETE_ATT_CODE();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ACSU_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ACSU_DLIST_MONIKER_QUERY;
   @message void MSG_OPEN_ATT_CODE_DBL_CLICK();
   @message void MSG_OPEN_HOLIDAYS();
   @message void MSG_OPEN_ADD_HOLIDAY();
   @message void MSG_NEW_HOLIDAY();
   @message void MSG_DELETE_HOLIDAY();
   @message void MSG_CLOSE_HOLIDAY();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_HSU_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_HSU_DLIST_MONIKER_QUERY;
   /* grades */
   @message void MSG_OPEN_GRADE_TYPE_SETUP();
   @message void MSG_OPEN_GRADE_ELEMENT_SETUP();
   @message void MSG_OPEN_GRADE_ELEMENT(word column);
   @message void MSG_NEW_GRADE_ELEMENT();
   @message void MSG_DELETE_GRADE_ELEMENT();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GE_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_GE_DLIST_MONIKER_QUERY;
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GTYPE_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_GTYPE_DLIST_MONIKER_QUERY;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_NEW_GTYPE;
   @message void MSG_NEW_GTYPE();
   @message void MSG_DELETE_GTYPE();
   @message void MSG_OPEN_GRADE_CONV_SETUP();
   @message void MSG_SAVE_GRADE_CONV_SETUP();
   @message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_GRADE_CONV_BOOLEAN_STATUS;
   @message void MSG_TOGGLE_SHOW_LETTER_GRADES();

   @message void MSG_TADOC_SELECT_TITLES(word row, word column);

    /* grid drawing messages */
    @message (VIS_GRID_DRAW_CELL) MSG_DRAW_MODULE_NAME_LIST;
    @message (VIS_GRID_DRAW_CELL) MSG_DRAW_ATT_TITLE;
    @message (VIS_GRID_DRAW_CELL) MSG_DRAW_MAIN_ATTEND;
    @message (VIS_TEXT_GRID_QUERY_DATA) MSG_SHOW_ATTENDANCE_GRID_DATA;
    @message (VIS_TEXT_GRID_SAVE_DATA) MSG_SAVE_ATTENDANCE_GRID_DATA;
    @message (VIS_GRID_DRAW_CELL) MSG_DRAW_GRADE_TITLE;
    @message (VIS_GRID_DRAW_CELL) MSG_DRAW_MAIN_GRADE;
    @message (VIS_TEXT_GRID_QUERY_DATA) MSG_SHOW_GRADE_GRID_DATA;
    @message (VIS_TEXT_GRID_SAVE_DATA) MSG_SAVE_GRADE_GRID_DATA;
    @message (VIS_GRID_DRAW_CELL_GROUP) MSG_GRID_DRAW_CELL_GROUP;
    @message void MSG_TADOC_UPDATE_GRID_CONTENTS();

   /* seating messages */
   @message (PROTOMSG_SEATING_QUERY_LABEL) MSG_TADOC_QUERY_STUDENT_LABEL ;
   @message (PROTOMSG_SEATING_NEXT_LABEL) MSG_TADOC_GET_NEXT_STUDENT_LABEL ;
   @message (GEN_TRIGGER_ACTION) MSG_TADOC_SAVE_LAYOUT_TRIGGER ;
   @message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_TADOC_SAVE_LAYOUT_SELECTION;
   @message (GEN_TRIGGER_ACTION) MSG_TADOC_LOAD_LAYOUT_TRIGGER ;
   @message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_TADOC_LOAD_LAYOUT_SELECTION;
   @message (GEN_TRIGGER_ACTION) MSG_TADOC_AUTO_LAYOUT_RANDOM ;
   @message (GEN_TRIGGER_ACTION) MSG_TADOC_AUTO_LAYOUT_ORDERED ;
   @message void MSG_TADOC_SEATING_SET_CURRENT(word row);

   /* reports messages */
   @message void MSG_OPEN_REPORT_DBOX();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RPT_SEL_GRD_PD_APPLY;
   @message (GEN_TEXT_REPORT_GENERATE) MSG_CREATE_REPORT;
   @message void MSG_REPORT_TYPE (word whichType);
	@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_RPT_STU_SEL_BOOLEAN_STATUS;
	@message void MSG_OPEN_SELECT_STUDENTS();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RPT_SEL_STU_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_RPT_SEL_STU_DLIST_MONIKER_QUERY;
   @message void MSG_RPT_CLEAR_ALL_STU();
   @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RPT_SEL_STU_NOTES_DLIST_APPLY;
   @message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_RPT_NOTES_SEL_BOOLEAN_STATUS;
   @message void MSG_OPEN_SELECT_NOTES();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RPT_SEL_NOTES_DLIST_APPLY;
	@message void MSG_RPT_CLEAR_ALL_NOTES();
	@message void MSG_OPEN_SELECT_ELEMENTS();
	@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_RPT_ELEMENTS_SEL_BOOLEAN_STATUS;
	@message void MSG_RPT_CLEAR_ALL_ELEMENTS();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RPT_SEL_ELEM_DLIST_APPLY;
   @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_RPT_SEL_ELEM_DLIST_MONIKER_QUERY;


   /* ImpEx messages */
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_IMPORT;
	@message void MSG_IMPORT_TADATA();
	@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_EXP_STU_SEL_BOOLEAN_STATUS;
   @message (GEN_TRIGGER_ACTION) MSG_OPEN_EXPORT;
   @message void MSG_EXPORT_TADATA();
@endc  /* TADocumentClass */

@class  VisModuleContentClass, VisContentClass;
@endc

@class  VisModuleCompClass, VisCompClass;
@endc

/* to look for dblclk in corner view */
@class  VisCornerModuleCompClass, VisModuleCompClass;
@endc

@class TADisplayClass, GenDisplayClass ;
    @message void MSG_TA_DISPLAY_UPDATE_RELATED_UI();
@endc

/* to look for dblclk on names list */
@class NameVisGridClass, VisGridClass;
@endc

/* to look for dblclk on grade title bar */
@class GTitleVisGridClass, VisGridClass;
@endc

@class MainVisTextGridClass, VisTextGridClass;
@endc

/* to look for dblclk in att cell */
@class MainAttVisTextGridClass, MainVisTextGridClass;
@endc

