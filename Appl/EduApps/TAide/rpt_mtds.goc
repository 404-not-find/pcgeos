/***************************************************************************
 *  FILE:			rpt_mtds.goc
 *  PROJECT:		Breadbox Teacher's Aide
 *  DESCRIPTION:	This file has methods for reports stuff
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "taide.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


 /*
 ***************************************************************************
 *		Code for reports stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ShowHeader(optr textObj, FileHandle fileHandle,
 *                        word reportType)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void ShowHeader(optr textObj,
			 FileHandle fileHandle,
			 word reportType)
{
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;
 char			tempStr[NAME_SIZE];
 TimerDateAndTime	date;
 word			gradePd;


    vmbh = VMGetMapBlock(fileHandle);
    VMmapPtr = VMLock(fileHandle, vmbh, &mh);
    /* show the title stuff */
    @RT_PARA_ATTR(@TextReportTitleParaAttrs);
    @RT_CHAR_ATTR(@TextReportTitleCharAttrs);
    if (@call RDBPHeaderSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RH_SCHOOL)) {
	  strcpy(tempStr, VMmapPtr->VMMS_school);
	  strcat(tempStr, "\r");
	  @RT_APPEND(tempStr);
	  strcpy(tempStr, VMmapPtr->VMMS_system);
	  strcat(tempStr, "\r");
	  @RT_APPEND(tempStr);
	  }
    if (@call RDBPHeaderSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RH_TEACHER)) {
	  strcpy(tempStr, VMmapPtr->VMMS_teacher);
	  strcat(tempStr, "\r");
	  @RT_APPEND(tempStr);
	  }
    if ((reportType == RPT_PROG) || (reportType == RPT_ATT)) {
	  gradePd = @call RDBPHeaderGradePdSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  MemLock(OptrToHandle(@GradePdStr));
	  strcpy(tempStr, LMemDeref(@GradePdStr));
	  MemUnlock(OptrToHandle(@GradePdStr));
	  strcat(tempStr, " ");
	  @RT_APPEND(tempStr);
	  UtilHex32ToAscii(tempStr, (dword) (gradePd + 1), UHTAF_NULL_TERMINATE);
	  strcat(tempStr, "\r");
	  @RT_APPEND(tempStr);
	  }
    if (@call RDBPHeaderSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RH_DATE)) {
	  TimerGetDateAndTime(&date);
	  LocalFormatDateTime(tempStr, DTF_SHORT, &date);

	  strcat(tempStr, "\r");
       @RT_APPEND(tempStr);
	  }
    VMUnlock(mh);
    
}

/***********************************************************************
 *
 * FUNCTION:	ShowStuName(optr textObj, MemHandle dbmh, char* string,
 *                         word whichWay)
 *
 *
 *
 * DESCRIPTION:  puts together the name and shows in report
 *
 *
 ***********************************************************************/
void ShowStuName(optr textObj,
			  MemHandle dbmh,
		  	  char* string,
			  word whichWay)
{
 char		     tempStr[NAME_SIZE];
 word			size;
 BasicDBFieldID	fieldID;


	 /* use the number */
	 if (whichWay == NUM_ONLY) {
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_NUMBER,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcpy(string, "\r");
		strcat(string, tempStr);
		strcat(string, "\r");
		}

	 /* put together the number & name */
	 else if (whichWay == NUM_AND_NAME) {
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_NUMBER,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcpy(string, "\r");
		strcat(string, tempStr);
		strcat(string, ", ");
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_L_NAME,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcat(string, tempStr);
		strcat(string, "\r");
		}

	 /* put together the name */
	 else {
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_L_NAME,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcpy(string, "\r");
		strcat(string, tempStr);
		strcat(string, ", ");
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_F_NAME,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcat(string, tempStr);
		strcat(string, " ");
		fieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_M_NAME,
					1);
		size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
		tempStr[size] = 0;
		strcat(string, tempStr);
		strcat(string, "\r");
		}

	 @RT_CHAR_ATTR(@TextReportHeaderCharAttrs);
    @RT_APPEND(string);

    return;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_REPORT_TYPE for TADocumentClass
 *                     (word	whichType)
 * DESCRIPTION:  Sets up the proper selection group and moniker 
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_REPORT_TYPE
{

    switch (whichType) {
	  case RPT_PROG:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@ProgRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		break;
	  case RPT_ROSTER:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@RosterRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		break;
	  case RPT_ATT:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@AttRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		break;
	  case RPT_NOTE:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
						   OptrToChunk(@NotesRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@call RDBPNotesStuList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->TADI_numStudents);
		@call RDBPNotesStuList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
		@send self::MSG_RPT_SEL_STU_NOTES_DLIST_APPLY(0, 1, 0);
		break;
	  case RPT_GRADE:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@GradeRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		break;
	  case RPT_BDAY:
		@call RDBSelectionsGroup::MSG_GEN_USE_VIS_MONIKER(
							OptrToChunk(@BdayRptMoniker),
						   VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBProgressGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBRosterGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBAttendGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBNotesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBGradesGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBBdayGroup::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPHeaderGradePdSel::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send RDBPStudentGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		break;
	  } /* end switch */

    pself->TADI_reportType = whichType;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_REPORT_DBOX for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_REPORT_DBOX
{
word		i;
optr		item[6] = {@RDBPHGradePd1, @RDBPHGradePd2, @RDBPHGradePd3,
				@RDBPHGradePd4, @RDBPHGradePd5, @RDBPHGradePd6};

    /* tell the report class the destination */
    @call RDBReport::MSG_GEN_TEXT_REPORT_SET_DESTINATION(oself);

    /* set the right grade periods */
    for (i = 0; i < pself->TADI_numGradePds; i++) {
	  @send item[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    for (i = pself->TADI_numGradePds; i < MAX_GRADE_PDS; i++) {
	  @send item[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    @send RDBPHeaderGradePdSel::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
					    pself->TADI_curGradePd, FALSE);


    /* Open the dialog box */
    @call ReportDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_REPORT for TADocumentClass
 *                     (optr textObj)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_CREATE_REPORT
{
 VMBlockHandle		vmbh, notesDBHan, notesIndexHan;
 MemHandle		mh, dbmh;
 GradeElementStruct *element;
 GradeTypeStruct	*gradeTypePtr;
 char			string[NAME_SIZE * 3], tempStr[NAME_SIZE];
 word			i, j, k, size, place, gradePd;
 BasicDBFieldID	gradeFieldID, sumFieldID, fieldID;
 byte			grades[MAX_ELEMENTS];
 dword          	gradeSum[MAX_GRADE_TYPES], curStuNumNotes, value;
 Boolean			allStu, thisStu, types, final, allElem, thisElem;
 word			numSel, retSel, ss, count, numCodes, start;
 word			selList[50], gp, whichStuLabel, month;
 Boolean			firstStu = TRUE;
 WWFixedAsDWord	total, avg;
 char*			text;
 BasicDBRecordHeader *	recordPtr;
 char			subjString[NAME_SIZE];
 char			attString[ATT_STRING_SIZE];
 AttCodeStruct      *attCodePtr;
 TimerDateAndTime	date;


    /* suspend the text object while adding to it... */
    @call textObj::MSG_META_SUSPEND() ;

    /* get the selected grade period */
    gradePd = @call RDBPHeaderGradePdSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* see if all or selected students */
    allStu = @call RDBPStudentSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RS_ALL);
    if(!allStu) {
	  numSel = @call RSDBDList::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
	  retSel = @call RSDBDList::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(selList, numSel);
	  }

	 /* see how the names want to be displayed (use the Student Settings) */
	 whichStuLabel = 0;
	 if (pself->TADI_curStuIndex == pself->TADI_stuNumIndex) {
		whichStuLabel = @call SSSFNumberNameGroup::
		                                 MSG_GEN_ITEM_GROUP_GET_SELECTION();
		}

	 /* show the title stuff */
    ShowHeader(textObj, pself->GDI_fileHandle, pself->TADI_reportType);

    switch (pself->TADI_reportType) {
	  case RPT_ROSTER:
	  /* set things for the report */
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);
  //	  @RT_TAB_GROUP(@RosterTabs) ;


	  /* cycle thru students getting the info */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
		/* if not all stu selected do we want this student */
		if (allStu) thisStu = TRUE;
		else {
		   thisStu = FALSE;
		   for (ss = 0; ss < retSel; ss++) {
			 if (i == selList[ss]) {
			    thisStu = TRUE;
			    ss = retSel;
			    }
			 }
		   }
		if (thisStu) {
		   /* get the student record */
		   BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
						pself->TADI_curStuIndex,
					   i,
					   &dbmh);

		   ShowStuName(textObj, dbmh, string, whichStuLabel);
		   @RT_CHAR_ATTR(@TextReportTextReportCharAttrs);

		   /* show the address info */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_ADDRESS))  {
			 /* the street address field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_ADDR, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 /* the city, state & zip fields */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_CITY, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, ", ");
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_STATE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcat(string, tempStr);
			 strcat(string, "  ");
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_ZIP, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcat(string, tempStr);
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of show address if */
		   /* show the phone # */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_PHONE))  {
			 /* the street address field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_PHONE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of phone if */
		   /* show the email */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_EMAIL))  {
			 /* the street address field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_EMAIL, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of email if */
		   /* show the mother info */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_MOTHER))  {
			 /* the m name field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_MNAME, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 /* the home & work # fields */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_MHPHONE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 MemLock(OptrToHandle(@HStr));
			 strcpy(string, LMemDeref(@HStr));
			 strcat(string, tempStr);
			 strcat(string, "  ");
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_MWPHONE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcat(string, LMemDeref(@WStr));
			 strcat(string, tempStr);
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 /* the eamil field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_MEMAIL, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcpy(string, LMemDeref(@EStr));
			 strcat(string, tempStr);
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 MemUnlock(OptrToHandle(@HStr));
			 } /* end of show mother if */
		   /* show the father info */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_FATHER))  {
			 /* the m name field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_FNAME, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 /* the home & work # fields */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_FHPHONE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 MemLock(OptrToHandle(@HStr));
			 strcpy(string, LMemDeref(@HStr));
			 strcat(string, tempStr);
			 strcat(string, "  ");
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_FWPHONE, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcat(string, LMemDeref(@WStr));
			 strcat(string, tempStr);
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 /* the eamil field */
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_FEMAIL, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, tempStr, NAME_SIZE);
			 tempStr[size] = 0;
			 strcpy(string, LMemDeref(@EStr));
			 strcat(string, tempStr);
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 MemLock(OptrToHandle(@HStr));
			 } /* end of show father if */
		   /* show the emergemcy contact */
		   if (@call RDBRosterSelectGroup::
				  MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RR_EMERG))  {
			 fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_EMERG_CONT, 1);
			 size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE*3);
			 string[size] = 0;
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of emergency if */
		   BasicDBDiscardRecord(dbmh);
		   } /* end of thisStu if */
		} /* end of cycle thru students for */
	  break;

	  case RPT_ATT:
	  /* get some boolean selections */
	  @call RDBAttendSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RA_YTD);

	  /* set things for the report */
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);
  	  @RT_TAB_GROUP(@AttTabs) ;

	  /* cycle thru students getting the info */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
		/* if not all stu selected do we want this student */
		if (allStu) thisStu = TRUE;
		else {
		   thisStu = FALSE;
		   for (ss = 0; ss < retSel; ss++) {
			 if (i == selList[ss]) {
			    thisStu = TRUE;
			    ss = retSel;
			    }
			 }
		   }
		if (thisStu) {
		   /* get the student record */
		   BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   i,
					   &dbmh);

		   ShowStuName(textObj, dbmh, string, whichStuLabel);
		   @RT_CHAR_ATTR(@TextReportTextReportCharAttrs);

		   /* now the att data */
		   fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_ATTENDANCE, 1);
		   BasicDBGetFieldData(dbmh, fieldID, attString, ATT_STRING_SIZE);
		   BasicDBDiscardRecord(dbmh);

		   /* lock the att codes array */
		   vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
		   VMLock(pself->GDI_fileHandle, vmbh ,&mh);
		   numCodes = ChunkArrayGetCountHandles(mh, pself->TADI_attCodeChunkArray);

		   if (@call RDBAttendSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RA_GP)) {
			 MemLock(OptrToHandle(@GradePdStr));
			 strcpy(string, "\t");
			 strcat(string, LMemDeref(@GradePdStr));
			 MemUnlock(OptrToHandle(@GradePdStr));
			 strcat(string, "  ");
			 for (j = 0; j < numCodes; j++)  {
			    attCodePtr = ChunkArrayElementToPtrHandles(
						  mh,
						  pself->TADI_attCodeChunkArray,
						  j,
						  0);
			    strcat(string, attCodePtr->ACS_code);
			    if (j != (numCodes - 1))  {
				  strcat(string, " / ");
				  }
			    }
			 strcat(string, "\t");
			 /* get to the selected grade period */
			 start = 0;
			 for (j = 0; j < gradePd; j++)  {
			    while (attString[start] != '*') start++;
			    start++;
			    }
			 /* cycle thru the code letters */
			 for (j = 0; j < numCodes; j++)  {
			    k = start;
			    attCodePtr = ChunkArrayElementToPtrHandles(
						  mh,
						  pself->TADI_attCodeChunkArray,
						  j,
						  0);
			    /* count the codes */
			    count = 0;
			    while (attString[k] != '*') {
				  if (attString[k] == attCodePtr->ACS_code[0]) count++;
				  k++;
				  }
			    UtilHex32ToAscii(tempStr, (sdword) count, UHTAF_NULL_TERMINATE);
			    strcat (string, tempStr);
			    if (j != numCodes - 1) {
				  strcat(string, " / ");
				  }
			    } /* end of cycle thru for */
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of grade period if */
		   if (@call RDBAttendSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RA_YTD)) {
			 MemLock(OptrToHandle(@YearToDateStr));
			 strcpy(string, "\t");
			 strcat(string, LMemDeref(@YearToDateStr));
			 strcat(string, "   ");
			 MemLock(OptrToHandle(@YearToDateStr));
			 for (j = 0; j < numCodes; j++)  {
			    attCodePtr = ChunkArrayElementToPtrHandles(
						  mh,
						  pself->TADI_attCodeChunkArray,
						  j,
						  0);
			    strcat(string, attCodePtr->ACS_code);
			    if (j != (numCodes - 1))  {
				  strcat(string, " / ");
				  }
			    }
			 strcat(string, "\t");
			 /* cycle thru the code letters */
			 for (j = 0; j < numCodes; j++)  {
			    k = 0;
			    attCodePtr = ChunkArrayElementToPtrHandles(
						  mh,
						  pself->TADI_attCodeChunkArray,
						  j,
						  0);
			    /* count the codes */
			    count = 0;
			    gp = 0;
			    while (gp <= gradePd) {  /* YTD */
				  if (attString[k] == attCodePtr->ACS_code[0]) count++;
				  else if (attString[k] == '*') gp++;
				  k++;
				  }
			    UtilHex32ToAscii(tempStr, (sdword) count, UHTAF_NULL_TERMINATE);
			    strcat (string, tempStr);
			    if (j != numCodes - 1) {
				  strcat(string, " / ");
				  }
			    } /* end of cycle thru for */
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 } /* end of ytd if */
		   VMUnlock(mh);
		   } /* end of thisStu if */
		} /* end of cycle thru students for */
	  break;

	  case RPT_NOTE:
		 /* make sure we know who is selected */
	  if (!pself->TADI_openStuRecMH) {
		i = @call RDBPNotesStuList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		@send self::MSG_RPT_SEL_STU_NOTES_DLIST_APPLY(i, 1, 0);
		}
		
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);
	  ShowStuName(textObj, pself->TADI_openStuRecMH, string, whichStuLabel);
	  @RT_CHAR_ATTR(@TextReportTextReportCharAttrs);

	  /* see if all or selected notes */
	  allStu = @call RDBPNotesSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RS_ALL);
	  if(!allStu) {
		numSel = @call RSNDBDList::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
		retSel = @call RSNDBDList::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(selList, numSel);
		}
		
	  /* cycle thru notes getting the info */
	  for (i = 0; i < pself->TADI_curStuNumNotes; i++)  {
		/* if not all notes selected do we want this note */
		if (allStu) thisStu = TRUE;
		else {
		   thisStu = FALSE;
		   for (ss = 0; ss < retSel; ss++) {
			 if (i == selList[ss]) {
			    thisStu = TRUE;
			    break;
			    }
			 }
		   }
		if (thisStu) {
		   /* get the current student's notes db */
		   fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
		   BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
		   if (pself->TADI_curStuNoteSortPref == VFC_DATE)
			 fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_D_INDX,
							1);
		   else
			 fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_S_INDX,
							1);
		   BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesIndexHan,
						    sizeof(VMBlockHandle));
		   /* now get the selected record */
		   BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   notesDBHan,
					   notesIndexHan,
					   i,
					   &mh);
		   /* get the date field of that record */
		   fieldID = BasicDBGetFieldID(mh,
							BDBFHE_CATEGORY,
							STU_NOTE_DATE,
							1);
		   BasicDBGetFieldData(mh,
						    fieldID,
						    &date,
						    sizeof(TimerDateAndTime));
		   LocalFormatDateTime(string, DTF_SHORT, &date);
		   strcat(string, "  ");
		   /* and the subj field of that record */
		   fieldID = BasicDBGetFieldID(mh,
							BDBFHE_CATEGORY,
							STU_NOTE_SUBJ,
							1);
		   size = BasicDBGetFieldData(mh,
						    fieldID,
						    tempStr,
						    NAME_SIZE);
		   tempStr[size] = 0;
		   strcat(string, tempStr);
		   strcat(string, "\r");
		   @RT_APPEND(string);

		   /* and the text field of that record */
		   fieldID = BasicDBGetFieldID(mh,
							BDBFHE_CATEGORY,
							STU_NOTE_TEXT,
							1);
		   recordPtr = MemLock(mh);
		   size = BasicDBGetPtrToFieldData(recordPtr,
						    fieldID,
						    (byte**) &text);
		   @call MSDBNote::MSG_VIS_TEXT_REPLACE_ALL_PTR(text, size);
		   text[size] = 0;
		   strcat(text, "\r");
		   @RT_APPEND(text);
		   MemUnlock(mh);

		   /* got the data - free the record */
		   BasicDBDiscardRecord(mh);


		   } /* end of this note if */
		} /* end of cycle thru notes for (i) */


	  /* free up any record in memory */
	  if (pself->TADI_openStuRecMH) {
		BasicDBDiscardRecord(pself->TADI_openStuRecMH);
		pself->TADI_openStuRecMH = 0;
		}
	  break;

	  case RPT_GRADE:
	  /* get some boolean selections */
	  types = @call RDBGradesSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_TYPES);
	  final = @call RDBGradesSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_FINAL);
	  /* see if all or selected elements */
	  allElem = @call RDBGElementsSelectGroup::
								 MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RS_ALL);
	  if(!allElem) {
		  numSel = @call REDBDList::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS();
		  retSel = @call REDBDList::MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(selList, numSel);
		  }

	  /* set things for the report */
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);

	  /* cycle thru students getting the info */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
			if (firstStu) firstStu = FALSE;
			/* get the student record */
			BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
						pself->TADI_curStuIndex,
						i,
					   &dbmh);

			ShowStuName(textObj, dbmh, string, whichStuLabel);

		   @RT_CHAR_ATTR(@TextReportTextReportCharAttrs);
		   @RT_TAB_GROUP(@GradesTabs) ;

		   /* now the grades field */
		   gradeFieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_GRADES_1  + gradePd,
					1);
		   BasicDBGetFieldData(dbmh, gradeFieldID, grades, MAX_ELEMENTS);
		   /* get the summary field */
		   sumFieldID = BasicDBGetFieldID(dbmh,
				   BDBFHE_CATEGORY,
				   STU_GRADE_SUM_1  + gradePd,
				   1);
		   BasicDBGetFieldData(dbmh, sumFieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));

		   /* show the grades */
			 vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_ELEM_1 + gradePd);
			 VMLock(pself->GDI_fileHandle, vmbh ,&mh);
			 for (j = 0; j < pself->TADI_numElements[gradePd]; j++) {
				 /* if not all elems selected do we want this element */
				 if (allElem) thisElem = TRUE;
				 else {
					 thisElem = FALSE;
					 for (ss = 0; ss < retSel; ss++) {
						 if (j == selList[ss]) {
							 thisElem = TRUE;
							 break;
							 }
						 }
					 }
				 if (thisElem) {
				 element = ChunkArrayElementToPtrHandles(
					mh,
					pself->TADI_gradeElemChunkArray[gradePd],
					j,
					0);
			    strcpy(string, " \t");
			    strcat(string, element->GES_type);
			    strcat(string, "\t");
			    strcat(string, element->GES_description);
			    strcat(string, "\t");
			    strcat(string, element->GES_date);
			    strcat(string, "\t");
			    if (element->GES_weight == EQUAL_WEIGHT) strcpy(tempStr, "=");
			    else UtilHex32ToAscii(tempStr, (dword) (element->GES_weight), UHTAF_NULL_TERMINATE);
			    strcat(string, tempStr);
			    strcat(string, "\t");

			    if (grades[j] == NO_GRADE) strcpy(tempStr, " ");
			    else UtilHex32ToAscii(tempStr, (dword) (grades[j]), UHTAF_NULL_TERMINATE);
			    strcat(string, tempStr);
			    if (g_showLetters && (grades[j] != NO_GRADE)) {
				  strcat(string, " ");
				  GetLetterGrade(MakeWWFixed(grades[j]), tempStr);
				  strcat(string, tempStr);
				  }
			    strcat(string, "\r");
			    @RT_APPEND(string);
				 } /* end of thisElem if  */
			 } /* end of cycle thru elements */
			VMUnlock(mh);

		   /* show the types and final */
		   if (types || final) {
			 @RT_STYLE(TS_BOLD) ;
			 vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
			 VMLock(pself->GDI_fileHandle, vmbh ,&mh);
			 for (j = 0; j <= pself->TADI_numTypes; j++) {
			    if ((j < pself->TADI_numTypes) && types) {  /* the types */
				  gradeTypePtr = ChunkArrayElementToPtrHandles(
					   mh,
					   pself->TADI_gradeTypesChunkArray,
					   j,
					   0);
				  strcpy(string, " \t");
				  strcat(string, gradeTypePtr->GTS_type);
				  strcat(string, "\t\t\t");
				  UtilHex32ToAscii(tempStr, (dword)(gradeTypePtr->GTS_weight[gradePd]), UHTAF_NULL_TERMINATE);
				  strcat(string, tempStr);
				  strcat(string, "\t");
				  }
			    else if ((j == pself->TADI_numTypes) && final) { /* the final */
				  strcpy(string, " \t");
				  MemLock(OptrToHandle(@FinalStr));
				  strcat(string, LMemDeref(@FinalStr));
              MemUnlock(OptrToHandle(@FinalStr));
				  strcat(string, "\t\t\t\t");
				  }

			    if (((j < pself->TADI_numTypes) && types) ||
					((j == pself->TADI_numTypes) && final)){
				  if (gradeSum[j] != NO_SUMMARY) {
					LocalFixedToAscii(tempStr, gradeSum[j], 3);
					place = 0; /* LFTA doesn't work for 2 places... */
					while ((string[place] != '.') && (place < strlen(string))) place++;
					if ((strlen(string) - place) > 3) string[place + 3] = 0;
					strcat(string, tempStr);
					if (g_showLetters) {
					   strcat(string, " ");
					   GetLetterGrade(gradeSum[j], tempStr);
					   strcat(string, tempStr);
					   }
					}
				  strcat(string, "\r");
				  @RT_APPEND(string);
				  }
			    } /* end of cycle thru types */
			 @RT_STYLE(0) ;
			 VMUnlock(mh);
			 } /* end of types or final if */

			if (@call RDBGradesSelectGroup::
				MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_SEMESTER)) {
			 @RT_STYLE(TS_BOLD) ;
			 /* which grd pds make this semester */
			 count = 0;
			 total = MakeWWFixed(0);
			 for (k = gradePd - 1; k <= gradePd; k++) {
			    /* get the grade summary field */
			    sumFieldID = BasicDBGetFieldID(dbmh,
						  BDBFHE_CATEGORY,
						  STU_GRADE_SUM_1 + k,
						  1);
			    BasicDBGetFieldData(dbmh, sumFieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));
			    if (gradeSum[pself->TADI_numTypes] != NO_SUMMARY) {
				  total += gradeSum[pself->TADI_numTypes];
				  count++;
				  }
			    } /* end of loop thru grade pds for */
			 /*  convert the grade into a string */
			 if (!total) strcpy(tempStr, " ");
			 else {
			    avg = GrUDivWWFixed(total, MakeWWFixed(count));
			    LocalFixedToAscii(tempStr, avg, 3);
			    place = 0; /* LFTA doesn't work for 2 places... */
			    while ((tempStr[place] != '.') && (place < strlen(tempStr))) place++;
			    if ((strlen(tempStr) - place) > 3) tempStr[place + 3] = 0;
			    }
			 strcpy(string, " \t");
			 MemLock(OptrToHandle(@SemesterStr));
			 strcat(string, LMemDeref(@SemesterStr));
			 MemUnlock(OptrToHandle(@SemesterStr));
			 strcat(string, "\t\t\t\t");
			 strcat(string, tempStr);
			 if (g_showLetters && total) {
			    strcat(string, " ");
			    GetLetterGrade(avg, tempStr);
			    strcat(string, tempStr);
			    }
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 @RT_STYLE(0) ;
			 } /* end of semester if */

			BasicDBDiscardRecord(dbmh);
		} /* end of cycle thru students for */
	  break;

	  case RPT_BDAY:
	  /* set things for the report */
	  month = @call RDBMonthSelectGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);
	  /* cycle thru students getting the info */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
			/* get the student record */
			BasicDBGetRecordByIndex(pself->GDI_fileHandle,
						pself->TADI_stuDBHan,
						pself->TADI_curStuIndex,
						i,
						&dbmh);
         /* get the birthday */
			fieldID = BasicDBGetFieldID(dbmh, BDBFHE_CATEGORY, STU_BDAY, 1);
			size = BasicDBGetFieldData(dbmh, fieldID, string, NAME_SIZE);
			string[size] = 0;

			/* we'll assume for now that datesa are mm/dd/yy which is the
			 * Ensemble default */
			tempStr[0] = string[0];
			if (string[1] != '/')  {
				tempStr[1] = string[1];
				tempStr[2] = 0;
				}
			else tempStr[1] = 0;
			UtilAsciiToHex32(tempStr, (long*)&value);

			if (month == (word)value) {
				ShowStuName(textObj, dbmh, tempStr, whichStuLabel);
				@RT_CHAR_ATTR(@TextReportTextReportCharAttrs);
				/* show the birthday */
				strcat(string, "\r");
				@RT_APPEND(string);
				}

			BasicDBDiscardRecord(dbmh);
		} /* end of cycle thru students for */
	  break;

	  default:  /*  which is really - case RPT_PROG:  */
	  /* get some boolean selections */
	  types = @call RDBProgressSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_TYPES);
	  final = @call RDBProgressSelectGroup::
					   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_FINAL);

	  /* set things for the report */
	  @RT_PARA_ATTR(@TextReportDocParaAttrs);

	  /* cycle thru students getting the info */
	  for (i = 0; i < pself->TADI_numStudents; i++)  {
		/* if not all stu selected do we want this student */
		if (allStu) thisStu = TRUE;
		else {
		   thisStu = FALSE;
		   for (ss = 0; ss < retSel; ss++) {
			 if (i == selList[ss]) {
			    thisStu = TRUE;
			    ss = retSel;
			    }
			 }
		   }
		if (thisStu) {
		   if (firstStu) firstStu = FALSE;
		   else if (@call RDBProgressSelectGroup::
				   MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_PAGE))  {
			 @RT_NEW_PAGE();
			 ShowHeader(textObj, pself->GDI_fileHandle, pself->TADI_reportType);
			 @RT_PARA_ATTR(@TextReportDocParaAttrs);
			 }
		   /* get the student record */
		   BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   i,
					   &dbmh);

			ShowStuName(textObj, dbmh, string, whichStuLabel);

		   @RT_CHAR_ATTR(@TextReportTextReportCharAttrs);
		   @RT_TAB_GROUP(@GradesTabs) ;

		   /* now the grades field */
		   gradeFieldID = BasicDBGetFieldID(dbmh,
					BDBFHE_CATEGORY,
					STU_GRADES_1  + gradePd,
					1);
		   BasicDBGetFieldData(dbmh, gradeFieldID, grades, MAX_ELEMENTS);
		   /* get the summary field */
		   sumFieldID = BasicDBGetFieldID(dbmh,
				   BDBFHE_CATEGORY,
				   STU_GRADE_SUM_1  + gradePd,
				   1);
		   BasicDBGetFieldData(dbmh, sumFieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));

		   /* show the grades */
		   if (@call RDBProgressSelectGroup::
				MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_ELEMENTS)) {
			 vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_ELEM_1 + gradePd);
			 VMLock(pself->GDI_fileHandle, vmbh ,&mh);
			 for (j = 0; j < pself->TADI_numElements[gradePd]; j++) {
			    element = ChunkArrayElementToPtrHandles(
					mh,
					pself->TADI_gradeElemChunkArray[gradePd],
					j,
					0);
			    strcpy(string, " \t");
			    strcat(string, element->GES_type);
			    strcat(string, "\t");
			    strcat(string, element->GES_description);
			    strcat(string, "\t");
			    strcat(string, element->GES_date);
			    strcat(string, "\t");
			    if (element->GES_weight == EQUAL_WEIGHT) strcpy(tempStr, "=");
			    else UtilHex32ToAscii(tempStr, (dword) (element->GES_weight), UHTAF_NULL_TERMINATE);
			    strcat(string, tempStr);
			    strcat(string, "\t");

			    if (grades[j] == NO_GRADE) strcpy(tempStr, " ");
			    else UtilHex32ToAscii(tempStr, (dword) (grades[j]), UHTAF_NULL_TERMINATE);
			    strcat(string, tempStr);
			    if (g_showLetters && (grades[j] != NO_GRADE)) {
				  strcat(string, " ");
				  GetLetterGrade(MakeWWFixed(grades[j]), tempStr);
				  strcat(string, tempStr);
				  }
			    strcat(string, "\r");
			    @RT_APPEND(string);
			    } /* end of cycle thru elements */
			 VMUnlock(mh);
			 } /* end of show elements if */

		   /* show the types and final */
		   if (types || final) {
			 @RT_STYLE(TS_BOLD) ;
			 vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_TYPES);
			 VMLock(pself->GDI_fileHandle, vmbh ,&mh);
			 for (j = 0; j <= pself->TADI_numTypes; j++) {
			    if ((j < pself->TADI_numTypes) && types) {  /* the types */
				  gradeTypePtr = ChunkArrayElementToPtrHandles(
					   mh,
					   pself->TADI_gradeTypesChunkArray,
					   j,
					   0);
				  strcpy(string, " \t");
				  strcat(string, gradeTypePtr->GTS_type);
				  strcat(string, "\t\t\t");
				  UtilHex32ToAscii(tempStr, (dword)(gradeTypePtr->GTS_weight[gradePd]), UHTAF_NULL_TERMINATE);
				  strcat(string, tempStr);
				  strcat(string, "\t");
				  }
			    else if ((j == pself->TADI_numTypes) && final) { /* the final */
				  strcpy(string, " \t");
				  strcat(string, "Final");
				  strcat(string, "\t\t\t\t");
				  }

			    if (((j < pself->TADI_numTypes) && types) ||
					((j == pself->TADI_numTypes) && final)){
				  if (gradeSum[j] != NO_SUMMARY) {
					LocalFixedToAscii(tempStr, gradeSum[j], 3);
					place = 0; /* LFTA doesn't work for 2 places... */
					while ((string[place] != '.') && (place < strlen(string))) place++;
					if ((strlen(string) - place) > 3) string[place + 3] = 0;
					strcat(string, tempStr);
					if (g_showLetters) {
					   strcat(string, " ");
					   GetLetterGrade(gradeSum[j], tempStr);
					   strcat(string, tempStr);
					   }
					}
				  strcat(string, "\r");
				  @RT_APPEND(string);
				  }
			    } /* end of cycle thru types */
			 @RT_STYLE(0) ;
			 VMUnlock(mh);
			 } /* end of types or final if */

		   if (@call RDBProgressSelectGroup::
				MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_SEMESTER)) {
			 @RT_STYLE(TS_BOLD) ;
			 /* which grd pds make this semester */
			 count = 0;
			 total = MakeWWFixed(0);
			 for (k = gradePd - 1; k <= gradePd; k++) {
			    /* get the grade summary field */
			    sumFieldID = BasicDBGetFieldID(dbmh,
						  BDBFHE_CATEGORY,
						  STU_GRADE_SUM_1 + k,
						  1);
			    BasicDBGetFieldData(dbmh, sumFieldID, gradeSum, (MAX_GRADE_TYPES * sizeof(dword)));
			    if (gradeSum[pself->TADI_numTypes] != NO_SUMMARY) {
				  total += gradeSum[pself->TADI_numTypes];
				  count++;
				  }
			    } /* end of loop thru grade pds for */
			 /*  convert the grade into a string */
			 if (!total) strcpy(tempStr, " ");
			 else {
			    avg = GrUDivWWFixed(total, MakeWWFixed(count));
			    LocalFixedToAscii(tempStr, avg, 3);
			    place = 0; /* LFTA doesn't work for 2 places... */
			    while ((tempStr[place] != '.') && (place < strlen(tempStr))) place++;
			    if ((strlen(tempStr) - place) > 3) tempStr[place + 3] = 0;
			    }
			 strcpy(string, " \t");
			 MemLock(OptrToHandle(@SemesterStr));
			 strcat(string, LMemDeref(@SemesterStr));
			 MemUnlock(OptrToHandle(@SemesterStr));
			 strcat(string, "\t\t\t\t");
			 strcat(string, tempStr);
			 if (g_showLetters && total) {
			    strcat(string, " ");
			    GetLetterGrade(avg, tempStr);
			    strcat(string, tempStr);
			    }
			 strcat(string, "\r");
			 @RT_APPEND(string);
			 @RT_STYLE(0) ;
			 } /* end of semester if */

		   if (@call RDBProgressSelectGroup::
					MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(RC_NOTE)) {
			 /* get the number of notes */
			 fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
			 BasicDBGetFieldData(dbmh,
						    fieldID,
						    &curStuNumNotes,
						    sizeof(dword));
			 if (curStuNumNotes) {
				 /* set up the gp compare string */
				 MemLock(OptrToHandle(@ProgressStr));
				 strcpy(tempStr, LMemDeref(@ProgressStr));
				 MemUnlock(OptrToHandle(@ProgressStr));
				 UtilHex32ToAscii(string, (dword) (gradePd + 1),
						   UHTAF_NULL_TERMINATE);
			    strcat(tempStr, string);
			    /* get the current student's notes db */
			    fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
			    BasicDBGetFieldData(dbmh,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
			    /* find the right note */
			    for(k = 0; k < curStuNumNotes; k++)  {
				  BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
							  notesDBHan,
							  (dword) k,
							  &mh);
				  /* get the subj field of that record */
				  fieldID = BasicDBGetFieldID(mh,
							BDBFHE_CATEGORY,
							STU_NOTE_SUBJ,
							1);
				  size = BasicDBGetFieldData(mh,
						    fieldID,
						    subjString,
						    NAME_SIZE);
				  if (size) {
					subjString[size] = 0;
					if (!LocalCmpStringsNoCase(tempStr, subjString, strlen(tempStr))) {
						/* get the text field of that record */
					   fieldID = BasicDBGetFieldID(mh,
							BDBFHE_CATEGORY,
							STU_NOTE_TEXT,
							1);
					   recordPtr = MemLock(mh);
					   size = BasicDBGetPtrToFieldData(recordPtr,
						    fieldID,
						    (byte**) &text);
					   text[size] = 0;
					   strcat(text, "\r");
						strcpy(string, "\r\t");
						MemLock(OptrToHandle(@CommentsStr));
						strcat(string, LMemDeref(@CommentsStr));
						MemUnlock(OptrToHandle(@CommentsStr));
						strcat(string, " ");
						@RT_APPEND(string);
					   @RT_APPEND(text);
					   MemUnlock(mh);
					   BasicDBDiscardRecord(mh);
					   break;
					   }  /* end of found note if */
					} /* end of was subj text if */
				  /* free the record */
				  BasicDBDiscardRecord(mh);
				  } /* end of cycle thru notes for (k) */
			    } /* end of there were notes if */
			 } /* end of show note if */
		   BasicDBDiscardRecord(dbmh);
		   } /* end of thisStu if */
		} /* end of cycle thru students for */
	  break;

	  }  /* end of report type switch */

	 /* can we get back to the top of the report? */
	 @send textObj::MSG_VIS_TEXT_SELECT_START();

	 @call textObj::MSG_META_UNSUSPEND();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_GRD_PD_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_GRD_PD_APPLY
{

    /* en/disable the semester boolean */
    if ((selection == RPT_GRD_PD_2) || (selection == RPT_GRD_PD_4) ||
			 (selection == RPT_GRD_PD_6)) {
	  @send RDBPCSemesterBoolean::MSG_GEN_SET_ENABLED(VUM_NOW);
	  @send RDBGCSemesterBoolean::MSG_GEN_SET_ENABLED(VUM_NOW);
     }
	 else  {
	  @send RDBPCSemesterBoolean::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  @send RDBProgressSelectGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
							RC_SEMESTER, FALSE);
	  @send RDBGCSemesterBoolean::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  @send RDBGradesSelectGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
							RC_SEMESTER, FALSE);
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_STU_SEL_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:	Handles reports student selection boolean.
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_STU_SEL_BOOLEAN_STATUS
{

	if (selectedBooleans)
	   @send RDBPSelStuTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	else @send RDBPSelStuTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_SELECT_STUDENTS for TADocumentClass
 *
 * DESCRIPTION:	Opens the select students dialog box.
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_SELECT_STUDENTS
{


    /* and initialize the list */
	 @call RSDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->TADI_numStudents);
	 @call RSDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* en/disable the buttons */
	 @send RSDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* open the dbox */
	 @call RptSelStuDBox::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_CLEAR_ALL_STU for TADocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:  
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_CLEAR_ALL_STU
{

    @call RSDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	 @send RSDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_STU_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_STU_DLIST_APPLY
{

    /* en/disable the button */
    if (numSelections)
	  @send RSDBClear::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
	  @send RSDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_STU_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for sel stu list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_STU_DLIST_MONIKER_QUERY
{
 MemHandle		mh;
 char			nameString[NAME_SIZE], fullString[NAME_SIZE * 3];
 word			size;
 BasicDBFieldID	fieldID;
 
    /* get the names */
    BasicDBGetRecordByIndex(pself->GDI_fileHandle,
				   pself->TADI_stuDBHan,
				   pself->TADI_curStuIndex,
				   item,
				   &mh);
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_L_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            fullString,
                            NAME_SIZE);
    fullString[size] = 0;
    strcat(fullString, ", ");
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_F_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            nameString,
                            NAME_SIZE);
    nameString[size] = 0;
    strcat(fullString, nameString);
    strcat(fullString, " ");
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_M_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            nameString,
                            NAME_SIZE);
    nameString[size] = 0;
    strcat(fullString, nameString);
    BasicDBDiscardRecord(mh);

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fullString);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_STU_NOTES_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:  opens the selected stu record and sets the number of
 *               notes for that student
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_STU_NOTES_DLIST_APPLY
{
BasicDBFieldID		fieldID;


    /* free up any previous record in memory */
    if (pself->TADI_openStuRecMH) {
	  BasicDBDiscardRecord(pself->TADI_openStuRecMH);
	  pself->TADI_openStuRecMH = 0;
	  }

    /* get that student record */
    BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   selection,
					   &pself->TADI_openStuRecMH);
    /* and the number of notes */
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
						  BDBFHE_CATEGORY, STU_NUM_NOTES, 1);
    BasicDBGetFieldData(pself->TADI_openStuRecMH,
				    fieldID, &pself->TADI_curStuNumNotes, sizeof(dword));

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_NOTES_SEL_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:	Handles reports notes selection boolean.
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_NOTES_SEL_BOOLEAN_STATUS
{

	if (selectedBooleans)
		@send RDBPSelNoteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	else @send RDBPSelNoteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_SELECT_NOTES for TADocumentClass
 *
 * DESCRIPTION:	Opens the select notes dialog box.
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_SELECT_NOTES
{


    /* initialize the list */
    @call RSNDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE((word)pself->TADI_curStuNumNotes);
    @call RSNDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* open the dbox */
    @call RptSelNotesDBox::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_NOTES_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_NOTES_DLIST_APPLY
{

    /* en/disable the button */
    if (numSelections)
	  @send RSNDBClear::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
	  @send RSNDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_CLEAR_ALL_NOTES for TADocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:  
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_CLEAR_ALL_NOTES
{

    @call RSNDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	 @send RSNDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_ELEMENTS_SEL_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:	Handles reports elements selection boolean.
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_ELEMENTS_SEL_BOOLEAN_STATUS
{

	if (selectedBooleans)
		@send RDBGSelElementsTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	else @send RDBGSelElementsTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_SELECT_ELEMENTS for TADocumentClass
 *
 * DESCRIPTION:	Opens the select elements dialog box.
 *
 * PARAMETERS:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_SELECT_ELEMENTS
{


    /* and initialize the list */
	 @call REDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(
	                      pself->TADI_numElements[pself->TADI_curGradePd]);
	 @call REDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* en/disable the buttons */
	 @send REDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* open the dbox */
	 @call RptSelElemDBox::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_ELEM_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for report sel element list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_ELEM_DLIST_MONIKER_QUERY
{
 VMBlockHandle		vmbh;
 MemHandle		mh, mem;
 GradeElementStruct*    element;
 ChunkHandle		chunk;
 GStateHandle		gstate;
 word			width, numChars, eWidth/*, weight, totalWeight, i*/;
 char			string[GRADE_DESCRIPT]/*, dStr[DATE_SIZE]*/, tStr[NAME_SIZE];
// char			twStr[DATE_SIZE];
// Boolean			propWeight;

    
    /* set the ellipsis width depending on font size */
    if (g_sysPointSize == 10) eWidth = 8;
    else if (g_sysPointSize == 12) eWidth = 10;
    else  eWidth = 12;

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, GRADE_ELEM_1 + pself->TADI_curGradePd);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    element = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeElemChunkArray[pself->TADI_curGradePd],
		   item,
		   0);
    strcpy(tStr, element->GES_type);
    strcpy(string, element->GES_description);
//    strcpy(dStr, element->GES_date);
//    weight = element->GES_weight;

    /* get the total of weights for this type & gp */
/*    totalWeight = 0;
    propWeight = FALSE;
    for (i = 0; i < pself->TADI_numElements[pself->TADI_curGradePd]; i++) {
	  element = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_gradeElemChunkArray[pself->TADI_curGradePd],
		   i,
		   0);
	  if (!strcmp(tStr, element->GES_type)) {
		if (element->GES_weight != EQUAL_WEIGHT)
		   totalWeight += element->GES_weight;
		else propWeight = TRUE;
		}
	  } */
    VMUnlock(mh);

    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word)&chunk);
    /* type */
    GrDrawText(gstate, 2, 0, tStr, 0);
    /* description */
    width = GrTextWidth(gstate, string, strlen(string));
    if(width > 205)  {
	  /* truncate text and add ellipsis */
	  while (width > (170 - eWidth)) {
		numChars = strlen(string);
		string[numChars - 1] = 0;
		width = GrTextWidth(gstate, string, strlen(string));
		}
	  strcat(string, "...");
	  }
    GrDrawText(gstate, 105, 0, string, 0);
    /* date */
/*    GrDrawText(gstate, 330, 0, dStr, 0);
    /* weight */
/*    if (weight == EQUAL_WEIGHT) strcpy(string, "=");
    else UtilHex32ToAscii(string, (dword) weight, UHTAF_NULL_TERMINATE);
    strcat(string, " / ");
    if (propWeight && (totalWeight <= 100)) strcpy(twStr, "100");
    else UtilHex32ToAscii(twStr, (dword) totalWeight, UHTAF_NULL_TERMINATE);
    strcat(string, twStr);
    GrDrawText(gstate, 435, 0, string, 0);
*/    GrEndGString(gstate);

    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  g_sysPointSize + 4,	/* height */
				  550,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_SEL_ELEM_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_SEL_ELEM_DLIST_APPLY
{

    /* en/disable the button */
    if (numSelections)
	  @send REDBClear::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
	  @send REDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RPT_CLEAR_ALL_ELEMENTS for TADocumentClass
 *
 * DESCRIPTION:
 *
 * PARAMETERS:  
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_RPT_CLEAR_ALL_ELEMENTS
{

    @call REDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	 @send REDBClear::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}


