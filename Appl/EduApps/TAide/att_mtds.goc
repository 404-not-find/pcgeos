/***************************************************************************
 *  FILE:			set_mtds.goc
 *  PROJECT:		Breadbox Teacher's Aide
 *  DESCRIPTION:	This file has methods for attendance &
 *				holiday set-up stuff
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "taide.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/*
 ***************************************************************************
 *		Code for set up stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_ATT_CODES for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_ATT_CODES
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 word			numItems;


    /* draw the dlist title */
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*)&chunk);
    MemLock (OptrToHandle(@AttCodeNameHdr));
    GrDrawText(gstate, 0, 0, LMemDeref(@AttCodeNameHdr), 0);
    GrDrawText(gstate, 250, 0, LMemDeref(@GrdElemTypeHdr), 0);
    MemUnlock (OptrToHandle(@AttCodeNameHdr));
    GrEndGString(gstate) ;

    @call ACSUDListHeader::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  g_sysPointSize + 2,	/* height */
				  300,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    /* find out how many items in the list */
    numItems = ChunkArrayGetCountHandles(mh, pself->TADI_attCodeChunkArray);
    VMUnlock(mh);

    /* and initialize the list */
    @call ACSUDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numItems);
    @call ACSUDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    @call ACSUDeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* Open the dialog box */
    @call AttCodeSetUpGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_ADD_ATT_CODE for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_ADD_ATT_CODE
{

    @call ACSUAName::MSG_VIS_TEXT_DELETE_ALL();
    @call ACSUACode::MSG_VIS_TEXT_DELETE_ALL();

    /* Open the dialog box */
    @call ACSUAddDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_ATT_CODE for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_NEW_ATT_CODE
{
 VMBlockHandle		vmbh;
 MemHandle		mh;
 AttCodeStruct		*attCodePtr;
 char			cStr[2], tStr[NAME_SIZE];

    
    @call ACSUAName::MSG_VIS_TEXT_GET_ALL_PTR(tStr);
    @call ACSUACode::MSG_VIS_TEXT_GET_ALL_PTR(cStr);

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    /* add the new code */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    attCodePtr = ChunkArrayAppendHandles(
		   mh,
		   pself->TADI_attCodeChunkArray,
		   0);
    strcpy(attCodePtr->ACS_type, tStr);
    strcpy(attCodePtr->ACS_code, cStr);
    VMDirty(mh);
    VMUnlock(mh);

    /* and tell the list */
    @call ACSUDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);

    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
    /* and redraw the title grid totals*/
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttTitlesGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
					    pself->TADI_curNumAttDays, 0,
					    pself->TADI_curNumAttDays + 1, 0);
    /* and redraw the main att grid totals*/
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
				  pself->TADI_curNumAttDays, 0,
				  pself->TADI_curNumAttDays + 1, pself->TADI_numStudents - 1);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_UNSUSPEND();



}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_ATT_CODE for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_DELETE_ATT_CODE
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 AttCodeStruct		*attCodePtr;
 word		selection;

 
    /* put up an are you sure dbox */
    if (AckDBox(0, 0, @ConfMsgDeleteAttCode) == ACK_NO) return;

    /* get the selection */
    selection = @call ACSUDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    attCodePtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_attCodeChunkArray,
		   selection,
		   0);
    /* delete this item */
    ChunkArrayDeleteHandle(pself->TADI_attCodeChunkArray, attCodePtr);
    VMDirty(mh);
    VMUnlock(mh);

    /* disable the delete button */
    @call ACSUDeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* and tell the list */
    @call ACSUDList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(selection, 1);
    @call ACSUDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
    /* and redraw the title grid totals*/
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttTitlesGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
					    pself->TADI_curNumAttDays, 0,
					    pself->TADI_curNumAttDays + 1, 0);
    /* and redraw the main att grid totals*/
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
				  pself->TADI_curNumAttDays, 0,
				  pself->TADI_curNumAttDays + 1, pself->TADI_numStudents - 1);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();



}

/***********************************************************************
 *
 * MESSAGE:	MSG_ACSU_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection in the att code list.
 *                  Enables delete button
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_ACSU_DLIST_APPLY
{


    @call ACSUDeleteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_ACSU_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for att code list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_ACSU_DLIST_MONIKER_QUERY
{
 VMBlockHandle		vmbh;
 MemHandle		mh, mem;
 AttCodeStruct		*attCodePtr;
 ChunkHandle		chunk;
 GStateHandle		gstate;
 word			width, numChars, eWidth;
 char			cStr[2], tStr[NAME_SIZE];

    
    /* set the ellipsis width depending on font size */
    if (g_sysPointSize == 10) eWidth = 8;
    else if (g_sysPointSize == 12) eWidth = 10;
    else  eWidth = 12;

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    attCodePtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_attCodeChunkArray,
		   item,
		   0);
    strcpy(tStr, attCodePtr->ACS_type);
    strcpy(cStr, attCodePtr->ACS_code);
    VMUnlock(mh);

    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*)&chunk);
    /* name */
    width = GrTextWidth(gstate, tStr, strlen(tStr));
    if(width > 235)  {
	  /* truncate text and add ellipsis */
	  while (width > (200 - eWidth)) {
		numChars = strlen(tStr);
		tStr[numChars - 1] = 0;
		width = GrTextWidth(gstate, tStr, strlen(tStr));
		}
	  strcat(tStr, "...");
	  }
    GrDrawText(gstate, 2, 0, tStr, 0);
    /* code */
    GrDrawText(gstate, 255, 0, cStr, 0);
    GrEndGString(gstate);

    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  g_sysPointSize + 4,	/* height */
				  300,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;
 
}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_ATT_CODE_DBL_CLICK for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_ATT_CODE_DBL_CLICK
{


    /* Open the dialog box */
    @call AttCodeDblClkGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_HOLIDAYS for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_HOLIDAYS
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 word			numItems;


    /* draw the dlist title */
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*)&chunk);
    MemLock (OptrToHandle(@AttCodeNameHdr));
    GrDrawText(gstate, 0, 0, LMemDeref(@AttCodeNameHdr), 0);
    GrDrawText(gstate, 250, 0, LMemDeref(@HolidayStartHdr), 0);
    GrDrawText(gstate, 325, 0, LMemDeref(@HolidayEndHdr), 0);
    MemUnlock (OptrToHandle(@AttCodeNameHdr));
    GrEndGString(gstate) ;

    @call HSUDListHeader::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  g_sysPointSize + 2,	/* height */
				  400,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, HOLIDAY);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    /* find out how many items in the list */
    numItems = ChunkArrayGetCountHandles(mh, pself->TADI_holidayChunkArray);
    VMUnlock(mh);

    /* and initialize the list */
    @call HSUDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numItems);
    @call HSUDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    @call HSUDeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);



    /* Open the dialog box */
    @call HolidaysSUGroup::MSG_GEN_INTERACTION_INITIATE(); 
  /*  UserDoDialog(@HolidaysSUGroup); */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_ADD_HOLIDAY for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_ADD_HOLIDAY
{

    @call HSUAName::MSG_VIS_TEXT_DELETE_ALL();
    @call HSUAStart::MSG_VIS_TEXT_DELETE_ALL();
    @call HSUAEnd::MSG_VIS_TEXT_DELETE_ALL();

    @call HSUTeacherWorkBGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
						    HSU_TEACHWORK, FALSE);
    /* Open the dialog box */
    @call HSUAddDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_HOLIDAY for TADocumentClass
 *
 * DESCRIPTION:   Holidays added in start date chron order
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_NEW_HOLIDAY
{
 VMBlockHandle		vmbh;
 MemHandle		mh;
 HolidaysStruct	*holidayPtr, *insertEntry;
 char			startStr[12], endStr[12], nameStr[NAME_SIZE];
 word			/*numCodes,*/ numHolidays, i, compNum, insertedAt;
 dword			startNum, endNum;
 Boolean			inserted = FALSE;
 Boolean			isTWork;

    
    @call HSUAName::MSG_VIS_TEXT_GET_ALL_PTR(nameStr);

    /* get the starting date */
    if (@call HSUAStart::MSG_VIS_TEXT_GET_ALL_PTR(startStr)) {
	  if (!DateCheck(startStr)) {
		@call HSUAStart::MSG_VIS_TEXT_SELECT_ALL();
		@call HSUAStart::MSG_META_GRAB_FOCUS_EXCL();
		return;
		}
	  else {
		FloatStringGetDateNumber(startStr);
		startNum = FloatFloatToDword();
		}
	  }
    else 	{
	  NotifyDBox(0, @ErrMsgNeedStartDate);
	  @call HSUAStart::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    /* get the ending date - if any */
    if (@call HSUAEnd::MSG_VIS_TEXT_GET_ALL_PTR(endStr)) {
	  if (!DateCheck(endStr)) {
		@call HSUAEnd::MSG_VIS_TEXT_SELECT_ALL();
		@call HSUAEnd::MSG_META_GRAB_FOCUS_EXCL();
		return;
		}
	  else  {
		FloatStringGetDateNumber(endStr);
		endNum = FloatFloatToDword();
		/* need to check for end after start */
		if (startNum > endNum)  {
		   NotifyDBox(0, @ErrMsgEndBeforeStartDate);
		   @call HSUAStart::MSG_META_GRAB_FOCUS_EXCL();
		   return;
		   }
		}
	  }
    else endNum = 0;

    /* is it a teacher work day? */
    isTWork = @call HSUTeacherWorkBGroup::
				MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(HSU_TEACHWORK);

    @call HSUAddDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, HOLIDAY);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    numHolidays = ChunkArrayGetCountHandles(mh, pself->TADI_holidayChunkArray);

    for (i = 0; i < numHolidays; i++)  {
	  holidayPtr = ChunkArrayElementToPtrHandles(
				mh,
				pself->TADI_holidayChunkArray,
				i,
				0);
	  compNum = holidayPtr->HS_start;
	  if (startNum <= compNum) {
		/* add it here */
		insertEntry = ChunkArrayInsertAtHandle(
				    pself->TADI_holidayChunkArray,
				    holidayPtr,
				    0);
		strcpy(insertEntry->HS_name, nameStr);
		insertEntry->HS_start = (word) startNum;
		insertEntry->HS_end = (word) endNum;
		insertEntry->HS_tWork = isTWork;
		inserted = TRUE;
		insertedAt = i;
		i = numHolidays;
		}
	  } /* end of compare for loop */

    if (!inserted)  {
	  /* append the new holiday */
	  holidayPtr = ChunkArrayAppendHandles(
		   mh,
		   pself->TADI_holidayChunkArray,
		   0);
	  strcpy(holidayPtr->HS_name, nameStr);
	  holidayPtr->HS_start = (word) startNum;
	  holidayPtr->HS_end = (word) endNum;
	  holidayPtr->HS_tWork = isTWork;
	  insertedAt = numHolidays;
	  }
    VMDirty(mh);
    VMUnlock(mh);

    /* and tell the list */
    @call HSUDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(insertedAt, 1);

/*    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    numCodes = ChunkArrayGetCountHandles(mh, pself->TADI_attCodeChunkArray);
    VMUnlock(mh);

    /* and redraw the title grid */
/*    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttTitlesGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(0,
										0,
										pself->TADI_curNumAttDays - 1 + (numCodes * 2),
										0);
*/
}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_HOLIDAY for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_DELETE_HOLIDAY
{
 VMBlockHandle		vmbh;
 MemHandle		mh;
 HolidaysStruct	*holidayPtr;
 word			selection/*, numCodes*/;

 
    /* put up an are you sure dbox */
    if (AckDBox(0, 0, @ConfMsgDeleteHoliday) == ACK_NO) return;

    /* get the selection */
    selection = @call HSUDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, HOLIDAY);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    holidayPtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_holidayChunkArray,
		   selection,
		   0);
    /* delete this item */
    ChunkArrayDeleteHandle(pself->TADI_holidayChunkArray, holidayPtr);
    VMDirty(mh);
    VMUnlock(mh);

    /* disable the delete button */
    @call HSUDeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* and tell the list */
    @call HSUDList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(selection, 1);
    @call HSUDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

/*    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    numCodes = ChunkArrayGetCountHandles(mh, pself->TADI_attCodeChunkArray);
    VMUnlock(mh);

    /* and redraw the title grid */
/*    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttTitlesGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(0,
										0,
										pself->TADI_curNumAttDays - 1 + (numCodes * 2),
										0);
*/
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CLOSE_HOLIDAY for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_CLOSE_HOLIDAY
{
 VMBlockHandle		vmbh;
 MemHandle		mh;
 word			numCodes;


    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, ATT_CODE);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    numCodes = ChunkArrayGetCountHandles(mh, pself->TADI_attCodeChunkArray);
    VMUnlock(mh);

    /* and redraw the title grid */
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttTitlesGrid))::
			MSG_VIS_GRID_INVALIDATE_CELL_RANGE(0,
										0,
										pself->TADI_curNumAttDays - 1 + (numCodes * 2),
										0);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_HSU_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection in the holidays list.
 *                  Enables delete button
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_HSU_DLIST_APPLY
{


    @call HSUDeleteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_HSU_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for att code list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_HSU_DLIST_MONIKER_QUERY
{
 VMBlockHandle		vmbh;
 MemHandle		mh, mem;
 HolidaysStruct	*holidayPtr;
 ChunkHandle		chunk;
 GStateHandle		gstate;
 word			width, numChars, eWidth, startNum, endNum;
 char			nStr[NAME_SIZE];
 TimerDateAndTime	date;
 char			dateStr[DATE_TIME_BUFFER_SIZE + 1];
 byte			month, day;

    
    /* set the ellipsis width depending on font size */
    if (g_sysPointSize == 10) eWidth = 8;
    else if (g_sysPointSize == 12) eWidth = 10;
    else  eWidth = 12;

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, HOLIDAY);
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    holidayPtr = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_holidayChunkArray,
		   item,
		   0);
    strcpy(nStr, holidayPtr->HS_name);
    startNum = holidayPtr->HS_start;
    endNum = holidayPtr->HS_end;
    VMUnlock(mh);

    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*)&chunk);
    /* name */
    width = GrTextWidth(gstate, nStr, strlen(nStr));
    if(width > 235)  {
	  /* truncate text and add ellipsis */
	  while (width > (200 - eWidth)) {
		numChars = strlen(nStr);
		nStr[numChars - 1] = 0;
		width = GrTextWidth(gstate, nStr, strlen(nStr));
		}
	  strcat(nStr, "...");
	  }
    GrDrawText(gstate, 2, 0, nStr, 0);
    /* code */

    if (startNum) {
	  FloatDwordToFloat((dword)startNum);
	  date.TDAT_year = FloatDateNumberGetYear();
	  FloatDwordToFloat((dword)startNum);
	  FloatDateNumberGetMonthAndDay(&month, &day);
	  date.TDAT_month = (word)month;
	  date.TDAT_day = (word)day;
	  LocalFormatDateTime(dateStr, DTF_SHORT, &date);
	  GrDrawText(gstate, 250, 0, dateStr, 0);
       }

    if (endNum) {
	  FloatDwordToFloat((dword)endNum);
	  date.TDAT_year = FloatDateNumberGetYear();
	  FloatDwordToFloat((dword)endNum);
	  FloatDateNumberGetMonthAndDay(&month, &day);
	  date.TDAT_month = (word)month;
	  date.TDAT_day = (word)day;
	  LocalFormatDateTime(dateStr, DTF_SHORT, &date);
	  GrDrawText(gstate, 325, 0, dateStr, 0);
       }

    GrEndGString(gstate);

    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  g_sysPointSize + 4,	/* height */
				  400,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

}

