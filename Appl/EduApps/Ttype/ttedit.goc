/***************************************************************************
 *  FILE:  TTEDIT.GOC
 ***************************************************************************/

@include <stdapp.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include "ttclass.goh"
@include "ttdefs.goh"
@include "externs.goh"
@include "options.goh"

/*=========================================================================*
 *  EXTERNAL METHODS FOR CLASS:  TypeProcessClass
 *=========================================================================*/

/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_EXERCISELIST_MONIKER_QUERY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    On the exercise editor, show the list of lessons
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |    LES  05/18/99  Modified to hide G_hiddenExercises exercises
 |
 *-----------------------------------------------------------------------*/

@extern method TypeProcessClass, MSG_EXERCISELIST_MONIKER_QUERY
{
    /* Get the nth item */
    RetrieveExercise(item+G_hiddenExercises) ;

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, G_titleString) ;
}

/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_EXERCISELIST_APPLY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    The user has clicked on one of the exercise items.  Make that
 |    the currently selected item.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |    LES  05/18/99  Modified to hide G_hiddenExercises exercises
 |
 *-----------------------------------------------------------------------*/
@extern method TypeProcessClass, MSG_EXERCISELIST_APPLY
{
    /* Get that item */
    selection += G_hiddenExercises ;
    RetrieveExercise(selection) ;
    G_currentExercise = selection ;

    /* Copy the data into the fields of the editor */
    @call LessonTitleField::MSG_VIS_TEXT_REPLACE_ALL_PTR(G_titleString, 0) ;
    @call ExerciseField::MSG_VIS_TEXT_REPLACE_ALL_PTR(G_exerciseString, 0) ;

    /* Activate the appropriate buttons */
    @call NewButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;
    @call DeleteButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;

    /* Prevent to add a G_isNewExercise item in the list when pressing */
    /* "Save" when user has accidentally pressed on "New" first */
    G_isNewExercise = FALSE ;
}


/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTEX_NEW_EXERCISE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User has chosen to add a new exercise to the editor
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |
 *-----------------------------------------------------------------------*/

@extern method TypeProcessClass, MSG_TTEX_NEW_EXERCISE
{
    /* Clear the fields */
    @call LessonTitleField::MSG_VIS_TEXT_REPLACE_ALL_PTR("", 0) ;
    @call ExerciseField::MSG_VIS_TEXT_REPLACE_ALL_PTR("", 0) ;

    /* Turn on/off the appropriate fields */
    @call NewButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
    @call DeleteButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
    @call SaveButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;

    /* Note that this is a new exercise */
    G_isNewExercise = TRUE ;
}


/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTEX_SAVE_EXERCISE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    The user has chosen to save the current exercise in the editor.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |    LES  05/18/99  Modified to hide G_hiddenExercises exercises
 |
 *-----------------------------------------------------------------------*/

@extern method TypeProcessClass, MSG_TTEX_SAVE_EXERCISE
{
    /* Get all the data into the global variables to be saved */
    @call LessonTitleField::MSG_VIS_TEXT_GET_ALL_PTR(G_titleString) ;
    @call ExerciseField::MSG_VIS_TEXT_GET_ALL_PTR(G_exerciseString) ;

    /* Either append or put it back */
    if (G_isNewExercise)
        StoreExercise(G_numExercises) ;
    else
        StoreExercise(G_currentExercise) ;

    /* Do the actual update */
    VMSave(G_exerciseDBFile) ;

    /* Let the list know about the change */
    if (G_isNewExercise)  {
        @call ExerciseList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(
                  G_numExercises-G_hiddenExercises-1,
                  1) ;
        G_currentExercise = G_numExercises - 1 ;
        G_isNewExercise = FALSE ;
    } else {
        @call ExerciseList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
                  G_currentExercise-G_hiddenExercises,
                  G_titleString) ;
    }

    /* Go to the next item. */
    @call ExerciseList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
              G_currentExercise-G_hiddenExercises,
              FALSE) ;
    @call NewButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;
    @call DeleteButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;
}


/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTEX_DELETE_EXERCISE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User wants to get rid of an old exercise
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |    LES  05/18/99  Modified to hide G_hiddenExercises exercises
 |
 *-----------------------------------------------------------------------*/

@extern method TypeProcessClass, MSG_TTEX_DELETE_EXERCISE
{
    /* Confirm this step */
	 if ((UserStandardDialogOptr(0, 0, 0, 0,
					 @DeleteExerciseConfirmText,
                ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                ) == IC_NO))
        return ;

    /* Ok, do the deletion */
    DeleteExercise(G_currentExercise) ;

    /* Update the UI by loading the next item */
    if (G_currentExercise)
        G_currentExercise-- ;
    RetrieveExercise(G_currentExercise) ;
    @call LessonTitleField::MSG_VIS_TEXT_REPLACE_ALL_PTR(G_titleString, 0) ;
    @call ExerciseField::MSG_VIS_TEXT_REPLACE_ALL_PTR(G_exerciseString, 0) ;

    /* Force the lessons to be saved */
    VMSave(G_exerciseDBFile) ;

    /* Let the list know about the change */
    @call ExerciseList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(
              (G_numExercises>G_hiddenExercises)?
                  G_numExercises-G_hiddenExercises:
                  0) ;
    @call ExerciseList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
              G_currentExercise-G_hiddenExercises,
              FALSE) ;
    @call SaveButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
}

/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTYPE_ERASE_PASSWORD
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Erase the password in the currently viewed student record
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/20/99  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method TypeProcessClass, MSG_TTYPE_ERASE_PASSWORD
{
    /* Don't allow Visitor and Teacher to have passwords deleted */
    if ((G_currentViewStudent == TTYPE_VISITOR_SLOT) ||
            (G_currentViewStudent == TTYPE_TEACHER_SLOT))  {
        UserStandardDialogOptr(
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    @ErasePasswordInvalidText,
                    ((CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
                    (GIT_COMMAND << CDBF_INTERACTION_TYPE_OFFSET))) ;
    } else {
        /* Confirm that they really want to delete this password */
        if ((UserStandardDialogOptr(
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    @ErasePasswordText,
                    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                    ) == IC_YES)) {
            /* Confirmed. */
            /* Blank out the password */
            SetStudentPassword(G_currentViewStudent, "") ;
            @call SPErasePassword::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
            ViewInvalidate(@StudentProgressView) ;
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTYPE_DELETE_STUDENT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Delete the currently viewed student
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/20/99  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method TypeProcessClass, MSG_TTYPE_DELETE_STUDENT
{
    word numStudents ;
    word nextStudent ;

    if ((G_currentViewStudent == TTYPE_VISITOR_SLOT) ||
            (G_currentViewStudent == TTYPE_TEACHER_SLOT))  {
        UserStandardDialogOptr(
                NullHandle,
                NullHandle,
                NullHandle,
                NullHandle,
                @DeleteStudentInvalidText,
                ((CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
                (GIT_COMMAND << CDBF_INTERACTION_TYPE_OFFSET))) ;
    } else if ((UserStandardDialogOptr(
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    @DeleteStudentText,
                    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                    ) == IC_YES)) {
        nextStudent = G_currentViewStudent ;
        if (DeleteStudentRecord(G_currentViewStudent) == FALSE)  {
            UserStandardDialogOptr(
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    NullHandle,
                    @DeleteStudentNotFoundText,
                    ((CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
                    (GIT_COMMAND << CDBF_INTERACTION_TYPE_OFFSET))) ;
        } else {
            numStudents = StudentDBGetCount() ;
            if (nextStudent >= numStudents)
                nextStudent-- ;
            @call NameSelectionBox::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numStudents) ;
            if (numStudents >= MAX_STUDENTS)  {
               @call NewNameBox::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
            } else {
               @call NewNameBox::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
            }
            @call NameSelectionBox::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(nextStudent, FALSE) ;
            G_currentViewStudent = nextStudent ;
            ViewInvalidate(@StudentProgressView) ;
            @send ,forceQueue SPStudentList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numStudents) ;
            @send ,forceQueue SPStudentList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(nextStudent, FALSE) ;
            @send ,forceQueue SPStudentList::MSG_PICKLIST_CHANGE_VIEW(nextStudent, 1, 0) ;
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  TypeProcessClass::MSG_TTYPE_EDIT_STUDENT_PREFERENCES
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Setup and display a dialog to edit the student preferences.
 |    Take the entered data and save it.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/16/99  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method TypeProcessClass, MSG_TTYPE_EDIT_STUDENT_PREFERENCES
{
    T_studentInfo info ;

    /* If the slot is a teacher or visitor, allow it to be edited, */
    /* but make sure the name is read only.  Those slots are special */
    @call EPNameText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    if ((G_currentViewStudent == TTYPE_VISITOR_SLOT) ||
            (G_currentViewStudent == TTYPE_TEACHER_SLOT))  {
        @call EPNameText::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0) ;
    } else {
        @call EPNameText::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY) ;
    }
    @call EPNameText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* Pull out the student record and fill the dialog */
    GetStudentInfo(G_currentViewStudent, &info) ;
    @call EPNameText::MSG_VIS_TEXT_REPLACE_ALL_PTR(info.SI_name, 0) ;
    @call EPGWordsPerMinute::MSG_GEN_VALUE_SET_INTEGER_VALUE(
              info.SI_wpmGoal,
              FALSE) ;
    @call EPGAccuracy::MSG_GEN_VALUE_SET_INTEGER_VALUE(
              info.SI_accuracyGoal,
              FALSE) ;
    @call EPGTimeToSpend::MSG_GEN_VALUE_SET_INTEGER_VALUE(
              info.SI_timeGoal,
              FALSE) ;

    /* Present the dialog and only process if OK is hit */
    if (UserDoDialog(@EditPrefsDialog)==IC_APPLY)  {
        /* Pull out the data and save */
        @call EPNameText::MSG_VIS_TEXT_GET_ALL_PTR(info.SI_name) ;
        info.SI_wpmGoal = @call EPGWordsPerMinute::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
        info.SI_accuracyGoal = @call EPGAccuracy::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
        info.SI_timeGoal = @call EPGTimeToSpend::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
        @call NameSelectionBox::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
                  G_currentViewStudent,
                  info.SI_name) ;
        @call SPStudentList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
                  G_currentViewStudent,
                  info.SI_name) ;
        SetStudentInfo(G_currentViewStudent, &info) ;

/*
        @call NameSelectionBox::MSG_GEN_DYNAMIC_LIST_INITIALIZE(StudentDBGetCount()) ;
        @call NameSelectionBox::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(G_currentStudent, FALSE) ;
        @call SPStudentList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(StudentDBGetCount()) ;
        @call NameSelectionBox::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(G_currentViewStudent, FALSE) ;
*/
    }
}

/*=========================================================================*
 *  METHODS FOR CLASS:  TTExTextClass
 *=========================================================================*/

@classdecl TTExTextClass ;

/*-------------------------------------------------------------------------
 | Method:  TTExTextClass::MSG_META_TEXT_USER_MODIFIED
 *-------------------------------------------------------------------------
 |
 | Description:
 |    If the user changes anything in the editor, enable the save button.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    PV   ??/??/??  Created.
 |
 *-----------------------------------------------------------------------*/

@method TTExTextClass, MSG_META_TEXT_USER_MODIFIED
{
    @call SaveButton::MSG_GEN_SET_ENABLED(VUM_NOW) ;
}


/*=========================================================================*
 *  METHODS FOR CLASS:  ExerciseEditorClass
 *=========================================================================*/

@classdecl ExerciseEditorClass ;

/*-------------------------------------------------------------------------
 | Method:  ExerciseEditorClass::MSG_GEN_INTERACTION_INITIATE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This message is intercepted to make the dialog start with the right
 |    selected item.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/17/99  Created.
 |    LES  05/18/99  Modified to hide G_hiddenExercises exercises
 |
 *-----------------------------------------------------------------------*/
@method ExerciseEditorClass, MSG_GEN_INTERACTION_INITIATE
{
    if (G_currentExercise < G_hiddenExercises)
        G_currentExercise = G_hiddenExercises ;
    @call ExerciseList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
              G_currentExercise-G_hiddenExercises,
			  FALSE);
    @send ,forceQueue process::MSG_EXERCISELIST_APPLY(
              G_currentExercise-G_hiddenExercises,
              1,
              0) ;
    @callsuper() ;
@call TTOptionsMenu::MSG_META_GRAB_FOCUS_EXCL() ;
@call TTOptionsMenu::MSG_META_GRAB_TARGET_EXCL() ;
@call TeachersCorner::MSG_META_GRAB_FOCUS_EXCL() ;
@call TeachersCorner::MSG_META_GRAB_TARGET_EXCL() ;
@call ExercizeEditor::MSG_META_GRAB_FOCUS_EXCL() ;
@call ExercizeEditor::MSG_META_GRAB_TARGET_EXCL() ;
@call ExerciseField::MSG_META_GRAB_FOCUS_EXCL() ;
@call ExerciseField::MSG_META_GRAB_TARGET_EXCL() ;
}

@method ExerciseEditorClass, MSG_META_FUP_KBD_CHAR
/*
				word character = cx,
				word flags = dx,
				word state = bp) = carry;
*/
{
    Boolean handled = FALSE ;

    if (!(flags & CF_RELEASE))  {
        switch (character & 0x00FF)  {
            case VC_F8:    /* PASTE */
                @call ExerciseField::MSG_META_CLIPBOARD_PASTE() ;
                handled = TRUE ;
                break ;
            case VC_F7:
                @call ExerciseField::MSG_META_CLIPBOARD_COPY() ;
                handled = TRUE ;
                break ;
            case VC_F6:
                @call ExerciseField::MSG_META_CLIPBOARD_CUT() ;
                handled = TRUE ;
                break ;
        }
    }

    if (!handled)
        handled = @callsuper() ;

    return handled ;
}

/***************************************************************************
 *  END OF FILE:  TTEDIT.GOC
 ***************************************************************************/

