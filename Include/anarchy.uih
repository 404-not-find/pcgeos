/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1989 -- All Rights Reserved
 *
 * PROJECT:	  Anarchy
 * MODULE:	  Include
 * FILE:	  anarchy.uih
 *
 * AUTHOR:  	  Late-Night Anarchy League: September 21, 1989
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	9/21/89	  lnal	    Initial version
 *
 * DESCRIPTION:
 *	This file provides a set of objects and monikers that may be used
 *	to display "standard" LNAL slogans, etc. It provides the
 *	following objects/chunks:
 *		bigAnarchyMoniker 	A 40x40 moniker containing The Emblem
 *		cgaAnarchyMoniker 	A 40x22 moniker containing The Emblem,
 *					for CGA
 *		smallAnarchy	A scaled down (17x17) version of
 *				The Emblem for use in a trigger
 *		LNALTrigger	A trigger containing smallAnarchy as
 *				a moniker. The trigger is linked to
 *				bring up the LNALAboutBox when pressed.
 *		LNALAboutBox	A summons to display a bit about the LNAL.
 *				This must be made a child of the
 *				Application object.
 *		LNALAboutMessage A text display that holds the spiel.
 *		LNALSpiel	A chunk containing a silly spiel about
 *				the LNAL.
 *
 *
 * 	$Id: anarchy.uih,v 1.1 97/04/04 14:23:48 newdeal Exp $
 *
 ***********************************************************************/
/*
 * monikers displaying LNAL emblem in various sizes. Can be used many places...
 */
/*
 * Moniker generated from anarchy.pcx
 */
#ifndef LNAL_NO_BIG_MONIKER
/*
 * Moniker generated from anarchy.pcx
 * cvtpcx -b -x0 -y-1 -w40 -h40 -nbigAnarchy anarchy.pcx
 * XXX: cvtpcx generates a bad bitmap height for the -y-1 case, so one must
 * hand-edit the Bitmap structure to have a height of 39.
 */
visMoniker bigAnarchyMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 40, 40;
	gstring {
		GSBeginString
		GSDrawBitmap 0, 1, (EndbigAnarchyIcon-StartbigAnarchyIcon)
		StartbigAnarchyIcon label byte
		Bitmap <40,39,BMC_PACKBITS, BMF_MONO>
		db	004h, 000h, 000h, 0ffh, 080h, 000h
		db	004h, 000h, 007h, 0ffh, 0f0h, 000h
		db	004h, 000h, 01fh, 01ch, 07ch, 000h
		db	004h, 000h, 078h, 014h, 00fh, 000h
		db	004h, 000h, 0e0h, 036h, 003h, 080h
		db	004h, 001h, 0c0h, 022h, 001h, 0c0h
		db	004h, 003h, 000h, 022h, 000h, 060h
		db	004h, 006h, 000h, 063h, 000h, 030h
		db	004h, 00eh, 000h, 049h, 000h, 038h
		db	004h, 00ch, 000h, 0c9h, 080h, 018h
		db	004h, 018h, 000h, 088h, 080h, 00ch
		db	004h, 018h, 000h, 088h, 080h, 00ch
		db	004h, 030h, 001h, 088h, 0c0h, 006h
		db	004h, 030h, 001h, 008h, 040h, 006h
		db	004h, 030h, 001h, 008h, 040h, 006h
		db	004h, 060h, 003h, 008h, 060h, 003h
		db	004h, 060h, 002h, 008h, 020h, 003h
		db	004h, 060h, 006h, 008h, 030h, 003h
		db	004h, 060h, 004h, 008h, 010h, 003h
		db	004h, 060h, 004h, 03fh, 0d0h, 003h
		db	004h, 060h, 00ch, 008h, 018h, 003h
		db	000h, 060h, 0feh, 008h, 000h, 003h
		db	004h, 060h, 008h, 000h, 008h, 003h
		db	004h, 060h, 01fh, 0ffh, 0fch, 003h
		db	004h, 030h, 010h, 000h, 004h, 006h
		db	004h, 030h, 010h, 000h, 004h, 006h
		db	004h, 030h, 030h, 000h, 006h, 006h
		db	004h, 018h, 020h, 000h, 002h, 00ch
		db	004h, 018h, 060h, 000h, 003h, 00ch
		db	004h, 00ch, 040h, 000h, 001h, 018h
		db	004h, 00eh, 040h, 000h, 001h, 038h
		db	004h, 006h, 0c0h, 000h, 001h, 0b0h
		db	004h, 003h, 080h, 000h, 000h, 0e0h
		db	004h, 001h, 0c0h, 000h, 000h, 0c0h
		db	004h, 000h, 0e0h, 000h, 003h, 080h
		db	004h, 000h, 078h, 000h, 00fh, 000h
		db	004h, 000h, 01fh, 000h, 07ch, 000h
		db	004h, 000h, 007h, 0ffh, 0f0h, 000h
		db	004h, 000h, 000h, 0ffh, 080h, 000h
		EndbigAnarchyIcon label byte
		GSEndString
	}
}
/*
 * Moniker generated from anarchy.pcx
 * cvtpcx -b -x42 -y0 -w40 -h22 -averySquished -ncgaAnarchy anarchy.pcx
 */
visMoniker cgaAnarchyMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = verySquished;
	cachedSize = 40, 22;
	gstring {
		GSBeginString
		GSDrawBitmapAtCP <(EndcgaAnarchyIcon-StartcgaAnarchyIcon)>
		StartcgaAnarchyIcon label byte
		Bitmap <40,22,BMC_PACKBITS, BMF_MONO>
		db	004h, 000h, 000h, 0ffh, 080h, 000h
		db	004h, 000h, 007h, 0ffh, 0f0h, 000h
		db	004h, 000h, 078h, 01ch, 00fh, 000h
		db	004h, 001h, 0c0h, 022h, 001h, 0c0h
		db	004h, 006h, 000h, 063h, 000h, 030h
		db	004h, 00eh, 000h, 049h, 000h, 038h
		db	004h, 018h, 000h, 088h, 080h, 00ch
		db	004h, 030h, 001h, 088h, 0c0h, 006h
		db	004h, 030h, 001h, 008h, 040h, 006h
		db	004h, 060h, 002h, 008h, 020h, 003h
		db	004h, 060h, 006h, 008h, 030h, 003h
		db	004h, 060h, 004h, 03fh, 0d0h, 003h
		db	000h, 060h, 0feh, 008h, 000h, 003h
		db	004h, 060h, 01fh, 0ffh, 0fch, 003h
		db	004h, 030h, 010h, 000h, 004h, 006h
		db	004h, 030h, 030h, 000h, 006h, 006h
		db	004h, 018h, 060h, 000h, 003h, 00ch
		db	004h, 00eh, 040h, 000h, 001h, 038h
		db	004h, 003h, 080h, 000h, 000h, 0e0h
		db	004h, 001h, 0c0h, 000h, 001h, 0c0h
		db	004h, 000h, 078h, 000h, 007h, 080h
		db	004h, 000h, 007h, 0ffh, 0f8h, 000h
		EndcgaAnarchyIcon label byte
		GSEndString
	}
}
#endif /* LNAL_NO_BIG_MONIKER */

#ifndef LNAL_NO_SMALL_MONIKER
visMoniker smallAnarchy = {
	cachedSize = 17, 17;
	gstring {
	GSBeginString
	GSDrawBitmapAtCP (endlnalsmallBM-lnalsmallBM)
	lnalsmallBM	label	word
		Bitmap <
			lnalsmallWidth,lnalsmallHeight,
			BMC_UNCOMPACTED,<0,0,0,BMF_MONO>
		>
		db	00000000b, 00000000b, 00000000b
		db	00000011b, 11100000b, 00000000b
		db	00001100b, 10011000b, 00000000b
		db	00010000b, 10000100b, 00000000b
		db	00100001b, 11000010b, 00000000b
		db	00100001b, 11000010b, 00000000b
		db	01000010b, 10100001b, 00000000b
		db	01000010b, 10110001b, 00000000b
		db	01000011b, 11111001b, 00000000b
		db	01000100b, 10010001b, 00000000b
		db	01000111b, 11110001b, 00000000b
		db	00101000b, 00001010b, 00000000b
		db	00101000b, 00001010b, 00000000b
		db	00010000b, 00000100b, 00000000b
		db	00001100b, 00011000b, 00000000b
		db	00000011b, 11100000b, 00000000b
		db	00000000b, 00000000b, 00000000b

	lnalsmallHeight = 17
	lnalsmallWidth = 17
	endlnalsmallBM label word
	GSEndString
	}
}
#endif /* LNAL_NO_SMALL_MONIKER */

#ifndef LNAL_NO_ABOUT_BOX
LNALTrigger = GenTrigger {
	moniker = smallAnarchy;
	action = MSG_GEN_INITIATE_INTERACTION, LNALAboutBox;
}

LNALAboutBox = GenSummons {
	children = LNALHeader, LNALAboutMessage;
	output = null;
	/*summonsAttributes = useMonikerInSummons;*/
	/*moniker = bigAnarchy;*/
	attributes = default +notUserInitiatable;
	hints = { HINT_CENTER_HORIZONTALLY }
}

LNALHeader = GenGlyph {
	moniker = list { bigAnarchyMoniker, cgaAnarchyMoniker }
}

LNALAboutMessage = GenTextDisplay {
	textDisplayAttributes = useDesiredHeightOfText;
	rulerRuns = ( "VisTextDefaultRuler" ) {
		J_FULL,			/* Full-justified */
		VTDT_INCH,		/* A tab every inch (?) */
		1,			/* 1/2" left margin */
		1,			/* 1/2" paragraph margin */
		1			/* 1/2" right margin */
	}
	desiredWidth = 500;
	text = LNALSpiel;
}

chunk LNALSpiel = data {
	char "The Late-Night Anarchy League is a loose-knit confederation "
	char "of engineers who have decided that the hours from midnight to 3 "
	char "are their own to spend as they will.\r\r"
	char "Their avowed purpose in life is to make neat things happen "
	char "under PC/GEOS, raising morale, proving the worth of the system "
	char "and generally giving their supervisors ulcers.\r\r"
	char "Understandably, they wish to remain anonymous.\r\r"
	char "This program was brought to you by the members of the LNAL, who "
	char "hope you have as much fun using it as they had writing it.", 0
}
#endif /* LNAL_NO_ABOUT_BOX */
