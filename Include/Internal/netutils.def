COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Socket
MODULE:		Socket library utilities
FILE:		netutils.def

AUTHOR:		Steve Jang, Apr 15, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	4/15/94   	Initial revision


DESCRIPTION:
	A collection of utility routines used in socket library and net
	drivers.
		
	$Id: netutils.def,v 1.1 97/04/04 14:13:16 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__NETUTILS

StartLibrary	netutils

;
; default max block number for a hugelmem
;
DEFAULT_MAX_BLOCK_NUMBER			equ	100

;
; RESERVED TIMEOUT VALUES
; : used in HugeLMemAllocLock, QueueEnqueueStart, QueueDequeueStart
;
FOREVER_WAIT		equ	0xffff		;
NO_WAIT			equ	0x0000		;
RESIZE_QUEUE		equ	0x0001		; HACK! this MUST be 1.

;
; HugeLMem errors
;
HugeLMemErrors		etype	word, 0, 2
	HLME_BLOCK_NOT_FOUND		enum	HugeLMemErrors
		; an optr not belonging to this hugelmem is passed
	HLME_BLOCK_BECAME_TOO_BIG 	enum	HugeLMemErrors
		; resizing the given chunk will make current data block in
		; hugelmem too big( this will never happen in net lib )
		; But, I will change this so that the hugelmem chunk can be 
		; relocated within the hugelmem later.
;
; Queue errors
;
QueueErrors		etype	word, 0, 2
	QE_TIMEOUT	enum	QueueErrors
		; a queue operation could not be completed within the given
		; time
	QE_DEAD		enum	QueueErrors
		; tried to perform a queue operation on a dead queue.
		; You can't do anything to a dead queue. But this comes in
		; handy in shutdown sequence of an application where multiple
		; threads are accessing a common queue.
	QE_TOO_BIG	enum	QueueErrors
		; tried resize the queue beyond the max capacity of the queue.
		;

global	HugeLMemCreate:far
COMMENT |--------------------------------------------------------------------
SYNOPSIS:	Creates and initializes a HugeLMem.
PASS:		ax = maximum # of mem blocks to be used
		     0 for default(maximum) value
		bx = minimum size for an optimal block
		cx = maximum size for an optimal block
RETURN:		bx = HugeLMem handle
		carry set on error( most likely to be "insufficient memory" )
DESTROYED:	ax, cx
-----------------------------------------------------------------------------|

global	HugeLMemForceDestroy:far
COMMENT |--------------------------------------------------------------------
SYNOPSIS:	Destroys a HugeLMem without checking if there are still
		chunks allocated in it.
PASS:		bx = HugeLMem handle
RETURN:		nothing
DESTROYED:	bx
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemDestroy:far
COMMENT |--------------------------------------------------------------------
SYNOPSIS:	Destroys a HugeLMem.  If there are still chunks around, return
		carry set.  But at this point, hugelmem is destroyed and you
		cannot allocate any more chunks in it.  When the last chunk
		in the hugelmem gets freed, hugelmem will be  destroyed.
PASS:		bx = HugeLMem handle
RETURN:		carry set if there are still chunks around on the heap.
DESTROYED:	bx
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemWaitFreeSpace:far
COMMENT |--------------------------------------------------------------------
SYNOPSIS:	Register a callback to receive a notification when half of
		hugelmem gets free.

PASS:		bx = HugeLMem handle
		axcx = vfptr of callback routine
		dx   = data to pass to callback routine

CALLBACK ROUTINE:
		PASS:	ax = data passed in in dx
		RETURN: nothing
		DESTROY: ax,bx,cx,dx,di,si,bp

NOTE:		Once notification is sent out, the callback is unregistered.
		You need to call this routine again if you run into problems
		again.
RETURN:		nothing
DESTROYED:	nothing
----------------------------------------------------------------------------|

global	HugeLMemAllocLock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Allocates a chunk in HugeLMem, and returns optr & fptr to it.
		When this function returns, the block containing the newly
		allocated chunk is locked.  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PASS:		ax = size of chunk
		bx = HugeMemHandle
		cx = timeout value( ticks )
		     0 means no wait
		     FOREVER_WAIT means wait forever
		When there is not enough memory, wait for cx number of ticks
		to see if anything frees up.
RETURN:		^lax:cx = new buffer( optr )
		ds:di	= new buffer( fptr )
		If there is not enough memory, carry set.
IMPORTANT:	Memory block in which the chunk is allocated in is locked
		when this routine returns.
		One must unlock it after writing things into it.
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemFree:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	frees a HugeMem chunk
PASS:		^lax:cx = huge mem chunk optr
RETURN:		none

		In EC version, invalid chunk optr is detected in
		ECValidateHugeLMemChunk.

		In non-EC version:
		if datablock(ax) belongs to this hugeLMem,
		   if cx = illegal handle, then [fatal error from LMemFree]
		   else [everything is fine]
		else
		   carry = set.

DESTROYED:	ax, cx
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemLock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	locks the block containing a hugelmem chunk
PASS:		bx = hptr part of hugelmem chunk
RETURN:		ax = segment address of the block
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemUnlock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Unlocks a memblock containing hugelmem chunk
PASS:		bx = hptr part of hugelmem chunk
RETURN:		none
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	HugeLMemReAlloc:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Change the size of a chunk in a hugelmem
PASS:		*ds:ax = handle of the hugelmem chunk
		cx = size to resize chunk to
RETURN:		ds = segment address of same lmem heap (may have moved).
		es = unchanged, unless es and ds were the same on entry to the
		     routine, in which case es and ds are the same on return.
		carry = set if error( couldn't realloc the chunk because of
		        memory or max size limitation in which case the user
			is advised to create a new larger chunk rather than
			resizing this one. )

DESTROYED:	nothing
	WARNING:  This routine MAY resize the LMem block, moving it on the
		  heap and invalidating stored segment pointers and current
		  register or stored offsets to it.

IMPORTANT
NOTE:		Currently only downsizing a chunk is allowed.

SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueLMemCreate:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Creates a queue in LMem heap.
PASS:		ax 	= size of each entry
		bx	= LMem heap in which to create queue
		cl 	= min queue capacity (also initial)
		dx	= max queue capacity
RETURN:		^lbx:cx	= queue( optr )
		carry set if the queue could not be allocated
DESTROYED:	ax
SIDE EFFECTS:	none		
----------------------------------------------------------------------------|

global	QueueLMemDestroy:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Destroys a queue.  All the contents are also destoyed.
PASS:		^lbx:cx	= optr to queue
RETURN:		nothing
DESTROYED:	cx
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueMarkAsDead:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Wake up all the threads that are blocking for some reason
		concerning this queue.  Any thread that accesses this queue
		in the future will get QE_DEAD error.
PASS:		*ds:si	= queue to mark as dead
RETURN:		nothing
DESTROYED:	nothing
----------------------------------------------------------------------------|

global	QueueEnqueueLock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Returns a fptr to the portion of memory to be enqueued in
		EnqueueEnd operation.  If queue is full, wait cx ticks for
		dequeue operation which will free up some space in the queue.
		(!) after copying information to be enqueued into this portion
		    of memory, one must call 'QueueEnqueueEnd' in order to
		    actually enqueue that portion of memory into queue.

PASS:		^lbx:si	= queue
		cx	= time out value range: 0x0010-0xfff0
			  [ 0x0000-0x000f, 0xfff1-0xffff reserved ]

			  NO_WAIT for no waiting
			  RESIZE_QUEUE for resizing if more space is needed.
			  But if the queue size becomes bigger than the max
			  size specified in QueueCreate, returns QE_TOO_BIG.
			  FOREVER_WAIT for waiting forever

RETURN:		ds:di	= new element to be enqueued
		cx	= size of entry
		if CF is set, cx = error message
			either QE_TIMEOUT or QE_SHUTTING_DOWN
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueEnqueueUnlock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Enqueues a new element to queue.  New element is the memory
		portion returned by QueueEnqueueStart.  If Queue is full at
		this time, return error.

PASS:		*ds:si	= queue
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueAbortEnqueue:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Aborts enqueue operation when called
		enqueueStart and before enqueueEnd.
		Synchronization semaphore is released.
		EnqueueSemaphore is V'ed
PASS:		*ds:si	= queue
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	Synchronization/enqueue semaphore is released.
----------------------------------------------------------------------------|

global	QueueDequeueLock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Get the front entry of a queue. If queue is empty, wait cx
		clock ticks for 'enqueue' operation.  If 'enqueue' operation
		never occurs, return error.

PASS:		^lbx:si	= queue
		cx	= time out value range: 0x0010-0xfff0
			  [ 0x0000-0x000f, 0xfff1-0xffff reserved ]

			  NO_WAIT for waiting 0 ticks.
			  FOREVER_WAIT for wait forever

			* RESIZE_QUEUE is not allowed in QueueDequeueLock and
			  the queue will automatically resize itself to 1/2 of
			  the current size when number of enqueued entries are
			  less than 1/4 of the current capacity of the queue.

RETURN:		ds:di	= front entry
		cx	= size of element
		CF set if error, cx = error message,
				 either QE_TIMEOUT or QE_SHUTTING_DOWN
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueDequeueUnlock:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Dequeue an element from queue.
PASS:		*ds:si	= queue
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	none
----------------------------------------------------------------------------|

global	QueueAbortDequeue:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	Aborts dequeue operation when called
		dequeueStart and before dequeueEnd.
		Synchronization semaphore is released.
		DequeueSemaphore is V'ed
PASS:		*ds:si	= queue
RETURN:		nothing
DESTROYED:	nothing
SIDE EFFECTS:	Synchronization/dequeue semaphore is released.
----------------------------------------------------------------------------|

global	QueueNumEnqueues:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	returns the current capacity of queue and the number of 
		entries currently enqueued
PASS:		^lbx:si	= queue
RETURN:		cx	= number of enqueued entries in the queue
		dx	= current capacity of the queue
DESTROYED:	nothing
----------------------------------------------------------------------------|

global	QueueEnum:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	traverses a queue and performs callback routine on each
		element.
PASS:		^lbx:si	= queue
		cx:dx = virtual fptr for enum routine
		bp    = data to pass in as parameter1
		ds    = data to pass in as parameter2
		di    = data to pass in as parameter3

	In callback routine:
	PASS:
		bp    = parameter1
		ds    = parameter2
		di    = parameter3
		es:si = current queue element
	RETURN:
		carry set to abort QueueEnum
		bp,ds,di = whatever you want to return and pass on to the
			   next callback routine(or you shouldn't trash these)
	DESTROYS:
		nothing

RETURN:		carry set if QueueEnum was aborted
		bp,ds,di( whatever the callback routine returned last )
DESTROYED:	nothing

----------------------------------------------------------------------------|


global	NetGenerateRandom32:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	generate a 32 bit random number

PASS:		nothing

RETURN:		dxax = random 32 bit number

DESTROYED:	nothing

CAVEATS:
	This random number generator is not a very good one; it is sufficient
	for a wide range of tasks requiring random numbers (it will work
	fine for shuffling, etc.), but if either the "randomness" or the
	distribution of the random numbers is crucial, you may want to look
	elsewhere.

----------------------------------------------------------------------------|

global	NetGenerateRandom8:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	generate an 8 bit random number

PASS:		dl - limit for generated number

RETURN:		dl - number between 0 and dl

DESTROYED:	nothing

CAVEATS:	see NetGenerateRandom32

----------------------------------------------------------------------------|

global	NETGENERATERANDOM8:far
COMMENT |-------------------------------------------------------------------
SYNOPSIS:	C stub to generate an 8 bit random number

C DECL:		extern int NetGenerateRandom8(int limit);

----------------------------------------------------------------------------|


global  HUGELMEMCREATE:far
global	HUGELMEMFORCEDESTROY:far
global	HUGELMEMDESTROY:far
global	HUGELMEMALLOCLOCK:far
global	HUGELMEMFREE:far
global	HUGELMEMLOCK:far
global	HUGELMEMUNLOCK:far
global	HUGELMEMREALLOC:far


EndLibrary	netutils
