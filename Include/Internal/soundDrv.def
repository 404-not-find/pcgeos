COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS Sound System
MODULE:		Sound Driver
FILE:		soundDrv.def

AUTHOR:		Todd Stumpf, Aug  6, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	8/ 6/92		Initial revision


DESCRIPTION:
	This contains all the defines necessary to use and/or
	create a sound driver.

	
	$Id: soundDrv.def,v 1.1 97/04/04 14:16:19 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__SOUNDDR


include	driver.def

StartDriver	sound

SOUND_PROTO_MAJOR	equ	DRIVER_PROTO_MAJOR+1
SOUND_PROTO_MINOR	equ	DRIVER_PROTO_MINOR+0

;
;  Every device supported by a devices driver has one word
;	of data associated with it.  The use of this word
;	depends upon the driver.  For sound drivers, this word
; 	is used by the preferences module to determine which
; 	drivers are compatible with which drivers.
;
SoundWordOfData		record
	SWOD_USES_TIMER_2	:1	; Requires timer 2 to operate
	SWOD_IS_SYNTH_DEVICE	:1	; Produces Synthesized Sounds
	SWOD_IS_SAMPLE_DEVICE	:1	; Prodcues Sampled Sounds
				:13	; spare bits anyone?
SoundWordOfData		end



SoundDriverFunction	etype word, DriverExtendedFunction, 2

;	These are the first four functions that must be supported
; DR_INIT		0
; DR_EXIT		2
; DR_SUSPEND		4
; DR_UNSUSPEND		6
; DRE_TEST_DEVICE	8
; DRE_SET_DEVICE	10


;-----------------------------------------------------------------------------
;   Driver Routine Notes
;
;   Any routine which calls a driver function can assume that all
;	registers have been saved, unless the specific header below
;	states that it can be destroyed
;
;   All driver routines should be able to be called with interrupts
;	in any state (INT_ON or INT_OFF) unless specifically labelled
;	otherwise.
;	
;-----------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;		GENERAL DEVICE COMMANDS
;-----------------------------------------------------------------------------

DRE_SOUND_QUERY_DEVICE_CAPABILITY		enum	SoundDriverFunction
;	PASS:
;		INT_ON
;	RETURN:
;		ax	<- # of individual FM voices available
;		dx	<- # of DACs available on device
;		bx	<- SupportedInstrumentFormat
;		cx	<- SoundDriverCapability
;		di	<- SoundDriverDACCapability
;		bp:si	<- fptr to stream strategy routine to use
;				(null pointer if std stream driver is ok)
;
;	DESTROY:
;		nothing
;	
;	DESCRIPTION:  This command queries the driver as to what level
;		of support it has for sound.
;		      The driver should return the appropriate values
;		for the device currently selected.
;		      If a device indicates it does not have any FM voices
;		or DACs, then the corrosponding values (such as stream driver,
;		or native envelope), should be ignored.
;

;-----------------------------------------------------------------------------
;
;		FREQUENCY, ENVELOPE, VOICE INTERFACE
;
;-----------------------------------------------------------------------------

	;
	;  Every command dealing with FM sound indicates which
	;	voice the command should apply to.  If the driver
	;	recieves an illegal voice #, it should ignore
	;	the command.
	;
	;  For example, if the standard PC speaker driver (which
	;	supports only voice zero) were to recieve a
	;	VoiceOff command for voice 2, it should NOT affect
	;	the actual tone being generated by voice 0).

DRE_SOUND_VOICE_ON				enum SoundDriverFunction
;	PASS:
;		ax	-> frequency of tone to generate in Hz
;		bx	-> volume of note	(larger = louder)
;		cx	-> voice to play on
;		INT_OFF
;	RETURN:
;		nothing
;
;	DESTROY:
;		nothing
;
;	DESCRIPTION:  This command starts generating a tone that
;		will follow the envelope selected for the voice.  If
;		the envelope is a continuing sound, once the envelope
;		reaches the sustain point, it should remain there
;		until a voice off command is recieved.
;

DRE_SOUND_VOICE_OFF				enum SoundDriverFunction
;	PASS:
;		cx	-> voice to release
;		INT_OFF
;	RETURN:
;		nothing
;	DESTROY:
;		nothing
;
;	DESCRIPTION:  This command will release a note from its
;		sustain point and allow it to continue on its
;		enevelope.  After recieving a Voice Off command,
;		the tone is should be considered by the driver
;		to be silent (even if it knows otherwise).  Should
;		a new Voice On command be recieved for the voice
;		it should being playing the new tone immediatly,
;		even if it means truncating the previous notes
;		envelope.
;		      This command should be ignored if the voice
;		is not currently sounding.
;

DRE_SOUND_VOICE_SILENCE				enum SoundDriverFunction
;	PASS:
;		cx	-> voice to turn off
;		INT_OFF
;	RETURNED:
;		nothing
;
;	DESTROY:
;		nothing
;
;	DESCRIPTION:  This command indicates that the voice should
;		immediately quit sounding the and become silent
;		(even if doing so violates the parameters of its envelope).
;		      This command should be ignored if the voice
;		is not currently sounding.
;

DRE_SOUND_SET_ENVELOPE				enum SoundDriverFunction
;	PASS:
;		bx:si	->  containing envelope information (native format)
;				- or -
;		bxsi 	-> Standard instrument patch selection
;		cx	-> voice to alter
;		INT_OFF
;	RETURN:
;		nothing
;
;	DESTROY:
;		nothing
;
;	DESCRIPTION:  This command sets up a particular voice of the
;		sound board to generate tones corrosponding to the
;		particular sound envelope and timbre information.  The
;		affect on the current note (if any) is undefined.
;		An application using the driver should be sure to turn
;		off the voice before changing the envelope info.
;		The driver should copy the envelope information
;		from the designated buffer when this command is
;		recieved, it should not just store the pointer,
;		as the calling application should be able to
;		change the data stored at the buffer without
;		affecting the settings of the voice.
;

;-----------------------------------------------------------------------------
;
;	 	FIFO DAC INTERFACE
;
;-----------------------------------------------------------------------------

	;  Like the FM commands, the DAC commands require a DAC #
	;	to be specified.  If the driver recieves a command
	;	for a DAC # that is not supported, the driver should
	;	attempt to handle it is as if it did exist, but
	;	the request could not be granted.
	;
	;  For example, a request to attach dac # 10, when only
	;	one dac is supported, should result in the carry
	;	flag being set.  The command should not just be
	;	ignored.
	;

DRE_SOUND_DAC_ATTACH_TO_STREAM		enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to attach
;		ax	-> stream token (virtual segment)
;		bx	-> stream segment
;		INT_ON
;	RETURN:
;		carry set if error attaching
;		carry clear otherwise
;	DESTROY:
;		nothing
;	DESCRIPTION:  This command instructs the sound driver
;		to attach the given DAC to a stream.
;		If for some reason the driver is unable to do
;		so, it should set the carry flag and return.
;		It should never be sent to a DAC which is
;		currently attached to another stream.  If it
;		is, the driver should return carry set.
;

DRE_SOUND_DAC_DETTACH_FROM_STREAM	enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to dettach
;		INT_ON
;	RETURN:
;		nothing
;	DESTROY:
;		nothing
;	DESCRIPTION:  This command instructs the sound driver
;		to dettach the given DAC from any stream.
;		The driver should do whatever it wants with the
;		stream, but it should not destroy or close it.
;		Data currently remaining on the stream should
;		be played if possible, but it is not required.
;		      If the DAC is later re-attached to any stream,
;		any data on that stream should be played in favor
;		of any data remaining from a previously attached stream.
;		      If the DAC specified is not attached to a
;		stream, this command should be ignored
;

DRE_SOUND_DAC_SET_SAMPLE_RATE_AND_FORMAT	enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to set
;		ax	-> ManufacturerID of sample
;		bx	-> DACSampleFormat
;		dx	-> sample rate requested (in Hz)
;	RETURN:
;		dx	<- sample rate set (in Hz) (zero if not supported)
;		cx	<- requested stream size for rate
;	DESTROY:
;		nothing
;	DESCRIPTION:  This command alters the current format and rate
;		selection of the specified DAC.  All DAC data should be
;		processed at the new rate and format.  In the case that
;		the format is not supported, the rate should be zero.
;		If the data is of a supported format, but not at a
;		supported rate, then the driver should return the
;		closest rate that is supported for that format.
;		      This command should never be issued to a
;		DAC that is connected to a non-empty stream.  If it
;		ever is, the actions of the DAC are undefined.
;		      If the command is issued to a DAC connected
;		to an empty stream, but one that is still active,
;		that is, the driver read the data off the stream
;		but has not yet processed it, all of the previously
;		read samples should be ignored, and the driver should
;		prepare to read new samples at the new rate.
;

DRE_SOUND_DAC_CHECK_SAMPLE_RATE_AND_FORMAT	enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to check
;		ax	-> ManufacturerID of sample
;		bx	-> DACSampleFormat
;		dx	-> sample rate (in Hz)
;	RETURN:
;		dx	<- closes sample rate (in Hz) (zero if not supported)
;		cx	<- requested stream size for rate
;	DESTROY:
;		nothing
;	DESCRIPTION:  This command is very similar to SET_SAMPLE_RATE...
;		except that it does not actually change the operation
;		of the driver.  The driver should return the closest
;		supported rate for the given format, or zero if not
;		supported, but the selected rate and format should
;		not change.  This allows the library to check if
;		a given format and rate is selected, but not alter
;		a sound in progress.
;

DRE_SOUND_DAC_RESET_REFERENCE_BYTE		enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to reset
;	RETURN:
;		nothing
;	DESTROY:
;		nothing
;	DESCRIPTION:  This command informs the DAC to reset its
;		reference byte when doing an ADPCM transfer.
;		Basically, this means that the next data read from
;		stream is going to be new ADPCM data, and thus the
;		the first byte will be a reference byte, not
;		continuation of the previous ADPCM data.
;		This command should not be issued to a DAC that is
;		attached to a non-empty stream or a DAC that is
;		operating on non ADPCM code.  If it is, the driver
;		should ignore it.  No error need be returned.
;

DRE_SOUND_DAC_FLUSH_DAC				enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to flush
;		INT_ON
;	RETURN:
;		nothing
;	DESTROY:
;		nothing
;
;	DESCRIPTION: This command is sent to indicate that the
;		specified DAC should be cleared out.  The DAC
;		should no longer play any samples.
;		This command should never be issued to a DAC
;		that is attached to a non-empty stream.  If it
;		ever is, it may be ignored by the driver.
;

DRE_SOUND_DAC_IS_DAC_EMPTY			enum SoundDriverFunction
;	PASS:
;		cx	-> DAC to check
;	RETURN:
;		carry set if dac is not empty
;		carry clear if dac is empty
;	DESTROY:
;		nothing
;
;	DESCRIPTION:  This command queries the driver on the state
;		of the DAC.  Not the stream connected to the DAC,
;		but the DAC itself.  A DAC is empty when it is
;		inactive.  It is not empty when it is processing data
;		data it has read off the stream, or data still
;		remains on the stream to be read.
;		      This command is provided so applications
;		can be sure to give the DAC enough time to play
;		a sample completely before the application changes
;		the DAC's settings.
;		      If a driver gets an inquery about a nonexistant
;		DAC #, then it should respond with DAC empty.
;

DRE_SOUND_MIXER_GET_MASTER_VOLUME		enum SoundDriverFunction
;	PASS:	nothing
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		 nothing
;
;	DESCRIPTION:
;		This function returns the current levels of the
;	master volume setting for the mixer.  This level effects
;	the output of all volumes from the mixer.	
;
DRE_SOUND_MIXER_SET_MASTER_VOLUME		enum SoundDriverFunction
;	PASS:	AL -> desired MixerLevel for left channel
;		AH -> desired MixerLevel for right channel
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function changes the current levels of the
;	master volume setting for the mixer, and returns the results.
;	This level effects the output of all volumes from the mixer.	
;
DRE_SOUND_MIXER_GET_CAPABILITIES		enum SoundDriverFunction
;	PASS:	nothing
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function returns the number of mixer sources
;	and mixer effects that are supported by the driver.
;
DRE_SOUND_MIXER_MAP_SOURCE			enum SoundDriverFunction
;	PASS:	AX -> StdSourceType
;
;	RETURN:	carry clear on success
;		CX <- source # for source
;		BL <- StdSourceBehavior for source
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function, given a StdSourceType supported by
;	the driver, will identify the internal source # used to
;	refer to that StdSourceType.  This source # should be used
;	on all Get/Set calls to identify the source.
;		This function also returns behavior characteristics
;	about the source for the caller to refer to.
;
DRE_SOUND_MIXER_MAP_EFFECT			enum SoundDriverFunction
;	PASS:	
;
;	RETURN:	carry clear on success
;		CX <- effect # for effect
;		BL <- StdEffectBehavior for effect
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function, given a StdEffectType supported by
;	the driver, will identify the internal effect # used to
;	refer to that StdEffectType.  This effect # should be used
;	on all Get/Set calls to identify the effect.
;		This function also returns behavior characteristics
;	about the effect for the caller to refer to.
;
DRE_SOUND_MIXER_GET_SOURCE_VOLUME		enum SoundDriverFunction
;	PASS:	CX -> source #
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function retrieves the current MixerLevel(s)
;	for a source previousl mapped by MapSource.
;
DRE_SOUND_MIXER_SET_SOURCE_VOLUME		enum SoundDriverFunction
;	PASS:	CX -> source #
;		AL -> MixerLevel for left channel
;		AH -> MixerLevel for right channel (if stereo)
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel (if stereo)
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function attempts to change the MixerLevels of
;	a source previously mapped with MapSource, and returns the
;	results.
;
DRE_SOUND_MIXER_GET_EFFECT_LEVEL		enum SoundDriverFunction
;	PASS:	CX -> effect #
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function retrieves the current MixerLevel(s)
;	for an effect previously mapped by MapEffect.
;
DRE_SOUND_MIXER_SET_EFFECT_LEVEL		enum SoundDriverFunction
;	PASS:	CX -> source #
;		AL -> MixerLevel for left channel
;		AH -> MixerLevel for right channel (if stereo)
;
;	RETURN:	carry clear on success
;		AL <- MixerLevel for left channel
;		AH <- MixerLevel for right channel (if stereo)
;			- or -
;		carry set on failure
;		AX <- SoundMixerError
;	DESTROY:
;		nothing
;
;	DESCRIPTION:
;		This function attempts to change the MixerLevels of
;	an effect  previously mapped with MapSource, and returns the
;	results.
;

;-----------------------------------------------------------------------------
;			 Driver Structures
;-----------------------------------------------------------------------------
	;
	; Some sound devices have the ability to generate static,
	; that is "White Noise".  This actuallyhas many uses, and
	; so it is something an application may want to be aware of.
	; While there can be many types of noise - white noise, pink
	; noise, and such - for the most people just want to know if
	; you can make any noise.  Hence just two types:
	;	SDNC_NO_NOISE	= can do no noise creation at all
	;	SDNC_WHITE_NOISE= some sort of noise is possible.

SoundDriverNoiseCapability	etype	byte,  0,1
	SDNC_NO_NOISE		enum SoundDriverNoiseCapability
	SDNC_WHITE_NOISE	enum SoundDriverNoiseCapability

	;
	; SoundDriverWaveFormCapability indicates what selection of
	; wave forms the device is capable of generating.
	;	SDWFC_NONE   = only one wave form possible
	;				(a square waveform, most likely)
	;	SDWFC_SELECT = multiple pre-select waveforms
	;				(square, triangle, sawtooth, sine...)
	;	SDWFC_GENERATE = any possible waveform can be generated.

SoundDriverWaveFormCapability	etype	byte,	0,1
	SDWFC_NONE		enum SoundDriverWaveFormCapability
	SDWFC_SELECT		enum SoundDriverWaveFormCapability
	SDWFC_GENERATE		enum SoundDriverWaveFormCapability

	;
	; SoundDriverTimbreCapability indicates how the device can respond
	; to timbral information.
	;	SDTC_TONE_GENERATOR = only the fundamental can be generated
	;	SDTC_ADDITIVE	    = timbre can be produced by adding two
	;				 or more voices together
	;	SDTC_MODULATOR	    = timbre is produced by a modulator
	;				 wave producing unlimited but
	;				 uncontrolled timbre
	;	SDTC_SELECTIVE	    = any level of timbre can be produced

SoundDriverTimbreCapability	etype	byte,	0,1
	SDTC_TONE_GENERATOR	enum SoundDriverTimbreCapability
	SDTC_ADDITIVE		enum SoundDriverTimbreCapability
	SDTC_MODULATOR		enum SoundDriverTimbreCapability
	SDTC_SELECTIVE		enum SoundDriverTimbreCapability

	;
	; SoundDriverEnvelopeCapability determines how well the device
	; will respond to envelope information.
	;	SDEC_NONE	= envelope information will be ignored
	;	SDEC_ADSR	= envelope information will be reduced
	;				to an attack, decat, sustain,
	;				release format
	;	SDEC_DSP	= envelope information will be duplicated
	;				through a DSP

SoundDriverEnvelopeCapability	etype	byte,	0,1
	SDEC_NONE		enum SoundDriverEnvelopeCapability
	SDEC_ADSR		enum SoundDriverEnvelopeCapability
	SDEC_DSP		enum SoundDriverEnvelopeCapability	

SoundDriverCapability	record
	SDC_NOISE	SoundDriverNoiseCapability	: 1
	SDC_WAVEFORM	SoundDriverWaveFormCapability	: 2
	SDC_TIMBRE	SoundDriverTimbreCapability	: 2
	SDC_ENVELOPE	SoundDriverEnvelopeCapability	: 2
	:9
SoundDriverCapability	end

	;
	;  The SoundDriverDACCapability indicates what special
	;  needs and/or capabilities the DAC posseses.  This
	;  can be the mode of transfer (DMA/non-DMA), the
	;  end of transfer capability (Interrupt/non-interrupt)
	;  and such.
SoundDriverDACCapability	record
	SDDACC_DMA	: 1	; set if DMA transfer supported
	SDDACC_INT	: 1	; set if device can generate INT
	:14
SoundDriverDACCapability	end

EndDriver	sound
