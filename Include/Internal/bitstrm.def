COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:	
FILE:		bitstrm.def

AUTHOR:		Brian Chin,  October 1993

ROUTINES:
	Name			Description
	----			-----------

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	brianc	9/28/93		Initial revision


DESCRIPTION:
	Include file for Bitstream Font structures.
		

	$Id: bitstrm.def,v 1.1 97/04/04 14:15:17 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__BITSTRM

;------------------------------------------------------------------------------
;	4-in-1 API constants
;------------------------------------------------------------------------------

BitstreamFontProtocol	etype	word
	PROTO_SYM_SET		enum	BitstreamFontProtocol
	PROTO_PS_ENCODE		enum	BitstreamFontProtocol
	PROTO_BCID		enum	BitstreamFontProtocol
	PROTO_UNICODE		enum	BitstreamFontProtocol
	PROTO_MSL		enum	BitstreamFontProtocol
	PROTO_USER		enum	BitstreamFontProtocol
	PROTO_PS_NAME		enum	BitstreamFontProtocol
	PROTO_DIRECT_INDEX	enum	BitstreamFontProtocol
	PROTO_SHIFT_JIS		enum	BitstreamFontProtocol
	PROTO_JIS		enum	BitstreamFontProtocol
	PROTO_EXT_UNIX		enum	BitstreamFontProtocol

BitstreamFontProcessor	etype	word
	PROC_PCL		enum	BitstreamFontProcessor
	PROC_TRUE_TYPE		enum	BitstreamFontProcessor
	PROC_TYPE_1		enum	BitstreamFontProcessor
	PROC_SPEEDO		enum	BitstreamFontProcessor

BuffType	struct
	BT_org		fptr
	BT_noBytes	dword
BuffType	ends

SpecsOutputMode	etype	byte
	SOM_OUTLINE	enum	SpecsOutputMode, 0
	SOM_2D		enum	SpecsOutputMode, 1

SpecsTypeFlags	record
	STF_CLIP_BOTTOM:1
	STF_CLIP_TOP:1
	STF_CLIP_RIGHT:1
	STF_CLIP_LEFT:1
	STF_SQUEEZE_BOTTOM:1
	STF_SQUEEZE_TOP:1
	STF_SQUEEZE_RIGHT:1
	STF_SQUEEZE_LEFT:1
	:1
	STF_IMPORT_SET_WIDTH:1
	STF_INHIBIT_CONSTRAINT:1
	STF_LINEAR_SCALING:1
	STF_CURVES_OUT:1
	STF_OUTPUT_MODE SpecsOutputMode:3
SpecsTypeFlags	end

SpecsType	struct
	ST_pfont	fptr.BuffType
	ST_xxmult	dword
	ST_xymult	dword
	ST_xoffset	dword
	ST_yxmult	dword
	ST_yymult	dword
	ST_yoffset	dword
	ST_flags	dword		; .low = SpecsTypeFlags
	ST_outInfo	fptr
SpecsType	ends

BitstreamIEEE64	struct
	BIEEE64_wd0	word
	BIEEE64_wd1	word
	BIEEE64_wd2	word
	BIEEE64_wd3	word
BitstreamIEEE64	ends

UFEStruct	struct
	UFES_font	BuffType
	UFES_matrix	BitstreamIEEE64 6 dup (?)
	UFES_genSpecs	fptr.SpecsType
UFEStruct	ends

;-----------------------------------------------------------------------------
;	Speedo font file header
;-----------------------------------------------------------------------------

SpeedoFontFlags	record
	:7
	SFntF_COMPACT:1		;extended mode if set to one
				;(yes, reversed naming)
SpeedoFontFlags	end

SpeedoClassFlags	record
	:4
	SCF_DISPLAY:1
	SCF_SERIF:1
	SCF_MONOSPACE:1
	SCF_ITALIC:1
SpeedoClassFlags	end

SpeedoFamily	etype byte
	SFamF_DONTCARE		enum	SpeedoFamily
	SFamF_SERIF		enum	SpeedoFamily
	SFamF_SANSERIF		enum	SpeedoFamily
	SFamF_MONOSPACE		enum	SpeedoFamily
	SFamF_SCRIPT		enum	SpeedoFamily
	SFamF_DECORATIVE	enum	SpeedoFamily

SpeedoFormWidth	etype	byte
	SFWd_CONDENSED		enum	SpeedoFormWidth, 4
	SFWd_SEMICONDENSED	enum	SpeedoFormWidth, 6
	SFWd_NORMAL		enum	SpeedoFormWidth, 8
	SFWd_SEMIEXPANDED	enum	SpeedoFormWidth, 10
	SFWd_EXPANDED		enum	SpeedoFormWidth, 12

SpeedoFormWeight	etype	byte, 1, 1
	SFWg_THIN		enum	SpeedoFormWeight
	SFWg_ULTRALIGHT		enum	SpeedoFormWeight
	SFWg_EXTRALIGHT		enum	SpeedoFormWeight
	SFWg_LIGHT		enum	SpeedoFormWeight
	SFWg_BOOK		enum	SpeedoFormWeight
	SFWg_NORMAL		enum	SpeedoFormWeight
	SFWg_MEDIUM		enum	SpeedoFormWeight
	SFWg_SEMIBOLD		enum	SpeedoFormWeight
	SFWg_DEMIBOLD		enum	SpeedoFormWeight
	SFWg_BOLD		enum	SpeedoFormWeight
	SFWg_EXTRABOLD		enum	SpeedoFormWeight
	SFWg_ULTRABOLD		enum	SpeedoFormWeight
	SFWg_HEAVY		enum	SpeedoFormWeight
	SFWg_BLACK		enum	SpeedoFormWeight

BitstreamFontWeight	etype	byte
	BFW_THIN	enum	BitstreamFontWeight, 75
	BFW_ULTRALIGHT	enum	BitstreamFontWeight, 80
	BFW_EXTRALIGHT	enum	BitstreamFontWeight, 85
	BFW_LIGHT	enum	BitstreamFontWeight, 90
	BFW_BOOK	enum	BitstreamFontWeight, 95
	BFW_NORMAL	enum	BitstreamFontWeight, 100
	BFW_MEDIUM	enum	BitstreamFontWeight, 103
	BFW_SEMIBOLD	enum	BitstreamFontWeight, 106
	BFW_DEMIBOLD	enum	BitstreamFontWeight, 109
	BFW_BOLD	enum	BitstreamFontWeight, 112
	BFW_EXTRABOLD	enum	BitstreamFontWeight, 115
	BFW_ULTRABOLD	enum	BitstreamFontWeight, 118
	BFW_HEAVY	enum	BitstreamFontWeight, 121
	BFW_BLACK	enum	BitstreamFontWeight, 125

SpeedoFormFlags	record
	SFrmF_WEIGHT SpeedoFormWeight:4
	SFrmF_WIDTH SpeedoFormWidth:4
SpeedoFormFlags	end

SpeedoTransform	struct
	ST_yOffset	sword		;signed ORUs
	ST_xScale	word		;unsigned units of 1/4096
	ST_yScale	word		;unsigned units of 1/4096
SpeedoTransform	ends

SPEEDO_FACE_NAME_LEN	equ	16

SpeedoFontFileHeader	struct
	SFFH_formatID			char 8 dup (?)
	; D1.0 CR LF NULL NULL

	SFFH_fontSize			dword
	; size in bytes of font file

	SFFH_minFontBufSize		dword
	; min buffer size to load non-image data of font

	SFFH_minCharBufSize		word
	; largest character image in font

	SFFH_headerSize			word
	; byte size of font header

	SFFH_fontID			word
	; Bitstream Font ID number

	SFFH_fontVersion		word
	; revision number of font

	SFFH_fontName			char 70 dup (?)
	; full name of font

	SFFH_manufDate			char 10 dup (?)
	; manufacturing date

	SFFH_charSetName		char 66 dup (?)
	; character set used for the font, e.g. "Bitstream International
	; Character Set"

	SFFH_vendorID			char 2 dup (?)
	; manufacturer of the font, as reprsented in the first two
	; characters of the font file name, e.g. BX indicates Bitstream
	; in the file name BX000011.spd

	SFFH_charSetID			char 2 dup (?)
	; character set used for the font, as represented in the second
	; two characters of the font file name, e.g. 00 indicates the
	; Bitstream International Character Set in the file name BX000011.spd

	SFFH_copyright			char 78 dup (?)
	; copyright notice

	SFFH_numCharSetCharIndxs	word
	; number of character indexes available for use, including undefined
	; characters

	SFFH_numFontCharIndxs		word
	; number of characters in the character set, plus any supplementary
	; characters needed for compound characters

	SFFH_firstCharIndx		word
	; position of first character in character set

	SFFH_numKernTracks		word
	; number of tracks in the kerning tracks table

	SFFH_numKernPairs		word
	; total number of kerning pairs in the kerning pairs table

	SFFH_fontFlags			SpeedoFontFlags
	; font mode
	
	SFFH_classFlags			SpeedoClassFlags
	; style of characters in font

	SFFH_family			SpeedoFamily
	; general typeface family classifications to which characters
	; in the font belong

	SFFH_fontFormClass		SpeedoFormFlags
	; width and weight of characters in the font

	SFFH_shortFontName		char 32 dup (?)
	; abbreviation of name of PostScript compatible font

	SFFH_shortFaceName		char SPEEDO_FACE_NAME_LEN dup (?)
	; abbreviation of name of typeface family (does not include style)

	SFFH_fontForm			char 14 dup (?)
	; indicates Font Form Classification (i.e. Condensed, Normal, Semi-
	; Expanded, Thin, Ultralight, Book, Medium, etc.) and if font is
	; roman, bold, italic, or bold italic

	SFFH_italicAngle		sword
	; units of 1/256 degress, positive clockwise

	SFFH_ORUsPerEm			word
	; outline resolution units per em (normally 1000 ORUs per em)

	SFFH_wordSpaceWidth		word
	; in ORUs

	SFFH_EmSpaceWidth		word
	; in ORUs

	SFFH_EnSpaceWidth		word
	; in ORUs

	SFFH_ThinSpaceWidth		word
	; in ORUs

	SFFH_FigureSpaceWidth		word
	; in ORUs

	SFFH_XMIN			sword
	; in ORUs

	SFFH_YMIN			sword
	; in ORUs

	SFFH_XMAX			sword
	; in ORUs

	SFFH_YMAX			sword
	; in ORUs

	SFFH_underPos			sword
	; in ORUs

	SFFH_underThickness		sword
	; in ORUs

	SFFH_smallCaps			SpeedoTransform
	; approx. 80% of cap height

	SFFH_displaySuperiors		SpeedoTransform
	; 50% height, 55-60% width, and raised 50% of initial height

	SFFH_footnoteSuperiors		SpeedoTransform
	; 60% height, 65-70% width, and raised 40% of initial height

	SFFH_alphaSuperiors		SpeedoTransform
	; 70% height, 75-80% width, and raised so that top of alpha superior's
	; x-height aligns with top of the capital

	SFFH_chemicalInferiors		SpeedoTransform
	; 60% height, 65-70% width, and lowered 50% of initial height

	SFFH_smallNumerators		SpeedoTransform
	; 40% height, 48% width, and raised so that top of the superior
	; x-height aligns with the top of the capital, uses nut fraction bar

	SFFH_smallDenominator		SpeedoTransform
	; 40% height, 48% width, and aligned at baseline, uses nut fraction bar

	SFFH_medNumerators		SpeedoTransform
	; 56% height, 63% width, and raised so that top of the superior
	; x-height aligns with the top of the capital, uses diagonal fraction
	; bar

	SFFH_medDenominators		SpeedoTransform
	; 56% height, 63% width, and aligned at baseline, uses diagonal
	; fraction bar

	SFFH_largeNumerators		SpeedoTransform
	; 65% height, 71% width, and raised so that top of the superior
	; x-height aligns with the top of the capital, uses diagonal fraction
	; bar

	SFFH_largeDenominators		SpeedoTransform
	; 65% height, 71% width, and aligned at baseline, uses diagonal
	; fraction bar

SpeedoFontFileHeader	ends

.assert (size SpeedoFontFileHeader) eq 420

;-----------------------------------------------------------------------------
;	Bitstream font cached data file
;-----------------------------------------------------------------------------

;
; Bitstream cache data buffer:
;	BitstreamFontCachedData
;	disk save info for this font
;	BitstreamCharTableEntrys
;	kern info:
;		kern value table
;		kern pair table
;

BitstreamCharTableFlags	record
	:1				;pad to a BYTE only
	BCTF_NEGATIVE_LSB:1		;TRUE if negative left-side bearing
	BCTF_ABOVE_ASCENT:1		;TRUE if very tall
	BCTF_BELOW_DESCENT:1		;TRUE if very low
	BCTF_NO_DATA:1			;TRUE if no data
	BCTF_IS_FIRST_KERN:1		;TRUE if first of a kern pair
	BCTF_IS_SECOND_KERN:1		;TRUE if second of a kern pair
	BCTF_NOT_VISIBLE:1		;TRUE if character normally invisible
BitstreamCharTableFlags	end
;must match CharTableFlags:
.assert (offset BCTF_NEGATIVE_LSB) eq (offset CTF_NEGATIVE_LSB)
.assert (offset BCTF_ABOVE_ASCENT) eq (offset CTF_ABOVE_ASCENT)
.assert (offset BCTF_BELOW_DESCENT) eq (offset CTF_BELOW_DESCENT)
.assert (offset BCTF_NO_DATA) eq (offset CTF_NO_DATA)
.assert (offset BCTF_IS_FIRST_KERN) eq (offset CTF_IS_FIRST_KERN)
.assert (offset BCTF_IS_SECOND_KERN) eq (offset CTF_IS_SECOND_KERN)
.assert (offset BCTF_NOT_VISIBLE) eq (offset CTF_NOT_VISIBLE)

BitstreamCharTableEntry	struct
	BCTE_width	word
	BCTE_flags	BitstreamCharTableFlags
BitstreamCharTableEntry	ends

BFCD_SIG_1 = ('B' or 0x80)
BFCD_SIG_2 = ('F')
BFCD_SIG_3 = ('C' or 0x80)
BFCD_SIG_4 = ('D')

MAX_BITSTREAM_DIRECT_INDEX = 563

if DBCS_PCGEOS
BitstreamKanjiFontFlags	record
	BKFF_KANJI:1			; is kanji font
	BKFF_MULTI_FILE:1		; multiple kanji font files
BitstreamKanjiFontFlags	end
endif

BitstreamFontCachedData	struct
	;
	; info for OutlineDataEntry:
	;
	BFCD_fontWeight		BitstreamFontWeight
	BFCD_fontStyle		TextStyle

	;
	; more identifying info
	;
	BFCD_fontWidth		FontWidth
DBCS <	BFCD_kanjiFont		BitstreamKanjiFontFlags			>

	BFCD_fontName		DosDotFileName
	; 8.3 DOS name of font file
	BFCD_fontPath		PathName
	; path of font file

	BFCD_charTable		nptr.BitstreamCharTableEntry
	; starts after BFCD_fontDisk

	BFCD_minFontBufSize	word
	BFCD_minCharBufSize	word

	;
	; stuff we need from SpeedoFontFileHeader
	;
	BFCD_ORUsPerEm		word

	;
	; stuff we need to fill in FontBuf:
	;
	BFCD_avgWidth		sword
	BFCD_maxWidth		sword
	BFCD_heightAdjust	sword
	BFCD_height		sword
	BFCD_accent		sword
	BFCD_mean		sword
	BFCD_baseAdjust		sword
;	BFCD_baselinePos	sword
;this is used instead:
	BFCD_ascent		sword
	BFCD_descent		sword
	BFCD_extLeading		sword
	BFCD_kernCount		word
	BFCD_kernPairPtr	nptr.KernPair
	BFCD_kernValuePtr	nptr.word
	; kern info sits after BitstreamCharTableEntrys

	BFCD_numChars		word
if DBCS_PCGEOS
	BFCD_firstChar		word		; Bitstream index
	BFCD_lastChar		word		; Bitstream index
	BFCD_defaultChar	Chars		; Unicode
	BFCD_firstUniChar	Chars		; Unicode
	BFCD_lastUniChar	Chars		; Unicode
else
	BFCD_firstChar		byte
	BFCD_lastChar		byte
	BFCD_defaultChar	byte
endif

	;
	; default width for non-ward 0 kanji font characters
	;
DBCS <	BFCD_kanjiCharWidth	word					>

	;
	; translation table for GEOS -> Bitstream direct index
	; (indexed by GEOS character)
	; (shared with BFCD_charExistsTable space for DBCS as Kanji font will
	;  need BFCD_charExistsTable but not BFCD_xlatTable and non-Kanji font
	;  will need BFCD_xlatTable but not BFCD_charExistsTable)
	;
SBCS <	BFCD_xlatTable		word 256 dup (?)			>
DBCS <	;BFCD_xlatTable		word (MAX_BITSTREAM_DIRECT_INDEX+1) dup (?)>
DBCS <	BFCD_xlatTable		label word				>
DBCS <	;								>
DBCS <	; bit table for existance of characters				>
DBCS <	; 47 ranges of 100h characters: 81XXh-9fXXh, e0XX-efXX		>
DBCS <	; 32 bytes to map 100h characters				>
DBCS <	;								>
DBCS <	BFCD_charExistsTable	byte 47*32 dup (?)			>

	BFCD_underPos		sword
	BFCD_underThickness	sword
	BFCD_strikePos		sword
	BFCD_aboveBox		sword
	BFCD_belowBox		sword
	BFCD_minLSB		sword
	BFCD_minTSB		sword
	BFCD_maxBSB		sword
	BFCD_maxRSB		sword
	BFCD_pixHeight		sword

if ((offset BFCD_pixHeight)/2)*2 ne (offset BFCD_pixHeight)
	BFCD_dummy		byte
endif

	BFCD_fontDiskSize	word
	BFCD_fontDisk		label	byte
	; disk of font file

BitstreamFontCachedData	ends

MAX_NUM_FACES	equ	10

FontFaceListItem	struct
	FFLI_offset	nptr.BitstreamFontCachedData
	FFLI_length	word
	FFLI_fontWeight	BitstreamFontWeight
	FFLI_fontStyle	TextStyle
	FFLI_unused	word
FontFaceListItem	ends

FontFaceListHeader	struct
	FFLH_sig		byte 4 dup (?)		; 'BFCD'
	FFLH_fontID		FontID
if DBCS_PCGEOS
	FFLH_faceName		wchar SPEEDO_FACE_NAME_LEN dup (?)
else
	FFLH_faceName		char SPEEDO_FACE_NAME_LEN dup (?)
endif
	FFLH_fontFamily		FontAttrs
	FFLH_numFaces		word
	FFLH_processor		BitstreamFontProcessor
	FFLH_faces		FontFaceListItem MAX_NUM_FACES dup (?)
FontFaceListHeader	ends

if DBCS_PCGEOS
;
; 00, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8A, 8B, 8C, 8D, 8E, 8F,
; 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9A, 9B, 9C, 9D, 9E, 9F,
; E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, EA
;
NUM_KANJI_FONT_FILES	equ	16+16+11
endif

;-----------------------------------------------------------------------------
;	Font escapes for Bitstream font driver
;-----------------------------------------------------------------------------

FONT_ESC_BITSTREAM_INSTALL_INIT			enum FontEscCode, 0xc000
;
;	pass:	bx = font file handle
;		dx = font header buffer handle (locked)
;		si = size of font header buffer
;		ax = BitstreamFontProtocol
;		cx = BitstreamFontProcessor
;	return:	carry clear if successful
;		carry set otherwise
;

FONT_ESC_BITSTREAM_INSTALL_EXIT			enum FontEscCode, 0xc001
;
;	pass:	cx = BitstreamFontProcessor
;	return:	nothing
;

FONT_ESC_BITSTREAM_INSTALL_GET_CHAR_BBOX	enum FontEscCode, 0xc002
;
;	pass:	cx = character
;	return:	carry clear if successful
;			ax = min x
;			bx = min y
;			cx = max x
;			dx = max y
;			bp.si = char width (in em units)
;		carry set otherwise
;

FONT_ESC_BITSTREAM_INSTALL_GET_PAIR_KERN	enum FontEscCode, 0xc003
;
;	pass:	ax = character 1 (Bitstream direct index)
;		dx = character 2 (Bitstream direct index)
;	return:	ax = kern amount in WWFixed em units (0 for none)
;
