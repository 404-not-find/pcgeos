COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		E3G.def

AUTHOR:		Jim Guggemos, Mar 27, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	3/27/96   	Initial revision


DESCRIPTION:
	Contains useful registers for the Intel E3G CPU.
	
	The constants have the same name as the EAS gives prepended, of
	course, with E3G_.

	This is data for the A3 silicon from the EAS rev 3.5.
		
	$Id: E3G.def,v 1.1 97/04/04 14:13:09 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__E3G

;---------------------------------------------------------------------------
; DRAM Controller
;---------------------------------------------------------------------------

E3G_DRMODE		equ	0f300h
E3G_DRPRESCALER		equ	0f308h
E3G_DRROLL		equ	0f30eh			; 16-bit
E3G_DRROLL_LO		equ	E3G_DRROLL
E3G_DRROLL_HI		equ	(E3G_DRROLL+1)
E3G_DRRASTO		equ	0f312h			; 16-bit
E3G_DRRASTO_LO		equ	E3G_DRRASTO
E3G_DRRASTO_HI		equ	(E3G_DRRASTO+1)
E3G_DRRF		equ	0f314h
E3G_DRTIMING		equ	0f318h
E3G_DRBNKCFG0		equ	0f31ah
E3G_DRSREFCNT		equ	0f324h			; 16-bit
E3G_DRSREFCNT_LO	equ	E3G_DRSREFCNT
E3G_DRSREFCNT_HI	equ	(E3G_DRSREFCNT+1)


;---------------------------------------------------------------------------
; Asynchronous Serial Port Unit + IrDA Unit
;---------------------------------------------------------------------------

E3G_UART_0_BASE		equ	03f8h
E3G_UART_1_BASE		equ	02f8h

E3G_IRDASEL0		equ	0f3f8h			; IRDASEL for UART0
E3G_IRDASEL1		equ	0f3f9h			; IRDASEL for UART1

E3G_InfraredSelectionRegister	record
    :5			; Reserved
    EISR_XMODE:1	; 0=Xmit pulse width = 3/16 bit time wide
    			; 1=Xmit pulse width = 3 * BCLKIN periods wide
    EISR_RCVEIR:1	; Receiver input is: 0=UART mode, 1=IrDA mode
    EISR_XMITIR:1	; Transmitter input is: 0=UART mode, 1=IrDA mode
E3G_InfraredSelectionRegister	end


;---------------------------------------------------------------------------
; Serial Expansion Port (SEP)
;---------------------------------------------------------------------------

E3G_SEMDS		equ	0f380h
E3G_SECTL		equ	0f381h
E3G_SESR0		equ	0f382h
E3G_SESR1		equ	0f383h
E3G_SECR0		equ	0f384h
E3G_SECR1		equ	0f385h
E3G_SEDR0		equ	0f386h
E3G_SEDR1		equ	0f387h
E3G_SEMR0		equ	0f388h
E3G_SEDL0		equ	0f389h
E3G_SEMR1		equ	0f38ah
E3G_SEDL1		equ	0f38bh
E3G_SECP0		equ	0f38ch
E3G_SECP1		equ	0f38dh
E3G_SEOAD		equ	0f38eh			; 16-bit
E3G_SEOAD_LO		equ	E3G_SEOAD
E3G_SEOAD_HI		equ	(E3G_SEOAD+1)
E3G_SECCR		equ	0f390h
E3G_SETST		equ	0f391h	; UNDOCUMENTED -  SEP Test register

; Register bit values for SEP.  Note that some things are different between
; SPI and I2C modes.  These will be noted in comments.
;

E3G_SepModeSelect	etype	byte
    ESMS_SPI	enum	E3G_SepModeSelect, 1
    ESMS_I2C	enum	E3G_SepModeSelect, 2
    
; Bit values for E3G_SEMDS
;
E3G_SepModeSelectFlags	record
    ESMSF_CLKPOL:1	; SEPCLK polarity when idle: 0=low, 1=high
    			;**** MUST BE 1 FOR I2C MODE
			
    ESMSF_CLKPHA:1	; Clock phase edge: 0=Data out valid on leading edge
    			;  of clock.  1=trailing edge of clock
			;**** MUST BE 1 FOR I2C MODE
			
    ESMSF_NOTOG:1	; No toggle of SEPSS: 1=SEPSS will remain low between
    			;  byte transfers.  Only valid if CLKPHA=1. (SPI)
			;**** ONLY USED IN SPI MODE
			; A7-ONLY
			
    ESMSF_OUTDRV:1	; 0=open-drain outputs, 1=push-pull outputs
			;**** MUST BE 0 FOR I2C MODE
			
    :2			; Reserved
    ESMSF_MS E3G_SepModeSelect:2
E3G_SepModeSelectFlags	end

; Bit values for E3G_SECTL
;
E3G_SepControlRegisterFlags	record
    ESCRF_SLAVE:1	; 1=Enables slave mode (I2C)
    			;**** UNUSED IN SPI MODE.. MUST BE 0
    
    ESCRF_INTEN:1	; 1=Enables SEPINT interrupts
    
    :3			; Reserved, must be 0
    
    ESCRF_ASSACK:1	; 1=Ack is returned when a data byte is received (I2C)
    			;**** UNUSED IN SPI MODE.. MUST BE 0
    
    ESCRF_STOP:1	; 1=Generate a stop condition (I2C)
    			;**** UNUSED IN SPI MODE.. MUST BE 0
    
    ESCRF_RSTART:1	; 1=Generate a repeated start condition (I2C)
    			;**** UNUSED IN SPI MODE.. MUST BE 0
E3G_SepControlRegisterFlags	end

; Bit values for E3G_SESR0.  Note that the differences between SPI and I2C
; modes for this register were taken from the EAS v 4.0.  The 3.5 version of
; this document doesn't contain these differences.
;
E3G_SepStatusRegisterFlags	record
    ESSRF_WCOL:1	; Write Collision: 1=write to cmd reg 0 occurred
			;  while transmitting
    
    ESSRF_COL:1		; Collision: 1=input does not match output
    			;**** NOT USED IN SPI MODE
    
    :1			; Reserved
    
    ESSRF_OVERRUN:1	; Overrun: 1=shift register overrun
    
    :2			; Reserved
    
    			;**** IN SPI MODE, only the bit 0 is used here and
			;**** it is called ESSRF_TC
    ESSRF_TCI:1		; Transmit Complete Interrupt (I2C only)
    ESSRF_RCI:1		; Receive Complete Interrupt
E3G_SepStatusRegisterFlags	end
    
ESSRF_TC	equ	<ESSRF_RCI>

;---------------------------------------------------------------------------
; Chip Select Unit (CSU)
;---------------------------------------------------------------------------

E3G_CSRUADL		equ	0f400h
E3G_CSRUADL_LO		equ	E3G_CSRUADL
E3G_CSRUADL_HI		equ	(E3G_CSRUADL+1)
E3G_CSRUADH		equ	0f402h
E3G_CSRUADH_LO		equ	E3G_CSRUADH
E3G_CSRUADH_HI		equ	(E3G_CSRUADH+1)

E3G_CSRUMSKL		equ	0f404h
E3G_CSRUMSKL_LO		equ	E3G_CSRUMSKL
E3G_CSRUMSKL_HI		equ	(E3G_CSRUMSKL+1)
E3G_CSRUMSKH		equ	0f406h
E3G_CSRUMSKH_LO		equ	E3G_CSRUMSKH
E3G_CSRUMSKH_HI		equ	(E3G_CSRUMSKH+1)

E3G_CSR0ADL		equ	0f408h
E3G_CSR0ADL_LO		equ	E3G_CSR0ADL
E3G_CSR0ADL_HI		equ	(E3G_CSR0ADL+1)
E3G_CSR0ADH		equ	0f40ah
E3G_CSR0ADH_LO		equ	E3G_CSR0ADH
E3G_CSR0ADH_HI		equ	(E3G_CSR0ADH+1)

E3G_CSR0MSKL		equ	0f40ch
E3G_CSR0MSKL_LO		equ	E3G_CSR0MSKL
E3G_CSR0MSKL_HI		equ	(E3G_CSR0MSKL+1)
E3G_CSR0MSKH		equ	0f40eh
E3G_CSR0MSKH_LO		equ	E3G_CSR0MSKH
E3G_CSR0MSKH_HI		equ	(E3G_CSR0MSKH+1)

E3G_CSR1ADL		equ	0f410h
E3G_CSR1ADL_LO		equ	E3G_CSR1ADL
E3G_CSR1ADL_HI		equ	(E3G_CSR1ADL+1)
E3G_CSR1ADH		equ	0f412h
E3G_CSR1ADH_LO		equ	E3G_CSR1ADH
E3G_CSR1ADH_HI		equ	(E3G_CSR1ADH+1)

E3G_CSR1MSKL		equ	0f414h
E3G_CSR1MSKL_LO		equ	E3G_CSR1MSKL
E3G_CSR1MSKL_HI		equ	(E3G_CSR1MSKL+1)
E3G_CSR1MSKH		equ	0f416h
E3G_CSR1MSKH_LO		equ	E3G_CSR1MSKH
E3G_CSR1MSKH_HI		equ	(E3G_CSR1MSKH+1)

E3G_CSR2ADL		equ	0f418h
E3G_CSR2ADL_LO		equ	E3G_CSR2ADL
E3G_CSR2ADL_HI		equ	(E3G_CSR2ADL+1)
E3G_CSR2ADH		equ	0f41ah
E3G_CSR2ADH_LO		equ	E3G_CSR2ADH
E3G_CSR2ADH_HI		equ	(E3G_CSR2ADH+1)

E3G_CSR2MSKL		equ	0f41ch
E3G_CSR2MSKL_LO		equ	E3G_CSR2MSKL
E3G_CSR2MSKL_HI		equ	(E3G_CSR2MSKL+1)
E3G_CSR2MSKH		equ	0f41eh
E3G_CSR2MSKH_LO		equ	E3G_CSR2MSKH
E3G_CSR2MSKH_HI		equ	(E3G_CSR2MSKH+1)

E3G_CSR3ADL		equ	0f420h
E3G_CSR3ADL_LO		equ	E3G_CSR3ADL
E3G_CSR3ADL_HI		equ	(E3G_CSR3ADL+1)
E3G_CSR3ADH		equ	0f422h
E3G_CSR3ADH_LO		equ	E3G_CSR3ADH
E3G_CSR3ADH_HI		equ	(E3G_CSR3ADH+1)

E3G_CSR3MSKL		equ	0f424h
E3G_CSR3MSKL_LO		equ	E3G_CSR3MSKL
E3G_CSR3MSKL_HI		equ	(E3G_CSR3MSKL+1)
E3G_CSR3MSKH		equ	0f426h
E3G_CSR3MSKH_LO		equ	E3G_CSR3MSKH
E3G_CSR3MSKH_HI		equ	(E3G_CSR3MSKH+1)

E3G_CSUPIN		equ	0f460h
E3G_CS0PIN		equ	0f461h
E3G_CS1PIN		equ	0f462h
E3G_CS2PIN		equ	0f463h

;---------------------------------------------------------------------------
; Chip Configuration
;---------------------------------------------------------------------------
E3G_GLOBALDIS		equ	0f820h
E3G_CHIPID		equ	0f822h
E3G_CHIPCFG0		equ	0f826h			; 8-bit
E3G_CHIPCFG1		equ	0f827h			; 8-bit
E3G_CHIPCFG2		equ	0f828h			; 8-bit

E3G_PORTB		equ	61h			; 8-bit

E3GChipCfg0Flags	record
    ECC0F_TG1:1			; TimerGate 1
    ECC0F_TG0:1			; TimerGate 0
    ECC0F_GT2SEL:1		; 0=PORTB:0 conn to GATE2
    ECC0F_CK2SEL:1		; 0=PSCLK/1=SERCLK conn to CLK2
    ECC0F_GT1SEL:1		; 0=TG1 connect to GATE1
    ECC0F_CK1SEL:1		; 0=PSCLK/1=SERCLK conn to CLK1
    ECC0F_GT0SEL:1		; 0=TG0 connect to GATE0
    ECC0F_CK0SEL:1		; 0=PSCLK/1=SERCLK conn to CLK0
E3GChipcfg0Flags	end

E3G_PortBFlags		record
    :2				; Reserved, read as 0, R/O
    EPBF_TMROUT2:1		; TMROUT2 signal, R/O
    EPBF_REFRESH:1		; Refresh signal from DRAM controller, R/O
    :2				; Reserved, read as 0, R/O
    EPBF_SPKR:1			; 1=Enable SPKR output
    EPBF_TMRGATE2:1		; 1=Enable TMRGATE2
E3G_PortBFlags		end

E3GVersion		etype	byte
    EV_A1_OR_A2		enum	E3GVersion, 1
    EV_A3		enum	E3GVersion, 2
    EV_A4		enum	E3GVersion, 3		; ???

; Record for contents of E3G_CHIPID
;
E3GChipID		record
    ECI_TYPE:3
    ECI_GENERATION:4
    ECI_MODEL:5
    ECI_VERSION E3GVersion:4
E3GChipID		end

; Record for contents of E3G_GLOBALDIS.  If the bit is present, that
; peripheral is DISABLED! If the bit is clear, the peripheral is enabled.
;
E3GGlobalDisFlags	record
    :4				; unused
    EGDF_DISDR:1		; DRAM controller
    EGDF_DISRTC:1		; Real-time clock
    EGDF_DISDC:1		; Display controller
    EGDF_DISKS:1		; Keyboard Scanner
    EGDF_DISPWM:1		; PWM (pulse width modulator)
    EGDF_DISSEP:1		; SEP (serial expansion port)
    EGDF_DISWDT:1		; WDT (watch dog timer)
    EGDF_DISU1:1		; UART 1
    EGDF_DISU0:1		; UART 0
    EGDF_DIST2:1		; TIMER 2
    EGDF_DIST1:1		; TIMER 1
    EGDF_DIST0:1		; TIMER 0
E3GGlobalDisFlags	end

;---------------------------------------------------------------------------
; Port Unit
;---------------------------------------------------------------------------
E3G_PINCFG0		equ	0f860h			; 8-bit
E3G_PINDIR0		equ	0f861h			; 8-bit
E3G_PINLTC0		equ	0f862h			; 8-bit
E3G_PINSTA0		equ	0f863h			; 8-bit

E3G_PINCFG1		equ	0f864h			; 8-bit
E3G_PINDIR1		equ	0f865h			; 8-bit
E3G_PINLTC1		equ	0f866h			; 8-bit
E3G_PINSTA1		equ	0f867h			; 8-bit

E3G_PINCFG2		equ	0f868h			; 8-bit
E3G_PINDIR2		equ	0f869h			; 8-bit
E3G_PINLTC2		equ	0f86ah			; 8-bit
E3G_PINSTA2		equ	0f86bh			; 8-bit

E3G_PINCFG3		equ	0f86ch			; 8-bit
E3G_PINDIR3		equ	0f86dh			; 8-bit
E3G_PINLTC3		equ	0f86eh			; 8-bit
E3G_PINSTA3		equ	0f86fh			; 8-bit

E3G_PINCFG4		equ	0f870h			; 8-bit
E3G_PINDIR4		equ	0f871h			; 8-bit
E3G_PINLTC4		equ	0f872h			; 8-bit
E3G_PINSTA4		equ	0f873h			; 8-bit

E3G_PINCFG5		equ	0f874h			; 8-bit
E3G_PINDIR5		equ	0f875h			; 8-bit
E3G_PINLTC5		equ	0f876h			; 8-bit
E3G_PINSTA5		equ	0f877h			; 8-bit

E3G_PINCFG6		equ	0f878h			; 8-bit

;---------------------------------------------------------------------------
; Display Controller Unit
;---------------------------------------------------------------------------

E3G_DCADDR		equ	0f900h
E3G_DCDATA		equ	0f901h
E3G_DCHVSWR		equ	0f902h
E3G_DCHVSWR_LO		equ	E3G_DCHVSWR
E3G_DCHVSWR_HI		equ	(E3G_DCHVSWR+1)
E3G_DCSAR2		equ	0f904h
E3G_DCSAR3		equ	0f905h
E3G_DCMODER		equ	0f906h
E3G_DCCKDIVR		equ	0f907h
E3G_DCCHARCSR		equ	0f908h			; 8-bit
E3G_DCCHARDR		equ	0f90ah			; 8-bit
E3G_DCPSTR		equ	0f90ch			; 8-bit
E3G_DCPATR0		equ	0f90eh
E3G_DCPATR1		equ	0f910h
E3G_DCPATR2		equ	0f912h
E3G_DCPATR3		equ	0f914h
E3G_DCPATR4		equ	0f916h
E3G_DCPATR5		equ	0f918h
E3G_DCPATR6		equ	0f91ah
E3G_DCPATR7		equ	0f91ch
E3G_DCPATR8		equ	0f91eh
E3G_DCPATR9		equ	0f920h
E3G_DCPATR10		equ	0f922h
E3G_DCPATR11		equ	0f924h

E3G_DisplayModeSelect	etype	byte
    	; LFS at the end of the FIRST scan line of frame
	;
    EDMS_FIRST_LFS_ONE_BPP	enum E3G_DisplayModeSelect, 0
    EDMS_FIRST_LFS_TWO_BPP	enum E3G_DisplayModeSelect, 1
    EDMS_FIRST_LFS_FOUR_BPP	enum E3G_DisplayModeSelect, 2
	
    	; LFS at the end of the LAST scan line of frame
	;
    EDMS_LAST_LFS_ONE_BPP	enum E3G_DisplayModeSelect, 4
    EDMS_LAST_LFS_TWO_BPP	enum E3G_DisplayModeSelect, 5
    EDMS_LAST_LFS_FOUR_BPP	enum E3G_DisplayModeSelect, 6

    ; Values for E3G_DCMODER register.
    ;
E3G_DCModeRFlags	record
    :1					; reserved
    EDCMRF_ENXCM:1			; 1 = Enable Display engine
    EDCMRF_INV:1			; inverts display
    :1					; reserved
    EDCMRF_MS E3G_DisplayModeSelect:4	
E3G_DCModeRFlags	end


    ; These are quasi-6845 combatible registers that are read and written
    ; via E3G_DCADDR and E3G_DCDATA.
    ;
E3G_DisplayControlRegisters	etype	byte
    EDCR_DCHTR			enum E3G_DisplayControlRegisters, 0
    EDCR_DCHDR			enum E3G_DisplayControlRegisters, 1
    EDCR_DCVTR			enum E3G_DisplayControlRegisters, 4
    EDCR_DCVDR			enum E3G_DisplayControlRegisters, 6
    EDCR_DCMSLAR		enum E3G_DisplayControlRegisters, 9
    EDCR_DCSAR1			enum E3G_DisplayControlRegisters, 12
    EDCR_DCSAR0			enum E3G_DisplayControlRegisters, 13

;---------------------------------------------------------------------------
; EMS
;---------------------------------------------------------------------------

E3G_EMSC0		equ	0fc10h			; 8-bit
E3G_EMSC1		equ	0fc12h			; 8-bit
E3G_EMSC2		equ	0fc14h			; 8-bit
E3G_EMSC3		equ	0fc16h			; 8-bit

E3G_EMST0		equ	0fc18h
E3G_EMST0_LO		equ	E3G_EMST0
E3G_EMST0_HI		equ	(E3G_EMST0+1)
E3G_EMST1		equ	0fc1ah
E3G_EMST1_LO		equ	E3G_EMST1
E3G_EMST1_HI		equ	(E3G_EMST1+1)
E3G_EMST2		equ	0fc1ch
E3G_EMST2_LO		equ	E3G_EMST2
E3G_EMST2_HI		equ	(E3G_EMST2+1)
E3G_EMST3		equ	0fc1eh
E3G_EMST3_LO		equ	E3G_EMST3
E3G_EMST3_HI		equ	(E3G_EMST3+1)

;---------------------------------------------------------------------------
; Pulse Width Modulator (PWM)
;---------------------------------------------------------------------------

E3G_PWCTRL		equ	0fc02h			; 8-bit
E3G_PWDUTY		equ	0fc00h			; 16-bit

;---------------------------------------------------------------------------
; Keyboard Scanner
;---------------------------------------------------------------------------

E3G_KBOUT		equ	0fc30h			; 8-bit
E3G_KBENABLE		equ	0fc32h			; 8-bit
E3G_KBIN		equ	0fc34h
E3G_KBIN_LO		equ	E3G_KBIN
E3G_KBIN_HI		equ	(E3G_KBIN+1)
E3G_KBINTEN		equ	0fc36h
E3G_KBINTEN_LO		equ	E3G_KBINTEN
E3G_KBINTEN_HI		equ	(E3G_KBINTEN+1)
E3G_KBCTRL		equ	0fc38h			; 8-bit

E3G_KBOutFlags		record
    EKBOF_KBCOL7:1
    EKBOF_KBCOL6:1
    EKBOF_KBCOL5:1
    EKBOF_KBCOL4:1
    EKBOF_KBCOL3:1
    EKBOF_KBCOL2:1
    EKBOF_KBCOL1:1
    EKBOF_KBCOL0:1
E3G_KBOutFlags		end

E3G_KBEnableFlags	record
    EKBEF_KBCEN7:1
    EKBEF_KBCEN6:1
    EKBEF_KBCEN5:1
    EKBEF_KBCEN4:1
    EKBEF_KBCEN3:1
    EKBEF_KBCEN2:1
    EKBEF_KBCEN1:1
    EKBEF_KBCEN0:1
E3G_KBEnableFlags	end

E3G_KBInFlags		record
    EKBIF_UNUSED:6			; A3 sets these all to 1
    EKBIF_KI9:1
    EKBIF_KI8:1
    EKBIF_KI7:1
    EKBIF_KI6:1
    EKBIF_KI5:1
    EKBIF_KI4:1
    EKBIF_KI3:1
    EKBIF_KI2:1
    EKBIF_KI1:1
    EKBIF_KI0:1
E3G_KBInFlags		end

E3G_KBIntEnFlags	record
    EKBIEF_UNUSED:6			; Should all be 0
    EKBIEF_KE9:1
    EKBIEF_KE8:1
    EKBIEF_KE7:1
    EKBIEF_KE6:1
    EKBIEF_KE5:1
    EKBIEF_KE4:1
    EKBIEF_KE3:1
    EKBIEF_KE2:1
    EKBIEF_KE1:1
    EKBIEF_KE0:1
E3G_KBIntEnFlags	end

E3G_KBMode		etype	byte
  EKBM_MODE0	enum   E3G_KBMode, 000b	; disables KBD INTR & debounce logic
					; purely S/W based scanning
  EKBM_MODE1	enum   E3G_KBMode, 001b	; Enable KBD INTR & debounce logic
					; INTR generated by key pressed
  EKBM_MODE2	enum   E3G_KBMode, 010b	; Debounce counter freezes until KB_HIT
  EKBM_MODE3	enum   E3G_KBMode, 011b	; S/W uses debounce counter to poll

E3G_KBCtrlFlags		record
    EKBCF_KBMODE E3G_KBMode:2		; Keyboard scanner mode
    EKBCF_KBDBTIME:6			; Debounce period, if applicable
E3G_KBCTRLFlags		end

;---------------------------------------------------------------------------
; Power Management
;---------------------------------------------------------------------------

E3G_PMSR		equ	0fca0h			; 8-bit
E3G_PMDCCR		equ	0fca2h
E3G_PMDCCR_LO		equ	E3G_PMDCCR
E3G_PMDCCR_HI		equ	(E3G_PMDCCR+1)
E3G_PMDTCR		equ	0fca4h			; 8-bit
E3G_PMEPMICR		equ	0fca6h
E3G_PMEPMICR_LO		equ	E3G_PMEPMICR
E3G_PMEPMICR_HI		equ	(E3G_PMEPMICR+1)
E3G_PMNMISR		equ	0fca8h
E3G_PMNMISR_LO		equ	E3G_PMNMISR
E3G_PMNMISR_HI		equ	(E3G_PMNMISR+1)
E3G_PMWUSR		equ	0fcaah
E3G_PMWUSR_LO		equ	E3G_PMWUSR
E3G_PMWUSR_HI		equ	(E3G_PMWUSR+1)
E3G_PMISR		equ	0fcach
E3G_PMISR_LO		equ	E3G_PMISR
E3G_PMISR_HI		equ	(E3G_PMISR+1)
E3G_PMSMCR		equ	0fcaeh			; 8-bit
E3G_PMITCR		equ	0fcb0h
E3G_PMITCR_LO		equ	E3G_PMITCR
E3G_PMITCR_HI		equ	(E3G_PMITCR+1)
E3G_PMIRLDS		equ	0fcb2h
E3G_PMIRLDS_LO		equ	E3G_PMIRLDS
E3G_PMIRLDS_HI		equ	(E3G_PMIRLDS+1)
E3G_PMDZCR		equ	0fcb4h
E3G_PMDZCR_LO		equ	E3G_PMDZCR
E3G_PMDZCR_HI		equ	(E3G_PMDZCR+1)

E3G_ExternalPmiTriggerDirection	etype	byte
    EEPTD_IGNORED		enum	E3G_ExternalPmiTriggerDirection, 0
    EEPTD_LOW_TO_HIGH		enum	E3G_ExternalPmiTriggerDirection, 1
    EEPTD_HIGH_TO_LOW		enum	E3G_ExternalPmiTriggerDirection, 2
    EEPTD_ANY_TRANSITION	enum	E3G_ExternalPmiTriggerDirection, 3

; Used for E3G_PMEPMICR to configure the transition type that triggers an
; event for the external PMIs
;
E3G_PMExternalPmiConfigFlags	record
    EPMEPCF_PMI7T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI6T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI5T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI4T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI3T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI2T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI1T	E3G_ExternalPmiTriggerDirection:2
    EPMEPCF_PMI0T	E3G_ExternalPmiTriggerDirection:2
E3G_PMExternalPmiConfigFlags	end

; Enumerates the actual PMI types.  The EAS refers to these bits as just
; PMINMI0 through PMINMI14 (for the PMNMISR register, for example).  I
; thought it'd be better to apply actual names to these things.  So, these
; record can be used for the values for:
;	E3G_PMNMISR		NMI source register
;	E3G_PMWUSR		Wake Up source register
;	E3G_PMISR		PMI status register
;
E3G_PmiTypes		record
    :1					; "Reserved"
    EPT_IDLE_TIMER_TIMEOUT:1		; Suspend timer timeout
    EPT_DOZE_TIMER_TIMEOUT:1		; Doze timer timeout
    EPT_DISPLAY_CONTROLLER_ACCESS:1	; Access to dpy controller regs
    EPT_UART1_ACCESS:1			; Access to UART 1 regs
    EPT_UART0_ACCESS:1			; Access to UART 0 regs
    EPT_KBD_SCAN_ACCESS:1		; Access to kbd scan regs
    EPT_8259_INTERRUPT:1		; Master 8259 INTR line
    EPT_EPMI7:1				; External PMI 7
    EPT_EPMI6:1				; External PMI 6
    EPT_EPMI5:1				; External PMI 5
    EPT_EPMI4:1				; External PMI 4
    EPT_EPMI3:1				; External PMI 3
    EPT_EPMI2:1				; External PMI 2
    EPT_EPMI1:1				; External PMI 1
    EPT_EPMI0:1				; External PMI 0 (debounced)
E3G_PmiTypes		end

E3G_PMDozeClockRate	etype	byte
    EPMDCR_SYSCLK		enum	E3G_PMDozeClockRate, 0
    EPMDCR_SYSCLK_DIV_2		enum	E3G_PMDozeClockRate, 1
    EPMDCR_SYSCLK_DIV_4		enum	E3G_PMDozeClockRate, 2
    EPMDCR_SYSCLK_DIV_8		enum	E3G_PMDozeClockRate, 3
    EPMDCR_SYSCLK_DIV_32	enum	E3G_PMDozeClockRate, 4
    
; Used for controlling the clocks in doze mode for E3G_PMDCCR.
;
E3G_PMDozeClockControlRegister	record
    EPMDCCR_DOZE:1			; On 0->1, CPUSTP and DOZFRQ happen
    EPMDCCR_CPUSTP:1			; 1 = DOZE stops CPU clocks
    EPMDCCR_LCDSTP:1			; 1 = DOZE stops LCD clocks
    EPMDCCR_CLKSSTP:1			; 1 = DOZE stops CLKS to most
					;     devices on the CPU, except dpy
    EPMDCCR_PWMSTP:1			; 1 = DOZE stops PWM clocks
    EPMDCCR_SEPSTP:1			; 1 = DOZE stops SEP clocks
    EPMDCCR_BIT9:1			; undefined.. 0 is okay
    EPMDCCR_UART1STP:1			; 1 = DOZE stops UART1 clocks
    EPMDCCR_UART0STP:1			; 1 = DOZE stops UART0 clocks
    EPMDCCR_TMR2STP:1			; 1 = DOZE stops TIMER2 clock
    EPMDCCR_TMR1STP:1			; 1 = DOZE stops TIMER1 clock
    EPMDCCR_TMR0STP:1			; 1 = DOZE stops TIMER0 clock
    EPMDCCR_WDSTP:1			; 1 = DOZE stops WDT clock
    EPMDCCR_DOZFRQ E3G_PMDozeClockRate:3 ; System clock divider
E3G_PMDozeClockControlRegister	end

E3G_PMSuspendModeControlRegister	record
    EPMSMCR_REQSUSP:1			; 1 = Enter suspend on next HLT inst
    :6
    EPMSMCR_IDLEEN:1			; 1 = Enable IDLE timer
E3G_PMSuspendModeControlRegister	end

;---------------------------------------------------------------------------
; Real Time Clock
;---------------------------------------------------------------------------

E3G_RTCADDR		equ	00070h
E3G_RTCDATA		equ	00071h

E3G_RealTimeStruct	struct	; the order of the field must not change
	ERTS_second	byte	; BCD format
	ERTS_minute	byte
	ERTS_hour	byte
	ERTS_day	byte
	ERTS_date	byte
	ERTS_month	byte
	ERTS_year	byte	; e.g. 97 = year 1997, 01 = year 2001
	ERTS_reserved	byte	; to align this structure by word size
E3G_RealTimeStruct	ends

E3G_RealTimeAlarmStruct	struct	; the order of the field must not change
	ERTAS_second	byte	; BCD format
	ERTAS_minute	byte	;
	ERTAS_hour	byte	;
	ERTAS_reserved	byte	; to align this structure by word size
E3G_RealTimeAlarmStruct	ends

E3G_RtcRegADvVal	etype	byte
  RRADV_enable	enum	E3G_RtcRegADvVal, 010b	; enable devide chain(RTC keeps
						; time)
  RRADV_reset	enum	E3G_RtcRegADvVal, 110b	; halt RTC( not affected by
						; RTCRST# )

E3G_RtcRegARsVal	etype	byte	; determines periodic interrupt rate
					; and freq
				; documented in 5.6.1 of E3G spec (v. 3.0)
  ERRARV_none	enum	E3G_RtcRegARsVal, 0	; disable periodic interrupt
  ERRARV_256SP	enum	E3G_RtcRegARsVal, 1
  ERRARV_128SP	enum	E3G_RtcRegARsVal, 2
  ERRARV_8K	enum	E3G_RtcRegARsVal, 3
  ERRARV_4K	enum	E3G_RtcRegARsVal, 4
  ERRARV_2K	enum	E3G_RtcRegARsVal, 5
  ERRARV_1K	enum	E3G_RtcRegARsVal, 6
  ERRARV_512	enum	E3G_RtcRegARsVal, 7
  ERRARV_256	enum	E3G_RtcRegARsVal, 8
  ERRARV_128	enum	E3G_RtcRegARsVal, 9
  ERRARV_64	enum	E3G_RtcRegARsVal, 10
  ERRARV_32	enum	E3G_RtcRegARsVal, 11
  ERRARV_16	enum	E3G_RtcRegARsVal, 12
  ERRARV_8	enum	E3G_RtcRegARsVal, 13
  ERRARV_4	enum	E3G_RtcRegARsVal, 14
  ERRARV_2	enum	E3G_RtcRegARsVal, 15

E3G_RtcRegAFlag		record	; RTC control flag A
  ERRAF_UIP:1		; 0= update will not occur in 244ms; 1= imminent update
  ERRAF_DV E3G_RtcRegADvVal:3
  ERRAF_RS E3G_RtcRegARsVal:4
E3G_RtcRegAFlag		end

E3G_RtcRegBFlag		record	; RTC control flag B
  ERRBF_SET:1		; 0= normal update, 1= stop updates for read/write ops
  ERRBF_PIE:1		; 0= disable periodic INTR, 1= enable periodic INTR
  ERRBF_AIE:1		; 0= disable alarm INTR, 1= enable alarm INTR
  ERRBF_UIE:1		; 0= disable update INTR, 1= enable update INTR
  ERRBF_SQWE:1		; always 0
  ERRBF_DM:1		; 0= BCD data format, 1= binary data format
  ERRBF_24_12:1		; 0= 12 hour mode, 1= 24 hour mode
  ERRBF_DSE:1		; 0= disable daylightsaving, 1= enable daylightsaving
E3G_RtcRegBFlag		end

E3G_RtcRegCFlag		record	; RTC control flag C ( clred after each read )
  ERRCF_IRQF:1		; PF or AF or UF
  ERRCF_PF:1		; 1= periodic INTR occured
  ERRCF_AF:1		; 1= alarm INTR occured
  ERRCF_UF:1		; 1= update INTR occured
  ERRCF_ZERO:4		; always 0
E3G_RtcRegCFlag		end

;
; reading register D will set RRDF_VRT to one
;
E3G_RtcRegDFlag		record	; RTC control flag D
  ERRDF_VRT:1		; 0= RTCRST# is low, data unreliable, 1= RTC ready
  ERRDF_ZERO:7		; always 0
E3G_RtcRegDFlag		end

E3G_RealTimeClockRAM	struct	; [RTC RAM image - use offsets to these fields]
	ERTCR_sec	byte	; 0-59
	ERTCR_secAl	byte	; alarm
	ERTCR_min	byte	; 0-59
	ERTCR_minAl	byte	; alarm
	ERTCR_hr		byte	; 0-23
	ERTCR_hrAl	byte	; alarm
	ERTCR_day	byte	; 1-7, SUN = 1
	ERTCR_date	byte 	; 1-31
	ERTCR_month	byte	; 1-12
	ERTCR_year	byte	; 0-99
	ERTCR_registerA	E3G_RtcRegAFlag
	ERTCR_registerB	E3G_RtcRegBFlag
	ERTCR_registerC	E3G_RtcRegCFlag
	ERTCR_registerD	E3G_RtcRegDFlag
	ERTCR_memory	label	byte	; RAM address 14-127 available
E3G_RealTimeClockRAM	ends

E3G_RTCADDRFlag	record
  ERTCADDRF_NMIEN:1	; 0= enable PORTB parity error to CPU NMI, 1= disable
  ERTCADDRF_ADDR:7	; RTC RAM address
E3G_RTCADDRFlag	end
