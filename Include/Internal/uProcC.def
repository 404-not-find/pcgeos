COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Include/Objects
FILE:		uProcC.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	doug	6/92		Initial version

DESCRIPTION:
	Class declaration for "UserClass", the UI library's process class

	$Id: uProcC.def,v 1.1 97/04/04 14:15:55 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__UPROCC

include ui.def

StartLibrary	ui

UserClass	class	GenProcessClass


;------------------------------------------------------------------------------
;	Private methods to UserClass
;------------------------------------------------------------------------------

MSG_USER_FREE_SPECIFIC_UI		message
;
;	Sent to ourselves to cause freeing of the specific UI library we
; use.  Sent delayed via queue to make sure that it hangs around long enough
; to not cause problems (Currently having a problem w/screens not actually
; shutting down, & retaining the implied grab, & therefore needing to
; be able to respond to mouse movement still in the queue after we've
; unconnected ourselves from IM).  Real solution would be to properly
; shut down the screens themselves.
;
; Pass:		cx	- handle of specific UI to free
; Return:	Nothing
;

;------------------------------------------------------------------------------
;	Methods
;------------------------------------------------------------------------------


MSG_USER_LAUNCH_APPLICATION		message
;
;	Starts up an application, with the UI as the owning geode.  If sent via
; queue, this approach to launching applications will minimize the number of
; locked blocks in the system heap, as the UI thread itself will not be running
; in any of its modules nor in a specific UI module, & will not have any object
; blocks locked.  This is a good thing, since PC/GEOS can only allocate fixed
; blocks from the start of the heap upwards.
;
;	Pass:
;		dx	- block handle of AppLaunchBlock
;
MSG_USER_USE_LIBRARY		message
;
;	Calls GeodeUseLibrary. This is mainly a hack, added because some
;	libraries make calls to the UI thread (for example, the OL library does
;	an ObjInstantiate, which calls the UI thread). The problem is that it
;	makes this call while it has the Geode semaphore, and the UI can
;	possibly be waiting on the semaphore, so we have a hot and juicy
;	deadlock. This routine is added so we can load the library from the UI
;	thread, and so avoid any of that nonsense. 
;
;	NOTE: If you call this routine using MF_CALL, BE SURE TO INVOKE IT FROM
;	      **FIXED** MEMORY, to avoid the problems outlined above in 
;	      MSG_USER_LAUNCH_APPLICATION.
;
;	Pass:
;		ss:bp - pointer to UserUseLibraryFrame
;
;	Returns:if error:
;			carry set
;			ax - error code (GeodeLoadError)
;
;		if no error:
;			carry clear
;			bp - handle of library
;

UserUseLibraryFrame	struct
	UULF_protocol	ProtocolNumber
	UULF_libname	FileLongName	;Library to load
UserUseLibraryFrame	ends

MSG_USER_UPDATE_SOUND_PARAMS		message
;
;	Sent to the UI thread to tell it to re-scan the .ini table for whatever
; params it needs.
;

MSG_USER_STARTUP_APPLS			message
;
;	Sent to the UI thread to tell it to start up the applications listed
;	in the .ini file.
;

MSG_USER_DELETE_STATE_FILES_DIALOG_RESPONSE	message
;
;	Internal message used for "delete state files?" dialog box.
;

MSG_USER_CONTINUE_STARTUP		message
;
;	Continue startup, after running Graphical Setup.
;

MSG_USER_FREE_SOUND_HANDLE		message
;
;	Sent from the Sound Library to the UI.  This message enables
;	the sound library to destroy sounds once they are played.  Since
;	the Sound library has no thread, and since you must be able to
;	block to free block, we handle this message for it.  This, in turn,
;	enables us to play single Notes and such through UserStandardSound.
;

MSG_USER_PROMPT_FOR_PASSWORD		message
;
;	Allows something (usually the power management driver) to cause the
;	UI to prompt for the password.
;
; Pass:
;	none
; Return:
;	none

MSG_USER_PASSWORD_ENTERED		message
;
;	Called after the password has been entered
;
; Pass:
;	cx:dx - trigger
; Return:
;	none

MSG_USER_IS_PASSWORD_DIALOG_ACTIVE	message
;
;	Tells whether the password dialog is on-screen or not
; Pass: nothing
; Return: ax - TRUE if password dialog is on-screen, false otherwise
; 

;------------------------------------------------------------------------------
;	Constants & Structures
;------------------------------------------------------------------------------

UserClass	endc

EndLibrary	ui


