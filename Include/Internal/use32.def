COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		32 bit utilities
FILE:		use32.def

AUTHOR:		Eric Weber, Jun 21, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	EW	6/21/96   	Initial revision


DESCRIPTION:
	Utilities for doing 32-bit operations in ESP
		
	$Id: use32.def,v 1.1 97/05/23 07:55:47 weber Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		use32
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Write the 32-bit prefix

PASS:		code to execute in 32-bit mode

PSEUDO CODE/STRATEGY:
	Using this macro will cause the next instruction to execute
	with 32-bit operands.  The effective address calculation will
	remain in 16-bit mode, however.

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	weber   	5/21/97   	Initial version
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
use32		macro	code
		.inst byte 66h
		code
		endm


COMMENT @----------------------------------------------------------------------

	clr1	location

	FUNCTION:
		Clears a register or memory location
	ARGUMENTS:
		location -- the byte or word to clear
	DESTROYS:
		flags
	EXPANDS TO:
		2-6 bytes 

-------------------------------------------------------------------------------@
clr1_32	macro 	location
    use32
    if	(.TYPE location) AND 10h  ; should be non-zero if register
	xor	location,location ;turn off all bits that are on
    else
	mov	location, 0	;else move a zero to clear it
        .inst word 0            ;second half of operand		
    endif
endm


COMMENT @----------------------------------------------------------------------

	clr	loc1 [,loc2[,loc3..........

	FUNCTION:
		Clears one or more register or memory location(s) of like size
	ARGUMENTS:
		loc* -- the bytes or words to clear
	DESTROYS:
		flags
	EXPANDS TO:
		depends on args passed	

-------------------------------------------------------------------------------@
clr32	macro 	loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9
	clr1_32	loc1
ifnb	<loc2>
	if	(.TYPE loc1) AND 10h  ; if loc1 = reg
		czr32	loc1, loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9
	else
		clr32	loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9
	endif
endif
endm


COMMENT @----------------------------------------------------------------------

	czr	zeroReg, dest1[,dest2[,dest3.....

	FUNCTION:
		Copies a register with value 0 into the passed locations
	ARGUMENTS:
		zeroReg -- a register with value zero
		dest* -- the bytes or words to clear
	DESTROYS:
		nothing (flags preserved)
	EXPANDS TO:
		depends on args passed	

-------------------------------------------------------------------------------@
czr32	macro 	zeroReg,dest1,dest2,dest3,dest4,dest5,dest6,dest7,dest8,dest9
ifb <dest1>
	ErrMessage	"czr expects multiple arguments."
else
    if	(.TYPE zeroReg) AND 10h  ; should be non-zero if register
	use32
	ifidn	<zeroReg>, <ax>
		ifidn	<dest1>, <dx>
			cwd			;if zeroReg = ax, loc
		else
			mov	dest1, zeroReg
		endif
	else
		mov	dest1, zeroReg
	endif
	ifnb <dest2>
		czr	zeroReg,dest2,dest3,dest4,dest5,dest6,dest7,dest8,dest9
	endif
    else
	ErrMessage	"Zero register not a register"
    endif
endif
endm

if 0	; As of 8/29/00, these are now recognized by ESP.EXE as real
	; instructions.
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		stosd
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	es:di++ = eax

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	weber   	5/08/97   	Initial version
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
stosd		macro
	use32
	stosw
endm

lodsd		macro
	use32
	lodsw
endm
endif	; if 0

movs_decode	macro	spec,reg,cls,s
	local	a
	a	instr	<cr0cr1cr2cr3dr0dr1dr2dr3dr4dr5dr6dr7tr6tr7>,<s>
if a
	;PrintE <s is > %(a)
	spec = -1
	if a lt 13
		; cr
		reg = (a-1)/3
		cls = 0
	elif a lt 37
		; dr
		reg = (a-13)/3
		cls = 1
	else
		; tr
		reg = (a-37)/3+6
		cls=4
	endif
else
	spec = 0
a	instr <eaxecxedxebxespebpesiedi>,<s>
	reg = (a-1)/3
	cls = 0
endif
	endm
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		movsp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	move special register to/from a general register

PASS:		destination, source

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	weber   	5/21/97   	Initial version
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
movsp		macro	dest, src
		local	srcspec,srcreg,srcclass
		local	destspec,destreg,destclass
	
	movs_decode	srcspec, srcreg, srcclass, <src>
	movs_decode	destspec, destreg, destclass, <dest>

	if srcspec and destspec
		.err <can't movs between special registers dest and src>
	elif srcspec
		;PrintE <src class is >, %(srcclass)
		;PrintE <src reg is >, %(srcreg)
		;PrintE <dest reg is >, %(destreg)
		; move from
		.inst	byte 0xf, 0x20+srcclass, 0xc0 or (srcreg shl 3) or destreg
	else
		;PrintE <dest class is >, %(destclass)
		;PrintE <dest reg is >, %(destreg)
		;PrintE <src reg is >, %(srcreg)
		.inst	byte 0xf, 0x22+destclass, 0xc0 or (destreg shl 3) or srcreg
	endif

	endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		pushfs, popfs, pushgs, popgs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Push/pop the FS/GS register

PASS:		nothing

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ayuen	6/27/00   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
pushfs		macro
	.inst	byte 0x0F, 0xA0
		endm

popfs		macro
	.inst	byte 0x0F, 0xA1
		endm

pushgs		macro
	.inst	byte 0x0F, 0xA8
		endm

popgs		macro
	.inst	byte 0x0F, 0xA9
		endm

;
; This is the high word of the CPU flags, as pushed by a 32-bit pushf
;
ExtendedCPUFlags	record
	:10
	ECPU_ID:1
	ECPU_VIP:1
	ECPU_VIF:1
	ECPU_AC:1
	ECPU_VM:1
	ECPU_RF:1
ExtendedCPUFlags	end

;
; The stack frame for a 16-bit real-mode interrupt
;
Interrupt16Stack	struct
	I16S_ip		word
	I16S_cs		word
	I16S_flags	word
Interrupt16Stack	ends

;
; The stack frame for a 32-bit real-mode interrupt
;
Interrupt32Stack	struct
	I32S_eip	dword
	I32S_cs		word
	I32S_unused	word
	I32S_eflags	dword
Interrupt32Stack	ends

;
; A data structure which is useful for rewriting a 16-bit interrupt
; stack into a 32-bit interrupt stack for use with a 32-bit iret.  The
; primary reason for doing such a thing would be to set the extended
; flags in the caller.
;
TransitionStack		struct
	TS_pad1		word
	TS_pad2		word
	TS_pad3		word
	TS_I16		Interrupt16Stack
TransitionStack		ends

