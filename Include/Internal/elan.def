COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	AMD Elan
FILE:		elan.def

AUTHOR:		Jim Guggemos, Nov 10, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	11/10/94   	Initial revision


DESCRIPTION:
	Contains nifty equates and such for the Elan registers.
		
    	** THIS FILE SHOULD BE COMPATIBLE WITH TASM AS IT IS USED BY
	   ROMDOS DRIVERS FOR GULLIVER **

	$Id: elan.def,v 1.1 97/04/04 14:16:56 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

; ---------------------------------------------------------------------------
;
; ELAN-specific values
;
; ---------------------------------------------------------------------------

ELAN_BANK_SIZE			equ	0x4000		; 16K bytes

; ---------------------------------------------------------------------------
;
; ELAN register set (ones that we use) and I/O addresses
;
;  These are accessed through the use of ELAN_INDEX and ELAN_DATA I/O
;  ports.
;
; ---------------------------------------------------------------------------

;
; Write the index of the register you want to ELAN_INDEX and then read or
; write the data through ELAN_DATA
;
ELAN_INDEX				equ	022h
ELAN_DATA				equ	023h

;
; Elan register indices that we use.  These names are right out of the
; manual, minus the word "REGISTER" and prefixed with "ELAN_".
;
ELAN_PROGRAMMABLE_RESUME_MASK_3		equ	008h	; R/W
ELAN_RESUME_STATUS			equ	009h	; R/W
ELAN_PCMCIA_CONTROL			equ	00ah	; R/W
ELAN_SMI_MASK				equ	040h	; R/W
ELAN_SMI_FUNCTION_ENABLE		equ	041h	; R/W
ELAN_SMI_STATUS				equ	043h	; R/W
ELAN_ROM_CONFIGURATION_2		equ	051h	; W/O
ELAN_IO_WAIT_STATE			equ	061h	; W/O
ELAN_MEMORY_WAIT_STATE			equ	062h	; W/O
ELAN_VERSION				equ	064h	; R/O
ELAN_ROM_CONFIGURATION			equ	065h	; R/W
ELAN_MEMORY_CONFIGURATION		equ	066h	; R/W
ELAN_MMSA_ADDRESS_EXTENSION_1		equ	067h	; R/W
ELAN_SHADOW_RAM_ENABLE_1		equ	068h	; R/W
ELAN_SHADOW_RAM_ENABLE_2		equ	069h	; R/W
ELAN_MMSA_B_ADDRESS_EXTENSION_1		equ	06ch	; R/W
ELAN_MMSA_B_ADDRESS_SELECT		equ	06dh	; R/W
ELAN_MMSA_B_ADDRESS_EXTENSION_2		equ	06eh	; R/W
ELAN_MISCELLANEOUS			equ	06fh	; R/W
ELAN_MMSA_DEVICE_SELECTION_1		equ	071h	; R/W
ELAN_MMSA_DEVICE_SELECTION_2		equ	072h	; R/W
ELAN_MMSB_DEVICE_SELECTION_2		equ	073h	; R/W
ELAN_MMSB_CONTROL			equ	074h	; R/W
ELAN_PROGRAMMABLE_ACTIVITY_MASK_1	equ	075h	; R/W
ELAN_CONTROL_B				equ	077h	; R/W
ELAN_PROGRAMMABLE_NMI_OR_SMI_ENABLE	equ	082h	; R/W
ELAN_HIGH_SPEED_MODE_TIMER		equ	083h	; R/W
ELAN_LOW_SPEED_MODE_TIMER		equ	084h	; R/W
ELAN_DOZE_MODE_TIMER			equ	085h	; R/W
ELAN_SLEEP_MODE_TIMER			equ	086h	; R/W
ELAN_SUSPEND_MODE_TIMER			equ	087h	; R/W
ELAN_CLOCK_CONTROL			equ	08fh	; W/O
ELAN_STATUS_0				equ	0a3h	; R/O
ELAN_STATUS_1				equ	0a4h	; R/O
ELAN_NMI_SMI_ENABLE			equ	0a5h	; R/W
ELAN_MMSA_SOCKET_SELECTION		equ	0a8h	; R/W
ELAN_MMSB_SOCKET_SELECTION		equ	0a9h	; R/W
ELAN_SMI_MMS_PAGE			equ	0aah	; R/W
ELAN_PMU_CONTROL_REGISTER_3		equ	0adh	; R/W
ELAN_PMU_CONTROL_REGISTER_2		equ	0afh	; R/W
ELAN_FUNCTION_ENABLE_2			equ	0b1h	; R/W
ELAN_INTERRUPT_STEERING			equ	0b2h	; R/W
ELAN_STATUS_READBACK			equ	0b3h	; R/O & R/W	REV B
ELAN_ROMDOS_CONFIGURATION		equ	0b8h	; R/W		REV B

; Other names
ELAN_WRITE_ENABLE_REG		equ	ELAN_MEMORY_WAIT_STATE
ELAN_MMSB_DEVICE_SELECTION	equ	ELAN_MMSB_DEVICE_SELECTION_2
ELAN_MMS_LINE_23		equ	ELAN_MMSA_B_ADDRESS_EXTENSION_1
ELAN_MMS_LINE_21_22_PP_0_3	equ	ELAN_MMSA_B_ADDRESS_EXTENSION_2
ELAN_MMS_LINE_21_22_PP_4_7	equ	ELAN_MMSA_ADDRESS_EXTENSION_1

; ---------------------------------------------------------------------------
;
; Broken out bits for some registers.
; 
;  Note these names are the same (with prefix ELAN_) as found in the Elan
;  manual.
;
; ---------------------------------------------------------------------------

; For ELAN_PROGRAMMABLE_RESUME_MASK_3
;
; NOTE: These are MASK bits.. so if they are set, they MASK OUT (DISABLE)
; the corresponding function.
;
ELAN_ICBL1A_MSK	equ	00000001b
ELAN_ICBL1B_MSK	equ	00000010b
ELAN_IRQ3_MSK	equ	00000100b	; IRQ3 can wake system
ELAN_IRQ4_MSK	equ	00001000b	; IRQ4 can wake system
ELAN_IRQ8_MSK	equ	00010000b	; IRQ8 can wake system
ELAN_RI_MSK	equ	00100000b	; Ring-in can make system
ELAN_ICA_RI_EN	equ	01000000b
ELAN_ICB_RI_EN	equ	10000000b

; For ELAN_RESUME_STATUS
ELAN_ICA_RI	equ	00000001b	; Woken up by ring-in from socket A
ELAN_ICB_RI	equ	00000010b	; Woken up by ring-in from socket B
ELAN_IRQ3	equ	00000100b	; Woken up by IRQ3
ELAN_IRQ4	equ	00001000b	; Woken up by IRQ4
ELAN_IRQ8	equ	00010000b	; Woken up by IRQ8
ELAN_RI		equ	00100000b	; Woken up by ring-in from int UART

; For ELAN_PCMCIA_CONTROL
ELAN_SCKTA16M	equ	00000001b	; Socket A can accept 16-bit mem acc
ELAN_SCKTB16M	equ	00000010b	; Socket B can accept 16-bit mem acc
ELAN_SCKTA16I	equ	00000100b	; Socket A can accept 16-bit I/O
ELAN_SCKTB16I	equ	00001000b	; Socket B can accept 16-bit I/O
; Other stuff here I don't care about

; For ELAN_SMI_MASK
ELAN_HDDMASK	equ	00000001b	; Re-enable SMI on HDD access (1F0-1F7)
ELAN_FDDMASK	equ	00000010b	; Re-enable SMI on FDD access (3F0-3F7)
ELAN_PIOMASK	equ	00000100b	; Re-enable SMI on prog. I/O port

; For ELAN_SMI_FUNCTION_ENABLE
ELAN_ENHD	equ	00000001b	; Enable HDD SMI
ELAN_ENFD	equ	00000010b	; Enable FDD SMI
ELAN_ENPIO	equ	00000100b	; Enable PIO SMI
ELAN_KBSMIEN	equ	00001000b	; Enable SMI on 8042 access
ELAN_RTCSMIEN	equ	00010000b	; Enable SMI on access to I/O addr 07xh

; For ELAN_SMI_STATUS
ELAN_HDMSI	equ	00000001b	; Hard Disk requested SMI
ELAN_FDSMI	equ	00000010b	; Floppy disk requested SMI
ELAN_PIOSMI	equ	00000100b	; PIO requested SMI
ELAN_KBSMI	equ	00001000b	; 8042 access caused SMI
ELAN_RTCSMI	equ	00010000b	; 07xh access caused SMI
ELAN_PMCSMI	equ	00100000b	; Power mode change cause SMI
ELAN_IRQ0SMI	equ	01000000b	; IRQ0 requested SMI

; For ELAN_VERSION
ELAN_VERSION_MASK	equ	01111111b	; Version part of this addr
ELAN_RSMI	equ	10000000b	; SMI active

; For ELAN_ROM_CONFIGURATION_2 register	(WRITE ONLY)
ELAN_ENROMA	equ	00000001b	; ROMCS# is active when addr is
					;   within A0000-AFFFF
ELAN_ROM16	equ	00000010b	; Select 16 bit ROM config
						
; For ELAN_IO_WAIT_STATE		(WRITE ONLY)
ELAN_FDWS0	equ	00000001b	; Floppy disk wait state (2-bit)
ELAN_FDWS1	equ	00000010b
ELAN_HDWS0	equ	00000100b	; Hard disk wait state (2-bit)
ELAN_HDWS1	equ	00001000b
ELAN_IOWS0	equ	00010000b	; Other bus I/O wait state (2-bit)
ELAN_IOWS1	equ	00100000b
ELAN_SPEED	equ	01000000b	; CPU default speed: 0=slow, 1=fast
ELAN_DMAMMS	equ	10000000b	; 0=disable MMS during DMA
						
; For ELAN_MEMORY_WAIT_STATE register	(WRITE ONLY)
ELAN_8BMWS0	equ	00000001b	; Wait states for 8 bit ISA memory
ELAN_8BMWS1	equ	00000010b	;  cycles (2-bit)
ELAN_16BMWS0	equ	00000100b	; Wait states for 16 bit ISA memory
ELAN_16BMWS1	equ	00001000b	;  cycles (2-bit)
ELAN_MISOUT	equ	00010000b	; Page-mode bank miss and time out
					;  wait state
ELAN_NFROMEN	equ	00100000b	; ROM BIOS write enable
ELAN_NFRDOSEN	equ	01000000b	; ROM DOS write enable

; For ELAN_ROM_CONFIGURATION register
ELAN_ENROMF	equ	00000001b	; ROMCS# active: F0000-FFFFF
ELAN_ENROME	equ	00000010b	; ROMCS# active: E0000-EFFFF
ELAN_ENROMD	equ	00000100b	; ROMCS# active: D0000-DFFFF
ELAN_ENROMC	equ	00001000b	; ROMCS# active: C0000-CFFFF
ELAN_SHADOW	equ	00010000b	; Shadow RAM enable
ELAN_PFWS	equ	00100000b	; Page mode first cycle WS select
ELAN_ENMMSA	equ	01000000b	; MMSA enable
ELAN_DISW	equ	10000000b	; Shadow RAM write protect (0=R/O)

; For ELAN_MEMORY_CONFIGURATION register
ELAN_MOD0	equ	00000001b	; Memory operation mode
ELAN_MOD1	equ	00000010b	;  (2-bit)
ELAN_MS0	equ	00000100b	; Memory bank configuration (3-bit)
ELAN_MS1	equ	00001000b	;
ELAN_MS2	equ	00010000b	;
ELAN_CGAEN	equ	00100000b	; Internal CSA enable
ELAN_ISAEN	equ	01000000b	; ISA enable / Local Bug disable
ELAN_LBCLKSEL	equ	10000000b	; Local Bus Clock Select (1=normal 386)

; For ELAN_MMSA_B_ADDRESS_SELECT register
ELAN_EMIO0	equ	00000001b
ELAN_EMIO1	equ	00000010b
ELAN_EMIO2	equ	00000100b
ELAN_EMIO3	equ	00001000b
ELAN_EMBA0	equ	00010000b
ELAN_EMBA1	equ	00100000b
ELAN_EMBA2	equ	01000000b
ELAN_EMBA3	equ	10000000b

; Setup's for the select register that are more useful

; The I/O address are based upon the base I/O address.  For example,
; for the 208h base, the page 0 I/O address is 208h, page 1 is 2208h,
; page 2 is 4208h ... page 7 is E208h.
ELAN_EMIO_208	equ	0
ELAN_EMIO_218	equ	ELAN_EMIO0
ELAN_EMIO_258	equ	(ELAN_EMIO2 or ELAN_EMIO0)
ELAN_EMIO_268	equ	(ELAN_EMIO2 or ELAN_EMIO1)
ELAN_EMIO_2A8	equ	(ELAN_EMIO3 or ELAN_EMIO1)
ELAN_EMIO_2B8	equ	(ELAN_EMIO3 or ELAN_EMIO1 or ELAN_EMIO0)
ELAN_EMIO_2E8	equ	(ELAN_EMIO3 or ELAN_EMIO2 or ELAN_EMIO1)

ELAN_EMBA_C0000	equ	0
ELAN_EMBA_C4000	equ	ELAN_EMBA0
ELAN_EMBA_C8000	equ	ELAN_EMBA1
ELAN_EMBA_CC000	equ	(ELAN_EMBA1 or ELAN_EMBA0)
ELAN_EMBA_D0000	equ	ELAN_EMBA2
ELAN_EMBA_D4000	equ	(ELAN_EMBA2 or ELAN_EMBA0)

; This bit must be set in I/O address for each page that is enabled
ELAN_PAGEEN	equ	80h

; For ELAN_MISCELLANEOUS register
ELAN_GATEA20	equ	00000001b	; A20GATE control
ELAN_RESCPU	equ	00000010b	; Transition from 0 to 1 resets CPU
ELAN_DMWS	equ	00000100b	; DMA Wait states
ELAN_MRDLY	equ	00001000b	; DMA MEMR Delay
ELAN_MMSZ0	equ	00010000b	; MMS memory range
ELAN_MMSZ1	equ	00100000b	;  (4 bits)
ELAN_MMSZ2	equ	01000000b	;  (4 bits)
ELAN_MMSZ3	equ	10000000b	;  (4 bits)

; For ELAN_MMSA_DEVICE_SELECTION registers
ELAN_SELECT_ROMDOS		equ	0
ELAN_SELECT_ON_BOARD_MMS	equ	1
ELAN_SELECT_PCMCIA		equ	2
ELAN_SELECT_MMS_BIOS		equ	3

; For ELAN_MMSB_CONTROL register
ELAN_ENMMSB	equ	00000001b	; Enable MMSB
ELAN_MMSABSEL	equ	00000010b	; Select MMSA/MMSB register info
					;  (0=MMSB, 1=MMSA)
ELAN_PGP1DIR	equ	00000100b	; PGP1 pin dir (0=in, 1=out)
ELAN_ENPMCIRQ0	equ	00001000b	; Enable IRQ0 during Doze mode
ELAN_IC_IOSEL	equ	00010000b	; 1->card in A is I/O card
ELAN_IC_IOEN	equ	00100000b	; IC card's I/O functions enabled
ELAN_NENLB2	equ	01000000b	; 1->BL2 to Sleep prevented
ELAN_NENLB4	equ	10000000b	; 1->BL4 to Suspend prevented

; For ELAN_CONTROL_B
ELAN_ENALIRQ	equ	00000100b	; Enable RTC alarm interrupt
ELAN_AUTLOW	equ	00001000b	; Enable CPU auto low-speed mode
ELAN_UART_EN	equ	00010000b	; Enable Internal UART
ELAN_UART_IOP	equ	00100000b	; int UART: (0)3F8-3FF (1)2F8-2FF
ELAN_UART_IR3	equ	01000000b	; int UART IRQ is 3
ELAN_UART_IR4	equ	10000000b	; int UART IRQ is 4

; For ELAN_PROGRAMMABLE_NMI_OR_SMI_ENABLE
ELAN_NOSE_RESU	equ	00000001b	; RESUME pin will generate NMI/SMI
ELAN_NOSE_ON	equ	00000010b	; NMI/SMI before On->Doze
ELAN_NOSE_DZ	equ	00000100b	; NMI/SMI before Doze->Sleep
ELAN_NOSE_SLP	equ	00001000b	; NMI/SMI before Sleep->Suspend
ELAN_NOSE_SUS	equ	00010000b	; NMI/SMI before Suspend->Off
ELAN_NOSE_BL1	equ	00100000b	; BL1 generates NMI
ELAN_NOSE_BL2	equ	01000000b	; BL2 generates NMI
ELAN_NOSE_BL3	equ	10000000b	; BL3 generates NMI

; for ELAN_STATUS_0		READ ONLY
ELAN_PG0IN	equ	00000001b	; PGP I/O pin 0 input data
ELAN_BL1IN	equ	00000010b	; Battery Low 1 (BL1) input data
ELAN_BL2IN	equ	00000100b	; BL2
ELAN_BL3IN	equ	00001000b	; BL3
ELAN_LIND0	equ	00010000b	; Last power mode (3 bits)
ELAN_LIND1	equ	00100000b
ELAN_LIND2	equ	01000000b
ELAN_SPEED_RO	equ	10000000b	; CPU speed INDICATOR (R/O) 1=high

; for ELAN_STATUS_1		READ ONLY
ELAN_PIND0	equ	00000001b	; Present power mode (3 bits)
ELAN_PIND1	equ	00000010b
ELAN_PIND2	equ	00000100b
ELAN_PG1IN	equ	00001000b	; PGP1 Iput Data
ELAN_ACIN	equ	10000000b	; ACIN input status

; power modes, for ELAN_LIND0-2 and ELAN_PIND0-2
; (Don't you think this lends itself to a natural numerical sequence? Not
;  the sequence 0, 4, 1, 2, 3??)
ELAN_MODE_FULL_ON	equ	000b
ELAN_MODE_ON		equ	100b
ELAN_MODE_DOZE		equ	001b
ELAN_MODE_SLEEP		equ	010b
ELAN_MODE_SUSPEND	equ	011b

; for ELAN_NMI_SMI_ENABLE
ELAN_NMI_RESUME	equ	00000001b	; RESUME generates NMI
ELAN_NMI_ON	equ	00000010b	; NMI On->Doze
ELAN_NMI_DZ	equ	00000100b	; NMI Doze->Sleep
ELAN_NMI_SLP	equ	00001000b	; NMI Sleep->Suspend
ELAN_NMI_SU	equ	00010000b	; NMI Suspend->Off
ELAN_NMI_BL1	equ	00100000b	; NMI generated by BL1
ELAN_NMI_BL2	equ	01000000b	; NMI generated by BL2
ELAN_NMI_BL3	equ	10000000b	; NMI generated by BL3

; for ELAN_MMSA_SOCKET_SELECTION and MMSB_SOCKET_SELECTION
ELAN_MAP_SOCK_A	equ	0
ELAN_MAP_SOCK_B	equ	1

; for ELAN_FUNCTION_ENABLE_2

ELAN_PIRQXEN	equ	00000001b	; PIRQ0/1: 0=IRQ3/6. 1=PIRQ0/1
ELAN_LCDDUEN	equ	00000010b	; Enable Dual Panel LCD mode
ELAN_XTALUSE	equ	00000100b	; Crystal: 0=tri-state X1OUT
					;	   1=14.318MHz out on X1OUT
ELAN_HSPLLFQ0	equ	00001000b	; High Speed PLL freq, 2-bit
ELAN_HSPLLFQ1	equ	00010000b	; High Speed PLL freq, 2-bit
ELAN_RDYSYNC	equ	00100000b	; Sync Ready pin to CPU clock

; for ELAN_HSPLLFQ0
ELAN_CPU_40MHZ	equ	00000000b	; 40-MHz 2x clock (20-Mhz)
ELAN_CPU_50MHZ	equ	00001000b	; 50-MHz 2x clock (25-Mhz)
ELAN_CPU_66MHZ	equ	00010000b	; 66-MHz 2x clock (33-Mhz)
ELAN_CPU_80MHZ	equ	00011000b	; 80-MHz 2x clock (40-Mhz)

; for ELAN_STATUS_READBACK (some R/O, some R/W.. some REV B)
ELAN_EXTSMISTA	equ	00000001b	; External SMI status (1=ext SMI)
ELAN_EXTSMISTE	equ	00000010b	; State of external SMI pin
ELAN_ENBROMCS	equ	00000100b	; ROMCS# output is an address
					; decode, not qualified with MEMR#
					; or MEMW#
ELAN_ENSELFRF	equ	00001000b	; Enable self-refresh DRAM when
					; CPUCLK is stopped
ELAN_FBROMWS0	equ	00010000b	; Fast ROMCS wait-state (2-bits)
ELAN_FBROMWS1	equ	00100000b
ELAN_ENFROMCS	equ	01000000b	; Enable fast ROMCS
ELAN_32KHZSTE	equ	10000000b	; State of 32KHz clock (high/low)

; for ELAN_ROMDOS_CONFIGURATION
ELAN_RDOSSIZ0	equ	00000001b	; ROMDOS size select (4 bits)
ELAN_RDOSSIZ1	equ	00000010b
ELAN_RDOSSIZ2	equ	00000100b
ELAN_RDOSSIZ3	equ	00001000b
ELAN_ENRDOSCS	equ	00010000b	; DOSCS# output is an address
					; decode, not qualified with MEMR#
					; or MEMW#
ELAN_FRDOSWS0	equ	00100000b	; Fast DOSCS wait-state (2-bits)
ELAN_FRDOSWS1	equ	01000000b
ELAN_ENFSTRDOS	equ	10000000b	; Enable fast DOSCS (ROMDOS)


; For ELAN_FBROMWS and ELAN_FRDOSWS
ELAN_FAST_WS_1	equ	11b
ELAN_FAST_WS_2	equ	10b
ELAN_FAST_WS_3	equ	01b
ELAN_FAST_WS_4	equ	00b
					
; For ELAN_MMSB_SOCKET_SELECTION
ELAN_MMS1P0	equ	00000001b	; MMSB page 0 maps to socket: 0=A, 1=B
ELAN_MMS1P1	equ	00000010b	; MMSB page 1 maps to socket: 0=A, 1=B
ELAN_MMS1P2	equ	00000100b	; MMSB page 2 maps to socket: 0=A, 1=B
ELAN_MMS1P3	equ	00001000b	; MMSB page 3 maps to socket: 0=A, 1=B
ELAN_SMIA22	equ	00010000b	; SMI MMS translate address A22 for SMI
ELAN_SMIA23	equ	00100000b	; SMI MMS translate address A23 for SMI
ELAN_SMIEN	equ	01000000b	; Enable SMI
ELAN_GENSMI	equ	10000000b	; If set, generate SMI instead of NMI

; for ELAN_PMU_CONTROL_REGISTER_2
ELAN_EXTIR0ACT	equ	00000001b	; Look it up, it's complicated
ELAN_BL1LOWSP	equ	00100000b	; Set CPU clock speed to low if BL1
ELAN_CHGFUSET	equ	01000000b	; High spd tmr units: 0=1/512s, 1=1/16s
ELAN_CHGON	equ	10000000b	; Low spd tmr units: 0=1/16s, 1=1/4s

; for ELAN_PMU_CONTROL_REGISTER_3
ELAN_ONCLK0	equ	00000001b	; Low Speed PLL mode CPU bit 0
ELAN_ONCLK1	equ	00000010b	; Low Speed PLL mode CPU bit 1
ELAN_MAINOFF	equ	00000100b	; 1: High speed off in lower speed mode
ELAN_ENACIN	equ	00010000b	; 1: ACIN is activity
ELAN_IRQ0SMIEN	equ	01000000b	; 1: IRQ0 generates SMI
					
; for ELAN_PROGRAMMABLE_ACTIVITY_MASK_1
;
; NOTE: These are MASK bits.. so if they are set, they MASK OUT (DISABLE)
; the corresponding function.
;
; 	(DRQx = DMA request channel x)
;
ELAN_DRQ57_MSK	equ	00000001b	; DRQ5-7 counted as activity (if 0)
ELAN_DRQ1_MSK	equ	00000010b	; DRQ1 counted as activity (if 0)
ELAN_DRQ2_MSK	equ	00000100b	; DRQ2 counted as activity (if 0)
ELAN_DRQ3_MSK	equ	00001000b	; DRQ3 counted as activity (if 0)
ELAN_KB_MSK	equ	00010000b	; Keyboard counted as activity (if 0)
ELAN_MMS_MSK	equ	00100000b	; MMS counted as activity (if 0)
ELAN_ACIN_MSK	equ	01000000b	; ACIN counted as activity (if 0)
ELAN_INT_MSK	equ	10000000b	; IRQ2-15 counted as activity (if 0)

; ---------------------------------------------------------------------------
;
; Elan specific macros
;
; ---------------------------------------------------------------------------

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		ELAN_SET_PAGE_REGISTER

DESCRIPTION:	Sets the page register for a given page.

ARGUMENTS:
	PAGE	= page number from 0 to 7
	VALUE	= 8-bit value to be set, or an 8-bit register
	[TRASH]	= if not blank, then dx and al will be trashed

CAVEATS:
	ELAN_BASE_REGISTER needs to be set to the base I/O register
	(for example, 208h).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ELAN_SET_PAGE_REGISTER		macro	PAGE, VALUE, TRASH
	local	highNybble
	
	highNybble = PAGE * 2

ifb <TRASH>
	push	dx
ifdif <VALUE>, <al>
	push	ax
endif
endif
    
ifdif <VALUE>, <al>
	mov	al, VALUE
endif

	mov	dx, (highNybble shl 12) or ELAN_BASE_REGISTER
	out	dx, al

ifb <TRASH>
ifdif <VALUE>, <al>
	pop	ax
endif
	pop	dx
endif

endm
	
	
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		_OUT <immediate port>, <immediate value>, [trash]

DESCRIPTION:	Does an out instruction but takes care of moving the port
		into dx if it is > 255, etc.
		Only works with 8-bit values.

ARGUMENTS:
	port	= port (8-bit or 16-bit)
	value	= 8-bit immediate value to be set, or 8-bit register
		  (if al, it is the fastest)
	[TRASH]	= if not blank, then dx and al may be trashed
		  Specifically, dx is trashed if PORT > 255.
		  al is trashed if value is not al.

CAVEATS:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
	
_OUT				macro	PORT, VALUE, TRASH
	
ifb <TRASH>
    ifdif <VALUE>, <al>
	push	ax
    endif
endif
	
ifdif <VALUE>, <al>
	mov	al, VALUE
endif

if PORT gt 255
    ifb <TRASH>
    	push	dx
    endif
    	
	mov	dx, PORT
	out	dx, al
    
    ifb <TRASH>
    	pop	dx
    endif
else
	out	PORT, al
endif

ifb <TRASH>
    ifdif <VALUE>, <al>
	pop	ax
    endif
endif

endm
    
	
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		_IN <immediate port>, [trash]

DESCRIPTION:	Does an in instruction but takes care of moving the port
		into dx if it is > 255, etc.
		works only with 8-bit values.

ARGUMENTS:
	port	= port (8-bit or 16-bit)
	[TRASH]	= if not blank, then dx may be trashed if port > 255

	Returns al as the value from the port

CAVEATS:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
	
_IN				macro	PORT, TRASH
	
if PORT gt 255
    ifb <TRASH>
    	push	dx
    endif
    	
	mov	dx, PORT
	in	al, dx
    
    ifb <TRASH>
    	pop	dx
    endif
else
	in	al, PORT
endif

endm
    


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ElanSaveIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO USAGE:	ElanSaveIndex [trashAX]

SYNOPSIS:	Saves the Elan Index Register on the stack.
		Restore index with ElanRestoreIndex.

ARGUMENTS:	If trashAX is not blank, then ax is trashed.

RETURNED:	nothing

DESTROYED:	AX if trashAX is not blank

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	10/ 3/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ElanSaveIndex			macro	TRASH_AX
    ifb <TRASH_AX>
    	push	ax
	in	al, ELAN_INDEX
	XchgTopStack	ax
    
    else
    	in	al, ELAN_INDEX
	push	ax
    
    endif
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ElanRestoreIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO USAGE:	ElanRestoreIndex [trashAX]

SYNOPSIS:	Restores the Elan Index Register from the stack.
		Save with ElanSaveIndex.

ARGUMENTS:	If trashAX is not blank, then ax is trashed.

RETURNED:	nothing

DESTROYED:	AX if trashAX is not blank

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	10/ 3/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ElanRestoreIndex		macro	TRASH_AX
    ifb <TRASH_AX>
    	XchgTopStack	ax
	out	ELAN_INDEX, al
	pop	ax
    
    else
    	pop	ax
	out	ELAN_INDEX, al
    endif
endm
