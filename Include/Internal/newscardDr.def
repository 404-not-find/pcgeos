COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		NewsCard Driver
FILE:		nwscrdDr.def

AUTHOR:		Jennifer Wu, Jul 30, 1993

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jwu	7/30/93		Initial revision


DESCRIPTION:
	This contains all the definitions necessary to use and/or create
	a driver for the NewsCard.
		
	$Id: newscardDr.def,v 1.1 97/04/04 14:16:41 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
DefDriver Internal/zpcmDr.def

NEWSCARD_PROTO_MAJOR	equ	PCMCIA_PROTO_MAJOR
NEWSCARD_PROTO_MINOR	equ	PCMCIA_PROTO_MINOR

NewsCardDriverFunction	etype	word, PCMCIAFunction, 2

;-----------------------------------------------------------------------------
;   		NEWSCARD ROUTINES
;-----------------------------------------------------------------------------

DR_NEWSCARD_REMOVE	enum	NewsCardDriverFunction
;	DESCRIPTION:	Shuts down the EMBARC app and let's the user remove
;			the NewsCard.
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROY: nothing

DR_NEWSCARD_INIT	enum	NewsCardDriverFunction
;	DESCRIPTION:	disable superflag and set time of newscard
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROY: nothing

DR_NEWSCARD_EXIT	enum	NewsCardDriverFunction
;	DESCRIPTION:	exit the newscard driver
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROY: nothing

DR_NEWSCARD_CMD_BUFFER_MSG_CMD		enum	NewsCardDriverFunction
;	DESCRIPTION:	Send command to mark,lock,unlock,delete  the
;			specified message in 
;		the NewsCard as read.
;	PASS:
;		ah	-> message ID byte 3 (MSB)
;		al	-> message ID byte 2
;		bh	-> message ID byte 1
;		bl	-> message ID byte 0 (LSB)
;		cl	-> message sequence number
;		dl	-> CommandID
;	RETURN:
;		nothing
;	DESTROY: nothing


DR_NEWSCARD_READ_MESSAGE		enum	NewsCardDriverFunction
;	DESCRIPTION:	Get the text, file information, or binary data from the 
;		specified message from the NewsCard.  (NOTE:  Caller must
;		free the block that is returned.)
;	PASS:
;		ah	-> message ID byte 3 (MSB)
;		al	-> message ID byte 2
;		bh	-> message ID byte 1
;		bl	-> message ID byte 0 (LSB)
;		cl	-> message sequence number
;	RETURN:
;		carry set if message no longer exists
;		else
;		   ^lbx	<- block containing either:
;				the text of the message
;	DESTROY: nothing

DR_NEWSCARD_GET_MESSAGE_SUMMARY		enum	NewsCardDriverFunction
;	DESCRIPTION:	Get the summary of a given message.  This summary
;		will include information such as date/timereceived, locked,
;		read/unread.  If RMF_SUMMARY is specified, information about
;		the origin, subject, message/file will also be returned.
;	PASS:
;		ah	-> message ID byte 3 (MSB)
;		al	-> message ID byte 2
;		bh	-> message ID byte 1
;		bl	-> message ID byte 0 (LSB)
;		cl	-> message sequence number
;		ch	-> ReadMessageFlag (RMF_SUMMARY or RMF_INFO)
;		dx:bp	-> MessageInfo buffer
;	RETURN:
;		carry set if message no longer exists
;		else
;		  ^lbx	<- block containing origin, sender... if RMF_SUMMARY
;			 	else bx contains garbage
;		  dx:bp	<- MessageInfo buffer filled in
;	DESTROY: nothing

DR_NEWSCARD_CMD_BUFFER_SIMPLE_CMD	enum	NewsCardDriverFunction
;	DESCRIPTION:	Get the total number of messages currently
;		stored on the NewsCard.
;	PASS:	dl = CommandID
;		if set time:
;			ah = year
;			al = month
;			bh = day
;			bl = hours
;			cl = minutes
;	RETURN:		carry set if failed
;		cx = num messages(if GetNumMessages) or cl = error code
;	DESTROY:	nothing	

DR_NEWSCARD_CREATE_MESSAGE_LIST		enum	NewsCardDriverFunction
;	DESCRIPTION:	Create a sorted list of the message IDs in order
;		of oldest message first, using MessageListEntry as its
;		structure
;			
;	PASS:
;		nothing
;	RETURN:
;		^lbx:si	<- message list
;	DESTROUY:	nothing

DR_NEWSCARD_CHECK_FOR_NEW_PAGES		enum	NewsCardDriverFunction
;	DESCRIPTION:	Check the NewsCard to see if new pages has been
;		received.  This is the polling entry point.
;	PASS:
;		nothing
;	RETURN:
;		carry set if a new page has been received
;	DESTROY: nothing

DR_NEWSCARD_FIND_ALERT	enum	NewsCardDriverFunction
;	DESCRIPTION:	see if we need to alert for new message
;	PASS	:	cx:dx = last unread time
;	RETURN	:	carry set if need to alert
;	DESTROY	:	nothing

DR_NEWSCARD_TIME_INTERVAL	enum	NewsCardDriverFunction
;	DESCRIPTION:	see if the given timestamp is older than 15 minutes
;	PASS	:	dx:si = msg timestamp
;	RETURN	:	carry set if > 15 minutes
;	DESTROY :	nothing

DR_NEWSCARD_BATTERY_STATUS	enum	NewsCardDriverFunction
;	DESCRIPTION:	check if battery is dead
;	PASS	:	nothing
;	RETURN	:	carry set if battery is dead
;	DESTROY :	nothing


;-----------------------------------------------------------------------
;		NEWSCARD ADDRESS OFFSETS FOR NEWSCARD MEMORY MAP
;-----------------------------------------------------------------------

COMMAND_BUFFER_OFFSET	equ	0c00h
RESPONSE_BUFFER_OFFSET	equ	1000h

RBRR_OFFSET		equ	0ffdh
RBOR_OFFSET		equ	0ffeh
MBOX_OFFSET		equ	0fffh

PREVENT_AAH_READ_OFFSET	equ	1000h

DIRECTORY_TABLE_OFFSET	equ	13d0h
ANCHOR_TABLE_OFFSET	equ	1400h

MESSAGE_MEMORY_OFFSET	equ	1c00h

TOP_DEL_LIST_OFFSET	equ	13d4h	;also top of read
END_DEL_LIST_OFFSET	equ	13dch

TOP_UNREAD_OFFSET	equ	13d8h

READ_LOW_OFFSET		equ	13e0h
READ_HIGH_OFFSET	equ	13e4h
READ_ANCHOR_OFFSET	equ	13e8h
UNREAD_LOW_OFFSET	equ	13ech
UNREAD_LOW_ANCHOR_OFFSET equ	13f0h
UNREAD_HIGH_OFFSET	equ	13f4h
UNREAD_HIGH_ANCHOR	equ	13f8h
LOCKED_OFFSET		equ	13fch

OFFSET_DIFFERENCE	equ	4

;---------------------------------------------------------------------
;		NEWSCARD STATUS STUFF
;---------------------------------------------------------------------

CLEAR_RBOR		equ	170	;aah
BSY_ASSERTED		equ	55h

BusyReason	record			; Rdy/Bsy Reason Register (RBRR) value
					;  indicating reason for NewsCard
					;  asserting busy signal
	BR_PROTECTION_ON:1
	BR_PAGER_DISABLED:1
	BR_RESERVED:1	
	BR_RAM_ACCESSED:1
	BR_SUPERFLAG_OCCURRED:1
	BR_HARDWARE_RESET:1
	BR_PROCESSED_COMMAND:1
	BR_PAGE_RECEIVED:1

BusyReason	end

;----------------------------------------------------------------------
;		NEWSCARD COMMAND RELATED STUFF
;----------------------------------------------------------------------

END_OF_COMMAND		equ	255		; ffh
END_OF_COMMAND_GROUP	equ	170		; aah

NewsCardCommand		struct

	NCC_commandID		byte		; command identifier
	NCC_argCount1		byte		; high byte of arg count	
	NCC_argCount0		byte		; low byte of arg count
	NCC_cmdByte1		byte 		; space for the command params
	NCC_cmdByte2		byte		;  and the end of command
	NCC_cmdByte3		byte		;  delimiters
	NCC_cmdByte4		byte		; 10 bytes is the maximum
	NCC_cmdByte5		byte		;  amount of space we will need
	NCC_cmdByte6		byte		;  but the bytes are separated
	NCC_cmdByte7		byte		;  here for easier access
	NCC_cmdByte8		byte
	NCC_cmdByte9		byte
	NCC_cmdByte10		byte

NewsCardCommand		ends

NewsCardResponse	struct
	
	NCR_commandID		byte		; command identifier
	NCR_argCount1		byte		; high byte of arg count
	NCR_argCount0		byte		; low byte of arg count
	NCR_responseType	byte		; ACK or NAK to indicate success
						;  or failure
	NCR_byte1		byte 		; space for the return params
	NCR_byte2		byte		;  and the end of command 
	NCR_byte3		byte		;  delimiters
	NCR_byte4		byte		; 8 bytes is the maximum 
	NCR_byte5		byte		;  amount of space we will need 
	NCR_byte6		byte		;  but the bytes are separated
	NCR_byte7		byte		;  in the structure for easier
	NCR_byte8		byte		;  access to each byte

	NCR_byte9		byte
	NCR_byte10		byte

NewsCardResponse	ends

SERIAL_NUMBER_LENGTH	equ	10

NEWSCARD_SUCCESS	equ	06h
NEWSCARD_FAILURE	equ	15h	

;
; Command identification codes.
;

CommandID	etype	word,0,1

CID_MARK_MSG_AS_READ_CMD_ID	enum	CommandID,	01h
CID_DELETE_MESSAGE_CMD_ID	enum	CommandID,	02h
CID_LOCK_MESSAGE_CMD_ID		enum	CommandID, 	03h
CID_UNLOCK_MESSAGE_CMD_ID	enum	CommandID,	04h
CID_SET_TIME_CMD_ID		enum	CommandID,	31h
CID_DISABLE_SUPERFLAG_CMD_ID	enum	CommandID,	51h
CID_GET_NUM_UNREAD_MSG_CMD_ID	enum	CommandID,	81h
CID_GET_SERIAL_NUMBER_CMD_ID	enum	CommandID,	23h

;
; Argument counts.
;
NUM_BYTES_FOR_TIME		equ	5
NUM_BYTES_FOR_MSG_ID		equ	5
NUM_BYTES_FOR_DELETE_OPTIONS	equ	8

;
; Error codes that accompany unsuccessful responses to NewsCard commands.
; (There's more but these are all that we care about.)
;
SEQ_NO_MISMATCH		equ	03h
NON_EXISTENT_MSG	equ	04h
MSG_ALREADY_READ	equ	05h
MSG_LOCKED		equ	06h
LOCK_LIMIT_EXCEEDED	equ	07h
MSG_ALREADY_UNLOCKED	equ	0fh
PAGER_IS_DEAD		equ	12h
NO_BATTERY		equ	0ffh

ReadMessageFlag		etype	byte, 0, 1
	RMF_INFO			enum ReadMessageFlag
	RMF_SUMMARY			enum ReadMessageFlag


MSG_IS_MSG		equ	0
MSG_IS_FILE		equ	1
MSG_IS_UNREAD		equ	0
MSG_IS_READ		equ	1
MSG_IS_UNMARKED		equ	0
MSG_IS_MARKED		equ	1

BYTES_PER_NODE		equ	64
BYTES_PER_KBYTE		equ	1024

PAGE_SIZE		equ	4096

;-----------------------------------------------------------------------
;		NEWSCARD MESSAGE RELATED STUFF
;-----------------------------------------------------------------------

HAVE_NEW_PAGE		equ	1	; if this is changed, must change
NO_NEW_PAGE		equ	0	;  code in NewsCardCheckForNewPages

NEWSCARD_MARKED_STORAGE_SIZE	equ	60	; in Kbytes  (1/2 total memory)

MessageAddr	struct		; Structure of pointer to messages
	MA_msgID3	byte	; MSB of message address
	MA_msgID2	byte
	MA_msgID1	byte
	MA_msgID0	byte	; LSB of message addresss
MessageAddr	ends

MessageID	struct		; Structure of message identifiers
	
	MID_msgAddr	MessageAddr	; location of message in the NewsCard
	MID_seqNum	byte		; version number of the message

MessageID	ends


MessageTypeFlag	record

	MTF_START_DELETE_LIST:1
	MTF_UNREAD_LIST:1
	MTF_PARTITION:1
	MTF_END_DELETE_LIST:1
	MTF_ANCHOR:1
	MTF_READ_STATUS:1		; set if message has been read
	MTF_PERSISTANCE:1
	MTF_LOCKED:1			; set if message is locked

MessageTypeFlag	end

TimeStamp	struct
	TS_year		byte
	TS_month	byte
	TS_day		byte
	TS_hours	byte
	TS_minutes	byte
TimeStamp	ends

AdminInfo	record
	:7
	AI_SUBADDRESS:1
AdminInfo	end

MessageInfo	struct			; The 64 byte message information block
					; for messages in the NewsCard.
	MI_nextMsg		MessageAddr
	MI_prevMsg		MessageAddr
	MI_reserved		byte
	MI_seqNum		byte		; message version
	MI_errors		word
	MI_nextDel		MessageAddr
	MI_prevDel		MessageAddr
	MI_startMsgData		MessageAddr
	MI_endMsgData		MessageAddr
	MI_startNoteData	MessageAddr
	MI_endNoteData		MessageAddr
	MI_anchor		word
	MI_msgTypeFlags		MessageTypeFlag
	MI_deletionSegment	byte      ;del list segment that it resides on
	MI_msgLength		word		; length of message in nodes
	MI_noteLength		word		; length of note in nodes
	MI_function		byte			
	MI_timestamp		TimeStamp
	MI_info			AdminInfo
	MI_title		byte 12 dup (0)
	MI_spare		byte
MessageInfo	ends

MessageSummaryInfo	struct
	MSI_timestamp		TimeStamp
	MSI_status		MessageTypeFlag
MessageSummaryInfo	ends

MsgType		record
	MT_ALERT:1
	MT_BINARY:1
	MT_NON_EMBARC:1
	MT_INFO_SERVICE:1
	:3
	MT_ALERT_SAME:1
MsgType		end

HeaderInfo	record
	HI_ALIAS :1
	HI_CONTENT :1
	HI_SUBJECT_LINE :1
	HI_DELIVERY :1
	HI_REPEAT :4
	HI_TYPE :3
	HI_ENCODE :1
	HI_COMPRESSION :1
	HI_FORWARD :1
	HI_MSG_NOTF :1
	HI_API :1
HeaderInfo	end

EmbarcHeader	struct
	EH_msgType	MsgType
	EH_embarcSeqNum	byte
	EH_k		byte
	EH_n		byte
	EH_length	word
	EH_info		HeaderInfo
	EH_partialSeq	byte
	EH_apiID	word
	EH_origin	char 15 dup (0)
EmbarcHeader	ends


MessageDataInfo	struct		;data node
					
	MDI_nextNode		MessageAddr
	MDI_prevNode		MessageAddr
	MDI_reserved		byte
	MDI_seqNum		byte
	MDI_embarcHeader	EmbarcHeader 
	MDI_embarcData		byte 28 dup (0)	;starts with subject length

MessageDataInfo ends

MessageListRecord	record
	MLR_BINARY:1
	MLR_SUBADDRESS:1
	MLR_READ:1
	:5
MessageListRecord	end

DeliveryInstruction	struct
	DI_delivery	byte 9 dup (0)
DeliveryInstruction 	ends

MessageListEntry	struct
	MLE_uniqueID	byte 9 dup (0)
	MLE_messageID	MessageID		;address
	MLE_timestamp	TimeStamp
	MLE_errorCount	word
	MLE_k		byte
	MLE_n		byte
	MLE_embarcSeq	byte
	MLE_partialSeq	byte
	MLE_anchor	word
	MLE_incomplete	byte	;number of packets we have if < n
				;only used on first packet of messages
	MLE_headerInfo	HeaderInfo
	MLE_record	MessageListRecord
MessageListEntry	ends


OriginString	struct
	OS_origin	byte 15 dup ()
OriginString	ends


;-----------------------------------------------------------------------
;		NEWSCARD CONSTANTS
;-----------------------------------------------------------------------
TOTAL_ANCHORS		equ	512
ANCHOR_SIZE		equ	4
NEXT_IS_NULL	equ	0ffffffffh		;next in deletion list is null

TOTAL_NODES		equ	1936
MAX_NUM_OF_MSG		equ	968

MINUTES_PER_HOUR	equ	60
TIME_MISS_BOUND		equ	10

SIZE_OF_ORIGIN		equ	15
MAX_SUBJECT_LINE	equ 	128

INITIALIZED_UNIQUE_ID	equ	0ffffh		;initial unique id for comparison
INITIALIZED_K		equ	0		;initial k for comparison

BLOCKS_TO_COPY		equ	3

NC_NUMBER_OF_SUMMARY_NODES	equ 3

SINGLE_PACKET		equ	1

SIZE_OF_SUBJECT_LINE_LENGTH	equ	1
SIZE_OF_MESSAGE_LENGTH_FIELD	equ	2
SIZE_OF_DELIVERY_LENGTH		equ	1
SIZE_OF_DELIVERY_INST		equ 	9

SIZE_OF_EMBARC_DATA_IN_FIRST_NODE	equ	28

DATA_NODE_DATA_SIZE	equ 	54

REPLACED_BY_DATA_NODE	equ	1

SIZE_DATA_NODE_HEADER	equ	10

INITIAL_CALL	equ	1		;flag for enum call back to tell
					;if that was the first call to callback
					;if it is set to 0, code needs to be
					;changed

ERROR_ALLOWED	equ	10

API_TXT_BIN	equ	10

TIME_INTERVAL	equ	15

HOURS_PER_DAY	equ	24

MONTHS_IN_YEAR	equ	12

;we wait for about 15 seconds for the RBOR to go 55h
NC_WAIT_COUNTER	equ	10

NC_SLEEP_WAIT	equ	900
NC_SLEEP_COUNT	equ	1

;we wait a total of 16.7 seconds to see if battery is dead
NC_BUSY_COUNTER equ	1000
NC_BUSY_SLEEP	equ	1


;-----------------------------------------------------------------------
;		NEWSCARD MACROS 
;-----------------------------------------------------------------------

;
; Convert a year of the form 1993 in AX to 93 in AH.
;  Divide the year by 100 and use the remainder.
;
ConvertLongYearToShort	macro	
	push	cx
	mov	cl, 100
	div	cl			; ah gets the remainder
	pop	cx
endm

;
; Convert a year of the form 93 in AH to 1993 in AX.
; (Years are allowed to range from 1993 to 2089.)
;	If the year is >= 90 add 1900 else add 2000 to it.
;
ConvertShortYearToLong	macro	
	push	cx
	mov	cx, 1900
	cmp	ah, 90
	jge	addYear
	mov	cx, 2000
addYear:
	clr	al
	xchg	ah, al		
	add	ax, cx
	pop	cx
endm








