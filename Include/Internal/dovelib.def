COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996.  All rights reserved.

PROJECT:	Dove
MODULE:		Hardware Library
FILE:		dovelib.def

AUTHOR:		Allen Yuen, Nov 13, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	allen	11/13/96   	Initial revision

DESCRIPTION:

	Dove Hardware Library interface.
		
	$Id: dovelib.def,v 1.1 97/04/04 14:13:15 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

StartLibrary	dovelib

global	DoveRegisterSlowModeWakeupHandler:far
;	Desc:	Register the handler for slow-mode wakeup
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterSlowModeWakeupHandler:far
;	Desc:	Unregister the handler for slow-mode wakeup
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterSuspendLockResumeHandler:far
;	Desc:	Register the handler for suspend-lock resume
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterSuspendLockResumeHandler:far
;	Desc:	Unregister the handler for suspend-lock resume
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetEarphoneMicSwitchNotify:far
;	Desc:	Register notification for the EARPHONE-MIC switch
;
;	Pass:	if notification routine
;			ax	= 0
;			cx:dx	= fptr to handler (called from interrupt code):
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, bx, cx, dx, si, di, es
;		if notification message
;			ax	= notification message
;			cx:dx	= optr to receive message (or cx = process
;				  handle, dx = other data to be passed with
;				  message in si)
;				  Notification message API:
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, cx, dx, bp
;	Return:	nothing
;	Destroyed:	ax
;

global	DOVECLEAREARPHONEMICSWITCHNOTIFY:far
;	Desc:	Unregister notification for the EARPHONE-MIC switch
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterTouchPanelDataOkHandler:far
;	Desc:	Register the handler for touch panel data OK
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterTouchPanelDataOkHandler:far
;	Desc:	Unregister the handler for touch panel data OK
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetPdcResetNotify:far
;	Desc:	Register notification for PDC MCPU reset
;
;	Pass:	if notification routine
;			ax	= 0
;			cx:dx	= fptr to handler (called from interrupt code):
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, bx, cx, dx, si, di, es
;		if notification message
;			ax	= notification message
;			cx:dx	= optr to receive message (or cx = process
;				  handle, dx = other data to be passed with
;				  message in si)
;				  Notification message API:
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, cx, dx, bp
;	Return:	nothing
;	Destroyed:	ax
;

global	DOVECLEARPDCRESETNOTIFY:far
;	Desc:	Unregister notification for PDC MCPU reset
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetSubBatteryLowNotify:far
;	Desc:	Register notification for sub-battery low
;
;	Pass:	if notification routine
;			ax	= 0
;			cx:dx	= fptr to handler (called from interrupt code):
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, bx, cx, dx, si, di, es
;		if notification message
;			ax	= notification message
;			cx:dx	= optr to receive message (or cx = process
;				  handle, dx = other data to be passed with
;				  message in si)
;				  Notification message API:
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, cx, dx, bp
;	Return:	nothing
;	Destroyed:	ax
;

global	DOVECLEARSUBBATTERYLOWNOTIFY:far
;	Desc:	Unregister notification for sub-battery low
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterAcInHandler:far
;	Desc:	Register the handler for AC connection
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;		Handler:
;			Pass:	al	= zero if AC is disconnected
;					= non-zero if AC is connected
;			Return:	nothing
;			Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	cx, dx
;

global	DoveUnregisterAcInHandler:far
;	Desc:	Unregister the handler for AC connection
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterLidSwitchHandler:far
;	Desc:	Register the handler for the lid switch
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;		Handler:
;			Pass:	al	= zero if cover is opened
;					= non-zero if cover is closed
;			Return:	nothing
;			Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	cx, dx
;

global	DoveUnregisterLidSwitchHandler:far
;	Desc:	Unregister the handler for the lid switch
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterTouchPanelOnHandler:far
;	Desc:	Register the handler for touch panel touched.
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterTouchPanelOnHandler:far
;	Desc:	Unregister the handler for touch panel touched.
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetSendSwitchNotify:far
;	Desc:	Register notification for the SEND switch
;
;	Pass:	if notification routine
;			ax	= 0
;			cx:dx	= fptr to handler (called from interrupt code):
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, bx, cx, dx, si, di, es
;		if notification message
;			ax	= notification message
;			cx:dx	= optr to receive message (or cx = process
;				  handle, dx = other data to be passed with
;				  message in si)
;				  Notification message API:
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, cx, dx, bp
;	Return:	nothing
;	Destroyed:	ax
;

global	DOVECLEARSENDSWITCHNOTIFY:far
;	Desc:	Unregister notification for the SEND switch
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetEndSwitchNotify:far
;	Desc:	Register notification for the END switch
;
;	Pass:	if notification routine
;			ax	= 0
;			cx:dx	= fptr to handler
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, bx, cx, dx, si, di, es
;		if notification message
;			ax	= notification message
;			cx:dx	= optr to receive message (or cx = process
;				  handle, dx = other data to be passed with
;				  message in si)
;				  Notification message API:
;				  Pass:		nothing
;				  Return:	nothing
;				  Destroyed:	ax, cx, dx, bp
;	Return:	nothing
;	Destroyed:	ax
;

global	DOVECLEARENDSWITCHNOTIFY:far
;	Desc:	Unregister notification for the END switch
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetLCDContrast:far
;	Desc:	Set the LCD contrast level
;
;	Pass:	al	= contrast level (0 - 31)
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveSetBuzzerVolume:far
;	Desc:	Set the buzzer volume level
;
;	Pass:	al	= volume level (0 - 3)
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterWatchDogTimerHandler:far
;	Desc:	Register the handler for watch dog timer
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;		al	= # of seconds (0 - 4).  If set to 0, watch dog timer
;			  does not run.
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterWatchDogTimerHandler:far
;	Desc:	Unregister the handler for watch dog timer
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveRegisterBatteryVoltageCheckHandler:far
;	Desc:	Register the handler for main battery voltage check end
;
;	Pass:	cx:dx	= fptr to handler (must be fixed)
;			  Handler:
;				Pass:	nothing
;				Return:	nothing
;				Destroyed:	ax, bx, cx, dx, si, di, es
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveUnregisterBatteryVoltageCheckHandler:far
;	Desc:	Unregister the handler for main battery voltage check end
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveGetRealTimeClock:far
;	Desc:	Get real time clock value
;
;	Pass:	ds:si	= buffer (E3G_RealTimeStruct)
;	Return:	buffer filled in
;	Destroyed:	nothing
;

global	DoveSetRealTimeClock:far
;	Desc:	Set real time clock
;
;	Pass:	ds:si	= E3G_RealTimeStruct
;	Return:	nothing
;	Destroyed:	nothing
;

global	DoveGetLidSwitchStatus:far
;	Desc:	Get the lid switch status
;
;	Pass:	nothing
;	Return:	al	= zero if lid is open, non-zero if lid is closed
;	Destroyed:	nothing
;



;------------------------------------------------------------------------------
;
;			  UTILITY ROUTINES
;
;------------------------------------------------------------------------------

global	DoveGetFutureFileDateTime:far
;	Desc:	Get a FileDate & FileTime record for some time in the
;		future by extending the current date & time by an amount
;
;	Pass:	cl	= # minutes extension
;		ch	= # hours extension
;	Return:	dx	= FileTime
;		ax	= FileDate
;	Destroyed:	cx
;

global	DoveTimerSleepMS:far
;	Desc:	Block the current thread for the given amount of time
;
;	Pass:	ax	= amount of time (in milliseconds) to block for
;	Return:	nothing
;	Destroyed:	ax
;



;------------------------------------------------------------------------------
;
;			  C STUBS
;
;------------------------------------------------------------------------------

global	DOVESETEARPHONEMICSWITCHNOTIFY:far
global	DOVESETPDCRESETNOTIFY:far
global	DOVESETSUBBATTERYLOWNOTIFY:far
global	DOVESETSENDSWITCHNOTIFY:far
global	DOVESETENDSWITCHNOTIFY:far
global	DOVEGETFUTUREFILEDATETIME:far
global	DOVETIMERSLEEPMS:far

DoveClearEarphoneMicSwitchNotify equ	DOVECLEAREARPHONEMICSWITCHNOTIFY
DoveClearPdcResetNotify		equ	DOVECLEARPDCRESETNOTIFY
DoveClearSubBatteryLowNotify	equ	DOVECLEARSUBBATTERYLOWNOTIFY
DoveClearSendSwitchNotify	equ	DOVECLEARSENDSWITCHNOTIFY
DoveClearEndSwitchNotify	equ	DOVECLEARENDSWITCHNOTIFY

EndLibrary	dovelib
