COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	Spell library
FILE:		spelllib.def


REVISION HISTORY:
	
	Name	Date		Description
	----	----		-----------
	atw	9/28/92		Initial revision


DESCRIPTION:
	Contains calls into the spell library
		
	$Id: spelllib.def,v 1.1 97/04/04 14:14:30 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

StartLibrary	spell

include sllang.def

SpellRoutine	etype	word

SROUT_CHECK_WORD		enum	SpellRoutine
global	ICCheckWord:far
;
;	Spell checks the passed word
;
;	Pass: CX <- handle of ICBuff
;	      DS:SI <- ptr to word to spell check
;	Returns: AX <- SpellResult
;
;

SpellResult	etype	word, 0, 1
	IC_RET_OK		enum	SpellResult
	IC_RET_ALTERNATE	enum	SpellResult,2
	IC_RET_INVALID		enum	SpellResult
	IC_RET_PRE_PROC		enum	SpellResult
 	IC_RET_ERR		enum	SpellResult,8
	IC_RET_FOUND		enum	SpellResult,10
	IC_RET_NOT_FOUND	enum	SpellResult
	IC_RET_USR_BRK		enum	SpellResult,14
	IC_RET_NOMEM		enum	SpellResult
	IC_RET_NO_OPEN		enum	SpellResult
	IC_RET_WILD		enum	SpellResult
	IC_RET_HYP_ALT		enum	SpellResult, 19
	IC_RET_IGNORED		enum	SpellResult
	IC_RET_NO_USER_DICT	enum	SpellResult
	IC_RET_BAD_LANG		enum	SpellResult
	ERRET			equ	IC_RET_ERR

SROUT_GET_TEXT_OFFSETS		enum	SpellRoutine
global	ICGetTextOffsets:far
;
;	Gets the left/right offsets into the text string that was spell-checked
;	where the word actually began/ended (basically returns offsets past
;	parsed-out junk).
;
;	Pass: CX <- handle of ICBuff
;	Returns: AX <- offset to first char of word (0-based)
;		 CX <- offset to last char of word	
;	Destroyed: nothing
;


SROUT_GET_ERROR_FLAGS		enum	SpellRoutine
global	ICGetErrorFlags:far
;
;	Gets the error flags.
;
;	Pass: CX <- handle of ICBuff
;	Returns: AX <- SpellErrorFlagsHigh
;		 CX <- SpellErrorFlags
;	Destroyed: nothing
;

SROUT_RESET_SPELL_CHECK		enum	SpellRoutine
global	ICResetSpellCheck:far
;
;	Resets internal spell check flags (used for a/an checking, etc).
;
;	Pass: CX <- ICBuff
;	Returns: nothing
;	Destroyed: nothing
;

SpellErrorFlagsHigh		record
	:13
	SEFH_INVALID_PUNCTUATION:1
	SEFH_A_ERROR:1
	SEFH_AN_ERROR:1
SpellErrorFlagsHigh		end

SpellErrorFlags		record
	SEF_DOUBLE_WORD_ERROR:1
	SEF_ORDINAL_NUMBER_ERROR:1
	SEF_APOSTROPHY_ALTERNATIVE:1
	SEF_FINAL_CHAR:1
	SEF_INIT_ERROR:1
	SEF_CAPITALIZATION_ERROR:1
	SEF_COMPOUNDING_ERROR:1
;	SEF_HYPHENATION_ERROR:1
	:1

	SEF_INVALID_PRE_CHARS:1
	SEF_INVALID_TRAILING_CHARS:1
	SEF_NEGATIVE_WORD:1
	SEF_NOT_FREE_STANDING_WORD:1
	SEF_SOFT_HYPHEN_ERROR:1
	SEF_ACCENT_ERROR:1
	SEF_INVALID_POST_CLITIC:1
	SEF_INVALID_PRE_CLITIC:1
SpellErrorFlags		end

;global CHECKIFIGNOREDWORD:far


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	ROUTINES THAT ARE CALLED EXTERNALLY ONLY IN RARE INSTANCES
;	(Most of the functionality that they provide is provided by
;	 the SpellControl object)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

global	ICCheckForEmbeddedPunctuation:far
;
;	Checks to see if the word that was spell checked had embedded
;	punctuation.
;
;	Pass: BX <- handle of ICBuff
;	Returns: AX <- FALSE if no embedded punctuation
;	Destroyed: nothing
;

global	ICGetLanguage:far
;
;	Gets the current language.
;
;	Pass: BX <- handle of ICBuff
;	Returns: AL <- StandardLanguage
;	Destroyed: AH
;

global ICInit:far
;
;	Inits a ICBuff for the spell checking library.
;
;	Pass: 	nothing
;	Return: BX <- handle of ICBuff structure (null if error)
;		AX <- error code
;	Destroyed: nothing
;

global ICExit:far
;
;	Exits/frees up memory associated with this client of the spooler.
;
;	Pass:	BX <- handle of ICBuff structure (returned by ICInit)
;			(this gets freed if no error)
;
;	Return: AX <- error code
;	Destroyed: nothing
;

global ICStopCheck:far
;
;	Called when a spell check has been completed/aborted. This allows the
;	spell checker to do some nice things, like kill the spell thread.
;
;	Pass: nothing
;	Return: nothing
;	Destroyed: nothing
;

global ICSpl:far
;global ICGEOSPL:far
;
;	This is the standard entry point to the spell check library. The
;	passing parameters are all set in the ICBuff structure. The passed
;	string is assumed to be in the GEOS character set and so is converted
;	to the DEC character set.
;
;	Pass: BX <- ICBuff structure (returned by ICInit)
;	      DS:SI <- ptr to null terminated string.
;	Returns: AX <- error code
;	Destroyed: nothing
;		
;
;

global	ICGetNumAlts:far
;
;	Get the # alternate spellings
;
;	Pass: BX <- handle of ICBuff
;	Returns: AX <- # alternate spellings
;	Destroyed: nothing
;

global	ICGetAlternate:far
;
;	Get an alternate spelling string.
;
;	Pass: es:di <- ptr to store alternate spelling
;	      bx <- ICBuff
;	      ax <- index of alternate spelling entry we desire (0 <- 1st
;		    entry)
;	      ds:si <- source string to get alternates for
;
;	Destroyed: nothing

global	ICIgnore:far
;
;	Ignores the passed string for the remainder of the session.
;
;	Pass: DS:SI <- null terminated string to ignore
;	      BX <- handle of ICBuff
;	Returns: nothing
;	Destroyed: nothing
;

global	ICAddUser:far
;
;	Adds the passed string to the user dictionary.
;
;	Pass: DS:SI <- null terminated string to add
;	      BX <- handle of ICBuff
;	Returns: ax - SpellResult
;		 dx - UserResult		
;	Destroyed: nothing
;
UserResult	etype	word, 0, 1
	UR_OK		enum	UserResult
	UR_ADD		enum	UserResult
	UR_NFD		enum	UserResult
	UR_FND		enum	UserResult
	UR_CER		enum	UserResult
	UR_WORD_ALREADY_ADDED		enum	UserResult
	UR_IER		enum	UserResult
	UR_DER		enum	UserResult
	UR_LER		enum	UserResult
	UR_PER		enum	UserResult
	UR_SER		enum	UserResult
	UR_UER		enum	UserResult
	UR_USER_DICT_FULL		enum	UserResult
	UR_GER		enum	UserResult
	UR_DNE		enum	UserResult
	UR_INV		enum	UserResult
	UR_FER		enum	UserResult
	UR_HER		enum	UserResult

global	ICDeleteUser:far
;
;	Deletes the passed string from the user dictionary.
;
;	Pass: ds:si <- null terminated string to delete
;	      BX <- handle of ICBuff
;	Returns: ax - SpellResult
;		 dx - UserResult		
;	Destroyed: nothing
;

global	ICBuildUserList:far
;
;	Builds out a list of words in the user dictionary.
;
;	Pass: BX <- handle of ICBuff
;	Returns: BX <- handle of block containing UserDictionaryListInfo +
;		       words.
;

global	ICResetIgnore:far
;
;	Resets the ignore buffer.
;
;	Pass: BX <- handle of ICBuff
;	Returns: nothing
;

UserDictionaryListInfo	struct
	;DON'T CHANGE THIS STRUCTURE WITHOUT CHANGING ASSOCIATED C DECLARATION
	; IN "icgeospl.c".

	UDLI_numEntries		word		(?)
	; # words in the user dictionary

	UDLI_totalSize		word		(?)
	; Total size of associated block (including this structure)
	
	UDLI_lastFoundIndex	word		(?)
	; The index of the word that the lastFoundPtr points to (starts at 0)

	UDLI_lastFoundPtr	nptr.char	(?)
	; Ptr to word indexed above.
UserDictionaryListInfo	ends


global	ICUpdateUser:far
;
;	Saves the user dictionary out to disk.
;
;	Pass: BX <- handle of ICBuff
;	Returns: nothing
;	Destroyed: nothing
;

global	ICSetTask:far
;
;	Sets the task for the next ICSpl call.
;
;	Pass: AX <- SpellTask
;	      BX <- handle of ICBuff.
;	Returns: nothing
;	Destroyed: nothing
;
SpellTask	etype	word, 1, 1
	ST_INIT			enum	SpellTask
	ST_TERMINATE		enum	SpellTask
	ST_VERIFY		enum	SpellTask
	ST_WILDCARD		enum	SpellTask,5
	ST_ANAGRAM		enum	SpellTask
	ST_HYPHENATE		enum	SpellTask
	ST_DEFINITION		enum	SpellTask
	ST_CORRECT		enum	SpellTask,100



global	Hyphenate:far
;
;	Returns hyphenation points for the passed word
;
;	Pass (on stack):
;		fptr 	wordToHyphenate
;		word	lengthOfShortestWordToHyphenate
;
;	Returns:
;
;		AX - 0 if error or no hyphenation points
;				- or -
;		AX - handle of block containing HyphenationPoints structure
;			(in vTextC.def)
;

ifdef PRODUCT
endif

global	ThesaurusGetMeanings:far
;
;	Given a word, returns a chunk array of meaning strings and
;	an array of parts of speech (1 per meaning)
;
;	Pass:	cx:dx = word to look up
;
;	Return:	^lbx:si = chunk array of null terminated strings,
;			  each of which is one meaning.
;			  Note if size = 0, word not found
;
;			  NOTE: in the REDWOOD case, this is returned as an
;				array of synonyms which correspond to that
;				meaning, instead of the definition for the
;				meaning.  EDS 1/7/94
;
;		^lbx:dx = integer array chunk (0..25). Integers range 
;			  from 0 to 3, and represent the part of speech of the 
;			  corresponding meaning (if that meaning exists). 
;			  0 = adj, 1 = noun, 2 = adverb, 3 = verb.
;
;		ax = success/failure indicator:
;		         number of synonyms/meanings found = success
;			 0 = word not found
;			 negative = error
;

global	ThesaurusGetSynonyms:far
;
;	Takes the number of the sense that is desired (see
;	ThesaurusGetMeanings) and returns a chunk array of null
;	terminated strings, one per synonym.
;
;	Pass:	ds:si = word to lookup
;		cx = sense number corresponding to sense to get synonyms for
;		
;	Return:	^ldx:si = chunk array of null-terminated synonym strings;
;		ax = success/failure indicator:
;			number of senses = success
;			0 = word not found
;			negative = error
;

global	ICGetAnagrams:far
;
;	Finds anagrams for the passed word (up to ICMAXALT)
;
;	Pass:	ds:si	= word to lookup
;		bx	= handle of ICBuff
;		cx	= minimum length of anagram
;
;	Return:	ax	= SpellResult
;

global	ICGetWildcards:far
;
;	Find words that match the passed wildcard
;
;	Pass:	ds:si	= wildcard string
;		bx	= handle of ICBuff
;
;	Return:	ax	= SpellResult
;


;----------------------------------------------------------------------------
;	C Versions
;----------------------------------------------------------------------------

global	ICCHECKWORD:far
global	ICGETTEXTOFFSETS:far
global	ICGETERRORFLAGS:far
global	ICRESETSPELLCHECK:far

global	ICCHECKFOREMBEDDEDPUNCTUATION:far
global	ICGETLANGUAGE:far
global	ICINIT:far
global	ICEXIT:far
global	ICSPL:far
global	ICGETALTERNATE:far
global	ICIGNORE:far
global	ICADDUSER:far
global	ICDELETEUSER:far
global	ICBUILDUSERLIST:far
global	ICUPDATEUSER:far
global	ICRESETIGNORE:far
global	ICGETNUMALTS:far
global	ICSETTASK:far
global	ICSTOPCHECK:far
global	HYPHENATE:far

global	THESAURUSGETMEANINGS:far
global	THESAURUSGETSYNONYMS:far

global	ICGETANAGRAMS:far
global	ICGETWILDCARDS:far

EndLibrary	spell
