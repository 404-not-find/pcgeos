COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		pcmciaDr.def

AUTHOR:		Adam de Boor, May 12, 1993

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	5/12/93		Initial revision


DESCRIPTION:
	Interface definition for device drivers that get loaded to manage
	the insertion and removal of a card.
		
	$Id: zpcmDr.def,v 1.1 97/04/04 14:16:38 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

StartDriver	pcmcia_dr

PCMCIA_PROTO_MAJOR	equ	DRIVER_EXT_PROTO_MAJOR+1
PCMCIA_PROTO_MINOR	equ	DRIVER_EXT_PROTO_MAJOR+0

PCMCIAFunction	etype	word, DriverExtendedFunction, 2
DR_PCMCIA_CONFIRM_REMOVAL			enum PCMCIAFunction
;	PASS:		nothing
;	RETURN:		carry set if card may not be removed yet
;				^lbx:si	= string to display in error
;					  notification box
;			carry clear if ok
;				^lbx:si	= string to display if previous
;					  removal confirmation returned an
;					  error. If bx is 0, the caller
;					  should pick a suitable message.
;	DESTROYS:	di
;
;	When the user attempts to remove the card, this function will
;	be invoked in the driver. If the driver returns carry set, the
;	user will be notified of the problem using the string returned.
;	Once that notification has been acknowledged, the driver will have
;	this function called immediately, and then every 5 seconds to see
;	if it's ok to remove the card yet. The driver must eventually return
;	carry clear, with a suitable explanatory message if it still thinks
;	the card shouldn't be removed. 30 seconds (i.e. 7 calls) is usually
;	a good time after which to throw up your hands and return carry
;	clear even if the card probably shouldn't be removed.
;

DR_PCMCIA_CARD_REINSERTED			enum PCMCIAFunction
;	PASS:		nothing
;	RETURN:		carry set if there's nothing to be done to stop
;				using the card, and the user will just
;				have to do something else.
;			carry clear if the driver has taken steps to
;				make the card not be in-use. The caller
;				should call back periodically to see
;				if the card can be removed.
;	DESTROYS:	di
;
;	The user has acknowledged the error returned by the previous
;	DR_PCMCIA_CONFIRM_REMOVAL and the card is (presumably) back in the
;	slot and locked in.
;

DR_PCMCIA_POWER_DOWN				enum PCMCIAFunction
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYS:	di
;
;	Take whatever action is required to preserve the card's state before
;	it gets powered down.
;

DR_PCMCIA_POWER_UP				enum PCMCIAFunction
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYS:	di
;
;	Take whatever action is required to restore the state preserved during
;	a previous DR_PCMCIA_POWER_DOWN call.
;

DR_PCMCIA_DEVICE_TURNED_ON			enum PCMCIAFunction
;	PASS: 		nothing
;	Return: 	nothing
;	DESTROYS:	di
;
;	Take whatever action is required to turn on the device. This is called
;	whenever DR_POWER_DEVICE_ON_OFF is called to initialize the device.
;

DR_PCMCIA_DEVICE_TURNED_OFF			enum PCMCIAFunction
;	PASS: 		nothing
;	Return: 	nothing
;	DESTROYS:	di
;
;	Take whatever action is required to turn off the device. This is called
;	whenever DR_POWER_DEVICE_ON_OFF is called to turn off the device.
;

;------------------------------------------------------------------------------
;
;		     Socket Services Definitions
;
; As with most BIOS things, you should call SysLockBIOS before issuing the
; SOCKET_SERV_INTERRUPT, and call SysUnlockBIOS afterward.
; 
SOCKET_SERV_INTERRUPT		equ	1ah
SocketServices	etype	byte
SS_INQUIRE_ADAPTER	enum SocketServices, 84h
	;	Pass:	al	= adapter #
	;		es:di	= AdapterInfo, with AI_wBufferLength set to
	;			  number of bytes in buffer, minus 4
	;	Return:	carry set on error
	;		ah	= return code
	;		bh	= number of windows
	;		bl	= number of sockets
	;		cx	= number of EDCs
	;		es:di.AI_wDataLength and rest of stuff filled in
	;
PowerSignals	record
    PS_VCC:1
    PS_VPP1:1
    PS_VPP2:1
    :5
PowerSignals	end

PowerEntry	struct
    PE_voltage	byte		; #volts * 10
    PE_signals	PowerSignals	; the signals to which that voltage may be
				;  applied
PowerEntry	ends

AdapterCapabilities	record
    :13
    AC_DBW:1		; if set, data bus width must be same across all sockets
    AC_PWR:1		; if set, power levels must match across all sockets
    AC_IND:1		; if set, indicators must match across all sockets
AdapterCapabilities	end

SS_MAX_POWER_ENTRIES	equ	4	; max number of entries returned
					;  for a typical implementation.
					;  n/c, 3.3V, 5V and 12V. Some may
					;  return more or fewer.
AdapterInfo	struct
    AI_wBufferLength	word	; # bytes in buffer, minus offset AI_caps
    AI_dataLength	word	; # bytes returned
    AI_caps		AdapterCapabilities
    AI_activeHigh	dword	; mask of levels for active high status change
				;  interrupt
    AI_activeLow	dword	; mask of levels for active low status change
				;  interrupt
    AI_numPowerEntries	word	; number of entries defined for the adapter.
    AI_powerEntries	PowerEntry	SS_MAX_POWER_ENTRIES dup(<>)
AdapterInfo	ends

SS_GET_ADAPTER		enum SocketServices, 85h
	;	Pass:	al	= adapter #
	;	Return:	carry set on error
	;		ah	= return code
	;		dh	= state:
	;				b0	= AS_POWERDOWN
	;				b1	= AS_MAINTAIN
	;		di	= status-change interrupt routing
	;			  	b0:4	= IRQ level
	;				b6	= IRQ_HIGH (i.e. active-high)
	;				b7	= IRQ_ENABLE
	;
AdapterStatus record AS_MAINTAIN:1, AS_POWERDOWN:1
AdapterIRQ    record AIRQ_ENABLE:1, AIRQ_HIGH:1, :1, AIRQ_LEVEL:5

SS_SET_ADAPTER		enum SocketServices, 86h
	;	Pass:	al	= adapter #
	;		dh	= new state
	;		di	= new status-change
	;	Return:	carry set on error
	;		ah	= error code

SS_GET_SOCKET		enum SocketServices, 8dh
	;	Pass:	al	= adapter #
	;		bl	= socket #
	;	Return:	carry set on error
	;		bh	= SCIntMask
	;		ch	= Vcc level
	;		cl	= Vpp levels
	;		dh	= State (SocketIntMask)
	;		dl	= CtlInd (SocketControl)
	;		di	= SocketInterfaceData
	;

InterfaceType	etype	byte		; aka IFtype
IF_MEMORY	enum InterfaceType, 1
IF_IO		enum InterfaceType, 2

SocketIntMask	record
    SBM_CD:1,
    SBM_RDYBSY:1,
    SBM_BVD2:1,
    SBM_BVD1:1,
    SBM_INSERT:1,
    SBM_EJECT:1,
    SBM_LOCKED:1,
    SBM_WP:1
SocketIntMask	end

SocketInterfaceData	record
    SID_TYPE InterfaceType:8
    SID_IRQ AdapterIRQ:8
SocketInterfaceData	end

SS_SET_SOCKET		enum SocketServices, 8eh
	;	Pass:	al	= adapter #
	;		bl	= socket #
	;		bh	= SCIntMask

	;		ch	= Vcc level
	;		cl	= Vpp levels
	;		dh	= State (SocketIntMask)
	;		dl	= CtlInd (SocketControl)
	;		di	= SocketInterfaceData
	;	Return:	carry set on error
	;

SS_GET_STATUS		enum SocketServices, 8fh
	;	Pass:	al	= adapter #
	;		bl	= socket #
	;	Return:	carry set on error
	;		bh	= SCIntMask (current state)
	;		dh	= State (SocketIntMask) (changes since
	;			  last SetSocket that cleared it)
	;		dl	= CtlInd (SocketControl)
	;		di.high	= IFtype
	;		di.low	= IREQRouting
	;


SS_GET_WINDOW		enum	SocketServices, 88h
	;	Pass:	al	= adapter #
	;		bl	= socket #
	; 		bh	= window #
	;	Return:	carry set on error
	; 		ah	= return code
	;		cx	= size (bytes for IO / 4KByte units for memory)
	;		dh	= WindowState
	;		dl	= speed (DeviceSpeed)
	; 		di	= base (bytes for IO / 4KByte units for memory)

SS_SET_WINDOW		enum	SocketServices, 89h
	; 	Pass:	al	= adapter #
	;		bl	= socket #
	; 		bh	= window #
	;		cx	= size (bytes for IO / 4KByte units for memory)
	;		dh	= WindowState
	;		dl	= speed (DeviceSpeed)
	; 		di	= base (bytes for IO / 4KByte units for memory)
	;	Return:	carry set on error
	; 		ah	= return code
	;

WindowState	record
    :3
    WS_CENABLE:1,		; generate card-enable if eisa
    WS_PAGED:1,			; memory only, is WS_EISA if I/O
    WS_16BIT:1,			; allow 16-bit access
    WS_ENABLE:1,		; enable window
    WS_IO:1			; window is I/O, not memory
WindowState	end


SS_INQUIRE_WINDOW	enum	SocketServices, 87h
	; 	Pass:	al	= adapter #
	; 		bh 	= window #
	;		es:di	= buffer to fill with goodies
	; 	Return:	carry set on error
	; 		ah	= return code
	;		bl	= GenericWindowCapabilities
	;		cx	= socket mask
	;		es:di	= WindowDataBuffer (3 possibilities)

GenericWindowCapabilities	record
	GWC_WAIT:1
	:4
	GWC_IO:1,
	GWC_ATTRIBUTE:1,
	GWC_COMMON:1,
GenericWindowCapabilities	end
	
MemWindowCapabilities	record
	:4
	MWC_WRITE_PROTECT:1,
	MWC_PAGE_ENABLE:1,
	MWC_PAGE_SHARED:1,
	MWC_PAGE_AVAIL:1,
	MWC_CARD_ALIGN:1,
	MWC_POW2:1,
	MWC_BASE_ALIGN:1,
	MWC_16BIT_BUS:1,
	MWC_8BIT_BUS:1,
	MWC_WINDOW_ENABLE:1,
	MWC_SIZE:1,
	MWC_BASE:1
MemWindowCapabilities	end

IOWindowCapabilities	record
	:5,
	IOWC_CENABLE:1,
	IOWC_EISA:1,
	IOWC_INPACK:1,
	IOWC_CARD_ALIGN:1,
	IOWC_POW2:1,
	IOWC_BASE_ALIGN:1,
	IOWC_16BIT_BUS:1,
	IOWC_8BIT_BUS:1,
	IOWC_WINDOW_ENABLE:1,
	IOWC_SIZE:1,
	IOWC_BASE:1
IOWindowCapabilities	end

DeviceSpeed	etype	byte
DS_NULL		enum	DeviceSpeed		; Null speed
DS_250NS	enum	DeviceSpeed		; 250 nano-seconds
DS_200NS	enum	DeviceSpeed		; 200 nano-seconds
DS_150NS	enum	DeviceSpeed		; 150 nano-seconds
DS_100NS	enum	DeviceSpeed		; 100 nano-seconds
DS_EXT		enum	DeviceSpeed, 7		; extended device speed

DeviceSpeedMantissa	etype byte
DSM_RESERVED		enum	DeviceSpeedMantissa
DSM_1_0			enum	DeviceSpeedMantissa
DSM_1_2			enum	DeviceSpeedMantissa
DSM_1_3			enum	DeviceSpeedMantissa
DSM_1_5			enum	DeviceSpeedMantissa
DSM_2_0			enum 	DeviceSpeedMantissa
DSM_2_5			enum	DeviceSpeedMantissa
DSM_3_0			enum 	DeviceSpeedMantissa
DSM_3_5			enum 	DeviceSpeedMantissa
DSM_4_0			enum 	DeviceSpeedMantissa
DSM_4_5			enum 	DeviceSpeedMantissa
DSM_5_0			enum	DeviceSpeedMantissa
DSM_5_5			enum	DeviceSpeedMantissa
DSM_6_0			enum	DeviceSpeedMantissa
DSM_7_0			enum	DeviceSpeedMantissa
DSM_8_0			enum	DeviceSpeedMantissa

DeviceSpeedExponent	etype	byte
DSE_1_NANOSECOND	enum	DeviceSpeedExponent
DSE_10_NANOSECOND	enum	DeviceSpeedExponent
DSE_100_NANOSECOND	enum	DeviceSpeedExponent
DSE_1_MICROSECOND	enum	DeviceSpeedExponent
DSE_10_MICROSECOND	enum	DeviceSpeedExponent
DSE_100_MICROSECOND	enum	DeviceSpeedExponent
DSE_1_MILLISECOND	enum	DeviceSpeedExponent
DSE_10_MILLISECOND	enum	DeviceSpeedExponent

ExtendedDeviceSpeed	record
    EDS_EXT:1,				; set if more bytes make up speed
    EDS_MANTISSA DeviceSpeedMantissa:4	; need I say more?
    EDS_EXPONENT DeviceSpeedExponent:3
ExtendedDeviceSpeed	end

; Casio's socket services seems to do everything in 4K units; MWT_firstByte,
; MWT_minSize, MWT_maxSize, MWT_sizeGranularity...
MemWindowTable	struct
	MWT_capabilities	MemWindowCapabilities	; capabilities flags
	MWT_firstByte		word	; system address of first byte
	MWT_lastByte		word	; system address of last byte
	MWT_minSize		word	; minimum window size
	MWT_maxSize		word	; maximun window size
	MWT_sizeGranularity	word	; size granularity
	MWT_baseAlignment	word	; requirements for base alignment
	MWT_offsetAlignment	word	; requirements for offset alignments
	MWT_slowest		DeviceSpeed ; minimum speed (ExtendedDeviceSpeed
					    ;  if >= 7)
	MWT_fastest		DeviceSpeed ; maximum speed (ExtendedDeviceSpeed
					    ;  if >= 7)
MemWindowTable	ends

IOWindowTable	struct
	IOWT_capabilities	IOWindowCapabilities	; capabilities flags
	IOWT_firstByte		word	; system address of first byte
	IOWT_lastByte		word	; system address of last byte
	IOWT_minSize		word	; minimum window size
	IOWT_maxSize		word	; maximun window size
	IOWT_sizeGranularity	word	; size granularity
	IOWT_addressLines	byte	; address lines decoded by window
	IOWT_eisaSlot		byte	; upper for I/O address lines for eisa
IOWindowTable	ends

MemIOWindowTable	struct
	MIOWT_mem	MemWindowTable
	MIOWT_io	IOWindowTable
MemIOWindowTable	ends

WindowDataTable		union
	WDT_mem		MemWindowTable
	WDT_io		IOWindowTable
	WDT_memIo	MemIOWindowTable
WindowDataTable		end


WindowData	struct
	WD_bufferLength	word		; size of buffer, without the two
					;  size words
	WD_dataLength	word		; filled with size of data returned
	WD_table	WindowDataTable
WindowData	ends

SS_GET_PAGE		enum SocketServices, 8ah
	;	Pass:	al	= adapter #
	;		bh	= window #
	;		bl	= page #
	;	Return:	carry set on error
	;		ah	= return code
	;		dl	= PageState
	;		di	= offset (4K units)
	;
PageState	record
    :5
    PS_WP:1			; write-protected
    PS_ENABLED:1		; accessible
    PS_ATTRIBUTE:1		; refers to attribute memory (only even bytes
				;  available)
PageState	end

SS_SET_PAGE		enum SocketServices, 8bh
	;	Pass:	al	= adapter #
	;		bh	= window #
	;		bl	= page #
	;		dl	= PageState
	;		di	= offset (4K units)
	;	Return:	carry set on error
	;		ah	= return code
	;

SS_VENDOR_SPEC		enum SocketServices, 0aeh
	;	Pass:	al	= adapter #
	;		ch	= subfunction (for zoomer)
	;
    CASIO_GET_STATUS_CHANGE_HANDLER	equ	02h ; ch register
						    ; -> dx:si = current handler
    CASIO_SET_STATUS_CHANGE_HANDLER	equ	03h ; ch register
						    ; dx:si = new handler
						    ; -> carry clear

    CASIO_SET_CARD_ACCESS		equ	04h ; ch register
    						    ; bl - socket (0)
						    ; bh (1 to disable APO)
						    ;    (0 to enable it)
						    ; (APO= auto-power-off)
    CASIO_SET_IO_CARD_ACCESS		equ	06h ; ch register
    						    ; bl - socket (0)
						    ; bh = 0 to allow APO
						    ;      1 to disable it

SocketReturnCode	etype	byte
SRC_SUCCESS		enum	SocketReturnCode
SRC_BAD_ADAPTER		enum	SocketReturnCode
SRC_BAD_ATTRIBUTE	enum	SocketReturnCode
SRC_BAD_BASE		enum	SocketReturnCode
SRC_BAD_EDC		enum	SocketReturnCode
SRC_RESERVED_5		enum	SocketReturnCode
SRC_BAD_IRQ		enum	SocketReturnCode
SRC_BAD_OFFSET		enum	SocketReturnCode
SRC_BAD_PAGE		enum	SocketReturnCode
SRC_READ_FAILURE	enum	SocketReturnCode
SRC_BAD_SIZE		enum	SocketReturnCode
SRC_BAD_SOCKET		enum	SocketReturnCode
SRC_BAD_TYPE		enum	SocketReturnCode
SRC_BAD_VCC		enum	SocketReturnCode
SRC_BAD_VPP		enum	SocketReturnCode
SRC_BAD_WINDOW		enum	SocketReturnCode
SRC_WRITE_FAILURE	enum	SocketReturnCode
SRC_NO_CARD		enum	SocketReturnCode
SRC_BAD_FUNCTION	enum	SocketReturnCode
SRC_BAD_MODE		enum	SocketReturnCode
SRC_BAD_SPEED		enum	SocketReturnCode
SRC_BUSY		enum	SocketReturnCode

SRC_NO_CIS		enum	SocketReturnCode, 128	; return from CISEnum,
							;  not socket serv.
SRC_INADEQUATE_WINDOW	enum	SocketReturnCode	; return from CISEnum,
							;  not socket serv.

;------------------------------------------------------------------------------
;
;			   CIS DEFINITIONS
;
;------------------------------------------------------------------------------
CISTuple	etype	byte
CISTPL_NULL		enum CISTuple, 000h
CISTPL_DEVICE		enum CISTuple, 001h
	; Followed by array of variable-length entries describing each device
	; in the common address space, starting from address 0.
	;
	; Each entry begins with a DeviceID, possibly followed by extended
	; speed record and extended device type bytes, followed by a 
	; DeviceSize record.
	;
	; Final DeviceSize record is followed by 0xff byte
	; 
    DeviceType		etype	byte
	DTYPE_NULL	enum DeviceType, 0x0
	DTYPE_ROM	enum DeviceType, 0x1
	DTYPE_OTPROM	enum DeviceType, 0x2
	DTYPE_EPROM	enum DeviceType, 0x3
	DTYPE_EEPROM	enum DeviceType, 0x4
	DTYPE_FLASH	enum DeviceType, 0x5
	DTYPE_SRAM	enum DeviceType, 0x6
	DTYPE_DRAM	enum DeviceType, 0x7
	DTYPE_FUNCSPEC	enum DeviceType, 0xd
	DTYPE_EXTENDED	enum DeviceType, 0xe

    DeviceID	record
	DID_TYPE DeviceType:4
	DID_WPS:1		; is device affected by write-protect switch?
	DID_SPEED DeviceSpeed:3
    DeviceID	end
    
    DeviceSizeUnit	etype byte
        DSU_512		enum DeviceSizeUnit
	DSU_2K		enum DeviceSizeUnit
	DSU_8K		enum DeviceSizeUnit
	DSU_32K		enum DeviceSizeUnit
	DSU_128K	enum DeviceSizeUnit
	DSU_512K	enum DeviceSizeUnit
	DSU_2M		enum DeviceSizeUnit

    DeviceSize record
	DS_NUM_UNITS:5			; number of units - 1
	DS_UNITS DeviceSizeUnit:3	; size of each unit
    DeviceSize end

CISTPL_CHECKSUM		enum CISTuple, 010h
CISTPL_LONGLINK_A	enum CISTuple, 011h
	; Followed by 1-4 bytes giving the address within attribute space of
	; the next CIS to process.

CISTPL_LONGLINK_C	enum CISTuple, 012h
	; Followed by 1-4 bytes giving the address within common space of
	; the next CIS to process.

CISTPL_LINKTARGET	enum CISTuple, 013h
	; Found only at the start of a secondary CIS. Followed by at least
	; three bytes containing the ascii codes for "CIS"

CISTPL_NO_LINK		enum CISTuple, 014h
	; Followed by nothing; indicates default chain (to common:0) should
	; not be taken.

CISTPL_VERS_1		enum CISTuple, 015h
	; Level-1-compliant product info.
	;
	; Followed by major number (1 byte s/b 4), minor number (1 byte s/b 1)
	; and up to four null-terminated strings:
	; 	- product manufacturer
	; 	- product name
	; 	- additional info #1 (lot number?)
	; 	- additional info #2 (programming conditions?)
	; a single 0xff byte
	; 

CISTPL_ALTSTR		enum CISTuple, 016h
CISTPL_DEVICE_A		enum CISTuple, 017h
	; Same as CISTPL_DEVICE, but defines devices that reside in attribute
	; memory space, not common memory space.

CISTPL_JEDEC_C		enum CISTuple, 018h
CISTPL_JEDEC_A		enum CISTuple, 019h
CISTPL_CONFIG		enum CISTuple, 01ah
	; Specify a group of acceptable configurations.
	; First comes a ConfigFieldSizes record, then the number of
	; configurations the card supports, then the fields whose sizes
	; are indicated, then subtuples indicating special configuration
	; information.
    ConfigFieldSizes record
        CFS_RFU:2	; number of bytes reserved for future use
	CFS_MASK_SIZE:4	; number of bytes that make up the bitmask of
			;  available configuration registers - 1
	CFS_ADDR_SIZE:2	; number of bytes that make up the base address for
			;  configuration registers - 1
    ConfigFieldSizes end


CISTPL_CFTABLE_ENTRY	enum CISTuple, 01bh
    ConfigTableIndex	record
	CTI_interface:1	; interface bit says whether there is an IFType byte
			; in the ConfigTableEntry tuple
	CTI_default:1	; bit set if this configuration is the default config
	CTI_entryNumber:6	; value used to select this configuration
    ConfigTableIndex	end

    ConfigTableIFDescription record
	CTIFD_wait:1	; wait signal support required for memory cycles
	CTIFD_readyBusy:1 
			; ready busy active and should be recoverd from
			; Pin Replacement Register if not available on pin 16
	CTIFD_writeProtect:1 
			; write protect state us active and should be recovered
			; from PRR if not available on pin 33
	CTIFD_BVDs:1	; BVD1 and BVD2 statuses are active and should be
			; recoved from PRR if not available on pins 62 and 63
	CTIFD_IFType InterfaceType:4	; InterfaceType
    ConfigTableIFDescription	end

	; this record determins which compace decriptive fields aaare in the
	; ConfigTableEntry
    FeatureSelection	record
	FS_misc:1	; if set a miscellaneous fields structure is present
	FS_memSpace:2	; 0 = no memory space field present
			; 1 = single 2 byte length
			; 2 = length (2 bytes) and card address (2 bytes)
			; 3 = a memory space selection byte followed by
			; memory-space descriptors is present
	FS_irq:1	; an irq field descriptor is present
	FS_ioSpace:1	; an io space field descriptor is presend
	FS_timing:1	; a timing field descriptor is present
	FS_power:2	; 0 = no power descriptor
			; 1 = Vcc power desciptor only
			; 2 = Vcc and Vpp (Vpp1 = Vpp2)
			; 3 = Vcc, Vpp1 and Vpp2
    FeatureSelection	end

    PowerDescriptor	record
	PD_nomimalVoltage:1
	PD_minimunVoltable:1
	PD_maximumVoltage:1
	PD_staticCurrent:1
	PD_averageCurrent:1
	PD_peakCurrent:1
	PD_powerDownCurrent:1
	PD_RFU:1
    PowerDescriptor	end

	; for voltages: exponent = 0 for 100 micro volts
	; for currents: exponent = 0 for 100 nano amps
    PowerDescriptorValue record  
	PDV_ext:1		; extention bit
	PDV_mantissa:4		; mantissa for value
	PDV_exponent:3		; exponent for value
    PowerDescriptorValue end

    TimingInformation	record
	TI_reservedScale:3	
	TI_readyBusyScale:3 	; max power of 10 for busy state
	TI_waitScale:2		; max power of 10 for a wait 
    TimingInformation	end

    IOSpaceDescriptor	record
	IOSD_range:1	; an I/O range descriptor byte follow this byte
	IOSD_bus16:1	; can handle 16 bit buses
	IOSD_bus8:1	; can handle 8 bit buses
	IOSD_addressLines:5	; total number of address lines used
    IOSpaceDescriptor	end

    IORangeDescriptor	record
	IORD_lengthSize:2	; length and address have same format 
	IORD_addressSize:2	; 0 = none
				; 1 = 1 byte long
				; 2 = 2 bytes long
				; 3 = 4 bytes long
	IORD_numberOfRanges:4	; 'nuff said
    IORangeDescriptor	end

    IrqDescriptor	record
	ID_share:1		; sharing logic
	ID_pulse:1		; set to allow pulsing to request an interrupt
	ID_level:1		; can repsond to level interrupts
	ID_mask:1		; describes destination of interrupt
	ID_nmi:1		; non-maskabke interrupt (mask = 1 only)
	ID_lock:1		; I/O check signal (mask = 1 only)
	ID_busError:1		; bus error signal (mask = 1 only)
	ID_vendor:1		; vendor specific signal (mask = 1 only)
    IrqDescriptor	end

    MemSpaceDescriptor	record
	MSD_hostAddress:1	; set if host address is present
	MSD_cardAddressSize:2	; size of card address
	MSD_lengthSize:2	; size of length
	MSD_windows:3		; number of window descriptors following - 1
    MemSpaceDescriptor	end

    ConfigurationOptionRegister record
	COR_sreset:1		; reset card
	COR_levelRequest:1	; get level interrupts, not pulse interrupts
	COR_index:6		; index value to select configuration
    ConfigurationOptionRegister	end

    StatusRegisterOrganization	record
	SRO_changed:1		; one or more Pin Replacement registers has 
				; been set to 1 if this is set
	SRO_stateChange:1	; set to 1 if you want to get state changes
	SRO_8BitBus:1		; set to 1 for hosts that can only do 8 bit
				; data transfers
	SRO_reseved:1
	SRO_audio:1		; enable audio information when set
	SRO_powerDown:1		; set to 1 to enter power down state
	SRO_interrupt:1		; internal interrupt request state 
     StatusRegisterOrganization	end

CISTPL_DEVICE_OC	enum CISTuple, 01ch
	; Specify different device characteristics if certain conditions
	; apply. Replaces CISTPL_DEVICE if the indicated conditions exist.
    OtherConditions record
        OC_3VCC:1		; if 3.3V power applied (indicates card can
				;  support 3.3V)
	OC_MWAIT:1		; if -WAIT signal supported
    OtherConditions end

CISTPL_DEVICE_OA	enum CISTuple, 01dh
CISTPL_DEVICEGEO	enum CISTuple, 01eh		; v2.01
CISTPL_DEVICEGEO_A	enum CISTuple, 01fh		; v2.01

CISTPL_MANFID		enum CISTuple, 020h		; v2.01
CISTPL_FUNCID		enum CISTuple, 021h		; v2.01
    CISCardFunction	etype	byte, 0, 1
    CISCF_MULTI_FUNCTION	enum CISCardFunction	; additional FUNCID
							;  tuples follow with
							;  each function
    CISCF_MEMORY		enum CISCardFunction
    CISCF_SERIAL_PORT		enum CISCardFunction
    CISCF_PARALLEL_PORT		enum CISCardFunction
    CISCF_FIXED_DISK		enum CISCardFunction
    CISCF_VIDEO_ADAPTER		enum CISCardFunction
    CISCF_NETWORK_ADAPTER	enum CISCardFunction
    CISCF_AIMS			enum CISCardFunction
    
    CISSysInitMask	record
	:6
        CISSIM_ROM:1		; card holds expansion ROM that needs to be
				;  mapped in and configured during
				;  system initialization
	CISSIM_POST:1		; card should be configured during power-on
				;  self-test
    CISSysInitMask	end
    
CISTPL_FUNCE		enum CISTuple, 022h		; v2.01

CISTPL_VERS_2		enum CISTuple, 040h
CISTPL_FORMAT		enum CISTuple, 041h
CISTPL_GEOMETRY		enum CISTuple, 042h
CISTPL_BYTEORDER	enum CISTuple, 043h
CISTPL_DATE		enum CISTuple, 044h
CISTPL_BATTERY		enum CISTuple, 045h

CISTPL_ORG		enum CISTuple, 046h

CISTPL_END		enum CISTuple, 0ffh

EndDriver	pcmcia_dr
