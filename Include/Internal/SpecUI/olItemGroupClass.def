COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	SPUI
MODULE:		
FILE:		olItemGroupClass.def

AUTHOR:		David Litwin, Oct  6, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dlitwin	10/ 6/94		Initial revision


DESCRIPTION:
	Definition of OLItemGroupClass.
		
	$Id: olItemGroupClass.def,v 1.1 97/04/04 14:12:02 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


OLItemGroupClass	class	OLCtrlClass
	uses	GenDynamicListClass

;------------------------------------------------------------------------------
;	Methods
;------------------------------------------------------------------------------


MSG_OL_IGROUP_NOTIFY_GROUP_HAS_MOUSE_GRAB	message
;	This method is sent from a OLItemClass object when the user
;	presses the mouse button on it. We set the OLIGS_GROUP_HAS_MOUSE_GRAB
;	flag, indicating that it is OK for other children of this GenList
;	to handle mouse drag events.

MSG_OL_IGROUP_NOTIFY_ITEM_WILL_GRAB_FOCUS_EXCL	message
;	This method is sent from an OLItemClass object when the user
;	presses the mouse on it; This GenList object asks the window if
;	the focus exclusive will be granted, and sets a state flag here
;	indicating that the focus exclusive is/will be inside this object,
;	and so redraws can be optimized to assume that focus movement will
;	trigger redraws.

MSG_OL_IGROUP_NOTIFY_ITEM_GAINED_FOCUS_EXCL	message
;	This method is sent from an OLItemClass object when the
;	user navigates into that object. We update our OLIGI_focusItem.

MSG_OL_IGROUP_NOTIFY_ITEM_LOST_FOCUS_EXCL	message
;	This method is sent from an OLItemClass object when the
;	user navigates off of that object. We update our OLIGI_focusItem.

MSG_OL_IGROUP_NOTIFY_ITEM_SET_USABLE		message
;	This method is sent from an OLItemClass object when it is set
;	USABLE, NOT USABLE, or NOT ENABLED. We clear the selection
;	and FOCUS exclusives for this object if necessary. This method is
;	subclassed by OLScrollingListClass to handle scrolling the list if
;	necessary.
;	Pass:	nothing
;	Return:	nothing

MSG_OL_IGROUP_NOTIFY_ITEM_SET_NOT_USABLE	message
;	This method is sent from an OLItemClass object when it is set
;	NOT USABLE. We clear the selection
;	and FOCUS exclusives for this object if necessary. 
;	Pass:	^lcx:dx	= optr of item being set not USABLE
;	Return:	nothing

MSG_OL_IGROUP_NOTIFY_ITEM_SET_NOT_ENABLED	message
;	This method is sent from an OLItemClass object when it is set
;	NOT ENABLED. We clear the selection
;	and FOCUS exclusives for this object if necessary.  We will also
; 	may move the focus, depending on the flags passed in bp.
;
;	Pass:	^lcx:dx	= optr of item being set not USABLE
;		bp = OLIS_NAVIGATE_IF_DISABLED, OLIS_BACKWARDS_NAVIGATE
;		     possibly set
;	Return:	nothing

MSG_OL_IGROUP_NOTIFY_DOUBLE_PRESS	message
;	This method is sent by the GenListEntry when the user double-clicks
;	on it.

MSG_OL_IGROUP_START_INTERMEDIATE_MODE	message
;	This initiates Intermediate Mode. This mode is used in exclusive
;	items which want to move the SELECTED emphasis from item to
;	item as the user drags across each. As the user drags into a new
;	item, that object sends this method to the GenList, indicating that
;	the selection should temporarily be cleared on the current
;	selected item. The new item will have its PRESSING flag
;	set, so it will be drawn as SELECTED. If the user drags out of this
;	new item, it turns off Intermediate Mode, causing the GenList to
;	restore the selection to the previous item.
;
;	Pass:	cx	= ID of object which is pressed on (if object is
;			selected, then handler will exit.)
;	Return:	carry set if GenList or children does not have the focus,
;		and so the child which is requesting intermediate mode
;		should redraw itself directly, and not rely upon the
;		movement of the focus exclusive.

MSG_OL_IGROUP_END_INTERMEDIATE_MODE	message
;	Tells the GenList to end the intermediate/feedback mode. See above.
;
;	Pass:	bp	- OLItemEnsureNotPressedFlags (see citemItem.asm)
;	Return:	nothing

MSG_OL_IGROUP_RESELECT_EXCL		message
;	Reselects the exclusive item and deselects the item passed.
;	This is used in interaction with the items (internally).
;	Pass:	bp	- OLItemEnsureNotPressedFlags (see citemItem.asm)
;	Return:	nothing

MSG_OL_IGROUP_SET_MODIFIED_ITEM_STATE	message
;	Internal version of the item state-item mechanism that does
; 	the right thing for a boolean group or an item group.  Also
;	marks it as modified.  Also sets OLItemUpdateFlags before calling the
;	generic message.   Clears indeterminate state.
;
;	Pass:	cx	- identifier 
;		dh	- non-zero to select, zero to deselect
;		dl	- OLItemUpdateFlags
;

MSG_OL_IGROUP_SET_MODIFIED_SELECTION	message
;	Internal version of the selection-item mechanism that 
; 	does the right thing for an item group.  Also marks
; 	it as modified.   Also sets OLItemUpdaateFlags before calling the
; 	generic message.  Clears indeterminate state.
;
;	Pass:	cx	- identifier, if bp=1
;		dh	- number of selections (0 or 1)
;		dl	- OLItemUpdateFlags
;

MSG_OL_IGROUP_SET_SELECTION_TO_NEXT	message
MSG_OL_IGROUP_SET_SELECTION_TO_PREVIOUS	message
;
; Changes user exclusive to next or previous entry in list. Wrap around
; to beginning or end of list is supported. The FOCUS exclusive is given to
; the new item.
;
; Pass:		ch -- OLExtendedKbdFlags
; Return:	nothing
;		ax, cx, dx, bp - destroyed

MSG_OL_IGROUP_SET_SELECTION_TO_START	message
MSG_OL_IGROUP_SET_SELECTION_TO_END	message
;
; Messages for selecting the first or last entries in the list.  The focus
; exclusive is given to the new item.
;
; Pass:		ch -- OLExtendedKbdFlags
; Return:	nothing
;		ax, cx, dx, bp - destroyed


MSG_OL_IGROUP_DESELECT_ALL		message
;
; Deselects all items.
;
; Pass:		nothing
; Return:	nothing
;		ax, cx, dx, bp - destroyed


MSG_OL_IGROUP_TOGGLE_ADD_MODE		message
; 
; Puts the list into/out of add mode, where navigating around the list adds 
; items to the list.
;
; Pass:		nothing
; Return:	nothing
;		ax, cx, dx, bp - destroyed

MSG_OL_IGROUP_TOGGLE_FOCUS_EXCL_ITEM	message
;
; Toggles ON/OFF status of item which has FOCUS exclusive (if any).
; Will affect the status of the USER EXCL. Does not affect the status
; of the ACTUAL EXCL.
;
; Pass:		ch -- OLExtendedKbdFlags
; Return:	nothing
;		ax, cx, dx, bp - destroyed

MSG_OL_IGROUP_GET_ITEM_STATE	message
;
; A get-state message that works for both item groups and boolean groups
; for returning the proper state for an item.
;
; Pass:		cx -- item identifier
; Return:	al -- OLItemState:
;			OLIS_SELECTED: if item should be selected
; 			OLIS_INDETERMINATE: if item should be indeterminate
;

MSG_OL_IGROUP_RESET_POPUP_LIST_MONIKER 	message
;
; Forces item group to reset its popup list moniker.  Called by item when its
; moniker changes and it thinks it has the exclusive.
;
; Pass:		nothing
; Return:	nothing
;

MSG_OL_IGROUP_TEST_FOR_REDUNDANT_INTERMEDIATE_SELECTION	message
;
; This exciting message is sent off by exclusive items when the user releases
; on an item.  It basically checks to see if intermediate mode ever got started,
; and if so, if the user just released on the same item that was selected before
; intermediate mode began.   This message is needed because intermediate mode
; will obliterate the previous selection as soon as the user drags to other
; items, and hence the only way to check for an item change is to check the
; selection previously stored away by the intermediate mode, if any.  If 
; intermediate mode never got started, it is safe to just check the current
; selection.  -cbh 8/31/92
;
; Pass:		bp -- non-zero if we're to look at instance data, else:
;			cx -- identifier of item being released
; Return:	carry set if the selection is redundant
;		ax, cx, dx, bp -- blasted into oblivion
;

MSG_OL_IGROUP_START_EXTENDED_SELECTION	message
;
; Sent by an extended-selection-behaved item on a mouse press.
;
; Pass:		cx -- anchor item identifier
;		bp high -- UIFunctionsActive
; Return:	nothing
;		ax, cx, dx, bp -- destroid

MSG_OL_IGROUP_EXTEND_SELECTION		message
;
; Sent by an item to extend the selection, if needed.
;
; Pass:		cx, dx -- mouse position
;		bp -- non-zero if it's to be the initial selection
; Return:	nothing
;		ax, cx, dx, bp -- destroyed
;

MSG_OL_IGROUP_END_EXTENDED_SELECTION	message
;
; Ends extended selection.
;
; Pass:		Go, Collect $200
;		bp high -- UIFunctionsActive
; Return:	nothing
; 		ax, cx, dx, bp -- destroyed
;

MSG_OL_IGROUP_SET_MODIFIED_AND_APPLY_IF_NEEDED	message
;
; Sets the modified state of the item group, depending on the flags passed,
; and also applies if needed.
;
; Pass:		dl -- OLItemUpdateFlags
; Return:	nothing
;		ax, cx, dx, bp -- destroyed
;

MSG_OL_IGROUP_NOTIFY_ITEM_CHANGED_INTERACTABLE_STATE	message
;
; Notifies the item group that a child item changed its interactable state.
;
; Pass:		cx -- non-zero if set interactable, zero if non-interactable
; Return:	nothing
;		ax, cx, dx, bp -- destroyed

if	ERROR_CHECK
MSG_OL_IGROUP_EC_CHECK_ALL_CHILDREN_UNIQUE message
;
; Message for making sure everyone has unique identifiers.
;
; Pass:		nothing
; Return:	nothing
;
endif

;------------------------------------------------------------------------------
;	Hints
;------------------------------------------------------------------------------

TEMP_OL_ITEM_GROUP_NAVIGATE_IF_DISABLED_ITEM	vardata word

if USE_REDRAW_ITEMS_OPTIMIZATION

TEMP_OL_ITEM_GROUP_LAST_ITEM_TO_REDRAW		vardata	word
	;
	; This information should really be passed in
	; MSG_GEN_ITEM_GROUP_REDRAW_ITEMS from OLScrollList,
	; but it isn't, and I don't want to change it.
	;

endif ; USE_REDRAW_ITEMS_OPTIMIZATION

if SHORT_LONG_TOUCH

TEMP_OL_ITEM_GROUP_START_SELECT_ITEM		vardata lptr
	;
	; lptr of item in the item group which received the start select
	;

endif ; SHORT_LONG_TOUCH

;------------------------------------------------------------------------------
;	Constants & Structures
;------------------------------------------------------------------------------

;This enumerated type denotes the type of specific list this turns into
;i.e. a list of items, checkboxes, or a scrolling list
;(only used during generic->specific build)


OLItemGroupState	record 

    ;attribute flags

    OLIGS_DYNAMIC:1		;dynamic list
    OLIGS_CHECKBOXES:1		;being used for whether this is an OLBoolean-
			 ;  Group type object.
    OLIGS_SCROLLABLE:1		;marked if HINT_SCROLLABLE was present
    OLIGS_DEFAULT_FOCUS:1	;set for HINT_DEFAULT_FOCUS.

     ;state flags

    OLIGS_HAS_FOCUS_ITEM:1	;set if has a focus item.  Routines like Get
			 ;FocusOptr will return null is this is clear.
			 ;Likewise, passing null to SetFocusItemFromOptr

			 ;will clear this flag.

    OLIGS_GROUP_HAS_MOUSE_GRAB:1
			 ;this is SET when the mouse button is pressed
			 ;on a child. Another child will only respond
			 ;to mouse drag events if this flag is set.
			 ;This ensures that this GenList will only
			 ;respond to mouse events if the user pressed
			 ;on this GenList.

    OLIGS_INTERMEDIATE:1	;this is set when the user is dragging the mouse
				 ;across an entry. The effect is to temporarily
				 ;deselect the selection. When the
				 ;mouse is dragged of the item, this flag is
				 ;reset and the previously selected item is 
				 ;re-selected.

    OLIGS_LIST_HAS_FOCUS_EXCL:1	;TRUE if the focus exclusive for this
				 ;window is on this GenList or one of its
				 ;children GenListEntries.
OLItemGroupState	end


OLItemGroupMoreState	record
     OLIGMS_POPUP_LIST:1	 ;TRUE if we're now a popup list (we've put
				 ;  ourselves under a menu of some kind.)
     OLIGMS_DISPLAYS_CURRENT_SELECTION:1
				 ;TRUE if we're supposed to display the current
				 ;  selection.  OLIGMS_POPUP_LIST must also be
				 ;  set.
     OLIGMS_DISPLAYING_SELECTION:1
				 ;TRUE if the item group found an item to display
				 ;  in the popup list button.  The item 
				 ;  identifier is kept in OLIGI_displayedItem.
     OLIGMS_WRAPPED_AROUND_ON_LAST_NAVIGATE:1
				 ;TRUE if on the last navigation function, we
				 ;  were wrapping around.  We need this 
				 ;  information (along with the item's OLIS_-
				 ;  NAVIGATE_BACKWARD flag) so we'll know how
				 ;  to continue navigation in a dynamic list if
				 ;  the item we navigated to turns out to be
				 ;  disabled.
     OLIGMS_PREV_SELECTION_VALID:1
				 ;If set, means the value in OLIGI_prevSelection
				 ;  should still be used on a RESELECT_EXCL.
				 ;  Otherwise, intermediate mode has since ended,
				 ;  and we're just going to use this to check
				 ;  redundant selections.
     OLIGMS_XORING_SELECTION:1
				 ;TRUE if we're inverting the state of any
				 ;  selection we make.
     OLIGMS_EXTENDING_SELECTION:1
				 ;TRUE if we're extending a rectangle from the
				 ;  anchor point, as opposed to dragging a new
				 ;  anchor point open.

     OLIGMS_SELECTING_ITEMS:1	 ;TRUE if items in our selection are being
				 ;  turned on.  Clear if being turned OFF.

OLItemGroupMoreState	end


OLItemUpdateFlags record
	 OLIUF_SUPPRESS_DRAW:1	
				 ;Have the draw suppressed.
	 OLIUF_SUPPRESS_DRAW_IF_CURSORED:1
				 ;Have the draw suppressed if the list item
				 ;is cursored.
	 OLIUF_TEMPORARY_CHANGE:1
				 ;Used in intermediate mode and extended 
				 ;selection, avoids modification and applies
				 ;sent on any change.

	 OLIUF_LEAVE_FOCUS_AND_GRAB_ALONE:1
				 ;This is set to avoid the focus being moved
				 ;or the grab being released, things that 
				 ;generally happen with the application is 
				 ;sending a select message.
if SELECTION_BOX
	OLIUF_LEAVE_EXCLUSIVE_BEHAVIOR_ALONE:1
				 ;This is set to prevent
				 ;OLIGI_exclusiveBehavior from being
				 ;updated due to a change of selection
				 ;for temporary changes that the
				 ;spui initiates, as opposed to
				 ;select messages from the application.
	:3
else ; not _RUDY or SELECTION_BOX
	 :4
endif ; not _RUDY or SELECTION_BOX

OLItemUpdateFlags end



;------------------------------------------------------------------------------
;	Instance Data
;------------------------------------------------------------------------------

     OLIGI_state		OLItemGroupState
     OLIGI_moreState		OLItemGroupMoreState

     OLIGI_focusItem	word
	 ;this is the identifier of the item that has the "FOCUS Exclusive", 
	 ;meaning it is CURSORED, but only if OLIGS_HAS_FOCUS_ITEM is set.

     OLIGI_updateFlags	OLItemUpdateFlags
	 ;These are special flags used for updating.  These can be set before
	 ;calling some function that changes the selection state of the item 
	 ;group, and are cleared automatically by the message handler afterwards
	 ;so that by default no flags are set.

     OLIGI_prevSelections	lptr
     OLIGI_prevState		GenItemGroupStateFlags
	 ;Set in MSG_OL_IGROUP_START_INTERMEDIATE_MODE, cleared in END_INTERMED-
	 ;IATE_MODE, keeps track of the previous selections before intermediate
	 ;mode began, so it can possibly reselect them afterwards.

     OLIGI_anchorItem		word
	 ;The current anchor for using extended selection.  This is the place of
	 ;the last normal mouse click.  This is stored in terms of the position
	 ;(in the vis tree) of the anchor item.

     OLIGI_extentItem		word
	 ;The extent of a selection when using extended selection.   This is
	 ;stored in terms of the position of the extent item.

     OLIGI_displayedItem		word
	 ;The identifier of the currently displayed item, if this is a popup
	 ;list and OLIGMS_DISPLAYING_SELECTION is set.  For extended selection
	 ;this is non-zero if the there's a valid extended selection still
	 ;shown (i.e. the anchor hasn't moved).

     OLIGI_nonInteractables		word
	;The number of non-interactable child items that are lying around.  
	;This will be used to avoid repeat-scrolling until all of the items
	;have been made interactable again (if we're a dynamic list).


if _HAS_LEGOS_LOOKS
     OLIGI_legosLook			byte
	;If we support legos looks, store in the spec instance.
endif

OLItemGroupClass	endc




