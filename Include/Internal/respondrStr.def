COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

PROJECT:	RESPONDER
MODULE:		responder hardware definitions
FILE:		respondrStr.def

AUTHOR:		Steve Jang, May  2, 1995

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	5/ 2/95   	Initial revision

DESCRIPTION:
	Representation of register formats in responder.
	Devided up from original respondr.def.

	$Id: respondrStr.def,v 1.1 97/04/04 14:13:19 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

; ===========================
;  REGISTER FORMATS AND SUCH
; ===========================


; -----------------
;  REAL TIME CLOCK
; -----------------

RealTimeStruct		struct	; the order of the field must not change
	RTS_second	byte	; BCD format
	RTS_minute	byte
	RTS_hour	byte
	RTS_day		byte
	RTS_date	byte
	RTS_month	byte
	RTS_year	byte
	RTS_reserved	byte	; to align this structure by word size
RealTimeStruct		ends

RealTimeAlarmStruct	struct	; the order of the field must not change
	RTAS_second	byte	; BCD format
	RTAS_minute	byte	;
	RTAS_hour	byte	;
	RTAS_reserved	byte	; to align this structure by word size
RealTimeAlarmStruct	ends

RtcRegADvVal	etype	byte
  RRADV_enable	enum	RtcRegADvVal, 010b; enable devide chain(RTC keeps time)
  RRADV_reset	enum	RtcRegADvVal, 110b; halt RTC( not affected by RTCRST# )

RtcRegARsVal	etype	byte	; determines periodic interrupt rate and freq
				; documented in 5.6.1 of E3G spec (v. 3.0)
  RRARV_none	enum	RtcRegARsVal, 0	; disable periodic interrupt
  RRARV_256SP	enum	RtcRegARsVal, 1
  RRARV_128SP	enum	RtcRegARsVal, 2
  RRARV_8K	enum	RtcRegARsVal, 3
  RRARV_4K	enum	RtcRegARsVal, 4
  RRARV_2K	enum	RtcRegARsVal, 5
  RRARV_1K	enum	RtcRegARsVal, 6
  RRARV_512	enum	RtcRegARsVal, 7
  RRARV_256	enum	RtcRegARsVal, 8
  RRARV_128	enum	RtcRegARsVal, 9
  RRARV_64	enum	RtcRegARsVal, 10
  RRARV_32	enum	RtcRegARsVal, 11
  RRARV_16	enum	RtcRegARsVal, 12
  RRARV_8	enum	RtcRegARsVal, 13
  RRARV_4	enum	RtcRegARsVal, 14
  RRARV_2	enum	RtcRegARsVal, 15

RtcRegAFlag		record	; RTC control flag A
  RRAF_UIP:1		; 0= update will not occur in 244ms; 1= imminent update
  RRAF_DV RtcRegADvVal:3
  RRAF_RS RtcRegARsVal:4
RtcRegAFlag		end

RtcRegBFlag		record	; RTC control flag B
  RRBF_SET:1		; 0= normal update, 1= stop updates for read/write ops
  RRBF_PIE:1		; 0= disable periodic INTR, 1= enable periodic INTR
  RRBF_AIE:1		; 0= disable alarm INTR, 1= enable alarm INTR
  RRBF_UIE:1		; 0= disable update INTR, 1= enable update INTR
  RRBF_SQWE:1		; always 0
  RRBF_DM:1		; 0= BCD data format, 1= binary data format
  RRBF_24_12:1		; 0= 12 hour mode, 1= 24 hour mode
  RRBF_DSE:1		; 0= disable daylightsaving, 1= enable daylightsaving
RtcRegBFlag		end

RtcRegCFlag		record	; RTC control flag C ( clred after each read )
  RRCF_IRQF:1		; PF or AF or UF
  RRCF_PF:1		; 1= periodic INTR occured
  RRCF_AF:1		; 1= alarm INTR occured
  RRCF_UF:1		; 1= update INTR occured
  RRCF_ZERO:4		; always 0
RtcRegCFlag		end

;
; reading register D will set RRDF_VRT to one
;
RtcRegDFlag		record	; RTC control flag D
  RRDF_VRT:1		; 0= RTCRST# is low, data unreliable, 1= RTC ready
  RRDF_ZERO:7		; always 0
RtcRegDFlag		end

RealTimeClockRAM	struct	; [RTC RAM image - use offsets to these fields]
	RTCR_sec	byte	; 0-59
	RTCR_secAl	byte	; alarm
	RTCR_min	byte	; 0-59
	RTCR_minAl	byte	; alarm
	RTCR_hr		byte	; 0-23
	RTCR_hrAl	byte	; alarm
	RTCR_day	byte	; 1-7, SUN = 1
	RTCR_date	byte 	; 1-31
	RTCR_month	byte	; 1-12
	RTCR_year	byte	; 0-99
	RTCR_registerA	RtcRegAFlag
	RTCR_registerB	RtcRegBFlag
	RTCR_registerC	RtcRegCFlag
	RTCR_registerD	RtcRegDFlag
	RTCR_memory	label	byte	; RAM address 14-127 available
RealTimeClockRAM	ends

RTCADDRFlag	record
  RTCADDRF_NMIEN:1	; 0= enable PORTB parity error to CPU NMI, 1= disable
  RTCADDRF_ADDR:7	; RTC RAM address
RTCADDRFlag	end

; -----------------------
;  Power Management Mode
; -----------------------

;
; Power Mgmt Mode Status Register( read only )(b) - PMSR
; :  This register is reset immediately after being read
;
PMSRFlag	record	; read only register
  :4
  PMSRF_ITMOUT:1	; idle timer timeout
  PMSRF_SPNDMD:1	; in suspend mode
  PMSRF_DTMOUT:1	; doze timer timeout
  PMSRF_DOZMD:1		; in doze mode
PMSRFlag	end

;
; Doze Clk Control Register - PMDCCR
;
PMDCCRDozfrqVal		etype	word
  PMDCCRDV_1		enum PMDCCRDozfrqVal,	0	; divide by 1
  PMDCCRDV_2		enum PMDCCRDozfrqVal,	1	;	    2
  PMDCCRDV_4		enum PMDCCRDozfrqVal,	2	;	    4
  PMDCCRDV_8		enum PMDCCRDozfrqVal,	3	;	    8
  PMDCCRDV_32		enum PMDCCRDozfrqVal,	4	;	   32

PMDCCRFlag	record
  PMDCCRF_DOZE:1	; 0= PMDCCR effective when in doze, 1= immediate effect
  PMDCCRF_CPUSTP:1	; 1= generate HOLD to CPU
  PMDCCRF_LCDSTP:1	; 1= stop LCD clk
  PMDCCRF_CLKSTP:1	; 1= stop clocks to unused modules in the SOG
  PMDCCRF_PWMSTP:1	; 1= stop Pulse Width Modulator clk
  PMDCCRF_SEPSTP:1	; 1= stop SEP clk
  :1			; used to be KSCAN but reserved now
  PMDCCRF_UART1STP:1	; 1= stop UART1 clk
  PMDCCRF_UART0STP:1	; 1= stop UART0 clk
  PMDCCRF_TMR2STP:1	; 1= stop TMR2 input clk
  PMDCCRF_TMR1STP:1	; 1= stop TMR1 input clk
  PMDCCRF_TMR0STP:1	; 1= stop TMR0 input clk
  PMDCCRF_WDSTP:1	; 1= stop watch dog timer
  PMDCCRF_DOZFRQ PMDCCRDozfrqVal:3	; system clock devisor during DOZE
PMDCCRFlag	end

;
; Doze Timer Control Register - PMDTCR
;
PMDTCRDztmrVal	etype	byte
  PMDTCRDV_2ms	enum	PMDTCRDztmrVal, 000b
  PMDTCRDV_4ms	enum	PMDTCRDztmrVal, 001b
  PMDTCRDV_8ms	enum	PMDTCRDztmrVal, 010b
  PMDTCRDV_32ms	enum	PMDTCRDztmrVal, 011b
  PMDTCRDV_128ms enum	PMDTCRDztmrVal, 100b
  PMDTCRDV_512ms enum	PMDTCRDztmrVal, 101b
  PMDTCRDV_2sec	enum	PMDTCRDztmrVal, 110b
  PMDTCRDV_8sec	enum	PMDTCRDztmrVal, 111b

PMDTCRFlag	record
  PMDTCRF_DZTMREN:1	; 0= stop doze timer, 1= start doze timer
  PMDTCRF_DZTMR PMDTCRDztmrVal:3 ; doze timer timeout select
  :1			;
  PMDTCRF_EPMIRELD:1	; 1= reload doz tmr on EPMI
  PMDTCRF_INTRRELD:1	; 1= reload doz tmr on INTR
  PMDTCRF_ACCSRELD:1	; 1= reload doz tmr on access to UART, LCD, or KBD
PMDTCRFlag	end

;
; External PMI Config register(w) - PMEPMICR
;
PMEPMICRFlag	record
  PMEPMICRF_PMI7THL:1	; PMI7 triggered on H to L trans. COM1_RI
  PMEPMICRF_PMI7TLH:1	; PMI7 triggered on L to H trans. COM1_RI
  PMEPMICRF_PMI6THL:1	; PMI6 triggered on H to L trans. COM1_RxD
  PMEPMICRF_PMI6TLH:1	; PMI6 triggered on L to H trans. COM1_RxD
  PMEPMICRF_PMI5THL:1	; PMI5 triggered on H to L trans. COM2_RI
  PMEPMICRF_PMI5TLH:1	; PMI5 triggered on L to H trans. COM2_RI
  PMEPMICRF_PMI4THL:1	; PMI4 triggered on H to L trans. COM2_RxD
  PMEPMICRF_PMI4TLH:1	; PMI4 triggered on L to H trans. COM2_RxD
  PMEPMICRF_PMI3THL:1	; PMI3 triggered on H to L trans. ?
  PMEPMICRF_PMI3TLH:1	; PMI3 triggered on L to H trans. ?
  PMEPMICRF_PMI2THL:1	; PMI2 triggered on H to L trans. VLO_BAT
  PMEPMICRF_PMI2TLH:1	; PMI2 triggered on L to H trans. VLO_BAT
  PMEPMICRF_PMI1THL:1	; PMI1 triggered on H to L trans. PHONE OFF
  PMEPMICRF_PMI1TLH:1	; PMI1 triggered on L to H trans. PHONE ON
  PMEPMICRF_PMI0THL:1	; PMI0 triggered on H to L trans. LID CLOSED
  PMEPMICRF_PMI0TLH:1	; PMI0 triggered on L to H trans. LID OPEN
PMEPMICRFlag	end

;
; NMI Source register(w) - PMNMISR
; : WAKEUP call puts system into ON state.
;   It is up to the software to insure PMIs that generate NMI or SMI also
;   generate WAKEUP.
;
PMNMISRFlag	record
  PMNMISRF_PMINMI15:1	; PMI15 generates NMI
  PMNMISRF_PMINMI14:1	; PMI14 generates NMI
  PMNMISRF_PMINMI13:1	; PMI13 generates NMI
  PMNMISRF_PMINMI12:1	; PMI12 generates NMI
  PMNMISRF_PMINMI11:1	; PMI11 generates NMI
  PMNMISRF_PMINMI10:1	; PMI10 generates NMI
  PMNMISRF_PMINMI09:1	; PMI09 generates NMI
  PMNMISRF_PMINMI08:1	; PMI08 generates NMI
  PMNMISRF_PMINMI07:1	; PMI07 generates NMI
  PMNMISRF_PMINMI06:1	; PMI06 generates NMI
  PMNMISRF_PMINMI05:1	; PMI05 generates NMI
  PMNMISRF_PMINMI04:1	; PMI04 generates NMI
  PMNMISRF_PMINMI03:1	; PMI03 generates NMI
  PMNMISRF_PMINMI02:1	; PMI02 generates NMI
  PMNMISRF_PMINMI01:1	; PMI01 generates NMI
  PMNMISRF_PMINMI00:1	; PMI00 generates NMI
PMNMISRFlag	end

;
; WakeUp Source register(w) - PMWUSR
; : WAKEUP call puts system into ON state.
;   It is up to the software to insure PMIs that generate NMI or SMI also
;   generate WAKEUP.
;
PMWUSRFlag	record
  PMWUSRF_PMIWU15:1	; PMI15 generates WAKEUP to clk manager
  PMWUSRF_PMIWU14:1	; PMI14 generates WAKEUP to clk manager
  PMWUSRF_PMIWU13:1	; PMI13 generates WAKEUP to clk manager
  PMWUSRF_PMIWU12:1	; PMI12 generates WAKEUP to clk manager
  PMWUSRF_PMIWU11:1	; PMI11 generates WAKEUP to clk manager
  PMWUSRF_PMIWU10:1	; PMI10 generates WAKEUP to clk manager
  PMWUSRF_PMIWU09:1	; PMI09 generates WAKEUP to clk manager
  PMWUSRF_PMIWU08:1	; PMI08 generates WAKEUP to clk manager
  PMWUSRF_PMIWU07:1	; PMI07 generates WAKEUP to clk manager
  PMWUSRF_PMIWU06:1	; PMI06 generates WAKEUP to clk manager
  PMWUSRF_PMIWU05:1	; PMI05 generates WAKEUP to clk manager
  PMWUSRF_PMIWU04:1	; PMI04 generates WAKEUP to clk manager
  PMWUSRF_PMIWU03:1	; PMI03 generates WAKEUP to clk manager
  PMWUSRF_PMIWU02:1	; PMI02 generates WAKEUP to clk manager
  PMWUSRF_PMIWU01:1	; PMI01 generates WAKEUP to clk manager
  PMWUSRF_PMIWU00:1	; PMI00 generates WAKEUP to clk manager
PMWUSRFlag	end

;
; PMI Status register(w)(read only) - PMISR
; : Each bit is cleared immediately after read
;
PMISRFlag	record
  PMISRF_PMISTAT15:1	; PMI15 occured since last read (unused)
  PMISRF_PMISTAT14:1	; PMI14 occured since last read (Idle Timer timeout)
  PMISRF_PMISTAT13:1	; PMI13 occured since last read (Doze Timer timeout)
  PMISRF_PMISTAT12:1	; PMI12 occured since last read (Access to DC regs)
  PMISRF_PMISTAT11:1	; PMI11 occured since last read (Access to UART1 regs)
  PMISRF_PMISTAT10:1	; PMI10 occured since last read (Access to UART0 regs)
  PMISRF_PMISTAT09:1	; PMI09 occured since last read (Access to keyscan regs
  PMISRF_PMISTAT08:1	; PMI08 occured since last read (PS/2 kbd int)
  PMISRF_PMISTAT07:1	; PMI07 occured since last read (UART0 RxD)
  PMISRF_PMISTAT06:1	; PMI06 occured since last read (UART0 RI#)?
  PMISRF_PMISTAT05:1	; PMI05 occured since last read (UART1 RxD)
  PMISRF_PMISTAT04:1	; PMI04 occured since last read (UART1 RI#)?
  PMISRF_PMISTAT03:1	; PMI03 occured since last read (unused)
  PMISRF_PMISTAT02:1	; PMI02 occured since last read (VLOBATT - unused)
  PMISRF_PMISTAT01:1	; PMI01 occured since last read( PHONE )
  PMISRF_PMISTAT00:1	; PMI00 occured since last read( LID )
PMISRFlag	end

;
; Suspend mode ctrl register(b) - PMSMCR
;
PMSMCRFlag	record
  PMSMCRF_ENSUSP:1	; enter SUSPEND mode
  PMSMCRF_IDLERELD:1	; Reload IDLE timer on RESUME event
  :5
  PMSMCRF_IDLEEN:1	; enable IDLE timer
PMSMCRFlag	end

;
; Idle Timer count Register - PMITCR
;
PMITCRFlag	type	byte	; byte value for initial count

;
; Timer Clk Source register(b) - PMTCPR
; : Determines clk source for IDLE Timer
;
PMTCPRItcsVal	 etype byte
  PMTCPRIV_32KHZ	enum PMTCPRItcsVal, 0000b    ; 32 KHz
  PMTCPRIV_8KHZ	 	enum PMTCPRItcsVal, 0001b    ; 8 KHz
  PMTCPRIV_512HZ	enum PMTCPRItcsVal, 0010b    ; 512 Hz
  PMTCPRIV_128HZ	enum PMTCPRItcsVal, 0011b    ; 128 Hz
  PMTCPRIV_16HZ		enum PMTCPRItcsVal, 0100b    ; 16 Hz
  PMTCPRIV_4HZ	 	enum PMTCPRItcsVal, 0101b    ; 4 Hz
  PMTCPRIV_0_5HZ	enum PMTCPRItcsVal, 0110b    ; 0.5 Hz
  PMTCPRIV_0_125HZ	enum PMTCPRItcsVal, 0111b    ; 0.125 Hz

PMTCPRFlag	record
  :5
  PMTCPRF_ITCS PMTCPRItcsVal:3		    ; Timer Clk source
PMTCPRFlag	end

;
; Idle Reload Source register(w) - PMIRLDS
;
PMIRLDSFlag	record
  :2
  PMIRLDSF_PMEN13:1		; Reload IDLE timer on PMI13
  PMIRLDSF_PMEN12:1		; Reload IDLE timer on PMI12
  PMIRLDSF_PMEN11:1		; Reload IDLE timer on PMI11
  PMIRLDSF_PMEN10:1		; Reload IDLE timer on PMI10
  PMIRLDSF_PMEN09:1		; Reload IDLE timer on PMI09
  PMIRLDSF_PMEN08:1		; Reload IDLE timer on PMI08
  PMIRLDSF_PMEN07:1		; Reload IDLE timer on PMI07
  PMIRLDSF_PMEN06:1		; Reload IDLE timer on PMI06
  PMIRLDSF_PMEN05:1		; Reload IDLE timer on PMI05
  PMIRLDSF_PMEN04:1		; Reload IDLE timer on PMI04
  PMIRLDSF_PMEN03:1		; Reload IDLE timer on PMI03
  PMIRLDSF_PMEN02:1		; Reload IDLE timer on PMI02
  PMIRLDSF_PMEN01:1		; Reload IDLE timer on PMI01
  PMIRLDSF_PMEN00:1		; Reload IDLE timer on PMI00
PMIRLDSFlag	end

; --------------------
;  CHIP CONFIGURATION
; --------------------

;
; Global Peripheral Disable register Low byte(b) - GLOBALDISL
;
; In a H/W update, GLOBALDISL and GLOBALDISH registers were merged into
; a word register rather than two byte registers.  This means that you need
; to read/write from it with word IN/OUT instructions.  However, I did not
; change the API of responder library.  So, continue using these flags outside
; responder library when calling RespGetGlobalPeripheralDisableL and
; RespGetGlobalPeripheralDisableH routines, but be aware of the fact inside
; responder library!
;
GLOBALDISLFlag	record
  GLOBALDISLF_PWM:1		; 0= Enable PWM
  GLOBALDISLF_SEP:1		; 0= Enable SEP
  GLOBALDISLF_WDT:1		; 0= Enable WDT
  GLOBALDISLF_UART1:1		; 0= Enable UART1
  GLOBALDISLF_UART0:1		; 0= Enable UART0
  GLOBALDISLF_TMR2:1		; 0= Enable TMR2
  GLOBALDISLF_TMR1:1		; 0= Enable TMR1
  GLOBALDISLF_TMR0:1		; 0= Enable TMR0
GLOBALDISLFlag	end

;
; Global Peripheral disable register High byte(b) - GLOBALDISH
;
GLOBALDISHFlag	record
  :4
  GLOBALDISHF_DRAMCTRL:1	; Enable DRAM controller
  GLOBALDISHF_RTC:1		; Enable Real Time Clock
  GLOBALDISHF_DISPLAYCTRL:1	; Enable Display Controller
  GLOBALDISHF_KBDSCANNER:1	; Enable Keyboard Scanner
GLOBALDISHFlag	end

;
; Port92(b)
;
PORT92Flag	record
  :6
  PORT92F_A20G:1		; 0= Force A20 to 0, 1= A20 follows normal addr
  PORT92F_CPURST:1		; Reset E3G core, can be synchronized
PORT92Flag	end

;
; PortB(b)
; : TMROUT1 is not used in E3G DRAM Ctrl
;
PORTBFlag	record
  PORTBF_DRAMPAR:1	; DRAM Ctrl Parity Chk Value (read only)
  PORTBF_RESERVED:1=0	; must read 0		     (read only)
  PORTBF_TMROUT2:1	; TMROUT2 signal	     (read only)
  PORTBF_TMROUT1:1	; TMROUT1 / refresh detect   (read only)
  :1
  PORTBF_DRAMPAREN:1	; Enable DRAM Ctrl Parity Chk (read/write)
  PORTBF_ENSPKR:1	; Enable SPKR output
  PORTBF_TMRGATE2:1	; Enable TMRGATE2
PORTBFlag	end

;
; TIMER interconnection selection(b) - CHPCFG0
;
CHPCFG0Flag	record
  CHPCFG0F_TG1:1	; enable TMRGATE1
  CHPCFG0F_TG0:1	; enable TMRGATE0
  CHPCFG0F_GT2SEL:1	; connect GATE2 to PORTB(if 0) or VCC(if 1)
  CHPCFG0F_CK2SEL:1	; connect CLK2 to PSCLK(if 0) or PLL0CLK(if 1)
  CHPCFG0F_GT1SEL:1	; connect GATE1 to bit TG1(if 0) or VCC(if 1)
  CHPCFG0F_CK1SEL:1	; connect CLK1 to PSCLK(if 0) or PLL0CLK(if 1)
  CHPCFG0F_GT0SEL:1	; connect GATE0 to bit TG0(if 0) or VCC(if 1)
  CHPCFG0F_CK0SEL:1	; connect CLK0 to PSCLK(if 0) or PLL0CLK(if 1)
CHPCFG0Flag	end

;
; Chip interconnection selection(b) - CHPCFG1
;
CHPCFG1Flag	record
  CHPCFG1F_UARTMOD1:1
  CHPCFG1F_UARTMOD0:1
  CHPCFG1F_EXTIR3EN:1
  CHPCFG1F_EXTIR4EN:1
  CHPCFG1F_SCREMAP1:1	; 0=UART1 addr is 02F8h, 1=UART1 addr is 02E8h
  CHPCFG1F_SCREMAP0:1	; 0=UART0 addr is 03F8h, 1=UART0 addr is 03E8h
  CHPCFG1F_SC1CLK:1
  CHPCFG1F_SC0CLK:1
CHPCFG1Flag	end

;
; Chip interconnection selection(b) - CHPCFG2
;
CHPCFG2Flag	record
  :3
  CHPCFG2F_PWCLK:1	; conn PWMCLKIN to PSCLK(=0) or SERCLK(=1)
  :3
  CHPCFG2F_SECLK:1	; conn SEBCLKIN to PSCLK(=0) or SERCLK(=1)
CHPCFG2Flag	end

;
; Pin Multiplexing Registers - PINCFG0 - PINCFG1
; : See E3G spec for documentation
;
GenericPinDesc	record
  GPD_BIT7:1
  GPD_BIT6:1
  GPD_BIT5:1
  GPD_BIT4:1
  GPD_BIT3:1
  GPD_BIT2:1
  GPD_BIT1:1
  GPD_BIT0:1
GenericPinDesc	end

PINCFG0Flag	type	GenericPinDesc
PINCFG1Flag	type	GenericPinDesc
PINCFG2Flag	type	GenericPinDesc
PINCFG3Flag	type	GenericPinDesc
PINCFG4Flag	type	GenericPinDesc
PINCFG5Flag	type	GenericPinDesc
PINCFG6Flag	type	GenericPinDesc

; ------------
;  EMS SYSTEM
; ------------

;
; EMS compare registers - EMSC0 - EMSC3
;
EMSAddrComp	record
  EMSAC_EN:1	; Enable Compare Register
  :1
  EMSAC_ADDR:6	; address to compare with
EMSAddrComp	end

;
; EMS translation registers - EMST0 - EMST3
;
EMSAddrTranslation record
  :4
  EMSAT_ADDR:12	; address to translate to
EMSAddrTranslation end

EMST0Flag	type	EMSAddrTranslation
EMST1Flag	type	EMSAddrTranslation
EMST2Flag	type	EMSAddrTranslation
EMST3Flag	type	EMSAddrTranslation

; -----------------
;  DRAM CONTROLLER
; -----------------

DRRFFlag	record
  DRRFF_SELFREFEN:1
  DRRFF_REFRATE:7
DRRFFlag	end

; --------------------
;  DISPLAY CONTROLLER
; --------------------

DisplayModeSelect	etype	byte
  DMS_LCDS_MONO_1	enum DisplayModeSelect, 00000b	;* LFS at start
  DMS_LCDS_GREY_2	enum DisplayModeSelect, 00001b	;*
  DMS_LCDS_GREY_4	enum DisplayModeSelect, 00010b	;*
  DMS_LCD_COLOR_4	enum DisplayModeSelect, 00011b
  DMS_EL_MONO_1		enum DisplayModeSelect, 00100b
  DMS_RESERVED0		enum DisplayModeSelect, 00101b
  DMS_RESERVED1		enum DisplayModeSelect, 00110b
  DMS_RESERVED2		enum DisplayModeSelect, 00111b
  DMS_CRT_MONO_1	enum DisplayModeSelect, 01000b
  DMS_CRT_COLOR_2	enum DisplayModeSelect, 01001b
  DMS_CRT_COLOR_4	enum DisplayModeSelect, 01010b
  DMS_RESERVED3		enum DisplayModeSelect, 01011b
  DMS_LCDE_MONO_1	enum DisplayModeSelect, 01100b	;** LFS at end
  DMS_LCDE_GREY_2	enum DisplayModeSelect, 01101b	;**
  DMS_LCDE_GREY_4	enum DisplayModeSelect, 01110b	;**
  DMS_RESERVED4		enum DisplayModeSelect, 01111b

DCMODERFlag	record			; DCMODER - display ctrl mode
  :1
  DCMODERF_ENXCM:1			; enable display engine
  DCMODERF_INV:1			; invert display
  :1
  DCMODERF_MS DisplayModeSelect:4
DCMODERFlag	end

; ---------------
;  TIMER/COUNTER
; ---------------

TMRCONMVal	etype	byte		; Mode
  TMRCONMV_MODE0 enum TMRCONMVal, 0000b	; Interrupt on Terminal Count
  TMRCONMV_MODE1 enum TMRCONMVal, 0001b	; H/W retriggerable one shot
  TMRCONMV_MODE2 enum TMRCONMVal, 0010b	; Rate generator
  TMRCONMV_MODE3 enum TMRCONMVal, 0011b	; Square wave mode(baudrate generator)
  TMRCONMV_MODE4 enum TMRCONMVal, 0100b	; S/W triggerable strobe
  TMRCONMV_MODE5 enum TMRCONMVal, 0101b	; H/W triggerable strobe

TMRCONRwVal	etype byte		  ; command
  TMRCONRV_LATCH  enum TMRCONRwVal, 000b  ; counter latch command
  TMRCONRV_RW_LB  enum TMRCONRwVal, 001b  ; read/write low byte
  TMRCONRV_RW_MB  enum TMRCONRwVal, 010b  ; read/write high byte
  TMRCONRV_RW_LMB enum TMRCONRwVal, 011b  ; read/write low byte then high byte

TMRCONScVal	etype byte		  ; counter select
  TMRCONSV_C0	enum TMRCONScVal, 000b	  ; COUNTER0
  TMRCONSV_C1	enum TMRCONScVal, 001b	  ; COUNTER1
  TMRCONSV_C2	enum TMRCONScVal, 010b	  ; COUNTER2
  TMRCONSV_RB	enum TMRCONScVal, 011b	  ; counter readback command

TMRCONFlag	record	; [ Control Word for Timer/Counter ]
  TMRCONF_SC TMRCONScVal:2
  TMRCONF_RW TMRCONRwVal:2
  TMRCONF_M TMRCONMVal:3
  TMRCONF_BCD:1		; 0= binary counter, 1= Binary Coded Decimal Counter
TMRCONFlag	end

CounterReadBackFlag record ; [ Readback command format ]
  CRBF_ON:2=1		; These bits must be 1
  CRBF_NOT_COUNT:1	; 0= count readback 1= no count readback
  CRBF_NOT_STATUS:1	; 0= status readback 1= no status readback
  CRBF_CNT2:1		; Latch count/status of counter2
  CRBF_CNT1:1		; Latch count/status of counter1
  CRBF_CNT0:1		; Latch count/status of counter0
  CRBF_OFF:1=0		; This bit must be 0
CounterReadBackFlag end

RespCounterSize	etype	byte
  RCS_BYTE	enum	RespCounterSize
  RCS_WORD	enum	RespCounterSize

CounterStatusFormat	record	; [ TMRSTS ]
  CSF_OUTPUT:1		; 0= OUT is 0, 1= OUT is 1
  CSF_NULLCOUNT:1	; 0= count avail for read, 1= null count
  CSF_M:5
  CSF_BCD:1
CounterStatusFormat	end

; ----------
;  KEYBOARD
; ----------

;
; KBD scan out register(b) - KBOUT
;
KBOUTFlag	record
  KBOUTF_KBCOL7:1
  KBOUTF_KBCOL6:1
  KBOUTF_KBCOL5:1
  KBOUTF_KBCOL4:1
  KBOUTF_KBCOL3:1
  KBOUTF_KBCOL2:1
  KBOUTF_KBCOL1:1
  KBOUTF_KBCOL0:1
KBOUTFlag	end

;
; KBD enable column register(b) - KBENABLE
; : final result in KYSCNO# = KBOUT or not KBENABLE
;
KBENABLEFlag	record
  KBENABLE_KBCEN7:1
  KBENABLE_KBCEN6:1
  KBENABLE_KBCEN5:1
  KBENABLE_KBCEN4:1
  KBENABLE_KBCEN3:1
  KBENABLE_KBCEN2:1
  KBENABLE_KBCEN1:1
  KBENABLE_KBCEN0:1
KBENABLEFlag	end

;
; KBD input register(w) - KBIN
;
KBINFlag	record
  :6
  KBINF_KI9:1	; 0= key pressed, 1= key not pressed
  KBINF_KI8:1	; 0= key pressed, 1= key not pressed
  KBINF_KI7:1	; 0= key pressed, 1= key not pressed
  KBINF_KI6:1	; 0= key pressed, 1= key not pressed
  KBINF_KI5:1	; 0= key pressed, 1= key not pressed
  KBINF_KI4:1	; 0= key pressed, 1= key not pressed
  KBINF_KI3:1	; 0= key pressed, 1= key not pressed
  KBINF_KI2:1	; 0= key pressed, 1= key not pressed
  KBINF_KI1:1	; 0= key pressed, 1= key not pressed
  KBINF_KI0:1	; 0= key pressed, 1= key not pressed
KBINFlag	end

;
; KBD interrupt enable register(w) - KBINTEN
;
KBINTENFlag	record
  :6
  KBINTENF_KE9:1
  KBINTENF_KE8:1
  KBINTENF_KE7:1
  KBINTENF_KE6:1
  KBINTENF_KE5:1
  KBINTENF_KE4:1
  KBINTENF_KE3:1
  KBINTENF_KE2:1
  KBINTENF_KE1:1
  KBINTENF_KE0:1
KBINTENFlag	end

;
; KBD ctrl register(b) - KBCTRL
;
; debounce period = (16 * KBCTRLF_KBDBTIME) / 32768
;
KBMode		etype	byte
  KBM_MODE0	enum	KBMode, 000b	; disables KBD INTR & debounce logic
					; purely S/W based scanning
  KBM_MODE1	enum	KBMode, 001b	; Enable KBD INTR & debounce logic
					; INTR generated by key pressed
  KBM_MODE2	enum	KBMode, 010b	; S/W uses debounce counter to poll
  KBM_MODE3	enum	KBMode, 011b	; Debounce counter freezes until KB_HIT
					; is asserted
KBCTRLFlag	record
  KBCTRLF_KBMODE KBMode:2
  KBCTRLF_KBDBTIME:6	; debounce time
KBCTRLFlag	end

; -----------------------
;  PULSE WIDTH MODULATOR
; -----------------------

PWCTRLFlag	record	; [ Pulse Width Modulator Control formal ]
  PWCTRLF_OUTPUT:1	; Controls output when in Power Mgmt mode
  :1
  PWCTRLF_PRESCALE:6	; P=0..63; Devide clk by P to produce desired frequency
PWCTRLFLag	end

PWDUTYFlag	record	; [ Pulse Width Modulator Duty Cycle ]
  :7
  PWDUTYF_OUT:1		; 1 = force output to be 1
  PWDUTYF_CYCLE:8	; Cycle value
PWDUTYFlag	end

PWM_CNST_STOP_CLK_OUT0	equ 00000000b	; stop clk and output 0
PWM_CNST_STOP_CLK_OUT1	equ 11111111b	; stop clk and output 1

RESP_MIN_DUTY_CYCLE		equ	20
RESP_DEFAULT_DUTY_CYCLE		equ	100
RESP_MAX_DUTY_CYCLE		equ	170

RESP_MIN_CONTRAST_LEVEL		equ	1
RESP_MAX_CONTRAST_LEVEL		equ	16
RESP_DEFAULT_CONTRAST_LEVEL	equ	8

; --------------------------
;  SERIAL PORT BASE ADDRESS
; --------------------------

UartID		etype	word
  UI_UART0	enum	UartID, 0
  UI_UART1	enum	UartID, 1

; --------------------------------
;  INFRARED SYNCHRONOUS INTERFACE
; --------------------------------

IRDASELFlag	record
  :5
  IRDASELF_XMODE:1	; 0= UART clk, 1= 1.8Mhz clk & gen pulse as in 11500bps
  IRDASELF_RECV:1	; enable IR receiver( 0= ignore received data )
  IRDASELF_XMIT:1	; enable IR transmitter( 0= ignore transmission )
IRDASELFlag	end

; ----------------
;  INTERRUPT MASK
; ----------------

InterruptMask	record
  IM_7:1
  IM_6:1
  IM_5:1
  IM_4:1
  IM_3:1
  IM_2:1
  IM_1:1	; when set, disable interrupt 1, etc
  IM_0:1	; when set, disable interrupt 0
InterruptMask	end

COMMENT |hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh

Interrupt level definitions < see interrup.def for reference >

       	 master int ctrl              slave int ctrl

<G2 board>
IM_7 keyscan                  IM_7
IM_6 yet another extra serial IM_6 fixed disk at
IM_5 debug port: extra serial IM_5
IM_4 UART0                    IM_4
IM_3 UART1                    IM_3 timer2
IM_2   	                      IM_2 timer1
IM_1 keyboard                 IM_1
IM_0 timer 0                  IM_0 rtc

<final H/W>
IM_7 ISA                      IM_7 watchdog
IM_6                          IM_6 IDE
IM_5                          IM_5
IM_4 UART0                    IM_4
IM_3 UART1                    IM_3 timer2
IM_2                          IM_2 timer1
IM_1 keyboard                 IM_1
IM_0 timer 0                  IM_0 rtc

hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh|

; ----------
;  G2 board
; ----------

IO_NMI_EN	equ	210h	; NMI enable register on G2
;format:
G2NmiEnFlag	record
  G2NEF_NMI:1	; 0= disable NMI; 1= ENABLE NMI
  G2NEF_RSSHD:1 ;
  G2NEF_XPWRON:1; 0= normal; 1(for 100-200msec)= temporarily turn on CMT module
  G2NEF_INT:1	; 0= don't wakeup on interrupt; 1= wakeup on any interrupt
  G2NEF_PMI1:2	; 0= don't wakeup on PMI1; 1= wakeup on PMI1( phone )
  G2NEF_PMI0:2	; 0= don't wakeup on PMI0; 1= wakeup on PMI0( lid )
G2NmiEnFlag	end


IO_NMI_ST	equ	211h	; NMI status register on G2
;format: Lower 4 bits must correspond to low 4 bits of ResponderMachineStatus
G2NmiStFlag	record
  G2NSF_NU:2=0	; always 0
  G2NSF_PMI1:1	; PMI1 input status
  G2NSF_PMI0:1	; PMI0 input status
  G2NSF_PMI1HL:1; 1= PMI1 going from high to low caused NMI
  G2NSF_PMI1LH:1; 1= PMI1 going from low to high caused NMI
  G2NSF_PMI0HL:1; 1= PMI0 going from high to low caused NMI
  G2NSF_PMI0LH:1; 1= PMI0 going from low to high caused NMI
G2NmiStFlag	end

IO_NMI_DCCR	equ	212h	; Doze Clock ctrl register on G2

IO_NMI_CCCR	equ	213h	; Central clk ctrl register on G2
;format:
G2CccrFlag	record
  G2CF_DOZE:1	; enter doze mode
  G2CF_SUSP:1	; enter suspend mode
  G2CF_NU:2=0	; always 0
  G2CF_CPU:1	; 0= enable CPU clock; 1= disable CPU clock
  G2CF_LCD:1	; 0= enable LCD clock; 1= disable LCD clock
  G2CF_COM1:1	; 0= enable COM1 clock; 1= disable COM1 clock
  G2CF_COM2:1	; 0= enable COM2 clock; 1= disable COM2 clock
G2CccrFlag	end

VideoPowerFlag	record	; for IO_VIDPWR register = P270
  :7
  VPF_ON:1	; 0 = video off; 1 = video on
VideoPowerFlag	end

; ===========
;  Final H/W
; ===========

XpwronFlag	record	; this is for register PORTSTA4/PORTLTC4
  XF_LID:1	; 0 = lid closed; 1 = lid open	; bit 7 on PORTSTA4
  XF_PHONE:1	; 0 = phone off; 1 = phone on	; bit 6 on PORTSTA4
  :1
  XF_XPWRON:1	; XPWRON = P4.bit4
  :4
XpwronFlag	end

; ===========================
;  ResponderNotificationType
; ===========================

;
; before changing orders of these enums, see RespHandleStatusChange
;
ResponderNotificationType	etype	word ; enum value corresponds to bit
					     ; position - ResponerMachineStatus
  RNT_LID_OPEN			enum	ResponderNotificationType, 0
  RNT_LID_CLOSED		enum	ResponderNotificationType, 1
  RNT_PHONE_ON			enum	ResponderNotificationType, 2
  RNT_PHONE_OFF			enum	ResponderNotificationType, 3
  RNT_BATT_LO			enum	ResponderNotificationType, 4
  RNT_BATT_OK			enum	ResponderNotificationType, 5
  RNT_SAVE_DATA			enum	ResponderNotificationType, 6
  RNT_WAKEUP			enum	ResponderNotificationType, 7
  RNT_SUSP_DISABLED		enum	ResponderNotificationType, 8
  RNT_SUSP_ENABLED		enum	ResponderNotificationType, 9
  RNT_RESERVED1			enum	ResponderNotificationType

  ;
  ; RNT_RESERVEDn doesn't really mean that the corresponding values were
  ; reserved.  Just insert new values before RNT_RESERVED1.  However,
  ; note that for every new notification type defined, there must be a field
  ; in ResponderMachineStatus.  If I were you, I would take a look at
  ; RespHandleStatusChange before changing anything.
  ;

ResponderMachineStatus	record	; must correspond to ResponderNotificationType
  RMS_RESERVED:6=0		; RESERVED must be 0
  RMS_SUSP_ENABLED:1
  RMS_SUSP_DISABLED:1
  RMS_WAKEUP:1=0		; we woke up from suspend
  RMS_SAVE_DATA:1=0
  RMS_BATT_OK:1=0
  RMS_BATT_LO:1=0
  RMS_PHONE_OFF:1=0
  RMS_PHONE_ON:1=0
  RMS_LID_CLOSED:1=0
  RMS_LID_OPEN:1=0
ResponderMachineStatus	end

; ===========================
; PDA Hardware Info
; ===========================

PDAType	etype	byte, 0
  PDAT_PC_EMULATOR	enum PDAType, 000b
  PDAT_N9000		enum PDAType, 001b
  PDAT_N9000i		enum PDAType, 010b

PDAHardwareInfo	record
  :5
  PDAHI_BACKLIGHT_AVAILABLE:1
  PDAHI_PDA_TYPE PDAType:2
PDAHardwareInfo	end

; #############################################################################
; #####################      INTERNAL TO DRIVER       #########################
; #####################  DO NOT USE EXCEPT IN KERNEL  #########################
; #############################################################################

;
; LPS_CRITICAL_SECTION and LPS_INTERRUPTED are used to protect critical section
; that reads LID and PHONE status in TimerInt code
;
LidPhoneStatus	record
  LPS_LID:1		; 0= lid closed, 1= lid closed
  LPS_PHONE:1		; 0= phone off, 1= phone on
  LPS_DETECT_CHANGES:1	; 0= do not detect lid/phone status, 1= detect them
  :13
LidPhoneStatus	end

;
; H/W Ctrl Registers Accessible by S/W ( b = byte size, w = word size, etc )
;
IOReg		etype word
IO_RTCADR	enum IOReg, 0x0070	; RTC addr(b)
IO_RTCDATA	enum IOReg, 0x0071	; RTC data(b)
IO_PMSR		enum IOReg, 0xfca0	; Power Management Mode(b)
IO_PMDCCR	enum IOReg, 0xfca2	; Doze Timer Control(w)
IO_PMEPMICR	enum IOReg, 0xfca6	; PMI config(w)
IO_PMNMISR	enum IOReg, 0xfca8	; NMI source(w)
IO_PMWUSR	enum IOReg, 0xfcaa	; Wakeup source(w)
IO_PMISR	enum IOReg, 0xfcac	; PMI status(w)
IO_PMSMCR	enum IOReg, 0xfcae	; Suspend mode control(b)
IO_PMITCR	enum IOReg, 0xfcb0	; Idle Timer Count(b)
IO_PMTCPR	enum IOReg, 0xfcb1	; Idle Timer Clock Source(b)
IO_PMIRLDS	enum IOReg, 0xfcb2	; Idle Timer Reload Source(b)
IO_GLOBALDISL	enum IOReg, 0xf820	; Global Peripheral Disable low byte
IO_GLOBALDISH	enum IOReg, 0xf821	; Global Peripheral Disable high byte
					; This register changed from byte to
					; word size, but I didn't want to make
					; API changes.  Consequently
					; IO_GLOBALDISH is an invalid addr.
					; Mode documentation in GLOBALDISLFlags
					;
IO_CHIPID	enum IOReg, 0xf822	; Chip ID register

;
; the higher the enum value, the later the version number.
;
ChipVersion	etype	byte
	CV_A1_OR_A2	enum	ChipVersion, 1
	CV_A3		enum	ChipVersion, 2
	CV_A6		enum	ChipVersion, 3

ChipIDInformation	record
	CIDI_TYPE:3
	CIDI_GENERATION:4
	CIDI_MODEL:5
	CIDI_VERSION ChipVersion:4
ChipIDInformation	end

IO_PORT92	enum IOReg, 0x0092	; Port92(b)
IO_PORTB	enum IOReg, 0x0061	; PortB(b)
IO_CHPCFG0	enum IOReg, 0xf826	; TIMER interconnection selection(b)
IO_CHPCFG1	enum IOReg, 0xf827	; Chip interconnection selection(b)

IO_PINCFG0	enum IOReg, 0xf860	; Port0/Peripheral Pin selection(b)
IO_PINDIR0	enum IOReg, 0xf861	;
IO_PINLTC0	enum IOReg, 0xf862	;
IO_PINSTA0	enum IOReg, 0xf863

IO_PINCFG1	enum IOReg, 0xf864	; Port1/Peripheral Pin selection(b)
IO_PINDIR1	enum IOReg, 0xf865	;
IO_PINLTC1	enum IOReg, 0xf866	;
IO_PINSTA1	enum IOReg, 0xf867

IO_PINCFG2	enum IOReg, 0xf868	; Port2/Peripheral Pin selection(b)
IO_PINDIR2	enum IOReg, 0xf869	;
IO_PINLTC2	enum IOReg, 0xf86a	;
IO_PINSTA2	enum IOReg, 0xf86b

IO_PINCFG3	enum IOReg, 0xf86c	; Port3/Peripheral Pin selection(b)
IO_PINDIR3	enum IOReg, 0xf86d	;
IO_PINLTC3	enum IOReg, 0xf86e	;
IO_PINSTA3	enum IOReg, 0xf86f

IO_PINCFG4	enum IOReg, 0xf870	; Port4/Peripheral Pin selection(b)
IO_PINDIR4	enum IOReg, 0xf871	;
IO_PINLTC4	enum IOReg, 0xf872	;
IO_PINSTA4	enum IOReg, 0xf873	;

IO_PINCFG5	enum IOReg, 0xf874	; Port5/Peripheral Pin selection(b)
IO_PINDIR5	enum IOReg, 0xf875	;
IO_PINLTC5	enum IOReg, 0xf876	;
IO_PINSTA5	enum IOReg, 0xf877

IO_PINCFG6	enum IOReg, 0xf878	; Port6/Peripheral Pin selection(b)
IO_PINDIR6	enum IOReg, 0xf879	;
IO_PINLTC6	enum IOReg, 0xf87a	;
IO_PINSTA6	enum IOReg, 0xf87b

IO_EMSC0	enum IOReg, 0xfc10	; EMS Addr Cmp register 0(b)
IO_EMSC1	enum IOReg, 0xfc11	; EMS Addr Cmp register 1(b)
IO_EMSC2	enum IOReg, 0xfc12	; EMS Addr Cmp register 2(b)
IO_EMSC3	enum IOReg, 0xfc13	; EMS Addr Cmp register 3(b)
IO_EMST0	enum IOReg, 0xfc14	; EMS Addr Translation register 0(w)
IO_EMST1	enum IOReg, 0xfc16	; EMS Addr Translation register 1(w)
IO_EMST2	enum IOReg, 0xfc18	; EMS Addr Translation register 2(w)
IO_EMST3	enum IOReg, 0xfc1a	; EMS Addr Translation register 3(w)
IO_DCADDR	enum IOReg, 0xf900	; Display Ctrl Addr(b)
IO_DCDATA	enum IOReg, 0xf901	; Display Ctrl Data(b)
IO_DCMODER	enum IOReg, 0xf906	; Display Ctrl Mode register
IO_DCHVSWR	enum IOReg, 0xf902	; Display Ctrl Virtual Screen Width
IO_COUNTER0	enum IOReg, 0x0040	; Counter0 (read/write word)
IO_COUNTER1	enum IOReg, 0x0041	; Counter1 (read/write word)
IO_COUNTER2	enum IOReg, 0x0042	; Counter2 (read/write word)
IO_TMRCON	enum IOReg, 0x0043	; Ctrl Word for Timer/Counter
IO_PWCTRL	enum IOReg, 0xfc01	; PWM(Pulse Width Modulator) control
IO_DRRF		enum IOReg, 0xf314	; DRAM Refresh Register(b)

ifidn	HARDWARE_TYPE, <RESPG2>
IO_PWDUTY	enum IOReg, 0x0251	; PWM Duty Cycle(b)
IO_IRDASEL	enum IOReg, 0x0252	; IrDA select register(b)
IO_VIDPWR	enum IOReg, 0x0270	; video power on/off register(b)
IO_KBOUT	enum IOReg, 0x0265	; Keyboard scan out register(b)
IO_KBENABLE	enum IOReg, 0x0266	; Keyboard scan enable register(b)
IO_KBIN		enum IOReg, 0x0260	; Keyboard input register(w)
IO_KBINTEN	enum IOReg, 0x0262	; Keyboard interrupt enable(w)
IO_KBCTRL	enum IOReg, 0x0264	; Keyboard control
else	; HARDWARE_TYPE == <RESPONDER>
IO_PWDUTY	enum IOReg, 0xfc00	; PWM Duty Cycle(w)
IO_IRDASEL	enum IOReg, 0xf3f8	; IrDA select register(b)
IO_KBOUT	enum IOReg, 0xfc30	; Keyboard scan out register(b)
IO_KBENABLE	enum IOReg, 0xfc32	; Keyboard scan enable register(b)
IO_KBIN		enum IOReg, 0xfc34	; Keyboard input register(w)
IO_KBINTEN	enum IOReg, 0xfc36	; Keyboard interrupt enable(w)
IO_KBCTRL	enum IOReg, 0xfc38	; Keyboard control
endif

IO_MPICP0	enum IOReg, 0x0020	; master interrupt controller 0
IO_MPICP1	enum IOReg, 0x0021	; master interrupt controller 1
IO_SPICP0	enum IOReg, 0x00a0	; slave interrupt controller 0
IO_SPICP1	enum IOReg, 0x00a1	; slave interrupt controller 1

IO_UART0	enum IOReg, 0x03f8	; Beginning of UART0 io addr = COM1
IO_UART1	enum IOReg, 0x02f8	; Beginning of UART1 io addr = COM2

COMMENT |---------------------------------------------------------------------

  ISSUES CONCERNING UART0

  There are basically 2 issues:
  1. UART0 is connected to both IRDA decoder and RS-232 port.  So, we need to
     synchronize the use of IR port and serial port by writing appropriate
     values out to IRDASEL register.
  2. In order to do power management, we need to set up IRSHD, RSSHDX, and
     RSENX pins correctly each time we open or close UART0 in order to
     turn on/off serial buffers.  Refer to the table below.

  Table below describes what these bits need to be set at in different cases:

  -----------------------------------------------------
  UART0 is on as	RS-232	 IR port  closed
  -----------------------------------------------------
  IRDASEL		xxxxxx00 xxxxxx11 xxxxxx00
  -----------------------------------------------------
  IRSHD:PORT1.4		xxx1xxxx xxx0xxxx xxx1xxxx
  -----------------------------------------------------
  RSSHDX:PORT0.0	xxxxxxx1 xxxxxxx0 xxxxxxx0
  -----------------------------------------------------
  RSENX:PORT0.4		xxx0xxxx xxx1xxxx xxx1xxxx
  -----------------------------------------------------

------------------------------------------------------------------------------|
