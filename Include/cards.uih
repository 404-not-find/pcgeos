/*$Id: cards.uih,v 1.1 97/04/04 14:23:54 newdeal Exp $
Here's the class descriptions of the classes in the card library
*/

class	CardBackSelector = GenControl {
	default output = "TO_APP_TARGET";
	default type = properties;
	default visibility = dialog;
	default genStates = default +enabled;

	vmFile = hptrComp : null;
	mapBlock = wordComp : 0;
	cardWidth = wordComp : 0;
	cardHeight = wordComp : 0;
}

class	Game = VisContent, master {

	default contentAttrs = default +sameWidthAsSubview,
					+sameHeightAsSubview;

	displayScheme = byteComp : 0;

	gameAttrs = bitFieldComp byte {
			unused : 4,

			iconified,		/* set if game is iconified */

			redealRequested,	/* set if a redeal has been */
						/* requested but not yet */
						/* processed */

			useWinBack,		/* set if the winner's card */
						/* back design should be */
						/* used */

			justWonAGame		/* set if the game has been */
						/* won since the last redeal */
	} : {};

	dragType = enumComp byte {
		outline, full
	} : outline;

	userMode = enumComp byte {
		beginner, intermediate, advanced
	} : beginner;

	hand = optrComp : null;
	scoreOutput = optrComp : null;
	fadeArray = wordComp : 0;
	lastDonor = optrComp : null;
	hilited = optrComp : null;
	dragger = optrComp : null;
	score = wordComp : 0;
	lastScore = wordComp : 0;

	faderHandle = wordComp : 0;
	gState = wordComp : 0;
	initialFadeMask = byteComp : SDM_0;
	incrementalFadeMask = byteComp : "SDM_25 - SDM_0";

	whichBack = wordComp : 0;
	frameReg = wordComp : 0;
	interiorReg = wordComp : 0;
	vmFile = hptrComp : null;
	mapBlock = wordComp : 0;
	cardWidth = wordComp : 0;
	cardHeight = wordComp : 0;
	upSpreadX = wordComp : 0;
	upSpreadY = wordComp : 0;
	downSpreadX = wordComp : 0;
	downSpreadY = wordComp : 0;

	undoTrigger = optrComp : null;

	randomSeed = wordComp : 0;	

}

class	Deck = VisComp, master {
	default visCompGeoAttrs = default +customManageChildren;
	deckAttrs = bitFieldComp byte {
			unused:1,
			dragWhichCards:3 = {
				none, topOnly, untilSelected, topOrUps
			},
			justUncovered,
			ignoreDoubleClicks,
			ignoreExpressDrag,
			wantsDrag
	} : dragWhichCards untilSelected, ignoreExpressDrag;

	markerColor = byteComp : C_LIGHT_BLUE;
	markerMask = byteComp : SDM_50;
	pushPoints = wordComp : 0;
	popPoints = wordComp : 0;
	flipPoints = wordComp : 0;


	noCardAcceptanceConditions = bitFieldComp word {
					unused:7,
					singleCardOnly,
					suitConditions:2 = {
						oppositeColor,
						sameColor,
						sameSuit,
						anySuit
					},
					rankConditions:2 = {
						oneLess, oneGreater, equal,
						absolute
					},
					absoluteRank:4 = {
						none,ace,two,three,four,five,
						six,seven,eight,nine,ten,jack,
						queen,king,joker,wild
					}
	}:	suitConditions anySuit,
		rankConditions absolute,
		absoluteRank king;


	downCardAcceptanceConditions = bitFieldComp word {
					unused:7,
					singleCardOnly,
					suitConditions:2 = {
						oppositeColor,
						sameColor,
						sameSuit,
						anySuit
					},
					rankConditions:2 = {
						oneLess, oneGreater, equal,
						absolute
					},
					absoluteRank:4 = {
						none,ace,two,three,four,five,
						six,seven,eight,nine,ten,jack,
						queen,king,joker,wild
					}
	}:	suitConditions anySuit,
		rankConditions absolute,
		absoluteRank none;

	upCardAcceptanceConditions = bitFieldComp word {
					unused:7,
					singleCardOnly,
					suitConditions:2 = {
						oppositeColor,
						sameColor,
						sameSuit,
						anySuit
					},
					rankConditions:2 = {
						oneLess, oneGreater, equal,
						absolute
					},
					absoluteRank:4 = {
						none,ace,two,three,four,five,
						six,seven,eight,nine,ten,jack,
						queen,king,joker,wild
					}
	}:	suitConditions oppositeColor,
		rankConditions oneLess,
		absoluteRank none;

	offsetFromDownCardX = wordComp : 0;
	offsetFromDownCardY = wordComp : 5;
	offsetFromUpCardX = wordComp : 0;
	offsetFromUpCardY = wordComp : 15;
	topCardLeft = wordComp : 0;
	topCardTop = wordComp : 0;
	nCards = wordComp : 0;
	lastRecipient = optrComp : null;
	lastGift = wordComp : 0;
	nDragCards = wordComp : 0;
	dragOffsetX = wordComp : 0;
	dragOffsetY = wordComp : 0;
	prevLeft = wordComp : 0;
	prevTop = wordComp : 0;
	initLeft = wordComp : 0;
	initTop = wordComp : 0;
	initRight = wordComp : 0;
	initBottom = wordComp : 0;
	dragWidth = wordComp : 0;
	dragHeight = wordComp : 0;
	gState = wordComp : 0;	
}


class	Hand = Deck {
	default deckAttrs = dragWhichCards none, ignoreDoubleClicks;

	default markerColor = C_YELLOW;
	default markerMask = SDM_100;
	default noCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;


	default downCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;


	default upCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;
}

class	Card = Vis, master {
	cardAttrs = 	bitFieldComp word {
				unused:6,
				monoBitmap,
				dirty,
				fading,
				rank:4 = {
					none,ace,two,three,four,five,
					six,seven,eight,nine,ten,jack,
					queen,king,joker,wild
				},
				suit:2 = {
					clubs,diamonds,hearts,spades
				},
				faceUp
			} : rank nine, suit hearts, faceUp;
	bitmap = optrComp : null;
	areaMask = byteComp : 0;
}
