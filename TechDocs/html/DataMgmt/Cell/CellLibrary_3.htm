<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: CellLibrary_3.htm,v 1.1 97/06/02 14:32:00 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> The CellFunctionParameters Structure</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Cell Library</A>: 2.1 <A HREF="CellLibrary_2.htm">Using the Cell Library</A>: 
<A NAME="45469">
 </A>
The CellFunctionParameters Structure</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="CellLibrary_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="CellLibrary_2.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 Using the Cell Library</A> 
<!-- to next --> | <A HREF="CellLibrary_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 Basic Cell Array Routines</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The cell library needs to have certain information about any cell file on which it acts; for example, it needs to know the handles of the VM file and of the row blocks. That information is kept in a <A NAME="IX_CellFunctionParameters">
 </A>
<CODE>
CellFunctionParameters</CODE>
 structure. The geode which uses a cell file is responsible for creating a <CODE>
CellFunctionParameters</CODE>
 structure. The C definition of the structure is shown below.</P>
<P CLASS="figTitle">
Code Display 19-1 CellFunctionParameters</P>
<PRE>typedef	struct {
	CellFunctionParameterFlags
			CFP_flags;		/* Initialize this to zero. */
	VMFileHandle		CFP_file;		/* The handle of the VM file containing
					 * the cell file. Reinitialize this each
					 * time you open the file. */
	VMBlockHandle		CFP_rowBlocks[N_ROW_BLOCKS];			/* Initialize these to zero. */
} CellFunctionParameters;</PRE>
<P>
In order to create a cell file, you must create a <CODE>
CellFunctionParameters</CODE>
 structure. Simply allocate the space for the structure and initialize the data fields. When you call a cell library routine, lock the structure on the global heap and pass its address. Geodes will usually allocate a VM block in the same file as the cell file, and use this block to hold the <CODE>
CellFunctionParameters</CODE>
 structure; this ensures that the structure will be saved along with the cell file. They may often declare this to be the map block, making it easy to locate (see <A HREF="../../Memory/VM/VM_11.htm#49125">the VM chapter</A>). However, this is entirely at the programmer's discretion. All that the cell library requires is that the structure be locked or fixed in memory every time a cell library routine is called.</P><P>
The <CODE>
CellFunctionParameters</CODE>
 structure contains the following fields:</P>
<DL>
<DT>
<CODE>
CFP_flags</CODE>
</DT><DD><A NAME="IX_CellFunctionsParameterFlags">
 </A>
<A NAME="IX_CFPF_DIRTY">
 </A>
The cell library uses this byte for miscellaneous bookkeeping. When you create the structure, initialize this field to zero. There is only one flag which you should check or change; that is the flag CFPF_DIRTY. The cell library routines set this bit whenever they change the <CODE>
CellFunctionParameters</CODE>
 structure, thus indicating that the structure ought to be resaved. After you save it, you may clear this bit.</DD>
<DT>
<CODE>
CFP_file</CODE>
</DT><DD>This field must contain the file handle of the VM file containing the cell file. A VM file can have a new file handle every time it is opened; thus, you must reinitialize this field every time you open the file. </DD>
<DT>
<CODE>
CFP_rowBlocks</DT><DD>
</CODE>
This field is an array of VM block handles, one for every existing or potential row block. If a row block exists in the cell file, its handle is recorded here. If it does not exist, a null handle is kept in the appropriate place. The length of this array is a number of words equal to the constant N_ROW_BLOCKS (defined in <STRONG CLASS="fileName">
cell.h</STRONG>
). When you create a cell file, initialize all of these handles to zero; do not access or change this field thereafter.</DD>
</DL>
<P>
One warning: The cell library expects the <CODE>
CellFunctionParameters</CODE>
 structure to remain motionless for the duration of a call. Therefore, if you allocate it as a DB item in the same VM file as the cell file, you must <EM>
not</EM>
 have the structure be an ungrouped item. Remember, all the cells are ungrouped DB items; allocating or resizing a cell can potentially move any or all of the ungrouped DB items in that file.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="CellLibrary_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="CellLibrary_2.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 Using the Cell Library</A> 
<!-- to next --> | <A HREF="CellLibrary_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 Basic Cell Array Routines</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
