<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Communicator UI</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_71646">
 </A>
	Communicator UI

</H1>
<P>
The Nokia 9000i contains has a very specific look and feel which is created through the use of a specific user interface developed for the device. The specific UI contains not only visual representations for GEOS objects, but also additional objects that are particularly tailored for the Nokia 9000i device.</P>
<P>
Most of these objects have been grouped into the &quot;Foam&quot; library. This library is a special collection of classes, objects and routines specifically applicable to the Nokia 9000i device. Because of its multi-faceted nature, the Foam library is not a coherent library so much as a &quot;toolbox&quot; of useful widgets.</P>
<P>
We will not attempt to cover every piece of the Foam library within this chapter. Instead, we provide a brief overview of the foam UI classes, then delve into the objects which are particularly useful for creating your application.</P>
<P>
These objects are:</P>
<UL>
<LI>
FoamSubApplicationClass</LI>
<LI>
ComplexMonikerClass</LI>
<LI>
FlashingNoteClass</LI>
<LI>
RepeatingGenGlyphClass</LI>
<LI>
Special Foam dialog box routines</LI>
<LI>
Special routines for presenting lists</LI>
</UL>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#foam_ui_classes.htm">0 Foam UI Classes Overview </A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_1.htm">1 FoamSubApplicationClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_2.htm">1.1 FoamSubApplicationClass Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_3.htm">1.2 Using a FoamSubApplication Object</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_4.htm">2 ComplexMonikerClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_5.htm">2.1 ComplexMoniker Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_6.htm">2.2 ComplexMoniker Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_7.htm">2.3 ComplexMoniker Messages</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_8.htm">3 Convenient Dialog Routines</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_9.htm">4 FlashingNoteClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_a.htm">4.1 FlashingNote Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_b.htm">4.2 Setting Up the Template</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_c.htm">4.3 Initiating and Destroying the Flashing Note</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_d.htm">5 FoamProgressDialog</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_e.htm">5.1 FoamProgressDialog Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_f.htm">5.2 Setting Up the Template</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_10.htm">5.3 Using a FoamProgressDialog</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_11.htm">6 Routines for Lists</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="foam_ui_classes.htm"></A>

<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 0 
<A NAME="foam_ui_classes.htm_29193">
 </A>
Foam UI Classes Overview </H2>

<P>



The foam library includes many new UI classes. This page lists these classes, briefly describes each class' utility, and displays an annotated snapshot of each UI class. 
<UL>
<LI> <A HREF = "#IX_FFileSelectorClass:overview"> FFileSelectorClass </A>
<LI> <A HREF = "#IX_ExtendedFileSelectorClass:overview"> ExtendedFileSelectorClass</A>
<LI> <A HREF = "#IX_ComplexMonikerClass:overview"> ComplexMonikerClass</A>
<LI> <A HREF = "#IX_TwoLevelTriggerClass:overview"> TwoLevelTriggerClass</A>
<LI> <A HREF = "#IX_FoamSubApplicationClass:overview"> FoamSubApplicationClass</A>
<LI> <A HREF = "#IX_GreyFrameClass:overview"> GreyFrameClass </A>
<LI> <A HREF = "#IX_ListWithUserDefinedClass:overview"> ListWithUserDefinedClass </A>
<LI> <A HREF = "#IX_RepeatingGenGlyphClass:overview"> RepeatingGenGlyphClass</A>
<LI> Dialogs
<UL>
<LI> <A HREF = "#IX_FlashingNoteClass:overview"> FlashingNoteClass</A>
<LI> <A HREF = "#IX_SelfDestroyingDialogClass:overview"> SelfDestroyingDialogClass</A>
<LI> <A HREF = "#IX_FoamProgressDialogClass:overview"> FoamProgressDialogClass</A>
</UL>
<LI> Indicators
<UL>
	<LI><A HREF = "#IX_GreyGenInteractionClass:overview"> GreyGenInteractionClass </A>
	<LI><A HREF = "#IX_IndicatorClass:overview"> IndicatorClass </A>
<LI><A HREF = "#IX_IconIndicatorClass:overview"> IconIndicatorClass </A>
<LI><A HREF = "#IX_LevelIndicatorClass:overview"> LevelIndicatorClass </A>
<LI><A HREF = "#IX_IndicatorInteractionClass:overview"> IndicatorInteractionClass </A>
</UL>
<LI> Filter List
<UL>
<LI> <A HREF = "#IX_FilterListClass:overview"> FilterListClass </A>
<LI> <A HREF = "#IX_FilterTextClass:overview"> FilterTextClass </A>
</UL>
<LI> Underlined Text
<UL>
<LI> <A HREF = "#IX_UnderlinedGenTextClass:overview"> UnderlinedGenTextClass </A>
<LI> <A HREF = "#IX_UnderlinedVisTextClass:overview"> UnderlinedVisTextClass </A>
</UL>
<LI>Text Style Controllers
<UL>
<LI> <A HREF = "#IX_FoamTextStyleControlClass:overview"> FoamTextStyleControlClass</A>
	<LI> <A HREF = "#IX_FoamFontControlClass:overview"> FoamFontControlClass </A>
<LI> <A HREF = "#IX_FoamPointSizeControlClass:overview"> FoamPointSizeControlClass</A>
	<LI> <A HREF = "#IX_FoamJustificationControlClass:overview"> FoamJustificationControlClass </A>
</UL>
</UL>



<DIV>
<A NAME="foam_ui_classes.htm_IX_FFileSelectorClass:overview">
 </A>
<H2 CLASS="refHeading">
FFileSelectorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>GenFileSelectorClass</CODE></P>
<P>
Use a <CODE>FFileSelectorClass</CODE> when you do not need a controller and the associated <CODE><A HREF = "9000UI_4.htm">ComplexMoniker</A></CODE> UI to select a file but only want to display a list of files (if you do want a full controller with complete UI, use <CODE>FileOpenControlClass</CODE>). <CODE>FFileSelectorClass</CODE> objects allow you to get and set the directory path using the <CODE>FDocumentDir</CODE> enum values for the directories which are specific to the Nokia 9000i Communicator. 
<P>
<CENTER>
<IMG SRC = "filesel.gif" WIDTH = 642 HEIGHT = 202><BR>
<EM>An example of a <CODE>FFileSelectorClass</CODE> file selector.</EM>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FileOpenControlClass</CODE>, <CODE>FFileSelectorClass</CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_ExtendedFileSelectorClass:overview">
 </A>
<H2 CLASS="refHeading">
ExtendedFileSelectorClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>GenFileSelectorClass</CODE>, but is a variant class.</P> 
<P>
This class is not available on build 4.8.8 or earlier versions of 
the Communicator.
<P>
The <CODE>ExtendedFileSelectorClass</CODE> expands the functionality of any subclass of <CODE><A HREF = "../../Files/GenFileSelector/index.htm">GenFileSelectorClass</A></CODE>, usually <CODE>FFileSelectorClass</CODE>. It allows multiple files to be selected, optionally provides the user with a search box that narrows the list of files to match the text typed in the search box, and can find files in any directory or subdirectory, not just the directories represented by the enumerated type <CODE>FDocumentDir</CODE>. 
<P>
<CENTER>
<IMG SRC = "efilesel.gif" WIDTH = 642 HEIGHT = 485>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> ExtendedFileSelectorClass, FFileSelectorClass.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_ComplexMonikerClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_4.htm">ComplexMonikerClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../SysObjects/Gen/index.htm">GenClass</A></CODE>, but is a variant class.</P> 
<P>

The <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> allows developers to create a moniker that contains both text and a bitmap icon. Since the text and icon are referred to generically, it is easy to localize the moniker. A complex moniker is a variant class - its parent class is dynamically created at runtime - so it can assume a variety of forms. The superclass of a <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> object may be any child of <CODE>GenClass</CODE>. This allows complex monikers to be:
<UL>
<LI>Triggers
<LI>Dialog boxs
<LI>Lists (items, grouped items, boolean items, contacts, or a dynamic list)
</UL>

While each of the above items behaves quite differently, they all share the <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> behavior of displaying a text and icon moniker.
<P>
<CENTER>
<IMG SRC = "cmplxmon.gif" WIDTH = 642 HEIGHT = 289>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A>,</CODE>
<CODE><A HREF = "../../UI/Triggers/index.htm">GenTriggerClass</A>, </CODE>
<CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_11.htm">GenBooleanGroupClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_d.htm">GenDynamicListClass</A>, </CODE> or
<CODE><A HREF = "../../Nokia9000/ContactDB/ContactDB_1.htm">ContactListClass</A></CODE>.
</P>
</DIV>





<DIV>
<A NAME="foam_ui_classes.htm_IX_TwoLevelTriggerClass:overview">
 </A>
<H2 CLASS="refHeading">
TwoLevelTriggerClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A></CODE></P> 
<P>
Applications that require more than four triggers may establish two panes of triggers. The user can toggle between these two panes using two <CODE>TwoLevelTriggerClass</CODE> trigger objects which usually have the monikers &quot;More&quot; or &quot;Back&quot;. They are typically put in the fouth slot (slot 3). Since the &quot;More&quot; and &quot;Back&quot; triggers take up two slots, an application which uses two panes of triggers may define up to six of its own triggers.
<P>
<CENTER>
<IMG SRC = "twolvltrgr.gif" WIDTH = 642 HEIGHT = 514>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>TwoLevelTriggerClass</CODE>, <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A></CODE>, <CODE><A HREF = "../../Nokia9000/GrabBag/index.htm#ui">Nokia 9000i Communicator Topics: UI Conventions</A></CODE>
</P>
</DIV>








<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamSubApplicationClass:overview">
 </A> 
<H2 CLASS="refHeading">
<A HREF = "9000UI_1.htm">FoamSubApplicationClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../SysObjects/GenApp/index.htm">GenApplicationClass</A></CODE></P> 
<P>
Since the Nokia 9000i Communicator does not have a file manager per se, applications added to the device must be launched through a currently existing application. The <CODE>FoamSubApplicationClass</CODE> specifies in which pre-existing application an add-on application should reside.  
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_1.htm">FoamSubApplicationClass</A></CODE>, <CODE><A HREF = "../../SysObjects/GenApp/index.htm">GenApplicationClass</A></CODE>.
</P>
</DIV>

<P>

<DIV>
<A NAME="foam_ui_classes.htm_IX_GreyFrameClass:overview">
 </A>
<H2 CLASS="refHeading">
GreyFrameClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE></P> 
<P>
Draws a gray beveled box around its children.  It can be used with the
<A HREF = "9000UI_4.htm">ComplexMoniker</A> variant class to add a moniker label (see <CODE>FilterListClass</CODE>example).
<P>
<CENTER>
<IMG SRC = "greyframe.gif" WIDTH = 642 HEIGHT = 252>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>GreyFrameClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>





<DIV>
<A NAME="foam_ui_classes.htm_IX_ListWithUserDefinedClass:overview">
 </A>
<H2 CLASS="refHeading">
ListWithUserDefinedClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE></P> 
<P>

<CODE><A HREF = "../../UI/Lists/Lists_7.htm#IX_GenItemClass">GenItemClass</A></CODE> and <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE> work together to display a list of static monikers that the user may choose from.  <CODE>ListWithUserDefinedClass</CODE>
expands this to allow the user to navigate to an object and input information.
The additional item may be a <CODE>UnderlinedTextWithListClass</CODE>,
<CODE>TextWithListClass</CODE>, or <CODE>GenValueWithListClass</CODE>.


<P>
<CENTER>
<IMG SRC = "listwithuser.gif" WIDTH = 642 HEIGHT = 264>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>ListWithUserDefinedClass</CODE>, <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE>.
</P>
</DIV>







<DIV>
<A NAME="foam_ui_classes.htm_IX_RepeatingGenGlyphClass:overview">
 </A>
<H2 CLASS="refHeading">
RepeatingGenGlyphClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE></P> 
<P>
<CODE>RepeatingGenGlyphClass</CODE> is used to create animations. It works be replacing the visMoniker of <CODE><A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE> with the application-defined sequence of bitmapped icons, which it then cycles through. One common use of <CODE>RepeatingGenGlyphClass</CODE> is in dialog boxes which are opened with <CODE>PutUpDialogViaUIThread()</CODE>. This is done so that the animation is processed by another thread and thus doesn't burden the application. 
<P>
<CENTER>
<IMG SRC = "rptgenglyph.gif" WIDTH = 642 HEIGHT = 485>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>RepeatingGenGlyphClass</CODE>, <CODE><A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></CODE>.
</P>
</DIV>




<HR>
<H2><EM>Dialogs</EM></H2>


<DIV>
<A NAME="foam_ui_classes.htm_IX_FlashingNoteClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_9.htm">FlashingNoteClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE></P> 
<P>
The <CODE>FlashingNoteClass</CODE> is used to flash a note on the screen for a set length of time. The application specifies the minimum and maximum time the note will remain on the screen. If the user presses a key after the note has been on screen for the minimum duration, the note dialog box is dismissed. This dialog runs on its own thread and takes the responsibility for dismissing and destroying itself.  
<P>
<CENTER>
<IMG SRC = "flashing.gif" WIDTH = 642 HEIGHT = 202>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF= "9000UI_9.htm">FlashingNoteClass</A></CODE>, <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_SelfDestroyingDialogClass:overview">
 </A>
<H2 CLASS="refHeading">
SelfDestroyingDialogClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE></P> 
<P>
The <CODE>SelfDestroyingDialogClass</CODE> is used to put up a dialog box that self-destructs upon dismissal.
<P>
<CENTER>
<IMG SRC = "selfdestroy.gif" WIDTH = 642 HEIGHT = 202>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>SelfDestroyingDialogClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>




<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamProgressDialogClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
When an application starts a process that may take a while, it is good practice to put up a <CODE>FoamProgressDialogClass</CODE> dialog which notifies the user that the application is working and which indicates the status of the process. This dialog is put up on its own thread. The process is indicated by an animation of gears grinding away and by the status text which the application may append. If the user chooses the provided &quot;Cancel&quot; trigger a message is sent which indicates that the process should be terminated.
<P>
<CENTER>
<IMG SRC = "progdlg.gif" WIDTH = 642 HEIGHT = 300>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></CODE>, <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE>.
</P>
</DIV>





<HR>
<H2><EM>Indicator Classes</EM></H2>

The indicator classes exist in the foam library to facilitate drawing the status indicator at the left of the Nokia 9000i Communicator screen. As such, they are usually not as useful as Gen classes. Below is a brief listing of these classes followed by a screen shot of several UI objects which instantiate these classes. 

<DIV>
<A NAME="foam_ui_classes.htm_IX_GreyGenInteractionClass:overview">
 </A> 
<H2 CLASS="refHeading">
GreyGenInteractionClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE> <A HREF = "../../SysObjects/GenDisp/Windows_4.htm">GenPrimaryClass</A> </CODE></P> 
<P>
This class creates a primary window with a gray background. It is an inappropriate base for most applications because it only draws properly when placed against the left edge of the screen and it puts a gray background behind the trigger menu,   thus making them look different from all other Communicator applications.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>GreyGenInteractionClass</CODE>, <CODE><A HREF = "../../SysObjects/GenDisp/Windows_4.htm">GenPrimaryClass</A> </CODE>.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_IndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
IndicatorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE> <A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE> </P> 
<P>
An <CODE>IndicatorClass</CODE> object is a GenGlyph that draws an etched border around itself. 
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IndicatorClass</CODE>, <CODE> <A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A> </CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_IconIndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
IconIndicatorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
This class is a GenGlyph that can draw one or two icons within etched borders from a
list of bitmaps.  The displayed icons can be changed dynamically.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IconIndicatorClass</CODE>, <CODE>IndicatorClass</CODE>.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_LevelIndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
LevelIndicatorClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
The <CODE>LevelIndicatorClass</CODE> draws a bitmap followed by a sequence of bitmaps. This is used for displaying a level indicator such as the battery charge. The number of levels or the bitmap label can be changed dynamically.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>LevelIndicatorClass</CODE>, <CODE>IndicatorClass</CODE>.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_IndicatorInteractionClass:overview">
 </A> 
<H2 CLASS="refHeading">
IndicatorInteractionClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
This makes a GenInteraction with an etched border.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IndicatorInteractionClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/index.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>

<CENTER>
<IMG SRC = "indicator.gif" WIDTH = 642 HEIGHT = 287>
</CENTER>

<P>
<HR>
<H2><EM>Filter Lists</EM></H2>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FilterListClass:overview">
 </A>
<H2 CLASS="refHeading">
FilterListClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Lists/index.htm#IX_GenDynamicListClass">GenDynamicListClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FilterTextClass:overview">
 </A>
<H2 CLASS="refHeading">
FilterTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>TextWithListClass</CODE>, which in turn inherits <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>.</P>
<P>
<CODE>FilterListClass</CODE> and <CODE>FilterTextClass</CODE> objects work together to provide the appropriate UI for interactive searches.

<P>
<CENTER>
<IMG SRC = "filterlist.gif" WIDTH = 642 HEIGHT = 247>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FilterListClass</CODE>, <CODE>FilterTextClass</CODE>, <CODE>TextWithListClass</CODE>, <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>.
</P>
</DIV>





<P>
<HR>
<H2><EM>Underlined Text</EM></H2>

<DIV>
<A NAME="foam_ui_classes.htm_IX_UnderlinedGenTextClass:overview">
 </A>
<H2 CLASS="refHeading">
UnderlinedGenTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_UnderlinedVisTextClass:overview">
 </A>
<H2 CLASS="refHeading">
UnderlinedVisTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Text/Text_19.htm">VisTextClass</A></CODE></P>
<P>

<CODE> UnderlinedGenTextClass</CODE> and <CODE>UnderlinedVisTextClass</CODE> objects behave like the associated <A HREF = "../../UI/Text/Text_1.htm">TextClass</A> objects except that the text area has a dotted underline. These classes are used extensively for text-entry fields  on the Nokia 9000i Communicator.

<P>
<CENTER>
<IMG SRC = "underlined.gif" WIDTH = 642 HEIGHT = 238>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>UnderlinedGenTextClass</CODE>, <CODE>UnderlinedVisTextClass</CODE>, <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>, <CODE><A HREF = "../../UI/Text/Text_19.htm">VisTextClass</A></CODE>.
</P>
</DIV>




<P>
<HR>
<H2><EM>Text Style Controllers</EM></H2>



<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamTextStyleControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamTextStyleControlClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamFontControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamFontControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
 <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamPointSizeControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamPointSizeControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamJustificationControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamJustificationControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
 <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P>
<P>

The controllers <CODE>FoamTextStyleControlClass</CODE>, <CODE>FoamFontControlClass</CODE>, <CODE>FoamPointSizeControlClass</CODE>, and/or
<CODE>FoamJustificationControlClass</CODE> attach to a text object and allow the user to change the displayed text styles. These controllers are functionally equivalent to the standard
text object controllers (<CODE><A HREF = "../../UI/Text/Text_26.htm#IX_TextStyleControlClass ">TextStyleControl</A></CODE>, <CODE><A HREF = "../../UI/Text/Text_26.htm#IX_FontControlClass">FontControl</A></CODE>, etc.), but they have UI and features customized for the Nokia 9000i Communicator.

<P>
<CENTER>
<IMG SRC = "foamfont.gif" WIDTH = 642 HEIGHT = 270>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FoamTextStyleControlClass</CODE>, <CODE>FoamFontControlClass</CODE>, <CODE>FoamPointSizeControlClass</CODE>, <CODE>FoamJustificationControlClass</CODE>, <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE>.
</P>
</DIV>




</P>



<HR>
<A NAME="9000UI_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1 
<A NAME="9000UI_1.htm_29193">
 </A>
FoamSubApplicationClass </H2>
<P>
Applications may be written to be incorporated into the 
Nokia 9000i Communicator as part of a special release. 
The Nokia 9000i Communicator does not have a file manager, 
per se, to enable launching these applications. The applications 
must be launched through a currently existing application. <CODE>
FoamSubApplicationClass</CODE>
 allows you to indicate under which pre-existing application the new application should reside.</P>
<P>
&quot;Add-on&quot; applications for the Nokia 9000i Communicator device, whether included on the device as part of a value-added release, or developed as an aftermarket product, will fall into one of three categories:</P>
<UL>
<LI>
Service applications that communicate to the outside world. </LI>
<LI>
System applications that perform a system function. (PC connectivity tools fall under this category, for example.)</LI>
<LI>
&quot;Extra&quot; applications that don't fall into either of the two prior cases.</LI>
</UL>
<P>
For each of these cases, there is an application already on the device that launches the sub-application. Service applications are launched using the SVCAPPS launcher; system applications use the SYSAPPS launcher; extra applications use the EXTRAPPS launcher.</P>
<P>
Add-on applications are declared using the FoamSubApplication object, and an instance data field is set within the object indicating the &quot;main&quot; application it should be tied with.</P>
<P>
Because a sub-application is not a separate application, special care needs to be taken when the sub-application is closed. This is discussed in <A HREF="#9000UI_3.htm_29522"> Using a FoamSubApplication Object</A>
.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_2.htm">FoamSubApplicationClass Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_3.htm">Using a FoamSubApplication Object</A></P>
<HR>
<A NAME="9000UI_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1.1 <A HREF="#9000UI_1.htm">FoamSubApplicationClass</A>: 
<A NAME="9000UI_2.htm_74484">
 </A>
FoamSubApplicationClass Instance Data</H3>
<P>
There is only one instance data field in a <CODE>
FoamSubApplicationClass</CODE>
 object. This field is noted below.</P>
<P CLASS="figTitle">
Code Display 2-1 FoamSubApplicationClass Instance Data</P>
<PRE>@instance FApplication 	FSAI_launcherApp;</PRE>
<P>
FSAI<CODE>
_launcherApp</CODE>
 stores an <CODE>
FApplication</CODE>
 type referring to the application it should reside under.</P>
<P>
For FoamSubApplication objects, the following <CODE>
FApplication</CODE>
 values are the only values that are relevant:</P>
<DL>
<DT>
	FA_SERVICES_APP</DT><DD>
FA_SYSTEM_APP<BR>
FA_EXTRAS_APP</DD>
</DL>
<HR>
<A NAME="9000UI_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1.2 <A HREF="#9000UI_1.htm">FoamSubApplicationClass</A>: 
<A NAME="9000UI_3.htm_29522">
 </A>
Using a FoamSubApplication Object</H3>
<PRE>MSG_FSA_RETURN_TO_LAUNCHER</PRE>
<P>
FoamSubApplication objects do not close like other applications. Because of this, they need to provide their own special &quot;Close&quot; trigger. However, FoamSubApplication objects should not simply &quot;close&quot; when the user presses this trigger. Instead, they should send <EM>
MSG_FSA_RETURN_TO_LAUNCHER</EM>
 to this FoamSubApplication object.</P>
<P>
This message changes the <CODE>
[hardIconBar]</CODE>
 entry of the .INI file for the sub-application to be the launcher application (stored in FSAI_<CODE>
launcherApp</CODE>
). This allows the sub-application to seemingly close without closing the parent application. It is the responsibility of the application to provide a &quot;Close&quot; trigger that sends this message to the <CODE>
FoamSubApplicationClass</CODE>
 object.</P>
<P>
The &quot;Close&quot; trigger is declared as a <CODE>
ComplexMonikerClass</CODE>
 object of type CMT_CLOSE. The ComplexMoniker is discussed more fully in <A HREF="#9000UI_4.htm_93889"> ComplexMonikerClass</A>
.</P>
<P CLASS="figTitle">
Code Display 2-2 Using the FoamSubApplicationClass Object</P>
<PRE>/*
 * Declare the FoamSubApplication object as you would a normal GenApplication 
 * object. This sub-app will be launched from the Extras application.
 */</PRE>
<PRE>@start   AppResource</PRE>
<PRE>@object FoamSubApplicationClass MyApp = {
    GI_comp = @MyPrimary;
    FSAI_launcherApp = FA_EXTRAS_APP;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = @MyPrimary;
    GI_visMoniker = list { @MyTextMoniker };
}</PRE>
<PRE>@visMoniker MyTextMoniker = &quot;Nokia UI\rSample App&quot;;</PRE>
<PRE>@end     AppResource;</PRE>
<PRE>/*
 * Somewhere in your sub-app, create a CMT_CLOSE trigger.
 */</PRE>
<PRE>@object ComplexMonikerClass CloseTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLOSE;</PRE>
<PRE>    GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;
    GTI_destination = @TemplateApp;</PRE>
<PRE>    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;</PRE>
<PRE>    /* 
     * Close Command triggers should always be in the fourth position (3 because 
     * HINT_SEEK_SLOT refers to zero-based slot positions).
     */
    HINT_SEEK_SLOT = 3;</PRE>
<PRE>}</PRE>
<HR>
<A NAME="9000UI_4.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2 
<A NAME="9000UI_4.htm_93889">
 </A>
ComplexMonikerClass </H2>
<P>
<CODE>
ComplexMonikerClass</CODE>
 is a versatile class that provides powerful behavior with little overhead. A complex moniker serves two purposes. First, it allows a developer to easily create a moniker containing both graphics and text. Second, it allows both text and graphics to be easily localized by referring to both items &quot;generically.&quot; </P>
<P>
A complex moniker may take a variety of forms. <CODE>
ComplexMonikerClass</CODE>
 is what's known in GEOS as a &quot;variant&quot; class, which means that the object's parent class is dynamically assigned when the object is visually built. </P>
<P>
A complex moniker may contain both a text string and a bitmap. The text string may be either a single line or two lines (separated by a `\r' character in the text buffer). If the text is two lines, it will be right-justified; this allows text strings in the command bar to align properly.

</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_5.htm">ComplexMoniker Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_6.htm">ComplexMoniker Usage</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_7.htm">ComplexMoniker Messages</A></P>
<HR>
<A NAME="9000UI_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.1 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_5.htm_40001">
 </A>
ComplexMoniker Instance Data</H3>
<P>
<CODE>
ComplexMonikerClass</CODE>
 contains the following instance data:</P>
<P CLASS="figTitle">
Code Display 2-3 ComplexMonikerClass Instance Data</P>
<PRE>ComplexMoniker			ClassName</PRE>
<PRE>@instance TextStyle			CMI_textStyle = (TS_BOLD);</PRE>
<PRE>@instance word 			CMI_topText;</PRE>
<PRE>@instance word 			CMI_iconBitmap;</PRE>
<PRE>@instance byte 			CMI_fontSize;</PRE>

<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_29473">
 </A>
The ComplexMoniker Keyword</H4>
<P>
Because <CODE>
ComplexMonikerClass</CODE>
 is a variant class, it needs to have its superclass assigned when it is built. The <EM>
ComplexMoniker</EM>
 keyword represents the parent class of the complex moniker. By setting this keyword to a class name the parent class is changed from the default superclass <CODE>GenClass</CODE> to the specified class. Any child of <CODE>GenClass</CODE> may be a complex moniker superclass. The following are commonly used superclasses:
</P>
<DL>
<DD><CODE>
GenTriggerClass<BR>
GenInteractionClass<BR>
GenItemGroupClass<BR>
GenItemClass<BR>
GenBooleanGroupClass<BR>
GenDynamicListClass<BR>
ContactListClass</CODE>
</DD>
</DL>
<P>
Each of these classes will behave quite differently, but all will exhibit the same characteristics in displaying their text and icon monikers that are gained through using <CODE>
ComplexMonikerClass.</CODE>
 Note that using a ComplexMoniker object will cause the specific UI to ignore any moniker stored in the GI_<CODE>
visMoniker</CODE>
 instance data field in the above classes.</P>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_47578">
 </A>
The ComplexMoniker Text</H4>
<P>
CMI<CODE>
_topText</CODE>
 stores the &quot;text&quot; to display. This may be either a Chunkhandle to a text string, or a <CODE>
ComplexMonikerText</CODE>
 identifier. If the value is a <CODE>
ComplexMonikerText</CODE>
 identifier, the specific UI will determine what exact text is displayed.</P>
<P>
As noted, the text may contain two lines. The top text is limited to COMPLEX_MONIKER_MAX_TOP_TEXT_LENGTH while the bottom is limited to COMPLEX_MONIKER_MAX_BOTTOM_TEXT_LENGTH.</P>
<P>
Below is a complete list of types; in most cases the (English) text on the Nokia 9000i device is similar, if not identical, to the text alluded to by the identifier's name. Those cases where the actual text is noticeably different are noted. Using such an identifier is beneficial for localization purposes.</P>
<DL>
<DT>
CMT_NULL</DT><DD>Never set a moniker to this value. It exists purely as a placeholder.</DD>
<DT>
Basic strings:</DT>
<DT>
	CMT_OK</DT><DD>
CMT_CLOSE<BR>
CMT_CANCEL<BR>
CMT_YES<BR>
CMT_NO</DD>
<DT>
Command strings:</DT>
<DT>
	CMT_CLEAR</DT><DD>
CMT_CLEAR_ALL<BR>
CMT_CHANGE<BR>
CMT_RENAME	<BR>
CMT_COPY<BR>
CMT_SETTINGS<BR>
CMT_OPEN<BR>
CMT_CREATE_NEW		&quot;New&quot;<BR>
CMT_DELETE<BR>
CMT_ROTATE<BR>
CMT_SELECT<BR>
CMT_START<BR>
CMT_GO<BR>
CMT_INSTALL<BR>
CMT_DEINSTALL		&quot;Remove&quot;<BR>
CMT_NEXT<BR>
CMT_PREVIOUS<BR>
CMT_USER_DEFINED		&quot;User defined:&quot;<BR>
CMT_ZOOM<BR>
CMT_ZOOM_IN<BR>
CMT_ZOOM_OUT<BR>
CMT_VIEWING_TOOLS<BR>
CMT_OPTIONS</DD>
<DT>
Communication strings:</DT>
<DT>
	CMT_PHONE	&quot;On&quot;</DT><DD>
CMT_CALL<BR>
CMT_CALL_LOWERCASE		&quot;Call&quot;<BR>
CMT_SEND<BR>
CMT_SEND_OPTIONS<BR>
CMT_CONNECT<BR>
CMT_CALLS<BR>
CMT_FAXES<BR>
CMT_DATA_CALLS<BR>
CMT_MESSAGES<BR>
CMT_RECENT_CALLS<BR>
CMT_RECENT_FAXES		&quot;Recent numbers&quot;<BR>
CMT_RECENT_MESSAGES		&quot;Recent numbers&quot;<BR>
CMT_RECEIVED_CALLS<BR>
CMT_RECEIVED_FAXES		&quot;Received fax numbers&quot;<BR>
CMT_RECEIVED_MESSAGES		&quot;Received message numbers&quot;<BR>
CMT_MISSED_CALLS<BR>
CMT_LAST_DIALED_CALLS		&quot;Dialed calls&quot;<BR>
CMT_TO_COLON		&quot;To:&quot;<BR>
CMT_FROM_COLON		&quot;From:&quot;<BR>
CMT_TEXT_SEND		&quot;Send text&quot;<BR>
CMT_TEXT_CAPTURE		&quot;Capture text&quot;<BR>
CMT_CAPTURE<BR>
CMT_STOP_CAPTURE<BR>
CMT_FORWARD_FAX		&quot;Forward&quot;<BR>
CMT_SELECT_RECEIVER		&quot;Recipient&quot;<BR>
CMT_HANGUP<BR>
CMT_FORWARD<BR>
CMT_REPLY</DD>
<DT>
Miscellaneous commands:</DT>
<DT>
	CMT_CLEAR_LIST</DT><DD>
CMT_NO_CONTACT_INFORMATION		&quot;No log information&quot;<BR>
CMT_CONTACT_CARD<BR>
CMT_NONE<BR>
CMT_CLEAR_ALL_COMMAND<BR>
CMT_ACCEPT<BR>
CMT_RESET<BR>
CMT_STOP<BR>
CMT_ACTIVATE<BR>
CMT_DISABLE<BR>
CMT_HELP<BR>
CMT_BACK<BR>
CMT_SPECIAL_KEYS_COMMAND		&quot;Keys&quot;<BR>
CMT_SPECIAL_KEYS<BR>
CMT_TEXT<BR>
CMT_TEXTS<BR>
CMT_ZOOM_PLUS		&quot;Zoom in&quot;<BR>
CMT_ZOOM_MINUS		&quot;Zoom out&quot;<BR>
CMT_INSERT<BR>
CMT_OFF<BR>
CMT_ON<BR>
CMT_MENU          /* Not available on build 4.8.8 or earlier versions of the Communicator */<BR>
CMT_SEARCH      /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P CLASS="figTitle">
Code Display 2-4 Setting a Complex Moniker's Text</P>
<PRE>/* 
 * The text in a complex moniker is stored within the CMI_topText instance field. 
 * This text may either be referenced by a ChunkHandle ...
 */</PRE>
<PRE>@object ComplexMonikerClass MyMoniker = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @MyText;
}</PRE>
<PRE>/* Use the TCHAR type to ensure the text is DBCS-compliant. */</PRE>
<PRE>@chunk TCHAR MyText[] = &quot;Sample Text&quot;;</PRE>
<PRE>/* 
 * ... or CMI_topText can store a ComplexMonikerText type which indicates the text 
 * generically. 
 */</PRE>
<PRE>@object ComplexMonikerClass MyClearTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLEAR;
}</PRE>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_88722">
 </A>
The ComplexMoniker Icon Bitmap</H4>
<P>
CMI_<CODE>
iconBitmap</CODE>
 stores the bitmap to display within this moniker. This may either be a ChunkHandle to a Bitmap structure or a member of the <CODE>
ComplexMonikerBitmap</CODE>
 types. These types are enumerated below:</P>
<DL>
<DT>
	CMB_LEFT_FINGER</DT><DD>
CMB_RIGHT_FINGER<BR>
CMB_CONTACT_CARD<BR>
CMB_CONTACT_LIST<BR>
CMB_SPEED_DIAL<BR>
CMB_SETTINGS_TITLE_ICON<BR>
CMB_SERVICES_VIEW<BR>
CMB_SERVICES_DEFINE<BR>
CMB_QUESTION_ICON<BR>
CMB_OPEN_FOLDER<BR>
CMB_DRAWER<BR>
CMB_RENAME_COPY<BR>
CMB_FOLDER<BR>
CMB_SECURITY_SUCCESS<BR>
CMB_SECURITY_ERROR<BR>
CMB_PC_ICON<BR>
CMB_INPUT_TITLE_ICON<BR>
CMB_WARNING_TITLE_ICON<BR>
CMB_SEARCH   /* Not available on build 4.8.8 or earlier versions of the Communicator */ <BR>
CMB_SMS_CARD_ICON   /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P>
Again, using a generic identifier eases localization.</P>
<P>
You can create your own bitmaps by using the GEOS Icon Editor. To do so, perform the following steps:</P>
<UL>
<LI>
Start GEOS (C:\PCGEOS\GEOS2XNC\LOADER.EXE</LI>
<LI>
Launch the Icon Editor application.</LI>
<LI>
Select either the 5th format (32x20 monochrome) or the 1st format (48x30 color). The first is used to create a monochrome bitmap; the second is used to create a 4-bit grayscale bitmap.</LI>
<LI>
Edit the bitmap as desired. </LI>
<LI>
The Nokia 9000i Communicator is a grayscale device. It is capable of handling 4-bit grayscale bitmaps (<CODE>
BMFormat</CODE>
 of BMF_4BIT). You may also create simple monochrome bitmaps (<CODE>
BMFormat</CODE>
 of BMF_MONO).</LI>
<LI>
The GEOS Icon Editor only creates color bitmaps. The following colors in the Icon Editor will be mapped to the matching grey-scale shades on the device to create a grayscale bitmap:<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Icon Editor Color</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Nokia 9000i</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT_VIOLET</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT GRAY</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK_GREEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK GRAY</P>
</TD>
</TR>
</TABLE>

(For more information about mapping colors to Nokia 9000i Communicator grays, refer to the <A HREF = "../../Nokia9000/GrabBag/index.htm#grayscale">N9000i Topics Sheet</A>.)
</LI>
<LI>
Write the file out as <CODE>
filename</CODE>
.goh using the following options:<BR>
		Current Format<BR>
		Vismoniker source code<BR>
		Compacted<BR>
		Write mask (default)</LI>
<LI>
Edit the first line of the <EM>
filename</EM>
.goh file and replace this line:</LI>
</UL>
<PRE>@visMoniker Moniker ={</PRE>
<UL>
<LI>
with:</LI>
</UL>
<PRE>@chunk byte <CODE>YourIconName</CODE>[] = {</PRE>
<UL>
<LI>
Delete the following lines from the beginning of the file:</LI>
</UL>
<PRE>size = &lt;...&gt;;
style = &lt;...&gt;;
color = &lt;...&gt;;
aspectRatio = &lt;...&gt;;
cachedSize = &lt;...,...&gt;;
gstring { GSFillBitmapAtCP(&lt;...&gt;),</PRE>
<UL>
<LI>
Delete the following lines from the end of the file:</LI>
</UL>
<PRE>GSEndString()
}</PRE>
<UL>
<LI>
Finally, add a semi-colon to the end of the file.</LI>
</UL>
<P>
Your resulting bitmap, ready for inclusion in your app, should look like this:</P>
<PRE>@chunk byte MyIconName[] = {
    Bitmap (32,20,BMC_PACKBITS,
            (BMT_MASK|BMF_4BIT)),
    0xfd, 0xff, 0x03, 0xbf, ...
};</PRE>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_69782">
 </A>
Text Styles</H4>
<P>
CMI_<CODE>
textStyle</CODE>
 stores a GEOS <CODE>
TextStyle</CODE>
, defined in <STRONG CLASS="fileName">
graphics.h</STRONG>
. By default, text is shown as TS_BOLD. The full list of styles appears below:</P>
<DL>
<DT>
	TS_BOLD		(default)</DT><DD>
TS_OUTLINE<BR>
TS_ITALIC<BR>
TS_SUPERSCRIPT<BR>
TS_SUBSCRIPT<BR>
TS_STRIKE_THRU<BR>
TS_UNDERLINE</DD>


</DL>
<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_56754">
 </A>
Font Sizes</H4>
<P>
CMI<CODE>
_fontSize</CODE>
 stores a font size (in points). There are four pre-established font sizes that you should choose from:</P>
<PRE>#define FOAM_LARGE_FONT_SIZE					20
#define FOAM_NORMAL_FONT_SIZE					18
#define FOAM_LIGHT_FONT_SIZE					17
#define FOAM_SMALL_FONT_SIZE					16</PRE>
<P>
The large font size is best reserved for commands and title bar monikers. In most other cases, use the normal font size.</P>
<P>
The default font can be obtained by those routines or objects that demand a font name by using the <CODE>
VisTextDefaultFont</CODE>
 value VTDF_RESPONDER. </P>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_95924">
 </A>
ComplexMoniker Vardata</H4>
<P>
There are several vardata attributes that you may attach to the Complex Moniker. These are noted below:</P>
<P CLASS="figTitle">
Code Display 2-5 ComplexMoniker Vardata</P>
<PRE>@vardata		void	ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;</PRE>
<PRE>@vardata		void	HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
@vardata		void	HINT_COMPELX_MONIKER_DONT_DRAW_SEPARATOR;</PRE>
<P>
ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT will position the icon bitmap (if any) to the left of the text.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DRAW_SEPARATOR</CODE>
 draws a single-line separator below the complex moniker.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DONT_DRAW_SEPARATOR</CODE>
 prevents the drawing of a single-line separator below the complex moniker.</P>

<HR>
<A NAME="9000UI_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.2 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_6.htm_55377">
 </A>
ComplexMoniker Usage</H3>
<PRE>MSG_COMPLEX_MONIKER_GET_MONIKER, MSG_COMPLEX_MONIKER_REPLACE_MONIKER</PRE>
<P>
In most cases, you will want to use a ComplexMoniker when you create Command triggers. Command triggers on the Nokia 9000i appear along the right edge of the screen, and correspond to the four off-screen buttons that they abut.</P>
<P>
To create a ComplexMoniker command trigger, follow these steps:</P>
<UL>
<LI>
Set the <CODE>
ComplexMoniker</CODE>
 keyword to <CODE>
GenTriggerClass</CODE>
.</LI>
<LI>
Include the hint HINT_SEEK_MENU_BAR and HINT_SEEK_REPLY_BAR in the object declaration.</LI>
<LI>
Set the HINT_SEEK_SLOT hint to 0,1,2, or 3, corresponding to the (zero-based) slot you wish to place the command trigger within.</LI>
</UL>

(If you are not creating a command trigger, set CMI<CODE>
_fontSize</CODE>
 to something other than FOAM_LARGE_FONT_SIZE.)
<P CLASS="figTitle">
Code Display 2-6 Complex Moniker Example (GenInteraction)</P>
<PRE>@object ComplexMonikerClass AboutBox = {</PRE>
<PRE>/* This object will behave as a GenInteration (grouping) object */
    ComplexMoniker = GenInteractionClass;
    CMI_topText = @AboutBoxTitle;
    CMI_iconBitmap = @AboutIcon;
    GI_comp = @AboutText;</PRE>
<PRE>/* Geometry Hints */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_DRAW_SHADOW;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;</PRE>
<PRE>/* ComplexMoniker Hints */</PRE>
<PRE>    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;</PRE>
<PRE>}</PRE>
<PRE>@chunk TCHAR AboutBoxTitle[] = &quot;CmplxMon Sample Application&quot;;</PRE>
<P CLASS="figTitle">
Code Display 2-7 ComplexMoniker Example (GenDynamicList)</P>
<PRE>&nbsp;</PRE>
<PRE>@object ComplexMonikerClass CMTextsList = {
    ComplexMoniker = GenDynamicListClass;
    CMI_topText = @CMTextsListTitle;
    CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
    CMI_iconBitmap = CMB_OPEN_FOLDER;
    GIGI_destination = process;
    GIGI_applyMsg = MSG_CMPLXMON_PROCESS_SHOW_CURRENT_CMTEXT;
    GDLI_queryMsg = MSG_CMPLXMON_PROCESS_GET_CMTEXT;</PRE>
<PRE>/* GDLI_numItems will be set at app-launch time. */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_DRAW_SHADOW;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    HINT_MINIMIZE_CHILD_SPACING;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_ITEM_GROUP_SCROLLABLE;
    ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;
    ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED;
    ATTR_GEN_ITEM_GROUP_STATUS_MSG =
	MSG_CMPLXMON_PROCESS_SHOW_CURRENT_CMTEXT;
    }
}</PRE>
<P CLASS="figTitle">
Code Display 2-8 ComplexMoniker Example (Command Trigger)</P>
<PRE>@object ComplexMonikerClass MyCommandTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @CommandTextTitle;
    GTI_actionMsg = MSG_GEN_INTERACTION_INITIATE;
    GTI_destination = @DialogThatThisTriggerBringsUp;
    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 0;
}</PRE>
<PRE>@chunk byte CommandTextTitle[] = &quot;I Commeand Thee!&quot;;</PRE>
<HR>
<A NAME="9000UI_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.3 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_7.htm_74855">
 </A>
ComplexMoniker Messages</H3>
<PRE>MSG_COMPLEX_MONIKER_GET_MONIKER, MSG_COMPLEX_MONIKER_REPLACE_MONIKER</PRE>
<P>
To retrieve a complex moniker, send the ComplexMoniker <CODE>
MSG_COMPLEX_MONIKER_GET_MONIKER</CODE>
. This message takes a single argument, a pointer to a structure of type <CODE>
GetComplexMoniker</CODE>
. The structure will be filled in with the relevant information by the message.</P>
<PRE>typedef struct {
    TextStyle				GCM_textStyle;
    byte				GCM_fontSize;
    ComplexMonikerText				GCM_topText;
    ComplexMonikerBitmap				GCM_iconBitmap;
} GetComplexMoniker;</PRE>
<P>
Send <CODE>
MSG_COMPLEX_MONIKER_REPLACE_MONIKER</CODE>
 to replace a complex moniker with a new moniker.</P>
<P>
This message takes two arguments: a <CODE>
ReplaceComplexMoniker</CODE>
 structure and a <CODE>
ReplaceComplexMonikerChunkHandles</CODE>
 structure.</P>
<P>
The <CODE>
ReplaceComplexMoniker</CODE>
 structure should hold the parameters for the new moniker.</P>
<PRE>typedef struct {
    TextStyle				RCM_textStyleSet;
    TextStyle				RCM_textStyleClear;
    word				RCM_fontSize;
    dword				RCM_topTextSource;
    dword				RCM_iconBitmapSource;
    ComplexMonikerSourceType				RCM_topTextSourceType;
    ComplexMonikerSourceType				RCM_iconBitmapSourceType;
    word				RCM_iconBitmapSize;
    RCMOverwrite				RCM_overwrite;
} ReplaceComplexMoniker;</PRE>
<P>
RCM_<CODE>
textStyleSet</CODE>
 stores a <CODE>
TextStyle</CODE>
 record of styles that should be set (masked) on top of any currently existing styles.</P>
<P>
RCM<CODE>
_textStyleClear</CODE>
 stores a <CODE>
TextStyle</CODE>
 record of styles that should be cleared if they are set among the currently existing styles.</P>
<P>
RCM<CODE>
_fontSize</CODE>
 stores the new font size. Pass 0 to indicate no change.</P>
<P>
RCM<CODE>
_topTextSource</CODE>
 stores a dword value containing, or pointing to, the source for the new text. The type of value stored here is indicated in RCM<CODE>
_topTextSourceType</CODE>
.</P>
<P>
RCM<CODE>
_iconBitmapSource</CODE>
 stores a dword value containing, or pointing to, the source for the new bitmap. The type of value stored here is indicated in RCM<CODE>
_iconBitmapSourceType.</CODE>
</P>
<P>
RCM_<CODE>
topTextSourceType</CODE>
 stores the type of text reference contained in RCM_<CODE>
topTextSource</CODE>
. </P>
<P>
RCM<CODE>
_iconBitmapSourceType</CODE>
 stores the type of bitmap reference contained in RCM_<CODE>
iconBitmapSource</CODE>
.</P>
<P>
<CODE>
RCM_iconBitmapSize</CODE>
 stores the size of the icon bitmap, in bytes. </P>
<P>
RCM<CODE>
_overwrite</CODE>
 indicates whether the existing complex moniker chunks should be overwritten. Pass TRUE if you wish this occur.</P>
<P>
<CODE>
MSG_COMPLEX_MONIKER_REPLACE_MONIKER</CODE>
 also passes a <CODE>
ReplaceComplexMonikerChunkHandles</CODE>
 structure. This structure is used to place returned chunk handles of the text and bitmap.</P>
<PRE>typedef struct {
    ChunkHandle			RCMCH_topText;
    word			RCMCH_unusedCX;
    ChunkHandle			RCMCH_iconBitmap;
    word			RCMCH_unusedBP;
} ReplaceComplexMonikerChunkHandles;</PRE>
<P>
<CODE>
RCMCH</CODE>
_<CODE>
topText</CODE>
 contains the ChunkHandle of the text portion of the new complex moniker. </P>
<P>
RCMCH<CODE>
_iconBitmap</CODE>
 contains the ChunkHandle of the bitmap (graphics) portion of the new complex moniker.</P>
<HR>
<A NAME="9000UI_8.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 3 
<A NAME="9000UI_8.htm_91280">
 </A>
Convenient Dialog Routines</H2>
<P>
The Foam library provides a number of routines useful for displaying simple dialog boxes to the user. Each of these displays a dialog box. The dialog box will have one or more buttons. Most of the functions have a return value; the function's return value will be an <CODE>
InteractionCommand</CODE>
 value corresponding to which button the user pressed to dismiss the dialog. The <CODE>
FoamDisplay...NoBlock()</CODE>
 routines don't have an explicit return value; they send a message if the user presses the OK button.</P>
<P>
The following routines are available:</P>
<DL>
<DT>
<CODE>
FoamDisplayWarning()</CODE>
, <CODE>
FoamDisplayWarningNoBlock() </DT><DD>
</CODE>
These routines present a dialog box notifying the user about an action. The user may dismiss the dialog, but may not cancel the action. The function takes one argument, the optr of a string buffer to display. This function has no return value.</DD>
<DT>
<CODE>
FoamDisplayError()</CODE>
, <CODE>
FoamDisplayErrorNoBlock()</DT><DD>
</CODE>
These routines present a dialog box notifying the user that an error has occurred. The user may dismiss the dialog via the OK button. The function takes one argument: the optr of the string buffer containing the text to display. The function has no return value.</DD>
<DT>
<CODE>
FoamDisplayOkCancelWarning()</DT><DD>
</CODE>
This function presents the user with a warning in an OK/Cancel dialog. The function takes one argument: the optr of the string buffer to display. This function returns an <CODE>
InteractionCommand</CODE>
 value; if the user presses the OK button, the function returns IC_APPLY.</DD>
<DT>
<CODE>
FoamDisplayQuestion()</DT><DD>
</CODE>
This routine presents a Yes/No dialog. It takes one argument, the optr of the text buffer containing the string to display. If the user presses the Yes button, the function will return IC_YES.</DD>
<DT>
<CODE>
FoamDisplayNote()</CODE>
, <CODE>
FoamDisplayNoteNoBlock()</DT><DD>
</CODE>
These functions display an OK dialog box displaying a text message to the user. The function takes one argument, the optr to a string buffer with the text to display.</DD>
<DT>
<CODE>
FoamDisplayDeleteWarning()</DT><DD>
</CODE>
This routine presents an OK/Cancel dialog box asking for a file deletion confirmation. This function takes three arguments: a pointer to a string buffer containing the file name, and optrs to two string chunks: one to display before the file name, and one to display after. If the function returns IC_YES, the user has confirmed that the file should be deleted.</DD>
<DT>
<CODE>
FoamDisplayDeleteWarningNoBlock()</DT><DD>
</CODE>
This routine presents an OK/Cancel dialog box asking for a file deletion confirmation. This function takes three arguments: the optr of the text string asking the user for confirmation, the message to send if the Delete button is pressed, and the object to send that message to. This function has no explicit return value. If the user Cancels the dialog, it won't send any message.</DD>
</DL>
<P>
For dialog box types not provided by these functions, you will have to set up your UI, using GenInteraction objects in the usual way--or you may use the <CODE>
FlashingNoteClass</CODE>
 or <CODE>
FoamProcessDialogClass</CODE>
, described later in this chapter.</P>
<HR>
<A NAME="9000UI_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4 
<A NAME="9000UI_9.htm_42272">
 </A>
FlashingNoteClass</H2>
<P>
Sometimes, you may want to send a notification to a user without requiring the user to respond. Ideally, you would like a dialog box to appear on screen for a few seconds, and then go away, or automatically disappear once any key is pressed. You can get this behavior with a <CODE>
FlashingNoteClass</CODE>
 object.

</P>
<P>
You can provide the following parameters to a Flashing Note object:</P>
<UL>
<LI>
A minimum duration to stay on-screen. After the minimum duration, the dialog can be dismissed by pressing any key.</LI>
<LI>
A maximum duration to stay on-screen. (The dialog will dismiss itself if this time is reached.)</LI>
</UL>
<P>
A Flashing Note should be placed as the root of an unattached tree within its own UI block (resource). In this manner, it will act as a template. To initiate the flashing note, call the routine <CODE>
PutUpDialogViaUIThread(), </CODE>
passing the optr of the dialog box template. This routine will copy the template resource, attach it to the application tree, and manage its thread of execution. The dialog will be run within the specific UI thread to avoid blocking the application thread.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_a.htm">FlashingNote Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_b.htm">Setting Up the Template</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_c.htm">Initiating and Destroying the Flashing Note</A></P>
<HR>
<A NAME="9000UI_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.1 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_a.htm_49772">
 </A>
FlashingNote Instance Data</H3>
<P>
<CODE>
FlashingNoteClass</CODE>
 only contains one piece of instance data, but it also changes the defaults for its superclass, <CODE>
GenInteractionClass</CODE>
.</P>
<P CLASS="figTitle">
Code Display 2-9 FlashingNoteClass Instance Data</P>
<PRE>#define FLASHING_NOTE_DEFAULT_DURATION						(3*60) /* 3 seconds */
#define FLASHING_NOTE_DEFAULT_MINIMUM_DURATION						(1*60) /* 1 second */</PRE>
<PRE>@instance 	word		FNI_duration;</PRE>
<PRE>@default GII_attrs =				GIA_NOT_USER_INITIATABLE | GIA_SYS_MODAL);
@default GII_visibility =				GIV_DIALOG;
@default GII_type = 				GIT_MULTIPLE_RESPONSE;
@default FNI_duration = 				FLASHING_NOTE_DEFAULT_DURATION;</PRE>
<PRE>@vardata word		HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS;
@vardata word		ATTR_FLASHING_NOTE_MINIMUM_DURATION;</PRE>
<P>
FNI<CODE>
_duration</CODE>
 stores the maximum duration (in ticks -- 1/60ths of a second) for the dialog to remain on-screen. Do not set this to zero; doing so will make the dialog box &quot;permanent&quot; and incapable of dismissal.</P>
<HR>
<A NAME="9000UI_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.2 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_b.htm_96600">
 </A>
Setting Up the Template</H3>
<P>
Usually, a <CODE>
FlashingNoteClass</CODE>
 object (and its children) should be contained within their own resource. The resource should remain unattached to the application tree. The routine <CODE>
PutUpDialogViaUIThread()</CODE>
 will take care of copying and attaching the group of objects.</P>
<P>
To set up your template, perform the following steps:</P>
<UL>
<LI>
Declare the template's resource and make it <CODE>
notDetachable</CODE>
.</LI>
<LI>
Define the root object as a <CODE>
FlashingNoteClass</CODE>
 object. </LI>
<LI>
Set the root object not usable (~GS_USABLE).</LI>
<LI>
Set the FNI_<CODE>
duration </CODE>
instance field to the number of ticks (1/60ths of a second) you wish to have the dialog box on-screen. By default, this is 180 ticks (3 seconds).</LI>
<LI>
If you want a minimum time for the dialog box to remain on-screen, add <CODE>
ATTR_FLASHING_NOTE_MINIMUM_DURATION</CODE>
 and set it to the number of ticks (1/60ths of a second) to remain on-screen. By default, this is 60 ticks (one second).</LI>
<LI>
Add <CODE>
HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS</CODE>
 if you don't want to manually destroy it.</LI>
<LI>
Add the hints <CODE>
HINT_WINDOW_NOT_TITLE_BAR</CODE>
 and <CODE>
HINT_DRAW_IN_BOX</CODE>
.</LI>
</UL>
<P CLASS="figTitle">
Code Display 2-10 FlashingNote Template</P>
<PRE>@start FlashingNoteTemplateResource, notDetachable;</PRE>
<PRE>@object FlashingNoteClass FlashingNoteTemplate = {
    GI_states = @default &amp; ~GS_USABLE;
    GI_comp = @DialogBoxTemplate;
    FNI_duration = 600;						/* 10 seconds */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS;
    HINT_WINDOW_NO_TITLE_BAR;
    ATTR_FLASHING_NOTE_MINIMUM_DURATION = 300;						/* 5 seconds */
}</PRE>
<PRE>/* 
 * We want a separator, so we will create a sub-group interaction as a complex
 * moniker.
 */</PRE>
<PRE>@chunk TCHAR DialogTemplateText[] = &quot;Flashing Note&quot;;</PRE>
<PRE>@object ComplexMonikerClass DialogBoxTemplate = {
    ComplexMoniker = GenInteractionClass;
    CMI_topText = @DialogTemplateText;
    CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
    GI_comp = @DialogText;</PRE>
<PRE>    HINT_PLACE_MONIKER_ABOVE;
    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    HINT_FIXED_SIZE = { SST_PIXELS | FOAM_DEFAULT_BUBBLE_WIDTH, 0 };
}</PRE>
<PRE>@chunk TCHAR DialogTextText[] = &quot;This particular flashing note will stay up a 
				minimum \r
				of 5 seconds, and will dismiss itself if you 
				press any key after that.\r\r\
				It will dismiss itself automatically after 10 
				seconds.\r&quot;;</PRE>
<PRE>@object GenTextClass DialogText = {
    GTXI_text = @DialogTextText;
    GI_attrs = @default | GA_READ_ONLY;
}</PRE>
<PRE>@end FlashingNoteTemplateResource;</PRE>
<HR>
<A NAME="9000UI_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.3 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_c.htm_80498">
 </A>
Initiating and Destroying the Flashing Note</H3>
<P>
Initiating the flashing note is simple. Simply call <CODE>
PutUpDialogViaUIThread()</CODE>
, passing the optr of the root Flashing Note object. </P>
<P>
If that object contains <CODE>
HINT_FLASHING_NOTE_DESTROY_AFTER_DISMISS</CODE>
, the dialog will be automatically detached and destroyed after it disappears from view (though the template block will remain untouched, of course).</P>
<HR>
<A NAME="9000UI_d.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5 
<A NAME="9000UI_d.htm_64511">
 </A>
FoamProgressDialog</H2>
<P>
When performing a time-consuming task, it is wise to prevent user frustration and use a <CODE>FoamProcessDialogClass</CODE> which informs the user of the task's progress and offers much-appreciated feedback.</P>
<P>
The FoamProgress dialog provides the following functionality:</P>
<UL>
<LI>
A default animation of gears in motion, informing the user that an action is taking place.</LI>
<LI>
A &quot;status indicator&quot; consisting of a series of five dots. These five dots get displayed as the task gets closer to completion. Next to this status indicator, you may include status text, if desired.</LI>
<LI>
Text which describes the task.</LI>
<LI>
A default Cancel trigger.</LI>


</UL>
<P>
As with a Flashing Note, a FoamProgress dialog should be placed as the root of an unattached tree within its own UI block (resource). To initiate the Foam Progress dialog, call the routine <CODE>
PutUpDialogViaUIThread(), </CODE>
passing the optr of the dialog box template. This routine will copy the template resource, attach it to the application tree, and manage its thread of execution. The dialog will be run within the specific UI thread, avoiding blocking the application thread. </P>
<P>
The dialog can be taken down with <CODE>
TakeDownDialogViaUIThread()</CODE>
 or by placing <CODE>
HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS</CODE>
 on the object.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_e.htm">FoamProgressDialog Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_f.htm">Setting Up the Template</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_10.htm">Using a FoamProgressDialog</A></P>
<HR>
<A NAME="9000UI_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.1 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_e.htm_35339">
 </A>
FoamProgressDialog Instance Data</H3>
<P>
<CODE>
FoamProgressDialogClass</CODE>
 contains several pieces of instance data, and also alters the defaults of its superclasses, <CODE>
GenControlClass</CODE>
 and <CODE>
GenInteractionClass</CODE>
.</P>
<P CLASS="figTitle">
Code Display 2-11 FoamProgressDialogClass Instance Data</P>
<PRE>@instance		ChunkHandle		FPDI_descriptionText			= NullChunk;
@instance		ChunkHandle		FPDI_statusText			= NullChunk;
@instance		optr		FPDI_cancelDestination			= NullOptr;
@instance		word		FPDI_cancelActionMsg			= 0;</PRE>
<PRE>@vardata void		HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS;
@vardata void		ATTR_FOAM_PROGRESS_DIALOG_DONT_DISMISS_ON_CANCEL;</PRE>
<PRE>@default		GII_visibility		= GIV_POPUP;
@default		GII_type		= GIT_MULTIPLE_RESPONSE;
@default		GII_attrs		= (GIA_NOT_USER_INITIATABLE | GIA_MODAL);
@default		GI_attrs		= GA_SIGNAL_INTERACTION_COMPLETE;
@default		GI_states		= (@default | GS_ENABLED);</PRE>
<PRE>&nbsp;</PRE>
<DL>
<DT>
FPDI<CODE>
_descriptionText</CODE>
 contains text to display to the user, informing them of the task being performed.</DT>
<DT>
FPDI_<CODE>
statusText</CODE>
 contains text to display next to the status indicator.</DT>
<DT>
FPDI<CODE>
_cancelDestination</CODE>
 contains the object that should receive notification (via FPDI<CODE>
_cancelActionMsg</CODE>
) if the action is cancelled by the user. The object must be capable of handling cancellation in a clean manner.</DT>
<DT>
FPDI_<CODE>
cancelActionMsg</CODE>
 stores the message to send if the user cancels the operation. This message will be sent to the FPDI_<CODE>
cancelDestination</CODE>
, where it should be handled appropriately.</DT>
<DT>
<CODE>
HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS</CODE>
 indicates that the resource block containing this dialog should be destroyed after the dialog is dismissed. This hint indirectly  calls <CODE>
UserDestroyDialog();</CODE>
 do not use this hint if you will use <CODE>
TakeDownDialogViaUIThread()</CODE>
 instead.</DT>
<DT>
<CODE>
ATTR_FOAM_PROGRESS_DIALOG_DONT_DISMISS_ON_CANCEL</CODE>
 indicates that the dialog will not be dismissed if the user presses &quot;Cancel.&quot; The application is responsible for handling this situation, and eventually dismissing the dialog.</DT>
</DL>
<HR>
<A NAME="9000UI_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.2 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_f.htm_36633">
 </A>
Setting Up the Template</H3>
<P>
A <CODE>
FoamProgressDialogClass</CODE>
 object (and its children) should be contained within its own resource. The resource should remain unattached to the application tree. The routine <CODE>
PutUpDialogViaUIThread()</CODE>
 will take care of copying and attaching the group of objects.</P>
<P>
To set up your template, perform the following steps:</P>
<UL>
<LI>
Declare the template's resource and make it <CODE>
notDetachable</CODE>
.</LI>
<LI>
Define the root object as a <CODE>
FoamProgressDialogClass</CODE>
 object. </LI>
<LI>
Set the root object not usable (~GS_USABLE).</LI>
<LI>
Set the object GIA_SYS_MODAL (and make sure to turn off its default GIA_MODAL flag).</LI>
<LI>
Set the FPDI_<CODE>
descriptionText</CODE>
 instance field with text describing the action.</LI>
<LI>
Set FPDI_<CODE>
statusText</CODE>
 with text to reside along the status indicator.</LI>
<LI>
Set HINT_DRAW_IN_BOX.</LI>
</UL>
<P CLASS="figTitle">
Code Display 2-12 FoamProgressDialog Template</P>
<PRE>@start FoamProgressDialogTemplate, notDetachable;</PRE>
<PRE>@chunk TCHAR DescriptionText[] = &quot;While, we're waiting a series of dots will appear below.&quot;</PRE>
<PRE>@chunk TCHAR StatusText[] = &quot;Here are the dots: &quot;;</PRE>
<PRE>@object FoamProgressDialogClass ProgressSample = {
    FPDI_descriptionText = @DescriptionText;
    FPDI_statusText = @StatusText;
    GII_attrs = (@default | GIA_SYS_MODAL) &amp; ~GIA_MODAL;
    GI_states = (@default) &amp; ~GS_USABLE;
    HINT_DRAW_IN_BOX;
}</PRE>
<PRE>@end FoamProgressDialogTemplate;</PRE>
<HR>
<A NAME="9000UI_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.3 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_10.htm_10384">
 </A>
Using a FoamProgressDialog</H3>
<P>
MSG_FOAM_PROGRESS_DIALOG_APPEND_STATUS_TEXT</P>
<P CLASS="figTitle">
Code Display 2-13 Using a FoamProgressDialog</P>
<PRE>&nbsp;</PRE>
<PRE>static ShowProgressDialog ()
{
    optr			progressDialog;
    word			i;
    SemaphoreError			semResult;
    TCHAR			statusAppendStr[] = &quot; . &quot;;</PRE>
<PRE>    progressDialog = PutUpDialogViaUIThread(@FoamProgressDialogTemplate);</PRE>
<PRE>    for ( i=0; i&lt;5; i++) {
	semResult = ThreadPTimedSem(cancelSemaphore, 0);</PRE>
<PRE>	if (semResult == SE_TIMEOUT) {
	    @send ProgressDialog::MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED();
	break;
	}</PRE>
<PRE>	else (
	    ThreadVSem(cancelSempahore);
	    TimerSkeep(30);
	    @call progressDialog::MSG_FOAM_PROGRESS_DIALOG_APPEND_STATUS_TEXT(
				statusAAppendStr);
	}
    }</PRE>
<PRE>    TimerSleep(30);
    TakeDownDialogViaUIThread(progressDialog);</PRE>
<PRE>}</PRE>
<PRE>/* Handler for MSG_MY_PROGRESS_DIALOG_CANCEL_TRIGGERED */</PRE>
<PRE>@method MyProgressDialogClass, MSG_MY_PROGRESS_DIALOG_CANCEL_TRIGGERED
{
    SemaphoreError			semResult;</PRE>
<PRE>    semResult = ThreadPSem(cancelSemaphore);</PRE>
<PRE>    EC_ERROR_IF(
	(semResult == SE_TIMEOUT), CANNOT_GRAB_SEMAPHORE_CANCELPROGDIALOG);
}</PRE>
<PRE>/* Handler for MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED */</PRE>
<PRE>@method MyProgressDialogClass, MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED
{
    ThreadVSem(cancelSemaphore);
}</PRE>
<HR>
<A NAME="9000UI_11.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 6 
<A NAME="9000UI_11.htm_53383">
 </A>
Routines for Lists</H2>
<P>
There are two routines useful for presenting the user with a list that is alphabetically sorted and/or presents has multi-column items.</P>
<P>
The <CODE>
FoamGetLexicalOrder()</CODE>
 routine is used for alphabetically ordering strings. It takes a char value and returns a byte-size number. This number represents that character's position in a sorted multi-language &quot;alphabet&quot;. If you are presenting the user with a sorted list of strings, this is the routine to use to sort the list.</P>
<P>
The <CODE>
CreateVisMonikerLine()</CODE>
 routine puts together a multi-column visual moniker. It puts the moniker together from an array of strings and/or bitmaps you supply. It returns the optr of the new moniker. It takes the following arguments:</P>
<UL>
<LI>
a font point size: All text will use this point size.</LI>
<LI>
a font: All text will use this font.</LI>
<LI>
the number of columns</LI>
<LI>
an array of <CODE>
VisMonikerColumn</CODE>
 structures: This data contains the data which will be combined into the multi-column moniker.</LI>
</UL>
<P>
The <CODE>
VisMonikerColumn</CODE>
 structure is defined:</P>
<PRE>typedef struct {
	byte            VMC_width; /* 0 for bitmaps */
	const void *    VMC_ptr; 
	Justification   VMC_just; 
	TextStyle       VMC_style; 
	ColumnBorder    VMC_border; 
} VisMonikerColumn;</PRE>
<P>
For each field, pass a <CODE>
VMC_width</CODE>
 to specify the number of pixels to allow to draw the text, or 0 to signal that this column is a bitmap. <CODE>
VMC_ptr</CODE>
 should point to a string buffer if the column contains text; it should point to a simple bitmap if the column contains a bitmap.</P>
<P>
When you are done using the multi-column moniker, it is up to you to free its memory. Get the memory block handle from the optr and pass that handle to <CODE>
MemFree()</CODE>
.</P>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
