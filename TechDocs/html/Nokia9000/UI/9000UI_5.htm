<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: 9000UI_5.htm,v 1.3 97/08/21 16:17:35 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> ComplexMoniker Instance Data</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Communicator UI</A>: 2.1 <A HREF="9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="40001">
 </A>
ComplexMoniker Instance Data</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="9000UI_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="9000UI_4.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 ComplexMonikerClass</A> 
<!-- to next --> | <A HREF="9000UI_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 ComplexMoniker Usage</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<CODE>
ComplexMonikerClass</CODE>
 contains the following instance data:</P>
<P CLASS="figTitle">
Code Display 2-3 ComplexMonikerClass Instance Data</P>
<PRE>ComplexMoniker			ClassName</PRE>
<PRE>@instance TextStyle			CMI_textStyle = (TS_BOLD);</PRE>
<PRE>@instance word 			CMI_topText;</PRE>
<PRE>@instance word 			CMI_iconBitmap;</PRE>
<PRE>@instance byte 			CMI_fontSize;</PRE>

<H2 CLASS="HeadingC">
<A NAME="29473">
 </A>
The ComplexMoniker Keyword</H2>
<P>
Because <CODE>
ComplexMonikerClass</CODE>
 is a variant class, it needs to have its superclass assigned when it is built. The <EM>
ComplexMoniker</EM>
 keyword represents the parent class of the complex moniker. By setting this keyword to a class name the parent class is changed from the default superclass <CODE>GenClass</CODE> to the specified class. Any child of <CODE>GenClass</CODE> may be a complex moniker superclass. The following are commonly used superclasses:
</P>
<DL>
<DD><CODE>
GenTriggerClass<BR>
GenInteractionClass<BR>
GenItemGroupClass<BR>
GenItemClass<BR>
GenBooleanGroupClass<BR>
GenDynamicListClass<BR>
ContactListClass</CODE>
</DD>
</DL>
<P>
Each of these classes will behave quite differently, but all will exhibit the same characteristics in displaying their text and icon monikers that are gained through using <CODE>
ComplexMonikerClass.</CODE>
 Note that using a ComplexMoniker object will cause the specific UI to ignore any moniker stored in the GI_<CODE>
visMoniker</CODE>
 instance data field in the above classes.</P>


<H2 CLASS="HeadingC">
<A NAME="47578">
 </A>
The ComplexMoniker Text</H2>
<P>
CMI<CODE>
_topText</CODE>
 stores the &quot;text&quot; to display. This may be either a Chunkhandle to a text string, or a <CODE>
ComplexMonikerText</CODE>
 identifier. If the value is a <CODE>
ComplexMonikerText</CODE>
 identifier, the specific UI will determine what exact text is displayed.</P>
<P>
As noted, the text may contain two lines. The top text is limited to COMPLEX_MONIKER_MAX_TOP_TEXT_LENGTH while the bottom is limited to COMPLEX_MONIKER_MAX_BOTTOM_TEXT_LENGTH.</P>
<P>
Below is a complete list of types; in most cases the (English) text on the Nokia 9000i device is similar, if not identical, to the text alluded to by the identifier's name. Those cases where the actual text is noticeably different are noted. Using such an identifier is beneficial for localization purposes.</P>
<DL>
<DT>
CMT_NULL</DT><DD>Never set a moniker to this value. It exists purely as a placeholder.</DD>
<DT>
Basic strings:</DT>
<DT>
	CMT_OK</DT><DD>
CMT_CLOSE<BR>
CMT_CANCEL<BR>
CMT_YES<BR>
CMT_NO</DD>
<DT>
Command strings:</DT>
<DT>
	CMT_CLEAR</DT><DD>
CMT_CLEAR_ALL<BR>
CMT_CHANGE<BR>
CMT_RENAME	<BR>
CMT_COPY<BR>
CMT_SETTINGS<BR>
CMT_OPEN<BR>
CMT_CREATE_NEW		&quot;New&quot;<BR>
CMT_DELETE<BR>
CMT_ROTATE<BR>
CMT_SELECT<BR>
CMT_START<BR>
CMT_GO<BR>
CMT_INSTALL<BR>
CMT_DEINSTALL		&quot;Remove&quot;<BR>
CMT_NEXT<BR>
CMT_PREVIOUS<BR>
CMT_USER_DEFINED		&quot;User defined:&quot;<BR>
CMT_ZOOM<BR>
CMT_ZOOM_IN<BR>
CMT_ZOOM_OUT<BR>
CMT_VIEWING_TOOLS<BR>
CMT_OPTIONS</DD>
<DT>
Communication strings:</DT>
<DT>
	CMT_PHONE	&quot;On&quot;</DT><DD>
CMT_CALL<BR>
CMT_CALL_LOWERCASE		&quot;Call&quot;<BR>
CMT_SEND<BR>
CMT_SEND_OPTIONS<BR>
CMT_CONNECT<BR>
CMT_CALLS<BR>
CMT_FAXES<BR>
CMT_DATA_CALLS<BR>
CMT_MESSAGES<BR>
CMT_RECENT_CALLS<BR>
CMT_RECENT_FAXES		&quot;Recent numbers&quot;<BR>
CMT_RECENT_MESSAGES		&quot;Recent numbers&quot;<BR>
CMT_RECEIVED_CALLS<BR>
CMT_RECEIVED_FAXES		&quot;Received fax numbers&quot;<BR>
CMT_RECEIVED_MESSAGES		&quot;Received message numbers&quot;<BR>
CMT_MISSED_CALLS<BR>
CMT_LAST_DIALED_CALLS		&quot;Dialed calls&quot;<BR>
CMT_TO_COLON		&quot;To:&quot;<BR>
CMT_FROM_COLON		&quot;From:&quot;<BR>
CMT_TEXT_SEND		&quot;Send text&quot;<BR>
CMT_TEXT_CAPTURE		&quot;Capture text&quot;<BR>
CMT_CAPTURE<BR>
CMT_STOP_CAPTURE<BR>
CMT_FORWARD_FAX		&quot;Forward&quot;<BR>
CMT_SELECT_RECEIVER		&quot;Recipient&quot;<BR>
CMT_HANGUP<BR>
CMT_FORWARD<BR>
CMT_REPLY</DD>
<DT>
Miscellaneous commands:</DT>
<DT>
	CMT_CLEAR_LIST</DT><DD>
CMT_NO_CONTACT_INFORMATION		&quot;No log information&quot;<BR>
CMT_CONTACT_CARD<BR>
CMT_NONE<BR>
CMT_CLEAR_ALL_COMMAND<BR>
CMT_ACCEPT<BR>
CMT_RESET<BR>
CMT_STOP<BR>
CMT_ACTIVATE<BR>
CMT_DISABLE<BR>
CMT_HELP<BR>
CMT_BACK<BR>
CMT_SPECIAL_KEYS_COMMAND		&quot;Keys&quot;<BR>
CMT_SPECIAL_KEYS<BR>
CMT_TEXT<BR>
CMT_TEXTS<BR>
CMT_ZOOM_PLUS		&quot;Zoom in&quot;<BR>
CMT_ZOOM_MINUS		&quot;Zoom out&quot;<BR>
CMT_INSERT<BR>
CMT_OFF<BR>
CMT_ON<BR>
CMT_MENU          /* Not available on build 4.8.8 or earlier versions of the Communicator */<BR>
CMT_SEARCH      /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P CLASS="figTitle">
Code Display 2-4 Setting a Complex Moniker's Text</P>
<PRE>/* 
 * The text in a complex moniker is stored within the CMI_topText instance field. 
 * This text may either be referenced by a ChunkHandle ...
 */</PRE>
<PRE>@object ComplexMonikerClass MyMoniker = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @MyText;
}</PRE>
<PRE>/* Use the TCHAR type to ensure the text is DBCS-compliant. */</PRE>
<PRE>@chunk TCHAR MyText[] = &quot;Sample Text&quot;;</PRE>
<PRE>/* 
 * ... or CMI_topText can store a ComplexMonikerText type which indicates the text 
 * generically. 
 */</PRE>
<PRE>@object ComplexMonikerClass MyClearTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLEAR;
}</PRE>


<H2 CLASS="HeadingC">
<A NAME="88722">
 </A>
The ComplexMoniker Icon Bitmap</H2>
<P>
CMI_<CODE>
iconBitmap</CODE>
 stores the bitmap to display within this moniker. This may either be a ChunkHandle to a Bitmap structure or a member of the <CODE>
ComplexMonikerBitmap</CODE>
 types. These types are enumerated below:</P>
<DL>
<DT>
	CMB_LEFT_FINGER</DT><DD>
CMB_RIGHT_FINGER<BR>
CMB_CONTACT_CARD<BR>
CMB_CONTACT_LIST<BR>
CMB_SPEED_DIAL<BR>
CMB_SETTINGS_TITLE_ICON<BR>
CMB_SERVICES_VIEW<BR>
CMB_SERVICES_DEFINE<BR>
CMB_QUESTION_ICON<BR>
CMB_OPEN_FOLDER<BR>
CMB_DRAWER<BR>
CMB_RENAME_COPY<BR>
CMB_FOLDER<BR>
CMB_SECURITY_SUCCESS<BR>
CMB_SECURITY_ERROR<BR>
CMB_PC_ICON<BR>
CMB_INPUT_TITLE_ICON<BR>
CMB_WARNING_TITLE_ICON<BR>
CMB_SEARCH   /* Not available on build 4.8.8 or earlier versions of the Communicator */ <BR>
CMB_SMS_CARD_ICON   /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P>
Again, using a generic identifier eases localization.</P>
<P>
You can create your own bitmaps by using the GEOS Icon Editor. To do so, perform the following steps:</P>
<UL>
<LI>
Start GEOS (C:\PCGEOS\GEOS2XNC\LOADER.EXE</LI>
<LI>
Launch the Icon Editor application.</LI>
<LI>
Select either the 5th format (32x20 monochrome) or the 1st format (48x30 color). The first is used to create a monochrome bitmap; the second is used to create a 4-bit grayscale bitmap.</LI>
<LI>
Edit the bitmap as desired. </LI>
<LI>
The Nokia 9000i Communicator is a grayscale device. It is capable of handling 4-bit grayscale bitmaps (<CODE>
BMFormat</CODE>
 of BMF_4BIT). You may also create simple monochrome bitmaps (<CODE>
BMFormat</CODE>
 of BMF_MONO).</LI>
<LI>
The GEOS Icon Editor only creates color bitmaps. The following colors in the Icon Editor will be mapped to the matching grey-scale shades on the device to create a grayscale bitmap:<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Icon Editor Color</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Nokia 9000i</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT_VIOLET</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT GRAY</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK_GREEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK GRAY</P>
</TD>
</TR>
</TABLE>

(For more information about mapping colors to Nokia 9000i Communicator grays, refer to the <A HREF = "../../Nokia9000/GrabBag/index.htm#grayscale">N9000i Topics Sheet</A>.)
</LI>
<LI>
Write the file out as <CODE>
filename</CODE>
.goh using the following options:<BR>
		Current Format<BR>
		Vismoniker source code<BR>
		Compacted<BR>
		Write mask (default)</LI>
<LI>
Edit the first line of the <EM>
filename</EM>
.goh file and replace this line:</LI>
</UL>
<PRE>@visMoniker Moniker ={</PRE>
<UL>
<LI>
with:</LI>
</UL>
<PRE>@chunk byte <CODE>YourIconName</CODE>[] = {</PRE>
<UL>
<LI>
Delete the following lines from the beginning of the file:</LI>
</UL>
<PRE>size = &lt;...&gt;;
style = &lt;...&gt;;
color = &lt;...&gt;;
aspectRatio = &lt;...&gt;;
cachedSize = &lt;...,...&gt;;
gstring { GSFillBitmapAtCP(&lt;...&gt;),</PRE>
<UL>
<LI>
Delete the following lines from the end of the file:</LI>
</UL>
<PRE>GSEndString()
}</PRE>
<UL>
<LI>
Finally, add a semi-colon to the end of the file.</LI>
</UL>
<P>
Your resulting bitmap, ready for inclusion in your app, should look like this:</P>
<PRE>@chunk byte MyIconName[] = {
    Bitmap (32,20,BMC_PACKBITS,
            (BMT_MASK|BMF_4BIT)),
    0xfd, 0xff, 0x03, 0xbf, ...
};</PRE>


<H2 CLASS="HeadingC">
<A NAME="69782">
 </A>
Text Styles</H2>
<P>
CMI_<CODE>
textStyle</CODE>
 stores a GEOS <CODE>
TextStyle</CODE>
, defined in <STRONG CLASS="fileName">
graphics.h</STRONG>
. By default, text is shown as TS_BOLD. The full list of styles appears below:</P>
<DL>
<DT>
	TS_BOLD		(default)</DT><DD>
TS_OUTLINE<BR>
TS_ITALIC<BR>
TS_SUPERSCRIPT<BR>
TS_SUBSCRIPT<BR>
TS_STRIKE_THRU<BR>
TS_UNDERLINE</DD>


</DL>
<H2 CLASS="HeadingC">
<A NAME="56754">
 </A>
Font Sizes</H2>
<P>
CMI<CODE>
_fontSize</CODE>
 stores a font size (in points). There are four pre-established font sizes that you should choose from:</P>
<PRE>#define FOAM_LARGE_FONT_SIZE					20
#define FOAM_NORMAL_FONT_SIZE					18
#define FOAM_LIGHT_FONT_SIZE					17
#define FOAM_SMALL_FONT_SIZE					16</PRE>
<P>
The large font size is best reserved for commands and title bar monikers. In most other cases, use the normal font size.</P>
<P>
The default font can be obtained by those routines or objects that demand a font name by using the <CODE>
VisTextDefaultFont</CODE>
 value VTDF_RESPONDER. </P>


<H2 CLASS="HeadingC">
<A NAME="95924">
 </A>
ComplexMoniker Vardata</H2>
<P>
There are several vardata attributes that you may attach to the Complex Moniker. These are noted below:</P>
<P CLASS="figTitle">
Code Display 2-5 ComplexMoniker Vardata</P>
<PRE>@vardata		void	ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;</PRE>
<PRE>@vardata		void	HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
@vardata		void	HINT_COMPELX_MONIKER_DONT_DRAW_SEPARATOR;</PRE>
<P>
ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT will position the icon bitmap (if any) to the left of the text.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DRAW_SEPARATOR</CODE>
 draws a single-line separator below the complex moniker.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DONT_DRAW_SEPARATOR</CODE>
 prevents the drawing of a single-line separator below the complex moniker.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="9000UI_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="9000UI_4.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 ComplexMonikerClass</A> 
<!-- to next --> | <A HREF="9000UI_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 ComplexMoniker Usage</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>

