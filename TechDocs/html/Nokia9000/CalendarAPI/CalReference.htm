<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>

<!-- $Id: CalReference.htm,v 1.4 97/08/21 16:27:53 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Reference</TITLE></HEAD>
<BODY BGCOLOR="#FFFFFF">
<H1 CLASS="sectionTitle">
<A HREF="index.htm">Calendar API</A>: 3 Reference</H1>

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A> 
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A> 
<!-- down to first child -->
<!-- to previous -->| <A HREF="CalSamplesTop.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> 2 Examples</A> 
<!-- to next -->
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->

<H1>Messages</H1>
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A><BR>
<A HREF="#IX_MSG_CALENDAR_GET_EVENT_BY_ID">MSG_CALENDAR_GET_EVENT_BY_ID</A><BR>
<A HREF="#IX_MSG_CALENDAR_MODIFY_EVENT_BY_ID">MSG_CALENDAR_MODIFY_EVENT_BY_ID</A><BR>
<A HREF="#IX_MSG_CALENDAR_DELETE_EVENT_BY_ID">MSG_CALENDAR_DELETE_EVENT_BY_ID</A><BR>
<A HREF="#IX_MSG_CALENDAR_CHECK_IF_EVENT_EXISTS">MSG_CALENDAR_CHECK_IF_EVENT_EXISTS</A>

<H1>Prototypes</H1>

<A HREF="#IX_CALENDAR_ADD_EVENT_CALLBACK_MSG">CALENDAR_ADD_EVENT_CALLBACK_MSG</A><BR>
<A HREF="#IX_CALENDAR_GET_EVENT_CALLBACK_MSG">CALENDAR_GET_EVENT_CALLBACK_MSG</A><BR>
<A HREF="#IX_CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG">CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG</A>

<H1>Structures</H1>

<A HREF="#IX_CalendarEventParamStruct">CalendarEventParamStruct</A><BR>
<A HREF="#IX_CalendarReturnedEventStruct">CalendarReturnedEventStruct</A><BR>
<A HREF="#IX_CalendarEventRepeatInfo">CalendarEventRepeatInfo</A><BR>
<A HREF="#IX_CalendarEventRepeatDurationData">CalendarEventRepeatDurationData</A>

<H1>WordFlags</H1>
<A HREF="#IX_CalendarAlarmStruct">CalendarAlarmStruct</A><BR>
<A HREF="#CalendarEventRepeatLength">CalendarEventRepeatLength</A>

<H1>ByteEnums</H1>
<A HREF="#IX_CalendarEventDescType">CalendarEventDescType</A><BR>
<A HREF="#CalendarAlarmIntervalType">CalendarAlarmIntervalType</A><BR>
<A HREF="#IX_CalendarEventRepeatDuration">CalendarEventRepeatDuration</A><BR>
<A HREF="#CalendarEventRepeatLengthUnitType">CalendarEventRepeatLengthUnitType</A><BR>
<A HREF="#CalendarEventRepeatWeekday">CalendarEventRepeatWeekday</A><BR>
<A HREF="#CalendarEventRepeatIntervalType">CalendarEventRepeatIntervalType</A><BR>
<A HREF="#IX_CalendarEventRepeatInterval">CalendarEventRepeatInterval</A>

<H1>enums</H1>
<A HREF="#IX_CalendarEventError">CalendarEventError</A><BR>
<A HREF="#CalendarToDoItemStatus">CalendarToDoItemStatus</A>
<HR>

<DIV>
<A NAME="IX_MSG_CALENDAR_ADD_EVENT"></A>
<H1 CLASS="refHeading">
MSG_CALENDAR_ADD_EVENT</H1>

<PRE CLASS="syntax">void        MSG_CALENDAR_ADD_EVENT(
        <A HREF="#IX_CalendarEventParamStruct">CalendarEventParamStruct</A>
                         *params,
        optr             completionOptr,
        Message          completionMsg); </PRE>

<P>Adds an event to the calendar database. Only ordinary, multi-day, and
to-do list events are supported; repeating events are not.</P>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>*params</EM> </DT>

<DD>Pointer to a <CODE>CalendarEventParamStruct</CODE> structure holding the
event you are adding.</DD>

<DT><EM>completionOptr</EM> </DT>

<DD>Optr to the object in your application to receive the callback reply
message; specify zero (0) for no callback.</DD>

<DT><EM>completionMsg</EM> </DT>

<DD>Name of your callback-handling message.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing. Error status and event ID (if successful) are
passed to your callback method, if specified.</P>

<P CLASS="refField"><STRONG>Include:</STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_CALENDAR_ADD_EVENT_CALLBACK_MSG">CALENDAR_ADD_EVENT_CALLBACK_MSG</A>
prototype. </P>
</DIV>

<DIV>
<A NAME="IX_MSG_CALENDAR_GET_EVENT_BY_ID"></A>
<H1 CLASS="refHeading">
MSG_CALENDAR_GET_EVENT_BY_ID</H1>

<PRE CLASS="syntax">void        MSG_CALENDAR_GET_EVENT_BY_ID(
        dword            eventID,
        GeodeHandle      owner,
        optr             completionOptr,
        Message          completionMsg); </PRE>

<P>Gets an event in the calendar database. Only ordinary, multi-day, and
to-do list events are supported; repeating events are not.</P>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>eventID</EM> </DT>

<DD>Unique event ID specifying the event you are requesting. This ID was
returned when you added the event with 
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A>.</DD>

<DT><EM>owner</EM> </DT>

<DD>Owner assigned to the created memory block holding the event data.
It should correspond to the thread that will lock and read the block.</DD>

<DT><EM>completionOptr</EM> </DT>

<DD>Optr to the object in your application to receive the callback reply
message.</DD>

<DT><EM>completionMsg</EM> </DT>

<DD>Name of your callback-handling message.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing. Error status and data block handle are passed
to your callback method.</P>

<P CLASS="refField"><STRONG>Include:</STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_CALENDAR_GET_EVENT_CALLBACK_MSG">CALENDAR_GET_EVENT_CALLBACK_MSG</A>
prototype. </P>
</DIV>

<DIV>
<A NAME="IX_MSG_CALENDAR_MODIFY_EVENT_BY_ID"></A>
<H1 CLASS="refHeading">
MSG_CALENDAR_MODIFY_EVENT_BY_ID</H1>

<PRE CLASS="syntax">void       MSG_CALENDAR_MODIFY_EVENT_BY_ID(
        <A HREF="#IX_CalendarEventParamStruct">CalendarEventParamStruct</A>
                         *params,
        dword            eventID,
        optr             completionOptr,
        Message          completionMsg); </PRE>

<P>Modifies an event in the calendar database. Only ordinary, multi-day,
and to-do list events are supported; repeating events are not.</P>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>*params</EM> </DT>

<DD>Pointer to a <CODE>CalendarEventParamStruct</CODE> structure holding the
modified event, which will completely replace the existing event.</DD>

<DT><EM>eventID</EM> </DT>

<DD>Unique event ID specifying the event you are modifying. This ID was
returned when you added the event with 
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A>.</DD>

<DT><EM>completionOptr</EM> </DT>

<DD>Optr to the object in your application to receive the callback reply
message; specify zero (0) for no callback.</DD>

<DT><EM>completionMsg</EM> </DT>

<DD>Name of your callback-handling message.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing. Error status is passed to your callback method,
if specified.</P>

<P CLASS="refField"><STRONG>Include:</STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG">
CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG</A>
prototype. </P>
</DIV>

<DIV>
<A NAME="IX_MSG_CALENDAR_DELETE_EVENT_BY_ID"></A>
<H1 CLASS="refHeading">
MSG_CALENDAR_DELETE_EVENT_BY_ID</H1>

<PRE CLASS="syntax">void        MSG_CALENDAR_DELETE_EVENT_BY_ID(
        dword            eventID,
        optr             completionOptr,
        Message          completionMsg); </PRE>

<P>Deletes an event in the calendar database. Only ordinary, multi-day,
and to-do list events are supported; repeating events are not.</P>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>eventID</EM> </DT>

<DD>Unique event ID specifying the event you are deleting. This ID was
returned when you added the event with 
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A>.</DD>

<DT><EM>completionOptr</EM> </DT>

<DD>Optr to the object in your application to receive the callback reply
message; specify zero (0) for no callback.</DD>

<DT><EM>completionMsg</EM> </DT>

<DD>Name of your callback-handling message.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing. Error status is passed to your callback method,
if specified.</P>

<P CLASS="refField"><STRONG>Include:</STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG">
CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG</A> prototype.
</P>
</DIV>

<DIV>
<A NAME="IX_MSG_CALENDAR_CHECK_IF_EVENT_EXISTS"></A>
<H1 CLASS="refHeading">
MSG_CALENDAR_CHECK_IF_EVENT_EXISTS</H1>

<PRE CLASS="syntax">void        MSG_CALENDAR_CHECK_IF_EVENT_EXISTS(
        <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>  startDateTime,
        <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>  endDateTime,
        optr             completionOptr,
        Message          completionMsg); </PRE>

<P>Searches the calendar database to see whether any events occur during
a specified interval. Only ordinary, multi-day, and to-do list events are
checked; repeating events are not.</P>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>startDateTime</EM> </DT>

<DD>Start date and time of search interval.</DD>

<DT><EM>endDateTime</EM> </DT>

<DD>End date and time of search interval.</DD>

<DT><EM>completionOptr</EM> </DT>

<DD>Optr to the object in your application to receive the callback reply
message.</DD>

<DT><EM>completionMsg</EM> </DT>

<DD>Name of your callback-handling message.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing; the search result is passed to your callback
method.  The successful results are:</P>

<UL>
<LI><CODE>CEE_NORMAL</CODE> indicates at least one event in the database overlaps your
search range. </LI>

<LI><CODE>CEE_EVENT_NOT_FOUND</CODE> indicates that no events in the database overlap
your search range. </LI>
</UL>

<P CLASS="refField"><STRONG>Include:</STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG">
CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG</A> prototype.
</P>
</DIV>

<DIV>
<A NAME="IX_CALENDAR_ADD_EVENT_CALLBACK_MSG"></A>
<H1 CLASS="refHeading">
CALENDAR_ADD_EVENT_CALLBACK_MSG</H1>

<PRE CLASS="syntax">void        CALENDAR_ADD_EVENT_CALLBACK_MSG(
        <A HREF="#IX_CalendarEventError">CalendarEventError</A>
                         error,
        dword            eventID); </PRE>

<P>Template for your 
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A> 
callback. Use this prototype
to declare, in the appropriate class definition, the method that will handle
the callback from adding an event to the calendar database. For example:
</P>

<PRE>@message (CALENDAR_ADD_EVENT_CALLBACK_MSG) MSG_MYAPP_PROCESS_ADD_EVENT_CALLBACK;
</PRE>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>error</EM> </DT>

<DD>The error code of your &quot;add event&quot; request; <CODE>CEE_NORMAL</CODE>
if successful.</DD>

<DT><EM>eventID</EM> </DT>

<DD>The unique identifier of this event, if it was successfully added.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing.</P>

<P CLASS="refField"><STRONG>Include: </STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_MSG_CALENDAR_ADD_EVENT">MSG_CALENDAR_ADD_EVENT</A> </P>
</DIV>

<DIV>
<A NAME="IX_CALENDAR_GET_EVENT_CALLBACK_MSG"></A>
<H1 CLASS="refHeading">
CALENDAR_GET_EVENT_CALLBACK_MSG</H1>

<PRE CLASS="syntax">void        CALENDAR_GET_EVENT_CALLBACK_MSG(
        <A HREF="#IX_CalendarEventError">CalendarEventError</A>
                         error,
        MemHandle        eventBlock); </PRE>

<P>Template for your 
<A HREF="#IX_MSG_CALENDAR_GET_EVENT_BY_ID">
MSG_CALENDAR_GET_EVENT_BY_ID</A> callback. Use this
prototype to declare, in the appropriate class definition, the method that
will handle the callback from getting an event in the calendar database.
For example: </P>

<PRE>@message (CALENDAR_GET_EVENT_CALLBACK_MSG) MSG_MYAPP_PROCESS_GET_EVENT_CALLBACK;
</PRE>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>error</EM> </DT>

<DD>The error code of your &quot;get event&quot; request; <CODE>CEE_NORMAL</CODE> if
successful.</DD>

<DT><EM>eventBlock</EM> </DT>

<DD>Unlocked global memory block containing the returned 
<A HREF="#IX_CalendarReturnedEventStruct"><CODE>CalendarReturnedEventStruct
</CODE></A>.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing.</P>

<P CLASS="refField"><STRONG>Include: </STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>
<A HREF="#IX_MSG_CALENDAR_GET_EVENT_BY_ID">
MSG_CALENDAR_GET_EVENT_BY_ID</A> </P>
</DIV>

<DIV>
<A NAME="IX_CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG"></A>
<H1 CLASS="refHeading">
CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG</H1>

<PRE CLASS="syntax">void        CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG(
        <A HREF="#IX_CalendarEventError">CalendarEventError</A>
                         error); </PRE>

<P>Template for your
<UL>
<LI><A HREF="#IX_MSG_CALENDAR_MODIFY_EVENT_BY_ID">MSG_CALENDAR_MODIFY_EVENT_BY_ID</A>,
<LI><A HREF="#IX_MSG_CALENDAR_DELETE_EVENT_BY_ID">MSG_CALENDAR_DELETE_EVENT_BY_ID</A>,
and  <BR>
<LI><A HREF="#IX_MSG_CALENDAR_CHECK_IF_EVENT_EXISTS">MSG_CALENDAR_CHECK_IF_EVENT_EXISTS</A>
</UL>
callback functions. Use this prototype
to declare, in the appropriate class definition, the methods that will
handle the callbacks from these requests. For example: </P>

<PRE>@message (CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG) 
                 MSG_MYAPP_PROCESS_EVENT_EXISTS_CALLBACK;
</PRE>

<P CLASS="refField"><STRONG>Pass: </STRONG></P>

<DL>
<DT><EM>error</EM> </DT>

<DD>The error code of your request. <CODE>CEE_NORMAL</CODE>
 indicates successful deletion
or modification; for the 
<A HREF="#IX_MSG_CALENDAR_CHECK_IF_EVENT_EXISTS">MSG_CALENDAR_CHECK_IF_EVENT_EXISTS</A>
callback,
<CODE>CEE_NORMAL</CODE> is returned if any event overlaps with the specified range,
<CODE>CEE_EVENT_NOT_FOUND</CODE> otherwise.</DD>
</DL>

<P CLASS="refField"><STRONG>Return:</STRONG> Nothing.</P>

<P CLASS="refField"><STRONG>Include: </STRONG> <STRONG CLASS="fileName">calendar.goh</STRONG> </P>

<P CLASS="refField"><STRONG>See Also: </STRONG>

<A HREF="#IX_MSG_CALENDAR_MODIFY_EVENT_BY_ID">MSG_CALENDAR_MODIFY_EVENT_BY_ID</A>, 
<A HREF="#IX_MSG_CALENDAR_DELETE_EVENT_BY_ID">MSG_CALENDAR_DELETE_EVENT_BY_ID</A>,
<A HREF="#IX_MSG_CALENDAR_CHECK_IF_EVENT_EXISTS">MSG_CALENDAR_CHECK_IF_EVENT_EXISTS</A>.</P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventParamStruct">
 </A>
<H1 CLASS="refHeading">
CalendarEventParamStruct</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef struct {
    <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>      CEPS_startDateTime;
    /*  Event start date and time */
 
    <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>      CEPS_endDateTime;
    /*  Event end date and time */

    word                CEPS_reserveWholeDay;
    /*  Number of whole day to reserve the event. The max is
     *  CALENDAR_MAX_RESERVE_WHOLE_DAYS. 0 if not applicable. 
     * 
     *    If this field is non-zero, the end date specified in
     *    CEPS_endDateTime is ignored.
     * 
     *    If CEPS_startDateTime does not have time specified, it is assumed
     *    the start time is 00:00.
     * 
     *    If CEPS_endDateTime does not have time specified, it is assumed
     *    the end time is 23:59
     */

    <A HREF="#IX_CalendarAlarmStruct">CalendarAlarmStruct</A>   CEPS_alarm;
    /*  Alarm associated with the event */

    <A HREF="#IX_CalendarEventDescType">CalendarEventDescType</A> CEPS_eventType;
    /*  Type of data of the event */

    <A HREF="#IX_CalendarEventRepeatInfo">CalendarEventRepeatInfo</A> *CEPS_repeatInfo;
    /* Repeat event info. 0 if the event is not repeating */

    word                CEPS_dataLength;
    /*  The number of bytes of the data in CEPS_data. If
     *  CEPS_eventType is CEDT_GEOS_TEXT, CEPS_dataLength does not include
     *  NULL.
     */ 

    char*               CEPS_data;
    /*  The event data. If the CEPS_eventType is CEDT_GEOS_TEXT, the
     *  text passed in from this field must be null-terminated. 
     */ 
} CalendarEventParamStruct; </PRE></TABLE>

<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax"><A NAME="CalendarToDoItemStatus"></A>typedef enum {
    CTDIS_HIGH_PRIORITY = 0x101,
    CTDIS_NORMAL_PRIORITY,
    CTDIS_COMPLETED,
} CalendarToDoItemStatus;</PRE>
</TABLE>

<P>
This structure fully specifies a calendar event.</P>

<P>
Most of the fields are self-explanatory.  If you wish to add a to-do list
item, specify <CODE>CAL_NO_DATE</CODE> for the start date and a 
<CODE>CalendarToDoItemStatus</CODE> enum in place of the start time.
To-do items do not have start or end times, nor do they repeat or have alarms.</P>

<P>
<CODE>CEPS_reserveWholeDay</CODE> is used to specify a single event that
spans multiple days.  This is a special case of ordinary events;
instead of creating one long event,
the start and end time you specify will apply to each day the event lasts.
For example, you could use this to record a conference that runs 
from 10:00 to 15:00 for three consecutive days.</P>

<P>
When specifying <CODE>FileDateAndTime</CODE> values, cast words and
constants to type <CODE>(dword)</CODE> and specify literal long values (such 
as "19L") before shifting their bits.

<P>True repeating events are not yet supported.</P>

</DIV>

<DIV>
<A NAME="IX_CalendarAlarmStruct">
 </A>
<H1 CLASS="refHeading">
CalendarAlarmStruct</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef WordFlags CalendarAlarmStruct;

<A NAME="CalendarAlarmIntervalType"></A>/* CalendarAlarmIntervalType */
#define CAS_TYPE            (0x8000 | 0x4000)
#define CAS_TYPE_OFFSET     (14)

typedef ByteEnum CalendarAlarmIntervalType;
#define CAIT_MINUTES	(0x0)    /* Must use CAIT_MINUTES on the Communicator */
#define CAIT_HOURS	(0x1)
#define CAIT_DAYS	(0x2)

/*  set if there is alarm */
#define CAS_HAS_ALARM       (0x2000)

/*  data according to CAS_TYPE */
#define CAS_INTERVAL        (0x1fff)
#define CAS_INTERVAL_OFFSET (0)</PRE>
</TABLE>

<P>
This structure indicates whether an alarm is set, and how long before
the event it should activate itself.</P>
<P>
The <CODE>CAS_HAS_ALARM</CODE> bit indicates whether the alarm is set for
the associated event.  If so, the number masked by <CODE>CAS_INTERVAL</CODE>
indicates when the alarm should sound. If the interval is zero, the alarm
activates at the start time of the event; otherwise, it activates
<CODE>CAS_INTERVAL</CODE> time units before the event.  In the latter case,
the time units are specified by <CODE>CAS_TYPE</CODE>, although <EM>on the 
Nokia 9000i Communicator only CAS_TYPE = CAIT_MINUTES is valid</EM>.  If 
another <CODE>CAS_TYPE</CODE> is specified, the alarm will default to the 
maximum number of minutes.  

<P>
For example, an alarm can be set to go off five minutes before the start of
an event by specifying <CODE>CAS_TYPE = CAIT_MINUTES</CODE> and
<CODE>CAS_INTERVAL = 5</CODE>.
</P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventDescType">
 </A>
<H1 CLASS="refHeading">
CalendarEventDescType</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef ByteEnum CalendarEventDescType;

#define CEDT_GEOS_TEXT  (0x0)           /* Description is a null-terminated,
                                         * single-byte text string in the
                                         * GEOS character set */
#define CEDT_UNICODE    (0x1)           /* Description is a null-terminated,
                                         * double-byte text string in the
                                         * Unicode character set. */ 
#define CEDT_INK        (0x2)           /* Description is digital ink. Number
                                         * of points can be determined from
                                         * the dataLength field. *</PRE>
</TABLE>
<P>
This enum indicates the format of the event description.
Only CEDT_GEOS_TEXT is currently supported.</P>
</DIV>

<DIV>
<A NAME="IX_CalendarReturnedEventStruct">
 </A>
<H1 CLASS="refHeading">
CalendarReturnedEventStruct</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef struct {
    dword               CRES_eventID;
    /*  Unique event ID */

    <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>      CRES_startDateTime;
    /*  Event start date and time */
 
    <A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A>      CRES_endDateTime;
    /*  Event end date and time */

    word                CRES_reserveWholeDay;
    /*  Number of whole day to reserve the event. The max is
     *  CALENDAR_MAX_RESERVE_WHOLE_DAYS. 0 if not applicable. 
     * 
     *    If this field is non-zero, the end date specified in
     *    CRES_reserveWholeDay is ignored.
     * 
     *    If CRES_startDateTime does not have time specified, it is assumed
     *    the start time is 00:00.
     * 
     *    If CRES_endDateTime does not have time specified, it is assumed
     *    the end time is 23:59
     */

    <A HREF="#IX_CalendarAlarmStruct">CalendarAlarmStruct</A> CRES_alarm;
    /*  Alarm associated with the event */

    <A HREF="#IX_CalendarEventDescType">CalendarEventDescType</A> CRES_eventType;
    /*  Type of data of the event */

    word                CRES_repeatInfo;
    /* Offset in this block that points to CalendarEventRepeatInfo repeat
     * event info. 0 if the event is not repeating. */ 

    word                CRES_dataLength;
    /*  The number of bytes of the data in CRES_data. If
     *  CRES_eventType is CEDT_GEOS_TEXT, CRES_dataLength does not include
     *  NULL.
     */ 

/*    label     char            CRES_data;*/
    /*  The event data. If the CRES_eventType is CEDT_GEOS_TEXT, the
     *  text passed in from this field must be null-terminated. 
     */ 
} CalendarReturnedEventStruct; </PRE>
</TABLE>

<P>
The event data (<CODE>CRES_data</CODE>) immediately follow this structure 
in the returned block.  If <CODE>CRES_eventType = CEDT_GEOS_TEXT</CODE>, 
the text must be null-terminated. 
<P>
<CODE>CRES_repeatInfo</CODE> is not currently supported.
</P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventError">
 </A>
<H1 CLASS="refHeading">
CalendarEventError</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef enum {
    CEE_NORMAL = 0x0,
    CEE_GENERAL_ERROR,
    CEE_INTERNAL_ERROR,
    CEE_NOT_ENOUGH_MEMORY,
    CEE_NOT_ENOUGH_DISKSPACE,
    CEE_EVENT_NOT_FOUND,
    CEE_EVENT_TEXT_TOO_LONG,
    CEE_INVALID_DATE,
    CEE_INVALID_TIME,
    CEE_INVALID_TODO_ITEM_STATUS,
    CEE_INVALID_RESERVE_WHOLE_DAY,
    CEE_INVALID_ALARM,
    CEE_INVALID_EVENT_TYPE,
    CEE_START_DATE_LATER_THAN_END_DATE,
    CEE_START_TIME_LATER_THAN_END_TIME,
    CEE_MISSING_END_TIME_WHEN_START_TIME_AND_END_DATE_ARE_SET,
    CEE_EVENT_NOT_SUPPORTED,
    CEE_INVALID_TIME_RANGE,             /*  The time range specified
                                         *  is invalid: end date/time
                                         *  is earlier than start date/time.*/
    CEE_ACCESS_DENIED                   /*  The requested event is in use and
                                         *  your access is denied. */ 
} CalendarEventError;</PRE>
</TABLE>

<P>
Error codes returned by Calendar API.</P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventRepeatInfo">
 </A>
<H1 CLASS="refHeading">
CalendarEventRepeatInfo</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef struct {    
    <A HREF="#IX_CalendarEventRepeatInterval">CalendarEventRepeatInterval</A> CERI_interval;
    /*  how long between events? */

    <A HREF="#IX_CalendarEventRepeatDuration">CalendarEventRepeatDuration</A> CERI_duration;
    /*  how long shall we keep this up? */

    <A HREF="#IX_CalendarEventRepeatDurationData">CalendarEventRepeatDurationData</A> CERI_durationData;
    /*  more details of duration */

    word        CERI_numExceptions;
    /*  number of exception dates */

/*  label       FileDate        CERI_exceptions;*/
    /*  array of dates on which event is *not* to take place */

} CalendarEventRepeatInfo;</PRE>
</TABLE>

<P>
Included for completeness; repeating events are not supported in 
<STRONG CLASS="fileName">calendar.goh</STRONG> API.</P>
<P>
This structure specifies the repeat information in a repeating event.
An array of exception dates, if any, follows at the end of this structure.<P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventRepeatInterval">
 </A>
<H1 CLASS="refHeading">
CalendarEventRepeatInterval</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef WordFlags CalendarEventRepeatInterval;

/* which week */
#define CERI_WEEK         (0x8000 | 0x4000 | 0x2000)
#define CERI_WEEK_OFFSET  (13)

/*  number of units between events. */
#define CERI_COUNT        (0x1000 | 0x0800 | 0x0400 | 0x0200 | 0x0100 | 0x0080 | 0x0040)
#define CERI_COUNT_OFFSET (6)

<A NAME="CalendarEventRepeatWeekday"></A>/*  CalendarEventRepeatWeekday  */
#define CERI_DAY          (0x0020 | 0x0010 | 0x0008)
#define CERI_DAY_OFFSET   (3)

<A NAME="CalendarEventRepeatIntervalType"></A>/*  How frequently the event should be repeated */
/* CalendarEventRepeatIntervalType */
#define CERI_TYPE         (0x0004 | 0x0002 | 0x0001)
#define CERI_TYPE_OFFSET  (0)

<A NAME="IX_CalendarEventRepeatWeekday"></A>typedef ByteEnum CalendarEventRepeatWeekday;
#define CERW_SUNDAY     (0x0)
#define CERW_MONDAY     (0x1)
#define CERW_TUESDAY    (0x2)
#define CERW_WEDNESDAY  (0x3)
#define CERW_THURSDAY   (0x4)
#define CERW_FRIDAY     (0x5)
#define CERW_SATURDAY   (0x6)

<A NAME="IX_CalendarEventRepeatIntervalType"></A>typedef ByteEnum CalendarEventRepeatIntervalType;
#define CERIT_DAILY           (0x0)
#define CERIT_WEEKLY          (0x1)
#define CERIT_MONTHLY_WEEKDAY (0x2)
#define CERIT_MONTHLY_DATE    (0x3)
#define CERIT_YEARLY_WEEKDAY  (0x4)
#define CERIT_YEARLY_DATE     (0x5)</PRE>
</TABLE>

<P>
Included for completeness; repeating events are not supported in 
<STRONG CLASS="fileName">calendar.goh</STRONG> API.</P>
<P>
This member specifies the interval between occurrences of the event.
The meaning of <CODE>CERI_WEEK</CODE>, <CODE>CERI_DAY</CODE>, and <CODE>CERI_COUNT</CODE>
depends on the type of interval for the repeating event:</P>
<DL>
<DT>DAILY:</DT>
<DD>
         CERI_WEEK = unused<BR>
         CERI_DAY = unused<BR>
         CERI_COUNT = number of days between repeats (usually 1)</DD>
<P>
<DT>WEEKLY:</DT>
<DD>
         CERI_WEEK = unused<BR>
         CERI_DAY = which day of week to repeat<BR>
         CERI_COUNT = number of weeks between repeats (usually 1)</DD>
<P>
<DT>BI-WEEKLY:</DT>
<DD>
         CERI_WEEK = unused<BR>
         CERI_DAY = which day of week to repeat<BR>
         CERI_COUNT = number of weeks between repeats (2 in this case)</DD>
<P>
<DT>MONTHLY_WEEKDAY (e.g., the first Thursday of each month):</DT>
<DD>
         CERI_WEEK = which week in month<BR>
         CERI_DAY = which day of week<BR>
         CERI_COUNT = number of months between repeats (usually 1)</DD>
<P>
<DT>MONTH_DATE (e.g., the 15th of each month):</DT>
<DD>
         CERI_WEEK = unused<BR>
         CERI_DAY = unused<BR>
         CERI_COUNT = number of months between repeats (the date is
                 taken from the appointment info itself, not the repeat info)</DD>
<P>
<DT>YEARLY_WEEKDAY (e.g., the first Thursday of November):</DT>
<DD>
         CERI_WEEK = which week in month<BR>
         CERI_DAY = which day of week<BR>
         CERI_COUNT = number of years between repeats (month is taken from
                 the appointment info itself, not the repeat info)</DD>
<P>
<DT>YEARLY_DATE (e.g., birthdays):</DT>
<DD>
         CERI_WEEK = unused<BR>
         CERI_DAY = unused<BR>
         CERI_COUNT = number of years between repeats (month and day are
                 taken from the appointment info itself, not the repeat info)</DD>
</DL>

</DIV>

<DIV>
<A NAME="IX_CalendarEventRepeatDuration">
 </A>
<H1 CLASS="refHeading">
CalendarEventRepeatDuration</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef ByteEnum CalendarEventRepeatDuration;
#define CERD_FOREVER    (0x0)           /*  no additional data */
#define CERD_UNTIL      (0x1)           /*  Repeat end date */
#define CERD_LENGTH     (0x2)           /*  CalendarEventRepeatLength */</PRE>
</TABLE>

<P>
Included for completeness; repeating events are not supported in 
<STRONG CLASS="fileName">calendar.goh</STRONG> API.</P>
<P>
This member specifies how long before occurrences of the event terminate.
Either the event is repeated indefinitely (<CODE>CERD_FOREVER</CODE>), or for
a finite time; <CODE>CERD_UNTIL</CODE> and <CODE>CERD_LENGTH</CODE> indicate the meaning
of the duration-length parameter.</P>
</DIV>

<DIV>
<A NAME="IX_CalendarEventRepeatDurationData">
 </A>
<H1 CLASS="refHeading">
CalendarEventRepeatDurationData</H1>
<TABLE BORDER=2 CELLPADDING=10><TR><TD>
<PRE CLASS="syntax">typedef union {
    FileDate                  CERDD_until;   /* Repeat until when */
    CalendarEventRepeatLength CERDD_length;  /* Repeat for how long */
} CalendarEventRepeatDurationData;

<A NAME="CalendarEventRepeatLength"></A>typedef WordFlags CalendarEventRepeatLength;
#define CERL_COUNT        (0xfffc)
#define CERL_COUNT_OFFSET (2)

<A NAME="CalendarEventRepeatLengthUnitType"></A>/* CalendarEventRepeatLengthUnitType */
#define CERL_UNIT         (0x0002 | 0x0001)
#define CERL_UNIT_OFFSET  (0)

typedef ByteEnum CalendarEventRepeatLengthUnitType;
#define CERLUT_DAY      (0x0)
#define CERLUT_WEEK     (0x1)
#define CERLUT_MONTH    (0x2)
#define CERLUT_YEAR     (0x3)

typedef WordFlags FileDate;
#define FD_YEAR		        0xfe00  /* :7 year since FDAT_BASE_YEAR */
#define FD_MONTH		0x01e0  /* :4 month (1-12) */
#define FD_DAY                  0x001f  /* :5 day of the month (1-31) */
#define FD_YEAR_OFFSET	        9
#define FD_MONTH_OFFSET	        5
#define FD_DAY_OFFSET		0

#define FDAT_BASE_YEAR		1980 </PRE>
</TABLE>

<P>
Included for completeness; repeating events are not supported in
<STRONG CLASS="fileName">calendar.goh</STRONG> API.</P>
<P>
This member specifies the duration of a repeating event that terminates.
The repeat interval can be specified by its termination date or by
its length.
<P>
<CODE>FileDate</CODE> is an absolute date in a format defined in 
<STRONG CLASS="fileName">file.h</STRONG>.
<CODE>CalendarEventRepeatLength</CODE> is a word specifying a time unit
(days, weeks, months, or years) and a count.
The count includes the initial event day; for example,
an event repeating every day for 3 days set for 12/15 would have events on
12/15, 12/16, and 12/17.</P>
</DIV>

<P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A> 
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A> 
<!-- down to first child -->
<!-- to previous -->| <A HREF="CalSamplesTop.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> 2 Examples</A> 
<!-- to next -->
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->

</BODY>
</HTML>
