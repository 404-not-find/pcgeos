<HTML>
<HEAD>
<!-- $Id: index.htm,v 1.9 97/09/09 16:40:13 lawrence Exp $ -->
<TITLE>Nokia 9000/9000i Communicator Fact Sheet</TITLE>
</HEAD>
<BODY BGCOLOR = "#FFFFFF">

<H1>Nokia 9000/9000i Communicator Fact Sheet</H1>

<IMG ALIGN="RIGHT" SRC="p_9000.gif" WIDTH="336" HEIGHT="223">

<UL>
<LI><A HREF = "#hardware">Hardware</A>
	<UL>
	<LI><A HREF = "#dimensions">Device Dimensions</A>
	<LI><A HREF = "#processor">Processor</A>
	<LI><A HREF = "#memory">Memory</A>
	<LI><A HREF = "#display">Screen Display</A>
	<LI><A HREF = "#keyboard">Keyboard</A>
	<LI><A HREF = "#communication">Communication</A>
	</UL>
<LI><A HREF = "#text">Text</A>
<LI><A HREF = "#icons">Icons</A>
<LI><A HREF = "#grayscale">Mapping Colors to Grayscale</A>
	<UL>
	<LI><A HREF = "#icongray">Icons</A>
	<LI><A HREF = "#othergray">Other Graphics</A>
	</UL>
<LI><A HREF = "#diskspace">Disk Space Warnings</A>
<LI><A HREF = "#ui">UI Conventions: Triggers</A>
<LI><A HREF = "#emulator">Emulator (U.S.) Keyboard Mapping</A>
<LI><A HREF = "#sound">Sounds</A>
<LI><A HREF = "#installer">The Installer</A>
<LI><A HREF = "#clearram">To Clear RAM</A>
<LI><A HREF = "#version">Version Information</A>
<LI><A HREF = "#closelid">Lid-Closing Event</A>
<LI><A HREF = "#debug">Debugging on an Actual Communicator</A>
</UL>

<P>
<HR>
<P>

<A NAME = "hardware"></A>
<H3>Hardware</H3>

<A NAME = "dimensions"></A>
<STRONG>The device dimensions are:</STRONG>
<UL>
<LI>17 cm long 
<LI> 6 cm wide
<LI> 4 cm thick
<LI> 400 grams
</UL>
<P>

<A NAME = "processor"></A>
<STRONG>Processor</STRONG>
<UL>
<LI>The phone functions are based on a Nokia 2110i.
<LI>The communicator runs on a 24 MHz 80386 chip.
</UL>
<P>

<A NAME = "memory"></A>
<STRONG>Memory</STRONG>
<P>
The Nokia 9000i Communicator has 8 megabytes of Flash RAM in it. It is partitioned as follows:<BR>
<DL>
 <DD>                  4 MB for "ROM" for the OS and applications 
  <DD>                 2 MB for application execution and heap space
    <DD>               2 MB for user data storage (essentially a RAM disk)
</DL>

<P>
<A NAME = "display"></A>
<STRONG>Screen display</STRONG>
<P>
The display is a grayscale LCD screen 640x200 pixels, measuring 115 by 36 millimeters.  The screen is neither touch-sensitive nor pen operable. The left status pane is 80 pixels wide and the command buttons at the right have a variable width, so an application's usable screen dimensions will be less than or equal to 560x200 pixels. For instance, the web browser has 540x200 pixels of usable display for web pages.
<P>
Current  Nokia 9000i Communicators support 4 levels of gray, but future versions (the GSM European and PCS United States versions) will support 8 levels of gray. Even though the 8-level grayscale devices default to 4 levels of gray, applications may change modes on-the-fly. 
<P>
<A NAME = "keyboard"></A>
<STRONG>Keyboard</STRONG>
<P>
The keyboard is a standard QWERTY keyboard. English, French German
and Scandinavian versions are currently available.
<P>
<A NAME = "communication"></A>
<STRONG>Communication</STRONG>
<UL>
<LI>Cellular (voice and data)
	<UL>
	<LI> Communication is through the GSM digital network, which can transmit
	         cellular voice, data (and fax) and SMS alpha-numeric pages.
		<UL>
		<LI> GSM's Short Message Service (SMS) allows mobile devices to send short, 160 
character messages as a single packet of information. Nokia 9000i Communicators can send and receive these messages, and route them to specified target applications.
		</UL>
	<LI>E-mail conforms to the SMTP and business card standards.
	<LI>Internet protocols: TCP/IP and PPP.
	<LI>The maximum baud rate for data calls is 9600 baud.
	</UL>

<LI>The Nokia 9000i supports two COM ports:<BR>
 	<UL>
	<LI>COM1 is the serial port
	<LI>COM3 is the infrared port
	<LI>(COM2 used internally so it is not available to applications.)
	</UL>

<LI> Infrared communication with outside devices via IrDA
	<UL>
	<LI>The maximum baud rate for IrDA is 57,600 baud.
	</UL>
<LI> Serial line communication via a RS-232 compatible connection.
	<UL>
	<LI>The maximum baud rate for the serial line is 19,200 baud.
	</UL>
<LI> NServer and device debugging at 19,200 baud 
</UL>




<P>
<HR>
<P>
<A NAME = "text"></A>
<H3>Text</H3>
<P>
The following is a list of all the available fonts, their sizes, styles, and comments. 
<P>
<BR>

<TABLE BORDER = 3>
<TR>
	<TD WIDTH = 30%> <STRONG>Font:</STRONG></TD>
	<TD WIDTH = 20%> <STRONG>Available Size:</STRONG></TD>
	<TD WIDTH = 20%> <STRONG>Styles:</STRONG></TD>
	<TD WIDTH = 30%> <STRONG>Comments:</STRONG></TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30% ROWSPAN = 5>FID_RESPONDER</TD>
	<TD WIDTH = 20%> 14 </TD>
	<TD WIDTH = 20%> Bold </TD>
	<TD WIDTH = 30%> -- </TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 16 </TD>
	<TD WIDTH = 20%> Plain, Bold </TD>
	<TD WIDTH = 30%> -- </TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 17 </TD>
	<TD WIDTH = 20%> Plain </TD>
	<TD WIDTH = 30%> -- </TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 18 </TD>
	<TD WIDTH = 20%> Plain, Bold, Italic, Bold-Italic </TD>
	<TD WIDTH = 30%> FID_RESPONDER 18 is the default font </TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 20 </TD>
	<TD WIDTH = 20%> Bold, Bold-Italic </TD>
	<TD WIDTH = 30%> -- </TD>
</TR>

<TR WIDTH = 100%>
	<TD WIDTH = 30% ROWSPAN = 2> FID_TERMINAL</TD>
	<TD WIDTH = 20%> 8 </TD>
	<TD WIDTH = 20%> Plain </TD>
	<TD WIDTH = 30%> Tiny, 7 pixel wide font need to display 80 characters per line, for Telnet 
and the like </TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 16 </TD>
	<TD WIDTH = 20%> Plain </TD>
	<TD WIDTH = 30%> Also 7 pixels wide, but vertically stretched for legibility; you can only 
display 12 lines of text on the screen using this font.</TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30% ROWSPAN = 2> FID_TERMINAL_GRAPHIC </TD>
	<TD WIDTH = 20%> 8 </TD>
	<TD WIDTH = 20%> Plain </TD>
	<TD WIDTH = 30%> 7 pixel wide font need to display 80 characters per line. Has VT100 graphics above 80h..</TD>
</TR>
<TR WIDTH = 100% COLSPAN = 4>
	<TD WIDTH = 20%> 16 </TD>
	<TD WIDTH = 20%> Plain </TD>
	<TD WIDTH = 30%> 7 pixels wide, but vertically stretched for legibility; you can only display 12 lines of text in this font. Has VT100 graphics above 80h.</TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30%> FID_DTC_URW_SANS </TD>
	<TD WIDTH = 20%> Any Size </TD>
	<TD WIDTH = 20%> -- </TD>
	<TD WIDTH = 30%> Outline font.</TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30%> FID_DTC_URW_MONO </TD>
	<TD WIDTH = 20%> Any Size </TD>
	<TD WIDTH = 20%> -- </TD>
	<TD WIDTH = 30%> Outline font.</TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30%> FID_DTC_URW_ROMAN </TD>
	<TD WIDTH = 20%> Any Size </TD>
	<TD WIDTH = 20%> -- </TD>
	<TD WIDTH = 30%> Outline font.</TD>
</TR>
<TR WIDTH = 100%>
	<TD WIDTH = 30%> FID_BISON </TD>
	<TD WIDTH = 20%> -- </TD>
	<TD WIDTH = 20%> -- </TD>
	<TD WIDTH = 30%> This font has only one character, '*'. This is used for passwords.</TD>
</TR>
</TABLE>

<P>











<HR>
<A NAME = "icons"></A>
<H3>Icons</H3>
<P>
There are two types of icons: Status Pane Icons and File List Icons. 
<P>
When creating a status pane icon using the Icon Editor, use the following settings:
<DL>
<DD>Width: 64
<DD>Height: 50
<DD>Color Scheme: 16-color
<DD>Apsect Ratio: VGA
<DD>Format Type: Icon
<DD>Display Size: Standard
</DL>

<P>

When creating a file list icon using the Icon Editor, use the following settings:
<DL>
<DD>Width: 25
<DD>Height: 18
<DD>Color Scheme: 16-color
<DD>Apsect Ratio: VGA
<DD>Format Type: Icon
<DD>Display Size: Tiny
</DL>
<P>

<HR>

<P>
<A NAME = "grayscale"></A>
<H3>Communicator Grays</H3>
Current  Nokia 9000i Communicators support 4 levels of gray, but future devices will support 8 levels of gray. There are two different grayscale schemes used, one for visMonikers and icons, and the other for normal GEOS drawing routines. 
<P>
<A NAME = "icongray"></A>
Icons can make use of 4 layers of grey. When drawing an icon, use the following mapping of colors to create the correct gray level in the icon: (if other color values are used, they will not show up.)
<P>
<CENTER>
<TABLE BORDER = 3 WIDTH = 60%>
<TR>
<TD WIDTH = 50%><STRONG>GEOS Color</STRONG></TD>
<TD WIDTH = 50%><STRONG>Icon Level of Gray</STRONG></TD>
</TR>
<TR>
<TD WIDTH = 50%><STRONG> C_WHITE </STRONG></TD>
<TD WIDTH = 50%><STRONG> White </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 50%><STRONG> C_LIGHT_VIOLET </STRONG></TD>
<TD WIDTH = 50%><STRONG> Light Gray </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 50%><STRONG> C_GREEN </STRONG></TD>
<TD WIDTH = 50%><STRONG> Dark Gray </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 50%><STRONG> C_BLACK </STRONG></TD>
<TD WIDTH = 50%><STRONG> Black </STRONG></TD>
</TR>
</TABLE>
</CENTER>

<P>
<A NAME = "othergray"></A>
Other graphics can make use of the 16 GEOS enumerated color types to choose the appropriate gray. The device will correctly map the color to the correct level of gray, depending on number of screen grays available. The following table displays how different colors will map to gray on 4- and 8- level grayscale modes.
<P>
<CENTER>
<TABLE BORDER = 3 WIDTH = 70%>
<TR>
<TD WIDTH = 33%><STRONG>GEOS Color</STRONG></TD>
<TD WIDTH = 33%><STRONG>4 Levels of Gray</STRONG></TD>
<TD WIDTH = 34%><STRONG>8 Levels of Gray</STRONG></TD>
</TR>
<TR>
<TD WIDTH = 33%><STRONG> C_BLACK, C_DARK_GRAY </STRONG></TD>
<TD WIDTH = 33% ROWSPAN = 2><STRONG> Black </STRONG></TD>
<TD WIDTH = 34%><STRONG> Black </STRONG></TD>
</TR>
<TR COLSPAN = 3>
<TD WIDTH = 33%><STRONG> C_BLUE, C_LIGHT_BLUE </STRONG></TD>
<TD WIDTH = 34%><STRONG> Dark-dark gray </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 33%><STRONG> C_GREEN, C_LIGHT_GREEN </STRONG></TD>
<TD WIDTH = 33% ROWSPAN = 2><STRONG> Dark gray</STRONG></TD>
<TD WIDTH = 34%><STRONG> Mid-dark gray </STRONG></TD>
</TR>
<TR COLSPAN = 3>
<TD WIDTH = 33%><STRONG> C_CYAN, C_LIGHT_CYAN </STRONG></TD>
<TD WIDTH = 34%><STRONG> Light-dark gray </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 33%><STRONG> C_RED, C_LIGHT_RED </STRONG></TD>
<TD WIDTH = 33% ROWSPAN = 2><STRONG> Light gray </STRONG></TD>
<TD WIDTH = 34%><STRONG> Dark-light gray </STRONG></TD>
</TR>
<TR COLSPAN = 3>
<TD WIDTH = 33%><STRONG> C_VIOLET, C_LIGHT_VIOLET </STRONG></TD>
<TD WIDTH = 34%><STRONG> Mid-light gray </STRONG></TD>
</TR>
<TR>
<TD WIDTH = 33%><STRONG> C_YELLOW, C_BROWN </STRONG></TD>
<TD WIDTH = 33% ROWSPAN = 2><STRONG> White </STRONG></TD>
<TD WIDTH = 34%><STRONG> Light-light gray </STRONG></TD>
</TR>
<TR COLSPAN = 3>
<TD WIDTH = 33%><STRONG> C_WHITE, C_LIGHT_GRAY </STRONG></TD>
<TD WIDTH = 34%><STRONG> White </STRONG></TD>
</TR>
</TABLE>
</CENTER>





<P>


<HR>
<A NAME = "diskspace"></A>
<H3>Disk Space Warnings</H3>
<P>
Often, it is useful to get a qualitative measure of the available free disk space to check whether the disk is dangerously full. The disk warning levels are:
<P>
<DL>
<DD> The <STRONG>Warning Level</STRONG> is less than 50K.
<DD> The <STRONG>Critical Level</STRONG> is less than 25K
</DL>

<P>



<HR>
<A NAME = "ui"></A>
<H3>UI Conventions: Triggers</H3>

<P>
To maintain a consistent look-and-feel for all Nokia 9000i applications, it is important that developers follow the same set of UI conventions. The most important navigation tool on the Nokia 9000i are the four triggers at the right side. The application specifies what these triggers are and which slot (0, 1, 2, or 3) each of these triggers belongs in. In general, applications should use:

<DL>
<DT>HINT_SEEK_SLOT = 0
	<DD>The main action (such as Open or Send).
      		Affirmative responses (such as OK).
<P>
<DT> HINT_SEEK_SLOT = 1
	<DD>Secondary functions or Main function if slot 0 is taken.
<P>
<DT> HINT_SEEK_SLOT = 2:
     	<DD>Settings and similar buttons that bring up options.
      		Apply trigger in dialogs. 
<P>
<DT>  HINT_SEEK_SLOT = 3:
      		<DD>Negative responses such as Cancel, Close, or Dismiss.
      		Back triggers.  (Back is <STRONG>always</STRONG> in slot 3.  This is
      		the trigger with ATTR_TLT_IS_BACK_TRIGGER set.)
     		 "OK" if it is for dismissing the dialog box or if
     		 there are no other buttons.
     		 Settings can go here is slot 2 is already taken. 
</DL>
<P>

Applications launched from "Extras" must have a close button that calls <CODE>MSG_FSA_RETURN_TO_LAUNCHER</CODE>

<P>
You can use up to 6 triggers by setting up two panes of triggers. If this is done, than the fourth trigger of each group must be either "More" or "Back" text monikers with the associated right and left pointing icons. 

<P>
<HR>
<A NAME = "emulator"></A>
<H3>Nokia 9000i Emulator Keyboard Mapping</H3>
<STRONG>This only applies to US QWERTY keyboards</STRONG>
<P>

<DL>
<DD>   F1  - Button 1
<DD>      F2  - Button 2
 <DD>     F3  - Button 3
<DD>      F4  - Button 4<P>

   <DD>   F5  - launch Phone application
  <DD>    F6  - launch Fax application
  <DD>    F7  - launch SMS application
   <DD>   F8  - launch Internet Services application
   <DD>   F9  - launch Contact manager application
   <DD>   F10 - launch Notebook application
  <DD>    F11 - launch Calendar application
  <DD>    F12 - launch System application
  <DD>    Ctrl F12 - launch Extras application<P>

  <DD>    Left Alt - Chrset
<DD>      Insert - Help

  <DD>    Page Up   - Scroll up
 <DD>     Page Down - Scroll down

<DD>      Pause - Shutdown demo

<DD>      Ctrl F3  - Detach application
<DD>      Ctrl F4  - Close application
</DL>

<P>

<HR>
<P>
<A NAME  = "sound"></A>
<H3>Sound</H3>

Communicator applications may play StandardSoundType sounds through the PDA-side speaker. 


<P>
<HR>
<P>
<A NAME = "installer"></A>
<H3>The Installer</H3>

The Nokia 9000i Communicator SDK comes with an installer application called <STRONG>NServer.exe</STRONG>. It uses an installation script that describes your application's name, version, and related files that will need to be transferred. 


<HR>
<P>
<A NAME = "clearram"></A>
<H3>To Clear all RAM</H3>
<P>
To reset the Nokia 9000i Communicator and effectively erase every bit of
data on the phone (except, of course, the factory settings and data) you
must pull out the main battery, put it back in, then hold down the keys
Shift-Esc-f. You will be prompted to format the RAM of the device and you
 can cancel here if you don't really want to erase the data.
<P>
Once the phone has been reset you must re-enter all of the user data again, including your home country, name, and address.
<P>




<P>
<HR>
<P>
<A NAME = "version"></A>
<H3>Version Information</H3>
<P>
You can get version information from the INI file on the 
Nokia 9000i Communicator. The information is stored as a string in 
<CODE>[UI]swSerialNumber</CODE>.
The string is 27 characters long. This same string can be seen on the last
line of About this product. The whole string looks like this: 
<BR>
<PRE>      000000/00/2a0030808044001/0. </PRE>

<P>
The interesting part is: 2a0030808044001. The three first characters 
identify hardware version (here 2.10), six following characters identify 
software version (here 03.08.08), three following characters identify the 
country code (44 = Great Britain) and the last three characters identify 
the keyboard type (here 001 = English).

<P>
Here is sample code that shows how to extract the version information:
<PRE> 
                 @start StringRes;
                     @chunk TCHAR UICategory[] = "ui";
                     @chunk TCHAR SWSerialNumber[] = "swSerialNumber";
                 @end StringRes;
                      
                 ...
                      
                 @method TestProcessClass, MSG_TEST_PROCESS_GET_VERSION
                 {
                     TCHAR   version[28] = "";
                     TCHAR * category;
                     TCHAR * key;
                     word    value;
                      
                     MemLock( OptrToHandle( @UICategory ) ); 
                     category = (TCHAR *) LMemDeref( @UICategory ); 
                     key      = (TCHAR *) LMemDeref( @SWSerialNumber ); 
                     InitFileReadStringBuffer( category,
                          key,
                          version,
                          IFRF_SIZE | 28,
                          &value );

                     /*
                      * Extract the information you want from version string. 
                      */
                     MemUnlock( OptrToHandle( @UICategory ) );
                 }
</PRE>

<P>
<HR>
<A NAME = "closelid"></A>
<H3>Lid-closing Event</H3>
<P>
After the Nokia 9000i Communicator's lid is closed, the Communicator waits for 30 seconds and then turns off the CPU. Of course, the CPU will not turn off until all applications are idle.

<P>To receive notification that the lid is closed, an application should 
register on the GCN list <CODE>GCNSLT_RESPONDER_NOTIFICATIONS</CODE>.  
It should watch for <CODE>MSG_META_NOTIFY</CODE> with 
<CODE>notificationType == GWNT_RESPONDER_NOTIFICATION</CODE>,
<CODE>manufID == MANUFACTURER_ID_GEOWORKS</CODE> and 
<CODE>data == RNT_LID_CLOSED</CODE>.
(<CODE>ResponderNotificationType</CODE> is defined in N9000v20\CInclude\Internal\respondr.goh)

<HR>
<P>
<A NAME = "debug"></A>
<H3>Debugging an actual Nokia 9000i Communicator</H3>
<P>
To debug on an actual Nokia 9000i Communicator, you need to attach your host PC to the device's 6-pin serial port and set the host ptty baud setting to 38400.  Remove the battery so the phone shuts down.  Then replace the battery and press:
<P>
      SHIFT-D-O  (that is 'O' not zero) to boot and wait for swat to attach.  <BR>
      SHIFT-D-B  to boot with swat stub loaded, but doesn't wait for swat to attach.<P>

   
   Note that IR connections and PC connectivity won't work while the Nokia
   9000i Communicator is in debug mode.  (IR shares a UART with the swat port, so you trying to open the port will lock the device.) 
<P>
Also note that debugging on the device is limited because you cannot set 
   breakpoints in any of the system routines (since they are in ROM).
   Mostly you can check backtraces and set breakpoints in your own
   application.
<P>
<HR>
<EM>Chuck Groom<BR>
7/9/97</EM>


</BODY>
</HTML>
