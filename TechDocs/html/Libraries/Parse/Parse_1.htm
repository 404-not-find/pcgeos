<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Parse_1.htm,v 1.1 97/06/02 15:42:29 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Parse Library Behavior</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Parse Library</A>: 1 
<A NAME="20075">
 </A>
Parse Library Behavior</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Parse_2.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="index.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">Parse Library</A> 
<!-- to next --> | <A HREF="Parse_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2 Parser Functions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The Parse Library takes a string of characters and evaluates it. In many ways, it acts like a compiler; it translates a string into tokens, evaluates the tokens, and returns the result. It can also reverse the process, translating a sequence of tokens into the equivalent text string. Finally, it can simplify a string of tokens, performing arithmetic simplifications and calling functions. The parse library provides many useful functions; furthermore, applications can define their own functions.</P>
<P>
The different functions are separated into different parts of the parse library. The parse library contains the following basic sections:</P>
<UL>
<LI>
Scanner<BR>
The scanner reads a text string and converts it into a series of tokens. It does not keep track of the context of the tokens. Its behavior is partially determined by the localization settings; for example, it uses the localization setting to tell whether the decimal separator is a period, a comma, or some other character or string. It is called by the parser; it is not used independently.</LI>
<LI>
Parser<BR>
The parser interprets the stream of tokens returned by the scanner. It initializes the scanner and uses it to read tokens from the input strings; it also makes sure that the string of tokens is legally formatted. It does not do any type-checking.</LI>
<LI>
Evaluator<BR>
The evaluator simplifies a token string. It does this by replacing arithmetic expressions with their results, by making function calls, by reading current values of cells, and by replacing identifiers with their values. The result is another token string; usually this string consists of a single token (a number or string).</LI>
<LI>
Formatter<BR>
The formatter translates a token string into a text string. It is used to display the evaluator's output. Its behavior is influenced by the localization settings.</LI>
</UL>
<P>
For example, suppose an application used the parse library to evaluate the string &quot;(5*6)+SUM(A2:C6)&quot;. The following steps would be taken:</P>
<OL>
<LI>
The parser would parse the string. It would do this by calling the scanner to read tokens from the string. It would then parse the token sequence to see that it evaluated to a well-formed expression. (It would not do any simplifying or type-checking.)</LI>
<LI FIXME_NumListOther>
The evaluator would simplify the expression. It would reduce the token sequence for &quot;(5*6)&quot; to the single token for &quot;30&quot;. It would then call the SUM function, passing it the specifier for the range of cells &quot;A2:C6&quot;. The SUM function would check the type of its arguments, then perform the appropriate action (in this case, adding the values of the cells together). The SUM function would return a value (e.g., it might return 999.9). The evaluator would thus be able to simplify the entire token sequence to the single token for the number 1029.9.</LI>
<LI FIXME_NumListOther>
When the application needed to display the result, it would call the formatter. The formatter would check the localization settings, finding out what the thousands separator and decimal point character are. It would create the string &quot;1,029.9&quot;.</LI>
</OL>
<P>
Token strings are usually more compact than the corresponding text strings. There are several reasons for this; for example, cell references are much more compact, functions are specified by an ID number instead of a string, and white space is removed. When translated into a token string, it is only three bytes long: one token byte to specify that this is a number, and two data bytes to store the value of the number. For this reason, applications which use the parse library will generally not store the text entered by the user; instead, they can store the equivalent token string, and use the formatter to display the string when necessary.</P>
<P>
The parse library routines often need to request information from the calling application or instruct it to perform a task. For example, when the Parser encounters a name, it needs to get a name ID from the calling application. For this reason, every Parse Library routine is passed a callback routine. The library routine calls this callback routine when necessary, passing a code indicating what action the callback routine should take. The beginning section will just describe this in general terms; for example, &quot;the Evaluator uses the callback to find out the value of a cell.&quot; The advanced section provides a more detailed explanation.</P>
<P CLASS="subsectionLink">
<A HREF="Parse_2.htm">The Scanner</A></P>
<P CLASS="subsectionLink">
<A HREF="Parse_3.htm">The Parser</A></P>
<P CLASS="subsectionLink">
<A HREF="Parse_4.htm">Evaluator</A></P>
<P CLASS="subsectionLink">
<A HREF="Parse_5.htm">Formatter</A></P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Parse_2.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="index.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">Parse Library</A> 
<!-- to next --> | <A HREF="Parse_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2 Parser Functions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
