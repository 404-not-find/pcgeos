<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Parse_4.htm,v 1.1 97/06/02 15:42:49 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Evaluator</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Parse Library</A>: 1.3 <A HREF="Parse_1.htm">Parse Library Behavior</A>: 
Evaluator</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Parse_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Parse_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.2 The Parser</A> 
<!-- to next --> | <A HREF="Parse_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.4 Formatter</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_Evaluator (parse library)">
 </A>
The evaluator simplifies a token string returned by the parser. If the input token sequence was well-formed (as are all token sequences generated by the Parser), the evaluator will produce a token sequence consisting of two tokens: a single &quot;result&quot; token (which may be an error token), followed by the &quot;end-of-expression&quot; token. It does this by doing two main things: simplifying arithmetic expressions, and making function calls. </P>
<P>
The evaluator maintains two stacks, an Operator stack and an Argument stack. It reads the tokens from beginning to end. Each time it reads a token, it takes an action; this may involve pushing something onto a stack, or processing some of the tokens on the tops of the stacks.</P>
<P>
If an error occurs, the parser may take two different actions. Some errors are pushed on the argument stack; these may be handled by functions. For example, if the result of an expression is too large to be represented, the evaluator will just push PSEE_FLOAT_POS_INFINITY on the argument stack. Any function or operator which is passed an error code as an argument can either handle the error, propagate the error, or return a different error. For example, if the division operator is passed PSEE_FLOAT_POS_INFINITY as the divisor, it will simply return zero.</P>
<P>
The actual evaluation of tokens is straightforward. The evaluator pops the top token from the Operator stack. This is either a function or an operator. If the token is an operator, the evaluator pops either one or two arguments from the top of the argument stack, takes the appropriate action, and pushes the result on the argument stack. If the token is a function, the evaluator calls the function directly, passing it a pointer to the argument stack and the number of arguments to the function call. The function is responsible for popping off all of the arguments and pushing the return value on the argument stack.</P>
<P>
Special actions have to be taken if an operand or argument is a cell reference. If the cell is an argument to a function, or an operand (and the operator is not a range-separator or range-intersection), the evaluator will call its callback routine to get the value contained by the cell; this value will be put on the argument stack in place of the cell reference. If the operand is a range-separator or range-intersection, the cells or ranges will be combined into a single range, which is pushed on the Argument stack.</P>
<P>
The evaluator reads tokens, one at a time, from the buffer provided by the parser. For each token it takes an appropriate action:</P>
<DL>
<DT>
OPEN_PAREN</DT><DD>
Push an OPEN_PAREN token on the Operator stack.</DD>
<DT>
CLOSE_PAREN</DT><DD>
Evaluate tokens from the Operator stack until an OPEN_PAREN reaches the top of the operator stack; then pop the OPEN_PAREN off the stack.</DD>
<DT>
OPERATOR</DT><DD>If the top token on the Operator stack is an OPERATOR of higher precedence than this OPERATOR, then evaluate top of Operator stack. Repeat until top of operator stack is either not an operator, or is an operator of lower precedence. Finally, push the operator token on the operator stack.</DD>
<DT>
FUNCTION</DT><DD>Push FUNCTION token on the Operator stack. The evaluator FUNCTION token contains the function ID and the number of arguments to the function (starting at zero).</DD>
<DT>
CLOSE_FUNCTION</DT><DD>
Call function on top of Operator stack, passing it the pointer to the Argument stack and the number of arguments to the function call. (The arguments will be on the top of the argument stack.) The function should pop the arguments off the Argument stack, then push the return value (or error code) on the Argument stack.</DD>
<DT>
ARG_END</DT><DD>Evaluate the Operator stack until a FUNCTION token is at the top of the Operator stack; then increment the argument count of that function.</DD>
<DT>
NUMBER</DT><DD>Push number on Argument stack. (Actually, what is pushed is a reference to the thread's floating-point stack, which contains the number itself.)</DD>
<DT>
STRING</DT><DD>Push string on Argument stack.</DD>
<DT>
CELL_REF</DT><DD>Push the cell reference on the Argument stack.</DD>
<DT>
NAME</DT><DD>Call the callback function to find the value associated with the name; act on the value appropriately.</DD>
<DT>
END_OF_EXPRESSION</DT><DD>
Evaluate the Operator stack until it is empty; the result will be on the top of the Argument stack.</DD>
</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Parse_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Parse_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.2 The Parser</A> 
<!-- to next --> | <A HREF="Parse_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.4 Formatter</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
