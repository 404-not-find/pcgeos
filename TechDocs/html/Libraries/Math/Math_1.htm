<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Math_1.htm,v 1.1 97/06/02 15:30:22 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Basic Math Functions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">The Math Library</A>: 1 
Basic Math Functions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Math_2.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="index.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">The Math Library</A> 
<!-- to next --> | <A HREF="Math_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2 Conversions to Other Types</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The Math Library includes many routines and structures that make the manipulation of FP numbers possible. Most of these are transparent to a C programmer.</P>
<P>
C includes the following floating point types: <CODE>
float</CODE>
, <CODE>
double</CODE>
, and <CODE>
long</CODE>
 <CODE>
double</CODE>
. A floating point number in GEOS is of type <CODE>
FloatNum</CODE>
, which uses the IEEE 80 bit standard (equivalent to a long double) to represent floating point values. <CODE>
FloatNum</CODE>
 has overloaded the float, double, long double, and all basic math functions.</P>
<P>
A <A NAME="IX_FloatNum">
 </A>
<CODE>
FloatNum</CODE>
 consists of a one bit sign, a 15 bit exponent, and a 64 bit mantissa. The maximum exponent allowed is 7FFEh. An exponent of 7FFFh (FP_NAN) signals an underflow or overflow. You may check the value of this exponent using the macro <A NAME="IX_FLOAT_EXPONENT">
 </A>
FLOAT_EXPONENT to extract the exponent of a <CODE>
FloatNum</CODE>
.</P>
<P CLASS="figTitle">


Code Display D-1 Extracting an Exponent</P>
<PRE>FloatNum myNum;</PRE>
<PRE>if (FLOAT_EXPONENT(&amp;myNum) == FP_NAN)
{
     return(ERROR);
}</PRE>
<P>
If you use any floats, doubles, or long doubles in your application, GEOS will convert these types into <CODE>
FloatNum</CODE>
 values automatically and call the appropriate GEOS functions to manipulate the numbers. As this is the case, it is usually easier to declare any floating point variables in your application as <CODE>
FloatNum</CODE>
 types (or long doubles). This cuts down on conversion time.</P>
<P>
The Math Library provides all the familiar mathematical functions to manipulate these GEOS FP numbers (addition, multiplication, computation of logarithms, etc.). In C, most of these functions will automatically be called when their corresponding C operation involving FP numbers take place. (For example, when using the `+' binary operator to add two FP numbers, the Math Library will use the corresponding <A NAME="IX_FloatAdd()">
 </A>
<CODE>
FloatAdd()</CODE>
 routine.)</P>
<P>
You may, under special circumstances, wish to use these math routines directly. If you do so, you will need to manipulate the floating point stack manually, pushing numbers on the stack and making sure numbers are in the proper stack location to perform each operation. In most cases, the FP math routines operate on numbers already in place on the FP stack; they take and return no arguments of their own.</P>
<P>
Two functions you will need to use if you take this approach are <CODE>
FloatPushNumber()</CODE>
<A NAME="IX_FloatPushNumber()">
 </A>
 and<CODE>
 FloatPopNumber()</CODE>
<A NAME="IX_FloatPopNumber()">
 </A>
. <CODE>
FloatPushNumber()</CODE>
 takes the address of a variable (of type <CODE>
FloatNum</CODE>
) to push onto the FP stack; <CODE>
FloatPopNumber()</CODE>
 takes the address of a buffer to place an FP number popped off the FP stack. Other routines (for example, <CODE>
FloatAdd()</CODE>
) can then be called to operate on the FP stack. (See <A HREF="Math_2.htm#25726"> Adding Two FP Numbers</A>
 for an example using this approach.)</P>
<P>
There are many other routines that perform stack manipulation by shifting locations of FP numbers on the stack (<CODE>
FloatRoll()</CODE>
, <CODE>
FloatDrop()</CODE>
, etc.). These routines are covered in detail in the latter part of this chapter because they are seldom needed in a C applications.</P>
<P CLASS="subsectionLink">
<A HREF="Math_2.htm">Algebraic Functions</A></P>
<P CLASS="subsectionLink">
<A HREF="Math_3.htm">Transcendental Functions</A></P>
<P CLASS="subsectionLink">
<A HREF="Math_4.htm">Random Number Generation</A></P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Math_2.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="index.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">The Math Library</A> 
<!-- to next --> | <A HREF="Math_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2 Conversions to Other Types</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
