<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Config_2.htm,v 1.1 97/06/02 15:41:12 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Designing the UI Tree.</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Config Library</A>: 1.1 <A HREF="Config_1.htm">Providing the UI</A>: 
Designing the UI Tree.</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Config_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Config_1.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">1 Providing the UI</A> 
<!-- to next --> | <A HREF="Config_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.2 UI Fetch Routine</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Preferences modules present a dialog box to the user. You will need to design the dialog for your module. As you do so, you may find objects of the following classes useful. Each of the following classes is based upon one of the Generic UI classes.</P>
<P>
GenClass provides mechanisms by which objects will read and write values to the .INI file. Pref- classes provide further functionality, such as storing an &quot;original&quot; value to revert to if the user decides to Cancel their changes. </P>
<P>
The following Pref- classes are available:</P>
<DL>
<DT>
<STRONG>
PrefDialogClass</DT><DD>
</STRONG>
This class specializes in acting as the root of a Pref module's UI tree. It has been set up to provide &quot;OK&quot; and &quot;Cancel&quot; triggers by default. It has a mechanism to restart the system on an Apply if the module specifies that such a reset will be necessary to implement the user's changes.<BR>
Often a module will use a subclass of <CODE>
PrefDialogClass</CODE>
 as the head of its UI tree--often the subclass intercepts <CODE>
MSG_GEN_APPLY</CODE>
 to ensure valid user choices and to take other appropriate actions.</DD>
<DT>
<STRONG>
PrefValueClass</DT><DD>
</STRONG>
PrefValue objects act like objects of <CODE>
GenValueClass</CODE>
. However, these objects have the ability to reset their values to that originally stored in the .INI file (in case the user wants to cancel). They can handle only word-length values.</DD>
<DT>
<STRONG>
PrefItemGroupClass</DT><DD>
</STRONG>
Objects of this class act like GenItemGroups. In addition, this class has the ability to store an &quot;original&quot; value. </DD>
<DT>
<STRONG>
PrefStringItemClass</DT><DD>
</STRONG>
A PrefItemGroup normally writes data about selected items in the form of an integer. However, if its children are PrefStringItem objects, the PrefItemGroup can instead write out a special string associated with each PrefStringItem, resulting in a more readable .INI file.</DD>
<DT>
<STRONG>
PrefBooleanGroupClass</DT><DD>
</STRONG>
This class acts like <CODE>
GenBooleanGroupClass</CODE>
 with the ability to store an &quot;original&quot; value.</DD>
<DT>
<STRONG>
PrefDynamicListClass</DT><DD>
</STRONG>
Use objects of this class where you might otherwise use a GenDynamicList. This class will not work together with PrefStringItem objects.</DD>
<DT>
<STRONG>
PrefTocListClass</DT><DD>
</STRONG>
This class presents an alphabetized list of files or driver names. It is used to provide lists of devices, such as the list of available printers. It can also be used to show a list of files with a given token in a given directory.</DD>
<DT>
<STRONG>
TitledGlyphClass</DT><DD>
</STRONG>
This specialized subclass of GenGlyph shows both an icon and a text moniker. It is used to present the icon and name at the top of a typical Preferences module dialog box.</DD>
<DT>
<STRONG>
PrefInteractionClass</DT><DD>
</STRONG>
This class acts like <CODE>
GenInteractionClass</CODE>
, but also will relay certain messages to its children which GenInteraction would not. Those objects which will need to work with the .INI file should receive these messages, so any Gen- objects which will work with the .INI file and any Pref objects should be grouped under PrefInteractions instead of GenInteractions.</DD>
<DT>
<STRONG>
PrefTextClass</DT><DD>
</STRONG>
This class behaves like <CODE>
GenTextClass</CODE>
, except that it will load and save its value based upon that stored in the .INI file.</DD>
<DT>
<STRONG>
PrefTriggerClass</DT><DD>
</STRONG>
This class acts as does GenTriggerClass, but has an extra action, so that two separate messages will be sent when the trigger is activated.</DD>
<DT>
<CODE>
PrefControlClass</DT><DD>
</CODE>
This class acts as a cross between <CODE>
PrefClass</CODE>
 and <CODE>
GenControlClass</CODE>
.</DD>
<DT>
<CODE>
PrefTimeDateControlClass</DT><DD>
</CODE>
This class allows the user to set the system date and time.</DD>
<DT>
<STRONG>
PrefClass</STRONG>
</DT><DD><CODE>
PrefClass</CODE>
 is something like <CODE>
GenClass</CODE>
--while never used directly, it is the superclass of all the other Pref- classes, and sets up several of the mechanisms which all will use.</DD>
</DL>
<P>
There aren't any special restrictions on what sorts of objects appear in the UI tree of a Preferences module. However, the following rules will prove useful in constructing modules that correctly write their data to the .INI file and have a look and feel consistent with existing modules. For an example, see <A HREF="Config_2.htm#48404"> Pref Module UI Framework</A>
.</P>
<UL>
<LI>
As a rule of thumb, the top object of the tree should be a PrefDialog.</LI>
<LI>
For a consistent look, the upper portion of the dialog should contain the module's icon, name, and some brief help text. This is normally done using a TitledGlyph and a GenText object. </LI>
<LI>
Generally the easiest way to specify the .INI file category and key to use is by means of ATTR_GEN_INIT_FILE_CATEGORY and ATTR_GEN_INIT_FILE_KEY. Assuming that the module will work with just one category, it is sufficient to declare an ATTR_GEN_INIT_FILE field for just the top object of the module's UI tree.</LI>
<LI>
Because of the way messages are relayed, you should use PrefInteractions instead of GenInteractions if any objects under the interaction will be saving data to the .INI file.</LI>
</UL>
<P CLASS="figTitle">
Code Display 22-1 <A NAME="48404">
 </A>
Pref Module UI Framework</P>
<PRE>@object MPMDialogClass MPMRoot = {
	GI_states = @default &amp; ~GS_USABLE;
	GI_comp = @MPMTitleGroup, @MPMOtherStuff;
	HINT_INTERACTION_SINGLE_USAGE;
	HINT_INTERACTION_COMPLEX_PROPERTIES;
	HINT_ORIENT_CHILDREN_VERTICALLY;
	HINT_LEFT_JUSTIFY_CHILDREN;
	ATTR_GEN_HELP_CONTEXT = &quot;myPrefModule&quot;;
	ATTR_GEN_INIT_FILE_CATEGORY = &quot;myPref&quot;;
}</PRE>
<PRE>@object GenInteractionClass MPMTitleGroup = {
	GI_comp = @MPMTitle, @MPMHelp;
	HINT_ORIENT_CHILDREN_HORIZONTALLY;
	HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}</PRE>
<PRE>@object TitledGlyphClass MPMTitle = {
	GI_visMoniker = list {
		@FontTextMoniker, @FontLCMoniker, @FontLMMoniker, @FontLCGAMoniker
 	}
}</PRE>
<PRE>@object GenTextClass MPMHelp = {
	GI_attrs = @default | GA_READ_ONLY;
	GTXI_text = &quot;Do such and such to configure your so and so.&quot;;
	HINT_EXPAND_WIDTH_TO_FIT_PARENT; 
	/* Might want HINT_MINIMUM_SIZE */
}</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Config_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Config_1.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">1 Providing the UI</A> 
<!-- to next --> | <A HREF="Config_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.2 UI Fetch Routine</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
