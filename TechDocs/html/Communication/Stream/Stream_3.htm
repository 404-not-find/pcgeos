<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Stream_3.htm,v 1.1 97/06/02 14:16:10 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Blocking on Read or Write</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Using Streams</A>: 1.2 <A HREF="Stream_1.htm">Using Streams: The Basics</A>: 
<A NAME="22136">
 </A>
Blocking on Read or Write</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Stream_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Stream_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.1 Initializing a Stream</A> 
<!-- to next --> | <A HREF="Stream_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.3 Writing Data to a Stream</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>StreamBlocker, StreamError, StreamGetError(), StreamSetError()</PRE>
<P>
A stream is a data buffer of limited size. When a thread writes to the stream, there is a chance it could run out of space. Similarly, when a thread reads from the stream, there is a possibility that it will try to read more data than is available; for example, it might try to read 500 bytes, when only 250 bytes of data are sitting in the stream.</P>
<P>
There are two ways you can deal with these situations. One way is, you can instruct the thread to block. For example, if you try to write 500 bytes to a stream and there is only 200 bytes of space available, the driver will write the first 200 bytes to that space, then have the writing thread block until more space is available (i.e. until the reading thread has read some data). The writing thread will not resume execution until all the data has been written. Similarly, a reading thread could block until the stream provided all the data it requested.</P>
<P>
The other approach is to have the stream driver write or read all it can, then return an appropriate error code. This requires a little more work by the calling thread, as it cannot assume that all the data is always read or written; however, it avoids the risk of deadlock.</P>
<P>
<A NAME="IX_StreamBlocker">
 </A>
All read and write routines are passed a member of the <CODE>
StreamBlocker</CODE>
 enumerated type. This type has two members: STREAM_BLOCK, indicating that the calling thread should block in the situations described above; and STREAM_NO_BLOCK, indicating that the routine should immediately return with an error if enough space is not available. A single thread may, if it wishes, pass STREAM_BLOCK sometimes and STREAM_NO_BLOCK sometimes.</P>
<P>
If a stream routine returns an error, the error will be a member of the <CODE>
StreamError</CODE>
 enumerated type. The possible error values are described in the section for each routine.</P>
<P>
<A NAME="IX_StreamSetError()">
 </A>
Sometimes the device or application at the other end of the stream will need to return a special error value. For example, it may have its own error enumerated type, and may wish to signal an error to the application on the other end of the stream. It can do this by calling <CODE>
StreamSetError()</CODE>
. This routine is passed four arguments:</P>
<UL>
<LI>
The <CODE>
GeodeHandle</CODE>
 of the stream driver.</LI>
<LI>
<A NAME="IX_StreamToken:with StreamSetError()">
 </A>
The <CODE>
StreamToken</CODE>
 of the stream.</LI>
<LI>
<A NAME="IX_StreamRoles:with StreamSetError()">
 </A>
A member of the <CODE>
StreamRoles</CODE>
 enumerated type. The only appropriate values here are STREAM_ROLES_WRITER or STREAM_ROLES_READER.</LI>
<LI>
A word-sized error code.</LI>
</UL>
<P>
If the routine is succesful, it returns zero. Otherwise, it returns a member of the <CODE>
StreamError</CODE>
 enumerated type.<CODE>
</CODE>
</P>
<P>
<A NAME="IX_StreamRoles:with StreamGetError()">
 </A>
<A NAME="IX_StreamGetError()">
 </A>
<A NAME="IX_StreamError">
 </A>
To read a an error value set by the other side of a stream, call <CODE>
StreamGetError()</CODE>
. This routine is passed four arguments:</P>
<UL>
<LI>
The <CODE>
GeodeHandle</CODE>
 of the stream driver.</LI>
<LI>
<A NAME="IX_StreamToken:with StreamGetError()">
 </A>
The <CODE>
StreamToken</CODE>
 of the stream.</LI>
<LI>
A member of the <CODE>
StreamRoles</CODE>
 enumerated type. The only appropriate values here are STREAM_ROLES_WRITER or STREAM_ROLES_READER.</LI>
<LI>
A pointer to a word-sized variable.</LI>
</UL>
<P>
If successful, the routine returns zero, and writes the other side's error value to the passed word-sized argument. If it is unsuccessful, the routine returns a <CODE>
StreamError</CODE>
 value.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Stream_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Stream_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.1 Initializing a Stream</A> 
<!-- to next --> | <A HREF="Stream_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.3 Writing Data to a Stream</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
