<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Socket_3.htm,v 1.1 97/06/02 14:14:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Addresses</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Socket</A>: 3 
<A NAME="40408">
 </A>
Addresses</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Socket_4.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="Socket_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Simple Example</A> 
<!-- to next --> | <A HREF="Socket_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Making a Connection</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_SocketAddress">
 </A>
<A NAME="IX_SA_&ldots;">
 </A>
In the example above, the application queried the user for a connection address. This is a fairly common case. However, some programs need to use hard-wired addresses. Perhaps you want to allow connections over all available domains. Thus, a few words about addresses may be in order.</P>
<P>
Addresses are usually represented via the <CODE>
SocketAddress</CODE>
 structure:</P>
<PRE>typedef struct {
	SocketPort 		SA_port;
	word 		SA_domainSize;
	char *		SA_domain;
	word 		SA_addressSize;
} SocketAddress;
/* domain-specific address data here */</PRE>
<DL>
<DT>
<STRONG>
SA_port</STRONG>
</DT><DD><A NAME="SocketPort structure">
 </A>
Port numbers identify a particular line of communication within a machine. Port numbers may be 32-bit or 16-bit, depending on the domain. They are specified via the <CODE>
SocketPort</CODE>
 structure, made up of a 16-bit <CODE>
ManufacturerID</CODE>
 and 16-bit arbitrarily-chosen token number. If the domain uses 16-bit socket numbers, then use MANUFACTURER_ID_SOCKET_16BIT_PORT<A NAME="MANUFACTURER_ID_SOCKET_16BIT_PORT">
 </A>
 as the <CODE>
ManufacturerID</CODE>
. If the domain allows 32-bit socket numbers, then you may use MANUFACTURER_ID_SOCKET_16BIT_PORT or some other <CODE>
ManufacturerID</CODE>
, probably your own ID or that of some standard service provider. This numbering scheme helps to avoid overlapping port numbers.</DD>
<DT>
<STRONG>
SA_domain</STRONG>
, <STRONG>
SA_domainSize</DT><DD>
</STRONG>
The domain identifies the protocol of the network by which the addressed machine may be reached. The domain is specified by a string. In a <CODE>
SocketAddress</CODE>
 structure, <CODE>
SA_domain</CODE>
 is a pointer to the null-terminated domain name string and <CODE>
SA_domainSize</CODE>
 is the size of the buffer containing the domain name string.</DD>
<DT>
</DT><DD>Many communications protocols are hard-wired to work with a particular domain. To find out all domains available to the user's device, call <CODE>
SocketGetDomain().</CODE>
 (See <A HREF="Socket_4.htm#41559"> Letting the User Choose an Address</A>
.)</DD>
<DT>
<STRONG>
SA_addressSize</STRONG>
, <STRONG>
Address Data</DT><DD>
</STRONG>
The format of the address data used to identify a machine within a domain depends on that domain. The <CODE>
SA_addressSize</CODE>
 field of the <CODE>
SocketAddress</CODE>
 structure contains the size of the address data. The buffer containing the address data should fall immediately after the <CODE>
SocketAddress</CODE>
 structure. Read the documentation for a given domain to find out the format for its addresses.<BR>
You'll want to make sure that space for this data is, in fact, allocated at the end of the structure. If you declare a socket address, you will define a struct, probably based on <CODE>
SocketAddress</CODE>
, that has the fields of <CODE>
SocketAddress</CODE>
, but also has a buffer to hold the resolved address data. More likely than not, you won't need to declare or define such a structure -- you're more likely to use <CODE>
SocketCreateResolvedAddress()</CODE>
 or bypass the creation of this structure altogether.</DD>
</DL>
<P>
Before using an address, make sure that it is in its primitive form. For instance, an IP address like &quot;geoworks.com&quot; is not in its primitive form -- the IP address must be translated into a four-byte number before it can be used. Use <CODE>
SocketResolve()</CODE>
 (described below) to transform an address into its primitive form. Note that the address passed to <CODE>
SocketResolve()</CODE>
 is not in a <CODE>
SocketAddress</CODE>
 structure.</P>
<P CLASS="subsectionLink">
<A HREF="Socket_4.htm">Letting the User Choose an Address</A></P>
<P CLASS="subsectionLink">
<A HREF="Socket_5.htm">Managing Addresses</A></P>
<P CLASS="subsectionLink">
<A HREF="Socket_6.htm">Hardware Ports</A></P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="Socket_4.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="Socket_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Simple Example</A> 
<!-- to next --> | <A HREF="Socket_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Making a Connection</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
