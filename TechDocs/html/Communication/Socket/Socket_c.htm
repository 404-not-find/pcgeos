<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Socket_c.htm,v 1.1 97/06/02 14:15:35 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> SocketSend() and SocketRecv()</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Socket</A>: 7.2 <A HREF="Socket_a.htm">Sending and Receiving Data</A>: 
<A NAME="15666">
 </A>
SocketSend() and SocketRecv()</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Socket_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Socket_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">7.1 Urgent Data</A> 
<!-- to next --> | <A HREF="Socket_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">7.3 Options</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_SocketSend()">
 </A>
The <CODE>
SocketSend()</CODE>
 routine sends data over a socket. It takes several arguments:</P>
<DL>
<DT>
<STRONG>
Socket</DT><DD>
</STRONG>
The socket through which to send data</DD>
<DT>
<STRONG>
Buffer</DT><DD>
</STRONG>
A buffer containing the data to send</DD>
<DT>
<STRONG>
Buffer Size</DT><DD>
</STRONG>
The size of the data buffer.</DD>
<DT>
<STRONG>
Optional Address</DT><DD>
</STRONG>
Address to which to send data. If you pass an address here, make sure that you set the Address flag in the Flags field. If you don't set the Address flag, then this Optional Address argument may be a null pointer.</DD>
<DT>
</DT><DD>For sequenced packet or stream delivery type sockets, optional address is ignored.</DD>
<DT>
</DT><DD>For datagram delivery type sockets, specify the destination address of the packet in this parameter unless the socket has a default destination address as described below.</DD>
<DT>
</DT><DD>Datagram sockets can use the <CODE>
SocketConnect()</CODE>
 routine to specify a default destination address. If they have no default address, you must specify the destination address for the packet. If there is a default destination address and you pass this optional address, then the optional address overrides the default for this send.</DD>
<DT>
The following flags are available:</DT>
<DT>
<STRONG>
SSF_ADDRESS</DT><DD>
</STRONG>
To pass an optional address.</DD>
<DT>
<STRONG>
SSF_URGENT</DT><DD>
</STRONG>
To mark the data packet as urgent.</DD>
<DT>
<STRONG>
SSF_OPEN_LINK</DT><DD>
</STRONG>
To open the link if it is closed or to close the current link if it is idle and open it to a different location. If you do not set this flag, the datagram will only be sent if the link is opened to the desired remote link address. </DD>
</DL>
<P>
Note that in some domains, the driver may delay before sending small packets of data because it is waiting for more packets to combine into one large packet. In many cases, this leads to more efficient communication. You may turn off this behavior by setting the &quot;no delay&quot; option. See <A HREF="Socket_d.htm#20519"> SO_NODELAY: No Delay for small packets To force a driver to send small packets without waiting for other packets to bundle together. Drivers often delay sending small packets, waiting for other packets to bundle together in one larger packet. Th</A>
 for information about setting socket options.</P>
<P>
<A NAME="IX_SocketRecv()">
 </A>
The <CODE>
SocketRecv()</CODE>
 routine receives data from the socket. After filling the passed buffer with data, the socket discards its copy of the received data to make room for the next piece of incoming data.</P>
<P>
Sequenced packet or datagram delivery sockets can only receive whole packets. If you grab data from the socket but don't grab all the data in the packet, the remaining data is lost. Thus, it's a good idea to establish a maximum packet size for sockets using these delivery types. If you're not sure how much room you'll need to receive a packet, call <CODE>
SocketRecv()</CODE>
 with the SRF_PEEK flag. This allows you to &quot;peek&quot; at the incoming data without causing the socket to discard its copy.</P>
<P>
The <CODE>
SocketRecv()</CODE>
 routine takes the following arguments:</P>
<DL>
<DT>
<STRONG>
Socket</DT><DD>
</STRONG>
The socket from which to grab the data.</DD>
<DT>
<STRONG>
Buffer</DT><DD>
</STRONG>
Buffer to fill with data. </DD>
<DT>
<STRONG>
Buffer Size</DT><DD>
</STRONG>
Size of the data buffer. A packet-based socket will not retain data that does not fit in the buffer. A stream socket, however, will.</DD>
<DT>
<STRONG>
Time-out</DT><DD>
</STRONG>
The number of 1/60 second ticks to wait for incoming data. Pass SOCKET_NO_TIMEOUT to wait forever.</DD>
<DT>
<STRONG>
Optional Address</DT><DD>
</STRONG>
If you pass the Address flag of the Flags argument, then pass an empty <CODE>
SocketAddress</CODE>
 buffer. (The buffer's <CODE>
SA_domain</CODE>
, <CODE>
SA_domainSize</CODE>
, and <CODE>
SA_addressSize</CODE>
 fields must be initialized.) Make sure the buffer has room for the address data after the <CODE>
SocketAddress</CODE>
 structure. Note that if either the domain name buffer or the address buffer isn't long enough to hold its string, the resulting truncated string isn't null-terminated.</DD>
<DT>
</DT><DD>If you do not set the Address flag, this Optional Address argument may be a null pointer.</DD>
<DT>
The following flags are available:</DT>
<DT>
<STRONG>
SRF_ADDRESS</DT><DD>
</STRONG>
Return the source address in the Optional Address buffer.</DD>
<DT>
<STRONG>
SRF_URGENT</DT><DD>
</STRONG>
Return the first packet which has been marked urgent. (See <A HREF="Socket_b.htm#38819"> Urgent Data</A>
.)</DD>
<DT>
<STRONG>
SRF_PEEK</DT><DD>
</STRONG>
Force the socket to not discard the data received.</DD>
</DL>
<P>
The <CODE>
SocketRecv()</CODE>
 routine returns the size of the received buffer. If this size is zero, there may be an error in the connection. Use <CODE>
ThreadGetError()</CODE>
 to check for an error. If <CODE>
ThreadGetError()</CODE>
 returns SE_NORMAL, then there was no error and you received a zero-length packet. For a datagram connection, an SE_EXCEPTION error indicates that the network is having problems and some datagrams <EM>
may</EM>
 not be getting through.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Socket_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Socket_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">7.1 Urgent Data</A> 
<!-- to next --> | <A HREF="Socket_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">7.3 Options</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
