<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Documents_7.htm,v 1.1 97/06/02 14:43:40 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> GenDocumentGroup Data</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Documents</A>: 2.2 <A HREF="Documents_5.htm">Document Control Data Fields</A>: 
GenDocumentGroup Data</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Documents_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Documents_6.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 GenDocumentControl Data</A> 
<!-- to next --> | <A HREF="Documents_8.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 GenDocument Attributes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_GenDocumentGroupClass">
 </A>
The GenDocumentGroup object creates and manages the document objects. In the &quot;process&quot; model of document control, it sends messages to the process object (or some other designated object) when the application needs to take some action. (It sends these messages even when the &quot;object&quot; model is being followed; however, the messages are ignored.)</P>
<P>
A list of data fields for the GenDocumentGroup object follows in <A HREF="Documents_7.htm#92951"> GenDocumentGroupClass instance data</A>
. Some of the data fields can be changed at run-time, and others cannot; a discussion of the data fields follows the listing. If a data field cannot be set or read by the application, it is not discussed.</P>
<P CLASS="figTitle">
Code Display 13-2 <A NAME="92951">
 </A>
GenDocumentGroupClass instance data</P>
<PRE>/* GDGI_attrs is a record that specifies certain basic characteristics of the
 * documents to be managed. The attributes are set in the source code and are not
 * changed at run-time. The default settings are below. */
    @instance GenDocumentGroupAttrs				GDGI_attrs = (GDGA_VM_FILE |
					GDGA_SUPPORTS_AUTO_SAVE |
					GDGA_AUTOMATIC_CHANGE_NOTIFICATION |
					GDGA_AUTOMATIC_DIRTY_NOTIFICATION |
					GDGA_APPLICATION_THREAD |
					GDGA_AUTOMATIC_UNDO_INTERACTION |
					GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN);
	/* The following flags are available: 
	 * 	GDGA_VM_FILE,			
	 *	GDGA_NATIVE,
	 *	GDGA_SUPPORTS_AUTO_SAVE, 
	 *	GDGA_AUTOMATIC_CHANGE_NOTIFICATION,
	 * 	GDGA_AUTOMATIC_DIRTY_NOTIFICATION, 
	 * 	GDGA_APPLICATION_THREAD,
	 *	GDGA_VM_FILE_CONTAINS_OBJECTS,
	 *	GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN,
	 * 	GDGA_LARGE_CONTENT,
	 * 	GDGA_AUTOMATIC_UNDO_INTERACTION */</PRE>
<PRE>/* GDGI_untitledName is the name suggested when a new document is
 * first saved. */
    @instance ChunkHandle			GDGI_untitledName;</PRE>
<PRE>/* The GenDocumentGroup object creates a document object for each document
 * opened. The attribute GDGI_documentClass is a pointer to the class definition
 * which will be used for document objects. By default, it points to the
 * definition of GenDocumentClass, so document objects belong to GenDocumentClass.
 * If you use a subclass of GenDocumentClass, you must change this attribute to
 * point to the new class. */
    @instance ClassStruc *			GDGI_documentClass = 
					(ClassStruc *) &amp;GenDocumentClass;</PRE>
<PRE>/* Ordinarily, the Document Group creates document objects by instantiating an
 * object of the class indicated by GDGI_documentClass. However, it can be
 * instructed instead to duplicate a specific document object for each new
 * document. To arrange this, set the GDGI_genDocument to point to the document
 * object to duplicate. */
    @instance optr 			GDGI_genDocument;</PRE>
<PRE>/* If the Procedural model is used, whenever the application needs to take an
 * action, messages will be sent to the output of the GenDocumentGroup.
 * Ordinarily, the output will be the process object. If the Object model is used,
 * this attribute is generally left as a null pointer. */
    @instance optr			GDGI_output;</PRE>
<PRE>/* The GenDocumentGroup object communicates with the GenDocumentControl
 * object through messages. To do this, each one needs an object-pointer to the
 * other. This is set in the source code. */
    @instance optr			GDGI_documentControl;</PRE>
<PRE>/* The GenDocument (or subclass) objects can behave as Content objects. The
 * document control can automatically connect GenDocument objects to the GenView
 * if told to do so. The GDGI_genView field is an object-pointer to a GenView
 * object. */
    @instance optr			GDGI_genView;</PRE>
<PRE>/* In a multiple-document model, the document control can be set up to work with
 * the display control. When this functionality is enabled, the
 * GenDocumentGroup will automatically duplicate a specified block (generally
 * one containing a GenDisplay object), attach the Display object to the specified
 * GenDisplayGroup object, and set the header for the GenDisplay to the name of
 * the document. When the document is closed, the block is freed. */
    @instance optr			GDGI_genDisplay; 
/* GDGI_genDisplayGroup points to the GenDisplayGroup which manages the 
 * GenDisplays. */
    @instance optr			GDGI_genDisplayGroup;</PRE>
<PRE>/* Each GEOS document has a protocol number, which identifies the version of
 * the application that created it. The GDGI_protocolMajor and
 * GDGI_protocolMinor attributes specify the protocol number to be assigned to
 * all documents created by the document control. */
    @instance word			GDGI_protocolMajor = 1;
    @instance word			GDGI_protocolMinor = 0;</PRE>

<H2 CLASS="HeadingC">
The GDGI_attrs Field</H2>
<PRE>GDGI_attrs, MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</PRE>
<P>
<A NAME="IX_GDGI_attrs">
 </A>
This attribute specifies certain characteristics of the documents to be opened. These attributes are generally set in the source code and can not be changed at run-time. They are stored in a word-sized bitfield.</P>
<DL>
<DT>
GDGA_VM_FILE</DT><DD>
<A NAME="IX_GDGA_&ldots;">
 </A>
This attribute is on if the documents to be opened are GEOS Virtual Memory files. By default, it is on.</DD>
<DT>
GDGA_NATIVE</DT><DD>
This attribute is on if the documents to be opened are in the file system's native format (i.e. they are not GEOS files). By default, it is off.</DD>
<DT>
GDGA_SUPPORTS_AUTO_SAVE</DT><DD>
If this attribute is on, the documents will be periodically auto-saved. It works only with VM files (unless you subclass GenDocument to handle <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</CODE>
; see <A HREF="Documents_f.htm#71063"> Working with DOS files</A>
). It works by periodically updating the file to disk. It should probably be turned off if &quot;Save As&quot; and &quot;Revert&quot; are disabled. By default, the attribute is on. The program can temporarily disable auto-save for a document by sending the document object <CODE>
MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE</CODE>
.</DD>
<DT>
GDGA_AUTOMATIC_CHANGE_NOTIFICATION</DT><DD>
If this attribute is on, the GenDocumentGroup<CODE>
 </CODE>
object will periodically check all open documents to see if they have been changed by another process. If a document has changed, the document control will send <CODE>
MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED</CODE>
 to the application. This attribute is useful if the application may be reading multi-user files.</DD>
<DT>
GDGA_AUTOMATIC_DIRTY_NOTIFICATION</DT><DD>
This attribute is relevant only for GEOS files. If the attribute is on, whenever a file is marked &quot;dirty,&quot; the file system will automatically notify the document control. The document control will then take appropriate actions (enable the &quot;Save&quot; trigger, etc.). The document control will also present a &quot;Save changes before closing&quot; dialog box if the document is closed before being saved. If GDGA_AUTOMATIC_DIRTY_NOTIFICATION is off, or if the documents are DOS files, the application will have to notify the document control when the document is dirty. It does this by sending a <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY</CODE>
 to the GenDocumentGroup object (under the procedure model), or by sending a <CODE>
MSG_GEN_DOCUMENT_MARK_DIRTY</CODE>
 to the document object (under the object model). By default, GDGA_AUTOMATIC_DIRTY_NOTIFICATION is on.</DD>
<DT>
GDGA_APPLICATION_THREAD</DT><DD>
If this attribute is on, the GenDocumentGroup object is run by the application thread, as are its (document-object) children. By default, it is on.</DD>
<DT>
GDGA_VM_FILE_CONTAINS_OBJECTS</DT><DD>
If the document control manages Virtual Memory Object files, this attribute should be set to on. By default, this attribute is off.</DD>
<DT>
GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN</DT><DD>
The application's main VisContent, if any, does not manage its children. By default, this attribute is on.</DD>
<DT>
GDGA_LARGE_CONTENT</DT><DD>
The application's main VisContent uses the large model. By default, this attribute is off.</DD>
<DT>
GDGA_AUTOMATIC_UNDO_INTERACTION</DT><DD>
The application sends out undo set-context messages automatically as necessary.</DD>

</DL>
<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_ATTRS">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</H4>
<PRE CLASS="syntax">GenDocumentGroupAttrs 	MSG_GEN_DOCUMENT_GROUP_GET_ATTRS();</PRE>
<P>
Use this message to find out the attributes of the GenDocumentGroup object. Note that the attributes cannot be changed at run-time; they can only be examined.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Flags in GDGI<CODE>
_attrs</CODE>
 bitfield.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H2 CLASS="HeadingC">
The GDGI_untitledName Field</H2>
<PRE><A NAME="IX_GDGI_untitledNameField"> </A>GDGI_untitledName, MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</PRE>
<P>
The first time a new document is saved, the document control presents a &quot;Save As&quot; dialog box. If the <CODE>
GDGI_untitledName</CODE>
 field is set to point to a string, that string will be suggested as the name of the document. If the attribute is not set, no name will be suggested. The current default name can be retrieved by sending <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</CODE>
 to the GenDocumentGroup object.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</H4>
<PRE CLASS="syntax">GenDocumentGroupAttrs 	MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME(
        char *buffer); /* Address to write default name */</PRE>
<P>
This message instructs the GenDocumentGroup object to copy the <CODE>
GDGI_untitledName</CODE>
 attribute to the specified address. In addition, the message will return the <CODE>
GDGI_attrs</CODE>
 word of the GenDocumentGroup object. If you just want the attributes, use <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
buffer</EM>
	A pointer to a character buffer. This buffer should be of length FILE_LONGNAME_BUFFER_SIZE or greater.</P>
<P CLASS="refField">
Return:	The record of flags stored in <CODE>
GDGI_attrs</CODE>
. </P>
<DL>
<DT>
<EM>
*buffer</EM>
</DT><DD>Null-terminated name string.</DD>
</DL>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>
<P CLASS="refField">
Warnings:	Make sure the buffer is long enough to hold any file name. Otherwise, the method may overwrite data after the buffer. The constant FILE_LONGNAME_BUFFER_SIZE, defined in <STRONG CLASS="fileName">
file.def</STRONG>
, is equal to the maximum file name length, counting the null terminator.</P>



<H2 CLASS="HeadingC">
The GDGI_documentClass Field</H2>
<PRE>GDGI_documentClass</PRE>
<P>
<A NAME="IX_GDGI_documentClass">
 </A>
Each time a document is opened, the GenDocumentGroup creates a document object. Ordinarily, the document object is a member of <CODE>
GenDocumentClass</CODE>
. However, sometimes the programmer will want to add functionality to the document objects, doing so by defining a subclass of <CODE>
GenDocumentClass</CODE>
. (For example, in the object model of document control, the program implements most functionality by defining new methods for the document class.) If this is the case, the programmer will have to make sure the GenDocumentGroup object creates document objects from the new class. One can do this by setting the <CODE>
GDGI_documentClass</CODE>
 field to point to the class structure of the new document object class. By default, this field points to <CODE>
GenDocumentClass</CODE>
.</P>


<H2 CLASS="HeadingC">
The GDGI_genDocument Field</H2>
<PRE>GDGI_genDocument</PRE>
<P>
<A NAME="IX_GDGI_genDocument">
 </A>
Ordinarily, the document group creates new document objects by instantiating objects from the class specified in GDGI<CODE>
_documentClass</CODE>
. However, you can instead provide a document object for the document group to duplicate. To do this, set the GDGI<CODE>
_genDocument</CODE>
 field to the optr of the &quot;template&quot; document object. This object should be marked &quot;not usable.&quot;</P>


<H2 CLASS="HeadingC">
The GDGI_output Field</H2>
<PRE>GDGI_output, MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT, MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT</PRE>
<P>
<A NAME="IX_GDGI_output">
 </A>
Every time something happens which needs to be handled by the application, the document control notifies the application in two ways: The relevant document object sends a message to itself, and the GenDocumentGroup object sends a message to its designated output object. In the Procedural model of document control, the document-object messages are ignored, and the GenDocumentGroup messages are sent to an object (usually the process object) which has handlers for the messages. In the Object model, the <CODE>
GDGI_output</CODE>
 attribute is left as a null pointer, and <CODE>
GenDocumentClass</CODE>
 is subclassed to handle the messages.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT</H4>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT();</PRE>
<P>
Under the Procedural model of document control, the GenDocumentGroup sends messages to a designated output object. To get the optr of that output object, send this message to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Return:	Returns the optr of the document group's output object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT">
 </A>
MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT</H4>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT(
        optr	output); /* The new recipient of the GenDocumentGroup's
		output messages */</PRE>
<P>
Under the Procedural model of document control, the GenDocumentGroup<CODE>
 </CODE>
object sends messages to a designated output object. Use this message to change the recipient of the output.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
output</EM>
	The optr of the object which will receive the output.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H2 CLASS="HeadingC">
The GDGI_documentControl Field</H2>
<PRE>GDGI_documentControl</PRE>
<P>
<A NAME="IX_GDGI_documentControl">
 </A>
The GenDocumentControl and the GenDocumentGroup communicate with each other via messages. To do this, each needs an optr to the other. <CODE>
GDCI_documentControl</CODE>
 is an optr to the GenDocumentGroup object for this application. It is set in the source code and is not changed at run time.</P>


<H2 CLASS="HeadingC">
Dynamically Creating Displays</H2>
<PRE>GDGI_genDisplay, GDGI_genDisplayGroup, MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY, MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP</PRE>
<P>
In a multi-document application, each document will ordinarily have its own GenDisplay object and often many other UI objects as well. The document control can be instructed to dynamically create a number of objects for each new document and destroy these objects when the document is closed. </P>
<P>
<A NAME="IX_GDGI_genDisplayGroup">
 </A>
If an application is going to have the document control create and manage GenDisplay objects, it must declare a GenDisplayGroup object. The GenDisplayGroup should be declared normally; however, it should be given no children. In the source code, the GenDocumentGroup object's <CODE>
GDGI_genDisplayGroup</CODE>
 data field should contain an optr to the GenDisplayGroup object.</P>
<P>
<A NAME="IX_GDGI_genDisplay">
 </A>
The application should also declare a template resource. This resource should contain a single generic tree; the top object in this tree should be a GenDisplay object which is set &quot;not usable.&quot; The GenDocumentGroup object's <CODE>
GDGI_genDisplay</CODE>
 field should contain an optr to that GenDisplay.</P>
<P>
When a new document object is created, the document control will automatically copy the resource containing the GenDisplay referenced by <CODE>
GDGI_genDisplay</CODE>
, make the new GenDisplay a child of the GenDisplayGroup referenced by <CODE>
GDGI_genDisplayGroup</CODE>
, and set the new GenDisplay as &quot;usable.&quot; When the document object is destroyed (because the document is closed), the document control will automatically destroy that document's copy of the resource.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY</H4>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY();</PRE>
<P>
The <CODE>
GDGI_genDisplay</CODE>
 field can be set to point to a GenDisplay object. If <CODE>
GDGI_genDisplay</CODE>
 is not a null optr, then the document control will duplicate the resource containing the referenced GenDisplay whenever a new document object is created. The duplicate GenDisplay is made a child of the GenDisplayGroup object indicated by <CODE>
GDGI_genDisplayGroup</CODE>
. By using this message, you can get an optr to that &quot;template&quot; display object. Any changes made to that object will be copied whenever a new document object is created.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Return:	Returns the optr of the &quot;template&quot; GenDisplay.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP</H4>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP();</PRE>
<P>
If a GenDisplayGroup object is used to manage GenDisplay objects, the GenDocumentGroup object will contain an optr to the GenDisplayGroup. By using this message, you can get an optr to the GenDisplayGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Return:	Returns the optr of the GenDisplayGroup object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H2 CLASS="HeadingC">
Connecting Documents with a GenView</H2>
<PRE>GDGI_genView, MSG_GEN_DOCUMENT_GROUP_GET_VIEW</PRE>
<P>
<A NAME="IX_GDGI_genView">
 </A>
The document control can be instructed to automatically connect the output of a GenView to the document object associated with the view. That way, the document object can handle all the messages relating to the view. This is naturally only done when the application is using the Object model; if it is using the Procedural model, a GenView will most likely send its messages to the Process object.</P>
<P>
There are two ways to enable this functionality. One way is appropriate only to single-document applications; the other is appropriate to multi-document applications.</P>
<P>
A single-document application using the Object model should declare the GenView normally as part of the generic tree. (It might well be placed on the GenDocumentControl object's <CODE>
GDCI_enableDisableList</CODE>
.) The source code should set the <CODE>
GDGI_genView</CODE>
 field to be an optr to the GenView. When a document is opened, the document control will automatically set the GenView object to direct its output to the document object.</P>
<P>
A multi-document application using the Object model should use the document control's ability to create and manage GenDisplay objects. The application will have a resource which is duplicated for each open document. This resource will contain a generic tree, at the head of which is a GenDisplay. To use a GenView, all the application has to do is put a GenView in the tree headed by that GenDisplay, and set <CODE>
GDGI_genView</CODE>
 to point to that GenView. When a document object is created, the document control will automatically have the new GenView (in the duplicate resource) send its output to the new GenDocument.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_VIEW">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_VIEW</H4>
<PRE CLASS="syntax">optr MSG_GEN_DOCUMENT_GROUP_GET_VIEW();</PRE>
<P>
The GenDocumentGroup object can be set to automatically link document objects to <CODE>
GenView</CODE>
 objects. Use this message to find out what the designated <CODE>
GenView</CODE>
 is. If there is no such <CODE>
GenView</CODE>
, this message will return a null optr.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Return:	The optr of the <CODE>
GenView</CODE>
 object (specified in GDGI<CODE>
_genView).</CODE>
</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H2 CLASS="HeadingC">
Document Protocols</H2>
<PRE>GDGI_protocolMajor, GDGI_protocolMinor, MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL</PRE>
<P>
<A NAME="IX_GDGI_protocolMinor">
 </A>
<A NAME="IX_GDGI_protocol">
 </A>
Every GEOS file (and each application that creates such files) has a protocol associated with it. Protocols are used to make sure an application knows if a given document was created by a different version of the application. They are stored in the file's FEA_PROTOCOL extended attributes (see <A HREF="../../Files/FileSys/FileSys_d.htm#47278">the File System chapter</A>). The protocol is of the form &quot;MAJOR.MINOR,&quot; where both &quot;MAJOR&quot; and &quot;MINOR&quot; are 16-bit unsigned integers. The application's protocol is specified by the <CODE>GDGI_protocolMajor</EM>
 and <CODE>
GDGI_protocolMinor</CODE>
 attributes of the GenDocumentGroup object. </P>
<P>
All documents created by an application will have the application's protocol number. If a document has the same major protocol number as the application but a lower minor protocol number, the document is compatible with the application. If the document has a lower major protocol number, the document is incompatible with the application; it can be opened only if a routine has been defined to upgrade the document. If the document has a higher protocol than the application (i.e. its major protocol number is higher, or it has the same major protocol number and a higher minor protocol number), the document control will not open the file; it will present an error message. By default, the GenDocumentGroup<CODE>
 </CODE>
object has a <CODE>
GDGI_protocolMajor</CODE>
 of one and a <CODE>
GDGI_protocolMinor</CODE>
 of zero.</P>
<P>
When the user opens an earlier but compatible document, the GenDocumentGroup opens the file and attaches it to a document object. Then, the (newly-created) document object sends itself <CODE>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT;</CODE>
 the GenDocumentGroup then sends its output object the message <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT</CODE>
. If neither of these messages is handled, the document will be opened as if it were of the current protocol (since it is compatible). Often an application will not handle these messages.</P>
<P>
If the user tries to open an earlier and incompatible document, the GenDocumentGroup opens the file and attaches it to a document object. Then, the document object sends a <CODE>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</CODE>
 to itself, and the GenDocumentGroup sends a <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</CODE>
 to its output. If neither message is handled, the GenDocumentGroup closes the file unchanged and removes the document object, and the GenDocumentControl presents an error message (since the document is incompatible). If either message is handled, the document will be opened normally after the handler exits.</P>
<P>
Note that the document control will not automatically change the protocol number for a file after it has been updated. If you wish this done, you should have the handler for the message call one of the routines to change the FEA_PROTOCOL extended attribute.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL</H4>
<PRE CLASS="syntax">dword	MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL();</PRE>
<P>
Use this message to get the protocol number associated with the GenDocumentGroup. A protocol number is composed of two parts, a major component and a minor component. This message returns a double-word; the high word is the major component, and the low word is the minor component. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenDocumentGroupClass.</P>
<P CLASS="refField">
Return:	Returns a dword-sized value; the high word contains the major protocol number, and the low word contains the minor protocol number.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Documents_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Documents_6.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 GenDocumentControl Data</A> 
<!-- to next --> | <A HREF="Documents_8.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 GenDocument Attributes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
