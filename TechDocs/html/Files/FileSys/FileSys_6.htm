<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: FileSys_6.htm,v 1.1 97/06/02 14:45:03 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Directories and Paths</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">The File System</A>: 4 
Directories and Paths</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="FileSys_7.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="FileSys_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Disks and Drives</A> 
<!-- to next --> | <A HREF="FileSys_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5 Files</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Information, whether code or data, is always stored in files. However, storage volumes are not simply collections of files. Rather, they are organized into directories. There are two main reasons for this organization.</P>
<P>
First, a large storage device can easily contain hundreds or thousands of files. Computer users need to be able to find a specific file quickly. If they were confronted with a list of all the files on a storage device, they would have a hard time finding the one they want. The directory structure solves this problem; users can navigate through the directory tree until they find the file they want.</P>
<P>
The other reason for the directory structure is to expand the name-space for files. If every file on a volume were forced to have a unique name, users would find themselves severely restricted. Directories allow more flexibility; since a file is identified by both its name and its location, its name need only be unique within its directory.</P>
<P>
A file can be uniquely specified by a <EM>
full path</EM>
. A full path specifies the volume containing the file as well as all the directories containing the file, starting with the root directory. The volume specification can usually be omitted, indicating that the file is on the same volume as the current working directory. Alternatively, the file can be specified with a <EM>
relative path</EM>
. A relative path specifies the file's position relative to the current working directory, instead of starting with the root. </P>
<P>
In most implementations of DOS, there is a standard way of describing a path. These conventions are used in GEOS as well. A full path begins with a backslash, which represents the root directory. This may be followed by one or more directory specifications, separated by backslashes. The first directory listed would be a member of the root directory; each following directory would be a member of the preceding directory. A relative path is the same, except that it does not begin with a backslash. In either a full or a relative path, their are two special directory names. A single period (&quot;.&quot;) specifies the current directory; that is, the path &quot;.&quot; indicates the current working directory, and the path &quot;\GEOWORKS\DOCUMENT&quot; is the same as the paths &quot;\GEOWORKS\DOCUMENT\.&quot; and &quot;\GEOWORKS\.\DOCUMENT&quot;. A double period (&quot;..&quot;) indicates the parent of the current directory; thus, &quot;\GEOWORKS\DOCUMENT\..&quot; is equivalent to &quot;\GEOWORKS&quot;.</P>
<P>
The GEOS file management system allows each thread to have a working directory. Whenever a thread needs to open a file, it can rely on its working directory instead of passing a full path. GEOS provides an added mechanism: it defines certain system <EM>
standard paths</EM>
 which can be reached with simple system commands. These paths provide a way to standardize directory usage; an application might, for example, keep a certain data file in the standard PRIVDATA directory, leaving the user to decide where that PRIVDATA directory may be. This is covered in detail in the following section.</P>
<P CLASS="subsectionLink">
<A HREF="FileSys_7.htm">Standard Paths</A></P>
<P CLASS="subsectionLink">
<A HREF="FileSys_8.htm">Current Path and Directory Stack</A></P>
<P CLASS="subsectionLink">
<A HREF="FileSys_9.htm">Creating and Deleting Directories</A></P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="FileSys_7.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="FileSys_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Disks and Drives</A> 
<!-- to next --> | <A HREF="FileSys_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5 Files</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
