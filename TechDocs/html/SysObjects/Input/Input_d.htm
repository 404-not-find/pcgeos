<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Input_d.htm,v 1.1 97/06/02 16:19:35 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Keyboard Events</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Input</A>: 3.2 <A HREF="Input_b.htm">Keyboard Input</A>: 
Keyboard Events</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Input_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Input_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Keyboard Input Flow</A> 
<!-- to next --> | <A HREF="Input_e.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Pen Input and Ink</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Each Keyboard event your application and objects receive has gone through preliminary parsing by the keyboard driver. Keyboard drivers are intelligent enough to know several things about different types of keystrokes depending on the character set and the modifier keys held down.</P>
<P>
All Keyboard events pass two sets of information: the current character as interpreted by the keyboard driver, and the actual scan code of the character pressed. This allows you to do additional parsing or to ignore any extraneous information about the keypress that may have been included by the driver.</P>
<P>
For example, if the user presses <CODE>
Ctrl-1</CODE>
, the keyboard driver passes on the character &quot;1&quot; with a flag indicating the Ctrl key was pressed. If the user presses <CODE>
Shift-1</CODE>
, the keyboard driver passes on the &quot;!&quot; character <EM>
without</EM>
 a flag indicating the Shift key is pressed (the Shift key is eaten by the keyboard driver); in this case, it also passes on the scan code of the &quot;1&quot; key. If the user then presses <CODE>
Ctrl-Shift-1</CODE>
, different keyboard drivers may pass different characters. Whether the driver passes &quot;1&quot; or &quot;!,&quot; however, the scan code for the &quot;1&quot; key will also be passed.</P>
<P>
The keyboard driver also understands special &quot;extended&quot; keypresses and &quot;temporary accents&quot;. Some keyboard drivers may use two keystrokes to specify special characters; for example, some keyboard drivers may require the ö character to be entered as &quot;Ctrl-q o&quot; (this is called an extended keypress), and some may require it to be entered as two separate keys: the &quot;o&quot; and the umlaut (this is called a temporary accent).</P>
<P>
In addition to the actual character and the scan code, every Keyboard event gives flags indicating the state of the modifier keys (Ctrl, Alt, Shift), the state of the toggle keys (Caps Lock, Num Lock, etc.), and what type of event it is (first press, repeated press, release, or first press of an extended sequence).</P>
<P>
<A NAME="IX_Postpassive grab:keyboard events">
 </A>
<A NAME="IX_Prepassive grab:keyboard events">
 </A>
<A NAME="IX_Passive grab:keyboard events">
 </A>
<A NAME="IX_MSG_META_KBD_CHAR">
 </A>
Standard Keyboard events come in <CODE>
MSG_META_KBD_CHAR</CODE>
. <A NAME="IX_MSG_META_POST_PASSIVE_KBD_CHAR">
 </A>
<A NAME="IX_MSG_META_PRE_PASSIVE_KBD_CHAR">
 </A>
This message has the same parameters and return values as its pre-passive and post-passive counterparts, <CODE>
MSG_META_PRE_PASSIVE_KBD_CHAR</CODE>
 and <CODE>
MSG_META_POST_PASSIVE_KBD_CHAR</CODE>
. The parameters are listed below:</P>
<DL>
<DT>
<CODE>
character</CODE>
</DT><DD>The character value determined by the keyboard driver and Input Manager.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A word value: The high byte is a record of <CODE>
ShiftState</CODE>
 detailing the modifier keys pressed, and the low byte is a record of <CODE>
CharFlags</CODE>
 giving information about the type of character passed. Both of these records are detailed below.</DD>
<DT>
<CODE>
state</CODE>
</DT><DD>A word value: The high byte is the scan code of the key pressed (without modifiers), and the low byte is a record of <CODE>
ToggleState</CODE>
 detailing the state of the toggle keys. <CODE>
ToggleState</CODE>
 is detailed below.</DD>
</DL>
<P>
<A NAME="IX_SS_&ldots;  (ShiftState)">
 </A>
<A NAME="IX_ShiftState">
 </A>
Three different records of flags define the Keyboard event. The <CODE>
ShiftState</CODE>
 record describes which modifier keys are pressed and has the following flags:</P>
<DL>
<DT>
SS_LALT</DT><DD>The left Alt key is pressed.</DD>
<DT>
SS_RALT</DT><DD>The right Alt key is pressed.</DD>
<DT>
SS_LCTRL</DT><DD>The left Ctrl key is pressed.</DD>
<DT>
SS_RCTRL</DT><DD>The right Ctrl key is pressed.</DD>
<DT>
SS_LSHIFT</DT><DD>The left Shift key is pressed.</DD>
<DT>
SS_RSHIFT</DT><DD>The right Shift key is pressed.</DD>
<DT>
SS_FIRE_BUTTON_1</DT><DD>
The first joystick-style &quot;fire button&quot; (if any) is pressed.</DD>
<DT>
SS_FIRE_BUTTON_2</DT><DD>
The second joystick-style &quot;fire button&quot; (if any) is pressed.</DD>
</DL>
<P>
<A NAME="IX_TS_&ldots;  (ToggleState)">
 </A>
<A NAME="IX_ToggleState">
 </A>
The <CODE>
ToggleState</CODE>
 record describes which toggle keys are currently active. It has the following flags.</P>
<DL>
<DT>
TS_CAPSLOCK</DT><DD>
The Caps Lock is set.</DD>
<DT>
TS_NUMLOCK</DT><DD>
The Num Lock is set.</DD>
<DT>
TS_SCROLLLOCK</DT><DD>
The Scroll Lock is set.</DD>
</DL>
<P>
<A NAME="IX_CF_&ldots;  (CharFlags)">
 </A>
<A NAME="IX_CharFlags">
 </A>
The <CODE>
CharFlags</CODE>
 record contains several flags indicating whether this event is a first press, a release, a repeat press, or an extended or temporary character. Its flags are listed below.</P>
<DL>
<DT>
CF_STATE_KEY</DT><DD>
Set if either a <CODE>
ShiftState</CODE>
 key or a <CODE>
ToggleState</CODE>
 key is being pressed along with the passed character.</DD>
<DT>
CF_EXTENDED</DT><DD>
Set if this event is part of an extended keystroke. This flag is generally only used by the keyboard driver during its parsing; you will not have to use it. (Extended keypresses are passed by the Input Manager to your application as a single event with the resultant character, not as two events.)</DD>
<DT>
CF_TEMP_ACCENT</DT><DD>
Set if this event is part of a temporary accent keystroke. Temporary accents are used only by the keyboard driver, like extended keypresses above.</DD>
<DT>
CF_FIRST_PRESS</DT><DD>
Set if the event represents the user's first press of the key. This is akin to a button press event and will, at some point, be followed by a CF_RELEASE event.</DD>
<DT>
CF_REPEAT_PRESS</DT><DD>
Set if the event is generated by the user holding down the key (as opposed to a first press, above). If you want the user to hit the key for each individual character, you should ignore this type of event.</DD>
<DT>
CF_RELEASE</DT><DD>Set if the user lets up on a key. Applications typically are not interested in these events for text, and they can automatically be ignored by setting GVA_DONT_SEND_KBD_RELEASES in your GenView's instance data (this only affects handling Keyboard events in visible objects).</DD>
</DL>
<P>
A sample handler for <CODE>
MSG_META_KBD_CHAR</CODE>
 is shown in <A HREF="Input_d.htm#57195"> Sample MSG_META_KBD_CHAR Handler</A>
. It is used by a visible object that simply increments one of its instance fields each time the greater-than key (&gt;) is pressed.</P>
<P CLASS="figTitle">
Code Display 11-1 <A NAME="57195">
 </A>
Sample MSG_META_KBD_CHAR Handler</P>
<PRE>/* This method is used by a visible object of MyVisObjClass. It takes all
 * occurrences of the greater-than (&gt;) key and increments the object's MVOCI_data
 * instance field, ignoring when the user holds down the key. Also, the GenView
 * is set to pass along key releases as well as presses; the method must also
 * ignore releases.
 *
 * Note that the object will only get keyboard input when it has the focus. */</PRE>
<PRE>/* The format of this message is
 * void (word character, word flags, word state) */</PRE>
<PRE>@method MyVisObjClass, MSG_META_KBD_CHAR {</PRE>
<PRE>	/* First, check if the character is the one we want. */
    if (character == `&gt;') {</PRE>
<PRE>	/* If it is, make sure the user is not holding the key down and
	 * that this is not a release event. Check that CF_REPEAT_PRESS and
	 * CF_RELEASE are not set in the low byte of the flags parameter.
	 * If either is set, ignore the character and send MSG_META_FUP_KBD_CHAR
	 * so the UI may provide default keyboard navigation. */</PRE>
<PRE>	if ((flags &amp; CF_REPEAT_PRESS) || (flags &amp; CF_RELEASE)) {
	    @call self::MSG_META_FUP_KBD_CHAR(character, flags, state);
	} else {
	    /* If we get here, we know the character is what we want. Increment
	     * the instance field and return. */</PRE>
<PRE>	    (pself-&gt;MVOCI_data)++;
	}</PRE>
<PRE>	/* If the character is not a greater-than, we must send it on to the UI
	 * with MSG_META_FUP_KBD_CHAR. If we do not, all other keyboard presses
	 * we receive will never be handled; this will cause keyboard
	 * accelerators and menu navigation not to work. */
    } else {
	@call self::MSG_META_FUP_KBD_CHAR(character, flags, state);
    }
}</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Input_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Input_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Keyboard Input Flow</A> 
<!-- to next --> | <A HREF="Input_e.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Pen Input and Ink</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
