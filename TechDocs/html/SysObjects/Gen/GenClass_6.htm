<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenClass_6.htm,v 1.2 97/09/05 14:00:54 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Visual Monikers</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenClass</A>: 3.1 <A HREF="GenClass_5.htm">GenClass Basics</A>: 
<A NAME="10323">
 </A>
Visual Monikers</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 GenClass Basics</A> 
<!-- to next --> | <A HREF="GenClass_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Composite Links</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_GI_visMoniker">
 </A>
<A NAME="IX_Monikers">
 </A>
A visual moniker is a text or graphics string attached to a generic object. This visual moniker displays the given string in a manner relevant to the specific implementation of an object. For example, a GenTrigger might create a button with text inserted as the object's main visual implementation. The visual moniker in this case might cover the object's total area. A GenPrimary, on the other hand, might only add such text in a title bar of the window. In all cases, the specific user interface has final control over how a visual moniker is displayed to the user.
<IMG SRC="GenClass_6_monikers.gif">

</P>

<H2 CLASS="HeadingC">
Simple Visual Monikers</H2>
<P>
<A NAME="IX_@visMoniker">
 </A>
You may set the visual moniker of an object using the <CODE>
GI_visMoniker</CODE>
 instance field. This instance field expects an argument of type <CODE>
@visMoniker</CODE>
. The visual moniker of an object is not actually stored within this instance field, however. The visual moniker of an object is stored within its own chunk, outside of the object itself. The <CODE>
GI_visMoniker</CODE>
 instance field contains a chunk handle to this visual moniker chunk. Because a visual moniker can only be referenced by a chunk handle, visual monikers for an object must reside in the same block as the object that points to them. The UI will set up this chunk and chunk handle automatically.</P>
<P>
Within the object's definition, set the <CODE>
GI_visMoniker </CODE>
field to the desired visual moniker (either a text or graphics string). This can be done either by directly setting the <CODE>
GI_visMoniker</CODE>
 field to the string or by indirectly setting the field to a visual moniker chunk defined elsewhere within your user interface with the Goc keyword <CODE>
@visMoniker</CODE>
. (See <A HREF="GenClass_6.htm#88023"> Setting Visual Monikers</A>
.)</P>
<P CLASS="figTitle">
Code Display 2-5 <A NAME="88023">
 </A>
Setting Visual Monikers</P>
<PRE>/* A visual moniker can be set directly within the object's definition. */</PRE>
<PRE>@object GenTriggerClass MyTrigger = {
    GI_visMoniker = &quot;Push Me&quot;;
}</PRE>
<PRE>/* A visual moniker may also be defined indirectly within a .goc file. */</PRE>
<PRE>/* The data for MyMoniker is set using the Goc keyword @visMoniker. This moniker
 * must reside in the same resource block as the object using it. This moniker
 * should be declared before being used in an object declaration. */</PRE>
<PRE>@visMoniker MyMoniker = &quot;Push Me&quot;;</PRE>
<PRE>@object GenTriggerClass MyTrigger = {
    GI_visMoniker = @MyMoniker;
}</PRE>
<P>
Remember that the <CODE>
GI_visMoniker</CODE>
 instance field only stores a chunk handle to the actual string. The visual moniker for the object is not contained in the object chunk itself.</P>
<P>
<A NAME="IX_Keyboard shortcuts:mnemonics">
 </A>
Text monikers may also specify a character to act as a mnemonic. Mnemonics are keyboard shortcuts used to activate an object without use of the mouse. Menus, menu items, and buttons frequently have mnemonic characters attached. This allows a user to navigate quickly to other UI objects or to activate them. If the specified character is within the text moniker, that letter will be highlighted in whatever fashion the specific UI decides is relevant. For instance, in OSF/Motif, mnemonic characters are underlined.</P>
<P>
Usually the first letter of the text moniker is used for the mnemonic, though any character may be used. The specific UI will underline the first such occurrence of the character within the text moniker. If the character is not within the text itself, the specific UI may place the character within parentheses at the end of the text moniker. Mnemonics are activated according to specifications in the specific UI. In OSF/Motif, pressing the ALT key puts the user interface into its keyboard navigation mode. In this mode, all mnemonics for objects in the focus are activated by pressing the character of the mnemonic without need of an additional keystroke.
<IMG SRC="GenClass_6_mnemonics.gif">

</P>
<P>
Mnemonics are set by enclosing the desired character in single quotes before the text string in your instance data. Mnemonics are case specific when defined. For example, if a visual moniker is the text &quot;File,&quot; only an uppercase mnemonic of F would highlight the first character in the text. Mnemonics are <EM>
not</EM>
 case specific in their activation methods, however. For example, either <EM>
alt</EM>
-f or <EM>
alt</EM>
-F will activate a keyboard mnemonic of F. </P>
<P>
Mnemonics are only valid for an object if that object is visually displayed and currently has the focus (see <A HREF="../../SysObjects/Input/index.htm">the Input chapter</A>). Therefore, you may duplicate mnemonics for objects that will not exist at the same focus level. (An example of objects at the same focus level would be objects within the same menu.) Be careful not to duplicate the same mnemonic within the same focus level, as the UI will only associate the mnemonic with the first object that matches it.</P><P>
The mnemonic may also store one of the following constants:</P>
<DL>
<DT>
VMO_CANCEL corresponds to the specific UI defined cancel mnemonic. Use this rather than a special cancel mnemonic of your own choosing to keep the UI consistent.</DT>
<DT>
VMO_MNEMONIC_NOT_IN_MKR_TEXT indicates that the mnemonic occurs after the null-terminator for the moniker text. This moniker is itself not null-terminated.</DT>
<DT>
VMO_NO_MNEMONIC indicates that this moniker contains no mnemonic.</DT>
</DL>
<P>
If you need other functionality that requires keyboard control of some form and mnemonics are not satisfactory, see <A HREF="GenClass_8.htm#77927"> Keyboard Accelerators</A>
.</P>
<P CLASS="figTitle">
Code Display 2-6 Setting Mnemonic Characters</P>
<PRE>/* Mnemonics are case specific. If the following example enclosed f instead of
 * F within single quotes, then the character f in parentheses would follow the
 * text &quot;File.&quot; Note that this case specificity does not apply to the user's
 * activation of the object. That is, alt f will activate a mnemonic of F. */</PRE>
<PRE>@object MyTrigger GenTriggerClass {
    GI_visMoniker = `F', &quot;File&quot;;
}</PRE>
<PRE>/* You can also specify the character to highlight with an actual numerical
 * position, counting from a zero-based (1st character is 0, 2nd character is 1,
 * etc.) character position in the text string. The &quot;5&quot; in the following example
 * will underline the F character (the sixth character in the text string.) */</PRE>
<PRE>    GI_visMoniker = 5, &quot;Open File&quot;;</PRE>


<H2 CLASS="HeadingC">
Graphics String Visual Monikers</H2>
<P>
The GI_<CODE>
visMoniker</CODE>
 instance field recognizes several keywords. These keywords are listed below and are usually only used in the construction of gstring visual monikers. </P>
<UL>
<LI>
style = { <EM>
text</EM>
, <EM>
abbrevText</EM>
, <EM>
graphicText</EM>
, <EM>
icon</EM>
, <EM>
tool</EM>
 }<BR>
This keyword specifies the <CODE>
VMStyle</CODE>
 in use by this visual moniker.<BR>
<BR>
<EM>
text</EM>
                             Normal text moniker<BR>
<EM>
abbrevText</EM>
          Abbreviated text moniker (i.e., a short textual <BR>
                                     description rather than the full title). This is used <BR>
                                     for the name under an icon of an iconified <BR>
                                     GenPrimary.<BR>
<EM>
graphicText</EM>
         Textual gstring<BR>
<EM>
icon</EM>
                           Normal gstring moniker<BR>
<EM>
tool</EM>
                            Moniker for a tool, usually smaller than a standard <BR>
                                     visual moniker</LI>
<LI>
size = { <EM>
tiny</EM>
, <EM>
standard</EM>
, <EM>
large</EM>
, <EM>
huge</EM>
 }<BR>
This keyword specifies the <CODE>
DisplaySize</CODE>
 that this moniker is intended for. It has nothing to do with the actual size of the moniker, which can be set with the keyword `cachedSize.' Each size corresponds to a display type's resolution level. <BR>
<BR>
<EM>
tiny</EM>
                                Tiny screens: CGA, 256x320.<BR>
<EM>
standard</EM>
                     Standard screens: EGA, VGA, HGC, MCGA<BR>
<EM>
large</EM>
                              Large screens: 800x680 SVGA<BR>
<EM>
huge</EM>
                              Huge screens<BR>
<BR>
You should not, in general, use monikers whose sizes are larger than their intended display type. (I.e. using `huge' sized monikers on VGA screens.) You may use smaller monikers on larger screens, however.</LI>
<LI>
color = { <EM>
gray1</EM>
, <EM>
gray2</EM>
, <EM>
gray4</EM>
, <EM>
gray8</EM>
, <EM>
color2</EM>
, <EM>
color4</EM>
, <EM>
colorRGB</EM>
 }<BR>
This keyword specifies the color capability of the display that this setting is intended for. Each setting corresponds to a <CODE>
DisplayClass</CODE>
.<BR>
<BR>
<EM>
gray1</EM>
                            1 bit/pixel gray scale<BR>
<EM>
gray2</EM>
                            2 bit/pixel gray scale<BR>
<EM>
gray4</EM>
                            4 bit/pixel gray scale<BR>
<EM>
gray8</EM>
                            8 bit/pixel gray scale<BR>
<EM>
color2</EM>
                           2 bit/pixel color index<BR>
<EM>
color4</EM>
                           4 bit/pixel color index<BR>
<EM>
color</EM>
RGB                    color with RGB values</LI>
<LI>
aspectRatio = { <EM>
normal</EM>
, <EM>
squished</EM>
, <EM>
verySquished</EM>
 }<BR>
This keyword specifies the aspect ratio of the display that this moniker is intended for.<BR>
<BR>
<EM>
normal</EM>
                        VGA, MCGA<BR>
<EM>
squished</EM>
                     EGA, HGC (though normal is usually used)<BR>
<EM>
verySquished</EM>
             CGA</LI>
<LI>
cachedSize = { <EM>
X</EM>
, <EM>
Y</EM>
 }<BR>
This keyword sets the cached size (pixel by pixel) of the moniker.</LI>
<LI>
gstring { &lt;<EM>
GString OpCodes</EM>
&gt; }<BR>
This keyword stores the gstring operations used in creating the visual moniker. These operations may also specify the creation of a bitmap by using the <CODE>
Bitmap</CODE>
 operator.</LI>
</UL>
<P CLASS="figTitle">
Code Display 2-7 Examples of GString Visual Monikers</P>
<PRE>/* A Graphics string consisting of GString opcodes. */
    GI_visMoniker = {
<EM>	</EM>size = tiny;
	color = color4;
	aspectRatio = normal;
	cachedSize = 15,15;
	gstring{
	    GSSaveTransform(),
	    GSApplyRotation(45),
	    GSFillEllipse(0,0,10,15),
	    GSRestoreTransform(),
	    GSDrawEllipse(0,0,10,15),
	    GSEndString()
	}
    }</PRE>
<PRE>/* A Graphics string containing a bitmap. */
@visMoniker MyBitmap = {
	style = icon;
	size = standard;
	color = color4;
	aspectRatio = normal;
	cachedSize = 64, 40;
	gstring {
	    GSDrawBitmapAtCP(166),
	    Bitmap (64,40,BMC_PACKBITS, (BMT_MASK|BMF_4BIT)),
	    251, 0,
	    233, 221,
	    ...,
	    GSEndString()
	}
    }</PRE>


<H2 CLASS="HeadingC">
Visual Moniker Lists</H2>
<P>
In some cases, an application may wish to use different visual monikers under specific circumstances. For example, a GenApplication's icon may need separate graphics strings for different display types (VGA, SVGA, etc.) In such cases, the argument for the moniker instance field should be given as a list of separate and distinct visual monikers. (See <A HREF="GenClass_6.htm#97070"> Simple Lists</A>
.)</P>
<P>
You may then place each of these monikers within its own separate resource. Because only one moniker will be selected from the list, only one resource will be loaded into the object block, thereby conserving memory. When the application selects its appropriate moniker, the list will be replaced with the specific moniker, copied into the object block. The system performs this function automatically.</P>
<P CLASS="figTitle">
Code Display 2-8 <A NAME="97070">
 </A>
Simple Lists</P>
<PRE>/* A list of monikers. */
    GI_visMoniker = list {
			@moniker1, 
			@moniker2, 
			@moniker3
		}</PRE>
<PRE>/* If several monikers are specified in a list, they must be explicitly defined
 * somewhere else. If these monikers are complicated (as in the case of graphics
 * strings) they should each reside within their own resource because they will be
 * loaded in only once per application run. (Those that will be used together can
 * be within the same resource.) For example, in GEOS, several monikers
 * pertaining to different display types would be placed within separate resources.
 * When the appropriate moniker is selected, the list will be replaced with the
 * specific moniker. */</PRE>
<PRE>@start AppMonikerOneResource, notDetachable;</PRE>
<PRE>@visMoniker moniker1 = {
    size = large;
    color = color4;
    aspectRatio = normal;
    cachedSize = 64, 40;
    gstring {<EM>gstring data</EM>}
}</PRE>
<PRE>@end AppMonikerOneResource;</PRE>
<PRE>/* That moniker could then be declared within the object's instance data. */
@object GenPrimaryClass MyObject = {
    GI_visMoniker = list { @moniker1 }
}</PRE>
<PRE>/*
 * The GenApplication object usually contains a moniker list that allows the 
 * specific UI to select a moniker based on the display.
 */
@object GenApplicationClass MyApplication = {
    GI_visMoniker = list {
	@TrigTextMoniker,			/* a simple text string */
	@TrigLCMoniker,			/* Large Color */
	@TrigLMMoniker,			/* Large Mono */
	@TrigSCMoniker,			/* Small Color */
	@TrigSMMoniker,			/* Small Mono */
	@TrigLCGAMoniker,			/* Large CGA */
	@TrigSCGAMoniker			/* Small CGA */
    }
}</PRE>
<PRE>@visMoniker TrigTextMoniker = &quot;Push Me&quot;;</PRE>
<PRE>/* Graphics monikers might then appear within their own resource block. This
 * enables efficient memory management. */</PRE>
<PRE>@start AppMonikerResource, notDetachable;</PRE>
<PRE>@visMoniker TrigLCMoniker = {
    style = icon;
    size = large;
    color = color4;
    aspectRatio = normal;
    cachedSize = 64, 40;
    gstring {
	GSDrawBitmapAtCP(166),
	Bitmap (64,40,BMC_PACKBITS, (BMT_MASK|BMF_4BIT)),
	/*** insert Bitmap here ***/
	GSEndString()
    }
}</PRE>
<PRE>@end AppMonikerResource</PRE>


<H2 CLASS="HeadingC">
The Inner Workings of Visual Monikers</H2>
<P>
The following section explains the inner workings of visual monikers within GEOS. It is not necessary to understand many of these concepts but it is illustrative of the system, and may aid in debugging and custom moniker use.</P>
<P>
<CODE>
GI_visMoniker</CODE>
 can take several types and combinations of arguments, all involving either text or graphics strings. Specifically, <CODE>
GI_visMoniker</CODE>
 may indicate the following:</P>
<DL>
<DT>
	1) a simple text string</DT><DD>
2) a text string with a mnemonic character<BR>
3) a graphics string consisting of GString opcodes<BR>
4) a graphics string containing a bitmap<BR>
5) a list of monikers of any type above.</DD>
</DL>
<P>
Each of these arguments can be set up with the <CODE>
@visMoniker</CODE>
 Goc keyword, but each will store their data in different manners. GEOS automatically sets up the visual moniker in the correct format.</P>
<P>
All visual monikers make use of the <CODE>
VisMoniker</CODE>
 structure. This basic structure indicates whether the moniker is text, a gstring, or a list of several types.</P>
<P CLASS="figTitle">
Code Display 2-9 The Basic VisMoniker Structure</P>
<PRE>/* The Basic VisMoniker structure contains a header which describes the type of 
 * VisMoniker (VisMonikerType) and stores the cached width (width in pixels) of the 
 * VisMoniker. The actual visual moniker data (either text or a gstring) follows
 * this header. 
 *
 * If the visual moniker is text, this VisMoniker structure is contained within a
 * VisMonikerWithText structure. If the visual moniker is a gstring, this 
 * VisMoniker structure is contained within a VisMonikerWithGString structure.*/</PRE>
<PRE>typedef struct {
    byte		VM_type;		/* VisMonikerType */
    word		VM_width;		/* Cached width of moniker */
} VisMoniker;</PRE>
<PRE>/* VisMonikerType specifies the type of moniker contained in the VisMoniker 
 * structure. 
 *
 * The flag VMT_MONIKER_LIST is actually a dummy flag. (This flag is never set
 * within a VisMoniker structure.) VisMonikerListEntryType has a matching flag 
 * in the same location (VMLET_MONIKER_LIST). If that flag is set, it tells the 
 * system that this isn't actually a VisMoniker structure but is instead a
 * VisMonikerListEntry. This is used in moniker lists (see below). 
 *
 * The flag VMT_GSTRING is set if the visual moniker is in the form of a gstring 
 * instead of a simple text string. If this flag is set, VMT_GS_ASPECT_RATIO and
 * VMT_GS_COLOR specify the DisplayAspectRatio and DisplayClass used by this
 * gstring. 
 */</PRE>
<PRE>typedef ByteFlags VisMonikerType;
#define VMT_MONIKER_LIST				0x80
#define VMT_GSTRING				0x40
#define VMT_GS_ASPECT_RATIO				0x30	/* DisplayAspectRatio */
#define VMT_GS_COLOR				0x0f	/* Color */</PRE>
<PRE>#define VMT_GS_ASPECT_RATIO_OFFSET 4
#define VMT_GS_COLOR_OFFSET 0</PRE>
<P>
If the visual moniker is a simple text string, the ChunkHandle within GI_<CODE>
visMoniker</CODE>
 will point to a chunk containing a <CODE>
VisMonikerWithText</CODE>
 structure. This chunk will contain the basic <CODE>
VisMoniker</CODE>
 header, along with the moniker's mnemonic character and a null-terminated text-string.
<IMG SRC="GenClass_6_monikerStruct.gif">

</P>
<P CLASS="figTitle">
Code Display 2-10 VisMonikers With Text</P>
<PRE>/* If the VisMoniker contains simple text, the ChunkHandle within GI_visMoniker 
 * points to a VisMonikerWithText structure. This structure contains the 
 * basic VisMoniker header and the character of the mnemonic. (A value of -1 is 
 * stored in VMWT_mnemonicOffset if there is no mnemonic for this visual moniker.) 
 */</PRE>
<PRE>typedef struct {
    VisMoniker		VMWT_common;
    char		VMWT_mnemonicOffset;
} VisMonikerWithText;</PRE>
<PRE>/* The text, in the form of a null-terminated text string, follows this structure. 
 * This text may be accessed with the VMWT_text offset. */</PRE>
<PRE>#define VMWT_text		(sizeof(VisMonikerWithText)) /* Start of text. */</PRE>
<P>
If the visual moniker is a gstring, the ChunkHandle within GI_<CODE>
visMoniker</CODE>
 will point to a <CODE>
VisMonikerWithGString</CODE>
 structure instead. This structure will contain the basic <CODE>
VisMoniker</CODE>
 header, along with the moniker's cached height and the actual gstring. (The cached width is stored within the <CODE>
VisMoniker</CODE>
 header.)
<IMG SRC="GenClass_6_gstringMonikerStruct.gif">

</P>
<P CLASS="figTitle">
Code Display 2-11 VisMonikers With GStrings</P>
<PRE>/* If the VisMoniker contains a gstring, the ChunkHandle within GI_visMoniker 
 * points to a VisMonikerWithGString structure. This structure contains the 
 * basic VisMoniker header and the cached height of the gstring. (The cached width 
 * is stored within the VisMoniker structure.
 */</PRE>
<PRE>typedef struct {
    VisMoniker		VMWGS_common;
    word		VMWGS_height;
} VisMonikerWithGSTring;</PRE>
<PRE>/* The gstring follows this structure.This gstring may be accessed (though it is 
 * not recommended) with the VMWGS_gString offset. */</PRE>
<PRE>#define VMWGS_gString		(sizeof(VisMonikerWithGString)) /* Start of gstring. */</PRE>
<P>
If instead of a single visual moniker, be it a text string or a gstring, GI_<CODE>
visMoniker</CODE>
 specifies a list of monikers, the case is more complex.</P>
<P>
If GI_<CODE>
visMoniker</CODE>
 contains a list of monikers, that ChunkHandle will point to a group of <CODE>
VisMonikerListEntry</CODE>
 structures (one for each moniker in the list). Each of these list entries will contain the type of moniker it references and the optr of the moniker it refers to. The actual moniker itself is not stored in that chunk. Also, because the moniker may be referred to by an optr, the actual visual monikers may reside in separate resources.
<IMG SRC="GenClass_6_monikerListStruct.gif">

</P>
<P>
When the object containing the moniker list is first built, the system will select one of the monikers in the list (based on matching criteria in the VMLE_<CODE>
type</CODE>
 field) and replace the moniker list with the single selected visual moniker.</P>
<P CLASS="figTitle">
Code Display 2-12 VisMoniker Lists</P>
<PRE>/* If GI_visMoniker contains a list of monikers instead of a single moniker, the 
 * ChunkHandle of that instance field actually points to a collection of 
 * VisMonikerListEntry structures. (The total number can be calculated by dividing 
 * the size of the chunk by sizeof(VisMonikerListEntry) if needed.)
 *
 * Each VisMonikerListEntry structure contains a header which describes the type of 
 * VisMoniker stored in that list entry (VisMonikerListEntryType) and the optr of 
 * the stored moniker. The actual moniker may reside in a different resource. */</PRE>
<PRE>typedef struct {
    word		VMLE_type;
    optr		VMLE_moniker;
} VisMonikerListEntry;</PRE>
<PRE>/* VisMonikerListEntryType specifies the type of moniker specified in the 
 * VisMonikerListEntry structure. 
 *
 * The flag VMLET_MONIKER_LIST must be set within this structure. This flag tells
 * the system that this isn't actually a VisMoniker structure but is instead a
 * VisMonikerListEntry.
 *
 * The system uses the other flags in this structure to determine the type of 
 * moniker contained as the list entry. The system will use this information to
 * select the most appropriate moniker that will satisfy the system's needs. This
 * method is used most often in the selection of a GenPrimary's main application 
 * moniker based on the DisplaySize of the system.
 * 
 * VMLET_GS_SIZE stores the DisplaySize that this moniker is most appropriate for. 
 * This DisplaySize is set using the &quot;size&quot; entry within the visual moniker 
 * declaration.
 *
 * VMLET_STYLE stores the VMStyle that this moniker most closely matches. This 
 * VMStyle is set using the &quot;style&quot; entry within the visual moniker declaration.
 *
 * VMLET_GSTRING specifies that this moniker list entry is in the form of a gstring
 * If this flag is set, VMLET_GS_ASPECT_RATIO and VMLET_GS_COLOR specify the 
 * DisplayAspectRatio and DisplayClass used by this gstring.
 */</PRE>
<PRE>typedef ByteFlags VisMonikerListEntryType;
#define VMLET_GS_SIZE				0x0300 	/* DisplaySize. */
#define VMLET_STYLE				0x0f00	/* VMStyle */
#define VMLET_MONIKER_LIST				0x0080
#define VMLET_GSTRING				0x0040
#define VMLET_GS_ASPECT_RATIO				0x0030	/* DisplayAspectRatio */
#define VMLET_GS_COLOR				0x000f	/* DisplayClass */</PRE>
<PRE>#define VMLET_GS_SIZE_OFFSET	12
#define VMLET_STYLE_OFFSET 8
#define VMLET_GS_ASPECT_RATIO_OFFSET 4
#define VMLET_GS_COLOR_OFFSET 0</PRE>
<PRE>/* VMStyle specifies the style of the visual moniker. The system may select a 
 * moniker based on the style it wishes to display. */</PRE>
<PRE>typedef ByteEnum VMStyle;
#define VMS_TEXT 0				/* Simple text */
#define VMS_ABBREV_TEXT 1				/* Abbreviated text */
#define VMS_GRAPHIC_TEXT 2				/* Textual graphics string */
#define VMS_ICON 3				/* Normal gstring */
#define VMS_TOOL 4				/* Tool-sized gstring */</PRE>
<P>
For information on manipulating visual monikers dynamically using <CODE>
GenClass</CODE>
 messages, see <A HREF="GenClass_d.htm#97676"> Managing Visual Monikers</A>
.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 GenClass Basics</A> 
<!-- to next --> | <A HREF="GenClass_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Composite Links</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
