<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenClass_d.htm,v 1.1 97/06/02 16:14:33 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Managing Visual Monikers</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenClass</A>: 4.2 <A HREF="GenClass_b.htm">Modifying GenClass Instance Data</A>: 
<A NAME="97676">
 </A>
Managing Visual Monikers</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Visual Monikers</A> 
<!-- to next --> | <A HREF="GenClass_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 Managing Keyboard Accelerators</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MSG_GEN_GET_VIS_MONIKER, MSG_GEN_USE_VIS_MONIKER, MSG_GEN_CREATE_VIS_MONIKER, MSG_GEN_REPLACE_VIS_MONIKER, MSG_GEN_REPLACE_VIS_MONIKER_OPTR, MSG_GEN_REPLACE_VIS_MONIKER_TEXT, MSG_GEN_FIND_MONIKER, MSG_GEN_DRAW_MONIKER, MSG_GEN_GET_MONIKER_POS, MSG_GEN_GET_MONIKER_SIZE, MSG_GEN_RELOC_MONIKER_LIST, MSG_GEN_FIND_OBJECT_WITH_TEXT_MONIKER</PRE>
<P>
Sending<CODE>
 MSG_GEN_GET_VIS_MONIKER</CODE>
 to an object returns the chunk handle of the visual moniker (<CODE>
GI_visMoniker</CODE>
) for that object. You can then inspect that visual moniker or use it within other objects (though this is not recommended). You must be careful when sharing monikers with other objects, as freeing one object (and therefore its associated moniker) will interfere with any other objects referencing that moniker.</P>
<P>
Sending<CODE>
 MSG_GEN_USE_VIS_MONIKER</CODE>
 to an object sets a visual moniker for that object to use. The message must pass the chunk handle of the moniker desired for the object along with a <CODE>
VisUpdateMode</CODE>
. Valid <CODE>
VisUpdateMode</CODE>
s are described in <A HREF="../../UI/VisClass/index.htm">the VisClass chapter</A>. The moniker to use must reside in the same block as the object being set. If you need to set an object to use a new moniker from a location outside of its object block, use <CODE>
MSG_GEN_REPLACE_VIS_MONIKER</CODE>
 to copy the moniker to the new location.</P>
<P>
<CODE>
MSG_GEN_REPLACE_VIS_MONIKER</CODE>
 copies a visual moniker from a source location into a destination. This message must pass parameters specifying the type of copy operation. The source for the moniker can be referenced using an optr or a simple text string. Use this message when you wish to copy a moniker from outside of the object's current object block.</P>
<P>
<CODE>
MSG_GEN_REPLACE_VIS_MONIKER_OPTR</CODE>
 and <CODE>
MSG_GEN_REPLACE_VIS_MONIKER_TEXT </CODE>
are simplified versions of the above message, allowing you to set a visual moniker from an optr or from a pointer to a null-terminated text string without having to pass many other arguments. </P>
<P>
<CODE>
MSG_GEN_CREATE_VIS_MONIKER</CODE>
 creates a visual moniker (within the resource block of the object this message is sent to), copying it from a source; it does not, however, attach this moniker to any object. </P>
<P>
<CODE>
MSG_GEN_FIND_MONIKER </CODE>
searches for a specific type of moniker within a moniker list. You may then use the moniker directly. You can also replace the original moniker list with the specified moniker.</P>
<P>
<CODE>
MSG_GEN_DRAW_MONIKER, MSG_GEN_GET_MONIKER_POS</CODE>
, and <CODE>
MSG_GEN_GET_MONIKER_SIZE</CODE>
 all manipulate a currently existing moniker. These messages are most useful for custom gadgets. <CODE>
MSG_GEN_DRAW_MONIKER</CODE>
 draws the moniker according to the criteria passed with the message. <CODE>
MSG_GEN_GET_MONIKER_POS</CODE>
 and <CODE>
MSG_GEN_GET_MONIKER_SIZE</CODE>
 return <CODE>
GEOS</CODE>
 coordinates specifying the location and size of the moniker, respectively. You may then inspect and alter these coordinates before sending the moniker a <CODE>
MSG_GEN_DRAW_MONIKER</CODE>
 to redraw the moniker according to the changed criteria.</P>
<P>
The utility message <CODE>
MSG_GEN_RELOC_MONIKER_LIST</CODE>
 relocates an object's moniker list. </P>
<P>
To find an object with a particular visual moniker, send MSG_GEN_FIND_OBJECT_WITH_MONIKER_FLAGS to the object at which to start the top-down search, passing the text to perform the match.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_GET_VIS_MONIKER">
 </A>
MSG_GEN_GET_VIS_MONIKER</H4>
<PRE CLASS="syntax">ChunkHandle	 MSG_GEN_GET_VIS_MONIKER();</PRE>
<P>
This message retrieves the instance data in the object's current <CODE>
GI_visMoniker</CODE>
 instance field. This message returns the ChunkHandle of the moniker data structure. You can then use that chunk handle to manipulate the visual moniker directly or to copy the moniker for use by other objects.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Return:	The chunk handle of the visual moniker in use by this object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_USE_VIS_MONIKER">
 </A>
MSG_GEN_USE_VIS_MONIKER</H4>
<PRE CLASS="syntax">void	MSG_GEN_USE_VIS_MONIKER(
        ChunkHandle moniker,
        VisUpdateMode updateMode);</PRE>
<P>
This message allows an object to reference a visual moniker; this message does not destroy the chunk of the object's current visual moniker. The moniker must reside in the same block as the object. Use <CODE>
MSG_GEN_REPLACE_VIS_MONIKER</CODE>
 if you wish to set a moniker from a source outside the object block or if you wish to use a new moniker, overwriting the old one.</P>
<P>
You cannot pass a moniker list's chunk handle using this message. See <CODE>
MSG_GEN_FIND_MONIKER</CODE>
 for information on selecting monikers from within a list.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
moniker</EM>
	The chunk handle of the visual moniker to use</P>
<DL>
<DT>
<EM>
updateMode</EM>
</DT><DD><CODE>
VisUpdateMode</CODE>
 to determine when the moniker will be redrawn.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>
<P CLASS="figTitle">
Code Display 2-18 Getting and Using Visual Monikers</P>
<PRE>/* This method effectively copies a visual moniker from ObjectOne into ObjectTwo.
 * Both objects must reside in the same object block. Note that in effect, both
 * ObjectOne and ObjectTwo will &quot;share&quot; the same moniker. This can be dangerous if
 * one object is freed, thereby causing the other object to become dereferenced.
 * For more complex copy operations, use MSG_GEN_REPLACE_VIS_MONIKER instead. */</PRE>
<PRE>@method MyProcessClass, MSG_MY_MONIKER_MESSAGE {
	/* Set up variable to store the chunk handle of the visual moniker. */
    ChunkHandle MyVisMonikerCH;</PRE>
<PRE>	/* Retrieve the visMoniker of ObjectOne and store it in the variable. */</PRE>
<PRE>    MyVisMonikerCH = @call @ObjectOne::MSG_GEN_GET_VIS_MONIKER();</PRE>
<PRE>	/* Set the visMoniker of Object Two to MyVisMonikerCH and update
	 * immediately. Use @send if you don't expect a return value. */</PRE>
<PRE>    @send @ObjectTwo::MSG_GEN_USE_VIS_MONIKER(MyVisMonikerCH, VUM_NOW);
}</PRE>
<PRE>/* You can also declare visual monikers in your .goc file and set them later */</PRE>
<PRE>    @visMoniker OnMoniker = &quot;On&quot;;
    @visMoniker OffMoniker = &quot;Off&quot;;</PRE>
<PRE>	/* Within a method, the following routine will set the moniker to &quot;On&quot;. The
	 * OptrToChunk operator casts the object from an optr to a ChunkHandle. */</PRE>
<PRE>    @call @MyObject::MSG_GEN_SET_MONIKER(OptrToChunk(@OnMoniker), VUM_NOW);</PRE>
<PRE>	/* Within a method, the following routine will set the moniker to &quot;Off&quot; */</PRE>
<PRE>    @call @MyObject::MSG_GEN_SET_MONIKER(OptrToChunk(@OffMoniker), VUM_NOW);</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_REPLACE_VIS_MONIKER">
 </A>
MSG_GEN_REPLACE_VIS_MONIKER</H4>
<PRE CLASS="syntax">ChunkHandle	 MSG_GEN_REPLACE_VIS_MONIKER(@stack
        VisUpdateMode			updateMode,
        word			height,
        word			width,
        word			length,
        VisMonikerDataType			dataType,
        VisMonikerSourceType			sourceType,
        dword			source);</PRE>
<P>
This message copies a visual moniker from a source to the object sent the message. The message returns the chunk handle of the newly copied moniker. The object's current visual moniker is overwritten by this message; therefore, if more than one object shares the overwritten block, the other object should be updated with <CODE>
MSG_GEN_USE_VIS_MONIKER</CODE>
. This message can copy a visual moniker from a variety of sources.</P>
<P>
This message is a general, all-purpose, moniker replacement device. If your visual moniker source is a <CODE>
visMoniker</CODE>
 structure or a null-terminated text string, you may be able to use the simpler messages <CODE>
MSG_GEN_REPLACE_VIS_MONIKER_OPTR</CODE>
 and <CODE>
MSG_GEN_REPLACE_VIS_MONIKER_TEXT</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
updateMode</EM>
	Specifies the<CODE>
 </CODE>
<CODE>
VisUpdateMode</CODE>
 to use when visually updating the changes to the screen. See <A HREF="../../UI/VisClass/index.htm">the VisClass Chapter</A> for more information on <CODE>
VisUpdateMode</CODE>
 types.</P>
<DL>
<DT>
<EM>
height</EM>
</DT><DD>If moniker is a GString, this specifies the height of the moniker in points. Otherwise, set this to zero.</DD>
<DT>
<EM>
width</EM>
</DT><DD>If the moniker is a GString, this specifies the width of the moniker in points. Otherwise, set this to zero.</DD>
<DT>
<EM>
length</EM>
</DT><DD>If the moniker is a GString, this specifies the size of the moniker in bytes. If the moniker is text and this argument is zero, the string is assumed to be null-terminated.</DD>
<DT>
<EM>
dataType</EM>
</DT><DD>Specifies the type of data referenced by the <EM>
source</EM>
. Valid <CODE>
VisMonikerDataType</CODE>
 types include VMDT_VIS_MONIKER, VMDT_TEXT, VMDT_GSTRING, or VMDT_TOKEN.</DD>
<DT>
<EM>
sourceType</EM>
</DT><DD>Specifies the type of pointer referencing the <EM>
source</EM>
. Valid <CODE>
VisMonikerSourceType</CODE>
 types are VMST_FPTR, VMST_OPTR, and VMST_HPTR.</DD>
<DT>
<EM>
source</EM>
</DT><DD>Specifies the source of the moniker to be used during the copy process. This source may be a pointer to a text string, an optr pointing to a visual moniker outside the current block, or a variety of other sources. The source type should be specified in <EM>
sourceType</EM>
. </DD>
</DL>
<P CLASS="refField">
Return:	The chunk handle of the new visual moniker for the object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_REPLACE_VIS_MONIKER_OPTR">
 </A>
MSG_GEN_REPLACE_VIS_MONIKER_OPTR</H4>
<PRE CLASS="syntax">ChunkHandle	 MSG_GEN_REPLACE_VIS_MONIKER_OPTR(
        optr		source,
        VisUpdateMode		updateMode);</PRE>
<P>
This message is a simplified version of MSG_GEN_REPLACE_VIS_MONIKER. If your visual moniker source is an existing <CODE>
visMoniker</CODE>
 structure, you can use this message to replace an object's moniker. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
source</EM>
	The optr of the visMoniker structure to use in the replacement operation.</P>
<DL>
<DT>
<EM>
updateMode</EM>
</DT><DD>Specifies the<CODE>
 </CODE>
<CODE>
VisUpdateMode</CODE>
 to use when visually updating the changes to the screen.</DD>
</DL>
<P CLASS="refField">
Return:	The chunk handle of the new visual moniker for the object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_REPLACE_VIS_MONIKER_TEXT">
 </A>
MSG_GEN_REPLACE_VIS_MONIKER_TEXT</H4>
<PRE CLASS="syntax">ChunkHandle	 MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
        const char		*source,
        VisUpdateMode		updateMode);</PRE>
<P>
This message is a simplified version of MSG_GEN_REPLACE_VIS_MONIKER. If your visual moniker source is a pointer to a null-terminated text string, you can use this message to replace an object's moniker without having to pass the arguments of <CODE>
MSG_GEN_REPLACE_VIS_MONIKER</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
source</EM>
	A pointer to a null-terminated character string to use in the replacement operation.</P>
<DL>
<DT>
<EM>
updateMode</EM>
</DT><DD>Specifies the<CODE>
 </CODE>
<CODE>
VisUpdateMode</CODE>
 to use when visually updating the changes to the screen.</DD>
</DL>
<P CLASS="refField">
Return:	The chunk handle of the new visual moniker for the object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_CREATE_VIS_MONIKER">
 </A>
MSG_GEN_CREATE_VIS_MONIKER</H4>
<PRE CLASS="syntax">ChunkHandle MSG_GEN_CREATE_VIS_MONIKER(@stack
        CreateVisMonikerFlags			flags,
        word			height,
        word			width,
        word			length,
        VisMonikerDataType			dataType,
        VisMonikerSourceType			sourceType,
        dword			source);</PRE>
<P>
This message creates a visual moniker chunk within the resource block of the object sent this message. The moniker is copied from the source specified but is not attached to any object in the new object block.</P>
<P CLASS="refField">
Source:	Unrestricted</P>
<P CLASS="refField">
Destination:	Any <CODE>
GenClass</CODE>
 object</P>
<P CLASS="refField">
Parameters:	<EM>
flags	</EM>
Flags to use in the creation of the new visual moniker. CVMF_DIRTY<EM>
 </EM>
marks the new moniker chunk<EM>
 </EM>
OCF_DIRTY<EM>
.</EM>
</P>
<DL>
<DT>
<EM>
height</EM>
</DT><DD>If moniker is a GString, this specifies the height of the moniker in points. Otherwise, set this to zero.</DD>
<DT>
<EM>
width</EM>
</DT><DD>If the moniker is a GString, this specifies the width of the moniker in points. Otherwise, set this to zero.</DD>
<DT>
<EM>
length</EM>
</DT><DD>If the moniker is a GString, this specifies the length of the moniker in points. Otherwise, set this to zero.</DD>
<DT>
<EM>
dataType</EM>
</DT><DD>Specifies the type of data referenced by the <EM>
source</EM>
. Valid <CODE>
VisMonikerDataType</CODE>
 types include VMDT_VIS_MONIKER, VMDT_TEXT, VMDT_GSTRING, or VMDT_TOKEN.</DD>
<DT>
<EM>
sourceType</EM>
</DT><DD>Specifies the type of pointer referencing the <EM>
source</EM>
. Valid <CODE>
VisMonikerSourceType</CODE>
 types are VMST_FPTR, VMST_OPTR, and VMST_HPTR.</DD>
<DT>
<EM>
source</EM>
</DT><DD>Specifies the source of the moniker to be used during the copy process. This source may be a pointer to a text string, an optr pointing to a visual moniker outside the current block, or a variety of other sources. The source type should be specified in <EM>
sourceType</EM>
. </DD>
</DL>
<P CLASS="refField">
Return:	The chunk handle of the new visual moniker for the object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_FIND_MONIKER">
 </A>
MSG_GEN_FIND_MONIKER</H4>
<PRE CLASS="syntax">optr	MSG_GEN_FIND_MONIKER(
        Boolean		useAppMonikerList,
        word		searchFlags,					/* VisMonikerSearchFlags */
        MemHandle		destBlock);</PRE>
<P>
This message scans a list of monikers and selects a specific moniker (or the most appropriate moniker). The moniker selected is determined according to the passed <CODE>
VisMonikerSearchFlags</CODE>
. This message is usually used by the specific UI to select an application moniker from a list.</P>
<P>
If the first argument (<CODE>
useAppMonikerList</CODE>
) is not zero, the message will use the GenApplication's moniker list instead of the recipient's. This is useful for finding the icon used for an iconified application.</P>
<P>
Note that this message returns an optr, not a chunk handle, as this message is most often used to find a moniker outside of the current object block. This message returns zero if no moniker is found.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
useAppMonikerList<BR>
</EM>
Non-zero to use the moniker list of the application associated with this object.</P>
<DL>
<DT>
<EM>
searchFlags</EM>
</DT><DD><CODE>
VisMonikerSearchFlags</CODE>
 to use for the search criteria. If VMSF_COPY_CHUNK is specified in the <EM>
searchFlags</EM>
, a block handle must be supplied in <CODE>
destBlock</CODE>
. The selected moniker will be copied into that block.</DD>
<DT>
<EM>
destBlock</EM>
</DT><DD>Block to copy a moniker into, if VMSF_COPY_CHUNK is specified in the <EM>
searchFlags</EM>
.</DD>
</DL>
<P CLASS="refField">
Return:	The optr of the moniker found according to the search criteria. (This may be outside the current object block.)</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_DRAW_MONIKER">
 </A>
MSG_GEN_DRAW_MONIKER</H4>
<PRE CLASS="syntax">void	MSG_GEN_DRAW_MONIKER(@stack
        DrawMonikerFlags		monikerFlags,
        word		textHeight,
        GStateHandle		gState,
        word		yMaximum,
        word		xMaximum,
        word		yInset,
        word		xInset);</PRE>
<P>
<A NAME="IX_Monikers:drawing">
 </A>
This message draws a moniker for an object according to the parameters passed. The moniker must currently exist. You can use this message to change the way you wish a visual moniker to appear within a generic object without actually changing the visual moniker itself.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GS_USABLE generic object.</P>
<P CLASS="refField">
Parameters:	<CODE>
monikerFlags</CODE>
 	Specifies the <CODE>
DrawMonikerFlags</CODE>
 to use when drawing the moniker. The <CODE>
DrawMonikerFlags</CODE>
 record specifies the conditions to draw the moniker under.</P>
<DL>
<DT>
<CODE>
textHeight</CODE>
</DT><DD>Specifies the height of the system text. Passing this value speeds the processing of this message. If you do not know the height of the system text, pass zero. </DD>
<DT>
<CODE>
gState</CODE>
 </DT><DD>Specifies the GState, if any, to use when drawing the moniker.</DD>
<DT>
<CODE>
yMaximum, xMaximum</DT><DD>
</CODE>
These specify the maximum height and width of the moniker. Typically, these are used with DMF_CLIP_TO_MAX_WIDTH (in <CODE>
DrawMonikerFlags</CODE>
) to perform a clipping operation on the moniker. Pass zero if no maximum width is desired.</DD>
<DT>
<CODE>
yInset</DT><DD></CODE>
Specifies the point to begin drawing the moniker if the moniker is right or left justified.</DD>
<DT>
<CODE>
xInset</CODE>
 </DT><DD>Specifies the point to begin drawing the moniker if the moniker is top or bottom justified.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Custom gadgets may handle this if they are supplementing or replacing default functionality.</P>
<P CLASS="refField">
Structures:	The <CODE>
DrawMonikerFlags</CODE>
 record defines the parameters to use when drawing a currently existing visual moniker. This record is used by <CODE>
MSG_GEN_DRAW_MONIKER</CODE>
, <CODE>
MSG_GEN_GET_MONIKER_POS</CODE>
 and <CODE>
MSG_GEN_GET_MONIKER_SIZE</CODE>
. Its flags are shown below:</P>
<PRE>DMF_UNDERLINE_ACCELERATOR
DMF_CLIP_TO_MAX_WIDTH
DMF_NONE
DMF_Y_JUST_MASK    /* of type Justifications */
DMF_X_JUST_MASK    /* of type Justifications */</PRE>
<P>
Use DMF_UNDERLINE_ACCELERATOR to underline the keyboard accelerator of a text moniker. Use DMF_CLIP_TO_MAX_WIDTH to clip the visual bounds of the moniker to the width specified in <CODE>
maxWidth</CODE>
<CODE>
. </CODE>
Use DMF_NONE to draw the moniker at the current pen position.</P>
<P>
The two justification masks are of type <CODE>
Justification</CODE>
, and they specify the vertical and horizontal justifications to use when drawing the moniker. The values you can use in the justification fields are</P>
<PRE>J_LEFT
J_RIGHT
J_CENTER
J_FULL</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_GET_MONIKER_POS">
 </A>
MSG_GEN_GET_MONIKER_POS</H4>
<PRE CLASS="syntax">XYValueASDWord MSG_GEN_GET_MONIKER_POS(@stack
        DrawMonikerFlags		monikerFlags,
        word		textHeight,
        GStateHandle		gState,
        word		yMaximum,
        word		xMaximum,
        word		yInset,
        word		xInset);</PRE>
<P>
This message returns the x and y coordinates of the moniker for the object as if the moniker were drawn according to the passed parameters (the same as for <CODE>
MSG_GEN_DRAW_MONIKER</CODE>
). Use the macros DWORD_X and DWORD_Y to extract the appropriate coordinates from the returned value.</P>
<P>
This message, along with <CODE>
MSG_GEN_DRAW_MONIKER </CODE>
and <CODE>
MSG_GEN_GET_MONIKER_SIZE </CODE>
is most useful in the construction and modification of custom gadgets.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	See <CODE>
MSG_GEN_DRAW_MONIKER</CODE>
.</P>
<P CLASS="refField">
Return:	<CODE>
XYValueAsDWord</CODE>
 which can be split up into x and y coordinates of the moniker position with the macros DWORD_X and DWORD_Y.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_GET_MONIKER_SIZE">
 </A>
MSG_GEN_GET_MONIKER_SIZE</H4>
<PRE CLASS="syntax">SizeAsDWord MSG_GEN_GET_MONIKER_SIZE(
        word		textHeight,
        GStateHandle		gState);</PRE>
<P>
This message returns the width and height (in points) of the moniker for the object. Use the macros DWORD_WIDTH and DWORD_HEIGHT to extract the appropriate coordinates from the returned value. This message, along with <CODE>
MSG_GEN_DRAW_MONIKER </CODE>
and <CODE>
MSG_GEN_GET_MONIKER_POS</CODE>
, is most useful in the construction and modification of custom gadgets.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<CODE>
textHeight</CODE>
	The system text height, if known; otherwise, pass zero.</P>
<DL>
<DT>
<CODE>
gstate</CODE>
</DT><DD>The GState handle of the GState to draw to.</DD>
</DL>
<P CLASS="refField">
Return:	<CODE>
SizeAsDWord</CODE>
 which can be split up into with and height with the macros DWORD_WIDTH and DWORD_HEIGHT.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_RELOC_MONIKER_LIST">
 </A>
MSG_GEN_RELOC_MONIKER_LIST</H4>
<PRE CLASS="syntax">void 	MSG_GEN_RELOC_MONIKER_LIST(
        optr		monikerList,
        word 		relocFlag); /* 0: relocate; 1: unrelocate */</PRE>
<P>
This method (un)relocates a passed moniker list. </P>
<P CLASS="refField">
Source:	Anyone.</P>
<P CLASS="refField">
Destination:	Any GenClass object.</P>
<P CLASS="refField">
Parameters:	<EM>monikerList</EM> 	optr of moniker list.</P>
<DL>
<DT>
<EM>reloc</EM></DT><DD>Flag specifying whether relocation or unrelocation is desired.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_FIND_OBJECT_WITH_TEXT_MONIKER">
 </A>
MSG_GEN_FIND_OBJECT_WITH_TEXT_MONIKER</H4>
<PRE CLASS="syntax">optr	MSG_GEN_FIND_OBJECT_WITH_TEXT_MONIKER(
        char	*text,
        word	flags);</PRE>
<P>
This message recursively searches through the generic tree (starting at the object sent the message) for an object whose visual moniker matches the passed text. This match does not need to be complete (unless the flag GFTMF_EXACT_MATCH is passed); the message will return the first object whose initial characters match the given text. The message must pass <CODE>
GenFindObjectWithMonikerFlags</CODE>
.</P>
<PRE>typedef WordFlags GenFindObjectWithMonikerFlags;
#define GFTMF_EXACT_MATCH 0x8000
#define GFTMF_SKIP_THIS_NODE 0x4000</PRE>
<P>
If GFTMF_EXACT_MATCH is passed, the text and the visual moniker text must match exactly (null-terminated). If GFTMF_SKIP_THIS_NODE is passed, the object which sent the message will not be checked; only its children will be checked.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	Null-terminated text.</P>
<DL>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>
GenFindObjectWithMonikerFlags</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	optr of the object with the matching moniker, or null if no moniker was found.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Visual Monikers</A> 
<!-- to next --> | <A HREF="GenClass_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 Managing Keyboard Accelerators</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
