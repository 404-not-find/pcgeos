<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenClass_15.htm,v 1.1 97/06/02 16:12:31 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Hints to the Specific UI</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenClass</A>: 6.2 <A HREF="GenClass_13.htm">Vardata</A>: 
<A NAME="68134">
 </A>
Hints to the Specific UI</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_13.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_14.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">6.1 Optional Attributes (ATTRs)</A> 
<!-- to next --> | <A HREF="GenClass_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">6.3 Dynamically Managing VarData</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Hints permit the developer to add suggested behavior to the user interface without requiring the specific UI to implement that functionality. Hints therefore provide the specific UI with less stringent guidelines than other attributes. The specific UI has the option of completely ignoring a hint if it cannot understand it or implement it in the requested fashion. </P>
<P>
For example, some hints deal with the spacial arrangement of objects and can be ignored if the specific UI cannot accommodate their requests. Developers should use hints to add suggested user interface behavior throughout their UI. This suggested use, however, should not be crucial to their application. </P>
<P>
For example, the hint <CODE>
HINT_LIST_CHECKBOXES</CODE>
 has no effect under OSF/Motif because the OSF/Motif specification does not include checkboxes. However, in some other specific UI (OpenLook, for example) that feature may be implemented.</P>
<P CLASS="figTitle">
Code Display 2-25 Setting Hints</P>
<PRE>@object GenInteractionClass MyInteraction = {
    GI_comp = @OneTrigger, @TwoTrigger, @ThreeTrigger;</PRE>
<PRE>	/* Hints are added directly in an object's declaration. Note that each
	 * vardata entry will expand the size of the object in memory. */
    <A NAME="IX_HINT_ORIENT_CHILDREN_HORIZONTALLY"> </A>HINT_ORIENT_CHILDREN_HORIZONTALLY;
	/* This hint instructs the specific UI to arrange the object's children
	 * in one or more horizontal rows, if possible. */
}</PRE>
<PRE>/* Hints are entered separately in C if multiple hints are desired. */</PRE>
<PRE>@object MyObjectClass MyObject = {
    GI_comp = @MyObjectChild;
    HINT_LIST_CHECKBOXES;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>

<H2 CLASS="HeadingC">
<A NAME="11736">
 </A>
System Attributes</H2>
<PRE>SystemAttrs, HINT_IF_SYSTEM_ATTRS, HINT_ELSE, HINT_ENDIF</PRE>
<P>
The system attributes are global flags that describe what sort of environment is running the generic object. HINT_IF_SYSTEM_ATTRS is used to conditionally add hints to an object based on these <CODE>
SystemAttrs</CODE>
. If the <CODE>
SystemAttrs</CODE>
 set in the HINT_IF_SYSTEM_ATTRS field are true for the current system, then the hints that follow (until a HINT_ENDIF is encountered) are included. If no HINT_ENDIF is encountered, then only the next hint is included. If the <CODE>
SystemAttrs</CODE>
 do not match the current system, the following group of hints is instead deleted.</P>
<P>
The following <CODE>
SystemAttrs</CODE>
 are defined:</P>
<DL>
<DT>
SA_TINY</DT><DD>If set, the screen must be either horizontally or vertically tiny.</DD>
<DT>
SA_HORIZONTALLY_TINY</DT><DD>
If set, the screen must be horizontally tiny.</DD>
<DT>
SA_VERTICALLY_TINY</DT><DD>
If set, the screen must be vertically tiny.</DD>
<DT>
SA_COLOR</DT><DD>If set, the system must have a color screen.</DD>
<DT>
SA_PEN_BASED</DT><DD>
If set, the system must be pen-based.</DD>
<DT>
SA_KEYBOARD_ONLY</DT><DD>
If set, the system must be set keyboard-only.</DD>
<DT>
SA_NO_KEYBOARD</DT><DD>
If set, the system must be set no-keyboard.</DD>
<DT>
SA_NOT</DT><DD>If this flag is set, any other set bits indicate criteria that must <EM>
not</EM>
 match. This is the equivalent of a logical NOT operation.</DD>
</DL>
<P>
The HINT_ELSE hint can be used between HINT_IF_SYSTEM_ATTRS and HINT_END_IF. This allows the inclusion of a separate set of hints to be included when the system conditions in HINT_IF_SYSTEM_ATTRS are not satisfied.</P>
<P CLASS="figTitle">
Code Display 2-26 System Attributes</P>
<PRE>/* The SA_NOT bit acts as a logical not operation. In this case, the hint 
 * HINT_EXPAND_HEIGHT_TO_FIT_PARENT will only be included in the object 
 * declaration if the system is not pen-based. In addition, if the system is tiny,
 * the other hints will be included. The HINT_ENDIF marks the end of these
 * conditional hints. */</PRE>
<PRE>    HINT_IF_SYSTEM_ATTRS = SA_NOT | SA_PEN_BASED;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_IF_SYSTEM_ATTRS = SA_TINY;
	HINT_MINIMIZE_SIZE;
	HINT_DISPLAY_CURRENT_SELECTION;
    HINT_ENDIF;</PRE>
<PRE>/* Example within an object declaration. */</PRE>
<PRE>@object GenInteractionClass GroupingObject = {
    GI_comp = @One, @Two, @Three, @Four, @Five, @Six;
    HINT_IF_SYSTEM_ATTRS = SA_HORIZONTALLY_TINY;
    	HINT_ORIENT_CHILDREN_VERTICALLY;
    	HINT_WRAP_AFTER_CHILD_COUNT = 3;
    HINT_ELSE;
    	HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_ENDIF;
}</PRE>


<H2 CLASS="HeadingC">
<A NAME="16416">
 </A>
Default Actions</H2>
<PRE>HINT_DEFAULT_DEFAULT_ACTION, HINT_ENSURE_TEMPORARY_DEFAULT, HINT_PREVENT_DEFAULT_OVERRIDES</PRE>
<P>
Normally, objects in the user interface are activated by direct action (e.g., clicking on them). Objects may also be indirectly activated, however. The object activated indirectly is known as the default action object. For example, within a window, pressing ENTER or sending the window <CODE>
MSG_GEN_ACTIVATE_INTERACTION_DEFAULT</CODE>
 will activate the object marked as the default action.</P>
<P>
HINT_DEFAULT_DEFAULT_ACTION marks an object as the default action for the window it appears in. This hint is only relevant for GenTriggers or dialog GenInteractions (that are brought up by an activation trigger). The default activation object is usually activated by pressing the ENTER key within the window.</P>
<P>
Normally, whenever a trigger is activated within a window, it will become the default activation object the next time around. Even if a trigger has HINT_DEFAULT_DEFAULT_ACTION, if some other trigger is activated, that other trigger will become the default action in the future. To prevent these automatic default overrides, add HINT_PREVENT_DEFAULT_OVERRIDES to the object's instance data.</P>
<P>
HINT_ENSURE_TEMPORARY_DEFAULT ensures that an object that can be navigated to (via the TAB key for example) will act as a default activation object even if the specific UI does not normally allow such behavior. (OSF/Motif does this automatically.)</P>


<H2 CLASS="HeadingC">
<A NAME="42812">
 </A>
Keyboard Navigation Hints</H2>
<PRE>HINT_NAVIGATION_ID, HINT_NAVIGATION_NEXT_ID</PRE>
<P>
Most specific UIs allow keyboard navigation within windows, usually through use of the TAB key. Normally, the navigation path follows the order of the children within the windowed object, and this is sufficient for most needs. </P>
<P>
HINT_NAVIGATION_ID sets a navigation identifier for an object. Objects may &quot;jump&quot; to this object by including HINT_NAVIGATION_NEXT_ID in their instance data with a value equal to the matching navigation ID of the object to travel to.</P>
<P CLASS="figTitle">
Code Display 2-27 Navigation IDs</P>
<PRE>/* Essentially, this code allows keyboard navigation to skip the Two 
 * trigger. Hitting the TAB key on the `One' trigger navigates the focus to the
 * Three trigger. */</PRE>
<PRE>@object GenTriggerClass One = {
    GI_visMoniker = &quot;TAB here to get to Three&quot;;
    HINT_NAVIGATION_NEXT_ID = 3;
}</PRE>
<PRE>@object GenTriggerClass Two = {
    GI_visMoniker = &quot;2&quot;;
}</PRE>
<PRE>@object GenTriggerClass Three = {
    GI_visMoniker = &quot;3&quot;;
    HINT_NAVIGATION_ID = 3;
}</PRE>
<P>
Note that an object with a matching navigation ID must exist, so this method is not recommended. If possible, your UI should be constructed in such a way to allow the default behavior.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_13.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_14.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">6.1 Optional Attributes (ATTRs)</A> 
<!-- to next --> | <A HREF="GenClass_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">6.3 Dynamically Managing VarData</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
