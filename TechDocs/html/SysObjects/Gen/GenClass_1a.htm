<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenClass_1a.htm,v 1.1 97/06/02 16:12:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Object-Specific Queries</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenClass</A>: 7.3 <A HREF="GenClass_17.htm">Special Message Passing</A>: 
Object-Specific Queries</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_17.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_19.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">7.2 Generic Upward Queries</A> 
<!-- to next --> | <A HREF="GenClass_1b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">8 Visual Refreshing</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MSG_GEN_CALL_APPLICATION, MSG_GEN_SEND_TO_PROCESS, MSG_GEN_CALL_SYSTEM,MSG_GEN_OUTPUT_ACTION MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST</PRE>
<P>
Besides the Generic Upward Queries, <CODE>
GenClass</CODE>
 also contains several object-specific queries. These messages behave in the same manner as the GUP messages except that there is no need to set up a classed event. The object-specific upward query automatically sets up the class to send the message to.</P>
<P>
<CODE>
MSG_GEN_CALL_APPLICATION</CODE>
 sends a message up the generic tree to the GenApplication object. This message allows return values and should be cast to whatever return values are expected of the passed message.</P>
<P>
<CODE>
MSG_GEN_SEND_TO_PROCESS</CODE>
 sends a message to the process object associated with this object. Because this message may cross threads, no return values are allowed.</P>
<P>
<CODE>
MSG_GEN_CALL_SYSTEM</CODE>
 sends a message up the generic tree to the GenSystem object. This message allows return values and should be cast into whatever return values are expected of the passed message.</P>
<P>
MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST </P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_CALL_APPLICATION">
 </A>
MSG_GEN_CALL_APPLICATION</H4>
<PRE CLASS="syntax">void	MSG_GEN_CALL_APPLICATION(
        EventHandle event);</PRE>
<P>
<A NAME="IX_GenApplication:generic upward queries">
 </A>
This message calls the GenApplication object associated with the recipient. This message allows return values and should be cast to whatever return values are expected of the passed message.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
event</EM>
	The classed event to deliver to the object's GenApplication object.</P>
<P CLASS="refField">
Return:	The return values of the classed event (cast to the proper type).</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Custom gadgets may handle to supplement or supersede default functionality.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_SEND_TO_PROCESS">
 </A>
MSG_GEN_SEND_TO_PROCESS</H4>
<PRE CLASS="syntax">void	MSG_GEN_SEND_TO_PROCESS(
        EventHandle event);</PRE>
<P>
<A NAME="IX_ProcessClass:generic upward queries">
 </A>
This message sends the event to the Process object of your application. Because the message may cross threads, return values are not allowed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
event</EM>
	The classed event to deliver to the object's GenProcess object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Custom gadgets may handle to supplement or supersede default functionality.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_CALL_SYSTEM">
 </A>
MSG_GEN_CALL_SYSTEM</H4>
<PRE CLASS="syntax">void	MSG_GEN_CALL_SYSTEM(
        EventHandle event);</PRE>
<P>
<A NAME="IX_GenSystemClass:generic upward queries">
 </A>
This message calls the GenSystem object (the root object) associated with your application and sends the event. If you expect return values, make sure to cast them into the proper variable type.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<CODE>
event</CODE>
	The classed event to deliver to the object's GenSystem object.</P>
<P CLASS="refField">
Return:	The return values of the classed event (cast to the proper type).</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Custom gadgets may handle to supplement or supersede default functionality.</P>


<H4 CLASS="RefETitle">
<CODE>
MSG_GEN_OUTPUT_ACTION</CODE>
<A NAME="IX_MSG_GEN_OUTPUT_ACTION">
 </A>
</H4>
<PRE CLASS="syntax"><CODE> </CODE>void<CODE>	MSG_GEN_OUTPUT_ACTION(</CODE>
        EventHandle		event,
        optr		dest);</PRE>
<P>
This message sends an event via the destination optr (if any) of the object sent the message. The default handler (which is rarely subclassed) also scans the vardata looking for an <CODE>
ATTR_GEN_DESTINATION_CLASS</CODE>
 and records that class in a classed event.</P>
<P>
This message is usually sent at a low level and dispatches a message via the destination optr of the object. You may intercept <CODE>
MSG_GEN_OUTPUT_ACTION</CODE>
 if you wish knowledge of when an object is being activated (although you may wish to intercept <CODE>
MSG_GEN_ACTIVATE</CODE>
 in those cases). If you do send this message yourself, you must either pass a destination optr or leave it null, depending on the object being activated.</P>
<P CLASS="refField">
Source:	Normally sent by an object to itself.</P>
<P CLASS="refField">
Destination:	Normally sent by an object to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
event</EM>
	A classed event.</P>
<DL>
<DT>
<EM>
optr</EM>
</DT><DD>The destination optr to send event to or a <CODE>
TravelOption</CODE>
.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST">
 </A>
MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST();</PRE>
<P>
<A NAME="IX_Active list:MSG_GEN_QUERY_NEED_TO_BE_ON_ACTIVE_LIST">
 </A>
This message queries whether an object still needs to be on an active list. The active list mechanism sends this message if a mechanism no longer needs an object to remain on the active list; it checks whether any other mechanism also needs the object to be on the active list also. Windowed specific UI objects, for example, will return <EM>
true</EM>
 if ATTR_INITIATE_ON_STARTUP is present on the object, because this optional attribute requires the object to be on the active list.</P>
<P CLASS="refField">
Source:	Unrestricted, though it is generally called on itself. Specifically, if an object no longer needs to remain on the active list for a particular reason, this message should be called on the object to see if it should remain on the active list for any other reason. If so, the caller should not remove the object from the active list. The only exception to this would be if the object were being destroyed, in which the object should be removed in any case.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if the object needs to remain on the active list for some other reason.</P>
<P CLASS="refField">
Interception:	Object classes which add the object to the active list must intercept this message and return <EM>
true</EM>
 if the class desires the object to remain on the active list. If the message is intercepted and this is not the case, it should be sent to the superclass for handling.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_17.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_19.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">7.2 Generic Upward Queries</A> 
<!-- to next --> | <A HREF="GenClass_1b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">8 Visual Refreshing</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
