<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenClass_a.htm,v 1.1 97/06/02 16:14:17 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> States</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenClass</A>: 3.5 <A HREF="GenClass_5.htm">GenClass Basics</A>: 
<A NAME="44040">
 </A>
States</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.4 Attributes</A> 
<!-- to next --> | <A HREF="GenClass_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Modifying GenClass Instance Data</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>GI_states</PRE>
<P>
<A NAME="IX_GS_&ldots;  (GenStates)">
 </A>
<A NAME="IX_GI_states">
 </A>
The <CODE>
GI_states</CODE>
 attribute is a record that holds the state of the generic object. These states affect the object's visual representation and its functionality. By default, all objects have both GS_USABLE and GS_ENABLED set when first built. There are two <CODE>
GI_states</CODE>
:</P>
<DL>
<DT>
GS_USABLE</DT><DD>This state controls the usability of an object. Setting an object GS_USABLE will indicate that both the object and the entire generic branch below this object should be considered as an active part of the user interface and therefore should be visually represented. An object that is not set GS_USABLE cannot appear as part of the user interface. Before an object can be visually built and considered part of the user interface, however, it must satisfy two conditions: The object itself must be GS_USABLE, and all ancestors (parents) of the object must also be GS_USABLE.</DD>
<DT>
</DT><DD>This means that a continuous path of GS_USABLE objects must exist from the top node of your application to the object for it to be usable. In this case, an object is considered to be <EM>
fully</EM>
 usable. Conversely, if an object is not GS_USABLE, then no object in the branch below it can be visually displayed either (even if it is GS_USABLE). Therefore, an object may be set GS_USABLE without being fully usable. This allows you to set an entire branch fully usable by setting just one node object usable, provided that all other objects below that node had previously been set GS_USABLE. This attribute is set by default. 

</DD>
<DT>
GS_ENABLED</DT><DD>
This state sets the object enabled. This state controls whether the object is available to the user for activity. An object must be enabled for the user to interact with it. If an object is set GS_USABLE but not GS_ENABLED, it will be visually displayed but will not accept input from the user. The object will also be unable to perform its normal activities. This is usually represented by &quot;graying out&quot; the object's visual moniker. Before an object can be &quot;enabled&quot; for user input and activation, however, it must satisfy two conditions: The object must be GS_ENABLED; all ancestors (parents) of the object must also be GS_ENABLED. Therefore, a continuous path of GS_ENABLED objects must exist from the top node of your application to the object in question for it to be enabled. In this case, an object is considered to be <EM>
fully</EM>
 enabled.</DD>
<DT>
</DT><DD>Conversely, if an object is not GS_ENABLED, then no object in the branch below it can be interacted with either (even if it is GS_ENABLED). Therefore, an object may be GS_ENABLED without being fully enabled. This allows you to set an entire branch fully enabled by setting just one node object enabled, provided that all other objects below that node had previously been set GS_ENABLED. </DD>
</DL>
<P>
These states not only affect the state of the current object but all of its descendants as well. When your user interface is first built (or rebuilt) it conducts a top-down search, building any objects that are declared GS_USABLE. If an object is not GS_USABLE, it will not be visually built. Furthermore, none of its descendants will be searched (or built). Therefore, if any single node is not GS_USABLE, no other object below that node will be fully usable. </P>
<P>
In cases where you wish to alter any fundamental behavior of an object, you may have to set the object not usable, change its behavior, and then set the object GS_USABLE again. This ensures that the object is built out correctly (including visually) according to the new criteria.

</P>
<P CLASS="figTitle">
Code Display 2-17 Setting GI_states</P>
<PRE>@object GenTriggerClass MyTrigger = {
		/* The default GI_states are GS_USABLE and GS_ENABLED.
		 * This object will only be GS_USABLE */
    GI_states = @default &amp; ~GS_ENABLED;
}</PRE>

<H2 CLASS="HeadingC">
The Usable State</H2>
<PRE>MSG_GEN_GET_USABLE, MSG_GEN_SET_USABLE, MSG_GEN_SET_NOT_USABLE, MSG_GEN_CHECK_IF_FULLY_USABLE </PRE>
<P>
Setting an object GS_USABLE will incorporate the object into the generic tree and regard the object as part of the user interface. (It will not by itself enable an object for user input; this requires an object to be set GS_ENABLED also.) If an object is not GS_USABLE, it cannot be used in any manner including any visual implementation by the user interface. The following messages manipulate an object's usable state.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_GET_USABLE">
 </A>
MSG_GEN_GET_USABLE</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_GET_USABLE();</PRE>
<P>
This message checks the GS_USABLE bit of the <CODE>
GI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Will return <CODE>
true</CODE>
 if the object is GS_USABLE, <CODE>
false</CODE>
 if it is not usable.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_SET_USABLE">
 </A>
MSG_GEN_SET_USABLE</H4>
<PRE CLASS="syntax">void	MSG_GEN_SET_USABLE(
        VisUpdateMode updateMode);</PRE>
<P>
This message sets an object GS_USABLE. (This message has no effect on an object already GS_USABLE.) Objects may be set GS_USABLE only after they have been attached to a generic tree. Setting an object usable forces that object to be specifically built. If the object's associated window is realized, the object will be visually built and updated. Setting an object GS_USABLE that is not attached to the generic tree<CODE>
 </CODE>
will cause an error.</P>
<P>
Setting an object usable allows that object to become part of the user interface. Before the object can be used, though, it must be <EM>
fully</EM>
 <EM>
usable</EM>
. An object becomes fully usable only if all of its ancestors are GS_USABLE. If any ancestor is not GS_USABLE, then the entire branch below it will not be fully usable. You can check if an object is fully usable with the message <CODE>
MSG_GEN_CHECK_IF_FULLY_USABLE</CODE>
.</P>
<P>
Conversely, setting a node GS_USABLE, in which every branch object below it is already GS_USABLE will make that entire branch fully usable. This is useful for bringing up an entire section of a generic tree by setting a single object usable.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
updateMode</EM>
	<CODE>
VisUpdateMode</CODE>
 to use when updating changes to the screen.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_SET_NOT_USABLE">
 </A>
MSG_GEN_SET_NOT_USABLE</H4>
<PRE CLASS="syntax">void	MSG_GEN_SET_NOT_USABLE(
        VisUpdateMode updateMode);</PRE>
<P>
This message sets an object not usable (clears the GS_USABLE bit). Because an object may be visually unbuilt by this message, the <CODE>
VisUpdateMode</CODE>
 VUM_MANUAL is not allowed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
updateMode</EM>
	<CODE>
VisUpdateMode</CODE>
 to use when updating changes to the screen. May not be VUM_MANUAL.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_CHECK_IF_FULLY_USABLE">
 </A>
MSG_GEN_CHECK_IF_FULLY_USABLE</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_CHECK_IF_FULLY_USABLE();</PRE>
<P>
This message checks whether an object is fully usable. The object and all of its parents must be GS_USABLE for the object to be fully usable. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Return:	Will return <CODE>
true</CODE>
 if the object is fully usable, <CODE>
false</CODE>
 if it is not.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H2 CLASS="HeadingC">
The Enabled State</H2>
<PRE>MSG_GEN_GET_ENABLED, MSG_GEN_SET_ENABLED, MSG_GEN_SET_NOT_ENABLED, MSG_GEN_CHECK_IF_FULLY_ENABLED</PRE>
<P>
An object that is GS_ENABLED is ready for user interaction. As in the case with GS_USABLE, all parents of the object in question must be GS_ENABLED to <EM>
fully</EM>
 <EM>
enable</EM>
 the object. An object may be fully enabled without being fully usable, but the object will not be visually represented. You can check if an object is fully enabled with <CODE>
MSG_GEN_CHECK_IF_FULLY_ENABLED</CODE>
. </P>
<P>
An object that is not enabled but is set usable will be represented in the user interface; it will not, however, allow the user to interact with it. In many cases, the specific UI implements this by &quot;graying out&quot; the object. Setting a disabled object will visually update it.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_GET_ENABLED">
 </A>
MSG_GEN_GET_ENABLED</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_GET_ENABLED();</PRE>
<P>
This message returns the enabled state of the object the message is sent to.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Return:	Will return <CODE>
true</CODE>
 if the object is enabled,<CODE>
 false</CODE>
 if it is not.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_SET_ENABLED">
 </A>
MSG_GEN_SET_ENABLED</H4>
<PRE CLASS="syntax">void	MSG_GEN_SET_ENABLED(
        VisUpdateMode updateMode);</PRE>
<P>
This message sets an object GS_ENABLED. (This message has no effect on an object already GS_ENABLED.) You must pass this message a <CODE>
VisUpdateMode</CODE>
. Sending this message allows the object to receive user input. Only send this message if your application will be ready to interact with the object after the period specified in the <CODE>
VisUpdateMode</CODE>
 has passed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
updateMode</EM>
	<CODE>
VisUpdateMode</CODE>
 to use when updating changes to the screen.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_SET_NOT_ENABLED">
 </A>
MSG_GEN_SET_NOT_ENABLED</H4>
<PRE CLASS="syntax">void	MSG_GEN_SET_NOT_ENABLED(
        VisUpdateMode updateMode);</PRE>
<P>
This message sets the object not enabled (clears the object's GS_ENABLED bit.) You must pass the message a <CODE>
VisUpdateMode</CODE>
. In most specific UIs a disabled state is implemented by &quot;graying out&quot; the object. The user will be unable to interact with the object according to the <CODE>
VisUpdateMode</CODE>
 passed. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Parameters:	<EM>
updateMode</EM>
	<CODE>
VisUpdateMode</CODE>
 to use when updating changes to the screen. May not be VUM_MANUAL.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_CHECK_IF_FULLY_ENABLED">
 </A>
MSG_GEN_CHECK_IF_FULLY_ENABLED</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_CHECK_IF_FULLY_ENABLED();</PRE>
<P>
This message checks whether an object is fully enabled. An object is only fully enabled (ready for user interaction) when both it and all of its ancestors are enabled.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any generic object.</P>
<P CLASS="refField">
Return:	Will return <CODE>
true</CODE>
 if fully enabled, <CODE>
false</CODE>
 if not.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenClass_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenClass_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.4 Attributes</A> 
<!-- to next --> | <A HREF="GenClass_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Modifying GenClass Instance Data</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
