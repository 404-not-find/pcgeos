<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: MetaClass_10.htm,v 1.1 97/06/02 16:20:00 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> UI Messages</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">MetaClass</A>: 3.3 <A HREF="MetaClass_d.htm">Exported Message Ranges</A>: 
<A NAME="36279">
 </A>
UI Messages</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="MetaClass_d.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="MetaClass_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.2 Input Messages</A> 
<!-- to next --> | <A HREF="MetaClass_11.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.4 Standard GCN Messages</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_Clipboard:MetaUIMessages">
 </A>
The User Interface generates many messages which may alert objects to events which will allow them to work with the user. These events include those generated from the actions of input devices and clipboard-related events.</P>

<H2 CLASS="HeadingC">
Clipboard Messages</H2>
<P>
<A NAME="IX_Clipboard:MSG_META_CLIPBOARD_&ldots;">
 </A>
The following messages are used to implement common clipboard functions.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_CUT">
 </A>
MSG_META_CLIPBOARD_CUT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_CUT();</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation. <CODE>
MSG_META_CLIPBOARD_CUT</CODE>
 should register the current selection with the UI as the new clipboard item, but also delete the current selection. </P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_COPY">
 </A>
MSG_META_CLIPBOARD_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_COPY();</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation. <CODE>
MSG_META_CLIPBOARD_COPY</CODE>
 should be handled by registering the current selection with UI as the new clipboard item.</P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_PASTE">
 </A>
MSG_META_CLIPBOARD_PASTE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_PASTE();</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation. <CODE>
MSG_META_CLIPBOARD_PASTE</CODE>
 should replace the current selection with the current clipboard item, which can be obtained from the UI.</P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_FEEDBACK">
 </A>
MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_FEEDBACK</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_FEEDBACK(
        ClipboardQuickNotifyFlags flags);</PRE>
<P>
<A NAME="IX_Quick-transfer:MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_&ldots;">
 </A>
This message is sent to the source of a quick transfer item when a potential destination provides feedback to the user indicating whether a move, a copy or no operation will occur. The default behavior is determined by the destination, but the user may be able to override with the MOVE or COPY override keys.</P>
<P CLASS="refField">
Source:	Sent by quick-transfer mechanism.</P>
<P CLASS="refField">
Destination:	Sent to optr passed to <CODE>
ClipboardStartQuickTransfer()</CODE>
. Handled if the quick-transfer source needs to know what quick-transfer operation a potential destination will perform. Handler need not call superclass.</P>
<P CLASS="refField">
Interception:	Message sent directly to destination, no need to intercept.</P>
<P CLASS="refField">
Parameters:	<EM>flags</EM> 	Quick transfer cursor action specified by source (see <CODE>
ClipboardSetQuickTransferFeedback()</CODE>
).</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_CONCLUDED">
 </A>
MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_CONCLUDED</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_FEEDBACK(
        ClipboardQuickNotifyFlags 	flags);</PRE>
<P>
This message is sent to the source of a quick transfer item when the operation is completed. The <CODE>
ClipboardQuickNotifyFlags</CODE>
 are set by any <CODE>
MSG_META_END_MOVE_COPY</CODE>
 handler. This is only sent out if the source requests notification with the CQTF_NOTIFICATION flag passed to <CODE>
ClipboardStartQuickTransfer()</CODE>
.</P>
<P CLASS="refField">
Source:	Sent by quick-transfer mechanism.</P>
<P CLASS="refField">
Destination:	Sent to optr passed to <CODE>
ClipboardStartQuickTransfer()</CODE>
. Handled if the quick-transfer source needs to know what quick-transfer operation was performed. Handler need not call superclass.</P>
<P CLASS="refField">
Interception:	Message sent directly to source of transfer; no need to intercept.</P>
<P CLASS="refField">
Parameters:	<EM>flags</EM> 	Quick transfer cursor action specified by source (see <CODE>
ClipboardSetQuickTransferFeedback()</CODE>
).</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_NOTIFY_TRANSFER_ITEM_FREED">
 </A>
MSG_META_CLIPBOARD_NOTIFY_TRANSFER_ITEM_FREED</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_NOTIFY_TRANSFER_ITEM_FREED(
        VMFileHandle 	itemFile,
        VMBlockHandle 	itemBlock);</PRE>
<P>
Sent to all ODs in Transfer Notify List to help maintain integrity of transfer items from VM files other than the UI's transfer VM file. Only sent if VM file handle of transfer item that is being freed is different from UI's transfer VM file handle. If a transfer item from a VM file other than the UI's transfer VM file is registered, the VM blocks in that transfer item cannot be freed and the VM file cannot be closed until notification is sent saying that the transfer item has been freed. Registrars of such transfer items should keep track of the VM file handle and VM block handle of the item to check against the info sent by this message.</P>
<P CLASS="refField">
Source:	Sent by the clipboard mechanism.</P>
<P CLASS="refField">
Destination:	Sent to optrs on transfer notification list, added with <CODE>
ClipboardAddToNotificationList()</CODE>
. Handled if clipboard changes need to be monitored.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>
<P CLASS="refField">
Parameters:	<EM>itemFile</EM> 	File containing the transfer item.</P>
<DL>
<DT>
<EM>itemBlock</EM></DT><DD>Block containing the transfer item.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED">
 </A>
MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED();</PRE>
<P>
Sent to all ODs in Transfer Notify List to help with updating of Cut, Copy, and Paste button states. Recipients can call <CODE>
ClipboardQueryItem()</CODE>
 to check if the new normal transfer item contains formats that the recipient supports. If not, Paste button can be disabled.</P>
<P CLASS="refField">
Source:	Sent by the clipboard mechanism, relayed by GenEditControl.</P>
<P CLASS="refField">
Destination:	Sent to optrs on transfer notification list, added with <CODE>
ClipboardAddToNotificationList()</CODE>
. Handled if clipboard changes need to be monitored.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>



<H2 CLASS="HeadingC">
Undo Messages</H2>
<P>
<A NAME="IX_Undo:MSG_META_UNDO_&ldots;">
 </A>
These messages implement the &quot;undo&quot; mechanism which allows objects to store a chain of actions which can later be undone. </P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_UNDO">
 </A>
MSG_META_UNDO</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_UNDO(
        AddUndoActionStruct 	*data);</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation.</P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_UNDO_FREEING_ACTION">
 </A>
MSG_META_UNDO_FREEING_ACTION</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_UNDO_FREEING_ACTION(
        AddUndoActionStruct 	*data);</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation. This message is used to undo those actions which may free an important block of memory.</P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_SELECT_ALL">
 </A>
MSG_META_SELECT_ALL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_SELECT_ALL();</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation.</P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DELETE">
 </A>
MSG_META_DELETE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_DELETE();</PRE>
<P>
This message is sent to an object which is supposed to be the destination of a clipboard operation. </P>
<P CLASS="refField">
Source:	Sent by anyone to perform clipboard operation.</P>
<P CLASS="refField">
Destination:	Object which will support clipboard operations. By default, a GenEditControl sends this message to the targeted object.</P>
<P CLASS="refField">
Interception:	May be intercepted to add clipboard support to existing class that doesn't currently have clipboard support or to enhance or replace functionality of object that does support the clipboard.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>



<H2 CLASS="HeadingC">
Input Messages</H2>
<P>
<A NAME="IX_Input">
 </A>
These are perhaps the most often intercepted messages, allowing objects to detect input events.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_MOUSE_EXCL">
 </A>
MSG_META_GAINED_MOUSE_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_MOUSE_EXCL();</PRE>
<P>
<A NAME="IX_Exclusive grab:notification">
 </A>
The object will receive this message when it has received the mouse exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_MOUSE_EXCL">
 </A>
MSG_META_LOST_MOUSE_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_MOUSE_EXCL();</PRE>
<P>
The object will receive this message when it has lost the mouse exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_KBD_EXCL">
 </A>
MSG_META_GAINED_KBD_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_KBD_EXCL();</PRE>
<P>
<A NAME="IX_Keyboard:exclusive notification">
 </A>
The object will receive this message when it has received the keyboard exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_KBD_EXCL">
 </A>
MSG_META_LOST_KBD_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_KBD_EXCL();</PRE>
<P>
The object will receive this message when it has lost the keyboard exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_PRESSURE_EXCL">
 </A>
MSG_META_GAINED_PRESSURE_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_PRESSURE_EXCL();</PRE>
<P>
The object will receive this message when it has received the pressure exclusive, meaning it will get certain low-level mouse events.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_PRESSURE_EXCL">
 </A>
MSG_META_LOST_PRESSURE_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_PRESSURE_EXCL();</PRE>
<P>
The object will receive this message when it has lost the pressure exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_DIRECTION_EXCL">
 </A>
MSG_META_GAINED_DIRECTION_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_DIRECTION_EXCL();</PRE>
<P>
The object will receive this message when it has received the direction exclusive, meaning it will get certain low-level mouse events.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_DIRECTION_EXCL">
 </A>
MSG_META_LOST_DIRECTION_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_DIRECTION_EXCL();</PRE>
<P>
The object will receive this message when it has lost the direction exclusive.</P>



<H2 CLASS="HeadingC">
Hierarchical Messages</H2>
<P>
These messages allow object to detect changes in the makeup of the three hierarchies which affect the paths of input and actions within the system: the Focus, Target, and Model hierarchies. These hierarchies are discussed in <A HREF="../../SysObjects/Input/index.htm">the Input chapter</A>.</P>
<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GRAB_FOCUS_EXCL">
 </A>
MSG_META_GRAB_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GRAB_FOCUS_EXCL();</PRE>
<P>
<A NAME="IX_Focus:exclusive">
 </A>
<A NAME="IX_Exclusive grab:MSG_META_GRAB_FOCUS_EXCL">
 </A>
May be passed to any visible or generic object to cause it to become the active focus within its focus level. The leaf object in the hierarchy which gains the focus exclusive will automatically be given the keyboard exclusive, and will thereby receive <CODE>
MSG_META_KBD_CHAR</CODE>
 events that follow.</P>
<P>
Commonly sent to text objects and other gadgets to switch the current focus. May also be passed to GenPrimarys, GenDisplays, independently realizable GenInteractions, GenDisplayControl, GenViews, etc. (windowed things) to cause them to become the active focus window within their level of the focus hierarchy, if possible (specific UI's having real-estate focus, for instance, would ignore this request).</P>
<P>
Note that the object will not actually gain the focus exclusive until <EM>
all</EM>
 other nodes above it in the hierarchy also have the focus in their levels.</P>
<P>
This is the message equivalent of HINT_DEFAULT_FOCUS on generic objects.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_RELEASE_FOCUS_EXCL">
 </A>
MSG_META_RELEASE_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_RELEASE_FOCUS_EXCL();</PRE>
<P>
Opposite of <CODE>
MSG_META_GRAB_FOCUS_EXCL</CODE>
. If the object does not currently have the exclusive, nothing will be done.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GET_FOCUS_EXCL">
 </A>
MSG_META_GET_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, Boolean 	MSG_META_GET_FOCUS_EXCL(
        optr 	*focusObject);</PRE>
<P>
May be sent to any visible or generic object which is a focus node, to get current focus object directly below the node, if any, regardless of whether current node is active (has the exclusive itself).</P>
<P>
Focus nodes in Generic UI library: GenSystem, GenField, GenApplication, GenPrimary, GenDisplayGroup, GenDisplay, GenView, GenInteraction (independently displayable only). Focus nodes in Visible UI library: VisContent.</P>
<P CLASS="refField">
Parameters:	<EM>focusObject</EM> 	This will be filled with return value, the focus object below the object receiving the message.</P>
<P CLASS="refField">
Return:	Will return <EM>
true</EM>
 if message responded to. Will return <EM>
false</EM>
 if the message was sent to an object which is not a focus node.</P>
<DL>
<DT>
<EM>focusObject</EM> </DT><DD>The focus node under the object receiving the message.</DD>
</DL>
<P CLASS="refField">
Warnings:	This is a bad way to go about sending a message to currently active objects. For example, if you call from the application thread to the UI thread to find out which is the current focus gadget and then send a message to it, it is possible for the active gadget to change between the two calls. Use <CODE>
MSG_META_SEND_CLASSED_EVENT</CODE>
 for this type of operation if at all possible.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GRAB_TARGET_EXCL">
 </A>
MSG_META_GRAB_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GRAB_TARGET_EXCL();</PRE>
<P>
<A NAME="IX_Target:exclusive">
 </A>
May be passed to any visible or generic object to cause it to become the active target within the target level that it is in. The active target hierarchy is the path for the transmission of messages via TO_TARGET request of <CODE>
MSG_META_SEND_CLASSED_EVENT</CODE>
.</P>
<P>
Commonly sent to text objects and views to switch which is the current target. May also be passed to GenPrimarys, GenDisplays, independently realizable GenInteractions, GenDisplayControl, GenViews, etc. (windowed things) to cause them to become the active target window within their level f the target hierarchy.</P>
<P>
The specific UI will automatically grab the Target exclusive for an object on any mouse press within the object if it is marked as GA_TARGETABLE. </P>
<P>
Note that the object will not actually gain the target exclusive until <EM>
all</EM>
 other nodes above it in the hierarchy also have the target exclusive within their levels. This is the message equivalent of HINT_DEFAULT_TARGET.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_RELEASE_TARGET_EXCL">
 </A>
MSG_META_RELEASE_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_RELEASE_TARGET_EXCL();</PRE>
<P>
Opposite of <CODE>
MSG_META_GRAB_TARGET_EXCL</CODE>
. If the object does not currently have the exclusive, nothing will be done.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GET_TARGET_EXCL">
 </A>
MSG_META_GET_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, <STRONG>void</STRONG> 	MSG_META_GET_TARGET_EXCL(
        optr targetObject);</PRE>
<P>
May be sent to any visible or generic object which is a target node, to get the current target object directly below the node, if any, regardless of whether the current node is active (has the exclusive itself).</P>
<P>
Target nodes in Generic UI library: GenSystem, GenField, GenApplication, GenPrimary, GenDisplay, GenView, GenInteraction (independently displayable only). Target nodes in Visible UI library: VisContent.</P>
<P CLASS="refField">
Parameters:	<EM>targetObject</EM> 	This will be filled with return value, the target object below the object receiving the message.</P>
<P CLASS="refField">
Return:	Will return <EM>
true</EM>
 if message responded to. Will return <EM>
false</EM>
 if the message was sent to an object which is not a target node.</P>
<DL>
<DT>
<EM>targetObject</EM> </DT><DD>The target node under the object receiving the message.</DD>
</DL>
<P CLASS="refField">
Warnings:	This is a bad way to go about sending a message to currently active objects. For example, if you call from the application thread to the UI thread to find out which is the current target display, and then send a message to it, it is possible for the active display to change between the two calls. Use MSG_META_SEND_CLASSED_EVENT for this type of operation if at all possible.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GRAB_MODEL_EXCL">
 </A>
MSG_META_GRAB_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GRAB_MODEL_EXCL();</PRE>
<P>
<A NAME="IX_Model:exclusive">
 </A>
May be passed to any visible or generic object to cause it to become the active model within the model level that it is in. The active model hierarchy is the override path for the transmission of messages via TO_MODEL of <CODE>
MSG_META_SEND_CLASSED_EVENT</CODE>
. (If no model hierarchy exists, the messages will be sent down the Target hierarchy.)</P>
<P>
Note that the object will not actually gain the model exclusive until <EM>
all</EM>
 other nodes above it in the hierarchy also have the model exclusive within their levels. This is the message equivalent of HINT_MAKE_DEFAULT_MODEL.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_RELEASE_MODEL_EXCL">
 </A>
MSG_META_RELEASE_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_RELEASE_MODEL_EXCL();</PRE>
<P>
Opposite of <CODE>
MSG_META_GRAB_MODEL_EXCL</CODE>
. If the object does not currently have the exclusive, nothing will be done.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GET_MODEL_EXCL">
 </A>
MSG_META_GET_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GET_MODEL_EXCL(
        optr targetObject);</PRE>
<P>
May be sent to any visible or generic object which is a model node, to get current model object directly below the node, if any, regardless of whether current node is active (has the exclusive itself).</P>
<P>
Model nodes in Generic UI library: GenSystem, GenApplication, GenDocumentControl, GenDocumentGroup.</P>
<P CLASS="refField">
Parameters:	<EM>modelObject</EM> 	This will be filled with return value, the target object below the object receiving the message.</P>
<P CLASS="refField">
Return:	Will return <EM>
true</EM>
 if message responded to. Will return <EM>
false</EM>
 if the message was sent to an object which is not a target node.</P>
<DL>
<DT>
<EM>modelObject</EM> </DT><DD>The target node under the object receiving the message.</DD>
</DL>
<P CLASS="refField">
Warnings:	This is a bad way to go about sending a message to currently active objects. For example, if you call from the application thread to the UI thread to find out which is the current model display, and then send a message to it, it is possible for the active display to change between the two calls. Use MSG_META_SEND_CLASSED_EVENT for this type of operation if at all possible.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_FOCUS_EXCL">
 </A>
MSG_META_GAINED_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_FOCUS_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>
<P>
<A NAME="IX_Focus:exclusive notification">
 </A>
Special note on <CODE>
MSG_META_GAINED_FOCUS_EXCL</CODE>
 and <CODE>
MSG_META_LOST_FOCUS_EXCL</CODE>
: If the object receiving <CODE>
MSG_META_GAINED_FOCUS_EXCL</CODE>
 is the leaf object in the hierarchy, meaning that it is either not a node itself, or if it is a node, does not have any object below it which has grabbed the exclusive, then the object will automatically be granted the <CODE>
MSG_META_GAINED_KBD_EXCL</CODE>
 as well, and thereby receive any <CODE>
MSG_META_KBD_CHAR</CODE>
 messages which are generated. The object will receive <CODE>
MSG_META_LOST_KBD_EXCL</CODE>
 before MSG_META_LOST_FOCUS_EXCL.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_FOCUS_EXCL">
 </A>
MSG_META_LOST_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_FOCUS_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>
<P>
Special note on <CODE>
MSG_META_GAINED_FOCUS_EXCL</CODE>
 and <CODE>
MSG_META_LOST_FOCUS_EXCL</CODE>
: If the object receiving <CODE>
MSG_META_GAINED_FOCUS_EXCL</CODE>
 is the leaf object in the hierarchy, meaning that it is either not a node itself, or if it is a node, does not have any object below it which has grabbed the exclusive, then the object will automatically be granted the <CODE>
MSG_META_GAINED_KBD_EXCL</CODE>
 as well, and thereby receive any <CODE>
MSG_META_KBD_CHAR</CODE>
 messages which are generated. The object will receive <CODE>
MSG_META_LOST_KBD_EXCL</CODE>
 before MSG_META_LOST_FOCUS_EXCL.</P>
<P CLASS="refField">
Tips and Tricks:	If you intercept this message and call the superclass, be aware that the superclass' handler does some of the focus-releasing tasks by sending messages. This can lead to synchronization problems if your method's code looks like the following:</P>
<PRE>			@callsuper();
			call self::MSG_GEN_APPLY();</PRE>
<P>
To make sure that the superclass is finished updating the focus before carrying out any operations which rely upon a valid focus, you would change the above code to read:</P>
<PRE>			@callsuper();
			@send ,forceQueue ,insertAtFront self::MSG_GEN_APPLY();</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_SYS_FOCUS_EXCL">
 </A>
MSG_META_GAINED_SYS_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GAINED_SYS_FOCUS_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_SYS_FOCUS_EXCL">
 </A>
MSG_META_LOST_SYS_FOCUS_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_SYS_FOCUS_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_TARGET_EXCL">
 </A>
MSG_META_GAINED_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GAINED_TARGET_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_TARGET_EXCL">
 </A>
MSG_META_LOST_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_TARGET_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_SYS_TARGET_EXCL">
 </A>
MSG_META_GAINED_SYS_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GAINED_SYS_TARGET_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_SYS_TARGET_EXCL">
 </A>
MSG_META_LOST_SYS_TARGET_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_SYS_TARGET_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_MODEL_EXCL">
 </A>
MSG_META_GAINED_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_MODEL_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_MODEL_EXCL">
 </A>
MSG_META_LOST_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_MODEL_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_SYS_MODEL_EXCL">
 </A>
MSG_META_GAINED_SYS_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GAINED_SYS_MODEL_EXCL();</PRE>
<P>
See description for this and other gained/lost exclusive messages below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_SYS_MODEL_EXCL">
 </A>
MSG_META_LOST_SYS_MODEL_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_SYS_MODEL_EXCL();</PRE>
<P>
These paired gained/lost messages for the Focus, Target, and Model hierarchies are sent, always in the order GAINED, then at some point LOST, to objects on the hierarchy. The GAINED message is sent only when the object in question and all nodes in the hierarchy above that object have gained the exclusive from the node above them, all the way up to the application object. </P>
<P>
In other words, just grabbing the exclusive from the next node up doesn't always guarantee you'll get a GAINED message; the node you're grabbing from must have itself received a GAINED message but not yet the LOST message. Your object will receive the LOST message if it has either released the exclusive, or the node from which you grabbed the exclusive itself received a LOST message.</P>
<P>
The GAINED_SYS and LOST_SYS messages behave similarly, except that an object can only gain the SYS_EXCL (System exclusive) if it and all nodes above it to the GenSystem object have the grab from the next node up. An object will never receive a GAINED_SYS_EXCL message if it has not already received an (Application) GAINED_EXCL message also. Similarly, an object will always receive a LOST_SYS_EXCL message before it receives an (Application) LOST_EXCL message.</P>
<P CLASS="refField">
Source:	Do <EM>
not</EM>
 send these messages to objects yourself, unless you are implementing or extending the above mechanism. These messages should be sent only by the node object which is above the object receiving the message.</P>
<P CLASS="refField">
Destination:	Any <CODE>
MetaClass</CODE>
 object which has grabbed and not yet released the focus exclusive.</P>
<P CLASS="refField">
Interception:	Generic UI objects, <CODE>
VisTextClass</CODE>
, and all node objects provide default behavior for processing this message. If you intercept above any of these levels, be sure to call the superclass to let these objects know the exclusive has been gained.</P>



<H2 CLASS="HeadingC">
Miscellaneous Input Messages</H2>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GRAB_KBD">
 </A>
MSG_META_GRAB_KBD</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GRAB_KBD();</PRE>
<P>
This message grabs the keyboard for an object. The grab will not be taken away from another object if it currently has the keyboard grab. To forcefully grab the keyboard in this case, use MSG_META_FORCE_GRAB_KBD.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_FORCE_GRAB_KBD">
 </A>
MSG_META_FORCE_GRAB_KBD</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_FORCE_GRAB_KBD();</PRE>
<P>
This message forcefully grabs the keyboard for an object, tasking the grab away from another object, if necessary.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_RELEASE_KBD">
 </A>
MSG_META_RELEASE_KBD</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_RELEASE_KBD();</PRE>
<P>
This message releases the keyboard grab for an object.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_RELEASE_FT_EXCL">
 </A>
MSG_META_RELEASE_FT_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_RELEASE_FT_EXCL();</PRE>
<P>
<A NAME="IX_Exclusive grab:releasing all">
 </A>
This message releases exclusive(s) that the object may have on the Focus and Target hierarchies.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_DEFAULT_EXCL">
 </A>
MSG_META_GAINED_DEFAULT_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_GAINED_DEFAULT_EXCL();</PRE>
<P>
This message notifies a GenTrigger that it has gained the default exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_DEFAULT_EXCL">
 </A>
MSG_META_LOST_DEFAULT_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LOST_DEFAULT_EXCL();</PRE>
<P>
This message notifies a GenTrigger that it has lost the default exclusive.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GAINED_FULL_SCREEN_EXCL">
 </A>
MSG_META_GAINED_FULL_SCREEN_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_GAINED_FULL_SCREEN_EXCL();</PRE>
<P>
This message is sent to GenFields or GenApplications upon gain of the &quot;full-screen&quot; exclusive. The full-screen exclusive grants the object the top screen-dominating object at its level.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LOST_FULL_SCREEN_EXCL">
 </A>
MSG_META_LOST_FULL_SCREEN_EXCL</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LOST_FULL_SCREEN_EXCL();</PRE>
<P>
This message is sent to GenFields or GenApplications upon loss of the &quot;full-screen&quot; exclusive. The full-screen exclusive grants the object the top screen-dominating object at its level.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_MOUSE_BUMP_NOTIFICATION">
 </A>
MSG_META_MOUSE_BUMP_NOTIFICATION</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_MOUSE_BUMP_NOTIFICATION(
        sword 	xBump,
        sword 	yBump);</PRE>
<P>
This message is an event that the input manager places in the input queue to notify the UI that it has bumped the mouse position past this point in the queue. This method is sent only when <CODE>
IMBumpMouse()</CODE>
 is called.</P>
<P CLASS="refField">
Parameters:	<EM>xBump</EM> 	Horizontal relative bump.</P>
<DL>
<DT>
<EM>yBump</EM> </DT><DD>Vertical relative bump.</DD>


</DL>
<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_FUP_KBD_CHAR">
 </A>
MSG_META_FUP_KBD_CHAR</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, Boolean 	MSG_META_FUP_KBD_CHAR(
        word 	character,
        word 	flags,
        word 	state);</PRE>
<P>
<A NAME="IX_Keyboard input:passing on">
 </A>
When a leaf object in the focus hierarchy gets a MSG_META_KBD_CHAR, and does not care about the character, it sends this message to itself to see if a parent object wants to handle it.</P>
<P CLASS="refField">
Parameters:	<EM>character</EM> 	The low byte contains a <CODE>
Char</CODE>
 value.</P>
<DL>
<DT>
<EM>flags</EM> </DT><DD>High byte is a <CODE>
ShiftState</CODE>
 field; low byte is a <CODE>
CharFlags</CODE>
 field.</DD>
<DT>
<EM>state</EM> </DT><DD>High byte is the raw PC scan code; low byte is a <CODE>
ToggleState</CODE>
 field.</DD>
</DL>
<P CLASS="refField">
Return:	Will return <EM>
true</EM>
 if the character was handled by someone (and should not be used elsewhere).</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_KBD_CHAR">
 </A>
MSG_META_PRE_PASSIVE_KBD_CHAR</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, KbdReturnFlags 	MSG_META_PRE_PASSIVE_KBD_CHAR(
        word 	character,
        word 	flags,
        word 	state);</PRE>
<P>
This message sends a keyboard character to any object requesting preview of the keyboard events.</P>
<P CLASS="refField">
Parameters:	<EM>character</EM> 	The low byte contains a <CODE>
Char</CODE>
 value.</P>
<DL>
<DT>
<EM>flags</EM> </DT><DD>High byte is a <CODE>
ShiftState</CODE>
 field; low byte is a <CODE>
CharFlags</CODE>
 field.</DD>
<DT>
<EM>state</EM> </DT><DD>High byte is the raw PC scan code; low byte is a <CODE>
ToggleState</CODE>
 field.</DD>
</DL>
<P CLASS="refField">
Return:	Flags field specifying what should happen to event.</P>
<P CLASS="refField">
Structures:	</P>
<PRE><A NAME="IX_KbdReturnFlags"> </A>typedef WordFlags 	KbdReturnFlags;</PRE>
<PRE>#define <A NAME="IX_KRF_PREVENT_PASS_THROUGH"> </A>KRF_PREVENT_PASS_THROUGH 0x8000
/* Set for passive keyboard routines if event should
 * be destroyed and not passed on to implied or
 * default grab. */</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_KBD_CHAR">
 </A>
MSG_META_POST_PASSIVE_KBD_CHAR</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, KbdReturnFlags 	MSG_META_POST_PASSIVE_KBD_CHAR(
        word 	character,
        word 	flags,
        word 	state);</PRE>
<P>
This message passes keyboard characters to all objects having registered interest in getting keyboard events after they have been handled.</P>
<P CLASS="refField">
Parameters:	<EM>character</EM> 	The low byte contains a <CODE>
Char</CODE>
 value.</P>
<DL>
<DT>
<EM>flags</EM> </DT><DD>High byte is a <CODE>
ShiftState</CODE>
 field; low byte is a <CODE>
CharFlags</CODE>
 field.</DD>
<DT>
<EM>state</EM> </DT><DD>High byte is the raw PC scan code; low byte is a <CODE>
ToggleState</CODE>
 field.</DD>
</DL>
<P CLASS="refField">
Return:	Flags field specifying what should happen to event.</P>
<P CLASS="refField">
Structures:	</P>
<PRE>typedef WordFlags 	KbdReturnFlags;</PRE>
<PRE>#define KRF_PREVENT_PASS_THROUGH 0x8000
/* Set for passive keyboard routines if event should
 * be destroyed and not passed on to implied or
 * default grab. */</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_QUERY_IF_PRESS_IS_INK">
 </A>
MSG_META_QUERY_IF_PRESS_IS_INK</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_QUERY_IF_PRESS_IS_INK(
        InkReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition);</PRE>
<P>
<A NAME="IX_Ink:detecting">
 </A>
Return whether or not a <CODE>
MSG_META_START_SELECT</CODE>
 should be passed on to the object, or whether it should be intercepted and turned into ink.</P>
<P CLASS="refField">
Source:	Sent by any object (usually VisComp) to determine if one of its children wants ink.</P>
<P CLASS="refField">
Destination:	Any object in the Vis linkage that may be clicked on with the mouse.</P>
<P CLASS="refField">
Interception:	The default handler returns IRV_NO_INK (filling in the <CODE>
inkType</CODE>
 field of the <EM>
retVal</EM>
 argument). Objects that want presses to be turned into ink need to return IRV_DESIRES_INK. Some objects that need to do work on another thread (such as a GenView) to determine whether the press should be ink or not can return IRV_WAIT, which holds up the <CODE>
MSG_META_START_SELECT</CODE>
 until a <CODE>
MSG_GEN_APPLICATION_INK_QUERY_REPLY</CODE>
 is sent to the application object. By default, clicks on VisComp-derived objects will <EM>
not</EM>
 be ink. To change this, set <CODE>
VisCompMakePressesInk()</CODE>
 as the handler for this message.</P>
<P CLASS="refField">
Parameters:	<EM>retVal	</EM>Empty structure which will be filled with return value information.</P>
<DL>
<DT>
<EM>xPosition</EM> </DT><DD><EM>
x</EM>
-coordinate of selection start.</DD>
<DT>
<EM>yPosition</EM> </DT><DD><EM>
y</EM>
-coordinate of selection start.</DD>
</DL>
<P CLASS="refField">
Return:	Indication whether object thinks the press was ink.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_QUERY_IF_PRESS_IS_INK">
 </A>
MSG_META_LARGE_QUERY_IF_PRESS_IS_INK</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_LARGE_QUERY_IF_PRESS_IS_INK(
        InkReturnParams		*retVal,
        LargeMouseData		*largeMouseDataStruct);</PRE>
<P>
This message is sent by the system to children with the VCNA_LARGE_DOCUMENT_MODEL bit set to determines whether or not a MSG_META_LARGE_START_SELECT should be processed as ink.</P>
<P CLASS="refField">
Source:	Sent by any object (usually VisComp) to determine if one of its children wants ink.</P>
<P CLASS="refField">
Destination:	Any object in the Vis linkage that may be clicked on with the mouse.</P>
<P CLASS="refField">
Parameters:	<EM>
retVal</EM>
	Pointer to an <CODE>
InkReturnParams</CODE>
 structure that will be filled in by the handler for this message.</P>
<DL>
<DT>
<EM>
largeMouseDataStruct</DT><DD>
</EM>
Pointer to a <CODE>
LargeMouseData</CODE>
 struct that stores information about the large mouse event.</DD>
</DL>
<P CLASS="refField">
Interception:	The default handler returns IRV_NO_INK. Objects that want presses to be turned into ink need to return IRV_DESIRES_INK. Some objects that need to do work on another thread (such as a VisContent) to determine whether the press should be ink or not can return IRV_WAIT, which holds up the <CODE>
MSG_META_LARGE_START_SELECT</CODE>
 until a <CODE>
MSG_GEN_APPLICATION_INK_QUERY_REPLY</CODE>
 is sent to the application object. </P>



<H2 CLASS="HeadingC">
Mouse Input Messages</H2>
<P>
The following messages allow an application to detect the nature and behavior of pointing devices within the system.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_START_SELECT">
 </A>
MSG_META_START_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_START_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_END_SELECT">
 </A>
MSG_META_END_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_END_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_START_MOVE_COPY">
 </A>
MSG_META_START_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_START_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_END_MOVE_COPY">
 </A>
MSG_META_END_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_END_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_START_FEATURES">
 </A>
MSG_META_START_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_START_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_END_FEATURES">
 </A>
MSG_META_END_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_END_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_START_OTHER">
 </A>
MSG_META_START_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_START_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_END_OTHER">
 </A>
MSG_META_END_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_END_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DRAG_SELECT">
 </A>
MSG_META_DRAG_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_DRAG_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DRAG_MOVE_COPY">
 </A>
MSG_META_DRAG_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_DRAG_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DRAG_FEATURES">
 </A>
MSG_META_DRAG_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_DRAG_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DRAG_OTHER">
 </A>
MSG_META_DRAG_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_DRAG_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_BUTTON">
 </A>
MSG_META_PRE_PASSIVE_BUTTON</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_BUTTON(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_BUTTON">
 </A>
MSG_META_POST_PASSIVE_BUTTON</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_BUTTON(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_START_SELECT">
 </A>
MSG_META_PRE_PASSIVE_START_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_START_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_START_SELECT">
 </A>
MSG_META_POST_PASSIVE_START_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_START_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_END_SELECT">
 </A>
MSG_META_PRE_PASSIVE_END_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_END_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_END_SELECT">
 </A>
MSG_META_POST_PASSIVE_END_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_END_SELECT(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_START_MOVE_COPY">
 </A>
MSG_META_PRE_PASSIVE_START_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_START_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_START_MOVE_COPY">
 </A>
MSG_META_POST_PASSIVE_START_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_START_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_END_MOVE_COPY">
 </A>
MSG_META_PRE_PASSIVE_END_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_END_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_END_MOVE_COPY">
 </A>
MSG_META_POST_PASSIVE_END_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_END_MOVE_COPY(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_START_FEATURES">
 </A>
MSG_META_PRE_PASSIVE_START_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_START_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_START_FEATURES">
 </A>
MSG_META_POST_PASSIVE_START_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_START_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_END_FEATURES">
 </A>
MSG_META_PRE_PASSIVE_END_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_END_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_END_FEATURES">
 </A>
MSG_META_POST_PASSIVE_END_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_END_FEATURES(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_START_OTHER">
 </A>
MSG_META_PRE_PASSIVE_START_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_START_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_START_OTHER">
 </A>
MSG_META_POST_PASSIVE_START_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_START_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PRE_PASSIVE_END_OTHER">
 </A>
MSG_META_PRE_PASSIVE_END_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_PRE_PASSIVE_END_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
For description of this and other button messages, see below.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_POST_PASSIVE_END_OTHER">
 </A>
MSG_META_POST_PASSIVE_END_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_POST_PASSIVE_END_OTHER(
        MouseReturnParams 		*retVal,
        sword 		xPosition,
        sword 		yPosition,
        word 		inputState);</PRE>
<P>
The above messages are the standard button functions generated by the UI upon receiving <CODE>
MSG_META_BUTTON</CODE>
 events from the Input Manager. These messages are sent out to whatever object has the implied grab (whichever window the mouse is over), until the mouse is &quot;grabbed&quot; by an object, after which the messages go there until the mouse is released (ungrabbed).</P>
<P CLASS="refField">
Parameters:	<EM>retVal</EM>	Structure to hold return values.</P>
<DL>
<DT>
<EM>xPosition</EM> </DT><DD><EM>
x</EM>
-coordinate of press.</DD>
<DT>
<EM>yPosition</EM> </DT><DD><EM>
y</EM>
-coordinate of press.</DD>
<DT>
<EM>inputState</EM></DT><DD>High byte is <CODE>
UIFunctionsActive</CODE>
 structure; low byte is <CODE>
ButtonInfo</CODE>
 structure.</DD>
</DL>
<P CLASS="refField">
Structures:	</P>
<PRE><A NAME="IX_MouseReturnParams"> </A>typedef struct {
	word 			unused;
	MouseReturnFlags 			flags;
	optr 			ptrImage;
} MouseReturnParams;</PRE>
<PRE><A NAME="IX_MRF_&ldots;"> </A><A NAME="IX_MouseReturnFlags"> </A>typedef WordFlags MouseReturnFlags;
/* These flags may be combined using | and &amp;:
	MRF_PROCESSED,
	MRF_REPLAY,
	MRF_PREVENT_PASS_THROUGH,
	MRF_SET_POINTER_IMAGE,
	MRF_CLEAR_POINTER_IMAGE */</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_PTR">
 </A>
MSG_META_LARGE_PTR</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_PTR(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
<A NAME="IX_Large document model">
 </A>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_START_SELECT">
 </A>
MSG_META_LARGE_START_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_START_SELECT(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_END_SELECT">
 </A>
MSG_META_LARGE_END_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_END_SELECT(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_START_MOVE_COPY">
 </A>
MSG_META_LARGE_START_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_START_MOVE_COPY(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_END_MOVE_COPY">
 </A>
MSG_META_LARGE_END_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_END_MOVE_COPY(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_START_FEATURES">
 </A>
MSG_META_LARGE_START_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_START_FEATURES(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_END_FEATURES">
 </A>
MSG_META_LARGE_END_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_END_FEATURES(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_START_OTHER">
 </A>
MSG_META_LARGE_START_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_START_OTHER(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_END_OTHER">
 </A>
MSG_META_LARGE_END_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_END_OTHER(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_DRAG_SELECT">
 </A>
MSG_META_LARGE_DRAG_SELECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_DRAG_SELECT(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_DRAG_MOVE_COPY">
 </A>
MSG_META_LARGE_DRAG_MOVE_COPY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_DRAG_MOVE_COPY(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_DRAG_FEATURES">
 </A>
MSG_META_LARGE_DRAG_FEATURES</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_DRAG_FEATURES(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
See below for information about this and other large mouse messages.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_LARGE_DRAG_OTHER">
 </A>
MSG_META_LARGE_DRAG_OTHER</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_LARGE_DRAG_OTHER(
        MouseReturnParams 		*retVal,
        LargeMouseData 		*largeMouseDataStruct);</PRE>
<P>
Objects which have been set up with 32-bit coordinate spaces must be prepared to handle large mouse events along with regular mouse events.</P>
<P>
These messages are available by request for use within 32-bit visible document models. Mouse position data is in full 32-bit integer, 16-bit fraction format, as generated by GenView.</P>
<P CLASS="refField">
Parameters:	<EM>retVal</EM>	Structure to hold return values.</P>
<DL>
<DT>
<EM>largeMouseDataStruct</DT><DD>
</EM>Structure to hold pass values.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing returned explicitly.</P>
<DL>
<DT>
<EM>retVal</EM></DT><DD>Filled with return values.</DD>
</DL>
<P CLASS="refField">
Structures:	</P>
<PRE><A NAME="IX_LMD_&ldots;"> </A><A NAME="IX_LargeMouseData"> </A>typedef struct {
	PointDWFixed 				LMD_location;
	byte 				LMD_buttonInfo;
	UIFunctionsActive 				LMD_uiFunctionsActive;
} LargeMouseData;</PRE>
<PRE>typedef struct {
	word 			unused;
	MouseReturnFlags 			flags;
	optr 			ptrImage;
	/* Pointer image to use, if MRF_SET_PTR_IMAGE
	 * returned */
} MouseReturnParams;</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING">
 </A>
MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, MouseReturnFlags 	MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING();</PRE>
<P>
Sent to the passive, active, or implied mouse grab chain whenever modality status changes within the system--any object receiving this message which has a window grabbed should make sure that it has a legitimate right to have the window grab active--if not, it should be released (along with the mouse). In particular, menus in stay-up mode should come down, any interaction between the mouse and primary, display, menu, or view windows should be terminated. <CODE>
MSG_GEN_APPLICATION_TEST_WIN_INTERACTABILITY</CODE>
 is useful; this message will test any passed OD against the list of window(s) which the mouse is allowed to interact with (Generally, top most system modal window, else top most application modal window, else all windows), and return a flag indicating the result.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Flags field which system normally ignores.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_ENSURE_NO_MENUS_IN_STAY_UP_MODE">
 </A>
MSG_META_ENSURE_NO_MENUS_IN_STAY_UP_MODE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, MouseReturnFlags 	MSG_META_ENSURE_NO_MENUS_IN_STAY_UP_MODE();</PRE>
<P>
Sent to the passive, active/implied mouse grab chain whenever we want to make sure all of an application's menus are closed. Sent directly to the Flow object from the global shortcut code. Any menus receiving this message which are in stay-up mode should dismiss themselves.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Flags field, normally ignored by system.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_ENSURE_ACTIVE_FT">
 </A>
MSG_META_ENSURE_ACTIVE_FT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_ENSURE_ACTIVE_FT();</PRE>
<P>
Makes sure that some object with the Focus/Target node to which this message may be sent has the Focus and Target exclusives. Called from within the UI, usually when windowed objects below the node have closed, or moved to the back, to give the Focus and/or Target to the most suitable window.</P>
<P>
Behavior as implemented in <CODE>
GenApplicationClass</CODE>
:<BR>
Checks to make sure that something within the application has the Focus and Target exclusives. Called from within the UI, usually on the closure of a window, to give the Focus and/or Target to the next best location.</P>
<P>
Typical click-to-type model is implemented using the following rules:<BR>
For Target, the priority order is:</P>
<OL>
<LI>
Anything already having the exclusive.</LI>
<LI FIXME_NumListOther>
Top targetable PRIO_STD priority level window.</LI>
<LI FIXME_NumListOther>
Top targetable PRIO_COMMAND priority level window.</LI>
</OL>
<P>
For Focus, priority goes to:</P>
<OL>
<LI>
Anything already having the exclusive.</LI>
<LI FIXME_NumListOther>
Top system modal window.</LI>
<LI FIXME_NumListOther>
Top application modal window.</LI>
<LI FIXME_NumListOther>
Last non-modal window to have or request the exclusive.</LI>
<LI FIXME_NumListOther>
Window having Target exclusive.</LI>
<LI FIXME_NumListOther>
Top focusable PRIO_COMMAND priority level window.</LI>
</OL>
<P CLASS="refField">
Source:	Most always internally from the UI, though is unrestricted.</P>
<P CLASS="refField">
Destination:	Focus/Target node, specifically: GenSystem, GenField, or GenApplication object.</P>
<P CLASS="refField">
Interception:	No reason to intercept. Default behavior is provided by above objects. Could possibly be replaced, but as default behavior varies by specific UI, results could be unpredictable.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_NOTIFY_NO_FOCUS_WITHIN_NODE">
 </A>
MSG_META_NOTIFY_NO_FOCUS_WITHIN_NODE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void 	MSG_META_NOTIFY_NO_FOCUS_WITHIN_NODE();</PRE>
<P>
Notification from Focus node <CODE>
MSG_META_ENSURE_ACTIVE_FT</CODE>
 handler that it was unable to keep/find an object below it suitable for being the focus. The most likely cause is that the last focusable geode/object running below this point has been shut down/closed.</P>
<P CLASS="refField">
Source:	Focus node, <CODE>
MSG_META_ENSURE_ACTIVE_FT</CODE>
 handler</P>
<P CLASS="refField">
Destination:	Self</P>
<P CLASS="refField">
Interception:	Intercepted to find something safe to do for the user, such as push this field/application to the back, or mark this object as no longer &quot;focusable&quot; and call <CODE>
MSG_META_ENSURE_ACTIVE_FT</CODE>
 on the node above this one, in an attempt to find something for the user to access. If there's nothing left at all in the system, the last focusable application has exited, so it's time to shut down.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>



<H2 CLASS="HeadingC">
Miscellaneous Meta Messages</H2>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_UI_FORCE_CONTROLLER_UPDATE">
 </A>
MSG_META_UI_FORCE_CONTROLLER_UPDATE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_UI_FORCE_CONTROLLER_UPDATE(
        ManufacturerID		manufID,
        word		changeID);</PRE>
<P>
This message forces an object to update one or all of the GCN notification lists that it communicates with.</P>
<P CLASS="refField">
Source:	Usually sent by a controller to its output.</P>
<P CLASS="refField">
Destination:	Any object.</P>
<P CLASS="refField">
Parameters:	<EM>
manufID</EM>
	<CODE>
ManufacturerID</CODE>
 of GCN lists.</P>
<DL>
<DT>
<EM>
changeID</EM>
	Notification list ID. </DT><DD>
This value may be 0xffffh if all notification lists should be updated or 0xfffeh to generate the standard notifications.</DD>
</DL>
<P CLASS="refField">
Interception:	Objects that send notification for controllers should respond to this message.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_GEN_PATH_RESTORE_DISK_PROMPT">
 </A>
MSG_META_GEN_PATH_RESTORE_DISK_PROMPT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, Boolean MSG_META_GEN_PATH_RESTORE_DISK_PROMPT(
        DiskRestoreError				*error,
        GenPathDiskRestoreArgs				*args);</PRE>
<P>
This message prompts the user to insert a particular disk into a particular drive when restoring a disk handle for the object's path.</P>
<P CLASS="refField">
Source:	Sent by the callback passed to <CODE>
DiskRestore()</CODE>
 when a disk handle saved in an object's path is being restored after a shutdown.</P>
<P CLASS="refField">
Destination:	Any object possessing a path.</P>
<P CLASS="refField">
Parameters:	<EM>
error</EM>
	Pointer to store an error code. This error code will be returned to<CODE>
 DiskRestore()</CODE>
.</P>
<DL>
<DT>
<EM>
args</EM>
</DT><DD><CODE>
GenPathDiskRestoreArgs</CODE>
.</DD>
</DL>
<P CLASS="refField">
Structures:	</P>
<PRE>typedef struct {
	word			GPDRA_pathType;
	word			GPDRA_savedDiskType;
	char			*GPDRA_driveName;
	char			*GPDRA_diskName;
	DiskRestoreError			GPDRA_errorCode;
} GenPathDiskRestoreArgs;</PRE>
<P>
GPDRA_<CODE>
pathType</CODE>
 stores the vardata tag holding the path.</P>
<P>
GPDRA_<CODE>
savedDiskType</CODE>
 stores the vardata tag holding the saved disk handle.</P>
<P>
GPDRA_<CODE>
driveName</CODE>
 and GPDRA_<CODE>
diskName</CODE>
 store pointers to the null-terminated drive and disk names.</P>
<P>
GPDRA_<CODE>
errorCode</CODE>
 stores the error code that is returned to<CODE>
 DiskRestore()</CODE>
.</P>
<P CLASS="refField">
Interception:	May be intercepted if the object has more information to provide to the user, or if the object doesn't wish to prompt the user. If this message is intercepted, it should not call its superclass.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PAGED_OBJECT_GOTO_PAGE">
 </A>
MSG_META_PAGED_OBJECT_GOTO_PAGE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_GOTO_PAGE(
        word	page);</PRE>
<P>
This message instructs a GenDocument to go to the passed page.</P>
<P>
This message is sent out by the GenPageControl object and is handled by a GenApplication's subclassed GenDocument object.</P>
<P CLASS="refField">
Source:	GenPageControl object.</P>
<P CLASS="refField">
Destination:	GenDocument object.</P>
<P CLASS="refField">
Parameters:	<EM>
page</EM>
	Page to set the GenDocument to display.</P>
<P CLASS="refField">
Interception:	You may intercept to provide custom paging behavior.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PAGED_OBJECT_NEXT_PAGE">
 </A>
MSG_META_PAGED_OBJECT_NEXT_PAGE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_NEXT_PAGE();</PRE>
<P>
This message instructs a GenDocument to go to the next page.</P>
<P>
This message is sent out by the GenPageControl object and is handled by a GenApplication's subclassed GenDocument object.</P>
<P CLASS="refField">
Source:	GenPageControl object.</P>
<P CLASS="refField">
Destination:	GenDocument object.</P>
<P CLASS="refField">
Interception:	You may intercept to provide custom paging behavior.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_PAGED_OBJECT_PREVIOUS_PAGE">
 </A>
MSG_META_PAGED_OBJECT_PREVIOUS_PAGE</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_PREVIOUS_PAGE();</PRE>
<P>
This message instructs a GenDocument to go to the previous page.</P>
<P>
This message is sent out by the GenPageControl object and is handled by a GenApplication's subclassed GenDocument object.</P>
<P CLASS="refField">
Source:	GenPageControl object.</P>
<P CLASS="refField">
Destination:	GenDocument object.</P>
<P CLASS="refField">
Interception:	You may intercept to provide custom paging behavior.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_DELETE_RANGE_OF_CHARS">
 </A>
MSG_META_DELETE_RANGE_OF_CHARS</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_DELETE_RANGE_OF_CHARS(@stack
        VisTextRange		rangeToDelete);</PRE>
<P>
This message instructs an object to delete a range of characters passed in a <CODE>
VisTextRange</CODE>
. Generally, this message is sent out when the user crosses out characters within a HWR grid.</P>
<P CLASS="refField">
Source:	GenPenInputControl.</P>
<P CLASS="refField">
Destination:	Any focused object.</P>
<P CLASS="refField">
Parameters:	<EM>
rangeToDelete</EM>
	<CODE>
VisTextRange</CODE>
 of characters to delete. Objects that are not text objects will need to know how to interpret this value.</P>
<P CLASS="refField">
Interception:	May intercept to provide custom deletion behavior.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_NOTIFY_TASK_SELECTED">
 </A>
MSG_META_NOTIFY_TASK_SELECTED</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_NOTIFY_TASK_SELECTED();</PRE>
<P>
This message is sent when a task list item of an application in the Express Menu is selected. The default behavior brings the application to the front and gives it the focus.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_FIELD_NOTIFY_DETACH">
 </A>
MSG_META_FIELD_NOTIFY_DETACH</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_FIELD_NOTIFY_DETACH(
        optr		field,
        word		shutdownFlag);</PRE>
<P>
This message is sent by the GenField object when it is detaching.</P>
<P CLASS="refField">
Source:	GenField.</P>
<P CLASS="refField">
Destination:	The notification destination of the GenField object.</P>
<P CLASS="refField">
Parameters:	<EM>
field</EM>
	Optr of the GenField sending notification.</P>
<DL>
<DT>
<EM>
shutdownFlag</EM>
</DT><DD><EM>
true</EM>
 if the GenField is detaching because of a shutdown.</DD>
</DL>
<P CLASS="refField">
Interception:	The object receiving notification may handle as desired. As this is a notification only, you should not call the superclass.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_FIELD_NOTIFY_NO_FOCUS">
 </A>
MSG_META_FIELD_NOTIFY_NO_FOCUS</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_FIELD_NOTIFY_NO_FOCUS(
        optr		field,
        word		shutdownFlag);</PRE>
<P>
This message is sent by the GenField when it no longer has any applications in the focus hierarchy.</P>
<P CLASS="refField">
Source:	GenField.</P>
<P CLASS="refField">
Destination:	The notification destination of the GenField object.</P>
<P CLASS="refField">
Parameters:	<EM>
field</EM>
	Optr of the GenField sending notification.</P>
<DL>
<DT>
<EM>
shutdownFlag</EM>
</DT><DD><EM>
true</EM>
 if the GenField lost its focus applications because of a shutdown.</DD>
</DL>
<P CLASS="refField">
Interception:	The object receiving notification may handle as desired. As this is a notification only, you should not call the superclass.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_FIELD_NOTIFY_START_LAUNCHER_ERROR">
 </A>
MSG_META_FIELD_NOTIFY_START_LAUNCHER_ERROR</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, void MSG_META_FIELD_NOTIFY_START_LAUNCHER_ERROR(
        optr		field);</PRE>
<P>
This message is sent by the GenField when an error occurs while attempting to run the launcher for the field object.</P>
<P CLASS="refField">
Source:	GenField.</P>
<P CLASS="refField">
Destination:	The notification destination of the GenField object.</P>
<P CLASS="refField">
Parameters:	<EM>
field</EM>
	Optr of the GenField sending notification.</P>
<P CLASS="refField">
Interception:	The object receiving notification may handle as desired. As this is a notification only, you should not call the superclass.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_TEST_WIN_INTERACTIBILITY">
 </A>
MSG_META_TEST_WIN_INTERACTIBILITY</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, Boolean MSG_META_TEST_WIN_INTERACTIBILITY(
        optr		inputOD,
        WindowHandle		window);</PRE>
<P>
This message checks whether a pointing device (usually a mouse) can interact with the passed window.</P>
<P CLASS="refField">
Source:	</P>
<P CLASS="refField">
Destination:	A windowed object.</P>
<P CLASS="refField">
Parameters:	<EM>
inputOD</EM>
	Input optr of the windowed object to check.</P>
<DL>
<DT>
<EM>
window</EM>
</DT><DD>Window to check.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if window is interactable.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CHECK_IF_INTERACTIBLE_OBJECT">
 </A>
MSG_META_CHECK_IF_INTERACTIBLE_OBJECT</H4>
<PRE CLASS="syntax">@importMessage MetaUIMessages, Boolean MSG_META_CHECK_IF_INTERACTIBLE_OBJECT(
        optr	obj);</PRE>
<P>
This message is sent o objects on the GAGCNLT_ALWAYS_INTERACTABLE_WINDOWS GCN list. </P>
<P CLASS="refField">
Source:	GenApplication object.</P>
<P CLASS="refField">
Destination:	Objects on the GAGCNLT_ALWAYS_INTERACTABLE_WINDOWS GCN list.</P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Object whose interactable state is being checked.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if object is interactable.</P>
<P CLASS="refField">
Interception:	May intercept.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="MetaClass_d.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="MetaClass_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.2 Input Messages</A> 
<!-- to next --> | <A HREF="MetaClass_11.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.4 Standard GCN Messages</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
