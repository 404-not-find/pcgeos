<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: MetaClass_11.htm,v 1.1 97/06/02 16:20:06 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Standard GCN Messages</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">MetaClass</A>: 3.4 <A HREF="MetaClass_d.htm">Exported Message Ranges</A>: 
Standard GCN Messages</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="MetaClass_d.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="MetaClass_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.3 UI Messages</A> 
<!-- to next --> | <A HREF="MetaClass_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.5 IACP Meta Messages</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_General change notification:standard messages">
 </A>
There are several standard messages which objects adding themselves to the appropriate GCN lists may receive and handle.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_FILE_CHANGE">
 </A>
MSG_NOTIFY_FILE_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_FILE_CHANGE(
        MemHandle 		data);</PRE>
<P>
This notification is sent out whenever the file system changes in any way.</P>
<P CLASS="refField">
Source:	GCN mechanism.</P>
<P CLASS="refField">
Destination:	Object on the GCNSLT_FILE_SYSTEM GCN list.</P>
<P CLASS="refField">
Parameters:	<EM>data</EM> 	Handle of a <CODE>
FileChangeNotificationData</CODE>
 block.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Structures:	</P>
<PRE><A NAME="IX_FCND_&ldots;"> </A><A NAME="IX_FileChangeNotificationData"> </A>typedef struct {
	PathName			FCND_pathname;
	DiskHandle			FCND_diskHandle;
	FileChangeType			FCND_changeType;
} FileChangeNotificationData;</PRE>
<PRE><A NAME="IX_FCT_&ldots;"> </A><A NAME="IX_FileChangeType"> </A>typedef ByteEnum FileChangeType;
/* These flags may be combined using | and &amp;:
	FCT_CREATE
	FCT_DELETE
	FCT_RENAME
	FCT_CONTENTS
	FCT_DISK_FORMAT */</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_DRIVE_CHANGE">
 </A>
MSG_NOTIFY_DRIVE_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_DRIVE_CHANGE(
        GCNDriveChangeNotificationType 						type,
        word 						driveNum);</PRE>
<P>
This is sent to notify various system utilities that a drive has been created or destroyed or has changed ownership from one installable file system driver to another.</P>
<P>
Note that during system initialization, the ownership of a drive may change several times as more-specialized drivers are loaded. This means the recipient should not be surprised if it's told a drive has been created that it thought already existed.</P>
<P CLASS="refField">
Source:	The kernel issues this notification whenever a filesystem driver creates or destroys a drive it manages. This includes when a specialized filesystem driver takes control of an existing drive.</P>
<P CLASS="refField">
Destination:	Any object that has added itself to the GCNSLT_FILE_SYSTEM GCN list. It is intended for system objects, such as the GenFileSelector.</P>
<P CLASS="refField">
Parameters:	<EM>type</EM> 	<CODE>
GCNDriveChangeNotificationType</CODE>
.</P>
<DL>
<DT>
<EM>driveNum</EM></DT><DD>Number of the affected drive.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_APP_STARTED">
 </A>
MSG_NOTIFY_APP_STARTED</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_APP_STARTED();</PRE>
<P>
This message is sent out when an application attaches to the UI.</P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_APPLICATION system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_APP_EXITED">
 </A>
MSG_NOTIFY_APP_EXITED</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_APP_EXITED();</PRE>
<P>
This message is sent out when an application thread exits.</P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_APPLICATION system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_DATE_TIME_CHANGE">
 </A>
MSG_NOTIFY_DATE_TIME_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_DATE_TIME_CHANGE();</PRE>
<P>
This message is sent out when the date or time changes--whenever the system comes back or the system time is altered (e.g. by the User in Preferences). </P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_DATE_TIME system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_USER_DICT_CHANGE">
 </A>
MSG_NOTIFY_USER_DICT_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_USER_DICT_CHANGE(
        MemHandle 		sendingSpellBox,
        MemHandle 		userDictChanged);</PRE>
<P>
This message is sent out when an application attaches to the UI.</P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_DICTIONARY system GCN list.</P>
<P CLASS="refField">
Parameters:	<EM>sendingSpellBox</EM> 	Handle of SpellBox that sent out the notification.</P>
<DL>
<DT>
<EM>userDictChanged</EM> </DT><DD>Handle of user dictionary that changed.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_KEYBOARD_LAYOUT_CHANGE">
 </A>
MSG_NOTIFY_KEYBOARD_LAYOUT_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_KEYBOARD_LAYOUT_CHANGE();</PRE>
<P>
This message is sent out when the keyboard layout is changing. Usually this involves a change in status of the floating keyboard. When passing this event to <CODE>
GCNListSend()</CODE>
, you must be sure to pass the GCNLSF_FORCE_QUEUE flag. (Otherwise, if you have a <CODE>
GenPenInputControl</CODE>
 running on the same thread, it may try to remove itself from the list while you are sending this message.)</P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_KEYBOARD_OBJECT system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_NOTIFY_EXPRESS_MENU_CHANGE">
 </A>
MSG_NOTIFY_EXPRESS_MENU_CHANGE</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_NOTIFY_EXPRESS_MENU_CHANGE(
        GCNExpressMenuNotificationTypes 	type,
        optr 		affectedField);</PRE>
<P>
This message is sent to notify various system utilities that an express menu has been created or destroyed. The recipient receives the optr of the field to which the affected express menu belongs, as all access to the express menu is via messages sent to the field.</P>
<P CLASS="refField">
Source:	The UI issues this notification whenever a GenField object creates or destroys its express menu.</P>
<P CLASS="refField">
Destination:	Any object that has added itself to the GCNSLT_EXPRESS_MENU. GCN list. It is intended for system utilities, such as the print spooler or a task-switching driver, that need to add objects to each express menu in the system.</P>
<P CLASS="refField">
Parameters:	<EM>type</EM> 	What happened to the field.</P>
<DL>
<DT>
<EM>affectedField</EM> </DT><DD>Which field of the menu was affected. (This will not be the optr of the express menu itself.)</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Structures:	</P>
<PRE><A NAME="IX_GCNEMNT_&ldots;"> </A><A NAME="IX_GCNExpressMenuNotificationTypes"> </A>typedef enum {
	GCNEMNT_CREATED,
	GCNEMNT_DESTROYED
} GCNExpressMenuNotificationTypes;</PRE>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_PRINTER_INSTALLED_REMOVED">
 </A>
MSG_PRINTER_INSTALLED_REMOVED</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_PRINTER_INSTALLED_REMOVED();</PRE>
<P>
This message is sent whenever a printer is installed or removed. The recipient of this message might call <CODE>
SpoolGetNumPrinters()</CODE>
 to determine if any printers or fax machines are currently installed.</P>
<P CLASS="refField">
Source:	GCN Mechanism.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_INSTALLED_PRINTERS system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_META_CONFIRM_SHUTDOWN">
 </A>
MSG_META_CONFIRM_SHUTDOWN</H4>
<PRE CLASS="syntax">@importMessage MetaGCNMessages, void 	MSG_META_CONFIRM_SHUTDOWN(
        GCNShutdownControlType 	type);</PRE>
<P>
This message is sent out when the system is about to shut down.</P>
<P>
All applications which need to keep the system from shutting down must add themselves to GCNSLT_SHUTDOWN_CONTROL and handle this message.</P>
<P CLASS="refField">
Source:	The task switch mechanism, through GCN.</P>
<P CLASS="refField">
Destination:	Any object on the GCNSLT_SHUTDOWN_CONTROL system GCN list.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	If the system is about to be suspended or shut down (if the passed <CODE>
GCNShutDownControlType</CODE>
 is GCNSCT_SUSPEND or GCNSCT_SHUTDOWN), then any object receiving this message <EM>
must</EM>
 call <CODE>
SysShutdown()</CODE>
, passing SST_CONFIRM_START before it puts up any dialog box it uses to ensure the user isn't doing something foolish. If <CODE>
SysShutdown()</CODE>
 returns <EM>
true</EM>
 (indicating something has already denied the shutdown request), the caller should <EM>
not</EM>
 put up its confirmation box, nor need it call <CODE>
SysShutdown()</CODE>
 again.<BR>
Once the object has received a response from the user, either affirmative or negative, it must call <CODE>
SysShutdown()</CODE>
, passing SST_CONFIRM_ACK or SST_CONFIRM_DENY as appropriate. This will allow any other confirmations to happen, as well as sending the final result to the original caller of <CODE>
SysShutdown()</CODE>
.<BR>
If the passed control type is GCNSCT_UNSUSPEND, no response is required.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="MetaClass_d.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="MetaClass_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.3 UI Messages</A> 
<!-- to next --> | <A HREF="MetaClass_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.5 IACP Meta Messages</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
