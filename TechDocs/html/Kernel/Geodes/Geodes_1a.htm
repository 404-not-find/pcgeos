<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Geodes_1a.htm,v 1.1 97/06/02 15:28:44 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> IACP Overview</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Applications and Geodes</A>: 6.1 <A HREF="Geodes_19.htm">Inter-Application Communication</A>: 
IACP Overview</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_19.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_19.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">6 Inter-Application Communication</A> 
<!-- to next --> | <A HREF="Geodes_1b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">6.2 GenApplicationClass Behavior</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
There is a major difference between sending a message within an application, and sending one to a different application. When you send a message from one object to another within an application, you know that the recipient exists, and you know the optr of that recipient. This makes it easy to send messages.</P>
<P>
When you send a message to another application, however, you do not (at first) know any optrs to that application. In fact, you may not even know that the application is running. Often, all you will know is something like, &quot;I want to send a message to <CODE>
SpiffyWrite</CODE>
&quot;.</P>
<P>
GEOS uses a client-server model of inter-application communication. Every <CODE>
GeodeToken</CODE>
 corresponds to a server. Whenever an application is launched, GEOS checks to see if there is a <EM>
server-list</EM>
 corresponding to the application's token. If there is, GEOS adds the app's Application object to the server-list; if there is not, GEOS creates a server-list and adds the Application object to that list.

</P>
<P>
For example, suppose the user launches a single copy of <CODE>
SpiffyWrite</CODE>
; this application has a manufacturer-ID of MANUFACTURER_ID_SPIFFYWARE, and the token characters &quot;SWRI&quot;. GEOS will check if there's a server-list for that <CODE>
GeodeToken</CODE>
. Let us suppose there isn't such a list; GEOS will automatically create one, and add <CODE>
SpiffyWrite</CODE>
's Application object to that list. The Application object is now said to be a <EM>
server</EM>
 for the list.</P>
<P>
Now let us suppose another application needs to contact <CODE>
SpiffyWrite</CODE>
; for example, perhaps a desktop program needs to print a <STRONG CLASS="fileName">
SpiffyWrite</STRONG>
 file. It tells the kernel that it would like to be a <EM>
client</EM>
 on the list for the token &quot;{MANUFACTURER_ID_SPIFFYWARE, &quot;SWRI&quot;}&quot;. GEOS will check to see if a server-list for that token exists. If so, it will add the client to that list; this will cause a notification message (MSG_META_IACP_NEW_CONNECTION) to be sent to every server for that list.</P>
<P>
Once a client is linked to a server, it can send a message to the server list. It does this by encapsulating a message, then passing the encapsulated message to the server-list. GEOS will dispatch the message to every server for the list; the server objects will receive it just like any ordinary message. (It actually passes the encapsulated message to the server object as an argument to <CODE>
MSG_META_IACP_PROCESS_MESSAGE</CODE>
; the server can then dispatch the message to the final recipient.)</P>
<P>
This establishes the link between the applications. The client can pass an optr to the servers by putting it in the encapsulated message; a server object can then send messages straight to a particular object.</P>
<P>
When a client no longer needs to communicate with a server, it unregisters itself from the server list. GEOS then sends a notification message to every server object.</P>
<P>
Customarily, whoever allocates a global resource must also free it. For example, if a client might pass information to the server by allocating a global block, writing the data to the block, and passing the block to the server. The server should notify the client when the server is finished with that data; the client can then free the block. Similarly, if a server allocates a block to pass information to a client, the server should free the block.</P>
<P>
There may be several servers for a given server list. For example, if three copies of <CODE>
SpiffyWrite</CODE>
 were running at once, each of their Application objects would be a server for the same server-list. Furthermore, any object can make itself a server for any list. All servers will receive copies of every message sent to the server list. To distinguish between different servers for a list, every server for a list is assigned a distinct <CODE>
ServerNumber</CODE>
. If it chooses to, a client can specify that a message be sent only to the server with a specific number.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_19.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_19.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">6 Inter-Application Communication</A> 
<!-- to next --> | <A HREF="Geodes_1b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">6.2 GenApplicationClass Behavior</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
