<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Geodes_8.htm,v 1.1 97/06/02 15:29:41 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Working with Geodes</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Applications and Geodes</A>: 1.7 <A HREF="Geodes_1.htm">Geodes</A>: 
Working with Geodes</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.6 Writing Your Own Libraries</A> 
<!-- to next --> | <A HREF="Geodes_9.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.8 Geode Protocols and Release Levels</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The system provides a number of utility routines for getting information and setting attributes of geodes. These are loosely organized throughout the following sections.</P>

<H2 CLASS="HeadingC">
Accessing the Application Object</H2>
<PRE>GeodeGetAppObject()</PRE>
<P>
GEOS<A NAME="IX_Application object:accessing">
 </A>
<A NAME="IX_GeodeGetAppObject()">
 </A>
 offers a routine for retrieving the optr of an application's GenApplication object. <CODE>
GeodeGetAppObject()</CODE>
 takes the process handle of the Process object of the application. It returns the optr of the application's GenApplication object.</P>


<H2 CLASS="HeadingC">
General Geode Information</H2>
<PRE>GeodeFind(), GeodeFindResource(), GeodeDuplicateResource(), GeodeGetInfo(), GeodeGetProcessHandle(), GeodeGetCodeProcessHandle(), ProcInfo()</PRE>
<P>
<CODE>
GeodeFind()</CODE>
<A NAME="IX_GeodeFind()">
 </A>
 returns a geode's handle when given a permanent name and attributes to search on. GEOS will search the active geode list for any geode with the given name and the proper attributes set or clear.</P>
<P>
<CODE>
GeodeFindResource()</CODE>
<A NAME="IX_GeodeFindResource()">
 </A>
 locates a given resource within a geode's file. It must be passed the file handle of the geode, the number of the resource in the file, and an offset within the resource at which the file read/write position should be placed. This routine may only be used on open geode files, and it returns the base offset and size of the resource. You will probably not need to use this routine. <A NAME="IX_GeodeDuplicateResource()">
 </A>
To load a resource into a new block of memory, you can call <CODE>
GeodeDuplicateResource()</CODE>
.</P>
<P>
<CODE>
GeodeGetInfo()</CODE>
<A NAME="IX_GeodeGetInfo()">
 </A>
 takes a geode handle, a <A NAME="IX_GeodeGetInfoType">
 </A>
<CODE>
GeodeGetInfoType</CODE>
 parameter, and a buffer appropriate for the return information. It returns the appropriate values as specified in the <CODE>
GeodeGetInfoType</CODE>
 parameter. (This parameter specifies what type of information is sought about the geode; the routine can return the geode's attributes, geode type, release level, protocol, token ID, or permanent name.) The possible values of <CODE>
GeodeGetInfoType</CODE>
 are shown below:</P>
<DL>
<DT>
GGIT_ATTRIBUTES</DT><DD>
<A NAME="IX_GGIT_&ldots;">
 </A>
This indicates the geode's attributes should be returned.</DD>
<DT>
GGIT_TYPE</DT><DD>This indicates the geode's type should be returned (type <CODE>
GeodeType</CODE>
).</DD>
<DT>
GGIT_GEODE_RELEASE</DT><DD>
This indicates the geode's release numbers should be returned.</DD>
<DT>
GGIT_GEODE_PROTOCOL</DT><DD>
This indicates the geode's protocol numbers should be returned.</DD>
<DT>
GGIT_TOKEN_ID</DT><DD>
This indicates the geode's token information should be returned.</DD>
<DT>
GGIT_PERM_NAME_AND_EXT</DT><DD>
This indicates the geode's permanent name and extender should be returned.</DD>
<DT>
GGIT_PERM_NAME_ONLY</DT><DD>
This indicates the eight characters of the geode's permanent name only should be returned, without the extender characters.</DD>
</DL>
<P>
<CODE>
GeodeGetProcessHandle()</CODE>
<A NAME="IX_GeodeGetProcessHandle()">
 </A>
 returns the geode handle of the current process (the owner of the current thread). Another routine, <CODE>
GeodeGetCodeProcessHandle()</CODE>
<A NAME="IX_GeodeGetCodeProcessHandle()">
 </A>
, returns the handle of the geode that owns the code block from which it was called.</P>
<P>
<CODE>
ProcInfo()</CODE>
<A NAME="IX_ProcInfo()">
 </A>
 returns the thread handle of the first thread of a given process.</P>


<H2 CLASS="HeadingC">
Managing Geode Event Queues</H2>
<PRE>GeodeAllocQueue(), GeodeFreeQueue(), GeodeInfoQueue(), GeodeFlushQueue(), ObjDispatchMessage(), QueueGetMessage(), QueuePostMessage(), GeodeDispatchFromQueue()</PRE>
<P>
<A NAME="IX_Event queues">
 </A>
The following routines allocate and manage event queues. These routines are rarely called by applications as event queues are automatically managed for each thread and application.</P>
<P>
<CODE>
GeodeAllocQueue()</CODE>
<A NAME="IX_GeodeAllocQueue()">
 </A>
 allocates an event queue and returns its handle.<CODE>
 GeodeInfoQueue()</CODE>
<A NAME="IX_GeodeInfoQueue()">
 </A>
 returns the number of events in a given event queue.<CODE>
 GeodeFreeQueue()</CODE>
<A NAME="IX_GeodeFreeQueue()">
 </A>
 frees an event queue allocated with the routine <CODE>
GeodeAllocQueue()</CODE>
. It must be passed the handle of the queue to be freed (unhandled events still in the queue will be discarded).</P>
<P>
<CODE>
GeodeFlushQueue()</CODE>
<A NAME="IX_GeodeFlushQueue()">
 </A>
 flushes all events from one queue and synchronously places them all in another queue (events may not simply be tossed out).</P>
<P>
<CODE>
QueueGetMessage()</CODE>
<A NAME="IX_QueueGetMessage()">
 </A>
<A NAME="IX_ObjDispatchMessage()">
 </A>
 combined with <CODE>
ObjDispatchMessage()</CODE>
 removes the first event from the given event queue and handles it via a callback routine. A far pointer to the callback routine in memory must be passed. Typically these will be used only by the assembly <CODE>
ObjMessage()</CODE>
 routine used by the kernel; some other applications of this routine may be used, though. For example, the sound driver uses a note queue unassociated with objects and messages. The callback routine therefore gets the &quot;event&quot; (note) and pretends it's handling a message.</P>
<P>
<CODE>
QueuePostMessage()</CODE>
<A NAME="IX_QueuePostMessage()">
 </A>
 adds an event to the specified queue. </P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_1.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1.6 Writing Your Own Libraries</A> 
<!-- to next --> | <A HREF="Geodes_9.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">1.8 Geode Protocols and Release Levels</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
