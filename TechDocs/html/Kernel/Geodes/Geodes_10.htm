<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- $Id: Geodes_10.htm,v 1.11 97/08/13 09:21:25 cgroom Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> The GEOS.INI File</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Applications and Geodes</A>: 3.2 <A HREF="Geodes_e.htm">Saving User Options</A>: 
<A NAME="18691">
 </A>
The GEOS.INI File</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_e.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Saving Generic Object Options</A> 
<!-- to next --> | <A HREF="Geodes_11.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 General System Utilities</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
GEOS<A NAME="IX_GEOS.INI file">
 </A>
<A NAME="IX_GEOS.INI file">
 </A>
 can use multiple initialization files in network situations, but only the local GEOS.INI is editable. The local GEOS.INI (referred to hereafter simply as GEOS.INI or &quot;the INI file&quot;) is read first into a moveable, swappable buffer, and it contains the path names of any other INI files to be used. The other INI files are subsequently loaded into other buffers. When the kernel searches for a specific entry in one of the INI files, it looks first in the local INI's buffer and then in any others in the order they were loaded. When it reaches what it wants, it stops searching. Thus, multiple entries are allowed but are not used, and the local INI file has precedence over all others.</P>

<H2 CLASS="HeadingC">
Configuration of the INI File</H2>
<P>
The GEOS.INI file has a very specific format and syntax. It is segmented into <EM>
categories</EM>
, each of which contains several <EM>
keys</EM>
 that determine how GEOS will perform. (For an example of an INI file, see <A HREF="Geodes_10.htm#80559"> Example GEOS.INI File Entries</A>
.) Note that typically the GEOS.INI file should not be accessed directly because its format is subject to change.</P>
<P>
A category is essentially a group of keys. Certain geodes will work with their own categories, and certain categories will be used by several geodes. For example, the <CODE>
system</CODE>
 category is used by the kernel and the UI to determine several of the default system settings. Each category is set in GEOS.INI by putting its name within square brackets. The text within the brackets is case-insensitive and ignores white space, so [My category], [mycategory], and [MY CATEGORY] are all equivalent.
</P>
<P>
A key is any setting that the system or an application can recognize and assign a value to. A single key may exist in several different categories; since both category and key define an entry, the entries will be unique if either key or category is different. Keys may be text strings, integers, or Boolean values, and every key is identified by its name, which is an ASCII string. Data may also be read from and written to the file in binary form; the kernel will automatically convert this into ASCII hexadecimal for storage and will revert it to binary during retrieval.</P>
<P>
Both category names and key fields are called &quot;entries.&quot; Each entry may exist on a single line or may cover several lines. An entry that contains carriage returns is technically known as a &quot;blob.&quot; Each blob will automatically be enclosed in curly braces when it is written into the file. Any blob that contains curly braces will automatically have backslashes inserted before the closing braces so GEOS doesn't mistake them for the blob delimiters.</P>
<P>
Comments may be added to the INI file by putting a semicolon at the beginning of the line. The file has several standard categories and keys that can be set within them. These are detailed in <A HREF="../../Tools/Ini/index.htm">the INI File chapter</A>
.</P>
<P CLASS="figTitle">
Code Display 7-3 <A NAME="80559">
 </A>
Example GEOS.INI File Entries</P>
<PRE>; The category &quot;system&quot; is used by the kernel and the UI to set certain system
; defaults such as the number of handles, the default system font and size, and
; the types of memory drivers to be loaded.</PRE>
<PRE>[system]</PRE>
<PRE>; The handles key is assigned an integer that determines the number of handle
; spaces allocated for the system's Handle Table.
handles = 2500</PRE>
<PRE>; The font key is assigned a character string that represents a file name
; or a list of file names separated by spaces.
; The listed file(s) will be read in as the font driver geode.
font = nimbus.geo</PRE>
<PRE>; The memory key is assigned a blob of text containing all the names of the memory
; drivers available to the system.
memory = {
disk.geo
emm.geo
xms.geo
}</PRE>
<PRE>; The category &quot;MyApp's Category&quot; is set for example only. It is used by the MyApp
; application.</PRE>
<PRE>[My App's Category]</PRE>
<PRE>; The myappHiScore key is an integer key set by the MyApp application.
myappHiScore = 52</PRE>
<PRE>; The myappBoolean key is a Boolean value. Booleans are case-insensitive, so True,
; true, and TRUE are all equated to &quot;true&quot;. This is actually a Boolean value and
; is translated by the read and write routines that work with Boolean values.
myappBoolean = true</PRE>
<PRE>; The myappHiName is a text string that, in this case, contains carriage returns,
; backslash characters, and curly brace characters. The original text looked like
; this:
;		this is a multi-line
;		blob of text with curly
;		brace ({,}) characters }} in it
; It is automatically given backslashes in front of the closing braces, and it
; is automatically surrounded with curly braces.
myappHiName = {this is a multi-line
blob of text with curly
brace ({,\}) characters \}\} in it}</PRE>


<H2 CLASS="HeadingC">
Managing the INI File</H2>
<PRE>InitFileSave(), InitFileRevert(), InitFileGetTimeLastModified(), InitFileCommit()</PRE>
<P>
Because the INI file is common to all geodes and to all threads in the system, only one thread at a time may access it. This synchronization is handled by the kernel whenever a routine to read from or write to the INI file is used. Additionally, the INI file is loaded into a buffer when the system is first run; all operations on the INI file actually work on this buffer, and the buffer may be flushed to disk only by the kernel.</P>
<P>
There are, however, four routines that work directly on the INI file. One saves the file, another reverts it from the last save, the third checks the time the file was last modified, and the fourth commits any pending INI file changes to disk.</P>
<P>
<A NAME="IX_InitFileRevert()">
 </A>
<A NAME="IX_InitFileSave()">
 </A>
To save the local GEOS.INI, use the routine <CODE>
InitFileSave()</CODE>
; this saves the changes to the backup file. It requires no parameters and returns an error flag if the file could not be saved. <CODE>
InitFileRevert()</CODE>
 reverts the GEOS.INI file to its state the last time it was backed up. This routine takes no parameters, and it returns an error flag if the revert can not be accomplished.</P>
<P>
<CODE>
InitFileGetTimeLastModified()</CODE>
<A NAME="IX_InitFileGetTimeLastModified()">
 </A>
 returns the system counter's value stored the last time GEOS.INI was modified.</P>
<P>
<CODE>
InitFileCommit()</CODE>
<A NAME="IX_InitFileCommit()">
 </A>
 takes all the changes made since the file was last modified and flushes them to disk. This commits all the changes and should be used only from the kernel. It should not be used by applications.</P>


<H2 CLASS="HeadingC">
Writing Data to the INI File</H2>
<PRE>InitFileWriteData(), InitFileWriteString(), InitFileWriteStringSection(),
InitFileWriteInteger(), InitFileWriteBoolean()</PRE>
<P>
GEOS provides five routines to write to the INI file, one for each of the allowable data types. Each of these routines will first gain exclusive access to the local INI buffer, then locate the appropriate category for writing. After writing the key and its value, the routine will relinquish exclusive access to the buffer, allowing other threads to write into it. Writing a category or key that does not exist in the local INI file will add it to the file. If you use a routine to write keys or categories to the INI file, be sure to first convert the strings to the acceptable ASCII hex format using <CODE>InitFileMakeCanonicKeyCategory()</CODE>.
</P>
<P>
Each of these routines takes at least three arguments: The category is specified as a null-terminated character string; a pointer to the string is passed. The key name is also specified as a null-terminated character string; again, a pointer to the string is passed. The third parameter is specific to the routine and contains the value to which the key will be set.</P>
<P>
<CODE>
InitFileWriteData()</CODE>
<A NAME="IX_InitFileWriteData()">
 </A>
 writes a number of bytes into the INI buffer, and it takes four parameters. The additional parameter is the size of the data. The data will be converted into ASCII hexadecimal when the file is saved and will be converted back when the key is read.</P>
<P>
<CODE>
InitFileWriteString()</CODE>
<A NAME="IX_InitFileWriteString()">
 </A>
 takes a pointer to the null-terminated character string to be written. If the character string contains carriage returns or line feeds, it will automatically be converted into a blob.</P>
<P>
<CODE>
InitFileWriteStringSection()</CODE>
<A NAME="IX_InitFileWriteStringSection()">
 </A>
 writes a new string section (a portion of a blob) into the specified entry. The specified entry must be a blob already, and the string section will be appended to the blob. A string section is a line of a blob delineated by line feeds or carriage returns.</P>
<P>
<CODE>
InitFileWriteInteger()</CODE>
<A NAME="IX_InitFileWriteInteger()">
 </A>
 takes as its third argument the integer to be written.</P>
<P>
<CODE>
InitFileWriteBoolean()</CODE>
<A NAME="IX_InitFileWriteBoolean()">
 </A>
 takes a Boolean value. A zero value represents false, and any nonzero value represents true. When looking at the INI file with a text editor, the Boolean value will appear as a text string of either &quot;true&quot; or &quot;false&quot;; it will, however, be interpreted as a Boolean rather than a text string.</P>


<H2 CLASS="HeadingC">
Getting Data from the INI File</H2>
<PRE>InitFileReadDataBuffer(), InitFileReadDataBlock(), InitFileReadStringBuffer(), InitFileReadStringBlock(), InitFileEnumStringSection() InitFileReadStringSectionBuffer(), InitFileReadStringSectionBlock(), InitFileReadInteger(), InitFileReadBoolean()</PRE>
<P>
When you want to check what a key is set to in the INI file, you should use one of the <CODE>
InitFileRead...()</CODE>
 routines. These search the local INI file first and then each of the additional INI files in the order they were loaded. They will return the first occurrence of a given key, so if the key exists in both your local INI file and another INI file, these routines will return only the local value.</P>
<P>
All of these routines take at least two parameters. The first is the category of the entry to be retrieved; this is stored as a null-terminated ASCII string, and a pointer to the string is passed. The second is the key of the entry. This, too, is stored as a null-terminated ASCII string, and a pointer to the string is passed.</P>
<P>
<CODE>
InitFileReadBoolean()</CODE>
<A NAME="IX_InitFileReadBoolean()">
 </A>
 returns the Boolean value of the given key. If the key is set &quot;false,&quot; a value of zero (FALSE) will be returned. If the key is set &quot;true,&quot; a nonzero value will be returned (-1, the constant TRUE).</P>
<P>
<CODE>
InitFileReadInteger()</CODE>
<A NAME="IX_InitFileReadInteger()">
 </A>
 returns the integer value of the given key.</P>
<P>
<CODE>
InitFileReadDataBuffer()</CODE>
<A NAME="IX_InitFileReadDataBuffer()">
 </A>
 and <A NAME="IX_InitFileReadDataBlock()">
 </A>
<CODE>
InitFileReadDataBlock()</CODE>
 both return the data bytes stored in the given key. The first, however, takes the address of a buffer already allocated and puts the data into the buffer. The second allocates a new block on the heap and puts the data into it. If you don't know the size of the data, you should use <CODE>
InitFileReadDataBlock()</CODE>
.</P>
<P>
<CODE>
InitFileReadStringBuffer()</CODE>
<A NAME="IX_InitFileReadStringBuffer()">
 </A>
 and<A NAME="IX_InitFileReadStringBlock()">
 </A>
 <CODE>
InitFileReadStringBlock()</CODE>
 both return the null-terminated string stored in the given key. In both cases, curly braces will be stripped off of blobs and backslash characters will be removed if appropriate. The first, however, takes the address of a buffer already allocated and puts the string in the buffer. The second allocates a new block on the heap and returns the string in it. If you don't know the approximate size of the string, use <CODE>
InitFileReadStringBlock()</CODE>
.</P>
<P>
<CODE>
InitFileReadStringSectionBuffer()</CODE>
<A NAME="IX_InitFileReadStringSectionBuffer()">
 </A>
 and its counterpart <CODE>
InitFileReadStringSectionBlock()</CODE>
<A NAME="IX_InitFileReadStringSectionBlock()">
 </A>
 both return a null-terminated section of the string stored in the given key. A string section is defined as any number of contiguous printable ASCII characters and is delimited by carriage returns or line feeds. These routines take the number of the string section desired and return the section (if it exists). <CODE>
InitFileReadStringSectionBuffer()</CODE>
 takes the address of a buffer already allocated on the heap and returns the string section in the buffer. <CODE>
InitFileReadStringSectionBlock()</CODE>
 allocates a new block on the heap and returns the string section in it. You should use this routine if you don't know the approximate size of the string section.</P>
<P>
<CODE>
InitFileEnumStringSection()</CODE>
<A NAME="IX_InitFileEnumStringSection()">
 </A>
 enumerates the specified blob, executing a specified callback routine on each string section within the blob.</P>


<H2 CLASS="HeadingC">
Deleting Items from the INI File</H2>
<PRE>InitFileDeleteEntry(), InitFileDeleteCategory(), InitFileDeleteStringSection()</PRE>
<P>
<A NAME="IX_InitFileDeleteEntry()">
 </A>
Besides reading and writing data, you can delete categories and keys that were previously entered. <CODE>
InitFileDeleteEntry()</CODE>
 takes pointers to both the null-terminated category name and the null-terminated key name and deletes the entry. <A NAME="IX_InitFileDeleteCategory()">
 </A>
<CODE>
InitFileDeleteCategory()</CODE>
 takes only a pointer to the null-terminated category name and deletes the entire category, including all the keys stored under it.</P>
<P>
<A NAME="IX_InitFileDeleteStringSection()">
 </A>
In addition, you can delete a single string section from a specified blob. <CODE>
InitFileDeleteStringSection()</CODE>
 takes the category and key names of the blob as well as the index of the string section, and it deletes the string section. If the string section does not exist or if either the key or category can not be found, the routine will return an error flag.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geodes_e.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geodes_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Saving Generic Object Options</A> 
<!-- to next --> | <A HREF="Geodes_11.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 General System Utilities</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
