<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: LMem_5.htm,v 1.1 97/06/02 15:52:35 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Types of LMem Heaps</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Local Memory</A>: 2.3 <A HREF="LMem_2.htm">Structure of a Local Memory Heap</A>: 
<A NAME="13234">
 </A>
Types of LMem Heaps</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="LMem_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="LMem_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Chunks and Chunk Handles</A> 
<!-- to next --> | <A HREF="LMem_6.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Using Local Memory Heaps</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>LMemType, LMemFlags</PRE>
<P>
<A NAME="IX_LMEM_TYPE_&ldots;">
 </A>
<A NAME="79694">
 </A>
In addition to being used for general memory needs, local memory heaps perform many specific functions in the GEOS system. When an LMem heap is created, a member of the <CODE>
LMemType</CODE>
 enumerated type is passed, indicating to what use the LMem heap will be put. Several types are available:</P>
<DL>
<DT>
LMEM_TYPE_GENERAL</DT><DD>
The LMem heap will be used for general data storage, possibly including a chunk, name, or element array. When an application creates an LMem heap, it will almost always be of type &quot;General&quot; or &quot;Object.&quot;</DD>
<DT>
LMEM_TYPE_WINDOW</DT><DD>
Windows are stored in memory as LMem heaps. The header contains information about the window; each region in the window is stored as a chunk. Applications will not directly create Window heaps.</DD>
<DT>
LMEM_TYPE_OBJ_BLOCK</DT><DD>
Objects are stored in object blocks, which are LMem heaps. An object block has some extra header information and contains one chunk which contains only flags. All the objects in the block are stored as chunks on the heap. Applications can directly create object blocks; for more information, see <A HREF="../../Programming/GOCLanguage/index.htm">the GEOS Programming chapter</A>.</DT><P CLASS="WorList">
LMEM_TYPE_GSTATE<BR>
A GState is an LMem heap. The GState information is in the header, and the application clip-rectangle is stored in a chunk. Applications do not directly create GState blocks; rather, they call a GState creation routine, which creates the block. (See <A HREF="../../Graphics/Environment/index.htm">the Graphics Environment chapter</A>.)</P><DT>
LMEM_TYPE_FONT_BLOCK<BR>
Font blocks are stored as LMem heaps. Applications do not create font blocks directly.</DD>
<DT>
LMEM_TYPE_GSTRING</DT><DD>
Whenever a GString is created or loaded, a GString LMem heap is created, and elements are added as chunks. The heap is created automatically by the GString routines; applications should not create GString blocks. (See <A HREF="../../Graphics/Environment/Environment_12.htm#16169">the Graphics Environment chapter</A>.)</DT><P CLASS="WorList">
LMEM_TYPE_DB_ITEMS<BR>
The Virtual Memory mechanism provides routines to create and manage <EM>
database items</EM>
</DL>
, short pieces of data which are dynamically allocated and are saved with the VM file. These items are stored in special database LMem heaps, which are created in special database blocks in the VM file. Applications do not directly allocate DB blocks; rather, they call DB routines, which see to it that the blocks are created. (See <A HREF="../../Memory/Database/index.htm">the Database chapter</A>.)</P><P>
<A NAME="IX_LMF_&ldots;">
 </A>
<A NAME="IX_LocalMemoryFlags">
 </A>
<A NAME="60651">
 </A>
When an LMem heap is allocated, certain flags are passed to indicate properties the heap should have. Some of these flags are passed only for system-created heaps. The flags are stored in a word-length record (<CODE>
LocalMemoryFlags</CODE>
); the record also contains flags indicating the current state of the heap. The <CODE>
LocalMemoryFlags</CODE>
 are listed below:</P>
<DL>
<DT>
LMF_HAS_FLAGS<BR>
Set if the block has a chunk containing only flags. This flag is set for object blocks; it is usually cleared for general LMem heaps.</DD>
<DT>
LMF_IN_RESOURCE</DT><DD>
Set if the block has just been loaded from a resource and has not been changed since being loaded. This flag is set only for object blocks created by the compiler.</DD>
<DT>
LMF_DETACHABLE</DT><DD>
Set if the block is an object block which can be saved to a state file.</DD>
<DT>
LMF_DUPLICATED</DT><DD>
Set if block is an object block created by the <CODE>
ObjDuplicateResource()</CODE>
 routine. This flag should not be set by applications.</DD>
<DT>
LMF_RELOCATED</DT><DD>
Set if all the objects in the block have been relocated. The object system sets this when it has relocated all the objects in the block. </DD>
<DT>
LMF_AUTO_FREE</DT><DD>
This flag is used by several object routines. It indicates that if the block's in-use count drops to zero, the block may be freed. This flag should not be set by applications.</DD>
<DT>
LMF_IN_MEM_ALLOC</DT><DD>
This flag is used in error-checking code to prevent the heap from being validated while a chunk is being allocated. For internal use only--do not modify<EM>
.</EM>
</DD>
<DT>
LMF_IS_VM</DT><DD>
Set if LMem heap is in a VM block and the block should be marked dirty whenever a chunk is marked dirty. This flag is automatically set by the VM code when an LMem heap is created in or attached to a VM file. This flag should not be set by applications.</DD>
<DT>
LMF_NO_HANDLES</DT><DD>
Set if block does not use chunk handles. A block can be set to simulate the C <CODE>
malloc() </CODE>
routine; in this case, chunks are not relocated after being created, so chunk handles are not needed. Ordinarily, these blocks are created by the <CODE>
malloc()</CODE>
 routine, not by applications. (See the discussion of <CODE>
malloc()</CODE>
 in <A HREF="../../Memory/Heap/Memory_e.htm">the Memory Management chapter</A>.)</DT><P CLASS="WorList">
LMF_NO_ENLARGE<BR>
Indicates that the local-memory routines should not enlarge this block to fulfill chunk requests. This guarantees that the block will not be moved by a chunk allocation request; however, it makes these requests more likely to fail.</P>
<DT>
LMF_RETURN_ERRORS<BR>
Set if local memory routines should return errors when allocation requests cannot be fulfilled. If the flag is not set, allocation routines will fatal-error if they cannot comply with requests. This flag is generally clear for expandable LMem blocks, since many system routines (such as <CODE>
ObjInstantiate()</CODE>
) are optimized in such a way that they cannot deal with LMem allocation errors.</DD>
<DT>
LMF_DEATH_COUNT</DT><DD>
This field occupies the least significant three bits of the flag field. It means nothing if the value is zero. If it is non-zero, it indicates the number of remove-block messages left which must hit <CODE>
BlockDeathCommon</CODE>
 before it will free the block. This flag is used some error-checking code in the kernel.</DD>
<DT>
STD_LMEM_OBJECT_FLAGS</DT><DD>
This is a constant which combines the LMF_HAS_FLAGS and LMF_RELOCATED flags. These flags should be set for all object blocks.</DD>
</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="LMem_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="LMem_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Chunks and Chunk Handles</A> 
<!-- to next --> | <A HREF="LMem_6.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Using Local Memory Heaps</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
