<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Memory_c.htm,v 1.1 97/06/02 15:51:50 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Retrieving Block Information</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Memory Management</A>: 3.7 <A HREF="Memory_5.htm">Using Global Memory</A>: 
Retrieving Block Information</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Memory_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.6 Data-Access Synchronization</A> 
<!-- to next --> | <A HREF="Memory_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.8 The Reference Count</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MemDeref(), MemPtrToHandle(), MemGetInfo(), MemOwner(), MemModifyFlags(), HandleModifyOwner(), MemModifyOtherInfo()</PRE>
<P>
GEOS offers several routines to retrieve and change information about a block. Each of these routines has a full entry in the Routine Reference Book.</P>
<P>
<CODE>
MemDeref()</CODE>
<A NAME="IX_MemDeref()">
 </A>
<A NAME="91285">
 </A>
 is passed the handle of a block on the global heap; it returns the block's address on the global heap. As noted above, this routine is useful when you allocate a fixed or locked block. If the block has been discarded, it returns a null pointer. </P>
<P>
<CODE>
MemPtrToHandle()</CODE>
<A NAME="IX_MemPtrToHandle()">
 </A>
, passed a pointer to a locked block, finds the handle of that memory block.</P>
<P>
<CODE>
MemGetInfo()</CODE>
<A NAME="IX_MemGetInfoType">
 </A>
<A NAME="IX_MGIT_&ldots;">
 </A>
<A NAME="IX_MGIT_&ldots;">
 </A>
<A NAME="IX_MemGetInfo()">
 </A>
<A NAME="19383">
 </A>
 is a general-purpose block information routine. It is passed two arguments: the handle of the block, and a member of the <CODE>
MemGetInfoType</CODE>
 enumerated type. The return value is always word-length; however, its significance depends on the <CODE>
MemGetInfoType</CODE>
 value passed:</P>
<DL>
<DT>
MGIT_SIZE</DT><DD>Returns the size of the memory block (in bytes).</DD>
<DT>
MGIT_FLAGS_AND_LOCK_COUNT</DT><DD>
Upper byte is the number of locks on the block; lower eight bits are the block's <CODE>
HeapFlags</CODE>
 record (see <A HREF="Memory_4.htm#85480"> HF_FIXED The block will not move from its place in the global heap until it is freed. If this flag is off, the memory manager may move the block when it is unlocked. If it is on, the block may not be locked. This flag cannot be changed after the</A>
).</DD>
<DT>
MGIT_OWNER_OR_VM_FILE_HANDLE</DT><DD>
If the block is attached to a GEOS Virtual Memory file, <CODE>
MemGetInfo()</CODE>
 returns the VM file handle. Otherwise, it returns the <CODE>
GeodeHandle</CODE>
 of the owning thread.</DD>
<DT>
</DT><DD><A NAME="IX_MemOwner()">
 </A>
The <CODE>
MemOwner()</CODE>
 routine also returns the owning geode of the passed block; however, if the block belongs to a VM file, the file's owner will be returned instead of the file handle.</DD>
<DT>
MGIT_ADDRESS</DT><DD>
Returns the block's segment address, if it is on the global heap; otherwise, it returns zero. If the block is resized or is not locked, the address may change without warning. Note that the segment address is returned as a word, not as a pointer; this is of limited utility in C.</DD>
<DT>
MGIT_OTHER_INFO</DT><DD>
Returns the <CODE>
HM_otherInfo</CODE>
 word from the block's handle table entry. The usage of this word varies depending on the block's nature; for example, object blocks store the handle of their burden thread here.</DD>
<DT>
MGIT_EXEC_THREAD</DT><DD>
This is useful for object blocks only. Returns the handle of the thread executing methods for objects in the block.</DD>
</DL>
<P>
<CODE>
MemModifyFlags()</CODE>
<A NAME="IX_MemModifyFlags()">
 </A>
<A NAME="60044">
 </A>
 is used to change a block's <CODE>
HeapFlags</CODE>
 record. It takes three arguments: The handle of the block, the <CODE>
HeapFlags</CODE>
 to turn on, and the <CODE>
HeapFlags</CODE>
 to clear. It returns nothing. Not all <CODE>
HeapFlags</CODE>
 can be changed after a block is created; only HF_SHARABLE, HF_DISCARDABLE, HF_SWAPABLE, and HF_LMEM can be so changed. </P>
<P>
<CODE>
HandleModifyOwner()</CODE>
<A NAME="IX_HandleModifyOwner()">
 </A>
 changes the geode owning a given block. It takes two arguments, namely the handle of the block and the handle of the new owner. It returns nothing. If the block is not sharable, only the owner of a block can change the block's owner.</P>
<P>
<CODE>
MemModifyOtherInfo()</CODE>
<A NAME="IX_MemModifyOtherInfo()">
 </A>
 changes the <CODE>
HM_otherInfo</CODE>
 word of the block's handle table entry. It takes two arguments: The handle of the block, and one word of data to store in the <CODE>
HM_otherInfo</CODE>
 field. It returns nothing.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Memory_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.6 Data-Access Synchronization</A> 
<!-- to next --> | <A HREF="Memory_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.8 The Reference Count</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
