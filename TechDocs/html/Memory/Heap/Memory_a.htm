<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Memory_a.htm,v 1.1 97/06/02 15:51:41 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Accessing Data: An Example</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Memory Management</A>: 3.5 <A HREF="Memory_5.htm">Using Global Memory</A>: 
Accessing Data: An Example</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Memory_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.4 Accessing Data in a Block</A> 
<!-- to next --> | <A HREF="Memory_b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.6 Data-Access Synchronization</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A HREF="Memory_a.htm#82700"> Allocating and Using a Block</A>
 shows how to allocate a block, lock it, access a word of data in the block, and unlock the block. This example shows the basic principles of using blocks.</P>
<P CLASS="figTitle">
Code Display 8-1 <A NAME="82700">
 </A>
Allocating and Using a Block</P>
<PRE>/*
 * Variable Declarations
 */</PRE>
<PRE>MemHandle 	myBlockHandle;
char 	charArray[50], *blockBaseAddress;</PRE>
<PRE>/* First, we allocate a block of the desired size. Since we'll use the block right
 * away, we allocate the block already locked.
 */
myBlockhandle = MemAlloc(					/* MemAlloc returns the block handle */
			2048,		/* Allocate 2K of memory */
			HF_SWAPABLE,		/* HeapFlags: Make block swapable */
			HAF_ZERO_INIT|HAF_LOCK);			/* HeapAllocFlags: Initialize
						 * the memory to zero &amp; lock it */
</PRE>
<PRE>/* The block is already locked on the global heap. However, we do not have the
 * block's address; we just have its handle. Therefore, we need to call a routine
 * to dereference the handle. */
blockBaseAddress = (char *) MemDeref(myBlockHandle);						/* Returns a ptr to base of
						 * block */</PRE>
<PRE>/* Enter some data in the block */
strcpy(blockBaseAddress,
	&quot;I can resist anything except temptation.\n   --Wilde&quot;</PRE>
<PRE>/* We're done with the block for the moment, so we unlock it. */
MemUnlock(myBlockHandle); /* blockBaseAddress is now meaningless */</PRE>
<PRE>/* Here we do some other stuff . . . */</PRE>
<PRE>/* Now we want to use the block again. First we have to lock it. */
blockBaseAddress = (byte *) MemLock(myBlockHandle);						/* Returns a ptr to locked 
						 * block */</PRE>
<PRE>/* Read a string from the block: */
strcpy(charArray, blockBaseAddress);</PRE>
<PRE>/* We're done with the block, so we free it. Note that we can free the block
 * without unlocking it first.
 */
MemFree(myBlockhandle); /* myBlockHandle is now meaningless */</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Memory_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.4 Accessing Data in a Block</A> 
<!-- to next --> | <A HREF="Memory_b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.6 Data-Access Synchronization</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
