<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Memory_e.htm,v 1.1 97/06/02 15:51:58 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> malloc()</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Memory Management</A>: 4 
<A NAME="96024">
 </A>
malloc()</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Using Global Memory</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>malloc(), calloc(), realloc(), free()</PRE>
<P>
GEOS provides support for the Standard C memory allocation routines. However, support is limited by the nature of the 80x86 and the GEOS memory management system.</P>
<P>
A geode can request memory with <CODE>
malloc()</CODE>
 or <CODE>
calloc()</CODE>
. When a geode does this for the first time, the memory manager will allocate a fixed block and return a pointer to within the fixed block. (This block is actually a special kind of LMem heap.) Because the memory is in a fixed block, the geode does not need to access it with handles; it can use the pointer directly. If the block fills up, the manager can allocate another fixed block for these requests.</P>
<P>
However, there are some problems with this. The main problem is that fixed blocks degrade the memory manager's performance. The more a geode uses <CODE>
malloc()</CODE>
, the more memory is tied up in fixed blocks. And, as always, contiguous memory is limited to 64K by the 80x86 segmented addressing scheme.</P>
<P>
Most of the time, geodes should use other types of memory allocation. For allocating small chunks of data, applications should use <CODE>
LMem</CODE>
 routines or techniques built on top of them (database items, chunk arrays, etc.); for larger chunks of memory, applications should use memory manager routines or HugeArrays. However, to help writers port C code to GEOS, <CODE>
malloc()</CODE>
 and its relatives are available.</P>
<P>
To get a stretch of contiguous memory, use the routines <CODE>
malloc()</CODE>
 or <CODE>
calloc()</CODE>
. <CODE>
malloc()</CODE>
<A NAME="IX_malloc()">
 </A>
 takes one argument, a size in bytes; it returns a void pointer to that many bytes of fixed memory.<A NAME="IX_calloc()">
 </A>
 <CODE>
calloc()</CODE>
 takes two arguments: a number of structures, and the size of each such structure. It allocates enough memory for that many structures and returns a void pointer to the memory. Both <CODE>
malloc()</CODE>
 and <CODE>
calloc()</CODE>
 zero-initialize the memory when they allocate it.</P>
<P>
If a routine wants to change the size of memory allocated with <CODE>
malloc()</CODE>
 or <CODE>
calloc()</CODE>
 it can use <CODE>
realloc()</CODE>
. <A NAME="IX_realloc()">
 </A>
<CODE>
realloc()</CODE>
 takes two arguments: a pointer to a piece of memory allocated with <CODE>
malloc()</CODE>
 or <CODE>
calloc()</CODE>
, and a new size in bytes. It returns a void pointer to the memory, which may have been moved to satisfy the request. If it could not satisfy the request, it returns a null pointer, and the original memory is untouched. Note that the pointer you pass <CODE>
realloc()</CODE>
 <EM>
must</EM>
 be the same pointer that was returned by <CODE>
malloc/calloc</CODE>
; if (for example) you allocate 100 bytes and are returned 008Bh:30h, and try to resize it by passing 008Bh:40h to <CODE>
realloc()</CODE>
, inappropriate memory will be affected, and the results are undefined.</P>
<P>
If you decrease the size of a memory section with <CODE>
realloc()</CODE>
, the routine is guaranteed to succeed. If you increase the size, it may fail; if it does succeed, the new memory will <EM>
not</EM>
 be zero-initialized. Reallocating a block down to zero memory is the same as freeing it. You can pass a null pointer to <CODE>
realloc()</CODE>
 along with the size; this makes <CODE>
realloc()</CODE>
 function like <CODE>
malloc()</CODE>
. </P>
<P>
When you are done with memory allocated by <CODE>
malloc</CODE>
-family routines, you should call <CODE>
free()</CODE>
 to free the memory for other <CODE>
malloc()</CODE>
 calls. As with <CODE>
realloc()</CODE>
, you must pass the same pointer that you were originally given.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Memory_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Using Global Memory</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
