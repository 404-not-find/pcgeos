<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: VM_16.htm,v 1.1 97/06/02 15:53:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> VM Chain Utilities</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Virtual Memory</A>: 4.2 <A HREF="VM_14.htm">VM Chains</A>: 
VM Chain Utilities</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VM_14.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VM_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Structure of a VM Chain</A> 
<!-- to next --> | <A HREF="VM_17.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">5 Huge Arrays</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>VMChainHandle, VMFreeVMChain(), VMCompareVMChains(), VMCopyVMChain(), VMCHAIN_IS_DBITEM(), VMCHAIN_GET_VM_BLOCK(), VMCHAIN_MAKE_FROM_VM_BLOCK()</PRE>
<P>
Several utilities are provided for working with VM chains. They allow you to compare, free, or copy entire VM chains with a single command.</P>
<P>
For convenience, all of these routines can work on either a VM chain or a database item. This is useful, because sometimes you will want to use the utility on a data structure without knowing in advance how large it will be. This way, if there is a small amount of data, you can store it in a DB item; if there is a lot, you can store it in a VM chain of any length. Whichever way you store the data, you can use the same chain utilities to manipulate it.</P>
<P>
The routines all take, as an argument, a <CODE>
VMChain</CODE>
 which is simply a dword. If the low word is null, the <CODE>
VMChain</CODE>
 contains the VM block handle to a VM chain. If the low word is not null, the <CODE>
VMChain</CODE>
 contains a <CODE>
DBGroupAndItem</CODE>
. Note that none of the blocks in the VM chain need be locked when the routine is called; the routine will lock the blocks as necessary, and unlock them when finished. Similarly, a DB item need not be locked before being passed to one of these routines. However, the VM file containing the structure must be open.</P>
<P>
<A NAME="IX_VMFreeVMChain()">
 </A>
If you want to free an entire VM chain at once, call the routine <CODE>
VMFreeVMChain()</CODE>
. This routine takes two arguments, namely the VM file handle and a <CODE>
VMChain</CODE>
. It frees every block in the VM chain, and returns nothing.</P>
<P>
<A NAME="IX_VMCompareVMChains()">
 </A>
You can compare two different VM chains, whether in the same or in different files, by calling <CODE>
VMCompareVMChains()</CODE>
. This Boolean routine takes four arguments, namely the handles of the two files (which may be the same) and the <CODE>
VMChain</CODE>
s (<EM>
i.e.</EM>
, the block handles to the two chains). The geode must have both files open when it calls this routine. The routine returns <EM>
true</EM>
 (<EM>
i.e.</EM>
, non-zero) if the two chains are identical (<EM>
i.e.</EM>
, the trees have the same structures and all data bytes are identical). Note that if the chains contain tree blocks which are identical except in the order of their links, the chains will not be considered identical and the routine will return <EM>
false</EM>
 (<EM>
i.e.</EM>
, zero).</P>
<P>
<A NAME="IX_VMCopyVMChain()">
 </A>
You can make a copy of a VM chain with the routine <CODE>
VMCopyVMChain()</CODE>
. This routine copies the entire chain to a specified file, which may be the same as the source file. The blocks in the duplicate chain will have the same user ID numbers as the corresponding original blocks. The routine takes three arguments: the handle of the source file, the <CODE>
VMChain</CODE>
 of the source chain or item, and the handle of the destination file. It copies the chain or item and returns the <CODE>
VMChain</CODE>
 of the duplicate structure. As noted, if the low word of the <CODE>
VMChain</CODE>
 is null, the high word will be the VM handle of the head of the chain. The geode must have both files open when it calls this routine.</P>
<P>
Several utilities are provided for working with <CODE>
VMChain</CODE>
 types. They are implemented as preprocessor macros, so they are very fast. The macro VMCHAIN_IS_DBITEM()<A NAME="IX_VMCHAIN_IS_DBITEM() macro">
 </A>
 is passed a <CODE>
VMChain</CODE>
 and returns non-zero if the VMChain identifies a DB item (<EM>
i.e.</EM>
, if the low word is non-zero) or zero if the VMChain identifies a VM chain. The macro VMCHAIN_GET_VM_BLOCK<A NAME="IX_VMCHAIN_GET_VM_BLOCK() macro">
 </A>
() is passed a <CODE>
VMChain</CODE>
 containing the block handle to a VM chain. It returns the high word, <EM>
i.e., </EM>
the chain's VM block handle. <A NAME="IX_VMCHAIN_MAKE_FROM_VM_BLOCK() macro">
 </A>
Finally, the macro VMCHAIN_MAKE_FROM_VM_BLOCK() takes a <CODE>
VMBlockHandle</CODE>
 value and casts it to type <CODE>
VMChain</CODE>
.<A NAME="marker=377662">
 </A>
</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VM_14.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VM_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Structure of a VM Chain</A> 
<!-- to next --> | <A HREF="VM_17.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">5 Huge Arrays</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
