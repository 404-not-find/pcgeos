<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: VM_b.htm,v 1.1 97/06/02 15:54:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Creating and Freeing Blocks</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Virtual Memory</A>: 3.4 <A HREF="VM_7.htm">Using Virtual Memory</A>: 
<A NAME="97342">
 </A>
Creating and Freeing Blocks</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VM_7.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VM_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.3 Changing VM File Attributes</A> 
<!-- to next --> | <A HREF="VM_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.5 Attaching Memory Blocks</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>VMAlloc(), VMAllocLMem(), VMFree()</PRE>
<P>
Once you have created a VM file, you have to allocate blocks in order to write data to the file. <A NAME="IX_VMAlloc()">
 </A>
The usual way to do this is with <CODE>
VMAlloc()</CODE>
. This routine takes three word-sized arguments:</P>
<UL>
<LI>
The file handle<BR>
This argument is overridden if a default VM file is set.</LI>
<LI>
A user-ID number<BR>
This can be any word of data the application wants to associate with the VM block. The application can locate blocks with a given user ID by using <CODE>
VMFind()</CODE>
 (see <A HREF="VM_d.htm#49253"> You can locate VM blocks by their user ID numbers. The routine VMFind() takes three arguments: the VM file handle, a VM block handle, and the user ID for which to look. The routine looks through the block table, starting with the handle after th</A>
).</LI>
<LI>
The number of bytes in the block<BR>
This may be zero, in which case no memory is allocated; a memory block must be specifically attached with <CODE>
VMAttach()</CODE>
 (see <A HREF="VM_c.htm#75170"> Attaching Memory Blocks</A>
).</LI>
</UL>
<P>
<A NAME="IX_VMLock()">
 </A>
The routine returns the handle of the VM block. Before you can use the block, you have to lock it with <CODE>
VMLock()</CODE>
. The block is marked dirty when it is allocated.</P>
<P>
There is a routine to allocate a block and initialize it as an LMem heap. This is useful if you are storing object blocks in a VM file. The routine, <CODE>
VMAllocLMem()</CODE>
<A NAME="IX_VMAllocLMem()">
 </A>
, takes three arguments:</P>
<UL>
<LI>
The VM file handle<BR>
This is overridden if a default VM file is set.</LI>
<LI>
A member of the <CODE>
LMemTypes</CODE>
 enumerated type<BR>
This specifies what kind of heap the LMem heap will be. (See <A HREF="../../Memory/LMem/LMem_5.htm#13234">the Local Memory chapter</A>.)</LI><LI>
The size of the block header<BR>
Use this if you want to store extra data in the LMem block header. To use the standard LMem header, pass an argument of zero. (See <A HREF="../../Memory/LMem/LMem_7.htm#62735">the Local Memory chapter</A>.)</LI></UL>
<P>
The routine creates a VM block and allocates a global memory block to go with it. It initializes the heap in the global block and marks the block as dirty. The LMem heap will begin with two LMem handles and a 64-byte heap; this will grow as necessary. The VM block will have a user ID of zero; you can change this if you wish. The routine returns the handle of the new VM block. </P>
<P>
There are two other ways to create LMem blocks in a VM file; these ways give you more control of the block's initialization. You can allocate a VM block normally, lock that block, then get the handle of the associated memory block and initialize an LMem heap in it; or you can allocate an LMem heap normally, and attach that memory block to the VM file using <CODE>
VMAttach()</CODE>
. For more details on LMem heaps, see <A HREF="../../Memory/LMem/index.htm">the Local Memory chapter</A>.</P><P>
To free a VM block, call <CODE>
VMFree()</CODE>
. This routine is passed two arguments: the VM file handle, and the VM block handle. The handle will immediately be freed, even if it is locked. Any associated memory will also be freed. If you want to keep the memory, detach the global memory block from the file (with <CODE>
VMDetach()</CODE>
) before you free the block.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VM_7.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VM_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.3 Changing VM File Attributes</A> 
<!-- to next --> | <A HREF="VM_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.5 Attaching Memory Blocks</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
