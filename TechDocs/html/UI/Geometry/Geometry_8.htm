<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Geometry_8.htm,v 1.2 97/09/05 14:25:26 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Sizing Objects</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Managing UI Geometry</A>: 2.4 <A HREF="Geometry_4.htm">Arranging Your Generic Objects</A>: 
<A NAME="62333">
 </A>
Sizing Objects</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.3 Justifying and Centering Children</A> 
<!-- to next --> | <A HREF="Geometry_9.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.5 Outlining the Composite</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Sizing can occur in essentially one of two ways: First, the composite can size itself based on its children. Second, the children can size themselves based on their parent. You can specify additional sizing restrictions in the form of minimum, maximum, and fixed sizes.</P>

<H2 CLASS="HeadingC">
Sizing the Parent</H2>
<PRE>HINT_NO_TALLER_THAN_CHILDREN_REQUIRE, HINT_NO_WIDER_THAN_CHILDREN_REQUIRE</PRE>
<P>
<A NAME="IX_HINT_NO_WIDER_THAN_CHILDREN_REQUIRE">
 </A>
<A NAME="IX_HINT_NO_TALLER_THAN_CHILDREN_REQUIRE">
 </A>
A composite can size itself to be only as large as its children require. This may be applied to your primary window or to other organizational composites to keep them from growing into any extra space in their parents. You can set the width and height restrictions independently; to set them both, use both hints in the composite.</P>


<H2 CLASS="HeadingC">
Sizing the Children</H2>
<PRE>HINT_EXPAND_HEIGHT_TO_FIT_PARENT, HINT_EXPAND_WIDTH_TO_FIT_PARENT, HINT_DIVIDE_WIDTH_EQUALLY, HINT_DIVIDE_HEIGHT_EQUALLY</PRE>
<P>
<A NAME="IX_HINT_EXPAND_HEIGHT_TO_FIT_PARENT">
 </A>
<A NAME="IX_HINT_EXPAND_WIDTH_TO_FIT_PARENT">
 </A>
Often a composite will have a set size and its children will want to expand themselves to take up all the available space. For example, the interaction with the Apply, Reset, and Cancel triggers in the dialog box (shown in the figure below) must have <CODE>
HINT_EXPAND_WIDTH_TO_FIT_PARENT</CODE>
 set for it to expand itself to the far right edge of the dialog box. Another potential situation is a GenView within a GenPrimary; when the user resizes the primary, the view should probably expand itself to take up any extra space in the window.
<IMG SRC="Geometry_8_expandToFit.gif">

</P>
<P>
A third example would be a series of triggers that want to be the same width in a vertical composite. This appears in many menus; each of the triggers expands itself to the width of the parent; the parent composite sizes its width to the largest of the triggers. An example taken from the complex dialog box is shown in the figure above. Code for this example is shown in <A HREF="Geometry_8.htm#17068"> Using Full Justification of Children</A>
.</P>
<P>
Some more complex examples of expanding a group and justifying the elements are shown in the figure below. All of the examples use a justification hint combined with an expand-to-fit hint.
<IMG SRC="Geometry_8_expandAndJustify.gif">

</P>
<P CLASS="figTitle">
Code Display 12-3 <A NAME="17068">
 </A>
Using Full Justification of Children</P>
<PRE>/* This code display shows the basic Goc code that will get the configuration
 * shown in the figure above. Other attributes are left out of the
 * definitions of the objects. This code display is supplemental to
 * <A HREF="Geometry_6.htm#83225"> A Complex Dialog Box</A>; most comments have been removed. */</PRE>
<PRE>@object GenInteractionClass TopInteraction = {
    GI_comp = @ParaInteraction, @ReplyInteraction;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenInteractionClass ParaInteraction = {
    GI_comp = @FontInteraction, @JustInteraction, @StyleInteraction;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>@object GenInteractionClass ReplyInteraction = {
    GI_comp = @ApplyTrigger, @ResetTrigger, @CancelTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
    HINT_INCLUDE_ENDS_IN_CHILD_SPACING;
}</PRE>
<PRE>@object GenInteractionClass FontInteraction = {
    GI_comp = @RomanTrigger, @SansTrigger, @MonoTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenInteractionClass JustInteraction = {
    GI_comp = @LeftTrigger, @RightTrigger, @CenterTrigger, @FullTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenInteractionClass StyleInteraction = {
    GI_comp = @PlainTrigger, @BoldTrigger, @SuperTrigger, @SubTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/* Triggers. All the upper triggers are essentially the same. Each is named as it
 * appears in the GI_comp fields above, and each has the corresponding
 * GI_visMoniker field. The RomanTrigger object is shown as an example. */</PRE>
<PRE>@object GenTriggerClass RomanTrigger = {
    GI_visMoniker = &quot;Roman&quot;;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}</PRE>
<PRE>/* The Apply, Reset, and Cancel triggers do not have the hint shown above. */
@object GenTriggerClass ApplyTrigger = {
    GI_visMoniker = &quot;Apply&quot;;
}</PRE>
<P>
HINT_DIVIDE_WIDTH_EQUALLY<A NAME="IX_HINT_DIVIDE_HEIGHT_EQUALLY">
 </A>
<A NAME="IX_HINT_DIVIDE_WIDTH_EQUALLY">
 </A>
 and HINT_DIVIDE_HEIGHT_EQUALLY instruct a composite object to divide up its space along the affected dimension among the usable children. This hint can only suggest sizes for the children. The children themselves will decide if they can expand or contract to fit the requested space. (In general, children will not contract to fit a requested size, but they may expand.) Note: these hints will not work within GenValue objects; if you wish to use them on such an object, place them within a dummy GenInteraction object and use these hints on that object.</P>
<P>
Typically, these hints work well in conjunction with HINT_EXPAND_WIDTH_TO_FIT_PARENT and HINT_EXPAND_HEIGHT_TO_FIT_PARENT. If these hints are not also in place (on a GenInteraction, for example) the division of width and/or height may be based on the children's default size; i.e., the parent will size itself based on total size of the children and then attempt to divide up its children's space, rather than the maximum allotted size for the parent, which is probably not desired.</P>


<H2 CLASS="HeadingC">
Maximum, Minimum, Fixed, and Initial Sizes</H2>
<PRE>HINT_INITIAL_SIZE, HINT_MAXIMINUM_SIZE, HINT_MINIMUM_SIZE, HINT_FIXED_SIZE</PRE>
<P>
If you know certain sizing restrictions for window or interaction objects, you can set them with the following four hints. Each takes a parameter that details the appropriate height and width in points. The parameters are described for the hints.</P>
<DL>
<DT>
<CODE>
HINT_INITIAL_SIZE</DT><DD>
</CODE>
<A NAME="IX_HINT_INITIAL_SIZE">
 </A>
This hint sets the initial size of the object, if allowed. Other sizing restrictions may override this hint (such as the children being too large). This is primarily used with window objects (you will likely never use it for anything other than a GenPrimary, GenDisplay, or GenView), and it is effective only for when the object is first displayed. This hint takes an argument of type <CODE>
CompSizeHintArgs</CODE>
, a structure that defines a suggested width, height, and the number of children the object has. </DD>
<DT>
<CODE>
HINT_FIXED_SIZE</DT><DD>
</CODE>
<A NAME="IX_HINT_FIXED_SIZE">
 </A>
This hint sets a fixed size for the object if one is allowed. Other sizing restrictions (such as children growing too large for the window) may override this hint occasionally. This hint can often be used for optimization to inhibit excessive geometry recalculations while on-screen. This hint takes the same parameters as <CODE>
HINT_INITIAL_SIZE</CODE>
, of type <CODE>
CompSizeHintArgs</CODE>
.</DD>
<DT>
<CODE>
HINT_MAXIMUM_SIZE</DT><DD>
</CODE>
<A NAME="IX_HINT_MAXIMUM_SIZE">
 </A>
This hint sets a desired maximum size for the object. Other geometry restrictions may override this hint when necessary. This hint is useful for GenText and GenView objects. It takes the same parameters as <CODE>
HINT_INITIAL_SIZE</CODE>
, of type <CODE>
CompSizeHintArgs</CODE>
.</DD>
<DT>
<CODE>
HINT_MINIMUM_SIZE</DT><DD>
</CODE>
<A NAME="IX_HINT_MINIMUM_SIZE">
 </A>
This hint sets a desired minimum size for the object. Other geometry restrictions may override this hint when necessary. The hint takes the same parameters as <CODE>
HINT_INITIAL_SIZE</CODE>
, of type <CODE>
CompSizeHintArgs</CODE>
.</DD>
</DL>
<P>
The following examples show different ways to set the initial size of an object. The third argument of the hint is the number of children in a particular line of a composite, when the composite is set up to wrap its children.</P>
<P>
This example sets the initial size of the composite (probably a GenPrimary) to be half the screen's height and half the screen's width.</P>
<PRE>HINT_INITIAL_SIZE = {
	SST_PCT_OF_FIELD_WIDTH | PCT_50,
	SST_PCT_OF_FIELD_HEIGHT | PCT_50,
	0 };</PRE>
<P>
This example sets the size of the composite to be 100 pixels high and 200 pixels wide.</P>
<PRE>HINT_FIXED_SIZE = {
	SST_PIXELS | 200,
	SST_PIXELS | 100,
	0 };</PRE>
<P>
This example sets the composite's minimum size to be 10 average characters wide and 20 percent of the screen height tall.</P>
<PRE>HINT_MINIMUM_SIZE = {
	SST_AVG_CHAR_WIDTHS | 10,
	SST_PCT_OF_FIELD_HEIGHT | PCT_20,
	0 };</PRE>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.3 Justifying and Centering Children</A> 
<!-- to next --> | <A HREF="Geometry_9.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.5 Outlining the Composite</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
