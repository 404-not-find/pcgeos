<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Geometry_6.htm,v 1.2 97/09/05 14:25:11 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Orienting Children</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Managing UI Geometry</A>: 2.2 <A HREF="Geometry_4.htm">Arranging Your Generic Objects</A>: 
Orienting Children</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 General Geometry Rules</A> 
<!-- to next --> | <A HREF="Geometry_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 Justifying and Centering Children</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>HINT_ORIENT_CHILDREN_HORIZONTALLY, HINT_ORIENT_CHILDREN_VERTICALLY, HINT_ORIENT_CHILDREN_ALONG_LARGER_DIMENSION, HINT_SAME_ORIENTATION_AS_PARENT</PRE>
<P>
<A NAME="IX_HINT_ORIENT_CHILDREN_VERTICALLY">
 </A>
<A NAME="IX_HINT_ORIENT_CHILDREN_HORIZONTALLY">
 </A>
The two hints <CODE>
HINT_ORIENT_CHILDREN_HORIZONTALLY</CODE>
 and <CODE>
HINT_ORIENT_CHILDREN_VERTICALLY</CODE>
, when used in a composite object, determine the orientation of the composite's children. A composite object can orient its children either horizontally or vertically. The geometry manager will determine the combined size of the children and any margins or spacing set up (none by default) and will size the composite to the minimum required by its children.</P>
<P>
Children oriented horizontally will typically be top-justified, and children oriented vertically will be left-justified. (This is default behavior changeable either with the use of hints or by the specific UI.) The vertical composite will size to the width of the widest child; the horizontal composite will size to the height of the tallest child.
<IMG SRC="Geometry_6_orient.gif">

</P>
<P CLASS="figTitle">
Code Display 12-1 Orienting a Composite</P>
<PRE>	/* Composite oriented horizontally */
@object GenInteractionClass MyInteraction = {
    GI_comp = @ApplyTrigger, @ResetTrigger, @CancelTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>	/* Composite oriented vertically */
@object GenInteractionClass MyOtherInteraction = {
    GI_comp = @ApplyTrigger, @ResetTrigger, @CancelTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<P>
A large example of a complex dialog box is shown in the figure below. This dialog box uses nested GenInteraction objects to achieve a complex grouping of children. Using the many justification, spacing, and orientation hints described throughout the chapter, you can change and fine-tune the appearance of the dialog box. The code that implements this dialog box is shown in <A HREF="Geometry_6.htm#83225"> A Complex Dialog Box</A>
.
<IMG SRC="Geometry_6_complexDialog.gif">

</P>
<P>
Two other hints may be useful for arranging children, especially in toolboxes. These two hints are not shown in the examples, though they are used prominently with tool groups.</P>
<P>
<CODE>
HINT_SAME_ORIENTATION_AS_PARENT</CODE>
<A NAME="IX_HINT_SAME_ORIENTATION_AS_PARENT">
 </A>
 is used by one windowed object (GenInteraction) when it should orient its children in the same way its parent does. This, too, is useful for toolboxes because you can set an orientation in the toolbox, then set <CODE>
HINT_SAME_ORIENTATION_AS_PARENT</CODE>
 in the tool group.</P>
<P>
<CODE>
HINT_ORIENT_CHILDREN_ALONG_LARGER_DIMENSION</CODE>
<A NAME="IX_HINT_ORIENT_CHILDREN_ALONG_LARGER_DIMENSION">
 </A>
 allows you to orient a composite's children along the screen's larger dimension. The hint will work like <CODE>
HINT_ORIENT_CHILDREN_HORIZONTALLY</CODE>
 if the screen is wider than it is tall; it will work like <CODE>
HINT_ORIENT_CHILDREN_VERTICALLY</CODE>
 if the screen is taller than it is wide.</P>
<P CLASS="figTitle">
Code Display 12-2 <A NAME="83225">
 </A>
A Complex Dialog Box</P>
<PRE>/* This code display shows the basic Goc code that will get the configuration
 * shown in the above figure. */</PRE>
<PRE>/* The topmost interaction. It groups the two large interactions vertically. */
@object GenInteractionClass TopInteraction = {
    GI_comp = @ParaInteraction, @ReplyInteraction;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/* The top of the two large interactions. It groups the three smaller interactions
 * on the top, horizontally. */
@object GenInteractionClass ParaInteraction = {
    GI_comp = @FontInteraction, @JustInteraction, @StyleInteraction;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>/* The interaction containing the Apply, Reset, and Cancel triggers. The
 * triggers are oriented horizontally. */
@object GenInteractionClass ReplyInteraction = {
    GI_comp = @ApplyTrigger, @ResetTrigger, @CancelTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>/* The three vertically-oriented interactions at the top are similar. Each
 * contains several triggers. All three are defined below. */
@object GenInteractionClass FontInteraction = {
    GI_comp = @RomanTrigger, @SansTrigger, @MonoTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenInteractionClass JustInteraction = {
    GI_comp = @LeftTrigger, @RightTrigger, @CenterTrigger, @FullTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenInteractionClass StyleInteraction = {
    GI_comp = @PlainTrigger, @BoldTrigger, @SuperTrigger, @SubTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/* Triggers. All the triggers are essentially the same. Each is named as it
 * appears in the GI_comp fields above, and each has the corresponding
 * GI_visMoniker field. The RomanTrigger object is shown as an example. */</PRE>
<PRE>@object GenTriggerClass RomanTrigger = {
    GI_visMoniker = &quot;Roman&quot;;
}</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 General Geometry Rules</A> 
<!-- to next --> | <A HREF="Geometry_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 Justifying and Centering Children</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
