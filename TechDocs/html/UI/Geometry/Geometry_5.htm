<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Geometry_5.htm,v 1.1 97/06/02 16:33:11 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> General Geometry Rules</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Managing UI Geometry</A>: 2.1 <A HREF="Geometry_4.htm">Arranging Your Generic Objects</A>: 
General Geometry Rules</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 Arranging Your Generic Objects</A> 
<!-- to next --> | <A HREF="Geometry_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 Orienting Children</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
You may feel at first that the use of generic UI components limits your control over the UI of your application. Actually, just the opposite is true: Your application becomes immediately available at all supported video resolutions in all available specific UIs. Additionally, you can concentrate on more important issues of your application; the generic UI objects take care of a tremendous amount of the work in positioning and displaying the user interface.</P>
<P>
To determine your generic UI tree, you must remember that UI geometry is determined by three things: First and foremost, the overall structure of the UI is governed by the structure and organization of the generic object tree. For example, if GenTriggers A, B, and C are designated as children of a dialog box, they will likely be ordered in the same order they're listed in the dialog's <CODE>
GI_comp</CODE>
 field.</P>
<P>
Second, an object's attributes can determine its implementation. For example, the <CODE>
GIGI_visibility</CODE>
 field of a GenInteraction can determine whether the interaction is implemented as a dialog box, a menu, or a grouping object. The attributes of a generic object determine the basic functionality of the object; that is, even though a menu might be implemented differently in different specific UIs, the functionality of a menu will be implemented in the object. The manner of display of an object is based on its functionality. In this way, the attributes of a generic object take precedence over hints.</P>
<P>
Third, an object's behavior can be fine-tuned through the use of hints. Hints may or may not be implemented for each object that has them, and they control less strictly how the object works.</P>

<H2 CLASS="HeadingC">
Generic Tree Structure</H2>
<P>
As stated above, the structure of your application's generic object tree determines how the generic UI objects will be organized. A simple example of a generic tree including a menu, a dialog box, and a GenView can be found in <A HREF="../../Intro/HelloWorld/index.htm">the Hello World chapter</A>.</P>

<H2 CLASS="HeadingC">
How Hints Work</H2>
<P>
Nearly all geometry of generic UI objects is determined by hints. You can position, size, and limit generic objects with different hints. All these hints are defined in <CODE>
GenClass</CODE>
; inheritance allows all generic objects to have them, though not all hints are applicable to all generic objects.</P>
<P>
Hints are described in detail in <A HREF="../../SysObjects/Gen/index.htm">the GenClass chapter</A>, but the basics are reviewed here for convenience. Hints are implemented as variable data entries; each hint is a different variable-data type. Hints therefore take up instance data space in an object only when the object has that hint.</P><P>
As stated earlier, not all hints are appropriate for all objects. For example, <CODE>
HINT_CUSTOM_CHILD_SPACING</CODE>
 is probably not useful when applied to a GenTrigger object because a GenTrigger can have no children. Hints, by definition, are also not guaranteed to be supported by all specific UI libraries. For example, a specific UI might require all elements of a dialog box to be oriented horizontally; in this case, <CODE>
HINT_ORIENT_CHILDREN_VERTICALLY</CODE>
 might be useful but might not be heeded by the specific UI.</P>
<P>
Because geometry management of generic objects can be confusing at times, this chapter follows a series of examples accompanied with diagrams. For the most part, you should be able to &quot;plug and play&quot; the examples in the following sections.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Geometry_4.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">2 Arranging Your Generic Objects</A> 
<!-- to next --> | <A HREF="Geometry_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.2 Orienting Children</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
