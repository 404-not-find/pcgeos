<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: VisComp_a.htm,v 1.2 97/06/09 14:34:09 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Managing Geometry</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">VisComp</A>: 3.1 <A HREF="VisComp_9.htm">Using VisCompClass</A>: 
<A NAME="13351">
 </A>
Managing Geometry</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VisComp_9.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VisComp_9.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Using VisCompClass</A> 
<!-- to next --> | <A HREF="VisComp_b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Managing Graphic Windows</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MSG_VIS_COMP_GET_CHILD_SPACING, MSG_VIS_COMP_GET_MINIMUM_SIZE, MSG_VIS_COMP_GET_MARGINS, MSG_VIS_COMP_GET_WRAP_COUNT</PRE>
<P>
<A NAME="IX_Geometry:with visible objects">
 </A>
A special feature of <CODE>
VisCompClass</CODE>
, and one that can be used in many ways, is its ability to automatically manage its children. By setting various flags in the composite's instance fields, you can have it control its children's sizing and position without additional code in your application.</P>
<P>
Most of the flags you can set in <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
 are explained fully in <A HREF="VisComp_2.htm#55772"> VisCompClass Instance Data</A>
. You should especially be aware that if you do not want to use the geometry management capabilities of <CODE>
VisCompClass</CODE>
, you should set VCGA_CUSTOM_MANAGE_CHILDREN in <CODE>
VCI_geoAttrs</CODE>
.</P>
<P>
In addition to the messages provided in <CODE>
VisClass</CODE>
 for geometry management, <CODE>
VisCompClass</CODE>
 has four that return information about its current geometry. These are necessary because composites may be children of other composites, and therefore they may be managed. These messages are detailed below.</P>
<P>
Most of the issues of geometry management are discussed in <A HREF="UI/VisClass/VisClass_e.htm">the VisClass chapter</A>.</P>
<H4 CLASS="RefETitle">
<A NAME="IX_DWORD_CHILD_SPACING macro">
 </A>
DWORD_CHILD_SPACING</H4>
<PRE CLASS="syntax">word	DWORD_CHILD_SPACING(<EM>val</EM>);
        SpacingAsDWord <EM>val</EM>;</PRE>
<P>
This macro extracts the child spacing from the given <CODE>
SpacingAsDWord</CODE>
 value. Use it with <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_DWORD_WRAP_SPACING macro">
 </A>
DWORD_WRAP_SPACING</H4>
<PRE CLASS="syntax">word	DWORD_WRAP_SPACING(<EM>val</EM>);
        SpacingAsDWord <EM>val</EM>;</PRE>
<P>
This macro extracts the wrap spacing from the given <CODE>
SpacingAsDWord</CODE>
 value. Use it with <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MAKE_SPACING_DWORD macro">
 </A>
MAKE_SPACING_DWORD</H4>
<PRE CLASS="syntax">SpacingAsDWord MAKE_SPACING_DWORD(<EM>child</EM>, <EM>wrap</EM>);
        word	<EM>child</EM>;
        word	<EM>wrap</EM>;</PRE>
<P>
This macro creates a <CODE>
SpacingAsDWord</CODE>
 dword from the two given arguments. The <CODE>
child</CODE>
 argument is the child spacing, and the <CODE>
wrap</CODE>
 argument is the wrap spacing. Use this macro in your handler (if any) for the message <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_VIS_COMP_GET_CHILD_SPACING">
 </A>
MSG_VIS_COMP_GET_CHILD_SPACING</H4>
<PRE CLASS="syntax">SpacingAsDWord MSG_VIS_COMP_GET_CHILD_SPACING();</PRE>
<P>
This message returns the child spacing used by the composite. The high word of the return value is the spacing between lines of wrapped children; the low word is the horizontal spacing between children.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A dword containing the child spacing used by the composite. The dword contains two values: The child spacing--the amount of spacing placed between the composite's children--can be extracted from the return value with the macro <CODE>
DWORD_CHILD_SPACING</CODE>
. The wrap spacing--the amount of space placed between lines of wrapped children--can be extracted from the return value with the macro <CODE>
DWORD_WRAP_SPACING</CODE>
.</P>
<P CLASS="refField">
Interception:	If a composite wants special child or wrap spacing other than the default, it should subclass this message and return the desired values. There is no need to call the superclass in the method.</P>
<P CLASS="refField">
Tips:	In your handler, you can use the macro <CODE>
MAKE_SPACING_DWORD</CODE>
 to form the return value from the two spacing values.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_VIS_COMP_GET_MINIMUM_SIZE">
 </A>
MSG_VIS_COMP_GET_MINIMUM_SIZE</H4>
<PRE CLASS="syntax">SizeAsDWord MSG_VIS_COMP_GET_MINIMUM_SIZE();</PRE>
<P>
This message returns the minimum size of the composite. It is used by the geometry manager if the composite has VCGDA_HAS_MINIMUM_SIZE set. This message does not invalidate or update the object's geometry.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A dword containing the minimum size of the composite. The high word is the width, and the low word is the height. Use the macros <CODE>
DWORD_WIDTH</CODE>
 and <CODE>
DWORD_HEIGHT</CODE>
 to extract the individual values from the <CODE>
SizeAsDWord</CODE>
 structure.</P>
<P CLASS="refField">
Interception:	Any composite that wants a minimum size should subclass this message and return its desired size. There is no need to call the superclass in your handler.</P>
<P CLASS="refField">
Tips:	In your handler, use the macro <CODE>
MAKE_SIZE_DWORD</CODE>
 to create the <CODE>
SizeAsDWord</CODE>
 return value from the width and height. This macro has the same format as <CODE>
MAKE_SPACING_DWORD</CODE>
.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_VIS_COMP_GET_MARGINS">
 </A>
MSG_VIS_COMP_GET_MARGINS</H4>
<PRE CLASS="syntax">void	MSG_VIS_COMP_GET_MARGINS(
        Rectangle *retValue);</PRE>
<P>
This message returns the margins the composite should use when recalculating its child spacing. If you want a special left, top, right, or bottom margin around the composite's children, intercept this message and return the margin(s) in the appropriate field(s) of the <CODE>
Rectangle</CODE>
 structure.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	<CODE>
retValue</CODE>
	A pointer to an empty <CODE>
Rectangle</CODE>
 structure that will be filled with the composite's desired margins.</P>
<P CLASS="refField">
Return:	The pointer to the filled Rectangle structure is preserved. The structure contains the four margins desired by the object outside of its bounds (e.g. if <CODE>
retValue-&gt;R_top</CODE>
 is 100 upon return, the composite is requesting 100 points of extra &quot;margin&quot; spacing below its top bound before its children are placed).</P>
<P CLASS="refField">
Interception:	Any composite that wants extra margin space added to its bounds when geometry is calculated should subclass this message and return its desired margins. There is no need to call the superclass in your handler.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_VIS_COMP_GET_WRAP_COUNT">
 </A>
MSG_VIS_COMP_GET_WRAP_COUNT</H4>
<PRE CLASS="syntax">word	MSG_VIS_COMP_GET_WRAP_COUNT();</PRE>
<P>
This message returns the number of children to be counted before wrapping if the composite has VCGA_WRAP_AFTER_CHILD_COUNT set.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The number of children that will be allowed before the composite wraps additional children to a new line.</P>
<P CLASS="refField">
Interception:	Any composite that wants to wrap after a certain number of children should subclass this message and return the proper number of children. There is no need to call the superclass in your handler<A NAME="marker=7673">
 </A>
.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="VisComp_9.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="VisComp_9.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Using VisCompClass</A> 
<!-- to next --> | <A HREF="VisComp_b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Managing Graphic Windows</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
