<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GenView_8.htm,v 1.1 97/06/02 16:31:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Handling View Messages</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenView</A>: 2.3 <A HREF="GenView_5.htm">Getting Started: View Basics</A>: 
Handling View Messages</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenView_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenView_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Defining the Basic View</A> 
<!-- to next --> | <A HREF="GenView_9.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Basic View Attributes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
After defining the GenView, you must create the method that will handle <CODE>
MSG_META_EXPOSED</CODE>
 sent by the view in order to draw in the view's window. This is absolutely necessary, even if your view is not scrollable; the view will send <CODE>
MSG_META_EXPOSED</CODE>
 when any part of its display window becomes invalid--this includes when the view is first instantiated and its window is first displayed.</P>
<P>
In this simple model, <CODE>
MSG_META_EXPOSED</CODE>
 is the only message your application will need to handle relating to the view. If you are managing large documents, then you may also have to handle a few others pertaining primarily to input. A sample handler for <CODE>
MSG_META_EXPOSED</CODE>
--one you can modify and put in your own code--is shown in <A HREF="GenView_8.htm#98813"> MSG_META_EXPOSED Handler</A>
.</P>
<P>
If you are planning on displaying visible objects in the view (as opposed to having your Process object draw graphics), you should instead pay attention to <CODE>
MSG_VIS_DRAW</CODE>
. This message is defined by <CODE>
VisClass</CODE>
 and is sent by a VisContent object to itself as the default behavior for <CODE>
MSG_META_EXPOSED</CODE>
. For full information on <CODE>
MSG_VIS_DRAW</CODE>
 and visible objects, see <A HREF="../../UI/VisClass/VisClass_d.htm#28950">the VisClass chapter</A>.</P><P CLASS="figTitle">
Code Display 9-2 <A NAME="98813">
 </A>
MSG_META_EXPOSED Handler</P>
<PRE>/* Each time some part of the view window becomes invalid, the view will send a
 * MSG_META_EXPOSED to its content object. When MSG_META_EXPOSED is received,
 * the content must draw the document to a newly-created GState, then pass the
 * GState to the windowing system for drawing to the screen. */</PRE>
<PRE>/* The format of this message is
 * 	void MSG_META_EXPOSED(WindowHandle win);
 * The passed value is the window handle of the view window; it will be used in
 * conjunction with the temporary GState for drawing. */</PRE>
<PRE>@method	MyProcessClass, MSG_META_EXPOSED {
    /* Set up a temporary GState handle variable for our document. */
    GStateHandle tempGState;</PRE>
<PRE>    /* Initialize the GState to the default. */
    tempGState = GrCreateState(win);</PRE>
<PRE>    /* Now start a window update. The routine GrBeginUpdate() notifies the window
     * system that we are in the process of drawing in the region in the window
     * that was invalidated. GrBeginUpdate() allows drawing to be clipped to only
     * the region that was invalidated. */</PRE>
<PRE>    GrBeginUpdate(tempGState);</PRE>
<PRE>    /* Now that we have a GState and have notified the windowing system that we
     * intend to draw, we can draw our document. Here, your method should call
     * whatever routines are appropriate for drawing the entire document.
     * A good hint here relates also to printing: Because printing and drawing to a
     * view are essentially the same operation, you might want to consolidate all
     * your drawing into a single routine that is called by both this method and
     * your printing method. This is what is done here; the routine called
     * MyDrawingRoutine() draws the document we wish displayed. MyDrawingRoutine()
     * will also be called by our printing method with a different GState. */</PRE>
<PRE>    MyDrawingRoutine(tempGState);</PRE>
<PRE>    /* Now that we have finished drawing the document, we must inform the window
     * system that we are done. Additionally, we must now destroy the temporary
     * GState we used to draw the document. This is essential as not destroying
     * gstates causes small locked blocks to remain on the heap, eroding system
     * performance quickly and eventually making the system run out of handles. */</PRE>
<PRE>    GrEndUpdate(tempGState);
    GrDestroyState(tempGState);
}</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GenView_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GenView_7.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Defining the Basic View</A> 
<!-- to next --> | <A HREF="GenView_9.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Basic View Attributes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
