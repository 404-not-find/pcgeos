<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Text_11.htm,v 1.1 97/06/02 16:41:42 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Character Attribute Definitions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">The Text Objects</A>: 3.1 <A HREF="Text_10.htm">The Text Object Library</A>: 
Character Attribute Definitions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_10.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 The Text Object Library</A> 
<!-- to next --> | <A HREF="Text_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Paragraph Attribute Definitions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The text object library provides a multitude of ways to shape the appearance of individual characters. Each character within a text object may even exhibit its own individual attributes, if the object is defined to use multiple character attributes. The definitions within this section show the full range of possibilities for character attributes.</P>

<H2 CLASS="HeadingC">
The VisTextCharAttr Structure</H2>
<P>
<A NAME="IX_VisTextCharAttr">
 </A>
The <CODE>
VisTextCharAttr</CODE>
 structure provides a great variety of attributes for characters within text objects. Many of the <CODE>
VisTextCharAttr</CODE>
 fields use graphics structures to tailor the appearance of individual characters within the text object. You may wish to review <A HREF="../../Graphics/Environment/index.htm">the Graphics Environment chapter</A> to discover the full features of this structure.</P>
<P CLASS="figTitle">
Code Display 10-1 The VisTextCharAttr Structure</P>
<PRE>typedef struct {
    StyleSheetElementHeader				VTCA_meta;
    FontID				VTCA_fontID;
    WBFixed				VTCA_pointSize;
    TextStyle				VTCA_textStyles;
    ColorQuad				VTCA_color;
    sword				VTCA_trackKerning;
    byte				VTCA_fontWeight;
    byte				VTCA_fontWidth;
    VisTextExtendedStyles				VTCA_extendedStyles;
    SystemDrawMask				VTCA_grayScreen;
    GraphicPattern				VTCA_pattern;
    ColorQuad				VTCA_bgColor;
    SystemDrawMask				VTCA_bgGrayScreen;
    GraphicPattern				VTCA_bgPattern;
    byte				VTCA_reserved[7];
} VisTextCharAttr;</PRE>
<P>
VTCA_<A NAME="IX_VTCA_&ldots;">
 </A>
<EM>
meta</EM>
 stores a <CODE>
StyleSheetElementHeader</CODE>
. This structure field allows the <CODE>
VisTextCharAttr</CODE>
 structure to act as an element in an element array. For complete information on using character attribute element arrays to implement character style runs, see <A HREF="Text_17.htm#91955"> Character Runs</A>
.</P>
<P>
VTCA_<EM>
fontID</EM>
 stores the <CODE>
FontID</CODE>
 of the font to be used for this character. Any current font allowed by the system is valid. There may exist up to 65536 fonts of type <CODE>
FontID</CODE>
.</P>
<P>
VTCA_<EM>
pointSize</EM>
 stores the point size of the character. This may be any fixed point value between 4 and 792.</P>
<P>
VTCA_<EM>
textStyles</EM>
 stores the text styles (of type <CODE>
TextStyle</CODE>
) to be applied to this character. For a list of text styles, see <A HREF="../../Graphics/Shapes/Shapes_f.htm">the Drawing Shapes chapter</A>.</P><P>
VTCA_<EM>
color</EM>
 stores the current color (of type <CODE>
ColorQuad</CODE>
) of the foreground text character.</P>
<P>
VTCA_<CODE>
trackKerning</CODE>
 stores the kerning value (either positive or negative) for this character. This value is expressed in points and reflects how much extra space (if positive) or removal of space (if negative) to apply between this character and the next character.</P>
<P>
VTCA_<A NAME="IX_FontWeight type">
 </A>
<CODE>
fontWeight</CODE>
 stores the font-weight (thickness) of the character. This value is expressed as a <CODE>
FontWeight</CODE>
 value, a percentage between 75% and 125%.</P>
<P>
VTCA_<A NAME="IX_FontWidth type">
 </A>
<A NAME="IX_FWI_&ldots;">
 </A>
<CODE>
fontWidth</CODE>
 stores the width of the font, expressed as a <CODE>
FontWidth</CODE>
 value, a percentage between 25% and 200%. Several constants are defined in <STRONG CLASS="fileName">
font.h</STRONG>
 with common font widths, including FWI_CONDENSED and FWI_EXPANDED.</P>
<P>
VTCA_<CODE>
extendedStyles</CODE>
 stores any <CODE>
VisTextExtendedStyles</CODE>
 (separate from the <CODE>
TextStyle</CODE>
 in VTCA_<CODE>
textStyles</CODE>
) in use by this character. These styles are defined in the text object library. See <A HREF="Text_11.htm#29635"> VisTextExtendedStyles</A>
 for a list of extended styles.</P>
<P>
VTCA_<CODE>
grayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when displaying this text. This mask is applied to the text characters but not to the background. </P>
<P>
VTCA_<CODE>
pattern</CODE>
 stores the <CODE>
GraphicPattern</CODE>
 to use when displaying this text. This pattern is applied to the text characters but not to the background.</P>
<P>
<CODE>
VTCA_bgColor</CODE>
 stores the background color to apply to the character's background (but not to the character itself).</P>
<P>
VTCA_<CODE>
bgGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to apply to the character's background.</P>
<P>
VTCA_<CODE>
bgPattern</CODE>
 stores the <CODE>
GraphicPattern</CODE>
 to apply to the character's background.<A NAME="marker=38684">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-2 <A NAME="29635">
 </A>
VisTextExtendedStyles</P>
<PRE><A NAME="IX_VTES_&ldots;"> </A><A NAME="IX_VisTextExtendedStyles"> </A>/* These flags are stored in the VisTextCharAttr entry VTCA_extendedStyles */
typedef WordFlags VisTextExtendedStyles;
#define VTES_BOXED				0x8000
#define VTES_BUTTON				0x4000
#define VTES_INDEX				0x2000
#define VTES_ALL_CAP				0x1000
#define VTES_SMALL_CAP				0x0800
#define VTES_HIDDEN				0x0400
#define VTES_CHANGE_BAR				0x0200
#define VTES_BACKGROUND_COLOR				0x0100</PRE>
<P>
VTES_BOXED draws the character within a box (a rectangle surrounding the character). If consecutive characters are marked VTES_BOXED they will all be drawn within a single rectangular outline.</P>
<P>
VTES_BUTTON frames the text characters within a drop shadow. Consecutive characters marked VTES_BUTTON will be framed within a single drop-shadow.</P>
<P>
VTES_INDEX marks the character for indexing purposes. This feature is currently not implemented.</P>
<P>
VTES_ALL_CAP indicates that the character should be capitalized in the current point size. </P>
<P>
VTES_SMALL_CAP indicates that the character should be capitalized, but at a smaller point size.</P>
<P>
VTES_HIDDEN indicates that this character acts as hidden text. Hidden text may exhibit special properties (such as being masked out when printing). </P>
<P>
VTES_CHANGE_BAR is currently unimplemented.</P>
<P>
VTES_BACKGROUND_COLOR indicates that this character exhibits a special background color.</P>


<H2 CLASS="HeadingC">
Default Character Attributes</H2>
<P>
You may decide that you do not need your characters to exhibit the many attributes available within the <CODE>
VisTextCharAttr</CODE>
 structure. If your text object is simple, you may want instead to use the default character attributes provided in the text object library. These default attributes supersede the use of the <CODE>
VisTextCharAttr</CODE>
 structure. All of these attributes will fit into a single word record.</P>
<P>
<A NAME="IX_VTDCA_&ldots;">
 </A>
<A NAME="IX_VisTextDefaultCharAttr">
 </A>
The <CODE>
VisTextDefaultCharAttr</CODE>
 record allows your text object to exhibit three styles (underline, bold, and italic), 16 color indexes of type <CODE>
Color</CODE>
, eight point sizes, and 32 different fonts. </P>
<P CLASS="figTitle">
Code Display 10-3 VisTextDefaultCharAttr</P>
<PRE>typedef WordFlags VisTextDefaultCharAttr;
#define VTDCA_UNDERLINE			0x8000
#define VTDCA_BOLD			0x4000
#define VTDCA_ITALIC			0x2000
#define VTDCA_COLOR			0x0f00	/* Color */
#define VTDCA_SIZE			0x00e0	/* VisTextDefaultSize */
#define VTDCA_FONT			0x001f	/* VisTextDefaultFont */</PRE>
<PRE>#define VTDCA_COLOR_OFFSET				8
#define VTDCA_SIZE_OFFSET				5
#define VTDCA_FONT_OFFSET				0</PRE>
<PRE><A NAME="IX_VTDS_&ldots;"> </A><A NAME="IX_VisTextDefaultSize"> </A>typedef ByteEnum VisTextDefaultSize;
    #define		VTDS_8	0		/* Point size of 8 */
    #define		VTDS_9	1		/* Point size of 9 */
    #define		VTDS_10	2		/* Point size of 10 */
    #define		VTDS_12	3		/* Point size of 12 */
    #define		VTDS_14	4		/* Point size of 14 */
    #define		VTDS_18	5		/* Point size of 18 */
    #define		VTDS_24	6		/* Point size of 24 */
    #define		VTDS_36	7		/* Point size of 36 */</PRE>
<PRE><A NAME="IX_VisTextDefaultFont"> </A><A NAME="IX_VTDF_&ldots;"> </A>typedef ByteEnum VisTextDefaultFont;
    #define		VTDF_BERKELEY		0		/* Berkeley Font */
    #define		VTDF_CHICAGO		1		/* Chicago Font */
    #define		VTDF_BISON		2		/* Bison Font */
    #define		VTDF_WINDOWS		3		/* Windows Font */
    #define		VTDF_LED		4		/* LED Font */
    #define		VTDF_ROMA		5		/* Roma Font */
    #define		VTDF_UNIVERSITY		6		/* University Font */
    #define		VTDF_URW_ROMAN		7		/* URW Roman Font */
    #define		VTDF_URW_SANS		8		/* URW Sans Font */
    #define		VTDF_URW_MONO		9		/* URW Mono Font */
    #define		VTDF_URW_SYMBOLPS 10				/* URW Symbols Font */
    #define		VTDF_CENTURY_SCHOOLBOOK 11				/* Century Schoolbook Font */</PRE>
<PRE>#define <A NAME="IX_VIS_TEXT_INITIAL_CHAR_ATTR"> </A>VIS_TEXT_INITIAL_CHAR_ATTR \
	((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) | VTDF_BERKELEY)<A NAME="marker=38791"> </A></PRE>


<H2 CLASS="HeadingC">
Macros for Defining VisTextCharAttr Structures</H2>
<P>
The text object library also provides several macros to make the definition of the <CODE>
VisTextCharAttr</CODE>
 structure simpler. These macros are listed in <A HREF="Text_11.htm#30322"> VisTextCharAttr Macros</A>
. In many cases, these macros make the definition of character style runs vastly easier.</P>
<P CLASS="figTitle">
Code Display 10-4 <A NAME="30322">
 </A>
VisTextCharAttr Macros</P>
<PRE><A NAME="IX_CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR() macro"> </A>#define CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(ref, style, font, psize, tstyle, \ color) { \
    {{{ref, 0}}, style}, font, {0, psize}, tstyle, \
	{color, CF_INDEX, 0, 0}, 0, FWI_MEDIUM, FW_NORMAL, 0, SDM_100, {0}, \
	{C_WHITE, CF_INDEX, 0, 0}, SDM_0, {0}, {0, 0, 0, 0, 0, 0, 0}}</PRE>
<PRE><A NAME="IX_CHAR_ATTR_FONT_SIZE_STYLE() macro"> </A>#define CHAR_ATTR_FONT_SIZE_STYLE(font, psize, tstyle) \
	CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(2, CA_NULL_ELEMENT, font, \
						psize, tstyle, C_BLACK)</PRE>
<PRE><A NAME="IX_CHAR_ATTR_FONT_SIZE() macro"> </A>#define CHAR_ATTR_FONT_SIZE(font, psize) \
	CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(2, CA_NULL_ELEMENT, font, \
						psize, 0, C_BLACK)</PRE>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_10.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 The Text Object Library</A> 
<!-- to next --> | <A HREF="Text_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Paragraph Attribute Definitions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
