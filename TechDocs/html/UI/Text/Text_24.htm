<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Text_24.htm,v 1.1 97/06/02 16:43:27 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> GenText Basics</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">The Text Objects</A>: 6.2 <A HREF="Text_22.htm">Using GenText</A>: 
GenText Basics</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_22.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">6.1 GenText Instance Data</A> 
<!-- to next --> | <A HREF="Text_25.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">7 The Controllers</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The GenText instance fields can be set to specific values in your Goc files. They may also be modified by your application at run-time. These instance fields may be modified by both <CODE>
GenTextClass</CODE>
 messages or <CODE>
VisTextClass</CODE>
 messages.</P>
<P>
<CODE>
GenTextClass</CODE>
 always builds out into a completely functioning subclass of <CODE>
VisTextClass</CODE>
. With the exception of geometry management behavior, you can assume that they will behave the same. You may send any <CODE>
VisTextClass</CODE>
 message to a GenText object. Messages are only provided in <CODE>
GenTextClass</CODE>
 to manipulate and alter behavior solely of <CODE>
GenTextClass</CODE>
 origins.</P>

<H2 CLASS="HeadingC">
VisText Instance Fields</H2>
<P>
The chunk handle stored in GTXI_<CODE>
text</CODE>
 is copied to the VisText instance field VTI_<CODE>
text</CODE>
 at run-time. To perform operations on this text, you may use any of the <CODE>
VisTextClass</CODE>
 messages in <A HREF="Text_15.htm#60374"> The Text</A>
. Similarly, the text object maximum length stored in GTXI_<CODE>
maxLength</CODE>
 is copied to VTI_<CODE>
maxLength</CODE>
 at run-time. To perform operations on this data, use an appropriate message under <A HREF="Text_19.htm#27116"> Using VisText</A>
.</P>


<H2 CLASS="HeadingC">
GenText Attributes</H2>
<PRE>GTXI_attrs, MSG_GEN_TEXT_SET_ATTRS, MSG_GEN_TEXT_GET_ATTRS</PRE>
<P>
GTXI_<A NAME="IX_GTA_&ldots;">
 </A>
<A NAME="IX_GenTextAttrs">
 </A>
<A NAME="IX_GTXI_attrs">
 </A>
<CODE>
attrs</CODE>
 stores the <CODE>
GenTextAttrs</CODE>
 of the GenText object. These attribute flags are listed below.</P>
<DL>
<DT>
GTA_SINGLE_LINE_TEXT</DT><DD>
This flag indicates that this text object is only one line high. Vertical scrolling is disabled. Scrolling may be implemented horizontally if this is set.</DD>
<DT>
GTA_USE_TAB_FOR_NAVIGATION</DT><DD>
This flag indicates that the <CODE>
Tab</CODE>
 key is used for navigation purposes in your application and should be interpreted to move to the next field rather than inserted into the text object. </DD>
<DT>
GTA_INIT_SCROLLING</DT><DD>
This flag indicates that the text object should appear with initial scrollbars. </DD>
<DT>
GTA_NO_WORD_WRAPPING</DT><DD>
This flag disables word wrapping.</DD>
<DT>
GTA_ALLOW_TEXT_OFF_END</DT><DD>
This flag is set if text may be allowed to overflow past the end of the text box. The text will still be stored in the object's text chunk, but it will not force horizontal (or vertical) scrolling to show the text on-screen.</DD>
<DT>
GTA_TAIL_ORIENTED</DT><DD>
This flag is set if you prefer to display the tail end of text rather than the top end. In a scrolling text box, this ensures that the text being added at the end is always displayed.</DD>
<DT>
GTA_DONT_SCROLL_TO_CHANGES</DT><DD>
This flag disables the default behavior of scrolling to any changes being made within the text object. Normally, insertion or deletion of text will force a scrolling GenText to scroll to the point of action; this flag will turn this behavior off. </DD>
</DL>
<P>
You may alter the contents of a GenText's GTXI_<CODE>
attrs</CODE>
 instance field at run-time by sending the object a <CODE>
MSG_GEN_TEXT_SET_ATTRS</CODE>
. You may only send this message to a non-usable (~GS_USABLE) text object. To retrieve the current <CODE>
GenTextAttrs</CODE>
 in use, send the text object <CODE>
MSG_GEN_TEXT_GET_ATTRS</CODE>
.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SET_ATTRS">
 </A>
MSG_GEN_TEXT_SET_ATTRS</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_ATTRS(
        byte	attrsToSet,
        byte	attrsToClear);</PRE>
<P>
This message sets a GenText object's <CODE>
GenTextAttrs</CODE>
 (GTXI_<CODE>
attrs</CODE>
). The GenText object must not be GS_USABLE when sent this message. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any non-usable GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
attrsToSet</EM>
	<CODE>
GenTextAttrs</CODE>
 to add.</P>
<DL>
<DT>
<EM>
attrsToClear</EM>
</DT><DD><CODE>
GenTextAttrs</CODE>
 to remove. An attribute set in both parameters will be cleared.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_GET_ATTRS">
 </A>
MSG_GEN_TEXT_GET_ATTRS</H4>
<PRE CLASS="syntax">byte	MSG_GEN_TEXT_GET_ATTRS();</PRE>
<P>
This message retrieves the GenText object's <CODE>
GenTextAttrs</CODE>
 (GTXI_<CODE>
attrs</CODE>
).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
GenTextAttrs</CODE>
 in use by the GenText object(<CODE>
GTXI_attrs</CODE>
).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H2 CLASS="HeadingC">
GenTextStates</H2>
<PRE>GTXI_stateFlags, MSG_GEN_TEXT_SET_INDETERMINATE_STATE, MSG_GEN_TEXT_SET_MODIFIED_STATE, MSG_GEN_TEXT_IS_INDETERMINATE, MSG_GEN_TEXT_IS_MODIFIED</PRE>
<P>
GTXI_<A NAME="IX_GTXI_stateFlags">
 </A>
<CODE>
stateFlags</CODE>
 stores the current state of the GenText object. There are two <CODE>
GenTextStateFlags</CODE>
<A NAME="IX_GTSF_&ldots;">
 </A>
<A NAME="IX_GenTextStateFlags">
 </A>
:</P>
<DL>
<DT>
GTSF_INDETERMINATE</DT><DD>
This flag specifies that the text within the GenText is indeterminate (may or may not reflect the current state). In most cases, you will not need to set this flag.</DD>
<DT>
GTSF_MODIFIED</DT><DD>
This flag specifies that the text within the GenText has changed since it last received a <CODE>
MSG_GEN_APPLY</CODE>
. The handler for <CODE>
MSG_GEN_APPLY</CODE>
 checks whether this flag is set before sending out the GenText's GTXI_<CODE>
applyMsg</CODE>
.</DD>
</DL>
<P>
GenText objects should normally be marked by the application as not modified anytime their state is set with an external message. They will automatically be marked modified whenever the user interacts with them and marked not modified after receiving <CODE>
MSG_GEN_APPLY</CODE>
.</P>
<P>
You may set a GenText's indeterminate or modified state with <CODE>
MSG_GEN_TEXT_SET_INDETERMINATE_STATE</CODE>
 or <CODE>
MSG_GEN_TEXT_SET_MODIFIED_STATE</CODE>
, respectively. To check whether a GenText is indeterminate or modified, use <CODE>
MSG_GEN_TEXT_IS_INDETERMINATE</CODE>
 or <CODE>
MSG_GEN_TEXT_IS_MODIFIED</CODE>
.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SET_INDETERMINATE_STATE">
 </A>
MSG_GEN_TEXT_SET_INDETERMINATE_STATE</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_INDETERMINATE_STATE(
        Boolean indeterminateState);</PRE>
<P>
This message sets the GenText object's indeterminate state (the GTSF_INDETERMINATE flag in GTXI_<CODE>
stateFlags</CODE>
). This message does not affect the stored text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
indeterminateState</EM>
	<BR>
<CODE>
True</CODE>
 to set the text object indeterminate (GTSF_INDETERMINATE); <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SET_MODIFIED_STATE">
 </A>
MSG_GEN_TEXT_SET_MODIFIED_STATE</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_MODIFIED_STATE(
        Boolean modifiedState);</PRE>
<P>
This message allows you to set the modified state of a GenText object (the GTSF_MODIFIED flag in GTXI_<CODE>
stateFlags</CODE>
). This message does not affect the stored text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
	<CODE>
True</CODE>
 to set the text object modified (GTSF_MODIFIED); <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_IS_INDETERMINATE">
 </A>
MSG_GEN_TEXT_IS_INDETERMINATE</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_TEXT_IS_INDETERMINATE();</PRE>
<P>
This message checks whether a GenText object is indeterminate in state.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The indeterminate state of the GenText object (<CODE>
true</CODE>
 if the object is indeterminate, <CODE>
false</CODE>
 otherwise).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_IS_MODIFIED">
 </A>
MSG_GEN_TEXT_IS_MODIFIED</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_TEXT_IS_MODIFIED();</PRE>
<P>
This message checks whether a GenText object has been modified.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The modified state of the GenText object (<CODE>
true</CODE>
 if the object has been modified, <CODE>
false</CODE>
 otherwise).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H2 CLASS="HeadingC">
Sending an Action</H2>
<PRE>GTXI_applyMsg, GTXI_destination, MSG_GEN_TEXT_GET_DESTINATION, MSG_GEN_TEXT_SET_DESTINATION, MSG_GEN_TEXT_GET_APPLY_MSG, MSG_GEN_TEXT_SET_APPLY_MSG</PRE>
<P>
GTXI_<A NAME="IX_GTXI_applyMsg">
 </A>
<CODE>
applyMsg</CODE>
 holds the message for the GenText to send out whenever it has been modified and needs to apply its changes. Whenever a GenText receives <CODE>
MSG_GEN_APPLY</CODE>
, it checks whether its GTSF_MODIFIED flag has been set; if it has, it will send out its apply message. If a GenText is operating in immediate mode, these actions will happen immediately, resulting in an immediate action.</P>
<P>
Use the prototype GEN_TEXT_APPLY_MSG to define your apply message. This ensures that the apply message passes the correct parameters (the current <CODE>
GenTextStateFlags</CODE>
). GTXI_<CODE>
destination</CODE>
 specifies the destination object (or process) to send the GTXI_<CODE>
applyMsg</CODE>
 to. (This may also be a <CODE>
TravelOption</CODE>
 such as TO_APP_FOCUS.) Use of these two fields is shown in <A HREF="Text_24.htm#71733"> Sending an Apply Message</A>
.</P>
<P CLASS="figTitle">
Code Display 10-24 <A NAME="71733">
 </A>
Sending an Apply Message</P>
<PRE>	/* Define the apply message using the provided prototype. */
@message (GEN_TEXT_APPLY_MSG) MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER;</PRE>
<PRE>	/* In the object declaration, set the destination and the apply message. */
@object GenTextClass MyText = {
    GI_visMoniker = &quot;My Text Object&quot;;
    GTXI_text = &quot;Initial Text Here&quot;;
    GTXI_maxLength = 99;
    GTXI_applyMsg = MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER;
    GTXI_destination = process;
}</PRE>
<PRE>/* Retrieve the current text and place it in the indicated buffer. */</PRE>
<PRE>@method MyTextProcessClass, MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER {
    char tempBuffer[100];</PRE>
<PRE>/* The GET_ALL_PTR retrieves the current text and stuffs at the location it in the
 * passed pointer. Pass a text length of zero for null-terminated text strings. */
    @call MyText::MSG_VIS_TEXT_GET_ALL_PTR(tempBuffer);
}</PRE>
<P>
To change a GenText's apply message or destination, send it <CODE>
MSG_GEN_TEXT_SET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_TEXT_SET_DESTINATION</CODE>
, respectively. Use <CODE>
MSG_GEN_TEXT_GET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_TEXT_GET_DESTINATION</CODE>
 to return the current apply message or destination.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SET_APPLY_MSG">
 </A>
MSG_GEN_TEXT_SET_APPLY_MSG</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_APPLY_MSG(
        Message		message);</PRE>
<P>
This message sets a new apply message (GTXI_<CODE>
applyMsg</CODE>
) for the text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
message</EM>
	The new apply message.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_GET_APPLY_MSG">
 </A>
MSG_GEN_TEXT_GET_APPLY_MSG</H4>
<PRE CLASS="syntax">Message	MSG_GEN_TEXT_GET_APPLY_MSG();</PRE>
<P>
This message retrieves the current apply message (GTXI_<CODE>
applyMsg</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The apply message of the GenText object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SET_DESTINATION">
 </A>
MSG_GEN_TEXT_SET_DESTINATION</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_DESTINATION(
        optr	dest);</PRE>
<P>
This message sets the destination object or process (GTXI_<CODE>
destination</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
dest</EM>
	The optr of the new destination object or process. </P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_GET_DESTINATION">
 </A>
MSG_GEN_TEXT_GET_DESTINATION</H4>
<PRE CLASS="syntax">optr	MSG_GEN_TEXT_GET_DESTINATION();</PRE>
<P>
This message returns the current destination object (GTXI_<CODE>
destination</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The optr of the GenText's destination object (GTXI_<CODE>
destination</CODE>
).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_GEN_TEXT_APPLY_MSG">
 </A>
GEN_TEXT_APPLY_MSG</H4>
<PRE CLASS="syntax">void	GEN_TEXT_APPLY_MSG(
        word	stateFlags);</PRE>
<P>
This prototype should be used to define your GenText's apply message (with GTXI_<CODE>
applyMsg</CODE>
).</P>
<P CLASS="refField">
Parameters:	<EM>
stateFlags</EM>
	The text object's GTXI_<CODE>
stateFlags</CODE>
 status.</P>



<H2 CLASS="HeadingC">
Status Messages</H2>
<PRE>ATTR_GEN_TEXT_STATUS_MSG, MSG_GEN_TEXT_SEND_STATUS_MSG</PRE>
<P>
If your GenText is operating in delayed mode, there usually occur times when its current state may not reflect the most recent changes. In most cases, this is fine, but in some cases you may wish to notify other UI objects of a change in your GenText's state without sending out an apply message. This can be done with a <EM>
status message</EM>
.</P>
<P>
A status message allows your GenText object to send out a message whenever the user interacts with the text object, regardless of whether that change will be immediately applied. This is most useful for cases in which two UI objects depend on each other. The status message allows one UI object to inform its counterpart that its state has changed, and that the counterpart should change its state to reflect the new information.</P>
<P>
To give a GenText object a status message, include ATTR_GEN_TEXT_STATUS_MSG in the object's declaration. Use the prototype GEN_TEXT_STATUS_MSG to define your status message. This prototype ensures that the status message passes the correct parameters (the current <CODE>
GenTextStateFlags</CODE>
).</P>
<P>
Any user changes that do not result in the sending of the object's apply message will result in the sending of the object's status message. For an object in immediate mode, this attribute will have no effect. You may also manually send an object's status message by sending the GenText object <CODE>
MSG_GEN_TEXT_SEND_STATUS_MSG</CODE>
.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_TEXT_SEND_STATUS_MSG">
 </A>
MSG_GEN_TEXT_SEND_STATUS_MSG</H4>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SEND_STATUS_MSG(
        Boolean		modifiedState);</PRE>
<P>
This message causes a GenText object to send out its status message, stored in the text object's ATTR_GEN_TEXT_STATUS_MSG vardata field. This message will still function even if the text object is not enabled (or usable).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
	Non-zero if GVSF_MODIFIED bit should be passed with the status message.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.<A NAME="marker=38607">
 </A>
</P>


<H4 CLASS="RefETitle">
<A NAME="IX_GEN_TEXT_STATUS_MSG">
 </A>
GEN_TEXT_STATUS_MSG</H4>
<PRE CLASS="syntax">void	GEN_TEXT_STATUS_MSG(
        word	stateFlags);</PRE>
<P>
This prototype should be used to define your GenText's status message (with ATTR_GEN_TEXT_STATUS_MSG).</P>
<P CLASS="refField">
Parameters:	<EM>
stateFlags</EM>
	The text object's GTXI_<CODE>
stateFlags</CODE>
 status.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_22.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">6.1 GenText Instance Data</A> 
<!-- to next --> | <A HREF="Text_25.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">7 The Controllers</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
