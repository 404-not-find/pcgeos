<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Text_12.htm,v 1.1 97/06/02 16:41:48 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Paragraph Attribute Definitions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">The Text Objects</A>: 3.2 <A HREF="Text_10.htm">The Text Object Library</A>: 
Paragraph Attribute Definitions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Character Attribute Definitions</A> 
<!-- to next --> | <A HREF="Text_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.3 Storage Flags</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The text object library also provides many ways to shape the appearance of individual paragraphs. Each paragraph within a text object may exhibit its own individual attributes if the text object is set to allow multiple paragraph attributes. The definitions within this section show the full range of possibilities for paragraph attributes.</P>

<H2 CLASS="HeadingC">
The VisTextParaAttr Structure</H2>
<P>
<A NAME="IX_VisTextParaAttr">
 </A>
The <CODE>
VisTextParaAttr</CODE>
 structure provides the largest set of attributes for use by paragraphs within text objects. Note that although the <CODE>
VisTextParaAttr</CODE>
 structure is of a fixed size, the paragraph attributes consist of this structure and a variable number of tabs; therefore, the paragraph attributes within a &quot;run&quot; may be variably sized. These entries are listed in <A HREF="Text_12.htm#93327"> VisTextParaAttr</A>
. Comments follow the code display.</P>
<P CLASS="figTitle">
Code Display 10-5 <A NAME="93327">
 </A>
VisTextParaAttr</P>
<PRE>typedef struct {
    StyleSheetElementHeader				VTPA_meta;
    VisTextParaBorderFlags				VTPA_borderFlags;
    ColorQuad				VTPA_borderColor;
    VisTextParaAttrAttributes				VTPA_attributes;
    word				VTPA_leftMargin;
    word				VTPA_rightMargin;
    word				VTPA_paraMargin;
    BBFixedAsWord				VTPA_lineSpacing;
    word				VTPA_leading;
    BBFixedAsWord				VTPA_spaceOnTop;
    BBFixedAsWord				VTPA_spaceOnBottom;
    ColorQuad				VTPA_bgColor;
    byte				VTPA_numberOfTabs;
    byte				VTPA_borderWidth;
    byte				VTPA_borderSpacing;
    byte				VTPA_borderShadow;
    SystemDrawMask				VTPA_borderGrayScreen;
    SystemDrawMask				VTPA_bgGrayScreen;
    HatchPattern				VTPA_borderHatch;
    HatchPattern				VTPA_bgHatch;
    word				VTPA_defaultTabs;
    word				VTPA_startingParaNumber;
    char				VTPA_prependChars[4];
    VisTextHyphenationInfo				VTPA_hyphenationInfo;
    VisTextKeepInfo				VTPA_keepInfo;
    VisTextDropCapInfo				VTPA_dropCapInfo;
    word				VTPA_nextStyle;
    StandardLanguage				VTPA_language;
    byte				VTPA_reserved[15];
} VisTextParaAttr;</PRE>
<P>
VTPA_<A NAME="IX_VTPA_&ldots;">
 </A>
<EM>
meta</EM>
 stores a <CODE>
StyleSheetElementHeader</CODE>
. This structure field allows the <CODE>
VisTextParaAttr</CODE>
 structure to act as an element in an element array. For complete information on using paragraph attribute element arrays to implement paragraph style runs, see <A HREF="Text_18.htm#59559"> Paragraph Runs</A>
.</P>
<P>
<CODE>
VTPA_borderFlags</CODE>
 stores the <CODE>
VisTextParaBorderFlags</CODE>
 to use in drawing any borders around the text paragraph.</P>
<P>
VTPA_<CODE>
borderColor</CODE>
 stores the color (of type <CODE>
ColorQuad</CODE>
) of the border. </P>
<P>
VTPA_<CODE>
attributes</CODE>
 stores the <CODE>
VisTextParaAttrAttributes</CODE>
 to use on this paragraph. These attributes specify whether the paragraph uses keep-with, drop caps, automatic hyphenation, or paragraph numbering.</P>
<P>
VTPA_<CODE>
leftMargin</CODE>
 stores the left margin of the paragraph. This margin is the distance (offset in points) from the left edge of the text object.</P>
<P>
VTPA_<CODE>
rightMargin</CODE>
 stores the right margin of the paragraph. This margin is the distance (offset in points) from the right edge of the text object.</P>
<P>
VTPA_<CODE>
paraMargin</CODE>
 stores the paragraph margin. This margin is the additional distance (offset in points from the left margin) to indent the first line of a paragraph.</P>
<P>
VTPA_<CODE>
lineSpacing</CODE>
 stores the distance between lines of the paragraph. Single-spacing (a VTPA_<CODE>
lineSpacing</CODE>
 of 1.0) is the default value. </P>
<P>
VTPA_<CODE>
leading</CODE>
 stores the leading of the paragraph. Leading is the additional space between all lines of a paragraph, independent of line spacing. This value is expressed in points.</P>
<P>
VTPA_<CODE>
spaceOnTop</CODE>
 stores the additional vertical distance (expressed in points) before the first line of the paragraph. VTPA_<CODE>
spaceOnTop</CODE>
 plus VTPA_<CODE>
spaceOnBottom</CODE>
 is the total vertical distance between paragraphs.</P>
<P>
VTPA_<CODE>
spaceOnBottom</CODE>
 stores the additional vertical distance (expressed in points) after the last line of the paragraph. VTPA_<CODE>
spaceOnTop</CODE>
 plus VTPA_<CODE>
spaceOnBottom</CODE>
 is the total vertical distance between paragraphs.</P>
<P>
<CODE>
VTPA_bgColor</CODE>
 stores the background color (of type <CODE>
ColorQuad</CODE>
) of the paragraph. Note this is different from the background color of an individual character (in VTCA_<CODE>
bgColor</CODE>
). The background color of a character, if any, takes precedence over the background color of a paragraph.</P>
<P>
VTPA_<CODE>
numberOfTabs</CODE>
 stores the number of tab stops contained in this paragraph. Tabs are added at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. Therefore, this structure may be of variable size, depending on the number of tabs.</P>
<P>
VTPA_<CODE>
borderWidth</CODE>
 stores the width (in units of eight pixels) of the border, if any, attached to this paragraph.</P>
<P>
VTPA_<CODE>
borderSpacing</CODE>
 stores the spacing (in units of eight pixels) between the paragraph border, if any, and the paragraph itself.</P>
<P>
VTPA_<CODE>
borderShadow</CODE>
 stores the distance (in units of eight pixels) of the border shadow, if any, from the main border. </P>
<P>
VTPA_<CODE>
borderGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when drawing the paragraph border.</P>
<P>
VTPA_<CODE>
bgGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when drawing the paragraph background.</P>
<P>
VTPA_<CODE>
borderHatch</CODE>
 stores <CODE>
HatchPattern</CODE>
 to use when drawing the border.</P>
<P>
VTPA_<CODE>
bgHatch</CODE>
 stores the <CODE>
HatchPattern</CODE>
 to use when drawing the background.</P>
<P>
VTPA_<CODE>
defaultTabs</CODE>
 stores the spacing for default tabs.</P>
<P>
VTPA_<CODE>
startingParaNumber</CODE>
 stores the sequential number of this paragraph. This value depends on the <CODE>
VisTextNumberType</CODE>
 in VTPA_<CODE>
attributes</CODE>
.</P>
<P>
VTPA_<CODE>
prependChars</CODE>
 stores the characters (up to four) to prepend to the beginning of this paragraph. </P>
<P>
VTPA_<CODE>
hyphenationInfo</CODE>
 stores the <CODE>
VisTextHyphenationInfo</CODE>
 (see below) to use between lines of text within a paragraph.</P>
<P>
VTPA_<CODE>
keepInfo</CODE>
 stores the <CODE>
VisTextKeepInfo</CODE>
 (see below) to use between this and other paragraphs.</P>
<P>
VTPA_<CODE>
dropCapInfo</CODE>
 stores the <CODE>
VisTextDropCapInfo</CODE>
 (see below) to use at the start of this paragraph.</P>
<P>
<CODE>
VTPA_nextStyle</CODE>
 and <CODE>
VTPA_language</CODE>
 represent text attributes that are currently unimplemented but will be added.</P>
<P>
VTPA_<CODE>
reserved</CODE>
 reserves fifteen bytes of data at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. These bytes are used to designate extra tabs.<A NAME="marker=38800">
 </A>
<A NAME="marker=38802">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-6 VisTextParaBorderFlags</P>
<PRE><A NAME="IX_VTBF_&ldots;"> </A><A NAME="IX_VisTextBorderFlags"> </A>typedef WordFlags VisTextParaBorderFlags;
#define VTPBF_LEFT				0x8000
#define VTPBF_TOP				0x4000
#define VTPBF_RIGHT				0x2000
#define VTPBF_BOTTOM				0x1000
#define VTPBF_DOUBLE				0x0800
#define VTPBF_DRAW_INNER_LINES				0x0400
#define VTPBF_SHADOW				0x0200
#define VTPBF_ANCHOR				0x0003 /* ShadowAnchor */</PRE>
<PRE>#define VTPBF_ANCHOR_OFFSET				0</PRE>
<PRE><A NAME="IX_SD_&ldots;"> </A><A NAME="IX_ShadowAnchor"> </A>typedef ByteEnum ShadowAnchor;
#define	SA_TOP_LEFT		0
#define	SA_TOP_RIGHT		1
#define	SA_BOTTOM_LEFT		2
#define	SA_BOTTOM_RIGHT		3</PRE>
<P>
The <CODE>
VisTextParaBorderFlags</CODE>
 specify the manner in which a border should be drawn around the paragraph. </P>
<P>
VTPBF_LEFT, VTPBF_TOP, VTPBF_RIGHT, and VTPBF_BOTTOM all specify whether their respective side is drawn with a border. If you wish a border to entirely surround the text object, you should set all of these flags.</P>
<P>
VTPBF_DOUBLE specifies that there should be a two-line border around this paragraph. This flag will double any lines set to be drawn with VTPBF_LEFT, VTPBF_TOP, VTPBF_RIGHT, and VTPBF_BOTTOM.</P>
<P>
VTPBF_DRAW_INNER_LINES draws lines between bordered paragraphs. If two consecutive paragraphs are marked with this flag, a line border will be drawn between them.</P>
<P>
VTPBF_SHADOW specifies that the border should be shadowed. The direction of shadowing is specified in the VTPBF_ANCHOR flag. </P>
<P>
VTPBF_ANCHOR specifies the <CODE>
ShadowAnchor</CODE>
 to use if drawing a border shadow. The <CODE>
ShadowAnchor</CODE>
 specifies the corner of the paragraph to anchor the shadow. The shadowing effect on the paragraph will proceed from this corner towards the opposite corner.<A NAME="marker=38807">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-7 VisTextNumberType</P>
<PRE><A NAME="IX_VTPNT_&ldots;"> </A><A NAME="IX_VisTextParaNumberType"> </A>typedef ByteEnum VisTextNumberType;
#define	VTNT_NUMBER			0
#define	VTNT_LETTER_UPPER_A			1
#define	VTNT_LETTER_LOWER_A			2
#define	VTNT_ROMAN_NUMERAL_UPPER	3
#define	VTNT_ROMAN_NUMERAL_LOWER	4</PRE>
<P>
The <CODE>
VisTextNumberType</CODE>
 specifies the paragraph numbering scheme for this paragraph. For each paragraph with a numbering type, the object will number that paragraph sequentially based on the last occurrence of a paragraph with the same type. The text object stores this sequential number in the VTPA_<CODE>
startingParaNumber</CODE>
 entry. </P>
<P CLASS="figTitle">
Code Display 10-8 VisTextParaAttrAttributes</P>
<PRE><A NAME="IX_VTPAA_&ldots;"> </A><A NAME="IX_VisTextParaAttrAttributes"> </A>typedef WordFlags VisTextParaAttrAttributes;
#define VTPAA_JUSTIFICATION					0xc000
#define VTPAA_KEEP_PARA_WITH_NEXT					0x2000
#define VTPAA_KEEP_PARA_TOGETHER					0x1000
#define VTPAA_ALLOW_AUTO_HYPHENATION					0x0800
#define VTPAA_DISABLE_WORD_WRAP					0x0400
#define VTPAA_COLUMN_BREAK_BEFORE					0x0200
#define VTPAA_PARA_NUMBER_TYPE					0x01c0
#define VTPAA_DROP_CAP					0x0020
#define VTPAA_KEEP_LINES					0x0010</PRE>
<PRE>#define VTPAA_JUSTIFICATION_OFFSET					14
#define VTPAA_PARA_NUMBER_TYPE_OFFSET					5</PRE>
<P>
VTPAA_JUSTIFICATION stores the <CODE>
Justification</CODE>
 to use with this paragraph.</P>
<P>
VTPAA_KEEP_PARA_WITH_NEXT ensures that this paragraph and the next one will not be split along page breaks.</P>
<P>
VTPAA_KEEP_PARA_TOGETHER ensures that the entire paragraph will not be split along page breaks. In most cases, this will cause a paragraph capable of being split to appear at the top of the next page. </P>
<P>
VTPAA_ALLOW_AUTO_HYPHENATION allows the paragraph to automatically hyphenate words that cross line breaks. If this flag is set, the entry VTPA_<CODE>
hyphenationInfo</CODE>
 will store the <CODE>
VisTextHyphenationInfo</CODE>
 to use when hyphenating words.</P>
<P>
VTPAA_DISABLE_WORD_WRAP disables automatic word wrapping. Each line break will immediately wrap to next line without keeping words together. </P>
<P>
VTPAA_PARA_NUMBER_TYPE stores the <CODE>
VisTextParaType</CODE>
 for this paragraph. The actual paragraph number is stored in the VTPA_<CODE>
startingParaNumber</CODE>
 entry. The paragraph number type in tandem with the paragraph number determines what number heading this paragraph will have.</P>
<P>
VTPAA_DROP_CAP signifies that a this paragraph uses Drop Caps. If this flag is set, the <CODE>
VisTextParaAttr</CODE>
 entry VTPA_<CODE>
dropCapInfo</CODE>
 stores the <CODE>
VisTextParaDropCapInfo</CODE>
 (see below).</P>
<P>
VTPAA_KEEP_LINES specifies that this paragraph should make sure that beginning or ending lines of certain lengths should not be allowed to stand alone. If this flag is set, the <CODE>
VisTextParaAttr</CODE>
 entry VTCA_<CODE>
keepInfo</CODE>
 stores the <CODE>
VisTextKeepInfo</CODE>
 (see below).</P>
<P CLASS="figTitle">
Code Display 10-9 VisTextHyphenationInfo</P>
<PRE><A NAME="IX_VTHI_"> </A><A NAME="IX_VisTextHyphenationInfo"> </A>typedef WordFlags VisTextHyphenationInfo;
#define VTHI_HYPHEN_MAX_LINES					0xf000
#define VTHI_HYPHEN_SHORTEST_WORD					0x0f00
#define VTHI_HYPHEN_SHORTEST_PREFIX					0x00f0
#define VTHI_HYPHEN_SHORTEST_SUFFIX					0x000f</PRE>
<PRE>#define VTHI_HYPHEN_MAX_LINES_OFFSET						12
#define VTHI_HYPHEN_SHORTEST_WORD_OFFSET						 8
#define VTHI_HYPHEN_SHORTEST_PREFIX_OFFSET						 4
#define VTHI_HYPHEN_SHORTEST_SUFFIX_OFFSET						 0</PRE>
<P>
If the <CODE>
VTPA_attributes</CODE>
 flag VTPAA_ALLOW_AUTO_HYPHENATION is set, <CODE>
VisTextHyphenationInfo</CODE>
 stores the criteria to use when hyphenating words in VTPA_<CODE>
hyphenationInfo</CODE>
. If hyphenation is set, words will be automatically hyphenated using a Houghton-Mifflin engine. </P>
<P>
VTHI_SHORTEST_WORD sets the shortest word-length (in character counts) to hyphenate. Words shorter than this character count will be wrapped to the next line. </P>
<P>
VTHI_SHORTEST_PREFIX and VTHI_SHORTEST_SUFFIX set the shortest prefix and suffix to leave on a line after hyphenation. Prefixes or suffixes shorter than this character count will be tied to the main word and wrapped, if necessary.</P>
<P CLASS="figTitle">
Code Display 10-10 VisTextKeepInfo</P>
<PRE><A NAME="IX_VTKI_&ldots;"> </A><A NAME="IX_VisTextKeepInfo"> </A>typedef ByteFlags VisTextKeepInfo;
#define VTKI_TOP_LINES				0xf0
#define VTKI_BOTTOM_LINES				0x0f</PRE>
<PRE>#define VTKI_TOP_LINES_OFFSET				4
#define VTKI_BOTTOM_LINES_OFFSET				0</PRE>
<P>
If the VTPA_<CODE>
attributes</CODE>
 flag VTPAA_KEEP_LINES is set, <CODE>
VisTextKeepInfo</CODE>
 specifies the number of lines at the beginning and end of a paragraph that should not remain across page breaks. This prevents &quot;widows&quot; and &quot;orphans&quot;--single lines either at the end of one page or the beginning of another.</P>
<P>
VTKI_TOP_LINES specifies the minimum number of lines at the beginning of a paragraph to be considered able to stand alone and not kept part of the main paragraph along a page break.</P>
<P>
VTKI_BOTTOM_LINES specifies the minimum number of lines at the end of a paragraph to be considered able to stand alone and not kept part of the main paragraph along a page break.</P>
<P>
For example, if VTKI_BOTTOM_LINES is set to three, then single or double lines will not be able to stand on their own at the top of a page, and either the orphans will be kept with the main paragraph or additional line(s) will be brought over from the preceding page to pad the next page.</P>
<P CLASS="figTitle">
Code Display 10-11 VisTextDropCapInfo</P>
<PRE><A NAME="IX_VTDCI_&ldots;"> </A><A NAME="IX_VisTextDropCapInfo"> </A>typedef WordFlags VisTextDropCapInfo;
#define VTDCI_CHAR_COUNT				0xf000
#define VTDCI_LINE_COUNT				0x0f00
#define VTDCI_POSITION				0x00f0</PRE>
<PRE>#define VTDCI_CHAR_COUNT_OFFSET					12
#define VTDCI_LINE_COUNT_OFFSET					8
#define VTDCI_POSITION_OFFSET					4</PRE>
<P>
If the VTPA_<CODE>
attributes</CODE>
 flag VTPAA_DROP_CAP is set, <CODE>
VisTextDropCapInfo</CODE>
 specifies the criteria to use when implementing Drop Caps. Drop Caps are currently not implemented in GEOS though they will be supported for later releases.</P>
<P>
VTDCI_CHAR_COUNT sets the number of characters to capitalize at the start of the paragraph before resuming normal capitalization.</P>
<P>
VTDCI_LINE_COUNT sets the number of lines to capitalize at the start of a paragraph before resuming normal capitalization.</P>
<P CLASS="figTitle">
Code Display 10-12 Tabs</P>
<PRE><A NAME="IX_TL_&ldots;"> </A><A NAME="IX_TabLeader"> </A>typedef ByteEnum TabLeader;
#define	TL_NONE 		0
#define	TL_DOT 		1
#define	TL_LINE		2
#define	TL_BULLET		3
#define	TL_GRAY_LINE		4</PRE>
<PRE><A NAME="IX_TT_&ldots;"> </A><A NAME="IX_TabType"> </A>typedef ByteEnum TabType;
#define TT_LEFT			0
#define TT_CENTER			1
#define TT_RIGHT			2
#define TT_ANCHORED			3</PRE>
<PRE><A NAME="IX_TA_&ldots;"> </A><A NAME="IX_TabAttributes"> </A>typedef ByteFlags TabAttributes;
#define	TA_LEADER		0x1c		/* TabLeader */
#define	TA_TYPE		0x03		/* TabType */</PRE>
<PRE>#define TA_LEADER_OFFSET			2
#define TA_TYPE_OFFSET			0</PRE>
<PRE><A NAME="IX_T_&ldots;"> </A><A NAME="IX_TAB"> </A>typedef struct {
    word			T_position;
    TabAttributes			T_attr;		/* TabAttributes */
    SystemDrawMask			T_grayScreen;
    byte			T_lineWidth;
    byte			T_lineSpacing;
    word			T_anchor;
} Tab;</PRE>
<PRE><A NAME="IX_MTMPA_&ldots;"> </A><A NAME="IX_VisTextMaxParaAttr"> </A>typedef struct {
    VisTextParaAttr			VTMPA_paraAttr;
    Tab			VTMPA_tabs[VIS_TEXT_MAX_TABS];
} VisTextMaxParaAttr;</PRE>
<P>
The <CODE>
Tab</CODE>
 structure allows your paragraph to add custom tab stops to a paragraph. These tabs are in addition to any default tab stops that are defined in VTPA_<CODE>
defaultTabs</CODE>
. You may add up to 25 custom tabs to each paragraph. These tabs are added at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. Therefore, different paragraphs may have paragraph attributes of different lengths depending on the number of custom tabs in use by that paragraph.</P>


<H2 CLASS="HeadingC">
Default Paragraph Attributes</H2>
<P>
You may decide that you do not need many of the features within the <CODE>
VisTextParaAttr</CODE>
 structure in your paragraphs. If your text object is simple, you may want to use a set of default paragraph attributes provided in the text object library. These default attributes supersede the use of the <CODE>
VisTextParaAttr</CODE>
 structure. All of these attributes will fit into a single word record of type <CODE>
VisTextDefaultParaAttr</CODE>
.</P>
<P>
<A NAME="IX_VTDPA_&ldots;">
 </A>
<A NAME="IX_VisTextDefaultParaAttr">
 </A>
The <CODE>
VisTextDefaultParaAttr</CODE>
 structure allows your text object to exhibit a <CODE>
Justification</CODE>
, a subset of default tabs, and left, right, and paragraph margins.</P>
<P CLASS="figTitle">
Code Display 10-13 <A NAME="67353">
 </A>
VisTextDefaultParaAttr</P>
<PRE>typedef WordFlags VisTextDefaultParaAttr;
#define VTDPA_JUSTIFICATION				0xc000 /* Justification */
#define VTDPA_DEFAULT_TABS				0x3000 /* VisTextDefaultTab */
#define VTDPA_LEFT_MARGIN				0x0f00 /* In units of half-inches */
#define VTDPA_PARA_MARGIN				0x00f0 /* In units of half-inches */
#define VTDPA_RIGHT_MARGIN				0x000f /* In units of half-inches */</PRE>
<PRE>#define VTDPA_JUSTIFICATION_OFFSET					14
#define VTDPA_DEFAULT_TABS_OFFSET					12
#define VTDPA_LEFT_MARGIN_OFFSET					8
#define VTDPA_PARA_MARGIN_OFFSET					4
#define VTDPA_RIGHT_MARGIN_OFFSET					0</PRE>
<PRE>#define VIS_TEXT_INITIAL_PARA_ATTR ( (0*2) &lt;&lt; VTDPA_LEFT_MARGIN_OFFSET) | \
				( (0*2) &lt;&lt; VTDPA_PARA_MARGIN_OFFSET) | \
				( (0*2) &lt;&lt; VTDPA_RIGHT_MARGIN_OFFSET) | \
				(VTDDT_INCH &lt;&lt; VTDPA_DEFAULT_TABS_OFFSET) | \
				(J_LEFT &lt;&lt; VTDPA_JUSTIFICATION_OFFSET)</PRE>
<PRE><A NAME="IX_VTDDT_&ldots;"> </A><A NAME="IX_VisTextDefaultDefaultTab"> </A>typedef ByteEnum VisTextDefaultDefaultTab;
#define VTDDT_NONE				0
#define VTDDT_HALF_INCH				1
#define VTDDT_INCH				2
#define VTDDT_CENTIMETER				3</PRE>
<P>
The <CODE>
VisTextDefaultDefaultTab</CODE>
 type is solely for use within a <CODE>
VisTextDefaultParaAttr</CODE>
 record. The default tab stops provide either no tab stops (VTDDT_NONE) or tab stops every half-inch, centimeter, or inch. Note that no other application-defined tabs are allowed when using the default paragraph attributes.</P>


<H2 CLASS="HeadingC">
Macros for Defining VisTextParaAttr Structures</H2>
<P>
The text object library also provides a macro to make the definition of the <CODE>
VisTextParaAttr</CODE>
 structure simpler; there are also a few macros to aid in setting up justification and tab structures. These macros are listed in <A HREF="Text_12.htm#39349"> VisTextParaAttr Macros</A>
. In many cases, these macros make the definition of paragraph style runs vastly easier.</P>
<P CLASS="figTitle">
Code Display 10-14 <A NAME="39349">
 </A>
VisTextParaAttr Macros</P>
<PRE><A NAME="IX_PARA_ATTR_STYLE_JUST_LEFT_RIGHT_PARA() macro"> </A>#define PARA_ATTR_STYLE_JUST_LEFT_RIGHT_PARA(ref, style, just, left, right, para)\
{ \
	{{{ref, 0}}, style}, 0, {C_BLACK, CF_INDEX, 0, 0}, \
	just &lt;&lt; VTPAA_JUSTIFICATION_OFFSET, (left)*PIXELS_PER_INCH, \
	(right)*PIXELS_PER_INCH, (para)*PIXELS_PER_INCH, \
	1&lt;&lt;8, 0, 0, 0, {C_WHITE, CF_INDEX, 0, 0}, \
	0, 1*8, 2*8, 1*8, SDM_100, SDM_0, {0}, {0}, \
	PIXELS_PER_INCH/2*8, VIS_TEXT_DEFAULT_STARTING_NUMBER, &quot;&quot;, 0, 0, 0,
	CA_NULL_ELEMENT, SL_ENGLISH, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}</PRE>
<PRE>#define DEF_PARA_ATTR_JUST_TABS(just, tabs) \
	(( (0*2) &lt;&lt; VTDPA_LEFT_MARGIN_OFFSET ) | \
	 ( (0*2) &lt;&lt; VTDPA_PARA_MARGIN_OFFSET ) | \
	 ( (0*2) &lt;&lt; VTDPA_RIGHT_MARGIN_OFFSET ) | \
	 ( (tabs) &lt;&lt; VTDPA_DEFAULT_TABS_OFFSET ) | \
	 ( (just) &lt;&lt; VTDPA_JUSTIFICATION_OFFSET ))</PRE>
<PRE>#define DEF_PARA_ATTR_CENTER DEF_PARA_ATTR_JUST_TABS(J_CENTER, VTDDT_INCH)</PRE>
<PRE>#define DEF_PARA_ATTR_RIGHT DEF_PARA_ATTR_JUST_TABS(J_RIGHT, VTDDT_INCH)</PRE>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Text_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Text_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Character Attribute Definitions</A> 
<!-- to next --> | <A HREF="Text_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.3 Storage Flags</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
