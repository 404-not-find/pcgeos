<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: UIOverview_3.htm,v 1.1 97/06/02 16:46:25 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Using the Generic Classes</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">UI Overview</A>: 3 
<A NAME="55547">
 </A>
Using the Generic Classes</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="UIOverview_4.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="UIOverview_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 The GEOS User Interface</A> 
<!-- to next --> | <A HREF="UIOverview_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Using the Visible Classes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_Generic objects">
 </A>
Most of your application's UI needs will be satisfied by the use of generic UI objects. Many applications may need only the generic classes. Generic UI objects are powerful and easy to use, and they provide a number of services normally left up to application code.</P>
<P>
Generic object classes have no inherent visual representation. Rather, each generic object represents a certain set of UI functions instead of UI components. For example, the GenInteraction class implements grouping and organizational functions; it can appear in several forms including menus and dialog boxes. It can also have no visual representation but merely provide geometry management for other generic objects.</P>
<P>
What visual form a generic object takes, if any, is determined by two factors: the specific UI library in use, and the instance data of the generic object.</P>
<UL>
<LI>
A specific UI library is essentially a &quot;UI driver&quot; that translates the generic class into its specific representation. Just as each video card has its own driver, each UI specification (e.g. OSF/Motif or Presentation Manager) has its own specific UI library. This library uses the generic object's instance data to determine the exact form of that object's output and input. A GenValue object, for example, may be implemented as a spinner object in one specific UI but as a slider object in another. </LI>
</UL>
<P>
The generic object's instance data determines the features of the object as implemented by the specific UI. Across different GUI specifications, each similar object may appear different or handle input differently. For example, a button in one GUI may invert itself when pressed while the same button in another GUI might simply darken its outline when pressed. However, both buttons will do the same task. Therefore, a generic object's instance data must be categorized into two types: <EM>
Attributes</EM>
 are instance data that will cause the same results no matter what GUI is used (e.g. the function the button performs). <EM>
Hints</EM>
 are instance data that suggest particular implementations that may or may not be implemented by the GUI in use.</P>
<P>
The way the generic object gets translated by GEOS into a visible representation is a complicated process. All generic classes are subclasses of <CODE>
GenClass</CODE>
, which is defined as a variant class. This means that <CODE>
GenClass</CODE>
 has no defined superclass, that the superclass can be changed from time to time. The superclass is determined when the object is instantiated and resolved--when its visual representation is called for. (See <A HREF="../../Programming/GOCLanguage/index.htm">the GEOS Programming chapter</A>.)</P><P>
The specific UI library contains objects subclassed off <CODE>
VisClass</CODE>
. These objects know how to handle input events and have very specific representation on the screen. These specific UI classes connect to the generic classes through the master/variant mechanism; in this way, the superclass of a generic object is assigned to one of the classes in the specific UI library. The generic object thus inherits the specific class' visible representation.</P>
<P>
The above process happens entirely at run-time. The application does not have to have any knowledge of which particular GUI is in use; the same application executable code will work with any specific UI library. Because of the generic UI of GEOS, a user can run the same application under several look-and-feel specifications; this is desirable to the programmer because he only has to code the application once to receive the benefits of several different GUIs.</P>
<P CLASS="subsectionLink">
<A HREF="UIOverview_4.htm">The Generic Class Tree</A></P>
<P CLASS="subsectionLink">
<A HREF="UIOverview_5.htm">Creating a Generic Object Tree</A></P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> | <A HREF="UIOverview_4.htm"><IMG SRC="../../docImages/down.gif" BORDER="0" ALT="Down"></A> 
<!-- to previous --> | <A HREF="UIOverview_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 The GEOS User Interface</A> 
<!-- to next --> | <A HREF="UIOverview_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Using the Visible Classes</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
