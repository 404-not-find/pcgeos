<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: UIOverview_4.htm,v 1.1 97/06/06 14:56:48 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> The Generic Class Tree</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">UI Overview</A>: 3.1 <A HREF="UIOverview_3.htm">Using the Generic Classes</A>: 
The Generic Class Tree</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="UIOverview_3.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="UIOverview_3.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Using the Generic Classes</A> 
<!-- to next --> | <A HREF="UIOverview_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Creating a Generic Object Tree</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Generic objects have a tremendous amount of built-in functionality. Much of this is built into <CODE>
GenClass</CODE>
, the topmost class in the generic class tree. For full details on <CODE>
GenClass</CODE>
 and the other generic classes, see the Object Reference Book.</P>
<P>
Among the features offered by all generic classes are</P>
<UL>
<LI>
Visual Representation<BR>
Through the specific UI library, every generic object provides its own visual representation. The application does not have to do any gadget drawing.</LI>
<LI>
Monikers<BR>
Every generic object can have a moniker, which is a name or graphic that gets displayed along with the object.</LI>
<LI>
Input Management<BR>
Through the specific UI library, every generic object properly handles mouse and keyboard input.</LI>
<LI>
Messaging<BR>
As with all objects in the system, generic objects can receive and send messages. In addition, generic objects can pass messages up or down the generic object tree automatically.</LI>
<LI>
Enabled and Usable States<BR>
Generic objects understand their usable and enabled states. If an object is not enabled, it may be visible but the user cannot invoke its action. If an object is not usable, it will not be visible on the screen (in most specific UIs). Entire object trees can be set usable or enabled with one command.</LI>
<LI>
State Saving<BR>
Generic objects automatically save their state when the system shuts down. Therefore, when the system comes back up, dialog boxes and windows will automatically be restored to the same state they were left in when shut down.</LI>
<LI>
Object Tree Management<BR>
All generic objects must be part of a generic object tree to be displayed. Generic objects inherently understand the tree structures and functions. UI gadgetry can dynamically be added, moved, or removed.</LI>
</UL>
<P>
Each of the different generic classes is described in overview depth below. Note that every one of these classes may be subclassed to add, change, or remove functionality. Changing or removing functions from a generic class is not encouraged, however, as it can cause a specific UI library to give unpredictable results. </P>

<H2 CLASS="HeadingC">
GenClass</H2>
<P>
<A NAME="IX_GenClass">
 </A>
<CODE>
GenClass</CODE>
 provides the functionality basic to all generic objects. <CODE>
GenClass</CODE>
 is not used directly by any applications and has no visible representation. Rather, all generic classes are subclassed off <CODE>
GenClass</CODE>
. <CODE>
GenClass</CODE>
 provides instance fields common to all of its subclasses. Instance fields of special interest include</P>
<UL>
<LI>
links between parents and children, providing the means of constructing a generic tree.</LI>
<LI>
text or graphics strings to serve as an object's visual moniker.</LI>
<LI>
a keyboard accelerator to activate an object through keyboard events.</LI>
<LI>
a state field relating to the usable state of an object.</LI>
<LI>
an attributes field relating to other default behavior, such as how the object handles busy states when an application is waiting for a routine to finish.</LI>
</UL>
<P>
GenClass also implements scores of hints that can affect UI geometry, visual representation, data structures, and functions.</P>


<H2 CLASS="HeadingC">
GenApplicationClass</H2>
<P>
<CODE>
GenApplicationClass</CODE>
<A NAME="IX_GenApplicationClass:overview">
 </A>
 provides the basic functionality to open and close applications within GEOS. An object of this class serves as the top object in any application for GEOS.</P>


<H2 CLASS="HeadingC">
GenPrimaryClass</H2>
<P>
<CODE>
GenPrimaryClass</CODE>
<A NAME="IX_GenPrimaryClass:overview">
 </A>
 is a subclass of <CODE>
GenDisplayClass</CODE>
. The GenPrimary is the chief UI grouping object of an application, and it usually appears as the application's primary window. An application's GenPrimary object manages all controls and output areas that are invoked when an application is first launched. You will usually create a GenPrimary as the sole child of your GenApplication object.</P>


<H2 CLASS="HeadingC">
GenTriggerClass</H2>
<P>
<A NAME="IX_GenTriggerClass:overview">
 </A>
A GenTrigger is a simple pushbutton that executes an action when activated by the user. Typically, the trigger will have a moniker displayed within it and will be activated by a mouse click or by a special keystroke sequence. GenTriggers are very common in applications.</P>


<H2 CLASS="HeadingC">
GenInteractionClass</H2>
<P>
<A NAME="IX_GenInteractionClass:overview">
 </A>
GenInteraction objects are essentially grouping mechanisms. GenInteractions are the key objects for creating both menus and dialog boxes, and they can be used to organize the geometry of other generic objects. Typically, a GenInteraction will have a number of children, each of which will appear within the interaction on the screen. The Interaction itself may or may not have a visible representation.</P>


<H2 CLASS="HeadingC">
GenViewClass</H2>
<P>
<A NAME="IX_GenViewClass:overview">
 </A>
The GenView object provides a scrollable window in which the application has complete drawing control. Most applications will use a GenView, and many will use it in conjunction with a VisContent object. The View is extremely powerful, providing all clipping, scrolling, resizing, and scaling automatically. A View can even be splittable or linked to other views. The GenView can display either normal graphic documents or hierarchies of visible objects. </P>


<H2 CLASS="HeadingC">
List Classes</H2>
<P>
<A NAME="IX_GenDynamicListClass:overview">
 </A>
<A NAME="IX_GenItemGroupClass:overview">
 </A>
<A NAME="IX_GenItemClass:overview">
 </A>
<A NAME="IX_GenBooleanGroupClass:overview">
 </A>
<A NAME="IX_GenBooleanClass:overview">
 </A>
Together, GenBoolean, GenBooleanGroup, GenItem, GenItemGroup, and GenDynamicList provide many different types of lists. List objects may be used to create lists that are dynamic or static; scrollable or not; exclusive, non-exclusive, or otherwise. List objects may appear within menus or dialog boxes as well as within an application's primary window.</P>


<H2 CLASS="HeadingC">
GenValueClass</H2>
<P>
<A NAME="IX_GenValueClass:overview">
 </A>
The GenValue object allows the user to set a value within a particular range. This may be implemented as a slider, a spinner, or a pair of up/down buttons next to the value. Ranges may use scalar or distance values and can have their maximum and minimum values set by the application.</P>


<H2 CLASS="HeadingC">
GenTextClass</H2>
<P>
<CODE>
GenTextClass</CODE>
<A NAME="IX_GenTextClass:overview">
 </A>
 is tremendously versatile and can be used for text displays or text-edit fields. The GenText is used by nearly every application that either displays text or requires text input. It is so versatile and powerful that it can provide the power of an entire word processor without any additional code in the application.</P>
<P>
The GenText object supports selection and control of fonts, point sizes, text color, paragraph color, paragraph borders, margin settings, tab stops, manual leading, and character kerning, as well as several other features. The text library also provides several controllers that work with the GenText to allow the user to set all these features.</P>


<H2 CLASS="HeadingC">
Document and Document Control Classes</H2>
<P>
<A NAME="IX_GenDocumentControlClass:overview">
 </A>
<A NAME="IX_GenDocumentGroupClass:overview">
 </A>
<A NAME="IX_GenDocumentClass:overview">
 </A>
Together, <CODE>
GenDocumentClass</CODE>
, <CODE>
GenDocumentGroupClass</CODE>
, and <CODE>
GenDocumentControlClass</CODE>
 provide all the functions necessary to create, save, open, and edit document files. These classes provide not only the UI menus and tools (the File menu) but also the functions for managing the document files. Applications that use these classes never have to call routines to open, close, or save files--all that is done automatically, including the file selector mechanisms to aid the open and save-as functions.</P>
<P>
GenDocument objects are created and managed automatically by the GenDocumentGroup. Each document object represents a single file which has been opened or newly created by the user.</P>


<H2 CLASS="HeadingC">
Display and Display Control Classes</H2>
<P>
<A NAME="IX_GenDisplayControlClass:overview">
 </A>
<A NAME="IX_GenDisplayGroupClass:overview">
 </A>
<A NAME="IX_GenDisplayClass:overview">
 </A>
Together, the GenDisplay, GenDisplayGroup, and GenDisplayControl provide display windows and the UI gadgetry to manage them. Typically, these objects will be used in conjunction with the document and document control objects to provide one display for each document.</P>
<P>
The GenDisplayGroup object creates and manages multiple GenDisplay document windows. The GenDisplayControl object creates and maintains a Window menu to allow the user to operate on the individual displays. If your application will have multiple documents or multiple displays open, you will want to use these objects.</P>


<H2 CLASS="HeadingC">
GenControlClass and UI Controllers</H2>
<P>
<CODE>
GenControlClass</CODE>
<A NAME="IX_GenControlClass:overview">
 </A>
 is used to create UI controller objects. Applications will most likely not use <CODE>
GenControlClass</CODE>
 directly, though some object libraries might. For example, the Text Library uses controller objects for font control, point size control, and style control, among other things. Any application that uses the Text Library can include the font controller object; the user will then be able to select and apply fonts without the application having to do any work to support it.</P>
<P>
The UI and various libraries provide many controllers you can use immediately. Some examples are the <CODE>
GenEditControlClass</CODE>
, which creates and maintains the Edit menu and tools; <CODE>
ColorSelectorClass</CODE>
, which creates and displays UI gadgetry to set color information; and <CODE>
GenViewControlClass</CODE>
, which creates and maintains a View menu allowing the user to set scaling and scrolling behavior.</P>


<H2 CLASS="HeadingC">
GenToolControlClass</H2>
<P>
<CODE>
GenToolControlClass</CODE>
<A NAME="IX_GenToolControlClass:overview">
 </A>
 lets the user select which of an application's tools are available and where they should be placed (in a toolbox, in a menu, etc.). Tools are provided by UI controllers. Typically, an application that uses controllers will provide several tool areas and a GenToolControl; the GenToolControl will automatically create all the UI gadgetry to let the user select which tools are active and where they will appear.</P>


<H2 CLASS="HeadingC">
GenFileSelectorClass</H2>
<P>
<A NAME="IX_GenFileSelectorClass:overview">
 </A>
The GenFileSelector provides user interface to allow the user to navigate through his or her file system. It is used most often by the document control objects and is used directly by only some applications.</P>


<H2 CLASS="HeadingC">
GenGlyphClass</H2>
<P>
<A NAME="IX_GenGlyphClass:overview">
 </A>
GenGlyph displays simple text or graphics strings. Text displayed by a Glyph object is not selectable or editable; these objects are typically used for labeling areas or items on the screen.</P>


<H2 CLASS="HeadingC">
GenContentClass</H2>
<P>
<CODE>
GenContentClass</CODE>
<A NAME="IX_GenContentClass:overview">
 </A>
 is used with a GenView to display other generic UI objects within a scrollable window. The GenContent is rarely used because having some of an application's UI objects not visible can confuse some users. More often, a GenDocument is used as the view's content; <CODE>
GenDocumentClass</CODE>
 is subclassed from the GenContent.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="UIOverview_3.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="UIOverview_3.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Using the Generic Classes</A> 
<!-- to next --> | <A HREF="UIOverview_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Creating a Generic Object Tree</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
