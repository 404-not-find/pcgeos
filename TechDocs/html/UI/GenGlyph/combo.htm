<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>GenGlyph</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
GenGlyph

</H1>
<P>
<A NAME="index.htm_IX_GenGlyphClass">
 </A>
The GenGlyph object allows you to easily display single lines of text without using a more complex GenText object. A GenGlyph can be thought of as a label in which you can display text but which offers no other functionality.</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Monikers_1.htm">1 GenGlyph Features</A><BR>
&nbsp;&nbsp;<A HREF="#Monikers_2.htm">2 GenGlyph Basics</A><BR>
&nbsp;&nbsp;<A HREF="#Monikers_3.htm">3 Modifying a GenGlyph</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Monikers_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenGlyph</A>: 1 
GenGlyph Features</H2>
<P>
Applications often display simple lines of text. Text might request the user to make a selection. Text can alert the user to a certain application condition. The GenGlyph offers a simple, easy to use text display object. 
<IMG SRC="Monikers_1_dump.gif">

</P>
<P>
One other generic object, GenText, provides a powerful means to display text with functions such as word-wrapping, font scalability, and an arbitrarily large buffer size. If you do not need such a versatile and powerful text display capability, however, it is wiser and easier to use a GenGlyph. This object only displays text in the default font and style for your application.</P>
<HR>
<A NAME="Monikers_2.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenGlyph</A>: 2 
GenGlyph Basics</H2>
<P>
The GenGlyph object does not, by itself, offer any instance fields or messages. The functionality of a GenGlyph object is included entirely within the instance fields and messages of its superclass, <CODE>
GenClass</CODE>
.</P>
<P>
Unlike text within a GenText, the text of a GenGlyph is taken solely from the object's <CODE>
GI_visMoniker</CODE>
. Therefore, the primary use of a GenGlyph lies in its visual moniker. Any <CODE>
GenClass</CODE>
 messages dealing with an object's visual moniker will modify the appearance of a GenGlyph.</P>
<P>
A GenGlyph does not allow word-wrapping; if your text may be longer than the object's horizontal constraints, either break up the lines of text into smaller, single-line GenGlyphs or use a GenText object. 

</P>
<P CLASS="figTitle">
Code Display 6-1 Using Hints to Manage GenGlyphs</P>
<PRE>/* This code will duplicate the display shown above */</PRE>
<PRE>@object GenInteractionClass DiskCopyBox = {
    GI_comp = @DiskCopyHeader, @SourceSelection, @DestinationSelection;
    GII_visibility = GIV_DIALOG;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/* The DiskCopyHeader will be the line of instructional text. */</PRE>
<PRE>@object GenGlyphClass DiskCopyHeader = {
    GI_visMoniker = &quot;Select source and destination for disk copy:&quot;;
    HINT_CENTER_MONIKER;			/* Centers the moniker horizontally. */
}</PRE>
<PRE>/* These objects will form the &quot;Source&quot; line. */</PRE>
<PRE>@object GenInteractionClass SourceSelection = {
    GI_comp = @SourceText, @SourceList;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_CENTER_MONIKER;
}</PRE>
<PRE>/* This group of objects will form the &quot;Destination&quot; line. */</PRE>
<PRE>@object GenInteractionClass DestinationSelection = {
    GI_comp = @DestinationText, @DestinationList;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_CENTER_MONIKER;
}</PRE>
<PRE>/* For simplicity, the List objects are not shown. */</PRE>
<PRE>@object GenGlyphClass SourceText = {
    GI_visMoniker = &quot;Source:&quot;;
}</PRE>
<PRE>@object GenGlyphClass DestinationText = {
    GI_visMoniker = &quot;Destination:&quot;;
}</PRE>
<HR>
<A NAME="Monikers_3.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenGlyph</A>: 3 
Modifying a GenGlyph</H2>
<P>
You may wish at some point to change the text in a GenGlyph. Because a GenGlyph's text is entirely within its visual moniker, it is a simple matter to use <CODE>
GenClass</CODE>
 messages to change the moniker dynamically. Use <CODE>
MSG_GEN_GET_VIS_MONIKER</CODE>
 to return a GenGlyph's current moniker; use <CODE>
MSG_GEN_USE_VIS_MONIKER</CODE>
 (or <CODE>
MSG_GEN_REPLACE_VIS_MONIKER</CODE>
) to set a new moniker for a GenGlyph. Doing so will ensure that the object is visually rebuilt with the new moniker.
<IMG SRC="Monikers_3_monikerChange.gif">

</P>
<P CLASS="figTitle">
Code Display 6-2 <A NAME="Monikers_3.htm_65090">
 </A>
A Toggle On/Off Switch Dialog Box</P>
<PRE>@object GenInteractionClass MyDialogBox = {
    GI_comp = @DialogText, @DialogButton;
    GII_visibility = GIV_DIALOG;
}</PRE>
<PRE>/* Monikers for the Instructions (the GenGlyphs). */</PRE>
<PRE>@visMoniker OnTextMoniker = &quot;Click the `ON' button&quot;;
@visMoniker OffTextMoniker = &quot;Click the `OFF' button&quot;;</PRE>
<PRE>/* Monikers for the triggers. */</PRE>
<PRE>@visMoniker OnButtonMoniker = &quot;ON&quot;;
@visMoniker OffButtonMoniker = &quot;OFF&quot;;</PRE>
<PRE>/* The object begins in the &quot;On&quot; state. */</PRE>
<PRE>@object GenGlyphClass DialogText = {
    GI_vismoniker = @OnTextMoniker;
}</PRE>
<PRE>/* Whenever the button is pressed, MSG_FLIP_THE_SWITCH will change both the glyph
 * and the trigger monikers. */</PRE>
<PRE>@object GenTriggerClass DialogButton = {
    GI_visMoniker = @OnButtonMoniker;
    GTI_actionMsg = MSG_FLIP_THE_SWITCH;
    GTI_destination = process;
}</PRE>
<PRE>@method MyProcessClass, MSG_FLIP_THE_SWITCH {
    ChunkHandle testMoniker;				/* Stores the temporary moniker. */</PRE>
<PRE>    testMoniker = @call DialogButton::MSG_GEN_GET_VIS_MONIKER;</PRE>
<PRE>/* If the moniker is &quot;ON&quot;, turn both it and the glyph to the Off monikers.
 * Otherwise (the moniker is &quot;OFF&quot;), turn both it and the glyph to the On
 * monikers. Both visual updates are delayed via the UI queue (and will therefore
 * be updated at the same time rather than separately) to avoid flashing. */</PRE>
<PRE>    if (testMoniker == &quot;ON&quot;) {
	@call DialogButton::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@OffButtonMoniker),
						VUM_DELAYED_VIA_UI_QUEUE);
	@call DialogText::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@OffTextMoniker),
    						VUM_DELAYED_VIA_UI_QUEUE);
    }
    else {
	@call DialogButton::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@OnButtonMoniker),
				VUM_DELAYED_VIA_UI_QUEUE);
	@call DialogText::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@OnTextMoniker),
				VUM_DELAYED_VIA_UI_QUEUE);
	}</PRE>
<PRE>    }<A NAME="Monikers_3.htm_marker=277194"> </A></PRE>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
