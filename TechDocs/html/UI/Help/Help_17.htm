<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Help_17.htm,v 1.1 97/06/02 16:34:50 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> HelpControlClass Reference</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Help Object Library</A>: 5 
<A NAME="24795">
 </A>
<A NAME="IX_HelpControlClass">
 </A>
HelpControlClass Reference</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Help_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4 Creating Help Files</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
This section will only be useful if you plan on customizing help for your application. Nearly all of what you need for creating normal help files and adding help to your application is described in the previous sections. The following is detailed reference information for <CODE>
HelpControlClass</CODE>
 (shown in <A HREF="Help_17.htm#23375"> HelpControlClass</A>
).</P>
<P CLASS="figTitle">
Code Display 13-3 <A NAME="23375">
 </A>
HelpControlClass</P>
<PRE>	@instance HelpType			<A NAME="IX_HCI_helpType"> </A>HCI_helpType;			/* See HelpType, below */
	@instance MemHandle			HCI_curFile;			/* Internal */
	@instance MemHandle			HCI_historyBuf;			/* Internal */
	@instance word			HCI_nameArrayVM;			/* Internal */
	@instance GeodeHandle			HCI_compressLib;			/* Internal */
	    @default GII_attrs = (@default | GIA_NOT_USER_INITIATABLE);
	    @default GII_visibility = GIV_DIALOG;</PRE>
<PRE>	@vardata void				<A NAME="IX_ATTR_HELP_SUPPRESS_INITIATE"> </A>ATTR_HELP_SUPPRESS_INITIATE;
	@vardata char[]				<A NAME="IX_ATTR_HELP_INITIAL_HELP"> </A>ATTR_HELP_INITIAL_HELP;
	@vardata optr				<A NAME="IX_ATTR_HELP_CUSTOM_POINTER_IMAGE"> </A>ATTR_HELP_CUSTOM_POINTER_IMAGE;
	@vardata CompSizeHintArgs 				<A NAME="IX_HINT_HELP_TEXT_FIXED_SIZE"> </A>HINT_HELP_TEXT_FIXED_SIZE;
	@vardata void				<A NAME="IX_HINT_HELP_NOT_RESIZABLE"> </A>HINT_HELP_NOT_RESIZABLE;
	@vardata char[]				<A NAME="IX_ATTR_HELP_INITIAL_HELP_FILE"> </A>ATTR_HELP_INITIAL_HELP_FILE;</PRE>
<PRE>typedef ByteEnum <A NAME="IX_HelpType"> </A>HelpType;
    #define HT_NORMAL_HELP				0
    #define HT_FIRST_AID				1
    #define HT_STATUS_HELP				2
    #define HT_SIMPLE_HELP				3
    #define HT_SYSTEM_HELP				4	/* Reserved for system use */</PRE>
<PRE>/* Internal Vardata fields--do not use these. */
	@vardata char[]			TEMP_HELP_ERROR_FILENAME;
	@vardata char[]			TEMP_HELP_TOC_FILENAME;
	@vardata void			TEMP_HELP_DETACH_RECEIVED;</PRE>
<P>
<CODE>
HelpControlClass</CODE>
 is a subclass of <CODE>
GenControlClass</CODE>
 and, as such, inherits the feature management attributes and messages thereof. For complete information on feature and tool sets, see <A HREF="../../SysObjects/Controllers/Controllers_1.htm#39608">the Controllers chapter</A>. The HelpControl object has features but no tools. The feature set of <CODE>HelpControlClass</STRONG>
 is shown in <A HREF="Help_17.htm#84556"> HelpControl Features</A>
.</P>
<P CLASS="figTitle">
Code Display 13-4 <A NAME="84556">
 </A>
HelpControl Features</P>
<PRE>/* These features can be turned on or off with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI. They can be turned on or off dynamically with
 * MSG_GEN_CONTROL_ADD_FEATURE and MSG_GEN_CONTROL_REMOVE_FEATURE. */</PRE>
<PRE>typedef WordFlags <A NAME="IX_HPCFeatures"> </A>HPCFeatures;
    #define HPCF_HELP					0x0100	/* has a &quot;help on help&quot; trigger */
    #define HPCF_TEXT					0x0080	/* has text */
    #define HPCF_CONTENTS					0x0040	/* has &quot;Contents&quot; button */
    #define HPCF_HISTORY					0x0020	/* has &quot;History&quot; button */
    #define HPCF_GO_BACK					0x0010	/* has &quot;Go Back&quot; button */
    #define HPCF_CLOSE					0x0008	/* has &quot;Close&quot; button */
    #define HPCF_INSTRUCTIONS					0x0004	/* has &quot;Instructions&quot; button */
    #define HPCF_FIRST_AID_GO_BACK					0x0002	/* has &quot;Go Back&quot; button for
						 * First Aid */
    #define HPCF_FIRST_AID					0x0001	/* has First Aid configuration */</PRE>
<P>
<CODE>
HelpControlClass</CODE>
, as a GenControl subclass, receives notification when the controlled item changes. For example, a change in help context will cause the HelpControl object to display the new context page. The HelpControl object must be put on the <A NAME="IX_GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE">
 </A>
GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE notification list. When a context change occurs, the help controller will receive <CODE>
MSG_META_NOTIFY_WITH_DATA_BLOCK</CODE>
, with the notification type GWNT_HELP_CONTEXT_CHANGE<A NAME="IX_GWNT_HELP_CONTEXT_CHANGE">
 </A>
. This notification type passes a data block containing a <CODE>
NotifyHelpContextChange</CODE>
 structure, which is shown below.</P>
<P CLASS="figTitle">
Code Display 13-5 Help Notification Structure</P>
<PRE>/* This data structure is passed in MSG_META_NOTIFY_WITH_DATA_BLOCK to the help
 * controller when a change in the help context occurs. This structure can be
 * generated by calling HelpSendHelpNotification(). This structure uses the
 * following constant and type. */</PRE>
<PRE>#define MAX_CONTEXT_NAME_SIZE				22</PRE>
<PRE>typedef char		ContextName[MAX_CONTEXT_NAME_SIZE];</PRE>
<PRE>typedef struct {
    HelpType			NHCC_type;			/* HelpType involved in change */
    ContextName			NHCC_context;			/* New context to link to */
    FileLongName			NHCC_filename;			/* New file name to link to */
    FileLongName			NHCC_filenameTOC;			/* File name to get TOC from */
} <A NAME="IX_NotifyHelpContextChange"> </A>NotifyHelpContextChange;</PRE>
<P>
<CODE>
HelpControlClass</CODE>
 has two exported messages that subclasses may intercept. These are not often intercepted by subclasses. Their reference information is presented below.</P>

<H5 CLASS="RefETitle">
<A NAME="IX_MSG_HELP_CONTROL_FOLLOW_LINK">
 </A>
MSG_HELP_CONTROL_FOLLOW_LINK</H5>
<P>
Cause the HelpControl object to follow the specified link in the help file.</P>
<P CLASS="refField">
Source:	Unrestricted; typically internal to the controller.</P>
<P CLASS="refField">
Destination:	The HelpControl object to follow the link.</P>
<P CLASS="refField">
Parameters:	<CODE>
link name</CODE>
	16-bit token of the link name.</P>
<DL>
<DT>
<CODE>
link file</CODE>
</DT><DD>16-bit token of the link file.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Not generally intercepted.</P>


<H5 CLASS="RefETitle">
<A NAME="27109">
 </A>
<A NAME="MSG_HELP_CONTROL_GET_POINTER_IMAGE">
 </A>
MSG_HELP_CONTROL_GET_POINTER_IMAGE</H5>
<P>
Return the pointer image to be used when the pointer is over a link in the help text. It looks for <CODE>
ATTR_HELP_CUSTOM_POINTER_IMAGE</CODE>
 and returns the pointer stored there; if no custom pointer exists, the default is returned.</P>
<P CLASS="refField">
Source:	Unrestricted; typically internal to the controller.</P>
<P CLASS="refField">
Destination:	The HelpControl object using the custom pointer.</P>
<P CLASS="refField">
Parameters:	<CODE>
not over link</CODE>
	Pass FALSE if the pointer is <EM>
not</EM>
 over a link, TRUE if it is. (Must pass TRUE, not just non-zero).</P>
<P CLASS="refField">
Return:	A word of <CODE>
MouseReturnFlags</CODE>
. If MRF_SET_POINTER_IMAGE is set in this record, the optr of the pointer image will also be returned. Otherwise, the optr will be NullOptr.</P>
<P CLASS="refField">
Interception:	A &quot;viewer&quot; application may subclass this and return its own pointer images if they are dynamic. If static pointer images are used, the application should use <CODE>
ATTR_HELP_CUSTOM_POINTER_IMAGE</CODE>
 instead. There is no need to call the superclass with this message<A NAME="marker=57469">
 </A>
.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Help_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4 Creating Help Files</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
