<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Menus_15.htm,v 1.1 97/06/02 16:27:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> InteractionCommand Types</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Menus and Dialog Boxes</A>: 5.1 <A HREF="Menus_14.htm">Interaction Commands</A>: 
<A NAME="40133">
 </A>
InteractionCommand Types</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_14.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_14.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">5 Interaction Commands</A> 
<!-- to next --> | <A HREF="Menus_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5.2 Dialog Control</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Many of these <CODE>
InteractionCommand</CODE>
s are sent out by standard response triggers provided with the Specific UI. Different types of Interactions may provide different standard response triggers with <CODE>
InteractionCommand</CODE>
s. For example, the &quot;OK&quot; trigger for a GIT_NOTIFICATION dialog box in OSF/Motif sends out the <CODE>
InteractionCommand</CODE>
 IC_OK. </P>
<P>
The <CODE>
InteractionCommand</CODE>
 represents the actions that can be performed on an Interaction. The predefined commands are as follows:</P>
<UL>
<LI>
IC_NULL<BR>
This <CODE>
InteractionCommand</CODE>
 is a special case for alerting a <CODE>
UserDoDialog()</CODE>
 or <CODE>
UserStandardDialog()</CODE>
 dialog box that it is being dismissed because of system shutdown. Because of thread blocking, you should always check for this case to occur in any <CODE>
UserDoDialog()</CODE>
 routines. You should never set any custom triggers to this <CODE>
InteractionCommand</CODE>
.</LI>
<LI>
IC_DISMISS<BR>
This command instructs the UI to dismiss the Interaction. An Interaction receiving this command will come down whether or not the user has selected the Interaction to remain up (such as by pinning the dialog box). </LI>
<LI>
IC_APPLY<BR>
This command instructs the UI to apply properties selected within a GIT_PROPERTIES Interaction. This <CODE>
InteractionCommand</CODE>
 causes <CODE>
MSG_GEN_APPLY</CODE>
 to be sent to the Interaction's children.</LI>
<LI>
IC_RESET<BR>
This command instructs the UI to reset properties within a GIT_PROPERTIES Interaction. This <CODE>
InteractionCommand</CODE>
 causes <CODE>
MSG_GEN_RESET</CODE>
 to be sent to the Interaction's children.</LI>
<LI>
IC_OK<BR>
This command instructs the UI to signal an acknowledgment to a GIT_NOTIFICATION Interaction. </LI>
<LI>
IC_YES<BR>
This command instructs the UI to signal a positive response to a GIT_AFFIRMATION Interaction. </LI>
<LI>
IC_NO<BR>
This command instructs the UI to signal a negative response to a GIT_AFFIRMATION Interaction.</LI>
<LI>
IC_STOP<BR>
This command instructs the UI to halt a GIT_PROGRESS Interaction.</LI>
<LI>
IC_EXIT<BR>
This command instructs the UI to exit the application (not just the window). This <CODE>
InteractionCommand</CODE>
 is only supported for GenTriggers under GIV_POPUP GenInteractions. This value should only be used with ATTR_GEN_TRIGGER_INTERACTION_COMMAND.</LI>
<LI>
IC_HELP<BR>
This command instructs the UI to bring up the proper help context for this dialog. This value should only be used with ATTR_GEN_TRIGGER_INTERACTION_COMMAND.</LI>
<LI>
IC_INTERACTION_COMPLETE<BR>
This command notifies the UI that an interaction has been completed. This <CODE>
InteractionCommand</CODE>
 is sent out by any trigger with the attribute GA_SIGNAL_INTERACTION_COMPLETE <EM>
before</EM>
 the trigger's main action has been sent out. Note that this <CODE>
InteractionCommand</CODE>
 is <EM>
always</EM>
 sent out in addition to another IC. You should never set any custom triggers to this <CODE>
InteractionCommand</CODE>
.</LI>
</UL>
<P>
IC_DISMISS, IC_APPLY, IC_RESET, IC_OK, IC_YES, IC_NO, and IC_STOP correspond to standard response triggers provided with the Specific UI for dialogs of various <CODE>
GenInteractionType</CODE>
. (See <A HREF="Menus_9.htm#39653"> GenInteraction Types</A>
.)</P>
<P>
You may replace any of these standard response triggers by adding your own triggers with an <CODE>
InteractionCommand</CODE>
. You should do this by setting the trigger's ATTR_GEN_TRIGGER_INTERACTION_COMMAND vardata to the proper <CODE>
InteractionCommand</CODE>
 to replace. (See <A HREF="Menus_18.htm#63221"> Replacing Default Triggers</A>
.)</P>

<H2 CLASS="HeadingC">
Adding Custom Response Triggers</H2>
<P>
In some cases, you may want to add your own response triggers. In many of these cases, a trigger tied to one of the predefined <CODE>
InteractionCommand</CODE>
s will be sufficient for your needs. If a dialog box does not contain one of the pre-defined response triggers by default, you can add any of these yourself. </P>
<P>
You are not limited to one of these predefined types, however. <CODE>
UserDoDialog()</CODE>
 and GIT_MULTIPLE_RESPONSE <CODE>
UserStandardDialog</CODE>
<CODE>
()</CODE>
 allow you to define your own <CODE>
InteractionCommand </CODE>
types. Applications can define their own <CODE>
InteractionCommand</CODE>
 by starting an enumeration at the special value IC_CUSTOM_START. This is to avoid conflicting with other predefined values, which still have their usual meaning to the dialog.</P>
<P CLASS="figTitle">
Code Display 7-23 Using IC_CUSTOM_START</P>
<PRE>/* You may define values directly. */</PRE>
<PRE>#define IC_SAVE_FILE IC_CUSTOM_START+1;
#define IC_KILL_FILE IC_CUSTOM_START+2;</PRE>
<PRE>/* You may also use typedef to enumerate those values. */</PRE>
<PRE>typedef enum {
    IC_SAVE_FILE = IC_CUSTOM_START+1,
    IC_KILL_FILE = IC_CUSTOM_START+2
} MyInteractionCommand;</PRE>
<PRE>/* Any triggers set up with these InteractionCommands would appear like so: */</PRE>
<PRE>@object GenTriggerClass MyTrigger = {
    GI_visMoniker = &quot;Save File&quot;;
    ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_SAVE_FILE };
    HINT_SEEK_REPLY_BAR;
}</PRE>
<PRE>/* An Interaction invoked with UserDoDialog() (with MyTrigger as one of its
 * children) will return IC_SAVE_FILE when that trigger is activated. Your
 * application can then perform any required actions. */</PRE>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_14.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_14.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">5 Interaction Commands</A> 
<!-- to next --> | <A HREF="Menus_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5.2 Dialog Control</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
