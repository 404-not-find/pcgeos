<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Menus_11.htm,v 1.2 97/09/05 14:14:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Modality for Dialogs</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Menus and Dialog Boxes</A>: 4.3 <A HREF="Menus_e.htm">Supplemental Usage</A>: 
<A NAME="82521">
 </A>
Modality for Dialogs</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_e.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.2 Dismissing Interactions</A> 
<!-- to next --> | <A HREF="Menus_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.4 Managing Input</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MSG_GEN_INTERACTION_TEST_INPUT_RESTRICTABILITY</PRE>
<P>
By default, GIV_DIALOG GenInteractions appear as non-modal windows. You may specify a dialog Interaction to appear as modal by setting either the GIA_MODAL attribute in the <CODE>
GII_attrs</CODE>
 instance data field or by adding <CODE>
HINT_INTERACTION_MODAL</CODE>
 in the object's vardata. When a modal dialog is displayed, input to all other parts of the application will be ignored until the dialog is dismissed. In OSF/Motif, modal dialogs will appear with thick borders.
<IMG SRC="Menus_11_modal.gif">

</P>
<P>
You should use GIA_MODAL dialogs when the application depends on an Interaction being modal to operate correctly. For example, if a dialog shows information about the current selection but the application cannot update that information if the user were to change the current selection, you should use a GIA_MODAL dialog.</P>
<P>
<A NAME="IX_HINT_INTERACTION_MODAL">
 </A>
You should use <CODE>
HINT_INTERACTION_MODAL</CODE>
 dialogs for cases where the modality of a dialog simplifies the interface between the application and the user but is not needed for the application's correct operation. The Interaction's modality in this case will make the UI clearer and simpler for the user to understand. For example, a dialog for setting obscure options that is brought up from a command dialog might be marked HINT_INTERACTION_MODAL so that the user is forced to set the options before returning to the command dialog. This will prevent the user from using this dialog box in a context where the options are not self-evident. As with all hints, the Specific UI may decide to ignore the hint and implement a HINT_INTERACTION_MODAL dialog with a non-modal dialog. </P>
<P>
You may also initiate a modal dialog with <CODE>
UserDoDialog()</CODE>
. Such a dialog must have both the GIA_INITIATED_VIA_USER_DO_DIALOG and GIA_MODAL attributes set. Using this routine not only blocks input to other parts of the application but blocks the calling thread's execution until the dialog is dismissed. <CODE>
UserDoDialog()</CODE>
 is useful for displaying notifications where the user's response is required before the application's thread may continue. For more information, see <A HREF="Menus_13.htm#75893"> Thread Blocking Routines</A>
.</P>
<P>
Dialogs displayed with <CODE>
UserStandardDialog()</CODE>
 and <CODE>
UserStandardDialogOptr()</CODE>
 are also modal. Both will block the calling thread until the dialog is dismissed. (See <A HREF="Menus_13.htm#75893"> Thread Blocking Routines</A>
.)</P>
<P>
Some modal dialogs will have subcomponents such as pop-up lists that must be interactable while the dialog is modal. The GenApplication object running the modal dialog will query the dialog to test both its input restrictions and its interactability in these cases; it uses two messages, described below.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_INTERACTION_TEST_INPUT_RESTRICTABILITY">
 </A>
MSG_GEN_INTERACTION_TEST_INPUT_RESTRICTABILITY</H4>
<PRE CLASS="syntax">Boolean	MSG_GEN_INTERACTION_TEST_INPUT_RESTRICTABILITY(
        optr	obj);</PRE>
<P>
This message is called on a modal window by a GenApplication object to find out whether or not the various input restricting mechanisms (input hold-up, input ignore, busy states, etc.) should be overridden or not.</P>
<P CLASS="refField">
Source:	Part of the input flow/modality mechanism--sent by the GenApplication object to the modal window.</P>
<P CLASS="refField">
Destination:	The modal GenInteraction object.</P>
<P CLASS="refField">
Parameters:	obj	The optr of the windowed object that may or may not be restricted.</P>
<P CLASS="refField">
Return:	Will return <CODE>
true</CODE>
 if input restrictions should be overridden, false otherwise. A <CODE>
true</CODE>
 return value indicates that mouse and keyboard input will flow to the object regardless of hold-up, ignore, or busy states.</P>
<P CLASS="refField">
Interception:	May be intercepted to allow the passed windowed object to override its input restrictions in certain cases.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_e.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.2 Dismissing Interactions</A> 
<!-- to next --> | <A HREF="Menus_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.4 Managing Input</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
