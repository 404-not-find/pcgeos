<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Menus_c.htm,v 1.1 97/06/02 16:29:08 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Visibilities</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Menus and Dialog Boxes</A>: 3.1 <A HREF="Menus_b.htm">GenInteraction Usage</A>: 
Visibilities</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_b.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 GenInteraction Usage</A> 
<!-- to next --> | <A HREF="Menus_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Types</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
When first creating an Interaction, you must decide in what form to visually present your communication between the application and the user. This concern may be somewhat cosmetic in form but may also affect the functionality of the Interaction itself. For instance, more than one <CODE>
GenInteractionType</CODE>
 will support different actions with different visibility types.</P>

<H2 CLASS="HeadingC">
GenInteraction Sub-Groups (GIV_SUB_GROUP)</H2>
<P>
<A NAME="IX_GIV_SUB_GROUP">
 </A>
The simplest GenInteraction is one used to arrange the geometry of other objects. To do this, a GenInteraction should be GIV_SUB_GROUP (the default).</P>
<P>
You can use hints provided in <CODE>
GenClass</CODE>
 to arrange the appearance of objects within the GenInteraction. Interactions usually provide the greatest flexibility for geometry manipulation. For full information, see <A HREF="../../UI/Geometry/index.htm">the Managing UI Geometry chapter</A>.</P><P>
Note that a GIV_SUB_GROUP Interaction may only appear within a parent window as it is not itself independently displayable.</P>
<P CLASS="figTitle">
Code Display 7-4 Arranging a Group of Children</P>
<PRE>/* This Interaction creates a typical number keypad arrangement. */</PRE>
<PRE>@object GenInteractionClass MyKeyPad = {
	/* The Interaction by default is GIV_SUB_GROUP and GIT_ORGANIZATIONAL,
	 * so there is no need to set these types. */
    GI_comp = Row789, Row456, Row123;
	/* The Interaction's three children will be arranged vertically. The
	 * UI will also draw a border around the Interaction itself. */
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_DRAW_IN_BOX;
}</PRE>
<PRE>@object GenInteractionClass Row789= {
    GI_comp = Key7, Key8, Key9;
	/* Each row is then arranged horizontally to gain three rows
	 * of three items each. */
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>@object GenInteractionClass Row456= {
    GI_comp = Key4, Key5, Key6;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>@object GenInteractionClass Row123= {
    GI_comp = Key1, Key2, Key3;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>/* Each of the child `keys' will be a GenTrigger with appropriate visual
 * moniker. (For simplicity, only one trigger is shown here.) */</PRE>
<PRE>@object GenTriggerClass Key9 = {
    GI_visMoniker = &quot;9&quot;;
}</PRE>
<P>
Many hints from <CODE>
GenClass</CODE>
 may affect the appearance of GIV_SUB_GROUP Interactions. See <A HREF="../../UI/Geometry/index.htm">the Managing UI Geometry chapter</A> for details. </P><P>
Of special interest to sub-group Interactions is <CODE>
HINT_DRAW_IN_BOX</CODE>
. This hint will enclose the associated Interaction within a line border. You should use this hint when you wish to distinguish a collection of objects within an Interaction from some other objects.</P>


<H2 CLASS="HeadingC">
GenInteractions as Menus (GIV_POPUP)</H2>
<P>
<A NAME="IX_GIV_POPUP">
 </A>
Most specific UIs implement GIV_POPUP as a menu. Menus are interactions with options that only appear when the menu is activated by the user. Popups make it possible for a user to browse and choose among a variety of commands without cluttering up the UI with dozens of objects. A popup may appear at almost any location within the UI. If a popup is placed as a direct child of a GenPrimary, it may appear in an appropriate menu bar location across the top of the window. </P>
<P>
A popup is most often one of GIT_ORGANIZATIONAL, GIT_PROPERTIES, or GIT_COMMAND. (See <A HREF="Menus_9.htm#39653"> GenInteraction Types</A>
.) What type of popup you select depends on the type of children the Interaction contains. For example, an application may implement a font menu as a GIT_PROPERTIES popup. A GIT_COMMAND popup might issue commands relating to the appearance of text within a text editor. Depending on the <CODE>
GenInteractionType</CODE>
, a popup may appear in forms other than a menu. (The specific UI has final say over the appearance of a popup.)</P>
<P>
A GIV_POPUP Interaction must contain a group of children. If the Interaction appears as a menu, these children will become menu items. Most often, these children will be GenTriggers or GenItems within GenItemGroups.</P>
<P CLASS="figTitle">
Code Display 7-5 Using a GenInteraction to Create a Menu</P>
<PRE>/* This example is taken from the Hello World sample application. */</PRE>
<PRE>@object GenInteractionClass HelloMenu = {
    GI_visMoniker = 'M', &quot;Menu&quot;;					/* The moniker of the menu is used in
					 * the primary window's menu bar (if the
					 * specific UI employs a menu bar). */
    GI_comp = @HelloColorBox;					/* The only child of the menu (the only
					 * item in the menu) is the dialog box. */
    GII_visibility = GIV_POPUP;					/* This attribute designates the
					 * interaction as a menu or a sub-menu. */
}</PRE>
<PRE>@object GenInteractionClass HelloColorBox = {
    GI_comp = @HelloBlueTrigger, @HelloGoldTrigger;
    GI_visMoniker = 'C', &quot;Color&quot;;
    GII_visibility = GIV_DIALOG;
}</PRE>
<PRE>@object GenTriggerClass HelloBlueTrigger = {
    GI_visMoniker = 'B', &quot;Blue&quot;;				/* The 'B' indicates the keyboard navigation
				 * character for this trigger. */
    GTI_destination = process;				/* Send the message to the Process object. */
    GTI_actionMsg = MSG_HELLO_CHANGE_TO_BLUE;						/* Send this message. */
}</PRE>
<PRE>@object GenTriggerClass HelloGoldTrigger = {
    GI_visMoniker = 'G', &quot;Gold&quot;;				/* The 'G' indicates the keyboard navigation
				 * character for this trigger. */
    GTI_destination = process;				/* Send the message to the Process object. */
    GTI_actionMsg = MSG_HELLO_CHANGE_TO_GOLD;						/* Send this message. */
}</PRE>
<P>
If a child of the GIV_POPUP Interaction is another Interaction, the specific UI might change the visual implementation of that child. What change takes place depends on the specific UI. In OSF/Motif, for example, placing a sub-group Interaction within a popup Interaction causes the UI to draw lines separating the sub-group from the other children in the popup. (You may prevent this line by adding <CODE>
HINT_SAME_CATEGORY_AS_PARENT</CODE>
.)

</P>
<P>
Placing a popup interaction within another popup is a special case and will create nested menus under most specific UIs. To do this, merely create a GIV_POPUP Interaction as a child of another GIV_POPUP Interaction. The specific UI will automatically create the second menu as a sub-menu of the first. The item in the menu bringing up the sub-menu may be labeled with an arrow under certain specific UIs. Menus may be nested to an arbitrary number of levels. 

</P>
<P CLASS="figTitle">
Code Display 7-6 Nested Menus</P>
<PRE>@object GenInteractionClass TextMenu = {
    GI_comp = @JustificationSubMenu;
    GI_visMoniker = `T', &quot;Text&quot;;
    GII_visibility = GIV_POPUP;
}</PRE>
<PRE>@object GenInteractionClass JustificationMenu = {
    GI_comp = @JustificationList;
    GI_visMoniker = `J', &quot;Justification&quot;;
    GII_visibility = GIV_POPUP;
}</PRE>
<PRE>@object GenItemGroupClass JustificationList = {
    GI_comp = @LeftEntry, @RightEntry, @CenterEntry, @FullEntry;
	/* These children are not shown. */
}</PRE>
<P>
List Objects (GenItemGroups and GenBooleanGroups) within a GIV_POPUP Interaction may be used to show object properties in a menu. The menu should be GIT_PROPERTIES in this case. Depending on the Specific UI, a properties menu may be implemented in a different fashion from other menus. (In OSF/Motif, there is no visual difference between a properties menu and other menus.) Other types have no effect on the behavior or appearance of GIV_POPUPs.</P>


<H2 CLASS="HeadingC">
GenInteractions as Dialog Boxes (GIV_DIALOG)</H2>
<P>
<A NAME="IX_GIV_DIALOG">
 </A>
The GIV_DIALOG visibility will instruct the specific UI to build the Interaction as a dialog box. A dialog box is an independently-displayable interface element used to display information or other UI objects. Therefore, it is similar to a window although there are some differences. (Most dialog boxes, for example, are not resizable whereas most windows are.)</P>
<P>
Dialog boxes also enhance the functionality of other<CODE>
 GenInteractionType</CODE>
s. Many GII<CODE>
_types</CODE>
 are only significant as dialog boxes. For example, a GIT_NOTIFICATION Interaction will only appear with an &quot;OK&quot; trigger if it is also a dialog box. A GIT_PROPERTIES Interaction may contain properties within any visibility, but only if built as a dialog can it implement delayed mode. (If a GIT_PROPERTIES Interaction is built as a menu or sub-group, it will always operate in immediate mode.) Delayed mode allows the user to change the properties of an object and later apply those changes all at once. Within a dialog box, an &quot;Apply&quot; trigger will make these changes.

</P>
<P>
Most specific UIs will build a dialog box with an activation trigger present in the UI that brings up the dialog box. These dialog boxes are known as user initiatable. There are ways to override this behavior if you need a non-user initiatable dialog box or a dialog box that blocks the calling thread until answered (forcing the user to respond to the dialog box immediately). See <A HREF="Menus_11.htm#82521"> Modality for Dialogs</A>
.</P>
<P>
By default, dialog boxes are not resizable. <CODE>
HINT_INTERACTION_MAKE_RESIZABLE</CODE>
 may be used on a non-modal dialog box to make that dialog resizable. In OSF/Motif, the Specific UI will supply such a dialog with a means to alter its shape. <CODE>
HINT_INTERACTION_MAKE_RESIZABLE</CODE>
 is only meaningful for GIV_DIALOG Interactions. </P>


<H2 CLASS="HeadingC">
GenInteractions as Popouts (GIV_POPOUTS)</H2>
<PRE>MSG_GEN_INTERACTION_POP_IN, MSG_GEN_INTERACTION_POP_OUT, MSG_GEN_INTERACTION_TOGGLE_POPOUT</PRE>
<P>
Popouts are special GenInteractions that may act as either sub-group Interactions or as dialog boxes, depending on their state. Usually, popouts act as normal sub-group Interactions until the user or the application &quot;pops&quot; them out into a dialog box. Popouts are normally &quot;popped out&quot; into their dialog box state by double-clicking within the confines of the GenInteraction. This popout state is reflected with either the presence or absence of the ATTR_GEN_INTERACTION_POPPED_OUT vardata entry.</P>
<P>
You can pop out a GIV_POPOUT GenInteraction in its sub-group state by sending it MSG_GEN_INTERACTION_POP_OUT. Similarly, you can pop a GIV_POPOUT back into its sub-group state from the dialog box state by sending it MSG_GEN_INTERACTION_POP_IN. MSG_GEN_INTERACTION_TOGGLE_POPOUT toggles a popout from whatever state it currently is into its other state.

</P>
<P>
By default, popouts in their dialog box state contain a special trigger to pop them back into their sub-group state. They may also be popped back in by double-clicking within the popped-out GenInteraction. Popouts also normally provide a close trigger; this trigger dismisses the dialog box but does not return the popout to its sub-group state. You should provide a trigger somewhere within your UI that sends MSG_GEN_INTERACTION_POP_IN or MSG_GEN_INTERACTION_POP_OUT to the popout, so that the user can bring any popout they dismiss back on-screen. Alternatively, you can add ATTR_GEN_INTERACTION_POPOUT_NOT_CLOSABLE on the Popout to prevent the creation of a &quot;Close&quot; trigger.</P>

<H4 CLASS="RefETitle">
MSG_GEN_INTERACTION_POP_IN</H4>
<PRE CLASS="syntax">void	MSG_GEN_INTERACTION_POP_IN();</PRE>
<P>
This message `pops in' a GIV_POPOUT GenInteraction into its default sub-group state. This message has no effect if the GenInteraction is not a GIV_POPOUT or if the GenInteraction is already `popped in.'</P>
<P CLASS="refField">
Parameters:	Nothing.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
MSG_GEN_INTERACTION_POP_OUT</H4>
<PRE CLASS="syntax">void	MSG_GEN_INTERACTION_POP_OUT();</PRE>
<P>
This message `pops out' a GIV_POPOUT GenInteraction into its dialog box state. This message has no effect if the GenInteraction is not a GIV_POPOUT or if the GenInteraction is already `popped out.'</P>
<P CLASS="refField">
Parameters:	Nothing.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<H4 CLASS="RefETitle">
MSG_GEN_INTERACTION_TOGGLE_POPOUT</H4>
<PRE CLASS="syntax">void	MSG_GEN_INTERACTION_TOGGLE_POPOUT();</PRE>
<P>
This message toggles the state of a GIV_POPOUT GenInteraction from its `popped in' state to its `popped out' state (or `popped out' and hidden from view) and vice-versa. The specific UI has control over how this message is implemented.</P>
<P CLASS="refField">
Parameters:	Nothing.</P>
<P CLASS="refField">
Return:	Nothing.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Menus_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Menus_b.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 GenInteraction Usage</A> 
<!-- to next --> | <A HREF="Menus_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Types</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
