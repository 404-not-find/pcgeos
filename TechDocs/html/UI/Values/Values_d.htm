<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Values_d.htm,v 1.1 97/06/02 16:48:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Retrieving Text</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GenValue</A>: 4.3 <A HREF="Values_a.htm">Supplemental Usage</A>: 
Retrieving Text</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Values_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Values_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.2 Status Messages</A> 
<!-- to next --> | <A HREF="Values_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.4 Using Value Ratios</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>MSG_GEN_VALUE_GET_VALUE_TEXT, MSG_GEN_VALUE_SET_VALUE_FROM_TEXT, MSG_GEN_VALUE_GET_MAX_TEXT_LEN, MSG_GEN_VALUE_SET_MAX_TEXT_LEN, MSG_GEN_VALUE_SELECT_TEXT</PRE>
<P>
The GenValue's numeric values are displayed within a special text field. In addition to retrieving the numeric value of the GenValue, you may also retrieve the textual representation of that number with <CODE>
MSG_GEN_VALUE_GET_VALUE_TEXT</CODE>
. Similarly, you can set the value of the GenValue from a textual representation with <CODE>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</CODE>
.</P>
<P>
<A NAME="IX_GVT_&ldots;">
 </A>
<A NAME="IX_GenValueType">
 </A>
You must pass these messages a <CODE>
GenValueType</CODE>
 which specifies the instance data field you are wishing to set or get. The <CODE>
GenValueType</CODE>
 types are:</P>
<PRE>typedef enum /* word */ {
	GVT_VALUE,			/* GVLI_value */
	GVT_MINIMUM,			/* GVLI_minimum */
	GVT_MAXIMUM,			/* GVLI_maximum */
	GVT_INCREMENT		,	/* GVLI_increment */
	GVT_LONG,			/* Longest value we can
				 * create. */
	GVT_RANGE_LENGTH,			/* End of the displayed
				 * range, if applicable. */
	GVT_RANGE_END,			/* Last value in the range,
				 * if applicable. */
	GVT_VALUE_AS_RATIO_OF_AVAILABLE_RANGE
				/* The current value, 
				 * relative to minimum. */
} GenValueType;</PRE>
<P>
Some special subclasses of the GenValue will want to calculate how many characters it will allow the user to type into its text field. By default, the number of characters is determined by the maximum and minimum values, but subclasses can handle <CODE>
MSG_GEN_VALUE_GET_MAX_TEXT_LEN</CODE>
 to set it specifically. This message is sent by the range to itself when deciding how big the text field should be. The maximum text length allowed is thirty characters long.</P>
<P>
If you wish to select a GenValue's text, send the GenValue MSG_GEN_VALUE_SELECT_TEXT. The specific UI has final say on whether it allows a GenValue to exhibit selectable text.</P>

<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_VALUE_GET_VALUE_TEXT">
 </A>
MSG_GEN_VALUE_GET_VALUE_TEXT</H4>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_GET_VALUE_TEXT(
        char		*buffer,
        GenValueType		valueType);</PRE>
<P>
This message retrieves a fixed point value (either <CODE>
GVLI_value</CODE>
, GVLI_<CODE>
minimum</CODE>
, GVLI_<CODE>
maximum</CODE>
, or GVLI_<CODE>
increment</CODE>
) from the GenValue and stores its textual representation (in a null-terminated text string) in the passed buffer. This message is not affected by the indeterminate state of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
buffer</EM>
	The pointer to the buffer to store the null-terminated text string. This buffer must be at least GEN_VALUE_MAX_TEXT_LEN bytes long.</P>
<DL>
<DT>
<EM>
valueType</EM>
</DT><DD>The <CODE>
GenValueType</CODE>
, specifying the instance data to retrieve and convert into text.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The <EM>
buffer</EM>
 will be filled in with text.</P>
<P CLASS="refField">
Interception:	Can be intercepted by a subclass of GenValue to allow custom text formats to be displayed on the screen. In this case you would also subclass <CODE>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</CODE>
.</P>


<H4 CLASS="RefETitle">
<A NAME="IX_MSG_GEN_VALUE_SET_VALUE_FROM_TEXT">
 </A>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</H4>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE_FROM_TEXT(
        char		*text,
        GenValueType		valueType);</PRE>
<P>
This message sets a fixed point value (either <CODE>
GVLI_value</CODE>
, GVLI_<CODE>
minimum</CODE>
, GVLI_<CODE>
maximum</CODE>
, or GVLI_<CODE>
increment</CODE>
) of the GenValue from a textual representation (in a null-terminated text string) in the passed buffer. This message clears the indeterminate state of the GenValue but does not change its modified state.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to a null-terminated text string to set the GenValue's text to.</P>
<DL>
<DT>
<EM>
valueType</EM>
</DT><DD>The <CODE>
GenValueType</CODE>
, specifying the instance data to convert into a fixed point value from the passed text.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The instance field will be updated.</P>
<P CLASS="refField">
Interception:	Can be intercepted by a subclass of GenValue to allow custom text formats to be displayed on the screen. In this case, you would also subclass <CODE>
MSG_GEN_VALUE_GET_VALUE_TEXT</CODE>
.</P>


<H4 CLASS="RefETitle">
MSG_GEN_VALUE_GET_MAX_TEXT_LEN</H4>
<PRE CLASS="syntax">byte	MSG_GEN_VALUE_GET_MAX_TEXT_LEN();</PRE>
<P>
This message retrieves the maximum number of characters allowed to be typed into a textual GenValue. By default, this number is calculated from the minimums and maximums specified. Subclasses of GenValue may wish to intercept this message to allow different text lengths (such as values represented with floating point or enumerated type instance data).</P>
<P CLASS="refField">
Source:	The GenValue object sends this to itself when it needs to figure out its maximum text length.</P>
<P CLASS="refField">
Destination:	Itself.</P>
<P CLASS="refField">
Return:	Maximum number of allowable characters</P>
<P CLASS="refField">
Interception:	May be intercepted to allow different text lengths.</P>


<H4 CLASS="RefETitle">
MSG_GEN_VALUE_SELECT_TEXT</H4>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SELECT_TEXT();</PRE>
<P>
This message selects a GenValue's text, if allowed by the specific UI.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Values_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Values_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.2 Status Messages</A> 
<!-- to next --> | <A HREF="Values_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.4 Using Value Ratios</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
