<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>GenValue</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
GenValue

</H1>
<P>
<CODE>
GenValueClass</CODE>
<A NAME="index.htm_IX_GenValueClass">
 </A>
 allows the user to retrieve or set a numerical value for use in your application. The GenValue object offers a display for the current value and the means to either increase or decrease this value. The GenValue object also manages the range that this value may fall between and the action to send out when a value has been selected. </P>
<P>
Before reading this chapter, you should be familiar with <CODE>
GenClass</CODE>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Values_1.htm">1 GenValue Features</A><BR>
&nbsp;&nbsp;<A HREF="#Values_2.htm">2 GenValue Instance Data</A><BR>
&nbsp;&nbsp;<A HREF="#Values_3.htm">3 GenValue Basics</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_4.htm">3.1 The Value</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_5.htm">3.2 The Minimum and Maximum</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_6.htm">3.3 The Increment</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_7.htm">3.4 GenValue States</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_8.htm">3.5 Display Formats</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_9.htm">3.6 Sending an Action</A><BR>
&nbsp;&nbsp;<A HREF="#Values_a.htm">4 Supplemental Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_b.htm">4.1 Adjusting the Value Indirectly</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_c.htm">4.2 Status Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_d.htm">4.3 Retrieving Text</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_e.htm">4.4 Using Value Ratios</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_f.htm">4.5 Text Filters for the GenValue</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Values_10.htm">4.6 Using Ranges in GenValues</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Values_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenValue</A>: 1 
GenValue Features</H2>
<P>
Depending upon the specific UI, the GenValue object can look like one of many things. It may be a spin gadget, a slider, a dial, or some other gadget. A GenValue typically allows the user to set a value within a specified range through keyboard or mouse input. For example, many GenValue objects in OSF/Motif are comprised of a text field showing the current value, an incrementor and a decrementor, and possibly a moniker. (Scroll bars are also GenValues, though they have very different appearance.)</P>
<P>
In OSF/Motif, the user can enter the value by keyboard input into the text field or by clicking the mouse on the incrementor or decrementor.</P>
<P>
The GenValue provides the following capabilities:</P>
<UL>
<LI>
A user interface object to enter values into your application.</LI>
<LI>
Application defined minimum and maximum values.</LI>
<LI>
The increment value to increase or decrease values by.</LI>
<LI>
Ability for the value to be represented in a variety of forms, including integer, decimal, or a unit of distance.</LI>
<LI>
An action to apply any value to.</LI>
</UL>
<P>
The user may change a value in a GenValue in one of two ways. It can be entered with the keyboard by typing directly into the display area, or it can be entered graphically by using the arrows, dials, or sliders that the specific UI provides. To enter a value by typing directly into the text field, first the user clicks on the area, bringing up a cursor. Then a value may be typed into the GenValue. To enter a value graphically, the user clicks on either the incrementor or decrementor, thus changing the value of the GenValue.</P>
<P>
Once the value is changed, the value may become set immediately (if the object is operating in <EM>
immediate</EM>
 mode), and the GenValue will perform its action (if any) every time the value is changed. As an alternative, the GenValue may be operating in <EM>
delayed</EM>
 mode, and the value will not be set until a <CODE>
MSG_GEN_APPLY</CODE>
 is received through an &quot;Apply&quot; or &quot;OK&quot; button. The mode (delayed or immediate) of the GenValue is controlled by the parent. Usually a GenValue will operate in immediate mode unless it is placed as a child of a GIT_PROPERTIES GenInteraction.</P>
<P>
GenValue only allows the user to set a value within a specific range; this range consists of a minimum and maximum value that the GenValue may display. These values are set by the application and cannot be directly modified by the user, but they can be changed by your application. If the user enters a value above the maximum, the GenValue simply takes on its maximum possible value. If the user enters a value below the minimum, the GenValue takes on its least possible value.
<IMG SRC="Values_1_dump.gif">

</P>
<P>
In addition to the limits upon the range of values entered by the user, the GenValue also has a defined increment value. The increment value is the specific amount to increment or decrement the GenValue's value when using graphical input. The user cannot directly modify this value, but it can be changed by your application.</P>
<P>
The GenValue object always displays a numerical value within its text field. The units of that numerical value may be set by your application. By default, any value within a GenValue is an integer, but that value could also be a decimal value, or even a unit of distance such as centimeters, points, or inches. The GenValue automatically provides whatever notation is required by the display units (decimal points, the words &quot;pt&quot; and &quot;cm,&quot; or any other distance notation in the text field). </P>
<HR>
<A NAME="Values_2.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenValue</A>: 2 
<A NAME="Values_2.htm_64313">
 </A>
GenValue Instance Data</H2>
<P>
The GenValue contains instance fields that affect the current value, the display units of that value, and the action to take when any value operation has been completed. These instance fields are listed in <A HREF="#Values_2.htm_92175"> GenValue Instance Data</A>
. Remember, in addition to these instance data variables, there are also the instance fields inherited from the GenValue's superclass, <CODE>
GenClass</CODE>
.</P>
<P CLASS="figTitle">
Code Display 8-1 <A NAME="Values_2.htm_92175">
 </A>
GenValue Instance Data</P>
<PRE>/* The instance data fields for GenValue are shown below. Those that are records
 * of flags have their default flags shown with other possible flags listed below.
 * Other fields are shown with their default values. */</PRE>
<PRE>    @instance WWFixedAsDWord				GVLI_value = MakeWWFixed(0.0);
    @instance WWFixedAsDWord				GVLI_minimum = MakeWWFixed(0.0);
    @instance WWFixedAsDWord				GVLI_maximum = MakeWWFixed(32766);
    @instance WWFixedAsDWord				GVLI_increment = MakeWWFixed(1.0);
    @instance GenValueStateFlags				GVLI_stateFlags = 0;</PRE>
<PRE>/* GenValueStateFlags */
    typedef ByteFlags GenValueStateFlags;
    #define GVSF_INDETERMINATE				0x80
    #define GVSF_MODIFIED				0x40
    #define GVSF_OUT_OF_DATE				0x20</PRE>
<PRE>    @instance GenValueDisplayFormat 			GVLI_displayFormat = GVDF_INTEGER;</PRE>
<PRE>/* GenValueDisplayFormat */
    typedef ByteEnum GenValueDisplayFormat;
    #define GVDF_INTEGER 0
    #define GVDF_DECIMAL 1
    #define GVDF_POINTS 2
    #define GVDF_INCHES 3
    #define GVDF_CENTIMETERS 4
    #define GVDF_MILLIMETERS 5
    #define GVDF_PICAS 6
    #define GVDF_EUR_POINTS 7
    #define GVDF_CICEROS 8
    #define GVDF_POINTS_OR_MILLIMETERS 9
    #define GVDF_POINTS_OR_CENTIMETERS 10</PRE>
<PRE>
    @instance optr				GVLI_destination;
    @instance Message				GVLI_applyMsg = 0;</PRE>
<P>
<CODE>
GVLI_value</CODE>
<A NAME="Values_2.htm_IX_GVLI_&ldots;">
 </A>
 is the current numerical value of the GenValue. By default, it is an integer constant defined by the application. Depending on the GVLI_<CODE>
displayFormat</CODE>
, it can be interpreted as an integer, a decimal, or distance unit.</P>
<P>
<CODE>
GVLI_maximum</CODE>
 is the maximum possible value that the GenValue may display. This value may be positive or negative. The default value is 32766.</P>
<P>
<CODE>
GVLI_minimum </CODE>
is the minimum possible value that the GenValue may display. This value may be positive or negative. The default value is zero.</P>
<P>
<CODE>
GVLI_increment</CODE>
 is the value to increment (or decrement) the GenValue when its value is changed by UI controls rather than direct text input. The default value is one.</P>
<P>
GVLI_<CODE>
stateFlags</CODE>
 specifies the <CODE>
GenValueStateFlags</CODE>
 for the GenValue to operate under. These flags affect whether the data within the GenValue is indeterminate (not necessarily true) or modified (changed since the last <CODE>
MSG_GEN_APPLY</CODE>
).</P>
<P>
GVLI_<CODE>
displayFormat</CODE>
 specifies the units of measurement (<CODE>
GenValueDisplayFormat</CODE>
) that the numerical value represents. By default, this is an integer, but it could also be a decimal or a unit of measurement (such as inches, points, or centimeters).</P>
<P>
<CODE>
GVLI_applyMsg </CODE>
is the message to send out upon GenValue changes (i.e. whenever it receives MSG_GEN_APPLY). There is no default message.</P>
<P>
<CODE>
GVLI_destination</CODE>
 is the object or process to send the message upon GenValue changes. This can be an optr to an object or a valid <CODE>
TravelOption</CODE>
. See <A HREF="../../SysObjects/Meta/MetaClass_7.htm">the MetaClass chapter</A>. There is no default destination object.</P><P CLASS="figTitle">
Code Display 8-2 GenValue Optional Attribute Fields</P>
<PRE>    @vardata Message			ATTR_GEN_VALUE_STATUS_MSG;
    @vardata word			ATTR_GEN_VALUE_DECIMAL_PLACES;
    @vardata WWFixed			ATTR_GEN_VALUE_METRIC_INCREMENT;
    @vardata void			ATTR_GEN_VALUE_SET_MODIFIED_ON_REDUNDANT_SELECTION;</PRE>
<P>
ATTR_GEN_VALUE_STATUS_MSG<A NAME="Values_2.htm_IX_ATTR_GEN_VALUE_&ldots;">
 </A>
 sets a status message for a GenValue. A status message allows your object to communicate with other objects when changes occur without sending out its apply message (GVLI_<CODE>
applyMsg</CODE>
).</P>
<P>
ATTR_GEN_VALUE_DECIMAL_PLACES specifies the number of decimal places to display to the right of the decimal point if the GVLI_<CODE>
displayFormat</CODE>
 allows fractional quantities.</P>
<P>
ATTR_GEN_VALUE_METRIC_INCREMENT allows you to specify a particular metric increment to use besides the default if the GVLI_<CODE>
displayFormat</CODE>
 is GVDF_POINTS_OR_MILLIMETERS or GVDF_INCHES_OR_CENTIMETERS.</P>
<P>
ATTR_GEN_VALUE_SET_MODIFIED_ON_REDUNDANT_SELECTION specifies that the GenValue should be marked modified whether or not a change in the value has occurred. This will result in that value being applied whenever it receives a <CODE>
MSG_GEN_APPLY</CODE>
. (The default behavior for when no change in state occurs, no message will be sent out.)</P>
<P CLASS="figTitle">
Code Display 8-3 GenValue Hints</P>
<PRE>    @vardata void 			HINT_VALUE_INCREMENTABLE;
    @vardata void 			HINT_VALUE_NOT_INCREMENTABLE;</PRE>
<PRE>    @vardata void			HINT_VALUE_NAVIGATE_TO_NEXT_FIELD_ON_RETURN_PRESS;
    @vardata Message			HINT_VALUE_CUSTOM_RETURN_PRESS;</PRE>
<PRE>    @vardata WWFixedAsDWord 				HINT_VALUE_DISPLAYS_RANGE;
    @vardata GenValueIntervals				HINT_VALUE_DISPLAY_INTERVALS;
    @vardata void			HINT_VALUE_CONSTRAIN_TO_INTERVALS;</PRE>
<PRE>typedef struct {
	word	GVI_numMajorIntervals;
	word	GVI_numMinorIntervals;
} GenValueIntervals;</PRE>
<PRE>    @vardata void			HINT_VALUE_SHOW_MIN_AND_MAX;
    @vardata void			HINT_VALUE_IMMEDIATE_DRAG_NOTIFICATION;
    @vardata void			HINT_VALUE_DELAYED_DRAG_NOTIFICATION;
    @vardata void			HINT_VALUE_ORIENT_HORIZONTALLY;
    @vardata void			HINT_VALUE_ORIENT_VERTICALLY;</PRE>
<PRE>    @vardata void			HINT_VALUE_ANALOG_DISPLAY;
    @vardata void			HINT_VALUE_DIGITAL_DISPLAY;
    @vardata void			HINT_VALUE_NO_DIGITAL_DISPLAY;
    @vardata void			HINT_VALUE_NO_ANALOG_DISPLAY;
    @vardata void			HINT_VALUE_NOT_DIGITALLY_EDITABLE;
    @vardata void			HINT_VALUE_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;</PRE>
<P>
HINT_VALUE_INCREMENTABLE and HINT_VALUE_NOT_INCREMENTABLE specify whether increment (and decrement) gadgets are appropriate for this GenValue. By default, GenValues are incrementable. </P>
<P>
HINT_VALUE_CUSTOM_RETURN_PRESS stores a Message to send out if the user hits return within the textual portion of a GenValue. Normally, this action triggers the interaction default (sending the apply message).</P>
<P>
HINT_VALUE_DISPLAYS_RANGE indicates that this GenValue displays a range of values between its minimum and maximum. In most cases, this suggests that the GenValue use sliders or some other UI gadget that is able to show the width of a range. It is up to the specific UI to support range values. If this hint is present, GVLI_<CODE>
value</CODE>
 refers to the starting point of the range of values, whose width is stored in the <CODE>
WWFixedAsDWord</CODE>
 value here. The maximum GVLI_<CODE>
value</CODE>
 in this case would be GVLI_<CODE>
maximum</CODE>
 minus the range. If this hint is not present, the range &quot;length&quot; is presumed to be zero, even in gadgets that specify a range length by default.</P>
<P>
HINT_VALUE_DISPLAY_INTERVALS indicates that intervals should be displayed along an object's range. This hint is used most often in analog (e.g. slider) type displays. If possible, hash marks will appear along the GenValue's display at the intervals specified by <CODE>
GenValueIntervals</CODE>
. This structure stores entries for both major intervals and minor intervals. In general, minor intervals will have smaller tick marks than major intervals.</P>
<PRE>typedef struct {
	word GVI_numMajorIntervals;
	word GVI_numMinorIntervals;
} GenValueIntervals;</PRE>
<P>
If either GVI_<CODE>
numMajorIntervals</CODE>
 or GVI_<CODE>
numMinorIntervals</CODE>
 is zero, only one set of marks will appear.</P>
<P>
HINT_VALUE_CONSTRAIN_TO_INTERVALS suggests that the value within GVLI_<CODE>
value</CODE>
 constrain itself to the GVI_<CODE>
numMinorIntervals</CODE>
 interval within HINT_VALUE_DISPLAY_INTERVALS.</P>
<P>
HINT_VALUE_SHOW_MIN_AND_MAX instructs the GenValue to display its minimum and maximum values, if possible.</P>
<P>
HINT_VALUE_IMMEDIATE_DRAG_NOTIFICATION instructs the GenValue to send out its status and/or apply messages constantly during a drag operation (each time the value changes). It is up to the specific UI to support this behavior.</P>
<P>
HINT_VALUE_DELAYED_DRAG_NOTIFICATION instructs the GenValue to delay sending out status and/or apply message until the user releases the mouse after the drag operation. It is up to the specific UI to support this behavior.</P>
<P>
HINT_VALUE_ORIENT_HORIZONTALLY instructs the specific UI to arrange an analog GenValue, if available, in the horizontal dimension.</P>
<P>
HINT_VALUE_ORIENT_VERTICALLY instructs the specific UI to arrange an analog GenValue, if available, in the vertical dimension.</P>
<P>
HINT_VALUE_ANALOG_DISPLAY indicates that the GenValue should be displayed in an analog fashion, if applicable. HINT_VALUE_DIGITAL_DISPLAY indicates that the GenValue should be displayed in a digital fashion (i.e. numerically). Similarly, HINT_VALUE_NO_DIGITAL_DISPLAY and HINT_VALUE_NO_ANALOG_DISPLAY indicate that a digital or analog display is not appropriate. </P>
<P>
HINT_VALUE_NOT_DIGITALLY_EDITABLE instructs the UI to disallow editing of the text within a numerical GenValue. This hint is only applicable if some other UI means of changing the value is available. To remove a numeric display of values entirely, use HINT_VALUE_NO_DIGITAL_DISPLAY.</P>
<P>
HINT_VALUE_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS instructs the specific UI to avoid expanding a GenValue object to accept pen input, if possible. By default, text areas of GenValues grow larger under pen systems to allow ink strokes. This hint usually indicates that non-ink means of entering values is available.</P>
<HR>
<A NAME="Values_3.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenValue</A>: 3 
GenValue Basics</H2>
<P>
The GenValue instance fields can be set to specific values in your Goc file, and they can also be modified by your application at run-time. This section describes how to set and modify these fields in your Goc file. </P>
<P CLASS="subsectionLink">
<A HREF="#Values_4.htm">The Value</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_5.htm">The Minimum and Maximum</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_6.htm">The Increment</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_7.htm">GenValue States</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_8.htm">Display Formats</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_9.htm">Sending an Action</A></P>
<HR>
<A NAME="Values_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.1 <A HREF="#Values_3.htm">GenValue Basics</A>: 
The Value</H3>
<PRE><CODE>GVLI_value, MSG_GEN_VALUE_SET_VALUE, MSG_GEN_VALUE_SET_INTEGER_VALUE, MSG_GEN_VALUE_GET_VALUE</CODE></PRE>
<P>
<A NAME="Values_4.htm_IX_GVLI_value">
 </A>
The GVLI_<CODE>
value</CODE>
 instance field stores the current numerical value of the GenValue. You may set an initial value for the GenValue to appear with by setting this instance field in your Goc file. This value is a fixed point number; use <CODE>
MakeWWFixed</CODE>
 to create this fixed point number in your instance data.</P>
<P>
Any user changes on the value within the text field will not affect GVLI_<CODE>
value</CODE>
 until <CODE>
MSG_GEN_APPLY</CODE>
 applies that value. If the GenValue operates in delayed mode, it will be marked modified in its GVLI_<CODE>
stateFlags</CODE>
 whenever a user change occurs; those changes will be applied when the GenValue receives a <CODE>
MSG_GEN_APPLY</CODE>
. In most cases, however, a GenValue operates in immediate mode, which will result in an immediate change in GVLI_<CODE>
value</CODE>
.</P>
<P CLASS="figTitle">
Code Display 8-4 Setting an Initial Value</P>
<PRE>/* This GenValue will appear with the initial integer value of two. MakeWWFixed
 * creates a fixed point value. */</PRE>
<PRE>@object GenValueClass MyValue = {
    GI_visMoniker = &quot;My Value&quot;;
    GVLI_value = MakeWWFixed(2.0);
}</PRE>
<P>
<CODE>
GenValueClass</CODE>
 provides several messages to change the value without user control. <CODE>
MSG_GEN_VALUE_SET_VALUE</CODE>
 sets this numeric value to a passed fixed point value; this fixed point value may be any integer or decimal value. <CODE>
MSG_GEN_VALUE_SET_INTEGER_VALUE</CODE>
 is a simpler message which sets GVLI_<CODE>
value</CODE>
 to an integer value passed. Neither of these messages mark the GenValue modified; you can do this with <CODE>
MSG_GEN_VALUE_SET_MODIFIED_STATE</CODE>
.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_4.htm_IX_MSG_GEN_VALUE_SET_VALUE">
 </A>
MSG_GEN_VALUE_SET_VALUE</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE(
        WWFixedAsDWord		value,
        Boolean		indeterminate);</PRE>
<P>
This message sets the <CODE>
GVLI_value</CODE>
 field of the GenValue to the passed <CODE>
value</CODE>
. This message clears a GenValue's modified state in its GVLI_<CODE>
stateFlags</CODE>
. To mark the GenValue modified send <CODE>
MSG_GEN_VALUE_SET_MODIFIED_STATE</CODE>
 after sending this message.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when responding to user actions.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
value</EM>
	The fixed point value to set GVLI_<CODE>
value</CODE>
 to. If you only need an integral value, consider using MSG_GEN_VALUE_SET_INTEGER_VALUE instead.</P>
<DL>
<DT>
<EM>
indeterminate</EM>
</DT><DD>TRUE to mark the GenValue indeterminate, FALSE to mark it non indeterminate.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_4.htm_IX_MSG_GEN_VALUE_SET_INTEGER_VALUE">
 </A>
MSG_GEN_VALUE_SET_INTEGER_VALUE</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_INTEGER_VALUE(
        word		value,
        Boolean		indeterminate);</PRE>
<P>
This message sets the GVLI_<CODE>
value</CODE>
 to the passed integer (word-sized) value. GVLI_<CODE>
value</CODE>
 will then contain this value in its high (integral) word and zero in its low (fractional) word. The modified state of the GenValue will be cleared.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when responding to user actions.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
value</EM>
	The signed integer value to set GVLI_<CODE>
value</CODE>
 to.</P>
<DL>
<DT>
<EM>
indeterminate</EM>
</DT><DD>TRUE to mark the GenValue indeterminate, FALSE to mark it non indeterminate.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_4.htm_IX_MSG_GEN_VALUE_GET_VALUE">
 </A>
MSG_GEN_VALUE_GET_VALUE</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_VALUE();</PRE>
<P>
This message returns the value stored in the GenValue's <CODE>
GVLI_value</CODE>
 instance field. This returned value will be a fixed point number.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The fixed point numerical value of the GVLI_<CODE>
value</CODE>
 instance field.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_4.htm_IX_MSG_GEN_VALUE_GET_INTEGER_VALUE">
 </A>
MSG_GEN_VALUE_GET_INTEGER_VALUE</H6>
<PRE CLASS="syntax">@alias (MSG_GEN_VALUE_GET_VALUE) 
word MSG_GEN_VALUE_GET_INTEGER_VALUE();</PRE>
<P>
This message returns the integral portion of the GenValue's value.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The integral value of the GVLI_<CODE>
value</CODE>
 instance field.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.2 <A HREF="#Values_3.htm">GenValue Basics</A>: 
The Minimum and Maximum</H3>
<PRE>GVLI_minimum, GVLI_maximum, MSG_GEN_VALUE_GET_MAXIMUM, MSG_GEN_VALUE_SET_MAXIMUM, MSG_GEN_VALUE_GET_MINIMUM, MSG_GEN_VALUE_SET_MINIMUM</PRE>
<P>
<A NAME="Values_5.htm_IX_GVLI_maximum">
 </A>
<A NAME="Values_5.htm_IX_GVLI_minimum">
 </A>
The maximum (<CODE>
GVLI_maximum</CODE>
) and minimum (<CODE>
GVLI_minimum</CODE>
) values of a GenValue constrain the value of GVLI_<CODE>
value</CODE>
. The maximum is the greatest value that the GenValue's GVLI_<CODE>
value</CODE>
 can have and can be any fixed point number from -32767 up to 32767. The minimum is the least value that the GenValue's GVLI_<CODE>
value</CODE>
 can have (including negative numbers) and can be any fixed point number from 32767 down to -32767. The maximum value must always be greater than or equal to the minimum value; otherwise, an error will occur.</P>
<P>
The maximum and minimum values of the GenValue also can be examined and modified by the application. This is helpful if you need to use the same GenValue for two functions with different ranges of values. You can use the GenValue for one function, change the bounds, and use it for another function.</P>
<P>
<CODE>
MSG_GEN_VALUE_GET_MINIMUM</CODE>
 and <CODE>
MSG_GEN_VALUE_GET_MAXIMUM</CODE>
 return the values of GVLI_<CODE>
minimum</CODE>
 and GVLI_<CODE>
maximum</CODE>
 respectively. This value is in fixed point format.</P>
<P>
<CODE>
MSG_GEN_VALUE_SET_MINIMUM</CODE>
 and <CODE>
MSG_GEN_VALUE_SET_MAXIMUM</CODE>
 set the values of GVLI_<CODE>
minimum</CODE>
 and GVLI_<CODE>
maximum</CODE>
 respectively. If this new minimum or maximum places the current GVLI_<CODE>
value</CODE>
 outside the valid value range, the value will be adjusted to fall within the current range.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_5.htm_IX_MSG_GEN_VALUE_GET_MAXIMUM">
 </A>
MSG_GEN_VALUE_GET_MAXIMUM</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_MAXIMUM()</PRE>
<P>
This message returns the fixed point value within the <CODE>
GVLI_maximum</CODE>
 instance field of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The fixed point maximum value in GVLI_<CODE>
maximum</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_5.htm_IX_MSG_GEN_VALUE_SET_MAXIMUM">
 </A>
MSG_GEN_VALUE_SET_MAXIMUM</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_MAXIMUM(
        WWFixedAsDWord 		value);</PRE>
<P>
This message sets the <CODE>
GVLI_maximum</CODE>
 field of the GenValue to the passed fixed point value. If you set a new maximum that places the current value (in GVLI_<CODE>
value</CODE>
) above that maximum, GVLI_<CODE>
value</CODE>
 will be adjusted to this maximum.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when the GenValue is being built.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
value</EM>
	fixed point value to set GVLI_<CODE>
maximum</CODE>
 to.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_5.htm_IX_MSG_GEN_VALUE_GET_MINIMUM">
 </A>
MSG_GEN_VALUE_GET_MINIMUM</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_MINIMUM()</PRE>
<P>
This message returns the fixed point value within the <CODE>
GVLI_minimum</CODE>
 instance field of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The fixed point minimum value in GVLI_<CODE>
minimum</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_5.htm_IX_MSG_GEN_VALUE_SET_MINIMUM">
 </A>
MSG_GEN_VALUE_SET_MINIMUM</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_MINIMUM(
        WWFixedAsDWord		value);</PRE>
<P>
This message sets the <CODE>
GVLI_minimum</CODE>
 instance field of the GenValue to the passed fixed point value. If you set a new minimum that places the current value (in GVLI_<CODE>
value</CODE>
) below that minimum, GVLI_<CODE>
value</CODE>
 will be adjusted to this minimum.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when the GenValue is being built. </P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
value</EM>
	fixed point value to set GVLI_<CODE>
minimum</CODE>
 to.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.3 <A HREF="#Values_3.htm">GenValue Basics</A>: 
The Increment</H3>
<PRE><CODE>GVLI_increment, MSG_GEN_VALUE_GET_INCREMENT, MSG_GEN_VALUE_SET_INCREMENT</CODE>, HINT_VALUE_INCREMENTABLE, HINT_VALUE_NOT_INCREMENTABLE</PRE>
<P>
<A NAME="Values_6.htm_IX_GVLI_increment">
 </A>
The <CODE>
GVLI_increment</CODE>
 instance field stores the fixed point increment value for a GenValue. The increment value is the amount by which the current value (in GVLI_<CODE>
value</CODE>
) may increase or decrease when that value is changed by UI controls. The increment value can be any positive fixed point value between one and 65535.</P>
<P>
If GVLI_<CODE>
increment</CODE>
 is greater than the possible range of the GenValue (the distance between minimum and maximum), then incrementing or decrementing the GenValue will toggle GVLI_<CODE>
value</CODE>
 between its maximum and minimum.</P>
<P CLASS="figTitle">
Code Display 8-5 Setting Minimum, Maximum, Increment Values</P>
<PRE>@object GenValueClass MyValue = {
    GI_visMoniker = &quot;My Value&quot;;
    GVLI_value = MakeWWFixed(1.0);
    GVLI_minimum = MakeWWFixed(-100.0);
    GVLI_maximum= MakeWWFixed(100.0);
    GVLI_increment = MakeWWFixed(5.0);
}</PRE>
<P>
You may change the fixed point value of this increment with <CODE>
MSG_GEN_VALUE_SET_INCREMENT</CODE>
. You may also return the current increment stored within GVLI_<CODE>
increment</CODE>
 with <CODE>
MSG_GEN_VALUE_GET_INCREMENT</CODE>
. You may wish to change a GenValue's increment one GenValue is being used for multiple roles and must change its increment value.</P>
<P>
By default, all GenValues are incrementable. If you do not wish to have your GenValue provide UI controls for incrementing (or decrementing) its value, add <CODE>
HINT_VALUE_NOT_INCREMENTABLE</CODE>
 in its instance data. <CODE>
HINT_VALUE_INCREMENTABLE</CODE>
 provides the default behavior. (You may still increment or decrement the value manually with <CODE>
MSG_GEN_VALUE_INCREMENT</CODE>
 or <CODE>
MSG_GEN_VALUE_DECREMENT</CODE>
.)</P>

<H6 CLASS="RefETitle">
<A NAME="Values_6.htm_IX_MSG_GEN_VALUE_SET_INCREMENT">
 </A>
MSG_GEN_VALUE_SET_INCREMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_INCREMENT (
        WWFixedAsDWord 		value);</PRE>
<P>
This message sets the <CODE>
GVLI_increment</CODE>
 field to the passed <CODE>
value</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when the GenValue is being built.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
value</EM>
	fixed point value to set GVLI_<CODE>
increment</CODE>
 to.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_6.htm_IX_MSG_GEN_VALUE_GET_INCREMENT">
 </A>
MSG_GEN_VALUE_GET_INCREMENT</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_INCREMENT();</PRE>
<P>
This message returns the value of the <CODE>
GVLI_increment</CODE>
 field of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The fixed point value of GVLI_<CODE>
increment</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.4 <A HREF="#Values_3.htm">GenValue Basics</A>: 
GenValue States</H3>
<PRE>GVLI_stateFlags, MSG_GEN_VALUE_SET_INDETERMINATE_STATE, MSG_GEN_VALUE_IS_INDETERMINATE, MSG_GEN_VALUE_SET_MODIFIED_STATE, MSG_GEN_VALUE_IS_MODIFIED, ATTR_GEN_SET_MODIFIED_ON_REDUNDANT_SELECTION</PRE>
<P>
GVLI_<A NAME="Values_7.htm_IX_GVLI_stateFlags">
 </A>
<CODE>
stateFlags</CODE>
 stores the current state of the GenValue. There are two <CODE>
GenValueStateFlags</CODE>
<A NAME="Values_7.htm_IX_GVSF_&ldots;">
 </A>
<A NAME="Values_7.htm_IX_GenValueStateFlags">
 </A>
:</P>
<UL>
<LI>
GVSF_INDETERMINATE<BR>
This flag specifies that the value within the GenValue is indeterminate (may or may not be true). In most cases, you will not need to set this flag. </LI>
<LI>
GVSF_MODIFIED<BR>
This flag specifies that the value within the GenValue has changed since it last received a <CODE>
MSG_GEN_APPLY</CODE>
. The handler for <CODE>
MSG_GEN_APPLY</CODE>
 checks whether this flag is set before sending out the GenValue's GVLI_<CODE>
applyMsg</CODE>
.</LI>
<LI>
GVSF_OUT_OF_DATE<BR>
This flag specifies that the value within the GenValue is out of date with what the user has typed in. This is distinct from the GVSF_MODIFIED state; while the user is typing an a value (&quot;123&quot; for example) the typed value may be temporarily out of range, or incomplete. In this case, the value would be marked GVSF_OUT_OF_DATE and GVSF_MODIFIED. Notice that if the value were incremented or decremented, it would be marked GVSF_MODIFIED, but not GVSF_OUT_OF_DATE because the value is legal and presumable valid for operations. This flag is most useful when telling status messages whether a value should be used.</LI>
</UL>
<P>
GenValues are normally marked as not modified anytime their state is set with an external message, marked modified whenever the user interacts with them, and marked not modified after receiving <CODE>
MSG_GEN_APPLY</CODE>
. <CODE>
MSG_GEN_VALUE_SET_MODIFIED_STATE</CODE>
 allows you to control the modified state of a GenValue outside of these events.</P>
<P>
You may set a GenValue's indeterminate or modified state with <CODE>
MSG_GEN_VALUE_SET_INDETERMINATE_STATE</CODE>
 or <CODE>
MSG_GEN_VALUE_SET_MODIFIED_STATE</CODE>
, respectively.</P>
<P>
To check whether a GenValue is indeterminate or modified, use <CODE>
MSG_GEN_VALUE_IS_INDETERMINATE</CODE>
 or <CODE>
MSG_GEN_VALUE_IS_MODIFIED.</CODE>
</P>
<P>
You may also mark a GenValue GVSF_OUT_OF_DATE by sending it MSG_GEN_VALUE_SET_OUT_OF_DATE.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_7.htm_IX_MSG_GEN_VALUE_SET_INDETERMINATE_STATE">
 </A>
MSG_GEN_VALUE_SET_INDETERMINATE_STATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_INDETERMINATE_STATE(
        Boolean		indeterminateState);</PRE>
<P>
This message sets the indeterminate state for a GenValue. Pass TRUE to mark the GenValue indeterminate, FALSE to mark it not indeterminate. The GenValue will not be marked modified after this message.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
indeterminateState</EM>
 <BR>
TRUE to set the GVSF_INDETERMINATE flag in the GenValue's GVLI_<CODE>
stateFlags</CODE>
,<BR>
FALSE to clear the GVSF_INDETERMINATE flag.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_7.htm_IX_MSG_GEN_VALUE_IS_INDETERMINATE">
 </A>
MSG_GEN_VALUE_IS_INDETERMINATE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_VALUE_IS_INDETERMINATE();</PRE>
<P>
This message checks whether a GenValue is indeterminate. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Return:	TRUE if GenValue is indeterminate, FALSE if it is not.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_7.htm_IX_MSG_GEN_VALUE_SET_MODIFIED_STATE">
 </A>
MSG_GEN_VALUE_SET_MODIFIED_STATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_MODIFIED_STATE(
        Boolean		modifiedState);</PRE>
<P>
This message sets the modified state for a GenValue. Pass TRUE to mark the GenValue modified, FALSE to mark it not modified.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
 <BR>
TRUE to set the GVSF_MODIFIED flag in the GenValue's GVLI_<CODE>
stateFlags</CODE>
,<BR>
FALSE to clear the GVSF_MODIFIED flag.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_7.htm_IX_MSG_GEN_VALUE_IS_MODIFIED">
 </A>
MSG_GEN_VALUE_IS_MODIFIED</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_VALUE_IS_MODIFIED();</PRE>
<P>
This message checks whether a GenValue has been modified since the last <CODE>
MSG_GEN_APPLY</CODE>
. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Return:	TRUE if GenValue is modified, FALSE if it is not.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_VALUE_SET_OUT_OF_DATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_OUT_OF_DATE();</PRE>
<P>
This message sets a GenValue's GVSF_OUT_OF_DATE flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.5 <A HREF="#Values_3.htm">GenValue Basics</A>: 
<A NAME="Values_8.htm_96163">
 </A>
Display Formats</H3>
<PRE>GVLI_displayFormat, MSG_GEN_VALUE_SET_DISPLAY_FORMAT, MSG_GEN_VALUE_GET_DISPLAY_FORMAT, ATTR_GEN_VALUE_METRIC_EQUIVALENT, ATTR_GEN_VALUE_DECIMAL_PLACES</PRE>
<P>
In addition to displaying an integer numerical value, a GenValue may also display numerical values of several other formats. These formats may be any one of the <CODE>
GenValueDisplayFormat</CODE>
 enumerations provided in <CODE>
GenValueClass</CODE>
. The allowed enumerations of type <CODE>
GenValueDisplayFormat</CODE>
<A NAME="Values_8.htm_IX_GenValueDisplayFormat">
 </A>
 are:</P>
<DL>
<DT>
	GVDF_INTEGER</DT><DD>
GVDF_DECIMAL<BR>
GVDF_POINTS<BR>
GVDF_INCHES<BR>
GVDF_CENTIMETERS<BR>
GVDF_MILLIMETERS<BR>
GVDF_PICAS<BR>
GVDF_EUR_POINTS<BR>
GVDF_CICEROS<BR>
GVDF_POINTS_OR_MILLIMETERS<BR>
GVDF_INCHES_OR_CENTIMETERS</DD>
</DL>
<P>
GVLI_<A NAME="Values_8.htm_IX_GVLI_displayFormat">
 </A>
<CODE>
displayFormat</CODE>
 controls how the values of the GenValue will be represented. For example, if the display format is in centimeters, the display will include the text &quot;cm&quot; after the numerical value; if the display includes a fractional part, a decimal point will be present. These display formats will also convert the values (which are stored as points) into the proper distance units for the textual display.</P>
<P>
By default, the value's fractional portion will be displayed using 3 places to the right of the decimal point. You may alter this number of places with ATTR_GEN_VALUE_DECIMAL_PLACES. You may only choose a number of decimal places between zero to four (inclusive), because of the limited text space offered within a GenValue.</P>
<P>
<A NAME="Values_8.htm_IX_GVDF_&ldots;">
 </A>
Your GenApplication object contains instance data which specifies whether the application is being run under US or metric units. This setting may affect the display of your units depending on the particular <CODE>
GenValueDisplayFormat</CODE>
. </P>
<DL>
<DT>
GVDF_INTEGER displays the value as an integer (the high word of the fixed point value) and ignores any fractional part. </DT>
<DT>
GVDF_DECIMAL displays the value as a decimal value. </DT>
<DT>
GVDF_POINTS displays the value in points (1/72 of an inch) regardless of whether metric or US units are specified for the application. </DT>
<DT>
GVDF_INCHES displays the value in inches regardless of whether metric or US units are specified for the application. </DT>
<DT>
GVDF_CENTIMETERS displays the value in centimeters regardless of whether metric or US units are specified for the application.</DT>
<DT>
GVDF_MILLIMETERS displays the value in millimeters regardless of whether metric or US units are specified for the application.</DT>
<DT>
GVDF_PICAS displays the value as a distance in picas. One pica is equal to 12 US Points, or 1/6 of an inch.</DT>
<DT>
GVDF_EUR_POINTS displays the value as a distance in European Points. One european point is about equal to 1.0656 US Points.</DT>
<DT>
GVDF_CICEROS displays the value as a distance in Ciceros. One Cicero is equal to 12 European Points.</DT>
<DT>
GVDF_POINTS_OR_MILLIMETERS and GVDF_INCHES_OR_CENTIMETERS are special cases. These display formats display the value in points (or inches) if US units are specified for the application; the value will be represented in millimeters (or centimeters) if metric units are instead specified.<A NAME="Values_8.htm_marker=474166">
 </A>
</DT>
</DL>
<P>
Importantly, <EM>
all</EM>
 distance units (inches, picas, centimeters, etc.) store their values as Points (1/72 inch). The system automatically converts these values (in Points) into the proper units of the GenValue's GVLI_<CODE>
displayFormat</CODE>
 when it displays the numerical value within the textual display.</P>
<P CLASS="figTitle">
Code Display 8-6 Setting a Distance Display Format</P>
<PRE>@object GenValueClass MyValue = {
    GI_visMoniker = &quot;My Value&quot;;
    GVLI_displayFormat = GVDF_INCHES;</PRE>
<PRE>/* For an initial value of 1 inch, the equivalent value in Points is 72. */
    GVLI_value = MakeWWFixed(72.0);</PRE>
<PRE>/* For an initial value of 1/2 inch, the equivalent value in Points is 36. */
    GVLI_increment = MakeWWFixed(36.0);
}</PRE>
<P>
 For example, if your display format is GVDF_INCHES and you wish to set an initial value of 1 inch and an increment of 1/2 an inch, you should set these values to 72 (points which equals 1 inch) and 36 (points which equals one-half inch) respectively. This is necessary because the system expects these values to be in Points for other system operations. A conversion table is provided below.
<IMG SRC="Values_8_DistanceUnit.gif">

</P>
<P>
Any increments for GVDF_POINTS_OR_MILLIMETERS or GVDF_INCHES_OR_CENTIMETERS are assumed to be in US units. If the application instead operates in metric, the increment will be automatically converted to a metric equivalent by the system; this metric equivalent will usually be rounded to a convenient numerical value. You may specify an ATTR_GEN_VALUE_METRIC_EQUIVALENT to override the default increment that the system calculates, however.</P>
<P>
For example, assume GVDF_INCHES_OR_CENTIMETERS is selected and the value and increment are 72 (points which equals 1 inch). If the application is in US units, the display will specify inches and the value and increment will be 72 (1 inch); if the application is instead in metric, the display will specify centimeters and the increment will be 70.866 (2.5 cm). If instead, you choose an ATTR_GEN_VALUE_METRIC_INCREMENT of 52.692 (2 cm), that will be the increment used if the application is metric.</P>
<P CLASS="figTitle">
Code Display 8-7 ATTR_GEN_VALUE_METRIC_INCREMENT</P>
<PRE>/* If the application is US, the initial value will be 1 inch and the increment 
 * will be 1 inch. If the application is metric, the initial value will be 2.54 cm
 * (1 inch or 72 points) but the increment will be 2.0 cm (56.692 points). If
 * ATTR_GEN_VALUE_METRIC_INCREMENT were not included, the system would have chosen
 * an increment of 2.5 cm (70.866 points) which is the closest &quot;nice&quot; value to the
 * original increment of 72 points (1 inch). */</PRE>
<PRE>@object GenValueClass MyValue = {
    GI_visMoniker = &quot;My Value&quot;;
    GVLI_displayFormat = GVDF_INCHES_OR_CENTIMETERS;
    GVLI_value = MakeWWFixed(72.0);
    GVLI_increment = MakeWWFixed(72.0);
    ATTR_GEN_VALUE_METRIC_INCREMENT = MakeWWFixed(56.692);
}</PRE>
<P>
To set a new display format, send <CODE>
MSG_GEN_VALUE_SET_DISPLAY_FORMAT</CODE>
. To retrieve the current display format, send the GenValue <CODE>
MSG_GEN_VALUE_GET_DISPLAY_FORMAT</CODE>
. Note that changing the display format will not change the numerical value of that display. For example, if the display format changes from decimal to integer, the GenValue will round the number down and display only the integer portion of the value.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_8.htm_IX_MSG_GEN_VALUE_GET_DISPLAY_FORMAT">
 </A>
MSG_GEN_VALUE_GET_DISPLAY_FORMAT</H6>
<PRE CLASS="syntax">GenValueDisplayFormat MSG_GEN_VALUE_GET_DISPLAY_FORMAT();</PRE>
<P>
This message returns the GVLI_<CODE>
displayFormat </CODE>
field of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
GenValueDisplayFormat</CODE>
 of the GenValue.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_8.htm_IX_MSG_GEN_VALUE_SET_DISPLAY_FORMAT">
 </A>
MSG_GEN_VALUE_SET_DISPLAY_FORMAT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_DISPLAY_FORMAT(
        GenValueDisplayFormat			format);</PRE>
<P>
This message sets the <CODE>
GVLI_displayFormat</CODE>
 of the GenValue to the given format. The current value in GVLI_<CODE>
value</CODE>
 is unaffected, but the display will be updated to reflect the new display format.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when the GenValue is being built. </P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
format</EM>
	<CODE>
GenValueDisplayFormat</CODE>
 to set the GenValue to.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_9.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 3.6 <A HREF="#Values_3.htm">GenValue Basics</A>: 
Sending an Action</H3>
<PRE>GVLI_applyMsg, GVLI_destination, HINT_VALUE_NAVIGATE_TO_NEXT_FIELD_ON_RETURN_PRESS, HINT_VALUE_CUSTOM_RETURN_PRESS, MSG_GEN_VALUE_GET_APPLY_MSG, MSG_GEN_VALUE_SET_APPLY_MSG, MSG_GEN_VALUE_GET_DESTINATION, MSG_GEN_VALUE_SET_DESTINATION</PRE>
<P>
GVLI_<A NAME="Values_9.htm_IX_GVLI_applyMsg">
 </A>
<CODE>
applyMsg</CODE>
 sets the message for the GenValue to send out whenever it has been modified and needs to apply its changes. Whenever a GenValue receives <CODE>
MSG_GEN_APPLY,</CODE>
 <CODE>
i</CODE>
t will check whether its GVSF_MODIFIED flag has been set; if it has, it will send out its apply message. If a GenValue is operating in immediate mode, these actions will happen immediately, resulting in an immediate action.</P>
<P>
GVLI_<A NAME="Values_9.htm_IX_GVLI_destination">
 </A>
<CODE>
destination</CODE>
 specifies the destination object (or process) to send the GVLI_<CODE>
applyMsg</CODE>
 to. (This may also be a <CODE>
TravelOption</CODE>
, such as TO_APP_TARGET.)</P>
<P CLASS="figTitle">
Code Display 8-8 Sending an Apply Message</P>
<PRE>@object GenValueClass MyValue = {
    GI_visMoniker = &quot;My Value&quot;;
    GVLI_value = MakeWWFixed(1.0);
    GVLI_applyMsg = MSG_MY_VALUE_DOUBLE_VALUE;
    GVLI_destination = process;
}</PRE>
<PRE>/* Retrieve the current value. This value will be a fixed point dword. */</PRE>
<PRE>@method MyValueProcessClass, MSG_MY_VALUE_DOUBLE_VALUE {
    WWFixedAsDWord	curValue;</PRE>
<PRE>    curValue = @call MyValue::MSG_GEN_VALUE_GET_VALUE();
    curValue = curValue*2;
    @call MyValue::MSG_GEN_VALUE_SET_VALUE(curValue, 0);
}</PRE>
<P>
A GenValue's changes are typically applied when the user hits the Return key and the GenValue has the focus. You can change this behavior, though, with the following hints: <CODE>
HINT_VALUE_CUSTOM_RETURN_PRESS</CODE>
 allows a textually-oriented GenValue to send the specified message to the destination object when the Return key is pressed. <CODE>
HINT_VALUE_NAVIGATE_TO_NEXT_FIELD_ON_RETURN_PRESS</CODE>
 instructs the GenValue to navigate (via the UI) to the next textually-activated object (as the tab key works in many situations).</P>
<P>
To change a GenValue's apply message or destination, send it <CODE>
MSG_GEN_VALUE_SET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_VALUE_SET_DESTINATION</CODE>
, respectively. Use <CODE>
MSG_GEN_VALUE_GET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_VALUE_GET_DESTINATION</CODE>
 to return the current apply message or destination.</P>
<P>
The apply message should be defined on the prototype <CODE>
GEN_VALUE_APPLY_MSG</CODE>
, whose values are shown below.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_9.htm_IX_GEN_VALUE_APPLY_MSG">
 </A>
GEN_VALUE_APPLY_MSG</H6>
<PRE CLASS="syntax">void	GEN_VALUE_APPLY_MSG(
        WWFixedAsDWord		value,
        word		stateFlags);</PRE>
<P>
This prototype defines the message sent out when the GenValue is &quot;applied.&quot; The output of the GenValue should handle a message with these parameters.</P>
<P CLASS="refField">
Source:	GenValue, when &quot;applied.&quot;</P>
<P CLASS="refField">
Destination:	The GenValue's output (<CODE>
GVLI_destination</CODE>
) object.</P>
<P CLASS="refField">
Parameters:	<CODE>
value</CODE>
	The current value of the GenValue.</P>
<DL>
<DT>
<CODE>
stateFlags</CODE>
</DT><DD>The <CODE>
GenValueStateFlags</CODE>
 stored in <CODE>
GVLI_stateFlags</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	The destination object should handle the apply message with this format.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_9.htm_IX_MSG_GEN_VALUE_GET_APPLY_MSG">
 </A>
MSG_GEN_VALUE_GET_APPLY_MSG</H6>
<PRE CLASS="syntax">Message	MSG_GEN_VALUE_GET_APPLY_MSG();</PRE>
<P>
This message returns the GenValue's GVLI_<CODE>
applyMsg</CODE>
. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The apply message of the GenValue.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_9.htm_IX_MSG_GEN_VALUE_SET_APPLY_MSG">
 </A>
MSG_GEN_VALUE_SET_APPLY_MSG</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_APPLY_MSG(
        Message		message);</PRE>
<P>
This message sets the apply message (in GVLI_<CODE>
applyMsg</CODE>
) for a GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
message</EM>
	The apply message to set for the GenValue.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_9.htm_IX_MSG_GEN_VALUE_GET_DESTINATION">
 </A>
MSG_GEN_VALUE_GET_DESTINATION</H6>
<PRE CLASS="syntax">optr	MSG_GEN_VALUE_GET_DESTINATION();</PRE>
<P>
This message returns the current destination object (or process) that the GenValue sends its apply messages to.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The destination optr (GVLI_<CODE>
destination</CODE>
) of the GenValue.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_9.htm_IX_MSG_GEN_VALUE_SET_DESTINATION">
 </A>
MSG_GEN_VALUE_SET_DESTINATION</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_DESTINATION(
        optr	dest);</PRE>
<P>
This message sets the <CODE>
GVLI_destination</CODE>
 field of the range to the passed optr. The object can be a pointer to a specific object in the system (i.e. the GenProcess object) or can be a pointer to a generic location in the system (i.e. a <CODE>
TravelOption</CODE>
). </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
dest</EM>
	The optr of the new destination object.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_a.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">GenValue</A>: 4 
Supplemental Usage</H2>
<P>
Besides altering instance data, there are several other messages and mechanisms for your use in <CODE>
GenValueClass</CODE>
. </P>
<P CLASS="subsectionLink">
<A HREF="#Values_b.htm">Adjusting the Value Indirectly</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_c.htm">Status Messages</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_d.htm">Retrieving Text</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_e.htm">Using Value Ratios</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_f.htm">Text Filters for the GenValue</A></P>
<P CLASS="subsectionLink">
<A HREF="#Values_10.htm">Using Ranges in GenValues</A></P>
<HR>
<A NAME="Values_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.1 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Adjusting the Value Indirectly</H3>
<PRE>MSG_GEN_VALUE_INCREMENT, MSG_GEN_VALUE_DECREMENT, MSG_GEN_VALUE_SET_VALUE_TO_MINIMUM, MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM</PRE>
<P>
To increase the value of GVLI_<CODE>
value</CODE>
 by the increment in GVLI_<CODE>
increment</CODE>
, send the GenValue <CODE>
MSG_GEN_VALUE_INCREMENT</CODE>
. To decrease the value of GVLI_<CODE>
value</CODE>
 by the increment in GVLI_<CODE>
increment</CODE>
, send the GenValue <CODE>
MSG_GEN_VALUE_DECREMENT</CODE>
. These messages are equivalent to clicking on the UI controls provided to increment or decrement the GenValue (usually up and down arrows). Both of these messages clear the indeterminate state of the object and <EM>
do not change</EM>
 its modified state. </P>
<P>
To set the value of GVLI_<CODE>
value</CODE>
 to the minimum in GVLI_<CODE>
minimum</CODE>
, send the GenValue <CODE>
MSG_GEN_VALUE_SET_VALUE_TO_MINIMUM</CODE>
. To set the value of GVLI_<CODE>
value</CODE>
 to the maximum in GVLI_<CODE>
maximum</CODE>
, send the GenValue <CODE>
MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM</CODE>
. Both of these messages clear the indeterminate state of the GenValue and <EM>
do not change</EM>
 its modified state. </P>
<P>
Note that <CODE>
HINT_VALUE_NOT_INCREMENTABLE</CODE>
 has no effect on these messages; that hint only removes any user controls for incrementing or decrementing a value.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_b.htm_IX_MSG_GEN_VALUE_INCREMENT">
 </A>
MSG_GEN_VALUE_INCREMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_INCREMENT();</PRE>
<P>
This message increases the value of GVLI_<CODE>
value</CODE>
 within the GenValue by the increment in GVLI_<CODE>
increment</CODE>
. This message will clear the indeterminate flag of the GenValue but will not affect its modified flag.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when responding to user actions.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing. GVLI_<CODE>
value</CODE>
 will be incremented (or set to the maximum if increasing the value would push it over the maximum).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_b.htm_IX_MSG_GEN_VALUE_DECREMENT">
 </A>
MSG_GEN_VALUE_DECREMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_DECREMENT();</PRE>
<P>
This message decreases the value of GVLI_<CODE>
value</CODE>
 within the GenValue by the increment in GVLI_<CODE>
increment</CODE>
. This message will clear the indeterminate flag of the GenValue but will not affect its modified flag.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally when responding to user actions.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing. GVLI_<CODE>
value</CODE>
 will be decremented (or set to the minimum if decreasing the value would push it below the minimum).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_b.htm_IX_MSG_GEN_VALUE_SET_VALUE_TO_MINIMUM">
 </A>
MSG_GEN_VALUE_SET_VALUE_TO_MINIMUM</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE_TO_MINIMUM();</PRE>
<P>
This message sets the value of GVLI_<CODE>
value</CODE>
 to the minimum value in GVLI_<CODE>
minimum</CODE>
. This message will clear the indeterminate flag of the GenValue but will not affect its modified flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing. <CODE>
GVLI_value</CODE>
 will be set to GVLI_<CODE>
minimum</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_b.htm_IX_MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM">
 </A>
MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE_TO_MAXIMUM();</PRE>
<P>
This message sets the value of GVLI_<CODE>
value</CODE>
 to the maximum value in GVLI_<CODE>
maximum</CODE>
. This message will clear the indeterminate flag of the GenValue but will not affect its modified flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing. <CODE>
GVLI_value</CODE>
 will be set to GVLI_<CODE>
maximum</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.2 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Status Messages</H3>
<PRE>ATTR_GEN_VALUE_STATUS_MSG, MSG_GEN_VALUE_SEND_STATUS_MSG</PRE>
<P>
If your GenValue is operating in delayed mode, there usually occur times when your GenValue's state may not reflect the most recent changes. In most cases this is fine, but in some cases you may wish other UI objects to be notified of a change in your GenValue's state <EM>
without</EM>
 sending out an apply message. This can be done with a status message. </P>
<P>
A status message allows your GenValue to send out a message whenever the user interacts with the GenValue, regardless of whether that change will be immediately applied. This is most useful for cases in which two UI objects are representing information that depends on each other. The status message allows one UI object to inform its friend that its state has changed, and that the friend should change its state to reflect the new information.</P>
<P>
To give a GenValue a status message, include ATTR_GEN_VALUE_STATUS_MSG in the object's declaration. Use the prototype GEN_VALUE_STATUS_MSG to define your status message. This prototype ensures that the status message passes the correct parameters (the current value and state flags of the GenValue).</P>
<P>
Any user changes that do not result in the sending of the object's apply message will result in the sending of the object's status message. For an object in immediate mode, this ATTR will have no effect. You may also manually send an object's status message by sending the GenValue <CODE>
MSG_GEN_VALUE_SEND_STATUS_MSG</CODE>
.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_c.htm_IX_GEN_VALUE_STATUS_MSG">
 </A>
GEN_VALUE_STATUS_MSG</H6>
<PRE CLASS="syntax">void	GEN_VALUE_STATUS_MSG(
        WWFixedAsDWord		value,
        word		stateFlags);</PRE>
<P>
This prototype should be used to define the status message of the GenValue.</P>
<P CLASS="refField">
Source:	The GenValue, when its status message is sent.</P>
<P CLASS="refField">
Destination:	The GenValue's destination object (<CODE>
GVLI_destination</CODE>
).</P>
<P CLASS="refField">
Parameters:	<CODE>
value</CODE>
	The current user value of the GenValue.</P>
<DL>
<DT>
<CODE>
stateFlags</CODE>
</DT><DD>The current value of <CODE>
GVLI_stateFlags</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Must be handled by the output object if the status message is to have any effect.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_c.htm_IX_MSG_GEN_VALUE_SEND_STATUS_MSG">
 </A>
MSG_GEN_VALUE_SEND_STATUS_MSG</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SEND_STATUS_MSG(
        Boolean		modifiedState);</PRE>
<P>
This message sends the status message stored in the object's ATTR_GEN_VALUE_STATUS_MSG instance field. You should pass this message the modified State you wish to send. This modified state may or not reflect the GVSF_MODIFIED flag in the GenValue's GVLI_<CODE>
stateFlags</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
	TRUE if this message should pass the modified bit (GVSF_MODIFIED) set, FALSE if it should pass GVSF_MODIFIED cleared.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.3 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Retrieving Text</H3>
<PRE>MSG_GEN_VALUE_GET_VALUE_TEXT, MSG_GEN_VALUE_SET_VALUE_FROM_TEXT, MSG_GEN_VALUE_GET_MAX_TEXT_LEN, MSG_GEN_VALUE_SET_MAX_TEXT_LEN, MSG_GEN_VALUE_SELECT_TEXT</PRE>
<P>
The GenValue's numeric values are displayed within a special text field. In addition to retrieving the numeric value of the GenValue, you may also retrieve the textual representation of that number with <CODE>
MSG_GEN_VALUE_GET_VALUE_TEXT</CODE>
. Similarly, you can set the value of the GenValue from a textual representation with <CODE>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</CODE>
.</P>
<P>
<A NAME="Values_d.htm_IX_GVT_&ldots;">
 </A>
<A NAME="Values_d.htm_IX_GenValueType">
 </A>
You must pass these messages a <CODE>
GenValueType</CODE>
 which specifies the instance data field you are wishing to set or get. The <CODE>
GenValueType</CODE>
 types are:</P>
<PRE>typedef enum /* word */ {
	GVT_VALUE,			/* GVLI_value */
	GVT_MINIMUM,			/* GVLI_minimum */
	GVT_MAXIMUM,			/* GVLI_maximum */
	GVT_INCREMENT		,	/* GVLI_increment */
	GVT_LONG,			/* Longest value we can
				 * create. */
	GVT_RANGE_LENGTH,			/* End of the displayed
				 * range, if applicable. */
	GVT_RANGE_END,			/* Last value in the range,
				 * if applicable. */
	GVT_VALUE_AS_RATIO_OF_AVAILABLE_RANGE
				/* The current value, 
				 * relative to minimum. */
} GenValueType;</PRE>
<P>
Some special subclasses of the GenValue will want to calculate how many characters it will allow the user to type into its text field. By default, the number of characters is determined by the maximum and minimum values, but subclasses can handle <CODE>
MSG_GEN_VALUE_GET_MAX_TEXT_LEN</CODE>
 to set it specifically. This message is sent by the range to itself when deciding how big the text field should be. The maximum text length allowed is thirty characters long.</P>
<P>
If you wish to select a GenValue's text, send the GenValue MSG_GEN_VALUE_SELECT_TEXT. The specific UI has final say on whether it allows a GenValue to exhibit selectable text.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_d.htm_IX_MSG_GEN_VALUE_GET_VALUE_TEXT">
 </A>
MSG_GEN_VALUE_GET_VALUE_TEXT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_GET_VALUE_TEXT(
        char		*buffer,
        GenValueType		valueType);</PRE>
<P>
This message retrieves a fixed point value (either <CODE>
GVLI_value</CODE>
, GVLI_<CODE>
minimum</CODE>
, GVLI_<CODE>
maximum</CODE>
, or GVLI_<CODE>
increment</CODE>
) from the GenValue and stores its textual representation (in a null-terminated text string) in the passed buffer. This message is not affected by the indeterminate state of the GenValue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
buffer</EM>
	The pointer to the buffer to store the null-terminated text string. This buffer must be at least GEN_VALUE_MAX_TEXT_LEN bytes long.</P>
<DL>
<DT>
<EM>
valueType</EM>
</DT><DD>The <CODE>
GenValueType</CODE>
, specifying the instance data to retrieve and convert into text.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The <EM>
buffer</EM>
 will be filled in with text.</P>
<P CLASS="refField">
Interception:	Can be intercepted by a subclass of GenValue to allow custom text formats to be displayed on the screen. In this case you would also subclass <CODE>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_d.htm_IX_MSG_GEN_VALUE_SET_VALUE_FROM_TEXT">
 </A>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE_FROM_TEXT(
        char		*text,
        GenValueType		valueType);</PRE>
<P>
This message sets a fixed point value (either <CODE>
GVLI_value</CODE>
, GVLI_<CODE>
minimum</CODE>
, GVLI_<CODE>
maximum</CODE>
, or GVLI_<CODE>
increment</CODE>
) of the GenValue from a textual representation (in a null-terminated text string) in the passed buffer. This message clears the indeterminate state of the GenValue but does not change its modified state.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to a null-terminated text string to set the GenValue's text to.</P>
<DL>
<DT>
<EM>
valueType</EM>
</DT><DD>The <CODE>
GenValueType</CODE>
, specifying the instance data to convert into a fixed point value from the passed text.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The instance field will be updated.</P>
<P CLASS="refField">
Interception:	Can be intercepted by a subclass of GenValue to allow custom text formats to be displayed on the screen. In this case, you would also subclass <CODE>
MSG_GEN_VALUE_GET_VALUE_TEXT</CODE>
.</P>


<H6 CLASS="RefETitle">
MSG_GEN_VALUE_GET_MAX_TEXT_LEN</H6>
<PRE CLASS="syntax">byte	MSG_GEN_VALUE_GET_MAX_TEXT_LEN();</PRE>
<P>
This message retrieves the maximum number of characters allowed to be typed into a textual GenValue. By default, this number is calculated from the minimums and maximums specified. Subclasses of GenValue may wish to intercept this message to allow different text lengths (such as values represented with floating point or enumerated type instance data).</P>
<P CLASS="refField">
Source:	The GenValue object sends this to itself when it needs to figure out its maximum text length.</P>
<P CLASS="refField">
Destination:	Itself.</P>
<P CLASS="refField">
Return:	Maximum number of allowable characters</P>
<P CLASS="refField">
Interception:	May be intercepted to allow different text lengths.</P>


<H6 CLASS="RefETitle">
MSG_GEN_VALUE_SELECT_TEXT</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SELECT_TEXT();</PRE>
<P>
This message selects a GenValue's text, if allowed by the specific UI.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.4 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Using Value Ratios</H3>
<PRE>MSG_GEN_VALUE_GET_VALUE_RATIO, MSG_GEN_VALUE_SET_VALUE_FROM_RATIO</PRE>
<P>
Instead of setting or getting a specific value, you may want in some cases to set or get a value as a ratio; this ratio is determined as the percentage of the difference between the minimum and maximum. For example, if the minimum of a GenValue is 10 and the maximum is 100, the 50% ratio would be 55 (halfway between 10 and 100).</P>
<P>
To retrieve the value of a GenValue as a ratio, send it <CODE>
MSG_GEN_VALUE_GET_VALUE_RATIO</CODE>
. This message will return the ratio as a dword value. You must also pass this message the <CODE>
GenValueType</CODE>
 telling it which instance data you wish to retrieve.</P>
<P>
To set a value within a GenValue as a ratio, send it <CODE>
MSG_GEN_VALUE_SET_VALUE_RATIO</CODE>
, passing it the ratio and the <CODE>
GenValueType</CODE>
 (instance data field) to set. The correct value will be computed and set within your GenValue's instance data.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_e.htm_IX_MSG_GEN_VALUE_GET_VALUE_RATIO">
 </A>
MSG_GEN_VALUE_GET_VALUE_RATIO</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_VALUE_RATIO(
        GenValueType		valueType);</PRE>
<P>
This message gets the value of a GenValue (GVLI_<CODE>
value</CODE>
) as a ratio of its distance between the minimum value and the maximum value. It returns this ratio as a dword (0000.0000h meaning 0%, ffff.ffffh meaning 100%).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
valueType</EM>
	<CODE>
GenValueType</CODE>
 of the instance data field to get the value ratio for.</P>
<P CLASS="refField">
Return:	The ratio as a dword.</P>
<P CLASS="refField">
Interception:	You may intercept subclasses of <CODE>
GenValueClass</CODE>
 to allow custom text formats to be displayed on the screen. Someone subclassing this message for this reason would also want to subclass <CODE>
MSG_GEN_VALUE_SET_VALUE_FROM_TEXT</CODE>
 to correctly parse text to yield a new value.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_e.htm_IX_MSG_GEN_VALUE_SET_VALUE_RATIO">
 </A>
MSG_GEN_VALUE_SET_VALUE_RATIO</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_VALUE_RATIO(
        WWFixed		ratio,
        GenValueType		valueType);</PRE>
<P>
This message sets the value (GVLI_<CODE>
value</CODE>
) of a GenValue as a ratio of the distance between its minimum and the maximum values. This ratio should be in the form of a dword (0000.0000h meaning 0%, ffff.ffffh meaning 100%).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<EM>
ratio</EM>
	The dword ratio value.</P>
<DL>
<DT>
<EM>
valueType</EM>
</DT><DD>The<CODE>
 GenValueType</CODE>
 of the instance data to set as a ratio.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Values_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.5 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Text Filters for the GenValue</H3>
<PRE>MSG_GEN_VALUE_GET_TEXT_FILTER</PRE>
<P>
One of the GenValue's components is a text field to enter values into. When this visual component is being built, the GenValue will send <CODE>
MSG_GEN_VALUE_GET_TEXT_FILTER</CODE>
 to itself to set up a text filter. A text filter allows a textual object to accept or reject certain characters on a number of bases. The default <CODE>
VisTextFilter</CODE>
 provides numeric-only filtering with no spaces and no tabs on GVDF_INTEGER or GVDF_DECIMAL display formats; no tabs on distance unit display formats.</P>
<P>
You may set up your own filter by intercepting this message and returning a <CODE>
VisTextFilter</CODE>
 of your own choosing.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_f.htm_IX_MSG_GEN_VALUE_GET_TEXT_FILTER">
 </A>
MSG_GEN_VALUE_GET_TEXT_FILTER</H6>
<PRE CLASS="syntax">VisTextFilter MSG_GEN_VALUE_GET_TEXT_FILTER();</PRE>
<P>
This message retrieves the text filtering in use on a GenValue object. By default, GenValues use numeric-only filtering with no spaces and no tabs for numbers and a filtering of no tabs for distance units.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is normally sent by a GenValue to itself when building its textual component.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
VisTextFilter </CODE>
in use by the textual portion of the GenValue.</P>
<P CLASS="refField">
Interception:	Usually, you will want to intercept this message if you subclass <CODE>
GenValueClass</CODE>
 and provide your own custom filtering.</P>

<HR>
<A NAME="Values_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">GenValue</A>: 4.6 <A HREF="#Values_a.htm">Supplemental Usage</A>: 
Using Ranges in GenValues</H3>
<PRE>HINT_VALUE_DISPLAYS_RANGE, MSG_GEN_VALUE_SET_RANGE_LENGTH, MSG_GEN_VALUE_GET_RANGE_LENGTH, MSG_GEN_VALUE_ADD_RANGE_LENGTH, MSG_GEN_VALUE_SUBTRACT_RANGE_LENGTH</PRE>
<P>
Special GenValue objects may actually display ranges rather than individual values within a range--for example, the GEOS scrollbars in OSF/Motif display the percentage of the document visible in the view.</P>
<P>
For your GenValue to display a range, use <CODE>
HINT_VALUE_DISPLAYS_RANGE</CODE>
. If this hint is not present, the GenValue is assumed to have a range size of zero. This hint takes an argument of <CODE>
WWFixedAsDWord</CODE>
 to indicate the size of the range.</P>
<P>
To get the range length, use <CODE>
MSG_GEN_VALUE_GET_RANGE_LENGTH</CODE>
. To set the range, use <CODE>
MSG_GEN_VALUE_SET_RANGE_LENGTH</CODE>
. Two other messages, <CODE>
MSG_GEN_VALUE_ADD_RANGE_LENGTH</CODE>
 and <CODE>
MSG_GEN_VALUE_SUBTRACT_RANGE_LENGTH</CODE>
, add or subtract the value of the GenValue by the range length.</P>

<H6 CLASS="RefETitle">
<A NAME="Values_10.htm_IX_MSG_GEN_VALUE_GET_RANGE_LENGTH">
 </A>
MSG_GEN_VALUE_GET_RANGE_LENGTH</H6>
<PRE CLASS="syntax">WWFixedAsDWord MSG_GEN_VALUE_GET_RANGE_LENGTH();</PRE>
<P>
This message returns the value stored in <CODE>
HINT_VALUE_DISPLAYS_RANGE</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The value stored in <CODE>
HINT_VALUE_DISPLAYS_RANGE</CODE>
. If this hint is not set, the return value will be zero.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_10.htm_IX_MSG_GEN_VALUE_SET_RANGE_LENGTH">
 </A>
MSG_GEN_VALUE_SET_RANGE_LENGTH</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SET_RANGE_LENGTH(
        WWFixedAsDWord value);</PRE>
<P>
This message has the effect of adding or changing the hint <CODE>
HINT_VALUE_DISPLAYS_RANGE</CODE>
 for the GenValue. Setting a value of zero will cause the GenValue to act as if it did not have this hint.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Parameters:	<CODE>
value</CODE>
	The new range length.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_10.htm_IX_MSG_GEN_VALUE_ADD_RANGE_LENGTH">
 </A>
MSG_GEN_VALUE_ADD_RANGE_LENGTH</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_ADD_RANGE_LENGTH();</PRE>
<P>
This message adds the range length to the current value of the GenValue object. It has the effect of incrementing the <CODE>
GVLI_value</CODE>
 field by the range length.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Values_10.htm_IX_MSG_GEN_VALUE_SUBTRACT_RANGE_LENGTH">
 </A>
MSG_GEN_VALUE_SUBTRACT_RANGE_LENGTH</H6>
<PRE CLASS="syntax">void	MSG_GEN_VALUE_SUBTRACT_RANGE_LENGTH();</PRE>
<P>
This message subtracts the range length from the current value of the GenValue object. It has the effect of decrementing the <CODE>
GVLI_value</CODE>
 field by the range length.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenValue object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.<A NAME="Values_10.htm_marker=474063">
 </A>
</P>

<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
