<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: JTable_2.htm,v 1.2 97/09/05 14:41:44 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> TableClass Overview</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">The Table Objects</A>: 2 
TableClass Overview</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="JTable_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1 Table Objects</A> 
<!-- to next --> | <A HREF="JTable_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3 TableClass Instance Data</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<CODE>
TableClass</CODE>
 implements a scrolling table. The table should be composed of one or more different columns, and one or more similar rows. Typically, each column would be a different category, and each row would have an entry for every different category.</P>
<P>
<CODE>
TableClass</CODE>
 is a subclass of <CODE>
VisCompClass</CODE>
. This means that you can group tables together or with other Vis objects. (You can put titles on a scrolling table by grouping two different Table objects together; this is discussed in <A HREF="JTable_e.htm#35718"> Table Headings</A>
.)</P>
<P>
<CODE>
TableClass</CODE>
 supports the following features:</P>
<UL>
<LI>
Redrawing:<BR>
<CODE>
TableClass</CODE>
 sends itself messages to instruct itself to redraw cells as needed; you can intercept these messages if you wish to change how cells are drawn. You can instruct a <CODE>
Table</CODE>
 object to redraw a range of cells; it will automatically send the appropriate messages to instruct itself to redraw just those cells currently visible on-screen.</LI>
<LI>
Pointer Events:<BR>
The <CODE>
TableClass</CODE>
 object intercepts pointer events and sends itself appropriate MSG_TABLE_SELECT messages. Applications can subclass these messages if they want to take special actions when cells are selected. When you instantiate a <CODE>
Table</CODE>
 object, you specify (by column) what combination of pointer events should act as a selection. <CODE>
TableClass</CODE>
 can identify start-select, end-select, double-clicking, clicking and holding, and reselecting (i.e. clicking on an already-selected cell).</LI>
<LI>
Selecting Cells<BR>
When cells are selected, a <CODE>
Table</CODE>
 object sends itself a MSG_TABLE_SELECT message. You can subclass this message if you wish. If you do not subclass this message, <CODE>
TableClass</CODE>
 can handle the selection in a number of different ways: it can select a single cell, a whole row, a rectangular region, etc. The table also lets you specify how selections should be identified (e.g. drawn in reverse video, surrounded by a solid box, etc.).</LI>
<LI>
Scrolling:<BR>
If the <CODE>
Table</CODE>
 object contains more rows than can be shown on-screen, it will automatically scroll as needed. You can instruct the <CODE>
Table</CODE>
 to scroll up or down by sending it messages. You can also set a flag, instructing the <CODE>
Table</CODE>
 to scroll automatically when it receives certain pointer events (e.g. when the pointer is dragged off the top or bottom of the table). The <CODE>
Table</CODE>
 can also be set to scroll when certain keys are pressed.</LI>
<LI>
Editing:<BR>
The table can automatically create a <CODE>
VisText</CODE>
 object when the user wants to edit the text in a cell. You can send messages to instruct it to create that <CODE>
VisText</CODE>
; you can also subclass messages to set the default contents of the <CODE>
VisText</CODE>
, or to process the text entered by the user before it's entered in the cell. This is discussed in <A HREF="JTable_a.htm#33610"> Editing Cells</A>
.</LI>
<LI>
Drag-Drop:<BR>
The <CODE>
Table</CODE>
 implements a quick-copy, drag-and-drop mechanism. When you activate quick-copy mode, the user can drag a cell to a new location. At this time, the <CODE>
Table</CODE>
 sends itself a message; you can intercept this message, and take an appropriate action (such as copying the data from the source cell over the destination cell). This is discussed in <A HREF="JTable_b.htm#58099"> Dragging and Dropping</A>
.</LI>
</UL>
<P>
There is one function the <CODE>
Table</CODE>
 object does <EM>
not</EM>
 perform. It does not <EM>
store</EM>
 the data contained in the cells. When it needs to know the contents of a cell, it requests that information; when the user changes a cell, it informs you. You, however, must store the information yourself.
<IMG SRC="JTable_2_aTable.gif">

</P>
<P>
For example, whenever the <CODE>
Table</CODE>
 object needs to draw a cell, it sends itself <CODE>
MSG_TABLE_QUERY_DRAW</CODE>
, specifying which cell needs to be drawn. You should intercept this message; your handler should look up the data stored in that cell, and draw its contents. Similarly, when a user edits a cell, you first tell the <CODE>
Table</CODE>
 object what the <EM>
current</EM>
 contents of the cell are (by intercepting <CODE>
MSG_TABLE_START_EDIT_CELL_TEXT</CODE>
). The <CODE>
Table</CODE>
 then brings up a <CODE>
VisText</CODE>
 which contains the current contents of the cell. The user can edit or change this text. When the user is finished, the <CODE>
Table</CODE>
 object informs the application (via <CODE>
MSG_TABLE_DONE_EDIT_CELL_TEXT</CODE>
) what the cell's new contents are. The application should intercept the message and store the new contents.</P>
<P>
Since the <CODE>
Table</CODE>
 refers to its cells by row and column numbers, you may wish to store its data in a GEOS <EM>
cell file</EM>
. A cell file is a GEOS VM file which uses special structures and routines to organize DB items so they can be accessed by row and column numbers, instead of by group and item handles. For more information about cell files, consult the &quot;Database&quot; chapter of the Concepts book provided with the SDK.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="JTable_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">1 Table Objects</A> 
<!-- to next --> | <A HREF="JTable_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3 TableClass Instance Data</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
