<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_2f.htm,v 1.2 97/06/25 18:55:12 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: ProtocolNumber ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Point ...</A> 
<!-- to next --> | <A HREF="S_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">RangeSortFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ProtocolNumber">
 </A>
<A NAME="IX_PN_&ldots;">
 </A>
<H1 CLASS="refHeading">
ProtocolNumber</H1>
<PRE CLASS="syntax">typedef struct {
word	PN_major;
word	PN_minor;
} ProtocolNumber;</PRE>
<P>
Defines the protocol level of a file, geode, or document. <CODE>
PN_major</CODE>
 represents significant compatibility comparisons, and <CODE>
PN_minor</CODE>
 represents less significant differences. If the major protocol is different between to items, they are incompatible. If the minor protocol is different, they may or may not be incompatible.</P>
</DIV>
<DIV>
<A NAME="IX_QueueHandle">
 </A>
<H1 CLASS="refHeading">
QueueHandle</H1>
<PRE CLASS="syntax">typedef Handle QueueHandle;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_QuickSortParameters">
 </A>
<A NAME="IX_QSP_&ldots;">
 </A>
<H1 CLASS="refHeading">
QuickSortParameters</H1>
<PRE CLASS="syntax">typedef struct _QuickSortParameters {
word _pascal (*QSP_compareCallback) 							(void *			el1, 
							 void *			el2,</PRE>
<PRE CLASS="syntax">					 		 word 			valueForCallback));
void _pascal (*QSP_lockCallback) (void *el, word valueForCallback));
void _pascal (*QSP_unlockCallback) (void *el, word valueForCallback));
word 		QSP_insertLimit;
word 		QSP_medianLimit;
&nbsp;
/* These are set internally by the quicksort algorithm and should not
 * be set by the caller: */
word 		QSP_nLesser;
word 		QSP_nGreater;
 &nbsp;
} QuickSortParameters;</PRE>
<P>
This structure is passed to <CODE>
ArrayQuickSort</CODE>
. The fields have the following meanings:</P>
<DL>
<DT>
<CODE>
*</CODE>
QSP<CODE>
_compareCallback</DT><DD>
</CODE>
This routine is called to compare elements. It should be declared _pascal. It should return a positive value if <EM>
*el1</EM>
 ought to come before <EM>
*e2</EM>
 in the sorted list; a negative value if <EM>
*el1</EM>
 ought to come after <EM>
*e2</EM>
 in the sorted list; and zero if it doesn't matter which comes first.</DD>
<DT>
<CODE>
*</CODE>
QSP<CODE>
_lockCallback</DT><DD>
</CODE>
This routine is called before <CODE>
ArrayQuickSort</CODE>
 examines or changes any element. It should be declared _pascal. You can pass a null function pointer, indicating that no locking callback routine should be called.</DD>
<DT>
<CODE>
*</CODE>
QSP<CODE>
_lockCallback</DT><DD>
</CODE>
This routine is called after <CODE>
ArrayQuickSort</CODE>
 examines or changes any element. It should be declared _pascal. You can pass a null function pointer, indicating that no unlocking callback routine should be called.</DD>
<DT>
QSP<CODE>
_insertLimit</DT><DD>
</CODE>
If there are fewer than QSP<CODE>
_insertLimit</CODE>
 elements in a sublist, <CODE>
ArrayQuickSort</CODE>
 will use an insertion sort for that sublist, rather than a QuickSort.</DD>
<DT>
QSP<CODE>
_medianLimit</DT><DD>
</CODE>
If there are fewer than QSP<CODE>
_medianLimit</CODE>
 elements in a sublist, ArrayQuickSort will use the first element as a partition, instead of searching for the median element.</DD>
</DIV>
<DIV>
<A NAME="IX_RangeEnumCallbackParams">
 </A>
</DL>
<H1 CLASS="refHeading">
RangeEnumCallbackParams</H1>
<P>
See <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeEnum()">RangeEnum()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_RangeEnumFlags">
 </A>
<A NAME="IX_REF_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeEnumFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags RangeEnumFlags;
#define REF_ALL_CELLS							0x80
#define REF_NO_LOCK							0x40
#define REF_COLUMN_FLAGS							0x20
#define REP_MATCH_COLUMN_FLAGS							0x10
#define REF_CELL_ALLOCATED							0x08
#define REF_CELL_FREED							0x04
#define REF_OTHER_ALLOC_OR_FREE							0x02
#define REF_COLUMN_FLAGS_MODIFIED							0x01</PRE>
<P>
These flags are used by <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeEnum()">RangeEnum()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_RangeEnumParams">
 </A>
<A NAME="IX_REP_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeEnumParams</H1>
<PRE CLASS="syntax">typedef struct {
PCB(RANGE_ENUM_CALLBACK_RETURN_TYPE, REP_callback,
										(RangeEnumCallbackParams));</PRE>
<PRE CLASS="syntax">Rectangle				REP_bounds;
byte				REP_columnFlags;
word				*REP_columnFlagsArray;
CellFunctionParameters				*REP_cfp;
byte				REP_matchFlags;
word				*REP_locals;
} RangeEnumParams;</PRE>
<P>
This structure is used by two routines, <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeEnum()">RangeEnum()</A></CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_4.htm#IX_CellGetExtent()">CellGetExtent()</A></CODE>
. When it is used by <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeEnum()">RangeEnum()</A></CODE>
, the structure specifies all the details about how <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeEnum()">RangeEnum()</A></CODE>
 will function. <CODE>
<A HREF="../../CRef/Routines/R_4.htm#IX_CellGetExtent()">CellGetExtent()</A></CODE>
 is passed a blank <CODE>
RangeEnumParams</CODE>
 structure; it fills in the <CODE>
REP_bounds</CODE>
 field.</P>
<P>
The callback routine, if any, should be declared _pascal.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RangeInsertParams">
 </A>
<H1 CLASS="refHeading">
RangeInsertParams</H1>
<P>
See <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeInsert()">RangeInsert()</A></CODE>
.:</P>
</DIV>
<DIV>
<A NAME="IX_RangeSortError">
 </A>
<A NAME="IX_RSE_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeSortError</H1>
<PRE CLASS="syntax">typedef enum /* word */ {
RSE_NO_ERROR,
RSE_UNABLE_TO_ALLOC,
} RangeSortError;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_RangeSortCellExistFlags">
 </A>
<A NAME="IX_RSCEF_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeSortCellExistFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags RangeSortCellExistsFlags;
#define RSCEF_SECOND_CELL_EXISTS 0x02
#define RSCEF_FIRST_CELL_EXISTS 0x01</PRE>
<P>
&nbsp;</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Point ...</A> 
<!-- to next --> | <A HREF="S_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">RangeSortFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
