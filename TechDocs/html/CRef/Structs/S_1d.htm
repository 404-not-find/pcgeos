<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_1d.htm,v 1.2 97/06/25 18:51:48 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: GeoWorksVisContentGCNListType ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_1c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeoworksMediumID ...</A> 
<!-- to next --> | <A HREF="S_1e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GStringElement ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GeoWorksvisContentGCNListType">
 </A>
<A NAME="IX_VCGCNLT_TARGET_NOTIFY_TEXT_PARA_ATTR_CHANGE">
 </A>
<H1 CLASS="refHeading">
GeoWorksVisContentGCNListType</H1>
<PRE CLASS="syntax">typedef enum {
VCGCNLT_TARGET_NOTIFY_TEXT_PARA_ATTR_CHANGE = 0x4a00,
 PADDING_VCGCNLT_INVALID_ITEM_000
} GeoWorksVisContentGCNListType;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GetMaskType">
 </A>
<A NAME="IX_GMT_&ldots;">
 </A>
<H1 CLASS="refHeading">
GetMaskType</H1>
<PRE CLASS="syntax">typedef ByteEnum GetMaskType;
#define GMT_ENUM				0
#define GMT_BUFFER				1</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GetPalType">
 </A>
<A NAME="IX_GPT_&ldots;">
 </A>
<H1 CLASS="refHeading">
GetPalType</H1>
<PRE CLASS="syntax">typedef ByteEnum GetPalType;
#define GPT_ACTIVE				0
#define GPT_CUSTOM				1
#define GPT_DEFAULT				2</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GFM_info">
 </A>
<H1 CLASS="refHeading">
GFM_info</H1>
<P>
See <CODE>
<A HREF="../../CRef/Routines/R_3f.htm#IX_GrFontMetrics()">GrFontMetrics()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_GOC_POINT macro">
 </A>
<H1 CLASS="refHeading">
GOC_POINT macro</H1>
<PRE CLASS="syntax">#define GOC_POINT(x,y) GOC_SW(x), GOC_SW(y)</PRE>
<P>
This macro is useful when statically declaring GStrings. A GString is basically an array of bytes; this macro takes two word-length values and breaks them up into four comma-seperated bytes. Thus, they help to make GString commands with variable number of point data appear readable. For example:</P>
<PRE>...
GSDrawPolyline(3),
  GOC_POINT(0,6), GOC_POINT(10,6), GOC_POINT(10,1),
GSFillPolygon(4,ODD_EVEN),
  GOC_POINT(5,1), GOC_POINT(9,0), 
  GOC_POINT(9,5), GOC_POINT(5,6),</PRE>
<PRE>...</PRE>
</DIV>
<DIV>
<A NAME="IX_GOC_SW(), GOC_WORD() macros">
 </A>
<H1 CLASS="refHeading">
GOC_SW(), GOC_WORD() macros</H1>
<PRE CLASS="syntax">#define GOC_SW(a)       GOC_WORD(a)
#define GOC_WORD(a)     ((a)&amp;0xff),(((a)&amp;0xff00)&gt;&gt;8)</PRE>
<P>
These macros are useful when you're statically defining a byte array which contains word-length values. Each macro breaks up a word-length value into two bytes, seperated by a comma.</P>
</DIV>
<DIV>
<A NAME="IX_GraphicPattern">
 </A>
<A NAME="IX_HP_&ldots;  (GraphicPattern structure)">
 </A>
<H1 CLASS="refHeading">
GraphicPattern</H1>
<PRE CLASS="syntax">typedef struct { 
PatternType 		HP_type;
byte 		HP_data;
} GraphicPattern;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GSControl">
 </A>
<A NAME="IX_GSC_&ldots;">
 </A>
<H1 CLASS="refHeading">
GSControl</H1>
<PRE CLASS="syntax">typedef WordFlags GSControl;
#define GSC_PARTIAL 				0x0200
#define GSC_ONE 				0x0100
#define GSC_MISC 				0x0080
#define GSC_LABEL 				0x0040
#define GSC_ESCAPE 				0x0020
#define GSC_NEW_PAGE 				0x0010
#define GSC_XFORM 				0x0008
#define GSC_OUTPUT 				0x0004
#define GSC_ATTR 				0x0002
#define GSC_PATH 				0x0001</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GSRetType">
 </A>
<A NAME="IX_GSRT_&ldots;">
 </A>
<H1 CLASS="refHeading">
GSRetType</H1>
<PRE CLASS="syntax">typedef ByteEnum GSRetType;
#define GSRT_COMPLETE				0
#define GSRT_FORM_FEED				1
#define GSRT_ONE 				2
#define GSRT_ESCAPE 				3
#define GSRT_OUTPUT 				4
#define GSRT_ELEMENT 				5
#define GSRT_FAULT 				0xff</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_GState">
 </A>
<H1 CLASS="refHeading">
GState</H1>
<P>
GStates are always referenced by means of GStateHandles, and are documented there.</P>
</DIV>
<DIV>
<A NAME="IX_GStateHandle">
 </A>
<H1 CLASS="refHeading">
GStateHandle</H1>
<PRE CLASS="syntax">typedef Handle GStateHandle;</PRE>
<P>
GStates, or graphics states, are used to interpret graphics commands. Any graphics command that draws anything takes a GStateHandle as an argument. Each GState is associated with a window, and the graphics system uses the GState to determine which window the command should affect.</P>
<P>
The GState also holds considerable information determining how drawing commands will be carried out. For instance, it holds the line color. To draw a green line, first one routine set's the GState's line color to green. From then on (or until the line color is changed again), all lines drawn using that GState will be green. Thus, all commands that set color, pattern, or other drawing attributes take a GStateHandle argument.</P>
<P>
GStateHandles are also used when creating bitmaps and graphics strings. In this case, the associated window is fake; all drawing commands passed a GStateHandle representing a bitmap or graphics string will affect the data structure instead of being drawn to screen.</P>
</DIV>
<DIV>
<A NAME="IX_GStrings:GString type">
 </A>
<H1 CLASS="refHeading">
GString</H1>
<PRE CLASS="syntax">typedef void GString;</PRE>
<P>
A GString (short for &quot;Graphics Strings&quot;) represents a string of graphics commands. Each GString is made up of one or more GString elements, each of which corresponds to some standard graphics command.</P>
<P>
GStrings may be created by means of drawing to a GStateHandle returned by <CODE>
<A HREF="../../CRef/Routines/R_38.htm#IX_GrCreateState()">GrCreateState()</A></CODE>
, but quite often GStrings are declared explicitly. The GString's data is often set up using macros like <CODE>
<A HREF="../../CRef/Routines/R_4e.htm#IX_GSDrawLine() macro">GSDrawLine()</A></CODE>
. These macros will output an opcode (of type <CODE>
GStringElement</CODE>
) and format their macro arguments into data expected with the opcode.</P>
<P>
For instance,</P>
<PRE>GSDrawLine(72, 144, 216, 288);</PRE>
<P>
...would expand to the data:</P>
<PRE>(GStringElement)			GR_DRAW_LINE</PRE>
<PRE>GOC_SW(72), GOC_SW(144), GOC_SW(216), GOC_SW(288);</PRE>
<P>
...where GOC_SW() is a macro that breaks up a word-length value into two bytes. Fundamentally, a GString is just an array of bytes.</P>
<P>
Thus, these macros just represent data, though they look like normal kernel graphics commands.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_1c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeoworksMediumID ...</A> 
<!-- to next --> | <A HREF="S_1e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GStringElement ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
