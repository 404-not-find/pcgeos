<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_25.htm,v 1.2 97/06/25 18:53:26 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: Language ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_24.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InstrumentTable ...</A> 
<!-- to next --> | <A HREF="S_26.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LMemType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_Language type">
 </A>
<A NAME="IX_L_&ldots;">
 </A>
<H1 CLASS="refHeading">
Language</H1>
<PRE CLASS="syntax">typedef ByteEnum Language;
#define L_DEFAULT				0
#define L_GRAPHIC 				0
#define L_ENGLISH 				1
#define L_GERMAN 				2
#define L_FRENCH 				3
#define L_SPANISH 				4
#define L_ITALIAN 				5
#define L_DANISH 				6
#define L_DUTCH 				7</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LargeMouseData">
 </A>
<A NAME="IX_LMD_&ldots;">
 </A>
<H1 CLASS="refHeading">
LargeMouseData</H1>
<PRE CLASS="syntax">typedef struct {
PointDWFixed				LMD_location;
byte				LMD_buttonInfo;
UIFunctionsActive				LMD_uiFunctionsActive;
} LargeMouseData;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LayerPriority">
 </A>
<A NAME="IX_LAYER_PRIO_&ldots;">
 </A>
<H1 CLASS="refHeading">
LayerPriority</H1>
<PRE CLASS="syntax">typedef ByteEnum LayerPriority;
#define LAYER_PRIO_MODAL					 6
#define LAYER_PRIO_ON_TOP					 8
#define LAYER_PRIO_STD					12
#define LAYER_PRIO_ON_BOTTOM					14</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LibraryCallType">
 </A>
<A NAME="IX_LCT_&ldots;">
 </A>
<H1 CLASS="refHeading">
LibraryCallType</H1>
<PRE CLASS="syntax">typedef enum /* word */ {
LCT_ATTACH,				/* The library was just loaded. */
LCT_DETACH,				/* The library is about to be unloaded. */
LCT_NEW_CLIENT,				/* A new client of the library was just loaded. */
LCT_NEW_CLIENT_THREAD,				/* A new thread was just created for a
				 * current client of the library. */
LCT_CLIENT_THREAD_EXIT,				/* A thread was just exited for a current
				 * client of the library. */
LCT_CLIENT_EXIT,				/* Library's client is about to be unloaded. */
} LibraryCallType</PRE>
<P>
This type is used by library entry point routines. Library entry point routines take a value of this enumerated type to determine what, if anything, is to be done.</P>
</DIV>
<DIV>
<A NAME="IX_LineAttr">
 </A>
<A NAME="IX_LA_&ldots;">
 </A>
<H1 CLASS="refHeading">
LineAttr</H1>
<PRE CLASS="syntax">typedef struct {
byte 		LA_colorFlag;
RGBValue 		LA_color;
SysDrawMask 		LA_mask;
ColorMapMode 		LA_mapMode;
LineEnd 		LA_end;
LineJoin	 	LA_join;
LineStyle 		LA_style;
WWFixed 		LA_width;
} LineAttr;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LineEnd">
 </A>
<A NAME="IX_LE_&ldots;">
 </A>
<A NAME="IX_LAST_LINE_END_TYPE">
 </A>
<H1 CLASS="refHeading">
LineEnd</H1>
<PRE CLASS="syntax">typedef ByteEnum LineEnd;
#define LE_BUTTCAP				0
#define LE_ROUNDCAP				1
#define LE_SQUARECAP 				2
#define LAST_LINE_END_TYPE				LE_SQUARECAP</PRE>
<P>
Line ends determine how the graphics system will draw the end of a line segment.</P>
</DIV>
<DIV>
<A NAME="IX_LineJoin">
 </A>
<A NAME="IX_LJ_&ldots;">
 </A>
<A NAME="IX_LAST_LINE_JOIN_TYPE">
 </A>
<H1 CLASS="refHeading">
LineJoin</H1>
<PRE CLASS="syntax">typedef ByteEnum LineJoin;
#define LJ_MITERED					0
#define LJ_ROUND					1
#define LJ_BEVELED					2
#define LAST_LINE_JOIN_TYPE					LJ_BEVELED</PRE>
<P>
This enumerated type determines how the graphics system will draw corners of rectangles and polylines.</P>
</DIV>
<DIV>
<A NAME="IX_MAX_DASH_ARRAY_PAIRS">
 </A>
<A NAME="IX_DashPairArray">
 </A>
<A NAME="IX_LineStyle">
 </A>
<A NAME="IX_LS_&ldots;">
 </A>
<H1 CLASS="refHeading">
LineStyle</H1>
<PRE CLASS="syntax">typedef ByteEnum LineStyle;
#define LS_SOLID					0
#define LS_DASHED 					1
#define LS_DOTTED 					2
#define LS_DASHDOT 					3
#define LS_DASHDDOT 					4
#define LS_CUSTOM 					5
#define MAX_DASH_ARRAY_PAIRS 					5</PRE>
<P>
The <CODE>
LineStyle</CODE>
 type describes a line's &quot;dottedness.&quot; Lines using custom dashes will work with the <CODE>
DashPairArray</CODE>
 structure:</P>
<PRE>typedef word    DashPairArray[MAX_DASH_ARRAY_PAIRS*2];</PRE>
</DIV>
<DIV>
<A NAME="IX_LMemBlockHeader">
 </A>
<A NAME="IX_LMBH_&ldots;">
 </A>
<H1 CLASS="refHeading">
LMemBlockHeader</H1>
<PRE CLASS="syntax">typedef struct {
MemHandle		LMBH_handle;
word		LMBH_offset;
word		LMBH_flags;
LMemTypes		LMBH_lmemType;
word		LMBH_blockSize;
word		LMBH_nHandles;
word		LMBH_freeList;
word		LMBH_totalFree;
} LMemBlockHeader;</PRE>
<P>
This structure is found at the beginning of every block which contains an LMem heap. You can examine any of the fields by locking the block and casting its address to a <CODE>
*LMemBlockHeader</CODE>
. You should not, however, change any of the fields yourself; they are managed by the LMem routines.</P>
<P CLASS="refField"><STRONG>
Contents:</STRONG>	The header has the following fields:</P>
<DL>
<DT>
LMBH<CODE>
_handle</DT><DD>
</CODE>
The handle of this block.</DD>
<DT>
LMBH<CODE>
_offset</DT><DD>
</CODE>
The offset from the beginning of the block to the beginning of the heap.</DD>
<DT>
LMBH<CODE>
_flags</DT><DD>
</CODE>
The <CODE>
LocalMemoryFlags</CODE>
 currently set for the block. The flags are described in the entry for <CODE>
<A HREF="../../CRef/Routines/R_64.htm#IX_LMemInitHeap()">LMemInitHeap()</A></CODE>
.</DD>
<DT>
LMBH<CODE>
_lmemType</DT><DD>
</CODE>
The type of LMem heap in this block. This field is a member of the <CODE>
LMemType</CODE>
 enumerated type, described in the entry for <CODE>
<A HREF="../../CRef/Routines/R_64.htm#IX_LMemInitHeap()">LMemInitHeap()</A></CODE>
.</DD>
<DT>
LMBH<CODE>
_blockSize</DT><DD>
</CODE>
The total size of this block. This size may change in either direction as a result of chunk allocation and heap compaction.</DD>
<DT>
LMBH<CODE>
_nHandles</DT><DD>
</CODE>
The number of handles available in the chunk handle table. Not all of these chunks are necessarily allocated as owned or free chunks. The table grows automatically when necessary.</DD>
<DT>
LMBH<CODE>
_freeList</DT><DD>
</CODE>
The chunk handle of the first free chunk in the linked list of free chunks.</DD>
<DT>
LMBH<CODE>
_totalFree</DT><DD>
</CODE>
The total amount of free space in the LMem heap.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not change the settings of the <CODE>
LMemBlockHeader</CODE>
. They are automatically maintained by the LMem routines.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_64.htm#IX_LMemInitHeap()">LMemInitHeap()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_24.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InstrumentTable ...</A> 
<!-- to next --> | <A HREF="S_26.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LMemType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
