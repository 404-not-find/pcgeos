<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_36.htm,v 1.2 97/06/25 18:56:31 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: SocketLoadType ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_35.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketError ...</A> 
<!-- to next --> | <A HREF="S_37.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundPlayFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SocketLoadType">
 </A>
<A NAME="IX_SLT_&ldots;">
 </A>
<H1 CLASS="refHeading">
SocketLoadType</H1>
<PRE CLASS="syntax">typedef enum {
        SLT_USER_LOAD_APPLICATION = 0x0,
        SLT_GEODE_LOAD,
} SocketLoadType;</PRE>
<P>
The Socket library has the ability to load an application when it senses packet coming in to a port. It uses the <CODE>
SocketLoadType</CODE>
 to determine how to load the application: via <CODE>
<A HREF="../../CRef/Routines/R_9e.htm#IX_UserLoadApplication()">UserLoadApplication()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_34.htm#IX_GeodeLoad()">GeodeLoad()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketOption">
 </A>
<H1 CLASS="refHeading">
SocketOption</H1>
<PRE CLASS="syntax">typedef enum {
        SO_RECV_BUF = 0x0,                   /* receive buffer size     */
        SO_SEND_BUF = 0x2,                   /* send buffer size        */
        SO_INLINE = 0x4,                     /* inline urgent data      */
        SO_NODELAY = 0x6,                    /* send data immediately   */
        SO_OWNER = 0x8,                      /* which app owns socket   */
} SocketOption;</PRE>
<P>
Various options which may be changed on a per-Socket basis by means of the <CODE>
<A HREF="../../CRef/Routines/R_8a.htm#IX_SocketSetIntSocketOption()">SocketSetIntSocketOption()</A></CODE>
 routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketPort">
 </A>
<A NAME="IX_SP_&ldots;">
 </A>
<H1 CLASS="refHeading">
SocketPort</H1>
<PRE CLASS="syntax">typedef struct {
        word		SP_port;				/*  16-bit port number */
        ManufacturerID		SP_manuf;				/*  16-bit manufacturer's ID */
} SocketPort;</PRE>
<P>
Port numbers identify a particular line of communication within a machine. Port numbers may be 32-bit or 16-bit, depending on the domain. They are specified via the <CODE>
SocketPort</CODE>
 structure, made up of a 16-bit <CODE>
ManufacturerID</CODE>
 and 16-bit token number. If the domain uses 16-bit socket numbers, then use MANUFACTURER_ID_SOCKET_16BIT_PORT as the <CODE>
ManufacturerID</CODE>
. If the domain allows 32-bit socket numbers, then you may use MANUFACTURER_ID_SOCKET_16BIT_PORT or some other <CODE>
ManufacturerID</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketRecvFlags">
 </A>
<A NAME="IX_SRF_&ldots;">
 </A>
<H1 CLASS="refHeading">
SocketRecvFlags</H1>
<PRE CLASS="syntax">typedef WordFlags SocketRecvFlags;
        #define SRF_ADDRESS (0x8000) 					/*  return source address of data */
        #define SRF_URGENT (0x4000) 					/*  return urgent data, if any */
        #define SRF_PEEK (0x2000) 					/*  leave data in socket */</PRE>
<P>
These flags allow you to set options when receiving data from a socket. SRF_ADDRESS requests the address of the machine sending the data. SRF_URGENT requests that only urgent data be returned, if any. SRF_PEEK asks that the data be left on the socket. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketSendFlags">
 </A>
<A NAME="IX_SSF_&ldots;">
 </A>
<H1 CLASS="refHeading">
SocketSendFlags</H1>
<PRE CLASS="syntax">typedef WordFlags SocketSendFlags;
        #define SSF_ADDRESS (0x8000) 						/*  an address is supplied */
        #define SSF_URGENT (0x4000) 						/*  this is urgent data */
        #define SSF_OPEN_LINK (0x2000)					 	/*  this datagram should open the
        						 *    link, if it is closed       */
        &nbsp;</PRE>
<P>
Use this structure to specify options when sending data over a socket. You may signal that you are specifying an address and/or that the packet sent should be marked urgent.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SortOrder">
 </A>
<H1 CLASS="refHeading">
SortOrder</H1>
<PRE CLASS="syntax">typedef ByteEnum SortOrder;
#define SO_ASCENDING				0
#define SO_DESCENDING				1</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_SoundDriverCapability">
 </A>
<A NAME="IX_SDC_&ldots;">
 </A>
<A NAME="IX_SoundDriverNoiseCapability">
 </A>
<A NAME="IX_SDNC_&ldots;">
 </A>
<A NAME="IX_SoundDriverWaveFormCapability">
 </A>
<A NAME="IX_SDWFC_&ldots;">
 </A>
<A NAME="IX_SoundDriverTimbreCapability">
 </A>
<A NAME="IX_SDTC_&ldots;">
 </A>
<A NAME="IX_SoundDriverEnvelopeCapability">
 </A>
<A NAME="IX_SDEC_&ldots;">
 </A>
<H1 CLASS="refHeading">
SoundDriverCapability</H1>
<PRE CLASS="syntax">typedef WordFlags SoundDriverCapability;
#define SDC_NOISE 				0x8000
#define SDC_WAVEFORM 				0x6000
#define SDC_TIMBRE 				0x1800
#define SDC_ENVELOPE 				0x0600
&nbsp;
typedef WordFlags SoundDriverNoiseCapability;
#define SDNC_NO_NOISE 				0x0000
#define SDNC_WHITE_NOISE 				0x8000
&nbsp;
typedef WordFlags SoundDriverWaveFormCapability
#define SDWFC_NONE 				0x0000
#define SDWFC_SELECT 				0x2000
#define SDWFC_GENERATE 				0x4000
&nbsp;
typedef WordFlags SoundDriverTimbreCapability;
#define SDTC_TONE_GENERATOR 0x0000
#define SDTC_ADDITIVE 				0x0800
#define SDTC_MODULATOR 				0x1000
#define SDTC_SELECTIVE 				0x1800
&nbsp;
typedef WordFlags SoundDriverEnvelopeCapability;
#define SDEC_NONE 				0x0000
#define SDEC_ADSR 				0x0200
#define SDEC_DSP 				0x0400</PRE>
<P>
These fields encode information about what the sound driver is capable of in terms of music synthesis.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_35.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketError ...</A> 
<!-- to next --> | <A HREF="S_37.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundPlayFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
