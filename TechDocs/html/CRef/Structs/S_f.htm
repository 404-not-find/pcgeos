<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_f.htm,v 1.2 97/06/25 19:01:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: DosNoDotFileName ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DiskFindResult ...</A> 
<!-- to next --> | <A HREF="S_10.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">EndOfSongFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DosNoDotFileName">
 </A>
<A NAME="IX_DOS_NO_DOT_DOS_FILE_NAME_SIZE">
 </A>
<H1 CLASS="refHeading">
DosNoDotFileName</H1>
<PRE CLASS="syntax">typedef char DosNoDotFileName[DOS_NO_DOT_DOS_FILE_NAME_SIZE];</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_DrawMask">
 </A>
<H1 CLASS="refHeading">
DrawMask</H1>
<PRE CLASS="syntax">typedef byte DrawMask[8];</PRE>
<P>
The graphics system uses this structure for defining custom draw masks.</P>
</DIV>
<DIV>
<A NAME="IX_DriveType">
 </A>
<A NAME="IX_DRIVE_&ldots;">
 </A>
<H1 CLASS="refHeading">
 DriveType</H1>
<PRE CLASS="syntax">typedef ByteEnum DriveType;
#define DRIVE_5_25				0
#define DRIVE_3_5				1
#define DRIVE_FIXED				2
#define DRIVE_RAM				3
#define DRIVE_CD_ROM				4
#define DRIVE_8				5
#define DRIVE_UNKNOWN				0xf
} DriveType;</PRE>
<P>
Several routines (in particular, <CODE>
<A HREF="../../CRef/Routines/R_1d.htm#IX_DriveGetStatus()">DriveGetStatus()</A></CODE>
) provide information about drives used by the computer running GEOS. These routines return a member of the <CODE>
DriveTypes</CODE>
 enumerated type. Note that while the type is byte-length, all of the values are guaranteed to fit in four bits; thus, routines like <CODE>
<A HREF="../../CRef/Routines/R_1d.htm#IX_DriveGetStatus()">DriveGetStatus()</A></CODE>
 can return a <CODE>
DriveTypes</CODE>
 value in the low four bits and other flags in the high four bits of a single byte.</P>
</DIV>
<DIV>
<A NAME="IX_DriverAttrs">
 </A>
<A NAME="IX_DA_&ldots;">
 </A>
<H1 CLASS="refHeading">
DriverAttrs</H1>
<PRE CLASS="syntax">typedef WordFlags DriverAttrs;
#define DA_FILE_SYSTEM						0x8000
#define DA_CHARACTER						0x4000
#define DA_HAS_EXTENDED_INFO						0x2000</PRE>
<P>
This record contains flags that indicate a given driver's attributes. This record is stored in the driver's <CODE>
DriverInfoStruct</CODE>
 structure.</P>
</DIV>
<DIV>
<A NAME="IX_DriverExtendedInfoStruct">
 </A>
<A NAME="IX_DEIS_&ldots;">
 </A>
<H1 CLASS="refHeading">
DriverExtendedInfoStruct</H1>
<PRE CLASS="syntax">typedef struct {
DriverInfoStruct			DEIS_common;			/* The base driver info structure */
MemHandle			DEIS_resource;			/* Handle of driver's DriverExtendedInfo
						 * table. */
} DriverExtendedInfoStruct;</PRE>
<P>
This structure is used by Preferences to locate the names of devices supported by a particular driver.</P>
</DIV>
<DIV>
<A NAME="IX_DriverExtendedInfoTable">
 </A>
<A NAME="IX_DEIT_&ldots;">
 </A>
<H1 CLASS="refHeading">
DriverExtendedInfoTable</H1>
<PRE CLASS="syntax">typedef struct {
LMemBlockHeader			DEIT_common;
word			DEIT_numDevices;
ChunkHandle			DEIT_ChunkHandle;
word			DEIT_infoTable;
} DriverExtendedInfoTable;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_DriverInfoStruct">
 </A>
<A NAME="IX_DIS_&ldots;  (DriverInfoStruct structure)">
 </A>
<H1 CLASS="refHeading">
DriverInfoStruct</H1>
<PRE CLASS="syntax">typedef struct {
 void (*DIS_strategy)();							/* Pointer to strategy routine */
 DriverAttrs		DIS_driverAttributes;					/* driver's attribute flags */
 DriverType		DIS_driverType;					/* driver's type */
} DriverInfoStruct;</PRE>
<P>
This structure defines the characteristics of a particular driver. In general, applications will not need to access this structure unless they use a driver directly.</P>
</DIV>
<DIV>
<A NAME="IX_DriverType">
 </A>
<A NAME="IX_DRIVER_TYPE_&ldots;">
 </A>
<H1 CLASS="refHeading">
DriverType</H1>
<PRE CLASS="syntax">typedef enum {
DRIVER_TYPE_VIDEO = 1,					/* Video drivers */
DRIVER_TYPE_INPUT,					/* Input (keyboard, mouse) drivers */
DRIVER_TYPE_MASS_STORAGE,					/* Disk/Drive drivers */
DRIVER_TYPE_STREAM,					/* Stream and port drivers */
DRIVER_TYPE_FONT,					/* Font drivers */
DRIVER_TYPE_OUTPUT,					/* Output (not video and printer) drivers */
DRIVER_TYPE_LOCALIZATION,					/* Localization drivers */
DRIVER_TYPE_FILE_SYSTEM,					/* File system drivers */
DRIVER_TYPE_PRINTER,					/* Printer drivers */
DRIVER_TYPE_SWAP,					/* Swap drivers */
DRIVER_TYPE_POWER_MANAGEMENT,					/* Power management drivers */
DRIVER_TYPE_TASK_SWITCH,					/* Task switch drivers */
DRIVER_TYPE_NETWORK					/* Network file system drivers */
} DriverType;</PRE>
<P>
This enumerated type has one value for each type of driver in the system. It is used primarily with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodeUseDriver()">GeodeUseDriver()</A></CODE>
 and its associated routines. Each driver stores its type in its <CODE>
DriverInfoStruct</CODE>
 structure.</P>
</DIV>
<DIV>
<A NAME="IX_DWFixed">
 </A>
<H1 CLASS="refHeading">
DWFixed</H1>
<PRE CLASS="syntax">typedef struct {
word WWF_frac;
dword WWF_int;
} DWFixed;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_dword">
 </A>
<H1 CLASS="refHeading">
dword</H1>
<PRE CLASS="syntax">typedef unsigned long dword;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_DWordFlags">
 </A>
<H1 CLASS="refHeading">
DWordFlags</H1>
<PRE CLASS="syntax">typedef dword DWordFlags;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayHeader">
 </A>
<A NAME="IX_EAH_&ldots;">
 </A>
<H1 CLASS="refHeading">
ElementArrayHeader</H1>
<PRE CLASS="syntax">typedef struct {
ChunkArrayHeader			EAH_meta;			/* chunk array header structure */
word			EAH_freePtr;			/* First free element */
} ElementArrayHeader;</PRE>
<P>
Every element array must begin with an <CODE>
ElementArrayHeader</CODE>
. Since element arrays are special kinds of chunk arrays, the <CODE>
ElementArrayHeader</CODE>
 must itself begin with a <CODE>
ChunkArrayHeader</CODE>
. The structure contains one additional field, EAH<CODE>
_freePtr</CODE>
. This is used to keep track of the freed elements in the element array. Applications should not examine or change this field.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DiskFindResult ...</A> 
<!-- to next --> | <A HREF="S_10.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">EndOfSongFlags ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
