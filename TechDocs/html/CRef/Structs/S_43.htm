<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_43.htm,v 1.1 97/06/06 11:17:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: VisRulerType ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_42.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VChar ...</A> 
<!-- to next --> | <A HREF="S_44.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMOpenType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_VisRulerType">
 </A>
<A NAME="IX_VRT_&ldots;">
 </A>
<H1 CLASS="refHeading">
VisRulerType</H1>
<PRE CLASS="syntax">typedef ByteEnum VisRulerType;
#define VRT_INCHES				0
#define VRT_CENTIMETERS				1
#define VRT_POINTS				2
#define VRT_PICAS				3
#define VRT_CUSTOM				CUSTOM_RULER_DEFINITION
#define VRT_NONE				NO_RULERS
#define VRT_DEFAULT				SYSTEM_DEFAULT</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VisTextVariableType">
 </A>
<H1 CLASS="refHeading">
VisTextVariableType</H1>
<PRE CLASS="syntax">typedef enum {
 VTVT_PAGE_NUMBER,
 VTVT_PAGE_NUMBER_IN_SECTION,
 VTVT_NUMBER_OF_PAGES,
 VTVT_NUMBER_OF_PAGES_IN_SECTION,
 VTVT_SECTION_NUMBER,
 VTVT_NUMBER_OF_SECTIONS,
 VTVT_CREATION_DATE_TIME,
 VTVT_MODIFICATION_DATE_TIME,
 VTVT_CURRENT_DATE_TIME,
 VTVT_STORED_DATE_TIME,
} VisTextVariableType;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VisTravelOption">
 </A>
<A NAME="IX_VisTravelOption">
 </A>
<A NAME="IX_VisTravelOption">
 </A>
<H1 CLASS="refHeading">
VisTravelOption</H1>
<P>
The <CODE>
VisClass</CODE>
 defines an enumerated value to be used in the place of a standard <CODE>
TravelOption</CODE>
. See the entry for <CODE>
TravelOption</CODE>
 to see all possible values.</P>
</DIV>
<DIV>
<A NAME="IX_VisUpdateMode">
 </A>
<A NAME="IX_VUM_&ldots;">
 </A>
<H1 CLASS="refHeading">
VisUpdateMode</H1>
<PRE CLASS="syntax">typedef ByteEnum VisUpdateMode;
#define VUM_MANUAL 							0
#define VUM_NOW 							1
#define VUM_DELAYED_VIA_UI_QUEUE 							2
#define VUM_DELAYED_VIA_APP_QUEUE							3</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMAccessFlags">
 </A>
<A NAME="IX_VMAF_&ldots;">
 </A>
<H1 CLASS="refHeading">
VMAccessFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags VMAccessFlags;
#define VMAF_FORCE_READ_ONLY										0x80
#define VMAF_FORCE_READ_WRITE 										0x40
#define VMAF_ALLOW_SHARED_MEMORY 										0x20
#define VMAF_FORCE_DENY_WRITE 										0x10
#define VMAF_DISALLOW_SHARED_MULTIPLE 										0x08
#define VMAF_USE_BLOCK_LEVEL_SYNCHRONIZATION 										0x04</PRE>
<P>
The <CODE>
VMAccessFlags</CODE>
 specify what kind of access to the file the caller wants. The following flags are available:</P>
<DL>
<DT>
VMAF_FORCE_READ_ONLY</DT><DD>
If set, the file will be opened read-only, even if the default would be to open the file read/write. Blocks in read-only files cannot be dirtied, and changes in memory blocks will not be updated to the disk VM blocks.</DD>
<DT>
VMAF_FORCE_READ_WRITE</DT><DD>
If set, the file will be opened for read/write access, even if the default would be to open the file for read-only access.</DD>
<DT>
VMAF_SHARED_MEMORY</DT><DD>
If set, the VM manager should try to use shared memory when locking VM blocks; that is, the same memory block will be used for a given VM block no matter which thread locks the block.</DD>
<DT>
VMAF_FORCE_DENY_WRITE</DT><DD>
If set, then open the file deny-write; that is, no other threads will be allowed to open the file for read/write access.</DD>
<DT>
VMAF_DISALLOW_SHARED_MULTIPLE</DT><DD>
If this flag is set, files with the file attribute GFHF_SHARED_MULTIPLE cannot be opened.</DD>
<DT>
VMAF_USE_BLOCK_LEVEL_SYNCHRONIZATION</DT><DD>
If set, the block-level synchronization mechanism of the VM manager is assumed to be sufficient; the more restrictive StartExclusive/EndExclusive mechanism is not used. This is primarily intended for system software.</DD>
</DIV>
<DIV>
<A NAME="IX_VMAttributes">
 </A>
<A NAME="IX_VMA_&ldots;">
 </A>
</DL>
<H1 CLASS="refHeading">
VMAttributes</H1>
<PRE CLASS="syntax">typedef ByteFlags VMAttributes;
#define VMA_SYNC_UPDATE								0x80
#define VMA_BACKUP 								0x40
#define VMA_OBJECT_RELOC 								0x20
#define VMA_PRESERVE_HANDLES 								0x10
#define VMA_NOTIFY_DIRTY 								0x08
#define VMA_NO_DISCARD_IF_IN_USE		 						0x04
#define VMA_COMPACT_OBJ_BLOCK 								0x02
#define VMA_SINGLE_THREAD_ACCESS		 						0x01
/*
 * Attributes that must be set for object blocks: */</PRE>
<PRE CLASS="syntax">#define VMA_OBJECT_ATTRS				(VMA_OBJECT_RELOC | VMA_PRESERVE_HANDLES |
				 VMA_NO_DISCARD_IF_IN_USE |
				 VMA_SINGLE_THREAD_ACCESS)</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMBlockHandle">
 </A>
<H1 CLASS="refHeading">
VMBlockHandle</H1>
<PRE CLASS="syntax">typedef word VMBlockHandle;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMChain">
 </A>
<H1 CLASS="refHeading">
VMChain</H1>
<PRE CLASS="syntax">typedef dword VMChain;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMChainLink">
 </A>
<A NAME="IX_VMC_next">
 </A>
<H1 CLASS="refHeading">
VMChainLink</H1>
<PRE CLASS="syntax">typedef struct {
VMBlockHandle			VMC_next;
} VMChainLink;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMChainTree">
 </A>
<A NAME="IX_VMCT_&ldots;">
 </A>
<H1 CLASS="refHeading">
VMChainTree</H1>
<PRE CLASS="syntax">typedef struct {
VMChainLink		VMCT_meta;
word		VMCT_offset;
word		VMCT_count;
} VMChainTree;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMFileHandle">
 </A>
<H1 CLASS="refHeading">
VMFileHandle</H1>
<PRE CLASS="syntax">typedef Handle VMFileHandle;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_VMInfoStruct">
 </A>
<H1 CLASS="refHeading">
VMInfoStruct</H1>
<PRE CLASS="syntax">typedef struct {
MemHandle		mh;
word		size;
word		userId;
} VMInfoStruct;</PRE>
<P>
&nbsp;</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_42.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VChar ...</A> 
<!-- to next --> | <A HREF="S_44.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMOpenType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
