<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_9.htm,v 1.1 97/06/06 11:18:01 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: ColorFlag ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Color ...</A> 
<!-- to next --> | <A HREF="S_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CompSizeHintArgs ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_CF_&ldots;  (ColorFlag type)">
 </A>
<A NAME="IX_ColorFlag">
 </A>
<H1 CLASS="refHeading">
ColorFlag</H1>
<PRE CLASS="syntax">typedef ByteEnum ColorFlag;
#define CF_INDEX			0
#define CF_GRAY			1
#define CF_SAME			2
#define CF_RGB			0x80</PRE>
<P>
Several color-related commands accept colors in a variety of formats. The <CODE>
ColorFlag</CODE>
 enumerated type is used to specify how the color is being described. The <CODE>
ColorFlag</CODE>
 is normally used as part of a <CODE>
ColorQuad</CODE>
. See <CODE>
ColorQuad</CODE>
 for information about how to interpret color specifications using <CODE>
ColorFlag</CODE>
s.</P>
</DIV>
<DIV>
<A NAME="IX_ColorMapMode">
 </A>
<A NAME="IX_CMM_&ldots;">
 </A>
<A NAME="IX_LAST_MAP_MODE">
 </A>
<H1 CLASS="refHeading">
ColorMapMode</H1>
<PRE CLASS="syntax">typedef ByteFlags ColorMapMode;
#define CMM_ON_BLACK 0x04				/* Set this bit if you're drawing on black */
#define CMM_MAP_TYPE 0x01				/* Either CMT_CLOSEST or CMT_DITHER) */
#define LAST_MAP_MODE				(CMM_MAP_TYPE | CMM_ON_BLACK)</PRE>
<P>
This structure defines how the system will try to simulate colors not in the palette. If the map type is CMT_CLOSEST, the closest available color will be used. If the map type is CMT_DITHER, the system will mix together two or more close colors in a dithered pattern. If you will be drawing against a black background, you may wish to set the CMM_ON_BLACK flag.</P>
</DIV>
<DIV>
<A NAME="IX_ColorQuad">
 </A>
<A NAME="IX_CQ_&ldots;">
 </A>
<H1 CLASS="refHeading">
ColorQuad</H1>
<PRE CLASS="syntax">typedef struct {
byte 		CQ_redOrIndex;
ColorFlag	 	CQ_info;
byte 		CQ_green;
byte 		CQ_blue;
} ColorQuad;</PRE>
<P>
This structure represents a color. The <CODE>
CQ_info</CODE>
 field determines how the color is being described. </P>
<P>
If the info field is CF_INDEX, then the color is being specified by its index, its place in the window's palette. The index is in the <CODE>
CQ_redOrIndex</CODE>
 field; the the <CODE>
CQ_green</CODE>
 and <CODE>
CQ_blue</CODE>
 fields are meaningless for this specification.</P>
<P>
If the info field is CF_RGB, then the color is specified by RGB (red, green, and blue) components. <CODE>
CQ_redOrIndex</CODE>
 contains the color's red component, a number ranging from 0 to 255. The <CODE>
CQ_green</CODE>
 and <CODE>
CQ_blue</CODE>
 fields contain the color's green and blue components, respectively.</P>
<P>
If the info field is CF_GRAY, then the color is being expressed as a grey scale. This is basically an optimized way of describing RGB colors where the red, green, and blue components are equal. The <CODE>
CQ_redOrIndex</CODE>
 field contains the brightess, a number between 0 and 255. The <CODE>
CQ_green</CODE>
 and <CODE>
CQ_blue</CODE>
 fields are ignored.</P>
<P>
When defining hatch patterns, it is possible have a CF_SAME info field. This means that the hatch lines should use the &quot;same&quot; color when drawing. That is, when hatching text, the text color will be used; when filling an area, the area color will be used. The <CODE>
CQ_redOrIndex</CODE>
, <CODE>
CQ_green</CODE>
, and <CODE>
CQ_blue</CODE>
 fields are all ignored.</P>
</DIV>
<DIV>
<A NAME="IX_ColorQuadAsDWord">
 </A>
<H1 CLASS="refHeading">
ColorQuadAsDWord</H1>
<PRE CLASS="syntax">typedef dword ColorQuadAsDWord;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ColorTransfer">
 </A>
<A NAME="IX_CT_data[]">
 </A>
<H1 CLASS="refHeading">
ColorTransfer</H1>
<PRE CLASS="syntax">typedef struct {
RGBDelta				CT_data[125]; 
} ColorTransfer;</PRE>
<P>
This structure consists of a 5x5x5 matrix of <CODE>
RGBDelta</CODE>
 structures. This and be used to specify what sorts of adjustments to make to the color when displaying to a specific device. For instance, some color printers will wipe out certain colors if they try to use the amounts of ink suggested by the raw RGB values. The <CODE>
ColorTransfer</CODE>
 structure thus serves to hold an array of &quot;fudge factors&quot; to tell the printer to use more or less ink than the raw RGB values would suggest.</P>
</DIV>
<DIV>
<A NAME="IX_ColorTransferData">
 </A>
<A NAME="IX_CTD_&ldots;">
 </A>
<H1 CLASS="refHeading">
ColorTransferData</H1>
<PRE CLASS="syntax">typedef union {
MonoTransfer		CTD_mono;
RGBTransfer		CTD_rgb;
CMYKTransfer		CTD_cmyk;
} ColorTransferData;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ColorTransferType">
 </A>
<A NAME="IX_CTT_&ldots;">
 </A>
<H1 CLASS="refHeading">
ColorTransferType</H1>
<PRE CLASS="syntax">typedef ByteEnum ColorTransferType;
#define CTT_MONO				 0
#define CTT_RGB 				 1
#define CTT_CMYK 				 2</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_CommonParameters">
 </A>
<A NAME="IX_CP_&ldots;">
 </A>
<H1 CLASS="refHeading">
CommonParameters</H1>
<PRE CLASS="syntax">typedef struct {
word	CP_row;
word	CP_column;
word	CP_maxRow;
word	CP_maxColumn;
void	* CP_callback;
void	* CP_cellParams; /* ptr to an instance of SpreadsheetClass */
} CommonParameters;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_CompChildFlags">
 </A>
<A NAME="IX_CCF_&ldots;">
 </A>
<A NAME="IX_CCO_&ldots;">
 </A>
<H1 CLASS="refHeading">
CompChildFlags</H1>
<PRE CLASS="syntax">typedef WordFlags CompChildFlags;
#define CCF_MARK_DIRTY				0x8000
#define CCF_REFERENCE				0x7fff
#define 		CCO_FIRST			0x0000
#define		CCO_LAST			0x7FFF
#define CCF_REFERENCE_OFFSET 0</PRE>
<P>
A record used when adding, moving, or removing children in an object tree. The record has one flag and a value, as follows:</P>
<DL>
<DT>
CCF_MARK_DIRTY</DT><DD>
A flag indicating whether the object should be marked dirty at the end of the operation.</DD>
<DT>
CCF_REFERENCE</DT><DD>
A child number; when adding or moving a child, this is the child number after which the new object should be inserted. It can be any number less than 32768, or it can be either of the two constants shown above (CCO_FIRST or CCO_LAST).</DD>
</DIV>
</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Color ...</A> 
<!-- to next --> | <A HREF="S_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CompSizeHintArgs ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
