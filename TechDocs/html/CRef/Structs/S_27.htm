<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_27.htm,v 1.4 97/08/21 13:47:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: LocalNumericFormat ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_26.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LMemType ...</A> 
<!-- to next --> | <A HREF="S_28.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MediumUnitType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LocalNumericFormat">
 </A>
<A NAME="IX_numberFormatFlags (LocalNumericFormat structure field)">
 </A>
<A NAME="IX_decimalDigits (LocalNumericFormat structure field)">
 </A>
<A NAME="IX_thousandsSeparator (LocalNumericFormat structure field)">
 </A>
<A NAME="IX_decimalSeperator (LocalNumericFormat structure field)">
 </A>
<A NAME="IX_listSeparator (LocalNumericFormat structure field)">
 </A>
<H1 CLASS="refHeading">
LocalNumericFormat</H1>
<PRE CLASS="syntax">typedef struct {
byte	numberFormatFlags;
byte	decimalDigits;
word	thousandsSeparator;
word	decimalSeparator;
word	listSeparator;
} LocalNumericFormat;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_endDouble (LocalQuotes structure field)">
 </A>
<A NAME="IX_LocalQuotes">
 </A>
<A NAME="IX_frontSingle (LocalQuotes structure field)">
 </A>
<A NAME="IX_endSingle (LocalQuotes structure field)">
 </A>
<A NAME="IX_frontDouble (LocalQuotes structure field)">
 </A>
<H1 CLASS="refHeading">
LocalQuotes</H1>
<PRE CLASS="syntax">typedef struct {
word	frontSingle;
word	endSingle;
word	frontDouble;
word	endDouble;
} LocalQuotes;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ManufacturerFromFormatID() macro">
 </A>
<H1 CLASS="refHeading">
ManufacturerFromFormatID</H1>
<PRE CLASS="syntax">ManufacturerID ManufacturerFromFormatID(type);
        ClipboardItemFormatID			type;</PRE>
<P>
This macro extracts the manufacturer ID from the given clipboard format ID and manufacturer value.</P>
</DIV>
<DIV>
<A NAME="IX_ManufacturerID">
 </A>
<A NAME="IX_MANUFACTURER_ID_&ldots;">
 </A>
<H1 CLASS="refHeading">
ManufacturerID</H1>
<PRE CLASS="syntax">typedef word ManufacturerID
#define MANUFACTURER_ID_GEOWORKS									 0
#define MANUFACTURER_ID_APP_LOCAL									 1
#define MANUFACTURER_ID_DOS_LAUNCHER									 5
#define MANUFACTURER_ID_SDK									 8
#define MANUFACTURER_ID_GENERIC									10</PRE>
<P>
While <CODE>geode.h</CODE> defines many other <CODE>ManufacturerID</CODE>s for specific developers, the only one of these which is useful to know about when developing for the Nokia 9000i communicator is <CODE>MANUFACTURER_ID_NOKIA</CODE>.</P>
<P>
Each company should have its own manufacturer ID which is unique to the company and ensures that its applications' GeodeTokens do not conflict with those of other manufacturers. If you don't have a manufacturer ID but think you should, <A HREF = "mailto:orders@geoworks.com">contact</A> Geoworks Developer Support. </P>
</DIV>
<DIV>
<A NAME="IX_MapColorToMono">
 </A>
<A NAME="IX_CMT_&ldots;  (MapColorToMono types)">
 </A>
<H1 CLASS="refHeading">
MapColorToMono</H1>
<PRE CLASS="syntax">typedef ByteEnum MapColorToMono;
#define CMT_CLOSEST				0
#define CMT_DITHER 				1</PRE>
<P>
This type determines what the graphics system will do when trying to draw in an unavailable color. It will either draw in the closest color, or else mix two or more close colors to get as close as possible overall.</P>
</DIV>
<DIV>
<A NAME="IX_MapListBlockHeader">
 </A>
<A NAME="IX_MLBH_&ldots;">
 </A>
<H1 CLASS="refHeading">
MapListBlockHeader</H1>
<PRE CLASS="syntax">typedef struct {
LMemBlockHeader				MLBH_base;
word				MLBH_numDestFields;
word				MLBH_chunk1;
} MapListBlockHeader;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_leftMargin (MarginDimensions structure field)">
 </A>
<A NAME="IX_topMargin (MarginDimensions structure field)">
 </A>
<A NAME="IX_rightMargin (MarginDimensions structure field)">
 </A>
<A NAME="IX_bottomMargin (MarginDimensions structure field)">
 </A>
<H1 CLASS="refHeading">
MarginDimensions</H1>
<PRE CLASS="syntax">typedef struct {
int	leftMargin;
int	topMargin;
int	rightMargin;
int	bottomMargin;
} MarginDimensions;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_MAX_FIELD_NAME_LENGTH">
 </A>
<H1 CLASS="refHeading">
MAX_FIELD_NAME_LENGTH</H1>
<PRE CLASS="syntax">#define MAX_FIELD_NAME_LENGTH					40</PRE>
<P>
Maximum size of a field name in a datastore. See <CODE>
<A HREF="../../CRef/Routines/R_f.htm#IX_DataStoreAddField()">DataStoreAddField()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_MeasurementType">
 </A>
<A NAME="IX_MEASURE_&ldots;">
 </A>
<H1 CLASS="refHeading">
MeasurementType</H1>
<PRE CLASS="syntax">typedef ByteEnum MeasurementType;
#define MEASURE_US				0
#define MEASURE_METRIC				1</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_MediaType">
 </A>
<A NAME="IX_MEDIA_&ldots;">
 </A>
<H1 CLASS="refHeading">
MediaType</H1>
<PRE CLASS="syntax">typedef enum /* byte */ {
#define MEDIA_NONEXISTENT				0
#define MEDIA_160K 				1
#define MEDIA_180K 				2
#define MEDIA_320K 				3
#define MEDIA_360K 				4
#define MEDIA_720K 				5
#define MEDIA_1M2 				6
#define MEDIA_1M44 				7
#define MEDIA_2M88 				8
#define MEDIA_FIXED_DISK 				9
#define MEDIA_CUSTOM 				10
} MediaType;</PRE>
<P>
The <CODE>
MediaType</CODE>
 enumerated type indicates how a disk is formatted. A member of this enumerated type is returned by some disk-information routines (e.g. <CODE>
<A HREF="../../CRef/Routines/R_1d.htm#IX_DriveGetDefaultMedia()">DriveGetDefaultMedia()</A></CODE>
). A <CODE>
MediaType</CODE>
 value is also passed to <CODE>
<A HREF="../../CRef/Routines/R_1a.htm#IX_DiskFormat()">DiskFormat()</A></CODE>
, indicating how the disk should be formatted.</P>
</DIV>
<DIV>
<A NAME="IX_MediumAndUnit">
 </A>
<H1 CLASS="refHeading">
MediumAndUnit</H1>
<PRE CLASS="syntax">typedef struct {
            MediumType 		MU_medium;
            MediumUnitType 		MU_unitType;
            word 		MU_unit;
} MediumAndUnit;</PRE>
<P>
This structure represents an instance of some communication medium-generally this corresponds to some hardware port or peripheral device.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
medium.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_26.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LMemType ...</A> 
<!-- to next --> | <A HREF="S_28.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MediumUnitType ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
