<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_12.htm,v 1.1 97/06/02 12:42:29 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: FALSE ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">EvalErrorData ...</A> 
<!-- to next --> | <A HREF="S_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileAttrs ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FALSE">
 </A>
<H1 CLASS="refHeading">
FALSE</H1>
<PRE CLASS="syntax">#define FALSE		 0
#define TRUE		(~0)	/* use as return value, not for comparisons */</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_FileAccess">
 </A>
<H1 CLASS="refHeading">
FieldCategory</H1>
<PRE CLASS="syntax">typedef ByteEnum FieldType
#define FC_NONE				0x0
#define FC_NAME				0x1
#define FC_DATE				0x2
#define FC_TELEPHONE				0x3
#define FC_ADDRESS				0x4
#define FC_EMAIL				0x5</PRE>
<P>
When you add a field to a datatstore, you define its <CODE>
FieldCategory</CODE>
. <CODE>
FieldCategory</CODE>
 is the type of information the data represents (not to be confused with <CODE>
FieldType</CODE>
; see below).</P>
</DIV>
<DIV>
<A NAME="IX_FieldData">
 </A>
<H1 CLASS="refHeading">
FieldData</H1>
<PRE CLASS="syntax">typedef struct {
FieldType			FD_type;
FieldCategory			FD_category;
FieldFlags			FD_flags;
} FieldData;</PRE>
<P>
Structure used to get and set field information (see <CODE>
FieldDescriptor</CODE>
 below).</P>
</DIV>
<DIV>
<A NAME="IX_FieldDescriptor">
 </A>
<H1 CLASS="refHeading">
FieldDescriptor</H1>
<PRE CLASS="syntax">typedef struct {
FieldData			FD_data;
TCHAR			*FD_name;
} FieldDescriptor;</PRE>
<P>
Structure used to get and set field information (see <CODE>
FieldData</CODE>
 above).</P>
</DIV>
<DIV>
<A NAME="IX_FieldHeader">
 </A>
<H1 CLASS="refHeading">
FieldHeader</H1>
<PRE CLASS="syntax">typedef struct {
FieldID		FH_id;
word		FH_size;
} FieldHeader;</PRE>
<P>
Structure containing metadata about a variable-sized field (such as a string field); field data follows this header.</P>
</DIV>
<DIV>
<A NAME="IX_FieldHeaderFixed">
 </A>
<H1 CLASS="refHeading">
FieldHeaderFixed</H1>
<PRE CLASS="syntax">typedef struct {
FieldID		FHF_id;
} FieldHeaderFixed;</PRE>
<P>
Structure containing metadata about a fixed-sized field; field data follows this header.</P>
</DIV>
<DIV>
<A NAME="IX_FileAccess">
 </A>
<A NAME="IX_FA_&ldots;  (FileAccess type)">
 </A>
<H1 CLASS="refHeading">
FieldType</H1>
<PRE CLASS="syntax">typedef ByteEnum FieldType
#define DSFT_FLOAT				0x0
#define DSFT_SHORT				0x1
#define DSFT_LONG				0x2
#define DSFT_TIMESTAMP				0x3
#define DSFT_DATE				0x4
#define DSFT_TIME				0x5
#define DSFT_STRING				0x6
#define DSFT_BINARY				0x7
#define DSFT_GRAPHICS				0x8
#define DSFT_INK				0x9</PRE>
<P>
When you add a field to a datatstore, you define its <CODE>
FieldType</CODE>
. <CODE>
FieldType</CODE>
 is the type of data the field contains (not to be confused with <CODE>
FieldCategory</CODE>
; see above). Note that fields of type DSFT_FLOAT expect data of type <CODE>
FloatNum</CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_FileAccess">
 </A>
<A NAME="IX_FA_&ldots;  (FileAccess type)">
 </A>
<H1 CLASS="refHeading">
FileAccess</H1>
<PRE CLASS="syntax">typedef ByteEnum FileAccess
#define FA_READ_ONLY				0
#define FA_WRITE_ONLY				1
#define FA_READ_WRITE				2</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_FileAccessFlags">
 </A>
<A NAME="IX_FILE_&ldots;">
 </A>
<H1 CLASS="refHeading">
FileAccessFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags FileAccessFlags;
#define FILE_DENY_RW 0x10
#define FILE_DENY_W 0x20
#define FILE_DENY_R 0x30
#define FILE_DENY_NONE 0x40
#define FILE_ACCESS_R 0x00
#define FILE_ACCESS_W 0x01
#define FILE_ACCESS_RW 0x02
#define FILE_NO_ERRORS 0x80</PRE>
<P>
When you open a file for bytewise access, you must pass a record of <CODE>
FileAccessFlags</CODE>
. The <CODE>
FileAccessFlags</CODE>
 record specifies two things: what kind of access the caller wants, and what type of access is permitted to other geodes. A set of <CODE>
FileAccessFlags</CODE>
 is thus a bit-wise &quot;or&quot; of two different values. The first specifies what kind of access the calling geode wants and has the following values:</P>
<DL>
<DT>
FILE_ACCESS_R</DT><DD>
The geode will only be reading from the file.</DD>
<DT>
FILE_ACCESS_W</DT><DD>
The geode will write to the file but will not read from it.</DD>
<DT>
FILE_ACCESS_RW</DT><DD>
The geode will read from and write to the file.</DD>
</DL>
<P>
The second part specifies what kind of access other geodes may have. Note that if you try to deny a permission which has already been given to another geode (e.g. you open a file with FILE_DENY_W when another geode has the file open for write-access), the call will fail. It has the following values:</P>
<DL>
<DT>
FILE_DENY_RW</DT><DD>
No geode may open the file for any kind of access, whether read, write, or read/write.</DD>
<DT>
FILE_DENY_R</DT><DD>
No geode may open the file for read or read/write access.</DD>
<DT>
FILE_DENY_W</DT><DD>
No geode may open the file for write or read/write access.</DD>
<DT>
FILE_DENY_NONE</DT><DD>
Other geodes may open the file for any kind of access.</DD>
</DL>
<P>
Two flags, one from each of these sets of values, are combined to make up a proper<CODE>
 </CODE>
<CODE>
FileAccessFlags</CODE>
<CODE>
 </CODE>
value. For example, to open the file for read-only access while prohibiting other geodes from writing to the file, you would pass the flags &quot;(FILE_ACCESS_R | FILE_DENY_W)&quot;.</P>
</DIV>
<DIV>
<A NAME="IX_FileAccessRights">
 </A>
<A NAME="IX_FILE_RIGHTS_SIZE">
 </A>
<H1 CLASS="refHeading">
FileAccessRights</H1>
<PRE CLASS="syntax">typedef char FileAccessRights[FILE_RIGHTS_SIZE];</PRE>
<P>
&nbsp;</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">EvalErrorData ...</A> 
<!-- to next --> | <A HREF="S_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileAttrs ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
