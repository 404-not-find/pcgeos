<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_37.htm,v 1.1 97/06/02 12:45:26 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: SoundPlayFlags ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_36.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketLoadType ...</A> 
<!-- to next --> | <A HREF="S_38.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpecWidth ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SoundPlayFlags">
 </A>
<A NAME="IX_SPF_HIGH_PRIORITY">
 </A>
<H1 CLASS="refHeading">
SoundPlayFlags</H1>
<PRE CLASS="syntax">typedef WordFlags SoundPlayFlags;
#define SPF_HIGH_PRIORITY				0x8000</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_SoundPriority">
 </A>
<A NAME="IX_SP_&ldots;  (SoundPriority type)">
 </A>
<H1 CLASS="refHeading">
SoundPriority</H1>
<PRE CLASS="syntax">typedef enum {
 SP_SYSTEM_LEVEL=10, 				/* most urgent */
 SP_ALARM=20,
 SP_STANDARD=30,
 SP_GAME=40,
 SP_BACKGROUND=50 				/* least urgent */
} SoundPriority;
&nbsp;
#define SP_IMMEDIATE 			-1
#define SP_THEME 			+1</PRE>
<P>
If the user's sound device can't play all requested sounds, it will use <CODE>
SoundPriority</CODE>
 values to determine which sounds are the most important.</P>
<P>
The highest priority sound you may construct using these values is (SP_SYSTME_LEVEL + SP_IMMEDIATE). The least priority sound would be (SP_BACKGROUND + SP_THEME).</P>
</DIV>
<DIV>
<A NAME="IX_SoundStreamDeltaTimeType">
 </A>
<A NAME="IX_SSDTT_&ldots;">
 </A>
<A NAME="IX_Delta&ldots; () macros">
 </A>
<H1 CLASS="refHeading">
SoundStreamDeltaTimeType</H1>
<PRE CLASS="syntax">typedef enum {
 SSDTT_MSEC=8, 				/* wait for N mili seconds */
 SSDTT_TICKS=10, 				/* wait for N ticks */
 SSDTT_TEMPO=12, 				/* wait for N beats */
} SoundStreamDeltaTimeType;
/* The following macros may help when constructing music buffers */
#define DeltaTick(time)  				SSDTT_TICKS, time
#define DeltaMS(time)  				SSDTT_MSEC, time
#define DeltaTempo(time) 				SSDTT_TEMPO, time
&nbsp;</PRE>
<P>
These are the units by which you can specify a sound's duration: milliseconds, timer &quot;ticks&quot; (each 1/60 second), or by means of an independently supplied tempo.</P>
</DIV>
<DIV>
<A NAME="IX_SoundStreamEvents">
 </A>
<A NAME="IX_SSE_&ldots;">
 </A>
<H1 CLASS="refHeading">
SoundStreamEvents</H1>
<PRE CLASS="syntax">typedef enum {
 SSE_VOICE_ON=0, 				/* turn on voice event */
 SSE_VOICE_OFF=2, 				/* turn off voice event */
 SSE_CHANGE=4, 				/* change instrument */
 SSE_GENERAL=6 				/* system-specific event */
} SoundStreamEvents;
/* The following macros may help when constructing music buffers */
#define General(command)  SSE_GENERAL, command
&nbsp;
#define Rest(duration)  General(GE_NO_EVENT), DeltaTick(duration)
&nbsp;
#define VoiceOn(voice,freq,attack)  SSE_VOICE_ON, voice, freq, attack
#define VoiceOff(voice) SSE_VOICE_OFF, voice
#define ChangeEnvelope(voice, instrument, table)  \
					SSE_CHANGE, voice, instrument, table</PRE>
<PRE CLASS="syntax">&nbsp;
#define SoundNote(voice,freq,duration,attack)  \
	VoiceOn(voice, freq, attack), DeltaTempo(duration), VoiceOff(voice)</PRE>
<PRE CLASS="syntax">#define Staccato(voice,freq,duration,attack) \
 	VoiceOn(voice, freq, attack), DeltaTempo(((duration*0x03)/0x04)), \
 	VoiceOff(voice), DeltaTempo((duration/0x4))</PRE>
<PRE CLASS="syntax">#define Natural(voice,freq,duration,attack) \
	VoiceOn(voice, freq, attack), DeltaTempo(((duration*0x07)/0x08)),
	VoiceOff(voice), DeltaTempo((duration/0x8))</PRE>
<PRE CLASS="syntax">#define Legato(voice,freq,duration,attack)  \
	SoundNote(voice, freq, duration, attack)</PRE>
<P>
These are the &quot;events&quot; that make up a music buffer. </P>
</DIV>
<DIV>
<A NAME="IX_SoundStreamSize">
 </A>
<A NAME="IX_SSS_&ldots;  (SoundStreamSize type)">
 </A>
<H1 CLASS="refHeading">
SoundStreamSize</H1>
<PRE CLASS="syntax">typedef word SoundStreamSize;
#define SSS_ONE_SHOT 128 /* 128 bytes (very small) */
#define SSS_SMALL 256 /* 256 bytes */
#define SSS_MEDIUM 512 /* 512 bytes (nice size) */
#define SSS_LARGE 1024 </PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_SpecHeight">
 </A>
<A NAME="IX_SH_&ldots;  (SpecHeight flags)">
 </A>
<H1 CLASS="refHeading">
SpecHeight</H1>
<PRE CLASS="syntax">typedef WordFlags SpecHeight;
#define SH_TYPE				0x8c00
#define SH_DATA				0x03ff</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_SpecSizeSpec">
 </A>
<A NAME="IX_SSS_&ldots;  (SpecSizeSpec flags)">
 </A>
<H1 CLASS="refHeading">
SpecSizeSpec</H1>
<PRE CLASS="syntax">typedef WordFlags SpecSizeSpec;
#define SSS_TYPE				0x8c00
#define SSS_DATA				0x03ff</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_SST_&ldots;  (SpecSizeType type)">
 </A>
<A NAME="IX_PCT_&ldots;  (SpecSizeType Percent constants)">
 </A>
<H1 CLASS="refHeading">
SpecSizeType</H1>
<PRE CLASS="syntax">typedef ByteEnum SpecSizeType;
#define SST_PIXELS						0x0000
#define SST_COUNT						0x0400
#define SST_PCT_OF_FIELD_WIDTH						0x0800
#define SST_PCT_OF_FIELD_HEIGHT						0x0c00
#define SST_AVG_CHAR_WIDTHS						0x1000
#define SST_WIDE_CHAR_WIDTHS						0x1400
#define SST_LINES_OF_TEXT						0x1800

</PRE>
</DIV>
<DIV>
<A NAME="IX_SpecSocketDrError">
 </A>
<H1 CLASS="refHeading">
SpecSocketDrError</H1>
<PRE CLASS="syntax">typedef enum /*word*/ {
        SSDE_DEVICE_BUSY = 0x0100,      						/* serial port or modem 
							   driver in use */</PRE>
<PRE CLASS="syntax">        SSDE_DIAL_ERROR = 0x0200,
        SSDE_LINE_BUSY = 0x0300,        /* modem got a busy signal */
        SSDE_NO_DIALTONE = 0x0400,
        SSDE_NO_ANSWER = 0x0500,
        SSDE_NO_CARRIER = 0x0600,
        SSDE_BLACKLISTED = 0x0700,      /* used in GSM network */
        SSDE_DELAYED = 0x0800,          /* used in GSM network */
        SSDE_CALL_FAILED = 0x0900, 						/* couldn't dial for some reason */
        SSDE_NEG_FAILED = 0x0a00,
        SSDE_AUTH_REFUSED = 0x0b00,
        SSDE_AUTH_FAILED = 0x0c00,
        SSDE_LQM_FAILURE = 0x0d00,
        SSDE_LOOPED_BACK = 0x0e00,
        SSDE_IDLE_TIMEOUT = 0x0f00,
        SSDE_DEVICE_NOT_FOUND = 0x1000,
        SSDE_DEVICE_TIMEOUT = 0x1100,
        SSDE_DEVICE_ERROR = 0x1200,
        SSDE_NO_USERNAME = 0x1300, 						/* no username and password
							   prompting used */</PRE>
<PRE CLASS="syntax">        SSDE_CANCEL = 0x1400,           /* user cancelled */
        SSDE_INVALID_ACCPNT = 0x1500    /* invalid access point */
} SpecSocketDrError;</PRE>
<P>
Certain Socket library operations may return an error value as a <CODE>
SocketError</CODE>
 value. If the root cause of the error was a low-level communications failure, then the high byte of the returned error word may contain a <CODE>
SpecSocketDrError</CODE>
 value, with the <CODE>
SocketError</CODE>
 value in the low byte.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_36.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketLoadType ...</A> 
<!-- to next --> | <A HREF="S_38.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpecWidth ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
