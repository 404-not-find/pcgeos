<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_14.htm,v 1.3 97/08/13 16:19:37 cgroom Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: FileDate ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_13.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileAttrs ...</A> 
<!-- to next --> | <A HREF="S_15.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileFromTransferBlockID ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>


<DIV>
<A NAME="IX_FileDate">
 </A>
<H1 CLASS="refHeading">
FileDate</H1>
<PRE CLASS="syntax">typedef WordFlags FileDate;
#define FD_YEAR                 0xfe00
#define FD_MONTH                0x01e0
#define FD_DAY                  0x001f
#define FD_YEAR_OFFSET          9
#define FD_MONTH_OFFSET         5
#define FD_DAY_OFFSET           0</PRE>
<P>
A file's date stamp is stored in a 16-bit bitfield. This field contains entries for the year, month, and day.
Each field is identified by a mask and an offset. To access a field, simply clear all bits except those in the mask, then shift the bits to the right by the number of the offset. (Macros are provided to do this; they are described below.) <CODE>FileDate</CODE> contains the
following fields, identified by their masks:
</P>

<DL>
<DT>
<STRONG>
FD_YEAR </STRONG>
</DT><DD>This field records the year counting from the base year of 1980. It is offset by <CODE>FD_YEAR_OFFSET</CODE> bits.</DD>
<DT>
<STRONG>
FD_MONTH </STRONG>
</DT><DD>This field records the months as integers, with January as 1. It is offset by <CODE>FD_MONTH_OFFSET</CODE> bits.</DD>
<DT>
<STRONG>
FD_DAY </STRONG>
</DT><DD> This field records the day of the month. It is offset by
 <CODE>FD_DAY_OFFSET</CODE> bits.</DD>
</DL>

<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
file.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG>        <A HREF = "S_15.htm#IX_FileTime">FileTime</A>
 </P>
</DIV>






<DIV>
<A NAME="IX_FileDateAndTime">
 </A>
<A NAME="IX_FDAT_&ldots;">
 </A>
<A NAME="IX_FDATExtract&ldots; () macros">
 </A>
<H1 CLASS="refHeading">
FileDateAndTime</H1>
<PRE CLASS="syntax">typedef DWordFlags FileDateAndTime;
#define FDAT_HOUR						0xf8000000
#define FDAT_MINUTE						0x07e00000
#define FDAT_2SECOND						0x001f0000
#define FDAT_YEAR 						0x0000fe00
#define FDAT_MONTH 						0x000001e0
#define FDAT_DAY 						0x0000001f
#define FDAT_HOUR_OFFSET					27
#define FDAT_MINUTE_OFFSET					21
#define FDAT_2SECOND_OFFSET					16
#define FDAT_YEAR_OFFSET 					9
#define FDAT_MONTH_OFFSET 					5
#define FDAT_DAY_OFFSET 					0
#define FDAT_BASE_YEAR 					1980</PRE>
<P>
Every GEOS file has two date and time stamps. One of them records the time the file was created, and one records the time the file was last modified. These stamps are recorded with the file's extended attributes; they are labeled FEA_CREATION and FEA_MODIFICATION, respectively. Non-GEOS files have a single date/time stamp, which records the time the file was last modified.</P>
<P>
The date/time stamps are stored in a 32-bit bitfield. This field contains entries for the year, month, day, hour, minute, and second. Each field is identified by a mask and an offset. To access a field, simply clear all bits except those in the mask, then shift the bits to the right by the number of the offset. (Macros are provided to do this; they are described below.) <CODE>
FileDateAndTime</CODE>
 contains the following fields, identified by their masks:</P>
<DL>
<DT>
FDAT_YEAR</DT><DD>This field records the year, counting from a base year of 1980. (The constant FDAT_BASE_YEAR is defined as 1980.) This field is at an offset of FDAT_YEAR_OFFSET bits from the low end of the value.</DD>
<DT>
FDAT_MONTH</DT><DD>
This field records the month as an integer, with January being one. It is located at an offset of FDAT_MONTH_OFFSET.</DD>
<DT>
FDAT_DAY</DT><DD>This field records the day of the month. It is located at an offset of FDAT_DAY_OFFSET.</DD>
<DT>
FDAT_HOUR</DT><DD>This field records the hour on a 24-hour clock, with zero being the hour after midnight. It is located at an offset of FDAT_HOUR_OFFSET.</DD>
<DT>
FDAT_MINUTE</DT><DD>
This field records the minute. It is located at an offset of FDAT_MINUTE_OFFSET.</DD>
<DT>
FDAT_2SECOND</DT><DD>
This field records the second, divided by two; that is, a field value of 15 indicates the 30th second. (It is represented this way to let the second fit into 5 bits, thus letting the entire value fit into 32 bits.) It is located at an offset of FDAT_2SECOND_OFFSET.</DD>
</DL>
<P>
Macros are provided to extract values from each of the fields of a <CODE>
FileDateAndTime</CODE>
 structure. The macros are listed below:</P>
<PRE CLASS="syntax">byte FDATExtractYear( /* returns year field, counted from 1980*/
        FileDateAndTime fdat);
word FDATExtractYearAD( /* returns year field + base year */
        FileDateAndTime fdat);
byte FDATExtractMonth( /* returns month field (1 = January, etc.) */
        FileDateAndTime fdat);
byte FDATExtractDay( /* returns day field */
        FileDateAndTime fdat);
byte FDATExtractHour( /* returns hour field */
        FileDateAndTime fdat);
byte FDATExtractMinute( /* returns minute field */
        FileDateAndTime fdat);
byte FDATExtract2Second( /* returns 2Second field */
        FileDateAndTime fdat);
byte FDATExtractSecond( /* returns number of seconds (2 * 2Second) */
        FileDateAndTime fdat);</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileDesktopInfo">
 </A>
<A NAME="IX_FILE_DESKTOP_INFO_SIZE">
 </A>
<H1 CLASS="refHeading">
FileDesktopInfo</H1>
<PRE CLASS="syntax">typedef char FileDesktopInfo[FILE_DESKTOP_INFO_SIZE];
&nbsp;</PRE>
</DIV>
<DIV>
<A NAME="IX_FileDirID">
 </A>
<H1 CLASS="refHeading">
FileDirID</H1>
<PRE CLASS="syntax">typedef dword FileDirID;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_FileFileID">
 </A>
<H1 CLASS="refHeading">
FileFileID</H1>
<PRE CLASS="syntax">typedef dword FileFileID;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_FileExclude">
 </A>
<A NAME="IX_FE_&ldots;  (FileExclude)">
 </A>
<H1 CLASS="refHeading">
FileExclude</H1>
<PRE CLASS="syntax">typedef ByteEnum FileExclude;
#define FE_EXCLUSIVE				1
#define FE_DENY_WRITE 				2
#define FE_DENY_READ 				3
#define FE_NONE 				4</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_FileExtAttrDesc">
 </A>
<A NAME="IX_FEAD_&ldots;">
 </A>
<H1 CLASS="refHeading">
FileExtAttrDesc</H1>
<PRE CLASS="syntax">typedef struct {
FileExtendedAttribute				FEAD_attr;			/* Attribute to get or set */
void			*FEAD_value;				/* Pointer to buffer/new value */
word			FEAD_size;				/* length of buffer/new value */
chr			*FEAD_name;				/* If FEAD_attr == FEA_CUSTOM,
							 * this points to null-
							 * terminated ASCII string with
							 * attribute's name; otherwise,
							 * this is ignored. */</PRE>
<PRE CLASS="syntax">} FileExtendedAttrDesc;</PRE>
<P>
The routines to get and set extended attributes can be passed the attribute FEA_MULTIPLE. In this case, they will also be passed the address of an array of <CODE>
FileExtAttrDesc</CODE>
 structures and the number of elements of the array. They will go through the array and read or write the appropriate information.</P>
<P>
<CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 can also be passed arrays of <CODE>
FileExtAttrDesc</CODE>
 structures. In this case, the number of elements in the array is not passed. Instead, each array ends with a <CODE>
FileExtAttrDesc</CODE>
 with a FEAD<CODE>
_attr</CODE>
 field set to FEA_END_OF_LIST.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_14.htm#IX_FileExtendedAttribute">FileExtendedAttribute</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileExtendedAttribute">
 </A>
<A NAME="IX_FEA_&ldots;">
 </A>
<H1 CLASS="refHeading">
FileExtendedAttribute</H1>
<PRE CLASS="syntax">typedef enum /* word */ {
FEA_MODIFICATION,
FEA_FILE_ATTR,
FEA_SIZE,
FEA_FILE_TYPE,
FEA_FLAGS,
FEA_RELEASE,
FEA_PROTOCOL,
FEA_TOKEN,
FEA_CREATOR,
FEA_USER_NOTES,
FEA_NOTICE,
FEA_CREATION,
FEA_PASSWORD,
FEA_CUSTOM,
FEA_NAME,
FEA_GEODE_ATTR,
FEA_PATH_INFO,
FEA_FILE_ID,
FEA_DESKTOP_INFO,
FEA_DRIVE_STATUS,
FEA_DOS_NAME,
FEA_OWNER,
FEA_RIGHTS,
FEA_MULTIPLE = 0xfffe,
FEA_END_OF_LIST = 0xffff,
} FileExtendedAttribute;</PRE>
<P>
Every GEOS file has a set of extended attributes. These attributes can be recovered with <CODE>
<A HREF="../../CRef/Routines/R_29.htm#IX_FileGetPathExtAttributes()">FileGetPathExtAttributes()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_29.htm#IX_FileGetHandleExtAttributes()">FileGetHandleExtAttributes()</A></CODE>
. You can also use <CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 to search a directory for files with specified extended attributes.</P>
<P>
The above extended attributes have been implemented. More may be added with future releases of GEOS. The attributes are discussed at length in <A HREF="../../Files/FileSys/FileSys_d.htm#49785">the File System chapter</A>.</P><P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_14.htm#IX_FileExtAttrDesc">FileExtAttrDesc</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_13.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileAttrs ...</A> 
<!-- to next --> | <A HREF="S_15.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileFromTransferBlockID ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>

