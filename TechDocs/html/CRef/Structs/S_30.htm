<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_30.htm,v 1.1 97/06/02 12:44:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: RangeSortFlags ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ProtocolNumber ...</A> 
<!-- to next --> | <A HREF="S_31.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ReleaseNumber ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_RangeSortFlags">
 </A>
<A NAME="IX_RSF_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeSortFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags RangeSortFlags;
#define RSF_SORT_ROWS						0x80
#define RSF_SORT_ASCENDING						0x40
#define RSF_IGNORE_CASE						0x20</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_RangeSortParams">
 </A>
<A NAME="IX_RSP_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeSortParams</H1>
<PRE CLASS="syntax">typedef struct {
Rectangle		RSP_range;
Point		RSP_active;
dword		RSP_callback;
byte		RSP_flags; /* RangeSortFlags */
dword		RSP_cfp;
word		RSP_sourceChunk;
word		RSP_destChunk;
word		RSP_base;
dword		RSP_lockedEntry;
byte		RSP_cachedFlags;
} RangeSortParams;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_RecordHeader">
 </A>
<H1 CLASS="refHeading">
RecordHeader</H1>
<PRE CLASS="syntax">typedef struct {
RecordID		RH_id;
word		RH_size;
byte		RH_fieldCount;
} RecordHeader;</PRE>
<P>
Structure containing metadata about a record; first <CODE>
FieldHeader</CODE>
 follows.</P>
</DIV>
<DIV>
<A NAME="IX_RecordID">
 </A>
<H1 CLASS="refHeading">
RecordID</H1>
<PRE CLASS="syntax">typedef dword RecordID;</PRE>
<P>
Uniquely identifies a record in a datastore; this value stays constant and does not change when other records are added or deleted.</P>
</DIV>
<DIV>
<A NAME="IX_RecordNum">
 </A>
<H1 CLASS="refHeading">
RecordNum</H1>
<PRE CLASS="syntax">typedef dword RecordNum;</PRE>
<P>
Specifies relative place in the datastore; this value may change when other records are added or deleted.</P>
</DIV>
<DIV>
<A NAME="IX_Rectangle">
 </A>
<A NAME="IX_R_&ldots;">
 </A>
<H1 CLASS="refHeading">
Rectangle</H1>
<PRE CLASS="syntax">typedef struct {
sword	R_left;
sword	R_top;
sword	R_right;
sword	R_bottom;
} Rectangle;</PRE>
<P>
This structure represents a graphics rectangle.</P>
</DIV>
<DIV>
<A NAME="IX_RectDWord">
 </A>
<A NAME="IX_RD_&ldots;">
 </A>
<H1 CLASS="refHeading">
RectDWord</H1>
<PRE CLASS="syntax">typedef struct {
sdword	RD_left;
sdword	RD_top;
sdword	RD_right;
sdword	RD_bottom;
} RectDWord;</PRE>
<P>
This structure represents a graphics rectangle.</P>
</DIV>
<DIV>
<A NAME="IX_RectRegion">
 </A>
<A NAME="IX_RR_&ldots;">
 </A>
<H1 CLASS="refHeading">
RectRegion</H1>
<PRE CLASS="syntax">typedef struct {
word 	RR_y1M1;
word 	RR_eo1;	/* EOREGREC */
word 	RR_y2;
word 	RR_x1;
word 	RR_x2;
word 	RR_eo2;		/* EOREGREC */
word 	RR_eo3;		/* EOREGREC */
} RectRegion;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_RefElementHeader">
 </A>
<A NAME="IX_REH_refCount">
 </A>
<H1 CLASS="refHeading">
RefElementHeader</H1>
<PRE CLASS="syntax">typedef struct {
 WordAndAHalf REH_refCount;
} RefElementHeader;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_Region">
 </A>
<A NAME="IX_EOREGREC">
 </A>
<A NAME="IX_EOREG_HIGH">
 </A>
<H1 CLASS="refHeading">
Region</H1>
<PRE CLASS="syntax">typedef word Region;
#define EOREGREC				0x8000
#define EOREG_HIGH				 0x80</PRE>
<P>
This structure represents a region of a graphics coordinate space.</P>
<P>
Regions are described in terms of a rectangular array (thus the similarity to bitmaps). Instead of specifying an on/off value for each pixel, however, regions assume that the region will be fairly undetailed and that the data structure can thus be treated in the manner of a sparse array. Only the cells in which the color value of a row changes are recorded. The tricky part here is keeping in mind that when figuring out whether or not a row is the same as a previous row, the system works its way up from the bottom, so that you should compare each row with the row beneath it to determine whether it needs an entry.</P>
<P>
The easiest region to describe is the null region, which is a special case described by a single word with the value EOREGREC (a constant whose name stands for <EM>
E</EM>
nd Of <EM>
REG</EM>
ion <EM>
REC</EM>
ord value). Describing a non-null region requires several numbers.</P>
<P>
The first four numbers of the region description give the bounds of the region. Next come one or more series of numbers. Each series describes a row, specifying which pixels of that row are part of the region. The only rows which need to be described are those which are different from the row below. The first number of each row description is the row number, its <EM>
y</EM>
 coordinate. The last number of each series is a special token, EOREGREC, which lets the kernel know that the next number of the description will be the start of another row. Between the row number and EOREGREC are the column numbers where the pixels toggle on and off. The first number after the row number corresponds to the first column in which the pixel is on; the next number is the first subsequent column in which the pixel is off; and so on.</P>
</DIV>
<DIV>
<A NAME="IX_RegionFillRule">
 </A>
<A NAME="IX_ODD_EVEN (RegionFillRule type)">
 </A>
<A NAME="IX_WINDING (RegionFillRule type)">
 </A>
<H1 CLASS="refHeading">
RegionFillRule</H1>
<PRE CLASS="syntax">typedef ByteEnum RegionFillRule;
#define ODD_EVEN				0
#define WINDING				1</PRE>
<P>
This enumerated type determines how a path or region should be filled. Winding fill is more versatile, but requires that the path or polygon's edges run in the correct direction.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ProtocolNumber ...</A> 
<!-- to next --> | <A HREF="S_31.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ReleaseNumber ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
