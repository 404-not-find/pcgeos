<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_26.htm,v 1.2 97/06/25 18:53:36 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: LMemType ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_25.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Language ...</A> 
<!-- to next --> | <A HREF="S_27.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalNumericFormat ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LMemType">
 </A>
<A NAME="IX_LMEM_TYPE_&ldots;">
 </A>
<H1 CLASS="refHeading">
LMemType</H1>
<PRE CLASS="syntax">typdef enum {
LMEM_TYPE_GENERAL,
LMEM_TYPE_WINDOW,
LMEM_TYPE_OBJ_BLOCK,
LMEM_TYPE_GSTATE,
LMEM_TYPE_FONT_BLK,
LMEM_TYPE_GSTRING,
LMEM_TYPE_DB_ITEMS
} LMemType;</PRE>
<P>
LMem heaps are created for many different purposes. Some of these purposes require the heap to have special functionality. For this reason, when you create an LMem heap, you must specify what it will be used for. The following types are available:</P>
<DL>
<DT>
LMEM_TYPE_GENERAL</DT><DD>
The LMem heap will be used for general data storage, possibly including a chunk, name, or element array. When an application creates an LMem heap, it will almost always be of type &quot;General&quot; or &quot;Object.&quot;</DD>
<DT>
LMEM_TYPE_OBJ_BLOCK</DT><DD>
Objects are stored in object blocks, which are LMem heaps. An object block has some extra header information and contains one chunk which contains only flags. All the objects in the block are stored as chunks on the heap. Applications can directly create object blocks.</DD>
<DT>
LMEM_TYPE_WINDOW</DT><DD>
Windows are stored in memory as LMem heaps. The header contains information about the window; each region in the window is stored as a chunk. Applications will not directly create Window heaps.</DD>
<DT>
LMEM_TYPE_GSTATE</DT><DD>
A GState is an LMem heap. The GState information is in the header, and the application clip-rectangle is stored in a chunk. Applications do not directly create GState blocks; rather, they call a GState creation routine, which creates the block.</DD>
<DT>
LMEM_TYPE_FONT_BLOCK</DT><DD>
Font blocks are stored as LMem heaps. Applications do not create font blocks directly.</DD>
<DT>
LMEM_TYPE_GSTRING</DT><DD>
Whenever a GString is created or loaded, a GString LMem heap is created, and elements are added as chunks. The heap is created automatically by the GString routines; applications should not create GString blocks.</DD>
<DT>
LMEM_TYPE_DB_ITEMS</DT><DD>
The Virtual Memory mechanism provides routines to create and manage database items, short pieces of data which are dynamically allocated and are saved with the VM file. Applications do not directly allocate DB blocks; rather, they call DB routines, which see to it that the blocks are created. </DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDistanceFlags">
 </A>
<A NAME="IX_LDF_&ldots;">
 </A>
<H1 CLASS="refHeading">
LocalDistanceFlags</H1>
<PRE CLASS="syntax">typedef WordFlags LocalDistanceFlags;
#define LDF_FULL_NAMES							0x8000
#define LDF_PRINT_PLURAL_IF_NEEDED							0x4000</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LocalCmpStringsDosToGeosFlags">
 </A>
<H1 CLASS="refHeading">
LocalCmpStringsDosToGeosFlags</H1>
<P>
See <CODE>
<A HREF="../../CRef/Routines/R_66.htm#IX_LocalCmpStringsDosToGeos()">LocalCmpStringsDosToGeos()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_currencyFormatFlags (LocalCurrencyFormat structure field)">
 </A>
<A NAME="IX_currencyDigits (LocalCurrencyFormat structure format)">
 </A>
<A NAME="IX_thousandsSeperator (LocalCurrencyFormat structure field)">
 </A>
<A NAME="IX_decimalSeperator (LocalCurrencyFormat structure field)">
 </A>
<A NAME="IX_LocalCurrencyFormat">
 </A>
<A NAME="IX_listSeperator (LocalCurrencyFormat structure field)">
 </A>
<H1 CLASS="refHeading">
LocalCurrencyFormat</H1>
<PRE CLASS="syntax">typedef struct {
byte	currencyFormatFlags;
byte	currencyDigits;
word	thousandsSeparator;
word	decimalSeparator;
word	listSeparator;
} LocalCurrencyFormat;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_LocalMemoryFlags">
 </A>
<A NAME="IX_LMF_&ldots;">
 </A>
<A NAME="IX_STD_LMEM_OBJECT_FLAGS">
 </A>
<H1 CLASS="refHeading">
LocalMemoryFlags</H1>
<PRE CLASS="syntax">typedef WordFlags LocalMemoryFlags;
#define LMF_HAS_FLAGS				0x8000
#define LMF_IN_RESOURCE 				0x4000
#define LMF_DETACHABLE 				0x2000
#define LMF_DUPLICATED 				0x1000
#define LMF_RELOCATED 				0x0800
#define LMF_AUTO_FREE 				0x0400
#define LMF_IN_LMEM_ALLOC 				0x0200
#define LMF_IS_VM				0x0100
#define LMF_NO_HANDLES 				0x0080
#define LMF_NO_ENLARGE 				0x0040
#define LMF_RETURN_ERRORS 				0x0020
#define LMF_DEATH_COUNT 				0x0007
#define STD_LMEM_OBJECT_FLAGS						(LMF_HAS_FLAGS | LMF_RELOCATED)</PRE>
<P>
When an LMem heap is allocated, certain flags are passed to indicate properties the heap should have. Some of the flags are passed only for system-created heaps. The flags are stored in a word-length record (<CODE>
LocalMemoryFlags</CODE>
); the record also contains flags indicating the current state of the heap. The <CODE>
LocalMemoryFlags</CODE>
 are listed below:</P>
<DL>
<DT>
LMF_HAS_FLAGS</DT><DD>
Set if the block has a chunk containing only flags. This flag is set for object blocks; it is usually cleared for general LMem heaps.</DD>
<DT>
LMF_IN_RESOURCE</DT><DD>
Set if the block has just been loaded from a resource and has not been changed since being loaded. This flag is set only for object blocks created by the compiler.</DD>
<DT>
LMF_DETACHABLE</DT><DD>
Set if the block is an object block which can be saved to a state file.</DD>
<DT>
LMF_DUPLICATED</DT><DD>
Set if block is an object block created by the <CODE>
<A HREF="../../CRef/Routines/R_78.htm#IX_ObjDuplicateResource()">ObjDuplicateResource()</A></CODE>
 routine. This flag should not be set by applications.</DD>
<DT>
LMF_RELOCATED</DT><DD>
Set if all the objects in the block have been relocated. The object system sets this when it has relocated all the objects in the block. </DD>
<DT>
LMF_AUTO_FREE</DT><DD>
This flag is used by several object routines. It indicates that if the block's in-use count drops to zero, the block may be freed. This flag should not be set by applications.</DD>
<DT>
LMF_IN_MEM_ALLOC</DT><DD>
This flag is used in error-checking code to prevent the heap from being validated while a chunk is being allocated. For internal use only--do not modify<EM>
.</EM>
</DD>
<DT>
LMF_IS_VM</DT><DD>
Set if the LMem heap is in a VM block and the block should be marked dirty whenever a chunk is marked dirty. This flag is automatically set by the VM code when an LMem heap is created in or attached to a VM file. This flag should not be set by applications.</DD>
<DT>
LMF_NO_HANDLES</DT><DD>
Set if block does not use chunk handles. A block can be set to simulate the C <CODE>
malloc() </CODE>
routine; in this case, chunks are not relocated after being created, so chunk handles are not needed. Ordinarily, these blocks are created by the <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 routine, not by applications.</DD>
<DT>
LMF_NO_ENLARGE</DT><DD>
Indicates that the local-memory routines should not enlarge this block to fulfill chunk requests. This guarantees that the block will not be moved by a chunk allocation request; however, it makes these requests more likely to fail.</DD>
<DT>
LMF_RETURN_ERRORS</DT><DD>
Set if local memory routines should return errors when allocation requests cannot be fulfilled. If the flag is not set, allocation routines will fatal-error if they cannot comply with requests. This flag is generally clear for expandable LMem blocks, since many system routines (such as <CODE>
<A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInstantiate()">ObjInstantiate()</A></CODE>
) are optimized in such a way that they cannot deal with LMem allocation errors.</DD>
<DT>
LMF_DEATH_COUNT</DT><DD>
This field occupies the least significant three bits of the flag field. It means nothing if the value is zero. If it is non-zero, it indicates the number of remove-block messages left which must hit <CODE>
BlockDeathCommon</CODE>
 before it will free the block. This flag is used by error-checking code in the kernel.</DD>
<DT>
STD_LMEM_OBJ_FLAGS</DT><DD>
This is a constant which combines the LMF_HAS_FLAGS and LMF_RELOCATED flags. These flags should be set for all object blocks.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_25.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Language ...</A> 
<!-- to next --> | <A HREF="S_27.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalNumericFormat ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
