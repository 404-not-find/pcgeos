<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: S_2.htm,v 1.2 97/06/25 18:52:27 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Structs: AppLaunchFlags ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">AccessPointStandardProperty ...</A> 
<!-- to next --> | <A HREF="S_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">BitmapMode ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_AppLaunchFlags">
 </A>
<A NAME="IX_ALF_&ldots;">
 </A>
<H1 CLASS="refHeading">
AppLaunchFlags</H1>
<PRE CLASS="syntax">typedef ByteFlags AppLaunchFlags;
#define ALF_SEND_LAUNCH_REQUEST_TO_UI_TO_HANDLE											0x80
#define ALF_OPEN_IN_BACK											0x40</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ApplicationStates">
 </A>
<A NAME="IX_AS_&ldots;">
 </A>
<H1 CLASS="refHeading">
ApplicationStates</H1>
<PRE CLASS="syntax">typedef ByteFlags ApplicationStates;
#define AS_QUITTING								0x80
#define AS_DETACHING								0x40
#define AS_FOCUSABLE 								0x20
#define AS_MODELABLE 								0x10
#define AS_NOT_USER_INTERACTABLE 								0x08
#define AS_RECEIVED_APP_OBJECT_DETACH 								0x04
#define AS_ATTACHED_TO_STATE_FILE 								0x02
#define AS_ATTACHING 								0x01</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ArcCloseType">
 </A>
<A NAME="IX_ACT_&ldots;">
 </A>
<H1 CLASS="refHeading">
ArcCloseType</H1>
<PRE CLASS="syntax">typedef enum /* word */ {
ACT_OPEN,
ACT_CHORD,
ACT_PIE
} ArcCloseType;</PRE>
<P>
This structure is used when filling arcs.</P>
</DIV>
<DIV>
<A NAME="IX_AreaAttr">
 </A>
<A NAME="IX_AA_&ldots;">
 </A>
<H1 CLASS="refHeading">
AreaAttr</H1>
<PRE CLASS="syntax">typedef struct {
byte 		AA_colorFlag;
RGBValue 		AA_color;
SysDrawMask 		AA_mask;
ColorMapMode		AA_mapMode;
} AreaAttr;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_ArgumentStackElement">
 </A>
<A NAME="IX_ASE_&ldots;">
 </A>
<H1 CLASS="refHeading">
ArgumentStackElement</H1>
<PRE CLASS="syntax">typedef struct {
EvalStackArgumentType ASE_type;
EvalStackArgumentData ASE_data;
} ArgumentStackElement;</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_BBFixed">
 </A>
<A NAME="IX_BBF_&ldots;">
 </A>
<H1 CLASS="refHeading">
BBFixed</H1>
<PRE CLASS="syntax">typedef struct {
byte BBF_frac;
byte BBF_int;
} BBFixed;</PRE>
<P>
This structure represents an 8.8 fixed point number.</P>
</DIV>
<DIV>
<A NAME="IX_BBFixedAsWord">
 </A>
<H1 CLASS="refHeading">
BBFixedAsWord</H1>
<PRE CLASS="syntax">typedef word BBFixedAsWord;</PRE>
<P>
This structure represents an 8.8 fixed point number.</P>
</DIV>
<DIV>
<A NAME="IX_Bitmap">
 </A>
<A NAME="IX_B_&ldots;">
 </A>
<A NAME="IX_BMT_MASK:bitmaps with masks">
 </A>
<A NAME="IX_BMC_PACKBITS:uncompressing">
 </A>
<A NAME="IX_PackBits compression">
 </A>
<H1 CLASS="refHeading">
<A NAME="72157">
 </A>
Bitmap</H1>
<PRE CLASS="syntax">typedef struct {
word	B_width;				/* In bitmap pixels */
word	B_height;				/* In bitmap pixels */
byte	B_compact;				/* A BMCompact value */
byte	B_type;				/* A BMFormat | BMType value */
} Bitmap;</PRE>
<P>
This data structure provides some information about a simple graphics bitmap. It normally acts as the header for a set of bitmap data.</P>
<P>
The bitmap data itself is organized into scan lines. If the bitmap has a mask (if the BMT_MASK bit is set in the <CODE>
B_type</CODE>
 field), the first information for the scan line will be its mask information. There will be one bit of mask information for each pixel in the scan line (i.e. a number of bits equal to the bitmap width). The actual bitmap data for the scan line starts at the next byte boundary. For each pixel there will be a number of bits of color data, said number depending on the <CODE>
BMFormat</CODE>
 value in the <CODE>
B_type</CODE>
 field. The data for the next scan line will begin at the next byte boundary.</P>
<P>
Thus, a 7x7 bitmap depicting an inverse &quot;x&quot; might appear:</P>
<PRE>(Bitmap)		{7, 7, BMC_UNCOMPACTED, BMF_MONO };
(byte)[]		{0x82, 		/* 10000010 */
		 0x44, 		/* 01000100 */
		 0x28, 		/* 00101000 */
		 0x10, 		/* 00010000 */
		 0x28, 		/* 00101000 */
		 0x44, 		/* 01000100 */
		 0x82 }; 		/* 10000010 */</PRE>
<P>
A 3x3 color &quot;-&quot; shape with a a &quot;+&quot; shaped mask might appear:</P>
<PRE>(Bitmap)		{ 3, 3, BMC_UNCOMPACTED, 
		 (BMF_4BIT | BMT_MASK)};
(byte) []		{/* scan line 1: */
		 0x40, 		/* mask: 010 */
		 0, 0		/* data: 000 */

		 /* scan line 2: */
		 0xE0, 		/* mask: 111 */
		 0x43, 0x20, 		/* data: 432 */ 

		 /* scan line 3: */
		 0x40, 		/* mask: 010 */
		 0, 0 };		/* data: 000 */</PRE>
<P>
If standard BMC_PACKBITS compression is used, then the mask (if any) and color data for the bitmap is compressed using the Macintosh PackBits standard. Under this system, to uncompress the data for a scan line, follow the loop:</P>
<OL>
<LI>
Read a byte. </LI>
<LI FIXME_NumListOther>
If the byte read in step (1) is between -1 and -127, read the <EM>
next</EM>
 byte and copy it into the target buffer from +2 to +128 times. </LI>
<LI FIXME_NumListOther>
If the byte read in step (1) is between +1 and +127, read the next 1 to 127 bytes and copy them into the target buffer.</LI>
<LI FIXME_NumListOther>
If the byte read in step (1) is -128, ignore it.</LI>
<LI FIXME_NumListOther>
You're ready to read in the next batch of data; go back to step (1).</LI>
</OL>
<P>
Thus a 16x4 color &quot;=&quot; with a matching mask would appear:</P>
<PRE>(Bitmap) 	{15, 3, BMC_PACKBITS, BMF_4BIT | BMT_MASK } ;
(byte) []		{/* scan line 1: */
			/* mask: 2 repetitions of 0xff */
		 0xff, 0xff, 
			/* data: 16 repetitions of 0x14 */
		 0xf0, 0x14, 
		/* scan line 2: */
			/* mask: 2 repetitions of 0x00 */
			/* data: 16 repetitions of 0x00 */
			/* total: 18 repetitions of 0x00 */
		 0xee, 0x00, 
		/* scan line 3: */
			/* mask: 2 repetitions of 0x00 */
			/* data: 16 repetitions of 0x00 */
			/* total: 18 repetitions of 0x00 */
		 0xee, 0x00, 
		/* scan line 4: */</PRE>
<PRE>			/* mask: 2 repetitions of 0xff */</PRE>
<PRE>		 0xff, 0xff, </PRE>
<PRE>			/* data: 16 repetitions of 0x14 */</PRE>
<PRE>		 0xf0, 0x14};</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_3.htm#IX_CBitmap">CBitmap</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="S_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">AccessPointStandardProperty ...</A> 
<!-- to next --> | <A HREF="S_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">BitmapMode ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
