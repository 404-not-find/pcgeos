<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_a6.htm,v 1.2 97/06/25 18:47:45 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: WinGeodeSetInputObj() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">WinAckUpdate() ...</A> 
<!-- to next --> | <A HREF="R_a7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">WinScroll() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_WinGeodeSetInputObj()">
 </A>
<H1 CLASS="refHeading">
WinGeodeSetInputObj()</H1>
<PRE CLASS="syntax">void	WinGeodeSetInputObj(
        GeodeHandle		gh,
        optr		iObj);</PRE>
<P>
This routine sets the input object for the specified geode.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGeodeSetParentObj()">
 </A>
<H1 CLASS="refHeading">
WinGeodeSetParentObj()</H1>
<PRE CLASS="syntax">void	WinGeodeSetParentObj(
        GeodeHandle		gh,
        optr		pObj);</PRE>
<P>
This routine sets the parent object for the specified geode.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGeodeSetPtrImage()">
 </A>
<H1 CLASS="refHeading">
WinGeodeSetPtrImage()</H1>
<PRE CLASS="syntax">void	WinGeodeSetPtrImage(
        GeodeHandle		gh,
        optr		ptrCh);</PRE>
<P>
This routine sets the pointer image for the specified geode.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGetInfo()">
 </A>
<H1 CLASS="refHeading">
WinGetInfo()</H1>
<PRE CLASS="syntax">dword	WinGetInfo(
        WindowHandle		win,
        WinInfoTypes		type,
        void *		data);</PRE>
<P>
This routine retrieves the private data from a GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGetTransform()">
 </A>
<H1 CLASS="refHeading">
WinGetTransform()</H1>
<PRE CLASS="syntax">void	WinGetTransform(
        WindowHandle		win,
        TransMatrix *		tm);</PRE>
<P>
This routine retrieves the transformation matrix for the specified window. It writes the matrix to <CODE>
*tm</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGetWinScreenBounds()">
 </A>
<H1 CLASS="refHeading">
WinGetWinScreenBounds()</H1>
<PRE CLASS="syntax">void	WinGetWinScreenBounds(
        WindowHandle		win,
        Rectangle *		bounds);</PRE>
<P>
This routine returns the bounds of the on-screen portion of a window (specified in screen co-ordinates). It writes the bounds to <EM>
*bounds</EM>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinGrabChange()">
 </A>
<H1 CLASS="refHeading">
WinGrabChange()</H1>
<PRE CLASS="syntax">Boolean	WinGrabChange(
        WindowHandle		win,
        optr		newObj);</PRE>
<P>
This routine allows an object to grab pointer events. It returns zero if it was successful; otherwise it returns non-zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinInvalReg()">
 </A>
<H1 CLASS="refHeading">
WinInvalReg()</H1>
<PRE CLASS="syntax">void	WinInvalReg(
        WindowHandle		win,
        const Region *		reg,
        word		axParam,
        word		bxParam,
        word		cxParam,
        word		dxParam);</PRE>
<P>
This routine invalidates the specified region or rectangle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinMove()">
 </A>
<H1 CLASS="refHeading">
WinMove()</H1>
<PRE CLASS="syntax">void	WinMove(
        WindowHandle		win,
        sword		xMove,
        sword		yMove,
        WinPassFlags		flags);</PRE>
<P>
This routine moves a window. If the WPF_ABS bit of <CODE>
flags</CODE>
 is set, the window's new position is specified relative to its parent's position. If it is clear, the window's new position is specified relative to its current position.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinOpen()">
 </A>
<H1 CLASS="refHeading">
WinOpen()</H1>
<PRE CLASS="syntax">WindowHandle WinOpen(
        Handle		parentWinOrVidDr,
        optr		inputRecipient,
        optr		exposureRecipient,
        WinColorFlags		colorFlags,
        word		redOrIndex,
        word		green,
        word		blue,
        word		flags,
        word		layerID,
        GeodeHandle		owner,
        const Region *		winReg,
        word		axParam,
        word		bxParam,
        word		cxParam,
        word		dxParam);</PRE>
<P>
This routine allocates and initializes a window and (optionally) an associated GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinReleaseChange()">
 </A>
<H1 CLASS="refHeading">
WinReleaseChange()</H1>
<PRE CLASS="syntax">void	WinReleaseChange(
        WindowHandle		win,
        optr		obj);</PRE>
<P>
This routine releases an object's grab on the change OD.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_WinResize()">
 </A>
<H1 CLASS="refHeading">
WinResize()</H1>
<PRE CLASS="syntax">void	WinResize(
        WindowHandle		win,
        const Region *		reg,
        word		axParam,
        word		bxParam,
        word		cxParam,
        WinPassFlags		flags);</PRE>
<P>
This routine resizes a window. It can move it as well.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">WinAckUpdate() ...</A> 
<!-- to next --> | <A HREF="R_a7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">WinScroll() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
