<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_37.htm,v 1.2 97/06/25 18:23:17 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GrApplyTranslation() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_36.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeoFree() ...</A> 
<!-- to next --> | <A HREF="R_38.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrClearBitmap() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GrApplyTranslation()">
 </A>
<H1 CLASS="refHeading">
GrApplyTranslation()</H1>
<PRE CLASS="syntax">void	GrApplyTranslation(
        GStateHandle		gstate,			/* GState to alter */
        WWFixedAsDWord		xTrans,			/* translation in x */
        WWFixedAsDWord		yTrans);			/* translation in y */</PRE>
<P>
Apply a translation to the GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrApplyTranslationDWord()">
 </A>
<H1 CLASS="refHeading">
GrApplyTranslationDWord()</H1>
<PRE CLASS="syntax">void	GrApplyTranslationDWord(
        GStateHandle		gstate,			/* GState to alter */
        sdword		xTrans,			/* extended translation in x */
        sdword		yTrans);			/* extended translation in y */</PRE>
<P>
Apply a 32-bit integer extended translation to the GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrBeginPath()">
 </A>
<H1 CLASS="refHeading">
GrBeginPath()</H1>
<PRE CLASS="syntax">void	GrBeginPath(
        GStateHandle		gstate,			/* GState to alter */
        PathCombineType		params);			/* path parameters */</PRE>
<P>
Starts or alters the path associated with a GState. All graphics operations that are executed until <CODE>
<A HREF="../../CRef/Routines/R_3e.htm#IX_GrEndPath()">GrEndPath()</A></CODE>
 is called become part of the path.</P>
<P>
Depending on the value of the <CODE>
params</CODE>
 field, the new path may replace the old path, or may be combined with the old path by intersection or union.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrBeginUpdate()">
 </A>
<H1 CLASS="refHeading">
GrBeginUpdate()</H1>
<PRE CLASS="syntax">void 	GrBeginUpdate(
        GStateHandle gstate);			/* GState to draw to */</PRE>
<P>
Called by an application to signal that it is about to begin updating the exposed region. This routine is normally called as part of a <CODE>
MSG_META_EXPOSED</CODE>
 handler. Blanks out the invalid area.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
win.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Video drivers:blitting">
 </A>
<A NAME="IX_GrBitBlt()">
 </A>
<A NAME="IX_BLTMode">
 </A>
<A NAME="IX_BLTM_&ldots;">
 </A>
<H1 CLASS="refHeading">
GrBitBlt()</H1>
<PRE CLASS="syntax">void	GrBitBlt(
        GStateHandle		gstate,				/* GState to draw to */
        sword		sourceX,				/* original x origin */
        sword		sourceY,				/* original y origin */
        sword		destX,				/* new x origin */
        sword		destY,				/* new y origin */
        word		width,				/* width of area */
        word		height,				/* height of area */
        BLTMode		mode);				/* draw mode (see below) */</PRE>
<P>
Transfer a bit-boundary block of pixels between two locations in video memory. This routine is useful for animation and other applications which involve moving a drawing around the screen.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        	typedef enum /* word */ {
    BLTM_COPY, 				/* Leave source region alone */
    BLTM_MOVE, 				/* Clear &amp; invalidate source rect */
    BLTM_CLEAR				/* Clear source rectangle */
} BLTMode;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrBrushPolyline()">
 </A>
<H1 CLASS="refHeading">
GrBrushPolyline()</H1>
<PRE CLASS="syntax">void	GrBrushPolyline(
        GStateHandle		gstate,			/* GState to draw to */
        const Point		* points,			/* array of Point structures to draw */
        word		numPoints,			/* number of points in array */
        word		brushH,			/* brush height */
        word		brushW);			/* brush width */</PRE>
<P>
Draw a brushed connected polyline. Note that this routine ignores the GState's line width, and instead uses a brush height and width, measured in pixels.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCharMetrics()">
 </A>
<A NAME="IX_GCM_Info">
 </A>
<A NAME="IX_GCMI_&ldots;">
 </A>
<H1 CLASS="refHeading">
GrCharMetrics()</H1>
<PRE CLASS="syntax">dword	GrCharMetrics(
        GStatehandle		gstate,			/* GState to get metrics for */
        GCM_info		info,			/* information to return */
        word		ch);			/* character of type Chars */</PRE>
<P>
Returns metric information for a single character of a font. This information is used to determine the drawing bounds for a character. To find out how wide a character is (how much space to leave for it if drawing a line of text character-by-character), use <CODE>
<A HREF="../../CRef/Routines/R_37.htm#IX_GrCharWidth()">GrCharWidth()</A></CODE>
 instead.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        	typedef enum {
    GCMI_MIN_X, 						/* return = value &lt;&lt; 16 */
    GCMI_MIN_X_ROUNDED,					 	/* return = value */
    GCMI_MIN_Y, 						/* return = value &lt;&lt; 16 */
    GCMI_MIN_Y_ROUNDED,				 		/* return = value &lt;&lt; 16 */
    GCMI_MAX_X, 						/* return = value &lt;&lt; 16 */
    GCMI_MAX_X_ROUNDED, 						/* return = value &lt;&lt; 16 */
    GCMI_MAX_Y, 						/* return = value &lt;&lt; 16 */
    GCMI_MAX_Y_ROUNDED 						/* return = value &lt;&lt; 16 */
} GCM_Info;</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_37.htm#IX_GrCharWidth()">GrCharWidth()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCharWidth()">
 </A>
<H1 CLASS="refHeading">
GrCharWidth()</H1>
<PRE CLASS="syntax">dword	GrCharWidth( /* Returns width &lt;&lt; 16 */
        GStateHandle		gstate,			/* GState to query */
        word		ch);			/* character of type Chars */</PRE>
<P>
Return the width of a single character. Note that this routine does not take into account track kerning, pairwise kerning, space padding, or other attributes that apply to multiple characters.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCheckFontAvailID()">
 </A>
<H1 CLASS="refHeading">
GrCheckFontAvailID()</H1>
<PRE CLASS="syntax">FontID 	GrCheckFontAvailID(
        FontEnumFlags 		flags,
        word 		family,
        FontID 		id);</PRE>
<P>
See if font (identified by ID) exists.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCheckFontAvailName()">
 </A>
<H1 CLASS="refHeading">
GrCheckFontAvailName()</H1>
<PRE CLASS="syntax">FontID 	GrCheckFontAvailName(
        FontEnumFlags 		flags,
        word 		family,
        const char 		* name);</PRE>
<P>
See if font (identified by name) exists.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_36.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeoFree() ...</A> 
<!-- to next --> | <A HREF="R_38.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrClearBitmap() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
