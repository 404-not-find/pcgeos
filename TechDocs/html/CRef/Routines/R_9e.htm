<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9e.htm,v 1.2 97/06/25 18:46:13 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: UserAllocObjBlock ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenLoadTokenChunk() ...</A> 
<!-- to next --> | <A HREF="R_9f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UserRemoveAutoExec() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_UserAllocObjBlock">
 </A>
<H1 CLASS="refHeading">
UserAllocObjBlock</H1>
<PRE CLASS="syntax">MemHandle 	UserAllocObjBlock(
        ThreadHandle 		threadHandle);</PRE>
<P>
This routine allocates a block of memory on the heap to be used for holding UI objects. It returns the handle of the block. It is passed one argument:</P>
<DL>
<DT>
<EM>threadHandle</EM> </DT><DD>
Handle of the thread which is to manage the block. Pass zero to use the current thread.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ui.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_execOnStartup INI file field:UserAddAutoExec()">
 </A>
<A NAME="IX_UserAddAutoExec()">
 </A>
<H1 CLASS="refHeading">
UserAddAutoExec()</H1>
<PRE CLASS="syntax">void	UserAddAutoExec(
        const char *		appName);</PRE>
<P>
This routine adds an application to the list of those, like Welcome, that are automatically started by the UI when it loads. The application name will be added to the appropriate place in the GEOS.INI file. It is passed one argument:</P>
<DL>
<DT>
<CODE>
appName</CODE>
</DT><DD>This is a pointer to a null-terminated string containing the name of the application. The application must be in SP_APPLICATION or SP_SYS_APPLICATION.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ui.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_UserCreateDialog()">
 </A>
<A NAME="IX_Dialog boxes:UserCreateDialog()">
 </A>
<H1 CLASS="refHeading">
UserCreateDialog()</H1>
<PRE CLASS="syntax">optr	UserCreateDialog(
        optr	dialogBox);</PRE>
<P>
This routine duplicates a template dialog box, attaches the dialog box to an application object, and sets it fully GS_USABLE so that it may be called with <CODE>
<A HREF="../../CRef/Routines/R_9e.htm#IX_UserDoDialog()">UserDoDialog()</A></CODE>
. Dialog boxes created in such a manner should be removed and destroyed with <CODE>
<A HREF="../../CRef/Routines/R_9e.htm#IX_UserDestroyDialog()">UserDestroyDialog()</A></CODE>
 when no longer needed.</P>
<DL>
<DT>
<EM>
dialogBox</EM>
</DT><DD>Optr to template dialog box (within a template object block). The block must be sharable, read-only and the top GenInteraction called with this routine must not be linked into any generic tree. The optr returned is a created, fully-usable dialog box.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9e.htm#IX_UserDestroyDialog()">UserDestroyDialog()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_InkDestinationInfo:UserCreateInkDestinationInfo()">
 </A>
<A NAME="IX_UserCreateInkDestinationInfo()">
 </A>
<A NAME="IX_GestureCallback() prototype">
 </A>
<H1 CLASS="refHeading">
UserCreateInkDestinationInfo()</H1>
<PRE CLASS="syntax">MemHandle 	UserCreateInkDestinationInfo(
        optr 		dest,
        GStateHandle 		gs,
        word		brushSize,
        GestureCallback		*callback);</PRE>
<P>
This routine creates an <CODE>
InkDestinationInfo</CODE>
 structure to be returned with MSG_META_QUERY_IF_PRESS_IS_INK. The callback routine must be declared _pascal.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ui.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef Boolean _pascal GestureCallback (
        	Point *arrayOfInkPoints, 
        	word numPoints, 
        	word numStrokes);</PRE>
</DIV>
<DIV>
<A NAME="IX_UserDestroyDialog()">
 </A>
<H1 CLASS="refHeading">
UserDestroyDialog()</H1>
<PRE CLASS="syntax">void	UserDestroyDialog(
        optr	dialogBox);</PRE>
<P>
This routine destroys the passed dialog box, usually created with <CODE>
<A HREF="../../CRef/Routines/R_9e.htm#IX_UserCreateDialog()">UserCreateDialog()</A></CODE>
. This routine may only be used to destroy dialog boxes occupying a single block; the block must also hold nothing other than the dialog box to be destroyed. It is for this reason that it is wise to only use this routine to destroy dialogs created with <CODE>
<A HREF="../../CRef/Routines/R_9e.htm#IX_UserCreateDialog()">UserCreateDialog()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9e.htm#IX_UserCreateDialog()">UserCreateDialog()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_UserDoDialog()">
 </A>
<A NAME="IX_Dialog boxes:UserDoDialog()">
 </A>
<A NAME="IX_InteractionCommand">
 </A>
<A NAME="IX_IC_&ldots;">
 </A>
<H1 CLASS="refHeading">
UserDoDialog()</H1>
<PRE CLASS="syntax">InteractionCommand UserDoDialog(
        optr	dialogBox);</PRE>
<P>
<CODE>
UserDoDialog()</CODE>
 brings a pre-instantiated dialog box on-screen, blocking the calling thread until the user responds to the dialog. You must pass the optr of a GIV_DIALOG Interaction that is set both GIA_INITIATED_VIA_USER_DO_DIALOG and GIA_MODAL. </P>
<P>
This routine returns the <CODE>
InteractionCommand</CODE>
 of the particular response trigger selected by the user. This <CODE>
InteractionCommand</CODE>
 may be either a predefined type (such as IC_YES) or a custom one defined using IC_CUSTOM_START.</P>
<P>
The pre-defined <CODE>
InteractionCommand</CODE>
s are:</P>
<PRE>IC_NULL
IC_DISMISS
IC_APPLY
IC_RESET
IC_OK
IC_YES
IC_NO
IC_STOP
IC_EXIT
IC_HELP
IC_INTERACTION_COMPLETE</PRE>
<P>
This routine may return IC_NULL for those cases in which a system shutdown causes the dialog to be dismissed before the user has entered a response. </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine blocks the calling thread until the dialog box receives a MSG_GEN_GUP_INTERACTION_COMMAND. Since the application thread is blocked, it cannot be responsible for sending this message or for handling messages from the response triggers. </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9f.htm#IX_UserStandardDialog()">UserStandardDialog()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_9f.htm#IX_UserStandardDialogOptr()">UserStandardDialogOptr()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_UserGetInterfaceLevel()">
 </A>
<A NAME="IX_UIInterfaceLevel">
 </A>
<A NAME="IX_UIIL_&ldots;">
 </A>
<H1 CLASS="refHeading">
UserGetInterfaceLevel()</H1>
<PRE CLASS="syntax">UIInterfaceLevel UserGetInterfaceLevel(void)</PRE>
<P>
This routine returns the current <CODE>
UIInterfaceLevel</CODE>
. This is a word-sized enumerated type. It has the following values:</P>
<PRE>UIIL_NOVICE
UIIL_BEGINNING_INTERMEDIATE
UIIL_ADVANCED_INTERMEDIATE
UIIL_ADVANCED
UIIL_GURU</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ui.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_UserLoadApplication()">
 </A>
<H1 CLASS="refHeading">
UserLoadApplication()</H1>
<PRE CLASS="syntax">extern GeodeHandle UserLoadApplication(
        AppLaunchFlags 		alf,
        Message 		attachMethod,
        MemHandle 		appLaunchBlock,
        char 		*filename,
        StandardPath 		sPath,
        GeodeLoadError 		*err);</PRE>
<P>
Loads an application.  Changes to standard application directory before attempting GeodeLoad on filename passed. Stores the filename being launched into the <CODE>
AppLaunchBlock</CODE>
, so that information needed to restore this application instance will be around later if needed.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenLoadTokenChunk() ...</A> 
<!-- to next --> | <A HREF="R_9f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UserRemoveAutoExec() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
