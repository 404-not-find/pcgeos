<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_14.htm,v 1.2 97/06/25 18:09:01 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DataStoreNewRecord() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_13.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DataStoreGetRecordCount() ...</A> 
<!-- to next --> | <A HREF="R_15.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DataStoreSetField() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DataStoreNewRecord()">
 </A>
<H1 CLASS="refHeading">
DataStoreNewRecord()</H1>
<PRE CLASS="syntax">DataStoreDataError	DataStoreNewRecord(
        word		dsToken);	/* session token to opened datastore */</PRE>
<P>
Creates a new (empty) record and makes it the current record. Returns a <CODE>
DataStoreDataError</CODE>
 value (DSDE_NO_ERROR if successful).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	A new record becomes a permanent part of the datatstore only after it is saved (with <CODE>
<A HREF="../../CRef/Routines/R_14.htm#IX_DataStoreSaveRecord()">DataStoreSaveRecord()</A></CODE>
).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreOpen()">
 </A>
<H1 CLASS="refHeading">
DataStoreOpen()</H1>
<PRE CLASS="syntax">DataStoreError	DataStoreOpen(
        TCHAR		*dsNamePtr,
        optr		notifyObject,
        DataStoreOpenFlags		openFlag,
        word		*dsTokenPtr);</PRE>
<P>
Opens the datastore referenced by <EM>
dsNamePtr</EM>
 and writes the session token to <EM>
dsTokenPtr</EM>
. Passing DSOF_EXCLUSIVE in <EM>
openFlag</EM>
 opens the datastore with access restricted to the caller; if another application already has the datastore open, returns DSE_ACCESS_DENIED. Passing NullOptr in <EM>
notifyObject</EM>
 means no object will receive GWNT_DATASTORE_CHANGE notifications. Returns a <CODE>
DataStoreError</CODE>
 value (DSE_NO_ERROR if successful).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreRecordEnum()">
 </A>
<H1 CLASS="refHeading">
DataStoreRecordEnum()</H1>
<PRE CLASS="syntax">DataStoreError	DataStoreRecordEnum(
        word				dsToken,
        RecordNum				*startRecordPtr,
        DataStoreRecordEnumFlags				flags,
        void				*enumDataPtr,
        Boolean _pascal (*CallbackRoutine) (
        	RecordHeader				record,
        	void				*enumDataPtr));</PRE>
<P>
Enumerates through the records of a datastore in storage order. When <EM>CallbackRoutine</EM> returns TRUE, stops enumeration, updates <EM>
startRecordPtr</EM>
 with the <CODE>
RecordNum</CODE>
 of the last record examined, and returns DSE_NO_ERROR. (To continue enumeration, increment <EM>
startRecordPtr</EM>
.) Returns DSE_NO_MORE_RECORDS if first or last record is reached.</P>
<P>
Takes the following arguments:</P>
<DL>
<DT>
dsToken</DT><DD>Session token to the opened datastore.</DD>
<DT>
<EM>startRecordPtr</DT><DD>
</EM>Pointer to the <CODE>
RecordNum</CODE>
 at which to start enumeration (unless DSREF_START_AT_END is passed [in <EM>flags</EM>] in which case this argument is ignored).</DD>
<DT>
<EM>flags</EM></DT><DD><CODE>
DataStoreRecordEnumFlags</CODE>
 to pass. Passing DSREF_BACKWARDS causes enumeration to go backwards. Passing DSREF_START_AT_END with DSREF_BACKWARDS causes enumeration to go backwards starting at the last record. (Passing DSREF_START_AT_END without DSREF_BACKWARDS causes enumeration to start at the first record, ignoring whatever value is in <EM>startRecordPtr</EM>.)</DD>
<DT>
<EM>enumDataPtr</DT><DD>
</EM>Pointer to data that caller passes to the callback routine.</DD>
<DT>
<EM>CallbackRoutine</DT><DD>
</EM>Boolean subroutine. Caller passes in the <CODE>
RecordHeader</CODE>
 of the current record and <EM>enumDataPtr</EM>. Returning TRUE ends enumeration.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Callback can modify data passed in <EM>enumDataPtr</EM> but cannot modify any actual data in the record.</P>
<P>
Datastore cannot be modified during enumeration.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_11.htm#IX_DataStoreFieldEnum()">DataStoreFieldEnum()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_15.htm#IX_DataStoreStringSearch()">DataStoreStringSearch()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreRemoveFieldFromRecord()">
 </A>
<H1 CLASS="refHeading">
DataStoreRemoveFieldFromRecord()</H1>
<PRE CLASS="syntax">DataStoreDataError	DataStoreRemoveFieldFromRecord(
        word		dsToken,	/* session token to opened datastore */
        TCHAR		*fieldNamePtr,
        FieldID		fieldID);</PRE>
<P>
Deletes the passed field from the current record. Returns a <CODE>
DataStoreError</CODE>
 value (DSE_NO_ERROR if successful).</P>
<P>
If referencing field by name, pass &quot;0&quot; in <EM>
fieldID</EM>
; if referencing field by <CODE>
FieldID</CODE>
, pass NULL in <EM>
fieldNamePtr</EM>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_10.htm#IX_DataStoreDeleteField()">DataStoreDeleteField()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreRename()">
 </A>
<H1 CLASS="refHeading">
DataStoreRename()</H1>
<PRE CLASS="syntax">DataStoreError	DataStoreRename(
        TCHAR		*oldNamePtr,
        TCHAR		*newNamePtr);</PRE>
<P>
Changes the name of a datastore from <EM>
oldNamePtr</EM>
 to <EM>
newNamePtr</EM>
. Returns a <CODE>
DataStoreError</CODE>
 value (DSE_NO_ERROR if successful).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreRenameField()">
 </A>
<H1 CLASS="refHeading">
DataStoreRenameField()</H1>
<PRE CLASS="syntax">DataStoreStructureError	DataStoreRenameField(
        word		dsToken,	/* session token to opened datastore */
        TCHAR		*newNamePtr,
        TCHAR		*oldNamePtr,
        FieldID		fieldID);</PRE>
<P>
Changes the name of a field from <EM>
oldNamePtr</EM>
 to <EM>
newNamePtr</EM>
. Returns a <CODE>
DataStoreStructureError</CODE>
 value (DSSE_NO_ERROR if successful).</P>
<P>
If referencing field by name, pass &quot;0&quot; in <EM>
fieldID</EM>
; if referencing field by <CODE>
FieldID</CODE>
, pass NULL in <EM>
oldNamePtr</EM>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Returns DSSE_FIELD_NAME_TOO_LONG if new name exceeds MAX_FIELD_NAME_LENGTH (<EM>
i.e.</EM>
, 40 * sizeof(TCHAR)).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreSaveRecord()">
 </A>
<H1 CLASS="refHeading">
DataStoreSaveRecord()</H1>
<PRE CLASS="syntax">DataStoreDataError	DataStoreSaveRecord(
        word		dsToken,
        void		*dataPtr,
        sword _pascal (*CallbackRoutine) (
        	RecordHeader		*Rec1Ptr,
        	RecordHeader		*Rec2Ptr,
        	word		dsToken,
        	void		*dataPtr),
        RecordNum		*recordNumPtr,
        RecordID		*recordIDPtr);</PRE>
<P>
Writes the current record to the datastore (saving any changes made to the record) and flushes the record from the buffer. If CallbackRoutine is &quot;0&quot;, inserts saved record to the key (if a key exists) or appends the record to the end of the datastore if no key exists. Writes the <CODE>
RecordNum</CODE>
 and <CODE>
RecordID</CODE>
 of the saved record to <EM>recordNumPtr</EM> and <EM>recordIDPtr</EM>, respectively. Returns a <CODE>
DataStoreDataError</CODE>
 value (DSDE_NO_ERROR if successful). Takes the following arguments:</P>
<DL>
<DT>
<EM>dsToken</DT><DD>
</EM>Session token to the opened datastore.</DD>
<DT>
<EM>dataPtr</EM></DT><DD>
Pointer to data that caller passes to the callback.</DD>
<DT>
<EM>CallbackRoutine</DT><DD>
</EM>Subroutine to determine where to insert saved record. Caller passes <CODE>
RecordHeader</CODE>
s of two records to compare. Caller can also pass extra data with <EM>dataPtr</EM>. The function should return:<BR>
<BR>
-1if <EM>Rec1Ptr</EM> comes before <EM>Rec2Ptr</EM><BR>
0 if <EM>Rec1Ptr</EM> equals <EM>Rec2Ptr</EM><BR>
1 if <EM>Rec1Ptr</EM> comes after <EM>Rec2Ptr</EM></DD>
<DT>
<EM>recordNumPtr</DT><DD>
</EM>Pointer to <CODE>
RecordNum</CODE>
 of saved record.</DD>
<DT>
<EM>recordIDPtr</DT><DD>
</EM>Pointer to <CODE>
RecordID</CODE>
 of saved record.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_11.htm#IX_DataStoreDiscardRecord()">DataStoreDiscardRecord()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DataStoreSetExtraData()">
 </A>
<H1 CLASS="refHeading">
DataStoreSetExtraData()</H1>
<PRE CLASS="syntax">DataStoreError	DataStoreSetExtraData(
        word		dsToken,	/* session token to opened datastore */
        void		*extraDataPtr, /* data to write to file header */
        word		extraDataSize);</PRE>
<P>
Writes <EM>
extraDataSize</EM>
 bytes of extra data to the datastore file header, replacing any existing extra data. Passing &quot;0&quot; in <EM>
extraDataSize</EM>
 deletes any existing extra data. Returns a <CODE>
DataStoreError</CODE>
 value (DSE_NO_ERROR if successful).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
datastor.h</STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_13.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DataStoreGetRecordCount() ...</A> 
<!-- to next --> | <A HREF="R_15.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DataStoreSetField() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
