<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_FoamDBResumeUpdates.htm,v 1.3 97/07/25 15:04:15 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: FoamDBResumeUpdates() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBGetCurrent.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FoamDBGetCurrentRecordID() ...</A> 
<!-- to next --> | <A HREF="R_2f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FormatIDFromManufacturerAndType() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>

<DIV>
<A NAME="IX_FoamDBResumeUpdates()">
 </A>
<H1 CLASS="refHeading">
FoamDBResumeUpdates()</H1>
<PRE CLASS="syntax">void FoamDBResumeUpdates(
	VMFileHandle 	file);</PRE>
<P>
This routine resumes the generation of updates for the database <EM>file</EM>. 
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSaveRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBSaveRecord()</H1>
<PRE CLASS="syntax">dword FoamDBSaveRecord(
	VMFileHandle file, 
	MemHandle record,
	PCB(sword, callback,
		(RecordHeader *record1,  RecordHeader *record2)));    /* Callback routine */
</PRE>
<P>
This routine saves the record <EM>record</EM> in the database file <EM>file</EM>, and frees up the passed memory block containing the record data. The callback routine determines where in the database the record should be stored. The <CODE>Contdb</CODE> library provides a front-end to this routine, <CODE>
<A HREF="../../CRef/Routines/R_f.htm#IX_ContactSaveRecord()">ContactSaveRecord()</A></CODE>, 
which should be used when saving records to a contact database.
<P>

<CODE>
<A HREF="../../CRef/Routines/R_80.htm#IX_PCB()">PCB()</A></CODE>
is a GEOS macro which signifies that one of the parameters for <CODE>
FoamDBSaveRecord()</CODE>
will be a callback routine that will return a <CODE>sword</CODE> and accept two <CODE>RecordHeader</CODE>s. This callback routine should be declared as:
<PRE class = "syntax">
sword _pascal MyCallBackRoutine(RecordHeader *record1, RecordHeader *record2);
</PRE>
<P>
It should return -1 if <EM>record1</EM> should come before <EM>record2</EM>, or +1 if <EM>record1</EM> should come after <EM>record2</EM> in the database.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSetCurrentRecordID()">
 </A>
<H1 CLASS="refHeading">
FoamDBSetCurrentRecordID()</H1>
<PRE CLASS="syntax">void FoamDBSetCurrentRecordID(
	VMFileHandle 	file, 
	RecordID 	id);
</PRE>
<P>
Sets the record ID that will be used for the next created record.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSetFieldData()">
 </A>
<H1 CLASS="refHeading">
FoamDBSetFieldData()</H1>
<PRE CLASS="syntax"> void FoamDBSetFieldData(
        VMFileHandle    file, 
        MemHandle       record, 
        FieldID            id, 
        char            *data,          /* Data to be stored */
        word            dataSize);      /* How many bytes of data */
</PRE>
<P>
Stores <EM>dataSize</EM> bytes of <EM>data</EM> in the field ID <EM>id</EM> of <EM>record</EM>. 
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> When storing ASCII data (strings), the strings should <STRONG>not</STRONG> be null terminated. For example, if you want to store the string "<CODE>ABCD</CODE>", then let <EM>data</EM> be a pointer to the string and let <EM>dataSize</EM> equal 4.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSetFieldName()">
 </A>
<H1 CLASS="refHeading">
FoamDBSetFieldName()</H1>
<PRE CLASS="syntax">void FoamDBSetFieldName(
        VMFileHandle    file, 
        MemHandle       record, 
        FieldID            id, 
        char            *name);
</PRE>
<P>
Changes the name of the field with the ID <EM>id</EM> of <EM>record</EM> to <EM>name</EM>. 
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> <EM>name</EM> is a null-terminated string.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSetNameForToken()">
 </A>
<H1 CLASS="refHeading">
FoamDBSetNameForToken()</H1>
<PRE CLASS="syntax">void FoamDBSetNameForToken(
	VMFileHandle 	file, 
	word 	nameToken, 
	TCHAR 	*name);
</PRE>
<P>
Sets the name for the field identified by <EM>nameToken</EM> token
in the database's <CODE>FieldName</CODE> element array.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> Field names are null-terminated.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_FoamDBSuspendNotifications()">
 </A>
<H1 CLASS="refHeading">
FoamDBSuspendNotifications()</H1>
<PRE CLASS="syntax">void FoamDBSuspendNotifications(
	VMFileHandle 	file);</PRE>
<P>
This routine stops the generation of notifications to the database <EM>file</EM>. Calls to this routine
 must be matched by calls to <CODE>
<A HREF="../../CRef/Routines/R_FoamDBGetCurrent.htm#IX_FoamDBResumeNotifications()">FoamDBResumeNotifications()</A></CODE>,
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBSuspendUpdates()">
 </A>
<H1 CLASS="refHeading">
FoamDBSuspendUpdates()</H1>
<PRE CLASS="syntax">
void FoamDBSuspendUpdates(
	VMFileHandle	 file);
</PRE>
<P>
This routine stops the generation of updates for the database <EM>file</EM>. Calls to this routine
 must be matched by calls to <CODE>
<A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBResumeUpdates()">FoamDBResumeUpdates()</A></CODE>.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> It is dangerous to prevent updates.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBVisibleRecordEnum()">
 </A>
<H1 CLASS="refHeading">
FoamDBVisibleRecordEnum()</H1>
<PRE CLASS="syntax">Boolean FoamDBVisibleRecordEnum(
	VMFileHandle file, 
	void *enumData,
	PCB(Boolean, callback,     /* Non-zero to stop enum */
		  (RecordHeader *record, void *callbackEnumData)));     /* Callback Routine */
</PRE>
This routine calls an application-specified callback routine for each visible record in the database. The
callback routine can return non-zero to stop the enumeration. <EM>enumData</EM> is a pointer to any kind of data that your application needs to pass to the callback routine and that the callback routine can modify. The callback routine can return non-zero to stop the enumeration. 
<P>
For a more complete explanation of using callback routines in a FoamDB, refer to the explanation given for the similar routine <CODE>
<A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBFieldEnum()">FoamDBFieldEnum()</A></CODE>. 
The callback routine should be declared as
<PRE CLASS="syntax">
/*
 * Prototype of callback routine
 */
Boolean _pascal myCallBackRoutine(RecordHeader *record, void *callbackEnumData);
</PRE> 
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBVisibleRecordEnumWithRange()">
 </A>
<H1 CLASS="refHeading">
FoamDBVisibleRecordEnumWithRange()</H1>
<PRE CLASS="syntax"> Boolean FoamDBVisibleRecordEnumWithRange(
	VMFileHandle file, 
	void *enumData,
	dword startElement,
	dword numOfRecords,
	PCB(Boolean, callback,      /* Non-zero to stop enum */
		(RecordHeader *record, void *callbackEnumData)));     /* Callback routine */
</PRE>
<P>
This routine calls the application-specified callback routine for some visible records in the database, starting with the record number <EM>startElement</EM>, and continuing for <EM>numOfRecords</EM> records. <EM>enumData</EM> is a pointer to any kind of data that your application needs to pass to the callback routine and that the callback routine can modify. The callback routine can return non-zero to stop the enumeration.
<P>
For a more complete explanation of using callback routines in a FoamDB, refer to the explanation given for the similar routine <CODE>
<A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBFieldEnum()">FoamDBFieldEnum()</A></CODE>. 
The callback routine should be declared as
<PRE CLASS="syntax">
/*
 * Prototype of callback routine
 */
Boolean _pascal myCallBackRoutine(RecordHeader *record, void *callbackEnumData);
</PRE> 
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBGetCurrent.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> FoamDBGetCurrentRecordID() ...</A> 
<!-- to next --> | <A HREF="R_2f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FormatIDFromManufacturerAndType() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
