<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_17.htm,v 1.2 97/06/25 18:10:32 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DBDeref() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_16.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBAlloc() ...</A> 
<!-- to next --> | <A HREF="R_18.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DBLock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DBDeref()">
 </A>
<H1 CLASS="refHeading">
DBDeref()</H1>
<PRE CLASS="syntax">void *	DBDeref(
        optr		*ref);</PRE>
<P>
This routine is passed an optr to a locked DB item. The routine returns the address of the item.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The optr becomes invalid when the DB item is unlocked.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_DBDirty()">
 </A>
<H1 CLASS="refHeading">
DBDirty()</H1>
<PRE CLASS="syntax">void	DBUnlock(
        const void *		ptr);</PRE>
<P>
This routine marks a DB item as dirty; this insures that the VM manager will copy its item-block back to the disk before freeing its memory. The routine is passed a pointer to anywhere within the item.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	All the items in an item block are marked dirty at once; thus, you can call this routine just once for several items in the same item block. Only the segment portion of the pointer is significant; thus, you can pass a pointer to anywhere in the item. This is useful if you have incremented the pointer to the item.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBFree()">
 </A>
<H1 CLASS="refHeading">
DBFree()</H1>
<PRE CLASS="syntax">void	DBFree(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This routine frees the specified item. It does not invalidate pointers to other items in the group. It is passed the file, group, and item handles specifying the item; it does not return anything.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	 <BR>
Never call <CODE>
DBFree()</CODE>
 on a locked item. If you do, the item-block's lock count will not be decremented, which will prevent the item block from ever being properly unlocked.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_17.htm#IX_DBFreeUngrouped()">DBFreeUngrouped()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBFreeUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBFreeUngrouped()</H1>
<PRE CLASS="syntax">void	DBFreeUngrouped(
        VMFileHandle		file,
        DBGroupAndItem		id);</PRE>
<P>
This routine frees the specified item. It does not invalidate pointers to other ungrouped items. It is passed the file handle and <CODE>
DBGroupAndItem</CODE>
 value specifying the item; it does not return anything.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	 Never call <CODE>
DBFreeUngrouped()</CODE>
 on a locked item. If you do, the item-block's lock count will not be decremented, which will prevent the item block from ever being properly unlocked.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_17.htm#IX_DBFree()">DBFree()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBGetMap()">
 </A>
<H1 CLASS="refHeading">
DBGetMap()</H1>
<PRE CLASS="syntax">DBGroupAndItem 	DBGetmap(
        VMFileHandle		file);</PRE>
<P>
This routine returns the <CODE>
DBGroupAndItem</CODE>
 structure for the passed file's map item. If there is no map item, it returns a null handle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_18.htm#IX_DBSetMap()">DBSetMap()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_18.htm#IX_DBLockMap()">DBLockMap()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBGroupAlloc()">
 </A>
<H1 CLASS="refHeading">
DBGroupAlloc()</H1>
<PRE CLASS="syntax">DBGroup	DBGroupAlloc(
        VMFileHandle		file);</PRE>
<P>
This routine allocates a new DB group in the specified file and returns its handle. If the group cannot be allocated, <CODE>
DBGroupAlloc()</CODE>
 returns a null handle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBGroupFree()">
 </A>
<H1 CLASS="refHeading">
DBGroupFree()</H1>
<PRE CLASS="syntax">void	DBGroupFree(
        VMFileHandle		file,
        DBGroup		group);</PRE>
<P>
This routine frees the specified group. This deletes all items and item-blocks associated with the group. It is passed the file and group handle specifying the group. Note that you can free a group even if some of its items are locked; those locked items will also be freed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBGroupFromGroupAndItem() macro">
 </A>
<H1 CLASS="refHeading">
DBGroupFromGroupAndItem()</H1>
<PRE CLASS="syntax">DBGroup	DBGroupFromGroupAndItem(
        DBGroupAndItem		id);</PRE>
<P>
This macro returns the <CODE>
DBGroup</CODE>
 portion of a <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBInsertAt()">
 </A>
<H1 CLASS="refHeading">
DBInsertAt()</H1>
<PRE CLASS="syntax">void	DBInsertAt(
        VMFileHandle		file,			
        DBGroup		group,
        DBItem		item,
        word		insertOffset,
        word		insertCount);</PRE>
<P>
This routine inserts bytes at a specified offset within a DB item. The bytes are zero-initialized. It is passed the file, group, and item handles specifying a DB item, as well as an offset within the cell and a number of bytes to insert. It inserts the specified number of bytes beginning at the specified offset; the data which was at the passed offset will end up immediately after the inserted bytes.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine invalidates pointers to other items in the same group.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBInsertAtUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBInsertAtUngrouped()</H1>
<PRE CLASS="syntax">void	DBInsertAtUngrouped(
        VMFileHandle		file,			
        DBGroupAndItem		id,
        word		insertOffset,
        word		insertCount);</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_17.htm#IX_DBInsertAt()">DBInsertAt()</A></CODE>
, except it is passed a <CODE>
DBGroupAndItem</CODE>
 value instead of separate group and item handles.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine invalidates pointers to other ungrouped items.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBItemFromGroupAndItem() macro">
 </A>
<H1 CLASS="refHeading">
DBItemFromGroupAndItem()</H1>
<PRE CLASS="syntax">DBItem	DBItemFromGroupAndItem(
        DBGroupAndItem		id);</PRE>
<P>
This macro returns the <CODE>
DBItem</CODE>
 portion of a <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_16.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBAlloc() ...</A> 
<!-- to next --> | <A HREF="R_18.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DBLock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
