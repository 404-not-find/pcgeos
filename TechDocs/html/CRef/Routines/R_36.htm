<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_36.htm,v 1.2 97/06/25 18:23:06 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GeoFree() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_35.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeLoadDGroup ...</A> 
<!-- to next --> | <A HREF="R_37.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrApplyTranslation() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GeoFree()">
 </A>
<H1 CLASS="refHeading">
GeoFree()</H1>
<PRE CLASS="syntax">void	* GeoFree(
        void		* blockPtr,				/* address of memory to free */
        GeodeHandle		geodeHan);				/* owner of block to be used */</PRE>
<P>
The routine <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 can free only memory in the malloc-block belonging to the calling geode. If you want to free memory in another geode's malloc-block, call <CODE>
GeoFree()</CODE>
. Passing a null <CODE>
GeodeHandle</CODE>
 will make <CODE>
<A HREF="../../CRef/Routines/R_36.htm#IX_GeoMalloc()">GeoMalloc()</A></CODE>
 act on memory in the calling geode's malloc-block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Pass exactly the same address as the one returned to you when you allocated the memory. If you pass a different address, <CODE>
GeoFree()</CODE>
 will take unpredictable actions, including possibly erasing other memory or crashing the system.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GeoMalloc()">
 </A>
<H1 CLASS="refHeading">
GeoMalloc()</H1>
<PRE CLASS="syntax">void	* GeoMalloc(
        size_t		blockSize,				/* # of bytes to allocate*/
        GeodeHandle		geodeHan,				/* Owner of block to be used */
        word		zeroInit);				/* Zero-initialize memory? */</PRE>
<P>
The routine <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 automatically allocates memory in the malloc-block belonging to the calling geode. It does not zero-initialize the memory. If you want to zero-initialize the memory, or want to allocate it in another geode's malloc-block, call <CODE>
GeoMalloc()</CODE>
. Pass <EM>
true</EM>
 (i.e., non-zero) in <CODE>
zeroInit</CODE>
 to zero-initialize the memory.</P>
<P>
Passing a null <CODE>
GeodeHandle</CODE>
 will make <CODE>
GeoMalloc()</CODE>
 allocate the memory in the calling geode's malloc-block. If &quot;zeroInit&quot; is true, the memory will be initialized to null bytes; otherwise, the memory will be left uninitialized.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All memory allocated with <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 is freed when GEOS shuts down.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GeoReAlloc()">
 </A>
<H1 CLASS="refHeading">
GeoReAlloc()</H1>
<PRE CLASS="syntax">void	* GeoReAlloc(
        void		* blockPtr,				/* address of memory to resize */
        size_t		newSize,				/* New size in bytes */
        GeodeHandle		geodeHan);				/* Owner of block to be used */</PRE>
<P>
The routine <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>
 can resize only memory in the malloc-block belonging to the calling geode. If you want to resize memory in another geode's malloc-block, call <CODE>
GeoReAlloc()</CODE>
. Passing a null <CODE>
GeodeHandle</CODE>
 will make <CODE>
GeoReAlloc()</CODE>
 act on memory in the calling geode's malloc-block.</P>
<P>
If the block is resized larger, the new memory will not be zero-initialized. Resizing a block smaller will never fail. If <CODE>
GeoReAlloc()</CODE>
 fails, it will return a null pointer (zero). If you pass a <CODE>
newSize</CODE>
 of zero, the passed block pointer is freed and the return pointer is a null pointer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Pass exactly the same address as the one returned to you when you allocated the memory. If you pass a different address, <CODE>
GeoReAlloc()</CODE>
 will take unpredictable actions, including possibly erasing other memory or crashing the system.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GrApplyRotation()">
 </A>
<H1 CLASS="refHeading">
GrApplyRotation()</H1>
<PRE CLASS="syntax">void	GrApplyRotation(
        GStateHandle		gstate,			/* GState to alter */
        WWFixedAsDWord		angle); 			/* degrees counterclockwise */</PRE>
<P>
Apply a rotation to the GState's transformation matrix.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrApplyScale()">
 </A>
<H1 CLASS="refHeading">
GrApplyScale()</H1>
<PRE CLASS="syntax">void	GrApplyScale(
        GStateHandle		gstate,			/* GState to alter */
        WWFixedAsDWord		xScale,			/* new x scale factor */
        WWFixedAsDWord		yScale);			/* new y scale factor */</PRE>
<P>
Apply a scale factor to the GState's transformation matrix.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrApplyTransform()">
 </A>
<H1 CLASS="refHeading">
GrApplyTransform()</H1>
<PRE CLASS="syntax">void	GrApplyTransform(
        GStateHandle		gstate,			/* GState to draw to */
        const TransMatrix		*tm);			/* transformation matrix to apply */</PRE>
<P>
Apply a transformation, expressed as a transformation matrix, to a GState's coordinate system.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_35.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeLoadDGroup ...</A> 
<!-- to next --> | <A HREF="R_37.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrApplyTranslation() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
