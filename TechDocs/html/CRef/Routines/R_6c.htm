<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_6c.htm,v 1.2 97/06/25 18:36:23 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: MemDowngradeExclLock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemAlloc() ...</A> 
<!-- to next --> | <A HREF="R_6d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemLock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_MemDowngradeExclLock()">
 </A>
<H1 CLASS="refHeading">
MemDowngradeExclLock()</H1>
<PRE CLASS="syntax">void	MemDowngradeExclLock(
        MemHandle		mh);			/* handle of affected block */</PRE>
<P>
An application that has an exclusive lock on a block may downgrade it to a shared lock with this routine. It does not otherwise affect the block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemFree()">
 </A>
<H1 CLASS="refHeading">
MemFree()</H1>
<PRE CLASS="syntax">void	MemFree(
        MemHandle		mh);			/* handle of block to be freed */</PRE>
<P>
This routine frees a global memory block. The block can be locked or unlocked. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The routine does not care whether other threads have locked the block. If you try to free a bad handle, routine may fatal-error.</P>
</DIV>
<DIV>
<A NAME="IX_MemGetInfo()">
 </A>
<H1 CLASS="refHeading">
MemGetInfo()</H1>
<PRE CLASS="syntax">word	MemGetInfo( /* return value depends on flag passed */
        MemHandle		mh, 			/* Handle of block to get info about */
        MemGetInfoType		info);			/* Type of information to get */</PRE>
<P>
<CODE>
MemGetInfo()</CODE>
 is a general-purpose routine for getting information about a global memory block. It gets the information by looking in the block's handle table entry; it does not need to access the actual block. It returns a single word of data; the meaning of that word depends on the value of the <CODE>
MemGetInfoType</CODE>
 variable passed. The following types are available:</P>
<DL>
<DT>
MGIT_SIZE</DT><DD>Return value is size of the block in bytes. This may be larger than the size originally requested, as blocks are allocated along paragraph boundaries.</DD>
<DT>
MGIT_FLAGS_AND_LOCK_COUNT</DT><DD>
The upper byte of the return value is the current <CODE>
HeapFlags</CODE>
 record for the block. The lower byte is the number of locks currently on the block.</DD>
<DT>
MGIT_OWNER_OR_VM_FILE_HANDLE</DT><DD>
If the block is part of a VM file, return value is the VM file handle. Otherwise, return value is the GeodeHandle of the owning thread.</DD>
<DT>
MGIT_ADDRESS</DT><DD>
Return value is block's segment address on the global heap, or zero if block has been discarded. If block is unlocked and moveable, address may change without warning. Ordinarily, <CODE>
<A HREF="../../CRef/Routines/R_6b.htm#IX_MemDeref()">MemDeref()</A></CODE>
 is preferable.</DD>
<DT>
MGIT_OTHER_INFO</DT><DD>
Returns the value of the <CODE>
HM_otherInfo</CODE>
 word. This word is used in different ways for different types of handles.</DD>
<DT>
MGIT_EXEC_THREAD</DT><DD>
Returns the ThreadHandle of the thread executing this block, if any.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the handle is not a global memory block handle, results are unpredictable (the routine will read inappropriate data from the handle table entry).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6b.htm#IX_MemDeref()">MemDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyFlags()">MemModifyFlags()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyOtherInfo()">MemModifyOtherInfo()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleModifyOwner()">HandleModifyOwner()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemIncRefCount()">
 </A>
<H1 CLASS="refHeading">
MemIncRefCount()</H1>
<PRE CLASS="syntax">void	MemIncRefCount(
        MemHandle		mh);			/* handle of affected block */</PRE>
<P>
This routine increments the reference count of a global memory block (the reference count is stored in HM<CODE>
_otherInfo</CODE>
).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine assumes that a reference count is stored in HM<CODE>
_otherInfo</CODE>
. You may only use this routine if the block has had a reference count set up with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemInitRefCount()">MemInitRefCount()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemInitRefCount()">
 </A>
<H1 CLASS="refHeading">
MemInitRefCount()</H1>
<PRE CLASS="syntax">void	MemInitRefCount(
        MemHandle		mh,				/* handle of affected block */
        word		count);				/* initial reference count */</PRE>
<P>
This routine sets up a reference count for the specified global memory block. The passed count is stored in the HM<CODE>
_otherInfo</CODE>
 field of the block's handle-table entry.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine overwrites the HM<CODE>
_otherInfo</CODE>
 field. Since the semaphore routines (<CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 and the routines which use them) use this field, you cannot use both the semaphore routines and the reference count routines on the same block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemAlloc() ...</A> 
<!-- to next --> | <A HREF="R_6d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemLock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
