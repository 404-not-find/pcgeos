<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_MailboxGetBodyFormat.htm,v 1.2 97/08/21 13:47:42 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: MailboxGetBodyFormat() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxAck.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MailboxAcknowledgeMessageReceipt() ...</A> 
<!-- to next --> | <A HREF="R_MailboxGetVMFile.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MailboxGetVMFile() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. --></DIV>




<DIV>
<A NAME="IX_MailboxGetBodyFormat()">
 </A>
<H1 CLASS="refHeading">
MailboxGetBodyFormat()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetBodyFormat(
	MailboxMessage 	msg,
	MailboxDataFormat 	*dataFormat);
</PRE>
<P>This routine gets the <CODE>MailboxDataFormat</CODE> token of the message <EM>msg</EM> and copies it into <EM>dataFormat</EM>. It returns a <CODE>MailboxError</CODE> if the routine is invalid.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_ MailboxGetBodyMboxRefBlock()">
 </A>
<H1 CLASS="refHeading">
MailboxGetBodyMboxRefBlock()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetBodyMboxRefBlock(
	MailboxMessage 	msg,
	MemHandle 	*mboxRefHandle);
</PRE>
<P>
Fetches the opaque mailbox reference to the message body of message <EM>msg</EM> and stores it in the block <EM>mboxRefHandle</EM>. This returned block contains a mailbox reference structure specific to the Data Driver.  Examples are:
<PRE>
	/* for mailbox data drivers that use VMChains */
	typedef {  
		dword VMTMR_vmChain;
		TCHAR VMTMR_filename[];
	} VMTreeMboxRef;

	/* for mailbox data drivers that use raw data files */
	typedef {
		Boolean FMR_deleteAfterTransmit;
		word FMR_diskDataOffset;
		word FMR_diskDataLen;
		word FMR_filenameLen;
		byte FMR_filenameAndDiskData[];
			/* start of null-terminated filename, 
			 * followed by diskData (at 
			 * FMR_diskDataOffset). */
	} FileDDMboxRef;
</PRE>

The routine returns <CODE>ME_INVALID_MESSAGE</CODE> if the message is invalid, or <CODE>ME_NOT_ENOUGH_MEMORY</CODE> if the block of data could not be created.
</P>
<P CLASS="refField"><STRONG>Note:</STRONG> This routine is normally used by the mailbox drivers, not by applications.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetBodyRef()">
 </A>
<H1 CLASS="refHeading">
MailboxGetBodyRef()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetBodyRef(
	MailboxMessage 	msg,
	void 	*appRefBuf, 		
	word 	*appRefBufSize);	
</PRE>
<P>
This routine retrieves the address of the message body of the message <EM>msg</EM> in the format understood and used by applications registering a message with the Mailbox library, the app-reference. The definitions of app-reference structures are defined in the documentation for each of the various communication methods, <EM>e.g.</EM> <A HREF="../../Nokia9000/SMS/index.htm">the SMS chapter</A>. This reference to the body is copied into the buffer <EM>appRefBuf</EM>. <EM>appRefBufSize</EM> initially points to the size of this buffer in bytes, and then it is set to the number of bytes that were copied into the buffer. In the case of an error (<EM>msg</EM> is invalid, the library is unable to load the driver, there is insufficient memory, the app-ref buffer too small, there is no message body available) a <CODE>MailboxError</CODE> will be generated.
</P>
<P CLASS="refField">
<STRONG>Warning: </STRONG>
Each call to this routine must be matched by a call to <CODE>
MailboxDoneWithBody()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>





<DIV>
<A NAME="IX_MailboxGetDestApp()">
 </A>
<H1 CLASS="refHeading">
MailboxGetDestApp()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetDestApp(
	MailboxMessage 	msg,
	GeodeToken 	*tokenBuf);

</PRE>
<P>Gets the <CODE>GeodeToken</CODE> for the destination application from the message <EM>msg</EM> and copies it into <EM>tokenBuf</EM>. This routine returns <CODE>ME_INVALID_MESSAGE</CODE> if the passed MailboxMessage is invalid.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxGetEndBound()">
 </A>
<H1 CLASS="refHeading">
MailboxGetEndBound()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetEndBound(
	MailboxMessage 	msg,
	FileDateAndTime 	*dateTime);
</PRE>
<P>
Fetches the end bound of the message <EM>msg</EM> and copies it into <EM>dateTime</EM>. If the message is invalid, this routine returns <CODE> ME_INVALID_MESSAGE</CODE>.
</P>
<P CLASS="refField"><STRONG>See Also:</STRONG> <CODE>MailboxGetStartBound()</CODE></P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxGetFirstMediumUnit()">
 </A>
<H1 CLASS="refHeading">
MailboxGetFirstMediumUnit()</H1>
<PRE CLASS="syntax"> word	 MailboxGetFirstMediumUnit(
	MediumType 	mediumType, 
	MediumUnitType 	*unitType);
</PRE>
<P>
Puts the first available unit of the indicated <CODE>MediumType</CODE> <EM>mediumType</EM> into <EM>unitType</EM>. This should be used when a transport driver just wants to use a particular medium but doesn't care which one. This routine returns the unit number. 
</P>
<P CLASS="refField">
<STRONG>Warning:</STRONG>
 Do not call this for a medium that doesn't use unit numbers. You will generate a fatal-error in the error-checking version, and won't get any additional information in the non-error-checking version (since the return will be <CODE>MUT_NONE</CODE> whether there's an available unit or not). Use <CODE>
MailboxCheckMediumAvailable()</CODE> 
instead. Also remember, if <EM>unitType</EM> is a handle to other memory because it is a <CODE>MUT_MEM_BLOCK</CODE>,  it will be your responsibility to free the associated memory block.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxGetMessageFlags()">
 </A>
<H1 CLASS="refHeading">
MailboxGetMessageFlags()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetMessageFlags(
	MailboxMessage 	msg,
	MailboxMessageFlags 	*flags);
</PRE>
<P>
Retrieves the <CODE>MailboxMessageFlags</CODE> for the message <EM>msg</EM> and copies them into <EM>flags</EM>. If the message is invalid, <CODE>ME_INVALID_MESSAGE</CODE> is returned.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxGetNumTransAddrs()">
 </A>
<H1 CLASS="refHeading">
MailboxGetNumTransAddrs()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetNumTransAddrs(
	MailboxMessage 		msg, 
	word 	*numAddresses);
</PRE>
<P>
Retrieves the number of transport addresses bound to the message <EM>msg</EM> and stores that number in <EM>numAddresses</EM>. If <EM>msg</EM> is in the inbox, then <EM>numAddressess</EM> is set to zero. If the number of addresses can't be obtained, then the routine returns <CODE>ME_INVALID_MESSAGE</CODE>.
</P>
<P CLASS="refField"><STRONG>See Also:</STRONG> <CODE>MailboxGetTransAddr()</CODE></P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetStartBound()">
 </A>
<H1 CLASS="refHeading">
MailboxGetStartBound()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetStartBound(
	MailboxMessage 	msg,
	FileDateAndTime	*dateTime);
</PRE>
<P>
Fetches the start bound of the message <EM>msg</EM> and copies it into <EM>dateTime</EM>. If the message is invalid, this routine returns  <CODE>ME_INVALID_MESSAGE</CODE>.
</P>
<P CLASS="refField"><STRONG>See Also:</STRONG> <CODE> MailboxGetEndBound()</CODE></P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxGetStorageType()">
 </A>
<H1 CLASS="refHeading">
MailboxGetStorageType()</H1>
<PRE CLASS="syntax"> MailboxError 	MailboxGetStorageType(
	MailboxMessage 	msg,
	MailboxStorage 	*storage);
</PRE>
<P>
This routine gets the <CODE>MailboxStorage</CODE> token for the message <EM>msg</EM> and copies it into <EM>storage</EM>. If the message is invalid, <CODE>ME_INVALID_MESSAGE</CODE> is returned.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetSubjectBlock()">
 </A>
<H1 CLASS="refHeading">
MailboxGetSubjectBlock()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetSubjectBlock(
	MailboxMessage 	msg, 
	MemHandle 	*subjHandle);
</PRE>
<P>
Retrieves the null-terminated subject/summary of the message <EM>msg</EM> and copies it into a global memory block, then puts the associated <CODE>MemHandle</CODE> into <EM> subjHandle</EM>. Returns <CODE>ME_INVALID_MESSAGE</CODE> if <EM>msg</EM> is invalid or <CODE>ME_NOT_ENOUGH_MEMORY</CODE> if there isn't sufficient memory to create the block.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetSubjectLMem()">
 </A>
<H1 CLASS="refHeading">
MailboxGetSubjectLMem()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxGetSubjectLMem(
	MailboxMessage 	msg, 
	MemHandle 	lmemBlock, 
	ChunkHandle 	*subjectChunk);
</PRE>
<P>
Retrieves the subject/summary of the message <EM>msg</EM> and copies it into a local memory block <EM>lmemBlock</EM>, and puts the <CODE>ChunkHandle</CODE> for this null-terminated subject into <EM>subjectChunk</EM>. Returns <CODE>ME_INVALID_MESSAGE</CODE> if <EM>msg</EM> is invalid or <CODE>ME_NOT_ENOUGH_MEMORY</CODE> if there isn't sufficient memory to create the block.
</P>

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetTransAddr()">
 </A>
<H1 CLASS="refHeading">
MailboxGetTransAddr()</H1>
<PRE CLASS="syntax"> Boolean	MailboxGetTransAddr(
	MailboxMessage 	msg, 
	word 	addrNumber,
	void 	*addressBuffer,
	word 	*bufSizePtr);
</PRE>

<P>
This routine retrieves the <EM>addrNumber</EM>-th transport address from the message <EM>msg</EM> and copies the address into <EM>addressBuffer</EM>. <EM>bufSizePtr</EM> should initially point to the size of the buffer in bytes and, if the routine works successfully, it will be set to the number of bytes that were actually copied into <EM>addressBuffer</EM>. If the <EM>addrNumber</EM> is invalid because it is either too large or the message doesn't exist, then <EM>bufSizePtr</EM> will be set to zero. If the buffer isn't large enough to store the address, then <EM>bufSizePtr</EM> is set to the number of bytes required. The routine returns zero (<CODE>FALSE</CODE>) if an error occurred, otherwise it returns non-zero.
</P>

<P CLASS="refField"><STRONG>See Also:</STRONG> <CODE>MailboxGetNumTransAddrs()<BR> MailboxGetUserTransAddrLMem()<BR> MailboxSetTransAddr()</CODE></P>

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxGetTransData()">
 </A>
<H1 CLASS="refHeading">
MailboxGetTransData()</H1>
<PRE CLASS="syntax"> MailboxError 	MailboxGetTransData(
	MailboxMessage 	msg, 
	dword 	*transData);
</PRE>

<P>
Puts the 32-bit transport data registered with the message <EM>msg</EM> into <EM>transData</EM>. If <EM>msg</EM> is an invalid message then the routine returns <CODE>ME_INVALID_MESSAGE</CODE>.
</P>

<P CLASS="refField"><STRONG>See Also:</STRONG> <CODE>MailboxSetTransData()</CODE>
</P>

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxGetUserTransAddrLMem()">
 </A>

<H1 CLASS="refHeading">
MailboxGetUserTransAddrLMem()</H1>
<PRE CLASS="syntax"> MailboxError 	MailboxGetUserTransAddrLMem(
	MailboxMessage 	msg, 
	word 	addrNumber,
	MemHandle 	lmemBlock,
	ChunkHandle 	*addrChunk);
</PRE>

<P>
Retrieves a user-readable transport address from a message. The input parameters are the message <EM>msg</EM>, the address number <EM>addrNumber</EM>, and the handle of the lmem block <EM>lmemBlock</EM> in which to place the string. The routine copies the null-terminated string into this block, and sets <EM>addrChunk</EM> to point to the string's chuck. There are three errors that could occur: if <EM>addrNumber</EM> is not valid, <CODE>ME_ADDRESS_INVALID</CODE> is returned; if <EM>msg</EM> is not valid, <CODE>ME_INVALID_MESSAGE</CODE> is returned; and if there is insufficient memory to create the chunk, <CODE>ME_NOT_ENOUGH_MEMORY</CODE> is returned;
</P>

<P CLASS="refField"><STRONG>See Also:</STRONG><CODE>MailboxGetTransAddr()</CODE></P>

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxAck.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> MailboxAcknowledgeMessageReceipt() ...</A> 
<!-- to next --> | <A HREF="R_MailboxGetVMFile.htm"><IMG SRC="../../docImages/next.gif" BORDER="0"   ALT="Next: "> MailboxGetVMFile() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P><EM>This document is in Beta.  Ride at your own risk.  <A HREF="mailto:isv-feedback@geoworks.com">Mail us</A> your comments and suggestions</EM></P>
</BODY>
</HTML>
