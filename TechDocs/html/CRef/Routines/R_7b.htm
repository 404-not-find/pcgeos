<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_7b.htm,v 1.3 97/08/14 16:06:43 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjIsClassADescendant() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjInitDetach() ...</A> 
<!-- to next --> | <A HREF="R_7c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjResizeMaster() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjIsClassADescendant()">
 </A>
<H1 CLASS="refHeading">
ObjIsClassADescendant()</H1>
<PRE CLASS="syntax">Boolean	ObjIsClassADescendant(
        ClassStruct		* class1,				/* proposed ancestor */
        ClassStruct		* class2);				/* proposed descendant */</PRE>
<P>
This routine checks if <CODE>
class2</CODE>
 is a descendand of <CODE>
class1</CODE>
 and returns <CODE>
true</CODE>
 if it is.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjIsObjectInClass()">
 </A>
<H1 CLASS="refHeading">
ObjIsObjectInClass()</H1>
<PRE CLASS="syntax">Boolean	ObjIsObjectInClass(
        optr		obj,				/* object to check */
        ClassStruct		* class);				/* proposed class */</PRE>
<P>
This routine checks to see if the passed object is a member of the specified class. It checks superclasses as well, but if an unresolved variant class is encountered, the variant will <EM>
not</EM>
 be resolved. If you want to search past variant class links, you should sent <CODE>
MSG_META_DUMMY</CODE>
 to the object first. The two parameters for this routine are</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object to be checked.  Its object block 
must be locked down before this routine is called. (If the object's 
block might not be locked down, perhaps you should send 
<A HREF="../../SysObjects/Meta/MetaClass_4.htm#IX_MSG_META_IS_OBJECT_IN_CLASS">MSG_META_IS_OBJECT_IN_CLASS</A> 
to the object instead of calling this routine.</DD>
<DT>
<CODE>
class</CODE>
</DT><DD>A pointer to the subject class' <CODE>
ClassStruct</CODE>
 definition.</DD>
</DL>
<P>
<CODE>
ObjIsObjectInClass()</CODE>
 returns <CODE>
true</CODE>
 if the object is in the class, <CODE>
false</CODE>
 (zero) if it is not.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjIsObjectInClassHandles()">
 </A>
<H1 CLASS="refHeading">
ObjIsObjectInClassHandles()</H1>
<PRE CLASS="syntax">Boolean	ObjIsObjectInClassHandles(
        MemHandle		mh,				/* handle portion of optr */
        ChunkHandle		ch,				/* chunk portion of optr */
        ClassStruct		* class);				/* proposed class */</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_7b.htm#IX_ObjIsObjectInClass()">ObjIsObjectInClass()</A></CODE>
 except the object is specified via its handles rather than its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjLinkFindParent()">
 </A>
<H1 CLASS="refHeading">
ObjLinkFindParent()</H1>
<PRE CLASS="syntax">optr	ObjLinkFindParent(
        optr	obj,		/* child's optr */
        word	masterOffset,		/* offset to master part with link field */
        word	linkOffset);		/* offset in master part to link field */</PRE>
<P>
This routine returns the optr of the specified object's parent. It must be passed the following:</P>
<DL>
<DT>
<EM>
obj</EM>
</DT><DD>The optr of the object whose parent is to be found.</DD>
<DT>
<CODE>
masterOffset</CODE></DT><DD>

The offset within the object's instance chunk to its master group's offset (the value that would appear in the <CODE>
Class_masterOffset</CODE>
 field in its <CODE>
ClassStruct</CODE>
 structure).</DD>
<DT>
<CODE>
linkOffset</CODE>
</DT><DD>The offset within the object's instance chunk to the link field.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_VIS_FIND_PARENT</CODE>,
<CODE>MSG_GEN_FIND_PARENT</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjLockObjBlock()">
 </A>
<H1 CLASS="refHeading">
ObjLockObjBlock()</H1>
<PRE CLASS="syntax">void	* ObjLockObjBlock(
        MemHandle mh);			/* handle of object block */</PRE>
<P>
This routine locks an object block, loading in the block if necessary. It must be passed the handle of the block, and it returns the locked block's segment address. When the caller is done using the block, it should unlock it with <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Always unlock the block when you are done with it, with <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLock()">MemLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjMapSavedToState()">
 </A>
<H1 CLASS="refHeading">
ObjMapSavedToState()</H1>
<PRE CLASS="syntax">VMBlockHandle ObjMapSavedToState(
        MemHandle mh);			/* handle of object block */</PRE>
<P>
This routine returns the VM block handle of the state file block corresponding to the passed object block. If the specified object block has no state file equivalent, a null handle is returned.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjMapStateToSaved()">
 </A>
<H1 CLASS="refHeading">
ObjMapStateToSaved()</H1>
<PRE CLASS="syntax">MemHandle ObjMapStateToSaved(
        VMBlockHandle		vmbh,			/* VM block handle of state block */
        GeodeHandle		gh);			/* handle of geode owning block */</PRE>
<P>
This routine takes a VM block handle and a geode handle and returns the memory block corresponding to the VM block, if any. The two parameters are</P>
<DL>
<DT>
<CODE>
vmbh</CODE>
</DT><DD>The VM block handle of the VM block to be mapped.</DD>
<DT>
<CODE>
gh</CODE>
</DT><DD>The geode handle of the owner of the block, or zero to use the calling geode's handle.</DD>
</DL>
<P>
If the block is found, <CODE>
ObjMapStateToSaved()</CODE>
 returns its handle. If the block is not found, it returns a null handle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjMarkDirty()">
 </A>
<H1 CLASS="refHeading">
ObjMarkDirty()</H1>
<PRE CLASS="syntax">void	ObjMarkDirty(
        optr 	o);	/* object to be marked dirty */</PRE>
<P>
This routine marks an object dirty, indicating that changes to it should be saved when its object block is saved. If you want changes to objects saved, you should mark the object dirty.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Often you do not need this routine because parameters or flags to other routines will set the object dirty automatically. If there is any doubt, however, you should use this routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_2a.htm#IX_ObjChunkFlags">ObjChunkFlags</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7c.htm#IX_ObjSetFlags()">ObjSetFlags()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjMarkDirtyHandles()">
 </A>
<H1 CLASS="refHeading">
ObjMarkDirtyHandles()</H1>
<PRE CLASS="syntax">void	ObjMarkDirtyHandles(
        MemHandle		mh,			/* handle portion of optr */
        ChunkHandle		ch);			/* chunk portion of optr */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7b.htm#IX_ObjMarkDirty()">ObjMarkDirty()</A></CODE>
 except that it specifies the object via handles rather than an optr.</P>
</DIV>
<DIV>
<A NAME="IX_ObjProcBroadcastMessage()">
 </A>
<H1 CLASS="refHeading">
ObjProcBroadcastMessage()</H1>
<PRE CLASS="syntax">void	ObjProcBroadcastMessage(
        EventHandle event);			/* the event to be broadcast */</PRE>
<P>
This routine broadcasts the given event to all threads which have message queues. It must be passed an encapsulated event (usually recorded with <CODE>
@record</CODE>
) and returns nothing. This is typically used for notification purposes.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
</DIV>
<DIV>
<A NAME="IX_ObjRelocateEntryPoint()">
 </A>
<H1 CLASS="refHeading">
ObjRelocateEntryPoint()</H1>
<PRE CLASS="syntax">void *	ObjRelocateEntryPoint(
        EntryPointRelocation *			relocData);</PRE>
</DIV>
<DIV>
<A NAME="IX_ObjRelocOrUnRelocSuper()">
 </A>
<H1 CLASS="refHeading">
ObjRelocOrUnRelocSuper()</H1>
<PRE CLASS="syntax">void	ObjRelocOrUnRelocSuper(
        optr 		oself,
        ClassStruct		*class,
        word		frame);</PRE>
<P>
Call this routine to relocate an object's superclass.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjInitDetach() ...</A> 
<!-- to next --> | <A HREF="R_7c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjResizeMaster() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
