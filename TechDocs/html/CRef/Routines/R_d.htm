<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_d.htm,v 1.2 97/06/25 18:48:25 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ConstructOptr() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ClipboardSetQuickTransferFeedback() ...</A> 
<!-- to next --> | <A HREF="R_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ContactGetDBHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ConstructOptr() macro">
 </A>
<A NAME="IX_optr:ConstructOptr() macro">
 </A>
<H1 CLASS="refHeading">
ConstructOptr()</H1>
<PRE CLASS="syntax">optr	ConstructOptr(
        Handle 		han,
        ChunkHandle 		ch);</PRE>
<P>
This macro constructs an optr type from the given handle (typically a MemHandle) and chunk handle.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleToOptr() macro">HandleToOptr()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToHandle()">OptrToHandle()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToChunk()">OptrToChunk()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ContactCompareNumbers()">
 </A>
<H1 CLASS="refHeading">
ContactCompareNumbers()</H1>
<PRE CLASS="syntax">Boolean 	ContactCompareNumbers(
        TCHAR *number1, 
        TCHAR *number2);</PRE>
<P>
This function compares two phone number strings for equivalence. It ignores extraneous characters such as spaces. It returns zero if they are the same number, otherwise it returns a non-zero value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contdb.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ContactCreateRecordFromTemplate()">
 </A>
<H1 CLASS="refHeading">
ContactCreateRecordFromTemplate()</H1>
<PRE CLASS="syntax">MemHandle	 ContactCreateRecordFromTemplate( void );</PRE>
<P>
This function creates a new Contact record in the Contacts database. It returns the handle of the new record. Make any desired changes to the record and then call <CODE>
<A HREF="../../CRef/Routines/R_f.htm#IX_ContactSaveRecord()">ContactSaveRecord()</A></CODE>
 to save the record or <CODE>
FoamDBDiscardRecord()</CODE>
 to discard changes.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contdb.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_f.htm#IX_ContactSaveRecord()">ContactSaveRecord()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_f.htm#IX_ContactSetTemplateRecord()">ContactSetTemplateRecord()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ContactEnsureEmptyField()">
 </A>
<H1 CLASS="refHeading">
ContactEnsureEmptyField()</H1>
<PRE CLASS="syntax">FieldID	ContactEnsureEmptyField( 
        MemHandle 		record,
        optr 		fieldName,
        ContdbFieldType		fieldType);</PRE>
<P>
This function creates a field in a record, and clears the dat from the existing field of that name if one already existed. This function takes the following arguemnts:</P>
<DL>
<DT>
<EM>record</EM> </DT><DD>The handle of the record, as returned by <CODE>
FoamDBGetRecordFromID()</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_d.htm#IX_ContactCreateRecordFromTemplate()">ContactCreateRecordFromTemplate()</A></CODE>
. </DD>
<DT>
<EM>fieldName</EM></DT><DD>optr of a chunk containing the null-terminated name string, or <CODE>
NullOptr</CODE>
 to use the default name for the passed <CODE>
ContdbFieldType</CODE>
.</DD>
<DT>
<EM>fieldType</EM> </DT><DD>The type of field to find. One of CFT_NAME, CFT_COMPANY CFT_TITLE, CFT_ADDRESS, CFT_PHONE, CFT_FAX, CFT_EMAIL, CFT_DTMF, CFT_NOTES. </DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contdb.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ContactEnsureField()">ContactEnsureField()</A></CODE>,
<CODE>FoamDBSetFieldData()</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ContactEnsureField()">
 </A>
<H1 CLASS="refHeading">
ContactEnsureField()</H1>
<PRE CLASS="syntax">FieldID	ContactEnsureField( 
        MemHandle 		record,
        optr 		fieldName,
        ContdbFieldType		fieldType);</PRE>
<P>
This functionreturns the <CODE>
FieldID</CODE>
 of a field within a record, or creates the field if it doesn't find it. This function takes the following arguemnts:</P>
<DL>
<DT>
<EM>record</EM> </DT><DD>The handle of the record, as returned by <CODE>
FoamDBGetRecordFromID()</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_d.htm#IX_ContactCreateRecordFromTemplate()">ContactCreateRecordFromTemplate()</A></CODE>
. </DD>
<DT>
<EM>fieldName</EM></DT><DD>optr of a chunk containing the null-terminated name string, or <CODE>
NullOptr</CODE>
 to use the default name for the passed <CODE>
ContdbFieldType</CODE>
.</DD>
<DT>
<EM>fieldType</EM> </DT><DD>The type of field to find. One of CFT_NAME, CFT_COMPANY CFT_TITLE, CFT_ADDRESS, CFT_PHONE, CFT_FAX, CFT_EMAIL, CFT_DTMF, CFT_NOTES. </DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contdb.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ContactEnsureEmptyField()">ContactEnsureEmptyField()</A></CODE>,
<CODE>FoamDBSetFieldData()</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ContactExportDBToTextFile()">
 </A>
<H1 CLASS="refHeading">
ContactExportDBToTextFile()</H1>
<PRE CLASS="syntax">ContactExportStatus 	ContactExportDBToTextFile(
        hptr 	fileExport,
        dword 	startElement,
        dword 	numOfRecords);</PRE>
<P>
This function exports the Contact database's data as an ASCII file. On success, the function returns CES_NO_ERROR, otherwise it returns CES_FILE_ERROR. This function takes the following arguments:</P>
<DL>
<DT>
<EM>fileExport</EM></DT><DD>The handle of the opened file to hold the exported text.</DD>
<DT>
<EM>startElement</DT><DD>
</EM>The <CODE>
RecordID</CODE>
 of the first record to export.</DD>
<DT>
<EM>numOfRecords</DT><DD>
</EM>This argument determines the range of records to export. All records with RecordID at least <EM>startElement</EM> but less than <EM>startElement</EM>+<EM>numOfRecords</EM> will be exported.</DD>
</DL>
<P>
To export all the records, pass a <EM>startElement</EM> of zero and a <EM>numOfRecords</EM> of CONTACT_EXPORT_ALL_RECORDS.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contdb.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ContactExportDBToTextFile()">ContactExportDBToTextFile()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ClipboardSetQuickTransferFeedback() ...</A> 
<!-- to next --> | <A HREF="R_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ContactGetDBHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
