<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_81.htm,v 1.2 97/06/25 18:40:57 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: PCCOMABORT() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_80.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ParallelClose() ...</A> 
<!-- to next --> | <A HREF="R_82.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">qsort ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_PCCOMABORT()">
 </A>
<H1 CLASS="refHeading">
PCCOMABORT()</H1>
<PRE CLASS="syntax">void PCCOMABORT(void);</PRE>
<P>
This routine aborts the current file transfer operation being carried out by the PCCom library. It is the third entry point in the PCCom library.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
pccom.goh </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_PCCOMEXIT()">
 </A>
<H1 CLASS="refHeading">
PCCOMEXIT()</H1>
<PRE CLASS="syntax">PCComReturnType PCCOMEXIT();</PRE>
<P>
This routine kills a pccom thread such as those started by PCCOMINIT(). It is the second entry point in the PCCom library.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef ByteEnum PCComReturnType;
        #define PCCRT_NO_ERROR 0
        #define PCCRT_CANNOT_LOAD_SERIAL_DRIVER 1
        #define PCCRT_CANNOT_CREATE_THREAD 2
        #define PCCRT_CANNOT_ALLOC_STREAM 3
        #define PCCRT_ALREADY_INITIALIZED 4</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
pccom.goh </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_PCCOMINIT()">
 </A>
<H1 CLASS="refHeading">
PCCOMINIT()</H1>
<PRE CLASS="syntax">PCComReturnType PCCOMINIT(
        SerialPortNum 		port,
        SerialBaud 		baud,
        word 		timeout,
        optr 		callbackOptr,
        PCComInitFlags 		flags);</PRE>
<P>
This entry point of the PCCom library spawns a new thread which monitors a serial port and acts as a passive pccom terminal. This routine is the first entry point in the PCCom library.</P>
<P>
This routine takes the following arguments:</P>
<DL>
<DT>
<EM>port</EM></DT><DD>A <CODE>
SerialPortNum</CODE>
 value specifying which serial port to use for the pccom connection. Pass -1 for the system default value: <CODE>
com1</CODE>
 for the Zoomer, <CODE>
com2</CODE>
 for the desktop product.</DD>
<DT>
<EM>baud</EM></DT><DD>A <CODE>
SerialBaud</CODE>
 value specifying what speed to use. Pass -1 for the system default value: 19200 baud for the Zoomer, 38400 baud for the desktop product.</DD>
<DT>
<EM>timeout</EM></DT><DD>Number of clock ticks (one tick is 1/60 second) to allow for connection.</DD>
<DT>
<EM>callbackOptr</DT><DD>
</EM>An object which will receive notification messages of certain events. A value of zero means no notification will be sent.</DD>
<DT>
<EM>flags</EM></DT><DD>If an object will be receiving notification messages, these flags determine what sort of notifications will be sent.</DD>
</DL>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef ByteEnum PCComReturnType;
        #define PCCRT_NO_ERROR 0
        #define PCCRT_CANNOT_LOAD_SERIAL_DRIVER 1
        #define PCCRT_CANNOT_CREATE_THREAD 2
        #define PCCRT_CANNOT_ALLOC_STREAM 3
        #define PCCRT_ALREADY_INITIALIZED 4
        &nbsp;
        typedef WordFlags PCComInitFlags;
        	/* send notifications when text is available for display */
        #define PCCIF_NOTIFY_OUTPUT 0x8000
        	/* send notification when the remote machine shuts down the
 * serial line */</PRE>
<PRE CLASS="syntax">        #define PCCIF_NOTIFY_EXIT 0x4000
        &nbsp;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
pccom.goh </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ProcCallFixedOrMovable_cdecl()">
 </A>
<H1 CLASS="refHeading">
ProcCallFixedOrMovable_cdecl()</H1>
<PRE CLASS="syntax">dword	ProcCallFixedOrMovable_cdecl(
        void 	(*routine),
        ...)</PRE>
<P>
This routine calls the routine pointed to, passing the other arguments through to the called routine. The called routine must use C calling conventions.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ProcCallFixedOrMovable_pascal()">
 </A>
<H1 CLASS="refHeading">
ProcCallFixedOrMovable_pascal()</H1>
<PRE CLASS="syntax">dword	ProcCallFixedOrMovable_pascal(
        ...,
        void 	(*routine))</PRE>
<P>
This routine calls the routine pointed to, passing the other arguments through to the called routine. The called routine must use Pascal calling conventions.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ProcGetLibraryEntry()">
 </A>
<H1 CLASS="refHeading">
ProcGetLibraryEntry()</H1>
<PRE CLASS="syntax">void *	ProcGetLibraryEntry(
        GeodeHandle		library,
        word		entryNumber)</PRE>
<P>
This routine returns the pointer to a library's entry-point.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ProcInfo()">
 </A>
<H1 CLASS="refHeading">
ProcInfo()</H1>
<PRE CLASS="syntax">ThreadHandle ProcInfo(
        GeodeHandle gh);		/* handle of geode to check */</PRE>
<P>
This routine returns the first thread of the process geode specified. If the geode is not a process, the routine will return a null handle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_PtrToOffset()">
 </A>
<H1 CLASS="refHeading">
PtrToOffset()</H1>
<PRE CLASS="syntax">word	PtrToOffset(<EM>ptr</EM>);
        dword	<EM>ptr</EM>;</PRE>
<P>
This macro returns just the lower 16 bits of the given dword. It is most useful for extracting the offset portion of a far pointer.</P>
</DIV>
<DIV>
<A NAME="IX_PtrToSegment()">
 </A>
<H1 CLASS="refHeading">
PtrToSegment()</H1>
<PRE CLASS="syntax">word	PtrToSegment(<EM>ptr</EM>);
        dword	<EM>ptr</EM>;</PRE>
<P>
This macro returns just the upper 16 bits of the given dword. It is most useful for extracting the segment address of a far pointer.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_80.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ParallelClose() ...</A> 
<!-- to next --> | <A HREF="R_82.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">qsort ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
