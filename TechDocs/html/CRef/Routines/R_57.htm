<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_57.htm,v 1.3 97/08/08 16:44:35 nfiedler Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: HugeArrayDestroy() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_56.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HandleV() ...</A> 
<!-- to next --> | <A HREF="R_58.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HugeArrayPrev() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_HugeArrayDestroy()">
 </A>
<H1 CLASS="refHeading">
HugeArrayDestroy()</H1>
<PRE CLASS="syntax">void	HugeArrayDestroy(
        VMFileHandle		vmFile,
        VMBlockHandle		vmBlock);			/* Handle of directory block */</PRE>
<P>
This routine destroys a HugeArray by freeing all of its blocks.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayEnum()">
 </A>
<H1 CLASS="refHeading">
HugeArrayEnum()</H1>
<PRE CLASS="syntax">Boolean	HugeArrayEnum(
        VMFileHandle		vmFile,			/* subject to override */
        VMBlockHandle		vmBlock,			/* Handle of the Huge Array's directory
					 * block */</PRE>
<PRE CLASS="syntax">        Boolean	 _pascal 	(*callback) (						/* return <EM>true</EM> to stop */
        		void *			element,			/* element to examine */
        		void * 			enumData),
        dword		startElement,				/* first element to examine */
        dword		count,			/* examine this many elements */
        void *		enumData;			/* this pointer is passed to callback
					 * routine */</PRE>
<P>
This routine lets you examine a sequence of elements in a Huge Array. <CODE>
HugeArrayEnum()</CODE>
 is passed six arguments. The first two are a file handle and block handle; these specify the Huge Array to be examined. The third is a pointer to a Boolean callback routine. The fourth argument is the index of the first element to be examined (remember, the first element in the Huge Array has an index of zero). The fifth argument is the number of elements to examine, or -1 to examine through the last element. The sixth argument is a pointer which is passed unchanged to the callback routine; you can use this to pass data to the callback routine, or to keep track of a scratch space.</P>
<P>
The callback routine, which must be declared _pascal, itself takes two arguments. The first is a pointer to an element in the huge array. The callback routine will be called once for each element in the specified range; each time, the first argument will point to the element being examined. The second argument is the pointer that was passed as the final argument to <CODE>
HugeArrayEnum()</CODE>
. The callback routine can make <CODE>
HugeArrayEnum()</CODE>
 abort by returning <EM>
true</EM>
; this is useful if you need to search for a specific element. Otherwise, the callback routine should return <EM>
false</EM>
. If the callback routine aborts the enumeration, <CODE>
HugeArrayEnum()</CODE>
 returns <EM>
true</EM>
; otherwise, it returns <EM>
false</EM>
.</P>
<P>
<CODE>
HugeArrayEnum()</CODE>
 is guaranteed to examine the elements in numerical order, beginning with <EM>
startElement</EM>
. The routine will automatically stop with the last element, even if <EM>
count</EM>
 elements have not been enumerated. However, the starting element must be the index of an element in the array.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The callback routine may not allocate, free, or resize any elements in the Huge Array. All it should do is examine or change (<EM>
without</EM>
 resizing) a single element. </P>
<P>
The starting element must be an element in the array. If you pass a starting index which is out-of-bounds, the results are undefined.</P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayExpand()">
 </A>
<H1 CLASS="refHeading">
HugeArrayExpand()</H1>
<PRE CLASS="syntax">word	HugeArrayExpand(
        void **		elemPtr,				/* **elemPtr is element at location
						 * where new elements will be
						 * created */</PRE>
<PRE CLASS="syntax">        word		numElem,				/* # of elements to insert */
        const void *		initData);				/* Copy this into each new 
						 * element */</PRE>
<P>
This routine inserts a number of elements at a specified location in a HugeArray. The element pointed to will be shifted so it comes after the newly-created elements. The pointer will be fixed up to point to the first new element. The data pointed to by <EM>
initData</EM>
 will be copied into each new element. If <EM>
initData</EM>
 is null, the new elements will be uninitialized.</P>
<P>
If the elements are of variable size, this routine will insert a single element; this element will be <CODE>
numElem</CODE>
 bytes long.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayGetCount()">
 </A>
<H1 CLASS="refHeading">
HugeArrayGetCount()</H1>
<PRE CLASS="syntax">dword	HugeArrayGetCount(
        VMFileHandle		vmFile,
        VMBlockHandle		vmBlock);			/* Handle of directory block */</PRE>
<P>
This routine returns the number of elements in a Huge Array.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayInsert()">
 </A>
<H1 CLASS="refHeading">
HugeArrayInsert()</H1>
<PRE CLASS="syntax">void	HugeArrayInsert(
        VMFileHandle		vmFile,
        VMBlockHandle		vmBlock,			/* Handle of directory block */
        word		numElem,			/* # of elements to insert */
        dword		elemNum,			/* Index of first new element */
        const void *		initData);			/* Copy this into each new element */</PRE>
<P>
This routine inserts one or more elements in the midst of a Huge Array. The first new element will have index <EM>
elemNum</EM>
; thus, the element which previously had that index will now come after the new elements. The data pointed to by <CODE>
initData</CODE>
 will be copied into each new element. If <CODE>
initData</CODE>
 is null, the new elements will be uninitialized.</P>
<P>
If the elements are of variable size, this routine will insert a single element; this element will be <CODE>
numElem</CODE>
 bytes long.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayLock()">
 </A>
<H1 CLASS="refHeading">
HugeArrayLock()</H1>
<PRE CLASS="syntax">dword	HugeArrayLock(
        VMFileHandle		vmFile,
        VMBlockhandle		vmBlock,			/* Handle of directory block */
        dword		elemNum,			/* Element to lock */
        void **		elemPtr,			/* Pointer to element is written here */
        word *		elemSize);</PRE>
<P>
This routine locks an element in a Huge Array. It writes the element's address to <CODE>
*elemPtr</CODE>
. The dword returned indicates how many elements come before and after the element in that blok The upper word indicates how many elements come before the locked one, counting the locked element; the lower word indicates how many elements come after the locked element, again counting the locked one. If an error occured, then the lower word of the return value will be zero. </P>
<P>
The routine also writes the size of the locked element (in bytes) to <CODE>
*elemSize</CODE>
. You may examine or change all the other elements in the block without making further calls to <CODE>
HugeArrayLock()</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HAL_COUNT() macro">HAL_COUNT()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HAL_PREV() macro">HAL_PREV()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayNext()">
 </A>
<H1 CLASS="refHeading">
HugeArrayNext()</H1>
<PRE CLASS="syntax">word	HugeArrayNext(
        void **		elemPtr,
        word *		size);</PRE>
<P>
This routine increments a pointer to an element in a HugeArray to point to
the next element. If the element was the last element in its block,
<CODE>HugeArrayNext()</CODE> will unlock its block and lock the next one.
The routine writes the pointer to <EM>*elemPtr</EM>; it returns the number
of elements which come after the newly-locked one in its block, counting
the newly-locked element. If this routine is passed a pointer to the last
element in a HugeArray, it returns zero and <EM>elemPtr</EM> will point
to the last element.</P>
<P>
If the elements are variable-sized, then the word pointed to by
<EM>size</EM> will be updated to reflect the size of the newly-locked
element; otherwise, the value will be undefined.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may unlock the block containing the passed element. Therefore, if you need to mark the block as dirty, do so before making this call.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_56.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HandleV() ...</A> 
<!-- to next --> | <A HREF="R_58.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HugeArrayPrev() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
