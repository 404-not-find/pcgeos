<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_32.htm,v 1.2 97/06/25 18:22:05 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GenCopyChunk() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_31.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GCNListSend() ...</A> 
<!-- to next --> | <A HREF="R_33.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeAllocQueue() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GenCopyChunk()">
 </A>
<H1 CLASS="refHeading">
GenCopyChunk()</H1>
<PRE CLASS="syntax">word	GenCopyChunk(
        MemHandle		destBlock,			/* handle of locked LMem block into
					 * which chunk will be copied */</PRE>
<PRE CLASS="syntax">        MemHandle		blk,			/* handle of locked source LMem block */
        ChunkHandle		chnk,			/* chunk handle of chunk to be copied */
        word		flags);			/* CompChildFlags */</PRE>
<P>
This is a utility routine that copies one LMem chunk into a newly created chunk. The routine will allocate the new chunk in the block passed in <CODE>
destBlock</CODE>
 and will return the chunk handle of the new chunk. It is used primarily by the UI to duplicate generic object chunks.</P>
<P>
The source chunk is specified by the global handle <CODE>
blk</CODE>
 and the chunk handle <CODE>
chnk</CODE>
. The <CODE>
flags</CODE>
 parameter contains a record of <CODE>
CompChildFlags</CODE>
, of which only the CCF_MARK_DIRTY flag is meaningful. If this flag is set, the new chunk will be marked dirty.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may resize and/or move chunks and blocks, so you must dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenFindObjectInTree()">
 </A>
<H1 CLASS="refHeading">
GenFindObjectInTree()</H1>
<PRE CLASS="syntax">optr	GenFindObjectInTree(
        optr	startObject,		/* optr of object at which to start search */
        dword	childTable);		/* pointer to table of bytes, each indicating
			 * the position of the child at the given
			 * level; -1 is the end of the table */</PRE>
<P>
This utility routine finds the object having the optr <CODE>
startObject</CODE>
 in the generic tree. Applications will not likely need this routine.</P>
<P>
The childTable parameter points to a table of bytes, each byte representing the child number to be found at each level. The first byte indicates the child of startObject to get; the second byte indicates the child to get at the next level; the third byte indicates the child to get at the next level, and so on. A byte of -1 indicates the end of the table. The object found will be returned.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenInsertChild()">
 </A>
<H1 CLASS="refHeading">
GenInsertChild()</H1>
<PRE CLASS="syntax">void	GenInsertChild(
        MemHandle		mh,					/* handle of parent */
        ChunkHandle		chnk,					/* chunk of parent */
        optr		childToAdd,					/* optr of new child */
        optr		referenceChild,					/* optr of reference child */
        word		flags);					/* CompChildFlags */</PRE>
<P>
This utility routine adds a child object to a composite object. It is used almost exclusively by the UI for generic objects--applications will typically use <CODE>
MSG_GEN_ADD_CHILD</CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_GEN_ADD_CHILD</CODE>.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may move or resize chunks and/or object blocks; therefore, you must dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenProcessAction()">
 </A>
<H1 CLASS="refHeading">
GenProcessAction()</H1>
<P>
This is an Esp-only routine. In most cases, Goc programmers will use <CODE>
MSG_GEN_OUTPUT_ACTION</CODE>
 instead.</P>
</DIV>
<DIV>
<A NAME="IX_GenProcessGenAttrsAfterAction()">
 </A>
<H1 CLASS="refHeading">
GenProcessGenAttrsAfterAction()</H1>
<PRE CLASS="syntax">void	GenProcessGenAttrsAfterAction(
        MemHandle		mh,		/* handle of object calling the routine */
        ChunkHandle		chnk);		/* chunk of object calling the routine */</PRE>
<P>
This utility routine processes various attributes for a generic object after the object's action message has been sent. It is used almost exclusively by the generic UI after <CODE>
MSG_GEN_OUTPUT_ACTION</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_32.htm#IX_GenProcessAction()">GenProcessAction()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may move or resize chunks and/or object blocks; therefore, you must dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenProcessGenAttrsBeforeAction()">
 </A>
<H1 CLASS="refHeading">
GenProcessGenAttrsBeforeAction()</H1>
<PRE CLASS="syntax">void	GenProcessGenAttrsBeforeAction(
        MemHandle		mh,		/* handle of object calling the routine */
        ChunkHandle		chnk);		/* chunk of object calling the routine */</PRE>
<P>
This utility routine processes various attributes for a generic object before the object's action message has been sent. It is used almost exclusively by the generic UI before <CODE>
MSG_GEN_OUTPUT_ACTION</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_32.htm#IX_GenProcessAction()">GenProcessAction()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may move or resize chunks and/or object blocks; therefore, you must dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenProcessUndoGetFile()">
 </A>
<H1 CLASS="refHeading">
GenProcessUndoGetFile()</H1>
<PRE CLASS="syntax">VMFileHandle GenProcessUndoGetFile();</PRE>
<P>
This routine returns the handle of the file that holds the process' undo information.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
Objects/gProcC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenProcessUndoCheckIfIgnoring()">
 </A>
<H1 CLASS="refHeading">
GenProcessUndoCheckIfIgnoring()</H1>
<PRE CLASS="syntax">Boolean GenProcessUndoCheckIfIgnoring();</PRE>
<P>
This routine returns <EM>
true</EM>
 if the process is currently ignoring actions.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
Objects/gProcC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenRemoveDownwardLink()">
 </A>
<H1 CLASS="refHeading">
GenRemoveDownwardLink()</H1>
<PRE CLASS="syntax">void	GenRemoveDownwardLink(
        MemHandle		mh,			/* handle of calling object */
        ChunkHandle		chnk,			/* chunk of calling object */
        word		flags);			/* CompChildFlags */</PRE>
<P>
This utility routine removes a child from the generic tree, preserving the child's upward link and usability flags. It is called primarily by the generic UI and is rarely used by applications. The flags parameter specifies whether the object linkage should be marked dirty by passing the CCF_MARK_DIRTY flag.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may move or resize chunks and/or object blocks; therefore, you must dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GenSetUpwardLink()">
 </A>
<H1 CLASS="refHeading">
GenSetUpwardLink()</H1>
<PRE CLASS="syntax">void	GenSetUpwardLink(
        MemHandle		mh,			/* handle of calling object */
        ChunkHandle		chnk,			/* chunk of calling object */
        optr		parent);			/* optr of calling object's parent */</PRE>
<P>
This utility routine converts the child/parent link to an upward-only link. Pass the handle and chunk of the locked child object and the optr of the parent composite.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
genC.goh</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_31.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GCNListSend() ...</A> 
<!-- to next --> | <A HREF="R_33.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeAllocQueue() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
