<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_7d.htm,v 1.3 97/08/13 16:18:04 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjVarAddData() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjResizeMaster() ...</A> 
<!-- to next --> | <A HREF="R_7e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjVarDeleteDataAt() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjVarAddData()">
 </A>
<H1 CLASS="refHeading">
ObjVarAddData()</H1>
<PRE CLASS="syntax">void	* ObjVarAddData(
        optr		obj,				/* object to add vardata to */
        VardataKey		dataType,				/* vardata type */
        word		dataSize);				/* vardata data size, if any */</PRE>
<P>
This routine adds or alters a variable data entry for the specified object. If the data type does not currently exist in the instance chunk, it will be allocated and added to the chunk. If it does exist, the extra data of the entry will be re-initialized to all zeroes.</P>
<P>
This routine returns a pointer to the extra data of the new or modified entry; if the entry has no extra data, an opaque pointer to the entry is passed, and you can use this pointer with <CODE>
<A HREF="../../CRef/Routines/R_7e.htm#IX_ObjVarDeleteDataAt()">ObjVarDeleteDataAt()</A></CODE>
. In either case, the object will be marked dirty.</P>
<P>
If it is possible that you are adding the object's first/only field of 
variable data, set the object's <CODE>OCF_VARDATA_RELOC</CODE> flag by means 
of the 
<A HREF="../../CRef/Routines/R_7c.htm#IX_ObjSetFlags()">ObjSetFlags()</A> 
routine or 
<A HREF="../../SysObjects/Meta/MetaClass_6.htm#IX_MSG_META_SET_FLAGS">MSG_META_SET_FLAGS</A>.</P>
<P>
The parameters of this routine are</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object affected. This should be the caller's optr.</DD>
<DT>
<CODE>
dataType</CODE>
</DT><DD>The <CODE>
VardataKey</CODE>
 word declaring the data type and its flags. The VDF_SAVE_TO_STATE flag must be properly set; the VDF_EXTRA_DATA flag is ignored, however, as the routine will set it properly.</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>The size of the extra data for this type. If the type has no extra data, pass zero.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine should be called only by the object whose vardata is affected. To operate on other objects' vardata remotely, use messages provided by <CODE>
MetaClass</CODE>
 (see below under &quot;See Also&quot;).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_META_ADD_VAR_DATA</CODE>,
<CODE><A HREF="../../CRef/Routines/R_7e.htm#IX_ObjVarDeleteDataAt()">ObjVarDeleteDataAt()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjVarAddDataHandles()">
 </A>
<H1 CLASS="refHeading">
ObjVarAddDataHandles()</H1>
<PRE CLASS="syntax">void	* ObjVarAddDataHandles(
        MemHandle		mh,				/* handle portion of optr */
        ChunkHandle		ch,				/* chunk portion of optr */
        VardataKey		dataType,				/* vardata type */
        word		dataSize);				/* vardata data size, if any */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7d.htm#IX_ObjVarAddData()">ObjVarAddData()</A></CODE>
 except that the object is specified via its handles rather than its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjVarCopyDataRange()">
 </A>
<H1 CLASS="refHeading">
ObjVarCopyDataRange()</H1>
<PRE CLASS="syntax">void	ObjVarCopyDataRange(
        optr	source,	/* the optr of the source object */
        optr	dest,	/* the optr of the destination (calling) object */
        word	rangeStart,	/* the smallest data type value to be copied */
        word	rangeEnd);	/* the largest data type value to be copied */</PRE>
<P>
This routine copies all the vardata entries within the specified range from the <CODE>
source</CODE>
 object to the <CODE>
dest</CODE>
 object. The range to be copied is specified by data types and is between <CODE>
rangeStart</CODE>
 and <CODE>
rangeEnd</CODE>
, inclusive. If any data entries are copied, the destination object will be marked dirty.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine should be called only by the destination object; it is against OOP doctrine for one object to alter another's instance data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjVarDeleteData()">
 </A>
<H1 CLASS="refHeading">
ObjVarDeleteData()</H1>
<PRE CLASS="syntax">Boolean	ObjVarDeleteData(
        optr		obj,				/* object to delete from */
        VardataKey		dataType);				/* data type to delete */</PRE>
<P>
This routine deletes a vardata entry from the specified object's instance chunk, if the entry exists. The entry is specified by its data type; to delete an entry specified by a pointer to it, use <CODE>
<A HREF="../../CRef/Routines/R_7e.htm#IX_ObjVarDeleteDataAt()">ObjVarDeleteDataAt()</A></CODE>
, below. It returns an error flag: <CODE>
true</CODE>
 if the entry was not found, <CODE>
false</CODE>
 if the entry was successfully deleted. The object will also be marked dirty by the routine.</P>
<P>
The parameters for this routine are</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object affected. This should be the caller's optr.</DD>
<DT>
<CODE>
dataType</CODE>
</DT><DD>The <CODE>
VardataKey</CODE>
 word declaring the data type and its flags. Both the VDF_SAVE_TO_STATE flag and the VDF_EXTRA_DATA flag are ignored.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine should be called only by the object whose vardata is affected. To operate on other objects' vardata remotely, use messages provided by <CODE>
MetaClass</CODE>
 (see below under &quot;See Also&quot;).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_META_DELETE_VAR_DATA</CODE>,
<CODE><A HREF="../../CRef/Routines/R_7e.htm#IX_ObjVarDeleteDataAt()">ObjVarDeleteDataAt()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjVarDeleteDataHandles()">
 </A>
<H1 CLASS="refHeading">
ObjVarDeleteDataHandles()</H1>
<PRE CLASS="syntax">Boolean	ObjVarDeleteDataHandles(
        MemHandle		mh,				/* handle portion of optr */
        ChunkHandle		ch,				/* chunk portion of optr */
        VardataKey		dataType);				/* data type to delete */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7d.htm#IX_ObjVarDeleteData()">ObjVarDeleteData()</A></CODE>
 except that the object is specified via its handles rather than its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjResizeMaster() ...</A> 
<!-- to next --> | <A HREF="R_7e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjVarDeleteDataAt() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
