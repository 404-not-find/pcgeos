<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_16.htm,v 1.2 97/06/25 18:10:08 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DBAlloc() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DataStoreSetField() ...</A> 
<!-- to next --> | <A HREF="R_17.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DBDeref() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DBAlloc()">
 </A>
<H1 CLASS="refHeading">
DBAlloc()</H1>
<PRE CLASS="syntax">DBItem	DBAlloc(
        VMFileHandle		file,		
        DBGroup		group,
        word		size);</PRE>
<P>
This routine allocates an item in the specified file and group. It is passed the handles for the file and group which will contain the new item. It returns the new item's item-handle.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All pointers to items in the group may be invalidated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_16.htm#IX_DBAllocUngrouped()">DBAllocUngrouped()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBAllocUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBAllocUngrouped()</H1>
<PRE CLASS="syntax">DBGroupAndItem 	DBAllocUngrouped(
        VMFileHandle		file,			
        word		size);</PRE>
<P>
This routine allocates an ungrouped item in the specified file. It is passed the handle of the file which will contain the new item. It returns the item's <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All pointers to ungrouped items may be invalidated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_16.htm#IX_DBAlloc()">DBAlloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBCombineGroupAndItem() macro">
 </A>
<H1 CLASS="refHeading">
DBCombineGroupAndItem()</H1>
<PRE CLASS="syntax">DBGroupAndItem 	DBCombineGroupAndItem(
        DBGroup 		group,
        DBItem 		item);</PRE>
<P>
This macro combines group and item handles into a dword-sized <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_17.htm#IX_DBGroupFromGroupAndItem() macro">DBGroupFromGroupAndItem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_17.htm#IX_DBItemFromGroupAndItem() macro">DBItemFromGroupAndItem()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBCopyDBItem()">
 </A>
<H1 CLASS="refHeading">
DBCopyDBItem()</H1>
<PRE CLASS="syntax">DBItem 	DBCopyDBItem(
        VMFileHandle		srcFile,				
        DBGroup		srcGroup,
        DBItem		srcItem,
        VMFileHandle		destFile,				
        DBGroup		destGroup);</PRE>
<P>
This routine makes a duplicate of a DB item in the specified DB file and group. It is passed the file handle, group handle, and item handle of the source item, as well as the file handle and group handle of the destination group. It makes a copy of the DB item and returns its <CODE>
DBItem</CODE>
 handle.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All pointers to items in the destination group may be invalidated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a2.htm#IX_VMCopyVMChain()">VMCopyVMChain()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBCopyDBItemUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBCopyDBItemUngrouped()</H1>
<PRE CLASS="syntax">DBGroupAndItem 	DBCopyDBItemUngrouped(
        VMFileHandle		srcFile,				
        DBGroupAndItem		srcID,				/* source item */
        VMFileHandle		destFile);				</PRE>
<P>
This routine makes a duplicate of a specified DB item. It is passed the file handle and <CODE>
DBGroupAndItem</CODE>
 value specifying the source item, and the file handle of the destination file. It allocates the item as an ungrouped item in the specified file and returns its <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If the source item is not ungrouped, you can combine the group and item handles into a <CODE>
DBGroupAndItem</CODE>
 value by calling the macro <CODE>
<A HREF="../../CRef/Routines/R_16.htm#IX_DBCombineGroupAndItem() macro">DBCombineGroupAndItem()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All pointers to ungrouped items in the destination file may be invalidated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a2.htm#IX_VMCopyVMChain()">VMCopyVMChain()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBDeleteAt()">
 </A>
<H1 CLASS="refHeading">
DBDeleteAt()</H1>
<PRE CLASS="syntax">void	DBDeleteAt(
        VMFileHandle		file,			
        DBGroup		group,
        DBItem		item,
        word		deleteOffset,
        word		deleteCount);</PRE>
<P>
This routine deletes a sequence of bytes from within an item. It does not invalidate pointers to other items. The routine is passed the file, group, and item handles specifying the item, as well as an offset within the item and a number of bytes to delete. It will delete the specified number of bytes from within the item, starting with the byte at the specified offset.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBDeleteAtUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBDeleteAtUngrouped()</H1>
<PRE CLASS="syntax">void	DBDeleteAtUngrouped(
        VMFileHandle		file,				
        DBGroupAndItem		id,
        word		deleteOffset,
        word		deleteCount);</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_16.htm#IX_DBDeleteAt()">DBDeleteAt()</A></CODE>
, except it is passed a <CODE>
DBGroupAndItem</CODE>
 value instead of separate group and item handles. It does not invalidate pointers to other items.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DataStoreSetField() ...</A> 
<!-- to next --> | <A HREF="R_17.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DBDeref() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
