<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9f.htm,v 1.4 97/08/12 16:49:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: UserRemoveAutoExec() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">UserAllocObjBlock ...</A> 
<!-- to next --> | <A HREF="R_a0.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UtilAsciiToHex32() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_UserRemoveAutoExec()">
 </A>
<A NAME="IX_execOnStartup INI file field:UserRemoveAutoExec()">
 </A>
<H1 CLASS="refHeading">
UserRemoveAutoExec()</H1>
<PRE CLASS="syntax">void	UserRemoveAutoExec(
        const char *		appName);</PRE>
<P>
This routine removes an application from the list of those to be launched on start-up. It is passed one argument:</P>
<DL>
<DT>
<CODE>
appName</CODE>
</DT><DD>This is a pointer to a null-terminated string containing the name of the application.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ui.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_UserStandardDialog()">
 </A>
<A NAME="IX_Dialog boxes:UserStandardDialog()">
 </A>
<H1 CLASS="refHeading">
<A NAME="37754">
 </A>
UserStandardDialog()</H1>
<PRE CLASS="syntax">word	UserStandardDialog(
        char *			helpContext,
        char *			customTriggers,
        char *			arg2,
        char *			arg1,
        char *			string,
        CustomDialogBoxFlags 	dialogFlags);</PRE>
<P>
<CODE>
UserStandardDialog()</CODE>
 creates and displays either a custom dialog box or one of several pre-defined standard dialog boxes. </P>
<P>
Most often, you will use this routine to create a custom dialog box that conforms to a standardized dialog. In this case, pass the <CODE>
CustomDialogType</CODE>
 of SDBT_CUSTOM as the routine's final argument. You must then supply other parameters to create the custom dialog box.</P>
<P>
If instead you wish to use one of the pre-defined <CODE>
CustomDialogType </CODE>
types, you should pass that type as the final argument to this routine. Some of these standard types require you to pass string parameters. Other arguments should be passed as null.</P>
<P>
For custom dialog boxes you must pass a <CODE>
CustomDialogType</CODE>
 (CDT_WARNING, CDT_NOTIFICATION, CDT_QUESTION, or CDT_ERROR). This chooses the proper icon glyph to display within the dialog box. (For example, a CDT_WARNING dialog might contain a large exclamation-point glyph.) Make sure that you use CDBF_DIALOG_TYPE_OFFSET to pass this value. E.g.:</P>
<PRE>(GIT_AFFIRMATION &lt;&lt; CDBF_INTERACTION_TYPE_OFFSET) | (CDT_WARNING | CDBF_DIALOG_TYPE_OFFSET)</PRE>
<P>
You should also pass a valid <CODE>
GenInteractionType</CODE>
. In most cases, this will be either GIT_NOTIFICATION, GIT_AFFIRMATION, or GIT_MULTIPLE_RESPONSE. Make sure that you use CDBF_INTERACTION_TYPE_OFFSET to pass this value. E.g.:</P>
<PRE>(GIT_AFFIRMATION &lt;&lt; CDBF_INTERACTION_TYPE_OFFSET) | (CDT_WARNING | CDBF_DIALOG_TYPE_OFFSET)</PRE>
<P>
Also pass the routine a <CODE>
string</CODE>
 to display to the user. This <CODE>
string</CODE>
 may be either text or graphics based. The <CODE>
arg1</CODE>
 and <CODE>
arg2</CODE>
 strings may be used in conjunction with this string; if <CODE>
string</CODE>
 contains any ctrl-A or ctrl-B characters (ASCII value 1 and 2, respectively), then the string pointed to by <CODE>
arg1</CODE>
 or <CODE>
arg2</CODE>
 will be inserted in that place.</P>
<P>
If the <CODE>
CustomDialogType</CODE>
 is GIT_MULTIPLE_RESPONSE, you must also set up a Response Trigger Table with several trigger parameters. The customTrigger argument should be a pointer to a structure containing these parameters. Which type of structure depends on how many triggers there are:<CODE>
StandardDialog1ResponseTriggerTable</CODE>
, <CODE>
StandardDialog2ResponseTriggerTable</CODE>
, <CODE>
StandardDialog3ResponseTriggerTable</CODE>
, <CODE>
StandardDialog4ResponseTriggerTable</CODE>
. In each case, you will need to fill in fields specifying how many triggers there are and a moniker and response value for each trigger.</P>
<P>
The <CODE>
helpContext</CODE>
 value is used by the help system; this is the &quot;context&quot; name of the page of the geode's help to go to when the user asks for help with this dialog. A null pointer signals that the default help context should be used.</P>
<P>
This routine returns an InteractionCommand value. It will be IC_NULL if
the interaction was terminated by the system (such as in a system
shutdown).</P>
</DIV>
<DIV>
<A NAME="IX_UserStandardDialogOptr()">
 </A>
<H1 CLASS="refHeading">
UserStandardDialogOptr()</H1>
<PRE CLASS="syntax">word	UserStandardDialogOptr(
        optr		helpContext,
        optr		customTriggers,
        optr		arg2,
        optr		arg1,
        optr		string
        CustomDialogBoxFlags		dialogFlags);</PRE>
<P>
<CODE>
UserStandardDialogOptr()</CODE>
 provides the same functionality as <CODE>
UserStandardDialog() </CODE>
except that optrs to strings and string parameters are passed instead of fptrs. This is useful for localized strings in resource blocks.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9f.htm#IX_UserStandardDialog()">UserStandardDialog()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_9e.htm#IX_UserDoDialog()">UserDoDialog()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_UserStandardSound()">
 </A>
<A NAME="IX_StandardSoundType">
 </A>
<A NAME="IX_SST_&ldots;  (StandardSoundType type)">
 </A>
<H1 CLASS="refHeading">
UserStandardSound()</H1>
<PRE CLASS="syntax">word	UserStandardSound(
        StandardSoundType		type,
        ...);</PRE>
<P>
This routine plays a simple sequence of notes. It can be used to play a standard system sound, a single custom tone, or a sequence of tones.</P>
<P>
The routine takes a variable number of arguments. The first argument is a member of the <CODE>
StandardSoundType</CODE>
 enumerated type. This argument specifies what kind of tone or tones will be played. Depending on the <CODE>
StandardSoundType</CODE>
 passed, zero, one, or two additional arguments may be needed. <CODE>
StandardSoundType</CODE>
 contains the following members:</P>
<DL>
<DT>
SST_ERROR</DT><DD>This is the sound played when an &quot;Error&quot; dialog comes up. No further arguments are needed.</DD>
<DT>
SST_WARNING</DT><DD>
This is a general warning sound. No further arguments are needed.</DD>
<DT>
SST_NOTIFY</DT><DD>This is a general notification sound. No further arguments are needed.</DD>
<DT>
SST_NO_INPUT</DT><DD>
This is the sound played when a user's input is not going anywhere (e.g. when he clicks the mouse outside a modal dialog box).</DD>
<DT>
SST_KEY_CLICK</DT><DD>
This is the sound produced when the keyboard is pressed, or when the user clicks on a floating keyboard. No further arguments are required.</DD>
<DT>
SST_CUSTOM_SOUND</DT><DD>
Play a custom sampled sound. This requires one more argument, the memory handle of the sound to be played.</DD>
<DT>
SST_CUSTOM_BUFFER</DT><DD>
Play a custom buffer of instrumental sound. This requires one further argument, a pointer to the memory block containing the sound buffer. Note that the &quot;tempo&quot; value used to play this buffer will be one tick per thirty-second note, probably much faster than you would otherwise expect.</DD>
<DT>
SST_CUSTOM_NOTE</DT><DD>
By passing this argument, you can have a single custom note played. You must provide one further argument, the handle of the note (such as returned by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusicNote()">SoundAllocMusicNote()</A></CODE>
).</DD>
</DL>
<P>The function returns a word-length token value.  This value is useful 
for stopping sounds with the 
<A NAME="#IX_UserStopStandardSound()">UserStopStandardSound()</A> routine.
</DIV>

<DIV>
<A NAME="IX_UserStopStandardSound()">
 </A>
<H1 CLASS="refHeading">
UserStopStandardSound()</H1>
<PRE CLASS="syntax">word	UserStandardSound(
        StandardSoundType		type,
        word				countID);</PRE>
<P>
This routine stops a sound that was started by <A HREF="#IX_UserStandardSound()">UserStandardSound</A>.</P>
<P>
The sound to stop is identified by its type and by the word-length token value returned by <A HREF="#IX_UserStandardSound()">UserStandardSound</A>.</P>

<P>This function will not stop SST_CUSTOM_... sounds.</P>
</DIV>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">UserAllocObjBlock ...</A> 
<!-- to next --> | <A HREF="R_a0.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UtilAsciiToHex32() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
