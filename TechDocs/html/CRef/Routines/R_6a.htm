<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_6a.htm,v 1.3 97/07/25 10:36:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: MakeWWFixed() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxGetVMFile.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MailboxGetVMFile() ...</A> 
<!-- to next --> | <A HREF="R_6b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemAlloc() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_MakeWWFixed()">
 </A>
<H1 CLASS="refHeading">
MakeWWFixed()</H1>
<PRE CLASS="syntax">WWFixed MakeWWFixed(number);</PRE>
<P>
This macro casts a floating-point or integer number to a <CODE>
WWFixed</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	geos.h</P>
</DIV>
<DIV>
<A NAME="IX_malloc()">
 </A>
<H1 CLASS="refHeading">
malloc()</H1>
<PRE CLASS="syntax">void	* malloc(
        size_t		blockSize);				/* # of bytes to allocate*/</PRE>
<P>
The <CODE>
malloc()</CODE>
 family of routines is provided for Standard C compatibility. If a geode needs a small amount of fixed memory, it can call one of the routines. The kernel will allocate a fixed block to satisfy the geode's <CODE>
malloc()</CODE>
 requests; it will allocate memory from this block. When the block is filled, it will allocate another fixed malloc-block. When all the memory in the block is freed, the memory manager will automatically free the block.</P>
<P>
When a geode calls <CODE>
malloc()</CODE>
, a section of memory of the size specified will be allocated out of its malloc-block, and the address of the start of the memory will be returned. The memory will <EM>
not</EM>
 be zero-initialized. If the request cannot be satisfied, <CODE>
malloc</CODE>
 will return a null pointer. The memory is guaranteed not to be moved until it is freed (with <CODE>
<A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>
) or resized (with <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>
). When GEOS shuts down, all fixed blocks are freed, and any memory allocated with <CODE>
malloc()</CODE>
 is lost.</P>
<P>
Using too many fixed blocks degrades the memory manager's performance, slowing the whole system. For this reason, applications should not use <CODE>
malloc</CODE>
-family routines if they can possibly be avoided. They are provided only to simplify porting of existing programs; however, applications should make every effort to use the GEOS memory management and LMem routines instead. If you must use the <CODE>
malloc</CODE>
-family routines, use them sparingly, and free the memory as quickly as possible.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can allocate memory in another geode's malloc-block by calling <CODE>
<A HREF="../../CRef/Routines/R_36.htm#IX_GeoMalloc()">GeoMalloc()</A></CODE>
. However, that block will be freed when the other geode exits.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All memory allocated with <CODE>
malloc()</CODE>
 is freed when GEOS shuts down.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	stdlib.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3.htm#IX_calloc()">calloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_36.htm#IX_GeoMalloc()">GeoMalloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ManufacturerFromFormatID">
 </A>
<H1 CLASS="refHeading">
ManufacturerFromFormatID</H1>
<PRE CLASS="syntax">word	ManufacturerFromFormatID(id);
        ClipboardItemFormatID <EM>id</EM>;</PRE>
<P>
This macro extracts the word-sized manufacturer ID (of type <CODE>
ManufacturerIDs</CODE>
) from a <CODE>
ClipboardInfoFormatID</CODE>
 argument.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxGetVMFile.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MailboxGetVMFile() ...</A> 
<!-- to next --> | <A HREF="R_6b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemAlloc() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
