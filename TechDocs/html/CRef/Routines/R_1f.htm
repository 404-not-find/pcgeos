<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_1f.htm,v 1.2 97/06/25 18:13:28 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ECCheckHugeArray() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">EC() ...</A> 
<!-- to next --> | <A HREF="R_20.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECCheckProcessHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_Huge arrays:checking">
 </A>
<A NAME="IX_ECCheckHugeArray()">
 </A>
<H1 CLASS="refHeading">
ECCheckHugeArray()</H1>
<PRE CLASS="syntax">void	ECCheckHugeArray(
        VMFileHandle		vmFile,
        VMBlockHandle		vmBlock);</PRE>
<P>
This routine checks the validity of the passed Huge Array. If the block passed is not the directory block of a Huge Array, the routine fails.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Libraries:handles, checking">
 </A>
<A NAME="IX_ECCheckLibraryHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckLibraryHandle()</H1>
<PRE CLASS="syntax">void	ECCheckLibraryHandle(
        GeodeHandle gh);</PRE>
<P>
This routine checks that the passed handle references a library. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Local memory:handles, checking">
 </A>
<A NAME="IX_Chunks:checking">
 </A>
<A NAME="IX_ECCheckLMemChunk()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemChunk()</H1>
<PRE CLASS="syntax">void	ECCheckLMemChunk(
        void * chunkPtr);</PRE>
<P>
This routine checks the validity of the chunk pointed to by <CODE>
chunkPtr</CODE>
. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckLMemHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemHandle()</H1>
<PRE CLASS="syntax">void	ECCheckLMemHandle(
        MemHandle mh);</PRE>
<P>
This routine checks that the passed handle is a memory handle and actually references a local memory block. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckLMemHandleNS()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemHandleNS()</H1>
<PRE CLASS="syntax">void	ECCheckLMemHandleNS(
        MemHandle mh);</PRE>
<P>
This routine checks that the passed handle is a local memory handle; unlike <CODE>
<A HREF="../../CRef/Routines/R_1f.htm#IX_ECCheckLMemHandle()">ECCheckLMemHandle()</A></CODE>
, however, it does not check sharing violations (when threads are illegally using non-sharable memory). If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_optr:checking">
 </A>
<A NAME="IX_Objects:address checking">
 </A>
<A NAME="IX_ECCheckLMemObject()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemObject()</H1>
<PRE CLASS="syntax">void	ECCheckLMemObject(
        optr	obj); 		/* Object must be locked down. */</PRE>
<P>
This routine checks the validity of an object to ensure that it is an object stored in an object block. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckLMemObjectHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemObjectHandles()</H1>
<PRE CLASS="syntax">void	ECCheckLMemObjectHandles(
        MemHandle mh,
        ChunkHandle ch);</PRE>
<P>
This routine checks the validity of an object to ensure that it is an object stored in an object block. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckLMemOD()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemOD()</H1>
<PRE CLASS="syntax">void	ECCheckLMemOD(
        optr	o);</PRE>
<P>
This routine checks the validity of the given local-memory-based object. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckLMemODHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckLMemODHandles()</H1>
<PRE CLASS="syntax">void	ECCheckLMemODHandles(
        MemHandle objHan,
        ChunkHandle objCh);</PRE>
<P>
This routine checks the validity of the given local-memory-based object. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Heap:checking memory handles">
 </A>
<A NAME="IX_ECCheckMemHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckMemHandle()</H1>
<PRE CLASS="syntax">void	ECCheckMemHandle(
        MemHandle mh);</PRE>
<P>
This routine checks that the passed handle is a memory handle that references a memory block. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckHandleNS()">
 </A>
<H1 CLASS="refHeading">
ECCheckMemHandleNS()</H1>
<PRE CLASS="syntax">void	ECCheckMemHandleNS(
        MemHandle mh);</PRE>
<P>
This routine checks that the passed handle references a memory block; unlike <CODE>
<A HREF="../../CRef/Routines/R_1f.htm#IX_ECCheckMemHandle()">ECCheckMemHandle()</A></CODE>
, however, it will not check for sharing violations (when a thread illegally accesses a non-sharable block). If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckObject()">
 </A>
<H1 CLASS="refHeading">
ECCheckObject()</H1>
<PRE CLASS="syntax">void	ECCheckObject(
        optr	obj);</PRE>
<P>
This routine checks the validity of the given locked object. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECCheckObjectHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckObjectHandles()</H1>
<PRE CLASS="syntax">void	ECCheckObjectHandles(
        Memhandle mh,
        ChunkHandle ch);</PRE>
<P>
This routine checks the validity of the given locked object. If the assertions fail, a fatal error will occur.</P>
</DIV>
<DIV>
<A NAME="IX_Process object:checking">
 </A>
<A NAME="IX_ECCheckOD()">
 </A>
<H1 CLASS="refHeading">
ECCheckOD()</H1>
<PRE CLASS="syntax">void	ECCheckOD(
        optr	obj);</PRE>
<P>
This routine checks the validity of the given object. Unlike <CODE>
<A HREF="../../CRef/Routines/R_1f.htm#IX_ECCheckLMemObject()">ECCheckLMemObject()</A></CODE>
, however, it allows optrs of Process objects to be specified. If assertions fail, a fatal error will occur.</P>
</DIV>
<DIV>
<A NAME="IX_ECCheckODHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckODHandles()</H1>
<PRE CLASS="syntax">void	ECCheckODHandles(
        MemHandle objHan,
        ChunkHandle objCh);</PRE>
<P>
This routine checks the validity of the given object. Unlike <CODE>
<A HREF="../../CRef/Routines/R_1f.htm#IX_ECCheckLMemObjectHandles()">ECCheckLMemObjectHandles()</A></CODE>
, however, it allows processes to be specified. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">EC() ...</A> 
<!-- to next --> | <A HREF="R_20.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECCheckProcessHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
