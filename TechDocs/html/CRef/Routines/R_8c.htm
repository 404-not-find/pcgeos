<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_8c.htm,v 1.2 97/06/25 18:42:49 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: SoundFreeMusic() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SoundAllocMusic() ...</A> 
<!-- to next --> | <A HREF="R_8d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundPlayToMusicStream() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SoundFreeMusic()">
 </A>
<H1 CLASS="refHeading">
SoundFreeMusic()</H1>
<PRE CLASS="syntax"><CODE>void</CODE> 	SoundFreeMusic(
        MemHandle 		mh);</PRE>
<P>
This routine frees up a music handle. The music must not be playing; call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundStopMusic()">SoundStopMusic()</A></CODE>
 if you are not sure. You may not use the music handle after calling this routine on it.</P>
</DIV>
<DIV>
<A NAME="IX_SoundFreeMusicNote()">
 </A>
<H1 CLASS="refHeading">
SoundFreeMusicNote()</H1>
<PRE CLASS="syntax">void SoundFreeMusicNote(
        MemHandle 		mh);</PRE>
<P>
This routine frees up the passed note handle. The note must not be playing when you call this routine; call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundStopMusicNote()">SoundStopMusicNote()</A></CODE>
 if you are not sure. You should not try to use the note's handle after freeing it.</P>
</DIV>
<DIV>
<A NAME="IX_SoundFreeMusicStream()">
 </A>
<H1 CLASS="refHeading">
SoundFreeMusicStream()</H1>
<PRE CLASS="syntax"><CODE>void</CODE> SoundFreeMusicStream(
        MemHandle 		mh);</PRE>
<P>
This routine frees up the music stream's token. No music must be playing via the stream; call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundStopMusicStream()">SoundStopMusicStream()</A></CODE>
 if you are not sure. Do not try to use the stream after calling this routine on it.</P>
</DIV>
<DIV>
<A NAME="IX_SoundFreeSampleStream()">
 </A>
<H1 CLASS="refHeading">
SoundFreeSampleStream()</H1>
<PRE CLASS="syntax">void 	SoundFreeSampleStream(
        MemHandle 		mh);</PRE>
<P>
This routine frees the passed sampled sound handle. You must not try to use this handle after calling this routine on it.</P>
</DIV>
<DIV>
<A NAME="IX_SoundGetExclusive()">
 </A>
<H1 CLASS="refHeading">
SoundGetExclusive()</H1>
<PRE CLASS="syntax">void	SoundGetExclusive(void);</PRE>
<P>
This routine grabs the exclusive semaphore for the sound library; if another thread has already grabbed the exclusive, this routine will wait until the exclusive is released. Sounds which are playing now will be permitted to finish, but from now on, only the thread calling this routine will be allowed to play new sounds. When done with the sound library exclusive, call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundReleaseExclusive()">SoundReleaseExclusive()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_SoundGetExclusiveNB()">
 </A>
<H1 CLASS="refHeading">
SoundGetExclusiveNB()</H1>
<PRE CLASS="syntax">Boolean	SoundGetExclusiveNB(void);</PRE>
<P>
This routine grabs the exclusive semaphore for the sound library, doing so even if some other thread has already grabbed the exclusive. Sounds which are playing now will be permitted to finish, but from now on, only the thread calling this routine will be allowed to play new sounds. This routine will return <EM>
true</EM>
 if another thread already has exclusive access.</P>
<P>
When done with the sound library exclusive, call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundReleaseExclusive()">SoundReleaseExclusive()</A></CODE>
. </P>
</DIV>
<DIV>
<A NAME="IX_SoundInitMusic()">
 </A>
<H1 CLASS="refHeading">
SoundInitMusic()</H1>
<PRE CLASS="syntax">void SoundInitMusic(
        MemHandle 		mh, 
        byte 		voices);</PRE>
<P>
This routine initializes a pre-defined simple music buffer structure. If the music buffer is stored in a fixed block, you can call <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusic()">SoundAllocMusic()</A></CODE>
 instead. This allows a music buffer stored in a block referenced by a pointer to be playable using <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundPlayMusic()">SoundPlayMusic()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_SoundPlayMusic()">
 </A>
<H1 CLASS="refHeading">
SoundPlayMusic()</H1>
<PRE CLASS="syntax">word	SoundPlayMusic( /* Returns SOUND_ERROR_... value */
        MemHandle 		mh, 
        word		priority,
        word 		tempo, 
        EndOfSongFlags		flags);</PRE>
<P>
This routine plays a buffer of music previously initialized by <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundInitMusic()">SoundInitMusic()</A></CODE>
 or allocated by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusic()">SoundAllocMusic()</A></CODE>
. The priority value will determine whether your sound will play if other sounds are already occupying the voices--pass a value such as SP_STANDARD. The <EM>
tempo</EM>
 value will be used to determine the length of a 1/128th note. If your music buffer contained any notes whose lengths were measured by SSDTT_TEMPO delta type, then you should set this value accordingly. The <EM>
flags</EM>
 argument determines whether the music's handle should be automatically freed when the sound is done playing. You may pass either or both of the flags UNLOCK_ON_EOS or DESTROY_ON_EOS.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	sound.h</P>
</DIV>
<DIV>
<A NAME="IX_SoundPlayMusicNote()">
 </A>
<H1 CLASS="refHeading">
SoundPlayMusicNote()</H1>
<PRE CLASS="syntax">word 	SoundPlayMusicNote( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh,				/* handle of note */
        word 		priority, 
        word		tempo,				
        EndOfSongFlags		flags);			</PRE>
<P>
This routine plays a buffer of music previously allocated by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusicNote()">SoundAllocMusicNote()</A></CODE>
--the return value of that function is passed as <EM>
mh</EM>
. The priority value will determine whether your sound will play if other sounds are already occupying the voices--pass a value such as SP_STANDARD. The <EM>
tempo</EM>
 value will be used to determine the length of a 1/128th note. If your note's delta type is SSDTT_TEMPO, then you should set this value accordingly. The <EM>
flags</EM>
 argument determines whether the notes's handle should be automatically freed when the note is done playing. You may pass either or both of the flags UNLOCK_ON_EOS or DESTROY_ON_EOS.</P>
<P>
This routine returns <EM>
true</EM>
 if the library was unavailable (i.e. if some other thread had grabbed the sound exclusive).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	sound.h</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SoundAllocMusic() ...</A> 
<!-- to next --> | <A HREF="R_8d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundPlayToMusicStream() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
