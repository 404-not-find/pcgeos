<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_83.htm,v 1.5 97/08/21 13:47:37 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: realloc() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_82.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">qsort ...</A> 
<!-- to next --> | <A HREF="R_84.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SerialGetFormat() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_realloc()">
 </A>
<H1 CLASS="refHeading">
realloc()</H1>
<PRE CLASS="syntax">void *	realloc(
        void *		blockPtr,				/* address of memory to resize */
        size_t		newSize);				/* New size of memory in bytes */</PRE>
<P>
The <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 family of routines is provided for Standard C compatibility. If a geode needs a small amount of fixed memory, it can call one of the routines. The kernel will allocate a fixed block to satisfy the geode's <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 requests; it will allocate memory from this block. When the block is filled, it will allocate another fixed malloc-block. When all the memory in the block is freed, the memory manager will automatically free the block.</P>
<P>
If a geode needs to change the size of a section of memory assigned to it by the <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 family of routines, it should use <CODE>
realloc()</CODE>
. <CODE>
realloc()</CODE>
 resizes the piece of memory specified and returns the memory's new base address.</P>
<P>
If the new size is smaller then the previous size, bytes will be cut off from the end. The request is guaranteed to succeed. Furthermore, the memory will not be moved; the address returned will be the same as the address passed.</P>
<P>
If the new size is larger than the previous size, <CODE>
realloc()</CODE>
 may move the data to accommodate the request. If so, it will return the new address. The new memory added will <EM>
not</EM>
 be zero-initialized. If <CODE>
realloc()</CODE>
 cannot fulfill the request, it will return a null pointer, and the memory will not be altered.</P>
<P>
Resizing a stretch of memory down to zero bytes is exactly the same as freeing it with <CODE>
<A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>
. If you pass a null address to <CODE>
realloc()</CODE>
, it will allocate the memory the same way <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 does.</P>
<P>
The memory must be in a malloc-block assigned to the geode calling <CODE>
realloc()</CODE>
. If you want to resize memory in another geode's malloc-block, call <CODE>
<A HREF="../../CRef/Routines/R_36.htm#IX_GeoReAlloc()">GeoReAlloc()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Pass exactly the same address as the one returned to you when you allocated the memory. If you pass a different address, the results are undefined.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3.htm#IX_calloc()">calloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_36.htm#IX_GeoReAlloc()">GeoReAlloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsEraseStack()">
 </A>
<H1 CLASS="refHeading">
RecentContactsEraseStack()</H1>
<PRE CLASS="syntax">BooleanRecentContactsEraseStack(
        RecentContactsType 			rcType);</PRE>
<P>
This function erases all log entries of a certain type from the log. It returns zero if there was no error, non-zero otherwise. Pass one of RC_SENT_CALLS, RC_RECEIVED_CALLS, RC_MISSED_CALLS, RC_SENT_FAXES, RC_RECEIVED_FAXES, RC_SENT_SMS, or RC_RECEIVED_SMS. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsGetCount()">
 </A>
<H1 CLASS="refHeading">
RecentContactsGetCount()</H1>
<PRE CLASS="syntax">word 	RecentContactsGetCount(
        RecentContactsType 			rcType);</PRE>
<P>
This function returns the number of contacts of some type that have been made recently. Pass one of RC_SENT_CALLS, RC_RECEIVED_CALLS, RC_MISSED_CALLS, RC_SENT_FAXES, RC_RECEIVED_FAXES, RC_SENT_SMS, or RC_RECEIVED_SMS. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsGetEntry()">
 </A>
<H1 CLASS="refHeading">
RecentContactsGetEntry()</H1>
<PRE CLASS="syntax">word 	RecentContactsGetEntry(
        RecentContactsType 			rcType, 
        int 			item, 
        LogEntry 			*buffer);</PRE>
<P>
This function retrieves the entry log for a call. The call is identified by its call type and an index number. The call type is one of RC_SENT_CALLS, RC_RECEIVED_CALLS, RC_MISSED_CALLS, RC_SENT_FAXES, RC_RECEIVED_FAXES, RC_SENT_SMS, or RC_RECEIVED_SMS. The index number should be at least zero and less than the number returned by <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_RecentContactsGetCount()">RecentContactsGetCount()</A></CODE>
. The function fills in the passed <CODE>
LogEntry</CODE>
 buffer with the entry's information. If there was an error, the function returns non-zero; otherwise, it returns zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsGetMissedCallsTotalCount()">
 </A>
<H1 CLASS="refHeading">
RecentContactsGetMissedCallsTotalCount()</H1>
<PRE CLASS="syntax">word	RecentContactsResetMissedCallsTotalCount();</PRE>
<P>
This function returns the number of calls missed since the last time <CODE>
RecentContactsGetMissedCallsTotalCount()</CODE>
 was called.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsGetNewCount()">
 </A>
<H1 CLASS="refHeading">
RecentContactsGetNewCount()</H1>
<PRE CLASS="syntax">word RecentContactsGetNewCount(
        RecentContactsType 			rcType);</PRE>
<P>
This function returns the number of contacts logged since the last time <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_RecentContactsResetNewCount()">RecentContactsResetNewCount()</A></CODE>
 was called.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsResetMissedCallsTotalCount()">
 </A>
<H1 CLASS="refHeading">
RecentContactsResetMissedCallsTotalCount()</H1>
<PRE CLASS="syntax">voidRecentContactsResetMissedCallTotalsCount( );</PRE>
<P>
This function resets the number of missed calls as used by the <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_RecentContactsGetMissedCallsTotalCount()">RecentContactsGetMissedCallsTotalCount()</A></CODE>
 function.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RecentContactsResetNewCount()">
 </A>
<H1 CLASS="refHeading">
RecentContactsResetNewCount()</H1>
<PRE CLASS="syntax">voidRecentContactsResetNewCount(
        RecentContactsType 			rcType);</PRE>
<P>
This function resets the number of &quot;new&quot; contacts logged as used by the <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_RecentContactsGetNewCount()">RecentContactsGetNewCount()</A></CODE>
 function.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_RespGetPDAHardwareInfo()">
 </A>
<H1 CLASS="refHeading">
RespGetPDAHardwareInfo()</H1>
<PRE CLASS="syntax">PDAHardwareInfo    RespGetPDAHardwareInfo(void);</PRE>
<P>
This routine gets information about the current PDA hardware, specifically  the type of PDA and whether or not it has a backlight. Use the following bit masks to extract the desired information from the <CODE>PDAHardwareInfo</CODE> bitfield:</P>

<PRE CLASS="syntax">
typedef ByteFlags PDAHardwareInfo;
/* 5 bits unused */
#define PDAHI_BACKLIGHT_AVAILABLE       (0x04)
#define PDAHI_PDA_TYPE                  (0x02 | 0x01)    /* PDAType */
</PRE>

<P>
The <CODE>PDAType</CODE> is enumerated as:
</P>

<PRE CLASS="syntax">
typedef ByteEnum PDAType;
#define PDAT_PC_EMULATOR        0x0
#define PDAT_N9000              0x1
#define PDAT_N9000i             0x2
</PRE>

<P>
This routine is only available on builds 4 or newer of the Nokia 9000i Communicator (see <A HREF = "../../Nokia9000/Versions/Update_1.htm">Versions</A> for more information).
</P>

<P CLASS="refField"><STRONG>
Include:</STRONG>   
respondr.goh
 </P>
</DIV>

<DIV>
<A NAME="IX_SerialClose()">
 </A>
<H1 CLASS="refHeading">
SerialClose()</H1>
<PRE CLASS="syntax">StreamError SerialClose(
        GeodeHandle 		driver,
        SerialUnit 		unit,
        Boolean 		linger);</PRE>
<P>
Close the stream to a serial port.</P>
</DIV>
<DIV>
<A NAME="IX_SerialCloseWithoutReset()">
 </A>
<H1 CLASS="refHeading">
SerialCloseWithoutReset()</H1>
<PRE CLASS="syntax">StreamError SerialClose(
        GeodeHandle 		driver,
        SerialUnit 		unit,
        Boolean 		linger);</PRE>
<P>
Close the stream to a serial port, without actually resetting the port.</P>
</DIV>
<DIV>
<A NAME="IX_SerialFlush()">
 </A>
<H1 CLASS="refHeading">
SerialFlush()</H1>
<PRE CLASS="syntax">StreamError SerialFlush(
        GeodeHandle 		driver,
        SerialUnit		unit,
        StreamRoles 		roles);</PRE>
<P>
Flush all data pending in a serial port's input or output buffer (depending on the value of <CODE>
roles</CODE>
).</P>
</DIV>
<DIV>
<A NAME="IX_SerialGetError()">
 </A>
<H1 CLASS="refHeading">
SerialGetError()</H1>
<PRE CLASS="syntax">StreamError	 	SerialGetError (
        Handle 		driver,
        SerialUnit		unit,
        StreamRoles 		roles,
        SerialError *		errorCode);</PRE>
<P>
This routine returns error information pertaining to the last call to a serial driver. The <CODE>
SerialError</CODE>
 codes returned may contain serial-driver-specific error codes not defined in the <CODE>
SerialError</CODE>
 enumerated type.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_82.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">qsort ...</A> 
<!-- to next --> | <A HREF="R_84.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SerialGetFormat() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
