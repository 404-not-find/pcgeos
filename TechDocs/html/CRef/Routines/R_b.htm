<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_b.htm,v 1.2 97/06/25 18:48:05 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ClipboardQueryItem() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ClipboardClearQuickTransferNotification() ...</A> 
<!-- to next --> | <A HREF="R_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ClipboardSetQuickTransferFeedback() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ClipboardQueryItem()">
 </A>
	<A NAME="IX_ClipboardQueryArgs">
 </A>
<A NAME="IX_CQA_&ldots;">
 </A>
<H1 CLASS="refHeading">
ClipboardQueryItem()</H1>
<PRE CLASS="syntax">void	ClipboardQueryItem(
        ClipboardItemFlags 			flags,
        ClipboardQueryArgs *			retValues);</PRE>
<P>
This routine locks the transfer item for the caller's exclusive access and returns information about the current transfer item. You should call this routine when beginning any paste or clipboard query operation. For operations in which you will change the clipboard's contents, you should instead use the routine <CODE>
<A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardRegisterItem()">ClipboardRegisterItem()</A></CODE>
.</P>
<P>
Pass the following values:</P>
<DL>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
ClipboardItemFlags</CODE>
 indicating the transfer item you want to query. Use CIF_QUICK to get information on the quick transfer item, and pass zero (or TIF_NORMAL) to get information on the normal transfer item.</DD>
<DT>
<CODE>
retValues</CODE>
A pointer to an empty <CODE>
ClipboardQueryArgs</CODE>
 structure into which return information about the transfer item will be passed. This structure is defined as follows:</DT>
<PRE>typedef struct {
	word			CQA_numFormats;
	optr			CQA_owner;
	TransferBlockID			CQA_header;
} ClipboardQueryArgs;</PRE>
</DL>
<P>
The <CODE>
CQA_header</CODE>
 field of <CODE>
ClipboardQueryArgs</CODE>
 is used as a pass value to several other clipboard routines. It contains the VM file handle of the transfer VM file and the VM block handle of the transfer item's header block. The <CODE>
CQA_owner</CODE>
 field is the optr of the object that originated the transfer item. The <CODE>
CQA_numFormats</CODE>
 field specifies the total number of formats available for this transfer item. To see if a particular format is supported by the transfer item, call the routine <CODE>
<A HREF="../../CRef/Routines/R_c.htm#IX_ClipboardTestItemFormat()">ClipboardTestItemFormat()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	You must call <CODE>
<A HREF="../../CRef/Routines/R_a.htm#IX_ClipboardDoneWithItem()">ClipboardDoneWithItem()</A></CODE>
 when you are done accessing the transfer item. This routine relinquishes your exclusive access to the transfer VM file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardRequestItemFormat()">ClipboardRequestItemFormat()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_a.htm#IX_ClipboardDoneWithItem()">ClipboardDoneWithItem()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ClipboardRegisterItem()">
 </A>
<H1 CLASS="refHeading">
ClipboardRegisterItem()</H1>
<PRE CLASS="syntax">Boolean	ClipboardRegisterItem(
        TransferBlockID header,
        ClipboardItemFlags flags);</PRE>
<P>
This routine completes a change to the transfer item. You should use this routine whenever copying or cutting something into the clipboard or whenever attaching something as the quick-transfer item.</P>
<P>
This routine puts the item specified by <CODE>
header</CODE>
 into the transfer VM file. It frees any transfer item that may already be in the file. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
header</CODE>
</DT><DD>Header information for the item, consisting of the transfer VM file handle and the VM block handle of the block containing the new transfer item. Create the <CODE>
TransferBlockID</CODE>
 structure using the macro <CODE>
<A HREF="../../CRef/Routines/R_3.htm#IX_BlockIDFromFileAndBlock() macro">BlockIDFromFileAndBlock()</A></CODE>
.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
ClipboardItemFlags</CODE>
 indicating whether you're registering a clipboard item or a quick-transfer item. The flag CIF_QUICK indicates the item is a quick-transfer item; zero (or TIF_NORMAL) indicates the item is a normal clipboard item.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardRequestItemFormat()">ClipboardRequestItemFormat()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ClipboardRemoveFromNotificationList()">
 </A>
<H1 CLASS="refHeading">
ClipboardRemoveFromNotificationList()</H1>
<PRE CLASS="syntax">Boolean	ClipboardRemoveFromNotificationList(
        optr	notificationOD);</PRE>
<P>
This routine removes an object or Process from the clipboard's change notification list. It is typically called when the object or Process is being detached or destroyed. Pass it the same optr that was added to the notification list with <CODE>
ClipboardAddToNotificationList</CODE>
().</P>
<P>
This routine returns an error flag: The flag will be <CODE>
true</CODE>
 if the object could not be found in the notification list, <CODE>
false</CODE>
 if the object was successfully removed from the list.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9.htm#IX_ClipboardAddToNotificationList()">ClipboardAddToNotificationList()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ClipboardRequestItemFormat()">
 </A>
	<A NAME="IX_ClipboardRequestArgs">
 </A>
<A NAME="IX_CRA_&ldots;">
 </A>
<H1 CLASS="refHeading">
ClipboardRequestItemFormat()</H1>
<PRE CLASS="syntax">void	ClipboardRequestItemFormat(
        ClipboardItemFormatID 			format,
        TransferBlockID 			header,
        ClipboardRequestArgs *			retValue);</PRE>
<P>
This routine returns specific information about a particular transfer item. Because some of the passed information must be retrieved with <CODE>
<A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardQueryItem()">ClipboardQueryItem()</A></CODE>
, you must call <CODE>
<A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardQueryItem()">ClipboardQueryItem()</A></CODE>
 before calling this routine.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
format</CODE>
</DT><DD>The manufacturer ID and format type of the new transfer item being put into the transfer VM file. Create the <CODE>
ClipboardItemFormatID</CODE>
 value with the macro <CODE>
<A HREF="../../CRef/Routines/R_2f.htm#IX_FormatIDFromManufacturerAndType()">FormatIDFromManufacturerAndType()</A></CODE>
.</DD>
<DT>
<CODE>
header</CODE>
</DT><DD>Header information for the item, consisting of the transfer VM file handle and the VM block handle of the block containing the new transfer item. Create the <CODE>
TransferBlockID</CODE>
 structure using the macro <CODE>
<A HREF="../../CRef/Routines/R_3.htm#IX_BlockIDFromFileAndBlock() macro">BlockIDFromFileAndBlock()</A></CODE>
 using returned information from <CODE>
<A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardQueryItem()">ClipboardQueryItem()</A></CODE>
.</DD>
<DT>
<CODE>
retValue</CODE>
A pointer to an empty <CODE>
ClipboardRequestArgs</CODE>
 structure that will be filled by the routine. This structure is defined as follows:</DT>
<PRE>typedef struct {
	VMFileHandle		CRA_file;
	VMChain		CRA_data;
	word		CRA_extra1;
	word		CRA_extra2;
} ClipboardRequestArgs;</PRE>
</DL>
<P>
Upon return, the <CODE>
CRA_file</CODE>
 field will contain the transfer VM file's VM file handle and the <CODE>
CRA_data</CODE>
 field will contain the VM block handle of the transfer item's header block. If there is no transfer item, <CODE>
CRA_data</CODE>
 will be zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardRegisterItem()">ClipboardRegisterItem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardQueryItem()">ClipboardQueryItem()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ClipboardClearQuickTransferNotification() ...</A> 
<!-- to next --> | <A HREF="R_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ClipboardSetQuickTransferFeedback() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
