<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_98.htm,v 1.3 97/08/30 11:41:55 eballot Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ThreadPSem() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_97.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadGetError() ...</A> 
<!-- to next --> | <A HREF="R_99.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TimerSleep() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ThreadPSem()">
 </A>
<H1 CLASS="refHeading">
ThreadPSem()</H1>
<PRE CLASS="syntax">SemaphoreError ThreadPSem(
        SemaphoreHandle sem);				/* semaphore to grab */</PRE>
<P>
This routine attempts to grab the passed semaphore via a &quot;P&quot; operation. If the semaphore has already been grabbed, the thread will block until the semaphore becomes available, even if it was grabbed by the same thread.</P>
<P>
<CODE>
ThreadPSem()</CODE>
 returns an error code of type <CODE>
SemaphoreError</CODE>
. The error code is intended to indicate abnormal return by the previous thread; if the semaphore never becomes available, the thread will block indefinitely and the routine will not return.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	When the thread no longer needs the semaphore, it should release it with <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_ThreadVSem()">ThreadVSem()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine provides no deadlock protection. If threads will grab multiple common semaphores, they should always grab/release them in the same order, minimizing the chances for deadlock.</P>
<P>
A thread may not try to grab a particular semaphore twice without releasing it in between grabs. The thread will block on itself and will deadlock. If a thread may need to grab the semaphore twice in a row, it should use a thread lock instead (see <CODE>
<A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocThreadLock()">ThreadAllocThreadLock()</A></CODE>
 for more information).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocSem()">ThreadAllocSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadVSem()">ThreadVSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_96.htm#IX_ThreadFreeSem()">ThreadFreeSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPTimedSem()">ThreadPTimedSem()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ThreadPTimedSem()">
 </A>
<H1 CLASS="refHeading">
ThreadPTimedSem()</H1>
<PRE CLASS="syntax">SemaphoreError ThreadPTimedSem(
        SemaphoreHandle		sem,				/* semaphore to grab */
        word		timeout);				/* ticks before timeout */</PRE>
<P>
This routine attempts to grab the passed semaphore via a &quot;P&quot; operation. If the semaphore has already been grabbed, the thread will block for at most the number of ticks specified in <CODE>
timeout</CODE>
.</P>
<P>
Often <CODE>
timeout</CODE>
 is passed as zero to indicate that if the semaphore isn't available right now, the thread will go on with some other action.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	When the thread no longer needs the semaphore, it should release it with <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_ThreadVSem()">ThreadVSem()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine provides no deadlock protection. If threads will grab multiple common semaphores, they should always grab/release them in the same order, minimizing the chances for deadlock.</P>
<P>
A thread may not try to grab a particular semaphore twice without releasing it in between grabs. The thread will block on itself and will deadlock. If a thread may need to grab the semaphore twice in a row, it should use a thread lock instead, though there is no timeout equivalent for thread locks (see <CODE>
<A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocThreadLock()">ThreadAllocThreadLock()</A></CODE>
 for more information).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocSem()">ThreadAllocSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPSem()">ThreadPSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadVSem()">ThreadVSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_96.htm#IX_ThreadFreeSem()">ThreadFreeSem()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ThreadReleaseThreadLock()">
 </A>
<H1 CLASS="refHeading">
ThreadReleaseThreadLock()</H1>
<PRE CLASS="syntax">void	ThreadReleaseThreadLock(
        ThreadLockHandle sem);				/* threadlock to release */</PRE>
<P>
This routine releases the specified thread lock previously grabbed with <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGrabThreadLock()">ThreadGrabThreadLock()</A></CODE>
. Pass the handle of the thread lock as returned by <CODE>
<A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocThreadLock()">ThreadAllocThreadLock()</A></CODE>
.</P>
<P>
Do not try to release a thread lock that has not previously been grabbed. The results are unpredictable.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocThreadLock()">ThreadAllocThreadLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGrabThreadLock()">ThreadGrabThreadLock()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ThreadVSem()">
 </A>
<H1 CLASS="refHeading">
ThreadVSem()</H1>
<PRE CLASS="syntax">void	ThreadVSem(
        SemaphoreHandle sem);				/* semaphore to release */</PRE>
<P>
This routine releases a semaphore that was grabbed with <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPSem()">ThreadPSem()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPTimedSem()">ThreadPTimedSem()</A></CODE>
. Pass the handle of the semaphore as returned by <CODE>
<A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocSem()">ThreadAllocSem()</A></CODE>
.</P>
<P>
Do not try to release a semaphore that has not previously been grabbed with one of the above routines. The results are unpredictable.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocSem()">ThreadAllocSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPSem()">ThreadPSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_96.htm#IX_ThreadFreeSem()">ThreadFreeSem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadPTimedSem()">ThreadPTimedSem()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_TimerGetCount()">
 </A>
<H1 CLASS="refHeading">
TimerGetCount()</H1>
<PRE CLASS="syntax">dword	TimerGetCount();</PRE>
<P>
This routine returns the value of the system counter. The returned value is the number of ticks since GEOS started.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
timer.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TimerGetDateAndTime()">
 </A>
<H1 CLASS="refHeading">
TimerGetDateAndTime()</H1>
<PRE CLASS="syntax">void	TimerGetDateAndTime(
        TimerDateAndTime * dateAndTime);						/* buffer for returned values */</PRE>
<P>
This routine returns the current time and date. Pass it a pointer to an empty <CODE>
TimerDateAndTime</CODE>
 structure to be filled in by the routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
timedate.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TimerGetFileDateTime()">
 </A>
<H1 CLASS="refHeading">
TimerGetFileDateTime()</H1>
<PRE CLASS="syntax">TimerFileDateTime TimerGetFileDateTime();</PRE>
<P>
This routine returns the current time and date in a structure equivalent to a <CODE>
FileDateAndTime</CODE>
. As such, it is useful for constructing time stamps for files.</P>
</DIV>
<DIV>
<A NAME="IX_TimerSetDateAndTime()">
 </A>
<H1 CLASS="refHeading">
TimerSetDateAndTime()</H1>
<PRE CLASS="syntax">void	TimerSetDateAndTime(
        word			flags,					/* which item to set */
        const TimerDateAndTime			* dateAndTime);					/* new values */</PRE>
<P>
This routine sets the current date and/or time of the system. Pass it the following:</P>
<DL>
<DT>
<CODE>
flags</CODE>
</DT><DD>A word of flags. Pass TIME_SET_DATE to set the day, month, and year; pass TIME_SET_TIME to set the hour, minute, and second. Pass both to set both.</DD>
<DT>
<CODE>
dateAndTime</DT><DD>
</CODE>
A pointer to a <CODE>
TimerDateAndTime</CODE>
 structure containing the information to be set.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
timedate.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_97.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadGetError() ...</A> 
<!-- to next --> | <A HREF="R_99.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TimerSleep() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
