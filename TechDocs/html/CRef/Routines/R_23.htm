<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_23.htm,v 1.2 97/06/25 18:14:54 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ElementArrayRemoveReference() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_22.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ElementArrayDelete() ...</A> 
<!-- to next --> | <A HREF="R_24.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FatalError() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ElementArrayRemoveReference()">
 </A>
<H1 CLASS="refHeading">
ElementArrayRemoveReference()</H1>
<PRE CLASS="syntax">void	ElementArrayRemoveReference(
        optr		arr,				/* optr of element array */
        word		token,				/* Index of element to 
						 * unreference */</PRE>
<PRE CLASS="syntax">        dword		callbackData,				/* Passed to callback routine */
        void _pascal (*callback)		(void *element, dword valueForCallback));
/* Routine is called if element is actually removed */</PRE>
<P>
This routine decrements the reference count of the specified element. If the reference count drops to zero, the element will be removed. If an element is to be removed, <CODE>
ElementArrayRemoveReference()</CODE>
 calls the callback routine on that element. The callback routine should perform any cleanup necessary; it is passed a pointer to the element and the <CODE>
callbackData</CODE>
 argument. If you pass a null function pointer, no callback routine will be called.</P>
<P>
Note that when an element is removed, it is actually resized down to zero size and added to a list of free elements. That way the index numbers of later elements are preserved.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_22.htm#IX_ElementArrayDelete()">ElementArrayDelete()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayRemoveReferenceHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayRemoveReferenceHandles()</H1>
<PRE CLASS="syntax">void	ElementArrayRemoveReferenceHandles(
        MemHandle		mh,			/* Handle of LMem heap */
        ChunkHandle		ch,			/* Chunk handle of element array */
        word		token,			/* Index of element to unreference */
        dword		callbackData,				/* Passed to callback routine */
        void _pascal (*callback)		(void *element, dword valueForCallback));
/* Routine is called if element is actually removed */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayRemoveReference()">ElementArrayRemoveReference()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayTokenToUsedIndex()">
 </A>
<H1 CLASS="refHeading">
ElementArrayTokenToUsedIndex()</H1>
<PRE CLASS="syntax">word	ElementArrayTokenToUsedIndex(
        optr	arr,	/* Handle of element array */
        word	token,	/* Index of element to unreference */
        dword	callbackData,	/* Data passed to callback routine */
        Boolean 	_pascal (*callback)	/* Return true to count this element */
        	    (void *element, dword cbData));</PRE>
<P>
This routine is passed the token of an element array. It translates the token into an index from some non-standard indexing scheme. The indexing scheme can either number the elements from zero, counting only those elements in use (i.e. those with a reference count greater than zero); or it can use a more restrictive scheme. If a callback routine is passed, the callback routine will be called for every used element; it should be declared _pascal and return <EM>
true</EM>
 if the element should be counted. If a null callback pointer is passed, every used element will be counted.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayTokenToUsedIndexHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayTokenToUsedIndexHandles()</H1>
<PRE CLASS="syntax">word	ElementArrayTokenToUsedIndexHandles(
        MemHandle 		mh,		/* Handle of LMem heap */
        ChunkHandle 		ch,		/* Chunk handle of element array */
        word		token,		/* Index of element to unreference */
        dword		callbackData, /* Data passed to the
						 * callback routine */</PRE>
<PRE CLASS="syntax">        Boolean 	_pascal (*callback)	/* Return true to count this element */
        		(void *element, dword cbData));</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayTokenToUsedIndex()">ElementArrayTokenToUsedIndex()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayUsedIndexToToken()">
 </A>
<H1 CLASS="refHeading">
ElementArrayUsedIndexToToken()</H1>
<PRE CLASS="syntax">word	ElementArrayUsedIndexToToken(
        optr	arr,		/* optr to element array */
        word	index,		/* Find token of element with this index */
        dword	callbackData,		/* This is passed to the callback routine */
        Boolean _pascal (*callback)			/* Return true to count this element */
        		(void *element, dword cbData));</PRE>
<P>
This routine takes an index into an element array from some non-standard indexing scheme. The routine finds the element specified and returns the element's token. The indexing scheme can either number the elements from zero, counting only those elements in use (i.e. those with a reference count greater than zero); or it can use a more restrictive scheme. If a callback routine is passed, the callback routine will be called for every used element; it should should be declared _pascal return <EM>
true</EM>
 if the element should be counted. If a null callback pointer is passed, every used element will be counted.</P>
<P>
If no matching element is found, <CODE>
ElementArrayUsedIndexToToken()</CODE>
 returns CA_NULL_ELEMENT.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayUsedIndexToTokenHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayUsedIndexToTokenHandles()</H1>
<PRE CLASS="syntax">word	ElementArrayUsedIndexToTokenHandles(
        MemHandle 		mh,		/* Handle of LMem heap's block */
        ChunkHandle 		ch,		/* Handle of element array */
        word		index,		/* Find token of element with this index */
        dword		callbackData, /* Data passed to the
	 						  * callback routine */</PRE>
<PRE CLASS="syntax">        Boolean 	_pascal (*callback)	/* Return true to count this element */
        	    (void *element, dword cbData));</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayUsedIndexToToken()">ElementArrayUsedIndexToToken()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_22.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ElementArrayDelete() ...</A> 
<!-- to next --> | <A HREF="R_24.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FatalError() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
