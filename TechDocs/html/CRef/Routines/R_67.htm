<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_67.htm,v 1.2 97/06/25 18:35:20 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: LocalCustomParseDateTime() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_66.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LocalAsciiToFixed() ...</A> 
<!-- to next --> | <A HREF="R_68.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalGeosToCodePage() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LocalCustomParseDateTime()">
 </A>
<H1 CLASS="refHeading">
LocalCustomParseDateTime()</H1>
<PRE CLASS="syntax">word	LocalCustomParseDateTime(
        const char *		str,
        DateTimeFormat		format,
        TimerDateAndTime *		dateTime);</PRE>
<P>
This routine parses a date and time string by comparing it with the passed <CODE>
DateTimeFormat</CODE>
. It fills in the fields of the <CODE>
TimerDateAndTime</CODE>
 structure. Any fields which are not specified in the format string will be filled with -1.</P>
<P>
If the string parses correctly, <CODE>
LocalCustomParseDateTime()</CODE>
 returns -1. Otherwise it reutrns the offset to the start of the text which did not parse correctly.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDistanceFromAscii()">
 </A>
<A NAME="IX_Measurement:LocalDistanceFromAscii()">
 </A>
<H1 CLASS="refHeading">
LocalDistanceFromAscii()</H1>
<PRE CLASS="syntax">WWFixedAsDword 	LocalDistanceFromAscii( 
        const char *		buffer,
        DistanceUnit 		distanceUnits,
        MeasurementTypes		measurementType);</PRE>
<P>
This routine takes a function like &quot;72 pt&quot; and returns a number representing the distance. The returned answer represents the measure in points, inches, centimeters, or some other measure as specified by the passed unit.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDistanceToAscii()">
 </A>
<A NAME="IX_Measurement:LocalDistanceToAscii()">
 </A>
<H1 CLASS="refHeading">
LocalDistanceToAscii()</H1>
<PRE CLASS="syntax">word	LocalDistanceToAscii( /* Length of string, including NULL */
        char *		buffer,			/*Buffer to save formatted text in */
        word 		value,
        DistanceUnit 		distanceUnits,
        MeasurementType 		measurementType);</PRE>
<P>
This routine takes a distance and a set of units and returns a string containing a properly formatted distance.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDosToGeos()">
 </A>
<H1 CLASS="refHeading">
LocalDosToGeos()</H1>
<PRE CLASS="syntax">Boolean	LocalDosToGeos(
        char *	str,
        word	strSize,
        word	defaultChar);</PRE>
<P>
Convert a DOS string to GEOS text. Any characters for which there is no GEOS equivalent will be replaced by the passed default character.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDosToGeosChar()">
 </A>
<H1 CLASS="refHeading">
LocalDosToGeosChar()</H1>
<PRE CLASS="syntax">word	LocalDosToGeosChar(
        word	ch,
        word	defaultChar);</PRE>
<P>
Convert a DOS character to GEOS text. Any characters for which there is no GEOS equivalent will be replaced by the passed default character.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDowncaseChar()">
 </A>
<H1 CLASS="refHeading">
LocalDowncaseChar()</H1>
<PRE CLASS="syntax">word	LocalDowncaseChar(
        word	ch);</PRE>
<P>
Return the lower case equivalent, if any, of the passed character.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalDowncaseString()">
 </A>
<H1 CLASS="refHeading">
LocalDowncaseString()</H1>
<PRE CLASS="syntax">void	LocalDowncaseString(
        char *	str,
        word	size);		/* Size of string, in bytes */</PRE>
<P>
Convert the passed string to its all lower case equivalent.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalFixedToAscii()">
 </A>
<H1 CLASS="refHeading">
LocalFixedToAscii()</H1>
<PRE CLASS="syntax">void	LocalFixedToAscii(
        char *	buffer,
        WWFixedAsDWord value,
        word	fracDigits);</PRE>
<P>
This routine returns the ASCII expression of a fixed point number.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalFormatDateTime()">
 </A>
<H1 CLASS="refHeading">
LocalFormatDateTime()</H1>
<PRE CLASS="syntax">word	LocalFormatDateTime( /* Length of returned string */
        char *			str,
        DateTimeFormat 			format,
        const TimerDateAndTime *	dateTime);</PRE>
<P>
This routine returns the string (e.g. &quot;9:37&quot;) corresponding to the passed DateAndTime.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalFormatFileDateTime()">
 </A>
<H1 CLASS="refHeading">
LocalFormatFileDateTime()</H1>
<PRE CLASS="syntax">word 	LocalFormatFileDateTime(
        char 			*str, 
        DateTimeFormat 			format,
        const FileDateAndTime 			*dateTime);</PRE>
<P>
This utility routine provides a simple way to present a <CODE>
FileDateAndTime</CODE>
 structure such as used with file-related operations.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef struct {
            byte        numberFormatFlags; /* NumberFormatFlags value */
            byte        decimalDigits;
            wchar       thousandsSeparator;
            wchar       decimalSeparator;
            wchar       listSeparator;
        } LocalNumericFormat;</PRE>
<P>
The first byte is a <CODE>
NumberFormatFlags</CODE>
 field specifying whether or not to use a leading zero. The second byte is the number of digits to show after the decimal point. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_66.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LocalAsciiToFixed() ...</A> 
<!-- to next --> | <A HREF="R_68.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalGeosToCodePage() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
