<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_80.htm,v 1.2 97/06/25 18:40:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ParallelClose() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjVarScanData() ...</A> 
<!-- to next --> | <A HREF="R_81.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">PCCOMABORT() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ParallelClose()">
 </A>
<H1 CLASS="refHeading">
ParallelClose()</H1>
<PRE CLASS="syntax">StreamError ParallelClose(
        GeodeHandle 		driver,
        ParallelUnit 		unit,
        Boolean 		linger);</PRE>
<P>
Close the stream to a parallel port.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
streamC.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ParallelGetError()">
 </A>
<H1 CLASS="refHeading">
ParallelGetError()</H1>
<PRE CLASS="syntax">StreamError	 	ParallelGetError (
        Handle 		driver,
        ParallelUnit		unit,
        StreamRoles 		roles,
        ParallelError *		errorCode);</PRE>
<P>
This routine returns any parallel-driver-specific error codes set by the last call to the parallel-driver.</P>
</DIV>
<DIV>
<A NAME="IX_ParallelOpen()">
 </A>
<H1 CLASS="refHeading">
ParallelOpen()</H1>
<PRE CLASS="syntax">StreamError ParallelOpen(
        GeodeHandle 		driver,
        ParallelUnit 		unit,
        StreamOpenFlags 		flags,
        word		outBuffSize,
        word 		timeout);</PRE>
<P>
This routine opens a stream to the specified parallel port. It is passed the following arguments:</P>
<DL>
<DT>
<CODE>
driver</CODE>
</DT><DD>The <CODE>
GeodeToken</CODE>
 of the parallel driver.</DD>
<DT>
<CODE>
unit</CODE>
</DT><DD>The parallel port to open.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>This specifies whether the call should fail if the port is busy, or wait for a time to see if it will become free.</DD>
<DT>
<CODE>
outBuffSize</CODE>
</DT><DD>The size of the stream buffer used for output to the parallel port.</DD>
<DT>
<CODE>
timeout</CODE>
</DT><DD>The number of clock ticks to wait for the port to become free. (This argument is ignored if <CODE>
flags</CODE>
 is not STREAM_OPEN_TIMEOUT.)</DD>
</DL>
<P>
If the routine is successful, it returns zero. If it is unsuccessful, it returns a member of the <CODE>
StreamError</CODE>
 enumerated type.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
streamC.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ParallelSetError()">
 </A>
<H1 CLASS="refHeading">
ParallelSetError()</H1>
<PRE CLASS="syntax">StreamError ParallelSetError(
        Handle 		driver,
        ParallelUnit 		unit,
        StreamRoles		roles,
        ParallelError *		errorCode);</PRE>
<P>
This routine sets the device-specific error code for the specified parallel port.</P>
</DIV>
<DIV>
<A NAME="IX_ParallelWrite()">
 </A>
<H1 CLASS="refHeading">
ParallelWrite()</H1>
<PRE CLASS="syntax">StreamError ParallelWrite(
        GeodeHandle 		driver,
        ParallelUnit 		unit,
        StreamBlocker 		blocker,
        word 		buffSize,
        const byte *		buffer,
        word *		numBytesWritten);</PRE>
<P>
Write data to a parallel port.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
streamC.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ParallelWriteByte()">
 </A>
<H1 CLASS="refHeading">
ParallelWriteByte()</H1>
<PRE CLASS="syntax">StreamError ParallelWrite(
        GeodeHandle 		driver,
        ParallelUnit 		unit,
        StreamBlocker 		blocker,
        word 		buffSize,
        byte		dataByte);</PRE>
<P>
Write one byte of data to a parallel port.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
streamC.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ParserParseString()">
 </A>
<H1 CLASS="refHeading">
ParserParseString()</H1>
<PRE CLASS="syntax">ParserScannerEvaluatorError ParserParseString(
        char		*textBuffer,
        byte		*tokenBuffer,
        CParserStruct		*parserParams,
        CParserReturnStruct		*retVal);</PRE>
<P>
Parse a string into a sequence of tokens.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
parse.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ParserEvalExpression()">
 </A>
<H1 CLASS="refHeading">
ParserEvalExpression()</H1>
<PRE CLASS="syntax">ParserScannerEvaluatorError ParserEvalExpression(
        byte		*scratchBuffer,
        byte		*resultBuffer,
        word		bufSize,
        CEvalStruct		*evalParams);</PRE>
<P>
Evaluate a parsed expression.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
parse.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ParserFormatExpression()">
 </A>
<H1 CLASS="refHeading">
ParserFormatExpression()</H1>
<PRE CLASS="syntax">ParserScannerEvaluatorError ParserFormatExpression(
        byte		*tokenBuffer,
        char		*textBuffer,
        CFormatStruct		*formatParams);</PRE>
<P>
Format an expression from parsed data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
parse.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_PCB()">
 </A>
<H1 CLASS="refHeading">
PCB()</H1>
<PRE CLASS="syntax">#define PCB(return_type, pointer_name, args) \
        return_type _pascal (*pointer_name) args</PRE>
<P>
This macro is useful for declaring pointers to functions that use the pascal calling conventions. For example, to declare a pointer to a function which is passed two strings and returns an integer, one could write</P>
<PRE>PCB(int, func_ptr, (const char *, const char *));</PRE>
<P>
which would be expanded to</P>
<PRE>int _pascal (*func_ptr) (const char *, const char *);</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_4.htm#IX_CCB() macro">CCB()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjVarScanData() ...</A> 
<!-- to next --> | <A HREF="R_81.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">PCCOMABORT() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
