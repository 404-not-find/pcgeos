<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_5b.htm,v 1.5 97/08/21 13:47:33 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: InitFileEnumStringSection() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ImpexExportToMetafile() ...</A> 
<!-- to next --> | <A HREF="R_5c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileReadStringBlock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_InitFileEnumStringSection()">
 </A>
<H1 CLASS="refHeading">
InitFileEnumStringSection()</H1>
<PRE CLASS="syntax">Boolean	InitFileEnumStringSection(
        const char *		category,
        const char *		key,
        InitFileReadFlags		flags,
        Boolean _pascal (*callback)		(const char *				stringSection,
        		 word 				sectionNum,
        		 void *				enumData),
        void *		enumdata);</PRE>
<P>
This routine enumerates a particular blob, allowing a callback routine to process each of the string sections in it. The routine will stop processing either after the last string section or when the callback routine returns <CODE>
true</CODE>
.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be enumerated.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
InitFileReadFlags</CODE>
 indicating the method of character conversion upon reading (upcase all, downcase all, do not change).</DD>
<DT>
<CODE>
callback</CODE>
</DT><DD>A pointer to a Boolean callback routine. The callback routine is described below.</DD>
<DT>
<EM>
enumData</EM>
</DT><DD>This pointer is passed unchanged to the callback routine. <CODE>
InitFileEnumStringSection()</CODE>
 does not use it.</DD>
</DL>
<P>
This routine returns a Boolean value. It returns <CODE>
true</CODE>
 if the callback routine halted the enumeration by returning <EM>
true</EM>
; otherwise, it returns <EM>
false</EM>
.</P>
<P CLASS="refField"><STRONG>
<STRONG>
Callback Routine:</STRONG></STRONG>
 </P>
<P>
The callback routine may do anything it wants with the string section it receives. It must be declared _pascal. It must return a Boolean value: If it returns <CODE>
true</CODE>
, <CODE>
InitFileEnumStringSection()</CODE>
 will stop processing the blob. If it returns <CODE>
false</CODE>
, processing will continue to the next string section, if any. The callback will receive the following parameters:</P>
<DL>
<DT>
<CODE>
stringSection</DT><DD>
</CODE>
A pointer to the null-terminated string section to be processed.</DD>
<DT>
<CODE>
sectionNum</CODE>
</DT><DD>The zero-based number of the string section currently being processed.</DD>
<DT>
<CODE>
enumData</CODE>
</DT><DD>A pointer passed through from the caller of <CODE>
InitFileEnumStringSection()</CODE>
.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileGetTimeLastModified()">
 </A>
<H1 CLASS="refHeading">
InitFileGetTimeLastModified()</H1>
<PRE CLASS="syntax">dword	InitFileGetTimeLastModified(void);</PRE>
<P>
This routine returns the time when the GEOS.INI file was last modified. The returned time is the value of the system counter when the file was last written.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_InitFileMakeCanonicKeyCategory()">
 </A>
<H1 CLASS="refHeading">
InitFileMakeCanonicKeyCategory()</H1>
<PRE CLASS="syntax">void       InitFileMakeCanonicKeyCategory(
	char 		*keyCat, 
	const TCHAR 	*src);</PRE>
<P>
Converts a SBCS/DBCS (depending on GEOS version) string to an ASCIIX string without special INI characters. This is used to convert any type of string to one suitable for use as an INI file key or category. 
 </P>

<P CLASS="refField"><STRONG>
Pass:   </STRONG>
</P>
<DL>
<DT>
<STRONG>
keyCat</STRONG>
</DT><DD>The unconverted SBCS/DBCS string.</DD>
<DT>
<STRONG>
src</STRONG>
</DT><DD>The buffer for the converted SBCS ASCII hex string. If <EM>keyCat</EM> is SBCS, then <EM>src</EM> should be the same length as <EM>keyCat</EM> (including the NULL terminator); otherwise, if <EM>keyCat</EM> is DBCS then <EM>src</EM> should point to a buffer which is twice as long as <EM>keyCat</EM> (including its NULL terminator).</DD>
</DL>

<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>

<P CLASS="refField"><STRONG>
Version:</STRONG>    This routine is available on builds 4 or greater of the Nokia 9000i Communicator (see <A HREF = "../../Nokia9000/Versions/index.htm">the Versions chapter</A> for more information).
 </P>

</DIV>




<DIV>
<A NAME="IX_InitFileReadBoolean()">
 </A>
<H1 CLASS="refHeading">
InitFileReadBoolean()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadBoolean(
        const char *		category,
        const char *		key,
        Boolean *		bool);</PRE>
<P>
This routine reads a Boolean entry in the GEOS.INI file, copying it into a passed buffer. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteBoolean()">InitFileWriteBoolean()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
bool</CODE>
</DT><DD>A pointer to a Boolean variable in which the Boolean value will be returned.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The return value of this function is <EM>
not</EM>
 the Boolean stored in the GEOS.INI file. That value is returned in the Boolean pointed to by <CODE>
bool</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadDataBlock()">
 </A>
<H1 CLASS="refHeading">
InitFileReadDataBlock()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadDataBlock(
        const char *		category,
        const char *		key,
        MemHandle *		block,
        word *		dataSize);</PRE>
<P>
This routine reads an entry in the GEOS.INI file, allocating a new block and copying the data into it. The routine returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteData()">InitFileWriteData()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
block</CODE>
</DT><DD>A pointer to a null memory handle. This pointer will point to the newly-allocated block handle upon return. The data read will be in the new block. It is your respojnsibility to free this block when you're done with it.</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>The size of the read data. All the data will be read; the block will be as large as necessary.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadDataBuffer()">
 </A>
<H1 CLASS="refHeading">
InitFileReadDataBuffer()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadDataBuffer(
        const char *		category,
        const char *		key,
        void *		buffer,
        word		bufSize,
        word *		dataSize);</PRE>
<P>
This routine reads an entry in the GEOS.INI file, copying it into a passed buffer. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteData()">InitFileWriteData()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to the buffer in which the data will be returned. This buffer must be in locked or fixed memory.</DD>
<DT>
<CODE>
bufSize</CODE>
</DT><DD>The size of the passed buffer in bytes. If you are not sure what the data's size will be, you may want to use the (slightly less efficient) <CODE>
<A HREF="../../CRef/Routines/R_5b.htm#IX_InitFileReadDataBlock()">InitFileReadDataBlock()</A></CODE>
.</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>A pointer to a word; on return, the word pointed to will contain the size (in bytes) of the data returned.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadInteger()">
 </A>
<H1 CLASS="refHeading">
InitFileReadInteger()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadInteger(
        const char *		category,
        const char *		key,
        word *		i);</PRE>
<P>
This routine reads an integer entry in the GEOS.INI file, copying it into the passed variable. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteInteger()">InitFileWriteInteger()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
i</CODE>
</DT><DD>A pointer to a word in which the integer will be returned.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ImpexExportToMetafile() ...</A> 
<!-- to next --> | <A HREF="R_5c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileReadStringBlock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>

