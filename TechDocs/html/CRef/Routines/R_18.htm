<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_18.htm,v 1.2 97/06/25 18:10:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DBLock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_17.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBDeref() ...</A> 
<!-- to next --> | <A HREF="R_19.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DiskCheckInUse() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DBLock()">
 </A>
<H1 CLASS="refHeading">
DBLock()</H1>
<PRE CLASS="syntax">void *	DBLock(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This routine locks the specified item and returns a pointer to it. It is passed the file, group, and item handles specifying a DB item. If it fails, it returns a null pointer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_18.htm#IX_DBLockGetRef()">DBLockGetRef()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_18.htm#IX_DBLockUngrouped()">DBLockUngrouped()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBLockGetRef()">
 </A>
<H1 CLASS="refHeading">
DBLockGetRef()</H1>
<PRE CLASS="syntax">void *	DBLockGetRef(
        VMFileHandle		file,			
        DBGroup		group,
        DBItem		item,
        optr *		ref);</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBLock()">DBLock()</A></CODE>
, except that it writes the item's optr to the passed address.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The optr is only valid until the DB item is unlocked.</P>
</DIV>
<DIV>
<A NAME="IX_DBLockGetRefUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBLockGetRefUngrouped()</H1>
<PRE CLASS="syntax">void *	DBLockGetRefUngrouped(
        VMFileHandle		file,			
        DBGroupAndItem		id,
        optr *		ref);</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBLockGetRef()">DBLockGetRef()</A></CODE>
, except that it is passed a <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBLockMap()">
 </A>
<H1 CLASS="refHeading">
DBLockMap()</H1>
<PRE CLASS="syntax">void *	DBLockMap(
        VMFileHandle		file);			</PRE>
<P>
This routine locks the specified file's map item and returns its address. To unlock the map item, call <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBUnlock()">DBUnlock()</A></CODE>
 normally.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_18.htm#IX_DBLockMap()">DBLockMap()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_DBLockUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBLockUngrouped()</H1>
<PRE CLASS="syntax">void *	DBLockUngrouped(
        VMFileHandle		file,			
        DBGroupAndItem		id);</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBLock()">DBLock()</A></CODE>
, except that it is passed a <CODE>
DBGroupAndItem</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBReAlloc()">
 </A>
<H1 CLASS="refHeading">
DBReAlloc()</H1>
<PRE CLASS="syntax">void	DBReAlloc(
        VMFileHandle		file,			
        DBGroup		group,
        DBItem		item,
        word		size);</PRE>
<P>
This routine changes the size of a DB item. It is passed the file, group, and item handles specifying the DB item, and a new size for the item (in bytes). If the new size is larger than the old, space will be added to the end of the item; if the new size is smaller than the old, the item will be truncated to fit.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the new size is larger than the old, all pointers to items in the group are invalidated. Space added is not zero-initialized.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBReAllocUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBReAllocUngrouped()</H1>
<PRE CLASS="syntax">void	DBReAllocUngrouped(
        VMFileHandle		file,			
        DBGroupAndItem		id,
        word		size);</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBReAlloc()">DBReAlloc()</A></CODE>
, except it is passed a <CODE>
DBGroupAndItem</CODE>
 value instead of separate group and item handles.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the new size is larger than the old, all pointers to ungrouped items are invalidated. Space added is not zero-initialized.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBSetMap()">
 </A>
<H1 CLASS="refHeading">
DBSetMap()</H1>
<PRE CLASS="syntax">void	DBSetMap(
        VMFileHandle		file,			
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This routine sets the DB map item. You can later retrieve a <CODE>
DBGroupAndItem</CODE>
 structure identifying this item by calling <CODE>
<A HREF="../../CRef/Routines/R_17.htm#IX_DBGetMap()">DBGetMap()</A></CODE>
. The routine is passed the file, group, and item handles specifying the new map item; it does not return anything.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBSetMapUngrouped()">
 </A>
<H1 CLASS="refHeading">
DBSetMapUngrouped()</H1>
<PRE CLASS="syntax">void	DBSetMapUngrouped(
        VMFileHandle		file,			
        DBGroupAndItem		id);</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_18.htm#IX_DBSetMap()">DBSetMap()</A></CODE>
, except it is passed a <CODE>
DBGroupAndItem</CODE>
 value instead of separate group and item handles.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DBUnlock()">
 </A>
<H1 CLASS="refHeading">
DBUnlock()</H1>
<PRE CLASS="syntax">void	DBUnlock(
        void *	ptr); /* address of item to unlock */</PRE>
<P>
This routine unlocks the DB item whose address is passed.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Only the segment address of the pointer is significant. Thus, you can pass a pointer to somewhere within an item (or immediately after it) to unlock it.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	If the item has been changed, make sure you call <CODE>
<A HREF="../../CRef/Routines/R_17.htm#IX_DBDirty()">DBDirty()</A></CODE>
 <EM>
before</EM>
 you unlock it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
dbase.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_17.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBDeref() ...</A> 
<!-- to next --> | <A HREF="R_19.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DiskCheckInUse() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
