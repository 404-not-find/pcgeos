<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_29.htm,v 1.2 97/06/25 18:17:13 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FileGetDiskHandle() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_28.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileEnumLocateAttr() ...</A> 
<!-- to next --> | <A HREF="R_2a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileOpen() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FileGetDiskHandle()">
 </A>
<H1 CLASS="refHeading">
FileGetDiskHandle()</H1>
<PRE CLASS="syntax">DiskHandle FileGetDiskHandle( /* sets thread's error value */
        FileHandle fh);</PRE>
<P>
This routine returns the handle of the disk containing an open file. If unsuccessful, it sets the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileGetHandleExtAttributes()">
 </A>
<H1 CLASS="refHeading">
FileGetHandleExtAttributes()</H1>
<PRE CLASS="syntax">word	FileGetHandleExtAttributes(
        FileHandle			fh,				/* open file's handle */
        FileExtendedAttribute			attr,				/* attribute to get */
        void			* buffer,				/* attribute is written here */
        word			bufSize);				/* length of buffer in bytes */</PRE>
<P>
This routine gets one or more extended attributes of an open file. (To get the attributes of a file without opening it, call <CODE>
<A HREF="../../CRef/Routines/R_29.htm#IX_FileGetPathExtAttributes()">FileGetPathExtAttributes()</A></CODE>
.) If a single attribute is requested, the attribute will be written in the buffer passed. If several attributes are requested, <CODE>
attr</CODE>
 should be set to FEA_MULTIPLE, and <EM>
buffer</EM>
 should point to an array of <CODE>
FileExtAttrDesc</CODE>
 structures. In this case, <EM>
bufSize</EM>
 should be the number of structures in the buffer, not the length of the buffer. </P>
<P>
If <CODE>
FileGetHandleExtAttributes()</CODE>
 is successful, it returns zero. Otherwise, it returns one of the following error codes:</P>
<DL>
<DT>
ERROR_ATTR_NOT_SUPPORTED</DT><DD>
The file system does not recognize the attribute constant passed.</DD>
<DT>
ERROR_ATTR_SIZE_MISMATCH</DT><DD>
The buffer passed was too small for the attribute requested.</DD>
<DT>
ERROR_ATTR_NOT_FOUND</DT><DD>
The file does not have a value set for that attribute.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
You do not have read-access to the file.</DD>
</DL>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Note that the only way to recover a custom attribute is by passing FEA_MULTIPLE, and using a <CODE>
FileExtAttrDesc</CODE>
 to describe the attribute.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_29.htm#IX_FileGetPathExtAttributes()">FileGetPathExtAttributes()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileGetPathExtAttributes()">
 </A>
<H1 CLASS="refHeading">
FileGetPathExtAttributes()</H1>
<PRE CLASS="syntax">word	FileGetPathExtAttributes(
        const char			* path,				/* path relative to current
							 * working directory */</PRE>
<PRE CLASS="syntax">        FileExtendedAttribute			attr,				/* attribute to get */
        void			* buffer,				/* attribute is written here */
        word			bufSize);				/* length of buffer in bytes */</PRE>
<P>
This routine gets one or more extended attributes of a GEOS file. If a single attribute is requested, the attribute will be written in the buffer passed. If several attributes are requested, <CODE>
attr</CODE>
 should be set to FEA_MULTIPLE, and <EM>
buffer</EM>
 should point to an array of <CODE>
FileExtAttrDesc</CODE>
 structures. In this case, <EM>
bufSize</EM>
 should be the number of structures in the buffer, not the length of the buffer.</P>
<P>
If <CODE>
FileGetPathExtAttributes()</CODE>
 is successful, it returns zero. Otherwise, it returns one of the following error codes:</P>
<DL>
<DT>
ERROR_ATTR_NOT_SUPPORTED</DT><DD>
The file system does not recognize the attribute constant passed.</DD>
<DT>
ERROR_ATTR_SIZE_MISMATCH</DT><DD>
The buffer passed was too small for the attribute requested.</DD>
<DT>
ERROR_ATTR_NOT_FOUND</DT><DD>
The file does not have a value set for that attribute.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
You do not have read-access to the file.</DD>
</DL>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Note that the only way to recover a custom attribute is by passing FEA_MULTIPLE, and using a <CODE>
FileExtAttrDesc</CODE>
 to describe the attribute.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_29.htm#IX_FileGetHandleExtAttributes()">FileGetHandleExtAttributes()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileLockRecord()">
 </A>
<H1 CLASS="refHeading">
FileLockRecord()</H1>
<PRE CLASS="syntax">word	FileLockRecord( /* returns error */
        FileHandle		fh,
        dword		filePos,			/* lock starting at this position... */
        dword		regLength);				/* lock this many bytes */</PRE>
<P>
This routine puts a lock on a part of a byte file. It first checks to make sure that there are no locks that overlap the region specified; if there are, it will fail and return ERROR_ALREADY_LOCKED. If there are no locks, it will place a lock on the region specified and return zero.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Locking a region only prevents threads from locking part of the same region; it does not prevent them from reading from or writing to the region. If applications use this mechanism, they have to make sure to call <CODE>
FileLockRecord</CODE>
 before trying to access a part of a file.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2d.htm#IX_FileUnlockRecord()">FileUnlockRecord()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_FileMove()">
 </A>
<H1 CLASS="refHeading">
FileMove()</H1>
<PRE CLASS="syntax">word	FileMove( /* Returns error */
        const char		* source,				/* source path and file name */
        const char		* dest,				/* destination path and file name */
        DiskHandle		sourceDisk,				/* These handles may be Standard */
        DiskHandle		destDisk);				/* Path constants, or null to indi- 
						 * cate current working directory */</PRE>
<P>
This routine moves a file from one location to another. The source and destination are specified with path strings. Each string specifies a path relative to the location specified by the corresponding disk handle. If the handle is a disk handle, the path is relative to that disk's root. If the disk handle is a standard path constant, the path string is relative to that standard path. If the disk handle is null, the path is relative to the current working directory.</P>
<P>
If <CODE>
FileMove()</CODE>
 is successful, it returns zero. Otherwise, it returns one of the following error codes and sets the thread's error value.</P>
<DL>
<DT>
ERROR_FILE_NOT_FOUND</DT><DD>
No such source file exists in the specified directory.</DD>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
An invalid source or destination path string was passed.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
You do not have permission to delete the source file, or there is already a file with the same name as the destination file (and you do not have permission to delete it), or the destination disk or directory is not writable.</DD>
<DT>
ERROR_FILE_IN_USE</DT><DD>
Either the source file is in use, or there is already a file with the same name as the destination file, and it is in use.</DD>
<DT>
ERROR_SHORT_READ_WRITE</DT><DD>
There was not enough room on the destination disk.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_24.htm#IX_FileCopy()">FileCopy()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_28.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileEnumLocateAttr() ...</A> 
<!-- to next --> | <A HREF="R_2a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileOpen() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
