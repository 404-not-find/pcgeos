<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_8d.htm,v 1.2 97/06/25 18:43:04 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: SoundPlayToMusicStream() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SoundFreeMusic() ...</A> 
<!-- to next --> | <A HREF="R_8e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpeedDialGetNumber() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SoundPlayToMusicStream()">
 </A>
<H1 CLASS="refHeading">
SoundPlayToMusicStream()</H1>
<PRE CLASS="syntax">word	SoundPlayToMusicStream( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh,
        const word		* song,
        word 		size);</PRE>
<P>
This routine plays a music buffer to a stream. Specify which stream to play to by means of the token returned by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusicStream()">SoundAllocMusicStream()</A></CODE>
. To play music to the buffer, pass the size of the buffer you are playing and a pointer to the start of the piece. This piece of buffer must be made up of whole events--it should not start or end in the middle of an event (e.g. you can't specify that you want to play a note but not give its frequency, even if you plan to play another buffer to the stream that might begin with a frequency). </P>
<P>
If you don't know the size of the buffer, it may be all right--any data in the buffer after the GE_END_OF_SONG will be ignored.</P>
</DIV>
<DIV>
<A NAME="IX_SoundPlayToMusicStreamNB()">
 </A>
<H1 CLASS="refHeading">
SoundPlayToMusicStreamNB()</H1>
<PRE CLASS="syntax">word	SoundPlayToMusicStreamNB( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh,
        const word		* song,
        word 		size,
        word		*bytesWritten);</PRE>
<P>
This routine acts as <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundPlayToMusicStream()">SoundPlayToMusicStream()</A></CODE>
, except in the case where the routine would block. If the music stream fills up, <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundPlayToMusicStream()">SoundPlayToMusicStream()</A></CODE>
 blocks, waiting until there is more room in the stream;<CODE>
 SoundPlayToMusicStreamNB()</CODE>
 will instead exit, returning the number of bytes successfully written to the stream.</P>
</DIV>
<DIV>
<A NAME="IX_SoundPlayToSampleStream()">
 </A>
<H1 CLASS="refHeading">
SoundPlayToSampleStream()</H1>
<PRE CLASS="syntax">word SoundPlayToSampleStream( /* Returns a SOUND_ERROR_... value */
        MemHandle 				mh,
        word _far				* sample,
        word 				size,
        SampleFormatDescription				* format);</PRE>
<P>
This routine passes sampled sound data to a DAC player. You must pass a sample sound handle to this routine--to acquire such a handle, call <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocSampleStream()">SoundAllocSampleStream()</A></CODE>
. The sample sound handle must be associated with a DAC player--to so associate the handle, call <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundEnableSampleStream()">SoundEnableSampleStream()</A></CODE>
. You must pass a pointer to the <EM>
sample</EM>
 data, along with the <EM>
size</EM>
 of the sample as measured in bytes. You may change the <EM>
format</EM>
 information which will determine how the DAC player handles the data.</P>
</DIV>
<DIV>
<A NAME="IX_SoundReallocMusic()">
 </A>
<H1 CLASS="refHeading">
SoundReallocMusic()</H1>
<PRE CLASS="syntax">word 	SoundReallocMusic( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh,
        word _far 		* song);</PRE>
<P>
This routine allows you to associate a new music buffer with an existing music handle. The new music buffer must not have more voices than was originally requested with <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusic()">SoundAllocMusic()</A></CODE>
. Do not call this routine with the handle of a sound that may be playing; call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundStopMusic()">SoundStopMusic()</A></CODE>
 on the handle if you are not sure. </P>
</DIV>
<DIV>
<A NAME="IX_SoundReallocMusicNote()">
 </A>
<H1 CLASS="refHeading">
SoundReallocMusicNote()</H1>
<PRE CLASS="syntax"><CODE>word </CODE>	SoundReallocMusicNote( /* Returns a SOUND_ERROR_... value */
        MemHandle 				mh,
        word 				freq,
        word 				vol,
        SoundStreamDeltaTimeType				timer,
        word 				durat,
        word				instrum,
        word				instTable);</PRE>
<P>
This routine allows you to associate new note values with an existing note handle. Do not call this routine with the handle of a note that may be playing; call <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundStopMusicNote()">SoundStopMusicNote()</A></CODE>
 on the handle if you are not sure. </P>
</DIV>
<DIV>
<A NAME="IX_SoundReleaseExclusive()">
 </A>
<H1 CLASS="refHeading">
SoundReleaseExclusive()</H1>
<PRE CLASS="syntax">void	SoundReleaseExclusive(void);</PRE>
<P>
This routine releases the sound library exclusive semaphore. You will not need to call this routine unless your code calls <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundGetExclusive()">SoundGetExclusive()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundGetExclusiveNB()">SoundGetExclusiveNB()</A></CODE>
. This routine allows other threads to play sounds. If another thread called <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundGetExclusive()">SoundGetExclusive()</A></CODE>
 while your thread had the exclusive, it will now grab the exclusive.</P>
</DIV>
<DIV>
<A NAME="IX_SoundSampleDriverInfo()">
 </A>
<H1 CLASS="refHeading">
SoundSampleDriverInfo()</H1>
<PRE CLASS="syntax">void 	SoundSampleDriverInfo(
        word _far 					*voices,
        SoundDriverCapability _far 					*capability);</PRE>
<P>
This routine determines the machine's ability to play recorded sounds.</P>
</DIV>
<DIV>
<A NAME="IX_SoundStopMusic()">
 </A>
<H1 CLASS="refHeading">
SoundStopMusic()</H1>
<PRE CLASS="syntax">word 	SoundStopMusic( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh); 		/* Handle of music buffer */</PRE>
<P>
This routine stops the playing of a simple music buffer. It returns true if the library was unavailable (i.e. some other thread has grabbed the exclusive).</P>
</DIV>
<DIV>
<A NAME="IX_SoundStopMusicNote()">
 </A>
<H1 CLASS="refHeading">
SoundStopMusicNote()</H1>
<PRE CLASS="syntax">word 	SoundStopMusicNote( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh);</PRE>
<P>
This routine stops a note that is playing. Pass the handle of the note, as was returned by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusicNote()">SoundAllocMusicNote()</A></CODE>
. This routine returns true if the sound library was unavailable (i.e. some other thread has grabbed the exclusive). </P>
</DIV>
<DIV>
<A NAME="IX_SoundStopMusicStream()">
 </A>
<H1 CLASS="refHeading">
SoundStopMusicStream()</H1>
<PRE CLASS="syntax">word 	SoundStopMusicStream( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh);</PRE>
<P>
This routine stops any music being played to the stream. All sounds are flushed from the stream. It takes one argument, the token of the sound stream, as returned by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocMusicStream()">SoundAllocMusicStream()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_SoundSynthDriverInfo()">
 </A>
<H1 CLASS="refHeading">
SoundSynthDriverInfo()</H1>
<PRE CLASS="syntax">void 	SoundSynthDriverInfo(
        word _far 					*voices,
        SupportedEnvelopeFormat _far 					*format,
        SoundDriverCapability  _far 					*capability)</PRE>
<P>
This routine describes the machine's music playing ability.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SoundFreeMusic() ...</A> 
<!-- to next --> | <A HREF="R_8e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpeedDialGetNumber() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
