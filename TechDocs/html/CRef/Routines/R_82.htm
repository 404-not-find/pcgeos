<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_82.htm,v 1.2 97/06/25 18:41:07 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: qsort ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_81.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">PCCOMABORT() ...</A> 
<!-- to next --> | <A HREF="R_83.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">realloc() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_qsort">
 </A>
<H1 CLASS="refHeading">
qsort</H1>
<PRE CLASS="syntax">extern void _pascal qsort(
        void *array, 
        word count, 
        word elementSize,
        PCB(int, compare, (const void *, const void *)));</PRE>
<P>
This is a standard quicksort routine. The callback routine must be decared _pascal.</P>
</DIV>
<DIV>
<A NAME="IX_QueueGetMessage()">
 </A>
<H1 CLASS="refHeading">
QueueGetMessage()</H1>
<PRE CLASS="syntax">EventHandle QueueGetMessage(
        QueueHandle qh);			/* queue to query */</PRE>
<P>
This routine returns the next message on the given queue, blocking if the queue is empty. When a new message is added to the empty queue, this routine will unblock the thread and return the message. This routine is used almost exclusively by the kernel.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_QueuePostMessage()">
 </A>
<H1 CLASS="refHeading">
QueuePostMessage()</H1>
<PRE CLASS="syntax">void	QueuePostMessage(
        QueueHandle		qh,			/* queue to add event to */
        EventHandle		event,			/* event to be added to queue */
        MessageFlags		flags);			/* MF_INSERT_AT_FRONT or zero */</PRE>
<P>
This routine adds the specified <CODE>
event</CODE>
 to the passed <CODE>
queue</CODE>
. The only valid flag for this routine is MF_INSERT_AT_FRONT, which will put the event in the first spot of the queue.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RangeEnum()">
 </A>
<A NAME="IX_RangeEnumCallbackParams">
 </A>
<A NAME="IX_RECP_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeEnum()</H1>
<PRE CLASS="syntax">Boolean	RangeEnum(
        CellFunctionParameters			* cfp,				/* cell function parameters */
        RangeEnumParams			* params);				/* special other parameters */</PRE>
<P>
This routine calls a callback routine for each cell in a specified range. This routine is passed pointers to two structures, both of which are shown below. It returns <EM>
false</EM>
 if all the cells were processed, <EM>
true</EM>
 if any of the cells caused the routine to abort before the end of the range was reached.</P>
<P CLASS="refField"><STRONG>
<STRONG>
Callback Parameters:</STRONG></STRONG>
 </P>
<P>
The callback routine, which must be declared _pascal, receives a <CODE>
RangeEnumCallbackParams</CODE>
 structure, which has the following definition:</P>
<PRE>typedef struct {
	RangeEnumParams			*RECP_params;		/* see below */
   /* current row, column, and cell data of cell */
	word			RECP_row;
	word			RECP_column;
	word			RECP_cellData;
} RangeEnumCallbackParams;</PRE>
<P>
The callback routine can do anything with the cell information. It should return <EM>
false </EM>
after successfully processing the cell; if an error occurs, or if it wants to abort the <CODE>
RangeEnum()</CODE>
, it should return <EM>
true</EM>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RangeExists()">
 </A>
<H1 CLASS="refHeading">
RangeExists()</H1>
<PRE CLASS="syntax">Boolean	RangeExists( /* returns non-zero if there are cells in range */
        CellFunctionParameters			* cfp,				/* see RangeEnum() */
        word			firstRow,				/* range delimiters */
        byte			firstColumn,
        word			lastRow,
        byte			lastColumn);</PRE>
<P>
This routine returns <EM>
true</EM>
 if there are any cells in the specified range. It is passed a pointer to the <CODE>
CellFunctionParameters</CODE>
 structure for the cell file, as well as the indices of the first and last row, and the first and last column, of the range to check.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_RangeInsert()">
 </A>
<A NAME="IX_RangeInsertParams">
 </A>
<A NAME="IX_RIP_&ldots;">
 </A>
<H1 CLASS="refHeading">
RangeInsert()</H1>
<PRE CLASS="syntax">void	RangeInsert(
        CellFunctionParameters			* cfp,				/* see RangeEnum() */
        RangeInsertParams			* rep);				/* parameters structure */</PRE>
<P>
This routine shifts existing cells to make room for new ones. (It does not actually create new cells.) Which cells are shifted, and in what direction, is specified by the <CODE>
RangeInsertParams</CODE>
 structure:</P>
<DL>
<DT>
<CODE>
RIP_bounds</DT><DD></CODE>
A <CODE>
Rectangle</CODE>
 structure which specifies which cells should be shifted. The cells currently in this range will be shifted across or down, depending on the value of <CODE>
RIP_delta</CODE>
; the shifted cells displace more cells, and so on, to the edge of the visible portion of the cell file. To insert an entire row (which is much faster than inserting a partial row), set RIP<CODE>
_bounds.</CODE>
R<CODE>
_left</CODE>
 = 0 and RIP<CODE>
_bounds.</CODE>
R<CODE>
_right = </CODE>
LARGEST_COLUMN<CODE>
.</CODE>
</DD>
<DT>
<CODE>
RIP_delta</DT><DD></CODE>
A <CODE>
Point</CODE>
 structure which specifies how far the cells should be shifted and in which direction. If the range of cells is to be shifted horizontally, <CODE>
RIP_delta.</CODE>
P<CODE>
_x</CODE>
 should specify how far the cells should be shifted over, and <CODE>
RIP_delta.</CODE>
P<CODE>
_y</CODE>
 should be zero. If the cells are to be shifted vertically, <CODE>
RIP_delta.</CODE>
P<CODE>
_y</CODE>
 should specify how far the cells should be shifted over, and<CODE>
 RIP_delta.</CODE>
P<CODE>
_x</CODE>
 should be zero.</DD>
<DT>
<CODE>
RIP_cfp</DT><DD></CODE>
This is the address of the <CODE>
CellFunctionParameters</CODE>
 structure. You don't have to initialize this; the routine will do so automatically.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If cells are shifted off the &quot;visible&quot; portion of the cell file, you will be unable to access them by row or column numbers; but they will not be deleted. For this reason, you should free all such cells <EM>
before</EM>
 calling <CODE>
RangeInsert()</CODE>
. (You can find out if there are any cells at the edges by calling <CODE>
<A HREF="../../CRef/Routines/R_82.htm#IX_RangeExists()">RangeExists()</A></CODE>
.) For an explanation of the &quot;visible&quot; and &quot;scratch-pad&quot; portions of a cell file, see <A HREF="../../DataMgmt/Cell/CellLibrary_1.htm#99717">the Cell library documentation</A>.</P></DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_81.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">PCCOMABORT() ...</A> 
<!-- to next --> | <A HREF="R_83.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">realloc() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
