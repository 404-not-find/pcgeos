<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_70.htm,v 1.2 97/06/25 18:37:13 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: MemUnlock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemThreadGrab() ...</A> 
<!-- to next --> | <A HREF="R_71.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ModemAnswerCall() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_MemUnlock()">
 </A>
<H1 CLASS="refHeading">
MemUnlock()</H1>
<PRE CLASS="syntax">void	MemUnlock(
        MemHandle		mh);		/* Handle of block to unlock */</PRE>
<P>
This routine decrements the lock count of the indicated block. If the lock count reaches zero, the block becomes unlocked (it can be moved, swapped, or discarded). Do not try to unlock a block that has not been locked.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemUnlockExcl()">
 </A>
<H1 CLASS="refHeading">
MemUnlockExcl()</H1>
<PRE CLASS="syntax">void	MemUnlockExcl(
        memHandle		mh);			/* Handle of block to release */</PRE>
<P>
If a thread has gained access to a block with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
, it should release the block as soon as it can. Until it does, no other thread can access the block for either shared or exclusive access. It can release the block by calling <CODE>
MemUnlockExcl()</CODE>
. This routine unlocks the block and releases the thread's access to it. If there is a queue for this block, the highest-priority thread waiting will be awakened, as described in <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can find out if the block is being accessed by looking at the HM<CODE>
_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If HM<CODE>
_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all routines accessing the block get access with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
. The routines use the block's HM<CODE>
_otherInfo</CODE>
 word; you must not alter it. Call this routine while the block is still locked; it will call <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
 to unlock the block.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you call this routine on a block which you have not gained access to, it may fatal-error.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockShared()">MemUnlockShared()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemUnlockFixedOrMovable()">
 </A>
<H1 CLASS="refHeading">
MemUnlockFixedOrMovable()</H1>
<PRE CLASS="syntax">void	MemUnlockFixedOrMovable(
        void	* ptr);		/* virtual segment */</PRE>
<P>
This routine unlocks a previously locked, movable virtual segment. Do not call this routine with normal locked or fixed blocks; only call it for those blocks locked with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockFixedOrMovable()">MemLockFixedOrMovable()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemUnlockShared()">
 </A>
<H1 CLASS="refHeading">
MemUnlockShared()</H1>
<PRE CLASS="syntax">void	MemUnlockShared(
        MemHandle		mh);		/* Handle of block to release */</PRE>
<P>
If a thread has gained access to a block with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
, it should release the block as soon as it can. Until it does, no thread can be awakened from the queue. It can release the block by calling <CODE>
MemUnlockShared()</CODE>
. This routine calls <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
, decrementing the block's lock count; it then releases the thread's access to it. If no other thread is accessing the block and there is a queue for this block, the highest-priority thread waiting will be awakened, as described in <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can find out if the block is being accessed by looking at the HM<CODE>
_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If HM<CODE>
_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all routines accessing the block get access with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
. These routines use the block's HM<CODE>
_otherInfo</CODE>
 word; you must not alter it. Call this routine while the block is still locked; it will call <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
 to unlock the block.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you call this routine on a block which you have not gained access to, it may fatal-error.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemUnlockV()">
 </A>
<H1 CLASS="refHeading">
MemUnlockV()</H1>
<PRE CLASS="syntax">void	MemUnlockV(
        MemHandle		mh);			/* Handle of block to release */</PRE>
<P>
This routine unlocks a block with <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlock()">MemUnlock()</A></CODE>
, then releases its semaphore with <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
. Do not use this routine unless the block's semaphore was grabbed and the block locked (typically with the <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
 routine).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can find out if the block is being accessed by looking at the HM<CODE>
_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If HM<CODE>
_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all threads accessing the block use <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
 to access the thread. These routines use the<CODE>
 </CODE>
HM<CODE>
_otherInfo</CODE>
 field of the handle table entry; do not alter this field.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not use this on a block unless you have grabbed it. The routine does not check to see that you have grabbed the thread; it just clears the semaphore and returns.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never use this routine to release a fixed block. It will try to unlock the block; fixed blocks cannot be locked or unlocked. Instead, call <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 directly.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemUpgradeSharedLock()">
 </A>
<H1 CLASS="refHeading">
MemUpgradeSharedLock()</H1>
<PRE CLASS="syntax">void	* MemUpgradeSharedLock(
        MemHandle		mh);			/* handle of locked block */</PRE>
<P>
This routine upgrades a shared lock on the block to an exclusive lock, as if the caller had used MemLockExcl(). If other threads have access to the block, the caller will sleep in the access queue until it can gain exclusive access.</P>
<P>
This routine returns the pointer of the locked block because, if the caller sleeps in the queue, the memory block could move between the call and the granting of access.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6c.htm#IX_MemDowngradeExclLock()">MemDowngradeExclLock()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MessageSetDestination()">
 </A>
<H1 CLASS="refHeading">
MessageSetDestination()</H1>
<PRE CLASS="syntax">void	MessageSetDestination(
        EventHandle		event,			/* handle of the event to be modified */
        optr		dest);			/* new destination for the event */</PRE>
<P>
This routine sets the destination of an event to the optr passed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemThreadGrab() ...</A> 
<!-- to next --> | <A HREF="R_71.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ModemAnswerCall() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
