<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_5a.htm,v 1.2 97/06/25 18:31:15 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ImpexExportToMetafile() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_59.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">IACPProcessMessage() ...</A> 
<!-- to next --> | <A HREF="R_5b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileEnumStringSection() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ImpexExportToMetafile()">
 </A>
<H1 CLASS="refHeading">
ImpexExportToMetafile()</H1>
<PRE CLASS="syntax">TransError 	ImpexExportToMetafile(
        Handle		xlatLib,
        VMFileHandle		xferFile,
        FileHandle		metafile,
        dword		xferFormat,
        word		arg1,
        word		arg2,
        MemHandle *		errString);</PRE>
<P>
This routine is used by translation libraries. The routine calls an intermediate translation library to finish translating a given file into the GEOS Metafile format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
impex.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the routine does not fail with condition TE_CUSTOM, <CODE>
*errString</CODE>
 may contain a random value. Do not use <CODE>
*errString</CODE>
 if the routine did not return TE_CUSTOM.</P>
</DIV>
<DIV>
<A NAME="IX_ImpexImportExportCompleted()">
 </A>
<H1 CLASS="refHeading">
ImpexImportExportCompleted()</H1>
<PRE CLASS="syntax">void 	ImpexImportExportCompleted(
        ImpexTranslationParams *			itParams);</PRE>
<P>
The application should send this message when it is finished importing or exporting data. The routine will send an appropriate acknowledgment message to the ImportControl or ExportControl object, depending on the settings of <CODE>
ITP_impexOD</CODE>
 and ITP<CODE>
_returnMsg</CODE>
.</P>
<P>
If the application has just finished an import, it should not have changed the <CODE>
ImpexTranslationParams </CODE>
structure. If it had just finished preparing data for export, it should have set the ITP<CODE>
_transferVMChain</CODE>
 field to contain the handle of the head of the VM chain.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine, in essence, informs the ImportControl or ExportControl object that the application is finished with the transfer file. The ImportControl will respond by destroying the transfer file; the ExportControl will call the appropriate translation library to produce an output file. Therefore, an application should not call this routine until it is absolutely finished with the transfer file.</P>
</DIV>
<DIV>
<A NAME="IX_ImpexImportFromMetafile()">
 </A>
<H1 CLASS="refHeading">
ImpexImportFromMetafile()</H1>
<PRE CLASS="syntax">TransError 	ImpexExportToMetafile(
        Handle		xlatLib,
        VMFileHandle		xferFile,
        FileHandle		metafile,
        dword *		xferFormat,
        word		arg1,
        word		arg2,
        MemHandle *		errString);</PRE>
<P>
This routine is used by translation libraries. The routine calls an intermediate translation library to translate a given file from the GEOS Metafile format to an intermediate format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
impex.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the routine does not fail with condition TE_CUSTOM, <CODE>
*errString</CODE>
 may contain a random value. Do not use <CODE>
*errString</CODE>
 if the routine did not return TE_CUSTOM.</P>
</DIV>
<DIV>
<A NAME="IX_InitFileCommit()">
 </A>
<H1 CLASS="refHeading">
InitFileCommit()</H1>
<PRE CLASS="syntax">void	InitFileCommit(void);</PRE>
<P>
This routine commits any changes to the GEOS.INI file, removing and replacing its stored backup. It ensures that no other threads are working on the file during the commit operation.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileDeleteCategory()">
 </A>
<H1 CLASS="refHeading">
InitFileDeleteCategory()</H1>
<PRE CLASS="syntax">void	InitFileDeleteCategory(
        const char *category);</PRE>
<P>
This routine deletes the specified category, along with all its entries, from the GEOS.INI file. Pass it the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category to be deleted. This string ignores white space and is case-insensitive.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileDeleteEntry()">
 </A>
<H1 CLASS="refHeading">
InitFileDeleteEntry()</H1>
<PRE CLASS="syntax">void	InitFileDeleteEntry(
        const char *category,
        const char *key);</PRE>
<P>
This routine deletes an entry in the GEOS.INI file. Pass it the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be deleted.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileDeleteStringSection()">
 </A>
<H1 CLASS="refHeading">
InitFileDeleteStringSection()</H1>
<PRE CLASS="syntax">void	InitFileDeleteStringSection(
        const char *		category,
        const char *		key,
        word		stringNum);</PRE>
<P>
This routine deletes the specified string section from the given blob in the GEOS.INI file. Pass it the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be edited.</DD>
<DT>
<CODE>
stringNum</CODE>
</DT><DD>The zero-based string section number.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_59.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">IACPProcessMessage() ...</A> 
<!-- to next --> | <A HREF="R_5b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileEnumStringSection() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
