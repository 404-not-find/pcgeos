<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_55.htm,v 1.2 97/06/25 18:29:21 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: HAL_COUNT() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_54.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GSSetSubscriptAttr() ...</A> 
<!-- to next --> | <A HREF="R_56.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HandleV() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_HAL_COUNT() macro">
 </A>
<H1 CLASS="refHeading">
HAL_COUNT()</H1>
<PRE CLASS="syntax">word	HAL_COUNT(
        dword	val);</PRE>
<P>
This macro is provided for use with <CODE>
<A HREF="../../CRef/Routines/R_57.htm#IX_HugeArrayLock()">HugeArrayLock()</A></CODE>
. It extracts the lower word of the <CODE>
<A HREF="../../CRef/Routines/R_57.htm#IX_HugeArrayLock()">HugeArrayLock()</A></CODE>
 return value. This is the number of elements in the Huge Array block after the locked one (counting that locked one).</P>
</DIV>
<DIV>
<A NAME="IX_HAL_PREV() macro">
 </A>
<H1 CLASS="refHeading">
HAL_PREV</H1>
<PRE CLASS="syntax">word	HAL_PREV(
        dword	val);</PRE>
<P>
This macro is provided for use with <CODE>
<A HREF="../../CRef/Routines/R_57.htm#IX_HugeArrayLock()">HugeArrayLock()</A></CODE>
. It extracts the upper word of the <CODE>
<A HREF="../../CRef/Routines/R_57.htm#IX_HugeArrayLock()">HugeArrayLock()</A></CODE>
 return value. This is the number of elements in the Huge Array block before the locked one (counting that locked one).</P>
</DIV>
<DIV>
<A NAME="IX_HandleModifyOwner()">
 </A>
<H1 CLASS="refHeading">
HandleModifyOwner()</H1>
<PRE CLASS="syntax">void	HandleModifyOwner(
        MemHandle		mh,			/* Handle of block to modify */
        GeodeHandle		owner);			/* Handle of block's new owner */</PRE>
<P>
This routine changes the owner of the indicated global memory block. Note that this routine can be called only by a thread belonging to the block's original owner; that is, you can only use this routine to transfer ownership of a block <EM>
from</EM>
 yourself <EM>
to</EM>
 some other geode.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never use this unless the block already belongs to you and you are giving up ownership.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyFlags()">MemModifyFlags()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyOtherInfo()">MemModifyOtherInfo()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_HandleP()">
 </A>
<A NAME="IX_Semaphores:HandleP()">
 </A>
<H1 CLASS="refHeading">
HandleP()</H1>
<PRE CLASS="syntax">void	HandleP(
        MemHandle		mh);		/* Handle of block to grab */</PRE>
<P>
If several different threads will be accessing the same global memory block, they need to make sure their activities will not conflict. The way they do that is to use synchronization routines to get control of a block. <CODE>
HandleP()</CODE>
 is part of one set of synchronization routines.</P>
<P>
If the threads are using this family of routines, then whenever a thread needs access to the block in question, it can call <CODE>
HandleP()</CODE>
. This routine checks whether any thread has grabbed the block with <CODE>
HandleP()</CODE>
 (or <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
). If no thread has the block, it grabs the block for the calling thread and returns (it does not lock the block on the global heap). If a thread has the block, <CODE>
HandleP()</CODE>
 puts the thread on a priority queue and sleeps. When the block is free for it to take, it awakens, grabs the block, and returns.When the thread is done with the block, it should release it with <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you will be locking the block after you grab it, use the routine <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
 (which calls <CODE>
HandleP()</CODE>
 and then locks the block with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLock()">MemLock()</A></CODE>
). You can find out if the block is being accessed by looking at the <CODE>
HM_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If <CODE>
HM_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all threads accessing the block use <CODE>
HandleP()</CODE>
 and/or <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
 to access the block. The routines use the <CODE>
HM_otherInfo</CODE>
 field of the handle table entry; do not alter this field. Release the block with <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>
 when you are done with it.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If a thread calls <CODE>
HandleP()</CODE>
 when it already has control of the block, it will deadlock; <CODE>
HandleP()</CODE>
 will put the thread to sleep until the thread releases the block, but the thread will not be able to release the block because it's sleeping. <CODE>
<A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrab()">MemThreadGrab()</A></CODE>
 avoids this conflict. If you try to grab a non-sharable block owned by another thread, <CODE>
HandleP()</CODE>
 will fatal-error.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrab()">MemThreadGrab()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrabNB()">MemThreadGrabNB()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadRelease()">MemThreadRelease()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_HandleToOptr() macro">
 </A>
<A NAME="IX_optr:HandleToOptr() macro">
 </A>
<H1 CLASS="refHeading">
HandleToOptr()</H1>
<PRE CLASS="syntax">optr	HandleToOptr(
        Handle 	han;</PRE>
<P>
This macro casts any handle to an optr, leaving the chunk handle portion of the resultant optr to be zero.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ConstructOptr() macro">ConstructOptr()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToHandle()">OptrToHandle()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToChunk()">OptrToChunk()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_54.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GSSetSubscriptAttr() ...</A> 
<!-- to next --> | <A HREF="R_56.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HandleV() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
