<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_97.htm,v 1.2 97/06/25 18:44:52 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ThreadGetError() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_96.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadAttachToQueue() ...</A> 
<!-- to next --> | <A HREF="R_98.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ThreadPSem() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ThreadGetError()">
 </A>
<H1 CLASS="refHeading">
ThreadGetError()</H1>
<PRE CLASS="syntax">word	ThreadGetError(void)</PRE>
<P>
This routine returns the thread's current error value.</P>
</DIV>
<DIV>
<A NAME="IX_Threads:finding priority">
 </A>
<A NAME="IX_Threads:finding handle">
 </A>
<A NAME="IX_ThreadGetInfo()">
 </A>
<A NAME="IX_ThreadGetInfoType">
 </A>
<A NAME="IX_TGIT_&ldots;">
 </A>
<A NAME="IX_Event queues:from thread handle">
 </A>
<H1 CLASS="refHeading">
ThreadGetInfo()</H1>
<PRE CLASS="syntax">word	ThreadGetInfo(
        ThreadHandle		th,			/* thread to get information about */
        ThreadGetInfoType 		info);			/* type of information to get */</PRE>
<P>
This routine gets information about the specified thread. The information desired is specified in the <CODE>
info</CODE>
 parameter; the subject thread is specified in the <CODE>
th</CODE>
 parameter. If the thread handle passed is zero or a null handle, the routine will return information about the calling thread.</P>
<P>
The <CODE>
info</CODE>
 parameter is one of the following values of <CODE>
ThreadGetInfoType</CODE>
, specifying the type of information to be returned by <CODE>
ThreadGetInfo()</CODE>
:</P>
<DL>
<DT>
TGIT_PRIORITY_AND_USAGE</DT><DD>
The returned word will contain both the thread's priority and the thread's recent CPU usage. To extract the priority of the thread, use the macro TGI_PRIORITY; to extract the recent CPU usage, use the macro TGI_RECENT_CPU_USAGE.</DD>
<DT>
TGIT_THREAD_HANDLE</DT><DD>
Useful only when the <CODE>
th</CODE>
 parameter is zero, this will return the thread handle of the subject thread. If <CODE>
th</CODE>
 is zero, the handle of the calling thread will be returned.</DD>
<DT>
TGIT_QUEUE_HANDLE</DT><DD>
The returned word will contain the queue handle of the event-driven thread specified in <CODE>
th</CODE>
. If the thread specified is not event-driven, a null queue handle will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
thread.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ThreadGrabThreadLock()">
 </A>
<H1 CLASS="refHeading">
ThreadGrabThreadLock()</H1>
<PRE CLASS="syntax">void	ThreadGrabThreadLock(
        ThreadLockHandle sem);				/* thread lock to grab */</PRE>
<P>
This routine attempts to grab the thread lock for the calling thread. If the thread lock is currently held by another thread, the caller will block until the lock becomes available. If the caller already has the thread lock, it will grab the lock again and continue executing.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Thread locks must be released with <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_ThreadReleaseThreadLock()">ThreadReleaseThreadLock()</A></CODE>
 once for each time they are grabbed.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine provides no deadlock protection for multiple threads. If multiple threads will be grabbing multiple thread locks, the locks should always be grabbed in the same order to minimize the potential for deadlock.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_95.htm#IX_ThreadAllocThreadLock()">ThreadAllocThreadLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_ThreadReleaseThreadLock()">ThreadReleaseThreadLock()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ThreadHandleException()">
 </A>
<A NAME="IX_ThreadException">
 </A>
<A NAME="IX_TE_&ldots;  (ThreadException type)">
 </A>
<H1 CLASS="refHeading">
ThreadHandleException()</H1>
<PRE CLASS="syntax">void	ThreadHandleException(
        ThreadHandle		th,				/* thread to handle the exception */
        ThreadExceptions		exception,				/* exception to handle */
        void	(*handler)	());				/* pointer to handler */</PRE>
<P>
This routine allows a thread to set up a handler for a processor exception. This can be useful for debugging purposes. Pass the following three parameters:</P>
<DL>
<DT>
<CODE>
th</CODE>
</DT><DD>The handle of the thread to handle the exception. Pass zero for the current thread.</DD>
<DT>
<CODE>
exception</CODE>
</DT><DD>A <CODE>
ThreadException</CODE>
 type (see below).</DD>
<DT>
<CODE>
handler</CODE>
</DT><DD>A pointer to a handler in fixed or locked memory. Pass a null pointer to use the GEOS default exception handler.</DD>
</DL>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	The <CODE>
ThreadException</CODE>
 type has the following values:</P>
<PRE>TE_DIVIDE_BY_ZERO
TE_OVERFLOW
TE_BOUND
TE_FPU_EXCEPTION
TE_SINGLE_STEP
TE_BREAKPOINT</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
thread.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ThreadModify()">
 </A>
<H1 CLASS="refHeading">
ThreadModify()</H1>
<PRE CLASS="syntax">void	ThreadModify(
        ThreadHandle		th,					/* thread to modify */
        word		newBasePriority,					/* thread's new base priority */
        ThreadModifyFlags		flags);					/* flags (see below) */</PRE>
<P>
This routine modifies the priority of the specified thread. Use it to either set the base priority of the thread or reset the current CPU usage to zero. The parameters should have the following values:</P>
<DL>
<DT>
<CODE>
th</CODE>
</DT><DD>The thread handle; pass zero to change the priority of the calling thread.</DD>
<DT>
<CODE>
newBasePriority</DT><DD>
</CODE>
The new base priority of the thread. Use one of the standard priorities--see <CODE>
<A HREF="../../CRef/Routines/R_96.htm#IX_ThreadCreate()">ThreadCreate()</A></CODE>
--or use a value between zero and 255.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
ThreadModifyFlags</CODE>
; pass TMF_BASE_PRIO to change the thread's base priority or TMF_ZERO_USAGE to reset the thread's recent CPU usage to zero.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Unless the thread is timing-critical, you should not set the base priority to zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
thread.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ThreadPrivAlloc()">
 </A>
<H1 CLASS="refHeading">
ThreadPrivAlloc()</H1>
<PRE CLASS="syntax">word	ThreadPrivAlloc(
        word		wordsRequested,					/* number of words to allocate */
        GeodeHandle		owner);					/* handle of geode to own data */</PRE>
<P>
This routine allocates a number of contiguous words in the private data of all geodes (loaded and yet-to-be loaded). It is exactly the same as <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
; see the entry for that routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
thread.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ThreadPrivFree()">
 </A>
<H1 CLASS="refHeading">
ThreadPrivFree()</H1>
<PRE CLASS="syntax">void	ThreadPrivFree(
        word	range,			/* offset to first word to be freed */
        word	wordsRequested);			/* number of words to free */</PRE>
<P>
This routine frees a number of contiguous private-data words previously allocated with <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadPrivAlloc()">ThreadPrivAlloc()</A></CODE>
. It is similar to <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivFree()">GeodePrivFree()</A></CODE>
; see the entry for that routine for full information.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
thread.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivFree()">GeodePrivFree()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_96.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadAttachToQueue() ...</A> 
<!-- to next --> | <A HREF="R_98.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ThreadPSem() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
