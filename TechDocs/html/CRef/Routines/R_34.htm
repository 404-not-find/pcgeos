<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_34.htm,v 1.3 97/08/05 14:50:34 nfiedler Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: GeodeGetAppObject() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_33.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeAllocQueue() ...</A> 
<!-- to next --> | <A HREF="R_35.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeLoadDGroup ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GeodeGetAppObject()">
 </A>
<H1 CLASS="refHeading">
GeodeGetAppObject()</H1>
<PRE CLASS="syntax">optr	GeodeGetAppObject(
        GeodeHandle gh);			/* handle of the application geode */</PRE>
<P>
This routine returns the optr of the specified geode's GenApplication object. The geode should be an application. Pass zero to get the optr of the caller's application object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetCodeProcessHandle()">
 </A>
<H1 CLASS="refHeading">
GeodeGetCodeProcessHandle()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeGetCodeProcessHandle();</PRE>
<P>
This routine returns the geode handle of the geode that owns the block in which the code which calls this routine resides.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetDefaultDriver()">
 </A>
<H1 CLASS="refHeading">
GeodeGetDefaultDriver()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeGetDefaultDriver(
        GeodeDefaultDriverType type);		/* type of default driver to get */</PRE>
<P>
This routine returns the default driver's geode handle for the type passed. The type must be one of the values of <CODE>
GeodeDefaultDriverType</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
driver.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetInfo()">
 </A>
<A NAME="IX_GeodeGetInfoType">
 </A>
<A NAME="IX_GGIT_&ldots;">
 </A>
<H1 CLASS="refHeading">
GeodeGetInfo()</H1>
<PRE CLASS="syntax">word	GeodeGetInfo(
        GeodeHandle	  gh,			/* handle of the subject geode */
        GeodeGetInfoType  info,			/* type of information to return */
        void	 	* buf);			/* buffer to contain returned info */</PRE>
<P>
This routine returns information about the specified geode. The geode must be loaded already. The meaning of the returned word depends on the value passed in <CODE>
info</CODE>
; the <CODE>
GeodeGetInfoType</CODE>
 is shown below. Pass the following:</P>
<DL>
<DT>
<CODE>
gh</CODE>
</DT><DD>The geode handle of the geode. If gh is null then the routine will return the information of the current geode.</DD>
<DT>
<CODE>
info</CODE>
</DT><DD>The type of information requested; this should be one of the values listed below.</DD>
<DT>
<CODE>
buf</CODE>
</DT><DD>A pointer to a locked or fixed buffer which will contain returned information for various types requested.</DD>
</DL>
<P>
<CODE>
GeodeGetInfoType</CODE>
 has the following enumerations (only one may be requested at a time):</P>
<DL>
<DT>
GGIT_ATTRIBUTES</DT><DD>
Get the geode's attributes. The return value will be a record of <CODE>
GeodeAttrs</CODE>
 corresponding to those attributes set for the geode. Pass a null buffer pointer.</DD>
<DT>
 GGIT_TYPE</DT><DD>Get the type of the geode. The returned value will be a value of <CODE>
GeosFileType</CODE>
 indicating the type of file storing the geode. Pass a null buffer pointer.</DD>
<DT>
 GGIT_GEODE_RELEASE</DT><DD>
Get the release number of the geode. The returned word will be the size of the buffer pointed to by <CODE>
buf</CODE>
, and the buffer will contain the <CODE>
ReleaseNumber</CODE>
 structure of the geode.</DD>
<DT>
 GGIT_GEODE_PROTOCOL</DT><DD>
Get the protocol level of the geode. The returned word will be the size of the buffer pointed to by <CODE>
buf</CODE>
, and the buffer will contain the <CODE>
ProtocolNumber</CODE>
 structure of the geode.</DD>
<DT>
 GGIT_TOKEN_ID</DT><DD>
Get the token identifier of the geode. The returned word will be the size of the buffer pointed to by <CODE>
buf</CODE>
, and the buffer will contain a <CODE>
GeodeToken</CODE>
 structure containing the token characters and token ID of the geode's token.</DD>
<DT>
 GGIT_PERM_NAME_AND_EXT</DT><DD>
Get the permanent name of the geode, with the extension characters. The returned word will be the size of the buffer pointed to by <CODE>
buf</CODE>
, and the buffer will contain a null-terminated character string representing the geode's permanent name (as set in its geode parameters file). Note that the buffer must be at least 13 bytes.</DD>
<DT>
GGIT_PERM_NAME_ONLY</DT><DD>
Get the permanent name of the geode without the extension characters. The returned word will be the size of the buffer pointed to by buf, and the buffer will contain the null-terminated character string representing the geode's permanent name. The buffer must be at least nine bytes.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetOptrNS()">
 </A>
<H1 CLASS="refHeading">
GeodeGetOptrNS()</H1>
<PRE CLASS="syntax">optr	GeodeGetOptrNS(
        optr	obj);</PRE>
<P>
This routine unrelocates an optr, changing the virtual-segment handle to an actual global handle.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetProcessHandle()">
 </A>
<H1 CLASS="refHeading">
GeodeGetProcessHandle()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeGetProcessHandle();</PRE>
<P>
This routine returns the geode handle of the current executing process (i.e. the owner of the current running thread). Use it when you need to pass your application's geode handle or Process object's handle to a routine or message.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeGetUIData()">
 </A>
<H1 CLASS="refHeading">
GeodeGetUIData()</H1>
<PRE CLASS="syntax">word	GeodeGetUIData(
        GeodeHandle		gh);</PRE>
<P>
 </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeInfoDriver()">
 </A>
<H1 CLASS="refHeading">
GeodeInfoDriver()</H1>
<PRE CLASS="syntax">DriverInfoStruct  * GeodeInfoDriver(
        GeodeHandle gh);	 /* handle of the driver to get information about */</PRE>
<P>
This routine returns information about the specified driver geode. Pass the geode handle of the driver as returned by <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodeUseDriver()">GeodeUseDriver()</A></CODE>
. It returns a pointer to a <CODE>
DriverInfoStruct</CODE>
 structure, shown below.</P>
<PRE>typedef struct {
    void			(*DIS_strategy)();
    DriverAttrs			DIS_driverAttributes;
    DriverType			DIS_driverType;
} DriverInfoStruct;</PRE>
<P>
For full information on this structure, see the <CODE>
DriverInfoStruct</CODE>
 reference entry.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
driver.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeInfoQueue()">
 </A>
<H1 CLASS="refHeading">
GeodeInfoQueue()</H1>
<PRE CLASS="syntax">word	GeodeInfoQueue(
        QueueHandle qh);			/* queue to query */</PRE>
<P>
This routine returns information about a specific event queue. Pass the handle of the queue; for information about the current process' queue, pass a null handle. This routine returns the number of events (or messages) currently in the queue.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeLoad()">
 </A>
<H1 CLASS="refHeading">
GeodeLoad()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeLoad(
        const char *		name,				/* file name of geode */
        GeodeAttrs		attrMatch,				/* GeodeAttrs that must be set */
        GeodeAttrs		attrNoMatch,				/* GeodeAttrs that must be clear */
        word		priority,				/* priority of the loaded geode */
        dword		appInfo,				/* special load information */
        GeodeLoadError *		err);				/* returned error value */</PRE>
<P>
This routine loads the specified geode from the given file and then executes the geode based on its type. It returns the geode handle of the loaded geode if successful; if unsuccessful, the returned value will be NullHandle and the <CODE>
err</CODE>
 pointer will point to an error value. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
name</CODE>
</DT><DD>A pointer to the name of the geode's file. This is a null-terminated character string that represents the full path of the file (or a path relative to the current working directory).</DD>
<DT>
<CODE>
attrMatch</CODE>
</DT><DD>A record of <CODE>
GeodeAttrs</CODE>
 that must be set in the specified geode for the load to be successful.</DD>
<DT>
<CODE>
attrNoMatch</DT><DD>
</CODE>
A record of <CODE>
GeodeAttrs</CODE>
 that must be cleared in the specified geode for the load to be successful. (That is, each bit which is set in <CODE>
attrNoMatch</CODE>
 must be clear in the geode's <CODE>
GeodeAttrs</CODE>
 field.)</DD>
<DT>
<CODE>
priority</CODE>
</DT><DD>If the subject geode is a process, this is the priority at which its process thread will run.</DD>
<DT>
<CODE>
appInfo</CODE>
</DT><DD>Two words of data to be passed directly to the loaded geode. For libraries and drivers, this should be a far pointer to a null-terminated string of parameters.</DD>
<DT>
<CODE>
err</CODE>
</DT><DD>A pointer to an empty <CODE>
GeodeLoadError</CODE>
 which will hold any returned error values.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you load a geode dynamically with <CODE>
GeodeLoad()</CODE>
, you must be sure to free it when you are done with <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFreeDriver()">GeodeFreeDriver()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFreeLibrary()">GeodeFreeLibrary()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_9e.htm#IX_UserLoadApplication()">UserLoadApplication()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_33.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeAllocQueue() ...</A> 
<!-- to next --> | <A HREF="R_35.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeLoadDGroup ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
