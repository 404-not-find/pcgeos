<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_63.htm,v 1.2 97/06/25 18:34:20 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: LMemAlloc() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_62.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">isalnum() ...</A> 
<!-- to next --> | <A HREF="R_64.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LMemGetChunkSize() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LMemAlloc()">
 </A>
<H1 CLASS="refHeading">
LMemAlloc()</H1>
<PRE CLASS="syntax">ChunkHandle	 LMemAlloc(
        MemHandle		mh,			/* Handle of block containing heap */
        word		chunkSize);				/* Size of new chunk in bytes */</PRE>
<P>
This routine allocates a new chunk in the LMem heap. The heap must be locked or fixed. It allocates a chunk, expanding the chunk table if enccessary, and returns the chunk's handle. The chunk is not zero-initialized. If the chunk could not be allocated, it returns a null handle. Chunks are dword-aligned, so the chunk's actual size may be slightly larger than you request.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless the block is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The heap may be compacted; thus, all pointers to chunks are invalidated. If LMF_NO_EXPAND is not set, the heap may be resized (and thus moved), thus invalidating all pointers to that block. Even fixed blocks can be resized and moved.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeref()">LMemDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_65.htm#IX_LMemReAlloc()">LMemReAlloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemContract()">
 </A>
<H1 CLASS="refHeading">
LMemContract()</H1>
<PRE CLASS="syntax">void	LMemContract(
        MemHandle		mh);		/* Handle of LMem heap */</PRE>
<P>
This routine contracts an LMem heap; that is, it deletes all the free chunks, moves all the used chunks to the beginning of the heap (right after the chunk handle table), and resizes the block to free the unused space at the end. It's a good idea to call this routine if you have just freed a lot of chunks, since that will free up some of the global heap. The LMem heap is guaranteed not to move; however, all pointers to chunks will be invalidated.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (if it isn't fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LMemDeleteAt()">
 </A>
<H1 CLASS="refHeading">
LMemDeleteAt()</H1>
<PRE CLASS="syntax">void	LMemDeleteAt(
        optr	chunk,				/* Chunk to resize */
        word	deleteOffset,				/* Offset within chunk of first 
					 * byte to be deleted */</PRE>
<PRE CLASS="syntax">        word	deleteCount);				/* # of bytes to delete */</PRE>
<P>
This routine deletes a specified number of bytes from inside a chunk. It is guaranteed not to cause the heap to be resized or compacted; thus, pointers to other chunks remain valid.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The bytes you delete must all be in the chunk. If <CODE>
deleteOffset</CODE>
 and <CODE>
deleteCount</CODE>
 indicate bytes that are not in the chunk, results are undefined.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_65.htm#IX_LMemReAlloc()">LMemReAlloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_64.htm#IX_LMemInsertAt()">LMemInsertAt()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeleteAtHandles()">LMemDeleteAtHandles()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemDeleteAtHandles()">
 </A>
<H1 CLASS="refHeading">
LMemDeleteAtHandles()</H1>
<PRE CLASS="syntax">void	LMemDeleteAtHandles(
        MemHandle		mh,				/* Handle of LMem heap */
        ChunkHandle		ch,				/* Handle of chunk to resize */
        word		deleteOffset,				/* Offset within chunk of first 
						 * byte to be deleted */</PRE>
<PRE CLASS="syntax">        word		deleteCount);				/* # of bytes to delete */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeleteAt()">LMemDeleteAt()</A></CODE>
 above, except that the chunk is specified by its global and chunk handles.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The bytes you delete must all be in the chunk. If <CODE>
deleteOffset</CODE>
 and <CODE>
deleteCount</CODE>
 indicate bytes that are not in the chunk, results are undefined.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LMemDeref()">
 </A>
<H1 CLASS="refHeading">
LMemDeref()</H1>
<PRE CLASS="syntax">void *	LMemDeref(
        optr	chunk);	/* optr to chunk to dereference */</PRE>
<P>
This routine translates an optr into the address of the chunk. The LMem heap must be locked or fixed on the global heap. Chunk addresses can be invalidated by many LMem routines, forcing you to dereference the optr again.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemDerefHandles()">LMemDerefHandles()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemDerefHandles()">
 </A>
<H1 CLASS="refHeading">
LMemDerefHandles()</H1>
<PRE CLASS="syntax">void *	LMemDerefHandles(
        MemHandle		mh,				/* Handle of LMem heap's block */
        ChunkHandle		chunk);				/* Handle of chunk to dereference */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeref()">LMemDeref()</A></CODE>
 above, except that the chunk is specified by its global and chunk handles.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeref()">LMemDeref()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemFree()">
 </A>
<H1 CLASS="refHeading">
LMemFree()</H1>
<PRE CLASS="syntax">void	LMemFree(
        optr	chunk);				/*optr of chunk to free */</PRE>
<P>
This routine frees a chunk from an LMem heap. The chunk is added to the heap's free list. The routine is guaranteed not to compact or resize the heap; thus, all pointers within the block remain valid (except for pointers to data in the freed chunk, of course).</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemFreeHandles()">LMemFreeHandles()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemFreeHandles()">
 </A>
<H1 CLASS="refHeading">
LMemFreeHandles()</H1>
<PRE CLASS="syntax">void	LMemFreeHandles(
        MemHandle		mh,				/* Handle of LMem heap */
        ChunkHandle		chunk);				/* Handle of chunk to free */</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_63.htm#IX_LMemFree()">LMemFree()</A></CODE>
 above, except that the chunk is specified by its global and chunk handles (instead of by an optr).</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_62.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">isalnum() ...</A> 
<!-- to next --> | <A HREF="R_64.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LMemGetChunkSize() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
