<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_79.htm,v 1.2 97/06/25 18:39:00 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjFreeChunk() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_78.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjDoRelocation() ...</A> 
<!-- to next --> | <A HREF="R_7a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjInitDetach() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjFreeChunk()">
 </A>
<H1 CLASS="refHeading">
ObjFreeChunk()</H1>
<PRE CLASS="syntax">void	ObjFreeChunk(
        optr	o);		/* optr of chunk to be freed */</PRE>
<P>
This routine frees the passed object's instance chunk. If the object came from a loaded resource, however, the object is resized to zero and marked dirty rather than actually freed.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The object must be fully detached, and its message queues must be empty before it can safely be freed. All this is handled by <CODE>
MSG_META_DETACH</CODE>
 and <CODE>
MSG_META_OBJ_FREE</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_META_DETACH</CODE>,
<CODE>MSG_META_OBJ_FREE</CODE>,
<CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInstantiate()">ObjInstantiate()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjFreeChunkHandles()">
 </A>
<H1 CLASS="refHeading">
ObjFreeChunkHandles()</H1>
<PRE CLASS="syntax">void	ObjFreeChunkHandles(
        MemHandle		mh,			/* handle portion of optr */
        ChunkHandle		ch);			/* chunk portion of optr */</PRE>
<P>
This routine is the same as ObjFreeChunk(); the chunk is specified by its handles rather than by an optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjFreeDuplicate()">
 </A>
<H1 CLASS="refHeading">
ObjFreeDuplicate()</H1>
<PRE CLASS="syntax">void	ObjFreeDuplicate(
        MemHandle mh);			/* handle of duplicate block to be freed */</PRE>
<P>
This routine frees a block that had been saved with <CODE>
<A HREF="../../CRef/Routines/R_7c.htm#IX_ObjSaveBlock()">ObjSaveBlock()</A></CODE>
 or created with <CODE>
<A HREF="../../CRef/Routines/R_78.htm#IX_ObjDuplicateResource()">ObjDuplicateResource()</A></CODE>
. It must be passed the memory handle of the duplicated resource.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All objects in the duplicated resource must be properly detached to ensure that nothing tries to send messages to the objects in the block. Additionally, the block's in-use count and interactable count should be zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_78.htm#IX_ObjDuplicateResource()">ObjDuplicateResource()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7c.htm#IX_ObjSaveBlock()">ObjSaveBlock()</A></CODE>,
<CODE><A HREF="../../CRef/Structs/S_2a.htm#IX_ObjLMemBlockHeader">ObjLMemBlockHeader</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjFreeMessage()">
 </A>
<H1 CLASS="refHeading">
ObjFreeMessage()</H1>
<PRE CLASS="syntax">void	ObjFreeMessage(
        EventHandle event);				/* event to be freed */</PRE>
<P>
This routine frees an event handle and its associated event. This is rarely, if ever, used by anything other than the kernel. The kernel uses this routine to free events after they have been handled.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjFreeObjBlock()">
 </A>
<H1 CLASS="refHeading">
ObjFreeObjBlock()</H1>
<PRE CLASS="syntax">void	ObjFreeObjBlock(
        MemHandle block);			/* handle of the object block to be freed */</PRE>
<P>
This routine frees the specified object block. It first checks the block's in-use count to see if any external references to the block are being kept. If the in-use count is nonzero, <CODE>
ObjFreeObjBlock()</CODE>
 simply sets the block's auto-free bit and returns; the block will be freed the first time the in-use count reaches zero. If the in-use count is zero (no external references), the block will be freed immediately.</P>
<P>
If the object block passed is not run by the calling thread, the operation will be handled by a remote call in the object block's thread.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_79.htm#IX_ObjFreeDuplicate()">ObjFreeDuplicate()</A></CODE>,
<CODE>MSG_META_BLOCK_FREE</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjGetFlags()">
 </A>
<H1 CLASS="refHeading">
ObjGetFlags()</H1>
<PRE CLASS="syntax">ObjChunkFlags ObjGetFlags(
        optr	o);		/* optr of subject object */</PRE>
<P>
This routine returns the object flags associated with a given object. The object is specified by the passed optr, and the flags are stored in the object's <CODE>
ObjChunkFlags</CODE>
 record.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_7c.htm#IX_ObjSetFlags()">ObjSetFlags()</A></CODE>,
<CODE><A HREF="../../CRef/Structs/S_2a.htm#IX_ObjChunkFlags">ObjChunkFlags</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjGetFlagsHandles()">
 </A>
<H1 CLASS="refHeading">
ObjGetFlagsHandles()</H1>
<PRE CLASS="syntax">ObjChunkFlags ObjGetFlagsHandles(
        Memhandle		mh,			/* handle portion of optr */
        ChunkHandle		ch);			/* chunk portion of optr */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_79.htm#IX_ObjGetFlags()">ObjGetFlags()</A></CODE>
, but the object is specified with its handles rather than with its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjGetMessageInfo()">
 </A>
<H1 CLASS="refHeading">
ObjGetMessageInfo()</H1>
<PRE CLASS="syntax">Message	ObjGetMessageInfo(
        EventHandle		event,				/* event to be queried */
        optr	 	* dest);				/* buffer for destination optr */</PRE>
<P>
This routine gets information about the specified <CODE>
event</CODE>
. The return value is the message number of the event. The <CODE>
dest</CODE>
 parameter is a pointer to an optr. This routine will return with the optr represinting the event's destination object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjIncDetach()">
 </A>
<H1 CLASS="refHeading">
ObjIncDetach()</H1>
<PRE CLASS="syntax">void	ObjIncDetach(
        optr	obj);		/* optr of calling object */</PRE>
<P>
This routine increments the number of detach acknowledgments an object must receive before it can safely be detached. Each time the detaching object sends notification of its detachment, it must call <CODE>
ObjIncDetach()</CODE>
 to indicate that it must receive a corresponding detach acknowledgment (<CODE>
MSG_META_ACK</CODE>
).</P>
<P>
The calling object must have previously called <CODE>
<A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitDetach()">ObjInitDetach()</A></CODE>
. Since the detach mechanism is implemented in <CODE>
MetaClass</CODE>
, it is highly unlikely you will ever need to call this routine.<CODE>
 ObjIncDetach()</CODE>
 takes a single parameter: the optr of the calling object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_META_DETACH</CODE>,
<CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitDetach()">ObjInitDetach()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_78.htm#IX_ObjEnableDetach()">ObjEnableDetach()</A></CODE>,
<CODE>MSG_META_ACK</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjIncInteractibleCount()">
 </A>
<H1 CLASS="refHeading">
ObjIncInteractibleCount()</H1>
<PRE CLASS="syntax">void	ObjIncInteractibleCount(
        MemHandle mh);			/* handle of object block */</PRE>
<P>
This routine increments the interactable count of the given object block. The interactable count maintains the number of objects currently visible to the user or about to be acted on by the user (e.g. via keyboard accelerator). The interactable count is maintained by the UI; only in extremely special cases may you need to increment or decrement the count. To decrement the count, use <CODE>
<A HREF="../../CRef/Routines/R_76.htm#IX_ObjDecInteractibleCount()">ObjDecInteractibleCount()</A></CODE>
.</P>
<P>
Visible objects increment the interactable count in their <CODE>
MSG_VIS_OPEN</CODE>
 handlers and decrement it in their <CODE>
MSG_VIS_CLOSE</CODE>
 handlers. This is built into <CODE>
VisClass</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_76.htm#IX_ObjDecInteractibleCount()">ObjDecInteractibleCount()</A></CODE>,
<CODE>MSG_VIS_OPEN</CODE>,
<CODE>MSG_VIS_CLOSE</CODE>,
<CODE><A HREF="../../CRef/Structs/S_2a.htm#IX_ObjLMemBlockHeader">ObjLMemBlockHeader</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjIncInUseCount()">
 </A>
<H1 CLASS="refHeading">
ObjIncInUseCount()</H1>
<PRE CLASS="syntax">void	ObjIncInUseCount(
        MemHandle mh);			/* handle of object block */</PRE>
<P>
This routine increments the given object block's in-use count. The in-use count maintains the number of outside references to this object block which are stored elsewhere and which need to be removed before the block can safely be freed. If you store an optr to an object block, you should increment the in-use count of the block.</P>
<P>
When the reference to the block is removed, the in-use count should be decremented with <CODE>
<A HREF="../../CRef/Routines/R_76.htm#IX_ObjDecInUseCount()">ObjDecInUseCount()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_76.htm#IX_ObjDecInUseCount()">ObjDecInUseCount()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_79.htm#IX_ObjIncInteractibleCount()">ObjIncInteractibleCount()</A></CODE>,
<CODE><A HREF="../../CRef/Structs/S_2a.htm#IX_ObjLMemBlockHeader">ObjLMemBlockHeader</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_78.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjDoRelocation() ...</A> 
<!-- to next --> | <A HREF="R_7a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjInitDetach() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
