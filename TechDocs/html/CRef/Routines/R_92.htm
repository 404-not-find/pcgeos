<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_92.htm,v 1.2 97/06/25 18:44:01 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: StreamWrite() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_91.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">StreamOpen() ...</A> 
<!-- to next --> | <A HREF="R_93.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SysGetPenMode() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_StreamWrite()">
 </A>
<H1 CLASS="refHeading">
StreamWrite()</H1>
<PRE CLASS="syntax">StreamError StreamWrite (
        GeodeHandle 		driver,
        StreamToken 		stream,
        StreamBlocker 		blocker,
        word 		buffSize,
        const byte *		buffer,
        word *		numBytesWritten);</PRE>
<P>
This routine writes data to a stream. The routine takes the following arguments:</P>
<DL>
<DT>
<CODE>
driver</CODE>
</DT><DD>The <CODE>
GeodeToken</CODE>
 of the stream driver.</DD>
<DT>
<CODE>
stream</CODE>
</DT><DD>The <CODE>
StreamToken</CODE>
 of the stream.</DD>
<DT>
<CODE>
blocker</CODE>
</DT><DD>Specify whether to block if there is not enough room to write all the data.</DD>
<DT>
<CODE>
buffsize</CODE>
</DT><DD>Size of passed data buffer (i.e. amount of data to write to stream).</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>Pointer to data to write to stream.</DD>
<DT>
<CODE>
*numBytesWritten</DT><DD>
</CODE>
<CODE>
StreamWrite()</CODE>
 will write to this variable the number of bytes actually written to the stream.</DD>
</DL>
<P>
If <CODE>
StreamWrite()</CODE>
 is successful, it returns zero. If it is unsuccessful, or could not write all the data to the stream, it returns a member of the <CODE>
StreamError</CODE>
 enumerated type.</P>
</DIV>
<DIV>
<A NAME="IX_StreamWriteByte()">
 </A>
<H1 CLASS="refHeading">
StreamWriteByte()</H1>
<PRE CLASS="syntax">StreamError StreamWriteByte (
        GeodeHandle 		driver,
        StreamToken 		stream,
        StreamBlocker 		blocker,
        byte 		dataByte);</PRE>
<P>
This routine writes a single byte to a stream. It takes the following arguments:</P>
<DL>
<DT>
<CODE>
driver</CODE>
</DT><DD>The <CODE>
GeodeToken</CODE>
 of the stream driver.</DD>
<DT>
<CODE>
stream</CODE>
</DT><DD>The <CODE>
StreamToken</CODE>
 of the stream.</DD>
<DT>
<CODE>
blocker</CODE>
</DT><DD>Specify whether to block if there is not enough room to write the data.</DD>
<DT>
<CODE>
dataByte</CODE>
</DT><DD>Write this byte to the stream.</DD>
</DL>
<P>
If the routine is successful, it returns zero. If it is unsuccessful, it returns a member of the <CODE>
StreamError</CODE>
 enumerated type.</P>
</DIV>
<DIV>
<A NAME="IX_SysGetConfig()">
 </A>
<H1 CLASS="refHeading">
SysGetConfig()</H1>
<PRE CLASS="syntax">dword	SysGetConfig();</PRE>
<P>
This routine returns a set of values defining the system configuration. The returned dword contains four byte values, listed below from least significant byte to most significant byte:</P>
<DL>
<DT>
<STRONG>
configuration flags</DT><DD>
</STRONG>
This byte contains a record of <CODE>
SysConfigFlags</CODE>
 reflecting the system status. This record includes information on how the system was started, whether Swat is running it, whether the system was restarted, etc.</DD>
<DT>
<STRONG>
reserved byte</DT><DD>
</STRONG>
This byte contains reserved information unusable by applications.</DD>
<DT>
<STRONG>
processor type</DT><DD>
</STRONG>
This byte contains a value reflecting the processor type of the machine running GEOS. This is of type <CODE>
SysProcessorType</CODE>
 and is one of SPT_8088, SPT_8086, SPT_80186, SPT_80286, SPT_80386, or SPT_80486. Use the macro SGC_PROCESSOR() to extract this value from the returned dword.</DD>
<DT>
<STRONG>
machine type</DT><DD>
</STRONG>
This byte contains a value of <CODE>
SysMachineType</CODE>
 indicating the type of the machine running GEOS. It may be one of the following values: SMT_UNKNOWN, SMT_PC, SMT_PC_CONV, SMT_PC_JR, SMT_PC_XT, SMT_PC_XT_286, SMT_PC_AT, SMT_PS2_30, SMT_PS2_50, SMT_PS2_60, SMT_PS2_80, or SMT_PS1. Use the macro SGC_MACHINE() to extract this value from the returned dword.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
system.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SysGetDosEnvironment()">
 </A>
<H1 CLASS="refHeading">
SysGetDosEnvironment()</H1>
<PRE CLASS="syntax">Boolean	SysGetDosEnvironment( /* true if error (not found) */
        const char		* variable,				/* environment variable */
        char		* buffer,				/* buffer for return value */
        word		bufSize);				/* maximum return string length */</PRE>
<P>
This routine looks up a specified DOS environment variable in the environment buffer. It takes three parameters:</P>
<DL>
<DT>
<CODE>
variable</CODE>
</DT><DD>A pointer to the null-terminated character string representing the name of the variable to be searched for.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a locked or fixed buffer in which the variable's value will be returned.</DD>
<DT>
<CODE>
bufSize</CODE>
</DT><DD>The size of the passed buffer in bytes (the maximum number of characters that can be returned including the terminating null character).</DD>
</DL>
<P>
If the variable is not found, the error flag returned will be <CODE>
true</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
system.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ErrorCheckingFlags:SysGetECLevel()">
 </A>
<A NAME="IX_SysGetECLevel()">
 </A>
<A NAME="IX_Error checking:SysGetECLevel()">
 </A>
<H1 CLASS="refHeading">
SysGetECLevel()</H1>
<PRE CLASS="syntax">ErrorCheckingFlags SysGetECLevel(
        MemHandle * checksumBlock);</PRE>
<P>
This routine checks the current error-checking level of the system. The returned record of <CODE>
ErrorCheckingFlags</CODE>
 describes which levels of error checking are turned on and which are off. If checksum error checking (ECF_BLOCK_CHECKSUM) is on, pass a pointer to the handle of a block on which the checksum will be done.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SysGetInfo()">
 </A>
<A NAME="IX_SysGetInfoType">
 </A>
<A NAME="IX_SGIT_&ldots;">
 </A>
<A NAME="IX_Handles:finding number of">
 </A>
<A NAME="IX_Heap:finding size of">
 </A>
<A NAME="IX_Volumes (file system):finding number of">
 </A>
<A NAME="IX_Geodes:finding number of">
 </A>
<A NAME="IX_Libraries:finding number of">
 </A>
<A NAME="IX_Drivers:finding number of">
 </A>
<A NAME="IX_Performance:CPU speed">
 </A>
<H1 CLASS="refHeading">
SysGetInfo()</H1>
<PRE CLASS="syntax">dword	SysGetInfo(
        SysGetInfoType info);			/* type of information to retrieve */</PRE>
<P>
This routine returns general system information. Pass the type of information to be returned; the value returned depends on the type passed in <CODE>
info</CODE>
. Note that the largest returned value is a dword; many different return values should be cast to the appropriate type when calling <CODE>
SysGetInfo()</CODE>
.</P>
<P>
The <CODE>
info</CODE>
 parameter (of <CODE>
SysGetInfoType</CODE>
) can have one of the following values:</P>
<DL>
<DT>
SGIT_TOTAL_HANDLES</DT><DD>
Returns the total number of handles in the kernel's handle table.</DD>
<DT>
SGIT_HEAP_SIZE</DT><DD>
Returns the total heap size in bytes.</DD>
<DT>
SGIT_LARGEST_FREE_BLOCK</DT><DD>
Returns the size (in bytes) of the largest possible block that may be allocated at the moment.</DD>
<DT>
SGIT_TOTAL_COUNT</DT><DD>
Returns the total number of clock ticks since the current session of GEOS started (subtracts the initial system clock value from the current time).</DD>
<DT>
SGIT_NUMBER_OF_VOLUMES</DT><DD>
Returns the total number of volumes registered with the system.</DD>
<DT>
SGIT_TOTAL_GEODES</DT><DD>
Returns the total number of geodes currently loaded.</DD>
<DT>
SGIT_NUMBER_OF_PROCESSES</DT><DD>
Returns the total number of processes currently loaded.</DD>
<DT>
SGIT_NUMBER_OF_LIBRARIES</DT><DD>
Returns the total number of libraries currently loaded.</DD>
<DT>
SGIT_NUMBER_OF_DRIVERS</DT><DD>
Returns the total number of drivers currently loaded.</DD>
<DT>
SGIT_CPU_SPEED</DT><DD>
Returns the CPU speed of the processor. The value returned will be ten times the ratio of the CPU speed relative to a base XT processor.</DD>
<DT>
SGIT_SYSTEM_DISK</DT><DD>
Returns the disk handle of the disk on which GEOS (the GEOS.INI file) resides.</DD>
<DT>
SGIT_UI_PROCESS</DT>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
sysstats.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_91.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">StreamOpen() ...</A> 
<!-- to next --> | <A HREF="R_93.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SysGetPenMode() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
