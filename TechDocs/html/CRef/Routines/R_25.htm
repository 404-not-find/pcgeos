<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_25.htm,v 1.2 97/06/25 18:15:44 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FileCreate() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_24.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FatalError() ...</A> 
<!-- to next --> | <A HREF="R_26.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileDeleteDir() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FileCreate()">
 </A>
<H1 CLASS="refHeading">
FileCreate()</H1>
<PRE CLASS="syntax">FileHandle 	FileCreate( /* sets thread's error value */
        const char		* name,				/* relative to working directory */
        FileCreateFlags		flags,				/* see below */
        FileAttrs		attributes);				/* FileAttrs of new file */</PRE>
<P>
This routine creates a byte file. The file may be a DOS file or a GEOS byte file. If the file is successfully opened, <CODE>
FileCreate()</CODE>
 will return the file's handle; otherwise, it will return a null handle and set the thread's error value.</P>
<P>
The second parameter is a word-length <CODE>
FileCreateFlags</CODE>
 record. The third parameter, <CODE>
attributes</CODE>
, describes the <CODE>
FileAttrs</CODE>
 record to be set for the new file.</P>
<P>
If successful, <CODE>
FileCreate()</CODE>
 returns the file's handle. If it is unsuccessful, it returns a null handle and sets the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
). The following error values are commonly returned:</P>
<DL>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
A relative or absolute path was passed, and the path included a directory which did not exist.</DD>
<DT>
ERROR_TOO_MANY_OPEN_FILES</DT><DD>
There is a limit to how many files may be open at once. If this limit is reached, <CODE>
FileCreate()</CODE>
 will fail until a file is closed.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
Either the caller requested access which could not be granted (e.g. it requested write access when another geode had already opened the file with FILE_DENY_W), or the caller tried to deny access when that access had already been granted to another geode (e.g. it tried to open the file with FILE_DENY_W when another geode already had it open for write-access).</DD>
<DT>
ERROR_WRITE_PROTECTED</DT><DD>
The caller requested write or read-write access to a file in a write-protected volume.</DD>
<DT>
ERROR_FILE_EXISTS</DT><DD>
Returned if <CODE>
FileCreate()</CODE>
 was called with FILE_CREATE_ONLY and a file with the specified name already exists.</DD>
<DT>
ERROR_FILE_FORMAT_MISMATCH</DT><DD>
Returned if <CODE>
FileCreate()</CODE>
 was called with FILE_CREATE_TRUNCATE or FILE_CREATE_NO_TRUNCATE and a file exists in a different format than desired; i.e. you passed FCF_NATIVE and the file already exists in the GEOS format, or vice versa.</DD>
</DL>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	An example of usage is shown below.</P>
<P CLASS="figTitle">
Example of FileCreate() usage</P>
<PRE>/* Here we create a DOS file in the current working directory. If the file already
 * exists, we open the existing file and truncate it.
 */</PRE>
<PRE>	FileHandle		newFile;</PRE>
<PRE>	newFile = 		FileCreate(&quot;NEWFILE.TXT&quot;,
					( (FILE_CREATE_TRUNCATE | FCF_NATIVE)
					 | (FILE_ACCESS_RW | FILE_DENY_RW)),
					0); /* set no attribute bits */</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_25.htm#IX_FileCreateTempFile()">FileCreateTempFile()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2a.htm#IX_FileOpen()">FileOpen()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Directories (file system):creation">
 </A>
<A NAME="IX_FileCreateDir()">
 </A>
<H1 CLASS="refHeading">
FileCreateDir()</H1>
<PRE CLASS="syntax">word	FileCreateDir( /* Returns error &amp; sets thread's error value */
        const char * name);				/* Relative path of new directory */</PRE>
<P>
This routine creates a new directory. The parameter is a path string; the path is relative to the current directory. The last element of the path string must be the directory to create.</P>
<P>
If <CODE>
FileCreateDir()</CODE>
 is successful, it returns zero and clears the thread's error value. Otherwise, it returns an error code and sets the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
). The following errors are returned:</P>
<DL>
<DT>
ERROR_PATH_TOO_LONG</DT><DD>
The path string was longer than is permitted by the file system for that device.</DD>
<DT>
ERROR_FILE_EXISTS</DT><DD>
A file or directory with the specified name already exists at the specified location.</DD>
<DT>
ERROR_INVALID_NAME</DT><DD>
The name passed was inappropriate for directories on that device.</DD>
<DT>
ERROR_DISK_STALE</DT><DD>
The drive that disk was on has been removed.</DD>
<DT>
ERROR_DISK_UNAVAILABLE</DT><DD>
The validation of the disk in that drive was aborted by the user.</DD>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
The path string was in some way invalid; for example, it might have instructed <CODE>
FileCreateDir()</CODE>
 to create the directory within a directory which does not exist.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
The thread is not able to create directories in the specified location, or a directory with the specified name already exists.</DD>
<DT>
ERROR_WRITE_PROTECTED</DT><DD>
The volume is write-protected.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_26.htm#IX_FileDeleteDir()">FileDeleteDir()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileCreateTempFile()">
 </A>
<H1 CLASS="refHeading">
FileCreateTempFile()</H1>
<PRE CLASS="syntax">FileHandle FileCreateTempFile( /* Sets thread's error value */
        char		* dir,		/* directory, relative to working dir.;
					 * file name replaces 14 trailing null
					 * characters upon return */</PRE>
<PRE CLASS="syntax">        FileCreateFlags		flags,
        FileAttrs		attributes);</PRE>
<P>
This routine creates and opens a temporary file in the directory specified. The routine automatically selects a name for the temporary file. No creation flags are needed, since the file will definitely be created anew and will be used only by this geode. The directory string must end with fourteen null bytes (enough to be replaced by the new file's name).</P>
<P>
If <CODE>
FileCreateTempFile()</CODE>
 is successful, it returns the file's handle as well as the string passed in <CODE>
dir</CODE>
, with the trailing null characters replaced by the file name. If it is unsuccessful, it returns a null handle and sets the thread's error value to a member of the <CODE>
FileError</CODE>
 enumerated type. (This error value is accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
.)</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Temporary files are usually created in a subdirectory of SP_PRIVATE_DATA.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_25.htm#IX_FileCreate()">FileCreate()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileDelete()">
 </A>
<H1 CLASS="refHeading">
FileDelete()</H1>
<PRE CLASS="syntax">word	FileDelete( /* returns error */
        const char * name);			/* path relative to working directory */</PRE>
<P>
This routine deletes a file. If it is successful, it returns zero; otherwise, it returns a <CODE>
FileError</CODE>
. Common errors include:</P>
<DL>
<DT>
ERROR_FILE_NOT_FOUND</DT><DD>
No such file exists in the specified directory.</DD>
<DT>
ERROR_WRITE_PROTECTED</DT><DD>
The volume is write-protected.</DD>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
An invalid path string was passed.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
You do not have permission to delete that file.</DD>
<DT>
ERROR_FILE_IN_USE</DT><DD>
Some geode has that file open.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_24.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FatalError() ...</A> 
<!-- to next --> | <A HREF="R_26.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileDeleteDir() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
