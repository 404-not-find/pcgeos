<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_75.htm,v 1.2 97/06/25 18:38:09 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjCompFindChildByOptr() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_74.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">NameArrayFind() ...</A> 
<!-- to next --> | <A HREF="R_76.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjCompProcessChildren() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjCompFindChildByOptr()">
 </A>
<H1 CLASS="refHeading">
ObjCompFindChildByOptr()</H1>
<PRE CLASS="syntax">word	ObjCompFindChildByOptr(
        optr	obj,		/* parent's optr */
        optr	childToFind,		/* optr of child to find */
        word	masterOffset,		/* offset to master part */
        word	compOffset,		/* offset to comp field in master part */
        word	linkOffset);		/* offset to link field in master part */</PRE>
<P>
This routine returns the zero-based child number of an object given its optr and its parent's optr. The returned number represents the child's position in its parent's child list. For example, a return value of zero indicates the object is the parent's first child. You will not likely use this routine; instead, you will probably use the messages shown below under &quot;See Also.&quot;</P>
<P>
The parameters for this routine are listed below:</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the parent object.</DD>
<DT>
<CODE>
childToFind</DT><DD>
</CODE>
The optr of the child whose number is to be returned. If the child is not found, the routine will return -1.</DD>
<DT>
<CODE>
masterOffset</DT><DD>
</CODE>
The offset within the parent's instance chunk to the master group's offset. (The value that would appear in the parent class' <CODE>
Class_masterOffset</CODE>
 field in its <CODE>
ClassStruct</CODE>
 structure.)</DD>
<DT>
<CODE>
compOffset</CODE>
</DT><DD>The offset within the parent's instance chunk to the composite field.</DD>
<DT>
<CODE>
linkOffset</CODE>
</DT><DD>The offset within the parent's instance chunk to the link field.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_GEN_FIND_CHILD</CODE>,
<CODE>MSG_VIS_FIND_CHILD</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjCompMoveChild()">
 </A>
<H1 CLASS="refHeading">
ObjCompMoveChild()</H1>
<PRE CLASS="syntax">void	ObjCompMoveChild(
        optr	obj,		/* parent's optr */
        optr	objToMove,		/* optr of child to move */
        word	flags,		/* CompChildFlags */
        word	masterOffset,		/* offset to master part */
        word	compOffset,		/* offset to comp field in master part */
        word	linkOffset);		/* offset to link field in master part */</PRE>
<P>
This routine moves the specified child within its parent's child list. This routine will not move a child from one parent to another, but it can reorganize a parent's children. You will not likely use this routine, but you may often use the messages listed under &quot;See Also&quot; below.</P>
<P>
The parameters of this routine are shown below:</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the parent object.</DD>
<DT>
<CODE>
objToMove</CODE>
</DT><DD>The optr of the child to be moved. If the optr does not point to a valid child, behavior is undefined and an error is likely.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
CompChildFlags</CODE>
 indicating the new position of the child and whether the link should be marked dirty.</DD>
<DT>
<CODE>
masterOffset</DT><DD>
</CODE>
The offset within the parent's instance chunk to the master group's offset. (The value that would appear in the parent class' <CODE>
Class_masterOffset</CODE>
 field in its <CODE>
ClassStruct</CODE>
 structure.)</DD>
<DT>
<CODE>
compOffset</CODE>
</DT><DD>The offset within the parent's instance chunk to the composite field.</DD>
<DT>
<CODE>
linkOffset</CODE>
</DT><DD>The offset within the parent's instance chunk to the link field.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may cause LMem and/or Object Blocks to move or to shuffle their chunks, thereby invalidating any segment addresses or pointers.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_GEN_MOVE_CHILD</CODE>,
<CODE>MSG_VIS_MOVE_CHILD</CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_74.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">NameArrayFind() ...</A> 
<!-- to next --> | <A HREF="R_76.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjCompProcessChildren() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
