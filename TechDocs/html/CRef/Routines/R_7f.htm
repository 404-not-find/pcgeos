<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_7f.htm,v 1.2 97/06/25 18:40:26 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjVarScanData() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjVarDeleteDataAt() ...</A> 
<!-- to next --> | <A HREF="R_80.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ParallelClose() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjVarScanData()">
 </A>
<H1 CLASS="refHeading">
ObjVarScanData()</H1>
<PRE CLASS="syntax">void	ObjVarScanData(
        optr		obj,					/* object to be scanned */
        word		numHandlers,					/* number of handlers in table */
        VarDataCHandler		* handlerTable,					/* pointer to handler table */
        void		* handlerData);					/* pointer to handler data */</PRE>
<P>
This routine scans an object's vardata and calls all the vardata handlers specified in the passed handler table. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object whose variable data table is to be scanned.</DD>
<DT>
<CODE>
numHandlers</DT><DD>
</CODE>
The number of handlers specified in the passed handler table.</DD>
<DT>
<CODE>
handlerTable</DT><DD>
</CODE>
A pointer to a list of <CODE>
VarDataCHandler</CODE>
 structures. Each of these structures contains a vardata data type and a pointer to the routine that is to handle it. All the handler routines must be in the same segment as the handler table.</DD>
<DT>
<CODE>
handlerData</DT><DD>
</CODE>
A pointer to a buffer that is passed on to the handlers. This can contain any information of specific interest to the application or handlers.</DD>
</DL>
<P CLASS="refField"><STRONG>
<STRONG>
Vardata Handler Format:</STRONG><BR>
</STRONG>
A vardata handler routine must have the following format:</P>
<PRE>void _pascal (MemHandle mh, ChunkHandle chnk,
	VarDataEntry *extraData, word dataType,
	void *handlerData)</PRE>
<P>
The handler should not free the object chunk or destroy the object; it can do anything else it pleases. The handler returns nothing and takes the following parameters:</P>
<DL>
<DT>
<CODE>
mh:chnk</CODE>
</DT><DD>The memory handle and chunk handle of the object being referenced. Together, these comprise the optr of the object.</DD>
<DT>
<CODE>
extraData</CODE>
</DT><DD>A pointer to the data type's extra data, if it has any. This pointer may be parsed with the macros <CODE>
<A HREF="../../CRef/Routines/R_a0.htm#IX_VarDataTypePtr() macro">VarDataTypePtr()</A></CODE>
, <CODE>
<A HREF="../../CRef/Routines/R_a0.htm#IX_VarDataFlagsPtr() macro">VarDataFlagsPtr()</A></CODE>
, and <CODE>
<A HREF="../../CRef/Routines/R_a0.htm#IX_VarDataSizePtr() macro">VarDataSizePtr()</A></CODE>
.</DD>
<DT>
<CODE>
dataType</CODE>
</DT><DD>The data type of the data entry being handled. This is a record of type <CODE>
VardataKey</CODE>
.</DD>
<DT>
<CODE>
handlerData</DT><DD>
</CODE>
A pointer to a buffer passed through by <CODE>
ObjVarScanData()</CODE>
. This buffer may be used for passing additional data to the handlers.</DD>
</DL>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	The <CODE>
VarDataCHandler</CODE>
 structure contains two elements:</P>
<PRE>typedef struct {
    word		VDCH_dataType;
    void	_pascal 	(*VDCH_handler) (
			MemHandle		mh,
			ChunkHandle		chnk,
			VarDataEntry		* extraData,
			word		dataType
			void		* handlerData);
} VarDataCHandler;</PRE>
<P>
The first element is the data type, a record containing the data type and the vardata flags. The second element is a far pointer to the handler routine for the type.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
object.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ObjVarScanDataHandles()">
 </A>
<H1 CLASS="refHeading">
ObjVarScanDataHandles()</H1>
<PRE CLASS="syntax">void	ObjVarScanDataHandles(
        MemHandle		mh,				/* handle portion of optr */
        ChunkHandle		ch,				/* chunk portion of optr */
        word		numHandlers,					/* number of handlers in table */
        VarDataCHandler		* handlerTable,					/* pointer to handler table */
        void		* handlerData);					/* pointer to handler data */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7f.htm#IX_ObjVarScanData()">ObjVarScanData()</A></CODE>
 except that the object is specified via its handles rather than its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
object.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_offsetof()">
 </A>
<H1 CLASS="refHeading">
offsetof()</H1>
<PRE CLASS="syntax">word	offsetof(<EM>struc</EM>, <EM>field</EM>);</PRE>
<P>
This macro returns the offset of the specified field within the specified structure.</P>
</DIV>
<DIV>
<A NAME="IX_OptrToChunk()">
 </A>
<H1 CLASS="refHeading">
OptrToChunk()</H1>
<PRE CLASS="syntax">ChunkHandle OptrToChunk(<EM>op</EM>);
        optr	<EM>op</EM>;</PRE>
<P>
This macro extracts the chunk handle portion of the given optr.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ConstructOptr() macro">ConstructOptr()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToHandle()">OptrToHandle()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_OptrToHandle()">
 </A>
<H1 CLASS="refHeading">
OptrToHandle()</H1>
<PRE CLASS="syntax">MemHandle OptrToHandle(<EM>op</EM>);
        optr	<EM>op</EM>;</PRE>
<P>
This macro extracts the MemHandle portion of the given optr.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_d.htm#IX_ConstructOptr() macro">ConstructOptr()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7f.htm#IX_OptrToChunk()">OptrToChunk()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_7e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjVarDeleteDataAt() ...</A> 
<!-- to next --> | <A HREF="R_80.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ParallelClose() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
