<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9.htm,v 1.2 97/06/25 18:43:32 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ChunkArraySort() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ChunkArrayGetCountHandles() ...</A> 
<!-- to next --> | <A HREF="R_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ClipboardClearQuickTransferNotification() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ChunkArraySort()">
 </A>
<H1 CLASS="refHeading">
ChunkArraySort()</H1>
<PRE CLASS="syntax">void	ChunkArraySort(
        optr		array,					/* optr to chunk array */
        word		valueForCallback,					/* Passed to callback routine */
        sword _pascal (*callback)				(void *el1, 
				 void * el2, 
				 word valueForCallback))
	/* Sign of return value decides order of elements */</PRE>
<P>
This is a general-purpose sort routine for chunk arrays. It does a modified Quicksort on the array, using an insertion sort for subarrays below a certain size.</P>
<P>
The sort routine does not compare elements. Rather, it calls a comparison callback routine passed in the <CODE>
callback</CODE>
 parameter. Whenever it needs to compare two elements, it calls the callback routine, passing the addresses of the elements and the <CODE>
valueForCallback</CODE>
 word which was passed to <CODE>
ChunkArraySort()</CODE>
. The callback routine should be declared _pascal. The callback routine's return value determines which element will come first in the sorted array:</P>
<UL>
<LI>
If element <CODE>
el1</CODE>
 ought to come before <EM>
el2</EM>
 in the sorted array, the callback routine should return a negative integer.</LI>
<LI>
If element <CODE>
el1</CODE>
 ought to come after <EM>
el2</EM>
 in the sorted array, the callback routine should return a positive integer.</LI>
<LI>
If it doesn't matter whether <CODE>
el1</CODE>
 comes before or after <EM>
el2</EM>
 in the sorted array, the callback routine should return zero.</LI>
</UL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You may need to sort an array based on different criteria at different times. The simplest way to do this is to write one general-purpose callback routine and have the <CODE>
valueForCallback</CODE>
 word determine how the sort is done. For example, the same callback routine could sort the array in ascending or descending order, depending on the <CODE>
valueForCallback</CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not have the callback routine do anything which might invalidate pointers to the array (such as allocate a new chunk or element).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3.htm#IX_ArrayQuickSort()">ArrayQuickSort()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArraySortHandles()">
 </A>
<H1 CLASS="refHeading">
ChunkArraySortHandles()</H1>
<PRE CLASS="syntax">void	ChunkArraySortHandles(
        MemHandle		memHandle,					/* Handle of LMem heap's block */
        ChunkHandle		chunkHandle,					/* Handle chunk array */
        word		valueForCallback,					/* Passed to callback routine */
        sword _pascal(*callback)(void *el1, void * el2, word valueForCallback)
	/* Sign of return value decides order of elements */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_9.htm#IX_ChunkArraySort()">ChunkArraySort()</A></CODE>
 above, except that the chunk array is specified by its global and chunk handles (instead of by an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayZero()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayZero()</H1>
<PRE CLASS="syntax">void	ChunkArrayZero(
        optr	array);		/* optr to chunk array */</PRE>
<P>
This routine destroys all the elements in an array. It does not affect the extra-space area between the <CODE>
ChunkArrayHeader</CODE>
 and the elements. It is guaranteed not to cause heap compaction or resizing; thus, pointers to other chunks remain valid.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6.htm#IX_ChunkArrayDelete()">ChunkArrayDelete()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayZeroHandles()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayZeroHandles()</H1>
<PRE CLASS="syntax">void	ChunkArrayZeroHandles(
        MemHandle		mh		/* Global handle of LMem heap */
        ChunkHandle		ch);		/* Chunk handle of chunk array */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_9.htm#IX_ChunkArrayZero()">ChunkArrayZero()</A></CODE>
 above, except that the chunk array is specified by its global and chunk handles (instead of by an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ClipboardAbortQuickTransfer()">
 </A>
<H1 CLASS="refHeading">
ClipboardAbortQuickTransfer()</H1>
<PRE CLASS="syntax">void	ClipboardAbortQuickTransfer(void);</PRE>
<P>
This routine cancels a quick-transfer operation in progress. It is typically used when an object involved in a quick-transfer is shutting down or when an error occurs in a quick-transfer. This routine is usually used only by the object or Process which initiated the quick-transfer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ClipboardAddToNotificationList()">
 </A>
<H1 CLASS="refHeading">
ClipboardAddToNotificationList()</H1>
<PRE CLASS="syntax">void	ClipboardAddToNotificationList(
        optr	notificationOD);</PRE>
<P>
This routine registers the passed object or process for quick-transfer notification. This routine is typically called from within an object's <CODE>
MSG_META_INITIALIZE</CODE>
 handler or within a Process object's <CODE>
MSG_GEN_PROCESS_OPEN_APPLICATION</CODE>
 handler. Pass the optr of the object or the geode handle if the Process object should be registered.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
clipbrd.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_b.htm#IX_ClipboardRemoveFromNotificationList()">ClipboardRemoveFromNotificationList()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ChunkArrayGetCountHandles() ...</A> 
<!-- to next --> | <A HREF="R_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ClipboardClearQuickTransferNotification() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
