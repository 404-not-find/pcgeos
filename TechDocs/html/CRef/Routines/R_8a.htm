<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_8a.htm,v 1.2 97/06/25 18:42:27 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: SocketRemoveLoadOnMsg() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_89.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketInterrupt() ...</A> 
<!-- to next --> | <A HREF="R_8b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundAllocMusic() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SocketRemoveLoadOnMsg()">
 </A>
<H1 CLASS="refHeading">
SocketRemoveLoadOnMsg()</H1>
<PRE CLASS="syntax">SocketError SocketRemoveLoadOnMsg(
        SocketPort p);</PRE>
<P>
If you've requested the Socket library to load a program when it senses packets coming to a port, you can undo that request by calling <CODE>
SocketRemoveLoadOnMsg()</CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_85.htm#IX_SocketAddLoadOnMsg()">SocketAddLoadOnMsg()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketRemoveLoadOnMsgInDomain()">
 </A>
<H1 CLASS="refHeading">
SocketRemoveLoadOnMsgInDomain()</H1>
<PRE CLASS="syntax">SocketError SocketRemoveLoadOnMsgInDomain(
        SocketPort 		p,
        TCHAR 		*domain);</PRE>
<P>
If you've requested the Socket library to load a program when it senses packets coming to a port in a given domain, you can undo that request by calling <CODE>
SocketRemoveLoadOnMsgInDomain()</CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_85.htm#IX_SocketAddLoadOnMsgInDomain()">SocketAddLoadOnMsgInDomain()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketResolve()">
 </A>
<H1 CLASS="refHeading">
SocketResolve()</H1>
<PRE CLASS="syntax">int SocketResolve( 
        char 		*domainName,
        byte 		*rawAddr,
        int 		addrSize,
        byte 		*result,
        int 		resultBuffSize );</PRE>
<P>
You cannot use an address with other Socket library routines unless that address is in its most primitive form. This primitive form is created by taking a higher-level form of the address and passing it to the <CODE>
SocketResolve()</CODE>
 routine. You will recall that addresses returned by the address controller will not be in their most primitive form. The primitive form of an address can be volatile: feel free to re-use them if making several connections over a short period of time, but re-resolve the address if it's been a long time since it was last resolved. Note that there can be a large overhead when it comes to resolving addresses.</P>
<P>
This routine takes the following arguments:</P>
<DL>
<DT>
<STRONG>
domainName</DT><DD>
</STRONG>
Buffer containing null-terminated domain name string.</DD>
<DT>
<STRONG>
rawAddr</STRONG>
</DT><DD>Buffer containing the unresolved form of the address. Normally, this will be the buffer at the end of a <CODE>
SACAddress</CODE>
 returned by a SocketAddressControl in response to <CODE>
MSG_SOCKET_ADDRESS_CONTROL_GET_ADDRESSES</CODE>
. </DD>
<DT>
</DT><DD>If you aren't resolving an address from a SocketAddressControl, but in fact need to construct a raw address from scratch, see the documentation for <CODE>
SACAddress</CODE>
.</DD>
<DT>
<STRONG>
addrSize</STRONG>
</DT><DD>Size of the <EM>
rawAddr</EM>
 buffer, normally the <CODE>
SACA_opaqueSize</CODE>
 field from a SACAddress returned by a SocketAddressControl in response to <CODE>
MSG_SOCKET_ADDRESS_CONTROL_GET_ADDRESSES</CODE>
.</DD>
<DT>
<STRONG>
result</STRONG>
</DT><DD>Buffer to hold the resolved address. This will normally be a buffer trailing a <CODE>
SocketAddress</CODE>
 structure.</DD>
<DT>
<STRONG>
resultBufferSize</DT><DD>
</STRONG>
Size of the <EM>
result</EM>
 buffer.</DD>
</DL>
<P>
It returns the size of the resolved address. If it returns zero, there was an error. Call <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
 to find out what the error was. Typical errors to look out for are SE_BUFFER_TOO_SMALL, SE_DESTINATION_UNREACHABLE, and SE_TEMPORARY_ERROR.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketSend()">
 </A>
<H1 CLASS="refHeading">
SocketSend()</H1>
<PRE CLASS="syntax">SocketError SocketSend(
        Socket 		s,
        void 		*buffer,
        int 		bufSize,
        SocketSendFlags 		flags,
        SocketAddress 		*addr);</PRE>
<P>
The <CODE>
SocketSend()</CODE>
 routine sends data over a socket. It takes several arguments:</P>
<DL>
<DT>
<EM>
s</EM>
</DT><DD>The socket through which to send the data</DD>
<DT>
<EM>
buffer</EM>
</DT><DD>A buffer containing the data to send</DD>
<DT>
<EM>
bufSize</EM>
</DT><DD>The size of the data buffer.</DD>
<DT>
<EM>
flags</EM>
</DT><DD>Options to use when sending. Set SSF_ADDRESS if you're passing an address in <EM>
addr</EM>
. Set SSF_URGENT to mark the packet urgent.</DD>
<DT>
<EM>
addr</DT><DD>
</EM>
Address to which to send data.</DD>
<DT>
</DT><DD>If the socket is a sequenced packet or stream delivery type socket, then this optional address will be ignored.</DD>
<DT>
</DT><DD>If the socket is a datagram delivery type socket, specify the destination address of the packet here unless the socket has a default destination address as described below.</DD>
<DT>
</DT><DD>Datagram sockets can use the <CODE>
<A HREF="../../CRef/Routines/R_87.htm#IX_SocketConnect()">SocketConnect()</A></CODE>
 routine to specify a default destination address. If they have no default address, then you must specify the destination address for the packet here. If there is a default destination address and you pass this optional address and those addresses do not match, then the Socket library will generate a fatal error.</DD>
</DL>
<P>
Normally, <CODE>
SocketSend()</CODE>
 will return SE_NORMAL. If it detects an error, it may return some other <CODE>
SocketError</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SocketSetIntSocketOption()">
 </A>
<H1 CLASS="refHeading">
SocketSetIntSocketOption()</H1>
<PRE CLASS="syntax">void	SocketSetIntSocketOption(
        Socket		skt,
        SocketOption		opt,
        int		newval);</PRE>
<P>
This routine changes the setting for one of a socket's options. </P>
<P>
This routine takes the following arguments:</P>
<DL>
<DT>
<EM>skt</EM></DT><DD>The socket.</DD>
<DT>
<EM>opt</EM></DT><DD>Which option to change. The following options are available:</DD>
<DT>
</DT><DD>SO_RECV_BUF: the maximum size of the socket's buffer for incoming data. A value of -1 means no limit.</DD>
<DT>
</DT><DD>SO_SEND_BUF: the maximum size of the socket's buffer for outgoing data. A value of -1 means no limit.</DD>
<DT>
</DT><DD>SO_INLINE: Non-zero if urgent data is forced into the same queue as regular data; zero to treat urgent data specially.</DD>
<DT>
</DT><DD>SO_NODELAY: Non-zero if domain driver should send all packets immediately; zero to allow the driver to save up packets to send as larger blocks.</DD>
<DT>
</DT><DD>SO_OWNER: Specify a new owning thread for the Socket.</DD>
<DT>
<EM>newval</EM></DT><DD>The new setting for the option. The meaning of this value depends on which option you are changing.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
socket.goh</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_89.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketInterrupt() ...</A> 
<!-- to next --> | <A HREF="R_8b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundAllocMusic() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
