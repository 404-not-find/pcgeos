<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_20.htm,v 1.2 97/06/25 18:14:04 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ECCheckProcessHandle() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECCheckHugeArray() ...</A> 
<!-- to next --> | <A HREF="R_21.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECVMCheckVMBlockHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_Process object:checking">
 </A>
<A NAME="IX_ECCheckProcessHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckProcessHandle()</H1>
<PRE CLASS="syntax">void	ECCheckProcessHandle(
        GeodeHandle gh);</PRE>
<P>
This routine checks that the passed handle actually references a process. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Event queues:handles, checking">
 </A>
<A NAME="IX_ECCheckQueueHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckQueueHandle()</H1>
<PRE CLASS="syntax">void	ECCheckQueueHandle(
        QueueHandle qh);</PRE>
<P>
This routine ensures the passed handle references an event queue. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_Resources:handles, checking">
 </A>
<A NAME="IX_ECCheckResourceHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckResourceHandle()</H1>
<PRE CLASS="syntax">void	ECCheckResourceHandle(
        MemHandle mh);</PRE>
<P>
This routine ensures that the passed handle references a geode resource. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Stack:checking">
 </A>
<A NAME="IX_ECCheckStack()">
 </A>
<H1 CLASS="refHeading">
ECCheckStack()</H1>
<PRE CLASS="syntax">void	ECCheckStack();</PRE>
<P>
This routine checks to make sure the current stack has not overflown (and is not about to). This routine also enforces a 100-byte gap between the stack bottom and the stack pointer. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Threads:handles, checking">
 </A>
<A NAME="IX_ECCheckThreadHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckThreadHandle()</H1>
<PRE CLASS="syntax">void	ECCheckThreadHandle(
        ThreadHandle th);</PRE>
<P>
This routine checks that the passed handle actually references a thread. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Windows:handles,checking">
 </A>
<A NAME="IX_ECCheckWindowHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckWindowHandle()</H1>
<PRE CLASS="syntax">void	ECCheckWindowHandle(
        WindowHandle wh);</PRE>
<P>
This routine checks that the passed handle actually references a window. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Local memory:handles, checking">
 </A>
<A NAME="IX_Chunks:checking">
 </A>
<A NAME="IX_ECLMemExists()">
 </A>
<H1 CLASS="refHeading">
ECLMemExists()</H1>
<PRE CLASS="syntax">void	ECLMemExists(
        optr	o);</PRE>
<P>
This routine checks to see if the specified chunk exists. This routine should be called by applications to check the chunk handle's validity. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECLMemExistsHandles()">
 </A>
<H1 CLASS="refHeading">
ECLMemExistsHandles()</H1>
<PRE CLASS="syntax">void	ECLMemExistsHandles(
        MemHandle mh,
        ChunkHandle ch);</PRE>
<P>
This routine checks to see if the specified chunk exists. This routine should be called by applications to check the chunk handle's validity. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECLMemValidateHandle()">
 </A>
<H1 CLASS="refHeading">
ECLMemValidateHandle()</H1>
<PRE CLASS="syntax">void	ECLMemValidateHandle(
        optr	o);</PRE>
<P>
This routine checks that the passed optr points to a local memory chunk. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECLMemValidateHandleHandles()">
 </A>
<H1 CLASS="refHeading">
ECLMemValidateHandleHandles()</H1>
<PRE CLASS="syntax">void	ECLMemValidateHandleHandles(
        MemHandle mh,
        ChunkHandle ch);</PRE>
<P>
This routine checks that the passed memory and chunk handles actually reference a local memory chunk. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECLMemValidateHeap()">
 </A>
<H1 CLASS="refHeading">
ECLMemValidateHeap()</H1>
<PRE CLASS="syntax">void	ECLMemValidateHeap(
        MemHandle mh);</PRE>
<P>
This routine does a complete error-check of the LMem heap. It is used internally and should not be needed by application programmers.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECMemVerifyHeap()">
 </A>
<H1 CLASS="refHeading">
ECMemVerifyHeap()</H1>
<PRE CLASS="syntax">void	ECMemVerifyHeap()</PRE>
<P>
This routine makes sure the global heap is in a consistent state. If the assertions fail, a fatal error will occur. This routine should likely not be called by anything other than the EC kernel.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Virtual memory:handles, checking">
 </A>
<A NAME="IX_ECVMCheckMemHandle()">
 </A>
<H1 CLASS="refHeading">
ECVMCheckMemHandle()</H1>
<PRE CLASS="syntax">void	ECVMCheckMemHandle(
        MemHandle han);</PRE>
<P>
This routine checks that the given memory handle is actually linked to a VM block handle. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECCheckHugeArray() ...</A> 
<!-- to next --> | <A HREF="R_21.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECVMCheckVMBlockHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
