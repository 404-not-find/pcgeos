<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_a1.htm,v 1.3 97/06/25 18:46:59 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<title>GEOS C Routines: VirtualSerialSetFormat() ...</title><meta name="authoring.tool" content="HotDog">
<meta name="distribution" content="global">
<meta name="resource-type" content="document">

</head>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a0.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">UtilAsciiToHex32() ...</A> 
<!-- to next --> | <A HREF="R_a2.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMClose() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>


<DIV>
<A NAME="IX_VirtualSerialSetFormat()">
 </A>
<H1 CLASS="refHeading">
VirtualSerialSetFormat()</H1>
<PRE CLASS="syntax">VirtualSerialStatus 	VirtualSetFormat(
        VSSerialFormat		format,/* data format */
        VSSerialBaud		baud); /* baud rate */</PRE>
<P>
Sets the modem's data format and speed. Returns VS_OK if successfully set or VS_CLOSED if stream is not open.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vserlib.h </STRONG>
<CODE>
</CODE>
</P>
</DIV>

<DIV>
<A NAME="IX_VirtualSerialSetNotify()">
 </A>
<H1 CLASS="refHeading">
VirtualSerialSetNotify()</H1>
<PRE CLASS="syntax">VirtualSerialStatus 	VirtualSerialSetNotify(
	VSNotifyType		notifyTpe,   /* Which events, and how they are received */
	optr 		destination,   /* Destination object */
	word 		method);   /* Message to pass to destination object */
</PRE>
<P>
This routine registers a notifier for any of the possible relevant events. The parameter <EM>notifyType</EM> is set to specify which events should result in the object <EM>destination</EM> being sent the message <EM>method</EM>.  The </EM>notifyType</EM> should be set by OR-ing one VSNT_, one VSNE_, and one VSNM_ parameter. <P>

The set of these parameters is:</P>
<DL>
<DT><CODE>VSNT_READER</CODE></DT>
	<DD>notify reader</DD>
<DT><CODE>VSNE_DATA</CODE></DT>
	<DD>data/space available notification</DD>
<DT><CODE>VSNE_MODEM</CODE></DT>
	<DD>notify when modem input signals change</DD>
<DT><CODE>VSNM_NONE</CODE></DT>
	<DD>disable notifier</DD>
<DT><CODE>VSNM_MESSAGE</CODE></DT>
	<DD>notify by sending a message cx:dx</DD>
</DL>

 For example, <CODE>notifyType = VSNT_READER | VSNE_DATA | VSNM_MESSAGE</CODE>: This will notify the reader for data available using messaging. 
<P>
This routine returns VS_OK if the notification is successfully registered.
<P>
Returns VS_NOT_SUPPORTED if the notifier is not supported.
<P>
Returns VS_CLOSED if the stream is not open.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> This is a low-level routine whose use is discouraged in favor of <CODE>ModemSetRoutineDataNotify(),
	ModemSetMessageDataNotify(),
	ModemSetRoutineResponseNotify(),
	ModemSetMessageResponseNotify(),</CODE> and <CODE>
	ModemSetMessageEndCallNotify()</CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vserlib.h </STRONG>
<CODE>
</CODE>
</P>
</DIV>




<DIV>
<A NAME="IX_VirtualSerialWrite()">
 </A>
<H1 CLASS="refHeading">
VirtualSerialWrite()</H1>
<PRE CLASS="syntax">VirtualSerialStatus 	VirtualSerialWrite(
        VSBlockingMode		blocking_mode, /* to block or not to block */
        word		buffer_size, /* # of bytes of data to write */
        const byte		*ptr_to_buffer, /* data to write to stream */
        word		*bytes_written); /* # of bytes actually written */</PRE>
<P>
Writes <EM>buffer_size</EM> number of bytes of data from the buffer to stream. If there is not enough space in the stream and STREAM_BLOCK was specified in <EM>blocking_mode</EM>, will block and wait until more space becomes available; if there is not enough space in the stream and STREAM_NO_BLOCK was specified, returns immediately with VS_SHORT_READ_WRITE.</P>
<P>
Returns VS_OK if data was successfully written.</P>
<P>
Returns VS_CLOSED if stream is not open.</P>
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> STREAM_BLOCK is dangerous to use: if the opposite end does not read its data, stream may be constantly full and routine will continue to block for a maximum of two minutes. After two minutes, routine returns VS_SHORT_READ_WRITE and discards the data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vserlib.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_VirtualSerialWriteByte()">
 </A>
<H1 CLASS="refHeading">
VirtualSerialWriteByte()</H1>
<PRE CLASS="syntax">VirtualSerialStatus 	VirtualSerialWriteByte(
        VSBlockingMode		blockingMode, /* To block or not to block... */
        byte		dataByte); /* Data to write */</PRE>
     
<P>
This routine writes the byte  <EM>dataByte</EM> into the stream. If the stream is full and <EM>blockingMode</EM> is set to STREAM_BLOCK then the routine will wait for the request to be filled, or if STREAM_NO_BLOCK is specified the routine will immediately return an error.
<P>
Returns VS_OK if data was successfully written.</P>
<P>
Returns VS_SHORT_READ_WRITE if the space was not available and STREAM_NO_BLOCK was specified.
<P>
Returns VS_CLOSED if the stream is not open.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> STREAM_BLOCK mode is dangerous to use: if the opposite
end does not read its data, the stream may be constantly full and this function will block for maximum of two minutes. After two minutes the routine returns VS_SHORT_READ_WRITE and discards the given data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vserlib.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a1.htm#IX_VirtualSerialWrite()">VirtualSerialWrite()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_a0.htm#IX_VirtualSerialReadByte()">VirtualSerialReadByte()</A></CODE>.</P>
</DIV>



<DIV>
<A NAME="IX_VisObjectHandlesInkReply()">
 </A>
<A NAME="IX_Ink:VisObjectHandlesInkReply()">
 </A>
<A NAME="IX_Pen input:VisObjectHandlesInkReply()">
 </A>
<H1 CLASS="refHeading">
VisObjectHandlesInkReply()</H1>
<PRE CLASS="syntax">void	VisObjectHandlesInkReply(void);</PRE>
<P>
&nbsp;</P>
</DIV>
<DIV>
<A NAME="IX_Bitmaps:VisTextGraphicCompressGraphic()">
 </A>
<A NAME="IX_VisTextGraphicCompressGraphic()">
 </A>
<H1 CLASS="refHeading">
VisTextGraphicCompressGraphic()</H1>
<PRE CLASS="syntax">extern VMChain VisTextGraphicCompressGraphic(
        VisTextGraphic 		*graphic,
        FileHandle 		sourceFile,
        FileHandle 		destFile,
        BMFormat format,
        word xRes, 
        word yRes);</PRE>
<P>
This routine compresses the bitmaps in a VisTextGraphic.</P>
</DIV>
<DIV>
<A NAME="IX_VMAlloc()">
 </A>
<H1 CLASS="refHeading">
VMAlloc()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMAlloc(
        VMFileHandle		file,			
        word		size,			/* Size of a file in bytes */
        word		userID);			/* ID # to associate with block */</PRE>
<P>
This routine creates a VM block. The block is not initialized. Before you use the block, you must lock it with <CODE>
<A HREF="../../CRef/Routines/R_a3.htm#IX_VMLock()">VMLock()</A></CODE>
. If you pass a size of zero bytes, the VM block will be given an entry in the VM handle table, but no space in memory or in the file will be used; a global memory block will have to be assigned with <CODE>
<A HREF="../../CRef/Routines/R_a1.htm#IX_VMAttach()">VMAttach()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a1.htm#IX_VMAllocLMem()">VMAllocLMem()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_a1.htm#IX_VMAttach()">VMAttach()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_VMAllocLMem()">
 </A>
<H1 CLASS="refHeading">
VMAllocLMem()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMAllocLmem(
        VMFileHandle		file,				
        LMemType		ltype,				/* Type of LMem heap to create */
        word		headerSize);				/* Size to leave for LMem header...
						 * pass zero for standard header */</PRE>
<P>
This routine allocates a VM block and initializes it to contain an LMem heap. You must pass the type of LMem heap to create. If you want a fixed data space, you must pass the total size to leave for a header (including the <CODE>
LMemBlockHeader</CODE>
); otherwise, pass a zero header size, indicating that only enough space for an <CODE>
LMemBlockHeader</CODE>
 should be left. You do not need to specify a block size, since the heap will automatically expand to accommodate chunk allocations.</P>
<P>
The block's user ID number is undefined. You will need to lock the block with <CODE>
<A HREF="../../CRef/Routines/R_a3.htm#IX_VMLock()">VMLock()</A></CODE>
 before accessing the chunks.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG>	When you access chunks, remember to pass the block's <EM>
global memory</EM>
 handle to the LMem routines (not the block's VM handle).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_64.htm#IX_LMemInitHeap()">LMemInitHeap()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_a1.htm#IX_VMAlloc()">VMAlloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_a1.htm#IX_VMAttach()">VMAttach()</A></CODE>.</P>
</DIV>



<DIV>
<A NAME="IX_VMAttach()">
 </A>
<H1 CLASS="refHeading">
VMAttach()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMAttach(
        VMFileHandle		file,
        VMBlockHandle		vmBlock,
        MemHandle		mh);</PRE>
<P>
This routine attaches an existing global memory block to a VM block. It is passed the following arguments:</P>
<DL>
<DT>
<CODE>
file</CODE>
</DT><DD>The file's <CODE>
VMFileHandle</CODE>.</DD>
<DT>
<CODE>
vmBlock</CODE>
</DT><DD>The handle of the VM block to which the memory block should be attached. Any data associated with that block will be lost. If you pass a null <CODE>
VMBlockHandle</CODE>
, a new VM block will be allocated.</DD>
<DT>
<CODE>
mh</CODE>
</DT><DD>The handle of the global memory block to attach.</DD>
</DL>
<P>
The routine returns the handle of the VM block to which the memory block was attached.</P>
<P>
If you attach to a pre-existing VM block, its user ID will be preserved. If you create a new block (by passing a null <CODE>
vmBlock</CODE>
 argument), the user ID will be undefined.</P>
<P>
The block is automatically marked dirty.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMCheckForModifications()">
 </A>
<H1 CLASS="refHeading">
VMCheckForModifications()</H1>
<PRE CLASS="syntax">Boolean	VMCheckForModifications(
        VMFileHandle		file);</PRE>
<P>
This routine returns <EM>
true</EM>
 if the VM file has been dirtied or updated since the last full save.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a0.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">UtilAsciiToHex32() ...</A> 
<!-- to next --> | <A HREF="R_a2.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMClose() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>

