<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<TITLE>GEOS C Routines: IACPProcessMessage() ...</TITLE>

<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.04z">
</HEAD>
<BODY>
<P>
<!-- $Id: R_59.htm,v 1.5 97/07/28 14:17:38 lawrence Exp $ --><!-- <META NAME="description" CONTENT=""> --><!-- <META NAME="keywords" CONTENT=""> -->
<BODY BGCOLOR="#ffffff"><DIV><!-- This blob is a bunch of standard links: up, back, index, etc. --><!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A><!-- up to parent -->|
<A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A><!-- down to first child -->
<!-- to previous --> | <A HREF="R_58.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HugeArrayPrev() ...</A>
<!-- to next --> | <A HREF="R_5a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ImpexExportToMetafile() ...</A>

<HR>
<P>
<!-- That blob was a bunch of standard links: up, back, index, etc. --></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPProcessMessage()">IACPProcessMessage()</A>
</H1>
<PRE>
void IACPProcessMessage(
        optr           oself, 
        EventHandle            msgToSend, 
        TravelOption           topt, 
        EventHandle            completionMsg);

</PRE>
<P>
This is a utility routine to dispatch an encapsulated message
handed to an object by an IACP connection.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPRegisterDocument()">IACPRegisterDocument()</A>
</H1>
<PRE>
void IACPRegisterDocument(
        optr   server,
        word   disk,
        dword  fileID);

</PRE>
<P>
This routine registers an open document and the server object
for it.</P>
<P>
This routine is to be used only by servers, not by clients, and
should only be used by the creator of the document. There is no
provision for using IACP to connect to a server that is not the
creator of the document in question.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPRegisterServer()">IACPRegisterServer()</A>
</H1>
<PRE>
void    IACPRegisterServer(
        GeodeToken             *list, 
        optr           server,
        IACPServerMode                 mode,
        IACPServerFlags                flags);

</PRE>
<P>
This routine registers an object as a server for the IACP server
list specified by the passed token.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>

 <H1 CLASS="refHeading"><A NAME="IX_IACPSendMessage()">IACPSendMessage()</A>
</H1>
<PRE class="syntax">
word IACPSendMessage(
	IACPConnection 	connection,
	EventHandle 		msgToSend,
	TravelOption 		topt,	
	EventHandle 		completionMsg,
	IACPSide 		side);

</PRE>
<P>
This routine sends the message event via IACP to all the objects on the
other side of an IACP connection.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>


<H1 CLASS="refHeading"><A NAME="IX_IACPSendMessageAndWait()">IACPSendMessageAndWait()</A>
</H1>
<PRE>
word IACPSendMessageAndWait(
        IACPConnection                 connection, 
        EventHandle            msgToSend, 
        TravelOption           topt, 
        IACPSide     side); 

</PRE>
<P>
This routine sends a recorded message to all the objects on the
other side of an IACP connection, and waits until
the other application responds that it has received the message via
IACP. This does not mean the message has been handled by the other
application, only that the other application was given the <CODE>EventHandle</CODE> and
will try to deal with it. This is useful when passing volatile data.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPSendMessageToServer()">IACPSendMessageToServer()</A>
</H1>
<PRE>
word IACPSendMessageToServer(
        IACPConnection                 connection, 
        EventHandle            msgToSend, 
        TravelOption           topt, 
        EventHandle            completionMsg, 
        word           serverNum);

</PRE>
<P>
This routine sends a message to a specific server on the other
side of an IACP connection.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPShutdown()">IACPShutdown()</A>
</H1>
<PRE>
void IACPShutdown(
        IACPConnection                 connection, 
        optr           serverOD);

</PRE>
<P>
This routine removes a server or client from an IACP connection.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPShutdownAll()">IACPShutdownAll()</A>
</H1>
<PRE>
void IACPShutdownAll(
        optr obj);

</PRE>
<P>
This calls <A HREF="../../CRef/Routines/R_59.htm#IX_IACPShutdown()">IACPShutdown()</A>
for all connections to which the passed object is a party. It's
primarily used by <CODE>GenApplicationClass</CODE> when the application
is exiting.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPUnregisterDocument()">IACPUnregisterDocument()</A>
</H1>
<PRE>
void IACPUnregisterDocument(
        optr   server,
        word   disk,
        dword  fileID);

</PRE>
<P>
This routine unregisters an open document and the server object
for it.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_IACPUnregisterServer()">IACPUnregisterServer()</A>
</H1>
<PRE>
void IACPUnregisterServer(
        GeodeToken             *token, 
        optr           object);

</PRE>
<P>
This removes the specified server object from the indicated IACP
server list. </P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>iacp.goh</STRONG> </P></DIV><DIV>
<H1 CLASS="refHeading"><A NAME="IX_ImpexCreateTempFile()">ImpexCreateTempFile()</A>
</H1>
<PRE>
TransError ImpexCreateTempFile(
        char *         buffer,
        word           fileType,
        FileHandle *           file,
        MemHandle *            errorString);

</PRE>
<P>
This routine creates and opens a unique temporary file to be used
by translation libraries for file importing and exporting. The
routine is called only by translation libraries.</P>
<P>
The routine is passed the following arguments:</P>
<DL>
<DT><CODE>buffer</CODE>
<DD>The file name will be written to the buffer pointed to by
this argument. The buffer should be at least FILE_LONGNAME_BUFFER_SIZE
bytes long.
<DT><CODE>fileType</CODE>
<DD>This specifies what kind of temporary file should be created.
If IMPEX_TEMP_VM_FILE is passed, a GEOS VM file will be created.
If IMPEX_TEMP_NATIVE_FILE is passed, a temporary file in the native
format will be created.
<DT><CODE>file</CODE>
<DD>This is a pointer to a FileHandle variable. The temporary
file's handle will be written to <CODE>*file</CODE> .
<DT><CODE>errString</CODE>
<DD>If <CODE>ImpexCreateTempFile</CODE> fails with error condition
TE_CUSTOM it will allocate a block containing an error string.
It will write the block's handle to <CODE>*errString</CODE> .
It is the caller's responsibility to free this block when it's
done with it.
</DL>
<P>
If <CODE>ImpexCreateTempFile</CODE> is successful, it returns
TE_NO_ERROR (which equals zero). If it fails, it returns a member
of the <CODE>TransferErrors</CODE> enumerated type (usually TE_METAFILE_CREATION_ERROR).
When you're done with the temporary file, call <A HREF="../../CRef/Routines/R_24.htm#IX_FileClose()">FileClose()</A>
.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>impex.goh</STRONG> </P>
<P CLASS="refField">
<STRONG>Warnings:</STRONG> If you close this file, the system
may delete it at any time. Ordinarily you should close it with
<A HREF="../../CRef/Routines/R_59.htm#IX_ImpexDeleteTempFile()">ImpexDeleteTempFile()</A>
, which deletes the file immediately.</P>
<P>
If the routine does not fail with condition TE_CUSTOM, <CODE>*errString</CODE>
may contain a random value. Do not use <CODE>*errString</CODE>
if the routine did not return TE_CUSTOM.</P></DIV><DIV> 
<H1 CLASS="refHeading"><A NAME="IX_ImpexDeleteTempFile()">ImpexDeleteTempFile()</A>
</H1>
<PRE>
TransError ImpexDeleteTempFile(
        const char *           buffer,
        FileHandle             tempFile,
        word           fileType);

</PRE>
<P>
This routine closes, then deletes, a temporary file which was
created by <A HREF="../../CRef/Routines/R_59.htm#IX_ImpexCreateTempFile()">ImpexCreateTempFile()</A>
. It is passed the following arguments:</P>
<DL>
<DT><CODE>buffer</CODE>
<DD>This is a pointer to a character buffer containing the name
of the temporary file. You can just pass the address of the buffer
which was filled by <A HREF="../../CRef/Routines/R_59.htm#IX_ImpexCreateTempFile()">ImpexCreateTempFile()</A>
.
<DT><CODE>tempFile</CODE>
<DD>This is the handle of the temporary file.
<DT><CODE>fileType</CODE>
<DD>This specifies what type of file is being deleted. If the
temporary file is a GEOS VM file, this will be IMPEX_TEMP_VM_FILE.
If it is a native-format file, it will be IMPEX_TEMP_NATIVE_FILE.
<DT><CODE>errString</CODE>
<DD>If <CODE>ImpexDeleteTempFile</CODE> fails with error condition
TE_CUSTOM it will allocate a block containing an error string.
It will write the block's handle to <CODE>*errString</CODE> .
It is the caller's responsibility to free this block when it's
done with it.
</DL>
<P>
<CODE>ImpexDeleteTempFile()</CODE> closes the specified file,
then deletes it. If it is successful, it returns TE_NO_ERROR (i.e.
zero); otherwise, it returns an appropriate member of the <CODE>TransError</CODE>
enumerated type.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG> <STRONG>impex.goh</STRONG> </P>
<P CLASS="refField">
<STRONG>Warnings:</STRONG> If the routine does not fail with condition
TE_CUSTOM, <CODE>*errString</CODE> may contain a random value.
Do not use <CODE>*errString</CODE> if the routine did not return
TE_CUSTOM.</P></DIV>
<HR>
<P>
<!-- This blob is a bunch of standard links: up, back, index, etc. --><!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A><!-- up to parent -->|
<A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A><!-- down to first child -->
<!-- to previous --> | <A HREF="R_58.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HugeArrayPrev() ...</A>
<!-- to next --> | <A HREF="R_5a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ImpexExportToMetafile() ...</A>
<HR>
<P>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
</BODY>
</HTML>
