<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_4.htm,v 1.2 97/06/25 18:24:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: CCB() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ArrayQuickSort() ...</A> 
<!-- to next --> | <A HREF="R_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CFatalError() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_CCB() macro">
 </A>
<A NAME="IX_callback routines:CCB() macro">
 </A>
<H1 CLASS="refHeading">
CCB()</H1>
<PRE CLASS="syntax">#define CCB(return_type, pointer_name, args) \
        return_type _cdecl (*pointer_name) args</PRE>
<P>
This macro is useful for declaring pointers to functions that use the C calling conventions. For example, to declare a pointer to a function which is passed two strings and returns an integer, one could write</P>
<PRE>CCB(int, func_ptr, (const char *, const char *));</PRE>
<P>
which would be expanded to</P>
<PRE>int _cdecl (*func_ptr) (const char *, const char *);</PRE>
<P>
Different compilers have different syntax for the _cdecl keyword. Using this macro makes your callback compiler-independent.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_80.htm#IX_PCB()">PCB()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_CellDeref()">
 </A>
<H1 CLASS="refHeading">
CellDeref()</H1>
<PRE CLASS="syntax">void *	CellDeref(
        optr		CellRef);</PRE>
<P>
This routine translates an optr to a cell into the cell's address. The routine is simply a synonym for <CODE>
<A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeref()">LMemDeref()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<CODE>
cell.h</CODE>
 </P>
</DIV>
<DIV>
<A NAME="IX_CellDirty()">
 </A>
<H1 CLASS="refHeading">
CellDirty()</H1>
<PRE CLASS="syntax">void	CellDirty(
        void *		ptr);		/* pointer to anywhere in locked cell */</PRE>
<P>
This routine marks a cell as &quot;dirty&quot;; i.e., the cell will have to be copied from memory back to the disk.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<CODE>
cell.h</CODE>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	All the cells in an item block are marked dirty at once; thus, you can call this routine just once for several cells in the same item block. Only the segment portion of the pointer is significant; thus, you can pass a pointer to anywhere in the cell. This is useful if you have incremented the pointer to the cell.</P>
</DIV>
<DIV>
<A NAME="IX_CellGetDBItem()">
 </A>
<H1 CLASS="refHeading">
CellGetDBItem()</H1>
<PRE CLASS="syntax">DBGroupAndItem 	CellGetDBItem(
        CellFunctionParameters *			cfp,
        word		row,			/* Get handles of cell in this row */
        byte		column);			/*...and this column */</PRE>
<P>
All cells are stored as ungrouped DB items. If you wish to manipulate the cells with standard DB routines, you will need to know their handles. The routine is passed the address of the <CODE>
CellFunctionParameters</CODE>
 and the row and column indices of the desired cell. It returns the <CODE>
DBGroupAndItem</CODE>
 value for the specified cell. If there is no cell at the specified coordinates, it returns a null <CODE>
DBGroupAndItem</CODE>
. The routine does not lock the cell or change it in any way.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<CODE>
cell.h</CODE>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_d.htm#IX_DBGroupAndItem">DBGroupAndItem</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_CellGetExtent()">
 </A>
<H1 CLASS="refHeading">
CellGetExtent()</H1>
<PRE CLASS="syntax">void	CellGetExtent(
        CellFunctionParameters *cfp,
        RangeEnumParams 		*rep); /* write boundaries in REP_bounds field */</PRE>
<P>
This routine returns the boundaries of the utilized portion of the cell file. The routine is passed the address of the cell file's <CODE>
CellFunctionParameters</CODE>
 structure.) It writes the results into the <CODE>
REP_bounds</CODE>
 field of the passed <CODE>
RangeEnumParams</CODE>
 structure. The index of the first row to contain cells is written into <CODE>
REP_bounds.R_top</CODE>
; the index of the last occupied row is written to <CODE>
REP_bounds.R_bottom</CODE>
; the index of the first occupied column is written to <CODE>
REP_bounds.R_left</CODE>
; and the index of the last occupied row is written to <CODE>
REP_bounds.R_right</CODE>
. If the cell file contains no cells, all four fields will be set to -1..</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_CellLock()">
 </A>
<H1 CLASS="refHeading">
CellLock()</H1>
<PRE CLASS="syntax">void *	CellLock(
        CellFunctionParameters*			cfp,
        word			row,			/* Lock cell in this row... */
        word			column);			/* ... and this column */</PRE>
<P>
This routine is passed the address of the <CODE>
CellFunctionParameters</CODE>
 of a cell file, and the row and column indices of a cell. It locks the cell and returns a pointer to it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_4.htm#IX_CellLockGetRef()">CellLockGetRef()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_CellLockGetRef()">
 </A>
<H1 CLASS="refHeading">
CellLockGetRef()</H1>
<PRE CLASS="syntax">void *	CellLockGetRef(
        CellFunctionParameters*			cfp,
        word			row,			/* Lock cell in this row... */
        word			column,			/* ... and this column */
        optr *			ref);			/* Write handles here */</PRE>
<P>
This routine is passed the address of the <CODE>
CellFunctionParameters</CODE>
 of a cell file, and the row and column indices of a cell. It locks the cell and returns a pointer to it. It also writes the locked cell's item-block and chunk handles to the optr. If the cell moves (e.g. because another cell is allocated), you can translate the optr structure into a pointer by passing it to <CODE>
<A HREF="../../CRef/Routines/R_4.htm#IX_CellDeref()">CellDeref()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The optr becomes invalid when the cell is unlocked.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_4.htm#IX_CellGetDBItem()">CellGetDBItem().</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_4.htm#IX_CellLock()">CellLock()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_CellReplace()">
 </A>
<H1 CLASS="refHeading">
CellReplace()</H1>
<PRE CLASS="syntax">void	CellReplace{
        CellFunctionParameters *			cfp,
        word		row,		/* Insert/replace cell at this row... */
        word		column,			/* ... and this column */
        const void *		cellData,			/* Copy this data into the new cell */
        word		size);			/* Size of new cell (in bytes) */</PRE>
<P>
This routine is used for creating, deleting, and replacing cells in a cell file. To create or replace a cell, set <EM>
cellData</EM>
 to point to the data to copy into the new cell, and set <EM>
size</EM>
 to the length of the cell in bytes, and <EM>
row</EM>
 and <EM>
column</EM>
 the cell's coordinates. (As usual, <EM>
cfp</EM>
 is a pointer to the cell file's <CODE>
CellFunctionParameters</CODE>
 structure.) Any pre-existing cell at the specified coordinates will automatically be freed, and a new cell will be created.</P>
<P>
To delete a cell, pass a <EM>
size</EM>
 of zero. If there is a cell at the specified coordinates, it will be freed. (The <EM>
cellData</EM>
 argument is ignored.)</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If a cell is allocated or replaced, pointers to all ungrouped items (including cells) in that VM file may be invalidated. The <CODE>
CellFunctionParameters</CODE>
 structure must not move during the call; for this reason, it may not be in an ungrouped DB item. Never replace or free a locked cell; if you do, the cell's item block will not have its lock count decremented, which will prevent the block from being unlocked.</P>
</DIV>
<DIV>
<A NAME="IX_CellUnlock()">
 </A>
<H1 CLASS="refHeading">
CellUnlock()</H1>
<PRE CLASS="syntax">void	CellUnlock(
        void *	ptr); /* pointer to anywhere in locked cell */</PRE>
<P>
This routine unlocks the cell pointed to by <EM>
ptr</EM>
. Note that a cell may be locked several times. When all locks on all cells in an item-block have been released, the block can be swapped back to the disk.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
cell.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	The DB manager does not keep track of locks on individual items; instead, it keeps a count of the total number of locks on all the items in an item-block. For this reason, only the segment address of the cell is significant; thus, you can pass a pointer to somewhere within (or immediately after) a cell to unlock it. This is useful if you have incremented the pointer to the cell.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	If you change the cell, dirty it (with <CODE>
<A HREF="../../CRef/Routines/R_4.htm#IX_CellDirty()">CellDirty()</A></CODE>
) <EM>
before</EM>
 you unlock it.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ArrayQuickSort() ...</A> 
<!-- to next --> | <A HREF="R_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CFatalError() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
