<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_3a.htm,v 1.2 97/06/25 18:23:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GrDrawCurve() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_39.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrDestroyBitmap() ...</A> 
<!-- to next --> | <A HREF="R_3b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrDrawLine() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GrDrawCurve()">
 </A>
<A NAME="IX_Bezier curves:GrDrawCurve()">
 </A>
<H1 CLASS="refHeading">
GrDrawCurve()</H1>
<PRE CLASS="syntax">void	GrDrawCurve(
        GStateHandle		gstate,				/* GState to draw to */
        const	Point	*points);				/* array of four Points */</PRE>
<P>
Draw a Bezier curve.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawCurveTo()">
 </A>
<H1 CLASS="refHeading">
GrDrawCurveTo()</H1>
<PRE CLASS="syntax">void	GrDrawCurveTo(
        GStateHandle		gstate,				/* GState to draw to */
        const	Point	*points);			/* array of three Points */</PRE>
<P>
Draw a Bezier curve, using the current postion as the first point.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Ellipses:GrDrawEllipse() macro">
 </A>
<A NAME="IX_GrDrawEllipse()">
 </A>
<H1 CLASS="refHeading">
GrDrawEllipse()</H1>
<PRE CLASS="syntax">void	GrDrawEllipse(
        GStateHandle		gstate,			/* GState to draw to */
        sword		left,			/* bounding box bounds */
        sword		top,
        sword		right,
        sword		bottom);</PRE>
<P>
Draw an ellipse, defined by its bounding box.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawGString()">
 </A>
<H1 CLASS="refHeading">
GrDrawGString()</H1>
<PRE CLASS="syntax">GSRetType GrDrawGString(
        GStateHandle		gstate,					/* GState to draw to */
        Handle		gstringToDraw,					/* GString to draw */
        sword		x,					/* point at which to draw */
        sword		y,
        GSControl 		flags,					/* GSControl record */
        GStringElement		* lastElement);					/* pointer to empty structure */</PRE>
<P>
Draw a graphics string. The passed control flag allows drawing to stop upon encountering certain kinds of drawing elements. If this causes the drawing to stop in mid-string, then the routine will provide a pointer to the next <CODE>
GStringElement</CODE>
 to be played.</P>
<UL>
<LI>
You must provide a GState to draw to. You may wish to call <CODE>
<A HREF="../../CRef/Routines/R_45.htm#IX_GrSaveState()">GrSaveState()</A></CODE>
 on the GState before drawing the GString (and call <CODE>
<A HREF="../../CRef/Routines/R_45.htm#IX_GrRestoreState()">GrRestoreState()</A></CODE>
 afterwards). If you will draw anything else to this GState after the GString, you must call <CODE>
<A HREF="../../CRef/Routines/R_39.htm#IX_GrDestroyGString()">GrDestroyGString()</A></CODE>
 on the GString, and pass this GState's handle as the gstate argument so that <CODE>
<A HREF="../../CRef/Routines/R_39.htm#IX_GrDestroyGString()">GrDestroyGString()</A></CODE>
 can clean up the GState.</LI>
<LI>
You must provide a GString to draw. The GString must be properly loaded (probably by means of <CODE>
<A HREF="../../CRef/Routines/R_44.htm#IX_GrLoadGString()">GrLoadGString()</A></CODE>
).</LI>
<LI>
You can provide a pair of coordinates at which to draw the GString. The graphics system will translate the coordinate system by these coordinates before carrying out the graphics commands stored in the GString.</LI>
<LI>
You can provide a <CODE>
GSControl</CODE>
 argument which requests that the system stop drawing the GString when it encounters a certain type of GString element. If the GString interpreter encounters one of these elements, it will immediately stop drawing. The GString will remember where it stopped drawing. If you call <CODE>
GrDrawGString() </CODE>
with that same GString, it will continue drawing where you left off.</LI>
<LI>
You must provide a pointer to an empty <CODE>
GStringElement</CODE>
 structure. <CODE>
GrDrawGString()</CODE>
 will return a value here when it is finished drawing. If the GString has stopped drawing partway through due to a passed <CODE>
GSControl</CODE>
, the returned <CODE>
GStringElement</CODE>
 value will tell you what sort of command was responsible for halting drawing. For instance, if you had instructed <CODE>
GrDrawGString()</CODE>
 to halt on an `output' element (GrDraw...() or GrFill...() commands), then when <CODE>
GrDrawGString()</CODE>
 returns, you would check the value returned to see what sort of output element was present.</LI>
</UL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawGStringAtCP()">
 </A>
<H1 CLASS="refHeading">
GrDrawGStringAtCP()</H1>
<PRE CLASS="syntax">GSRetType GrDrawGStringAtCP(
        GStateHandle		gstate,					/* GState to draw to */
        GStringeHandle		gstringToDraw,					/* GString to draw */
        GSControl 		flags,					/* GSControl flags */
        GStringElement 		* lastElement);					/* last element to draw */</PRE>
<P>
Draw a graphics string as <CODE>
<A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawGString()">GrDrawGString()</A></CODE>
, above, except that drawing takes place at the current position.</P>
<UL>
<LI>
You must provide a GState to draw to. You may wish to call <CODE>
<A HREF="../../CRef/Routines/R_45.htm#IX_GrSaveState()">GrSaveState()</A></CODE>
 on the GState before drawing the GString (and call <CODE>
<A HREF="../../CRef/Routines/R_45.htm#IX_GrRestoreState()">GrRestoreState()</A></CODE>
 afterwards). If you will draw anything else to this GState after the GString, you must call <CODE>
<A HREF="../../CRef/Routines/R_39.htm#IX_GrDestroyGString()">GrDestroyGString()</A></CODE>
 on the GString, and pass this GState's handle as the gstate argument so that <CODE>
<A HREF="../../CRef/Routines/R_39.htm#IX_GrDestroyGString()">GrDestroyGString()</A></CODE>
 can clean up the GState.</LI>
<LI>
You must provide a GString to draw. The GString must be properly loaded (probably by means of <CODE>
<A HREF="../../CRef/Routines/R_44.htm#IX_GrLoadGString()">GrLoadGString()</A></CODE>
).</LI>
<LI>
You can provide a <CODE>
GSControl</CODE>
 argument which requests that the system stop drawing the GString when it encounters a certain type of GString element. If the GString interpreter encounters one of these elements, it will immediately stop drawing. The GString will remember where it stopped drawing. If you call <CODE>
GrDrawGString() </CODE>
with that same GString, it will continue drawing where you left off.</LI>
<LI>
You must provide a pointer to an empty <CODE>
GStringElement</CODE>
 structure. <CODE>
<A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawGString()">GrDrawGString()</A></CODE>
 will return a value here when it is finished drawing. If the GString has stopped drawing partway through due to a passed <CODE>
GSControl</CODE>
, the returned <CODE>
GStringElement</CODE>
 value will tell you what sort of command was responsible for halting drawing. For instance, if you had instructed <CODE>
<A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawGString()">GrDrawGString()</A></CODE>
 to halt on an `output' element (GrDraw...() or GrFill...() commands), then when <CODE>
<A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawGString()">GrDrawGString()</A></CODE>
 returns, you would check the value returned to see what sort of output element was present.</LI>
</UL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawHLine()">
 </A>
<H1 CLASS="refHeading">
GrDrawHLine()</H1>
<PRE CLASS="syntax">void	GrDrawHLine(
        GStateHandle		gstate,			/* GState to draw to */
        sword		x1,			/* first horizontal coordinate */
        sword		y,			/* vertical position of line */
        sword		x2);			/* second horizontal coordinate */</PRE>
<P>
Draw a horizontal line.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawHLineTo()">
 </A>
<H1 CLASS="refHeading">
GrDrawHLineTo()</H1>
<PRE CLASS="syntax">void	GrDrawHLineTo(
        GStateHandle		gstate,			/* GState to draw to */
        sword		x);			/* ending horizontal coordinate */</PRE>
<P>
Draw a horizontal line starting from the current position.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDrawHugeBitmap()">
 </A>
<H1 CLASS="refHeading">
GrDrawHugeBitmap()</H1>
<PRE CLASS="syntax">void	GrDrawHugeBitmap(
        GStateHandle		gstate,			/* GState to draw to */
        sword		x			/* Point at which to draw */
        sword		y,
        VMFileHandle 		vmFile,			/* VM File holding HugeArray */
        VMBlockHandle 		vmBlk);			/* VM block of HugeArray */</PRE>
<P>
Draw a bitmap that resides in a HugeArray.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_39.htm#IX_GrDrawBitmap()">GrDrawBitmap()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeBitmapAtCP()">GrDrawHugeBitmapAtCP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeImage()">GrDrawHugeImage()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GrDrawHugeBitmapAtCP()">
 </A>
<H1 CLASS="refHeading">
GrDrawHugeBitmapAtCP()</H1>
<PRE CLASS="syntax">void	GrDrawHugeBitmapAtCP(
        GStateHandle		gstate,			/* GState to draw to */
        VMFileHandle	 	vmFile,			/* VM file containing HugeArray */
        VMBlockHandle 		vmBlk);			/* VM block containing HugeArray */</PRE>
<P>
As <CODE>
<A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeBitmap()">GrDrawHugeBitmap()</A></CODE>
, above, except that the bitmap is drawn at the current position.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_39.htm#IX_GrDrawBitmapAtCP()">GrDrawBitmapAtCP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeBitmap()">GrDrawHugeBitmap()</A></CODE>.</P>
</DIV>
<DIV>
. Note that the bitmap will be <A NAME="IX_GrDrawHugeImage()">
 </A>
<H1 CLASS="refHeading">
GrDrawHugeImage()</H1>
<PRE CLASS="syntax">void	GrDrawHugeImage(
        GStateHandle 		gstate,			/* GState to draw to */
        sword		x			/* point at which to draw */
        sword		y,
        ImageFlags 		flags,
        VMFileHandle 		vmFile,			/* VM file holding HugeArray */
        VMBlockHandle 		vmBlk);			/* VM block holding HugeArray */</PRE>
<P>
Draw a bitmap that resides in a <CODE>
HugeArray</CODE>
drawn on an assumption of one device pixel per bitmap pixel. The bitmap will not draw rotated or scaled. Depending on the value of the flags argument, the bitmap may be expanded so that a square of device pixels displays each bitmap pixel.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawImage()">GrDrawImage()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeBitmapAtCP()">GrDrawHugeBitmapAtCP()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GrDrawImage()">
 </A>
<H1 CLASS="refHeading">
GrDrawImage()</H1>
<PRE CLASS="syntax">void	GrDrawImage(
        GStateHandle 		gstate,			/* GState to draw to */
        sword		x			/* point at which to draw */
        sword		y,
        ImageFlags 		flags,			
        const Bitmap 		* bm);			/* pointer to bitmap */</PRE>
<P>
Draw a bitmap. Note that the bitmap will be drawn on an assumption of one device pixel per bitmap pixel. The bitmap will not draw rotated or scaled. Depending on the value of the flags argument, the bitmap may be expanded so that a square of device pixels displays each bitmap pixel.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3a.htm#IX_GrDrawHugeImage()">GrDrawHugeImage()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_39.htm#IX_GrDrawBitmap()">GrDrawBitmap()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_39.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrDestroyBitmap() ...</A> 
<!-- to next --> | <A HREF="R_3b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrDrawLine() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
