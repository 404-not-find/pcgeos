<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_MailboxAck.htm,v 1.1 97/07/25 10:37:54 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: MailboxAcknowledgeMessageReceipt() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_69.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> LocalLexicalValue()...</A> 
<!-- to next --> | <A HREF="R_MailboxGetBodyFormat.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> MailboxGetBodyFormat() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>

<DIV>
<A NAME="IX_MailboxAcknowledgeMessageReceipt()">
 </A>
<H1 CLASS="refHeading">
MailboxAcknowledgeMessageReceipt()</H1>
<PRE CLASS="syntax"> void 	MailboxAcknowledgeMessageReceipt(
	MailboxMessage 		msg);
</PRE>
<P>
This routine tells the Mailbox library that the application has taken control of the message <EM>msg</EM>. <EM>msg</EM> will be visually removed from the system inbox only when this function is called.
</P>
<P CLASS="refField">
<STRONG>Warning:</STRONG> 
When the mailbox receives a message targeted for an application, it sends that application the message <CODE>MSG_META_MAILBOX_NOTIFY_MESSAGE_AVAILABLE</CODE>. Should the application not acknowledge the message with <CODE>
MailboxAcknowledgeMessageReceipt()</CODE> 
and the application exits and restarts, the application will again be notified of the message's availability. 
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>




<DIV>
<A NAME="IX_MailboxBodyReformatted()">
 </A>
<H1 CLASS="refHeading">
MailboxBodyReformatted()</H1>
<PRE CLASS="syntax"> MailboxError 	MailboxBodyReformatted(
	MailboxMessage 	msg,
	MailboxDataFormat 	newFormat,
	MailboxMessageFlags 	newBodyFlags);
</PRE>
<P>
This routine changes the format indication of the message <EM>msg</EM> to <EM>newFormat</EM> and  sets the <CODE> MailboxMessageFlags</CODE> <EM> newBodyFlags</EM> to either <CODE>MMF_BODY_DATA_VOLATILE</CODE> or <CODE>MMF_DELETE_BODY_AFTER_TRANSMISSION</CODE>. This routine does not alter the contents of msg <EM>msg</EM>.If <EM>msg</EM> is invalid then a <CODE>MailboxError</CODE> will be generated. 
</P>
<P>The <CODE>MailboxDataFormat</CODE> structure is formatted as:<PRE CLASS = "syntax">    typedef struct {		        word		MDF_id;     /*GeoworksMailboxDataFormatID*/        ManufacturerID	MDF_manuf;    } MailboxDataFormat;</PRE></P>
<P CLASS="refField"><STRONG>Warning:</STRONG> 
<CODE>
MailboxBodyReformatted()</CODE> 
is used to change the format of <EM>msg</EM> in-place. To create a copy of a message in a new format, use <CODE>
MailboxChangeBodyFormat()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>





<DIV>
<A NAME="IX_MailboxChangeBodyFormat()">
 </A>
<H1 CLASS="refHeading">
MailboxChangeBodyFormat()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxChangeBodyFormat(
	MailboxMessage 	msg,
	const MailboxChangeBodyFormatArgs 	*mcbfArgs);
</PRE>
<P>
This routine replaces the format and the body of the message <EM>msg</EM> with <EM>mcbfArgs</EM>. If <EM>msg</EM> is invalid or the body is in use, then a <CODE>MailboxError</CODE> will be generated. 
</P>
<P CLASS="refField"><STRONG>Warning:</STRONG> 
<CODE>MailboxChangeBodyFormat()
</CODE> should be used when creating a copy of a message in a new format. To reformat the message in-place, use <CODE>
MailboxBodyReformatted()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_ MailboxChangeToMailboxDir()">
 </A>
<H1 CLASS="refHeading">
MailboxChangeToMailboxDir()</H1>
<PRE CLASS="syntax">void	MailboxChangeToMailboxDir(void);
</PRE>
<P>
This routine changes the application's current working directoryto the directory where the Mailbox library holds its message bodies and administrative files. 
</P>
<P CLASS="refField"><STRONG>Warning: </STRONG>
This is primarily intended for use by data and transport drivers.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>




<DIV>
<A NAME="IX_MailboxCheckMediumAvailable()">
 </A>
<H1 CLASS="refHeading">
MailboxCheckMediumAvailable()</H1>
<PRE CLASS="syntax">Boolean  MailboxCheckMediumAvailable(
	MediumType 	mediumType, 
	word 	unitNum, 
	MediumUnitType 	unitType);
</PRE>
<P>
If the transmission medium <CODE>mediumType</CODE> exists, then this routine returns <CODE>TRUE</CODE> (non-zero); otherwise, it returns <CODE>FALSE</CODE> (zero). Since the Mailbox library cannot control the comings and goings of the different media, there is no guarantee that a medium which exists now will exist later. 
</P>
<P><STRONG>For example</STRONG>, if a modem PCMCIA card is inserted, then
the DATA_MODEM medium will be available (and the unit number will be the
SERIAL_COMx constant by which the modem can be reached). When the PCMCIA card
is removed, then that medium will no longer be available and
<CODE>
MailboxCheckMediumAvailable()</CODE>
will return <CODE>FALSE</CODE>.
</P>
<P CLASS="refField">
<STRONG>Warning:</STRONG> If <EM>unitType</EM> is a <CODE>MUT_MEM_BLOCK</CODE> (a handle to other data), it means that the Mailbox library will take responsibility for freeing the memory block. In this case, the application should no longer reference the handle it passed in as the unit number.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxCheckMediumConnected()">
 </A>
<H1 CLASS="refHeading">
MailboxCheckMediumConnected()</H1>
<PRE CLASS="syntax">Boolean 	MailboxCheckMediumConnected(
	MediumType 	mediumType, 
	word 	unitNum, 
	MediumUnitType 	unitType);
</PRE>
<P>
Sees if the Mailbox library has been told whether a connection over the specified transmission medium exists. The medium is not guaranteed to remain connected once this call returns, as the Mailbox library has no control over connections, usually.  This routine returns non-zero if, while the call was in-progress, the medium using <CODE> MediumType</CODE> <EM> mediumType</EM>, unit number <EM> unitNum</EM> (ignored if <EM>unitType</EM> is set to <CODE>MUT_NONE</CODE>), and <CODE> MediumUnitType</CODE> <EM> unitType</EM> were connected; otherwise, the routine returns zero. 
</P>
<P CLASS="refField">
<STRONG>Warning:</STRONG> If <EM>unitType</EM> is a <CODE>MUT_MEM_BLOCK</CODE> (a handle to other data), it means that the Mailbox library will take responsibility for freeing the memory block. In this case, the application should no longer reference the handle it passed in as the unit number.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>
 



<DIV>
<A NAME="IX_MailboxDeleteMessage()">
 </A>
<H1 CLASS="refHeading">
MailboxDeleteMessage()</H1>
<PRE CLASS="syntax"> void 	MailboxDeleteMessage(MailboxMessage msg);
</PRE>
<P>
This routine lets the Mailbox library know that it is free to delete the message <EM>msg</EM>. This routine should only be called after the application has called <CODE>
MailboxAcknowledgeMessageReceipt()</CODE>
to acknowledge that it has finished handling the message.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxDoneWithBody()">
 </A>
<H1 CLASS="refHeading">
MailboxDoneWithBody()</H1>
<PRE CLASS="syntax"> void 	MailboxDoneWithBody(
	MailboxMessage	msg,
	const void 	*appRef, 	
	word 	appRefSize);		</PRE>
<P>
This routine indicates that the body reference <EM>appRef</EM> returned by an earlier call to <CODE>
MailboxGetBodyRef()</CODE>
will no longer be used, so the data driver is free to close the file, etc. <EM>appRef</EM> points to the body of the message <EM>msg</EM>, and <EM>appRefSize</EM> refers to the size of this body, in bytes.</P>
<P CLASS="refField">
<STRONG>Warning:</STRONG>
After calling this routine, no further use of the body via <EM>appRef</EM> may be made.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>







<DIV>
<A NAME="IX_MailboxDoneWithVMFile()">
 </A>
<H1 CLASS="refHeading">
MailboxDoneWithVMFile()</H1>
<PRE CLASS="syntax"> void 	MailboxDoneWithVMFile(	VMFileHandle file);
</PRE>
<P>
Lets the Mailbox know that the application is done using the file <EM>file</EM>,  a parameter which was returned from <CODE>
MailboxGetVMFile()</CODE>
. The Mailbox library is free to close <EM>file</EM> after this routine is called.
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxFreeDriver()">
 </A>
<H1 CLASS="refHeading">
MailboxFreeDriver()</H1>
<PRE CLASS="syntax">void	MailboxFreeDriver(
	GeodeHandle 	driverHandle);
</PRE>
<P>
This routine unloads the driver <EM> driverHandle</EM> previously loaded by the Mailbox library.
 Note that a call to <CODE>
MailboxLoad...Driver()</CODE>
should be balanced with a call to <CODE>
MailboxFreeDriver()</CODE>
.</P>
<P CLASS="refField">
<STRONG>See Also: </STRONG> <CODE>MailboxLoadDataDriver()</CODE><BR> <CODE>MailboxLoadDataDriverWithError()</CODE><BR> <CODE>MailboxLoadTransportDriver()</CODE></P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>




<DIV>
<A NAME="IX_MailboxGetAdminFile()">
 </A>
<H1 CLASS="refHeading">
MailboxGetAdminFile()</H1>
<PRE CLASS="syntax">VMFileHandle	MailboxGetAdminFile(void);
</PRE>
<P>
Returns the handle of the main administrative VM file that is maintained by the Mailbox library.
</P>
<P CLASS = "refField">
<STRONG>Warning:</STRONG> The returned file should <STRONG>NOT</STRONG> be used for general storage of data. This routine is intended to allow applications that wish to
register a message without the aid of a <CODE>MailboxSendControl</CODE> to
create the <CODE>transData</CODE> argument required by the transport driver
they've chosen, should the driver expect something to be
allocated within the admin file.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_69.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> LocalLexicalValue()...</A> 
<!-- to next --> | <A HREF="R_MailboxGetBodyFormat.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> MailboxGetBodyFormat()...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P><EM>This document is in Beta.  Ride at your own risk.  <A HREF="mailto:isv-feedback@geoworks.com">Mail us</A> your comments and suggestions</EM></P>
</BODY>
</HTML>
