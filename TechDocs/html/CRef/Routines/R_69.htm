<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_69.htm,v 1.3 97/07/25 10:36:42 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: LocalLexicalValue() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_68.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LocalGeosToCodePage() ...</A> 
<!-- to next --> | <A HREF="R_MailboxAck.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MailboxAcknowledgeMessageReceipt() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LocalLexicalValue()">
 </A>
<H1 CLASS="refHeading">
LocalLexicalValue()</H1>
<PRE CLASS="syntax">word	LocalLexicalValue(
        word	ch);</PRE>
<P>
This routine returns the passed character's lexical value, useful when trying to sort strings alphabetically.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalLexicalValueNoCase()">
 </A>
<H1 CLASS="refHeading">
LocalLexicalValueNoCase()</H1>
<PRE CLASS="syntax">word	LocalLexicalValueNoCase(
        word	ch);</PRE>
<P>
This routine returns the passed character's case-insensitive lexical value, useful when trying to sort strings alphabetically.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalParseDateTime()">
 </A>
<H1 CLASS="refHeading">
LocalParseDateTime()</H1>
<PRE CLASS="syntax">Boolean	LocalParseDateTime( /* Returns FALSE on failure */
        const char *		str,
        DateTimeFormat 		format,
        TimerDateAndTime *		dateTime);</PRE>
<P>
This routine takes a string describing a date or time (e.g. &quot;9:37&quot;) and parses it using the passed format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalSetCurrencyFormat()">
 </A>
<H1 CLASS="refHeading">
LocalSetCurrencyFormat()</H1>
<PRE CLASS="syntax">void	LocalSetCurrencyFormat(
        const LocalCurrencyFormat *				buf,
        const char *				symbol);</PRE>
<P>
This routine changes the stored preferred currency format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalSetDateTimeFormat()">
 </A>
<H1 CLASS="refHeading">
LocalSetDateTimeFormat()</H1>
<PRE CLASS="syntax">void	LocalSetDateTimeFormat(
        const char *		str,
        DateTimeFormat 		format);</PRE>
<P>
This routine changes the stored preferred time and date format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalSetMeasurementType()">
 </A>
<H1 CLASS="refHeading">
LocalSetMeasurementType()</H1>
<PRE CLASS="syntax">void	LocalSetMeasurementType(
        MeasurementTypes meas);</PRE>
<P>
This routine changes the stored preferred measurement type.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalSetNumericFormat()">
 </A>
<H1 CLASS="refHeading">
LocalSetNumericFormat()</H1>
<PRE CLASS="syntax">void	LocalSetNumericFormat(
        const LocalNumericFormat *				buf);</PRE>
<P>
This routine changes the stored preferred number format.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalSetQuotes()">
 </A>
<H1 CLASS="refHeading">
LocalSetQuotes()</H1>
<PRE CLASS="syntax">void	LocalSetQuotes(
        const LocalQuotes *		quotes);</PRE>
<P>
This routine changes the stored preferred quote marks.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalStringLength()">
 </A>
<H1 CLASS="refHeading">
LocalStringLength()</H1>
<PRE CLASS="syntax">word	LocalStringLength(
        const char *		str);</PRE>
<P>
This routine returns the length (in characters) of a null-terminated string (not counting the null), even for multibyte character sets.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalStringSize()">
 </A>
<H1 CLASS="refHeading">
LocalStringSize()</H1>
<PRE CLASS="syntax">word	LocalStringSize(
        const char *		str);</PRE>
<P>
This routine returns the size (in bytes) of a null-terminated string.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalUpcaseChar()">
 </A>
<H1 CLASS="refHeading">
LocalUpcaseChar()</H1>
<PRE CLASS="syntax">word	LocalUpcaseChar(
        word	ch);</PRE>
<P>
This routine returns the upper case equivalent, if any, of the passed character.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LocalUpcaseString()">
 </A>
<H1 CLASS="refHeading">
LocalUpcaseString()</H1>
<PRE CLASS="syntax">void	LocalUpcaseString(
        char *	str,
        word	size);</PRE>
<P>
This routine converts the passed string to its all upper case equivalent.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
localize.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LogAddEntry()">
 </A>
<H1 CLASS="refHeading">
LogAddEntry()</H1>
<PRE CLASS="syntax">void 	LogAddEntry(
        LogEntry 		*logEntry);</PRE>
<P>
This function adds an entry to the Contact log. (The Contact log keeps track of what calls the user has sent to and received from each of their contacts; this is the function that logs a call.) The function takes on argument, a <CODE>
LogEntry</CODE>
 structure. </P>
<PRE>typedef struct {
  NameOrNumber 			LE_number;
  dword 			LE_contactID;
  LogEntryType 			LE_type;
  LogEntryDirection 			LE_direction;
  dword 			LE_duration;
  DateAndTime 			LE_datetime;
  LogEntryFlags 			LE_flags; 
} LogEntry;</PRE>
<P>
Normally, this function is invoked twice for each call--once at the start of the call, and again when the call is done. </P>
<P>
When invlking the function at the start of the call, set up the <STRONG CLASS="fileName">
LogEntry</STRONG>
 structure. Fill in the <CODE>
LE_number</CODE>
 and/or <CODE>
LE_contactID</CODE>
 fields if you know the contact's name, number, or <CODE>
RecordID</CODE>
 number, Fill in the <CODE>
LE_type</CODE>
 field with one of LET_CALL, LET_FAX, LET_SMS, LET_DATA_MAILBOX, LET_DATA_WWW, or LET_DATA_TELNET. Fill in the <CODE>
LE_direction</CODE>
 field with one of LED_SENT, LED_RECEIVED, or LED_MISSED. The LE_duration should be zero. Fill in the <CODE>
LE_datetime</CODE>
 field with the current date and time. (The <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_TimerGetDateAndTime()">TimerGetDateAndTime()</A></CODE>
 function returns this information.) Leave the <CODE>
LE_flags</CODE>
 field alone. </P>
<P>
Keep the structure around after you call the routine; it will fill in some of the fields. Then when the call is complete, fill in the <CODE>
LE_duration</CODE>
 field and invoke the function again. The <CODE>
LE_duration</CODE>
 field should contain the call's duration in seconds. One way to compute this time is to call <CODE>
<A HREF="../../CRef/Routines/R_98.htm#IX_TimerGetCount()">TimerGetCount()</A></CODE>
 twice: once at the start of the call and once at the end. By subtracting the start time from the end time and dividing by 60, one can compute the number of seconds that passed.</P>
<P>
Having invoked the function a second time, the program may safely free the <CODE>
LogEntry</CODE>
 structure.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_98.htm#IX_TimerGetDateAndTime()">TimerGetDateAndTime()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_98.htm#IX_TimerGetCount()">TimerGetCount()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LogDeleteAllEntries()">
 </A>
<H1 CLASS="refHeading">
LogDeleteAllEntries()</H1>
<PRE CLASS="syntax">void 	LogDeleteAllEntries();</PRE>
<P>
This function deletes all entries in the contact log. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_LogDestroy()">
 </A>
<H1 CLASS="refHeading">
LogDestroy()</H1>
<PRE CLASS="syntax">void 	LogDestroy();</PRE>
<P>
This function deletes the contact log's log file. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
contlog.goh</STRONG>
 </P>
<P>
&nbsp;</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_68.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LocalGeosToCodePage() ...</A> 
<!-- to next --> | <A HREF="R_MailboxAck.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MailboxAcknowledgeMessageReceipt() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
