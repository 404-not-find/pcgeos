<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_30.htm,v 1.2 97/06/25 18:20:57 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GCNListAdd() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FloatFloatToAscii_StdFormat() ...</A> 
<!-- to next --> | <A HREF="R_31.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GCNListSend() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GCNListAdd()">
 </A>
<H1 CLASS="refHeading">
GCNListAdd()</H1>
<PRE CLASS="syntax">Boolean	GCNListAdd(
        optr		OD,				/* optr to add to list */
        ManufacturerID		manufID,				/* manufacturer ID of list */
        word		listType);				/* list type */</PRE>
<P>
This routine adds an object pointer (optr) to a GCN list interested in a particular change. The routine must be passed the optr to add, along with the <CODE>
manufID</CODE>
 and the type of the list to add it to. If no list of the specified manufacturer and type currently exists, a new list will be created.</P>
<P>
This routine will return <CODE>
true</CODE>
 if the optr was successfully added to the GCN list and <CODE>
false</CODE>
 if the optr could not be added. An optr cannot be added to a GCN list if it currently exists on that list.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListAddHandles()">
 </A>
<H1 CLASS="refHeading">
GCNListAddHandles()</H1>
<PRE CLASS="syntax">Boolean	GCNListAddHandles(
        MemHandle		mh,				/* handle of object to add */
        ChunkHandle		ch,				/* chunk of object to add */
        ManufacturerIDs		manufID,				/* manufacturer ID of list */
        word		listType);				/* list type */</PRE>
<P>
This routine is exactly the same as <CODE>
<A HREF="../../CRef/Routines/R_30.htm#IX_GCNListAdd()">GCNListAdd()</A></CODE>
, except it takes the memory and chunk handles of the object rather than a complete optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListAddToBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListAddToBlock()</H1>
<PRE CLASS="syntax">Boolean	GCNListAddToBlock(
        optr		OD,				/* optr of list to add */
        ManufacturerID		manufID,				/* manufacturer ID of list */
        word		listType,				/* list type */
        MemHandle		mh,				/* handle of block holding list */
        ChunkHandle		listOfLists);				/* chunk of list of lists
							 * in block */</PRE>
<P>
This routine adds a new GCN list to a block containing the GCN lists. Pass it the optr of the chunk containing the new GCN list as well as the list's type and manufacturer ID. Pass also the memory handle and chunk handle of the chunk containing the GCN &quot;list of lists&quot; which will manage the new list.</P>
<P>
This routine returns true of the new optr is added to the GCN mechanism, false if it could not be added (if it was already there).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may resize chunks in the block, so you should dereference any pointers after calling this routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListCreateBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListCreateBlock()</H1>
<PRE CLASS="syntax">ChunkHandle GCNListCreateBlock(
        MemHandle mh);			/* handle of the locked LMem block */</PRE>
<P>
This routine creates a list of lists for the GCN mechanism. It is rarely, if ever, called by applications. Pass it the handle of the locked LMem block in which the list should be created.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListDestroyBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListDestroyBlock()</H1>
<PRE CLASS="syntax">void	GCNListDestroyBlock(
        MemHandle		mh,					/* handle of locked block to
							 * be destroyed */</PRE>
<PRE CLASS="syntax">        ChunkHandle		listOfLists);					/* chunk of list of lists */</PRE>
<P>
This routine destroys a GCN list of lists and all the GCN lists associated with it. Pass it the handle of the locked LMem block containing the lists as well as the chunk handle of the chunk containing the list of lists.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListDestroyList()">
 </A>
<H1 CLASS="refHeading">
GCNListDestroyList()</H1>
<PRE CLASS="syntax">void	GCNListDestroyList(
        optr	list);		/* optr of the GCN list to be destroyed */</PRE>
<P>
This routine destroys the specified GCN list.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListRelocateBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListRelocateBlock()</H1>
<PRE CLASS="syntax">void	GCNListRelocateBlock(
        MemHandle		mh,					/* handle of locked LMem block
							 * containing GCN lists */</PRE>
<PRE CLASS="syntax">        ChunkHandle		listOfLists,					/* chunk of list of lists */
        MemHandle		relocBlock);					/* handle of block containing
							 * relocation information */</PRE>
<P>
This routine relocates the GCN list of lists in the specified block, updating all the optrs stored therein.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine can resize and/or move the LMem block, so you should dereference pointers after calling it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListRemove()">
 </A>
<H1 CLASS="refHeading">
GCNListRemove()</H1>
<PRE CLASS="syntax">Boolean	GCNListRemove(
        optr		OD,				/* the optr to be removed */
        ManufacturerID		manufID,				/* manufacturer ID of the list */
        word		listType);				/* list type */</PRE>
<P>
This routine removes the passed optr from the specified GCN list. The routine must be passed the optr to remove along with the manufacturer ID and list type of the list to remove it from.</P>
<P>
This routine will return <CODE>
true</CODE>
 if the optr was successfully removed from the GCN list and <CODE>
false</CODE>
 if the optr could not be found on the GCN list and therefore could not be removed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListRemoveFromBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListRemoveFromBlock()</H1>
<PRE CLASS="syntax">Boolean	GCNListRemoveFromBlock(
        optr		OD,				/* optr of GCN list to remove */
        ManufacturerID		manufID,				/* manufacturer of list to remove */
        word		listType,				/* type of list being removed */
        MemHandle		mh,				/* handle of locked LMem block
						 * containing the list of lists */</PRE>
<PRE CLASS="syntax">        ChunkHandle		listOfLists);				/* chunk of list of lists */</PRE>
<P>
This routine removes a GCN list from a GCN list block and from the list of lists therein.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListRemoveHandles()">
 </A>
<H1 CLASS="refHeading">
GCNListRemoveHandles()</H1>
<PRE CLASS="syntax">Boolean	GCNListRemoveHandles(
        MemHandle		mh,
        ChunkHandle		ch,
        ManufacturerID		manufID,
        word		listType);</PRE>
<P>
This routine is exactly the same as <CODE>
<A HREF="../../CRef/Routines/R_30.htm#IX_GCNListRemove()">GCNListRemove()</A></CODE>
, except it specifies the object to be removed via handles rather than an optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_30.htm#IX_GCNListRemove()">GCNListRemove()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FloatFloatToAscii_StdFormat() ...</A> 
<!-- to next --> | <A HREF="R_31.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GCNListSend() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
