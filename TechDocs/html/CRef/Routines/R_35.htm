<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_35.htm,v 1.2 97/06/25 18:22:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GeodeLoadDGroup ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_34.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeGetAppObject() ...</A> 
<!-- to next --> | <A HREF="R_36.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeoFree() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GeodeLoadDGroup()">
 </A>
<A NAME="IX_dgroup:GeodeLoadDGroup()">
 </A>
<H1 CLASS="refHeading">
GeodeLoadDGroup</H1>
<PRE CLASS="syntax">void	GeodeLoadDGroup(
        MemHandle		mh);</PRE>
<P>
This routine forces the <CODE>
dgroup</CODE>
 segment into the data-segment register. This routine expects the <CODE>
MemHandle</CODE>
 of the code resource, which can be retrieved with <CODE>
<A HREF="../../CRef/Routines/R_34.htm#IX_GeodeGetCodeProcessHandle()">GeodeGetCodeProcessHandle()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodePrivAlloc()">
 </A>
<A NAME="IX_Geodes:private data">
 </A>
<A NAME="IX_Private data:GeodePrivAlloc()">
 </A>
<H1 CLASS="refHeading">
GeodePrivAlloc()</H1>
<PRE CLASS="syntax">word	GeodePrivAlloc(
        GeodeHandle		gh,				/* handle of the owner of the
						 * newly-allocated private data */</PRE>
<PRE CLASS="syntax">        word		numWords);				/* number of words to allocate */</PRE>
<P>
This routine allocates a string of contiguous words in all geodes' private data areas; each set of words will be owned by the geode specified in <CODE>
gh</CODE>
. The data allocated can be accessed with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivWrite()">GeodePrivWrite()</A></CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivRead()">GeodePrivRead()</A></CODE>
 and must be freed with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivFree()">GeodePrivFree()</A></CODE>
. The return value will be the offset to the start of the allocated range, or zero if the routine could not allocate the space.</P>
<P>
Each geode has a block of private data the is accessed using the <CODE>
GeodePriv...()</CODE>
 routines. A specific geode's private data block is expanded only when a valid <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivWrite()">GeodePrivWrite()</A></CODE>
 is performed for the geode. Space is &quot;allocated&quot; in the data blocks of all geodes (loaded or yet-to-be loaded) simultaneously via a call to <CODE>
GeodePrivAlloc()</CODE>
. Data that have never been written are returned as all zeros.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodePrivFree()">
 </A>
<H1 CLASS="refHeading">
GeodePrivFree()</H1>
<PRE CLASS="syntax">void	GeodePrivFree(
        word	offset,		/* offset returned by GeodePrivAlloc() */
        word	numWords);		/* number of words to free */</PRE>
<P>
This routine frees a group of contiguous words from all geodes' private data areas. The space must previously have been allocated with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
. Pass the offset to the words as returned by <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
 as well as the number of words to be freed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodePrivRead()">
 </A>
<H1 CLASS="refHeading">
GeodePrivRead()</H1>
<PRE CLASS="syntax">void	GeodePrivRead(
        GeodeHandle		gh,			/* handle of owner of private data */
        word		offset,			/* offset returned by
					 * GeodePrivAlloc() */</PRE>
<PRE CLASS="syntax">        word		numWords,			/* number of words to read */
        word		* dest);			/* pointer to buffer into which data
					 * will be copied */</PRE>
<P>
This routine reads a number of words from the geode's private data area. Pass the following:</P>
<DL>
<DT>
<CODE>
gh</CODE>
</DT><DD>The geode handle of the owner of the private data to be read.</DD>
<DT>
<CODE>
offset</CODE>
</DT><DD>The offset to the private data as returned by <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
.</DD>
<DT>
<CODE>
numWords</CODE>
</DT><DD>The number of words to read.</DD>
<DT>
<CODE>
dest</CODE>
</DT><DD>A pointer to a locked or fixed buffer into which the words should be read. It must be at least <CODE>
numWords</CODE>
 words long.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodePrivWrite()">
 </A>
<H1 CLASS="refHeading">
GeodePrivWrite()</H1>
<PRE CLASS="syntax">void	GeodePrivWrite(
        GeodeHandle		gh,			/* handle of owner of private data */
        word		offset,			/* offset returned by
						 * GeodePrivAlloc() */</PRE>
<PRE CLASS="syntax">        word		numWords,			/* number of words to be written */
        word		* src);			/* buffer containing data */</PRE>
<P>
This routine writes a number of words into a geode's private data area. The area being written must have been allocated previously with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
. Pass the following:</P>
<DL>
<DT>
<CODE>
gh</CODE>
</DT><DD>The geode handle of the owner of the private data space.</DD>
<DT>
<CODE>
offset</CODE>
</DT><DD>The offset to begin writing to, as returned by <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodePrivAlloc()">GeodePrivAlloc()</A></CODE>
.</DD>
<DT>
<CODE>
numWords</CODE>
</DT><DD>The number of words to be written. This should be no more than had been previously allocated.</DD>
<DT>
<CODE>
src</CODE>
</DT><DD>A pointer to the locked or fixed buffer containing the data to be written.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeSetDefaultDriver()">
 </A>
<H1 CLASS="refHeading">
GeodeSetDefaultDriver()</H1>
<PRE CLASS="syntax">void	GeodeSetDefaultDriver(
        GeodeDefaultDriverType			type,		/* type of default driver to set */
        GeodeHandle			gh);		/* driver to set as the default */</PRE>
<P>
This routine sets the default driver for the indicated driver type. Pass the type of default driver in <CODE>
type</CODE>
 and the handle of the driver in <CODE>
gh</CODE>
. The type must be a value of <CODE>
GeodeDefaultDriverType</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
driver.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeSetUIData()">
 </A>
<H1 CLASS="refHeading">
GeodeSetUIData()</H1>
<PRE CLASS="syntax">void	GeodeSetUIData(
        GeodeHandle		gh,
        word		data)</PRE>
<P>
  </P>
</DIV>
<DIV>
<A NAME="IX_GeodeUseDriver()">
 </A>
<H1 CLASS="refHeading">
GeodeUseDriver()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeUseDriver(
        const	char	* name,				/* file name of driver to load */
        word		protoMajor,				/* expected major protocol */
        word		protoMinor,				/* expected minor protocol */
        GeodeLoadError		* err);				/* pointer to returned error */</PRE>
<P>
This routine dynamically loads a driver geode given the driver's file name. It returns the geode handle of the driver if successful; if unsuccessful, it returns an error code of type <CODE>
GeodeLoadError</CODE>
 pointed to by <CODE>
err</CODE>
. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
name</CODE>
</DT><DD>A pointer to the driver's null-terminated full path and file name.</DD>
<DT>
<CODE>
protoMajor</CODE>
</DT><DD>The expected major protocol of the driver. If zero, any protocol is acceptable.</DD>
<DT>
<CODE>
protoMinor</CODE>
</DT><DD>The expected minor protocol of the driver.</DD>
<DT>
<CODE>
err</CODE>
</DT><DD>A pointer to a <CODE>
GeodeLoadError</CODE>
 in which any error values will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	It is much easier to automatically load the drivers you need by noting them in your geode parameters file.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	If you use <CODE>
GeodeUseDriver()</CODE>
 to dynamically load a driver, you must also use <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFreeDriver()">GeodeFreeDriver()</A></CODE>
 to free it when you are done using it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
driver.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeUseLibrary()">
 </A>
<H1 CLASS="refHeading">
GeodeUseLibrary()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeUseLibrary(
        const char	 *	name,				/* file name of library to load */
        word		protoMajor,				/* expected major protocol */
        word		protoMinor,				/* expected minor protocol */
        GeodeLoadError *		err);				/* pointer to returned error */</PRE>
<P>
This routine dynamically loads a library geode when given the library's file name. (The library must be in the thread's working directory.) It returns the geode handle of the loaded library if successful; if unsuccessful, it returns an error code (<CODE>
GeodeLoadError</CODE>
) pointed to by <CODE>
err</CODE>
. Pass this routine the following parameters:</P>
<DL>
<DT>
<CODE>
name</CODE>
</DT><DD>A pointer to the library's null-terminated file name.</DD>
<DT>
<CODE>
protoMajor</CODE>
</DT><DD>The expected major protocol of the library. If zero, any protocol is acceptable.</DD>
<DT>
<CODE>
protoMinor</CODE>
</DT><DD>The expected minor protocol of the library.</DD>
<DT>
<CODE>
err</CODE>
</DT><DD>A pointer to a <CODE>
GeodeLoadError</CODE>
 which will contain any returned error values.</DD>
</DL>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	If you dynamically load a library with <CODE>
GeodeUseLibrary()</CODE>
, you must manually free it when finished, with <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFreeLibrary()">GeodeFreeLibrary()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
library.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_34.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GeodeGetAppObject() ...</A> 
<!-- to next --> | <A HREF="R_36.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeoFree() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
