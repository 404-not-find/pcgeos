<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_77.htm,v 1.2 97/06/25 18:38:36 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjDeref() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_76.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjCompProcessChildren() ...</A> 
<!-- to next --> | <A HREF="R_78.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjDoRelocation() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjDeref()">
 </A>
<H1 CLASS="refHeading">
ObjDeref()</H1>
<PRE CLASS="syntax">void	* ObjDeref(
        optr	obj			/* optr to dereference */
        word	masterLevel);			/* specific master level to dereference */</PRE>
<P>
This routine dereferences the given optr and master level to reset the message parameter <CODE>
pself</CODE>
. Because many routines and messages may cause the calling object's instance chunk to move, the <CODE>
pself</CODE>
 parameter may become invalid. The two parameters to <CODE>
ObjDeref()</CODE>
 are</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object to be dereferenced; nearly always you will want to pass <CODE>
oself</CODE>
.</DD>
<DT>
<CODE>
masterLevel</DT><DD>
</CODE>
The master level of the part to be dereferenced. This is the offset into the instance chunk where the offset to the master part is stored. Since <CODE>
pself</CODE>
 points to the first byte of a master part, you must specify which master part you are dereferencing.</DD>
</DL>
<P>
For example, a visible object dereferencing its <CODE>
VisClass</CODE>
 instance data would call this routine as follows:</P>
<PRE>pself = ObjDeref(oself, 4);</PRE>
<P>
Note, however, the <CODE>
ObjDeref1()</CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDerefVis()">ObjDerefVis()</A></CODE>
 exist to dereference the Vis master part, and <CODE>
ObjDeref2()</CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDerefGen()">ObjDerefGen()</A></CODE>
 exist to dereference the Gen master part.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref1()">ObjDeref1()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref2()">ObjDeref2()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjDerefHandles()">
 </A>
<H1 CLASS="refHeading">
ObjDerefHandles()</H1>
<PRE CLASS="syntax">void	* ObjDerefHandles(
        MemHandle		mh,					/* handle portion of optr */
        ChunkHandle		ch,					/* chunk portion of optr */
        word		masterLevel);					/* master level to dereference */</PRE>
<P>
This routine is exactly the same as <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>
, above, except that the optr is specified as its separate handles.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjDeref1()">
 </A>
<H1 CLASS="refHeading">
ObjDeref1()</H1>
<PRE CLASS="syntax">void	* ObjDeref1(
        optr obj);			/* optr of object to be dereferenced */</PRE>
<P>
This routine is a special version of <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>
 which dereferences the first master part of an object. Visible objects should use this routine or <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDerefVis()">ObjDerefVis()</A></CODE>
 instead of <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref2()">ObjDeref2()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjDeref1Handles()">
 </A>
<H1 CLASS="refHeading">
ObjDeref1Handles()</H1>
<PRE CLASS="syntax">void	*ObjDeref1Handles(
        MemHandle		mh,			/* handle portion of optr */
        ChunkHandle		ch,);			/* chunk handle portion of optr */</PRE>
<P>
This routine is exactly like <CODE>
ObjDeref1()</CODE>
, above, except that the optr is specified as its separate handles.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjDeref2()">
 </A>
<H1 CLASS="refHeading">
ObjDeref2()</H1>
<PRE CLASS="syntax">void	* ObjDeref2(
        optr	obj);		/* optr of object to be dereferenced */</PRE>
<P>
This routine is a specialized version of <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>
 which dereferences the second master part of an object. Generic objects should use this routine or <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDerefGen()">ObjDerefGen()</A></CODE>
 instead of <CODE>
<A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref1()">ObjDeref1()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjDeref2Handles()">
 </A>
<H1 CLASS="refHeading">
ObjDeref2Handles()</H1>
<PRE CLASS="syntax">void	* ObjDeref2Handles(
        MemHandle		mh,/			/* handle portion of optr */
        ChunkHandle		ch);			/* chunk portion of optr */</PRE>
<P>
This routine is exactly like <CODE>
ObjDeref2()</CODE>
, above, except that the optr is specified as its separate handles.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjDerefGen()">
 </A>
<H1 CLASS="refHeading">
ObjDerefGen()</H1>
<PRE CLASS="syntax">void	* ObjDerefGen(
        optr	obj);			/* generic object to be dereferenced */</PRE>
<P>
This routine is exactly the same as <CODE>
ObjDeref2()</CODE>
 and dereferences the Gen master part of a generic object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref2()">ObjDeref2()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjDerefVis()">
 </A>
<H1 CLASS="refHeading">
ObjDerefVis()</H1>
<PRE CLASS="syntax">void	* ObjDerefVis(
        optr	obj);			/* visible object to be dereferenced */</PRE>
<P>
This routine is exactly the same as <CODE>
ObjDeref1()</CODE>
 and dereferences the Vis master part of a visible object or a visibly-realized generic object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref()">ObjDeref()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_77.htm#IX_ObjDeref1()">ObjDeref1()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_76.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjCompProcessChildren() ...</A> 
<!-- to next --> | <A HREF="R_78.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjDoRelocation() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
