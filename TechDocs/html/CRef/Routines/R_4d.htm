<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_4d.htm,v 1.2 97/06/25 18:27:16 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GSCloseSubPath() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_4c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrUDivWWFixed() ...</A> 
<!-- to next --> | <A HREF="R_4e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GSDrawEllipse() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GSCloseSubPath() macro">
 </A>
<H1 CLASS="refHeading">
GSCloseSubPath()</H1>
<PRE CLASS="syntax">#define GSCloseSubPath() GR_CLOSE_SUB_PATH</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro geometrically closes the currently open path. You must still use <CODE>
<A HREF="../../CRef/Routines/R_4f.htm#IX_GSEndPath() macro">GSEndPath()</A></CODE>
 to signal that you are done defining the path.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSComment() macro">
 </A>
<H1 CLASS="refHeading">
GSComment()</H1>
<PRE CLASS="syntax">#define GSComment(size_b) \
        GR_COMMENT, GOC_WORD(size_b</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro signals the start of a comment within the GString. It takes one argument, the length of the comment in bytes. Following this macro you should place the comment data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSCreatePalette() macro">
 </A>
<H1 CLASS="refHeading">
GSCreatePalette()</H1>
<PRE CLASS="syntax">#define GSCreatePalette() GR_CREATE_PALETTE</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro creates a custom palette.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDestroyPalette() macro">
 </A>
<H1 CLASS="refHeading">
GSDestroyPalette()</H1>
<PRE CLASS="syntax">#define GSDestroyPalette() GR_DESTROY_PALETTE</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro destroys the custom palette, if any.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawArc() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawArc()</H1>
<PRE CLASS="syntax">#define GSDrawArc(close_enum,x1_w,y1_w,x2_w,y2_w,ang1_w,ang2_w) \
        GR_DRAW_ARC,GOC_WORD(close_enum), \
GOC_SW(x1_w), GOC_SW(y1_w), \
GOC_SW(x2_w), GOC_SW(y2_w), \
GOC_SW(ang1_w),GOC_SW(ang2_w)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws an arc. It takes several arguments. First it takes an <CODE>
ArcCloseType</CODE>
 value. Next it takes the boundaries of the arc's base ellipse. Finally, it takes starting and ending angles for the arc.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawArc3Point() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawArc3Point()</H1>
<PRE CLASS="syntax">#define GSDrawArc3Point(close, x1, y1, x2, y2, x3, y3) \
        GR_DRAW_ARC_3POINT,GOC_WORD(close),GOC_WWF(x1), \
GOC_WWF(y1), GOC_WWF(x2), GOC_WWF(y2), \
GOC_WWF(x3), GOC_WWF(y3)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a three-point arc. It takes several arguments: an <CODE>
ArcCloseType</CODE>
 and the coordinates of the three points defining the arc, each expressed as a <CODE>
WWFixed</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawArc3PointTo() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawArc3PointTo()</H1>
<PRE CLASS="syntax">#define GSDrawArc3Point(close, x1, y1, x2, y2, x3, y3) \
        GR_DRAW_ARC_3POINT,GOC_WORD(close),GOC_WWF(x1), \
GOC_WWF(y1), GOC_WWF(x2), GOC_WWF(y2), \
GOC_WWF(x3), GOC_WWF(y3)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a three-point arc with the current position acting as one of the endpoints. It takes several arguments: an <CODE>
ArcCloseType</CODE>
 and the coordinates of the remaining defining points of the arc, each expressed as a <CODE>
WWFixed</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawBitmap() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawBitmap()</H1>
<PRE CLASS="syntax">#define GSDrawBitmap(x_w,y_w,w_w) \
        GR_DRAW_BITMAP, GOC_SW(x_w), \
GOC_SW(y_w), GOC_WORD(w_w)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a bitmap. It takes three arguments: the coordinates at which to draw the bitmap and the size of the bitmap's data. This macro should be followed by the bitmap's data: a <CODE>
Bitmap</CODE>
 structure and the mask and color data for the bitmap.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawBitmapAtCP() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawBitmapAtCP()</H1>
<PRE CLASS="syntax">#define GSDrawBitmapAtCP(bsize_w) \
        GR_DRAW_BITMAP_CP, GOC_WORD(bsize_w)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a bitmap at the current position. It takes one argument, the size of the bitmap data in bytes. This macro should be followed by the bitmap's data: a <CODE>
Bitmap</CODE>
 structure and the mask and color data for the bitmap.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawBitmapOptr() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawBitmapOptr()</H1>
<PRE CLASS="syntax">#define GSDrawBitmapOptr(x_w,y_w,o_ptr) \
        GR_DRAW_BITMAP_OPTR,GOC_SW(x_w), \
GOC_SW(y_w),GOC_OPTR(o_ptr)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a bitmap at the passed coordinates; the data for said bitmap should be stored in a chunk referenced by the passed optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawCBitmap() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawCBitmap()</H1>
<PRE CLASS="syntax">#define GSDrawCBitmap(x_w,y_w,slice1size_w,totalSize) \
        GR_DRAW_BITMAP,GOC_SW(x_w), GOC_SW(y_w), \
GOC_WORD(slice1size_w)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a complex bitmap. It takes four arguments: the <EM>
x</EM>
 and <EM>
y</EM>
 coordinates at which to draw the bitmap, the size of one slice of the bitmap's mask and color data, and the total size of the bitmap's data. This macro should be followed by the bitmap's data: a <CODE>
CBitmap</CODE>
 structure followed by the mask, color, and any other associated data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawChar() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawChar()</H1>
<PRE CLASS="syntax">#define GSDrawChar(c,x1_w,y1_w) \
        GR_DRAW_CHAR,(c),GOC_SW(x1_w),GOC_SW(y1_w)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a text character. It takes three arguments: the <CODE>
Chars</CODE>
 value of the character and the <EM>
x</EM>
 and <EM>
y</EM>
 coordinates at which to draw the character.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawCharAtCP() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawCharAtCP()</H1>
<PRE CLASS="syntax">#define GSDrawCharAtCP(c) \
        GR_DRAW_CHAR_CP,(c)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a single character at the current position. It takes one argument, the <CODE>
Chars</CODE>
 value of the character to draw.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawCurve() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawCurve()</H1>
<PRE CLASS="syntax">#define GSDrawCurve(x1_sw,y1_sw,x2_sw,y2_sw,x3_sw,y3_sw,x4_sw,y4_sw) \
        GR_DRAW_CURVE,GOC_SW(x1_sw),GOC_SW(y1_sw), \
GOC_SW(x2_sw),GOC_SW(y2_sw), \
GOC_SW(x3_sw),GOC_SW(y3_sw),GOC_SW(x4_sw),GOC_SW(y4_sw)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a Bezier curve. It takes eight arguments consisting of the coordinates for the curve's anchor and control points.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GSDrawCurveTo() macro">
 </A>
<H1 CLASS="refHeading">
GSDrawCurveTo()</H1>
<PRE CLASS="syntax">#define GSDrawCurveTo(x2_sw,y2_sw,x3_sw,y3_sw,x4_sw,y4_sw) \
        GR_DRAW_CURVE_TO,GOC_SW(x2_sw),GOC_SW(y2_sw), \
GOC_SW(x3_sw),GOC_SW(y3_sw), \
GOC_SW(x4_sw),GOC_SW(y4_sw)</PRE>
<P>
This <CODE>
GString</CODE>
 creation macro draws a Bezier curve, using the current position as one endpoint. It takes six arugments, the coordinates of the remaining anchor and control points.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_4c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrUDivWWFixed() ...</A> 
<!-- to next --> | <A HREF="R_4e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GSDrawEllipse() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
