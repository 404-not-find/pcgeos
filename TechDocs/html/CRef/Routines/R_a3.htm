<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_a3.htm,v 1.5 97/06/25 18:47:19 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: VMGetMapBlock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VMClose() ...</A> 
<!-- to next --> | <A HREF="R_a4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMPreserveBlocksHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_VMGetMapBlock()">
 </A>
<H1 CLASS="refHeading">
VMGetMapBlock()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMGetMapBlock(
        VMFIleHandle		file);</PRE>
<P>
This routine returns the VM block handle of the file's map block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMGrabExclusive()">
 </A>
<H1 CLASS="refHeading">
VMGrabExclusive()</H1>
<PRE CLASS="syntax">VMStartExclusiveReturnValue VMGrabExclusive(
        VMFileHandle		file,
        word		timeout,
        VMOperation		operation,
        VMOperation *		currentOperation);</PRE>
<P>
This routine gets exclusive access to a VM file for this thread.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMInfo()">
 </A>
<H1 CLASS="refHeading">
VMInfo()</H1>
<PRE CLASS="syntax">Boolean	VMInfo(
        VMFileHandle		file,
        VMBlockHandle		block,
        VMInfoStruct *		info</PRE>
<P>
This routine writes the memory handle, block size, and user ID number of the block. It returns <EM>
non-zero </EM>
if the handle is invalid or free.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMLock()">
 </A>
<H1 CLASS="refHeading">
VMLock()</H1>
<PRE CLASS="syntax">void *	VMLock(
        VMFileHandle		file,
        VMBlockHandle		block,
        MemHandle*		mh);</PRE>
<P>
This routine locks a VM block into the global heap. It returns the block's base address.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMMemBlockToVMBlock()">
 </A>
<H1 CLASS="refHeading">
VMMemBlockToVMBlock()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMMemBlockToVMBlock(
        MemHandle		mh,
        VMFileHandle*		file);</PRE>
<P>
This routine gets the VM block and file handles for a specified memory block. It returns the VM block handle and copies the VM file handle into <CODE>
*file</CODE>
.</P>
<P>
The memory handle passed must be the handle of a block which is attached to a VM file. If it is not, the results are undefined.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMModifyUserID()">
 </A>
<H1 CLASS="refHeading">
VMModifyUserID()</H1>
<PRE CLASS="syntax">void	VMModifyUserID(
        VMFileHandle		file,
        VMBlockHandle		block,
        word		userID);</PRE>
<P>
This routine changes a VM block's user ID number.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMOpen()">
 </A>
<A NAME="IX_VM_&ldots;">
 </A>
<H1 CLASS="refHeading">
VMOpen()</H1>
<PRE CLASS="syntax">VMFileHandle 	VMOpen(
        char *		name,				/* Name of file to open/create */
        VMAccessFlags		flags,
        VMOpenType		mode,
        word		compression);				/* Compaction threshold percentage 
						 * passed as an integer */</PRE>
<P>
This routine opens or creates a VM file. It returns the handle of the opened file. If it is unable to open the file, it returns a null <CODE>
VMFileHandle</CODE>
 and sets a <CODE>
VMStatus</CODE>
 error code which may be retrieved with <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
. <CODE>
VMOpen()</CODE>
 looks for the file in the thread's working directory (unless a temporary file is being created, as described below). The routine takes four arguments:</P>
<DL>
<DT>
<CODE>
name</DT><DD></CODE>
A pointer to a string containing the name of the file to open. The file will be opened in the thread's current working directory. If a temporary file is being opened, this buffer should contain the full path of the directory in which to create the file, followed by fourteen null bytes (counting the string-ending null). <CODE>
VMOpen()</CODE>
 will write the name of the temporary file in those trailing nulls.</DD>
<DT>
<CODE>
flags</DT><DD></CODE>
This specifies what kind of access to the file you need. The flags are described <A HREF="../../CRef/Structs/S_43.htm#IX_VMAccessFlags">in the C Structures Reference</A>.</DD>
<DT>
<CODE>
mode</DT><DD></CODE>
This specifies how the file should be opened. The types are described <A HREF="../../CRef/Structs/S_44.htm#IX_VMO_&ldots;  (VMOpenType type)">in the C Structures Reference</A>.</DD>
<DT>
<CODE>
compression</CODE>
 </DT><DD>The compaction threshold percentage, passed as an integer. For example, to set a compaction threshold of 50%, pass the integer 50. When the percentage of used space in the file drops below the compaction threshold, the VM manager will automatically compact the file. To use the system default threshold, pass a threshold of zero. The compaction threshold is set only when the file is created; this argument is ignored if an existing file is opened.</DD>
</DL>
<P>
You must also specify how the file should be opened. To do this, you pass a member of the <CODE>
VMOpenType</CODE>
 enumerated type.</P>
<P>
If for any reason <CODE>
VMOpen()</CODE>
 is unable to open the requested file, it will returns a null file handle. It will also set the error value for <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
. The possible error conditions are:</P>
<DL>
<DT>
VM_FILE_EXISTS</DT><DD>
<CODE>
VMOpen()</CODE>
 was passed VMO_CREATE_ONLY, but the file already exists.</DD>
<DT>
VM_FILE_NOT_FOUND</DT><DD>
<CODE>
VMOpen()</CODE>
 was passed VMO_OPEN, but the file does not exist.</DD>
<DT>
VM_SHARING_DENIED</DT><DD>
The file was opened by another geode, and access was denied.</DD>
<DT>
VM_OPEN_INVALID_VM_FILE</DT><DD>
<CODE>
VMOpen()</CODE>
 was instructed to open an invalid VM file (or a non-VM file).</DD>
<DT>
VM_CANNOT_CREATE</DT><DD>
<CODE>
VMOpen()</CODE>
 cannot create the file (but it does not already exist).</DD>
<DT>
VM_TRUNCATE_FAILED</DT><DD>
<CODE>
VMOpen()</CODE>
 was passed VMO_CREATE_TRUNCATE; the file exists, but could not be truncated.</DD>
<DT>
VM_WRITE_PROTECTED</DT><DD>
<CODE>
VMOpen()</CODE>
 was passed VMAF_FORCE_READ_WRITE, but the file was write-protected.</DD>
<DT>
VM_CANNOT_OPEN_SHARED_MULTIPLE</DT><DD>
<CODE>
VMOpen()</CODE>
 attempted to open a file marked GFHF_SHARED_MULTIPLE while passing the VMAF_DISALLOW_SHARED_MULTIPLE flag.</DD>
<DT>
VM_FILE_FORMAT_MISMATCH</DT><DD>
<CODE>
VMOpen()</CODE>
 attempted to create a VM file using a name that already belongs to a DOS file.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you use the document control objects, they will take care of opening files as necessary; you will not need to call <CODE>
VMOpen()</CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2a.htm#IX_FileOpen()">FileOpen()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VMClose() ...</A> 
<!-- to next --> | <A HREF="R_a4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMPreserveBlocksHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
