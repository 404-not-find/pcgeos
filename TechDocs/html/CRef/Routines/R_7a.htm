<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_7a.htm,v 1.2 97/06/25 18:39:14 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ObjInitDetach() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_79.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjFreeChunk() ...</A> 
<!-- to next --> | <A HREF="R_7b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjIsClassADescendant() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ObjInitDetach()">
 </A>
<H1 CLASS="refHeading">
ObjInitDetach()</H1>
<PRE CLASS="syntax">void	ObjInitDetach(
        MetaMessages 		msg,
        optr		obj			/* object being detached */
        word		callerID,			/* an identifier token for the caller */
        optr		ackOD);			/* object to which ack is sent */</PRE>
<P>
Initialize the detach sequence for the specified object. The detach sequence severs all ties between the system and the object, allowing it to be destroyed without other objects or geodes trying to contact it. It is highly unlikely you will ever call this routine; typically, you will instead use <CODE>
MSG_META_DETACH</CODE>
 or one of the generic or visible object messages, which will call this routine. The parameters for this routine are</P>
<DL>
<DT>
<EM>msg</EM><CODE>
</DT><DD>The detach message.			</CODE>
</DD>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object to be detached.</DD>
<DT>
<CODE>
callerID</CODE>
</DT><DD>The caller object's ID.</DD>
<DT>
<CODE>
ackOD</CODE>
</DT><DD>The optr of the caller object or another object which is to receive acknowledgment notification of the detach.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	metaC.goh</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE>MSG_META_DETACH</CODE>,
<CODE>MSG_GEN_DESTROY</CODE>,
<CODE>MSG_VIS_REMOVE</CODE>,
<CODE><A HREF="../../CRef/Routines/R_79.htm#IX_ObjIncDetach()">ObjIncDetach()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_78.htm#IX_ObjEnableDetach()">ObjEnableDetach()</A></CODE>,
<CODE>MSG_META_ACK</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjInitializeMaster()">
 </A>
<H1 CLASS="refHeading">
ObjInitializeMaster()</H1>
<PRE CLASS="syntax">void	ObjInitializeMaster(
        optr 		obj,				/* object to be initialized */
        ClassStruct		* class);				/* class in master group */</PRE>
<P>
This routine initializes the appropriate master part of the passed object, resizing the instance chunk if necessary. It takes two parameters:</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object whose master part is to be initialized.</DD>
<DT>
<CODE>
class</CODE>
</DT><DD>A pointer to the class definition of a class in the appropriate master group. This does not have to be the master class; it must only be a class in the master goup.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may resize and/or move chunks or object blocks, thereby invalidating pointers and segment addresses.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_7c.htm#IX_ObjResizeMaster()">ObjResizeMaster()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitializePart()">ObjInitializePart()</A></CODE>,
<CODE><A HREF="../../CRef/Structs/S_6.htm#IX_ClassStruct">ClassStruct</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjInitializeMasterHandles()">
 </A>
<H1 CLASS="refHeading">
ObjInitializeMasterHandles()</H1>
<PRE CLASS="syntax">void	ObjInitializeMasterHandles(
        MemHandle		mh,				/* handle portion of optr */
        ChunkHandle		ch,				/* chunk portion of optr */
        ClassStruct		* class);				/* class in master group */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitializeMaster()">ObjInitializeMaster()</A></CODE>
 except it specifies the object via its handles rather than its optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjInitializePart()">
 </A>
<H1 CLASS="refHeading">
ObjInitializePart()</H1>
<PRE CLASS="syntax">void	ObjInitializePart(
        optr 	obj,			/* object to have a part initialized */
        word	masterOffset);			/* offset to master offset in chunk */</PRE>
<P>
This routine initializes all master parts of the given object down to and including the master part specified in <CODE>
masterOffset</CODE>
. It will resize the chunk if necessary and even resolve variant classes above the master group specified, if necessary. This routine takes two parameters:</P>
<DL>
<DT>
<CODE>
obj</CODE>
</DT><DD>The optr of the object to be initialized.</DD>
<DT>
<CODE>
masterOffset</DT><DD>
</CODE>
The offset within the parent's instance chunk to the master group's offset (the value that would appear in the parent class' <CODE>
Class_masterOffset</CODE>
 field in its <CODE>
ClassStruct</CODE>
 structure).</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may move and/or resize chunks or object blocks, thereby invalidating pointers and segment addresses.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_7c.htm#IX_ObjResizeMaster()">ObjResizeMaster()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitializeMaster()">ObjInitializeMaster()</A></CODE>,
<CODE>MSG_META_RESOLVE_VARIANT_SUPERCLASS</CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjInitializePartHandles()">
 </A>
<H1 CLASS="refHeading">
ObjInitializePartHandles()</H1>
<PRE CLASS="syntax">void	ObjInitializePartHandles(
        Memhandle		mh,					/* handle portion of optr */
        ChunkHandle		ch,					/* chunk portion of optr */
        word		masterOffset);					/* master group offset */</PRE>
<P>
This routine is the same as <CODE>
<A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInitializePart()">ObjInitializePart()</A></CODE>
 except that it specifies the object via its handles rather than an optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
</DIV>
<DIV>
<A NAME="IX_ObjInstantiate()">
 </A>
<H1 CLASS="refHeading">
ObjInstantiate()</H1>
<PRE CLASS="syntax">optr	ObjInstantiate(
        MemHandle		block,				/* block in which new object
						 * will be instantiated */</PRE>
<PRE CLASS="syntax">        ClassStruct		* class);				/* class of new object */</PRE>
<P>
This routine instantiates a new object, allocating the proper size instance chunk. It returns the optr of the new object; this optr can then be used to send setup messages or other messages (such as adding the object to an object tree, setting it usable, etc.).</P>
<P>
The new object's instance data will be initialized to all zeroes if it has no master parts (is a direct descendant of <CODE>
MetaClass</CODE>
). If it is a member of some master group, only enough space for the base structure (the master offsets and the class pointer) will be allocated. In either case, initialization of the instance data will occur at a later time.</P>
<P>
<CODE>
ObjInstantiate()</CODE>
 takes two parameters:</P>
<DL>
<DT>
<CODE>
block</CODE>
</DT><DD>The memory handle of an object block in which the object's instance chunk will be allocated. This block <EM>
must</EM>
 be an object block, though it need not be run by the caller's thread. If the block is run by another thread, the routine will be executed as a remote call.</DD>
<DT>
<CODE>
class</CODE>
</DT><DD>A pointer to the <CODE>
ClassStruct</CODE>
 structure of the class of the new object. This pointer will be set in the object's class pointer (the first four bytes of the instance chunk).</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine, because it allocates a new chunk, may cause LMem and Object blocks to move or resize, thereby invalidating any pointers and segment addresses. Be sure to dereference pointers after calls to this routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInstantiateForThread()">ObjInstantiateForThread()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ObjInstantiateForThread()">
 </A>
<H1 CLASS="refHeading">
ObjInstantiateForThread()</H1>
<PRE CLASS="syntax">optr	ObjInstantiateForThread(
        ThreadHandle		thread,				/* thread to run new object */
        ClassStruct		*class);				/* class of new object */</PRE>
<P>
This routine is similar to <CODE>
<A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInstantiate()">ObjInstantiate()</A></CODE>
 except you pass the thread to run the new object rather than the memory handle to an object block (to store the new object). To specify the current thread, pass &quot;0&quot; in <EM>thread</EM>. This routine automatically allocates memory blocks as needed. It returns the optr to the new object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	object.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_7a.htm#IX_ObjInstantiate()">ObjInstantiate()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_79.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ObjFreeChunk() ...</A> 
<!-- to next --> | <A HREF="R_7b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ObjIsClassADescendant() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
