<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_6e.htm,v 1.2 97/06/25 18:36:42 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: MemModifyFlags() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemLock() ...</A> 
<!-- to next --> | <A HREF="R_6f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemThreadGrab() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_MemModifyFlags()">
 </A>
<H1 CLASS="refHeading">
MemModifyFlags()</H1>
<PRE CLASS="syntax">void	MemModifyFlags(
        MemHandle		mh,					/* Handle of block to modify */
        HeapFlags		bitsToSet,					/* HeapFlags to turn on */
        HeapFlags		bitsToClear);					/* HeapFlags to turn off */</PRE>
<P>
<CODE>
MemModifyFlags() </CODE>
changes the<CODE>
 </CODE>
<CODE>
HeapFlags</CODE>
 record of the global memory<CODE>
 </CODE>
block specified. Not all flags can be changed after the block is created; only the flags<CODE>
 </CODE>
HF_SHARABLE, HF_DISCARDABLE, HF_SWAPABLE, and HF_LMEM can be changed.</P>
<P>
The routine uses the handle table entry of the block specified; it does not need to look at the actual block. The routine performs normally whether or not the block is locked, fixed, or discarded.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the handle is not a global memory handle, results are unpredictable; the routine will change inappropriate bits of the handle table entry.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleModifyOwner()">HandleModifyOwner()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyOtherInfo()">MemModifyOtherInfo()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemModifyOtherInfo()">
 </A>
<H1 CLASS="refHeading">
MemModifyOtherInfo()</H1>
<PRE CLASS="syntax">void	MemModifyOtherInfo(
        MemHandle		mh,				/* Handle of block to modify */
        word		otherInfo);				/* New value of HM_otherInfo word */</PRE>
<P>
Use this routine to change the value of the global memory block's HM<CODE>
_otherInfo</CODE>
 word. Some blocks need this word left alone; for example, data-access synchronization routines use this word. Object blocks use this space to store the handle of the burden thread.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemModifyFlags()">MemModifyFlags()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleModifyOwner()">HandleModifyOwner()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemOwner()">
 </A>
<H1 CLASS="refHeading">
MemOwner()</H1>
<PRE CLASS="syntax">GeodeHandle MemOwner(
        MemHandle		mh);			/* handle of block queried */</PRE>
<P>
This routine returns the owning geode of the passed block. If the block belongs to a VM file, the owner of the VM file will be returned (unlike <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
, which returns the VM file handle).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemPLock()">
 </A>
<H1 CLASS="refHeading">
MemPLock()</H1>
<PRE CLASS="syntax">void	* MemPLock(
        MemHandle		mh);		/* Handle of block to lock */</PRE>
<P>
If several different threads will be accessing the same global memory block, they need to make sure their activities will not conflict. The way they do that is to use synchronization routines to get control of a block. <CODE>
MemPLock()</CODE>
 is part of one set of synchronization routines.</P>
<P>
If the threads are using the <CODE>
MemPLock()</CODE>
 family, then whenever a thread needs access to the block in question, it can call <CODE>
MemPLock()</CODE>
. This routine calls <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 to get control of the block; it then locks the block and returns its address. If the block has been discarded, it grabs the block and returns a null pointer; you can then reallocate the block. When the thread is done with the block, it should release it with <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can find out if the block is being accessed by looking at the HM<CODE>
_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If HM<CODE>
_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all threads accessing the block use <CODE>
MemPLock()</CODE>
 and/or <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 to grab the block. These routines use the HM<CODE>
_otherInfo</CODE>
 field of the block's handle table entry; do not alter this field. Release the block with <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>
 when you are done with it.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If a thread calls <CODE>
MemPLock()</CODE>
 when it already has control of the block, it will deadlock. <CODE>
<A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrab()">MemThreadGrab()</A></CODE>
 avoids this conflict. If you try to grab a non-sharable block owned by another thread, <CODE>
MemPLock()</CODE>
 will fatal-error.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never use <CODE>
MemPLock()</CODE>
 with a fixed block. It will try to lock the block, and fixed blocks cannot be locked. Instead, use <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemPtrToHandle()">
 </A>
<H1 CLASS="refHeading">
MemPtrToHandle()</H1>
<PRE CLASS="syntax">MemHandle MemPtrToHandle(
        void	* ptr);		/* pointer to locked block */</PRE>
<P>
This routine returns the global handle of the locked block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemReAlloc()">
 </A>
<H1 CLASS="refHeading">
MemReAlloc()</H1>
<PRE CLASS="syntax">MemHandle 	MemReAlloc(
        MemHandle		mh,					/* Handle of block */
        word		byteSize,					/* New size of the block */
        HeapAllocFlags		heapAllocFlags);					/* How to reallocate block */</PRE>
<P>
This routine reallocates a global memory block. It can be used to resize a block; it can also be used to reallocate memory for a discarded block. Locked and fixed blocks can be reallocated; however, they may move on the global heap, so all pointers within the block must be adjusted. Note, however, that if the new size is smaller than the old size, the block is guaranteed not to move. The reallocated block may be larger than the size requested, as the block size is rounded up to the next even paragraph (one paragraph equals sixteen bytes). If you request that the block be expanded, but this is impossible, then the routine will return NullHandle. </P>
<P>
The routine is passed a record of <CODE>
HeapAllocFlags</CODE>
. Only the flags HAF_ZERO_INIT, HAF_LOCK, and HAF_NO_ERR may be passed.</P>
<P>
If necessary, the routine will automatically compact the heap.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If HAF_LOCK is passed, the lock count will be incremented even if the block is already locked by this thread. The routine does not care whether the block has been locked by another thread (possibly belonging to another geode); thus, if the block is being used by more than one thread, it is important to use the synchronization routines.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6b.htm#IX_MemAlloc()">MemAlloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6b.htm#IX_MemDeref()">MemDeref()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemLock() ...</A> 
<!-- to next --> | <A HREF="R_6f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemThreadGrab() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
