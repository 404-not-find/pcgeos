<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_19.htm,v 1.2 97/06/25 18:11:17 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DiskCheckInUse() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_18.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBLock() ...</A> 
<!-- to next --> | <A HREF="R_1a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DiskForEach() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DiskCheckInUse()">
 </A>
<H1 CLASS="refHeading">
DiskCheckInUse()</H1>
<PRE CLASS="syntax">Boolean	DiskCheckInUse(
        DiskHandle		disk);</PRE>
<P>
This routine checks if a registered disk is being used. If a file on that disk is open, or if a path on that disk is on some thread's directory stack, the routine will return <EM>
true</EM>
 (i.e. non-zero); otherwise it will return <EM>
false</EM>
 (i.e. zero). Note that a disk may be &quot;in use&quot; even if it is not currently in any drive.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you pass a standard path constant, this routine will return information about the disk containing the main <STRONG CLASS="fileName">
geos.ini</STRONG>
 file (which is guaranteed to be in use).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DiskCheckUnnamed()">
 </A>
<H1 CLASS="refHeading">
DiskCheckUnnamed()</H1>
<PRE CLASS="syntax">Boolean	DiskCheckUnnamed( /* returns <EM>true</EM> if disk is unnamed */
        DiskHandle		disk);</PRE>
<P>
This routine checks if a registered disk has a permanent name. If the disk does not have a name, the routine returns <EM>
true</EM>
 (i.e. non-zero); otherwise it returns <EM>
false</EM>
. Note that GEOS assigns a temporary name to unnamed disks when they are registered. To find out a disk's temporary or permanent name, call <CODE>
<A HREF="../../CRef/Routines/R_1b.htm#IX_DiskGetVolumeName()">DiskGetVolumeName()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you pass a standard path constant, this routine will return information about the disk containing the main <STRONG CLASS="fileName">
geos.ini</STRONG>
 file.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_1b.htm#IX_DiskGetVolumeName()">DiskGetVolumeName()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DiskCheckWritable()">
 </A>
<H1 CLASS="refHeading">
DiskCheckWritable()</H1>
<PRE CLASS="syntax">Boolean	DiskCheckWritable(
        DiskHandle		disk);</PRE>
<P>
<CODE>
DiskCheckWritable()</CODE>
 checks if a disk is currently writable. It returns <EM>
false</EM>
 (i.e. zero) if the disk is not writable, whether by nature (e.g. a CD-ROM disk) or because the write-protect tab is on; otherwise it returns <EM>
true</EM>
 (i.e. non-zero). </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you pass a standard path constant, this routine will return information about the disk containing the main <STRONG CLASS="fileName">
geos.ini</STRONG>
 file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DiskCopy()">
 </A>
<A NAME="IX_CALLBACK_&ldots;">
 </A>
<A NAME="IX_DiskCopyCallback">
 </A>
<A NAME="IX_DiskCopyError">
 </A>
<A NAME="IX_ERR_&ldots;  (DiskCopyError)">
 </A>
<H1 CLASS="refHeading">
 DiskCopy()</H1>
<PRE CLASS="syntax">DiskCopyError 	DiskCopy(
        word		source,
        word		dest,
        Boolean _pascal (*callback)
		(DiskCopyCallback					code,
		 DiskHandle					disk,
		 word					param));</PRE>
<P>
This routine copies one disk onto another. The destination disk must be formattable to be the same type as the source disk. The first two arguments specify the source and destination drive. These drives may or may not be the same. If they are different, they must take compatible disks. </P>
<P>
A disk copy requires frequent interaction with the user. For example, the copy routine must prompt the user to swap disks when necessary. For this reason, <CODE>
<A HREF="../../CRef/Routines/R_19.htm#IX_DiskCopy()">DiskCopy()</A></CODE>
 is passed a pointer to a callback routine. This routine handles all interaction with the user. It must be declared _pascal. Each time it is called, it is passed three arguments. The first is a member of the <CODE>
DiskCopyCallback</CODE>
 enumerated type; this argument specifies what the callback routine should do. The second argument is a disk handle; its significance depends on the value of the <CODE>
DiskCopyCallback</CODE>
 argument. The third argument is a word-sized piece of data whose significance depends on the value of the <CODE>
DiskCopyCallback</CODE>
 argument. Note that either of these arguments may be null values, depending on the value of the <CODE>
DiskCopyCallback</CODE>
 argument.</P>
<P>
The callback routine can abort the copy by returning <EM>
true</EM>
 (i.e. non-zero); otherwise, it should return <EM>
false</EM>
 (i.e. zero). The callback routine is called for several situations, identified by the value of <CODE>
DiskCopyCallback</CODE>
 associated with them:</P>
<DL>
<DT>
CALLBACK_GET_SOURCE_DISK</DT><DD>
The callback routine should prompt the user to insert the source disk into the appropriate drive. The second argument is meaningless for this call. The third argument is the number identifying the drive; use <CODE>
<A HREF="../../CRef/Routines/R_1d.htm#IX_DriveGetName()">DriveGetName()</A></CODE>
 to find the name for this drive.</DD>
<DT>
CALLBACK_GET_DEST_DISK</DT><DD>
The callback routine should prompt the user to insert the destination disk into the appropriate drive. The second argument is meaningless for this call. The third argument is the number identifying the drive.</DD>
<DT>
CALLBACK_REPORT_NUM_SWAPS</DT><DD>
The second argument is meaningless for this call. The third argument is the number of disk swaps that will be necessary. The callback routine may wish to report this number to the user and ask for confirmation.</DD>
<DT>
CALLBACK_VERIFY_DEST_DESTRUCTION</DT><DD>
If the destination disk has already been formatted, the callback routine will be called with this parameter. The callback routine may wish to remind the user that the destination disk will be erased. The second argument is the handle of the destination disk; this is useful if, for example, you want to report the disk's name. The third argument is the destination drive's number. If the callback routine aborts the copy at this time by returning non-zero, the destination disk will not be harmed.</DD>
<DT>
CALLBACK_REPORT_FORMAT_PCT</DT><DD>
If the destination disk needs to be formatted, <CODE>
<A HREF="../../CRef/Routines/R_19.htm#IX_DiskCopy()">DiskCopy()</A></CODE>
 will periodically call the callback routine with this parameter. The callback routine may wish to notify the user how the format is progressing. In this case, the second argument will be meaningless; the third parameter will be the percentage of the destination disk which has been formatted. The callback routine may wish to notify the user how the format is progressing.</DD>
<DT>
CALLBACK_REPORT_COPY_PCT</DT><DD>
While the copy is taking place, <CODE>
<A HREF="../../CRef/Routines/R_19.htm#IX_DiskCopy()">DiskCopy()</A></CODE>
 will periodically call the callback routine with this parameter. The callback routine may wish to notify the user how the copy is progressing. In this case, the second parameter will be meaningless; the third parameter will be the percentage of the copy which has been completed.</DD>
</DL>
<P>
If the copy was successful, <CODE>
<A HREF="../../CRef/Routines/R_19.htm#IX_DiskCopy()">DiskCopy()</A></CODE>
 returns zero. Otherwise, it returns a member of the <CODE>
DiskCopyError</CODE>
 enumerated type. That type has the following members:</P>
<DL>
<DT>
ERR_DISKCOPY_INSUFFICIENT_MEM</DT><DD>
This is returned if the routine was unable to get adequate memory.</DD>
<DT>
ERR_CANT_COPY_FIXED_DISKS </DT>
<DT>
ERR_CANT_READ_FROM_SOURCE </DT>
<DT>
ERR_CANT_WRITE_TO_DEST </DT>
<DT>
ERR_INCOMPATIBLE_FORMATS</DT><DD>
The destination drive must be able to write disks in exactly the same format as the source disk. Note that the source and destination drives may be the same.</DD>
<DT>
ERR_OPERATION_CANCELLED</DT><DD>
This is returned if the callback routine ever returned a non-zero value, thus aborting the copy.</DD>
<DT>
ERR_CANT_FORMAT_DEST </DT>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DiskFind()">
 </A>
<A NAME="IX_DiskFindResult">
 </A>
<A NAME="IX_DFR_&ldots;">
 </A>
<H1 CLASS="refHeading">
DiskFind()</H1>
<PRE CLASS="syntax">DiskHandle 	DiskFind(
        const char *		fname,			/* Null-terminated volume name */
        DiskFindResult *		code);			/* DiskFindResult written here */</PRE>
<P>
This routine returns the handle of the disk with the specified name. If there is no registered disk with the specified name, <CODE>
DiskFind()</CODE>
 returns a null handle. Note that while disk handles are unique, volume names are not; therefore, there may be several registered disks with identical volume names. For this reason, <CODE>
DiskFind()</CODE>
 writes a member of the <CODE>
DiskFindResults</CODE>
 enumerated type (described below) into the space pointed to by the <EM>
code</EM>
 pointer.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	<CODE>
DiskFind()</CODE>
 uses the <CODE>
DiskFindResult</CODE>
 enumerated type, which has the following values:</P>
<DL>
<DT>
DFR_UNIQUE</DT><DD>
There is exactly one registered disk with the specified name; its handle was returned.</DD>
<DT>
DFR_NOT_UNIQUE</DT><DD>
There are two or more registered disks with the specified name; the handle of an arbitrary one of these disks was returned.</DD>
<DT>
DFR_NOT_FOUND</DT><DD>
There are no registered disks with the specified name; a null disk handle was returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you want to find all the disks with a given volume name, call <CODE>
<A HREF="../../CRef/Routines/R_1a.htm#IX_DiskForEach()">DiskForEach()</A></CODE>
 and have the callback routine check each disk's name with <CODE>
<A HREF="../../CRef/Routines/R_1b.htm#IX_DiskGetVolumeName()">DiskGetVolumeName()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_1b.htm#IX_DiskRegisterDisk()">DiskRegisterDisk()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_18.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DBLock() ...</A> 
<!-- to next --> | <A HREF="R_1a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DiskForEach() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
