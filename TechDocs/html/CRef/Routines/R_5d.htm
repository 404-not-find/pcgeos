<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_5d.htm,v 1.2 97/06/25 18:32:05 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: InitFileRevert() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InitFileReadStringBlock() ...</A> 
<!-- to next --> | <A HREF="R_5e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InkDBGetDisplayInfo() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_InitFileRevert()">
 </A>
<H1 CLASS="refHeading">
InitFileRevert()</H1>
<PRE CLASS="syntax">Boolean	InitFileRevert(void);</PRE>
<P>
This routine restores the GEOS.INI file from its saved backup version. It ensures that no other thread is operating on the file while it is being restored. This function returns an error flag: <CODE>
true</CODE>
 represents an error in restoring the file; <CODE>
false</CODE>
 indicates success.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileSave()">
 </A>
<H1 CLASS="refHeading">
InitFileSave()</H1>
<PRE CLASS="syntax">Boolean	InitFileSave(void);</PRE>
<P>
This routine saves the GEOS.INI file synchronously by updating the backup file to be the current version. (<CODE>
<A HREF="../../CRef/Routines/R_5a.htm#IX_InitFileCommit()">InitFileCommit()</A></CODE>
 actually overwrites the GEOS.INI file itself.) It ensures that no other thread is operating on the file while it is being written out. This function returns an error flag: <CODE>
true</CODE>
 represents an error in trying to save the file; <CODE>
false</CODE>
 indicates success.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileWriteBoolean()">
 </A>
<H1 CLASS="refHeading">
InitFileWriteBoolean()</H1>
<PRE CLASS="syntax">void	InitFileWriteBoolean(
        const char *		category,
        const char *		key,
        Boolean 		bool);</PRE>
<P>
This integer writes a Boolean value into the specified category and key of the local GEOS.INI file. The Boolean will appear as &quot;true&quot; or &quot;false&quot; if the user looks at GEOS.INI with a text editor, but it will be an actual Boolean value to GEOS. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI category into which the data should be written.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI key within <CODE>
category</CODE>
 into which the data should be written.</DD>
<DT>
<CODE>
bool</CODE>
</DT><DD>The Boolean value to be written.</DD>
</DL>
<P>
Once written, the Boolean value can be read with <CODE>
<A HREF="../../CRef/Routines/R_5b.htm#IX_InitFileReadBoolean()">InitFileReadBoolean()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileWriteData()">
 </A>
<H1 CLASS="refHeading">
InitFileWriteData()</H1>
<PRE CLASS="syntax">void	InitFileWriteData(
        const char 		*category,
        const char 		*key,
        const void 		*buffer,
        word		bufSize);</PRE>
<P>
This routine writes a given piece of data to the local GEOS.INI file. Pass it the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI category into which the data should be written.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI key within <CODE>
category</CODE>
 into which the data should be written.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a locked or fixed buffer containing the data to be written.</DD>
<DT>
<CODE>
bufSize</CODE>
</DT><DD>The size of the buffer in bytes.</DD>
</DL>
<P>
Once data has been written to the INI file, it can be read with <CODE>
<A HREF="../../CRef/Routines/R_5b.htm#IX_InitFileReadDataBlock()">InitFileReadDataBlock()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_5b.htm#IX_InitFileReadDataBuffer()">InitFileReadDataBuffer()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileWriteInteger()">
 </A>
<H1 CLASS="refHeading">
InitFileWriteInteger()</H1>
<PRE CLASS="syntax">void	InitFileWriteInteger(
        const char 		*category,
        const char 		*key,
        word		value);</PRE>
<P>
This routine writes an integer into the category and key specified for the local GEOS.INI file. Pass the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI category into which the data should be written.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI key within <CODE>
category</CODE>
 into which the data should be written.</DD>
<DT>
<CODE>
value</CODE>
</DT><DD>The integer to be written.</DD>
</DL>
<P>
The integer, once written, can be read with <CODE>
<A HREF="../../CRef/Routines/R_5b.htm#IX_InitFileReadInteger()">InitFileReadInteger()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileWriteString()">
 </A>
<H1 CLASS="refHeading">
InitFileWriteString()</H1>
<PRE CLASS="syntax">void	InitFileWriteString(
        const char *category,
        const char *key,
        const char *str);</PRE>
<P>
This routine writes an entire string into the category and key specified for the local GEOS.INI file. Pass it the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI category into which the data should be written.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI key within <CODE>
category</CODE>
 into which the data should be written.</DD>
<DT>
<CODE>
str</CODE>
</DT><DD>A pointer to the null-terminated string to be written. If the string contains line feeds or carriage returns, it will automatically be parsed into string segments and be put within curly braces; if it contains curly braces, all closing braces will automatically have a backslash inserted before them.</DD>
</DL>
<P>
To read a string written with this routine, use <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringBlock()">InitFileReadStringBlock()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringBuffer()">InitFileReadStringBuffer()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileWriteStringSection()">
 </A>
<H1 CLASS="refHeading">
InitFileWriteStringSection()</H1>
<PRE CLASS="syntax">void	InitFileWriteStringSection(
        const char *category,
        const char *key,
        const char *string);</PRE>
<P>
This routine appends a string section onto the blob specified by the <CODE>
category</CODE>
 and <CODE>
key</CODE>
 parameters. The string section will become part of the blob and will be its last section. The section may not contain any carriage returns or line feeds. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI category into which the data should be written.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated character string representing the INI key within <CODE>
category</CODE>
 into which the data should be written.</DD>
<DT>
<CODE>
string</CODE>
</DT><DD>A pointer to the string section to be written.</DD>
</DL>
<P>
Once written, the segment may be read with <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringSectionBlock()">InitFileReadStringSectionBlock()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringSectionBuffer()">InitFileReadStringSectionBuffer()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InitFileReadStringBlock() ...</A> 
<!-- to next --> | <A HREF="R_5e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InkDBGetDisplayInfo() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
