<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_31.htm,v 1.2 97/06/25 18:21:20 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GCNListSend() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_30.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GCNListAdd() ...</A> 
<!-- to next --> | <A HREF="R_32.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GenCopyChunk() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GCNListSend()">
 </A>
<A NAME="IX_GCNListSendFlags:with GCNListSend()">
 </A>
<H1 CLASS="refHeading">
GCNListSend()</H1>
<PRE CLASS="syntax">word	GCNListSend(
        ManufacturerID		manufID,						/* manufacturer of list */
        word		listType,						/* notification type */
        EventHandle		event,						/* event to be sent to list */
        MemHandle		dataBlock,						/* data block, if any */
        word		gcnListSendFlags);						/* GCNListSendFlags */</PRE>
<P>
This routine sends a message to all objects in the specified GCN list. The message is specified in <CODE>
event</CODE>
, and the list is specified in <CODE>
manufID</CODE>
 and <CODE>
listType</CODE>
. The message will be sent asynchronously (some time after the change has occurred) by the message queue. </P>
<P>
The <CODE>
dataBlock</CODE>
 parameter contains the memory handle of an extra data block to be sent with the notification, if any; this block should also be specified in the classed event. If no data block is required, pass a NullHandle. If a data block with a reference cound is used, increment the reference count by one before calling this routine; this routine decrements the count and frees the block if the count reaches zero.</P>
<P>
The <CODE>
gcnListSendFlags</CODE>
 parameter is of type <CODE>
GCNListSendFlags</CODE>
, which has only one meaningful flag for this routine:</P>
<DL>
<DT>
GCNLSF_SET_STATUS</DT><DD>
Causes the message sent to the GCN list to be set as the lists &quot;status.&quot; The list's status message is then sent to any object adding itself to the list at a later time. If this flag is set, the event handle in <CODE>
event</CODE>
 will be returned by the routine. If this flag is not set, the return value will be the number of messages sent out.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListSendToBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListSendToBlock()</H1>
<PRE CLASS="syntax">word	GCNListSendToBlock(
        ManufacturerID		manufID,				/* manufacturer id of list */
        word		listType,				/* notification type */
        EventHandle		event,				/* event to be sent to list */
        MemHandle		dataBlock,				/* data block, if any */
        MemHandle		mh,				/* handle of locked LMem block
						 * containing GCN list of lists */</PRE>
<PRE CLASS="syntax">        ChunkHandle		listOfLists,				/* chunk of list of lists */
        GCNListSendFlags		flags);				/* GCNListSendFlags */</PRE>
<P>
This routine sends the specified <CODE>
event</CODE>
 to the specified list, just as <CODE>
<A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSend()">GCNListSend()</A></CODE>
. <CODE>
GCNListSendToBlock()</CODE>
, however, specifies a particular instance of the GCN list by specifying the appropriate list of lists in <CODE>
mh</CODE>
 and <CODE>
listOfLists</CODE>
. Other parameters and return values are identical to <CODE>
<A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSend()">GCNListSend()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSend()">GCNListSend()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListSendToList()">
 </A>
<H1 CLASS="refHeading">
GCNListSendToList()</H1>
<PRE CLASS="syntax">void	GCNListSendToList(
        optr		list,				/* optr of GCN list */
        EventHandle		event,				/* event to send to list */
        MemHandle		dataBlock,				/* handle of data block, if any */
        GCNListSendFlags		flags);				/* GCNListSendFlags */</PRE>
<P>
This routine sends the specified <CODE>
event</CODE>
 to the specified GCN <CODE>
list</CODE>
. The list is specified explicitly by optr as opposed to by manufacturer ID and type. The event will be sent via the proper queues to all objects registered on the list. After the notification is handled by all notified objects, the event will be freed, as will the data block passed. (If no data block, pass NullHandle in <CODE>
dataBlock</CODE>
)</P>
<P>
The <CODE>
flags</CODE>
 parameter can have one flag, GCNLSF_SET_STATUS. If this flag is set, the event passed will be set as the list's status message.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSend()">GCNListSend()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_GCNListSendToListHandles()">
 </A>
<H1 CLASS="refHeading">
GCNListSendToListHandles()</H1>
<PRE CLASS="syntax">void	GCNListSendToListHandles(
        MemHandle		mh,				/* handle of list's block */
        ChunkHandle		ch,				/* chunk of list */
        EventHandle		event,				/* event to send to list */
        MemHandle		dataBlock,				/* handle of data block, if any */
        GCNListSendFlags		flags);				/* GCNListSendFlags */</PRE>
<P>
This routine is exactly the same as <CODE>
<A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSendToList()">GCNListSendToList()</A></CODE>
; the list is specified not by optr, however, but by a combination of its global and chunk handles.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_31.htm#IX_GCNListSendToList()">GCNListSendToList()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GCNListUnRelocateBlock()">
 </A>
<H1 CLASS="refHeading">
GCNListUnRelocateBlock()</H1>
<PRE CLASS="syntax">Boolean	GCNListUnRelocateBlock(
        MemHandle		mh,				/* handle of the locked lmem block
						 * containing the list of lists */</PRE>
<PRE CLASS="syntax">        ChunkHandle		listOfLists,				/* chunk of the list of lists */
        MemHandle		relocBlock);				/* handle of block containing
						 * relocation/unrelocation info */</PRE>
<P>
This routine unrelocates the specified list of lists, updating all the optrs according to the information in <EM>
relocBlock</EM>
. This routine is rarely, if ever, used by applications; it is used primarily by the UI when shutting down to a state file.</P>
<P>
It returns <CODE>
true</CODE>
 if the specified list of lists has no lists saved to state and therefore is simply destroyed. The return value is <CODE>
false</CODE>
 if the list of lists is saved to the state file normally.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gcnlist.goh</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_30.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GCNListAdd() ...</A> 
<!-- to next --> | <A HREF="R_32.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GenCopyChunk() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
