<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_FoamDBAdd.htm,v 1.4 97/07/31 11:35:47 cgroom Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: FoamDBAddFieldToRecord()...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FloatFloatToAscii() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBGetCurrent.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FoamDBGetCurrentRecordID() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>

<DIV>
<A NAME="IX_FoamDBAddFieldToRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBAddFieldToRecord()</H1>
<PRE CLASS="syntax"> FieldID FoamDBAddFieldToRecord(
        VMFileHandle       file, 
        MemHandle       record, 
        byte       *fieldName, 
        word       fieldType);
</PRE>
<P>
Adds a field to the record <EM>record</EM> and gives it the name <EM>fieldName</EM>. A unique <CODE>FieldID</CODE> is assigned to the new field and returned.  The Foam Database uses the <EM>fieldType</EM> to determine the sort order of the records (i.e., a field of type "3" will be inserted after all the existing fields of type "3", but before the fields of type "4"). If you are using this routine within the context of a <CODE>ContDB</CODE>, then <EM>fieldType</EM> should be one of the <CODE>ContdbFieldType</CODE> values (see below).  Otherwise, you may set your own field type.
<P>
<PRE CLASS="syntax">
	/*
 	* The standard field types in the contact database
 	*/
	typedef ByteEnum ContdbFieldType;
	#define CFT_NAME        0
	#define CFT_COMPANY     1
	#define CFT_TITLE       2
	#define CFT_ADDRESS     3
	#define CFT_PHONE       4
	#define CFT_FAX         5
	#define CFT_EMAIL       6
	#define CFT_DTMF        7
	#define CFT_NOTES       8
	/* Only available in Communicator products after Feb 1997: */
	#define CFT_URL         9
	#define CFT_PASSWORD    10
	#define CFT_TEL_FAX     11
	#define CFT_TEL_DATA    12 
</PRE>

<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>


<DIV>
<A NAME="IX_FoamDBBinarySearch()">
 </A>
<H1 CLASS="refHeading">
FoamDBBinarySearch()</H1>
<PRE CLASS="syntax">RecordID   FoamDBBinarySearch(
		VMFileHandle file,
		MemHandle record,
		PCB(int, callback,		
			(void * passedRecord,	 /* Callback routine */
			void * curRecord )));

</PRE>
<P>
This routine performs a binary search of the Foam database <EM>file</EM> to determine the index of <EM>record</EM>. The database is sorted according to an application-defined callback routine, so <CODE>FoamDBBinarySearch()</CODE> can find <EM>record</EM> in a divide-and-conquer method using a callback routine based on the same sorting scheme. If this routine finds <EM>record</EM>, it returns the <CODE>RecordID</CODE> of this record in the database; otherwise, it returns where this record would belong in the database.
<P>
(<A HREF="R_80.htm#IX_PCB()"><CODE>PCB</CODE></A> is a GEOS macro that defines a callback routine.) The prototype for this callback routine should be of the form:

<PRE class = "syntax">
      int  _pascal  MyCallBackRoutine(void * passedRecord, void * curRecord);
</PRE>

The callback routine should return +1 if the record <EM>passedRecord</EM> comes after <EM>curRecord</EM>, -1 if <EM>passedRecord</EM> comes before <EM>curRecord</EM>, and 0 if the items match.

<P CLASS="refField">
Include:        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>




<DIV>
<A NAME="IX_FoamDBClose()">
 </A>
<H1 CLASS="refHeading">
FoamDBClose()</H1>
<PRE CLASS="syntax">word FoamDBClose(
        VMFileHandle    file);
</PRE>
<P>
Closes the file. It is the same as <CODE>
<A HREF="../../CRef/Routines/R_a2.htm#IX_VMClose()">VMClose()</A></CODE>. 
If successful, returns non-zero; if an error occurred, then it returns <CODE>FALSE</CODE> and the error value must be retrieved by <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError().</A></CODE>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBCreateEmptyRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBCreateEmptyRecord()</H1>
<PRE CLASS="syntax">MemHandle FoamDBCreateEmptyRecord(
        VMFileHandle    file);
</PRE>
<P>
Creates a new record in the database, gives it a unique ID, and returns
 the handle of the record data. This record will contain no fields or data.
 This record does not get saved to the database unless <CODE>
<A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord()</A></CODE>
 is called. 
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> If you want to free the memory associated with a record, <STRONG>do not</STRONG> use <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemFree()">MemFree()</A></CODE>; 
instead call
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDiscardRecord()">FoamDBDiscardRecord()</A></CODE>
to discard any record changes or 
<CODE><A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord()</A></CODE>
to commit them to the the database.</P>

<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBDeleteFieldFromRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBDeleteFieldFromRecord()</H1>
<PRE CLASS="syntax">void FoamDBDeleteFieldFromRecord(
        VMFileHandle    file,
        MemHandle       record,
        FieldID            id);     /* Field to delete */
</PRE>
<P>
Deletes field ID <EM>id</EM> from the <EM>record</EM> of the database <EM>file</EM>. <EM>id</EM> is the ID of the field as returned from 
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBAddFieldToRecord()">FoamDBAddFieldToRecord()</A></CODE>.
While it's not a pretty solution, you can also get the <CODE>FieldID</CODE> of a field from the <CODE>FH_id</CODE> part of the <CODE>FieldHeader</CODE> struct. 
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBDeleteRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBDeleteRecord()</H1>
<PRE CLASS="syntax">Boolean FoamDBDeleteRecord(
	VMFileHandle 	file, 
	MemHandle 	record);    /* Record to terminated */
</PRE>
<P>
This routine frees up the record data in <EM>record</EM>, and, if the record exists in the
 database, deletes it from the database as well.
 <P>
 Returns non-zero if the record did not exist in the database.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBDiscardRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBDiscardRecord()</H1>
<PRE CLASS="syntax">void FoamDBDiscardRecord(
	VMFileHandle 	file, 
	MemHandle 	record);
</PRE>
<P>
This routine discards any changes to the passed record <EM>record</EM> and frees up the record data stored in the passed handle, but does nothing to the data stored in the database file.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>



<DIV>
<A NAME="IX_FoamDBDuplicateRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBDuplicateRecord()</H1>
<PRE CLASS="syntax">MemHandle FoamDBDuplicateRecord(
        VMFileHandle    file,
        MemHandle       record);
</PRE>
<P>
Duplicates an existing record <EM>record</EM> of FoamDB <EM>file</EM>, assigns a new ID to it, and returns the handle of the duplicate.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> As with <CODE>
<A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBCreateEmptyRecord()">FoamDBCreateEmptyRecord()</A></CODE>, 
the record must eventually be saved or destroyed by calling <CODE>
<A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDiscardRecord()">FoamDBDiscardRecord()</A></CODE>
or <CODE>
<A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBFieldEnum()">
 </A>
<H1 CLASS="refHeading">
FoamDBFieldEnum()</H1>
<PRE CLASS="syntax">Boolean FoamDBFieldEnum(
        MemHandle record, 
        void *enumData,
        PCB(Boolean, callback,  /* Non-zero to stop enum */
                (FieldHeader *field,  void *callbackEnumData)));      /* Callback routine */
</PRE>
<P>
This routine essentially "walks" through each field in the specified
    <EM>record</EM> and invokes the specified callback routine for each
    field.  <EM>enumData</EM> can point to the initial value of an
    application-defined buffer or data structure if one is used by 
    the callback routine, otherwise it can be ignored.  This pointer is passed to the callback routine.
</P>
<P>
The callback routine accepts two parameters; a pointer to the current field <EM>field</EM>, and some application-defined data <EM>callbackEnumData</EM>. <EM>callbackEnumData</EM> 
  may be used to store information between different calls to the callback
 routine such as storing the longest string yet found or performing
 complex filtering on the record (in which case <EM> callbackEnumData </EM> could
  point to an array of field IDs gathered from the field pointer).
To end the enumeration before reaching the last field in the
  record, return <CODE>TRUE</CODE> (or any non-zero value) from the callback  routine. 
<P>
To use the callback routine:
<P>
<PRE CLASS="syntax">
/*
 * Prototype of callback routine
 */
Boolean _pascal ExampleCallback (FieldHeader *field, void *callbackEnumData);
...
/* 
 * Call FoamDBFieldEnum() 
 */
ok = FoamDBFieldEnum(recordHandle, &someDataStruct, ExampleCallback);
</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_FoamDBGetCurrent.htm#IX_FoamDBLockedRecordEnum()">FoamDBLockedRecordEnum()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FloatFloatToAscii() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBGetCurrent.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FoamDBGetCurrentRecordID() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
