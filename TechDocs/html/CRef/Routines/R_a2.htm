<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_a2.htm,v 1.2 97/06/25 18:47:08 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: VMClose() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VirtualSerialSetFormat() ...</A> 
<!-- to next --> | <A HREF="R_a3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMGetMapBlock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_VMClose()">
 </A>
<H1 CLASS="refHeading">
VMClose()</H1>
<PRE CLASS="syntax">word	VMClose(
        VMFileHandle		file,
        Boolean		noErrorFlag);</PRE>
<P>
This routine updates and closes a VM file. If it is successful, it returns <EM>
false</EM>
. If it fails, it returns a member a <CODE>
VMStatus </CODE>
error code. Note that the routine closes the file even if it could not successfully update the file; in this case, any changes since the last update will be lost. For this reason, it is safest to call <CODE>
<A HREF="../../CRef/Routines/R_a4.htm#IX_VMUpdate()">VMUpdate()</A></CODE>
 first, then (after the file has been successfully updated) call <CODE>
VMClose()</CODE>
.</P>
<P>
If <EM>
noErrorFlag</EM>
 is FILE_NO_ERRORS, <CODE>
VMClose()</CODE>
 will fatal-error if it could not succesfully update and close the file. If <EM>
noErrorFlag</EM>
 is neither FILE_NO_ERRORS nor zero, <CODE>
VMClose()</CODE>
 will crash.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMCompareVMChains()">
 </A>
<H1 CLASS="refHeading">
VMCompareVMChains()</H1>
<PRE CLASS="syntax">Boolean	VMCompareVMChains(
        VMFileHandle		sourceFile,
        VMChain		sourceChain,
        VMFileHandle		destFile,
        VMChain		destChain);</PRE>
<P>
This routine compares two VM chains or DB items. It returns <EM>
true</EM>
 if the two are identical; otherwise it returns <EM>
false</EM>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMCopyVMBlock()">
 </A>
<H1 CLASS="refHeading">
VMCopyVMBlock()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMCopyVMBlock(
        VMFileHandle		sourceFile,
        VMBlockHandle		sourceBlock,
        VMFileHandle		destFile);</PRE>
<P>
This routine creates a duplicate of a VM block in the specified destination file (which may be the same as the source file). It returns the duplicate block's handle. The duplicate will have the same user ID as the original block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMCopyVMChain()">
 </A>
<H1 CLASS="refHeading">
VMCopyVMChain()</H1>
<PRE CLASS="syntax">VMChain 	VMCopyVMChain(
        VMFileHandle		sourceFile,
        VMChain		sourceChain,
        VMFileHandle		destFile);</PRE>
<P>
This routine creates a duplicate of a VM chain (or DB item) in the specified destination file (which may be the same as the source file). It returns the duplicate's <CODE>
VMChain</CODE>
 structure. All blocks in the duplicate will have the same user ID numbers as the corresponding original blocks.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMDetach()">
 </A>
<H1 CLASS="refHeading">
VMDetach()</H1>
<PRE CLASS="syntax">MemHandle 	VMDetach(
        VMFileHandle		file,
        VMBlockHandle		block,
        GeodeHandle		owner);			/* Pass zero to have block owned by 
					 * current thread's owner */</PRE>
<P>
This routine detaches a global memory block from a VM block. If the VM block is not currently in memory, <CODE>
VMDetach()</CODE>
 allocates a memory block and copies the VM block into it. If the VM block is dirty, <CODE>
VMDetach()</CODE>
 will update the block to the file before detaching it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMDirty()">
 </A>
<H1 CLASS="refHeading">
VMDirty()</H1>
<PRE CLASS="syntax">void	VMDirty(
        MemHandle		mh);</PRE>
<P>
This routine marks a locked VM block as dirty.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMFind()">
 </A>
<H1 CLASS="refHeading">
VMFind()</H1>
<PRE CLASS="syntax">VMBlockHandle 	VMFind(
        VMFileHandle		file,
        VMBlockHandle		startBlock,
        word		userID);</PRE>
<P>
This routine finds a VM block with the specified user ID number. If the second argument is <CODE>
NullHandle</CODE>
 the routine will return the matching block with the lowest handle. If the second argument is non-null, it will return the first matching block whose handle is larger than the one passed (in numerical order).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMFree()">
 </A>
<H1 CLASS="refHeading">
VMFree()</H1>
<PRE CLASS="syntax">void	VMFree(
        VMFileHandle		file,
        VMBlockHandle		block);</PRE>
<P>
This routine frees the specified VM block. If a global memory block is currently attached to the VM block, it is freed too.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMFreeVMChain()">
 </A>
<H1 CLASS="refHeading">
VMFreeVMChain()</H1>
<PRE CLASS="syntax">void	VMFreeVMChain(
        VMFileHandle		file,
        VMChain		chain);</PRE>
<P>
This routine frees the specified VM chain or DB item. If a chain is specified, all blocks in the chain will be freed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMGetAttributes()">
 </A>
<H1 CLASS="refHeading">
VMGetAttributes()</H1>
<PRE CLASS="syntax">word	VMGetAttributes(
        VMFileHandle		file);</PRE>
<P>
Each VM file contains a set of <CODE>
VMAttributes</CODE>
 flags. These determine how the VM manager will treat the file. This routine returns the current flags.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	When the Document Control objects create files, they automatically initialize the attributes appropriately.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a4.htm#IX_VMSetAttributes()">VMSetAttributes()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_VMGetDirtyState()">
 </A>
<H1 CLASS="refHeading">
VMGetDirtyState()</H1>
<PRE CLASS="syntax">word	VMGetDirtyState(
        VMFileHandle		file);</PRE>
<P>
This routine finds out if a file has been dirtied. It returns a word-sized value. The upper byte of the return value is non-zero if the file has not been dirtied since the last save, auto-save, or update; the lower byte is non-zero if the file has not been dirtied since the last save. Thus, if the return value is zero, the file must be updated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	<CODE>
<A HREF="../../CRef/Routines/R_a4.htm#IX_VMUpdate()">VMUpdate()</A></CODE>
 is optimized for updating clean files. For this reason, it is faster to call <CODE>
<A HREF="../../CRef/Routines/R_a4.htm#IX_VMUpdate()">VMUpdate()</A></CODE>
 then it is to first check the dirty state, then call <CODE>
<A HREF="../../CRef/Routines/R_a4.htm#IX_VMUpdate()">VMUpdate()</A></CODE>
 only if the file is dirty.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VirtualSerialSetFormat() ...</A> 
<!-- to next --> | <A HREF="R_a3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">VMGetMapBlock() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
