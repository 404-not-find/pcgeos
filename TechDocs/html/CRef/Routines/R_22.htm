<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_22.htm,v 1.2 97/06/25 18:14:37 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ElementArrayDelete() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_21.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECVMCheckVMBlockHandle() ...</A> 
<!-- to next --> | <A HREF="R_23.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ElementArrayRemoveReference() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ElementArrayDelete()">
 </A>
<H1 CLASS="refHeading">
ElementArrayDelete()</H1>
<PRE CLASS="syntax">void	ElementArrayDelete(
        optr	arr,					/* optr to element array */
        word	token);					/* index of element to delete */</PRE>
<P>
This routine deletes an element from an element array regardless of its reference count. The routine is passed the element array's optr and the token for the element to delete.</P>
<P>
Note that when an element is removed, it is actually resized down to zero size and added to a list of free elements. That way the index numbers of later elements are preserved.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayRemoveReference()">ElementArrayRemoveReference()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayDeleteHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayDeleteHandles()</H1>
<PRE CLASS="syntax">void	ElementArrayDeleteHandles(
        MemHandle		mh,				/* Handle of LMem heap */
        ChunkHandle		ch,				/* Chunk handle of element array */
        word		token);				/* Index of element delete */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_22.htm#IX_ElementArrayDelete()">ElementArrayDelete()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayRemoveReference()">ElementArrayRemoveReference()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayElementChanged()">
 </A>
<H1 CLASS="refHeading">
ElementArrayElementChanged()</H1>
<PRE CLASS="syntax">void	ElementArrayElementChanged(
        optr	arr,				/* optr to element array */
        word	token,				/* Index number of element */
        dword	callbackData,				/* This is passed along to callback */
        Boolean _pascal (*callback)			/* Returns true if elements identical */
        		(void *			elementChanged,
        		 void *			elementToCompare,
        		 dword			valueForCallback));</PRE>
<P>
This routine checks to see if an element is identical to any other elements in the same element array. This is used after an element has changed to see if it now matches another element. If the element matches another, it will be deleted, and the other element will have its reference count incremented.</P>
<P>
The routine is passed an optr to the element array, the token of the element which is being checked, a dword of data (which is passed to the callback routine), and a pointer to a callback comparison routine. The callback routine itself is passed pointers to two elements and the <EM>
callbackData</EM>
 argument passed to <CODE>
ElementArrayElementChanged()</CODE>
. The callback routine should be declared _pascal. If the two elements are identical, the callback should return <EM>
true</EM>
 (i.e. non-zero); otherwise, it should return <EM>
false</EM>
.</P>
<P>
If you pass a null function pointer, <CODE>
ElementArrayElementChanged()</CODE>
 will do a bytewise comparison of the elements.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayElementChangedHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayElementChangedHandles()</H1>
<PRE CLASS="syntax">void	ElementArrayElementChangedHandles(
        MemHandle		memHandle,				/* Handle of LMem heap's block */
        ChunkHandle		chunkHandle,				/* Chunk handle of element array */
        word		token,				/* Index number of element */
        dword		callbackData,					/* This is passed along to
							 * callback */</PRE>
<PRE CLASS="syntax">        Boolean _pascal (*callback)			/* Returns true if elements identical */
        		(void *			elementChanged,
        		 void *			elementToCompare,
        		 dword			valueForCallback));</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_22.htm#IX_ElementArrayElementChanged()">ElementArrayElementChanged()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayGetUsedCount()">
 </A>
<H1 CLASS="refHeading">
ElementArrayGetUsedCount()</H1>
<PRE CLASS="syntax">word	ElementArrayGetUsedCount(
        optr	arr,			/* optr to element array */
        dword	callbackData,			/* This is passed to callback routine */
        Boolean _pascal (*callback)				/* return true to count this element */
        		(void * element, dword cbData));</PRE>
<P>
This routine counts the number of active elements in an element array; that is, elements which have a reference count of one or greater. It can be instructed to count every element, or every element which matches certain criteria. The routine is passed three parameters: the optr of the chunk array, a dword which is passed to the callback routine, and a callback routine which determines whether the element should be counted. The callback routine,which should be declared _pascal, is passed the dword an a pointer to an element. It should return <EM>
true</EM>
 if the element should be counted; otherwise, it should return <EM>
false</EM>
. To count every element, pass a null callback pointer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayTokenToUsedIndex()">ElementArrayTokenToUsedIndex()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_23.htm#IX_ElementArrayUsedIndexToToken()">ElementArrayUsedIndexToToken()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayGetUsedCountHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayGetUsedCountHandles()</H1>
<PRE CLASS="syntax">void	ElementArrayGetUsedCountHandles(
        MemHandle 		mh,			/* Handle of LMem heap's block */
        ChunkHandle		ch,			/* Chunk handle of element array */
        dword	callbackData,			/* This is passed to callback routine */
        Boolean _pascal (*callback)				/* return true to count this element */
        		(void * element, dword cbData));</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_22.htm#IX_ElementArrayGetUsedCount()">ElementArrayGetUsedCount()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_21.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECVMCheckVMBlockHandle() ...</A> 
<!-- to next --> | <A HREF="R_23.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ElementArrayRemoveReference() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
