<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_56.htm,v 1.2 97/06/25 18:29:37 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: HandleV() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_55.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HAL_COUNT() ...</A> 
<!-- to next --> | <A HREF="R_57.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HugeArrayDestroy() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_HandleV()">
 </A>
<A NAME="IX_Semaphores:HandleV()">
 </A>
<H1 CLASS="refHeading">
HandleV()</H1>
<PRE CLASS="syntax">void	HandleV(
        MemHandle		mh);		/* Handle of block to grab */</PRE>
<P>
<CODE>
HandleV()</CODE>
 is part of a set of synchronization routines. If several different threads will be accessing the same global memory block, they need to make sure their activities will not conflict. The way they do that is to use synchronization routines to get control of a block. <CODE>
HandleV()</CODE>
 is part of one set of synchronization routines.</P>
<P>
If a block is being accessed via these synchronization routines, then a thread will not access a block until it has &quot;grabbed&quot; it with <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
. When a thread is done with the block, it can release it for use by the other threads by calling <CODE>
HandleV()</CODE>
. Note that <CODE>
HandleV()</CODE>
 does not unlock the block; it just changes the block's semaphore so other threads can grab it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
heap.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you need to unlock the thread just before releasing it, use the routine <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>
, which first unlocks the thread, and then calls <CODE>
HandleV()</CODE>
 to release it. You can find out if the block is being accessed by looking at the <CODE>
HM_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If <CODE>
HM_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all threads accessing the block use <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>
 to access the thread. The routines use the<CODE>
 HM_otherInfo</CODE>
 field of the handle table entry; do not alter this field.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not use this on a block unless you have grabbed it. The routine does not check to see that you have grabbed the thread; it just clears the semaphore and returns.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrab()">MemThreadGrab()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadGrabNB()">MemThreadGrabNB()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6f.htm#IX_MemThreadRelease()">MemThreadRelease()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6e.htm#IX_MemPLock()">MemPLock()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockV()">MemUnlockV()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_HelpSendHelpNotification()">
 </A>
<H1 CLASS="refHeading">
HelpSendHelpNotification()</H1>
<PRE CLASS="syntax">void 	HelpSendHelpNotification(
        word 		HelpType, 
        const char 		*contextname, 
        const char 		*filename);</PRE>
<P>
Use this routine to bring up on-line help on the fly or to dynamically change the context presently showing in on-line help.</P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayAppend()">
 </A>
<H1 CLASS="refHeading">
HugeArrayAppend()</H1>
<PRE CLASS="syntax">dword	HugeArrayAppend(
        VMFileHandle		file,
        VMBlockhandle		vmBlock,				/* Handle of directory block */
        word		numElem,				/* # of elements to add to end of 
						 * array */</PRE>
<PRE CLASS="syntax">        const void *		initData);				/* Copy into new element(s) */</PRE>
<P>
This routine appends one or more elements to a Huge Array. If <CODE>
initData</CODE>
 is a null pointer, the elements will be uninitialized.</P>
<P>
If the Huge Array contains variable sized elements, this routine will append a single element; this element will be <CODE>
numElem</CODE>
 bytes long. The single element will be initialized to hold <EM>
initData</EM>
.</P>
<P>
If the Huge Array contains constant-sized elements, then <EM>
initData</EM>
 will be treated as an array of element-sized structures. <EM>
initData</EM>
[0] will be the initial value of the first element, <EM>
initData</EM>
[1] will be the initial value of the second, and so on.</P>
<P>
The return value is the element number of the element added. If more than one element was added; this will be the number of the first element added.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayCompressBlocks()">
 </A>
<H1 CLASS="refHeading">
HugeArrayCompressBlocks()</H1>
<PRE CLASS="syntax">void	HugeArrayCompressBlocks(
        VMFileHandle		vmFile,			/* File containing Huge Array */
        VMBlockHandle		vmBlock);			/* handle of directory block */</PRE>
<P>
This routine compacts a Huge Array, resizing every block to be just as large as necessary to accommodate its elements. It does not change any of the data in the Huge Array.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayContract()">
 </A>
<H1 CLASS="refHeading">
HugeArrayContract()</H1>
<PRE CLASS="syntax">word	HugeArrayContract(
        void **		elemPtr,				/* **elemPtr is first element to
 						 * delete */</PRE>
<PRE CLASS="syntax">        word		numElem);				/* # of elements to delete */</PRE>
<P>
Delete a number of elements starting at an address in a Huge Array. The routine will fix up the pointer so it points to the first element after the deleted elements. The routine automatically locks and unlocks Huge Array blocks as necessary.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayCreate()">
 </A>
<H1 CLASS="refHeading">
HugeArrayCreate()</H1>
<PRE CLASS="syntax">VMBlockhandle 	HugeArrayCreate(
        VMFileHandle		vmFile,				/* Create in this VM file */
        word		elemSize,				/* Pass zero for variable-size
						 * elements */</PRE>
<PRE CLASS="syntax">        word		headerSize);				/* Pass zero for default header */</PRE>
<P>
This routine creates and initializes a Huge Array in the specified file. It returns the handle of the Huge Array's directory block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayDelete()">
 </A>
<H1 CLASS="refHeading">
HugeArrayDelete()</H1>
<PRE CLASS="syntax">void	HugeArrayDelete(
        VMFileHandle		vmFile,
        VMBlockHandle		vmBlock,			/* handle of directory block */
        word		numElem,			/* # of elements to delete */
        dword		elemNum);			/* Index of first element to delete */</PRE>
<P>
This routine deletes one or more elements from a Huge Array. It contracts and frees blocks as necessary.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_HugeArrayDirty()">
 </A>
<H1 CLASS="refHeading">
HugeArrayDirty()</H1>
<PRE CLASS="syntax">void	HugeArrayDirty(
        const void *		elemPtr);				/* Element in dirty block */</PRE>
<P>
This routine marks a block in a Huge Array as dirty. The routine is passed a pointer to anywhere in a dirty element; that element's block will be dirtied.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
hugearr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Be sure to call this routine before you unlock the element; otherwise, the block may be discarded before you can dirty it.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_55.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">HAL_COUNT() ...</A> 
<!-- to next --> | <A HREF="R_57.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">HugeArrayDestroy() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
