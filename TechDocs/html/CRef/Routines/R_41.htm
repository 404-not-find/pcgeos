<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_41.htm,v 1.3 97/08/08 16:51:55 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GrGetDefFontID() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_40.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrGetAreaColor() ...</A> 
<!-- to next --> | <A HREF="R_42.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrGetLineMask() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GrGetDefFontID()">
 </A>
<H1 CLASS="refHeading">
GrGetDefFontID()</H1>
<PRE CLASS="syntax">FontID	GrGetDefFontID(
        dword	* sizeSHL16);		/* pointer to buffer for returned size */</PRE>
<P>
Get the system default font (including size).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetExclusive()">
 </A>
<H1 CLASS="refHeading">
GrGetExclusive()</H1>
<PRE CLASS="syntax">GStateHandle 	GrGetExclusive(
        GeodeHandle videoDriver);</PRE>
<P>
Use this routine to find out which GState, if any, has grabbed the video exclusive.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetFont()">
 </A>
<H1 CLASS="refHeading">
GrGetFont()</H1>
<PRE CLASS="syntax">FontID	GrGetFont(
        GStateHandle		gstate,				/* subject GState */
        WWFixedAsDWord		* pointSize);				/* pointer to buffer for
						 * returned point size */</PRE>
<P>
Get the passed GState's current font, including point size.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetFontName()">
 </A>
<H1 CLASS="refHeading">
GrGetFontName()</H1>
<PRE CLASS="syntax">FontID 	GrGetFontName(
        FontID 		id,			/* ID of font */
        const char 		* name);			/* buffer for returned name string */</PRE>
<P>
Get the string name of a font. Note that if the returned <CODE>
FontID</CODE>
 is zero, then the font was not found. The name string buffer should be a least FID_NAME_LEN in size.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetFontWeight()">
 </A>
<H1 CLASS="refHeading">
GrGetFontWeight()</H1>
<PRE CLASS="syntax">FontWeight GrGetFontWeight(
        GStateHandle gstate);				/* GState containing the font */</PRE>
<P>
Get the current font weight set for the passed GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetFontWidth()">
 </A>
<H1 CLASS="refHeading">
GrGetFontWidth()</H1>
<PRE CLASS="syntax">FontWidth GrGetFontWidth(
        GStateHandle gstate);				/* GState containing the font */</PRE>
<P>
Get the current font width set for the passed GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetGStringBounds()">
 </A>
<H1 CLASS="refHeading">
GrGetGStringBounds()</H1>
<PRE CLASS="syntax">void	GrGetGStringBounds(
        GStringHandle		source,				/* GString to be checked */
        GStateHandle		dest,				/* handle of GState to use */
        GSControl		flags,				/* GSControl flags */
        Rectangle		* bounds);				/* returned bounds of GState */</PRE>
<P>
This routine returns the coordinate bounds of the <CODE>
source</CODE>
 GString drawn at the current position in the GString. The <CODE>
dest</CODE>
 GState will be used if passed; to have no GState restrictions, pass a null handle. The bounds of the smallest containing rectangle will be returned in the structure pointed to by <CODE>
bounds</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetGStringBoundsDWord()">
 </A>
<H1 CLASS="refHeading">
GrGetGStringBoundsDWord</H1>
<PRE CLASS="syntax">void	GrGetGStringBoundsDWord(
        Handle		gstring,				/* GString to be checked */
        GStateHandle		gstate,				/* handle of GState to use */
        GSControl		flags,				/* GSControl flags */
        RectDWord		* bounds);				/* returned bounds of GState */</PRE>
<P>
This routine behaves as <CODE>
<A HREF="../../CRef/Routines/R_41.htm#IX_GrGetGStringBounds()">GrGetGStringBounds()</A></CODE>
, but has been alterred to work with 32-bit graphics spaces.</P>
<P>
This routine returns the coordinate bounds of aGString drawn at the current position in the GString. The <EM>
gstate</EM>
 GState will be used if passed; to have no GState restrictions, pass a null handle. The bounds of the smallest containing rectangle will be returned in the structure pointed to by <CODE>
bounds</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetGStringElement()">
 </A>
<H1 CLASS="refHeading">
GrGetGStringElement()</H1>
<PRE CLASS="syntax">GStringElement GrGetGStringElement(
        GStateHandle		gstate,					/* handle of GString's GState */
        void 		* buffer,					/* pointer to return buffer */
        word 		bufSize,					/* size of return buffer */
        word 		* elementSize,					/* size of GString element */
        void		** pointerAfterData);							/* pointer to pointer to
							 * next element in GString */</PRE>
<P>
Extract the next element from a graphics string. The opcode is returned explicitly. The routine's data can be returned in a buffer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_GrGetHugeBitmapSize()">
 </A>
<H1 CLASS="refHeading">
GrGetHugeBitmapSize()</H1>
<PRE CLASS="syntax">XYValueAsDWord GrGetHugeBitmapSize(
        VMFileHandle		vmFile,	
        VMBlockHandle 		vmBlk);</PRE>
<P>
Returns the dimensions (horizontal and vertical) of the passed huge bitmap, 
as referenced by a VM block and file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_GrGetInfo()">
 </A>
<H1 CLASS="refHeading">
GrGetInfo()</H1>
<PRE CLASS="syntax">void	GrGetInfo(
        GStateHandle		gstate,			/* GState to get information about */
        GrInfoTypes		type,			/* type of information to get */
        void	 	* data);			/* buffer for returned information */</PRE>
<P>
Get the private data, window handle, or pen position associated with the GState.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE>typedef enum {
    GIT_PRIVATE_DATA,
    GIT_WINDOW, 
    GIT_PEN_POS
} GrInfoType</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetLineColor()">
 </A>
<H1 CLASS="refHeading">
GrGetLineColor()</H1>
<PRE CLASS="syntax">RGBColorAsDWord GrGetLineColor(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the color used when drawing lines.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetLineColorMap()">
 </A>
<H1 CLASS="refHeading">
GrGetLineColorMap()</H1>
<PRE CLASS="syntax">ColorMapMode GrGetLineColorMap(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the mode used when drawing lines in an unavailable color.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetLineEnd()">
 </A>
<H1 CLASS="refHeading">
GrGetLineEnd()</H1>
<PRE CLASS="syntax">LineEnd	GrGetLineEnd(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the end used when drawing lines.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetLineJoin()">
 </A>
<H1 CLASS="refHeading">
GrGetLineJoin()</H1>
<PRE CLASS="syntax">LineJoin GrGetLineJoin(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the join used when drawing corners.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_40.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrGetAreaColor() ...</A> 
<!-- to next --> | <A HREF="R_42.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrGetLineMask() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
