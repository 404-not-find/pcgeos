<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_1c.htm,v 1.2 97/06/25 18:12:14 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: DiskSave() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DiskGetDrive() ...</A> 
<!-- to next --> | <A HREF="R_1d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DriveGetDefaultMedia() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_DiskSave()">
 </A>
<H1 CLASS="refHeading">
DiskSave()</H1>
<PRE CLASS="syntax">Boolean	DiskSave(
        DiskHandle		disk,
        void *		buffer,				/* data will be written here */
        word *		bufferSize);				/* Size of buffer (in bytes) */</PRE>
<P>
This routine writes information about a disk in the specified buffer. <CODE>
<A HREF="../../CRef/Routines/R_1b.htm#IX_DiskRestore()">DiskRestore()</A></CODE>
 can use this information to return the disk handle, even in another session of GEOS. The <EM>
bufferSize</EM>
 argument should point to a word containing the size of the buffer (in bytes). If the buffer is large enough, <CODE>
DiskSave()</CODE>
 will write an opaque data structure into the buffer, and change the value of <CODE>
*bufferSize</CODE>
 to the actual size of the data structure; any extra buffer space can be freed or otherwise used. In this case, <CODE>
DiskSave()</CODE>
 will return <EM>
true</EM>
 (i.e. non-zero). If the buffer was too small, <CODE>
DiskSave()</CODE>
 will return <EM>
false</EM>
 (i.e. zero) and write the size needed into <CODE>
*bufferSize</CODE>
. Simply call <CODE>
DiskSave()</CODE>
 again with a large enough buffer. If <CODE>
DiskSave()</CODE>
 failed for some other reason, it will return <EM>
false</EM>
 and set <CODE>
*bufferSize</CODE>
 to zero.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_1b.htm#IX_DiskRestore()">DiskRestore()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	 <STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ERROR_&ldots;">
 </A>
<A NAME="IX_DiskSetVolumeName()">
 </A>
<H1 CLASS="refHeading">
DiskSetVolumeName()</H1>
<PRE CLASS="syntax">word	DiskSetVolumeName(
        DiskHandle		dh,
        const char *		name);			/* Change the name to this */</PRE>
<P>
This routine changes the disk's volume label. If it is successful, it returns zero; otherwise it returns an error code. It also sets or clears the thread's error value appropriately. The following error codes may be returned:</P>
<DL>
<DT>
ERROR_INVALID_VOLUME</DT><DD>
An invalid disk handle was passed to the routine.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
For some reason, the volume's name could not be changed. For example, the volume might not be writable.</DD>
<DT>
ERROR_DISK_STALE</DT><DD>
The drive containing that disk has been deleted. This usually only happens with network drives.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
disk.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_DosExec()">
 </A>
<H1 CLASS="refHeading">
DosExec()</H1>
<PRE CLASS="syntax">word	DosExec(
        const char *		prog,
        DiskHandle 		progDisk,
        const char *		arguments,
        const char *		execDir,
        DiskHandle 		execDisk,
        DosExecFlags 		flags);</PRE>
<P>
This routine shuts down GEOS to run a DOS program. It returns an error code if an error occurs or zero if successful. Its parameters are listed below:</P>
<DL>
<DT>
<CODE>
prog</CODE>
</DT><DD>A pointer to a null-terminated character string representing the path of the program to be run. If a null string (not a null pointer), the system's DOS command interpreter will be run. The path string should not contain the drive name.</DD>
<DT>
<CODE>
progDisk</CODE>
</DT><DD>A disk handle indicating the disk on which the program to be executed sits. If zero is passed, the disk on which GEOS resides will be used.</DD>
<DT>
<CODE>
arguments</CODE>
</DT><DD>A pointer to a locked or fixed buffer containing arguments to be passed to the program being run.</DD>
<DT>
<CODE>
execDir</CODE>
</DT><DD>A pointer to a null-terminated character string representing the path in which the program is to be run. The string should not contain the drive name. If a null pointer is passed and <CODE>
execDisk</CODE>
 is zero, the program will be run in the directory in which GEOS was first started.</DD>
<DT>
<CODE>
execDisk</CODE>
</DT><DD>The disk handle of the disk containing the directory in <CODE>
execDir</CODE>
.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
DosExecFlags</CODE>
 indicating whether the DOS program will give a prompt to the user to return to GEOS. The possible flags are DEF_PROMPT, DEF_FORCED_SHUTDOWN, and DEF_INTERACTIVE. For more information, see the entry for <CODE>
DosExecFlags</CODE>
.</DD>
</DL>
<P>
If there was no error, <CODE>
DosExec() </CODE>
will return zero. Otherwise it will return one of the following error values: ERROR_FILE_NOT_FOUND, ERROR_DOS_EXEC_IN_PROGRESS, ERROR_INSUFFICIENT_MEMORY, or ERROR_ARGS_TOO_LONG.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
system.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DiskGetDrive() ...</A> 
<!-- to next --> | <A HREF="R_1d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">DriveGetDefaultMedia() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
