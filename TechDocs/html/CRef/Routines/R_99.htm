<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_99.htm,v 1.3 97/08/14 11:03:18 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: TimerSleep() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_98.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadPSem() ...</A> 
<!-- to next --> | <A HREF="R_9a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TocNameArrayFind() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_TimerSleep()">
 </A>
<H1 CLASS="refHeading">
TimerSleep()</H1>
<PRE CLASS="syntax">void	TimerSleep(
        word	ticks);		/* number of ticks the thread should sleep */</PRE>
<P>
This routine invokes a &quot;sleep timer&quot; that will put the calling thread to sleep for the given number of ticks. At the end of the time, the thread will continue executing with the next instruction.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not use sleep timers as a substitute for semaphores for thread synchronization.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
timer.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TimerStart()">
 </A>
: <A NAME="IX_TimerType">
 </A>
<A NAME="IX_TIMER_&ldots;">
 </A>
<A NAME="IX_Power management:waking up by timer">
 </A>
<H1 CLASS="refHeading">
TimerStart()</H1>
<PRE CLASS="syntax">TimerHandle TimerStart(
        TimerType		timerType,				/* type of timer to start */
        optr		destObject,				/* object to receive notification
						 * message when timer expires */</PRE>
<PRE CLASS="syntax">        word		ticks,				/* amount of time to run */
        Message		msg,				/* notification message */
        word		interval,				/* interval for continual timers */
        word		* id);				/* buffer for returned timer ID */</PRE>
<P>
This routine starts a timer of any type. The timer will run for the specified number of ticks and then will send the given message to the destination object. The message is sent with the flags MF_FORCE_QUEUE, MF_CHECK_DUPLICATE and MF_REPLACE, so it will always be put in the recipient's queue and will always replace any duplicates already in the queue. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
timerType</CODE>
</DT><DD>A value of <CODE>
TimerType</CODE>
 indicating the type of timer to start.</DD>
<DT>
<CODE>
destObject</CODE>
</DT><DD>The optr of the object that will be sent the specified message when the time is up.</DD>
<DT>
<CODE>
ticks</CODE>
</DT><DD>The number of ticks for the timer to run. (Sixty ticks equals one second.) For continual timers, this is the amount of time before the first timeout.</DD>
<DT>
<CODE>
msg</CODE>
</DT><DD>The message to be sent to the destination object when time is up.</DD>
<DT>
<CODE>
interval</CODE>
</DT><DD>For continual timers, the interval (number of ticks) at which to send out the message to the destination object. The timer will send the message once at the end of each interval. The first message will be sent <CODE>
ticks</CODE>
 ticks after the timer is started. The second message will be sent <CODE>
interval</CODE>
 ticks after that.</DD>
<DT>
<CODE>
id</CODE>
</DT><DD>A pointer to a word in which the timer's ID will be returned. You will need this ID for <CODE>
<A HREF="../../CRef/Routines/R_99.htm#IX_TimerStop()">TimerStop()</A></CODE>
.</DD>
</DL>
<P>
This routine returns the handle of the timer as well as an ID pointed to by the <CODE>
id</CODE>
 parameter. You will need the handle and the ID for <CODE>
<A HREF="../../CRef/Routines/R_99.htm#IX_TimerStop()">TimerStop()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	
</P>
<P>
<CODE>
TimerType</CODE>
The <CODE>
TimerType</CODE>
 enumerated type defines what type of timer should be initiated. It has the following values:</P>
<DL>
<DT>
TIMER_ROUTINE_ONE_SHOT</DT><DD>
Start a timer that will call a routine and then free itself when the time is expired. This type is supported in assembly but not in C.</DD>
<DT>
TIMER_ROUTINE_CONTINUAL</DT><DD>
Start a timer that will call a routine once per time <EM>interval </EM>(starting after <EM>ticks</EM> ticks) until <CODE>
<A HREF="../../CRef/Routines/R_99.htm#IX_TimerStop()">TimerStop()</A></CODE>
 is called. </DD>
<DT>
TIMER_EVENT_ONE_SHOT</DT><DD>
Start a timer that will send a message to a given object, then free itself when time is expired.</DD>
<DT>
TIMER_EVENT_CONTINUAL</DT><DD>
Start a timer that will send a message to a given object once per time <EM>interval</EM> (starting after <EM>ticks</EM> ticks) until <CODE>
<A HREF="../../CRef/Routines/R_99.htm#IX_TimerStop()">TimerStop()</A></CODE>
 is called.</DD>
<DT>
TIMER_MS_ROUTINE_ONE_SHOT</DT><DD>
Start a timer that has millisecond accuracy. For this timer, the number of ticks will actually be the number of milliseconds. The timer will call a specified routine and then free itself when time is expired. This type is supported in assembly but not in C.</DD>
<DT>
TIMER_EVENT_REAL_TIME</DT><DD>
Start a timer that will call a routine at some particular date and time. On devices that support such a timer, this event will wake a sleeping machine.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	timer.h</P>
</DIV>
<DIV>
<A NAME="IX_TimerStop()">
 </A>
<H1 CLASS="refHeading">
TimerStop()</H1>
<PRE CLASS="syntax">Boolean	TimerStop(
        TimerHandle		th,			/* handle of timer to be stopped */
        word		id);			/* timer ID (returned by TimerStart() */</PRE>
<P>
This routine stops and destroys a timer that had been started with <CODE>
<A HREF="../../CRef/Routines/R_99.htm#IX_TimerStart()">TimerStart()</A></CODE>
. Pass it the timer handle and the ID as returned by that routine (the ID of a continual timer will always be zero).</P>
<P>
The returned error flag will be <CODE>
true</CODE>
 if the timer could not be found.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you call <CODE>
TimerStop()</CODE>
 to stop a continual timer that sends its message across threads, there may be timer events left in the recipient's event queue. It is unsafe in this situation to assume that all timer events have been handled. To ensure the timer message has been handled, you can send the destination an &quot;all-safe&quot; message with the MF_FORCE_QUEUE flag.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
timer.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TocDBLock()">
 </A>
<H1 CLASS="refHeading">
TocDBLock()</H1>
<PRE CLASS="syntax">void * TocDBLock(
        DBGroupAndItem 		thing);</PRE>
<P>
Use this routine to lock a name array maintained by a PrefTocList object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
config.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TocDBLockGetRef()">
 </A>
<H1 CLASS="refHeading">
TocDBLockGetRef()</H1>
<PRE CLASS="syntax">void * TocDBLockGetRef(
        DBGroupAndItem 		thing,
        optr		*refPtr);</PRE>
<P>
This routine locks a name array maintained by a PrefTocList object, returning the item's pointer and optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
config.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TocFindCategory()">
 </A>
<H1 CLASS="refHeading">
TocFindCategory()</H1>
<PRE CLASS="syntax">Boolean TocFindCategory(
        TocCategoryStruct 		*cat);</PRE>
<P>
This routine searches a PrefTocList object's name lists for a given token.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef struct {
        	TokenChars 		TCS_tokenChars;
        	DBGroupAndItem 		TCS_files; 					/* file name array */
        	DBGroupAndItem 		TCS_devices; 					/* device name array--only if
        								 * TCF_EXTENDED_DEVICE_DRIVERS
        								 * is set. */
        } TocCategoryStruct;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
config.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TocGetFileHandle()">
 </A>
<H1 CLASS="refHeading">
TocGetFileHandle()</H1>
<PRE CLASS="syntax">word TocGetFileHandle();</PRE>
<P>
Use this routine to get the handle of the file used by PrefTocLists to store their name array data.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
config.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TocNameArrayAdd()">
 </A>
<H1 CLASS="refHeading">
TocNameArrayAdd()</H1>
<PRE CLASS="syntax">word TocNameArrayAdd(
        DBGroupAndItem 		array, 
        const char 		*nameToFind,
        const void 		*data);</PRE>
<P>
Use this routine to add a name to a name array maintained by a PrefTocList object.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
config.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_98.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ThreadPSem() ...</A> 
<!-- to next --> | <A HREF="R_9a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TocNameArrayFind() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
