<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_8f.htm,v 1.3 97/07/21 11:16:58 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: SpoolGetNumPaperSizes() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SpeedDialGetNumber() ...</A> 
<!-- to next --> | <A HREF="R_90.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpoolModifyPriority() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SpoolGetNumPaperSizes()">
 </A>
<A NAME="IX_NumPaperSizesInfo">
 </A>
<A NAME="IX_NPSI_&ldots;">
 </A>
<H1 CLASS="refHeading">
SpoolGetNumPaperSizes()</H1>
<PRE CLASS="syntax">void	SpoolGetNumPaperSizes(
        NumPaperSizesInfo		*sizesInfo, 
        PageType 		type);				</PRE>
<P>
Use this routine to find the number of paper sizes, both pre-defined and user-defined, that should appear in a paper size list. The number of paper sizes, along with the index of the default paper size will be returned in a Num</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef struct {
                word    NPSI_numSizes;
                word    NPSI_defaultSize;
        } NumPaperSizesInfo;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolGetNumPrinters()">
 </A>
<H1 CLASS="refHeading">
SpoolGetNumPrinters()</H1>
<PRE CLASS="syntax">word	SpoolGetNumPrinters(
        PrinterDriverType		type,				   /* driver type */
        byte		localOnlyFlag); /* non-zero if only 
								* locally-defined printers should
								* be counted. */</PRE>
<P>
This routine returns the number of installed printers with the given type.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolGetPaperSize()">
 </A>
<A NAME="IX_PaperSizeInfo">
 </A>
<A NAME="IX_PSI_&ldots;">
 </A>
<H1 CLASS="refHeading">
SpoolGetPaperSize()</H1>
<PRE CLASS="syntax">void 	SpoolGetPaperSize(
        PaperSizeInfo		sizeInfo, 			/* This must be between 0 and the return 
					 	 * value of SpoolGetNumPaperSizes() */</PRE>
<PRE CLASS="syntax">        word		paperSizeNum,	 		/* a paper size number between
								0 and SpoolGetNumPaperSizes() */</PRE>
<PRE CLASS="syntax">        PageType 		*pageType);			/* page type*/</PRE>
<P>
Use this routine to determine the dimensions of a paper size.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef struct {
            word        PSI_width;          /* width, in points */
            word        PSI_height;         /* height, in points */
            PageLayout  PSI_defaultLayout;
        } PaperSizeInfo;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolGetPaperSizeOrder()">
 </A>
<A NAME="IX_PSOI_&ldots;">
 </A>
<A NAME="IX_PaperSizeOrderInfo">
 </A>
<H1 CLASS="refHeading">
SpoolGetPaperSizeOrder()</H1>
<PRE CLASS="syntax"><CODE>void</CODE>	SpoolGetPaperSizeOrder( 
        byte 		*order, 			/* buffer of size MAX_PAPER_SIZES */
						/* On return, this buffer will be 
						 * filled with the page size numbers
						 * arranged in the order 
						 * corresponding to their display */</PRE>
<PRE CLASS="syntax">        byte 		*userSizes,		 	/* buffer of size MAX_PAPER_SIZES */
						/* On return, will hold ordered 
						 * array of user paper sizes. */</PRE>
<PRE CLASS="syntax">        PaperSizeOrderInfo		*numBuf,			/* empty PaperSizeOrderInfo struct */</PRE>
<PRE CLASS="syntax">        PageType                    pageType);  /* What sort of paper we're interested in */</PRE>
<P>
This routine retrieves the paper size order array.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef struct {
            word    PSOI_numOrdered;    /* number of ordered sizes */
            word    PSOI_numUnused;     /* number of unused sizes */
        } PaperSizeOrderInfo;</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolGetPaperString()">
 </A>
<H1 CLASS="refHeading">
SpoolGetPaperString()</H1>
<PRE CLASS="syntax">word	SpoolGetPaperString( /* true if error*/
        char	   *stringBuf,		/* empty buffer MAX_PAPER_STRING_LENGTH */
        word	   paperSizeNum,		/* returned name string */
        PageType	  prtrNum);		/* printer number */</PRE>
<P>
Use this routine to determine the string to be displayed for a specific paper size. Upon return, <CODE>
stringBuf</CODE>
 will have been filled with a null-terminated string describing the paper. The routine's return value is the length of the paper string, not including the null terminator.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolGetPrinterString()">
 </A>
<H1 CLASS="refHeading">
SpoolGetPrinterString()</H1>
<PRE CLASS="syntax">Boolean	SpoolGetPrinterString( /* Returns true if error */
        PrinterStringInfo	   *retInfo,					/* pass empty structure */
        word	  	printerNum);				/* printer number */</PRE>
<P>
This routine fills a buffer with the requested null-terminated printer name string. If the printer could not be found, the return value will be <CODE>
true</CODE>
 (set for error).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
spool.goh</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_SpoolHurryJob()">
 </A>
<H1 CLASS="refHeading">
SpoolHurryJob()</H1>
<PRE CLASS="syntax">SpoolOpStatus 	SpoolHurryJob(
        word 	JobID);</PRE>
<P>
This routine moves a print job to the head of the print queue.</P>
</DIV>
<DIV>
<A NAME="IX_SpoolInfoParams">
 </A>
<A NAME="IX_SIP_&ldots;">
 </A>
<A NAME="IX_SpoolInfoQueueParams">
 </A>
<A NAME="IX_SIQP_&ldots;">
 </A>
<A NAME="IX_SpoolInfoJobParams">
 </A>
<A NAME="IX_SIJP_&ldots;">
 </A>
<A NAME="IX_JobStatus">
 </A>
<A NAME="IX_JS_&ldots;">
 </A>
<H1 CLASS="refHeading">
SpoolInfo()</H1>
<PRE CLASS="syntax">SpoolOpStatus 	SpoolInfo(
        SpoolInfoType 		infoType,
        SpoolInfoParams 		*params);</PRE>
<P>
This routine returns various types of information about the print queue's status. You may request information about the queue or about any job on the queue.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">        typedef enum /* word */ {
            SIT_JOB_INFO    = 0,
            SIT_QUEUE_INFO  = 2
        } SpoolInfoType;</PRE>
<P>
The passed <CODE>
SpoolInfoType</CODE>
 specifies whether you seek information about the print queue or a single job on the queue.</P>
<PRE CLASS="syntax">        typedef union {
            SpoolInfoQueueParams    SIP_queueParams;
            SpoolInfoJobParams      SIP_jobParams;
        } SpoolInfoParams;</PRE>
<P>
The type of parameters used depend on the passed <CODE>
SpoolInfoType</CODE>
.</P>
<PRE CLASS="syntax">        typedef struct {
            Boolean 			SIQP_activityQuery;
            PrintPortInfo 			*SIQP_portInfo;
            MemHandle 			SIQP_retBlock;
            word 			SIQP_retNumJobs;
        } SpoolInfoQueueParams;</PRE>
<P>
This structure contains information about the print queue and the <CODE>
SIQP_retBlock</CODE>
 field points to a block of <CODE>
JobStatus</CODE>
 structures.</P>
<PRE CLASS="syntax">        typedef struct {
            word        SIJP_jobID;
            MemHandle   SIJP_retBlock;
        } SpoolInfoJobParams;</PRE>
<P>
This structure is used to pass the ID of the job to describe. The passed block will hold la <CODE>
JobStatus</CODE>
 on return.</P>
<PRE CLASS="syntax">        typedef struct {
            char JS_fname[13]; /* std DOS (8.3) spool filename */
            char JS_parent[FILE_LONGNAME_LENGTH+1]; /* parent app's name */
            char JS_documentName[FILE_LONGNAME_LENGTH+1]; /* document name */
            word JS_numPages;                   /* # pages in document */
            SpoolTimeStruct JS_time;            /* time spooled */
            byte JS_printing;                   /* TRUE/FALSE if we are printing */
        } JobStatus;</PRE>
<P>
Each <CODE>
JobStatus</CODE>
 structure describes a single print job.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SpeedDialGetNumber() ...</A> 
<!-- to next --> | <A HREF="R_90.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SpoolModifyPriority() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
