<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_43.htm,v 1.2 97/06/25 18:25:34 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GrGetPtrRegBounds() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_42.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrGetLineMask() ...</A> 
<!-- to next --> | <A HREF="R_44.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrInitDefaultTransform() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GrGetPtrRegBounds()">
 </A>
<A NAME="IX_Regions, graphics:GrGetPtrRegBounds()">
 </A>
<H1 CLASS="refHeading">
GrGetPtrRegBounds()</H1>
<PRE CLASS="syntax">word	GrGetPtrRegBounds( /* Returns size of Region data struct. */
        const	Region	* reg,				/* pointer to region */
        Rectangle		* bounds);				/* returned bounds of region */</PRE>
<P>
Get the bounds of the passed region.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetSubscriptAttr()">
 </A>
<H1 CLASS="refHeading">
GrGetSubscriptAttr()</H1>
<PRE CLASS="syntax">ScriptAttrAsWord GrGetSubscriptAttr(
        GStateHandle gstate);					/* subject GState */</PRE>
<P>
Get the GState's subscript drawing attributes. The high byte of the return value is the percentage of the font size for the subscript; the low byte is the percentage of the font size from the top at which the character gets drawn.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetSuperscriptAttr()">
 </A>
<H1 CLASS="refHeading">
GrGetSuperscriptAttr()</H1>
<PRE CLASS="syntax">ScriptAttrAsWord GrGetSuperscriptAttr(
        GStateHandle gstate);					/* subject GState */</PRE>
<P>
Get the GState's superscript drawing attributes. The high byte of the return value is the percentage of the font size for the superscript; the low byte is the percentage of the font size from the bottom at which the character gets drawn.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
font.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Fonts:metrics, GrGetTextBounds() and">
 </A>
<A NAME="IX_GrGetTextBounds()">
 </A>
<H1 CLASS="refHeading">
GrGetTextBounds()</H1>
<PRE CLASS="syntax">Boolean	GrGetTextBounds(
        GStateHandle		gstate,			/* subject GState */
        const char		* str,			/* text string */
        word 		xpos,			/* position where text would be drawn */
        word 		ypos,
        word 		count,			/* max number of characters to check */
        Rectangle 		* bounds);				/* returned bounding rectangle */</PRE>
<P>
Get the bounds required to draw the passed text. If the passed <CODE>
count</CODE>
 argument is zero, the string is assumed to be null-terminated.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextColor()">
 </A>
<H1 CLASS="refHeading">
GrGetTextColor()</H1>
<PRE CLASS="syntax">RGBColorAsDWord GrGetTextColor(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the color used when drawing text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextColorMap()">
 </A>
<H1 CLASS="refHeading">
GrGetTextColorMap()</H1>
<PRE CLASS="syntax">ColorMapMode 	GrGetTextColorMap(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the mode used when drawing text in an unavailable color.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextMask()">
 </A>
<H1 CLASS="refHeading">
GrGetTextMask()</H1>
<PRE CLASS="syntax">SystemDrawMask 	GrGetTextMask(
        GStateHandle		gstate,			/* subject GState */
        DrawMask		* dm);			/* returned custom mask, if any */</PRE>
<P>
Get the draw mask used when drawing text.The <EM>
dm</EM>
 argument should point to a buffer capable of holding at least eight bytes to get the bit-pattern of the mask; otherwise <EM>
dm</EM>
 should be NULL. The returned buffer is the 8x8 bit pattern: each byte represents a row of the pattern, and the bytes are ordered from top row to bottom.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextMode()">
 </A>
<H1 CLASS="refHeading">
GrGetTextMode()</H1>
<PRE CLASS="syntax">TextMode	GrGetTextMode(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the text mode, including information about the vertical offset used when drawing text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextPattern()">
 </A>
<H1 CLASS="refHeading">
GrGetTextPattern()</H1>
<PRE CLASS="syntax">GraphicPattern 	GrGetTextPattern(
        GStateHandle	 	gstate,						/* subject GState */
        const MemHandle		* customPattern,						/* pointer to returned handle
								 * of block containing the
								 * returned pattern */</PRE>
<PRE CLASS="syntax">        word		* customSize);						/* size of returned block */</PRE>
<P>
Get the graphics pattern used when drawing text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextSpacePad()">
 </A>
<H1 CLASS="refHeading">
GrGetTextSpacePad()</H1>
<PRE CLASS="syntax">WWFixedAsDWord GrGetTextSpacePad(
        GStateHandle gstate);				/* subject GState */</PRE>
<P>
Get the space pad used when drawing strings of text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTextStyle()">
 </A>
<H1 CLASS="refHeading">
GrGetTextStyle()</H1>
<PRE CLASS="syntax">TextStyle 	GrGetTextStyle(
        GStateHandle gstate);					/* subject GState */</PRE>
<P>
Get the style used when drawing text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTrackKern()">
 </A>
<H1 CLASS="refHeading">
GrGetTrackKern()</H1>
<PRE CLASS="syntax">word 	GrGetTrackKern(
        GStateHandle 	gstate);				/* subject GState */</PRE>
<P>
Get the track kerning used when drawing strings of text.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetTransform()">
 </A>
<H1 CLASS="refHeading">
GrGetTransform()</H1>
<PRE CLASS="syntax">void	GrGetTransform(
        GStateHandle		gstate,			/* subject GState */
        TransMatrix		* tm);			/* pointer to returned TransMatrix */</PRE>
<P>
Get the current coordinate transformation, expressed as a matrix.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetWinBounds()">
 </A>
<H1 CLASS="refHeading">
GrGetWinBounds()</H1>
<PRE CLASS="syntax">void	GrGetWinBounds(
        GStateHandle		gstate,				/* subject GState */
        Rectangle		* bounds);				/* returned window bounds */</PRE>
<P>
Get the bounds of the GState's associated window.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetWinBoundsDWord()">
 </A>
<H1 CLASS="refHeading">
GrGetWinBoundsDWord()</H1>
<PRE CLASS="syntax">void	GrGetWinBoundsDWord(
        GStateHandle		gstate,				/* subject GState */
        RectDWord		* bounds);				/* returned window bounds */</PRE>
<P>
Get the bounds of the GState's associated window, accurate to a fraction of a point.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGetWinHandle()">
 </A>
<H1 CLASS="refHeading">
GrGetWinHandle()</H1>
<PRE CLASS="syntax">WindowHandle GrGetWinHandle(
        GStateHandle gstate);					/* subject GState */</PRE>
<P>
Get the handle of the GState's associated window.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrGrabExclusive()">
 </A>
<H1 CLASS="refHeading">
GrGrabExclusive()</H1>
<PRE CLASS="syntax">GStateHandle GrGrabExclusive(
        GeodeHandle		videoDriver,				/* NULL for default */
        GStateHandle		gstate);				/* subject GState */</PRE>
<P>
Start drawing exclusively to a video driver.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_42.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrGetLineMask() ...</A> 
<!-- to next --> | <A HREF="R_44.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrInitDefaultTransform() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
