<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_38.htm,v 1.2 97/06/25 18:23:28 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: GrClearBitmap() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_37.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrApplyTranslation() ...</A> 
<!-- to next --> | <A HREF="R_39.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrDestroyBitmap() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GrClearBitmap()">
 </A>
<H1 CLASS="refHeading">
GrClearBitmap()</H1>
<PRE CLASS="syntax">void	GrClearBitmap(
        GStateHandle 	gstate);			/* GState to affect */</PRE>
<P>
Clear out the content of a bitmap. Note that the part of the bitmap actually cleared depends on the bitmap mode. For the normal mode, the data portion of the bitmap is cleared. If the bitmap is in BM_EDIT_MASK mode, then the mask is cleared and the data portion is left alone.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCloseSubPath()">
 </A>
<H1 CLASS="refHeading">
GrCloseSubPath()</H1>
<PRE CLASS="syntax">void	GrCloseSubPath(
        GStateHandle gstate);			/* GState to affect */</PRE>
<P>
Geometrically closes the currently open path segment. Note that you must still call <CODE>
<A HREF="../../CRef/Routines/R_3e.htm#IX_GrEndPath()">GrEndPath()</A></CODE>
 to end the path definition.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrComment()">
 </A>
<H1 CLASS="refHeading">
GrComment()</H1>
<PRE CLASS="syntax">void	GrComment(
        GStateHandle		gstate,			/* GState to affect */
        const void  		* data,			/* comment string */
        word		size);			/* Size of data, in bytes */</PRE>
<P>
Write a comment out to a graphics string.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCopyGString()">
 </A>
<H1 CLASS="refHeading">
GrCopyGString()</H1>
<PRE CLASS="syntax">GSRetType GrCopyGString(
        GStateHandle		source,			/* GState from which to get GString */
        GStateHandle		dest,			/* GState to which to copy GString */
        GSControl 		flags);			/* flags for the copy */</PRE>
<P>
Copy all or part of a Graphics String. The <CODE>
GSControl</CODE>
 record can have the following flags:</P>
<PRE> GSC_ONE			/* just do one element */
 GSC_MISC			/* return on MISC opcode */
 GSC_LABEL			/* return on GR_LABEL opcode */
 GSC_ESCAPE			/* return on GR_ESCAPE opcode */
 GSC_NEW_PAGE			/* return when we get to a NEW_PAGE */
 GSC_XFORM			/* return on TRANSFORMATIONopcode */
 GSC_OUTPUT:			/* return on OUTPUT opcode */
 GSC_ATTR			/* return on ATTRIBUTE opcode */
 GSC_PATH			/* return on PATH opcode */</PRE>
<P>
The return value can be any one of <CODE>
GSRetType</CODE>
, a byte-size field:</P>
<PRE>GSRT_COMPLETE
GSRT_ONE
GSRT_MISC
GSRT_LABEL
GSRT_ESCAPE
GSRT_NEW_PAGE
GSRT_XFORM
GSRT_OUTPUT
GSRT_ATTR
GSRT_PATH
GSRT_FAULT</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCreateBitmap()">
 </A>
<H1 CLASS="refHeading">
GrCreateBitmap()</H1>
<PRE CLASS="syntax">VMBlockHandle GrCreateBitmap(
        BMFormat 		initFormat,				/* color fomat of bitmap */
        word		initWidth,				/* initial width of bitmap */
        word		initHeight,				/* initial height of bitmap */
        VMFileHandle 		vmFile,				/* VM file to hold bitmap's data*/
        optr 		exposureOD,				/* optr to get MSG_META_EXPOSED */
        GStateHandle		* bmgs);				/* Draws to this GState
							 * will draw to the bitmap */</PRE>
<P>
This routine allocates memory for a bitmap and creates an off-screen window in which to hold the bitmap. This routine takes the following arguments:</P>
<DL>
<DT>
<EM>initFormat</EM></DT><DD>The depth of the bitmap's color.</DD>
<DT>
<EM>initWidth</EM></DT><DD>Bitmap's width.</DD>
<DT>
<EM>initHeight</EM></DT><DD>Bitmap's height.</DD>
<DT>
<EM>vmFile</EM></DT><DD>File to hold the bitmap data; the routine will allocate a block within this file.</DD>
<DT>
<EM>exposureOD</EM>	Object which will receive the &quot;exposed&quot; message when the bitmap's window is invalidated. If this argument is zero, then no exposed message will be sent. </DT><DD>
Remember that an off-screen window is created to house the bitmap. When this window is first created, it will be invalid, and it is conceivable that later actions could cause it to become invalid again. On these occasions, the object specified by this argument will receive a MSG_META_EXPOSED.</DD>
<DT>
<EM>bmgs</EM></DT><DD>The GStateHandle pointed to by this argument can start out as null; the routine will use it to return the GState by which the bitmap can be drawn to. Any graphics routines which draw to this returned GState will be carried out upon the bitmap.</DD>
</DL>
<P>
The routine returns a <CODE>
VMBlockHandle</CODE>
, the handle of the block within the passed VM file which contains the bitmap's data. The block will be set up as the first block of a HugeArray. Its header area will be filled with the following:</P>
<DL>
<DT>
Complex Bitmap Header</DT><DD>
This is a <CODE>
CBitmap</CODE>
 structure which contains some basic information about the bitmap.</DD>
<DT>
Editing Mode</DT><DD>
These flags can change how the bitmap is being edited.</DD>
<DT>
Device Information Block</DT><DD>
This internal structure contains information about and used by the video driver. (Don't worry that you don't know the size of this structure; remember that the CBitmap structure contains the offsets of the bitmap and palette data areas.)</DD>
<DT>
Pallette Information (optional)</DT><DD>
If the bitmap has its own pallette, this is where the palette data will be stored; it will consist of an array of 3-byte entries. Depending on how many colors the bitmap supports, there may be 16 or 256 entries in this array.</DD>
</DL>
<P>
The bitmap's raw data is in the VM block, but outside of the header area.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCreateGString()">
 </A>
<H1 CLASS="refHeading">
GrCreateGString()</H1>
<PRE CLASS="syntax">GStateHandle GrCreateGString(
        Handle		han,			/* memory, stream, or VM file handle */
        GStringType		hanType,			/* type of handle in han parameter */
        word		* gsBlock);				/* returned for GST_MEMORY and 
						 * GST_VMEM types only */</PRE>
<P>
Open a graphics string and start redirecting graphics orders to the string. The hanType parameter must be GST_MEMORY, GST_STREAM, or GST_VMEM.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
gstring.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCreatePalette()">
 </A>
<H1 CLASS="refHeading">
GrCreatePalette()</H1>
<PRE CLASS="syntax">word	GrCreatePalette( /* Returns # of entries in color table
            * or 0 for monochrome or 24-bit */</PRE>
<PRE CLASS="syntax">        GStateHandle gstate);</PRE>
<P>
Create a color mapping table and associate it with the current window. Initialize the table entries to the default palette for the device.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrCreateState()">
 </A>
<H1 CLASS="refHeading">
GrCreateState()</H1>
<PRE CLASS="syntax">GStateHandle GrCreateState(
        WindowHandle win);			/* Window in which GState will be active */</PRE>
<P>
Create a graphics state (GState) block containg default GState information.</P>
<P>
If zero is passed, then the GState created will have no window associated with it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GrDeleteGStringElement()">
 </A>
<H1 CLASS="refHeading">
GrDeleteGStringElement()</H1>
<PRE CLASS="syntax">void	GrDeleteGStringElement(
        GStateHandle		gstate,			/* GState containing GString */
        word		count);			/* number of elements to delete */</PRE>
<P>
Delete a range of GString elements from the GString in the passed GState.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
graphics.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_37.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GrApplyTranslation() ...</A> 
<!-- to next --> | <A HREF="R_39.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GrDestroyBitmap() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
