<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_6d.htm,v 1.2 97/06/25 18:36:33 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: MemLock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemDowngradeExclLock() ...</A> 
<!-- to next --> | <A HREF="R_6e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemModifyFlags() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_MemLock()">
 </A>
<H1 CLASS="refHeading">
MemLock()</H1>
<PRE CLASS="syntax">void	* MemLock(
        MemHandle		mh);			/* Handle of block to lock */</PRE>
<P>
This routine locks a global memory block on the global heap. If the block is swapped, the memory manager swaps it back into the global heap; it then increments the lock count (up to a maximum of 255). The block will not be moved, swapped, or discarded until the lock count reaches zero. This routine returns a pointer to the start of the block, or a null pointer if block has been discarded. To get the address of a block without locking it, use <CODE>
<A HREF="../../CRef/Routines/R_6b.htm#IX_MemDeref()">MemDeref()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you try to lock a bad handle, the routine may fatal-error. This routine does not check for synchronization problems; if the block is used by several threads, you should use the synchronization routines.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never lock a fixed block.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6b.htm#IX_MemDeref()">MemDeref()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemLockExcl()">
 </A>
<H1 CLASS="refHeading">
MemLockExcl()</H1>
<PRE CLASS="syntax">void	* MemLockExcl(
        MemHandle		mh);			/* Handle of block to grab */</PRE>
<P>
If several different threads will be accessing the same global memory block, they should use data-access synchronization routines. <CODE>
MemLockExcl()</CODE>
 belongs to one such set of routines. Often, several threads will need access to the same block; however, most of the time, they will not need to change the block. There is no synchronization problem if several threads read the same block at once, as long as none of them alters the block (by resizing it, writing to it, etc.) However, if a thread needs to change a block, no other thread should have access at that time.</P>
<P>
The routines <CODE>
MemLockExcl()</CODE>
, <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
, <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockShared()">MemUnlockShared()</A></CODE>
, and <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>
 take advantage of this situation. They maintain a queue of threads requesting access to a block. When the block is not being used, they awaken the highest priority thread on the queue. If that thread requested exclusive access, the other threads sleep until it relinquishes access (via <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>
). If it requested shared access, the routines awaken every other thread which requested shared access; the other threads on the queue will sleep until every active thread relinquishes access (via <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockShared()">MemUnlockShared()</A></CODE>
).</P>
<P>
<CODE>
MemLockExcl()</CODE>
 requests exclusive access to the block. If the block is not being accessed, the routine will grab exclusive access for the block, lock the block, and return the block's address. If the block is being accessed, the routine will sleep on the queue until it can get access; it will then awaken, lock the block, and return its address.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can find out if the block is being accessed by looking at the HM<CODE>
_otherInfo</CODE>
 word (with <CODE>
<A HREF="../../CRef/Routines/R_6c.htm#IX_MemGetInfo()">MemGetInfo()</A></CODE>
). If HM<CODE>
_otherInfo</CODE>
 equals one, the block is not grabbed; if it equals zero, it is grabbed, but no threads are queued; otherwise, it equals the handle of the first thread queued.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all routines accessing the block get access with <CODE>
MemLockExcl()</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
. The routines use the block's <CODE>
HM_otherInfo</CODE>
 word; you must not alter it. When you are done accessing the block, make sure to relinquish access by calling <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If a thread calls <CODE>
MemLockExcl()</CODE>
 when it already has shared or exclusive access, it will deadlock; it will sleep until access is relinquished, but it cannot relinquish access while it is sleeping. If you try to grab a block which is owned by a different geode and is non-sharable, the routine will fatal-error.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never use <CODE>
MemLockExcl()</CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>
 on a fixed block. It will attempt to lock the block, and fixed blocks cannot be locked. Instead, use the <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 routines.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockShared()">MemLockShared()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockShared()">MemUnlockShared()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_MemLockFixedOrMovable()">
 </A>
<H1 CLASS="refHeading">
MemLockFixedOrMovable()</H1>
<PRE CLASS="syntax">void	* MemLockFixedOrMovable(
        void	* ptr);		/* virtual segment */</PRE>
<P>
Given a virtual segment, this routine locks it (if it was movable). A virtual segment is an opaque pointer to a block that an application views as locked or fixed--the memory manager can actually swap locked or fixed blocks and will designate them as virtual segments.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
</DIV>
<DIV>
<A NAME="IX_MemLockShared()">
 </A>
<H1 CLASS="refHeading">
MemLockShared()</H1>
<PRE CLASS="syntax">void	* MemLockShared(
        MemHandle		mh);			/* Handle of block to grab */</PRE>
<P>
<CODE>
MemLockShared()</CODE>
 requests shared access to the passed block. If the block is not being accessed, or if it is held for shared access and the queue is empty, the routine gets access, locks the block, and returns the block's address. Otherwise it sleeps on the queue until the shared requests are awakened; it then locks the block and returns the block's address.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	heap.h</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Make sure that all routines accessing the block get access with <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
 or <CODE>
MemLockShared()</CODE>
. The routines use the block's HM<CODE>
_otherInfo</CODE>
 word; you must not alter it. When you are done accessing the block, make sure to relinquish access by calling <CODE>
<A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If a thread calls <CODE>
MemLockShared()</CODE>
 when it already has exclusive access, it will deadlock; it will sleep until access is relinquished, but it cannot relinquish access while it is sleeping. The thread must be careful not to take actions which could change the block, such as resizing it or writing to it. The routine will not enforce this. If you try to grab a block which is owned by a different geode and is non-sharable, the routine will fatal-error.</P>
<P CLASS="refField"><STRONG>
Never Use Situations:</STRONG>	<BR>
Never use <CODE>
<A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>
 or <CODE>
MemLockShared()</CODE>
 on a fixed block. It will attempt to lock the block, and fixed blocks cannot be locked. Instead, use the <CODE>
<A HREF="../../CRef/Routines/R_55.htm#IX_HandleP()">HandleP()</A></CODE>
 and <CODE>
<A HREF="../../CRef/Routines/R_56.htm#IX_HandleV()">HandleV()</A></CODE>
 routines.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6d.htm#IX_MemLockExcl()">MemLockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockExcl()">MemUnlockExcl()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_70.htm#IX_MemUnlockShared()">MemUnlockShared()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_6c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">MemDowngradeExclLock() ...</A> 
<!-- to next --> | <A HREF="R_6e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MemModifyFlags() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
