<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_6.htm,v 1.2 97/06/25 18:33:03 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ChunkArrayDelete() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">CFatalError() ...</A> 
<!-- to next --> | <A HREF="R_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ChunkArrayElementToPtr() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ChunkArrayDelete()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayDelete()</H1>
<PRE CLASS="syntax">void	ChunkArrayDelete(
        optr	array,				/* optr to chunk array */
        void *	element);				/* Address of element to delete */</PRE>
<P>
This routine deletes an element from a chunk array. It is passed the address of that element, as well as the optr of the array.</P>
<P>
Since the chunk is being decreased in size, the routine is guaranteed not to cause heap compaction or resizing.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the LMem heap's block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	Only the chunk handle portion of the optr is significant; the memory block is determined from the pointer to the element.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The addresses of all elements after the deleted one will change. No other addresses in the block will be affected. If the address passed is not the address of an element in the array, results are undefined.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_5.htm#IX_ChunkArrayAppend()">ChunkArrayAppend()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_8.htm#IX_ChunkArrayInsertAt()">ChunkArrayInsertAt()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_9.htm#IX_ChunkArrayZero()">ChunkArrayZero()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayDeleteHandle()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayDeleteHandle()</H1>
<PRE CLASS="syntax">void	ChunkArrayDeleteHandle(
        ChunkHandle		ch,				/* Handle of chunk array */
        void *		el);				/* Address of element to delete */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_6.htm#IX_ChunkArrayDelete()">ChunkArrayDelete()</A></CODE>
, except that the chunk array is specified with its chunk handle instead of with an optr. The global memory handle is not needed, as the memory block is implicit in the pointer to the element.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the LMem heap's block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayDeleteRange()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayDeleteRange()</H1>
<PRE CLASS="syntax">void	ChunkArrayDeleteRange(
        optr	array,		/* optr to chunk array */
        word	firstElement,		/* index of first element to delete */
        word	count);		/* # of elements to delete (-1 to delete to 
				 * end of array) */</PRE>
<P>
This routine deletes several consecutive elements from a chunk array. The routine is passed the optr of the chunk array, the index of the first element to delete, and the number of elements to delete. The routine is guaranteed not to cause heap compaction or resizing; thus, pointers to other elements in the array will remain valid.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayElementResize()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayElementResize()</H1>
<PRE CLASS="syntax">void	ChunkArrayElementResize(
        optr	array,				/* optr to chunk array */
        word	element,				/* Index of element to resize */
        word	newSize);				/* New size of element, in bytes */</PRE>
<P>
This routine resizes an element in a chunk array. The chunk array must have variable-sized elements. The routine is passed an optr to the chunk array (which must be locked on the global heap), as well as the index of the element to resize and the new size (in bytes). It does not return anything.</P>
<P>
If the new size is larger than the old, null bytes will be added to the end of the element. If the new size is smaller than the old, bytes will be removed from the end to truncate the element to the new size.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the element is resized larger, the chunk array may move within the LMem heap, and the heap itself may move on the global heap; thus, all pointers to within the LMem heap will be invalidated. </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the LMem heap's block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayElementResizeHandles()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayElementResizeHandles()</H1>
<PRE CLASS="syntax">void	ChunkArrayElementResizeHandles(
        Memhandle		mh,				/* Global handle of LMem heap */
        ChunkHandle		ch,				/* Chunk handle of chunk array */
        word		el,				/* Index of element to resize */
        word		ns);				/* New size of element, in bytes */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_6.htm#IX_ChunkArrayElementResize()">ChunkArrayElementResize()</A></CODE>
 except that the chunk array is specified with its global and chunk handles, instead of with its optr.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the element is resized to larger than the old, the chunk array may move within the LMem heap, and the heap itself may move on the global heap; thus, all pointers to within the LMem heap will be invalidated. </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the LMem heap's block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">CFatalError() ...</A> 
<!-- to next --> | <A HREF="R_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ChunkArrayElementToPtr() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
