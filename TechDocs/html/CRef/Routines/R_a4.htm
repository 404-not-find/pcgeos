<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_a4.htm,v 1.2 97/06/25 18:47:27 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: VMPreserveBlocksHandle() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VMGetMapBlock() ...</A> 
<!-- to next --> | <A HREF="R_a5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">WinAckUpdate() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_VMPreserveBlocksHandle()">
 </A>
<H1 CLASS="refHeading">
VMPreserveBlocksHandle()</H1>
<PRE CLASS="syntax">void	VMPreserveBlocksHandle(
        VMFileHandle		file,
        VMBlockHandle		block);</PRE>
<P>
Keep the same global memory block with this VM block until the block is explicitly detached or the VM block is freed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMReleaseExclusive()">
 </A>
<H1 CLASS="refHeading">
VMReleaseExclusive()</H1>
<PRE CLASS="syntax">void VMReleaseExclusive(
        VMFileHandle 		file);</PRE>
<P>
This routine releases a thread's exclusive access to a VM file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMRevert()">
 </A>
<H1 CLASS="refHeading">
VMRevert()</H1>
<PRE CLASS="syntax">void	VMRevert(
        VMFileHandle		file,);</PRE>
<P>
This routine reverts a file to its last-saved state.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMSave()">
 </A>
<H1 CLASS="refHeading">
VMSave()</H1>
<PRE CLASS="syntax">Boolean	VMSave(
        VMFileHandle		file);</PRE>
<P>
This routine updates and saves a file, freeing all backup blocks. If it encounters an error in the save operation, it will return <EM>
non-zero</EM>
. </P>
</DIV>
<DIV>
<A NAME="IX_VMSaveAs()">
 </A>
<H1 CLASS="refHeading">
VMSaveAs()</H1>
<PRE CLASS="syntax">VMFileHandle VMSaveAs(
        VMFileHandle		file,
        const char		*name,
        VMAccessFlags		flags.
        VMOpenType		mode,
        word		compression); /* compaction threshold */</PRE>
<P>
This routine saves a file under a new name. The old file is reverted to its last-saved condition. If it encounters an error in the save operation, it will return a null <CODE>
VMFileHandle</CODE>
 and set a <CODE>
VMStatus</CODE>
 error code<CODE>
 </CODE>
which may be retrieved with <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMSetAttributes()">
 </A>
<H1 CLASS="refHeading">
VMSetAttributes()</H1>
<PRE CLASS="syntax">word	VMSetAttributes(
        VMFileHandle		file,				
        VMAttributes		attrToSet,				/* Turn these flags on... */
        VMAttributes		attrToClear);				/* after turning these flags off */</PRE>
<P>
This routine changes a VM file's <CODE>
VMAttributes</CODE>
 settings. The routine returns the new attribute settings.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	When the Document Control objects create files, they automatically initialize the attributes appropriately.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If you turn off VMA_BACKUP, make sure you do it right after a save or revert (when there are no backup blocks).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_a2.htm#IX_VMGetAttributes()">VMGetAttributes()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_VMSetExecThread()">
 </A>
<H1 CLASS="refHeading">
VMSetExecThread()</H1>
<PRE CLASS="syntax">void	VMSetExecThread(
        VMFileHandle		file,
        ThreadHandle		thread);</PRE>
<P>
Set which thread will execute methods of all objects in the file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMSetMapBlock()">
 </A>
<H1 CLASS="refHeading">
VMSetMapBlock()</H1>
<PRE CLASS="syntax">void	VMSetMapBlock(
        VMFileHandle		file,
        VMBlockHandle		block);</PRE>
<P>
This routine sets the map block for a VM file. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMSetReloc()">
 </A>
<H1 CLASS="refHeading">
VMSetReloc()</H1>
<PRE CLASS="syntax">void	VMSetReloc(
        VMFileHandle		file,
        void (*reloc) 		(VMFileHandle					file,
        		 VMBlockHandle					block,
        		 MemHandle					mh,
        		 void					*data,
        		 VMRelocTypes					type));</PRE>
<P>
This routine sets a data-relocation routine for the VM file.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_VMUnlock()">
 </A>
<H1 CLASS="refHeading">
VMUnlock()</H1>
<PRE CLASS="syntax">void	VMUnlock(
        MemHandle		mh);</PRE>
<P>
This routine unlocks a locked VM block. Note that the block's <EM>
global memory handle</EM>
 is passed (not its VM handle).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_VMUpdate()">
 </A>
<H1 CLASS="refHeading">
VMUpdate()</H1>
<PRE CLASS="syntax">word	VMUpdate(
        VMFileHandle		file);</PRE>
<P>
This routine updates dirty blocks to the disk.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	<CODE>
VMUpdate()</CODE>
 is optimized for updating clean files to the disk. Therefore, it is faster to call <CODE>
VMUpdate()</CODE>
 whenever you think it might be necessary, than it is to check the dirty state and then call <CODE>
VMUpdate()</CODE>
 only if the file is actually dirty.</P>
</DIV>
<DIV>
<A NAME="IX_VMVMBlockToMemBlock()">
 </A>
<H1 CLASS="refHeading">
VMVMBlockToMemBlock()</H1>
<PRE CLASS="syntax">MemHandle 	VMVMBlockToMemBlock(
        VMFileHandle		file,
        VmBlockHandle		block);</PRE>
<P>
This routine returns the global handle of the memory block attached to a specified VM block. If no global block is currently attached, it will allocate and attach one.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
vm.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_a3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">VMGetMapBlock() ...</A> 
<!-- to next --> | <A HREF="R_a5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">WinAckUpdate() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
