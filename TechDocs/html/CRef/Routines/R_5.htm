<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_5.htm,v 1.2 97/06/25 18:27:45 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: CFatalError() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">CCB() ...</A> 
<!-- to next --> | <A HREF="R_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ChunkArrayDelete() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_CFatalError()">
 </A>
<H1 CLASS="refHeading">
CFatalError()</H1>
<PRE CLASS="syntax">void	CFatalError(
        word	code)</PRE>
<P>
This routine generates a fatal error. It stores an error code passed for use by the debugger.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayAppend()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayAppend()</H1>
<PRE CLASS="syntax">void *	ChunkArrayAppend(
        optr	array,				/* optr to chunk array */
        word	elementSize)				/* Size of new element (ignored if 
						 * elements are uniform-sized) */</PRE>
<P>
This routine adds a new element to the end of a chunk array. It automatically expands the chunk to make room for the element and updates the <CODE>
ChunkArrayHeader</CODE>
. It returns a pointer to the new element.</P>
<P>
One of the arguments is the size of the new element. This argument is significant if the array contains variable-sized elements. If the elements are uniform-sized, this argument is ignored. The array is specified with an optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (if it is not fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine resizes the chunk, which means it can cause heap compaction or resizing. Therefore, all existing pointers to within the LMem heap are invalidated.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_8.htm#IX_ChunkArrayInsertAt()">ChunkArrayInsertAt()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6.htm#IX_ChunkArrayDelete()">ChunkArrayDelete()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayAppendHandles()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayAppendHandles()</H1>
<PRE CLASS="syntax">void *	ChunkArrayAppendHandles(
        MemHandle		mh,				/* Handle of LMem heap's block */
        ChunkHandle		ch,				/* Handle of chunk array */
        word		size)				/* Size of new element (ignored if 
							 * elements are uniform-sized) */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_5.htm#IX_ChunkArrayAppend()">ChunkArrayAppend()</A></CODE>
, except that the chunk array is specified by its global and local handles instead of by an optr.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (if it is not fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine resizes the chunk, which means it can cause heap compaction or resizing. Therefore, all existing pointers to within the LMem heap are invalidated.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_8.htm#IX_ChunkArrayInsertAt()">ChunkArrayInsertAt()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6.htm#IX_ChunkArrayDelete()">ChunkArrayDelete()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayCreate()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayCreate()</H1>
<PRE CLASS="syntax">ChunkHandle	 ChunkArrayCreate(
        MemHandle 	mh,	/* Handle of LMem heap's block */
        word	elementSize,	/* Size of each element (or zero if elements are
			 * variable-sized) */</PRE>
<PRE CLASS="syntax">        word	headerSize,	/* Amount of chunk to use for header (or zero for
		 	 * default size) */</PRE>
<PRE CLASS="syntax">        ObjChunkFlags ocf);</PRE>
<P>
This routine sets up a chunk array in the specified LMem heap. The heap must have already been initialized normally. The routine allocates a chunk and sets up a chunk array in it. It returns the chunk's handle. If it cannot create the chunk array, it returns a null handle.</P>
<P>
If the chunk array will have uniform-size elements, you must specify the element size when you create the chunk array. You will not be able to change this. If the array will have variable-sized elements, pass an element size of zero.</P>
<P>
The chunk array always begins with a <CODE>
ChunkArrayHeader</CODE>
. You can specify the total header size; this is useful if you want to begin the chunk array with a special header containing some extra data. However, the header must be large enough to accommodate a <CODE>
ChunkArrayHeader</CODE>
, which will begin the chunk. If you define a header structure, make sure that its first element is a <CODE>
ChunkArrayHeader</CODE>
. Only the chunk array code should access the actual <CODE>
ChunkArrayHeader</CODE>
. If you pass a <CODE>
headerSize</CODE>
 of zero, the default header size will be used (namely, <CODE>
sizeof(ChunkArrayHeader)</CODE>
). If you pass a non-zero <CODE>
headerSize</CODE>
, any space between the <CODE>
ChunkArrayHeader</CODE>
 and the heap will be zero-initialized.</P>
<P>
To free a chunk array, call <CODE>
<A HREF="../../CRef/Routines/R_63.htm#IX_LMemFree()">LMemFree()</A></CODE>
 as you would for any chunk.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the LMem heap's block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Results are unpredictable if you pass a non-zero <CODE>
headerSize</CODE>
 argument which is smaller than <CODE>
sizeof(ChunkArrayHeader)</CODE>
. Since the routine allocates a chunk, it can cause heap compaction or resizing; all pointers to within the block are invalidated.</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayCreateAt()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayCreateAt()</H1>
<PRE CLASS="syntax">ChunkHandle 	ChunkArrayCreateAt(
        optr	array,	/* Create chunk array in this chunk */
        word	elementSize,	/* Size of each element (or zero if elements are
			 * variable-sized) */</PRE>
<PRE CLASS="syntax">        word	headerSize,	/* Amount of chunk to use for header (or zero for
			 * default size) */</PRE>
<PRE CLASS="syntax">        ObjChunkFlags ocf);</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_5.htm#IX_ChunkArrayCreate()">ChunkArrayCreate()</A></CODE>
, except that you specify the chunk which will be made into a chunk array. The chunk is specified with an optr. Note that any data already existing in the chunk will be overwritten.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The chunk may be resized, which invalidates all pointers to within the LMem heap.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_ChunkArrayCreateAtHandles()">
 </A>
<H1 CLASS="refHeading">
ChunkArrayCreateAtHandles()</H1>
<PRE CLASS="syntax">ChunkHandle 	ChunkArrayCreateAtHandles(
        MemHandle 		mh,
        ChunkHandle 		ch,
        word		elementSize,
        word		headerSize,
        ObjChunkFlags		ocf);</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_5.htm#IX_ChunkArrayCreate()">ChunkArrayCreate()</A></CODE>
, except that the chunk is specified with its global and chunk handles instead of with an optr.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you pass a null chunk handle, a new chunk will be allocated.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The chunk may be resized, which would invalidate all pointers to within the LMem heap.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">CCB() ...</A> 
<!-- to next --> | <A HREF="R_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ChunkArrayDelete() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
