<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_2a.htm,v 1.2 97/06/25 18:17:37 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FileOpen() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_29.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileGetDiskHandle() ...</A> 
<!-- to next --> | <A HREF="R_2b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileRename() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FileOpen()">
 </A>
<H1 CLASS="refHeading">
FileOpen()</H1>
<PRE CLASS="syntax">FileHandle FileOpen( /* sets thread's error value */
        const char		* name,			/* relative to working dir */
        FileAccessFlags		flags);			/* Permissions/exclusions */</PRE>
<P>
This routine opens a file for bytewise access. The file may be a DOS file or a GEOS byte file. If the file is successfully opened, <CODE>
FileOpen()</CODE>
 will return the file's handle; otherwise, it will return a null handle and set the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
). Errors typically set by this routine are listed below:</P>
<DL>
<DT>
ERROR_FILE_NOT_FOUND</DT><DD>
No file with the specified name could be found in the appropriate directory.</DD>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
A relative or absolute path had been passed, and the path included a directory which did not exist.</DD>
<DT>
ERROR_TOO_MANY_OPEN_FILES</DT><DD>
There is a limit to how many files may be open at once. If this limit is reached, <CODE>
FileOpen()</CODE>
 will fail until a file is closed.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
Either the caller requested access which could not be granted (e.g. it requested write access when another geode had already opened the file with FILE_DENY_W), or the caller tried to deny access when that access had already been granted to another geode (e.g. it tried to open the file with FILE_DENY_W when another geode already had it open for write-access).</DD>
<DT>
ERROR_WRITE_PROTECTED</DT><DD>
The caller requested write or read-write access to a file in a write-protected volume.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_25.htm#IX_FileCreate()">FileCreate()</A></CODE>,
<CODE><A HREF="../../CRef/Structs/S_12.htm#IX_FileAccessFlags">FileAccessFlags</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileParseStandardPath()">
 </A>
<H1 CLASS="refHeading">
FileParseStandardPath()</H1>
<PRE CLASS="syntax">StandardPath FileParseStandardPath(
        DiskHandle		disk,
        const char		** path);</PRE>
<P>
This routine is passed a full path (relative to the passed disk or a standard path, if the disk handle is null) and finds the standard path which most closely contains that path. It updates the pointer whose address is passed so that it points to the trailing portion of the path string. For example, if you pass the path string &quot;\GEOWORKS\DOCUMENT\MEMOS\APRIL&quot;, the pointer would be updated to point to the &quot;\MEMOS\APRIL&quot; portion, and the <CODE>
StandardPath</CODE>
 SP_DOCUMENT would be returned. If the path passed does not belong to a standard path, the constant SP_NOT_STANDARD_PATH will be returned, and the pointer will not be changed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FilePopDir()">
 </A>
<H1 CLASS="refHeading">
FilePopDir()</H1>
<PRE CLASS="syntax">void	FilePopDir();</PRE>
<P>
<CODE>
FilePopDir()</CODE>
 pops the top directory off the thread's directory stack and makes it the current working directory.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2a.htm#IX_FilePushDir()">FilePushDir()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FilePos()">
 </A>
<H1 CLASS="refHeading">
FilePos()</H1>
<PRE CLASS="syntax">dword	FilePos( /* Sets thread's error value */
        FileHandle		fh,
        dword		posOrOffset,
        FilePosMode		mode);</PRE>
<P>
This routine changes the current file position. The position can be specified in three ways, depending on the value of the <EM>
mode</EM>
 argument:</P>
<DL>
<DT>
FILE_POS_START</DT><DD>
The file position is set to a specified number of bytes after the start of the file. Passing this mode with an offset of zero will set the file position to the start of the file.</DD>
<DT>
FILE_POS_RELATIVE</DT><DD>
The file position is incremented by a specified number of bytes; this number may be negative.</DD>
<DT>
FILE_POS_END</DT><DD>
The file position is set to a specified number of bytes after the end of the file; it is usually passed with a negative number of bytes. Passing this mode with an offset of zero will set the file position to the end of the file.</DD>
</DL>
<P>
<CODE>
FilePos()</CODE>
 returns a 32-bit integer. This integer specifies the absolute file position after the move (relative to the start of the file). On an error, it sets the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
).</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	To find out the current file position without changing it, call <CODE>
FilePos()</CODE>
 with mode FILE_POS_RELATIVE and offset zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FilePushDir()">
 </A>
<H1 CLASS="refHeading">
FilePushDir()</H1>
<PRE CLASS="syntax">void	FilePushDir();</PRE>
<P>
<CODE>
FilePushDir()</CODE>
 pushes the current working directory onto the thread's directory stack. It does not change the current working directory.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2a.htm#IX_FilePopDir()">FilePopDir()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileRead()">
 </A>
<H1 CLASS="refHeading">
FileRead()</H1>
<PRE CLASS="syntax">word	FileRead(
        FileHandle		fh,			/* handle of open file */
        void		* buf,			/* copy data to this buffer */
        word		count,			/* Length of buffer (in bytes) */
        Boolean		noErrorFlag);					/* Set if app can't
							 * handle errors */</PRE>
<P>
This routine copies data from a file into memory. It starts copying from the current position in the file. If possible, it will copy enough data to fill the buffer. If <CODE>
FileRead()</CODE>
 is successful, it returns the number of bytes copied. If an error occurs, <CODE>
FileRead()</CODE>
 returns -1 and sets the thread's error value (usually to ERROR_ACCESS_DENIED). The current file position will be changed to the first byte after the ones which were read.</P>
<P>
In C, there is no way to determine whether an ERROR_SHORT_READ_WRITE error occurs. To check whether all of the data was actually copied into memory, you must compare the number of bytes actually read with the number requested to be read. If your read operation requires multiple <CODE>
FileRead() </CODE>
operations, you may should read until zero bytes are returned.</P>
<P>
To retrieve the thread error value, use <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
.</P>
<P>
If the argument <EM>
noErrorFlag</EM>
 is set to <EM>
true</EM>
 (i.e. non-zero), <CODE>
FileRead()</CODE>
 will fatal-error if an error occurs (including an ERROR_SHORT_READ_WRITE).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Pass <CODE>
noErrorFlag</CODE>
 <CODE>
true</CODE>
 only during debugging.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_29.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileGetDiskHandle() ...</A> 
<!-- to next --> | <A HREF="R_2b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileRename() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
