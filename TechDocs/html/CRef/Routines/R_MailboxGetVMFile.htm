<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_MailboxGetVMFile.htm,v 1.2 97/08/21 13:47:48 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: MailboxGetVMFile() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxGetBodyFormat.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> MailboxGetBodyFormat() ...</A> 
<!-- to next --> | <A HREF="R_6a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MakeWWFixed() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>

<DIV>
<A NAME="IX_MailboxGetVMFile()">
 </A>
<H1 CLASS="refHeading">
MailboxGetVMFile()</H1>
<PRE CLASS="syntax"> VMFileHandle 	MailboxGetVMFile(
	word 	expectedNumBlocks, 
	word 	*vmStatusp);
</PRE>
<P>
This routine obtains the handle of a writable VM file in which data can be stored. The file is managed by the Mailbox library, so the data stored in it can be passed off to the library without being marked as <CODE>MMF_BODY_DATA_VOLATILE</CODE>.
</P>
<P>
<STRONG>Parameters:</STRONG>
<DL>
<DT><EM>expectedNumBlocks</EM>
<DD> This parameter is your estimate of your file's size, in blocks. The library uses this estimate to rationally apportion data among various VM files without getting block sizes within one file so large that the system is in danger of running out of conventional memory. Poor estimates will usually not cause fatal problems since the library is rather cautious when deciding whether to start a new file. Still, you should do your best to come up with accurate information on your needs. You should request 1 block for every 4Kb of data to store.  For example, SMS message would only require 1 block. If <EM>expectedNumBlocks</EM> is set to zero, then a system-assumed value will be used.
<DT><EM>vmStatusp</EM>
<DD>This is a pointer to a word that, in the case of an error, will be set to the error type. 
</DL>
<P CLASS="refField"><STRONG>Returns:</STRONG> If successful, this routine returns a <CODE>VMFileHandle</CODE> to a writable VM File. If it fails, it returns <CODE>NullHandle</CODE> and sets <EM>vmStatusp</EM>.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxGetVMFileName()">
 </A>
<H1 CLASS="refHeading">
MailboxGetVMFileName()</H1>
<PRE CLASS="syntax">void 	MailboxGetVMFileName(
	VMFileHandle 	file, 
	FileLongName 	*namep);
</PRE>
<P>
Gets the name of a VM file <EM>file</EM> which was previously opened by the Mailbox library. This file resides in the Mailbox library's spool directory. <EM>namep</EM> is a buffer in which to place the file's <CODE>FileLongName</CODE>, a null-terminated file name. </P>
<P CLASS="refField"><STRONG>Warning:</STRONG> 
<CODE>
MailboxGetVMFileName()</CODE>
is used primarily by data storage drivers to obtain a persistent reference to the body of a message since file handles aren't preserved across shutdowns or file closes.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxLoadDataDriver()">
 </A>
<H1 CLASS="refHeading">
MailboxLoadDataDriver()</H1>
<PRE CLASS="syntax"> GeodeHandle	MailboxLoadDataDriver(
	MailboxStorage 	storage,
	GeodeLoadError 	*error);
</PRE>
<P>
<CODE> MailboxLoadDataDriver() </CODE> loads the specified data storage driver.</P>
<P CLASS="refField">
<STRONG>Parameters:</STRONG>
</P>
<DL>
<DD><EM>storage</EM> is a <CODE>MailboxStorage</CODE> token of the requested data storage driver.<DD><EM>error</EM> is a buffer to store a <CODE>GeodeLoadError</CODE> should the driver not load properly.
</DL>
<P CLASS="refField">
<STRONG>Return:</STRONG> If this routine is successful, it returns the handle of the loaded driver. Otherwise, the error is put into <EM>error</EM>.</P>
<P> This driver should be unloaded using <CODE>
MailboxFreeDriver()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxLoadDataDriverWithError()">
 </A>
<H1 CLASS="refHeading">
MailboxLoadDataDriverWithError()</H1>
<PRE CLASS="syntax"> GeodeHandle	MailboxLoadDataDriverWithError(
	MailboxStorage 	storage,
	GeodeLoadError 	*error);
</PRE>
<P>
<CODE>
MailboxLoadDataDriverWithError()</CODE> 
loads the specified data storage driver. If the driver can't be loaded then the error message <EM>error</EM> will be used to prompt the user to make the driver available, with the option to retry the load.</P>

<P CLASS="refField"><STRONG>Parameters:</STRONG> </P>
<DL>
<DD><EM>storage</EM> is a <CODE>MailboxStorage</CODE> token of the requested data storage driver.
<DD><EM>error</EM> should point to a notification string that the user will see if the driver cannot load properly. If <EM>error</EM> points to NULL, then this routine behaves just like <CODE>
MailboxLoadDataDriver()</CODE>
.</DD></DL>
<P><STRONG>Return:</STRONG> If this routine is successful, it returns the handle of the loaded driver. Otherwise, the error is put into <EM>error</EM>.</P>
<P> This driver should be unloaded using <CODE>
MailboxFreeDriver()</CODE>.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxLoadTransportDriver()">
 </A>
<H1 CLASS="refHeading">
MailboxLoadTransportDriver()</H1>
<PRE CLASS="syntax"> GeodeHandle	MailboxLoadTransportDriver(
	MailboxTransport 	transport,
	GeodeLoadError 	*error);
</PRE>
<P>
<CODE>
MailboxLoadTransportDriver()</CODE>
 loads the transport driver with the <CODE> MailboxTransport </CODE> token <EM> transport </EM> and returns the handle of the driver. If the driver can't be loaded, then the <CODE> GeodeLoadError </CODE> is put into <EM>error</EM>.
</P>
<P>
 The driver should be unloaded using <CODE>
MailboxFreeDriver()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<DIV>
<A NAME="IX_MailboxOpenVMFile()">
 </A>
<H1 CLASS="refHeading">
MailboxOpenVMFile()</H1>
<PRE CLASS="syntax"> VMFileHandle 	MailboxOpenVMFile(
	FileLongName 	*namep, 
	word 	*vmStatusp);
</PRE>
<P>
Reopens a VM file that was previously returned by <CODE>
MailboxGetVMFileName()</CODE>
, and whose name <EM>namep</EM> was obtained through <CODE>MailboxGetVMFileName</CODE>. If successful, the routine returns a <CODE>VMFileHandle</CODE> to the <CODE>VMFile</CODE>. If there is an error, this routine returns <CODE>NullHandle</CODE> with <CODE>vmStatusp</CODE> filled in with the appropriate <CODE>VMStatus</CODE> value.</P>
<P CLASS="refField"><STRONG>Warning:</STRONG>
Any call to this routine must be matched with a call to <CODE>
MailboxDoneWithVMFile()</CODE>
.
 </P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxPushToMailboxDir()">
 </A>
<H1 CLASS="refHeading">
MailboxPushToMailboxDir()</H1>
<PRE CLASS="syntax">void 	MailboxPushToMailboxDir();
</PRE>
<P>
This routine performs a <CODE>
FilePushDir()</CODE>
 followed by a <CODE>
MailboxChangeToMailboxDir()</CODE>
.
</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxRegisterMessage()">
 </A>
<H1 CLASS="refHeading">
MailboxRegisterMessage()</H1>
<PRE CLASS="syntax">MailboxError MailboxRegisterMessage(
	MailboxRegisterMessageArgs 	*mrmArgs,
	MailboxMessage 		*msg);
</PRE>
<P>
The routine registers a message with the system. A message consists of the information the system needs to properly process that message, the <CODE>MailboxRegisterMessageArgs</CODE> <EM>mrmArgs</EM>, and the body data of the message itself, <EM>msg</EM>. The body data are copied, if necessary, or simply taken-possession-of by the system.

<P>You can find examples of filling in <CODE>MailboxRegisterMessageArgs</CODE> in the chapters that discuss the various communication methods, such as 
<A HREF="../../Nokia9000/SMS/index.htm">the SMS chapter</A>.

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxSetTransAddr()">
 </A>
<H1 CLASS="refHeading">
MailboxSetTransAddr()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxSetTransAddr(
	MailboxMessage msg, 
	word addrNumber,
	const void *newAddress,
	word addrSize);
</PRE>
<P>
Sets the opaque transport address of the <EM>addrNumber</EM>-th address for the message <EM>msg</EM> to <EM>newAddress</EM>, replacing the existing one. <EM>addrSzie</EM> is the size of the new address buffer, in bytes. This routine returns <CODE>ME_INVALID_MESSAGE</CODE> if <EM>msg</EM> is invalid or <CODE>ME_NOT_ENOUGH_MEMORY</CODE> if there is not enough memory. </P>
<P CLASS="refField">
<STRONG>Warning:</STRONG> The new address may not differ from the old address in its significant address bytes. This is not intended to allow arbitrary redirection of a message, but simply for transport drivers to record their progress for a particular address in the insignificant portion of the address.
</P>
<P CLASS="refField"><STRONG>See Also: </STRONG><CODE>MailboxGetTransAddr()</CODE></P>
<P CLASS="refField"><STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>



<DIV>
<A NAME="IX_MailboxSetTransData()">
 </A>
<H1 CLASS="refHeading">
MailboxSetTransData()</H1>
<PRE CLASS="syntax"> MailboxError 	MailboxGetTransData(
	MailboxMessage 	msg, 
	dword 	transData);
</PRE>
<P>
This routine replaces the 32-bit transport data registered with the message <EM>msg</EM> with <EM>transData</EM>.  If the message is invalid then the routine returns <CODE>ME_INVALID_MESSAGE</CODE>; if successful, it returns <CODE>ME_SUCCESS</CODE>.
</P>
<P CLASS = "refField">
<STRONG>Warning:</STRONG> 
The caller is responsible for freeing any resources referred to by the previous <CODE>dword</CODE> transport data since the Mailbox library places absolutely no interpretation on the <CODE>transData</CODE>, and thus cannot know what needs to be freed when one <CODE>transData</CODE> dword replaces another.
</P>
<P CLASS="refField"><STRONG>See Also: </STRONG><CODE>MailboxGetTransAddr()</CODE></P>

<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="IX_MailboxStealBody()">
 </A>
<H1 CLASS="refHeading">
MailboxStealBody()</H1>
<PRE CLASS="syntax"> MailboxError	MailboxStealBody(
	MailboxMessage 	msg,
	void 	*appRefBuf, 
	word 	*appRefBufSize);
</PRE>
<P>
This routine lets an application take possession of the body of the message <EM>msg</EM>. It puts the app-reference to the body in <EM>appRefBuf</EM>. The app-reference structure defined for each communication mode is defined in the documentation for that communication mode, <EM>e.g.</EM> 
<A HREF="../../Nokia9000/SMS/index.htm">the SMS chapter</A>. 
The application is responsible for destroying the data associated with this app-reference. If the message body is within a VM file, the application is responsible for calling 
<CODE><A HREF="../../CRef/Routines/R_MailboxAck.htm#IX_MailboxDoneWithVMFile()">MailboxDoneWithVMFile()</A></CODE> 
after freeing the data that make up the body. The parameters for this routine are the message <EM>msg</EM>, a pointer <EM>appRefBuf</EM> to an app-reference, and a word <EM>appRefBufSize</EM> that points to the size of <EM>appRefBuf</EM>, in bytes. <EM>appRefBufSize</EM> is then filled with the number of bytes that are put into <EM>appRefBuf</EM>. 



<P>The possible errors are <CODE>ME_INVALID_MESSAGE, ME_NOT_ENOUGH_MEMORY, ME_CANNOT_LOAD_DATA_DRIVER,    ME_CANNOT_LOAD_TRANSPORT_DRIVER, ME_APP_REF_BUF_TOO_SMALL, ME_CANNOT_OPEN_MESSAGE_FILE, </CODE> and <CODE>ME_CANNOT_READ_MESSAGE_FILE</CODE>.</P>
<P CLASS="refField">
<STRONG>Include:</STRONG>	<STRONG CLASS="fileName">
mailbox.h</STRONG>
 </P>
</DIV>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS C Reference</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_MailboxGetBodyFormat.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> MailboxGetBodyFormat() ...</A> 
<!-- to next --> | <A HREF="R_6a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">MakeWWFixed() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>



