<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_2e.htm,v 1.4 97/08/06 17:07:02 cgroom Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FloatFloatToAscii() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileTruncate() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBAdd.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FoamDBAddFieldToRecord() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FloatFloatToAscii()">
 </A>
<A NAME="IX_FFA_dateTime">
 </A>
<A NAME="IX_FFA_&ldots;  (FloatFloatToAsciiData structure)">
 </A>
<A NAME="IX_FloatFloatToAsciiData">
 </A>
<A NAME="IX_FloatFloatToAsciiParams">
 </A>
<A NAME="IX_FloatFloatToAsciiFormatFlags">
 </A>
<A NAME="IX_FFAF_&ldots;">
 </A>
<A NAME="IX_FFA_dateTimeParams">
 </A>
<A NAME="IX_FloatFloatToDateTime">
 </A>
<A NAME="IX_FFA_&ldots;  (FloatFloatToDateTime structure)">
 </A>
<A NAME="IX_FloatFormatToDateTimeFlags">
 </A>
<A NAME="IX_FFDTT_&ldots;">
 </A>
<H1 CLASS="refHeading">
FloatFloatToAscii()</H1>
<PRE CLASS="syntax">word	FloatFloatToAscii( /* returns # of chars in ASCII string */
        FFA_stackFrame 		*stackFrame, 
        char 		*resultString,
        FloatNum 		*number);</PRE>
<P>
This routine converts a floating point number to an ASCII string. It uses a complicated data structure, <CODE>
FFA_stackFrame</CODE>
. To convert floating point numbers to ASCII without filling in this structure, use the <CODE>
FloatFloatToAscii_StdFormat()</CODE>
 routine instead. Unless a special flag is passed, this routine will convert the top number of the floating point stack and pop it. <CODE>
FloatFloatToAscii()</CODE>
 takes the following arguments:</P>
<DL>
<DT>
<STRONG>
stackFrame</STRONG>
 </DT><DD>This is an <CODE>
FFA_stackFrame</CODE>
 structure. This structure contains a structure of parameters to <CODE>
FloatFloatToAscii()</CODE>
; also, the routine will return some information in this structure. The structure is discussed in detail below.</DD>
<DT>
<STRONG>
resultString</STRONG>
</DT><DD>Pointer to a buffer which will hold the generated ASCII string. This buffer must be either FLOAT_TO_ASCII_NORMAL_BUF_LEN or FLOAT_TO_ASCII_HUGE_BUF_LEN bytes, depending on the type of <STRONG>number</STRONG> (see below).</DD>
<DT>
<STRONG>
number</STRONG>
</DT><DD>Specifies the format of the floating number. If it is FFAF_DONT_USE_SCIENTIFIC then the buffer <STRONG>resultString</CODE> must be FLOAT_TO_ASCII_HUGE_BUF_LEN bytes long; otherwise, it must be FLOAT_TO_ASCII_NORMAL_BUF_LEN bytes.         
<P>
If you pass the FFAF_FROM_ADDR flag, then instead of converting the number at the head of the floating-point stack, the routine will convert this number. 
</DD>
</DL>
<P>
The routine explicitly returns the number of characters in the generated string, not counting the null terminator. It will return zero if an error occurred.</P>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	</P>
<PRE CLASS="syntax">typedef union {
	FloatFloatToAsciiData  	 				<A NAME="IX_FFA_float"></A>FFA_float;
        FloatFloatToDateTimeData				FFA_dateTime;
} FFA_stackFrame;<A NAME="IX_FFA_stackFrame"> </A>
        
        typedef struct {
        	FloatFloatToAsciiParams FFA_params;
        	word                    FFA_startNumber;
        	word                    FFA_decimalPoint;
        	word                    FFA_endNumber;
        	word                    FFA_numChars;
        	word                    FFA_startExponent;
        	word                    FFA_bufSize;
        	word                    FFA_saveDI;
        	word                    FFA_numSign;
        	byte                    FFA_startSigCount;
        	byte                    FFA_sigCount;
        	byte                    FFA_noMoreSigInfo;
        	byte                    FFA_startDecCount;
        	byte                    FFA_decCount;
        	word                    FFA_decExponent;
        	word                    FFA_curExponent;
        	byte                    FFA_useCommas;
        	byte                    FFA_charsToComma;
        	char                    FFA_commaChar;
        	char                    FFA_decimalChar;
        } FloatFloatToAsciiData;</PRE>
<P>
If you're passing a <CODE>
FloatFloatToAsciiData</CODE>
 structure, you must fill in the <CODE>
FFA_params</CODE>
 field. When <CODE>
FloatFloatToAscii()</CODE>
 returns, some of the other fields will have been filled in with potentially useful information:</P>
<DL>
<DT>
<STRONG>
FFA_startNumber</DT><DD>
</STRONG>
This is an offset into the returned string, pointing to the start of the numeric characters.</DD>
<DT>
<STRONG>
FFA_decimalPoint</DT><DD>
</STRONG>
This is an offset into the returned string, pointing to the decimal point. If no decimal point appears in the string, this field will be zero.</DD>
<DT>
<STRONG>
FFA_endNumber</DT><DD>
</STRONG>
This is an offset into the returned string, pointing to the end of the numeric characters.</DD>
<DT>
<STRONG>
FFA_numChars</DT><DD>
</STRONG>
This is the number of characters in the returned string, or zero if there was an error. This is the same as FloatFloatToAscii()'s return value.</DD>
<DT>
<STRONG>
FFA_startExponent</DT><DD>
</STRONG>
This is an offset into the returned string, pointing to the &quot;E&quot; character. If there is no such character in the string, this field will be zero.</DD>
<DT>
The other <CODE>
FloatFloatToAsciiData</CODE>
 fields are internal.</DT>
</DL>
<PRE CLASS="syntax">        typedef struct {
        	FloatFloatToAsciiFormatFlags 						formatFlags;
        	byte    						decimalOffset;
        	byte    						totalDigits;
        	byte    						decimalLimit;
        	char    						preNegative[SIGN_STR_LEN+1];
        	char    						postNegative[SIGN_STR_LEN+1];
        	char    						prePositive[SIGN_STR_LEN+1];
        	char    						postPositive[SIGN_STR_LEN+1];
        	char    						header[PAD_STR_LEN+1];
        	char    						trailer[PAD_STR_LEN+1];
        	byte    						FFTAP_unused;
        } FloatFloatToAsciiParams;</PRE>
<P>
The <CODE>
FloatFloatToAsciiParams</CODE>
 structure determines how <CODE>
FloatFloatToAscii()</CODE>
 should format its generated string. It contains the following fields:</P>
<DL>
<DT>
<STRONG>
formatFlags</STRONG>
	</DT><DD>
A <CODE>
FloatFloatToAsciiFormatFlags</CODE>
 structure containing flags used to fine-tune the formatting.</DD>
<DT>
<STRONG>
decimalOffset</DT><DD>
</STRONG>
The number of decimal places to offset the decimal point. E.g. an offset of -6 will display numbers in terms of millions.</DD>
<DT>
<STRONG>
totalDigits</STRONG>
</DT><DD>Maximum number of digits. This is normally MAX_DIGITS_FOR_NORMAL_NUMBERS. If you're using scientific notation, then this is probably MAX_DIGITS_FOR_HUGE_NUMBERS.</DD>
<DT>
<STRONG>
decimalLimit</DT><DD>
</STRONG>
Maximum number of decimal digits; the number will be rounded to meet this limit.</DD>
<DT>
<STRONG>
preNegative</DT><DD>
</STRONG>
The characters which precede a negative number. The string should be null-terminated. Thypical values are &quot;-&quot; and &quot;(&quot;.</DD>
<DT>
<STRONG>
postNegative</DT><DD>
</STRONG>
The characters used to terminate a negative number. The string should be null-terminated. Typical values include the empty string and &quot;)&quot;.</DD>
<DT>
<STRONG>
prePositive</STRONG>
</DT><DD>The characters used to precede a postive number. The string should be null-terminated. Typical values include the null string and &quot;+&quot;.</DD>
<DT>
<STRONG>
postPositive</STRONG>
</DT><DD>The character used to terminate a positive number. The string is expected to be null terminated. Typically, this is the empty string.</DD>
<DT>
<STRONG>
header</STRONG>
</DT><DD>The characters that precede the number. This string should be null terminated. This string might appear before or after the sign character, depending on whether the FFAF_SIGN_CHAR_TO_FOLLOW_HEADER flag is set. Typically, this string is empty; if it isn't, then set the FFAF_HEADER_PRESENT flag.</DD>
<DT>
<STRONG>
trailer</STRONG>
</DT><DD>The characters that follow the number. This string should be null terminated. Whether this string follows or precedes the sign is determined by the FFAF_SIGN_CHAR_TO_PRECEDE_TRAILER flag. Typically, this string is empty; if it isn't, then set the FFAF_TRAILER_PRESENT flag.</DD>
</DL>
<PRE CLASS="syntax">        typedef WordFlags FloatFloatToAsciiFormatFlags;
        #define FFAF_FLOAT_RESERVED 									0x8000
        #define FFAF_FROM_ADDR 									0x4000
        #define FFAF_DONT_USE_SCIENTIFIC 									0x0200
        #define FFAF_SCIENTIFIC 									0x0100
        #define FFAF_PERCENT 									0x0080
        #define FFAF_USE_COMMAS 									0x0040
        #define FFAF_NO_TRAIL_ZEROS 									0x0020
        #define FFAF_NO_LEAD_ZERO 									0x0010
        #define FFAF_HEADER_PRESENT 									0x0008
        #define FFAF_TRAILER_PRESENT 									0x0004
        #define FFAF_SIGN_CHAR_TO_FOLLOW_HEADER 									0x0002
        #define FFAF_SIGN_CHAR_TO_PRECEDE_TRAILER									0x0001</PRE>
<P>
The <CODE>
FloatFloatToAsciiFormatFlags</CODE>
 field contains the following flags: </P>
<DL>
<DT>
FFAF_FLOAT_RESERVED </DT><DD>
This flag must be zero.</DD>
<DT>
FFAF_FROM_ADDR </DT><DD>
Normally, <CODE>
FloatFloatToAscii()</CODE>
 will convert the number at the top of the floating point stack. By passing this flag, you ask that the routine instead convert the number pointed to by its <EM>
number</EM>
 argument.</DD>
<DT>
FFAF_DONT_USE_SCIENTIFIC </DT><DD>
If set, this flag discourages the use of scientific notation. Zero padding will be used if possible.</DD>
<DT>
FFAF_SCIENTIFIC </DT><DD>
Set this flag to enforce scientific notation.</DD>
<DT>
FFAF_PERCENT </DT><DD>
Set this flag to display number as a percentage.</DD>
<DT>
FFAF_USE_COMMAS </DT><DD>
Set this flag to use comma separators.</DD>
<DT>
FFAF_NO_TRAIL_ZEROS </DT><DD>
Set this flag to pad the number with trailing zeros.</DD>
<DT>
FFAF_NO_LEAD_ZERO </DT><DD>
Set this flag to make a leading zero appear before fractional values. E.g. &quot;.53&quot; would appear as &quot;0.53&quot; instead.</DD>
<DT>
FFAF_HEADER_PRESENT </DT><DD>
If there is no header string, leave this flag clear--this results in a speed optimization.</DD>
<DT>
FFAF_TRAILER_PRESENT </DT><DD>
If there is no trailer string, leave this flag clear--this results in a speed optimization.</DD>
<DT>
FFAF_SIGN_CHAR_TO_FOLLOW_HEADER </DT><DD>
This flag determines the relative positions of the sign and header strings.</DD>
<DT>
FFAF_SIGN_CHAR_TO_PRECEDE_TRAILER </DT><DD>
This flag determines the relative positions of the sign and trailer strings.</DD>
</DL>
<PRE CLASS="syntax">        typedef struct {
        	FloatFloatToDateTimeParams      FFA_dateTimeParams;
	} FloatFloatToDateTimeData;<A NAME="IX_FloatFloatToDateTimeData"></A>
        
        typedef struct {
                FloatFloatToDateTimeFlags 							FFA_dateTimeFlags;
                word    							FFA_year;
                byte 							FFA_month;
                byte 							FFA_day;
                byte 							FFA_weekday;
                byte 							FFA_hours;
                byte 							FFA_minutes;
                byte 							FFA_seconds;
        } FloatFloatToDateTimeParams;</PRE>
<P>
The <CODE>
FloatFloatToDateTime</CODE>
 structure is used to pass and return information for the formatting of date and time strings.</P>
<DL>
<DT>
<STRONG>
FFA_dateTimeFlags</STRONG>
 </DT><DD>
This <CODE>
FloatFloatToDateTimeFlags</CODE>
 field fine-tunes the way in which to format the date string.</DD>
<DT>
<STRONG>
FFA_year</STRONG>
 </DT>
<DT>
<STRONG>
FFA_month</STRONG>
 </DT>
<DT>
<STRONG>
FFA_day</STRONG>
 </DT>
<DT>
<STRONG>
FFA_weekday</STRONG>
 </DT>
<DT>
<STRONG>
FFA_hours</STRONG>
 </DT>
<DT>
<STRONG>
FFA_minutes</STRONG>
 </DT>
<DT>
<STRONG>
FFA_seconds</STRONG>
 </DT><DD>
These fields will be used to return the various parts of the date/time.</DD>
</DL>
<PRE CLASS="syntax">        typedef WordFlags FloatFloatToDateTimeFlags;
        #define FFDT_DATE_TIME_OP 				0x8000
        #define FFDT_FROM_ADDR 				0x4000
        #define FFDT_FORMAT 				0x3fff</PRE>
<P>
The <CODE>
FloatFloatToDateTimeFlags</CODE>
 field determines how the date/time should be formated.</P>
<DL>
<DT>
FFDTT_DATE_TIME_OP</DT><DD>
Set this flag.</DD>
<DT>
FFDTT_FROM_ADDR</DT><DD>
Set this flag to convert the number passed as the <EM>
number</EM>
 argument instead of the top number on the floating point stack.</DD>
<DT>
FFDTT_FORMAT</DT><DD>
This is a <CODE>
DateTimeFormat</CODE>
 value.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2f.htm#IX_FloatFloatToAscii_StdFormat()">FloatFloatToAscii_StdFormat()</A></CODE>.</P>
</DIV>

<DIV>
<A NAME="IX_FloatFloatToAscii_StdFormat()">
 </A>
<H1 CLASS="refHeading">
FloatFloatToAscii_StdFormat()</H1>
<PRE CLASS="syntax">word FloatFloatToAscii_StdFormat(
        char 					*string, 
        FloatNum 					*number,
        FloatFloatToAsciiFormatFlags 					format,
        word 					numDigits, 
        word 					numFractionalDigits)</PRE>
<P>
This routine formats a floating point number as an ASCII string. It is similar in purpose to <CODE>
<A HREF="../../CRef/Routines/R_2e.htm#IX_FloatFloatToAscii()">FloatFloatToAscii()</A></CODE>
. However, this routine does not require the use of the daunting <CODE>
FFA_stackFrame</CODE>
 data structure. It has the following arguments:</P>
<DL>
<DT>
<STRONG>
string</STRONG>
</DT><DD>Buffer to hold the converted string. This buffer must be at least FLOAT_TO_ASCII_NORMAL_BUF_LEN or FLOAT_TO_ASCII_HUGE_BUF_LEN.</DD>
<DT>
<STRONG>
number</STRONG>
</DT><DD>If you pass FFAF_FROM_ADDR, this should be a pointer to a number to convert; otherwise the top number on the floating point stack will be popped and converted. </DD>
<DT>
<STRONG>
format</STRONG>
</DT><DD>This is a flags field of type <CODE>
FloatFloatToAsciiFormatFlags</CODE>
. This data type is discussed under <CODE>
<A HREF="../../CRef/Routines/R_2e.htm#IX_FloatFloatToAscii()">FloatFloatToAscii()</A></CODE>
. The following flags are permitted: FFAF_FROM_ADDR, FFAF_SCIENTIFIC, FFAFF_PERCENT, FFAF_USE_COMMAS, FFAF_NO_TRAIL_ZEROS.</DD>
<DT>
<STRONG>
numDigits</STRONG>
</DT><DD>The number of significant digits desired.</DD>
<DT>
<STRONG>
numFranctionalDigits</DT><DD>
</STRONG>
The number of digits which may follow the decimal sign.</DD>
</DL>
<P>
The routine returns the number of characters in the resulting string, or zero if there was an error.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2e.htm#IX_FloatFloatToAscii()">FloatFloatToAscii()</A></CODE>.</P>
</DIV>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileTruncate() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBAdd.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FoamDBAddFieldToRecord() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
