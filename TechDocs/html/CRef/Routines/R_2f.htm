<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_2f.htm,v 1.2 97/06/25 18:20:02 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FormatIDFromManufacturerAndType() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBResumeUpdates.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FoamDBResumeUpdates() ...</A> 
<!-- to next --> | <A HREF="R_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GCNListAdd() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>

<DIV>
<A NAME="IX_FormatIDFromManufacturerAndType()">
 </A>
<H1 CLASS="refHeading">
FormatIDFromManufacturerAndType</H1>
<PRE CLASS="syntax">dword	FormatIDFromManufacturerAndType(mfr, type);
        ManufacturerIDs 			mfr;
        ClipboardItemFormat 			type;</PRE>
<P>
This macro takes a manufacturer ID and a format type (e.g. CIF_TEXT) and combines them into a dword argument of the type <CODE>
ClipboardItemFormatID</CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_free()">
 </A>
<H1 CLASS="refHeading">
free()</H1>
<PRE CLASS="syntax">void 	free(
        void * blockPtr);				/* address of memory to free */</PRE>
<P>
The <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 family of routines is provided for Standard C compatibility. The kernel will allocate a fixed block to satisfy the geode's <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 requests; it will allocate memory from this block. When the block is filled, it will allocate another fixed malloc-block. When all the memory in the block is freed, the memory manager will automatically free the block.</P>
<P>
When a geode is finished with some memory it requested from <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
, it should free the memory. That makes it easier for <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 to satisfy memory request. It can free the memory by passing the address which was returned by <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 (or <CODE>
<A HREF="../../CRef/Routines/R_3.htm#IX_calloc()">calloc()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>
) when the memory was allocated. All of the memory will be freed.</P>
<P>
The memory must be in a malloc-block assigned to the geode calling <CODE>
free()</CODE>
. If you want to free memory in another geode's malloc-block, call <CODE>
<A HREF="../../CRef/Routines/R_36.htm#IX_GeoFree()">GeoFree()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
stdlib.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Pass exactly the same address as the one returned to you when you allocated the memory. If you pass a different address, <CODE>
free()</CODE>
 will take unpredictable actions, including possibly erasing other memory or crashing the system.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_3.htm#IX_calloc()">calloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_36.htm#IX_GeoFree()">GeoFree()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_FractionOf() macro">
 </A>
<H1 CLASS="refHeading">
FractionOf()</H1>
<PRE CLASS="syntax">word	FractionOf(
        WWFixedAsDWord		wwf);</PRE>
<P>
This macro returns the fractional portion of a <CODE>
WWFixedAsDWord</CODE>
 value.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geos.h</STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBResumeUpdates.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FoamDBResumeUpdates() ...</A> 
<!-- to next --> | <A HREF="R_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GCNListAdd() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
