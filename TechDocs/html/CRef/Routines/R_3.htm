<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_3.htm,v 1.2 97/06/25 18:20:25 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ArrayQuickSort() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">AccessPointGetStringPropertyBlock() ...</A> 
<!-- to next --> | <A HREF="R_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CCB() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_ArrayQuickSort()">
 </A>
<H1 CLASS="refHeading">
ArrayQuickSort()</H1>
<PRE CLASS="syntax">void	ArrayQuickSort(
        void	*array,	/* Pointer to start of array */
        word	count,	/* Number of elements in array */
        word	elementSize,	/* Size of each element (in bytes) */
        word	valueForCallback, 		/* Passed to callback routine */
        QuickSortParameters *parameters);</PRE>
<P>
This routine sorts an array of uniform-sized elements. It uses a modified QuickSort algorithm, using an insertion sort for subarrays below a certain size. The routine calls a callback routine to actually compare elements.</P>
<P>
<CODE>
ArrayQuickSort()</CODE>
 is passed five arguments: A pointer to the first element of the array, the number of elements in the array, the size of each element in bytes, a word of data (which is passed to all callback routines), and a pointer to a <CODE>
QuickSortParameters</CODE>
 structure.</P>
<P>
Before <CODE>
ArrayQuickSort()</CODE>
 examines or changes any element, it calls a locking routine specified by the <CODE>
QuickSortParameters</CODE>
 structure. This routine locks the element, if necessary, and takes any necessary prepatory steps. Similarly, after <CODE>
ArrayQuickSort()</CODE>
 is finished with a routine, it calls an unlocking routine in the <CODE>
QuickSortParameters</CODE>
. Each of these routines is passed a pointer to the element and the word of callback data which was passed to <CODE>
ArrayQuickSort()</CODE>
.</P>
<P>
The sort routine does not compare elements. Rather, it calls a comparison callback routine specified by the <CODE>
QuickSortParameters</CODE>
. This callback routine should be declared _pascal. Whenever <CODE>
ArrayQuickSort()</CODE>
 needs to compare two elements, it calls the callback routine, passing the addresses of the elements and the <CODE>
valueForCallback</CODE>
 word which was passed to <CODE>
<A HREF="../../CRef/Routines/R_9.htm#IX_ChunkArraySort()">ChunkArraySort()</A></CODE>
. The callback routine's return value determines which element will come first in the sorted array:</P>
<UL>
<LI>
If element <CODE>
el1</CODE>
 ought to come before <EM>
el2</EM>
 in the sorted array, the callback routine should return a negative integer.</LI>
<LI>
If element <CODE>
el1</CODE>
 ought to come after <EM>
el2</EM>
 in the sorted array, the callback routine should return a positive integer.</LI>
<LI>
If it doesn't matter whether <CODE>
el1</CODE>
 comes before or after <EM>
el2</EM>
 in the array, the callback routine should return zero.</LI>
</UL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You may need to sort an array based on different criteria at different times. The simplest way to do this is to write one general-purpose callback routine and have the <CODE>
valueForCallback</CODE>
 word determine how the sort is done. For example, the same callback routine could sort the array in ascending or descending order, depending on the <CODE>
valueForCallback</CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the array on the global heap (unless it is in fixed memory).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	Do not have the callback routine do anything which might invalidate pointers to the array. For example, if the array is in a chunk, do not resize the chunks or allocate other chunks in the same LMem heap.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_2f.htm#IX_QuickSortParameters">QuickSortParameters</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_9.htm#IX_ChunkArraySort()">ChunkArraySort()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_BlockFromTransferBlockID() macro">
 </A>
<H1 CLASS="refHeading">
BlockFromTransferBlockID</H1>
<PRE CLASS="syntax">VMBlockHandle BlockFromTransferBlockID(id);
        TransferBlockID	 	id;</PRE>
<P>
This macro extracts the VMBlockHandle from a <CODE>
TransferBlockID</CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_BlockIDFromFileAndBlock() macro">
 </A>
<H1 CLASS="refHeading">
BlockIDFromFileAndBlock</H1>
<PRE CLASS="syntax">TransferBlockID BlockIDFromFileAndBlock(file, block);
        VMFileHandle 		file;
        VMBlockHandle 		block;</PRE>
<P>
This macro creates the dword type <CODE>
TransferBlockID</CODE>
 from a VMFileHandle and a VMBlockHandle.</P>
</DIV>
<DIV>
<A NAME="IX_bsearch()">
 </A>
<A NAME="IX_Binary search">
 </A>
<H1 CLASS="refHeading">
bsearch()</H1>
<PRE CLASS="syntax">extern void *_pascal bsearch(
        const void 		*key, 
        const void 		*array,
        word 		count, 
        word 		elementSize,
        PCB(int, compare, (const void *, const void *)));</PRE>
<P>
This is a standard binary search routine. The callback routine must be declared _pascal.</P>
</DIV>
<DIV>
<A NAME="IX_calloc()">
 </A>
<H1 CLASS="refHeading">
calloc()</H1>
<PRE CLASS="syntax">void *	calloc(
        word		n,			/* number of structures to allocate */
        size_t		size);			/* size of each structure in bytes */</PRE>
<P>
The <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 family of routines is provided for Standard C compatibility. If a geode needs a small amount of fixed memory, it can call one of the routines. The kernel will allocate a fixed block to satisfy the geode's <CODE>
<A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>
 requests; it will allocate memory from this block. When the block is filled, it will allocate another fixed malloc-block. When all the memory in the block is freed, the memory manager will automatically free the block.</P>
<P>
When a geode calls <CODE>
calloc()</CODE>
, it will be allocated a contiguous section of memory large enough for the specified number of structures of the specified size. The memory will be allocated out of its malloc-block, and the address of the start of the memory will be returned. The memory will be zero-initialized. If the request cannot be satisfied, <CODE>
calloc()</CODE>
 will return a null pointer. The memory is guaranteed not to be moved until it is freed (with <CODE>
<A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>
) or resized (with <CODE>
<A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>
). When GEOS shuts down, all fixed blocks are freed, and any memory allocated with <CODE>
calloc()</CODE>
 is lost.</P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You can allocate memory in another geode's malloc-block by calling <CODE>
<A HREF="../../CRef/Routines/R_36.htm#IX_GeoMalloc()">GeoMalloc()</A></CODE>
. However, that block will be freed when the other geode exits.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Request a size small enough to fit in a malloc-block; that is, the size of the structure times the number of structures requested must be somewhat smaller than 64K.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	All memory allocated with <CODE>
calloc()</CODE>
 is freed when GEOS shuts down.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_6a.htm#IX_malloc()">malloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2f.htm#IX_free()">free()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_36.htm#IX_GeoMalloc()">GeoMalloc()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_83.htm#IX_realloc()">realloc()</A></CODE>.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">AccessPointGetStringPropertyBlock() ...</A> 
<!-- to next --> | <A HREF="R_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">CCB() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
