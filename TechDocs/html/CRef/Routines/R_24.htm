<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_24.htm,v 1.2 97/06/25 18:15:18 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FatalError() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ElementArrayRemoveReference() ...</A> 
<!-- to next --> | <A HREF="R_25.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileCreate() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FatalError()">
 </A>
<H1 CLASS="refHeading">
FatalError()</H1>
<PRE CLASS="syntax">void	FatalError(
        word errorCode);</PRE>
<P>
This routine causes a fatal error, leaving <CODE>
errorCode</CODE>
 for the debugger. </P>
</DIV>
<DIV>
<A NAME="IX_FileClose()">
 </A>
<H1 CLASS="refHeading">
FileClose()</H1>
<PRE CLASS="syntax">word 	FileClose( /* returns error */
        FileHandle		fh,					/* File to close */
        Boolean		noErrorFlag);					/* Set if app. can't handle
								 * errors */</PRE>
<P>
This routine closes an open byte file. If the routine succeeds, it returns zero. If the routine fails and <EM>
noErrorFlag</EM>
 is <EM>
false</EM>
 (i.e., zero), <CODE>
FileClose()</CODE>
 returns a member of the <CODE>
FileError</CODE>
 enumerated type. If the routine fails and <EM>
noErrorFlag</EM>
 is <EM>
true</EM>
 (i.e., non-zero), the routine will fatal-error.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The <CODE>
noErrorFlag</CODE>
 parameter should be <CODE>
true</CODE>
 only during debugging.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileCommit()">
 </A>
<H1 CLASS="refHeading">
FileCommit()</H1>
<PRE CLASS="syntax">word	FileCommit( /* returns error */
        FileHandle		fh,
        Boolean		noErrorFlag);				/* set if can't handle errors */</PRE>
<P>
<CODE>
FileCommit()</CODE>
 forces the file system to write any cached information about a file to the disk immediately. If it is successful, it returns zero. If it fails, it returns an error code. If the routine fails and <EM>
noErrorFlag</EM>
 is <EM>
true</EM>
 (i.e. non-zero), the routine will fatal-error.</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	The <CODE>
noErrorFlag</CODE>
 parameter should be <CODE>
true</CODE>
 only during debugging.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileConstructFullPath()">
 </A>
<H1 CLASS="refHeading">
FileConstructFullPath()</H1>
<PRE CLASS="syntax">DiskHandle 	FileConstructFullPath(
        char		* * buffer,				/* Path string is written here */
        word		bufSize,			/* Length of buffer (in bytes) */
        DiskHandle		disk,			/* Disk or standard path; null for 
						 * current path */</PRE>
<PRE CLASS="syntax">        const char		* tail,			/* Path relative to handle */
        Boolean		addDriveLetter);					/* Should path begin with drive
								 * name? */</PRE>
<P>
This routine translates a GEOS directory specification into a complete path string. It writes the string into the passed buffer. The directory is specified by two arguments: The first, <CODE>
disk</CODE>
, is the handle of a disk; this may also be a standard path constant. (If a null handle is passed, the current working directory is used.) The second, <CODE>
tail</CODE>
, is a pointer to the character string representing the tail end of the path. <CODE>
FileConstructFullPath()</CODE>
 appends this relative path to the location indicated by the disk handle. It then constructs a full path string, beginning with that disk's root directory, and writes it to the buffer passed. If <EM>
addDriveName</EM>
 is <EM>
true</EM>
 (i.e. non-zero), the path string will begin with the drive's name and a colon. The pointer pointed to by <EM>
buffer</EM>
 will be updated to point to the end of the constructed string.</P>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	The following call to <CODE>
FileConstructFullPath()</CODE>
 might yield these results:</P>
<P CLASS="figTitle">
Sample call to FileConstructFullPath()</P>
<PRE>/* Here we find out the full path of a subdirectory of the DOCUMENT directory */</PRE>
<PRE>	DiskHandle		documentDisk;
	char		pathBuffer[256];			/* long enough for most paths */
	char		*pB = &amp;pathBuffer;</PRE>
<PRE>	documentDisk = FileConstructFullPath(&amp;pB,						/* pointer to pointer */
					256, 		/* Length of buffer */
					SP_DOCUMENT,		/* This can be a disk or 
							 * standard path */
					&quot;MEMOS\\JANUARY&quot;, /* In C strings, the
							 * backslash must be
							 * doubled */
					TRUE);		/* Prepend drive name */</PRE>
<PRE>/* If the standard paths are set up in the default configuration, &quot;documentDisk&quot;
 * would be the handle of the main hard drive, and pathBuffer would contain a
 * string like &quot;C:\GEOWORKS\DOCUMENT\MEMOS\JANUARY&quot; */</PRE>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_2a.htm#IX_FileParseStandardPath()">FileParseStandardPath()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileCopy()">
 </A>
<H1 CLASS="refHeading">
FileCopy()</H1>
<PRE CLASS="syntax">word	FileCopy( /* returns error */
        const char		* source,				/* Source path and file name */
        const char		* dest,				/* Destination path and file name */
        DiskHandle		sourceDisk,				/* These handles may be Standard */
        DiskHandle		destDisk);				/* Path constants, or null to indi- 
						 * cate current working directory */</PRE>
<P>
This routine makes a copy of a file. The source and destination are specified with path strings. Each string specifies a path relative to the location specified by the corresponding disk handle. If the handle is a disk handle, the path is relative to that disk's root. If the disk handle is a standard path constant, the path string is relative to that standard path. If the disk handle is null, the path is relative to the current working directory.</P>
<P>
If <CODE>
FileCopy()</CODE>
 is successful, it returns zero. Otherwise, it returns one of the following error codes:</P>
<DL>
<DT>
ERROR_FILE_NOT_FOUND</DT><DD>
No such source file exists in the specified directory.</DD>
<DT>
ERROR_PATH_NOT_FOUND</DT><DD>
An invalid source or destination path string was passed.</DD>
<DT>
ERROR_ACCESS_DENIED</DT><DD>
You do not have permission to delete the existing copy of the destination file, or the destination disk or directory is not writable.</DD>
<DT>
ERROR_FILE_IN_USE</DT><DD>
Some geode has the existing destination file open.</DD>
<DT>
ERROR_SHORT_READ_WRITE</DT><DD>
There was not enough room on the destination disk.</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_29.htm#IX_FileMove()">FileMove()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ElementArrayRemoveReference() ...</A> 
<!-- to next --> | <A HREF="R_25.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileCreate() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
