<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_28.htm,v 1.2 97/06/25 18:16:45 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: FileEnumLocateAttr() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_27.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileEnum() ...</A> 
<!-- to next --> | <A HREF="R_29.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileGetDiskHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FileEnumLocateAttr()">
 </A>
<H1 CLASS="refHeading">
FileEnumLocateAttr()</H1>
<PRE CLASS="syntax">void *	FileEnumLocateAttr( /* returns NULL if attr not found */
        FileEnumCallbackData*			fecd,		/* Passed to callback routine */
        FileExtendedAttribute			attr,		/* Search for this attribute */
        const char *			* name);			/* Attribute name (if second
						 * argument is FEA_CUSTOM) */</PRE>
<P>
<CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 can be instructed to call a callback routine to decide which files to filter out. This callback routine is passed an array of <CODE>
FileExtAttrDesc</CODE>
 structures. To find a particular extended attribute in this array, call <CODE>
FileEnumLocateAttr()</CODE>
. This routine will find the address of the value of the attribute desired, and return that address. If the attribute is not in the array, <CODE>
FileEnumLocateAttr()</CODE>
 will return a null pointer.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
fileEnum.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileEnumWildcard()">
 </A>
<H1 CLASS="refHeading">
FileEnumWildcard()</H1>
<PRE CLASS="syntax">Boolean	FileEnumWildcard(
        FileEnumCallbackData			* fecd,			/* Passed to callback routine */
        word			frame);			/* Inherited stack frame */</PRE>
<P>
This routine is a utility used by <CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 and is rarely used by applications. It checks to see if the virtual name of the current file (the file currently being evaluated by <CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
) matches the pattern in the <CODE>
FEP_cbData1</CODE>
 field of the <CODE>
FileEnumParams</CODE>
 structure.</P>
<P>
The <EM>
fecd</EM>
 parameter is a pointer to the callback data of the <CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 routine. The frame parameter is a pointer to the <CODE>
<A HREF="../../CRef/Routines/R_27.htm#IX_FileEnum()">FileEnum()</A></CODE>
 stack frame: The first dword is the <CODE>
FEP_cbData1</CODE>
 field, and the second is the <CODE>
FEP_cbData2</CODE>
 field.</P>
<P>
This routine returns <CODE>
true</CODE>
 (non-zero) if the file name and pattern match. Otherwise, it returns <CODE>
false</CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
fileEnum.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TransferBlockID:extracting file handle from">
 </A>
<A NAME="IX_FileFromTransferBlockID() macro">
 </A>
<H1 CLASS="refHeading">
FileFromTransferBlockID()</H1>
<PRE CLASS="syntax">VMFileHandle	 FileFromTransferBlockID(id);
        TransferBlockID <EM>id</EM>;</PRE>
<P>
This macro extracts a VMFileHandle from a value of type <CODE>
TransferBlockID</CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_FileGetAttributes()">
 </A>
<H1 CLASS="refHeading">
FileGetAttributes()</H1>
<PRE CLASS="syntax">FileAttrs 	FileGetAttributes( /* Sets thread's error value */
        const char * path);			/* file's path relative to current
			 * working directory */</PRE>
<P>
This routine returns the standard <CODE>
FileAttrs</CODE>
 attributes for a file. The file may be a GEOS file or a plain DOS file. Note that you can also get a file's attributes by getting the file's FEA_FILE_ATTR extended attribute. If an error occurs, this routine sets the thread's error (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_13.htm#IX_FileAttrs">FileAttrs</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2b.htm#IX_FileSetAttributes()">FileSetAttributes()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileGetCurrentPath()">
 </A>
<H1 CLASS="refHeading">
FileGetCurrentPath()</H1>
<PRE CLASS="syntax">DiskHandle FileGetCurrentPath(
        char *	buffer,			/* Path string is written here */
        word	bufferSize);			/* Size of buffer in bytes */</PRE>
<P>
This routine writes the current path string (without drive specifier) to the buffer provided. If the buffer is too small, it truncates the path to fit. It returns the handle of the disk containing the current path. If the current path was declared relative to a standard path, the standard path constant will be returned.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_FileGetDateAndTime()">
 </A>
<H1 CLASS="refHeading">
FileGetDateAndTime()</H1>
<PRE CLASS="syntax"><CODE>FileDateAndTime</CODE> 	FileGetDateAndTime( /* sets thread's error value */
        FileHandle fh);</PRE>
<P>
This routine finds out the time a file was last modified. This routine can be called on GEOS or non-GEOS files. Note that you can also find out the modification time of a file by checking the extended attribute FEA_MODIFICATION. If unsuccessful, it sets the thread's error value (accessible via <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Structs/S_14.htm#IX_FileDateAndTime">FileDateAndTime</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_2b.htm#IX_FileSetDateAndTime()">FileSetDateAndTime()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
file.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_27.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">FileEnum() ...</A> 
<!-- to next --> | <A HREF="R_29.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">FileGetDiskHandle() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
