<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_1e.htm,v 1.3 97/08/05 14:49:13 nfiedler Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: EC() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DriveGetDefaultMedia() ...</A> 
<!-- to next --> | <A HREF="R_1f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECCheckHugeArray() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_EC() macro">
 </A>
<H1 CLASS="refHeading">
EC()</H1>
<PRE CLASS="syntax">void	EC(<EM>line</EM>);</PRE>
<P>
This macro defines a line of code that will only be compiled into the error-checking version of the geode. The <CODE>
line</CODE>
 parameter of the macro is the actual line of code. When the EC version of the program is compiled, the line will be treated as a normal line of code; when the non-EC version is compiled, the line will be ignored.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_74.htm#IX_NEC()">NEC()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_Pointers:bounds checking">
 </A>
<A NAME="IX_EC_BOUNDS() macro">
 </A>
<H1 CLASS="refHeading">
EC_BOUNDS()</H1>
<PRE CLASS="syntax">void	EC_BOUNDS(<EM>addr</EM>);</PRE>
<P>
This macro adds an address check to the error-checking version of a program. When the EC version of the program is compiled, the address check will be included; when the non-EC version is compiled, the address check will be left out. The <CODE>
addr</CODE>
 parameter is the address or pointer to be checked.</P>
<P>
The macro expands to a call to <CODE>
<A HREF="../../CRef/Routines/R_1e.htm#IX_ECCheckBounds()">ECCheckBounds()</A></CODE>
 on the specified address or pointer. If the address is out of bounds, the program will stop with a call to <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_1e.htm#IX_ECCheckBounds()">ECCheckBounds()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_EC_ERROR() macro">
 </A>
<H1 CLASS="refHeading">
EC_ERROR()</H1>
<PRE CLASS="syntax">void	EC_ERROR(<EM>code</EM>);</PRE>
<P>
This macro inserts a call to <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
 in the error-checking version of the program and does nothing to the non-EC version. When the program gets to this point, it will halt and put up an error message corresponding to the specified error <CODE>
code</CODE>
. If a condition should be checked before calling <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
, you can use EC_ERROR_IF() instead.</P>
</DIV>
<DIV>
<A NAME="IX_EC_ERROR_IF() macro">
 </A>
<H1 CLASS="refHeading">
EC_ERROR_IF()</H1>
<PRE CLASS="syntax">void	EC_ERROR_IF(<EM>test</EM>, <EM>code</EM>);</PRE>
<P>
This macro inserts a conditional call to <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
 in the error-checking version of a program; it does nothing for the non-EC version. The <CODE>
test</CODE>
 parameter is a Boolean value that, if <CODE>
true</CODE>
, will cause the <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
 call to be made. If <CODE>
test</CODE>
 is <CODE>
false</CODE>
, <CODE>
<A HREF="../../CRef/Routines/R_24.htm#IX_FatalError()">FatalError()</A></CODE>
 will not be called.</P>
</DIV>
<DIV>
<A NAME="IX_EC_WARNING() macro">
 </A>
<H1 CLASS="refHeading">
EC_WARNING()</H1>
<PRE CLASS="syntax">EC_WARNING(word warningCode);</PRE>
<P>
This macro generates a warning for the debugger when executed by error-checking code; it has no effect when in non-EC code.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_EC_WARNING_IF() macro">
 </A>
<H1 CLASS="refHeading">
EC_WARNING_IF()</H1>
<PRE CLASS="syntax">EC_WARNING_IF(&lt;expr&gt;, word warningCode)</PRE>
<P>
When this macro is executed in error-checking code, it tests &lt;<EM>expr</EM>&gt;; if  &lt;<EM>expr</EM>&gt; is non-zero, it generates a warning with code <CODE>
warningCode</CODE>
 for the debugger.</P>
<P>
In non-EC code, the macro has no effect (and &lt;<EM>expr</EM>&gt; is not evaluated).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Pointers:bounds checking">
 </A>
<A NAME="IX_ECCheckBounds()">
 </A>
<H1 CLASS="refHeading">
ECCheckBounds()</H1>
<PRE CLASS="syntax">void	ECCheckBounds(
        void	*address);</PRE>
<P>
This routine checks to see if the given pointer is within bounds of the block into which it points. If assertions fail, a fatal error will occur. If the
"lmem" EC flag is turned on and the pointer points within an LMem block,
then this routine will also check that the pointer points to a valid chunk
handle or a chunk within the LMem block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Chunk arrays:checking validity">
 </A>
<A NAME="IX_ECCheckChunkArray()">
 </A>
<H1 CLASS="refHeading">
ECCheckChunkArray()</H1>
<PRE CLASS="syntax">void	ECCheckChunkArray(
        optr	o);</PRE>
<P>
This routine checks the validity of the specified chunk array. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Chunk arrays:checking validity">
 </A>
<A NAME="IX_ECCheckChunkArrayHandles()">
 </A>
<H1 CLASS="refHeading">
ECCheckChunkArrayHandles()</H1>
<PRE CLASS="syntax">void	ECCheckChunkArrayHandles(
        MemHandle mh,
        ChunkHandle ch);</PRE>
<P>
This routine checks the validity of the specified chunk array. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Classes:checking class pointers">
 </A>
<A NAME="IX_ECCheckClass()">
 </A>
<H1 CLASS="refHeading">
ECCheckClass()</H1>
<PRE CLASS="syntax">void	ECCheckClass(
        ClassStruct *class);</PRE>
<P>
This routine checks that the given pointer actually references a class definition. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Drivers:handle checking">
 </A>
<A NAME="IX_ECCheckDriverHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckDriverHandle()</H1>
<PRE CLASS="syntax">void	ECCheckDriverHandle(
        GeodeHandle gh);</PRE>
<P>
This routine checks that the passed handle actually references a driver. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Events:handles, checking">
 </A>
<A NAME="IX_ECCheckEventHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckEventHandle()</H1>
<PRE CLASS="syntax">void	ECCheckEventHandle(
        EventHandle eh);</PRE>
<P>
This routine checks that the passed handle actually references a stored message. If the assertions fail, a fatal error will occur.</P>
</DIV>
<DIV>
<A NAME="IX_Files:handles, checking">
 </A>
<A NAME="IX_ECCheckFileHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckFileHandle()</H1>
<PRE CLASS="syntax">void	ECCheckFileHandle(
        FileHandle file);</PRE>
<P>
This routine checks that the passed handle actually is a file handle and references a file. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_Geodes:handles, checking">
 </A>
<A NAME="IX_ECCheckGeodeHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckGeodeHandle()</H1>
<PRE CLASS="syntax">void	ECCheckGeodeHandle(
        GeodeHandle gh);</PRE>
<P>
This routine checks that the passed handle references a loaded geode. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GStateHandle:checking">
 </A>
<A NAME="IX_GStates:handles, checking">
 </A>
<A NAME="IX_ECCheckGStateHandle()">
 </A>
<H1 CLASS="refHeading">
ECCheckGStateHandle()</H1>
<PRE CLASS="syntax">void	ECCheckGStateHandle(
        GStateHandle gsh);</PRE>
<P>
This routine checks that the passed handle references a GState. If the assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_1d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">DriveGetDefaultMedia() ...</A> 
<!-- to next --> | <A HREF="R_1f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ECCheckHugeArray() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
