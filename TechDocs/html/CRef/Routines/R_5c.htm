<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_5c.htm,v 1.2 97/06/25 18:31:56 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: InitFileReadStringBlock() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InitFileEnumStringSection() ...</A> 
<!-- to next --> | <A HREF="R_5d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileRevert() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_InitFileReadStringBlock()">
 </A>
<H1 CLASS="refHeading">
InitFileReadStringBlock()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadStringBlock(
        const char *		category,
        const char *		key,
        MemHandle *		block,
        InitFileReadFlags		flags,
        word *		dataSize);</PRE>
<P>
This routine reads a string entry in the GEOS.INI file, allocates a new block on the global heap, and copies the read string into the new block. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteString()">InitFileWriteString()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
block</CODE>
</DT><DD>A pointer to a memory block handle variable. Upon return, this variable will contain the handle of the newly allocated block; the block will contain the string read from the file. It is your responsibility to free this block when you're done with it.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
InitFileReadFlags</CODE>
 indicating the method of character conversion upon reading (upcase all, downcase all, do not change).</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>A pointer to a word which, upon return, will contain the size of the string (in bytes) actually read from the file.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadStringBuffer()">
 </A>
<H1 CLASS="refHeading">
InitFileReadStringBuffer()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadStringBuffer(
        const char *		category,
        const char *		key,
        char *		buffer,
        InitFileReadFlags		flags,
        word *		dataSize);</PRE>
<P>
This routine reads a string entry in the GEOS.INI file, copying it into a passed, locked buffer. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteString()">InitFileWriteString()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a buffer into which the returned string will be written. This buffer must be in locked or fixed memory. If you don't know the approximate size of the data, you may want to use the (slightly less efficient) <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringBlock()">InitFileReadStringBlock()</A></CODE>
.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
InitFileReadFlags</CODE>
 indicating the size of the passed buffer as well as the method of character conversion upon reading (upcase all, downcase all, do not change).</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>A pointer to a word which, upon return, will contain the size of the string (in bytes) actually read from the file.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadStringSectionBlock()">
 </A>
<H1 CLASS="refHeading">
InitFileReadStringSectionBlock()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadStringSectionBlock(
        const char *		category,
        const char *		key,
        word		section,
        MemHandle *		block,
        InitFileReadFlags		flags,
        word *		dataSize);</PRE>
<P>
This routine reads a string section from the specified entry in the GEOS.INI file, allocates a new block on the global heap, and copies the read string section into the new block. It returns the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteString()">InitFileWriteString()</A></CODE>
 or <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteStringSection()">InitFileWriteStringSection()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
section</CODE>
</DT><DD>The zero-based number of the string section to retrieved.</DD>
<DT>
<CODE>
block</CODE>
</DT><DD>A pointer to a memory block handle. Upon return, this pointer will point to the handle of the newly allocated block; the block will contain the string section read from the file.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
InitFileReadFlags</CODE>
 indicating the method of character conversion upon reading (upcase all, downcase all, do not change).</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>A pointer to a word which, upon return, will contain the size of the string section (in bytes) actually read from the file.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_InitFileReadStringSectionBuffer()">
 </A>
<H1 CLASS="refHeading">
InitFileReadStringSectionBuffer()</H1>
<PRE CLASS="syntax">Boolean	InitFileReadStringSectionBuffer(
        const char *		category,
        const char *		key,
        word		section,
        char *		buffer,
        InitFileReadFlags		flags,
        word *		dataSize);</PRE>
<P>
This routine reads a string section from the specified entry in the GEOS.INI file, copying it into a passed, locked buffer. It returns the indicated section in the first instance of the category/key combination it encounters, searching the local INI file first. Thus, local settings will always override system or network settings.</P>
<P>
This routine is used for reading data written with <CODE>
<A HREF="../../CRef/Routines/R_5d.htm#IX_InitFileWriteStringSection()">InitFileWriteStringSection()</A></CODE>
. Pass it the following parameters:</P>
<DL>
<DT>
<CODE>
category</CODE>
</DT><DD>A pointer to the null-terminated string representing the category in which the entry resides. This string ignores white space and is case-insensitive.</DD>
<DT>
<CODE>
key</CODE>
</DT><DD>A pointer to the null-terminated string representing the key to be retrieved.</DD>
<DT>
<CODE>
section</CODE>
</DT><DD>The zero-based number of the string section to be retrieved.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a buffer into which the returned string section will be written. This buffer must be in locked or fixed memory. If you don't know the approximate size of the string section, you may want to use the (slightly less efficient) <CODE>
<A HREF="../../CRef/Routines/R_5c.htm#IX_InitFileReadStringSectionBlock()">InitFileReadStringSectionBlock()</A></CODE>
.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
InitFileReadFlags</CODE>
 indicating the size of the passed buffer as well as the method of character conversion upon reading (upcase all, downcase all, do not change).</DD>
<DT>
<CODE>
dataSize</CODE>
</DT><DD>A pointer to a word which, upon return, will contain the size of the string section (in bytes) actually read from the file.</DD>
</DL>
<P>
The function's return value will be <CODE>
true</CODE>
 if an error occurs or if the entry could not be found; it will be <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
initfile.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_5b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">InitFileEnumStringSection() ...</A> 
<!-- to next --> | <A HREF="R_5d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">InitFileRevert() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
