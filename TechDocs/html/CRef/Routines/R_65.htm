<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_65.htm,v 1.2 97/06/25 18:34:50 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: LMemReAlloc() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_64.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LMemGetChunkSize() ...</A> 
<!-- to next --> | <A HREF="R_66.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalAsciiToFixed() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_LMemReAlloc()">
 </A>
<H1 CLASS="refHeading">
LMemReAlloc()</H1>
<PRE CLASS="syntax">Boolean	LMemReAlloc(
        optr	chunk,				/* optr of chunk to resize */
        word	chunkSize);				/* New size of chunk in bytes */</PRE>
<P>
This routine resizes a chunk in an LMem heap. The heap must be in a locked or fixed block. If the routine succeeds, it returns zero. If it fails (because the heap ran out of space and could not be expanded), it returns non-zero.</P>
<P>
If the new size is larger than the original size, extra bytes will be added to the end of the chunk. These bytes will not be zero-initialized. The heap may have to be compacted or resized to accommodate the request; thus, all pointers to data within the block are invalidated. </P>
<P>
If the new size is smaller than the old, the chunk will be truncated. The request is guaranteed to succeed, and the chunk will not be moved; neither will the heap be compacted or resized. Thus, all pointers to other chunks remain valid. Reallocating a chunk to zero bytes is the same as freeing it.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	As noted, if the new size is larger than the old, the heap may be compacted or resized, invalidating pointers.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_65.htm#IX_LMemReAllocHandles()">LMemReAllocHandles()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_64.htm#IX_LMemInsertAt()">LMemInsertAt()</A></CODE>,
<CODE><A HREF="../../CRef/Routines/R_63.htm#IX_LMemDeleteAt()">LMemDeleteAt()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_LMemReAllocHandles()">
 </A>
<H1 CLASS="refHeading">
LMemReAllocHandles()</H1>
<PRE CLASS="syntax">Boolean	LMemReAllocHandles(
        MemHandle		mh,				/* Handle of LMem heap */
        ChunkHandle		chunk,				/* Handle of chunk to resize */
        word		chunkSize);				/* New size of chunk in bytes */</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_65.htm#IX_LMemReAlloc()">LMemReAlloc()</A></CODE>
 above, except that the chunk is specified by its global and chunk handles (instead of by an optr).</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	As noted, if the new size is larger than the old, the heap may be compacted or resized, invalidating pointers.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
lmem.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_64.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">LMemGetChunkSize() ...</A> 
<!-- to next --> | <A HREF="R_66.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">LocalAsciiToFixed() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
