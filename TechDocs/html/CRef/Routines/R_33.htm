<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_33.htm,v 1.3 97/08/05 14:49:52 nfiedler Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: GeodeAllocQueue() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_32.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GenCopyChunk() ...</A> 
<!-- to next --> | <A HREF="R_34.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeGetAppObject() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_GeodeAllocQueue()">
 </A>
<H1 CLASS="refHeading">
GeodeAllocQueue()</H1>
<PRE CLASS="syntax">QueueHandle GeodeAllocQueue();</PRE>
<P>
This routine allocates an event queue which can then be attached to a thread with <CODE>
<A HREF="../../CRef/Routines/R_96.htm#IX_ThreadAttachToQueue()">ThreadAttachToQueue()</A></CODE>
. It returns the queue's handle if one is allocated; it will return zero otherwise. This routine is used outside the kernel only in exceptional circumstances.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	You must free the queue when you are done with it; use <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFreeQueue()">GeodeFreeQueue()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeDuplicateResource()">
 </A>
<H1 CLASS="refHeading">
GeodeDuplicateResource()</H1>
<PRE CLASS="syntax">MemHandle GeodeDuplicateResource(
        MemHandle mh);		/* handle of geode resource to duplicate */</PRE>
<P>
This routine reads a resource from a geode into a newly-allocated block (allocated by this routine). Any relocations on the resource to itself are adjusted to be the duplicated block. The handle of the duplicated block is returned.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
resource.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFind()">
 </A>
<H1 CLASS="refHeading">
GeodeFind()</H1>
<PRE CLASS="syntax">GeodeHandle GeodeFind(
        const char	* name,			/* geode's permanent name */
        word		numChars,		/* number of characters to match:
				 		 * 8 for name, 12 for name.ext */
	GeodeAttrs	attrMatch,		/* GeodeAttrs that must be set */
        GeodeAttrs	attrNoMatch);		/* GeodeAttrs that must be off */</PRE>
<P>
This routine finds a geode given its permanent name, returning the geode handle if found. If the geode can not be found, a null handle will be returned. Pass it the following:</P>
<DL>
<DT>
<CODE>
name</CODE>
</DT><DD>A pointer to the null-terminated permanent name of the geode.</DD>
<DT>
<CODE>
numChars</CODE>
</DT><DD>The number of characters to match before returning. Pass GEODE_NAME_SIZE to match the permanent name, (GEODE_NAME_SIZE + GEODE_NAME_EXT_SIZE) to match the name and extension.</DD>
<DT>
<CODE>
attrMatch</CODE>
</DT><DD>A record of <CODE>
GeodeAttrs</CODE>
 the subject geode must have set for a positive match.</DD>
<DT>
<CODE>
attrNoMatch</DT><DD>
</CODE>
A record of <CODE>
GeodeAttrs</CODE>
 the subject geode must have cleared for a positive match.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFindResource()">
 </A>
<H1 CLASS="refHeading">
GeodeFindResource()</H1>
<PRE CLASS="syntax">word	GeodeFindResource(
        FileHandle	file,			/* geode's executable file */
        word		resNum,			/* resource number to find */
        word		resOffset,		/* offset to resource */
        dword		* base);		/* pointer to second return value */</PRE>
<P>
This routine locates a resource within a geode's executable (<STRONG CLASS="fileName">
.geo</STRONG>
) file. It returns the size of the resource as well as the base position of the first byte of the resource in the file (pointed to by <CODE>
base</CODE>
). Pass the following:</P>
<DL>
<DT>
<CODE>
file</CODE>
</DT><DD>The file handle of the geode's executable file.</DD>
<DT>
<CODE>
resNum</CODE>
</DT><DD>The number of the resource to be found.</DD>
<DT>
<CODE>
resOffset</CODE>
</DT><DD>The offset within the resource at which to position the file's read/write position.</DD>
<DT>
<CODE>
base</CODE>
</DT><DD>A pointer to a dword value to be filled in by the routine. This value will be the base offset from the beginning of the file to the first byte of the resource.</DD>
</DL>
<P CLASS="refField"><STRONG>
Structures:</STRONG>	A geode's executable file is laid out as shown below.</P>
<PRE>0:	Geode file header</PRE>
<PRE>1:	Imported Library Table</PRE>
<PRE>2:	Exported Routine Table</PRE>
<PRE>3:	Resource Size Table</PRE>
<PRE>4:	Resource Position Table</PRE>
<PRE>5:	Relocation Table Size Table</PRE>
<PRE>6:	Allocation Flags Table</PRE>
<PRE>7+:	application resources</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFlushQueue()">
 </A>
<H1 CLASS="refHeading">
GeodeFlushQueue()</H1>
<PRE CLASS="syntax">void	GeodeFlushQueue(
        QueueHandle	source,			/* source queue to flush */
        QueueHandle	dest,			/* queue to hold flushed events */
        optr		obj			/* object to handle flushed events */
        MessageFlags	flags);			/* MF_INSERT_AT_FRONT or zero */</PRE>
<P>
This routine flushes all events from one event queue into another, synchronously. Pass it the following:</P>
<DL>
<DT>
<CODE>
source</CODE>
</DT><DD>The queue handle of the source queue (the one to be emptied).</DD>
<DT>
<CODE>
dest</CODE>
</DT><DD>The queue handle of the destination queue that will receive the flushed events.</DD>
<DT>
<CODE>
obj</CODE>
</DT><DD>The object that will handle flushed events that were destined for the process owning the source queue. If the process owning the destination queue should be used, pass the destination queue handle in the handle portion of the optr and a null chunk handle.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
MessageFlags</CODE>
. The only meaningful flag for this routine is MF_INSERT_AT_FRONT, which should be set to flush source queue's events to the front of the destination queue. If this flag is not passed, events will be appended to the queue.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFreeDriver()">
 </A>
<H1 CLASS="refHeading">
GeodeFreeDriver()</H1>
<PRE CLASS="syntax">void	GeodeFreeDriver(
        GeodeHandle gh);			/* handle of the driver */</PRE>
<P>
This routine frees a driver geode that had been loaded with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodeUseDriver()">GeodeUseDriver()</A></CODE>
. Pass it the geode handle of the driver as returned by that routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
driver.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFreeLibrary()">
 </A>
<H1 CLASS="refHeading">
GeodeFreeLibrary()</H1>
<PRE CLASS="syntax">void	GeodeFreeLibrary(
        GeodeHandle gh);			/* handle of the library */</PRE>
<P>
This routine frees a library geode that had been loaded with <CODE>
<A HREF="../../CRef/Routines/R_35.htm#IX_GeodeUseLibrary()">GeodeUseLibrary()</A></CODE>
. Pass it the geode handle of the library.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
library.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_GeodeFreeQueue()">
 </A>
<H1 CLASS="refHeading">
GeodeFreeQueue()</H1>
<PRE CLASS="syntax">void	GeodeFreeQueue(
        QueueHandle qh);			/* handle of queue being freed */</PRE>
<P>
This routine frees an event queue allocated with <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeAllocQueue()">GeodeAllocQueue()</A></CODE>
. Any events still on the queue will be flushed as with <CODE>
<A HREF="../../CRef/Routines/R_33.htm#IX_GeodeFlushQueue()">GeodeFlushQueue()</A></CODE>
. You must pass the handle of the queue to be freed.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
geode.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_32.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">GenCopyChunk() ...</A> 
<!-- to next --> | <A HREF="R_34.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">GeodeGetAppObject() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
