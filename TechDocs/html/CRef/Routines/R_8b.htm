<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_8b.htm,v 1.2 97/06/25 18:42:39 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: SoundAllocMusic() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketRemoveLoadOnMsg() ...</A> 
<!-- to next --> | <A HREF="R_8c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundFreeMusic() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_SoundAllocMusic()">
 </A>
<H1 CLASS="refHeading">
SoundAllocMusic()</H1>
<PRE CLASS="syntax">word	SoundAllocMusic( /* Returns a SOUND_ERROR_ value */
        const word 		*song, 
        word 		voices,
        MemHandle		*control );</PRE>
<P>
This routine takes a pointer to a fixed buffer of music and allocates a <CODE>
MemHandle</CODE>
 which may then be passed to <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundPlayMusic()">SoundPlayMusic()</A></CODE>
 to play the music. The handle is returned in the address specified by <EM>
control</EM>
. <CODE>
SoundAllocMusic()</CODE>
 returns a non-zero value if it encounters an error trying to allocate the music block.</P>
<P>
If the music buffer is in a movable resource, you must initialize it using <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundInitMusic()">SoundInitMusic()</A></CODE>
 instead of <CODE>
SoundAllocMusic()</CODE>
. The <EM>
voices</EM>
 argument is the number of voices in the buffer. </P>
</DIV>
<DIV>
<A NAME="IX_SoundAllocMusicNote()">
 </A>
<H1 CLASS="refHeading">
SoundAllocMusicNote()</H1>
<PRE CLASS="syntax">word SoundAllocMusicNote( /* Returns a SOUND_ERROR_... value. */
        InstrumentPatch				instrument, 
        word				instTable,
        word 				frequency, 
        word 				volume,
        SoundStreamDeltaTimeType				DeltaType, 
        word 				duration,
        MemHandle				*control);</PRE>
<P>
This routine allocates a <CODE>
MemHandle</CODE>
 which may be passed to <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundPlayMusicNote()">SoundPlayMusicNote()</A></CODE>
. You must provide all information about the note: its frequency, volume, and duration. </P>
<P>
To play the note using a standard instrument, pass the instrument's value in <EM>
instrument</EM>
 and zero in <EM>
instTable</EM>
. To use a custom instrument, <EM>
instTable</EM>
:<EM>
instrument</EM>
 should be a pointer to the instrument. </P>
<P>
Specify the frequency in Hertz or use one of the constants such as MIDDLE_C_b to specify a standard note frequency. Volume ranges from zero to 0xffff--you may wish to use a constant value such as DYNAMIC_FFF if you want help trying to choose a loudness. The note's duration is determined by its delta type, one of SSDTT_MSEC, SSDTT_TICKS, and SSDTT_TEMPO. If you pass SSDTT_MSEC or SSDTT_TICKS, the duration is measured in milliseconds or ticks (each tick is one sixtieth of a second). If you pass SSDTT_TEMPO, you may set the size of your time unit when you call <CODE>
<A HREF="../../CRef/Routines/R_8c.htm#IX_SoundPlayMusicNote()">SoundPlayMusicNote()</A></CODE>
. The <EM>
duration</EM>
 determines how many time units the note should play. If the delta type is SSDTT_TICKS and <EM>
duration</EM>
 is 30, then the note will sound for half a second.</P>
<P>
The handle of the newly allocated note will be stored at the location specified by <EM>
control</EM>
. <CODE>
SoundAllocMusicNote()</CODE>
 returns non-zero if there is an error allocating the note.</P>
</DIV>
<DIV>
<A NAME="IX_SoundAllocMusicStream()">
 </A>
<H1 CLASS="refHeading">
SoundAllocMusicStream()</H1>
<PRE CLASS="syntax">word	SoundAllocMusicStream( /* Returns a SOUND_ERROR_... value */
        word 		streamType,
        word 		priority,
        word 		voices,
        word 		tempo,
        MemHandle		*control);</PRE>
<P>
This routine allocates a handle suitable for passing to <CODE>
<A HREF="../../CRef/Routines/R_8d.htm#IX_SoundPlayToMusicStream()">SoundPlayToMusicStream()</A></CODE>
. The handle will be returned at the address specified by control. <CODE>
SoundAllocMusicStream()</CODE>
 returns a non-zero value if there is an error allocating the handle.</P>
<P>
It is passed several arguments. The <CODE>
SoundStreamType</CODE>
 determines how much space to allocate for the stream and will determine how much data can be written to the stream at one time. If you pass SST_ONE_SHOT, it indicates that the stream will not be explicitly destroyed, and that your stream should destroy the stream when the song is done. You must specify how many voices there are in the music buffer. You must also pass a starting <EM>
tempo</EM>
 for the music stream.</P>
</DIV>
<DIV>
<A NAME="IX_SoundAllocSampleStream()">
 </A>
<H1 CLASS="refHeading">
SoundAllocSampleStream()</H1>
<PRE CLASS="syntax">word SoundAllocSampleStream( /* Returns a SOUND_ERROR_... value */
        MemHandle		*control);</PRE>
<P>
This routine allocates a sample stream handle. If the returned handle is <EM>
null</EM>
, the library was unavailable (i.e. some other thread has grabbed exclusive access).</P>
</DIV>
<DIV>
<A NAME="IX_SoundDisableSampleStream()">
 </A>
<H1 CLASS="refHeading">
SoundDisableSampleStream()</H1>
<PRE CLASS="syntax">void 	SoundDisableSampleStream(
        MemHandle 		mh);</PRE>
<P>
This routine disassociates the DAC player from the passed sample handle. Before you play more sounds using the handle, you will have to call <CODE>
SoundEnableSampleStream() </CODE>
again. </P>
</DIV>
<DIV>
<A NAME="IX_SoundEnableSampleStream()">
 </A>
<H1 CLASS="refHeading">
SoundEnableSampleStream()</H1>
<PRE CLASS="syntax">word	SoundEnableSampleStream( /* Returns a SOUND_ERROR_... value */
        MemHandle 		mh,
        SoundPriority		priority,
        word 		rate,
        word 		manufacturerID,
        DACSampleFormat		format);</PRE>
<P>
This routine associates a DAC player with the allocated sample handle. You must pass the sound handle, as returned by <CODE>
<A HREF="../../CRef/Routines/R_8b.htm#IX_SoundAllocSampleStream()">SoundAllocSampleStream()</A></CODE>
. You must also pass certain pieces of information about the sound you will be playing on the DAC device: the <EM>
priority</EM>
 with which to grab the DAC player (e.g. SP_STANDARD), the sampling rate, and the <EM>
format</EM>
 of the sample (as identified by a <EM>
manufacturerID</EM>
 and a <CODE>
DACSampleFormat</CODE>
 value).</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_8a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">SocketRemoveLoadOnMsg() ...</A> 
<!-- to next --> | <A HREF="R_8c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">SoundFreeMusic() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
