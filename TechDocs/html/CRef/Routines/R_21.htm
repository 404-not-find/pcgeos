<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_21.htm,v 1.2 97/06/25 18:14:21 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: ECVMCheckVMBlockHandle() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_20.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECCheckProcessHandle() ...</A> 
<!-- to next --> | <A HREF="R_22.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ElementArrayDelete() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_Virtual memory:handles, checking">
 </A>
<A NAME="IX_ECVMCheckVMBlockHandle()">
 </A>
<H1 CLASS="refHeading">
ECVMCheckVMBlockHandle()</H1>
<PRE CLASS="syntax">void	ECVMCheckVMBlockHandle(
        VMFileHandle file,
        VMBlockHandle block);</PRE>
<P>
This routine checks the validity of the given VM file and block handles. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ECVMCheckVMFile()">
 </A>
<H1 CLASS="refHeading">
ECVMCheckVMFile()</H1>
<PRE CLASS="syntax">void	ECVMCheckVMFile(
        VMFileHandle file);</PRE>
<P>
This routine checks the validity of the given VM file handle. If assertions fail, a fatal error will occur.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
ec.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayAddElement()">
 </A>
<H1 CLASS="refHeading">
ElementArrayAddElement ()</H1>
<PRE CLASS="syntax">word	ElementArrayAddElement(
        optr	arr,		/* Handle of element array */
        void *	element,		/* Element to add (if necessary) */
        dword	callBackData,		/* This is passed to the Callback routine */
        Boolean _pascal (*callback) (void *elementToAdd, 
			void *elementFromArray, 			dword valueForCallback));</PRE>
<P>
This routine is used to add elements to an array. It is passed the address of a potential element. It compares the element with each member of an element array. If there are no matches, it adds the element to the array and sets the reference count to one. If there is a match, it increments the reference count of the matching element in the array and returns; it does not add the new element. When you pass the address of an element, make sure you pass the address of the data portion of the element (not the reference-count header).</P>
<P>
You can pass a callback routine to <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddElement()">ElementArrayAddElement()</A></CODE>
. <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddElement()">ElementArrayAddElement()</A></CODE>
 will call the callback routine to compare elements and see if they match. The callback routine should be declared _pascal. <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddElement()">ElementArrayAddElement()</A></CODE>
 passes the callback routine the address of the element you passed it, as well as the address of the data-portion of the element in the array (the part after the <CODE>
RefElementHeader</CODE>
 structure). If the two elements match (by whatever criteria you use), return <CODE>
true</CODE>
; otherwise, return <CODE>
false</CODE>
. If you pass a null function pointer, the default comparison routine will be called, which checks to see if every data byte matches.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you know the element is already in the array, you can increment its reference count by calling <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddReference()">ElementArrayAddReference()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddReference()">ElementArrayAddReference()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayAddElementHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayAddElementHandles()</H1>
<PRE CLASS="syntax">word	ElementArrayAddElementHandles(
        MemHandle		mh,				/* Global handle of LMem heap */
        ChunkHandle		chunk				/* Chunk handle of element array */
        void *		element,				/* Element to add */
        dword		callBackData,		/* Passed to the Callback routine */
        Boolean _pascal (*callback) (void *elementToAdd, 
			void *elementFromArray, 			dword valueForCallback));</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddElement()">ElementArrayAddElement()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	If you know the element is already in the array, you can increment its reference count by calling <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddReference()">ElementArrayAddReference()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddReference()">ElementArrayAddReference()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayAddReference()">
 </A>
<H1 CLASS="refHeading">
ElementArrayAddReference()</H1>
<PRE CLASS="syntax">void	ElementArrayAddReference(
        optr	arr,				/* optr to element array */
        word	token);				/* Index number of element */</PRE>
<P>
This routine increments the reference count of a member of an element array. </P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling (unless it is fixed).</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddElement()">ElementArrayAddElement()</A></CODE>.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayAddReferenceHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayAddReferenceHandles()</H1>
<PRE CLASS="syntax">void	ElementArrayAddReferenceHandles(
        MemHandle		mh,				/* Handle of LMem heap's block */
        ChunkHandle		ch,				/* Handle of element array */
        word		token);				/* Index number of element */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayAddReference()">ElementArrayAddReference()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayCreate()">
 </A>
<H1 CLASS="refHeading">
ElementArrayCreate()</H1>
<PRE CLASS="syntax">ChunkHandle ElementArrayCreate(
        MemHandle		mh,				/* Handle of LMem heap's block */
        word		elementSize,				/* Size of each element, or zero
							 * for variable-sized */</PRE>
<PRE CLASS="syntax">        word		headerSize);				/* Header size (zero for default) */</PRE>
<P>
This routine creates an element array in the indicated LMem heap. It creates an <CODE>
ElementArrayHeader</CODE>
 structure at the head of the chunk. If you want to leave extra space before the start of the array, you can pass a larger header size; if you want to use the standard header, pass a header size of zero.</P>
<P>
You can specify the size of each element. Remember that the first three bytes of every element in an element array are the element's <CODE>
RefElementHeader</CODE>
; structure, which contains the reference count; leave room for this when you choose a size. For arrays with variable-sized elements, pass a size of zero.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Tips and Tricks:</STRONG>	You may want to declare a structure for array elements; the first component should be a <CODE>
RefElementHeader</CODE>
. You can pass the size of this structure to <CODE>
ElementArrayCreate()</CODE>
.</P>
<P>
If you want extra space after the <CODE>
ElementArrayHeader</CODE>
, you may want to create your own header structure, the first element of which is an <CODE>
ElementArrayHeader</CODE>
. You can pass the size of this header to <CODE>
ElementArrayCreate()</CODE>
, and access the data in your header via the structure.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Lock the block on the global heap before calling this routine (unless it is fixed). If you pass a header size, make sure it is larger than <CODE>
sizeof(ElementArrayHeader)</CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayCreateAt()">
 </A>
<H1 CLASS="refHeading">
ElementArrayCreateAt()</H1>
<PRE CLASS="syntax">ChunkHandle 	ElementArrayCreateAt(
        optr	arr,				/* optr of chunk for array */
        word	elementSize,				/* Size of each element, or zero
						 * for variable-sized */</PRE>
<PRE CLASS="syntax">        word	headerSize);				/* Header size (zero for default) */</PRE>
<P>
This routine is just like <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayCreate()">ElementArrayCreate()</A></CODE>
 above, except that the element array is created in a pre-existing chunk. The contents of that chunk will be overwritten.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the chunk isn't large enough, it will be resized. This will invalidate all pointers to chunks in that block.</P>
</DIV>
<DIV>
<A NAME="IX_ElementArrayCreateAtHandles()">
 </A>
<H1 CLASS="refHeading">
ElementArrayCreateAtHandles()</H1>
<PRE CLASS="syntax">ChunkHandle 	ElementArrayCreateAtHandles(
        MemHandle		mh,				/* Handle of LMem heap */
        ChunkHandle		ch				/* Create array in this chunk */
        word		elementSize,				/* Size of each element, or zero
						 * for variable-sized */</PRE>
<PRE CLASS="syntax">        word		headerSize);				/* Header size (zero for default) */</PRE>
<P>
This routine is exactly like <CODE>
<A HREF="../../CRef/Routines/R_21.htm#IX_ElementArrayCreateAt()">ElementArrayCreateAt()</A></CODE>
 above, except that the element array is specified by its global and chunk handles (instead of with an optr).</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
chunkarr.h</STRONG>
 </P>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	If the chunk isn't large enough, it will be resized. This will invalidate all pointers to chunks in that block.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_20.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ECCheckProcessHandle() ...</A> 
<!-- to next --> | <A HREF="R_22.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">ElementArrayDelete() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
