<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_FoamDBGetCurrent.htm,v 1.3 97/07/25 15:03:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:isv-feedback@geoworks.com">

<TITLE>GEOS C Routines: FoamDBGetCurrentRecordID() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBAdd.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> FoamDBAddFieldToRecord() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBResumeUpdates.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FoamDBResumeUpdates() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_FoamDBGetCurrentRecordID()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetCurrentRecordID()</H1>
<PRE CLASS="syntax">RecordID FoamDBGetCurrentRecordID(
	VMFileHandle 	file);
</PRE>
<P>
Returns the <CODE>RecordID</CODE> that would be set for the next record in the database <EM>file</EM>. 
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetFieldData()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetFieldData()</H1>
<PRE CLASS="syntax"> word FoamDBGetFieldData(
        VMFileHandle    file, 
        MemHandle       record, 
        FieldID             id, 
        char            *dest,      /* Buffer to store data */
        word            maxBytesToGet);      /* # bytes of data */
</PRE>
<P>
    Copies the data from the specified field of <EM>record</EM> into the
    buffer <EM>dest</EM>.  <EM>maxBytesToGet</EM> specifies the maximum
    number of bytes to copy into the buffer.
<P>
    Returns the number of bytes actually copied.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> The standard and most efficient way to store string data is without a null terminator, so when working with string data be sure to use the returned data size.  </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetFieldName()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetFieldName()</H1>
<PRE CLASS="syntax">Boolean FoamDBGetFieldName(
	VMFileHandle    file, 
	MemHandle       record, 
	FieldID            id, 
	TCHAR   *dest,     /* Buffer to put name (null-terminated) */
	word            maxBytesToGet);     /* Number of characters to get */
</PRE>
<P>
Copies the name of the field ID <EM>id</EM> into the buffer <EM>dest</EM>.
<P>
Returns zero if field exists, non-zero if it doesn't. 
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> Field names are null-terminated. </P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetFieldType()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetFieldType()</H1>
<PRE CLASS="syntax"> Boolean FoamDBGetFieldType(
        VMFileHandle    file, 
        MemHandle       record, 
        FieldID            id, 
        byte            *type);
</PRE>
<P>
Gets the type of field ID <EM>id</EM> and puts it into <EM>type</EM>. Note that this type is a <CODE>ContdbFieldType</CODE>.
<P>
Returns zero if field exists, non-zero if it does not.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetNextPrevRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetNextPrevRecord()</H1>
<PRE CLASS="syntax">dword FoamDBGetNextPrevRecord(
	VMFileHandle 	file, 
	RecordID 	record,
	word 		count);
</PRE>
<P>
This routine returns the index into the huge array of a record <EM>count</EM> records away from the record with the <CODE>RecordID</CODE> <EM>record</EM>. <EM>count</EM> can be negative or positive, so this routine lets you move forwards or backwards through the database. Should the requested record be invalid, either because there is no record with <CODE>RecordID</CODE> <EM>record</EM> or the requested index is beyond the bounds of the database, this routine will return <EM>record</EM>.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetNumVisibleRecords()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetNumVisibleRecords()</H1>
<PRE CLASS="syntax">dword	FoamDBGetNumVisibleRecords(
	VMFileHandle 	file);
</PRE>
<P>
This routine returns the number of visible records in the database <EM>file</EM>. This is often used when providing a list of records to a user.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetRecordFromID()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetRecordFromID()</H1>
<PRE CLASS="syntax">MemHandle FoamDBGetRecordFromID(
	VMFileHandle 	file, 
	RecordID 	id);
</PRE>
<P>
This routine looks for a record in the database with the ID <EM>id</EM>, copies it
 into memory, and returns the handle. If no record in the database had
the passed ID, this routine returns <CODE>NullHandle</CODE>.
 
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG>
The handle returned should be freed using 
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDeleteRecord()">FoamDBDeleteRecord()</A></CODE>, 
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDiscardRecord()">FoamDBDiscardRecord()</A></CODE>, or 
<CODE><A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord()</A></CODE>.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetRecordID()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetRecordID()</H1>
<PRE CLASS="syntax">RecordID FoamDBGetRecordID(
        MemHandle       record);
</PRE>
<P>
Given a record handle, returns the <CODE>RecordID</CODE> of the record.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBGetVisibleRecord()">
 </A>
<H1 CLASS="refHeading">
FoamDBGetVisibleRecord()</H1>
<PRE CLASS="syntax">MemHandle FoamDBGetVisibleRecord(
	VMFileHandle 	file, 
	dword 	index);
</PRE>
<P>
This routine finds the visible record with the index of <EM>index</EM>, copies the data into memory,
 and returns the handle of the block to the caller. If <EM>index</EM> is out of bounds, <CODE>
FoamDBGetVisibleRecord()</CODE>
returns NullHandle.

<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG>
The handle returned should be freed using <CODE>
<A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDeleteRecord()">FoamDBDeleteRecord()</A></CODE>, 
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBDiscardRecord()">FoamDBDiscardRecord()</A></CODE>, or <CODE>
<A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord().</A></CODE>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBLockedRecordEnum()">
 </A>
<H1 CLASS="refHeading">
FoamDBLockedRecordEnum()</H1>
<PRE CLASS="syntax">Boolean FoamDBLockedRecordEnum(
        MemHandle record, 
        void *enumData,
        PCB(Boolean, callback,  /* Non-zero to stop enum */
                (FieldHeader *field,  void *callbackEnumData)));      /* Callback routine */
</PRE>
<P>
This routine calls a callback routine for each field in a locked down record. The callback routine is used the same way as in 
<CODE><A HREF="../../CRef/Routines/R_FoamDBAdd.htm#IX_FoamDBFieldEnum()">FoamDBFieldEnum()</A></CODE>. 
It should be of the prototype
<PRE CLASS="syntax">
/*
 * Prototype of callback routine
 */
Boolean _pascal ExampleCallback (FieldHeader *field, void *callbackEnumData);
</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>
<DIV>
<A NAME="IX_FoamDBMapNameToToken()">
 </A>
<H1 CLASS="refHeading">
FoamDBMapNameToToken()</H1>
<PRE CLASS="syntax">Boolean FoamDBMapNameToToken(
	VMFileHandle 	file, 
	TCHAR 	*nameToLookFor, 
	word 	*token);
</PRE>
<P>
This routine looks up the field named <EM>nameToLookFor</EM> in the database <EM>file</EM> and checks to see if any fields have that name.
<P>
Returns <CODE>TRUE</CODE> (-1) if found, <CODE>FALSE</CODE> (0) if not found. <EM>token</EM> will be the index to the element within the <CODE>FieldName</CODE>
element array.  This is not something that will normally be used by an application.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBMapTokenToName()">
 </A>
<H1 CLASS="refHeading">
FoamDBMapTokenToName()</H1>
<PRE CLASS="syntax">Boolean FoamDBMapTokenToName(
	VMFileHandle file, 
	word nameToken, 
	word maxBytesToCopy, 
	TCHAR *dest);
</PRE>
<P>
This routine finds the field name associated with the token <EM>nameToken</EM> in the database file <EM>file</EM>, and copies at maximum <EM>maxBytesToCopy</EM> bytes of that name into the buffer <EM>dest</EM>. The routine returns non-zero if the token was out of bounds.
<P CLASS="refField"><STRONG>
<STRONG>Warning:</STRONG></STRONG> Field names are null-terminated.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>


<DIV>
<A NAME="IX_FoamDBOpen()">
 </A>
<H1 CLASS="refHeading">
FoamDBOpen()</H1>
<PRE CLASS="syntax">VMFileHandle  FoamDBOpen(
        char *filename,         
        word mapBlockSize, 
        word majorProtocol,    /* Existing file protocol must match major and minor protocols */
        word minorProtocol);
</PRE>
<P>
Opens an existing database file <EM>filename</EM>, or creates a new one if it does not
 currently exist. Returns the handle of the database file or NullHandle if the
 file could not be opened. <CODE>
<A HREF="../../CRef/Routines/R_97.htm#IX_ThreadGetError()">ThreadGetError()</A></CODE>
can be called to return the
 error type, which is the error returned from <CODE>
<A HREF="../../CRef/Routines/R_a3.htm#IX_VMOpen()">VMOpen()</A></CODE>, or -1 if there was
 a protocol mismatch.
 <P>
 <EM>mapBlockSize</EM> is used to specify the size of the map block for the database.
 The default (minimum) size is <CODE>sizeof(FoamDBMap)</CODE>, but more space can
 be allocated if the application needs to store extra data in the map block.
<P>
 When creating a new file, the new file will be assigned the protocol number
 passed in <EM>majorProtocol</EM> and <EM>minorProtocol</EM>. When opening an existing file,
 the protocol number of the file is compared against the protocol number
 passed in <EM>majorProtocol</EM> and <EM>minorProtocol</EM>, and if they do not match, an
 error of -1 is returned.
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBResortDatabase()">
 </A>
<H1 CLASS="refHeading">
FoamDBResortDatabase()</H1>
<PRE CLASS="syntax">void FoamDBResortDatabase(
	VMFileHandle file, 
	PCB(sword, callback,
		(RecordHeader *record1, RecordHeader *record2)));   /* Callback Routine */
</PRE>
<P>
This routine resorts the database <EM>file</EM> using the application-defined callback function to determine record order. As with the routine 
<CODE><A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSaveRecord()">FoamDBSaveRecord()</A></CODE>, 
the callback routine should return -1 if <EM>record1</EM> should come before <EM>record2</EM>, or +1 if <EM>record1</EM> should come after <EM>record2</EM> in the database. The prototype for the callback routine should look like:
<P>
<PRE class="syntax">
sword _pascal MyCallBackRoutine(RecordHeader *record1, RecordHeader *record2);
</PRE>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>

<DIV>
<A NAME="IX_FoamDBResumeNotifications()">
 </A>
<H1 CLASS="refHeading">
FoamDBResumeNotifications()</H1>
<PRE CLASS="syntax">void FoamDBResumeNotifications(
	VMFileHandle 	file);</PRE>
<P>
This routine resumes the generation of notifications for the database <EM>file</EM>. These notifications are <CODE>FoamDBActionType</CODE>s.
<P CLASS="refField"><STRONG>
See Also:</STRONG> <CODE><A HREF="../../CRef/Routines/R_FoamDBResumeUpdates.htm#IX_FoamDBSuspendNotifications()">FoamDBSuspendNotifications()</A></CODE>.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foamdb.h </STRONG>
</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_FoamDBAdd.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: "> FoamDBAddFieldToRecord() ...</A> 
<!-- to next --> | <A HREF="R_FoamDBResumeUpdates.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: "> FoamDBResumeUpdates() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
