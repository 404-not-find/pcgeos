<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Localization_10.htm,v 1.1 97/06/02 16:02:23 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> DOS Text &amp; Code Pages</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Localization</A>: 5.6 <A HREF="Localization_a.htm">Lexical Functions</A>: 
DOS Text &amp; Code Pages</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Localization_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Localization_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.5 Lexical Values</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>LocalDosToGeos(), LocalGeosToDos(), LocalDosToGeosChar(), LocalGeosToDosChar(), LocalCmpStringsDosToGeos(), LocalIsDosChar(), LocalCodePageToGeos(), LocalGeosToCodePage(), LocalCodePageToGeosChar(), LocalGeosToCodePageChar(), LocalGetCodePage(), LocalIsCodePageSupported()</PRE>
<P>
<A NAME="IX_ASCII text">
 </A>
<A NAME="IX_Strings:code pages">
 </A>
There are several functions which work with DOS-format text, converting it to and from GEOS format. Normally, converting DOS text files to GeoWrite documents is handled by Import/Export routines; for those occasions where your code needs to convert DOS text to GEOS format or vice versa, however, these functions should be sufficient. They are localized because DOS has its own version of localization which it implements as &quot;code pages.&quot; Each code page is a table of characters. Countries or regions with unusual characters have different code pages. If you haven't worked with code pages up to this point, you probably won't have to start now but can just rely on GEOS to use the native code page correctly. If your geode is going to allow computers from one country to communicate with those of another, you might need to use specialized functions.</P>
<P>
Assuming you want to use the code page native to the user's machine, you can use <A NAME="IX_LocalDosToGeos()">
 </A>
<CODE>
LocalDosToGeos()</CODE>
 and <A NAME="IX_LocalGeosToDos()">
 </A>
<CODE>
LocalGeosToDos()</CODE>
 to convert strings from one text format to the other. <A NAME="IX_LocalDosToGeosChar()">
 </A>
<CODE>
LocalDosToGeosChar()</CODE>
 and <CODE>
LocalGeosToDosChar()</CODE>
<A NAME="IX_LocalGeosToDosChar()">
 </A>
 work similarly, converting a single character.</P>
<P>
 <CODE>
LocalCmpStringsDosToGeos()</CODE>
<A NAME="IX_LocalCmpStringsDosToGeos()">
 </A>
 takes two strings, converts one or both of them to GEOS format, then compares them, returning the same values as the regular string comparing functions. Pass a <CODE>
LocalCmpStringsDosToGeosFlags</CODE>
<A NAME="IX_LocalCmpStringsDosToGeosFlags">
 </A>
 to specify which strings to convert before comparing.</P>
<P>
Each of these functions also takes a character as an argument. When a character in one format has no corresponding character in the format it's being converted to, the character argument will be substituted. At the same time a flag will be set to let your geode know that there were some characters that couldn't be converted nicely. <A NAME="IX_LocalIsDosChar()">
 </A>
<CODE>
LocalIsDosChar()</CODE>
 checks a GEOS character to see if it maps into a DOS character. The <A NAME="IX_MIN_MAP_CHAR">
 </A>
MIN_MAP_CHAR constant is the smallest value which may need to be mapped. If a character's value is below this constant, then it will be the same under any code page.</P>
<P>
If your geode is interested in which code page it's using, the <CODE>
LocalGetCodePage()</CODE>
<A NAME="IX_LocalGetCodePage()">
 </A>
 instruction will tell you what the default code page is. If you want to use a code page other than the native one, the <CODE>
LocalCodePageToGeos()</CODE>
<A NAME="IX_LocalCodePageToGeos()">
 </A>
, <A NAME="IX_LocalGeosToCodePage()">
 </A>
<CODE>
LocalGeosToCodePage()</CODE>
, <CODE>
LocalCodePageToGeosChar()</CODE>
<A NAME="IX_LocalCodePageToGeosChar()">
 </A>
, and <A NAME="IX_LocalGeosToCodePageChar()">
 </A>
<CODE>
LocalGeosToCodePageChar()</CODE>
 behave as their default code page equivalents, except that each takes a code page as an argument to be used in conversion. A number of support code page values are enumerated in the <A NAME="IX_DosCodePage">
 </A>
<CODE>
DosCodePage</CODE>
 type. To find out whether the user's environment supports a specific code page, call <CODE>
LocalIsCodePageSupported()</CODE>
<A NAME="IX_LocalIsCodePageSupported()">
 </A>
.</P>
<P>
&nbsp;</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Localization_a.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Localization_f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.5 Lexical Values</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
