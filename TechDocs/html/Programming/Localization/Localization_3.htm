<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Localization_3.htm,v 1.2 97/08/14 11:12:05 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Preparing for ResEdit</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Localization</A>: 3 
Preparing for ResEdit

</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Localization_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 How To Use Localization</A> 
<!-- to next --> | <A HREF="Localization_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 International Formats</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<CODE>
ResEdit</CODE>
 is a GEOS program which speeds geode translations. This section won't tell you how to use the <CODE>
ResEdit</CODE>
 tool but will explain how to write your code if you want <CODE>
ResEdit</CODE>
 to work with it correctly.

</P>
<P>
<A NAME="IX_Monikers:localizing">
 </A>
The important thing to remember is to put all text and bitmaps to be localized in localizable resources. <CODE>
ResEdit</CODE>
 looks for localizable objects only in non-code resources. The string or bitmap itself must be stored in a chunk, which you may insure by using either the <CODE>
@chunk</CODE>
 or <CODE>
@visMoniker</CODE>
 keywords. (If you're using assembly, you should use the <CODE>
LocalDefString</CODE>
 macro when setting up localizable strings.) Thus, your application icons are probably stored in the following way:</P>
<PRE>@start APPSCMONIKERRESOURCE, data
/* Application moniker: */
@visMoniker MyAppSCMoniker = { /* ... */}
@end APPSCMONIKERRESOURCE</PRE>
<P>
At first it might seem surprising that bitmaps should be localized, since pictures are supposed to be a sort of universal language. However, this attitude may seem less strange when you try to distribute software to a culture that finds pictures of yellow arrows offensive.</P>
<P>
Your application could keep its strings in a resource in the style illustrated in <A HREF="Localization_3.htm#60394"> Storing Strings in Localizable Resources</A>
.</P>
<P CLASS="figTitle">
Code Display 8-1 <A NAME="60394">
 </A>
Storing Strings in Localizable Resources</P>
<PRE>@start ErrorStrings, data;</PRE>
<PRE>@chunk char NoMonkeyError[] = 
	&quot;FTPOOMM failed: No monkey present. Acquire a monkey and try again.&quot;;</PRE>
<PRE>@chunk char NoPeanutError[] = 
	&quot;FTPOOMM failed: No peanuts present. Please insert peanuts and try again.&quot;;</PRE>
<PRE>@end ErrorStrings;</PRE>
<P>
When working with assembly language, this means that any object stored in a <CODE>
code</CODE>
 resource, <CODE>
idata</CODE>
, or <CODE>
udata</CODE>
 will be passed over in the search for localizable resources, and thus will not be localizable.</P>
<P>
<A NAME="IX_@localize[;localize]">
 </A>
When you know you are storing your strings such that they are localizable, you can provide information which will be visible to the translator when they use the <CODE>
ResEdit</CODE>
 tool. Use the <CODE>
@localize</CODE>
 keyword (<CODE>
localize</CODE>
 in assembly) to set up this help text. The <CODE>
@localize</CODE>
 directive should directly follow the chunk it applies to.</P>
<P>
Remember the <CODE>
@localize</CODE>
 syntax:</P>
<PRE>	 @localize { &lt;string&gt; &lt;min&gt;-&lt;max&gt; };
	 @localize { &lt;string&gt; &lt;length&gt; };
	 @localize { &lt;string&gt; };
	 @localize &lt;string&gt;; 
 @localize not;</PRE>
<P CLASS="figTitle">
Code Display 8-2 <A NAME="60394">
 </A>
Storing Strings in Localizable Resources</P>
<PRE>@start ErrorStrings, data</PRE>
<PRE>@chunk char NoMonkeyError[] = 
	&quot;FTPOOMM failed: No monkey present. Acquire a monkey and try again&quot;;</PRE>
<PRE>@localize &quot;The phrase 'acquire a monkey' appears in another string. Both should \
be translated in the same way.&quot;;</PRE>
<PRE>@end ErrorStrings</PRE>
<PRE>@object GenGlyphClass BossMon = {
	 GI_visMoniker = &quot;Boss&quot;;
	 @localize { &quot;This means hide the game because a boss is coming&quot; 3-6 }; } </PRE>
<P>
Another thing to keep in mind is that when strings are translated, they are likely to grow 33% to 50%. You have to remember to leave room for larger strings, both in memory and in UI. If you use the usual generic UI gadgetry, the geometry manager should stretch the various gadgets to fit any larger names. You should be careful that it doesn't have to stretch so far that components get lost off the edge of the screen. If you decide to get around this problem by constraining the size of some gadgetry, keep in mind that if you don't allow it to stretch, your new strings may not fit. </P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Localization_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 How To Use Localization</A> 
<!-- to next --> | <A HREF="Localization_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 International Formats</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
