<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: GOCLanguage_c.htm,v 1.1 97/06/02 16:01:23 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> GEOS Terminology</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">GEOS Programming</A>: 3.1 <A HREF="GOCLanguage_b.htm">The GEOS Object System</A>: 
GEOS Terminology</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GOCLanguage_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GOCLanguage_b.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 The GEOS Object System</A> 
<!-- to next --> | <A HREF="GOCLanguage_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Object Structures</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Though you should be familiar with general object-oriented programming terms, there are quite a few for which the meaning is slightly different in GEOS, and there are others which are entirely new to GEOS. This section is divided into four categories: General Terms, Class Terms, Object Terms, and Messaging Terms.</P>

<H2 CLASS="HeadingC">
General Terms</H2>
<DL>
<DT>
<STRONG>
chunk</STRONG>
</DT><DD>A chunk is a small section of memory located in a Local Memory Heap. Object instance data is stored in a chunk, one chunk per object. Local Memory and chunks are described fully in <A HREF="../../Memory/LMem/index.htm">the Local Memory chapter</A>.</DT><P CLASS="WorList">
<STRONG>
fptr</STRONG>
	<A NAME="IX_Pointers:far pointers">
 </A>
<A NAME="IX_fptr">
 </A>
An fptr is a &quot;far pointer&quot;--a 32-bit pointer to a specific location of memory. It is a standard C pointer.</P>
<DT>
<STRONG>
handle</STRONG>
	A handle is a 16-bit index into a Handle Table and is used to reference memory blocks. For more information, see <A HREF="../../Memory/Handles/index.htm">the Handles chapter</A>.</DT><P CLASS="WorList">
<STRONG>
object block<BR>
</STRONG>
An object block is a specific type of Local Memory block that contains object chunks.</P>
<DT>
<STRONG>
optr</STRONG>
	An optr is a unique identifier for an object and is therefore also referred to as an &quot;Object Pointer.&quot; An optr is used to locate and access any object in the system, and because it is made up of handles and chunk handles, it will always stay the same even when the object moves in memory.</DD>
<DT>
<STRONG>
thread</STRONG>
</DT><DD><A NAME="IX_Threads">
 </A>
A thread is a single executable entity that runs either procedural code or one or more objects. If a thread is &quot;event-driven,&quot; it executes code for a given set of objects, receiving messages and dispatching them to the proper objects.</DD>


</DL>
<H2 CLASS="HeadingC">
Class Terms</H2>
<DL>
<DT>
<STRONG>
class</STRONG>
</DT><DD>A class is the definition of a set of instance data structures and the methods that work on those structures. An object is called an &quot;instance&quot; of its class.</DD>
<DT>
<STRONG>
class tree</STRONG>
</DT><DD>A class tree represents the hierarchy of inheritance from superclass to subclass. If a message is not handled by a given class, it will be automatically passed up the class tree until it is handled or the root of the tree is reached, after which the message is discarded.</DD>
<DT>
<STRONG>
inheritance</STRONG>
</DT><DD>Inheritance is the term given to the way an object of a particular class has all the same instance variables and methods as an instance of the object's superclasses.</DD>
<DT>
<STRONG>
initialize</STRONG>
</DT><DD>Initialization of an object is when a master part (or master group) of the object's instance data is filled out. This occurs whenever a class in the master group not yet initialized in the object receives its first message.</DD>
<DT>
<STRONG>
master</STRONG>
</DT><DD>The term &quot;master&quot; is used in several cases, all related. A master class is generally considered the top class in a single class tree. Although the master class may have superclasses, it provides a conceptual break and creation of a new subtree.</DD>
<DT>
<STRONG>
master group</DT><DD>
</STRONG>
The section of an object's instance data belonging to a particular master class and all its subclasses is called a master group. A master group is initialized when the master class (or one of its subclasses) receives its first message.</DD>
<DT>
<STRONG>
resolve</STRONG>
</DT><DD><A NAME="IX_Variant classes:resolving">
 </A>
Resolution of a variant class occurs when the variant's superclass is determined. Each instance of a variant class must be resolved individually.</DD>
<DT>
<STRONG>
subclass</STRONG>
</DT><DD>The term &quot;subclass&quot; is used to show relationships between classes. A subclass is defined on another class, from which it inherits instance data and methods. This other class is known as a &quot;superclass,&quot; below.</DD>
<DT>
<STRONG>
superclass</STRONG>
</DT><DD>The term &quot;superclass&quot; is used to show relationships between classes. A superclass passes on its instance data and methods to all classes defined as subclasses of it.</DD>
<DT>
<STRONG>
variant</STRONG>
</DT><DD><A NAME="IX_Variant classes">
 </A>
A variant class may have different superclasses. However, an instance of a variant class may have only one superclass at any given moment. The use of variant classes can provide much the same functionality as the multiple inheritance found in some other object systems.</DD>


</DL>
<H2 CLASS="HeadingC">
Object Terms</H2>
<DL>
<DT>
<STRONG>
child</STRONG>
</DT><DD><A NAME="IX_Objects:child objects">
 </A>
A child object is one that sits below another object in an object tree. The terms child, parent, and sibling are used only to show relationships between objects.</DD>
<DT>
<STRONG>
composite</STRONG>
</DT><DD><A NAME="IX_Composite objects">
 </A>
A composite object is one that can have children. The composite has a &quot;composite link&quot; (an optr) to its first child and a &quot;sibling link&quot; to its next sibling. If it has no next sibling, the sibling link instead points to the object's parent object.</DD>
<DT>
<STRONG>
instance</STRONG>
</DT><DD>An instance is a particular manifestation of a class. This term is almost always interchangeable with &quot;object,&quot; though sometimes it specifically refers to the chunk containing the object's instance data rather than to the object as a whole.</DD>
<DT>
<STRONG>
link</STRONG>
</DT><DD>A link is typically an optr pointing to an object's next sibling in an object tree. It is also used more generally to refer to any optr linking two objects in an object tree (parent and child, or last sibling and parent).</DD>
<DT>
<STRONG>
object</STRONG>
</DT><DD>An object is a specific manifestation of a class. Typically, this term is interchangeable with &quot;instance&quot;; however, sometimes the term &quot;object&quot; refers to the combination of an object's methods and instance data whereas the term &quot;instance&quot; refers to just the object's instance data chunk.</DD>
<DT>
<STRONG>
object tree</STRONG>
</DT><DD>An object tree is a means of organizing objects into a hierarchy for display or organizational purposes. Do not confuse it with the &quot;class tree,&quot; the structure which represents class relationships. An object tree is made up of composite objects, each of which may have children or be the child of another object. The topmost object in the tree is called the &quot;root,&quot; and the bottommost objects are called the &quot;leaves&quot; or &quot;nodes.&quot; Non-composite objects may be placed in the tree as leaves but may not have children.</DD>
<DT>
<STRONG>
parent</STRONG>
</DT><DD>A parent object is one that has children in an object tree. The parent contains a composite link (an optr) to its first child and is pointed to by its last child.</DD>
<DT>
<STRONG>
state file</STRONG>
</DT><DD><A NAME="IX_State files">
 </A>
A state file is a Virtual Memory file used to store the state of objects. Typically, object blocks will be written to or extracted from the state file. Generic UI objects have this functionality built in automatically; other objects may manage their own state saving by managing the state file.</DD>


</DL>
<H2 CLASS="HeadingC">
Messaging Terms</H2>
<DL>
<DT>
<STRONG>
blocking</STRONG>
</DT><DD><A NAME="IX_Threads:blocking">
 </A>
A thread &quot;blocks&quot; when it must wait for resources or return values from messages sent to objects in another thread. Specifically, a thread blocks when one of its objects sends a message to another thread with the &quot;call&quot; command; if the &quot;send&quot; command is used, the thread will continue executing normally.</DD>
<DT>
<STRONG>
call</STRONG>
</DT><DD><A NAME="IX_Messages:calling">
 </A>
<A NAME="IX_@call[;call]">
 </A>
A message sent with the call command causes the calling thread to block until the message is handled by the recipient. If the recipient is in the calling thread, the code will be executed immediately.</DD>
<DT>
<STRONG>
dispatcher</STRONG>
</DT><DD><A NAME="IX_Messages:dispatcher">
 </A>
The GEOS dispatcher is internal to the kernel and passes messages on to their proper recipients. The dispatcher will dynamically locate the proper object and method and will invoke the method.</DD>
<DT>
<STRONG>
message</STRONG>
</DT><DD>A message is a directive, query, or other instruction sent from one object to another. Messages may take parameters and may return information.</DD>
<DT>
<STRONG>
method</STRONG>
</DT><DD>A method, also called a &quot;message handler,&quot; is the code invoked by a message. A method may do anything a normal function or procedure may do, including alter instance data. It is poor style and highly discouraged for one object's method to alter another object's instance data directly.</DD>
<DT>
<STRONG>
send</STRONG>
</DT><DD>A message sent with the send command will be placed in the recipient's event queue and will not cause the sender to block. Messages that return information or pass pointers should never be dispatched with the send command; use the call command in those cases.</DD>

</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="GOCLanguage_b.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="GOCLanguage_b.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 The GEOS Object System</A> 
<!-- to next --> | <A HREF="GOCLanguage_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Object Structures</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
