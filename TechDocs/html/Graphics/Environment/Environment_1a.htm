<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Environment_1a.htm,v 1.2 97/09/05 10:56:57 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Graphics Paths</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Graphics Environment</A>: 9 
<A NAME="69648">
 </A>
Graphics Paths</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Environment_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">8 Graphics Strings</A> 
<!-- to next --> | <A HREF="Environment_1b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">10 Working With Video Drivers</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>GrBeginPath(), GrEndPath(), GrCloseSubPath(), GrSetStrokePath(), GrGetPathBounds(), GrTestPointInPath(), GrGetPathPoints(), GrGetPathRegion(), GrGetPath(), GrSetPath(), GrGetPathBoundsDWord(), GrTestPath()</PRE>
<P>
<A NAME="IX_Paths (graphics)">
 </A>
A <EM>
path</EM>
 is a data structure which describes a route across a graphics space. Normally, applications use the path to specify an arbitrary screen area, defining a path that describe's the area's borders. Like a GString, a path is created by calling an appropriate initiation routine followed by a series of drawing commands. </P>
<P>
Paths don't have to be continuous. An unconnected path is said to be made up of more than one path element.
<IMG SRC="Environment_1a_simplePaths.gif">

</P>
<P>
Paths can be created by taking the intersection or union of two or more paths. In this case, the paths which are combined to make the resulting path are called <EM>
sub-paths</EM>
. 
<IMG SRC="Environment_1a_comboPaths.gif">

</P>
<P>
Paths are normally used to describe regions. However, regions are basically bitmaps, whereas paths are described in terms of the standard coordinate space. Thus, while regions don't scale well at all, it is possible to scale a path perfectly, then use the transformed path to more correctly compute the desired region. If this comparison sounds similar to that between bitmap- and outline- based fonts, it should. The &quot;outline&quot; of an outline-based font character is, in fact, a specialized form of path. </P>
<P>
Paths are also used to describe clipping regions. It is possible to combine any path with a window's clipping region to further restrict the clipping area. Thus it is possible to clip to an ellipse or to a Bézier curve, or even to use text as a clipping region.
<IMG SRC="Environment_1a_clipPaths.gif">

</P>
<P>
When constructing a path, you should keep in mind what it will be used for. If the path is to be filled using the winding rule, it is important that all edges go the correct direction. The winding rule algorithm assumes that the region is described by edges that go around it counterclockwise. Edges going clockwise describe hollows. The odd/even fill rule will work independently of path direction. See <A HREF="../../Graphics/Shapes/Shapes_d.htm#23242">the Drawing Shapes chapter</A> for more information about winding rules.</P><P>
Both the winding and odd/even fill rules demand closed path elements. If any path elements are not filled, the routine will treat them as if they were, connecting the ends of each open path element with a straight line.</P>
<P>
It is also possible to alter an existing path by combining it with another. The new path thus formed preserves both paths. If drawn, both paths will appear. If the path is filled or used as a clipping region, the geode can specify how the regions described by the paths should be combined, whether the intersection or union should be taken. Any number of paths can be combined in this manner.</P>
<P>
<CODE>
GrBeginPath()</CODE>
<A NAME="IX_GrBeginPath()">
 </A>
 signals that the geode is about to start describing a path. <A NAME="IX_GrEndPath()">
 </A>
All drawing commands directed at the GState will go into constructing the path until <CODE>
GrEndPath()</CODE>
 is called. <CODE>
GrBeginPath()</CODE>
 is also the routine used to combine a path with an existing path. Calling <CODE>
GrBeginPath()</CODE>
 when already constructing a path signals that further graphics commands should describe a new path to be combined with the existing one. The new path can either replace the existing one or combine to find the intersection or the union.</P>
<P>
<CODE>
GrCloseSubPath()</CODE>
<A NAME="IX_GrCloseSubPath()">
 </A>
 closes the current path element, adding a straight line segment from the current position to the starting point if necessary.</P>
<P>
 <A NAME="IX_GrGetPathBounds()">
 </A>
<CODE>
GrGetPathBounds()</CODE>
 returns the bounding coordinates of a rectangle that completely encloses the current path. <A NAME="IX_GrTestPointInPath()">
 </A>
<CODE>
GrTestPointInPath()</CODE>
 tests whether a passed point falls within the current path. <A NAME="IX_GrGetPathPoints()">
 </A>
<CODE>
GrGetPathPoints()</CODE>
 returns all the points along a path in the order visited. <A NAME="IX_GrGetPathRegion()">
 </A>
<CODE>
GrGetPathRegion()</CODE>
 returns the region defined by the path. <A NAME="IX_GrGetPathBoundsDWord()">
 </A>
<CODE>
GrGetPathBoundsDWord()</CODE>
 returns the bounds of the path and works in a 32-bit graphics space. If you just want to know whether or not a given path exists, then call <A NAME="IX_GrTestPath()">
 </A>
<CODE>
GrTestPath()</CODE>
, passing the <A NAME="IX_GetPathType">
 </A>
<CODE>
GetPathType</CODE>
 <A NAME="IX_GPT_CURRENT">
 </A>
GPT_CURRENT.</P>
<P>
<CODE>
GrSetStrokePath()</CODE>
<A NAME="IX_GrSetStrokePath()">
 </A>
 replaces the current path with the one that would result from &quot;stroking&quot; (drawing) the current path with the current line attributes. For example, if the current line style is a dotted line, the result will most likely be a set of many skinny regions. At this time, stroke paths cannot be used for clipping purposes. However, geodes can still draw and fill these paths.</P>
<P>
Paths can be drawn or filled using the <CODE>
GrDrawPath()</CODE>
 and <CODE>
GrFillPath()</CODE>
 commands. For more information about these routines, see <A HREF="../../Graphics/Shapes/Shapes_d.htm#23242">the Drawing Shapes chapter</A>.</P><P>
<CODE>
GrGetPath()</CODE>
<A NAME="IX_GrGetPath()">
 </A>
 retrieves the handle of a block containing the path's data. You may pass this handle to <CODE>
GrSetPath()</CODE>
 and thus copy a path to another GState.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Environment_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">8 Graphics Strings</A> 
<!-- to next --> | <A HREF="Environment_1b.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">10 Working With Video Drivers</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
