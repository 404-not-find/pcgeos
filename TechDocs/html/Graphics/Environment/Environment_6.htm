<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Environment_6.htm,v 1.1 97/06/02 15:09:05 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> How To Use Graphics</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Graphics Environment</A>: 4 
<A NAME="18088">
 </A>
How To Use Graphics</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Environment_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Graphics Architecture</A> 
<!-- to next --> | <A HREF="Environment_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5 Coordinate Space</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
When looking at the source code of sample applications, it's usually not too hard to pick out the commands that do the actual drawing. Commands with names like <CODE>
GrDraw...()</CODE>
 generally are self-explanatory. It's not so easy to pick out the commands that set up an area in which the drawing will take place. Part of the problem is that there are many ways to display graphics; each is well suited for different tasks. This section of the chapter provides some practical knowledge about the various ways to display graphics and which situations are appropriate for each.</P>
<P>
When possible, the best way to learn how to perform a graphics action is to look at code which performs a similar action. The sample program presented in <A HREF="../../Intro/HelloWorld/index.htm">the Hello World chapter</A> shows a simple graphics environment sufficient for many geodes. If you only need to change what is being displayed (as opposed to how it is displayed), you can work straight from the example, drawing different shapes using commands found in <A HREF="../../Graphics/Shapes/index.htm">the Drawing Shapes chapter</A>. Most basic graphics techniques are used in one sample program or another. By combining and adapting code from the sample programs, you can take care of most simple graphics needs.</P><P>
If you can't find a sample geode to work from, there are several points to consider when deciding what sort of graphics environment to set up.</P>
<UL>
<LI>
Sometimes the only graphics commands in a geode will be those used to define that geode's program icon. This is a common enough case that instructions for setting up your geode's icon are in the program topics section, <A HREF="../../Kernel/Geodes/Geodes_b.htm#46120"></A>
.</LI>
<LI>
Will existing generic UI gadgetry be sufficient for everything you want to display? If you're writing a utility, it might be. If you're writing an arcade game, it probably won't be.</LI>
<LI>
If your geode will be displaying graphics, will the user ever interact directly with the graphics? A graphing program might draw a graph based on data the user types in. Such a program could draw the graph but might not actually allow the user to interact with the graph. On the other hand, an art program will probably expect the user to interact with the graphics directly.</LI>
</UL>
<P>
Once you've figured out just what your geode's graphical needs are, you're ready to find out which pieces of graphics machinery are right for you.</P>
<P>
For custom graphics that will appear in a view, the content object of the GenView must be prepared to issue graphics commands. A common tactic is to create a subclass of <CODE>
VisContentClass</CODE>
 and let an object of this subclass act as the content for a view. The subclass would very likely have a specialized <CODE>
MSG_VIS_DRAW</CODE>
. The Process object is another popular choice for the view's output descriptor. In this case, the process must be prepared to intercept any messages the view is likely to send, with <CODE>
MSG_META_EXPOSED</CODE>
 and <CODE>
MSG_VIS_DRAW</CODE>
 of the most interest. Whichever object, process or content, is the content of a view can respond to <CODE>
MSG_META_EXPOSED</CODE>
 or <CODE>
MSG_VIS_DRAW</CODE>
 by calling kernel graphics routines. For more information on how to use these objects, see <A HREF="../../UI/GenView/index.htm">the Views chapter</A>.</P><P>
As you learn more advanced graphics concepts you may discover shortcuts. As you get deeper into graphics, you should keep a cardinal rule in mind. Any time the graphics space is obscured and then exposed, the geode must be able to draw correctly, no matter what changes have been made. If your geode only draws on a <CODE>
MSG_VIS_DRAW</CODE>
, it will automatically follow this rule. However, applications using shortcuts must take <CODE>
MSG_VIS_DRAW</CODE>
 into account; it may be sent at any time, and what it draws may wipe out what was there before. An arcade game that moves a spaceship by blitting a bitmap may be fast; however, be sure that the spaceship will be drawn to the right place if the game's window is obscured and then exposed. Don't worry if this sounds confusing now, but keep these words in mind as you read on.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Environment_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3 Graphics Architecture</A> 
<!-- to next --> | <A HREF="Environment_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5 Coordinate Space</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
