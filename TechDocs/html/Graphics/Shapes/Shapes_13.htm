<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Shapes_13.htm,v 1.2 97/09/05 11:48:22 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Mix Mode</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Drawing Graphics</A>: 3.3 <A HREF="Shapes_10.htm">Shape Attributes</A>: 
Mix Mode</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Shapes_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Shapes_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.2 Patterns and Hatching</A> 
<!-- to next --> | <A HREF="Shapes_14.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.4 Masks</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>GrGetMixMode(), GrSetMixMode()</PRE>
<P>
<A NAME="IX_MixMode">
 </A>
The kernel supports several mix modes. These modes control what will happen when something is drawn on top of something else. Normally when this occurs the new drawing covers up the old one. This is known as MM_COPY, since the new drawing is copied directly onto the graphics space.
<IMG SRC="Shapes_13_MixMode.gif">

</P>
<P>
<A NAME="IX_MM_&ldots;">
 </A>
There are many other mix modes available. </P>
<DL>
<DT>
MM_COPY</DT><DD>MM_COPY is the most common mix mode as well as the default. It draws the new drawing on top of the old as though the new drawing where on opaque paper--nothing of the old drawing shows through the region defined by the new drawing.</DD>
<DT>
MM_CLEAR</DT><DD>The region defined by the new drawing is blanked out. The color of the new drawing does not matter.</DD>
<DT>
MM_SET</DT><DD>The region defined by the new drawing is washed black. The color of the new drawing does not matter.</DD>
<DT>
MM_INVERT</DT><DD><A NAME="IX_Inverse drawing">
 </A>
The region defined by the new drawing is inverted. The color value displayed will be the logical inverse of the old color. The color of the new drawing does not matter.</DD>
<DT>
MM_NOP</DT><DD>The old drawing remains; nothing is drawn of the new drawing. Just about the only thing likely to change is that the pen position will be updated.</DD>
<DT>
MM_XOR</DT><DD>The color value to display is calculated by taking the bitwise XOR of the new and old colors. If painting in white, this acts as a sort of reverse paint. Note that this bitwise XOR<EM>
 </EM>
is applied to the index numbers of the colors, not to their RGB values.</DD>
<DT>
MM_OR</DT><DD>The color value to display is calculated by taking the bitwise OR of the new and old colors. On a monochrome display, this corresponds to drawing on a clear plastic overlay. The OR operation is applied to the indexes of the colors as opposed to their RGB values.</DD>
<DT>
MM_AND</DT><DD>The color value to display is calculated by taking the bitwise AND of the new and old colors. Where either drawing is blank, the result will be blank. On a monochrome display, this results in a &quot;clipping&quot; effect. The AND operation is applied to the indexes of the colors.<A NAME="marker=255785">
 </A>
</DD>
</DL>
<P>
<CODE>
GrGetMixMode()</CODE>
<A NAME="IX_GrGetMixMode()">
 </A>
 returns the current drawing mode.<A NAME="IX_GrSetMixMode()">
 </A>
 <CODE>
GrSetMixMode()</CODE>
 tells the system to use a new mode.</P>
<P>
Note that the drawing modes that use logical operators to compute the color have some nice effects when used with the default system colors. Due to the values of the indexes of the gray colors, MM_OR and MM_AND used with the gray colors can be thought of as lightening and darkening operations. For instance, AND-ing C_LIGHT_GRAY together with C_LIGHT_RED color results in the darker C_RED.</P>
<P>
When using drawing modes, it often pays to be aware of where a drawing command is drawing something as blank as opposed to where it isn't drawing at all. Filling a rectangular area of the screen with a black and white checkerboard pattern isn't exactly like drawing only the corresponding black squares. When using MM_COPY, the white areas of the checkerboard will overwrite whatever was underneath. When drawing a checkerboard with individual black squares, the background would show through no matter what background because there's nothing drawn between the squares.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Shapes_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Shapes_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.2 Patterns and Hatching</A> 
<!-- to next --> | <A HREF="Shapes_14.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.4 Masks</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
