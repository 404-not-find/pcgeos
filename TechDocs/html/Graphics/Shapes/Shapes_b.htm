<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Shapes_b.htm,v 1.2 97/09/05 11:49:33 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Bézier Curves and Splines</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Drawing Graphics</A>: 2.9 <A HREF="Shapes_2.htm">Shapes</A>: 
Bézier Curves and Splines</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Shapes_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Shapes_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.8 Polylines and Polygons</A> 
<!-- to next --> | <A HREF="Shapes_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.10 Drawing Bitmaps</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>GrDrawCurve(), GrDrawCurveTo(), GrDrawSpline(), GrDrawSplineTo(), GrDrawRelCurveTo()</PRE>
<P>
<A NAME="IX_Splines">
 </A>
<A NAME="IX_Be zier curves">
 </A>
Bézier curves are mathematical constructs which provide a cheap and easy way to define smooth curves in a manner that computers can understand. There are other ways to define curves to computers, but the Bézier was chosen for the GEOS kernel because it is used in many standard font description formats. Splines, as implemented in GEOS, are created by drawing curves in sequence.
<IMG SRC="Shapes_b_bCurves.gif">

</P>
<P>
Bézier curves are defined in terms of four points. Two of these points are the endpoints, known as anchor points. The other two points are known as control points, one associated with each anchor point. The curve extends from anchor point to anchor point. The line between an anchor point and its control point determines the slope, or derivative, of the curve at the anchor point. The further the control point is from the anchor point, the further the curve wants to go along the straight line before curving off towards the other anchor point. A control point at zero distance from its anchor point won't affect the curve; if both control points are at zero distance from their anchors, the result will be a straight line segment.</P>
<P>
<CODE>
GrDrawCurve()</CODE>
<A NAME="IX_GrDrawCurve()">
 </A>
 draws a Bézier curve. It takes four points as arguments, using the first and last as anchor points and the middle two as control points. <CODE>
GrDrawCurveTo()</CODE>
<A NAME="IX_GrDrawCurveTo()">
 </A>
 draws a curve but uses the current pen position as the first anchor point, setting the pen position to the second anchor point after drawing. </P>
<P>
It would be possible to draw splines by drawing a number of curves which had common endpoints, but the graphics system provides the <CODE>
GrDrawSpline()</CODE>
<A NAME="IX_GrDrawSpline()">
 </A>
 routine by which a spline with an arbitrary number of spline segments may be drawn with one call. <A NAME="IX_GrDrawSplineTo()">
 </A>
<CODE>
GrDrawSplineTo()</CODE>
 draws a spline with the current position as the first anchor point. The spline drawing routines require the application to set up an array of points. When calling <CODE>
GrDrawSpline()</CODE>
, these points should be in the order: anchor, control, control, anchor, control, control,..., anchor. The total number of points should be equal to 3n+1, where n is equal to the number of spline segments. Since <CODE>
GrDrawSplineTo()</CODE>
 uses the current position as the first anchor point, for this function the array should start with the first control point, and there should be 3n points passed.

</P>
<P>
For most programmers, that's probably enough to know. Those programmers who want to know more and don't mind a bit of math may feel free to continue this section.
<IMG SRC="Shapes_b_smoothCurve.gif">

</P>
<P>
A curve is defined in terms of four points. There is a formula to determine the coordinates of all points on a spline in terms of these four points. The formula uses two parameterized cubic equations. These equations determine the x and y coordinates of a point on the curve. By finding the points corresponding to various parameters, it is possible to approximate the spline as closely as necessary. See below for the equations.</P>
<P>
Splines may be created by drawing curves which share endpoints. Given an anchor point which two curves of a spline share, if the control point of one lies in the exact opposite direction of the other control point, the resulting spline will be smooth. If the control points are not only in the exact opposite directions but are also the same distance from the anchor point, then not only will the resulting spline be smooth, but its derivative will be smooth as well. </P>
<P>
We call smooth splines with smooth derivatives &quot;very smooth,&quot; and this condition is analogous to C'
 continuity in functions. Smooth splines with non-smooth derivatives are called &quot;semi smooth&quot;, analogous to G' continuity.
<IMG SRC="Shapes_b_bezeirEqns.gif">

</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Shapes_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Shapes_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.8 Polylines and Polygons</A> 
<!-- to next --> | <A HREF="Shapes_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.10 Drawing Bitmaps</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
