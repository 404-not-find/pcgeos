<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Overview_a.htm,v 1.2 97/09/05 12:04:47 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Classes and Inheritance</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Overview</A>: 3.2 <A HREF="Overview_8.htm">Object-Oriented Programming</A>: 
Classes and Inheritance</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Overview_8.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Overview_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Objects, Messages, and Methods</A> 
<!-- to next --> | <A HREF="Overview_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Multitasking and Multithreading</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
If every object had to be coded and debugged once for each time it was used, OOP would provide few benefits over standard procedural programming. Many objects share similar functionality and could easily make use of the same code over and over again. The concepts of <EM>
class</EM>
 and <EM>
inheritance</EM>
 allow objects with similar data structures and methods to use common code.</P>
<P>
The class is actually where the functionality of objects is defined. Every object is simply an <EM>
instance</EM>
 of a class, a manifestation of the instance data and methods defined for the class. For example, the Counter object of <A HREF="Overview_9.htm#38430"> Objects, Messages, and Methods</A>
 could be an instance of a class called <CODE>
CounterClass</CODE>
. Other counters sharing the same characteristics would also be instances of <CODE>
CounterClass</CODE>
, each having its own value in its own instance data field.</P>
<P>
A main benefit of the implementation of classes in GEOS is that objects can be created and destroyed during execution. Class definitions are stored separately from an individual instance's data; each instance knows where its class is located. Therefore, if two instances of a particular class exist, they both point to a single copy of the class definition. Since the code is stored in the class definition, the instances can use up only as much memory as their data fields require; each instance does not need to store its own method code.</P>
<P>
Another, more powerful, benefit is gained through the implementation of inheritance. In many cases, objects will be similar but not identical. This means that their classes are also similar but not identical. Inheritance overcomes this problem through the use of <EM>
superclasses</EM>
 and <EM>
subclasses</EM>
.</P>
<P>
A class provides a certain set of instance data and methods. A subclass inherits all the instance data structures and methods of its superclass, modifying or enhancing them to provide some different functionality.
<IMG SRC="Overview_a_classes.gif">

</P>
<P>
Take, for example, the class <CODE>
CounterClass</CODE>
. An instance of this class would provide a counter with certain features: The counter goes from zero to 100, it can be reset manually, it resets automatically when it reaches 100, and its value is retrieved with the use of a certain message. However, suppose we need a counter that does all those things <EM>
and</EM>
 allows the counter to be set to an arbitrary value with the use of a new message.</P>
<P>
Without inheritance, we would have to write all the code for <CODE>
CounterClass</CODE>
 over again as a new class, adding the new method. However, by creating a subclass of <CODE>
CounterClass</CODE>
 (let's call it <CODE>
CounterSetClass</CODE>
), we can inherit all the methods and data structures of <CODE>
CounterClass</CODE>
 without recoding them. Instead, we simply add the new message and the code for the new method. (It is also possible to modify inherited methods in a subclass.) This example of <CODE>
CounterClass</CODE>
 and <CODE>
CounterSetClass</CODE>
 is shown in the figure above.</P>
<P>
The inheritance implemented in GEOS is actually much more complex and sophisticated than this simple example shows. You may never need to know more than the above concepts, however.</P>
<P>
GEOS classes may be of a special type known as a <EM>
variant</EM>
. Variant classes do not initially know what their superclass is; instead, the superclass is determined by context for each instance of the variant class. This is a complicated topic that is discussed later in the documentation.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Overview_8.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Overview_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">3.1 Objects, Messages, and Methods</A> 
<!-- to next --> | <A HREF="Overview_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">4 Multitasking and Multithreading</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
