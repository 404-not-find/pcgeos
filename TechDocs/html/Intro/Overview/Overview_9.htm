<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: Overview_9.htm,v 1.2 97/09/05 12:04:31 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Objects, Messages, and Methods</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Overview</A>: 3.1 <A HREF="Overview_8.htm">Object-Oriented Programming</A>: 
<A NAME="38430">
 </A>
Objects, Messages, and Methods</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Overview_8.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Overview_8.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Object-Oriented Programming</A> 
<!-- to next --> | <A HREF="Overview_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Classes and Inheritance</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Procedural programming uses routines that act with globally-accessible or locally-defined data. Those routines must know about other routines in the program and must understand the data structure and organization used by other routines. Although some amount of isolation is applied to each routine, in essence they are all part of the greater whole of the program.</P>
<P>
Objects, in their simplest sense, consist of data (<EM>
instance data</EM>
) and routines (<EM>
methods</EM>
) that act on that data. Objects may interact with each other but may not alter other objects' instance data; this rule leads to strict modularity and cleaner program design. Objects do not need to understand how other objects work or how another object's instance data is arranged; instead, only the interface to the other object is required.</P>
<P>
Objects interact with each other via <EM>
messages</EM>
. Messages may indicate status, provide notification, pass data, or instruct the recipient to perform an action. When an object receives a message, it executes an appropriate <EM>
method</EM>
. A method may change the object's instance data, send messages to other objects, call kernel routines, or perform calculations--anything that can be done in a normal program procedure can be done in a method. (Note that occasionally the term <EM>
message handler</EM>
 is used for <EM>
method</EM>
.)</P>
<P>
Every object is represented by an <EM>
Object Pointer</EM>
 (optr), a data structure that uniquely identifies the object's location in the system. This data structure is a combination of two special memory handles that provide abstraction of the object's location--this allows the object to be moved in memory or swapped to disk, or even saved to and retrieved from files. Object pointers are used to identify objects in many situations, the most common being when a message is sent. The intended recipient of the message is indicated by its optr.</P>
<P>
Objects may interact with each other even if they are in different threads of execution. This is made possible by <EM>
message queues</EM>
 and the kernel's message <EM>
dispatcher</EM>
. When a message is sent, it is first passed to the kernel's dispatcher with the recipient's optr. The dispatcher then puts the message in the recipient object's message queue. If other messages have been sent to the recipient but not handled yet, then the message will wait in the queue until the others have been handled. Otherwise, the message will be handled immediately. (For timing-critical messages, the sender can indicate that the message must be handled immediately; this is important in a multithreaded system.)</P>
<P>
A thread is a single entity that runs a certain set of code and maintains a certain set of data. Only one thread may be using the processor at any given time; when a context switch occurs, one thread loses the processor and another takes it over. Each thread may run code for many objects, and an application can have several threads.</P>
<P>
As an example, the figure below shows the conceptual model of a Counter object. The Counter maintains a single instance data field, <CODE>
currentCount</CODE>
. It also has three predefined actions:</P>
<UL>
<LI>
<CODE>
CounterIncrementCount()<BR>
</CODE>
This method handles the message <CODE>
MSG_COUNTER_INCREMENT</CODE>
. Its purpose is to increment the <CODE>
currentCount</CODE>
 instance data field. When the count reaches the maximum (in this case, 100), then the counter resets itself.</LI>
<LI>
<CODE>
CounterReturnCur()<BR>
</CODE>
This method handles the message <EM>
MSG_COUNTER_RETURN_CUR</EM>
. It returns the value of the <CODE>
currentCount</CODE>
 instance data field.</LI>
<LI>
<CODE>
CounterReset()<BR>
</CODE>
This method handles the message <EM>
MSG_COUNTER_RESET</EM>
. It sets the <CODE>
currentCount</CODE>
 instance data field to zero.</LI>
</UL>
<P>
Messages can carry data (parameters) with them and can also have return values. For example, if the Counter in the example could be set to an arbitrary value (rather than reset to zero), the object sending the set message would have to indicate the value to be set. This would be passed in the same way as a normal C parameter.</P>
<P>
If a message is supposed to return a value to the sender, the sender must make sure the message is handled immediately. In this case, the message acts like a remote routine call, blocking the thread of the caller until the message has been handled and the value returned.
<IMG SRC="Overview_9_object.gif">

</P>
<P>
Objects can also share data when necessary. Rather than share instance data, however, each object can have an instance data field containing the <EM>
handle</EM>
 of a sharable block of memory holding the subject data. Then each object could access the shared block through the normal memory manager. Handles are offsets into a table maintained by the kernel; this table contains pointers to the actual memory. This abstraction of the pointer allows the kernel to move the memory block around without forcing everything else to update their pointers. Handles can also be passed as message parameters, allowing large blocks of data to be passed along from object to object.
<IMG SRC="Overview_9_messages.gif">

</P>
<P>
The figure above shows an example of two objects interacting via messages. In this example, the Requestor object requires the Calculator object to perform a calculation given two numbers. However, since the timing of the calculation is not critical, the result is not returned but is instead sent back by the Calculator object in a subsequent message. This allows the Requestor object to continue with other tasks until the result is ready. (Note that if the Calculator object could be used by more than one requestor, it would have to also be passed the requestor's object pointer. Otherwise, it would have no idea where to send the return message. This example assumes the Calculator object is used by only the one requestor and inherently knows the requestor's optr.)</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="Overview_8.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="Overview_8.htm"><IMG SRC="../../docImages/prevUp.gif" BORDER="0" ALT="Prev: ">3 Object-Oriented Programming</A> 
<!-- to next --> | <A HREF="Overview_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">3.2 Classes and Inheritance</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
