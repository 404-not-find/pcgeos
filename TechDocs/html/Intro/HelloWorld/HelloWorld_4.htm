<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: HelloWorld_4.htm,v 1.2 97/09/05 11:57:45 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Strategy and Internals</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Hello World</A>: 2.2 <A HREF="HelloWorld_2.htm">Hello World</A>: 
Strategy and Internals</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 Features of Hello World</A> 
<!-- to next --> | <A HREF="HelloWorld_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 Naming Conventions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The code for Hello World, as you will see, is quite simple. It consists mainly of User Interface gadgetry and uses just a few message handlers.</P>
<P>
<A NAME="IX_Process object">
 </A>
<A NAME="IX_GenProcessClass:overview">
 </A>
The main component of the application is the Process object, an instance of <CODE>
HelloProcessClass</CODE>
 (a subclass of <CODE>
GenProcessClass</CODE>
). This object makes all drawing and color changes by handling messages sent from the window manager and the triggers in the dialog box. The Process object basically manages the application, keeping track of the relevant data and interacting with the UI gadgetry. </P>
<P>
The Process object is event-driven, meaning it has no <CODE>
main()</CODE>
 routine run when the program is launched. Instead, the program does nothing until an event occurs (such as the view window sending <CODE>
MSG_META_EXPOSED</CODE>
 when first opened). When the event (message) is received, the Process object responds to it and then waits until the next event occurs. Note, however, that the vast majority of events a Process object will receive and handle are not generated by your code but by the kernel and the UI.
<IMG SRC="HelloWorld_4_structure.gif">

</P>

<H2 CLASS="HeadingC">
<A NAME="22253">
 </A>
The Menu and Dialog Box</H2>
<P>
<A NAME="IX_Dialog boxes">
 </A>
<A NAME="IX_Menus">
 </A>
Both the menu and the dialog box, once defined in the source code as objects, are implemented automatically by the system software. The application does not have to draw or otherwise manage these objects; they will interact directly with the UI to do the proper thing.</P>
<P>
The triggers within the dialog, however, request actions that must be carried out by the application (changing the color to blue and gold, respectively). Although the application does not have to instantiate, draw, or otherwise modify the trigger objects, it must handle messages sent out by them when they are pressed by the user. This is discussed below, under &quot;Changing the Text Color.&quot;</P>


<H2 CLASS="HeadingC">
<A NAME="62864">
 </A>
The Scrolling View and Drawing the Text</H2>
<P>
Almost everything is handled automatically by the User Interface for the Hello World application. This includes implementation of the system menus for the primary window and the scrolling functionality of the scrollable View window.</P>
<P>
<A NAME="IX_Views">
 </A>
<A NAME="IX_GenViewClass:overview">
 </A>
The view object (of <CODE>
GenViewClass</CODE>
) is powerful and provides a lot of what most applications need. It automatically handles all window resizes and scrolls, and it will cause proper redrawing when another object (such as a pinned menu) is moved across it. The only thing it does not do is actually draw the application's images.</P>
<P>
When the view senses that some portion of its window has become invalid (through scrolling or when the view window is first opened, for example), it will send a <CODE>
MSG_META_EXPOSED</CODE>
 message to the Hello World application's Process object. The Process object will respond by drawing the text appropriately--it does not, however, have to worry about what portion of the text is visible or what portion of the screen the view window occupies. The view will automatically clip the text properly and display it within the window's bounds.</P>


<H2 CLASS="HeadingC">
Changing the Text Color</H2>
<P>
In all, the Process object can handle six events specific to this application: <CODE>
MSG_META_CONTENT_VIEW_WIN_OPENED</CODE>
 (sent by the view when it first creates its window), <CODE>
MSG_META_CONTENT_VIEW_WIN_CLOSED</CODE>
 (sent by the view when its window is being destroyed), <CODE>
MSG_META_EXPOSED</CODE>
 (described above), <CODE>
MSG_HELLO_CHANGE_TO_BLUE</CODE>
 (sent by the Blue trigger), <CODE>
MSG_HELLO_CHANGE_TO_GOLD</CODE>
 (sent by the Gold trigger), and <CODE>
MSG_HELLO_REDRAW_DOCUMENT</CODE>
 (sent by the Process object to itself).</P>
<P>
The Process object maintains two global variables: <CODE>
helloTextColor</CODE>
 contains the current color of the text, and <CODE>
winHan</CODE>
 contains the window handle of the view's window. When it draws the text, the Process object checks <CODE>
helloTextColor</CODE>
 before drawing. Therefore, the handlers for the change-color messages change the value of <CODE>
helloTextColor</CODE>
.</P>
<P>
However, changing the text's color is not quite that easy. Because the view window does not have any way of knowing that the Process object has changed the text, the application must inform the UI of the change. Otherwise, the change will be made in the document but will not appear on the screen until the view window is moved or resized by the user.</P>
<P>
Therefore, we must force a window invalidation when we change the color. This will cause the View window to generate a new <CODE>
MSG_META_EXPOSED</CODE>
 that will force the redrawing of the text in the new color. The window handle is cached in <CODE>
winHan</CODE>
 for just this purpose; when the text color changes, we must invalidate the window so the UI will redraw its contents. We invalidate the window by calling the special graphics routine <CODE>
GrInvalRect()</CODE>
, passing the window's handle. We get the window handle when the view first creates the window--it will send out a <CODE>
MSG_META_CONTENT_VIEW_WIN_OPENED</CODE>
. When the window closes, the view will send <CODE>
MSG_META_CONTENT_VIEW_WIN_CLOSED</CODE>
 in which Hello World destroys the cached window handle.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_3.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.1 Features of Hello World</A> 
<!-- to next --> | <A HREF="HelloWorld_5.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">2.3 Naming Conventions</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
