<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: HelloWorld_5.htm,v 1.1 97/06/02 15:18:28 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Naming Conventions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Hello World</A>: 2.3 <A HREF="HelloWorld_2.htm">Hello World</A>: 
Naming Conventions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Strategy and Internals</A> 
<!-- to next --> | <A HREF="HelloWorld_6.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Geode Parameters File</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_Naming conventions">
 </A>
You might have noticed some of the names of variables, messages, and routines and seen a pattern of naming. Geoworks has developed a few naming conventions for various different items in the system. You don't have to follow these conventions, of course; it may help, however, if you keep to our conventions until you're familiar with most of the system. Some of the items that have special naming conventions are</P>
<DL>
<DT>
<STRONG>
Variables</STRONG>
</DT><DD><A NAME="IX_Variables:naming conventions">
 </A>
Typically, variables begin with a lower case letter and have each subword in the name capitalized. The variable <CODE>
helloTextColor</CODE>
 is a good example. Variables with just one word in the name are all lower case.</DD>
<DT>
<STRONG>
Classes</STRONG>
</DT><DD><A NAME="IX_Classes:naming conventions">
 </A>
Class names should always have the suffix <CODE>
Class</CODE>
. Typically, the first portion of a class' name will describe the particular application, library, or module it is associated with. The second portion of the name should reflect the class' superclass. Each portion of the class name should be capitalized. Thus, <CODE>
HelloProcessClass</CODE>
 conforms because it begins with the application's name (Hello), then has the superclass' name (Process), and finally has the suffix Class.</DD>
<DT>
<STRONG>
Constants</STRONG>
</DT><DD><A NAME="IX_Constants:naming conventions">
 </A>
Constants are typically all upper case with underscores to delineate the portions of the name. C_BLUE is a good example; it is a set value that does not change. The structure of the name should reflect the use of the constant. (In this case, the enumerated type <CODE>
Color</CODE>
 is reflected in the C_ portion of the constant's name.)</DD>
<DT>
<STRONG>
Routines</STRONG>
</DT><DD><A NAME="IX_Routines:naming conventions">
 </A>
Kernel and UI routines, as well as method names, should have each portion capitalized. They should begin with some abbreviation relating to the module they belong to. For example, <CODE>
GrCreateState()</CODE>
 is a graphics system routine, as is <CODE>
GrInvalRect()</CODE>
.</DD>
<DT>
<STRONG>
Messages</STRONG>
</DT><DD><A NAME="IX_Messages:naming conventions">
 </A>
Message names should be all uppercase and begin with MSG_. Each portion of the name should be separated with underscores, and the first portion after <CODE>
MSG_</CODE>
 should reflect the class in which the message is defined. For example, <CODE>
MSG_HELLO_CHANGE_TO_BLUE</CODE>
 follows all these conventions.</DD>
<DT>
<STRONG>
Objects</STRONG>
</DT><DD><A NAME="IX_Objects:naming conventions">
 </A>
Object names are typically capitalized in the same manner as routines and classes. The object's name should reflect both the object's module and its class (or its function if not its class). HelloView is a good example.</DD>
<DT>
<STRONG>
Instance Data</DT><DD>
</STRONG>
<A NAME="IX_Instance data:naming conventions">
 </A>
Instance data fields typically have as their first portion an all-caps acronym for the class name with an I tacked on for &quot;instance.&quot; The second portion is like a variable name, and the two portions are separated by an underscore. For example, <CODE>
GI_visMoniker</CODE>
 is a field of <CODE>
GenClass</CODE>
 (hence the <CODE>
GI_</CODE>
), and <CODE>
visMoniker</CODE>
 is the variable name of the field.</DD>
</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_2.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2.2 Strategy and Internals</A> 
<!-- to next --> | <A HREF="HelloWorld_6.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">3 Geode Parameters File</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
