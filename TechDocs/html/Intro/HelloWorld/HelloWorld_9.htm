<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: HelloWorld_9.htm,v 1.1 97/06/02 15:18:59 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> The Process Object</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Hello World</A>: 4.2 <A HREF="HelloWorld_7.htm">The Source File and Source Code</A>: 
<A NAME="89272">
 </A>
The Process Object</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_7.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Inclusions and Global Variables</A> 
<!-- to next --> | <A HREF="HelloWorld_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 UI Objects</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
Every GEOS application has an object called the Process object. This object is run by the application's primary thread and is an instance of a subclass of <CODE>
GenProcessClass</CODE>
. Because the Process is an event-driven object, there is no <CODE>
main()</CODE>
 routine that is executed when the program is launched. Instead, the object will wait until it receives messages (events), at which time it will execute the proper methods.</P>
<P>
Applications can be of two basic models: The procedural model puts the entire functionality of the application within the Process object, not using any other objects in the application's thread (UI objects are run by the UI thread). All messages sent to the application are handled by the Process object, and most OOP issues can be avoided. The object-oriented model allows for other objects to be run by the application's primary thread; each of these objects will have its own instance data and be located in an object block (a resource) associated with its own message queue.</P>
<P>
There is no command or directive that determines which model is used--the distinction is inherent within the format of message handlers and therefore can be virtually ignored. Hello World, for example, is simple enough to use the procedural model, handling all functionality with the Process object.</P>
<P>
The Process object of Hello World is shown in <A HREF="HelloWorld_9.htm#81558"> Hello World's Process Object</A>
.</P>
<P CLASS="figTitle">
Code Display 2-3 <A NAME="81558">
 </A>
Hello World's Process Object</P>
<P CLASS="figCaption">
This code display is part of hello3.goc and follows the previous display directly. */</P>
<PRE>/***********************************************************************
 *			Class &amp; Method Definitions
 * This section contains the definition of the application's Process
 * class and its methods. Other classes can also be defined here,
 * along with the message each handles.
 ***********************************************************************/</PRE>
<PRE>/*
 * Here we define &quot;HelloProcessClass&quot; as a subclass of the system-provided
 * &quot;GenProcessClass&quot;. As this application is launched, an instance of this class
 * will be created automatically to handle application-related events (messages).
 * The application thread will be responsible for running this object,
 * meaning that whenever this object handles a message, it will be executing
 * in the application's thread.
 */</PRE>
<PRE>/* You will find no object in this file declared to be of this class. Instead,
 * this class is bound to the application thread in hello3.gp.</PRE>
<PRE>@class HelloProcessClass, GenProcessClass;</PRE>
<PRE>/* The messages HelloProcessClass objects can handle that are not 
 * system-defined are enumerated here. Each of these messages is sent 
 * by one of the triggers in the dialog box. This is where class- 
 * specific messages for this application (not system-defined messages)
 * are defined. */</PRE>
<PRE>@message void MSG_HELLO_CHANGE_TO_BLUE(); /* sent by Blue trigger */
@message void MSG_HELLO_CHANGE_TO_GOLD(); /* sent by Gold trigger */
@message void MSG_HELLO_REDRAW_DOCUMENT(); /* sent by Process to itself */</PRE>
<PRE>@endc /* signifies end of class definition */</PRE>
<PRE>/* Because this class definition must be stored in memory at runtime,
 * we must declare it here along with a flag indicating how it should
 * be loaded. The &quot;neverSaved&quot; flag is used because Process classes
 * are never saved to state files and therefore no relocation tables
 * need be built. */
@classdecl HelloProcessClass, neverSaved;</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="HelloWorld_7.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="HelloWorld_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Inclusions and Global Variables</A> 
<!-- to next --> | <A HREF="HelloWorld_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 UI Objects</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
