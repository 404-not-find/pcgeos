<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TTCL_6.htm,v 1.1 97/06/27 16:01:52 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Expressions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Tool Command Language</A>: 4.2 <A HREF="TTCL_4.htm">Syntax and Structure</A>: 
Expressions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTCL_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTCL_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Basic Command Syntax</A> 
<!-- to next --> | <A HREF="TTCL_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 Lists</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The second major interpretation applied to strings in Tcl is as <EM>
expressions</EM>
. Several commands, such as <CODE>
expr</CODE>
, <CODE>
for</CODE>
, and <CODE>
if</CODE>
, treat some of their arguments as expressions and call the Tcl expression processor (Tcl_Expr) to evaluate them. A Tcl expression has C-like syntax and evaluates to an integer result. Expressions may contain integer values, variable names in $ notation (the variables' values must be integer strings), commands (embedded in brackets) that produce integer string results, parentheses for grouping, and operators. Numeric values, whether they are passed directly or through variable or command substitution, may be specified either in decimal (the normal case), in octal (if the first character of the value of the first character is 0 (zero)), or in hexadecimal (if the first two characters of the value are 0x). The valid operators are listed below, grouped in decreasing order of precedence.<BR>
<IMG SRC="ValidOperators.gif">

</P>
<P>
See a C manual for more details on the results produced by each operator. All of the binary operators group left to right within the same precedence level. for example, the expression:</P>
<PRE>(4*2)&lt;7</PRE>
<P>
evaluates to zero. Evaluating the expression string:</P>
<PRE>($a+3)&lt;[var b]</PRE>
<P>
will cause the values of the variables<CODE>
 a</CODE>
 and <CODE>
b</CODE>
 to be examined; the result will be 1 if<CODE>
 b</CODE>
 is greater than <CODE>
a</CODE>
 by at least 3; otherwise the result will be 0.</P>
<P>
In general it is safest to enclose an expression in braces when entering it in a command; otherwise, if the expression contains any white space then the Tcl interpreter will split it among several arguments. For example, the command:</P>
<PRE>expr $a + $b</PRE>
<P>
results in three arguments being passed to <CODE>
expr</CODE>
: <CODE>
$a</CODE>
, <CODE>
+</CODE>
, and <CODE>
$b</CODE>
. In addition, if the expression is not in braces then the Tcl interpreter will perform variable and command substitution immediately (it will happen in the command parser rather than in the expression parser). In many cases the expression is being passed to a command that will evaluate the expression later (or even many times if, for example, the expression is to be used to decide when to exit a loop). usually the desired goal is to re-do the variable or command substitutions each time the expression is evaluated, rather than once and for all at the beginning. For an example of a mistake, the command:</P>
<PRE>for {var i 1} $i&lt;=10 {var i [expr $i+1]} {body...}</PRE>
<P>
is probably intended to iterate over all values of <CODE>
i</CODE>
 from 1 to 10. After each iteration of the body of the loop, for will pass its second argument to the expression evaluator to see whether or not to continue processing. Unfortunately, in this case the value of <CODE>
i</CODE>
 in the second argument will be substituted once and for all when the for command is parsed. If <CODE>
i</CODE>
 was 0 before the for command was invoked then <CODE>
for</CODE>
's second argument will be <CODE>
0&lt;=10</CODE>
 which will always evaluate to 1, even though<CODE>
 i</CODE>
's value eventually becomes greater than 10. In the above case the loop will never terminate. By placing the expression in braces, the substitution of <CODE>
i</CODE>
's value will be delayed; it will be re-done each time the expression is evaluated, which is probably the desired result:</P>
<PRE>for {var i 1} {$i&lt;=10} {var i [expr $i+1]} {body...}</PRE>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTCL_4.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTCL_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">4.1 Basic Command Syntax</A> 
<!-- to next --> | <A HREF="TTCL_7.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4.3 Lists</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
