<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_15.htm,v 1.1 97/06/27 15:59:41 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: imem ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_14.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">hwalk ...</A> 
<!-- to next --> | <A HREF="SR_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">intr ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Memory:examining with Swat">
 </A>
<A NAME="IX_imem Swat command:command reference">
 </A>
imem</H1>

<PRE CLASS="syntax">imem [&lt;address&gt;] [&lt;mode&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;imem&quot;</DT><DD>enter imem mode at DS:SI</DD>
<DT>
&quot;imem ds:di&quot;</DT><DD>
enter imem mode at DS:SI</DD>
</DL>
<P>
Examine memory and modify memory interactively.</P>

<UL>
<LI>
The address argument is the address to examine. If not specified, the address after the last examined memory location is used. If no address has been examined then DS:SI is used for the address.</LI>
<LI>
The mode argument determines how the memory is displayed and modified. Each of the four modes display the memory in various appropriate formats. The modes are:</LI>


</UL>
<UL>
<LI>
The default mode is swat's best guess of what type of object is at the address.</LI>
<LI>
imem lets you conveniently examine memory at different locations and assign it different values. imem displays the memory at the current address according to the mode. From there you can move to another memory address or you can assign the memory a value.</LI>
<LI>
You may choose from the following single-character commands:</LI>
<DL>
<DT>
<STRONG>
b</STRONG>
, <STRONG>
w</STRONG>
, <STRONG>
d</STRONG>
,<STRONG>
i</STRONG>
</DT><DD>Sets the mode to the given one and redisplays the data.</DD>
<DT>
<STRONG>
n</STRONG>
, <STRONG>
j</STRONG>
, &lt;<STRONG>
Return</STRONG>
&gt;</DT><DD>
Advances to the next data item. The memory address advances by the size of the mode.</DD>
<DT>
<STRONG>
p</STRONG>
, <STRONG>
k</STRONG>
</DT><DD>Returns to the preceding data item. The memory address decreases by the size of the mode. When displaying instructions, a heuristic is applied to locate the preceding instruction. If it chooses the wrong one, use the `P' command to make it search again.</DD>
<DT>
&lt;<STRONG>
space</STRONG>
&gt;</DT><DD>Clears the data display and allows you to enter a new value appropriate to the current display mode. The &quot;assign&quot; command is used to perform the assignment, so the same rules apply to it, with the exception of `- and &quot;-quoted strings. A string with `s around it (`hi mom') has its characters poked into memory starting at the current address. A string with &quot;s around it (&quot;swat.exe&quot;) likewise has its characters poked into memory, with the addition of a null byte at the end. This command is not valid in instruction mode.</DD>
<DT>
<STRONG>
q</STRONG>
</DT><DD>quit imem and return to command level. The last address accessed is recorded for use by the other memory-access commands.</DD>
<DT>
<STRONG>
^D</STRONG>
</DT><DD>Display a &quot;page&quot; of successive memory elements in the current mode.</DD>
<DT>
<STRONG>
^U</STRONG>
</DT><DD>Display a &quot;page&quot; of preceding memory elements in the current mode.</DD>
<DT>
<STRONG>
h</STRONG>
, <STRONG>
?</STRONG>
</DT><DD>This help list.</DD>
<DT>
 For ^D and ^U, the size of a &quot;page&quot; is kept in the global variable <CODE>
imemPageLen</CODE>
, which defaults to 10.</DT>
</DL>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_5.htm#IX_bytes Swat command:command reference">bytes</A>,
<A HREF="../../Tools/SwatRef/SR_30.htm#IX_words Swat command:command reference">words</A>,
<A HREF="../../Tools/SwatRef/SR_b.htm#IX_dwords Swat command:command reference">dwords</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>.



<H1 CLASS="refHeading">
<A NAME="IX_imemPageLen Swat variable">
 </A>
imemPageLen</H1>

<PRE CLASS="syntax">var imemPageLen [&lt;numlines&gt;]</PRE>
<P>
Contains the number of elements to display when imem is given the ^D or ^U command.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Mouse:object under, finding with Swat">
 </A>
<A NAME="IX_impliedgrab Swat command">
 </A>
impliedgrab</H1>

<PRE CLASS="syntax">impliedgrab</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;gentree [impliedgrab]&quot;</DT><DD>
print the generic tree under the mouse</DD>
</DL>
<P>
Print the address of the current implied grab, which is the screen object grabbing the mouse.</P>

<UL>
<LI>
This command is normally used with gentree to get the generic tree of an application by placing the mouse on application's window and issuing the command.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2c.htm#IX_systemobj Swat command">systemobj</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Windows:under mouse">
 </A>
impliedwin</H1>

<PRE CLASS="syntax">impliedwin</PRE>

<DL>
<DT>
&quot;wintree [impliedwin]&quot;</DT><DD>
print the window tree of the window under the mouse</DD>
</DL>
<P>
Print the address of the current implied window (the window under the mouse).</P>

<UL>
<LI>
Note that a window handle is returned.</LI>
<LI>
This command is normally used with wintree. One may also use the print command if they properly cast the handle.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Interrupts:monitoring with Swat">
 </A>
<A NAME="IX_Interrupts">
 </A>
<A NAME="IX_int Swat command">
 </A>
int</H1>

<PRE CLASS="syntax">int [&lt;int level&gt; &lt;state&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;int&quot;</DT><DD>report the interrupt statuses</DD>
<DT>
<A NAME="IX_Keyboard:allowing interrupts">
 </A>
&quot;int 1:1 on&quot;</DT><DD>allow keyboard interrupt while in swat</DD>
</DL>
<P>
Set or print the state of the two interrupt controllers for when then machine is stopped in Swat.</P>

<UL>
<LI>
If no arguments are given, the current state is printed.</LI>
<LI>
The &lt;int level&gt; argument is specified by their names or their numbers with the form &lt;controller&gt;:&lt;number&gt;. &lt;controller&gt; is either 1 or 2, and &lt;number&gt; ranges from 0 to 7. The interrupts and their numbers are:</LI>
<DL>
<DT>
<STRONG>
Timer 1:0</STRONG>
<A NAME="IX_Timers:interrupt">
 </A>
</DT><DD>System timer. Probably dangerous to enable.</DD>
<DT>
<STRONG>
Keybd 1:1</STRONG>
</DT><DD>Keyboard input.</DD>
<DT>
<STRONG>
Slave 1:2</STRONG>
</DT><DD>This is how devices on controller 2 interrupt. Disabling this disables them all.</DD>
<DT>
<STRONG>
Com2 1:3</STRONG>
</DT><DD>This is the port usually used by Swat, so it can't be disabled.</DD>
<DT>
<STRONG>
Com1 1:4</STRONG>
</DT><DD>The other serial port -- usually the mouse.</DD>
<DT>
<STRONG>
LPT2 1:5</STRONG>
</DT><DD>The second parallel port</DD>
<DT>
<STRONG>
Floppy 1:6</STRONG>
</DT><DD>Floppy-disk drive</DD>
<DT>
<STRONG>
LPT1 1:7</STRONG>
</DT><DD>First parallel port</DD>
<DT>
<STRONG>
Clock 2:0</STRONG>
</DT><DD>Real-time clock</DD>
<DT>
<STRONG>
Net 2:1</STRONG>
</DT><DD>Network interfaces (?)</DD>
<DT>
<STRONG>
FPA 2:5</STRONG>
</DT><DD>Coprocessor</DD>
<DT>
<STRONG>
HardDisk 2:6</DT><DD>
</STRONG>
Hard-disk drive</DD>
</DL>
<LI>
The &lt;state&gt; argument is either on or off.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_intFormat Swat variable">
 </A>
intFormat</H1>

<PRE CLASS="syntax">var intFormat [&lt;format-string&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var intFormat %d&quot;</DT><DD>
Sets the default format for printing unsigned integers to decimal.</DD>
</DL>
<P>
$<EM>intFormat</EM>
 contains the string passed to the &quot;format&quot; command to print an integer.</P>


<P>
The default value is {%xh}, which prints the integer in hexadecimal, followed by an &quot;h&quot;.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_20.htm#IX_print Swat command:command reference">print</A>,
<A HREF="../../Tools/SwatRef/SR_5.htm#IX_byteAsChar Swat variable">byteAsChar</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_14.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">hwalk ...</A> 
<!-- to next --> | <A HREF="SR_16.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">intr ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
