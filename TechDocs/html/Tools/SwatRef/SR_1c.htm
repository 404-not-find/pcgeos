<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_1c.htm,v 1.2 97/08/12 11:10:54 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: patchin ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">objmessagebrk ...</A> 
<!-- to next --> | <A HREF="SR_1d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">pdisk ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_patchin Swat command">
 </A>
patchin</H1>
<P>
Patchin undoes the work of patchout.</P>


<H1 CLASS="refHeading">
<A NAME="IX_patchout Swat command">
 </A>
patchout</H1>
<P>
This command causes a RET to be placed at the start of a routine.</P>

<A NAME="IX_patient-default Swat command">
 </A>
<H1 CLASS="refHeading">
patient-default</H1>

<PRE CLASS="syntax">patient-default [&lt;geode-name&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;patient-default hello2&quot;</DT><DD>
Makes &quot;hello2&quot; the default patient.</DD>
<DT>
&quot;patient-default&quot;</DT><DD>
Prints the names of the current default patient.</DD>


</DL>
<P>
Specifies the default patient. The <CODE>
send</CODE>
 and <CODE>
run</CODE>
 commands will use this as the default patient to operate on if none is passed to them.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Bitmaps:examining with Swat">
 </A>
<A NAME="IX_pbitmap Swat command">
 </A>
pbitmap</H1>

<PRE CLASS="syntax">pbitmap &lt;address&gt;</PRE>


<P>
Print a bitmap graphically.</P>

<UL>
<LI>
The address argument is the address of the Bitmap or CBitmap structure.</LI>
<LI>
Color bitmaps are printed with a letter representing the color as well. The letters are index from the string (kbgcrvnAaBGCRVYW).</LI>
</UL>

<H1 CLASS="refHeading">
<A NAME="IX_Local memory:examining chunk arrays with Swat">
 </A>
<A NAME="IX_Chunk arrays:examining with Swat">
 </A>
<A NAME="IX_pcarray Swat command">
 </A>
pcarray</H1>

<PRE CLASS="syntax">pcarray [-eth] [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pcarray&quot;</DT><DD>Print the chunk array at *DS:SI (header only)</DD>
<DT>
&quot;pcarray es:di&quot;</DT><DD>
Print the chunk array at ES:DI (header only)</DD>
<DT>
&quot;pcarray -e&quot;</DT><DD>Print the chunk array at *DS:SI and print the elements in the array</DD>
<DT>
&quot;pcarray -tMyStruct&quot;</DT><DD>
Print the chunk array at *DS:SI and print the elements where the elements are of type MyStruct</DD>
<DT>
&quot;pcarry -tMyStruct -TMyExtraStruct&quot;</DT><DD>
Like above, but data after MyStruct is printed as an array of MyExtraStruct structures.</DD>
<DT>
&quot;pcarray -e3&quot;</DT><DD>
Print the chunk array at *DS:SI and print the third element</DD>
<DT>
&quot;pcarray -hMyHeader&quot;</DT><DD>
Print the chunk array at *DS:SI (header only) where the header is of type MyHeader</DD>

</DL>
<P>
Print information about a chunk array.</P>

<UL>
<LI>
The flags argument can be any combination of the flags &quot;e&quot;, &quot;t&quot;, and &quot;h&quot;. The &quot;e&quot; flag prints all elements. If followed by a number (e.g. &quot;-e3&quot;), then only the third element will be printed.</LI>
<LI>
<A NAME="IX_GStrings:printing elements stored in a chunk array">
 </A>
The `t' flag specifies the elements' type. It should be followed<BR>
 immediately by the element type. You can also use &quot;-tgstring&quot; if<BR>
 the elements are GString Elements.</LI>
<LI>
 The `h' flag specifies the header type. It should be followed immediately by the element type. </LI>
<LI>
 The `l' flag specifies how many elements to print. It can be used in conjunction with the `e' flag to print a range of element numbers. </LI>
<LI>
 The `H' flag suppresses printing of the header. </LI>
<LI>
 All flags are optional and may be combined.</LI>
<LI>
The address argument is the address of the chunk array. If not specified then *ds:si is used.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Bitmaps:examining with Swat">
 </A>
<A NAME="IX_pcbitmap Swat command">
 </A>
pcbitmap</H1>

<PRE CLASS="syntax">pcbitmap &lt;address&gt; &lt;width&gt; &lt;height&gt; [&lt;no space flag&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pcbitmap *ds:si 64 64 t&quot;</DT><DD>
print the bitmap without spaces</DD>


</DL>
<P>
Print out a one-bit deep packbits-compacted bitmap.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to the bitmap data.</LI>
<LI>
The &lt;width&gt; argument is the width of the bitmap in pixels.</LI>
<LI>
The &lt;height&gt; argument is the height of the bitmap in pixels.</LI>
<LI>
The &lt;no space flag&gt; argument removes the space normally printed between the pixels. Anything (like &quot;t&quot;) will activate the flag.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pncbitmap Swat command">pncbitmap</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Cells:printing cell data with Swat">
 </A>
<A NAME="IX_pcelldata Swat command">
 </A>
pcelldata</H1>

<PRE CLASS="syntax">pcelldata [&lt;addr&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pcelldata *es:di&quot; </DT><DD>
Print cell data for cell at *es:di.</DD>


</DL>
<P>
Prints data for a spreadsheet data.</P>


<P>
If no address is given, *es:di is used.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_6.htm#IX_content Swat command">content</A>,
<A HREF="../../Tools/SwatRef/SR_1c.htm#IX_pcelldeps Swat command">pcelldeps</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Cells:printing cell dependencies with Swat">
 </A>
<A NAME="IX_pcelldeps Swat command">
 </A>
pcelldeps</H1>

<PRE CLASS="syntax">pcelldeps &lt;filehan&gt; [&lt;addr&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pcelldeps 4be0h *es:di&quot;	</DT><DD>
 print dependencies of cell in file 4be0h.</DD>


</DL>
<P>
Prints dependencies for a cell in the spreadsheet.</P>


<P>
If no address is given, *es:di is used.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_6.htm#IX_content Swat command">content</A>,
<A HREF="../../Tools/SwatRef/SR_1c.htm#IX_pcelldata Swat command">pcelldata</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Objects:printing class">
 </A>
<A NAME="IX_pclass Swat command">
 </A>
pclass</H1>

<PRE CLASS="syntax">pclass [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pclass&quot;</DT><DD>prints the class of *DS:SI</DD>
<DT>
&quot;pclass ^l4ac0h:001eh&quot;</DT><DD>
Print the class of the object at the given address.</DD>


</DL>
<P>
Print the object's class.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address of the object to find the class of. This defaults to *DS:SI.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_DBase:examining blocks with Swat">
 </A>
<A NAME="IX_pdb Swat command">
 </A>
pdb</H1>
<P>
Produces useful information about a DBase block. For now, only information about the map block of the DBase file is produced. First arg H is the SIF_FILE or SIG_VM handle's ID. Second arg B is the VM block handle for which information is desired.</P>

<H1 CLASS="refHeading">
<A NAME="dgroup:pdgroup Swat command">
 </A>
<A NAME="IX_pdgroup Swat command">
 </A>
pdgroup</H1>
<P>

<PRE CLASS="syntax">pdgroup [&lt;flags&gt;] [&lt;patient&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG> </P>
<DL>
<DT>&quotpdgroup&quot</DT>
<DD>Prints out all dgroup variables of the current patient</DD>
<DT>&quotpdgroup -e *lock*&quot</DT>
<DD>Prints out all dgroup variables matching expression "*lock*" of the current patient</DD>
<DT>&quotpdgroup term&quot</DT>
<DD>Prints out all dgroup variables of the patient "term"</DD>
<DT>&quotpdgroup -e *lock* term&quot</DT>
<DD>Prints out all dgroup variables matching expression "*lock*" of the patient "term"</DD>
</DL>
<P>
Prints out the variables defined in dgroup.</P>

<UL>
<LI>Flags:</LI>
<DL>
<DT>-e &lt;expression&gt;</DT>
<DD>Only prints out the variables matching &lt;expression&gt;.
When -e flag is used, <EM>expression</EM> argument must be
supplied. The expression syntax is the same as the
one specified in 
&quot;<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_string Tcl command">string match</A>&quot;
command.</DD>
</DL>
</UL>

<P CLASS="refField"><STRONG>
See Also:</STRONG> 
<A HREF="../../Tools/SwatRef/SR_20.htm#IX_print Swat command:command reference">print</A>,
<A HREF="../../Tools/SwatRef/SR_22.htm#IX_pscope Swat command">pscope</A>.

</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">objmessagebrk ...</A> 
<!-- to next --> | <A HREF="SR_1d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">pdisk ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
