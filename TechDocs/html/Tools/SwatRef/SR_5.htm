<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_5.htm,v 1.1 97/06/27 16:01:03 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: bits ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">assign ...</A> 
<!-- to next --> | <A HREF="SR_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">car ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
bits</H1>

<PRE CLASS="syntax">bits [&lt;address&gt;] [&lt;length&gt;] [&lt;type&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;bits&quot; </DT><DD>lists 16 bytes worth of bits at ds:si</DD>
<DT>
    &quot;bits ds:di 8&quot; 	</DT><DD>
lists 8 bytes worth of bits at ds:di</DD>
<DT>
    &quot;bits ds:di 24 w&quot; </DT><DD>
lists 24 words worth of bits at ds:di</DD>
</DL>
<P>
Examine memory as a dump of bits in sets of 8, 16, or 32 (byte,word, or dword).</P>

<UL>
<LI>
The address argument is the address to examine.  If not specified, the address after the last examined memory location is used.  If no address has been examined then ds:si is used for the address.</LI>
<LI>
The length argument is the number of units to examine.  It defaults to 16.</LI>
<LI>
They type argument is bytes, words or dwords.  It defaults to bytes.</LI>
<LI>
Pressing return after this command continues the list.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_break-taken Swat command">
 </A>
break-taken</H1>

<PRE CLASS="syntax"><A NAME="IX_Breakpoints:detecting"> </A>break-taken [&lt;flag&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;break-taken&quot;	</DT><DD>
Returns 1 if the machine stopped because of a breakpoint.</DD>
<DT>
&quot;break-taken 0&quot;</DT><DD>
Specify that no breakpoint was actually taken to stop the machine.</DD>
<P>
Obscure. This is used to determine if the machine stopped because a breakpoint was hit and taken.</P>


</DL>
<P>
Setting the <CODE>
break-taken</CODE>
 flag is a rather obscure operation. It is useful primarily in complex commands that single-step the machine until a particular address is reached, or a breakpoint is taken when a breakpoint must be used to skip over a procedure call, or condense multiple iterations of an instruction with a REP prefix into 1. For an example of this use, refer to the &quot;cycles&quot; command. </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_brk Tcl structure:command reference">brk</A>,
<A HREF="../../Tools/SwatRef/SR_16.htm#IX_irq Swat command">irq</A>.



<H1 CLASS="refHeading">
<A NAME="IX_brkload Swat command">
 </A>
<A NAME="IX_Breakpoints:on handles">
 </A>
<A NAME="IX_Handles:monitoring with Swat">
 </A>
brkload</H1>

<PRE CLASS="syntax">brkload [&lt;handle&gt;] </PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;brkload Interface&quot; </DT><DD>
Stop the machine when the Interface resource is loaded or swapped in.</DD>
<DT>
 &quot;brkload bx&quot;</DT><DD>Stop the machine when the resource whose handle ID is in BX is loaded or swapped in.</DD>
<DT>
 &quot;brkload&quot; </DT><DD>Stop watching for the previously-specified resource to be loaded.</DD>
</DL>
<P>
Stop the machine when a particular resource is loaded into memory.</P>


<UL>
<LI>
Only one brkload may be active at a time; registering a second one automatically unregisters the first. </LI>
<LI>
If you give no &lt;handle&gt; argument, the previously-set brkload will be unregistered.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_handle Tcl structure">handle</A>.



<H1 CLASS="refHeading">
<A NAME="IX_byteAsChar Swat variable">
 </A>
byteAsChar</H1>

<PRE CLASS="syntax">var byteAsChar [(0|1)]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var byteAsChar 1&quot; </DT><DD>
Print byte variables as characters.</DD>
</DL>
<P>
Determines how unsigned character variables are printed: if set non-zero, they are displayed as characters, else they are treated as unsigned integers.</P>


<UL>
<LI>
If $<EM>byteAsChar</EM>
 is 0, $<EM>intFormat</EM> is used. </LI>
<LI>
The default value for this variable is 0.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Memory:examining with Swat">
 </A>
<A NAME="IX_Text:displaying bytes as">
 </A>
<A NAME="IX_bytes Swat command:command reference">
 </A>
bytes</H1>

<PRE CLASS="syntax">bytes [&lt;address&gt;] [&lt;length&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;bytes&quot;</DT><DD>lists 16 bytes at DS:SI</DD>
<DT>
&quot;bytes ds:di 32&quot;</DT><DD>
lists 32 bytes at DS:SI</DD>
</DL>
<P>
Examine memory as a dump of bytes and characters.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to examine. If not specified, the address after the last examined memory location is used. If no address has been examined then DS:SI is used for the address.</LI>
<LI>
The &lt;length&gt; argument is the number of bytes to examine. It defaults to 16.</LI>
<LI>
Pressing &lt;Return&gt; after this command continues the list.</LI>
<LI>
Characters which are not typical ASCII values are displayed as a period.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_30.htm#IX_words Swat command:command reference">words</A>,
<A HREF="../../Tools/SwatRef/SR_b.htm#IX_dwords Swat command:command reference">dwords</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_imem Swat command:command reference">imem</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>.



<H1 CLASS="refHeading">
<A NAME="IX_call Swat command">
 </A>
call</H1>

<PRE CLASS="syntax"><A NAME="IX_Routines:calling from Swat"> </A>call &lt;function&gt; [&lt;function args&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;call MyFunc&quot;<BR>
&quot;call MyDraw ax 1 bx 1 cx 10h dx 10h&quot;<BR>
&quot;call FindArea box.bottom 5 box.right 5 push box&quot;'</P>
<P>
Call a function in the current thread.</P>

<UL>
<LI>
The &lt;function&gt; argument is the function to call. If it is a NEAR function, the thread must already be executing in the function's segment.</LI>
<LI>
The function arguments are in pairs &lt;variable/register&gt; &lt;value&gt;. These pairs are passed to the &quot;assign&quot; command. As a special case, if the variable is &quot;push&quot;, the value (a word) is pushed onto the stack and is popped when the call finishes (if it completes successfully).</LI>
<LI>
All current registers are preserved and restored when the call is complete. Variables are not.</LI>
<LI>
Once the call has completed, you are left in a sub-interpreter to examine the state of the machine. Type &quot;break&quot; to get back to the top level.</LI>
<LI>
If the machine stops for any other reason than the call's completion, the saved register state is discarded and you are left wherever the machine stopped. You will not be able to get a stack trace above the called function, but if the call eventually completes, and no registers have actually been modified, things will get back on track.</LI>
<LI>
You may not call a function from a thread that has retreated into the kernel. This function also will not allow you to call <CODE>
ThreadExit()</CODE>
. Use the &quot;exit&quot; function to do that.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>,
<A HREF="../../Tools/SwatRef/SR_5.htm#IX_call-patient Swat command">call-patient</A>,
<A HREF="../../Tools/SwatRef/SR_1b.htm#IX_patch Swat command">patch</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Routines:calling from Swat">
 </A>
<A NAME="IX_call-patient Swat command">
 </A>
call-patient</H1>

<PRE CLASS="syntax">call-patient &lt;function&gt; ((&lt;reg&gt;|push) &lt;value&gt;)*</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;call-patient MemLock bx $h&quot; </DT><DD>
Locks down the block whose handle ID is in $h.</DD>
</DL>
<P>
This is a utility routine, not intended for use from the command line, that will call a routine in the PC after setting registers to or pushing certain values. </P>


<UL>
<LI>
Returns non-zero if the call completed successfully. </LI>
<LI>
If the call is successful, the registers reflect the state of the machine upon return from the called routine. The previous machine state is preserved and can be retrieved, by invoking restore-state, or thrown away, by invoking discard-state. The caller <EM>
must</EM>
 invoke one of these to clean up. </LI>
<LI>
Arguments after &lt;function&gt; are as for &quot;call&quot;. </LI>
<LI>
If the called routine is in movable memory, this will lock the containing block down before issuing the call, as you'd expect. </LI>
<LI>
Calling anything that makes message calls while on the geos:0 thread is a hazardous undertaking at best.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_5.htm#IX_call Swat command">call</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_4.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">assign ...</A> 
<!-- to next --> | <A HREF="SR_6.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">car ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
