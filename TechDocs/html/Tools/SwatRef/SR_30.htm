<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_30.htm,v 1.1 97/06/27 16:00:57 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: wclear ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">varwin ...</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:clearing">
 </A>
<A NAME="IX_wclear Swat command">
 </A>
wclear</H1>

<PRE CLASS="syntax">wclear</PRE>


<P>
Clears the current window.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:creating">
 </A>
<A NAME="IX_wcreate Swat command">
 </A>
wcreate</H1>

<PRE CLASS="syntax">wcreate &lt;height&gt;</PRE>


<P>
Create a window of the given height and return a token for it. The window is placed just above the command window, if there's room. If there aren't that many lines free on the screen, an error is returned.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:destroying">
 </A>
<A NAME="IX_wdelete Swat command">
 </A>
wdelete</H1>

<PRE CLASS="syntax">wdelete &lt;window&gt;</PRE>


<P>
Delete the given window. All windows below it move up and the command window enlarges.</P>



<H1 CLASS="refHeading">
<A NAME="IX_whatat Swat command">
 </A>
whatat</H1>

<PRE CLASS="syntax">whatat [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;whatat&quot;</DT><DD>name of variable at *DS:SI</DD>
<DT>
&quot;whatat ^l2ef0h:002ah&quot;</DT><DD>
name of variable at the specified address</DD>


</DL>
<P>
Print the name of the variable at the address.</P>

<UL>
<LI>
The &lt;address&gt; argument specifies where to find a variable name for. The address defaults to *DS:SI.</LI>
<LI>
If no appropriate variable is found for the address, `*nil*' is returned.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>,
<A HREF="../../Tools/SwatRef/SR_14.htm#IX_hwalk Swat command:command reference">hwalk</A>,
<A HREF="../../Tools/SwatRef/SR_17.htm#IX_lhwalk Swat command:command reference">lhwalk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Structures:examining with Swat">
 </A>
<A NAME="IX_whatis Swat command">
 </A>
whatis</H1>

<PRE CLASS="syntax">whatis (&lt;symbol&gt;|&lt;addr&gt;)</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;whatis WinColorFlags&quot;</P>


<P>
This produces a human-readable description of a symbol, giving whatever information is pertinent to its type.</P>

<UL>
<LI>
For type symbols (e.g. structures and enumerated types), the description of the type is fully displayed, so if a structure has a field with an enumerated type, all the members of the enumerated type will be printed as well. Also all fields of nested structures will be printed. If this level of detail isn't what you need, use the &quot;pscope&quot; command instead.</LI>
<LI>
It's not clear why you'd need the ability to find the type of an address-expression, since those types always come from some symbol or other, but if you want to type more, you certainly may.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_why Swat command:command reference">
 </A>
why</H1>

<PRE CLASS="syntax">why</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;why&quot;</P>


<P>
Print a description of why the system crashed.</P>

<UL>
<LI>
This must be run from within the frame of the FatalError function. Sometimes GEOS is not quite there. In this case, step an instruction <A NAME="IX_Errors:determining cause of crash">
 </A>
<A NAME="IX_Errors:decoding FatalErrors values">
 </A>
or two and then try the &quot;why&quot; command again.</LI>
<LI>
This simply looks up the enumerated constant for the error code in AX in the &quot;FatalErrors&quot; enumerated type defined by the geode that called FatalError. For example, if a function in the kernel called FatalError, AX would be looked up in geos::FatalErrors, while if a function in your application called FatalError, this function would look it up in the FatalErrors type defined by your application. Each application defines this enumerated type by virtue of having included <STRONG CLASS="fileName">
ec.def </STRONG>
or<STRONG CLASS="fileName">
 ec.goh</STRONG>
.</LI>
<LI>
For certain fatal errors, additional information is provided by invoking the command &lt;patient&gt;::&lt;error code name&gt;, if it exists.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_25.htm#IX_regs Swat command">regs</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_backtrace Swat command:command reference">backtrace</A>,
<A HREF="../../Tools/SwatRef/SR_c.htm#IX_explain Swat command">explain</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Windows:displaying,tree with Swat">
 </A>
<A NAME="IX_Trees:Displaying window, with Swat">
 </A>
<A NAME="IX_wintree Swat command">
 </A>
wintree</H1>

<PRE CLASS="syntax">wintree &lt;window handle&gt; [&lt;data field&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;wintree ^hd060h&quot;</DT><DD>
print a window tree starting at the handle d060h</DD>


</DL>
<P>
Print a window tree starting with the root specified.</P>

<UL>
<LI>
The &lt;window address&gt; argument is the address to a window.</LI>
<LI>
The &lt;data field&gt; argument is the offset to any instance data within a window (like W_ptrFlags).</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vistree Swat command">vistree</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Formatting Swat output:inverse type">
 </A>
<A NAME="IX_winverse Swat command">
 </A>
winverse</H1>

<PRE CLASS="syntax">winverse</PRE>


<P>
Sets the inverse-mode of the current window (whether newly-echoed characters are displayed in inverse video) on or off, depending on its argument (1 is on).</P>



<H1 CLASS="refHeading">
<A NAME="IX_Formatting Swat output:moving cursor">
 </A>
<A NAME="IX_wmove Swat command">
 </A>
wmove</H1>

<PRE CLASS="syntax">wmove [(+|-)] &lt;x-coord&gt; [(+|-)] &lt;y-coord&gt;</PRE>


<P>
Moves the cursor for the current window. Takes two arguments: the new<EM>
 x </EM>
position and the new<EM>
 y</EM>
 position. These positions may be absolute or relative (absolute positions begin with + or -). If you attempt to move outside the current window, an error is generated. This command returns the new cursor position as {<EM>
x y</EM>
}.</P>



<H1 CLASS="refHeading">
<A NAME="IX_words Swat command:command reference">
 </A>
<A NAME="IX_Memory:examining with Swat">
 </A>
words</H1>

<PRE CLASS="syntax">words [&lt;address&gt;] [&lt;length&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;words&quot;</DT><DD>lists 8 words at DS:SI</DD>
<DT>
&quot;words ds:di 16&quot;</DT><DD>
lists 16 words starting at DS:DI</DD>


</DL>
<P>
Examine memory as a dump of words.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to examine. If not specified, the address after the last examined memory location is used. If no address has been examined then DS:SI is used for the address.</LI>
<LI>
The &lt;length&gt; argument is the number of bytes to examine. It defaults to 8.</LI>
<LI>
Pressing &lt;Return&gt; after this command continues the list.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_5.htm#IX_bytes Swat command:command reference">bytes</A>,
<A HREF="../../Tools/SwatRef/SR_b.htm#IX_dwords Swat command:command reference">dwords</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_imem Swat command:command reference">imem</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:wpop Swat command">
 </A>
<A NAME="IX_wpop Swat command">
 </A>
wpop</H1>

<PRE CLASS="syntax">wpop</PRE>


<P>
Revert the current window to its previously pushed value.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:wpush Swat command">
 </A>
<A NAME="IX_wpush Swat command">
 </A>
wpush</H1>

<PRE CLASS="syntax">wpush &lt;window&gt;</PRE>


<P>
Switch to a new window, saving the old current-window. Use <CODE>
wpop</CODE>
 to go back to the previous window. All I/O goes through the current window.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:redisplaying">
 </A>
<A NAME="IX_wrefresh Swat command">
 </A>
wrefresh</H1>

<PRE CLASS="syntax">wrefresh</PRE>


<P>
Synchronizes the current window with the screen. This need only be performed if you don't echo a newline, as echoing a newline refreshes the current window.</P>



<H1 CLASS="refHeading">
<A NAME="IX_wtop Swat command">
 </A>
wtop</H1>

<PRE CLASS="syntax">wtop &lt;flag&gt;</PRE>


<P>
Sets where windows go. If argument is non-zero, windows go at the top of the screen and work down. Else windows go at the bottom of the screen and work up</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2f.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">varwin ...</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
