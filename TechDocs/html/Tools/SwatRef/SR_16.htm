<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_16.htm,v 1.2 97/08/01 11:11:52 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: intr ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">imem ...</A> 
<!-- to next --> | <A HREF="SR_17.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">keyboard ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Interrupts:manipulating with Swat">
 </A>
<A NAME="IX_intr Swat command">
 </A>
intr</H1>
<P>
Catch, ignore, or deliver an interrupt on the target PC. First argument is the interrupt number. Optional second argument is &quot;catch&quot; to catch delivery of the interrupt, &quot;ignore&quot; to ignore the delivery, or &quot;send&quot; to send the interrupt (the machine will keep going once the interrupt has been handled). If no second argument is given, the interrupt is delivered.</P>


<H1 CLASS="refHeading">
<A NAME="IX_io Swat command">
 </A>
<A NAME="IX_I/O manipulating with Swat[;IO:monitoring with Swat]">
 </A>
io</H1>

<PRE CLASS="syntax">io [w] &lt;port&gt; [&lt;value&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;io 21h&quot;</DT><DD>Reads byte-sized I/O port 21h.</DD>
<DT>
&quot;io 20h 10&quot;</DT><DD>Writes decimal 10 to byte-sized I/O port 20h.</DD>
</DL>
<P>
Provides access to any I/O port on the PC.</P>

<UL>
<LI>
If you give the optional first argument &quot;w&quot; then Swat will perform a 16-bit I/O read or write, rather than the default 8-bit access. Be aware that most devices don't handle this too well. </LI>
<LI>
&lt;port&gt; must be a number (in any radix); it cannot be a register or other complex expression. </LI>
<LI>
If you don't give a &lt;value&gt;, you will be returned the contents of the I/O port (it will not be printed to the screen). </LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Interrupts:manipulating with Swat">
 </A>
<A NAME="IX_irq Swat command">
 </A>
irq</H1>

<PRE CLASS="syntax">irq
irq (no|yes)
irq (set|clear)</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;irq&quot;</DT><DD>Returns non-zero if an interrupt is pending.</DD>
<DT>
&quot;irq no&quot;</DT><DD>Disable recognition and acting on a break request from the keyboard.</DD>
<DT>
&quot;irq set&quot;</DT><DD>Pretend the user typed Ctrl-C.</DD>
</DL>
<P>
Controls Swat's behavior with respect to interrupt requests from the keyboard.</P>

<UL>
<LI>
Swat maintains an interrupt-pending flag that is set when you type Ctrl+C (it can also be set or cleared by this command). It delays acting on the interrupt until the start of the next or the completion of the current Tcl command, whichever comes first. </LI>
<LI>
When given no arguments, it returns the current state of the interrupt-pending flag. This will only ever be non-zero if Swat is ignoring the flag (since the command wouldn't actually return if the flag were set and being paid attention to, as the interpreter would act on the flag to vault straight back to the command prompt). </LI>
<LI>
If given &quot;no&quot; or &quot;yes&quot; as an argument, it causes Swat to ignore or pay attention to the interrupt-pending flag, respectively. </LI>
<LI>
You can set or clear the flag by giving &quot;set&quot; or &quot;clear&quot; as an argument.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Objects:testing class with Swat">
 </A>
<A NAME="IX_is-obj-in-class Swat command">
 </A>
is-obj-in-class</H1>

<PRE CLASS="syntax">is-obj-in-class &lt;obj-addr&gt; &lt;class-name&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;is-obj-in-class ^l4e10h:1eh GenPrimaryClass&quot; </DT><DD>
see if the object at ^l4e10h:1eh is in <CODE>
GenPrimaryClass</CODE>
.</DD>
</DL>
<P>
Returns whether a given object is in the specified class.</P>

<UL>
<LI>
Returns one if the object is in the specified class, zero otherwise. It will return one if the object's class is a subclass of the passed class.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_22.htm#IX_psup Swat command">psup</A>.



<H1 CLASS="refHeading">
<A NAME="IX_istep Swat command:command reference">
 </A>
<A NAME="IX_Stepping through code:Asm">
 </A>
istep</H1>

<PRE CLASS="syntax">istep [&lt;default command&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;is&quot;</DT><DD>enter instruction step mode</DD>
<DT>
&quot;istep n&quot;</DT><DD>enter instruction step mode, &lt;ret&gt; does a next command</DD>
</DL>
<P>
Step through the execution of the current patient. This is THE command for stepping through assembly code.</P>

<UL>
<LI>
The default command argument determines what pressing the &lt;Return&gt; key does. By default, &lt;Return&gt; executes a step command. Any other command listed below may be substituted by passing the letter of the command.</LI>
<LI>
Istep steps through the patient instruction by instruction, printing where the ip is, what instruction will be executed, and what the instruction arguments contain or reference. Istep waits for the user to type a command which it performs and then prints out again where istep is executing.</LI>
<LI>
This is a list of <CODE>
istep</CODE>
 commands:</LI>
<DL>
<DT>
<STRONG>
q</STRONG>
, &lt;<STRONG>
Esc</STRONG>
&gt;, ` `</DT><DD>Stops istep and returns to command level.</DD>
<DT>
<STRONG>
b</STRONG>
</DT><DD>Toggles a breakpoint at the current location.</DD>
<DT>
<STRONG>
c</STRONG>
</DT><DD>Stops istep and continues execution.</DD>
<DT>
<STRONG>
n</STRONG>
</DT><DD>Continues to the next instruction, skipping procedure calls, repeated string instructions, and software interrupts. Using this procedure, istep only stops when the machine returns to the right context (i.e. the stack pointer and current thread are the same as they are when the &quot;n&quot; command was given). Routines which change the stack pointer should use &quot;N&quot; instead.</DD>
<DT>
<STRONG>
o</STRONG>
</DT><DD>Like &quot;n&quot; but steps over macros as well.</DD>
<DT>
<STRONG>
l</STRONG>
</DT><DD>Goes to the next library routine.</DD>
<DT>
<STRONG>
N</STRONG>
</DT><DD>Like `n', but stops whenever the breakpoint is hit, whether you're in the same frame or not.</DD>
<DT>
<STRONG>
O</STRONG>
</DT><DD>Like `N' but steps over macros as well.</DD>
<DT>
<STRONG>
m, M</STRONG>
</DT><DD>Goes to the next method called. Doesn't work when the message is not handled anywhere.</DD>
<DT>
<STRONG>
F</STRONG>
</DT><DD>Finishes the current message.</DD>
<DT>
<STRONG>
f</STRONG>
</DT><DD>Finishes out the current stack frame.</DD>
<DT>
<STRONG>
s</STRONG>
, &lt;<STRONG>
Return</STRONG>
&gt;</DT><DD>Steps one instruction.</DD>
<DT>
<STRONG>
A</DT><DD></STRONG>
Aborts the current stack frame.</DD>
<DT>
<STRONG>
S</STRONG>
</DT><DD>Skips the current instruction</DD>
<DT>
<STRONG>
B</DT><DD></STRONG>
Backs up an instruction (opposite of &quot;S&quot;).</DD>
<DT>
<STRONG>
J</STRONG>
</DT><DD>Jump on a conditional jump, even when &quot;Will not jump&quot; appears. This does not change the condition codes.</DD>
<DT>
<STRONG>
g</STRONG>
</DT><DD>Executes the `go' command with the rest of the line as arguments.</DD>
<DT>
<STRONG>
e</STRONG>
</DT><DD>Executes a Tcl command and returns to the prompt.</DD>
<DT>
<STRONG>
r</STRONG>
</DT><DD>Lists the registers (uses the regs command)</DD>
<DT>
<STRONG>
R</STRONG>
</DT><DD>References either the function to be called or the function currently executing.</DD>
<DT>
<STRONG>
h</STRONG>
, <STRONG>
?</STRONG>
</DT><DD>Displays a help message.</DD>
</DL>
<LI>
If the current patient isn't the actual current thread, <CODE>
istep</CODE>
 waits for the patient to wake up before single-stepping it.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_29.htm#IX_sstep Swat command">sstep</A>,
<A HREF="../../Tools/SwatRef/SR_17.htm#IX_listi Swat command:command reference">listi</A>.

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_15.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">imem ...</A> 
<!-- to next --> | <A HREF="SR_17.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">keyboard ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
