<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_11.htm,v 1.1 97/06/27 15:59:34 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: getenv ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">func ...</A> 
<!-- to next --> | <A HREF="SR_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">handsum ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_getenv Swat command">
 </A>
getenv</H1>

<PRE CLASS="syntax">getenv &lt;NAME&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;getenv PTTY&quot;	</DT><DD>
Fetches the value of the host machine's PTTY environment variable.</DD>
</DL>
<P>
Returns the value for a variable defined in Swat's environment.</P>


<P>
If the variable isn't defined, this returns the empty string.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_d.htm#IX_var Tcl command">var</A>,
<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_string Tcl command">string</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Key bindings in Swat">
 </A>
<A NAME="IX_get-key-binding Swat command">
 </A>
get-key-binding</H1>

<PRE CLASS="syntax">get-key-binding &lt;char&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;get-key-binding c&quot;</DT><DD>
Gets key binding for the character c.</DD>
<DT>
&quot;get-key-binding \045&quot;</DT><DD>
Gets key binding for the % key.</DD>
</DL>
<P>
Gets key binding for given key.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_3.htm#IX_alias Swat command:command reference">alias</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_bind-key Swat command">bind-key</A>,
<A HREF="../../Tools/SwatRef/SR_2e.htm#IX_unbind-key Swat command">unbind-key</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Formatting Swat output:integer values of expressions">
 </A>
<A NAME="IX_getvalue Swat command">
 </A>
getvalue</H1>

<PRE CLASS="syntax">getvalue &lt;expr&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;getvalue <CODE>
MSG_META_DETACH</CODE>
&quot;</DT><DD>
Returns the integer value of the symbol MSG_META_DETACH.</DD>
</DL>
<P>
This is a front-end to the &quot;addr-parse&quot; command that allows you to easily obtain the integer value of any expression. It's most useful for converting something the user might have given you to a decimal integer for further processing.</P>


<P>
If the expression you give does not evaluate to an address (whose offset will be returned) or an integer, the results of this function are undefined.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2.htm#IX_addr-parse Swat command">addr-parse</A>,
<A HREF="../../Tools/SwatRef/SR_2.htm#IX_addr-preprocess Swat command">addr-preprocess</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Stepping through code:go Swat command">
 </A>
<A NAME="71276">
 </A>
<A NAME="IX_Breakpoints:single use">
 </A>
<A NAME="IX_go Swat command">
 </A>
go</H1>

<PRE CLASS="syntax">go [&lt;address expressions&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;go&quot;</DT><DD>&quot;go drawLeftLine&quot;</DD>
</DL>
<P>
Go until an address is reached.</P>

<UL>
<LI>
The &lt;address expressions&gt; argument is as many address expressions as desired for breakpoints. Execution is continued until a breakpoint is reached. These breakpoints are then removed when the machine stops and are only active for the current patient.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_d.htm#IX_break Tcl command">break</A>,
<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_continue Tcl command">continue</A>,
<A HREF="../../Tools/SwatRef/SR_a.htm#IX_detach Swat command:command reference">detach</A>,
<A HREF="../../Tools/SwatRef/SR_24.htm#IX_quit Swat command:command reference">quit</A>.


<H1 CLASS="refHeading">
<A NAME="IX_gup Swat command:command reference">
 </A>
<A NAME="IX_Trees:displaying generic ancestors">
 </A>
<A NAME="IX_Generic objects:displaying ancestors">
 </A>
gup</H1>

<PRE CLASS="syntax">gup [&lt;address&gt;] [&lt;instance field&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;gup&quot;</DT><DD>print the generic object at *DS:SI and its ancestors</DD>
<DT>
 &quot;gup @23 GI_states&quot;</DT><DD>
print the states of object @23 and its ancestors</DD>
<DT>
&quot;gup -i&quot;</DT><DD>print the generic object under the mouse and the object's ancestors</DD>
</DL>
<P>
Print a list of the object and all of its generic ancestors.</P>

<UL>
<LI>
The address argument is the address to an object in the generic tree. This defaults to *DS:SI. The `-i' flag for an implied grab may be used.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
<LI>
The instance field argument is the offset to any instance data within the GenInstance which should be printed out.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>,
<A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vup Swat command:command reference">vup</A>,
<A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vistree Swat command">vistree</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>.



<H1 CLASS="refHeading">
<A NAME="IX_handles Swat command">
 </A>
handles</H1>

<PRE CLASS="syntax">handles [&lt;flags&gt;] [&lt;patient&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;handles&quot;<BR>
&quot;handles -f&quot;<BR>
&quot;handles ui&quot;</P>
<P>
Print all handles in-use.</P>

<UL>
<LI>
The flags argument is a collection of flags, beginning with `-', from the following set:</LI>
<DL>
<DT>
<STRONG>
           s</STRONG>
</DT><DD>print summary only.</DD>
<DT>
<STRONG>
           e</DT><DD></STRONG>
events only.</DD>
<DT>
<STRONG>
           p</STRONG>
</DT><DD>don't print prevPtr and nextPtr.</DD>
<DT>
<STRONG>
           f</STRONG>
</DT><DD>fast print-out - this doesn't try to figure out the block type.</DD>
<DT>
<STRONG>
                r</STRONG>
 </DT><DD>reverse, i.e. starts at the end of the handle table.</DD>
<DT>
<STRONG>
               u</STRONG>
 </DT><DD>print only those handles that are in-use.</DD>
</DL>
<LI>
<A NAME="IX_Patients:displaying handles">
 </A>
The <EM>
patient</EM>
 argument is a patient whose blocks are to be selectively printed (either a name or a core-block's handle ID). The default is to print all the blocks on the heap.</LI>
<LI>
The following columns can appear in a listing:</LI>
<DL>
<DT>
HANDLE</DT><DD>The handle of the block</DD>
<DT>
ADDR</DT><DD>The segment address of the block</DD>
<DT>
SIZE</DT><DD>Size of the block in bytes</DD>
<DT>
PREV</DT><DD>The previous block handle (appears with the p flag)</DD>
<DT>
NEXT</DT><DD>The next block handle (appears with the p flag)</DD>
<DT>
FLAGS	The following letters appears in the FLAGS column:</DT><DD>
<STRONG>
s</STRONG>
   sharable,<BR>
<STRONG>
S</STRONG>
  swapable, <BR>
<STRONG>
D</STRONG>
  discardable, <BR>
<STRONG>
L</STRONG>
<A NAME="IX_Local memory:detecting heaps">
 </A>
  contains local memory heap, <BR>
<STRONG>
d</STRONG>
   discarded<BR>
            (by LMem module: discarded blocks don't appear here), <BR>
<STRONG>
a</STRONG>
   attached (notice given to swat whenever state changes)</DD>
<DT>
LOCK</DT><DD>Number of times the block is locked or n/a if FIXED.</DD>
<DT>
OWNER</DT><DD>The process which owns the block</DD>
<DT>
IDLE</DT><DD>The time since the block has been accessed in minutes:seconds</DD>
<DT>
OINFO</DT><DD>The <CODE>
otherInfo</CODE>
 field of the handle (block type dependent)</DD>
<DT>
TYPE</DT><DD>Type of the block, for example: R#1 (dgroup) resource number one</DD>
</DL>
<LI>
This only prints those handles in memory while `handles' prints all handles used.</LI>
<LI>
The handles may be printed with lhwalk and phandle.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_17.htm#IX_lhwalk Swat command:command reference">lhwalk</A>,
<A HREF="../../Tools/SwatRef/SR_1e.htm#IX_phandle Swat command">phandle</A>,
<A HREF="../../Tools/SwatRef/SR_13.htm#IX_hgwalk Swat command">hgwalk</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_10.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">func ...</A> 
<!-- to next --> | <A HREF="SR_12.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">handsum ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
