<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_d.htm,v 1.1 97/06/27 16:01:20 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: fatalerr_auto_explain ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">elist ...</A> 
<!-- to next --> | <A HREF="SR_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">flagwin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Errors:fatalerr_auto_explain Swat variable">
 </A>
<A NAME="IX_fatalerr_auto_explain Swat variable">
 </A>
fatalerr_auto_explain</H1>

<PRE CLASS="syntax">var fatalerr_auto_explain [(0|1)]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var fatalerr_auto_explain 0&quot; </DT><DD>
Turn off automatic generation of the explanation for any fatal-error hit.</DD>
</DL>
<P>
Determines if the &quot;why&quot; command will automatically provide you with an explanation of any fatal error you encounter. If non-zero, they will be provided whenever <CODE>
FatalError</CODE>
 is hit.</P>

<UL>
<LI>
Explanations are loaded from &lt;patient&gt;.fei files stored in the system Tcl library directory when an error in &lt;patient&gt; is encountered. </LI>
<LI>
You can also obtain an explanation of an error via the &quot;explain&quot; command.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_optr:extracting from memory with Swat">
 </A>
<A NAME="IX_fetch-optr Swat command">
 </A>
fetch-optr</H1>

<PRE CLASS="syntax">fetch-optr &lt;handle&gt; &lt;offset&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;fetch-optr $h $o.GI_comp.CP_firstChild&quot;</DT><DD>
 Fetch the optr from the GI_comp.CP_firstChild field of the object at ^h$h:$o.</DD>
</DL>
<P>
Extracts an optr from memory, coping with the data in the block that holds the optr not having been relocated yet.</P>

<UL>
<LI>
&lt;offset&gt; is an actual offset, not a chunk handle, while &lt;handle&gt; is a handle ID, not a handle token. </LI>
<LI>
Returns a two-list {&lt;handle&gt; &lt;chunk&gt;}, where &lt;handle&gt; is the handle ID from the optr, and &lt;chunk&gt; is the chunk handle (low word) from the optr. </LI>
<LI>
We decide whether to relocate the optr ourselves based on the LMF_RELOCATED bit in the <CODE>
LMBH_flags</CODE>
 field of the block's header. There are times, e.g. during the call to MSG_META_RELOCATE for an object, when this bit doesn't accurately reflect the state of the class pointer and we will return an error when we should not.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Files:fhandle Swat command">
 </A>
<A NAME="IX_Handles:file handles:fhandles Swat command">
 </A>
<A NAME="IX_fhandle Swat command">
 </A>
fhandle</H1>

<PRE CLASS="syntax">fhandle &lt;handle id&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;fhandle 3290h&quot;</P>
<P>
Print out a file handle.</P>

<UL>
<LI>
The &lt;handle id&gt; argument is the handle number. File handles are listed in the first column of the `fwalk' command.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_10.htm#IX_fwalk Swat command">fwalk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Structures:field Swat command">
 </A>
<A NAME="IX_field Swat command">
 </A>
field</H1>

<PRE CLASS="syntax">field &lt;list&gt; &lt;field name&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;field [value fetch ds:si MyBox] topLeft&quot;</DT><DD>
return the offset of the topLeft field in MyBox</DD>
</DL>
<P>
Return the value for the field's offset in the structure.</P>

<UL>
<LI>
The &lt;list&gt; argument is a structure-value list from the &quot;value&quot; command.</LI>
<LI>
The &lt;field name&gt; argument is the field in the structure.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2e.htm#IX_value Swat command">value</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_piv Swat command">piv</A>.



<H1 CLASS="refHeading">
<A NAME="IX_fieldwin Swat command">
 </A>
fieldwin</H1>

<PRE CLASS="syntax">fieldwin</PRE>
<P>
Print the address of the target machine's current top-most field window.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Searching for text with Swat">
 </A>
<A NAME="IX_find Swat command">
 </A>
find</H1>

<PRE CLASS="syntax">find [-ir] &lt;string&gt; [&lt;filename&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;find FileRead&quot; </DT><DD>
Find next occurrence of string &quot;FileRead&quot; in currently viewed file </DD>
<DT>
&quot;find FI_foo poof.goc&quot;</DT><DD>
 find first occurrence of string &quot;FI_foo&quot; in file poof.goc.</DD>
<DT>
 &quot;find -ir myobject&quot; </DT><DD>
case-insensitive reverse search for most recent occurrence of string &quot;myobject&quot; in currently viewed file</DD>
</DL>
<P>
Finds a string in a file and brings the line with that string to the middle of Swat's source window.</P>

<UL>
<LI>
If no file argument is specified, find will find the next instance of the string in the already viewed file starting from the current file position. </LI>
<LI>
There must already be a source window displayed for find to work. </LI>
<LI>
Possible options to find are:</LI>
<DL>
<DT>
          <STRONG>
-r</STRONG>
 </DT><DD>reverse search</DD>
<DT>
          <STRONG>
-i</STRONG>
 </DT><DD>case insensitive search</DD>

</DL>
</UL>
<H1 CLASS="refHeading">
<A NAME="IX_find-opcode Swat command">
 </A>
find-opcode</H1>

<PRE CLASS="syntax">find-opcode &lt;addr&gt; &lt;byte&gt;+</PRE>
<P>
Locates the mnemonic for an opcode and decodesit. Accepts the address from which the opcode bytes were fetched, and one or more opcode bytes as arguments. Returns a list of data from the opcode descriptor:</P>
<P>
 {name length branch-type args modrm bRead bWritten inst}</P>
<P>
<EM>
length</EM>
 is the length of the instruction.</P>
<P>
<EM>
branch</EM>
-<EM>
type</EM>
 is one of: </P>
<DL>
<DT>
<STRONG>
1</STRONG>
</DT><DD> none (flow passes to next instruction)</DD>
<DT>
<STRONG>
j</STRONG>
 </DT><DD>absolute jump</DD>
<DT>
<STRONG>
b</STRONG>
</DT><DD> pc-relative jump (branch)</DD>
<DT>
<STRONG>
r</STRONG>
 </DT><DD>near return</DD>
<DT>
<STRONG>
R</STRONG>
 </DT><DD>far return</DD>
<DT>
<STRONG>
i</STRONG>
</DT><DD> interrupt return</DD>
<DT>
<STRONG>
I</STRONG>
 </DT><DD>interrupt instruction</DD>
</DL>
<P>
Any argument descriptor that doesn't match is to be taken as a literal. E.g. AX as a descriptor means AX is that operand.</P>
<P>
modrm is the modrm byte for the opcode.</P>
<P>
<EM>
bRead</EM>
 is the number of bytes that may be read by the instruction, if one of its operands is in memory.</P>
<P>
 <EM>
bWritten</EM>
 is the number of bytes that may be written by the instruction, if one of its operands is in memory.</P>
<P>
<EM>
inst</EM>
 is the decoded form of the instruction. If not enough bytes were given to decode the instruction, <EM>
inst</EM>
 is returned as empty.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Stepping through code:finishing a frame">
 </A>
<A NAME="IX_finish Swat command">
 </A>
finish</H1>

<PRE CLASS="syntax">finish [&lt;frame num&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;finish&quot;</DT><DD>finish executing the current frame</DD>
<DT>
&quot;finish 3&quot;</DT><DD>finish executing up to the third frame</DD>
</DL>
<P>
Finish the execution of a frame.</P>

<UL>
<LI>
The &lt;frame num&gt; argument is the number of the frame to finish. If none is specified then the current frame is finished up. The number to use is the number which appears in a backtrace.</LI>
<LI>
The machine continues to run until the frame above is reached.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_4.htm#IX_backtrace Swat command:command reference">backtrace</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Stepping through code:finishing a frame">
 </A>
<A NAME="IX_finishframe Swat command">
 </A>
finishframe</H1>

<PRE CLASS="syntax">finishframe [&lt;frame-token&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;finishframe $cur&quot;</DT><DD>
Run the machine to continue until it has returned from a particular stack frame.</DD>
</DL>
<P>
Allows the machine to continue until it has returned from a particular stack frame.</P>

<UL>
<LI>
No FULLSTOP event is dispatched when the machine actually finishes executing in the given frame. The caller must dispatch it itself, using the &quot;event&quot; command.</LI>
<LI>
The command returns zero if the machine finished executing in the given frame; non-zero if it was interrupted before that could happen. </LI>
<LI>
The argument is a frame token, as returned by the &quot;frame&quot; command.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_event Tcl structure">event</A>,
<A HREF="../../Tools/SwatRef/SR_f.htm#IX_frame Swat command:command reference">frame</A>,
<A HREF="../../Tools/SwatRef/SR_d.htm#IX_finish Swat command">finish</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">elist ...</A> 
<!-- to next --> | <A HREF="SR_e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">flagwin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
