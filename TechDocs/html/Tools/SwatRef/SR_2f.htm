<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_2f.htm,v 1.1 97/06/27 16:00:52 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: varwin ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">twalk ...</A> 
<!-- to next --> | <A HREF="SR_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">wclear ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Display windows in Swat:displaying variable">
 </A>
<A NAME="IX_varwin Swat command">
 </A>
varwin</H1>

<PRE CLASS="syntax">varwin &lt;num-lines&gt; &lt;var-name&gt; </PRE>



<H1 CLASS="refHeading">
<A NAME="IX_Source code:viewing with Swat">
 </A>
<A NAME="IX_view Swat command">
 </A>
view</H1>

<PRE CLASS="syntax">view [&lt;args&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;view foo.goc&quot;</DT><DD>
Bring up <STRONG CLASS="fileName">
foo.goc</STRONG>
 in the source window.</DD>


</DL>
<P>
View a file in Swat.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2f.htm#IX_view-default Swat command">view-default</A>,
<A HREF="../../Tools/SwatRef/SR_29.htm#IX_srcwin Swat command">srcwin</A>.



<H1 CLASS="refHeading">
<A NAME="IX_view-default Swat command">
 </A>
view-default</H1>

<PRE CLASS="syntax">view-default [patient]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;view-default spool&quot;</DT><DD>
 sets the default view to the spool patient.</DD>
<DT>
&quot;view-default&quot;</DT><DD>
 turns off the view default.</DD>


</DL>
<P>
If the view-default is set the view command will automatically look for source files from that patient. If it's not set then the view command will look for files from the current patient.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2f.htm#IX_view Swat command">view</A>,
<A HREF="../../Tools/SwatRef/SR_29.htm#IX_srcwin Swat command">srcwin</A>.



<H1 CLASS="refHeading">
<A NAME="IX_vistree Swat command">
 </A>
<A NAME="IX_Trees:displaying visual, with Swat">
 </A>
<A NAME="IX_Visual objects:displaying tree with Swat">
 </A>
vistree</H1>

<PRE CLASS="syntax">vistree [&lt;address&gt;] [&lt;instance field&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;vistree&quot;</DT><DD>print the visual tree starting at *DS:SI</DD>
<DT>
&quot;vistree -i&quot;</DT><DD>print the visual tree under the mouse</DD>
<DT>
&quot;vistree @23 VI_optFlags&quot;</DT><DD>
print the visual tree with opt flags</DD>
<DT>
&quot;vistree *uiSystemObj&quot;</DT><DD>
starts the visual tree at the root of the system.</DD>


</DL>
<P>
Print out a visual tree.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to an object in the generic tree. This defaults to *DS:SI. The `-i' flag for an implied grab may be used.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
<LI>
The &lt;instance field&gt; argument is the offset to any instance data within the VisInstance which should be printed out.</LI>
<LI>
The variable &quot;printNamesInObjTrees&quot; can be used to print out the actual app-defined labels for the objects, instead of the class, where available. This variable defaults to false.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vup Swat command:command reference">vup</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Visual objects:displaying ancestors with Swat">
 </A>
<A NAME="IX_vup Swat command:command reference">
 </A>
<A NAME="IX_Trees:displaying visual ancestors with Swat">
 </A>
vup</H1>

<PRE CLASS="syntax">vup [&lt;address&gt;] [&lt;instance field&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;vup&quot;</DT><DD>print the visual object at *DS:SI and its ancestors</DD>
<DT>
&quot;vup @23 VI_optFlags&quot;</DT><DD>
print the states of object @23 and its ancestors</DD>
<DT>
 &quot;vup -i&quot;</DT><DD> print the visual object under the mouse and the object's ancestors</DD>


</DL>
<P>
Print a list of the object and all of its visual ancestors.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to an object in the visual tree. This defaults to *DS:SI. The `-i' flag for an implied grab may be used.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
<LI>
The &lt;instance field&gt; argument is the offset to any instance data within the GenInstance which should be printed out.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vistree Swat command">vistree</A>,
<A HREF="../../Tools/SwatRef/SR_11.htm#IX_gup Swat command:command reference">gup</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_wait Swat command">
 </A>
wait</H1>

<PRE CLASS="syntax">wait</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;wait&quot;</DT><DD>Wait for the target PC to halt.</DD>


</DL>
<P>
This is used after the machine has been continued with &quot;continue-patient&quot; to wait for the machine to stop again. Its use is usually hidden by calling &quot;cont&quot; or &quot;next&quot;.</P>

<UL>
<LI>
This returns 0 if the patient halted naturally (because it hit a breakpoint), and 1 if it was interrupted (by the user typing Ctrl+C to Swat). </LI>
<LI>
Most procedures won't need to use this function.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_brk Tcl structure:command reference">brk</A>,
<A HREF="../../Tools/SwatRef/SR_14.htm#IX_ibrk Swat command">ibrk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_waitForPatient Swat command">
 </A>
waitForPatient</H1>

<PRE CLASS="syntax">var waitForPatient [(1|0)]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var waitForPatient 0&quot;</DT><DD>
Tells Swat to return to the command prompt after continuing the machine.</DD>


</DL>
<P>
Determines whether the command-level patient-continuation commands (step, next, and cont, for example) will wait for the machine to stop before returning.</P>

<UL>
<LI>
The effect of this is to return to the command prompt immediately after having issued the command. This allows you to periodically examine the state of the machine without actually halting it. </LI>
<LI>
The output when the machine does stop (e.g. when it hits a breakpoint) can be somewhat confusing. Furthermore, this isn't fully tested, so it should probably be set to 0 only in somewhat odd circumstances.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2a.htm#IX_step Swat command">step</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_next Swat command">next</A>,
<A HREF="../../Tools/SwatRef/SR_6.htm#IX_cont Swat command:command reference">cont</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_int Swat command">int</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Threads:waking up with Swat">
 </A>
<A NAME="IX_wakeup Swat command">
 </A>
<A NAME="IX_Patients:waking up with Swat">
 </A>
wakeup</H1>
<P>
Wait for a given patient/thread to wake up. WHO is of the same form as the argument to the &quot;switch&quot; command, (&quot;help switch&quot; to find out more). Leaves you stopped in the kernel in the desired thread's context unless something else causes the machine to stop before the patient/thread wakes up. WHO defaults to the current thread.</P>


<H1 CLASS="refHeading">
<A NAME="IX_Patients:waking up with Swat">
 </A>
<A NAME="IX_Threads:waking up with Swat">
 </A>
<A NAME="IX_wakeup-thread Swat command">
 </A>
wakeup-thread</H1>
<P>
Subroutine to actually wake up a thread. Argument WHO is as for the &quot;switch&quot;command. Returns non-zero if the wakeup was successful and zero if the machine stopped for some other reason.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2e.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">twalk ...</A> 
<!-- to next --> | <A HREF="SR_30.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">wclear ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
