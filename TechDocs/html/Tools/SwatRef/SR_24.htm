<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_24.htm,v 1.1 97/06/27 16:00:25 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: pvismon ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ptext ...</A> 
<!-- to next --> | <A HREF="SR_25.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">read-reg ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Text:displaying text monikers with Swat">
 </A>
<A NAME="IX_Monikers:examining with Swat">
 </A>
<A NAME="IX_pvismon Swat command">
 </A>
pvismon</H1>

<PRE CLASS="syntax">pvismon [&lt;address&gt;] [&lt;text only&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pvismon&quot;</DT><DD>print the moniker at *DS:SI</DD>
<DT>
&quot;pvismon -i 1&quot; </DT><DD>
print a short description of the implied grab object.</DD>


</DL>
<P>
Print a visual moniker structure at an absolute address.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to an object in the visual tree. This defaults to *DS:SI. The `-i' flag for an implied grab may be used.</LI>
<LI>
The &lt;text only&gt; argument returns a shortened description of the structure. Pass a non-zero value to turn on this flag.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_20.htm#IX_pobjmon Swat command">pobjmon</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>,
<A HREF="../../Tools/SwatRef/SR_2f.htm#IX_vistree Swat command">vistree</A>,
<A HREF="../../Tools/SwatRef/SR_11.htm#IX_gup Swat command:command reference">gup</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>,
<A HREF="../../Tools/SwatRef/SR_2c.htm#IX_systemobj Swat command">systemobj</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Virtual memory:examining with Swat">
 </A>
<A NAME="IX_pvmb Swat command">
 </A>
pvmb</H1>

<P>
Prints out the VMBlockHandle for a VM block given the file handle <EM>
H</EM>
 and the VM block handle <EM>
B</EM>
.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Virtual memory:examining with Swat">
 </A>
<A NAME="IX_pvmt Swat command">
 </A>
pvmt</H1>

<PRE CLASS="syntax">pvmt [-p] [-a] [-s] [-c] (&lt;handle&gt; | &lt;segment&gt;)</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pvmt bx&quot; </DT><DD>Print out all used blocks for the open VM file whose file handle is in BX.</DD>
<DT>
&quot;pvmt -as ds&quot; </DT><DD>
Print out all blocks for the open VM file the segment of whose header block is in DS.</DD>


</DL>
<P>
Prints out a map of the VM block handles for a VM file.</P>

<UL>
<LI>
The -p flag will only print out blocks that have the Preserve flag set. Useful for examining object blocks in GeoCalc files, for example. </LI>
<LI>
The -a flag causes pvmt to print out all block handles, not just those that have been allocated. The other two types of block handles are &quot;assigned&quot; (meaning they're available for use, but currently are tracking unused space in the file) and &quot;unassigned&quot; (they're available for use). </LI>
<LI>
The -s indicates the final argument is a segment, not a file handle. This is used only if you're inside the VM subsystem of the kernel. </LI>
<LI>
The -c flag requests a count of the different types of blocks at the end of the printout.</LI>
<LI>
The blocks are printed in a table with the following columns:</LI>
<DL>
<DT>
<STRONG>
han</STRONG>
 </DT><DD>VM block handle (in hex)</DD>
<DT>
<STRONG>
flags</STRONG>
 	D if the block is dirty, </DT><DD>
C if the block is clean, <BR>
- if the block is non-resident, <BR>
L if the block is LMem, <BR>
B if the block has a backup, <BR>
P if the preserve handle bit is set for the block, <BR>
! if the block is locked</DD>
<DT>
<STRONG>
memhan</STRONG>
 </DT><DD>Associated memory handle. Followed by &quot;(d)&quot; if the memory for the block was discarded but the handle retained. Followed by (s) if the memory has been swapped out.</DD>
<DT>
<STRONG>
block type</STRONG>
 </DT><DD>The type of block:</DD>
<DL>
<DT>
             VMBT_USED a normal in-use block,</DT>
<DT>
             VMBT_DUP an in-use block that has been backed up or allocated since the last call to <CODE>
VMSave()</CODE>
</DT>
<DT>
             VMBT_BACKUP a place-holder to keep track of the previous version of a VMBT_DUP block. The uid is the VM block handle to which the file space used to belong.</DT>
<DT>
             VMBT_ZOMBIE a block that has been freed since the last <CODE>
VMSave()</CODE>
. The handle is preserved in case of a <CODE>
VMRevert()</CODE>
 (a VMBT_BACKUP block retains the file space).</DT>
</DL>
<DT>
<STRONG>
uid</STRONG>
 </DT><DD>The &quot;used ID&quot; bound to the block.</DD>
<DT>
<STRONG>
size</STRONG>
 </DT><DD>Number of bytes allocated for the block in the file.</DD>
<DT>
<STRONG>
pos</STRONG>
 </DT><DD>The position of those bytes in the file.</DD>
</DL>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_1e.htm#IX_pgs Swat command">pgs</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Objects:printing visual bounds with Swat">
 </A>
<A NAME="IX_pvsize Swat command">
 </A>
pvsize</H1>

<PRE CLASS="syntax">pvsize [&lt;object&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pvsize&quot; </DT><DD>print the dimensions of the visual object at *ds:si.</DD>


</DL>
<P>
Print out the dimensions of a visual object.</P>

<UL>
<LI>
The object argument is the address to the object to print out. It defaults to *ds:si and is optional. The `-i' flag for an implied grab may be used.</LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Files:printing current directory in Swat">
 </A>
<A NAME="IX_pwd Swat command">
 </A>
pwd</H1>

<PRE CLASS="syntax">pwd</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;pwd&quot;</P>


<P>
Prints the current working directory for the current thread.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_a.htm#IX_dirs Swat command">dirs</A>,
<A HREF="../../Tools/SwatRef/SR_2a.htm#IX_stdpaths Swat command">stdpaths</A>.



<H1 CLASS="refHeading">
<A NAME="IX_quit Swat command:command reference">
 </A>
quit</H1>

<PRE CLASS="syntax">quit [&lt;options&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;quit cont&quot;</DT><DD>continue GEOS and quit swat</DD>
<DT>
&quot;quit det&quot;</DT><DD>detach from the PC and quit swat.</DD>


</DL>
<P>
Stop the debugger and exit.</P>

<UL>
<LI>
The &lt;option&gt; argument may be one of the following: <BR>
<CODE>
continue</CODE>
: continue GEOS and exit swat; <BR>
<CODE>
leave</CODE>
: keep GEOS stopped and exit swat.</LI>
<LI>
 Anything else causes swat to detach and exit.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_a.htm#IX_detach Swat command:command reference">detach</A>.



<H1 CLASS="refHeading">
<A NAME="IX_read-char Swat command">
 </A>
read-char</H1>

<PRE CLASS="syntax">read-char [&lt;echo&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;read-char 0&quot;</DT><DD>
Read a single character from the user and don't echo it.</DD>


</DL>
<P>
Reads a character from the user.</P>


<P>
If &lt;echo&gt; is non-zero or absent, the character typed will be echoed.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_24.htm#IX_read-line Swat command">read-line</A>.



<H1 CLASS="refHeading">
<A NAME="IX_read-line Swat command">
 </A>
read-line</H1>

<PRE CLASS="syntax">read-line [&lt;isTcl&gt; [&lt;initial input&gt; [&lt;special chars&gt;]]]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;read-line&quot;</DT><DD>reads a single line of text.</DD>
<DT>
&quot;read-line 1&quot;</DT><DD>reads a Tcl command.</DD>
<DT>
&quot;read-line 1 {go}&quot;</DT><DD>
reads a Tcl command that starts with &quot;go &quot;</DD>
<DT>
&quot;read-line 1 {} {\e\4}&quot;</DT><DD>
reads a Tcl command, considering escape and control-d cause for immediate return, regardless of whether braces and brackets are balanced</DD>


</DL>
<P>
Reads a single line of input from the user. If optional argument is non-zero, the line is interpreted as a Tcl command and will not be returned until all braces/brackets are balanced. The final newline is stripped. Optional second argument is input to be placed in the buffer first. This input must also be on-screen following the prompt, else it will be lost.</P>

<UL>
<LI>
If &lt;isTcl&gt; is non-zero, the input may span multiple lines, as read-line will not return until all braces and brackets are properly balanced, according to the rules of Tcl. This behavior may be overridden by the &lt;special chars&gt; argument.</LI>
<LI>
If &lt;initial input&gt; is given and non-empty, it is taken to be the initial contents of the input line and may be edited by the user just as if s/he had typed it in. The string is not automatically displayed; that is up to the caller.</LI>
<LI>
&lt;special chars&gt; is an optional string of characters that will cause this routine to return immediately. The character that caused the immediate return is left as the last character of the string returned. You may use standard backslash escapes to specify the characters. This will return even if the user is entering a multi-line Tcl command whose braces and brackets are not yet balanced.</LI>
<LI>
The user's input is returned as a single string with the final newline stripped off.</LI>
</UL>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_23.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">ptext ...</A> 
<!-- to next --> | <A HREF="SR_25.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">read-reg ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
