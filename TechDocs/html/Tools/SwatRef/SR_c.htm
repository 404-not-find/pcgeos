<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_c.htm,v 1.1 97/06/27 16:01:18 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: elist ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">drivewalk ...</A> 
<!-- to next --> | <A HREF="SR_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">fatalerr_auto_explain ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Events:displaying with Swat">
 </A>
<A NAME="IX_elist Swat command">
 </A>
elist</H1>

<PRE CLASS="syntax">elist [&lt;patient&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;elist&quot;</DT><DD>list the events for the current thread and patient</DD>
<DT>
&quot;elist ui&quot;</DT><DD>list the events for the last thread of the ui patient</DD>
<DT>
&quot;elist :1&quot;</DT><DD>list the events for the first thread of the current patient</DD>
<DT>
&quot;elist geos:2&quot;</DT><DD>
list the events for the second thread of the GEOS patient</DD>

</DL>
<P>
Display all events pending for a patient.</P>

<P>
The &lt;patient&gt; argument is of the form `patient:thread'. Each part of the patient name is optional, and if nothing is specified then the current patient is listed.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_28.htm#IX_showcalls Swat command">showcalls</A>.



<H1 CLASS="refHeading">
<A NAME="IX_ensure-swat-attached Swat command">
 </A>
ensure-swat-attached</H1>

<PRE CLASS="syntax">ensure-swat-attached</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;ensure-swat-attached&quot;</DT><DD>
Stop if Swat isn't attached to GEOS.</DD>
</DL>
<P>
If Swat is not attached to GEOS, display an error and stop a command.</P>


<P>
Use this command at the start of any other command that accesses the target PC. Doing so protects the user from the numerous warnings that can result from an attempt to read memory when not attached.</P>



<H1 CLASS="refHeading">
<A NAME="IX_Queues, event:finding with Swat">
 </A>
<A NAME="IX_eqfind Swat command">
 </A>
eqfind</H1>

<PRE CLASS="syntax">eqfind [-p]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;eqfind&quot; list all event queues in the system.</DT>
<DT>
 &quot;eqfind -p&quot; list and print all event queues in the system.</DT>
<P>
Display all event queues in the system.</P>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_c.htm#IX_elist Swat command">elist</A>,
<A HREF="../../Tools/SwatRef/SR_c.htm#IX_eqlist Swat command">eqlist</A>,
<A HREF="../../Tools/SwatRef/SR_c.htm#IX_erfind Swat command">erfind</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Queues, event:displaying events in">
 </A>
<A NAME="IX_Events:displaying">
 </A>
<A NAME="IX_eqlist Swat command">
 </A>
eqlist</H1>

<PRE CLASS="syntax">eqlist &lt;queue handle&gt; &lt;name&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;eqlist 8320 geos:2&quot;</DT><DD>
show the event list for geos:2</DD>
</DL>
<P>
Display all events in a queue.</P>

<UL>
<LI>
The queue handle argument is the handle to a queue.</LI>
<LI>
The name argument is the name of the queue.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_c.htm#IX_elist Swat command">elist</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Events:finding recorded">
 </A>
<A NAME="IX_erfind Swat command">
 </A>
erfind</H1>

<PRE CLASS="syntax">erfind [-p]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;erfind&quot; list all recorded event handles in the system.</DT>
<DT>
&quot;erfind -p&quot; list and print all recorded event handles in the system.</DT>
<P>
Display all record event handles in the system. These are events that have been recorded but not necessarily sent anywhere, so they will not appear in the queue of any thread.</P>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_c.htm#IX_elist Swat command">elist</A>,
<A HREF="../../Tools/SwatRef/SR_c.htm#IX_eqlist Swat command">eqlist</A>,
<A HREF="../../Tools/SwatRef/SR_c.htm#IX_eqfind Swat command">eqfind</A>,
<A HREF="../../Tools/SwatRef/SR_1d.htm#IX_pevent Swat command">pevent</A>.



<H1 CLASS="refHeading">
<A NAME="IX_exit">
 </A>
exit</H1>

<PRE CLASS="syntax">exit &lt;patient&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;exit faxmon&quot;</DT><DD>
Causes the faxmon application to exit.</DD>
</DL>
<P>
Sends messages required to make an application quit.</P>

<P>
This command does nothing when you're stopped at <CODE>
FatalError</CODE>
, as it will wait until the machine is idle before attempting to send <CODE>
MSG_META_QUIT</CODE>
; continuing from <CODE>
FatalError</CODE>
 will cause the system to exit.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_26.htm#IX_run Swat command">run</A>.



<H1 CLASS="refHeading">
<A NAME="IX_exit-thread Swat command">
 </A>
exit-thread</H1>

<PRE CLASS="syntax">exit-thread [&lt;exit-code&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;exit-thread&quot; </DT><DD>
Exit the current thread, returning zero to its parent.</DD>
<DT>
&quot;exit-thread 1&quot; </DT><DD>
Exit the current thread, returning one to its parent.</DD>
</DL>
<P>
Exit the current thread.</P>

<UL>
<LI>
The exit code argument is the status to return to the current thread's parent, which defaults to zero. </LI>
<LI>
Do not invoke this function for an event-driven thread; send it a <CODE>
MSG_META_DETACH</CODE>
 instead. </LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_24.htm#IX_quit Swat command:command reference">quit</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Errors:determining cause of crash">
 </A>
<A NAME="IX_explain Swat command">
 </A>
explain</H1>

<PRE CLASS="syntax">explain</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;explain&quot;</P>
<P>
Print a more detailed description of why the system crashed, if possible.</P>

<UL>
<LI>
This must be run from within the frame of the <CODE>
FatalError()</CODE>
 function. Sometimes GEOS is not quite there. In this case, step an instruction or two and then try the &quot;why&quot; command again.</LI>
<LI>
This simply looks up the enumerated constant for the error code in the AX register in the <CODE>
FatalErrors</CODE>
 enumerated type defined by the geode that called <CODE>
FatalError()</CODE>
. For example, if a function in the kernel called <CODE>
FatalError()</CODE>
, AX would be looked up in geos::FatalErrors, while if a function in your application called <CODE>
FatalError()</CODE>
, this function would look it up in the FatalErrors type defined by your application. Each assembly application defines this enumerated type by virtue of having included <STRONG CLASS="fileName">
ec.def</STRONG>
.</LI>
<LI>
This command also relies on programmers having explained their FatalErrors when defining them.</LI>
<LI>
For certain fatal errors, additional information is provided by invoking the command &lt;patient&gt;::&lt;error code name&gt;, if it exists.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Strings in Swat:explode Swat command">
 </A>
<A NAME="IX_explode Swat command">
 </A>
explode</H1>

<PRE CLASS="syntax">explode &lt;string&gt; [&lt;sep-set&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;explode $args&quot; </DT><DD>
Breaks the string stored in the variable &quot;args&quot; into a list of its individual letters.</DD>
<DT>
 &quot;explode $file /&quot; </DT><DD>
Breaks the string stored in the variable &quot;file&quot; into a list of its components, using &quot;/&quot; as the boundary between components when performing the split.</DD>
<P>
 Breaks a string into a list of its component letters, allowing them to be handled quickly via a foreach loop, or the map or mapconcat commands.</P>


</DL>
<P>
This is especially useful for parsing command switches. </P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_d.htm#IX_foreach Tcl command">foreach</A>,
<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_index Tcl command">index</A>,
<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_range Tcl command">range</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">drivewalk ...</A> 
<!-- to next --> | <A HREF="SR_d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">fatalerr_auto_explain ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
