<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_1b.htm,v 1.1 97/06/27 15:59:58 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: objmessagebrk ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">noStructEnum ...</A> 
<!-- to next --> | <A HREF="SR_1c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">patchin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Messages:monitoring with Swat">
 </A>
<A NAME="IX_Objects:monitoring with Swat">
 </A>
<A NAME="IX_objmessagebrk Swat command">
 </A>
objmessagebrk</H1>

<PRE CLASS="syntax">objmessagebrk [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;objmessagebrk MyObj&quot;</DT><DD>
break whenever a message is sent to MyObj</DD>
<DT>
&quot;objmessagebrk&quot;</DT><DD>
stop intercepting messages</DD>


</DL>
<P>
Break whenever a message is sent to a particular object via ObjMessage.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address to an object to watch for messages being sent to it. If no argument is specified then the watching is stopped.</LI>
<LI>
This breaks whenever a message is sent (before they get on the message queue. This enables one to track identical messages to an object which can be removed.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_1b.htm#IX_objwatch Swat command">objwatch</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_mwatch Swat command">mwatch</A>,
<A HREF="../../Tools/SwatRef/SR_22.htm#IX_procmessagebrk Swat command">procmessagebrk</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Objects:examining with Swat">
 </A>
<A NAME="IX_objwalk Swat command">
 </A>
objwalk</H1>

<PRE CLASS="syntax">objwalk [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	&quot;objwalk&quot;</P>


<P>
Prints out information about an object block.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address of the block to print. The default is the block pointed at by DS.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_17.htm#IX_lhwalk Swat command:command reference">lhwalk</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Objects:monitoring with Swat">
 </A>
<A NAME="IX_objwatch Swat command">
 </A>
<A NAME="IX_Messages:monitoring with Swat">
 </A>
objwatch</H1>

<PRE CLASS="syntax">objwatch [&lt;address&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;objwatch ds:si&quot;</DT><DD>
watch the messages which reach the object at DS:SI</DD>
<DT>
&quot;objwatch MyObject&quot;</DT><DD>
watch the messages which reach MyObject</DD>
<DT>
&quot;objwatch&quot;</DT><DD>
Watch the messages which reach the process object.</DD>


</DL>
<P>
Display message calls that have reached a particular object.</P>

<UL>
<LI>
The &lt;address&gt; argument is the address of the object to watch.</LI>
<LI>
This returns the token of the breakpoint being used to watch message deliveries to the object. Use the &quot;brk&quot; command to enable, disable, or turn off the watching of the object.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_brk Tcl structure:command reference">brk</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_mwatch Swat command">mwatch</A>,
<A HREF="../../Tools/SwatRef/SR_1b.htm#IX_objmessagebrk Swat command">objmessagebrk</A>,
<A HREF="../../Tools/SwatRef/SR_22.htm#IX_procmessagebrk Swat command">procmessagebrk</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Messages:sending with Swat">
 </A>
<A NAME="IX_omfq Swat command">
 </A>
omfq</H1>

<PRE CLASS="syntax">omfq &lt;message&gt; &lt;object&gt; &lt;args&gt;* </PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;omfq MSG_META_QUIT *HelloApp&quot;</DT><DD>
 Sends <CODE>
MSG_META_QUIT</CODE>
 to the *<CODE>
HelloApp</CODE>
 object.</DD>


</DL>
<P>
Forces a message for an object onto its event queue.</P>

<UL>
<LI>
This command calls ObjMessage, passing it <BR>
di=mask MF_FORCE_QUEUE. </LI>
<LI>
&lt;args&gt; is the set of additional parameters to pass to ObjMessage. It consists of &lt;variable/register&gt; &lt;value&gt; pairs, which are passed to the &quot;assign&quot; command. As a special case, if the variable is &quot;push&quot;, the value (a word) is pushed onto the stack and is popped when the message has been queued. </LI>
<LI>
The registers active before you issued this command are always restored, regardless of whether the call to <CODE>
ObjMessage </CODE>
completes successfully. This is in contrast to the &quot;call&quot; command, which leaves you where the machine stopped with the previous state lost. </LI>
<LI>
This command will only work when execution halts in the thread that is to receive
the message.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_5.htm#IX_call Swat command">call</A>.



<H1 CLASS="refHeading">
<A NAME="IX_pappcache">
 </A>
pappcache</H1>

<PRE CLASS="syntax">pappcache</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;pappcache&quot; </DT><DD>Print out current state of the app-cache</DD>


</DL>
<P>
Prints out the current state of the system application cache, for systems operating in transparent launch mode.</P>


<P>
Specifically, this command prints out:</P>
<UL>
<LI>
Applications in the cache (First choice for detaching)</LI>
<LI>
Top full-screen App (Not detached except by another full screen app)</LI>
<LI>
Desk accessories (detached only as last resort)</LI>
<LI>
Application geodes in the process of detaching</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_patch Swat command">
 </A>
patch</H1>

<PRE CLASS="syntax">patch [&lt;addr&gt;]
patch del &lt;addr&gt;*</PRE>


<P>
Patch assists in creating breakpoints that invisibly make small changes to code. This can help the programmer find several bugs without remaking and redownloading.</P>

<UL>
<LI>
If you give no &lt;addr&gt; when creating a patch, the patch will be placed at the most-recently accessed address, as set by the command that most-recently accessed memory (e.g. bytes, words, listi, imem, etc.)</LI>
<LI>
When creating a patch, you are prompted for its contents, each line of which comes from the following command set: </LI>
</UL>
<P CLASS="figCaption">
<A NAME="Commands">
 </A>
<A NAME="patch">
 </A>
<A NAME="61881">
 </A>
Patch Command Set</P>
<TABLE BORDER="1">
<TR><TH>
Form</TH><TH>	Meaning</TH><TH>	Example</TH></TR>

<TR><TD>
&lt;reg&gt; = &lt;value&gt;	</TD><TD>assign value to reg</TD><TD>ax = bx		dl = 5</TD></TR>
<TR><TD>
<A NAME="push">
 </A>
push &lt;reg&gt;|&lt;value&gt;</TD><TD>push value</TD><TD>push ax 	push 45</TD></TR>
<TR><TD>
<A NAME="pop">
 </A>
pop &lt;reg&gt;|&lt;value&gt;</TD><TD>pop value</TD><TD>pop ax 	pop 45</TD></TR>
<TR><TD>
pop</TD><TD>pop nothing (sp=sp+2)</TD><TD>pop</TD></TR>
<TR><TD>
<A NAME="jmp">
 </A>
jmp &lt;address&gt;</TD><TD>change ip</TD><TD>jmp UI_Attach+45</TD></TR>
<TR><TD>
<A NAME="scall">
 </A>
scall &lt;address&gt; &lt;regs&gt;</TD><TD>call routine (save)</TD><TD>scall MemLock ax = 3</TD></TR>
<TR><TD>
<A NAME="mcall">
 </A>
mcall&lt;address&gt; &lt;regs&gt;</TD><TD>call routine (modify)</TD><TD>mcall MemLock ax = 3</TD></TR>
<TR><TD>
<A NAME="xchg">
 </A>
xchg &lt;reg&gt; &lt;reg&gt;</TD><TD>swap two registers</TD><TD>xchg ax bx</TD></TR>
<TR><TD>
<A NAME="set">
 </A>
set &lt;flag&gt;</TD><TD>set condition flag</TD><TD>set CF		set ZF</TD></TR>
<TR><TD>
<A NAME="reset">
 </A>
reset &lt;flag&gt;</TD><TD>reset condition flag</TD><TD>reset CF		reset ZF</TD></TR>
<TR><TD>
<A NAME="if">
 </A>
if &lt;flag&gt;</TD><TD>if flag set then ...</TD><TD>if CF</TD></TR>
<TR><TD>
if !&lt;flag&gt;</TD><TD>if flag reset then ...</TD><TD>if !ZF</TD></TR>
<TR><TD>
if &lt;expr&gt;</TD><TD>if expr then ...</TD><TD>if foo == 4</TD></TR>
<TR><TD>
else</TD><TD></TD><TD></TD></TR>
<TR><TD>
endif</TD><TD></TD><TD></TD></TR>
<TR><TD>
<A NAME="ret">
 </A>
ret</TD><TD>make function return</TD><TD>ret</TD></TR>
<TR><TD>
<A NAME="$">
 </A>
$</TD><TD>terminate input</TD><TD></TD></TR>
<TR><TD>
<A NAME="a">
 </A>
a</TD><TD>abort</TD><TD></TD></TR>
<TR><TD>
&lt;other&gt;</TD><TD>tcl command</TD><TD>echo $foo</TD></TR>
</TABLE>
<P CLASS="figCaption">
&lt;flag&gt; is taken from the set TF, IF, DF, OF, SF, ZF, PF, AF, CF and must be in upper-case.</P>
<P>
The &quot;scall&quot; command has no effect on the current registers (not even for purposes of return values), while the &quot;mcall&quot; command changes whatever registers the function called modifies. See the &quot;call&quot; documentation for the format of &lt;regs&gt;.</P>


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">noStructEnum ...</A> 
<!-- to next --> | <A HREF="SR_1c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">patchin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
