<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_2c.htm,v 1.1 97/06/27 16:00:45 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: symbolCompletion ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">stream ...</A> 
<!-- to next --> | <A HREF="SR_2d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">text-fixup ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_symbolCompletion Swat variable">
 </A>
symbolCompletion</H1>

<PRE CLASS="syntax">var symbolCompletion [(0|1)]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var symbolCompletion 1&quot; </DT><DD>
Enable symbol completion in the top-level command reader.</DD>


</DL>
<P>
This variable controls whether you can ask Swat to complete a symbol for you while you're typing a command. Completion is currently very slow and resource-intensive, so you probably don't want to enable it.</P>

<UL>
<LI>
Even when symbolCompletion is 0, file-name, variable-name, and command- name completion are always enabled, using the keys described below. </LI>
<LI>
When completion is enabled, three keys cause the interpreter to take the text immediately before the cursor and look for all symbols that begin with those characters. The keys are:</LI>
<DL>
<DT>
<STRONG>
 Ctrl+D</STRONG>
 </DT><DD>Produces a list of all possible matches to the prefix.</DD>
<DT>
 <STRONG>
Escape</STRONG>
 </DT><DD>Completes the command as best possible. If the characters typed so far could be the prefix for more than one command, Swat will fill in as many characters as possible.</DD>
<DT>
<STRONG>
 Ctrl+]</STRONG>
 </DT><DD>Cycles through the list of possible symbols, in alphabetical order.</DD>
</DL>
</UL>

<H1 CLASS="refHeading">
<A NAME="IX_sym-default Swat command:command reference">
 </A>
sym-default</H1>

<PRE CLASS="syntax">sym-default [&lt;name&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;sym-default motif&quot;</DT><DD>
Make swat look for any unknown symbols in the patient named &quot;motif&quot; once all other usual places have been searched.</DD>


</DL>
<P>
Specifies an additional place to search for symbols when all the usual places have been searched to no avail.</P>

<UL>
<LI>
The named patient need not have been loaded yet when you execute this command.</LI>
<LI>
A typical use of this is to make whatever program you're working on be the sym-default in your .swat file so you don't need to worry about whether it's the current one, or reachable from the current one, when the machine stops and you want to examine the patient's state.</LI>
<LI>
If you don't give a name, you'll be returned the name of the current sym-default.</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Files:listing with Swat">
 </A>
<A NAME="IX_sysfiles Swat command">
 </A>
<A NAME="IX_Files:DOS files">
 </A>
sysfiles</H1>

<PRE CLASS="syntax">sysfiles</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG></P>
<DL>
<DT>&quot;sysfiles&quot;</DT>

<DD>
Print out all open files from dos's system file table.</DD>
</DL>

<P>
Normally SFT entries that aren't in-use aren't printed. If you give the optional argument &quot;all&quot;, however, all SFT entries, including those that aren't in-use, will be printed.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_10.htm#IX_geosfiles Swat command">geosfiles</A>,
<A HREF="../../Tools/SwatRef/SR_27.htm#IX_sftwalk Swat command">sftwalk</A>,
<A HREF="../../Tools/SwatRef/SR_10.htm#IX_fwalk Swat command">fwalk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Trees:generic:accessing top of, with Swat">
 </A>
<A NAME="IX_systemobj Swat command">
 </A>
systemobj</H1>

<PRE CLASS="syntax">systemobj</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;gentree [systemobj]&quot;</DT><DD>
print the generic tree starting at the system's root</DD>
<DT>
&quot;pobject [systemobj]&quot;</DT><DD>
print the system object</DD>


</DL>
<P>
Prints out the address of the uiSystemObj, which is the top level of the generic tree.</P>

<UL>
<LI>
This command is normally used with gentree as shown above to print out the whole generic tree starting from the top.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_10.htm#IX_gentree Swat command:command reference">gentree</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>.

<H1 CLASS="refHeading">
<A NAME="IX_Target:accessing hierarchy with Swat">
 </A>
<A NAME="IX_target Swat command">
 </A>
target</H1>

<PRE CLASS="syntax">target [&lt;object&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;target&quot; </DT><DD>print target hierarchy from the system object down</DD>
<DT>
 &quot;target -i&quot; </DT><DD>print target hierarchy from implied grab down</DD>
<DT>
 &quot;target ^l4e10h:20h&quot; </DT><DD>
print target hierarchy from ^l4e10h:20h down</DD>
<DT>
 &quot;target [content]&quot; </DT><DD>
print target hierarchy from content under mouse.</DD>


</DL>
<P>
Prints the target hierarchy below an object.</P>

<UL>
<LI>
If no argument is specified, the system object is used. </LI>
<LI>
The special object flags may be used to specify &lt;object&gt;.  For a list of these flags, see pobject.</LI>
<LI>
Remember that the object you start from may have the target within its part of the hierarchy, but still not have the target because something in a different part of the tree has it. </LI>
<LI>
The variable &quot;printNamesInObjTrees&quot; can be used to print out the actual app-defined labels for the objects, instead of the class, where available. </LI>
<P>
	This variable defaults to false. </P>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_e.htm#IX_focus Swat command">focus</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_model Swat command">model</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_mouse Swat command">mouse</A>,
<A HREF="../../Tools/SwatRef/SR_17.htm#IX_keyboard Swat command">keyboard</A>,
<A HREF="../../Tools/SwatRef/SR_1f.htm#IX_pobject Swat command:command reference">pobject</A>.



<H1 CLASS="refHeading">
<A NAME="IX_targetobj Swat command">
 </A>
targetobj</H1>

<PRE CLASS="syntax">targetobj</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;targetobj&quot; </DT><DD>return object with target</DD>
<DT>
&quot;pobj [targetobj]&quot; </DT><DD>
do a pobject on the target object (equivalent to &quot;pobj -t&quot;).</DD>


</DL>
<P>
Returns the object with the target.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2c.htm#IX_target Swat command">target</A>,
<A HREF="../../Tools/SwatRef/SR_e.htm#IX_focus Swat command">focus</A>,
<A HREF="../../Tools/SwatRef/SR_e.htm#IX_focusobj Swat command">focusobj</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_modelobj Swat command">modelobj</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Optimization:tally breakpoints">
 </A>
<A NAME="IX_Breakpoints:tally breakpoints">
 </A>
<A NAME="IX_tbrk Swat command">
 </A>
tbrk</H1>

<PRE CLASS="syntax">tbrk &lt;addr&gt; &lt;condition&gt;*
tbrk del &lt;tbrk&gt;+
tbrk list
tbrk cond &lt;tbrk&gt; &lt;condition&gt;*
tbrk count &lt;tbrk&gt;
tbrk reset &lt;tbrk&gt;
tbrk address &lt;tbrk&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
 &quot;tbrk ObjCallMethodTable&quot; </DT><DD>
Count the number of times ObjCallMethodTable() is called.</DD>
<DT>
&quot;tbrk count 2&quot; </DT><DD>
Find the number of times tally breakpoint number 2 was hit.</DD>
<DT>
 &quot;tbrk reset 2&quot; </DT><DD>
Reset the counter for tbrk number 2 to 0.</DD>
<DT>
&quot;tbrk list&quot; </DT><DD>Print a list of the set tally breakpoints and their current counts.</DD>


</DL>
<P>
This command manipulates breakpoints that tally the number of times they are hit without stopping execution of the machine--the breakpoint is noted and the machine is immediately continued. Such a breakpoint allows for real-time performance analysis, which is nice.</P>

<UL>
<LI>
If you specify one or more &lt;condition&gt; arguments when setting the tally breakpoint, only those stops that meet the conditions will be counted. </LI>
<LI>
The <EM>
condition</EM>
 argument is exactly as defined by the &quot;brk&quot; command, q.v..</LI>
<LI>
When you've set a tally breakpoint, you will be returned a token of the form &quot;tbrk&lt;n&gt;&quot;, where &lt;n&gt; is some number. You use this token, or just the &lt;n&gt;, if you're not a program, wherever &lt;tbrk&gt; appears in the Usage description, above. </LI>
<LI>
There are a limited number of tally breakpoints supported by the stub. You'll know when you've set too many.</LI>
<LI>
&quot;tbrk address&quot; returns the address at which the tbrk was set, as a symbolic address expression.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/Tcl/TTCL_f.htm#IX_brk Tcl structure:command reference">brk</A>,
<A HREF="../../Tools/Tcl/TTCL_f.htm#IX_cbrk Tcl structure:command reference">cbrk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_tcl-debug Swat command">
 </A>
tcl-debug</H1>

<PRE CLASS="syntax">tcl-debug top 
tcl-debug next &lt;tcl-frame&gt;
tcl-debug prev &lt;tcl-frame&gt;
tcl-debug args &lt;tcl-frame&gt;
tcl-debug getf &lt;tcl-frame&gt;
tcl-debug setf &lt;tcl-frame&gt; &lt;flags&gt;
tcl-debug eval &lt;tcl-frame&gt; &lt;expr&gt;
tcl-debug complete &lt;tcl-frame&gt;
tcl-debug next-call </PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var f [tcl-debug top]&quot;</DT><DD>
Sets $f to be the frame at which the debugger was entered.</DD>
<DT>
&quot;var f [tcl-debug next $f]&quot; </DT><DD>
Retrieves the next frame down (away from the top) the Tcl call stack from $f.</DD>


</DL>
<P>
This provides access to the internals of the Tcl interpreter for the Tcl debugger (which is written in Tcl, not C). It will not function except after the debugger has been entered.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_9.htm#IX_debug Swat command">debug</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">stream ...</A> 
<!-- to next --> | <A HREF="SR_2d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">text-fixup ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
