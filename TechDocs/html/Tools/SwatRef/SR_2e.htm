<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_2e.htm,v 1.1 97/06/27 16:00:49 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: twalk ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">text-fixup ...</A> 
<!-- to next --> | <A HREF="SR_2f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">varwin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Timers:displaying with Swat">
 </A>
<A NAME="IX_twalk Swat command">
 </A>
twalk</H1>

<PRE CLASS="syntax">twalk</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;twalk&quot;</DT><DD>print all the timers in the system.</DD>
<DT>
&quot;twalk -o ui&quot; </DT><DD>print all the timers in the system for the ui thread.</DD>
<DT>
 &quot;twalk -a&quot; </DT><DD>print all the timers with the &quot;real&quot; data for the time for time remaining rather than maintaining a total.</DD>


</DL>
<P>
List all the timers in GEOS.</P>



<H1 CLASS="refHeading">
<A NAME="IX_unalias Swat command">
 </A>
unalias</H1>

<PRE CLASS="syntax">unalias &lt;name&gt;+</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;unalias p&quot;</DT><DD>Removes &quot;p&quot; as an alias for print.</DD>


</DL>
<P>
This removes an alias.</P>

<UL>
<LI>
In fact, this actually can be used to delete any command at all, including Tcl procedures and Swat built-in commands. Once they're gone, however, there's no way to get them back.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_3.htm#IX_alias Swat command:command reference">alias</A>.



<H1 CLASS="refHeading">
<A NAME="IX_unassemble Swat command">
 </A>
unassemble</H1>

<PRE CLASS="syntax">unassemble [&lt;addr&gt; [&lt;decode-args&gt;]]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;unassemble cs:ip 1&quot; </DT><DD>
Disassemble the instruction at CS:IP and return a string that shows the values of the arguments involved.</DD>


</DL>
<P>
This decodes data as machine instructions and returns them to you to display as you like. It is not usually typed from the command line.</P>

<UL>
<LI>
The return value is always a four-element list:</LI>
<PRE> {&lt;symbolic-addr&gt; &lt;instruction&gt; &lt;size&gt; &lt;args&gt;}</PRE>
<P>
	 where &lt;symbolic-addr&gt; is the address expressed as an offset from some named symbol, &lt;instruction&gt; is the decoded instruction (without any leading whitespace), &lt;size&gt; is the size of the instruction (in bytes) and &lt;args&gt; is a string displaying the values of the instruction operands, if &lt;decode-args&gt; was given and non-zero (it is the empty string if &lt;decode-args&gt; is missing or 0). </P>
<LI>
If &lt;addr&gt; is missing or &quot;nil&quot;, the instruction at the current frame's CS:IP is returned.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_17.htm#IX_listi Swat command:command reference">listi</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Key bindings in Swat:removing">
 </A>
<A NAME="IX_unbind-key Swat command">
 </A>
unbind-key</H1>

<PRE CLASS="syntax">unbind-key &lt;ascii_value&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;unbind-key \321&quot;</DT><DD>
Unbinds scroll-down key on host machine.</DD>


</DL>
<P>
Unbinds the passed ASCII value.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_3.htm#IX_alias Swat command:command reference">alias</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_bind-key Swat command">bind-key</A>,
<A HREF="../../Tools/SwatRef/SR_11.htm#IX_get-key-binding Swat command">get-key-binding</A>.



<H1 CLASS="refHeading">
<A NAME="IX_undebug Swat command">
 </A>
undebug</H1>

<PRE CLASS="syntax">undebug &lt;proc-name&gt;+</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;undebug fooproc&quot;</DT><DD>
Cease halting execution each time &quot;fooproc&quot; is executing.</DD>


</DL>
<P>
Removes a Tcl breakpoint set by a previous &quot;debug&quot; command.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_9.htm#IX_debug Swat command">debug</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Stack:changing frames">
 </A>
<A NAME="IX_up Swat command">
 </A>
up</H1>

<PRE CLASS="syntax">up [&lt;frame offset&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;up&quot;</DT><DD>move the frame one frame up the stack</DD>
<DT>
&quot;up 4&quot;</DT><DD>move the frame four frames up the stack</DD>


</DL>
<P>
Move the frame up the stack.</P>

<UL>
<LI>
The &lt;frame offset&gt; argument is the number of frame to move up the stack. If none is specified then the current frame is moved up one frame.</LI>
<LI>
This command may be repeated by pressing &lt;Return&gt;.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_4.htm#IX_backtrace Swat command:command reference">backtrace</A>,
<A HREF="../../Tools/SwatRef/SR_a.htm#IX_down Swat command">down</A>.



<H1 CLASS="refHeading">
<A NAME="IX_value Swat command">
 </A>
value</H1>

<PRE CLASS="syntax">value fetch &lt;addr&gt; [&lt;type&gt;]
value store &lt;addr&gt; &lt;value&gt; [&lt;type&gt;]
value hfetch &lt;num&gt;
value hstore &lt;addr-list&gt;
value hset &lt;number-saved&gt;
value log &lt;addr&gt; &lt;stream&gt; [&lt;type&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;value fetch ds:si [type word]&quot; </DT><DD>
Fetch a word from ds:si</DD>
<DT>
&quot;value store ds:si 0 [type word]&quot; </DT><DD>
Store 0 to the word at ds:si</DD>
<DT>
&quot;value hfetch 36&quot; </DT><DD>
Fetch the 36th address list stored in the value history.</DD>
<DT>
&quot;value hstore $a&quot; </DT><DD>
Store the address list in $a into the value history.</DD>
<DT>
&quot;value hset 50&quot;</DT><DD>
Keep track of up to 50 address lists in the value history. </DD>
<DT>
&quot;value log ds:si $s [type word]&quot;</DT><DD>
Fetch a word from ds:si and dump the binary data to stream $s. </DD>


</DL>
<P>
This command allows you to fetch and alter values in the target PC. It is also the maintainer of the value history, which you normally access via @&lt;number&gt; terms in address expressions.</P>

<UL>
<LI>
&quot;value fetch&quot; returns a value list that contains the data at the given address. If the address has an implied data type (it involves a named variable or a structure field), then you do not need to give the &lt;type&gt; argument. </LI>
<P>
	All integers and enumerated types are returned in decimal. 32-bit pointers are returned as a single decimal integer whose high 16 bits are the high 16 bits (segment or handle) of the pointer. 16-bit pointers are likewise returned as a single decimal integer. </P>
<P>
	Characters are returned as characters, with non-printable characters converted to the appropriate backslash escapes (for example, newline is returned as \n). </P>
<P>
	Arrays are returned as a list of value lists, one element per element of the array. </P>
<P>
	Structures, unions and records are returned as a list of elements, each of which is a 3-element list: {&lt;field-name&gt; &lt;type&gt; &lt;value&gt;} &lt;field-name&gt; is the name of the field, &lt;type&gt; is the type token for the type of data stored in the field, and &lt;value&gt; is the value list for the data in the field, appropriate to its data type. </P>
<LI>
You will note that the description of value lists is recursive. For example, if a structure has a field that is an array, the &lt;value&gt; element in the list that describes that particular field will be itself a list whose elements are the elements of the array. If that array were an array of structures, each element of that list would again be a list of {&lt;field-name&gt; &lt;type&gt; &lt;value&gt;} lists. </LI>
<LI>
The &quot;field&quot; command is very useful when you want to extract the value for a structure field from a value list.</LI>
<LI>
As for &quot;value fetch&quot;, you do not need to give the &lt;type&gt; argument to</LI>
<LI>
 &quot;value store&quot; if the &lt;addr&gt; has an implied data type. The &lt;value&gt; argument is a value list appropriate to the type of data being stored, as described above. </LI>
<LI>
&quot;value hstore&quot; returns the number assigned to the stored address list. These numbers always increase, starting from 1. </LI>
<LI>
If no address list is stored for a given number, &quot;value hfetch&quot; will generate an error. </LI>
<LI>
&quot;value hset&quot; controls the maximum number of address lists the value history will hold. The value history is a FIFO queue; if it holds 50 entries, and the 51st entry is added to it, the 1st entry will be thrown out.</LI>

<LI>
&quot;value log&quot; has the same functionality as value fetch except that data fetched from the PC are dumped into the stream as raw binary data.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2.htm#IX_addr-parse Swat command">addr-parse</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>,
<A HREF="../../Tools/SwatRef/SR_d.htm#IX_field Swat command">field</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_2d.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">text-fixup ...</A> 
<!-- to next --> | <A HREF="SR_2f.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">varwin ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
