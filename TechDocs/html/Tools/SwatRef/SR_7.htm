<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_7.htm,v 1.1 97/06/27 16:01:07 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: continue-patient ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_6.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">car ...</A> 
<!-- to next --> | <A HREF="SR_8.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">dbrk ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_continue-patient Swat command">
 </A>
<A NAME="IX_Errors:continuing after with Swat">
 </A>
continue-patient</H1>

<PRE CLASS="syntax">continue-patient</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;continue-patient&quot;</DT><DD>
Allow the target machine to continue executing GEOS.</DD>
<P>
Tell the Swat stub to let the target machine continue where it left off.</P>


</DL>
<P>
This command does not wait for the machine to stop again before it returns; once the machine is running, you're free to do whatever you want, whether it's calling &quot;wait&quot; or examining memory periodically.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2a.htm#IX_step-patient Swat command">step-patient</A>.



<H1 CLASS="refHeading">
<A NAME="IX_cup Swat command">
 </A>
cup</H1>

<PRE CLASS="syntax">cup &lt;class&gt;
cup &lt;object&gt;
cup &lt;flags&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;cup ui::GenDocumentControlClass&quot; </DT><DD>
Print class hierarchy of named class</DD>
<DT>
&quot;cup ^l2850h:0034h&quot; </DT><DD>
Print class hierarchy of object</DD>
<DT>
&quot;cup -f&quot; </DT><DD>Print class hierarchy of focus object</DD>
<DT>
&quot;cup -p&quot; </DT><DD>Print class hierarchy of process</DD>
</DL>
<P>
Walks up the class hierarchy, starting at a given class, printing each class encountered. May be passed an object, in which case the class of the object will be used as a starting place.</P>

<H1 CLASS="refHeading">
<A NAME="IX_current-level Swat command">
 </A>
current-level</H1>

<PRE CLASS="syntax">current-level</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var l [current-level]&quot;</DT><DD>
Store the current interpreter nesting level in $l.</DD>
</DL>
<P>
Returns the number of invocations of &quot;top-level&quot; (i.e. the main command input loop) currently active.</P>

<UL>
<LI>
This is currently used only to modify the command prompt to indicate the current nesting level.</LI>
<LI>
The top-most command loop is level one.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2d.htm#IX_top-level Swat command">top-level</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Registers:current-registers Swat command">
 </A>
<A NAME="IX_current-registers Swat command">
 </A>
<A NAME="IX_Threads:examining registers">
 </A>
current-registers</H1>

<PRE CLASS="syntax">current-registers</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;current-registers&quot;</DT><DD>
Returns a list of the current registers for the current thread.</DD>
</DL>
<P>
Returns all the registers for the current thread as a list of decimal numbers.</P>

<UL>
<LI>
The mapping from element number to register name is contained in the global variable &quot;regnums&quot;, which is an assoc-list whose elements contain the name of the register, then the element number. </LI>
<LI>
For your own consumption, the list is ordered ax, cx, dx, bx, sp, bp, si, di, es, cs, ss, ds, ip, flags. You should use the &quot;regnums&quot; variable when programming, however, as this may change at some point (e.g. to accommodate the additional registers in the 386).</LI>
</UL>



<H1 CLASS="refHeading">
<A NAME="IX_Structures:formatting Swat output">
 </A>
<A NAME="IX_cvtrecord Swat command">
 </A>
cvtrecord</H1>

<PRE CLASS="syntax">cvtrecord &lt;type&gt; &lt;number&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;cvtrecord [symbol find type HeapFlags] 36&quot; </DT><DD>
Return a value list for the number 36 cast to a <CODE>
HeapFlags</CODE>
 record.</DD>
</DL>
<P>
Creates a value list for a record from a number, for use in printing out the number as a particular record using <CODE>
fmtval</CODE>.</P>

<UL>
<LI>
&lt;type&gt; is a type token for a record (or a structure made up exclusively of bitfields). </LI>
<LI>
&lt;number&gt; must be an actual number suitable for the &quot;expr&quot; command. It cannot be a register or variable or some such. Use &quot;getvalue&quot; to obtain an integer from such an expression. </LI>
<LI>
Returns a value list suitable for &quot;value store&quot; or for &quot;fmtval&quot;.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2e.htm#IX_value Swat command">value</A>,
<A HREF="../../Tools/SwatRef/SR_e.htm#IX_fmtval Swat command">fmtval</A>,
<A HREF="../../Tools/Tcl/TTCL_d.htm#IX_expr Tcl command">expr</A>,
<A HREF="../../Tools/SwatRef/SR_11.htm#IX_getvalue Swat command">getvalue</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Timing with Swat">
 </A>
<A NAME="IX_cycles Swat command">
 </A>
cycles</H1>
<P>
Count instruction cycles from now until the given address is reached. Prints out each instruction as it is executed, along with the cycles it took. If no address is given, executes until a breakpoint is hit. Takes the following (optional) flags:</P>
<DL>
<DT>
<STRONG>
 -r</STRONG>
 </DT><DD>Print routines called, the total cycles for each routine, and a running total, not the cycles for each instruction.</DD>
<DT>
<STRONG>
 -i</STRONG>
 </DT><DD>Same as -r, but indents to show calling level. Not recommended for counting cycles over deeply nested routines.</DD>
<DT>
<STRONG>
 -I</STRONG>
 </DT><DD>Same as -i, except uses (#) to indicate call level</DD>
<DT>
<STRONG>
 -f</STRONG>
 </DT><DD>Stop counting when this routine finishes</DD>
<DT>
<STRONG>
 -n</STRONG>
 </DT><DD>Does not whine about interrupts being off</DD>
<DT>
<STRONG>
 -x</STRONG>
 &lt;<STRONG>
routine</STRONG>
&gt; </DT><DD>
Step over calls to &lt;routine&gt;</DD>
<DT>
 -x &lt;<STRONG>
routine</STRONG>
&gt;=&lt;<STRONG>
val</STRONG>
&gt; </DT><DD>
Step over calls to &lt;routine&gt; and assume that the call takes &lt;val&gt; cycles for timing purposes</DD>
</DL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2d.htm#IX_timingProcessor Swat variable">timingProcessor</A>.

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_6.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">car ...</A> 
<!-- to next --> | <A HREF="SR_8.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">dbrk ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
