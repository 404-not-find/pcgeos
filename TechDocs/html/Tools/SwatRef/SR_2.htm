<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_2.htm,v 1.1 97/06/27 16:00:13 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: addr-parse ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">_print ...</A> 
<!-- to next --> | <A HREF="SR_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">alias ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Address expressions in Swat:parsing">
 </A>
<A NAME="IX_addr-parse Swat command">
 </A>
addr-parse</H1>

<PRE CLASS="syntax">addr-parse &lt;addr&gt; [&lt;addr-only&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;addr-parse *ds:si&quot; </DT><DD>
Parse the address &quot;*ds:si&quot; into its handle, offset and data-type components. In this case, the data-type will be &quot;nil&quot;.</DD>
<DT>
 &quot;addr-parse ILLEGAL_HANDLE 0&quot; </DT><DD>
Figures the value for the enumerated constant &quot;ILLEGAL_HANDLE&quot;. The handle for this non-address will be &quot;value&quot;.</DD>
</DL>
<P>
This command parses the address expression into its components, returning a list {&lt;handle&gt; &lt;offset&gt; &lt;type&gt; } as its value.</P>


<UL>
<LI>
This will generate an error if there's an error parsing the &lt;addr&gt; </LI>
<LI>
&lt;handle&gt; is the token for the handle in which the address resides, or &quot;nil&quot; if the address is absolute. This token can be given to the &quot;handle&quot; command for further processing. </LI>
<LI>
&lt;offset&gt; is a decimal number and is the offset of the address within the block indicated by the &lt;handle&gt; token. If &lt;handle&gt; is &quot;nil&quot;, this can be a 32-bit linear address. </LI>
<LI>
&lt;type&gt; is a type token for the data at the given address, if any could be determined. For example the address &quot;ds:bx&quot; has no type, as it's just a memory reference, but &quot;ds:bx.VDE_extraData&quot; will have whatever type the structure field &quot;VDE_extraData&quot; possesses. This token can be passed to the &quot;type&quot; or &quot;value&quot; commands for further processing.</LI>
<LI>
If the expression doesn't refer to data that can be fetched from the patient (e.g. &quot;foo*3&quot;) &lt;handle&gt; will be returned as the string &quot;value&quot; instead of a normal handle token. &lt;offset&gt; is then a value-list for the resulting value, and &lt;type&gt; is the type description by means of which the value list can be interpreted. </LI>
<LI>
The optional &lt;addr-only&gt; argument is zero or non-zero to indicate the willingness or unwillingness, respectively, of the caller to receive a value list in return. If &lt;addr-only&gt; is absent or non-zero, any expression that can only be expressed as a value will generate an error. The single exception to this is if the expression involves pointer arithmetic. For example &quot;pself+1&quot; normally would be returned as a value list for a far pointer, as the result cannot be fetched from the PC. When &lt;addr-only&gt; is absent or non-zero, &quot;addr-parse&quot; pretends the expression was &quot;*(pself+1)&quot;, allowing simple specification of an address by the user for those commands that just address memory.</LI>
<LI>
The &lt;offset&gt; element of the returned list is very useful when you want to allow the user to give you anything, be it a register or a number or an enumerated constant or whatever. You can pass the argument you were given to [index [addr-parse $arg] 1] and end up with an appropriate decimal number. Be sure to pass &lt;addr-only&gt; as 0, however, or else you'll generate an error. </LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2e.htm#IX_value Swat command">value</A>,
<A HREF="../../Tools/Tcl/TTCL_f.htm#IX_handle Tcl structure">handle</A>,
<A HREF="../../Tools/Tcl/TTCL_f.htm#IX_type Tcl structure">type</A>.



<H1 CLASS="refHeading">
<A NAME="IX_addr-preprocess Swat command">
 </A>
addr-preprocess</H1>

<PRE CLASS="syntax"><A NAME="IX_Address expressions in Swat:parsing"> </A>addr-preprocess &lt;addr&gt; &lt;seg-var&gt; &lt;off-var&gt;</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;addr-preprocess $args s o&quot; </DT><DD>
Parse the address expression in $args, storing the segment portion in $s and the offset portion in $o in the current scope.</DD>
</DL>

<P>
Preprocesses an address expression into a form that is easier to manipulate and faster to reparse.</P>

<UL>
<LI>
&lt;seg-var&gt; is the name of a variable in the caller's scope in which the segment of the address is stored. It should be treated as opaque, as it may or may not be numeric. </LI>
<LI>
&lt;off-var&gt; is the name of a variable in the caller's scope in which the offset of the address is stored. This will always be numeric. </LI>
<LI>
Returns the 3-list returned by addr-parse, in case you have a use for the type token stored in the list. </LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_2.htm#IX_addr-parse Swat command">addr-parse</A>.



<H1 CLASS="refHeading">
<A NAME="IX_addr-with-obj-flag Swat command">
 </A>
addr-with-obj-flag</H1>

<PRE CLASS="syntax">addr-with-obj-flag</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var addr [addr-with-obj-flag $addr]&quot; </DT><DD>
If $addr is &quot;-i&quot;, returns the address of the current implied grab.</DD>
</DL>
<P>
This is a utility routine that can be used by any command that deals with objects where the user may reasonably want to operate on the leaf object of one of the hierarchies, or the windowed object under the mouse. It can be given one of a set of flags that indicate where to find the address of the object on which to operate.</P>

<UL>
<LI>
Special values accepted for &lt;address&gt;:</LI>
<DL>
<DT>
            -a </DT><DD><A NAME="IX_GenApplication object">
 </A>
<A NAME="IX_Patients:application object">
 </A>
<A NAME="IX_Objects:application object">
 </A>
the current patient's application object</DD>
<DT>
            -i </DT><DD><A NAME="IX_Mouse:accessing window under, with Swat">
 </A>
the current &quot;implied grab&quot;: the windowed object over which the mouse is currently located</DD>
<DT>
            -f </DT><DD><A NAME="IX_Keyboard:focus">
 </A>
<A NAME="IX_Focus">
 </A>
the leaf of the keyboard-focus hierarchy</DD>
<DT>
            -t </DT><DD><A NAME="IX_Target:finding with Swat">
 </A>
the leaf of the target hierarchy</DD>
<DT>
            -m </DT><DD><A NAME="IX_Model:finding with Swat">
 </A>
the leaf of the model hierarchy</DD>
<DT>
            -c </DT><DD><A NAME="IX_Content:finding with Swat">
 </A>
the content for the view over which the mouse is currently located</DD>
<DT>
            -kg </DT><DD><A NAME="IX_Keyboard:finding keyboard grab with Swat">
 </A>
the leaf of the keyboard-grab hierarchy</DD>
<DT>
            -mg </DT><DD><A NAME="IX_Mouse:finding mouse grab with Swat">
 </A>
the leaf of the mouse-grab hierarchy</DD>
</DL>
<LI>
If &lt;address&gt; is empty, this will return the contents of the local variable &quot;oself&quot; within the current frame, if it has one, or *ds:si </LI>
<LI>
If &lt;address&gt; isn't one of the above, this just returns &lt;address&gt;. </LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_15.htm#IX_impliedgrab Swat command">impliedgrab</A>,
<A HREF="../../Tools/SwatRef/SR_6.htm#IX_content Swat command">content</A>,
<A HREF="../../Tools/SwatRef/SR_e.htm#IX_focusobj Swat command">focusobj</A>,
<A HREF="../../Tools/SwatRef/SR_2c.htm#IX_targetobj Swat command">targetobj</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_modelobj Swat command">modelobj</A>,
<A HREF="../../Tools/SwatRef/SR_17.htm#IX_keyboardobj Swat command">keyboardobj</A>,
<A HREF="../../Tools/SwatRef/SR_19.htm#IX_mouseobj Swat command">mouseobj</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_1.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">_print ...</A> 
<!-- to next --> | <A HREF="SR_3.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">alias ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
