<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: SR_b.htm,v 1.1 97/06/27 16:01:16 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Swat Command Reference: drivewalk ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">delassoc ...</A> 
<!-- to next --> | <A HREF="SR_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">elist ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<H1 CLASS="refHeading">
<A NAME="IX_Files:listing Drives with Swat">
 </A>
<A NAME="IX_drivewalk Swat command">
 </A>
drivewalk</H1>

<PRE CLASS="syntax">drivewalk</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;drivewalk&quot;	</DT><DD>
Prints the table of drives known to the system.</DD>
</DL>
<P>
Prints out all disk drives known to the system, along with their current status.</P>


<UL>
<LI>
The Flags column is a string of single character flags with the following meanings:</LI>
<DL>
<DT>
        L</DT><DD>The drive is accessible to the local machine only, i.e. it's not visible over a network. </DD>
<DT>
           R </DT><DD>The drive is read-only.</DD>
<DT>
           F </DT><DD>Disks may be formatted in the drive.</DD>
<DT>
           A </DT><DD>The drive is actually an alias for a path on another drive.</DD>
<DT>
           B </DT><DD>The drive is busy, performing some extended operation, such as formatting or copying a disk.</DD>
<DT>
            r </DT><DD>The drive uses disks that may be removed by the user.</DD>
<DT>
           n</DT><DD> The drive is accessed over the network. </DD>
</DL>
<LI>
The Locks column can reflect one of three states: </LI>
<DL>
<DT>
          none </DT><DD>The drive isn't being accessed by any thread. </DD>
<DT>
          Excl</DT><DD>The drive is locked for exclusive access by a single thread.</DD>
<DT>
          &lt;num&gt; </DT><DD>The drive is locked for shared access for a particular disk, whose handle is the number. This is followed by the volume name of the disk, in square brackets.</DD>
</DL>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_a.htm#IX_diskwalk Swat command">diskwalk</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Stack:examining with Swat">
 </A>
<A NAME="IX_dumpstack Swat command">
 </A>
dumpstack</H1>

<PRE CLASS="syntax">dumpstack [&lt;address&gt;] [&lt;length&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;dumpstack&quot;	</DT><DD>
dump the stack at SS:SP</DD>
<DT>
&quot;ds ds:si 10&quot;  </DT><DD>
dump ten words starting at DS:SI</DD>
</DL>
<P>
Dump the stack and perform some simple interpretation upon it.</P>


<UL>
<LI>
The &lt;address&gt; argument is the address of the list of words to dump. This defaults to SS:SP.</LI>
<LI>
The &lt;length&gt; argument is the number of words to dump. This defaults to 50.</LI>
<LI>
This dumps the stack and tries to make symbolic sense of the values, in terms of handles, segments, and routines.</LI>
<LI>
After doing a dumpstack, if you just hit return without entering a new command, by default you will see a continuation of the dumpstack.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_4.htm#IX_backtrace Swat command:command reference">backtrace</A>.



<H1 CLASS="refHeading">
<A NAME="IX_dwordIsPtr Swat variable">
 </A>
dwordIsPtr</H1>

<PRE CLASS="syntax">var dwordIsPtr [(0|1)]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;var dwordIsPtr 1&quot; </DT><DD>
Tells &quot;print&quot; to print all double-word variables as if they were far pointers (segment:offset).</DD>
</DL>
<P>
Controls whether dword (a.k.a. long) variables are printed as 32-bit unsigned integers or untyped far pointers.</P>


<UL>
<LI>
For debugging C code, a value of 0 is more appropriate, while 1 is best for debugging assembly language. </LI>
<LI>
The default value for this variable is 1.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_15.htm#IX_intFormat Swat variable">intFormat</A>,
<A HREF="../../Tools/SwatRef/SR_20.htm#IX_print Swat command:command reference">print</A>.



<H1 CLASS="refHeading">
<A NAME="IX_dwords Swat command:command reference">
 </A>
<A NAME="IX_Memory:examining with Swat">
 </A>
dwords</H1>

<PRE CLASS="syntax">dwords [&lt;address&gt;] [&lt;length&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;dwords&quot;</DT><DD>lists 4 double words at DS:SI</DD>
<DT>
&quot;dwords ds:di 8&quot;</DT><DD>
lists 8 double words at DS:DI</DD>
</DL>
<P>
Examine memory as a dump of double words (32 bit hex numbers).</P>


<UL>
<LI>
The &lt;address&gt; argument is the address to examine. If not specified, the address after the last examined memory location is used. If no address has be examined then DS:SI is used for the address.</LI>
<LI>
The &lt;length&gt; argument is the number of dwords to examine. It defaults to 4.</LI>
<LI>
Pressing &lt;Return&gt; after this command continues the list.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_5.htm#IX_bytes Swat command:command reference">bytes</A>,
<A HREF="../../Tools/SwatRef/SR_30.htm#IX_words Swat command:command reference">words</A>,
<A HREF="../../Tools/SwatRef/SR_15.htm#IX_imem Swat command:command reference">imem</A>,
<A HREF="../../Tools/SwatRef/SR_4.htm#IX_assign Swat command:command reference">assign</A>.



<H1 CLASS="refHeading">
<A NAME="IX_ec Swat command">
 </A>
<A NAME="IX_Errors:error checking level">
 </A>
ec</H1>

<PRE CLASS="syntax">ec [&lt;args&gt;]</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;ec&quot;</DT><DD>list the error checking turned on</DD>
<DT>
&quot;ec +vm&quot;</DT><DD>add vmem file structure checking</DD>
<DT>
&quot;ec all&quot;</DT><DD>turn on all error checking (slow)</DD>
<DT>
&quot;ec save none&quot;</DT><DD>
save the current error checking and then use none</DD>
<DT>
&quot;ec restore&quot;</DT><DD>use the saved error checking flags</DD>
</DL>
<P>
Get or set the error checking level active in the kernel.</P>

<UL>
<LI>
The following arguments may occur in any combination:</LI>
<DL>
<DT>
 &lt;<STRONG>
flag</STRONG>
&gt;</DT><DD>turn on &lt;flag&gt;</DD>
<DT>
+&lt;<STRONG>
flag</STRONG>
&gt;</DT><DD>turn on &lt;flag&gt;</DD>
<DT>
-&lt;<STRONG>
flag</STRONG>
&gt;</DT><DD>turn off &lt;flag&gt;</DD>
<DT>
<STRONG>
all</STRONG>
</DT><DD>turn on all error checking flags</DD>
<DT>
<STRONG>
ALL</STRONG>
</DT><DD>turn on all error checking flags</DD>
<DT>
<STRONG>
none</STRONG>
</DT><DD>turn off all error checking flags</DD>
<DT>
<STRONG>
sum</STRONG>
 &lt;<STRONG>
handle</STRONG>
&gt;</DT><DD>
<A NAME="IX_Memory:monitoring checksum with Swat">
 </A>
turn on checksum checking for the memory block with the given handle (&quot;ec sum bx&quot;). The current contents of the block will be summed and that sum regenerated and checked for changes at strategic points in the system (e.g. when a call between modules occurs).</DD>
<DT>
-<STRONG>
sum</STRONG>
</DT><DD>turn off checksum checking</DD>
<DT>
<STRONG>
save</STRONG>
</DT><DD>save the current error checking</DD>
<DT>
<STRONG>
restore</STRONG>
</DT><DD>restore the saved error checking flags
 where &lt;flag&gt; may be one of the following:</DD>
<DL>
<DT>
<STRONG>
analVM</STRONG>
</DT><DD><A NAME="IX_Virtual memory:error checking">
 </A>
perform over-aggressive checking of vmem files</DD>
<DT>
<STRONG>
graphics</STRONG>
</DT><DD>graphics checking</DD>
<DT>
<STRONG>
heapFree</STRONG>
</DT><DD><A NAME="IX_Heap:error checking">
 </A>
heap free block checking</DD>
<DT>
<STRONG>
lmemFree</STRONG>
</DT><DD><A NAME="IX_Local memory:error checking">
 </A>
lmem free area checking</DD>
<DT>
<STRONG>
lmemInternal</DT><DD>
</STRONG>
internal lmem error checking</DD>
<DT>
<STRONG>
lmemObject</DT><DD>
</STRONG>
<A NAME="IX_Objects:lmem object error checking">
 </A>
lmem object checking</DD>
<DT>
<STRONG>
normal</STRONG>
</DT><DD>normal error checking</DD>
<DT>
<STRONG>
region</STRONG>
</DT><DD>region checking segment extensive</DD>
<DT>
<STRONG>
segment</STRONG>
</DT><DD>adds register checking to Swat. If this flag is turned on, Swat will check whether ds and es are valid memory handle at various points in the debugging cycle by calling <CODE>
ECCheckSegment()</CODE>
.<A NAME="IX_Registers:error checking">
 </A>
</DD>
<DT>
<STRONG>
lmemMove</STRONG>
</DT><DD>force lmem blocks to move whenever possible</DD>
<DT>
<STRONG>
unlockMove</DT><DD>
</STRONG>
forces unlocked blocks to move whenever possible. This ensures that your code isn't referencing into an unstable block location. I.e., a block which may move, but usually doesn't , therefore causing non-reproducible (and quite frustrating) errors. </DD>
<DT>
<STRONG>
vm</STRONG>
</DT><DD><A NAME="IX_Virtual memory:error checking">
 </A>
vmem file structure checking</DD>
<DT>
<STRONG>
vmemDiscard</DT><DD>
</STRONG>
force vmem blocks to be discarded if possible</DD>
</DL>
</DL>
<LI>
If there isn't an argument, `ec' reports the current error checking flags.</LI>
<LI>
Each time GEOS is run the ec flags are cleared. The saved flags are preserved between sessions. The ec flags may be saved and then restored after restarting GEOS so that the flag settings are not lost when restarting GEOS.</LI>
</UL>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_30.htm#IX_why Swat command:command reference">why</A>.



<H1 CLASS="refHeading">
<A NAME="IX_Formatting Swat output">
 </A>
<A NAME="IX_echo Swat command">
 </A>
echo</H1>

<PRE CLASS="syntax">echo [-n] &lt;string&gt;+</PRE>
<P CLASS="refField"><STRONG>
Examples:</STRONG>	</P>
<DL>
<DT>
&quot;echo -n yes?&quot;</DT><DD>
Prints &quot;yes?&quot; without a newline.</DD>
<DT>
&quot;echo hi mom&quot;</DT><DD>
Prints &quot;hi mom&quot; followed by a newline.</DD>
</DL>
<P>
Prints its arguments, separated by spaces.</P>


<P>
If the first argument is &quot;-n&quot;, no newline is printed after the arguments.</P>
<P CLASS="refField"><STRONG>
See Also:</STRONG> <A HREF="../../Tools/SwatRef/SR_e.htm#IX_flush-output Swat command">flush-output</A>.


<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="SR_a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">delassoc ...</A> 
<!-- to next --> | <A HREF="SR_c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">elist ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
