<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TTools_13.htm,v 1.1 97/06/27 16:02:21 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Command Line Arguments</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Using Tools</A>: 13.3 <A HREF="TTools_10.htm">pmake</A>: 
Command Line Arguments</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTools_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">13.2 How to Customize pmake</A> 
<!-- to next --> | <A HREF="TTools_14.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">13.4 Contents of a Makefile</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The <CODE>
pmake</CODE>
 program comes with a wide variety of flags to choose from. They must be passed in the following order: flags (if any), variable assignments (if any), target (if any).</P>
<PRE>pmake [flags] [variables] [target]</PRE>
<P>
The flags are as follows:</P>
<DL>
<DT>
<STRONG>
-d</STRONG>
 <STRONG>
info</STRONG>
</DT><DD>This causes <CODE>
pmake</CODE>
 to print out debugging information that may prove useful to you. The <EM>info</EM> parameter is a string of single characters that tell <CODE>
pmake</CODE>
 what aspects you are interested in. Most of these options will make little sense to you unless you've dealt with Make before. Just remember where this table is and come back to it as you read on. The characters and the information they produce are as follows:</DD>
<DL>
<DT>
<STRONG>
*</STRONG>
</DT><DD>All debugging information.</DD>
<DT>
<STRONG>
c</STRONG>
</DT><DD>Conditional evaluation.</DD>
<DT>
<STRONG>
d</STRONG>
 </DT><DD>The searching and caching of directories.</DD>
<DT>
<STRONG>
m</STRONG>
</DT><DD>The making of each target: what target is being examined; when it was last modified; whether it is out-of-date; etc.</DD>
<DT>
<STRONG>
p</STRONG>
</DT><DD>Makefile parsing.</DD>
<DT>
<STRONG>
r</STRONG>
</DT><DD>Remote execution.</DD>
<DT>
<STRONG>
s</STRONG>
</DT><DD>The application of suffix-transformation rules. </DD>
<DT>
<STRONG>
t</STRONG>
</DT><DD>The maintenance of the list of targets.</DD>
<DT>
<STRONG>
v</STRONG>
</DT><DD>Variable assignment.</DD>
</DL>
<P>
Of these, the &quot;m&quot; and &quot;s&quot; flags will be most useful.</P>
<DT>
<STRONG>
-f</STRONG>
 <STRONG>
file</STRONG>
</DT><DD>Specify a makefile to read different from the default (MAKEFILE). If <EM>file </EM>is &quot;-&quot;, <CODE>
pmake</CODE>
 uses the standard input. This is useful for making &quot;quick and dirty&quot; makefiles.</DD>
<DT>
<STRONG>
-h</STRONG>
</DT><DD>Prints out a summary of the various flags <CODE>
pmake</CODE>
 accepts. It can also be used to find out what level of concurrence was compiled into the version of <CODE>
pmake</CODE>
 you are using (look at -J and -L) and various other information on how <CODE>
pmake</CODE>
 is configured.</DD>
<DT>
<STRONG>
-i</STRONG>
 </DT><DD>If you give this flag, <CODE>
pmake</CODE>
 will ignore non-zero status returned by any of its shells. It's like placing a &quot;-&quot; before all the commands in the makefile.</DD>
<DT>
<STRONG>
-k</STRONG>
 </DT><DD>This is similar to -i in that it allows <CODE>
pmake</CODE>
 to continue when it sees an error, but unlike -i where <CODE>
pmake</CODE>
 continues blithely as if nothing went wrong, -k causes it to recognize the error and only continue work on those things that don't depend on the target, either directly or indirectly (through depending on something that depends on it), whose creation returned the error. (The &quot;k&quot; is for &quot;keep going&quot;.)</DD>
<DT>
<STRONG>
-n</STRONG>
 </DT><DD>This flag tells <CODE>
pmake</CODE>
 not to execute the commands needed to update the out-of-date targets in the makefile. Rather, <CODE>
pmake</CODE>
 will simply print the commands it would have executed and exit. This is particularly useful for checking the correctness of a makefile. If <CODE>
pmake</CODE>
 doesn't do what you expect it to, it's a good chance the makefile is wrong.</DD>
<DT>
<STRONG>
-p</STRONG>
 <STRONG>
number</STRONG>
 </DT><DD>You should never have to use this option; it is used for debugging <CODE>
pmake</CODE>
. This causes <CODE>
pmake</CODE>
 to print its input in a reasonable form, though not necessarily one that would make immediate sense to anyone but a <CODE>
pmake</CODE>
 expert. The <EM>
number </EM>
is a bitwise-or of 1 and 2 where 1 means it should print the input before doing any processing and 2 says it should print it after everything has been re-created. Thus &quot;-p 3&quot;would print it twice--once before processing and once after (you might find the difference between the two interesting). </DD>
<DT>
<STRONG>
-q</STRONG>
</DT><DD>If you give <CODE>
pmake</CODE>
 this flag, it will not try to re-create anything. It will just query to see if anything is out-of-date and exit non-zero if so.</DD>
<DT>
<STRONG>
-s</STRONG>
 </DT><DD>This silences <CODE>
pmake</CODE>
, preventing it from printing commands before they're executed. It is the equivalent of putting an &quot;@&quot; before every command in the makefile.</DD>
<DT>
<STRONG>
-t</STRONG>
 </DT><DD>Rather than try to re-create a target, <CODE>
pmake</CODE>
 will simply &quot;touch&quot; it so as to make it appear up-to-date. If the target didn't exist before, it will when <CODE>
pmake</CODE>
 finishes, but if the target did exist, it will appear to have been updated.</DD>
<DT>
<STRONG>
-D</STRONG>
 <STRONG>
var</STRONG>
 </DT><DD>Allows you to define a variable to have 1 as its value. The variable is a global variable, not a command-line variable. This is useful mostly for people who are used to the C compiler arguments and those using conditionals, which are described in <A HREF="TTools_15.htm#42979"> Conditional Statements</A>
, below.</DD>
<DT>
<STRONG>
-I</STRONG>
 <STRONG>
directory</STRONG>
 </DT><DD>Tells <CODE>
pmake</CODE>
 another place to search for included makefiles.</DD>
<DT>
<STRONG>
-W</STRONG>
 </DT><DD>Suppresses <CODE>
pmake</CODE>
's warnings. Note that tools which <CODE>
pmake</CODE>
 invokes (Goc, Glue, etc.) may still print out warnings of their own.</DD>
</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTools_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_12.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">13.2 How to Customize pmake</A> 
<!-- to next --> | <A HREF="TTools_14.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">13.4 Contents of a Makefile</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
