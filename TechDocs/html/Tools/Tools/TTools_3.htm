<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TTools_3.htm,v 1.1 97/06/27 16:02:32 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> File Types</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Using Tools</A>: 3 
File Types</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Typical Development Session</A> 
<!-- to next --> | <A HREF="TTools_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Esp</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
You may be curious to know what sorts of files you'll be working with. If you have to work with someone else's code, then being able to find your away around their files (knowing which are sources, which are objects, and which are chaff) can be very useful.</P>
<DL>
<DT>
<STRONG>
*.goc</STRONG>
<A NAME="IX_.goc files[;goc files]">
 </A>
 </DT><DD>These are Goc source files. You will write these files. They contain both standard C code and GEOS constructs (such as objects and messages).</DD>
<DT>
<STRONG>
*.goh</STRONG>
<A NAME="IX_.goh files[;goh files]">
 </A>
</DT><DD>These are Goc header files. You will write these files and include others. They provide definitions used by your .goc files (in the same relation as between standard C source and header files). Unlike standard C header files, these are included using the @include Goc keyword.</DD>
<DT>
<STRONG CLASS="fileName">
*.poh</STRONG>
<A NAME="IX_.ph files[;ph files]">
 </A>
<A NAME="IX_.poh files[;poh files]">
 </A>
, <STRONG CLASS="fileName">
*.ph</STRONG>
</DT><DD>These are files generated to optimize the @inclusion of .goh files. Goc will automatically generate these when they don't already exist.</DD>
<DT>
<STRONG CLASS="fileName">
*.doh</STRONG>
<A NAME="IX_.dh files[;dh files]">
 </A>
<A NAME="IX_.doh files[;doh files]">
 </A>
, <STRONG CLASS="fileName">
*.dh</STRONG>
</DT><DD>These are files generated to optimize the @inclusion of .goh files. They contain dependency information.</DD>
<DT>
<STRONG>
*.c</STRONG>
<A NAME="IX_.c files[;c files]">
 </A>
</DT><DD>These are standard C source files. You may write these as source files, using only standard ANSI C constructions. The Goc preprocessor will create .c files from .goc files. Thus, if you see two files with the same prefix, but one has the .c suffix and the other has the .goc suffix, then you know that the first was created from the second.</DD>
<DT>
</DT><DD>Note that Goc will create the generated .c file in the directory where it is invoked. Thus if your development tree contains files PROG\DIR1\CODE.GOC and PROG\DIR2\CODE.GOC, then if you convert these using Goc from the PROG directory, then one of the generated .c files will overwrite the other. Thus, you should never give .goc files the same prefix, even if they are in different directories.</DD>
<DT>
<STRONG>
*.h</STRONG>
<A NAME="IX_.h files[;h files]">
 </A>
</DT><DD>These are standard C header files. You may write these and include them using the ANSI C #include directive.</DD>
<DT>
<STRONG>
*.asm</STRONG>
<A NAME="IX_.asm files[;asm files]">
 </A>
</DT><DD>These are standard GEOS assembly source files, which may be assembled with the Esp assembler, if you have it. They may contain both standard assembly and Esp constructs.</DD>
<DT>
<STRONG>
*.def</STRONG>
<A NAME="IX_.def files[;def files]">
 </A>
 </DT><DD>These are standard GEOS assembly header files, which you may write or include if you have access to the Esp assembler.</DD>
<DT>
<STRONG>
*.mk, makefile</DT><DD>
</STRONG>
<A NAME="IX_Makefiles">
 </A>
<A NAME="IX_.mk files[;mk files]">
 </A>
These are &quot;makefiles,&quot; files which contain scripts which the <CODE>
pmake</CODE>
 tool will interpret and use to automatically compile and link your geode. In a source directory there will be a file called MAKEFILE (created with the <CODE>
mkmf</CODE>
 tool) and probably a file called DEPENDS.MK (created by calling <CODE>
pmake</CODE>
 <CODE>
depend</CODE>
). If you wish to customize how your geode is made, you will probably write a file called LOCAL.MK, containing your custom makefile script. The INCLUDE directory contains several .mk files, which will be #included by other makefiles.</DD>
<DT>
<STRONG>
*.gp</STRONG>
<A NAME="IX_.gp files[;gp files]">
 </A>
 </DT><DD><A NAME="IX_Geode parameters files">
 </A>
<A NAME="IX_Glue parameters files">
 </A>
These are &quot;Glue parameter&quot; or &quot;geode parameter&quot; files, which will give the Glue linker information necessary when linking a geode. You will write this file. The <CODE>
pmake</CODE>
 program assumes that a geode's .gp file will have name <EM>geode</EM>.GP, where <EM>geode</EM> is taken from the name of the directory containing the geode's source (e.g. in the example above, <CODE>
pmake</CODE>
 would expect the .gp file to be named PROG.GP).</DD>
<DT>
<STRONG>
*.ldf </STRONG>
<A NAME="IX_.ldf files[;ldf files]">
 </A>
</DT><DD><A NAME="IX_Library definition files">
 </A>
These are library definition files. Glue uses these files when linking your geode; they determine how your calls to a GEOS library will be encoded. If you are writing a library, then you will create one of these files by means of a <CODE>
pmake lib</CODE>
. The <CODE>
pmake</CODE>
 program looks for .ldf files in the INCLUDE\LDF directory.</DD>
<DT>
<STRONG>
*.rev</STRONG>
<A NAME="IX_.rev files[;rev files]">
 </A>
 </DT><DD><A NAME="IX_Revision files">
 </A>
This is a revision file, used to keep track of a program's revision and protocol levels (useful for tracking compatibility). The <CODE>
pmake</CODE>
 tool will look for a file with name <CODE>
geode</CODE>
.REV, where <EM>geode</EM> is taken from the name of the directory containing the geode's source (e.g. in the example above, <CODE>
pmake</CODE>
 would expect the .rev file to be named PROG.REV). The <CODE>
pmake</CODE>
 program uses <CODE>
grev</CODE>
 to create and maintain the .rev file; you should use grev yourself when you need to signal a major revision.</DD>
<DT>
<STRONG CLASS="fileName">
*.rsc</STRONG>
<A NAME="IX_.rsc files[;rsc files]">
 </A>
</DT><DD>Localization resource file. This file contains information which will be used by the ResEdit localization tool.</DD>
<DT>
<STRONG>
*.obj</STRONG>
<A NAME="IX_Object files">
 </A>
<A NAME="IX_.obj files[;obj files]">
 </A>
</DT><DD>These are object files. These are files created by a C compiler or Esp which may be linked to form an executable. The <CODE>
pmake</CODE>
 program uses Glue to link the object files.</DD>
<DT>
<STRONG>
*.ebj</STRONG>
<A NAME="IX_.ebj files[;ebj files]">
 </A>
</DT><DD>These are error-checking object files. GEOS supports the notion of &quot;error-checking code.&quot; When you write your programs, you can mark some commands as &quot;error checking commands.&quot; These commands might make sure that a routine is passed valid arguments or perhaps purposefully destroy some information which was not guaranteed preserved by a routine. Such commands may prove time-consuming but are useful for making sure that an application is robust. The <CODE>
pmake</CODE>
 program will create two versions of your application--one which includes the EC (Error Checking) code, and one which doesn't. Run the EC program to check for correctness, but use the non-EC version when the program should be fast (i.e. this is the version you should give to your customers).</DD>
<P>
The .obj files will be linked to form a non-EC executable; .ebj files to form an EC executable.</P>
<DT>
<STRONG>
*.geo</STRONG>
<A NAME="IX_Geode files">
 </A>
<A NAME="IX_.geo files[;geo files]">
 </A>
</DT><DD>This is a Geode, a GEOS executable (either an application, library, or driver), the end result of your efforts. These are the files containing the code for GEOS programs which the user will interact with. They are created by linking together a number of .obj files, with additional information provided by a .gp file. You will place these files in your GEOS testing directory on your target machine (along with *ec.geo files, described below).</DD>
<DT>
<STRONG>
*ec.geo</STRONG>
<A NAME="IX_ec.geo files">
 </A>
<A NAME="IX_EC files">
 </A>
</DT><DD>This is an error checking geode. (See above for quick descriptions of error checking code and geodes.) They are created by linking together a number of .obj and .ebj files, with additional information provided by a .gp file.</DD>
<DT>
<STRONG>
*.sym</STRONG>
<A NAME="IX_Symbol files">
 </A>
<A NAME="IX_.sym files[;sym files]">
 </A>
</DT><DD>This is a symbol file, containing symbolic debugging information which the Swat debugger can use to access the geode's data structures.</DD>
<DT>
<STRONG>
*ec.sym</STRONG>
<A NAME="IX_ec.sym files">
 </A>
 </DT><DD>This is the symbol file of the error checking version of a geode.</DD>
<DT>
<STRONG>
tmp*.*</STRONG>
<A NAME="IX_tmp files">
 </A>
</DT><DD>These are temporary files which <CODE>
pmake</CODE>
 will create and destroy while making your executable. The <CODE>
pmake</CODE>
 program uses these files to pass arguments to the other tools. Thus, if you see a file of this name in your directory and you didn't create it, you can assume that <CODE>
pmake</CODE>
 was interrupted in a recent make and was unable to erase the file (and thus it is safe for you to erase it).</DD>
<DT>
<STRONG>
.tcl</STRONG>
, <STRONG>
.tlc</STRONG>
</DT><DD>These are Tcl files, files containing Tool Command Language source code, used by the Swat debugging tool. The <STRONG CLASS="fileName">
.tcl</STRONG>
 files contain Tcl source code, the <STRONG CLASS="fileName">
.tlc</STRONG>
 files contain compiled Tcl code. The source code may be edited by any text editor and Swat will interpret it; compiled code runs more quickly, but can only be changed by editing the source code and re-compiling.</DD>
</DL>
<P>
If you are writing a GEOS C application, you will write the following types of files:</P>
<UL>
<LI>
Source files: .goc files, optional .c files.</LI>
<LI>
Glue parameters file: <EM>geode</EM>.GP.</LI>
<LI>
Optional header files: .goh files, .h files.</LI>
<LI>
Optional custom make file: LOCAL.MK.</LI>
</UL>
<P>
After you have made your geode the first time (creating a makefile with <CODE>
mkmf</CODE>
, a dependencies file with <CODE>
pmake depend</CODE>
, and the geode itself with <CODE>
pmake</CODE>
), your directory should contain the following additional file types:</P>
<UL>
<LI>
Intermediary C files: .c files (made by transforming .goc files).</LI>
<LI>
Makefile: MAKEFILE </LI>
<LI>
Dependencies file: DEPEND.MK </LI>
<LI>
Revision file: <EM>geode</EM>.REV. </LI>
<LI>
Object files: .obj and .ebj files.</LI>
<LI>
Symbol files: .sym files</LI>
<LI>
Geodes: .geo files.</LI>
</UL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Typical Development Session</A> 
<!-- to next --> | <A HREF="TTools_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 Esp</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
