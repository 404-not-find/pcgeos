<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TTools_12.htm,v 1.1 97/06/27 16:02:19 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> How to Customize pmake</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Using Tools</A>: 13.2 <A HREF="TTools_10.htm">pmake</A>: 
<A NAME="65382">
 </A>
How to Customize pmake</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTools_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">13.1 Copyright Notice and Acknowledgment</A> 
<!-- to next --> | <A HREF="TTools_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">13.3 Command Line Arguments</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
For most applications, executing <CODE>
mkmf</CODE>
 will generate a perfect makefile. However, you may be creating an unusual geode or have some makefile definitions which you want to include. Fortunately, there are ways to customize your make environment without having to build a MAKEFILE from scratch.</P>
<P>
<A NAME="IX_local.mk makefile">
 </A>
Makefiles can #include other makefiles. If you have a file named LOCAL.MK in your make directory, then the standard makefile generated by mkmf will include it; if you wish to customize your makes, you can create a LOCAL.MK file and fill it with appropriate make directives.</P>
<P>
Depending on how much customization you need to do, you may wish to read on to find out about makefile syntax. However, there are several simple things you can do without learning too much about makefiles.</P>
<PRE># Pass extra flags to Goc:
<A NAME="IX_GOCFLAGS makefile variable"> </A>GOCFLAGS		+= <EM>flag1 flag2</EM></PRE>
<PRE># Pass extra flags to your C compiler:
<A NAME="IX_CCOMFLAGS makefile variable"> </A>CCOMFLAGS		+= <EM>flag1 flag2</EM></PRE>
<PRE># Pass extra flags to the Esp assembler (if you have
# that tool):
<A NAME="IX_ASMFLAGS makefile variable"> </A>ASMFLAGS		+= <EM>flag1 flag2</EM></PRE>
<PRE># Pass extra flags to the Glue linker:
<A NAME="IX_LINKFLAGS makefile variable"> </A>LINKFLAGS 		+= <EM>flag1 flag2</EM></PRE>
<PRE># Look somewhere special for .GOC files
# (This pattern applies to any suffix):
.PATH.GOC 		: $(ROOT_DIR)\<EM>DIR1</EM> \<EM>DIR2</EM></PRE>
<PRE># Specify geode name:
<A NAME="IX_GEODE makefile variable"> </A>GEODE 		= NAME</PRE>
<PRE># Set NO_EC variable (which signals that we don't
# want to make an Error Checking version):
<A NAME="IX_NO_EC makefile variable"> </A>NO_EC 		= 1</PRE>
<PRE># If your preprocessor is not reachable via the 
# Path environment variable:
<A NAME="IX_CPP makefile variable"> </A>CPP 		= <EM>vol</EM>:\<EM>path</EM>\<EM>name</EM></PRE>
<PRE># If your C compiler is not reachable via the Path
# environment variable:
<A NAME="IX_CCOM makefile variable"> </A>CCOM 		= <EM>vol</EM>:\<EM>path</EM>\<EM>name</EM></PRE>
<PRE># Include some other make file
#include &quot;OTHERMF.MK&quot;
# Include the standard makefile directives
# This will include INCLUDE\GEODE.MK:
#include &lt;$(SYSMAKEFILE)&gt;</PRE>

<H5 CLASS="CodeTitle Script">


Sample local.mk Files</H5>
<PRE>---FINGER\LOCAL.MK
# Local Makefile for FPaint
#  FPaint is stored in a directory called FINGER. This would normally confuse
#  pmake, which expects the geode name to be the same as the directory name.
#  Let us, therefore, alert pmake to the geode's real name:
GEODE		= FPAINT
# This was the only thing we wanted to change, so include standard definitions:
#include &lt;$(SYSMAKEFILE)&gt;</PRE>
<PRE>---PROMO\LOCAL.MK
# Local Makefile for Promo
#  Promo uses some clip art that isn't in or below its source directory, so we
#  tell pmake where to look for it:
.PATH.GOH 	: $(CSOURCE_PATHS) $(CINCLUDE_DIR) $(ROOT_DIR)\LOGOART
# This program contains no Error Checking code (See 
# <A HREF="../../Programming/GOCLanguage/index.htm">the GOC Programming chapter</A> for information
# about EC code. So we tell pmake not to bother making an Error Checking
# version:
NO_EC = 1
# Include the standard system makefile:
#include &lt;$(SYSMAKEFILE)&gt;</PRE>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TTools_10.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TTools_11.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">13.1 Copyright Notice and Acknowledgment</A> 
<!-- to next --> | <A HREF="TTools_13.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">13.3 Command Line Arguments</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
