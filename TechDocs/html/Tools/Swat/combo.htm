<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Swat Introduction</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_14136">
 </A>
Swat Introduction

</H1>
<P>
<A NAME="index.htm_IX_Debugging">
 </A>
<A NAME="index.htm_IX_Swat">
 </A>
Most programmers are familiar with the process of debugging code. Many, however, will not be familiar with the issues of debugging programs in an entirely object-oriented, multithreaded system in which memory is often sharable by multiple programs. Because this type of system presents not only incredible power but also a new class of potential bugs, the GEOS tool kit provides a new class of symbolic debugger.</P>
<P>
Swat is more than just a debugging program; it is an extensible debugging environment which you can tailor to your needs. Because all Swat commands are programmed in a special language called <EM>
Tool Command Language</EM>
 (Tcl), you can write your own commands or extend existing commands. Tcl was originally developed by Professor John Ousterhout at the University of California in Berkeley, California. Swat itself was developed during a project headed by professor Ousterhout for a distributed multiprocessing operating system; Geoworks gained permission from the university to use and modify Swat. Since then, we have tailored it for use with GEOS; thus, it is the most appropriate debugger for any GEOS programmer.</P>
<P>
Swat is essentially a system debugger, as opposed to an application debugger. This is an important distinction, due to the multithreaded nature of individual GEOS applications--each application may have more than one thread, and a system debugger greatly eases the debugging process for such applications. Swat also has many other features that make it preferable to other debuggers:</P>
<UL>
<LI>
Ideal for multithreaded environment<BR>
Because Swat was initially designed for debugging multithreaded system software, it is ideal for use on multithreaded applications in the GEOS environment.</LI>
<LI>
Extremely flexible<BR>
Nearly every part of Swat you will use is written in Tcl. Swat allows you to create your own commands or extend existing commands by using the Tcl language; you can examine, print, and modify just about any data structure using various Tcl commands. For large applications and projects, the customization this offers can be a tremendous asset.</LI>
<LI>
Extensive access to data structures<BR>
You can examine any byte in the test PC's memory while Swat is attached. You can examine any basic or complex data structure. For example, the &quot;pobject&quot; command (&quot;print object&quot;) prints the entire instance data of the specified object. You can specify memory locations with symbols, registers, addresses, pointers, or a number of other ways.</LI>
<LI>
Easy modification of code and data<BR>
Using Tcl commands, you can change the contents of a register or memory location. You can also create patches to be executed at certain points in your program; this speeds up debugging by reducing the fix-compile-download-attach-debug cycle to a simple fix-debug cycle.</LI>
<LI>
Interactive single-step facility<BR>
By using Swat's single-step command, you can execute a single instruction at a time. Swat shows you all the inputs going in to the instruction so you can more easily keep track of what's going on.</LI>
<LI>
Facilities for watching messages and objects<BR>
Swat has several &quot;watch&quot; facilities. For example, you can let GEOS continue executing while watching a particular object; Swat will display all messages sent to the object, along with the data passed. You can also watch a particular message; Swat will display the destination and passed data each time the message is sent.</LI>
<LI>
On-line help system<BR>
Swat commands are documented on-line. The <CODE>
help</CODE>
 facility is available from the basic Swat command prompt, and you can use it either as an interactive help shell or to get help on one particular topic. </LI>
</UL>
<P>
Swat also offers many other features that both novices and experts will use. As you gain familiarity with Swat while using Swat with the sample applications and with your own programs, you will discover your own preferred methods of debugging.</P>

<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#TSwatCm_1.htm">1 DOS Command Line Options</A><BR>
&nbsp;&nbsp;<A HREF="#TSwatCm_2.htm">2 Notation</A><BR>
&nbsp;&nbsp;<A HREF="#TSwatCm_3.htm">3 Address Expressions</A><BR>
&nbsp;&nbsp;<A HREF="#TSwatCm_4.htm">4 On-line Help</A><BR>
&nbsp;&nbsp;<A HREF="#TSwatCm_5.htm">5 Essential Commands</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#TSwatCm_6.htm">5.1 Cycle of Development</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#TSwatCm_7.htm">5.2 Attaching and Detaching</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#TSwatCm_8.htm">5.3 Breakpoints and Code Stepping</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#TSwatCm_9.htm">5.4 Examining and Modifying Memory</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#TSwatCm_a.htm">5.5 Other Important Commands</A><BR>
&nbsp;&nbsp;<A HREF="#TSwatCm_b.htm">6 Additional Features</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="TSwatCm_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 1 
DOS Command Line Options</H2>
<P>
<A NAME="TSwatCm_1.htm_IX_Swat:command line options">
 </A>
To use Swat, you must have the <CODE>
pccom</CODE>
 tool running on the target machine. You may then invoke Swat on the development machine. Swat takes the following command-line flags:</P>
<DL>
<DT>
<STRONG>
-e</DT><DD></STRONG>
Start up the non-error-checking version of the loader on the target machine.</DD>
<DT>
<STRONG>
-C</STRONG></DT><DD>
Disable symbol file path caching.</DD>
<DT>
<STRONG>
-h</STRONG>
</DT><DD>Displays a usage line.</DD>
<DT>
<STRONG>
-k</DT><DD></STRONG>
Use a non-standard kernel file. </DD>
<DT>
<STRONG>
-n</STRONG>
 </DT><DD>Start up the non-error-checking version of GEOS on the target machine.</DD>
<DT>
<STRONG>
-r</STRONG>
</DT><DD>Start up the error-checking version of GEOS on the target machine.</DD>
<DT>
<STRONG>
-s</STRONG>
</DT><DD>Start up the error-checking loader on the target machine.</DD>
<DT>
<STRONG>
-D</DT><DD></STRONG>
You will only need to use this flag if debugging Swat.</DD>
</DL>
<P>
If you have set up your communications incorrectly, Swat will have problems. (Often these problems don't show up when sending or receiving files; Swat demands more from the communications programs than pcsend and pcget.)</P>
<P>
<A NAME="TSwatCm_1.htm_IX_Errors:Swat timeout errors">
 </A>
One common problem arises when other devices are generating interrupts which are not being successfully masked out. If, for instance, you have a network card which is operating on IRQ 2, you must make sure that either the <CODE>
pccom</CODE>
 tool or else Swat is called with the /i:a option. Swat will intercept IRQ level 5 by default. To determine what number to pass with the /i, take the IRQ level, add 8, and express the result in hexadecimal.</P>
<P>
If Swat complains that it is &quot;timing out&quot; on some operation, you may have your communication speed set too high. Try changing the baud rate field in PTTY to a lower value. </P>
<P>
<A NAME="TSwatCm_1.htm_IX_Swat:SWAT.CFG file">
 </A>
<A NAME="TSwatCm_1.htm_IX_SWAT.CFG file">
 </A>
<A NAME="TSwatCm_1.htm_IX_.CFG file (SWAT.CFG file)[;CFG file]">
 </A>
Normally, Swat insists that any geodes it examines should have their symbolic information in the appropriate subdirectory of your root GEOSSDK development directory--the possible subdirectories are Appl, Library, Driver, and Loader. To ask Swat to look in different places for these sorts of files, change the SWAT.CFG file in your PCGEOS\BIN directory. You may also specify a fifth directory in which to look for geodes. You may specify absolute pathnames in this file; if you give relative paths, they will be assumed to start at the directory specified with your ROOT_DIR variable.</P>
<P>
<A NAME="TSwatCm_1.htm_IX_default:line in SWAT.CFG">
 </A>
If you add a &quot;default&quot; line to your SWAT.CFG file, that tells Swat where to look for .SYM files as a last resort. To save hard disk space, some developers delete rarely-accessed .SYM files from their hard drive, leave their SDK CD in the CD-ROM drive, and specify the GEOSSDK directory as the default place to look for .SYM files:</P>
<PRE>default D:\GEOSSDK</PRE>
<HR>
<A NAME="TSwatCm_2.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 2 
Notation</H2>
<P>
The rest of this chapter is devoted to interacting with Swat once you have it running. Most of this is done by means of commands typed at a prompt. Some Swat commands may have subcommands, some may have flag options, and some combine the two. Others may have special options; all, however, are documented with the following conventions.</P>
<UL>
<LI>
<CODE>
command (alternative1|alternative2|...|alternativeN)<BR>
</CODE>
The parentheses enclose a set of alternatives separated by vertical lines (in C, the bitwise OR operator character). For example, the expression <CODE>
quit (cont|leave)</CODE>
 means that either <CODE>
quit cont</CODE>
 or <CODE>
quit leave </CODE>
can be used.</LI>
<LI>
<CODE>
command &lt;type_of_argument&gt;<BR>
</CODE>
The angled brackets enclose the type of an argument rather than the actual string to be typed. For example, <CODE>
&lt;addr&gt;</CODE>
 indicates an address expression and <CODE>
&lt;argument&gt;</CODE>
 indicates some sort of argument.</LI>
<LI>
<CODE>
command [optional_argument]<BR>
</CODE>
The brackets enclose optional arguments to the command. For example, the command <CODE>
alias [&lt;word&gt;[&lt;command&gt;]]</CODE>
 could have zero, one, or two arguments because the <EM>command</EM> and <EM>word</EM> arguments are optional. Another example would be the command <CODE>
objwalk [&lt;addr&gt;]</CODE>
, which may take zero arguments if it is meant to use the default address or one argument if the user gives it a particular address to look at.</LI>
<LI>
<CODE>
* +<BR>
</CODE>
An asterisk following any of the previous constructs indicates zero or more repetitions of the construct may be typed. A plus sign indicates one or more repetitions of the construct may be used. For example, <CODE>
unalias</CODE>
 <CODE>
&lt;word&gt;*</CODE>
 can be the <CODE>
unalias</CODE>
 command by itself, or it can be followed by a list of words to be unaliased.</LI>
</UL>
<HR>
<A NAME="TSwatCm_3.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 3 
Address Expressions</H2>
<P>
<A NAME="TSwatCm_3.htm_IX_Swat:address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_Address expressions in Swat:notation">
 </A>
Address expressions are used as arguments to any Swat command that accesses memory. For example, the <CODE>
pobject</CODE>
 command takes an address expression as an argument and prints out information about the object at that address. An address expression can be a symbol name, which is just the name of a pointer, or a <A NAME="TSwatCm_3.htm_IX_Symbol paths in Swat address expressions">
 </A>
<EM>
symbol path</EM>
. A symbol path has the following structure, where scope is the name of a patient, module, function, structure type, union type, enumerated type, or assembly record type:</P>
<PRE>(&lt;<EM>scope</EM>&gt;::)+&lt;<EM>symbol</EM>&gt;</PRE>
<P>
Some of the more common symbol path formats are:</P>
<PRE>&lt;<EM>module</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>patient</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>patient</EM>&gt;::&lt;<EM>module</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>structure name</EM>&gt;::&lt;<EM>field name</EM>&gt;</PRE>
<P>
The symbol path is used when there is more than one symbol of a given name or if a symbol of a different application is needed. A symbol can be represented in a variety of ways: the name of an object, a field of a structure, a register/number combination, a number from the address history, an element of an array, nested Tcl commands, or a Tcl variable. Array indexing is used as follows:</P>
<PRE>&lt;addr&gt; [&lt;n&gt;]</PRE>
<P>
which will return the zero-based element <CODE>
n</CODE>
 from the given <CODE>
addr</CODE>
, even if <CODE>
addr</CODE>
 is not an array.</P>
<P>
Another important way of representing the symbol is as a <CODE>
segment:offset</CODE>
 pair. In this, the segment is a constant, a register, a module, or a handle ID given as <CODE>
^h&lt;id&gt;</CODE>
 where <CODE>
id</CODE>
 is a constant or register.</P>

<P>
There are several operators which are used to make memory examination and manipulation easier in Swat. These operators are shown below (in order of highest precedence to lowest):</P>
<UL>
<LI>
<CODE>
^h<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_^h:in Swat address expressions[;h:inSwat address expressions]">
 </A>
<A NAME="TSwatCm_3.htm_IX_Handles:dereferencing in Swat expressions">
 </A>
The <EM>
carat-h</EM>
 is used to dereference a memory handle when representing an address as a<CODE>
handle:offset</CODE>
 pair (this is also known as a &quot;heap pointer&quot; representation) or when accessing a particular block of memory. It is often used in the situation when a memory handle is in one register (such as BX) and the offset is in another register (such as SI). This is similar to the ^l operator (below), but it requires an offset into the block rather than a chunk handle. The <CODE>
^h</CODE>
 operator is used thus:</LI>
<PRE>[hello3:0] 6 =&gt; <STRONG>print ^hdx:ALB_appRef</STRONG></PRE>
<LI>
<CODE>
.<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_.:in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_Structures:accessing fields in Swat address expressions">
 </A>
The <EM>
period</EM>
 is used to access a field in a structure. For example, to get the top bound part of a rectangle structure stored as a global variable:</LI>
<PRE>[hello3:0] 8 =&gt; <STRONG>print theRect.R_top</STRONG></PRE>
<LI>
<CODE>
+ -<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_- (Hyphen):in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_+:in Swat address expressions">
 </A>
The addition and subtraction operators are used to add and subtract symbols to and from other symbols and constants. If two symbols in the same segment are subtracted, a constant will be the result.</LI>
<LI>
<CODE>
^l<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_Local memory:address expressions in Swat">
 </A>
<A NAME="TSwatCm_3.htm_IX_^l:in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_optr:dereferencing in Swat address expressions">
 </A>
The <EM>
carat-l</EM>
 is used to dereference an optr, a pointer in the form <CODE>
handle:chunk-handle</CODE>
 (this is also known as a &quot;local memory pointer&quot;). This is similar to the <CODE>
^h</CODE>
 operator, but <CODE>
^l</CODE>
 requires a chunk handle rather than an offset. If an optr is stored in CX:DX, for example, the ^l operator could be used to dereference it as follows:</LI>
<PRE>[hello3:0] 11 =&gt; <STRONG>pobj ^lCX:DX
</STRONG>[hello3:0] 12 =&gt; <STRONG>pobj ^l0x43d0:0x022</STRONG></PRE>
<LI>
<CODE>
:<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_Pointers:segment/offset pairs in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_\::in Swat address expressions">
 </A>
The <EM>
colon</EM>
 is the segment/offset operator, used to separate the segment and offset in a <EM>
segment:offset</EM>
 pair.</LI>
<PRE>[hello3:0] 13 =&gt; <STRONG>pobj ^hCX:DX
</STRONG>[hello3:0] 14 =&gt; <STRONG>pobj 0x43d0:0x022
</STRONG>[hello3:0] 15 =&gt; <STRONG>pobj INTERFACE:HelloView</STRONG></PRE>
<LI>
<CODE>
*<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_*:in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_Pointers:dereferencing in Swat address expressions">
 </A>
The <EM>
asterisk</EM>
 is a pointer-dereferencing operator, as in the C programming language:</LI>
<PRE>[hello3:0] 16 =&gt; <STRONG>print SubliminalTone
</STRONG>@5: SubliminalTone = 7246h</PRE>
<PRE>[hello3:0] 17 =&gt; <STRONG>print *(&amp;SubliminalTone)</STRONG></PRE>
<PRE>@6: *(&amp;SubliminalTone) = 7246h</PRE>
<LI>
<CODE>
^v<BR>
</CODE>
<A NAME="TSwatCm_3.htm_IX_Virtual memory:handles in Swat address expressions">
 </A>
<A NAME="TSwatCm_3.htm_IX_^v:in Swat address expressions">
 </A>
The <EM>
carat-v </EM>
is the virtual memory operator, used to get to the base of a block that is in a Virtual Memory file given the file handle and VM block handle. The correct usage of the <CODE>
^v</CODE>
 operator is:</LI>
<PRE>^v&lt;file&gt;:&lt;VM_block&gt;</PRE>
</UL>
<P>
Much of the time the type of data stored at the address given by the address expression is implicit in the expression. Sometimes in ambiguous situations (using code as data), however, the type of data must be explicitly stated in the address expression. This is done by indicating the type of the data followed by a space and then a normal address expression. For example, in the expression</P>
<PRE>dword ds:14h</PRE>
<P>
the data at <CODE>
ds:14h</CODE>
 will be treated as a double word.</P>
<HR>
<A NAME="TSwatCm_4.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 4 
On-line Help</H2>
<P>
Swat provides on-line help, both for looking up Swat topics and GEOS reference material.</P>
<P>
To get help on a specific Swat command, you simply type the following, where the command is the argument.</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>help</STRONG> <EM CLASS="CodeArgsType">&lt;cmd&gt;</EM></PRE>
<P>
To use Swat's interactive, menu-based help system, simply type the following:</P>
<PRE>[hello3:0] 8 =&gt; <STRONG>help</STRONG></PRE>
<P>
The menu-based system provides a tree of help topics which are organized into subjects. If you are looking for Swat commands having to do with a subject not covered in the help tree, you might try using the <CODE>
apropos</CODE>
 command.</P>
<P>
To get information about a GEOS topic, use the doc functions.</P>

<H6 CLASS="RefETitle">
<A NAME="TSwatCm_4.htm_IX_apropos Swat command">
 </A>
apropos</H6>
<PRE CLASS="Ref Swat Call">apropos [&lt;string&gt;]</PRE>
<P>
The <CODE>
apropos</CODE>
 command searches the list of commands and command help for all entries containing &lt;string&gt;. It lists each command and its synopsis. The string may actually be a partial word.</P>


<H6 CLASS="RefETitle">
help</H6>
<PRE CLASS="Ref Swat Call">help [&lt;command&gt;]</PRE>
<P>
<A NAME="TSwatCm_4.htm_IX_Swat:online help">
 </A>
<A NAME="TSwatCm_4.htm_IX_help Swat command">
 </A>
There are two different ways to use the help command. The first is to enter the <EM>
interactive help mode</EM>
 using the <CODE>
help</CODE>
 command with no arguments, and the second is to use the <CODE>
help</CODE>
 command with a particular command as an argument.</P>
<DL>
<DT>
<STRONG>
Interactive help mode</DT><DD>
</STRONG>
The interactive help mode consists of a tree of commands and topics identified by different numbers. If one of the numbers is typed, information about that particular topic or command is displayed. Some of the topics have their own subtrees (indicated by the ellipses following the topic heading) which follow the same numbering format. The interactive help mode is used when looking for a certain style of command but the name of the command is not known (see <A HREF="#TSwatCm_4.htm_38779"> The Help Tree</A>
).</DD>
<P CLASS="figCaption">
<A NAME="TSwatCm_4.htm_38779">
 </A>
The Help Tree</P>
<PRE>(geos:0) 198 =&gt; <STRONG>help</STRONG><BR>
top-most level of the help tree:
 
 0 FINISH 			6 memory... 			12 step...
 1 advanced... 			7 object... 			13 support...
 2 breakpoint... 			8 print... 			14 swat_navigation...
 3 crash... 			9 running... 			15 window...
 4 file... 			10 source...
 5 heap... 			11 stack...<BR>
Type &quot;help&quot; for help, &quot;menu&quot; to redisplay the menu, &quot;0&quot; to exit.
Type a topic (or its number) to display it.
help:top&gt;</PRE>
<DT>
<STRONG>
help &lt;</STRONG>
<EM>command</EM><STRONG>
&gt;</DT><DD>
</STRONG>
When <CODE>
help</CODE>
 is typed with another command as an argument, information about that command is displayed (the same information as in the interactive help mode). This command is frequently used in order to get fast help on a particular command. (See <A HREF="#TSwatCm_4.htm_60545"> The help Command</A>
.)</DD>
<P CLASS="figCaption">

<A NAME="TSwatCm_4.htm_60545">
 </A>
The help Command</P>
<PRE CLASS="figCaption">(geos:0) 200 =&gt; <STRONG>help help
</STRONG>Help for help:
Functions for manipulating/accessing the help tree
==============================================================================
This is the user-level access to the on-line help facilities for Swat. If
given a topic (e.g. &quot;brk&quot;) as its argument, it will print all help strings
defined for the given topic (there could be more than one if the same name is
used for both a variable and a procedure, for instance). If invoked without
arguments, it will enter a browsing mode, allowing the user to work his/her
way up and down the documentation tree
==============================================================================
(geos:0) 201 =&gt;</PRE>
</DL>

<HR>
<A NAME="TSwatCm_5.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5 
Essential Commands</H2>
<P>
This section covers the function and usage of some of the most important Swat commands. These commands fall into the following command groups:</P>
<UL>
<LI>
Cycle of Development<BR>
Sending down a new copy of a geode and running it.</LI>
<LI>
Attaching and Detaching Swat<BR>
The commands used to control the link between Swat and GEOS.</LI>
<LI>
Setting Breakpoints and Code Stepping<BR>
The commands used to stop the execution of an application's code at pre-determined points and then examine the code, line by line if necessary.</LI>
<LI>
Examination of Memory<BR>
The commands used to examine memory from individual bytes to whole structures such as generic trees and objects.</LI>
<LI>
Other Important Commands<BR>
Other commands which are important to know but do not fit into the aforementioned groups.</LI>
</UL>
<P>
A complete list of the Swat commands is contained in the Reference chapter.</P>
<P CLASS="subsectionLink">
<A HREF="#TSwatCm_6.htm">Cycle of Development</A></P>
<P CLASS="subsectionLink">
<A HREF="#TSwatCm_7.htm">Attaching and Detaching</A></P>
<P CLASS="subsectionLink">
<A HREF="#TSwatCm_8.htm">Breakpoints and Code Stepping</A></P>
<P CLASS="subsectionLink">
<A HREF="#TSwatCm_9.htm">Examining and Modifying Memory</A></P>
<P CLASS="subsectionLink">
<A HREF="#TSwatCm_a.htm">Other Important Commands</A></P>
<HR>
<A NAME="TSwatCm_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5.1 <A HREF="#TSwatCm_5.htm">Essential Commands</A>: 
Cycle of Development</H3>
<PRE>send, run, exit, patient-default</PRE>
<P>
These commands come in handy whenever you've edited and recompiled your application. You'll want to exit the application on the target machine. Use the <CODE>
send</CODE>
 command to send down the new, compiled version of your application. Then use the <CODE>
run</CODE>
 command to start up the program.</P>

<H6 CLASS="RefETitle">
send</H6>
<PRE CLASS="Ref Swat Call">send [&lt;geode-name&gt;]</PRE>
<P>
To send the latest compiled version of your program, type &quot;send&quot; followed by the application's patient name (the first part of the field on the &quot;name&quot; line of the .gp file). </P>


<H6 CLASS="RefETitle">
run</H6>
<PRE CLASS="syntax">run [&lt;geode-name&gt;]</PRE>
<P>
To run your geode on the target machine, type &quot;run&quot; followed by the application's patient name (the first part of the field on the &quot;name&quot; line of the .gp file).</P>


<H6 CLASS="RefETitle">
exit</H6>
<PRE CLASS="syntax">exit &lt;geode-name&gt;</PRE>
<P>
To exit a running application, type &quot;exit&quot; followed by the application's patient name. The exit command won't work if your application has encountered a fatal error.</P>


<H6 CLASS="RefETitle">
patient-default</H6>
<PRE CLASS="syntax">patient-default [&lt;geode-name&gt;]</PRE>
<P>
Use this command to set a default patient to use with the <CODE>
send</CODE>
 and <CODE>
run</CODE>
 commands. The send and run commands will operate on this patient if they are not passed arguments.</P>

<HR>
<A NAME="TSwatCm_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5.2 <A HREF="#TSwatCm_5.htm">Essential Commands</A>: 
Attaching and Detaching</H3>
<PRE>attach, att, detach, quit, cont, Ctrl-C</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_Swat:attaching and detaching">
 </A>
This group of commands controls the state of the connection between Swat and GEOS when Swat is running. The <CODE>
attach</CODE>
 and <CODE>
att</CODE>
 commands are used to establish the connection while <CODE>
detach</CODE>
 and <CODE>
quit</CODE>
 are used to sever it. The most frequently used commands in this group are <CODE>
att</CODE>
 with the <CODE>
-r</CODE>
 flag and <CODE>
detach</CODE>
. Some related commands contained in the Reference are <CODE>
go</CODE>
, <CODE>
istep</CODE>
, <CODE>
sstep</CODE>
, and <CODE>
next</CODE>
.</P>
<P>
The following is a typical but simplified debugging cycle using <CODE>
detach</CODE>
 and <CODE>
att</CODE>
. It assumes you have already attached for the first time.</P>
<UL>
<LI>
When a bug is encountered, determine where and what the bug is, then detach Swat by typing <CODE>
detach</CODE>
.</LI>
<LI>
Edit the application to fix the bug, recompile it and download it to the target machine.</LI>
<LI>
Re-attach Swat to the target PC using the <CODE>
att</CODE>
 command by typing Scrolllock-Shift-s on the target machine and typing <CODE>
att </CODE>
on the host machine.</LI>
<LI>
Continue debugging the application.</LI>
<LI>
Repeat the detach, edit, attach, debug cycle until all of the bugs are fixed.</LI>
</UL>
<P>
By themselves, the commands shown below can not do much except open and close the communication lines between GEOS and Swat. More commands to examine and modify the application's code as it runs are needed to start actual debugging.</P>
<P CLASS="SwatTitle">


Swat Display 3-3 <A NAME="TSwatCm_7.htm_35685">
 </A>
Detaching and Attaching</P>
<PRE CLASS="SwatDisplay">(geos:0) 202 =&gt; <STRONG>det cont
</STRONG>PC detached
(loader:0) 203 =&gt; <STRONG>att
</STRONG>Re-using patient geos
Re-using patient ms4
Re-using patient vidmem
Re-using patient swap
Re-using patient xms
Re-using patient disk
Re-using patient kbd
Re-using patient nimbus
Re-using patient stream
Re-using patient sound
Re-using patient standard
Re-using patient ui
Re-using patient styles
Re-using patient color
Re-using patient ruler
Re-using patient text
Re-using patient motif
Re-using patient vga
Re-using patient spool
Re-using patient serial
Re-using patient msSer
Re-using patient nonts
Re-using patient welcome
Re-using patient shell
Re-using patient manager
Re-using patient math
Re-using patient borlandc
Re-using patient mess1
Thread 1 created for patient geos
Thread 2 created for patient geos
Thread 0 created for patient ui
Thread 0 created for patient spool
Thread 0 created for patient welcome
Thread 0 created for patient manager
Thread 1 created for patient manager
Thread 0 created for patient mess1
Attached to PC
Stopped in 0070h:0005h, address 0070h:0005h
DOS+773: JMP DOS+2963
(geos:0) 204 =&gt;</PRE>
<P CLASS="figCaption">
In this example, we use the <CODE>
det cont</CODE>
 command so that GEOS will keep running. We then re-attach with <CODE>
att</CODE>
. In the intervening time, the two machines are independent, and the serial line is unused. We could have taken advantage of this to send down a new copy of some application (as long as that application was not running on the target machine).</P>

<H4 CLASS="refHeading">
att</H4>
<PRE CLASS="syntax">att </PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_att Swat command">
 </A>
The <CODE>
att</CODE>
 command is similar to the <CODE>
attach</CODE>
 command, but has no bootstrap argument (as explained below).</P>


<H4 CLASS="refHeading">
attach</H4>
<PRE CLASS="Ref Swat Call">attach [(+b|-b)]</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_attach Swat command">
 </A>
This command is used to attach Swat to the target PC when the Swat stub is already invoked. The<CODE>
 -b</CODE>
 argument is to bootstrap and the <CODE>
+b</CODE>
 argument is not to bootstrap. Bootstrapping means that Swat will search for the symbol files of all of the geodes and threads as they are encountered rather than all at the beginning. This saves some time if you've just detached and need to re-attach, using only a few geodes while debugging. If no argument is given, the most recent bootstrap setting is used. The default bootstrap setting is <CODE>
+b</CODE>
.</P>


<H4 CLASS="refHeading">
<A NAME="TSwatCm_7.htm_IX_Errors:continuing after in Swat">
 </A>
cont</H4>
<PRE CLASS="Ref Swat Call">cont</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_cont Swat command">
 </A>
The <CODE>
cont</CODE>
 command continues the execution of GEOS after it has been stopped for some reason such as at a breakpoint or fatal error or by control-C. This command is often aliased as the letter <CODE>
c</CODE>
.</P>


<H4 CLASS="refHeading">
detach</H4>
<PRE CLASS="Ref Swat Call">detach [(cont|leave)]</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_detach Swat command">
 </A>
The <CODE>
detach</CODE>
 command will detach Swat from the target PC. By itself, the <CODE>
detach</CODE>
 command will detach Swat and exit GEOS. This command is usually used after a bug is encountered and the source code needs to be modified and recompiled (see <A HREF="#TSwatCm_7.htm_35685"> Detaching and Attaching</A>
).</P>
<DL>
<DT>
<STRONG>
cont</STRONG>
</DT><DD>The <CODE>
cont</CODE>
 option will just detach Swat and allow GEOS to continue to run normally. This option is used when the debugging process is finished but GEOS is still needed to do other things (such as word processing) and you may need to re-attach later for further debugging.</DD>
<DT>
<STRONG>
leave</STRONG>
</DT><DD>The <CODE>
leave</CODE>
 option will detach Swat but keep GEOS stopped wherever it was when the <CODE>
detach leave</CODE>
 command was given. This command is useful for passing debugging control to someone remotely logged in to the workstation or when Swat can not continue for some reason.</DD>


</DL>
<H4 CLASS="refHeading">
quit</H4>
<PRE CLASS="Ref Swat Call">quit [(cont|leave)]</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_quit Swat command">
 </A>
The <CODE>
quit</CODE>
 command is only used when Swat needs to be exited for good. It will detach Swat (if necessary), exit from Swat on the development station, and exit from GEOS.</P>
<DL>
<DT>
<STRONG>
cont</STRONG>
</DT><DD>The <CODE>
cont</CODE>
 option exits Swat on the development station but allows GEOS to continue running normally on the target PC. This option is used when the debugging process is finished but GEOS is still needed to do other things such as word processing.</DD>
<DT>
<STRONG>
leave</STRONG>
<CODE>
</DT><DD></CODE>
The <CODE>
leave</CODE>
 option will exit Swat but will keep GEOS stopped wherever it was when the <CODE>
quit leave</CODE>
 command was given.</DD>


</DL>
<H4 CLASS="refHeading">
Ctrl-C</H4>
<PRE CLASS="Ref Swat Call">Ctrl-C</PRE>
<P>
<A NAME="TSwatCm_7.htm_IX_Control-c:in Swat">
 </A>
<A NAME="TSwatCm_7.htm_IX_Ctrl-c:in Swat[;C]">
 </A>
The <CODE>
Control-C</CODE>
 command is the command used to stop the execution of GEOS at any point. This command is executed by holding down the <CODE>
Ctrl</CODE>
 key and pressing the <CODE>
c</CODE>
 key. It is used to stop GEOS in order to set a breakpoint, examine memory, or to get a command line prompt.</P>

<HR>
<A NAME="TSwatCm_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5.3 <A HREF="#TSwatCm_5.htm">Essential Commands</A>: 
Breakpoints and Code Stepping</H3>
<P>
The commands in this group are used to stop at specified breakpoints in an application's code and then step through the code line by line if necessary. These commands are often used with each other to examine critical areas in the application source code.</P>

<H4 CLASS="HeadingC">
<A NAME="TSwatCm_8.htm_46835">
 </A>
Breakpoints</H4>
<PRE>stop, brk, go, cbrk, spawn</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_Breakpoints">
 </A>
The <CODE>
stop</CODE>
, <CODE>
brk </CODE>
and <CODE>
cbrk</CODE>
 commands are used to set breakpoints. The breakpoint commands have many subcommands controlling the actions and attributes of a particular breakpoint.</P>
<P>
The <CODE>
cbrk</CODE>
 command sets breakpoints to be evaluated by the Swat stub; <CODE>
brk</CODE>
 sets them to be evaluated by Swat. The Swat stub can evaluate the conditions much faster than Swat, but <CODE>
cbrk</CODE>
 has certain limitations: only a limited number of breakpoints can be set using <CODE>
cbrk</CODE>
, and these breakpoints can only compare registers when the breakpoint is hit with a given set of criteria.</P>

<H5 CLASS="refHeading">
stop</H5>
<PRE CLASS="syntax">stop in &lt;class&gt;::&lt;message&gt; [if &lt;expr&gt;]
stop in &lt;procedure&gt; [if &lt;expr&gt;]
stop in &lt;address-history-token&gt; [if &lt;expr&gt;]
stop at [&lt;file:]&lt;line&gt; [if &lt;expr&gt;]
stop &lt;address&gt; [if &lt;expr&gt;]</PRE>
<P>
This is the main command to use when setting breakpoints in C programs. The &quot;stop in&quot; command will set a breakpoint at the beginning of a procedure, immediately after the procedure's stack frame has been set up. The &quot;stop at&quot; command will set a breakpoint at the first instruction of the given source line. If no &lt;file&gt; is specified, the source file for the current stack frame is used. If a condition is specified by means of an &quot;if &lt;expr&gt;&quot; clause, you should enclose the expression in curly braces to prevent any nested commands, such as a &quot;value fetch&quot; command, from being evaluated until the breakpoint is hit.</P>


<H5 CLASS="refHeading">
brk</H5>
<PRE CLASS="Ref Swat Call">brk [&lt;sub-command&gt;]</PRE>
<P>
The <CODE>
brk</CODE>
 (breakpoint) command is used for setting nearly all breakpoints in an application's code. The simplest way to use it is to type <CODE>
brk</CODE>
 with a single <CODE>
addr</CODE>
 argument. The address is usually a routine name for a suspect procedure, and when the breakpoint is reached the code-stepping commands can be used to examine it carefully. The <CODE>
brk</CODE>
 command can also create conditional breakpoints which will only be taken if certain conditions are satisfied. Once set, a breakpoint is given an integer number which can be obtained using the <CODE>
list</CODE>
 subcommand (see <A HREF="#TSwatCm_8.htm_16655"> Breakpoints</A>
).</P>
<DL>
<DT>
<CODE>brk &lt;addr&gt; [&lt;command&gt;]</CODE></DT><DD>
The <CODE>
brk</CODE>
 command without any subcommands sets an unconditional breakpoint at the address specified in <EM>
addr</EM>
. If the <EM>
command</EM>
 argument is passed, the given swat command will be carried out when the breakpoint is hit.</DD>
<DT>
<CODE>
brk delete &lt;break&gt;*</DT><DD>
</CODE>
Deletes the given breakpoint(s), just as <CODE>
clear</CODE>
, above.</DD>
<DT>
<CODE>
brk enable &lt;break&gt;*</DT><DD>
</CODE>
Enables the given breakpoint(s). Has no effect on previously enabled breakpoints. If no breakpoint is given, all breakpoints for the current patient are enabled.</DD>
<DT>
<CODE>
brk disable &lt;break&gt;*</DT><DD>
</CODE>
Disables the given breakpoint(s). It has no effect on previously disabled breakpoints. If no breakpoint is given, it disables all breakpoints for the current patient.</DD>
<DT> 
<CODE>
brk list [&lt;addr&gt;]</DT><DD>
</CODE>
Lists all the breakpoints, whether they are enabled, where they are set, their conditions, and what actions they will take if encountered. If <CODE>
addr</CODE>
 is given, it returns the breakpoint numbers of all breakpoints set at the given address.<A NAME="TSwatCm_8.htm_IX_brk Tcl structure">
 </A>
</DD>
<P CLASS="figCaption">
<A NAME="TSwatCm_8.htm_16655">
 </A>
Breakpoints</P>
<PRE CLASS="SwatDisplay">(geos:0) 4 =&gt; <STRONG>brk list
</STRONG>Num S Address Patient Command/Condition
1   E loader::kcode::LoaderError all echo Loader death due to [penum
					LoaderStrings [read-reg ax]]
					expr 1
2   E kcode::FatalError all
 					why
 					assign kdata::errorFlag 0
 					expr 1
3   E kcode::WarningNotice all why-warning
4   E kcode::CWARNINGNOTICE all why-warning
(geos:0) 5 =&gt; <STRONG>stop in Mess1Draw
</STRONG>brk5
(geos:0) 6 =&gt; <STRONG>brk list
</STRONG>Num S Address Patient Command/Condition
1   E loader::kcode::LoaderError all echo Loader death due to [penum
					LoaderStrings [read-reg ax]]
 					expr 1
2   E kcode::FatalError all
 					why
 					assign kdata::errorFlag 0
 					expr 1
3   E kcode::WarningNotice all why-warning
4   E kcode::CWARNINGNOTICE all why-warning
5   E &lt;ss1::MESS1_TEXT::Mess1Draw+10 all halt
(geos:0) 7 =&gt; <STRONG>brk dis brk4
</STRONG>(geos:0) 8 =&gt; <STRONG>brk list
</STRONG>Num S Address Patient Command/Condition
1   E loader::kcode::LoaderError all echo Loader death due to [penum
					LoaderStrings [read-reg ax]]
 					expr 1
2   E kcode::FatalError all
 					why
 					assign kdata::errorFlag 0
 					expr 1
3   E kcode::WarningNotice all why-warning
4   D kcode::CWARNINGNOTICE all why-warning
5   E &lt;ss1::MESS1_TEXT::Mess1Draw+10 all halt
(geos:0) 9 =&gt;</PRE>
</DL>


<H5 CLASS="refHeading">
go</H5>
<PRE CLASS="syntax">go [&lt;address-expressions&gt;]</PRE>
<P>
The go command sets a one-time breakpoint and resumes execution on the target PC. The net effect of this is to let the target go until it hits a given address, then stop.</P>


<H5 CLASS="refHeading">
cbrk</H5>
<PRE CLASS="Ref Swat Call">cbrk [&lt;sub-command&gt;]</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_Breakpoints:conditional">
 </A>
<A NAME="TSwatCm_8.htm_IX_cbrk Swat command">
 </A>
The <CODE>
cbrk</CODE>
 (conditional breakpoint) command is used to set fast conditional breakpoints. This command is very similar to the <CODE>
brk</CODE>
 command above, except that the condition is evaluated by the Swat stub--this increases the speed of the evaluation. There are, however, certain restrictions on the <CODE>
cbrk</CODE>
 command: only a limited number of breakpoints can be set (eight), and the scope of the evaluation is limited to comparing word registers (or a single word of memory) to a given set of values.</P>
<P>
In the following descriptions, <CODE>
criteria</CODE>
 stands for a series of one or more arguments of the form:</P>
<PRE>&lt;register&gt; &lt;op&gt; &lt;value&gt;</PRE>
<DL>
<DT>
<EM>register</EM></DT><DD>One of the machine's registers or &quot;thread,&quot; which corresponds to the current thread's handle.</DD>
<DT>
<EM>op</EM></DT><DD>One of the following ten comparison operators: = (equal), != (not equal), &gt; (unsigned greater-than), &lt; (unsigned less-than), &gt;= (unsigned greater-or-equal), &lt;= (unsigned less-or-equal), +&gt; (signed greater-than), +&lt; (signed less-than), +&gt;= (signed greater-or-equal), +&lt;= (signed greater-or-equal). These correspond to the 8086 instructions JE, JNE, JA, JB, JAE, JBE, JG, JL, JGE, JLE, respectively.</DD>
<DT>
<EM>value</EM></DT><DD>A standard Swat address expression. The resulting offset is the value with which the register will be compared when the breakpoint is hit.</DD>
</DL>
<DL>
<DT>
<STRONG>
cbrk &lt;addr&gt; &lt;criteria&gt;*</DT><DD>
</STRONG>
The basic cbrk command sets a fast conditional breakpoint at the address specified in <EM>
addr</EM>
.</DD>
<DT>
<STRONG>
cbrk cond &lt;break&gt; &lt;criteria&gt;*</DT><DD>
</STRONG>
Changes the criteria for the breakpoint. If no <CODE>
criteria</CODE>
 is given the breakpoint becomes a standard, unconditional breakpoint.</DD>


</DL>
<H5 CLASS="refHeading">
spawn</H5>
<PRE CLASS="Ref Swat Call">spawn &lt;patient-name&gt; [&lt;addr&gt;]</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_spawn Swat command">
 </A>
<A NAME="TSwatCm_8.htm_IX_Threads:breakpoints in not yet created">
 </A>
The <CODE>
spawn</CODE>
 command is used to set a temporary breakpoint in a process or thread which has not yet been created. The arguments are</P>
<DL>
<DT>
<CODE>
patient-name</DT><DD>
</CODE>
The permanent name, without extension, as specified by the name directive in the <STRONG CLASS="fileName">
.gp</STRONG>
 file; this is the name of the patient in which to set a temporary breakpoint. A unique abbreviation is sufficient for this argument.</DD>
<DT>
<CODE>
addr</CODE>
</DT><DD>A particular address at which to place the breakpoint. If no address is given, Swat will stop as soon as the given geode is loaded.</DD>
</DL>
<P>
This command is used to stop the geode before any of its code can be run, allowing breakpoints to be set in the desired routines. If you could not stop the machine in this manner, the application could hit a buggy routine before a breakpoint could be set in that routine. The <CODE>
spawn</CODE>
 command can also be used to catch the spawning of new threads which is useful to keep track of the threads being used by an application (see <A HREF="#TSwatCm_8.htm_28011"> The spawn Command</A>
).</P>
<P CLASS="SwatTitle">


Swat Display 3-5 <A NAME="TSwatCm_8.htm_28011">
 </A>
The spawn Command</P>
<PRE CLASS="SwatDisplay">(geos:1) 12 =&gt; <STRONG>spawn mess1 Mess1Draw
</STRONG>Re-using patient math
Re-using patient borlandc
Re-using patient mess1
Thread 0 created for patient mess1
Interrupt 3: Breakpoint trap
Stopped in Mess1Draw, line 211, &quot;C:OMNIGO/Appl/SDK_C/MESS1/MESS1.GOC&quot;
Mess1Draw(GStateHandle gstate) 				/* GState to draw to */
(mess1:0) 13 =&gt;</PRE>



<H4 CLASS="HeadingC">
Code Stepping</H4>
<PRE>srcwin, istep, sstep</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_Stepping through code">
 </A>
Once an application is stopped at a breakpoint and you want to examine the code line by line, you can use the commands <CODE>
istep</CODE>
 (instruction step) and <CODE>
sstep</CODE>
 (source step). These enter the <EM>
instruction step mode</EM>
 or <EM>
source step mode</EM>
 to examine and execute the application code line by line.</P>
<P>
The subcommands for both <CODE>
istep</CODE>
 and <CODE>
sstep</CODE>
 are nearly the same and are used for actions including stepping to the next line, skipping the next instruction, or exiting the step mode and continuing the execution of the application. The <CODE>
istep</CODE>
 and <CODE>
sstep</CODE>
 commands are very similar except that <CODE>
istep</CODE>
 is used when stepping through assembly source code (thus stepping through instructions), and <CODE>
sstep</CODE>
 is used for stepping through C source code.</P>

<H5 CLASS="refHeading">
srcwin</H5>
<PRE CLASS="syntax">srcwin &lt;numlines&gt; [view]</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_Source code:displaying">
 </A>
<A NAME="TSwatCm_8.htm_IX_srcwin Swat command">
 </A>
The srcwin command will display the source code surrounding the presently executing code any time execution is stopped. The presently executing line will be highlighted. You may set breakpoints with the mouse by clicking on the line numbers which appear to the side. To scroll the srcwin buffer use the arrow keys, the &lt;PgUp&gt; key, and the &lt;PgDn&gt; key.</P>


<H5 CLASS="refHeading">
istep, sstep</H5>
<PRE CLASS="Ref Swat Call">istep [&lt;default subcommand&gt;]</PRE>
<PRE CLASS="Ref Swat Call">sstep [&lt;default subcommand&gt;]</PRE>
<P>
<A NAME="TSwatCm_8.htm_IX_Source code:stepping through">
 </A>
<A NAME="TSwatCm_8.htm_IX_sstep Swat command">
 </A>
<A NAME="TSwatCm_8.htm_IX_istep Swat command">
 </A>
These two commands are used to single-step through code, executing one or more instructions at a time. The <CODE>
default subcommand</CODE>
 argument determines the action taken by Swat when the Return key is pressed. For example, the command</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>istep n</STRONG></PRE>
<P>
will enter instruction step mode, and subsequently pressing the Return key will have the same effect as pressing <CODE>
n</CODE>
. If no default command is given, pressing Return has the same effect as pressing <CODE>
s</CODE>
.</P>
<P>
The subcommands to the <CODE>
istep</CODE>
 and <CODE>
sstep</CODE>
 commands are</P>
<DL>
<DT>
<STRONG>
s </STRONG>
(single step)</DT><DD>
Step one instruction. This is the most frequently used subcommand.</DD>
<DT>
<STRONG>
n, o</STRONG>
 (next, over)</DT><DD>
Continue to the next instruction but do not display any procedure calls, repeated string instructions, or software interrupts. They will stop when GEOS returns to the same frame as the previous displayed instruction. The frame is the same when the stack pointer and current thread are the same as when the <CODE>
n</CODE>
 subcommand was given. <CODE>
o</CODE>
 differs from <CODE>
n</CODE>
 in that it executes all instructions in a macro without further interpretation and can only be used with <CODE>
istep</CODE>
. If a breakpoint other than for the next instruction is hit, it will take effect as long as the above conditions are met.</DD>
<DT>
<STRONG>
N, O</STRONG>
 (Next, Over)</DT><DD>
These are like <CODE>
n</CODE>
 and <CODE>
o</CODE>
 but will stop whenever a breakpoint is hit even if the frame is different. <CODE>
O</CODE>
 will execute all instructions in a macro without further interpretation, and it can only be used with <CODE>
istep</CODE>
. If a breakpoint other than one for the next instruction is hit, it will take effect as long as the above conditions are met.</DD>
<DT>
<STRONG>
q, Esc, &lt;space&gt; </STRONG>
(quit)</DT><DD>
These stop <CODE>
istep/sstep </CODE>
and return to the command level. These subcommands are used when a point in the code is reached where another command needs to be used--to examine memory, for example.</DD>
<DT>
<STRONG>
c</STRONG>
 (continue)</DT><DD>
This exits <CODE>
istep</CODE>
 and continues the execution of the application. When GEOS next stops, Swat will return to the command prompt.</DD>
<DT>
<STRONG>
M</STRONG>
 (message)</DT><DD>
<A NAME="TSwatCm_8.htm_IX_Methods:stopping in with Swat">
 </A>
This will continue until the next handled message is received. When the handler is invoked, Swat will return to step mode. This subcommand is often used with the <CODE>
ObjMessage()</CODE>
 and <CODE>
ObjCallInstanceNoLock()</CODE>
 assembly routines.</DD>
<DT>
<STRONG>
F</STRONG>
 (finish message)</DT><DD>
<A NAME="TSwatCm_8.htm_IX_Methods:finishing stepping through">
 </A>
This finishes the current message, stops when execution returns to a frame that is not part of the kernel, and remains in step mode.</DD>
<DT>
<STRONG>
f</STRONG>
 (finish frame)</DT><DD>
This finishes the current stack frame, stops, and remains in step mode.</DD>
<DT>
<STRONG>
S</STRONG>
 (skip instruction)</DT><DD>
This skips the current instruction, does not execute it, and goes on to the next instruction in step mode.</DD>


</DL>
<HR>
<A NAME="TSwatCm_9.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5.4 <A HREF="#TSwatCm_5.htm">Essential Commands</A>: 
Examining and Modifying Memory</H3>
<P>
The commands in this section all deal with the examination, manipulation, or modification of the memory used by an application. Memory from individual bytes to complex data structures such as objects can be displayed and examined. These commands fall into the following groups:</P>
<UL>
<LI>
Simple Memory Examination.<BR>
Examination of bytes, words, and double words with no modification.</LI>
<LI>
Complex Memory Examination<BR>
Examination of structures such as objects, generic trees, and handle tables with no modification.</LI>
<LI>
Memory Examination with Modification<BR>
Examination of memory with modification if desired. Some commands are used only for memory modification.</LI>
</UL>
<P>
The commands in this section are often used with each other and with the code-stepping and breakpoint commands in order to pinpoint bugs in an application's code. Breakpoints can be set, code can be stepped through, and then the memory that the code uses can be examined.</P>
<P>
Some related commands defined in the Reference chapter are <CODE>
down</CODE>
, <CODE>
func</CODE>
, <CODE>
handles</CODE>
, <CODE>
hgwalk</CODE>
, <CODE>
impliedgrab</CODE>
, <CODE>
penum</CODE>
, <CODE>
phandle</CODE>
, <CODE>
pinst</CODE>
, <CODE>
piv</CODE>
, <CODE>
precord</CODE>
, <CODE>
skip</CODE>
, <CODE>
systemobj</CODE>
, <CODE>
up</CODE>
, and <CODE>
where</CODE>
.</P>

<H4 CLASS="HeadingC">
Simple Memory Examination</H4>
<PRE>bytes, words, dwords, frame, backtrace, why, listi</PRE>
<P>
The commands in this group are used to look at simple blocks of memory without modification. They are defined fully in the entries below.</P>

<H5 CLASS="refHeading">
bytes, words, dwords</H5>
<PRE CLASS="Ref Swat Call">bytes [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<PRE CLASS="Ref Swat Call">words [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<PRE CLASS="Ref Swat Call">dwords [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_dwords Swat command">
 </A>
<A NAME="TSwatCm_9.htm_IX_words Swat command">
 </A>
<A NAME="TSwatCm_9.htm_IX_bytes Swat command">
 </A>
The <CODE>
bytes</CODE>
, <CODE>
words</CODE>
, and <CODE>
dwords</CODE>
 commands are essentially the same except that each looks at a different sized piece of memory. These commands will display the memory as a pointer to a dump of bytes, words, or dwords using the given or most recent (if no address is given) address.</P>
<P>
The <CODE>
bytes</CODE>
 command additionally displays the dump as its ASCII character representation, if any. These three commands are used to examine memory on a very basic level and are useful only if the user knows what the bytes, words, or dwords should or should not be and so can spot any problems. For example, if a certain character string such as &quot;Application&quot; is supposed to be stored at the address given by <EM>
fileType</EM>
 and the command</P>
<PRE>[hello3:0] 11 =&gt; <STRONG>bytes fileType</STRONG></PRE>
<P>
dumps the characters &quot;noitacilppA&quot;, then there is most likely a problem.</P>
<P>
These commands will automatically use the given <CODE>
addr</CODE>
 as a pointer to the memory to be examined. If Return is hit many times in a row, the result will be to examine adjacent pieces of memory. (See <A HREF="#TSwatCm_9.htm_94653"> The words Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-6 <A NAME="TSwatCm_9.htm_94653">
 </A>
The words Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 15 =&gt; <STRONG>words themeSongBuf
</STRONG>Addr: +0 +2 +4 +6 +8 +a +c +e
0040h: 0004 0000 0049 0000 0004 0001 0083 0000
(mess1:0) 16 =&gt; <STRONG>words
</STRONG>Addr: +0 +2 +4 +6 +8 +a +c +e
004eh: 0000 0006 0004 0028 0000 0001 020b b800
(mess1:0) 17 =&gt; <STRONG>!!
</STRONG>words
Addr: +0 +2 +4 +6 +8 +a +c +e
005ch: b800 000c 0020 0002 0001 0000 0001 020b
(mess1:0) 18 =&gt; <STRONG>!!
</STRONG>words
Addr: +0 +2 +4 +6 +8 +a +c +e
006ah: 020b b800 000c 0010 0002 0001 000a 0010 </PRE>
<P CLASS="figCaption">
Here the <CODE>
words</CODE>
 command examines a buffer in memory. When this command is repeated without arguments, it will display memory continuing where the last command left off. Note the use of the <CODE>
!!</CODE>
 command to repeat the previous command.</P>


<H5 CLASS="refHeading">
backtrace, frame</H5>
<PRE CLASS="Ref Swat Call">backtrace [&lt;frames to list&gt;]</PRE>
<PRE CLASS="Ref Swat Call">frame &lt;subcommand&gt;</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_frame Swat command">
 </A>
<A NAME="TSwatCm_9.htm_IX_backtrace Swat command">
 </A>
<A NAME="TSwatCm_9.htm_IX_Stack:examining data on">
 </A>
The <CODE>
backtrace</CODE>
 and <CODE>
frame</CODE>
 commands are used to examine data that has been pushed onto the stack. An application may crash in a routine that is correctly written but has been passed bad data.</P>
<P>
The <CODE>
backtrace</CODE>
 command prints out a list of all the active frames for the current patient. Then the user can choose a particular frame to examine using one of the <CODE>
frame</CODE>
 subcommands. The <CODE>
frame</CODE>
 command is used to access frames that have been pushed onto the stack, where a <EM>
frame</EM>
 is the information for a routine that needs to be saved when it calls another routine.</P>
<P>
The <CODE>
frame</CODE>
 and <CODE>
backtrace</CODE>
 commands can be used together to print the active frames with <CODE>
backtrace</CODE>
 and then access data in these frames with <CODE>
frame</CODE>
. However, most of the <CODE>
frame</CODE>
 subcommands expect a token for a frame, not the frame number given by the backtrace command. To get this token, the <CODE>
top</CODE>
, <CODE>
cur</CODE>
 and <CODE>
next</CODE>
 subcommands are used. Then the other <CODE>
frame</CODE>
 subcommands can be used with the token to further examine the <CODE>
frame</CODE>
 data. See also <A HREF="../../Tools/SwatRef/SR_f.htm#IX_frame Swat command:command reference">the reference information for the <CODE>frame</CODE> command</A>.</P>

<P CLASS="figCaption">

<A NAME="TSwatCm_9.htm_63247">
 </A>
Backtrace and Frame commands</P>
<PRE>Death due to SOUND_BAD_EVENT_COMMAND
Execution died in patient sound:
SoundHandleTimerEvent+63: MOV AX, 7 (0007h)
*** No explanation available ***
Interrupt 3: Breakpoint trap
Stopped in FatalError, address 1844h:0163h
SoundHandleTimerEvent+63: MOV AX, 7 (0007h)
(mess1:0) 2 =&gt; <STRONG>backtrace
</STRONG>  1: near FatalError(), 1844h:0163h
  2: far AppFatalError(), 1844h:0163h
* 3: far SoundHandleTimerEvent(), 2cb2h:003fh
  4: far SoundLibDriverPlaySimpleFM(), 6247h:0062h
  5: far ResourceCallInt(), 1844h:1492h
  6: far SoundLibDriverStrategy(), 2cb2h:0ab2h
  7: near SoundCallLibraryDriverRoutine(), 629ch:00feh
  8: far SoundPlayMusic(), 629ch:0028h
  9: far ResourceCallInt(), 1844h:1492h
  10: far SOUNDPLAYMUSICNOTE(mh = ^h42b0h (at 753ch), priority = 1eh, tempo = 4h
, flags = 80h), 62d6h:00f3h
  11: far ResourceCallInt(), 1844h:1492h
  12: far Mess1Draw(), MESS1.GOC:307
  13: far MESS1PROCESSMETA_EXPOSED(win = 3a60h, message = 69 (invalid), oself =
3ee0h:0000h), MESS1.GOC:362
  14: far ResourceCallInt(), 1844h:1492h
MSG_META_EXPOSED (3a60h 0000h 0000h) sent to Mess1ProcessClass (^l20f0h:0h)
  16: near ObjCallMethodTableSaveBXSI(), 1844h:9ea5h
  17: far SendMessage(), 1844h:9d9bh
  18: far ObjMessage(), 1844h:1d9ch
  19: far MessageDispatchDefaultCallBack(), 1844h:1c72h
  20: far MessageProcess(callBack = 1844h:1c68h (geos::kcode::MessageDispatchDef
aultCallBack)), 1844h:1c15h
  21: far MessageDispatch(), 1844h:1b31h
  22: far ThreadAttachToQueue(), 1844h:bd2ch
(mess1:0) 3 =&gt; <STRONG>frame 12
</STRONG>Mess1Draw+302: MOV AX, 100 (0064h) </PRE>



<H4 CLASS="HeadingC">
Complex Memory Examination</H4>
<PRE>print, hwalk, lhwalk, objwalk, pobject, gentree, vistree, vup, gup</PRE>
<P>
The commands in this group are used to examine complex data structures in GEOS.</P>

<H5 CLASS="refHeading">
print</H5>
<PRE CLASS="Ref Swat Call">print &lt;expression&gt;</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Formatting Swat output">
 </A>
<A NAME="TSwatCm_9.htm_IX_print Swat command">
 </A>
The <CODE>
print</CODE>
 command is used to print out the value of the given <CODE>
expression</CODE>
 argument. The <CODE>
expression</CODE>
 argument is normally some sort of typed address. When there is no type for the <CODE>
expression</CODE>
, then its offset is printed.</P>
<P>
The power of this command lies in its ability to print any type at any address; thus, it is used frequently to print out the values of important expressions such as registers or variables. The <CODE>
print</CODE>
 command also takes many flags which control the way in which the value of the <CODE>
expression</CODE>
 is displayed such as in decimal or hexadecimal. See the Reference chapter for more information on the flags for the <CODE>
print</CODE>
 command.</P>


<H5 CLASS="refHeading">
hwalk</H5>
<PRE CLASS="Ref Swat Call">hwalk [&lt;patient&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Heap:examining with Swat">
 </A>
<A NAME="TSwatCm_9.htm_IX_Handles:displaying the handle table">
 </A>
<A NAME="TSwatCm_9.htm_IX_hwalk Swat command">
 </A>
Use the <CODE>
hwalk</CODE>
 (heap walk) command to display blocks on the global heap. Its output can be tailored in various ways according to how the <CODE>
flags</CODE>
 are set. If a <CODE>
patient</CODE>
 is given, then <CODE>
hwalk</CODE>
 will only print the blocks owned by that patient. There are many fields in the listing such as the handle, address, and type of each block. By examining these fields, the user can get an overall sense of how the global heap is being managed, whether any block looks too big or too small, and what the handles of important blocks are. (See <A HREF="#TSwatCm_9.htm_12640"> The hwalk Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-8 <A NAME="TSwatCm_9.htm_12640">
 </A>
The hwalk Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 6 =&gt; <STRONG>hwalk mess1
</STRONG>HANDLE ADDR SIZE FLAGS LOCK OWNER IDLE  OINFO 						TYPE
----------------------------------------------------------------
20f0h 41ebh 2272 FIXED  n/a mess1  n/a     1h 						R#1 (dgroup)
4160h 58eah  448 sDS  a   1 mess1 105eh    1h 						R#2 (MESS1_TEXT)
3a60h 59adh  784 s SL     0 mess1  0:03    1h 						WINDOW
4bb0h 6176h  560 s SL     0 mess1  0:05    1h 						WINDOW
3970h 6232h  336 s SL     0 mess1  0:03    1h 						GSTATE
3ee0h 633ch  160 s S  a   0 mess1  0:05 49c0h 						Geode
4950h 63beh 1280 s SL     0 mess1  0:05 49c0h 						OBJ(mess1:0)
4340h 640eh 1328   SL     0 mess1  0:05 49c0h 						R#3 (INTERFACE)
42b0h 753ch   96 s S      4 mess1 1249h    1h 					  
4bd0h 7542h   96 s S      0 mess1  0:01    1h   
41b0h 89d4h  896   SL     0 mess1  0:05 49c0h 						R#4 (APPRESOURCE)
4270h 99e1h   32 s S      0 mess1  0:05     1h

Total bytes allocated: 8288
(mess1:0) 7 =&gt;</PRE>


<H5 CLASS="refHeading">
lhwalk, objwalk</H5>
<PRE CLASS="Ref Swat Call">lhwalk [&lt;addr&gt;]</PRE>
<PRE CLASS="Ref Swat Call">objwalk [&lt;addr&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Objects:displaying object blocks">
 </A>
<A NAME="TSwatCm_9.htm_IX_objwalk Swat command">
 </A>
<A NAME="TSwatCm_9.htm_IX_Local memory:displaying">
 </A>
<A NAME="TSwatCm_9.htm_IX_lhwalk Swat command">
 </A>
The <CODE>
lhwalk</CODE>
 (local heap walk) command is used to display information about a local memory heap, and the <CODE>
objwalk</CODE>
 command is used to print out information about an object block. After using <CODE>
hwalk</CODE>
 to locate a specific block, <CODE>
lhwalk</CODE>
 or <CODE>
objwalk</CODE>
 can be used to print out information about that particular block. These commands also print out fields of information which include the local handle, the address, size, and type of data or object. See the Reference chapter for more information on the fields printed by <CODE>
lhwalk</CODE>
 and <CODE>
objwalk</CODE>
. (See <A HREF="#TSwatCm_9.htm_76558"> The objwalk Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-9 <A NAME="TSwatCm_9.htm_76558">
 </A>
The objwalk Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 11 =&gt; <STRONG>objwalk ^h4340h
</STRONG> 
Heap at 640eh:0 (^h4340h), Type = LMEM_TYPE_OBJ_BLOCK
In use count = 3, Block size = 1328, Resource size = 59647 para (192 bytes)
 
HANDLE ADDRESS 	SIZE FLAGS CLASS (NAME)
------ ------- 	---- ----- ------------
 001ch     56h 		1eh  ---  *flags*
 001eh     76h 		c1h  D RO GenPrimaryClass (Mess1Primary)
 0020h    1aah 		ceh  D RO GenViewClass (Mess1View)
 0022h    166h 		32h ID  O OLGadgetAreaClass
 0024h    19ah 		 eh  I
 0026h    492h 		6bh  D  O GenValueClass
 0028h    2deh 		6bh  D  O GenValueClass
 002ah    37eh 		a6h ID  O GenInteractionClass
 002ch    44ah 		46h ID  O OLMenuBarClass
 002eh    13ah 		 bh ID
 0030h    426h 		22h ID  O OLMenuButtonClass
 
Free handles = 17, null handles = 0
Objects = 8, 4 of them marked ignoreDirty
 
(mess1:0) 12 =&gt;</PRE>


<H5 CLASS="refHeading">
pobject</H5>
<PRE CLASS="Ref Swat Call">pobject [&lt;addr&gt;] [&lt;print level&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Instance data:examining with Swat">
 </A>
<A NAME="TSwatCm_9.htm_IX_Objects:examining instance data">
 </A>
<A NAME="TSwatCm_9.htm_IX_pobject Swat command">
 </A>
The <CODE>
pobject</CODE>
 (print object) command (often abbreviated <CODE>
pobj</CODE>
) is used to print out the entire instance data chunk of an object. You can use <CODE>
gentree</CODE>
, <CODE>
vistree</CODE>
, or <CODE>
hwalk</CODE>
 and <CODE>
objwalk</CODE>
 to get the handles for an object; once you have them, use <CODE>
pobj</CODE>
 with the handles, as follows:</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>pobj ^l0x43d0:0x0022</STRONG></PRE>
<P>
will print out the instance data chunk specified by that optr.</P>
<P>
Any valid address expression, such as a dereferenced object name, may be used as an <CODE>
addr</CODE>
. Additionally, the print level can be changed to print just the headings to each of the master levels and an address history number. The <CODE>
pobject</CODE>
 command is used to verify that the object is behaving correctly and that its instance variables (if any) are correct. (See <A HREF="#TSwatCm_9.htm_38136"> The pobject Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-10 <A NAME="TSwatCm_9.htm_38136">
 </A>
The pobject Command</P>
<PRE CLASS="SwatDisplay">[lesink:0] 10 =&gt; pobj ^l4710h:0020h
*UpTextView::UpTextViewClass (@7, ^l4710h:0020h)
master part: Gen_offset(123) -- UpTextViewInstance
@8: {UpTextViewInstance (^h18192:622)+123} = {
    MetaBase Gen = {
        ClassStruct _far *MB_class = 360ah:162fh (motif::dgroup::OLPaneClass)
    }
    LinkPart GI_link = {
        dword LP_next = 4710h:001fh
    }
    CompPart GI_comp = {
        dword CP_firstChild = 4710h:002ah
    }
    word GI_visMoniker = 0h
    word GI_kbdAccelerator = 0h
    byte GI_attrs = 2h
    byte GI_states = c0h
    PointDWFixed GVI_origin = {
        DWFixed PDF_x = {0.000000}
        DWFixed PDF_y = {0.000000}
    }
    RectDWord GVI_docBounds = {
        long RD_left = 0
        long RD_top = 0
        long RD_right = +480
        long RD_bottom = +480
    }
    PointDWord GVI_increment = {
        long PD_x = +20
        long PD_y = +15
    }
    PointWWFixed GVI_scaleFactor = {
        WWFixed PF_x = {1.000000}
        WWFixed PF_y = {1.000000}
    }
    ColorQuad GVI_color = {
        CQ_redOrIndex = fh, CQ_info = 0h, CQ_green = 0h, CQ_blue = 0h
    }
    word GVI_attrs = 10h
    byte GVI_horizAttrs = 88h
    byte GVI_vertAttrs = 88h
    byte GVI_inkType = 0h
    dword GVI_content = 4710h:0024h
    dword GVI_horizLink = 0000h:0000h
    dword GVI_vertLink = 0000h:0000h
}
Variable Data:
         *** No Variable Data ***
[lesink:0] 11 =&gt;</PRE>
<P>
In addition to printing information about the object at a given address, pobject can print information about certain objects in the application if passed certain flags:</P>
<DL>
<DT>
<STRONG>
pobject -i</STRONG>
</DT><DD>Prints information about the windowed object under the mouse pointer.</DD>
<DT>
<STRONG>
pobject -c</STRONG>
</DT><DD>Prints information about the content for the view over which the mouse is located.</DD>
</DL>
<P>
There are more flags available, and it is also possible to ask for more or less instance data information. See the full reference for this command for details.</P>


<H5 CLASS="refHeading">
gentree</H5>
<PRE CLASS="Ref Swat Call">gentree [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Trees:generic">
 </A>
<A NAME="TSwatCm_9.htm_IX_Generic objects:displaying tree">
 </A>
<A NAME="TSwatCm_9.htm_IX_gentree Swat command">
 </A>
The <CODE>
gentree</CODE>
 (generic tree) command prints out a generic tree from the given <CODE>
addr</CODE>
 and <CODE>
instance field</CODE>
. The <CODE>
addr</CODE>
 must be the address of an object in the generic tree, and the <CODE>
instance field</CODE>
 must be the offset into the Generic master part of the instance chunk or any instance data within the Generic master level which is to be printed. This command is used primarily to ensure correct structure of a generic tree and its instance data and to find a particular object in the generic tree.<A NAME="TSwatCm_9.htm_IX_Windows:accessing window with grab">
 </A>
The <CODE>
-i</CODE>
 (implied grab) option is used to find an object by placing the mouse over the window in which the object resides and typing the following:</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>gentree -i</STRONG></PRE>
<P>
The default address that <CODE>
gentree</CODE>
 examines is contained in *DS:SI. (See <A HREF="#TSwatCm_9.htm_83512"> Gentree and Gup</A>
.) To examine objects more closely, pass the handles displayed by <CODE>
gentree</CODE>
 to the <CODE>
pobject</CODE>
 command.</P>


<H5 CLASS="refHeading">
vistree</H5>
<PRE CLASS="Ref Swat Call">vistree [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Trees:visual">
 </A>
<A NAME="TSwatCm_9.htm_IX_vistree Swat command">
 </A>
The <CODE>
vistree</CODE>
 (visual tree) command prints out a visual tree from the given <CODE>
addr</CODE>
 and <CODE>
instance field</CODE>
. The <CODE>
addr</CODE>
 must be the address of an object in the visual tree, and the <CODE>
instance field</CODE>
 must be the offset into the Vis master part of the object's instance data which is to be printed. This command is primarily used to examine the on-screen layout of the application and to ensure correct structure of the visual tree and its instance data. The <CODE>
vistree</CODE>
 command can use the <CODE>
-i</CODE>
 option (implied grab), which will use the window that the mouse is over as the first visual object in the printed tree. The default address that <CODE>
vistree</CODE>
 examines is contained in *DS:DI. To examine objects more closely, pass the handles displayed by <CODE>
vistree </CODE>
to the <CODE>
pobject</CODE>
 command.</P>


<H5 CLASS="refHeading">
gup</H5>
<PRE CLASS="Ref Swat Call">gup [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Generic objects:accessing parents">
 </A>
<A NAME="TSwatCm_9.htm_IX_gup Swat command">
 </A>
The <CODE>
gup</CODE>
 (Generic UPward query) command is used to go up the generic tree from a particular object specified by the <CODE>
addr</CODE>
 argument, the default *DS:SI, or the <CODE>
-i</CODE>
 option. The <CODE>
-i</CODE>
 option (implied grab) uses the windowed object under the mouse as the object from which to start the upward query. This command is used primarily to ensure correct generic class hierarchy and to determine the field of the given object.</P>
<P CLASS="SwatTitle">


Swat Display 3-11 <A NAME="TSwatCm_9.htm_83512">
 </A>
Gentree and Gup</P>
<PRE CLASS="SwatDisplay">(mess1:0) 19 =&gt; <STRONG>gentree -i
</STRONG> 
GenViewClass (@5, ^l4340h:0020h)
 GenValueClass (@6, ^l4340h:0026h)
 GenValueClass (@7, ^l4340h:0028h)
 
(mess1:0) 20 =&gt; <STRONG>gup @5
</STRONG> 
GenViewClass (@11, ^l4340h:0020h)
GenPrimaryClass (@12, ^l4340h:001eh) &quot;MESS #1&quot;
GenApplicationClass (@13, ^l41b0h:0024h) *** Is Moniker List ***
GenFieldClass (@14, ^l4080h:001eh)
GenSystemClass (@15, ^l2460h:0020h)
 
(mess1:0) 21 =&gt; <STRONG>gentree ^l4340h:001eh
</STRONG> 
GenPrimaryClass (@16, ^l4340h:001eh) &quot;MESS #1&quot;
 GenViewClass (@17, ^l4340h:0020h)
 GenValueClass (@18, ^l4340h:0026h)
 GenValueClass (@19, ^l4340h:0028h) </PRE>


<H5 CLASS="refHeading">
vup</H5>
<PRE CLASS="Ref Swat Call">vup [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_Visual objects:displaying tree with Swat">
 </A>
<A NAME="TSwatCm_9.htm_IX_vup Swat command">
 </A>
The <CODE>
vup</CODE>
 (Visual UPward query) command is used to examine the visual ancestors of a particular object given by the <CODE>
addr</CODE>
 argument, the default *DS:SI, or the <CODE>
-i</CODE>
 option. The <CODE>
vup</CODE>
 command can be used with the <CODE>
-i</CODE>
 option (implied grab) to use the windowed object under the mouse as the object from which to start the upward query. This command is used primarily to ensure correct visual class hierarchy and to determine the field of the given object.</P>



<H4 CLASS="HeadingC">
Memory Examination with Modification</H4>
<PRE>assign, imem</PRE>
<P>
The commands in this group are used to modify memory without detaching Swat and editing the application code. They are often used in conjunction with <CODE>
istep</CODE>
, <CODE>
sstep</CODE>
, and <CODE>
pobject</CODE>
 to fix any small errors while the code is executing rather than detaching, modifying the actual code, and recompiling. These fixes are temporary, and you must change the source code to enact the real bug fixes.</P>

<H5 CLASS="refHeading">
assign</H5>
<PRE CLASS="Ref Swat Call">assign &lt;addr&gt; &lt;value&gt;</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_assign Swat command">
 </A>
The <CODE>
assign</CODE>
 command will assign the given <CODE>
value</CODE>
 to the given <CODE>
addr</CODE>
, which can only have type <CODE>
byte</CODE>
, <CODE>
word</CODE>
, or <CODE>
dword</CODE>
. Both memory locations and registers may be assigned new values. This command is used to correct minor mistakes or test differing values at run-time without having to recompile.</P>


<H5 CLASS="refHeading">
imem</H5>
<PRE CLASS="Ref Swat Call">imem [&lt;addr&gt;] [&lt;mode&gt;]</PRE>
<P>
<A NAME="TSwatCm_9.htm_IX_imem Swat command">
 </A>
The <CODE>
imem</CODE>
 (inspect memory) command combines examination and modification of memory into one command. It can be used to search through areas of memory and modify problem areas selectively. The command is used to print out memory starting at either the given <CODE>
addr</CODE>
 or at the default DS:SI in one of the following modes:</P>
<DL>
<DT>
<STRONG>
b</STRONG>
 (bytes)<CODE>
</DT><DD></CODE>
Displays the memory in terms of bytes.</DD>
<DT>
<STRONG>
w </STRONG>
(words)<STRONG>
</DT><DD></STRONG>
Displays the memory in terms of words.</DD>
<DT>
<STRONG>
d </STRONG>
(double words)</DT><DD>
Displays the memory in terms of double words.</DD>
<DT>
<STRONG>
i</STRONG>
 (instructions)</DT><DD>
Displays the memory in terms of instructions.</DD>
</DL>
<P>
There are many subcommands to <CODE>
imem</CODE>
 which are executed in the same manner as those for <CODE>
istep</CODE>
 and <CODE>
sstep</CODE>
. These subcommands are as follows:</P>
<DL>
<DT>
<STRONG>
b, w, d, i</STRONG>
</DT><DD>These will reset the mode to the given letter and redisplay the data in that mode.</DD>
<DT>
<STRONG>
n, j, &lt;return&gt; </STRONG>
(next, jump)</DT><DD>
This will advance to the next piece of data using the appropriate step size (dependent upon the display mode).</DD>
<DT>
<STRONG>
p, k, P</STRONG>
 (previous)</DT><DD>
This will retreat to the preceding piece of data. While in instruction mode, if the displayed instruction is wrong, try again with the <CODE>
P</CODE>
 subcommand.</DD>
<DT>
<STRONG>
&lt;space&gt;</DT><DD></STRONG>
This will clear the data being displayed and allow you to enter a new value in accordance with the current mode. This is exactly like the <CODE>
assign</CODE>
 command except for singly and doubly quoted strings. A singly quoted string such as `hello' will have its characters entered into memory starting at the current address with no null byte at the end. A doubly quoted string such as &quot;good-bye&quot; will be entered into memory at the current address with the addition of a null byte at the end of the string. This subcommand may not be used in instruction mode.</DD>
<DT>
<STRONG>
q</STRONG>
 (quit)</DT><DD>Quits the <CODE>
imem</CODE>
 mode and returns to the command level.</DD>
<DT>
<STRONG>
Ctrl-d</STRONG>
</DT><DD>Control-d (down) displays ten successive memory elements in the current display mode.</DD>
<DT>
<STRONG>
Ctrl-u</STRONG>
</DT><DD>Control-u (up) displays ten of the preceding memory elements in the current display mode.</DD>


</DL>
<HR>
<A NAME="TSwatCm_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 5.5 <A HREF="#TSwatCm_5.htm">Essential Commands</A>: 
<A NAME="TSwatCm_a.htm_53963">
 </A>
Other Important Commands</H3>
<PRE>alias, mwatch, objwatch, save, switch, sym-default, why</PRE>
<P>
These commands are important to know but do not readily fall into any of the previous categories. This section will discuss each of these commands in relation to the debugging process.</P>

<H6 CLASS="RefETitle">
alias</H6>
<PRE CLASS="Ref Swat Call">alias [&lt;name&gt; [&lt;body&gt;]]</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_alias Swat command">
 </A>
This command is normally used to abbreviate a long command or series of commands with one single, descriptive command. If no arguments are given, then <CODE>
alias</CODE>
 will just give a list of all the aliases and the commands they alias. The <CODE>
alias</CODE>
 command is a convenient shortcut for oft used commands or for commands that take a long time to type.</P>
<P>
If only one argument is given, then <CODE>
alias</CODE>
 will try to match that argument to the command it is aliased to. For example, if the <CODE>
print</CODE>
 command is aliased to<CODE>
 p</CODE>
, then <CODE>
alias p</CODE>
 will return <CODE>
print</CODE>
 as a result. If two arguments are given, then <CODE>
alias</CODE>
 will cause <EM>argument1</EM> to be allowed as an alternative to typing <EM>argument2</EM>. For example, if the command <CODE>
print</CODE>
 were to be aliased as <CODE>
p</CODE>
, the <CODE>
alias</CODE>
 command would be used as below:</P>
<PRE>[hello:0] 5 =&gt; <STRONG>alias p print</STRONG></PRE>
<P>
Typing<CODE>
 p</CODE>
 will now have the same effect in Swat as typing <CODE>
print</CODE>
.</P>


<H6 CLASS="RefETitle">
mwatch</H6>
<PRE CLASS="Ref Swat Call">mwatch [&lt;message&gt;+]</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_mwatch Swat command">
 </A>
<A NAME="TSwatCm_a.htm_IX_Messages:monitoring with Swat">
 </A>
The <CODE>
mwatch</CODE>
 (message watch) command watches a particular message and displays all deliveries of that message without stopping GEOS. This command can help to verify that a particular message is getting sent to all the right places and is not sent to any of the wrong places. Up to eight messages can be watched at once, and the <CODE>
mwatch</CODE>
 command with no arguments clears all watched messages. Note that some message handlers will relay a message on to a superclass' handler; this may make it appear that the message is being delivered again, though this is not the case. (See <A HREF="#TSwatCm_a.htm_59474"> The mwatch Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-12 <A NAME="TSwatCm_a.htm_59474">
 </A>
The mwatch Command</P>
<PRE CLASS="SwatDisplay">(ui:0) 30 =&gt; <STRONG>mwatch MSG_VIS_DRAW MSG_META_EXPOSED
</STRONG>(ui:0) 31 =&gt; <STRONG>c
</STRONG>MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0000h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0000h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0016h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0016h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 007ch, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 007ch, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h</PRE>


<H6 CLASS="RefETitle">
objwatch</H6>
<PRE CLASS="Ref Swat Call">objwatch [&lt;addr&gt;]</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_Messages:verifying receipt">
 </A>
<A NAME="TSwatCm_a.htm_IX_Objects:monitoring with Swat">
 </A>
<A NAME="TSwatCm_a.htm_IX_objwatch Swat command">
 </A>
The <CODE>
objwatch</CODE>
 (object watch) command is used for displaying the messages that have reached a particular object. It is useful for verifying that messages are being sent to the object at <EM>addr</EM>. If no argument is given, then any current <CODE>
objwatch</CODE>
 is turned off. (See <A HREF="#TSwatCm_a.htm_52734"> The objwatch Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-13 <A NAME="TSwatCm_a.htm_52734">
 </A>
The objwatch Command</P>
<PRE CLASS="SwatDisplay">mess1:0) 2 =&gt; <STRONG>objwatch Mess1View
</STRONG>brk5
(mess1:0) 3 =&gt; <STRONG>c
</STRONG>MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00afh, dx = 0013h, bp = 0000h
MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00afh, dx = 0013h, bp = 0000h
MSG_META_WIN_UPDATE_COMPLETE, ^l44a0h:0020h, GenViewClass
 cx = 4b90h, dx = 0000h, bp = 0000h
MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00b0h, dx = 0013h, bp = 0000h
MSG_META_RAW_UNIV_LEAVE, ^l44a0h:0020h, GenViewClass
 cx = 44a0h, dx = 0020h, bp = 4b90h
MSG_VIS_DRAW, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 23c0h, bp = 23c0h
MSG_VIS_COMP_GET_MARGINS, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 23c0h, bp = 0000h
MSG_VIS_DRAW, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 0163h, bp = 23c0h
MSG_META_WIN_UPDATE_COMPLETE, ^l44a0h:0020h, GenViewClass
 cx = 4b90h, dx = 0000h, bp = 0000h</PRE>


<H6 CLASS="RefETitle">
save</H6>
<PRE CLASS="syntax">save &lt;filename&gt;</PRE>
<P>
The save command, when passed a file name, saves the contents of Swat's main buffer to that file. Thus this command dumps Swat output to a file.</P>


<H6 CLASS="RefETitle">
showcalls -L</H6>
<PRE CLASS="syntax">showcalls -L
showcalls</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_showcalls:-L option">
 </A>
<A NAME="TSwatCm_a.htm_IX_Libraries:troubleshooting missing system files">
 </A>
The <CODE>
showcalls</CODE>
 command is, for the most part, only useful under rare circumstances. However, <CODE>
showcalls</CODE>
 with the -L option is useful for a fairly common situation: a library is failing to load but you can't find which one.</P>
<P>
To find out which libraries an application is trying to load, use <CODE>
showcalls -L</CODE>
. Swat will tell you whenever a library is sought. Whichever library is being sought when the &quot;missing system file&quot; error message appears is the library that's causing your problems: perhaps you need to re-install it.</P>
<P>
Use the <CODE>
showcalls</CODE>
 command without any arguments to turn off library-loading reporting.</P>


<H6 CLASS="RefETitle">
switch</H6>
<PRE CLASS="Ref Swat Call">switch [(&lt;patient&gt;:&lt;thread-num&gt;|&lt;threadID&gt;)]</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_Patients:switching">
 </A>
<A NAME="TSwatCm_a.htm_IX_Threads:switching">
 </A>
<A NAME="TSwatCm_a.htm_IX_switch Swat command">
 </A>
The <CODE>
switch</CODE>
 command is used to switch between applications or threads in Swat but does not physically change threads on the target PC. This allows the transfer of debugging control between threads of the same patient. If no argument is given, then <CODE>
switch</CODE>
 will change to the thread executing when GEOS was halted. Another way to switch threads is to type the name of the patient on the command line. If a patient has more than one thread, type the name of the patient, a space, and then the thread number. To change thread numbers within a geode, type a colon followed by the thread number to change to (e.g. &quot;<A NAME="TSwatCm_a.htm_IX_\::changing threads in Swat">
 </A>
:1&quot;)</P>


<H6 CLASS="RefETitle">
sym-default</H6>
<PRE CLASS="syntax">sym-default [&lt;patient&gt;]</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_Patients:setting the default">
 </A>
<A NAME="TSwatCm_a.htm_IX_sym-default Swat command">
 </A>
The <CODE>
sym-default</CODE>
 (symbol default) command is used to set the default patient to use when parsing an address expression which is not defined in the current patient. For example, if a breakpoint is hit in the kernel and an object in the application code needs to be examined, Swat will know to use the application as a patient and not the kernel. This command is useful when debugging a single patient, the most common way to debug. If no <EM>patient</EM> argument is given, then the name of the default patient will be displayed.</P>
<P>
This command is normally aliased to <CODE>
sd</CODE>
.</P>


<H6 CLASS="RefETitle">
why</H6>
<PRE CLASS="Ref Swat Call">why</PRE>
<P>
<A NAME="TSwatCm_a.htm_IX_why Swat command">
 </A>
The <CODE>
why</CODE>
 command prints the error code for an occurrence of a fatal error. This command is useful because it can give a good idea of why GEOS crashed.</P>

<HR>
<A NAME="TSwatCm_b.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Swat Introduction</A>: 6 
Additional Features</H2>
<P>
This section covers the features of Swat that make it easier to use when debugging an application.</P>
<UL>
<LI>
<A NAME="TSwatCm_b.htm_IX_Mouse:Swat usage">
 </A>
<A NAME="TSwatCm_b.htm_IX_Swat:mouse navigation">
 </A>
Mouse support<BR>
You can use the mouse to capture and paste text in the main Swat buffer. Capture text by click-dragging with the left mouse button. Pressing the right mouse button pastes the captured text to the Swat prompt line. </LI>
<LI>
Navigating the Main Buffer<BR>
<A NAME="TSwatCm_b.htm_IX_Control-u Swat navigation">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-d:Swat navigation">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-y Swat navigation">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-e Swat navigation">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-b Swat navigation">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-f Swat navigation">
 </A>
To scroll the main buffer, use <A NAME="TSwatCm_b.htm_IX_Ctrl-u Swat navigation[;u]">
 </A>
Ctrl-u (up), <A NAME="TSwatCm_b.htm_IX_Ctrl-d:Swat navigation[;d]">
 </A>
Ctrl-d (down), <A NAME="TSwatCm_b.htm_IX_Ctrl-y Swat navigation[;y]">
 </A>
Ctrl-y (back one line), <A NAME="TSwatCm_b.htm_IX_Ctrl-e Swat navigation[;e]">
 </A>
Ctrl-e (forward one line), <A NAME="TSwatCm_b.htm_IX_Ctrl-b Swat navigation[;b]">
 </A>
Ctrl-b (backward page) and <A NAME="TSwatCm_b.htm_IX_Ctrl-f Swat navigation[;f]">
 </A>
Ctrl-f (forward page).</LI>
<LI>
<A NAME="TSwatCm_b.htm_IX_History:Command, in Swat">
 </A>
Command History<BR>
By pressing Ctrl-p several times, you can call previous commands up to the Swat prompt. If you go past the command that you want, use Ctrl-n to go forward in the history.<BR>
The `!' character followed by a number repeats that command in the command history. (The standard Swat prompt includes a command number which may be used for this.) e.g. !184 will execute the 184th command of this session.<BR>
The `!' character followed by a string will repeat the most recent command whose beginning is the same as the passed string. That is !b might invoke <CODE>
brk list</CODE>
 if that was the most recent command that began with &quot;b&quot;.<BR>
Typing &quot;!!&quot; will repeat the previous command; &quot;!$&quot; is the last argument of the previous command.</LI>
<LI>
Command Correction<BR>
<A NAME="TSwatCm_b.htm_IX_Command correction in Swat">
 </A>
<A NAME="TSwatCm_b.htm_IX_Swat:command correction">
 </A>
<A NAME="TSwatCm_b.htm_IX_^:Command correction in Swat">
 </A>
To repeat the previous command, but changing a piece of it, use the ^ command. This comes in handy when you've made a typo trying to enter the previous command. </LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-14 Command Correction Using ^</P>
<PRE CLASS="SwatDisplay">(geos:0) 185 =&gt; <STRONG>wurds
</STRONG>Error: invoked &quot;wurds&quot;, which isn't a valid command name</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 186 =&gt; <STRONG>^u^o
</STRONG>words
Addr:	 	 +0   +2   +4   +6   +8   +a   +c   +e
4b4bh: e800 01b1 0e00 60f6 0016 9800 6e02 a900</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 187 =&gt; <STRONG>ddwords
</STRONG>Error: invoked &quot;ddwords&quot;, which isn't a valid command name</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 188 =&gt; <STRONG>^d
</STRONG>dwords
Addr:  +0       +4       +8       +c
4b59h: 1d0aa900 001c400d 294bd000 6c0a8000</PRE>
<UL>
<LI>
Address History<BR>
<A NAME="TSwatCm_b.htm_IX_@:Address history symbol in Swat">
 </A>
<A NAME="TSwatCm_b.htm_IX_Swat:address history">
 </A>
<A NAME="TSwatCm_b.htm_IX_History:Address, in Swat">
 </A>
<A NAME="TSwatCm_b.htm_IX_Address history in Swat">
 </A>
Swat has an address history which is composed of tokens for address expressions previously used by commands such as <CODE>
print</CODE>
 or <CODE>
pobj</CODE>
. The elements in the history can be accessed by typing <CODE>
@&lt;number&gt;</CODE>
 where the <EM>number</EM> argument is the number of the item in the history. These elements can replace a full address expression (except constants) and are often used when traversing through fields of a previously printed structure. The default history keeps track of the last 50 items. (See <A HREF="#TSwatCm_b.htm_35733"> The Address History</A>
.)</LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-15 <A NAME="TSwatCm_b.htm_35733">
 </A>
 The Address History</P>
<PRE CLASS="SwatDisplay">(geos:0) 8 =&gt; <STRONG>gentree -i
</STRONG>GenPrimaryClass (@1, ^l44a0h:001eh) &quot;MESS #1&quot;
 GenViewClass (@2, ^l44a0h:0020h)
 GenValueClass (@3, ^l44a0h:0026h)
 GenValueClass (@4, ^l44a0h:0028h)

(geos:0) 9 =&gt; <STRONG>pinst @3
</STRONG>class = ui::dgroup::GenValueClass
master part: Gen_offset(53) -- ui::GenValueInstance
@5: {ui::GenValueInstance (^h17568:1170)+53} = {
 GenInstance GenValue_metaInstance = {
 MetaBase Gen_metaInstance = {
 ClassStruct _far *MB_class = 3573h:1867h (motif::dgroup::OLScrollbarClass)
 }
 LinkPart GI_link = {
 void _optr LP_next = ^l44a0h:0028h (ui::dgroup::GenValueClass@6244h:02deh)
 }
 CompPart GI_comp = {
 void _optr CP_firstChild = null
 }
 void _lptr GI_visMoniker = null
 KeyboardShortcut GI_kbdAccelerator = {
 KS_PHYSICAL = 0
 KS_ALT = 0
 KS_CTRL = 0
 KS_SHIFT = 0
 KS_CHAR_SET = 0
 KS_CHAR = C_NULL
 }
 GenAttrs GI_attrs = {}
 GenStates GI_states = {GS_USABLE, GS_ENABLED}
 }
 WWFixed GVLI_value = {0.000000}
 WWFixed GVLI_minimum = {0.000000}
 WWFixed GVLI_maximum = {0.007324}
 WWFixed GVLI_increment = {0.000229}
 GenValueStateFlags GVLI_stateFlags = {GVSF_INDETERMINATE}
 GenValueDisplayFormat GVLI_displayFormat = GVDF_INTEGER
 void _optr GVLI_destination = ^l44a0h:0020h (ui::dgroup::GenViewClass@6244h:01aah)
 word GVLI_applyMsg = 681ah
} 
(geos:0) 10 =&gt;</PRE>
<UL>
<LI>
Abbreviations<BR>
<A NAME="TSwatCm_b.htm_IX_Control-]:Swat command completion">
 </A>
<A NAME="TSwatCm_b.htm_IX_Control-d:Swat command completion">
 </A>
<A NAME="TSwatCm_b.htm_IX_Ctrl-d:command completion in Swat[;D]">
 </A>
<A NAME="TSwatCm_b.htm_IX_Command completion in Swat">
 </A>
<A NAME="TSwatCm_b.htm_IX_Swat:abbreviations">
 </A>
Another shortcut available in Swat is the abbreviation feature. Many commands can be specified by their first few characters up to and including the letter that makes them distinct from all other commands. For example, the <CODE>
pobject</CODE>
 command can be specified <CODE>
pobj</CODE>
, <CODE>
pob</CODE>
, or even <CODE>
po</CODE>
, but not by just <CODE>
p</CODE>
 because there are other commands (such as <CODE>
print</CODE>
) beginning with the letter <CODE>
p</CODE>
. To get a list of all commands with a given prefix, type the prefix at the Swat prompt, then type Ctrl-D. To automatically complete a command name use the <A NAME="TSwatCm_b.htm_IX_Escape key:command completion in Swat[;&z]">
 </A>
Escape key (if the prefix is unambiguous) or <A NAME="TSwatCm_b.htm_IX_Ctrl-]:command completion in Swat[;\\];&z]">
 </A>
Ctrl-] to scroll through the list of possible command completions.</LI>
<LI>
Initialization Files<BR>
<A NAME="TSwatCm_b.htm_IX_.RC file (SWAT.RC file)[;RC file]">
 </A>
<A NAME="TSwatCm_b.htm_IX_SWAT.RC file">
 </A>
<A NAME="TSwatCm_b.htm_IX_Initialization file for Swat">
 </A>
If there are certain Swat commands that always need to be executed when Swat is run, then they can be placed in an initialization file. (See <A HREF="#TSwatCm_b.htm_76332"> An Initialization File</A>
<A HREF="#TSwatCm_b.htm_17569"> srcwin 15 regwin save 500 patient-default mess1 run</A>
) An initialization file contains a list of commands that will be executed just before the first prompt in Swat.<BR>
The initialization file should be called SWAT.RC. Swat will look in the directory from which it was invoked for such a file. If it doesn't find one there, it will look for a file named SWAT.RC in a directory named in the HOME environment variable</LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-16 <A NAME="TSwatCm_b.htm_76332">
 </A>
An Initialization File</P>
<PRE CLASS="SwatDisplay">srcwin 15<A NAME="TSwatCm_b.htm_17569"> </A>
regwin
save 500
patient-default mess1
run</PRE>
<P CLASS="figCaption">
This example shows a sample initialization file which sets up windows to display the source code and current register values, set the length of the save buffer to 500 lines, and continue running swat until the mess1 application has been loaded, at which point execution will automatically stop.</P>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
