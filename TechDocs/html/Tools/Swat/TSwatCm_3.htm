<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TSwatCm_3.htm,v 1.1 97/06/27 15:59:04 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Address Expressions</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Swat Introduction</A>: 3 
Address Expressions</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Notation</A> 
<!-- to next --> | <A HREF="TSwatCm_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 On-line Help</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
<A NAME="IX_Swat:address expressions">
 </A>
<A NAME="IX_Address expressions in Swat:notation">
 </A>
Address expressions are used as arguments to any Swat command that accesses memory. For example, the <CODE>
pobject</CODE>
 command takes an address expression as an argument and prints out information about the object at that address. An address expression can be a symbol name, which is just the name of a pointer, or a <A NAME="IX_Symbol paths in Swat address expressions">
 </A>
<EM>
symbol path</EM>
. A symbol path has the following structure, where scope is the name of a patient, module, function, structure type, union type, enumerated type, or assembly record type:</P>
<PRE>(&lt;<EM>scope</EM>&gt;::)+&lt;<EM>symbol</EM>&gt;</PRE>
<P>
Some of the more common symbol path formats are:</P>
<PRE>&lt;<EM>module</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>patient</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>patient</EM>&gt;::&lt;<EM>module</EM>&gt;::&lt;<EM>symbol</EM>&gt;
&lt;<EM>structure name</EM>&gt;::&lt;<EM>field name</EM>&gt;</PRE>
<P>
The symbol path is used when there is more than one symbol of a given name or if a symbol of a different application is needed. A symbol can be represented in a variety of ways: the name of an object, a field of a structure, a register/number combination, a number from the address history, an element of an array, nested Tcl commands, or a Tcl variable. Array indexing is used as follows:</P>
<PRE>&lt;addr&gt; [&lt;n&gt;]</PRE>
<P>
which will return the zero-based element <CODE>
n</CODE>
 from the given <CODE>
addr</CODE>
, even if <CODE>
addr</CODE>
 is not an array.</P>
<P>
Another important way of representing the symbol is as a <CODE>
segment:offset</CODE>
 pair. In this, the segment is a constant, a register, a module, or a handle ID given as <CODE>
^h&lt;id&gt;</CODE>
 where <CODE>
id</CODE>
 is a constant or register.</P>

<P>
There are several operators which are used to make memory examination and manipulation easier in Swat. These operators are shown below (in order of highest precedence to lowest):</P>
<UL>
<LI>
<CODE>
^h<BR>
</CODE>
<A NAME="IX_^h:in Swat address expressions[;h:inSwat address expressions]">
 </A>
<A NAME="IX_Handles:dereferencing in Swat expressions">
 </A>
The <EM>
carat-h</EM>
 is used to dereference a memory handle when representing an address as a<CODE>
handle:offset</CODE>
 pair (this is also known as a &quot;heap pointer&quot; representation) or when accessing a particular block of memory. It is often used in the situation when a memory handle is in one register (such as BX) and the offset is in another register (such as SI). This is similar to the ^l operator (below), but it requires an offset into the block rather than a chunk handle. The <CODE>
^h</CODE>
 operator is used thus:</LI>
<PRE>[hello3:0] 6 =&gt; <STRONG>print ^hdx:ALB_appRef</STRONG></PRE>
<LI>
<CODE>
.<BR>
</CODE>
<A NAME="IX_.:in Swat address expressions">
 </A>
<A NAME="IX_Structures:accessing fields in Swat address expressions">
 </A>
The <EM>
period</EM>
 is used to access a field in a structure. For example, to get the top bound part of a rectangle structure stored as a global variable:</LI>
<PRE>[hello3:0] 8 =&gt; <STRONG>print theRect.R_top</STRONG></PRE>
<LI>
<CODE>
+ -<BR>
</CODE>
<A NAME="IX_- (Hyphen):in Swat address expressions">
 </A>
<A NAME="IX_+:in Swat address expressions">
 </A>
The addition and subtraction operators are used to add and subtract symbols to and from other symbols and constants. If two symbols in the same segment are subtracted, a constant will be the result.</LI>
<LI>
<CODE>
^l<BR>
</CODE>
<A NAME="IX_Local memory:address expressions in Swat">
 </A>
<A NAME="IX_^l:in Swat address expressions">
 </A>
<A NAME="IX_optr:dereferencing in Swat address expressions">
 </A>
The <EM>
carat-l</EM>
 is used to dereference an optr, a pointer in the form <CODE>
handle:chunk-handle</CODE>
 (this is also known as a &quot;local memory pointer&quot;). This is similar to the <CODE>
^h</CODE>
 operator, but <CODE>
^l</CODE>
 requires a chunk handle rather than an offset. If an optr is stored in CX:DX, for example, the ^l operator could be used to dereference it as follows:</LI>
<PRE>[hello3:0] 11 =&gt; <STRONG>pobj ^lCX:DX
</STRONG>[hello3:0] 12 =&gt; <STRONG>pobj ^l0x43d0:0x022</STRONG></PRE>
<LI>
<CODE>
:<BR>
</CODE>
<A NAME="IX_Pointers:segment/offset pairs in Swat address expressions">
 </A>
<A NAME="IX_\::in Swat address expressions">
 </A>
The <EM>
colon</EM>
 is the segment/offset operator, used to separate the segment and offset in a <EM>
segment:offset</EM>
 pair.</LI>
<PRE>[hello3:0] 13 =&gt; <STRONG>pobj ^hCX:DX
</STRONG>[hello3:0] 14 =&gt; <STRONG>pobj 0x43d0:0x022
</STRONG>[hello3:0] 15 =&gt; <STRONG>pobj INTERFACE:HelloView</STRONG></PRE>
<LI>
<CODE>
*<BR>
</CODE>
<A NAME="IX_*:in Swat address expressions">
 </A>
<A NAME="IX_Pointers:dereferencing in Swat address expressions">
 </A>
The <EM>
asterisk</EM>
 is a pointer-dereferencing operator, as in the C programming language:</LI>
<PRE>[hello3:0] 16 =&gt; <STRONG>print SubliminalTone
</STRONG>@5: SubliminalTone = 7246h</PRE>
<PRE>[hello3:0] 17 =&gt; <STRONG>print *(&amp;SubliminalTone)</STRONG></PRE>
<PRE>@6: *(&amp;SubliminalTone) = 7246h</PRE>
<LI>
<CODE>
^v<BR>
</CODE>
<A NAME="IX_Virtual memory:handles in Swat address expressions">
 </A>
<A NAME="IX_^v:in Swat address expressions">
 </A>
The <EM>
carat-v </EM>
is the virtual memory operator, used to get to the base of a block that is in a Virtual Memory file given the file handle and VM block handle. The correct usage of the <CODE>
^v</CODE>
 operator is:</LI>
<PRE>^v&lt;file&gt;:&lt;VM_block&gt;</PRE>
</UL>
<P>
Much of the time the type of data stored at the address given by the address expression is implicit in the expression. Sometimes in ambiguous situations (using code as data), however, the type of data must be explicitly stated in the address expression. This is done by indicating the type of the data followed by a space and then a normal address expression. For example, in the expression</P>
<PRE>dword ds:14h</PRE>
<P>
the data at <CODE>
ds:14h</CODE>
 will be treated as a double word.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_2.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">2 Notation</A> 
<!-- to next --> | <A HREF="TSwatCm_4.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">4 On-line Help</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
