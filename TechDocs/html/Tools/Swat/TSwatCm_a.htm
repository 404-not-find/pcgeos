<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TSwatCm_a.htm,v 1.1 97/06/27 15:59:21 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Other Important Commands</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Swat Introduction</A>: 5.5 <A HREF="TSwatCm_5.htm">Essential Commands</A>: 
<A NAME="53963">
 </A>
Other Important Commands</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.4 Examining and Modifying Memory</A> 
<!-- to next --> | <A HREF="TSwatCm_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">6 Additional Features</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<PRE>alias, mwatch, objwatch, save, switch, sym-default, why</PRE>
<P>
These commands are important to know but do not readily fall into any of the previous categories. This section will discuss each of these commands in relation to the debugging process.</P>

<H4 CLASS="RefETitle">
alias</H4>
<PRE CLASS="Ref Swat Call">alias [&lt;name&gt; [&lt;body&gt;]]</PRE>
<P>
<A NAME="IX_alias Swat command">
 </A>
This command is normally used to abbreviate a long command or series of commands with one single, descriptive command. If no arguments are given, then <CODE>
alias</CODE>
 will just give a list of all the aliases and the commands they alias. The <CODE>
alias</CODE>
 command is a convenient shortcut for oft used commands or for commands that take a long time to type.</P>
<P>
If only one argument is given, then <CODE>
alias</CODE>
 will try to match that argument to the command it is aliased to. For example, if the <CODE>
print</CODE>
 command is aliased to<CODE>
 p</CODE>
, then <CODE>
alias p</CODE>
 will return <CODE>
print</CODE>
 as a result. If two arguments are given, then <CODE>
alias</CODE>
 will cause <EM>argument1</EM> to be allowed as an alternative to typing <EM>argument2</EM>. For example, if the command <CODE>
print</CODE>
 were to be aliased as <CODE>
p</CODE>
, the <CODE>
alias</CODE>
 command would be used as below:</P>
<PRE>[hello:0] 5 =&gt; <STRONG>alias p print</STRONG></PRE>
<P>
Typing<CODE>
 p</CODE>
 will now have the same effect in Swat as typing <CODE>
print</CODE>
.</P>


<H4 CLASS="RefETitle">
mwatch</H4>
<PRE CLASS="Ref Swat Call">mwatch [&lt;message&gt;+]</PRE>
<P>
<A NAME="IX_mwatch Swat command">
 </A>
<A NAME="IX_Messages:monitoring with Swat">
 </A>
The <CODE>
mwatch</CODE>
 (message watch) command watches a particular message and displays all deliveries of that message without stopping GEOS. This command can help to verify that a particular message is getting sent to all the right places and is not sent to any of the wrong places. Up to eight messages can be watched at once, and the <CODE>
mwatch</CODE>
 command with no arguments clears all watched messages. Note that some message handlers will relay a message on to a superclass' handler; this may make it appear that the message is being delivered again, though this is not the case. (See <A HREF="TSwatCm_a.htm#59474"> The mwatch Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-12 <A NAME="59474">
 </A>
The mwatch Command</P>
<PRE CLASS="SwatDisplay">(ui:0) 30 =&gt; <STRONG>mwatch MSG_VIS_DRAW MSG_META_EXPOSED
</STRONG>(ui:0) 31 =&gt; <STRONG>c
</STRONG>MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0000h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0000h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0016h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:001eh, GenInteractionClass
 cx = 3f80h, dx = 0016h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 007ch, bp = 3950h
MSG_VIS_DRAW, ^l2860h:002ch, OLGadgetAreaClass
 cx = 3f80h, dx = 007ch, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h
MSG_VIS_DRAW, ^l2860h:0020h, GenTextClass
 cx = 3f80h, dx = 3950h, bp = 3950h</PRE>


<H4 CLASS="RefETitle">
objwatch</H4>
<PRE CLASS="Ref Swat Call">objwatch [&lt;addr&gt;]</PRE>
<P>
<A NAME="IX_Messages:verifying receipt">
 </A>
<A NAME="IX_Objects:monitoring with Swat">
 </A>
<A NAME="IX_objwatch Swat command">
 </A>
The <CODE>
objwatch</CODE>
 (object watch) command is used for displaying the messages that have reached a particular object. It is useful for verifying that messages are being sent to the object at <EM>addr</EM>. If no argument is given, then any current <CODE>
objwatch</CODE>
 is turned off. (See <A HREF="TSwatCm_a.htm#52734"> The objwatch Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-13 <A NAME="52734">
 </A>
The objwatch Command</P>
<PRE CLASS="SwatDisplay">mess1:0) 2 =&gt; <STRONG>objwatch Mess1View
</STRONG>brk5
(mess1:0) 3 =&gt; <STRONG>c
</STRONG>MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00afh, dx = 0013h, bp = 0000h
MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00afh, dx = 0013h, bp = 0000h
MSG_META_WIN_UPDATE_COMPLETE, ^l44a0h:0020h, GenViewClass
 cx = 4b90h, dx = 0000h, bp = 0000h
MSG_META_MOUSE_PTR, ^l44a0h:0020h, GenViewClass
 cx = 00b0h, dx = 0013h, bp = 0000h
MSG_META_RAW_UNIV_LEAVE, ^l44a0h:0020h, GenViewClass
 cx = 44a0h, dx = 0020h, bp = 4b90h
MSG_VIS_DRAW, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 23c0h, bp = 23c0h
MSG_VIS_COMP_GET_MARGINS, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 23c0h, bp = 0000h
MSG_VIS_DRAW, ^l44a0h:0020h, GenViewClass
 cx = 4b80h, dx = 0163h, bp = 23c0h
MSG_META_WIN_UPDATE_COMPLETE, ^l44a0h:0020h, GenViewClass
 cx = 4b90h, dx = 0000h, bp = 0000h</PRE>


<H4 CLASS="RefETitle">
save</H4>
<PRE CLASS="syntax">save &lt;filename&gt;</PRE>
<P>
The save command, when passed a file name, saves the contents of Swat's main buffer to that file. Thus this command dumps Swat output to a file.</P>


<H4 CLASS="RefETitle">
showcalls -L</H4>
<PRE CLASS="syntax">showcalls -L
showcalls</PRE>
<P>
<A NAME="IX_showcalls:-L option">
 </A>
<A NAME="IX_Libraries:troubleshooting missing system files">
 </A>
The <CODE>
showcalls</CODE>
 command is, for the most part, only useful under rare circumstances. However, <CODE>
showcalls</CODE>
 with the -L option is useful for a fairly common situation: a library is failing to load but you can't find which one.</P>
<P>
To find out which libraries an application is trying to load, use <CODE>
showcalls -L</CODE>
. Swat will tell you whenever a library is sought. Whichever library is being sought when the &quot;missing system file&quot; error message appears is the library that's causing your problems: perhaps you need to re-install it.</P>
<P>
Use the <CODE>
showcalls</CODE>
 command without any arguments to turn off library-loading reporting.</P>


<H4 CLASS="RefETitle">
switch</H4>
<PRE CLASS="Ref Swat Call">switch [(&lt;patient&gt;:&lt;thread-num&gt;|&lt;threadID&gt;)]</PRE>
<P>
<A NAME="IX_Patients:switching">
 </A>
<A NAME="IX_Threads:switching">
 </A>
<A NAME="IX_switch Swat command">
 </A>
The <CODE>
switch</CODE>
 command is used to switch between applications or threads in Swat but does not physically change threads on the target PC. This allows the transfer of debugging control between threads of the same patient. If no argument is given, then <CODE>
switch</CODE>
 will change to the thread executing when GEOS was halted. Another way to switch threads is to type the name of the patient on the command line. If a patient has more than one thread, type the name of the patient, a space, and then the thread number. To change thread numbers within a geode, type a colon followed by the thread number to change to (e.g. &quot;<A NAME="IX_\::changing threads in Swat">
 </A>
:1&quot;)</P>


<H4 CLASS="RefETitle">
sym-default</H4>
<PRE CLASS="syntax">sym-default [&lt;patient&gt;]</PRE>
<P>
<A NAME="IX_Patients:setting the default">
 </A>
<A NAME="IX_sym-default Swat command">
 </A>
The <CODE>
sym-default</CODE>
 (symbol default) command is used to set the default patient to use when parsing an address expression which is not defined in the current patient. For example, if a breakpoint is hit in the kernel and an object in the application code needs to be examined, Swat will know to use the application as a patient and not the kernel. This command is useful when debugging a single patient, the most common way to debug. If no <EM>patient</EM> argument is given, then the name of the default patient will be displayed.</P>
<P>
This command is normally aliased to <CODE>
sd</CODE>
.</P>


<H4 CLASS="RefETitle">
why</H4>
<PRE CLASS="Ref Swat Call">why</PRE>
<P>
<A NAME="IX_why Swat command">
 </A>
The <CODE>
why</CODE>
 command prints the error code for an occurrence of a fatal error. This command is useful because it can give a good idea of why GEOS crashed.</P>

<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_9.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.4 Examining and Modifying Memory</A> 
<!-- to next --> | <A HREF="TSwatCm_b.htm"><IMG SRC="../../docImages/nextUp.gif" BORDER="0" ALT="Next: ">6 Additional Features</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
