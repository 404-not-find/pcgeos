<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TSwatCm_b.htm,v 1.1 97/06/27 15:59:24 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Additional Features</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A HREF="index.htm">Swat Introduction</A>: 6 
Additional Features</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5 Essential Commands</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
This section covers the features of Swat that make it easier to use when debugging an application.</P>
<UL>
<LI>
<A NAME="IX_Mouse:Swat usage">
 </A>
<A NAME="IX_Swat:mouse navigation">
 </A>
Mouse support<BR>
You can use the mouse to capture and paste text in the main Swat buffer. Capture text by click-dragging with the left mouse button. Pressing the right mouse button pastes the captured text to the Swat prompt line. </LI>
<LI>
Navigating the Main Buffer<BR>
<A NAME="IX_Control-u Swat navigation">
 </A>
<A NAME="IX_Control-d:Swat navigation">
 </A>
<A NAME="IX_Control-y Swat navigation">
 </A>
<A NAME="IX_Control-e Swat navigation">
 </A>
<A NAME="IX_Control-b Swat navigation">
 </A>
<A NAME="IX_Control-f Swat navigation">
 </A>
To scroll the main buffer, use <A NAME="IX_Ctrl-u Swat navigation[;u]">
 </A>
Ctrl-u (up), <A NAME="IX_Ctrl-d:Swat navigation[;d]">
 </A>
Ctrl-d (down), <A NAME="IX_Ctrl-y Swat navigation[;y]">
 </A>
Ctrl-y (back one line), <A NAME="IX_Ctrl-e Swat navigation[;e]">
 </A>
Ctrl-e (forward one line), <A NAME="IX_Ctrl-b Swat navigation[;b]">
 </A>
Ctrl-b (backward page) and <A NAME="IX_Ctrl-f Swat navigation[;f]">
 </A>
Ctrl-f (forward page).</LI>
<LI>
<A NAME="IX_History:Command, in Swat">
 </A>
Command History<BR>
By pressing Ctrl-p several times, you can call previous commands up to the Swat prompt. If you go past the command that you want, use Ctrl-n to go forward in the history.<BR>
The `!' character followed by a number repeats that command in the command history. (The standard Swat prompt includes a command number which may be used for this.) e.g. !184 will execute the 184th command of this session.<BR>
The `!' character followed by a string will repeat the most recent command whose beginning is the same as the passed string. That is !b might invoke <CODE>
brk list</CODE>
 if that was the most recent command that began with &quot;b&quot;.<BR>
Typing &quot;!!&quot; will repeat the previous command; &quot;!$&quot; is the last argument of the previous command.</LI>
<LI>
Command Correction<BR>
<A NAME="IX_Command correction in Swat">
 </A>
<A NAME="IX_Swat:command correction">
 </A>
<A NAME="IX_^:Command correction in Swat">
 </A>
To repeat the previous command, but changing a piece of it, use the ^ command. This comes in handy when you've made a typo trying to enter the previous command. </LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-14 Command Correction Using ^</P>
<PRE CLASS="SwatDisplay">(geos:0) 185 =&gt; <STRONG>wurds
</STRONG>Error: invoked &quot;wurds&quot;, which isn't a valid command name</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 186 =&gt; <STRONG>^u^o
</STRONG>words
Addr:	 	 +0   +2   +4   +6   +8   +a   +c   +e
4b4bh: e800 01b1 0e00 60f6 0016 9800 6e02 a900</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 187 =&gt; <STRONG>ddwords
</STRONG>Error: invoked &quot;ddwords&quot;, which isn't a valid command name</PRE>
<PRE CLASS="SwatDisplay">(geos:0) 188 =&gt; <STRONG>^d
</STRONG>dwords
Addr:  +0       +4       +8       +c
4b59h: 1d0aa900 001c400d 294bd000 6c0a8000</PRE>
<UL>
<LI>
Address History<BR>
<A NAME="IX_@:Address history symbol in Swat">
 </A>
<A NAME="IX_Swat:address history">
 </A>
<A NAME="IX_History:Address, in Swat">
 </A>
<A NAME="IX_Address history in Swat">
 </A>
Swat has an address history which is composed of tokens for address expressions previously used by commands such as <CODE>
print</CODE>
 or <CODE>
pobj</CODE>
. The elements in the history can be accessed by typing <CODE>
@&lt;number&gt;</CODE>
 where the <EM>number</EM> argument is the number of the item in the history. These elements can replace a full address expression (except constants) and are often used when traversing through fields of a previously printed structure. The default history keeps track of the last 50 items. (See <A HREF="TSwatCm_b.htm#35733"> The Address History</A>
.)</LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-15 <A NAME="35733">
 </A>
 The Address History</P>
<PRE CLASS="SwatDisplay">(geos:0) 8 =&gt; <STRONG>gentree -i
</STRONG>GenPrimaryClass (@1, ^l44a0h:001eh) &quot;MESS #1&quot;
 GenViewClass (@2, ^l44a0h:0020h)
 GenValueClass (@3, ^l44a0h:0026h)
 GenValueClass (@4, ^l44a0h:0028h)

(geos:0) 9 =&gt; <STRONG>pinst @3
</STRONG>class = ui::dgroup::GenValueClass
master part: Gen_offset(53) -- ui::GenValueInstance
@5: {ui::GenValueInstance (^h17568:1170)+53} = {
 GenInstance GenValue_metaInstance = {
 MetaBase Gen_metaInstance = {
 ClassStruct _far *MB_class = 3573h:1867h (motif::dgroup::OLScrollbarClass)
 }
 LinkPart GI_link = {
 void _optr LP_next = ^l44a0h:0028h (ui::dgroup::GenValueClass@6244h:02deh)
 }
 CompPart GI_comp = {
 void _optr CP_firstChild = null
 }
 void _lptr GI_visMoniker = null
 KeyboardShortcut GI_kbdAccelerator = {
 KS_PHYSICAL = 0
 KS_ALT = 0
 KS_CTRL = 0
 KS_SHIFT = 0
 KS_CHAR_SET = 0
 KS_CHAR = C_NULL
 }
 GenAttrs GI_attrs = {}
 GenStates GI_states = {GS_USABLE, GS_ENABLED}
 }
 WWFixed GVLI_value = {0.000000}
 WWFixed GVLI_minimum = {0.000000}
 WWFixed GVLI_maximum = {0.007324}
 WWFixed GVLI_increment = {0.000229}
 GenValueStateFlags GVLI_stateFlags = {GVSF_INDETERMINATE}
 GenValueDisplayFormat GVLI_displayFormat = GVDF_INTEGER
 void _optr GVLI_destination = ^l44a0h:0020h (ui::dgroup::GenViewClass@6244h:01aah)
 word GVLI_applyMsg = 681ah
} 
(geos:0) 10 =&gt;</PRE>
<UL>
<LI>
Abbreviations<BR>
<A NAME="IX_Control-]:Swat command completion">
 </A>
<A NAME="IX_Control-d:Swat command completion">
 </A>
<A NAME="IX_Ctrl-d:command completion in Swat[;D]">
 </A>
<A NAME="IX_Command completion in Swat">
 </A>
<A NAME="IX_Swat:abbreviations">
 </A>
Another shortcut available in Swat is the abbreviation feature. Many commands can be specified by their first few characters up to and including the letter that makes them distinct from all other commands. For example, the <CODE>
pobject</CODE>
 command can be specified <CODE>
pobj</CODE>
, <CODE>
pob</CODE>
, or even <CODE>
po</CODE>
, but not by just <CODE>
p</CODE>
 because there are other commands (such as <CODE>
print</CODE>
) beginning with the letter <CODE>
p</CODE>
. To get a list of all commands with a given prefix, type the prefix at the Swat prompt, then type Ctrl-D. To automatically complete a command name use the <A NAME="IX_Escape key:command completion in Swat[;&z]">
 </A>
Escape key (if the prefix is unambiguous) or <A NAME="IX_Ctrl-]:command completion in Swat[;\\];&z]">
 </A>
Ctrl-] to scroll through the list of possible command completions.</LI>
<LI>
Initialization Files<BR>
<A NAME="IX_.RC file (SWAT.RC file)[;RC file]">
 </A>
<A NAME="IX_SWAT.RC file">
 </A>
<A NAME="IX_Initialization file for Swat">
 </A>
If there are certain Swat commands that always need to be executed when Swat is run, then they can be placed in an initialization file. (See <A HREF="TSwatCm_b.htm#76332"> An Initialization File</A>
<A HREF="TSwatCm_b.htm#17569"> srcwin 15 regwin save 500 patient-default mess1 run</A>
) An initialization file contains a list of commands that will be executed just before the first prompt in Swat.<BR>
The initialization file should be called SWAT.RC. Swat will look in the directory from which it was invoked for such a file. If it doesn't find one there, it will look for a file named SWAT.RC in a directory named in the HOME environment variable</LI>
</UL>
<P CLASS="SwatTitle">


Swat Display 3-16 <A NAME="76332">
 </A>
An Initialization File</P>
<PRE CLASS="SwatDisplay">srcwin 15<A NAME="17569"> </A>
regwin
save 500
patient-default mess1
run</PRE>
<P CLASS="figCaption">
This example shows a sample initialization file which sets up windows to display the source code and current register values, set the length of the save buffer to 500 lines, and continue running swat until the mess1 application has been loaded, at which point execution will automatically stop.</P>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5 Essential Commands</A> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
