<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: TSwatCm_9.htm,v 1.1 97/06/27 15:59:19 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Examining and Modifying Memory</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="subsectionTitle">
<A HREF="index.htm">Swat Introduction</A>: 5.4 <A HREF="TSwatCm_5.htm">Essential Commands</A>: 
Examining and Modifying Memory</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.3 Breakpoints and Code Stepping</A> 
<!-- to next --> | <A HREF="TSwatCm_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5.5 Other Important Commands</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>
The commands in this section all deal with the examination, manipulation, or modification of the memory used by an application. Memory from individual bytes to complex data structures such as objects can be displayed and examined. These commands fall into the following groups:</P>
<UL>
<LI>
Simple Memory Examination.<BR>
Examination of bytes, words, and double words with no modification.</LI>
<LI>
Complex Memory Examination<BR>
Examination of structures such as objects, generic trees, and handle tables with no modification.</LI>
<LI>
Memory Examination with Modification<BR>
Examination of memory with modification if desired. Some commands are used only for memory modification.</LI>
</UL>
<P>
The commands in this section are often used with each other and with the code-stepping and breakpoint commands in order to pinpoint bugs in an application's code. Breakpoints can be set, code can be stepped through, and then the memory that the code uses can be examined.</P>
<P>
Some related commands defined in the Reference chapter are <CODE>
down</CODE>
, <CODE>
func</CODE>
, <CODE>
handles</CODE>
, <CODE>
hgwalk</CODE>
, <CODE>
impliedgrab</CODE>
, <CODE>
penum</CODE>
, <CODE>
phandle</CODE>
, <CODE>
pinst</CODE>
, <CODE>
piv</CODE>
, <CODE>
precord</CODE>
, <CODE>
skip</CODE>
, <CODE>
systemobj</CODE>
, <CODE>
up</CODE>
, and <CODE>
where</CODE>
.</P>

<H2 CLASS="HeadingC">
Simple Memory Examination</H2>
<PRE>bytes, words, dwords, frame, backtrace, why, listi</PRE>
<P>
The commands in this group are used to look at simple blocks of memory without modification. They are defined fully in the entries below.</P>

<H3 CLASS="refHeading">
bytes, words, dwords</H3>
<PRE CLASS="Ref Swat Call">bytes [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<PRE CLASS="Ref Swat Call">words [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<PRE CLASS="Ref Swat Call">dwords [&lt;addr&gt;] [&lt;length&gt;]</PRE>
<P>
<A NAME="IX_dwords Swat command">
 </A>
<A NAME="IX_words Swat command">
 </A>
<A NAME="IX_bytes Swat command">
 </A>
The <CODE>
bytes</CODE>
, <CODE>
words</CODE>
, and <CODE>
dwords</CODE>
 commands are essentially the same except that each looks at a different sized piece of memory. These commands will display the memory as a pointer to a dump of bytes, words, or dwords using the given or most recent (if no address is given) address.</P>
<P>
The <CODE>
bytes</CODE>
 command additionally displays the dump as its ASCII character representation, if any. These three commands are used to examine memory on a very basic level and are useful only if the user knows what the bytes, words, or dwords should or should not be and so can spot any problems. For example, if a certain character string such as &quot;Application&quot; is supposed to be stored at the address given by <EM>
fileType</EM>
 and the command</P>
<PRE>[hello3:0] 11 =&gt; <STRONG>bytes fileType</STRONG></PRE>
<P>
dumps the characters &quot;noitacilppA&quot;, then there is most likely a problem.</P>
<P>
These commands will automatically use the given <CODE>
addr</CODE>
 as a pointer to the memory to be examined. If Return is hit many times in a row, the result will be to examine adjacent pieces of memory. (See <A HREF="TSwatCm_9.htm#94653"> The words Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-6 <A NAME="94653">
 </A>
The words Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 15 =&gt; <STRONG>words themeSongBuf
</STRONG>Addr: +0 +2 +4 +6 +8 +a +c +e
0040h: 0004 0000 0049 0000 0004 0001 0083 0000
(mess1:0) 16 =&gt; <STRONG>words
</STRONG>Addr: +0 +2 +4 +6 +8 +a +c +e
004eh: 0000 0006 0004 0028 0000 0001 020b b800
(mess1:0) 17 =&gt; <STRONG>!!
</STRONG>words
Addr: +0 +2 +4 +6 +8 +a +c +e
005ch: b800 000c 0020 0002 0001 0000 0001 020b
(mess1:0) 18 =&gt; <STRONG>!!
</STRONG>words
Addr: +0 +2 +4 +6 +8 +a +c +e
006ah: 020b b800 000c 0010 0002 0001 000a 0010 </PRE>
<P CLASS="figCaption">
Here the <CODE>
words</CODE>
 command examines a buffer in memory. When this command is repeated without arguments, it will display memory continuing where the last command left off. Note the use of the <CODE>
!!</CODE>
 command to repeat the previous command.</P>


<H3 CLASS="refHeading">
backtrace, frame</H3>
<PRE CLASS="Ref Swat Call">backtrace [&lt;frames to list&gt;]</PRE>
<PRE CLASS="Ref Swat Call">frame &lt;subcommand&gt;</PRE>
<P>
<A NAME="IX_frame Swat command">
 </A>
<A NAME="IX_backtrace Swat command">
 </A>
<A NAME="IX_Stack:examining data on">
 </A>
The <CODE>
backtrace</CODE>
 and <CODE>
frame</CODE>
 commands are used to examine data that has been pushed onto the stack. An application may crash in a routine that is correctly written but has been passed bad data.</P>
<P>
The <CODE>
backtrace</CODE>
 command prints out a list of all the active frames for the current patient. Then the user can choose a particular frame to examine using one of the <CODE>
frame</CODE>
 subcommands. The <CODE>
frame</CODE>
 command is used to access frames that have been pushed onto the stack, where a <EM>
frame</EM>
 is the information for a routine that needs to be saved when it calls another routine.</P>
<P>
The <CODE>
frame</CODE>
 and <CODE>
backtrace</CODE>
 commands can be used together to print the active frames with <CODE>
backtrace</CODE>
 and then access data in these frames with <CODE>
frame</CODE>
. However, most of the <CODE>
frame</CODE>
 subcommands expect a token for a frame, not the frame number given by the backtrace command. To get this token, the <CODE>
top</CODE>
, <CODE>
cur</CODE>
 and <CODE>
next</CODE>
 subcommands are used. Then the other <CODE>
frame</CODE>
 subcommands can be used with the token to further examine the <CODE>
frame</CODE>
 data. See also <A HREF="../../Tools/SwatRef/SR_f.htm#IX_frame Swat command:command reference">the reference information for the <CODE>frame</CODE> command</A>.</P>

<P CLASS="figCaption">

<A NAME="63247">
 </A>
Backtrace and Frame commands</P>
<PRE>Death due to SOUND_BAD_EVENT_COMMAND
Execution died in patient sound:
SoundHandleTimerEvent+63: MOV AX, 7 (0007h)
*** No explanation available ***
Interrupt 3: Breakpoint trap
Stopped in FatalError, address 1844h:0163h
SoundHandleTimerEvent+63: MOV AX, 7 (0007h)
(mess1:0) 2 =&gt; <STRONG>backtrace
</STRONG>  1: near FatalError(), 1844h:0163h
  2: far AppFatalError(), 1844h:0163h
* 3: far SoundHandleTimerEvent(), 2cb2h:003fh
  4: far SoundLibDriverPlaySimpleFM(), 6247h:0062h
  5: far ResourceCallInt(), 1844h:1492h
  6: far SoundLibDriverStrategy(), 2cb2h:0ab2h
  7: near SoundCallLibraryDriverRoutine(), 629ch:00feh
  8: far SoundPlayMusic(), 629ch:0028h
  9: far ResourceCallInt(), 1844h:1492h
  10: far SOUNDPLAYMUSICNOTE(mh = ^h42b0h (at 753ch), priority = 1eh, tempo = 4h
, flags = 80h), 62d6h:00f3h
  11: far ResourceCallInt(), 1844h:1492h
  12: far Mess1Draw(), MESS1.GOC:307
  13: far MESS1PROCESSMETA_EXPOSED(win = 3a60h, message = 69 (invalid), oself =
3ee0h:0000h), MESS1.GOC:362
  14: far ResourceCallInt(), 1844h:1492h
MSG_META_EXPOSED (3a60h 0000h 0000h) sent to Mess1ProcessClass (^l20f0h:0h)
  16: near ObjCallMethodTableSaveBXSI(), 1844h:9ea5h
  17: far SendMessage(), 1844h:9d9bh
  18: far ObjMessage(), 1844h:1d9ch
  19: far MessageDispatchDefaultCallBack(), 1844h:1c72h
  20: far MessageProcess(callBack = 1844h:1c68h (geos::kcode::MessageDispatchDef
aultCallBack)), 1844h:1c15h
  21: far MessageDispatch(), 1844h:1b31h
  22: far ThreadAttachToQueue(), 1844h:bd2ch
(mess1:0) 3 =&gt; <STRONG>frame 12
</STRONG>Mess1Draw+302: MOV AX, 100 (0064h) </PRE>



<H2 CLASS="HeadingC">
Complex Memory Examination</H2>
<PRE>print, hwalk, lhwalk, objwalk, pobject, gentree, vistree, vup, gup</PRE>
<P>
The commands in this group are used to examine complex data structures in GEOS.</P>

<H3 CLASS="refHeading">
print</H3>
<PRE CLASS="Ref Swat Call">print &lt;expression&gt;</PRE>
<P>
<A NAME="IX_Formatting Swat output">
 </A>
<A NAME="IX_print Swat command">
 </A>
The <CODE>
print</CODE>
 command is used to print out the value of the given <CODE>
expression</CODE>
 argument. The <CODE>
expression</CODE>
 argument is normally some sort of typed address. When there is no type for the <CODE>
expression</CODE>
, then its offset is printed.</P>
<P>
The power of this command lies in its ability to print any type at any address; thus, it is used frequently to print out the values of important expressions such as registers or variables. The <CODE>
print</CODE>
 command also takes many flags which control the way in which the value of the <CODE>
expression</CODE>
 is displayed such as in decimal or hexadecimal. See the Reference chapter for more information on the flags for the <CODE>
print</CODE>
 command.</P>


<H3 CLASS="refHeading">
hwalk</H3>
<PRE CLASS="Ref Swat Call">hwalk [&lt;patient&gt;]</PRE>
<P>
<A NAME="IX_Heap:examining with Swat">
 </A>
<A NAME="IX_Handles:displaying the handle table">
 </A>
<A NAME="IX_hwalk Swat command">
 </A>
Use the <CODE>
hwalk</CODE>
 (heap walk) command to display blocks on the global heap. Its output can be tailored in various ways according to how the <CODE>
flags</CODE>
 are set. If a <CODE>
patient</CODE>
 is given, then <CODE>
hwalk</CODE>
 will only print the blocks owned by that patient. There are many fields in the listing such as the handle, address, and type of each block. By examining these fields, the user can get an overall sense of how the global heap is being managed, whether any block looks too big or too small, and what the handles of important blocks are. (See <A HREF="TSwatCm_9.htm#12640"> The hwalk Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-8 <A NAME="12640">
 </A>
The hwalk Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 6 =&gt; <STRONG>hwalk mess1
</STRONG>HANDLE ADDR SIZE FLAGS LOCK OWNER IDLE  OINFO 						TYPE
----------------------------------------------------------------
20f0h 41ebh 2272 FIXED  n/a mess1  n/a     1h 						R#1 (dgroup)
4160h 58eah  448 sDS  a   1 mess1 105eh    1h 						R#2 (MESS1_TEXT)
3a60h 59adh  784 s SL     0 mess1  0:03    1h 						WINDOW
4bb0h 6176h  560 s SL     0 mess1  0:05    1h 						WINDOW
3970h 6232h  336 s SL     0 mess1  0:03    1h 						GSTATE
3ee0h 633ch  160 s S  a   0 mess1  0:05 49c0h 						Geode
4950h 63beh 1280 s SL     0 mess1  0:05 49c0h 						OBJ(mess1:0)
4340h 640eh 1328   SL     0 mess1  0:05 49c0h 						R#3 (INTERFACE)
42b0h 753ch   96 s S      4 mess1 1249h    1h 					  
4bd0h 7542h   96 s S      0 mess1  0:01    1h   
41b0h 89d4h  896   SL     0 mess1  0:05 49c0h 						R#4 (APPRESOURCE)
4270h 99e1h   32 s S      0 mess1  0:05     1h

Total bytes allocated: 8288
(mess1:0) 7 =&gt;</PRE>


<H3 CLASS="refHeading">
lhwalk, objwalk</H3>
<PRE CLASS="Ref Swat Call">lhwalk [&lt;addr&gt;]</PRE>
<PRE CLASS="Ref Swat Call">objwalk [&lt;addr&gt;]</PRE>
<P>
<A NAME="IX_Objects:displaying object blocks">
 </A>
<A NAME="IX_objwalk Swat command">
 </A>
<A NAME="IX_Local memory:displaying">
 </A>
<A NAME="IX_lhwalk Swat command">
 </A>
The <CODE>
lhwalk</CODE>
 (local heap walk) command is used to display information about a local memory heap, and the <CODE>
objwalk</CODE>
 command is used to print out information about an object block. After using <CODE>
hwalk</CODE>
 to locate a specific block, <CODE>
lhwalk</CODE>
 or <CODE>
objwalk</CODE>
 can be used to print out information about that particular block. These commands also print out fields of information which include the local handle, the address, size, and type of data or object. See the Reference chapter for more information on the fields printed by <CODE>
lhwalk</CODE>
 and <CODE>
objwalk</CODE>
. (See <A HREF="TSwatCm_9.htm#76558"> The objwalk Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-9 <A NAME="76558">
 </A>
The objwalk Command</P>
<PRE CLASS="SwatDisplay">(mess1:0) 11 =&gt; <STRONG>objwalk ^h4340h
</STRONG> 
Heap at 640eh:0 (^h4340h), Type = LMEM_TYPE_OBJ_BLOCK
In use count = 3, Block size = 1328, Resource size = 59647 para (192 bytes)
 
HANDLE ADDRESS 	SIZE FLAGS CLASS (NAME)
------ ------- 	---- ----- ------------
 001ch     56h 		1eh  ---  *flags*
 001eh     76h 		c1h  D RO GenPrimaryClass (Mess1Primary)
 0020h    1aah 		ceh  D RO GenViewClass (Mess1View)
 0022h    166h 		32h ID  O OLGadgetAreaClass
 0024h    19ah 		 eh  I
 0026h    492h 		6bh  D  O GenValueClass
 0028h    2deh 		6bh  D  O GenValueClass
 002ah    37eh 		a6h ID  O GenInteractionClass
 002ch    44ah 		46h ID  O OLMenuBarClass
 002eh    13ah 		 bh ID
 0030h    426h 		22h ID  O OLMenuButtonClass
 
Free handles = 17, null handles = 0
Objects = 8, 4 of them marked ignoreDirty
 
(mess1:0) 12 =&gt;</PRE>


<H3 CLASS="refHeading">
pobject</H3>
<PRE CLASS="Ref Swat Call">pobject [&lt;addr&gt;] [&lt;print level&gt;]</PRE>
<P>
<A NAME="IX_Instance data:examining with Swat">
 </A>
<A NAME="IX_Objects:examining instance data">
 </A>
<A NAME="IX_pobject Swat command">
 </A>
The <CODE>
pobject</CODE>
 (print object) command (often abbreviated <CODE>
pobj</CODE>
) is used to print out the entire instance data chunk of an object. You can use <CODE>
gentree</CODE>
, <CODE>
vistree</CODE>
, or <CODE>
hwalk</CODE>
 and <CODE>
objwalk</CODE>
 to get the handles for an object; once you have them, use <CODE>
pobj</CODE>
 with the handles, as follows:</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>pobj ^l0x43d0:0x0022</STRONG></PRE>
<P>
will print out the instance data chunk specified by that optr.</P>
<P>
Any valid address expression, such as a dereferenced object name, may be used as an <CODE>
addr</CODE>
. Additionally, the print level can be changed to print just the headings to each of the master levels and an address history number. The <CODE>
pobject</CODE>
 command is used to verify that the object is behaving correctly and that its instance variables (if any) are correct. (See <A HREF="TSwatCm_9.htm#38136"> The pobject Command</A>
.)</P>
<P CLASS="SwatTitle">


Swat Display 3-10 <A NAME="38136">
 </A>
The pobject Command</P>
<PRE CLASS="SwatDisplay">[lesink:0] 10 =&gt; pobj ^l4710h:0020h
*UpTextView::UpTextViewClass (@7, ^l4710h:0020h)
master part: Gen_offset(123) -- UpTextViewInstance
@8: {UpTextViewInstance (^h18192:622)+123} = {
    MetaBase Gen = {
        ClassStruct _far *MB_class = 360ah:162fh (motif::dgroup::OLPaneClass)
    }
    LinkPart GI_link = {
        dword LP_next = 4710h:001fh
    }
    CompPart GI_comp = {
        dword CP_firstChild = 4710h:002ah
    }
    word GI_visMoniker = 0h
    word GI_kbdAccelerator = 0h
    byte GI_attrs = 2h
    byte GI_states = c0h
    PointDWFixed GVI_origin = {
        DWFixed PDF_x = {0.000000}
        DWFixed PDF_y = {0.000000}
    }
    RectDWord GVI_docBounds = {
        long RD_left = 0
        long RD_top = 0
        long RD_right = +480
        long RD_bottom = +480
    }
    PointDWord GVI_increment = {
        long PD_x = +20
        long PD_y = +15
    }
    PointWWFixed GVI_scaleFactor = {
        WWFixed PF_x = {1.000000}
        WWFixed PF_y = {1.000000}
    }
    ColorQuad GVI_color = {
        CQ_redOrIndex = fh, CQ_info = 0h, CQ_green = 0h, CQ_blue = 0h
    }
    word GVI_attrs = 10h
    byte GVI_horizAttrs = 88h
    byte GVI_vertAttrs = 88h
    byte GVI_inkType = 0h
    dword GVI_content = 4710h:0024h
    dword GVI_horizLink = 0000h:0000h
    dword GVI_vertLink = 0000h:0000h
}
Variable Data:
         *** No Variable Data ***
[lesink:0] 11 =&gt;</PRE>
<P>
In addition to printing information about the object at a given address, pobject can print information about certain objects in the application if passed certain flags:</P>
<DL>
<DT>
<STRONG>
pobject -i</STRONG>
</DT><DD>Prints information about the windowed object under the mouse pointer.</DD>
<DT>
<STRONG>
pobject -c</STRONG>
</DT><DD>Prints information about the content for the view over which the mouse is located.</DD>
</DL>
<P>
There are more flags available, and it is also possible to ask for more or less instance data information. See the full reference for this command for details.</P>


<H3 CLASS="refHeading">
gentree</H3>
<PRE CLASS="Ref Swat Call">gentree [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="IX_Trees:generic">
 </A>
<A NAME="IX_Generic objects:displaying tree">
 </A>
<A NAME="IX_gentree Swat command">
 </A>
The <CODE>
gentree</CODE>
 (generic tree) command prints out a generic tree from the given <CODE>
addr</CODE>
 and <CODE>
instance field</CODE>
. The <CODE>
addr</CODE>
 must be the address of an object in the generic tree, and the <CODE>
instance field</CODE>
 must be the offset into the Generic master part of the instance chunk or any instance data within the Generic master level which is to be printed. This command is used primarily to ensure correct structure of a generic tree and its instance data and to find a particular object in the generic tree.<A NAME="IX_Windows:accessing window with grab">
 </A>
The <CODE>
-i</CODE>
 (implied grab) option is used to find an object by placing the mouse over the window in which the object resides and typing the following:</P>
<PRE>[hello3:0] 7 =&gt; <STRONG>gentree -i</STRONG></PRE>
<P>
The default address that <CODE>
gentree</CODE>
 examines is contained in *DS:SI. (See <A HREF="TSwatCm_9.htm#83512"> Gentree and Gup</A>
.) To examine objects more closely, pass the handles displayed by <CODE>
gentree</CODE>
 to the <CODE>
pobject</CODE>
 command.</P>


<H3 CLASS="refHeading">
vistree</H3>
<PRE CLASS="Ref Swat Call">vistree [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="IX_Trees:visual">
 </A>
<A NAME="IX_vistree Swat command">
 </A>
The <CODE>
vistree</CODE>
 (visual tree) command prints out a visual tree from the given <CODE>
addr</CODE>
 and <CODE>
instance field</CODE>
. The <CODE>
addr</CODE>
 must be the address of an object in the visual tree, and the <CODE>
instance field</CODE>
 must be the offset into the Vis master part of the object's instance data which is to be printed. This command is primarily used to examine the on-screen layout of the application and to ensure correct structure of the visual tree and its instance data. The <CODE>
vistree</CODE>
 command can use the <CODE>
-i</CODE>
 option (implied grab), which will use the window that the mouse is over as the first visual object in the printed tree. The default address that <CODE>
vistree</CODE>
 examines is contained in *DS:DI. To examine objects more closely, pass the handles displayed by <CODE>
vistree </CODE>
to the <CODE>
pobject</CODE>
 command.</P>


<H3 CLASS="refHeading">
gup</H3>
<PRE CLASS="Ref Swat Call">gup [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="IX_Generic objects:accessing parents">
 </A>
<A NAME="IX_gup Swat command">
 </A>
The <CODE>
gup</CODE>
 (Generic UPward query) command is used to go up the generic tree from a particular object specified by the <CODE>
addr</CODE>
 argument, the default *DS:SI, or the <CODE>
-i</CODE>
 option. The <CODE>
-i</CODE>
 option (implied grab) uses the windowed object under the mouse as the object from which to start the upward query. This command is used primarily to ensure correct generic class hierarchy and to determine the field of the given object.</P>
<P CLASS="SwatTitle">


Swat Display 3-11 <A NAME="83512">
 </A>
Gentree and Gup</P>
<PRE CLASS="SwatDisplay">(mess1:0) 19 =&gt; <STRONG>gentree -i
</STRONG> 
GenViewClass (@5, ^l4340h:0020h)
 GenValueClass (@6, ^l4340h:0026h)
 GenValueClass (@7, ^l4340h:0028h)
 
(mess1:0) 20 =&gt; <STRONG>gup @5
</STRONG> 
GenViewClass (@11, ^l4340h:0020h)
GenPrimaryClass (@12, ^l4340h:001eh) &quot;MESS #1&quot;
GenApplicationClass (@13, ^l41b0h:0024h) *** Is Moniker List ***
GenFieldClass (@14, ^l4080h:001eh)
GenSystemClass (@15, ^l2460h:0020h)
 
(mess1:0) 21 =&gt; <STRONG>gentree ^l4340h:001eh
</STRONG> 
GenPrimaryClass (@16, ^l4340h:001eh) &quot;MESS #1&quot;
 GenViewClass (@17, ^l4340h:0020h)
 GenValueClass (@18, ^l4340h:0026h)
 GenValueClass (@19, ^l4340h:0028h) </PRE>


<H3 CLASS="refHeading">
vup</H3>
<PRE CLASS="Ref Swat Call">vup [&lt;addr&gt;] [&lt;instance field&gt;]</PRE>
<P>
<A NAME="IX_Visual objects:displaying tree with Swat">
 </A>
<A NAME="IX_vup Swat command">
 </A>
The <CODE>
vup</CODE>
 (Visual UPward query) command is used to examine the visual ancestors of a particular object given by the <CODE>
addr</CODE>
 argument, the default *DS:SI, or the <CODE>
-i</CODE>
 option. The <CODE>
vup</CODE>
 command can be used with the <CODE>
-i</CODE>
 option (implied grab) to use the windowed object under the mouse as the object from which to start the upward query. This command is used primarily to ensure correct visual class hierarchy and to determine the field of the given object.</P>



<H2 CLASS="HeadingC">
Memory Examination with Modification</H2>
<PRE>assign, imem</PRE>
<P>
The commands in this group are used to modify memory without detaching Swat and editing the application code. They are often used in conjunction with <CODE>
istep</CODE>
, <CODE>
sstep</CODE>
, and <CODE>
pobject</CODE>
 to fix any small errors while the code is executing rather than detaching, modifying the actual code, and recompiling. These fixes are temporary, and you must change the source code to enact the real bug fixes.</P>

<H3 CLASS="refHeading">
assign</H3>
<PRE CLASS="Ref Swat Call">assign &lt;addr&gt; &lt;value&gt;</PRE>
<P>
<A NAME="IX_assign Swat command">
 </A>
The <CODE>
assign</CODE>
 command will assign the given <CODE>
value</CODE>
 to the given <CODE>
addr</CODE>
, which can only have type <CODE>
byte</CODE>
, <CODE>
word</CODE>
, or <CODE>
dword</CODE>
. Both memory locations and registers may be assigned new values. This command is used to correct minor mistakes or test differing values at run-time without having to recompile.</P>


<H3 CLASS="refHeading">
imem</H3>
<PRE CLASS="Ref Swat Call">imem [&lt;addr&gt;] [&lt;mode&gt;]</PRE>
<P>
<A NAME="IX_imem Swat command">
 </A>
The <CODE>
imem</CODE>
 (inspect memory) command combines examination and modification of memory into one command. It can be used to search through areas of memory and modify problem areas selectively. The command is used to print out memory starting at either the given <CODE>
addr</CODE>
 or at the default DS:SI in one of the following modes:</P>
<DL>
<DT>
<STRONG>
b</STRONG>
 (bytes)<CODE>
</DT><DD></CODE>
Displays the memory in terms of bytes.</DD>
<DT>
<STRONG>
w </STRONG>
(words)<STRONG>
</DT><DD></STRONG>
Displays the memory in terms of words.</DD>
<DT>
<STRONG>
d </STRONG>
(double words)</DT><DD>
Displays the memory in terms of double words.</DD>
<DT>
<STRONG>
i</STRONG>
 (instructions)</DT><DD>
Displays the memory in terms of instructions.</DD>
</DL>
<P>
There are many subcommands to <CODE>
imem</CODE>
 which are executed in the same manner as those for <CODE>
istep</CODE>
 and <CODE>
sstep</CODE>
. These subcommands are as follows:</P>
<DL>
<DT>
<STRONG>
b, w, d, i</STRONG>
</DT><DD>These will reset the mode to the given letter and redisplay the data in that mode.</DD>
<DT>
<STRONG>
n, j, &lt;return&gt; </STRONG>
(next, jump)</DT><DD>
This will advance to the next piece of data using the appropriate step size (dependent upon the display mode).</DD>
<DT>
<STRONG>
p, k, P</STRONG>
 (previous)</DT><DD>
This will retreat to the preceding piece of data. While in instruction mode, if the displayed instruction is wrong, try again with the <CODE>
P</CODE>
 subcommand.</DD>
<DT>
<STRONG>
&lt;space&gt;</DT><DD></STRONG>
This will clear the data being displayed and allow you to enter a new value in accordance with the current mode. This is exactly like the <CODE>
assign</CODE>
 command except for singly and doubly quoted strings. A singly quoted string such as `hello' will have its characters entered into memory starting at the current address with no null byte at the end. A doubly quoted string such as &quot;good-bye&quot; will be entered into memory at the current address with the addition of a null byte at the end of the string. This subcommand may not be used in instruction mode.</DD>
<DT>
<STRONG>
q</STRONG>
 (quit)</DT><DD>Quits the <CODE>
imem</CODE>
 mode and returns to the command level.</DD>
<DT>
<STRONG>
Ctrl-d</STRONG>
</DT><DD>Control-d (down) displays ten successive memory elements in the current display mode.</DD>
<DT>
<STRONG>
Ctrl-u</STRONG>
</DT><DD>Control-u (up) displays ten of the preceding memory elements in the current display mode.</DD>


</DL>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="TSwatCm_5.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="TSwatCm_8.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">5.3 Breakpoints and Code Stepping</A> 
<!-- to next --> | <A HREF="TSwatCm_a.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">5.5 Other Important Commands</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
