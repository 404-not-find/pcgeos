    switch(os->type) {
	    if (!(os->flags & OSYM_UNDEF)) {
	     * Not one of the address-bearing types, or is one but it's
    outos->name = ST_Dup(input, inos->name, output, outstr);
    outs->type = s->type;
    outs->name = ST_Dup(input, s->name, output, outstr);
    outs->class = ST_Dup(input, s->class, output, outstr);
    outs->align = s->align;
    outs->type = s->type;
    outs->size = s->size;
    if (s->data != 0 && s->type != SEG_ABSOLUTE) {
	MemHandle   mem = VMDetach(input, s->data);
	outs->data = VMAlloc(output, 0, OID_CODE_BLOCK);
	VMAttach(output, outs->data, mem);
    for (cur = s->relHead; cur != 0; cur = next) {
	    head = prev = outs->relHead = VMAlloc(output, 0, OID_REL_BLOCK);
    outs->relHead = head;
    outs->toc = Sym_Create(output);
    for (cur = s->syms; cur != 0; cur = next) {
	    switch(os->type) 
		    if ((os->flags & OSYM_GLOBAL) &&
			 !(os->u.proc.flags & OSYM_NEAR) &&
			nameString = ST_Lock(input, os->name);
			ST_Unlock(input, os->name);
			outos->flags |= OSYM_ENTRY; /* mark it as an entry */
			outos->u.proc.address = index;
		    prevLocal = outos->u.proc.local = swd.symOff;
		    swd.nextMap->last = os->u.proc.address;
		    Sym_Enter(output, outs->toc, outos->name,
		    if (os->u.localVar.offset <= 0) {
			outos->u.procLocal.next = pl->u.proc.local;
			outos->u.procLocal.next = pl->u.procLocal.next;
		    DupType(os->u.localVar.type,
			       &outos->u.localVar.type);
		    OBJ_STORE_SID(outos->u.onStack.desc,
					 OBJ_FETCH_SID(os->u.onStack.desc),
		    if ((os->flags & OSYM_GLOBAL) && genericSyms)
			nameString = ST_Lock(input, os->name);
			ST_Unlock(input, os->name);
			outos->flags |= OSYM_ENTRY; /* mark it as an entry */
			outos->u.proc.address = index;
		    OBJ_STORE_SID(outos->u.class.super,
					 OBJ_FETCH_SID(os->u.class.super),
		    swd.nextMap->last = outos->u.class.address;
		    Sym_Enter(output, outs->toc, outos->name,
		    if (outos->name != NullID) {
			Sym_Enter(output, outs->toc, outos->name,
		    if (os->name != NullID) {
			enter = (Sym_Find(input, s->toc, os->name,
		    if (enter || os->name == NullID) {
			DupType(os->u.variable.type,
				&outos->u.variable.type);
			    Sym_Enter(output, outs->toc, outos->name,
			swd.nextMap->last = outos->u.variable.address;
		    Sym_Enter(output, outs->toc, outos->name,
		    swd.nextMap->last = outos->u.label.address;
		    swd.nextMap->last = outos->u.addrSym.address;
		outs->syms = dup;
		if (os->name != NullID) {
		    enter = (Sym_Find(input, s->toc, os->name,
		os->name = ST_Dup(input, os->name, output, outstr);
		    Sym_Enter(output, outs->toc, os->name, dup,
    Sym_Close(output, outs->toc);
    if (os->type == OSYM_MODULE) {
		if (s->name == os->name) {
		    os->u.module.table = s->toc;
		    os->u.module.syms = s->syms;
