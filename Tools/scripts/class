#!/bin/sh -
##############################################################################
#
# 	Copyright (c) Berkeley Softworks 1989 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Tools/scripts -- Class Tree Discovery
# FILE: 	class
# AUTHOR: 	Adam de Boor, August 24, 1989
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	ardeb	8/24/89		Initial Revision
#
# DESCRIPTION:
# 	Extracts classes and methods from all .asm files under the given
#	directories and builds a directory hierarchy whose directories are
#	classes and containing files named after the methods defined
#	(not declared) for a class
#
# 	Usage: class <dir>+
#
#	/staff/pcgeos/Kernel/Object is always searched, so there's no need
#	to provide it.
#
#	$Id: class,v 1.2 89/08/24 17:34:49 eric Exp $
#
###############################################################################
#
# Locate all .asm files to be searched
#
files="`find /staff/pcgeos/Kernel/Object $* -name \*.asm -print`"
#
# Remove the temporary file when we're done or interrupted.
#
trap "rm -f /tmp/class$$; exit 0" 0 1 2 3 15
#
# Run all the assembly files through awk to extract the info.
#
# The "classes" array doesn't hold any important information -- its indices 
# are the important part: placing something in the array indexed on a class
# name allows us to use the "for (i in classes)" construct to iterate over all
# known classes.
#
# The "supers" array is also indexed on class name and holds the name of a
# class's superclass, allowing us to work our way up the hierarchy.
#
# The "methods" array is also indexed on class name and holds a space-separated
# list of methods defined for a class.
#
awk '
/^DeclareClass/ {
    #
    # DeclareClass <class>, <super>, ...
    #
    # Trim off any comma from the class name
    #
    if ($2 ~ /.*,$/) {
	l=length($2)
	c=substr($2,0,l-1)
    } else {
	c=$2
    }
    #
    # Ditto for the superclass
    #
    if ($3 ~ /.*,$/) {
	l=length($3)
	sc=substr($3,0,l-1)
    } else {
	sc=$3
    }
    print "class = " c " super = " sc > "/dev/tty"
    classes[c] = "1"
    supers[c] = sc
    found=1
}
/^DefMethod/  {
    #
    # DefMethod <class>, <method>, <handler>
    #
    if ($2 ~ /.*,$/) {
	l=length($2)
	c=substr($2,0,l-1)
    } else {
	c=$2
    }
    if ($3 ~ /.*,.*$/) {
	l=index($3,",")
	m=substr($3,0,l-1)
    } else {
	m=$3
    }
    #
    # make sure method name begins with "METHOD_"
    #
    if (substr(m,0,7) != "METHOD_") {
	print "illegal method name: " m > "/dev/tty"
	next
    }
    #
    # remove "METHOD" portion, prepend prefix
    #
    m = substr(m,7)
    m = methodPrefix m
    #
    # print and save in array
    #
    print "class = " c " method = " m > "/dev/tty"
    methods[c] = methods[c] " " m
}
/^ifdef/  {
    #
    # ifdef MOTIF
    # (start of Motif or OpenLook-specific method definition section)
    #
    if ($2 == "MOTIF") {
	methodPrefix="__=MO_"
    } else if ($2 == "OPEN_LOOK") {
	methodPrefix="__=OL_"
    }
}
/^endif/  {
    #
    # endif
    # (end of Motif or OpenLook-specific section)
    methodPrefix=""
}
/^MO[ 	]*<[ 	]*DefMethod/  {
    #
    # MO < DefMethod <class>, <method>, <handler> >
    #
    if ($2 == "DefMethod") {
	cField = 3
	mField = 4
    } else if ($3 == "DefMethod") {
	cField = 4
	mField = 5
    } else {
	print "illegal  MO < DefMethod ... > line:" > "/dev/tty"
	print $0 > "/dev/tty"
	next
    }
    if ($cField ~ /.*,$/) {
	l=length($cField)
	c=substr($cField,0,l-1)
    } else {
	c=$cField
    }
    if ($mField ~ /.*,.*$/) {
	l=index($mField,",")
	m=substr($mField,0,l-1)
    } else {
	m=$mField
    }
    #
    # make sure method name begins with "METHOD_"
    #
    if (substr(m,0,7) != "METHOD_") {
	print "illegal method name: " m > "/dev/tty"
	next
    }
    #
    # remove "METHOD" portion, prepend prefix
    #
    m = substr(m,7)
    m = "__=MO_" m
    #
    # print and save in array
    #
    print "class = " c " method = " m > "/dev/tty"
    methods[c] = methods[c] " " m
}
/^OL[ 	]*<[ 	]*DefMethod/  {
    #
    # OL < DefMethod <class>, <method>, <handler> >
    #
    if ($2 == "DefMethod") {
	cField = 3
	mField = 4
    } else if ($3 == "DefMethod") {
	cField = 4
	mField = 5
    } else {
	print "illegal  OL < DefMethod ... > line:" > "/dev/tty"
	print $0 > "/dev/tty"
	next
    }
    if ($cField ~ /.*,$/) {
	l=length($cField)
	c=substr($cField,0,l-1)
    } else {
	c=$cField
    }
    if ($mField ~ /.*,.*$/) {
	l=index($mField,",")
	m=substr($mField,0,l-1)
    } else {
	m=$mField
    }
    #
    # make sure method name begins with "METHOD_"
    #
    if (substr(m,0,7) != "METHOD_") {
	print "illegal method name: " m > "/dev/tty"
	next
    }
    #
    # remove "METHOD" portion, prepend prefix
    #
    m = substr(m,7)
    m = "__=OL_" m
    #
    # print and save in array
    #
    print "class = " c " method = " m > "/dev/tty"
    methods[c] = methods[c] " " m
}
END {
    #
    # Avoid choke if no classes found...
    #
    if (found) {
	for (i in classes) {
	    #
	    # First generate the path using the superclasses
	    #
	    path=i
	    c=i
	    while(supers[c] != "root") {
		if (supers[c] == "") {
		    print "superclass for " c " unknown" > "/dev/tty"
		    break
		}
		path=supers[c] "/" path
		c=supers[c]
	    }
	    #
	    # Print the path
	    #
	    print path
	    #
	    # Now produce filenames for all the methods
	    #
	    n=split(methods[i],m," ")
	    for (j=1; j <= n; j++) {
		print "|" path "/" m[j]
	    }
	}
    }
}' $files > /tmp/class$$
#
# Create all the class directories, routing errors to a black hole. 
# we sort the directories to make sure the superclass exists before the
# subclass is created, since sort will choose the shorter string if they
# share a prefix
#
mkdir `sed -n '/^|/!p' /tmp/class$$ | sort` 2> /dev/null
#
# Create the methods in a loop to avoid getting "args to long" errors...
#
for i in `sed -n '/^|/s/^|//p' /tmp/class$$`; do
    echo > $i
done
