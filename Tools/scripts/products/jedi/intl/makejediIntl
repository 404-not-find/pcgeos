#!/bin/sh -
##############################################################################
#
# 	Copyright (c) GeoWorks 1992 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Shell scripts
# FILE: 	makejedi
# AUTHOR: 	Chris Boyke, Aug  13, 1993
#		Andrew Wilson, ???, 1994	- XIP for Bullet
#		Todd Stumpf, Aug 22, 1994	- XIP for Jedi
#		clee, Aug 14th, 1995.		- XIP for Intl. Jedi
#
# DESCRIPTION:
#
#	Do all the cruft necessary to create a jedi image for the 
#	prototypes.
#
#
# USAGE:
# 	makejediIntl {fr|gr|po|sp|it} {French|German|Port|Spansih|Italian}
#
# 	$Id: makejediIntl,v 1.10 95/11/15 11:27:15 cthomas Exp $
#
#
ec=ec

country=$1
longCountry=$2
echo ${country:?'country abbreviation not specified'}
echo ${longCountry:?'long country not specified'}
#
# This is the file in the user's home directory where makejedi
# defaults are stored.  If more variables are added, then this
# filename should be changed

makejediDefault=$HOME/.makejedi${country}3

#
# See if we have any arguments
#

# Ask the user what to do.  See if settings have been
# saved in the user's home directory from a previous run.

if [ -f $makejediDefault ]; then

    read makePC mapBlock mousePath doEC doSplit makeROM doLoad doIntl romSource romFilename makeKernel useLocal makeGFS doShip destDir makeStats < $makejediDefault

elif [ -f $HOME/.makejedi${country}2 ]; then
    read makePC mapBlock mousePath doEC doSplit makeROM doLoad romSource romFilename makeKernel useLocal makeGFS doShip destDir makeStats < $HOME/.makejedi${country}2
    doIntl="n"

elif [ -f $HOME/.makejedi${country}1 ]; then
    makePC="n"
    mapBlock="0"
    mousePath="LogiBus/logibus"

    read doEC doSplit makeROM doLoad romSource romFilename makeKernel useLocal makeGFS doShip destDir makeStats < $HOME/.makejedi${country}1
else
    makePC="n"
    mapBlock="0"
    mousePath="LogiBus/logibus"

    doEC="n"
    doSplit="n"

    makeROM="n"
    doLoad="n"
    doIntl="n"

    romSource="/n/seattle/jedi/bin"
    romFilename="rom-${country}.img"

    makeKernel="n"
    useLocal="n"

    makeGFS="n"
    doShip="n"

    destDir="."
    
    makeStats="n"
fi

if [ "$1" != "noprompt" ]; then

    #
    #  General Over-all Make conditions
    echo -n "Make an image for the PC? (y/n), default = "$makePC": "
    read r_makePC
    makePC=${r_makePC:-$makePC}


    echo -n "Make an EC image? (y/n), default = "$doEC": "
    read r_doEC
    doEC=${r_doEC:-$doEC}

    case "$makePC" in 
    	[Yy]*)
	    makePC=y
	    echo -n "Memory location of the map block (default = "$mapBlock") "
	    read r_mapBlock
	    mapBlock=${r_mapBlock:-$mapBlock}
	    if [ "$romWindows" = "" ]; then
		    echo You must set the "romWindows" environment variable to make a PC image
		    exit 1
	    fi
	    echo -n "Path to mouse driver (default = "$mousePath") "
	    read r_mousePath
	    mousePath=${r_mousePath:-$mousePath}
	    kernelPath=XIP
	    makeROM="n"
	    doLoad="n"
	    doIntl="n"
	    doSplit="n"
	    ;;
		
	*)
	    kernelPath=JediXIP
	    mapBlock="0xb0000"
	    romWindows="-r0x90000 0x10000 -r0xc8000 0x28000"
	    echo -n "Split the Image for Flashing? (y/n) = "$doSplit": "
	    read r_doSplit
	    doSplit=${r_doSplit:-$doSplit}

            #
            #  ROM-DISK specific Make conditions
            echo -n "Make a new ROM disk image? (y/n), default = "$makeROM": "
            read r_makeROM
            makeROM=${r_makeROM:-$makeROM}
    
            case "$makeROM" in
    	        [Yy]*)
	            echo -n "Send down a new loader? (y/n), default = "$doLoad": "
	            read r_doLoad
	            echo -n "Send down international specific files? (y/n), default = "$doIntl": "
	            read r_doIntl
	            ;;
	        *)
	            ;;
            esac
            doLoad=${r_doLoad:-$doLoad}
            doIntl=${r_doIntl:-$doIntl}

            echo -n "Source directory for ROM image (default = "$romSource") "
            read r_romSource
            romSource=${r_romSource:-$romSource}


            echo -n "Filename of ROM image (default = "$romFilename") "
            read r_romFilename
            romFilename=${r_romFilename:-$romFilename}
	    ;;
    esac

    #
    #  XIP image specific Make conditions
    echo -n "Remake XIP image? (y/n), default = "$makeKernel": "
    read r_makeKernel
    makeKernel=${r_makeKernel:-$makeKernel}

    case "$makeKernel" in
	[Yy]*)
	    echo -n "Use your local Kernel? (y/n), default = "$useLocal": "
	    read r_useLocal
	    ;;
	*)
	    ;;
    esac
    useLocal=${r_useLocal:-$useLocal}

    #
    #  GFS specific Make conditions
    echo -n "Remake GFS image? (y/n), default = "$makeGFS": "
    read r_makeGFS
    makeGFS=${r_makeGFS:-$makeGFS}

    case "$makeGFS" in
	[Yy]*)
	    echo -n "Resend GFS from Jedi${longCountry}? (y/n), default = "$doShip": "
	    read r_doShip
	    ;;
	*)
	    ;;
    esac
    doShip=${r_doShip:-$doShip}


    echo -n "Destination for image files (default = "$destDir") : "
    read r_destDir
    destDir=${r_destDir:-$destDir}

    echo -n "Make lots of stats? (y/n), default = "$makeStats": "
    read r_makeStats
    makeStats=${r_makeStats:-$makeStats}
else
    case "$makePC" in 
    	[Yy]*)
	    makePC=y
	    if [ "$romWindows" = "" ]; then
		    echo You must set the "romWindows" environment variable to make a PC image
		    exit 1
	    fi
	    kernelPath=XIP
	    ;;
	*)
	    kernelPath=JediXIP
	    mapBlock="0xb0000"
	    romWindows="-r0x90000 0x10000 -r0xc8000 0x28000"
	    ;;
    esac
fi


echo $makePC $mapBlock $mousePath $doEC $doSplit $makeROM $doLoad $doIntl $romSource $romFilename $makeKernel $useLocal $makeGFS $doShip $destDir $makeStats > $makejediDefault


set -x

######################################################################
# Set some variables.
#
case "$doEC" in
    [Yy]*)
	    ec=ec
	    ;;
    *)
	    ec=""
	    ;;
esac

installed=/staff/pcgeos/Jedi${longCountry}/Installed

#
# Make sure that there are no missing files in the ProductFiles
# document directory.
#
prodDoc=$installed/ProductFiles/Jedi/document
/staff/pcgeos/Tools/scripts/products/jedi/intl/checkDocumentDir \
 	  $prodDoc
if [ $? != 0 ]; then
    exit $?
fi

#
# Figure out the shipDir and distDir directories
#

	#
	# Put ship and distribution stuff on user's machine
	#
	cd /staff/$USER/..
	machineName=${machineName-`pwd`}
	shipDir=$machineName/jedi${country}
	distDir=$machineName/j${country}dist
	if [ ! -f $distDir ]; then
		mkdir -p $distDir	
	fi
	if [ ! -f $destDir ]; then
		mkdir -p $destDir	
	fi

#
# userTree is used to decide where to make the kernel.
#
userTree=${USER_TREE-/staff/pcgeos/$USER}



######################################################################
#
# Remake the ROM image
#
	
#
# This is now done outside of the "makeRom" case statement because
# the stat-generating code relies on this variable.
#
if [ "$ec" = "ec" ]; then
    romdisk=$romSource/../romdisk.e${country}
else
    romdisk=$romSource/../romdisk.n${country}
fi


case "$makeROM" in 
    [Yy]*)

    case "$doLoad" in
	[Yy]*)
	    #
	    # Copy the Loader over.  The MKDEV/MKPRO scripts will
	    # place the correct files there.

	    if [ "$ec" = "ec" ]; then
		cp $installed/Loader/JediXIP/loaderec.exe $romdisk/../xipec.rom
	    else
		cp $installed/Loader/JediXIP/loader.exe $romdisk/../xip.rom
	    fi
	    ;;
	*)
	    ;;
    esac

    case "$doIntl" in
	[Yy]*)
	    #
	    # Copy international-specific files over.
            #

	    prodFiles=$installed/ProductFiles/Jedi
	    intlRom=$romSource/../int-${country}.rom

	    mkdir -p $intlRom/geoworks
	    mkdir -p $intlRom/hp

            cp $prodFiles/net${ec}.ini $intlRom/geoworks
            cp $prodFiles/geos.str $intlRom/geoworks
	    cp $prodFiles/document/jwtime.wdb $intlRom/hp
	    cp $prodFiles/document/compact_.gdb $intlRom/hp
	    cp $prodFiles/document/phone.pdb $intlRom/hp
	    cp $prodFiles/document/jotter.000 $intlRom/hp
	    cp $prodFiles/document/notepad.ndb $intlRom/hp
	    cp $prodFiles/document/master.mdb $intlRom/hp
	    cp $prodFiles/document/finance.fdb $intlRom/hp

	    ;;
	*)
	    ;;
    esac


    set +x
    echo 'To make the ROM image, you must go to a DOS machine logged'
    echo 'in to NOVELL, and CD to the JEDI\BIN directory on drive G:'
    echo 'To make the DEVELOPMENT rom image, type:'
    echo " MKINT[EC] ${country}"
    echo 
    echo -n 'Press RETURN when finished. ' 
    read foo
    set -x
    ;;
  *)
    ;;
esac


##############################################################################
#Used to tell the merge and xip tools where the GFS and XIP images lie
#in the file, and where they will lie in memory
#
#  Maximum Image Size = 3 Megs = 3145728 bytes

if [ "$doSplit" = "y" ]; then

	haRomSize=100000		#Hex value size of ROM #0 ( <=1 Meg )

	rdImageStart="0"		#Hex value (0, always)
	rdFileStart="0"			#Hex value (0, always)
	rdSize="50000"			#Hex value (384k, always)

	xipImageStart="50000"		#Hex value (64k past BIOS)
	xipFileStart="50000"		#Hex value (64k past BIOS)
	xipImageSize="200000"		#gfsStart-xipStarts

	gfsImageStart="150000"		#Hex value (gfsFileStart - haRomSize)
	gfsFileStart="250000"		#Hex value (xipStart+xipImageSize)
	gfsSize="B0000"			#Hex Value

	xipArgs="-h3000 -m$mapBlock 0x8000 $romWindows -t0x90000 -M0x$xipImageSize -f0x$gfsImageStart -b0x$xipImageStart -ds -v -S0x$haRomSize"

	outFile="xipimage.split"


else


	haRomSize=0			#Hex value size of ROM #0 ( <=1 Meg )

	rdImageStart="0"		#Hex value (0, always)
	rdFileStart="0"			#Hex value (0, always)
	rdSize="50000"			#Hex value

	xipImageStart="50000"		#Hex value
	xipFileStart="50000"		#Hex value
	xipImageSize="200000"		#gfsStart-xipStart

	gfsImageStart="250000"		#Hex value (gfsFileStart - haRomSize)
	gfsFileStart="250000"		#Hex value (xipStart+xipImageSize)
	gfsSize="B0000"			#Hex Value

	xipArgs="-h3000 -m$mapBlock 0x8000 $romWindows -ds -f0x$gfsImageStart"



if [ "$makePC" = "y" ]; then
	#
	# On the PC, there's around 64K of rom resources that get put on the
	# heap (your mileage may vary). To try to equalize heapspace, we
	# put the top of the heap at 0xa0000 on the PC.
	#
	xipArgs="$xipArgs -u -w -t0xa0000"
	outFile="xipimage"
else
	xipArgs="$xipArgs -b0x$xipImageStart -v -S0x$haRomSize -M0x$xipImageSize -t0x90000"
	outFile="xipimage.gboard"
fi


fi

######################################################################
# Make the kernel
#

#
# This stuff used to be inside an 'if' below, but we count on these
# variables for creating stats, so they need to be set.
#
instXIPPath=/staff/pcgeos/Jedi${longCountry}/Installed
localXIPPath=/staff/pcgeos/todd
local2XIPPath=/staff/pcgeos/todd2
johnXIPPath=/staff/pcgeos/john2
cleeXIPPath=/staff/pcgeos/clee
cthomasXIPPath=/staff/pcgeos/cthomas
steveXIPPath=/staff/pcgeos/stevey
andrewXIPPath=/staff/pcgeos/andrew2

case "$country" in 
[Ff][Rr]*)
	kbdSubPath=French
	allCapsLang=FRENCH
	;;
[Gg][EeRr]*)
	kbdSubPath=German
	allCapsLang=GERMAN
	;;
[Ii][Tt]*)
	kbdSubPath=Italian
	allCapsLang=ITALIAN
	;;
[Pp][Oo]*)
	allCapsLang=PORT
	;;  # Portugese uses US keyboard driver
[Ss][Pp]*)
	allCapsLang=SPANISH
	kbdSubPath=Spanish
	;;
*)
	echo "$0: Invalid language"
	exit 1
	;;
esac

ansic="-D${instXIPPath}/Library/AnsiC/XIP/ansic${ec}.geo"
borlandc="-D${instXIPPath}/Library/Math/Compiler/BorlandC/XIP/borlandc${ec}.geo"
cards="-D${instXIPPath}/Library/Cards/JediXIP/cards${ec}.geo"
cell="-D${instXIPPath}/Library/Cell/XIP/cell${ec}.geo"
color="${instXIPPath}/Library/Color/color${ec}.geo"
content="-D${instXIPPath}/Library/ConView/JediXIP/conview${ec}.geo"
dbEng="${instXIPPath}/Library/Jedi/DB/db${ec}.geo"
gadgets="-D${instXIPPath}/Library/Extensions/Gadgets/XIP/gadgets${ec}.geo"
hpm="-D${instXIPPath}/Library/Jedi/HPMLib/hpmlib${ec}.geo"
jedit="-D${instXIPPath}/Library/Jedi/JEdit/jedit${ec}.geo"
jerror="-D${instXIPPath}/Library/Jedi/JError/jerror${ec}.geo"
jlib="-D${instXIPPath}/Library/Jedi/JLib/jlib${ec}.geo"
jotter="-D${instXIPPath}/Library/Jedi/JediUI/Jotter/jotter${ec}.geo"
jtable="-D${instXIPPath}/Library/Jedi/JTable/XIP/jtable${ec}.geo"
jutils="-D${instXIPPath}/Library/Jedi/JUtils/XIP/jutils${ec}.geo"
jwtime="-D${instXIPPath}/Library/Jedi/JWTime/JediXIP/jwtime${ec}.geo"
key="-D${instXIPPath}/Library/HWR/Key/JediXIP/key${ec}.geo"
math="-D${instXIPPath}/Library/Math/JediXIP/math${ec}.geo"
mtable="-D${instXIPPath}/Library/Extensions/MTable/JEDI/mtable${ec}.geo"
notes="-D${instXIPPath}/Library/Jedi/Notes/notes${ec}.geo"
palm="${instXIPPath}/Library/HWR/PalmP3/XIP/palm${ec}.geo"
parse="-D${instXIPPath}/Library/Parse/XIP/parse${ec}.geo"
pccom="${instXIPPath}/Library/PCCom/XIP/pccom${ec}.geo"
pcmcia="-D${instXIPPath}/Library/PCMCIA/JediXIP/pcmcia${ec}.geo"
pen="-D${instXIPPath}/Library/Pen/XIP/pen${ec}.geo"
rtcm="-D${instXIPPath}/Library/RTCM/XIP/rtcm${ec}.geo"
ruler="-D${instXIPPath}/Library/Ruler/XIP/ruler${ec}.geo"
sound="${instXIPPath}/Library/Sound/XIP/sound${ec}.geo"
specUI="${instXIPPath}/Library/SpecUI/JMotif/XIP/jmotif${ec}.geo"
spool="${instXIPPath}/Library/Spool/JediXIP/spool${ec}.geo"
ssheet="-D${instXIPPath}/Library/Spreadsheet/JediXIP/ssheet${ec}.geo"
ssmeta="-D${instXIPPath}/Library/SSMeta/XIP/ssmeta${ec}.geo"
styles="${instXIPPath}/Library/Styles/XIP/styles${ec}.geo"
text="${instXIPPath}/Library/Text/JediXIP/text${ec}.geo"
table="-D${instXIPPath}/Library/Extensions/Table/XIP/table${ec}.geo"
ui="${instXIPPath}/Library/User/JediXIP/ui${ec}.geo"

dosfsD="${instXIPPath}/Driver/IFS/DOS/MS4/XIP/ms4${ec}.geo"
if [ "$makePC" = "y" ]; then
  netwareD="${instXIPPath}/Driver/IFS/DOS/NetWare/XIP/netware${ec}.geo"
  gfsD="${instXIPPath}/Driver/IFS/GEOS/MegaFile/XIP/megafile${ec}.geo"
  jpenD="${instXIPPath}/Driver/Mouse/$mousePath${ec}.geo"
  jpowerD="${instXIPPath}/Driver/Power/NoPowerPCMCIA/nppcm${ec}.geo"
  kbdD="${instXIPPath}/Driver/Keyboard/kbd.geo"
  soundD="${instXIPPath}/Driver/Sound/Standard/standard${ec}.geo"
  ucD=""
else
  netwareD=""
  gfsD="${instXIPPath}/Driver/IFS/GEOS/VGFS/JediXIP/vgfs${ec}.geo"
  jpenD="${instXIPPath}/Driver/Mouse/JediPen/jpen${ec}.geo"
  jpowerD="${instXIPPath}/Driver/Power/Jedi/jpwr${ec}.geo"
  kbdD="${instXIPPath}/Driver/Keyboard/Jedi/${kbdSubPath}/jkbd_${country}.geo"
  soundD="${instXIPPath}/Driver/Sound/Standard/JEDI/standard${ec}.geo"
  ucD="${instXIPPath}/Driver/uC/uc${ec}.geo"
fi

fontD="${instXIPPath}/Driver/Font/Nimbus/nimbus${ec}.geo"
serialD="${instXIPPath}/Driver/Stream/Serial/JediXIP/serial${ec}.geo"
streamD="${instXIPPath}/Driver/Stream/stream${ec}.geo"
taskD="${instXIPPath}/Driver/Task/NonTS/nonts${ec}.geo"

alarmA="-D${instXIPPath}/Appl/Jedi/Alarm/XIP/alarm${ec}.geo"
geocalcA="-D${instXIPPath}/Appl/GeoCalc/JediXIP/geocalc${ec}.geo"
homescreenA="-D${instXIPPath}/Appl/Jedi/HomeScreen/JediXIP/homescreen${ec}.geo"
readerA="-D${instXIPPath}/Appl/Reader/JEDI/reader${ec}.geo"
transA="-D${instXIPPath}/Appl/Jedi/Transfer/JediXIP/trans${ec}.geo"
#worldTA="${instXIPPath}/Appl/Jedi/WorldTime/worldtime${ec}.geo"
worldTA="-D${instXIPPath}/Appl/Jedi/WorldTime/Borland/worldtime${ec}.geo"
jprefA="-D${instXIPPath}/Appl/Jedi/JPref/JediXIP/jpref${ec}.geo"
screenDA="-D${instXIPPath}/Appl/Jedi/ScreenDump/XIP/screendump${ec}.geo"
jdemoA="-D${instXIPPath}/Appl/Jedi/JDemo/${allCapsLang}/jdemo${ec}.geo"
startupA="-D${instXIPPath}/Appl/Startup/JStartup/JediXIP/jstartup${ec}.geo"
soliA="-D${instXIPPath}/Appl/Games/Solitaire/JediXIP/soli${ec}.geo"

apptbkA="-D${instXIPPath}/Appl/Jedi/ApptBk/apptbk${ec}.geo"
dmA="-D${instXIPPath}/Appl/Jedi/DM/dm${ec}.geo"
phoneA="-D${instXIPPath}/Appl/Jedi/Phone/phone${ec}.geo"
financeA="-D${instXIPPath}/Appl/Jedi/Finance/${allCapsLang}/finance${ec}.geo"
hpcalcA="-D${instXIPPath}/Appl/Jedi/HPCalc/${allCapsLang}/hpcalc${ec}.geo"
jappA="-D${instXIPPath}/Appl/Jedi/JApp/japp${ec}.geo"
notepadA="-D${instXIPPath}/Appl/Jedi/Notepad/notepad${ec}.geo"



xipFiles="${ansic} ${borlandc} ${cards} ${cell} ${color} ${content} \
	${dbEng} ${gadgets} ${hpm} ${jedit} ${jerror} ${jlib} ${jotter} \
	${jtable} ${jutils} ${jwtime} ${key} ${math} ${mtable} ${notes} \
	${palm} ${parse} ${pccom} ${pcmcia} ${pen} ${rtcm} ${ruler} \
	${sound} ${specUI} ${spool} ${ssheet} ${ssmeta} ${styles} \
	${text} ${table} ${ui} ${netwareD} \
	${dosfsD} ${gfsD} ${jpenD} ${jpowerD} ${kbdD} ${ucD} \
	${fontD} ${serialD} ${soundD} ${streamD} ${taskD} \
	${alarmA} ${geocalcA} ${homescreenA} ${readerA} ${transA} \
	${worldTA} ${jprefA} ${screenDA} ${jdemoA} ${startupA} ${soliA} \
	${apptbkA} ${dmA} ${phoneA} ${financeA} ${hpcalcA} ${jappA} \
	${notepadA} ${fooA}"


    case "$useLocal" in 
	[Yy]*)
	    xipKernel=$userTree/Library/Kernel/$kernelPath/geos${ec}.geo

	    if [ ! -f $xipKernel ]; then
		#
		# No local kernel exists.  Die if they're trying to make
		# the XIP image with it.
		#
		case "$makeKernel" in
			[Yy]*)
				echo 'Local kernel not found'
        			exit 1
				;;
			*)
			;;
		esac
	    fi
	    ;;

    #
    # Otherwise, use the installed kernel.  Assume it's already been
    # made, but re-xip it (in-house, that is).
    #

	*)
	    xipKernel=$installed/Library/Kernel/$kernelPath/geos${ec}.geo
	    ;;
    esac

fullxip=fullxip


case "$makeKernel" in
    [Yy]*)

    set +x
    #
    # Make sure All of the XIP files exist
    #
    noexist=
    for f in $xipFiles $xipKernel ; do
	case "$f" in
	   -D*)
	      f=`expr "$f" : '^-D\(.*\)$'`
	      ;;
	   *)
	      ;;
	esac
	if [ \! -f $f ] ; then
	    noexist="$noexist
	$f"
        fi
    done
    if [ "$noexist" ] ; then
	echo "### The following files do not exist: $noexist"
        exit 1
    fi    

    set -x

    if $fullxip $xipArgs $xipFiles $xipKernel -o$distDir/$outFile ; then
	ls -la $distDir/$outFile
	if [ "$makePC" = "y" ]; then
            cp $distDir/$outFile $destDir
	fi
    else
    	exit 1
    fi

    ;;

    *)
    ;;

esac

######################################################################
# Create the gfs file.
#

ship=ship
case "$makeGFS" in
    [Nn]*)
	;;
    *)
	case "$doShip" in 
	 [Yy]*)
	    #
	    #  Do a ship Jedi${longCountry} Installed
	    cd $installed
	    if [ "$ec" = "ec" ]; then
	    	if [ "$makePC" = "y" ]; then
			$ship JEDI_PC_GFS_EC
		else
			$ship JEDI_GFS_EC
		fi	
	    else
	    	if [ "$makePC" = "y" ]; then
			$ship JEDI_PC_GFS
		else
			$ship JEDI_GFS
#			shipGFS
		fi	
	    fi
	    # Rename fonts, so that JSys will become the default font
	    cd $shipDir/userdata/font
	    mv Bison.fnt bison.fnt
	    mv Mono.fnt mono.fnt
	    mv Sans.fnt sans.fnt
	    mv jsys.fnt JSys.fnt
	    ;;
	 *)
	    ;;
	esac

	#
	# Put stub applications in the world directory (these apps actually lie
	# in the XIP image) so homescreen can find 'em, or so that the
	# hard icon mechanism will work...
	#

	    elyom $shipDir/world/alarm${ec}.geo
	    elyom $shipDir/world/apptbk${ec}.geo
	    elyom $shipDir/world/dm${ec}.geo
	    elyom $shipDir/world/finance${ec}.geo
	    elyom $shipDir/world/geocalc${ec}.geo
	    elyom $shipDir/world/hpcalc${ec}.geo
	    elyom $shipDir/world/jpref${ec}.geo
	    elyom $shipDir/world/notepad${ec}.geo
	    elyom $shipDir/world/phone${ec}.geo
	    elyom $shipDir/world/reader${ec}.geo
	    elyom $shipDir/world/trans${ec}.geo
	    elyom $shipDir/world/worldtime${ec}.geo
	    elyom $shipDir/world/jdemo${ec}.geo
	    elyom $shipDir/world/soli${ec}.geo

	    elyom $shipDir/system/sysappl/homescreen${ec}.geo
	    elyom $shipDir/system/sysappl/japp${ec}.geo
	    elyom $shipDir/system/sysappl/jstartup${ec}.geo
	    elyom $shipDir/system/sysappl/screendump${ec}.geo




	#
	# create .GFS file
	if [ "$makePC" = "y" ]; then
	    gfs create -d"Jedi System Software" -vSystem \
	        -hsystem \
	        -hsystem/sysappl \
	        $distDir/jedi.gfs \
	        $shipDir
	    cp $distDir/jedi.gfs $destDir
	else	
	    gfs create -a -d"Jedi System Software" -vSystem -s$gfsSize \
	        -hsystem \
	        -hsystem/sysappl \
	        $distDir/jedi.gfs \
	        $shipDir
	fi
	;;
esac

######################################################################
# Create JEDI.IMG


cd $distDir

#####################################################################
# Merge everything together into jedi.img
#

warnLS=`ls -l $outFile jedi.gfs $romSource/$romFilename`
if [ "$makePC" = "y" ]; then
	echo makejedi complete
else
	if [ "$makeKernel" = "n" -o "$makeKernel" = "N" \
	     -o "$makeGFS" = "n" -o "$makeGFS" = "N" \
	     -o "$makeROM" = "n" -o "$makeROM" = "N" ]; then
		set +x
		echo -n "
WARNING:  You chose not to remake the GFS and/or XIP image and/or
ROM image.  Your existing local copies will be used, even if 
they're REALLY old:

$warnLS

Are you sure you want to continue (y/n), default = n? "
		read ans
		case "$ans" in
			[Yy]*)
			;;
			*)
			exit 1
			;;
		esac
		set -x
	fi
	merge 	\
		jedi.img \
		$romSource/$romFilename:0 \
		$outFile:$xipFileStart \
		jedi.gfs:$gfsFileStart
fi


##################################################################
# If desired, split things into sub-files
#
case "$doSplit" in 
 [Nn]*)
    ;;
 *)
    /staff/pcgeos/todd3/Tools/misc/split/split -s1a0000 jedi.img $destDir
    ;;
esac


##################################################################
# If desired, generate lots of stats
#
case "$makeStats" in
  [Nn]*)
     ;;
  *)
     #
     # This dumps a lot of output, and scrolls the important
     # info off the screen (like if stuff fit) so we want to
     # turn off output for the remainder of the script
     set +x

     #
     # Stats 'o plenty
     #	- All XIP files
     #  - All GFS files
     #  - All ROM-disk files
     #
     sfile="$distDir/buildStats"
     dfile="/tmp/mjtmp.$$"
     dumpgeo=${dumpgeo-dumpgeo}

     echo "Creating stats in $sfile"
     rm -f $sfile
     touch $sfile
     
     #
     # First the XIP image.
     #
     echo							>> $sfile
     echo "################ XIP IMAGE ##################"	>> $sfile
     
     #
     # All geodes are coming from the Installed tree, mostly.
     #
     q=`pwd`
     cd /staff/pcgeos/Jedi${longCountry}/Installed
     for i in `echo $xipKernel $xipFiles`; do
     	#
	# Generate stat information for each file
	#
	case "$i" in
	   -D*)
	      i=`expr "$i" : '^-D\(.*\)$'`
	      ;;
	   *)
	      ;;
	esac
	
	#
	# Scam off the initial (useless) part of the path.
	# Do this separately from the above case statement.
	#
	case "$i" in
	    /staff/pcgeos/Jedi${longCountry}/Installed*)
	        i=`expr "$i" : '^/.*/Installed/\(.*\)$'`
	 	;;
	    *)
	        ;;
	esac

	ls -lt $i						>> $sfile
	
	#
	# Do dumpgeo now, since we have the file name, but save output
	# for later, so it's not mixed in with the "ls" output.
	#
	$dumpgeo $i >> $dfile
     done
     cd $q

     #
     # Then the GFS.
     #
     echo							>> $sfile
     echo "################ GFS ##################"		>> $sfile
     q=`pwd`
     cd $shipDir
     for i in `find . \! -type d -print`; do
     	#
	# Generate stat information for each file
	#
	ls -lt $i						>> $sfile
     done
     cd $q
     
     #
     # Then the ROM disk
     #
     echo							>> $sfile
     echo "################ ROM DISK ##################"	>> $sfile
     q=`pwd`
     cd $romdisk
     for i in `find . \! -type d -print`; do
	#
	# Generate stat information for each file
	#
     	ls -lt $i						>> $sfile
     done
     cd $q

     echo							>> $sfile
     echo "################ DUMPGEOS ##################"	>> $sfile
     cat $dfile							>> $sfile
     rm -f $dfile

     echo							>> $sfile
     echo "################ IMAGE FILES ##################"	>> $sfile
     echo "$warnLS"                                              >> $sfile
     ;;
esac
