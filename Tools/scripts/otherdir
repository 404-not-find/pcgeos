
#!/bin/sh -
#
# A shell script for toggling between the installed directory and your
# individual directory. Simply prints the name of the directory to which the
# shell should change.
#
#
#	$Id: otherdir,v 1.20 96/09/10 16:53:15 patrick Exp $
# 

if [ "$1" = "x" ]; then
    set -x
fi

cwd=${PWD-`pwd`}

optional_os=liberty

# test for .../$optional_os/...
#
os_name=`expr "$cwd" : '^.*/\('$optional_os'\)/.*$'`

# test for .../$optional_os
#
if [ "$os_name" != "$optional_os" ]; then
    os_name=`expr "$cwd" : '^.*/\('$optional_os'\)$'`
fi

# choose the default if we failed to fill os_name
#
if [ "$os_name" != "$optional_os" ]; then
    os_name=pcgeos
fi

# try getting  .../$os_name from .../xxx/...
#
rootdir=`expr $cwd : '\(.*/'$os_name'\)/.*$'`

# try getting  .../$os_name from .../xxx
#
if [ "$rootdir" = "" ]; then
    rootdir=`expr $cwd : '\(.*/'$os_name'\)$'`
fi

if [ "$rootdir" = "" ]; then
	echo "otherdir only works in '$optional_os' or '${ROOTDIR-$os_name}' tree" 1>&2
	exit 1
fi

# a branch directory  .../$os_name/branch/...
#
branchdir=`expr $cwd : '\(.*/'$os_name'/[^/]*\)/.*$'`

# another form for branches  .../$os_name/branch
#
if [ "$branchdir" = "" ]; then
    branchdir=`expr $cwd : '\(.*/'$os_name'/[^/]*\)$'`
fi

tail=`expr "$cwd" : $rootdir'/[^/]*/\(.*\)$'`

branchfile=""
if [ "$os_name" = "$optional_os" -a -f $branchdir/branch ]; then
    branchfile=`cat $branchdir/branch`
    branchtaildir=`expr $cwd : '/.*/'$os_name'/\([^/]*\)/.*$'`
    if [ "$branchfile" != "$branchtaildir" ]; then
        branchfile=""
    fi
fi

case "$cwd" in
    /arch*/Installed*)
    	echo $rootdir/`expr "$cwd" : $rootdir'/[^/]*/Installed/\(.*\)$'`
	;;
    /arch*)
    	echo $rootdir/$tail
	;;
    */$optional_os/source*)
    	echo $rootdir/$USER/`expr "$cwd" : '^'$rootdir'/source/\(.*\)$'`
	;;
    */$optional_os/$branchfile/source*)
	echo $rootdir/`expr "$cwd" : '^.*'$branchfile'/\(.*\)$'`
	;;
    */$optional_os/compiled*)
    	echo $rootdir/source/`expr "$cwd" : '^'$rootdir'/compiled/[^/]*/[^/]*/\(.*\)$'`
	;;
    */$optional_os/$branchfile/compiled*)
    	echo $rootdir/$branchfile/source/`expr "$cwd" : '^'$rootdir'/'$branchfile'/compiled/[^/]*/[^/]*/\(.*\)$'`
	;;
    */$optional_os/*)
	if [ -f $branchdir/branch ]; then
	    echo $rootdir/`cat $branchdir/branch`'/source/'$tail
	else
    	    echo $rootdir/source/`expr "$cwd" : '^'$rootdir'/[^/]*/\(.*\)$'`
	fi
	;;
    $rootdir/Installed/*)
    	echo $rootdir/`expr "$cwd" : $rootdir'/Installed/\(.*\)$'`
	;;
    $rootdir/Release20X/Installed/*)
    	echo $branchdir/`expr "$cwd" : $branchdir'/Installed/\(.*\)$'`
	;;
    $rootdir/Wizard*/Installed/*)
    	echo $branchdir/`expr "$cwd" : $branchdir'/Installed/\(.*\)$'`
	;;
    $rootdir/DBCS/*)
	echo $rootdir/$tail
	;;
    $rootdir/Re*)
	echo $rootdir/$tail
	;;
    $rootdir/Wizard*)
	echo $rootdir/$tail
	;;
    $rootdir/Bullet*)
	echo $rootdir/$tail
	;;
    $rootdir/Zoomer*)
	echo $rootdir/$tail
	;;
    $rootdir/[A-Z]*)
    	echo $rootdir/$USER/`expr "$cwd" : '^'$rootdir'/\(.*\)$'`
	;;
    *)
	#
	# OK, if we reach this point then we have a lowercase directory
	# after /staff/$os_name, and so we need to check for lowercase
	# non usernames, and handle branch stuff.
	#
	# setup variables for the rootdir, figuring Branch stuff ahead
	# of time.  fRoot is the root if a non-user lowercase found,
	# nfRoot if "not found".
	#
	if [ -f $branchdir/BRANCH ]; then
	    fRoot=$rootdir/`cat $branchdir/BRANCH`
	    nfRoot=$fRoot
	else
	    fRoot=$rootdir/$USER
	    nfRoot=$rootdir
	fi
	echo $nfRoot/$tail
	;;
esac

