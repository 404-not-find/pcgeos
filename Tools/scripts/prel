#!/bin/sh -
##############################################################################
#
# 	Copyright (c) Berkeley Softworks 1990 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Tools/scripts -- Relocation pretty-printer.
# FILE: 	prel
# AUTHOR: 	John Wedgwood, 29-Jun-90
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	jcw	29-Jun-90	Initial Revision.
#
# DESCRIPTION:
#	This shell script pretty prints .obj and .eobj files.
#
# USAGE:
#	prel [ file ], where file is one or more .obj or .eobj files.
#
#	$Id: prel,v 1.2 90/07/02 15:01:20 john Exp $
#
###############################################################################

files=*.eobj
if [ $# -gt 0 ]; then
    files=$*
fi

for i in $files; do printobj $i; done | awk '
BEGIN {
    ignore = 1
}
/^Segment/ {
    #
    # Take note of entering a new segments definitions. If the segment is
    # for a library, then dont take note of its procedures.
    #
    curseg=substr($4,1,length($4)-1)

    if ($8 == "library,") {
    	ignore=1
    } else {
    	ignore=0
    }
    segments[curseg] = ignore
}
/far procedure/ && ignore == 0 {
    #
    # far procedure defined in a non-library segment. Record its name and
    # segment in the procs array for later use. Since printobj will leave no
    # space between the end of a long procedure name and the ":" that separates
    # it from its attributes, we must trim any trailing colon ourselves.
    #
    pname=$1; len=length($1)
    if (substr($1,len-1,1) == ":") {
    	pname=substr($1,1,len-1)
    }
    if (procs[pname] == "") {
    	procs[pname]=curseg
    }
}

/pc-relative, word-sized relocation/ {
    #
    # pc-relative word-sized relocation must be a near call (could be a near
    # jmp, of course, but they are much the same thing...). Record another
    # one in the "near" array element for the procedure.
    #
    e=index($0, "=")
    s1=substr($0,e+2)
    c=index(s1,",")
    pname=substr(s1,1,c-1)
    
    near[pname] += 1
}

/call relocation/ {
    #
    # Far call to something. Extract the name of the target and record both
    # the destination and the procedure from which it was called.
    #
    e=index($0, "=")
    s1=substr($0,e+2)
    c=index(s1,",")
    pname=substr(s1,1,c-1)
    
    calls[pname ":" curseg] += 1
    
    relocTo[$10]+=1
    relocFrom[curseg]+=1
    totals[curseg $10]+=1
}
END {
    #
    # Print out all defined segments
    #
    print "\nRelocation totals for each segment ---"
    for (i in segments) {
        printf "Segment %14s, relocations out (%4d), relocations in (%4d)\n", \
			i, relocFrom[i], relocTo[i]
    }
    print "\nRelocation totals by segment pair ---"
    for (i in segments) {
        for (j in segments) {
	    if (i != j) {
		if (totals[i j]) {
                    printf "(%2d) %14s to %14s\n", totals[i j], i, j
		}
	    }
	}
    }
    print "\nRoutines and where they are called from ---"
    for (q in segments) {
        if (segments[q] == 0) {
	    print "    In segment " q ":"
	    for (i in procs) {
		if (procs[i] == q) {
		    namep=0
		    #
		    # If any near calls, print them out first.
		    #
		    if (near[i]) {
			if (near[i] != 1) {
			    s="s"
			} else {
			    s=" "
			}
			printf "\t%20s: %3d near call%s\n", i, near[i], s
			namep=1
		    }
		    #
		    # Now print all far calls separated by segment.
		    #
		    for (j in segments) {
			n = calls[i ":" j]
			if (n) {
			    if (n != 1) {
				s="s"
			    } else {
				s=" "
			    }
			    if (namep) {
				printf "\t%20s  %3d far call%s from %s\n", "", \
								    n, s, j
			    } else {
				printf "\t%20s: %3d far call%s from %s\n", \
								    i, n, s, j
				namep=1
			    }
			}
		    }
		}
	    }
	}
    }
}'
