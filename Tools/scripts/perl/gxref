#!/usr/public/perl
# -*- Mode: perl -*-
##############################################################################
#
#       Copyright (c) Geoworks 1994 -- All Rights Reserved
#
# PROJECT:      PC GEOS
# MODULE:       Tools/scripts -- Cross Reference Generator
# FILE:         gxref
# AUTHOR:       Jacob Gabrielson
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       jag     3/28/94         Initial Revision
#
# DESCRIPTION:
#       Generates cross-referencing information.
#
# USAGE:
#	Run "gxref -h".
#
#       $Id: gxref,v 1.1 94/05/24 16:39:09 jacob Exp $
#
###############################################################################

sub usage {
    print <<EOM;
Usage: gxref [hl] [-b <branch>] [<directory>]
    
    -h		Prints this message
    -l		Prints out files that needed updating
    -b <branch> Overrides any setting in /staff/pcgeos/\$USER/BRANCH
    
    If no directory is specified, current working directory is assumed.
EOM
}

require "newgetopt.pl";
require "find.pl";
require "stat.pl";

&NGetOpt("h", "l", "b=s") || &usagedie;

if ($opt_h) {
    &usage;
    exit 0;
}

$opt_l = 1;

$login = getlogin || (getpwuid($<))[0] || die "You don't have a login name!\n";

if ($#ARGV >= 0) {		# specified directory on command-line?
    $localdir = $ARGV[0];
    # Make sure we generate .xref files in local directory.
    chdir($localdir) || die "Can't chdir to '$localdir'!\n";
} else {
    chop($cwd = `pwd`);		# no, assume current working directory, then
    $localdir = $cwd;
}

# First set $branch based on user's BRANCH file.
$branchfile = &localPrefix($localdir) . '/BRANCH';
if (-e $branchfile) {
    open(BRANCH, "<$branchfile") || die "Can't open '$branchfile'!\n";
    $branch = "/" . <BRANCH>;
    $branch =~ s/\n//g;		# remove trailing \n
    close BRANCH;
}

# Override BRANCH file setting with command-line option.
if ($opt_b) {
    $branch = $opt_b;
    $branch = "/" . $branch;
}

# This variable should be something like: "/staff/pcgeos/Appl/mumble", or
# else "/staff/pcgeos/Release20X/mumble".
$otherdir = "/staff/pcgeos" . $branch . "/" . &localSuffix($localdir);

$topdir = $localdir;		# used by &wanted
&find($localdir);

# Look at development directory, if it exists.
if (-d $otherdir) {
    $topdir = $otherdir;
    &find($otherdir);
}

# Update/create all the .xref files.
for $xfile (keys %xfrom) {
    &maybeXref($xfrom{$xfile}, $xfile);
}

exit 0;

# This function is called by the &find subroutine.
sub wanted {
    return unless (/.+\.asm$/);	# ignore files without .asm extension
    local($asmfile) = $name;	# file containing source code
    local($xfile) = $name;	# file to contain crossrefs
    $xfile =~ s/asm$/xref/;
    $xfile =~ s,^$topdir/,,;	# remove arrgravating prefix (grr)
    $xfile =~ s,/,!,g;		# puts everything in top-level directory

    # Store the .asm file this $xfile should be generated from.
    $xfrom{$xfile} = $asmfile unless $xfrom{$xfile};
}

# Call &xref if the .xref file is out-of-date or missing.
sub maybeXref {
    local($asmfile, $xfile) = @_;

    local(@stAsm, @stX);
    # Stat .xref file if it exists
    if ( -e $xfile ) {
	@stAsm = &Stat($asmfile);
	@stX = &Stat($xfile);
    }

    # Need to create .xref if it's too old (relative to .asm) or
    # if it doesn't exist at all.
    if (! -e $xfile || $stX[$ST_MTIME] < $stAsm[$ST_MTIME]) {
	print "$asmfile\n" if $opt_l;
	&xref($asmfile, $xfile);
    }
    undef @stAsm;
    undef @stX;
}

# Generate the actual .xref file.
sub xref {
    local($asmfile, $xfile) = @_;
    open(ASM, "<$asmfile") || die "Can't open '$asmfile'!\n";
    open(XREF, ">$xfile") || die "Can't open '$xfile'!\n";

    local($inComment) = 0;
    local($inFunction) = 0;
    while (<ASM>) {
	if ($inComment) {
	    # We're inside of a comment, so ignore everything, including
	    # 'COMMENT' token.
	    $/ = "\n";
	    $inComment = 0;
	} elsif (/(COMMENT)\s*(.)/) {
	    # We've hit a 'COMMENT' token.	Take note of the delimiter
	    # (usually '@'), and change the record separator so Perl will
	    # skip over everything until the next delimiter.
	    $/ = $2;
	    $inComment = 1;
	} elsif (/^\s*([a-zA-Z]\w*)\s+(method|proc)\b.*/) {
	    # We've hit the top of a definition, let's take note of it.
	    $inFunction = $1;
	    print XREF "BEGIN ", $inFunction, "\n";
	} elsif ($inFunction && /^\s*$inFunction\s+(endp|endm)\b/) {
	    # End of the function definition.
	    print XREF "END ", $inFunction, "\n";
	    $inFunction = 0;
	} elsif ($inFunction 
		 && /^\s*(call|GOTO|FALL_THRU|CallMod)\s+([a-zA-Z]\w*)\s+.*/) {
	    # Take note that this function calls another.  $1 <- call type,
	    # $2 <- function name.
	    print XREF $2, "\n";
	}
    }

    close(ASM);
    close(XREF);
}
    
# Remove "/staff/pcgeos/$USER/" prefix.
sub localSuffix {
    local($file) = @_;
    $file =~ s,^/.*/pcgeos/[^/]+/,,; 
    return $file;
}

# Remove "/staff/pcgeos/" prefix.
sub otherSuffix {
    local($file) = @_;
    $file =~ s,^/.*/pcgeos/,,;
    return $file;
}

# Return "/staff/pcgeos/$USER" prefix.
sub localPrefix {
    local($file) = @_;
    $file =~ s,/pcgeos/([^/]+)/.*,/pcgeos/\1,;
    return $file;
}

sub usagedie {
    &usage;
    exit -1;
}
