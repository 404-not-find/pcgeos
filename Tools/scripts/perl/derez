#!/usr/local/bin/perl5
######################################################
# Utility to find and display information about the resources in a resource
# fork of a macintosh file.
#
# Information on the format of the resource fort can be found in the
# Inside Macintosh books, which are online at apple:
#
# http://devworld.apple.com/dev/techsupport/insidemac/MoreToolbox/MoreToolbox-99.html
#
#
# This program is intended to work with macbinary files, although it can also
# be passed just the resource fork with the -r switch.  A macbinary file has
# three parts, the 128 byte header, the data fork and then the resource fork.
# The forks are null padded out to the next 128 byte block.
#
# If you want to pass binhex 4.0 files then use -4 which will call the
# hacked version of xbin to convert the source into binary to be parsed.
# This will be slower than using a macbinary file because the data has
# to be converted before it can be parsed.
#
#
# Stephen Kertes Oct 15 1997
#
# $Id: derez,v 1.4 97/10/18 04:56:32 kertes Exp $
#
# "undocumented" switches:
#
# -h         prints help
# -d         prints debug info
# -b         prints the resources in binary rather than hex
#
######################################################

require "newgetopt.pl";                                                  
&NGetOpt("h","d","f=s","r","4","font","b","getall","type=s","fond=s","o=s");

$binhex4Command  = "/usr/public/xbin";
$defaultFontType = "NFNT";

######################################################

if ($opt_h) {
    print <<EOM;
Usage:  derez [-f filename] [-r] [-4] 
        derez [-f filename] [-r] [-4] TYPE [TYPE] ...
        derez [-f filename] [-r] [-4] TYPE:id [output filename]

 -f:         Resorce data is read from stdin unless -f is used.
 
 -4:         The input is assumed to be a macbinary file, -4 expects
             a binhex 4.0 file.

 -r:         If the passed input is just the resource data, and does
             not have the info header of a macbinary file, then use
             the -r switch to put derez into raw mode.

 -fond ID:   Lists font resources in a font family. When used with
             -getall the fonts in the family will be extracted.

 -font:      Adds some default font related TYPEs: "NFNT", "FOND".

 -type TYPE: Sets the type of resources fetched by -getall.

 -getall:    Saves all of the resources of a type to files.
             -type sets the type of resources to save
	     -fond is used to fetch all fonts in a family
             -font sets the type to "NFNT"

 -o filename Sets the basename for files extracted by -getall

 If no type or id is passed then print the info for all types and ids.
 If only a type is passed then print the info for all ids found.
 If passed a type:id then print the data for that resource in hex.

 IDs can either be the actual resource id number or in a relative form.
 For example CODE:#2 will print out the second CODE resource found.
EOM
    exit;
}

######################################################

$resOffset = 0;
$do_debug  = $opt_d ? 1 : 0;

@argv = @ARGV;  # save arguments
@ARGV = $opt_f ? ($opt_f) : ();

($findType, $findID) = split(":", shift @argv);

if ($opt_font && ($findID eq "")) {
    # add some font related TYPEs
    unshift (@argv, "FOND", "$defaultFontType", $findType);
    ($findType, $findID) = split(":", shift @argv);
}

undef $/;

######################################################
#
# read in the flie and find
# all the resource types
#

read_file();
parse_macbinary_header() unless $opt_r;
load_resources();
split_resources();

######################################################
#
# process_fond does not return if $opt_getall is not set
#
if ($opt_fond) {
    @argv = process_fond($opt_fond, $opt_o);
    $opt_getall = 0;

    ($findType, $findID) = split(":", shift @argv);
}

######################################################
#
# process_getall will not return if no resources are found
#
if ($opt_getall) {
    $opt_type = $defaultFontType if (($opt_type eq "") && ($opt_font));
    @argv = process_getall($opt_type, $opt_o);

    ($findType, $findID) = split(":", shift @argv);
}

######################################################
#
# if no type is requested
#     print all types and ids
# elsif no id is requested
#     print all ids for each type
# else
#    extract each type:id
#

if ($findType eq "") {
    #
    # print all types and ids
    #
    print_types_and_ids();
} elsif ($findID eq "") {
    #
    # print all ids for each type in the arg list
    #
    while ($findType ne "") {
	die "Type \"$findType\" is not 4 characters.\n"
	    unless length($findType) == 4;

	print_ids_for_type($findType);
	print "\n";

	$findType = shift @argv;
    }

} else {
    #
    # extract each type:id into files (if a filename exists)
    #
    while (($findType ne "") && ($findID ne "")){
	die "Type \"$findType\" is not 4 characters.\n"
	    unless length($findType) == 4;

	if ($argv[0] ne "") {
	    #
	    # a filename exists, so print to it
	    #
	    $outputName = shift @argv;
	    open (RESFILE, ">$outputName")
                || die "Unable to open \"$outputName\" for output.\n";
            select (RESFILE);

	    print_resource_for_type_and_id($findType, $findID);

            select (STDOUT);
            close (RESFILE)
	} else {
	    #
	    # no filename so dump to stdout
	    #
	    print_resource_for_type_and_id($findType, $findID);
	}

	($findType, $findID) = split(":", shift @argv);
    }
}


####################################################################
####################################################################
####################################################################
####################################################################

sub read_file {

######################################################
#######  Read file, convert from
#######  binhex if needed.

    if ($opt_4) {
	$opt_f = "-" if $opt_f eq "";
	open (BINHEX, "$binhex4Command -x \"$opt_f\" |")
	    || die "Unable to open pipe to $binhex4Command -x $opt_f.\n";
	$theFile = <BINHEX>;
	close(BINHEX);
	$opt_r = 1;
    } else {
	$theFile = <>;
    }
}

sub load_resources {

######################################################
#######  Read in resource header

    print STDERR "\nThe file is " . (length($theFile)) . " bytes.\n"
	if $do_debug;

    $resHeader = substr($theFile, $resOffset, 16);

    ($resDataOffset, $resMapOffset, $resDataLen, $resMapLen) = 
	unpack("NNNN", $resHeader);

    $resMap  = substr($theFile, ($resOffset + $resMapOffset), $resMapLen);
    $resData = substr($theFile, ($resOffset + $resDataOffset), $resDataLen);

    ($typeListOffset, $nameListOffset, $numTypes) =
	unpack("nnn",substr($resMap,24));
    
    $numTypes++;

    print STDERR "data offset = $resDataOffset  map offset = $resMapOffset\n" .
	"data length = $resDataLen  map length = $resMapLen\n" if $do_debug;

    print STDERR "data len + map len + res offset + 16 = " . 
	($resDataLen+$resMapLen+$resOffset+16) . " bytes.\n" if $do_debug;

    print STDERR "\ntype list offset = $typeListOffset\n" . 
	"name list offset = $nameListOffset\n" .
	    "numTypes = $numTypes\n" if $do_debug;
}

######################################################
#######  print name strings

sub print_name_strings {
if (0) {

    $curOffset     = ($nameListOffset);
    $endOfMapBlock = ($resMapLen);

    print STDERR "\ncuroffset = $curOffset\tendofmap = $endOfMapBlock\n"
	if $do_debug;

    $count = 1;
    while ($curOffset < $endOfMapBlock) {
	($nameLen) = unpack("C", substr($resMap, $curOffset, 1));
	$aName = substr($resMap, ($curOffset + 1), $nameLen);
	$curOffset += ($nameLen + 1);
	
	print "string $count:\t$nameLen\t\"$aName\"\n" if $do_debug;
	$count++;
    }
}
}
######################################################
#######  gather XXXX type names, offsets and id counts

sub split_resources {
    local ($curOffset, $endOfMapBlock, $count);
    local ($resType, $resCount, $refListOffset);
    
    $curOffset     = ($typeListOffset + 2);
    $endOfMapBlock = ($resMapLen);
    
    print STDERR "\ncuroffset = $curOffset\tendofmap = $endOfMapBlock\n"
	if $do_debug;
    
    $count = 1;
    for ($count=1; $count <= $numTypes; $curOffset+=8, $count++) {
	($resType, $resCount, $refListOffset) =
	    unpack("a4nn", substr($resMap, $curOffset, 8));
	
	$resOffsets{$resType} = $refListOffset;
	$resCounts{$resType}  = $resCount+1;
	
	#print "restype $count:\t\"$resType\"\t$resCount\t$refListOffset\n";
    }
}

######################################################
#######  for each TYPE find IDs

sub print_types_and_ids {
    local($aResType);

    foreach $aResType (sort {(uc $main::a)cmp(uc $main::b)} keys(%resOffsets)){
	print_ids_for_type($aResType);
	print "\n";
    }
}

######################################################
sub print_ids_for_type {
    local ($findType, $findID) = @_;
    local ($subCount, $maxSubCount, $curOffset, $aResName, $resNameOffset);
    local ($aResDataOffset, $resDataBinOffset, $aResDataLen, $findIDByCount);
    local ($bit);
#
# print the ids for this resource type
#
# if passed an id to find then do not print anything, just return
# the offset information we found.
#
    $findIDByCount = 0;
    $maxSubCount = $resCounts{$findType};
    $curOffset = $resOffsets{$findType} + $typeListOffset;
    
    if ($maxSubCount eq "") {
	if ($findID eq "") {
	    print STDERR "No resources of type \"$findType\".\n";
	}
	return ("","","","");
    }

    #
    # this lets us pass #x rather than the real resource id number
    #
    if ($findID =~ /#/) {
	$findIDByCount = substr($findID, 1);
    }

    print "\"$findType\"\t" . 
	"count = $maxSubCount\toffset = $curOffset\n" if $findID eq "";
    
    for ($subCount=1; $subCount<=$maxSubCount; $curOffset+=12,$subCount++) {

	($resID,$resNameOffset,$resAttr,$resDataBinOffset,$resReserve) =
	    unpack("nnCB24N", substr($resMap, $curOffset, 12));

	#
	# so how are you supposed to get a neg resource id
	# and stay platform independent?
	#
	$resID = unpack("s", pack("S", $resID));
	
	$aResDataOffset = unpack("N", pack("xB24", $resDataBinOffset));
	$aResDataLen = unpack ("N", substr($resData, $aResDataOffset, 4));
	$aResName = find_resource_name($resNameOffset);

	if ($findID eq "") {

	    print "    ID = $resID\tsize = $aResDataLen\t" .
		"offset = $aResDataOffset\t$aResName\n";

	} elsif (($findIDByCount ==0) && ($findID == $resID)) {
	    print STDERR "match found for findID\n" if $do_debug;
	    return ($aResDataOffset, $aResDataLen, $aResName, $resID);
	} elsif ($findIDByCount == $subCount) {
	    print STDERR "match found for findIDByCount\n" if $do_debug;
	    return ($aResDataOffset, $aResDataLen, $aResName, $resID);
	}

    }
    return("", "", "", "");
}

######################################################
sub print_resource_for_type_and_id {
    local ($findType, $findID) = @_;
    local ($theResData, $theDataOffset, $theResDataLen, $theResName,$theResID);

    ($theDataOffset, $theResDataLen, $theResName, $theResID) 
	= print_ids_for_type($findType, $findID);

    if ($theResID ne "") {
	$theResData = substr($resData,($theDataOffset+4), $theResDataLen);
	$theResData =~ s/(.|\n)/uc(sprintf("%02x",ord($1)))/eg unless $opt_b;
	$theResData =~ s/(.{60})/$1\n/g unless $opt_b;
	print "$theResData\n";
    } else {
	print STDERR "Unable to find $findType:$findID.\n";
    }
}

######################################################
sub find_resource_name {
    local ($nameOffset) = @_;
    local ($nameLen, $aName);

    #return "(unnamed)" if ($nameOffset == 0xffff);
    return "" if ($nameOffset == 0xffff);

    $nameLen = unpack("C",substr($resMap,($nameListOffset+$nameOffset),1));
    $aName   = substr($resMap, ($nameListOffset+$nameOffset+1), $nameLen);

    return $aName;
}

######################################################

sub parse_macbinary_header {
    # returns (filename, type, creator, offset to resource data)
    # gets this info from the 128 byte header of the macbinary file

    local($theHeader, $fileName, $fileType, $fileCreator, $paddedDataLength);
    local($dataForkLength, $resForkLength);

    $theHeader = substr($theFile, 0, 128);

    ($nameLen, $fileName, $fileType, $fileCreator) = 
	unpack("Ca63a4a4", substr($theHeader, 1, 72));

    ($dataForkLength, $resForkLength) =
	unpack("NN", substr($theHeader, 83, 8));

    $fileName = substr($fileName, 0, $nameLen);

    print STDERR "\"$fileName\" \"$fileType\" \"$fileCreator\" " .
	"$dataForkLength $resForkLength\n" if $do_debug;

    die "This file does not have a resource fork.\n" unless $resForkLength;

    # the data fork is padded to the next 128 bytes
    $paddedDataLength = 128 * int (($dataForkLength + 127)/128);

    $resOffset = 128 + $paddedDataLength;

    return ($fileName, $fileType, $fileCreator, $resOffset);
}
######################################################
sub parse_fond_resource {
    local ($findFondID) = @_;
    # returns (fondID, font family name, fontType:fontResNum1:fontSize1, ...)

    local ($fondDataOffset, $fondDatalen, $fondName, $fondID, $fondData);
    local (@theFonts, $numFonts, $fontSize, $fontStyle, $fontID, $i, $offset);
    local ($fontType);

    ($fondDataOffset, $fondDataLen, $fondName, $fondID) 
	= print_ids_for_type("FOND", $findFondID);
    
    if ($fondID eq "") {
	return ();
    } else {
	$fondData = substr($resData, ($fondDataOffset+4), $fondDataLen);

	($numFonts) = unpack ("n", substr($fondData, 52, 2));
	$numFonts++;

	print STDERR "Found $numFonts fonts for FOND:$fondID.\n" if $do_debug;

	for ($offset=54,$i=0; $i<$numFonts; $offset+=6,$i++) {

	    ($fontSize, $fontStyle, $fontID) =
		unpack("nnn", substr($fondData, $offset, 6));

	    print STDERR "Font size $fontSize, font style $fontStyle, " .
		"fontID $fontID\n" if $do_debug;

	    $fontType = $fontSize ? "NFNT" : "sfnt";

	    push(@theFonts, "$fontType:$fontID:$fontSize:$fontStyle");
	}

	$fondName = "unknown" if $fondName eq "";
	return ($fondID, $fondName, @theFonts);
    }

}
######################################################
sub process_fond {
    local ($findFondID, $baseFileName) = @_;

    #
    # fetch info on fonts that are a part of the requested FOND family
    # THIS DOES NOT RETURN unless $opt_getall is set
    #

    ($fondID, $fondName, @theFonts) = parse_fond_resource($findFondID);

    die "Unable to find FOND:$findFondID\n" if $fondID eq "";

    print "FOND resource $fondID found, name = \"$fondName\".\n\n";

    @fetchCommands = ();
    $baseFileName = $fondName if $baseFileName eq "";

    foreach $font (@theFonts) {
	($fontType, $fontID, $fontSize, $fontStyle) = split(":", $font);
	
	$fontFileName = $baseFileName . "_" .
	    ($fontSize ? $fontSize : $fontID) . ".mac";
	
	$fontFileName =~ s/[\s,]/_/g;
	
	print "$fontType:$fontID " .
	    ($opt_getall ? "will be" : "would be") .
		" saved as \"$fontFileName\".\n";
	
	push (@fetchCommands, "$fontType:$fontID", $fontFileName);
    }

    exit unless $opt_getall;

    return @fetchCommands;
}

######################################################
sub process_getall {
    local ($getType, $baseFileName) = @_;
    local ($getResCount, $fileOutName, @fetchCommands);
    local ($getDataOffset, $getDataLen, $getResName, $getResID);

    die "No resource type has been set, use -type or -font.\n"
	if $getType eq "";

    die "Type \"$getType\" is not 4 characters.\n"
	unless length($getType) == 4;

    $getResCount = $resCounts{"$getType"};

    die "No $getType resources found (sorry).\n"
	if ($getResCount == 0);

    $baseFileName = $getType if $baseFileName eq "";
    $baseFileName =~ s/[\s,]/_/g;

    for (@fetchCommands = (), $i = 1; $i <= $getResCount; $i++) {
	($getDataOffset, $getDataLen, $getResName, $getResID) 
	    = print_ids_for_type("$getType", "#$i");

	$fileOutName = $baseFileName . "_" . $getResID;

	print "$getType:$getResID ($getDataLen bytes) " .
	    "will be saved as \"$fileOutName\".\n";

	push (@fetchCommands, "$getType:#$i", $fileOutName);
    }

    return @fetchCommands;
}

######################################################

######################################################

######################################################

__END__
