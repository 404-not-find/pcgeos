#!/usr/bin/perl
# -*- perl -*-
############################################################################
#
#	Copyright (C) GeoWorks 1991, 1992 -- All Rights Reserved
#
#	PROJECT:	PC/GEOS
#	FILE:		cmpInstalledTree
#
#	AUTHOR:		Chris Thomas 9/95
#
#	REVISION HISTORY:
#		Name	Date		Description
#		----	----		-----------
#		Chris	9/95		Initial revision
#
#	$Id: cmpInstalledTree,v 1.2 95/09/27 10:31:00 cthomas Exp $
#
#
# DESCRIPTION:
#
#	This script recursively compares the serial numbers
#	of all .geo files in one installed tree with the
#	serial numbers of the same .geo file in a second installed
#	tree.
#
#	This was originally written to verify that a tree of
#	localized geodes contain the same geode files as the
#	non-localized tree.
#
#	If there are geodes that shouldn't be compared,
#	or that have different relative paths in the two trees,
#	they may be listed on the command line. See USAGE
#
#	Prints all the geodes that fail to compare, and
#	returns non-zero exit status on failure.
#
# USAGE:
#	cmpInstalledTree <path1> <path2> <exception>*
#
#	where <exception> can be:
#
#		<relpath1>=<relpath2> : <path1>/<relpath1> should be compared
#					to <path2>/<relpath2>
#
#		<relpath>	      : <path1>/<relpath> should not be
#					compared to anything.
#
# EXAMPLES
#
#	cmpInstalledTree /staff/pcgeos/JediFrench/Installed \
#			 /staff/pcgeos/ReleaseJedi/Installed
#
#	  Compares all the geodes in JediFrench to ReleaseJedi
#
#	cmpInstalledTree /staff/pcgeos/JediFrench/Installed \
#		 /staff/pcgeos/ReleaseJedi/Installed \
#		Driver/Keyboard/Jedi/jkbd.geo=Driver/Keyboard/Jedi/French/jkbd_fr.geo \
#		Appl/Jedi/JDemo/jdemo.geo
#
#	  Same as first example, except:
#	    - /s/p/JediFrench/Driver/Keyboard/Jedi/jkbd.geo is
#		compared against
#	      /s/p/JediInstalled/Driver/Keyboard/Jedi/French/jkbd_fr.geo
#
#	    - /s/p/JediFrench/Appl/Jedi/JDemo/jdemo.geo is left
#		out of the comparison process.
#	
# BUGS/IDEAS:
#
#   The script might be made more efficient by using the perl 'find'
#   package to enumerate over the source files, doing the comparisons,
#   rather than use `find` to gather the geodes in a one pass,
#   and do the comparisons in another pass.
#

#######################################################################
#
# %forceComparisons  : Keyed by relative path in path1.
#                      Table of relative path in path2 to compare to
#
# %ignoreGeodes      : Keyed by relative path in path1.
#                    : If entry is True, don't do comparison of geode.
#

$path1 = shift || &usage("Template path not specified");
$path2 = shift || &usage("Source path not specified");

$SERIAL_OFFSET = 298;

#
# Build a table of geodes to ignore or override default comparison
#

while ($_ = shift) {
    /(\S+)=(\S+)/ && ($forceComparisons{$1}=$2, next);
    $ignoreGeodes{$_}=1;
}

#
# Find all the geodes in Path1, and list their relative paths
#

print "Finding all .geo files in $path1...\n";
@sourceGeodes = split(/ /,`find $path1 -name '*.geo' -printf '%P '`);

#
# For every geode in Path1, compare to corresponding geode
# in Path2
#

# print "Comparing $path1 to $path2...\n";
foreach $file (@sourceGeodes) {
    print "\nComparing $file";
    &doComparison($file);
}
print "\n\n";
#
# Dump errors, and return exit status
#

if ($errors) {
    print STDERR "**** ERRORS COMPARING TREES:\n";
    print STDERR $errors;
    exit 1;
}

exit 0;

######################################################################
#
#  SUBROUTINES
#
######################################################################

#
# Given a relative path in $path1, compare to corresponding geode
#

sub doComparison {
    local ($file) = @_;
    local ($srcFile, $destFile) = ("$path1/$file");

    #
    # Choose proper geode to compare to
    #
    {
	#
	# Use comparison ovverride, if it exists
	#
	$forceComparisons{$file} && ($destFile = "$path2/$forceComparisons{$file}", last);
	
	#
	# Else maybe ignore
	#
	return 0 if $ignoreGeodes{$file};

	#
	# Default: same path, different tree
	#
	$destFile = "$path2/$file";
    }

    if ( ! -e $destFile ) {
	print " ERROR: $destFile does not exist";
	$errors .= "**\t$destFile does not exist\n";
	return 1;
    }
    if ( ! -r $destFile ) {
	print " ERROR: $destFile: permission denied";
	$errors .= "**\tcan't read serial number of $destFile: permission denied\n";
	return 1;
    }
    if ( ! -e $srcFile ) {
	print " ERROR: $srcFile does not exist";
	$errors .= "**\t$srcFile does not exist\n";
	return 1;
    }
    if ( ! -r $srcFile ) {
	print " ERROR: $srcFile: permission denied";
	$errors .= "**\tcan't read serial number of $srcFile: permission denied\n";
	return 1;
    }
    if (&getSerial($srcFile) != &getSerial($destFile)) {
	print " ERROR: Serial number of $srcFile doesn't match $destFile";
	$errors .= "**\tSerial number of $srcFile doesn't match $destFile\n";
	return 1;
    }
    return 0;

}

sub usage {
    if ($_[0]) {
	print STDERR "Error: $_[0]\n";
    }
    print STDERR <<EOM;
Usage:	cmpInstalledTree <path1> <path2> <exception>*
EOM
    if ($_[0]) {
	exit 1;
    }
}

sub getSerial {
    local ($file) = @_;
    local ($buf, $ser);

    open(INPUT, "<$file") || die;
    binmode INPUT;
    seek(INPUT, $SERIAL_OFFSET, 0)  || die;
    die if sysread(INPUT, $buf, 2) != 2;
    close(INPUT);
    $ser = unpack("v", $buf);
    return $ser;
}
