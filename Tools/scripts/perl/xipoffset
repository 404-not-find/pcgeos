#!/usr/local/bin/perl
##############################################################################
#
# 	Copyright (c) Geoworks 1996 -- All Rights Reserved
#
# PROJECT:
# MODULE:	
# FILE: 	xipoffset
# AUTHOR: 	Steve Kertes, Sep 12 1996
#
# DESCRIPTION:
#
#       Run fullxip, then output the absolute offsets of all routines in the 
#       XIP image.
#
# USAGE:
#
#	xipoffset <fullxip arguments>
#
#
# 	$Id: xipoffset,v 1.5 96/09/17 17:14:16 andrew Exp $
#
#
##############################################################################

#$| = 1;         # unbuffered output

$opt_d = 0;	# set to 1 to print tons of debugging

&displayHelp if $#ARGV < 0;

$useRealOffsets = 0;
if ($ARGV[0] eq "-R") {
    # if true, then use the real "heap" offsets instead of the ROM image
    # offsets for fixed resources. Also, differentiates between the real
    # offsets and xip image offsets by adding 1M to all the xip image offsets
    $useRealOffsets = 1;
    shift;
}

# First, make the image and collect the geode names, and resources
#
# %geodes is a list of all the geodes in the image, in the following format:
#   <geode permanent name> maps to <full path to .geo file>
#
#Geode: stream   /staff/pcgeos/Responder/Installed/Driver/Stream/streamec.geo
#
# @resources is list of resources used by all the geodes
#   <geode permanent name>,<resource number>,<resource offset>,<magic 0 or 1>
#
#FixedResource: respondr 2 0x29f2c0 0x95900
#Resource: text     35 0x2b2ff0
#

&openFULLXIP;

while (<FULLXIP>) {

	#Geode: stream   /staff/pcgeos/Responder/.../Stream/streamec.geo
	if ( /^Geode:\s+(\S+)\s+(\S+)$/ ) {
		$geodes{$1} = $2;
		$numgeodes++;
	}

	# FixedResource: respondr 2 0x29f2c0 0x95900
	if ( /^FixedResource:\s+(\S+)\s+(\d+)\s+0x(\S+)\s+0x(\S+)/ ) {
	    #print "fixed: $1 $2 $3 $4\n";
	    if ($useRealOffsets) {
		$offset = hex($4);
		push (@resources, "$1,$2,$offset"); # geode, number, offset
	    } else {
		$offset = hex($3);
		push (@resources, "$1,$2,$offset"); # geode, number, offset
	    }
	}

	#Resource: text     35 0x2b2ff0
	if (/^Resource:\s+(\S+)\s+(\d+)\s+0x(\S+)/ ) {
	    #print "boken: $1 $2 $3\n";
	    if ($useRealOffsets) {
		$offset = hex($3) + hex("100000");
		push (@resources, "$1,$2,$offset"); # geode, number, offset
	    } else {
		$offset = hex($3);
		push (@resources, "$1,$2,$offset"); # geode, number, offset
	    }
	}

}
close (FULLXIP);

############################################################
#
# Ok, now we have a list of all the geodes in the image and
# the offsets to all of the resources.
#
# For each geode we dump all the symbols and find the offsets
# of each routine within the resources, then we can know the
# absolute offset of each routine in the image
#

open (OFFSETS, ">xipimage.offsets")
	|| die "Unable to open xipimage.offsets for output, sorry.\n";

$startTime = `date +'%D, %T, %a`;

print OFFSETS "Offsets of procedures in XIP image.\n";
print OFFSETS "Started on $startTime";

print "\nOffsets of procedures in XIP image.\n";
print "Started on $startTime";

############################################################
#
# sort the FULLXIP output so the resources for each geode are
# grouped together and in the same order as %geodes will be
#
# we can sort lexically to get what we want (yes, this makes
# text,2,ffffff go right after text,10,ffffff but that is not
# a problem as long as all the text resources are together.)
#
# geode-name,resource-number,offset
#
#
@resources = sort @resources;

############################################################
#
# for each geode we are going to call printobj and combine
# the procedure offsets we get from that with the resource
# offsets we got from fullxip.
#
$resNum = 0;	# index into @resources

$currentGeodeNum = 0;
foreach $geode (sort (keys %geodes)) {

	$currentGeodeNum++;

	############################################################
	#
	# find all the resources for this geode
	#
	undef %curResources;

	if (1) {

	#
	# this version should always work if @resources is sorted.
	# If it does not work correctly then the slower code in the
	# else clause should be used.
	#
	# Also, if you are setting $geode to be something so you only
	# print the offsets for that geode you will need to use the
	# second routine since some other geode's resources will 
	# probably be at the beginning of @resources.
	#

	    $oldResNum = $resNum;
					#   geode-name,resource-number,offset
	    while ( $resources[$resNum] =~ /^($geode),([^,]+),([^,]+)/ ) {
		#print "===  $resources[$resNum] ===\n";
		$curResources{$2} = "$3";
		print "----- A resource for $geode: $2 at " .
			"\"$curResources{$2}\" ----\n"
			if $opt_d;
		$resNum++;
	    }

	    print "\nWARNING: No resources found for $geode\n\n"
						if ($resNum == $oldResNum);

	} else {

	# 
	# this version will always work, but it is slower since it
	# goes through the entire list of resources searching for
	# ones that belong to the current geode.
	# 
	    foreach $resourceLine (@resources) {
		#                 geode-name,resource-number,offset
		if ( $resourceLine =~ /^($geode),([^,]+),([^,]+)/ ) {
			#print "=== $resourceLine ===\n";
			$curResources{$2} = "$3";
			print "----- A resource for $geode: $2 at " .
				"\"$curResources{$2}\" ----\n"
				if $opt_d;
		}
	    }
	}

	############################################################

	if (0) {
		print "|||| Printing curResources ||||\n";
		foreach $r (sort {$a <=> $b} (keys %curResources)) {
			print "||     \"$r\"  \"$curResources{$r}\"     ||\n";
		}
		print "\n";
	}

	############################################################

	print "\nProcessing resources in $geode " .
		"($currentGeodeNum of $numgeodes):\n";

	# make sure that .sym file exists
	$symfile = $geodes{$geode};
	$symfile =~ s/\.geo/\.sym/;
	die "Error: $symfile does not exist.\n" if ( ! (-e $symfile ));

	############################################################
	#
	# Get just what we need from the symbol file.
	# The file format is:
	# Segment <some other segment-specific data>
	#       <procedure name> <random data> procedure at <random data>
	#       <procedure name> <random data> procedure at <random data>
	#       etc
	# Segment <some new segment>
	#
	# As we find segments we look them up in the curResources to find
	# their offsets, then we processes the procedures in that segment.
	#
	open (PRINTOBJ, "printobj $symfile |")
				|| die "could not run printobj on $symfile\n";

	undef @syminfo;
	undef %resourceInfo;
	$resNumber = 0;
	$processThisResource = 0;

	while (<PRINTOBJ>) {
		chop;
		next unless ( /(^Segment)|(procedure at)/ );
		$symline = $_;

		#print "www $symline\n";

		# Segment 3: name FixedStrings, class (null), type lmem, ...
		if ($symline =~ /^Segment [0-9]+: name ([^,]+),.*/) {

			$processThisResource = 0;

			$resName = $1;
			next if ($symline =~ /(type library)|(type absolute)/);

			$resOffset = $curResources{$resNumber};

			die "ERROR: $resName in $geode has resource number".
			    " $resNumber.\nThat number is not in curResources".
			    "\n\n" unless defined $resOffset;

			# Tell our good buddy what we're doing.
			print "   Resource $resNumber: $resName " .
			   "(at offset " . sprintf("%07x", $resOffset) . ")\n";

			$resNumber++;
			$processThisResource = 1;

		} elsif ($processThisResource) {

			#     AddErrorInfo   : global near procedure at 00be
			$symline =~ /\s*([^\s:]+)[:\s]+.*\s+([0-9a-fA-F]+)$/;

			$procName = $1;
			$pOffset = sprintf("%07x", hex($2) + $resOffset);
			push (@procs, "$pOffset,$geode::$procName");
			print "+++++ $geode::$procName at $pOffset " .
				"($resOffset + $2) ++++\n" if $opt_d;
		}

	} # end while (<PRINTOBJ>)

	close (PRINTOBJ);

} # end foreach $geode

############################################################
#
# sort the procs so they are in the order that they are in
# the image then print them out
#

print "\nFinished finding offsets, sorting...\n";

$stopTime = `date +'%D, %T, %a`;

print OFFSETS "Finished on $stopTime\n";

foreach $proc (sort @procs) {
	($offset, $name) = split(",", $proc);
	print OFFSETS "$offset $name\n";
}

close (OFFSETS);

print "Done.\n";

############################################
############################################

############################################
#
# displayHelp
#	print usage information, then exit
#
sub displayHelp {
	print <<EOM;

Usage: xipoffset <fullxip arguments>

       This script runs fullxip with the arguments it is passed.
       It then generates the file xipimage.offsets, which contains
       a list of all procedures in the image, and their absolute
       offsets into the image.

EOM
	exit 1;
}

############################################
#
# openFULLXIP
#	open FULLXIP either as a pipe to the fullxip command
#	or to a debugging file
#
sub openFULLXIP {
if (1) {

    open (FULLXIP, "fullxip -dO @ARGV |") || die "unable to run fullxip\n";

} else {
    #
    # this is all for debugging, so you do not have to run fullxip every time
    #

    if (1) {
	print "Using /tmp/full.out\n\n";
	open (FULLXIP, "</tmp/full.out") || 
			die "unable to open /tmp/full.out for input\n";
    } else {
	print "Creating /tmp/full.out\n\n";
	open (FULLXIP, "fullxip -dO @ARGV |") ||
			die "unable to run fullxip";

	open (FULLOUT, ">/tmp/full.out") || 
			die "unable to open /tmp/full.out for output\n";

	while (<FULLXIP>) { 
		print FULLOUT;
		#print "." unless ($a = ($a + 1) % 100);
	}
	close FULLOUT;
	close FULLXIP;
	print "\nDone.\n";
	exit 0;
    }
}
}

############################################

__END__
