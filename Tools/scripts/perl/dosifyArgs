#!/usr/public/perl
##############################################################################
#
# 	Copyright (c) GeoWorks 1992 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Shell scripts
# FILE: 	dosifyArgs
# AUTHOR: 	Chris Hawley-Ruppel
#
# DESCRIPTION:
#	Dosifies a list of arguments (presumably paths).    Currently does
#	NOT deal with overlaps, only truncates!    We cover the one case
#	that's a problem in Responder, someone will have to do something
#	far more clever to make things work elsewhere.
#
# 	Also, all non-period parts of the file and filename are truncated,
#	parts with periods changed to 8.3.   This does not match dosify,
# 	mainly because I'm too lazy to deal with the dirparts and filename
#	separately (dirparts > 8 chars are truncated to 8 in dosify, filenames
#	>8 chars are truncated to 8.3, if if no period exists in the string.)
#
# USAGE:
# 	dosifyArgs [arg1] [arg2]... [argn]
#
# 	$Id: dosifyArgs,v 1.5 96/01/30 12:28:04 andrew Exp $
#
##############################################################################

while ($Dir = shift) {

	$_ = $Dir;
	($Parent, $Child) = /(.*)\/(.*)/;
	if ($Parent eq "") {
		$Child = $Dir;
	}
        #
        #  Downcase Parent and Child into parent and child
        #
        ($child = $Child) =~ tr/A-Z/a-z/;

        @parentparts = split('/', $Parent);

        #
        #  Shorten each piece to 8 characters
        #
        foreach $dir (@parentparts) {
		if ($dir ne "-D") {
	            $dir =~ tr/A-Z/a-z/;
                    $dir = substr($dir, 0, 8);
		}
        }
        $parent = join('/', @parentparts);
	if ($parent ne "") {
		$parent = $parent.'/';
	}

 	#
	#  Assume we'll be dealing with a non-ec file.
	#
	$substChar = "n";

        #
        # If the filename is <something>.<whatever>, then we stuff it
        # into the 8.3 format like <somethin>.<wha> Any intermediate 
        # periods are ignored, so that a.b.c.d will turn into a.d
        #
        if ($child =~ /([^\.]+).*\.([^\.]+)$/) {

	    $namepreflen = length($1);
            $newname = substr($1,0,8).".".substr($2,0,3);

            if ($namepreflen > 8) {
		    #
		    # Get the ending for the original name, we'll need it.
		    #
		    $ending = substr($1,$namepreflen-2,$namepreflen);
		    #
		    # If this is EC, then we need the non-ec name
		    #
		    $nonecName = substr($1,0,$namepreflen-2).".".substr($2,0,3);
		    #
		    # Now force to 8 characters long.
		    #
		    $namepreflen = 8;

		    #
		    # If truncating, and this seems to be an EC geode,
		    # let's slap an 'e' on the end right now to avoid
		    # overlaps with the non-ec version.  (12/19/95 cbh)
		    #
		    if ("$ending" eq "ec") {
                       	substr($newname, $namepreflen - 1, 1) = "e";
		    }
	     } 
         } else {
            #
            # If there are no '.'s in the name, we'll just take the first
            # eleven letters and make that our 8.3
            #
            if (length($child) > 8) {
		$namepreflen = 8;
                $newname = substr($child,0,8).".".substr($child,8,3);
            } else {
		$namepreflen = length($child);
                $newname = $child;
            }
        }		
	print "$parent"."$newname ";
}
print "\n";







