#!/bin/sh -
##############################################################################
#
# 	Copyright (c) GeoWorks 1992 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	checkclass
# FILE: 	checkclass
# AUTHOR: 	Andrew Wilson, Jan 22, 1992
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	atw	1/22/92		Initial Revision
#	brianc	2/19/92		Added vardata checking
#	ardeb	2/20/92		Added instance data checking 
#
# DESCRIPTION:
#	This script ensures consistency between the assembly and C declarations
#	of classes, their messages, vardata and instance variables.
#
#	Usage:	checkclass <fnameRoot>+
#
#		<fnameRoot> is the name of the include file w/o leading path
#		or suffix
#
#	Example: checkclass vTextC genC
#
#		checks vTextC.def against vTextC.goh, and genC.def against
#		genC.goh.
#
#	$Id: checkclass,v 1.27 97/11/19 08:25:52 cthomas Exp $
#
###############################################################################
estat=0
cwd=`pwd`
rootdir=`expr "$cwd" : '\(.*/pcgeos\).*$'`
ddir=$rootdir/`expr "$cwd" : $rootdir'/\([^/]*\)'`
while [ $# -ne 0 ]; do
	#
	# First locate the two files, checking first in the user's
	# Include and Include/Objects (CInclude and CInclude/Objects)
	# directories, then checking the installed versions. Whichever
	# we find first, wins.
	#
	if [ -f $ddir/Include/$1.def ]; then
		defname=$ddir/Include/$1.def
	elif [ -f $ddir/Include/Objects/$1.def ]; then
		defname=$ddir/Include/Objects/$1.def
	elif [ -f /staff/pcgeos/Include/$1.def ]; then
		defname=/staff/pcgeos/Include/$1.def
	elif [ -f /staff/pcgeos/Include/Objects/$1.def ]; then
		defname=/staff/pcgeos/Include/Objects/$1.def
	else
		echo "Cannot find $1.def"
		exit 1
	fi
	if [ -f $ddir/CInclude/$1.goh ]; then
		gohname=$ddir/CInclude/$1.goh
	elif [ -f $ddir/CInclude/Objects/$1.goh ]; then
		gohname=$ddir/CInclude/Objects/$1.goh
	elif [ -f /staff/pcgeos/CInclude/$1.goh ]; then
		gohname=/staff/pcgeos/CInclude/$1.goh
	elif [ -f /staff/pcgeos/CInclude/Objects/$1.goh ]; then
		gohname=/staff/pcgeos/CInclude/Objects/$1.goh
	else
		echo "Cannot find $1.goh"
		exit 1
	fi

	echo Checking $defname against $gohname...
	#
	# Make sure all the files exist, so if one of the files has none
	# of whatever, the diff won't fail.
	#
	touch /tmp/a1$$.meth /tmp/a2$$.meth \
		/tmp/a1$$.var /tmp/a2$$.var \
		/tmp/a1$$.inst /tmp/a2$$.inst
	#
 	# extract all message names from the .def file into /tmp/a1$$.meth,
	# all vardata names from the .def file into /tmp/a1$$.var, and all
	# instance data names from the .def file into /tmp/a1$$.inst.
	#
	# The initial sed restricts the input to only things within a
	# class declaration, and strips out comments and data types and equates
	# so it can more accurately determine what is an instance variable
	# and what is not (basically, after the sed script runs, anything
	# that doesn't have the word "method", "export", or "vardata"
	# on the line must be an instance variable; there are exceptions
	# to this, however, which is why there's the additional condition
	# that the first word on the line must contain an underscore)
	#
	sed -n -e '
	s/^[ 	]*SBCS[ 	]*<\(.*\)>[ 	]*$/\1/
	s/^[ 	]*DBCS[ 	]*<\(.*\)>[ 	]*$/\1/
	/^COMMENT[ 	]*@/,/@/d
	/^[^ 	]*[ 	][ 	]*class[ 	]/,/^[^	]*[ 	][ 	]*endc/{
		/\\$/{
			:join
			N
			s/\\\n//
			/\\$/bjoin
		}
		/protominor.* etype/d
		/protoreset.* etype/d
		s/;.*$//
		s/\([A-Z][A-Za-z]*\)Messages[ 	]*=[ 	]*\1Messages[ 	]*+[ 	]*\([0-9][0-9]*\)/skip \1Messages \2/
		/^[ 	]*$/d
		/[ 	]macro/,/^[ 	]*endm/d
		/[ 	]record/,/[ 	]end/d
		/[ 	]struct*/,/[ 	]end/d
		/[ 	]union/,/[ 	]end/d
		/[ 	]etype/d
		/[ 	]type/d
		/[ 	]noreloc/d
		/[ 	]enum/d
		/[ 	]class/d
		/[	]endc/d
		/:/d
		/=/d
		/^[ 	]*if[ 	](*0)*/,/^[ 	]*endif/d
		/^[ 	]*if[ 	]/d
		/^[ 	]*else[ 	]/d
		/^[ 	]*endif/d
		/CheckHack/d
		/\.assert/d
		/[ 	]equ/d
		/[ 	]export/s/Methods//
		/[ 	]export/s/Messages//
		p
		d
	}
	s/\([A-Z][A-Za-z]*\)Messages[ 	]*=[ 	]*\1Messages[ 	]*+[ 	]*\([0-9][0-9]*\)/skip \1Messages \2/p
	s/;.*$//
	/[ 	]method[ 	]/p
	' $defname | awk '
		$2 == "method" || $2 == "message" {
		    if (NF == 2 || $3 == "private") {
			print $1 > "/tmp/a1'$$'.meth"
		    } else {
			ilen=length($3)
			if ($3 ~ /Messages/) {
			    imprng=substr($3,0,ilen-8)
			} else {
			    imprng=substr($3,0,ilen-7)
			}
			print $1 " from " imprng > "/tmp/a1'$$'.meth"
		    }
		    next
		}
		$1 == "skip" {print "skip "$2" "$3 > "/tmp/a1'$$'.meth"; next }
		$1 == "protominor" {print "protominor "$2 > "/tmp/a1'$$'.meth"; print "protominor "$2 > "/tmp/a1'$$'.var"; next }
		$1 == "protoreset" {print "protoreset" > "/tmp/a1'$$'.meth"; print "protoreset" > "/tmp/a1'$$'.var"; next }
		$2 == "export" {print $1 > "/tmp/a1'$$'.meth"; next }
		$2 == "vardata" {print $1 > "/tmp/a1'$$'.var"; next }
		$1 ~ /_/ {print $1 > "/tmp/a1'$$'.inst"}
	'
	#
	# Perform a similar operation on the .goh file, with the added bit
	# of fun that all characters in the set (, ;, *, [, ], ) and comma
	# are transformed into spaces so as to leave the names of instance
	# variables, vardata and messages unencumbered by C type information.
	#
	# Strip out #define and @define b/c they can create lines too long for
	# awk to handle -- ardeb 9/30/94
	#
	sed -e '
		s,/\*.*\*/,,g
		/@exportMessages/s/\(@exportMessages[ 	].*\)Messages/\1/
		/^[ 	]*#if[ 	](*0)*/,/^[ 	]*#endif/d
		/^[ 	]*@if[ 	](*0)*/,/^[ 	]*@endif/d
		/\\$/{
			:join
			N
			s/\\\n//
			/\\$/bjoin
		/^#[ 	]*define/d
		/^@define/d
		}

	' $gohname | tr '(;*[]),' ' ' | awk '
		BEGIN {
			pendingMessage = 0
			pendingImpMessage = 0
			pendingVardata = 0
			pendingInstance = 0
		}
		/^@message/ {
		    pendingMessage = 0
		    pendingImpMessage = 0
		    pendingVardata = 0
		    pendingInstance = 0
		    if (NF < 3) {
			pendingMessage = 3 - NF
			next
		    } else {
			print $3 > "/tmp/a2'$$'.meth"
		    }
		}
		/^@reserveMessages/ {
		    if (NF == 3) {
			print "skip "$2" "$3 > "/tmp/a2'$$'.meth"
		    } else if (curClass != "") {
			print "skip "curClass"Messages "$2 > "/tmp/a2'$$'.meth"
		    } else {
			print "You are a hoser -- @reserveMessages outside @class"
		    }
		}
		/^@protominor/ {
		    print "protominor "$2 > "/tmp/a2'$$'.meth"
		    print "protominor "$2 > "/tmp/a2'$$'.var"
		}
		/^@PROTOMINOR/ {  # to workaround a workaround in connect.goh
		    print "protominor "$2 > "/tmp/a2'$$'.meth"
		    print "protominor "$2 > "/tmp/a2'$$'.var"
		}
		/^@protoreset/ {
		    print "protoreset" > "/tmp/a2'$$'.meth"
		    print "protoreset" > "/tmp/a2'$$'.var"
		}
		/^@importMessage/ {
		    pendingMessage = 0
		    pendingImpMessage = 0
		    pendingVardata = 0
		    pendingInstance = 0
		    if (NF < 2) {
			print "You are a hoser"
		    }
		    ilen=length($2)
		    if ($2 ~ /Messages/) {
			imprng=substr($2,0,ilen-8)
		    } else {
			imprng=substr($2,0,ilen-7)
		    }
		    if (NF < 4) {
			pendingImpMessage = 4 - NF
			next
		    } else {
			print $4 " from " imprng > "/tmp/a2'$$'.meth"
		    }
		}
		/^@exportMessages/ {
		    pendingMessage = 0
		    pendingImpMessage = 0
		    pendingVardata = 0
		    pendingInstance = 0
		    print $2 > "/tmp/a2'$$'.meth"
	        }
		/@vardata[ 	]/ {
		    pendingMessage = 0
		    pendingImpMessage = 0
		    pendingVardata = 0
		    pendingInstance = 0
		    if (NF < 3) {
			pendingVardata = 3 - NF
			next
		    } else {
			print $3 > "/tmp/a2'$$'.var"
		    }
		}
		/@instance/ {
		    pendingMessage = 0
		    pendingImpMessage = 0
		    pendingVardata = 0
		    pendingInstance = 0
		    if (NF < 3) {
			pendingInstance = 3 - NF
			next
		    } else {
			print $3 > "/tmp/a2'$$'.inst"
		    }
		}
		/@class/ {
		    if (length($2) > 5 && substr($2, length($2)-4) == "Class") {
		    	curClass = substr($2, 0, length($2)-5)
    	    	    } else {
    	    	    	curClass = $2
    	    	    }
    	    	}
    	    	/@endc/ {
		    curClass = ""
    	    	}
		pendingMessage != 0 {
		    if (NF < pendingMessage) {
			pendingMessage -= NF
		    } else {
			print $pendingMessage > "/tmp/a2'$$'.meth"
			pendingMessage = 0
		    }
		    next
		}
		pendingImpMessage != 0 {
		    if (NF < pendingImpMessage) {
			pendingImpMessage -= NF
		    } else {
			print $pendingImpMessage " from " imprng > "/tmp/a2'$$'.meth"
			pendingImpMessage = 0
		    }
		    next
		}
		pendingVardata != 0 {
		    if (NF < pendingVardata) {
			pendingVardata -= NF
		    } else {
			print $pendingVardata > "/tmp/a2'$$'.var"
			pendingVardata = 0
		    }
		    next
		}
		pendingInstance != 0 {
		    if (NF < pendingInstance) {
			pendingInstance -= NF
		    } else {
			print $pendingInstance > "/tmp/a2'$$'.inst"
			pendingInstance = 0
		    }
		    next
		}
	'
	#
	# Now use diff on the 3 pairs of files, being sure only to print
	# something out if there's actually a difference. In addition, we
	# make sure to exit non-zero if there is one.
	#
	if diff /tmp/a1$$.meth /tmp/a2$$.meth > /tmp/diff.$$; then
		: do nothing
	else
		echo ===== $1 Messages =====
		cat /tmp/diff.$$
		estat=1
	fi
	if diff /tmp/a1$$.var /tmp/a2$$.var > /tmp/diff.$$; then
		: do nothing
	else
		echo ===== $1 VarData =====
		cat /tmp/diff.$$
		estat=1
	fi
	if diff /tmp/a1$$.inst /tmp/a2$$.inst > /tmp/diff.$$; then
		: do nothing
	else
		echo ===== $1 Instance Data =====
		cat /tmp/diff.$$
		estat=1
	fi

	#
	# Nuke the various temporary files we used.
	#

        rm /tmp/a1$$.meth /tmp/a2$$.meth \
                /tmp/a1$$.var /tmp/a2$$.var \
                /tmp/a1$$.inst /tmp/a2$$.inst \
                /tmp/diff.$$

	#
	# Advance to the next class
	#
	shift
done
exit $estat
