#!/bin/sh -
##############################################################################
#
# 	Copyright (c) Geoworks 1994 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Tools/scripts -- Geode comparison
# FILE: 	cmpgeo
# AUTHOR: 	Tony Requist, July 24, 1989
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	dlitwin	2/22/96		Added this header
#
# DESCRIPTION:
#	Compare a Geode to see if it differs (other than header information
#	that is unique each time compiled) from an Installed branch or another
#	compiled geode.
#
#	$Id: cmpgeo,v 1.13 96/07/12 15:25:05 weber Exp $
#
###############################################################################

if [ $# -lt 1 ]; then
    echo "Usage: cmpgeo <geode-base-name> [<branch-name>|<path-to-other-geode>]"
    echo
    echo "     : Without a second argument, cmpgeo will look for a BRANCH"
    echo "     :  file, using the trunk if none is found."
    echo "     : Compares against branch <branch-name> if passed."
    echo "     : Compares against a geode in another tree if a path is"
    echo "     :  passed as the second argument.  A path is distinguished"
    echo "     :  from a branch name in that a branch name has no slashes."
    echo "     : If only a path is provided, the basename will default to"
    echo "     :  that of the first argument, and if not present, the first"
    echo "     :  .geo found will be used."
    echo "     : If the path contains a file basename as a last component"
    echo "     :  that basename overrides the first argument as the name"
    echo "     :  of the second geode, should it exist."
    echo
    exit 1
fi

srcGeode=$1
if [ ! -f $srcGeode.geo ]; then
	echo $srcGeode.geo does not exist
	exit 1
fi

# Strip the leading branch/local-tree component from the path,
# then strip any remaining Installed path.

subdir=`pwd | sed -e 's/.*pcgeos\/[^\/]*\/\(.*\)$/\1/' | sed -e 's/^Installed\/\(.*\)/\1/'`
# echo subdir=$subdir

#
# If they passed no second argument, check for a branch file
#
if [ $# -lt 2 ]; then
    cwd=`pwd`
    os_name=pcgeos
    rootdir=`expr "$cwd" : '\(.*/'$os_name'\).*$'`
    ddir=$rootdir/`expr "$cwd" : $rootdir'/\([^/]*\)'`
    if [ -f $ddir/BRANCH ]; then
	read branch < $ddir/BRANCH
    fi
    if [ "$branch" = "" ]; then
	otherGeode=/staff/pcgeos/Installed/$subdir/$srcGeode
    else
	otherGeode=/staff/pcgeos/$branch/Installed/$subdir/$srcGeode
    fi

else
    #
    # They passed a second argument.  If it has a slash in it
    # treat it as a path to another geode, if not use it directly
    # as a branch name.
    #
    hasSlash=`expr $2 : '\(.*/.*\)'`
    if [ "$hasSlash" = "" ]; then
	otherGeode=/staff/pcgeos/$2/Installed/$subdir/$srcGeode
    else
	thePath=$2
	#
	# It's a path.  If it has a trailing slash, look for 
	# the srcGeode.geo, or the first .geo we find if not
	#
	hasTrailingSlash=`expr $thePath : '\(.*\)/$'`
	if [ "$hasTrailingSlash" != "" ]; then
	    otherGeode=$thePath$srcGeode
	    if [ ! -f $otherGeode.geo ]; then
		fileList=$thePath*.geo
		set $fileList
		otherGeode=`expr $1 : '\(.*\)\.geo$'`
		if [ ! -f $otherGeode.geo ]; then
		    echo "$thePath$srcGeode.geo"
		    echo -n "does not exist, and there are no other "
		    echo ".geo files there."
		    exit 1
		fi
	    fi
	else
	    #
	    # No trailing slash, so the last component could be a 
	    # file basename.  Assume a basename first, and check
	    # for basename.geo.
	    #
	    otherGeode=$thePath
	    if [ ! -f $otherGeode.geo ]; then
		#
		# Nope, not a basename.  Assume it is a path component
		# and look for srcGeode.geo
		#
		otherGeode=$thePath/$srcGeode
		if [ ! -f $otherGeode.geo ]; then
		    #
		    # Nope, srcGeode not found, look for *any* .geo in that dir
		    #
		    fileList=$thePath/*.geo
		    set $fileList
		    otherGeode=`expr $1 : '\(.*\)\.geo$'`
		    if [ ! -f $otherGeode.geo ]; then
			echo "Could not find $thePath.geo,"
			echo "$thePath/$srcGeode.geo or any"
			echo "other .geo in $thePath."
			exit 1
		    fi
		fi
	    fi
	fi
    fi
fi

if [ ! -f $otherGeode.geo ]; then
	echo $otherGeode.geo does not exist
	exit 1
fi

routinesize=/usr/public/routinesize

# 
# exclude the following fields from the comparison:
#
# 45-52   GFH_protocol
# 201-204 GFH_created
# 287-294 GH_protocol
# 299-300 GH_geodeSerial
# 385     ???
#
if [ "`cmp -l $srcGeode.geo $otherGeode.geo 2>/dev/null | sed -n -e '
	/^    45/d
	/^    46/d
	/^    47/d
	/^    48/d
	/^    49/d
	/^    50/d
	/^    51/d
	/^    52/d
	/^   201/d
	/^   202/d
	/^   203/d
	/^   204/d
	/^   287/d
	/^   288/d
	/^   289/d
	/^   290/d
	/^   291/d
	/^   292/d
	/^   293/d
	/^   294/d
	/^   299/d
	/^   299/d
	/^   300/d
	/^   385/d
	p
	q'`" ]; then
    echo $srcGeode.geo and $otherGeode.geo DIFFER
    echo
    echo Examining sizes of routines that do not match...
    echo
    $routinesize $srcGeode.sym > size1~
    $routinesize $otherGeode.sym > size2~
    diff size1~ size2~
    rm size1~ size2~
else
    echo $srcGeode.sym and $otherGeode.sym are the same
fi

