#!/bin/sh -
##############################################################################
#
# 	Copyright (c) Berkeley Softworks 1989 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Tools/scripts -- Library Definition File generation
# FILE: 	docToHeader
# AUTHOR: 	Adam de Boor, July 23, 1989
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	ardeb	7/23/89		Initial Revision
#
# DESCRIPTION:
#	A shell script to create the header file for a library based on the
#	documentation in the set of files given.
#
#		% docToHeader [ -t 'template' ] 'sourceFiles' > 'deffile'
#
#	'template' is a file (whose name defaults to "def.temp if no -t
#   	flag is given) with lines like:
#
#	;### className
#
#	that cause the definitions for the given class to be inserted in the
#	output file immediately after the line. E.g.
#
#	;### OLCtrlClass
#
#	will cause the definitions for OLCtrlClass to be placed on the
#	following lines.
#
#	$Id: docToHeader,v 1.4 91/02/26 12:23:12 adam Exp $
#
###############################################################################

#
# Handle deadly signals by removing any temp files we create (all tempfiles
# are recorded in the tempfiles variable)
#
tempfiles=""
trap 'rm -f $tempfiles; exit 0' 0 1 2 3 15

#
# Set up default template
#
template="def.temp"
srcs=""
while [ $# -ne 0 ]; do
    case "$1" in
    	-t*)
    	    template="`expr $1 : '-t\(.*\)$'`"
	    if [ ! "$template" ]; then
	    	template=${2?"-t requires template as argument"}
		shift
	    fi
	    ;;
    	-x)
	    verbose="1"
	    # don't remove the temp files on exit if verbose
	    trap 0
	    ;;
    	-*)
	    echo "What is $1?"
	    echo "Usage: $0 [ -t <template> ] <sourceFiles>"
	    exit 1
	    ;;
	*)
	    srcs="$srcs $1"
	    ;;
    esac
    shift
done

if [ ! "$srcs" ]; then
    echo "$0: require at least one source file on which to operate"
    exit 1
fi

if [ "$verbose" ]; then
   set -x
fi

#
# sedscript is a file in which the final script to be run over the template
# is created. The script contains a succession of lines like
#
# /^;### OLCtrlClass/r <file>
#
# where <file> is /tmp/dc.$$.`basename $i`, as created by the loop below.
#
# /tmp/dc.tsed.$$ is the sed script used to extract the information from a
# class description header.
#
sedscript=/tmp/dc.sed.$$
tempfiles="$tempfiles $sedscript /tmp/dc.tsed.$$"

: > $sedscript

echo Extracting class definitions... 1>&2
for i in $srcs; do
    #
    # Figure name for description for this file. Place the name in the list of
    # tempfiles as well
    #
    base=`basename $i .asm`
    tf="/tmp/dc.$$.$base"
    tempfiles="$tempfiles $tf"

    #
    # Create a temporary sed script for this file to extract its class
    # description. There are two types of declarations this script can
    # find: a class description, bracketed by the usual class description
    # header (first part of script below) or declarations unrelated to a class,
    # bracketed by Declaration and End Declaration lines.
    #
    # For a class description, the pattern sought in the template is
    #
    #	;### <class>
    #
    # Other things may follow on the line -- the script will search for
    # that string at the beginning of the line, ignoring anything that follows
    # it (<class> is, of course, replaced by the class name).
    #
    # For random declarations, the pattern sought is
    #
    #	;### <file>
    #
    # where <file> is the tail of the file in which the declarations were
    # found, minus the ".asm" suffix. E.g. the VisTrace declarations found
    # in /staff/pcgeos/Library/CommonUI/COpen/copenTrace.asm would cause
    # the script to search for
    #
    #	;### copenTrace
    #
    # at the beginning of a line.
    #
    cat - > /tmp/dc.tsed.$$ << ~EOF~
/^COMMENT @CLASS DESCRIPTION/,/-@/{
    n
    n
    s,^\\(.*\\):,/^;###[ 	]*\\1/r $tf,p
    :loop1
    n
    /^Declaration/!bloop1
    s,^.*\$,; Extracted from $i:,w $tf
    n
    s,^.*\$,,w $tf
    n
    :loop2
    /^[;]/!w $tf
    n
    /^Methods/!bloop2
    q
}
/^Declaration/{
    s,^Declaration,/^;###[ 	]*$base/r $tf,p
    n
    s,^.*\$,; Extracted from $i:,w $tf
    s,^.*\$,,w $tf
    n
    :loop3
    /^[;]/!w $tf
    n
    /^End Declaration/!bloop3
    q
}
~EOF~
    sed -n -f /tmp/dc.tsed.$$ $i >> $sedscript
    if [ ! -s "$tf" ]; then
    	echo "$0: $i: no class description encountered..." 1>&2
    fi
done
#
# Finally, run the main script over the template to read the definitions into
# the correct place.
#
# XXX: catch unread files?
#
echo Creating def file 1>&2
sed -f $sedscript $template 

