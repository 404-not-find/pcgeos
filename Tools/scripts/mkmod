#!/bin/sh -
##############################################################################
#
# 	Copyright (c) Berkeley Softworks 1989 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:       Tools
# FILE: 	mkmod
# AUTHOR: 	John and Adam, August 22nd, 1989
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	jcw	22-Aug-89	Initial Revision
#	eds	6/9/91		Added support for creating complete applications
#				(Basically, performs a few more substitutions.)
#
#	@Mod		-- name of module ("Hello")
#	@mod		-- name of module, all lower-case ("hello")
#	@MOD		-- name of module, all upper-case ("HELLO")
#	@MODSHORT	-- short name of module, all upper-case ("HELO")
#				(this is for the token)
#
# DESCRIPTION:
#	Make a module for an application of standard form from a template
#	directory.
#
# USAGE:
#	To create a new module for an already existing application,
#	go into the application's top-level directory in your development
#	tree, and type "mkmod ModuleName", where ModuleName is your module name.
#	Mkmod will use the template files in /staff/pcgeos/Tools/scripts/
#	modTemplates, in case you were curious. Example:
#
#		cd /staff/pcgeos/Appl/Draw
#		mkmod SuperCoolDrawTools
#
#	Inspect the files, and if they seem cool, go ahead and install them.
#
#  - or -
#	To create a new application, for example in the Appl/SDK_V1 directory,
#	create a symbolic link from your development tree:
#
#		cd /staff/pcgeos/eric/Appl/SDK_V1
#		ln -s /staff/pcgeos/Release12X/Appl/SDK_V1/.template
#
#	Then issue this command:
#
#		mkmod AppName
#
#	Mkmod will use the .template directory instead of the one in /s/p/Tools.
#
#
#	$Id: mkmod,v 1.9 91/07/18 18:02:34 adam Exp $
#
###############################################################################

if [ -d .template ]; then
    templateDir=.template
elif [ -d $HOME/.template ]; then
    templateDir=$HOME/.template
else
    templateDir=/staff/pcgeos/Tools/scripts/modTemplate
fi
templatePrefix=mod

#
# Do this on exit or signals 1, 2, 3, 15
#
trap "rm -f /tmp/mkmod$$ ; exit 0" 0 1 2 3 15

if [ $# -lt 1 ]; then
    echo "Usage: $0 ModuleName ..."
    exit 0
fi

#
# Create a sed script containing substitutions for:
#	@fullname	-- Users full name as found in /etc/passwd.
#	@fulldate	-- Full date in form "Month Day, 1989".
#	@irev		-- "initials	short-date	Initial revision"n
#	@appl		-- application name
#	@Appl		-- application name, as taken from the tail of the
#			   current directory.
#	@year		-- Year in form "1989".
#
if [ ! "$NAME" ]; then
    #
    # Fetch the user's password entry from the proper source
    #
    if [ -d /usr/etc/yp -a "`egrep '^\+::0:0:::' /etc/passwd`" ]; then
   	#
	# Yellow-pages enabled -- use ypcat to locate the person
	#
	line="`/usr/bin/ypmatch $USER passwd`"
    else
    	line="`egrep '^'$USER':' /etc/passwd`"
    fi
    #
    # Form user name with first letter upcased to deal with & in full name
    #
    UNAME=`expr "$USER" : '\(.\)' | tr a-z A-Z``expr "$USER" : '.\(.*\)$'`
    #
    # Extract the full name field of the line, replacing & with the proper
    # thing.
    #
    NAME="`echo $line | awk -F: '{
	    comma=index($5, ",")
	    if (comma > 0) {
		print substr($5,1,comma-1)
	    } else {
		print $5
	    }
	}' | sed -e s/\&/$UNAME/`"
fi
#
# NAME holds the user's name.
#
echo "s/@fullname/$NAME/g" > /tmp/mkmod$$
if [ ! "$SNAME" ]; then
    SNAME=`echo $NAME | tr -cd A-Z | tr A-Z a-z`
fi
echo "s/@sname/$SNAME/g" >> /tmp/mkmod$$

#
# Make fulldate and sdate substitutions...
# This stuff is easy.
#
date | awk '
	BEGIN {
		months["Jan"] = "January 1"
		months["Feb"] = "February 2"
		months["Mar"] = "March 3"
		months["Apr"] = "April 4"
		months["May"] = "May 5"
		months["Jun"] = "June 6"
		months["Jul"] = "July 7"
		months["Aug"] = "August 8"
		months["Sep"] = "September 9"
		months["Oct"] = "October 10"
		months["Nov"] = "November 11"
		months["Dec"] = "December 12"
	}
	{ n = split(months[$2], m, " ")
	  sdate = sprintf "%02s/%02s/%02s", m[2], $3, substr($6, 3, 2)
	  printf "s/@fulldate/%s %s, %s/g\n", m[1], $3, $6
	  printf "s,@irev,%-8s%-16sInitial revision.,g\n", "'$SNAME'", sdate
	  printf "s/@year/%s/g\n", substr($6, 1, 4)
	}' >> /tmp/mkmod$$
#
# Now add the substitution lines for the Application name to the
# sed script. (This only applies if you are using this script to
# add a module to an already-existing application.
#
pwd=`pwd`
appl=`basename $pwd "" | tr A-Z a-z`
echo s/@appl/$appl/g >> /tmp/mkmod$$
echo s/@Appl/`basename $pwd ""`/g >> /tmp/mkmod$$
#
# Loop: for each command line argument, create a module.
#
modFiles=`cd $templateDir ; echo *`

for i in $*; do
    if [ -d $i ]; then
	echo "Module $i already exists."
    else
	# Set up some "Mod" variables, for use in the substitutions:

	mod=$i
	modLower=`echo $mod | tr A-Z a-z`
	modUpper=`echo $mod | tr a-z A-Z`
	modShort=`expr $modUpper"    " : '\(....\)'`

	mkdir $mod
	echo -n "Creating $mod: "

	destPrefix=$modLower

	for j in $modFiles; do
	    #
	    # Add the prefix "mod" to each filename.
	    #
	    destSuffix=`expr $j : $templatePrefix'\(.*\)$'`
	    echo -n "$destSuffix..."
	    #
	    # Copy one file over, making substitutions as we go.
	    #
	    sed -f /tmp/mkmod$$ \
		-e "s/@Mod/$mod/g" \
		-e "s/@mod/$modLower/g" \
		-e "s/@MODSHORT/$modShort/g" \
		-e "s/@MOD/$modUpper/g" \
	        $templateDir/$j > $i/$destPrefix$destSuffix
	done
	echo done.
	#
	# Now, if we just created a .ui file, then update it.
	#
	if [ -f "$appl".ui ]; then
	    echo -n "Updating $appl.ui..."
	    echo #include \"$i/$destPrefix.ui\" >> "$appl".ui
	fi
	echo done.
    fi
done
