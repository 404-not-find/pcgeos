#!/usr/public/tsh
#
# Tcl script to look up the description of a machine instruction
#
#	$Id: inst,v 1.10 93/04/08 16:44:31 adam Exp $
#
#
[proc inst {name}
{
    var nl [length $name chars]

    #upcase the name
    for {var i 0} {$i < $nl} {var i [expr $i+1]} {
	scan [index $name $i chars] %c c

	#96 == 'a'-1, 123 == 'z'+1
	if {$c > 96 && $c < 123} {
	    var c [expr $c-32]
	}
	var inst [format {%s%c} $inst $c]
    }
       
    var string 0

    #convert all string forms to their root, noting we're dealing with
    #a string instruction.
    [case $inst in
    	CMPS* {var inst CMPS string 1 suff W}
	INS*  {var inst INS string 1 suff W}
	LODS* {var inst LODS string 1 suff W}
	MOVS* {var inst MOVS string 1 suff W}
	OUTS* {var inst OUTS string 1 suff W}
	SCAS* {var inst SCAS string 1 suff W}
	STOS* {var inst STOS string 1 suff W}
	XLAT* {var inst XLAT string 1 suff B}]

    var desc [exec sed -n -e
	      [format {
		/^[^ \t=]/,/^===/{
		    /^[^ \t=]/,/^[ \t]*$/{
			/^%s[ \t]/bgotit
			/^%s$/bgotit
			:loop
			N
			/\\n%s[ \t]/bgotit
			/\\n%s$/bgotit
			/\\n[ \t]*$/bnope
			bloop
		    }
		    :nope
		    n
		    /^===/!bnope
		    d
		    :gotit
		    p
		    n
		    /^===/!bgotit
		    d
		}} $inst $inst $inst $inst]
	    /staff/pcgeos/Tools/swat/lib.new/ref.80x8x]
		    
    if {[string c $desc {}] == 0} {
    	error [format {%s not listed} $name]
    } else {
    	echo -n $desc

    	#if string instruction, use word form to get all timing info
    	if {$string} {var inst ${inst}${suff}}

	if {[string c $inst [index $desc 0]] != 0} {
	    var fmt [format {
			/^\{%s[ \t]/,/^\{/{
			    /^\{%s/p
			    /^\{/!p
			}
			/^\{%s[ \t]/,/^\{/{
			    /^\{%s/p
			    /^\{/!p
			}} $inst $inst [index $desc 0] [index $desc 0]]
	} else {
	    var fmt [format {
			/^\{%s[ \t]/,/^\{/{
			    /^\{%s/p
			    /^\{/!p
			}} $inst $inst]
	}

    	var t [exec sed -n -e $fmt /staff/pcgeos/Tools/swat/lib.new/timing.80x8x]
	var l [index $t 0]
	if {[length $l] > 2} {
	    echo -n [format {%-16s} Timing:]
	    #if string instruction, don't use "implied"-type formatting -- need
	    #to distinguish between byte/word access
	    if {$string} {
		var itype string
	    } else {
		var itype [index $l 1]
	    }
	    [case $itype in
		repeat {}
		{implied control branch int prefix stack return muldiv} {
		    echo [format {%-16s%-10s%-10s%-10s%-10s}
				MODE 8088 8086 80286 V20]
		    foreach i [range $l 2 end] {
			echo [format {\t\t%-16s%-10s%-10s%-10s%-10s}
				[index $i 0] [index $i 2] [index $i 1]
				[index $i 3] [index $i 5]]
		    }
		}
		default {
		    echo [format {%-16s%-18s%-10s%-18s}
				MODE {8088 byte/word}
				80286 {V20 byte/word}]
		    foreach i [range $l 2 end] {
			[if {[string match [index $i 0] *mem*] &&
			     [string c [index $i 1] -] != 0 &&
			     ![string match [index $i 0] *ax*]}
    	    	    	{
			    var times [list [index $i 1]+EA/[index $i 2]+EA 
				    	[index $i 3]
					[index $i 4]/[index $i 5]]
    	    	    	} else {
			    var times [list [index $i 1]/[index $i 2]
				       [index $i 3]
				       [index $i 4]/[index $i 5]]
			}]
			echo [eval [concat
				    [list format {\t\t%-16s%-18s%-10s%-18s} 
					  [index $i 0]] 
			    	    $times]]
		    }
		}
	    ]
	}
    }
}]

eval [format {inst %s} $args]
	    
	    	
