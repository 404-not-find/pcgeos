./lib.new/stack.tcl:1390:    if {[null [info command address-kernel-internal]]} {
./lib.new/stack.tcl:1395:        var fe_addr [address-kernel-internal FatalError]
./lib.new/swat.tcl:1064:[if {![null [info command address-kernel-internal]] && 
./lib.new/swat.tcl:1067:    brk tset [address-kernel-internal Idle] {  	ec normal
./lib.new/swat.tcl:1085:        	![null [info command address-kernel-internal]]} {
./lib.new/swat.tcl:1086:        	var addr_fe [address-kernel-internal FatalError]
./lib.new/swat.tcl:1095:    	    if {[null [info command address-kernel-internal]]} {
./lib.new/swat.tcl:1103:    	            assign {word [address-kernel-internal errorFlag]} 0
./lib.new/ec.tcl:212:    if {![null [patient find geos]] && ([null $oecf] || ![kernel-has-table])} {
./lib.new/ec.tcl:255:    	    if {[kernel-has-table]} {
./lib.new/ec.tcl:256:    	    	var ecLevelAddr [address-kernel-internal sysECLevel]
./lib.new/ec.tcl:312:    	    	    	    assign [address-kernel-internal sysECBlock] $b
./lib.new/ec.tcl:313:			    assign {word [address-kernel-internal sysECChecksum]} 0
./lib.new/ec.tcl:328:			    assign [address-kernel-internal sysECBlock] 0
./lib.new/ec.tcl:443:	    assign [address-kernel-internal sysECBlock] $ec_block
./lib.new/ec.tcl:444:	    assign [address-kernel-internal sysECChecksum] 0
./lib.new/ec.tcl:446:	var cur [value fetch [address-kernel-internal sysECLevel] word]
./lib.new/ec.tcl:459:	value store [address-kernel-internal sysECLevel] $cur word
./lib.new/call.tcl:424:	var bp [brk [address-kernel-internal Idle]]
./lib.new/fatalerr.tcl:98:    	    [if {[string c [symbol-kernel-internal $addr] FatalError] == 0 &&
./lib.new/fatalerr.tcl:180:    	if {[string c [symbol-kernel-internal $addr] FatalError] == 0} {
./ibm86.c:99:#define Ibm86EndStack(s) ((kernel != 0 && ((s) == kernel->resources[1].handle)) ? Handle_ID(s) : Handle_Size(s))
./ibm86.c:1868:		    stack != kernel->resources[1].handle)   /* borrow doesn't
./ibm86.c:2111:		    stack != kernel->resources[1].handle)   /* borrow doesn't
./ibm.c:661:	realCurThread = (ThreadPtr)Lst_Datum(Lst_First(kernel->threads));
./ibm.c:2886: * SIDE EFFECTS:    kernel->core will change size if status is
./ibm.c:2910:	sym = Sym_Lookup("lastHandle", SYM_VAR, kernel->global);
./ibm.c:2917:	assert(Var_FetchInt(2, kernel->core, offset, (genptr)&lastHandle));
./ibm.c:2922:	Handle_Change(kernel->core, HANDLE_SIZE, 0, (Address)0, 
./ibm.c:2989:    ha1.ha1_kdata = (kernel->resources[1].offset - exeLoadBase) >> 4;
./ibm.c:2998:	sym = Sym_Lookup(initSyms[i].name, initSyms[i].class, kernel->global);
./ibm.c:3070:	Handle_Change(kernel->resources[KRES_KDATA].handle,
./ibm.c:3074:				 (kernel->resources[KRES_KDATA].offset -
./ibm.c:3076:		      kernel->resources[KRES_KDATA].size,
./ibm.c:3078:	Handle_Change(kernel->resources[KRES_KCODE].handle,
./ibm.c:3082:				 (kernel->resources[KRES_KCODE].offset -
./ibm.c:3084:		      kernel->resources[KRES_KCODE].size,
./ibm.c:3086:	Handle_Change(kernel->resources[KRES_KROUT].handle,
./ibm.c:3090:				 (kernel->resources[KRES_KROUT].offset -
./ibm.c:3092:		      kernel->resources[KRES_KROUT].size,
./ibm.c:3096:	    Handle_Change(kernel->resources[KRES_KINIT].handle,
./ibm.c:3100:			  kernel->resources[KRES_KINIT].size,
./ibm.c:3108:	    Handle_Change(kernel->resources[KRES_KDATA].handle,
./ibm.c:3112:			  kernel->resources[KRES_KDATA].size,
./ibm.c:3115:	    Handle_Interest(kernel->resources[KRES_KINIT].handle,
./ibm.c:3122:	    Handle_Change(kernel->resources[KRES_KDATA].handle,
./ibm.c:3133:	Handle_Change(kernel->resources[KRES_DOS].handle,
./ibm.c:3144:	Handle_Change(kernel->resources[KRES_PSP].handle,
./ibm.c:3155:	    Handle_Change(kernel->resources[KRES_SWAT].handle,
./ibm.c:3166:	    Handle_Change(kernel->resources[KRES_SWAT].handle,
./ibm.c:3511:    kernel->resources[KRES_KDATA].handle = NullHandle;
./ibm.c:3514:	kernel->resources[i+1].handle =
./ibm.c:3517:			  kernel->resources[KRES_KDATA].handle,
./ibm.c:3530:    kernel->core = kernel->resources[0].handle =
./ibm.c:3531:	kernel->resources[KRES_KDATA].handle;
./ibm.c:3533:    kernel->geode.v1 = (GeodePtr)NULL;
./ibm.c:3535:    kernel->threads = Lst_Init(FALSE);
./ibm.c:3536:    kernel->curThread = (Thread)NULL;
./ibm.c:3537:    kernel->name = "geos";
./ibm.c:3543:    kernel->scope = kernel->global;
./ibm.c:3544:    kernel->line = -1;
./ibm.c:3556:    realCurThread = (ThreadPtr)kernel->curThread;
./ibm.c:3563:    Handle_Change(kernel->resources[KRES_KCODE].handle, HANDLE_SIZE,
./ibm.c:3566:		  kernel->resources[KRES_KCODE].size,
./ibm.c:3568:    Handle_Change(kernel->resources[KRES_KROUT].handle, HANDLE_SIZE,
./ibm.c:3571:		  kernel->resources[KRES_KROUT].size,
./ibm.c:3573:    Handle_Change(kernel->resources[KRES_KINIT].handle, HANDLE_SIZE,
./ibm.c:3576:		  kernel->resources[KRES_KINIT].size,
./ibm.c:3932:    for (i = 1; i < kernel->numRes; i++) 
./ibm.c:3934:	if (strcmp(Sym_Name(kernel->resources[i].sym), "kcode") == 0) 
./ibm.c:4071:    assert(strcmp(kernel->name, "loader") != 0);
./ibm.c:4077:    if (Lst_IsEmpty(kernel->threads)) {
./ibm.c:4082:    thread = (ThreadPtr)kernel->curThread;
./ibm.c:4086:    kernel->frame = MD_CurrentFrame();
./ibm.c:4963: *	    	    into kernel->resources)
./handle.c:697:				     kernel->core,
./handle.c:1406:	Sym 	sym = Sym_Lookup(name, SYM_TYPE, kernel->global);
./sym.c:251:DEFCMD(symbol-kernel-internal,SymbolKernelInternal,TCL_EXACT,NULL,swat_prog,
./sym.c:252:"Usage: symbol-kernel-internal <address> \n\n\
./sym.c:268:	if (addr.handle == kernel->resources[kcodeResID].handle)
./sym.c:305:    return ((handle == kernel->resources[kcodeResID].handle) &&
./sym.c:323:DEFCMD(kernel-has-table,KernelHasTable,TCL_EXACT,NULL,swat_prog,
./sym.c:324:"Usage: kernel-has-table\n\n\
./sym.c:358:DEFCMD(address-kernel-internal,AddressKernelInternal,TCL_EXACT,NULL,swat_prog,
./sym.c:359:"Usage: symbol-kernel-internal <address> \n\n\
./sym.c:393:		(long)Handle_Address(kernel->resources[kcodeResID].handle)>>4, 
./sym.c:402:		(long)Handle_Address(kernel->resources[1].handle)>>4,
./sym.c:1646:				kernel->global);
./sym.c:2996:	    sym = Sym_Lookup(fields[i].name, SYM_FIELD, kernel->global);
./expr.c:4189:	Var_FetchInt(2, kernel->resources[1].handle, (Address)(hid+12),
./expr.c:4241:    Var_FetchInt(2, kernel->resources[1].handle,
./expr.c:4763:				    kernel->resources[1].handle;
