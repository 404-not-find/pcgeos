

Terminals which are not used:

   INC_OP
   DEC_OP
   HIGHEST


Conflict in state 51 between rule 9 and token '.' resolved as reduce.
Conflict in state 51 between rule 9 and token PTR_OP resolved as reduce.
Conflict in state 51 between rule 9 and token LEFT_OP resolved as reduce.
Conflict in state 51 between rule 9 and token RIGHT_OP resolved as reduce.
Conflict in state 51 between rule 9 and token LE_OP resolved as reduce.
Conflict in state 51 between rule 9 and token GE_OP resolved as reduce.
Conflict in state 51 between rule 9 and token EQ_OP resolved as reduce.
Conflict in state 51 between rule 9 and token NE_OP resolved as reduce.
Conflict in state 51 between rule 9 and token AND_OP resolved as reduce.
Conflict in state 51 between rule 9 and token OR_OP resolved as reduce.
Conflict in state 51 between rule 9 and token '|' resolved as reduce.
Conflict in state 51 between rule 9 and token '^' resolved as reduce.
Conflict in state 51 between rule 9 and token '&' resolved as reduce.
Conflict in state 51 between rule 9 and token '<' resolved as reduce.
Conflict in state 51 between rule 9 and token '>' resolved as reduce.
Conflict in state 51 between rule 9 and token '+' resolved as reduce.
Conflict in state 51 between rule 9 and token '-' resolved as reduce.
Conflict in state 51 between rule 9 and token '*' resolved as reduce.
Conflict in state 51 between rule 9 and token '/' resolved as reduce.
Conflict in state 51 between rule 9 and token '%' resolved as reduce.
Conflict in state 51 between rule 9 and token '[' resolved as reduce.
Conflict in state 51 between rule 9 and token ':' resolved as reduce.
Conflict in state 52 between rule 29 and token '.' resolved as reduce.
Conflict in state 52 between rule 29 and token PTR_OP resolved as reduce.
Conflict in state 52 between rule 29 and token LEFT_OP resolved as reduce.
Conflict in state 52 between rule 29 and token RIGHT_OP resolved as reduce.
Conflict in state 52 between rule 29 and token LE_OP resolved as reduce.
Conflict in state 52 between rule 29 and token GE_OP resolved as reduce.
Conflict in state 52 between rule 29 and token EQ_OP resolved as reduce.
Conflict in state 52 between rule 29 and token NE_OP resolved as reduce.
Conflict in state 52 between rule 29 and token AND_OP resolved as reduce.
Conflict in state 52 between rule 29 and token OR_OP resolved as reduce.
Conflict in state 52 between rule 29 and token '|' resolved as reduce.
Conflict in state 52 between rule 29 and token '^' resolved as reduce.
Conflict in state 52 between rule 29 and token '&' resolved as reduce.
Conflict in state 52 between rule 29 and token '<' resolved as reduce.
Conflict in state 52 between rule 29 and token '>' resolved as reduce.
Conflict in state 52 between rule 29 and token '+' resolved as reduce.
Conflict in state 52 between rule 29 and token '-' resolved as reduce.
Conflict in state 52 between rule 29 and token '*' resolved as reduce.
Conflict in state 52 between rule 29 and token '/' resolved as reduce.
Conflict in state 52 between rule 29 and token '%' resolved as reduce.
Conflict in state 52 between rule 29 and token '[' resolved as reduce.
Conflict in state 52 between rule 29 and token ':' resolved as reduce.
Conflict in state 53 between rule 28 and token '.' resolved as reduce.
Conflict in state 53 between rule 28 and token PTR_OP resolved as reduce.
Conflict in state 53 between rule 28 and token LEFT_OP resolved as reduce.
Conflict in state 53 between rule 28 and token RIGHT_OP resolved as reduce.
Conflict in state 53 between rule 28 and token LE_OP resolved as reduce.
Conflict in state 53 between rule 28 and token GE_OP resolved as reduce.
Conflict in state 53 between rule 28 and token EQ_OP resolved as reduce.
Conflict in state 53 between rule 28 and token NE_OP resolved as reduce.
Conflict in state 53 between rule 28 and token AND_OP resolved as reduce.
Conflict in state 53 between rule 28 and token OR_OP resolved as reduce.
Conflict in state 53 between rule 28 and token '|' resolved as reduce.
Conflict in state 53 between rule 28 and token '^' resolved as reduce.
Conflict in state 53 between rule 28 and token '&' resolved as reduce.
Conflict in state 53 between rule 28 and token '<' resolved as reduce.
Conflict in state 53 between rule 28 and token '>' resolved as reduce.
Conflict in state 53 between rule 28 and token '+' resolved as reduce.
Conflict in state 53 between rule 28 and token '-' resolved as reduce.
Conflict in state 53 between rule 28 and token '*' resolved as reduce.
Conflict in state 53 between rule 28 and token '/' resolved as reduce.
Conflict in state 53 between rule 28 and token '%' resolved as reduce.
Conflict in state 53 between rule 28 and token '[' resolved as reduce.
Conflict in state 53 between rule 28 and token ':' resolved as reduce.
Conflict in state 54 between rule 20 and token '.' resolved as shift.
Conflict in state 54 between rule 20 and token PTR_OP resolved as shift.
Conflict in state 54 between rule 20 and token LEFT_OP resolved as reduce.
Conflict in state 54 between rule 20 and token RIGHT_OP resolved as reduce.
Conflict in state 54 between rule 20 and token LE_OP resolved as reduce.
Conflict in state 54 between rule 20 and token GE_OP resolved as reduce.
Conflict in state 54 between rule 20 and token EQ_OP resolved as reduce.
Conflict in state 54 between rule 20 and token NE_OP resolved as reduce.
Conflict in state 54 between rule 20 and token AND_OP resolved as reduce.
Conflict in state 54 between rule 20 and token OR_OP resolved as reduce.
Conflict in state 54 between rule 20 and token '|' resolved as reduce.
Conflict in state 54 between rule 20 and token '^' resolved as reduce.
Conflict in state 54 between rule 20 and token '&' resolved as reduce.
Conflict in state 54 between rule 20 and token '<' resolved as reduce.
Conflict in state 54 between rule 20 and token '>' resolved as reduce.
Conflict in state 54 between rule 20 and token '+' resolved as reduce.
Conflict in state 54 between rule 20 and token '-' resolved as reduce.
Conflict in state 54 between rule 20 and token '*' resolved as reduce.
Conflict in state 54 between rule 20 and token '/' resolved as reduce.
Conflict in state 54 between rule 20 and token '%' resolved as reduce.
Conflict in state 54 between rule 20 and token '[' resolved as shift.
Conflict in state 54 between rule 20 and token ':' resolved as shift.
Conflict in state 55 between rule 22 and token '.' resolved as shift.
Conflict in state 55 between rule 22 and token PTR_OP resolved as shift.
Conflict in state 55 between rule 22 and token LEFT_OP resolved as reduce.
Conflict in state 55 between rule 22 and token RIGHT_OP resolved as reduce.
Conflict in state 55 between rule 22 and token LE_OP resolved as reduce.
Conflict in state 55 between rule 22 and token GE_OP resolved as reduce.
Conflict in state 55 between rule 22 and token EQ_OP resolved as reduce.
Conflict in state 55 between rule 22 and token NE_OP resolved as reduce.
Conflict in state 55 between rule 22 and token AND_OP resolved as reduce.
Conflict in state 55 between rule 22 and token OR_OP resolved as reduce.
Conflict in state 55 between rule 22 and token '|' resolved as reduce.
Conflict in state 55 between rule 22 and token '^' resolved as reduce.
Conflict in state 55 between rule 22 and token '&' resolved as reduce.
Conflict in state 55 between rule 22 and token '<' resolved as reduce.
Conflict in state 55 between rule 22 and token '>' resolved as reduce.
Conflict in state 55 between rule 22 and token '+' resolved as reduce.
Conflict in state 55 between rule 22 and token '-' resolved as reduce.
Conflict in state 55 between rule 22 and token '*' resolved as reduce.
Conflict in state 55 between rule 22 and token '/' resolved as reduce.
Conflict in state 55 between rule 22 and token '%' resolved as reduce.
Conflict in state 55 between rule 22 and token '[' resolved as shift.
Conflict in state 55 between rule 22 and token ':' resolved as shift.
Conflict in state 56 between rule 23 and token '.' resolved as shift.
Conflict in state 56 between rule 23 and token PTR_OP resolved as shift.
Conflict in state 56 between rule 23 and token LEFT_OP resolved as reduce.
Conflict in state 56 between rule 23 and token RIGHT_OP resolved as reduce.
Conflict in state 56 between rule 23 and token LE_OP resolved as reduce.
Conflict in state 56 between rule 23 and token GE_OP resolved as reduce.
Conflict in state 56 between rule 23 and token EQ_OP resolved as reduce.
Conflict in state 56 between rule 23 and token NE_OP resolved as reduce.
Conflict in state 56 between rule 23 and token AND_OP resolved as reduce.
Conflict in state 56 between rule 23 and token OR_OP resolved as reduce.
Conflict in state 56 between rule 23 and token '|' resolved as reduce.
Conflict in state 56 between rule 23 and token '^' resolved as reduce.
Conflict in state 56 between rule 23 and token '&' resolved as reduce.
Conflict in state 56 between rule 23 and token '<' resolved as reduce.
Conflict in state 56 between rule 23 and token '>' resolved as reduce.
Conflict in state 56 between rule 23 and token '+' resolved as reduce.
Conflict in state 56 between rule 23 and token '-' resolved as reduce.
Conflict in state 56 between rule 23 and token '*' resolved as reduce.
Conflict in state 56 between rule 23 and token '/' resolved as reduce.
Conflict in state 56 between rule 23 and token '%' resolved as reduce.
Conflict in state 56 between rule 23 and token '[' resolved as shift.
Conflict in state 56 between rule 23 and token ':' resolved as shift.
Conflict in state 57 between rule 21 and token '.' resolved as shift.
Conflict in state 57 between rule 21 and token PTR_OP resolved as shift.
Conflict in state 57 between rule 21 and token LEFT_OP resolved as reduce.
Conflict in state 57 between rule 21 and token RIGHT_OP resolved as reduce.
Conflict in state 57 between rule 21 and token LE_OP resolved as reduce.
Conflict in state 57 between rule 21 and token GE_OP resolved as reduce.
Conflict in state 57 between rule 21 and token EQ_OP resolved as reduce.
Conflict in state 57 between rule 21 and token NE_OP resolved as reduce.
Conflict in state 57 between rule 21 and token AND_OP resolved as reduce.
Conflict in state 57 between rule 21 and token OR_OP resolved as reduce.
Conflict in state 57 between rule 21 and token '|' resolved as reduce.
Conflict in state 57 between rule 21 and token '^' resolved as reduce.
Conflict in state 57 between rule 21 and token '&' resolved as reduce.
Conflict in state 57 between rule 21 and token '<' resolved as reduce.
Conflict in state 57 between rule 21 and token '>' resolved as reduce.
Conflict in state 57 between rule 21 and token '+' resolved as reduce.
Conflict in state 57 between rule 21 and token '-' resolved as reduce.
Conflict in state 57 between rule 21 and token '*' resolved as reduce.
Conflict in state 57 between rule 21 and token '/' resolved as reduce.
Conflict in state 57 between rule 21 and token '%' resolved as reduce.
Conflict in state 57 between rule 21 and token '[' resolved as shift.
Conflict in state 57 between rule 21 and token ':' resolved as shift.
Conflict in state 58 between rule 25 and token '.' resolved as shift.
Conflict in state 58 between rule 25 and token PTR_OP resolved as shift.
Conflict in state 58 between rule 25 and token LEFT_OP resolved as reduce.
Conflict in state 58 between rule 25 and token RIGHT_OP resolved as reduce.
Conflict in state 58 between rule 25 and token LE_OP resolved as reduce.
Conflict in state 58 between rule 25 and token GE_OP resolved as reduce.
Conflict in state 58 between rule 25 and token EQ_OP resolved as reduce.
Conflict in state 58 between rule 25 and token NE_OP resolved as reduce.
Conflict in state 58 between rule 25 and token AND_OP resolved as reduce.
Conflict in state 58 between rule 25 and token OR_OP resolved as reduce.
Conflict in state 58 between rule 25 and token '|' resolved as reduce.
Conflict in state 58 between rule 25 and token '^' resolved as reduce.
Conflict in state 58 between rule 25 and token '&' resolved as reduce.
Conflict in state 58 between rule 25 and token '<' resolved as reduce.
Conflict in state 58 between rule 25 and token '>' resolved as reduce.
Conflict in state 58 between rule 25 and token '+' resolved as reduce.
Conflict in state 58 between rule 25 and token '-' resolved as reduce.
Conflict in state 58 between rule 25 and token '*' resolved as reduce.
Conflict in state 58 between rule 25 and token '/' resolved as reduce.
Conflict in state 58 between rule 25 and token '%' resolved as reduce.
Conflict in state 58 between rule 25 and token '[' resolved as shift.
Conflict in state 58 between rule 25 and token ':' resolved as shift.
Conflict in state 59 between rule 24 and token '.' resolved as shift.
Conflict in state 59 between rule 24 and token PTR_OP resolved as shift.
Conflict in state 59 between rule 24 and token LEFT_OP resolved as reduce.
Conflict in state 59 between rule 24 and token RIGHT_OP resolved as reduce.
Conflict in state 59 between rule 24 and token LE_OP resolved as reduce.
Conflict in state 59 between rule 24 and token GE_OP resolved as reduce.
Conflict in state 59 between rule 24 and token EQ_OP resolved as reduce.
Conflict in state 59 between rule 24 and token NE_OP resolved as reduce.
Conflict in state 59 between rule 24 and token AND_OP resolved as reduce.
Conflict in state 59 between rule 24 and token OR_OP resolved as reduce.
Conflict in state 59 between rule 24 and token '|' resolved as reduce.
Conflict in state 59 between rule 24 and token '^' resolved as reduce.
Conflict in state 59 between rule 24 and token '&' resolved as reduce.
Conflict in state 59 between rule 24 and token '<' resolved as reduce.
Conflict in state 59 between rule 24 and token '>' resolved as reduce.
Conflict in state 59 between rule 24 and token '+' resolved as reduce.
Conflict in state 59 between rule 24 and token '-' resolved as reduce.
Conflict in state 59 between rule 24 and token '*' resolved as reduce.
Conflict in state 59 between rule 24 and token '/' resolved as reduce.
Conflict in state 59 between rule 24 and token '%' resolved as reduce.
Conflict in state 59 between rule 24 and token '[' resolved as shift.
Conflict in state 59 between rule 24 and token ':' resolved as shift.
Conflict in state 90 between rule 26 and token '.' resolved as reduce.
Conflict in state 90 between rule 26 and token PTR_OP resolved as reduce.
Conflict in state 90 between rule 26 and token LEFT_OP resolved as reduce.
Conflict in state 90 between rule 26 and token RIGHT_OP resolved as reduce.
Conflict in state 90 between rule 26 and token LE_OP resolved as reduce.
Conflict in state 90 between rule 26 and token GE_OP resolved as reduce.
Conflict in state 90 between rule 26 and token EQ_OP resolved as reduce.
Conflict in state 90 between rule 26 and token NE_OP resolved as reduce.
Conflict in state 90 between rule 26 and token AND_OP resolved as reduce.
Conflict in state 90 between rule 26 and token OR_OP resolved as reduce.
Conflict in state 90 between rule 26 and token '|' resolved as reduce.
Conflict in state 90 between rule 26 and token '^' resolved as reduce.
Conflict in state 90 between rule 26 and token '&' resolved as reduce.
Conflict in state 90 between rule 26 and token '<' resolved as reduce.
Conflict in state 90 between rule 26 and token '>' resolved as reduce.
Conflict in state 90 between rule 26 and token '+' resolved as reduce.
Conflict in state 90 between rule 26 and token '-' resolved as reduce.
Conflict in state 90 between rule 26 and token '*' resolved as reduce.
Conflict in state 90 between rule 26 and token '/' resolved as reduce.
Conflict in state 90 between rule 26 and token '%' resolved as reduce.
Conflict in state 90 between rule 26 and token '[' resolved as reduce.
Conflict in state 90 between rule 26 and token ':' resolved as shift.
Conflict in state 103 between rule 85 and token '*' resolved as reduce.
Conflict in state 103 between rule 85 and token '(' resolved as shift.
Conflict in state 105 between rule 94 and token '*' resolved as reduce.
Conflict in state 105 between rule 94 and token '(' resolved as reduce.
Conflict in state 107 between rule 97 and token '[' resolved as shift.
Conflict in state 107 between rule 97 and token '(' resolved as shift.
Conflict in state 113 between rule 37 and token '.' resolved as shift.
Conflict in state 113 between rule 37 and token PTR_OP resolved as shift.
Conflict in state 113 between rule 37 and token LEFT_OP resolved as reduce.
Conflict in state 113 between rule 37 and token RIGHT_OP resolved as reduce.
Conflict in state 113 between rule 37 and token LE_OP resolved as reduce.
Conflict in state 113 between rule 37 and token GE_OP resolved as reduce.
Conflict in state 113 between rule 37 and token EQ_OP resolved as reduce.
Conflict in state 113 between rule 37 and token NE_OP resolved as reduce.
Conflict in state 113 between rule 37 and token AND_OP resolved as reduce.
Conflict in state 113 between rule 37 and token OR_OP resolved as reduce.
Conflict in state 113 between rule 37 and token '|' resolved as reduce.
Conflict in state 113 between rule 37 and token '^' resolved as reduce.
Conflict in state 113 between rule 37 and token '&' resolved as reduce.
Conflict in state 113 between rule 37 and token '<' resolved as reduce.
Conflict in state 113 between rule 37 and token '>' resolved as reduce.
Conflict in state 113 between rule 37 and token '+' resolved as shift.
Conflict in state 113 between rule 37 and token '-' resolved as shift.
Conflict in state 113 between rule 37 and token '*' resolved as shift.
Conflict in state 113 between rule 37 and token '/' resolved as shift.
Conflict in state 113 between rule 37 and token '%' resolved as shift.
Conflict in state 113 between rule 37 and token '[' resolved as shift.
Conflict in state 113 between rule 37 and token ':' resolved as shift.
Conflict in state 114 between rule 38 and token '.' resolved as shift.
Conflict in state 114 between rule 38 and token PTR_OP resolved as shift.
Conflict in state 114 between rule 38 and token LEFT_OP resolved as reduce.
Conflict in state 114 between rule 38 and token RIGHT_OP resolved as reduce.
Conflict in state 114 between rule 38 and token LE_OP resolved as reduce.
Conflict in state 114 between rule 38 and token GE_OP resolved as reduce.
Conflict in state 114 between rule 38 and token EQ_OP resolved as reduce.
Conflict in state 114 between rule 38 and token NE_OP resolved as reduce.
Conflict in state 114 between rule 38 and token AND_OP resolved as reduce.
Conflict in state 114 between rule 38 and token OR_OP resolved as reduce.
Conflict in state 114 between rule 38 and token '|' resolved as reduce.
Conflict in state 114 between rule 38 and token '^' resolved as reduce.
Conflict in state 114 between rule 38 and token '&' resolved as reduce.
Conflict in state 114 between rule 38 and token '<' resolved as reduce.
Conflict in state 114 between rule 38 and token '>' resolved as reduce.
Conflict in state 114 between rule 38 and token '+' resolved as shift.
Conflict in state 114 between rule 38 and token '-' resolved as shift.
Conflict in state 114 between rule 38 and token '*' resolved as shift.
Conflict in state 114 between rule 38 and token '/' resolved as shift.
Conflict in state 114 between rule 38 and token '%' resolved as shift.
Conflict in state 114 between rule 38 and token '[' resolved as shift.
Conflict in state 114 between rule 38 and token ':' resolved as shift.
Conflict in state 115 between rule 41 and token '.' resolved as shift.
Conflict in state 115 between rule 41 and token PTR_OP resolved as shift.
Conflict in state 115 between rule 41 and token LEFT_OP resolved as shift.
Conflict in state 115 between rule 41 and token RIGHT_OP resolved as shift.
Conflict in state 115 between rule 41 and token LE_OP resolved as reduce.
Conflict in state 115 between rule 41 and token GE_OP resolved as reduce.
Conflict in state 115 between rule 41 and token EQ_OP resolved as reduce.
Conflict in state 115 between rule 41 and token NE_OP resolved as reduce.
Conflict in state 115 between rule 41 and token AND_OP resolved as reduce.
Conflict in state 115 between rule 41 and token OR_OP resolved as reduce.
Conflict in state 115 between rule 41 and token '|' resolved as reduce.
Conflict in state 115 between rule 41 and token '^' resolved as reduce.
Conflict in state 115 between rule 41 and token '&' resolved as reduce.
Conflict in state 115 between rule 41 and token '<' resolved as reduce.
Conflict in state 115 between rule 41 and token '>' resolved as reduce.
Conflict in state 115 between rule 41 and token '+' resolved as shift.
Conflict in state 115 between rule 41 and token '-' resolved as shift.
Conflict in state 115 between rule 41 and token '*' resolved as shift.
Conflict in state 115 between rule 41 and token '/' resolved as shift.
Conflict in state 115 between rule 41 and token '%' resolved as shift.
Conflict in state 115 between rule 41 and token '[' resolved as shift.
Conflict in state 115 between rule 41 and token ':' resolved as shift.
Conflict in state 116 between rule 42 and token '.' resolved as shift.
Conflict in state 116 between rule 42 and token PTR_OP resolved as shift.
Conflict in state 116 between rule 42 and token LEFT_OP resolved as shift.
Conflict in state 116 between rule 42 and token RIGHT_OP resolved as shift.
Conflict in state 116 between rule 42 and token LE_OP resolved as reduce.
Conflict in state 116 between rule 42 and token GE_OP resolved as reduce.
Conflict in state 116 between rule 42 and token EQ_OP resolved as reduce.
Conflict in state 116 between rule 42 and token NE_OP resolved as reduce.
Conflict in state 116 between rule 42 and token AND_OP resolved as reduce.
Conflict in state 116 between rule 42 and token OR_OP resolved as reduce.
Conflict in state 116 between rule 42 and token '|' resolved as reduce.
Conflict in state 116 between rule 42 and token '^' resolved as reduce.
Conflict in state 116 between rule 42 and token '&' resolved as reduce.
Conflict in state 116 between rule 42 and token '<' resolved as reduce.
Conflict in state 116 between rule 42 and token '>' resolved as reduce.
Conflict in state 116 between rule 42 and token '+' resolved as shift.
Conflict in state 116 between rule 42 and token '-' resolved as shift.
Conflict in state 116 between rule 42 and token '*' resolved as shift.
Conflict in state 116 between rule 42 and token '/' resolved as shift.
Conflict in state 116 between rule 42 and token '%' resolved as shift.
Conflict in state 116 between rule 42 and token '[' resolved as shift.
Conflict in state 116 between rule 42 and token ':' resolved as shift.
Conflict in state 117 between rule 43 and token '.' resolved as shift.
Conflict in state 117 between rule 43 and token PTR_OP resolved as shift.
Conflict in state 117 between rule 43 and token LEFT_OP resolved as shift.
Conflict in state 117 between rule 43 and token RIGHT_OP resolved as shift.
Conflict in state 117 between rule 43 and token LE_OP resolved as shift.
Conflict in state 117 between rule 43 and token GE_OP resolved as shift.
Conflict in state 117 between rule 43 and token EQ_OP resolved as reduce.
Conflict in state 117 between rule 43 and token NE_OP resolved as reduce.
Conflict in state 117 between rule 43 and token AND_OP resolved as reduce.
Conflict in state 117 between rule 43 and token OR_OP resolved as reduce.
Conflict in state 117 between rule 43 and token '|' resolved as reduce.
Conflict in state 117 between rule 43 and token '^' resolved as reduce.
Conflict in state 117 between rule 43 and token '&' resolved as reduce.
Conflict in state 117 between rule 43 and token '<' resolved as shift.
Conflict in state 117 between rule 43 and token '>' resolved as shift.
Conflict in state 117 between rule 43 and token '+' resolved as shift.
Conflict in state 117 between rule 43 and token '-' resolved as shift.
Conflict in state 117 between rule 43 and token '*' resolved as shift.
Conflict in state 117 between rule 43 and token '/' resolved as shift.
Conflict in state 117 between rule 43 and token '%' resolved as shift.
Conflict in state 117 between rule 43 and token '[' resolved as shift.
Conflict in state 117 between rule 43 and token ':' resolved as shift.
Conflict in state 118 between rule 44 and token '.' resolved as shift.
Conflict in state 118 between rule 44 and token PTR_OP resolved as shift.
Conflict in state 118 between rule 44 and token LEFT_OP resolved as shift.
Conflict in state 118 between rule 44 and token RIGHT_OP resolved as shift.
Conflict in state 118 between rule 44 and token LE_OP resolved as shift.
Conflict in state 118 between rule 44 and token GE_OP resolved as shift.
Conflict in state 118 between rule 44 and token EQ_OP resolved as reduce.
Conflict in state 118 between rule 44 and token NE_OP resolved as reduce.
Conflict in state 118 between rule 44 and token AND_OP resolved as reduce.
Conflict in state 118 between rule 44 and token OR_OP resolved as reduce.
Conflict in state 118 between rule 44 and token '|' resolved as reduce.
Conflict in state 118 between rule 44 and token '^' resolved as reduce.
Conflict in state 118 between rule 44 and token '&' resolved as reduce.
Conflict in state 118 between rule 44 and token '<' resolved as shift.
Conflict in state 118 between rule 44 and token '>' resolved as shift.
Conflict in state 118 between rule 44 and token '+' resolved as shift.
Conflict in state 118 between rule 44 and token '-' resolved as shift.
Conflict in state 118 between rule 44 and token '*' resolved as shift.
Conflict in state 118 between rule 44 and token '/' resolved as shift.
Conflict in state 118 between rule 44 and token '%' resolved as shift.
Conflict in state 118 between rule 44 and token '[' resolved as shift.
Conflict in state 118 between rule 44 and token ':' resolved as shift.
Conflict in state 121 between rule 47 and token '.' resolved as shift.
Conflict in state 121 between rule 47 and token PTR_OP resolved as shift.
Conflict in state 121 between rule 47 and token LEFT_OP resolved as shift.
Conflict in state 121 between rule 47 and token RIGHT_OP resolved as shift.
Conflict in state 121 between rule 47 and token LE_OP resolved as shift.
Conflict in state 121 between rule 47 and token GE_OP resolved as shift.
Conflict in state 121 between rule 47 and token EQ_OP resolved as shift.
Conflict in state 121 between rule 47 and token NE_OP resolved as shift.
Conflict in state 121 between rule 47 and token AND_OP resolved as reduce.
Conflict in state 121 between rule 47 and token OR_OP resolved as reduce.
Conflict in state 121 between rule 47 and token '|' resolved as reduce.
Conflict in state 121 between rule 47 and token '^' resolved as shift.
Conflict in state 121 between rule 47 and token '&' resolved as shift.
Conflict in state 121 between rule 47 and token '<' resolved as shift.
Conflict in state 121 between rule 47 and token '>' resolved as shift.
Conflict in state 121 between rule 47 and token '+' resolved as shift.
Conflict in state 121 between rule 47 and token '-' resolved as shift.
Conflict in state 121 between rule 47 and token '*' resolved as shift.
Conflict in state 121 between rule 47 and token '/' resolved as shift.
Conflict in state 121 between rule 47 and token '%' resolved as shift.
Conflict in state 121 between rule 47 and token '[' resolved as shift.
Conflict in state 121 between rule 47 and token ':' resolved as shift.
Conflict in state 122 between rule 46 and token '.' resolved as shift.
Conflict in state 122 between rule 46 and token PTR_OP resolved as shift.
Conflict in state 122 between rule 46 and token LEFT_OP resolved as shift.
Conflict in state 122 between rule 46 and token RIGHT_OP resolved as shift.
Conflict in state 122 between rule 46 and token LE_OP resolved as shift.
Conflict in state 122 between rule 46 and token GE_OP resolved as shift.
Conflict in state 122 between rule 46 and token EQ_OP resolved as shift.
Conflict in state 122 between rule 46 and token NE_OP resolved as shift.
Conflict in state 122 between rule 46 and token AND_OP resolved as reduce.
Conflict in state 122 between rule 46 and token OR_OP resolved as reduce.
Conflict in state 122 between rule 46 and token '|' resolved as reduce.
Conflict in state 122 between rule 46 and token '^' resolved as reduce.
Conflict in state 122 between rule 46 and token '&' resolved as shift.
Conflict in state 122 between rule 46 and token '<' resolved as shift.
Conflict in state 122 between rule 46 and token '>' resolved as shift.
Conflict in state 122 between rule 46 and token '+' resolved as shift.
Conflict in state 122 between rule 46 and token '-' resolved as shift.
Conflict in state 122 between rule 46 and token '*' resolved as shift.
Conflict in state 122 between rule 46 and token '/' resolved as shift.
Conflict in state 122 between rule 46 and token '%' resolved as shift.
Conflict in state 122 between rule 46 and token '[' resolved as shift.
Conflict in state 122 between rule 46 and token ':' resolved as shift.
Conflict in state 123 between rule 45 and token '.' resolved as shift.
Conflict in state 123 between rule 45 and token PTR_OP resolved as shift.
Conflict in state 123 between rule 45 and token LEFT_OP resolved as shift.
Conflict in state 123 between rule 45 and token RIGHT_OP resolved as shift.
Conflict in state 123 between rule 45 and token LE_OP resolved as shift.
Conflict in state 123 between rule 45 and token GE_OP resolved as shift.
Conflict in state 123 between rule 45 and token EQ_OP resolved as shift.
Conflict in state 123 between rule 45 and token NE_OP resolved as shift.
Conflict in state 123 between rule 45 and token AND_OP resolved as reduce.
Conflict in state 123 between rule 45 and token OR_OP resolved as reduce.
Conflict in state 123 between rule 45 and token '|' resolved as reduce.
Conflict in state 123 between rule 45 and token '^' resolved as reduce.
Conflict in state 123 between rule 45 and token '&' resolved as reduce.
Conflict in state 123 between rule 45 and token '<' resolved as shift.
Conflict in state 123 between rule 45 and token '>' resolved as shift.
Conflict in state 123 between rule 45 and token '+' resolved as shift.
Conflict in state 123 between rule 45 and token '-' resolved as shift.
Conflict in state 123 between rule 45 and token '*' resolved as shift.
Conflict in state 123 between rule 45 and token '/' resolved as shift.
Conflict in state 123 between rule 45 and token '%' resolved as shift.
Conflict in state 123 between rule 45 and token '[' resolved as shift.
Conflict in state 123 between rule 45 and token ':' resolved as shift.
Conflict in state 124 between rule 39 and token '.' resolved as shift.
Conflict in state 124 between rule 39 and token PTR_OP resolved as shift.
Conflict in state 124 between rule 39 and token LEFT_OP resolved as shift.
Conflict in state 124 between rule 39 and token RIGHT_OP resolved as shift.
Conflict in state 124 between rule 39 and token LE_OP resolved as reduce.
Conflict in state 124 between rule 39 and token GE_OP resolved as reduce.
Conflict in state 124 between rule 39 and token EQ_OP resolved as reduce.
Conflict in state 124 between rule 39 and token NE_OP resolved as reduce.
Conflict in state 124 between rule 39 and token AND_OP resolved as reduce.
Conflict in state 124 between rule 39 and token OR_OP resolved as reduce.
Conflict in state 124 between rule 39 and token '|' resolved as reduce.
Conflict in state 124 between rule 39 and token '^' resolved as reduce.
Conflict in state 124 between rule 39 and token '&' resolved as reduce.
Conflict in state 124 between rule 39 and token '<' resolved as reduce.
Conflict in state 124 between rule 39 and token '>' resolved as reduce.
Conflict in state 124 between rule 39 and token '+' resolved as shift.
Conflict in state 124 between rule 39 and token '-' resolved as shift.
Conflict in state 124 between rule 39 and token '*' resolved as shift.
Conflict in state 124 between rule 39 and token '/' resolved as shift.
Conflict in state 124 between rule 39 and token '%' resolved as shift.
Conflict in state 124 between rule 39 and token '[' resolved as shift.
Conflict in state 124 between rule 39 and token ':' resolved as shift.
Conflict in state 125 between rule 40 and token '.' resolved as shift.
Conflict in state 125 between rule 40 and token PTR_OP resolved as shift.
Conflict in state 125 between rule 40 and token LEFT_OP resolved as shift.
Conflict in state 125 between rule 40 and token RIGHT_OP resolved as shift.
Conflict in state 125 between rule 40 and token LE_OP resolved as reduce.
Conflict in state 125 between rule 40 and token GE_OP resolved as reduce.
Conflict in state 125 between rule 40 and token EQ_OP resolved as reduce.
Conflict in state 125 between rule 40 and token NE_OP resolved as reduce.
Conflict in state 125 between rule 40 and token AND_OP resolved as reduce.
Conflict in state 125 between rule 40 and token OR_OP resolved as reduce.
Conflict in state 125 between rule 40 and token '|' resolved as reduce.
Conflict in state 125 between rule 40 and token '^' resolved as reduce.
Conflict in state 125 between rule 40 and token '&' resolved as reduce.
Conflict in state 125 between rule 40 and token '<' resolved as reduce.
Conflict in state 125 between rule 40 and token '>' resolved as reduce.
Conflict in state 125 between rule 40 and token '+' resolved as shift.
Conflict in state 125 between rule 40 and token '-' resolved as shift.
Conflict in state 125 between rule 40 and token '*' resolved as shift.
Conflict in state 125 between rule 40 and token '/' resolved as shift.
Conflict in state 125 between rule 40 and token '%' resolved as shift.
Conflict in state 125 between rule 40 and token '[' resolved as shift.
Conflict in state 125 between rule 40 and token ':' resolved as shift.
Conflict in state 126 between rule 35 and token '.' resolved as shift.
Conflict in state 126 between rule 35 and token PTR_OP resolved as shift.
Conflict in state 126 between rule 35 and token LEFT_OP resolved as reduce.
Conflict in state 126 between rule 35 and token RIGHT_OP resolved as reduce.
Conflict in state 126 between rule 35 and token LE_OP resolved as reduce.
Conflict in state 126 between rule 35 and token GE_OP resolved as reduce.
Conflict in state 126 between rule 35 and token EQ_OP resolved as reduce.
Conflict in state 126 between rule 35 and token NE_OP resolved as reduce.
Conflict in state 126 between rule 35 and token AND_OP resolved as reduce.
Conflict in state 126 between rule 35 and token OR_OP resolved as reduce.
Conflict in state 126 between rule 35 and token '|' resolved as reduce.
Conflict in state 126 between rule 35 and token '^' resolved as reduce.
Conflict in state 126 between rule 35 and token '&' resolved as reduce.
Conflict in state 126 between rule 35 and token '<' resolved as reduce.
Conflict in state 126 between rule 35 and token '>' resolved as reduce.
Conflict in state 126 between rule 35 and token '+' resolved as reduce.
Conflict in state 126 between rule 35 and token '-' resolved as reduce.
Conflict in state 126 between rule 35 and token '*' resolved as shift.
Conflict in state 126 between rule 35 and token '/' resolved as shift.
Conflict in state 126 between rule 35 and token '%' resolved as shift.
Conflict in state 126 between rule 35 and token '[' resolved as shift.
Conflict in state 126 between rule 35 and token ':' resolved as shift.
Conflict in state 127 between rule 36 and token '.' resolved as shift.
Conflict in state 127 between rule 36 and token PTR_OP resolved as shift.
Conflict in state 127 between rule 36 and token LEFT_OP resolved as reduce.
Conflict in state 127 between rule 36 and token RIGHT_OP resolved as reduce.
Conflict in state 127 between rule 36 and token LE_OP resolved as reduce.
Conflict in state 127 between rule 36 and token GE_OP resolved as reduce.
Conflict in state 127 between rule 36 and token EQ_OP resolved as reduce.
Conflict in state 127 between rule 36 and token NE_OP resolved as reduce.
Conflict in state 127 between rule 36 and token AND_OP resolved as reduce.
Conflict in state 127 between rule 36 and token OR_OP resolved as reduce.
Conflict in state 127 between rule 36 and token '|' resolved as reduce.
Conflict in state 127 between rule 36 and token '^' resolved as reduce.
Conflict in state 127 between rule 36 and token '&' resolved as reduce.
Conflict in state 127 between rule 36 and token '<' resolved as reduce.
Conflict in state 127 between rule 36 and token '>' resolved as reduce.
Conflict in state 127 between rule 36 and token '+' resolved as reduce.
Conflict in state 127 between rule 36 and token '-' resolved as reduce.
Conflict in state 127 between rule 36 and token '*' resolved as shift.
Conflict in state 127 between rule 36 and token '/' resolved as shift.
Conflict in state 127 between rule 36 and token '%' resolved as shift.
Conflict in state 127 between rule 36 and token '[' resolved as shift.
Conflict in state 127 between rule 36 and token ':' resolved as shift.
Conflict in state 128 between rule 32 and token '.' resolved as shift.
Conflict in state 128 between rule 32 and token PTR_OP resolved as shift.
Conflict in state 128 between rule 32 and token LEFT_OP resolved as reduce.
Conflict in state 128 between rule 32 and token RIGHT_OP resolved as reduce.
Conflict in state 128 between rule 32 and token LE_OP resolved as reduce.
Conflict in state 128 between rule 32 and token GE_OP resolved as reduce.
Conflict in state 128 between rule 32 and token EQ_OP resolved as reduce.
Conflict in state 128 between rule 32 and token NE_OP resolved as reduce.
Conflict in state 128 between rule 32 and token AND_OP resolved as reduce.
Conflict in state 128 between rule 32 and token OR_OP resolved as reduce.
Conflict in state 128 between rule 32 and token '|' resolved as reduce.
Conflict in state 128 between rule 32 and token '^' resolved as reduce.
Conflict in state 128 between rule 32 and token '&' resolved as reduce.
Conflict in state 128 between rule 32 and token '<' resolved as reduce.
Conflict in state 128 between rule 32 and token '>' resolved as reduce.
Conflict in state 128 between rule 32 and token '+' resolved as reduce.
Conflict in state 128 between rule 32 and token '-' resolved as reduce.
Conflict in state 128 between rule 32 and token '*' resolved as reduce.
Conflict in state 128 between rule 32 and token '/' resolved as reduce.
Conflict in state 128 between rule 32 and token '%' resolved as reduce.
Conflict in state 128 between rule 32 and token '[' resolved as shift.
Conflict in state 128 between rule 32 and token ':' resolved as shift.
Conflict in state 129 between rule 33 and token '.' resolved as shift.
Conflict in state 129 between rule 33 and token PTR_OP resolved as shift.
Conflict in state 129 between rule 33 and token LEFT_OP resolved as reduce.
Conflict in state 129 between rule 33 and token RIGHT_OP resolved as reduce.
Conflict in state 129 between rule 33 and token LE_OP resolved as reduce.
Conflict in state 129 between rule 33 and token GE_OP resolved as reduce.
Conflict in state 129 between rule 33 and token EQ_OP resolved as reduce.
Conflict in state 129 between rule 33 and token NE_OP resolved as reduce.
Conflict in state 129 between rule 33 and token AND_OP resolved as reduce.
Conflict in state 129 between rule 33 and token OR_OP resolved as reduce.
Conflict in state 129 between rule 33 and token '|' resolved as reduce.
Conflict in state 129 between rule 33 and token '^' resolved as reduce.
Conflict in state 129 between rule 33 and token '&' resolved as reduce.
Conflict in state 129 between rule 33 and token '<' resolved as reduce.
Conflict in state 129 between rule 33 and token '>' resolved as reduce.
Conflict in state 129 between rule 33 and token '+' resolved as reduce.
Conflict in state 129 between rule 33 and token '-' resolved as reduce.
Conflict in state 129 between rule 33 and token '*' resolved as reduce.
Conflict in state 129 between rule 33 and token '/' resolved as reduce.
Conflict in state 129 between rule 33 and token '%' resolved as reduce.
Conflict in state 129 between rule 33 and token '[' resolved as shift.
Conflict in state 129 between rule 33 and token ':' resolved as shift.
Conflict in state 130 between rule 34 and token '.' resolved as shift.
Conflict in state 130 between rule 34 and token PTR_OP resolved as shift.
Conflict in state 130 between rule 34 and token LEFT_OP resolved as reduce.
Conflict in state 130 between rule 34 and token RIGHT_OP resolved as reduce.
Conflict in state 130 between rule 34 and token LE_OP resolved as reduce.
Conflict in state 130 between rule 34 and token GE_OP resolved as reduce.
Conflict in state 130 between rule 34 and token EQ_OP resolved as reduce.
Conflict in state 130 between rule 34 and token NE_OP resolved as reduce.
Conflict in state 130 between rule 34 and token AND_OP resolved as reduce.
Conflict in state 130 between rule 34 and token OR_OP resolved as reduce.
Conflict in state 130 between rule 34 and token '|' resolved as reduce.
Conflict in state 130 between rule 34 and token '^' resolved as reduce.
Conflict in state 130 between rule 34 and token '&' resolved as reduce.
Conflict in state 130 between rule 34 and token '<' resolved as reduce.
Conflict in state 130 between rule 34 and token '>' resolved as reduce.
Conflict in state 130 between rule 34 and token '+' resolved as reduce.
Conflict in state 130 between rule 34 and token '-' resolved as reduce.
Conflict in state 130 between rule 34 and token '*' resolved as reduce.
Conflict in state 130 between rule 34 and token '/' resolved as reduce.
Conflict in state 130 between rule 34 and token '%' resolved as reduce.
Conflict in state 130 between rule 34 and token '[' resolved as shift.
Conflict in state 130 between rule 34 and token ':' resolved as shift.
Conflict in state 132 between rule 52 and token '.' resolved as reduce.
Conflict in state 132 between rule 52 and token PTR_OP resolved as reduce.
Conflict in state 132 between rule 52 and token LEFT_OP resolved as reduce.
Conflict in state 132 between rule 52 and token RIGHT_OP resolved as reduce.
Conflict in state 132 between rule 52 and token LE_OP resolved as reduce.
Conflict in state 132 between rule 52 and token GE_OP resolved as reduce.
Conflict in state 132 between rule 52 and token EQ_OP resolved as reduce.
Conflict in state 132 between rule 52 and token NE_OP resolved as reduce.
Conflict in state 132 between rule 52 and token AND_OP resolved as reduce.
Conflict in state 132 between rule 52 and token OR_OP resolved as reduce.
Conflict in state 132 between rule 52 and token '|' resolved as reduce.
Conflict in state 132 between rule 52 and token '^' resolved as reduce.
Conflict in state 132 between rule 52 and token '&' resolved as reduce.
Conflict in state 132 between rule 52 and token '<' resolved as reduce.
Conflict in state 132 between rule 52 and token '>' resolved as reduce.
Conflict in state 132 between rule 52 and token '+' resolved as reduce.
Conflict in state 132 between rule 52 and token '-' resolved as reduce.
Conflict in state 132 between rule 52 and token '*' resolved as reduce.
Conflict in state 132 between rule 52 and token '/' resolved as reduce.
Conflict in state 132 between rule 52 and token '%' resolved as reduce.
Conflict in state 132 between rule 52 and token '[' resolved as reduce.
Conflict in state 132 between rule 52 and token ':' resolved as an error.
Conflict in state 134 between rule 31 and token '.' resolved as shift.
Conflict in state 134 between rule 31 and token PTR_OP resolved as shift.
Conflict in state 134 between rule 31 and token LEFT_OP resolved as reduce.
Conflict in state 134 between rule 31 and token RIGHT_OP resolved as reduce.
Conflict in state 134 between rule 31 and token LE_OP resolved as reduce.
Conflict in state 134 between rule 31 and token GE_OP resolved as reduce.
Conflict in state 134 between rule 31 and token EQ_OP resolved as reduce.
Conflict in state 134 between rule 31 and token NE_OP resolved as reduce.
Conflict in state 134 between rule 31 and token AND_OP resolved as reduce.
Conflict in state 134 between rule 31 and token OR_OP resolved as reduce.
Conflict in state 134 between rule 31 and token '|' resolved as reduce.
Conflict in state 134 between rule 31 and token '^' resolved as reduce.
Conflict in state 134 between rule 31 and token '&' resolved as reduce.
Conflict in state 134 between rule 31 and token '<' resolved as reduce.
Conflict in state 134 between rule 31 and token '>' resolved as reduce.
Conflict in state 134 between rule 31 and token '+' resolved as reduce.
Conflict in state 134 between rule 31 and token '-' resolved as reduce.
Conflict in state 134 between rule 31 and token '*' resolved as reduce.
Conflict in state 134 between rule 31 and token '/' resolved as reduce.
Conflict in state 134 between rule 31 and token '%' resolved as reduce.
Conflict in state 134 between rule 31 and token '[' resolved as shift.
Conflict in state 134 between rule 31 and token ':' resolved as shift.
Conflict in state 147 between rule 96 and token '[' resolved as shift.
Conflict in state 147 between rule 96 and token '(' resolved as shift.
Conflict in state 152 between rule 49 and token '.' resolved as shift.
Conflict in state 152 between rule 49 and token PTR_OP resolved as shift.
Conflict in state 152 between rule 49 and token LEFT_OP resolved as shift.
Conflict in state 152 between rule 49 and token RIGHT_OP resolved as shift.
Conflict in state 152 between rule 49 and token LE_OP resolved as shift.
Conflict in state 152 between rule 49 and token GE_OP resolved as shift.
Conflict in state 152 between rule 49 and token EQ_OP resolved as shift.
Conflict in state 152 between rule 49 and token NE_OP resolved as shift.
Conflict in state 152 between rule 49 and token AND_OP resolved as reduce.
Conflict in state 152 between rule 49 and token OR_OP resolved as reduce.
Conflict in state 152 between rule 49 and token '|' resolved as shift.
Conflict in state 152 between rule 49 and token '^' resolved as shift.
Conflict in state 152 between rule 49 and token '&' resolved as shift.
Conflict in state 152 between rule 49 and token '<' resolved as shift.
Conflict in state 152 between rule 49 and token '>' resolved as shift.
Conflict in state 152 between rule 49 and token '+' resolved as shift.
Conflict in state 152 between rule 49 and token '-' resolved as shift.
Conflict in state 152 between rule 49 and token '*' resolved as shift.
Conflict in state 152 between rule 49 and token '/' resolved as shift.
Conflict in state 152 between rule 49 and token '%' resolved as shift.
Conflict in state 152 between rule 49 and token '[' resolved as shift.
Conflict in state 152 between rule 49 and token ':' resolved as shift.
Conflict in state 153 between rule 51 and token '.' resolved as shift.
Conflict in state 153 between rule 51 and token PTR_OP resolved as shift.
Conflict in state 153 between rule 51 and token LEFT_OP resolved as shift.
Conflict in state 153 between rule 51 and token RIGHT_OP resolved as shift.
Conflict in state 153 between rule 51 and token LE_OP resolved as shift.
Conflict in state 153 between rule 51 and token GE_OP resolved as shift.
Conflict in state 153 between rule 51 and token EQ_OP resolved as shift.
Conflict in state 153 between rule 51 and token NE_OP resolved as shift.
Conflict in state 153 between rule 51 and token AND_OP resolved as shift.
Conflict in state 153 between rule 51 and token OR_OP resolved as reduce.
Conflict in state 153 between rule 51 and token '|' resolved as shift.
Conflict in state 153 between rule 51 and token '^' resolved as shift.
Conflict in state 153 between rule 51 and token '&' resolved as shift.
Conflict in state 153 between rule 51 and token '<' resolved as shift.
Conflict in state 153 between rule 51 and token '>' resolved as shift.
Conflict in state 153 between rule 51 and token '+' resolved as shift.
Conflict in state 153 between rule 51 and token '-' resolved as shift.
Conflict in state 153 between rule 51 and token '*' resolved as shift.
Conflict in state 153 between rule 51 and token '/' resolved as shift.
Conflict in state 153 between rule 51 and token '%' resolved as shift.
Conflict in state 153 between rule 51 and token '[' resolved as shift.
Conflict in state 153 between rule 51 and token ':' resolved as shift.
Conflict in state 156 between rule 27 and token '&' resolved as reduce.
Conflict in state 156 between rule 27 and token '+' resolved as reduce.
Conflict in state 156 between rule 27 and token '-' resolved as reduce.
Conflict in state 156 between rule 27 and token '*' resolved as reduce.

Grammar
rule 1    expr.return -> top.expr
rule 2    expr.return -> error
rule 3    top.expr -> type.specifier expr
rule 4    top.expr -> top.expr ',' expr
rule 5    top.expr -> top.expr '#' expr
rule 6    top.expr -> expr
rule 7    expr -> ADDRESS
rule 8    expr -> SYM
rule 9    expr -> HANDLE expr
rule 10   expr -> VHIST
rule 11   expr -> CONSTANT
rule 12   expr -> STRING_LITERAL
rule 13   expr -> '(' top.expr ')'
rule 14   expr -> '{' top.expr '}'
rule 15   expr -> expr '[' expr ']'
rule 16   expr -> expr '[' expr RANGE expr ']'
rule 17   struct.op -> '.'
rule 18   struct.op -> PTR_OP
rule 19   expr -> expr struct.op
rule 20   expr -> '&' expr
rule 21   expr -> '*' expr
rule 22   expr -> '+' expr
rule 23   expr -> '-' expr
rule 24   expr -> '~' expr
rule 25   expr -> '!' expr
rule 26   expr -> sizeof expr
rule 27   expr -> sizeof '(' type.name ')'
rule 28   expr -> LHANDLE expr
rule 29   expr -> VHANDLE expr
rule 30   sizeof -> SIZEOF
rule 31   expr -> '(' type.name ')' expr
rule 32   expr -> expr '*' expr
rule 33   expr -> expr '/' expr
rule 34   expr -> expr '%' expr
rule 35   expr -> expr '+' expr
rule 36   expr -> expr '-' expr
rule 37   expr -> expr LEFT_OP expr
rule 38   expr -> expr RIGHT_OP expr
rule 39   expr -> expr '<' expr
rule 40   expr -> expr '>' expr
rule 41   expr -> expr LE_OP expr
rule 42   expr -> expr GE_OP expr
rule 43   expr -> expr EQ_OP expr
rule 44   expr -> expr NE_OP expr
rule 45   expr -> expr '&' expr
rule 46   expr -> expr '^' expr
rule 47   expr -> expr '|' expr
rule 48   @1 ->		/* empty */
rule 49   expr -> expr AND_OP @1 expr
rule 50   @2 ->		/* empty */
rule 51   expr -> expr OR_OP @2 expr
rule 52   expr -> expr ':' expr
rule 53   type.modifier -> CHAR
rule 54   type.modifier -> SHORT
rule 55   type.modifier -> INT
rule 56   type.modifier -> LONG
rule 57   type.modifier -> SIGNED
rule 58   type.modifier -> FLOAT
rule 59   type.modifier -> DOUBLE
rule 60   type.modifier -> UNSIGNED
rule 61   type.modifier -> VOID
rule 62   type.modifier -> CONST
rule 63   type.modifier -> VOLATILE
rule 64   type.modifier -> WORD
rule 65   type.modifier -> BYTE
rule 66   type.modifier -> DWORD
rule 67   type.modifier -> SWORD
rule 68   type.modifier -> SBYTE
rule 69   type.modifier -> SDWORD
rule 70   type.modifier.list -> type.modifier
rule 71   type.modifier.list -> type.modifier.list type.modifier
rule 72   type.name -> type.specifier abstract.declarator
rule 73   type.specifier -> type.modifier.list
rule 74   type.specifier -> TYPE
rule 75   type.specifier -> LPTR
rule 76   type.specifier -> FPTR
rule 77   type.specifier -> NPTR
rule 78   type.specifier -> SPTR
rule 79   type.specifier -> OPTR
rule 80   type.specifier -> HPTR
rule 81   type.specifier -> VPTR
rule 82   type.specifier -> VFPTR
rule 83   abstract.declarator ->		/* empty */
rule 84   abstract.declarator -> abstract.declarator2
rule 85   ptr.decl -> '*'
rule 86   ptr.decl -> DA_LMEM '*'
rule 87   ptr.decl -> DA_FAR '*'
rule 88   ptr.decl -> DA_NEAR '*'
rule 89   ptr.decl -> DA_SEG '*'
rule 90   ptr.decl -> DA_OBJECT '*'
rule 91   ptr.decl -> DA_HANDLE '*'
rule 92   ptr.decl -> DA_VIRTUAL '*'
rule 93   ptr.decl -> DA_VM '*'
rule 94   open.paren -> '('
rule 95   abstract.declarator2 -> open.paren abstract.declarator2 ')'
rule 96   abstract.declarator2 -> ptr.decl abstract.declarator2
rule 97   abstract.declarator2 -> ptr.decl
rule 98   abstract.declarator2 -> abstract.declarator2 open.paren ')'
rule 99   abstract.declarator2 -> open.paren ')'
rule 100  abstract.declarator2 -> abstract.declarator2 '[' ']'
rule 101  abstract.declarator2 -> abstract.declarator2 '[' expr ']'
rule 102  abstract.declarator2 -> '[' ']'
rule 103  abstract.declarator2 -> '[' expr ']'

Terminals, with rules where they appear

$ (-1)
'!' (33) 25
'#' (35) 5
'%' (37) 34
'&' (38) 20 45
'(' (40) 13 27 31 94
')' (41) 13 27 31 95 98 99
'*' (42) 21 32 85 86 87 88 89 90 91 92 93
'+' (43) 22 35
',' (44) 4
'-' (45) 23 36
'.' (46) 17
'/' (47) 33
':' (58) 52
'<' (60) 39
'>' (62) 40
'[' (91) 15 16 100 101 102 103
']' (93) 15 16 100 101 102 103
'^' (94) 46
'{' (123) 14
'|' (124) 47
'}' (125) 14
'~' (126) 24
error (256) 2
CONSTANT (258) 11
STRING_LITERAL (259) 12
PTR_OP (260) 18
VHIST (261) 10
ADDRESS (262) 7
TYPE (263) 74
SYM (264) 8
SIZEOF (265) 30
HANDLE (266) 9
VHANDLE (267) 29
LHANDLE (268) 28
LEFT_OP (269) 37
RIGHT_OP (270) 38
LE_OP (271) 41
GE_OP (272) 42
EQ_OP (273) 43
NE_OP (274) 44
AND_OP (275) 49
OR_OP (276) 51
CHAR (277) 53
SHORT (278) 54
INT (279) 55
LONG (280) 56
SIGNED (281) 57
UNSIGNED (282) 60
FLOAT (283) 58
DOUBLE (284) 59
CONST (285) 62
VOLATILE (286) 63
VOID (287) 61
WORD (288) 64
BYTE (289) 65
DWORD (290) 66
SWORD (291) 67
SBYTE (292) 68
SDWORD (293) 69
DA_NEAR (294) 88
DA_FAR (295) 87
DA_SEG (296) 89
DA_LMEM (297) 86
DA_HANDLE (298) 91
DA_OBJECT (299) 90
DA_VM (300) 93
DA_VIRTUAL (301) 92
FPTR (302) 76
NPTR (303) 77
SPTR (304) 78
LPTR (305) 75
HPTR (306) 80
OPTR (307) 79
VPTR (308) 81
VFPTR (309) 82
RANGE (310) 16
NOT_QUITE_UNARY (311)
INC_OP (312)
DEC_OP (313)
UNARY (314)
HIGHEST (315)

Nonterminals, with rules where they appear

expr.return (83)
    on left: 1 2
top.expr (84)
    on left: 3 4 5 6, on right: 1 4 5 13 14
expr (85)
    on left: 7 8 9 10 11 12 13 14 15 16 19 20 21 22 23 24 25 26 27
    28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 51
    52, on right: 3 4 5 6 9 15 16 19 20 21 22 23 24 25 26 28 29 31
    32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 51 52 101 103
struct.op (86)
    on left: 17 18, on right: 19
sizeof (87)
    on left: 30, on right: 26 27
@1 (88)
    on left: 48, on right: 49
@2 (89)
    on left: 50, on right: 51
type.modifier (90)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69,
    on right: 70 71
type.modifier.list (91)
    on left: 70 71, on right: 71 73
type.name (92)
    on left: 72, on right: 27 31
type.specifier (93)
    on left: 73 74 75 76 77 78 79 80 81 82, on right: 3 72
abstract.declarator (94)
    on left: 83 84, on right: 72
ptr.decl (95)
    on left: 85 86 87 88 89 90 91 92 93, on right: 96 97
open.paren (96)
    on left: 94, on right: 95 98 99
abstract.declarator2 (97)
    on left: 95 96 97 98 99 100 101 102 103, on right: 84 95 96 98
    100 101


state 0

    error	shift, and go to state 1
    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    TYPE	shift, and go to state 6
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28
    FPTR	shift, and go to state 29
    NPTR	shift, and go to state 30
    SPTR	shift, and go to state 31
    LPTR	shift, and go to state 32
    HPTR	shift, and go to state 33
    OPTR	shift, and go to state 34
    VPTR	shift, and go to state 35
    VFPTR	shift, and go to state 36
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr.return	go to state 165
    top.expr	go to state 45
    expr	go to state 46
    sizeof	go to state 47
    type.modifier	go to state 48
    type.modifier.list	go to state 49
    type.specifier	go to state 50



state 1

    expr.return  ->  error .   (rule 2)

    $default	reduce using rule 2 (expr.return)



state 2

    expr  ->  CONSTANT .   (rule 11)

    $default	reduce using rule 11 (expr)



state 3

    expr  ->  STRING_LITERAL .   (rule 12)

    $default	reduce using rule 12 (expr)



state 4

    expr  ->  VHIST .   (rule 10)

    $default	reduce using rule 10 (expr)



state 5

    expr  ->  ADDRESS .   (rule 7)

    $default	reduce using rule 7 (expr)



state 6

    type.specifier  ->  TYPE .   (rule 74)

    $default	reduce using rule 74 (type.specifier)



state 7

    expr  ->  SYM .   (rule 8)

    $default	reduce using rule 8 (expr)



state 8

    sizeof  ->  SIZEOF .   (rule 30)

    $default	reduce using rule 30 (sizeof)



state 9

    expr  ->  HANDLE . expr   (rule 9)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 51
    sizeof	go to state 47



state 10

    expr  ->  VHANDLE . expr   (rule 29)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 52
    sizeof	go to state 47



state 11

    expr  ->  LHANDLE . expr   (rule 28)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 53
    sizeof	go to state 47



state 12

    type.modifier  ->  CHAR .   (rule 53)

    $default	reduce using rule 53 (type.modifier)



state 13

    type.modifier  ->  SHORT .   (rule 54)

    $default	reduce using rule 54 (type.modifier)



state 14

    type.modifier  ->  INT .   (rule 55)

    $default	reduce using rule 55 (type.modifier)



state 15

    type.modifier  ->  LONG .   (rule 56)

    $default	reduce using rule 56 (type.modifier)



state 16

    type.modifier  ->  SIGNED .   (rule 57)

    $default	reduce using rule 57 (type.modifier)



state 17

    type.modifier  ->  UNSIGNED .   (rule 60)

    $default	reduce using rule 60 (type.modifier)



state 18

    type.modifier  ->  FLOAT .   (rule 58)

    $default	reduce using rule 58 (type.modifier)



state 19

    type.modifier  ->  DOUBLE .   (rule 59)

    $default	reduce using rule 59 (type.modifier)



state 20

    type.modifier  ->  CONST .   (rule 62)

    $default	reduce using rule 62 (type.modifier)



state 21

    type.modifier  ->  VOLATILE .   (rule 63)

    $default	reduce using rule 63 (type.modifier)



state 22

    type.modifier  ->  VOID .   (rule 61)

    $default	reduce using rule 61 (type.modifier)



state 23

    type.modifier  ->  WORD .   (rule 64)

    $default	reduce using rule 64 (type.modifier)



state 24

    type.modifier  ->  BYTE .   (rule 65)

    $default	reduce using rule 65 (type.modifier)



state 25

    type.modifier  ->  DWORD .   (rule 66)

    $default	reduce using rule 66 (type.modifier)



state 26

    type.modifier  ->  SWORD .   (rule 67)

    $default	reduce using rule 67 (type.modifier)



state 27

    type.modifier  ->  SBYTE .   (rule 68)

    $default	reduce using rule 68 (type.modifier)



state 28

    type.modifier  ->  SDWORD .   (rule 69)

    $default	reduce using rule 69 (type.modifier)



state 29

    type.specifier  ->  FPTR .   (rule 76)

    $default	reduce using rule 76 (type.specifier)



state 30

    type.specifier  ->  NPTR .   (rule 77)

    $default	reduce using rule 77 (type.specifier)



state 31

    type.specifier  ->  SPTR .   (rule 78)

    $default	reduce using rule 78 (type.specifier)



state 32

    type.specifier  ->  LPTR .   (rule 75)

    $default	reduce using rule 75 (type.specifier)



state 33

    type.specifier  ->  HPTR .   (rule 80)

    $default	reduce using rule 80 (type.specifier)



state 34

    type.specifier  ->  OPTR .   (rule 79)

    $default	reduce using rule 79 (type.specifier)



state 35

    type.specifier  ->  VPTR .   (rule 81)

    $default	reduce using rule 81 (type.specifier)



state 36

    type.specifier  ->  VFPTR .   (rule 82)

    $default	reduce using rule 82 (type.specifier)



state 37

    expr  ->  '&' . expr   (rule 20)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 54
    sizeof	go to state 47



state 38

    expr  ->  '+' . expr   (rule 22)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 55
    sizeof	go to state 47



state 39

    expr  ->  '-' . expr   (rule 23)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 56
    sizeof	go to state 47



state 40

    expr  ->  '*' . expr   (rule 21)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 57
    sizeof	go to state 47



state 41

    expr  ->  '!' . expr   (rule 25)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 58
    sizeof	go to state 47



state 42

    expr  ->  '~' . expr   (rule 24)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 59
    sizeof	go to state 47



state 43

    expr  ->  '(' . top.expr ')'   (rule 13)
    expr  ->  '(' . type.name ')' expr   (rule 31)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    TYPE	shift, and go to state 6
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28
    FPTR	shift, and go to state 29
    NPTR	shift, and go to state 30
    SPTR	shift, and go to state 31
    LPTR	shift, and go to state 32
    HPTR	shift, and go to state 33
    OPTR	shift, and go to state 34
    VPTR	shift, and go to state 35
    VFPTR	shift, and go to state 36
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    top.expr	go to state 60
    expr	go to state 46
    sizeof	go to state 47
    type.modifier	go to state 48
    type.modifier.list	go to state 49
    type.name	go to state 61
    type.specifier	go to state 62



state 44

    expr  ->  '{' . top.expr '}'   (rule 14)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    TYPE	shift, and go to state 6
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28
    FPTR	shift, and go to state 29
    NPTR	shift, and go to state 30
    SPTR	shift, and go to state 31
    LPTR	shift, and go to state 32
    HPTR	shift, and go to state 33
    OPTR	shift, and go to state 34
    VPTR	shift, and go to state 35
    VFPTR	shift, and go to state 36
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    top.expr	go to state 63
    expr	go to state 46
    sizeof	go to state 47
    type.modifier	go to state 48
    type.modifier.list	go to state 49
    type.specifier	go to state 50



state 45

    expr.return  ->  top.expr .   (rule 1)
    top.expr  ->  top.expr . ',' expr   (rule 4)
    top.expr  ->  top.expr . '#' expr   (rule 5)

    ',' 	shift, and go to state 64
    '#' 	shift, and go to state 65

    $default	reduce using rule 1 (expr.return)



state 46

    top.expr  ->  expr .   (rule 6)
    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 6 (top.expr)

    struct.op	go to state 88



state 47

    expr  ->  sizeof . expr   (rule 26)
    expr  ->  sizeof . '(' type.name ')'   (rule 27)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 89
    '{' 	shift, and go to state 44

    expr	go to state 90
    sizeof	go to state 47



state 48

    type.modifier.list  ->  type.modifier .   (rule 70)

    $default	reduce using rule 70 (type.modifier.list)



state 49

    type.modifier.list  ->  type.modifier.list . type.modifier   (rule 71)
    type.specifier  ->  type.modifier.list .   (rule 73)

    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28

    $default	reduce using rule 73 (type.specifier)

    type.modifier	go to state 91



state 50

    top.expr  ->  type.specifier . expr   (rule 3)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 92
    sizeof	go to state 47



state 51

    expr  ->  HANDLE expr .   (rule 9)
    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)


    $default	reduce using rule 9 (expr)

    struct.op	go to state 88



state 52

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  VHANDLE expr .   (rule 29)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)


    $default	reduce using rule 29 (expr)

    struct.op	go to state 88



state 53

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  LHANDLE expr .   (rule 28)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)


    $default	reduce using rule 28 (expr)

    struct.op	go to state 88



state 54

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '&' expr .   (rule 20)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 20 (expr)

    struct.op	go to state 88



state 55

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '+' expr .   (rule 22)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 22 (expr)

    struct.op	go to state 88



state 56

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '-' expr .   (rule 23)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 23 (expr)

    struct.op	go to state 88



state 57

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '*' expr .   (rule 21)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 21 (expr)

    struct.op	go to state 88



state 58

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '!' expr .   (rule 25)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 25 (expr)

    struct.op	go to state 88



state 59

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '~' expr .   (rule 24)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 24 (expr)

    struct.op	go to state 88



state 60

    top.expr  ->  top.expr . ',' expr   (rule 4)
    top.expr  ->  top.expr . '#' expr   (rule 5)
    expr  ->  '(' top.expr . ')'   (rule 13)

    ',' 	shift, and go to state 64
    '#' 	shift, and go to state 65
    ')' 	shift, and go to state 93



state 61

    expr  ->  '(' type.name . ')' expr   (rule 31)

    ')' 	shift, and go to state 94



state 62

    top.expr  ->  type.specifier . expr   (rule 3)
    type.name  ->  type.specifier . abstract.declarator   (rule 72)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    DA_NEAR	shift, and go to state 95
    DA_FAR	shift, and go to state 96
    DA_SEG	shift, and go to state 97
    DA_LMEM	shift, and go to state 98
    DA_HANDLE	shift, and go to state 99
    DA_OBJECT	shift, and go to state 100
    DA_VM	shift, and go to state 101
    DA_VIRTUAL	shift, and go to state 102
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 103
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '[' 	shift, and go to state 104
    '(' 	shift, and go to state 105
    '{' 	shift, and go to state 44

    $default	reduce using rule 83 (abstract.declarator)

    expr	go to state 92
    sizeof	go to state 47
    abstract.declarator	go to state 106
    ptr.decl	go to state 107
    open.paren	go to state 108
    abstract.declarator2	go to state 109



state 63

    top.expr  ->  top.expr . ',' expr   (rule 4)
    top.expr  ->  top.expr . '#' expr   (rule 5)
    expr  ->  '{' top.expr . '}'   (rule 14)

    ',' 	shift, and go to state 64
    '#' 	shift, and go to state 65
    '}' 	shift, and go to state 110



state 64

    top.expr  ->  top.expr ',' . expr   (rule 4)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 111
    sizeof	go to state 47



state 65

    top.expr  ->  top.expr '#' . expr   (rule 5)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 112
    sizeof	go to state 47



state 66

    struct.op  ->  '.' .   (rule 17)

    $default	reduce using rule 17 (struct.op)



state 67

    struct.op  ->  PTR_OP .   (rule 18)

    $default	reduce using rule 18 (struct.op)



state 68

    expr  ->  expr LEFT_OP . expr   (rule 37)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 113
    sizeof	go to state 47



state 69

    expr  ->  expr RIGHT_OP . expr   (rule 38)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 114
    sizeof	go to state 47



state 70

    expr  ->  expr LE_OP . expr   (rule 41)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 115
    sizeof	go to state 47



state 71

    expr  ->  expr GE_OP . expr   (rule 42)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 116
    sizeof	go to state 47



state 72

    expr  ->  expr EQ_OP . expr   (rule 43)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 117
    sizeof	go to state 47



state 73

    expr  ->  expr NE_OP . expr   (rule 44)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 118
    sizeof	go to state 47



state 74

    expr  ->  expr AND_OP . @1 expr   (rule 49)

    $default	reduce using rule 48 (@1)

    @1  	go to state 119



state 75

    expr  ->  expr OR_OP . @2 expr   (rule 51)

    $default	reduce using rule 50 (@2)

    @2  	go to state 120



state 76

    expr  ->  expr '|' . expr   (rule 47)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 121
    sizeof	go to state 47



state 77

    expr  ->  expr '^' . expr   (rule 46)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 122
    sizeof	go to state 47



state 78

    expr  ->  expr '&' . expr   (rule 45)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 123
    sizeof	go to state 47



state 79

    expr  ->  expr '<' . expr   (rule 39)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 124
    sizeof	go to state 47



state 80

    expr  ->  expr '>' . expr   (rule 40)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 125
    sizeof	go to state 47



state 81

    expr  ->  expr '+' . expr   (rule 35)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 126
    sizeof	go to state 47



state 82

    expr  ->  expr '-' . expr   (rule 36)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 127
    sizeof	go to state 47



state 83

    expr  ->  expr '*' . expr   (rule 32)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 128
    sizeof	go to state 47



state 84

    expr  ->  expr '/' . expr   (rule 33)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 129
    sizeof	go to state 47



state 85

    expr  ->  expr '%' . expr   (rule 34)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 130
    sizeof	go to state 47



state 86

    expr  ->  expr '[' . expr ']'   (rule 15)
    expr  ->  expr '[' . expr RANGE expr ']'   (rule 16)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 131
    sizeof	go to state 47



state 87

    expr  ->  expr ':' . expr   (rule 52)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 132
    sizeof	go to state 47



state 88

    expr  ->  expr struct.op .   (rule 19)

    $default	reduce using rule 19 (expr)



state 89

    expr  ->  '(' . top.expr ')'   (rule 13)
    expr  ->  sizeof '(' . type.name ')'   (rule 27)
    expr  ->  '(' . type.name ')' expr   (rule 31)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    TYPE	shift, and go to state 6
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28
    FPTR	shift, and go to state 29
    NPTR	shift, and go to state 30
    SPTR	shift, and go to state 31
    LPTR	shift, and go to state 32
    HPTR	shift, and go to state 33
    OPTR	shift, and go to state 34
    VPTR	shift, and go to state 35
    VFPTR	shift, and go to state 36
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    top.expr	go to state 60
    expr	go to state 46
    sizeof	go to state 47
    type.modifier	go to state 48
    type.modifier.list	go to state 49
    type.name	go to state 133
    type.specifier	go to state 62



state 90

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  sizeof expr .   (rule 26)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    ':' 	shift, and go to state 87

    $default	reduce using rule 26 (expr)

    struct.op	go to state 88



state 91

    type.modifier.list  ->  type.modifier.list type.modifier .   (rule 71)

    $default	reduce using rule 71 (type.modifier.list)



state 92

    top.expr  ->  type.specifier expr .   (rule 3)
    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 3 (top.expr)

    struct.op	go to state 88



state 93

    expr  ->  '(' top.expr ')' .   (rule 13)

    $default	reduce using rule 13 (expr)



state 94

    expr  ->  '(' type.name ')' . expr   (rule 31)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 134
    sizeof	go to state 47



state 95

    ptr.decl  ->  DA_NEAR . '*'   (rule 88)

    '*' 	shift, and go to state 135



state 96

    ptr.decl  ->  DA_FAR . '*'   (rule 87)

    '*' 	shift, and go to state 136



state 97

    ptr.decl  ->  DA_SEG . '*'   (rule 89)

    '*' 	shift, and go to state 137



state 98

    ptr.decl  ->  DA_LMEM . '*'   (rule 86)

    '*' 	shift, and go to state 138



state 99

    ptr.decl  ->  DA_HANDLE . '*'   (rule 91)

    '*' 	shift, and go to state 139



state 100

    ptr.decl  ->  DA_OBJECT . '*'   (rule 90)

    '*' 	shift, and go to state 140



state 101

    ptr.decl  ->  DA_VM . '*'   (rule 93)

    '*' 	shift, and go to state 141



state 102

    ptr.decl  ->  DA_VIRTUAL . '*'   (rule 92)

    '*' 	shift, and go to state 142



state 103

    expr  ->  '*' . expr   (rule 21)
    ptr.decl  ->  '*' .   (rule 85)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    $default	reduce using rule 85 (ptr.decl)

    expr	go to state 57
    sizeof	go to state 47



state 104

    abstract.declarator2  ->  '[' . ']'   (rule 102)
    abstract.declarator2  ->  '[' . expr ']'   (rule 103)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    ']' 	shift, and go to state 143
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 144
    sizeof	go to state 47



state 105

    expr  ->  '(' . top.expr ')'   (rule 13)
    expr  ->  '(' . type.name ')' expr   (rule 31)
    open.paren  ->  '(' .   (rule 94)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    TYPE	shift, and go to state 6
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    CHAR	shift, and go to state 12
    SHORT	shift, and go to state 13
    INT 	shift, and go to state 14
    LONG	shift, and go to state 15
    SIGNED	shift, and go to state 16
    UNSIGNED	shift, and go to state 17
    FLOAT	shift, and go to state 18
    DOUBLE	shift, and go to state 19
    CONST	shift, and go to state 20
    VOLATILE	shift, and go to state 21
    VOID	shift, and go to state 22
    WORD	shift, and go to state 23
    BYTE	shift, and go to state 24
    DWORD	shift, and go to state 25
    SWORD	shift, and go to state 26
    SBYTE	shift, and go to state 27
    SDWORD	shift, and go to state 28
    FPTR	shift, and go to state 29
    NPTR	shift, and go to state 30
    SPTR	shift, and go to state 31
    LPTR	shift, and go to state 32
    HPTR	shift, and go to state 33
    OPTR	shift, and go to state 34
    VPTR	shift, and go to state 35
    VFPTR	shift, and go to state 36
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '{' 	shift, and go to state 44

    $default	reduce using rule 94 (open.paren)

    top.expr	go to state 60
    expr	go to state 46
    sizeof	go to state 47
    type.modifier	go to state 48
    type.modifier.list	go to state 49
    type.name	go to state 61
    type.specifier	go to state 62



state 106

    type.name  ->  type.specifier abstract.declarator .   (rule 72)

    $default	reduce using rule 72 (type.name)



state 107

    abstract.declarator2  ->  ptr.decl . abstract.declarator2   (rule 96)
    abstract.declarator2  ->  ptr.decl .   (rule 97)

    DA_NEAR	shift, and go to state 95
    DA_FAR	shift, and go to state 96
    DA_SEG	shift, and go to state 97
    DA_LMEM	shift, and go to state 98
    DA_HANDLE	shift, and go to state 99
    DA_OBJECT	shift, and go to state 100
    DA_VM	shift, and go to state 101
    DA_VIRTUAL	shift, and go to state 102
    '*' 	shift, and go to state 145
    '[' 	shift, and go to state 104
    '(' 	shift, and go to state 146

    $default	reduce using rule 97 (abstract.declarator2)

    ptr.decl	go to state 107
    open.paren	go to state 108
    abstract.declarator2	go to state 147



state 108

    abstract.declarator2  ->  open.paren . abstract.declarator2 ')'   (rule 95)
    abstract.declarator2  ->  open.paren . ')'   (rule 99)

    DA_NEAR	shift, and go to state 95
    DA_FAR	shift, and go to state 96
    DA_SEG	shift, and go to state 97
    DA_LMEM	shift, and go to state 98
    DA_HANDLE	shift, and go to state 99
    DA_OBJECT	shift, and go to state 100
    DA_VM	shift, and go to state 101
    DA_VIRTUAL	shift, and go to state 102
    '*' 	shift, and go to state 145
    '[' 	shift, and go to state 104
    '(' 	shift, and go to state 146
    ')' 	shift, and go to state 148

    ptr.decl	go to state 107
    open.paren	go to state 108
    abstract.declarator2	go to state 149



state 109

    abstract.declarator  ->  abstract.declarator2 .   (rule 84)
    abstract.declarator2  ->  abstract.declarator2 . open.paren ')'   (rule 98)
    abstract.declarator2  ->  abstract.declarator2 . '[' ']'   (rule 100)
    abstract.declarator2  ->  abstract.declarator2 . '[' expr ']'   (rule 101)

    '[' 	shift, and go to state 150
    '(' 	shift, and go to state 146

    $default	reduce using rule 84 (abstract.declarator)

    open.paren	go to state 151



state 110

    expr  ->  '{' top.expr '}' .   (rule 14)

    $default	reduce using rule 14 (expr)



state 111

    top.expr  ->  top.expr ',' expr .   (rule 4)
    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 4 (top.expr)

    struct.op	go to state 88



state 112

    top.expr  ->  top.expr '#' expr .   (rule 5)
    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 5 (top.expr)

    struct.op	go to state 88



state 113

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr LEFT_OP expr .   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 37 (expr)

    struct.op	go to state 88



state 114

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr RIGHT_OP expr .   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 38 (expr)

    struct.op	go to state 88



state 115

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr LE_OP expr .   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 41 (expr)

    struct.op	go to state 88



state 116

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr GE_OP expr .   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 42 (expr)

    struct.op	go to state 88



state 117

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr EQ_OP expr .   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 43 (expr)

    struct.op	go to state 88



state 118

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr NE_OP expr .   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 44 (expr)

    struct.op	go to state 88



state 119

    expr  ->  expr AND_OP @1 . expr   (rule 49)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 152
    sizeof	go to state 47



state 120

    expr  ->  expr OR_OP @2 . expr   (rule 51)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 153
    sizeof	go to state 47



state 121

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr '|' expr .   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 47 (expr)

    struct.op	go to state 88



state 122

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr '^' expr .   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 46 (expr)

    struct.op	go to state 88



state 123

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr '&' expr .   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 45 (expr)

    struct.op	go to state 88



state 124

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr '<' expr .   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 39 (expr)

    struct.op	go to state 88



state 125

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr '>' expr .   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 40 (expr)

    struct.op	go to state 88



state 126

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr '+' expr .   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 35 (expr)

    struct.op	go to state 88



state 127

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr '-' expr .   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 36 (expr)

    struct.op	go to state 88



state 128

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr '*' expr .   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 32 (expr)

    struct.op	go to state 88



state 129

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr '/' expr .   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 33 (expr)

    struct.op	go to state 88



state 130

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr '%' expr .   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 34 (expr)

    struct.op	go to state 88



state 131

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr '[' expr . ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr '[' expr . RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    RANGE	shift, and go to state 154
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ']' 	shift, and go to state 155
    ':' 	shift, and go to state 87

    struct.op	go to state 88



state 132

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)
    expr  ->  expr ':' expr .   (rule 52)


    ':' 	error (nonassociative)

    $default	reduce using rule 52 (expr)

    struct.op	go to state 88



state 133

    expr  ->  sizeof '(' type.name . ')'   (rule 27)
    expr  ->  '(' type.name . ')' expr   (rule 31)

    ')' 	shift, and go to state 156



state 134

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  '(' type.name ')' expr .   (rule 31)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 31 (expr)

    struct.op	go to state 88



state 135

    ptr.decl  ->  DA_NEAR '*' .   (rule 88)

    $default	reduce using rule 88 (ptr.decl)



state 136

    ptr.decl  ->  DA_FAR '*' .   (rule 87)

    $default	reduce using rule 87 (ptr.decl)



state 137

    ptr.decl  ->  DA_SEG '*' .   (rule 89)

    $default	reduce using rule 89 (ptr.decl)



state 138

    ptr.decl  ->  DA_LMEM '*' .   (rule 86)

    $default	reduce using rule 86 (ptr.decl)



state 139

    ptr.decl  ->  DA_HANDLE '*' .   (rule 91)

    $default	reduce using rule 91 (ptr.decl)



state 140

    ptr.decl  ->  DA_OBJECT '*' .   (rule 90)

    $default	reduce using rule 90 (ptr.decl)



state 141

    ptr.decl  ->  DA_VM '*' .   (rule 93)

    $default	reduce using rule 93 (ptr.decl)



state 142

    ptr.decl  ->  DA_VIRTUAL '*' .   (rule 92)

    $default	reduce using rule 92 (ptr.decl)



state 143

    abstract.declarator2  ->  '[' ']' .   (rule 102)

    $default	reduce using rule 102 (abstract.declarator2)



state 144

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)
    abstract.declarator2  ->  '[' expr . ']'   (rule 103)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ']' 	shift, and go to state 157
    ':' 	shift, and go to state 87

    struct.op	go to state 88



state 145

    ptr.decl  ->  '*' .   (rule 85)

    $default	reduce using rule 85 (ptr.decl)



state 146

    open.paren  ->  '(' .   (rule 94)

    $default	reduce using rule 94 (open.paren)



state 147

    abstract.declarator2  ->  ptr.decl abstract.declarator2 .   (rule 96)
    abstract.declarator2  ->  abstract.declarator2 . open.paren ')'   (rule 98)
    abstract.declarator2  ->  abstract.declarator2 . '[' ']'   (rule 100)
    abstract.declarator2  ->  abstract.declarator2 . '[' expr ']'   (rule 101)

    '[' 	shift, and go to state 150
    '(' 	shift, and go to state 146

    $default	reduce using rule 96 (abstract.declarator2)

    open.paren	go to state 151



state 148

    abstract.declarator2  ->  open.paren ')' .   (rule 99)

    $default	reduce using rule 99 (abstract.declarator2)



state 149

    abstract.declarator2  ->  open.paren abstract.declarator2 . ')'   (rule 95)
    abstract.declarator2  ->  abstract.declarator2 . open.paren ')'   (rule 98)
    abstract.declarator2  ->  abstract.declarator2 . '[' ']'   (rule 100)
    abstract.declarator2  ->  abstract.declarator2 . '[' expr ']'   (rule 101)

    '[' 	shift, and go to state 150
    '(' 	shift, and go to state 146
    ')' 	shift, and go to state 158

    open.paren	go to state 151



state 150

    abstract.declarator2  ->  abstract.declarator2 '[' . ']'   (rule 100)
    abstract.declarator2  ->  abstract.declarator2 '[' . expr ']'   (rule 101)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    ']' 	shift, and go to state 159
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 160
    sizeof	go to state 47



state 151

    abstract.declarator2  ->  abstract.declarator2 open.paren . ')'   (rule 98)

    ')' 	shift, and go to state 161



state 152

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr AND_OP @1 expr .   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 49 (expr)

    struct.op	go to state 88



state 153

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr OR_OP @2 expr .   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ':' 	shift, and go to state 87

    $default	reduce using rule 51 (expr)

    struct.op	go to state 88



state 154

    expr  ->  expr '[' expr RANGE . expr ']'   (rule 16)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '&' 	shift, and go to state 37
    '+' 	shift, and go to state 38
    '-' 	shift, and go to state 39
    '*' 	shift, and go to state 40
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    expr	go to state 162
    sizeof	go to state 47



state 155

    expr  ->  expr '[' expr ']' .   (rule 15)

    $default	reduce using rule 15 (expr)



state 156

    expr  ->  sizeof '(' type.name ')' .   (rule 27)
    expr  ->  '(' type.name ')' . expr   (rule 31)

    CONSTANT	shift, and go to state 2
    STRING_LITERAL	shift, and go to state 3
    VHIST	shift, and go to state 4
    ADDRESS	shift, and go to state 5
    SYM 	shift, and go to state 7
    SIZEOF	shift, and go to state 8
    HANDLE	shift, and go to state 9
    VHANDLE	shift, and go to state 10
    LHANDLE	shift, and go to state 11
    '!' 	shift, and go to state 41
    '~' 	shift, and go to state 42
    '(' 	shift, and go to state 43
    '{' 	shift, and go to state 44

    $default	reduce using rule 27 (expr)

    expr	go to state 134
    sizeof	go to state 47



state 157

    abstract.declarator2  ->  '[' expr ']' .   (rule 103)

    $default	reduce using rule 103 (abstract.declarator2)



state 158

    abstract.declarator2  ->  open.paren abstract.declarator2 ')' .   (rule 95)

    $default	reduce using rule 95 (abstract.declarator2)



state 159

    abstract.declarator2  ->  abstract.declarator2 '[' ']' .   (rule 100)

    $default	reduce using rule 100 (abstract.declarator2)



state 160

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)
    abstract.declarator2  ->  abstract.declarator2 '[' expr . ']'   (rule 101)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ']' 	shift, and go to state 163
    ':' 	shift, and go to state 87

    struct.op	go to state 88



state 161

    abstract.declarator2  ->  abstract.declarator2 open.paren ')' .   (rule 98)

    $default	reduce using rule 98 (abstract.declarator2)



state 162

    expr  ->  expr . '[' expr ']'   (rule 15)
    expr  ->  expr . '[' expr RANGE expr ']'   (rule 16)
    expr  ->  expr '[' expr RANGE expr . ']'   (rule 16)
    expr  ->  expr . struct.op   (rule 19)
    expr  ->  expr . '*' expr   (rule 32)
    expr  ->  expr . '/' expr   (rule 33)
    expr  ->  expr . '%' expr   (rule 34)
    expr  ->  expr . '+' expr   (rule 35)
    expr  ->  expr . '-' expr   (rule 36)
    expr  ->  expr . LEFT_OP expr   (rule 37)
    expr  ->  expr . RIGHT_OP expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . LE_OP expr   (rule 41)
    expr  ->  expr . GE_OP expr   (rule 42)
    expr  ->  expr . EQ_OP expr   (rule 43)
    expr  ->  expr . NE_OP expr   (rule 44)
    expr  ->  expr . '&' expr   (rule 45)
    expr  ->  expr . '^' expr   (rule 46)
    expr  ->  expr . '|' expr   (rule 47)
    expr  ->  expr . AND_OP @1 expr   (rule 49)
    expr  ->  expr . OR_OP @2 expr   (rule 51)
    expr  ->  expr . ':' expr   (rule 52)

    '.' 	shift, and go to state 66
    PTR_OP	shift, and go to state 67
    LEFT_OP	shift, and go to state 68
    RIGHT_OP	shift, and go to state 69
    LE_OP	shift, and go to state 70
    GE_OP	shift, and go to state 71
    EQ_OP	shift, and go to state 72
    NE_OP	shift, and go to state 73
    AND_OP	shift, and go to state 74
    OR_OP	shift, and go to state 75
    '|' 	shift, and go to state 76
    '^' 	shift, and go to state 77
    '&' 	shift, and go to state 78
    '<' 	shift, and go to state 79
    '>' 	shift, and go to state 80
    '+' 	shift, and go to state 81
    '-' 	shift, and go to state 82
    '*' 	shift, and go to state 83
    '/' 	shift, and go to state 84
    '%' 	shift, and go to state 85
    '[' 	shift, and go to state 86
    ']' 	shift, and go to state 164
    ':' 	shift, and go to state 87

    struct.op	go to state 88



state 163

    abstract.declarator2  ->  abstract.declarator2 '[' expr ']' .   (rule 101)

    $default	reduce using rule 101 (abstract.declarator2)



state 164

    expr  ->  expr '[' expr RANGE expr ']' .   (rule 16)

    $default	reduce using rule 16 (expr)



state 165

    $   	go to state 166



state 166

    $   	go to state 167



state 167

    $default	accept
