
    Prints out all the "open" files
FEATURE IN PROGRESS -- Not yet ready for prime time
zap [<patient>]
    "Zaps" an application as best possible.

Synopsis: returns 1 if the kernel has its own internal symbol table
")
{
word    hasTable;
char    result[4];
Synopsis: returns the name of an internal kernel routine that contain the 
address if there is one, otherwise it returns {}
")
{
GeosAddr	addr;
Synopsis: returns the name of an internal kernel routine that contain the 
address if there is one, otherwise it returns {}
")
{
word    offset;
char    addr[16];
Use it like this:
    Help fix up trashed documents.

_print <expression>
    Print the value of an expression.

abort [<frame num>]
abort [<function>]
    Abort code execution up through a given frame or routine.  By "abort",
    we me "do not execute".  This can be quite dangerous, as semaphores may
    not be ungrabbed, blocks not unlocked, flags not cleared, etc., leaving
    the state of objects, & if executing system code, possibly the system
    itself screwed up.  This command should only be used when the only
    alternative is to to detach (i.e. in a fatalerror) as a way to possibly
    prolong the usefullness of the debugging session.

abortframe <frame-token>
    Aborts code execution up through a particular stack frame.  As no code is
    executed, the registers may be in a garbaged state.

addr-parse <addr> [<addr-only> [<frame>]]
    This command parses the address expression into its components, returning
    a list {<handle> <offset> <type>} as its value.

addr-parse <addr> [<addr-only> [<frame>]]
    This command parses the address expression into its components, returning
    a list {<handle> <offset> <type>} as its value.

addr-preprocess <addr> <seg-var> <off-var> [<frame>]
    Preprocesses an address expression into a form that is easier to manipulate
    and faster to reparse.

addr-with-obj-flag <address>
    This is a utility routine that can be used by any command that
    deals with objects where the user may reasonably want to operate on the
    leaf object of one of the hierarchies, or the windowed object under the
    mouse. It can be given one of a set of flags that indicate where to find
    the address of the object on which to operate.

alias [<name> [<body>]]
    This is a short-cut to allow you to make commands you commonly type easier
    to use, and to quickly define simple new commands.

alloc <file>
    Produces a raw dump of all the memory Swat is currently using, giving
    the type of data in each block and the address from which the allocation
    routine was called.

alloclog <command>
    Manage a log of global allocations that have not yet been freed.

analbrk [-hmlif] 	    Set one or more groups of tally breakpoints
analbrk clear   	    Delete all breakpoints set with this command
analbrk reset   	    Reset the counters for all breakpoints set
with this command.
    Sets groups of tally breakpoints for various areas in the system.

antifreeze <patient>
antifreeze :<n>
antifreeze <patient>:<n>
antifreeze <id>
    Antifreezing a thread makes a thread the most-favored thread in the entire
    system. Should it ever be runnable, it will be the thread the system
    runs, possibly to the detriment of other threads...

antithaw <patient>
antithaw :<n>
antithaw <patient>:<n>
antithaw <id>
    Thawing a thread restores its priority to what it was before the thread
    was given antifreeze.

appobj [<patient>]
    Returns the address of the GenApplication object for the given patient,
    or the current one if you give no patient.

apropos <string>
    Search the list of commands and command help for all entries containing
    <string>. Lists each command and its synopsis.

ascii
    Display an ascii table in both decimal and hex.

    Print out the glossary definition of 'regexp', which is a
    regular expression (or just a word) that is given to SED.

aset <array-name> <index> <value>
    Allows you to treat a list stored in a variable as an array, setting
    arbitrary elements of that array to arbitrary values.

assign <addr> <value>
    Use this command to alter simple data stored in memory, or the value of
    a register. The data can be no larger than a dword.

assoc <list> <key>
    Searches an associative list to find an element with a particular key.
    The list is made of sublists, each of whose first element is the key
    for accessing the value that is the rest of each sublist.

att [<args>]
    Attach Swat to GEOS.

attach-low	arg
    reconnect to the remote PC

autoload <function> <flags> <file> [<class> <docstring>]
    This command allows the first invocation of a command to automatically
    force the transparent reading of a file of Tcl commands.

backtrace -r<reg>* [-sp] [<frames to list>]
    Print all the active stack frames for the patient.

backup [<number of instructions>]
    Backs up the instruction pointer one or more instructions.

beep
    Alerts the user to something. If the terminal supports a visible bell,
    that's how the alert is issued, else it uses an audible bell.

    Inverts a set of characters on the screen

bin <expression> [<field width>]
    Prints expressions in binary.

bind-key <ascii_value> <function>
    binds the ascii value to a function

bindings
    Shows all current key bindings

bits [<address>] [<length>] [<type>]
    Examine memory as a dump of bits in sets of 8, 16, or 32 (byte,word,dword)

block  [ <patient> | :<n> | <patient>:<n> | <id> ]
     Make the current thread unrunnable, as if it had blocked on a semaphore.
     It will not execute again until it is explicitly unblocked.

break
    Breaks out of the current loop or the current nested interpreter.

break-taken [<flag>]
    This is used to determine if the machine stopped because a breakpoint
    was hit and taken.

brk <addr> [<command>]
brk pset <addr> [<command>]
brk aset <addr> [<command>]
brk tset <addr> [<command>]
brk clear <break>*
brk delete <break>*
brk enable <break>*
brk disable <break>*
brk address <break>
brk isenabled <break>
brk list [<addr>]
brk debug [<flag>]
brk isset <addr>
brk cond <break> <condition>*
brk cmd <break> [<command>]
brk delcmd <break> [<command>]
    Allows you to specify that execution should stop when it reaches a
    particular point. These breakpoints can be conditional, and can execute
    an arbitrary Tcl command, which can say whether the machine is to remain
    stopped, or continue on its way.

brkload [<handle>]
    Stop the machine when a particular resource is loaded into memory.

btall
    Produces a backtrace for all existing threads, one after the other.

bwatch [on|off]
    Watch stack borrowing in action
bytes [<address>] [<length>]
    Examine memory as a dump of bytes and characters.

cache create (lru|fifo) <maxSize> [<flushProc>]
cache destroy <cache> [flush|noflush]
cache lookup <cache> <key>
cache enter <cache> <key>
cache invalone <cache> <entry>
cache invalall <cache> [flush|noflush]
cache key <cache> <entry>
cache size <cache>
cache maxsize <cache>
cache setmaxsize <cache> <maxSize>
cache getval <cache> <entry>
cache setval <cache> <entry> <value>
    The cache command, as the name implies, maintains a cache of data that
    is keyed by strings. When a new entry is added to an already-full cache,
    an existing entry is automatically flushed based on the usage method
    with which the cache was created: lru or fifo. If lru, the least-recently-
    used entry is flushed; if fifo, the oldest entry is flushed.

call <function> [<function args>]
    Call a function in the current thread.

call-patient <function> ((<reg>|push) <value>)*
    This is a utility routine, not intended for use from the command line,
    that will call a routine in the PC after setting registers to or pushing
    certain values.

capps
    Displays the mapping from token to name that Clavin maintains for
    applications.

car <list>
    Returns the first element of a list.

case <string> [in] [<pat> <body>]+
    Perform one of a set of actions based on whether a string matches one or
    more patterns.

catch <command> [<varName>]
    Executes a command, retaining control even if the command generates an
    error (which would otherwise cause execution to unwind completely).

cbrk <addr> <condition>*
cbrk aset <addr> <condition>*
cbrk tset <addr> <condition>*
cbrk clear <break>*
cbrk delete <break>*
cbrk enable <break>*
cbrk disable <break>*
cbrk address <break>
cbrk list [<addr>]
cbrk debug [<flag>]
cbrk isset <addr>
cbrk cond <break> <condition>*
cbrk cmd <break> [<command>]
cbrk delcmd <break> [<command>]
    Allows you to set fast conditional breakpoints in the PC.

cdr <list>
    Returns all but the the first element of a list.

charttree [<address> [<extra-field>]]
    Some day chris might fill this in.

class-addr-with-obj-flag <address>
    This is a utility routine that can be used by any command that operates
    on object classes.  It is basically a level layer above
    addr-with-obj-flag <address>, to either accept direct class addresses,
    or object references, in which case the class of the object is returned.
    See addr-with-obj-flag for all the special flags that may be passed
    (-a, -p, -i, etc.)

    * If <address> is empty, this will return the class of the local
      variable "oself" within the current frame, if it has one, or *ds:si

classes [<patient>]
    Prints list of classes defined by the given patient.  Useful
    as a starting place, along with "gentree -a" & "vistree -c", to get
    your bearings as to what's in an application.

clear-highlightinfo
    clears out the C data structure for highlightinfo (INTERNAL USE ONLY)

clrcc <flag> [<value>]
    Clear a flag in the computer.

clrcc <flag> [<value>]
    Clear a flag in the computer.

cmdwin
    Fetches the token for the main input/output window in which the text
    cursor normally resides.

cmedia -s [<manuf> <id>]
cmedia -t [<manuf> <id>]
cmedia -o
    Prints out information about transport media, as stored in the Mailbox
    library's administrative file.

cmsg <group> <item>
cmsg <variable>
    Prints a short description of a particular message

cmsgaddr <MailboxMessageDesc>
cmsgaddr <MailboxMessage>
cmsgaddr <group> <item>
    Displays the address(es) for a registered Clavin message. If the message
    is in the inbox, the address(es) displayed is(are) the source address(es).

columns
    Retrieves the width of the screen, if known, to allow various commands
    (most notably "print") to size their output accordingly.

compcc <flag>
    Complement a flag in the computer.

completion <list-of-names>
    Figures the common prefix from a set of strings. Used for the various
    forms of completion supported by top-level-read.

concat <arg>+
    Concatenates multiple list arguments into a single list.

connect [<boot>]
    Connects Swat to the PC, which must already be running GEOS.

cons <element> <list>
    Returns the list consisting of <element> added to the front of <list>.

cont    [-f]
Examples:
"cont"  	    	continue execution
"c"	    	    	continue execution
"cont    -f"    	continues even if at FatalError
    Continue GEOS.

content
    Print the address of the content under the view with the current implied 
    grab.   Only works for V2.0 or higher.

continue
    Skips the rest of the commands in the current loop iteration, continuing
    at the top of the loop again.

continue-patient
    Tell the stub to let the machine continue where it left off.

coverage [-sp | -x] (<patient> | <resource> | <function>)
    Prints out information on the basic block execution coverage of a
    test suite.

cpanels <which>
    Prints a description of the control panels currently on-screen for one of
    the boxes

cprog <which>
    Prints the array of progress boxes for transmission or reception.

cthread [-i | -o] [<thread-handle> | :<thread-num>]
    Prints a summary of what each transmit or receive thread is 

cup <class>
cup <object>
cup <special object flags>
    Walks up the class hierarchy, starting at a given class, printing each
    class encountered.  May be passed an object, in which case the class of
    the object will be used as a starting place.

current-level
    Returns the number of invocations of "top-level" (i.e. the main
    command input loop) currently active.

current-registers
    Returns all the registers for the current thread as a list of decimal
    numbers.

cvtrecord <type> <number>
    Creates a value list for a record from a number, for use in printing out
    the number as a particular record using fmtval.

cwatch [on]
    Lets you watch chart geometry as it happens.

cycles [-r] [-i] [-I] [-f] [-n] (-x <routine>[=<cycles>])* [<end-address>]
    A low-level optimization tool that counts the number of machine cycles
    a given set of instructions takes to execute on a particular processor.

db-to-addr <file> <group> <item>
db-to-addr <file> <db-item-ref>
    Provides a simple way to map from a file handle and a 32-bit DB item
    reference to an address in memory.

dbg [<flag>]
    This is useful only when debugging Swat itself.

dbg-me
    This command is only for debugging Swat and serves no useful purpose to
    anyone but me.

dbrk <addr> <num> [<command>|default]
dbrk set <break> <num> [<command>|default]
dbrk list [<break>]
dbrk {clear,delete} <break>
dbrk cur <break> <num>
dbrk max <break> <num>
dbrk cmd <break> [<command>]
dbrk reset <break>
dbrk enable <break>
dbrk disable <break>
    Front-end command to "brk cmd".  Delay taking a breakpoint until it has
    been hit a specified number of times.

dcache bsize <blockSize>
dcache length <numBlocks>
dcache stats
dcache params
dcache (on|off)
    Controls the cache Swat uses to hold data read from the PC while the
    machine is stopped.

dcall [<args>]
    Display calls to a routine and the thread calling it.

debug
debug <proc-name>+
    Sets a breakpoint at the start of any Tcl command. Also serves as a
    breakpoint in the middle of a Tcl procedure, if executed with no argument.

defcmd <name> <args> <help-class> <help-string> <body>
    This creates a new Tcl procedure with on-line help whose name may be
    uniquely abbreviated when the user wishes to invoke it.

defcommand <name> <args> <help-class> <help-string> <body>
    This creates a new Tcl procedure with on-line help whose name must be
    given exactly when the user wishes to invoke it.

defhelp <topic> <help-class> <help-string>
    This is used to define the help string for an internal node of the help
    tree (a node that is used in the path for some other real topic, such
    as a command or a variable).

defsubr <procname> <args> <body>
    This is the same as the "proc" command, except the new procedure's name
    may not be abbreviated when it is invoked.

defvar <name> <value> [<help-class> <help-string>]
    This command is used in .tcl files to define a global variable and give
    it an initial value, should the variable not have been defined before.

delassoc <list> <key> [<foundvar> [<elvar>]]
    Deletes an entry from an associative list.

detach [<options>]
    Detach swat from the PC.

dirs
    Print the directory stack for the current thread.

discard-state
    Throw away the state saved by the most-recent save-state command.

diskwalk <drive>
    Prints out information on registered disks.

display <lines> <command>
display list
display del <num>
    Manipulate the display at the bottom of Swat's screen.

dmap (-t | -d)
    Displays the contents of the driver maps for the transport and data drivers

doc [<keyword>]
    Find technical documentation for <keyword>.

doc-next
    Bring up next instance of documentation for the current keyword.

doc-previous
    Bring up previous instance of documentation for the current keyword.

domains [-l]
    short description of command's purpose

dosMem
    Traverse DOS's chain of memory blocks, providing info about each.

dosState
    Print out the state of the caller of the current DOS function.

dossym <patient-name> <symfile> <exefile> <baseseg>
    Allows one to more easily debug TSRs and device drivers, assuming you
    have their .map file converted to a .sym file via map2sym

down [<frame offset>]
    Move the frame down the stack.

drivewalk
    Prints out all disk drives known to the system, along with their current
    status.

dumpstack [<address>] [<length>]
    Dump the stack and try to make some sense of it.

dwords [<address>] [<length>]
    Examine memory as a dump of double words (32 bit hex numbers).

ec [<args>]
    Get or set the error checking level active in the kernel.

echo [-n] <string>+
    Prints its arguments, separated by spaces.

elist [<patient>]
    Display all events pending for a patient.

emacs [<address>]
    Display the source code for an address.

ensure-swat-attached
    If Swat is not attached to GEOS display an error and stop a command.

eqfind
    Display all event queues in the system

eqlist <queue handle> <name>
    Display all events in a queue.

erfind
    Display all record event handles in the system.  These are events that
    have been recorded but not necessarily sent anywhere, so they will not
    appear in the queue of any thread.

error <message>
    Generates an error that forces execution to unwind all the way out of
    the interpreter, or to the closest "catch" command, whichever comes
    first.

eval <body>
    Evaluates the passed string as a command and returns the result of
    that evaluation.

ewatch [<args>]
    Allow automatic emacs updating of the point of execution.

exec <command> <args>*
    Executes an external command, passing it arguments and input. All output
    from the command is returned as a string.

exit <patient>
    Sends messages required to make an application quit.

exit-thread [<exit code>]
    Exit the current thread.

explain
    Print a more detailed description of why the system crashed, if possible.

explode <string> [<sep-set>]
    Breaks a string into a list of its component letters, allowing them to
    be handled quickly via a foreach loop, or the map or mapconcat commands.

expr <expr> [float]
    Evaluates an arithmetic expression and returns its value.

expr-debug (on|off)
    Enables or disables debugging output during the parsing of address
    expressions.

expr-debug (on|off)
    Enables or disables debugging output during the parsing of address
    expressions.

fetch-optr <handle> <offset>
    Extracts an optr from memory, coping with the data in the block that
    holds the optr not having been relocated yet.

fhandle <handle id>
    Print out a file handle.

field <list> <field name>
    Return the value for the field's offset in the structure.

fieldwin
    Print the address of the current top-most field window.

file dirname <name>
file executable <name>
file exists <name>
file expand <name>
file extension <name>
file isdirectory <name>
file isfile <name>
file owned <name>
file readable <name>
file rootname <name>
file tail <name>
file writable <name>
file match <pattern>
file newer <name1> <name2>
    Performs various checks and manipulations of file and directory names. NOTE:
    even in the DOS world, the forward slash is the path separator for this
    command.

fileTraffic
}
{
[brk FileClose {print-handle bx}]
[brk FileOpen {print-string-and-message-at ds:dx {FileOpen:}}]
}]
fill (byte|word) <addr> <length> <value>
    Allows you to quickly fill an area of memory with a particular value.

find <string> [<file>]
    Finds a string in a file. 

find-geode [-n] <geode_name>
    Find path of geode on host machine.
finish [<frame num>]
    Finish the execution of a frame.

finishframe <frame-token>
    Allows the machine to continue until it has returned from a particular
    stack frame.

flagwin
flagwin off
    Turns on or off the continuous display of flags.

flowobj
    Prints out address of the uiFlowObj, which is the object which 
    grabs the mouse.

flush-output
    Flushes any pending output (e.g. waiting for a newline) to the screen.

fmtoptr <handle-id> <chunk>
    Takes a global and a local handle and prints a description of the
    object described by that optr.

fmtval <value-list> <type-token> <indent> [<tail> [<one-line> [<block-han>]]]
    This is the primary means of producing nicely-formatted output of
    data in Swat. It is used by both the "print" and "_print" commands and
    is helpful if you want to print the value of a variable without
    entering anything into the value history.

focus [<object>]
    Prints the focus hierarchy below an object.

focusobj
    Returns the object with the model grab

focusobj
    Returns the object with the target

focusobj
    Returns the object with the focus

fonts [<args>]
    Print various font info.

for <start> <test> <next> <body>
    This is Tcl's main looping construct. It functions similarly to the "for"
    in C.

foreach <varName> <list> <body>
    This is a looping construct to easily iterate over all the elements of
    a list.

fpdumpstack
    Prints out both the hardware and sfotware stacks of the patient
    . NOTE: YOU MUST ACTUALLY HAVE A COPROCESSOR OR YOUR DEBUGGING 
    SESSION WILL HANG.

fpstack [-s] [<patient current-patient>]
    Prints out both the hardware and software stacks of the patient

fpustate <mode>
    Prints out the current state of the coprocessor. 

frame top
frame cur
frame get <ss> <sp> <cs> <ip>
frame next <frame>
frame prev <frame>
frame function [<frame>]
frame funcsym [<frame>]
frame scope [<frame>]
frame info [<frame>]
frame retaddr [<frame>]
frame patient [<frame>]
frame register <regName> [<frame>]
frame set <frame> [<notify>]
frame setreg <regName> <value> [<frame>]
frame +<number>
frame -<number>
frame <number>
    This command provides access to the stack-decoding functions of Swat. Most
    of the subcommands deal with frame tokens, but a few also handle frame
    numbers, for the convenience of the user.

framewin [off]
    Creates a window in which the current stack frame is always displayed.

freeze [ <patient> | :<n> | <patient>:<n> | <id> ]
    Freezing a thread prevents a thread from running unless it's the only thread
    that's runnable in the entire system.

fsir-stat
}
{
var fsir [symbol find module geos::FSInfoResource]
fullscreen [<object>]
    Prints the full screen below an object.

fullscreenobj
    Returns the object with the full screen grab

func [<func name>]
    Get the current function or set the frame to the given function.

fvardata <token> [<address>]
    Locates and returns the value list for the data stored under the given
    token in the vardata of the given object.

fwalk [<patient>]
    Print the list of files open anywhere in the system.

gentree [<address>] [<instance field>]
    Print a generic tree.

geosfiles
    Print out all the files for which I/O is currently pending in GEOS.

geowatch [<object>]
    Display geometry calls that have reached a particular object.

get-call-driver <function number> [<arg1> [<arg2> [<arg3>]]]
    calls a mouse driver function

get-key-binding <char>
    gets key binding for given key

get-mouse-event
    Gets the next mouse event

getcc <flag>
    Get a flag in the computer.

getenv <name>
    Returns the value for a variable defined in Swat's environment.

getvalue <expr>
    This is a front-end to the "addr-parse" command that allows you to
    easily obtain the integer value of any expression. It's most useful
    for converting something the user might have given you to a decimal
    integer for further processing.

global <varName>+
    Declares the given variables to be from the global scope.

go [<address expressions>]
    Go until an address is reached.

grobjtree [<address>] [<instance field>]
    Print out a grobj tree.

gup [<address>] [<instance field>]
    Print a list of the object and all of its generic ancestors.

handle lookup <id>
handle find <address> [<frame>]
handle all
handle nointerest <interest-record>
handle interest <handle> <proc> [<data>+]
handle segment <handle>
handle size <handle>
handle state <handle>
handle owner <handle>
handle patient <handle>
handle other <handle>
handle id <handle>
handle isthread <handle>
handle iskernel <handle>
handle isfile <handle>
handle isvm <handle>
handle ismem <handle>
handle isxip <handle>
    The "handle" command provides access to the structures Swat uses to track
    memory and thread allocation on the PC.

handles [<flags>] [<patient>]
    Print all handles in-use.

handsum
    This command analyzes the handle table and prints out a list of the
    number of handles being used by each geode, and for what purpose.

hbrk <address> (byte|word) (match|mismatch) <value>
    Break when a value in a memory location changes.

heaprequest <geode>		   print out "heapspace" reserved by an app
    Print out the amont of heap space this geode has reserved.  This the
    sum of all GeodeRequestSpace calls for this geode.
heapspace <geode>		   print out "heapspace" being used by app
heapspace total		   print out total heapspace being used
heapspace syslib		   print out total of heapspace being used by
system libraries
    Print out "heapspace" value for application, as calculated from current
    heap usage.  Run "heapspace" on your application at different times, after
    accessing all menus & dialogs, & generally "stressing" it, to see what
    value for "heapspace" should be put in its .gp file.  The value printed
    is roughly the non-discardable heap usage by the app & any transient
    libraries that it depends on.

help-fetch <topic-path>
    Fetches the help string for a given topic path in the help tree.

help-fetch-level <topic-path>
    Returns a list of the topics available at a given level in the help tree.

help-get <topic-path>
    Fetches a list of help strings for all nodes at the given level of the
    help tree.

help-is-leaf <topic-path>
    Determines if a given topic path refers to a help topic or a help
    category.

help-scan <pattern>
    Scans all nodes in the help tree for those whose documentation matches a
    given pattern.

hex-to-bin <hex-digits>
    Converts hex digits to binary.

hex-to-bin-reverse <hex-digits>
    Converts hex digits to binary, and reverses the bits in each byte worth.

hgwalk
    Print out all geodes and their memory usage.

history <n>
history set <queue-size>
history subst <string>
history cur
history fetch <n>
history save <file>
history load <file>
    This command implements command-history, with its attendant substitution.
    The history is a queue of a fixed size, with each entry in the queue
    having a unique number by which it is referenced.

hwalk [<flags>] [<patient>]
    Print the status of all blocks on the global heap.

iacp -ac 	    prints all connections
iacp -l 	    prints all lists w/o connections
iacp -d 	    prints all open documents
iacp <obj>      prints all connections to which <obj> is party
    short description of command's purpose

if <expr> [then] <truebody> (elif <expr> <truebody>)* [[else] <falsebody>]
    This is Tcl's conditional, as you'd expect from its name.

ignerr [<address>]
    Ignore a fatal error and continue.

imem [<address>] [<mode>]
    Examine memory and modify memory interactively.

impliedgrab
    Print the address of the current implied grab, which is the windowed screen
    object under the mouse.

impliedwin
    Print the address of the current implied window (the window under the
    mouse).

index <list> <index>
index <string> <index> char
    "index" is used to retrieve a single element or character from a list
    or string.

info args <procname> [<pattern>]
info arglist <procname>
info body <procname>
info cmdcount 
info commands [<pattern>]
info default <procname> <arg> <varname>
info globals [<pattern>]
info locals [<pattern>]
info procs [<pattern>]
info vars [<pattern>]
    This command provides information about a number of data structures
    maintained by the Tcl interpreter.

iniwatch <flags>
inst [<arg>]
    Print information on an assembler instruction.

int [<int level> <state>]
    Set or print the state of the two interrupt controllers for when
    then machine is stopped in Swat.

int21
int21 print [(count|time|name|number)]
int21 reset
    Print the table of interrupt 21 function calls

io [w] <port> [<value>]
    Provides access to any I/O port on the PC.

irq
irq (no|yes)
irq (set|clear)
    Controls Swat's behaviour with respect to interrupt requests from the
    keyboard.

is-obj-in-class <object> <class>
    Returns whether a given object in in the specified class

istep [<default command>]
    Step through the execution of the current patient.
    This is THE command for stepping through code.

keyboard [<object>]
    Prints the keyboard grab hierarchy below an object.

keyboardobj
    Returns the object with the keyboard grab

length <list>
length <string> char
    Determines the number of characters in a string, or elements in a list.

lhwalk [<address>]
    Prints out information about a local-memory heap.

link <library> [<patient>]
    Allows you to link a patient as an imported library of another patient,
    even though the other patient doesn't actually import the patient. This
    is useful only for symbol searches.

list <arg>+
    Joins any number of arguments into a single list, applying quoting
    braces and backslashes as necessary to form a valid Tcl list.

listi [<address>] [<length>]
    Disassemble at a memory address.

load <file>
    This loads a file of Tcl commands, evaluating each command in turn until
    the last is evaluated, or an error is detected.

    	unignores patients whether they were ignore with 'i' or 'I'

    	if you want to ignore a patient everytime you run swat, you
    	can add an ignore entry to the cache that tells swat it ignore
        the patient everytime it goes to look for it. This is the same
        as ignoring a patient with "Ignore" or "I" rather than
    	"ignore" or "i"

    	the symdir cache allows swat to remember where it finds symbol files
    	so it can quickly find it the next time it is run, geodes have entries
    	in the cache of places where it was found. By running nuke-symdir-entry
    	it will remove the entries for a given geode from the cache. This can
    	be useful if there is an entry for a gym file that is being found
    	before it gets a chance to find the right symfile somewhere else in the
    	tree. This is also useful if you have Ignored (capital I) a patient and
    	added an Ignore entry to the cache, and now you want it to search for
    	the symbol file for that geode

locals [<func>]
    Allows you to quickly find the values or names of all the local
    variables of a function or stack frame.

localwin [<number>]
    Turn on or off the continuous display of local variables.

log init                              (Re)Initialize variables for examining 
the profile. This must be done each 
time swat attaches to the patient.
long-class [on|off]
    Turns on or off printing out all class names for an object in
    print-obj-and-method (used in pobject, vup, vistree, etc...).
    
ls [<args>]
    List the current Unix directory.

map <var-list> <data-list>+ <body>
    This applies a command string to the successive elements of one or more
    lists, binding each element in turn to a variable and evaluating the
    command string. The results of all the evaluations are merged into a
    result list.

map-method <number> <object>
map-method <number> <class-name> [<object>]
    Maps a message number to a human-readable message name, returning that
    name. This command is useful both for the user and for a Tcl procedure.

mapconcat <var-list> <data-list>+ <body>
    This applies a command string to the successive elements of one or more
    lists, binding each element in turn to a variable and evaluating the
    command string. The results of all the evaluations are merged into a
    result string by concatenating each of the results with no space between
    results.

mdwatch
	Print messages at various points in execution.

memsize [<memory size>]
    Change the amount of memory that GEOS thinks that it has.

methods <class>
methods <object>
methods <special object flags>
    Prints out the method table for the class specified, or if an object is
    passed, for the overall class of the object.  Useful for getting a list of
    candidate locations to breakpoint.

model [<object>]
    Prints the model hierarchy below an object.

monitor-iclas-class-operations
	Print messages at various points in the execution of the iclas
	library code.

monitorIclas <flags>
	Print messages at various points in the execution of the iclas
	library code.

mouse [<object>]
    Prints the mouse hierarchy below an object.

mouse-word-select <click>
    do a word selection

mouseobj
    Returns the object with the mouse grab

msgq <head>
    

mwatch <msg>+
mwatch add <msg>+
mwatch list
mwatch clear
    Display all deliveries of a particular message.

netlib [<args>]
    Print various bits of net library shme.

next
    Execute the patient by a single instruction, skipping over any
    calls, repeated instructions, or software interrupts.

none
    $lastCommand stores the text of the command currently being executed.

not-1x-branch
    Of limited use outside GeoWorks, this allows a command to determine
    easily if it is dealing with a 1.X GEOS system and should examine
    system data structures accordingly.

null <val>
    Checks to see if a string is either empty or "nil", special values returned
    by many commands when something isn't found or doesn't apply. Returns non-
    zero if <val> is either of these special values.

obj-class <object>
    Figures out the class of an object, coping with unrelocated object
    blocks and the like.

obj-find-method <message> <object/class> [<wantsym>]
    Finds the method that will be executed if a particular message is sent
    to a particular object or class.

obj-foreach-class <function> <object> [<args>]
    Processes all the classes to which an object belongs, calling a callback
    procedure for each class symbol in turn.

objbrk <object> [<message>]
objbrk <special object flags> [<message>]
objbrk <object block> [<message>]
objbrk <patient> [<message>]
objbrk list
objbrk del <objbrk>
    Break when a particular object, or group of objects, gets messaged.  You
    can break on a certain message, or leave the message unspecified.  This
    command is good for discriminating between messages sent to one object of
    many in its class, or where you aren't sure what the incoming message
    will be.

objcount [-q] [-X] [-Y] [-b #] [-o #] [-p #]
    Count up instances of various objects on the heap.

objmessagebrk [<address>]
    Break whenever a method is SENT to a particular object via ObjMessage.

objwalk [<address>]
    Prints out information about an object block.

objwatch <object> [<message>]
objwatch <special object flags> [<message>]
objwatch <object block> [<message>]
objwatch <patient>
    Display message calls to a particular object, or group of objects.  This
    command is analogous to "objbrk", but instead of stopping stop execution,
    just prints out the message occurrence. 

omfq <message> <object> <args>*
    Forces a message for an object onto its event queue.

pappcache
    Prints out the current state of the system application cache, for systems
    operating in transparent launch mode.  Specifically, prints out:

	Applications in the cache (First choice for detaching)
	Top full-screen App (Not detached except by another full screen app)
	Desk accessories (detached only as last resort)
	Application geodes in the process of detaching

pargfl [<reg-pair dxcx>]
or
pargfl [<address ds:si>]
    Print an AdjustedRegFloat number

patch [<addr>]
patch del <addr>*
    Patch assists in creating breakpoints that invisibly make small changes
    to code.  This can help the programmer find several bugs without
    remaking and redownloading.

patient find <name>
patient name [<patient>]
patient fullname [<patient>]
patient data [<patient>]
patient threads [<patient>]
patient resources [<patient>]
patient libs [<patient>]
patient path [<patient>]
patient all
patient stop [<addr>]
    This command provides access to the various pieces of information that are
    maintained for each patient (geode) loaded by GEOS.

patient-default [<patient>]
    Specifies the default patient.

paxis [<address>]
    Print information about an axis

pbitmap <address>
    Print a bitmap graphically.

pbody [<address>]
    Finds the GrObjBody via the BodyKeeper -- prints its OD and its
    instance data.

pcarray [<flags>] [<address>]
    Print information about a chunk array.

pcbitmap <address> <width> <height> [<no space flag>]
    Print out a one bit-deep packbits-compacted bitmap.

pcelldata [<addr>]
    Prints data for a spreadsheet data

pcelldeps <filehan> [<addr>]
    Prints dependencies for a cell in the spreadsheet

pchar [<compact flag>] [<character>] [<font address>]
    Print the bitmap of a character in a font.

pchart [<address>]
    Print information about a chart

pclass [-h] [<address>]
    Print the object's class.

pcp [address]
    Print out a packet for the Comm driver

pdex-dbr [<flags>] [<address>]
    Print formatted info contained in the rolodex DB_Record

    Example:
    --------

    Index:   Smith, Joe
    Address: Joe Smith123 Park St.Alameda, CA
    Phone #s:    Type       Number
                 ----       ------
                   1        "(510) 555-1212"
                   7        "(510) 814-5700"
                   3    
                   4        "(510) 814-4250"
                   8        "(310) 555-1028"

pdex-plist [<flags>] [<address>] [<phonesToPrint>]
    Print the rolodex phone name strings from the index table

    Example:
    --------
    0     "SOMETHING"
    1     
    2     "HOME"
    3     "OFFICE"
    4     "CAR"
    5     "FAX"
    6     "OTHER"
    7     "BATH"
    8     "OFFICE 2"
pdgroup [<flags>] [<patient>]
    Prints out the variables defined in dgroup 

pdisk <disk-handle>
    Prints out information about a registered disk, given its handle.

pdrive <drive-handle>
pdrive <drive-name>
pdrive <drive-number>
    Provides the same information as "drivewalk," but for a single drive,
    given the offset to its DriveStatusEntry structure in the FSInfoResource. 

pdw	<register pair>
    Prints the dword value of a register pair

penum <type> <value>
    Print an enumeration constant given a numerical value.

pevent <handle>
    Print an event given its handle

pfileids [-D | -S | -A] [<folder>]
    Print out the file id (32-bit ID, and disk handle) for all files in the
    display list of the given folder.

pflags
   Prints the current flags.

pfloat [<address ds:si>]
    Print a floating point number

pfoamrec <address>
}
{
if {[null $args]} {
var args {^hax}
}
var addr [addr-parse $args]
var seg ^h[handle id [index $addr 0]]
var off [index $addr 1]
pfont [<compact flag>] [<address>]
    Print all the bitmaps of the characters in a font.

pfontinfo <font ID>
    Prints font header information for a font.  Also lists all sizes built.

pgcnblock [<list-of-lists> | <object>]
    "pgcnblock" prints out all the GCN lists either associated with an
    object, or defined for the system as a whole.

pgen <element> [<object>]
    Print an element of the generic instance data.

pgs <address>
    List the contents of a graphics string.

phandle <handle ID>
    Print out a handle.

pharray [<flags>] [<vmfile> <dirblk>]
    Print information about a huge array.

phastats 	    	- needs a special kernel.  See vmemHugeArray.asm
}
{
echo [format {totaltZerot<12.5t<25t<50t>50}]
var total [value fetch kcode::totalChecked]
var zero [value fetch kcode::totalZero]
var eigth [value fetch kcode::totalEigth]
var quarter [value fetch kcode::totalQuarter]
var half [value fetch kcode::totalHalf]
var moreHalf [value fetch kcode::totalMoreHalf]
var zeroP [expr $zero*100/$total float]
var eigthP [expr $eigth*100/$total float]
var quarterP [expr $quarter*100/$total float]
var halfP [expr $half*100/$total float]
var moreHalfP [expr $moreHalf*100/$total float]
echo [format {%dt%dt%dt%dt%dt%d} $total $zero $eigth $quarter $half $moreHalf]
echo [format {t%4.1ft%4.1ft%4.1ft%4.1ft%4.1f} $zeroP $eigthP $quarterP $halfP $moreHalfP]
echo [format {LMemContract was called %d times} [value fetch kcode::countLMemContract]]
}]
##############################################################################
#				clrhastats
##############################################################################
#
# SYNOPSIS:	clears statistics gathering variables in the kernel.  Used in
#   	    	conjunction with special code in vmemHugeArray.asm.  This 
#   	    	is conditionally assembled by defining the constant 
#   	    	MEASURE_HUGE_ARRAY_COMPACTION.
# CALLED BY:	Global
# PASS:		nothing
# RETURN:   	nothing
# SIDE EFFECTS:	none
#
# STRATEGY
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	jim	 8/23/93	Initial Revision
#
##############################################################################
[defcommand clrhastats {} {}
{Usage:
clrhastats 	    	- needs a special kernel.  See vmemHugeArray.asm
}
{
assign kcode::totalChecked 0
assign kcode::totalZero 0
assign kcode::totalEigth 0
assign kcode::totalQuarter 0
assign kcode::totalHalf 0
assign kcode::totalMoreHalf 0
assign kcode::countLMemContract 0
}]
phelp [<flags>] [<address>]
    Print information about a help object.

phfile [<address>]
    Print out a HugeFile read buffer.

pias [<flags>]
	Prints out contents of the IAS database.

pid
    This is useful only for debugging Swat when one wants to attach to it
    using another debugger.

pini [<category>]
    Provides you with the contents of the .ini files being used by the current
    GEOS session.

pinst [<address>]
    Print out all the instance and variable data in the last level of
    the object.

piv <iv> [<address>]
    This prints out the value of the instance variable specified.  

pkmap <addr> <filename>
    Prints a keyboard map in assembly-language format.

plines start [obj]
    Print information about the lines in a text object.
    
plink [<flag> | <link domain handle>]
    Prints information about link(s) used by Tcp.
plist <structure> <address of lmem handle> [<field>] [<value>]
pmake [<args>]
    Recompile the current patient.

pncbitmap <address> <width> <height> [<no space flag>]
    Print out a one bit-deep noncompacted bitmap.

pnew [<address>]
    Print the list of "new" points

pnimbit <address>
    Print a Nimbus bitmap.

pnimchar <character> <font> [<styles>]
    Print the Nimbus data for a character in a given font.

pnimcommand <address>
    Print Nimbus data from memory, and advance a ptr appropriately.

pnimdata <address>
    Print the Nimbus data for a character.

pnormal [-v]
    Prints out information about the current "normal" transfer item on the
    clipboard.

pobjarray [<address>]
    Print out an array of objects.

pobject [<address>] [<detail>]
    Print all or part of an object's instance and variable data.

pobjmon [<object>] [<textonly>]
pod	<address>
    Print in output descriptor format (^l<handle>:<chunk>) the address passed.

points [<address>] [<args>]
    Print the points of a spline

ports [-s] [-l] [-q] [-d <domain>]
    short description of command's purpose

pparams [<address {}>]
    Print a chart parameter block in human readable form

    Print the duplicates for a chart parameters block.
pparea [<address>]
    Print information about the plot area

ppath [<current, docClip, winClip>] [<gstate>] 
    Print the structure of a path.

ppdiff <address>
    Calculate the distance between successive points

pquick [-v]
    Prints out information about the current "quick" transfer item on the
    clipboard.

precord <type> <value> [<silent>]
    Print a record using a certain value.

preg [-g] <addr>
    Decodes a GEOS region and prints it out, either numerically, or as
    a series of x's and spaces.

prgfloat [<reg-pair dxcx>]
or
prgfloat [<address ds:si>]
    Print a RegFloat number

print <expression>
    Print the value of an expression.

print-cell [row column <cfp ds:si>]
    Print information about a cell

print-cell-params [<address ds:si>]
    Print a CellFunctionParameters block

print-clipboard-item [-v] <vmfile> <vmblock>
print-clipboard-item [-v] <memhandle>
print-clipboard-item [-v] <addr>
    Prints out information about a transfer item.

print-column-element [<address ds:si>]
    Print a single ColumnArrayElement at a given address

print-db-item <file> <group> <item>
    Print information about a single dbase item

print-eval-dep-list [<addr>]
    Prints a dependency list used for evalulation

print-folder-buffer [<flags> <address>]
    Print out all the FolderRecords in the folder buffer of the given folder.

print-group file group
    Print information about a dbase group block

print-huge-lmem [<flags>] handle

    Prints information about a HugeLMem heap

print-method-table <class> [method_number_or_name_pattern]
    Prints out the table for a class that maps messages to methods.

print-obj-and-method <handle> <chunk> [<flags> [<message> [<cx> [<dx> [<bp> [<class> ]]]]]]
    Prints a nice looking representation of an object, with option message,
    register data, label, hex address, & carriage return.  The class indication
    may also be overriden.

print-positions [-D | -S | -A] [<folder>]
    Print out a all the bounding boxes of files in the given folder.

print-post-passive <obj>
    Prints out post-passive grab list

print-pre-passive <obj>
    Prints out pre-passive grab list

print-row [<address *ds:si>]
    Print a single row in the cell file given a pointer to the row.

print-row-block [<address ds>]
    Print a row-block

print-rows <addr>
Synopsis:
Prints out a spreadsheet row array list.
}
{
#
# Set various variables that will be needed.
#
var address	    [addr-parse $addr]
var	seg	    [handle segment [index $address 0]]
var offset	    [index $address 1]
var	lsize	    [expr [value fetch $seg:$offset-2 word]-2]
var lsize	    [expr $lsize+$offset]
#
# Print out the row array
#
for {} {$offset < $lsize} {var offset [expr $offset+[size RowArrayEntry]]} {
var row	   [field [value fetch $seg:$offset RowArrayEntry] RAE_row]
var height [field [value fetch $seg:$offset RowArrayEntry] RAE_height]
var base   [field [value fetch $seg:$offset RowArrayEntry] RAE_baseline]
if {$base >= 0x8000} {
var	baseline [format {%d (automatic)} [expr $base-0x8000]]
} else {
var baseline [format {%d} $base]
}
if {$height != 0xffff} {
echo [format {row %4d: hgt = %3d, base = %s} $row $height $baseline]
}
}
}]
print-xip-geodes - prints the names of all geodes in the XIP image
}
{
prmsg <group-by> <sort-by> <lower-bound>
    Print a listing of all the recorded messages, in decreasing order of use

proc <procname> <args> <body>
    Defines a new Tcl procedure that can be invoked by typing a unique
    abbreviation of the procedure name.

procmessagebrk [<handle>]
    Break whenever a method is SENT to a particular process via ObjMessage.

procobj [<patient>]
    Returns the address of GenProcess object for the given patient, or the
    current one if you give no patient.

prompt
    Prints a command prompt. Usually overridden by a Tcl procedure of the
    same name.

protect <body> <cleanup>
    Allows one to ensure that clean-up for a sequence of commands will always
    happen, even if the user types control-C to interrupt the command.

ps [<flags>]
    Print out GEOS's system status.

pscope [<scope-name> [<sym-class>]]
    This prints out all the symbols contained in a particular scope.

psegment <segment ID>
    Print out a segment's handle.

psel [<address>]
    Print the list of "new" points

psize <structure>
    Print the size of the passed structure.

pspath [<address>]
    Dump the PostScript interpreters' current path

pssheet [-isSfrcvd] ADDR
-i: address is a pointer to the instance data
-s: print out style attribute structures
-f: print out information about associated file
-r: print out row heights
-c: print out column widths
-v: print out visual and selection information
-d: print out document information
-R: print out recalculation information
-N: print out spreadsheet name information
    Prints out information about a spreadsheet object

psstack [<length>] [<address>]
    Dump the PostScript interpreters' execution stack

psup [<object>]
    Print superclasses of an object

pswap 	    	- needs a special swap library.  see swap.asm
Prints out useful swap information.
}
{
# Grab the segment address of the SwapMap block
#
var sm [value fetch swap::swapSegment word]
ptcp
    Prints out information about all TCP  connections.  
    Information printed includes connection handle, local port,
    remote port, remote IP address, local IP address and TCP state.

ptcpcon <connection handle>
    Prints out detailed information about a Tcp connection.  Information 
    printed includes domain handle of link used for the connection, max
    size of the output queue, optr of the output queue, amount of data 
    waiting to be added to the output queue, optr of input queue, 
    whether a thread is waiting for an operation to complete for that 
    connection, destruct timeout, and error associated with connection.

    Prints transmission control info about a Tcp connection.  Information
    printed includes Tcp state, send unacknowledged, send next, send urgent
    pointer, receive next, receive urgent pointer, send max, last ack sent,
    max segment size, max window size and timers.

ptelnetinfo [<expression>]
    Print TelnetInfo structure 

ptelnetoptdesc [<expression>]
    Print TelnetOptionDescArray structure 

ptext [<options>] [<addr>]
    prints out the text and related structures for a text object.

pthread <id>
    Provides various useful pieces of information about a particular thread,
    including its current priority and its current registers.

ptimer <handle>
    Prints out information about a timer registered with the system: when it
    will fire, what it will do when it fires, etc.

ptitle <address>
    Print information about a chart title object

ptrange start end [obj]
    Print a range of characters in a text object.
    
ptrans [<flags>] [<address>]
    Prints the ObjectTransform data structure as specified.

ptreg start [obj]
    Print information about the lines in a region.
    
pundo [<address>]
    Print the points of a spline

pusage [<address>]
    List the characters in a font and when they were last used.

pvardata [<address>]
pvardentry <address> <object>
pvis <element> [<object>]
    Print an element of the visual instance data.

pvismon [<address>] [<textonly>]
    Print a visual moniker structure at an absolute address.

pvmt [-p] [-a] [-s] [-c] (<handle> | <segment>)
    Prints out a map of the VM block handles for a VM file.

pvsize [<object>]
    Print out the dimensions of a visual object.

pwd
    Prints the current working directory for the current thread.

quit [<options>]
    Stop the debugger and exit.

range <list> <start> <end>
range <string> <start> <end> char
    Extracts a range of characters from a string, or elements from a list.

read-char [<echo>]
    Reads a character from the user.

read-line [<isTcl> [<initial input> [<special chars>]]]
    Reads a line of input from the user, optionally handling multi-line
    Tcl commands, initial editable input, and special immediate-return
    characters.

read-reg <register>
    Return the value of a register in decimal.

ref <routine name>
    Print the header for a function.

     Print out a cross reference for the given kernel function.

regs
    Attempts to knock some sense into a confused target pc. 

regwin [off]
    Turn on or off the continuous display of registers.

require <name> [<file>]
    This is used to ensure that a particular function, not normally invoked
    by the user but present in some file in the system library, is actually
    loaded.

resize <window> <numLines>
    Resizes the source window or a varwin or localwin.

restally start <resource>	Start analysis on the given resource.
restally -n start <resource> Includes near routines in analysis 
restally end    	    	End analysis
restally info [args]    	Print analysis data
    Sets tally break points at routines in resources
    You may pass multiple resources

restore-state
    Pops all the registers for a thread from the internal state stack.

ret [<function name>]
    Return from a function and stop.

return [<string>]
    Causes an immediate return from the current Tcl procedure, with or without
    a value.

return-to-top-level
    Forces execution to return to the top-level interpreter loop, unwinding
    intermediate calls (protected commands still have their protected
    clauses executed, but nothing else is).

rmod
rmod print
rmod reset
rmod debug
    Displays a report of the routines called between modules.

rmsg
rmsg (on|off)
rmsg print <group-by> <sort-by> <lower-bound>
rmsg header
rmsg reset
    Print a report of all recorded messages, in decreasing order of use.

rpc call <proc> <argType> <args> <repType>
rpc serve <proc> <argType> <repType> <procName> [<data>]
rpc delete (<server>|<event>)
rpc event <time> <procName> [<data>]
rpc debug (+<flag>|-<flag>)*
rpc timeout [(on|off|1|0)]
rpc wait 
    This command provides access to the RPC system by which Swat communicates
    with the stub running on the PC. IT IS INTENDED ONLY FOR SYSTEMS TCL
    PROGRAMMERS WHO KNOW WHAT THEY ARE DOING. While screwing up will cause no
    permanent damage, it can make your debugging session rather unhappy.

rpc-dbg <flag>+
    Adjusts or returns the state of Swat's internal RPC debug flags.

rpc-find-geode [-n] <geode_name>
    Find path of geode on target machine.
rs
    Restart GEOS without attaching.

rtcm-print-events

run [[-enp] <app>]
    "Runs" an application by loading it via a call to UserLoadApplication &
    stopping when the app reaches the GenProcess handler for MSG_META_ATTACH.
    Return patient created, if any (in the example cases above, this would
    be "uki").

rwatch [on|off]
    Displays information about text recalculation. Specifically designed
    for tracking bugs in the rippling code.

save (<#lines> | <filename>)
    Controls the scrollback buffer Swat maintains for its main command window.

save-state
    Records the state of the current thread (all its registers) for later
    restoration by "restore-state".

sbwalk [<patient>]
    List all the saved blocks in a patient.

scan <string> <format> <varName>*
    "scan" parses fields from an input string, given the string and a format
    string that defines the various types of fields. The fields are assigned
    to variables within the caller's scope.

scope [<scope-name>]
    This changes the auxiliary scope in which Swat looks first when trying
    to resolve a symbol name in an address expression.

screenwin
    Print the address of the current top-most screen window.

send [[-enp] [-r] <geode>]
    send a geode from host to target machine

send-file <filename>
Synopsis:
sends a file to the target machine
}
{
rpc call RPC_RECEIVE_FILE [type void] {} [type void]
rpc-send-file $src $dest
}]
###############################################################################
#
# 	Copyright (c) GeoWorks 1990 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	tbrk.tcl
# FILE: 	tbrk.tcl
# AUTHOR: 	Adam de Boor, Jun 24, 1990
#
# COMMANDS:
# 	Name			Description
#	----			-----------
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	ardeb	6/24/90		Initial Revision
#
# DESCRIPTION:
#	Commands to implement tally breakpoints.
#
#	$Id: tbrk.tcl,v 1.15 93/10/15 16:36:09 dubois Exp $
#
###############################################################################
set-masks <mask1> <mask2>
    Sets the interrupt masks used while the Swat stub is active. Users should
    use the "int" command.

set-startup-ec [<args>]
    Executes the "ec" command upon startup, to allow one to override the
    default error checking flags.

setcc <flag> [<value>]
    Set a flag in the computer.

sftwalk
    Print the SFT out by blocks.

show-int13-calls
	When assembling a DOS driver with DEBUG_BOOT_SECTOR_CALLS = TRUE,
	allows shadowing of all int 13h calls, except for read and write
	sector calls to drives other than drive B.  Also shows some Int 21h
	calls.   Modify DebugBootSectorCalls in IFS/DOS/Common et al for other 
	behavior.
showcalls [-<flags> [<args>]]
    Display calls to various parts of PC/GEOS.

showfonts [<args>]
    Show when fonts are loaded and/or built.

sint21
sint21 print [(count|name|number)]
sint21 reset
    Print the table of interrupt 21 function calls as tracked by the Swat stub

skip [<number of instructions>]
    Skip the one or more instructions.

sleep <seconds>
    This pauses Tcl execution for the given number of seconds, or until the
    user types Ctrl+C.

slist [<args>]
    List source file lines in swat.

snap [<subject>]
    Echoes a comment about your mother to the screen.

sort [-r] [-n] [-u] <list>
    This sorts a list into ascending or descending order, lexicographically
    or numerically.

source <file>
    Reads and evaluates commands from a file.

spawn <patient> [<address>]
    Set a temporary breakpoint in a not-yet-existent patient/thread,
    waiting for a new one to be created.

src line <addr> [<frame>]
src read <file> <line>
src cache [<max>]
src addr <file> <line> [<patient>]
src flush
src size <file>
    The "src" command allows the Tcl programmer to manipulate the source-
    line maps contained in all the geodes' symbol files.

srcwin [<numLines>] [view]
     Turn on or off the continuous display of source code.

sstep [<default command>]
    Step through the execution of the current patient by source lines.
    This is THE command for stepping through high level code.

stdpaths
    Print out all paths set for standard directories

step
    Execute the patient by a single machine instruction.

step-patient
    Causes the PC to execute a single instruction, returning only when the
    instruction has been executed.

step-until <expression> [<byteOrWord>]
    Step until a condition is met

stop in <class>::<message> [if <expr>]
stop in <procedure> [if <expr>]
stop in <address-history token> [if <expr>]
stop at [<file>:]<line> [if <expr>]
stop <address> [if <expr>]
    Specify a place and condition at which the machine should stop executing.
    This command is intended primarily for setting breakpoints when debugging
    a geode created in C or another high-level language, but may also be used
    when debugging assembly-language geodes.

stop-catch <body>
    Allows a string of commands to be executed without a FULLSTOP event being
    generated while they are executing.

stop-patient
    Stops the PC, in case you continued it and didn't wait for it to
    stop on its own.

str-last-read <stream> [<num-to-print>]
    Allows you to see the most-recent bytes read to a stream, with hooks
    to easily examine streams created by the serial and parallel drivers.

str-last-write <stream> [<num-to-print>]
    Allows you to see the most-recent bytes written to a stream, with hooks
    to easily examine streams created by the serial and parallel drivers.

stream open <file> (r|w|a|r+|w+)
stream read (line|list|char) <stream>
stream print <list> <stream>
stream write <string> <stream>
stream rewind <stream>
stream seek (<posn>|+<incr>|-<decr>|end) <stream>
stream state <stream>
stream eof <stream>
stream close <stream>
stream flush <stream>
stream watch <stream> <what> <procName>
stream ignore <stream>
    This allows you to read, write, create and otherwise manipulate files
    from Tcl.

string compare <string1> <string2> [no_case]
string first <substring> <string> [no_case]
string last <substring> <string> [no_case]
string match <string> <pattern>
string subst <string> <search> <replace> [global]
    Examine strings in various ways.

switch <thread-id>
switch [<patient>][:<thread-num>]
    This allows you to see what any thread in the system was doing, when the
    machine stopped, by changing Swat's current thread, from which registers
    and backtraces are fetched.

sym-default [<name>]
    Specifies an additional place to search for symbols when all the usual
    places have been searched to no avail.

symbol find <class> <name> [<scope>]
symbol faddr <class> <addr>
symbol match <class> <pattern>
symbol scope <symbol> [<lexical>]
symbol name <symbol>
symbol fullname <symbol> [<with-patient>]
symbol class <symbol>
symbol type <symbol>
symbol get <symbol>
symbol patient <symbol>
symbol tget <symbol>
symbol addr <symbol>
symbol foreach <scope> <class> <callback> [<data>]
    Provides information on the symbols for all currently-loaded patients.
    Like many of Swat's commands, this operates by using a lookup function
    (the "find", "faddr", "match", or "foreach" subcommands) to obtain a
    token for a piece of data that's internal to Swat. Given this token, you
    then use the other subcommands (such as "name" or "get") to obtain
    information about the symbol you looked up.

synopsis
    List all commands with a brief synopsis each.  The list appears in emacs.

syntax diagram
syntax diagram
    short description of command's purpose

sysfiles [all]
    Print out all open files from dos's system file table.

system <command>
    Causes Swat to execute another program, giving it complete control of the
    screen.

systemobj
    Prints out the address of the uiSystemObj, which is the top level of the 
    generic tree.

table create [<initBuckets>]
table destroy <table>
table enter <table> <key> <value>
table lookup <table> <key>
table remove <table> <key>
table foreach <table> <proc> [<data>]
    The "table" command is used to create, manipulate and destroy hash tables.
    The entries in the table are keyed on strings and contain strings, as
    you'd expect from Tcl.

tag <routine>
    View the source code for a routine belonging to the current
    patient or the view-default patient.

target [<object>]
    Prints the target hierarchy below an object.

tbrk <addr> <condition>*
tbrk del <tbrk>+
tbrk list
tbrk cond <tbrk> <condition>*
tbrk count <tbrk>
tbrk reset <tbrk>
tbrk address <tbrk>
    This command manipulates breakpoints that tally the number of times they
    are hit without stopping execution of the machine -- the breakpoint is
    noted and the machine is immediately continued. Such a breakpoint allows
    for real-time performance analysis, which is nice.

tcl-debug top 
tcl-debug next <tcl-frame>
tcl-debug prev <tcl-frame>
tcl-debug args <tcl-frame>
tcl-debug getf <tcl-frame>
tcl-debug setf <tcl-frame> <flags>
tcl-debug eval <tcl-frame> <expr>
tcl-debug complete <tcl-frame>
tcl-debug next-call 
tcl-debug tbrk <proc>+
    This provides access to the internals of the Tcl interpreter for the Tcl
    debugger (which is written in Tcl, not C). It will not function except
    after the debugger has been entered.

tcov set <proc>
tcov reset <proc>
tcov print [-s] <proc>
tcov clear <proc>
    Uses the "tbrk" command to perform basic-block profiling of one or
    more procedures.

tcplog {args}
    Allow automatic Tcp packet header logging.  Log output will be 
    written to the file "tcplog" in the users home directory.

tcsh [<command line editing specification>]
tcsh off
tcsh cle [<command line editing specification>]
tcsh cle off
tcsh hist [on]
tcsh hist off
    This command implements enhanced command line editing, similar to that
    found in the tcsh shell. It also enables an enhancement to the history
    mechanism that searches the command history for elements whose beginnings
    match the current command line (similar to history-search-forward and
    -backward from tcsh).

telnetcmdwatch sent
telnetcmdwatch recv
telnetcmdwatch all
telnetcmdwatch clear
telnetcmdwatch
    Set watch points of TelnetCommand send and/or received.

telnetoptwatch sent
telnetoptwatch recv
telnetoptwatch all
telnetoptwatch clear
telnetoptwatch
    Set watch points on Telnet options sent and/or received.

thaw [ <patient> | :<n> | <patient>:<n> | <id> ]
    Thawing a thread restores its priority to what it was before the thread
    was frozen.

thread id <thread>
thread register <thread> <regName>
thread handle <thread>
thread endstack <thread>
thread number <thread>
thread all
    Returns information about a thread, given its thread token. Thread tokens
    can be obtained via the "patient threads" command, or the "handle other"
    command applied to a thread handle's token.

threadname <id>
    Given a thread handle, produces the name of the thread, in the form
    <patient>:<n>

threadstat
    Provides information about all threads and various thread queues and
    synchronization points in the system.

time <body> <count>
    This command is used to measure the time needed to execute a command.

timebrk <start-addr> <end-addr>+
timebrk del <timebrk>+
timebrk list
timebrk time <timebrk>
timebrk reset <timebrk>
    This command manipulates breakpoints that calculate the amount of time
    executing between their starting point and a specified ending point. The
    breakpoints also record the number of times their start is hit, so you can
    figure the average amount of time per hit.
    
    Prints out the list of objects registered for an object's GCN list, as well
    as any status message stored for that list.

    Prints out the list of objects registered for a GCN list, as well as
    any status message stored for that list.

timer-profile new [<geode>]	resets timer profile buffer to start collecting
a new set of data.
timer-profile routine   	summarizes profile data by routine
timer-profile resource  	summarizes profile data by resource
    Manages & prints analysis of the Kernel's Timer Profile Buffer.

tmem
    Trace memory usage.

tnimbus
    Trace Nimbus character data commands while building characters.

top-level
    This is the top-most read-eval-print loop of the Swat Tcl interpreter.

track-refs (on|off)
    Provides the information needed to find what is leaving around references to
    Clavin messages. It prints out what routine (outside the DBQ module) is
    causing each reference to be added or removed. You can pair them up to
    find which is missing the required DBQDelRef call.

tswalk <address>
    Print a TextStrings block for ascii printing.

tundocalls [-acPCrR]
	This prints out information about each undo call made to the
	text object.

twalk [flags]
    List all the timers currently active in GEOS.

type <basic-type-name>
type make array <length> <base-type>
type make pstruct (<field> <type>)+
type make struct (<field> <type> <bit-offset> <bit-length>)+
type make union (<field> <type>)+
type make <ptr-type> <base-type>
type delete <type>
type size <type>
type class <type>
type name <type> <var-name> <expand>
type aget <array-type>
type fields <struct-type>
type members <enum-type>
type pget <ptr-type>
type emap <num> <enum-type>
type signed <type>
type field <struct-type> <offset>
type bfget <bitfield-type>
    Provides access to the type descriptions by which all PC-based data are
    manipulated in Swat, and allows a Tcl procedure to obtain information
    about a type for display to the user, or for its own purposes. As with
    other Swat commands, this works by calling one subcommand to obtain an
    opaque "type token", which you then pass to other commands.

unalias <name>+
    This removes any alias for the given command(s).

unassemble [<addr> [<decode-args>]]
    This decodes data as machine instructions and returns them to you for
    you to display as you like. It is not usually typed from the command
    line.

unbind-key <ascii_value>
    unbinds the passed ascii value 

unblock  [ <patient> | :<n> | <patient>:<n> | <id> ]
     Undo the effects of the block command.  Make a thread runnable.

undebug <proc-name>+
    Removes a breakpoint set by a previous "debug" command.

up [<frame offset>]
    Move the frame up the stack.

update-scrolled-highlight
    updates the highlightinfo from TCL

uplevel <level> <body>
uplevel <function> <body>
    Provides access to the variables of another procedure for fairly specialized
    purposes.

value fetch <addr> [<type>]
value store <addr> <value> [<type>]
value hfetch <num>
value hstore <addr-list>
value hset <number-saved>
    This command allows you to fetch and alter values in the target PC. It is
    also the maintainer of the value history, which you normally access via
    @<number> terms in address expressions.

var repeatCommand <string>
    This variable holds the command Swat should execute if the user enters
    an empty command. It is used by all the memory-referencing commands to
    display the next chunk of memory, and can be used for other purposes as
    well.

var waitForPatient (1|0)
    Determines whether the command-level patient-continuation commands (step,
    next, and cont, for example) will wait for the machine to stop before
    returning.

var printObjLongClassName (0|1)
var printNamesInObjTrees (0|1)
    Determines whether object names are printed (where available) rather
    than class names when using the following commands:
    	vistree
    	gentree
    	focus
    	target
    	model
    	mouse
    	keyboard

var symbolCompletion (0|1)
syntax diagram
    This variable controls whether you can ask Swat to complete a symbol
    for you while you're typing a command. Completion is currently very
    slow and resource-intensive, so you probably don't want to enable it.

var fatalerr_auto_explain (1|0)
    Determines if the "why" command will automatically provide you with an
    explanation of any fatal error you encounter. If non-zero, they will
    be provided whenever FatalError is hit.

var objtreeDepth (0-9+)
    Controls how deep to print an object tree when using the
    following commands:
    	vistree
    	gentree

var condenseSmall (1|0)
    Controls whether "print" attempts to condense the output by printing
    small (< 4 bytes) structures (which are usually records in assembly
    language) as a list of <name> = <int>, where <name> is the field
    name and <int> is a signed integer.

var <name>
var (<name> <value>)+
    This is the means by which variables are defined in Tcl. Less often, it is
    also used to retrieve the value of a variable (usually that's done via
    variable substitution).

var intFormat <format-string>
    $intFormat contains the string passed to the "format" command to print
    an integer.

var condenseSpecial (1|0)
    Controls the formatting of certain structures in more-intuitive ways
    than the bare structure fields.

var byteAsChar (0|1)
    Determines how unsigned character variables are printed: if set non-zero,
    they are displayed as characters, else they are treated as unsigned
    integers.

var printRegions (1|0)
    Controls whether "print" parses regions to find their bounding rectangle.

var debugOnError (0|1)
    Enter debug mode when Swat encounters a Tcl error.

var noStructEnum (0|1)
    Structure fields that are structures or enumerated types normally have
    "struct" or "enum" as part of their type description. This usually
    just clutters up the display, however, so this variable shuts off this
    prepending.

var alignFields (0|1)
    Determines whether structure-field values follow immediately after the
    field name or if all values are indented to the same level.

var dwordIsPtr (1|0)
    Controls whether dword (aka. long) variables are printed as 32-bit
    unsigned integers or untyped far pointers.

varwin [<flags>] <variables>
    Turn on a continuous display of the specified variables.

verbose                    display status (currently set keys)
verbose classes            display all valid classes
verbose keys [<class>]     display all valid keys for class
verbose set|on <class> [<key>...]   
sets the report points for keys in class
verbose unset|off [<class>] [<key>...]   
unsets the report points for keys in class
verbose points [<class>]   display all report points set for class
    Allows you to easily enable keys, which tell swat to display useful 
    information during execution.

vi [<args>]
    Invoke "vi" with the specified arguments.

view [<file>] [<startLine>]
    View a file in the source window.

view-default [patient]
    Specify the patient from which the view command will automatically
    look for source files.

vif [<function name>]
    Start vi with a function loaded.

vistree [<address>] [<instance field>]
    Print out a visual tree.

vms -a
vms -o
    Prints info about the VM store

vup [<address>] [<instance field>]
    Print a list of the object and all of its visual ancestors.

wait
    This is used after the machine has been continued with "continue-patient"
    to wait for the machine to stop again. Its use is usually hidden by
    calling "cont" or "next".

waitpostinfo
    Print wait/info test info.  This is an internal command.

wclear
    Clears all the characters in the current window to spaces.

wcreate <num-lines>
    Creates a window into which output may be placed without disturbing or
    being disturbed by the main command window.

wdelete <window>
    Deletes a window and enlarges the command window accordingly.

wdim <window>
    Extracts the origin and dimensions of a window, for use in calculating
    the layout of echoed things, for example.

wfind <x> <y>
    Locates the window that contains a given screen coordinate and returns
    its token.

whatat [<address>]
    Print the name of the variable at the address.

whatis (<symbol-name>|<addr>)
    This produces a human-readable description of a symbol, giving whatever
    information is pertinent to its type.

where
    Prints out the state of the current thread by printing out all active stack
    frames & a list of any messages pending in its queue.

which [-d] [<gname>]
    Display which version of a geode is in use.

why
    Print a description of why the system crashed.

wintree <window handle> [<data field>]
    Print a window tree starting with the root specified.

winverse ( 1 | 0 )
    Allows you to highlight characters echoed to the current window.

wmove [+|-]<x> [+|-]<y>
    Moves the cursor for the current window, thereby adjust where input is
    echoed and where output goes.

words [<address>] [<length>]
    Examine memory as a dump of words.

workset start <geode> [flags]   Start working set analysis on <geode>
workset end	    	    	    End working set analysis
workset time <num>	    	    Define a working set to be <num> seconds
(0 means forever, default is 5)
workset summary    	    	    Print working set information -- summary
workset info [sort fields] 	    Print working set information -- full
    This uses hooks in the EC kernel to provided working-set information for
    a particular geode. The working-set of a geode is the set of blocks
    that have been used in the recent past (the exact amount of time is
    configurable).

wpop
    Restores the window that was overridden by the most recent "wpush" to
    I/O supremacy.

wpush <window>
    Redirects all input and output to pass through the indicated window.

wrefresh
    Synchronizes the current window with the screen, so the are of the screen
    covered by the window looks like what's in the window.

wtop ( 1 | 0 )
    Allows you to have all the displays, regwins, etc., placed above the main,
    scrolling input window, if you so desire.

xipwalk	    	print out info on all XIP resources
xipwalk -p <num>  	print out info on all XIP resource in XIP page <num>
}
{
var	xipPage -1
xipwatch <patient>
xipwatch none [<patient>]
    This command allows you to discover whether any of your code resources
    are being inadvertently brought into memory from the XIP image.

xmsread <xms handle>, <xms nextHandle>, <xms offset>, <sizeOfXmsPage, 
<xmsAddr offset>, <type>, <size>
")
{
byte   *rdata;
unsigned long   offset, sizeOfXmsPage;
unsigned short  handle, nextHandle, xmsAddrOffset, size;
Type    type;
Boolean success;
