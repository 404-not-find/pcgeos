break.c:     * If breakpoint patient-specific, we have to convert the
break.c:	char	*name = malloc(strlen(bp->patient->name) + 1);
break.c:	strcpy(name, bp->patient->name);
break.c:	int len = strlen(patient->name);
break.c:	if ((strncmp(expr, patient->name, len) == 0) && (expr[len] == ':')) {
break.c:    len = strlen(patient->name);
break.c:	MessageFlush("%s starting...", patient->name);
break.c:	if ((strncmp(bp->fullname, patient->name, len) == 0) &&
break.c:	    (strcmp((char *)bp->patient, patient->name) == 0))
break.c:				 patient->name,
break.c:	 * If the breakpoint is patient-specific, look for the patient handle.
break.c: * SYNOPSIS:	    Deal with any patient-specific breakpoints for a
break.c:	pname = bp->patient ? bp->patient->name : 0;
break.c:	Warning("Can't set patient-specific conditional breakpoints now");
break.c:	 * Assuming we're to set a non-patient-specific, permanent breakpoint.
break.c:		MessageFlush("Clear all non-patient-specific breakpoints?[yn](n) ");
break.c:			     patient->name);
cmd.c:	for (i = patient->numRes, rp = patient->resources; i > 0; i--,rp++)
cmdAM.c:		patient->line = -1;
cmdNZ.c: *	patient->scope is altered for the new scope, if it is found.
expr.c:				if (state->patient->frame == NullFrame) {
expr.c:					     state->patient->name);
expr.c:				    MD_GetFrameRegister(state->patient->frame,
expr.c:				if (state->patient->frame == NullFrame) {
expr.c:					     state->patient->name);
expr.c:				    (*MD_GetFrameRegister)(state->patient->frame,
expr.c:    if (!Sym_Equal(Sym_Scope(sym, FALSE),patient->global)) {
expr.c:    assert(patient->resources != (ResourcePtr)NULL);
expr.c:    for(i = patient->numRes, rp = patient->resources; i > 0; i--, rp++) {
expr.c:    if ((patient->frame != NullFrame) && !Sym_IsNull(patient->frame->scope)) {
expr.c:	sym = ExprLookInScopeChain(id, patient->frame->scope);
expr.c:    if (Sym_IsNull(sym) && !Sym_IsNull(patient->scope)) {
expr.c:	sym = ExprLookInScopeChain(id, patient->scope);
expr.c:	sym = Sym_Lookup(id, SYM_ANY, patient->global);
expr.c:	    } else if (state->patient->frame == NullFrame) {
expr.c:			 state->patient->name);
expr.c:		(*MD_GetFrameRegister)(state->patient->frame,
expr.c:		(*MD_GetFrameRegister)(state->patient->frame,
expr.c:    state.frame = state.patient->frame;
handle.c: *	    	the patient-dependent interface has created/found the
handle.c: * CALLED BY:	patient-dependent interface
handle.c:    assert(patient->resources != NULL);
handle.c:		((hp->patient->core != handle) ||
handle.c:		hp->patient->name);
handle.c:	assert(hp->patient->resources != NULL);
handle.c:	assert(hp->patient->resources != NULL);
handle.c:					(GeodeName *)&patient->geode.v2->geodeFileType :
handle.c:					(GeodeName *)&patient->geode.v1->geodeFileType),
handle.c:		       Sym_ToAscii(hp->patient->resources[(int)hp->otherInfo].sym),
ibm.c:	    patient->object = fopen(patient->path, "rb");
ibm.c:	    setvbuf(patient->object, buffer, _IOFBF, IBM_BUFFER_SIZE);
ibm.c:	    assert(patient->object != NULL);
ibm.c: *	    	    patient->object set to NULL.
ibm.c:    fclose(patient->object);
ibm.c:    patient->object = NULL;
ibm.c:	patient->core = NullHandle;
ibm.c:    assert(VALIDTPTR(patient->name, TAG_PNAME) ||
ibm.c:    assert(VALIDTPTR(patient->path, TAG_PNAME));
ibm.c:/*    assert(VALIDTPTR(patient->global, TAG_SYM) ||
ibm.c:	   (patient->global == NULL));*/
ibm.c:    assert(VALIDTPTR(patient->frame, TAG_FRAME) ||
ibm.c:	   (patient->frame == NULL));
ibm.c:    assert(VALIDTPTR(patient->core, TAG_HANDLE) || (patient->core == NULL));
ibm.c:    assert(VALIDTPTR(patient->geode.v1, TAG_PATIENT) ||
ibm.c:	   (patient->geode.v1 == NULL && patient == (rel2 ? loader : kernel)));
ibm.c:    assert(VALIDTPTR(patient->curThread,TAG_THREAD) ||
ibm.c:	   (patient->curThread == NULL));
ibm.c:    assert(VALIDTPTR(patient->libraries,TAG_PATIENT) ||
ibm.c:	   (patient->numLibs == 0));
ibm.c:    assert(VALIDTPTR(patient->resources,TAG_PATIENT) ||
ibm.c:	   (patient->numRes == 0));
ibm.c:	patient->scope = patient->global;
ibm.c:	    (patient->curThread != (Thread)realCurThread))
ibm.c:	    patient->curThread = (Thread)realCurThread;
ibm.c:    patient->curThread = (Thread)thread;
ibm.c:    patient->scope = patient->global;
ibm.c:    for (ln=Lst_First(patient->threads); ln!=NILLNODE; ln=Lst_Succ(ln)) {
ibm.c:		     patient->name);
ibm.c:    Lst_AtEnd(patient->threads, (LstClientData)thread);
ibm.c:    IbmDestroyAlias(patient->name);
ibm.c:    Lst_Open(patient->threads);
ibm.c:    while ((tln = Lst_Next(patient->threads)) != NILLNODE) {
ibm.c:	    Lst_Remove(patient->threads, tln);
ibm.c:    Lst_Close(patient->threads);
ibm.c:    if (Lst_IsEmpty(patient->threads)) {
ibm.c:	patient->curThread = (Thread)NULL;
ibm.c:	patient->curThread =
ibm.c:	    (Thread)Lst_Datum(Lst_First(patient->threads));
ibm.c:    patient->scope = NullSym;
ibm.c:			      (GeodeName *)&patient->geode.v2->geodeFileType :
ibm.c:			      (GeodeName *)&patient->geode.v1->geodeFileType),
ibm.c:	VMClose(patient->symFile);
ibm.c:    patient->symFile = (Opaque)NULL;
ibm.c:    if (((rel2 && patient->geode.v2 &&
ibm.c:	  (patient->geode.v2->execHeader.attributes & GA_DRIVER)) ||
ibm.c:	 (!rel2 && patient->geode.v1 &&
ibm.c:	  (patient->geode.v1->execHeader.attributes & GA_DRIVER))))
ibm.c: * SIDE EFFECTS:    patient->symFile set to file handle, if successful
ibm.c:	if (patient->geode.v2) {
ibm.c:	    other = IbmFindOtherInstance((GeodeName *)&patient->geode.v2->geodeFileType,
ibm.c:    } else if (patient->geode.v1) {
ibm.c:	other = IbmFindOtherInstance((GeodeName *)&patient->geode.v1->geodeFileType,
ibm.c:	path = (char *)malloc(strlen(patient->path)+4+1);
ibm.c:	strcpy(path, patient->path);
ibm.c:	suffix = &path[strlen(patient->path)];
ibm.c:	patient->symFile = VMOpen(VMO_OPEN|FILE_DENY_W|FILE_ACCESS_R, 0, path,
ibm.c:	if (patient->symFile == NULL) {
ibm.c:	malloc_settag(patient->symFile, TAG_VMFILE);
ibm.c:	if (VMGetVersion(patient->symFile) > 1) {
ibm.c:	    VMGetHeader(patient->symFile, (genptr)&gfh);
ibm.c:	    VMGetHeader(patient->symFile, (genptr)&gfh);
ibm.c:	    VMClose(patient->symFile);
ibm.c:	map = VMGetMapBlock(patient->symFile);
ibm.c:	    VMClose(patient->symFile);
ibm.c:	hdr = (ObjHeader *)VMLock(patient->symFile, map, (MemHandle *)NULL);
ibm.c:	    VMUnlock(patient->symFile, map);
ibm.c:	    VMClose(patient->symFile);
ibm.c:	    VMSetReloc(patient->symFile, ObjSwap_Reloc);
ibm.c:	VMUnlock(patient->symFile, map);
ibm.c:	patient->symFile = other->symFile;
ibm.c:		   patient->geode.v2->geodeName :
ibm.c:		   patient->geode.v1->geodeName),
ibm.c:		  patient->geode.v2->geodeSerial :
ibm.c:		  patient->geode.v1->geodeSerial) != gnp->serial) ||
ibm.c:		 * patient-specific breakpoints...)
ibm.c:		for (i = 1; i < patient->numRes; i++) {
ibm.c:		    if (!(patient->resources[i].flags & RESF_READ_ONLY)) {
ibm.c:			Handle_Free(patient->resources[i].handle);
ibm.c:			patient->resources[i].handle = NullHandle;
ibm.c:		    } else if (Handle_Patient(patient->resources[i].handle) ==
ibm.c:		    free((malloc_t)patient->resources);
ibm.c:		    patient->resources = NULL;
ibm.c:		    patient->numRes = 0;
ibm.c:		MessageFlush("Re-using patient %s\n", patient->name);
ibm.c:		patient->resources[0].handle = patient->core = core;
ibm.c:		patient->core->otherInfo = 0;
ibm.c:		Handle_Interest(patient->core, IbmCoreInterest,
ibm.c:		Var_FetchInt(2, patient->core,
ibm.c:		for (i = 1; i < patient->numRes; i++) {
ibm.c:		    if (!(patient->resources[i].flags & RESF_READ_ONLY) ||
ibm.c:			(Handle_ID(patient->resources[i].handle) == 0))
ibm.c:			Var_FetchInt(2, patient->core,
ibm.c:			Handle_Reset(patient->resources[i].handle, resid);
ibm.c:		for (i = 0; i < patient->numLibs; i++) {
ibm.c:		    if (patient->libraries[i]->numRes == 0) {
ibm.c:			patient->libraries[i] =
ibm.c:			    Patient_ByName(patient->libraries[i]->name);
ibm.c:			if (patient->libraries[i] == NULL) {
ibm.c:			    if (i != patient->numLibs-1) {
ibm.c:				bcopy(&patient->libraries[i+1],
ibm.c:				      &patient->libraries[i],
ibm.c:				      patient->numLibs - (i + 1));
ibm.c:			    patient->numLibs -= 1;
ibm.c:    patient->path = File_FindGeode(name, swaps(gnp->serial),
ibm.c:    if (patient->path == (char *)NULL) {
ibm.c:	malloc_settag(patient->path, TAG_PNAME);
ibm.c:	if (patient->object == NULL) {
ibm.c:	    VMClose(patient->symFile);
ibm.c:    patient->core = core;
ibm.c:    Handle_Interest(patient->core, IbmCoreInterest, (Opaque)patient);
ibm.c:    patient->path = (char *)NULL;
ibm.c:	patient->path = first->path;
ibm.c:	patient->symFile = first->symFile;
ibm.c:	patient->geode = first->geode;
ibm.c:	fseek(patient->object, 0, L_SET);
ibm.c:	    patient->geode.v2 = (Geode2Ptr)malloc_tagged(sizeof(GeodeHeader2),
ibm.c:	    assert(patient->geode.v2 != (Geode2Ptr)NULL);
ibm.c:	    fread(patient->geode.v2, sizeof(GeodeHeader2),
ibm.c:		  1, patient->object);
ibm.c:			      (genptr)patient->geode.v2);
ibm.c:	    patient->geode.v1 = (GeodePtr)malloc_tagged(sizeof(GeodeHeader),
ibm.c:	    assert(patient->geode.v1 != (GeodePtr)NULL);
ibm.c:	    fread(patient->geode.v1, sizeof(GeodeHeader),
ibm.c:		  1, patient->object);
ibm.c:			      (genptr)patient->geode.v1);
ibm.c:    patient->name = (char *)malloc_tagged((cp + 1) - gn.name + ((n>0) ? 4 : 1),
ibm.c:	sprintf(patient->name, "%.*s%d", cp - gn.name + 1, gn.name, n+1);
ibm.c:	sprintf(patient->name, "%.*s", cp - gn.name + 1, gn.name);
ibm.c:    patient->threads 	    = Lst_Init(FALSE);
ibm.c:    patient->curThread	    = (Thread)NULL;
ibm.c:    patient->numRes 	    = (rel2 ?
ibm.c:			       patient->geode.v2->resCount :
ibm.c:			       patient->geode.v1->resCount);
ibm.c:    patient->resources 	    = (ResourcePtr)calloc_tagged(patient->numRes,
ibm.c:	patient->numLibs    = (rel2 ?
ibm.c:			       patient->geode.v2->libCount :
ibm.c:			       patient->geode.v1->libCount);
ibm.c:	patient->libraries  = (Patient *)calloc_tagged(patient->numLibs,
ibm.c:	patient->numLibs    = first->numLibs;
ibm.c:	patient->libraries  = first->libraries;
ibm.c:    assert(patient->object != (FILE *)NULL);
ibm.c:    handles = (word *)malloc(patient->numRes * sizeof(word));
ibm.c:    Var_FetchInt(2, patient->core,
ibm.c:    Ibm_ReadBytes(patient->numRes * sizeof(word),
ibm.c:		  patient->core, (Address)tableOff,
ibm.c:    patient->resources[0].handle = patient->core;
ibm.c:    patient->core->otherInfo = 0;
ibm.c:    for (i = 1; i < patient->numRes; i++) {
ibm.c:	patient->resources[i].handle = Handle_Lookup(swaps(handles[i]));
ibm.c:	Handle_Change(patient->resources[i].handle,
ibm.c:		       Handle_State(patient->resources[i].handle)));
ibm.c:	patient->resources[i].handle->otherInfo = (Opaque)i;
ibm.c:	for (i = 0; i < patient->numRes; i++) {
ibm.c:	    patient->resources[i].offset = first->resources[i].offset;
ibm.c:	    patient->resources[i].flags = first->resources[i].flags;
ibm.c:	if (patient->numLibs != 0) {
ibm.c:	    lp = libraries = (word *)malloc(patient->numLibs * sizeof(word));
ibm.c:	    Var_FetchInt(2, patient->core,
ibm.c:	    Ibm_ReadBytes(patient->numLibs * sizeof(word),
ibm.c:			  patient->core, (Address)tableOff,
ibm.c:	    for (i = 0; i < patient->numLibs; i++, lp++) {
ibm.c:		    patient->numLibs--;
ibm.c:		    patient->libraries[i] = Handle_Patient(handle);
ibm.c:	offsets = (dword *)malloc(patient->numRes * sizeof(dword));
ibm.c:	fseek(patient->object,
ibm.c:	      sizeof(ImportedLibraryEntry) * patient->numLibs +
ibm.c:	      4 * (rel2 ? patient->geode.v2->exportEntryCount :
ibm.c:		   patient->geode.v1->exportEntryCount) +
ibm.c:	      2 * patient->numRes, L_SET);
ibm.c:	fread(offsets, sizeof(dword), patient->numRes, patient->object);
ibm.c:	for (i = 0; i < patient->numRes; i++) {
ibm.c:		patient->resources[i].offset = (((d & 0xff) << 24) |
ibm.c:		patient->resources[i].offset = offsets[i];
ibm.c:		patient->resources[i].offset += sizeof(GeosFileHeader2);
ibm.c:	fseek(patient->object, 2 * patient->numRes, L_INCR);
ibm.c:	flags = (word *)malloc(patient->numRes * 2);
ibm.c:	fread(flags, 2, patient->numRes, patient->object);
ibm.c:	for (i = 0; i < patient->numRes; i++) {
ibm.c:	    patient->resources[i].flags = swaps(flags[i]);
ibm.c:	    if (patient->resources[i].flags & RESF_READ_ONLY) {
ibm.c:		Handle_Change(patient->resources[i].handle, HANDLE_FLAGS,
ibm.c:			       Handle_State(patient->resources[i].handle)));
ibm.c:    patient->scope = patient->global;
ibm.c:    patient->line = -1;
ibm.c:    patient->file = NULL;
ibm.c:    IbmCreateAlias(patient->name);
ibm.c:    if ((rel2 && (patient->geode.v2->execHeader.attributes & GA_DRIVER)) ||
ibm.c:	(!rel2 && (patient->geode.v1->execHeader.attributes & GA_DRIVER)) ||
ibm.c:	(strcmp(patient->name, "klib") == 0))
ibm.c:	strcmp(patient->name, (char *)defaultPatient) == 0)
ibm.c:    patient->patientPriv = NullOpaque;
ibm.c:    Ibm_NewThread(id, Handle_ID(patient->core), 0, 0, FALSE, HANDLE_KERNEL);
ibm.c:    patient->curThread = (Thread)Lst_Datum(Lst_First(patient->threads));
ibm.c:    kthread = (ThreadPtr)patient->curThread;
ibm.c:    if (patient->geode.v2 != NULL) {
ibm.c:	(void)fseek(patient->object,
ibm.c:	fread((char *)&udataSize, sizeof(udataSize), 1, patient->object);
ibm.c:	    (patient->resources[1].size + udataSize + 15) & ~0xf;
ibm.c:	kthread->stack = patient->resources[1].handle;
ibm.c:	map = VMGetMapBlock(patient->symFile);
ibm.c:	hdr = (ObjHeader *)VMLock(patient->symFile, map, (MemHandle *)NULL);
ibm.c:	kthread->stack = patient->resources[i].handle;
ibm.c:	VMUnlock(patient->symFile, map);
ibm.c:		     patient->name, tea->tea_status);
ibm.c:	MessageFlush("%s exited.\n", patient->name);
ibm.c:	if (Lst_IsEmpty(patient->threads)) {
ibm.c:	    patient->patientPriv = (Opaque)1;
ibm86.c:				     * must be fetched from the patient-
ibm86.c:	((Ibm86PrivPtr)patient->mdPriv)->validate = TRUE;
ibm86.c:	pPrivPtr = (Ibm86PrivPtr)patient->mdPriv;
ibm86.c:	    patient->frame = (Frame *)NULL;
ibm86.c:				   prevFrame->patient->global);
ibm86.c:    patient->mdPriv =	    	    (Opaque)privPtr;
ibm86.c:    if ((strcmp(patient->name, "geos") == 0) ||
ibm86.c:	(strcmp(patient->name, "kernel") == 0))
ibm86.c:	sym = Sym_LookupInScope("ThreadPrivateData", SYM_TYPE, patient->global);
ibm86.c:	     * yet, so when the lookup in patient->global fails, we fail
ibm86.c:	    kcode = Sym_LookupInScope("kcode", SYM_MODULE, patient->global);
ibm86.c:	    for (i = 0; i < patient->numRes; i++) {
ibm86.c:		if (Sym_Equal(kcode, patient->resources[i].sym)) {
ibm86.c:		    addr.handle = patient->resources[i].handle;
ibmCache.c:		    for (i = patient->numRes, rp = patient->resources;
ibmCache.c:		    fseek(patient->object, rp->offset+keyPtr->offset, L_SET);
ibmCache.c:		    fread(block, 1, cacheBlockSize, patient->object);
ibmCache.c:		    for (i = patient->numRes, rp = patient->resources;
ibmCache.c:		    fseek(patient->object, rp->offset+patientAddress, L_SET);
ibmCache.c:		    fread((void *)swatAddress, 1, numBytes, patient->object);
ibmCmd.c: * MODULE:	  Swat -- Tcl-level patient-dependent interface
ibmCmd.c: *	Tcl-level patient-dependent interface
ibmCmd.c:	    permName = patient->geode.v2 ? patient->geode.v2->geodeName : "";
ibmCmd.c:	    permName = patient->geode.v1 ? patient->geode.v1->geodeName : "";
ibmCmd.c:	    if (patient->curThread) {
ibmCmd.c:			      patient->name,
ibmCmd.c:			      ((ThreadPtr)patient->curThread)->number);
ibmCmd.c:			      patient->name,
ibmCmd.c:	    Tcl_Return(interp, patient->name, TCL_VOLATILE);
ibmCmd.c:	    if (Lst_IsEmpty(patient->threads)) {
ibmCmd.c:		    (char *)malloc_tagged(Lst_Length(patient->threads) * 16,
ibmCmd.c:		for (ln = Lst_First(patient->threads);
ibmCmd.c:	    if (patient->numRes) {
ibmCmd.c:		cp = retval = (char *)malloc_tagged(patient->numRes * 16,
ibmCmd.c:		for (i = 0; i < patient->numRes; i++) {
ibmCmd.c:		    sprintf(cp, "%d ", patient->resources[i].handle);
ibmCmd.c:	    if (patient->numLibs) {
ibmCmd.c:		cp = retval = (char *)malloc_tagged(patient->numLibs * 16,
ibmCmd.c:		for (i = 0; i < patient->numLibs; i++) {
ibmCmd.c:		    sprintf(cp, "%d ", (int)patient->libraries[i]);
ibmCmd.c:	    if (*patient->path != '/') {
ibmCmd.c:	    if (*patient->path != '/' && *patient->path != '\\' &&
ibmCmd.c:		patient->path[1] != ':') {
ibmCmd.c:		Tcl_RetPrintf(interp, "%s/%s", cwd, patient->path);
ibmCmd.c:		Tcl_Return(interp, patient->path, TCL_STATIC);
ibmCmd.c:	 * Either a patient-only or a thread ID
ibmCmd.c:	} else if (!Lst_IsEmpty(patient->threads)) {
ibmCmd.c:	    thread = (ThreadPtr)Lst_Datum(Lst_First(patient->threads));
ibmCmd.c:	    for (ln = Lst_First(patient->threads);
ibmCmd.c:			      patient->name, tnum);
ibmCmd.c:	for (ln = Lst_First(patient->threads);
ibmCmd.c:			  patient->name, tnum);
ibmCmd.c:    patient->libraries =
ibmCmd.c:	    (Patient *)realloc_tagged((void *)patient->libraries,
ibmCmd.c:				       (++patient->numLibs * sizeof(Patient)));
ibmCmd.c:    patient->libraries[patient->numLibs-1] = lib;
patient.c:    return (strcmp(patient->name, name));
src.c:    path = patient->path;
src.c:    symFile = patient->symFile;
src.c:				  patient->global);
src.c:		for (n = 0; n < patient->numRes; n++) {
src.c:		    if (Sym_Equal(msym, patient->resources[n].sym)) {
src.c:			*handlePtr = patient->resources[n].handle;
src.c:		assert(n != patient->numRes);
src.c:    for(i = 0; i < patient->numLibs; i++) {
src.c:	if (SrcFindLine(patient->libraries[i], file, line,
src.c:    os = SymLock(patient->resources[(int)handle->otherInfo].sym);
src.c:    map = VMGetMapBlock(patient->symFile);
src.c:    hdr = (ObjHeader *)VMLock(patient->symFile, map,
src.c:	oamh = (ObjAddrMapHeader *)VMLock(patient->symFile,
src.c:	    olh = (ObjLineHeader *)VMLock(patient->symFile,
src.c:		    VMUnlock(patient->symFile, oame->block);
src.c:	    VMUnlock(patient->symFile, oame->block);
src.c:	VMUnlock(patient->symFile, s->lines);
src.c:    VMUnlock(patient->symFile, map);
src.c:	    char    *fname = ST_Lock(patient->symFile, file);
src.c:		char	*cp = rindex(patient->path, '/');
src.c:		    sprintf(afile, "%s/%s", patient->path, fname);
src.c:	    ST_Unlock(patient->symFile, file);
sym.c:    if (patient->symFile != NULL) {
sym.c:	id = SymLookupIDLen(name, len, patient->global);
sym.c:	    for (i = 0; i < patient->numRes; i++) {
sym.c:		sym = SymLookup(id, class, patient->resources[i].sym);
sym.c:    if (patient->libraries == NULL) {
sym.c:	assert(patient->numLibs == 0);
sym.c:	for (i = patient->numLibs, libraryPtr = patient->libraries;
sym.c:    fsym.file = (VMHandle)patient->symFile;
sym.c:    patient->global = *(Sym *)&fsym;
sym.c:    for (i = 0; i < patient->numRes;) {
sym.c:	patient->resources[i].sym = *(Sym *)&fsym;
sym.c:	    patient->resources[i].size = s->size;
sym.c:    for (i = 0; i < patient->numRes; i++) {
sym.c:	SymbolMatch(pattern, class, patient->resources[i].sym, result);
sym.c:	for (i = patient->numLibs, libraryPtr = patient->libraries;
sym.c:	    if (patient->symFile == file) {
sym.c:	    if (patient->symFile == file) {
sym.c:    for (i = 0; i < patient->numRes; i++) {
sym.c:	if (Sym_Equal(module, patient->resources[i].sym)) {
sym.c:	    addrPtr->handle = patient->resources[i].handle;
sym.c:    assert(i != patient->numRes);
sym.c:			    newscope = patient->global;
sym.c:	module = patient->resources[(int)handle->otherInfo].sym;
sym.c:	map = VMGetMapBlock(patient->symFile);
sym.c:	hdr = (ObjHeader *)VMLock(patient->symFile, map, (MemHandle *)NULL);
sym.c:	    oamh = (ObjAddrMapHeader *)VMLock(patient->symFile,
sym.c:		osh = (ObjSymHeader *)VMLock(patient->symFile,
sym.c:		    SymFile(sym) = patient->symFile;
sym.c:		    VMUnlock(patient->symFile, oame->block);
sym.c:		    VMUnlock(patient->symFile, oame->block);
sym.c:	    VMUnlock(patient->symFile, s->addrMap);
sym.c:	VMUnlock(patient->symFile, map);
sym.c:	length = strlen(patient->name) + 2 + 1;
sym.c:	length += strlen(patient->name) + 2;
sym.c:	length = strlen(patient->name);
sym.c:	bcopy(patient->name, cp, length);
type.c:	    *sP = Sym_Lookup(name, SYM_TYPE, patient->global);
