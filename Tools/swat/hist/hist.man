





_h_i_s_t - _s_t_a_n_d _a_l_o_n_e _h_i_s_t_o_r_y _s_u_b_s_t_i_t_u_t_i_o_n_s


#_i_n_c_l_u_d_e <_s_t_d_i_o._h>
#_i_n_c_l_u_d_e "_h_i_s_t._h"

_h_i_G_e_t_s(_r_e_t_L_i_n_e, _h_q, _f_p_t_r)
_c_h_a_r **_r_e_t_L_i_n_e;         /* _a_d_d_r_e_s_s _o_f (_c_h_a_r *)  */
_H_I_Q_U_E_U_E *_h_q;            /* _c_u_r_r_e_n_t _h_i_s_t_o_r_y _p_t_r  */
_F_I_L_E *_f_p_t_r;             /* _f_i_l_e _t_o _r_e_a_d _f_r_o_m    */

_h_i_F_G_e_t_s(_r_e_t_L_i_n_e, _h_q, _f_p_t_r)
_c_h_a_r **_r_e_t_L_i_n_e;         /* _a_d_d_r_e_s_s _o_f (_c_h_a_r *)  */
_H_I_Q_U_E_U_E *_h_q;            /* _c_u_r_r_e_n_t _h_i_s_t_o_r_y _p_t_r  */
_F_I_L_E *_f_p_t_r;             /* _f_i_l_e _t_o _r_e_a_d _f_r_o_m    */

_h_i_S_G_e_t_s(_r_e_t_L_i_n_e, _h_q, _s)
_c_h_a_r **_r_e_t_L_i_n_e;         /* _a_d_d_r_e_s_s _o_f (_c_h_a_r *)  */
_H_I_Q_U_E_U_E *_h_q;            /* _c_u_r_r_e_n_t _h_i_s_t_o_r_y _p_t_r  */
_c_h_a_r *_s;                        /* _s_t_r_i_n_g _t_o _r_e_a_d _f_r_o_m  */

_H_I_Q_U_E_U_E *
_h_i_Q_i_n_i_t(_s_i_z_e)
_i_n_t _s_i_z_e;                       /* _l_e_n_g_t_h _o_f _h_i_s_t_o_r_y    */

_h_i_F_E_r_r_o_r(_s, _f_p_t_r)
_c_h_a_r *_s;                        /* _m_e_s_s_a_g_e _a_b_o_u_t _e_r_r_o_r  */
_F_I_L_E *_f_p_t_r;             /* _f_i_l_e _t_o _p_r_i_n_t _o_u_t _o_n */

_h_i_E_r_r_o_r(_s)
_c_h_a_r *_s;                        /* _m_e_s_s_a_g_e _a_b_o_u_t _e_r_r_o_r  */

_h_i_F_P_r_i_n_t(_h_q, _n_u_m, _f_p_t_r)
_H_I_Q_U_E_U_E *_h_q;            /* _c_u_r_r_e_n_t _h_i_s_t_o_r_y _p_t_r  */
_i_n_t _n_u_m;                        /* _l_i_n_e_s _t_o _p_r_i_n_t       */
_F_I_L_E *_f_p_t_r;             /* _f_i_l_e _t_o _p_r_i_n_t _o_u_t _o_n */

_h_i_P_r_i_n_t(_h_q, _n_u_m)
_H_I_Q_U_E_U_E *_h_q;            /* _c_u_r_r_e_n_t _h_i_s_t_o_r_y _p_t_r  */
_i_n_t _n_u_m;                        /* _l_i_n_e_s _t_o _p_r_i_n_t       */

_h_i_S_e_t(_s_i_z_e)
_i_n_t _s_i_z_e;                       /* _r_e_s_e_t _h_i_s_t_o_r_y _l_e_n_g_t_h */

_h_i_F_r_e_e(_h_i)
_H_I_S_T *_h_i;                       /* _f_r_e_e _u_p _h_i_s_t_o_r_y _l_i_s_t */

_h_i_R_e_m(_h_q)
_H_I_Q_U_E_U_E *_h_q;            /* _r_e_m_o_v_e _t_h_e _l_a_s_t _l_i_n_e */

_h_i_F_E_c_h_o_L_i_n_e(_h_i, _f_p)
_H_I_S_T *_h_i;                       /* _h_i_s_t_o_r_y _l_i_n_e _t_o _u_s_e  */
_F_I_L_E *_f_p;                       /* _f_i_l_e _t_o _p_r_i_n_t _o_u_t _o_n */




                     February 15, 1986





                           - 2 -


_h_i_E_c_h_o_L_i_n_e(_h_i)
_H_I_S_T *_h_i;                       /* _h_i_s_t_o_r_y _l_i_n_e _t_o _u_s_e  */

_h_i_F_E_c_h_o_W_o_r_d(_h_i, _i, _f_p)
_H_I_S_T *_h_i;                       /* _h_i_s_t_o_r_y _l_i_n_e _t_o _u_s_e  */
_i_n_t _i;                  /* _w_o_r_d _t_o _p_r_i_n_t _o_u_t    */
_F_I_L_E *_f_p;                       /* _f_i_l_e _t_o _p_r_i_n_t _o_u_t _o_n */

_h_i_E_c_h_o_W_o_r_d(_h_i, _i)
_H_I_S_T *_h_i;                       /* _h_i_s_t_o_r_y _l_i_n_e _t_o _u_s_e  */
_i_n_t _i;                  /* _w_o_r_d _t_o _p_r_i_n_t _o_u_t    */


_H_i_s_t allows one to enter input from stdin (or  from  a  some
other  file) and have simple history expansions in the style
of _c_s_h (_1) expanded.  The user may specify the length of the
history,  and  the history substitution characters. _h_i_G_e_t_s()
is the main entry point, taking user input from a  (_F_I_L_E  *)
and referencing a history queue (_H_I_Q_U_E_U_E *).  _h_i_F_G_e_t_s() per-
forms the same function, but leaving on  the  trailing  new-
line;  this is much like the difference between _g_e_t_s (_3) and
_f_g_e_t_s (_3).  _h_i_S_G_e_t_s() performs the same  function,  only  it
takes input from a user-supplied string.

     There are two kinds of history substitution characters.
The  _l_i_n_e  _s_u_b_s_t_i_t_u_t_i_o_n  characters ( '!' in _c_s_h (_1) and the
default here also) and _l_a_s_t _l_i_n_e substitutions ( '^' in  _c_s_h
(_1) and the default here also).

     After the history is  initialized  with  the  _h_i_Q_i_n_i_t()
function,  one may use the _h_i_G_e_t_s() family for input, resize
the history (up or down) with _h_i_S_e_t() , print out  the  his-
tory  with  the  _h_i_P_r_i_n_t()  family or print the error status
with the _h_i_E_r_r_o_r() family as necessary.  The _h_i_G_e_t_s() family
returns  to the caller either an indication of eof, success,
or an error condition.  On success a pointer to the success-
fully  substituted line is placed in the (_c_h_a_r *) pointed to
by _r_e_t_L_i_n_e.


     The syntax available in history substitutions  is  much
like  that  in  _c_s_h(1).  For line substitutions (generally a
'!' character) there is the _l_i_n_e _s_p_e_c_i_f_i_e_r, which  specifies
which  line from the history to use, followed by an optional
_c_o_l_o_n _s_p_e_c_i_f_i_e_r which specifies which word{,s} to  use  from
the  selected line. Should there be no _c_o_l_o_n _s_p_e_c_i_f_i_e_r, then
the whole line is used in its entirety.  There  are  certain
_s_h_o_r_t  _c_u_t  history substitutions (an example of this is the
'!$' to represent the last word  on  the  last  line)  which
exist  because the construct is used quite often.  The types
of _l_i_n_e _s_p_e_c_i_f_i_e_r_s available are as follows:

     Line Specifiers:
!: History substitution off of the _c_u_r_r_e_n_t  _l_i_n_e.   The  ':'



                     February 15, 1986





                           - 3 -


implies  a  following  _c_o_l_o_n _s_p_e_c_i_f_i_e_r but this is not abso-
lutely necessary.  It is considered an error to do recursive
substitutions or _l_o_o_k_a_h_e_a_d_s on the current line.  !! Use the
last line for substitution. It is considered  an  error  for
this  to  be used on the first line of input.  !_n_n Use _n_n as
the number of a line to use.  It is considered an error  for
this line not to be in the current history bounds.  !-_n_n Use
a line _n_n back in the history current for substitutions.  It
is  considered  an  error  for  this  line  not to be in the
current history bounds.  !?<_t_e_x_t> Use <_t_e_x_t> to search for a
line containing <_t_e_x_t> somewhere on the line in the history.
It is considered an error for such  a  line  not  to  exist.
!<_t_e_x_t>  Use  <_t_e_x_t>  to  search  for  a line beginning with
<_t_e_x_t> in the history.  It is considered an error for such a
line not to exist.

     Short Cuts:
!^ Use the first word on the last line.  This is a short cut
for  !!:^  It  is considered an error for this to be used on
the first line of input.  !$ Use the last word on  the  last
line.   This  is  a short cut for !!:$.  It is considered an
error for this to be used on the first line of input.

     Note here that the history  line  is  divided  up  into
"words"  which  start at _0 (think of argv/argc) and count to
'$' the last word on the line.  Some colon specifiers act on
words  _1  thorough  a  _l_i_m_i_t , and others act on _0 through a
_l_i_m_i_t.

     Colon Specifiers:
:* Use words _1 through $ (the  last  word)  on  the  history
line.  It is considered an error for there to be only 1 word
on the line.  :^ Use word _1 off of the history line.   It is
considered  an  error  for  word 1 not to exist.  :$ Use the
_l_a_s_t word on the history line.  It is  considered  an  error
for  there  to be no words on the line.  :_n Use the _n_t_h word
on the history line.  It is considered  an  error  for  this
number  to  be  out of bounds with respect to the word count
for the line.  :_n_1-_n_2 Use the range of words from _n_1  to  _n_2
from  the  history line.  It is considered an error for this
pair to be mixed up ( _n_1 > _n_2 ) or for either to be  out  of
bounds.   :_n*  Use  the range of words from _n through $ from
the history line.  It is considered an error for n to be out
of  bounds.   :-^ Use the words _0 through _1 from the history
line.  It is considered an error for the  1st  word  not  to
exist.  :-$ Use the range of words from _0 to $ from the his-
tory line.  It is considered an error for no words to  exist
on  the  line.   :-* Use the range of words from _0 to $ from
the history line.  It is considered an error for no words to
exist on the line.  (Same as :-$) :-_n Use the range of words
from _0 to _n from the history  line.   It  is  considered  an
error for _n to be out of bounds.

     Line Specifiers:



                     February 15, 1986





                           - 4 -


     _L_a_s_t _l_i_n_e substitutions  are  performed  with  the  '^'
character.  They come in the form of:

^_p_a_t_t_e_r_n^_s_u_b_s_t_i_t_u_t_e^_o_p_t_i_o_n_a_l

The ^_p_a_t_t_e_r_n^ portion is required.   It  specifies  what  to
look  for.   Contrary  to _c_s_h (_1), this can span whitespace.
_P_a_t_t_e_r_n is taken literally; no characters are magic as such.
_S_u_b_s_t_i_t_u_t_e  is  the  string  to  substitute  for  the  first
occurrence of _p_a_t_t_e_r_n.  A '&'  character  in  this  text  is
expanded  with  the contents of _p_a_t_t_e_r_n as in _c_s_h (_1).  This
facility can be escaped by using a backslash '\' before  the
'&'  like  so: '\&'.  The _s_u_b_s_t_i_t_u_t_e text is optional; ^_p_a_t_-
_t_e_r_n^ or ^_p_a_t_t_e_r_n^^ will  delete  _p_a_t_t_e_r_n.   _o_p_t_i_o_n_a_l  is  a
string  which  is  appended  to  the  last  line  after  the
_p_a_t_t_e_r_n/_s_u_b_s_t_i_t_u_t_e actions are made.  As the  name  implies,
this string is optional.


     The _h_i_G_e_t_s() family returns the status of  the  history
substitution  which took place, in terms of eof, success, or
an error code.  The error codes are discussed below.  It  is
considered  an  error  to reference objects/lines not in the
history or to enter a NULL line ( _h_i_F_g_e_t_s() is an  exception
to this, see below).

     The first argument _r_e_t_L_i_n_e is the address of a  pointer
to unallocated space.  On success, the pointer which _r_e_t_L_i_n_e
points to is filled with the address of the sucessfully sub-
stituted line.  On error or eof, it is NULL The second argu-
ment _h_q is a pointer the current _H_I_Q_U_E_U_E.  It is  from  here
that the history substitutions are made.  The third argument
_f_p_t_r is a (_F_I_L_E *) (usually stdin is used).

     Errors are returned as an integer  value.   All  errors
except for [_H_I__E_O_F] have corresponding error messages in the
error vector _h_i_E_r_r_L_i_s_t.  _h_i_E_r_r_L_i_s_t, and _h_i_N_E_r_r_s are external
and  are the error description vectors, and the count of the
number of possible errors respectively.  The _h_i_G_e_t_s() family
returns the error code, but also sets the external variables
_h_i_E_r_r_n_o  to  this  same  value.    _h_i__E_r_r_L_i_s_t,hiNErrs,   and
_h_i_E_r_r_n_o, behave much like _s_y_s__e_r_r_l_i_s_t, _s_y_s__n_e_r_r_s, and _e_r_r_n_o.
The functions _h_i_F_E_r_r_o_r() and _h_i_E_r_r_o_r() may be used  much  as
_p_e_r_r_o_r  (_3) is to print out the status of the last substitu-
tion.

[_H_I__E_O_F] End of File  [_H_I__N_O_E_R_R_O_R]  No  error,  things  went
fine,  and  every  substitution was successful.  [_H_I__T_O_O_F_A_R]
Numeric substitution ( !_n or !-_n ) failed because _n too big.
[_H_I__N_O_T_F_O_U_N_D]  Search  substitution  (  !<_t_e_x_t> , !?<_t_e_x_t> )
failed.  [_H_I__T_O_O_G_R_E_A_T] Word specifier too great  on  history
line.   [_H_I__S_U_B_C]  Couldn't  figure out (line substitution).
[_H_I_)_S_S_T_C] Couldn't figure  out  (last  line  substitution).
[_H_I__M_E_M_E_R_R] Malloc() failed.  [_H_I__M_I_X_U_P] :_n_1-_n_2 got mixed up



                     February 15, 1986





                           - 5 -


( _n_2 < _n_1 ).  [_H_I__E_M_P_T_Y] The line  entered  was  empty.   No
entry was made in the history.  _h_i_F_G_e_t_s() is an exception to
this.  [_H_I__T_O_O_L_O_N_G] The expanded line would be  longer  than
the  available  buffer size.  The buffer was resized, but it
could not be made big enough.  The current size is in _h_i_B_u_f_-
_S_i_z.   [_H_I__P_A_N_I_C]  This  error  should  never happen.  If it
does, then a nonfatal error has occurred.  The state  of the
structures  should be ok, but an unforseen syntax/occurrence
has happened.


_e_x_t_e_r_n _i_n_t _h_i_G_e_t_s(),            /* _h_i_s_t_o_r_y, _u_s_e _a (_F_I_L_E *)      */
           _h_i_F_G_e_t_s(),   /* _h_i_s_t_o_r_y, _u_s_e _a (_F_I_L_E *) '\_n' */
           _h_i_S_G_e_t_s();   /* _h_i_s_t_o_r_y, _u_s_e _a (_c_h_a_r *)      */

_e_x_t_e_r_n _h_i_S_e_t(),         /* _s_e_t _s_i_z_e _o_f _a _h_i_s_t_o_r_y        */
       _h_i_R_e_m(),         /* _r_e_m_o_v_e _t_h_e _l_a_s_t _l_i_n_e */
       _h_i_F_r_e_e(),                /* _f_r_e_e _u_p _a _h_i_s_t_o_r_y _l_i_s_t       */
       _h_i_F_P_r_i_n_t(),              /* _f_p_r_i_n_t _o_u_t _a _h_i_s_t_o_r_y _l_i_s_t    */
       _h_i_F_E_r_r_o_r();              /* _f_p_r_i_n_t _o_u_t _a _h_i_s_t_o_r_y _e_r_r_o_r   */

_e_x_t_e_r_n _H_I_Q_U_E_U_E *_h_i_Q_i_n_i_t();      /* _i_n_i_t _a _h_i_s_t_o_r_y _m_e_c_h_a_n_i_s_m     */

_h_i_G_e_t_s() Entry with a history. It is called with  a  pointer
to  a  (_c_h_a_r  *), _r_e_t_L_i_n_e , the (_H_I_Q_U_E_U_E *), _h_q , to use for
history substitutions, and the (_F_I_L_E  *),  _f_p_t_r  ,  to  take
input  from.   History  substitutions  are  made on the line
entered; and the address of the line is returned in  _r_e_t_L_i_n_e
;  if there is an error in the substitution, _r_e_t_L_i_n_e will be
NULL

     The status of the substitution  is  returned,  but  the
     external  variable  _h_i_E_r_r_n_o  is  also  filled  with the
     status of the substitution.

     It is considered an error to enter  a  null  line.   In
     this case the code of _H_I__E_M_P_T_Y is returned, and _r_e_t_L_i_n_e
     will be NULL.  No entry is made into the history as the
     history  would soon fill up with null lines.  _h_i_F_G_e_t_s()
     Essentially the same as _h_i_G_e_t_s() except that the trail-
     ing  newline is saved.  That is, the newline at the end
     of the line entered is  preserved  much  as  _f_g_e_t_s  (_3)
     preserves the trailing newline while _g_e_t_s (_3) does not.
     Upon entry of a null line, this difference  means  that
     the error _H_I__E_M_P_T_Y can never be returned as the newline
     character was considered to be entered. Therefore, upon
     entry   of  a  null  line,  the  newline  character  is
     returned, but no entry into the history is  made.   The
     status  _H_I__N_O_E_R_R_O_R is returned in this case.  _h_i_S_G_e_t_s()
     The same as _h_i_G_e_t_s() only the input is a user  supplied
     (_c_h_a_r  *),  _s.  _h_i_S_e_t() Resize (up or down) a currently
     active  history.   Again  an  integer  size  is  taken.
     _h_i_S_e_t()  is always successful; the history is truncated
     if the new size is less than  the  old  one.   _h_i_F_r_e_e()



                     February 15, 1986





                           - 6 -


     Takes a linked list of history (_H_I_S_T *), _h_i , lines (as
     stored in _h_e_a_d ), reclaims that storage through the use
     of  _f_r_e_e(_3) The linked list is expected to be NULL ter-
     minated.   _h_i_F_r_e_e()  is  always  successful.    _h_i_R_e_m()
     Remove  the  last  line  entered.   This  is  found  at
     (_H_I_Q_U_E_U_E) -> _h_e_a_d.  _h_i_F_P_r_i_n_t() Print  out  the  history
     currently.  It  takes  as arguments a (_H_I_Q_U_E_U_E *), _h_q ,
     and a _c_o_u_n_t ; this is used to print out the history  in
     a fashion much like the _h_i_s_t_o_r_y command of _c_s_h (_1).  If
     _c_o_u_n_t is _H_I__A_L_L , then the whole  history  is  printed.
     _h_i_F_E_r_r_o_r()  Print  out the current error status.  It is
     much like _p_e_r_r_o_r (_3) in that it takes an optional  user
     supplied  string  and prints out the status of the last
     history  substitution.   The  string   may   be   NULL.
     _h_i_Q_i_n_i_t()  Initialize a new nistory.  It is called with
     an integer size as to the size of the  new  history.  A
     pointer  to  a  history  queue (_H_I_Q_U_E_U_E *) is returned.
     NULL is returned on error.


#_d_e_f_i_n_e _h_i_P_r_i_n_t(_h_q)             _h_i_F_P_r_i_n_t(_h_q, _s_t_d_o_u_t)
#_d_e_f_i_n_e _h_i_E_r_r_o_r(_s)              _h_i_F_E_r_r_o_r(_s, _s_t_d_e_r_r)

#_d_e_f_i_n_e _h_i_F_E_c_h_o_W_o_r_d(_h_i, _i, _f_p)  ( \
                                        _i_f ((_h_i)->_a_r_g_q[_i]) _p_u_t_c((_h_i)->_a_r_g_q[_i]), \
                                        _f_p_u_t_s((_h_i)->_a_r_g_v[_i], (_f_p)), \
                                        _i_f ((_h_i)->_a_r_g_q[_i]) _p_u_t_c((_h_i)->_a_r_g_q[_i], (_f_p)), \
                                        _i_f (_i+_1 < (_h_i)->_a_r_g_c) _p_u_t_c(' ', (_f_p)), \
                                )
#_d_e_f_i_n_e _h_i_E_c_h_o_W_o_r_d(_h_i, _i)       _h_i_F_E_c_h_o_W_o_r_d(_h_i, _i, _s_t_d_o_u_t)

#_d_e_f_i_n_e _h_i_F_E_c_h_o_L_i_n_e(_h_i, _f_p)     { \
                                        _r_e_g_i_s_t_e_r _i_n_t _i; \
                                        _f_o_r ( _i=_0; _i<(_h_i)->_a_r_g_c; _i++) \
                                            _h_i_F_E_c_h_o_W_o_r_d(_h_i, _i, _f_p); \
                                        _p_u_t_c('_0, (_f_p)); \
                                }
#_d_e_f_i_n_e _h_i_E_c_h_o_L_i_n_e(_h_i)          _h_i_F_E_c_h_o_L_i_n_e(_h_i, _s_t_d_o_u_t)

_T_h_e_s_e _m_a_c_r_o_s _a_r_e _t_h_e _c_o_d_e _u_s_e_d _i_n _h_i_F_P_r_i_n_t() and  _h_i_P_r_i_n_t().
They  are  suitable for use in printing out a line any time.
A good example might be "echoing" the a line which  has  had
history substitutions on it in the manner that _c_s_h (_1) does.
This can be done by testing the  _h_i_H_i_s_t  variable  (see  the
section  on  STATUS  VARIABLES).  _h_i_P_r_i_n_t() The same as _h_i_F_-
_P_r_i_n_t() using the default of _s_t_d_o_u_t.  _h_i_E_r_r_o_r() The same  as
_h_i_F_E_r_r_o_r()  only  the  default  of  _s_t_d_e_r_r (see _s_t_d_i_o._h ) is
used.  _h_i_F_E_c_h_o_W_o_r_d Take the line given by _h_i and  print  out
word  _i on that line with the appropriate quotings.  Use the
given (_F_I_L_E *), _f_p  for  the  output.   _h_i_E_c_h_o_W_o_r_d  Same  as
_h_i_F_E_c_h_o_W_o_r_d only use _s_t_d_o_u_t as the default output.  _h_i_F_E_c_h_o_-
_L_i_n_e Take the line given by _h_i and print  it  out  with  the
appropriate  quotings.   Use  the given (_F_I_L_E *), _f_p for the
output.  _h_i_E_c_h_o_L_i_n_e Same as _h_i_F_E_c_h_o_L_i_n_e only use  _s_t_d_o_u_t  as



                     February 15, 1986





                           - 7 -


the default output.


_e_x_t_e_r_n _i_n_t _h_i_E_r_r_n_o,             /* _c_u_r_r_e_n_t _e_r_r_o_r _c_o_d_e           */
           _h_i_N_E_r_r_s;     /* _n_u_m_b_e_r _o_f _m_a_x _e_r_r_s           */

_e_x_t_e_r_n _c_h_a_r *_h_i_E_r_r_L_i_s_t[];       /* _v_e_c_t_o_r _o_f _e_r_r_o_r _n_a_m_e_s        */

_e_x_t_e_r_n _i_n_t _h_i_H_i_s_t;              /* _w_e_r_e (_n_o_t) _s_u_b_s_t_i_t_u_t_i_o_n_s     */
_e_x_t_e_r_n _i_n_t _h_i_B_u_f_S_i_z;            /* _c_u_r_r_e_n_t _i_n_t_e_r_n_a_l _b_u_f _l_e_n_g_t_h  */

_h_i_E_r_r_n_o Contains the _e_r_r_o_r _c_o_d_e of the  last  line  entered.
See the section above on ERROR CODES.  _h_i_N_E_r_r_s The number of
errors in _h_i_E_r_r_L_i_s_t[].  _h_i_E_r_r_L_i_s_t[] The vector of error mes-
sages  indexed into by _h_i_E_r_r_n_o.  _h_i_H_i_s_t Should the user wish
to find out if a plaintext line was entered, or a line which
contained history references (such as in _c_s_h (_1) where lines
with substitutions are echoed), the external variable _h_i_H_i_s_t
can  be  referenced.   _h_i_H_i_s_t is set to zero upon entry of a
plaintext line, nonzero  for  a  history  substituted  line.
_h_i_B_u_f_S_i_z  Contains  the current size of the internal buffer.
Though this is resized up as necessary, one may want to know
its current length.

_T_h_e _f_i_l_e _c_o_n_t_a_i_n_s _t_h_e _d_e_c_l_a_r_a_t_i_o_n_s _f_o_r _t_h_e  _e_r_r_o_r_s,  _h_i_s_t_o_r_y
_d_a_t_a  _s_t_r_u_c_t_u_r_e_s,  _a_n_d  _e_x_t_e_r_n_s _f_o_r _t_h_e _h_i_s_t_o_r_y _s_u_b_s_t_i_t_u_t_i_o_n
_r_o_u_t_i_n_e_s.  _T_h_e _p_r_o_g_r_a_m_m_e_r _i_s _g_i_v_e_n _t_h_e _f_u_l_l _v_i_e_w _o_f _t_h_e _d_a_t_a
_s_t_r_u_c_t_u_r_e_s  _i_n_v_o_l_v_e_d  _h_e_r_e _i_n _t_h_e _h_o_p_e _t_h_a_t _t_h_i_s _m_a_y _b_e _u_s_e_-
_f_u_l.  _T_h_e _p_r_o_g_r_a_m_m_e_r _m_a_y _m_o_d_i_f_y _t_h_e_s_e _f_i_e_l_d_s _a_s  _d_e_s_i_r_e_d  _i_n
_i_t_s  _o_w_n  _r_o_u_t_i_n_e_s, _k_e_e_p_i_n_g _i_n _m_i_n_d _t_h_a_t _t_h_e _d_a_t_a _s_t_r_u_c_t_u_r_e_s
_m_u_s_t _b_e _l_e_f_t _i_n _a _c_o_n_s_i_s_t_e_n_t _s_t_a_t_e.

_t_y_p_e_d_e_f _s_t_r_u_c_t _h_i_s_t {
        _i_n_t _a_r_g_c;                       /* _c_o_u_n_t _i_n _a_r_g_v */
        _c_h_a_r **_a_r_g_v;            /* _p_t_r_s _t_o _w_o_r_d_s */
        _c_h_a_r *_a_r_g_q;             /* _q_u_o_t_e _p_e_r _w_o_r_d */
        _s_t_r_u_c_t _h_i_s_t *_n_e_x_t;              /* _n_e_x_t _i_n _l_i_s_t */
} _H_I_S_T;

_t_y_p_e_d_e_f _s_t_r_u_c_t _h_i_q_u_e_u_e {
        _i_n_t _m_a_x;                        /* _m_a_x _n_o_d_e_s _h_e_r_e */
        _i_n_t _l_i_n_e;                       /* _c_u_r_r_e_n_t _l_i_n_e _n_u_m_b_e_r */
        _i_n_t _c_o_u_n_t;                      /* _c_u_r_r_e_n_t _n_o_d_e_s _h_e_r_e */
        _c_h_a_r _e_s_c;                       /* _e_s_c_a_p_e _c_h_a_r - '\' */
        _c_h_a_r _s_q_u_o_t;             /* _s_i_n_g_l_e _q_u_o_t_e - '\'' */
        _c_h_a_r _d_q_u_o_t;             /* _d_o_u_b_l_e _q_u_o_t_e - '"' */
        _c_h_a_r _b_q_u_o_t;             /* _b_a_c_k _q_u_o_t_e - '`' */
        _c_h_a_r _s_u_b_c;                      /* _h_i_s_t_o_r_y _s_u_b - '!' */
        _c_h_a_r _l_a_s_t_c;             /* _l_a_s_t _l_i_n_e _s_u_b - '^' */
        _H_I_S_T *_h_e_a_d;             /* _h_e_a_d _o_f _t_h_e _l_i_s_t */
        _H_I_S_T *_t_a_i_l;             /* _t_a_i_l _o_f _t_h_e _l_i_s_t */
} _H_I_Q_U_E_U_E;

_A _h_i_s_t_o_r_y _i_s _f_u_l_l_y _d_e_s_c_r_i_b_e_d _b_y _i_t_s _a_s_s_o_c_i_a_t_e_d _H_I_Q_U_E_U_E.  The



                     February 15, 1986





                           - 8 -


fields  are  as  follows: _m_a_x The maximum number of lines to
appear in the queue (see _h_e_a_d and _t_a_i_l  ).   _l_i_n_e  The  line
number  of  the last line on the history queue.  More expli-
citly, this is the line number  of  the  line  specified  by
(_H_I_Q_U_E_U_E)  ->  _h_e_a_d _c_o_u_n_t The current number of lines in the
history queue.   _e_s_c  The  _e_s_c_a_p_e  character.   This  is  by
default  (and convention) the ascii _b_a_c_k_s_l_a_s_h character, '\'
This character may be logically _u_n_s_e_t by setting it equal to
'\_0'  _s_q_u_o_t  The _s_i_n_g_l_e _q_u_o_t_e character.  Characters between
_s_i_n_g_l_e _q_u_o_t_e characters are considered  words  by  the  line
parser;  whitespace  is ignored between _s_i_n_g_l_e _q_u_o_t_e charac-
ters. This is by default (and convention) the  ascii  _s_i_n_g_l_e
_q_u_o_t_e  character,  ''' This character may be logically _u_n_s_e_t
by setting it equal to '\_0' _d_q_u_o_t The _d_o_u_b_l_e  _q_u_o_t_e  charac-
ter.   Characters  between  _d_o_u_b_l_e _q_u_o_t_e characters are con-
sidered words by the line  parser;   whitespace  is  ignored
between  _d_o_u_b_l_e  _q_u_o_t_e  characters.  This is by default (and
convention) the ascii _d_o_u_b_l_e _q_u_o_t_e character, ' This charac-
ter may be logically _u_n_s_e_t by setting it equal to '\_0' _b_q_u_o_t
The _b_a_c_k _q_u_o_t_e character.   Characters  between  _b_a_c_k  _q_u_o_t_e
characters  are  considered  words by the line parser;  whi-
tespace is ignored between _b_a_c_k _q_u_o_t_e characters.   This  is
by  default (and convention) the ascii _b_a_c_k _q_u_o_t_e character,
'`' This character may be  logically  _u_n_s_e_t  by  setting  it
equal to '\_0' _s_u_b_c The _l_i_n_e _s_u_b_s_t_i_t_u_t_i_o_n character.  This is
the character which is used to select whole lines  from  the
history  for  substitution  on the current line.  This is by
default (and convention) the ascii _e_x_c_l_a_m_a_t_i_o_n _p_o_i_n_t charac-
ter, '!' This character may be logically _u_n_s_e_t by setting it
equal to '\_0' _l_a_s_t_c The _l_a_s_t  _l_i_n_e  _s_u_b_s_t_i_t_u_t_i_o_n  character.
This  is  the  character  which is used to edit parts of the
previous line.  This is  by  default  (and  convention)  the
ascii  _c_a_r_a_t or _u_p_a_r_r_o_w character, '^' This character may be
logically _u_n_s_e_t by setting it equal to '\_0' _h_e_a_d The head of
the  head/tail of the history queue.  This is the the young-
est line in the history queue. The number of  this  line  is
given explicitly in (_H_I_Q_U_E_U_E) -> _l_i_n_e.  _t_a_i_l The tail of the
head/tail of the history queue.  The number of this line can
be calculated with the formula

_h_e_a_d_L_i_n_e_N_u_m_b_e_r = (_H_I_Q_U_E_U_E)->line - (_H_I_Q_U_E_U_E)->count + 1


     Each history line is represented in a  _H_I_S_T  structure.
The  history  queue is a linked list of such _H_I_S_T structures
pointed to by the _h_e_a_d and the _t_a_i_l fields in  the  _H_I_Q_U_E_U_E.
_a_r_g_c  The number of words on this line.   This is the length
of _a_r_g_v.  _a_r_g_v This is the word vector.  It  is  constructed
such that it may be passed to an _e_x_e_c_v an any point in time.
_a_r_g_q The quote char for each word; each _a_r_g_q[_i] contains the
quote  for  the respective _a_r_g_v[_i].  If the word is unquoted
the respective _a_r_g_q[_i] will contain '\_0'.  _n_e_x_t The  pointer
to  the  next history line.  The _n_e_x_t field of the last _H_I_S_T
structure in the list (pointed to by the _t_a_i_l member of  the



                     February 15, 1986





                           - 9 -


_H_I_Q_U_E_U_E  structure)  contains  a NULL; the list is NULL ter-
minated.

_U_p_o_n _e_n_t_r_y _o_f _e_a_c_h _l_i_n_e _i_n_t_o _t_h_e _h_i_s_t_o_r_y _m_e_c_h_a_n_i_s_m, _t_h_e _l_i_n_e
_i_s  _p_a_r_s_e_d _i_n_t_o _w_o_r_d_s, _b_r_e_a_k_i_n_g _u_p _t_h_e _l_i_n_e _a_l_o_n_g _t_h_e _b_o_u_n_d_s
_o_f _w_h_i_t_e_s_p_a_c_e.  _A _w_o_r_d _a_s _s_u_c_h _i_s  _d_e_l_i_m_i_t_e_d  _b_y  _t_h_e  _w_h_i_t_e
_c_h_a_r_a_c_t_e_r_s  _s_p_a_c_e,  _t_a_b,  and  _n_e_w_l_i_n_e.  This may be escaped
through the use of the _e_s_c_a_p_e  char  to  escape  each  white
character,  or through the use of _q_u_o_t_e_s which may delimit a
word.  The line number of the  current  line  (  _l_i_n_e  )  is
incremented upon each successful history line entered; lines
with errors are not entered  as  they  have  some  syntactic
problem which would forid that anyway.

     The line is parsed into words, and  the  place  on  the
tail of the history queue.  Substitutions are then performed
upon this line, and the fully substituted line then replaced
the old unsubstituted line on the head of the history queue.
The last line entered is always to be found at (_H_I_Q_U_E_U_E)  ->
_t_a_i_l.   _m_a_x  , the maxinum number of nodes allocated for the
history is observed; when the history queue gets  too  long,
the last one is dropped off the top.

_T_h_e _f_o_l_l_o_w_i_n_g _i_s _a_n _e_x_a_m_p_l_e _o_f _h_o_w _o_n_e _c_o_u_l_d _u_s_e _t_h_e _h_i_s_t_o_r_y
_r_o_u_t_i_n_e_s.

#_i_n_c_l_u_d_e <_s_t_d_i_o._h>
#_i_n_c_l_u_d_e "_h_i_s_t._h"

_m_a_i_n()
{
        _c_h_a_r *_b_u_f_P_t_r;
        _H_I_Q_U_E_U_E *_h_q;

        _h_q = _h_i_Q_i_n_i_t(_2_0);
        _f_p_u_t_s("_E_n_t_e_r: ", _s_t_d_o_u_t);
        _w_h_i_l_e (_h_i_G_e_t_s(&_b_u_f_P_t_r, _h_q, _s_t_d_i_n) != _H_I__E_O_F) {
            _p_r_i_n_t_f("<%_s>\_n", _b_u_f_P_t_r);
            _f_p_u_t_s("\_n_E_n_t_e_r: ", _s_t_d_o_u_t);
        }
        _p_u_t_c('\_n', _s_t_d_o_u_t);
}


     Thus a sample run might look as follows, user input  in
_b_o_l_d:

Enter: ho de foo bar
<ho de foo bar>
Enter: !!:^ !$
<de bar>
Enter: !1
<ho de foo bar>




                     February 15, 1986





                           - 10 -


_A _c_o_m_m_o_n _t_h_i_n_g _t_o _d_o _m_i_g_h_t _b_e  _t_o  _c_h_a_n_g_e  _t_h_e  _s_u_b_s_t_i_t_u_t_i_o_n
characters,  the _q_u_o_t_i_n_g characters or the _e_s_c_a_p_e characters
to customize the history mechanism  for  a  specific  usage.
One  must be warned however that changing the _e_s_c_a_p_e charac-
ter in "mid-stream" so to speak can do wierd things to lines
parsed with a different substitution character being substi-
tuted on the current line with the current _e_s_c_a_p_e character.

     An example of changing a quote character  to  customize
an application might look something the following code frag-
ment:

hq->dquot = '/';
hiGets(&bufPtr, hq, stdin);

Or to change the _l_a_s_t _l_i_n_e _s_u_b_s_t_i_t_u_t_i_o_n character to  say  a
_c_o_m_m_a one might do the following.

hq->lastc = ',';
hiGets(&bufPtr, hq, stdin);

To logically _u_n_s_e_t any of the special characters  one  would
set them to '\_0' as follows:

hq->squot = '\0';
hq->dquot = '\0';
hq->bquot = '\0';
hiGets(&bufPtr, hq, stdin);



     The philosophy here has been to do only the  barest  of
user  oriented  actions.   Only  the substitutions, a simple
history printing routine, and error  support  are  provided.
It  has  thus been left up to the user to provide the frame-
work around which the _h_i_G_e_t_s() family may be used.

     The _h_i_P_r_i_n_t() call has been provided, but if  the  user
wishes  to provide a more powerful history display mechanism
(such as reversed or selective history  displays)  the  data
structures  are  available  such that the user may write one
externally.  This scheme of doing only the  barest  of  user
interface  allows each implementation of _h_i_G_e_t_s() family. to
provide the "best fit" for the application.    The  user  is
thus  not  locked into one strict implementation of the his-
tory mechanism.

_W_e_n_d_e_l_l _C_r_a_i_g _B_a_k_e_r









                     February 15, 1986


