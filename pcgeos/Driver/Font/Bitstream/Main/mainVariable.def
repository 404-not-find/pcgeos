COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1993 -- All Rights Reserved

PROJECT:	GEOS Bitstream Font Driver
MODULE:		Main
FILE:		mainVariable.def

AUTHOR:		Brian Chin

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	brianc	9/30/93		Initial version

DESCRIPTION:
	This file contains the type definitions and variable
	declarations for the GEOS portion of the Bitstream Font Driver 

	$Id: mainVariable.def,v 1.1 97/04/18 11:45:04 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@



;
; Initial size of the character region generation data block.
;
REGION_INITIAL_BLOCK_SIZE       EQU     1024


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Structure Types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
; BitstreamOutlineEntry	contains the per font data. This is filled in by
;	the DR_FONT_INIT_FONTS handler.  This structure sits in an LMem
;	chunk in the font block.  The handle of the chunk is stored
;	where the three OutlineEntrys sit in the OutlineDataEntry.
;
BOEMetrics	struct
	BOEM_ORUsPerEm		word
	BOEM_ascent		sword
	BOEM_accent		sword
	BOEM_baseAdjust		sword
	BOEM_fontWidth		FontWidth
	BOEM_fontWeight		BitstreamFontWeight
BOEMetrics	ends

BitstreamOutlineEntry	struc
	BOE_cachedFileName	FileLongName
	BOE_fontFileName	DosDotFileName
	BOE_fontFilePath	PathName
	BOE_minFontBufSize	word
	BOE_minCharBufSize	word
	BOE_metrics		BOEMetrics
	BOE_processor		BitstreamFontProcessor
	BOE_cacheData		FontFaceListItem
DBCS <	BOE_kanjiFont		BitstreamKanjiFontFlags			>
SBCS <	BOE_xlatTable		word 256 dup (?)			>
DBCS <	BOE_xlatTable		word (MAX_BITSTREAM_DIRECT_INDEX+1) dup (?)>
	BOE_fontFileDisk	label	byte
BitstreamOutlineEntry	ends

;
; BitstreamFontInstanceID  contains all of the information that we need to
;	uniquely identify a given instance of a particular font.  This is
;	used to allow us to skip the re-initialization of the
;	BitstreamGlobals data block if nothing has moved.
;
;	Note:	Don't use the use the fontAttrs other than for
;		identification purposes.  Some of it's fields are munged so
;		that the identification process can be as fast as possible.
;
BitstreamFontInstanceID	struc
	BFIID_transMatrix	FontMatrix
	BFIID_scriptY		word
	BFIID_heightY		WBFixed
	BFIID_scriptX		word
	BFIID_heightX		word
	BFIID_fontAttrs		FontCommonAttrs
	BFIID_processor		BitstreamFontProcessor
DBCS <	BFIID_SJISEntry		byte					>
BitstreamFontInstanceID	ends

;
; BitstreamCharGenData is the template for the driver private data
;	in the FontBuf block.  This block is used to pass information from
;	the GenWidths routine to the character generation functions.  The
;	data sits just after the character entry table and before the
;	kerning information.
;
BitstreamCharGenData	struc
	BCGD_fontInstID		BitstreamFontInstanceID
	BCGD_minCharBufSize	word
DBCS <	BCGD_kanjiFont		BitstreamKanjiFontFlags			>
	BCGD_extraData		word		; chunk handle of
						; BitstreamOutlineEntry
						; in FontInfo block
BitstreamCharGenData	ends


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Initialized Global Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

idata	segment

;
; subdir under SP_PRIVATE_DATA where cached data files for each Bitstream
; font are stored
;
if DBCS_PCGEOS
bitstreamDir	wchar	'Bitstream',0
else
bitstreamDir	char	'Bitstream',0
endif

;
; semaphore to restrict access to one of normal usage and font installation
; this is to protect the BitstreamGlobals (sp_global_ptr), sp_load_char_data,
; and sp_report_error, each of which is used both during normal usage and
; during font installation
;
bitstreamSem	Semaphore <1,0>

idata	ends


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Uninitialized Global Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

udata	segment

;
; info for output routines
;
BoundBox	struct
	BB_xmin	WWFixed
	BB_xmax	WWFixed
	BB_ymin	WWFixed
	BB_ymax	WWFixed
BoundBox	ends

OutputInfo	struct
	;
	; computed values in sp_open_bitmap
	;
	OI_charWidth	word
	OI_charHeight	word
	OI_charXOffset	word
	OI_charYOffset	word
	;
	; general info needed to generate char
	;
	OI_character	word
	OI_fontBufHan	hptr
	OI_fontBuf	sptr.FontBuf
	OI_dataOffset	word
	OI_bitmapMode	BooleanByte
DBCS <	OI_kanjiFont	BitstreamKanjiFontFlags				>
	;
	; for generating bitmaps
	;
	OI_byteWidth	word
	;
	; for generating regions
	;
	OI_regionHandle	hptr
	OI_regionSeg	sptr
	;
	; info from font transformation
	;
	OI_scriptY	word
	OI_heightY	WBFixed
	OI_scriptX	word
	OI_heightX	word
	;
	; info needed for generating path characters and char metrics
	;
	OI_charBounds	BoundBox
	OI_fontMetrics	BOEMetrics
	OI_fontInstance	label BitstreamFontInstanceID
	OI_dummy	byte (size BitstreamFontInstanceID) dup (?)
	OI_pathFlags	FontGenPathFlags
	OI_gstateHan	hptr.GState
	OI_outlineMode	BooleanByte
	;
	; flag for GEN_IN_REGION
	;
	OI_forceRegion	BooleanByte
	OI_penPos	Point
OutputInfo	ends

outputInfo	OutputInfo

;
; Bitstream stuff:
;	Global data buffer block handle and segment,
;	Font data file header block handle and segment,
;	Character generation buffer block handle and segment.
;
if STATIC_GLOBALS
else
globalsHandle		hptr.BitstreamGlobals
endif
fontHeaderHandle	hptr.SpeedoFontFileHeader
fontHeaderSeg		sptr.SpeedoFontFileHeader
fontHeaderSize		word
charGenBufferHandle	hptr
charGenBufferSeg	sptr
fontFileHandle		hptr
	global charGenBufferHandle:hptr
	global fontFileHandle:hptr

;
; for sp_load_char_data to return
;
charData	buff_tag

;
; The identification of the font that last had a character generated
;
lastFontInstID		label BitstreamFontInstanceID
dummy			byte (size BitstreamFontInstanceID) dup (?)
	ForceRef dummy

;
; install flag, set when installing
;
installFlag	BooleanByte
	global installFlag:BooleanByte

;
; Bitstream globals, font file handle, and character generation buffer
; used during font installation
;
if STATIC_GLOBALS
else
installGlobalsHandle		hptr.BitstreamGlobals
endif
installFontFileHandle		hptr.SpeedoFontFileHeader
installCharGenBufferHandle	hptr
	global installFontFileHandle:hptr
	global installCharGenBufferHandle:hptr

;
; cache for font files
;
cachedFontDiskHandle	hptr
cachedFontFileName	DosDotFileName
cachedFontFilePath	PathName
cachedFontFile		hptr

;
; cache for font cached data files
;
cachedCacheFileName	FileLongName
cachedCacheFile		hptr

;
; cache for cached data buffer
;
cachedCacheBufferHandle	hptr
DBCS <cachedCacheFileOffset	word					>

if FONT_HEADER_CACHE	;-----------------------------------------------------
;
; FileID of current font header
;
fontHeaderFileID	FileID

;
; font header cache
;
FONT_HEADER_CACHE_SIZE = 20
FontHeaderCacheEntry	struct
	FHCE_pos	dword
	FHCE_fileID	FileID
	FHCE_buffer	hptr
EC <	FHCE_hit	word						>
FontHeaderCacheEntry	ends

fontHeaderCache	FontHeaderCacheEntry FONT_HEADER_CACHE_SIZE dup (<>)
endif	;---------------------------------------------------------------------

;
; buffer for holding concatenated Kanji font file position table
;
DBCS <kanjiFontFilePosTable	dword NUM_KANJI_FONT_FILES dup (?)	>

if PROC_TYPE1
;
; font_ptr
;
font_ptr		fptr
endif

if PROC_TRUETYPE or PROC_TYPE1
;
; holds previous font type to allow cleaning up MemAllocs when fi_reset
; is needed
;
prevFontProc	BitstreamFontProcessor
endif

udata	ends
