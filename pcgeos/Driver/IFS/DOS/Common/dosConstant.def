COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		dosConstant.def

AUTHOR:		Adam de Boor, Oct 30, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	10/30/91	Initial revision


DESCRIPTION:
	Constants for DOS IFS drivers, exclusive of those that deal
	with the structures within DOS itself..
		
	$Id: dosConstant.def,v 1.1 97/04/10 11:55:02 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;------------------------------------------------------------------------------
;
;			   OTHER CONSTANTS
;
;------------------------------------------------------------------------------

MAX_NON_CACHE	equ	8	; the smallest number of sectors per track for
				;  any removable disk geometry we support. This
				;  is the largest sector number for which we can
				;  go to BIOS without having to know the actual
				;  disk geometry.
NIL		equ	-1

ifndef DEBUG_BOOT_SECTOR_CALLS
	DEBUG_BOOT_SECTOR_CALLS	= FALSE
endif
				; true to enable debugging of INT 13 calls to
				;  get boot sectors.   The passed parameters
				;  and the resulting sector data is saved
				;  bootSectorBuf.

;------------------------------------------------------------------------------
;  FULL_EXECUTE_IN_PLACE : Indicates that the IFS/DOS drivers are going to
;	be used in a system where all geodes (or most, at any rate)
;	are to be executed out of ROM.  
;------------------------------------------------------------------------------
ifndef FULL_EXECUTE_IN_PLACE
	FULL_EXECUTE_IN_PLACE		equ	FALSE
endif

;------------------------------------------------------------------------------
;  The .GP file only understands defined/not defined;
;  it can not deal with expression evaluation.
;  Thus, for the TRUE/FALSE conditionals, we define
;  GP symbols that _only_ get defined when the
;  condition is true.
;-----------------------------------------------------------------------------
if	FULL_EXECUTE_IN_PLACE
	GP_FULL_EXECUTE_IN_PLACE	equ	TRUE
endif

;-----------------------------------------------------------------------------
;  TRUE to include code that is specific to using General Software's DOS
;----------------------------------------------------------------------------
ifndef GSDOS
       GSDOS	equ	FALSE
endif

;
; TRUE if IFS driver only sends out file change notifications for operations
; that are done in certain directories which are likely to contain documents,
; which the user is likely to have folders open on the desktop.
;
; Note that the IFS driver doesn't attempt to verify whether a file is
; actually a document or not.  It makes the decision based on the location
; of the directory.  Therefore, it may come to the wrong conclusion and not
; send out notification when it should, or vice versa.
;
; Currently, notifications are sent out for operations under SP_TOP\DESKTOP,
; SP_DOCUMENT, SP_WASTE_BASKET, SP_APPLICATION and any non-system disks.
;
ifdef	GPC
; For GPC versions:, notifications are sent for operations in any directories
; if the system is running in "Enhanced Mode", because any directories are
; likely to contain documents.  (This basically defeats the whole purpose of
; having the SEND_DOCUMENT_FCN_ONLy feature in the first place, oh well ...)
endif	; GPC
;
ifndef SEND_DOCUMENT_FCN_ONLY
	SEND_DOCUMENT_FCN_ONLY	equ	FALSE
endif

DOSVirtComponentType	etype	word, 0
    DVCT_FILE_OR_DIR	enum	DOSVirtComponentType	; either file or dir
    DVCT_INTERNAL_DIR	enum	DOSVirtComponentType	; directory not at the
							;  end (i.e. we'll only
							;  be changing into
							;  it if it's there)
    DVCT_DIR		enum	DOSVirtComponentType	; directory at end
							;  of path

;------------------------------------------------------------------------------
;		Critical error stuff
;------------------------------------------------------------------------------

DOS_CRITICAL_INT	equ	24h

CriticalFrame	struct
    ;
    ; Return frame to return to DOS
    ;
    ;CF_critRet		fptr.far	; commented out to not confuse offset
    ;					; assignments by Esp when used as arg
    CF_critRetFlags	word
    ;
    ; Registers at time of initial DOS call.
    ;
    CF_ax		word
    CF_bx		word
    CF_cx		word
    CF_dx		word
    CF_si		word
    CF_di		word
    CF_bp		word
    CF_ds		sptr
    CF_es		sptr
    ;
    ; Return address to caller of DOS
    ;
    CF_dosRet		fptr.far
    CF_dosFlags		word
CriticalFrame	ends

;------------------------------------------------------------------------------
;
;			  WAIT/POST HANDLING
;
;------------------------------------------------------------------------------
WAIT_POST_INTERRUPT	equ	0x15


WP_GUARD_INTERVAL	equ	2*60		; # seconds between calls to
						;  the guardian
WP_DISABLE_THRESHOLD	equ	600*(WP_GUARD_INTERVAL/60)	; at most
								; 600 calls/sec
								; before we
								; disable w/p

BiosWaitFunctions	etype	byte
BWF_WAIT		enum	BiosWaitFunctions, 0x90
BWF_POST		enum	BiosWaitFunctions, 0x91
if	TEST_WAIT_POST
BWF_WAIT_TIMEOUT	enum	BiosWaitFunctions, 0xff
endif

BiosWaitTypes		etype	byte
BWT_FIXED_DISK		enum	BiosWaitTypes, 0x00
BWT_FLOPPY_DISK		enum	BiosWaitTypes, 0x01
BWT_FLOPPY_MOTOR_START	enum	BiosWaitTypes, 0xfd

	; values from Page 9-27, PS/2 System 80 Technical Reference

FIXED_DISK_TIMEOUT	=	12*60
FLOPPY_DISK_TIMEOUT	=	2*60
FLOPPY_MOTOR_TIMEOUT	=	60/2

;------------------------------------------------------------------------------
;
;		       PRIVATE DATA DEFINITIONS
;
;------------------------------------------------------------------------------
;
; Identifier stored in the boot sector of disks that have no room for an
; identifier otherwise.
;
DISK_ID_PRESENT         =       -1

DiskIdStruct     struct
        DIS_id          dword
        DIS_present     byte
DiskIdStruct     ends


;
; The FSDFlags that describe this driver's capabilities.
;
FSD_FLAGS	equ	FSDFlags	<
		0,	; FSDF_NETWORK
		1,	; FSDF_PRIMARY
		0,	; FSDF_SKELETON
		1,	; FSDF_CAN_FORMAT
		1	; FSDF_CAN_COPY
	>

;
; Private data stored with each DriveStatusEntry we create.
; 
DDPDFlags	record
    DDPDF_HUGE:1		; set if should use 32-bit sectors for
				;  absolute reads & writes
    DDPDF_ALIAS:1		; set if drive is alias and needs to be
				;  asserted as the current drive before it
				;  can be accessed...XXX
    DDPDF_HAS_CHANGE_LINE:1	; set if drive has a disk-change signal.
DDPDFlags	end

DOSDrivePrivateData	struct
    DDPD_flags		DDPDFlags	<>
    DDPD_alias		byte		; other logical drive number that shares
					;  the physical drive with this one
    DDPD_aliasLock	hptr		; lock that must be grabbed during
					;  disk lock for a drive that's
					;  an alias. Once the lock has been
					;  grabbed, the
					;  MSDOS_SET_LOGICAL_DRIVE_MAP function
					;  can be invoked to alert DOS which
					;  drive is about to be accessed.
    DDPD_sectorSize	word		; bytes/sector
if not _OS2
    DDPD_dcb		fptr.DeviceControlBlock
    DDPD_device		fptr.DeviceHeader
    DDPD_unit		byte
endif
DOSDrivePrivateData	ends

DOS_DISK_MIN_CHANGE_TIME	equ	3*60/2	; 1.5 seconds is minimum amount
						;  of time required to change
						;  disks. If last access to
						;  a disk is within this length,
						;  we don't need to check the
						;  boot sector, etc.

;
; The data stored for each open file. Offset to DOSFileEntry within our dgroup
; is stored in the HF_private field of the file handle.
; 
DOSFileFlags	record
if SEND_DOCUMENT_FCN_ONLY
    DFF_LIKELY_DOC:1	; file is located somewhere that is likely to contain
			;  documents.  Hence file is likely to be document.
endif
    DFF_REF_COUNT:3	; Number of file handles referring to this entry. 0
			;  really means 1 reference.
    DFF_OLD_GEOS:1	; file is old pc/geos VM file.
    DFF_SFT_VALID:1	; file isn't managed by us, but its SFT entry should
			;  still be valid.
    DFF_OURS:1		; file is managed directly by us (the primary IFS
			;  driver)
    DFF_DIRTY:1		; file was dirty when its index was last saved
    DFF_GEOS:1		; file has a geos header that must be hidden.
DOSFileFlags	end

DOSFileEntry	struct		; entry in our private table, whose offset
				;  is stored in HF_private
    DFE_index	word			; saved directory index, to deal with
					;  disk changes
    DFE_flags	DOSFileFlags		; status flags
    DFE_attrs	FileAttrs		; file attributes
    DFE_disk	word			; handle of disk on which file is
					;  located (eases a number of things
					;  in our life)
    DFE_id	FileID			; 32-bit ID for the file.
DOSFileEntry	ends

DOS_MAX_FILES	equ	255	; this is a DOS limitation...

;
; Beginning of a full-blown file header for easy (and fast) manipulation
; of longnames.
; 
GeosPartialHeader	struct
    GPH_signature	word	2 dup(?)
    GPH_longName	FileLongName
GeosPartialHeader	ends

.assert (offset GPH_signature eq offset GFH_signature) and \
	(size GPH_signature eq size GFH_signature)
.assert (offset GPH_longName eq offset GFH_longName) and \
	(size GPH_longName eq size GFH_longName)

DVMCGNHeader	struct		; header read during mapping.
    DVMCGNH_partial	GeosPartialHeader
    DVMCGNH_type	GeosFileType
    DVMCGNH_flags	GeosFileHeaderFlags
DVMCGNHeader	ends

.assert (offset DVMCGNH_type eq offset GFH_type) and \
	(size DVMCGNH_type eq size GFH_type)

.assert (offset DVMCGNH_flags eq offset GFH_flags) and \
	(size DVMCGNH_flags eq size GFH_flags)

if DBCS_PCGEOS
; All characters are mappable in DBCS
else
;
; Character that introduces unmappable-dos-character 3-byte sequence (it's
; DOS_UMDOS_LEAD_CHAR followed by the two hex digits of the unmappable char)
; 
DOS_UMDOS_LEAD_CHAR	equ	('?')

endif

;
; Bit or'ed into FFD_attributes in driNativeFFD when file mapped to geos name.
; 
FA_GEOS_FILE	equ	0x80

;==============================================================================
;			     LINK DATA
;==============================================================================

; For synchronization purposes, we lock the first byte after the
; header of the links file.

LINK_LOCK_REGION	equ	100h
LINK_LOCK_LENGTH	equ	1

DLH_SIG_1_2	= 'L' or ('N' shl 8)
DLH_SIG_3_4	= '0' or ('0' shl 8)


DOSLinkHeader	struct
    DLH_signature	char	'L', 'N', '0', '0'
    DLH_longName	FileLongName 		<>
    DLH_type		GeosFileType		GFT_DATA
    DLH_flags		GeosFileHeaderFlags	0
    DLH_release		ReleaseNumber 		<0,0,0,0>
    DLH_protocol	ProtocolNumber 		<1,0>
    DLH_token		GeodeToken 		<<0,0,0,0>,0>
    DLH_creator		GeodeToken		<<0,0,0,0>,0>

    ;
    ; From here down doesn't match GeosFileHeader
    ;

    DLH_desktop		FileDesktopInfo		<>
    DLH_fileAttr	FileAttrs		mask FA_LINK

    DLH_geodeAttr	GeodeAttrs		<>
    DLH_targetFileID	FileID			<>
    DLH_unused		byte	16 dup (?)
    ; Just in case...

DOSLinkHeader	ends

; The LINK structure is divided up between the Header -- which is
; similar to the GeosFileHeader structure, and the Data, which
; contains pointers to the target name, disk handle, etc.

DOSLinkData	struct
    DLD_diskSize	word
    DLD_pathSize	word
    DLD_extraDataSize	word
    DLD_savedDisk	label	byte
DOSLinkData	ends

DOSLink	struct
    DL_header	DOSLinkHeader		
    DL_data	DOSLinkData
DOSLink	ends

DOS_LINK_BUFFER_SIZE equ 4096

DOS_LINK_FILE_ATTRS_ALLOWED equ mask FA_ARCHIVE or mask FA_SUBDIR or \
	mask FA_HIDDEN

DOSLinkPathOpFunction	etype	word, 0, 4
    DLPOF_DELETE		enum	DOSLinkPathOpFunction
    DLPOF_RENAME		enum	DOSLinkPathOpFunction
    DLPOF_SET_ATTRS		enum	DOSLinkPathOpFunction
    DLPOF_GET_ATTRS		enum	DOSLinkPathOpFunction
    DLPOF_GET_EXT_ATTRS		enum	DOSLinkPathOpFunction
    DLPOF_GET_ALL_EXT_ATTRS	enum	DOSLinkPathOpFunction
    DLPOF_SET_EXT_ATTRS		enum	DOSLinkPathOpFunction
    DLPOF_SET_EXTRA_DATA	enum	DOSLinkPathOpFunction
    DLPOF_GET_EXTRA_DATA	enum	DOSLinkPathOpFunction

    DLPOF_READ			equ	-1
    ; The READ function is not in the jump table


;==============================================================================
;			   FILE ENUM/GET EXT ATTRIBUTES STUFF
;
; One of these blocks is allocated for DR_FS_FILE_ENUM; to field the
; FSPOF_GET_EXT_ATTRIBUTES function of DR_FS_PATH_OP; and for the
; FSHOF_GET_EXT_ATTRIBUTES function of DR_FS_HANDLE_OP. Because of its triple
; use, it contains information that's not needed for getting the extended
; attributes, but is needed by DR_FS_FILE_ENUM.
;==============================================================================

FGEAFlags	record
    FGEAF_DISK_NOT_OURS:1		; set if disk isn't managed by us.
    FGEAF_SFT_VALID:1			; used only if FGEAF_DISK_NOT_OURS and
					;  FGEAF_HAVE_HANDLE are both set
					;  and indicates that even though the
					;  disk isn't ours, the SFT entry for
					;  the handle should still be valid.
    FGEAF_HAVE_BASE_ID:1		; have base ID for directory in which
					;  file resides (usually set by
					;  DOSFileEnum only)
    FGEAF_HAVE_HEADER:1			; set if read header and it's good
    FGEAF_NOT_GEOS:1			; set if tried to read header, but
					;  it wasn't there
    FGEAF_HAVE_HANDLE:1			; set if FGEAD_fileHandle is valid
    FGEAF_HAVE_VIRTUAL:1		; set if dosFinalComponent points to
					;  virtual name for the file
    FGEAF_CLEAR_VALUE_SEG_IF_ABSENT:1	; set if FEAD_value.segment for an
					;  attribute should be cleared if the
					;  attribute is awol, rather than
					;  returning ERROR_ATTR_NOT_FOUND.

FGEAFlags	end

DOSFileEnumFlags	record
    DFEF_DIRECTORY_FILE:1		; set if the @DIRNAME.000 file
					; has been seen in the enumeration
    :7
DOSFileEnumFlags	end

FileEnumData	struct
    FED_pattern		char	"*.*", 0	; wildcard pattern to give to
						;  DOS
    FED_callback	fptr.far		; routine in kernel to
						; call back
    FED_kernelFrame	word			; bp for kernel callback
if not _MSLF
    FED_dta		FileFindDTA		; DTA for enumeration
endif
    FED_baseID		FileID			; ID of containing directory
    FED_enumFlags	DOSFileEnumFlags
if _MSLF
    FED_fd		Win32FindData
endif
FileEnumData	ends

FileHandleGetEAData struct
    FHGEAD_privData	fptr.DOSFileEntry
FileHandleGetEAData ends

FileGetExtAttrSpecData	union
    FGEASD_enum		FileEnumData
    FGEASD_handle	FileHandleGetEAData
FileGetExtAttrSpecData	end

FileGetExtAttrData	struct
    FGEAD_block		hptr			; the handle of this block
    FGEAD_disk		word			; disk on which the file
						;  resides (for calling
						;  secondary)
    FGEAD_error		FileError		; error to return to caller,
						;  if you're into that sort
						;  of thing...
    FGEAD_flags		FGEAFlags		; indication of what we've
						;  got where
    ;
    ; Extra data for the caller of DOSVirtGetExtAttrsLow
    ; 
    FGEAD_spec		FileGetExtAttrSpecData

    ;
    ; Attributes to fetch.
    ; 
    FGEAD_attrs		fptr.FileExtAttrDesc	; attributes to get
    FGEAD_numAttrs	word			; number of attributes to get

    ;
    ; DOS attributes for the file.
    ; 
if not _MSLF
    FGEAD_dta		fptr.FileFindDTA	; pointer to DTA for file being
						;  gotten
endif
    ;
    ; Extended attributes for the file.
    ; 
    FGEAD_header	GeosFileHeader		; Header for file, if required
    FGEAD_geodeAttr	GeodeAttrs		; geode attributes, if available
    FGEAD_pathInfo	DirPathInfo		; DirPathInfo record for
						;  current path

    FGEAD_fileHandle	hptr			; DOS file handle,
						; when available
						; (FGEAF_HAVE_HANDLE
						; is set).

    FGEAD_link		DOSLink			; Link data, used in
						; DOSEnum

    ; These pointers point to different tables depending on the type
    ; of file being accessed -- for either normal files, or links.
    ; Tables are assumed to be in the PathOps code segment

    FGEAD_sizeTable	nptr.near
    FGEAD_routTable	nptr.near

if _MSLF
    ; MS7 uses the FindData struct instead of the DTA.  
    ;
    FGEAD_fd		fptr.Win32FindData

    ; Search handle used by FindFirst/Next in MS7.  We're must call
    ; FindClose with this handle when finished.
    ;
   FGEAD_fdSearchHandle	word			; 
endif
FileGetExtAttrData	ends

;==============================================================================
;			  DISK FORMAT STUFF
;==============================================================================

DOS_FORMAT_RESTORE_BPB	equ	TRUE	; Set TRUE if need to save and restore
					;  the current BPB for the drive when
					;  formatting via IOCTL. It seems a
					;  silly thing to do, since the disk
					;  just formatted remains in the
					;  drive after the format completes, so
					;  why should we tell the driver the
					;  thing is actually the old format?
					;  -- ardeb 11/5/92

;
; For formatting with generic IOCTL.
; 
DiskFormatIoctlData	struct
    DFID_fmtTrackParams	FormatVerifyParams
if DOS_FORMAT_RESTORE_BPB
    DFID_saveBPB	SetDeviceParams
endif
    DFID_newBPB		SetDeviceParams
DiskFormatIoctlData	ends

;
; For formatting w/o generic IOCTL.
; 
DiskFormatBiosData	struct
    DFBD_fmtTrackParams	AddrFieldEntry MSDOS_MAX_SECTORS_PER_TRACK dup(<>)
    DFBD_tryCount	byte
    DFBD_errCode	word
    DFBD_params		fptr.DisketteParams	; params to store in vector
						;  1eh
    DFBD_oldParams	fptr.DisketteParams
if PZ_PCGEOS
    DFBD_saveParams	DisketteParams
endif
DiskFormatBiosData	ends

DiskFormatMethodData	union
    DFMD_ioctl		DiskFormatIoctlData
    DFMD_bios		DiskFormatBiosData
DiskFormatMethodData	ends

DiskFormatMethod	etype	byte
    DFM_IOCTL		enum DiskFormatMethod
    DFM_BIOS		enum DiskFormatMethod

DiskFormatData	struct
    DFD_blockHandle		hptr.DiskFormatData
    DFD_formatArgs		FSFormatArgs
    DFD_abortFlag		byte
    DFD_biosDrive		byte
    DFD_fatToggle		byte	; toggle to indicate where in FAT we
					;  are when dealing with 12-bit FAT
					;  entries
    DFD_mediaStatus		DriveStatus
    DFD_diskID			dword	; ID stored in boot sector
    DFD_bpb			BiosParamBlock	; geometry of new disk
    DFD_startBoot		word
    DFD_startFAT		word
    DFD_startRoot		word
    DFD_startFiles		word
    DFD_numTracks		word
    DFD_startTrack		word	; 1-origin
    DFD_lastRootDirTrack 	word
    DFD_dirEntsPerSector 	word
    DFD_rootDirSize		word
    DFD_unprocessedDataSectors	word	; number of sectors from the previous
					;  track that couldn't be processed in
					;  the FAT b/c they didn't make up
					;  a complete cluster. Can be negative
					;  if a bad track is found and the
					;  final sectors on the track don't
					;  make up a full cluster.
    DFD_fatMask			byte	; mask for next cluster to be processed
    DFD_fatOffset		word	; offset of byte that holds the next
					;  cluster's bit
    DFD_sectorsPerCylinder	word
    ;
    ; Status variables
    ; 
    DFD_curCylinder		word
    DFD_curHead			word
    DFD_curSector		word
    DFD_clusterStat		word
    DFD_goodClusters		word
    DFD_badClusters		word
    ;
    ; Work areas. 
    ;
    DFD_method			DiskFormatMethod	; How we're doing the
							;  formatting
    DFD_methodData		DiskFormatMethodData	; Data specific to that
							;  method
    DFD_sectorBuffer		sptr	; Fixed sector buffer that doesn't
					;  cross a 64Kb boundary
    DFD_sectorBufferHandle	hptr	; Handle of same
    DFD_fat			hptr	; Handle of block holding entire FAT
DiskFormatData		ends



TRACK_VERIFY_VALUE	equ	0x5aa5

; patterns used to verify a sector
FORMAT_PATTERN_1	equ	low TRACK_VERIFY_VALUE
FORMAT_PATTERN_2	equ	high TRACK_VERIFY_VALUE

;
; 16-bit FAT entry constants. Trim high 4 bits to get 12-bit FAT versions
; 
FAT_CLUSTER_UNUSED	equ	0	; cluster is free
FAT_CLUSTER_RESERVED	equ	0xfff0	; other values exist, in the range from
					;  here to 0xffff, but we don't use them
FAT_CLUSTER_BAD		equ	0xfff7	; 1 or more sectors in the cluster are
					;  bad
FAT_CLUSTER_LAST	equ	0xffff	; last cluster for a file

FAT_16_BIT_THRESHOLD	equ	0xff0	; if this many or more clusters
					;  (including 2 reserved ones), then
					;  must use 16-bit FAT, not 12.

;==============================================================================
;			   DISK COPY STUFF
;==============================================================================

DiskCopyStatus	record		; bits that record the progress of the copy,
				;  so on failure we know what to undo.
    DCS_FSIR_LOCKED:1			; set if FSInfoResource locked shared
    DCS_DRIVES_LOCKED:1			; set if drives have been locked for
					;  exclusive access
    DCS_SINGLE_DRIVE:1			; set if src and dst are the same drive
DiskCopyStatus	end

DISK_COPY_MULTI_DRIVE_BUFFER_LIMIT	equ	5	; Buffer at most 5
							;  cylinders
DISK_COPY_SINGLE_DRIVE_NON_GREEDY_BUFFER_LIMIT equ 10	; Buffer at most 10
							;  cylinders
DISK_COPY_SINGLE_DRIVE_REDWOOD_BUFFER_LIMIT equ 7	; Buffer at most 7
							;  cylinders


DiskCopyData	struct
    DCD_handle		hptr.DiskCopyData	; self-reference for freedom
    DCD_args		FSCopyArgs	; args, as passed to us
    DCD_status		DiskCopyStatus	; Status of the copy, of course.
    DCD_realSource	word		; Offset of DSE for real source drive
    DCD_realDest	word		; Offset of DSE for real dest drive.
					;  These will be different from
					;  DCD_args.FSCA_source and _dest if
					;  the drives are aliases of each other.
					;  We use the passed drives in calling
					;  the callback function, so the user
					;  gets the expected prompts, but we
					;  use only one of them internally.
    ;
    ; Geometry of the source disk.
    ; 
    DCD_bpb		BiosParamBlock	; Parameter block describing the disk
					;  being copied
    DCD_numClusters	word		; Number of clusters in the disk
    DCD_clusterSize	word		; Number of bytes in a cluster
    DCD_rootDirSize	word		; Number of bytes in the root dir
    DCD_startFiles	word		; Sector number of first files area
					;  cluster (cluster #2)
    ;
    ; Entire FAT from the source disk, since we need to look at the whole
    ; thing to figure out the amount of buffer space we'll require. Might
    ; as well read the whole thing in and have done with it.
    ; 
    DCD_fatBuffer	hptr		; Handle of buffer holding the FAT for
					;  the source disk.
    DCD_destFATOff	word		; Start of destination disk's FAT
					;  within DCD_fatBuffer
    DCD_numUsedClust	word		; Number of used clusters on the source
					;  disk, so we have a way to calculate
					;  how far along we are.
    DCD_numSwaps	word		; Number of disk swaps that will be
					;  required.
    ;
    ; Variables for DiskCopyProcessClusters
    ; 
    DCD_firstCluster	word		; Number of first cluster in this
					;  batch being processed (0 = root dir)
    DCD_curCluster	word		; Cluster being examined
    DCD_fatOffset	word		; Offset within DCD_sourceFAT of same
    DCD_fatToggle	byte		; 0 or 4: amount by which to shift
					;  word at *DCD_fatOffset to obtain
					;  info about DCD_curCluster
    DCD_fatSize		byte		; 0 if 16-bit FAT, 4 it 12-bit FAT.
					;  This value is xor'ed with
					;  DCD_fatToggle after each cluster.
    DCD_rangeStart	word		; Start of range of clusters being
					;  accumulated for processing by
					;  callback. -1 if no range started
    DCD_rangeStartFO	word		; Offset of cluster info in FAT for
					;  first cluster of range
    DCD_rangeStartFT	byte		; DCD_fatToggle of first cluster in
					;  range
    DCD_prevCluster	word		; Cluster processed before. -1 if none
    DCD_procClustCB	nptr.near	; Callback routine to process a range.
    DCD_curBuffer	hptr		; Handle of the buffer currently being
					;  filled/emptied with/of clusters
    DCD_bufferOff	word		; Offset within same.
    DCD_procUsedClust	word		; Number of used clusters processed
					;  up until this run of
					;  DiskCopyProcessClusters
    DCD_callbackType	DiskCopyCallback; Function in user-supplied callback
					;  to invoke after each bufferfull.
					;  If -1, then none.
    DCD_destDiskID	dword		; 32-bit volume ID for the destination
					;  disk
    ;
    ; Storage buffers.
    ; 
    DCD_numBuffers	word		; Number of buffers allocated
    DCD_bufferSize	word		; Size of each buffer
    DCD_firstBuffer	hptr		; Handle of first buffer. The buffers
					;  are chained through their
					;  otherInfo field, since we have no
					;  need of synchronization that would
					;  otherwise require it.
DiskCopyData	ends

;==============================================================================
;			     FATAL ERRORS
;==============================================================================

INVALID_FS_FUNCTION					enum FatalErrors
;	The function passed to our main strategy routine is beyond the
;	bounds of known FS driver functions
;

INVALID_HANDLE_OP					enum FatalErrors
;	The caller of DR_FS_HANDLE_OP has passed an invalid FSHandleOpFunction
;	value in AH
;

INVALID_ALLOC_OP					enum FatalErrors
;	The caller of DR_FS_ALLOC_OP has passed an invalid FSAllocOpFunction
;	value in AH
;


PRIMARY_INTERFACE_NOT_SUPPORTED_YET			enum FatalErrors
;	A secondary FSD is calling us, but we can't hear.
;

MISSED_GETTING_INDEX_FOR_FILE				enum FatalErrors
;	A file is open to a disk, but has already had its directory index
;	set to -1 (indicating the disk changed beneath it) and we don't have
;	a real index on file for the thing. Implies a screw up in my
;	programming logic.
;

SECTOR_OUT_OF_RANGE					enum FatalErrors
;	Attempted to read or write a 32-bit sector on a drive that only accepts
;	16-bit sector numbers.
;

COULD_NOT_FIND_FREE_JFT_SLOT				enum FatalErrors
;	The number free slots in the JFT has gotten out of sync with the
;	jftEntries semaphore somehow such that though we were able to P
;	the jftEntries semaphore, there is no free slot in the JFT.
;

COULD_NOT_GET_CURRENT_DIR				enum FatalErrors
;	After setting the current directory in DOS, it's refusing to give
;	it back. DOS is probably hosed.
;

COULD_NOT_LOCATE_DOT					enum FatalErrors
;	Attempting to perform a FIND_FIRST operation to locate "." so we
;	can find its starting cluster, but FIND_FIRST returned carry set.
;	Lord only knows what might cause this.
;

BYTES_PER_CLUSTER_OVER_64K				enum FatalErrors
;	Kernel called DR_FS_DISK_FIND_FREE and we're attempting to return
;	the number of bytes free, but cannot because the bytes per cluster
;	is more than will fit in a word, so 16x16 bit multiplication won't
;	work. This is really, really weird.
;

MUST_READ_AT_LEAST_FILE_SIGNATURE_IN			enum FatalErrors
;	In order to determine if a file is a geos file, the caller of
;	DOSOpenGeosFileForHeader must request at least enough data be
;	read to get the signature fully in memory. The code that called
;	the function has probably been overwritten.
;

PASSED_PATH_NOT_ABSOLUTE				enum FatalErrors

GASP_CHOKE_WHEEZE					enum FatalErrors

CUSTOM_ATTRIBUTES_MUST_BE_PASSED_AS_FEA_MULTIPLE	enum FatalErrors

INVALID_ATTRIBUTES_FOR_FEA_FILE_ATTR			enum FatalErrors

ILLEGAL_EXTENDED_ATTRIBUTE				enum FatalErrors
;	One of the extended-attribute functions or FileEnum was called
;	with an invalid extended attribute number.
;

ALIAS_LOCK_NOT_ALLOCATED_YET				enum FatalErrors
;	During initialization, we found that one logical drive was an
;	alias for another, a descriptor for which we had already created
;	without finding the other was an alias for this drive. Since these
;	things are supposed to be symmetrical, this should never happen, and
;	implies something is wrong either with the DOS or my understanding
;	of how these things work.
;

PRIMARY_ALIAS_NOT_MANAGED_BY_US				enum FatalErrors
;	During initialization, we found the non-current half of a logical
;	drive pair (each of which is aliased to the same physical drive), and
;	the current half for the drive isn't managed by us. Another one of
;	these things that should never happen.
;

CANNOT_MAP_ZERO_LENGTH_GEOS_NAME			enum FatalErrors
;	While mapping a path, came across a zero-length component. We tried
;	to map it to ".", but the filesystem doesn't think that name exists,
;	which is rather bizarre, but might happen to us under Novell, and
;	certainly happens to us in the root directories of disks under
;	MS DOS. The root directory is handled specially, but if a path
;	with a trailing backslash were to come in on a filesystem where
;	"." doesn't actually exist in each directory, this error would
;	result. It can also happen if you are lazy and pass an empty
;	string to a file routine.
;

INVALID_DOS_PRIMARY_FS_FUNCTION				enum FatalErrors

HEADER_HASNT_BEEN_READ_YET				enum FatalErrors 
; The header for this link hasn't yet been read into the
; FileGetExtAttrData segment

ILLEGAL_DOS_HANDLE					enum FatalErrors
; Internal error -- a call was made to a DOS file handle function with
; a bogus DOS file handle

DOS_FORMAT_TOO_MANY_TRACKS				enum FatalErrors
; Attempting to format a disk with more than 255 tracks.

DOS_FORMAT_TOO_MANY_SECTORS				enum FatalErrors
; Attempting to format a disk with more than 255 sectors/track.

FORMAT_ASSERTION_FAILED					enum FatalErrors
; Random assertion failed during disk format. See code for exact comparison
; that choked.

FORMAT_IOCTL_FAILED					enum FatalErrors
; Block-device IOCTL returned carry set in a case where we're not prepared
; to get an error back. The DOS device driver is probably confused.
; 

FORMAT_BOGUS_BPB					enum FatalErrors
; The number of sectors on the disk divided by the number of sectors per
; track, which should yield the number of cylinders on the disk, had a
; remainder, indicating there are some sectors that aren't part of a cylinder,
; which is illegal. The parameter block returned by the driver, or stored
; in our own dataspace, is bad.

HOW_IN_THE_HELL_DID_THIS_DISK_GET_A_VOLUME_LABEL?	enum FatalErrors

TOO_MANY_REFERENCES					enum FatalErrors
; You're calling FileDuplicateHandle for a handle whose underlying file is
; already referenced 8 times. Perhaps you're calling FileDuplicateHandle for
; something and forgetting to close the duplicates when you're done, or you're
; opening the same VM file in block-level-synchronization mode more than 8 times
; at once.

if DBCS_PCGEOS

DOS_CHAR_OUT_OF_RANGE					enum FatalErrors
; After mapping (or not?), a character value was > 255, which for a U.S.
; DOS is out of range.

DOS_CHAR_COULD_NOT_BE_MAPPED				enum FatalErrors
; A DOS character could not be mapped to Unicode, which is not possible.

ILLEGAL_DOS_CONVERT_STRING_FUNCTION			enum FatalErrors
; An illegal function (FSConvertStringFunction) was passed to
; DR_FS_CONVERT_STRING

ILLEGAL_TABLE_OFFSET_FOR_SJIS_CONVERSION		enum FatalErrors
; In mapping to or from SJIS, a table offset that was out of bounds
; was encountered.

ILLEGAL_SJIS_CHAR					enum FatalErrors
; A byte that was illegal for part of a SJIS char was encountered.

endif

;-----------------------------------------------------------------------------
;	WARNINGS	
;-----------------------------------------------------------------------------
INVALID_DIRNAME_FILE	enum Warnings
; The DIRNAME file is invalid, or out of date, and should be deleted.

if DBCS_PCGEOS
;-----------------------------------------------------------------------------
;	DOS <-> GEOS string conversion stuff
;-----------------------------------------------------------------------------
;
; For both GEOS and ASCII, 0x00-0x7f are the same.  The constants below
; represent the first character of each set that requires mapping.
;
MIN_DOS_TO_GEOS_CHAR	equ	0x80
MAX_SB_DOS_CHAR		equ	0xff

UNKNOWN_ESCAPE_SEQUENCE_IN_DOS_CONVERT				enum Warnings
; An escape sequence that is not known was encountered when converting DOS
; text to or from GEOS text.

endif
