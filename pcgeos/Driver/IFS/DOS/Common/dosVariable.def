COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		dosVariable.def

AUTHOR:		Adam de Boor, Oct 30, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	10/30/91	Initial revision


DESCRIPTION:
	Variables used by the driver.
		
	$Id: dosVariable.def,v 1.1 97/04/10 11:55:01 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
;			  WORKING VARIABLES
;
udata	segment

if not _OS2
;
; dosVersionMajor, dosVersionMinor -- major and minor numbers of the
;				      DOS version under which we're running
;
dosVersionMajor	byte
dosVersionMinor	byte
endif

;
; bootSector -- fixed buffer to hold the boot sector of a disk while it's
;		being ID'd or locked. Allocated at DR_INIT time and protected
;		by the bootSem semaphore being grabbed before any attempt
;		to use it. Specially allocated to not cross a 64K boundary,
;		since the DMA controller on the PC cannot DMA across such
;		a boundary.
;
bootSector	sptr.BootSector
bootSectorHandle hptr.BootSector

;
; fsdOffset -- the offset of our FSDriver record in the FSIR, so we have
;	       a clue whether a disk/drive is managed by us.
;
fsdOffset	word

;
; pspSegment -- pointer to the ProgramSegmentPrefix (aka PSP) for the loader
;		and, hence, for all of PC/GEOS. If you don't know what a
;		Program Segment Prefix is, you probably shouldn't be reading
;		this...
;
pspSegment	sptr.ProgramSegmentPrefix

;
; jftEntries -- scheduling semaphore tracking the number of free slots in
;		our JFT. If we wish to perform some operation requiring a
;		DOS handle, we P the semaphore, at which point we know there's
;		a JFT slot available for our use, whatever and whenever we
;		want to use it.
;
jftEntries	Semaphore <0,0>

;
; jftSize -- total number of bytes in the JFT.
; 
jftSize		word

;
; jftAddr -- pointer to table of SFNs, the indexes into which are passed to
;	     DOS as file handles. e.g. a DOS handle "5" means DOS should take
;	     the SFN from entry 5 (0-origin) in the table pointed to by
;	     jftAddr and use that to index its own tables to manipulate the file
;
jftAddr		fptr.byte

if not _OS2
;
; sftStart -- pointer to the first block in the linked list of blocks that
;	      make up the mock SFT under DR DOS. This is a partial emulation
;	      of an undocumented data structure used by MS DOS to manipulate
;	      files.
;
sftStart	fptr.SFTBlockHeader
endif

;
; curPath -- handle of the FilePath block currently installed in DOS. This
;	     is an optimization that may or may not help us reduce the number
;	     of calls to MSDOS_SET_CURRENT_DIR we have to make.
;
curPath		hptr.FilePath

;
; The table of open files, indexed by the DOS SFN and pointed to by HF_private
; NOTE: this may not be the first variable in idata or some things won't
; work (DOSVirtGetExtAttrs, for example).
; 
dosFileTable	DOSFileEntry	DOS_MAX_FILES dup(<>)


;
; Data for virtual -> DOS name mapping.
; 	dosNativeFFD		result of mapping the current component to
;				its DOS equivalent. DOS character set, etc.
;				If first byte of FFD_name is 0, it means the
;				component on which the mapping failed wasn't a
;				valid DOS name, so DOS wasn't even consulted.
;	dosFileType		the type of file whose native name is stored
;				in dosNativeFFD. this is used to know when
;				a 1.X VM file is opened, so we don't
;				mistakenly consider it a regular pc/geos file.
;	dosFinalComponent	start of the final component of the path
;				just mapped.
; 
MSLF<dos7FindData 		Win32FindData				>
dosNativeFFD	FileFindDTA
dosFileType	GeosFileType
dosFinalComponent fptr.char
dosFinalComponentLength word

;
; dosOpenHeader -- small buffer for fetching the signature and longname of
;		   the file currently being opened, so we know if it's
;		   a geos file or not.
; dosOpenType -- file type of the file, so we know whether to treat it as
;		 a geos file (might be GFT_OLD_VM)
; dosOpenFlags - GeosFileHeaderFlags, to determine if file is a DBCS one
;
dosOpenHeader	GeosPartialHeader
dosOpenType	GeosFileType
if DBCS_PCGEOS
dosOpenFlags	GeosFileHeaderFlags
endif

if not _OS2
;
; dosWaitPostOn -- set when wait/post support is enabled.
; 
dosWaitPostOn	byte	FALSE
dosWaitPostSave	fptr.far

;
; dosWPSem -- semaphore on which a thread blocks, with timeout, while waiting
; for an appropriate post operation.
; 
dosWPSem	Semaphore	<0,0>
;
; dosWPGuardian -- continual timer that zeroes dosWPCount every WP_GUARD_
;		   INTERVAL ticks to to make sure we're not on a system that
;		   mis-implements wait/post and generates thousands of
;		   wait/post calls.
; dosWPGuardianID -- ID for same for stopping the timer
; dosWPCount -- number of wait/post calls so far this second
; dosWPMaxCount -- when testing wait/post, this tracks the highest value
;		   achieved by dosWPCount
; dosWPDisabled -- set when wait/post has been disabled due to having received
;		   too many calls.
;
dosWPGuardian 	hptr
dosWPGuardianID	word	
dosWPCount	word
dosWPDisabled 	byte	FALSE

 if TEST_WAIT_POST
dosWPMaxCount	word
 endif
endif

;
; dosCriticalSave -- the previous contents of the critical error vector
; dosLastCritical -- the error code encountered by the most recent critical
;		     error.
; 
dosCriticalSave fptr.far
dosLastCritical	FileError

if	DEBUG_BOOT_SECTOR_CALLS

BootSectorParamList	struc
	BSPL_numSectors		byte		;al
	BSPL_function		byte		;ah
	BSPL_sectorNum		byte		;cl
	BSPL_trackNum		byte		;ch
	BSPL_driveNum		byte		;dl
	BSPL_headNum		byte		;dh
	BSPL_buffer		fptr		;es:bx
	BSPL_numSectorsRead	byte		;al returned
	BSPL_errorCode		byte		;ah returned
	BSPL_retCarry		byte		;non-zero if carry returned
	BSPL_returnData		BootSector	;copied from BSPL_buffer
BootSectorParamList	ends

int13Save		fptr.far		;old int 13 vector
bootSectorParams	BootSectorParamList	;params passed in boot sector 
						;   call
endif

if not DBCS_PCGEOS
;
; dosCodePage -- code page being used. Copied from the kernel and massaged
;		 a bit for our own nefarious purposes. The LCP_from part
;		 is left alone, but LCP_to has been altered to upcase the
;		 character during the mapping.
;
dosCodePage	LocalCodePage
endif

;
; dosPathBuffer -- random buffer that can be used atomically (i.e. only while
;		   executing within a single routine and may be trashed by
;		   any routine that routine calls) while the cwdLock is
;		   grabbed, rather than using the stack.
;
dosPathBuffer	char	DOS_STD_PATH_LENGTH dup(?)

;
; dosNullDevice -- pointer to the NUL device; set on initialization
;
dosNullDevice	fptr.DeviceHeader

;
; dosBiosLock -- pointer to biosLock in the kernel, so we can tell whether
;		 to issue int 28h at idle time.
;
dosBiosLock	fptr.ThreadLock

udata 	ends

idata	segment
;
; bootSem -- mutual-exclusion semaphore that protects access to bootSector
; 
bootSem	Semaphore <1, 0>

;
; cwdSem -- mutual-exclusion semaphore that dictates who can tell DOS what
;	    the current directory is.
;
cwdSem	Semaphore <1, 0>

;
; dosInitHeader -- mostly-initialized header for newly-created files. Needs
;		   only to have file type and longname copied in.
; dosLinkHeader -- similar thing for creating links.
;
dosInitHeader 	GeosFileHeader <>

dosLinkHeader	DOSLinkHeader	<>

;
; dirNameFile -- name of file used for storing directory extended attributes
;		 and symbolic links.
;
dirNameFile	char	'@DIRNAME.000', 0

;
; dosPreventCritical -- if non-zero, don't ask user about a critical error;
;			just fail the request. Starts at 1 to fail errors
;			during drive-map initialization.
;
dosPreventCritical	byte	1

idata	ends

;------------------------------------------------------------------------------
;
;		   VARIABLES FOR MAPPING PATH NAMES
;
; All these variables are accessible only with cwdSem locked. The choice was
; between using 400 bytes of stack space for simple path operations, and
; having them here. I chose here. -- ardeb 3/12/93
; 
udata	segment

;
; mapDTA -- stores information on the next file to examine during mapping.
; 
mapDTA		FileFindDTA

;
; mapLink -- holds data that allows a link to be resolved during mapping
; 
mapLink		DOSLink	<
	<		; DL_header
		<0,0,0,0>,	; DLH_signature
		<0>,		; DLH_longName
		0,		; DLH_type
		0,		; DLH_flags
		<0,0,0,0>,	; DLH_release
		<0,0>,		; DLH_protocol
		<<0,0,0,0>,0>,	; DLH_token
		<<0,0,0,0>,0>,	; DLH_creator
		<0>,		; DLH_desktop
		0,		; DLH_fileAttr
		0,		; DLH_geodeAttr
		0,		; DLH_targetFileID
		<0>		; DLH_unused
	>,
	<		; DL_data
		0,		; DLD_diskSize
		0,		; DLD_pathSize
		0		; DLD_extraDataSize
	>
>
;
; mapShouldMatch -- non-extension part of filename should match this if the
; extension is all numeric. If first char is 0, then we're on the second pass
; and should open every file to see if it's a geos file.
;
mapShouldMatch	char	DOS_FILE_NAME_CORE_LENGTH+1 dup(?) 

;
; mapHeaderBuf -- place to which to read the first part of a geos file when
; looking for one of the proper name.
; 

mapHeaderBuf	DVMCGNHeader	<>

if DBCS_PCGEOS
;
; ID of DosCodePage we're using
;
currentCodePage		DosCodePage
endif

udata	ends

idata	segment

;
; mapSearchPattern -- pattern used in FIND_FIRST/FIND_NEXT series.
;
mapSearchPattern	char	'*.*', 0

idata	ends

udata	segment

if SEND_DOCUMENT_FCN_ONLY

; Null-terminated DOS paths of SP_TOP\DESKTOP, SP_DOCUMENT, SP_WASTE_BASKET
; and SP_APPLICATION, with leading backslashes.
if _MSLF
desktopPath		char	MSDOS7_MAX_PATH_SIZE dup(?)
docPath			char	MSDOS7_MAX_PATH_SIZE dup(?)
wbPath			char	MSDOS7_MAX_PATH_SIZE dup(?)
appPath			char	MSDOS7_MAX_PATH_SIZE dup(?)
else
desktopPath		char	DOS_STD_PATH_LENGTH dup(?)
docPath			char	DOS_STD_PATH_LENGTH dup(?)
wbPath			char	DOS_STD_PATH_LENGTH dup(?)
appPath			char	DOS_STD_PATH_LENGTH dup(?)
endif

; Length of paths, not counting leading backslash nor null.
desktopPathLengthNoBS	word
docPathLengthNoBS	word
wbPathLengthNoBS	word
appPathLengthNoBS	word

; Disk handle and drive # of system disk.  Notification will always be sent
; for things on other disks regardless of path.
sysDiskHandle		nptr.DiskDesc
sysDriveNum		byte		; 0-based drive #

ifdef	GPC
enhancedMode		BooleanByte
endif	; GPC

endif	; SEND_DOCUMENT_FCN_ONLY

udata	ends
