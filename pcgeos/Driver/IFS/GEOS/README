*******************************************************************************

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		System specification
FILE:		README

AUTHOR:		Adam de Boor, Apr 13, 1993

REVISION HISTORY:
	Name	Date	Description
	----	----	-----------
	ardeb	4/13/93	Initial revision


DESCRIPTION:
	Specification of the source layout, implementation, and data
	structures for the GEOS fast file system.
	
		

	$Id: README,v 1.1.7.1 97/03/29 07:18:52 canavese Exp $

*******************************************************************************

gfsContents:
see also [ contents ]
    entryOne	 	- synopsis
    entryTwo	    	- synopsis

****************************************************************************
			   What's Up With This?
****************************************************************************
gfsIntroduction:
see also [ contents gfsContents ]

These directories contain code to access a filesystem designed for GEOS's use,
i.e. one that's not visible from DOS. Currently they are used for ROM
devices and for Wizard/server installations to increase performance.

The Common directory contains the common code for traversing the filesystem
and accessing its data.

This code currently supports only read-only filesystems. Eventually it may
expand to support read/write filesystems, but I'll likely restructure the
whole filesystem then anyway, as this one has been designed with speed only in
mind and with the distinct knowledge that the data will never change.

The ZoomFS directory contains the code specific to locating and accessing
the data stored in ROM on the Zoomer.

The MegaFile directory contains the code specific to opening and accessing the
data stored in a monolithic file, whose name is stored in the .ini file.

****************************************************************************
			 Device-Specific Interface
****************************************************************************
gfsDevSpec:
see also [ contents gfsContents ]

Functions that must be provided by the type-specific driver code are:

	GFSDevInit:
		Initializes access to the sole filesystem supported by the
		device. For Zoomer, for example, this involves locating
		where in the ROM the filesystem sits, while for File, it
		must fetch the absolute name and open the file that contains
		the filesystem.

		PASS:	nothing
		RETURN:	carry set on error

	GFSDevExit:
		Finishes with the filesystem. Must be in fixed code. Zoomer
		does nothing, while File closes the file.

		PASS:	nothing
		RETURN:	nothing

	GFSDevMapDir:
		Read in or map the short listing of a directory's contents.
		Only one directory may be mapped at a time.

		PASS:	dxax	= offset of directory start
			cx	= number of entries in the directory
		RETURN:	carry set on error
				ax	= FileError for caller to return
			carry clear if ok
				es:di	= first GFSDirEntry structure

	GFSDevUnmapDir:
		Allow the previously mapped directory to go away again.

		PASS:	nothing
		RETURN:	nothing

	GFSDevMapEA:
		Read in or map the extended attributes for a single file
		or directory. If GFSDevLock was called with scanning==TRUE,
		the extended attributes for the entries in the current
		directory are being scanned sequentially, so if it makes
		sense for the driver to read several files worth of data
		at once, it should do so.

		Only one extended attribute structure will ever be mapped
		at a time.

		PASS:	dxax	= base of extended attribute structure to
				  map
		RETURN:	carry set on error
				ax	= FileError for caller to return
			carry clear if ok
				es:di	= GFSExtAttrs for the file

	GFSDevUnmapEA:
		Allow the previously mapped extended attribute structure to
		go away.

		PASS:	nothing
		RETURN:	nothing

	GFSDevFirstEA:
		Figure the location of the first GFSExtAttrs record for a
		directory, given the offset and number of entries in the
		directory.

		PASS:	dxax	= base of directory
			cx	= number of entries in the directory
		RETURN:	dxax	= offset of first GFSExtAttrs for dir

	GFSDevNextEA:
		Figure out the start of the next GFSExtAttrs structure in the
		directory, given the offset of the current one.

		PASS:	dxax	= base of current extended attribute structure
		RETURN:	dxax	= base of next extended attribute structure.

	GFSDevLocateEA:
		Figure the location of the extended attributes for a file.

		PASS:	dxax	= base of the directory that contains the file
			cx	= number of entries in the directory
			bx	= entry # (0-origin) of file in the directory
		RETURN:	dxax	= base of extended attributes

	GFSDevLock:
		Gain exclusive access to the filesystem.

		PASS:	ax	= non-zero if performing sequential scan of
				  the contents of the current directory
		RETURN:	nothing

	GFSDevUnlock:
		Release exclusive access to the filesystem. Any data cached
		from the scanning of the current directory should be set to
		go away when the system needs the room.

		PASS:	nothing
		RETURN:	nothing
		DESTROY: nothing (flags preserved)

	GFSDevRead:
		Read data from a file into memory. The number of bytes has
		been bounds-checked against the end of the file from which
		the data are being read, so there's no need to worry about
		it. If the indicated number of bytes can't be read, this
		should return carry set + ERROR_SHORT_READ_WRITE, if no
		other error comes back from the device.

		PASS:	dxax	= offset of data to read
			cx	= number of bytes to read
			es:di	= address to which to read them
		RETURN:	carry set on error
				ax	= FileError to return
			carry clear if ok


****************************************************************************
		     How a GEOS Filesystem is Laid Out
****************************************************************************
gfsDataStructures:
see also [ contents gfsContents ]

The directory structure for this filesystem must serve two purposes:
	1) We want to be able to read all the info necessary for performing
	   a lookup on a filename, for the purposes of accessing the file,
	   into memory at once, so we need to keep the directory entries as
	   small as possible.
	2) When performing a FileEnum of a directory, we do not want to
	   have to go dancing all over hither and yon to get the extended
	   attributes for each file in turn, as this defeats one of the
	   purposes of this whole thing, especially in the File driver
	   case.

It's impossible to reconcile these two purposes, so we do the simplest
thing: we have two directory structures.
	
The directory for performing a name lookup contains GFSDirEntry structures:

	GFSDirEntry	struct
	    GDE_longName	char	FILE_LONGNAME_LENGTH dup(?)	  ; 32
	    GDE_dosName		char	DOS_NO_DOT_FILE_NAME_LENGTH dup(?); 11
	    GDE_attrs		FileAttrs				  ; 1
	    GDE_data		dword					  ; 4
	    GDE_size		dword					  ; 4
	    GDE_type		byte	; GeosFileType (truncated)	  ; 1
									  ; 53
 	GFSDirEntry	ends

GDE_longName	contains the 32-character name (null-terminated unless it's
		exactly 32-characters long) for the file, in the PC/GEOS
		character set.

GDE_dosName	contains the 8.3 name (neither null byte nor .; root and
		extension are space-padded) for the file, in the DOS character
		set.

GDE_attrs	contains the file attributes, so we know if it's PC/GEOS
		file or a symbolic link, or a plain DOS file.

GDE_extAttrs	this is the offset of the GFSExtAttrs structure for the file
		within the filesystem device.

GDE_data	for a file, this is the offset of the data for the file.

		for a directory, this is the offset of the first
		GFSDirEntry structure for the directory (the GFSExtAttrs
		structures for the directory follow the GFSDirEntry
		structures for the directory).

		for a link, this is the offset of the stored disk handle &
		target path stored for the link

GDE_size	for a file or link, this is the number of bytes of data
		stored for the file.

		for a directory, this is the number of entries in the
		directory.

GDE_fileType	to allow the corresponding field of the private data to be
		initialized without reference to the extended attributes,
		allowing an optimization during loading of any geode from
		this filesystem when the kernel makes sure the file is an
		executable.


The directory with the extended attributes for each file/dir/link in the
directory is made of GFSExtAttrs structures, which are based on the
GeosFileHeader structures used on DOS filesystems, but contain a number of
extra fields:

	GFSExtAttrs	struct
	    GEA_longName	char	FILE_LONGNAME_LENGTH dup(?)	  ; 32
	    GEA_dosName		char	DOS_NO_DOT_FILE_NAME_LENGTH dup(?); 11
	    GEA_attrs		FileAttrs				  ; 1
	    GEA_type		GeosFileType				  ; 2
	    GEA_flags		GeosFileHeaderFlags			  ; 2
	    GEA_release		ReleaseNumber				  ; 8
	    GEA_protocol	ProtocolNumber				  ; 4
	    GEA_token		GeodeToken				  ; 6
	    GEA_creator		GeodeToken				  ; 6
	    GEA_userNotes	FileUserNotes				  ; 100
	    GEA_notice		FileCopyrightNotice			  ; 32
	    GEA_created		FileDateAndTime				  ; 4
	    GEA_desktop		FileDesktopInfo				  ; 16
	    GEA_modified	FileDateAndTime				  ; 4
	    GEA_size		dword					  ; 4
	    GEA_targetID	FileID		; links only		  ; 4
	    GEA_geodeAttrs	GeodeAttrs	; 0 unless executable     ; 2
									  ; 238
	GFSExtAttrs	ends

The FEA_PASSWORD, FEA_OWNER, and FEA_RIGHTS extended attributes are not
supported. 

The start of the filesystem is a GFSFileHeader structure, followed by
a GFSDirEntry followed by a GFSExtAttrs for the root directory of the
filesystem. From that, all else can flow.

	GFSFileHeader	struct
	    GFSFH_signature	char	4 dup (?)	; "GFS:"
	    GFSFH_checksum	char	8 dup (?)	; 32 bit checksum
							; in hex digits
	    GFSFH_crlfcrlf	char	4 dup (?)	; C_CR, C_LF, C_CR, C_LF
	    GFSFH_description	char	100 dup (?)	; terminated by Ctrl-Z
	    GFSFH_versionMajor	word
	    GFSFH_versionMinor	word
	    GFSFH_totalSize	dword
	    GFSFH_reserved	byte	16 dup (?)
	GFSFileHeader	ends				;132

Links are stored as a 3-word header, followed by variable length data. The
GDE_size.low field of the GFSDirEntry encodes the overall size of the stored
data plus the header.

	GFSLinkData	struct
	    GLD_diskSize	word
	    GLD_pathSize	word
	    GLD_extraDataSize	word
	    GLD_savedDisk	label	byte
	GFSLinkData	ends

The data for the saved disk handle run from GLD_savedDisk to GLD_savedDisk +
GLD_diskSize. The target path follows immediately after that for GLD_pathSize
bytes; it is null-terminated. The extra data, if any, follows immediately
after that. 


Implementation Specific Layout Changes
--------------------------------------

On the Zoomer the file system is accessed by banking in ROM into 16K
pages.  This forces alignment constraints:

* Each GFSDirEntry array must be in a single 16K block.

* A single GFSExtAttrs structure but not straddle a 16K boundry.  To
  ensure this GFSExtAttrs structures are padded to 256 bytes.

****************************************************************************
				    Tools
****************************************************************************
gfsTools:
see also [ contents gfsContents ]

The tool "gfs" (in /staff/pcgeos/Tools/gfs) is used for creating and
manipulating GFS file systems.

Type "gfs" to get usage information.

****************************************************************************
			   Implementation Notes
****************************************************************************
gfsImplementation:
see also [ contents gfsContents ]

The driver maintains 18 bytes of private data for each open file:

	GFSFileEntry	struct
	    GFE_extAttrs	dword	; offset of GFSExtAttrs
	    GFE_data		dword	; offset of file data
	    GFE_size		dword	; total size of file, to avoid reading
					;  past the end
	    GFE_curPos		dword	; current position in the file (not
					;  relative to GFE_data)
	    GFE_refCount	byte	; number of file handles that reference
					;  this structure
	    GFE_fileType	GeosFileTypeByte	; so we don't have
					;  to get to the extended attributes
					;  for an open file when loading a
					;  geode, just to confirm it's
					;  GFT_EXECUTABLE
	GFSFileEntry	ends

The FileID is just the offset of the GFSExtAttrs structure.

The private data stored with a path block for a thread is:

	GFSPathPrivate	struct
	    GPP_dirEnts		dword	; offset of directory entries for files
					;  in the directory
	    GPP_size		word	; number of entries in the directory
	    GPP_attrs		dword	; offset of extended attrs for this
					;  directory itself
	GFSPathPrivate	ends

The File driver will maintain a cache of the handles for the last 10
directories accessed. The handles will be discardable. GFSDevMapDir will
look like this:

	locate handle in cache
	if found:
		lock it down
		if lock successful, goto shuffle
		else MemReAlloc(0, HAF_LOCK)
	else
		allocate sufficient memory, locked
		store handle in first free slot, or clear out last slot
		    in the cache
	fi
	read directory contents into locked block
    shuffle:
	shuffle the slot in which we found the thing to the front of the
	    cache

When GFSDevLock(TRUE) is called for the File driver, future GFSDevMapEA
will read GFSExtAttrs structures 16 at a time, likely (into a 4K block),
and keep that memory around until GFSDevUnlock() is called.

The File driver should open the file using DR_DPFS_OPEN_INTERNAL and keep that
DOS handle forever.

****************************************************************************
		  What the Driver Does With Each Function
****************************************************************************
gfsInterface:
see also [ contents gfsContents ]

This is a listing of the functions with which an IFS driver will be called,
and what these drivers will do with each. For the "What" column, n/c means
never called, d/n means do nothing, err means always return an error, and
blank means we actually have to do something.

What	Call				Notes
----	----------------------		-------------------------------------
	DISK_ID				disk always valid, not writable, id 0
	DISK_INIT			call GFSDevGetVolumeName
n/c	DISK_LOCK			DISK_ID always returns the disk is
					always  valid
n/c	DISK_UNLOCK			ditto
n/c	DISK_FORMAT			FSDFlags says we can't format
	DISK_FIND_FREE			Return 0
	DISK_INFO			0 free space. How do we know how
					big the thing is? The name comes from
					the tail of the file name, for File,
					or from an arbitrary string we come
					up with for the Zoomer.
n/c	DISK_RENAME			disk not writable
n/c	DISK_COPY			FSDFlags says we can't copy
d/n	DISK_SAVE			Nothing needed to restore the disk,
					though the File driver might want to
					save the filename, so it can make sure
					the handle is for the same filesystem.
d/n	DISK_RESTORE			If we're loaded, the disk is restored.
n/c	CHECK_NET_PATH			FSDFlags says we don't do network paths
	CUR_PATH_SET			Locate the directory and create a
					GFSPathPrivate structure at FP_private
d/n	CUR_PATH_DELETE			We don't have auxiliary data
d/n	CUR_PATH_COPY			ditto
	FSHOF_READ			Add the base to the seek position, bound
					the number of bytes to read to the end
					of the file, and call GFSDevRead, then
					advance the seek position that much
					and return the number of bytes read
err	FSHOF_WRITE			Need I say more?
	FSHOF_POSITION			Add the position to the base and store
					it in GFE_curPos.
err	FSHOF_TRUNCATE
d/n	FSHOF_COMMIT			Nothing could have changed, so...
d/n	FSHOF_LOCK			Will need to support this when it's
d/n	FSHOF_UNLOCK			supported in the primary IFS drivers
	FSHOF_GET_DATE_AND_TIME		Map ExtAttrs and fetch
err	FSHOF_SET_DATE_AND_TIME
	FSHOF_FILE_SIZE			Get from private data
	FSHOF_ADD_REFERENCE		Increment GFE_refCount
	FSHOF_CHECK_DIRTY		Return not-dirty
	FSHOF_CLOSE			Decrement GFE_refCount & free private 
					data if now 0.
	FSHOF_GET_FILE_ID		Return GFE_extAttrs
	FSHOF_CHECK_NATIVE		Map ExtAttrs and check GEA_attrs.FA_GEOS
	FSHOF_GET_EXT_ATTRIBUTES	Steal from primary IFS driver, but
					change the EnsureHeader code, and
					maybe some of the setup.
err	FSHOF_SET_EXT_ATTRIBUTES
	FSHOF_GET_ALL_EXT_ATTRIBUTES	Steal wholesale from primary IFS
					driver.
	FSAOF_OPEN			Lookup file, allocate private data,
					return index & privdata offset.
err	FSAOF_CREATE
err	FSPOF_CREATE_DIR
err	FSPOF_DELETE_DIR
err	FSPOF_DELETE_FILE
err	FSPOF_RENAME_FILE
err	FSPOF_MOVE_FILE
	FSPOF_GET_ATTRIBUTES		Lookup, return attrs from dir entry
err	FSPOF_SET_ATTRIBUTES
	FSPOF_GET_EXT_ATTRIBUTES	Lookup file, do common code
err	FSPOF_SET_EXT_ATTRIBUTES
	FSPOF_GET_ALL_EXT_ATTRIBUTES	Steal from primary IFS driver
err	FSPOF_MAP_VIRTUAL_NAME		Can't run DOS progs from here
n/c	FSPOF_MAP_NATIVE_NAME		DOS won't know about this drive.
err	FSPOF_CREATE_LINK
	FSPOF_READ_LINK			Lookup, convert link data at GDE_data
					into FSPathLinkData.
	COMPARE_FILES			Compare GFE_extAttrs of the two
					entries
	FILE_ENUM			Lock FS in scan mode.
					for (i = 0; i < size(dir); i++) {
						map next ea
						call common code
						call callback
					}
					Unlock FS
d/n	DRIVE_LOCK
d/n	DRIVE_UNLOCK

****************************************************************************
			   Random Algorithm Details
****************************************************************************
gfsAlgorithms:
see also [ contents gfsContents ]

Initialization:

	if GFSDevInit() successful:
		GFSDevRead(0,sizeof(GFSDirEntry),gfsRootDir) to get the info on
		the location of the root directory.
		Create drive for the filesystem. XXX: WHAT NAME?
		Eventually, add as initial (?) entry for SP_TOP

Path lookup:

	if first char of path is \
		dir offset = root dir offset
		num ents = # root dir ents
		path++
	else
		lock cur path
		dir offset = FP_private.GPP_dirEnts
		num ents = FP_private.GPP_size
		unlock cur path
	fi

	while (*path != '\0') {
		find end of component
		if component is valid DOS name, map to 8/3 space-padded,
		    upcased form (XXX: need call in primary IFS driver to
		    perform this)
		GFSDevMapDir(diroffset, num ents)
		foreach entry:
			if component valid DOS name and matches GDE_dosName,
				break
			if GDE_longName matches component,
				break
		hcaerof
		if not found,
			GFSDevUnmapDir()
			return PATH_NOT_FOUND if components left or looking
			    for dir, or FILE_NOT_FOUND if no components left
		fi
		if components left,
			if found entry is link,
				build FSPathLinkData
				GFSDevUnmapDir()
				return LINK_ENCOUNTERED
			else if found entry not dir,
				GFSDevUnmapDir()
				return NOT_DIRECTORY
			else
				dir offset = GDE_data
				num ents = GDE_size
			fi
		else
			copy GFSDirEntry to global var & compute location
			of its extended attributes, storing that in a global
			var.
		fi
		GFSDevUnmapDir()
		path = componentEnd + (*componentEnd ? 1 : 0)
	}
		
			
			
