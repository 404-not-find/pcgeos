
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Memory video Driver
FILE:		vidmemMacro.def

AUTHOR:		Jim DeFrisco

MACROS:
		Name		Function
		----		--------
		SetBuffer
		NextScan
		PrevScan
		CalcScanLine

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Jim	12/91		Initial version

DESCRIPTION:
		This file contains macros for the Memory Video driver

	$Id: vidmemMacro.def,v 1.1 97/04/18 11:42:55 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SetVSeg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Utility to set up correct segment for video operations

PASS:		nothing

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	6/ 7/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SetVSeg		macro
	dgseg	= 	ss
ifidn @CurSeg, <Mono>
	dgseg	=	cs
endif
ifidn @CurSeg, <Clr4>
	dgseg	=	cs
endif
ifidn @CurSeg, <Clr8>
	dgseg	=	cs
endif
ifidn @CurSeg, <Clr24>
	dgseg	=	cs
endif
ifidn @CurSeg, <cmykcode>
	dgseg	=	cs
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SetBuffer
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set up segment address of video buffer. 

PASS: 		segreg 		- segment register to set
		trashReg 	- register that can be trashed
				  (not trashed by memory driver version)

RETURN: 	segreg 		- set

KNOWN BUGS/SIDE EFFECTS/IDEAS:
		none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	08/89		Initial version (for memory drvier)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetBuffer	macro	segreg, trashReg
EC <		call	ECCheckBitmapLocks				>
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextScan
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Increment to next scan line

PASS:		dest - register with scan line address
		segReg - if blank, es:di assumed, else HAS to be ds:si

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NextScan	macro	dest
		local	quickie, done
		SetVSeg

		dec	dgseg:[bm_scansNext]
		jnz	quickie
ifdif <dest>, <di>
		xchg	di, dest
		call	NextHugeBlock
		xchg	di, dest
else
		call	NextHugeBlock
endif
		jmp	done

quickie:
		add	dest, dgseg:[bm_bpScan]
done: 
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NextScanSrc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Increment to next scan line

PASS:		dest - register with scan line address
		segReg - if blank, es:di assumed, else HAS to be ds:si

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

NextScanSrc	macro	dest
		local	quickie, done
		SetVSeg

		dec	dgseg:[bm_scansNextSrc]
		jnz	quickie
ifdif <dest>, <di>
		xchg	di, dest
		call	NextHugeBlockSrc
		xchg	di, dest
else
		call	NextHugeBlockSrc
endif
		jmp	done

quickie:
		add	dest, dgseg:[bm_bpScan]
done: 
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PrevScan
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Decrement to previous scan line

PASS:		dest 	- location with scan line address
		segReg 	- segment register that contains pointer to bitmap 
			  data block
			  (if blank, es is assumed)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

PrevScan	macro	dest
		local	quickie, done
		SetVSeg

		dec	dgseg:[bm_scansPrev]
		jnz	quickie
ifdif <dest>, <di>
		xchg	dest, di
		call	PrevHugeBlock
		xchg	dest, di
else
		call	PrevHugeBlock
endif
		jmp	done
quickie:
		sub	dest, dgseg:[bm_bpScan]
done:
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PrevScanSrc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Decrement to previous scan line

PASS:		dest 	- location with scan line address
		segReg 	- segment register that contains pointer to bitmap 
			  data block
			  (if blank, es is assumed)

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

PrevScanSrc	macro	dest
		local	quickie, done
		SetVSeg

		dec	dgseg:[bm_scansPrevSrc]
		jnz	quickie
ifdif <dest>, <di>
		xchg	dest, di
		call	PrevHugeBlockSrc
		xchg	dest, di
else
		call	PrevHugeBlockSrc
endif
		jmp	done
quickie:
		sub	dest, dgseg:[bm_bpScan]
done:
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CalcScanLine
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calculate the beginning scan line position

PASS:		reg 	- register containing line number
		offReg	- offset into scan line, stored into bm_byteOffset
		segReg	- segment which should be set to point at frame buff
			    at the end of the macro

RETURN: 	segReg:reg - far pointer into frame buffer

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

CalcScanLine	macro	reg, offReg, segReg
	SetVSeg


	ifb	<offReg>
		clr	dgseg:[bm_byteOffset]
	else
		mov	dgseg:[bm_byteOffset], offReg
	endif
	ifb	<segReg>
		push	ds
	else
	    ifdif <segReg>, <ds>
		push	ds
	    endif
	endif
	ifdif	<reg>, <ax>
		push	ax
		mov	ax, reg
	endif
	ifdif	<reg>, <si>
		push	si
	endif
		call	LockHugeBlock
	ifdif	<reg>, <si>
		mov	reg, si
		pop	si
	endif
	ifdif	<reg>, <ax>
		pop	ax	
	endif
	ifb	<segReg>
		segmov	es, ds
		pop	ds
	else 
	    ifdif <segReg>, <ds>
		segmov	segReg, ds
		pop	ds
	    endif
	endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CalcScanLineSrc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calculate the beginning scan line position

PASS:		reg 	- register containing line number
		offReg	- offset into scan line, stored into bm_byteOffset
		segReg	- segment which should be set to point at frame buff
			    at the end of the macro

RETURN: 	segReg:reg - far pointer into frame buffer

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

CalcScanLineSrc	macro	reg, offReg, segReg
	SetVSeg

	ifb	<offReg>
		clr	dgseg:[bm_byteOffsetSrc]
	else
		mov	dgseg:[bm_byteOffsetSrc], offReg
	endif
	ifb	<segReg>
		push	ds
	else
	    ifdif <segReg>, <ds>
		push	ds
	    endif
	endif
	ifdif	<reg>, <ax>
		push	ax
		mov	ax, reg
	endif
	ifdif	<reg>, <si>
		push	si
	endif
		call	LockHugeBlockSrc
	ifdif	<reg>, <si>
		mov	reg, si
		pop	si
	endif
	ifdif	<reg>, <ax>
		pop	ax	
	endif
	ifb	<segReg>
		segmov	es, ds
		pop	ds
	else 
	    ifdif <segReg>, <ds>
		segmov	segReg, ds
		pop	ds
	    endif
	endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ReleaseHugeArray
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Cleanup by releasing last data block locked

PASS:		optional register to use for scratch

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jim	2/11/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ReleaseHugeArray	macro	trashreg
	SetVSeg

		local	done
		tst	dgseg:[bm_lastSeg]
		jz	done
		push	ds
		mov	ds, dgseg:[bm_lastSeg]
		call	HugeArrayDirty
		call	HugeArrayUnlock
		pop	ds
		clr	dgseg:[bm_lastSeg]
done:
endm

ReleaseHugeArray2	macro	trashreg
		SetVSeg

		local	done, doDest
		push	ds
		tst	dgseg:[bm_lastSegSrc]
		jz	doDest
		mov	ds, dgseg:[bm_lastSegSrc]
		call	HugeArrayDirty
		call	HugeArrayUnlock
		clr	dgseg:[bm_lastSegSrc]
doDest:
		tst	dgseg:[bm_lastSeg]
		jz	done
		mov	ds, dgseg:[bm_lastSeg]
		call	HugeArrayDirty
		call	HugeArrayUnlock
		clr	dgseg:[bm_lastSeg]
done:
		pop	ds
endm

