COMMENT @-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Video Driver
FILE:		simp4bitMacro.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	7/90		Initial version, mostly copied from HGC driver

DESCRIPTION:
	This file contains macros for the Simp4Bit Video driver
	
	$Id: simp4bitMacro.def,v 1.1 97/04/18 11:43:46 newdeal Exp $

-------------------------------------------------------------------------------@

COMMENT @-----------------------------------------------------------------------

MACRO:		SetBuffer	segreg, trashReg

DESCRIPTION:	Increment register to the next scan line

PASS:
	segreg - segment register to set
	trashReg - register that can be trashed

RETURN:
	segreg - set

-------------------------------------------------------------------------------@

SetBuffer	macro	segreg, trashReg
	mov	trashReg,SCREEN_BUFFER
	mov	segreg,trashReg
endm

COMMENT @-----------------------------------------------------------------------

MACRO:		NextScan

DESCRIPTION:	Increment to the next scan line

PASS:
	dest - register with scan line address
	adjust - modification (in bytes) to position on next scan

RETURN:
	reg - updated

-------------------------------------------------------------------------------@

NextScan	macro	dest, adjust
ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	add	dest, SCREEN_BYTE_WIDTH+(adjust)
    else
	add	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	add	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @-----------------------------------------------------------------------

MACRO:		PrevScan

DESCRIPTION:	Decrement to the previous scan line

PASS:
	dest 	- location with scan line address
	adjust 	- modification (in bytes) to position on next scan

RETURN:
	dest 	- updated

-------------------------------------------------------------------------------@

PrevScan	macro	dest, adjust
		local	checkedFirstBank


ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	add	dest, (adjust)-SCREEN_BYTE_WIDTH
    else
	sub	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	sub	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @-----------------------------------------------------------------------

MACRO:		StoreNextScanMod

DESCRIPTION:	Store a self modified value for NextScanMod

PASS:
	dest - destination address
	reg - register with value to modify or constant

RETURN:
	reg - destroyed

-------------------------------------------------------------------------------@

StoreNextScanMod	macro	dest, adjust

ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	mov	dest, SCREEN_BYTE_WIDTH+(adjust)
    else
	mov	dest, SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	mov	dest, SCREEN_BYTE_WIDTH
endif

endm

COMMENT @-----------------------------------------------------------------------

MACRO:		NextScanMod

DESCRIPTION:	Increment register to the next scan line

PASS:
	reg - register with scan line address
	sym - symbol for word to relocate

RETURN:
	reg - updated

-------------------------------------------------------------------------------@

NextScanMod	macro	reg, sym
	local	stuff

stuff	label	word
sym	=	stuff + 2
	add	reg, 1234h
endm

COMMENT @-----------------------------------------------------------------------

MACRO:		StorePrevScanMod

DESCRIPTION:	Store a self modified value for PrevScanMod
		For the MCGA, this is the same as StoreNextScanMod

PASS:
	dest - destination address
	reg - register with value to modify

RETURN:
	reg - destroyed

-------------------------------------------------------------------------------@

StorePrevScanMod	macro	dest, adjust

ifnb <&adjust>
    if ((.TYPE adjust) AND 4)		; if adjust is a constant
	mov	dest, (adjust)-SCREEN_BYTE_WIDTH
    else
	mov	dest, -SCREEN_BYTE_WIDTH
	add	dest, (adjust)
    endif
else
	mov	dest, -SCREEN_BYTE_WIDTH
endif

endm

COMMENT @-----------------------------------------------------------------------

MACRO:		PrevScanMod

DESCRIPTION:	Increment register to the next scan line

PASS:
	reg - register with scan line address
	sym - symbol for word to relocate

RETURN:
	reg - updated

-------------------------------------------------------------------------------@

PrevScanMod	macro	reg, sym
	local	stuff

stuff	label	word
sym	=	stuff + 2
	add	reg, 1234h
endm

COMMENT @-----------------------------------------------------------------------

MACRO:		CalcScanLine

DESCRIPTION:	Calculate the beginning scan line position

PASS:
	reg - register containing line number
	offsetReg - register containing offset to add to base scan line address

RETURN:
	reg - address
	offsetReg - destroyed

-------------------------------------------------------------------------------@

ifidn	HARDWARE_TYPE, <BOR1> ; BOR1 ========================================

    ; Here, we want reg = 160L + 0

CalcScanLine	macro	reg, offsetReg
	local	isEven, multOf4

.386

	sal	reg, 5			;reg = 32L
	add	offsetReg, reg		;offsetReg = 32L+0
	sal	reg, 2			;reg = 128L
	add	reg, offsetReg		;reg = 128L+32L+0 = 160L+0
endm

else	; RESPONDER or default, whatever that is. ===========================
	
	; result should be: reg = 320L + O
	;		where:
	;			L = line number (passed in reg)
	;			O = offset (passed in offsetReg)

CalcScanLine	macro	reg, offsetReg
	local	isEven, multOf4

	sal	reg,1			;reg = 2L
	sal	reg,1			;reg = 4L
	sal	reg,1			;reg = 8L
	sal	reg,1			;reg = 16L
	sal	reg,1			;reg = 32L
	sal	reg,1			;reg = 64L
	add	offsetReg, reg		;offsetReg = 64L+O
	sal	reg,1			;reg = 128L
	sal	reg,1			;reg = 256L
	add	reg,offsetReg		;reg = 256L + (64L + O)
					;	= 320L + O + BO
endm

endif


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PENE, NOPENE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Penelope-specific instruction (PENE).
		NOPENE performs an instruction on all platforms but Penelope

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	3/ 7/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
PENE		macro	line
endm

NOPENE		macro	line
		line
endm




COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PeneMapBitmapColor
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	On Penelope, we need to do a special mapping from the
		standard 4-bit colors in bitmaps to our 4-color scheme.
		
		PENELOPE only.  Does nothing for other products.

PASS:		al	= standard 4-bit color

RETURN:		al	= mapped 4-bit color

DESTROYED:	nothing

PSEUDO CODE/STRATEGY:
	Essentially, the mapping scheme is this:
	
		Color	4-bit	Penelope
		-----	-----	--------
		B	0000	0000
		LG	0111	0001
		DG	1000	0010
		W	1111	0011
	    
	This reduces to a shift-right by two operation.
		

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	8/12/96   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
PeneMapBitmapColor	macro
PENE <.386								>
PENE <		shr	al, 2						>
endm
