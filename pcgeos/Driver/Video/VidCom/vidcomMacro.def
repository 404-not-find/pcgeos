COMMENT @-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Common Video Driver
FILE:		vidcomMacro.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	10/88		Initial version
	jeremy	5/91		Added support for monochrome EGA

DESCRIPTION:
	This file contains macros for the CGA Video driver
	
	$Id: vidcomMacro.def,v 1.1 97/04/18 11:41:55 newdeal Exp $

-------------------------------------------------------------------------------@

; either the driver is VIDMEM, or it is for a real device

MEM	macro	line
ifdef	IS_MEM
line
endif
endm

NMEM	macro	line
ifndef	IS_MEM
line
endif
endm

MMEM	macro	line
ifdef	IS_MEM
ifdef	IS_MONO
line
endif
endif
endm

CMEM	macro	line
ifdef	IS_MEM
ifndef	IS_MONO
line
endif
endif
endm

; either the device can handle 16-bit writes, or only 8-bit writes

IS8	macro	line
ifdef	IS_8
line
endif
endm


IS16	macro	line
ifdef	IS_16
line
endif
endm

; either the device has extra video RAM for save under, or it doesn't

ALT	macro	line
ifdef	ALT_VIDEO_RAM
line
endif
endm


NOALT	macro	line
ifndef	ALT_VIDEO_RAM
line
endif
endm


; If the driver is an ALT_VIDEO_RAM driver, it may not use all of
; each scanline for display.  If so, it may be a Half-screen driver (or not)
HALF	macro	line
ifdef	IS_HALF_SCREEN
line
endif
endm

NOHALF	macro	line
ifndef	IS_HALF_SCREEN
line
endif
endm


; Either it is useful for the device to support an inverse video mode, or not

INVRSE	macro	line
ifdef	INVERSE_DRIVER
line
endif
endm

; The driver supports one fixed resolution or multiple resolutions

MRES	macro	line
ifndef	IS_MEM
ifdef	MULT_RESOLUTIONS
line
endif
endif
endm

FRES	macro	line
ifndef	IS_MEM
ifndef	MULT_RESOLUTIONS
line
endif
endif
endm

; some macros to tell the difference between different EGA/VGA modes

EGA	macro	line
ifdef	IS_VGALIKE
line
endif
endm

CEGA	macro	line
ifdef	IS_VGALIKE
ifndef	IS_MEGA
line
endif
endif
endm

VGA8	macro	line
ifdef	IS_VGA8
line
endif
endm

MEGA	macro	line
ifdef	IS_MEGA
line
endif
endm

; macros for specific devices

CASIO	macro	line
ifdef	IS_CASIO
line
endif
endm

NIKEC	macro	line
ifdef	IS_NIKE_COLOR
line
endif
endm

JEDI	macro	line
ifdef	IS_JEDI
	line
endif
endm

; Either the device has an accessible frame buffer, or not

BIT	macro	line
ifdef	IS_BITMAP
line
endif
endm

; This is a version for monochrome devices only.
MBIT	macro	line
ifdef	IS_BITMAP
ifdef	IS_MONO
line
endif
endif
endm

; This is a version for dithered devices only.
DBIT	macro	line
ifdef	IS_BITMAP
ifndef	IS_CLR24
line
endif
endif
endm


; A few macros to tell the difference between different color resolutions

C2	macro	line
ifdef	IS_CLR2
line
endif
endm

C4	macro	line
ifdef	IS_CLR4
line
endif
endm

C8	macro	line
ifdef	IS_CLR8
line
endif
endm

C24	macro	line
ifdef	IS_CLR24
line
endif
endm

NC24	macro	line
ifndef	IS_CLR24
line
endif
endm

NCLR	macro	line
ifndef	IS_CLR4
ifndef	IS_CLR8
ifndef	IS_CLR24
line
endif
endif
endif
endm


CMYK	macro	line
ifdef	IS_CMYK
line
endif
endm

MONO	macro	line
ifdef	IS_MONO
line
endif
endm

INV_CLR2	macro	line
ifdef	INVERTED_CLR2
line
endif
endm

NON_INV_CLR2	macro	line
ifndef	INVERTED_CLR2
line
endif
endm

INV_CLR4	macro	line
ifdef	INVERTED_CLR4
line
endif
endm

NON_INV_CLR4	macro	line
ifndef	INVERTED_CLR4
line
endif
endm

NT		macro	line
ifdef	WIN32
line
endif
endm

;
; For IS_16 drivers, either the two bytes in a word are reversed (high byte
; appears on the left on screen and low byte on the right), or they are not.
;
RW		macro	line
ifdef	REVERSE_WORD
line
endif
endm

;
; Hardware that has large video RAM (more than 64K of on-screen plus
; save-under video RAM).
;
LVR		macro	line
ifdef	LARGE_VIDEO_RAM
line
endif
endm

SVR		macro	line
ifndef	LARGE_VIDEO_RAM
line
endif
endm



; a couple of macros to generate resource names for different drivers
;
VidSegment	macro	rootName
ifndef IS_MEM
    segName catstr <Video>, <&rootName>
elifdef MEM_MONO
    segName catstr <Mono>, <&rootName>
elifdef MEM_CLR2
    segName catstr <Clr2>, <&rootName>
elifdef MEM_CLR4
    segName catstr <Clr4>, <&rootName>
elifdef MEM_CLR8
    segName catstr <Clr8>, <&rootName>
elifdef MEM_CLR24
    segName catstr <Clr24>, <&rootName>
elifdef MEM_CMYK
    segName catstr <CMYK>, <&rootName>
endif
segName segment resource
endm


VidEnds	macro	rootName
ifndef IS_MEM
    segName catstr <Video>, <&rootName>
elifdef MEM_MONO
    segName catstr <Mono>, <&rootName>
elifdef MEM_CLR2
    segName catstr <Clr2>, <&rootName>
elifdef MEM_CLR4
    segName catstr <Clr4>, <&rootName>
elifdef MEM_CLR8
    segName catstr <Clr8>, <&rootName>
elifdef MEM_CLR24
    segName catstr <Clr24>, <&rootName>
elifdef MEM_CMYK
    segName catstr <CMYK>, <&rootName>
endif
segName ends
endm


; copy bytes for a draw mask
; altSegReg is optional, and can be used if the target buffer is not
; in CS.

CopyMask	macro	dest, reg, altSegReg
		local	winMask, winMask2, copyComplete
ifb <altSegReg>
	mov	reg,word ptr dest		;copy mask
	mov	word ptr cs:[maskBuffer],reg
	mov	reg,word ptr dest[2]		;copy mask
	mov	word ptr cs:[maskBuffer+2],reg
	mov	reg,word ptr dest[4]		;copy mask
	mov	word ptr cs:[maskBuffer+4],reg
	mov	reg,word ptr dest[6]		;copy mask
	mov	word ptr cs:[maskBuffer+6],reg
else
	mov	reg,word ptr dest		;copy mask
	mov	word ptr altSegReg:[maskBuffer],reg
	mov	reg,word ptr dest[2]		;copy mask
	mov	word ptr altSegReg:[maskBuffer+2],reg
	mov	reg,word ptr dest[4]		;copy mask
	mov	word ptr altSegReg:[maskBuffer+4],reg
	mov	reg,word ptr dest[6]		;copy mask
	mov	word ptr altSegReg:[maskBuffer+6],reg
endif

	test	es:[W_color], mask WCF_MASKED
	jz	copyComplete

	; Window is masked.  Mask out the mask (SDM_50 | SDM_INVERSE).

	mov	reg, es:[W_ditherX]		;use W_ditherX/Y to align mask
	xor	reg, es:[W_ditherY]		; correctly
	shr	reg, 1
	mov	reg, 0101010110101010b		;SDM_50 | SDM_INVERSE
	jnc	winMask
	not	reg				;1010101001010101b
winMask:
	test	es:[W_color], mask WCF_DRAW_MASK
	jz	winMask2	
	not	reg				;0101010110101010b
winMask2:

ifb <altSegReg>
	andnf	{word}cs:[maskBuffer],reg
	andnf	{word}cs:[maskBuffer+2],reg
	andnf	{word}cs:[maskBuffer+4],reg
	andnf	{word}cs:[maskBuffer+6],reg
else
	andnf	{word}altSegReg:[maskBuffer],reg
	andnf	{word}altSegReg:[maskBuffer+2],reg
	andnf	{word}altSegReg:[maskBuffer+4],reg
	andnf	{word}altSegReg:[maskBuffer+6],reg
endif

copyComplete:

ifdef BIT_CLR4
	call	BuildMasks4			; build out mask buffer 
endif
ifdef BIT_CLR2
	call	BuildMasks2			; build out mask buffer
endif
endm

EBRANCH	macro	opcode, prefix, expr
	opcode	&prefix&expr
endm

ELABEL	macro	prefix, expr
&prefix&expr:
endm


;	Macro to translate region positions

TranslCoord1	macro	reg, lab1, lab2
	test	reg,0c0h		;test top two bits
	jpo	lab2			;if 01 or 10 then translate
lab1	label	near
endm

TranslCoord2	macro	reg, lab1, lab2
lab2	label	near
ifdif	<reg>,<ax>
	xchg	ax,reg
endif
	call	TransRegCoord
ifdif	<reg>,<ax>
	xchg	ax,reg
endif
	jmp	short lab1
endm

ifndef IS_CLR24
; CheckSetDither
;
; This macro is used in ALL video drivers at the beginning of drawing
; functions to check to see if the ditherMatrix needs to be initialized
; and to call SetDither if it does.  It takes:
;	vidSeg  - seg register that points to video variables
;	ds:si	- points to CommonAttr structure
;		OR
;	attrOffset - (optional) offset to use instead of si
;	es	- window
; trashes: dx

CheckSetDither	macro	vidSeg, attrOffset
	; don't need to do anything at all for 24-bit color devices
		local	done,  setupDither

	; init state to *not* dither
		and	vidSeg:driverState, not mask VS_DITHER ; no dither

ifnb	<attrOffset>
	; while we are here, check to see if the draw mode is already setup
	; for VGAlike devices...
		mov	dl, ds:[GS_mixMode]		; get draw mode
		mov	dh, ds:[attrOffset].CA_colorIndex		
		mov	{word} vidSeg:currentDrawMode, dx ; save it
ifdif <vidSeg>, <cs>
EGA <		call	SetEGAClrModeFar				>
NIKEC <		call	SetNikeClrModeFar				>
;CASIO <	call	SetCasioModeFar					>
else
EGA <		call	SetEGAClrMode					>
NIKEC <		call	SetNikeClrMode					>
;CASIO <	call	SetCasioMode					>
endif
		mov	dh, ds:[attrOffset].CA_mapMode ; get map mode
		mov	vidSeg:currentMapMode, dh
ifdif <vidSeg>, <cs>
		call	SetResetColorFar
else
		call	SetResetColor
endif

	; always dither for mono, CMYK, CLR2 and CLR4-bitmap devices
ifndef  IS_MONO
ifndef  IS_CMYK
ifndef	BIT_CLR2
ifndef	BIT_CLR4
		test	dh, mask CMM_MAP_TYPE
		jz	done
endif
		test	ds:[GS_mixMode], 1		; see if source matters
		jz	done				;  no, skip dithering
		test	ds:[attrOffset].CA_flags, mask AO_USE_INDEX
C8 <		jnz	done						>
C4 <		jz	setupDither					>
C4 <		mov	dl, ds:[attrOffset].CA_colorIndex		>
C4 <		test	dl, 0xf0					>
ifdef BIT_CLR4
		jnz	setupDither
		mov	dh, dl				
		shl	dl, 1				
		shl	dl, 1				
		shl	dl, 1				
		shl	dl, 1				
		or	dl, dh				
		mov	dh, dl				
		mov	{word} vidSeg:[ditherMatrix], dx
		mov	{word} vidSeg:[ditherMatrix+2], dx		
		mov	{word} vidSeg:[ditherMatrix+4], dx		
		mov	{word} vidSeg:[ditherMatrix+6], dx
.assert	DOC_MATRIX_HOLDS_COLOR_INDEX	eq	0
		clr	vidSeg:[ditherOrColor]
		jmp	done						
else
C4 <		jz	done						>
endif
C4 <setupDither:							>
endif		;BIT_CLR2
endif 		;IS_CMYK
endif 		;IS_MONO
	; compute the ditherMatrix.  
		mov	dx, si				; save si
		mov	si, attrOffset
		call	SetDither			; setup ditherMatrix
		mov	si, dx				; restore si
else
	; while we are here, check to see if the draw mode is already setup
	; for VGAlike devices...
		mov	dl, ds:[GS_mixMode]		; get draw mode
		mov	dh, ds:[si].CA_colorIndex		
		mov	{word} vidSeg:currentDrawMode, dx ; save it
ifdif <vidSeg>, <cs>
EGA <		call	SetEGAClrModeFar				>
NIKEC <		call	SetNikeClrModeFar				>
;CASIO <	call	SetCasioModeFar					>
else
EGA <		call	SetEGAClrMode					>
NIKEC <		call	SetNikeClrMode					>
;CASIO <	call	SetCasioMode					>
endif
		mov	dh, ds:[si].CA_mapMode ; get map mode
		mov	vidSeg:currentMapMode, dh
ifdif <vidSeg>, <cs>
		call	SetResetColorFar
else
		call	SetResetColor
endif

	; always dither for mono and CMYK devices
ifndef  IS_MONO
ifndef  IS_CMYK
ifndef	BIT_CLR2
ifndef	BIT_CLR4
		test	dh, mask CMM_MAP_TYPE
		jz	done
endif
		test	ds:[GS_mixMode], 1		; see if source matters
		jz	done				;  no, skip dithering
		test	ds:[si].CA_flags, mask AO_USE_INDEX
C8 <		jnz	done						>
C4 <		jz	setupDither					>
C4 <		mov	dl, ds:[si].CA_colorIndex		>
C4 <		test	dl, 0xf0					>
ifdef BIT_CLR4
		jnz	setupDither			
		mov	dh, dl				
		shl	dl, 1				
		shl	dl, 1				
		shl	dl, 1				
		shl	dl, 1				
		or	dl, dh				
		mov	dh, dl
		mov	{word} vidSeg:[ditherMatrix], dx
		mov	{word} vidSeg:[ditherMatrix+2], dx		
		mov	{word} vidSeg:[ditherMatrix+4], dx		
		mov	{word} vidSeg:[ditherMatrix+6], dx		
.assert	DOC_MATRIX_HOLDS_COLOR_INDEX	eq	0
		clr	vidSeg:[ditherOrColor]
		jmp	done						
else
C4 <		jz	done						>
endif
C4 <setupDither:							>
endif		;BIT_CLR2
endif		;IS_CMYK
endif		;IS_MONO

	; compute the ditherMatrix

		call	SetDither			; setup ditherMatrix
endif
		or	vidSeg:driverState, mask VS_DITHER ; set dither flag
ifndef  IS_MONO
ifndef  IS_CMYK
ifndef	BIT_CLR2
done:
endif
endif
endif
endm
endif		;IS_CLR24

;
; Call into the dll to tell it we are done with a video operation.
UPDATE_SCREEN	macro
	local	notLoaded
ifdef	WIN32	
	push	ax, ds, bx
	;
	; If the library hasn't been loaded yet, don't
	; call into it or you will die.
	segmov	ds, dgroup, ax
	mov	ax, ds:[vddHandle]
	cmp	ax, 0
	je	notLoaded
	; Flush the last scanline to memory and the screen.
	; before telling the screen to redraw	
if 1
	mov	bx, VDD_FUNC_UPDATE_WINDOW
	DispatchCall
else
	push	ax		; vdd handle
	clr	ax		; don't change scanline after flushing
	call	DrawCurrentScanLine
	pop	ax		; vdd handle
endif
notLoaded:
	pop	ax, ds, bx
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		addnf/subnf
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Fast-add/subtract a constant to/from a 16-bit register.

PASS:		reg16	= destination register
		const	= constant to add/subtract

PSEUDO CODE/STRATEGY:
	These do not set flags same as "ADD" or "SUB" instructions.

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ayuen	3/30/99   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
addnf	macro	reg16, const
	if (const eq 1)
		inc	reg16
	elif (const eq 2)
		inc	reg16
		inc	reg16
	elif (const eq -1)
		dec	reg16
	elif (const eq -2)
		dec	reg16
		dec	reg16
	elif (const ne 0)
		add	reg16, const
	endif
endm

subnf		macro	reg16, const
	if (const eq 1)
		dec	reg16
	elif (const eq 2)
		dec	reg16
		dec	reg16
	elif (const eq -1)
		inc	reg16
	elif (const eq -2)
		inc	reg16
		inc	reg16
	elif (const ne 0)
		sub	reg16, const
	endif
endm
