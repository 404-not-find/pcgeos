COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

			GEOWORKS CONFIDENTIAL

PROJECT:	Socket
MODULE:		Modem Driver
FILE:		modem.def

AUTHOR:		Jennifer Wu, Mar 14, 1995

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jwu	3/14/95		Initial revision


DESCRIPTION:
	
		
	$Id: modem.def,v 1.1 97/04/18 11:47:54 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;---------------------------------------------------------------------------
;		Class Definition
;---------------------------------------------------------------------------
ModemProcessClass	class	ProcessClass

MSG_MODEM_RECEIVE_DATA		message
;
; DESCRIPTION:	Data notification handler.  
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYS:	ax, cx, dx, bp
;

MSG_MODEM_RESPONSE_TIMEOUT	message
;
; DESCRIPTION:  Give up waiting for the modem to respond to a command.
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYS:	ax, cx, dx, bp


;
; These messages are where the real work of sending a command to 
; the modem is done.  The code depends on the order in which 
; these are defined.  Unless documented otherwise, MSG_MODEM_DO_* 
; is passed nothing, returns nothing and may destroy ax, cx, dx, bp.
;
MSG_MODEM_DO_DIAL		message
; PASS:		cx:dx	= dial string (not null-terminated)
;		bp	= size of dial string 

MSG_MODEM_DO_ANSWER_CALL	message

MSG_MODEM_DO_HANGUP		message

MSG_MODEM_DO_RESET		message	

MSG_MODEM_DO_FACTORY_RESET	message

MSG_MODEM_DO_INIT_MODEM		message
; PASS:		cx:dx	= initialization string (not null-terminated)
;		bp	= size of initialization string

MSG_MODEM_DO_AUTO_ANSWER	message
; PASS:		cl	= number of rings 
;

MSG_MODEM_DO_CHECK_DIAL_TONE	message
; PASS:		cx	= timeout

MSG_MODEM_MODEM_LINE_CHANGE	message
; PASS:		cx	= SerialModemStatus

MSG_MODEM_DO_ABORT_DIAL		message

ifdef HANGUP_LOG
MSG_MODEM_DO_DIAL_STATUS	message
endif

ModemProcessClass	endc

;---------------------------------------------------------------------------
;			Constants
;---------------------------------------------------------------------------

ONE_SECOND		equ	60

ESC_GUARD_TIME		equ	ONE_SECOND
; Time of inactivity surrounding the escape guard sequence
;

LONG_RESPONSE_TIMEOUT	equ	90 * ONE_SECOND
; Time to wait for the modem to respond to a dial or answer call 
; command.  
;

SHORT_RESPONSE_TIMEOUT	equ	10 * ONE_SECOND
; Time to wait for the modem to respond to all other commands.
;

EXTRA_HANGUP_ESC_GUARD_TIME equ	ONE_SECOND / 2
; Extra guard time surrounding the escape guard sequence when hanging up.
;

ESCAPE_RESPONSE_TIMEOUT	equ	3 * ONE_SECOND
; Time to wait for the escape sequence to timeout.
;

RESET_ESCAPE_RESPONSE_TIMEOUT	equ	ONE_SECOND / 2
; Time to wait for the escape sequence to timeout when doing a reset
; and we don't feel like waiting around when we're pretty sure the
; modem is already in command mode.
;

RESPONSE_BUFFER_SIZE	equ	50		
; Buffer for holding modem response.  This should be big enough for
; any response the modem might send in response to a command from
; the modem driver.  
; 

MAX_ASCII_ARG_SIZE	equ	3
; Maximum number of characters in ascii representation of argument.  
; Max value is 255.
;

ASCII_BUFFER_SIZE	equ	MAX_ASCII_ARG_SIZE+1
; Just to make it even becaues the buffer is allocated on the stack
; and we don't want to confuse swat.  

NUM_CR_FOR_RESET	equ	2
; One to flush previous modem command.  Second to interrupt previous
; command, if it was interruptible.
;

;---------------------------------------------------------------------------
;		Structures and Records
;---------------------------------------------------------------------------

;
; Modem responses are:  <CR><LF><text><CR><LF>
; Must keep track of first <CR> to know when a response begins, keep track
; of when the opening <CR><LF> pair has been received to know when the data
; is the text of the response, and the final <CR> to know when the response
; ends.
;
ModemResponseState	etype	byte, 0
MRS_NONE		enum ModemResponseState
MRS_SAW_BEGIN_CR	enum ModemResponseState	
MRS_RECV_RESPONSE	enum ModemResponseState	
MRS_SAW_END_CR		enum ModemResponseState	
MRS_SAW_BEGIN_ECHO	enum ModemResponseState
MRS_RECV_ECHO		enum ModemResponseState


ModemStatus	record
	MS_ABORT_DIAL:1			; DR_MODEM_ABORT_DIAL sent
	MS_COMMAND_MODE:1		; command mode 
	MS_CONNECTED:1			; connection established
	MS_CLIENT_BLOCKED:1		; client is waiting for modem response
	MS_HAVE_CLIENT:1		; have a registered client
	MS_RESPONSE_INFO ModemResponseState:3
ModemStatus	end

ModemMiscStatus	record
	:7
	MSS_MODE_UNCERTAIN:1		; state of MS_COMMAND_MODE is uncertain,
					;  but pretty sure it's accurate
ModemMiscStatus	end

;---------------------------------------------------------------------------
;			Macros
;---------------------------------------------------------------------------

if ERROR_CHECK

; 
; DESCRIPTION: Verify port number is valid, else default it to Com1.  
; PASS: 	reg	= register containing port number
; DESTROYS: 	nothing
;
CheckPortNum	macro	reg
		local	errorNum
		local	cool
		cmp	reg, SERIAL_COM8				
		ja	errorNum					
		test	reg, 1						
		jnz	errorNum					
		jmp	cool						
errorNum:								
		WARNING	MODEM_BAD_PORT_NUM				
		clr	reg			; set to SERIAL_COM1
cool:								
endm

endif		

;---------------------------------------------------------------------------
;			Fatal Errors
;---------------------------------------------------------------------------

MODEM_INTERNAL_ERROR				enum	FatalErrors

ZERO_LENGTH_MODEM_DIAL_STRING			enum 	FatalErrors
; A zero length dial string is illegal

INVALID_ARGUMENT_TO_MODEM_COMMAND		enum 	FatalErrors
; Argument values range from 0 - 255

MODEM_CAN_ONLY_NOTIFY_READER			enum	FatalErrors
; Writer notification is registered directly with the serial port

UNSUPPORTED_STREAM_NOTIFY_EVENT			enum	FatalErrors
; Modem driver only supports notification of incoming data and 
; notification of modem responses

MODEM_SET_NOTIFY_BAD_FLAGS			enum	FatalErrors

MODEM_SET_NOTIFY_FAILED				enum	FatalErrors
;
; A call to the serial driver's DR_STREAM_SET_NOTIFY returned failure.
;
MODEM_DRIVER_CALLED_WITH_OWN_THREAD		enum	FatalErrors
; The client cannot make a call to the modem driver during one of
; the routine notifications for data or modem responses.


CANNOT_PROCESS_MULTIPLE_MODEM_COMMANDS		enum	FatalErrors
; Cannot send the modem another response before the modem has a chance
; to respond to a prior command.

CANNOT_SEND_COMMAND_IN_DATA_MODE		enum	FatalErrors
; Only command which can be sent in data mode is hangup.  Once a 
; connection has been established, the modem driver stays in data
; mode until the client has issued a hangup command.  


MODEM_BAD_RESPONSE_STATE			enum	FatalErrors

RESPONSE_TIMER_MISSING				enum 	FatalErrors
; If there is a client blocked, there must be a response timer around.

MODEM_CLIENT_USING_INVALID_PORT			enum	FatalErrors
; The port number differs from the one the registered client claims to
; be using.

MODEM_CLIENT_NOT_REGISTERED			enum	FatalErrors
; Client must have registered by calling DR_MODEM_OPEN before calling
; other modem driver functions.


;---------------------------------------------------------------------------
;			Warnings
;---------------------------------------------------------------------------

MODEM_DRIVER_UNABLE_TO_CREATE_THREAD		enum	Warnings

MODEM_DRIVER_UNABLE_TO_SEND_COMMAND		enum	Warnings

MODEM_BAD_PORT_NUM				enum	Warnings

MODEM_UNUSUAL_RESPONSE_FORMAT			enum 	Warnings

MODEM_BAUD_RATE_TOO_BIG				enum	Warnings
; Modem supports a baud rate greater than the size of a word.  

UNUSUAL_CONNECT_RESPONSE_FORMAT			enum	Warnings
; Usually, if the CONNECT response is followed by the baud rate, 
; a space separates the two.

MODEM_DRIVER_FLUSHING_INPUT_DATA		enum	Warnings
; If data arrives and the modem driver has noone to notify, the
; data will sit in the stream, preventing further data notifications.
; This is a bad thing.  Therefore, input data will be flushed.
;

MODEM_CORRECTING_RESPONSE_BUFFER_OVERFLOW	enum	Warnings
; If response buffer is about to overflow, input in buffer will be 
; discarded.  New input will be placed at the start of buffer.  
; No response or echo should ever exceed the size of the buffer so 
; any data triggering this warning is probably garbage.
;

MODEM_SET_NOTIFY_FAILED_WHO_CARES		enum	Warnings
;
; A call to the serial driver's DR_STREAM_SET_NOTIFY returned failure.
;

MODEM_SET_NOTIFY_FOR_MODEM_SIGNALS_FAILED	enum	Warnings
;
; A call to the serial driver's DR_STREAM_SET_NOTIFY for SNE_MODEM
; failed.  This will prevent modem signals from being sent to the client,
; if the client so wishes.
;
