COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved
	Copyright (c) Designs in Light 2000 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		Power Drivers
FILE:		apm10Configure.def

AUTHOR:		Gene Anderson

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	gene	02/04/99   	Initial revision


DESCRIPTION:
	$Id$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;		General Power Defines and Includes
;-----------------------------------------------------------------------------

	POLL_BATTERY		=	FALSE
	DISPLAY_MESSAGES	=	TRUE


;-----------------------------------------------------------------------------
;		Hardware List
;-----------------------------------------------------------------------------

	;  While APM is a standard interface, the hardware that is
	;  be controlled by it is not.
	;  For each hardware type defined, a series of constants
	;	must be defined that will determine how much of
	;	the "common code", and which pieces will get
	;	included into a particular hardware platforms
	;	APM driver.
	;
	;  The constants are listed below, followed by the actual
	;	values of the constants for each hardware type
	;
	;  HAS_SERIAL_PORTS - [TRUE/FALSE]
	;	If there can be no serial ports on the device, this
	;	may be set FALSE.
	;  NUM_SERIAL_PORTS - [0-255]
	;	This constant should be the number of serial devices
	;	that _can_ be in the system.  Usually 0, 1 or 2.
	;  HAS_PARALLEL_PORTS - [TRUE/FALSE]
	;	If there can be no parallel ports on the device, this
	;	may be set FALSE.
	;  NUM_PARALLEL_PORTS - [0-255]
	;	This constant should be the number of serial devices
	;	that _can_ be in the system.  Usually 0, 1 or 2.
	;  HAS_PCMCIA_PORTS - [TRUE/FALSE]
	;	If there can be no pcmcia slots on the device, this
	;	may be set FALSE.
	;  NUM_PCMCIA_PORTS - [0-255]
	;	This constant should be the number of pcmcia slots
	;	that _can_ be in the system.  Usually 0, 1 or 2.
	;  HAS_DISPLAY_CONTROLS - [TRUE/FALSE]
	;	If no display connected to this device can be can be
	;	controlled by APM this may be set FALSE.
	;  NUM_DISPLAY_CONTROLS - [0-255]
	;	This constant should be the number of displays
	;	that _can_ be in the system.  Usually 0 or 1
	;  HAS_SPEAKER_CONTROLS - [TRUE/FALSE]
	;	If no speaker connected to this device can be
	;	controlled by APM this may be set FALSE.
	;  NUM_SPEAKER_CONTROLS - [0-255]
	;	This constant should be the number of speakers
	;	that _can_ be in the system.  Usually 0 or 1.

	;
	;  HAS_BIOS_LEVEL_PASSWORD - [TRUE/FALSE]
	;	This constant should be declared TRUE if there is
	;	BIOS support for Password verification.
	;  HAS_DOS_LEVEL_APM - [TRUE/FALSE]
	;	This constant determines whether the driver will
	;	ensure the DOS APM level is aware of what occurs.
	;  HAS_AC_ADAPTER - [TRUE/FALSE]
	;	When declared TRUE, this constant will prevent a
	;	device from shutting down when an AC adapter is
	;	present.
	;  PEN_AWARE_DRIVER - [TRUE/FALSE]
	;
	;  HAS_COMPLEX_ON_OFF_BUTTON - [TRUE/FALSE]
	;	When declared TRUE, the APM driver will look for
	;       on/off presses outside the BIOS.
	;
	;  USE_IM_FOR_INITIAL_POLLING - [TRUE/FALSE]
	;	When declared TRUE, the APM driver uses the IM thread instead
	;	of the UI thread to poll during the time the system is
	;	booting.  This is usually unnecessary.  It is used only on
	;	systems where certain polling must be performed before the UI
	;	lib is loaded, or during the time the UI thread is spending
	;	several lengthy seconds in its MSG_META_ATTACH handler and
	;	cannot process our MSG_PROCESS_CALL_ROUTINE.
	;
	;  REBOOTS_ON_CRITICAL - [TRUE/FALSE]
	;	Determines if the device will automatically reboot
	;	when it receives a critical suspend, or if it will
	;	just display a warning dialog.
	;
	;  RESUSPEND_IF_REBOOTED_WHILE_IN_SUSPEND_MODE - [TRUE/FALSE]
	;	Determines if the device will automatically re-suspend
	;	if the device went into suspend mode and then rebooted.
	;	This is usually caused by the power being disrupted and then
	;	restored.  In the absence of the user when the power is
	;	restored, it's nice to automatically re-suspend the device.




ifidn	HARDWARE_TYPE, <PC>
	HAS_SERIAL_PORTS		equ	TRUE
	NUM_SERIAL_PORTS		equ	4
	HAS_PARALLEL_PORTS		equ	TRUE
	NUM_PARALLEL_PORTS		equ	4
	HAS_PCMCIA_PORTS		equ	FALSE
	NUM_PCMCIA_PORTS		equ	0
	HAS_DISPLAY_CONTROLS		equ	TRUE
	NUM_DISPLAY_CONTROLS		equ	1
	HAS_SPEAKER_CONTROLS		equ	FALSE
	NUM_SPEAKER_CONTROLS		equ	0

	HAS_BIOS_LEVEL_PASSWORD		equ	FALSE
	HAS_DOS_LEVEL_APM		equ	FALSE
	HAS_AC_ADAPTER			equ	TRUE
	HAS_DIGITIZER_TABLET		equ	FALSE
	HAS_DETACHABLE_KEYBOARD		equ	FALSE
	HAS_RTC_INTERRUPT		equ	FALSE
	HAS_KNOWN_MAIN_BATTERY_LIFE	equ	TRUE
	HAS_KNOWN_BACKUP_BATTERY_LIFE	equ	FALSE

	MAX_SUSPEND_REQUEST_LIMIT	equ	20
	MAX_POWER_CALL_BACKS		equ	10

	DEFAULT_ACTION_ON_IDLE		equ	mask AOIS_STAND_BY
	DEFAULT_APO_TIMEOUT		equ	3
	MAX_APO_TIMEOUT			equ	20
	INITIAL_APO_TIMEOUT		equ	3

	DEFAULT_GPM_TIMEOUT		equ	1

	;
	;  Use what standard code?	
	USE_DEFAULT_PASSWORD_CODE	equ	TRUE
	USE_DEFAULT_AC_ADAPTER_CODE	equ	FALSE
	USE_DEFAULT_BATTERY_LEVEL_CODE	equ	FALSE


	;
	;  Provide any custom code?
	DEVICE_SPECIFIC_PRE_SUSPEND_CODE	equ	FALSE
	DEVICE_SPECIFIC_POST_SUSPEND_CODE	equ	FALSE
	DEVICE_SPECIFIC_RESUME_REQUIREMENTS	equ	FALSE
	DEVICE_SPECIFIC_DEVICE_ON_OFF_CODE	equ	FALSE

	;
	;  Misc
	HAS_COMPLEX_ON_OFF_BUTTON		equ	FALSE
	HAS_NON_STANDARD_WARNINGS		equ	FALSE
	HAS_ADDITIONAL_POLLING_TO_DO		equ	FALSE
	HAS_ADDITIONAL_ON_OFF_BUTTON_CONFIRM	equ	FALSE
	USE_IM_FOR_INITIAL_POLLING		equ	FALSE
	REBOOTS_ON_CRITICAL			equ	TRUE
	RESUSPEND_IF_REBOOTED_WHILE_IN_SUSPEND_MODE	equ	FALSE
endif



ife HAS_KNOWN_BACKUP_BATTERY_LIFE
 	APMGetStatusBatteryLifeBackup 	equ     <0>
	APMGetStatusBatteryBackup     	equ     <0>
endif
 
ife HAS_KNOWN_MAIN_BATTERY_LIFE
 	APMGetStatusBatteryLifeMain   	equ     <0>
	APMGetStatusBatteryMain         equ     <0>
endif
 



if	HAS_PCMCIA_PORTS
	HAS_PCMCIA_PORTS_GP	equ	TRUE
endif

	;
	;  This list should grow when more things are placed
	;  in the MiscState record

if	HAS_COMPLEX_ON_OFF_BUTTON
	REQUIRES_MISC_STATE	equ	TRUE

else

	REQUIRES_MISC_STATE	equ	FALSE

endif


;-----------------------------------------------------------------------------
;
;		Compilation Macros
;
;-----------------------------------------------------------------------------


JEDI		macro	line
		endm

NOJEDI		macro	line
	line
		endm

