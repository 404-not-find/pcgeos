COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	PC/GEOS	
MODULE:		Power Drivers
FILE:		apmVariables.def

AUTHOR:		Todd Stumpf, Jul 28, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	7/28/94   	Initial revision


DESCRIPTION:
	This file contains the variable declarations used by the
	common APM code.

	$Id: apmVariables.def,v 1.1 97/04/18 11:48:27 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;------------------------------------------------------------------------------
;		Variables
;------------------------------------------------------------------------------

idata		segment

	;
	;  Which devices are used and which have been marked as
	;  "don't shutdown while in use"
if	HAS_SERIAL_PORTS
	serialPowerStatus	SuspendRestriction \
				     NUM_SERIAL_PORTS dup ( mask SR_RESTRICTED)
endif
if	HAS_PARALLEL_PORTS
	parallelPowerStatus	SuspendRestriction \
				     NUM_PARALLEL_PORTS dup (mask SR_RESTRICTED)
endif
if	HAS_PCMCIA_PORTS
	pcmciaPowerStatus	SuspendRestriction \
				     NUM_PCMCIA_PORTS dup (mask SR_RESTRICTED)
endif
if	HAS_DISPLAY_CONTROLS
	displayPowerStatus	SuspendRestriction \
				   NUM_DISPLAY_CONTROLS dup (mask SR_DEVICE_ON)
endif
if	HAS_SPEAKER_CONTROLS
	speakerPowerStatus	SuspendRestriction \
				NUM_SPEAKER_CONTROLS dup (mask SR_RESTRICTED)
endif
	;
	;  Count-down to forced suspend.  After MAX_SUSPEND_REQUEST_LIMIT
	;  requests, we force the system into a shutdown state.
	suspendRequestCountdown		word	MAX_SUSPEND_REQUEST_LIMIT


	;
	;  When we want to suspend, we want to do so when all the threads
	;  are inactive.  Thus, when we enter the Idle loop, we need to know
	;  if we should enter an extended suspend state (because someone
	;  pressed the on-off button) or if we should just power-down the
	;  CPU.
	powerDownOnIdle			ActionOnIdleState \
						DEFAULT_ACTION_ON_IDLE


	;
	;  Because we can't do any ResourceCallInts while we are
	;  shutting down, we need to store the APO (and possibly
	;  GPM) values in dgroup, because we biff them on startup,
	;  and want them to reflect recent changes in the pref
	;  modules the next time we go out to DOS
if	HAS_DOS_LEVEL_APM
;	apoTimeout			byte	DEFAULT_APO_TIMEOUT
;	gpmTimeout			byte	DEFAULT_GPM_TIMEOUT
endif

idata		ends

udata	segment

	;
	;  We don't want to report that the battery is low twice
	;	a second.  We keep track of which notifications
	;	we have sent here, so that we only do it periodically.
	currentWarnings		PowerWarnings
	reportedWarnings	PowerWarnings

	;
	;  We need to know what kind of support the BIOS provides
	;	so we know how to do things to its satisfaction.
	supportFlags		APMSupportFlag

	;
	;  # of call back routines registered with us
	numCallbackRoutines		byte

	;
	;  fptr's to call back routines
	callbackTable			fptr	MAX_POWER_CALL_BACKS	dup(0)

if	HAS_PCMCIA_PORTS
	;
	; Count of references to each pcmcia socket. since a socket could
	; potentially have more than one "device" in it, each of which might
	; might want to be turned on, we don't want to turn off the thing
	; until everyone agrees it should be turned off.
	socketOnCount			byte	NUM_PCMCIA_PORTS	dup(0)
endif

	;
	;  When we are requested to shut-down by an ON-OFF button press,
	;  we may want to display a dialog box that has a "Yes/No"
	;  trigger, and get the response.  However, since we don't
	;  have a thread, that is difficult to do.  So, what we
	;  do do is set up a queue and throw up a standard dialog
	;  and poll for the result
	responseQueue			hptr
	waitingForResponse		byte
	verifyDialog			byte

	suspendRecover			byte

	;
	;  Address to BIOS Thread Lock so we can do our SysLockBIOSNB
	biosLockAddress			fptr.ThreadLock

	;
	;  When a SysNotify box goes up, we don't want to flood
	;  the UI with battery-polling requests, so we use this
	;  flag to identify when we're waiting for a response, and
	;  when we're ready to send another.
	uiBusyElsewhere			word

	;
	;  We do our own polling (rather than marking ourselves
	;  as a polling driver), so we can be a little smarter about
	;  our warning messages
	pollingTimerHandle		hptr
	pollingTimerID			word

if	REQUIRES_MISC_STATE
	;
	;  A spare byte to store things of interest that don't
	;  seem to fall within the realm of any other byte
	miscState			MiscState
endif

	;
	; protocol
	;
	protoMajorMinor			word

if	RESUSPEND_IF_REBOOTED_WHILE_IN_SUSPEND_MODE
	resuspendChecked		BooleanByte	BB_FALSE
endif	; RESUSPEND_IF_REBOOTED_WHILE_IN_SUSPEND_MODE

udata		ends
