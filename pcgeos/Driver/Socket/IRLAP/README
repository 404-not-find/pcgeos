
Random notes about implementation( sorted by importance ):


Ns and Nr
=========

	These are numbers ranging from 0 to 7, that indicate the sequence of
incoming and outgoing packets.  They are stored in IrlapStation structure in
a way that facilitates implementation.  Here is the relationship between these
numbers and IrlapWindowArray(= storage for unacked packets):
						      < range >
	Vs : stored in bits 1-3 of IS_vs	0000 0000 - 0000 1110
	Vr : stored in bits 5-7 of IS_vr	0000 0000 - 1110 0000

	IrlapWindowArray : size 8 array of IrlapWindow's
	IrlapWindow: stores various information about each window. Size = 16
	So, valid offset range for IrlapWindowArray is : 0000 0000 - 0111 0000b

	When we need to access Window[Vs]:
		clr	bh
		mov	bl, IS_vs     ; bl = Vs * 00000010b
		shl3	bl	      ; bl = Vs * 00010000b(= size IrlapWindow)
		mov	ds:[IS_store][bx].{various fields}, ??

	When we need to access Window[Vr]
		clr	bh
		mov	bl, IS_vr     ; bl = Vr * 00100000b
		shr	bl, 1	      ; bl = Vr * 00010000b
		mov	ds:[IS_store][bx].{various fields}. ??

	When incrementing Vs:
		(bl = IS_vs)
		add	bl, IrlapVsIncrement (= 00000010b )
		and	bl, mask IICF_Vs     (= 00001110b )

	When incrementing Window index
		(bx = window index)
		add	bx, IrlapWindowIndexInc   (= 00010000b )
		and	bx, IrlapWindowIndexRange (= 01110000b )

Fragmentation of packets
========================

	Data packets that are larger than the max packet size negotiated in
connection procedure may be fragmented and sent out as separate I frames.
Notice that this only happens for SocketLib clients.  If the driver is in
native client mode, it will not fragment the packet but will return
IE_FRAME_TOO_LARGE error to the service user.

	[IMPORTANT]
	In case of Socket Lib client, fragmentation information(one word) will
be inserted between Irlap header and data in I frames.  This makes it
impossible for socket lib clients talk directly to non-Geos devices unless
the remote side understands fragmentation information in I frames.

Allocation of data buffers
==========================

	All data buffers allocated for packets in this driver should(must) be
allocated as HugeLMem buffers.

	1. Outgoing data buffers
		Application allocates buffer and send it using data request
	   routines.  They are always freed in UpdateNrReceived or in
	   ReleaseBufferedData in irlapAction.asm.

	2. Incoming data packets
		Allocated by HandleDataPacket.  Passed around in dxbp most of
	   time.  Deallocation of these packets are done in multiple places:

	   U frame buffers:  Most of them are frees in
			     IrlapMessageProcessCallback, after being used in
			     various event handling routines.

	   UI frame buffers: Unnumbered Information packets are passed to the
			     client.  They are freed by the user, using
			     HugeLMemFree.

	   S frame buffers:  All of them are freed in
			     IrlapMessageProcessCallBack

	   I frame buffers:  All valid I frame buffers are passed to the
			     client and freed by the client.

	   [IMPORTANT] ------------------------------------------------------
		All event handling routines should not trash dxbp on exiting.
	   The event routines that passed the buffer off to the user must clear
	   dx to prevent IrlapMessageProcessCallback from freeing the buffer.
	   The event routines that freed the buffer should also clear dx to
	   signal IrlapProcessProcessCallbask not to free the packet.  ( so,
	   dx=0 means deallocation of packet has been taken care of on event
	   handler exit.  THIS rule is very IMPORTANT! )

	3. Non-data packets ( S frames, U frames )
		They are temporarily allocated on stack in most cases.
	   	ex) snrm frame


Layering Socket Interface on Top of Native Irlap
================================================

	The following picture summarizes this layering:

		Socket Library
	------------------------------------	   other native client
	|   +   IrlapSocket Interface  	   |
        ----+------------------------------------------------------------
	|   |   		IrlapNative Interface  	       	       	|
 	----+------------------------------------------------------------
	    | read
	    v		         IRLAP station
	 Internal
         data
	 structures

	Being within the same driver, IrlapSocket interface can read any
	internal data in native IRLAP.  However, any valid IRLAP service
	request should go through IrlapNative interface.

$Id: README,v 1.1.14.1 97/03/29 08:05:22 canavese Exp $

