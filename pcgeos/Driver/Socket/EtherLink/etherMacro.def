COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Tedious Endeavors 1998 -- All Rights Reserved

PROJECT:	Native ethernet support
MODULE:		constant definitions
FILE:		LoopbackConstant.def

AUTHOR:		Todd Stumpf, July 8th, 1998

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TDS	7/8/98   	Initial revision

DESCRIPTION:
	Variable declarations for native ethernet driver
		
	$Id:$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
; MACRO
;-----------------------------------------------------------------------------


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SCOIndication
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calls client strategy routine
PASS:		all registers
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	9/ 7/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SCOIndication	macro
		mov	ss:[TPD_dataAX], ax
		mov	ss:[TPD_dataBX], bx
		push	ds
		mov	bx, handle dgroup
		call	MemDerefDS
		movdw	bxax, ds:clientStrategy
		pop	ds
		call	ProcCallFixedOrMovable
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SCOIndication_newThread
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calls client strategy routine with new thread

PASS:		all registers

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	2/23/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SCOIndicationNew	macro
	;
	; Create a buffer to store all the registers
	;
		push	ds
		push	ax, bx, cx
		mov	ax, size RegisterSetStruct
		mov	cx, (mask HAF_LOCK) shl 8 or mask HF_SHARABLE or mask HF_SWAPABLE
		call	MemAlloc	; bx = block handle ; ax = segment
		mov	ds, ax
		pop	ds:RSS_ax, ds:RSS_bx, ds:RSS_cx
		mov	ds:RSS_dx, dx
		mov	ds:RSS_bp, bp
		mov	ds:RSS_di, di
		mov	ds:RSS_si, si
		mov	ds:RSS_es, es
		pop	ds:RSS_ds
		call	MemUnlock
	;
	; create a thread and pass in the buffer handle
	;
		mov	al, PRIORITY_STANDARD
		mov	cx, segment LoopbackNewThread
		mov	dx, offset LoopbackNewThread
		mov	di, LOOPBACK_THREAD_STACK_SIZE
		mov	bp, handle 0
		call	ThreadCreate
		endm

GetDgroupES	macro
		push	bx
		mov	bx, handle dgroup
		call	MemDerefES
		pop	bx
		endm