
COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Berkeley Softworks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		PostScript (Bitmap) printer driver
FILE:		psbProlog.asm

AUTHOR:		Jim DeFrisco

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	6/91		Initial revision


DESCRIPTION:
	This file contains the prolog that defines the PostScript procedures
	used by the library.
		

	$Id: psbProlog.asm,v 1.1 97/04/18 11:52:03 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	OK, so what is a prolog ?

	In the words of Adobe:

		A page description can be organized as a prolog and a script,
		as discussed in section 2.4.2 "Program Structure."  The 
		prolog contains application-dependent definitions.  The script
		describes the particular desired results in terms of those
		definitions.  The prolog is written by a programmer, stored
		in a place accessible to an application program, and 
		incorporated as a standard preface to each page description 
		created by the application.  The script is usually generated 
		automatically by an application program.
				Adobe PostScript Language Reference Manual
				Second Edition

	For our purposes, this prolog will contain procedure definitions and
	variables that will be used by the code that generates the script.
	The script itself is what describes the page, and is generated by 
	the translation library.    This prolog will be part of any PostScript
	that is generated by the library.
				
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------
;	An abbreviated function header has been adopted for use here.
;	There are three parts to the header:  
;		SYNOPSIS: 	As before, this contains a brief description 
;			  	of the function
;		STACK USAGE:	As PostScript is a stack-based language,
;				this field effectively describes what is 
;				passed and what is returned.  The form of
;				this line is
;					<arg> <arg> ..  FUNCTION  <retvalue>..
;				So, the items to the left of the FUNCTION
;				name are items passed on the stack, the 
;				rightmost item in the list is the item on
;				the top of the stack.  The FUNCTION is the
;				actual function name, and the items to the
;				right are the items left on the stack when
;				the operation is completed.  Again, the right-
;				most item is the topmost item on the stack.
;				If there are no arguments or return values,
;				a dash is used instead.  As an example, the
;				PostScript operator "moveto", which consumes
;				two integers on the stack would be represented
;				as
;					<x> <y> moveto -
;
;		SIDE EFFECTS:	This section describes any other effects the
;				procedure might have, such as altering other
;				variables defined in this prolog.
;
;
;	A few coding conventions:
;		Procedure Names	- all uppercase, no more than 3 characters
;		Variable Names	- all lowercase, no more than 3 characters
;
;		The reason that the names are so short is to decrease the
;		amount of data sent to the printer.
;-----------------------------------------------------------------------


PSProlog	segment	resource



;-----------------------------------------------------------------------
;	Procedure Definitions
;-----------------------------------------------------------------------

beginPSProlog	label	byte

	char	"%%BeginProlog", NL
	char	"%%BeginResource: procset GeoWorks_PCGEOS_min 0 0", NL
	char	"% Copyright (c) 1991 GeoWorks Incorporated.", NL
	char	"% All Rights Reserved", NL

	; allocate space for 25 items in our dictionary
	char	"/GWDict dup 25 dict def load begin", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Variable Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	These are a few variables used by other procedures

STACK USAGE:	none

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/cpt matrix def", NL		; current page transform
	char	"/ot matrix def", NL		; current object transform

	char	"/ph 792 def /pw 612 def", NL	; page height, width


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		bdef	(BindDef)
		ldef	(LoadDef)
		xdef	(eXchDef)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	A few shortcuts for procedure/variable definition
		And a few utility routines

STACK USAGE:	<key> <procedure> bdef -
		<key> <procedure> ldef -
		<value> <key>     xdef -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/bdef {bind def} bind def", NL
	char	"/xdef {exch def} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SO	(StartObject)
		EO	(EndObject)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	These are the start/end object brackets.  The should be 
		used around each drawn object that is emitted.

STACK USAGE:	- SO -
		- EO -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/SO {gsave} bdef", NL
	char	"/EO {grestore} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		BP	(BeginPage)
		EP	(EndPage)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	These are the start/end page brackets.  The should be 
		used around each page that is emitted.  

STACK USAGE:	- BP -
		- EP -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/BP {} def", NL  

	char	"/EP {} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SPT	(SetPageTransform)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the "cpt" variable

STACK USAGE:	<matrix> SPT -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/SPT {/cpt xdef} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SDT	(SetDefaultTranform)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set a new default (window) transformation for the page

STACK USAGE:	- SDT -

SIDE EFFECTS:	this takes whatever is defined by the "cpt" variable and
		concats it to the matrix required to invert the coordinate
		system.  This is called right before any objects are drawn,
		and defines the default (equivalent to PC/GEOS window-)
		transform.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/SDT {0 ph translate 1 -1 scale cpt concat} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SPS	(SetPageSize)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set a new page height

STACK USAGE:	<width> <height> SPS -

SIDE EFFECTS:	set the "ph" and "pw" variables

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/SPS {/ph xdef /pw xdef} bdef", NL


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SOT	(SetObjectTransform)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the transformation for an individual object

STACK USAGE:	<matrix> SOT -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	char	"/SOT {dup /ot xdef concat} bdef", NL

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DMB	(DrawMonoBitmap)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Draw a monochrome or color image (bitmap)

STACK USAGE:	<width> <height> <linesize> <xscale> <yscale> \
				<xpos> <ypos> DMB data -
		<width> <height> <linesize> <xscale> <yscale> \
				<xpos> <ypos> DCB data -

SIDE EFFECTS:	none

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

	; DrawMonoBitmap
	; This draws a plain vanilla monochrome bitmap
	char	"/DMB {translate scale /bms exch string def", NL
	char	"true [ 3 index  0 0 5 index  0 0]", NL
	char	"{currentfile bms readhexstring pop} bind imagemask} bdef", NL

;	this marks the end of the GWDict dictionary
;
	char	"end", NL
	char	"%%EndResource", NL
endPSProlog	label	byte



PSProlog	ends
