COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994.  All rights reserved.
	GEOWORKS CONFIDENTIAL

PROJECT:	
MODULE:		
FILE:		group3AddrBook.def

AUTHOR:		Andy Chiu, Jan 26, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	1/26/94   	Initial revision


DESCRIPTION:
	Contains structure and class definitions for code dealing
	with the address book.
		
	$Id: group3AddrBook.def,v 1.1 97/04/18 11:52:55 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
; Constants that are used for the fonts that display the address book
;
ADDRESS_ITEM_FONT	equ	FID_BISON
ADDRESS_ITEM_FONT_SIZE	equ	10

;
; Constants used to display the address book entry 
;

ADDRESS_TOTAL_SIZE	equ	100		; How long an address
						; entry can be

ADDRESS_NAME_SEPARATOR		equ	(C_SPACE shl 8) or C_COMMA
						; This separates the first
						; name with the second name

ADDRESS_MAX_NAME_FIELD_LENGTH	equ	39
						; Max length of the last name

ADDRESS_FAX_PHONE_LOCATION	equ	40	; Where the phone number
						; starts on the line.

ADDRESS_MAX_FAX_PHONE_FIELD_LENGTH	equ	FAXFILE_PHONE_NUMBER_BUFFER_SIZE
;
; This structure is used to hold the location of the address book thats
; being used
;

AddressBookFileInfo	struc

; Name of the address book file.
ABFI_name	char	FILE_LONGNAME_BUFFER_SIZE	dup (?)
; Path of the address book file
ABFI_path	char	PATH_BUFFER_SIZE		dup (?)
; disk handle of the address book file.
ABFI_diskHandle	StandardPath

AddressBookFileInfo	ends

AddressBookFileInfoType	type	AddressBookFileInfo


;*************************************************************************
;			Class Definition				 *
;   For a list used in the addressbook interface			 *
;*************************************************************************

AddressBookListClass	class	GenDynamicListClass

;-----------------------------------------------------------------------------
;       MESSAGES                
;-----------------------------------------------------------------------------

MSG_ADDRESS_BOOK_LIST_SET_CURRENT_SELECTION	message
;
;	This is the apply message from the GenDynamicList.  It sets a
;	dgroup variable to be the selection of the list.
;
;	PASS:		cx = current selection, GIGS_NONE if no selection
;	RETURN:		nothing
;	DESTROYED:	nothing
;

MSG_ADDRESS_BOOK_LIST_REQUEST_ITEM_MONIKER	message
;
;	This is the querry message from the GenDynamicList.  It makes the
;	moniker for the quick numbers list.
;
;	PASS:		^lcx:dx = the dynamic list
;			bp	= the position of the item requested
;	RETURN:		nothing
;	DESTROYED:	nothing
;

MSG_ADDRESS_BOOK_LIST_MAKE_ENTRY_LIST		message
;
;	This message is used to initialize the list.  This should make
;	a list off all the entries that is available for the user
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	ax, cx, dx, bp
;

MSG_ADDRESS_BOOK_LIST_CLOSE_BOOK		message
;
;	This message closes the address book file.  
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	ax, cx, dx, bp
;

MSG_ADDRESS_BOOK_LIST_SET_ADDRESS_USED		message
;
;	This is used to set a variable that will later tell the application
; 	that an address book field is being used.  We can not use a dgroup
;	entry because the variable would be shared amoung different instances
;	of the driver. Putting it here seems logical, at least now.
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	nothing
;

MSG_ADDRESS_BOOK_LIST_SET_ADDRESS_NOT_USED		message
;
;	This makes the address book think that no items were selected.
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	nothing
;

MSG_ADDRESS_BOOK_LIST_IS_ADDRESS_BOOK_USED		message
;
;	Return a response to see if the address book was used.
;
;	PASS:		nothing
;	RETURN:		carry set if used
;			carry unset if not used
;	DESTROYED:	nothing
;

MSG_ADDRESS_BOOK_LIST_OPEN_ADDRESS_BOOK			message
;
;	Opens an address book and saves the handle to the address
;	book.
;
;	PASS:		nothing
;	RETURN:		carry set if unable to open an address book.
;	DESTORYED:	nothing

ABLI_addrBookHandle		hptr		; handle to address book.
ABLI_entryTableHandle		hptr		; handle to a chunk array
ABLI_entryTableChunk		hptr		; that tells all our valid
						; page numbers.
ABLI_addrBookUsed		byte		; 0 if not used, non zero if used

AddressBookListClass	endc


;*************************************************************************
;			Class Definition				 *
; For the trigger that starts up the address book			 *
;*************************************************************************

AddrBookTriggerClass		class		GenTriggerClass

AddrBookTriggerClass		endc

;*************************************************************************
;			Class Definition				 *
; This subclass is used to change the default font used in drawing the	 *
; GenDynamicList.							 *
;*************************************************************************
AddressBookListItemClass	class	GenItemClass

AddressBookListItemClass	endc

;*************************************************************************
;			Class Definition				 *
; This class is used so the file selector can send messages to itself    *
;*************************************************************************
AddressBookFileSelectorClass	class	GenFileSelectorClass

MSG_ADDRESS_BOOK_FILE_SELECTOR_GET_FILE		message
;
; Called by the file selector when a file is chosen.
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	ax, cx, dx, bp
;

MSG_ADDRESS_BOOK_FILE_SELECTOR_OPEN_PRESSED	message
;
; This is the message sent when the user presses open on the dialog.
;
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYED:	ax, cx, dx, bp
;

AddressBookFileSelectorClass	endc











