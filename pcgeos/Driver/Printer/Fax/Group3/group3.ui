/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994.  All rights reserved.
 *	GEOWORKS CONFIDENTIAL
 *
 * PROJECT:	  Pasta
 * MODULE:	  Group3 Printer Driver
 * FILE:	  group3.ui
 *
 * AUTHOR:  	  Jacob Gabrielson, Mar 16, 1993
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jag	3/16/93   	Initial version
 *	AC	9/28/93		Changed for group3
 *
 * DESCRIPTION:
 *
 * 	$Id: group3.ui,v 1.1 97/04/18 11:52:56 newdeal Exp $
 *
 ***********************************************************************/


#define _NIKE 0
#define _NIKE_EUROPE 0
#define _USE_SUBJECT 0
#define _PEN_BASED -1
#define _FLOPPY_BASED_FAX 0


#define _USE_PALM_ADDR_BOOK -1


#include	"generic.uih"

#if _PEN_BASED
#include	"ink.uih"
#endif

#include	"group3.uih"


start	Group3UI;

#if _PEN_BASED
#include "Art/clear.ui"
#include "Art/back.ui"
#include "Art/mkrPencil.ui"
#include "Art/mkrEraser.ui"
#endif


/**********************************************************************/
/*	Shoved inside the Print Spooler UI			      */
/**********************************************************************/
FaxDialogBox = FaxInfo { 
	moniker =	"Fax Settings";
	children =	AddressGrp,
			Group3CoverPageDialog,
			DialAssistDialog
#if _USE_PALM_ADDR_BOOK
			,AddrBookDialog
#endif
			;

	genStates =	default -usable;
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_HELP_FILE {
			char	"pfax", 0
		},
	}
}


/**********************************************************************/
/*		Fields that tell the destination		      */
/**********************************************************************/
AddressGrp = GenInteraction {
	children = 	Group3SendInformationInteraction,
			Group3PrintOptionsInteraction;
	hints = {	
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
	}
}

/* This interaction is just here to help place the quick key numbers */
/* right on top of the Number text 				     */
Group3SendInformationInteraction = GenInteraction {
	children = Group3ToolsInteraction,
		   Group3NumberTextInteraction;
	type = organizational;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

Group3ToolsInteraction = GenInteraction {
#if _USE_PALM_ADDR_BOOK
	children = Group3ABookTrigger,
		   Group3QuickNumbersList;
#endif
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DIVIDE_WIDTH_EQUALLY,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
		}
}

Group3QuickNumbersList = QuickNumbersList {
	
	moniker = "Last Numbers";
	selection = GIGS_NONE;
	numSelections = 0;
	numItems = 0;

	applyMsg = MSG_QUICK_NUMBERS_LIST_SET_CURRENT_SELECTION;
	queryMsg = MSG_QUICK_NUMBERS_LIST_REQUEST_ITEM_MONIKER;
	destination = Group3QuickNumbersList;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		}
}

/*************************************************************************/
/* Trigger for the the place to write the phone number of the remote     */
/* fax machine								 */
/*************************************************************************/

Group3NumberTextInteraction = GenInteraction {
	moniker = "Fax #:";

#if _PEN_BASED
	children = Group3NumberETrigger,
		   Group3NumberText,
		   Group3NumberBSTrigger;
#else
	children = Group3NumberText;
#endif
	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
#if	_NIKE_EUROPE
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#else
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#endif
		}
}

#if _PEN_BASED
Group3NumberETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, Group3NumberText;
}
#endif

Group3NumberText = GenText {
	genStates = default +enabled;
/*	destination = Group3QuickNumbersList; */
	textDisplayAttributes	= default +singleLineText;
	maxLength = "FAXFILE_PHONE_NUMBER_BUFFER_SIZE - 1";
/*	applyMsg = MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED; */
	hints = {
#if _NIKE_EUROPE
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
#endif
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		ATTR_GEN_TEXT_CUSTOM_FILTER {
			word	offset	Group3NumberTextFilter
		},
		HINT_DEFAULT_FOCUS,
	}
}

#if _PEN_BASED
Group3NumberBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, Group3NumberText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

chunk Group3NumberTextFilter =  data {
	VisTextCustomFilterData	<0, 31 >	/* null - US is gone	*/
						/* space is included	*/
	VisTextCustomFilterData <33, 39 >	/* ! - ' is gone	*/
						/* () is included	*/
	VisTextCustomFilterData	<42, 43>	/* * - + is gone	*/
						/* , - - is included	*/
	VisTextCustomFilterData	<46, 47 >	/* . - / is gone	*/
						/* 0 - 9 is include	*/
	VisTextCustomFilterData	<58, 255 >	/* all rest is gone	*/
}

/*************************************************************************/
/* Trigger for the the place to write the the receivers name of the      */
/* fax. 								 */
/*************************************************************************/

Group3NameTextInteraction = GenInteraction {
#if _USE_SUBJECT
	moniker = "To:        ";
#else
	moniker = "To:";
#endif
#if _PEN_BASED
	children = Group3NameETrigger,
		   Group3NameText,
		   Group3NameBSTrigger;
#else
	children = Group3NameText;
#endif

	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

#if _PEN_BASED
Group3NameETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, Group3NameText;
}
#endif

Group3NameText = GenText {
	maxLength = "FAXFILE_NAME_BUFFER_SIZE - 1";
	genStates = default +enabled;
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	}
}

#if _PEN_BASED
Group3NameBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, Group3NameText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

#if _USE_SUBJECT

Group3SubjectTextInteraction = GenInteraction {
	moniker = "Subject:";
	children = CoverPageSubjectText;
	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

CoverPageSubjectText = GenText {
	text	= " ";
	maxLength = "FAXFILE_NAME_BUFFER_SIZE - 1";
	genStates = default +enabled;
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	}
}

#endif /* if _USE_SUBJECT */

/*************************************************************************/
/* These denote whether certain attributes to the sending of the fax	 */
/*************************************************************************/


Group3PrintOptionsInteraction = GenInteraction {
	children = Group3CoverPageTrigger,
		   Group3DialAssistTrigger
		   ;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DIVIDE_WIDTH_EQUALLY
		}
}

/*
Group3CoverPageInteraction = GenInteraction {
	children = Group3CoverPageTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		}
}
*/
/*
Group3CoverPageItemGroup = GenItemGroup {
	children = Group3CoverPageItem;
	behaviorType = nonExclusive;
	destination = Group3CoverPageTrigger;
}

Group3CoverPageItem = GenItem {
	moniker = "Cover Page";
	identifier = PO_COVER_PAGE;
}
*/
Group3CoverPageTrigger = Group3OptionsTrigger {
/*	moniker = "Options"; */
	moniker = "Cover Page";
	action	= MSG_GEN_INTERACTION_INITIATE,  Group3CoverPageDialog;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER,
		}
}

/*
Group3DialAssistInteraction = GenInteraction {
	children = Group3DialAssistTrigger;
	
	hints = {	
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_CENTER_CHILDREN_VERTICALLY,
		}
}
*/

/*
Group3DialAssistItemGroup = GenItemGroup {
	children = Group3DialAssistItem;
	behaviorType = nonExclusive;
}
	
Group3DialAssistItem = GenItem {
	moniker = "Use Dialing Assistance";
	identifier = PO_AUTO_DIAL;
}
*/

Group3DialAssistTrigger = GenTrigger {
/*	moniker = "Options"; */
	moniker = "Dialing Assistance";
	action	= MSG_GEN_INTERACTION_INITIATE,  DialAssistDialog;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER
		}
}

Group3TransmitImmediateItemGroup = GenItemGroup {
	children = Group3TransmitImmediateItem;
	behaviorType = nonExclusive;
}

Group3TransmitImmediateItem = GenItem {
	moniker = "Transmit Immediately";
	identifier = PO_TRANS_IMMEDIATE;
}

/*
Group3PrintOptionsTriggers = GenInteraction {
	children = Group3CoverPageTrigger,
		   Group3AutoDialingTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		}	
}
*/

#if _USE_PALM_ADDR_BOOK

Group3ABookTrigger = GenTrigger {
	moniker = "Address Book";
	action = MSG_GEN_INTERACTION_INITIATE, AddrBookDialog;
	genStates = default +enabled;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW,
	}
}

#endif

/**********************************************************************/
/*			Cover Page Dialog			      */
/* To allay any confusion, words like "From", and "To" will be used   */
/* for actual Objects while words like "Sender", and "Receiver" will  */
/* will be used for class definitions.				      */
/**********************************************************************/

Group3CoverPageDialog = GenInteraction {
	moniker = "Cover Page";
	children = CoverPageUseCoverPageInteraction,
		   Group3NameTextInteraction,
#if _USE_SUBJECT
		   Group3SubjectTextInteraction,
#endif
		   CoverPageFromInteraction,
/*		   CPCommentsInkControl, */
 		   CoverPageCommentsInteraction,
		   CoverPageFromInformationDialog,
		   CoverPageOKB;

/*		   CoverPageCloseB; */

	visibility = dialog;
	type = properties;
	attributes = notUserInitiatable, modal;

	hints = {
		HINT_INTERACTION_FAST_RESPONSE_PROPERTIES,
		HINT_IF_SYSTEM_ATTRS {
			SystemAttrs mask SA_HORIZONTALLY_TINY
		},
			HINT_SIZE_WINDOW_AS_RATIO_OF_FIELD {
				SpecWinSizePair	< mask SWSS_RATIO or PCT_100, \
						  mask SWSS_RATIO or PCT_100 >
			},
		HINT_ELSE,
			HINT_SIZE_WINDOW_AS_RATIO_OF_FIELD {
				SpecWinSizePair	< mask SWSS_RATIO or PCT_75, \
						  mask SWSS_RATIO or PCT_85 >
			},
		HINT_ENDIF,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_DISMISS_WHEN_DISABLED,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbCoverPage",0
		}
	}
}

/*
CoverPageCloseTrigger = GenTrigger {
	moniker = "VMO_CANCEL", "Cancel";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

*/
CoverPageOKB = GenTrigger {
/*	action	= MSG_FAX_INFO_USE_COVER_PAGE, FaxDialogBox; */
	genAttributes = default +signalInteractionComplete;
	hints	= {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_OK
		},
	}
}


/*
CoverPageCloseB = GenTrigger {
	moniker = "VMO_CANCEL", "Close";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word 	IC_DISMISS
		},
	}
}
*/

CoverPageUseCoverPageInteraction = GenInteraction {
	children = CoverPageUseCoverPageItemGroup;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

CoverPageUseCoverPageItemGroup = GenItemGroup {
	moniker = "Include cover page:";
	children = CoverPageUseCoverNo,
		   CoverPageUseCoverYes;
	behaviorType = exclusive;
	selection = FALSE;
}

CoverPageUseCoverNo = GenItem {
	moniker = "Yes";
	identifier = TRUE;
}

CoverPageUseCoverYes = GenItem {
	moniker = "No";
	identifier = FALSE;
}

CoverPageFromInteraction = GenInteraction {
	children =  CoverPageFromLabelGlyph,
		    CoverPageFromSummaryText,
		    CoverPageFromMoreInteraction;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

CoverPageFromLabelGlyph = GenGlyph {
	moniker = "From: ";
}

CoverPageFromSummaryText = GenText {
	maxLength = FAXFILE_NAME_BUFFER_SIZE;
	textDisplayAttributes = default +singleLineText, +allowTextOffEnd, +dontScrollToChanges;
	genAttributes = default +readOnly;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

CoverPageFromMoreInteraction = GenInteraction {
	children = CoverPageFromMoreTrigger;
	hints = {
		HINT_RIGHT_JUSTIFY_CHILDREN,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		}
}

CoverPageFromMoreTrigger = GenTrigger {
	moniker = 'S',"Sender Information";
	action = MSG_GEN_INTERACTION_INITIATE, CoverPageFromInformationDialog;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		}
}

/*
CoverPageFromInfoText = CoverPageSenderText {
	moniker = "Sender Information:";
	textDisplayAttributes = default +initScrolling;
	genAttributes = default +readOnly;
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FIXED_SIZE {
				SpecWidth <>
				SpecHeight < SST_LINES_OF_TEXT, 4>
				},
		HINT_IF_SYSTEM_ATTRS {
			SystemAttrs mask SA_COLOR
		},
			HINT_TEXT_NO_FRAME,
		HINT_ELSE,
		HINT_ENDIF,
		}
	action = MSG_GEN_INTERACTION_INITIATE, CoverPageFromInformationDialog;

}

*/
/* This interaction contains a backspace and delete for the to fields */
/*

CoverPageTools = GenInteraction {
	children = CoverPageBackspaceTrigger,
		   CoverPageDeleteAllTrigger;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_TOOLBOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		}
}
*/
/*
CoverPageBackspaceTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, Group3NameText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
CoverPageDeleteAllTrigger = GenTrigger {
	moniker = "X";
	action = MSG_VIS_TEXT_DELETE_ALL, Group3NameText;

}
*/

/* This interaction makes contains all the parts for the comments field */
CoverPageCommentsInteraction = GenInteraction {
	children = CoverPageCommentsHeaderInteraction,
		   CoverPageCommentsView;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_MINIMIZE_CHILD_SPACING,
		}
}



/* This interaction will contain the moniker for the comments field and */
/* the toolbar for the comments.  They are grouped together purely for  */
/* visual purposes.							*/
CoverPageCommentsHeaderInteraction = GenInteraction {
	moniker = "Comments: ";
#if _PEN_BASED
	children = CPCommentsToolItemGroup,
		   CPCommentsDeleteTrigger;
#endif
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_RIGHT_JUSTIFY_CHILDREN,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_TOOLBOX,
		}
}

#if _PEN_BASED
CPCommentsToolItemGroup = GenItemGroup {
	children = CPCommentsPencilItem,
		   CPCommentsEraseItem;
	applyMsg = MSG_INK_SET_TOOL;
	destination = CoverPageCommentsInk;
	selection = IT_PENCIL;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_TOOLBOX,
		}
}	

CPCommentsPencilItem = GenItem {
	moniker = PencilTCGAMoniker;
	identifier = IT_PENCIL;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth < SST_PIXELS, 15 >
			SpecHeight < SST_PIXELS, 15 >
		},
	}
}

CPCommentsEraseItem = GenItem {
	moniker = EraserTCGAMoniker;
	identifier = IT_ERASER;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth < SST_PIXELS, 15 >
			SpecHeight < SST_PIXELS, 15 >
		},
	}
}

CPCommentsDeleteTrigger = InkDeleteTrigger {
	moniker = list {ClearMoniker}
/*	hints = {
		HINT_FIXED_SIZE {
			SpecWidth < SST_PIXELS, 15 >
			SpecHeight < SST_PIXELS, 15 >
		},
	}*/
}


/* This is the ink object that holds comments for the cover page */
CoverPageCommentsView = GenView {
	genAttributes = default +targetable;

	horizAttributes = default +scrollable, +noLargerThanContent;
	vertAttributes 	= default +scrollable, +noLargerThanContent;
	viewAttributes = default +dragScrolling;

	inkType = GVIT_QUERY_OUTPUT;

	output = CoverPageCommentsContent;

	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_DEFAULT_TARGET,
		}
}

#else

CoverPageCommentsView = GenText {
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_DEFAULT_TARGET
	}
}


#endif

#if _PEN_BASED


/* Content to hold the ink object */
CoverPageCommentsContent = VisContent {
children = CoverPageCommentsInk;

view = CoverPageCommentsView;

}


/* The ink object itself. */
CoverPageCommentsInk = Ink {

	left	= 0;
	top	= 0;
	right	= 490;
	bottom	= 250;	 /* This number taken from the coversheet box */

	flags	= default +onlyChildOfContent, +controlled, -hasUndo;

	
}		

/* Controller for the ink object */
/* Taken out because of spooler */
/*
CPCommentsInkControl = CoverPageCommentsInkControl {
	
	genStates = default +enabled;
	output = CoverPageCommentsView;
	type = organizational;
	hints = {
		HINT_TOOLBOX,
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word mask ICTF_SELECTION_TOOL  or \
				mask ICTF_PENCIL_TOOL or \
				mask ICTF_ERASER_TOOL
		},
		ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI {
			word mask ICTF_SELECTION_TOOL
		}
	}
}

CPCommentsToolGroup	= GenToolGroup {
	controller = CPCommentsInkControl;
	genStates = default +enabled;
	hints = {
		HINT_TOOLBOX,
		}
}


*/

#endif

/**********************************************************************/
/*			Cover Page Sender Information		      */
/**********************************************************************/

CoverPageFromInformationDialog = CoverPageSenderInteraction {

	moniker = "Sender Information";
	children = CoverPageFromTextInteraction,
		   CoverPageCompanyTextInteraction,
		   CoverPageVoicePhoneTextInteraction,
		   CoverPageFaxPhoneTextInteraction,
		   CoverPageFaxIDTextInteraction,
		   CoverPageSenderInfoOKB,
		   CoverPageSenderInfoCancelB;

	visibility = dialog;
	type = properties;
	attributes = notUserInitiatable, modal; 
	hints = {
		HINT_INTERACTION_FAST_RESPONSE_PROPERTIES,
		HINT_RIGHT_JUSTIFY_CHILDREN,
		HINT_DEFAULT_FOCUS,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbFromInfo",0
		}
	}
}


/*************************************************************************/
/* Text object for from field in Cover Page Dialog		         */
/*************************************************************************/

CoverPageFromTextInteraction = GenInteraction {
	moniker = "From:";
#if _PEN_BASED
	children = CoverPageFromETrigger,
		   CoverPageFromText,
		   CoverPageFromBSTrigger;
#else
	children = CoverPageFromText;
#endif

	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_DEFAULT_FOCUS,
		}
}

#if _PEN_BASED
CoverPageFromETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, CoverPageFromText;
}
#endif

CoverPageFromText = GenText {
	maxLength = "FAX_COVERPAGE_MAX_TO_FIELD_LENGTH - 1";
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_DEFAULT_TARGET,
		HINT_DEFAULT_FOCUS,
		}
}

#if _PEN_BASED
CoverPageFromBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, CoverPageFromText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

/*************************************************************************/
/* Text object for "Company" field in Cover Page Dialog		         */
/*************************************************************************/

CoverPageCompanyTextInteraction = GenInteraction {
	moniker = "Company:";
#if _PEN_BASED
	children = CoverPageCompanyETrigger,
		   CoverPageCompanyText,
		   CoverPageCompanyBSTrigger;
#else
	children = CoverPageCompanyText;
#endif
	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		}
}


#if _PEN_BASED

CoverPageCompanyETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, CoverPageCompanyText;
}

#endif

CoverPageCompanyText = GenText {
	maxLength = "FAX_COVERPAGE_MAX_FROM_FIELD_LENGTH - 1";
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_TEXT_SELECT_TEXT,
	}
}

#if _PEN_BASED

CoverPageCompanyBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, CoverPageCompanyText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}

#endif

/*************************************************************************/
/* Text object for "Voice Phone"  field in Cover Page Dialog		 */
/*************************************************************************/

CoverPageVoicePhoneTextInteraction = GenInteraction {
	moniker = "Voice:";
#if _PEN_BASED
	children = CoverPageVoicePhoneETrigger,
		   CoverPageVoicePhoneText,
		   CoverPageVoicePhoneBSTrigger;
#else
	children = CoverPageVoicePhoneText;
#endif
	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		}
}

#if _PEN_BASED

CoverPageVoicePhoneETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, CoverPageVoicePhoneText;
}
#endif

CoverPageVoicePhoneText = GenText {
	maxLength = "FAX_COVERPAGE_MAX_VOICE_FIELD_LENGTH - 1";
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_TEXT_SELECT_TEXT,
		ATTR_GEN_TEXT_CUSTOM_FILTER {
			word	offset	Group3NumberTextFilter
		},
	}
}

#if _PEN_BASED
CoverPageVoicePhoneBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, CoverPageVoicePhoneText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

/*************************************************************************/
/* Text object for "Fax Phone" field in Cover Page Dialog	         */
/*************************************************************************/

CoverPageFaxPhoneTextInteraction = GenInteraction {
	moniker = "Fax:";
#if _PEN_BASED
	children = CoverPageFaxPhoneETrigger,
		   CoverPageFaxPhoneText,
		   CoverPageFaxPhoneBSTrigger;
#else
	children = CoverPageFaxPhoneText;
#endif
	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		}
}

#if _PEN_BASED
CoverPageFaxPhoneETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, CoverPageFaxPhoneText;
}
#endif

CoverPageFaxPhoneText = GenText {
	maxLength = "FAX_COVERPAGE_MAX_FAX_FIELD_LENGTH - 1";
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_TEXT_SELECT_TEXT,
		ATTR_GEN_TEXT_CUSTOM_FILTER {
			word	offset	Group3NumberTextFilter
		},
	}
}

#if _PEN_BASED
CoverPageFaxPhoneBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, CoverPageFaxPhoneText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

/*************************************************************************/
/* Text object for "Fax ID" field in Cover Page Dialog	         	 */
/*************************************************************************/

CoverPageFaxIDTextInteraction = GenInteraction {
	moniker = "Fax ID:";
#if _PEN_BASED
	children = CoverPageFaxIDETrigger,
		   CoverPageFaxIDText,
		   CoverPageFaxIDBSTrigger;
#else
	children = CoverPageFaxIDText;
#endif

	hints = {
		HINT_TOOLBOX,
		HINT_MINIMIZE_CHILD_SPACING,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		}
}

#if _PEN_BASED

CoverPageFaxIDETrigger = DeleteTrigger {
 	moniker = list {ClearMoniker}
	action = MSG_VIS_TEXT_DELETE_ALL, CoverPageFaxIDText;
}
#endif

CoverPageFaxIDText = GenText {
	maxLength = "FAX_COVERPAGE_MAX_FAX_ID_FIELD_LENGTH - 1";
	textDisplayAttributes	= default +singleLineText;
	hints = {
		HINT_TEXT_SELECT_TEXT,
	}
}

#if _PEN_BASED
CoverPageFaxIDBSTrigger = GenTrigger {
	moniker = list {BackSpaceMoniker}
	action = MSG_VIS_TEXT_DO_KEY_FUNCTION, CoverPageFaxIDText;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	VTKF_DELETE_BACKWARD_CHAR
		},
	}
}
#endif

CoverPageSenderInfoOKB	= GenTrigger {
	genAttributes	= default +signalInteractionComplete;
	action	= MSG_FAX_INFO_SAVE_SENDER_INFO, FaxDialogBox;
	hints	= {
			HINT_DEFAULT_DEFAULT_ACTION,
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
				word	IC_OK
			},
		}
}


CoverPageSenderInfoCancelB = GenTrigger {
	genAttributes 	= default +signalInteractionComplete;
	action 	= MSG_FAX_INFO_RESET_SENDER_INFO, FaxDialogBox;
	hints 	= {
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
				word	IC_DISMISS
			},
	}
}


/*************************************************************************/
/* Text object for "Fax ID" field in Cover Page Dialog	         	 */
/* Note, this is not in the dialog now, but is still needed to build     */
/* the cover page.							 */
/*************************************************************************/
CoverPageNumPages = GenText {
	text = "10";
	textDisplayAttributes	= default +singleLineText;
}

/************************************************************************/
/*									*/
/*			 UI for the address book			*/
/*									*/
/************************************************************************/
#if _USE_PALM_ADDR_BOOK
#include	"group3AddrBook.ui"
#endif

/************************************************************************/
/*									*/
/*			UI for dialing assistance			*/
/*									*/
/************************************************************************/
#include	"group3DialAssist.ui"

/************************************************************************/
/*									*/
/*			GString for the cover page			*/
/*									*/
/************************************************************************/
#include	"group3CoverSheet.ui"

end Group3UI;

start	StringBlock, data;

/* What to print in the QuickNumberList if it's empty */
chunk	NoQuickNumbers		= "No Current Entries";

/*  This error occurs when we have to send a message to the fax	*/
/*  spooler and find out that the fax spooler isn't there.		*/
chunk	SpoolerConnectError	= "Could not contact the Fax Spooler.";

#if _USE_PALM_ADDR_BOOK
/*   This message pops up when the address book cannot be found.	*/
chunk	NoAddressBook		= "Unable to open the address book. Please choose another one.";
#endif


/*   This is an interactive dialog that pops up when there might not be	*/
/*   enough disk space to continue the job.  It will return whether or	*/
/*   not to continue the job.						*/
chunk	NotEnoughDiskSpaceWarning = "You might not have enough disk space to \
create the fax file. Do you want to continue?";

/*   This probably will never happen, but occurs when we can't access 	*/
/*   the fax directory.							*/
#if _FLOPPY_BASED_FAX
chunk	CannotGoToFaxDir	= "A fax cannot be sent without a formatted diskette in the drive.\\rInsert a diskette and press OK.";
#else
chunk	CannotGoToFaxDir	= "Unable to access the fax directory.";
#endif

/*   Cannot create the fax file for VM file errors.			*/
chunk	CannotCreateFaxFile	= "Unable to create Fax file. Job will be \
cancelled.";


/*   This error occurs when it can't resize the job parameters and the 	*/
/*    bob cannot continue anymore.					*/
chunk	CannotResizeJobParams 	= "Not enough memory. Job will be cancelled.";

/*  Ran out of disk space while spooling the fax	*/
chunk	RanOutOfDiskSpace	= "There is not enough disk space to create the fax. The fax job is being cancelled.";

chunk	NoFaxNumber	= "This fax is being spooled without the receiver's fax number. You will need to enter the number in the Fax Control Panel after the job is spooled.";

chunk	CannotOpenFaxInfoFile	= "Cannot load fax defaults.";


/* The user did not enter a phone number */

#if _FLOPPY_BASED_FAX
chunk	NeedFloppy = "A fax cannot be sent without a formatted diskette in the drive. \\rInsert a diskette and try the operation again.";
#endif

end	StringBlock;
