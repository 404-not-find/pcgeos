@include <stdapp.goh>
@include <Objects/gViewCC.goh>
@include <gstring.h>
@include <spool.goh>
@include <Objects/clipbrd.goh>
@include <initfile.h>
@include "mine.goh"
@include <Ansi/string.h>

void UncoverAll(void) ;

void mycopy(char *s, char *t, word size) ;

@extern object MineTimer ;
@extern object MineScore ;
@extern object MineFlagCount ;
@extern object MineFoundBox ;
@extern object MineView ;
@extern object PlaceHighScoreText ;
@extern object PlaceHighScoreBox ;
@extern object MineCompletedBox ;
@extern object MineApp ;
@extern object ScoreName1 ;
@extern object ScoreName2 ;
@extern object ScoreName3 ;
@extern object ScoreName4 ;
@extern object ScoreName5 ;
@extern object ScoreName6 ;
@extern object ScoreName7 ;
@extern object ScoreName8 ;
@extern object ScoreName9 ;
@extern object ScoreName10 ;
@extern object ScoreValue1 ;
@extern object ScoreValue2 ;
@extern object ScoreValue3 ;
@extern object ScoreValue4 ;
@extern object ScoreValue5 ;
@extern object ScoreValue6 ;
@extern object ScoreValue7 ;
@extern object ScoreValue8 ;
@extern object ScoreValue9 ;
@extern object ScoreValue10 ;

    @classdecl MineTimerClass;
    @classdecl MineViewClass;
    @classdecl MineContentClass ;

@extern chunk StringTimePrefix ;
@extern chunk StringTimePostfix ;

/*-------------------------------------------------------------------------*/
@method MineContentClass, MSG_META_START_SELECT,
                          MSG_META_START_MOVE_COPY
{
    word pos,posy,posx ;
    byte count = 0 ;
    byte flag = 0 ;
    byte *mine_field ;
    Boolean sending = FALSE ;

    if (game_mode < 2)  {
        mine_field = (byte *)MemLock(mine_field_handle) ;

        if (game_mode == 0)  {
            if (timedBoolean)  {
                @call MineTimer::MSG_MINE_RESET_TIMER() ;
                timer_handle = TimerStart(TIMER_EVENT_CONTINUAL,
                                      @MineTimer,
                                      80,
                                      MSG_MINE_TIMER_CHANGE,
                                      60,
                                      &timer_id) ;
                timer_going = TRUE ;
            }
            game_mode = 1 ;
        }
        xPosition /= SQUARE_SIZE ;
        yPosition /= SQUARE_SIZE ;

        if (inputState&BI_B2_DOWN)  {
            pos = quick_mine_field(xPosition, yPosition) ;
            if (mine_field[pos]&MINE_FIELD_COVER_BIT)  {
                if (flaggingBoolean)  {
                    if (mine_field[pos]&MINE_FIELD_MARK_BIT) {
                        mine_field[pos] &= (~MINE_FIELD_MARK_BIT) ;
                        num_flags-- ;
                    } else {
                        if (num_flags < num_mines)  {
                            mine_field[pos] |= (MINE_FIELD_MARK_BIT) ;
                            num_flags++ ;
                        }
                    }
                    @send process::MSG_MINE_REDRAW_SQUARE(xPosition, yPosition) ;
                    @send process::MSG_MINE_UPDATE_FLAG_COUNT() ;
                }
            } else {
                if (areaClearBoolean)  {
                    posx = xPosition ;
                    posy = yPosition ;
                    count = 0 ;
                    if (posx>0)  {
                        if (!(mine_field[pos-1]&MINE_FIELD_MARK_BIT))  {
                            if (mine_field[pos-1]&MINE_FIELD_COVER_BIT)  {
                                num_squares_left-- ;
                                mine_field[pos-1] &= (~MINE_FIELD_COVER_BIT) ;
                                if (mine_field[pos-1]==0x0F)
                                    count++ ;
                            }
                        }
                        if (posy>0)
                            if (!(mine_field[pos-size_x-1]&MINE_FIELD_MARK_BIT))  {
                                if (mine_field[pos-size_x-1]&MINE_FIELD_COVER_BIT)  {
                                    num_squares_left-- ;
                                    mine_field[pos-size_x-1] &= (~MINE_FIELD_COVER_BIT) ;
                                    if (mine_field[pos-size_x-1]==0x0F)
                                        count++ ;
                                }
                            }
                        if (posy<size_y-1)
                            if (!(mine_field[pos+size_x-1]&MINE_FIELD_MARK_BIT))  {
                                if (mine_field[pos+size_x-1]&MINE_FIELD_COVER_BIT)  {
                                    num_squares_left-- ;
                                    mine_field[pos+size_x-1] &= (~MINE_FIELD_COVER_BIT) ;
                                    if (mine_field[pos+size_x-1]==0x0F)
                                        count++ ;
                                }
                            }
                    }
                    if (posx<size_x-1)  {
                        if (!(mine_field[pos+1]&MINE_FIELD_MARK_BIT))  {
                            if (mine_field[pos+1]&MINE_FIELD_COVER_BIT)  {
                                num_squares_left-- ;
                                mine_field[pos+1] &= (~MINE_FIELD_COVER_BIT) ;
                                if (mine_field[pos+1]==0x0F)
                                    count++ ;
                            }
                        }
                        if (posy>0)
                            if (!(mine_field[pos-size_x+1]&MINE_FIELD_MARK_BIT))  {
                                if (mine_field[pos-size_x+1]&MINE_FIELD_COVER_BIT)  {
                                    num_squares_left-- ;
                                    mine_field[pos-size_x+1] &= (~MINE_FIELD_COVER_BIT) ;
                                    if (mine_field[pos-size_x+1]==0x0F)
                                        count++ ;
                                }
                            }
                        if (posy<size_y-1)
                            if (!(mine_field[pos+size_x+1]&MINE_FIELD_MARK_BIT))  {
                                if (mine_field[pos+size_x+1]&MINE_FIELD_COVER_BIT)  {
                                    num_squares_left-- ;
                                    mine_field[pos+size_x+1] &= (~MINE_FIELD_COVER_BIT) ;
                                    if (mine_field[pos+size_x+1]==0x0F)
                                        count++ ;
                                }
                            }
                    }
                    if (posy>0)
                        if (!(mine_field[pos-size_x]&MINE_FIELD_MARK_BIT))  {
                            if (mine_field[pos-size_x]&MINE_FIELD_COVER_BIT)  {
                                num_squares_left-- ;
                                mine_field[pos-size_x] &= (~MINE_FIELD_COVER_BIT) ;
                                if (mine_field[pos-size_x]==0x0F)
                                    count++ ;
                            }
                        }
                    if (posy<size_y-1)
                        if (!(mine_field[pos+size_x]&MINE_FIELD_MARK_BIT))  {
                            if (mine_field[pos+size_x]&MINE_FIELD_COVER_BIT)  {
                                num_squares_left-- ;
                                mine_field[pos+size_x] &= (~MINE_FIELD_COVER_BIT) ;
                                if (mine_field[pos+size_x]==0x0F)
                                    count++ ;
                            }
                        }
                    num_squares_left += count ;
                    @send process::MSG_MINE_REDRAW_SQUARE_9(xPosition, yPosition) ;
                    if (count)
                        @send process::MSG_MINE_FOUND() ;
                    if (num_squares_left==num_mines)  {
                        @send process::MSG_MINE_COMPLETED() ;
                        sending = TRUE ;
                    }
                }
            }
        } else {
            if (inputState&BI_B0_DOWN)  {
                pos = quick_mine_field(xPosition, yPosition) ;
                if (mine_field[pos]&MINE_FIELD_COVER_BIT)  {
                    if (!(mine_field[pos]&MINE_FIELD_MARK_BIT))  {
                        mine_field[pos] &= (~MINE_FIELD_COVER_BIT) ;
                        @send process::MSG_MINE_REDRAW_SQUARE(xPosition, yPosition) ;
                        if (mine_field[pos] == 0x0F)
                            @send process::MSG_MINE_FOUND() ;
                        else
                            num_squares_left-- ;
                        if (num_squares_left==num_mines)  {
                            @send process::MSG_MINE_COMPLETED() ;
                            sending = TRUE ;
                        }
                    }
                }
            }
        }
        if (growBoolean)  {
            @send MineApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
            do {
                flag = 0 ;
                for (pos=posy=0; posy<size_y; posy++)  {
                    for (posx=0; posx<size_x; posx++, pos++)  {
                        if (mine_field[pos]&MINE_FIELD_COVER_BIT)  {
                            count = 0 ;
                            if (posx>0)  {
                                if (mine_field[pos-1]==0)
                                    count++ ;
                                if (posy>0)
                                    if (mine_field[pos-size_x-1]==0)
                                        count++ ;
                                if (posy<size_y-1)
                                    if (mine_field[pos+size_x-1]==0)
                                        count++ ;
                            }
                            if (posx<size_x-1)  {
                                if (mine_field[pos+1]==0)
                                    count++ ;
                                if (posy>0)
                                    if (mine_field[pos-size_x+1]==0)
                                        count++ ;
                                if (posy<size_y-1)
                                    if (mine_field[pos+size_x+1]==0)
                                        count++ ;
                            }
                            if (posy>0)
                                if (mine_field[pos-size_x]==0)
                                    count++ ;
                            if (posy<size_y-1)
                                if (mine_field[pos+size_x]==0)
                                    count++ ;
                            if (count)  {
                                if (!(mine_field[pos]&MINE_FIELD_MARK_BIT))  {
                                    flag=1 ;
                                    mine_field[pos] &= (~MINE_FIELD_COVER_BIT) ;
                                    num_squares_left-- ;
                                    @send process::MSG_MINE_REDRAW_SQUARE(posx, posy) ;
                                }
                            }
                        }
                    }
                }
            } while (flag) ;
            @send MineApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
            if ((num_squares_left==num_mines) && (!sending))
                @send process::MSG_MINE_COMPLETED() ;
        }
        MemUnlock(mine_field_handle) ;
    }
    retVal->flags = MRF_PROCESSED ;
}
/*-------------------------------------------------------------------------*/
@method MineTimerClass, MSG_MINE_CHANGE_TIME
{
    char new_time[60] ;
    char *p_dest ;
    word len ;

    MemLock(OptrToHandle(@StringTimePrefix)) ;
    strcpy(new_time, LMemDeref(@StringTimePrefix)) ;
    len = strlen(new_time) ;

    p_dest = new_time + len ;
    *(p_dest++) = '0'+time_hour/10 ;
    *(p_dest++) = '0'+time_hour%10 ;
    *(p_dest++) = ':' ;

    *(p_dest++) = '0'+time_min/10 ;
    *(p_dest++) = '0'+time_min%10 ;
    *(p_dest++) = ':' ;

    *(p_dest++) = '0'+time_sec/10 ;
    *(p_dest++) = '0'+time_sec%10 ;

    strcpy(p_dest, LMemDeref(@StringTimePostfix)) ;
    MemUnlock(OptrToHandle(@StringTimePrefix)) ;

    @call MineTimer::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(new_time, VUM_NOW) ;
}
/*-------------------------------------------------------------------------*/
@method MineTimerClass, MSG_MINE_TIMER_CHANGE
{
    time_sec++ ;
    if (time_sec==60)  {
        time_sec = 0 ;
        time_min++ ;
        if (time_min==60)  {
            time_min = 0 ;
            time_hour++ ;
            if (time_hour == 100)  {
                time_hour = 0 ;
            }
        }
    }
    @send MineTimer::MSG_MINE_CHANGE_TIME() ;
    @send process::MSG_MINE_UPDATE_SCORE() ;
}
/*-------------------------------------------------------------------------*/
@method MineTimerClass, MSG_MINE_RESET_TIMER
{
    time_sec = time_min = time_hour = 0 ;
    @send MineTimer::MSG_MINE_CHANGE_TIME() ;
}
/*-------------------------------------------------------------------------*/
char *convert_word_to_str(char *buffer, word value)
{
    word power = 10000 ;
    byte flag = 0 ;
    word digit = 0 ;

    while (power)  {
        digit = '0' + (value/power) ;
        if ((digit!='0')||(power==1))
            flag |= 1 ;

        if (flag)  {
            *(buffer++) = digit ;
            value %= power ;
        }
        power /= 10 ;
    }
    *buffer = '\0' ;

    return buffer ;
}
/*-------------------------------------------------------------------------*/
@method MineContentClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    RectDWord    rect ;

    @call MineView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect) ;
    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    MineDraw(gstate,&rect);

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}
/*-------------------------------------------------------------------------*/
void mycopy(char *s, char *t, word size)
{
    for (; size; size--)
        *(s++) = *(t++) ;
}
/*-------------------------------------------------------------------------*/
void UncoverAll()
{
    byte *mine_field ;
    word pos = size_x*size_y ;

    mine_field = (byte *)MemLock(mine_field_handle) ;
    while (pos) {
        pos-- ;
        if (mine_field[pos] & MINE_FIELD_COVER_BIT)
            mine_field[pos] |= MINE_FIELD_HASH_BIT ;
        mine_field[pos] &= ~(MINE_FIELD_COVER_BIT/*|MINE_FIELD_MARK_BIT*/) ;
    }

    MemUnlock(mine_field_handle) ;
}
/*-------------------------------------------------------------------------*/
void MineDraw(GStateHandle gstate,
              RectDWord *rect)
{
    word start_x, start_y, end_x, end_y ;
    word x, y ;
    word pos ;
    word x_at, y_at ;
    char text[10] = "012345678" ;
    word mid ;
    byte value ;
    byte *mine_field ;

    mine_field = (byte *)MemLock(mine_field_handle) ;

    start_x = ((word)(rect->RD_left)) / SQUARE_SIZE ;
    start_y = ((word)(rect->RD_top)) / SQUARE_SIZE ;
    end_x = (((word)(rect->RD_right)) / SQUARE_SIZE) ;
    end_y = (((word)(rect->RD_bottom)) / SQUARE_SIZE) ;

    if (start_x != 0)
       start_x-- ;
    if (start_y != 0)
       start_y-- ;
    if (end_x >= size_x)
       end_x = size_x-1 ;
    if (end_y >= size_y)
       end_y = size_y-1 ;

    GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GRAY, 0, 0) ;
    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_mine_field(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            if (mine_field[pos]&MINE_FIELD_COVER_BIT)  {
                GrFillRect(gstate,
                           x_at,
                           y_at,
                           x_at+SQUARE_SIZE,
                           y_at+SQUARE_SIZE) ;
                GrDrawVLine(gstate, x_at, y_at, y_at+SQUARE_SIZE-1) ;
                GrDrawHLine(gstate, x_at, y_at, x_at+SQUARE_SIZE-1) ;
            }
        }
    }

    GrSetLineColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0) ;
    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_mine_field(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            if (mine_field[pos]&MINE_FIELD_COVER_BIT)  {
                GrDrawVLine(gstate, x_at+SQUARE_SIZE-1,
                                    y_at,
                                    y_at+SQUARE_SIZE-1) ;
                GrDrawHLine(gstate, x_at,
                                    y_at+SQUARE_SIZE-1,
                                    x_at+SQUARE_SIZE-1) ;
            }
        }
    }

    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed((float)TEXT_SIZE));
    GrSetLineColor(gstate, CF_INDEX, C_LIGHT_GRAY, 0, 0) ;
    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_mine_field(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            if (!((value=mine_field[pos])&MINE_FIELD_COVER_BIT))  {
                GrDrawVLine(gstate, x_at, y_at, y_at+SQUARE_SIZE-1) ;
                GrDrawHLine(gstate, x_at, y_at, x_at+SQUARE_SIZE-1) ;
                if ((value&0x0F)==0x0F)  {
                    GrDrawBitmap(gstate,
                                 x_at+1,
                                 y_at+1,
                                 (Bitmap*)BombPicture,
                                 NULL) ;
                } else if (value&0x0F)  {
                    mid = 4 ;
                    GrDrawChar(gstate, x_at+mid, y_at-2, text[value&0x0F]) ;
                }
            }
        }
    }

    GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GRAY, 0, 0) ;
    GrSetAreaMaskSys(gstate, SDM_50) ;
    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_mine_field(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)
            if (mine_field[pos]&MINE_FIELD_HASH_BIT)
                GrFillRect(gstate,
                           x_at,
                           y_at,
                           x_at+SQUARE_SIZE,
                           y_at+SQUARE_SIZE) ;
    }

    GrSetLineWidth(gstate, MakeWWFixed(2.0)) ;
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0) ;
    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_mine_field(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            if (mine_field[pos]&MINE_FIELD_MARK_BIT)  {
                GrDrawLine(gstate, x_at+2, y_at+2,
                                   x_at+SQUARE_SIZE-3,
                                   y_at+SQUARE_SIZE-3) ;
                GrDrawLine(gstate, x_at+SQUARE_SIZE-3, y_at+2,
                                   x_at+2,
                                   y_at+SQUARE_SIZE-3) ;
            }
        }
    }

    MemUnlock(mine_field_handle) ;
}

word MyRandom()
{
    static word rand1 = 0xf32d ;
    static word rand2 = 0x0103 ;
    static word rand3 = 0x4326 ;
    static word rand4 = 0x4878 ;
    TimerDateAndTime dateAndTime ;
    word old ;

    TimerGetDateAndTime(&dateAndTime) ;
    old = rand1 ;
    rand1 = rand2 ;
    rand2 = rand3 ;
    rand3 = rand4 ;
/*
    rand4 += dateAndTime.TDAT_minutes + dateAndTime.TDAT_minutes +
             dateAndTime.TDAT_hours + dateAndTime.TDAT_day ;
*/
    rand4 ^= old^rand1^rand2^rand3 ;
    rand3 += rand1+rand2+rand4 ;
    rand4 += TimerGetCount() ;
    return old ;
}


/* size_x and size_y must be odd values */

void MineMake(byte* mine_field, word size_x, word size_y)
{
    word pos = size_x * size_y;
    word posx, posy ;
    word i ;
    byte count ;

    @send MineApp::MSG_GEN_APPLICATION_MARK_BUSY() ;

    i = 1+((pos = size_x * size_y)/density) ;

    for (pos--; pos!=(word)(-1); pos--)
        mine_field[pos] = 0 ;

    for (; i; i--)  {
        do {
            posx = (MyRandom()>>3)&255 ;
        } while (posx>=size_x) ;
        do {
            posy = (MyRandom()>>3)&255 ;
        } while (posy>=size_y) ;
        pos = quick_mine_field(posx, posy) ;
        mine_field[pos] = 0x8F ;
    }

    for (pos=posy=0; posy<size_y; posy++)  {
        for (posx=0; posx<size_x; posx++, pos++)  {
            if (mine_field[pos] != 0x8F)  {
                count = 0 ;
                if (posx>0)  {
                    if (mine_field[pos-1]==0x8F)
                        count++ ;
                    if (posy>0)
                        if (mine_field[pos-size_x-1]==0x8F)
                            count++ ;
                    if (posy<size_y-1)
                        if (mine_field[pos+size_x-1]==0x8F)
                            count++ ;
                }
                if (posx<size_x-1)  {
                    if (mine_field[pos+1]==0x8F)
                        count++ ;
                    if (posy>0)
                        if (mine_field[pos-size_x+1]==0x8F)
                            count++ ;
                    if (posy<size_y-1)
                        if (mine_field[pos+size_x+1]==0x8F)
                            count++ ;
                }
                if (posy>0)
                    if (mine_field[pos-size_x]==0x8F)
                        count++ ;
                if (posy<size_y-1)
                    if (mine_field[pos+size_x]==0x8F)
                        count++ ;
                mine_field[pos] = count | MINE_FIELD_COVER_BIT;
            }
        }
    }
    num_squares_left = size_x*size_y ;
    num_flags = num_mines = 0 ;

    for (pos=size_x*size_y; pos;)
        if (mine_field[--pos]==0x8F)
            num_mines++ ;

    @send MineApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}
/*-------------------------------------------------------------------------*/


