/**********************************************************************
 * MISCFUNC.GOC - Code for accomplishing miscellaneous functions.     *
 * Project - AIM Client                                               *
 * Started 12/27/98                                                   *
 **********************************************************************/

/**********************************************************************
 * Includes                                                           *
 **********************************************************************/

@include <stdapp.goh>
@include <socket.goh>

#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include "miscfunc.h"

/**********************************************************************
 * Global Variables                                                   *
 **********************************************************************/

char roast[] = "Tic/Toc";

/**********************************************************************
 * Methods                                                            *
 **********************************************************************/

/**********************************************************************
 * NormalizeName                                                      *
 **********************************************************************/
void NormalizeName(char *name, char *normal)
{
    word count1 = 0, count2 = 0, len;

    for (len = strlen(name); count1 < len; count1++)
        if (isalnum((unsigned char)name[count1]))
            normal[count2++] = tolower((unsigned char)name[count1]);

    normal[count2] = 0;
}

/**********************************************************************
 * NormalizedCompare                                                  *
 **********************************************************************/
word NormalizedCompare(char *str1, char *str2)
{
    while (*str1 != '\0' && *str2 != '\0')
    {
        if (!(isalnum((unsigned char)*str1)))
            str1++;
        else if (!(isalnum((unsigned char)*str2)))
            str2++;
        else
        {
            if (tolower((unsigned char)*str1) != tolower((unsigned char)*str2))
                break;
            else
                str1++, str2++;
        }
    }

    return tolower((unsigned char)*str1) - tolower((unsigned char)*str2);
}

/**********************************************************************
 * RoastPassword                                                      *
 **********************************************************************/
void RoastPassword(char *password, char *roasted)
{
  word count, pos, len, roastlen;

  roasted[0] = '0';
  roasted[1] = 'x';
  len = strlen(password);
  roastlen = strlen(roast);

  for (count = 0, pos = 2; count < len; count++) {
    pos += sprintf(&roasted[pos], "%02x", password[count] ^ roast[count % roastlen]);
  }
}


/**********************************************************************
 * RemoveHTML                                                         *
 **********************************************************************/
void RemoveHTML(char *in, char *out)
{
  word count, offset, len = strlen(in);
  Boolean html = FALSE;

  for (count = offset = 0; count < len; count++) {
    if (html) {
      if (in[count] == '>') {
        html = FALSE;
      }
    }
    else if (in[count] == '<') {
      html = TRUE;
    }
    else {
      out[offset++] = in[count];
    }
  }

  out[offset] = 0;
}

/**********************************************************************
 * ParseArgs
 *
 * Parse a TOC->Client string into num separate arguments.  Arguments
 * are separated by a colon.  After parsing, the argv[] array will
 * contain pointers to the start of each argument in the original
 * string, and each argument will be null-terminated.
 *
 * A non-zero value is returned if the end of the string is reached
 * before all num arguments were found.
 **********************************************************************/
Boolean ParseArgs(char *args, word num, char **argv)
{
    if (args)
    {
        *argv = args;       /* First argument always starts at first char */
        num --;

        while (num && *args != '\0')
            /* Looking for the colon. */
            if (*args == ':')
            {
                /* Replace the colon with null. */
                *(args++) = '\0';

                /* That's one less argument to look for. */
                num --;

                /* Store next argument position. */
                *(++argv) = args;
            }
            else
                args++;
    }

    /* If num is zero, there were exactly the number of requested arguments. */
    /* If num is greater than zero, there were fewer arguments than requested. */
    return (num > 0);
}

/**********************************************************************
 * PrependUsername
 *
 * Inserts the passed user name at the start of the passed text.
 * The user name is formatted as: "<username> ".  The text is a null-
 * terminated string contained in a memblock which MUST be locked
 * before calling and will remain locked after returning.  This function
 * may resize the block and therefore may invalidate any pointers to it.
 *
 * A non-zero return value indicates that the block could not be resized.
 **********************************************************************/
Boolean PrependUsername(MemHandle text, char *username)
{
    word userlen, len;
    char *p, *ptext = MemDeref(text);
    
    userlen = strlen(username);
    len = strlen(ptext) + userlen + 3;
    if ((text = MemReAlloc(text, len + 1, HAF_STANDARD)) != NullHandle)
    {
        /* To avoid two copies, move the message text upward to make room
         * for the user name, then write the user name at the start.
         * A backwards copy must be done and memcpy does not do this.
         */

        /* Was: memcpy(ptext + userlen + 3, ptext, strlen(ptext) + 1); */
        
        ptext = MemDeref(text);
        len = strlen(ptext);
        ptext += len;
        p = ptext + userlen + 3;
        len ++;
        while (len--)
            *(p--) = *(ptext--);

        ptext = MemDeref(text);
        *(ptext++) = '<';           /* Write first '<' */
        strcpy(ptext, username);    /* Write user name */
        ptext += userlen;           /* Point to 1st char beyond username */
        *(ptext++) = '>';           /* Write last '>' */
        *ptext = ' ';               /* Write space */
    }

    return (text == NullHandle);
}

/**********************************************************************
 * ChunkArrayBInsert                                                  *
 **********************************************************************/
void *ChunkArrayBInsert(optr array, void *pData, CABICallBack *pCBF)
{
    void *pNew, *pSearch;
    word nCount, nStart = 0, nEnd, nMid, dummy;
    sword nResult;

    /* Use a binary search method to locate the insertion point. */
    nCount = ChunkArrayGetCount(array);
    nEnd = nCount - 1;
    while (nStart <= nEnd && nEnd != (word)(-1))
    {
        /* Compare to the element midway between the endpoints. */
        nMid = nStart + (nEnd - nStart) / 2;
        pSearch = ChunkArrayElementToPtr(array, nMid, &dummy);
        nResult = ProcCallFixedOrMovable_cdecl(pCBF, pSearch, pData);
        if (nResult >= 0)
            /* The buddy should come after the midpoint. */
            nStart = nMid + 1;
        if (nResult < 0)
            /* The buddy should come before the midpoint. */
            nEnd = nMid - 1;
    }
    if (nStart < nCount)
        /* Insert a new element within the array. */
        pNew = ChunkArrayInsertAt(array, 
          ChunkArrayElementToPtr(array, nStart, &dummy), 0);
    else
        /* Append a new element to the array. */
        pNew = ChunkArrayAppend(array, 0);

    return pNew;
}

