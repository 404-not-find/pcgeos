@include <stdapp.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>

@include "aim.goh"
@include "toccfg.goh"
@include "toc.goh"
@include "extern.goh"
@include "error.goh"

#include "miscfunc.h"

/**********************************************************************
 * Typedefs, Defines, Enums, Structs...
 **********************************************************************/

/* The offline buddy configuation is an lmem block with a header of type
 * BuddyConfigHeader.  This header points to three chunks: a groups ChunkArray,
 * a permit ChunkArray, and a deny ChunkArray.  The groups ChunkArray
 * contains elements of type BuddyConfigGroup.  Each element in the
 * groups CA points to an individual group chunk.  The individual group,
 * permit, and deny CAs contain buddy names.
 */

typedef struct
{
    LMemBlockHeader     BCH_meta;
    ChunkHandle         BCH_groups;
    ChunkHandle         BCH_permit;
    ChunkHandle         BCH_deny;
    TocPermitDenyMode   BCH_pdmode;
}
BuddyConfigHeader;

typedef struct
{
    GroupName   BCG_name;
    ChunkHandle BCG_array;
}
BuddyConfigGroup;

typedef ByteFlags BuddyConfigFlags;
#define BCF_ADDED   0x80
#define BCF_BUDDY   0x40
#define BCF_PERMIT  0x20
#define BCF_DENY    0x10

typedef struct
{
    BuddyConfigFlags    BCI_flags;
    BuddyName           BCI_name;
}
BuddyConfigItem;

#define MAX_BUDDY_GROUPS            20
#define MAX_BUDDY_GROUP_SIZE        50

/**********************************************************************
 * Globals
 **********************************************************************/

MemHandle BuddyConfig = NullHandle;
GroupHandle BuddyGroups = NullChunk;

/**********************************************************************
 * Class Declaration                                                  *
 **********************************************************************/
@classdecl ConfigListClass;

/**********************************************************************
 * Strings
 **********************************************************************/
@start ConfigStringResource, data;
@chunk char DefaultGroup[] = "Buddies";
@localize not;
@chunk char BuddyAlreadyInGroup[] = "The buddy you entered is already in the selected group.";
@chunk char NoMoreBuddies[] = "You have reached the maximum number of buddies for this group and cannot add any more.";
@chunk char GroupAlreadyExists[] = "The group you entered already exists.";
@chunk char NoMoreGroups[] = "You have reached the maximum number of groups and cannot add any more.";
@chunk char LeaveDefaultGroup[] = "You must have at least one group.";
@chunk char PermitAlreadyExists[] = "The user you entered is already in the permit list.";
@chunk char DenyAlreadyExists[] = "The user you entered is already in the deny list.";
@chunk char GroupNotEmpty[] = "The group you have selected and all buddies that it contains will be removed.  Are you sure?";
@chunk char SelectGroupOrBuddy[] = "Please select a group or buddy in the buddy list.";

@end ConfigStringResource;

/**********************************************************************
 * Function Declarations
 **********************************************************************/
word ConfigGetGroupBuddyCount(GroupHandle group);
Boolean ConfigGetBuddyByIndex(GroupHandle group, word idx, BuddyName name);
GroupHandle ConfigGetGroupCommon(ConfigEnumStruct *, GroupName);
Boolean ConfigGetBuddyCommon(ConfigEnumStruct *, BuddyName);
BuddyConfigFlags ConfigGetFlagsFromListType(ConfigListType type);

optr UIConfigGetList(BuddyConfigFlags flags);
void UIConfigUpdateGroupByIndex(BuddyConfigFlags flags, GroupHandle group, word idx);
void UIConfigAddByIndex(BuddyConfigFlags flags, GroupHandle group, word idx);
void UIConfigRemoveByIndex(BuddyConfigFlags flags, GroupHandle group, word idx);
void UIConfigUpdatePermitDenyMode(TocPermitDenyMode mode);
void UIConfigInitialize(void);
void UIConfigUpdateBuddy(word groupidx, word buddyidx);
void UIConfigAddGroup(word groupidx);
void UIConfigRemoveGroup(word groupidx);

/**********************************************************************
 * Configuration Management Functions
 **********************************************************************/

Boolean ConfigInitialize(void)
{
    Boolean retval = FALSE;
    BuddyConfigHeader *bch;
    ChunkHandle permit, deny;

    UIConfigInitialize();

    /* Free the buddy config block if it already exists. */
    if (BuddyConfig != NullHandle)
    {
        UIInitialize();
        
        MemFree(BuddyConfig);
    }
        
    /* Create the offline buddy list block. */
    BuddyConfig = MemAllocLMem(LMEM_TYPE_GENERAL,
      sizeof(BuddyConfigHeader));
    if (BuddyConfig != NullHandle)
    {
        /* Create buddy, permit, deny, and removed arrays. */
        MemLock(BuddyConfig);
        BuddyGroups = ChunkArrayCreate(BuddyConfig,
          sizeof(BuddyConfigGroup), 0, 0);
        permit = ChunkArrayCreate(BuddyConfig,
          sizeof(BuddyConfigItem), 0, 0);
        deny = ChunkArrayCreate(BuddyConfig,
          sizeof(BuddyConfigItem), 0, 0);
        bch = MemDeref(BuddyConfig);
        bch->BCH_groups = BuddyGroups;
        bch->BCH_permit = permit;
        bch->BCH_deny = deny;
        bch->BCH_pdmode = TOC_PDMODE_PERMIT_ALL;

        /* Create default group entry and array. */
        MemLock(HandleOf(@DefaultGroup));
        ConfigAddGroup(LMemDeref(@DefaultGroup));
        MemUnlock(HandleOf(@DefaultGroup));

        MemUnlock(BuddyConfig);
    }
    else
        retval = TRUE;

    return retval;
}

GroupHandle ConfigGetDefaultGroup(void)
{
    BuddyConfigGroup *bcg;
    GroupHandle defaultg = INVALID_GROUP;
    word dummy;
    
    MemLock(BuddyConfig);
    if (ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups) > 0)
    {
        bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups, 0, &dummy);
        defaultg = bcg->BCG_array;
    }
    MemUnlock(BuddyConfig);

    return defaultg;
}

word ConfigGetGroupCount(void)
{
    /* Okay, it's a shortcut, but it works. */
    return ConfigGetGroupBuddyCount(BuddyGroups);
}

word ConfigGetGroupBuddyCount(GroupHandle group)
{
    word count;

    EC_ERROR_IF(group == INVALID_GROUP, -1);

    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, group);
    MemUnlock(BuddyConfig);

    return count;
}

GroupHandle ConfigGetGroupByIndex(word index, GroupName name)
{
    BuddyConfigGroup *bcg;
    GroupHandle group = INVALID_GROUP;
    word dummy;
    
    MemLock(BuddyConfig);
    if (index < ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups))
    {
        bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups, index, &dummy);
        if (name != NULL)
            strcpy(name, bcg->BCG_name);
        group = bcg->BCG_array;
    }
    MemUnlock(BuddyConfig);

    return group;
}

word ConfigGetGroupIndex(GroupHandle group)
{
    BuddyConfigGroup *bcg;
    word retval = INVALID_GROUP_INDEX;
    word idx, count, dummy;

    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups);
    for (idx = 0; idx < count && retval == INVALID_GROUP_INDEX; idx ++)
    {
        bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups, idx,
          &dummy);
        if (bcg->BCG_array == group)
            retval = idx;
    }
    MemUnlock(BuddyConfig);

    return retval;
}

GroupHandle ConfigFindGroup(GroupName name)
{
    BuddyConfigGroup *bcg;
    GroupHandle retval = INVALID_GROUP;
    word idx, count, dummy;

    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups);
    for (idx = 0; idx < count && retval == INVALID_GROUP; idx ++)
    {
        bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups, idx,
          &dummy);
        if (!strcmp(bcg->BCG_name, name))
            retval = bcg->BCG_array;
    }
    MemUnlock(BuddyConfig);

    return retval;
}
    
GroupHandle ConfigAddGroup(GroupName name)
{
    BuddyConfigGroup *bcg;
    GroupHandle retval = INVALID_GROUP;
    word count;

    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups);
    if (count < MAX_BUDDY_GROUPS)
    {
        retval = ChunkArrayCreate(BuddyConfig, sizeof(BuddyConfigItem), 0, 0);
        bcg = ChunkArrayAppendHandles(BuddyConfig, BuddyGroups, 0);
        strcpy(bcg->BCG_name, name);
        bcg->BCG_array = retval;
    }

    MemUnlock(BuddyConfig);

    UIConfigAddGroup(count);

    return retval;
}

sword ConfigAddBuddyBInsertCB(void *pElement, void *pData)
{
    return NormalizedCompare(pData, ((BuddyConfigItem *)pElement)->BCI_name);
}

Boolean ConfigAddBuddyToGroup(GroupHandle group, BuddyName name, ConfigListType type)
{
    word idx, count;
    Boolean retval = FALSE;
    BuddyConfigItem *pbuddy;
    BuddyConfigFlags flags = ConfigGetFlagsFromListType(type);

    EC_ERROR_IF(group == INVALID_GROUP, -1);

    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, group);
    if (count < MAX_BUDDY_GROUP_SIZE)
    {
        pbuddy = ChunkArrayBInsert(ConstructOptr(BuddyConfig, group), name,
          ConfigAddBuddyBInsertCB);
        idx = ChunkArrayPtrToElementHandle(group, pbuddy);
        pbuddy->BCI_flags = flags;
        strcpy(pbuddy->BCI_name, name);

        UIConfigAddByIndex(flags, group, idx);
    }
    else
        retval = TRUE;

    MemUnlock(BuddyConfig);

    return retval;
}

Boolean ConfigGetBuddyByIndex(GroupHandle group, word idx, BuddyName name)
{
    BuddyConfigItem *pbuddy;
    word dummy;
    word retval = TRUE;

    EC_ERROR_IF(group == INVALID_GROUP, -1);
    EC_ERROR_IF(idx == INVALID_BUDDY, -1);
    
    MemLock(BuddyConfig);

    if (idx < ChunkArrayGetCountHandles(BuddyConfig, group))
    {
        pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig, group, idx, &dummy);
        strcpy(name, pbuddy->BCI_name);
    }
    else
        retval = FALSE;

    MemUnlock(BuddyConfig);

    return retval;
}

word ConfigFindBuddyInGroup(GroupHandle group, BuddyName name)
{
    BuddyConfigItem *pbuddy;
    word idx, count, dummy, retval = INVALID_BUDDY;

    EC_ERROR_IF(group == INVALID_GROUP, -1);
    
    MemLock(BuddyConfig);
    count = ChunkArrayGetCountHandles(BuddyConfig, group);
    for (idx = 0; idx < count && retval == INVALID_BUDDY; idx ++)
    {
        pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig, group, idx, &dummy);
        if (!NormalizedCompare(pbuddy->BCI_name, name))
            retval = idx;
    }

    MemUnlock(BuddyConfig);

    return retval;
}

Boolean ConfigFindBuddy(GroupHandle *group, BuddyName name,
  Boolean bUpdateConfig)
{
    Boolean retval = FALSE, gotBuddy;
    BuddyName buddy;
    ConfigEnumStruct ces;
    GroupHandle curGroup;
    
    curGroup = ConfigGetFirstGroup(&ces, NULL);
    while (curGroup != INVALID_GROUP && !retval)
    {
        gotBuddy = ConfigGetFirstBuddy(&ces, buddy);
        while (gotBuddy && !retval)
        {
            if (NormalizedCompare(buddy, name))
                gotBuddy = ConfigGetNextBuddy(&ces, buddy);
            else
            {
                if (group != NULL)
                    *group = curGroup;
                if (bUpdateConfig)
                    ConfigUpdateConfigBuddy(curGroup, ces.CES_buddyIdx, name);
                retval = TRUE;
            }
        }
        if (!retval)
            curGroup = ConfigGetNextGroup(&ces, NULL);
    }

    return retval;
}

void ConfigUpdateConfigBuddy(GroupHandle group, word buddyIdx, BuddyName name)
{
    BuddyConfigItem *pbuddy;
    word dummy;

    EC_ERROR_IF(group == INVALID_GROUP, -1);
    EC_ERROR_IF(buddyIdx == INVALID_BUDDY, -1);
    
    MemLock(BuddyConfig);

    pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig, group, buddyIdx,
      &dummy);
    strcpy(pbuddy->BCI_name, name);

    UIConfigUpdateGroupByIndex(pbuddy->BCI_flags, group, buddyIdx);

    MemUnlock(BuddyConfig);
}

void ConfigRemoveBuddyFromGroup(GroupHandle group, BuddyName name)
{
    BuddyConfigItem *pbuddy;
    word idx, dummy;

    EC_ERROR_IF(group == INVALID_GROUP, -1);
    
    MemLock(BuddyConfig);

    idx = ConfigFindBuddyInGroup(group, name);

    if (idx != INVALID_BUDDY)
    {
        pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig, group, idx, &dummy);
        UIConfigRemoveByIndex(pbuddy->BCI_flags, group, idx);
        pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig, group, idx, &dummy);
        ChunkArrayDeleteHandle(group, pbuddy);
    }

    MemUnlock(BuddyConfig);
}

void ConfigRemoveGroup(word index)
{
    BuddyConfigGroup *bcg;
    GroupHandle group;
    word dummy;

    EC_ERROR_IF(index == INVALID_GROUP_INDEX, -1);
    
    UIConfigRemoveGroup(index);

    MemLock(BuddyConfig);
    EC_ERROR_IF(index >= ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups), -1);
    bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups, index, &dummy);
    group = bcg->BCG_array;
    ChunkArrayDeleteHandle(BuddyGroups, bcg);
    LMemFree(ConstructOptr(BuddyConfig, group));
    MemUnlock(BuddyConfig);
}

GroupHandle ConfigGetFirstGroup(ConfigEnumStruct *ces, GroupName name)
{
    ces->CES_groupIdx = 0;

    return ConfigGetGroupCommon(ces, name);
}

GroupHandle ConfigGetNextGroup(ConfigEnumStruct *ces, GroupName name)
{
    ces->CES_groupIdx ++;

    return ConfigGetGroupCommon(ces, name);
}

GroupHandle ConfigGetGroupCommon(ConfigEnumStruct *ces, GroupName name)
{
    BuddyConfigGroup *bcg;
    GroupHandle retval = INVALID_GROUP;
    word dummy;

    MemLock(BuddyConfig);
    if (ces->CES_groupIdx < ChunkArrayGetCountHandles(BuddyConfig, BuddyGroups))
    {
        bcg = ChunkArrayElementToPtrHandles(BuddyConfig, BuddyGroups,
          ces->CES_groupIdx, &dummy);
        ces->CES_groupHandle = retval = bcg->BCG_array;
        if (name != NULL)
            strcpy(name, bcg->BCG_name);
    }

    MemUnlock(BuddyConfig);

    return retval;
}

Boolean ConfigGetFirstBuddy(ConfigEnumStruct *ces, BuddyName name)
{
    ces->CES_buddyIdx = 0;

    return ConfigGetBuddyCommon(ces, name);
}

Boolean ConfigGetNextBuddy(ConfigEnumStruct *ces, BuddyName name)
{
    ces->CES_buddyIdx ++;

    return ConfigGetBuddyCommon(ces, name);
}

Boolean ConfigGetBuddyCommon(ConfigEnumStruct *ces, BuddyName name)
{
    word dummy;
    BuddyConfigItem *pbuddy;
    word count;
    Boolean retval = FALSE;

    MemLock(BuddyConfig);
    EC_ERROR_IF(ces->CES_groupHandle == INVALID_GROUP, -1);
    count = ChunkArrayGetCountHandles(BuddyConfig, ces->CES_groupHandle);
    if (ces->CES_buddyIdx < count)
    {
        pbuddy = ChunkArrayElementToPtrHandles(BuddyConfig,
          ces->CES_groupHandle, ces->CES_buddyIdx, &dummy);

        if (name != NULL)
            strcpy(name, pbuddy->BCI_name);

        retval = TRUE;
    }

    MemUnlock(BuddyConfig);

    return retval;
}

void ConfigSetPermitDenyMode(TocPermitDenyMode mode)
{
    BuddyConfigHeader *bch;

    if (mode >= TOC_PDMODE_PERMIT_ALL && mode <= TOC_PDMODE_DENY_SOME)
    {
        bch = MemLock(BuddyConfig);
        bch->BCH_pdmode = mode;
        MemUnlock(BuddyConfig);
        UIConfigUpdatePermitDenyMode(mode);
    }
}

TocPermitDenyMode ConfigGetPermitDenyMode()
{
    BuddyConfigHeader *bch;
    TocPermitDenyMode mode;

    bch = MemLock(BuddyConfig);
    mode = bch->BCH_pdmode;
    MemUnlock(BuddyConfig);
    
    return mode;
}

GroupHandle ConfigGetPermit(ConfigEnumStruct *ces)
{
    BuddyConfigHeader *bch;
    GroupHandle group;

    bch = MemLock(BuddyConfig);
    group = bch->BCH_permit;
    if (ces != NULL)
        ces->CES_groupHandle = group;
    MemUnlock(BuddyConfig);

    return group;
}
    
GroupHandle ConfigGetDeny(ConfigEnumStruct *ces)
{
    BuddyConfigHeader *bch;
    GroupHandle group;

    bch = MemLock(BuddyConfig);
    group = bch->BCH_deny;
    if (ces != NULL)
        ces->CES_groupHandle = group;
    MemUnlock(BuddyConfig);

    return group;
}

/**********************************************************************
 * UI Configuration Functions
 **********************************************************************/

/**********************************************************************
 * GenTriggerExClass                                                  *
 **********************************************************************/
@classdecl GenTriggerExClass;

@method GenTriggerExClass, MSG_GEN_TRIGGER_EX_GET_OPTR1
{
    return pself->GTEI_optr1;
}

@method GenTriggerExClass, MSG_GEN_TRIGGER_EX_GET_OPTR2
{
    return pself->GTEI_optr2;
}

/**********************************************************************
 * MSG_CONFIG_LIST_GET_GROUP for ConfigListClass                      *
 **********************************************************************/
@method ConfigListClass, MSG_CONFIG_LIST_GET_GROUP_AND_TYPE
{
    ChunkHandle *pGroup, group;

    if (pType != NULL)
        *pType = pself->CLI_groupType;

    pGroup = ObjVarFindData(oself, TEMP_CONFIG_LIST_GROUP_HANDLE);
    if (pGroup == NULL)
    {
        BuddyConfigHeader *bch = MemLock(BuddyConfig);

        switch (pself->CLI_groupType)
        {
            case CONFIG_LIST_TYPE_PERMIT:
                group = bch->BCH_permit;
                break;
            case CONFIG_LIST_TYPE_DENY:
                group = bch->BCH_deny;
                break;
        }

        MemUnlock(BuddyConfig);

        pGroup = ObjVarAddData(oself, TEMP_CONFIG_LIST_GROUP_HANDLE,
          sizeof(group));
        *pGroup = group;
    }
    else
        group = *pGroup;
        
    return group;
}

BuddyConfigFlags ConfigGetFlagsFromListType(ConfigListType type)
{
    BuddyConfigFlags retval = 0;
    
    if (type == CONFIG_LIST_TYPE_BUDDY)
        retval = BCF_BUDDY;
    else if (type == CONFIG_LIST_TYPE_PERMIT)
        retval = BCF_PERMIT;
    else if (type == CONFIG_LIST_TYPE_DENY)
        retval = BCF_DENY;

    return retval;
}

@ifndef USE_TREE

/**********************************************************************
 * MSG_AIM_QUERY_CONFIG_BUDDY_LIST                                    *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_QUERY_CONFIG_BUDDY_LIST
{
    UIConfigUpdateBuddy(levelOne, levelTwo);
}

/**********************************************************************
 * MSG_AIM_ADD_BUDDY                                                  *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_ADD_BUDDY
{
    dword selection = @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_GET_SELECTION();
    GroupHandle group = INVALID_GROUP;
    BuddyName name;

    if (GSTLGS_LEVEL_ONE(selection) == GIGS_NONE)
    {
        /* Notify - please select a group or buddy. */
        ErrorNotify(@SelectGroupOrBuddy);
    }
    else
    {
        group = ConfigGetGroupByIndex(GSTLGS_LEVEL_ONE(selection), NULL);
        if (group == INVALID_GROUP)
            /* Internal error */
            ErrorInternal();
    }
    if (group != INVALID_GROUP)
    {
        @call BCAddBuddyName::MSG_VIS_TEXT_GET_ALL_PTR(name);
        @call BCAddBuddyName::MSG_VIS_TEXT_DELETE_ALL();

        if (name[0] != '\0')
        {
            /* Search all groups to check if the buddy is already present. */
            if (ConfigFindBuddy(NULL, name, FALSE))
                /* Notify - buddy already in this group */
                ErrorNotify(@BuddyAlreadyInGroup);
            else if (ConfigAddBuddyToGroup(group, name, CONFIG_LIST_TYPE_BUDDY))
                /* Notify - cannot add any more buddies to this group */
                ErrorNotify(@NoMoreBuddies);
            else if (TocAddBuddy(&tcd, name))
                /* Comm error */
                ErrorComm();
        }
    }
}

/**********************************************************************
 * MSG_AIM_ADD_GROUP                                                  *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_ADD_GROUP
{
    GroupName group;

    @call BCAddGroupName::MSG_VIS_TEXT_GET_ALL_PTR(group);
    @call BCAddGroupName::MSG_VIS_TEXT_DELETE_ALL();

    if (group[0] != '\0')
    {
        if (ConfigFindGroup(group) != INVALID_GROUP)
            /* Notify - group already exists */
            ErrorNotify(@GroupAlreadyExists);
        else if (ConfigAddGroup(group) == INVALID_GROUP)
            /* Notify - cannot add any more groups */
            ErrorNotify(@NoMoreGroups);
    }
}

Boolean RemoveNonEmptyGroup(void)
{
    word answer;
    
    /* Question - This will remove all buddies, are you sure? */
    answer = UserStandardDialogOptr(NULL, NULL, NullOptr, NullOptr,
      @GroupNotEmpty, 
      (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
      (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));

    /* Return TRUE if the user answered Yes. */
    return (answer == IC_YES);
}

/**********************************************************************
 * MSG_AIM_REMOVE_BUDDY_OR_GROUP                                      *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_REMOVE_BUDDY_OR_GROUP
{
    dword selection = @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_GET_SELECTION();
    word groupidx = GSTLGS_LEVEL_ONE(selection),
         buddyidx = GSTLGS_LEVEL_TWO(selection);
    GroupHandle group = INVALID_GROUP;

    if (groupidx == GIGS_NONE)
    {
        /* Notify - please select a group or buddy. */
        ErrorNotify(@SelectGroupOrBuddy);
    }
    else
    {
        group = ConfigGetGroupByIndex(groupidx, NULL);        
        if (group == INVALID_GROUP)
            /* Internal error */
            ErrorInternal();
    }
    if (group != INVALID_GROUP)
    {
        if (buddyidx)
        {
            BuddyName name;
            
            /* User is removing a buddy from a group. */
            if (ConfigGetBuddyByIndex(group, buddyidx - 1, name))
            {
                if (TocRemoveBuddy(&tcd, name))
                    /* Comm error */
                    ErrorComm();
                else
                    ConfigRemoveBuddyFromGroup(group, name);
            }
            else
                /* Internal error */
                ErrorInternal();
        }
        else
        {
            /* User is removing a group. */
            if (ConfigGetGroupCount() == 1)
            {
                /* Notify - You cannot delete the default group! */
                ErrorNotify(@LeaveDefaultGroup);
            }
            else
            {
                /* If there are no buddies in the group, or if the user
                   grants permission, delete the group and all contents.
                   (Short-circuted logic will prevent the latter from being
                   tested if the former is true.) */
                   
                if (ConfigGetGroupBuddyCount(group) == 0 ||
                  RemoveNonEmptyGroup())
                {
                    ConfigEnumStruct ces;

                    ces.CES_groupHandle = group;
                    if (TocRemoveGroup(&tcd, &ces))
                        /* Comm error */
                        ErrorComm();
                    else
                        ConfigRemoveGroup(groupidx);
                }
            }
        }
    }
}

/**********************************************************************
 * MSG_AIM_QUERY_CONFIG_LIST                                          *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_QUERY_CONFIG_LIST
{
    ChunkHandle group;
    ConfigListType type;

    group = @call list::MSG_CONFIG_LIST_GET_GROUP_AND_TYPE(&type);

    UIConfigUpdateGroupByIndex(ConfigGetFlagsFromListType(type), group, item);
}

/**********************************************************************
 * MSG_AIM_ADD_PD_USER                                                *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_ADD_PD_USER
{
    char name[MAX_USER_NAME_SZ_LEN];
    GroupHandle group;
    optr list, text;
    Boolean found;
    ConfigListType type;

    list = @call trigger::MSG_GEN_TRIGGER_EX_GET_OPTR1();
    text = @call trigger::MSG_GEN_TRIGGER_EX_GET_OPTR2();
    group = @call list::MSG_CONFIG_LIST_GET_GROUP_AND_TYPE(&type);
    @call text::MSG_VIS_TEXT_GET_ALL_PTR(name);
    @call text::MSG_VIS_TEXT_DELETE_ALL();

    if (name[0] != '\0')
    {
        /* Search only the specified permit/deny group. */
        found = (ConfigFindBuddyInGroup(group, name) != INVALID_BUDDY);

        if (found)
        {
            /* Notify - permit/deny user already exists */
            if (type == CONFIG_LIST_TYPE_PERMIT)
                ErrorNotify(@PermitAlreadyExists);
            else
                ErrorNotify(@DenyAlreadyExists);
        }
        else
        {
            if (ConfigAddBuddyToGroup(group, name, type))
                /* Notify - cannot add any more users to this group */
                ErrorNotify(@NoMoreBuddies);
        }
    }
}

/**********************************************************************
 * MSG_AIM_REMOVE_PD_USER                                             *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_REMOVE_PD_USER
{
    ChunkHandle group;
    word idx;
    BuddyName name;
    optr list;
    ConfigListType type;

    list = @call trigger::MSG_GEN_TRIGGER_EX_GET_OPTR1();
    group = @call list::MSG_CONFIG_LIST_GET_GROUP_AND_TYPE(&type);
    idx = @call list::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    if (idx != GIGS_NONE)
    {
        if (ConfigGetBuddyByIndex(group, idx, name))
            ConfigRemoveBuddyFromGroup(group, name);
        else
            /* Internal error */
            ErrorInternal();
    }
}

/**********************************************************************
 * MSG_AIM_CONFIG_PDMODE                                              *
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_CONFIG_PDMODE
{
    if (selection != GIGS_NONE)
        ConfigSetPermitDenyMode((TocPermitDenyMode)selection);
}

optr UIConfigGetList(BuddyConfigFlags flags)
{
    optr retval = NullOptr;

    if (flags & BCF_PERMIT)
    {
        EC_ERROR_IF(flags & ~BCF_PERMIT, -1);
        retval = @PGList;
    }
    else if (flags & BCF_DENY)
    {
        EC_ERROR_IF(flags & ~BCF_DENY, -1);
        retval = @DGList;
    }
    else
        retval = @BCBuddyList;

    return retval;
}

void UIConfigUpdateBuddy(word groupidx, word buddyidx)
{
    GroupName groupname;
    GroupHandle group = ConfigGetGroupByIndex(groupidx, groupname);
    
    if (group != INVALID_GROUP)
    {
        if (buddyidx)
        {
            BuddyName name;

            if (ConfigGetBuddyByIndex(group, buddyidx - 1, name))
            {
                @call BCBuddyList::
                  MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_BITMAP_AND_TEXT(
                  groupidx, buddyidx, NullOptr, name, 0, 34, 0);
            }
        }
        else
        {
            optr bitmap;
            
            if (@call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_IS_LEVEL_OPENED(groupidx))
                /* Draw open folder bitmap */
                bitmap = @OpenedFolderMoniker;
            else
                /* Draw closed folder bitmap */
                bitmap = @ClosedFolderMoniker;

            @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_REPLACE_ITEM_BITMAP_AND_TEXT(
              groupidx, 0, bitmap, groupname, 0, 21, 0);
        }
    }
}

void UIConfigUpdateGroupByIndex(BuddyConfigFlags flags, GroupHandle group, word idx)
{
    if (flags & BCF_BUDDY)
    {
        UIConfigUpdateBuddy(ConfigGetGroupIndex(group), idx + 1);
    }
    else
    {
        BuddyName name;
        optr list = UIConfigGetList(flags);
        
        if (list != NullOptr)
        {
            if (ConfigGetBuddyByIndex(group, idx, name))
                @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(idx, name);
        }
    }
}

void UIConfigAddByIndex(BuddyConfigFlags flags, GroupHandle group, word idx)
{
    optr list = UIConfigGetList(flags);

    if (flags & BCF_BUDDY)
    {
        word groupidx = ConfigGetGroupIndex(group);

        if (groupidx != INVALID_GROUP_INDEX)
        {
            @call list::MSG_GEN_SIMPLE_TREE_LIST_ADD_LEVEL(groupidx, idx + 1, FALSE);
            @call list::MSG_GEN_SIMPLE_TREE_LIST_MAKE_ITEM_VISIBLE(groupidx, idx + 1);
        }
    }
    else if (list != NullOptr)
    {
        @call list::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(idx, 1);
        @call list::MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(idx);
    }
}

void UIConfigRemoveByIndex(BuddyConfigFlags flags, GroupHandle group, word idx)
{
    optr list = UIConfigGetList(flags);

    if (flags & BCF_BUDDY)
    {
        word groupidx = ConfigGetGroupIndex(group);

        if (groupidx != INVALID_GROUP_INDEX)
            @call list::MSG_GEN_SIMPLE_TREE_LIST_REMOVE_LEVEL(groupidx, idx + 1);
    }
    else if (list != NullOptr)
        @call list::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(idx, 1);
}

void UIConfigUpdatePermitDenyMode(TocPermitDenyMode mode)
{
    Message msg;
    
    @call PDMode::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(mode, FALSE);
    @call PDMode::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(FALSE);
    msg = (mode == TOC_PDMODE_PERMIT_SOME) ? MSG_GEN_SET_ENABLED
      : MSG_GEN_SET_NOT_ENABLED;
    @send PDPermitGroup::{MSG_GEN_SET_ENABLED} msg(VUM_DELAYED_VIA_UI_QUEUE);
    msg = (mode == TOC_PDMODE_DENY_SOME) ? MSG_GEN_SET_ENABLED
      : MSG_GEN_SET_NOT_ENABLED;
    @send PDDenyGroup::{MSG_GEN_SET_ENABLED} msg(VUM_DELAYED_VIA_UI_QUEUE);
}

void UIConfigInitialize(void)
{
    @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_INITIALIZE();
    @call PGList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
    @call DGList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
}

void UIConfigAddGroup(word groupidx)
{
    @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_ADD_LEVEL(groupidx, 0, TRUE);
    @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_MAKE_ITEM_VISIBLE(groupidx, 0);
    UIAddGroup(groupidx);
}

void UIConfigRemoveGroup(word groupidx)
{
    @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_REMOVE_LEVEL(groupidx, 0);
    UIRemoveGroup(groupidx);
}

/**********************************************************************
 * MSG_AIM_CONFIG_BUDDY_LIST_ACTION
 **********************************************************************/
@extern method AIMProcessClass, MSG_AIM_CONFIG_BUDDY_LIST_ACTION
{
    dword levels = @call BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_GET_SELECTION();

    if (GSTLGS_LEVEL_TWO(levels) == 0)
        /* Open or close the group in the tree list. */
        @send BCBuddyList::MSG_GEN_SIMPLE_TREE_LIST_TOGGLE_LEVEL(
          GSTLGS_LEVEL_ONE(levels));
}

