
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/***********************************************************************
 *
 *
 * PROJECT:	Breadbox NBase
 * FILE:		gpcbase.goh
 * AUTHOR:	John F. Howard,   11/98
 *
 * DESCRIPTION:
 *	This file has the global variables, contatnts,
 *      and structures for the GPCBase application.
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <gstring.h>
#include <Ansi/string.h>
@include <math.goh>
#include <token.h>	/* for assigning doc token */
#include <print.h>       /* These two for printing  */
@include <spool.goh>
@include <Objects/Text/tCtrlC.goh>  /* for controllers */
@include <Objects/vLTextC.goh>    /* VisLargeText definitions */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
@class	GPCBaseProcessClass, GenProcessClass;

    @message void MSG_OPEN_CHANGE_ATTR();
    @message (GEN_TRIGGER_ACTION) MSG_OPEN_NEW_RECORD;
    @message void MSG_CHANGE_ATTR();
    @message void MSG_DISPLAY_NAMES();
    @message void MSG_DISPLAY_FIELDS(word number);
    @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FIELDS_DLIST_MONIKER_QUERY;
    @message (GEN_VALUE_STATUS_MSG) MSG_CHANGE_NUM_FIELDS_SHOWING;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FIELD_TYPE_STATUS;

    @message void MSG_ENTER_DATA();
    @message void MSG_DELETE_DATA();

    @message void MSG_NAV_RECORDS(word whichWay);
    @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_RECORDS_DLIST_MONIKER_QUERY;
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RECORDS_DLIST_APPLY;

    @message void MSG_OPEN_IMPORT();
    @message void MSG_IMPORT_CSV();
    @message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_IMPORT_SELECTOR_ACTION;

    @message void MSG_OPEN_EXPORT();
    @message void MSG_EXPORT_CSV();

    @message void MSG_OPEN_FIND();
    @message void MSG_SEARCH_FIELDS(word whichSearch);
    @message void MSG_SEARCH_DONT_CONTINUE();
    @message (GEN_TEXT_STATUS_MSG) MSG_FIND_TEXT_STATUS;

    @message void MSG_OPEN_SORT();
    @message void MSG_SET_SORT_PARAMS();
    @message void MSG_CHANGE_VIEW_FIELD();
    @message void MSG_SORT_DATA();
  /*  @message void MSG_DEFAULT_SORT(); */
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_VIEW_SORT_STATUS;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FIRST_SORT_STATUS;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_SECOND_SORT_STATUS;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_THIRD_SORT_STATUS;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_SORT_ORDER_CHANGED;

    @message void MSG_OPEN_CREATE_REPORT_DB();
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_REPORT_SHOW_RECORDS_LIST_APPLY;
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_REPORT_SHOW_FIELDS_LIST_APPLY;
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_REPORT_SHOW_NUM_FIELDS_LIST_APPLY;
    @message (GEN_ITEM_GROUP_STATUS_MSG) MSG_SELECT_RECORDS_DLIST_STATUS;
    @message void MSG_SELECT_RECORDS_CLEAR_CHECKS();
    @message void MSG_CREATE_REPORT();
 //   @message void MSG_CLOSE_REPORT_WINDOW();
    @message void MSG_DO_SELECT_ALL();

    @endc

/* This class is for our documents */
@class	GPCBaseDocumentClass, GenDocumentClass;

@endc

/* This class handles import/export cancel */
@class	GPCBaseApplicationClass, GenApplicationClass;
    @message void MSG_CANCEL_IMPORT();
    @message void MSG_CANCEL_EXPORT();
@endc



/* This class sets up repeating triggers */
@class	RepeatingTriggerClass, GenTriggerClass;
	@instance TimerHandle RTI_timer = NullHandle;
	@instance word RTI_timerId = 0;
	@instance word RTI_wait = 8;
	@instance Boolean RTI_held = FALSE;

	@message void MSG_REPEATING_TRIGGER_CLICK();
@endc

/* This class handles changes in field name change dbox */
@class	GPCBaseFieldTextClass, GenTextClass;
@endc

/* This class handles changes in data display fields */
@class	GPCBaseDisplayTextClass, GenTextClass;
@endc

/* This class handles changes in find dbox */
@class	GPCBaseFindTextClass, GenTextClass;
@endc

/* This class handles changes in record entry dbox */
@class	GPCBaseEnterTextClass, GenTextClass;
@endc

/* This class handles cclosing the report window */
@class	GPCReportInteractionClass, GenInteractionClass;
@endc

/* This class handles intercption of Done in CUI */
@class	GPCBasePrimaryClass, GenPrimaryClass;
@endc

 /*
 ***************************************************************************
 *		Global variables and definitions
 ***************************************************************************
 */

#define DATA_LEN   250
#define FIELD_NAME_LEN   25
#define MAX_FIELDS	10
#define FIELD_SEP 166
#define FIELD_SEP_STRING "\xA6\000"

/* constants for ack dboxes */
typedef ByteEnum AckDB;
#define ACK_YES 1
#define ACK_NO 2

/* constants for navigating records */
typedef ByteEnum PrevNext;
#define FIRST 1
#define PREV 2
#define NEXT 3
#define LAST 4
#define NEW 5


/* constants for the ex/imports selectons lists */
typedef ByteFlags ImpExType;
#define E_FIELD 0x0001
#define I_FIELD 0x0001


#define SORTLIST 1

#define V_NONE 0

#define S_NONE 0
#define S_UP 1
#define S_DOWN 2
#define SO_ALFA 5
#define SO_NUM 6

/* field type constants */
#define T_GEN 1
#define T_NUM 2
#define T_DAT 3

/* report constants */
#define R_DATE 1
#define R_NAME 2
#define R_ALL 3
#define R_SELECTED 4
#define R_FIRST 5
#define R_NONE 6

/* check for changes errors */
#define CFC_EMPTY 1
#define CFC_DATE 2
#define CFC_NUM 3

extern FileHandle  GPCBFile;  /* handle to the file that's open. */
extern optr GPCBDoc;

extern word  numRecords;
extern word  numFields;
extern word  firstGroup;
extern word  lastGroup;
extern word  currentRecord;
extern Boolean isMod;
extern Boolean isImport;
extern Boolean canxImport;
extern Boolean canxExport;
extern Boolean checkMod;
extern Boolean closing;
extern Boolean g_done;
extern Boolean dataMayHaveChanged;

extern MemHandle   sortListHeapHandle;
extern VMBlockHandle  sortListVMBHandle;
extern ChunkHandle    sortListChunkArray;

/* globals for the Search Next functionality */
extern word SNChar;
extern word SNField;
extern word SNRecord;

/* globals for the Sort functionality */
extern word viewField;
extern word sortField;
extern word sortDir;
extern word sortField2;
extern word sortDir2;
extern word sortField3;
extern word sortDir3;

/* globals for the report functionality */
extern word numChecks;

/* Prototypes */
   void ShowData (void);

   void ClearData (void);

   void UpdateNumRecords (void);

   void UpdateCurRecord (void);

   void DeleteRecord (void);

   word AckDBox (char* string1, optr ackMsg);

   void NotifyDBox (char* string1, optr notifyMsg);

   Boolean DateCheck(char dateString[12]);

   void ConvFromDateNum (char* dateNum, char* dateString);

   word CheckForChanges(void);

   void GetGroupAndItem (DBGroup *groupGroup, DBItem *recordItem, word which);

   Boolean NumCheck(char numStr[DATA_LEN]);

/*
 ***************************************************************************
 *		Structure Definitions
 ***************************************************************************
 */

/* This is the structure of the DB mapblock  */
typedef struct {
    word	MS_numRecords;          /* the number of records */
    word	MS_firstGroup;
    word	MS_lastGroup;
} DBMapStruct;

/* This is the structure of the VM mapblock  */
typedef struct {
    word	VMS_numFields;           /* the number of fields */
    char		 VMS_fieldName[MAX_FIELDS][FIELD_NAME_LEN];
    word		 VMS_fieldType[MAX_FIELDS];     /* new for GPC */
    ChunkHandle	 VMS_sortChunkHan;
    word			VMS_viewField;
    word			VMS_sortField;
    word			VMS_sortField2;
    word			VMS_sortField3;
    word			VMS_sortDir;
    word			VMS_sortDir2;
    word			VMS_sortDir3;
    word	VMS_reserved;
} VMMapStruct;

/*
 * GroupStruct
 *
 * These structures contain pertinent information about a DB Group,
 * 37 groups - 1 for each letter & number and one for misc
 */

typedef struct {
    DBGroup     GS_group;               /* DB Group ID for this record */
    DBItem      GS_indexStart;		/* start of item handles */
    word	GS_numGroupRecs;	/* # of records in the group */
    word	GS_reserved;
} GroupStruct;

/*
 * RecordStruct
 *
 * These structures are stored as individual DB items. The char
 * string contains all ten records separated by xa6
 *
 */

typedef struct {
    char	  RS_data[(MAX_FIELDS * DATA_LEN)];
    word	  RS_reserved;
} RecordStruct;

/*
 * SortStruct
 *
 * These structures are stored in the sorted array
 *  and point to each record
 */
typedef struct {
    word		SS_group;
    word		SS_index;
    Boolean	SS_check;
} SortStruct;
