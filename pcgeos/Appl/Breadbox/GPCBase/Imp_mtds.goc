
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			imp_mtds.goc
 *  PROJECT:		Breadbox GPCBase
 *  DESCRIPTION:	This file has methods for importing .CSV
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "gpcbase.goh"
@include "externs.goh"


 Boolean isImport = FALSE;
 Boolean canxImport = FALSE;


/*
 ***************************************************************************
 *		Code for GPCBaseProcessClass   importing .CSV
 ***************************************************************************
 */

 /***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_IMPORT for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:	Calls the dialog box when the menu item
 *              	is clicked
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_OPEN_IMPORT
{


    /* check for changes in displayed data */
    if (CheckForChanges()) return;

    /* Open the dialog box */
    @call ImportDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_IMPORT_SELECTOR_ACTION for HBaseProcessClass
 *                 (word entryNum, word entryFlags)
 *
 *
 * DESCRIPTION:  checks for file selection (enables imp trigger)
 *
 *               and checks for dbl click
 *              
 *
 ***********************************************************************/

@extern method GPCBaseProcessClass, MSG_IMPORT_SELECTOR_ACTION
{

    /* need this to make Import button dim in CUI */
    if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_NO_ENTRIES) {
	  @send ImpStart::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  return;
	  }

    /* see if it was a double click */
    if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {
	  /* yup - on a file? */
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
		/* yup - send ourselves the import msg */
		@send, forceQueue process::MSG_IMPORT_CSV();
	  }
    else  {  /* if not dbl click see if we're on a file */
	  if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
		@send ImpStart::MSG_GEN_SET_ENABLED(VUM_NOW);
	  else
		@send ImpStart::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
       }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_IMPORT_CSV for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_IMPORT_CSV
{
 char		CSVName[FILE_LONGNAME_BUFFER_SIZE];
 char		CSVPath[PATH_BUFFER_SIZE];
 char		CSVfieldBuffer[DATA_LEN];
 char		charBuffer[1];
 char		statusMsg[25], numImpString[11];
 dword		CSVfileSize, i;
 FileHandle	CSVFileHandle;
 DiskHandle	CSVDiskhandle;
 word		fileCloseError, charRead, fieldSelect;
 word		numImpFields, fieldSize, impFieldNum, numImpRecs, startNumRecs;
 Boolean		quoteFlag = FALSE;
 Boolean		dblQuoteFlag = FALSE;
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 optr fieldOptr[MAX_FIELDS] = {
    @NewData1,
    @NewData2,
    @NewData3,
    @NewData4,
    @NewData5,
    @NewData6,
    @NewData7,
    @NewData8,
    @NewData9,
    @NewData10
} ;


    /* first get the file name of the selection */
    @call ImpFileSel::
		  MSG_GEN_FILE_SELECTOR_GET_SELECTION(CSVName);

    /* put up an are you sure box if not a new file */
    if (numRecords)  {
       if (AckDBox(CSVName, @ImportMsg) == ACK_NO) return;
       }

    /* see if user wants the first record as field names */
    fieldSelect =
	/*@call ImpFieldSel::MSG_GEN_ITEM_GROUP_GET_SELECTION();*/
	  @call ImpFieldSel::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();

    /* get the file's path and disk handle */
    @call ImpFileSel::MSG_GEN_PATH_GET(CSVPath, sizeof(CSVPath));
    CSVDiskhandle = @call ImpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

    /* save our GPCBase file directory */
    FilePushDir();

    /* and set the CSV file dir  - FileSel doesn't do this */
    FileSetCurrentPath(CSVDiskhandle, CSVPath);

    /* and open the CSV file */
    CSVFileHandle = FileOpen(CSVName, (FILE_ACCESS_R | FILE_DENY_W));
    /* if CSVFileHandle is NULL then there was an error */
    if (CSVFileHandle == NullHandle)  {
	  NotifyDBox(0, @ImpOpenErrMsg);
	  FilePopDir();
	  return;  /* bail out */
	  }

    /* dismiss the file selector box now */
    @send ImportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    canxImport = FALSE;

    /* Open the modal cancel dialog box */
    @call ImpStatusDBox::MSG_GEN_INTERACTION_INITIATE();

    /* OK let's read the file...
	* FileRead returns -1 if there was an error */
    /* first get the file size */
    CSVfileSize = FileSize(CSVFileHandle);
    /* init the number of fields */
    numImpFields = 0;
    numImpRecs = 0;

    /* first count the number of fields
     * this is also a good time to see if it
     * really is a .csv file by reading the first line*/
    for (i = 0; i < CSVfileSize; i++)  {
       charRead = FileRead(CSVFileHandle, charBuffer, 1, FALSE);
       if (charRead == 1)  {  /* good read */
	  /* check for CR/LF */
		if ((charBuffer[0] != '\r') && (charBuffer[0] != '\n'))  {
		   /* not CR/LF so ... */
		   /* inc field count if comma outside quotes */
		   if (charBuffer[0] == '"')  {
			 /* toggle quoteFlag */
			 if (quoteFlag) quoteFlag = FALSE;
			 else quoteFlag = TRUE;
			 }
		   if ((charBuffer[0] == ',') && (!quoteFlag)) numImpFields++;
		   }  /*  end of not CR/LF if */
            else if (charBuffer[0] == '\r')  {
             /* here's where we end the test line */
		   /* so exit loop here */
		   i = CSVfileSize;
		   }
		} /* end of good read if */
	    else  {
		/* read error */
		@send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		NotifyDBox(0, @ImpReadErrMsg);

          /* close the file */
          fileCloseError = FileClose(CSVFileHandle, FALSE);
		if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);
		/* and restore the GPCBase file stuff */
		FilePopDir();
          return;
		}  /* end of bad read else */
	  } /* end of count fields for */

    if (numImpFields == 0) {
       /* not a valid csv file */
	  @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  NotifyDBox(0, @ImpBadTypeErrMsg);
       /* close the file */
       fileCloseError = FileClose(CSVFileHandle, FALSE);
	  if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);
	  /* and restore the GPCbase file stuff */
	  FilePopDir();
       return;
       }   /* end of not valid CSV if */

    if (numImpFields >= MAX_FIELDS) {  /* count routine only counts ,s */
	  /* too many fields for GPCBase */
	  @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  NotifyDBox(0, @ImpTooManyErrMsg);
       /* close the file */
       fileCloseError = FileClose(CSVFileHandle, FALSE);
	  if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);
	  /* and restore the GPCbase file stuff */
	  FilePopDir();
       return;
       }   /* end of not valid CSV if */

    /* Everything is OK so let's start reading data */
    /* initialize things... */
    isImport = TRUE;
    fieldSize = 0;
    impFieldNum = 1;
    CSVfieldBuffer[0] = 0;
    numImpRecs = 0;
    startNumRecs = numRecords;
    /* including resetting read position
     * (we need to reread the first line) */
    FilePos(CSVFileHandle, 0, FILE_POS_START); 
    for (i = 0; i < CSVfileSize; i++)  {
	  charRead = FileRead(CSVFileHandle, charBuffer, 1, FALSE);
	  if (charRead == 1)  {  /* good read */
		/* add null to end of char buffer */
		charBuffer[1] = NULL;
		/* swap dash for tilde */
	  /*	if (charBuffer[0] == '~') charBuffer[0] = '-'; */
		/* toggle quoteFlag */
		if (charBuffer[0] == '"')  {
		   if (quoteFlag) quoteFlag = FALSE;
		   else quoteFlag = TRUE;
		   }
		/* check for end of field  */
		if (((charBuffer[0] == '\r')
			|| (charBuffer[0] == ','))
				&& (!quoteFlag)) {
		   /* it is end of field */
		   /* check to see if it has just one quote...
		    * a null field set off with quotes will have
		    * one left due to the double quote check stuff
		    */
		   if ((strlen(CSVfieldBuffer) == 1)
				&& (CSVfieldBuffer[0] == '"')) CSVfieldBuffer[0] = NULL;
		   /* copy the field info into the field window
		    * or make it the name of the appropriate field */
		   if ((fieldSelect != 0) && !numImpRecs)  {
			 /* make it the name of the appropriate field */
			 /* get our VMmap block */
			 vmbh = VMGetMapBlock(GPCBFile);
			 VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);
			 /* truncate field name if we need to */
			 if (strlen(CSVfieldBuffer) > (FIELD_NAME_LEN - 1))  {
			    CSVfieldBuffer[FIELD_NAME_LEN - 1] = NULL;
			    }
			 /* store the new field name */
			 strcpy(VMmapPtr->VMS_fieldName[impFieldNum-1], CSVfieldBuffer);
			 VMDirty(mh);
			 VMUnlock(mh);
			 } /* end of make field name if */
			else  {
			 /* copy the field info into the new field window */
			 @call fieldOptr[impFieldNum-1]::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						CSVfieldBuffer, 0);
			 }
		   impFieldNum++;
		   fieldSize = 0;
		   CSVfieldBuffer[0] = 0;  /* re-init the buffer */
		   /* and reset the double quote flag */
		   dblQuoteFlag = FALSE;

		   /* was it end of record? */
		   if ((charBuffer[0] == '\r') && (!quoteFlag))  {
			 if ((fieldSelect != 0) && !numImpRecs) {
			    /* show new field names */
			    @call process::MSG_DISPLAY_NAMES();
			    }
			   else  {
			    /* add to data base */
			    @call self::MSG_ENTER_DATA();
			    }
			 numImpRecs++;
			 if ((numImpRecs + startNumRecs) > 5000) canxImport = TRUE;

			 /* update the progress box */
			 MemLock (OptrToHandle(@ImpStatusText));
			 strcpy(statusMsg, LMemDeref(@ImpStatusText));
			 MemUnlock (OptrToHandle(@ImpStatusText));
			 UtilHex32ToAscii(numImpString,
					  (sdword) numImpRecs,
					  UHTAF_NULL_TERMINATE);
			 strcat(statusMsg, numImpString);
			 @call ImpStatGlyph::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
							  statusMsg, VUM_NOW);

			 /* see if user canx & exit loop */
			 if (canxImport)  {
			    /* bail out of loop */
			    i = CSVfileSize;
			    }
			 /* reset the field number */
			 impFieldNum = 1;
			 /* and reset the double quote flag */
			 dblQuoteFlag = FALSE;
			 }  /* end of end of record if */
		   }  /* end of end of field if */

		  /* returns and commas outside quotes already checked
		   * so pass all BUT newlines and first of double quotes
		   */
		 else  {   /* not end of field */
		   if (!dblQuoteFlag)  {  /* don't pass quote */
			 if (charBuffer[0] == '"') dblQuoteFlag = TRUE;
			 if ((charBuffer[0] != '\n')
				  && (charBuffer[0] != '"')) {
			    /* if field not full - add to string */
			    fieldSize++;
			    if (fieldSize <= DATA_LEN - 1)
				  strcat(CSVfieldBuffer, charBuffer);
			    }
			 }
			else   {  /* pass quote */
			 dblQuoteFlag = FALSE;
			 if (charBuffer[0] != '\n') {
			    /* if field not full - add to string */
			    fieldSize++;
			    if (fieldSize <= DATA_LEN - 1)
				  strcat(CSVfieldBuffer, charBuffer);
			    }
			 }
		   }  /* end of pass chars else */

		} /* end of good read if */
	    else  {
		/* read error */
		@send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		NotifyDBox(0, @ImpReadErrMsg);

		/* close the file */
		fileCloseError = FileClose(CSVFileHandle, FALSE);
		if (fileCloseError)   NotifyDBox(0, @ImpCloseErrMsg);
		/* and restore the HBase file stuff */
		isImport = FALSE;
		FilePopDir();
		return;
		}  /* end of bad read else */

	  } /* end of read data for */

    /* All done so close the file */
    fileCloseError = FileClose(CSVFileHandle, FALSE);
    @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
    if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);

    /* and restore the GPCbase file stuff */
    FilePopDir();

    /* initialize the list - since we didn't add during import */
    @call RecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);
    /* and update the number of records display */
    UpdateNumRecords();

    /* show the first file */
    checkMod = FALSE;
  /*  @call process::MSG_NAV_RECORDS(FIRST); */
    currentRecord = 0;
    @call process::MSG_SORT_DATA();

    isImport = FALSE;  
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CANCEL_IMPORT for GPCBaseApplicationClass
 *              
 *
 * DESCRIPTION:	sets the global canxImport flag
 *              
 *              
 *
 ***********************************************************************/
@extern method GPCBaseApplicationClass, MSG_CANCEL_IMPORT
{

    canxImport = TRUE;

}



