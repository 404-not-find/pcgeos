/****************************************************************
DosExec by FuzzyLogic TM 1/14/1995, 1/23/1995, 2/5/1995, 2/10/1995 
Copyright 1995 Clemens Kochinke -- All Rights Reserved
An Attempt at DosExec (that finally works)
Many thanks to CamiLee for his valuable help and special thanks
to a master programmer who unlocked the secret and wishes to 
remain unknown.
===================
GEOS developers may consider this a sample app and use it like
the sample SDK code.
===================
My comments are as wordy as I would needed them when I started 
from ground zero. This may annoy experienced programmers but help
users who are unfamiliar with the GEOS SDK but consider using it. 
That would include people like myself who started out not knowing C.
===================
Files not included: The GP and icon files.
****************************************************************/


/*==========The Include Files=======*/
                        /* When the code gets compiled, the system
                           automatically pulls information from
                           these files into the application. */
@include <stdapp.goh>   /* This one is standard. */
#include <gstring.h>    /* My beta minimize icon requires it */
#include <system.h>     /* Perhaps not all of the next four */
#include <file.h>       /* includes are needed. */
#include <disk.h>
#include <drive.h>

/*====Burdening a Class with Special Duties====*/
                        /* The ProcessClass should do most of the
                           work. It has to be declared and may be
                           given jobs to do by way of @message.
                           Without @message, it would be able to
                           do only what it's been told by the SDK
                           developers at Geoworks. This way, I make
                           it perform also the tasks I need. */
@class DosExecProcClass GenProcessClass;
                        /* The @message names are invented by each
                           developer and usually convey an idea of
                           the desired task. */
@message void MSG_EXEC_EDIT_IN_GEOS();
@message void MSG_LHARCEXECINDZIP();
@message void MSG_FAXEXECINDOS();
@endc;
@classdecl DosExecProcClass, neverSaved ;

                        /* The following definitions relate to the
                           "Picture" icon ("moniker") for the
                           DosExecApp that follows. */ 
#define MONIKER_WIDTH 20
#define MONIKER_HEIGHT 200

@start AppResource;    /* The first resource starts here. Resources
                          break up the code for memory utilization
                          purposes. See an @end line later on, then
                          another @start line for the second
                          resource. 
                          I won't comment on the items in this 
                          resource, all standard fare except for
                          the "Picture" icon. */
@object GenApplicationClass DosExecApp = {
  GI_visMoniker = list { @Word, @Picture };
  GI_comp = @DosExecPrimary;
  gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @DosExecPrimary;
  HINT_APP_IS_PRODUCTIVITY_ORIENTED;
}

@visMoniker Word = "FuzzyLogic DosExec";

@visMoniker Picture = {
    color = gray1;
    aspectRatio = normal;
    gstring {
        GSSetAreaColorIndex(C_LIGHT_RED),
        GSFillRect(0,0, MONIKER_WIDTH,MONIKER_HEIGHT),
        GSSetAreaColorIndex(C_YELLOW),
        GSFillRect(2,2, MONIKER_WIDTH-3,MONIKER_HEIGHT-3),
        GSEndString()
            }
}
@end AppResource;

@start Interface;
                                  /* The primary window of the 
                                     application. It's a container
                                     for all the other features. */
@object GenPrimaryClass DosExecPrimary = {
   GI_comp =  @Box1, @Box2, @Box3,/* GI_comp means that the other*/
              @Note;              /* items are contained in the main window:
                                     Three buttons  with text, grouped in 
                                     boxes and a text line. The remaining 
                                     lines are not required, are a matter of
                                     personal preference. */
   HINT_PRIMARY_NO_FILE_MENU;
   HINT_ORIENT_CHILDREN_VERTICALLY;
   HINT_CENTER_CHILDREN_HORIZONTALLY;
   HINT_NO_TALLER_THAN_CHILDREN_REQUIRE;
   HINT_NO_WIDER_THAN_CHILDREN_REQUIRE;
/*   HINT_MINIMIZE_CHILD_SPACING; */
}
/*===========The top button=========
                                     The Interaction object acts as 
                                     a container for the trigger
                                     button and the text below.*/
@object GenInteractionClass Box1 ={
   GI_comp=@Trig1, @Text1;
                                  /* The remaining lines are not
                                      required, are a matter of
                                      personal preference. */
   HINT_ORIENT_CHILDREN_VERTICALLY;  
   HINT_CENTER_CHILDREN_HORIZONTALLY; 
   HINT_DRAW_IN_BOX;
}
@object GenTriggerClass Trig1 = {
	GI_visMoniker = "Trig 1"; /*list {@DosExecIcon}; /* Icon code in *.GOH file.
                                       Instead of using an icon, I
                                       could have used text and
                                       avoided a Glyph containing
                                       information for the user,
                                       but using an icon allows me
                                       to graphically convey info
                                       about the purpose of the
                                       button. */
    GTI_destination = process;      /* Sends trigger command to
                                       DosExecProcClass object
                                       defined at top of file. 
                                       That object knows what to
                                       with the trigger action,
                                       using the info in the MSG
                                       that follows.  */
    GTI_actionMsg = MSG_EXEC_EDIT_IN_GEOS;
}
@object GenGlyphClass Text1 = {     /* This is the text under trigger button.*/
GI_visMoniker = "GEOS\\Edit.Com GEOS.Ono";   /* It informs the user that
                                       clicking the button will launch the
                                       EDIT program and open the GEOS.INI 
                                       file, both located in GEOS.*/
}
/*=========The middle button=========
                                        The comments from the top
                                        button apply here, too. */
@object GenInteractionClass Box2 ={
   GI_comp=@Trig2, @Text2;
   HINT_ORIENT_CHILDREN_VERTICALLY;
   HINT_CENTER_CHILDREN_HORIZONTALLY; 
   HINT_DRAW_IN_BOX;
}
@object GenTriggerClass Trig2 = {
	 GI_visMoniker = "Trig2"; /*list { @DosExecIcon }; */
    GTI_destination = process;
	 GTI_actionMsg = MSG_LHARCEXECINDZIP; /* The DOS program is LHarc.Exe */
} /*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&/* in the D:\ZIP directory.*/
@object GenGlyphClass Text2 = {
GI_visMoniker = "D:\\Zip\\LHarc.Exe";   /* No too many capitals letter, please,
                                           or the center hint may go haywire.*/
}
/*=========The bottom button=========
                                        The comments from the top
                                        button apply here, too. */
@object GenInteractionClass Box3 ={
  @GI_comp=@Trig3, @Text3;
   HINT_ORIENT_CHILDREN_VERTICALLY;
   HINT_CENTER_CHILDREN_HORIZONTALLY;
   HINT_DRAW_IN_BOX;
}

@object GenTriggerClass Trig3 = {
	 GI_visMoniker = "Trig3"; /*list { @DosExecIcon }; */
    GTI_destination = process;
    GTI_actionMsg = MSG_FAXEXECINDOS;
}
@object GenGlyphClass Text3 = {
GI_visMoniker = "C:\\Dos\\Fax.Bat";    /* The DOS program is the Fax batch */
}                                      /* file in the C:\DOS directory. */

@object GenGlyphClass Note = {
GI_visMoniker = "This is a sample for running DOS applications.";
HINT_DRAW_IN_BOX;
}

/*=========End of Resource Interface===========
                         If a compile would have shown that the
                         three boxes would have used too many 
                         resources, I would have ended the
                         Interface section sooner and would have
                         started another section to break up the
                         code. (Example: @start Interface2 ;). As
                         it is, I'm way below the 4000 to 6000
                         threshhold for good resource management.*/ 
 
@end Interface ;

/***************Start Methods********************
                         The actions required to be performed when
                         a button is pushed have been associated
                         with DosExecProcClass, at the top of the
                         file. They have been stated in the 
                         definition of the triggers. Now come the 
                         actual instructions that the DosExecProc
                         object will follow when the user pushes a
                         button.  */
@method DosExecProcClass, MSG_EXEC_EDIT_IN_GEOS
{
DosExec(
       "EDIT.COM",       /* The file edit.com should be in the path */    
        0,               /* that's stated below; so should be the   */
        "GEOS.ONO",      /* file that edit is to open: geos.ono.    */
        NULL,
                           /* FileSetCurrentPath requires file.h;
                              disk (2) is the C: drive;
                              "/./" is the GEOS directory. */
        FileSetCurrentPath(DiskRegisterDiskSilently(2),"/./"), 
        DEF_PROMPT
        );
}
/**************/
@method DosExecProcClass, MSG_LHARCEXECINDZIP
{
char nullstring[2]={0};

DosExec(
        "LHARC.EXE",
        0,
        nullstring,
        NULL, 
        FileSetCurrentPath(DiskRegisterDiskSilently(3),"//ZIP"),
        DEF_PROMPT
        );
}
/**************/
@method DosExecProcClass, MSG_FAXEXECINDOS
{
char nullstring[2]={0};

DosExec(
        "FAX.BAT",              /* I trust that a file called fax.bat
                                   is in C:\DOS.                      */
        0,
        nullstring,
        NULL,
        FileSetCurrentPath(DiskRegisterDiskSilently(2),"//DOS"), 
        DEF_PROMPT 
        );
}

/*========BACKGROUND INFORMATION========

The DosExec routine is as follows: 

DosExec(
const char         *prog,
DiskHandle         progDisk, 
const char         *arguments,
const char         *execDir,  
DiskHandle         execDisk,  
DosExecFlags       flags) 
*/ 
