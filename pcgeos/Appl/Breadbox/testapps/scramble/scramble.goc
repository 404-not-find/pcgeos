/***********************************************************************
 *
 *
 * PROJECT:	Test Applications
 * MODULE:	Scrambler
 * FILE:		scramble.goc
 * AUTHOR:	jfh  6/02
 *
 * DESCRIPTION:
 *
 *              add a button to change the title bar name
 *
 *
 *
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <ansi/string.h>
#include <ansi/stdlib.h>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	TestProcessClass, GenProcessClass ;
	@message void MSG_TEST_SCRAMBLE();
	@message void MSG_TEST_CHANGE_TITLE();
@endc

@classdecl	TestProcessClass, neverSaved ;

#define MAX_PASSWORD_LEN        16

word g_titleNumber = 0;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass TestApp = {
	 GI_visMoniker = list { @TestTextMoniker }
    GI_comp = @TestPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @TestPrimary;
}

@visMoniker TestTextMoniker = "Scrambler";

@end	AppResource

@start	Interface;

@object GenPrimaryClass TestPrimary  = {
	 GI_comp = @EntryWindow, @ScrambledWindow, @UnscrambledWindow,
				  @TitleButton;
    HINT_SIZE_WINDOW_AS_DESIRED;
}
@chunk char Title0[] = "Scrambler" ;
@chunk char Title1[] = "Title1" ;
@chunk char Title2[] = "Title2" ;

@object GenTextClass EntryWindow = {
	 GI_visMoniker = "Enter Password:";
	 GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 GTXI_maxLength = MAX_PASSWORD_LEN - 1;
	 GTXI_destination = process;
	 GTXI_applyMsg = MSG_TEST_SCRAMBLE;
	 HINT_PLACE_MONIKER_ABOVE;
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenTextClass ScrambledWindow = {
	 GI_visMoniker = "Scrambled:";
	 GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 HINT_PLACE_MONIKER_ABOVE;
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	 HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
	 HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenTextClass UnscrambledWindow = {
	 GI_visMoniker = "Unscrambled:";
	 GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	 HINT_PLACE_MONIKER_ABOVE;
	 HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	 HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
	 HINT_TEXT_WHITE_WASH_COLOR;
}

@object GenTriggerClass TitleButton = {
	GI_visMoniker = "Title";
	GTI_actionMsg = MSG_TEST_CHANGE_TITLE;
	GTI_destination = process;
}

@end Interface

/*
 ***************************************************************************
 *		Code for TestProcessClass
 ***************************************************************************
 */

 /***********************************************************************
 *
 * FUNCTION:	ScramblePword
 *
 * PARAMATERS: char *plain, char *scrambled
 *
 * CALLED BY:  SaveLoginRemember
 *
 * STRATEGY:   do some simple scrambling
 *              - convert the letters to ASCII numbers
 *              - then and the numbers for 'breadbox'
 *              - return as a string
 ***********************************************************************/
void ScramblePword(char *plain, char *scrambled)
{
 byte		bbox[MAX_PASSWORD_LEN] = {2,18,5,1,4,2,15,24,2,18,5,1,4,2,15,24};
 byte		i, code;
 char		codeChar[4], codeCharZ[4];


	scrambled[0] = 0;
	for (i = 0; i < strlen(plain); i++) {
		code = (byte)plain[i];
      code += bbox[i];
		itoa(code, codeChar);
		/* add leading zeros */
		if (strlen(codeChar) == 1)  strcpy(codeCharZ, "00");
		else if (strlen(codeChar) == 2)  strcpy(codeCharZ, "0");
		else strcpy(codeCharZ, "");
		strcat(codeCharZ, codeChar);
		/* and fill in the return string */
		strcat(scrambled, codeCharZ);
		}

}

 /***********************************************************************
 *
 * FUNCTION:	UnscramblePword
 *
 * PARAMATERS: char *scrambled, char *plain
 *
 * CALLED BY:  CheckLoginRemember
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
void UnscramblePword(char *scrambled, char *plain)
{
 byte		bbox[MAX_PASSWORD_LEN] = {2,18,5,1,4,2,15,24,2,18,5,1,4,2,15,24};
 byte		i, code;
 char		codeChar[4], pwChar[2];


	plain[0] = 0;
	for (i = 0; i < strlen(scrambled); i+=3) {
		strncpy(codeChar, &scrambled[i], 3);
      codeChar[3] = 0;
		code = atoi(codeChar);
		code -= bbox[i/3];
		pwChar[0] = (char)code;
      pwChar[1] = 0;
      strcat(plain, pwChar);
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TEST_SCRAMBLE for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_SCRAMBLE
{
 char		pword[MAX_PASSWORD_LEN], scrambled[MAX_PASSWORD_LEN * 3],
			unscrambled[MAX_PASSWORD_LEN * 3];


	if (@call EntryWindow::MSG_VIS_TEXT_GET_ALL_PTR(pword)) {
		ScramblePword(&pword, &scrambled);
		@call ScrambledWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(scrambled, 0);
		UnscramblePword(&scrambled, &unscrambled);
		@call UnscrambledWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(unscrambled, 0);
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TEST_CHANGE_TITLE for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_CHANGE_TITLE
{
char		title1[] = "Title1";
char		title2[] = "Title2";
char		title0[] = "";


	if (!g_titleNumber) {
		@send TestPrimary::MSG_GEN_PRIMARY_REPLACE_LONG_TERM_MONIKER(
			VUM_NOW, 0, 0, 0, VMDT_TEXT, VMST_FPTR, (dword)title1);
		g_titleNumber = 1;
		}
	else if (g_titleNumber == 1) {
		@send TestPrimary::MSG_GEN_PRIMARY_REPLACE_LONG_TERM_MONIKER(
			VUM_NOW, 0, 0, 0, VMDT_TEXT, VMST_FPTR, (dword)title2);
		g_titleNumber = 2;
		}
	else {
		@send TestPrimary::MSG_GEN_PRIMARY_REPLACE_LONG_TERM_MONIKER(
			VUM_NOW, 0, 0, 0, VMDT_TEXT, VMST_FPTR, (dword)title0);
		g_titleNumber = 0;
		}

}

