/***********************************************************************
 *
 *
 * PROJECT:	Test Applications
 * MODULE:	Insulin Dose Calculator
 * FILE:		hgen.goc
 * AUTHOR:	jfh  5/04
 *
 * DESCRIPTION:
 *
 *              generate a test history file for glucose averages
 *
 *
 *
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <ansi/string.h>
#include <ansi/stdlib.h>

/*
 ***************************************************************************
 *		Structures
 ***************************************************************************
 */
#define	FIELD_LEN 10
#define	RECORDS 1

#define  BREAKFAST 1
#define  MORNING 2
#define  LUNCH 3
#define  AFTERNOON 4
#define  DINNER 5
#define  EVENING 6

/* This is the structure of the dose log VM mapblock  */
typedef struct {
	 word				RMS_numRecs;	/* the number of records */
	 ChunkHandle	RMS_recsChunkHan;
} RecsMapStruct;

/* a structure for dose records to be saved in the array */
typedef struct {
	 TimerDateAndTime	RS_dateTime;
	 char					RS_glucose[FIELD_LEN];
	 char					RS_carbs[FIELD_LEN];
	 char					RS_dose[FIELD_LEN];
    word					RS_meal;
} RecsStruct;

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	TestProcessClass, GenProcessClass ;
	@message void MSG_TEST_GENERATE();
@endc

@classdecl	TestProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass TestApp = {
	GI_visMoniker = list { @TestTextMoniker }
	GI_comp = @TestPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @TestPrimary;
}

@visMoniker TestTextMoniker = "History Generator";

@end	AppResource

@start	Interface;

@object GenPrimaryClass TestPrimary  = {
	GI_comp = @FileSelGroup, @ButtonGroup, @GenProgDB;
	HINT_CENTER_CHILDREN_HORIZONTALLY;
	HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenInteractionClass FileSelGroup = {
	GI_comp = @SourceFileSelGroup;
}

@object GenInteractionClass SourceFileSelGroup = {
	GI_visMoniker = "Source File";
	GI_comp = @SourceFileSel;
	HINT_DRAW_IN_BOX;
	HINT_PLACE_MONIKER_ABOVE;
	HINT_CENTER_MONIKER;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object GenFileSelectorClass SourceFileSel = {
/* testing for JM */
/*	GFSI_fileCriteria = FSFC_MASK_CASE_INSENSITIVE |
					 FSFC_DIRS |
					 FSFC_NON_GEOS_FILES;*/
	ATTR_GEN_PATH_DATA = {SP_DOCUMENT, "."};
//	HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 8;
//	HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object GenInteractionClass ButtonGroup = {
	GI_comp = @ParseButton;
}

@object GenTriggerClass ParseButton = {
	 GI_visMoniker = "Generate File";
	 GTI_destination = process;
	 GTI_actionMsg = MSG_TEST_GENERATE;
}

/* ---------------------------------------- */
@object GenInteractionClass GenProgDB = {
	GI_visMoniker = "Hist Gen Status";
	GI_comp = @PPCount;
	GII_visibility = GIV_DIALOG;
	GII_type = GIT_NOTIFICATION;
	GII_attrs = @default | GIA_NOT_USER_INITIATABLE;
}

@object GenTextClass PPCount = {
    GI_visMoniker = "Lines parsed:";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    GTXI_text = "0";
	 HINT_MAXIMUM_SIZE = {SST_AVG_CHAR_WIDTHS | 14, 0, 0};
    HINT_TEXT_NO_FRAME;
}

@end Interface

/*
 ***************************************************************************
 *		Code for TestProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE:	MSG_TEST_GENERATE for TestProcessClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TestProcessClass, MSG_TEST_GENERATE
{
 dword		selFlags, i, sFileSize;
 char			sName[FILE_LONGNAME_BUFFER_SIZE];
 char			sPath[PATH_BUFFER_SIZE];
 FileHandle	sfh;
 DiskHandle	sdh;
 VMFileHandle	vmfh;
 VMBlockHandle	vmbh, mapbh;
 MemHandle		mh, cmh;
 ChunkHandle	ch;
 RecsMapStruct		*recsMapPtr;
 RecsStruct			*recsPtr;
 TimerDateAndTime	date, time;
 char			charBuf[2], sLineBuf[20], countBuf[13];
 word			charRead, numLines, lineLen, field, meal;


	/*
	 * open the source file
	 */
	selFlags = @call SourceFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(sName);
	/* check to see if it's a file */
	if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
		return;
		}

	/* get the file's path and disk handle */
	@call SourceFileSel::MSG_GEN_PATH_GET(sPath, sizeof(sPath));
	sdh = @call SourceFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
	FileSetCurrentPath(sdh, sPath);

	/* and open the source file */
	sfh = FileOpen(sName, (FILE_ACCESS_R | FILE_DENY_W));
	if (!sfh)  {
		return;
		}

	/*
	 * create the dest file
	 */
	FileSetStandardPath(SP_DOCUMENT);
	vmfh = VMOpen("idrecs",
					 VMAF_FORCE_READ_WRITE,
					 VMO_CREATE,
					 0);
	if (!vmfh)  {
      FileClose(sfh, FALSE);
		return;
		}

	/* the data file was just created so we need to create the
		chunk array and map block */
	vmbh = VMAlloc(vmfh, 2048, RECORDS);
	/* create a mem block to attach to it */
	mh = MemAlloc(2048, HF_SWAPABLE, HAF_LOCK);
	LMemInitHeap(mh, LMEM_TYPE_GENERAL, 0,
				 sizeof(LMemBlockHeader), STD_INIT_HANDLES, STD_INIT_HEAP);
	/* create the chunk array  */
	ch = ChunkArrayCreate(mh, sizeof(RecsStruct), 0, 0);
	MemUnlock(mh);
	/* and attach the block to the VM - */
	VMAttach(vmfh, vmbh, mh);

	mapbh = VMAlloc(vmfh, sizeof(RecsMapStruct), 0);
	VMSetMapBlock(vmfh, mapbh);
	recsMapPtr = VMLock(vmfh, mapbh, &mh);
	recsMapPtr->RMS_numRecs = 0;
	recsMapPtr->RMS_recsChunkHan = ch;

	vmbh = VMFind(vmfh, NullHandle, RECORDS);
	VMLock(vmfh, vmbh ,&cmh);

	/* init some things */
	@send TestApp::MSG_GEN_APPLICATION_MARK_BUSY();
	@call GenProgDB::MSG_GEN_INTERACTION_INITIATE();
	numLines = 0;
	lineLen = 0;
	sFileSize = FileSize(sfh);
	sLineBuf[0] = 0;
	field = 0;

	/* everything's ready - copy the text file into the data file */
	for (i = 0; i < sFileSize; i++)  {
		/* read in a line from the source */
		charRead = FileRead(sfh, charBuf, 1, FALSE);
		if (charRead == 1)  {  /* good read */
			/* add null to end of char buffer */
			charBuf[1] = NULL;
			/* check for CR/LF */
			if ((charBuf[0] != '\r') && (charBuf[0] != '\n'))  {
				/* not CR/LF so check for tab (date & time) */
				if (charBuf[0] == '\t') {
					sLineBuf[lineLen] = 0;
					switch (field) {
						case 0:  // date
							LocalParseDateTime(sLineBuf, DTF_SHORT, &date);
							break;
						case 1:  // time
							LocalParseDateTime(sLineBuf, DTF_HM_24HOUR, &time);
							date.TDAT_hours = time.TDAT_hours;
							date.TDAT_minutes = time.TDAT_minutes;
							recsPtr = ChunkArrayAppendHandles(cmh, ch, 0);
							recsPtr->RS_dateTime = date;
							break;
						}
					field++;
					sLineBuf[0] = 0;
					lineLen = 0;
					}
				else {
					strcat(sLineBuf, charBuf);
					lineLen++;
					}
				}
			else if (charBuf[0] == '\r')  {
				/* do the glucose and the rest */
				sLineBuf[lineLen] = 0;
				strcpy(recsPtr->RS_glucose, sLineBuf);
				strcpy(recsPtr->RS_carbs, "12");
				strcpy(recsPtr->RS_dose, "3.4");
				/* and the meal ... */
				if (date.TDAT_hours > 18) meal = EVENING;
				else if (date.TDAT_hours > 16)  meal = DINNER;
				else if (date.TDAT_hours > 13)  meal = AFTERNOON;
				else if (date.TDAT_hours > 10)  meal = LUNCH;
				else if (date.TDAT_hours > 8)  meal = MORNING;
				else  meal = BREAKFAST;
				recsPtr->RS_meal = meal;

				/* clean up & inform user */
				field = 0;;
				sLineBuf[0] = 0;
				lineLen = 0;
				numLines++;
				UtilHex32ToAscii(countBuf, (dword) numLines, UHTAF_NULL_TERMINATE);
				@call PPCount::MSG_VIS_TEXT_REPLACE_ALL_PTR(countBuf, 0);
				}  /* end of end of line else */
			} /* end of good read if */
		else  {
			/* read error - bail out */
			FileClose(sfh, FALSE);
			VMClose(vmfh, FALSE);
			@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			return;
			}  /* end of bad read else */

		} /* end of source reading for */

	/* update the map */
	recsMapPtr->RMS_numRecs = numLines;
	VMDirty(mh);
	VMUnlock(mh);
	/* close the chunk */
	VMDirty(cmh);
	VMUnlock(cmh);

	/* close the files */
	FileClose(sfh, FALSE);
	VMSave(vmfh);
	VMClose(vmfh, 0);

	/* and we're done */
	@send TestApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();


}



