@include <StdApp.goh>
@include <socket.goh>
#include <sockmisc.h>
@include "NewsRead.goh"
@include "NewsData.goh"
@include "Extern.goh"
@include "Localize/Strings.goh"
@include <ExtUI/tree.goh>

#include "Ansi/string.h"
#include "Ansi/stdio.h"
#include "Ansi/stdlib.h"

#include "News.h"

@start ArticleTreeMonikerResource, data ;

@include "Art/NR007-8.goh" 
@include "Art/NR008-8.goh" 
@include "Art/NR009-8.goh" 

@end ArticleTreeMonikerResource ;


extern word G_groupListSelection ;


/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_DRAW_FIELD {

    ExtUITreeCacheElement lineData ;
    word count ;
    Rectangle bounds ;
	word column ;
	Boolean final ;
	 TCHAR textBuffer[MAX_GROUP_NAME_SIZE + 5] ;
    ArticleEntry *p_article ;
    char *p_subject ;
    TimerDateAndTime dateTime ;
	optr moniker;

    /* get this lines current state information */
    @call list::MSG_EXTUI_TREE_GET_LINE_ATTRS(item, &lineData) ;

    NewsDataSelectGroup(G_groupListSelection) ;

    /* get attached content information */
    if(lineData.EUITCE_parent != 0xFFFFFFFF) {

        NewsDataGroupSelectThread(lineData.EUITCE_parent - 1) ;
        NewsDataThreadSelectArticle(lineData.EUITCE_index + 1) ;
        p_article = NewsDataArticleLock(lineData.EUITCE_index + 1) ;
        count = 0 ;

    } else {

        NewsDataGroupSelectThread(lineData.EUITCE_index) ;
        NewsDataThreadSelectArticle(0) ;
        count = NewsDataThreadCountArticles() - 1 ;
        p_article = NewsDataArticleLock(0) ;
    }

	@call list::MSG_EXTUI_TREE_INIT_LINE(item, count) ;

    if(p_article) {

        column = 0 ;
	    while(column != 3) { 

	        @call list::MSG_EXTUI_TABLE_GET_FIELD_BOUNDS(item, column, 1, &bounds) ;
	    
		    final = (column == 2) ;
	    
		    switch(column) {

			    case 0:
                    p_subject = NewsDataLockArticleHeaderLine(p_article, "Subject: ") ;
                    if (p_subject)  {
								/* let's try truncating any long subject lines and see
								 * if that stops the crash - jfh it does!!!*/
								if (strlen(p_subject) > MAX_GROUP_NAME_SIZE) {
									p_subject[MAX_GROUP_NAME_SIZE] = 0;
									}

                        strcpy((TCHAR*)textBuffer, (TCHAR*)p_subject + 9);

                        NewsDataUnlockHeaderLine(p_subject) ;  /* crash here - jfh */

                    } else {

                        MemLock(OptrToHandle(@ArticleMissingLine)) ;
                        strcpy((TCHAR*) textBuffer,
                                  (TCHAR*)LMemDeref(@ArticleNoSubjectLine));
                        MemUnlock(OptrToHandle(@ArticleMissingLine)) ;
                    }

					/* If item is a thread (level 0):
					 *    If thread is collapsed, and has unread articles,
					 *    show the UnreadThreadMoniker.
					 *
					 *    If thread is expanded, and first article is unread,
					 *    show the UnreadArticleMoniker.
					 *
					 * If item is an article (level 1) and is unread,
					 * show the UnreadArticleMoniker.
					 *
					 * All other cases, show the ReadArticleMoniker.
					 */
					moniker = @ReadArticleMoniker;
					if (count && (@call list::MSG_EXTUI_TREE_COUNT_SUB_ITEMS(item)) == 0)
					{
						if (G_thread->TE_unread)
							moniker = @UnreadThreadMoniker;
					}
					else
					{
						if (!(p_article->AE_flags & AEF_READ))
							moniker = @UnreadArticleMoniker;
					}

                    @call list::MSG_EXTUI_TABLE_DRAW_FIELD_BITMAP_TEXT(
						    list, item, column, &bounds, 
							moniker,
                            textBuffer,
						    final, 0) ;
                    break ;

			    case 1:
                    p_subject = NewsDataLockArticleHeaderLine(p_article, "From: ") ;
                    if (p_subject)  {

                        ParseSenderName(p_subject + 6, textBuffer);

                        NewsDataUnlockHeaderLine(p_subject) ;

                    } else {
            
                        textBuffer[0] = 0 ;
                    }

                    @call list::MSG_EXTUI_TABLE_DRAW_FIELD_TEXT(
						    list, item, column, &bounds, 
						    textBuffer,
						    final, 0) ;
				    break ;

			    case 2:
                    {
                        TCHAR buffer[20] ;

						buffer[0] = 0;
						if ((p_subject = NewsDataLockArticleHeaderLine(p_article, "Date: ")) != NULL)
						{
							ParseDateField(p_subject + 6, &dateTime);
							buffer[0] = dateTime.TDAT_month / 10 + '0' ;
							buffer[1] = dateTime.TDAT_month % 10 + '0' ;
							buffer[2] = '/' ;
							buffer[3] = dateTime.TDAT_day / 10 + '0' ;
							buffer[4] = dateTime.TDAT_day % 10 + '0' ;
							buffer[5] = 0 ;
						}

//                        LocalFormatDateTime(buffer, DTF_MD_SHORT, &dateTime) ;

                        if(p_subject)
                            NewsDataUnlockHeaderLine(p_subject) ;

                        @call list::MSG_EXTUI_TABLE_DRAW_FIELD_TEXT(
						        list, item, column, &bounds, 
						        buffer,
						        final, 0) ;
                    }
				    break ;
		    }

		    column++ ;
	    }

        NewsDataArticleUnlock(p_article) ;
    
    } else {

        @call list::MSG_EXTUI_TABLE_GET_FIELD_BOUNDS(item, 0, 1, &bounds) ;

        @call list::MSG_EXTUI_TABLE_DRAW_FIELD_TEXT(
					list, item, 0, &bounds, 
                    "<message not found>",
					TRUE, 0) ;
    
    }
    
    NewsDataThreadUnselectArticle() ;
    NewsDataGroupUnselectThread() ;
    NewsDataUnselectGroup() ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_INFO_FIELD {

    ExtUITreeCacheElement lineData ;
    word count ;

    /* get this lines current state information */
    @call list::MSG_EXTUI_TREE_GET_LINE_ATTRS(identifier, &lineData) ;

    /* get attached content information */
    if(lineData.EUITCE_parent != 0xFFFFFFFF) {

	    @call list::MSG_EXTUI_TREE_SET_NODE_LINE(identifier, FALSE) ;
    
    } else {

        /* thread level */
        NewsDataSelectGroup(G_groupListSelection) ;
        NewsDataGroupSelectThread(lineData.EUITCE_index) ;
        count = NewsDataThreadCountArticles() - 1 ;
        NewsDataGroupUnselectThread() ;
        NewsDataUnselectGroup() ;

        /* there are no sub items */
	    @call list::MSG_EXTUI_TREE_SET_NODE_LINE(identifier, count) ;
    }
}


/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_NODE_ATTACH {

    dword itemid ;
    word count ;

    if(!(flags & EUITAF_ACTIVE_OPEN)) {
    
        return ;
    }

    if(cache) {

        /* attach level 1 means article level */
        itemid = index + 1 ;
        NewsDataSelectGroup(G_groupListSelection) ;
        NewsDataGroupSelectThread(index) ;
        count = NewsDataThreadCountArticles() - 1 ;
        NewsDataGroupUnselectThread() ;
        NewsDataUnselectGroup() ;

    } else {
    
        if(G_groupListSelection == 0xFFFF) {

            count = 0 ;
            itemid = 0 ;
        
        } else {

            /* attach level 0 means thread level */
            itemid = 0xFFFFFFFF ;
            NewsDataSelectGroup(G_groupListSelection) ;
            count = NewsDataGroupCountThreads() ;
            NewsDataUnselectGroup() ;
        }
    }

    @call tree::MSG_EXTUI_TREE_NODE_ATTACHED(
                                    cache, index, itemid, count) ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_NODE_DETACH {

    @call tree::MSG_EXTUI_TREE_FINALIZE_DETACH(cache, index) ;
}


/*************************************************************************/

