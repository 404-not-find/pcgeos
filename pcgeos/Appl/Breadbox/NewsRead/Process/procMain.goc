/**********************************************************************
 * FILE:  PROCESS.GOC - Process Class Code
 * Project - News Reader
 * Started 4/28/98
 **********************************************************************/

/**********************************************************************
 * Includes                                                           *
 **********************************************************************/

@include <stdapp.goh>

@include "utils.goh"
#include <ansi/stdio.h>
#include <ansi/string.h>
#include <ansi/stdlib.h>

@include "newsread.goh"
@include "extern.goh"
@include "Localize/strings.goh"
@include "UIClass/statdiag.goh"
@include "options.goh"
@include "errors.goh"
@include <Objects\gSysC.goh>

#include "news.h"
@include "newsdata.goh"

#define NEWSGROUP_MARKED_FOR_DELETE         1


/**********************************************************************
 * Class Declarations                                                 *
 **********************************************************************/

@classdecl NewsProcessClass, neverSaved;


/**********************************************************************
 * Global Variables                                                   *
 **********************************************************************/

word NewsConnectionStatus;
MemHandle G_markForDeleteBlock = NullHandle ;
FatalErrors G_fakeError ;
MemHandle G_articleListRespondReference = 0;
Boolean G_startupPassword = FALSE;

extern NewsgroupEntry *G_group;
extern VMFileHandle G_databaseVMFH ;

extern byte G_mainListLevel ;
extern word G_mainListPath[] ;
extern word G_mainListMessage ;
extern word G_groupListSelection ;


/**********************************************************************
 * External Methods                                                   *
 **********************************************************************/

@extern method NewsProcessClass, MSG_NP_PICK_LIST_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_PICK_LIST_INITIALIZE ;
@extern method NewsProcessClass, MSG_NP_PICK_LIST_GET_TYPE ;
@extern method NewsProcessClass, MSG_NP_PICK_LIST_TYPE_CHANGED ;

@extern method NewsProcessClass, MSG_NP_MAIN_LIST_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_INITIALIZE ;
@extern method NewsProcessClass, 
                        MSG_NP_MAIN_LIST_NEWSGROUP_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_THREAD_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_ARTICLE_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_OPEN_LEVEL ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_CLOSE_LEVEL ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_DOUBLE_PRESS ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_SELECTION ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_CHECK_SELECTION ;

@extern method NewsProcessClass, MSG_NP_MAIN_VIEW_SHOW_NOTHING ;
@extern method NewsProcessClass, MSG_NEWS_SHOW_ARTICLE ;

@extern method NewsProcessClass, MSG_NP_MAIN_LIST_UPDATE_ALL ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_UPDATE ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_GET ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_GET_ALL ;

@extern method NewsProcessClass, MSG_NP_MAIN_LIST_NEXT_ARTICLE_THREAD_GROUP ;
@extern method NewsProcessClass, MSG_NP_MAIN_LIST_PREV_ARTICLE_THREAD_GROUP ;

@extern method NewsProcessClass, MSG_NP_MAIN_VIEW_PARSE_MESSAGE ;

/* Process/PostWin.goc */
@extern method NewsProcessClass, MSG_NP_POST_WIN_VISIBILITY_NOTIFICATION ;
@extern method NewsProcessClass, MSG_NP_POST_WIN_SEND_ACTION ;
@extern method NewsProcessClass, MSG_NP_POST_WIN_REPLY_MESSAGE ;
@extern method NewsProcessClass, MSG_NP_POST_WIN_POST_MESSAGE ;
@extern method NewsProcessClass, MSG_NP_POST_WIN_ADD_SIGNATURE ;

/* Process/ActnBar.goc */
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_MARK_READ_ACTION ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_DELETE_ACTION ;
@ifdef COMPILE_OPTION_TOP_TOOLS
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_DELETE_READ_ACTION ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_MARK_READ_UPDATE ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_ONLINE_MODE_UPDATE ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_DISCONNECT_ACTION ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_DELETE_UPDATE ;
@extern method NewsProcessClass, MSG_NP_ACTION_BAR_UPDATE_BUTTONS ;
@endif

/* Process/NaviBar.goc */
@ifdef COMPILE_OPTION_RIGHT_TOOLS
@extern method NewsProcessClass, MSG_NP_NAVIGATION_BAR_READ_NEXT ;
@extern method NewsProcessClass, MSG_NP_NAVIGATION_BAR_LEVEL_APPLY ;
@extern method NewsProcessClass, MSG_SEARCH ;
@endif

@extern method NewsProcessClass, MSG_META_EXPOSED ;
@extern method NewsProcessClass, MSG_META_START_SELECT ;

@extern method NewsProcessClass, MSG_NP_SAVE_FILES_EXTRACT_FILE_LIST ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_EXTRACT_FILE ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_OPEN ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_CLOSE ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_SAVE ;
@extern method NewsProcessClass, MSG_NP_SAVE_FILES_APPLY_SELECTION ;


/* Process/ArtList.goc */
@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_DRAW_FIELD ;
@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_INFO_FIELD ;
@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_NODE_ATTACH ;
@extern method NewsProcessClass, MSG_NP_ARTICLE_LIST_NODE_DETACH ;

@extern method NewsProcessClass, MSG_NP_GROUP_LIST_INITIALIZE ;
@extern method NewsProcessClass, MSG_NP_GROUP_LIST_SELECTION ;
@extern method NewsProcessClass, MSG_NP_GROUP_LIST_MONIKER_QUERY ;
@extern method NewsProcessClass, MSG_NP_ARTICLE_TREE_INITIALIZE ;

@ifdef COMPILE_OPTION_HAS_MENU_BAR
@extern method NewsProcessClass, MSG_NEWS_SHOW_HEADERS ;
@extern method NewsProcessClass, MSG_NEWS_HIDE_HEADERS ;
@endif
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
@extern method NewsProcessClass, MSG_NEWS_READ_DELETE_NOTIFY ;
@endif

@extern method NewsProcessClass, MSG_NEWS_UPDATE_ARTICLE2 ;
@extern method NewsProcessClass, MSG_NEWS_READ_NEXT ;
@extern method NewsProcessClass, MSG_NEWS_READ_PREV ;
@extern method NewsProcessClass, MSG_NEWS_READ_DISCARD ;
@extern method NewsProcessClass, MSG_NEWS_READ_UPDATE_NAVI ;

/* UIClass/SettDlgC.goh */
@extern method NewsProcessClass, MSG_NP_SETTINGS_SAVE ;
@extern method NewsProcessClass, MSG_NP_SETTINGS_TRANSFER_AUTHINFO ;


/**********************************************************************
 * Methods                                                            *
 **********************************************************************/

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_GEN_PROCESS_OPEN_APPLICATION
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Start up procedure.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    Boolean isOk ;
    GStateHandle gstate ;
    WWFixedAsDWord pointSize ;
    WWFixed pSize ;
//    TimerDateAndTime date;
//    EventHandle event ;
    ExtUITableColumn colData ;
    TimerDateAndTime dateTime ;
    TCHAR dateString[10] ;
 AccessFlags		pcAccess;


    GCNListAdd(@NewsApp, MANUFACTURER_ID_GEOWORKS, GCNSLT_PPP_STATUS_NOTIFICATIONS) ;

    @call NewsPostText::MSG_NEWS_TEXT_OPEN(
        @NewsPostContent,
        VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);
    @call ArticleText::MSG_NEWS_TEXT_OPEN(
        @ArticleContent,
        VTSF_MULTIPLE_PARA_ATTRS|VTSF_MULTIPLE_CHAR_ATTRS|VTSF_TYPES);

@ifndef COMPILE_OPTION_PRIMARY_MESSAGE_COMPOSER
    @call PostWindow::MSG_META_ADD_VAR_DATA(
                    ATTR_GEN_VISIBILITY_DESTINATION, sizeof(optr), &oself);
@endif

    gstate = GrCreateState(0) ;
    GrGetFont(gstate, &pointSize) ;

    pSize.WWF_int = IntegerOf(pointSize) + 2 ;
    pSize.WWF_frac = FractionOf(pointSize) ;

    @send ArticleText::MSG_VIS_TEXT_SET_POINT_SIZE(pSize, TEXT_ADDRESS_PAST_END, 0) ;
    @send NewsPostText::MSG_VIS_TEXT_SET_POINT_SIZE(pSize, TEXT_ADDRESS_PAST_END, 0) ;

    dateTime.TDAT_month = 12 ;
    dateTime.TDAT_day = 30 ;

    LocalFormatDateTime(dateString, DTF_MD_SHORT, &dateTime) ;

    colData.EUITC_attrs = 0 ;
    colData.EUITC_width = GrTextWidth(gstate, dateString, strlen(dateString)) + 2 ;

    GrDestroyState(gstate) ;

    @call NewsArticleList2::MSG_EXTUI_TABLE_SET_COLUMN_WIDTH(2, &colData) ;

    @send oself::MSG_NP_UPDATE_CONNECTION_STATE() ;

    /* Do the normal stuff first */
    @callsuper();

    /* check for parental control */
    pcAccess = ParentalControlGetAccessInfo();
    /* if no access, ask for password */
    if (pcAccess & AF_NEWSGROUP)  {
	  G_startupPassword = TRUE;
	  if (@call PCRoot::MSG_PC_CHECK_PASSWORD_DB(PC_NEWSGROUP) == IC_OK) {
		/* allow access */
//	     G_pcBypassed = TRUE;
		}
	  else {
		@send, forceQueue NewsApp::MSG_META_QUIT();
		}
	  G_startupPassword = FALSE;
	}

@ifdef COMPILE_OPTION_BETA_DIALOG
    TimerGetDateAndTime(&date) ;

    if( (date.TDAT_year > 1999) ||
        ((date.TDAT_year == 1999) && (date.TDAT_month > 7)) ||
        ((date.TDAT_year == 1999) && (date.TDAT_month == 7) && (date.TDAT_day > 15))
    ) 

    @send BetaTryButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;

    event = @record GenSystemClass::MSG_GEN_SYSTEM_MARK_NOT_BUSY() ;
    @send application::MSG_GEN_GUP_SEND_TO_OBJECT_OF_CLASS(event) ;

    if(UserDoDialog(@BetaDialog) == IC_DISMISS) {

        @send NewsApp::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
        @send application::MSG_META_QUIT();
    }
    event = @record GenSystemClass::MSG_GEN_SYSTEM_MARK_BUSY() ;
    @send application::MSG_GEN_GUP_SEND_TO_OBJECT_OF_CLASS(event) ;

@endif /* COMPILE_OPTION_BETA_DIALOG */

    /* Open up the database */
    isOk = NewsDataOpen() ;
    if (!isOk)
        @send application::MSG_META_QUIT();

    /* Start up the displayed list of newsgroups */
    @send process::MSG_NP_MAIN_LIST_INITIALIZE();
    @send process::MSG_NP_PICK_LIST_INITIALIZE();
    @send process::MSG_NP_GROUP_LIST_INITIALIZE();

    @call SettingsDialog::MSG_SETTINGS_CHANGED() ;

    /* Copy the authorization info into the Login dialog. */
    @call process::MSG_NP_SETTINGS_TRANSFER_AUTHINFO(FALSE);

    if (!@call SettingsOK::MSG_GEN_GET_USABLE())  {
        
        @send SettingsDialog::MSG_GEN_INTERACTION_INITIATE() ;
    }

    /* Unscramble the password */
    UnScramblePassword(@AccountPassword);
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_GEN_PROCESS_CLOSE_APPLICATION
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Shutdown/Quit procedure.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{

    SaveINIPassword(@AccountPassword);

    /* Make sure the server has been disconnected (and our variables are */
    /* correct when saving to state */
    DisconnectFromServer(FALSE);

    NewsDataClose() ;


    GCNListRemove(@NewsApp, MANUFACTURER_ID_GEOWORKS, GCNSLT_PPP_STATUS_NOTIFICATIONS) ;

    /* Ok, do the normal thing */
    @callsuper() ;

    @call NewsPostText::MSG_NEWS_TEXT_CLOSE(@NewsPostContent);
    @call ArticleText::MSG_NEWS_TEXT_CLOSE(@ArticleContent);

    return(0) ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_GET_GROUPS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User has requested to get the list of news groups.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@if @COMPILE_OPTION_DOWNLOAD_NEWSGROUPS
@method NewsProcessClass, MSG_NEWS_GET_GROUPS
{
//    EventHandle event ;

//    event = @record GenSystemClass::MSG_GEN_SYSTEM_MARK_BUSY() ;
//    @send application::MSG_GEN_GUP_SEND_TO_OBJECT_OF_CLASS(event) ;

    /* Sorry, no actions right now, I'm busy */
    @call application::MSG_GEN_APPLICATION_MARK_BUSY();

    /* Make sure we have a connection */
    if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {
        
        ConnectToServer();
    }

    /* If that failed, quit */
    if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {
  
        @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
        return;
    }

    @send ANDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

    /* Actual do the work now of getting the groups */
    GetGroups();


    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

    /* Now that we have a list, show it */
    @send process::MSG_NP_PICK_LIST_INITIALIZE();

    /* I'm free! */
    @call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

//    event = @record GenSystemClass::MSG_GEN_SYSTEM_MARK_NOT_BUSY() ;
//    @send application::MSG_GEN_GUP_SEND_TO_OBJECT_OF_CLASS(event) ;

    @send ANDList::MSG_NEWS_GROUP_SHOW_ALL();

@ifdef COMPILE_OPTION_TOP_TOOLS
    if(!@call OnlineModeGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS()) {
            DisconnectFromServer(TRUE) ;
    }
@else
    DisconnectFromServer(TRUE) ;
@endif
}
@endif


/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_UNSUBSCRIBE_GROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User wants to disconnect a group's subscription
 |
 | Input:
 |    word groupNum               -- Group to delete in the list
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_UNSUBSCRIBE_GROUP
{
    word result ;
    NewsgroupEntry *p_group ;

    if(G_groupListSelection != 0xFFFF) {

        /* ask if we really want to delete */
        MemLock(HandleOf(@UnsubscribeQuestion)) ;

        p_group = NewsDataGroupLock(G_groupListSelection) ;

        result = UserStandardDialog(
            0,                                  /* helpContext */
            0,                                  /* customTriggers */
            0,                                  /* arg2 */
            (TCHAR*) p_group->NE_groupName,     /* arg1 */
            LMemDeref(@UnsubscribeQuestion),    /* string */
            (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) | 
                (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
                                                /* dialogFlags */
        ) ;
        NewsDataGroupUnlock(p_group) ;
        MemUnlock(HandleOf(@UnsubscribeQuestion)) ;

        if(result == IC_YES) {

            @send application::MSG_GEN_APPLICATION_MARK_BUSY();

            NewsDataDeleteGroup(G_groupListSelection) ;

            @call oself::MSG_NP_MAIN_LIST_INITIALIZE();
            @send process::MSG_NP_PICK_LIST_INITIALIZE();
            @send process::MSG_NP_GROUP_LIST_INITIALIZE();

            @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
        }
    }
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_SUBSCRIBE_BY_NAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User has entered a news group name.  Add it directly to the
 |    subscribed list even it if doesn't exist.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_SUBSCRIBE_BY_NAME
{
    NewsgroupEntryBuffer p_group ;
    word count, count2 ;

    NewsDataLock() ;
    count = NewsDataCountNewsgroups() ;
    NewsDataUnlock() ;

    /* Create a block to hold the info */
    memset(&p_group, 0, sizeof(NewsgroupEntryBuffer));

    /* Get the users input */
    @call ANDNewsgroupText::MSG_VIS_TEXT_GET_ALL_PTR(&p_group.NE_groupName);

    /* Now put that into the subscription list and show it */
    @call process::MSG_NEWS_SUBSCRIBE(&p_group, TRUE);

    @send oself::MSG_NP_MAIN_LIST_INITIALIZE();
    @send process::MSG_NP_PICK_LIST_INITIALIZE();
    @send process::MSG_NP_GROUP_LIST_INITIALIZE();
    
    NewsDataLock() ;
    count2 = NewsDataCountNewsgroups() ;
    NewsDataUnlock() ;

    if(count2 > count) {

        /* select new newsgroup */
        @send process::MSG_NP_GROUP_LIST_SELECTION(count, 1, 0) ;
    }

    @send ANDNewsgroupText::MSG_VIS_TEXT_DELETE_ALL() ;

    @send oself::MSG_NP_MAIN_LIST_UPDATE(0) ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_IMPORT_GROUP_LIST
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Read in the file GROUPS.TXT that is in the Document directory.
 |    Replace the newsgroup list with this one.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@if COMPILE_OPTION_IMPORT_GROUPS
@method NewsProcessClass, MSG_NEWS_IMPORT_GROUP_LIST
{
  VMBlockHandle mapBlockVMH, arrayVMH;
  MemHandle mapBlockMH;
  DatabaseMapBlock *mapBlockPtr;
  FILE *file;
  char buffer[MAX_GROUP_NAME_SIZE+1];
  word len;

  /* Open the file */
  FilePushDir();
  FileSetStandardPath(SP_DOCUMENT);
  file = fopen("GROUPS.TXT", "rV");
  FilePopDir();
  if (file == NULL) {
    return;
  }

  /* Stop if nothing in the file */
  if(feof(file) != 0) {
    fclose(file);
    return;
  }

  @call application::MSG_GEN_APPLICATION_MARK_BUSY();

  /* Destroy the old list */
  mapBlockVMH = VMGetMapBlock(G_databaseVMFH);
  mapBlockPtr = VMLock(G_databaseVMFH, mapBlockVMH, &mapBlockMH);
  HugeArrayDestroy(G_databaseVMFH, mapBlockPtr->DMB_groupsArray);
  arrayVMH = mapBlockPtr->DMB_groupsArray = HugeArrayCreate(G_databaseVMFH,
    0, 0);
  VMDirty(mapBlockMH);
  VMUnlock(mapBlockMH);

  /* Read this list in line by line appending to the end */
  while (feof(file) == 0) {
    fgets(buffer, 256, file);
    len = strlen(buffer);
    if (buffer[len-2] == '\r') {
      len -= 2;
      buffer[len] = '\0';
    }
    if (len) {
      HugeArrayAppend(G_databaseVMFH, arrayVMH, len+1, buffer);
    }
  }

  fclose(file);

  /* Done. */
  /* ??? Doesn't up the UI? */
  @call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}
@endif

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_GET_MESSAGES
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User has requested a list of messages of the given newsgroup
 |    newsgroup.
 |
 | Inputs:
 |    word groupNum               -- Newsgroup id
 |
 | Outputs:
 |    Boolean                     -- TRUE if user cancelled
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |    LES  10/30/98  Modified to take in a particular newsgroup index
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_GET_MESSAGES
{
    char lineBuf[1024] ;
    dword messages ;
    Boolean isCancelled = FALSE ;
@ifndef COMPILE_OPTION_NO_AUTO_DOWNLOAD
    dword articleNum, articleIndex ;
    word messageCount ;
@endif

    @send application::MSG_GEN_APPLICATION_MARK_BUSY();

    /* Connect if not connected */
    if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {
        ConnectToServer();
    }

    /* Quit if not connected */
    if ((NewsConnectionStatus & NCS_CONNECTED) == 0) {
        @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
        return TRUE ;
    }

    /* Get the new messages (if any) */
    messages = GetNewMessages((byte*)lineBuf, groupNum, &isCancelled);

    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

    /* get the bodies if in offline mode */
@ifdef COMPILE_OPTION_TOP_TOOLS
    if( messages && 
        (!isCancelled) &&
        (!@call OnlineModeGroup::
                    MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS())) {
@else
    if( messages && (!isCancelled) ) {
@endif

@ifndef COMPILE_OPTION_NO_AUTO_DOWNLOAD

        /* lock the group */
        NewsDataSelectGroup(groupNum) ;

        /* bring up the dialog */
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TITLE_OPTR(
                @DownloadStatusNewMsgText) ;
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR("") ;
        @send DownloadGroupsDialog::MSG_STATUS_DIALOG_OPEN(
                                            TRUE, TRUE, G_group->NE_groupName, TRUE) ;

        articleNum = BucketHugeArrayGetCount(G_databaseVMFH,
                                            G_group->NE_articleArray);
        articleIndex = articleNum - messages ;
        messageCount = 0 ;
        while(articleIndex != articleNum) {
          
            ArticleEntry *p_article ;
            word ignoredSize ;

            if (@call DownloadGroupsDialog::MSG_STATUS_DIALOG_IS_CANCELLED())  {

                isCancelled = TRUE ;

                /* disconnect/cancel the connection */
                DisconnectFromServer(FALSE);
                break ;
            }
 

            MemLock(HandleOf(@HeaderDownloadStatus)) ;
            sprintf(lineBuf, LMemDeref(@HeaderDownloadStatus), 
                                (((dword)messageCount)*100)/(messages)) ;
            @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR(lineBuf) ;
             @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_PROGRESS((((dword)messageCount)*100)/(messages)) ;
            MemUnlock(HandleOf(@HeaderDownloadStatus)) ;
    
            /* lock the article entry */
            BucketHugeArrayLock(
                G_databaseVMFH,
                G_group->NE_articleArray,
                articleIndex,
                &p_article,
                &ignoredSize) ;
            
            G_article = p_article ;

            if (!(p_article->AE_flags & AEF_HAS_BODY_TEXT)) {

                /* Article needs a body */
                GetMessageBodyDirectly(G_group, p_article, lineBuf) ;
            }        
        
            G_article = 0 ;

            /* unlock the article entry */
            BucketHugeArrayUnlock(p_article) ;
        
            articleIndex++ ;
            messageCount++ ;
        }

        /* unlock the group */
        NewsDataUnselectGroup() ;
        
        /* close the dialog */
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_CLOSE() ;
@endif /* COMPILE_OPTION_NO_AUTO_DOWNLOAD */

    }

    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    return isCancelled ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_ADD_NEWSGROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Add a newsgroup to the list by using the display for it.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_ADD_NEWSGROUP
{
    /* delete the entries */
    @send ANDSearchText::MSG_VIS_TEXT_DELETE_ALL() ;
    @send ANDNewsgroupText::MSG_VIS_TEXT_DELETE_ALL() ;

    /* show all items */
    @send ANDList::MSG_NEWS_GROUP_SHOW_ALL() ;

    @send ,forceQueue AddNewsgroupDialog::MSG_GEN_INTERACTION_INITIATE() ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_DELETE_ALL_READ_NEWSGROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Goes through all the articles in the newsgroup and deletes all
 |    articles that have been read.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@if 0
@method NewsProcessClass, MSG_NEWS_DELETE_ALL_READ_NEWSGROUP
{
    @call oself::MSG_NEWS_CALL_PER_SELECTED_GROUP(
              oself,
              MSG_NEWS_DELETE_ALL_READ_FOR_SINGLE_NEWSGROUP) ;

    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

//    @call process::MSG_NP_NEWSGROUP_LIST_INITIALIZE() ;
}
@endif
/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_DELETE_ALL_READ_FOR_SINGLE_NEWSGROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Deletes all the read items in a group item.
 |
 | Inputs:
 |    word groupNum               -- Index to subscribed newsgroup
 |
 | Outpus:
 |    Boolean                     -- return TRUE to cancel.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_DELETE_ALL_READ_FOR_SINGLE_NEWSGROUP
{
    @send application::MSG_GEN_APPLICATION_MARK_BUSY();

    NewsDataGroupDeleteRead(groupNum, 0xFFFF);  

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    /* reinitialize the list */

    return FALSE ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_MARK_READ_FOR_SINGLE_NEWSGROUP
 *----------------------- --------------------------------------------------
 |
 | Description:
 |    Deletes all the read items in a group item.
 |
 | Inputs:
 |    word groupNum               -- Index to subscribed newsgroup
 |
 | Outpus:
 |    Boolean                     -- return TRUE to cancel.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@if 0
@method NewsProcessClass, MSG_NEWS_MARK_READ_FOR_SINGLE_NEWSGROUP
{
    @send application::MSG_GEN_APPLICATION_MARK_BUSY();

    NewsDataGroupMarkRead(groupNum);  

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    return FALSE ;
}
@endif

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_CALL_PER_SELECTED_GROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Call the destined object with the given message per selected entry
 |    in the list.  The list can be aborted with a return of TRUE from
 |    the object.
 |
 | Inputs:
 |    optr destination            -- Target to receive message
 |    Message msg                 -- Message to use (of prototype
 |                                   MSG_NEWSGROUP_SELECTED_GROUP_ACTION)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_CALL_PER_SELECTED_GROUP
{
    word index ;
    word num ;
    Boolean isCancelled = FALSE ;

    if(G_mainListLevel == 0) {

        num = @call NewsArticleList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() ;
    
        for (index=0; index<num; index++)  {
            /* Only send messages to selected items */
            if (@call NewsArticleList::MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(index))  {
                /* Call the object with the selected index.  Abort if the return */
                /* is TRUE. */
                if ((@call destination::{
                            MSG_NEWS_SELECTED_GROUP_ACTION}(msg)(index)) == TRUE) {
                    isCancelled = TRUE ;
                    break ;
                }
            }
        }
    
    } else {
    
        if (@call NewsArticleList::MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(0))  {
            /* Call the object with the selected index.  Abort if the return */
            /* is TRUE. */
            isCancelled = @call destination::{MSG_NEWS_SELECTED_GROUP_ACTION}(msg)(
                                                            G_mainListPath[0]) ;
        }
    }
    
    return(isCancelled) ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_CALL_ALL_GROUPS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Send a message for all the groups.
 |
 | Inputs:
 |    optr destination            -- Target to receive message
 |    Message msg                 -- Message to use (of prototype
 |                                   MSG_NEWSGROUP_SELECTED_GROUP_ACTION)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/30/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_CALL_ALL_GROUPS
{
    Boolean isCancelled = FALSE ;

    word index ;
    word num ;

    if(G_mainListLevel == 0) {

        num = @call NewsArticleList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() ;
    
        for (index=0; index<num; index++)  {
            
            /* Call the object with the selected index.  Abort if the return */
            /* is TRUE. */
            if ((@call destination::
                        {MSG_NEWS_SELECTED_GROUP_ACTION}(msg)(index)) == TRUE) {
                isCancelled = TRUE ;
                break ;
            }
        }
    
    }

    return(isCancelled) ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass, MSG_NEWS_SEARCH_NEWSGROUPS
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Do the actual search of a newsgroup through the application.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
char *strstri(char *str, char *sub)
{
	char *p, *r, *s;
	for (p = str; *p != '\0'; p++)
	{
		for (s = sub, r = p; 
		    *r != '\0' && *s != '\0' && tolower(*r) == tolower(*s);
		    r++, s++)
			;
		if (*s == '\0')
			return p;
	}
	return NULL;
}

@method NewsProcessClass, MSG_NEWS_SEARCH_NEWSGROUPS
{
    dword count ;
    word len ;
    dword i ;
    Boolean isAdded ;
    char searchString[81] ;
    Boolean isCancelled = FALSE ;
    Boolean addedAny = FALSE ;
    Boolean statusIsOpen = FALSE ;
    UnsubscribedGroupEntry *p_group ;

    /* Scroll to top */
    @call ANDList::MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(0);

    @call ANDList::MSG_META_SUSPEND() ;
    @call ANDList::MSG_NEWS_GROUPS_CLEAR_SUB_LIST() ;
    len = @call ANDSearchText::MSG_VIS_TEXT_GET_TEXT_SIZE() ;
    if (len)  {
        /* Put a status dialog */
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TITLE_OPTR(
                @DownloadStatusSearchingNewsgroups) ;
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_SET_TEXT_PTR("");
        @send DownloadGroupsDialog::MSG_STATUS_DIALOG_OPEN(FALSE, FALSE, 0, FALSE) ;
        statusIsOpen = TRUE ;

        @call ANDSearchText::MSG_VIS_TEXT_GET_ALL_PTR(searchString) ;

        /* If we have something to search, look for it */
        /* Go through all the subscribed entries looking for a match */
        count = NewsDataCountUnsubNewsgroups() ;
        for (i=0; i<count; i++)  {
            isCancelled = @call DownloadGroupsDialog::MSG_STATUS_DIALOG_IS_CANCELLED() ;
            if (isCancelled)
                break ;
            p_group = NewsDataUnsubGroupLock(i) ;
            if (strstri(p_group->UGE_text, searchString) != NULL)  {
                isAdded = @call ANDList::MSG_NEWS_GROUPS_APPEND_TO_SUB_LIST(i) ;
                if (!isAdded)
                    break ;
                addedAny = TRUE ;
            }
            NewsDataUnsubGroupUnlock(p_group) ;
        }
        @call ANDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(count) ;

        if (!addedAny)  {
            NotifyMessage(@NoNewsgroupsFound);
            isCancelled = TRUE ;
        }
    }

    if (isCancelled)  {
        @call ANDList::MSG_NEWS_GROUPS_CLEAR_SUB_LIST() ;
        @call ANDSearchText::MSG_VIS_TEXT_DELETE_ALL() ;
    }

    @call ANDList::MSG_META_UNSUSPEND() ;
    @call ANDList::MSG_NEWS_GROUPS_INITIALIZE() ;

    if (statusIsOpen)
        @call DownloadGroupsDialog::MSG_STATUS_DIALOG_CLOSE() ;

    @send ANDSearchText::MSG_VIS_TEXT_DELETE_ALL() ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_SUBSCRIBE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Add a new item to the subscribed list based on a given subscribed
 |    structure.
 |
 | Inputs:
 |    NewsgroupEntry *p_group    -- Subscribed item on list
 |    Boolean errorIfSubscribed   -- Flag to output error if already on list.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_SUBSCRIBE
{
    /* Involves a search -- lock the data for the time being */
    NewsDataLock() ;

    /* Release the data structures */
    NewsDataCreateGroup(p_group->NE_groupName, errorIfSubscribed) ;
    NewsDataUnlock() ;

    /* Make the change permanent */
    BucketHugeArraySave();
    VMSave(G_databaseVMFH);
}

/*-------------------------------------------------------------------------
 | Routine:  PrepareText
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Go through the text in a huge array of lines and make sure there
 |    are no single period lines.
 |
 | Inputs:
 |    VMBlockHandle textVMH       -- Huge array containing text lines
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
void PrepareText(VMBlockHandle textVMH)
{
    dword size, count = 0;
    word bla;
    char *data;
    Boolean lastCR ;
    word lineCount ;
    Boolean pendingBreak;

    /* Go through it line by line */
    size = HugeArrayGetCount(G_databaseVMFH, textVMH);
    
    lineCount = 0 ;

    pendingBreak = FALSE ;

    while (count < size) {
    
        char thisChar ;
        
        HugeArrayLock(G_databaseVMFH, textVMH, count, &data, &bla);
        thisChar = *data ;
        HugeArrayUnlock(data) ;

        lastCR = FALSE ;

        lineCount++ ;

        if((thisChar != ' ') && (thisChar != '\r') && pendingBreak) {
        
            if(lineCount > 72) {
            
                /* insert line break here */
                HugeArrayInsert(G_databaseVMFH, textVMH, 2, count, "\r\n");

                count += 2 ;
                size += 2 ;
        
                lastCR = TRUE ;
                lineCount = 0 ;
            }
            
            pendingBreak = FALSE ;
        }

        if(thisChar == '\r') {
  
            HugeArrayInsert(G_databaseVMFH, textVMH, 1, count + 1, "\n");

            count++ ;
            size++ ;
        
            lastCR = TRUE ;
            lineCount = 0 ;


        } else if((thisChar == '.') && lastCR) {

            HugeArrayInsert(G_databaseVMFH, textVMH, 1, count + 1, ".");

            count++ ;
            size++ ;

        } else if(thisChar == ' ') {
        
            pendingBreak = TRUE ;
        } 

        count++ ;
    }
}


/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_DOWNLOAD_ARTICLE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    User has declared he wants an article(s)
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_DOWNLOAD_ARTICLE
{
    word numItems, loopCount ;

    @send application::MSG_GEN_APPLICATION_MARK_BUSY();

    numItems = @call NewsArticleList::
                        MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() ;

    if(G_mainListLevel == 1) {

        loopCount = 0 ;
        while(loopCount < numItems) {

            if(@call NewsArticleList::
                    MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(loopCount)) {

                GetMessageBody(
                    G_mainListPath[0], loopCount - 1, 0) ;
            }
                    
            loopCount++ ;
        }

    } else if(G_mainListLevel == 2) {

        loopCount = 1 ;
        while(loopCount < numItems) {

            if(@call NewsArticleList::
                    MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(loopCount)) {

                if(GetMessageBody(
                    G_mainListPath[0], G_mainListPath[1], 
                                                  loopCount - 1)) {
                                                  
                    ErrorMessage(@MessageBodyError) ;
                    DisconnectFromServer(FALSE) ;
                    
                    break ;
                }
            }
                    
            loopCount++ ;
        }
    }

    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

    if(G_mainListMessage != 0xFFFF) {
        
        word lastShown;

        lastShown = G_mainListMessage ;
        G_mainListMessage = 0xFFFF;

        @send oself::MSG_NP_MAIN_LIST_SELECTION(lastShown, 1, FALSE);
    }

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

@ifdef COMPILE_OPTION_TOP_TOOLS
    if(!@call OnlineModeGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS()) {
            DisconnectFromServer(TRUE) ;
    }
@else
    DisconnectFromServer(TRUE) ;
@endif
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_PROCESS_PICK_ADD_GROUP
 *-------------------------------------------------------------------------
 |
 | Description:
 |    A news item has been selected from the list, add it to the post
 |    list.
 |
 | Inputs:
 |    optr trigger                -- Activiation trigger, used to determine
 |                                   which window.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_PROCESS_PICK_ADD_GROUP
{
  BucketHugeArrayHandle arrayVMH;
  MemHandle windowMH;
  void *gle;
  char *name;
  word size, selection, view;
  optr text;

  /* Use the trigger to find the window containing the correct text obj */
  windowMH = OptrToHandle(trigger);
  text = ConstructOptr(windowMH, OptrToChunk(@PostGroupsText));

  /* Get the currently selected item on the list (if any) */
  selection = @call PickGroupList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
  if (selection == GIGS_NONE) {
    return;
  }

  NewsDataLock() ;

  /* Get the view selection */
  view = @call oself::MSG_NP_PICK_LIST_GET_TYPE();

  /* Get the appropriate list */
  if (view == NGLV_SUBSCRIBED) {
    arrayVMH = G_mapBlock->DMB_subscribedArray;
  }
  else {
    arrayVMH = G_mapBlock->DMB_groupsArray;
  }

  /* Append it to the already existing list. */
  BucketHugeArrayLock(G_databaseVMFH, arrayVMH, (dword)selection, &gle, &size);
  size = @call text::MSG_VIS_TEXT_GET_TEXT_SIZE();
  if (size) {
    @call text::MSG_VIS_TEXT_APPEND_PTR(",", 0);
  }
  if (view == NGLV_SUBSCRIBED) {
    name = &(((NewsgroupEntry *)gle)->NE_groupName[0]);
  }
  else {
    name = gle;
  }
  @call text::MSG_VIS_TEXT_APPEND_PTR(name, 0);
  BucketHugeArrayUnlock(gle);
  
  NewsDataUnlock() ;
}

/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_PROCESS_GET_GROUP_NAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Convert a group number and selection number into a string.
 |
 | Inputs:
 |    word list                   -- Which list to pull off name
 |                                   NGRT_CURRENT = UI selected one
 |                                   NGRT_ALL = Complete list
 |                                   MGRT_SUBSCRIBED = Only subscribed list
 |    word selection              -- Selection item
 |    char *buffer                -- Place to store string
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    EDG  ??/??/98  Created
 |
 *-----------------------------------------------------------------------*/
@method NewsProcessClass, MSG_NEWS_PROCESS_GET_GROUP_NAME
{
  NewsgroupEntry *p_group;
  char *gle;
  word size;

  NewsDataLock();

  /* Get the list of the given selection (or determine from the UI) */
  if (list == NGRT_CURRENT) {
    list = NGRT_SUBSCRIBED ;
  }

  /* Get the string from the right group */
  if (list == NGRT_ALL) {
    BucketHugeArrayLock(G_databaseVMFH, G_mapBlock->DMB_groupsArray,
      (dword)selection, &gle, &size);
    strcpy(buffer, gle);
    BucketHugeArrayUnlock(gle);
  }
  else {
    BucketHugeArrayLock(G_databaseVMFH, G_mapBlock->DMB_subscribedArray,
      (dword)selection, &p_group, &size);
    strcpy(buffer, p_group->NE_groupName);
    BucketHugeArrayUnlock(p_group);
  }
    
  NewsDataUnlock();
}

/*************************************************************************/

@method NewsProcessClass, MSG_NEWS_UPDATE_ARTICLE {

    /* reload the article */
    if(G_mainListLevel == 1) {

        @send process::MSG_NEWS_SHOW_ARTICLE(@ArticleText,
                            G_mainListPath[0],
                            G_mainListMessage - 1,
                            0) ;

    } else if(G_mainListLevel == 2) {
    
        @send process::MSG_NEWS_SHOW_ARTICLE(@ArticleText,
                            G_mainListPath[0],
                            G_mainListPath[1],
                            G_mainListMessage - 1) ;
    }
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_READ_MESSAGE {
    
    ExtUITreeCacheElement lineData ;

    @call application::MSG_GEN_APPLICATION_MARK_BUSY();

    if(G_groupListSelection != 0xFFFF) {

        word count ;
        word thread, article ;

        count = @call NewsArticleList2::MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS() ;

        if(count == 1) {

            word line ;

            line = @call NewsArticleList2::MSG_GEN_ITEM_GROUP_GET_SELECTION() ;

            /* get this lines current state information */
            @call NewsArticleList2::MSG_EXTUI_TREE_GET_LINE_ATTRS(line, &lineData) ;

            if(lineData.EUITCE_parent != 0xFFFFFFFF) {

                thread = lineData.EUITCE_parent - 1 ;
                article = lineData.EUITCE_index + 1 ;

            } else {

                thread = lineData.EUITCE_index ;
                article = 0 ;
            }

            /* download article? */
            if(!GetMessageBody(
                        G_groupListSelection,
                        thread,
                        article)) {

                @call oself::MSG_NEWS_SHOW_ARTICLE(
                              @ArticleText,
                              G_groupListSelection,
                              thread,
                              article) ;

                /* opens up the read message window */
@ifdef COMPILE_OPTION_PRIMARY_MESSAGE_COMPOSER
                @send MessageWindow::MSG_GEN_SET_USABLE(VUM_NOW) ;
                @send MessageWindow::MSG_GEN_DISPLAY_SET_NOT_MINIMIZED();
                @send MessageWindow::MSG_GEN_BRING_TO_TOP();
@endif
            }

            /* update the lines selected */
            @send NewsArticleList2::MSG_EXTUI_TABLE_UPDATE_LINE(line) ;

	    /* Force the list to send a status update to update menu and tools. */
	    @send NewsArticleList2::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	    @send NewsArticleList2::MSG_GEN_APPLY();
        }
    }

    @call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}

/*************************************************************************/

@method NewsProcessClass, MSG_NP_DETERMINE_DOWNLOAD_COUNT {

    Boolean doIt = TRUE ;
    TCHAR buffer[256] ;
    word amount, amount2, max ;
    Boolean modified ;

    /* get the count set */
    amount2 = amount = @call NewMsgMethodEntryText::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;

    /* Instead of lowering the upper limit each time new articles are
     * retrieved (since prompting the user to download 1 or fewer articles
     * is rediculous), the upper limit is now the minimum number of new 
     * articles for this dialog to be raised. -dhunter 2/10/2000
     */
    if((*count) <= amount && amount > 1) {
        return doIt;
    }

    /* set the limits */
    max = (word)*count;
    if (*count > 32766)		/* 32766 comes from CInclude/gValueC.goh */
        max = 32766;
    @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(max)) ;

    /* adjust the amount */
//    if(amount > (*count)) {

//        @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_INTEGER_VALUE(*count, FALSE) ;

//    } 
//    else {

        /* set the limits */
//        @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(amount)) ;
//    }

    @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_MODIFIED_STATE(FALSE) ;

    /* init the dialog */
    MemLock(HandleOf(@NewMsgText)) ; 
    sprintf(buffer, LMemDeref(@NewMsgText), groupName, *count) ;
    MemUnlock(HandleOf(@NewMsgText)) ;
    @call NewMsgWhatText::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0) ;
/*	@send NewMsgMarkReadBoolGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(1, 0) ; */
    @send NewMsgMethodGroup1::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(1, 0) ;

    /* show up the dialog */

//    (dword count, char *groupName) ;
    if(UserDoDialog(@NewMessagesDialog) != IC_OK) {
    
        doIt = FALSE ;
    }

    /* parse settings */
    modified = (@call NewMsgMethodEntryText::MSG_GEN_VALUE_GET_INTEGER_VALUE() != amount) ;
    if(doIt) {
    
        /* get the mark read flag */
        if(@call NewMsgMethodGroup1::MSG_GEN_ITEM_GROUP_GET_SELECTION() == 1) {

            /* get the wished count */
            (*count) = @call NewMsgMethodEntryText::MSG_GEN_VALUE_GET_INTEGER_VALUE() ;
        }
    }

    /* if amount is modified */
    if(modified) {
        
        /* store the latest options */
        @send NewsApp::MSG_META_SAVE_OPTIONS() ;

    } else {

        /* reset the options */
        @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(amount2)) ;
        @call NewMsgMethodEntryText::MSG_GEN_VALUE_SET_INTEGER_VALUE(amount2, FALSE) ;
    }

    return(doIt) ;
}

/*************************************************************************/

@method NewsProcessClass, MSG_NP_UPDATE_CONNECTION_STATE {

    if(CheckIfConnected()) {

@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send NewsMenuDisconnect::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuConnect::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuDisconnect::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuConnect::MSG_GEN_SET_NOT_USABLE(VUM_NOW) ;
@endif

    } else {

@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send NewsMenuDisconnect::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuConnect::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuDisconnect::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
        @send NewsMenuConnect::MSG_GEN_SET_USABLE(VUM_NOW) ;
@endif
    }
}

/*************************************************************************/

@method NewsProcessClass, MSG_NP_CONNECT { 
    
    @send NewsApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
@ifdef COMPILE_OPTION_HAS_MENU_BAR
    @send NewsMenuConnect::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
@endif
    OpenMedium() ;
    @send oself::MSG_NP_UPDATE_CONNECTION_STATE() ;
    @send NewsApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}

/*************************************************************************/

@method NewsProcessClass, MSG_NP_DISCONNECT {

    @send NewsApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
@ifdef COMPILE_OPTION_HAS_MENU_BAR
    @send NewsMenuDisconnect::MSG_GEN_SET_NOT_ENABLED(VUM_NOW) ;
@endif
    ForceCloseMedium() ;
    @send oself::MSG_NP_UPDATE_CONNECTION_STATE() ;
    @send NewsApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}


/**********************************************************************
 * END OF FILE:  PROCESS.GOC - Process Class Code
 **********************************************************************/

