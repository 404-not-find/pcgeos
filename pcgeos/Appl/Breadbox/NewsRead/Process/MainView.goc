@include <StdApp.goh>
@include <INetMsg/ADL.goh>

@include "Extern.goh"
@include "NewsRead.goh"
@include "NewsData.goh"

@include "Localize/Strings.goh"



extern Boolean G_postWinVisible ;
extern dword G_headerLen ;
NewsSenderName G_newsSender ;
byte G_data[1024] ;
extern word G_mainListMessage ;
extern NewsgroupEntry *G_group ;


word G_readCurrentGroup = 0xFFFF ;
word G_readCurrentThread = 0xFFFF ;
word G_readCurrentArticle = 0xFFFF ;


/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_MAIN_VIEW_SHOW_NOTHING {

    @send NewsArticleView::MSG_GEN_SET_NOT_USABLE(
                                            VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
    @send NewsArticleClickView::MSG_GEN_SET_NOT_USABLE(
                                            VUM_DELAYED_VIA_APP_QUEUE);
    @send NewsArticleNothingView::MSG_GEN_SET_USABLE(
                                            VUM_DELAYED_VIA_APP_QUEUE);
@endif

    /* disable copy, print, reply */
@ifdef COMPILE_OPTION_RIGHT_TOOLS
    @send CopyAction::MSG_GEN_SET_NOT_ENABLED(
                                            VUM_DELAYED_VIA_APP_QUEUE);
@endif
    @send PrintAction::MSG_GEN_SET_NOT_ENABLED(
                                            VUM_DELAYED_VIA_APP_QUEUE);
    @send RespondAction::MSG_GEN_SET_NOT_ENABLED(
                                            VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_HAS_MENU_BAR
    @send MenuReplyAction::MSG_GEN_SET_NOT_ENABLED(
                                            VUM_DELAYED_VIA_APP_QUEUE);
@endif
}

/*************************************************************************/


/*-------------------------------------------------------------------------
 | Method:  NewsProcessClass::MSG_NEWS_SHOW_ARTICLE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Show the article being passed in the given text object.
 |
 | Inputs:
 |    optr largeTextObj           -- Object to put text into
 |    word groupIndex             -- Group index to use in database
 |    word threadIndex            -- thread identifier
 |    word articleIndex           -- article identifier
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
@extern method NewsProcessClass, MSG_NEWS_SHOW_ARTICLE
{
    TCHAR *p_subject ;
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
    TCHAR buffer[200] ;
@endif

    G_readCurrentGroup = groupIndex ;
    G_readCurrentThread = threadIndex ;
    G_readCurrentArticle = articleIndex ;

    @send oself::MSG_NEWS_READ_UPDATE_NAVI() ;

    NewsDataSelectGroup(groupIndex) ;
    NewsDataGroupSelectThread(threadIndex) ;
    NewsDataThreadSelectArticle(articleIndex) ;

    if(G_article->AE_flags & AEF_HAS_BODY_TEXT) {

        @send application::MSG_GEN_APPLICATION_MARK_BUSY() ;

        if(!(G_article->AE_flags & AEF_PARSED) && 
            !(G_article->AE_flags & AEF_ERROR)) {
        
            /* parse the article structure */
            /* find if we have attachments */
            /* find where is the relevant text message part */
            @call oself::MSG_NP_MAIN_VIEW_PARSE_MESSAGE() ;
        }

        @call NewsArticleView::MSG_GEN_SET_USABLE(
                                                VUM_NOW);
@ifdef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
        @call NewsArticleView::MSG_GEN_SET_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
        @call NewsArticleClickView::MSG_GEN_SET_NOT_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
        @call NewsArticleNothingView::MSG_GEN_SET_NOT_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif

        @call largeTextObj::MSG_META_SUSPEND() ;
        @call largeTextObj::MSG_VIS_TEXT_DELETE_ALL() ;


@ifndef COMPILE_OPTION_HAS_MENU_BAR
        if(@call NewsOptionsBooleanGroup::
                    MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS()) {
@else
        if(@call NewsHideHeader::
                    MSG_GEN_GET_USABLE()) {
@endif

            VisTextRange vtr ;
//            BBFixed bbValue = {5, 0} ;

            @call largeTextObj::MSG_VIS_TEXT_SET_BORDER_BITS(0, VTPBF_BOTTOM,
					      0,
					      VIS_TEXT_RANGE_SELECTION);
	        @call largeTextObj::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0, 0, TS_BOLD,
						   0,
						   VIS_TEXT_RANGE_SELECTION);
        
            NewsDataArticleAppendHeadersToText(largeTextObj) ;

            @call largeTextObj::MSG_VIS_TEXT_GET_SELECTION_RANGE(&vtr);
            @call largeTextObj::MSG_NEWS_TEXT_RECALC_TAB_WIDTH(vtr.VTR_end);
            @call largeTextObj::MSG_VIS_TEXT_SET_BORDER_BITS(VTPBF_BOTTOM, 0,
					      0,
					      VIS_TEXT_RANGE_SELECTION);

            @call largeTextObj::MSG_VIS_TEXT_SET_LEFT_MARGIN(0, 0,
					      VIS_TEXT_RANGE_SELECTION);
        	@call largeTextObj::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0, TS_BOLD, 0,
						   0,
						   VIS_TEXT_RANGE_SELECTION);
            @call largeTextObj::MSG_VIS_TEXT_APPEND_PTR("\r", 0) ;
        }

        /*
         *  Prepair reply
         */
        (*G_newsSender) = 0 ;

        p_subject = NewsDataLockArticleHeaderLine(G_article, "From: ") ;
        if (p_subject)  {

            ParseSenderName(p_subject + 6, G_newsSender);

            NewsDataUnlockHeaderLine(p_subject) ;
        }

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
        p_subject = NewsDataLockArticleHeaderLine(G_article, "Subject: ") ;
        if (p_subject)  {

            sprintf(buffer, "Message: \"%s\"", p_subject + 9) ;

            @call MessageWindow::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;
            
            NewsDataUnlockHeaderLine(p_subject) ;
        }
@endif

        G_headerLen = @call largeTextObj::MSG_VIS_TEXT_GET_TEXT_SIZE() ;

        NewsDataArticleAppendBodyToText(largeTextObj) ;

        @call largeTextObj::MSG_VIS_TEXT_SELECT_START() ;

        if(@call largeTextObj::
                        MSG_VIS_TEXT_GET_TEXT_SIZE()) {

@ifdef COMPILE_OPTION_RIGHT_TOOLS
            @send CopyAction::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
            @send PrintAction::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_HAS_MENU_BAR
            @send MenuDiscardAction::MSG_GEN_SET_ENABLED(
                                                    VUM_DELAYED_VIA_APP_QUEUE);
@endif
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
            @send DiscardAction::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
            @send MessageNaviGroup::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif

        } else {
@ifdef COMPILE_OPTION_RIGHT_TOOLS

            @send CopyAction::MSG_GEN_SET_NOT_ENABLED(
                                                    VUM_DELAYED_VIA_APP_QUEUE);
@endif
            @send PrintAction::MSG_GEN_SET_NOT_ENABLED(
                                                       VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_HAS_MENU_BAR
            @send MenuDiscardAction::MSG_GEN_SET_NOT_ENABLED(
                                                    VUM_DELAYED_VIA_APP_QUEUE);
@endif
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW

            @send DiscardAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
        }

        if(!G_postWinVisible) {
            @send RespondAction::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_HAS_MENU_BAR
            @send MenuReplyAction::MSG_GEN_SET_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
        }

        @call largeTextObj::MSG_VIS_TEXT_SET_PARA_MARGIN(8, TEXT_ADDRESS_PAST_END, 0);
        @call largeTextObj::MSG_META_UNSUSPEND() ;

@ifdef COMPILE_OPTION_RIGHT_TOOLS
        if(G_article->AE_flags & AEF_ATTACHMENTS) {
        
            @send SaveFilesAction::MSG_GEN_SET_USABLE(
                                            VUM_DELAYED_VIA_APP_QUEUE);

        } else {
        
            @send SaveFilesAction::MSG_GEN_SET_NOT_USABLE(
                                            VUM_DELAYED_VIA_APP_QUEUE);
        }
@endif 

        /* mark the article read */
        if(!(G_article->AE_flags & AEF_READ)) {

			G_article->AE_flags |= AEF_READ;

			G_group->NE_unread -- ;
			BucketHugeArrayDirty(G_group) ;
			G_thread->TE_unread -- ;
			BucketHugeArrayDirty(G_thread) ;

			NewsDataArticleDirty(G_article);

            if(G_mainListMessage != 0xFFFF) {

                /* update the screen */
                @send ,forceQueue+ oself::MSG_NP_MAIN_LIST_MONIKER_QUERY(
                                    @NewsArticleList, G_mainListMessage);
            }          
        }

        @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;

    } else {
    
@ifdef COMPILE_OPTION_RIGHT_TOOLS
        @send SaveFilesAction::MSG_GEN_SET_NOT_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
        @send CopyAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
        @send PrintAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
        @send RespondAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send MenuDiscardAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW

        @send DiscardAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif

@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send MenuReplyAction::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif

        @send NewsArticleView::MSG_GEN_SET_NOT_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@ifdef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
        @send NewsArticleClickView::MSG_GEN_SET_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
        @send NewsArticleNothingView::MSG_GEN_SET_NOT_USABLE(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
        @send MessageNaviGroup::MSG_GEN_SET_NOT_ENABLED(
                                                VUM_DELAYED_VIA_APP_QUEUE);
@endif
    }

    NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;
    NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
    NewsDataSelectGroup(NEWS_DATA_NEWSGROUP_NONE) ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_META_EXPOSED {
    
@ifdef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
    WWFixedAsDWord pointSizeWW ;
    GStateHandle gstate;
    RectDWord rect ;

    MemLock(HandleOf(@ClickHereToDownloadMsg)) ;

    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    /* draw "click here to download the message text." */
    @call NewsArticleClickView::
                        MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect) ;

    GrGetFont(gstate, &pointSizeWW) ;
	
	pointSizeWW = MakeWWFixed(IntegerOf(pointSizeWW) + 4) ;
	 
	GrSetFont(gstate, FID_DTC_URW_SANS, pointSizeWW) ;

    GrSetTextStyle(gstate, TS_BOLD, 0) ;

    GrDrawText(gstate, 
                (rect.RD_left +  rect.RD_right) / 2 -
                    GrTextWidth(gstate, LMemDeref(@ClickHereToDownloadMsg), 0) / 2,
                 (rect.RD_top +  rect.RD_bottom) / 2,
                   LMemDeref(@ClickHereToDownloadMsg), 0 );
    
    GrEndUpdate(gstate);
    GrDestroyState(gstate);
    MemLock(HandleOf(@ClickHereToDownloadMsg)) ;
@endif

}

/*************************************************************************/

@extern method NewsProcessClass, MSG_META_START_SELECT {

    /* get the messages body */
    @send oself::MSG_NEWS_DOWNLOAD_ARTICLE();
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NP_MAIN_VIEW_PARSE_MESSAGE{

    dword bodyLines, headerLines ;
    Boolean attachments = FALSE ;
    Boolean header = TRUE ;

    dword loopCount = 0 ;
    dword gettingLines = 0 ;

    ADHandle adhandle ;
    ADError adstat ;
    ADState adstate ;

    bodyLines = BucketHugeArrayGetCount(
                        G_databaseVMFH, G_article->AE_body) ;
    headerLines = BucketHugeArrayGetCount(
                            G_databaseVMFH, G_article->AE_headers) ;

    /* init the ADL object */
    adhandle = ADCreate(&adstat) ;

    if(adstat == ADE_NO_ERROR) {

        MemHandle textBlock ;
        TCHAR *p_textBlock ;

        textBlock = MemAlloc(1, HF_SWAPABLE, HAF_ZERO_INIT) ;

        /* loop passing the lines trought */
        loopCount = 0 ;
        while(header ? 
                (loopCount < headerLines) :
                (loopCount < (bodyLines + 1)) ) {

            byte *elemPtr ;
            word elemSize ;

            /* put one line into the machine */
            if(header) {

                /* lock the line */
                BucketHugeArrayLock(
                            G_databaseVMFH,
                            G_article->AE_headers,
                            loopCount,
                            &elemPtr,
                            &elemSize) ;
                
                /* put the line */
                adstat = ADPutLine(
                            adhandle, (TCHAR *) elemPtr, 
                            G_data, &adstate, ADPLF_DECODE) ;

                BucketHugeArrayUnlock(elemPtr) ;

            } else {
            
                /* if send read body */
                if(loopCount) {

                    /* lock the line */
                    BucketHugeArrayLock(
                                G_databaseVMFH,
                                G_article->AE_body,
                                loopCount - 1,
                                &elemPtr,
                                &elemSize) ;

                    /* put the line */
                    adstat = ADPutLine(
                                adhandle, (TCHAR *) elemPtr, 
                                G_data, &adstate, ADPLF_DECODE) ;

                    BucketHugeArrayUnlock(elemPtr) ;

                } else {

                    TCHAR nullString ;
                
                    nullString = 0 ;

                    /* send header separator */
                    adstat = ADPutLine(
                                adhandle, &nullString, 
                                G_data, &adstate, ADPLF_DECODE) ;

                }
            }

            if(adstat == ADE_NO_ERROR) {
            
                /* add decoded data if no file name is attached */
                /* if mime and "text/plain" or none mime and level 0 */
                if(adstate.ADS_length) {

                    MemHandle dataBlock ;
                    Boolean add ;

                    dataBlock = ADGetVar(adhandle, ADV_FILENAME +
                                                adstate.ADS_lev, 0) ;

                    /* decide if the next part is text or not */
                    if(dataBlock) {
                
                        attachments = TRUE ;
                        MemFree(dataBlock) ;

                    } else {

                        add = TRUE ;
                        if(adstate.ADS_flags & ADSF_MIME) {

                            dataBlock = ADGetVar(adhandle, ADV_CONTENT_TYPE +
                                                        adstate.ADS_lev, 0) ;
                
                            if(dataBlock) {
                        
                                if(LocalCmpStringsNoCase(
                                        MemDeref(dataBlock),
                                        "text/plain",
                                        10)) {
                        
                                    add = FALSE ;
                                }

                                MemFree(dataBlock) ;
                            }
                        } 
 
                        if(add) {
                
                            word len ;

                            /* add to the block we have */
                            p_textBlock = MemLock(textBlock) ;

                            len = strlen(p_textBlock) ;

                            MemReAlloc(
                                textBlock,
                                len + adstate.ADS_length + 1,
                                0) ;
                        
                            p_textBlock = MemDeref(textBlock) ;

                            memcpy(
                                p_textBlock + len,
                                G_data,
                                adstate.ADS_length) ;

                            p_textBlock[len + adstate.ADS_length] = 0 ;

                            /* loop puts out the lines */
                            while(strchr(p_textBlock, '\r')) {

                                (*strchr(p_textBlock, '\r')) = 0 ;

                                /* if we have no filename then this is text */
                                BucketHugeArrayAppend(
                                    G_databaseVMFH,
                                    G_article->AE_body,
                                    strlen(p_textBlock) + 1,
                                    p_textBlock) ;

                                gettingLines++ ;

                                /* shrunk the block */
                                memmove(p_textBlock, 
                                    p_textBlock + (strlen(p_textBlock) + 1),
                                    strlen(p_textBlock + (strlen(p_textBlock) + 1)) + 1) ;
                            }

                            MemReAlloc(textBlock, strlen(p_textBlock) + 1, 0) ;

                            MemUnlock(textBlock) ;

                            G_article->AE_separationLine = bodyLines ;
                        }
                    }
                }
            
            } else {
                            
                G_article->AE_flags |= AEF_ERROR ;

                /* remove lines added */
                BucketHugeArrayDelete(
                                G_databaseVMFH,
                                G_article->AE_body,
                                gettingLines, bodyLines) ;

                goto errorEnd ;
            }

            /* finish up handling this line */
            loopCount++ ;

            if(header && (loopCount == headerLines)) {
        
                header = FALSE ;
                loopCount = 0 ;
            }
        }

        /* put out the rest of the data */
        p_textBlock = MemLock(textBlock) ;

        if(*p_textBlock) {
        
            /* if we have no filename then this is text */
            BucketHugeArrayAppend(
                G_databaseVMFH,
                G_article->AE_body,
                strlen(p_textBlock) + 1,
                p_textBlock) ;
        
        }

        MemFree(textBlock) ;

        /* save if we found attachments */
        if(attachments) {
    
            G_article->AE_flags |= AEF_ATTACHMENTS ;
        }

        /* show that we sucessfully parsed the article */
        G_article->AE_flags |= AEF_PARSED ;

        /* mark article dirty */
        NewsDataArticleDirty(G_article) ;

    errorEnd:
    
        ADDestroy(adhandle) ;
    }
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NEWS_UPDATE_ARTICLE2 {

    @send oself::MSG_NEWS_SHOW_ARTICLE(
                                @ArticleText,
                                G_readCurrentGroup,
                                G_readCurrentThread,
                                G_readCurrentArticle) ;
}

/*************************************************************************/

@ifdef COMPILE_OPTION_HAS_MENU_BAR
@extern method NewsProcessClass, MSG_NEWS_SHOW_HEADERS {

    @send NewsShowHeader::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
    @send NewsHideHeader::MSG_GEN_SET_USABLE(VUM_NOW) ;

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
    if(@call MessageWindow::MSG_GEN_GET_USABLE()) {
        
        @send oself::MSG_NEWS_UPDATE_ARTICLE2() ;
    }
@endif
}
@endif

/*************************************************************************/

@ifdef COMPILE_OPTION_HAS_MENU_BAR
@extern method NewsProcessClass, MSG_NEWS_HIDE_HEADERS {

    @send NewsHideHeader::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE) ;
    @send NewsShowHeader::MSG_GEN_SET_USABLE(VUM_NOW) ;

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
    if(@call MessageWindow::MSG_GEN_GET_USABLE()) {
        
        @send oself::MSG_NEWS_UPDATE_ARTICLE2() ;
    }
@endif
}
@endif 

/*************************************************************************/

@extern method NewsProcessClass, MSG_NEWS_READ_NEXT {
    
//    ExtUITreeCacheElement lineData ;
    word thread, article ;
    word line ;

    @send application::MSG_GEN_APPLICATION_MARK_BUSY() ;
    if(G_readCurrentGroup != 0xFFFF) {

        word /*groupCount, */threadCount, articleCount ;
    
        NewsDataSelectGroup(G_readCurrentGroup) ;
        NewsDataGroupSelectThread(G_readCurrentThread) ;

//        groupCount = NewsDataCountNewsgroups() ;
        threadCount = NewsDataGroupCountThreads() ;
        articleCount = NewsDataThreadCountArticles() ;

        NewsDataGroupUnselectThread() ;

        thread = G_readCurrentThread ;
        article = G_readCurrentArticle + 1 ;
        
        do {

            if(article < articleCount) {
        
                break ;
            }

            thread++ ;
            article = 0 ;

            if(thread < threadCount) {

                NewsDataGroupSelectThread(thread) ;

                articleCount = NewsDataThreadCountArticles() ;

                NewsDataGroupUnselectThread() ;
            }
             
        } while(thread < threadCount) ;

        NewsDataUnselectGroup() ;

        if(thread < threadCount) {

            /* download article? */
            if(!GetMessageBody(
                        G_readCurrentGroup,
                        thread,
                        article)) {

                @call oself::MSG_NEWS_SHOW_ARTICLE(
                              @ArticleText,
                              G_readCurrentGroup,
                              thread,
                              article) ;
            }

            /* find line if shown */
            line = @call NewsArticleList2::MSG_EXTUI_TREE_FIND_NODE(
                        article ? (thread + 1) : 0xFFFFFFFF, 
                        article ? (article - 1) : thread) ;

            /* update the lines selected */
            if(line != 0xFFFF) {

               @send NewsArticleList2::MSG_EXTUI_TABLE_UPDATE_LINE(line) ;
            }
//            @send oself::MSG_NP_ARTICLE_TREE_INITIALIZE() ;
        }
    }

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
    @send oself::MSG_NEWS_READ_UPDATE_NAVI() ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NEWS_READ_PREV {

//    ExtUITreeCacheElement lineData ;
    word thread, article ;
//    word line ;

    @send application::MSG_GEN_APPLICATION_MARK_BUSY() ;
    if(G_readCurrentGroup != 0xFFFF) {

        word /*groupCount, threadCount,*/ articleCount ;
    
        NewsDataSelectGroup(G_readCurrentGroup) ;
        NewsDataGroupSelectThread(G_readCurrentThread) ;

//        groupCount = NewsDataCountNewsgroups() ;
//        threadCount = NewsDataGroupCountThreads() ;
        articleCount = NewsDataThreadCountArticles() ;

        NewsDataGroupUnselectThread() ;

        thread = G_readCurrentThread ;
        article = G_readCurrentArticle - 1 ;
        
        do {

            if(article != 0xFFFF) {
        
                break ;
            }

            thread-- ;

            if(thread != 0xFFFF) {

                NewsDataGroupSelectThread(thread) ;

                articleCount = NewsDataThreadCountArticles() ;
    
                article = articleCount - 1 ;

                NewsDataGroupUnselectThread() ;
            }
             
        } while(thread != 0xFFFF) ;

        NewsDataUnselectGroup() ;

        if(thread != 0xFFFF) {

            /* download article? */
            if(!GetMessageBody(
                        G_readCurrentGroup,
                        thread,
                        article)) {

                @call oself::MSG_NEWS_SHOW_ARTICLE(
                              @ArticleText,
                              G_readCurrentGroup,
                              thread,
                              article) ;
            }

            /* find line if shown */
//            line = 0 ;

            /* update the lines selected */
            @send oself::MSG_NP_ARTICLE_TREE_INITIALIZE() ;
//            @send NewsArticleList2::MSG_EXTUI_TABLE_UPDATE_LINE(line) ;
        }
    }

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
    @send oself::MSG_NEWS_READ_UPDATE_NAVI() ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NEWS_READ_DISCARD {

//    word loopCount, lineCount ;
//    ExtUITreeCacheElement lineData ;
	word thread = G_readCurrentThread,
		 article = G_readCurrentArticle, 
		 articleCount, threadCount;

    @send application::MSG_GEN_APPLICATION_MARK_BUSY() ;
    NewsDataLock();
    
    NewsDataSelectGroup(G_readCurrentGroup) ;
    NewsDataGroupSelectThread(G_readCurrentThread) ;
    NewsDataThreadDeleteArticle(G_readCurrentArticle) ;

	articleCount = NewsDataThreadCountArticles();
    if (!articleCount) {
                    
        NewsDataGroupUnselectThread() ;
        NewsDataGroupDeleteThread(G_readCurrentThread) ;                

		threadCount = NewsDataGroupCountThreads();
		/* If the group is empty, or if last thread was discarded
		   (no, that's not necessarily the same thing), dismiss window. */
		if (!threadCount || ((thread >= threadCount)))
			thread = 0xFFFF;
    
    } else {

		/* If the last article in a thread was discarded, advance to
		   first article of next thread. */
		if (article >= articleCount)
		{
			/* If there is no next thread, dismiss window. */
			if ((++ thread) >= threadCount)
				thread = 0xFFFF;
			else
				article = 0;
		}

		NewsDataGroupUnselectThread() ;
    }

    NewsDataUnselectGroup() ;

    NewsDataUnlock() ;
    BucketHugeArraySave();
    VMSave(G_databaseVMFH);

	/* thread and article point to the next available article.
	   Download it if it's there.  Otherwise, dismiss window. */
	if (thread != 0xFFFF && 
		!GetMessageBody(G_readCurrentGroup, thread, article))
	{
        @call oself::MSG_NEWS_SHOW_ARTICLE(
                      @ArticleText,
                      G_readCurrentGroup,
                      thread,
                      article) ;
    }
	else
	{
		@send oself::MSG_NEWS_READ_DELETE_NOTIFY(
								G_readCurrentGroup, 
								G_readCurrentThread,
								G_readCurrentArticle) ;
	}

    @send oself::MSG_NP_ARTICLE_TREE_INITIALIZE() ;

    @send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
	@send oself::MSG_NEWS_READ_UPDATE_NAVI() ;
}

/*************************************************************************/

@extern method NewsProcessClass, MSG_NEWS_READ_UPDATE_NAVI {

    word threadCount, articleCount ;

    if( (G_readCurrentGroup == 0xFFFF) ||
        (G_readCurrentThread == 0xFFFF) ||
        (G_readCurrentArticle == 0xFFFF)  ) {
    
        return ;
    }

    NewsDataSelectGroup(G_readCurrentGroup) ;
    NewsDataGroupSelectThread(G_readCurrentThread) ;
                    
    threadCount = NewsDataGroupCountThreads() ;
    articleCount = NewsDataThreadCountArticles() ;

    NewsDataGroupUnselectThread() ;
    NewsDataUnselectGroup() ;

    /* set prev */
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW

@ifdef COMPILE_OPTION_HAS_MENU_BAR
    @send MenuPrevAction::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
    @send NaviPrevAction::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif

    if( (G_readCurrentArticle) ||
        (G_readCurrentThread)   ) {

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW

@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send MenuPrevAction::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
        @send NaviPrevAction::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
    }

    /* set next */
@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
@ifdef COMPILE_OPTION_HAS_MENU_BAR
    @send MenuNextAction::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
    @send NaviNextAction::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
    if( ((G_readCurrentArticle + 1)< articleCount) ||
        ((G_readCurrentThread + 1) < threadCount)   ) {

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
@ifdef COMPILE_OPTION_HAS_MENU_BAR
        @send MenuNextAction::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
        @send NaviNextAction::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE) ;
@endif
    }
}

/*************************************************************************/

@ifndef COMPILE_OPTION_DIRECT_MESSAGE_VIEW
@extern method NewsProcessClass, MSG_NEWS_READ_DELETE_NOTIFY {

    if( (group == G_readCurrentGroup) &&
        (thread == G_readCurrentThread) &&
        (article == 0xFFFF || article == G_readCurrentArticle)  ) {

        @send MessageWindow::MSG_GEN_DISPLAY_CLOSE() ;

        G_readCurrentGroup = 0xFFFF ;    
        G_readCurrentThread = 0xFFFF ;
        G_readCurrentArticle = 0xFFFF ;

    } else {

        if(thread <= G_readCurrentThread) {
         
            if(thread == G_readCurrentThread && article != 0xFFFF) {

                if(article < G_readCurrentArticle) {
                
                    if (G_readCurrentArticle != 0xFFFF)
		        G_readCurrentArticle-- ;
                }
            
            } else if (article == 0xFFFF) {

                if (G_readCurrentThread != 0xFFFF)
                    G_readCurrentThread-- ;
            }
        }
        
        @send ,forceQueue, checkDuplicate oself::MSG_NEWS_READ_UPDATE_NAVI() ;
    }
}
@endif

/*************************************************************************/

