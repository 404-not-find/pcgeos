//
//  Projekt:	MagicBoard
//
//  Datei:      vis/piece.goc
//
//  Autor:      Jirka Kunze
//

@include "magic.goh"
@include "externs.goh"

@classdecl MagicPieceClass;

//
//  Methoden fÅr MagicPieceClass
//

//
//  void MSG_VIS_DRAW(DrawFlags drawFlags, GStateHandle gstate)
//
@extern method MagicPieceClass, MSG_VIS_DRAW
{
    byte    fillColor, topColor, bottomColor;

    // setze Farben
    if((pself->MPI_state & MPCS_SELECTED) ||
       (pself->MPI_state & MPCS_FOCUS))
    {
        fillColor = DARK_GRAY;
        bottomColor = WHITE;
        topColor = BLACK;
    } else {
        fillColor = LIGHT_GRAY;
        bottomColor = BLACK;
        topColor = WHITE;
    }

    // zeichne Hintergrund fÅr Piece
    GrSetAreaColor(gstate, CF_INDEX, fillColor, 0, 0);
    GrFillRect(gstate, pself->VI_bounds.R_left, 
               pself->VI_bounds.R_top,
               pself->VI_bounds.R_right, 
               pself->VI_bounds.R_bottom);

    // zeichne Rahmen fÅr Piece
    GrSetLineColor(gstate, CF_INDEX, topColor, 0, 0);
    GrDrawHLine(gstate, pself->VI_bounds.R_left,
                pself->VI_bounds.R_top,
                pself->VI_bounds.R_right);
    GrDrawVLine(gstate, pself->VI_bounds.R_left,
                pself->VI_bounds.R_top,
                pself->VI_bounds.R_bottom);
    GrSetLineColor(gstate, CF_INDEX, bottomColor, 0, 0);
    GrDrawHLine(gstate, pself->VI_bounds.R_left,
                pself->VI_bounds.R_bottom,
                pself->VI_bounds.R_right);
    GrDrawVLine(gstate, pself->VI_bounds.R_right,
                pself->VI_bounds.R_top,
                pself->VI_bounds.R_bottom);

    // zeichne Inhalt fÅr Piece
    GrSetAreaColor(gstate, CF_INDEX, pself->MPI_number, 0, 0);
    GrFillRect(gstate, pself->VI_bounds.R_left+3, 
               pself->VI_bounds.R_top+3,
               pself->VI_bounds.R_right-3, 
               pself->VI_bounds.R_bottom-3);

    @callsuper();
}

@ifndef NOKIA
//
//  void MSG_VIS_LOST_GADGET_EXECL()
//
@extern method MagicPieceClass, MSG_VIS_LOST_GADGET_EXCL 
{
    if(pself->MPI_state & MPCS_SELECTED)
    {
        pself->MPI_state = 0;
        @call @visParent::MSG_MAGICCONTENT_USER_ACTION(pself->MPI_colum, pself->MPI_line);
    }

    @call self::MSG_VIS_RELEASE_MOUSE();                     
}

//
//  void MSG_META_START_SELECT(MouseReturnParams *retVal,
//				 sword xPosition, yPosition, word inputState)
//
@extern method MagicPieceClass, MSG_META_START_SELECT 
{
    EventHandle             pieceEvent;
    Boolean         gameEnd = TRUE;

    // ÅberprÅfe ob Spiel beendet ist
    pieceEvent = @record MagicPieceClass::MSG_MAGICPIECE_TEST(&gameEnd);
    @send MagicContent::MSG_VIS_SEND_TO_CHILDREN(pieceEvent);
    if(!(gameEnd))
    {

        // wenn Spiel noch nicht beendet ist
        // Pieceobject als selektiert kennzeichnen
        pself->MPI_state = MPCS_SELECTED | MPCS_MOUSE_DOWN;
    }

    @call self::MSG_VIS_GRAB_MOUSE();
    @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);

    // Object neu zeichnen
    @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
}

//
//  void MSG_META_END_SELECT(MouseReturnParams *retVal,
//			  sword xPosition, yPosition, word inputState)	
//
@extern method MagicPieceClass, MSG_META_END_SELECT 
{
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);

    // setze MPI_state zurÅck
    pself->MPI_state = 0;

    retVal->flags = MRF_PROCESSED;
}

//
//  void MSG_META_PTR(MouseReturnParams *retVal,
//			 sword xPosition, yPosition, word inputState)
//
@extern method MagicPieceClass, MSG_META_PTR 
{
    if(pself->MPI_state & MPCS_MOUSE_DOWN)
    {

        // prÅfe ob Mouse sich Åber Object befindet
        if((xPosition < pself->VI_bounds.R_left) || (xPosition > pself->VI_bounds.R_right) ||
           (yPosition < pself->VI_bounds.R_top) || (yPosition > pself->VI_bounds.R_bottom))
        {

            // wenn nein Object ist nicht selectiert
            pself->MPI_state = pself->MPI_state & ~MPCS_SELECTED;

        } else {

            // wenn ja Object als selectiert kennzeichnen
            pself->MPI_state = pself->MPI_state | MPCS_SELECTED;
        }

        // Object neu zeichnen
        @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
    }

    retVal->flags = MRF_PROCESSED;
}
@endif

//
//  void MSG_MAGICPIECE_TEST(Boolean *gameEnd)
//
@extern method MagicPieceClass, MSG_MAGICPIECE_TEST 
{
    if(pself->MPI_number == BLACK)
        *gameEnd = FALSE;
}

//
//  void MSG_MAGICPIECE_USER_SET(word colum, word line)
//
@extern method MagicPieceClass, MSG_MAGICPIECE_USER_SET 
{
    if((pself->MPI_colum == colum) || (pself->MPI_line == line))
    {
        if(pself->MPI_number == WHITE)
        {
            pself->MPI_number = BLACK;
        }else{
            pself->MPI_number = WHITE;
        }
    }
}

//
//  void MSG_MAGICPIECE_COMPUTER_SET(word colum, word line)
//
@extern method MagicPieceClass, MSG_MAGICPIECE_COMPUTER_SET 
{
    if((pself->MPI_colum == colum) || (pself->MPI_line == line))
    {
        if(pself->MPI_number == BLACK)
        {
            pself->MPI_number = WHITE;
        }else{
            pself->MPI_number = BLACK;
        }
    }
}

//
//  void MSG_MAGICPIECE_SET_POSITION(word colum, word line)
//
@extern method MagicPieceClass, MSG_MAGICPIECE_SET_POSITION 
{
    pself->MPI_colum = colum;
    pself->MPI_line = line;
}

//
// void MSG_MAGICPIECE_CLEAR()
//
@extern method MagicPieceClass, MSG_MAGICPIECE_CLEAR 
{
    pself->MPI_number = WHITE;
}


