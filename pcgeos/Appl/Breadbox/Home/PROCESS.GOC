@include <stdapp.goh>
@include "homeapp.goh"
@include "home.goh"
#include <token.h>
#include <timedate.h>
#include <Ansi/string.h>
#include <gstring.h>
#include <driver.h>
#include <math.h>
#include <initfile.h>

#define PRE_BUILD_LIST     0
#define PRE_DO_EVENTS      1
#define DIM_DELAY_TICKS    15

static MemHandle randomEventBlock = NullHandle;
extern word PowerCodeChangePort(Handle driver, word port);

@extern object EventsWindow;
@extern object EventsText;
@extern chunk MsgConfirmPortCorrect;
@extern chunk MsgConfirmMouseUsingPort;
@extern chunk MsgSelectAnotherPort;
@extern chunk SundayStr;
@extern chunk MondayStr;
@extern chunk TuesdayStr;
@extern chunk WednesdayStr;
@extern chunk ThursdayStr;
@extern chunk FridayStr;
@extern chunk SaturdayStr;
@extern chunk TurnOnStr;
@extern chunk TurnOffStr;
@extern chunk DimmerStr;
@extern chunk BrighterStr;
@extern chunk NullStr;
@extern chunk PresetStr;
@extern chunk MinStr;
@extern chunk OnceStr;

TimerHandle hItemDimDelay = NullHandle;
word wItemDimDelay = 0;
byte byLastItemDimValue;

/*******************************************************************************
* HOME PROCESS CLASS                                                           *
*******************************************************************************/
@extern method HomeProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN
{
         dword HomeTokenChars;
         TokenFlags HomeTokenFlags;

         @callsuper();
         HomeTokenChars = TOKEN_CHARS('H', 'O', (dword) 'M',(dword) 'D');

         if (!TokenGetTokenInfo(HomeTokenChars, 16431,
                                                &HomeTokenFlags)) {
        TokenDefineToken(HomeTokenChars,
                         16431,
                         @HomeDocMonikerList,
                         0);
         }
}

@extern method HomeProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {
   TimerDateAndTime now;
   word ticksToWait, TimerID;

   @callsuper();
   TimerGetDateAndTime(&now);
   ticksToWait = (60 - now.TDAT_seconds) * 60;
   Timer = TimerStart(TIMER_EVENT_CONTINUAL, oself, ticksToWait,
                      MSG_PROCESS_TIMER_CLICK, 3600, &TimerID);
   @send self::MSG_PROCESS_TIMER_CLICK();
   GCNListAdd(oself, MANUFACTURER_ID_GEOWORKS, GCNSLT_DATE_TIME);
}

@extern method HomeProcessClass, MSG_NOTIFY_DATE_TIME_CHANGE {
   TimerDateAndTime now;
   word ticksToWait, TimerID;
   void BuildRandomEventList(TimerDateAndTime);

   TimerStop(Timer, 0);
   TimerGetDateAndTime(&now);
   ticksToWait = (60 - now.TDAT_seconds) * 60;
   Timer = TimerStart(TIMER_EVENT_CONTINUAL, oself, ticksToWait,
                      MSG_PROCESS_TIMER_CLICK, 3600, &TimerID);
   MemFree(randomEventBlock); /* force a rebuild of the random event list */
   BuildRandomEventList(now);
   @send self::MSG_PROCESS_TIMER_CLICK();
}

@extern method HomeProcessClass, MSG_PROCESS_TIMER_CLICK {
   MemHandle mem;
   VMBlockHandle block;
   ChunkHandle eventHandle;
   HomeMapBlock *mapBlock;
   HomeEventBlockHeader *eventBlock;
   HomeEventBlock *event;
   TimerDateAndTime now;
   char NewMonikerDate[30], NewMonikerTime[12];
   word loop;
   void BuildRandomEventList(TimerDateAndTime);
   void ProcessRandomEvents(TimerDateAndTime);

   TimerGetDateAndTime(&now);
   LocalFormatDateTime(NewMonikerDate, DTF_LONG_CONDENSED, &now);
   LocalFormatDateTime(NewMonikerTime, DTF_HM, &now);
   strcat(NewMonikerDate, " - ");
   strcat(NewMonikerDate, NewMonikerTime);
   @call HomeTimeDate::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(NewMonikerDate, VUM_NOW);

   if (document == NullHandle) return;
   block = VMGetMapBlock(document);
   mapBlock = VMLock(document, block, &mem); /* find the block of events for today */
   block = mapBlock->HMB_systemEventBlock[now.TDAT_dayOfWeek];
   VMUnlock(mem);
   if ((now.TDAT_hours == 0) && (now.TDAT_minutes == 0))
      BuildRandomEventList(now); /* we build the list first so random events could happen at midnight */
   eventBlock = VMLock(document, block, &mem);
   eventHandle = eventBlock->HEBH_firstEvent;
   for (loop = eventBlock->HEBH_numEvents ; loop > 0 ; loop--) { /* loop through all the events for today */
      event = LMemDerefHandles(mem, eventHandle);
      if (event->HEB_hour > now.TDAT_hours) break;     /* stop if we're past the current time */
      if (event->HEB_minute > now.TDAT_minutes) break;
      if ((event->HEB_hour == now.TDAT_hours) &&
          (event->HEB_minute == now.TDAT_minutes) &&
          (event->HEB_plusMinus == 0))/* don't do random events... */ {
         /* we do the event here */
         EventHandle eventToDo;

         eventToDo = @record null::MSG_ITEM_DO_FUNCTION(event->HEB_ownerID, event->HEB_function);
         GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS, eventToDo, NullHandle, GCNLSF_FORCE_QUEUE);
         if (event->HEB_oneShot) { /* delete the event if it's marked "once only" */
            eventToDo = @record null::MSG_ITEM_DELETE_PASSED_EVENT(*event);
            GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS, eventToDo, NullHandle, GCNLSF_FORCE_QUEUE);
            eventBlock = MemDeref(mem); /* deref the block--it's probably moved, now */
         }
      }
      eventHandle = event->HEB_nextEvent;
   }
   VMUnlock(mem);
   if (randomEventBlock != NullHandle) ProcessRandomEvents(now);
}

@extern method HomeProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {
   TimerStop(Timer, 0);
   if (X10Driver != NullHandle) GeodeFreeDriver(X10Driver);
   if (randomEventBlock != NullHandle) MemFree(randomEventBlock);
   GCNListRemove(oself, MANUFACTURER_ID_GEOWORKS, GCNSLT_DATE_TIME);
   return(@callsuper());
}

@extern method HomeProcessClass, MSG_PROCESS_CHANGE_DRIVER_PORT {
	word mousePort, X10Port;
	byte mouseIRQ;

	/* get current X-10 port selection */
	X10Port = PowerCodeGetPort(X10Driver);
	/* Look for the port being used by the mouse, so we don't kill it... */
	if (InitFileReadInteger("mouse", "port", &mousePort)); {
		/* This means the user is employing a mouse that doesn't need a port, 
			so we have to get more esoteric in checking it... 
			We're using the Microsoft-compatible mouse driver interface
			to query the driver's IRQ. Frankly, that's the best I can think of...*/
		asm {
			mov		AX, 0x0024
			int		0x33
			cmp		CH, 2
			jne		cantTell
			mov		mouseIRQ, CL
		}
		/* we now have the IRQ being used by the mouse driver... let's try to change
			it to a port number... */
		mousePort = (7 - mouseIRQ) - 2;
		if ((mousePort == 1) || (mousePort == 2)) goto decodePort;

	  cantTell:	
		/* either it's not a serial mouse, or we can't really tell what port it's using.
			We give the user one last chance to check before initializing the port. */
		MemLock(OptrToHandle(@MsgConfirmPortCorrect));
		if (UserStandardDialog((char *) 0, (char *) 0, (char *) 0, (char *) 0,
			 LMemDeref(@MsgConfirmPortCorrect),
		 //	 "Please make sure the port you have selected is not in use by other hardware, such as a mouse or modem. Are you sure the port is correct?",
          (CDBF_DESTRUCTIVE_ACTION |
			 (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
          (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))) == IC_NO) {
			/* The user has said they're not sure whether the port is cool.
				Reset the selection. */
		   @send PortSelectList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(X10Port, FALSE);
			MemUnlock(OptrToHandle(@MsgConfirmPortCorrect));
			return;
		}		
		MemUnlock(OptrToHandle(@MsgConfirmPortCorrect));
	}
  decodePort:	
	if (selection == mousePort) {
		MemLock(OptrToHandle(@MsgConfirmMouseUsingPort));
		if (UserStandardDialog((char *) 0, (char *) 0, (char *) 0, (char *) 0,
								 LMemDeref(@MsgConfirmMouseUsingPort),
					  //			 "The port you have specified appears to be in use by the mouse. Are you sure the port is correct?",
                         (CDBF_DESTRUCTIVE_ACTION |
                         (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                         (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))) == IC_NO) {
   		/* The port the user selected is being used by the mouse (as far as we can tell...).
			   Reset their selection. */
         @send PortSelectList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(X10Port, FALSE);
			MemUnlock(OptrToHandle(@MsgConfirmMouseUsingPort));
			return;
      }
		MemUnlock(OptrToHandle(@MsgConfirmMouseUsingPort));
	}
   if (PowerCodeChangePort(X10Driver, selection)) {
		MemLock(OptrToHandle(@MsgSelectAnotherPort));
		UserStandardDialog((char *) 0, (char *) 0, (char *) 0, (char *) 0,
								 LMemDeref(@MsgSelectAnotherPort),
						  //		 "Home Automation cannot find a controller on the specified port. Please make another selection.",
                         ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
                         (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
		MemUnlock(OptrToHandle(@MsgSelectAnotherPort));
		 X10Port = PowerCodeGetPort(X10Driver);
		@send PortSelectList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(X10Port, FALSE);
	}
}

@extern method HomeProcessClass, MSG_PROCESS_ADD_EVENT_TO_SYSTEM_LIST {
	MemHandle mem;
	VMBlockHandle block;
	HomeEventBlockHeader *eventBlock;
	ChunkHandle newEventHandle;
	HomeEventBlock *newEvent;
	HomeMapBlock *mapBlock;
	byte loop;
	void SortEvents(MemHandle, ChunkHandle);
	void AddRandomEvent(HomeEventBlock eventToAdd);

	for (loop = 0; loop <7; loop++) {
		if (event.HEB_days & (1 << loop)) {
			block = VMGetMapBlock(document);
			mapBlock = VMLock(document, block, &mem);
			block = mapBlock->HMB_systemEventBlock[loop]; /* find the block for the current day */
			VMUnlock(mem);
			eventBlock = VMLock(document, block, &mem);   /* lock the block & inc. #events */
			eventBlock->HEBH_numEvents++;
			newEventHandle = LMemAlloc(mem, sizeof(HomeEventBlock)); /* allocate new event */
			newEvent = LMemDerefHandles(mem, newEventHandle);
			memcpy(newEvent, &event, sizeof(HomeEventBlock));
			newEvent->HEB_ownerID = blockID;
			SortEvents(mem, newEventHandle);  /* use the same sorting routine as regular events */
			if (event.HEB_plusMinus) { /* if it's a random event... */
				TimerDateAndTime now;

				TimerGetDateAndTime(&now);
				if (event.HEB_days & (1 << now.TDAT_dayOfWeek)) { /* ...and it happens today, ... */
					AddRandomEvent(event); /* ... add it to the random event list. */
				}
			}
			VMDirty(mem);
			VMUnlock(mem);
		}
	}
}

@extern method HomeProcessClass, MSG_PROCESS_SYSTEM_EVENT_CHANGED {

        @call self::MSG_PROCESS_DELETE_SYSTEM_EVENT(oldBlockID, oldEvent);
        @call self::MSG_PROCESS_ADD_EVENT_TO_SYSTEM_LIST(newBlockID, newEvent);
}

@extern method HomeProcessClass, MSG_PROCESS_DELETE_SYSTEM_EVENT {
	MemHandle mem;
	VMBlockHandle block;
	HomeEventBlockHeader *eventBlock;
	ChunkHandle event, prevEvent;
	HomeEventBlock *eventPtr, *prevEventPtr;
	HomeMapBlock *mapBlock;
	byte loop;
	word count;
	void DeleteRandomEvent(HomeEventBlock eventToTrash);

	for (loop = 0; loop <7; loop++) {   /* loop through all the days */
		if (eventToTrash.HEB_days & (1 << loop)) {    /* if the event to be deleted happens today */
			block = VMGetMapBlock(document);
			mapBlock = VMLock(document, block, &mem);
			block = mapBlock->HMB_systemEventBlock[loop]; /* find the block for the current day */
			VMUnlock(mem);
			eventBlock = VMLock(document, block, &mem);   /* lock the block */
			event = eventBlock->HEBH_firstEvent;
			count = 0;
			for (eventPtr = LMemDerefHandles(mem, event);
				  count < eventBlock->HEBH_numEvents; count++) {
			/* traverse the list to find the item to delete */
				if (eventPtr->HEB_ownerID == blockID) {
					if (eventPtr->HEB_hour == eventToTrash.HEB_hour) {
						if (eventPtr->HEB_minute == eventToTrash.HEB_minute) {
							if (event == eventBlock->HEBH_firstEvent) { /* if we're removing the first event */
								eventBlock->HEBH_firstEvent = eventPtr->HEB_nextEvent;
							}
							else {
								prevEventPtr = LMemDerefHandles(mem, prevEvent);
								prevEventPtr->HEB_nextEvent = eventPtr->HEB_nextEvent;
							}
							if (eventPtr->HEB_plusMinus) { /* if it's a random event... */
								TimerDateAndTime now;

								TimerGetDateAndTime(&now);
								if (loop == now.TDAT_dayOfWeek) /* ...and it happens today */
									DeleteRandomEvent(eventToTrash);
							}
							LMemFreeHandles(mem, event);
							eventBlock = MemDeref(mem);
							eventBlock->HEBH_numEvents--;
							VMDirty(mem);
							break;
						}
					}
				}
				prevEvent = event;
				event = eventPtr->HEB_nextEvent;
				eventPtr = LMemDerefHandles(mem, event);
			}
			VMUnlock(mem);
		}
	}
}

@extern method HomeProcessClass, MSG_PROCESS_EVENT_BLOCK_DELETED {
		  MemHandle mem;
		  VMBlockHandle block;
		  HomeEventBlockHeader *eventBlock;
		  ChunkHandle event, prevEvent;
        HomeEventBlock *eventPtr, *prevEventPtr;
        HomeMapBlock *mapBlock;
        byte loop;
        word count, events;
        void DeleteRandomEvent(HomeEventBlock eventToTrash);

        for (loop = 0; loop <7; loop++) {   /* loop through all the days */
                block = VMGetMapBlock(document);
                mapBlock = VMLock(document, block, &mem);
                block = mapBlock->HMB_systemEventBlock[loop]; /* find the block for the current day */
                VMUnlock(mem);
                eventBlock = VMLock(document, block, &mem);   /* lock the block */
                event = eventBlock->HEBH_firstEvent;
                events = eventBlock->HEBH_numEvents;
                count = 0;
                for (eventPtr = LMemDerefHandles(mem, event); count < events ; count++) {
                /* traverse the list to find the items to delete */
                        if (eventPtr->HEB_ownerID == blockID) {
                                if (event == eventBlock->HEBH_firstEvent) { /* if we're removing the first event */
                                        eventBlock->HEBH_firstEvent = 0;
                                }
                                else {
                                        prevEventPtr = LMemDerefHandles(mem, prevEvent);
                                        prevEventPtr->HEB_nextEvent = eventPtr->HEB_nextEvent;
                                }
                                if (eventPtr->HEB_plusMinus) { /* if it's a random event... */
                                        TimerDateAndTime now;

                                        TimerGetDateAndTime(&now);
                                        if (loop == now.TDAT_dayOfWeek) /* ...and it happens today */
                                                DeleteRandomEvent(*eventPtr);
                                }
                                LMemFreeHandles(mem, event);
                                eventBlock = MemDeref(mem);
                                eventBlock->HEBH_numEvents--;
                                VMDirty(mem);
                        }
                        prevEvent = event;
                        eventPtr = LMemDerefHandles(mem, event);
                        event = eventPtr->HEB_nextEvent;
                        eventPtr = LMemDerefHandles(mem, event);
                }
                VMUnlock(mem);
        }
}

@extern method HomeProcessClass, MSG_PROCESS_LIST_EVENTS_BY_DAY {
	MemHandle mem, item;
	VMBlockHandle block, itemBlock;
	HomeEventBlockHeader *eventBlock;
	ChunkHandle event;
	HomeEventBlock *eventPtr;
	HomeMapBlock *mapBlock;
	HomeItemBlock *itemPtr;
	byte loop;
	word count, events, itemID;
	char eventString[80];
/*	char dayNames[7][24] = {"Sunday\r======\r", "Monday\r======\r",
									"Tuesday\r=======\r", "Wednesday\r=========\r",
									"Thursday\r========\r", "Friday\r======\r",
									"Saturday\r========\r"}; */
	optr dayNames[] ={@SundayStr, @MondayStr, @TuesdayStr, @WednesdayStr,
							@ThursdayStr, @FridayStr, @SaturdayStr};

	void BuildEventString(HomeEventBlock *, char *);

	@call EventsText::MSG_GEN_SET_NOT_USABLE(VUM_NOW); /* so it'll redraw the right size */
	@call EventsText::MSG_VIS_TEXT_DELETE_ALL();
	for (loop = 0; loop <7; loop++) {   /* loop through all the days */
		block = VMGetMapBlock(document);
		mapBlock = VMLock(document, block, &mem);
		block = mapBlock->HMB_systemEventBlock[loop]; /* find the block for the current day */
		VMUnlock(mem);
		eventBlock = VMLock(document, block, &mem);   /* lock the block */
		event = eventBlock->HEBH_firstEvent;
		events = eventBlock->HEBH_numEvents;
		if (events) {
			MemLock(OptrToHandle(@SundayStr));
			@call EventsText::MSG_VIS_TEXT_APPEND_PTR(LMemDeref(dayNames[loop]), 0);
  //			@call EventsText::MSG_VIS_TEXT_APPEND_PTR(dayNames[loop], 0);
			MemUnlock(OptrToHandle(@SundayStr));
		}
		count = 0;
		for (eventPtr = LMemDerefHandles(mem, event); count < events ; count++) {
			byte spc;

			/* traverse the list to find the events to print */
			itemID = eventPtr->HEB_ownerID;
			itemBlock = VMFind(document, NullHandle, itemID);
			itemPtr = VMLock(document, itemBlock, &item);
			strcpy(eventString, itemPtr->HIB_name);
			for (spc = 0; spc < (34 - strlen(itemPtr->HIB_name)); spc++)
				strcat(eventString, " ");
			VMUnlock(item);
			BuildEventString(eventPtr, eventString);
			@call EventsText::MSG_VIS_TEXT_APPEND_PTR(eventString, 0);
			event = eventPtr->HEB_nextEvent;
			eventPtr = LMemDerefHandles(mem, event);
		}
		VMUnlock(mem);
		if (events) @call EventsText::MSG_VIS_TEXT_APPEND_PTR("\r", 1);
	}
   @call EventsText::MSG_GEN_SET_USABLE(VUM_NOW);
	if (UserDoDialog(@EventsWindow) == IC_CUSTOM_START) {
		@send HomePrintControl::MSG_PRINT_CONTROL_SET_OUTPUT(oself);
		@send HomePrintControl::MSG_PRINT_CONTROL_INITIATE_PRINT();
	}
}

@extern method HomeProcessClass, MSG_PRINT_START_PRINTING {
	/* This print method exists solely for the purpose of printing the Events
		Text; the document object has the method for printing the house layout. */
	word curPage, numPages;
	WWFixedAsDWord height, pages;
	VisTextMinimumDimensionsParameters textDimensions;
	PCMarginParams margins = {(.5 * 72), /* left */
									  (1 * 72), /* top */
									  (.5 * 72), /* right */
									  (1 * 72)};/* bottom */

	@call HomePrintControl::MSG_PRINT_CONTROL_SET_DOC_MARGINS(&margins);
	@call HomePrintControl::MSG_PRINT_CONTROL_SET_DOC_SIZE((7.5 * 72), /* width */
																			 (9 * 72));  /* height */
	/* get text dimensions so we can figure out how many pages we are... */
	@call EventsText::MSG_VIS_TEXT_GET_MINIMUM_DIMENSIONS(&textDimensions);
	height = (dword) textDimensions.VTMDP_height.WBF_int << 16;
	height += (textDimensions.VTMDP_height.WBF_frac);
	pages = GrUDivWWFixed((height), MakeWWFixed(9 * 72));
   numPages = (FractionOf(pages) > 0) ? (IntegerOf(pages) + 1) : IntegerOf(pages); 
	for (curPage = 0; curPage < numPages; curPage++) {
		GrSaveState(gstate);
		GrApplyTranslation(gstate, 0, -MakeWWFixed(curPage * ((sdword)(9 * 72))));
		GrSetClipRect(gstate, PCT_REPLACE, 0, /* left */
													  curPage * (9 * 72), /* top */
													  (7.5 * 72), /* right */
													  (curPage + 1) * (9 * 72)); /* bottom */
		@call EventsText::MSG_VIS_DRAW(DF_PRINT, gstate);
		GrRestoreState(gstate);
		GrNewPage(gstate, PEC_FORM_FEED);
	}
	@send HomePrintControl::MSG_PRINT_CONTROL_PRINTING_COMPLETED();
	/* set the print output object back to the document. */
   @send HomePrintControl::MSG_PRINT_CONTROL_SET_OUTPUT((TO_APP_MODEL));
}

/* MSG_PROCESS_SET_ITEM_DIM_LEVEL_DELAYED is sent by the dimmer GenValue as 
   the user changes the dim level.  A short delay is implemented here, 
   otherwise every single dim level is sent to the driver, causing a visible 
   stepping effect in the dim instead of a smooth transition.  A one-shot 
   timer will send a message back to the process object after a short delay; 
   messages received during the delay will restart the timer. */

@extern method HomeProcessClass, MSG_PROCESS_SET_ITEM_DIM_LEVEL_DELAYED
{
	/* Record the new dim level. */
	byLastItemDimValue = ((byte) IntegerOf(value));

	if (hItemDimDelay != NullHandle)
		/* Stop the existing timer and fallthrough to restart it. */
		TimerStop(hItemDimDelay, wItemDimDelay);

	/* Start the delay timer. */
	hItemDimDelay = TimerStart(TIMER_EVENT_ONE_SHOT, oself, DIM_DELAY_TICKS,
	                           MSG_PROCESS_SET_ITEM_DIM_LEVEL, 0, &wItemDimDelay);
}

@extern method HomeProcessClass, MSG_PROCESS_SET_ITEM_DIM_LEVEL
{
	EventHandle msg;
	
	/* Since the timer is one-shot and now destroyed, lose the handle. */
	hItemDimDelay = NullHandle;
	
	/* Record the message and send to the target via the application object. */
	msg = @record HomeItemClass::MSG_ITEM_SET_DIM_LEVEL(byLastItemDimValue);
	@send application::MSG_META_SEND_CLASSED_EVENT(msg, TO_TARGET);
}

/*******************************************************************************
* EVENT ROUTINES                                                               *
*******************************************************************************/

void BuildRandomEventList(TimerDateAndTime now) {
        MemHandle mem;
        VMBlockHandle block;
        ChunkHandle eventHandle;
        HomeMapBlock *mapBlock;
        HomeEventBlockHeader *eventBlock, *randomBlock;
        HomeEventBlock *event;
        word loop;
        void AddRandomEvent(HomeEventBlock eventToAdd);

        if (randomEventBlock == NullHandle) {/* if we don't have a block, we need to allocate one. */
                randomEventBlock = MemAllocLMem(LMEM_TYPE_GENERAL, sizeof(HomeEventBlockHeader));
                randomBlock = MemLock(randomEventBlock);
                randomBlock->HEBH_numEvents = 0;
                MemUnlock(randomEventBlock);
        }
        block = VMGetMapBlock(document);
        mapBlock = VMLock(document, block, &mem); /* find the block of events for today */
        block = mapBlock->HMB_systemEventBlock[now.TDAT_dayOfWeek];                
        VMUnlock(mem);
        eventBlock = VMLock(document, block, &mem);
        eventHandle = eventBlock->HEBH_firstEvent;
        for (loop = eventBlock->HEBH_numEvents ; loop > 0 ; loop--) { /* loop through all the events for today */
                event = LMemDerefHandles(mem, eventHandle);                                               
                if ((event->HEB_plusMinus != 0))/* it's a random event... */ {
                        /* add the event to the random list */
                        AddRandomEvent(*event);
                        eventBlock = MemDeref(mem);
                }
                eventHandle = event->HEB_nextEvent;
        }
        VMUnlock(mem);
}

void ProcessRandomEvents(TimerDateAndTime now) {
   ChunkHandle randomEventHandle, prevEventHandle;
   HomeEventBlockHeader *randomEvents;
   HomeRandomEventBlock *randomEvent, *prevEvent;
//   EventHandle eventToDo;
   word loop;

   randomEvents = MemLock(randomEventBlock);
   prevEventHandle = randomEventHandle = randomEvents->HEBH_firstEvent;
   for (loop = randomEvents->HEBH_numEvents ; loop > 0 ; loop--) { /* loop through all the events for today */
      randomEvent = LMemDerefHandles(randomEventBlock, randomEventHandle);                        
      prevEvent = LMemDerefHandles(randomEventBlock, prevEventHandle);
      if ((randomEvent->HREB_randomDay == now.TDAT_dayOfWeek) &&
          (randomEvent->HREB_randomHour == now.TDAT_hours) &&
          (randomEvent->HREB_randomMinute == now.TDAT_minutes)) {
         /* we do the event here */
         EventHandle eventToDo;

         eventToDo = @record null::MSG_ITEM_DO_FUNCTION(randomEvent->HREB_origEvent.HEB_ownerID,
                                                        randomEvent->HREB_origEvent.HEB_function);
         GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS, eventToDo, NullHandle, GCNLSF_FORCE_QUEUE);
         if (randomEvent->HREB_origEvent.HEB_oneShot) {  /* if it's marked "once only" */
            eventToDo = @record null::MSG_ITEM_DELETE_PASSED_EVENT(randomEvent->HREB_origEvent);
            GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS, eventToDo, NullHandle, GCNLSF_FORCE_QUEUE);
         }
         /* now we should delete it, since it's been done... */
         if (loop == 0) randomEvents->HEBH_firstEvent = 0;
         else prevEvent->HREB_origEvent.HEB_nextEvent = randomEvent->HREB_origEvent.HEB_nextEvent;
         LMemFreeHandles(randomEventBlock, randomEventHandle);
         randomEvents = MemDeref(randomEventBlock); /* deref the block--freeing the event probably moved it. */
         randomEvents->HEBH_numEvents--;                                                  
         randomEventHandle = prevEvent->HREB_origEvent.HEB_nextEvent;
      }
      else {
         prevEventHandle = randomEventHandle;
         randomEventHandle = randomEvent->HREB_origEvent.HEB_nextEvent;
      }
   }
   MemUnlock(randomEventBlock);
}

void DeleteRandomEvent(HomeEventBlock eventToTrash) {
   ChunkHandle randomEventHandle, prevEventHandle;
   HomeEventBlockHeader *randomEvents;
   HomeRandomEventBlock *randomEvent, *prevEvent;
   word loop;

	randomEvents = MemLock(randomEventBlock);
	prevEventHandle = randomEventHandle = randomEvents->HEBH_firstEvent;
	for (loop = 0; loop < randomEvents->HEBH_numEvents; loop++) { /* loop through all the events for today */
		randomEvent = LMemDerefHandles(randomEventBlock, randomEventHandle);
		prevEvent = LMemDerefHandles(randomEventBlock, prevEventHandle);
		if ((randomEvent->HREB_origEvent.HEB_days == eventToTrash.HEB_days) &&
			 (randomEvent->HREB_origEvent.HEB_hour == eventToTrash.HEB_hour) &&
			 (randomEvent->HREB_origEvent.HEB_minute == eventToTrash.HEB_minute)) {
			/* now we delete it, since it matches... */
			if (loop == 0) randomEvents->HEBH_firstEvent = randomEvent->HREB_origEvent.HEB_nextEvent;
			else prevEvent->HREB_origEvent.HEB_nextEvent = randomEvent->HREB_origEvent.HEB_nextEvent;
			LMemFreeHandles(randomEventBlock, randomEventHandle);
			randomEvents = MemDeref(randomEventBlock); /* deref the block--freeing the event probably moved it. */
			randomEvents->HEBH_numEvents--;
			randomEventHandle = prevEvent->HREB_origEvent.HEB_nextEvent;
		}
		else {
			prevEventHandle = randomEventHandle;
			randomEventHandle = randomEvent->HREB_origEvent.HEB_nextEvent;
		}
	}
	MemUnlock(randomEventBlock);
}

void AddRandomEvent(HomeEventBlock eventToAdd) {
        ChunkHandle randomEventHandle, newEventHandle;
        HomeEventBlockHeader *randomEvents;
        HomeRandomEventBlock *randomEvent, *newEvent;
        TimerDateAndTime now;
        word loop;

        TimerGetDateAndTime(&now);
        FloatRandomize(RGIF_GENERATE_SEED, 0);
        randomEvents = MemLock(randomEventBlock);
        randomEventHandle = randomEvents->HEBH_firstEvent;
        for (loop = randomEvents->HEBH_numEvents ; loop > 0 ; loop--) { /* go to the end of the random event list */
                randomEvent = LMemDerefHandles(randomEventBlock, randomEventHandle);
                randomEventHandle = randomEvent->HREB_origEvent.HEB_nextEvent;
        }                                                                                                    
        randomEvents->HEBH_numEvents++;
        newEventHandle = LMemAlloc(randomEventBlock, sizeof(HomeRandomEventBlock)); /* allocate new event */
        randomEvents = MemDeref(randomEventBlock); /* ...and deref the block, since it probably moved. */
        if (randomEvents->HEBH_numEvents == 1) /* if we're adding the first event in list... */
                randomEvents->HEBH_firstEvent = newEventHandle;  /* ...make the head point to newEvent. */
        newEvent = LMemDerefHandles(randomEventBlock, newEventHandle);                            
        memcpy(&(newEvent->HREB_origEvent), &eventToAdd, sizeof(HomeEventBlock));  /* copy it to random list */
        newEvent->HREB_randomDay = now.TDAT_dayOfWeek;                                      
        newEvent->HREB_randomHour = newEvent->HREB_origEvent.HEB_hour;
        newEvent->HREB_randomMinute = newEvent->HREB_origEvent.HEB_minute;                              
        FloatWordToFloat((word) (newEvent->HREB_origEvent.HEB_plusMinus * 2) + 1);  /* push random amount on the FP stack */
        FloatRandomN();    /* gen. a positive number w/in HEB_plusMinus range */
        newEvent->HREB_randomMinute += ((sbyte) FloatFloatToDword() -
                                                                                                newEvent->HREB_origEvent.HEB_plusMinus); /* pop it off, and change to a +- range */
        if (newEvent->HREB_randomMinute > 59) {                        
                newEvent->HREB_randomMinute -= 59;
                newEvent->HREB_randomHour++;                                                   
                if (newEvent->HREB_randomHour > 23) {
                        newEvent->HREB_randomDay++;
                        if (newEvent->HREB_randomDay > DOTW_SATURDAY) newEvent->HREB_randomDay = DOTW_SUNDAY;
                }
        }
        if (newEvent->HREB_randomMinute > 59) { /* this works because it's unsigned, so negative = huge */
                newEvent->HREB_randomMinute = 0;
                if (newEvent->HREB_randomHour > 0)  /* we can't wrap a random event backwards a day... */
                        newEvent->HREB_randomHour--;    /* ...because then it wouldn't occur today, like it should. */
        }
        MemUnlock(randomEventBlock);                                                       
}                                                                                                

void BuildEventString(HomeEventBlock *event, char *string) {
	TimerDateAndTime time;
	char timeString[10], plusMinusChar[] = {' ', C_PLUSMINUS, ' ', '\0'};
 /*	char functionNames[6][12] = {" Turn On", " Turn Off", " Dimmer", " Brighter",
										  "", "Preset Dim"};  */
	optr functionNames[] = {@TurnOnStr, @TurnOffStr, @DimmerStr, @BrighterStr,
									@NullStr, @PresetStr};


	time.TDAT_hours = event->HEB_hour;
	time.TDAT_minutes = event->HEB_minute;
	time.TDAT_seconds = 0;
	LocalFormatDateTime(timeString, DTF_HM, &time);
	strcat(string, timeString);
	strcat(string, "\t");
	MemLock(OptrToHandle(@TurnOnStr));
	if (event->HEB_plusMinus) {
		strcpy(timeString, "");
		strcat(string, plusMinusChar);
		LocalFixedToAscii(timeString, MakeWWFixed((word) event->HEB_plusMinus), 0);
		strcat(string, timeString);
		strcat(string, LMemDeref(@MinStr));
	}
	strcat(string, LMemDeref(functionNames[event->HEB_function - 2]));
	if (event->HEB_oneShot) {
		strcat(string, LMemDeref(@OnceStr));
	}
	MemUnlock(OptrToHandle(@TurnOnStr));
	strcat(string, "\r");
}
