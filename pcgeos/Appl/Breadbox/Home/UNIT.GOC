@include <stdapp.goh>
@include "homeapp.goh"
@include "home.goh"
#include <gstring.h>
#include <Ansi/string.h>
#include <dbase.h>
#include <streamC.h>
#include "x10codes.h"

#define BLANK_ICON_BLOCK 0xFEFF

@extern visMoniker UnitDialogCreateMoniker;
@extern visMoniker UnitDialogChangeMoniker;

/*******************************************************************************
* HOME UNIT CLASS                                                              *
*******************************************************************************/
@extern method HomeUnitClass, MSG_ITEM_CHANGE_STATUS {
   byte status;
   EventHandle msg;

   status = (byte) selection;
   if (status == HUS_DIM) {
      status = pself->HI_dimLevel;
   }
   msg = @record HomeUnitClass::MSG_UNIT_SWITCH(pself->HU_houseCode, pself->HU_unitNumber, status);
   GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_UNITS, msg, NullHandle, GCNLSF_FORCE_QUEUE);
}

@extern method HomeUnitClass, MSG_UNIT_SWITCH {
   MemHandle mem;
   VMBlockHandle itemBlock;
	HomeItemBlock *blockPtr;
   statusBlockPtr *statusPtr;

   if ((House == pself->HU_houseCode) &&
      ((Unit == UNIT_ALL_LIGHTS)
       || (Unit == UNIT_ALL && pself->HU_type == HUT_LAMP)
       || (Unit == pself->HU_unitNumber))) {
      switch(Status) {
         case HUS_DIMMER:
            if (pself->HU_state == HUS_OFF) Status = HUS_OFF;
            else Status = pself->HU_state - 1;
            break;
         case HUS_BRIGHTER:
            Status = pself->HU_state + 1;
            if (Status > HUS_ON) Status = HUS_ON;
            break;
      }
      if (Status != pself->HU_state) {
         document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
         itemBlock = VMFind(document, NullHandle, pself->HI_userID);
         blockPtr = VMLock(document, itemBlock, &mem);
			blockPtr->HIB_fields.HUB.state = Status;
         VMDirty(mem);
         VMUnlock(mem);
         statusPtr = MemLock(statusBlock);

         /* This if() prevents UNIT_ALL status changes from sending commands
            at this level, since the initiating method will send a single
            broadcast all-unit or all-lights command. */
         if (Unit != UNIT_ALL && Unit != UNIT_ALL_LIGHTS)
         {
	         if (statusPtr->unitState[(House * 16) + Unit] != Status)
	         {
	            statusPtr->unitState[(House * 16) + Unit] = Status;
				PowerCodeSendUnitNumber(X10Driver, House, pself->HU_unitNumber);
				/* Some special things about dimming lights. */
				if (pself->HU_type == HUT_LAMP)
					{
					/* If the light is off and is switching to dim, it has
					   to be switched on, then dimmed from full to the level. */
					if (pself->HU_state == HUS_OFF
				   	    && Status != HUS_ON && Status != HUS_OFF)
					{
						PowerCodeSendCommand(X10Driver, House, FUNCTION_ON, 0);
						pself->HU_state = HUS_ON;
					}
					/* If the light is dim and is switching to on, just send
					   the maximum number of dims; same effect. */
					if (pself->HU_state != HUS_ON && pself->HU_state != HUS_OFF
				   	    && Status == HUS_ON)
					{
						PowerCodeSendCommand(X10Driver, House, 
						  FUNCTION_BRIGHTER, 22);
						pself->HU_state = HUS_ON;
					}
					if (pself->HU_state != Status)
		               switch (Status) {
		                  case (HUS_ON):
		                     PowerCodeSendCommand(X10Driver, House, FUNCTION_ON, 0);
		                     break;
		                  case (HUS_OFF):
		                     PowerCodeSendCommand(X10Driver, House, FUNCTION_OFF, 0);
		                     break;
		                  default:
							 if (Status > pself->HU_state)
		                     	PowerCodeSendCommand(X10Driver, House, FUNCTION_BRIGHTER, 
								  Status - pself->HU_state);
							 else
		                     	PowerCodeSendCommand(X10Driver, House, FUNCTION_DIMMER, 
								  pself->HU_state - Status);
		               }
		            }
	         }
         }
         MemUnlock(statusBlock);
         pself->HU_state = Status;
         @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
      }
   }
}

@extern method HomeUnitClass, MSG_ITEM_DIM_OR_BRIGHTEN {

   if ((pself->HU_state != HUS_ON) && (pself->HU_state != HUS_OFF)) {
      EventHandle msg;

      msg = @record HomeUnitClass::MSG_UNIT_SWITCH(pself->HU_houseCode, pself->HU_unitNumber, pself->HI_dimLevel);
      GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_UNITS, msg, NullHandle, 0);
   }
}

@extern method HomeUnitClass, MSG_UNIT_SWITCH_IN_ROOM {
   if (Room == pself->HU_roomNumber) {
      EventHandle msg;

      msg = @record HomeUnitClass::MSG_UNIT_SWITCH(pself->HU_houseCode, pself->HU_unitNumber, Status);
      GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_UNITS, msg, NullHandle, GCNLSF_FORCE_QUEUE);
      /* why not just send this to ourself? because there might be other units on our unit and
         house numbers, and the graphic display needs to reflect the reality: that even if they're
         not in our room, they'll respond to the command, too... */
   }
}

@extern method HomeUnitClass, MSG_UNIT_CHANGE_HOUSE_CODE {
	MemHandle mem;
	VMBlockHandle Block;
	HomeItemBlock *blockPtr;
	word BlockID, oldBlockID;

	oldBlockID = FIRST_EVENT_USER_ID + @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	Block = VMFind(document, NullHandle, pself->HI_userID);
	blockPtr = VMLock(document, Block, &mem);
	pself->HU_houseCode = selection;
	blockPtr->HIB_fields.HUB.houseCode = pself->HU_houseCode;
	VMDirty(mem);
	VMUnlock(mem);
	BlockID = FIRST_EVENT_USER_ID + @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
	@call self::MSG_ITEM_ALLOC_OR_ATTACH_EVENT_BLOCK(BlockID);
	@call self::MSG_UNIT_MOVE_EVENTS(oldBlockID, BlockID);
}

@extern method HomeUnitClass, MSG_UNIT_CHANGE_UNIT_NUMBER {
	MemHandle mem;
	VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
	word BlockID, oldBlockID;

	oldBlockID = FIRST_EVENT_USER_ID + @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	unitBlock = VMFind(document, NullHandle, pself->HI_userID);
	blockPtr = VMLock(document, unitBlock, &mem);
	pself->HU_unitNumber = (byte) selection;
	blockPtr->HIB_fields.HUB.unitNumber = pself->HU_unitNumber;
	VMDirty(mem);
	VMUnlock(mem);
	BlockID = FIRST_EVENT_USER_ID + @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
	@call self::MSG_ITEM_ALLOC_OR_ATTACH_EVENT_BLOCK(BlockID);
	@call self::MSG_UNIT_MOVE_EVENTS(oldBlockID, BlockID);
}

@extern method HomeUnitClass, MSG_UNIT_CHANGE_TYPE {
	MemHandle mem;
	VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
   UnitTypes Type;

   Type = (byte) selection;
   if (Type != pself->HU_type) {
      document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      unitBlock = VMFind(document, NullHandle, pself->HI_userID);
      blockPtr = VMLock(document, unitBlock, &mem);
      pself->HU_type = Type;
      blockPtr->HIB_fields.HUB.type = Type;
      VMDirty(mem);
      VMUnlock(mem);
      switch (Type) {
         case HUT_LAMP:
            @send HomeUnitDimButton::MSG_GEN_SET_ENABLED(VUM_NOW);
            @send HomeUnitDimGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
            @send HomeUnitDimValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(
                                    (word) pself->HI_dimLevel, FALSE);
            break;
         case HUT_APPLIANCE:
            @send HomeUnitDimButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
            @send HomeUnitDimGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
            break;
      }
   }
}

@extern method HomeUnitClass, MSG_VIS_DRAW {
   MemHandle hBitmap;
   VMFileHandle iconFile;
   VMBlockHandle iconBlock;
   word icon;
   Bitmap *pBitmap;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	GrSetMixMode(gstate, MM_COPY);
   if (pself->HU_state == HUS_OFF) {
           icon = (pself->HU_icon == 0) ? 0 : pself->HU_icon + 1;
   }
   else {
           icon = pself->HU_icon;
   }
   if (icon == 0) icon = BLANK_ICON_BLOCK;
   iconFile = @call LargeIcon::MSG_ICON_VIEW_GET_FILE_HANDLE();
   iconBlock = VMFind(iconFile, NullHandle, icon);
   if (iconBlock == NullHandle) iconBlock = VMFind(iconFile, NullHandle, BLANK_ICON_BLOCK);
   /* This is the old way: */
/*   hBitmap = VMDetach(iconFile, iconBlock, 0);*/
/*   GrDrawBitmap(gstate, pself->VI_bounds.R_left + pself->HU_imageOff,
                                    pself->VI_bounds.R_top, MemLock(hBitmap), NULL);*/
/*   MemFree(hBitmap);*/
   /* This is the new way, without VMDetach/VMAttach: DH 6/4/99 */
   pBitmap = (Bitmap *)VMLock(iconFile, iconBlock, &hBitmap);
   GrDrawBitmap(gstate, pself->VI_bounds.R_left + pself->HU_imageOff,
                                    pself->VI_bounds.R_top, pBitmap, NULL);
   VMUnlock(hBitmap);
   /* End of changes: DH 6/4/99 */
   if (pself->HI_selected) {
      GrSetMixMode(gstate, MM_COPY);
      GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
      GrDrawRect(gstate,
              (pself->VI_bounds.R_left + pself->HU_imageOff) + 1,
              (pself->VI_bounds.R_top + 1),
              (pself->VI_bounds.R_left + pself->HU_imageOff + UNIT_WIDTH) - 1,
              (pself->VI_bounds.R_top + UNIT_HEIGHT) - 1);
   }
   if (pself->HI_textVisible) {
      GrSetMixMode(gstate, MM_COPY);
      GrSetFont(gstate, UNIT_TEXT_FONT, UNIT_TEXT_POINT_SIZE);
      GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
      GrDrawText(gstate, pself->VI_bounds.R_left + pself->HU_textOff,
                 pself->VI_bounds.R_top + UNIT_HEIGHT + 2, pself->HI_name, 0);
   }
}

@extern method HomeUnitClass, MSG_META_START_SELECT {
	@extern object HomeRoomDimensions;

	@callsuper();
   @send HomeUnitSettingsBlock::MSG_GEN_SET_ENABLED(VUM_NOW);
   @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon, @HomeUnitIconOnGlyph);
   if (pself->HU_icon == 0) {
      @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(0, @HomeUnitIconOffGlyph);
      @send HomeUnitEditIconButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
   }
   else {
      @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon + 1,
                                                          @HomeUnitIconOffGlyph);
      @send HomeUnitEditIconButton::MSG_GEN_SET_ENABLED(VUM_NOW);
   }
   @send HomeGroupMemberList2::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
   @send HomeEditGroupButton::MSG_GEN_SET_NOT_USABLE(VUM_NOW); 
	@send HomeUnitIconGroup::MSG_GEN_SET_USABLE(VUM_NOW);
   @send HomeUnitTypeList::MSG_GEN_SET_USABLE(VUM_NOW);
	@send HomeUnitTypeList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(pself->HU_type, FALSE);
	@send HomeRoomDimensions::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
   if (pself->HU_type == HUT_APPLIANCE) {
           @send HomeUnitDimButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
           @send HomeUnitDimGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
   }
   else {
           @send HomeUnitDimButton::MSG_GEN_SET_ENABLED(VUM_NOW);
           @send HomeUnitDimGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
   }
   @send HomeUnitHouseList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                            pself->HU_houseCode, FALSE);
   @send HomeUnitNumberList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                             pself->HU_unitNumber, FALSE);
   if ((pself->HU_state != HUS_ON) && (pself->HU_state != HUS_OFF)) {
           @send HomeUnitOnOffGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                                     HUS_DIM, FALSE);
   }
   else {
           @send HomeUnitOnOffGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                                     pself->HU_state, FALSE);
   }
   @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
   if (pself->HI_locked) {
           retVal->flags = MRF_PROCESSED;
           return;
    }
   @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);
   @call self::MSG_VIS_GRAB_MOUSE();

   retVal->flags = MRF_PROCESSED;
}

@extern method HomeUnitClass, MSG_META_DRAG_SELECT {
   GStateHandle gstate;
   WindowHandle win;

   if (pself->HI_locked) {
      retVal->flags = MRF_PROCESSED;
      return;
   }

   pself->HI_dragging = TRUE;
   win = @call self::MSG_VIS_QUERY_WINDOW();
   gstate = GrCreateState(win);
   GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
   GrSetMixMode(gstate, MM_INVERT);
	pself->HI_vertPos = yPosition - (UNIT_HEIGHT/2);
   pself->HI_horizPos = xPosition - (UNIT_WIDTH/2);
	if ((@call HomeObjectOptionsGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS())
			& HOO_ALIGN_OBJECTS_TO_GRID) {
		/* force mouse coord's to nearest grid unit. */
		document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
		pself->HI_vertPos = ((pself->HI_vertPos / GRID_POINT_SIZE));
		pself->HI_vertPos *= GRID_POINT_SIZE;
		pself->HI_horizPos = ((pself->HI_horizPos / GRID_POINT_SIZE));
		pself->HI_horizPos *= GRID_POINT_SIZE;
	}
   GrDrawRect(gstate, pself->HI_horizPos, pself->HI_vertPos,
            (pself->HI_horizPos + UNIT_WIDTH),
            (pself->HI_vertPos + UNIT_HEIGHT));
   GrDestroyState(gstate);

   retVal->flags = MRF_PROCESSED;
}

@extern method HomeUnitClass, MSG_META_PTR {
   GStateHandle gstate;
   WindowHandle win;

   if (pself->HI_dragging) {
   win = @call self::MSG_VIS_QUERY_WINDOW();
   gstate = GrCreateState(win);
   GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
   GrSetMixMode(gstate, MM_INVERT);
   GrDrawRect(gstate, pself->HI_horizPos, pself->HI_vertPos,
            (pself->HI_horizPos + UNIT_WIDTH),
            (pself->HI_vertPos + UNIT_HEIGHT));
   pself->HI_vertPos = yPosition - (UNIT_HEIGHT/2);
   pself->HI_horizPos = xPosition - (UNIT_WIDTH/2);
	if ((@call HomeObjectOptionsGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS())
			& HOO_ALIGN_OBJECTS_TO_GRID) {
		/* force mouse coord's to nearest grid unit. */
		document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
		pself->HI_vertPos = ((pself->HI_vertPos / GRID_POINT_SIZE));
		pself->HI_vertPos *= GRID_POINT_SIZE;
		pself->HI_horizPos = ((pself->HI_horizPos / GRID_POINT_SIZE));
		pself->HI_horizPos *= GRID_POINT_SIZE;
	}
   GrDrawRect(gstate, pself->HI_horizPos, pself->HI_vertPos,
            (pself->HI_horizPos + UNIT_WIDTH),
            (pself->HI_vertPos + UNIT_HEIGHT));
   GrDestroyState(gstate);

   }
   retVal->flags = MRF_PROCESSED;
}

@extern method HomeUnitClass, MSG_META_END_SELECT {

   @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);
   retVal->flags = MRF_PROCESSED;
}

@extern method HomeUnitClass, MSG_VIS_LOST_GADGET_EXCL {
   MemHandle mem;
   VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
   WindowHandle win;
   EventHandle msg;
   GStateHandle gstate;
	Rectangle checkBounds;

	 if (pself->HI_dragging) {
		win = @call self::MSG_VIS_QUERY_WINDOW();
		gstate = GrCreateState(win);
		GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
		GrSetMixMode(gstate, MM_INVERT);
		GrDrawRect(gstate,
				  pself->HI_horizPos,
				  pself->HI_vertPos,
				  ((pself->HI_horizPos) + UNIT_WIDTH),
				  ((pself->HI_vertPos) + UNIT_HEIGHT));
		@call self::MSG_VIS_BOUNDS_CHANGED(
												  pself->VI_bounds.R_bottom,
												  pself->VI_bounds.R_right,
												  pself->VI_bounds.R_top,
												  pself->VI_bounds.R_left);
		@call self::MSG_VIS_SET_POSITION(
												  pself->HI_horizPos - pself->HU_imageOff,
												  pself->HI_vertPos);
		@call self::MSG_VIS_DRAW(DF_EXPOSED, gstate);
		GrDestroyState(gstate);
		pself->HI_dragging = FALSE;
   }
   @call self::MSG_VIS_RELEASE_MOUSE();
   document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
   unitBlock = VMFind(document, NullHandle, pself->HI_userID);
   blockPtr = VMLock(document, unitBlock, &mem);
   pself->HU_roomNumber = 0;
	blockPtr->HIB_bounds = pself->VI_bounds;
	blockPtr->HIB_fields.HUB.roomNumber = 0;
   VMDirty(mem);
   VMUnlock(mem);
	checkBounds.R_left = pself->VI_bounds.R_left + pself->HU_imageOff; /* we use checkBounds    */
	checkBounds.R_right = checkBounds.R_left + UNIT_WIDTH;				 /* so that only the icon */
	checkBounds.R_top = pself->VI_bounds.R_top;                        /* has to be inside the  */
	checkBounds.R_bottom = checkBounds.R_top + UNIT_HEIGHT;            /* room.                 */
	msg = @record HomeRoomClass::MSG_ROOM_IS_UNIT_INSIDE(pself->HI_userID, checkBounds);
	GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ROOMS, msg, NullHandle, GCNLSF_FORCE_QUEUE);
	@call self::MSG_ITEM_CHECK_POSITION_AND_DOC_SIZE();
}

@extern method HomeUnitClass, MSG_ITEM_SET_ATTRS {
   MemHandle mem;
   VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
   WindowHandle win;
   GStateHandle gstate;
   word HouseAndUnit;
   statusBlockPtr *statusPtr = MemLock(statusBlock);

   document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
   unitBlock = VMFind(document, NullHandle, UserID);
   blockPtr = VMLock(document, unitBlock, &mem);

   pself->HI_userID = UserID;
	blockPtr->HIB_userID = UserID;
   @call HomeNewUnitNameText::MSG_VIS_TEXT_GET_ALL_PTR(pself->HI_name);
	strcpy(blockPtr->HIB_name, pself->HI_name);
   pself->HU_houseCode = (byte) @call HomeNewUnitHouseList::
                                MSG_GEN_ITEM_GROUP_GET_SELECTION();
   pself->HU_unitNumber = (byte) @call HomeNewUnitNumberList::
                                 MSG_GEN_ITEM_GROUP_GET_SELECTION();
   pself->HU_type = (byte) @call HomeNewUnitTypeList::
                                 MSG_GEN_ITEM_GROUP_GET_SELECTION();
	pself->HU_icon = @call HomeNewUnitIconList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   /* get our status from the global unit status table */
   pself->HU_state = statusPtr->unitState[(pself->HU_houseCode * 16) + pself->HU_unitNumber];
   MemUnlock(statusBlock);
	if (pself->HU_icon == GIGS_NONE) pself->HU_icon = 0;
	else pself->HU_icon = (pself->HU_icon * 2) + 1;
	blockPtr->HIB_fields.HUB.icon = pself->HU_icon;
	blockPtr->HIB_fields.HUB.houseCode = pself->HU_houseCode;
	blockPtr->HIB_fields.HUB.unitNumber = pself->HU_unitNumber;
	blockPtr->HIB_fields.HUB.type = pself->HU_type;
	blockPtr->HIB_fields.HUB.state = pself->HU_state;
   win = @call self::MSG_VIS_QUERY_WINDOW();
   gstate = GrCreateState(win);
   pself->HI_textVisible = TRUE;
   blockPtr->HIB_textVisible = TRUE;
   @call self::MSG_UNIT_CALC_SIZE(gstate);
   GrDestroyState(gstate);
   VMDirty(mem);
   VMUnlock(mem);
   HouseAndUnit = FIRST_EVENT_USER_ID +
                                           ((pself->HU_houseCode * 16) + (pself->HU_unitNumber));
   @call self::MSG_ITEM_ALLOC_OR_ATTACH_EVENT_BLOCK(HouseAndUnit);
}

@extern method HomeUnitClass, MSG_ITEM_GET_ATTRS_FROM_FILE {
   MemHandle mem;
   VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
   statusBlockPtr *statusPtr = MemLock(statusBlock);

   document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
   unitBlock = VMFind(document, NullHandle, UserID);
   blockPtr = VMLock(document, unitBlock, &mem);

   pself->HI_userID = UserID;
	strcpy(pself->HI_name, blockPtr->HIB_name);
	pself->VI_bounds = blockPtr->HIB_bounds;
	pself->HI_dimLevel = blockPtr->HIB_dimLevel;
	pself->HI_locked = blockPtr->HIB_locked;
	pself->HI_textVisible = blockPtr->HIB_textVisible;
	pself->HU_icon = blockPtr->HIB_fields.HUB.icon;
	pself->HU_textOff = blockPtr->HIB_fields.HUB.textOff;
	pself->HU_imageOff = blockPtr->HIB_fields.HUB.imageOff;
	pself->HU_houseCode = blockPtr->HIB_fields.HUB.houseCode;
	pself->HU_unitNumber = blockPtr->HIB_fields.HUB.unitNumber;
	pself->HU_roomNumber = blockPtr->HIB_fields.HUB.roomNumber;
	pself->HU_type = blockPtr->HIB_fields.HUB.type;
   pself->HU_state = blockPtr->HIB_fields.HUB.state;
   /* initialize the global unit status table */
   statusPtr->unitState[(pself->HU_houseCode * 16) + pself->HU_unitNumber] = pself->HU_state;
   MemUnlock(statusBlock);
	VMUnlock(mem);
}

@extern method HomeUnitClass, MSG_UNIT_IS_IN_ROOM {

   if (ID == pself->HI_userID) {
      MemHandle mem;
		HomeItemBlock *blockPtr;
      VMBlockHandle unitBlock;

      document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      unitBlock = VMFind(document, NullHandle, pself->HI_userID);
      blockPtr = VMLock(document, unitBlock, &mem);
      pself->HU_roomNumber = Room;
		blockPtr->HIB_fields.HUB.roomNumber = Room;
      VMDirty(mem);
      VMUnlock(mem);
   }
}

@extern method HomeUnitClass, MSG_ITEM_CHANGE_NAME {
        VMBlockHandle unitBlock;
		  HomeItemBlock *blockPtr;
        MemHandle mem;
        WindowHandle win;
        GStateHandle gstate;

        document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
        win = @call self::MSG_VIS_QUERY_WINDOW();
        gstate = GrCreateState(win);
        unitBlock = VMFind(document, NullHandle, pself->HI_userID);
        blockPtr = VMLock(document, unitBlock, &mem);
        @call HomeUnitCommandNameText::MSG_VIS_TEXT_GET_ALL_PTR(pself->HI_name);
		  strcpy(blockPtr->HIB_name, pself->HI_name);
        @call self::MSG_UNIT_CALC_SIZE(gstate);
        GrDestroyState(gstate);
		  blockPtr->HIB_bounds = pself->VI_bounds;
        VMDirty(mem);
        VMUnlock(mem);
}

@extern method HomeUnitClass, MSG_UNIT_RECALC_SIZE {
	WindowHandle win;
	GStateHandle gstate;

	win = @call self::MSG_VIS_QUERY_WINDOW();
	gstate = GrCreateState(win);
	@call self::MSG_UNIT_CALC_SIZE(gstate);
	GrDestroyState(gstate);
}

@extern method HomeUnitClass, MSG_UNIT_CALC_SIZE {
   VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
	MemHandle mem;
	int newImageOff;
	int newTextOff;
	word TextWidth;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	GrSetFont(gstate, UNIT_TEXT_FONT, UNIT_TEXT_POINT_SIZE);
	TextWidth = GrTextWidth(gstate, pself->HI_name, 0);
	@call self::MSG_VIS_BOUNDS_CHANGED(pself->VI_bounds.R_bottom,
												  pself->VI_bounds.R_right, pself->VI_bounds.R_top,
												  pself->VI_bounds.R_left);

	if (TextWidth < UNIT_WIDTH) {
		newImageOff = 0;
		newTextOff = (UNIT_WIDTH - TextWidth) / 2;
		pself->VI_bounds.R_left += pself->HU_imageOff;
		pself->VI_bounds.R_right = pself->VI_bounds.R_left + UNIT_WIDTH;
	}
	else {
		newTextOff = 0;
		newImageOff = (TextWidth - UNIT_WIDTH) / 2;
		pself->VI_bounds.R_left -= (newImageOff - pself->HU_imageOff);
		pself->VI_bounds.R_right = pself->VI_bounds.R_left + TextWidth;
	}

	pself->VI_bounds.R_bottom = pself->VI_bounds.R_top + UNIT_HEIGHT +
	 									GrFontMetrics(gstate, GFMI_MAX_ADJUSTED_HEIGHT_ROUNDED) + 2;
	unitBlock = VMFind(document, NullHandle, pself->HI_userID);
	blockPtr = VMLock(document, unitBlock, &mem);
	blockPtr->HIB_bounds = pself->VI_bounds;
	pself->HU_imageOff = newImageOff;
	blockPtr->HIB_fields.HUB.imageOff = newImageOff;
	pself->HU_textOff = newTextOff;
	blockPtr->HIB_fields.HUB.textOff = newTextOff;
	VMDirty(mem);
	VMUnlock(mem);
	@call self::MSG_VIS_DRAW(DF_EXPOSED, gstate);
}

@extern method HomeUnitClass, MSG_UNIT_GET_NUMBER_AND_HOUSE {
		  return((pself->HU_houseCode * 16) + (pself->HU_unitNumber));
}

@extern method HomeUnitClass, MSG_UNIT_MOVE_EVENTS {
	MemHandle mem, destMem;
	ChunkHandle eventHandle, destEventHandle;
	VMBlockHandle sourceBlock, destBlock;
	HomeEventBlockHeader *sourceEventPtr, *destEventPtr;
	HomeEventBlock *sourceEvent, *destEvent;
	word loop, event, numEvents;

	sourceBlock = VMFind(document, NullHandle, oldBlockID);
	sourceEventPtr = VMLock(document, sourceBlock, &mem);
	destBlock = VMFind(document, NullHandle, BlockID);
	destEventPtr = VMLock(document, destBlock, &destMem);
	numEvents = sourceEventPtr->HEBH_numEvents;
	for (loop = 0; loop < numEvents; loop++) {
		eventHandle = sourceEventPtr->HEBH_firstEvent;
		for (sourceEvent = LMemDerefHandles(mem, eventHandle), event = 0; event <= loop; event++) {
			eventHandle = sourceEvent->HEB_nextEvent;
			sourceEvent = LMemDerefHandles(mem, eventHandle);
		}/* traverse the source list to find the right item */
		if (sourceEvent->HEB_ownerID == pself->HI_userID) {
			destEventHandle = LMemAlloc(destMem, sizeof(HomeEventBlock));
			/* since the destination block may have moved, deref the handle. */
			destEventPtr = MemDeref(destMem);
			destEvent = LMemDerefHandles(destMem, destEventHandle);
			/* memcpy(destEvent, sourceEvent, sizeof(HomeEventBlock));*/
			*destEvent = *sourceEvent;
			LMemFreeHandles(mem, sourceEvent);
			destEventPtr->HEBH_numEvents++;
			sourceEventPtr->HEBH_numEvents--;
		}
	}
	VMDirty(mem);
	VMDirty(destMem);
	@send HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(destEventPtr->HEBH_numEvents);
	VMUnlock(mem);
	VMUnlock(destMem);
	@call self::MSG_ITEM_DEC_OR_DELETE_EVENT_BLOCK(oldBlockID);
}

@extern method HomeUnitClass, MSG_UNIT_EDIT_ICON {
	@send LargeIcon::MSG_ICON_VIEW_SHOW_ICON(pself->HU_icon);
	@send HomeIconEditor::MSG_GEN_INTERACTION_INITIATE();
}

@extern method HomeUnitClass, MSG_UNIT_CHANGE_ICON {
	/* this monkeying with the NewUnitDialog lets us use it to change icons without needing a
      whole new dialog box... */
   @send HomeNewUnitNameText::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	@send HomeNewUnitNumberAndType::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	@send HomeNewUnitDialog::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@UnitDialogChangeMoniker), VUM_NOW);
//	@send HomeNewUnitDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Change Icon", VUM_NOW);
	@send HomeNewUnitIconList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
   									(((pself->HU_icon - 1) / 2), FALSE);
   if (UserDoDialog(@HomeNewUnitDialog) == IC_APPLY) {
      VMFileHandle document;
      VMBlockHandle unitBlock;
      HomeItemBlock *blockPtr;
      MemHandle mem;
      pself->HU_icon = @call HomeNewUnitIconList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
      if (pself->HU_icon == GIGS_NONE) pself->HU_icon = 0;
      else pself->HU_icon = (pself->HU_icon * 2) + 1;
      @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
      @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon, @HomeUnitIconOnGlyph);
      if (pself->HU_icon == 0) {
         @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(0, @HomeUnitIconOffGlyph);
         @send HomeUnitEditIconButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
      }
      else {
         @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon + 1,
                                                             @HomeUnitIconOffGlyph);
         @send HomeUnitEditIconButton::MSG_GEN_SET_ENABLED(VUM_NOW);
      }
      document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      unitBlock = VMFind(document, NullHandle, pself->HI_userID);
      blockPtr = VMLock(document, unitBlock, &mem);
      blockPtr->HIB_fields.HUB.icon = pself->HU_icon;
      VMDirty(mem);
      VMUnlock(mem);
   }
	@send HomeNewUnitDialog::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@UnitDialogCreateMoniker), VUM_NOW);
//	@send HomeNewUnitDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Create New Unit", VUM_NOW);
   @send HomeNewUnitNumberAndType::MSG_GEN_SET_USABLE(VUM_NOW);
   @send HomeNewUnitNameText::MSG_GEN_SET_USABLE(VUM_NOW);
}

@extern method HomeUnitClass, MSG_ITEM_ICON_CHANGED {
   if (icon == pself->HU_icon) {
      @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		if (pself->HI_selected) {
			@send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon, @HomeUnitIconOnGlyph);
			if (pself->HU_icon == 0) @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(0,
																	@HomeUnitIconOffGlyph);
			else @send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(pself->HU_icon + 1,
																	@HomeUnitIconOffGlyph);
		}
	}
}

@extern method HomeUnitClass, MSG_ITEM_ICON_DELETED {
	if (pself->HU_icon >= icon) {
      VMFileHandle document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      VMBlockHandle unitBlock;
      HomeItemBlock *blockPtr;
      MemHandle mem;
		if (icon == pself->HU_icon) {
			pself->HU_icon = 0;
			@send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
			if (pself->HI_selected) {
				@send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(0, @HomeUnitIconOnGlyph);
				@send LargeIcon::MSG_ICON_VIEW_REPLACE_ICON_MONIKER(0, @HomeUnitIconOffGlyph);
			}
		}
		else pself->HU_icon -= 2;
      unitBlock = VMFind(document, NullHandle, pself->HI_userID);
      blockPtr = VMLock(document, unitBlock, &mem);
      blockPtr->HIB_fields.HUB.icon = pself->HU_icon;
      VMDirty(mem);
      VMUnlock(mem);
	}
}

@extern method HomeUnitClass, MSG_UNIT_ROOM_HAS_MOVED {
   VMFileHandle document;
   VMBlockHandle unitBlock;
	HomeItemBlock *blockPtr;
	MemHandle mem;
	Rectangle checkBounds;
   Boolean Inside(Rectangle Inner, Rectangle Outer);

    /* If our room ID matches that of the room which has moved... */
   if (roomID == pself->HU_roomNumber) {
      document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      unitBlock = VMFind(document, NullHandle, pself->HI_userID);
      blockPtr = VMLock(document, unitBlock, &mem);
      if ((@call HomeObjectOptionsGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS()
          & HOO_UNIT_MOVES_WITH_ROOM) && (pself->HI_locked)) {
         /* the room that just moved is the room we're in, AND we're locked,
            AND the user wants locked units to move with the rooms they're in. */
         WindowHandle win = @call self::MSG_VIS_QUERY_WINDOW();
         GStateHandle gstate = GrCreateState(win);
   
         @call self::MSG_VIS_BOUNDS_CHANGED(
                                         pself->VI_bounds.R_bottom,
                                         pself->VI_bounds.R_right,
                                         pself->VI_bounds.R_top,
                                         pself->VI_bounds.R_left);
         pself->VI_bounds.R_bottom += (newBounds.R_bottom - oldBounds.R_bottom);
         pself->VI_bounds.R_right += (newBounds.R_right - oldBounds.R_right);
         pself->VI_bounds.R_top += (newBounds.R_top - oldBounds.R_top);
         pself->VI_bounds.R_left += (newBounds.R_left - oldBounds.R_left);
			blockPtr->HIB_bounds = pself->VI_bounds;
         @call self::MSG_VIS_SET_POSITION(
                                         pself->VI_bounds.R_left,
                                         pself->VI_bounds.R_top);
         @call self::MSG_VIS_DRAW(DF_EXPOSED, gstate);
         GrDestroyState(gstate);
         VMDirty(mem);
      }
      else {
         /* either we're not locked, OR the user doesn't want locked units to move with the
            rooms they're in, so we just need to see whether we need to reset our room number. */
         if (!Inside(pself->VI_bounds, newBounds)) {
            pself->HU_roomNumber = 0;
				blockPtr->HIB_fields.HUB.roomNumber = 0;
            VMDirty(mem);
         }
      }
      VMUnlock(mem);
   }
   /* Otherwise, if we don't already have a room ID (prevents rooms from
      grabbing the unit from another room)... */
   else if (pself->HU_roomNumber == 0)
   {
      /* here, the room that moved wasn't our room, but it might be now, so we check the bounds
			against our own to see whether we're now in the room. */
		checkBounds.R_left = pself->VI_bounds.R_left + pself->HU_imageOff; /* we use checkBounds    */
		checkBounds.R_right = checkBounds.R_left + UNIT_WIDTH;				 /* so that only the icon */
		checkBounds.R_top = pself->VI_bounds.R_top;                        /* has to be inside the  */
		checkBounds.R_bottom = checkBounds.R_top + UNIT_HEIGHT;            /* room.                 */
		if (Inside(checkBounds, newBounds)) {
         document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
         unitBlock = VMFind(document, NullHandle, pself->HI_userID);
         blockPtr = VMLock(document, unitBlock, &mem);
         pself->HU_roomNumber = roomID;
         blockPtr->HIB_fields.HUB.roomNumber = roomID;
         VMDirty(mem);
         VMUnlock(mem);
      }
   }
}
