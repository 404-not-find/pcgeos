@include <stdapp.goh>
@include "homeapp.goh"
@include "home.goh"
#include <gstring.h>
#include <Ansi/string.h>

@extern chunk MsgConfirmDeleteItem;
@extern chunk SundayInitStr;
@extern chunk MondayInitStr;
@extern chunk TuesdayInitStr;
@extern chunk WednesdayInitStr;
@extern chunk ThursdayInitStr;
@extern chunk FridayInitStr;
@extern chunk SaturdayInitStr;
@extern chunk StarStr;
@extern chunk TurnOnStr;
@extern chunk TurnOffStr;
@extern chunk DimmerStr;
@extern chunk BrighterStr;
@extern chunk PresetStr;
@extern chunk MinStr;
@extern chunk OnceStr;

/*******************************************************************************
* LOCAL ROUTINES                                                               *
*******************************************************************************/

Boolean Compare(HomeEventBlock *firstEvent, HomeEventBlock *secondEvent){

	if (firstEvent->HEB_days < secondEvent->HEB_days) return TRUE;
	if (firstEvent->HEB_days > secondEvent->HEB_days) return FALSE;
	/* now we know the days are equal; let's try the hours. */
	if (firstEvent->HEB_hour < secondEvent->HEB_hour) return TRUE;
	if (firstEvent->HEB_hour > secondEvent->HEB_hour) return FALSE;
	/* now we know the hours are equal; let's try minutes. */
	if (firstEvent->HEB_minute < secondEvent->HEB_minute) return TRUE;
	if (firstEvent->HEB_minute > secondEvent->HEB_minute) return FALSE;
	/* now it's down to seconds, which we don't keep track of, so return TRUE. */
	return TRUE;
}

void SortEvents(MemHandle mem, ChunkHandle newEvent){
   HomeEventBlockHeader *eventBlock;
   HomeEventBlock *newEventPtr, *nextEventPtr, *prevEventPtr;
	ChunkHandle nextEvent, prevEvent;
	word count;

	eventBlock = MemDeref(mem);
	newEventPtr = LMemDerefHandles(mem, newEvent);
	if (eventBlock->HEBH_numEvents == 1) { /* if this is the very first event in the block */
		eventBlock->HEBH_firstEvent = newEvent;
		newEventPtr->HEB_nextEvent = NullHandle;
		return;
	}
	nextEvent = eventBlock->HEBH_firstEvent;
	nextEventPtr = LMemDerefHandles(mem, nextEvent);
	if (Compare(newEventPtr, nextEventPtr)) {/* if we've got a new first event */
		newEventPtr->HEB_nextEvent =  eventBlock->HEBH_firstEvent;
		eventBlock->HEBH_firstEvent = newEvent;
		return;
	}
	for(count = 1; count < eventBlock->HEBH_numEvents; count++){ /* traverse linked list of events */
		prevEvent = nextEvent;
		prevEventPtr = LMemDerefHandles(mem, prevEvent);
		nextEvent = prevEventPtr->HEB_nextEvent;
		nextEventPtr = LMemDerefHandles(mem, nextEvent);
		if (Compare(newEventPtr, nextEventPtr)) {
			prevEventPtr->HEB_nextEvent = newEvent;
			newEventPtr->HEB_nextEvent = nextEvent;
			return;
		}
	}
	/* if we get here, our new event belongs at the end of the list. */
	prevEventPtr->HEB_nextEvent = newEvent;
	newEventPtr->HEB_nextEvent = NullHandle;
	return;
}

/********************************************************************************/
/* HOME ITEM CLASS                                                              */
/********************************************************************************/
@extern method HomeItemClass, MSG_VIS_DESTROY {
   /* Clean up during item destruction by removing ourselves from GCN lists */
   if (pself->HI_userID < INITIAL_ROOM_USER_ID) {
      GCNListRemove(oself, MANUFACTURER_ID_BREADBOX, BGCNLT_UNITS);
   }
   else { /* it's a room or group */
      if (pself->HI_userID < INITIAL_GROUP_USER_ID)
         GCNListRemove(oself, MANUFACTURER_ID_BREADBOX, BGCNLT_ROOMS);
      else { /* it's a group. */
         GCNListRemove(oself, MANUFACTURER_ID_BREADBOX, BGCNLT_GROUPS);
      }
   }
   GCNListRemove(oself, MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS);
   /* now do default VisClass processing */
   @callsuper();
}

@extern method HomeItemClass, MSG_ITEM_DESTROY {                                
   VMBlockHandle itemBlock;
   word BlockID;

	MemLock(OptrToHandle(@MsgConfirmDeleteItem));
	if (UserStandardDialog(0, 0, 0, 0,
								  LMemDeref(@MsgConfirmDeleteItem),
						  //		  "Are you sure you want to delete this item?",
                          ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
                          (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))) == IC_YES) {
      document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
      itemBlock = VMFind(document, NullHandle, pself->HI_userID);
      VMFree(document, itemBlock);
      @send HomeUnitCommandClump::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
      if (pself->HI_userID < INITIAL_GROUP_USER_ID) /* if we're not a group, invalidate our bounds */
         @call self::MSG_VIS_BOUNDS_CHANGED(pself->VI_bounds.R_bottom,
                                         pself->VI_bounds.R_right, pself->VI_bounds.R_top,
                                         pself->VI_bounds.R_left);
      @send HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
      if (pself->HI_userID < INITIAL_ROOM_USER_ID) {
         BlockID = @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
         BlockID += FIRST_EVENT_USER_ID;
      }
      else { /* it's a room or group */
         BlockID = pself->HI_userID - INITIAL_ROOM_USER_ID;
         BlockID += FIRST_ROOM_EVENT_USER_ID;
         if (pself->HI_userID >= INITIAL_GROUP_USER_ID) {
            word nItems = @call HomeGroupList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS();
            @call HomeGroupList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(nItems - 1);
         }
      }
      @send process::MSG_PROCESS_EVENT_BLOCK_DELETED(pself->HI_userID);
      @call self::MSG_ITEM_DEC_OR_DELETE_EVENT_BLOCK(BlockID);
      @send self::MSG_VIS_DESTROY(VUM_NOW);
      @send @visParent::MSG_VIS_VUP_UPDATE_WIN_GROUP(VUM_NOW);
   }
	MemUnlock(OptrToHandle(@MsgConfirmDeleteItem));
}

@extern method HomeItemClass, MSG_ITEM_LOCK {
	MemHandle mem;
	VMBlockHandle itemBlock;
	HomeItemBlock *blockPtr;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	pself->HI_locked = (selectedBooleans == 1) ? TRUE : FALSE;
	itemBlock = VMFind(document, NullHandle, pself->HI_userID);
	blockPtr = VMLock(document, itemBlock, &mem);
	blockPtr->HIB_locked = pself->HI_locked;
	VMDirty(mem);
	VMUnlock(mem);
}

@extern method HomeItemClass, MSG_ITEM_CHANGE_TEXT_VISIBILITY {
	MemHandle mem;
	VMBlockHandle itemBlock;
	HomeItemBlock *blockPtr;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	itemBlock = VMFind(document, NullHandle, pself->HI_userID);
	blockPtr = VMLock(document, itemBlock, &mem);

	pself->HI_textVisible = (selectedBooleans == 1) ? TRUE : FALSE;
	blockPtr->HIB_textVisible = pself->HI_textVisible;
	VMDirty(mem);
	VMUnlock(mem);
	@call self::MSG_VIS_BOUNDS_CHANGED(pself->VI_bounds.R_bottom,
													pself->VI_bounds.R_right, pself->VI_bounds.R_top,
													pself->VI_bounds.R_left);
	@send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
}

@extern method HomeItemClass, MSG_ITEM_SET_DIM_LEVEL {
	MemHandle mem;
	VMBlockHandle itemBlock;
	HomeItemBlock *blockPtr;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	itemBlock = VMFind(document, NullHandle, pself->HI_userID);
	pself->HI_dimLevel = value;
	blockPtr = VMLock(document, itemBlock, &mem);
	blockPtr->HIB_dimLevel = pself->HI_dimLevel;
	if (pself->HI_userID < INITIAL_ROOM_USER_ID) @send self::MSG_ITEM_DIM_OR_BRIGHTEN();
	VMDirty(mem);
	VMUnlock(mem);
}

@extern method HomeItemClass, MSG_ITEM_CLEAR_SELECTION {
	if (pself->HI_selected) {
		pself->HI_selected = FALSE;
		@send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		@send self::MSG_META_RELEASE_TARGET_EXCL();
      if (pself->HI_userID >= INITIAL_GROUP_USER_ID) 
         @send HomeGroupList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	}
}

@extern method HomeItemClass, MSG_ITEM_SWITCH_BY_ID {
   if (ID == pself->HI_userID && pself->HI_userID < INITIAL_GROUP_USER_ID)
      @send self::MSG_ITEM_CHANGE_STATUS(Status, 1, 0);
}

@extern method HomeItemClass, MSG_ITEM_DO_FUNCTION {
	UnitStates status;

	if (userID != pself->HI_userID) return;
	switch (function) {
		case FUNCTION_DIMMER:
			status = HUS_DIMMER;
			break;
		case FUNCTION_BRIGHTER:
			status = HUS_BRIGHTER;
			break;
		case FUNCTION_ON:
			status = HUS_ON;
			break;
		case FUNCTION_OFF:
			status = HUS_OFF;
			break;
		case FUNCTION_DIM_TO_LEVEL:
			status = HUS_DIM;
			break;
	}
	@send self::MSG_ITEM_CHANGE_STATUS(status, 0, 0);
}

@extern method HomeItemClass, MSG_ITEM_CHECK_POSITION_AND_DOC_SIZE {
	/* This routine (hopefully) allows the user to make his or her house layout
		as large as necessary, simply by dragging objects off the edge of the
      current layout. */
	SizeAsDWord parentSize;
	word parentWidth, parentHeight, sizeFlag = 0;

	parentSize = @call @visParent::MSG_VIS_GET_SIZE();
	parentWidth = DWORD_WIDTH(parentSize);
	parentHeight = DWORD_HEIGHT(parentSize);
	if (pself->VI_bounds.R_right > parentWidth) {
		parentWidth = pself->VI_bounds.R_right;
		sizeFlag = 1;
	}
	if (pself->VI_bounds.R_bottom > parentHeight) {
		parentHeight = pself->VI_bounds.R_bottom;
		sizeFlag = 1;
	}
	if (sizeFlag == 1) {
		HomeMapBlock *mapPtr;
		MemHandle mem;

		document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
		mapPtr = VMLock(document, VMGetMapBlock(document), &mem);
		mapPtr->HMB_options.HDO_docWidth = parentWidth;
		mapPtr->HMB_options.HDO_docHeight = parentHeight;
		VMDirty(mem);
		VMUnlock(mem);
      @call HomeView::MSG_GEN_VIEW_SUSPEND_UPDATE();
		@call @visParent::MSG_VIS_SET_SIZE(parentWidth, parentHeight);
		@call HomeView::MSG_GEN_VIEW_SET_DOC_BOUNDS(parentHeight, parentWidth, 0, 0);
		@call HomeView::MSG_GEN_VIEW_MAKE_RECT_VISIBLE(
															  MRVF_ALWAYS_SCROLL, MRVM_50_PERCENT,
                                               MRVF_ALWAYS_SCROLL, MRVM_50_PERCENT,
                                               pself->VI_bounds.R_bottom, pself->VI_bounds.R_right,
                                               pself->VI_bounds.R_top, pself->VI_bounds.R_left);
      @call HomeView::MSG_GEN_VIEW_UNSUSPEND_UPDATE();
	}
}

@extern method HomeItemClass, MSG_META_START_SELECT {
   VMBlockHandle eventBlock;
   MemHandle mem;
   EventHandle msg;
   char myName[33]/*, messg[256]*/;
   word myID;
   HomeEventBlockHeader *eventBlockPtr;

   if (inputState & BI_DOUBLE_PRESS) { /* on a double click ... */

      /* ... magnify the view and center ourself in it. */
      @call HomeView::MSG_GEN_VIEW_SUSPEND_UPDATE();

      /* This is an interesting hack.  If we directly set the scale factor for
         the view, the view controller will set it's state accordingly.
         However, it will not set the state of the GCN list that is used
         by the controller to set the scale factor for all views.  This is done
         on purpose so that individual views can be set to different scale
         factors, but the controller seems to have a problem dealing with this.
         The GCN list will not propagate what it thinks is a previous state, 
         i.e. normal. If we send the message to the GCN list ourselves, we're 
         simulating using the controller and setting the view and controller 
         states. */
         
	  msg = @record GenViewClass::MSG_GEN_VIEW_SET_CONTROLLED_ATTRS(
	    GVCA_SHOW_HORIZONTAL | GVCA_SHOW_VERTICAL, 200);
	  @call application::MSG_META_GCN_LIST_SEND(GCNLSF_SET_STATUS, msg, 
	    NullHandle, GAGCNLT_CONTROLLED_GEN_VIEW_OBJECTS, MANUFACTURER_ID_GEOWORKS);

      @call HomeView::MSG_GEN_VIEW_MAKE_RECT_VISIBLE(
                                               MRVF_ALWAYS_SCROLL, MRVM_50_PERCENT,
                                               MRVF_ALWAYS_SCROLL, MRVM_50_PERCENT,
                                               pself->VI_bounds.R_bottom, pself->VI_bounds.R_right,
                                               pself->VI_bounds.R_top, pself->VI_bounds.R_left);
      @call HomeView::MSG_GEN_VIEW_UNSUSPEND_UPDATE();
   }
   document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
   eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
   eventBlockPtr = VMLock(document, eventBlock, &mem);
   @send HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(eventBlockPtr->HEBH_numEvents);
	VMUnlock(mem);
   strcpy(myName, pself->HI_name);
   myID = pself->HI_userID;
   @call @visParent::MSG_DOC_GROUP_BOX_ITEM_SELECTED(myID, myName);
   msg = @record HomeItemClass::MSG_ITEM_CLEAR_SELECTION();
   GCNListSend(MANUFACTURER_ID_BREADBOX, BGCNLT_ALL_ITEMS, msg, NullHandle, 0);
   pself->HI_selected = TRUE;
   @call self::MSG_META_GRAB_TARGET_EXCL();
   @send HomeUnitCommandClump::MSG_GEN_SET_ENABLED(VUM_NOW);
   @send HomeUnitDimValue::MSG_GEN_VALUE_SET_INTEGER_VALUE((word) pself->HI_dimLevel, FALSE);
   @send HomeUnitLockGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
   @send HomeUnitLockGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(1, pself->HI_locked);
   @call HomeUnitCommandNameText::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->HI_name,0);
   @send HomeItemTextVisibleGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
   @send HomeItemTextVisibleGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(1, pself->HI_textVisible);
}

@extern method HomeItemClass, MSG_ITEM_ADD_EVENT {
	VMBlockHandle eventBlock;
	MemHandle mem;
	ChunkHandle newEvent;
	HomeEventBlockHeader *eventBlockPtr;
	HomeEventBlock *newEventPtr;

	if (UserDoDialog(@HomeEventDialog) == IC_APPLY) {
		eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
		eventBlockPtr = VMLock(document, eventBlock, &mem);
		eventBlockPtr->HEBH_numEvents++;
		newEvent = LMemAlloc(mem, sizeof(HomeEventBlock));
		newEventPtr = LMemDerefHandles(mem, newEvent);
		newEventPtr->HEB_ownerID = pself->HI_userID;
		newEventPtr->HEB_days = @call DaysGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		newEventPtr->HEB_hour = @call TimeHour::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		if (@call TimeAMPMGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION()) {
			newEventPtr->HEB_hour += 12; /* a nonzero value in TimeAMPMGroup means PM */
			/* but let's not screw up noon events... */
			if (newEventPtr->HEB_hour == 24) newEventPtr->HEB_hour = 12;
		}
		/* ... or midnight ones... */
		else if (newEventPtr->HEB_hour == 12) newEventPtr->HEB_hour = 0;
		newEventPtr->HEB_minute = @call TimeMinute::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		newEventPtr->HEB_function = @call HomeEventFunctionList::
																	 MSG_GEN_ITEM_GROUP_GET_SELECTION();
		newEventPtr->HEB_oneShot = @call OnceOnly::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		newEventPtr->HEB_plusMinus = @call TimeRandomSwitchGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		if (newEventPtr->HEB_plusMinus) newEventPtr->HEB_plusMinus =
				@call TimeRandomValue::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		eventBlockPtr = MemDeref(mem);
		SortEvents(mem, newEvent);
		@call HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE
											(eventBlockPtr->HEBH_numEvents);
		@call process::MSG_PROCESS_ADD_EVENT_TO_SYSTEM_LIST(pself->HI_userID,
																			 *newEventPtr);
		VMDirty(mem);
		VMUnlock(mem);
	}
}

@extern method HomeItemClass, MSG_ITEM_EDIT_EVENT {
	FunctionCodes Function;
	Days daysToDo;
	byte hour, minute, PM, once, plusMinus;
	VMBlockHandle eventBlock;
	MemHandle mem;
	HomeEventBlockHeader *eventBlockPtr;
	HomeEventBlock *eventPtr, *prevEventPtr;
	ChunkHandle event, prevEvent = NullHandle;
	word item, count;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	item = @call HomeItemEventsList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if (item == GIGS_NONE) return;
	eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
	eventBlockPtr = VMLock(document, eventBlock, &mem);
	event = eventBlockPtr->HEBH_firstEvent;
	for (eventPtr = LMemDerefHandles(mem, event), count = 0; count < item; count++) {
		prevEvent = event;
		event = eventPtr->HEB_nextEvent;
		eventPtr = LMemDerefHandles(mem, event);
	}  /* traverse the list of events until we find the right one */
	if (prevEvent != NullHandle) prevEventPtr = LMemDerefHandles(mem, prevEvent);
	daysToDo = eventPtr->HEB_days;
	Function = eventPtr->HEB_function;
	minute = eventPtr->HEB_minute;
	hour = eventPtr->HEB_hour;
	once = eventPtr->HEB_oneShot;
	plusMinus = eventPtr->HEB_plusMinus;
	if (hour > 12) {
		hour -= 12;
		PM = 1;
	}
	else {
		if (hour == 0) hour = 12;
		PM = 0;
	}
	@call TimeAMPMGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(PM, FALSE);
	@call TimeHour::MSG_GEN_VALUE_SET_INTEGER_VALUE(hour, FALSE);
	@call TimeMinute::MSG_GEN_VALUE_SET_INTEGER_VALUE(minute, FALSE);
	if (plusMinus) {
		@call TimeRandomSwitchGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(1, 0);
		@call TimeValueAndGlyphsGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
		@call TimeRandomValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(plusMinus, FALSE);
	}
	else {
		@call TimeRandomSwitchGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(0, 0);
		@call TimeValueAndGlyphsGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	}
	@call OnceOnly::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(once, 0);
	@call HomeEventFunctionList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
										 (Function, FALSE);
	@call DaysGroup::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(daysToDo, 0);
	if (UserDoDialog(@HomeEventDialog) == IC_APPLY) {
		HomeEventBlock oldEvent = *eventPtr;

		Function = @call HomeEventFunctionList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		PM = @call TimeAMPMGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		hour = (@call TimeHour::MSG_GEN_VALUE_GET_INTEGER_VALUE()) + (12 * PM);
		if (hour == 24) hour = 12;
		else if (hour == 12) hour = 0;
		minute = @call TimeMinute::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		daysToDo = @call DaysGroup::
																	 MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		once = @call OnceOnly::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		plusMinus = @call TimeRandomSwitchGroup::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
		if (plusMinus) plusMinus = @call TimeRandomValue::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		eventPtr->HEB_days = daysToDo;
		eventPtr->HEB_hour = hour;
		eventPtr->HEB_minute = minute;
		eventPtr->HEB_function = Function;
		eventPtr->HEB_oneShot = once;
		eventPtr->HEB_plusMinus = plusMinus;
		if (prevEvent == NullHandle) eventBlockPtr->HEBH_firstEvent = eventPtr->HEB_nextEvent;
		else prevEventPtr->HEB_nextEvent = eventPtr->HEB_nextEvent;
		eventPtr->HEB_nextEvent = NullHandle;
		/* we've removed the edited event from the list so we can resort it. */
		SortEvents(mem, event);
		VMDirty(mem);
      eventPtr = LMemDerefHandles(mem, event);
		@send process::MSG_PROCESS_SYSTEM_EVENT_CHANGED(pself->HI_userID, oldEvent,
														  pself->HI_userID, *eventPtr);
		@send HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(GDLI_NO_CHANGE);
	}
	VMUnlock(mem);
}

@extern method HomeItemClass, MSG_ITEM_DELETE_EVENT {
	VMBlockHandle eventBlock;
	ChunkHandle event;
	MemHandle mem;
	HomeEventBlockHeader *eventBlockPtr;
	HomeEventBlock *eventPtr, eventToTrash;
	word item, count;

	item = @call HomeItemEventsList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if (item == GIGS_NONE) return;
	if (UserDoDialog(@DeleteEventBox) == IC_YES) {
		eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
		eventBlockPtr = VMLock(document, eventBlock, &mem);
		event = eventBlockPtr->HEBH_firstEvent;
		for (eventPtr = LMemDerefHandles(mem, event), count = 0; count < item; count++) {
		/* traverse the list to find the item to delete */
			event = eventPtr->HEB_nextEvent;
			eventPtr = LMemDerefHandles(mem, event);
		}
		memcpy(&eventToTrash, eventPtr, sizeof(HomeEventBlock));
		VMUnlock(mem);
		@call self::MSG_ITEM_DELETE_PASSED_EVENT(eventToTrash);
		@send process::MSG_PROCESS_DELETE_SYSTEM_EVENT(pself->HI_userID, eventToTrash);
	}
}

@extern method HomeItemClass, MSG_ITEM_DELETE_PASSED_EVENT {
	VMBlockHandle eventBlock;
	ChunkHandle event, prevEvent;
	MemHandle mem;
	HomeEventBlockHeader *eventBlockPtr;
	HomeEventBlock *eventPtr, *prevEventPtr;
	word count;

	if (eventToTrash.HEB_ownerID != pself->HI_userID) return;
	eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
	eventBlockPtr = VMLock(document, eventBlock, &mem);
	event = eventBlockPtr->HEBH_firstEvent;
	for (count = 0; count < eventBlockPtr->HEBH_numEvents; count++) {
		/* traverse the list to find the item to delete */
		eventPtr = LMemDerefHandles(mem, event);
		if ((eventPtr->HEB_days == eventToTrash.HEB_days) &&
				 (eventPtr->HEB_hour == eventToTrash.HEB_hour) &&
				 (eventPtr->HEB_minute == eventToTrash.HEB_minute) &&
				 (eventPtr->HEB_function == eventToTrash.HEB_function))
				goto gotEvent; /* this means it's the eventToTrash */
		prevEvent = event;
		event = eventPtr->HEB_nextEvent;
	}
	/* if we get here, we didn't find the event in the list. */
	VMUnlock(mem);
	return;

  gotEvent:
	if (count == 0) { /* if we're removing the first event */
		eventBlockPtr->HEBH_firstEvent = eventPtr->HEB_nextEvent;
	}
	else
	{
		prevEventPtr = LMemDerefHandles(mem, prevEvent);
		prevEventPtr->HEB_nextEvent = eventPtr->HEB_nextEvent;
	}
	eventBlockPtr->HEBH_numEvents--;
	LMemFreeHandles(mem, event);
	/* if we're selected, we might be showing our events right now, so we should
	 make the list redraw itself to reflect the deletion. */
	VMDirty(mem);
	if (pself->HI_selected)
		@call HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(eventBlockPtr->HEBH_numEvents);
	VMUnlock(mem);
}

@extern method HomeItemClass, MSG_ITEM_GET_NAME {
	strcpy(string, pself->HI_name);
}

@extern method HomeItemClass, MSG_QUERY_EVENT_MONIKER {
	char Moniker[45] = "";

	@call self::MSG_ITEM_BUILD_EVENT_STRING(item, Moniker);
	@call HomeItemEventsList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, Moniker);
}

@extern method HomeItemClass, MSG_ITEM_GET_NUM_EVENTS {
	VMBlockHandle eventBlock;
	MemHandle mem;
	HomeEventBlockHeader *eventBlockPtr;
	word events;

	eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
	eventBlockPtr = VMLock(document, eventBlock, &mem);
	events = eventBlockPtr->HEBH_numEvents;
	VMUnlock(mem);
	return events;
}

@extern method HomeItemClass, MSG_ITEM_BUILD_EVENT_STRING {
	VMBlockHandle eventBlock;
	MemHandle mem;
	HomeEventBlockHeader *eventBlockPtr;
	ChunkHandle event;
	HomeEventBlock *eventPtr;
	FunctionCodes Function;
	Days daysToDo;
	TimerDateAndTime time;
	char timeString[10] = "", plusMinusChar[] = {' ', C_PLUSMINUS, ' ', '\0'};
	char *source;
	word count;
	byte loop, plusMinus, once;

	eventBlock = @call self::MSG_ITEM_GET_EVENT_BLOCK();
	eventBlockPtr = VMLock(document, eventBlock, &mem);
	event = eventBlockPtr->HEBH_firstEvent;
	for (eventPtr = LMemDerefHandles(mem, event), count = 0; count < item; count++) {
	/* traverse the list to find the item we need a moniker for. */
		event = eventPtr->HEB_nextEvent;
		eventPtr = LMemDerefHandles(mem, event);
	}
	daysToDo = eventPtr->HEB_days;
	Function = eventPtr->HEB_function;
	plusMinus = eventPtr->HEB_plusMinus;
	once = eventPtr->HEB_oneShot;
	time.TDAT_hours = eventPtr->HEB_hour;
	time.TDAT_minutes = eventPtr->HEB_minute;
	time.TDAT_seconds = 0;
	VMUnlock(mem);
	string[0] = '\0';
	MemLock(OptrToHandle(@SundayInitStr));
	for (loop = 0; loop <7; loop++) {
		switch (daysToDo &(1 << loop)) {
			case D_SUNDAY:
				source = LMemDeref(@SundayInitStr);
				source[strlen(LMemDeref(@SundayInitStr))] = 0;
				break;
			case D_MONDAY:
				source = LMemDeref(@MondayInitStr);
				source[strlen(LMemDeref(@MondayInitStr))] = 0;
				break;
			case D_TUESDAY:
				source = LMemDeref(@TuesdayInitStr);
				source[strlen(LMemDeref(@TuesdayInitStr))] = 0;
				break;
			case D_WEDNESDAY:
				source = LMemDeref(@WednesdayInitStr);
				source[strlen(LMemDeref(@WednesdayInitStr))] = 0;
				break;
			case D_THURSDAY:
				source = LMemDeref(@ThursdayInitStr);
				source[strlen(LMemDeref(@ThursdayInitStr))] = 0;
				break;
			case D_FRIDAY:
				source = LMemDeref(@FridayInitStr);
				source[strlen(LMemDeref(@FridayInitStr))] = 0;
				break;
			case D_SATURDAY:
				source = LMemDeref(@SaturdayInitStr);
				source[strlen(LMemDeref(@SaturdayInitStr))] = 0;
				break;
			default:
				source = LMemDeref(@StarStr);
				source[strlen(LMemDeref(@StarStr))] = 0;
		}
	strcat(string, source);
	}
	LocalFormatDateTime(timeString, DTF_HM, &time);
	strcat(string, " ");
	strcat(string, timeString);
	if (plusMinus) {
		strcpy(timeString, "");
		strcat(string, plusMinusChar);
		LocalFixedToAscii(timeString, MakeWWFixed((word) plusMinus), 0);
		strcat(string, timeString);
		strcat(string, LMemDeref(@MinStr));
	}
	switch (Function){
		case FUNCTION_ON:
			source = LMemDeref(@TurnOnStr);
			source[strlen(LMemDeref(@TurnOnStr))] = 0;
			break;
		case FUNCTION_OFF:
			source = LMemDeref(@TurnOffStr);
			source[strlen(LMemDeref(@TurnOffStr))] = 0;
			break;
		case FUNCTION_BRIGHTER:
			source = LMemDeref(@BrighterStr);
			source[strlen(LMemDeref(@BrighterStr))] = 0;
			break;
		case FUNCTION_DIMMER:
			source = LMemDeref(@DimmerStr);
			source[strlen(LMemDeref(@DimmerStr))] = 0;
			break;
		case FUNCTION_DIM_TO_LEVEL:
			source = LMemDeref(@PresetStr);
			source[strlen(LMemDeref(@PresetStr))] = 0;
			break;
	}
	strcat(string, source);
	if (once) {
		strcat(string, LMemDeref(@OnceStr));
	}
	MemUnlock(OptrToHandle(@SundayInitStr));
}

@extern method HomeItemClass, MSG_ITEM_ALLOC_OR_ATTACH_EVENT_BLOCK {
	MemHandle mem;
	VMBlockHandle eventBlock;
	HomeEventBlockHeader *eventBlockPtr;

	document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
	if (pself->HI_userID < INITIAL_ROOM_USER_ID)
		eventBlock = VMFind(document, NullHandle, BlockID);
	else
		eventBlock = NullHandle;  /* always allocate an event block for a room or group */
	if (eventBlock == NullHandle) {
		eventBlock = VMAllocLMem(document, LMEM_TYPE_GENERAL, sizeof(HomeEventBlockHeader));
		VMModifyUserID(document, eventBlock, BlockID);
		eventBlockPtr = VMLock(document, eventBlock, &mem);
		eventBlockPtr->HEBH_refCount = 1;
		eventBlockPtr->HEBH_numEvents = 0;
		eventBlockPtr->HEBH_firstEvent = NullHandle;
	}
	else {
		eventBlockPtr = VMLock(document, eventBlock, &mem);
		eventBlockPtr->HEBH_refCount++;
	}
	VMDirty(mem);
	VMUnlock(mem);
}

@extern method HomeItemClass, MSG_ITEM_DEC_OR_DELETE_EVENT_BLOCK {
        MemHandle mem;
        VMBlockHandle eventBlock;
        HomeEventBlockHeader *eventBlockPtr;

        document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
        eventBlock = VMFind(document, NullHandle, BlockID);
        eventBlockPtr = VMLock(document, eventBlock, &mem);
        eventBlockPtr->HEBH_refCount--;
        if (eventBlockPtr->HEBH_refCount <= 0) {
                VMUnlock(mem);
                VMFree(document, eventBlock);
        }
        else {
                VMDirty(mem);
                VMUnlock(mem);
        }
}

@extern method HomeItemClass, MSG_ITEM_GET_EVENT_BLOCK {
   word BlockID;

   document = @call @visParent::MSG_GEN_DOCUMENT_GET_FILE_HANDLE();
   if (pself->HI_userID < INITIAL_ROOM_USER_ID) { /* it's a unit */
      BlockID = @call self::MSG_UNIT_GET_NUMBER_AND_HOUSE();
      BlockID += FIRST_EVENT_USER_ID;
   }
   else {
      BlockID = pself->HI_userID - INITIAL_ROOM_USER_ID;
      BlockID += FIRST_ROOM_EVENT_USER_ID;
   }
   return(VMFind(document, NullHandle, BlockID));
}

