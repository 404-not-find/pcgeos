/*
 **************************************************************************
 *  FILE:		imp_mtds.goc
 *  PROJECT:		Breadbox HomeBase
 *  DESCRIPTION:	This file has methods for importing .CSV
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "hbase.goh"

/*
 ***************************************************************************
 *		External Objects
 ***************************************************************************
 */

 Boolean isImport = FALSE;
 Boolean canxImport = FALSE;

 @extern object ImportDBox;
 @extern object ImpFileSel;
 @extern object ImportProg;
 @extern object HBaseApp;
 @extern object Field1;
 @extern object Field2;
 @extern object Field3;
 @extern object Field4;
 @extern object Field5;
 @extern object Field6;
 @extern object Field7;
 @extern object Field8;
 @extern object Field9;
 @extern object Field10;
 @extern object IndexDList;
 @extern object ImpStatusDBox;

 @extern chunk ImportMsg;
 @extern chunk ImpOpenErrMsg;
 @extern chunk ImpCloseErrMsg;
 @extern chunk ImpReadErrMsg;
 @extern chunk ImpBadTypeErrMsg;
 @extern chunk ImpTooManyErrMsg;

/*
 ***************************************************************************
 *		Code for HBaseProcessClass   importing .CSV
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_IMPORT for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *              is clicked
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_OPEN_IMPORT
{

    /* start out in Document */
    @send ImpFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

    /* Open the dialog box */
    @call ImportDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_IMPORT_SELECTOR_ACTION for HBaseProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:	
 *              This is essentially from Objects Code Disp 14-2
 *              Basically checks for dbl click
 *              
 *
 ***********************************************************************/

@extern method HBaseProcessClass, MSG_IMPORT_SELECTOR_ACTION
{

  if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {/* was it a double click? */
    /* yup */
    if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  { /* a file? */
      /* yup - send ourselves the import msg */
      @send, forceQueue process::MSG_IMPORT_CSV();
      }
    } /* if not - do nothing */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_IMPORT_CSV for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	
 *              
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_IMPORT_CSV
{
    char		CSVName[FILE_LONGNAME_BUFFER_SIZE];
    char		CSVPath[PATH_BUFFER_SIZE];
    char		CSVfieldBuffer[DATA_LEN];
    char		charBuffer[1];
    dword		selFlags, CSVfileSize, i;
    FileHandle		CSVFileHandle;
    DiskHandle		CSVDiskhandle;
    word		fileCloseError, charRead;
    word		numImpFields, fieldSize, impFieldNum;
    Boolean		quoteFlag = FALSE;
    Boolean		dblQuoteFlag = FALSE;


    /* first get the flags and file name of the selection */
    selFlags = @call ImpFileSel::
	       MSG_GEN_FILE_SELECTOR_GET_SELECTION(CSVName);

    /* check to see if it's a file - redundant if dbl clicked */
    if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
       /* if not just return */
       return;
       }

    /* put up an are you sure box if not a new file */
    if (numRecords != 0)  { 
       if (AckDBox(CSVName, @ImportMsg) == ACK_NO) return;
       }

    /* get the file's path and disk handle */
    @call ImpFileSel::MSG_GEN_PATH_GET(CSVPath, sizeof(CSVPath));
    CSVDiskhandle = @call ImpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

    /* save our HomeBase file directory */
    FilePushDir();

    /* and set the CSV file dir  - FileSel doesn't do this */
    FileSetCurrentPath(CSVDiskhandle, CSVPath);

    /* dismiss the file selector box now */
    @send ImportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* and open the CSV file */
    CSVFileHandle = FileOpen(CSVName, (FILE_ACCESS_R | FILE_DENY_W));
    /* if CSVFileHandle is NULL then there was an error */
    if (CSVFileHandle == NullHandle)  {
       NotifyDBox(@ImpOpenErrMsg);
       FilePopDir();
       return;  /* bail out */
       }

    canxImport = FALSE;
    /* Open the modal cancel dialog box */
    @call ImpStatusDBox::MSG_GEN_INTERACTION_INITIATE();

    /* OK let's read the file...
     * FileRead returns -1 if there was an error */
    /* first get the file size */
    CSVfileSize = FileSize(CSVFileHandle);
    /* init the number of fields */
    numImpFields = 0;

    /* first count the number of fields
     * this is also a good time to see if it
     * really is a .csv file by reading the first line*/
    for (i = 0; i < CSVfileSize; i++)  {
       charRead = FileRead(CSVFileHandle, charBuffer, 1, FALSE);
       if (charRead == 1)  {  /* good read */
	  /* check for CR/LF */
          if ((charBuffer[0] != '\r') && (charBuffer[0] != '\n'))  {
	     /* not CR/LF so ... */
	     /* inc field count if comma outside quotes */
	     if (charBuffer[0] == '"')  {
	        /* toggle quoteFlag */
		if (quoteFlag) quoteFlag = FALSE;
                else quoteFlag = TRUE;
		}
	     if ((charBuffer[0] == ',') && (!quoteFlag)) numImpFields++;
	     }  /*  end of not CR/LF if */
            else if (charBuffer[0] == '\r')  {
             /* here's where we end the test line */
	     /* so exit loop here */
	     i = CSVfileSize;
	     }
	  } /* end of good read if */
	 else  {
	  /* read error */
	  NotifyDBox(@ImpReadErrMsg);

          /* close the file */
          fileCloseError = FileClose(CSVFileHandle, FALSE);
          if (fileCloseError != 0)  {
	     NotifyDBox(@ImpCloseErrMsg);
	     }
	  /* and restore the HBase file stuff */
	  @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  FilePopDir();
          return;
	  }  /* end of bad read else */

       } /* end of count fields for */

    if (numImpFields == 0) {
       /* not a valid csv file */
       NotifyDBox(@ImpBadTypeErrMsg);
       /* close the file */
       fileCloseError = FileClose(CSVFileHandle, FALSE);
       if (fileCloseError != 0)  {
          NotifyDBox(@ImpCloseErrMsg);
	  }  
       /* and restore the Hbase file stuff */
       @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
       FilePopDir();
       return;
       }   /* end of not valid CSV if */

    if (numImpFields >= 10) {  /* count routine only counts ,s */
       /* too many fields for HBase */
       NotifyDBox(@ImpTooManyErrMsg);
       /* close the file */
       fileCloseError = FileClose(CSVFileHandle, FALSE);
       if (fileCloseError != 0)  {
          NotifyDBox(@ImpCloseErrMsg);
	  } 
       /* and restore the Hbase file stuff */
       @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
       FilePopDir();
       return;
       }   /* end of not valid CSV if */

    /* We need to check the number of fields
     * and make sure the fields we need are usable
     */
    numImpFields++; /* gives fields vs commas */
    if (numImpFields > numFields)  {
       numFields = numImpFields;
       /* Show the fields */
       @call process::MSG_DISPLAY_FIELDS(numFields);
       }

    /* Everything is OK so let's start reading data */
    /* initialize things... */
    isImport = TRUE;
    fieldSize = 0;
    impFieldNum = 1;
    CSVfieldBuffer[0] = 0;
    /* including resetting read position
     * (we need to reread the first line) */
    FilePos(CSVFileHandle, 0, FILE_POS_START); 
    for (i = 0; i < CSVfileSize; i++)  {
       charRead = FileRead(CSVFileHandle, charBuffer, 1, FALSE);
       if (charRead == 1)  {  /* good read */
	  /* add null to end of char buffer */
	  charBuffer[1] = NULL;
	  /* swap dash for tilde */
	  if (charBuffer[0] == '~') charBuffer[0] = '-';
	  /* toggle quoteFlag */
	  if (charBuffer[0] == '"')  {
	     if (quoteFlag) quoteFlag = FALSE;
             else quoteFlag = TRUE;
	     }
	  /* check for end of field  */
	  if ((charBuffer[0] == '\r')
			|| ((charBuffer[0] == ',')
			     && (!quoteFlag))) {
	     /* it is end of field */
	     /* check to see if it has just one quote...
	      * a null field set off with quotes will have 
	      * one left due to the double quote check stuff
	      */
	     if ((strlen(CSVfieldBuffer) == 1)
			     && (CSVfieldBuffer[0] == '"'))
		CSVfieldBuffer[0] = NULL;
	     /* copy the field info into the field window */
	     switch (impFieldNum) {
	        case 1:
		   @call Field1::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 2:
		   @call Field2::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 3:
		   @call Field3::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 4:
		   @call Field4::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 5:
		   @call Field5::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 6:
		   @call Field6::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 7:
		   @call Field7::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 8:
		   @call Field8::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 9:
		   @call Field9::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		case 10:
		   @call Field10::MSG_VIS_TEXT_REPLACE_ALL_PTR(
				    CSVfieldBuffer, 0);
                   break;
		}  /* end of switch */
	     impFieldNum++;
	     fieldSize = 0;
	     CSVfieldBuffer[0] = 0;  /* re-init the buffer */
	     /* and reset the double quote flag */
	     dblQuoteFlag = FALSE;

	     /* was it end of record? */
	     if (charBuffer[0] == '\r')  {
		/* end of the import record so add to data base */
		@call self::MSG_ENTER_DATA();
		/* see if user canx & exit loop */
		if (canxImport)  { 
		   i = CSVfileSize;
                   } 
		/* reset the field number */
		impFieldNum = 1;
		/* and reset the double quote flag */
		dblQuoteFlag = FALSE;
		}
	     }  /* end of end of field if */

	    /* returns and commas outside quotes already checked
	     * so pass all BUT newlines and first of double quotes
	     */
	    else  {
	     if (!dblQuoteFlag)  {  /* don't pass quote */
                if (charBuffer[0] == '"') dblQuoteFlag = TRUE;
		if ((charBuffer[0] != '\n')
	                 && (charBuffer[0] != '"')) {
		   /* if field not full - add to string */
                   fieldSize++;
	           if (fieldSize <= DATA_LEN - 1)
		      strcat(CSVfieldBuffer, charBuffer);
		   }
                }
	       else   {  /* pass quote */
		dblQuoteFlag = FALSE;
		if (charBuffer[0] != '\n') {
		   /* if field not full - add to string */
                   fieldSize++;
	           if (fieldSize <= DATA_LEN - 1)
		      strcat(CSVfieldBuffer, charBuffer);
		   }
                }
	     }  /* end of pass chars else */

	  } /* end of good read if */
	 else  {
	  /* read error */
	  NotifyDBox(@ImpReadErrMsg);

          /* close the file */
          fileCloseError = FileClose(CSVFileHandle, FALSE);
          if (fileCloseError != 0)  {
	     NotifyDBox(@ImpCloseErrMsg);
	     }
	  /* and restore the HBase file stuff */
	  @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  isImport = FALSE;
	  FilePopDir();
          return;
	  }  /* end of bad read else */

       } /* end of read data for */

    /* All done so close the file */
    fileCloseError = FileClose(CSVFileHandle, FALSE);
    if (fileCloseError != 0)  {
       NotifyDBox(@ImpCloseErrMsg);
       }
    /* and restore the Hbase file stuff */
    @send ImpStatusDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
    isImport = FALSE;
    FilePopDir();

    /* initialize the list - since we didn't add during import */
    @send IndexDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);

    /* show the first file */
    @call process::MSG_NAV_RECORDS(FIRST);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CANCEL_IMPORT for HBaseProcessClass
 *              
 *
 * DESCRIPTION:	sets the global canxImport flag
 *              
 *              
 *
 ***********************************************************************/
@extern method HBaseApplicationClass, MSG_CANCEL_IMPORT
{

    canxImport = TRUE;

}

