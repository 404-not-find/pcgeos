/*
 **************************************************************************
 *  FILE:		nav_mtds.goc
 *  PROJECT:		Breadbox HomeBase
 *  DESCRIPTION:	This file has methods for record navigation
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "hbase.goh"

/*
 ***************************************************************************
 *		External Objects
 ***************************************************************************
 */

 @extern object Field1;
 @extern object Field2;
 @extern object Field3;
 @extern object Field4;
 @extern object Field5;
 @extern object Field6;
 @extern object Field7;
 @extern object Field8;
 @extern object Field9;
 @extern object Field10; 
 @extern object FirstButton;
 @extern object PrevButton;
 @extern object NextButton;
 @extern object LastButton;
 @extern object NewButton;
 @extern object EnterButton;
 @extern object DeleteButton;
 @extern object ModButton;
 @extern object IndexDList;

/*
 ***************************************************************************
 *		Code for HBaseProcessClass   record navigation
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ShowData for HBaseProcessClass
 *
 * CALLED BY:
 *      	MSG_NAV_RECORDS
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/

void ShowData (void)
{
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		i, j, currentGroup, currentGroupRec;
    word		bufCount, fieldCount, currentNumGroupRecs;
    char		fieldString[DATA_LEN];
    char		strBuffer[(10 * DATA_LEN)];


    /* first get the cG and cGR based on currentRecord */
    GetGroupAndGrpRec (currentRecord,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);


    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[currentGroup].GS_group;
    /* Extract the item handle for the record. */
    indexItem = group[currentGroup].GS_indexStart;
    DBUnlock(mapPtr);

    /* get the index array address */
    index = DBLock(HBFile, groupGroup, indexItem);
    recordItem = index[currentGroupRec];
    DBUnlock(index);

    /* get the record struct address */
    record = DBLock(HBFile, groupGroup, recordItem);
    /* copy the record to the buffer */
    strcpy(strBuffer, record->RS_data);
    DBUnlock(record);

    /* now cycle the data into the fields */
    bufCount = 0;
    for (i = 1; i <= numFields; i++)  {
       for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
	  if (strBuffer[bufCount] != '~')  {
	     fieldString[fieldCount] = strBuffer[bufCount];
	     bufCount++;
             }
	  else  {
	     fieldString[fieldCount] = NULL;
	     bufCount++;
	     switch (i)  {
		case 1:
                   @call Field1::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 2:
                   @call Field2::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 3:
                   @call Field3::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 4:
                   @call Field4::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 5:
                   @call Field5::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 6:
                   @call Field6::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 7:
                   @call Field7::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 8:
                   @call Field8::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 9:
                   @call Field9::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
		case 10:
                   @call Field10::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                   break;
                }  /* end switch */
	     fieldCount = DATA_LEN; /* force exit loop */
	     }  /* end show it else */

	  } /* end this field for */

       } /* end cycle thru fields for */


    /* set the nav buttons */
    @send NewButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send DeleteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send ModButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EnterButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    if ((currentRecord + 1) == numRecords)  { /* this is last rec */
       @send NextButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       @send LastButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       }
      else  {
       @send NextButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       @send LastButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       }
    if (currentRecord == 0) { /* this is first rec */
       @send FirstButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       @send PrevButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       }
      else {
       @send FirstButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       @send PrevButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
       }

    @send IndexDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(currentRecord, FALSE);

    /* update the current record display */
    UpdateCurRecord();


}

/***********************************************************************
 *
 * FUNCTION:	ClearData for HBaseProcessClass
 *
 * CALLED BY:	MSG_NEW_RECORD,
 *
 * STRATEGY:    Clears the screen of data
 *		
 *
 ***********************************************************************/

void ClearData (void)
{
    @call Field1::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 1 )
       @call Field2::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 2 )
       @call Field3::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 3 )
       @call Field4::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 4 )
       @call Field5::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 5 )
       @call Field6::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 6 )
       @call Field7::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 7 )
       @call Field8::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 8 )
       @call Field9::MSG_VIS_TEXT_DELETE_ALL();
    if (numFields > 9 )
       @call Field10::MSG_VIS_TEXT_DELETE_ALL();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NAV_RECORDS for HBaseProcessClass
 *              (word whichWay)
 *
 * DESCRIPTION:	Displays the first record.
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_NAV_RECORDS
{

    /* check for new record on screen and if PREV was selected,
     * change whichWay to LAST since that's the record to show
     */
/*    if ((currentRecord == numRecords) && (whichWay == PREV))
	     whichWay = LAST;  */

    switch (whichWay) {
       case PREV:
	  currentRecord--;
          break;
       case NEXT:
	  currentRecord++;
          break;
       case FIRST:
	  currentRecord = 0;
          break;
       case LAST:
	  currentRecord = numRecords - 1;
          break;
       }  /* end switch */


    ShowData();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_INDEX_DLIST_MONIKER_QUERY for HBaseProcessClass
 *
 * PARAMETERS:  void (optr list, word item)
 *
 * DESCRIPTION:	shows entries in the list.
 *
 *
 *
 ***********************************************************************/

@extern method HBaseProcessClass, MSG_INDEX_DLIST_MONIKER_QUERY
{
    RecordStruct	*record;
    GroupStruct		*group;
    DBItem		*index;
    DBMapStruct* 	mapPtr;
    DBItem		recordItem, indexItem;
    DBGroup		groupGroup;
    word		i, currentGroup, currentGroupRec;
    word		j, savedItem, currentNumGroupRecs;
    char		fieldString[DATA_LEN];


    savedItem = item;

    /* first convert the item (supplied by the dlist) into
     * the currentGroup and currentGroupRec
     */
    GetGroupAndGrpRec (item,
		       &currentGroup,
		       &currentGroupRec,
		       &currentNumGroupRecs);

    /* Get the record info */
    mapPtr = DBLockMap(HBFile);
    group = (GroupStruct *) (mapPtr + 1);
    groupGroup = group[currentGroup].GS_group;
    /* Extract the item handle for the record. */
    indexItem = group[currentGroup].GS_indexStart;
    DBUnlock(mapPtr);

    /* get the index array address */
    index = DBLock(HBFile, groupGroup, indexItem);
    recordItem = index[currentGroupRec];
    DBUnlock(index);

    /* get the record struct address */
    record = DBLock(HBFile, groupGroup, recordItem);
    /* and read the first field info */
    i = 0;
    while (record->RS_data[i] != '~') {
       fieldString[i] = record->RS_data[i];
       i++;
       } 
    fieldString[i] = NULL;
    DBUnlock(record);


    /* Show the field1 data in the list item. */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
		 savedItem, fieldString);

}


/***********************************************************************
 *
 * MESSAGE:	MSG_INDEX_DLIST_APPLY for HBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - Shows data in fields -
 *
 *
 ***********************************************************************/
@extern method HBaseProcessClass, MSG_INDEX_DLIST_APPLY
{

    currentRecord = selection;

    ShowData();

} 

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	sets instance data in HBTriggerClass to get ready
 *		for a possibly held down button
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_META_START_SELECT
{
    pself->HBTI_wait = 20 ;  /* could set this in .goh */
    pself->HBTI_held = TRUE ;
    @send oself::MSG_HB_TRIGGER_CLICK() ;
    @callsuper() ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_HB_TRIGGER_CLICK for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	repeats trigger action if button held down
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_HB_TRIGGER_CLICK
{

    /* bail if PrevButton and first record */
    if ((currentRecord == 0) && (oself == @PrevButton))
       return; 

    /* bail if NextButton and last record */
    if ((currentRecord == numRecords - 1) && (oself == @NextButton))
       return; 

    /* sends the button action MSG every 20/60s of a second */
    if (pself->HBTI_held == TRUE)  {
       /* this adds a delay so a single click reacts right */
       if (pself->HBTI_wait != 20)
          @send oself::MSG_GEN_TRIGGER_SEND_ACTION(FALSE) ;
       if (pself->HBTI_wait != 19)
	  pself->HBTI_wait-- ;
       pself->HBTI_timer = TimerStart(
                                TIMER_EVENT_ONE_SHOT,
                                oself,
                                pself->HBTI_wait,
                                MSG_HB_TRIGGER_CLICK,
                                pself->HBTI_wait,
                                &pself->HBTI_timerId);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_LOST_MOUSE_EXCL for HBaseTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	resets instance data in HBTriggerClass
 *
 *
 *
 ***********************************************************************/
@extern method HBaseTriggerClass, MSG_META_LOST_MOUSE_EXCL
{
    pself->HBTI_held = FALSE ;
    @callsuper() ;
}
