
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/***************************************************************************
 *  FILE:  CSORTLIS.GOC
 ***************************************************************************/
@include "gpcchat.goh"
@include "externs.goh"

/*-------------------------------------------------------------------------
 | Module:   SortDynamicListClass
 |           Copyright (c) 1997 Breadbox Computer Company
 | Description:
 |    The SortDynamicListClass is a sub-class of the GenDynamicListClass
 |    and uses all the same traits except that it keeps the list in memory
 |    as a list of fixed length strings (user-defined).  The strings
 |    are automatically sorted case insensitive.  A maximum number of
 |    strings is also defined (usually around 100).
 |    The strings are stored in a ChunkArray.
 |
 | Usage:
 |    Use SortDynamicListClass just like a GenDynamicListClass except
 |    you make that object the receiver of the query msg (note this
 |    requires the destination to be this object and to receive all
 |    regular messages).
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |                   (LES = Lysle Shields)
 |    jfh  09/10/99	 Added a boolean to the chunk array to hold ignored status
 |
 |
 *-----------------------------------------------------------------------*/

/*=========================================================================*
 *  METHODS FOR CLASS:  SortDynamicListClass
 *=========================================================================*/

@classdecl SortDynamicListClass ;

/*-------------------------------------------------------------------------
 | Routine:  IFindElement                                      * INTERNAL *
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Searches the chunk array for a matching name.  In addition, the
 |    list is assumed to be organized alphabetically and stops on the
 |    name that is after where it should be.  Otherwise, it returns
 |    a pointer to the matching entry.
 |
 | Inputs:
 |    optr array                  -- Chunk array to search
 |    char *p_item                -- Query item to search
 |    word *index                 -- Pointer to returned index
 |
 | Outputs:
 |    char *                      -- Pointer to found element, else returns
 |                                   the next element in the list of
 |                                   where it should be.  NULL is returned
 |                                   if at the end of the list.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 *-----------------------------------------------------------------------*/

char *IFindElement(optr array, char *p_item, word *index)
{
    word i ;
    word num ;
    PeopleHereStruct *p_element ;
    char nick[NICK_LEN];
    sword diff ;

    num = ChunkArrayGetCount(array) ;
    for (i=0; i<num; i++)  {
	   p_element = ChunkArrayElementToPtr(array, i, 0) ;
	   strcpy(nick, p_element->PHS_nick);
	   diff = LocalCmpStringsNoCase(p_item, nick, 1000);
	   if (diff <= 0)
		  break ;
    }

    /* Null means you are at the end of the list */
    if (i==num)
        p_element = NULL ;

    *index = i ;

    return p_element ;
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_ADD_ITEM
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Add a new into the array and the dynamic list.
 |
 | Inputs:
 |    char *p_item                -- String to add to the list.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_ADD_ITEM
{
    MemHandle mem ;
    ChunkHandle chunk ;
    PeopleHereStruct *p_element ;
    char	nick[NICK_LEN];
    optr array ;
    word num ;
    word index ;


    /* Add a new item to the list */
    /* If we don't have an array, create one */
    if (pself->SDLI_array == NullHandle)  {
	   mem = MemAllocLMem(LMEM_TYPE_GENERAL, 0) ;
	   MemLock(mem) ;
	   pself = ObjDerefGen(oself) ;
	   chunk = ChunkArrayCreate(mem, sizeof(PeopleHereStruct), 0, 0) ;
	   pself = ObjDerefGen(oself) ;
	   pself->SDLI_array = ConstructOptr(mem, chunk) ;
	   @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ;
	   MemUnlock(mem) ;
    }

    array = pself->SDLI_array ;
    MemLock(OptrToHandle(array)) ;
    nick[0] = 0;

    /* Only add if there is room.  Else don't add it */
    num = ChunkArrayGetCount(array) ;
    if (num < pself->SDLI_maxEntries)  {
	   /* Find the first element that is equal or after this name */
	   p_element = IFindElement(array, p_item, &index) ;
	   if (p_element)  strcpy(nick, p_element->PHS_nick);
        /* Don't add duplicates */
	   if (LocalCmpStringsNoCase(p_item, nick, 1000) != 0)  {
		  if (p_element == NULL)  {
                /* If NULL is returned, we need to add at the end */
			 p_element = ChunkArrayAppend(array, 0) ;
		  } else {
                /* Not NULL, insert a new item in the middle */
			 p_element = ChunkArrayInsertAt(array, p_element, 0) ;
		  }
		  strncpy(p_element->PHS_nick, p_item, NICK_LEN - 1);
		  p_element->PHS_ignore = FALSE;
		  @call oself::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(index, 1) ;
        }
    }

    MemUnlock(OptrToHandle(array)) ;
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_DELETE_ITEM
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Delete an item in the array by the given name.
 |
 | Inputs:
 |    char *p_item                -- Name to find to delete.  If not found,
 |                                   nothing happens.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_DELETE_ITEM
{
    PeopleHereStruct *p_element ;
    optr array ;
    word index ;
    char oNick[51], nick[NICK_LEN];
    Boolean	deleted = FALSE;


    nick[0] = 0;
    array = pself->SDLI_array ;
    if (array)  {
        MemLock(OptrToHandle(array)) ;

	   /* Find the element */
	   p_element = IFindElement(array, p_item, &index) ;
	   if (p_element)  strcpy(nick, p_element->PHS_nick);
	   if ((nick[0]) && (strncmp(nick, p_item, NICK_LEN-1)==0))  {
		  /* Only delete if we found it */
		  ChunkArrayDelete(array, p_element);
		  @call oself::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(index, 1) ;
		  deleted = TRUE;
	   }
	   else  {
		 /* we didn't find it... so try adding a @ to the front.  It
		  * may be an operator */
		 strcpy (oNick, "@");
		 strcat (oNick, p_item);
		 /* Find the element */
		 p_element = IFindElement(array, oNick, &index) ;
		 if (p_element)  strcpy(nick, p_element->PHS_nick);
		 if ((nick[0]) && (strncmp(nick, oNick, NICK_LEN-1)==0))  {
			/* Only delete if we found it */
			ChunkArrayDelete(array, p_element);
			@call oself::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(index, 1) ;
			deleted = TRUE;
			}
           }
        MemUnlock(OptrToHandle(array)) ;
    }

    return (deleted);
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_RENAME_ITEM
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Rename an item in the list as found by the given name.  If the name
 |    is not found, nothing happens.
 |
 | Inputs:
 |    char *p_oldItem             -- Name to find to rename
 |    char *p_newItem             -- What to change the name to
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_RENAME_ITEM
{
    PeopleHereStruct *p_element ;
    optr array ;
    word index ;
    char oNick[51], nNick[51], nick[NICK_LEN];
    Boolean	reNamed = FALSE;

    nick[0] = 0;
    array = pself->SDLI_array ;
    if (array)  {
        MemLock(OptrToHandle(array)) ;

        /* Find the element */
	   p_element = IFindElement(array, p_oldItem, &index) ;
	   if(p_element)  strcpy(nick, p_element->PHS_nick);
	   if ((nick[0]) && (strncmp(nick, p_oldItem, NICK_LEN-1)==0))  {
            /* Only delete if we found it */
		  @call oself::MSG_SORT_LIST_DELETE_ITEM(p_oldItem) ;
		  @call oself::MSG_SORT_LIST_ADD_ITEM(p_newItem) ;
		  reNamed = TRUE;
	   }
	   else  {
		 /* we didn't find it... so try adding a @ to the front.  It
		  * may be an operator */
		 strcpy (oNick, "@");
		 strcat (oNick, p_oldItem);
		 /* Find the element */
		 p_element = IFindElement(array, oNick, &index) ;
		 if(p_element)  strcpy(nick, p_element->PHS_nick);
		 if ((nick[0]) && (strncmp(nick, oNick, NICK_LEN-1)==0))  {
			/* Only delete if we found it */
			@call oself::MSG_SORT_LIST_DELETE_ITEM(oNick) ;
			/* add the oper to the new nick... */
			strcpy (nNick, "@");
			strcat (nNick, p_newItem);
			@call oself::MSG_SORT_LIST_ADD_ITEM(nNick) ;
			reNamed = TRUE;
			}
           }

        MemUnlock(OptrToHandle(array)) ;
    }

    return(reNamed);
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_QUERY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This method is activated by having the message sent to itself.
 |    It finds the index position in the chunk array and changes the
 |    moniker to match the entry.
 |
 | Inputs:
 |    optr list                   -- List being queried
 |    word item                   -- Index of item being queried
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |    jfh  09/13/99  added ignored indiction (SANS font)
 *-----------------------------------------------------------------------*/
@method SortDynamicListClass, MSG_SORT_LIST_QUERY
{
 char	name[NICK_LEN];
 PeopleHereStruct *p_element ;
 Boolean	ignore;
 ChunkHandle	chunk;
 MemHandle		mem;
 GStateHandle	gstate;
 word	width;


    if (pself->SDLI_array)  {
	  MemLock(OptrToHandle(pself->SDLI_array)) ;
	  p_element = ChunkArrayElementToPtr(pself->SDLI_array, item, 0) ;
	  strcpy(name, p_element->PHS_nick);
	  ignore = p_element->PHS_ignore;
	  MemUnlock(OptrToHandle(pself->SDLI_array)) ;

	  mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
	  gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
	  /* set the font */
	  if (ignore)
		GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(g_sysPointSize));
	  else
		GrSetFont(gstate, FID_BERKELEY, MakeWWFixed(g_sysPointSize));
	  width = GrTextWidth(gstate, name, strlen(name));
	  GrDrawText(gstate, 2, 0, name, 0);
	  GrEndGString(gstate);
	  /* and tell the DList */
	  @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
							 item,
							 0,
							 g_sysPointSize + 2,
							 width +5,
							 0,
							 VMDT_GSTRING,
							 VMST_OPTR,
							 ConstructOptr(mem, chunk));

	  /* and 86 the gstate and mem */
	  GrDestroyGString(gstate, gstate, GSKT_KILL_DATA);
	  MemFree(mem);
	  } /* end of valid array if */

}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_ADD_ITEM_QUIETLY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Adds an item, but does not automatically update the GenDynamicList
 |    to show.
 |
 | Inputs:
 |    char *p_item                -- String to add to the list.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_ADD_ITEM_QUIETLY
{
    MemHandle mem ;
    ChunkHandle chunk ;
    PeopleHereStruct *p_element ;
    char nick[NICK_LEN];
    optr array ;
    word num ;
    word index ;


    /* Add a new item to the list */
    /* If we don't have an array, create one */
    if (pself->SDLI_array == NullHandle)  {
	   mem = MemAllocLMem(LMEM_TYPE_GENERAL, 0) ;
	   MemLock(mem) ;
	   pself = ObjDerefGen(oself) ;
	   chunk = ChunkArrayCreate(mem, sizeof(PeopleHereStruct), 0, 0) ;
	   pself = ObjDerefGen(oself) ;
	   pself->SDLI_array = ConstructOptr(mem, chunk) ;
	   @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ;
	   MemUnlock(mem) ;
    }

    array = pself->SDLI_array ;
    MemLock(OptrToHandle(array)) ;

    nick[0] = 0;
    /* Only add if there is room.  Else don't add it */
    num = ChunkArrayGetCount(array) ;
    if (num < pself->SDLI_maxEntries)  {
	   /* Find the first element that is equal or after this name */
	   p_element = IFindElement(array, p_item, &index) ;
	   if (p_element)  strcpy(nick, p_element->PHS_nick);
	   /* Don't add duplicates */
	   if (LocalCmpStringsNoCase(p_item, nick, 1000) != 0)  {
		  if (p_element == NULL)  {
			 /* If NULL is returned, we need to add at the end */
			 p_element = ChunkArrayAppend(array, 0) ;
		  } else {
			 /* Not NULL, insert a new item in the middle */
			 p_element = ChunkArrayInsertAt(array, p_element, 0) ;
		  }
		  strncpy(p_element->PHS_nick, p_item, NICK_LEN - 1);
		  p_element->PHS_ignore = FALSE;
	   }
    }

    MemUnlock(OptrToHandle(array)) ;
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_UPDATE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Correctly updates the list based on the number of items.  This
 |    method is used in conjunction with MSG_SORT_LIST_ADD_ITEM_QUIETLY.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_UPDATE
{
    optr array ;

    array = pself->SDLI_array ;

    if (array)  {
        MemLock(OptrToHandle(array)) ;
        @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(ChunkArrayGetCount(array)) ;
        MemUnlock(OptrToHandle(array)) ;
    } else {
        @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_CLEAR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Destroy all the items in the chunk array and clear the UI list.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |
 *-----------------------------------------------------------------------*/

@method SortDynamicListClass, MSG_SORT_LIST_CLEAR
{
    optr array ;

    array = pself->SDLI_array ;

    if (array)  {
	   MemFree(OptrToHandle(array)) ;
	   pself->SDLI_array = NullHandle;
	   @call oself::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_APPLY
 *-------------------------------------------------------------------------
 |
 | Description:
 |    sets the global
 |
 | Inputs:
 |    word selection
 |    word numSelections
 |    byte stateFlags
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  09/07/99  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 |
 *-----------------------------------------------------------------------*/
@method SortDynamicListClass, MSG_SORT_LIST_APPLY
{
 char		nick[51], snick[51];
 PeopleHereStruct *p_element ;
 Boolean		ignore;
 optr		ignoreQHOptr, ignoreDQHOptr, includeQHOptr, includeDQHOptr;
 optr		myLeft, myButtons, myPrivButton, myIgnoreButton;


    /* get the clicked nick */
    MemLock(OptrToHandle(pself->SDLI_array));
    p_element = ChunkArrayElementToPtr(pself->SDLI_array, selection, 0);
    /* save nick */
    strcpy(nick, p_element->PHS_nick);
    ignore = p_element->PHS_ignore;
    MemUnlock(OptrToHandle(pself->SDLI_array));
    /* & strip @ and + if any */
    if ((nick[0] == '@') || (nick[0] == '+'))  {
	  strcpy(snick, &nick[1]);
	  strcpy(nick, snick);
	  }

    /* get the optrs of the Ignore & Private buttons for
	* this room */
    myLeft = @call oself::MSG_GEN_FIND_PARENT();
    myButtons = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myIgnoreButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myPrivButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(1);

    /* is is us? */
    if (!strcmp(nick, G_currentNick))  { /* yup */
	  /* clear the list selection */
	  @send oself::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	  g_personSelected = GIGS_NONE;
	  @call IRCSendPrivChat::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
	  @call IRCIgnore::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
	  @call myPrivButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
	  @call myIgnoreButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
	  }
    else {
	  /* somebody else so enable Ignore and Priv */
	  g_personSelected = selection;
	  @call IRCIgnore::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
	  @call myIgnoreButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;

	  ignoreQHOptr = @IgnoreHelp;
	  ignoreDQHOptr = @IgnoreDisabledHelp;
	  includeQHOptr = @IncludeHelp;
	  includeDQHOptr = @IncludeDisabledHelp;
	  @send myIgnoreButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
	  MemLock(OptrToHandle(@IRCIgnoreButtonMoniker));
	  if (!ignore) {
		/* first change the Quick Help */
		@call myIgnoreButton::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&ignoreQHOptr);
		@call myIgnoreButton::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_DISABLED_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&ignoreDQHOptr);
		@call myIgnoreButton::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
				  LMemDeref(@IRCIgnoreButtonMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);
		@call IRCIgnore::MSG_GEN_USE_VIS_MONIKER(
				  OptrToChunk(@IRCIgnoreMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);
		@call IRCSendPrivChat::MSG_GEN_SET_ENABLED(
				  VUM_DELAYED_VIA_UI_QUEUE) ;
		@call myPrivButton::MSG_GEN_SET_ENABLED(
				  VUM_DELAYED_VIA_UI_QUEUE) ;
		}
	  else  {
		/* first change the Quick Help */
		@call myIgnoreButton::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&includeQHOptr);
		@call myIgnoreButton::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_DISABLED_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&includeDQHOptr);
		@call myIgnoreButton::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
				  LMemDeref(@IRCIncludeButtonMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);
		@call IRCIgnore::MSG_GEN_USE_VIS_MONIKER(
				  OptrToChunk(@IRCIncludeMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);
		@call IRCSendPrivChat::MSG_GEN_SET_NOT_ENABLED(
				  VUM_DELAYED_VIA_UI_QUEUE) ;
		@call myPrivButton::MSG_GEN_SET_NOT_ENABLED(
				  VUM_DELAYED_VIA_UI_QUEUE) ;
		}
       MemUnlock(OptrToHandle(@IRCIgnoreButtonMoniker));
	  @send myIgnoreButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
	  }

}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_OPEN_PRIVATE_MESSAGE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Opens a PRIVMSG dialog box to send a privmsg to the selected
 |    person on the list -
 |
 | Inputs:
 |    word selection
 |    word numSelections
 |    byte stateFlags
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/05/98  Created.
 |    jfh  09/28/98  mod for multi chan.
 |    jfh  09/07/99  mod for GPC
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/
@method SortDynamicListClass, MSG_OPEN_PRIVATE_MESSAGE
{
 char		/*text[401], notice[500], */nick[51], snick[50], title[30];
 word		size, /*length,*/ i;
 PeopleHereStruct		*p_element;
 char		*p_priv;
 MemHandle	newBlock;
 optr		newPrivDialog;
 optr		myLeft, myButtons, myPrivButton, myIgnoreButton;


    /* get the clicked nick */
    MemLock(OptrToHandle(pself->SDLI_array));
    p_element = ChunkArrayElementToPtr(pself->SDLI_array, g_personSelected, 0);
    /* save nick */
    strcpy(nick, p_element->PHS_nick);
    MemUnlock(OptrToHandle(pself->SDLI_array));
    /* & strip @ and + if any */
    if ((nick[0] == '@') || (nick[0] == '+'))  {
	  strcpy(snick, &nick[1]);
	  strcpy(nick, snick);
	  }

    /* get the optrs of the Ignore & Private buttons for
	* this room */
    myLeft = @call oself::MSG_GEN_FIND_PARENT();
    myButtons = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myIgnoreButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myPrivButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(1);

    /* clear the list selection */
    @send oself::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
    g_personSelected = GIGS_NONE;
    @call IRCSendPrivChat::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call IRCIgnore::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call myPrivButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call myIgnoreButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* is it our own nick? */
    if (!strcmp(nick, G_currentNick))  { /* yup */
	  return;   /* forget it */
	  }

    /* see if we already have the max open */
    if (G_numPrivMsgs == MAX_PRIV_MSGS)  {
	  /* tell the user */
	  UserStandardDialogOptr(
				 0, 0, 0, 0,
				 @MaxPrivOpenMsg,
				 ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
				 (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
	  /* bail */
	  return;
	  }

    /* Check if we already have a privmsg dbox to this person */
    MemLock(OptrToHandle(G_privMsgArray));
    for (i = 0; i < G_numPrivMsgs; i++)  {
	  p_priv = ChunkArrayElementToPtr(G_privMsgArray, i, &size);
	  if (!strcmp(nick, p_priv)) {
		/* bail */
		MemUnlock(OptrToHandle(G_privMsgArray));
		return;
		}
	  }
    MemUnlock(OptrToHandle(G_privMsgArray));

    /* OK - add this one to our array.  Its position in the array
	* corresponds to its child number */
    MemLock(OptrToHandle(G_privMsgArray));
    p_priv = ChunkArrayAppend(G_privMsgArray, size);
    strcpy(p_priv, nick);
    MemUnlock(OptrToHandle(G_privMsgArray));

    /* Set up the new priv msg dialog box */
    /* copy the dbox resource */
    newBlock = ObjDuplicateResource( OptrToHandle(@IRCPrivDialog), 0, -1);
    newPrivDialog = ConstructOptr(newBlock, OptrToChunk(@IRCPrivDialog));
    /* add edit control to self-load options */
    @call application::MSG_META_GCN_LIST_ADD(
	ConstructOptr(newBlock, OptrToChunk(@IRCPrivEdit)),
	GAGCNLT_SELF_LOAD_OPTIONS,
	MANUFACTURER_ID_GEOWORKS);
    /* add it to the tree */
    @call IRCDialogs::MSG_GEN_ADD_CHILD(newPrivDialog,
					        CCF_MARK_DIRTY | CCO_LAST);
    /* put the nick in the visMoniker */
    MemLock(OptrToHandle(@PMTitleStr));
    strcpy(title, LMemDeref(@PMTitleStr));
    MemUnlock(OptrToHandle(@PMTitleStr));
    strcat(title, nick);
    @call newPrivDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(title, VUM_NOW);
    /* and show the dbox */
    @call newPrivDialog::MSG_GEN_SET_USABLE(VUM_NOW);
    @call newPrivDialog::MSG_GEN_INTERACTION_INITIATE();

    G_numPrivMsgs++;

    
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SEND_IGNORE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    marks that person to be ignored/included
 |
 |
 |
 | Inputs:
 |
 |
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  09/08/99  Created.
 |    jfh  09/10/99  replaced string w/ struct
 |
 *-----------------------------------------------------------------------*/
@method SortDynamicListClass, MSG_SEND_IGNORE
{
 char		nick[51], snick[50];
 word		selection;
 PeopleHereStruct		*p_element;
 optr		myLeft, myButtons, myPrivButton, myIgnoreButton;


    /* get the selected nick */
    MemLock(OptrToHandle(pself->SDLI_array));
    p_element = ChunkArrayElementToPtr(pself->SDLI_array, g_personSelected, 0);
    /* save nick */
    strcpy(nick, p_element->PHS_nick);
    MemUnlock(OptrToHandle(pself->SDLI_array));
    /* & strip @ and + if any */
    if ((nick[0] == '@') || (nick[0] == '+'))  {
	  strcpy(snick, &nick[1]);
	  strcpy(nick, snick);
	  }

    /* get the optrs of the Ignore & Private buttons for
	* this room */
    myLeft = @call oself::MSG_GEN_FIND_PARENT();
    myButtons = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myIgnoreButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myPrivButton = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(1);

    /* clear the list selection */
    @send oself::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
    selection = g_personSelected;
    g_personSelected = GIGS_NONE;
    @call IRCIgnore::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call myIgnoreButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call IRCSendPrivChat::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;
    @call myPrivButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE) ;

    /* is it our own nick? */
    if (!strcmp(nick, G_currentNick))  { /* yup */
	  return;   /* forget it */
	  }

    /* get the selected nick */
    MemLock(OptrToHandle(pself->SDLI_array));
    p_element = ChunkArrayElementToPtr(pself->SDLI_array, selection, 0);
    /* mark it to be ignored/un-unignored */
    if (p_element->PHS_ignore)  p_element->PHS_ignore = FALSE;
    else p_element->PHS_ignore = TRUE;
    MemUnlock(OptrToHandle(pself->SDLI_array));

    /* show ignored folks in SANS font */
    @send G_curList::MSG_SORT_LIST_QUERY(G_curList, selection);
}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_SORT_LIST_GET_ARRAY_OPTR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Gets the optr of the array so that the process can check to see
 |        if someone is on the ignore list
 |
 |
 | Inputs:
 |
 |
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  09/13/99  Created.
 |
 |
 *-----------------------------------------------------------------------*/
 @method SortDynamicListClass, MSG_SORT_LIST_GET_ARRAY_OPTR
 {

	return (pself->SDLI_array);

 }


