/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*-------------------------------------------------------------------------
 | Project:  Lysle's IRC Chat program
 | Module:   misc Process Class handling routines
 |           Copyright (c) 1998 Breadbox Computer Company
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  05/01/98  Created.
 |                   (LES = Lysle Shields)
 *-----------------------------------------------------------------------*/

@include "gpcchat.goh"
@include "externs.goh"
#include <iapp.h>

@classdecl NickGenTextClass;
@classdecl MyGenFileSelectorClass;
@classdecl IRCApplicationClass;
@classdecl ChannelGenDisplayClass;
@classdecl ChatGenInteractionClass;

/***********************************************************************
 *
 * MESSAGE:	MSG_META_IMPLIED_WIN_CHANGE for IRCApplicationClass
 *
 * DESCRIPTION:      Makes the cursor on the PC dbox an arrow
 *                     vs hourglass
 *                   Snagged from BrianCs hack in Browser
 *
 * Revision History:
 *    Who  Date:     Comments:
 *    ---  --------  ---------
 *    JFH  01/14/00  Created.
 *
 *
 ***********************************************************************/
@method IRCApplicationClass, MSG_META_IMPLIED_WIN_CHANGE
{
 EventHandle evt;


    @callsuper();
    /* if modal parental control dialog is up, clear busy cursor */
    if (G_startupPassword &&
		inputObj &&
		ObjTestIfObjBlockRunByCurThread(OptrToHandle(inputObj)) &&
		@call inputObj::MSG_META_IS_OBJECT_IN_CLASS(&GenInteractionClass) &&
		(@call inputObj::MSG_GEN_INTERACTION_GET_ATTRS() & GIA_MODAL)) {
	  WinGeodeSetPtrImage(GeodeGetProcessHandle(), 0);
	  evt = @record GenClass::MSG_GEN_SYSTEM_SET_PTR_IMAGE(0, PIL_SYSTEM);
	  @call self::MSG_GEN_CALL_SYSTEM(evt);
    }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_IACP_NEW_CONNECTION for IRCApplicationClass
 *
 *       MemHandle		appLaunchBlock,
 *       Boolean		justLaunched,
 *       IACPConnection		connection
 *
 * DESCRIPTION:
 *
 *
 *
 * Revision History:
 *    Who  Date:     Comments:
 *    ---  --------  ---------
 *    jfh  4/25/00	 Created.
 *    jfh  7/13/00   Added check for change in profile (nick)
 *
 ***********************************************************************/
@method IRCApplicationClass, MSG_META_IACP_NEW_CONNECTION
{
 char		*buffer, newChan[125], *key, joinBuf[150], newNick[NICK_LEN];
 AppLaunchBlock *launchB;
 word		length, i;
 char		*p_element;
 optr		targetDisplay, myRight, myLeft, myLine, myEntryWin;


    if (justLaunched)
	  @callsuper();

    else {   /* Chat is already running */
	  /* get the passed channel - if any */
	  launchB = MemLock(appLaunchBlock);
	  if (!launchB)  return;
	  if (!(launchB->ALB_extraData))  {
		/* no extra data so it's likely being launched from
		 * the desktop or Express menu.  So we'll just bring the
		 * running copy to the top */
		@send self::MSG_GEN_BRING_TO_TOP();
		MemUnlock(appLaunchBlock);
		return;
		}
	  buffer = MemLock(launchB->ALB_extraData);
	  if (!buffer) {
		MemUnlock(appLaunchBlock);
		return;
		}

	  if (*((word *)buffer) != IADT_MAIL_TO)  {
		MemFree(launchB->ALB_extraData);
		MemUnlock(appLaunchBlock);
		return;
		}

	  if (!G_sock) {
		MemFree(launchB->ALB_extraData);
		MemUnlock(appLaunchBlock);
		return;
		}

	  buffer += sizeof(InternetAppDataType);  /* skip the first word */

	  /* Has the user changed profiles (nickname)?  If so then we'll do
	   * a nick change before we join the new channel */
	  key = strstr(buffer, "nickname=");
	  if (key) {
		if (GetValueOfKey(key+9, newNick)) {
		   length = strlen(G_currentNick);
		   if (strlen(newNick) > length) length = strlen(newNick);
		   if(LocalCmpStringsNoCase(newNick, G_currentNick, length)) {
			 sprintf(joinBuf, "NICK %s\r\n", newNick) ;
			 IRCSendString(joinBuf) ;
			 strcpy(G_currentNick, newNick);
			 }
		   }
		}

	  key = strstr(buffer, "channel=");
	  @send self::MSG_GEN_BRING_TO_TOP();
	  if (key) {
		if (GetValueOfKey(key+8, newChan)) {
			length = strlen(G_currentChannel);
			if (strlen(newChan) > length) length = strlen(newChan);
			if (LocalCmpStringsNoCase(G_currentChannel, newChan, length)) {
			 /* user wants to go to a new channel */
  /*			 if (g_isCUI) {
			    /* we're in the CUI ask the user if
				* they want to change or stay - only one chan
				* open at a time */
  /*			    if ((UserStandardDialogOptr(0, 0, 0, 0,
					 @CUIChangeChannelMsg,
					 ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
					 (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
					 ) == IC_YES))  {
				  /* ok - leave current channel */
  /*				  sprintf(joinBuf, "PART :%s\r\n", G_currentChannel) ;
				  IRCSendString(joinBuf) ;
				  /* and go to new channel */
  /*				  sprintf(joinBuf, "JOIN :%s%s\r\n",
					   (newChan[0]=='\043')?"":"\043", newChan);
				  IRCSendString(joinBuf) ;
				  }
			    }  /* end of CUI if */
  /*			 else {  /* AUI */
			    /* it isn't the current chan but is it the same as another
				* already open? */
			    if (G_numChansOpen > 1) {
				  MemLock(OptrToHandle(G_chanOpenArray));
				  for (i = 0; i < G_numChansOpen; i++) {
					p_element = ChunkArrayElementToPtr(G_chanOpenArray, i, 0);
					length = strlen(p_element);
					if (strlen(newChan) > length) length = strlen(newChan);
					if (!LocalCmpStringsNoCase(p_element, newChan, length)) {
					   /* its an already open chan - make it the current one */
					   strcpy(G_currentChannel, p_element);
					   targetDisplay = @call IRCDisplayGroup::
									MSG_GEN_FIND_CHILD_AT_POSITION(i);
					   myRight = @call targetDisplay::
									MSG_GEN_FIND_CHILD_AT_POSITION(1);
						G_curDisplay = @call myRight::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						myLine = @call myRight::
									MSG_GEN_FIND_CHILD_AT_POSITION(1);
						myEntryWin = @call myLine::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						myLeft = @call targetDisplay::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
					   G_curList = @call myLeft::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
					   @send IRCDisplayGroup::
					              MSG_GEN_DISPLAY_GROUP_SELECT_DISPLAY(i);
						@send G_curDisplay::MSG_META_GRAB_TARGET_EXCL();
						@send G_curDisplay::MSG_VIS_TEXT_SELECT_END();
						@send myEntryWin::MSG_META_GRAB_TARGET_EXCL();
						/* and bail out */
					   MemUnlock(OptrToHandle(G_chanOpenArray));
					   MemFree(launchB->ALB_extraData);
					   MemUnlock(appLaunchBlock);
				        return;
					   }
					}
				  MemUnlock(OptrToHandle(G_chanOpenArray));
		  		  }
			    /* see if we already have the max channels open */
			    if (G_numChansOpen == MAX_PRIV_MSGS)  {
				  UserStandardDialogOptr(
					   0, 0, 0, 0,
					   @MaxChanOpenMsg,
					   ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
					   (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
				  /* bail */
				  MemFree(launchB->ALB_extraData);
				  MemUnlock(appLaunchBlock);
				  return;
				  }
			    else {
				  /* ok - go to new channel */
				  sprintf(joinBuf, "JOIN :%s%s\r\n",
					   (newChan[0]=='\043')?"":"\043", newChan);
				  IRCSendString(joinBuf) ;
				  }
		  /*	    }  /* end of AUI else */
			 }  /* end of different chan if */
		   }  /* end of good string returned if */
		}  /* end of valid key if */

	  MemFree(launchB->ALB_extraData);
	  MemUnlock(appLaunchBlock);
	  }

}


 /*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_CHANGE_NICKNAME
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Verifies that the requested nickname is legal and sends a command
 |    to change it.
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/08/98  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method IRCProcessClass, MSG_IRC_CHANGE_NICKNAME
{
    char name[GPC_NICK_LEN + 1] ;
    char command[40] ;

    @call IRCNewNickname::MSG_VIS_TEXT_GET_ALL_PTR(name) ;
    if (!IsValidNick(name)) return;

    /* change it by sending the /NICK <newnick> command */
    sprintf(command, "NICK %s\r\n", name) ;
    IRCSendString(command) ;

    /* and change our name internally - jfh */
    strcpy(G_currentNick, name);

}

/*-------------------------------------------------------------------------
 | Method:  IRCApplicationClass::MSG_IRC_ADD_CHANNEL
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Sets up to add a channel in respons to the menu item
 |
 | Inputs:
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  01/25/01  created
 |
 *-----------------------------------------------------------------------*/
@method IRCApplicationClass, MSG_IRC_ADD_CHANNEL
{
 char		newChan[125], joinBuf[150];
 word		length, i;
 char		*p_element;
 optr		targetDisplay, myRight, myLeft, myLine, myEntryWin;


    @call IRCNewChannel::MSG_VIS_TEXT_GET_ALL_PTR(newChan);

	 /* is this channel already open? */
	 length = strlen(G_currentChannel);
	 if (strlen(newChan) > length) length = strlen(newChan);
	 if (LocalCmpStringsNoCase(G_currentChannel, newChan, length)) {
		 /* user wants to go to a new channel */
  /*		 if (g_isCUI) {
			 /* we're in the CUI ask the user if
			  * they want to change or stay - only one chan
			  * open at a time */
  /*			 if ((UserStandardDialogOptr(0, 0, 0, 0,
					 @CUIChangeChannelMsg,
					 ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
					 (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
					 ) == IC_YES))  {
				 /* ok - leave current channel */
  /*				 sprintf(joinBuf, "PART :%s\r\n", G_currentChannel) ;
				 IRCSendString(joinBuf) ;
				 /* and go to new channel */
  /*				 sprintf(joinBuf, "JOIN :%s%s\r\n",
					   (newChan[0]=='\043')?"":"\043", newChan);
				 IRCSendString(joinBuf) ;
				 }
			 }  /* end of CUI if */
  /*		 else {  /* AUI */
			 /* it isn't the current chan but is it the same as another
			  * already open? */
			 if (G_numChansOpen > 1) {
				 MemLock(OptrToHandle(G_chanOpenArray));
				 for (i = 0; i < G_numChansOpen; i++) {
					 p_element = ChunkArrayElementToPtr(G_chanOpenArray, i, 0);
					 length = strlen(p_element);
					 if (strlen(newChan) > length) length = strlen(newChan);
					 if (!LocalCmpStringsNoCase(p_element, newChan, length)) {
						 /* its an already open chan - make it the current one */
						 strcpy(G_currentChannel, p_element);
						 targetDisplay = @call IRCDisplayGroup::
									MSG_GEN_FIND_CHILD_AT_POSITION(i);
						 myRight = @call targetDisplay::
									MSG_GEN_FIND_CHILD_AT_POSITION(1);
						 G_curDisplay = @call myRight::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						 myLine = @call myRight::
									MSG_GEN_FIND_CHILD_AT_POSITION(1);
						 myEntryWin = @call myLine::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						 myLeft = @call targetDisplay::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						 G_curList = @call myLeft::
									MSG_GEN_FIND_CHILD_AT_POSITION(0);
						 @send IRCDisplayGroup::
									  MSG_GEN_DISPLAY_GROUP_SELECT_DISPLAY(i);
						 @send G_curDisplay::MSG_META_GRAB_TARGET_EXCL();
						 @send G_curDisplay::MSG_VIS_TEXT_SELECT_END();
						 @send myEntryWin::MSG_META_GRAB_TARGET_EXCL();
						 /* and bail out */
						 MemUnlock(OptrToHandle(G_chanOpenArray));
						 return;
						 }
					 }
				 MemUnlock(OptrToHandle(G_chanOpenArray));
				 }
			 /* see if we already have the max channels open */
			 if (G_numChansOpen == MAX_PRIV_MSGS)  {
				 UserStandardDialogOptr(
					   0, 0, 0, 0,
					   @MaxChanOpenMsg,
					   ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
					   (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
				 /* bail */
				 return;
				 }
			 else {
				 /* ok - go to new channel */
				 sprintf(joinBuf, "JOIN :%s%s\r\n",
					   (newChan[0]=='\043')?"":"\043", newChan);
				 IRCSendString(joinBuf) ;
				 }
	  /*		 }  /* end of AUI else */
		 }  /* end of different chan if */

}

/*-------------------------------------------------------------------------
 | Method:  IRCApplicationClass::MSG_IRC_NEW_CHANNEL
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Builds the UI for the new channel
 |
 | Inputs:
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  09/29/98  added multi chan
 |
 *-----------------------------------------------------------------------*/
@method IRCApplicationClass, MSG_IRC_NEW_CHANNEL
{
 char		*p_element;
 MemHandle	newBlock;
 optr		newChannel, myLeft, myRight, myButtons, myIgnore;
 optr 		ignoreQHOptr, ignoreDQHOptr, myLine, myEntryWin;
 VisTextParaAttrDiffs   diffAttrs;
 VisTextParaAttr	paraAttrs;
 ColorQuad	color;
 WWFixed		pointSize = {0, 14};


    /* set trigger if second window */
    if (G_numChansOpen == 1) {
	  @call IRCCommandQuitChannel::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	  }

    /* OK - add this one to our array.  Its position in the array
	* corresponds to its child number */
    MemLock(OptrToHandle(G_chanOpenArray));
    p_element = ChunkArrayAppend(G_chanOpenArray, 0);
    strcpy(p_element, G_currentChannel);
    MemUnlock(OptrToHandle(G_chanOpenArray));

    /* Set up the new display */
    /* copy the display resource */
    newBlock = ObjDuplicateResource(OptrToHandle(@ChannelOne), 0, -1);
    newChannel = ConstructOptr(newBlock, OptrToChunk(@ChannelOne));
    /* add it to the tree */
    @call IRCDisplayGroup::MSG_GEN_ADD_CHILD(newChannel,
						   CCF_MARK_DIRTY | CCO_LAST);
    /* put the name in the visMoniker */
    @call newChannel::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(G_currentChannel, VUM_NOW);

    /* set its text win as the current one */
    myRight = @call newChannel::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    G_curDisplay = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myLine = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myEntryWin = @call myLine::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    /* and the list & buttons */
    myLeft = @call newChannel::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    G_curList = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myButtons = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(1);
    myIgnore = @call myButtons::MSG_GEN_FIND_CHILD_AT_POSITION(0);

    /* set fonts etc. */
/*    if (g_onTV) {
	  @call G_curDisplay::MSG_VIS_TEXT_SET_FONT_ID(
		FID_BERKELEY, TEXT_ADDRESS_PAST_END, 0);
	  }
    else {
       /* set the font & point size to the same as the main window */
	  @call myEntryWin::MSG_VIS_TEXT_SET_FONT_ID(
		FID_DTC_URW_SANS, TEXT_ADDRESS_PAST_END, 0);
	  @call myEntryWin::MSG_VIS_TEXT_SET_POINT_SIZE(
		pointSize, TEXT_ADDRESS_PAST_END, 0);
/*	  } */

    /* set the text to blue - system color */
    color.CQ_redOrIndex = C_BLUE;
    color.CQ_info = CF_INDEX;
    color.CQ_green = 0;
    color.CQ_blue = 0;
    @call G_curDisplay::MSG_VIS_TEXT_SET_COLOR
				 (color, TEXT_ADDRESS_PAST_END, 0);

    /* add some space to the bottom of each para & between lines */
    @call G_curDisplay::MSG_VIS_TEXT_GET_PARA_ATTR(0,&diffAttrs,&paraAttrs,
					   TEXT_ADDRESS_PAST_END, 0);
    paraAttrs.VTPA_spaceOnBottom = 36;
    paraAttrs.VTPA_lineSpacing = 256 + 64;
    @call G_curDisplay::MSG_VIS_TEXT_SET_PARA_ATTR(&paraAttrs,
					   TEXT_ADDRESS_PAST_END, 0);

    /* set the ignore/include moniker & Quick Help */
    ignoreQHOptr = @IgnoreHelp;
    ignoreDQHOptr = @IgnoreDisabledHelp;
    @send myIgnore::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    @call myIgnore::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&ignoreQHOptr);
    @call myIgnore::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_FOCUS_DISABLED_HELP | VDF_SAVE_TO_STATE),
			sizeof(optr),
			&ignoreDQHOptr);
    @send myIgnore::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    MemLock(OptrToHandle(@IRCIgnoreButtonMoniker));
    @call myIgnore::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
				  LMemDeref(@IRCIgnoreButtonMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);
    MemUnlock(OptrToHandle(@IRCIgnoreButtonMoniker));
    @send IRCIgnore::MSG_GEN_USE_VIS_MONIKER(
				  OptrToChunk(@IRCIgnoreMoniker),
				  VUM_DELAYED_VIA_UI_QUEUE);

    /* make full size if in CUI */
/*    if (g_isCUI) {
	  @call newChannel::MSG_META_DELETE_VAR_DATA(
			  HINT_SIZE_WINDOW_AS_RATIO_OF_PARENT);
	  @call newChannel::MSG_META_ADD_VAR_DATA(
			  (HINT_DISPLAY_MAXIMIZED_ON_STARTUP | VDF_SAVE_TO_STATE),
			  0, NULL);
	  }

    /* and show the display */
    @call newChannel::MSG_GEN_SET_USABLE(VUM_NOW);

    G_numChansOpen++;

    /* tell the curdisp to put ins point at the end to ensure scrolling */
    @send G_curDisplay::MSG_META_GRAB_TARGET_EXCL();
    @send G_curDisplay::MSG_VIS_TEXT_SELECT_END();

    /* so that the text will scroll horiz while the user types */
    @send myEntryWin::MSG_META_GRAB_TARGET_EXCL();


}

/*-------------------------------------------------------------------------
 | Method:  IRCApplicationClass::MSG_IRC_LEAVE_CHANNEL
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Leave the current channel
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  06/09/98  Created.
 |    jfh  09/28/98  added multi chan
 |
 *-----------------------------------------------------------------------*/
@method IRCApplicationClass, MSG_IRC_LEAVE_CHANNEL
{
 char			leaveCommand[120];
 optr			targetDisplay, myLeft, myList, myRight;
 word			childNum;
 char			*p_element;


    /* we need to find the target display,
	* get its channel, send the /PART message, detach the display and
	* free the memory, then make the new target display the current chan
	* and display... AND free up the people array.
	*/
    @call IRCDisplayGroup::MSG_META_GET_TARGET_EXCL(&targetDisplay);
    childNum = @call IRCDisplayGroup::MSG_GEN_FIND_CHILD(targetDisplay);

    /* free up the channel's people here list */
    myLeft = @call targetDisplay::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    myList = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    @call myList::MSG_SORT_LIST_CLEAR() ;

    /* remove & free the dbox */
    @call targetDisplay::MSG_GEN_REMOVE(VUM_NOW, CCF_MARK_DIRTY);
    @send targetDisplay::MSG_META_BLOCK_FREE();

    /* delete its entry from the array */
    MemLock(OptrToHandle(G_chanOpenArray));
    p_element = ChunkArrayElementToPtr(G_chanOpenArray, childNum, 0);
    strcpy(G_currentChannel, p_element);
    ChunkArrayDelete(G_chanOpenArray, p_element);
    MemUnlock(OptrToHandle(G_chanOpenArray));

    G_numChansOpen--;

    sprintf(leaveCommand, "PART :%s\r\n", G_currentChannel) ;
    IRCSendString(leaveCommand) ;

    /* see if we closed the last open channel */
    /* in GPC we won't let user do this... */
    if (G_numChansOpen)  {
	  /* NOPE - make the new target the current chan */
	  @call IRCDisplayGroup::MSG_META_GET_TARGET_EXCL(&targetDisplay);
	  childNum = @call IRCDisplayGroup::MSG_GEN_FIND_CHILD(targetDisplay);

	  MemLock(OptrToHandle(G_chanOpenArray));
	  p_element = ChunkArrayElementToPtr(G_chanOpenArray, childNum, 0);
	  strcpy(G_currentChannel, p_element);
	  MemUnlock(OptrToHandle(G_chanOpenArray));

	  myRight = @call targetDisplay::MSG_GEN_FIND_CHILD_AT_POSITION(1);
	  G_curDisplay = @call myRight::MSG_GEN_FIND_CHILD_AT_POSITION(0);
	  myLeft = @call targetDisplay::MSG_GEN_FIND_CHILD_AT_POSITION(0);
	  G_curList = @call myLeft::MSG_GEN_FIND_CHILD_AT_POSITION(0);
	  }
    if (G_numChansOpen == 1) {
	  /* OK there is only one chan open so don't let the user close it,
	   * they have to close the app. */
	  @call IRCCommandQuitChannel::MSG_GEN_SET_NOT_ENABLED(
		    VUM_DELAYED_VIA_UI_QUEUE) ;
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_IRC_START_LOGGING for IRCProcessClass
 *
 * DESCRIPTION:	 Creates the selected file and sets the
 *                   logging flag
 *     
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/02/98  Created.
 *    jfh  10/21/99  add .txt to name so Writer can read it
 *
 ***********************************************************************/
@extern method IRCProcessClass, MSG_IRC_START_LOGGING
{
 char			logName[FILE_LONGNAME_LENGTH + 1];
 char			logPath[PATH_BUFFER_SIZE];
 DiskHandle		logDiskhandle;


    /* get the log file name */
    @call LogFileName::MSG_VIS_TEXT_GET_ALL_PTR(logName);
    strcat(logName, ".txt");

    /* get the file's path and disk handle */
    @call IRCStartLogSel::MSG_GEN_PATH_GET(logPath, sizeof(logPath));
    logDiskhandle = @call IRCStartLogSel::
				MSG_GEN_PATH_GET_DISK_HANDLE();

    /* set the log file dir  - FileSel doesn't do this */
    FileSetCurrentPath(logDiskhandle, logPath);

    /* and create the log file */
    LogFileHandle = FileCreate(logName,
				  ((FILE_CREATE_ONLY | FCF_NATIVE)
				  | (FILE_ACCESS_RW | FILE_DENY_RW)),
				  0);
    if (!LogFileHandle)  {
       /* if file exists just tell user & wait for new name */
       if (ThreadGetError() == ERROR_FILE_EXISTS)  {
		UserStandardDialogOptr(
		    0, 0, 0, 0,
		    @FileExistsErrMsg,
		    ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
		    (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
		}
	    /* for any other error - bail out */
	    else  {
		UserStandardDialogOptr(
		    0, 0, 0, 0,
		    @LogCreateErrMsg,
		    ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
		    (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
		@send IRCStartDialog::
				    MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		}
	  return;
       }

    /* set the logging flag */
    logging = TRUE;

    /* dismiss the log dbox now */
    @send IRCStartDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* enable stop and disable start and append */
    @send IRCLogStart::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogAppend::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogStop::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
}
/***********************************************************************
 *
 * MESSAGE:	MSG_IRC_APPEND_LOGGING for IRCProcessClass
 *
 * DESCRIPTION:	 Appends to the selected file and sets the
 *                   logging flag
 *     
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/03/98  Created.
 *
 *
 ***********************************************************************/
@extern method IRCProcessClass, MSG_IRC_APPEND_LOGGING
{
 char			LogName[FILE_LONGNAME_BUFFER_SIZE];
 char			LogPath[PATH_BUFFER_SIZE];
 DiskHandle		LogDiskhandle;
 dword			selFlags;


    /* first get the flags and file name of the selection */
    selFlags = @call IRCAppendLogSel::
		  MSG_GEN_FILE_SELECTOR_GET_SELECTION(LogName);

    /* check to see if it's a file - redundant if dbl clicked */
    if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
       /* if not just return */
	  return;
       }

    /* get the file's path and disk handle */
    @call IRCAppendLogSel::MSG_GEN_PATH_GET(LogPath, sizeof(LogPath));
    LogDiskhandle = @call IRCAppendLogSel::
					MSG_GEN_PATH_GET_DISK_HANDLE();

    /* set the log file dir  - FileSel doesn't do this */
    FileSetCurrentPath(LogDiskhandle, LogPath);

    /* and open the Log file */
    LogFileHandle = FileOpen(LogName, (FILE_ACCESS_RW | FILE_DENY_W));
    if (!LogFileHandle)  {
	  UserStandardDialogOptr(
		    0, 0, 0, 0,
		    @AppendOpenErrMsg,
		    ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
		    (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
	  return;  /* bail out */
	  }

    /* move to the end of the file */
    FilePos(LogFileHandle, 0, FILE_POS_END);

    /* set the logging flag */
    logging = TRUE;

    /* dismiss the log dbox now */
    @send IRCAppendDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* enable stop and disable start and append */
    @send IRCLogStart::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogAppend::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogStop::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}
/***********************************************************************
 *
 * MESSAGE:	MSG_IRC_STOP_LOGGING for IRCProcessClass
 *
 * DESCRIPTION:	 Closes the log file and resets the
 *                   logging flag
 *     
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/02/98  Created.
 *
 *
 ***********************************************************************/
@extern method IRCProcessClass, MSG_IRC_STOP_LOGGING
{


    FileClose(LogFileHandle, FALSE);
    LogFileHandle = NullHandle;

    /* reset the logging flag */
    logging = FALSE;

    /* disable stop and enable start and append */
    @send IRCLogStart::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogAppend::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send IRCLogStop::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
}
/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG)
 *                  MSG_APPEND_LOG_SELECTOR_ACTION for IRCProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:	
 *
 *              Basically checks for dbl click in append log dialog box
 *              
 *
 ***********************************************************************/

@extern method IRCProcessClass, MSG_APPEND_LOG_SELECTOR_ACTION
{

  if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {/* was it a double click? */
	/* yup */
	if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  { /* a file? */
	   /* yup - send ourselves the append msg */
	   @send, forceQueue process::MSG_IRC_APPEND_LOGGING();
	   }
	} /* if not - do nothing */

}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_IRC_SEND_PRIV
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Sends a PRIVMSG to the appropriate recipient
 |
 |
 |
 | Inputs:
 |    optr trigger
 |
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/07/98  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method IRCProcessClass, MSG_IRC_SEND_PRIV
{
 optr		myDbox, myTextWin, myEntryWin;
 char		text[401], send[500], nick[51];
 char		*p_element;
 word		childNum, size;


    /* find out which dbox this trigger is in */
    myDbox = @call trigger::MSG_GEN_FIND_PARENT();

    /* get my text and entry windows */
    myTextWin = @call myDbox::MSG_GEN_FIND_CHILD_AT_POSITION(2);
	 myEntryWin = @call myDbox::MSG_GEN_FIND_CHILD_AT_POSITION(3);

    /* find out who the message is to */
    childNum = @call IRCDialogs::MSG_GEN_FIND_CHILD(myDbox);
    /* translate that to its array position */
    childNum = childNum - PRIV_DBOX_START;

    MemLock(OptrToHandle(G_privMsgArray));
    p_element = ChunkArrayElementToPtr(G_privMsgArray, childNum, &size);
    strcpy(nick, p_element);
    MemUnlock(OptrToHandle(G_privMsgArray));

    /* get the text to send */
    @call myEntryWin::MSG_VIS_TEXT_GET_ALL_PTR(text);

    /* show it in the text window */
    sprintf(send, "\r<%s>  %s", G_currentNick, text);
    @call myTextWin::MSG_VIS_TEXT_APPEND_PTR(send, 0);

    @send myEntryWin::MSG_VIS_TEXT_DELETE_ALL();

    @send myTextWin::MSG_META_GRAB_TARGET_EXCL();
    @send myTextWin::MSG_VIS_TEXT_SELECT_END();

    /* so that the text will scroll horiz while the user types */
    @send myEntryWin::MSG_META_GRAB_TARGET_EXCL();

    /* and send it out */
    sprintf(send, "PRIVMSG %s :%s\r\n", nick, text);
    IRCSendString(send);

}

/*-------------------------------------------------------------------------
 | Method:  SortDynamicListClass::MSG_IRC_CLOSE_PRIV
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Closes a PRIVMSG dialog box.
 |
 |
 |
 | Inputs:
 |    optr trigger
 |
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/07/98  Created.
 |
 *-----------------------------------------------------------------------*/
@extern method IRCProcessClass, MSG_IRC_CLOSE_PRIV
{
 optr		myDbox;
 word		childNum, arrayNum;
 char		*p_element;


    /* find out which dbox this trigger is in */
    myDbox = @call trigger::MSG_GEN_FIND_PARENT();

    /* find out what number child it is */
    childNum = @call IRCDialogs::MSG_GEN_FIND_CHILD(myDbox);
    /* translate that to its array position */
    arrayNum = childNum - PRIV_DBOX_START;

    /* delete its entry from the array */
    MemLock(OptrToHandle(G_privMsgArray));
    p_element = ChunkArrayElementToPtr(G_privMsgArray, arrayNum, 0);
    ChunkArrayDelete(G_privMsgArray, p_element);
    MemUnlock(OptrToHandle(G_privMsgArray));

    /* remove edit control to self-load options */
    @call application::MSG_META_GCN_LIST_REMOVE(
	ConstructOptr(OptrToHandle(myDbox), OptrToChunk(@IRCPrivEdit)),
	GAGCNLT_SELF_LOAD_OPTIONS,
	MANUFACTURER_ID_GEOWORKS);

    /* and remove & free the dbox */
    @call myDbox::MSG_GEN_REMOVE(VUM_NOW, CCF_MARK_DIRTY);
    @send myDbox::MSG_META_BLOCK_FREE();

    G_numPrivMsgs--;

}

/*-------------------------------------------------------------------------
 | Method:  IRCProcessClass::MSG_IRC_RECEIVE_PRIV
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Decides which dbox to put a just received PRIVMSG in.
 |
 |
 |
 | Inputs:
 |    char *p_nick
 |    char *p_text
 |
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    JFH  08/07/98  Created.
 |    jfh  02/11/00  Translate incoming text LATIN_1
 |
 *-----------------------------------------------------------------------*/
@extern method IRCProcessClass, MSG_IRC_RECEIVE_PRIV
{
 char		text[401], from[51], nick[51], title[30];
 word		size, i;
 char		*p_element;
 MemHandle	newBlock;
 optr		newPrivDialog, myTextWin, myEntryWin;


    /* strip @ and + if any from the passed nick */
    strcpy(nick, p_nick);
    if ((nick[0] == '@') || (nick[0] == '+'))  strcpy(from, &nick[1]);
    else  strcpy(from, nick);

    /* Check if we already have a privmsg dbox for this person */
    MemLock(OptrToHandle(G_privMsgArray));
    for (i = 0; i < G_numPrivMsgs; i++)  {
	  p_element = ChunkArrayElementToPtr(G_privMsgArray, i, &size);
	  if (!strcmp(from, p_element)) {
		/* it matches */
		break;
		}
	  }
    MemUnlock(OptrToHandle(G_privMsgArray));

    if (i == G_numPrivMsgs)  {
	  /* this needs a new dbox */
	  /* see if we already have the max open */
	  if (G_numPrivMsgs == MAX_PRIV_MSGS)  {
		UserStandardDialogOptr(
				 0, 0, 0, 0,
				 @MaxPrivOpenMsg,
				 ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
				 (CDT_ERROR<<CDBF_DIALOG_TYPE_OFFSET))) ;
		/* bail */
		return;
		}

	  /* OK - add this one to our array.  Its position in the array
	   * corresponds to its child number */
	  MemLock(OptrToHandle(G_privMsgArray));
	  p_element = ChunkArrayAppend(G_privMsgArray, size);
	  strcpy(p_element, from);
	  MemUnlock(OptrToHandle(G_privMsgArray));

	  /* Set up the new priv msg dialog box */
	  /* copy the dbox resource */
	  newBlock = ObjDuplicateResource( 
		 OptrToHandle(@IRCPrivDialog), 0, -1);
	  newPrivDialog = ConstructOptr(newBlock,
					OptrToChunk(@IRCPrivDialog));

	  /* add edit control to self-load options */
	  @call application::MSG_META_GCN_LIST_ADD(
	      ConstructOptr(newBlock, OptrToChunk(@IRCPrivEdit)),
	      GAGCNLT_SELF_LOAD_OPTIONS,
	      MANUFACTURER_ID_GEOWORKS);
	      
	  /* add it to the tree */
	  @call IRCDialogs::MSG_GEN_ADD_CHILD(newPrivDialog,
					        CCF_MARK_DIRTY | CCO_LAST);
	  /* put the nick in the visMoniker */
	  MemLock(OptrToHandle(@PMTitleStr));
	  strcpy(title, LMemDeref(@PMTitleStr));
	  MemUnlock(OptrToHandle(@PMTitleStr));
	  strcat(title, from);
	  @call newPrivDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(title, VUM_NOW);
	  /* and show the dbox */
	  @call newPrivDialog::MSG_GEN_SET_USABLE(VUM_NOW);
	  @call newPrivDialog::MSG_GEN_INTERACTION_INITIATE();

	  G_numPrivMsgs++;

	  /* make a sound */
	  UserStandardSound(SST_NOTIFY);

	  } /* end of new dbox if */

    else {
	  /* there is already a dbox for this person */
	  newPrivDialog = @call IRCDialogs::
	                      MSG_GEN_FIND_CHILD_AT_POSITION(i + PRIV_DBOX_START);
	  /* make a sound */
	  UserStandardSound(SST_WARNING);

	  } /* end of existing dbox else */

    /* get the text window */
    myTextWin = @call newPrivDialog::MSG_GEN_FIND_CHILD_AT_POSITION(2);
	 myEntryWin = @call newPrivDialog::MSG_GEN_FIND_CHILD_AT_POSITION(3);
	 /*  assemble the string to show */
    p_text = strchr(p_text, ':') ;
    p_text++ ;
    sprintf(text, "\r<%s> %s", from, p_text);
    /* and show the message */
    LocalCodePageToGeos(text, strlen(text), CODE_PAGE_LATIN_1, '.');
    @call myTextWin::MSG_VIS_TEXT_APPEND_PTR(text, 0);
    @send myTextWin::MSG_META_GRAB_TARGET_EXCL();
    @send myTextWin::MSG_VIS_TEXT_SELECT_END();
    /* so that the text will scroll horiz while the user types */
    @send myEntryWin::MSG_META_GRAB_TARGET_EXCL();


}





@extern method IRCProcessClass, MSG_PROCESS_CREATE_UI_THREAD
{
    /* When creating the UI thread, make it bigger than the default */
    /* so we definitely had enough space.  This is to counter a */
    /* Out of stack space error that occured in the past */
    stackSize = INTERFACE_THREAD_DEF_STACK_SIZE + 2000;
    return @callsuper() ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for NickGenTextClass
 *
 * PARAMETERS:   	char		character
 *
 * DESCRIPTION:	traps the . and /
 *                  see the comment in the UI file...
 *
 *
 ***********************************************************************/
@method NickGenTextClass, MSG_META_KBD_CHAR
{

    if (((character == C_PERIOD) || (character == C_SLASH)) &&
		(flags & CF_FIRST_PRESS)) return;

    else  @callsuper();

}


@method MyGenFileSelectorClass, MSG_GEN_OUTPUT_ACTION
{
    dword attr = 0;
    @callsuper();
    attr = @call IRCAppendLogSel::
				MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(NULL);
    if ((GFS_GET_ENTRY_FLAGS(attr) & GFSEF_TYPE) == GFSET_FILE) {
	@send IRCAppendOK::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    }
    else {
	@send IRCAppendOK::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    }
    return;
}

/*-------------------------------------------------------------------------
 | Method:  ChannelGenDisplayClass::MSG_GEN_DISPLAY_CLOSE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    intercept the closing message to do our clean-up
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    jfh  01/22/99  Created.
 |
 |
 *-----------------------------------------------------------------------*/
@method ChannelGenDisplayClass, MSG_GEN_DISPLAY_CLOSE
{

    @send IRCApp::MSG_IRC_LEAVE_CHANNEL();
    
}


