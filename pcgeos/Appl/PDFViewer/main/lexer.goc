//========================================================================
//
// Lexer.cc
//
// Copyright 1996 Derek B. Noonburg
//
//========================================================================

#ifdef __GNUC__
#pragma implementation
#endif

@include "pdfvu.goh"
//#include <stdlib.h>
//#include <stddef.h>
#include <Ansi/string.h>
@include "obj.goh"
@include "array.goh"
@include "stream.goh"
@include "lexer.goh"

//------------------------------------------------------------------------

// A '1' in this array means the corresponding character ends a name
// or command.
static char endOfNameChars[128] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0,   // 0x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   // 1x
  1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,   // 2x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,   // 3x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   // 4x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,   // 5x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   // 6x
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0    // 7x
};

//------------------------------------------------------------------------
// Lexer
//------------------------------------------------------------------------

void LexerInitFromStream(Lexer *lexer, Stream *str, XRef *xref) {

  lexer->xref = xref;

  initStream(&lexer->curStr, str);
  lexer->streams = gmalloc( sizeof(Array) );
  ArrayInit(lexer->streams);
  ArrayAdd(lexer->streams, &lexer->curStr);
  lexer->strPtr = 0;
  lexer->freeArray = gTrue;
  ObjStreamReset(&lexer->curStr);
}

void LexerInitFromObj(Lexer *lexer, Obj *obj, XRef *xref) {

  lexer->xref = xref;

  if (isStream(obj)) {
    lexer->streams = gmalloc( sizeof(Array) );
    ArrayInit(lexer->streams);
    lexer->freeArray = gTrue;
    ArrayAdd(lexer->streams, obj);
  } else {
    lexer->streams = getArray(obj);
    lexer->freeArray = gFalse;
  }
  lexer->strPtr = 0;
  if (ArrayGetLength(lexer->streams) > 0) {
    ArrayGet(lexer->streams, lexer->strPtr, &lexer->curStr, xref);
    ObjStreamReset(&lexer->curStr);
  }
}

void LexerFree(Lexer *lexer) {
  if (!isNone(&lexer->curStr))
    ObjFree(&lexer->curStr);
  if (lexer->freeArray) {
    ArrayFree(lexer->streams);
    gfree(lexer->streams);
  }
}

long LexerGetChar(Lexer *lexer) {
  long c;

  c = EOF;
  while (!isNone(&lexer->curStr) && (c = ObjStreamGetChar(&lexer->curStr)) == EOF) {
    ObjFree(&lexer->curStr);
    ++lexer->strPtr;
    if (lexer->strPtr < ArrayGetLength(lexer->streams)) {
      ArrayGet(lexer->streams, lexer->strPtr, &lexer->curStr, lexer->xref);
      ObjStreamReset(&lexer->curStr);
    }
  }
  return c;
}

long LexerLookChar(Lexer *lexer) {
  long c;

  c = EOF;
  while (!isNone(&lexer->curStr) && (c = ObjStreamLookChar(&lexer->curStr)) == EOF) {
    ObjFree(&lexer->curStr);
    ++lexer->strPtr;
    if (lexer->strPtr < ArrayGetLength(lexer->streams)) {
      ArrayGet(lexer->streams, lexer->strPtr, &lexer->curStr, lexer->xref);
      ObjStreamReset(&lexer->curStr);
    }
  }
  return c;
}

#define tokBufSize 128		// size of token buffer

void LexerGetObj (Lexer *lexer, Obj *obj)
{
/* Object *Lexer::getObj(Object *obj) {
*/

  char *p;
  long c, c2;
  GBool comment, neg, done;
  long numParen;
  long xi;
#ifdef USE_NATIVE_FLOAT_TYPE
  sdword xf;
#else
  double xf;
#endif
  long scale;
  GooString s;
  long n, m;
  long tmp;
  char tokBuf[tokBufSize];	// temporary token buffer

  // skip whitespace and comments
  comment = gFalse;
  while (1) {
  if ((c = LexerGetChar(lexer)) == EOF) {

      initEOF(obj);
      return ;
  }

    if (comment) {
      if (c == '\r' || c == '\n')
	comment = gFalse;
    } else if (c == '%') {
      comment = gTrue;
    } else if (!isspace(c)) {
      break;
    }
  }

  // start reading token
  switch (c) {

  // number
  case '0': case '1': case '2': case '3': case '4':
  case '5': case '6': case '7': case '8': case '9':
  case '-': case '.':
    neg = gFalse;
    xi = 0;
    if (c == '-') {
      neg = gTrue;
    } else if (c == '.') {
      goto doReal;
    } else {
      xi = c - '0';
    }
    while (1) {
      c = LexerLookChar(lexer);
      if (isdigit(c)) {
	LexerGetChar(lexer);
	xi = xi * 10 + (c - '0');
      } else if (c == '.') {
	LexerGetChar(lexer);
	goto doReal;
      } else {
	break;
      }
    }
    if (neg)
      xi = -xi;
    initInt(obj, xi);
    break;
  doReal:
#ifdef USE_NATIVE_FLOAT_TYPE
    xf = xi<<16;
#else
    xf = xi;
#endif
    scale = 1;
    tmp = 0;
    while (1) {
      c = LexerLookChar(lexer);
      if (!isdigit(c))
	break;
      LexerGetChar(lexer);
      tmp = tmp * 10 + (c - '0');
      scale *= 10;
    }
#ifdef USE_NATIVE_FLOAT_TYPE
    xf += (tmp<<16)/scale;
#else
    xf += ((double)tmp/scale);
#endif
    if (neg)
      xf = -xf;
    initReal(obj, xf);
    break;

  // string
  case '(':
    p = tokBuf;
    n = 0;
    numParen = 1;
    done = gFalse;
    GStrInit(&s);
//    GStrClear(&s);
    do {
      c2 = EOF;
      switch (c = LexerGetChar(lexer)) {

      case EOF:
      case '\r':
      case '\n':
//	error(getPos(), "Unterminated string");
	EC_WARNING(-1);
	done = gTrue;
	break;

      case '(':
	++numParen;
	break;

      case ')':
	if (--numParen == 0)
	  done = gTrue;
	break;

      case '\\':
	c = LexerGetChar(lexer);
	switch (c) {
	case 'n':
	  c2 = '\n';
	  break;
	case 'r':
	  c2 = '\r';
	  break;
	case 't':
	  c2 = '\t';
	  break;
	case 'b':
	  c2 = '\b';
	  break;
	case 'f':
	  c2 = '\f';
	  break;
	case '\\':
	case '(':
	case ')':
	  c2 = c;
	  break;
	case '0': case '1': case '2': case '3':
	case '4': case '5': case '6': case '7':
	  c2 = c - '0';
	  c = LexerLookChar(lexer);
	  if (c >= '0' && c <= '7') {
	    LexerGetChar(lexer);
	    c2 = (c2 << 3) + (c - '0');
	    c = LexerLookChar(lexer);
	    if (c >= '0' && c <= '7') {
	      LexerGetChar(lexer);
	      c2 = (c2 << 3) + (c - '0');
	    }
	  }
	  break;
	case '\r':
	  c = LexerLookChar(lexer);
	  if (c == '\n')
	    LexerGetChar(lexer);
	  break;
	case '\n':
	  break;
	case EOF:
//	  error(getPos(), "Unterminated string");
	  EC_WARNING(-1);
	  done = gTrue;
	  break;
	default:
	  c2 = c;
	  break;
	}
	break;

      default:
	c2 = c;
	break;
      }

      if (c2 != EOF) {
	if (n == tokBufSize) {
	  GStrAppendStringN(&s, tokBuf, tokBufSize);
	  p = tokBuf;
	  n = 0;
	}
	*p++ = (char)c2;
	++n;
      }
    } while (!done);
    GStrAppendStringN(&s, tokBuf, n);
    initString(obj, &s);
    GStrFree(&s);
    break;

  // name
  case '/':
    p = tokBuf;
    n = 0;
    while ((c = LexerLookChar(lexer)) != EOF && !(c < 128 && endOfNameChars[c])) {
      LexerGetChar(lexer);
      if (c == C_NUMBER_SIGN) {
	c2 = LexerLookChar(lexer);
	if (c2 >= '0' && c2 <= '9')
	  c = c2 - '0';
	else if (c2 >= 'A' && c2 <= 'F')
	  c = c2 - 'A' + 10;
	else if (c2 >= 'a' && c2 <= 'f')
	  c = c2 - 'a' + 10;
	else
	  goto notEscChar;
	LexerGetChar(lexer);
	c <<= 4;
	c2 = LexerGetChar(lexer);
	if (c2 >= '0' && c2 <= '9')
	  c += c2 - '0';
	else if (c2 >= 'A' && c2 <= 'F')
	  c += c2 - 'A' + 10;
	else if (c2 >= 'a' && c2 <= 'f')
	  c += c2 - 'a' + 10;
	else
	  EC_WARNING(-1);
//	  error(getPos(), "Illegal digit in hex char in name");
      }
     notEscChar:
      if (++n == tokBufSize) {
	EC_WARNING(-1);
//	error(getPos(), "Name token too long");
	break;
      }
      *p++ = c;
    }
    *p = '\0';
    initName(obj, tokBuf);
    break;

  // array punctuation
  case '[':
  case ']':
    tokBuf[0] = c;
    tokBuf[1] = '\0';
    initCmd(obj, tokBuf);
    break;

  // hex string or dict punctuation
  case '<':
    c = LexerLookChar(lexer);

    // dict punctuation
    if (c == '<') {
      LexerGetChar(lexer);
      tokBuf[0] = tokBuf[1] = '<';
      tokBuf[2] = '\0';
      initCmd(obj, tokBuf);

    // hex string
    } else {
      p = tokBuf;
      m = n = 0;
      c2 = 0;
      GStrInit(&s);
//      GStrClear(&s);
      while (1) {
	c = LexerGetChar(lexer);
	if (c == '>') {
	  break;
	} else if (c == EOF) {
	  EC_WARNING(-1);
//	  error(getPos(), "Unterminated hex string");
	  break;
	} else if (!isspace(c)) {
	  c2 = c2 << 4;
	  if (c >= '0' && c <= '9')
	    c2 += c - '0';
	  else if (c >= 'A' && c <= 'F')
	    c2 += c - 'A' + 10;
	  else if (c >= 'a' && c <= 'f')
	    c2 += c - 'a' + 10;
	  else
	    EC_WARNING(-1);
//	    error(getPos(), "Illegal character <%02x> in hex string", c);
	  if (++m == 2) {
	    if (n == tokBufSize) {
	      GStrAppendStringN(&s, tokBuf, tokBufSize);
	      p = tokBuf;
	      n = 0;
	    }
	    *p++ = (char)c2;
	    ++n;
	    c2 = 0;
	    m = 0;
	  }
	}
      }
      GStrAppendStringN(&s, tokBuf, n);
      if (m == 1)
	GStrAppendChar(&s, (char)(c2 << 4));
      initString(obj, &s);
      GStrFree(&s);
    }
    break;

  // dict punctuation
  case '>':
    c = LexerLookChar(lexer);
    if (c == '>') {
      LexerGetChar(lexer);
      tokBuf[0] = tokBuf[1] = '>';
      tokBuf[2] = '\0';
      initCmd(obj, tokBuf);
    } else {
	EC_WARNING(-1);
//      error(getPos(), "Illegal character '>'");
      initError(obj);
    }
    break;

  // error
  case ')':
  case '{':
  case '}':
//    EC_WARNING(-1);
//    error(getPos(), "Illegal character '%c'", c);
    initError(obj);
    break;

  // command
  default:
    p = tokBuf;
    *p++ = c;
    n = 1;
    while ((c = LexerLookChar(lexer)) != EOF && !(c < 128 && endOfNameChars[c])) {
      LexerGetChar(lexer);
      if (++n == tokBufSize) {
	EC_WARNING(-1);
//	error(getPos(), "Command token too long");
	break;
      }
      *p++ = c;
    }
    *p = '\0';
    if (tokBuf[0] == 't' && !strcmp(tokBuf, "true"))
      initBool(obj, gTrue);
    else if (tokBuf[0] == 'f' && !strcmp(tokBuf, "false"))
      initBool(obj, gFalse);
    else if (tokBuf[0] == 'n' && !strcmp(tokBuf, "null"))
      initNull(obj);
    else
      initCmd(obj, tokBuf);
    break;
  }

}	/* End of LexerGetObj.	*/

void LexerSkipToNextLine (Lexer *lexer)
{
  long c;

  while (1) {
    c = LexerGetChar(lexer);
    if (c == EOF || c == '\n')
      return;
    if (c == '\r') {
      if (LexerLookChar(lexer) == '\n')
	LexerGetChar(lexer);
      return;
    }
  }
}

void LexerSkipChar(Lexer *lexer) { LexerGetChar(lexer); }

  // Get stream.
  Stream *LexerGetStream(Lexer *lexer)
    { return isNone(&lexer->curStr) ? (Stream *)NULL : getStream(&lexer->curStr); }

  // Get current position in file.
long LexerGetPos(Lexer *lexer)
    { return isNone(&lexer->curStr) ? -1 : ObjStreamGetPos(&lexer->curStr); }

  // Set position in file.
void LexerSetPos(Lexer *lexer, long pos)
    { if (!isNone(&lexer->curStr)) ObjStreamSetPos(&lexer->curStr, pos); }

XRef *LexerGetXRef(Lexer *lexer) {
    return lexer->xref;
}
