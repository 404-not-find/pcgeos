##############################################################################
#
#	Copyright (c) GlobalPC 1999.  All rights reserved.
#	GLOBALPC CONFIDENTIAL
#
# PROJECT:	PDF Viewer
#
# AUTHOR:	John Mevissen, Jun 01, 1999
#
# 
#
##############################################################################



##############################################################################
Sources:
##############################################################################

Application skeleton aped from sdk_c/document/multiview and ../dosfile.

PDF code ported from xpdf (source from //www.foolabs.com/xpdf), which is 
zipped in xpdf-0.80.tar.gz.

PDF sample docs are in \\gpc\share\mevissen\pdf_samps.  The PDF spec is in
that dir, in pdfspec.pdf.  It's useful a useful document.

I tended to leave in the .goc files, commented out, xpdf source that I
either didn't port or didn't port exactly as written.  They tend to be good
markers of where I've taken shortcuts.

Since page descriptions are almost always encoded, it's hard to see what the
sequence of commands is that's being translated.
\\gpc\share\mevissen\decode has the lzw-decode code sitting standalone, and
you can input a file of extracted page-description binary for decoding.  The
first pages of a few tax documents are already decoded in the directory.


##############################################################################
Engineering Notes:
##############################################################################

I never did this, but since we have unix machines it might be handy to
compile xpdf and see if there are cases it handles correctly that PDFViewer
doesn't.  For example, what does it do with embedded fonts?  I didn't see
code to draw custom glyphs to the screen, although I do think it passes the
embedded font to the postscript-printer driver, and hence they would be
printed properly.  (I assume we can't do that, since we don't have a PS
printer.)

Due to the way the original program was designed and written in C++, there
is tremendous potential for memory leaks, both due to not freeing "pdf
objects" and the structs that now represent C++ objects.  You must make sure
to call ObjFree to free pdf objects, and XxxFree to free allocated C++
objects (C structs, here).  I strongly recommend that, after changes, you
open and close a number of pdf files, and run "hgwalk" in Swat after every
close; the amount of fixed memory allocated for geode pdfvu shouldn't
increase after each open/close cycle.  (I believe the fixed lmem allocated
by malloc can have free memory mixed in, so it's possible that (1) a small
leak won't show an increase every cycle, and (2) the memory might increase
even without a leak, if the amount of free memory increases.  I recommend
four or five open/close cycles to ensure that everything's okay.)

It's hard to see what's going on when a page is decoded, because the page is
usually compressed in the source file.  To at least see the graphics
commands being processed, you can set a Swat patch in gfx.goc::GfxGo() to
print the string obj.name before calling GfxExecOp().  To see the text
strings being output, set a patch in gfx.goc::doShowText() to print *s
(assuming the encoding isn't entirely crazy, as it is in p525.pdf).  If the
page is lzw compressed, you can decode it using the standalone program
mentioned in Sources above.

Please note I converted all occurances to "double" to "gdouble", and then
use a flag to select between typdef'ing it to double or to WWFixed in
gtypes.goh.  Please note the helpful macros in that file, because if you
port any more code with doubles in it, you may have to use them.  (Right
now, all gdoubles are WWFixed, so therefore any real number read from the
file will be converted to WWFixed and you'll have to use it as such.)

A lot of times, the font size in the pdf file is specified as 1-point, and
the text transfer matrix is scaled up to get the right size.  However, the
kernel's graphics code doesn't keep track of the current point after drawing
a string to that high a precision, so text tended to shift up and down at
the end of each displayed string.  Therefore, I introduced the constant
FONT_SCALING_FACTOR by which all font sizes are scaled up, and by which the
transfer matrix is scaled down when text is displayed.  That fixed this
precision problem.


##############################################################################
Open Issues:
##############################################################################

I never measured the app heapspace -- I just put a big number into the .gp
file.  I don't call GeodeRequestSpace / ReturnSpace when I allocate memory.

I never added informative EC_WARNING messages; they're all EC_WARNING(-1),
and you have to use the source/line # in the swat dump to find out what's
going on.  (I didn't find it that big a handicap, but it's not elegant.)

Decoding images is slow.  I hope it can be optimized a bit, but I notice
that the original code for DCT-encoded streams in stream.goc has already
been converted from floating-point to long-integer arithmatic.  So there
goes an easy step.

The xpdf source includes a "text object" that gets written to as text is
decoded.  You can look into porting that code if someone ever wants to work
on adding text-selection as a feature to the code.  (We also talked about
simply writing all the text on a page somewhere, so it could be selected on
an all-or-nothing basis, but I never implemented anything.)

I didn't port the named-colorspace code, or some of the fancy colorspaces
(such as difference colorspaces).  It hasn't caused a problem yet.  (XXX:
This has been found to be a problem with certain PDF distillers (Adobe's,
of course) that generate funky colorspace functions for white lines and
text.  These white objects shouldn't be in the file in the first place,
but they are showing up in our viewer in black.  Since these files have
so far come from the tech docs department, we've been able to alert them
to the problem and have asked them to clean them up: dhunter)

Vector graphics are a bit rough.  This is due to rounding errors, as
PDF specifies floating-point values, GrCode only takes integers, and the
decimal is just dropped.  Marcus suggested scaling down the matrix and
scaling up the points (by a factor of perhaps 10) to cure this for
high-resolution printout and zoomed display.  This might be a quick
change, but I would only recommend putting time into it if our docs
department produces files which show the problem.

##############################################################################
Closed Issues:
##############################################################################

There should be informative dialogs when errors occur, instead of simply
the file not opening (for example).  (XXX: A general open failure dialog
has been added: dhunter)

There should be a way to cancel image loading or page loading.  (XXX: I've
added code to cancel image loading.)

I believe there's a problem in the kernel's bezier-curve drawing routines.
See the first page of examples p525.pdf and mxprodv.pdf; text drawn as a
sequence of filled curves doesn't look right.  (Other examples have logos
drawn incorrectly -- see rr4805.pdf, at the bottom of first page; also
lesson.pdf, at the bottom of the first page.)  I tried increasing the
resolution of drawn curves and that didn't seem to help (code is in
Main\gfx-curve.goc in \\gpc\share\mevissen\PDFViewer), so I don't think it's
a precision problem.  Plus, if I replace the curve-drawing code in gfx.goc
to simply draw a line to connect the endpoints (see the code commented out
with "//dbg"), then the columns in the picture on the first page of p525.pdf
show up, albeit with pointy ends.  With the nominal curve-drawing code, the
columns don't appear at all.  It's possible the bug is in gfx.goc somewhere,
but I'm blaming the kernel at the moment.  (XXX: The kernel is definitely at
fault.  A workaround has been added to opMoveTo (gfx.goc) that corrects the
issue by drawing a zero-length line on each move: dhunter)

For some reason, everything gets remade when I compile.  However, if I
delete "dependencies.mk" from my local development dir, then it only remakes
changed source files, as it should.  I don't quite understand this.  Also, I
added the pdfviewer geode to the main makefile, but I didn't add it to
anything that would cause it to be remade in the nightly make.

There are no custom icons for the application.

PDF page attrs include info on a crop box and media box.  I ignore that
info; it seems to be okay.  (XXX: It's not okay.  Both are loaded and
the view is cropped and rotated for proper viewing.  However, printing
is not yet cropped, I've not decided if this is a real issue: dhunter)

Printing to the print-to-screen app worked okay, but I could never print
anything to a real printer.  I think the printer driver was crashing for
unrelated reasons.  (XXX: Most of the printing issues have been addressed
and fixed: dhunter)


##############################################################################
Long-Winded Closed Issues:
##############################################################################

==============================================================================
File Open
==============================================================================

I aped code from the multi-view sample app, so in principle one should be
able to open multiple documents.  However, there's no "open" item in the
file menu, because I set the document-control class attrs (in pdfvu.goc) to
include GDCM_VIEWER.  If I change it to GDCM_SHARED_SINGLE, then I get an
"open" file-menu item and opening multiple docs seems okay; unfortunately,
the open item and dialog are actually open/new -- but it really isn't
possible to create a new pdf document (or edit one, incidentally).  Ideally,
the "open or create new?" dialog should never come up, as it does not when
GDCM_VIEWER is specified.

I guess what I'm trying to say is: set GDCM_SHARED_SINGLE in pdfvu.goc, then
figure out how to get rid of the open/new dialog, and simply give the
open-file controller dialog.

(XXX: This was a bug in the SPUI and has been fixed: dhunter)

##############################################################################
Long-Winded Open Issues:
##############################################################################

==============================================================================
Embedded Fonts / Symbol Fonts
==============================================================================

Sometimes pdf docs simply contain references to known fonts; sometimes the
font description is included in the file.  The PDF Viewer always substitutes
one of our own fonts for the document font, based on the font's flags: serif,
sans serif, fixed width, or symbol.

In principle, we're supposed to be able to draw characters based on the spec
in T1_SPEC.pdf, but we don't.  There are two problems here:

(1) We can't distinguish between custom glyphs for regular latin characters,
versus specially-drawn encoded glyphs.  For example, in f1040.pdf there are
little triangles all over the place, as well as a brace to the right of
"Exemptions: Yourself, Spouse"  We don't know how to draw them, and it's
best to ignore them completely.  However, in cc0499.pdf, there are some
blurbs of text that are drawn from an embedded font, but if we simply draw
them by substituting one of our fonts, they come out fine.  However, there's
nothing in the font description or the embedded font to tell us how to tell
these two cases apart.  We either have to turn everything on and let funky
glyphs appear in random places, or turn everything off and hide potentially
useful information.

This is currently done in gfx.goc::doShowText, with this code:  (It is
currently set to hide glyphs we don't know how to draw.)

  /*
   * If the font has a charset and is symbolic, it probably has drawing commands for the glyphs
   * embedded in its FontFile.  So, draw nothing.
   */
  if (font->hasCharSet && (font->flags & fontSymbolic)) {
      return;
  }

I generally find that funny symbol-like glyphs are only found in embedded
fonts that have the fontSymbolic flag set; I haven't found examples where
funny symbols are simply added on top of serif or fixed-width fonts, e.g.

dhunter: I've added some code to improve this issue.  First, the built-in
PDF fonts (Helvetica, Courier, Times-Roman) and the usual TrueType
equivalents (Arial, Courier, TimesNewRoman, Symbol) are recognized and
always displayed properly.  Second, a list of well-known font names
(in gfxFont2.goh) contains fonts and their true flags for fonts that have
nonstandard names but map well to a built-in font.

(1.5) I added some code to gfxFont.goc::GfxFontMakeEncoding() to read the
glyph names from the embedded font.  I found some cases where the glyphs
were named by their latin names (/a, /space, etc), and had hoped that symbol
glyphs could be identified by their unrecognized names (/H1022, /c334, etc).
Unfortuately, the cc0499.pdf example is one where the latin-character glyphs
still have funny names, so this idea was no use and I commented it out
again.  Feel free to play with it if you wish; it did, for example,
correctly ferret out the symbol glyphs in the f1040.pdf file.

(2) A lot of times, an embedded font is called "symbolic" when in fact all
of the ascii encodings are fine and it's simply drawing regular (latin)
text.  Therefore, at the moment the selecting of the symbol font is turned
off.  This is done in the routine gfx.goc::GfxUpdateFont().

dhunter: The charset/symbolic test from (1) still filters out the oddball
fonts, but Symbol (assuming that it doesn't have a charset) is recognized
and valid, so its selection has been turned back on.

(3) It sounds like it might be nice to have a menu toggle that turns on and
off the displaying of all text, regardless.  And it might be nice.  The only
drawbacks are: (a), keeping track of the toggle on a document-by-document
basis if multiple docs are open, and (b), the pdf page is decoded only once
and stored to a gstring; that gstring is then replayed whenever the page is
displayed or scrolled.  So, the only way to change whether the embedded
glyphs are displayed or not is to re-decode the entire page to a gstring
again.  This could get messy -- the user won't understand why the toggle has
to be set before the page is displayed, or why it takes so long to turn the
erroneous text on and off, if you decide to re-decode the current page when
the toggle is changed.


==============================================================================
Character Widths
==============================================================================

For a lot of fonts, embedded or not, there is also stored in the pdf file a
list of the widths of each character.  The xpdf code I ported used this
info to reset the pen position after drawing each character, to make sure
everything was lined up properly regardless of whether the font really had
the right-width chars or not.

This is done in gfx.cc::doShowText().  I didn't code anything to do this, so
(for example) the text in util.pdf tends to run over itself, because the pdf
file re-positions the pen after every "r" in order (I assume) to do some
kerning.  However, because the chars are the wrong width, the strings up to
the "r"s don't stop in exactly the right place and it looks funny.

One thing I do do is scale the width of the entire font based on the width
of the "m" character.  This is done once per font, near the beginning of
gfx.goc::doShowText().

The third page of lesson.pdf looks a lot better because of this first-order
correction.  The bold font of p525.pdf, however, is unnecessarily
compressed.  I don't know why the width info for that font is not correct.
(If I scale the font based on the "M" glyph, though, it seems better in that
case.  However, if I stick with the "M" character as the sample, then the
third page of lesson.pdf looks much worse.  So the installed code still uses
the width of "m" as the standard.)

If you want to add the character-by-character correction, you'll probably
want to store the text widths as a WWFixed array in
gfxFont.goc::GfxFontMakeWidths(), scaled by the font size and/or
FONT_SCALING_FACTOR.  (It's a byte array now; change the struct def in
pdfGeode.goh.)  Then, in gfx.goc::doShowText(), for each char in a string
you can either (a) push the gstate, write a char, pop the gstate, then move
the pen, or (b) write a char, then move the pen based on the difference in
width between the GEOS char and the PDF char.  (You'll have to ignore this
if the PDF width is zero, which it can be if width info is missing.)  You'll
probably want to keep the first-order width correction on the entire font,
else the chars might overlap one another.

dhunter: (2/10/2000)

Character-by-character correction has been implemented, and boy
does it look good.  Font widths are now properly matched with the built-in
fonts that don't specify them, intelligently set to defaults depending on
the font type, and read from the file when given.  These widths, along with
the other text drawing attributes, are used to reposition the pen before 
each character is drawn.  This takes care of the many text issues, from
text overlapping itself to text running off the edge of the page.

The unfortunate side-effect is that the gstring has grown considerably for
pages that have a lot of text, which is the norm.  I have not measured
the impact this has on printing, but drawing doesn't seem to be noticably
effected.

##############################################################################
PDF Sample Files:
##############################################################################

A few comments on each of the sample PDF files I grabbed from the web and
elsewhere.  It was often the case that every file I downloaded exposed new
bugs and missing ports, so I won't be surprised if that happens to you too.

Compare the display produced with PDF Viewer and the Adobe Acrobat reader to
notice problems.


1commis.pdf:
A nice full-color image on first page.

altspc96.pdf: 
Has 100s of inline images on the first page.  (An example of a terrible way
of encoding info, by the way.)  In fact, we run out of memory decoding all
the images; this file prompted me to add the limit of 100 images in
gfx.goc::GfxDoImage().  Remove the limit to see the problem; all of that
allocated memory is for windows and MSGs to free those windows, that are
queued to the thread that's creating and destroying the 100s of bitmaps.

cc0499.pdf:
Has an embedded font that I can't distinguish from custom symbol glyphs.
(Used for text in upper right and box in lower right of first page.)

concepts.pdf:
:)  Has a lot of pages, whose descriptions take a while to load before the
first page is decoded.

dirdepos.pdf: 
Another terrible file.  The first page is simply one big image!  This
crashed the program (clogged heap), and I added simple image sampling to
gfx.goc::GfxDrawImage() to handle it.

editorial-profile.pdf: 
Curve-drawn logo is wrong.  No support for "fi" and "fl" ligatures in
char.def.  (If those ligatures are ever added, you'll have to fix up the
encoding arrays in gfxFont2.goh.)

f1040.pdf:
A nice tax form.  Shows bogus embedded symbols around "IMPORTANT" text and
end of "Exemptions" section on first page, if such symbols are turned on.
(See "Embedded Fonts" (1) above.)

Jane_Smith.pdf:
Bullets are wrong.  Underlining is missing.  I haven't investigated.

lesson.pdf: 
Embedded fonts on first page are substituted nicely, except text at bottom
of image is too wide & therefore clipped by edge of page.  Curve-drawn logo
at bottom is wrong.  On page three, text width is nicely compensated for by
adjusting by width of "m" character -- lots of overlapping without it.

MXProDV.pdf:
Nice images on first page.  Logo is wrong.  Some text on page two missing,
due to embedded-font problem.

p17.pdf:
Curve-drawn text on first page wrong.  Like MXProDV.pdf, the image on first
page is blocky at some zoom levels, nice and smooth at others (on NT demo).
This is the document that forced me to read char-encoding difference
entries; the text is not stored as anything like normal ascii text.

p525.pdf:
Curve-drawn text on first page is wrong.  Columns missing in image, due to
curve drawing.  Bold font width is compressed too much using "m"-width
method; I don't know why.

PDFSPEC.pdf:
Useful reference.  When displayed, shows text outside clipping rectangle
(because I ignore page clipping.)

pt-100.pdf:
Image masks seem inverted; but other files show image masks correctly, so
I'm not sure what to do.

rr4805.pdf:
Has two munged logos.

t1_spec.pdf:
Reference for glyph encoding, if you ever want to go down that road.  xpdf
didn't handle that sort of thing, I'm pretty sure.

UTIL.pdf:
Text widths munged; lots of text overlapping.

