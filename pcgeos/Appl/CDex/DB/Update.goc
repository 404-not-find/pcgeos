/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
MODULE:		Database		
FILE:		dbUpdate.asm

AUTHOR:		Ted H. Kim, March 3, 1992

ROUTINES:
	Name			Description
	----			-----------
	UpdateIndex		Updates index field of record in database
	UpdateAddr		Updates address field of record in database
	UpdateNotes		Updates the Notes field
	UpdateRecord		Updates the changes to current record
	UpdatePhone		Updates phone fields
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial revision
   jfh	1/2/05	Port to GOC

DESCRIPTION:
	Contains routines used to update an existing record in database.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "cdex.goh"


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UpdateIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update or copy the text string for index field.  The index
		field is stored immediately after the DB_record header.

CALLED BY:	InitRecord, UpdateRecord

PASS:		ds:curRecord - current record handle
		ds:fieldHandles, ds:fieldLengths - data block handle and size

RETURN:		index field in database updated

PSEUDO CODE/STRATEGY:
	Lock the current record
	Delete the old index field text string
		string size in DBR_indexSize.
	Insert the new index field text string
		string length in fieldLengths[TEFO_INDEX].
	Unlock the record

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/5/89		Initial version
	jfh	12/22/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void UpdateIndex(void)
{
 DB_Record		*record;
 word				iSize;


	/* open current record */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	/* set offsets to reflect removal of old index */
	iSize = record->DBR_indexSize;
	record->DBR_toAddr -= iSize;
	record->DBR_toPhone -= iSize;
	DBUnlock(record);

	if (iSize) {
		/* delete the old index (lastname) */
		DBDeleteAt(g_fileHandle, g_groupHandle, g_curRecord,
		                                            sizeof(DB_Record), iSize);
		}

	/* open up the record again */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	/* set offsets to reflect insertion of new index */
	record->DBR_indexSize = g_fieldLengths[TEFO_INDEX];
	record->DBR_toAddr += g_fieldLengths[TEFO_INDEX];
	record->DBR_toPhone += g_fieldLengths[TEFO_INDEX];
	DBUnlock(record);

	/* make room for new text string */
	DBInsertAt(g_fileHandle, g_groupHandle, g_curRecord,
										sizeof(DB_Record), g_fieldLengths[TEFO_INDEX]);
	/* copy the new text string in */
	MoveStringToDatabase(sizeof(DB_Record), TEFO_INDEX, g_fieldLengths[TEFO_INDEX]);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UpdateAddr
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update or copy the text string for address field.

CALLED BY:	InitRecord, UpdateRecord

PASS:		curRecord - current record handle
		fieldHandles, fieldLengths - data block handle and size

RETURN:		address field in database updated

PSEUDO CODE/STRATEGY:
	Lock the current record
	Delete the old address field text string
	Insert the new address field text string
	Unlock the record

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/5/89		Initial version
	jfh	12/23/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void UpdateAddr(void)
{
 DB_Record		*record;
 word				aSize, aOffset;


	/* open current record */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	/* set offsets to reflect removal of old index */
	aSize = record->DBR_addrSize;
	record->DBR_toPhone -= aSize;
	aOffset = record->DBR_toAddr;
	DBUnlock(record);

	if (aSize)
		/* delete the old text string */
		DBDeleteAt(g_fileHandle, g_groupHandle, g_curRecord, aOffset, aSize);

	/* open up the record again */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	/* set offsets to reflect insertion of new index */
	record->DBR_addrSize = g_fieldLengths[TEFO_ADDR];
	record->DBR_toPhone += g_fieldLengths[TEFO_ADDR];
	DBUnlock(record);

	/* make room for the text string */
	DBInsertAt(g_fileHandle, g_groupHandle, g_curRecord, aOffset,
																  g_fieldLengths[TEFO_ADDR]);

	/* copy the new text string in */
	MoveStringToDatabase(aOffset, TEFO_ADDR, g_fieldLengths[TEFO_ADDR]);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UpdateNotes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update or copy the text string for notes field.

CALLED BY:	InitRecord, UpdateRecord

PASS:		ds:curRecord - current record handle
		ds:fieldLengths[TEFO_NOTES], ds:fieldHandles[TEFO_NOTES]

RETURN:		Notes field in database DB_Record updated

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	* The previous note is not deleted; it's space is not reclaimed.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	1/30/91		Initial version
	jfh	12/24/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void UpdateNotes(void)
{
 DB_Record		*record;
 DBItem			oldNotes, newNotes = 0;
 char 			*source, *dest;


	if (g_fieldLengths[TEFO_NOTE]) {
		/* lock the new note mem block */
		source = MemLock(g_fieldHandles[TEFO_NOTE]);
		/* allocate a DBItem */
		newNotes = DBAlloc(g_fileHandle, g_groupHandle, g_fieldLengths[TEFO_NOTE]);
		dest = DBLock(g_fileHandle, g_groupHandle, newNotes);
		/* copy the text string */
		strcpy (dest, source);
		DBUnlock(dest);
		MemFree(g_fieldHandles[TEFO_NOTE]);
		}

	g_fieldHandles[TEFO_NOTE] = 0;

	/* save the new notes DBItem in the record */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	oldNotes = record->DBR_notes;
	record->DBR_notes = newNotes;
	DBUnlock(record);

	/* improve the app by freeing up old notes DBItem - see note above jfh*/
	if (oldNotes)
		DBFree(g_fileHandle, g_groupHandle, oldNotes);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UpdateRecord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Updates an already existing record.

CALLED BY:	SaveCurRecord, SaveCurPhone

PASS:		curRecord - current record handle
		ax - flag to indicate whether to update everything (0)
			  or just phone fields (-1)
	GOC: Boolean phoneOnly

RETURN:		record updated
		carry flag set if error
	GOC: Boolean - TRUE if error

PSEUDO CODE/STRATEGY:
	Save which phone number is being displayed
	If update phone fields only
		Goto phone
	If index field modified
		Update index field
	If address field modified
		Update address field

	phone:
	If phone fields modified
		Update phone fields
	exit

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/5/89		Initial version
	jfh	12/31/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
Boolean UpdateRecord(Boolean phoneOnly)
{
 DB_Record		*record;


	/* open record to update */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	DBDirty(record);
	/* update current phone number counter */
	record->DBR_phoneDisp = (byte) g_gmb.GMB_curPhoneIndex;
	DBUnlock(record);

	if (!phoneOnly) {
		/* update the dirty fields */
		if (g_dirtyFields & DFF_INDEX)  UpdateIndex();
		if (g_dirtyFields & DFF_ADDR)  UpdateAddr();
		if (g_dirtyFields & DFF_NOTE)  UpdateNotes();
		}

	/* update the phone fields if they are modified */
	if (g_dirtyFields & DFF_PHONE)  {
		if (UpdatePhone())  return(TRUE);
		}

	/* mark the map block dirty */
	MarkMapDirty();

	return(FALSE);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UpdatePhone
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Add any changes to phone fields to the record in database.

CALLED BY:	InitRecord, UpdateRecord

PASS:		fieldHandles - memory block handles of phone fields
		gmb.GMB_curPhoneIndex - phone number counter 

RETURN:		carry set if error
	GOC:	Boolean - TRUE if error

PSEUDO CODE/STRATEGY:
	Exit if it was a blank phone field
	Otherwise
		Delete the old phone entry
		Get the phone number type name ID number of new phone entry
		Insert the new phone entry

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/7/89		Initial version
	jfh	12/31/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
Boolean UpdatePhone(void)
{
 PhoneTypeIndex		id;


	/* is phone type name empty? if not, skip */
	if (!g_fieldHandles[TEFO_PHONE_TYPE]) {
		/* is phone number field emtpy? if not, skip */
		if (!g_fieldHandles[TEFO_PHONE_NO])  {
			/* was this a blank phone field (because it is now)? if so, exit */
			if (g_gmb.GMB_curPhoneIndex)  {
				/* This is the case when someone deletes a phone entry by backspacing
					everything in phone number field and phone number type name field */
				g_phoneFlag |= PF_DONT_INC_CUR_PHONE_INDEX;
				}
			else {
				return(FALSE);
				}
			}
		else  {
			/* phone number type name ID is 0 */
			id = 0;
			}
		}

	else {  /*notEmpty  */
		/* get phone number type name ID */
		id = GetPhoneTypeID();
		/* is it one of pre-defined names? if so, skip */
		if (!id) {
			/* can we add any more? */
			if (g_gmb.GMB_totalPhoneNames == MAX_NEW_PHONE_TYPE_NAME) {
				DisplayErrorBox(ERROR_TOO_MANY_NAME);
				if (g_warnReply == IC_NULL) return(TRUE);
				else return(FALSE);
				}
			/* if so, new name should be added */
			id = AddPhoneTypeName();
			}
		}

	/* delete this phone entry from record */
	DeletePhoneEntry(id);

	/* was both phone # and type deleted? if so, exit */
	if (!(g_phoneFlag & PF_DONT_INC_CUR_PHONE_INDEX)) {
		/* add a new phone entry */
		InsertPhoneEntry(id);
		}

	return(FALSE);

}



