/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Berkeley Softworks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		GeoDex/Main		
FILE:		mainUtils.asm

AUTHOR:		Ted H. Kim, March 4, 1992

ROUTINES:
	Name			Description
	----			-----------
	FocusSortField		Give the focus to the index field
	ClearTextField		Clear a text edit field
	TextTooLarge		Put up too much text in text field error msg
	DisplayErrorBox		Display a generic GeoDex error dialog box
	NewDBFree		Delete the notes field DB item if one exists
	GetTextInMemBlock	Read in text into a memory block
	GetTextInMemBlockNoFixup	
				Same as above but diff'nt flags for ObjMessage
	EnableObject		Enable an object
	DisableObject		Disable an object
	EnableCopyRecord 	Enable Copy Record menu
	DisableCopyRecord 	Disable Copy Record menu
	EnableUndo		Enable undo menu
	DisableUndo		Disable undo menu
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial revision

DESCRIPTION:
	Contains various utility routines for Main module.	

	$Id: mainUtils.asm,v 1.1 97/04/04 15:50:07 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "cdex.goh"

/*CommonCode	segment	resource */

@extern chunk NoMatchText;
@extern chunk NoModemText;
@extern chunk NoMemoryText;
@extern chunk NoCalendarText;
@extern chunk NoRecordText;
@extern chunk NoDataFileText;
@extern chunk BrowseModeErrorText;
@extern chunk NoIndexText;
@extern chunk TextTooLargeText;
@extern chunk NoPhoneEntryText;
@extern chunk ResortWarningText;
@extern chunk TooManyText;
@extern chunk NoSerialText;
@extern chunk SerialLoadErrorText;
@extern chunk PortInUseText;
@extern chunk NoIndexImpexText;
@extern chunk SearchAtEndText;
@extern chunk SearchAtBegText;

@extern visMoniker CustomYes;
@extern visMoniker CustomNo;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FocusSortField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Gives the focus to the index field.

CALLED BY:	UTILITY

PASS:		ds - dgroup

RETURN:		nothing

DESTROYED:	ax, bx, si, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
FocusSortField	proc	far
ifdef GPC
	tst	ds:[openApp]		; still opening?
	jnz	done			; yes, don't futz with focus
endif
	mov	si, offset LastNameField ; bx:si - OD of text object
	GetResourceHandleNS	LastNameField, bx	
	mov	ax, MSG_GEN_MAKE_FOCUS	
	mov	di, mask MF_FIXUP_DS	
	call	ObjMessage		; set focus to the sort field
done::
	ret
FocusSortField	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ClearTextField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Clears a text edit field. 

CALLED BY:	UTILITY

PASS:		bx:si - OD of text object to clear
		ds - segment address of core block

RETURN:		nothing

DESTROYED:	ax, cx, dx, bp, di

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	6/21/90		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ClearTextField	proc	far
	mov	dx, ds			
	mov	bp, offset noText	; dx:bp - points to string to display
	clr	cx			; cx - string is null terminated
	mov	ax, MSG_VIS_TEXT_REPLACE_ALL_PTR	; ax - method number
	mov	di, mask MF_CALL or mask MF_FIXUP_DS
	call	ObjMessage		; clear the text edit field
	ret
ClearTextField	endp

if	0

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		TextTooLarge
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Puts up an error dialog box with a message that there is
		too much text in a text object.

CALLED BY:	MSG_TEXT_OBJECT_GETTING_TOO_LARGE, MSG_TEXT_OBJECT_TOO_LARGE

PASS:		nothing

RETURN:		nothing

DESTROYED:	bx, bp, si, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
TextTooLarge	proc	far

	class	GeoDexClass

	mov	bp, ERROR_TEXT_TOO_LARGE	; bp - error constant
	call	DisplayErrorBox			; put up the error box
	ret
TextTooLarge	endp
endif

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DisplayErrorBox
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Display generic GeoDex error box

CALLED BY:	GLOBAL

PASS:		DS, ES	= DGroup
		BP	= RolodexErrorValue (word)

RETURN:		carry set if the dialog box terminated by system exit
	GOC:	sets the global g_warnReply (IC_NULL if the dialog box terminated
				by system exit)

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	1/3/90		Initial version
   jfh	12/21/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void DisplayErrorBox(word errorVal)
{
 optr		string[] = {@NoMatchText, @TooManyText, @NoModemText, @NoMemoryText,
							@NoCalendarText, @NoRecordText, @NoDataFileText,
							@BrowseModeErrorText, @PortInUseText, @SerialLoadErrorText,
							@NoSerialText, @NoIndexText, @TextTooLargeText,
							@NoPhoneEntryText, @ResortWarningText, @NoIndexImpexText,
							@SearchAtEndText, @SearchAtBegText};
 CustomDialogBoxFlags  flags;
 StandardDialog2ResponseTriggerTable customTriggerTable =
						{2, {(optr)&CustomYes, IC_YES}, {(optr)&CustomNo, IC_NO}};
 char		*trigTable;


	/* lock the block that contains the error strings */
	MemLock(OptrToHandle(string[0]));

	/* assume notification type and error dialog box w/ no custom trigs */
	flags = ((CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
	trigTable = 0;

	/* search string not found message? */
	if (errorVal == ERROR_NO_MATCH) {
		flags = ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
		}
	/* resort warning message? */
	else if (errorVal == ERROR_RESORT_WARNING) {
		flags = ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));
		}
	/* search warning messages? */
	else if (errorVal == ERROR_SEARCH_AT_END || errorVal == ERROR_SEARCH_AT_BEG) {
		flags = ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));
		}
	/* index field empty error message? */
	else if (errorVal == ERROR_INDEX_FIELD) {
		/* if so, provide custom monikers for the triggers */
		trigTable = &customTriggerTable;
		flags = ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET));
		}

	/* put up the dialog box */
	g_warnReply = UserStandardDialog(0,
			  trigTable, 0, 0,
			  LMemDeref(string[errorVal]), flags);

	MemUnlock(OptrToHandle(string[0]));

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NewDBFree
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Deletes the Notes field DBItem before deleting the main
		record DBItem.

CALLED BY:	UTILITY

PASS:		di - DB Item to delete
	GOC:	DBItem item

RETURN:		nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void NewDBFree(DBItem item)
{
 DB_Record		*record;
 DBItem			notes;


	/*.enter

	push	di			; save the record handle
	call	DBLockNO		; open up this data block
	mov	di, es:[di] */
	record = DBLock(g_fileHandle, g_groupHandle, item);

	/*mov	di, es:[di].DBR_notes	; di - handle of notes data block */
	notes = record->DBR_notes;

	/*call	DBUnlock */
	DBUnlock(record);

	/*tst	di			; no notes block?
	je	exit			; if not, exit */
	if (notes) {

		/*call	DBFreeNO		; if so, delete it! */
		DBFree(g_fileHandle, g_groupHandle, notes);
		}

/*exit:
	pop	di			; restore the record handle 
	call	DBFreeNO		; delete it! */
	DBFree(g_fileHandle, g_groupHandle, item);

	/*.leave
	ret
NewDBFree	endp */

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetTextInMemBlock
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Read in the text string from a text object in a memory block

CALLED BY:	UTILITY

PASS:		bx:si - OD of text object

RETURN:		ax - handle of memory block
		cx - number of characters (length)

DESTROYED:	bx, si

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version
	witt	3/94		Call common with VIS_TEXT_GET_ALL_BLOCK

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GetTextInMemBlock	proc	far
	mov	ax, mask MF_CALL or mask MF_FIXUP_DS
	GOTO	GetTextCommon
GetTextInMemBlock	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetTextInMemBlockNoFixup
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Read in the text string from a text object in a memory block.
		Same as the routine above but ObjMessage is called with
		different flags .

CALLED BY:	UTILITY

PASS:		bx:si - OD of text object

RETURN:		ax - handle of memory block
		cx - number of characters (string length)

DESTROYED:	bx, si

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version
	witt	3/94		Call common with VIS_TEXT_GET_ALL_BLOCK

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GetTextInMemBlockNoFixup	proc	far
	mov	ax, mask MF_CALL
	FALL_THRU  GetTextCommon
GetTextInMemBlockNoFixup	endp

;-------------------------------------------------------------
;
;   PASS:	ax - ObjMessage MethodFlags
;		bx:si - OD of text object
;   RETURN:	ax - handle of memory block
;		cx - string length
;   DESTORYED:	none
;
GetTextCommon	proc	far
	push	bp, di, dx
	clr	dx				; allocate new mem block
	mov	di, ax				; di <- MethodFlags

	mov	ax, MSG_VIS_TEXT_GET_ALL_BLOCK
	call	ObjMessage
	xchg	ax, cx				; cx <- number of characters
						; ax <- chunk's block handle
	pop	bp, di, dx
	ret
GetTextCommon	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		EnableObject/DisableObject
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Enable/Disable an object

CALLED BY:	UTILITY

PASS:		bx:si - OD of object to enable/disable

RETURN:		nothing

DESTROYED:	ax, di, dx

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
EnableObject	proc	far
	mov	ax, MSG_GEN_SET_ENABLED	
	mov	di, mask MF_FIXUP_DS
	mov	dl, VUM_NOW		; update it right now
	call	ObjMessage		; enable the object
	ret
EnableObject	endp

DisableObject	proc	far
	mov	ax, MSG_GEN_SET_NOT_ENABLED	
	mov	di, mask MF_FIXUP_DS
	mov	dl, VUM_NOW		; update it right now
	call	ObjMessage		; disable the object
	ret
DisableObject	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Enable{Disable}CopyRecord
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Enable and disable some edit menu items.

CALLED BY:	UTILITY

PASS:		nothing

RETURN:		nothing

DESTROYED:	ax, bx, si, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
EnableCopyRecord	proc	far
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditCopyRecord ; si - offset to copy record menu
	call	EnableObject		; enable copy record menu 
ifdef GPC
	;
	; delete record is modified at the same time
	;
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditDeleteRecord ; si - offset to delete record menu
	call	EnableObject		; enable delete record menu
	;
	; so is Notes button
	;
	GetResourceHandleNS	NotesTrigger, bx	
	mov	si, offset NotesTrigger ; si - offset to notes trigger
	call	EnableObject		; enable notes trigger
endif
	ret
EnableCopyRecord	endp

DisableCopyRecord	proc	far
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditCopyRecord ; si - offset to copy record menu
	call	DisableObject		; disable copy record menu 
ifdef GPC
	;
	; delete record is modified at the same time
	;
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditDeleteRecord ; si - offset to delete record menu
	call	DisableObject		; disable delete record menu 
	;
	; so is Notes button
	;
	GetResourceHandleNS	NotesTrigger, bx	
	mov	si, offset NotesTrigger ; si - offset to notes trigger
	call	DisableObject		; disable notes trigger
	;
	; also, close Notes DB
	;
	GetResourceHandleNS	NotesBox, bx	
	mov	si, offset NotesBox ; si - offset to notes DB
	mov	ax, MSG_GEN_GUP_INTERACTION_COMMAND
	mov	cx, IC_DISMISS
	mov	di, mask MF_FIXUP_DS
	call	ObjMessage		; disable the object
endif
	ret
DisableCopyRecord	endp

EnableUndo	proc	far
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditUndo	; si - offset to undo menu
	call	EnableObject		; enable undo menu 
	ret
EnableUndo	endp
	
DisableUndo	proc	far
	mov	ds:[undoAction], UNDO_NOTHING
	GetResourceHandleNS	MenuResource, bx	
	mov	si, offset EditUndo	; si - offset to undo menu
	call	DisableObject		; disable undo menu 
	ret
DisableUndo	endp

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetLexicalValue
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Given a character, gets the lexical value of this character
		and converts it into uppercase.

CALLED BY:	

PASS:		al - character
RETURN:	al - updated

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	8/92		Initial revision
	jfh	12/10/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
char GetLexicalValue(char letter)
{
 word		lexVal, lexA, lexZ;
 char		retChar;


	lexVal = LocalLexicalValueNoCase(letter);
	lexA = LocalLexicalValueNoCase('A');
	lexZ = LocalLexicalValueNoCase('Z');

	if ((lexVal < lexA) || (lexVal > lexZ)) {
		/* the current letter is '*' */
		retChar = '*';
		}
	else {
		/* convert lexical value to ASCII value */
		retChar = lexVal - lexA + 'A';
		}

	return(retChar);

}

