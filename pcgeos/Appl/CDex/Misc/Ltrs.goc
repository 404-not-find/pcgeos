/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
MODULE:		Misc		
FILE:		miscLetters.asm

AUTHOR:		Ted H. Kim, 10/3/89

ROUTINES:
	Name			Description
	----			-----------
 	LettersCompSpecBuild	Vis. build method for composite gadget
 	LettersCompGetSpacing	Sets the spacing between objects in a gadget	
	LettersCompGetMargins	Gets margin of composite gadget	
 	LettersCompGetMinSize	Sets the minimum size of composite gadget
-	LettersCompRecalcSize	Sets the maximum size of composite gadget
-	LettersFindKbdAccelerator	Intercepts keyboard accelerators
 	LettersSpecBuild	Vis. build method for letter class gadget
 	LettersStartSelect	Mouse press method handling routine
-	LettersGetAppFeatures	Get the application feature bits
- 	LettersButtonProcess	Processes mouse events
 	LettersButtonCalc	Calculates which button is pressed
-	LettersDrawLetterTab	Invert a letter tab and display a record
-	LettersDisplayRecord	Display 1st record under current letter tab
	LettersGetLetterTabChar	Get the string for letter tab
-	LettersUninvertTab	Uninvert an already inverted tab
 	LettersLostExclusive	Releases the mouse grab
 	LettersButtonInvert	Inverts the new letter button
 	LettersButtonClear	Uninverts a letter tab before closing a file	
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	9/89		Initial revision
	ted	3/92		Complete restructuring for 2.0

DESCRIPTION:
	Contains letter button gadget related routines.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "cdex.goh"
@include "misc\consts.goh"

@classdecl	LettersCompClass;
@classdecl	LettersClass;

Boolean g_doublePress = FALSE;

word LettersButtonCalc(Rectangle rect, word xPos, word yPos,
                         word *topTabPos, word *leftTabPos);

@extern method LettersCompClass, MSG_VIS_DRAW;
@extern method LettersClass, MSG_VIS_DRAW;
@extern method	LettersClass, MSG_DRAW_LETTER_TABS;
@extern method LettersClass, MSG_LETTERS_INVERT_TAB;

@extern chunk Set1Char1;
@extern chunk Set1Char2;
@extern chunk Set1Char3;
@extern chunk Set1Char4;
@extern chunk Set1Char5;
@extern chunk Set1Char6;
@extern chunk Set1Char7;
@extern chunk Set1Char8;
@extern chunk Set1Char9;
@extern chunk Set1Char10;
@extern chunk Set1Char11;
@extern chunk Set1Char12;
@extern chunk Set1Char13;
@extern chunk Set1Char14;
@extern chunk Set1Char15;
@extern chunk Set1Char16;
@extern chunk Set1Char17;
@extern chunk Set1Char18;
@extern chunk Set1Char19;
@extern chunk Set1Char20;
@extern chunk Set1Char21;
@extern chunk Set1Char22;
@extern chunk Set1Char23;
@extern chunk Set1Char24;
@extern chunk Set1Char25;
@extern chunk Set1Char26;
@extern chunk Set1Char27;
@extern chunk Set1Char28;
@extern chunk Set1Char29;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersCompSpecBuild
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Visually builds letters composite gadget.	

CALLED BY:	UI (= MSG_SPEC_BUILD)

PASS:		es - dgroup
		ds:si - instance data

RETURN:		nothing

GOC:		SpecBuildFlags flags = bp

PSEUDO CODE/STRATEGY:
	Call the super class
	Get the instance data
	Set the flags

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/3/89		Initial version
	jfh	11/28/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersCompClass, MSG_SPEC_BUILD
{
VisInstance *vself;
GeoAndDimensionAttrs		set, clear;


	@callsuper();

	vself = ObjDerefVis(oself);

	/* set size for letter gadget */
	vself->VI_bounds.R_left = LEFT_BOUND;
	vself->VI_bounds.R_top = TOP_BOUND;
	vself->VI_bounds.R_right = RIGHT_BOUND;
	vself->VI_bounds.R_bottom = BOTTOM_BOUND;

	/* set the attribs */
	set.GADA_geoAttrs = VCGA_ORIENT_CHILDREN_VERTICALLY
								| VCGA_ONE_PASS_OPTIMIZATION
								| VCGA_HAS_MINIMUM_SIZE;
	set.GADA_geoDimensionAttrs = VCGDA_EXPAND_HEIGHT_TO_FIT_PARENT |
											 WJ_CENTER_CHILDREN_HORIZONTALLY;
	clear.GADA_geoAttrs = 0;
	clear.GADA_geoDimensionAttrs = 0;
	@send oself::MSG_VIS_COMP_SET_GEO_ATTRS(set, clear);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersCompGetSpacing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sets the spacing for objects inside the composite gadget.

CALLED BY:	UI (= MSG_VIS_COMP_GET_CHILD_SPACING )

PASS:		nothing

RETURN:		cx -- spacing between children
		dx -- spacing between wrapped lines of children
		ax, bp destroyed

GOC:		SpacingAsDWord

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/16/90	Initial version
	jfh	11/28/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersCompClass, MSG_VIS_COMP_GET_CHILD_SPACING
{

	return(DWORD_CHILD_SPACING(5) | DWORD_WRAP_SPACING(0));

}


/*----------------------------------------------------------------------

METHOD:		LettersCompGetMargins --
		MSG_VIS_COMP_GET_MARGINS for LettersCompClass

DESCRIPTION:	Gets margins.

PASS:		*ds:si 	- instance data
		es	- segment of MetaClass
		ax 	- MSG_VIS_COMP_GET_MARGINS

RETURN:		ax 	- left margin
		bp	- top margin
		cx	- right margin
		dx	- bottom margin

GOC:	Rectangle *retValue

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Chris	5/16/91		Initial version
	jfh	11/28/04	port to GOC

-----------------------------------------------------------------------------*/
@method LettersCompClass, MSG_VIS_COMP_GET_MARGINS
{

	retValue->R_top = 0;
	retValue->R_left = 0;
	retValue->R_right = 0;
	retValue->R_bottom = 5;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersCompGetMinSize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sets the minimum size of the composite gadget.

CALLED BY:	UI (= MSG_VIS_COMP_GET_MINIMUM_SIZE )

PASS:		cga - flag for the video driver

RETURN: 	cx -- minimum width of composite
		dx -- minimum height of composite

	GOC:		SizeAsDWord

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/16/90	Initial version
	jfh	11/28/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method LettersCompClass, MSG_VIS_COMP_GET_MINIMUM_SIZE
{

	return(DWORD_WIDTH(0) | DWORD_HEIGHT(MIN_HEIGHT));

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersSpecBuild
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Visually build letters class gadget. 

CALLED BY:	UI (= MSG_SPEC_BUILD)

PASS:		ds:si - instance data

RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Call your super class
	Dereference to instance data
	Initialize the size info
	Set various flags

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/3/89		Initial version
	jfh	11/28/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersClass, MSG_SPEC_BUILD
{
VisInstance *vself;

	@callsuper();

	vself = ObjDerefVis(oself);

	/* set size for letter gadget  */
	vself->VI_bounds.R_left = LETTER_TAB_LEFT_BOUND;
	vself->VI_bounds.R_top = LETTER_TAB_TOP_BOUND;
	vself->VI_bounds.R_right = LETTER_TAB_RIGHT_BOUND;
	vself->VI_bounds.R_bottom = LETTER_TAB_BOTTOM_BOUND;

	/* set the attrs */
	vself->VI_geoAttrs = VGA_ONLY_RECALC_SIZE_WHEN_INVALID |
								VGA_USE_VIS_SET_POSITION;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersStartSelect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Handles mouse presses over letter gadget.

CALLED BY:	UI (= MSG_META_START_SELECT)

PASS:		ds:si - instance data
		es - segment of LettersClass
		ax - The method
		cx - x position
		dx - y position
		bp low - ButtonInfo
		bp high - UIFunctionsActive
GOC:
 *          MouseReturnParams   *retVal
 *             sword            xPosition
 *             sword            yPosition
 *             word             inputState


RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Are we in bounds?
	If not, exit
	Else do we have the mouse grab?
		if not get the mouse grab
	Are we selected?
	If not, exit
	Else process the even
	     release the mouse grab
	Exit

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/3/89		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersClass, MSG_META_START_SELECT
{
 GStateHandle		gstate;
 Rectangle			rect;
 word					letterNum, topTabPos, leftTabPos;
 optr	letter[MAX_NUM_OF_LETTER_TABS] = {@Set1Char1, @Set1Char2, @Set1Char3,
				@Set1Char4, @Set1Char5, @Set1Char6, @Set1Char7, @Set1Char8,
				@Set1Char9, @Set1Char10, @Set1Char11, @Set1Char12, @Set1Char13,
				@Set1Char14, @Set1Char15, @Set1Char16, @Set1Char17, @Set1Char18,
				@Set1Char19, @Set1Char20, @Set1Char21, @Set1Char22, @Set1Char23,
				@Set1Char24, @Set1Char25, @Set1Char26, @Set1Char27, @Set1Char28,
				@Set1Char29};
 char			theLetter[2];


	/* is the event in our bounds? */
	if (!(GET_UI_FUNCTIONS_ACTIVE(inputState) & UIFA_IN)) {
		retVal->flags = MRF_REPLAY;
		return;
		}

	/* do we have the mouse grab? */
	if (!(pself->LI_flag & LIF_GRAB))  {
		/* set the grab mouse flag */
		pself->LI_flag |= LIF_GRAB;
      @call oself::MSG_VIS_GRAB_MOUSE();
		}

	/* are we selected? */
	if (!(GET_UI_FUNCTIONS_ACTIVE(inputState) & UIFA_SELECT)) {
		retVal->flags = MRF_REPLAY;
		return;
		}

	/* double clicked? */
	if (GET_BUTTON_INFO(inputState) & BI_DOUBLE_PRESS) {
		/* release the mouse grab */
		@call oself::MSG_VIS_RELEASE_MOUSE();

		/* triple or more clicked? if so, quit */
		if (g_doublePress) {
			retVal->flags = MRF_PROCESSED;
			return;
			}
		/* is database empty? if so, quit */
		if (!g_gmb.GMB_numMainTab) {
			retVal->flags = MRF_PROCESSED;
			return;
			}

		/* XXX check to see if view menu is enabled
		mov	ax, es:[appFeatures]		; ax - features bits
		test	ax, mask GF_VIEW_MENU		; is view menu enabled?
		je	quit				; if not, quit

		/* go to both view */
		BringUpBothView();
		/* set double press flag */
      g_doublePress = TRUE;
		/* we've already selected the tab in the first time thru */
		retVal->flags = MRF_PROCESSED;
		return;
		}

	/* process the mouse press */
	@call oself::MSG_VIS_GET_BOUNDS(&rect);
	letterNum = LettersButtonCalc(rect, xPosition, yPosition,
													 &topTabPos, &leftTabPos);

	if ((letterNum != 0xffff) && (letterNum < MAX_NUM_OF_LETTER_TABS))  {
		/* OK - the click is on a tab, but not on the top right tab (was
      	reserved as the replay tab to swap between two char sets) */
		/* check to see if this is a blank tab */
		MemLock (OptrToHandle(letter[letterNum]));
		strcpy(theLetter, LMemDeref(letter[letterNum]));
		MemUnlock (OptrToHandle(letter[letterNum]));
		if (theLetter[0] != ' ') {
			/* create a new gState */
			gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();
			/* uninvert a tab that has been inverted */
			if (pself->LI_flag | LIF_INVERTED)  {
				/* set to invert mode */
				GrSetMixMode(gstate, MM_INVERT);
				/* invert back a tab that has already been inverted */
				GrFillPolygon(gstate, ODD_EVEN, pself->LI_coordBuf, pself->LI_numPts);
				/* clear the flag */
				pself->LI_flag = pself->LI_flag & ~LIF_INVERTED;
				/* set to normal mode */
				GrSetMixMode(gstate, MM_COPY);
				}

			/* give the tab invert method the instance data reflecting the
				pending invert operation */
			pself->LI_letter = letterNum;
			pself->LI_tabTop = topTabPos;
			pself->LI_tabLeft = leftTabPos;
			/* and invert the new tab */
			@call oself::MSG_LETTERS_INVERT_TAB(gstate);
			/* destroy the gState */
			GrDestroyState(gstate);

			/* display the 1st record under this letter tab */
         g_ignoreInput = TRUE;
			pself->LI_flag |= LIF_INVERTED;
			@send process::MSG_ROLODEX_FIND_LETTER(letterNum);
			} /* end of non-blank tab if */
		} /* end of valid tab if */

	/* release the mouse grab */
	@call oself::MSG_VIS_RELEASE_MOUSE();

	/* we processed the event */
	retVal->flags = MRF_PROCESSED;

}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersButtonCalc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calculates which button was pressed and inverts it.

CALLED BY:	MSG_META_START_SELECT

PASS:		di - handle of gState
		ds:si - instance data

RETURN:		di - handle of gState
		carry set if the mouse is clicked outside letter tabs

PSEUDO CODE/STRATEGY:
	Calculate the row over which the mouse was pressed
	Calculate the column over which the mouse was pressed
	Calculate the letter ID number

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	9/20/89		Initial version
	jfh	12/1/04	port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */
word LettersButtonCalc(Rectangle rect, word xPos, word yPos,
                         word *topTabPos, word *leftTabPos)
{
 Boolean				out = FALSE;
 word					relxPos, letterNum, col, i;


	/* from the x, y position of the mouse press, we have to figure out
		over which letter the mouse has been pressed and x, y coordinate
		of top left corner of the letter tab polygon. */
	if (yPos < (rect.R_top + HEIGHT_OF_LETTER_TAB)) {
		/* the tab is in the top row */
		if ((xPos < (rect.R_left + TOP_ROW_LEFT_BOUND_ADJUST)) ||
			 (xPos > (rect.R_right - TOP_ROW_RIGHT_BOUND_ADJUST))) {
			out = TRUE;
			}
		else {
			relxPos = xPos - (rect.R_left + TOP_ROW_LEFT_BOUND_ADJUST);
			letterNum = LTRN_ROW_TOP;
			/* adjust top position */
			*topTabPos = rect.R_top + 1;
			}
		}
	else if (yPos < (rect.R_top + HEIGHT_OF_LETTER_TAB * 2)) {
		/* the tab is in the middle row */
		if ((xPos < (rect.R_left + MIDDLE_ROW_LEFT_BOUND_ADJUST)) ||
			 (xPos > (rect.R_right - MIDDLE_ROW_RIGHT_BOUND_ADJUST))) {
			out = TRUE;
			}
		else {
			relxPos = xPos - (rect.R_left + MIDDLE_ROW_LEFT_BOUND_ADJUST);
			letterNum = LTRN_ROW_MID;
			/* adjust top position */
			*topTabPos = rect.R_top + HEIGHT_OF_LETTER_TAB;
			}
		}
	else {  /* the tab is in the bottom row */
		if ((xPos > (rect.R_right - BOTTOM_ROW_RIGHT_BOUND_ADJUST))) {
			out = TRUE;
			}
		else {
			relxPos = xPos - (rect.R_left + BOTTOM_ROW_LEFT_BOUND_ADJUST);
			letterNum = LTRN_ROW_BOT;
			/* adjust top position */
			*topTabPos = rect.R_top + HEIGHT_OF_LETTER_TAB * 2 - 1;
         }
		}

	if (!out) {  /* now calculate which column the tab is in */
		i = WIDTH_OF_LETTER_TAB + 3;
		if (relxPos < (WIDTH_OF_LETTER_TAB + 3)) col = 0;
		else {
			i = WIDTH_OF_LETTER_TAB * 2 + 3;
			col = 1;
			while (relxPos > i) {
				i += WIDTH_OF_LETTER_TAB;
				col++;
				}
			}
		/* left pos. of tab */
		switch (letterNum) {
			case LTRN_ROW_TOP:
				*leftTabPos =  col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + TOP_ROW_LEFT_BOUND_ADJUST;
				break;
			case LTRN_ROW_MID:
				*leftTabPos =  col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + MIDDLE_ROW_LEFT_BOUND_ADJUST;
				break;
			case LTRN_ROW_BOT:
				*leftTabPos =  col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + BOTTOM_ROW_LEFT_BOUND_ADJUST;
				break;
			}
		/* and add the column to the row for the letter ID */
		letterNum += col;
		}

	else { /* click was in the letters box but not on a tab */
		letterNum = 0xffff;
		}

	return(letterNum);
}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersGetLetter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Returns letter ID

CALLED BY:	(GLOBAL) MSG_LETTERS_GET_TAB_LETTER

PASS:		nada

RETURN:	word  instance LI_letter

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	8/92		Initial revision
	jfh	12/17/04 Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method  LettersClass, MSG_LETTERS_GET_LETTER
{

	return(pself->LI_letter);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersGetLetterTabChar
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Given the letter tab ID, figures out what string is
		embedded in the tab.

CALLED BY:	(GLOBAL) MSG_LETTERS_GET_TAB_LETTER

PASS:		dl - letter tab ID
		es - segment address of dgroup
	GOC:  word letterID

RETURN:		dgroup:sortBuffer - current letter string
		dgroup:curLetterLen - length of sortBuffer (w/out C_NULL)

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	8/92		Initial revision
	jfh	12/17/04	Port to GOC - lots of ESP code eliminated since we
						are doing just one character set

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method  LettersClass, MSG_LETTERS_GET_TAB_LETTER
{
 optr	letter[MAX_NUM_OF_LETTER_TABS] = {@Set1Char1, @Set1Char2, @Set1Char3,
				@Set1Char4, @Set1Char5, @Set1Char6, @Set1Char7, @Set1Char8,
				@Set1Char9, @Set1Char10, @Set1Char11, @Set1Char12, @Set1Char13,
				@Set1Char14, @Set1Char15, @Set1Char16, @Set1Char17, @Set1Char18,
				@Set1Char19, @Set1Char20, @Set1Char21, @Set1Char22, @Set1Char23,
				@Set1Char24, @Set1Char25, @Set1Char26, @Set1Char27, @Set1Char28,
				@Set1Char29};


	/* lock the resource block with character sets */
	MemLock (OptrToHandle(letter[letterID]));

	/* copy the character string into 'sortBuffer' buffer */
	strcpy(g_sortBuffer, LMemDeref(letter[letterID]));

	/* save length of tab string */
	if (strlen(LMemDeref(letter[letterID])))
		g_curLetterLen = 1;
	else  g_curLetterLen = 0;

	/* unlock text block */
	MemUnlock (OptrToHandle(letter[letterID]));

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersLostExclusive
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Called when losing the grab of mouse.

CALLED BY:	UI (= MSG_VIS_LOST_GADGET_EXCL)

PASS:		ds:si	= Instance data

RETURN:		nothing

DESTROYED:	di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/3/89		Initial version
	jfh	11/30/04	port to GOC - XXX doesn't seem to get called in ESP or GOC ver
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersClass, MSG_VIS_LOST_GADGET_EXCL
{

/*	mov	di, ds:[si]			; dereference the handle
	add	di, ds:[di].Letters_offset		; access instance data
	andnf	ds:[di].LI_flag, not mask LIF_GRAB
						; clear the mouse grab flag
	ret
LettersLostExclusive	endm */
	/* XXX */

	pself->LI_flag = pself->LI_flag & ~LIF_GRAB;

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersButtonInvert
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Inverts the letter that corresponds to the current record.

CALLED BY:	Resident Module (= MSG_LETTERS_INVERT)

PASS:		cx - number of records in database
		dl - letter to invert
		if bp = 0, then create a new gstate
		else, bp contains a gstate handle
GOC:	word numRecs, byte letter, GStateHandle gstate

RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Create a new gState
	Invert the old letter button
	Calculate the top and bottom of new letter button
	Calculate the left and right of new letter button
	Invert the new letter button
	Destroy the gState

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/3/89		Initial version
	jfh	12/10/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersClass, MSG_LETTERS_INVERT
{
 GStateHandle		myGstate;
 Rectangle			rect;
 word					col;


	/* create a new gState if needed */
	if (!gstate) {
		myGstate = @call oself ::MSG_VIS_VUP_CREATE_GSTATE();
		if (!myGstate)  return;
		}
	else myGstate = gstate;

	/* get the bounds of gadget */
	@call oself::MSG_VIS_GET_BOUNDS(&rect);

	/* is database empty?  set a flag to indicate no data */
	/* XXX not sure if we need to know num recs */
	if (!numRecs)  pself->LI_letter = 0xffff;
	else  pself->LI_letter = letter;

	/* Now calculate the top left coordinate of the letter tab polygon
		because the routine 'InvertTab' expect this coordinate to be
		passed.  And it uses this coordinate to figure out the rest of
		the coordinates in letter tab polygon.
		INVERT_TAB meeds:
			pself->LI_letter  (zero based: A = 0)
			pself->LI_tabTop
			pself->LI_tabLeft
		and I'm gonna do the calculations entirely differently from the ESP
		version since a direct port doesn't lend itself to GOC as in
		LettersButtonCalc() above */
	if (letter < LTRN_ROW_MID) {
		/* it's in the bottom row */
		pself->LI_tabTop = rect.R_top + HEIGHT_OF_LETTER_TAB * 2 - 1;
		col = letter;
		pself->LI_tabLeft = col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + BOTTOM_ROW_LEFT_BOUND_ADJUST;
		}
	else if (letter < LTRN_ROW_TOP) {
		/* it's in the middle row */
		pself->LI_tabTop = rect.R_top + HEIGHT_OF_LETTER_TAB;
		col = letter - LTRN_ROW_MID;
		pself->LI_tabLeft = col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + MIDDLE_ROW_LEFT_BOUND_ADJUST;
		}
	else {
		/* it's in the top row */
		pself->LI_tabTop = rect.R_top + 1;
		col = letter - LTRN_ROW_TOP;
		pself->LI_tabLeft = col * WIDTH_OF_LETTER_TAB + rect.R_left
													  + TOP_ROW_LEFT_BOUND_ADJUST;
		}

	@call oself::MSG_LETTERS_INVERT_TAB(myGstate);

	/* set flag*/
	pself->LI_flag |= LIF_INVERTED;

	/* if a new gState was created in this routine, destroy it */
	if (!gstate) {
		GrDestroyState(myGstate);
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LettersButtonClear
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Uninverts a letter tab before closing a data file.

CALLED BY:	Application thread

PASS:		*ds:si - instance data of LettersClass

RETURN:		nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	10/16/90	Initial version
	jfh	12/15/04	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@method	LettersClass, MSG_LETTERS_CLEAR
{
 GStateHandle	gstate;


	/* is there a tab inverted?  if not, bail out */
	if (!(pself->LI_flag & LIF_INVERTED)) return;

	/* create gState */
	gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();
	if (!gstate)  return;

	/* set to invert mode */
	GrSetMixMode(gstate, MM_INVERT);
	GrFillPolygon(gstate, ODD_EVEN, pself->LI_coordBuf, pself->LI_numPts);
	/* clear invert flag */
	pself->LI_flag = pself->LI_flag & ~LIF_INVERTED;
	/* set to normal mode */
	GrSetMixMode(gstate, MM_COPY);
	/* destroy the gState */
	GrDestroyState(gstate);

}

