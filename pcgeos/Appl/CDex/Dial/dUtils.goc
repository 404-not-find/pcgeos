/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
MODULE:		Dial		
FILE:		dialUtils.asm

AUTHOR:		Ted H. Kim, March 4, 1992

ROUTINES:
	Name			Description
	----			-----------
	FocusPhoneField		Gives the focus to PhoneField
	EnableObjectFixupDSES	Enable the passed object
	DisableObjectFixupDSES	Disable the passed object
	AddPhoneTypeName	Adds a new phone type name to the table
	GetPhoneTypeID		Gets the phone number type name ID number
	InsertPhoneEntry	Copies in a new phone number and phone type
	DeletePhoneEntry	Delete the phone entry from the record
	ClearPhoneObjects	Clears the phone entry fields in GCM rolodex
	MemAllocErrBox		Puts up a memory allocation error dialog box 

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial revision

DESCRIPTION:
	Contains various utility routines for Dial module.	

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "cdex.goh"

@extern object PhoneListOption;
@extern object DialingOptions;
@extern object PrefixField;
@extern object CurrentAreaCodeField;
@extern object AssumedAreaCodeField;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FocusPhoneField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sends MSG_GEN_MAKE_FOCUS to PhoneField

CALLED BY:	UTILITY

PASS:		nothing

RETURN:		nothing

DESTROYED:	ax, bx, si, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
FocusPhoneField	proc	far
	mov	si, offset PhoneNoField	; bx:si - OD of phone number field
	GetResourceHandleNS	PhoneNoField, bx
	mov	ax, MSG_GEN_MAKE_FOCUS	
	mov	di, mask MF_FIXUP_DS	
	call	ObjMessage		; set focus to phone number field
	ret
FocusPhoneField	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		EnableObjectFixupDSES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sends MSG_GEN_SET_ENABLED to passed object

CALLED BY:	UTILITY

PASS:		bx:si - OD of object

RETURN:		nothing

DESTROYED:	ax, dx, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
EnableObjectFixupDSES	proc	far
	mov	ax, MSG_GEN_SET_ENABLED	
	mov	di, mask MF_FIXUP_DS or mask MF_FIXUP_ES 
	mov	dl, VUM_NOW		; update it right now
	call	ObjMessage		; enable the passed object
	ret
EnableObjectFixupDSES	endp


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DisableObjectFixupDSES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Sends MSG_GEN_SET_NOT_ENABLED to passed object

CALLED BY:	UTILITY

PASS:		bx:si - OD of object

RETURN:		nothing

DESTROYED:	ax, dx, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
DisableObjectFixupDSES	proc	far
	mov	ax, MSG_GEN_SET_NOT_ENABLED	
	mov	di, mask MF_FIXUP_DS or mask MF_FIXUP_ES 
	mov	dl, VUM_NOW		; update it right now
	call	ObjMessage		; disable the passed object
	ret
DisableObjectFixupDSES	endp

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		AddPhoneTypeName
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Adds a new phone number type name to the name table.

CALLED BY:	UpdatePhone

PASS:		gmb.GMB_phoneTypeBlk - handle of phone number type name block
		fieldHandles, fieldLengths - handle and length of mem blks

RETURN:		dx - count of phone type names
	GOC:	word - count

PSEUDO CODE/STRATEGY:
	Resize the data block
		Since the name does not exist yet, the block is extended
		by the name phone number type's string size.
	Copy the string 
	Update the offset and new size info
	Delete the memory block 

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	* Assumes replacing empty phone type name entry.
	* Loop could use offsets instead of indexing.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/7/89		Initial version
	witt	1/31/93 	DBCS-ized, code touchup
	jfh	1/3/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
word AddPhoneTypeName(void)
{
 PhoneTypeNameItem	*phoneStruct;
 word						size;
 char						*strPtr, *addStr;


	/* lock the phone type name block */
	phoneStruct = DBLock(g_fileHandle, g_groupHandle, g_gmb.GMB_phoneTypeBlk);
	/* new table size */
	size = phoneStruct->PEI_size + g_fieldLengths[TEFO_PHONE_TYPE];
	DBUnlock(phoneStruct);

	/* resize the phone type name block */
	DBReAlloc(g_fileHandle, g_groupHandle, g_gmb.GMB_phoneTypeBlk, size);
	/* open it back up */
	phoneStruct = DBLock(g_fileHandle, g_groupHandle, g_gmb.GMB_phoneTypeBlk);

	/* save the offset of the new type */
	phoneStruct->PEI_offsets[g_gmb.GMB_totalPhoneNames - 1] =
																	phoneStruct->PEI_size;
	/* get a ptr to where we want to add the new type */
	strPtr = phoneStruct;
	strPtr += phoneStruct->PEI_size;
	/* save the new size */
	phoneStruct->PEI_size = size;

	/* lock the memory block that contains new phone type name */
	addStr = MemLock(g_fieldHandles[TEFO_PHONE_TYPE]);

	/* copy the string */
	strcpy(strPtr, addStr);

	MemFree(g_fieldHandles[TEFO_PHONE_TYPE]);
	g_fieldHandles[TEFO_PHONE_TYPE] = 0;
	DBUnlock(phoneStruct);

	/* update total number of phone # types */
	g_gmb.GMB_totalPhoneNames++;

	return(g_gmb.GMB_totalPhoneNames - 1);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GetPhoneTypeID
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Gets the phone number type name ID number.  Answers the
		question of whether or not the phone type currently displayed
		is already in our phone type table.

CALLED BY:	UpdatePhone & impex

PASS:		ds - dgroup
			gmb.GMB_phoneTypeBlk - handle of phone type name block

RETURN:		dx - phone number type name ID number (PTI_xxx)
			- zero if no match is found
	GOC:  PhoneTypeIndex (byte) - phonenumber type or 0 if no match

PSEUDO CODE/STRATEGY:
	Lock the memory block with phone type name
	Lock the phone number type name table
	Search for a match.
		Table is terminated by a 0 value.
	If not found, exit with zero
	If found, exit with PhoneTypeIndex.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/7/89		Initial version
	witt 	2/1/94		DBCS-ized and simplified
   jfh	1/2/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
PhoneTypeIndex GetPhoneTypeID(void)
{
 PhoneTypeIndex	id;
 char		*newStr, *storedStr;
 PhoneTypeNameItem	*phoneStruct;
 word			i, offset;


	newStr = MemLock(g_fieldHandles[TEFO_PHONE_TYPE]);

	/* lock the phone type name block */
	phoneStruct = DBLock(g_fileHandle, g_groupHandle, g_gmb.GMB_phoneTypeBlk);
	storedStr = phoneStruct;

	/* locate the string within the phone number type name block */
	for (i = 0; i < MAX_TOTAL_PHONE_TYPE_NAMES; i++) {
		/* compare the string in mem block with the one in phone type block */
		offset = phoneStruct->PEI_offsets[i+1];
		if (!offset) {
			/* we didn't find a match */
			id = 0;
			break;
			}
		else {
			/* see if they match */
			if (!LocalCmpStringsNoCase(newStr, (storedStr + offset), 0)) {
				/* it matches */
				id = (byte)i + 2;
				break;
				}
			}
		}

	DBUnlock(phoneStruct);
	MemUnlock(g_fieldHandles[TEFO_PHONE_TYPE]);
	if (id) {
		MemFree(g_fieldHandles[TEFO_PHONE_TYPE]);
		g_fieldHandles[TEFO_PHONE_TYPE] = 0;
		}

	return(id);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		InsertPhoneEntry 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Copies in a new phone number and phone type 

CALLED BY:	UpdatePhone

PASS:		dl - phone number type name ID number

RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Open up the record
	Get offset to the end of record
	Make room for a new phone entry
	Save phone number length and type
	Copy in the phone number
	Close up the record

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/7/89		Initial version
	jfh	1/2/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void InsertPhoneEntry(PhoneTypeIndex index)
{
 DB_Record		*record;
 word				i, offset, numAdd;
 PhoneEntry		*pePtr;
 byte				*counter;


	/* lock the current record entry	*/
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);

	/* was this a blank phone field? if not, skip */
	if (!g_gmb.GMB_curPhoneIndex) {
		/* new phone count */
		g_gmb.GMB_curPhoneIndex = record->DBR_noPhoneNo;
		}

	/* increment the counter */
	record->DBR_noPhoneNo++;

	/* ptr to beg of phone entry */
	counter = record;
	counter += record->DBR_toPhone;

	/* go to the end of the phone entries */
	for (i = 0; i < g_gmb.GMB_curPhoneIndex; i++) {
		pePtr = counter;
		counter += pePtr->PE_length;
		counter += sizeof(PhoneEntry);
		}
	numAdd = g_fieldLengths[TEFO_PHONE_NO] + sizeof(PhoneEntry);

	/* offset to insert at */
   offset = counter - record;
	DBUnlock(record);

	/* make room for one more phone entry */
	DBInsertAt(g_fileHandle, g_groupHandle, g_curRecord, offset, numAdd);

	/* copy the new phone entry info into the record entry */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);
	/* record has been unlocked and re-locked.  Need to recalc pointers.*/
	counter = record;
	counter += offset;
	pePtr = counter;
	/* save the length (incl C_NULL) */
	pePtr->PE_length = g_fieldLengths[TEFO_PHONE_NO];
	/* save the phone ID # */
	pePtr->PE_type = index;
	pePtr->PE_count = 0;
	DBUnlock(record);

	/* copy the phone number into the record entry */
	if (g_fieldLengths[TEFO_PHONE_NO]) {
		offset += sizeof(PhoneEntry);
		MoveStringToDatabase(offset, TEFO_PHONE_NO, g_fieldLengths[TEFO_PHONE_NO]);
		}

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DeletePhoneEntry 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Delete the phone entry (telephone number) from the record.

CALLED BY:	UpdatePhone, InsertPhone

PASS:		curRecord - current record handle
		gmb.GMB_curPhoneIndex - phone number counter
		dl - phone number type name ID number

RETURN:		nothing

PSEUDO CODE/STRATEGY:
	Open up this record
	Get the offset to the phone entry to be deleted
	Delete the phone entry

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	12/7/89		Initial version
	jfh	1/2/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
void DeletePhoneEntry(PhoneTypeIndex index)
{
 DB_Record		*record;
 word				i, offset, numDel;
 PhoneEntry		*pePtr;
 byte				*counter;


	/* was this a blank phone field? if so, return */
	if (!g_gmb.GMB_curPhoneIndex) return;

	/* ptr to beg of record */
	record = DBLock(g_fileHandle, g_groupHandle, g_curRecord);

	/* don't delete past last entry */
	if (g_gmb.GMB_curPhoneIndex >= record->DBR_noPhoneNo)  return;  // XXX check

	/* if # of phone number entry is zero, don't decrement  */
	if (record->DBR_noPhoneNo)  {
		record->DBR_noPhoneNo--;
		}

	/* is DBR_phoneDisp too big? if not, skip  */
	if (record->DBR_phoneDisp > record->DBR_noPhoneNo) {  // XXX check
		/* # of phone no entry zero? if so, don't decrement */
		if (record->DBR_noPhoneNo) {
			record->DBR_phoneDisp = record->DBR_noPhoneNo - 1;
			}
		else {
			record->DBR_phoneDisp = record->DBR_noPhoneNo;
			}
		}

	/* ptr to phone entries */
	counter = record;
	counter += record->DBR_toPhone;

	/* locate the phone entry you are trying to delete */
	for (i = 0; i < g_gmb.GMB_curPhoneIndex; i++) {
		pePtr = counter;
		counter += pePtr->PE_length;
		counter += sizeof(PhoneEntry);
		}
	pePtr = counter;

	numDel = sizeof(PhoneEntry);

	/* are they the same? if not, skip */
	if(g_curPhoneType == pePtr->PE_type) {
		/* update the curPhoneType */
		g_curPhoneType = index;
		}

	numDel += pePtr->PE_length;
	offset = counter - record;
	DBUnlock(record);

	/* delete this phone entry from the record entry */
	DBDeleteAt(g_fileHandle, g_groupHandle, g_curRecord, offset, numDel);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MemAllocErrBox
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Puts up an error dialog box when MemAlloc returns with carry
		set

CALLED BY:	UTILITY

PASS:		nothing

RETURN:		carry is always set

DESTROYED:	ax, bx, si, di

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	none

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/92		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
MemAllocErrBox	proc	far	uses	bp
	.enter

	mov	bp, ERROR_NO_MEMORY		; bp - error message number
	call	DisplayErrorBox			; put up a warning box
	stc					; return with carry set

	.leave
	ret
MemAllocErrBox	endp

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SavePhoneStuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Saves out current area code, assumed area code, and  the
		long distance prefix number.

CALLED BY:	RolodexApplyDialOptions

PASS:		nothing

RETURN:		bp - -1 if any of dial option stuff is modified

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Ted	3/22/90		Initial version
	witt	3/ 8/94 	Lots of code cleanup!
   jfh	1/3/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
Boolean SavePhoneStuff(void)
{
 Boolean		isMod = FALSE;


	/*  1.  Check the Long Distance Prefix */
	if (@call PrefixField::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE()) {
		/* if modified, copy the new string into map block */
		@call PrefixField::MSG_VIS_TEXT_GET_ALL_PTR(g_gmb.GMB_prefix);
		/* mark the text object as not modified */
		@send PrefixField::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
		isMod = TRUE;
		}
	/*  2.  Check the Current Area Code */
	if (@call CurrentAreaCodeField::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE()) {
		/* if modified, copy the new string into map block */
		@call CurrentAreaCodeField::MSG_VIS_TEXT_GET_ALL_PTR(g_gmb.GMB_curAreaCode);
		/* mark the text object as not modified */
		@send CurrentAreaCodeField::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
		isMod = TRUE;
		}
	/*  3.  Check the Assumed Area Code */
	if (@call AssumedAreaCodeField::MSG_VIS_TEXT_GET_USER_MODIFIED_STATE()) {
		/* if modified, copy the new string into map block */
		@call AssumedAreaCodeField::MSG_VIS_TEXT_GET_ALL_PTR(g_gmb.GMB_assumedAreaCode);
		/* mark the text object as not modified */
		@send AssumedAreaCodeField::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
		isMod = TRUE;
		}

	return(isMod);

}

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RolodexApplyDialOptions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Update the map block with new dialing options.

CALLED BY:	MSG_ROLODEX_APPLY_DIAL_OPTIONS

PASS:		nothing

RETURN:		nothing

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	THK	12/8		Initial revision
	jfh	1/3/05	Port to GOC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@extern method RolodexProcessClass, MSG_ROLODEX_APPLY_DIAL_OPTIONS
{


	/* send MSG_GEN_APPLY to all objects except the text objects
		We only want to dirty the map block if the text has
		been modified.  We will send MSG_GEN_APPLY to each text
		object after we check the modified states to determine
		which to save (if any are saved, then we'll mark the map
		block dirty). */
	@send PhoneListOption::MSG_GEN_APPLY();
	@send DialingOptions::MSG_GEN_APPLY();

	/* read in prefix and area codes if they are modified */
	if (SavePhoneStuff()) {
		/* mark the file dirty*/
		MarkMapDirty();
		/* At least one of the text objects has been modified.
			Tell each to apply its changes (if needed) and reset
			their modified status. */
		@send DialingOptions::MSG_GEN_APPLY();
		@send DialingOptions::MSG_GEN_APPLY();
		@send DialingOptions::MSG_GEN_APPLY();
		}

}



