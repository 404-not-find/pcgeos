/*
 * Project:	PC/GEOS
 * Module:	VObj (Sample PC/GEOS application)
 * File:	vobj.ui
 *
 * Author:	John Wedgwood
 *
 *	This file contains the user Interface description for this
 * application.
 *
 * RCS STAMP:
 *	$Id: vobj.ui,v 1.1 97/04/04 16:33:54 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/*---------------------------------------------------------------------------
		 Definition of the VObjContent class
---------------------------------------------------------------------------*/
class VObjContent = VisContent {
	/*
	 * We change the geometry-attributes of the content so that it will
	 * not attempt to organize its children using the geometry manager.
	 *
	 * What we are doing here is redefining the default value for
	 * a field of the instance data for VisCompClass so that when objects
	 * of VObjContentClass are created in a .ui file they will not get the
	 * default value from VisCompClass, but will instead get this new value.
	 */
	default visCompGeoAttrs = customManageChildren;

	/*
	 * Here is our own instance data.
	 */
	tool	= wordComp : 0;
	color	= byteComp : 0;
	
	/* These are used when creating new objects */

	creating = byteComp : 0;
	startPos = typeComp "Point" : "0,0";
	lastPos	 = typeComp "Point" : "0,0";
}

/*----------------------------------------------------------------------------
			  Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The vobj.gp file contains "appobj" statement which indicates
 * that this "VObjApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

VObjApp = GenApplication {
	children = VObjPrimary;		/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	/*
	 * GCN lists (General Change Notification lists) are the systems
	 * way of communicating information to people who are interested
	 * in it. If an object has an interest in certain notifications
	 * it adds itself to the appropriate list and the system will deliver
	 * notifications to the items on that list when it is appropriate.
	 *
	 * GAGCNLT_WINDOWS is the place for windowed objects that you want
	 * to appear when your application starts up.
	 */
	gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = VObjPrimary;

	moniker = list {		/* The application object has a list
					 * of visual monikers */
		VObjTextMoniker		/* Used in the express menu and in
					 * the header for the primary window */
	}
}

visMoniker VObjTextMoniker = "VObj Sample Application";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

VObjPrimary = GenPrimary {
	children =	VObjToolMenu, 
			VObjColorMenu,
			VObjView;

	/* At present, we are not supplying the icon image for this application,
	 * (just the text moniker given above), so we want to prevent the
	 * user from minimizing this window. */

	hints = {
		ATTR_GEN_DISPLAY_NOT_MINIMIZABLE	
	}
}

end Interface;


/*-----------------------------------------------------------------------------
			Interface Definitions
-----------------------------------------------------------------------------*/

start Interface;

/*----------------------------------------------------------------------------
			      Tool Menu
-----------------------------------------------------------------------------*/
VObjToolMenu = GenInteraction {
	moniker =	"Tools";
	children =	ToolList;
	visibility =	popup;
}

ToolList = GenItemGroup {
	children =	RectangleTool,
			EllipseTool,
			ShuffleColorTool;
	selection =	0;
	destination =	VObjViewContent;
	applyMsg =	MSG_VOBJ_CONTENT_SET_TOOL;
}

RectangleTool = GenItem {
	moniker =	"Rectangle";
	identifier =	VCT_RECTANGLE;
}

EllipseTool = GenItem {
	moniker =	"Ellipse";
	identifier =	VCT_ELLIPSE;
}

ShuffleColorTool = GenItem {
	moniker =	"Shuffle Color";
	identifier =	VCT_SHUFFLE_COLOR;
}

/*----------------------------------------------------------------------------
			      Color Menu
-----------------------------------------------------------------------------*/
VObjColorMenu = GenInteraction {
	moniker =	"Colors";
	children =	ColorList;
	visibility =	popup;
}

ColorList = GenItemGroup {
	children =	BlackItem,
			RedItem,
			BlueItem,
			GreenItem;
	selection =	0;
	destination =	VObjViewContent;
	applyMsg =	MSG_VOBJ_CONTENT_SET_COLOR;
}

BlackItem = GenItem {
	moniker =	"Black";
	identifier =	C_BLACK;
}

RedItem = GenItem {
	moniker =	"Red";
	identifier =	C_RED;
}

BlueItem = GenItem {
	moniker =	"Blue";
	identifier =	C_BLUE;
}

GreenItem = GenItem {
	moniker =	"Green";
	identifier =	C_GREEN;
}

/*----------------------------------------------------------------------------*/
VObjView = GenView {
	/*
	 * These attributes will ensure that the view and content remain
	 * the same size. They work with the attributes of the content.
	 */
	horizAttributes = default +noLargerThanContent, +noSmallerThanContent;
	vertAttributes  = default +noLargerThanContent, +noSmallerThanContent;

	/*
	 * The output is the object which is handling events in the view.
	 * In our case this is the content, which was really designed
	 * specifically for this task.
	 */
	output = VObjViewContent;
}

end Interface;

/*-----------------------------------------------------------------------------*/
/*	  AppInterface is run by the main application thread		       */
/*-----------------------------------------------------------------------------*/
start AppInterface;

VObjViewContent = VObjContent {
	/*
	 * A content is associated with a view. In this case the VObjView
	 * and the VObjViewContent as tied to one another.
	 */
	view	= VObjView;

	/*
	 * By making it the same width/height as the view we can leave out
	 * any work we might do to define the size of our document. It will
	 * simply be the size of the view.
	 */
	contentAttrs = default +sameWidthAsSubview, +sameHeightAsSubview;
}

end AppInterface;
