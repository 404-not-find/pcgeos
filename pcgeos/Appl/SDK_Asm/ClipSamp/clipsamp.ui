/*
 * Project:	PC/GEOS
 * Module:	ClipSamp (Clipboard Sample PC/GEOS application)
 * File:	clipsamp.ui
 *
 * Author:	brianc
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 *RCS STAMP:
 *	$Id: clipsamp.ui,v 1.1 97/04/04 16:32:35 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The clipsamp.gp file contains "appobj" statement which indicates
 * that this "ClipSampApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

ClipSampApp = GenApplication {
	/* The geoManager uses this token information to store this
	 * application's icon in a database. */

	moniker = list {
		TextMoniker
	}

					/* four letters used as index to
					 * refer to this application in the
					 * token database. */

					/* manufacturer ID number. Also used
					 * for accessing database, to ensure
					 * uniqueness. */

	children = ClipSampPrimary;	/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = ClipSampPrimary;
					/* The main window should appear
					 * on-screen when the application
					 * is launched. */
}

					/* this title will appear at the top
					 * of the window. */
visMoniker TextMoniker = "Clipboard Sample Application";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

ClipSampPrimary = GenPrimary {
	children = EditMenu, ClipSampView;
					/* this window has two children:
					 * menu and view (see below) */

	/* At present, we are not supplying the icon image for this application,
	 * (just the text moniker given above), so we want to prevent the
	 * user from minimizing this window. */

	hints = {
		ATTR_GEN_DISPLAY_NOT_MINIMIZABLE
	}
}

ClipSampView = GenView {
	output = process;
	viewAttributes = focusable;
	horizAttributes = default +scrollable;
	vertAttributes = default +scrollable;

	docRight = "72*17/2";	/* 8 1/2 inches */
	docBottom = "11*72";	/* 11 inches    */
}

end Interface;


/*-----------------------------------------------------------------------------
	Menus
-----------------------------------------------------------------------------*/

start MenuResource;		/* not necessary to place menus in a separate
				 * resource, but is recommended, as this
				 * keeps the resource blocks small and easily
				 * movable within the Global Heap. */

/* An object which is an instance of the GenInteraction class can be
 * implemented by the specific UI as one of the following types of objects:
 *
 *		- a horizontal or vertical group which contains several
 *		gadgets, allowing a border to be drawn around the gadgets.
 *
 *		- a menu containing generic objects such as GenTriggers
 *		and other menus (i.e. submenus)
 *
 *		- a modal or non-modal dialog box, which can be used for
 *		UI gadgets which are less frequently used (like "Custom Size"
 *		in GeoWrite)
 *
 * In this case, we want this GenInteraction object to be implemented
 * as a top-level menu, so we make it a generic child of the GenPrimary,
 * and give it the HINT_MENUABLE hint. If the specific UI supports menus,
 * then it will create a menu button to open this menu, and will place
 * that button in a menu bar in the GenPrimary window. */

EditMenu = GenInteraction {
	children = EditCut, EditCopy, EditPaste;
	visibility = popup;
	hints = { ATTR_GEN_INTERACTION_GROUP_TYPE { GenInteractionGroupType GIGT_EDIT_MENU } }
}

EditCut = GenTrigger {
	CUT_TRIGGER_VALUES
	action = MSG_META_CLIPBOARD_CUT, process;
}

EditCopy = GenTrigger {
	COPY_TRIGGER_VALUES
	action = MSG_META_CLIPBOARD_COPY, process;
}

/* the "Paste" trigger is set up as 'ignoreDirty' and disabled because we set
 * its enabled/disabled state explicitly according to the contents of the
 * clipboard */

EditPaste = GenTrigger ignoreDirty {
	PASTE_TRIGGER_VALUES
	action = MSG_META_CLIPBOARD_PASTE, process;
	genStates = default -enabled;
}

end MenuResource;
