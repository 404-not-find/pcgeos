##############################################################################
#
#	Copyright (c) Geoworks 1994 -- All Rights Reserved
#
# PROJECT:	Hello3 lab
# FILE:		README
#
# AUTHOR:	Allen Yuen, Jan 19, 1995
#
#	This describes the Hello3 assembly training lab
# 
#
#	$Id: README,v 1.1.5.1 97/03/29 09:36:27 canavese Exp $
#
##############################################################################

		       Info for the Hello3 lab
		       -----------------------

	The Hello3 lab consists of two parts, in which you will be
dealing with messages in assembly, defining new classes and adding
objects.  You will also be trying out some UNIX tools.


	Part I:
	-------
	This part is to implement the functionality of the
HelloReplaceTriggerClass.  When a trigger of this class is activated
(clicked), it should replace the text stored in the HelloText object
with the text stored in the trigger's instance data.

	When a GenTriggerClass object is clicked, it sends
MSG_GEN_TRIGGER_SEND_ACTION to itself.  The handler in GenTriggerClass
for this message is to send the message stored in GTI_actionMsg to the
destination stored in GTI_destination.  Since in this lab the triggers
are to be self-contained, you will intercept
MSG_GEN_TRIGGER_SEND_ACTION to do the work.  You have to decide
whether you should call superclass or not.

	You will find MSG_VIS_TEXT_REPLACE_ALL_OPTR useful.  Use Emacs
to find out where this message is defined.  Remember to run the
appopriate UNIX tool after you change the file dependencies.


	Part II:
	--------
	You are to add a new text object called NewText.  This should
sit below HelloText on screen.  The user should be able to edit the
text in this object.

	Then you are to define a new class called
HelloCopyTriggerClass, which, when clicked, copies the text from
NewText to HelloText.

	Again, HelloCopyTriggerClass is to be self-contained.  You
will be intercepting MSG_GEN_TRIGGER_SEND_ACTION to do the work.  You
will probably be using some of the MSG_VIS_TEXT_GET_ALL_xxx and
MSG_VIS_TEXT_REPLACE_ALL_xxx messages.  Your choice of messages
depends on the way you store your temporary text.

	Adding a new class requires changes in many files.  If your
app doesn't compile, be patient.  Quite often it's because you haven't
made enought changes yet.  :-)
