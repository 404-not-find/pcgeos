COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	Floating Keyboard Sample App
MODULE:		
FILE:		fltkbd.def

AUTHOR:		Allen Yuen, Jun 26, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AY	6/26/96   	Initial revision


DESCRIPTION:
	Sample app to demonstrate how to implement a floating keyboard outside
	of the UI.
		
	$Id: fltkbd.def,v 1.1 97/04/04 16:35:39 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

FltKbdProcessClass	class	GenProcessClass

MSG_FKP_PROCESS_BUTTON_PRESS	message
MSG_FKP_SET_CHAR_GROUP	message

FltKbdProcessClass	endc

FltKbdApplicationClass	class	FloatingKbdAppClass
FltKbdApplicationClass	endc

FltKbdContentClass	class	VisContentClass
FltKbdContentClass	endc

FltKbdTextClass		class	GenTextClass
FltKbdTextClass		endc


;
; Range of keys to display
;

SBCS <	FIRST_KEY_A	equ	C_SPACE		>
SBCS <	LAST_KEY_A	equ	C_CARON		>
SBCS <	FIRST_KEY_B	equ	C_SPACE		>
SBCS <	LAST_KEY_B	equ	C_CARON		>
SBCS <	FIRST_KEY_C	equ	C_SPACE		>
SBCS <	LAST_KEY_C	equ	C_CARON		>
SBCS <	FIRST_KEY_D	equ	C_SPACE				>
SBCS <	LAST_KEY_D	equ	C_CARON			>

if 0
DBCS <	FIRST_KEY	equ	C_HIRAGANA_LETTER_SMALL_A		>
DBCS <	LAST_KEY	equ	C_HIRAGANA_VOICED_ITERATION_MARK	>
else
DBCS <	FIRST_KEY_A	equ	C_LATIN_CAPITAL_LETTER_A		>
DBCS <	LAST_KEY_A	equ	C_LATIN_SMALL_LETTER_Z 	>
DBCS <	FIRST_KEY_B	equ	C_HIRAGANA_LETTER_SMALL_A		>
DBCS <	LAST_KEY_B	equ	C_HIRAGANA_LETTER_VU >
DBCS <	FIRST_KEY_C	equ	C_KATAKANA_LETTER_SMALL_A		>
DBCS <	LAST_KEY_C	equ	C_KATAKANA_LETTER_SMALL_KE >
DBCS <	FIRST_KEY_D	equ	C_SPACE				>
DBCS <	LAST_KEY_D	equ	C_COMMERCIAL_AT			>
endif
;
; Keyboard geometry constants
;
KEY_WIDTH		equ	22
KEY_HEIGHT		equ	17

HORIZ_MARGIN		equ	3
VERT_MARGIN		equ	6

NUM_KEYS_PER_ROW	equ	15
NUM_ROWS		equ	((LAST_KEY_A - FIRST_KEY_A) / NUM_KEYS_PER_ROW + 1)

.assert	(LAST_KEY_A - FIRST_KEY_A + 1 ge NUM_KEYS_PER_ROW)
KEYBOARD_WIDTH	equ	(NUM_KEYS_PER_ROW * KEY_WIDTH + HORIZ_MARGIN * 2)
KEYBOARD_HEIGHT	equ	( NUM_ROWS * KEY_HEIGHT + VERT_MARGIN * 2)



;
; Other constants
;
KEY_INVERT_DURATION	equ	10	; # ticks to invert the key


CharGroup etype word

GROUP_A	enum CharGroup
GROUP_B enum CharGroup
GROUP_C enum CharGroup
GROUP_D enum CharGroup

