/*
 * Project:	PC/GEOS
 * Module:	SubUI
 * File:	subui.ui
 *
 * Author:	Eric E. Del Sesto, June 10, 1991
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * Revision History:
 *	Name	Date		Description
 *	----	----		-----------
 *	eds     06/10/91        Initial revision.
 *
 * IMPORTANT:
 *	This example is written for the PC/GEOS V1.0 API. For the V2.0 API,
 *	we have new ObjectAssembly and Object-C versions.
 *
 * RCS STAMP:
 *	$Id: subui.ui,v 1.1 97/04/04 16:32:52 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/* ----------------------------------------------------------------------------
	Class Definitions
-----------------------------------------------------------------------------*/
/* This class definition is necessary so that the UI compiler (UIC) knows that
 * MyTriggerClass is a subclass of GenTriggerClass, and that we have defined
 * some instance data for the MyTriggerClass class level. This is only
 * necessary if we will be listing instances of the MyTriggerClass for UIC
 * to parse. Otherwise, the class definition in subui.def would suffice.
 * NOTE: if you do specify a class definition for UIC, make sure that
 * it matches the definition you supply to ESP in the .asm file. For V2.0,
 * UIC and ESP will be merged, and only one copy of the class definition
 * will be necessary.
 *
 * Note that UIC does not require that you include the suffix "Class"
 * on class names. */

class	MyTrigger = GenTrigger	{

	/* instance data for this class: */

	altMoniker = visMonikerComp;
					/* this field holds the chunk handle
					 * of the alternate moniker to display
					 * in this trigger. */
}


/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The subui.gp file contains "appobj" statement which indicates
 * that this "SubUIApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

SubUIApp = GenApplication {
	moniker = list { SubUITextMoniker }
					/* this title will appear at the top
					 * of the window. */

	children = SubUIPrimary;	/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = SubUIPrimary;
					/* The main window should appear
					 * on-screen when the application
					 * is launched. */
}

visMoniker SubUITextMoniker = "Subclassed UI Object Example";

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

SubUIPrimary = GenPrimary {
	children = Trigger1, Trigger2, Trigger3;
					/* pointer to the children objects */

	hints = {
		ATTR_GEN_DISPLAY_NOT_MINIMIZABLE
	}
}

end Interface;


/*-----------------------------------------------------------------------------
	TriggerN objects
-----------------------------------------------------------------------------*/

start Interface;

/* Here we define an instance of our "MyTriggerClass" class (see above).
 * In doing so, we have to make sure that we specify the instance data
 * fields for both MyTriggerClass and its superclass, GenTriggerClass. */

Trigger1 = MyTrigger {

	/* GenTriggerClass instance data */

		moniker = "Click on this button";

		action = MSG_MY_TRIGGER_ACTIVATE, Trigger1;

	/* GenTriggerClass instance data */

		altMoniker = "now!";
}

Trigger2 = MyTrigger {
	moniker = "Press on this button";
	action = MSG_MY_TRIGGER_ACTIVATE, Trigger2;

	altMoniker = "later!";
}

Trigger3 = MyTrigger {
	moniker = "Never press this button...";
	action = MSG_MY_TRIGGER_ACTIVATE, Trigger3;

	altMoniker = "I warned you!";
}

end Interface;
