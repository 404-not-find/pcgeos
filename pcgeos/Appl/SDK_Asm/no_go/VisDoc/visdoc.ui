/*
 * Project:	PC/GEOS
 * Module:	VisDoc
 * File:	visdoc.ui
 *
 * Author:	Eric E. Del Sesto, June 20, 1991
 *
 *	This file contains the user Interface description for this
 * application. This file is written in a language called ESPIRE, which is
 * compiled by the UIC compiler. See Spec/User/uic.doc for info.
 *
 * Revision History:
 *	Name	Date		Description
 *	----	----		-----------
 *	eeds    06/20/91        Initial revision.
 *
 * IMPORTANT:
 *	This example is written for the PC/GEOS V1.0 API. For the V2.0 API,
 *	we have new ObjectAssembly and Object-C versions.
 *
 * RCS STAMP:
 *	$Id: visdoc.ui,v 1.1 97/04/04 16:35:07 newdeal Exp $
 *
 */

/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/

/* first, read pre-defined class definitions. See the file
 * /staff/pcgeos/Include/generic.uih. */

#include "generic.uih"

/* ----------------------------------------------------------------------------
	Class Definitions
-----------------------------------------------------------------------------*/
/* This class definition is necessary so that the UI compiler (UIC) knows that
 * MyVisSquareClass is a subclass of VisClass, and that we have defined
 * some instance data for the MyVisSquareClass class level. This is only
 * necessary if we will be listing instances of the MyVisSquareClass for UIC
 * to parse. Otherwise, the class definition in visdoc.def would suffice.
 *
 * NOTE: if you do specify a class definition for UIC, make sure that
 * it matches the definition you supply to ESP in the .asm file. For V2.0,
 * UIC and ESP will be merged, and only one copy of the class definition
 * will be necessary.
 *
 * Note that UIC does not require that you include the suffix "Class"
 * on class names. */

class	MyVisSquare = Vis {
	graphicsState	= hptrComp : null;	/* see visdoc.asm for defs. */
	newXPosition	= wordComp : 0;
	newYPosition	= wordComp : 0;
	xOffset		= wordComp : 0;
	yOffset		= wordComp : 0;
}


/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
/* The very top-level generic object of an application MUST be a GenApplication
 * object. The visdoc.gp file contains "appobj" statement which indicates
 * that this "VisDocApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.*/

start	AppResource;

VisDocApp = GenApplication {
	/* The geoManager uses this token information to store this
	 * application's icon in a database. */

					 /* refer to this application in the
					 * token database. */

					/* manufacturer ID number. Also used
					 * for accessing database, to ensure
					 * uniqueness. */

	children = VisDocPrimary;	/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = VisDocPrimary;
					/* The main window should appear
					 * on-screen when the application
					 * is launched. */
}

end	AppResource;


/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

VisDocPrimary = GenPrimary {
	moniker = "VisDoc Sample Application";
					/* this title will appear at the top
					 * of the window. */

	children = VisDocView;		/* this window has one child: the
					   GenView object (see below) */


	hints = {
	    /* At present, we are not supplying the icon image for this
	     * application, (just the text moniker given above), so we want
	     * to prevent the user from minimizing this window. */

	    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE

	    }
}

end Interface;


/*-----------------------------------------------------------------------------
	GenView object
-----------------------------------------------------------------------------*/

start Interface;

/* This GenView object creates a window where the application can display
 * portions of the document as necessary. As we want this window to be
 * scrollable, the specific UI (Motif) will create scroll bars which the
 * user can interact with. Whenever a portion of the window needs to be
 * redrawn, the GenView object will invalidate a portion of the window,
 * causing a METHOD_EXPOSED to be sent to the VisContent object,
 * which will send forward METHOD_DRAW onwards to each child in the visible
 * tree structure that is the contents of the document.
 *
 * Note that mouse events are handled in a similar fashion: the GenView
 * object will forward them onto the VisContent. The VisContent
 * will determine which (if any) of its children are underneath the mouse,
 * and it will pass the mouse events on to that object. */

VisDocView = GenView {
	/* indicate that the contents of this view (i.e. the document) will
	 * not be updated by the UI thread. Rather, the VisContent
	 * object will handle updates when it receives a METHOD_EXPOSED. */

	viewAttributes = default

		+dontSendKbdReleases,	/* An optimization to prevent keyboard
					 * key release events from being sent
					 * on to the content object. */

		+dragScrolling;	/* If the user presses select and drags
					 * out of the GenView area, the GenView
					 * will scroll the document to follow.*/

	/* size of document, in points (72 points per inch). The GenView object
	 * will either adopt a default size, or will size itself to fit
	 * inside the GenPrimary window. */

	docRight = "DOCUMENT_WIDTH";  /* width in points */
	docBottom  = "DOCUMENT_HEIGHT"; /* height in points */

	/* By default, the maximum size for this GenView will be the size of
	 * the content object. So even though the GenPrimary may be stretched
	 * larger, the GenView will not get any larger than the content.
	 *
	 * If you would prefer that the GenView size itself according to
	 * the size of the GenPrimary, set the "noMaxSize" flags in
	 * horizAttributes and vertAttributes. */

	horizAttributes = scrollable;	/* make view scrollable in X */
	vertAttributes  = scrollable;	/* make view scrollable in Y */

	/* when the contents of this view (i.e. the document) must be updated,
	 * the UI should send a METHOD_EXPOSED to the VisDocVisContent
	 * object.*/

	output = VisDocVisContent;
}

end Interface;


/*-----------------------------------------------------------------------------
	VisDocVisContent object, and kids
-----------------------------------------------------------------------------*/
/* This object lies at the top of the tree structure of Vis objects that
 * represents our document page. You must have a VisContent at the top
 * of this visible tree, and it must be connected to a GenView object,
 * which must lie in another resource. This allows the UI thread to run
 * the GenView object, while the application thread runs the VisContent
 * object.
 *
 * It is important to note that at this level, we have disabled the geometry
 * manager. It will be up to the application to manage the positioning
 * and sizing of each Vis object on the document. We've simplified this
 * somewhat by starting the document with two default objects which are
 * listed below. Of course, the application can instantiate and add
 * Vis objects to this document at any time.
 *
 * Debugging tip: in swat, type:
 *		sym-default visdoc
 *		vistree *VisDocVisContent
 * ...to see the visible tree structure for this page.
 */

start AppThreadVisObjectResource;

VisDocVisContent = VisContent {
	view = VisDocView;		/* the OD of our GenView object. */

	/* We must set the size of this Content, by setting the following
	 * coordinates. */

	left	= 0;
	top	= 0;
	right	= "DOCUMENT_WIDTH-1";
	bottom	= "DOCUMENT_HEIGHT-1";

	/* This VisContent object has two children objects. */

	children = SampleMyVisSquare1, SampleMyVisSquare2;

	/* Just for kicks, demo how we can specify where the focus should
	 * initially start out */
	focusExcl = SampleMyVisSquare1;
}



/* The first of two kids of the VisContent. */

SampleMyVisSquare1 = MyVisSquare {

	/* Here we set the coordinates of this object. */

	left	= 20;
	top	= 20;
	right	= 59;
	bottom	= 59;
}


/* The second of two kids of the VisContent. */

SampleMyVisSquare2 = MyVisSquare {

	/* Here we set the coordinates of this object. */

	left	= 220;
	top	=  30;
	right	= 259;
	bottom	=  69;
}

end AppThreadVisObjectResource;
