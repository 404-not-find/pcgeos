/***********************************************************************
 *
 *	Copyright (c) New Deal 1998 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailRead.goc
 *
 * AUTHOR:  	  Gene Anderson: 12/12/98
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	12/12/98   gene	    Initial version
 *
 * DESCRIPTION:
 *	MailReaderClass for the Mail application
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"
@include <Objects/vLTextC.goh>    /* VisLargeText definitions */

@classdecl MailReaderClass;

#ifdef __BORLANDC__
#pragma codeseg ReadCode
#endif


/**************************************************************
 *          
 * FUNCTION:        ReadHeader
 * DESCRIPTION:     read a header from the file and append it to the text
 *
 * PASS:            hdrHan - handle of headers
 *                  findHeader - optr of header to find (e.g., "FROM")
 *                  dispHeader - optr of header to display (e.g., "From: ")
 *                  textObj - optr of text object to append to
 * RETURN:          non-zero for error/not found
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/12/98    Initial Revision
 ***************************************************************/

TCHAR rhCR[] = "\r";
TCHAR rhTab[] = "\t";

void
ReadFormatHeader(TCHAR *hdrText, optr dispHeader, optr textObj)
{
@ifdef PRETTY_MAIL_HEADERS
     /*
      * add a tab so our anchored tab does something
      */
     @call textObj::MSG_VIS_TEXT_APPEND_PTR(rhTab, 0);
@endif
     /*
      * add the header text in bold text
      */
     @call textObj::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0, 0, TS_BOLD,
						0,
						VIS_TEXT_RANGE_SELECTION);
     @call textObj::MSG_VIS_TEXT_APPEND_OPTR(dispHeader, 0);
     /*
      * add the contents in plain text
      */
     @call textObj::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0, TS_BOLD, 0,
						0,
						VIS_TEXT_RANGE_SELECTION);
     @call textObj::MSG_VIS_TEXT_APPEND_PTR(hdrText, 0);
     @call textObj::MSG_VIS_TEXT_APPEND_PTR(rhCR, 0);
}

word
ReadHeader(MemHandle hdrHan, optr findHeader, optr dispHeader, optr textObj)
{
        MemHandle mh;
	TCHAR *hdrText;

        LockStrings();

	/*
	 * get the header
	 */
        mh = MailGetHeader(hdrHan, LMemDeref(findHeader));
	if (!mh) {
	    UnlockStrings();
	    return(-1);
	}
	hdrText = MemLock(mh);
	ReadFormatHeader(hdrText, dispHeader, textObj);
	MemFree(mh);
	UnlockStrings();

	return(0);
}



/**************************************************************
 *          
 * FUNCTION:        ReadDateHeader
 * DESCRIPTION:     read date header from the file and append it to the text
 *
 * PASS:            hdrHan - handle of headers
 *                  textObj - optr of text object to append to
 * RETURN:          non-zero for error/not found
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/12/98    Initial Revision
 ***************************************************************/

word
ReadDateHeader(MemHandle hdrHan, optr textObj)
{
    MemHandle mh;
    MailTime mt;
    word i;
    TCHAR *hdrText;

    LockStrings();
    /*
     * get the date header if it exists
     */
    mh = MailGetHeader(hdrHan, LMemDeref(@dateFieldName));
    if (!mh) {
	UnlockStrings();
	return(-1);
    }
    hdrText = MemLock(mh);
    /*
     * parse it if possible and reformat it in the user's desired format
     */
    if (ParseDateTimeWithTimezone(hdrText, &mt) == -1) {
	LocalFormatDateTime(hdrText, DTF_LONG_CONDENSED, &mt);
	strcat(hdrText, " ");
	i = strlen(hdrText);
	LocalFormatDateTime(hdrText+i, DTF_HMS, &mt);
	i = strlen(hdrText);
	FormatTimezoneStr(hdrText+i, mt.MT_timezone);
    }

    ReadFormatHeader(hdrText, @dateFieldStr, textObj);

    MemFree(mh);
    UnlockStrings();
    return(0);
}


/**************************************************************
 *          
 * FUNCTION:        MSG_MAIL_READER_READ_MESSAGE
 * DESCRIPTION:     read the specified message
 *
 * PASS:            fileName - handle of block w/ file name
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/12/98    Initial Revision
 ***************************************************************/

#define MAX_SUBJECT_DISP_LEN  35

@method MailReaderClass, MSG_MAIL_READER_READ_MESSAGE
{
        FileHandle fileHan;
        MemHandle mh, hdrHan;
	char *mhb;
	TCHAR buf[MAX_SUBJECT_DISP_LEN + DATE_TIME_BUFFER_SIZE];
	word nb;

	EC ( ECCheckMemHandle(fileName) );
	fileHan = OpenMessageFile(fileName);
	if (!fileHan) {
	    ReportError(@unableToOpenMessageErr, NULL);
	    return;
	}
	@call ReadBodyText::MSG_META_SUSPEND();

	hdrHan = MailReadHeaders(fileHan);


	/*
	 * if not already, mark the message as read
	 */
	LockStrings();
	mh = MailGetHeader(hdrHan, LMemDeref(@xreadFieldName));
	if (!mh) {
	    /*
	     * add X-Read: header
	     */
	    nb = strlen(LMemDeref(@xreadFieldOut));
	    MailFileInsertSpace(fileHan, nb);
	    FilePos(fileHan, 0, FILE_POS_START);
	    FileWrite(fileHan, LMemDeref(@xreadFieldOut), nb, FALSE);
	    /*
	     * rebuild the message list to show the new icon
	     */
	    @send, forceQueue TheMessageList::MSG_MAIL_LIST_RESCAN();
	} else {
	    MemFree(mh);
	}
	UnlockStrings();
	/*
	 * read the headers and body
	 */
	@call ReadBodyText::MSG_MAIL_LARGE_TEXT_READ_MESSAGE(hdrHan, fileHan);
	/*
	 * set the selection to the message start so the user
	 * sees the beginning first
	 */
	@call ReadBodyText::MSG_VIS_TEXT_SELECT_START();

	/*
	 * handle any attachments
	 */
	@call ReadAttachList::MSG_ATTACH_LIST_READ_ATTACHMENTS(fileHan);

	/*
	 * set the window moniker
	 */
	LockStrings();
	mh = MailGetHeader(hdrHan, LMemDeref(@subjectFieldName));
	if (mh) {
	    mhb = MemLock(mh);
	    /*
	     * truncate long subjects
	     */
	    if (strlen(mhb) > MAX_SUBJECT_DISP_LEN) {
		mhb[MAX_SUBJECT_DISP_LEN-1] = C_ELLIPSIS;
		mhb[MAX_SUBJECT_DISP_LEN] = 0;
	    }
	    sprintf(buf, LMemDeref(@messTitleMkr), mhb);
	    @call oself::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buf, VUM_NOW);
	    MemFree(mh);
	} else {
	    @call oself::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
						LMemDeref(@messTitleNoSubjMkr),
	                                        VUM_NOW);
	}
	UnlockStrings();
	MemFree(hdrHan);

	/*
	 * close the file
	 */
	FileClose(fileHan, FALSE);

	/*
	 * bring ourselves on screen
	 */
	@call ReadBodyText::MSG_META_UNSUSPEND();
	@call oself::MSG_MAIL_PRIMARY_OPEN();
}


/**************************************************************
 *          
 * FUNCTION:        MSG_MAIL_READER_DELETE_MESSAGE
 * DESCRIPTION:     throw away the current message or recover from Trash
 *
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/12/98    Initial Revision
 ***************************************************************/
@method MailReaderClass, MSG_MAIL_READER_DELETE_MESSAGE,
                         MSG_MAIL_READER_RECOVER_MESSAGE
{
        word selection, numItems;

	/* only delete/recover message being read */
	selection = @call TheMessageList::MSG_MAIL_LIST_GET_LAST_SELECTION();
	@call TheMessageList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection, 0);

@ifdef DELETE_READS_NEXT
	@call ReadBodyText::MSG_META_SUSPEND();
	(void)ObjVarAddData(oself, TEMP_MAIL_READER_KEEP_OPEN, 0);
@endif

        /*
	 * close the window
	 */
        @call oself::MSG_GEN_DISPLAY_CLOSE();
	/*
	 * throw away/recover the message
	 */
	if (message == MSG_MAIL_READER_DELETE_MESSAGE) {
	    @call TheMessageList::MSG_MAIL_LIST_DELETE_MESSAGE();
	} else {
	    @call TheMessageList::MSG_MAIL_LIST_RECOVER_MESSAGE();
	}

	/* select next item (or keep at last item) after deletion/recover */
	numItems = @call TheMessageList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS();
	if (numItems) {
	    if (selection >= numItems) {
		selection = numItems-1;
	    }
	    @call TheMessageList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection, 0);
	}

@ifdef DELETE_READS_NEXT
	(void)ObjVarDeleteData(oself, TEMP_MAIL_READER_KEEP_OPEN);
	if (numItems) {
	    /* read next one (using update current selection) */
	    @call TheMessageList::MSG_MAIL_LIST_READ_MESSAGE();
	} else {
	    /* no items left, close mail read window */
	    @call oself::MSG_GEN_DISPLAY_CLOSE();
	}
	@call ReadBodyText::MSG_META_UNSUSPEND();
@endif
}

@ifdef DELETE_READS_NEXT  /* only needed for this case */
@method MailReaderClass, MSG_GEN_DISPLAY_CLOSE
{
    /* ignore if told to */
    if (ObjVarFindData(oself, TEMP_MAIL_READER_KEEP_OPEN) == NULL) {
	@callsuper();
    }
}
@endif
