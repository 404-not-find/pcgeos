/***********************************************************************
 *
 *	Copyright (c) New Deal 1998 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailSearch.goc
 *
 * AUTHOR:  	  Gene Anderson: 1/14/99
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/14/99   gene	    Initial version
 *
 * DESCRIPTION:
 *	MailSearchClass for the Mail application
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"
#include <sem.h>

@classdecl MailSearchClass;
@classdecl MailSearcherClass;



/**************************************************************
 *      
 * FUNCTION:        OpenMsgFromIndex
 * PASS:            folderNum - folder number (MailFolderID)
 *                  msgNum  - message number in folder
 * RETURN:          file handle (0 if error)
 * DESCRIPTION:
 *         open the specified message file
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      8/17/99     Initial Revision
 ***************************************************************/
#define MAX_STATUS_STR_BUF FILE_LONGNAME_BUFFER_SIZE+10*sizeof(TCHAR)

MemHandle
GetMsgFromIndex(MailFolderID folderNum, word msgNum)
{
    VMBlockHandle vmbh;
    VMFileHandle vmf;
    optr indexArray;
    Boolean inUse;
    MessageIndexStruct *mis;
    MessageListStruct *mls;
    word elSize, numMsgs;
    MemHandle mh, sh;
    TCHAR *folderName, *buf;

    /*
     * go to the correct directory
     */
    mh = @call TheFolderList::MSG_FOLDER_LIST_GET_FOLDER_NAME(folderNum);
    folderName = MemLock(mh);
    GotoMailDirectory(folderName);
    /*
     * update the status
     */
    numMsgs = @call TheFolderList::MSG_FOLDER_LIST_GET_NUM_MESSAGES(folderNum);
    sh = MemAlloc(MAX_STATUS_STR_BUF, HF_SWAPABLE | HF_SHARABLE, 
			    HAF_LOCK | HAF_NO_ERR);
    buf = MemDeref(sh);
    sprintf(buf, "%s (%d/%d)", folderName, msgNum+1, numMsgs);
    MemFree(mh);
    @call SearchStatusText::MSG_VIS_TEXT_REPLACE_ALL_PTR(buf, 0);
    /*
     * get the message list and index arrays
     */
    inUse = GetMessageArrays(folderNum, &vmf, &vmbh, &indexArray);
    /*
     * get the correct index element
     */
    mis = ChunkArrayElementToPtr(indexArray, msgNum, &elSize);
    /*
     * get the corresponding list element
     */
    HugeArrayLock(vmf, vmbh, mis->MIS_index, &mls, &elSize);
    /*
     * copy the filename
     */
    strcpy(buf, mls->MLS_filename);
    MemUnlock(sh);

    HugeArrayUnlock(mls);
    /*
     * Close the VMFile only if it was not in use
     */
    UnlockIndexArray(OptrToHandle(indexArray));
    if (!inUse) {
	VMClose(vmf,NULL);
    }
    ThreadReleaseThreadLock(TheMessageListLock);
    return(sh);
}

FileHandle
OpenMsgFromIndex(MailFolderID folderNum, word msgNum)
{
    FileHandle fh;
    MemHandle mh;
    TCHAR *fname;

    FilePushDir();
    mh = GetMsgFromIndex(folderNum, msgNum);
    fname = MemLock(mh);
    fh = FileOpen(fname, FILE_DENY_W | FILE_ACCESS_R);
    MemFree(mh);
    FilePopDir();
    return(fh);
}


/**************************************************************
 *      
 * FUNCTION:        MemCopyBlock
 * PASS:            origHan - handle to copy
 * RETURN:          handle of copy
 * DESCRIPTION:
 *         Copy a memory block
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/15/99     Initial Revision
 ***************************************************************/

MemHandle
MemCopyBlock(MemHandle origHan)
{
    word blkSize;
    MemHandle copyHan;
    byte *cp, *op;

    blkSize = MemGetInfo(origHan, MGIT_SIZE);
    copyHan = MemAlloc(blkSize, HF_DYNAMIC, HAF_STANDARD|HAF_NO_ERR);
    op = MemLock(origHan);
    cp = MemLock(copyHan);
    memcpy(cp, op, blkSize);
    MemUnlock(copyHan);
    MemUnlock(origHan);
    return(copyHan);
}


/**************************************************************
 *      
 * FUNCTION:        CmpSearchBlocks
 * PASS:            block1 - handle of 1st block
 *                  block2 - handle of 2nd block
 * RETURN:          <0, 0, or >0
 * DESCRIPTION:
 *         
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/15/99     Initial Revision
 ***************************************************************/

sword
CmpSearchBlocks(MemHandle block1, MemHandle block2)
{
    sword result;
    byte *p1, *p2;

    p1 = MemLock(block1);
    p2 = MemLock(block2);
    result = memcmp(p1, p2, sizeof(SearchReplaceStruct));
    if (!result) {
	result = strcmp((TCHAR *) (p1+sizeof(SearchReplaceStruct)),
			(TCHAR *) (p2+sizeof(SearchReplaceStruct)));
    }
    MemUnlock(block2);
    MemUnlock(block1);
    return(result);
}


/**************************************************************
 *      
 * FUNCTION:        MSG_SEARCH
 * PASS:            searchInfo - handle of SearchReplaceStruct
 * RETURN:          none
 * DESCRIPTION:
 *         Search a message
 *
 *         NOTE: ideally we would use MSG_META_GET_OBJECT_FOR_SEARCH_SPELL,
 *         but the text object gets confused because we use the same object
 *         for searching different messages.
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/15/99     Initial Revision
 ***************************************************************/

@method MailSearcherClass, MSG_SEARCH
{
    SearchReplaceStruct *srsp;
    SearchFromOffsetReturnStruct retStruct, *rs;
    word flagsP;
    dword pointerP;
    MemHandle sh, mh;
    Boolean found = FALSE, atEnd = FALSE;

    @call oself::MSG_MAIL_SEARCHER_INIT_FOR_SEARCH();
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_BUSY();
    @call SearchStatusText::MSG_GEN_SET_ENABLED(VUM_NOW);
    @call SearchStop::MSG_GEN_SET_ENABLED(VUM_NOW);
    @call FindAgainTrigger::MSG_GEN_SET_ENABLED(VUM_DLYD);

    while (!found && !atEnd && !(@call MailSearchControl::MSG_MAIL_SEARCH_SHOULD_STOP())) {
	/*
	 * make a copy of the block because MSG_SEARCH will free it
	 */
	sh = MemCopyBlock(searchInfo);
	/*
	 * Screw around because the GOC definition for
	 * MSG_VIS_TEXT_SEARCH_FROM_OFFSET is messed up.
	 * The flags should be a byte, but in GOC are a word.
	 */
	rs = &retStruct;
	pointerP = (dword) rs;
	flagsP = (pointerP & 0x000000ff) << 8;
	pointerP = pointerP >> 8;
	@call PrintTextObject::MSG_VIS_TEXT_SEARCH_FROM_OFFSET((SearchFromOffsetReturnStruct *)pointerP,
							  flagsP,
							  pself->MSI_curOffset,
							  0,
							  @PrintTextObject,
							  sh);
	if (retStruct.SFORS_object) {
	    /*
	     * match found: get the search window out of the way and
	     * display what we found
	     */
	    @call MailSearchControl::MSG_GEN_INTERACTION_ACTIVATE_COMMAND(IC_DISMISS);
	    found = TRUE;
	    /*
	     * load the text into the correct text object
	     */
	    @call TheFolderList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(pself->MSI_curFolder, FALSE);
	    @call TheFolderList::MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(0);
	    @call TheMessageList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(pself->MSI_curMessage, FALSE);
	    mh = GetMsgFromIndex(pself->MSI_curFolder, pself->MSI_curMessage);
	    @call ReadMailWin::MSG_MAIL_READER_READ_MESSAGE(mh);
	    /*
	     * select what we found
	     */
	    @call ReadBodyText::MSG_VIS_TEXT_SELECT_RANGE(retStruct.SFORS_offset+retStruct.SFORS_len, retStruct.SFORS_offset);
	    pself->MSI_curOffset = retStruct.SFORS_offset+retStruct.SFORS_len;
	    /*
	     * make sure the read mail window is on screen
	     */
	    @call ReadMailWin::MSG_MAIL_PRIMARY_OPEN();
	    break;
	} else {
	    /*
	     * no match; go to next message
	     */
	    pself->MSI_curOffset = 0;
	    atEnd = !@call oself::MSG_MAIL_SEARCHER_GET_NEXT_MESSAGE();
	    /*
	     * we've switched messages, so make sure the search control is on
	     * screen to show our progress
	     */
	    @call MailSearchControl::MSG_GEN_INTERACTION_INITIATE();
	}
    }
    if (atEnd) {
	srsp = MemLock(searchInfo);
	ReportOK(@noMoreFoundStr, (TCHAR *)srsp+sizeof(SearchReplaceStruct));
	MemUnlock(searchInfo);
    }
    @call MailAppObj::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
    @call SearchStatusText::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
    @call SearchStop::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MAIL_SEARCHER_GET_NEXT_MESSAGE
 * PASS:            none
 * RETURN:          FALSE - no next message, i.e., wrapped
 * DESCRIPTION:
 *         get the next message for searching
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/15/99     Initial Revision
 ***************************************************************/

@method MailSearcherClass, MSG_MAIL_SEARCHER_GET_NEXT_MESSAGE
{
    word numMsgs, numFolders;
@ifdef CUI_SUPPORT
    UIInterfaceLevel userLevel;
    userLevel = @call MailAppObj::MSG_MAIL_APP_GET_USER_LEVEL();
@endif

    numFolders = @call TheFolderList::MSG_FOLDER_LIST_GET_NUM_FOLDERS();
    /*
     * go to the next message in the folder
     */
    numMsgs = @call TheFolderList::MSG_FOLDER_LIST_GET_NUM_MESSAGES(pself->MSI_curFolder);
    pself->MSI_curMessage++;
    while (pself->MSI_curMessage >= numMsgs) {
	pself->MSI_curMessage = 0;
	/*
	 * if in CUI, don't change folders
	 */
@ifdef CUI_SUPPORT
	if (userLevel > UIIL_BEGINNING) {
@endif
	    /*
	     * go to the next folder
	     */
	    pself->MSI_curFolder++;
@ifdef CUI_SUPPORT
	}
@endif
	/*
	 * see if we've wrapped around, and we started on an empty folder
	 */
	if (pself->MSI_curFolder == pself->MSI_startFolder && pself->MSI_startMessage == GIGS_NONE) {
	    return(FALSE);
	}
@ifdef CUI_SUPPORT
	if (userLevel > UIIL_BEGINNING) {
@endif
	    if (pself->MSI_curFolder >= numFolders) {
		pself->MSI_curFolder = 0;
	    }
@ifdef CUI_SUPPORT
	}
@endif
	numMsgs = @call TheFolderList::MSG_FOLDER_LIST_GET_NUM_MESSAGES(pself->MSI_curFolder);
    }
    /*
     * if wrapped, say no more
     */
    if (pself->MSI_curFolder == pself->MSI_startFolder && pself->MSI_curMessage == pself->MSI_startMessage) {
	return(FALSE);
    }
    /*
     * load the PrintTextObject with the message
     */
    pself->MSI_curOffset = 0;
    return(@call oself::MSG_MAIL_SEARCHER_LOAD_TEXT(@PrintTextObject));
}



/**************************************************************
 *      
 * FUNCTION:        MSG_MAIL_SEARCH_AGAIN
 * PASS:            none
 * RETURN:          none
 * DESCRIPTION:
 *         Search a message
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      1/18/99     Initial Revision
 ***************************************************************/

@method MailSearchClass, MSG_SEARCH
{
    /*
     * See if there's any old search
     * reset the offset for a new search
     */
    if (pself->MSI_searchInfo) {
	if (CmpSearchBlocks(searchInfo, pself->MSI_searchInfo)) {
	    @send SearchObj::MSG_MAIL_SEARCHER_RESET_SEARCH_OFFSET();
	}
	MemFree(pself->MSI_searchInfo);
    } else {
	@send SearchObj::MSG_MAIL_SEARCHER_RESET_SEARCH_OFFSET();
    }
    /*
     * save the new search info
     */
    pself->MSI_searchInfo = searchInfo;

    pself->MSI_stop = FALSE;
    @send SearchObj::MSG_SEARCH(searchInfo);
}

@method MailSearchClass, MSG_MAIL_SEARCH_AGAIN
{
    pself->MSI_stop = FALSE;
    @send SearchObj::MSG_SEARCH(pself->MSI_searchInfo);
}

@method MailSearchClass, MSG_MAIL_SEARCH_STOP
{
    pself->MSI_stop = TRUE;
    @call SearchStop::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
}

@method MailSearchClass, MSG_MAIL_SEARCH_SHOULD_STOP
{
    return(pself->MSI_stop);
}



/**************************************************************
 *      
 * FUNCTION:        MSG_MAIL_SEARCHER_LOAD_TEXT
 * PASS:            textObj - text object to load text into
 * RETURN:          FALSE - unable to load message
 * DESCRIPTION:
 *         load the specified text object with the current message
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      8/18/99     Initial Revision
 ***************************************************************/

@method MailSearcherClass, MSG_MAIL_SEARCHER_LOAD_TEXT
{
    FileHandle fh;
    MemHandle hdrHan;

    if (pself->MSI_curFolder == GIGS_NONE || pself->MSI_curMessage == GIGS_NONE) {
	return(FALSE);
    }
    fh = OpenMsgFromIndex(pself->MSI_curFolder, pself->MSI_curMessage);
    if (fh) {
	@call textObj::MSG_META_SUSPEND();
	hdrHan = MailReadHeaders(fh);
	@call textObj::MSG_MAIL_LARGE_TEXT_READ_MESSAGE(hdrHan, fh);
	@call textObj::MSG_META_UNSUSPEND();
	MemFree(hdrHan);
	FileClose(fh, FALSE);
    } else {
	/*
	 * if we can't get the file, stop searching
	 */
	return(FALSE);
    }
    return(TRUE);
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MAIL_SEARCHER_INIT_FOR_SEARCH
 * PASS:            none
 * RETURN:          FALSE - unable to load text
 * DESCRIPTION:
 *         initialize for a search
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      8/18/99     Initial Revision
 ***************************************************************/

@method MailSearcherClass, MSG_MAIL_SEARCHER_INIT_FOR_SEARCH
{
    word i;

    /*
     * initialize for search
     */
    i = @call TheFolderList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    pself->MSI_curFolder = i;
    pself->MSI_startFolder = i;
    i = @call TheMessageList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    pself->MSI_curMessage = i;
    pself->MSI_startMessage = i;
    if (!@call oself::MSG_MAIL_SEARCHER_LOAD_TEXT(@PrintTextObject)) {
	if (!@call oself::MSG_MAIL_SEARCHER_GET_NEXT_MESSAGE()) {
	    return(FALSE);
	}
    }
    return(TRUE);
}


/**************************************************************
 *      
 * FUNCTION:        MSG_MAIL_SEARCHER_RESET_SEARCH_OFFSET
 * PASS:            none
 * RETURN:          none
 * DESCRIPTION:
 *         reset the search offset
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      9/28/99     Initial Revision
 ***************************************************************/

@method MailSearcherClass, MSG_MAIL_SEARCHER_RESET_SEARCH_OFFSET
{
    pself->MSI_curOffset = 0;
}
