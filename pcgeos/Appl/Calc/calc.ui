/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1990 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  calc.ui
 * FILE:	  calc.ui
 *
 * AUTHOR:  	  Adam de Boor: Mar 13, 1990
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	3/13/90	  ardeb	    Initial version
 *
 * DESCRIPTION:
 *	User-interface specification for the Calculator desk-accessory
 *
 *
 * 	$Id: calc.ui,v 1.1 97/04/04 14:46:49 newdeal Exp $
 *
 ***********************************************************************/

#include	"generic.uih"

#include	"Calculator/mkrCalculator.ui"

/* THESE MUST MATCH THE VALUES IN calc.def */
#define GCM_BUTTON_WIDTH	60 /* 45 */
#define GCM_BUTTON_HEIGHT	30 /* 25 */
#define GCM_BUTTON_FONT		FONT_URW_SANS
#define GCM_BUTTON_FONTSIZE	25 /* 18 */

#define GCM_S_BUTTON_WIDTH	35
#define GCM_S_BUTTON_HEIGHT	15
#define GCM_S_BUTTON_FONT	FONT_URW_SANS
#define GCM_S_BUTTON_FONTSIZE	14

#ifdef GCM
#include "../Art/GCM/mkrHelp.ui"
#define HELP_TITLE	"Help for Calculator";
#define HELP_TEXT	\
start0	label	char |\
	char	"Calculator\r" |\
end0	label	char |\
	char	"\r" |\
	char	"\r" |\
	char	"The " |\
start1	label	char |\
	char	"Calculator" |\
end1	label	char |\
	char	" appliance works like an ordinary calculator. You can add, subtract, multiply, divide, calculate percentages, and store and recall values from memory.\r" |\
	char	"\r" |\
start2	label	char |\
	char	"To perform a calculation:\r" |\
end2	label	char |\
	char	"Use the mouse to click the Calculator buttons",C_EMDASH,"or press the corresponding keys on the keyboard. You can also use the numeric keypad, if you turn Num Lock on. The display area at the top of the calculator shows the number you are entering and the results of the calculation.\r" |\
	char	"\r" |\
	char	"Click " |\
start3	label	char |\
	char	"Del" |\
end3	label	char |\
	char	" to erase the last digit of the displayed number.\r" |\
	char	"\r" |\
	char	"Click " |\
start4	label	char |\
	char	"C/CE" |\
end4	label	char |\
	char	" to clear the displayed number. Click twice to clear the entire calculation in progress.\r" |\
	char	"\r" |\
	char	"Click " |\
start5	label	char |\
	char	"STO" |\
end5	label	char |\
	char	" or press the S key to store the displayed number in memory.\r" |\
	char	"\r" |\
	char	"Click " |\
start6	label	char |\
	char	"RCL" |\
end6	label	char |\
	char	" or press the R key to use the stored number in a calculation.\r" |\
	char	"\r" |\
	char	"Click " |\
start7	label	char |\
	char	"STO+" |\
end7	label	char |\
	char	" or press the T key to add the displayed number to the number in memory.\r" |\
	char	"\r" |\
	char	"Click " |\
start8	label	char |\
	char	C_PLUSMINUS |\
end8	label	char |\
	char	" to change the sign of the displayed number.\r" |\
	char	"\r" |\
	char	"Click the " |\
start9	label	char |\
	char	"Exit" |\
end9	label	char |\
	char	" button to turn off this appliance and return to the Choose an Appliance screen.\r"

#define HELP_STYLE_RUNS	\
	HRAE(start0,Bold), \
	HRAE(end0,Plain), \
	HRAE(start1,Bold), \
	HRAE(end1,Plain), \
	HRAE(start2,Bold), \
	HRAE(end2,Plain), \
	HRAE(start3,Bold), \
	HRAE(end3,Plain), \
	HRAE(start4,Bold), \
	HRAE(end4,Plain), \
	HRAE(start5,Bold), \
	HRAE(end5,Plain), \
	HRAE(start6,Bold), \
	HRAE(end6,Plain), \
	HRAE(start7,Bold), \
	HRAE(end7,Plain), \
	HRAE(start8,Bold), \
	HRAE(end8,Plain), \
	HRAE(start9,Bold), \
	HRAE(end9,Plain)

#define HELP_STYLE_RUN_COUNT 20

#define MONIKER(str) \
    moniker = list { \
	{ \
	    cachedSize = GCM_BUTTON_WIDTH, GCM_BUTTON_HEIGHT; \
	    size = large; \
	    aspectRatio = normal; \
	    gstring {\
		GSBeginString | \
		GSSetFont GCM_BUTTON_FONT, GCM_BUTTON_FONTSIZE | \
		GSDrawTextAtCP <str> | \
		GSEndString \
	    } \
	}, \
	{ \
	    cachedSize = GCM_S_BUTTON_WIDTH, GCM_S_BUTTON_HEIGHT; \
	    size = tiny; \
	    aspectRatio = verySquished; \
	    gstring {\
		GSBeginString | \
		GSSetFont GCM_S_BUTTON_FONT, GCM_S_BUTTON_FONTSIZE | \
		GSDrawTextAtCP <str> | \
		GSEndString \
	    } \
	} \
    }
#define MNEMONIKER(mnemonic,str) MONIKER(str)
#define SPECMONIKER(profStr,gcmStr) MONIKER(gcmStr)
#define BUTTON_INTERACTION_HEIGHT	GCM_BUTTON_HEIGHT*5

#else

#define MNEMONIKER(mnemonic,str) moniker = mnemonic, #str;
#define MONIKER(str) moniker = #str;
#define SPECMONIKER(profStr,gcmStr) MONIKER(profStr)
#define BUTTON_INTERACTION_HEIGHT SpecSizeSpec <SST_NUMBER_OF_TEXT_LINES,5>

#endif

		
/******************************************************************************
 *
 *			SPECIAL OBJECT CLASSES
 *
 ******************************************************************************/
class CalcEngine = meta {
	/*
	 * Register stack is a chunk that must be defined, probably empty,
	 * though that's not required
	 */
	registers	= nptrComp : null;
	regTop		= wordComp : 0;
	/*
	 * Display is the text object that displays the top-most register on
	 * the stack. It must be defined.
	 */
	display		= optrComp : null;
	/*
	 * If non-null, paperTape will have each operation appended to it in
	 * the manner of a printing calculator's paper tape.
	 */
	paperTape	= optrComp : null;
	/*
	 * opStack must be defined as an empty chunk if the INFIX_OP method
	 * is to be sent to the engine. It is used in infix mode to hold the
	 * stack of pending operators of lower precedence.
	 */
	opStack		= nptrComp : null;
	opTop		= wordComp : 0;
	/*
	 * Memory is the single storage cell provided by the calculator.
	 */
	memory 		= typeComp "DDFixed" : "0,0";
        /*
	 * Fields not to be initialized.
	 */
	static /* lastOperand */ typeComp "DDFixed" : "";
	static /* lastOpcode */  wordComp : 0;
	static /* flags */ byteComp : "0";
}

class CalcDisplay = GenTextEdit, master {
	engine		= optrComp : null;
	static /* CE_clearDisplay */ byteComp : BB_TRUE;
	shortcuts	= nptrComp : null;
	precision	= wordComp : CD_DEFAULT_PRECISION;
	static /* resetCount */ byteComp : 2;

	/*
	 * Altered defaults appropriate to what we're displaying.
	 */
	default paraAttrRuns 	= DEF_PARA_ATTR_RIGHT
	default maxLength	= MAX_NUM_LENGTH;
	default storage		= defaultParaAttr;
	default genFont		= noGenMapping;
	default textDisplayAttributes = 
		selectable, singleLineText, noWordWrapping,
		useTabForNavigation, notifyAttrChange;
	default genAttributes = 
		default +targetable;
}

class CalcDataTrigger = GenTrigger, master {
	extraAccelerator1 = kbdAcceleratorComp;
	extraAccelerator2 = kbdAcceleratorComp;
}

class CalcBogusInteraction = GenInteraction, master {
}

class CalcBogusPrimary = GenPrimary, master {
}

/******************************************************************************
 *
 *			 TOP-LEVEL INTERFACE
 *
 ******************************************************************************/
start AppResource;

Calculator = GenApplication {
	moniker = list {
		CalculatorLCMoniker, CalculatorLMMoniker,
		CalculatorSCMoniker, CalculatorSMMoniker,
		CalculatorLCGAMoniker, CalculatorSCGAMoniker,
		"Calculator";
	}
	children = CalcPrimary;
	active = CalcPrimary;
}

end AppResource;

start Interface;

CalcPrimary = CalcBogusPrimary {
#ifdef GCM
	children = InfixTop, SummonsGroup;
#else
	children = InfixTop, RPNTop, FileMenu, EditMenu, OptionsMenu;
	active = CalcEditControl;
#endif

	hints = {
#ifdef GCM
	    HINT_GENERAL_CONSUMER_MODE {
		GeneralConsumerModeFlags <GCMI_EXIT,GCMI_HELP>
	    },
#endif
	    HINT_ORIENT_CHILDREN_VERTICALLY,
	    HINT_CENTER_CHILDREN_HORIZONTALLY,
	    HINT_PREVENT_DEFAULT_OVERRIDES
#ifndef GCM
	     ,HINT_SIZE_WINDOW_AS_DESIRED
#endif
	}
}
#ifdef GCM
SummonsGroup = GenInteraction {
	attributes = notUserInitiatable;
	type = organizational;
	visibility = dialog;
	children = HelpBox;
}
#endif
#ifndef GCM
EditMenu = GenInteraction {
 	children = CalcEditControl;
	visibility = popup;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {GenInteractionGroupType GIGT_EDIT_MENU}
	}
}
CalcEditControl = GenEditControl {
	hints = { HINT_SAME_CATEGORY_AS_PARENT }
}

#endif

end Interface;

#ifdef GCM
start HelpUI;
#include "../Template/helpTemplate.ui"
end HelpUI;
#endif

#ifndef GCM
#include	"preferences.ui"
#endif

#include	"infix.ui"

#ifndef GCM
#include	"rpn.ui"
#endif
