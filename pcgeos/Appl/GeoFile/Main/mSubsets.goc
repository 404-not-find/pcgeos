/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		GeoFile/Main
FILE:		mSubsets.goc

AUTHOR:		John D. Mitchell

METHODS:

Name			Description
----			-----------

FUNCTIONS:

Scope	Name			Description
-----	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.17	Initial version.

DESCRIPTION:
	This file contains all of the record marking (subsets) support for
GeoFile.

	$Id: mSubsets.goc,v 1.1 97/04/04 15:54:10 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Include Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>		/* PC/GEOS Standard Applications.	*/
#include <geoworks.h>

#include <Ansi/string.h>	/* Standard C.	*/

@include <gcnlist.goh>		/* PC/GEOS Libraries.	*/
#include <geoMisc.h>
@include <grobj.goh>
@include <Objects/FlatFile/ffDbaseC.goh>
#include <Objects/FlatFile/ffExBld.h>
@include <Objects/FlatFile/ffFldPr.goh>
@include <Objects/FlatFile/ffFldPrC.goh>
@include <Objects/FlatFile/ffRecC.goh>
@include <Objects/gDListC.goh>
@include <Objects/gDocC.goh>
@include <Objects/gViewCC.goh>

@define	__GF_MAIN_SUBSETS_GOC	/* Don't over-define.	*/
@include <geofile.goh>		/* GeoFile Application.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		External Object Declarations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern chunk @GFMarkExpressionError;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Internal Function Prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal SubsetInfoInitOptionsList (void);


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Subsets
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_FORMULA_INITIATE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Initiate the subset formula/expression dialog box.

PASS: 		Void.

RETURN:		Void.

PSEUDO CODE/STRATEGY:
	Fire off the subset expression builder.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.17	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_FORMULA_INITIATE
{
    optr	databaseObject;
    MemHandle	tokenStreamHandle;

    /* Get ahold of the current database.	*/
    databaseObject = GetTargetDatabaseObject();

    /*
     * Get a handle to the current token stream, if there is one.
     */
    tokenStreamHandle = @call databaseObject::
		MSG_FFD_GET_SUBSET_TOKEN_STREAM ();
    
    /* Invoke the subset expression builder.	*/
    @send databaseObject::MSG_FFD_EDIT_EXPRESSION
		(tokenStreamHandle,
		 GeodeGetOptrNS (@SubsetExpressionBuilder),
		 oself,
		 MSG_GF_SUBSET_FORMULA_CALLBACK);
}	/* End of MSG_GF_SUBSET_FORMULA_INITIATE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_FORMULA_CALLBACK
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Create a subset in the database by looping through the
		the records and marking those that fulfill the given
		expression.

		After the records are marked, the first marked record
		will be jumped to.

PASS: 		MemHandle	tokenStreamHandle	= The parsed token
							  expression.
		word		numTokens	= Number of tokens in the
						  given stream.

RETURN:		Void.

PSEUDO CODE/STRATEGY:
	Instruct the database to create a subset using the given tokenized
	expression.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.17	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_FORMULA_CALLBACK
{
    optr	databaseObject;
    word    	firstMarkedRecord;

    /* Get ahold of the current database.	*/
    databaseObject = GetTargetDatabaseObject ();

    /*
     * Instruct the database to create a subset of the database by applying
     * the given tokenized expression to each record.
     */
    if (@call databaseObject::MSG_FFD_SUBSET_APPLY (tokenStreamHandle,
						    numTokens)) {
	/*
	 * Ok, jump to the first marked record.
	 */
	firstMarkedRecord = @call databaseObject::
			MSG_FFD_GET_FIRST_MARKED_RECORD ();

	if (NOT_A_RECORD != firstMarkedRecord) {
	    FFDSubsetOptionsInfo	dbOptions;

	    /* Get the current option settings.	*/
	    dbOptions = @call databaseObject::MSG_FFD_SUBSET_GET_OPTIONS();

	    if (dbOptions & FFDSOI_SHOW_ONLY_MARKED) {
		@call databaseObject::
		    MSG_FFD_RECORD_CONTROL(FFRCR_GOTO_RECORD, 0);
		@call databaseObject::MSG_FFD_SUBSET_SHOW_ONLY_MARKED_RECORDS();
	    } else {
		/*
		 * There's at least one marked record.  Jump to it.
		 */
		@call databaseObject::MSG_FFD_RECORD_CONTROL
		    (FFRCR_GOTO_RECORD, firstMarkedRecord);
	    }
	} else {
	    /*
	     * There are no marked records.  Display a message to that
	     * effect and show all records.  A call to SHOW_
	     * ONLY_MARKED RECORDS will do the trick, since it
	     * catches this case.
	     */
	    @call databaseObject::MSG_FFD_SUBSET_SHOW_ONLY_MARKED_RECORDS();
	}
    } else
	{
	/*
	 * There was an error.  Put up an apologetic message.
	 */
	MemLock (OptrToHandle (@GFMarkExpressionError));

	UserStandardDialog
		((TCHAR *)0,
		 /* not GIT_MULTIPLE_RESPONSE, so no custom triggers  */
		 (TCHAR *)0,
		 /* No string arguments. */
		 (TCHAR *)0, (TCHAR *)0,
		 /* dialog string */
		 LMemDeref (@GFMarkExpressionError),
		 /* dialog type */
		 (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
		 /* interaction type */
		 (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));
	    
	/* Release the error string */
	MemUnlock (OptrToHandle (@GFMarkExpressionError));
	}
}	/* End of MSG_GF_SUBSET_FORMULA_CALLBACK.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_MARK_ALL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Mark all of the records in the current database as being
		in the current subset.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the databasse to mark all of the records.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.18	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_MARK_ALL
{
    optr dbase = GetTargetDatabaseObject();
    
    @call dbase::MSG_FFD_SUBSET_MARK_ALL ();
}	/* End of MSG_GF_SUBSET_MARK_ALL.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_UNMARK_ALL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Clear the current database's subset.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to clear out all of the marks.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.18	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_UNMARK_ALL
{
    optr dbase = GetTargetDatabaseObject();
    
    @call dbase::MSG_FFD_SUBSET_UNMARK_ALL ();
}	/* End of MSG_GF_SUBSET_UNMARK_ALL.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_INVERT_MARKS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Invert the subset definition in the current database.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to switch the current subset marks.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.18	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_INVERT_MARKS
{
    optr dbase = GetTargetDatabaseObject();
    
    @call dbase::MSG_FFD_SUBSET_INVERT_MARKS();
}


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_DISPLAY_ALL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Allow the displaying of all of the records in the current
		database regardless of subset marking.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to display are records in the database
	regardless of their subset marking.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.18	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_DISPLAY_ALL
{
    @call GetTargetDatabaseObject()::
		MSG_FFD_SUBSET_SHOW_ALL_RECORDS ();
}	/* End of MSG_GF_SUBSET_DISPLAY_ALL.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_DISPLAY_MARKED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Restrict record displaying to the currently marked subset.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to display only the records that are marked
	as being the current subset.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.18	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_DISPLAY_MARKED
{
    @call GetTargetDatabaseObject()::
		MSG_FFD_SUBSET_SHOW_ONLY_MARKED_RECORDS ();
}	/* End of MSG_GF_SUBSET_DISPLAY_MARKED.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_DELETE_ALL_MARKED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Delete all records that are in the current subset.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to nuke all records from that database which
	are in the current subset.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.08	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_DELETE_ALL_MARKED
{
    @call GetTargetDatabaseObject()::
		MSG_FFD_SUBSET_DELETE_MARKED_RECORDS ();
}	/* End of MSG_GF_SUBSET_DELETE_ALL_MARKED.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_OPTIONS_DIALOG_INITIATE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Instigate the record marking options dialog.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Query the user for the state of each of the options and set the
	options list to match.
	Initiate the record marking options interaction.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_OPTIONS_DIALOG_INITIATE
{
    /*
     *	This is a discardable dialog, so tell the interaction that we are
     *  about to bring it onscreen, so it shouldn't allow itself to be
     *  discarded.
     */
    @call GeodeGetOptrNS (@MarkOptionsDialog)::
	    	    	MSG_GEN_INTERACTION_DISABLE_DISCARDING ();
    
    /* Go initialize the options list.	*/
    SubsetInfoInitOptionsList ();

    /* Start it up.	*/
    @call GeodeGetOptrNS (@MarkOptionsDialog)::
			MSG_GEN_INTERACTION_INITIATE ();
}	/* End of MSG_GF_SUBSET_OPTIONS_DIALOG_INITIATE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_AUTO_APPLY_MARK_SELECTED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Handle the (un-)selection of the record marking options.

PASS:		word	selectedBooleans	= Active options.
		word	indeterminateBooleans	= ??? (0).
		word	modifiedBooleans	= Modified options.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Instruct the database to turn on/off the automatic marking of newly
	committed records as appropriate.
	Instruct the database to turn on/off the automatic clearing of any
	and all preexisting record marks when apply a record marking
	expression as appropriate.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.07	Initial version.
	JDM	93.01.11	Mark options handling.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_OPTIONS_SELECTED
{
    /* Automatic marking option changed?	*/
    if (GF_SUBSET_AUTO_APPLY_MARK & modifiedBooleans)
	{
	/*
	 * Yep.  Tell the database to automatically apply the current
	 * record marking when creating new records (or not).
	 */
	@call GetTargetDatabaseObject()::MSG_FFD_SUBSET_AUTO_APPLY_MARK
			(GF_SUBSET_AUTO_APPLY_MARK & selectedBooleans);
	}

    /* Clear marks first option changed?	*/
    if (GF_SUBSET_CLEAR_MARKS_FIRST & modifiedBooleans)
	{
	/*
	 * Yep.  Tell the database to clear marks before proceeding to
	 * apply the record marking expression to any newly committed
	 * records (or not).
	 */
	@call GetTargetDatabaseObject()::MSG_FFD_SUBSET_CLEAR_MARKS_FIRST
			(GF_SUBSET_CLEAR_MARKS_FIRST & selectedBooleans);
	}
}	/* End of MSG_GF_SUBSET_AUTO_APPLY_MARK_SELECTED.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SUBSET_OPTIONS_CANCEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Restore the state of the record marking options list to
		match the state of the current database.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Query the user for the state of each of the options and set the
	options list to match.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SUBSET_OPTIONS_CANCEL
{
    /* Go initialize the options list.	*/
    SubsetInfoInitOptionsList ();
}	/* End of MSG_GF_SUBSET_OPTIONS_CANCEL.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Quick Mark
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_QUICK_MARK_DIALOG_INITIATE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Initiate the Quick Mark dialog.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Committ the current record (if necessary).
	

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.07	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_QUICK_MARK_DIALOG_INITIATE
{
    optr	databaseObject;
    optr	fieldsList;
    optr	optionsList;
    optr	matchText;
    optr	applyTrigger;
    byte	numFields;

    /* Get ahold of the database handle.        */
    databaseObject = GetTargetDatabaseObject ();

    /* Commit the current record (if any).      */
    if (! @call databaseObject::
                MSG_FFD_RECORD_CONTROL (FFRCR_COMMIT_CURRENT_RECORD, 0)) 
        {
        /* Oops.  Bad record so bail.   */
        return;
        }
    /*
     *	This is a discardable dialog, so tell the interaction that we are
     *  about to bring it onscreen, so it shouldn't allow itself to be
     *  discarded.
     */
    @call GeodeGetOptrNS (@QuickMarkDialog)::
	    	    	MSG_GEN_INTERACTION_DISABLE_DISCARDING ();

    /* Initialize the database fields list.	*/
    fieldsList = GeodeGetOptrNS (@QMFGFieldsList);
    numFields = @call databaseObject::MSG_FFD_GET_NUMBER_OF_FIELDS
		(fieldsList, DATABASE_NAME_LIST);

    /* Any fields in the database.	*/
    optionsList = GeodeGetOptrNS (@QMFGButtonGroup);
    matchText = GeodeGetOptrNS (@QMMatchText);
    applyTrigger = GeodeGetOptrNS (@QMApplyTrigger);
    if (numFields)
	{
	/* Yep.  Select the first item.	*/
	@call fieldsList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
		(0, FALSE);

	/* Enable the options list.	*/
	@call optionsList::MSG_GEN_SET_ENABLED (VUM_NOW);
	@call matchText::MSG_GEN_SET_ENABLED (VUM_NOW);
	@call applyTrigger::MSG_GEN_SET_ENABLED (VUM_NOW);
	}
    else
	{
	/* Disable the options list.	*/
	@call optionsList::MSG_GEN_SET_NOT_ENABLED (VUM_NOW);
	@call matchText::MSG_GEN_SET_NOT_ENABLED (VUM_NOW);
	@call applyTrigger::MSG_GEN_SET_NOT_ENABLED (VUM_NOW);
	}

    /* Initiate the dialog.	*/
    @call GeodeGetOptrNS (@QuickMarkDialog)::MSG_GEN_INTERACTION_INITIATE();
}	/* End of MSG_GF_QUICK_MARK_DIALOG_INITIATE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_QUICK_MARK_FIELDS_LIST_QUERY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Retrieve the moniker for the requested database fields
		list.

PASS: 		optr	list		= List to provide the moniker to.
		word	item		= Item to get the moniker of.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Get the datbase to supply the moniker to the list for the given
	item.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.07	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_QUICK_MARK_FIELDS_LIST_QUERY
{
    /* Get the moniker for the requested list item.	*/
    @call GetTargetDatabaseObject()::MSG_FFD_REQUEST_FIELD_MONIKER
		(list, item, DATABASE_NAME_LIST);
}	/* End of MSG_GF_QUICK_MARK_FIELDS_LIST_QUERY.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_QUICK_MARK_FIELD_SELECTED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Handle's the apply message from the database fields list.

PASS: 		word	selection	= Currently selected item.
		word	numSelections	= 1 if a selection, otherwise 0.
		byte	stateFlags	= GenItemGroup state flags.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	Nada.

	Asserts:	Nada.

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Nothing.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.08	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_QUICK_MARK_FIELD_SELECTED
{
}	/* End of MSG_GF_QUICK_MARK_FIELD_SELECTED.	*/


/***********************************************************************
 *				InsertFindExpression
 ***********************************************************************
 * SYNOPSIS:	    Append the "find" expression to the buffer
 * CALLED BY:	    MSG_GF_QUICK_MARK_MARK
 * RETURN:	    buffer updated
 * SIDE EFFECTS:    none
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *     chrisb	11/ 1/93   	Initial Revision
 *
 ***********************************************************************/
void InsertFindExpression (TCHAR *buffer, word listOptions, TCHAR
			   *fieldName, TCHAR *matchText)
 
{
    strcat (buffer, _TEXT("find(\""));
    strcat (buffer, matchText);
    strcat (buffer, _TEXT("\"\001"));
    if (GF_QUICK_MARK_CASE_INSENSITIVITY_TOGGLE & listOptions)
	{
	    strcat (buffer, _TEXT("upper("));
	    strcat (buffer, fieldName);
	    strcat (buffer, _TEXT(")"));
	}
    else
	{
	    strcat (buffer, fieldName);
	}
    strcat (buffer, _TEXT("\0010)"));

}	/* End of InsertFindExpression.	*/



/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_QUICK_MARK_MARK
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	

PASS: 		???

RETURN:		???

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:			???

PSEUDO CODE/STRATEGY:	???

KNOWN DEFECTS/CAVEATS/IDEAS:
	This is non-elegant.  Sigh.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.07	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_QUICK_MARK_MARK
{
    optr	databaseObject;
    optr	fieldsList;
    word	listOptions;
    word    	firstMarkedRecord;
    word	dbListIndex;
    word	numTokens;
    Boolean	qError;
    MemHandle	tokenStreamHandle;
    FieldID	fieldColumn;
    MemHandle	bufferHandle;
    TCHAR	*bufferPtr, *tempPtr;
    VisTextRange	errorOffset;
    FieldDataType	fieldType;
    LocalNumericFormat	numericFormat;
    TCHAR	fieldNameBuffer [MAX_FIELD_NAME_LENGTH + 1];
    TCHAR	matchText [GF_MAX_QUICK_MARK_MATCH_TEXT_LENGTH + 1];

    /* Get current numericFormat. */
    LocalGetNumericFormat(&numericFormat);

    /* Get ahold of the current database.	*/
    databaseObject = GetTargetDatabaseObject ();

    /* Get the current matching text.	*/
    @call GeodeGetOptrNS (@QMMatchText)::MSG_VIS_TEXT_GET_ALL_PTR
		(matchText);

    /* Get the currently selected database field.	*/
    fieldsList = GeodeGetOptrNS (@QMFGFieldsList);
    dbListIndex = @call fieldsList::MSG_GEN_ITEM_GROUP_GET_SELECTION ();

    /* Get the current database list selection's field name.	*/
    @call databaseObject::MSG_FFD_GET_INDEXED_FIELD_NAME
		(dbListIndex, DATABASE_NAME_LIST, fieldNameBuffer);

    /* Get the current database field's data type.	*/
    fieldColumn = @call databaseObject::MSG_FFD_GET_INDEXED_COL_NUM
				(dbListIndex); 
    fieldType = @call databaseObject::MSG_FFD_GET_DATA_TYPE_AND_FLAGS
		(fieldColumn, (FieldDataTypesFlags *) NULL);

    /* Get the current marking options.	*/
    listOptions = @call GeodeGetOptrNS (@QMFGButtonGroup)::
		MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS ();

    /* Allocate the buffer for the built expression.	*/
    bufferHandle = MemAlloc (MAX_STRING_LENGTH*sizeof(TCHAR),
			     HF_DYNAMIC | HF_SHARABLE,
			     HAF_STANDARD_LOCK);
    if (!bufferHandle)
	{
	/* Out of memory.	*/
	return;
	}
    else
	{
	bufferPtr = MemDeref (bufferHandle);
	}

    /* Allocate the maximnum size possible token stream block.	*/
    tokenStreamHandle = MemAlloc (MAX_TOKEN_STREAM_SIZE,
				  HF_DYNAMIC | HF_SHARABLE,
				  HAF_STANDARD | HAF_ZERO_INIT);
    if (!tokenStreamHandle)
	{
	/* Out of memory!  Bail.	*/
	MemFree (bufferHandle);
	return;
	}

    /* Build the expression spring.	*/
    switch (fieldType)
	{
	case FDT_COMPUTED:
	    if (GF_QUICK_MARK_CASE_INSENSITIVITY_TOGGLE & listOptions)
		{
		strupr (matchText);
		}
	    strcpy (bufferPtr, _TEXT("or((if(isstring("));
	    strcat (bufferPtr, fieldNameBuffer);
	    strcat (bufferPtr, _TEXT(")\001("));
	    if (GF_QUICK_MARK_HOL_ONLY_MATCH_TOGGLE & listOptions)
		{
		strcat (bufferPtr, _TEXT("if(isnumber("));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT(")\001"));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT("=0\0010)"));
		}
	    else
		{
		strcat (bufferPtr, _TEXT("isnumber("));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT(")"));
		}
	    strcat (bufferPtr, _TEXT(")\0010))\001(if(isnumber("));
	    strcat (bufferPtr, fieldNameBuffer);
	    strcat (bufferPtr, _TEXT(")\001("));
	    strcat (bufferPtr, _TEXT("value(\""));
	    strcat (bufferPtr, matchText);
	    strcat (bufferPtr, _TEXT("\") = "));
	    strcat (bufferPtr, fieldNameBuffer);
	    strcat (bufferPtr, _TEXT(")\0010)))"));
	    break;

	case FDT_GENERAL_TEXT:
	    /* Case sensitive matching?	*/
	    if (GF_QUICK_MARK_CASE_INSENSITIVITY_TOGGLE & listOptions)
		{
		/* Yep.  Canonicalize the user given match text.	*/
		strupr (matchText);
		}

	    /* Since "FIND" returns ERROR if the match fails, we first */
	    /* want to check the error case before determining if the */
	    /* match was at the start of the line.  Unfortunately that */
	    /* means doing the FIND twice for each record, but hey...*/

	    if (GF_QUICK_MARK_HOL_ONLY_MATCH_TOGGLE & listOptions)
		{
		strcpy (bufferPtr, _TEXT("if(isnumber("));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT(")\001"));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT("=0\0010)"));
		}
	    else
		{
		strcpy (bufferPtr, _TEXT("isnumber("));
		InsertFindExpression(bufferPtr, listOptions,
				     fieldNameBuffer, matchText);
		strcat (bufferPtr, _TEXT(")"));
		}
	    break;

	case FDT_INTEGER:
	    /* FALL THROUGH.	*/

	case FDT_REAL:
	    strcpy (bufferPtr, _TEXT("value(\""));
	    strcat (bufferPtr, matchText);
	    strcat (bufferPtr, _TEXT("\") = "));
	    strcat (bufferPtr, fieldNameBuffer);
	    break;

	case FDT_DATE:
	    strcpy (bufferPtr, _TEXT("datevalue(\""));
	    strcat (bufferPtr, matchText);
	    strcat (bufferPtr, _TEXT("\") = "));
	    strcat (bufferPtr, fieldNameBuffer);
	    break;

	case FDT_TIME:
	    strcpy (bufferPtr, _TEXT("timevalue(\""));
	    strcat (bufferPtr, matchText);
	    strcat (bufferPtr, _TEXT("\") = "));
	    strcat (bufferPtr, fieldNameBuffer);
	    break;
	}	/* End of switch fieldType.	*/

    /* Replace \001 with real list separator character. */
    for (tempPtr = bufferPtr; *tempPtr != NULL; tempPtr++) {
	if (*tempPtr == 1)
	    *tempPtr = (char)numericFormat.listSeparator;
    }

    /* Parse the expression.	*/
    qError = FALSE;
    if (@call databaseObject::MSG_FFD_PARSE_PARSE_STRING
			(bufferHandle,
			 tokenStreamHandle,
			 MAX_TOKEN_STREAM_SIZE,
			 &numTokens,
			 &errorOffset))
	{
	/* Parsed okay.  Apply it to the database.	*/
	if (@call databaseObject::MSG_FFD_SUBSET_APPLY (tokenStreamHandle,
							numTokens))
	    {
	    /* Subset applied sucessfully so goto first record.	*/
	    firstMarkedRecord = @call databaseObject::
			MSG_FFD_GET_FIRST_MARKED_RECORD();

	    if (NOT_A_RECORD != firstMarkedRecord) {
		FFDSubsetOptionsInfo	dbOptions;

		/* Get the current option settings.	*/
		dbOptions = @call databaseObject::MSG_FFD_SUBSET_GET_OPTIONS();

		if (dbOptions & FFDSOI_SHOW_ONLY_MARKED) {
		    @call databaseObject::MSG_FFD_RECORD_CONTROL
			(FFRCR_GOTO_RECORD, 0);
		    @call databaseObject::
			MSG_FFD_SUBSET_SHOW_ONLY_MARKED_RECORDS();
		} else {
		    @call databaseObject::MSG_FFD_RECORD_CONTROL
			(FFRCR_GOTO_RECORD, firstMarkedRecord);
	    	}
	    } else {
		/*
		 * There are no marked records.  Display a message to that
		 * effect and show all records.  A call to SHOW_
		 * ONLY_MARKED RECORDS will do the trick, since it
		 * catches this case.
		 */
		@call databaseObject::MSG_FFD_SUBSET_SHOW_ONLY_MARKED_RECORDS();
	    }
	} else	/* Otherwise, error in applying expression.	*/
	    {
	    /* Signal error.	*/
	    qError = TRUE;
	    }
    }
    else	/* Unable to parse the given string.	*/
	{
	/* Signal error.	*/
	qError = TRUE;
	}	/* End of if ParserParseString...	*/

    /* Any errors?	*/
    if (qError)
	{
	/* Yep.  Pester the user.	*/
	MemLock (OptrToHandle (@GFMarkExpressionError));
	UserStandardDialog ((TCHAR *) 0,
			    /* No custom triggers.	*/
			    (TCHAR *) 0,
			    /* No string arguments.	*/
			    (TCHAR *) 0, (TCHAR *) 0,
			    /* Dialog string.	*/
			    LMemDeref (@GFMarkExpressionError),
			    /* Dialog type.	*/
			    (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    /* Interaction type.	*/
			    (GIT_NOTIFICATION <<
					CDBF_INTERACTION_TYPE_OFFSET));

	/* Release the error string */
	MemUnlock (OptrToHandle (@GFMarkExpressionError));
	}

    /* Unlock the data blocks.	*/
    MemFree (bufferHandle);

    /* Get rid of the dialog iff everything okay.	*/
    if (!qError)
	{
	@call oself::MSG_GF_QUICK_MARK_CANCEL ();
	}
}	/* End of MSG_GF_QUICK_MARK_MARK.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_QUICK_MARK_CANCEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Bring down the Quick Mark dialog box.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	Nada.

	Asserts:	The Quick Mark dialog box has been dismissed.

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Dismiss the dialog box.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.07	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_QUICK_MARK_CANCEL
{
    /* Dismiss the sucker.	*/
    @call GeodeGetOptrNS (@QMCancelTrigger)::
		MSG_GEN_GUP_INTERACTION_COMMAND (IC_DISMISS);
}	/* End of MSG_GF_QUICK_MARK_CANCEL.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Utility Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SubsetInfoInitOptionsList
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Initialize the record marking options list to match the
		options' state in the current database.

CALLED BY:	Internal --
			MSG_GF_SUBSET_OPTIONS_DAILOG_INITIATE,
			MSG_GF_SUBSET_OPTIONS_CANCEL.

PASS:		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	????

	Asserts:	The state of the record marking options list is
			consistent with the state of the equivalent
			options in the current database.

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Get the current database's record marking options.
	Figure out which list options to (de-)activate.
	Set the record marking options list state.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal SubsetInfoInitOptionsList (void)
{
    word	listOptions;
    FFDSubsetOptionsInfo	dbOptions;

    /* Get the current option settings.	*/
    dbOptions = @call GetTargetDatabaseObject()::
			MSG_FFD_SUBSET_GET_OPTIONS ();

    /* Figure out what list options to enable/disable.	*/
    listOptions = (FFDSOI_AUTO_APPLY_MARK & dbOptions) ?
			GF_SUBSET_AUTO_APPLY_MARK : 0;
    listOptions |= (FFDSOI_CLEAR_MARKS_FIRST & dbOptions) ?
			GF_SUBSET_CLEAR_MARKS_FIRST : 0;

    /* Set the option's list.	*/
    @call GeodeGetOptrNS (@MODOptionsList)::
		MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE (listOptions, FALSE);
}	/* End of SubsetInfoInitOptionsList().	*/


