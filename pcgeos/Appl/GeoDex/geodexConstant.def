COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
FILE:		geodexConstant.def

AUTHOR:		Ted H. Kim, 9/21/89

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	9/21/89		Initial revision
	ted	3/92		Complete restructuring for 2.0

DESCRIPTION:
	Contains all constants, enums, and methods definitions. 

	$Id: geodexConstant.def,v 1.2 98/02/15 19:13:48 gene Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;------------------------------------------------------------------------------
;			Class and Instance Data Definitions
;------------------------------------------------------------------------------

LettersCompClass class	GenGadgetClass, master
	LCC_interface		hptr		; handle of Interface block
	LCC_rolodexApp		hptr		; handle of RolodexApp
	LCC_bwMidsect		hptr		; handle of bitmap block
	LCC_colMidsect		hptr		; handle of bitmap block
	LCC_bwBottom		hptr		; handle of bitmap block
	LCC_colBottom		hptr		; handle of bitmap block
	LCC_cgaMidsect		hptr		; handle of bitmap block
ifdef GPC
	LCC_lastNameMkr		nptr		; chunk handle of moniker
endif
LettersCompClass	endc

LettersClass 	class	GenGadgetClass, master
    	LI_flag			word	(?)	
	LI_letter		word	(?)	; current letter tab
	LI_rolodexApp		hptr		; handle of RolodexApp
	LI_interface		hptr		; handle of Interface block
	LI_menu			hptr		; handle of MenuResource block
	LI_search		hptr		; handle of Search block
	LI_bwLetters		hptr		; handle of bitmap block
	LI_colLetters		hptr		; handle of bitmap block
	LI_numPts		word	(?)	; number of coordinates in a tab

	; x, y coordinate pairs used to invert letter tabs

	LI_coordBuf		word	22	dup	(?)	

	MSG_LETTERS_INVERT	 	message
	MSG_LETTERS_CLEAR		message
	MSG_DRAW_LETTER_TABS		message
	MSG_LETTERS_GET_TAB_LETTER	message
	MSG_LETTERS_GET_LETTER		message
LettersClass	endc

TitledGenTriggerClass class   GenTriggerClass, master
SBCS <	TGTI_title	    lptr.char	; Title to display/center for moniker.>
DBCS <	TGTI_title	    lptr.wchar	; Title to display/center for moniker.>
	TGTI_pictureNumber  byte	; # of moniker to display
TitledGenTriggerClass endc

NotesDialogClass 	class	GenInteractionClass

	MSG_ROLODEX_SAVE_AFTER_NOTE_EDIT	message

NotesDialogClass 	endc

RolodexApplicationClass	class	GenApplicationClass

MSG_ROLODEX_APPLICATION_SET_USER_LEVEL		message
MSG_ROLODEX_APPLICATION_INITIATE_FINE_TUNE	message
MSG_ROLODEX_APPLICATION_FINE_TUNE		message
MSG_ROLODEX_APPLICATION_UPDATE_BARS		message
MSG_ROLODEX_APPLICATION_CHANGE_USER_LEVEL	message
MSG_ROLODEX_APPLICATION_CANCEL_USER_LEVEL	message
MSG_ROLODEX_APPLICATION_QUERY_RESET_OPTIONS	message
MSG_ROLODEX_APPLICATION_USER_LEVEL_STATUS	message
ifdef GPC
MSG_ROLODEX_OPTIONS_CHANGED			message
endif

RolodexApplicationClass	endc

GeoDexClass	class	RolodexClass
	MSG_ROLODEX_AUTO_DIAL			message	
	MSG_ROLODEX_CR				message	
	MSG_ROLODEX_PREVIOUS			message	
	MSG_ROLODEX_NEXT			message	
	MSG_ROLODEX_NEW 			message	
	MSG_ROLODEX_NOTES 			message	
	MSG_ROLODEX_DELETE 			message	
	MSG_ROLODEX_CLEAR			message	
	MSG_ROLODEX_COPY_RECORD			message	
	MSG_ROLODEX_PASTE_RECORD		message	
	MSG_ROLODEX_UNDO 			message	
	MSG_ROLODEX_FIND_LETTER			message	
	MSG_ROLODEX_PHONE_UP			message	
	MSG_ROLODEX_PHONE_DOWN			message	
	MSG_ROLODEX_CHANGE_VIEW			message
if _QUICK_DIAL
	MSG_ROLODEX_QUICK_DIAL			message	
	MSG_ROLODEX_QUICK_BUTTON		message	
endif ;if _QUICK_DIAL
	MSG_ROLODEX_LOOKUP			message	
	MSG_ROLODEX_APPLY_DIAL_OPTIONS		message	
	MSG_ROLODEX_END_CALL			message	
	MSG_ROLODEX_FIND_RECORD			message	
	MSG_ROLODEX_EXPAND_TO_BOTH_VIEW		message
	MSG_ROLODEX_REQUEST_ENTRY_MONIKER	message
	MSG_ROLODEX_PRINT			message	
	MSG_ROLODEX_CALL_CALENDAR		message		
	MSG_ROLODEX_DIAL_FROM_PHONE_LIST	message	
	MSG_ROLODEX_DIAL_CUR_NUMBER		message	
	MSG_ROLODEX_CREATE_EXPORT_TRANSFER_ITEM	message	
	MSG_ROLODEX_CREATE_IMPORT_TRANSFER_ITEM	message
	MSG_ROLODEX_RESORT			message
	MSG_ROLODEX_EXPORT_TO_CLIPBOARD		message
	MSG_ROLODEX_PRINT_OPTION		message
	MSG_ROLODEX_DISPATCH_EVENT		message

PZ <	MSG_ROLODEX_PHONETIC_CR			message		>
PZ <	MSG_ROLODEX_ZIP_CR			message		>
ifdef GPC
	MSG_ROLODEX_NEW_INITIATE		message
	MSG_ROLODEX_NEW_PHONE_UP		message
	MSG_ROLODEX_NEW_PHONE_DOWN		message
	MSG_ROLODEX_NEW_CREATE			message
	MSG_ROLODEX_NEW_CANCEL			message
	MSG_ROLODEX_CALL_EMAIL			message
endif
GeoDexClass	endc

ifdef GPC
AddrFieldTextClass	class	GenTextClass
AddrFieldTextClass	endc

SearchDynamicListClass	class	GenDynamicListClass
SearchDynamicListClass	endc

NoteIconGlyphClass	class	GenGlyphClass
NoteIconGlyphClass	endc
endif

;------------------------------------------------------------------------------
;			Contants Definitions
;------------------------------------------------------------------------------

OK 	equ	1
CANCEL	equ	2

if DBCS_PCGEOS
PZ <	GEODEX_DISPLAY_FONT	equ	FID_PIZZA_KANJI		>
NPZ <	GEODEX_DISPLAY_FONT	equ	FID_BERKELEY		>
else
	GEODEX_DISPLAY_FONT	equ	FID_BERKELEY
endif

VERTICAL_COMPACT_THRESHOLD	equ	300	; resolution for CGA screen 
STANDARD_MEM_BLOCK_SIZE		equ	512	; memory block size to allocate

; constants for quick dial stuff

MAX_FREQ_ENTRY	equ	10	; maximum number of entries in frequency table 
MAX_HIST_ENTRY	equ	10	; maximum number of entries in histroy table
FREQ_TABLE_SIZE	equ	50	; total number of bytes in frequency table
HIST_TABLE_SIZE	equ	50	; total number of bytes in history table

NUM_PHONE_TYPE_FIELDS 	equ	7
;
;   Edit field index from Impex/impexConstant.def file.  Used by
;	DB routines, too.  Matches order in UI file.
;
TextEditFieldIndex	etype	word,	0, 1
	TEFI_LASTNAME	enum	TextEditFieldIndex
	TEFI_ADDRESS	enum	TextEditFieldIndex
	TEFI_NOTES	enum	TextEditFieldIndex
PZ <	TEFI_PHONETIC	enum	TextEditFieldIndex		>
PZ <	TEFI_ZIP	enum	TextEditFieldIndex		>
	TEFI_PHONE1	enum	TextEditFieldIndex

NUM_TEXT_EDIT_FIELDS	equ	TextEditFieldIndex

	TEFI_PHONE_NAME1 enum	TextEditFieldIndex, TEFI_PHONE1 + NUM_PHONE_TYPE_FIELDS

NPZ <.assert( NUM_TEXT_EDIT_FIELDS eq 4)	; Ensure same as Geodex v2 >

SBCS<PHONE_MONIKER_SIZE	equ	35*(size char)	; quick dial button moniker size	>
DBCS<PHONE_MONIKER_SIZE	equ	35*(size wchar)	; quick dial button moniker size	>
ifdef GPC_ONLY
SORT_BUFFER_LENGTH	equ	254	; buffer used to store index field
					; make sure this number is even
else
SORT_BUFFER_LENGTH	equ	100	; buffer used to store index field
					; make sure this number is even
endif
SBCS<SORT_BUFFER_SIZE	equ	SORT_BUFFER_LENGTH*(size char)	>
DBCS<SORT_BUFFER_SIZE	equ	SORT_BUFFER_LENGTH*(size wchar)	>

ADDR_FIELD_LENGTH	equ	4096	
NOTE_FIELD_LENGTH	equ	10240	; 10K limit	
PHONE_TYPE_LENGTH	equ	10	; phone number type ("CAR","HOME",..)
ifdef GPC_ONLY
PHONE_NO_LENGTH		equ	254	; the actual phone number
else
PHONE_NO_LENGTH		equ	64	; the actual phone number
endif
MAX_TAB_LETTER_LENGTH	equ	5	; maximum number of letters in a tab

; constants for serial port stuff

NO_PORT		equ	0ffh		;flag if no comm port opened
SERIAL_IN_SIZE	equ	1024		;initial input buffer size
SERIAL_OUT_SIZE	equ	1024		;initial output buffer size

if PZ_PCGEOS
GEODEX_NUM_FIELDS		equ	12
else
GEODEX_NUM_FIELDS		equ     10
endif

;-----------------------------------------------------------------------------
;		Letter Tabs of Rolodex
;-----------------------------------------------------------------------------


if PZ_PCGEOS
	; We don't need too many letter tabs for Pizza version
MAX_NUM_OF_LETTER_TABS	= 13
MAX_LETTER_TAB_SETS	=  2		; have one sets of letter tabs.
else
MAX_NUM_OF_LETTER_TABS	= 29
MAX_LETTER_TAB_SETS	=  2		; have two sets of letter tabs.
endif

;	The displayed "10 tabs per row" number is guided by the artwork
;
DisplayLetterTabIndex		etype	byte,	0, 10
	DLTI_ROW_ONE		enum	DisplayLetterTabIndex
	DLTI_ROW_TWO		enum	DisplayLetterTabIndex
	DLTI_ROW_THREE		enum	DisplayLetterTabIndex

MAX_NUMBER_OF_LETTER_TABS	equ	DisplayLetterTabIndex


;-----------------------------------------------------------------------------
;		Phone Numbers and Storage
;-----------------------------------------------------------------------------

; number of characters allowed in prefix and area code text field

DIAL_OPTION_TEXT_LENGTH		equ	10

; constants for phone number stuff

PhoneTypeIndex	etype	byte,	1
PTI_BLANK	enum	PhoneTypeIndex
PTI_HOME	enum	PhoneTypeIndex
PTI_OFFICE	enum	PhoneTypeIndex
PTI_CAR		enum	PhoneTypeIndex
PTI_FAX		enum	PhoneTypeIndex
PTI_PAGER	enum	PhoneTypeIndex
PTI_EMAIL	enum	PhoneTypeIndex

NUM_DEFAULT_PHONE_TYPES	equ	PhoneTypeIndex-1  ; (minus one for blank)
.assert  (NUM_DEFAULT_PHONE_TYPES eq 7)		; ensure same as geodex v2

INDEX_TO_STORE_FIRST_ADDED_PHONE_TYPE	equ	PhoneTypeIndex
.assert ( INDEX_TO_STORE_FIRST_ADDED_PHONE_TYPE	eq 8) ; ensure same geodex v2

MAX_PHONE_NO_RECORD	equ	8		; max for any record (one blank)
MAX_NEW_PHONE_TYPE_NAME	equ	245		; additional to predefined
MAX_TOTAL_PHONE_TYPE_NAMES equ	MAX_NEW_PHONE_TYPE_NAME+NUM_DEFAULT_PHONE_TYPES

;	This constant is extracted fomr the source code.  The number is
;	the count of "most recent" and the count of "highest frequency"
;	phone number monikers to display.  UI gadgets are also related
;	to this number.
;
COUNT_QUICK_PHONE_NUMBERS	equ	10

;
;	This structure holds the strings used to describe what the number
;	number is, eg, "CAR", "FAX", "PAGER", "BATHROOM".  All strings are
;	stored C_NULL terminated.  Depending on storage strategies for the
;	string heap (success allocation heap, compaction, etc), the offsets
;	may not be in increasing order -- therefore, don't count on it!
;	Blank entries are pointers to C_NULL strings.  The zero-th string
;	is always a zero word.  This maintains backward compatibility.
;
;	String pointers are displacements to the string, relative to the
;	beginning of the structure.  The DBItem can move, so ptrs must be
;	relative.  The offset list is zero terminated.
;
;	This structure is stored in a DBItem pointed to by ds:[phoneTypeBlk].
;
CheckHack< (offset PEI_offsets) eq (size word) >

PhoneTypeNameItem	struct
	PEI_size	word	?		; size this whole item
	PEI_offsets	word	MAX_TOTAL_PHONE_TYPE_NAMES dup (?)
SBCS<	PEI_stringHeap	label	char		>
DBCS<	PEI_stringHeap	label	wchar		>
	;  strings describing phone number type (ie, "CAR","FAX") follows..
;	PEI_nullString	word		; first entry always 0

PhoneTypeNameItem	ends


;-----------------------------------------------------------------------------
;		User Level Stuff
;-----------------------------------------------------------------------------

GeoDexFeatures	record
    GF_NOTES_FEATURE:1
    GF_GEOPLANNER:1
    GF_UTILS_MENU:1
    GF_VIEW_MENU:1		
    GF_SEARCH_FEATURES:1
    GF_SORT_OPTION:1	
    GF_DIAL_OPTION:1	
    :9
GeoDexFeatures	end

INTRODUCTORY_FEATURES	=	0

ifdef GPC
;
; remove GF_UTILS_MENU, GF_SORT_OPTION, GF_DIAL_OPTION
; MSG_META_ATTACH handler also removes these if 'extraFeatures'
; .ini flag is not set.  If flag is set, must also use 'features'
; flag to restore these features (or let user turn these on manually
; from Fine Tune dialog)
;
BEGINNING_FEATURES	=	mask GF_NOTES_FEATURE

INTERMEDIATE_FEATURES	=	BEGINNING_FEATURES or \
				mask GF_GEOPLANNER or \
				mask GF_VIEW_MENU or \
				mask GF_SEARCH_FEATURES
else
BEGINNING_FEATURES	=	mask GF_NOTES_FEATURE or \
				mask GF_UTILS_MENU

INTERMEDIATE_FEATURES	=	BEGINNING_FEATURES or \
				mask GF_GEOPLANNER or \
				mask GF_VIEW_MENU or \
				mask GF_SEARCH_FEATURES or \
				mask GF_SORT_OPTION or \
				mask GF_DIAL_OPTION
endif

DEFAULT_FEATURES	= 	INTERMEDIATE_FEATURES

ifdef GPC
;
; feature flags for GPC version (mostly things turned off that might
; want to be re-included for a repackaged version)
;
GPCNonFeatures	record
	GPCNF_SORT_OPTIONS:1
	GPCNF_DIAL_OPTIONS:1
	GPCNF_UTIL_MENU:1
	GPCNF_RECORD_COPY_PASTE:1
GPCNonFeatures	end
endif

;------------------------------------------------------------------------------
;			Enum Definitions
;------------------------------------------------------------------------------

	; do not change the order of UndoStatus constants

UndoStatus	etype	byte,	0
	UNDO_DELETE	enum	UndoStatus
	UNDO_NOTHING	enum	UndoStatus
	UNDO_ADD	enum	UndoStatus
	UNDO_NEW	enum	UndoStatus
	UNDO_OLD	enum	UndoStatus
	UNDO_CHANGE	enum	UndoStatus
	UNDO_RESTORE	enum	UndoStatus


	; enums for current text edit field 
	;	Used to index into idata:FieldTable[]

TextEditFieldOffset	etype	byte,	0, (size word)	
	TEFO_INDEX	enum	TextEditFieldOffset
	TEFO_ADDR	enum	TextEditFieldOffset
	TEFO_NOTE	enum	TextEditFieldOffset
PZ <	TEFO_PHONETIC	enum	TextEditFieldOffset		>
PZ <	TEFO_ZIP	enum	TextEditFieldOffset		>
	TEFO_PHONE_TYPE	enum	TextEditFieldOffset
	TEFO_PHONE_NO	enum	TextEditFieldOffset

	; current view mode constants

ShowStatus	etype	byte, 0
	CARD_VIEW	enum	ShowStatus	
	BROWSE_VIEW	enum	ShowStatus
	BOTH_VIEW	enum	ShowStatus
	DISABLED_VIEW	enum	ShowStatus

	; current serial port status constants

PortStatusFlags		etype		word,	0
	PORT_OPEN	enum	PortStatusFlags
	PORT_NOT_OPEN	enum	PortStatusFlags
	NO_MODEM	enum	PortStatusFlags

ImpexFlag		etype	byte, 0
	IE_FILE		enum	ImpexFlag
	IE_CLIPBOARD	enum	ImpexFlag

	; Enums for Print Options dialog

PrintFormatFlags		etype	byte
	PFF_CUR_REC		enum	PrintFormatFlags
	PFF_CUR_REC_ADDR	enum	PrintFormatFlags
	PFF_ALL			enum	PrintFormatFlags
	PFF_ALL_ADDR		enum	PrintFormatFlags
	PFF_ALL_PHONES		enum	PrintFormatFlags

ImpexMergeState		etype	word, 0
	IMS_HAVENT_ASKED	enum	ImpexMergeState
	; Haven't encountered a record with a duplicate, yet, so haven't
	; asked the user what she wants us to do
	
	IMS_DUPLICATE		enum	ImpexMergeState
	; Create a record with a duplicate index field to hold the new data
	
	IMS_REPLACE		enum	ImpexMergeState
	; Replace entire record, deleting previous contents, even if it holds
	; data in fields not provided by the scrap.
	
	IMS_UPDATE		enum	ImpexMergeState
	; Use the field data to augment the existing record, replacing any
	; existing data with non-empty data from the scrap, but leaving any
	; data where the scrap was empty
	
	IMS_AUGMENT		enum	ImpexMergeState
	; Use the field data to augment the existing record, ignoring scrap
	; data where the existing record already has data, but including data
	; from the scrap where no such data existed in the existing record.
	
	; error message enums

RolodexErrorValue		etype	word, 0
	ERROR_NO_MATCH		enum 	RolodexErrorValue
	ERROR_TOO_MANY_NAME	enum	RolodexErrorValue
	ERROR_NO_MODEM		enum	RolodexErrorValue
	ERROR_NO_MEMORY		enum	RolodexErrorValue
	ERROR_NO_CALENDAR	enum	RolodexErrorValue
	ERROR_NO_RECORD         enum    RolodexErrorValue
	ERROR_NO_DATA_FILE	enum	RolodexErrorValue
	ERROR_IN_BROWSE_MODE	enum	RolodexErrorValue
	ERROR_PORT_IN_USE	enum	RolodexErrorValue
	ERROR_SERIAL_LOAD	enum	RolodexErrorValue
	ERROR_NO_SERIAL_DRIVER	enum	RolodexErrorValue
	ERROR_INDEX_FIELD	enum	RolodexErrorValue
	ERROR_TEXT_TOO_LARGE	enum	RolodexErrorValue
	ERROR_NO_PHONE_ENTRY	enum	RolodexErrorValue
	ERROR_RESORT_WARNING	enum	RolodexErrorValue
	ERROR_NO_INDEX_IMPORT	enum	RolodexErrorValue
	ERROR_SEARCH_AT_END	enum	RolodexErrorValue
	ERROR_SEARCH_AT_BEG	enum	RolodexErrorValue
	ERROR_NO_EMAIL		enum	RolodexErrorValue
ifdef GPC
	WARNING_CONFIRM_DELETE	enum	RolodexErrorValue
endif
	ERROR_LAST		enum 	RolodexErrorValue

	; Constants enum generated For ERROR Macros

	MEMORY_BLOCK_DISCARDED	 		enum	FatalErrors
	DB_OPEN_BAD_FILE	 		enum	FatalErrors
	ROLODEX_UNDO_ERROR	 		enum	FatalErrors	
	IN_INSERT_RECORD_WITH_PHONE_COUNT	enum	FatalErrors
	IN_FIND_NEXT_RECORD			enum	FatalErrors
	NEW_RECORD_FLAG_MUST_BE_SET		enum	FatalErrors
	DIRECTORY_CREATE_ERROR			enum	FatalErrors
	NO_FILTER_HAS_BEEN_CREATED_BEFORE	enum	FatalErrors
	DISPLAY_ERROR_BAD_ERROR_VALUE		enum	FatalErrors
	ILLEGAL_HIST_TABLE_ENTRY_NUMBER		enum	FatalErrors
	ILLEGAL_FREQ_TABLE_ENTRY_NUMBER		enum	FatalErrors
	BOTH_UNDOITEM_AND_CURRECORD_ARE_ZERO	enum	FatalErrors
	CANNOT_HAVE_LIST_ENTRY_SELECTED_IN_CARD_VIEW	enum	FatalErrors
	SORT_BUFFER_IS_NOT_CURRENT		enum	FatalErrors
	CORRUPTED_DATA_FILE			enum	FatalErrors
	PRINT_LINE_BUFFER_OVERFLOW		enum	FatalErrors
	BAD_PICTURE_NUMBER  			enum    FatalErrors
	IMPORT_FIELD_MUST_BE_TEN		enum	FatalErrors
	CHAR_NOT_FOUND_IN_CHAR_SET_TABLES	enum	FatalErrors
	CORRUPT_IMPORT_FIELD_DATA		enum	FatalErrors
if DBCS_PCGEOS
	SIZE_OF_INDEX_IS_NOT_EVEN		enum	FatalErrors
	SIZE_OF_PHONE_NO_IS_NOT_EVEN		enum	FatalErrors

	TEXT_STRING_ODD_STRING_SIZE		enum	FatalErrors
	;	Text string to write has an odd-byte size in DBCS.

endif
	LETTER_TAB_STRING_TOO_LONG		enum	FatalErrors
	;	The string on the letter tab was too long.
	;	Consult the constant MAX_TAB_LETTER_LENGTH.

	CHAR_SET_INDEX_TOO_BIG			enum	FatalErrors
	;	The character set index (used to display the
	;	letter tab set) is larger than MAX_LETTER_TAB_SET.
	;	You might have corrupted data...

EC <	SPECIFIC_CONSTANT_WRONG			enum	FatalErrors	>
	;	Some specific constant has the wrong value.
	;	Check code for which constant is wrong.

	UNEXPECTED_LACK_OF_CHILDREN		enum	FatalErrors
	;	Expected to find a child, but system reports none

	; ---------------------------------------------------------------
	;  Constants used for debugging warning/notices

	CUR_PHONE_TYPE_ZERO			enum	Warnings
	;	The variable dgroup:curphoneType is zero.  Taking
	;	corrective action.  For future, you might want to
	;	see why this is happening.

DBCS <	COMPARE_KEYS_LONG			enum	Warnings	>
	;	Function CompareKeys is doing more than 2 chars.
	;	A section code has not been converted, yet.

EC <	PHONE_TYPE_BLOCK_BEYOND_4000_BYTES	enum	Warnings	>
	;	Just a note when the phone type name DBItem grows
	;	beyond 4000 bytes.  Will probably happen sooner in
	;	DBCS than SBCS version...


if FAX_SUPPORT

MOT_CURRENT_CARD		enum MailboxObjectType, MOT_FIRST_APP_TYPE

endif ; FAX_SUPPORT
;-----------------------------------------------------------------------------
;		Record constants
;-----------------------------------------------------------------------------

if PZ_PCGEOS
RecordStatusFlags	record	
	RSF_FILE_SAVE:1,		; called by FileSave
	RSF_INDEX_DIRTY:1,		; index field is dirty 
	RSF_ADDR_DIRTY:1, 		; obj other than index field is dirty
	RSF_FIND_LETTER:1,		; called by DB_FindLetter
	RSF_UPDATE:1,			; DB_CopyPhone has been called
	RSF_WARNING:1,			; index field empty warning was up
	RSF_DELETE:1,			; called by RolodexDelete
	RSF_NEW:1,			; record is not inserted yet
	RSF_SORT_EMPTY:1,		; sort field is empty
	RSF_ADDR_EMPTY:1,		; address field is empty
	RSF_NOTE_EMPTY:1,		; notes field is empty
	RSF_PHONETIC_EMPTY:1,		; phonetic field is empty
	RSF_ZIP_EMPTY:1,		; zip field is empty
	RSF_PHONE_EMPTY:1,		; phone type name field is empty
	RSF_PHONE_NO_EMPTY:1,		; phone number field is empty
	RSF_EMPTY:1,			; record is blank
RecordStatusFlags	end
else
RecordStatusFlags	record	
	:2, 
	RSF_FILE_SAVE:1,		; called by FileSave
	RSF_INDEX_DIRTY:1,		; index field is dirty 
	RSF_ADDR_DIRTY:1, 		; obj other than index field is dirty
	RSF_FIND_LETTER:1,		; called by DB_FindLetter
	RSF_UPDATE:1,			; DB_CopyPhone has been called
	RSF_WARNING:1,			; index field empty warning was up
	RSF_DELETE:1,			; called by RolodexDelete
	RSF_NEW:1,			; record is not inserted yet
	RSF_SORT_EMPTY:1,		; sort field is empty
	RSF_ADDR_EMPTY:1,		; address field is empty
	RSF_NOTE_EMPTY:1,		; notes field is empty
	RSF_PHONE_EMPTY:1,		; phone type name field is empty
	RSF_PHONE_NO_EMPTY:1,		; phone number field is empty
	RSF_EMPTY:1,			; record is blank
RecordStatusFlags	end
endif

	; dirty/clean status for each field in a record

if PZ_PCGEOS
DirtyFieldFlags		record
	DFF_INDEX:1,
	DFF_ADDR:1,
	DFF_NOTE:1,
	DFF_PHONETIC:1,
	DFF_ZIP:1,
	DFF_PHONE_TYPE:1,
	DFF_PHONE_NO:1,
	DFF_NOT_USED:1,
DirtyFieldFlags		end
else
DirtyFieldFlags		record
	:2
	DFF_INDEX:1,
	DFF_ADDR:1,
	DFF_NOTE:1,
	DFF_PHONE_TYPE:1,
	DFF_PHONE_NO:1,
	DFF_NOT_USED:1,
DirtyFieldFlags		end
endif

DFF_PHONE = mask DFF_PHONE_TYPE or mask DFF_PHONE_NO

	; letter tab status flags

LetterInstanceFlags	record
	:14,
	LIF_INVERTED:1,
	LIF_GRAB:1,
LetterInstanceFlags	end

	; phone fields status flags

PhoneFlags	record
	:6,
	PF_ENTRY_FOUND:1,
	PF_AUTO_DIAL:1,
	PF_TABLE_DIRTY:1,
	PF_SAVE_RECORD:1,
	PF_FREQ_TABLE:1,
	PF_DELETE_ALL:1,
	PF_DONT_INC_CUR_PHONE_INDEX:1,
	PF_QUICK_BUTTON:1,
	PF_DONT_CLEAR:1,
	PF_CONFIRM:1,
PhoneFlags	end

	; flags used for searching

if PZ_PCGEOS
SearchOptionFlag	record
	:3,
	SOF_REACHED_END:1,
	SOF_PHONETIC_SEARCH:1,
	SOF_ZIP_SEARCH:1,
	SOF_BACKWARD_SEARCH:1,
	SOF_NOTE_SEARCH:1,
	SOF_ADDR_SEARCH:1,
	SOF_PHONE_SEARCH:1,
	SOF_CAL_SEARCH:1,
	SOF_MATCH_FOUND:1,
	SOF_INDEX_SEARCH:1,
	SOF_NEW:1,
	SOF_MATCH_IN_PHONE:1,
	SOF_CUR_REC_ONE_MORE_TIME:1,
SearchOptionFlag	end
else
SearchOptionFlag	record
	:5,
	SOF_REACHED_END:1,
	SOF_BACKWARD_SEARCH:1,
	SOF_NOTE_SEARCH:1,
	SOF_ADDR_SEARCH:1,
	SOF_PHONE_SEARCH:1,
	SOF_CAL_SEARCH:1,
	SOF_MATCH_FOUND:1,
	SOF_INDEX_SEARCH:1,
	SOF_NEW:1,
	SOF_MATCH_IN_PHONE:1,
	SOF_CUR_REC_ONE_MORE_TIME:1,
SearchOptionFlag	end
endif

	; flags used in printing

PrintFlag	record
	;
	; This first group selects the format of the printout.  The
	; user has the choice of printing info on the current record
	; or on the entire collection of records.  There is also the
	; choice of printing all the info, or just the address info.
	; The final choice, PF_PHONES, prints a special list of all
	; phone numbers in the database.
	;
	PF_CUR_ADDRESS:1,		; current address only, envelope 
	PF_ADDRESSES:1,			; all addresses, for labels
	PF_CUR_REC:1,			; current record, all fields
	PF_ALL:1,			; all records, all fields
	PF_PHONES:1,			; print phone numbers format
	;
	; Print the Notes field for each record that's printed?  This
	; selection is turned off if "Print Phones" selected.
	;
	PF_NOTES:1,			; print the notes field for each
	;
	; Type of paper to print on
	;
	PF_LABELS:1,			; print address labels (single column)
	PF_TRAY:1,			; print tray feed labels
PrintFlag	end
	
	; flags used in setting up the modem

SerialFlowFlags	record
	:6,
	SFF_SOFTWARE:1,
	SFF_HARDWARE:1,
SerialFlowFlags	end

	; flags for the serial port

SerialSettingChangedFlags	record
	:4,
	SSCF_PORT:1,
	SSCF_BAUD:1,
	SSCF_FORMAT:1,
	SSCF_FLOW:1,
SerialSettingChangedFlags	end

ExportFlag	record
	:6
	EF_FILE_EXPORT:1,
	EF_CLIPBOARD_COPY:1,
ExportFlag	end

DialingOptionFlag	record
	:14
	DOF_CONFIRM:1,
	DOF_RESET:1,
DialingOptionFlag	end

if PZ_PCGEOS
SearchFieldOptionFlag	record
	:11
	SFOF_ADDR:1,
	SFOF_NOTE:1,
	SFOF_PHONETIC:1,
	SFOF_ZIP:1,
	SFOF_PHONE:1,
SearchFieldOptionFlag	end
else
SearchFieldOptionFlag	record
	:13
	SFOF_ADDR:1,
	SFOF_NOTE:1,
	SFOF_PHONE:1,
SearchFieldOptionFlag	end
endif

SortFlag	record
	:6
	SF_IGNORE_SPACE:1,
	SF_DONT_IGNORE_SPACE:1,
SortFlag	end

;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

	; data record structure in GeoDex

DB_Record	struct
	DBR_noPhoneNo		word	; number of phone numbers in a record 
    	DBR_notes		word	; DB item of notes text
	DBR_toPhone		word	; offset to phone number string
	DBR_toAddr		word	; offset to address string
	DBR_indexSize		word	; size of index field
	DBR_addrSize		word	; size of address field
	DBR_phoneDisp		byte	; phone number to display
PZ <	DBR_toPhonetic		word	; offset to phonetic number string>
PZ <	DBR_phoneticSize	word	; size of phonetic field	>
PZ <	DBR_toZip		word	; offset to zip number string	>
PZ <	DBR_zipSize		word	; size of zip field		>

DBCS <	even				; make sure word-aligned.	>
	;  strings for the phone, adddress, and if Pizza phonetic and zip
	;   are stored here..  The first is the "Index" field.
DB_Record	ends

;------------------------------------------------------------------------
	; phone entry structure within a single data record

PhoneEntry	struct
	PE_count	word		; number of phone calls made 
	PE_type		byte		; phone number type ID number
	PE_length	word		; length of phone number string 
DBCS <	even				; make sure word-aligned	>
	;  phone number as string is stored here..
PhoneEntry	ends

PE_strings	equ	size	PhoneEntry

;------------------------------------------------------------------------
	; main DB item handle table structure

TableEntry	struct
	TE_item		word		; handle of a record
SBCS<	TE_key		word    	; key field to search for	>
DBCS<	TE_key		wchar 2 dup(?)  ; key field to search for	>
DBCS<	TE_unused	word		; pad to 8 bytes		>
TableEntry	ends

;	M A C R O S
;
;	TableEntryIndexToOffset   <index>
;		convert an index to table offset, in place.
;	TableEntryOffsetToIndex   <offset>
;		Reduce a table offset to an index, in place.
;	TableEntryOffsetMask	  <offset>
;		Force offset to 'size TableRecord' boundry
;
if (size TableEntry) eq 4
 TableEntryIndexToOffset   macro	indexReg
		shl	indexReg, 1
		shl	indexReg, 1
 		endm

 TableEntryOffsetToIndex   macro	offsetReg
		shr	offsetReg, 1
		shr	offsetReg, 1
		endm

 TableEntryOffsetMask	   macro	offsetReg
		and	offsetReg, 1111111111111100b
		endm

elseif (size TableEntry) eq 8
 TableEntryIndexToOffset   macro	indexReg
		shl	indexReg, 1
		shl	indexReg, 1
		shl	indexReg, 1
 		endm

 TableEntryOffsetToIndex   macro	offsetReg
		shr	offsetReg, 1
		shr	offsetReg, 1
		shr	offsetReg, 1
		endm

 TableEntryOffsetMask	   macro	offsetReg
		and	offsetReg, 1111111111111000b
		endm

else
	ErrMessage <Please build TableEntry index-offset macros>
endif


;------------------------------------------------------------------------
	; quick dial entry structure

QuickViewEntry	struct
	QVE_item	word		; handle of a record
	QVE_key		word    	; key field to search for
	QVE_phoneID	byte		; phone number type name ID number
QuickViewEntry	ends

DBTransferHeader        struct
if DBCS_PCGEOS
	DBTH_delimiter          wchar
	DBTH_escDelimit         wchar
else
	DBTH_delimiter          char
	DBTH_escDelimit         char
endif
	DBTH_numFields          word
	DBTH_numRecords         word
	DBTH_maxSizeField       word
	DBTH_maxFields          word
	DBTH_maxRecords         word
DBTransferHeader        ends

PhoneTypeStruct	struct
	PTS_handle		hptr	;offset to text following structs
	PTS_size		word	;size of each text element
PhoneTypeStruct ends

;------------------------------------------------------------------------
	; udata from database module that needs to be saved.
	; Stored in map DBItem of database (first item).

GeodexMapBlock	struct

	GMB_numMainTab		word	(?) ; number of records in database
	GMB_offsetToNonAlpha	word	(?) ; offset to non-alphabetic records 
	GMB_numNonAlpha 	word	(?) ; number of non-alphabetic records
	GMB_endOffset		word	(?) ; offset to the end of main table

	; udata from quickDial module that needs to be saved

	GMB_numFreqTab		word	(?) ; number of entries in frequency table
	GMB_numHistTab		word	(?) ; number of entries in history table
	GMB_offsetFreqTab	word	(?) ; offset one past last entry in freq tab
	GMB_offsetHistTab	word	(?) ; offset one past last entry in hist tab

	; udata from phone module that needs to be saved

	GMB_totalPhoneNames	word	(?) ; total number of phone number type names
	GMB_curPhoneIndex	word 	(?) ; which phone number is displayed (1..N)

	; udata from rolodex module that needs to be saved

	GMB_mainTable		word	(?) ; main table DB handle
	GMB_freqTable		word	(?) ; DB handle of frequency table 
	GMB_histTable		word	(?) ; DB handle of history table
	GMB_phoneTypeBlk	word	(?) ; DB handle phone number type name block
	GMB_orgRecord		word	(?) ; original record handle before undo
	GMB_sortOption		SortFlag    ; tells you which sort option is used
	GMB_curLanguage 	word    (?) ; current language code (StandardLanguage)

	; phone numbers from phone options dialog box

if DBCS_PCGEOS
				even
	GMB_prefix		wchar	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
	GMB_curAreaCode 	wchar	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
	GMB_assumedAreaCode	wchar	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
else
	GMB_prefix		char	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
	GMB_curAreaCode 	char	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
	GMB_assumedAreaCode	char	DIAL_OPTION_TEXT_LENGTH+1	dup (?)
endif

GeodexMapBlock	ends


if	FAX_SUPPORT
;
; A subclass to keep UI up-to-date as the body type changes.
;
RolSendControlClass	class	MailboxSendControlClass
RolSendControlClass	endc

endif	; FAX_SUPPORT

;
; draw black border around primary contents on large screens
;
BlackBorderClass	class	GenInteractionClass
BlackBorderClass	endc

;
; for adding export feature
;
RolDocumentControlClass	class	GenDocumentControlClass
RolDocumentControlClass endc
