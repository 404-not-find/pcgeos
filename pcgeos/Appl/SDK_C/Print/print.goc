/********************************************************************
 *
 *      Copyright (c) Geoworks, Inc. 1996 - All Rights Reserved.
 *
 * PROJECT:     Print Sample Application
 * MODULE:      Static Objects and Methods
 * FILE:        print.goc
 *
 * AUTHOR:      Nathan Fiedler
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      9/4/96          Initial version
 *
 * DESCRIPTION:
 *      This sample application demonstrates how to print a
 *      large text object across multiple pages. It handles both
 *      the MSG_PRINT_GET_DOC_NAME and MSG_PRINT_START_PRINTING
 *      messages, which are sent by the PrintControl object during
 *      the printing of any document.
 *
 *      In this sample we use a VisLargeText object because it
 *      can hold a lot of text and provides us with methods for
 *      getting the page size during printing.
 *
 *      For some background on printing, PrintControl, and the
 *      spooler, please read Chapter 17 of the Objects reference.
 *      It covers the Spool library and everything you need to
 *      know to print. This sample is mostly concerned with how
 *      to print multiple pages of text.
 *
 * RCS STAMP:
 *	$Id: print.goc,v 1.1 97/04/04 16:41:28 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
    @include <stdapp.goh>
    @include <Objects/vLTextC.goh>  /* VisLargeTextClass */

/********************************************************************
 *              Constants
 *******************************************************************/

/********************************************************************
 *              Data Types
 *******************************************************************/

/********************************************************************
 *              Class Definitions
 *******************************************************************/
    @class PrintProcessClass, GenProcessClass;
    @endc;

      /*
       * We'll intercept the opening and closing messages
       * here so we can prepare the text object properly.
       */
    @class PrintContentClass, VisContentClass;
    @endc;

      /*
       * This object will do the printing and handle
       * any messages sent by the PrintControl.
       */
    @class PrintTextClass, VisLargeTextClass;
    @endc;

/********************************************************************
 *              Class Declarations
 *******************************************************************/
    @classdecl PrintProcessClass, neverSaved;
    @classdecl PrintContentClass;
    @classdecl PrintTextClass;

/********************************************************************
 *              Global Variable Definitions
 *******************************************************************/

/********************************************************************
 *              Static Object Resources
 *******************************************************************/

/********************************************************************
 *              Application Resource
 *******************************************************************/
@start Application;

@object GenApplicationClass PrintApp = {
    GI_visMoniker = list { @PrintTextMoniker };
    GI_comp = @PrintPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @PrintPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, MGCNLT_ACTIVE_LIST ) =
        @PrintPrintControl;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS ) =
        @PrintEditControl,
        @PrintPrintControl;
    ATTR_GEN_APPLICATION_PRINT_CONTROL = @PrintPrintControl;
}

@visMoniker PrintTextMoniker = "Print Sample";

@end Application;

/********************************************************************
 *              Interface Resource
 * Contains primary window and most UI objects.
 *******************************************************************/
@start Interface;

  /* Primary window */
@object GenPrimaryClass PrintPrimary = {
    GI_comp = @PrintFileGroup,
              @PrintEditGroup,
              @PrintView;
}

  /* File menu */
@object GenInteractionClass PrintFileGroup = {
    GI_attrs = @default | GA_KBD_SEARCH_PATH;
    GI_comp = @PrintPrintControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_FILE_MENU );
    HINT_SEEK_MENU_BAR;
}

  /* Print control UI. Output is the text object.
   * We've set up the PrintControl so it won't have
   * any page controls (such as which pages to print) nor
   * will it handle verification of the print job.
   * It will, however, show the progress of the print
   * job during the spooling. */
@object PrintControlClass PrintPrintControl = {
    GI_states = @default | GS_ENABLED;
    PCI_attrs = @default & ~( PCA_PAGE_CONTROLS | PCA_VERIFY_PRINT )
              | PCA_MARK_APP_BUSY
              | PCA_SHOW_PROGRESS
              | PCA_PROGRESS_PAGE;
    PCI_output = ( TO_APP_TARGET );
    PCI_docNameOutput = ( TO_APP_TARGET );
    PCI_docSizeInfo = { ( 7.5 * 72 ), ( 10 * 72 ), PT_PAPER,
                        { ( 0.5 * 72 ), ( 0.5 * 72 ),
                          ( 0.5 * 72 ), ( 0.5 * 72 ) } };
}

  /* Edit menu. We include this so we
   * can copy some large chunk of text into the
   * text object before printing. Saves us a lot
   * of typing in order to generate a test document. */
@object GenInteractionClass PrintEditGroup = {
    GI_attrs = @default | GA_KBD_SEARCH_PATH;
    GI_comp = @PrintEditControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_EDIT_MENU );
    HINT_SEEK_MENU_BAR;
}

  /* Provides editing tools and undo. */
@object GenEditControlClass PrintEditControl = {
    GI_attrs = @default | GA_KBD_SEARCH_PATH;
    GII_visibility = GIV_SUB_GROUP;
}

  /* Displays the text. */
@object GenViewClass PrintView = {
    GVI_attrs = @default | GVA_WINDOW_COORDINATE_MOUSE_EVENTS
                         | GVA_FOCUSABLE
                         | GVA_DRAG_SCROLLING;
    GVI_vertAttrs = @default | GVDA_SCROLLABLE;
    GVI_content = @PrintContent;
    HINT_DEFAULT_TARGET;
    HINT_DEFAULT_FOCUS;
}

@end Interface;

/********************************************************************
 *              Content Resource
 * Contains the content object which holds the text object.
 *******************************************************************/
@start Content;

@object PrintContentClass PrintContent = {
    VCNI_view = @PrintView;
    VCNI_attrs = @default | VCNA_LARGE_DOCUMENT_MODEL
                          | VCNA_WINDOW_COORDINATE_MOUSE_EVENTS
                          | VCNA_SAME_WIDTH_AS_VIEW;
}

@object PrintTextClass PrintText = {
    VTI_state = @default | VTS_TARGETABLE
                         | VTS_SELECTABLE
                         | VTS_EDITABLE;
    VTI_features = @default | VTF_ALLOW_UNDO;
    VTI_output = process;
    VLTI_displayMode = VLTDM_DRAFT_WITH_STYLES;
    VLTI_attrs = VLTA_EXACT_HEIGHT;
    VLTI_regionArray = @PrintTextRegionArray;
}

@chunk ChunkArrayHeader PrintTextRegionArray = {
    0, sizeof( VisLargeTextRegionArrayElement ),
    0, sizeof( ChunkArrayHeader )
};

@end Content;

/********************************************************************
 *              Local Function Definitions
 *******************************************************************/

/********************************************************************
 *              Code for PrintContentClass
 ********************************************************************

/********************************************************************
 *              MSG_META_CONTENT_VIEW_OPENING
 ********************************************************************
 * SYNOPSIS:     Content is becoming visible, so lets initialize
 *               the content and text object.
 * PARAMETERS:   optr view
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Let's first get the superclass behavior. Then
 *               set up the content to not manage the children
 *               (namely the text object). Add the text object as
 *               a child of the content. Also prepare the text
 *               object for user input.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    1/19/94         Initial version from VLTEXT.GOC.
 *******************************************************************/
@method PrintContentClass, MSG_META_CONTENT_VIEW_OPENING {
      /*
       * vself  - Used to set up content attributes.
       * ptSize - Point size of the text, used to set it.
       */
    VisContentInstance * vself;
    WWFixed              ptSize;

    @callsuper();

      /*
       * Set up the geometry for the content so
       * that the geometry manager is not used.
       */
    vself = ObjDerefVis( oself );
    vself->VI_attrs &= ~VA_MANAGED;
    vself->VI_optFlags &= ~( VOF_GEOMETRY_INVALID | VOF_GEO_UPDATE_PATH );
    vself->VI_geoAttrs |= VCGA_CUSTOM_MANAGE_CHILDREN;

      /*
       * Add the text object as a child of the content.
       * This must be done dynamically because the text
       * object is a visual child, not a generic one.
       */
    @call self::MSG_VIS_ADD_CHILD( @PrintText, CCO_FIRST );

      /*
       * Set up the text object to be large by having
       * it use a VM file for data storage and create its
       * data structures for handling multiple regions (pages).
       * Also have the text object grab the target (for EditControl)
       * and focus (for input without clicking the mouse first).
       * Set the font and point size and begin the undo
       * context (something that needs to be done).
       */
    @call PrintText::MSG_VIS_TEXT_SET_VM_FILE(
        ClipboardGetClipboardFile() );
    @send PrintText::MSG_VIS_LARGE_TEXT_CREATE_DATA_STRUCTURES();
    @send PrintText::MSG_VIS_NOTIFY_GEOMETRY_VALID();
    ptSize.WWF_int = 12;
    ptSize.WWF_frac = 0;
    @send PrintText::MSG_META_GRAB_TARGET_EXCL();
    @send PrintText::MSG_META_GRAB_FOCUS_EXCL();
    @send PrintText::MSG_VIS_TEXT_SET_FONT_ID( FID_DTC_URW_MONO,
        TEXT_ADDRESS_PAST_END, 1 );
    @send PrintText::MSG_VIS_TEXT_SET_POINT_SIZE( ptSize,
        TEXT_ADDRESS_PAST_END, 1 );
    @send process::MSG_GEN_PROCESS_UNDO_SET_CONTEXT( 1 );
} /* MSG_META_CONTENT_VIEW_OPENING */

/********************************************************************
 *              MSG_META_CONTENT_VIEW_CLOSING
 ********************************************************************
 * SYNOPSIS:     Content is closing down, so lets remove the
 *               text object from the content.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Free the text objects extra data storage and
 *               remove it from the content. Don't forget to
 *               call the superclass.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    1/19/94         Initial version from VLTEXT.GOC.
 *******************************************************************/
@method PrintContentClass, MSG_META_CONTENT_VIEW_CLOSING {

      /*
       * Free the large text data structures and
       * make the text object small again.
       */
    @call PrintText::MSG_VIS_TEXT_FREE_ALL_STORAGE( TRUE );
    @call PrintText::MSG_VIS_TEXT_SET_VM_FILE( NullHandle );
    @call self::MSG_VIS_REMOVE_CHILD( @PrintText, CCO_FIRST );

    @callsuper();
} /* MSG_META_CONTENT_VIEW_CLOSING */

/********************************************************************
 *              Code for PrintTextClass
 ********************************************************************

/********************************************************************
 *              MSG_PRINT_GET_DOC_NAME
 ********************************************************************
 * SYNOPSIS:     Sent by the PrintControl before it spools the
 *               print job. Must send back a job "name" or it won't
 *               print.
 * CALLED BY:    PrintControl
 * PARAMETERS:   optr printCtrlOD
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Set the name of the print job. If we don't handle
 *               this message then the print job will be cancelled
 *               by the spooler.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      9/5/92          Initial version
 *******************************************************************/
@method PrintTextClass, MSG_PRINT_GET_DOC_NAME {

    @send printCtrlOD::MSG_PRINT_CONTROL_SET_DOC_NAME(
        "Print Sample" );
} /* MSG_PRINT_GET_DOC_NAME */

/********************************************************************
 *              MSG_PRINT_START_PRINTING
 ********************************************************************
 * SYNOPSIS:     Print the text object.
 * CALLED BY:    PrintControl
 * PARAMETERS:   optr         printCtrlOD
 *               GStateHandle gstate
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Get printer margins, then send MSG_VIS_DRAW to
 *               text object with the DF_PRINT flag, then signal
 *               printing completed. Well, okay, it's a lot more
 *               than just that...
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      4/1/95          Initial version
 *******************************************************************/
@method PrintTextClass, MSG_PRINT_START_PRINTING {
      /*
       * iCurPage   - Current page being printed.
       * cNumPages  - Number of regions in text object (pages).
       * sPageSize  - Size of page from PrintControl.
       * pageWidth  - Width of paper.
       * pageHeight - Height of print area in points.
       * bContinue  - Indicates when to stop printing.
       * textSize   - Image size of text.
       * regPos     - Returned by MSG_VIS_LARGE_TEXT_GET_REGION_POS.
       *              Used to find the size of the text regions.
       */
    dword                                iCurPage;
    int                                  cNumPages;
    PageSizeReport                       sPageSize;
    word                                 pageWidth;
    dword                                pageHeight;
    Boolean                              bContinue;
    XYValueAsDWord                       textSize;
    VisLargeTextGetRegionPosReturnStruct regPos;

      /*
       * Get the paper size as set by the user and find the
       * page width and height without margins. Then set the
       * document size to reflect the current paper size.
       */
    @call printCtrlOD::MSG_PRINT_CONTROL_GET_PAPER_SIZE_INFO(
        &sPageSize );
    pageWidth  = sPageSize.PSR_width -
                 sPageSize.PSR_margins.PCMP_left -
                 sPageSize.PSR_margins.PCMP_right;
    pageHeight = sPageSize.PSR_height -
                 sPageSize.PSR_margins.PCMP_top -
                 sPageSize.PSR_margins.PCMP_bottom;
    @call printCtrlOD::MSG_PRINT_CONTROL_SET_DOC_SIZE(
        sPageSize.PSR_width, sPageSize.PSR_height );

      /*
       * Save text image size.
       * Set text width to printer page width.
       */
    textSize = @call self::MSG_VIS_LARGE_TEXT_GET_DRAFT_REGION_SIZE( 0 );
    @send self::MSG_VIS_LARGE_TEXT_SET_DRAFT_REGION_SIZE(
        pageWidth, pageHeight );

      /*
       * Set the number of pages to print by finding
       * the number of regions in the VisLargeText.
       */
    cNumPages = @call self::MSG_VIS_LARGE_TEXT_GET_REGION_COUNT();
    @call printCtrlOD::MSG_PRINT_CONTROL_SET_TOTAL_PAGE_RANGE(
        1, cNumPages );

      /*
       * This loop is from Concepts Code Display 23-1 on p809.
       * It is the main printing loop. It translates the text up
       * one page at a time while printing it. Actually, it
       * translates it one page the first time, two pages the
       * second time, three pages the third time, and so on.
       */
    for ( iCurPage = 0; iCurPage < cNumPages; iCurPage++ ) {
          /*
           * Check if the user wants to cancel printing.
           * If so, break out of the loop before we print
           * the current page.
           */
        bContinue = @call printCtrlOD::
            MSG_PRINT_CONTROL_REPORT_PROGRESS( PCPT_PAGE, iCurPage+1 );
        if ( FALSE == bContinue ) {
            break;
        }
          /*
           * Get the start position of the top of
           * the current page. We'll use it for translating
           * the text object upwards in order to
           * print the page we want.
           */
        GrSaveState( gstate );
        @call self::MSG_VIS_LARGE_TEXT_GET_REGION_POS( &regPos, iCurPage );
          /*
           * Set the clip region so we only include
           * exactly the height of this page. That is,
           * if the user has a page break in the text,
           * that will shorten the height of the page.
           * If we were to print more than the real height,
           * we'd get the text from the next page as well. Change
           * the sixth parameter to pageHeight to see what I mean.
           */
        GrSetClipRect( gstate, PCT_REPLACE,
                       sPageSize.PSR_margins.PCMP_left,
                       sPageSize.PSR_margins.PCMP_top,
                       pageWidth + sPageSize.PSR_margins.PCMP_right,
                       regPos.VLTGRPRS_height +
                       sPageSize.PSR_margins.PCMP_bottom );
          /*
           * Shift text up iCurPage pages and draw text.
           * Have printer form feed the page.
           */
        GrApplyTranslationDWord( gstate, sPageSize.PSR_margins.PCMP_left,
                                 -( regPos.VLTGRPRS_yPosition -
                                    sPageSize.PSR_margins.PCMP_top ) );
        GrInitDefaultTransform( gstate );
        @call self::MSG_VIS_DRAW( DF_PRINT, gstate );
        GrRestoreState( gstate );
        GrNewPage( gstate, PEC_FORM_FEED );
    } /* for iCurPage */

      /*
       * Restore previous text width and height.
       */
    @send self::MSG_VIS_LARGE_TEXT_SET_DRAFT_REGION_SIZE(
        DWORD_X( textSize ), DWORD_Y( textSize ) );

      /*
       * Wrap up the printing (tell PrintControl if
       * done printing or if user cancelled).
       */
    if ( FALSE == bContinue ) {
        @send printCtrlOD::MSG_PRINT_CONTROL_PRINTING_CANCELLED();
    }
    else {
        @send printCtrlOD::MSG_PRINT_CONTROL_PRINTING_COMPLETED();
    }
} /* MSG_PRINT_START_PRINTING */

/********************************************************************
 *              MSG_VIS_TEXT_FREE_ALL_STORAGE
 ********************************************************************
 * SYNOPSIS:     Free the space we allocated eariler.
 * CALLED BY:    MSG_META_CONTENT_VIEW_CLOSING
 * PARAMETERS:   Boolean removeElementArrays
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Set the chunk header to default values, and set
 *               the flags for the text object.
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      LH      9/21/92         Initial version
 *******************************************************************/
@method PrintTextClass, MSG_VIS_TEXT_FREE_ALL_STORAGE {
      /*
       * cahp  - Pointer to chunk array header.
       * vself - Pointer to our instance data.
       */
    ChunkArrayHeader * cahp;
    VisTextInstance  * vself;

    @callsuper();

      /*
       * Free the extra space that VisLargeText used.
       */
    MemLock( OptrToHandle( oself ) );
    LMemReAlloc( @PrintTextRegionArray, sizeof( ChunkArrayHeader ) );
    MemUnlock( OptrToHandle( oself ) );

      /*
       * Reset the chunk header to default values.
       */
    cahp = LMemDeref( @PrintTextRegionArray );
EC( ECCheckBounds( cahp ); )
    cahp->CAH_count       = 0;
    cahp->CAH_elementSize = sizeof( VisLargeTextRegionArrayElement );
    cahp->CAH_curOffset   = 0;
    cahp->CAH_offset      = sizeof( ChunkArrayHeader );

      /*
       * Set text object to small model and invalidate it visually.
       */
    vself = ObjDerefVis( oself );
    vself->VTI_storageFlags &= ~VTSF_LARGE;
    vself->VI_optFlags      |= VOF_GEOMETRY_INVALID;
} /* MSG_VIS_TEXT_FREE_ALL_STORAGE */

