/********************************************************************
 *
 *	Copyright (c) Geoworks 1991-1994 -- All Rights Reserved.
 *
 * PROJECT:	GEOS Sample Applications
 * MODULE:	SubUI
 * FILE:	SubUI.goc
 *
 * AUTHOR:	Tony Requist: 1994
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    1994            Initial version
 *
 * DESCRIPTION:
 *	This file source code for the SubUI application. This code
 *      will be compiled by GOC, and then linked by the GLUE linker
 *      to produce a runnable .geo application file. This file is
 *      written in C with additional GOC keywords. GOC keywords
 *      begin with the '@' sign.
 *
 *	This application demonstrates the concept and syntax of
 *      subclassing. In it, SubUITriggerClass is subclassed from
 *      GenTriggerClass (in the Generic UI). Notably, three things
 *      are shown in this application. First the new class,
 *      SubUITriggerClass, is defined and declared using the @class
 *      and @classdecl directives. In this subclass, both new messages
 *      and an instance data field are added to those already defined
 *      in GenTriggerClass. SubUITriggerClass adds the ability for a
 *      GenTrigger (which typically turns out to be a button in the
 *      UI) to change its moniker (text label). Second, objects of both
 *	GenTriggerClass and SubUITriggerClass are statically created
 *      (using @object). Finally, methods defining the functionality
 *      for SubUITriggerClass are declared (@method). Notice that methods
 *      are created for both a new message
 *      (MSG_SUBUI_TRIGGER_SWAP_MONIKERS) and for overriding a superclass
 *      message (MSG_GEN_TRIGGER_SEND_ACTION).
 *
 * 	When the application is launched, there are 3 sets of objects,
 *	arranged in columns. The first (leftmost) set consists of
 *      regular GenTriggerClass buttons. The second (middle) set is
 *      a group of buttons of SubUITriggerClass. The final (rightmost)
 *      set is a group of numeric objects (GenValueClass). Clicking
 *      on a leftmost GenTrigger will cause its corresponding
 *      NewTrigger button (to the right) to change its moniker. Also,
 *      clicking on a NewTrigger button will both change its own
 *      moniker and increment the GenValue object to its right.
 *
 * RCS STAMP:
 *	$Id: subui.goc,v 1.1 97/04/04 16:39:21 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include Files
 *******************************************************************/
    @include <stdapp.goh>

/********************************************************************
 *		Class Definitions
 *******************************************************************/

      /*
       * This process class definition is necessary, since every
       * thread-based application needs to have a subclass of
       * GenProcessClasss. Notice that SubUIProcessClass class
       * is defined, even though no new messages nor instance
       * data are added.
       */
    @class SubUIProcessClass, GenProcessClass;
    @endc;

      /*
       * This class definition is necessary so that the GOC compiler
       * knows that SubUITriggerClass is a sub-class of GenTriggerClass,
       * and that we have defined additional instance data at the
       * SubUITriggerClass level. Class definitions in GOC are enclosed
       * between the @class and @endc (end-class) keywords. It could
       * have been placed in a .goh file.
       */
    @class SubUITriggerClass, GenTriggerClass;

      /*
       * The @message keyword defines a message for SubUITriggerClass.
       * One message (MSG_SUBUI_TRIGGER_SWAP_MONIKERS) will cause the
       * trigger to swap the 2 defined monikers, changing what the
       * user sees onscreen.
       *
       * The other two messages have been defined in order to allow
       * basic access to the new instance data field (NTI_altMoniker).
       * Anytime new instance data fields are added, it is good style
       * to define the appropriate "GET" and "SET" messages. This
       * application does not actually use either message, since it
       * uses the higher level mechanism MSG_SUBUI_TRIGGER_SWAP_MONIKERS.
       * They are shown for demonstration purposes.
       */
    @message void MSG_SUBUI_TRIGGER_SWAP_MONIKERS();
    @message ChunkHandle MSG_SUBUI_TRIGGER_GET_ALTMONIKER();
    @message void MSG_SUBUI_TRIGGER_SET_ALTMONIKER(
        ChunkHandle newAltMoniker );

          /*
           * The @instance keyword sets aside a data slot in the
           * class defintion of SubUITriggerClass. This data slot is
           * named "NTI_altMoniker" and is a @visMoniker structure.
           * The @visMoniker keyword points out that this data type
           * is a visual moniker. Since visual monikers are stored in
           * their own chunks (outside of the object), this data slot
           * will actually contain a ChunkHandle to a visual moniker
           * chunk. No default value makes sense, so none is defined.
           */
        @instance @visMoniker NTI_altMoniker;
    @endc;

      /*
       * This class declaration allocates and fills the memory for
       * the class table, based on both the class definition (above)
       * and the methods defined (below).
       */
    @classdecl SubUIProcessClass, neverSaved;
    @classdecl SubUITriggerClass;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

  /*
   * The very top-level object of an application MUST be a
   * GenApplication object. The subui.gp file contains an "appobj"
   * statement which indicates that this "SubUIApp" object is in
   * fact the top-level UI object. This object should be within
   * its own resource so that GeoManager can load it quickly and
   * grab its icon without needing to load the entire application.
   * GeoManager will store this icon in its Token Database, so
   * that the icon image can be reused quickly.
   */
@object GenApplicationClass SubUIApp = {
    GI_visMoniker = list { @SubUITextMoniker };
    GI_comp = @SubUIPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @SubUIPrimary;
}

@visMoniker SubUITextMoniker = "C SubUI Sample Application";

@end AppResource;

/********************************************************************
 *		Interface Resource
 *******************************************************************/
@start Interface;

  /*
   * Every application usually needs at least one GenPrimary
   * object. This object serves as the main window of the
   * application. Inside this window, various UI components,
   * such as menus or lists, can be placed.
   */
@object GenPrimaryClass SubUIPrimary  = {
    GI_comp = @SubUIActivationButtons,
              @SubUINewTriggers,
              @SubUICounters;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

  /*
   * The 3 objects below (GenInteractionClass) are mainly
   * used to arrange their children onscreen to make this
   * application more visually pleasing. In its simplest
   * usage, a GenInteraction can be used for geometry
   * management of its children.
   */
@object GenInteractionClass SubUIActivationButtons  = {
    GI_visMoniker = "GenTriggerClass";
    GI_comp = @SubUIActivate1,
              @SubUIActivate2,
              @SubUIActivate3;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}

@object GenInteractionClass SubUINewTriggers  = {
    GI_visMoniker = " SubUITriggerClass Objects ";
    GI_comp = @SubUITrigger1,
              @SubUITrigger2,
              @SubUITrigger3;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_DRAW_IN_BOX;
}

@object GenInteractionClass SubUICounters  = {
    GI_visMoniker = "Counters";
    GI_comp = @SubUICounter1,
              @SubUICounter2,
              @SubUICounter3;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_CENTER_CHILDREN_HORIZONTALLY;

      /*
       * These hints line up the counters horizontally
       * with the trigger rows.
       */
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY;
    HINT_INCLUDE_ENDS_IN_CHILD_SPACING;
}

  /*
   * GenTrigger Objects
   *
   * Here we define an instance of the "GenTriggerClass" class from the
   * Generic UI. In doing so, we have to make sure that we specify the
   * instance data fields for both GenTriggerClass and its superclass,
   * GenClass, which are different from the default values.
   *
   * Since we want clicking on each GenTrigger to swap the monikers of its
   * corresponding NewTrigger, the GTI_actionMsg field is filled with
   * MSG_SUBUI_TRIGGER_SWAP_MONIKERS. The GTI_destination field is filled
   * with an optr to the corresponding NewTrigger (located on its right).
   * Clicking on the GenTrigger will send the GTI_actionMsg to the
   * GTI_destination object, thus causing the monikers to swap.
   */
@object GenTriggerClass SubUIActivate1 = {
    GI_visMoniker = "Activate #1 ->";
    GTI_actionMsg = MSG_SUBUI_TRIGGER_SWAP_MONIKERS;
    GTI_destination = @SubUITrigger1;
}

@object GenTriggerClass SubUIActivate2 = {
    GI_visMoniker = "Activate #2 ->";
    GTI_actionMsg = MSG_SUBUI_TRIGGER_SWAP_MONIKERS;
    GTI_destination = @SubUITrigger2;
}

@object GenTriggerClass SubUIActivate3 = {
    GI_visMoniker = "Activate #3 ->";
    GTI_actionMsg = MSG_SUBUI_TRIGGER_SWAP_MONIKERS;
    GTI_destination = @SubUITrigger3;
}

  /*
   * SubUITrigger Objects
   *
   * Here we define an instance of our "SubUITriggerClass" class
   * (see above). In doing so, we have to make sure that we specify
   * the instance data fields for SubUITriggerClass, its superclass
   * (GenTriggerClass), and its superclass (GenClass). Again, we
   * only need to fill in those instance data fields which are
   * different from the default values.
   *
   * The output descriptor (the combination of the GTI_actionMsg and
   * GTI_destination) in each NewTrigger causes its corresponding
   * GenValue to increment. Thus, when the user clicks on one of the
   * SubUINewTriggers, two things will happen. First, the monikers
   * will be swapped, due to the general behavior inherent in
   * SubUITriggerClass (see the methods for MSG_GEN_TRIGGER_SEND_ACTION
   * below). Second, the corresponding counter will be incremented due
   * to the output descriptor being delivered (which is object-specific).
   */
@object SubUITriggerClass SubUITrigger1 = {
    GI_visMoniker = "The original moniker";
    GTI_actionMsg = MSG_GEN_VALUE_INCREMENT;
    GTI_destination = @SubUICounter1;
    NTI_altMoniker = "and an alternate";
}

@object SubUITriggerClass SubUITrigger2 = {
    GI_visMoniker = "Hello...";
    GTI_actionMsg = MSG_GEN_VALUE_INCREMENT;
    GTI_destination = @SubUICounter2;
    NTI_altMoniker = "...Bye";
}

@object SubUITriggerClass SubUITrigger3 = {
    GI_visMoniker = "Knock, knock";
    GTI_actionMsg = MSG_GEN_VALUE_INCREMENT;
    GTI_destination = @SubUICounter3;
    NTI_altMoniker = "Who's there?";
}

  /*
   * GenValue Objects
   *
   * Here we define an instance of the "GenValueClass" class
   * from the Generic UI. These will be used to count the
   * number of times that one of the SubUITriggerClass objects
   * has been clicked on. Each GenValue is set up to only
   * display numbers and to change those numbers via program
   * control. The user will not be able to change them directly.
   */
@object GenValueClass SubUICounter1 = {
    GI_attrs = @default | GA_READ_ONLY;
}

@object GenValueClass SubUICounter2 = {
    GI_attrs = @default | GA_READ_ONLY;
}

@object GenValueClass SubUICounter3 = {
    GI_attrs = @default | GA_READ_ONLY;
}

@end Interface;


/********************************************************************
 *		Code for SubUITriggerClass
 *******************************************************************/

/********************************************************************
 *		MSG_SUBUI_TRIGGER_GET_ALTMONIKER
 ********************************************************************
 * SYNOPSIS:	 This method is the access function for the
 *		 SubUITriggerClass' instance datum, NTI_altMoniker.
 * PARAMETERS:	 void
 * RETURNS:      ChunkHandle
 * SIDE EFFECTS: none
 * STRATEGY:     Return the value of NTI_altMoniker.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ppc	10/21/94   	Initial Revision
 *******************************************************************/
@method SubUITriggerClass, MSG_SUBUI_TRIGGER_GET_ALTMONIKER
{

    return( pself->NTI_altMoniker );
} /* MSG_SUBUI_TRIGGER_GET_ALTMONIKER */

/********************************************************************
 *		MSG_SUBUI_TRIGGER_SET_ALTMONIKER
 ********************************************************************
 * SYNOPSIS:	 This method is the access function for the changing
 *		 SubUITriggerClass' instance datum, NTI_altMoniker.
 * PARAMETERS:	 ChunkHandle newAltMoniker
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Set the value of NTI_altMoniker.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ppc	10/21/94   	Initial Revision
 *******************************************************************/
@method SubUITriggerClass, MSG_SUBUI_TRIGGER_SET_ALTMONIKER
{

    pself->NTI_altMoniker = newAltMoniker;
} /* MSG_SUBUI_TRIGGER_SET_ALTMONIKER */


/********************************************************************
 *		MSG_SUBUI_TRIGGER_SWAP_MONIKERS
 ********************************************************************
 * SYNOPSIS:	 This method swaps the trigger's monikers and redraws
 *		 itself.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:	 Switch the moniker pointers.
 *		 Force the trigger to redraw itself.
 *		 We use two different approaches to accomplish this
 *               task. We use the pself directive to simply assign
 *               the pointer directly and we also use
 *               MSG_GEN_USE_VIS_MONIKER to re-assign the moniker in
 *               GI_visMoniler and to redraw the button onscreen with
 *               its new moniker.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	4/13/93   	Initial Revision
 *******************************************************************/
@method SubUITriggerClass, MSG_SUBUI_TRIGGER_SWAP_MONIKERS
{
      /*
       * tempMonikerHandle - A chunk handle is used to store the
       *                     temporary visual moniker handle.
       */
    ChunkHandle tempMonikerHandle;

      /*
       * First, we store the chunk handle of the trigger's alternate
       * moniker in this temporary chunk handle.
       */
    tempMonikerHandle = pself->NTI_altMoniker;

      /*
       * Now, we re-assign the chunk handle of the alternate moniker to
       * point at the moniker in the trigger's GI_visMoniker. At this
       * point, both monikers point at the same visual moniker chunk.
       */
    pself->NTI_altMoniker = pself->GI_visMoniker;

      /*
       * We use MSG_GEN_USE_VIS_MONIKER to re-assign the chunk handle of
       * GI_visMoniker, using the temporary chunk handle from before.
       * This finishes the moniker swapping and updates the screen
       * immediately (VUM_NOW).
       *
       * Since the message passes a value that's a local variable
       * (which resides on the stack), we use @call rather than @send:
       * use of the latter runs the risk that the method completes
       * and eliminates the local variable tempMonikerHandle, before
       * the message is actually delivered: whereupon, the handler
       * for the message will attempt to use a variable that no longer
       * exists, leading to unexpected results.
       */
    @call self::MSG_GEN_USE_VIS_MONIKER( tempMonikerHandle, VUM_NOW );
} /* MSG_SUBUI_TRIGGER_SWAP_MONIKERS */


/********************************************************************
 *		MSG_GEN_TRIGGER_SEND_ACTION
 ********************************************************************
 * SYNOPSIS:	 This message is sent from this object to itself when
 *		 the user activates the trigger. The Specific UI sends
 *		 this message as part of the internal functionality of
 *		 buttons. It has already been defined in GenTriggerClass,
 *		 so there is no need to re-define it in the @class
 *		 definition of SubUITriggerClass. Simply defining the
 *               method here both defines the routine and adds a pointer
 *               to itself in the class table for SubUITriggerClass.
 *               Thus it intercepts the message and adds some additional
 *               functionality. By default the superclass
 *               (GenTriggerClass) just sends the GTI_actionMsg to the
 *               GTI_destination object. Specifically, this method also
 *               invokes the moniker swapping on itself.
 * PARAMETERS:	 Boolean doublePressFlag
 * RETURNS:      word
 * SIDE EFFECTS: none
 * STRATEGY:	 Swap monikers by sending MSG_SUBUI_TRIGGER_SWAP_MONIKERS
 *               to itself. Then, allow the superclass to send the
 *               GTI_actionMsg, if any.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CJ	4/94   		Initial Revision
 ***********************************************************************/
@method SubUITriggerClass, MSG_GEN_TRIGGER_SEND_ACTION
{

      /*
       * First, swap the monikers
       */
    @send self::MSG_SUBUI_TRIGGER_SWAP_MONIKERS();

      /*
       * Allow the method defined in GenTriggerClass to send the
       * GTI_actionMsg to the GTI_destination.
       */
    @callsuper();
} /* MSG_GEN_TRIGGER_SEND_ACTION */

