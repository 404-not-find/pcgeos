/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	Sample Applications
 * MODULE:	Dynamic List Sample
 * FILE:	gendlist.goc
 *
 * AUTHOR:	Tony Requist: April 1, 1991
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    4/1/91          Initial version
 *	eb	10/11/94	show how to use HINT_FIXED_SIZE on list obj
 *      NF      9/26/96         Added EC code
 *
 * DESCRIPTION:
 *	This application demonstrates the use and management of a
 *	GenDynamicList object.
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	A dynamic list [Obj 11.4] allows one to provide the user with a list
 *	of items of any size, without the overhead of creating an object for
 *	each item. Instead, you tell the dynamic list how many items you've
 *	got in your list (which you store in whatever data structure is
 *	convenient), and it will ask you for a standard VisMoniker for each
 *	item as it needs to display it.
 *
 * RCS STAMP:
 *	$Id: gendlist.goc,v 1.1 97/04/04 16:38:51 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	GenDListProcessClass, GenProcessClass;


@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_GDLP_LIST_MONIKER_QUERY;
/*
 * Parameters: void (optr list, word item)
 *
 * Queries the destination for the moniker for the given item.
 *
 */

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GDLP_LIST_APPLY;
/*
 * Parameters: void (word selection, word numSelections, word flags)
 *
 * Sent to the destination when a user change is applied to the list.
 *
 */

@endc;

@classdecl	GenDListProcessClass, neverSaved;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass GenDListApp = {
    GI_visMoniker = list { @GenDListTextMoniker };
    GI_comp = @GenDListPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @GenDListPrimary;
}

@visMoniker GenDListTextMoniker = "C GenDList Sample Application";

@end	AppResource;


@start	Interface;


@object GenPrimaryClass GenDListPrimary  = {
    GI_comp = @GenDListDynamicList,
              @GenDListView;

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenDynamicListClass GenDListDynamicList = {

    /* Message and destination for when user-made changes are applied to
     * the list. */
    GIGI_applyMsg = MSG_GDLP_LIST_APPLY;
    GIGI_destination = process;

    /* Message to send to GIGI_destination to get a moniker for an item. */
    GDLI_queryMsg = MSG_GDLP_LIST_MONIKER_QUERY;

    /* Initial number of items in the list */
    GDLI_numItems = 16;

    /* Make the list scrollable. */
    HINT_ITEM_GROUP_SCROLLABLE;

    /* Make the initial selection C_WHITE.   In this example, we're keeping
     * track of colors, where the item position corresponds directly to a
     * color.
     */
    GIGI_selection = C_WHITE;
    GIGI_numSelections = 1;

    /* Make the list scrollable. */
    HINT_ITEM_GROUP_SCROLLABLE;

    /* Size list so that it shows 8 options */
    HINT_FIXED_SIZE = { 0,
		(SST_LINES_OF_TEXT | 8),
		8 };
}

/* View in which we display the currently-selected color */
@object GenViewClass GenDListView = {
    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;

    /* Set some document bounds (we'll just use 8 1/2 by 11 inches) */
    GVI_docBounds = {0, 0, 72*17/2, 11*72};

    GVI_content = process;
    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@end Interface;

/*
 ***************************************************************************
 *		Code for GenDListProcessClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_META_EXPOSED for GenDListProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Redraw the recently-exposed portion of the View
 * PARAMETERS:	    void (WindowHandle win)
 * SIDE EFFECTS:    the invalid region of the window is cleared out
 *
 * STRATEGY:	    The view takes care of displaying the color by setting
 *		    the background color of the window to what we
 *		    tell it, so all we have to do here is flush the
 *		    invalid portion of the window to make sure later
 *		    color changes are properly reflected.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	4/91		Initial Revision
 *
 ***********************************************************************/
@method GenDListProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;

    /* Create a graphics state for the window */
    gstate = GrCreateState(win);

    /* Pretend to update the window; this will flush the invalid region */
    GrBeginUpdate(gstate);
    GrEndUpdate(gstate);

    /* Don't need the graphics state for anything else */
    GrDestroyState(gstate);
}


@start ItemText, data;

@visMoniker BlackText = "Black";
@visMoniker DkBlueText = "Dark Blue";
@visMoniker DkGreenText = "Dark Green";
@visMoniker DkCyanText = "Dark Cyan";
@visMoniker DkRedText = "Dark Red";
@visMoniker DkVioletText = "Dark Violet";
@visMoniker BrownText = "Brown";
@visMoniker LtGrayText = "Light Grey";
@visMoniker DkGrayText = "Dark Grey";
@visMoniker LtBlueText = "Light Blue";
@visMoniker LtGreenText = "Light Green";
@visMoniker LtCyanText = "Light Cyan";
@visMoniker LtRedText = "Light Red";
@visMoniker LtVioletText = "Light Violet";
@visMoniker YellowText = "Yellow";
@visMoniker WhiteText = "White";

@end ItemText;


/***********************************************************************
 *		MSG_GDLP_LIST_MONIKER_QUERY for GenDListProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the moniker for an entry in the dynamic list,
 *	    	    as requested by the dynamic list.
 * PARAMETERS:	    void (optr list, word item)
 * SIDE EFFECTS:    The moniker for the requested item is sent to the
 *		        GenDynamicList
 *
 * STRATEGY:	    All the monikers we use lie within the same block,
 *	    	        so all we need is a table of the chunk handles,
 *			not the full optr.
 *
 *	    	    Using that table, construct the optr of the moniker
 *	    	        for the requested item and pass it to the dynamic
 *	    	    	list.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	3/16/92		Initial Revision
 *
 ***********************************************************************/
@method GenDListProcessClass, MSG_GDLP_LIST_MONIKER_QUERY
{
    static const ChunkHandle monikers[] = {
	OptrToChunk(@BlackText), 	/* item  0 = C_BLACK */
	OptrToChunk(@DkBlueText),	/* item  1 = C_BLUE */
	OptrToChunk(@DkGreenText),	/* item  2 = C_GREEN */
	OptrToChunk(@DkCyanText),	/* item  3 = C_CYAN */
	OptrToChunk(@DkRedText), 	/* item  4 = C_RED */
	OptrToChunk(@DkVioletText), 	/* item  5 = C_VIOLET */
	OptrToChunk(@BrownText), 	/* item  6 = C_BROWN */
	OptrToChunk(@LtGrayText),	/* item  7 = C_LIGHT_GRAY */
	OptrToChunk(@DkGrayText),	/* item  8 = C_DARK_GRAY */
	OptrToChunk(@LtBlueText),	/* item  9 = C_LIGHT_BLUE */
	OptrToChunk(@LtGreenText),	/* item 10 = C_LIGHT_GREEN */
	OptrToChunk(@LtCyanText),	/* item 11 = C_LIGHT_CYAN */
	OptrToChunk(@LtRedText), 	/* item 12 = C_LIGHT_RED */
	OptrToChunk(@LtVioletText), 	/* item 13 = C_LIGHT_VIOLET */
	OptrToChunk(@YellowText),	/* item 14 = C_YELLOW */
	OptrToChunk(@WhiteText) 	/* item 15 = C_WHITE */
    };
    optr    moniker;

    moniker = ConstructOptr(HandleOf(@BlackText),monikers[item]);
EC( ECCheckLMemOD( moniker ); )

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR(item, moniker);
}


/***********************************************************************
 *		MSG_GDLP_LIST_APPLY for GenDListProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Applies the user's change to the color list, altering
 *	    	    the color of the view whose purpose it is to display
 *	    	    the selected color
 * PARAMETERS:	    void (word selection, word numSelections, word flags)
 * SIDE EFFECTS:    The view's color changes
 *
 * STRATEGY:	    Because of the careful mapping of item number to
 *	    	        color index, all we have to do is pass the
 *			selected item number to the view as the color
 *	    	    	it should display.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	4/14/92		Initial Revision
 *
 ***********************************************************************/
@method GenDListProcessClass, MSG_GDLP_LIST_APPLY
{
  /* We'll just set the color of the view with this. */
  @call GenDListView::MSG_GEN_VIEW_SET_COLOR((byte) selection, CF_INDEX, 0);
}

