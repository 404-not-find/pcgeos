/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Sample Applications
MODULE:		Mailbox Library Samples
FILE:		songlistProcess.goc

AUTHOR:		Chung Liu, Dec  9, 1994

ROUTINES:
	Name			Description
	----			-----------
	SLCreateAndInitMapBlock
	SLProcessGEN_PROCESS_OPEN_APPLICATION
	SLProcessGEN_PROCESS_CLOSE_APPLICATION
	SLProcessSLP_ARTIST_MONIKER_QUERY
	SLProcessSLP_ARTIST_APPLY
	SLProcessSLP_RECORD_MONIKER_QUERY
	SLProcessSLP_RECORD_APPLY
	SLProcessSLP_SONG_MONIKER_QUERY
	SLProcessSLP_SONG_APPLY

	SLInitAddOrEditDialogForAdd
	SLInitAddOrEditDialogForEdit
	SLInitDeleteDialog
	SLProcessSLP_ARTIST_ADD
	SLProcessSLP_ARTIST_EDIT
	SLProcessSLP_ARTIST_DELETE
	SLProcessSLP_RECORD_ADD
	SLProcessSLP_RECORD_EDIT
	SLProcessSLP_RECORD_DELETE
	SLProcessSLP_SONG_ADD
	SLProcessSLP_SONG_EDIT
	SLProcessSLP_SONG_DELETE

	SLReplaceNotesFromDialog
	SLProcessSLP_ARTIST_REALLY_ADD
	SLProcessSLP_ARTIST_REALLY_EDIT
	SLProcessSLP_ARTIST_REALLY_DELETE
	SLProcessSLP_RECORD_REALLY_ADD
	SLProcessSLP_RECORD_REALLY_EDIT
	SLProcessSLP_RECORD_REALLY_DELETE
	SLProcessSLP_SONG_REALLY_ADD
	SLProcessSLP_SONG_REALLY_EDIT
	SLProcessSLP_SONG_REALLY_DELETE

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CL	12/ 9/94   	Initial version.

DESCRIPTION:
	

	$Id: songlistProcess.goc,v 1.1 97/04/04 16:40:22 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>
@include <songlistConstant.goh>
@include <songlistUI.goh>
#include <songlistUtils.h>
@include <songlistMailbox.goh>

@classdecl SLProcessClass, neverSaved;

/*
 * Global variables
 */
VMFileHandle SONGLIST_VM_FILE = 0;
VMBlockHandle SONGLIST_VM_MAP_BLOCK = 0;

VMBlockHandle SONGLIST_CURRENT_ARTIST_BLOCK = 0;
VMBlockHandle SONGLIST_CURRENT_RECORD_BLOCK = 0;
VMBlockHandle SONGLIST_CURRENT_SONG_BLOCK = 0;


/***********************************************************************
 *		SLCreateAndInitMapBlock
 ***********************************************************************
 * SYNOPSIS:	Allocate and initialize the map block for our data file.
 * CALLED BY:	SLProcessGEN_PROCESS_OPEN_APPLICATION
 * RETURN:	handle of map block
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/ 9/95   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle 
SLCreateAndInitMapBlock (VMFileHandle vmfh)
{
    VMBlockHandle vmbh;
    MemHandle mapHandle;
    SLDataBlock *dataPtr;
    VMChain *zeroChainPtr;

    vmbh = VMAlloc(vmfh,
		   sizeof(SLDataBlock) + (2*sizeof(TCHAR))
		   + sizeof(VMChain),
		   SL_MAP_ID);
    VMSetMapBlock(vmfh, vmbh);
    dataPtr = VMLock(vmfh, vmbh, &mapHandle);
    dataPtr->SLDB_treeHeader.VMCT_meta.VMC_next = VM_CHAIN_TREE;
    dataPtr->SLDB_treeHeader.VMCT_offset = sizeof (SLDataBlock);
    dataPtr->SLDB_treeHeader.VMCT_count = 1;
    dataPtr->SLDB_nameOffset = sizeof(SLDataBlock)
	+ sizeof(VMChain);
    dataPtr->SLDB_notesOffset =
	sizeof(SLDataBlock) + sizeof(VMChain) + sizeof(TCHAR);
    
    zeroChainPtr = (VMChain *)
	((byte *)dataPtr + sizeof(SLDataBlock));
    *zeroChainPtr = (VMChain) 0;
    
    VMDirty(mapHandle);
    VMUnlock(mapHandle);
    VMUpdate(SONGLIST_VM_FILE);

    return (vmbh);
}	/* End of SLCreateAndInitMapBlock.	*/


/***********************************************************************
 *		MSG_GEN_PROCESS_OPEN_APPLICATION for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize the application.
 * PARAMETERS:	    void (AppAttachFlags attachFlags, 
 *			  MemHandle launchBlock,
 *			  MemHandle extraState)
 * SIDE EFFECTS:    SONGLIST_VM_FILE and SONGLIST_VM_MAP_BLOCK are set.
 *
 * STRATEGY:
 *     Our data is stored in a file named after SL_DATA_FILE_NAME in
 *     the privdata directory.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    word vmStatus;
    word numChildren;

    @callsuper();

    /*
     * Attempt to open the data file, to see if it exists.
     */
    FilePushDir();
    FileSetStandardPath(SP_PRIVATE_DATA);

    SONGLIST_VM_FILE = VMOpen(SL_DATA_FILE_NAME,
			      VMAF_FORCE_READ_WRITE,
			      VMO_OPEN,
			      0);
    if (SONGLIST_VM_FILE == 0) {
	/* Unable to open data file for reason yet to be determined. */
	vmStatus = ThreadGetError();
	if (vmStatus == VM_FILE_NOT_FOUND) {
	    /* Data file does not exist yet.  Open and initialize it. */
	    SONGLIST_VM_FILE = VMOpen(SL_DATA_FILE_NAME,
				      VMAF_FORCE_READ_WRITE,
				      VMO_CREATE,
				      0);

	    if (SONGLIST_VM_FILE == 0) {
		/* couldn't create the file.  */
		vmStatus = ThreadGetError();
		UserStandardDialog((char *)0, (char *)0, (char *)0, (char *)0,
				   "Cannot create data file.", 
				   (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
				   (GIT_NOTIFICATION <<
				    CDBF_INTERACTION_TYPE_OFFSET));
	    } else {
		/* Data file created.  Now initialize it by creating a
		 * proper map block. */
		SONGLIST_VM_MAP_BLOCK = SLCreateAndInitMapBlock
		    (SONGLIST_VM_FILE);
	    }
	} else {
	    /* Couldn't open the file. what kind of error could this be? */
	    UserStandardDialog((char *)0, (char *)0, (char *)0, (char *)0,
			       "Cannot open data file.", 
			       (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
			       (GIT_NOTIFICATION <<
				CDBF_INTERACTION_TYPE_OFFSET));
	}
    } else {
	/* Data file opened successfully. */
	SONGLIST_VM_MAP_BLOCK = VMGetMapBlock(SONGLIST_VM_FILE);

	/* It is possible that we don't have a map block yet -- maybe 
	 * the machine crashed between when the data file was created, and
	 * the map block was committed.
	 */
	if (SONGLIST_VM_MAP_BLOCK == 0) {
	    /* If we don't have a map block yet, then just create one */
	    SONGLIST_VM_MAP_BLOCK = SLCreateAndInitMapBlock
		(SONGLIST_VM_FILE);
	}
    }

    /*
     * Make the lists start looking after themselves.
     */
    numChildren = SLVMTreeGetNumChildren(SONGLIST_VM_FILE,
					 SONGLIST_VM_MAP_BLOCK);
    @call SLArtistList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numChildren);
    @call SLRecordList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
    @call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

    FilePopDir();
}	/* End of MSG_GEN_PROCESS_OPEN_APPLICATION.	*/


/***********************************************************************
 *		MSG_GEN_PROCESS_CLOSE_APPLICATION for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    App is exiting.
 * PARAMETERS:	    MemHandle ();
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    VMClose(SONGLIST_VM_FILE, FILE_NO_ERRORS); /* no errors */
    return 0;
}	/* End of MSG_GEN_PROCESS_CLOSE_APPLICATION.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_MONIKER_QUERY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the moniker for the artist list.
 * PARAMETERS:	    void (optr list, word item)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 1/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_MONIKER_QUERY
{
    char *name;
    VMBlockHandle myArtistBlock;
    SLDataBlock *artistAddr;
    MemHandle artistHandle;

    myArtistBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					SONGLIST_VM_MAP_BLOCK,
					item);
    artistAddr = VMLock(SONGLIST_VM_FILE, myArtistBlock, &artistHandle);
    name = (char *)artistAddr + artistAddr->SLDB_nameOffset;
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, name);
    VMUnlock(artistHandle);
}	/* End of MSG_SLP_ARTIST_MONIKER_QUERY.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_APPLY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set things according to the artist list selection
 * PARAMETERS:	    void (word selection, word numSelections, word flags)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_APPLY
{
    VMBlockHandle myArtistBlock;
    word numChildren;

    if (selection == GIGS_NONE) {
	/* The user clicked on the pre-existing selection, de-selecting it.
	 * So now we are left with no selections on the artist list.
	 * We have to disable a bunch of triggers, and empty the record
	 * and song lists.
	 */
	@call SLArtistEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLArtistDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLRecordAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_ARTIST_BLOCK = 0;

	/* Record list should also become de-selected, because there is
	 * no artist. */
	@call SLRecordList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
	@call SLRecordEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLRecordDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_RECORD_BLOCK = 0;
    
	@call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
	@call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_SONG_BLOCK = 0;

	/* There are no artists, records, or songs selected.  Therefore
	 * the default object type should be to send all artists.
	 */
	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_ALL_ARTISTS);
    } else {
	/* The user changed the artist selection.  Update the record
	 * list to reflect new artist selection, and empty the song list.
	 * Triggers may also have to be enabled/disabled.
	 */
	@call SLArtistEditTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call SLArtistDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call SLRecordAddTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

	myArtistBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					    SONGLIST_VM_MAP_BLOCK,
					    selection);
	numChildren = SLVMTreeGetNumChildren(SONGLIST_VM_FILE, myArtistBlock);

	SONGLIST_CURRENT_ARTIST_BLOCK = myArtistBlock;
	@call SLRecordList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numChildren);

	/* When a new artist is selected, there should be no selection 
	 * in the record list, so the song list should be empty. */
	@call SLRecordEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLRecordDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_RECORD_BLOCK = 0;

 	@call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
	SONGLIST_CURRENT_SONG_BLOCK = 0;

	/* At this point, an artist is selected, but no records or songs
	 * are selected.  Notify the send control that that we would like
	 * MOT_CURRENT_ARTIST to be the send default.
	 */
	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_CURRENT_ARTIST);
    }


    SLUpdateText(SONGLIST_VM_FILE, SONGLIST_CURRENT_ARTIST_BLOCK, 0, 0);
}	/* End of MSG_SLP_ARTIST_APPLY.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_MONIKER_QUERY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the moniker for the record list
 * PARAMETERS:	    void (optr list, word item)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_MONIKER_QUERY
{
    char *name;
    VMBlockHandle myRecordBlock;
    SLDataBlock *recordAddr;
    MemHandle recordHandle;

    if (SONGLIST_CURRENT_ARTIST_BLOCK) {
	myRecordBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					    SONGLIST_CURRENT_ARTIST_BLOCK,
					    item);
	recordAddr = VMLock(SONGLIST_VM_FILE, myRecordBlock, &recordHandle);
	name = (char *)recordAddr + recordAddr->SLDB_nameOffset;
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, name);
	VMUnlock(recordHandle);
    }
}	/* End of MSG_SLP_RECORD_MONIKER_QUERY.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_APPLY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set things according to record list selection
 * PARAMETERS:	    void (word selection, word numSelections, word flags)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_APPLY
{
    VMBlockHandle myRecordBlock;
    word numChildren;

    if (selection == GIGS_NONE) {
	/* The user de-selected the record selection.  Without a record
	 * selection, the song list should be empty, and certain triggers
	 * disabled.
	 */
	@call SLRecordEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLRecordDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_RECORD_BLOCK = 0;

	/* Song list should also become de-selected, because there is
	 * no record. */
	@call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
 	@call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_SONG_BLOCK = 0;

	/* The record was de-selected, but the artist is still selected.
	 * Therefore the default MailboxObjectType should be artist.
	 */
	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_CURRENT_ARTIST);
    } else {
	/* The user changed the record selection.  Update the song list
	 * accordingly, and set triggers appropriately. 
	 */
	@call SLRecordEditTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call SLRecordDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call SLSongAddTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

	myRecordBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					    SONGLIST_CURRENT_ARTIST_BLOCK,
					    selection);
	numChildren = SLVMTreeGetNumChildren(SONGLIST_VM_FILE, myRecordBlock);
	SONGLIST_CURRENT_RECORD_BLOCK = myRecordBlock;

 	@call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
	SONGLIST_CURRENT_SONG_BLOCK = 0;
	@call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numChildren);

	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_CURRENT_RECORD);
    }

    SLUpdateText(SONGLIST_VM_FILE,
		 SONGLIST_CURRENT_ARTIST_BLOCK,
		 SONGLIST_CURRENT_RECORD_BLOCK,
		 0);
}	/* End of MSG_SLP_RECORD_APPLY.	*/


/***********************************************************************
 *		MSG_SLP_SONG_MONIKER_QUERY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set the moniker for the song list
 * PARAMETERS:	    void (optr list, word item)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_MONIKER_QUERY
{
    char *name;
    VMBlockHandle mySongBlock;
    SLDataBlock *songAddr;
    MemHandle songHandle;

    if (SONGLIST_CURRENT_RECORD_BLOCK) {
	mySongBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					    SONGLIST_CURRENT_RECORD_BLOCK,
					    item);
	songAddr = VMLock(SONGLIST_VM_FILE, mySongBlock, &songHandle);
	name = (char *)songAddr + songAddr->SLDB_nameOffset;
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, name);
	VMUnlock(songHandle);
    }
}	/* End of MSG_SLP_SONG_MONIKER_QUERY.	*/


/***********************************************************************
 *		MSG_SLP_SONG_APPLY for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set things according to the song list selection.
 * PARAMETERS:	    void (word selection, word numSelections, word flags)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_APPLY
{
    VMBlockHandle mySongBlock;

    if (selection == GIGS_NONE) {
	/* The user de-selected the song selection.  Disable the song
	 * edit and delete triggers. */
 	@call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	SONGLIST_CURRENT_SONG_BLOCK = 0;

	/* Since there isn't a song selection anymore, the default 
	 * MailboxObjectType should be MOT_CURRENT_RECORD. */
	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_CURRENT_RECORD);
    } else {
	/* The user changed the song selection. Enable triggers
	 */
	@call SLSongEditTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call SLSongDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

	mySongBlock = SLVMTreeGetNthChild(SONGLIST_VM_FILE,
					  SONGLIST_CURRENT_RECORD_BLOCK,
					  selection);
	
	SONGLIST_CURRENT_SONG_BLOCK = mySongBlock;
	
	@call SLSendControl::MSG_META_NOTIFY(MANUFACTURER_ID_GEOWORKS,
					     GWNT_MAILBOX_SEND_CONTEXT,
					     MOT_CURRENT_SONG);
    }
    SLUpdateText(SONGLIST_VM_FILE,
		 SONGLIST_CURRENT_ARTIST_BLOCK,
		 SONGLIST_CURRENT_RECORD_BLOCK,
		 SONGLIST_CURRENT_SONG_BLOCK);
}	/* End of MSG_SLP_SONG_APPLY.	*/

/*
 *
 * Routines to add and edit entries.
 *
 */


/***********************************************************************
 *		SLInitAddOrEditDialogForAdd
 ***********************************************************************
 * SYNOPSIS:	Setup SLAddOrEditDialog to edit an item.
 * CALLED BY:	SLProcessSLP_ARTIST_ADD, etc.
 * RETURN:	void
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
void
SLInitAddOrEditDialogForAdd (char *dialogMoniker,
			      Message actionMsg)
{
    /* When adding an entry, the name text object should be editable, 
     * so clear the GA_READ_ONLY attribute. */
    @call SLAddOrEditNameText::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call SLAddOrEditNameText::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
    @call SLAddOrEditNameText::MSG_GEN_SET_USABLE(VUM_NOW);

    /* clear previous entry */
    @call SLAddOrEditNameText::MSG_VIS_TEXT_DELETE_ALL();
    @call SLAddOrEditNotesText::MSG_VIS_TEXT_DELETE_ALL();

    @send SLAddOrEditTrigger::MSG_GEN_TRIGGER_SET_ACTION_MSG(actionMsg);
    @send SLAddOrEditDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	(dialogMoniker, VUM_NOW);
    @send SLAddOrEditDialog::MSG_GEN_INTERACTION_INITIATE();
}	/* End of SLInitAddOrEditDialogForAdd.	*/


/***********************************************************************
 *		SLInitAddOrEditDialogForEdit
 ***********************************************************************
 * SYNOPSIS:	Setup SLAddOrEditDialog to edit an item.
 * CALLED BY:	SLProcessSLP_ARTIST_EDIT, etc.
 * RETURN:	void
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
void
SLInitAddOrEditDialogForEdit (VMFileHandle vmfh,
			      VMBlockHandle vmbh,
			      char *dialogMoniker,
			      Message actionMsg)
{

    SLDataBlock *dataPtr;
    MemHandle dataHandle;
    char *name, *notes;

    /* When editing an entry, the name text object should not be editable, 
     * so set the GA_READ_ONLY attribute. */
    @call SLAddOrEditNameText::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call SLAddOrEditNameText::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
    @call SLAddOrEditNameText::MSG_GEN_SET_USABLE(VUM_NOW);

    /* Place name and notes of current artist in the appropriate fields. */
    dataPtr = VMLock(vmfh, vmbh, &dataHandle);
    name = (char *)dataPtr + dataPtr->SLDB_nameOffset;
    @call SLAddOrEditNameText::MSG_VIS_TEXT_REPLACE_ALL_PTR(name, 0);

    notes = (char *)dataPtr + dataPtr->SLDB_notesOffset;
    @call SLAddOrEditNotesText::MSG_VIS_TEXT_REPLACE_ALL_PTR(notes, 0);

    VMUnlock(dataHandle);

    /* setup and initiate the edit dialog. */
    @send SLAddOrEditTrigger::MSG_GEN_TRIGGER_SET_ACTION_MSG(actionMsg);
    @send SLAddOrEditDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	(dialogMoniker, VUM_NOW);
    @send SLAddOrEditDialog::MSG_GEN_INTERACTION_INITIATE();
}	/* End of SLInitAddOrEditDialogForEdit.	*/


/***********************************************************************
 *		SLInitDeleteDialog
 ***********************************************************************
 * SYNOPSIS:	Setup SLDeleteDialog to delete an item.
 * CALLED BY:	SLProcessSLP_ARTIST_DELETE, etc.
 * RETURN:	void
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
void
SLInitDeleteDialog (VMFileHandle vmfh,
		    VMBlockHandle vmbh,
		    char *dialogMoniker,
		    Message actionMsg)
{
    SLDataBlock *dataPtr;
    MemHandle dataHandle;
    char *name;

    /* Place name of current artist in the appropriate field. */
    dataPtr = VMLock(vmfh, vmbh, &dataHandle);
    name = (char *)dataPtr + dataPtr->SLDB_nameOffset;
    @call SLDeleteText::MSG_VIS_TEXT_REPLACE_ALL_PTR(name, 0);

    VMUnlock(dataHandle);

    /* setup and initiate the edit dialog. */
    @send SLDeleteTrigger::MSG_GEN_TRIGGER_SET_ACTION_MSG(actionMsg);
    @send SLDeleteDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	(dialogMoniker, VUM_NOW);
    @send SLDeleteDialog::MSG_GEN_INTERACTION_INITIATE();
    
}	/* End of SLInitDeleteDialog.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to add an artist.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 2/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_ADD
{
    SLInitAddOrEditDialogForAdd("Add Artist", MSG_SLP_ARTIST_REALLY_ADD);
}	/* End of MSG_SLP_ARTIST_ADD.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up a dialog box to edit the artist entry.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_EDIT
{
    SLInitAddOrEditDialogForEdit(SONGLIST_VM_FILE,
				 SONGLIST_CURRENT_ARTIST_BLOCK,
				 "Edit Artist",
				 MSG_SLP_ARTIST_REALLY_EDIT);
}	/* End of MSG_SLP_ARTIST_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up a dialog box to confirm deletion.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_DELETE
{
    SLInitDeleteDialog(SONGLIST_VM_FILE,
		       SONGLIST_CURRENT_ARTIST_BLOCK,
		       "Delete Artist",
		       MSG_SLP_ARTIST_REALLY_DELETE);
}	/* End of MSG_SLP_ARTIST_DELETE.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to add a record.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 2/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_ADD
{
    SLInitAddOrEditDialogForAdd("Add Record", MSG_SLP_RECORD_REALLY_ADD);
}	/* End of MSG_SLP_RECORD_ADD.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to edit a record.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_EDIT
{
    SLInitAddOrEditDialogForEdit(SONGLIST_VM_FILE,
				 SONGLIST_CURRENT_RECORD_BLOCK,
				 "Edit Record",
				 MSG_SLP_RECORD_REALLY_EDIT);
}	/* End of MSG_SLP_RECORD_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to delete a record
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_DELETE
{
    SLInitDeleteDialog(SONGLIST_VM_FILE,
		       SONGLIST_CURRENT_RECORD_BLOCK,
		       "Delete Record",
		       MSG_SLP_RECORD_REALLY_DELETE);
}	/* End of MSG_SLP_RECORD_DELETE.	*/


/***********************************************************************
 *		MSG_SLP_SONG_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to add a song.
 * PARAMETERS:	    void (optr trigger)
n * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 2/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_ADD
{
    SLInitAddOrEditDialogForAdd("Add Song", MSG_SLP_SONG_REALLY_ADD);
}	/* End of MSG_SLP_SONG_ADD.	*/


/***********************************************************************
 *		MSG_SLP_SONG_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to edit a song
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_EDIT
{
    SLInitAddOrEditDialogForEdit(SONGLIST_VM_FILE,
				 SONGLIST_CURRENT_SONG_BLOCK,
				 "Edit Song",
				 MSG_SLP_SONG_REALLY_EDIT);
}	/* End of MSG_SLP_SONG_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_SONG_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Bring up the dialog to delete a song.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_DELETE
{
    SLInitDeleteDialog(SONGLIST_VM_FILE,
		       SONGLIST_CURRENT_SONG_BLOCK,
		       "Delete Song",
		       MSG_SLP_SONG_REALLY_DELETE);
}	/* End of MSG_SLP_SONG_DELETE.	*/


/***********************************************************************
 *		SLReplaceNotesFromDialog
 ***********************************************************************
 * SYNOPSIS:	Change the notes of the SLDataBlock based on the 
 *              SLAddOrEditNotes text object.
 * CALLED BY:	SLProcessSLP_ARTIST_REALLY_EDIT, etc.
 * RETURN:	void
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
void
SLReplaceNotesFromDialog (VMFileHandle vmfh,
			  VMBlockHandle vmbh)
{
    char *newNotes;
    MemHandle notesHandle;

    /* 
     * dismiss the interaction
     */
    @call SLAddOrEditDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);

    /* Get the whole text into a memory block */
    notesHandle = @call SLAddOrEditNotesText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    newNotes = (char *)MemLock(notesHandle);
    SLReplaceNotes(vmfh, vmbh, newNotes);
    MemUnlock(notesHandle);
    MemFree(notesHandle);
    
    SLUpdateText(SONGLIST_VM_FILE,
		 SONGLIST_CURRENT_ARTIST_BLOCK,
		 SONGLIST_CURRENT_RECORD_BLOCK,
		 SONGLIST_CURRENT_SONG_BLOCK);
}	/* End of SLReplaceNotesFromDialog.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_REALLY_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Add an artist from the dialog info.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *      Alloc a new artist block, and fill it in.
 *      Make artist block a child of the map block.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 2/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_REALLY_ADD
{
    VMBlockHandle newBlock;

    /* dismiss the interaction */
    @call SLAddOrEditDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);

    /* Allocate a new block, containing info from the interaction */
    newBlock = SLAllocAndInitDataBlockFromDialog(SONGLIST_VM_FILE,
						 SL_ARTIST_ID);

    /* Add the artist block as a child of the map block. */
    SLVMTreeAddChild(SONGLIST_VM_FILE, SONGLIST_VM_MAP_BLOCK, newBlock);

    @call SLArtistList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);
}	/* End of MSG_SLP_ARTIST_REALLY_ADD.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_REALLY_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Change the notes of the artist.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_REALLY_EDIT
{
    SLReplaceNotesFromDialog(SONGLIST_VM_FILE, SONGLIST_CURRENT_ARTIST_BLOCK);
}	/* End of MSG_SLP_ARTIST_REALLY_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_ARTIST_REALLY_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Delete an artist.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_ARTIST_REALLY_DELETE
{
    word sel;

    /* 
     * dismiss the interaction
     */
    @call SLDeleteDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);
    sel = @call SLArtistList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* 
     * Delete the artist block.
     */
    SLVMTreeDeleteChild(SONGLIST_VM_FILE,
			SONGLIST_VM_MAP_BLOCK,
			SONGLIST_CURRENT_ARTIST_BLOCK);

    /*
     * disable all those triggers.
     */
    @call SLArtistEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLArtistDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLRecordAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_ARTIST_BLOCK = 0;
    @call SLArtistList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(sel, 1);
	
    @call SLRecordEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLRecordDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLSongAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_RECORD_BLOCK = 0;
    @call SLRecordList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

    @call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_SONG_BLOCK = 0;
    @call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
    
    SLUpdateText(SONGLIST_VM_FILE, 0, 0, 0);
}	/* End of MSG_SLP_ARTIST_REALLY_DELETE.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_REALLY_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Add a record from the dialog info.
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 7/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_REALLY_ADD
{
    VMBlockHandle newBlock;

    /* dismiss the interaction */
    @call SLAddOrEditDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);

    if (SONGLIST_CURRENT_ARTIST_BLOCK) {
	/* Allocate a new block, containing info from the interaction */
	newBlock = SLAllocAndInitDataBlockFromDialog(SONGLIST_VM_FILE,
						     SL_RECORD_ID);

	/* Add the artist block as a child of the map block. */
	SLVMTreeAddChild(SONGLIST_VM_FILE,
			 SONGLIST_CURRENT_ARTIST_BLOCK,
			 newBlock);
    }
    @call SLRecordList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);
}	/* End of MSG_SLP_RECORD_REALLY_ADD.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_REALLY_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Change the notes of the record item
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_REALLY_EDIT
{
    SLReplaceNotesFromDialog(SONGLIST_VM_FILE, SONGLIST_CURRENT_RECORD_BLOCK);
}	/* End of MSG_SLP_RECORD_REALLY_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_RECORD_REALLY_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Delete a record
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_RECORD_REALLY_DELETE
{
    word sel;

    /* 
     * dismiss the interaction
     */
    @call SLDeleteDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);
    sel = @call SLRecordList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* 
     * Delete the artist block.
     */
    SLVMTreeDeleteChild(SONGLIST_VM_FILE,
			SONGLIST_CURRENT_ARTIST_BLOCK,
			SONGLIST_CURRENT_RECORD_BLOCK);

    /*
     * disable all those triggers.
     */

    @call SLRecordEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLRecordDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLSongAddTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_RECORD_BLOCK = 0;
    @call SLRecordList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(sel, 1);

    @call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_SONG_BLOCK = 0;
    @call SLSongList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);
    
    SLUpdateText(SONGLIST_VM_FILE, SONGLIST_CURRENT_ARTIST_BLOCK, 0, 0);
}	/* End of MSG_SLP_RECORD_REALLY_DELETE.	*/



/***********************************************************************
 *		MSG_SLP_SONG_REALLY_ADD for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Add song from the dialog info
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_REALLY_ADD
{
    VMBlockHandle newBlock;

    /* dismiss the interaction */
    @call SLAddOrEditDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);

    if (SONGLIST_CURRENT_RECORD_BLOCK) {
	/* Allocate a new block, containing info from the interaction */
	newBlock = SLAllocAndInitDataBlockFromDialog(SONGLIST_VM_FILE,
						     SL_SONG_ID);

	/* Add the artist block as a child of the map block. */
	SLVMTreeAddChild(SONGLIST_VM_FILE,
			 SONGLIST_CURRENT_RECORD_BLOCK,
			 newBlock);
    }
    @call SLSongList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);
}	/* End of MSG_SLP_SONG_REALLY_ADD.	*/


/***********************************************************************
 *		MSG_SLP_SONG_REALLY_EDIT for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Edit the notes for the song item.
 * PARAMETERS:	    void (optr trigger);
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_REALLY_EDIT
{
    SLReplaceNotesFromDialog(SONGLIST_VM_FILE, SONGLIST_CURRENT_SONG_BLOCK);
}	/* End of MSG_SLP_SONG_REALLY_EDIT.	*/


/***********************************************************************
 *		MSG_SLP_SONG_REALLY_DELETE for SLProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Delete a song
 * PARAMETERS:	    void (optr trigger)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
@method SLProcessClass, MSG_SLP_SONG_REALLY_DELETE
{
    word sel;

    /* dismiss the interaction  */
    @call SLDeleteDialog::MSG_GEN_GUP_INTERACTION_COMMAND
	(IC_INTERACTION_COMPLETE);

    sel = @call SLSongList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* 
     * Delete the artist block.
     */
    SLVMTreeDeleteChild(SONGLIST_VM_FILE,
			SONGLIST_CURRENT_RECORD_BLOCK,
			SONGLIST_CURRENT_SONG_BLOCK);

    /*
     * disable all those triggers.
     */
    @call SLSongEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call SLSongDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    SONGLIST_CURRENT_SONG_BLOCK = 0;
    @call SLSongList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(sel, 1);
    
    SLUpdateText(SONGLIST_VM_FILE,
		 SONGLIST_CURRENT_ARTIST_BLOCK,
		 SONGLIST_CURRENT_RECORD_BLOCK,
		 0);

}	/* End of MSG_SLP_SONG_REALLY_DELETE.	*/


