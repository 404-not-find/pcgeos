/********************************************************************
 *
 * 	Copyright (c) Geoworks 1992-96 -- All Rights Reserved.
 *
 * PROJECT:	Sample Applications
 * MODULE: 	Generic Tree test app
 * FILE:   	gentree.goc
 *
 * AUTHOR: 	Tom Manshreck, Oct  9, 1992
 *
 * REVISION HISTORY:
 * 	Name	Date		Description
 * 	----	----		-----------
 * 	TM	10/9/92   	Initial version
 *      NF      9/18/96         Added EC code
 *
 * DESCRIPTION:
 *      Generic objects are arranged in applications within
 * 	a generic tree structure. Composite links (the GI_comp
 * 	and GI_link instance fields) form the optr connections
 * 	between these objects. GEOS provides many mechanisms
 * 	to alter these connections, to both connect objects
 * 	and de-connect them.
 *
 * 	(Throughout this file you will see references like
 * 	this: [Con 7.2.1] This is a reference to chapter 7,
 * 	section 7.2.1 of the Concepts manual. [Obj 7.2.1] is a
 * 	reference to chapter 7, section 7.2.1 of the Objects
 * 	manual. You should use these references to locate
 * 	further information about the topic being discussed if
 * 	anything is unclear.)
 *
 *
 * 	---------    CREATING & ADDING OBJECTS	-----------------
 *
 * 	In most cases, the objects you add to the generic tree
 * 	are pre-instantiated (but not initially attached to
 * 	the generic tree.
 *
 * 	You can, however, create new objects dynamically, by
 * 	either copying existing object(s) or creating new
 * 	objects from scratch.
 *
 * 	These objects may then be added to the generic tree.
 *
 * 	There are several ways to create and add new objects:
 *
 * 	1) ObjInstantiate() [Coding 5.4.5.1]
 * 	   and MSG_GEN_ADD_CHILD [GenClass 2.5.2].
 *
 * 	   ObjInstantiate() creates a new instance of a single
 * 	   object from scratch. As a result, ObjInstantiate()
 * 	   is one of the more cumbersome ways to create
 * 	   objects to add to the generic tree. It is
 * 	   almost always easier to pre-instantiate a dummy
 * 	   template object and copy it instead of creating one
 * 	   from scratch with ObjInstantiate().
 *
 * 	   You can add any object created in this manner with
 * 	   MSG_GEN_ADD_CHILD.
 *
 *
 * 	2) ObjDuplicateResource() [Coding 5.4.5.1]
 * 	   and MSG_GEN_ADD_CHILD.
 *
 * 	   This routine copies the entire contents
 * 	   of an object resource block. It therefore creates
 * 	   new instances of every object within the copied
 * 	   resource.
 *
 * 	   You may add any object within the duplicated
 * 	   resource with MSG_GEN_ADD_CHILD. Any objects that
 * 	   are children of this added object will be added at
 * 	   their proper positions also. In this way, you can
 * 	   move entire generic trees just by moving the top
 * 	   object.
 *
 *
 * 	3) MSG_GEN_COPY_TREE [GenClass 2.5.3]
 *
 * 	   The easiest (and most common) method of copying
 * 	   groups of objects is to use MSG_GEN_COPY_TREE. This
 * 	   message copies an entire generic tree starting at
 * 	   the object sent the message and then automatically
 * 	   adds it to a passed location. The objects copied
 * 	   may reside in different resources; the handler will
 * 	   copy the objects intelligently.
 *
 * 	   The top object copied in this manner must not be
 * 	   GS_USABLE at the time. The branch copied can later
 * 	   be set usable with MSG_GEN_SET_USABLE.
 *
 * 	---------   REMOVING & DESTROYING OBJECTS   -----------------
 *
 * 	There are also several ways to remove and destroy
 * 	objects from the generic tree:
 *
 * 	1) MSG_GEN_REMOVE_CHILD [GenClass 2.5.2]
 *
 * 	   This message removes a child from the
 * 	   generic tree. Any children of this object
 * 	   will remain children of the removed object. The
 * 	   object removed in this manner must not be GS_USABLE
 * 	   at the time of this message.
 *
 * 	   You can use MSG_GEN_REMOVE_CHILD and
 * 	   MSG_GEN_ADD_CHILD to move sections of the generic
 * 	   tree from one location to another. Make sure that
 * 	   you set the top object non-GS_USABLE before you
 * 	   remove it and set it GS_USABLE after you add it
 * 	   again.
 *
 * 	2) MSG_GEN_DESTROY [GenClass 2.5.3]
 *
 * 	   This message destroys a generic branch from the
 * 	   object sent the message on down to its last child.
 * 	   The object sent this message may be GS_USABLE; the
 * 	   handler will set it non GS_USABLE, destroy it, and
 * 	   free any chunks used by the object from memory.
 *
 * RCS STAMP:
 * 	$Id: gentree.goc,v 1.1 97/04/04 16:37:18 newdeal Exp $
 *
 *******************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class GenTreeProcessClass, GenProcessClass;
/* define methods for this class here. */
@message void MSG_ADD_DUPLICATE_BLOCK_ITEM();
@message void MSG_REMOVE_DUPLICATE_BLOCK_ITEM();
@message void MSG_COPY_DESTRUCT_MENU();
@message void MSG_DESTROY_DESTRUCT_MENU();
@message void MSG_DUPLICATE_NUMPAD();
@message void MSG_FREE_NUMPAD();
@endc;

@classdecl GenTreeProcessClass, neverSaved;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass GenTreeApp = {
    GI_visMoniker = list { @GenTreeTextMoniker };
    GI_comp = @GenTreePrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @GenTreePrimary;
}

@visMoniker GenTreeTextMoniker = "C GenTree Sample Application";

@end	AppResource;

/* this resource is for misc UI objects */
@start	Interface;

@object GenPrimaryClass GenTreePrimary  = {
    /* This window has two children: the "Construct" menu and the
     * client area (see below).   We add another menu when the "Copy
     * 'Destruct' Menu" option is activated */
    GI_comp = @ConstructMenu, @GenTreeClientArea;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
}

/*
 * This is the "Construct" menu.  It contains two items,
 * "Add 'Duplicate Dialer' Item" and "Copy 'Destruct' Menu".  
 *
 * A third, "Duplicate Dialer" menu item is added by activated the
 * "Add 'Duplicate Dialer' Item" trigger.
 */
@object GenInteractionClass ConstructMenu = {
    GI_visMoniker = 'C', "Construct";
    GI_comp = @ConstructAddDupBlockItem, @ConstructCopyDestructMenu;
    GII_visibility = GIV_POPUP;
}

/*
 * This trigger adds a third item to the Construct Menu:
 * the "Add 'Duplicate Dialer' Item" trigger.
 */
@object GenTriggerClass ConstructAddDupBlockItem = {
    GI_visMoniker = 'A', "Add 'Duplicate Dialer' Item";
    GTI_destination = process;
    GTI_actionMsg = MSG_ADD_DUPLICATE_BLOCK_ITEM;
}

/*
 * This trigger copies the 'Destruct' menu (contained in the
 * DestructResource below) and adds it as a child of the GenPrimary.
 */
@object GenTriggerClass ConstructCopyDestructMenu = {
    GI_visMoniker = 'C', "Copy 'Destruct' Menu";
    GTI_destination = process;
    GTI_actionMsg = MSG_COPY_DESTRUCT_MENU;
}

/*
 * This menu item is not initially part of the menu.  It is added by activating
 * the "Add 'Duplicate Dialer' Item" menu item.
 */
@object GenTriggerClass ConstructDupDialer = {
    GI_visMoniker = 'D', "Duplicate Dialer";
    GTI_destination = process;
    GTI_actionMsg = MSG_DUPLICATE_NUMPAD;
	/*
	 * Since this object will be added with MSG_GEN_ADD_CHILD, it needs
	 * to be marked not usable.
	 */
    GI_states = @default & ~GS_USABLE;
}

/*
 * This interaction is the client area.  It will hold any Dialers added
 * by the "Duplicate Dialer" item.
 */
@object GenInteractionClass GenTreeClientArea = {
    GI_visMoniker = "Client Area";
    HINT_DRAW_IN_BOX;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_ALLOW_CHILDREN_TO_WRAP;
}

@end Interface;

/*
 * This resource contains the "Destruct" menu.  This menu is added when the
 * "Copy 'Destruct' Menu" option is activated from the 'Construct' menu.
 */
@start DestructResource;

@object GenInteractionClass DestructMenu = {
    GI_visMoniker = 'D', "Destruct";
    GI_comp = 	@DestructRemoveDupBlockItem,
		@DestructDestroyDestructMenu,
		@DestructFreeDialer;
    GII_visibility = GIV_POPUP;

    /*
     * Since this object will be added with MSG_GEN_COPY_TREE, it needs
     * to be marked not usable. (You cannot add a usable object to
     * a usable object tree.
     */
    GI_states = @default & ~GS_USABLE;
}

/*
 * This trigger removes the last added 'Duplicate Dialer' item. These
 * items are added with the "Add 'Duplicate Dialer' item" trigger in
 * the 'Construct' menu.
 */
@object GenTriggerClass DestructRemoveDupBlockItem = {
    GI_visMoniker = 'R', "Remove 'Duplicate Dialer' Item";
    GTI_destination = process;
    GTI_actionMsg = MSG_REMOVE_DUPLICATE_BLOCK_ITEM;
}

/*
 * This trigger destroys the 'Destruct' menu, which is this trigger's
 * parent.
 */
@object GenTriggerClass DestructDestroyDestructMenu = {
    GI_visMoniker = 'D', "Destroy 'Destruct' Menu";
    GTI_destination = process;
    GTI_actionMsg = MSG_DESTROY_DESTRUCT_MENU;
}

@object GenTriggerClass DestructFreeDialer = {
    GI_visMoniker = 'F', "Free Dialer";
    GTI_destination = process;
    GTI_actionMsg = MSG_FREE_NUMPAD;
}

@end DestructResource;

/*
 * This is a template object block that is copied by
 * ObjDuplicateResource. This resource contains the template for the
 * 'Dialer' object (and its children) that is copied, added, and
 * removed by application actions.
 */
@start DialerResource;

/*
 * The dialer object creates the appearance of a touch-tone
 * telephone key pad.
 */
@object GenInteractionClass Dialer = {
    GI_visMoniker = "Dialer";
    GI_comp = @DialerRow1, @DialerRow2, @DialerRow3, @DialerRow4;
    HINT_DRAW_IN_BOX;
    /*
     * Since this object will be added with ObjDuplicateResource and
     * MSG_GEN_ADD_CHILD, it needs to be marked not usable.
     */
    GI_states = @default & ~GS_USABLE;
}

@object GenInteractionClass DialerRow1 = {
    GI_comp = @Dialer1, @Dialer2, @Dialer3;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass DialerRow2 = {
    GI_comp = @Dialer4, @Dialer5, @Dialer6;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass DialerRow3 = {
    GI_comp = @Dialer7, @Dialer8, @Dialer9;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenInteractionClass DialerRow4 = {
    GI_comp = @DialerStar, @Dialer0, @DialerHatch;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenTriggerClass Dialer1 = {
    GI_visMoniker = "1";
}

@object GenTriggerClass Dialer2 = {
    GI_visMoniker = "2";
}

@object GenTriggerClass Dialer3 = {
    GI_visMoniker = "3";
}

@object GenTriggerClass Dialer4 = {
    GI_visMoniker = "4";
}

@object GenTriggerClass Dialer5 = {
    GI_visMoniker = "5";
}

@object GenTriggerClass Dialer6 = {
    GI_visMoniker = "6";
}

@object GenTriggerClass Dialer7 = {
    GI_visMoniker = "7";
}

@object GenTriggerClass Dialer8 = {
    GI_visMoniker = "8";
}

@object GenTriggerClass Dialer9 = {
    GI_visMoniker = "9";
}

@object GenTriggerClass DialerStar = {
    GI_visMoniker = "*";
}

@object GenTriggerClass Dialer0 = {
    GI_visMoniker = "0";
}

@object GenTriggerClass DialerHatch = {
    GI_visMoniker = "#";
}

@end DialerResource;

/*
 ***************************************************************************
 *		Code for GenTreeProcessClass
 ***************************************************************************
 */

/***************************************************************************
 *
 * These two handlers show how generic trees can be created and destroyed
 * with MSG_GEN_ADD_CHILD and MSG_REMOVE_CHILD.
 *
 **************************************************************************/

/***********************************************************************
 *		MSG_ADD_DUPLICATE_BLOCK_ITEM for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message adds the 'Duplicate Dialer' item to the
 *		 "Construct" menu.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 The item added, already resident within the Interface
 *		 resource, is added with MSG_GEN_ADD_CHILD. The object
 *		 added in this manner must be initially non-USABLE;
 *		 after the item is added, it is usually desirable to
 *		 set the item USABLE to get it to appear within the UI.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_ADD_DUPLICATE_BLOCK_ITEM
{
    /*
     * Since it is illegal to add a child object that is already a
     * child of the parent, we first check to see if the item is
     * already a child of the parent.  If so, we don't do anything.
     *
     * MSG_GEN_FIND_CHILD returns -1 if the child doesn't exist.
     */
    if ( 0xFFFF == @call ConstructMenu::MSG_GEN_FIND_CHILD(
             @ConstructDupDialer)) {

        /*
         * Add the "Duplicate Dialer" item to the "Construct" menu.
         *
         * We pass CCF_MARK_DIRTY, so the new linkage will be saved to
	 * the state file when the application is detached and will be
	 * restored when the application is reattached.
         *
         * CCO_LAST indicates that the "Duplicate Dialer" is to be
	 * added as the last item in the "Construct" menu.
         */
        @call ConstructMenu::MSG_GEN_ADD_CHILD(
			@ConstructDupDialer,
			(CCF_MARK_DIRTY | CCO_LAST));

        /*
         * After the object is added to its new parent, it must be
	 * made usable to come on-screen.
         *
         * VUM_NOW generates an immediate visual update.
         */
        @call ConstructDupDialer::MSG_GEN_SET_USABLE(VUM_NOW);
    }
} /* MSG_ADD_DUPLICATE_BLOCK_ITEM */

/***********************************************************************
 *		MSG_REMOVE_DUPLICATE_BLOCK_ITEM for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message removes the 'Duplicate Dialer' item from
 *		 the "Construct" menu, performing the opposite
 *		 function of MSG_ADD_DUPLICATE_BLOCK_ITEM.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 The item is removed with MSG_GEN_REMOVE_CHILD. The
 *		 child is not destroyed; it remains resident in
 *		 resource Interface, but is no longer attached to any
 *		 generic object.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_REMOVE_DUPLICATE_BLOCK_ITEM
{
    /*
     * Since it is illegal to remove a child object that is not a
     * child of the parent, we first check to see if the item is
     * actually a child of the parent.  If not, we don't do anything.
     *
     * MSG_GEN_FIND_CHILD returns -1 if the child doesn't exist.
     */
    if ( 0xFFFF != @call ConstructMenu::MSG_GEN_FIND_CHILD(
             @ConstructDupDialer ) ) {

        /*
         * Before we remove the child item, we must set it not usable.
	 * This takes it off-screen.
	 *
         * VUM_NOW generates an immediate visual update.
         */
        @call ConstructDupDialer::MSG_GEN_SET_NOT_USABLE(VUM_NOW);

        /*
         * Remove the "Duplicate Dialer" item from the "Construct"
	 * menu.
         *
         * We pass CCF_MARK_DIRTY, so the new linkage will be saved to
	 * the state file when the application is detached and will be
	 * restored when the application is reattached.
         */
        @call ConstructMenu::MSG_GEN_REMOVE_CHILD(
			@ConstructDupDialer, CCF_MARK_DIRTY);
    }
} /* MSG_REMOVE_DUPLICATE_BLOCK_ITEM */

/***********************************************************************
 *		MSG_COPY_DESTRUCT_MENU for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message copies a "Destruct" menu from the object
 *		 tree located in DestructResource. It then adds this
 *		 menu to the GenPrimary. Repeatedly calling this method
 *		 will repeatedly add the same menu. Note that the
 *		 original template menu remains intact.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 This message handler uses MSG_GEN_COPY_TREE to copy
 *		 and add a template object (and its children) to a
 *		 point within the application tree.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_COPY_DESTRUCT_MENU
{
    /*
     * This will temporarily hold the optr of the new menu.
     */
    optr newMenu;

    /*
     * Copy the "Destruct" menu and add the copy to the primary.
     *
     * MSG_GEN_COPY_TREE is sent to the top object in the template
     * object tree; it copies both that object and the tree of
     * children below that object. 
     *
     * We pass CCF_MARK_DIRTY, so the new linkage will be saved to the
     * state file when the application is detached and will be
     * restored when the application is reattached.
     *
     * CCO_FIRST indicates that the "Duplicate Dialer" is to be added
     * as the first item in the primary, before the "Construct" menu. 
     *
     * MSG_GEN_COPY_TREE returns the optr of root object added to the
     * generic tree.  We save this away for later usage.
     */
    newMenu = @call DestructMenu::MSG_GEN_COPY_TREE(
			/*
			 * The optr of the object is constructed from
			 * the MemHandle and ChunkHandle passed to the
			 * message.
			 */
			(MemHandle) (@GenTreePrimary >> 16),
			(ChunkHandle) (@GenTreePrimary & 0xffff),
			CCF_MARK_DIRTY | CCO_FIRST);
EC( ECCheckLMemOD( newMenu ); )

    /*
     * After the object is added to its new parent, it must be made usable
     * to come on-screen.
     *
     * VUM_NOW generates an immediate visual update.
     */
    @call newMenu::MSG_GEN_SET_USABLE(VUM_NOW);
} /* MSG_COPY_DESTRUCT_MENU */

/***********************************************************************
 *		MSG_DESTROY_DESTRUCT_MENU for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message removes the last added 'Destruct' menu
 *		 from the Primary, if it exists.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 The generic tree at and below the 'Destruct' menu is
 *		 destroyed using MSG_GEN_DESTROY. Because each newly
 *		 added 'Destruct' menu is added as the first child,
 *		 they will be removed in sequential order starting at
 *		 the first child also.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_DESTROY_DESTRUCT_MENU
{
    /*
     * This will temporarily hold the optr of the first menu.
     */
    optr firstMenu;

    /*
     * First, we determine if there is a "Destruct" menu to remove.
     * We do this by checking if the first child of the primary is the
     * "Construct" menu. If so, there are no more "Destruct" menus
     * (the "Destruct" menus are added before the "Construct" menus in
     * the MSG_COPY_DESTRUCT_MENU handler).  Otherwise, the first
     * child is the "Destruct" menu that we wish to remove.
     *
     * MSG_GEN_FIND_CHILD_AT_POSITION is used to get the optr of the first
     * child of the primary.
     */
    firstMenu = @call GenTreePrimary::MSG_GEN_FIND_CHILD_AT_POSITION(0);
EC( ECCheckLMemOD( firstMenu ); )

    /*
     * If the first child is not the "Construct" menu, remove it.
     * (I.e., if the first child is not the 'Construct' menu, it is a
     * 'Destruct' menu.)
     */
    if (@ConstructMenu != firstMenu) {

        /*
         * Remove and destroy the first "Destruct" menu from the primary.
         *
         * MSG_GEN_DESTROY is sent to the top object in the object tree.
	 * It will set the object not usable, remove it from its parent,
	 * and free the memory used by the objects. It is therefore
	 * the preferred method to remove generic objects.
         *
         * We pass CCF_MARK_DIRTY, so the new linkage will be saved to
	 * the state file when the application is detached and will be
	 * restored when the application is reattached.
         *
         * VUM_NOW generates an immediate visual update.
         */
        @send firstMenu::MSG_GEN_DESTROY(VUM_NOW, CCF_MARK_DIRTY);
    }
} /* MSG_DESTROY_DESTRUCT_MENU */

/***********************************************************************
 *		MSG_DUPLICATE_NUMPAD for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message adds a Dialer keypad to the 'Client Area'
 *		 (a simple sub-group GenInteraction). Repeatedly
 *		 sending this message will repeatedly add another
 *		 Dialer to the GenInteraction.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 This method uses ObjDuplicateResource() to duplicate the
 *		 template 'Dialer' located within DialerResource. We
 *		 add the new duplicate with MSG_GEN_ADD_CHILD, which
 *		 will also add all the children of the child added.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_DUPLICATE_NUMPAD
{
    /*
     * This will temporarily hold the handle of the newly duplicated
     * Dialer block.
     */
    MemHandle newBlock;
    /*
     * This will hold the optr of the new Dialer in newly duplicated
     * block.
     */
    optr newDialer;

    /*
     * Copy a Dialer block with ObjDuplicateResource().
     *
     * ObjDuplicateResource() is used to duplicate the entire template
     * object block containing the Dialer object tree.
     *
     * We pass ObjDuplicateResource() the MemHandle of the object
     * block to duplicate, 0 to have the process own the new object,
     * and -1 to have the our ui-thread run the object.
     */
    newBlock = ObjDuplicateResource( OptrToHandle(@Dialer), 0, -1);
EC( ECCheckMemHandle( newBlock ); )

    /*
     * The Dialer object within the newly duplicated block has the same
     * chunk handle it has in the template block, so we can construct the
     * optr of the new Dialer object from the newly duplicate block's block
     * handle and the chunk handle of the Dialer object.
     */
    newDialer = ConstructOptr(newBlock, OptrToChunk(@Dialer));
EC( ECCheckLMemOD( newDialer ); )

    /*
     * Add the new Dialer to the primary's client area with MSG_GEN_ADD_CHILD.
     *
     * We pass CCF_MARK_DIRTY, so the new linkage will be saved to the
     * state file when the application is detached and will be
     * restored when the application is re-attached.
     *
     * CCO_LAST indicates that the new Dialer is to be added as the
     * last item in the primary's client area.
     *
     */
    @call GenTreeClientArea::MSG_GEN_ADD_CHILD(newDialer,
					CCF_MARK_DIRTY | CCO_LAST);

    /*
     * After the object is added to its new parent, it must be made usable
     * to come on-screen.
     *
     * VUM_NOW generates an immediate visual update.
     */
    @call newDialer::MSG_GEN_SET_USABLE(VUM_NOW);
} /* MSG_DUPLICATE_NUMPAD */


/***********************************************************************
 *		MSG_FREE_NUMPAD for GenTreeProcessClass
 ***********************************************************************
 * SYNOPSIS:	 This message removes a 'Dialer' from the primary's
 *		 client area. The block formerly containing the
 *		 unneeded Dialer is then freed.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 *
 * STRATEGY:	 The Dialer is removed with MSG_GEN_REMOVE. Its block
 *		 is freed with MSG_META_BLOCK_FREE.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/12/92		Initial Revision
 *
 ***********************************************************************/
@method GenTreeProcessClass, MSG_FREE_NUMPAD
{
    /*
     * This will temporarily hold the optr of the first Dialer.
     */
    optr firstDialer;

    /*
     * Get the first child in the primary's client area.  This is the
     * Dialer we will free.  If there are no children, then all the
     * Dialers are gone and we do nothing.
     *
     * MSG_GEN_FIND_CHILD_AT_POSITION is used to get the optr of the
     * first child of the primary.
     *
     * MSG_GEN_FIND_CHILD_AT_POSITION returns 0 if the child is not
     * found. 
     */
    if ( NullOptr != ( firstDialer = @call GenTreeClientArea::
             MSG_GEN_FIND_CHILD_AT_POSITION( 0 ) ) ) {
EC(     ECCheckLMemOD( firstDialer ); )

        /*
	 * A quick way to remove a generic object from its parent is
	 * MSG_GEN_REMOVE.  This will set the object not usable for
	 * us, so we do not need to do so ourselves.
	 *
         * VUM_NOW generates an immediate visual update.
	 *
         * We pass CCF_MARK_DIRTY, so the new linkage will be saved to
	 * the state file when the application is detached and will be
	 * restored when the application is reattached.
         */
        @call firstDialer::MSG_GEN_REMOVE( VUM_NOW, CCF_MARK_DIRTY );

        /*
         * MSG_META_BLOCK_FREE can be sent to any object in the duplicate
	 * block.  It will free the entire duplicated block after clearing
	 * the event queue.
         */
        @send firstDialer::MSG_META_BLOCK_FREE();
    }
} /* MSG_FREE_NUMPAD */

