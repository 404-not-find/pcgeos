/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1993 -- All Rights Reserved

PROJECT:	GEOS SDK Sample Application	
MODULE:		Benoit (Mandelbrot Set Sample Application)
FILE:		main.goc

AUTHOR:		Tom Lester, Aug  4, 1993

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TL	8/ 4/93   	Initial version.

DESCRIPTION:
	This file contains the main UI object declarations.

	$Id: main.goc,v 1.1 97/04/04 16:39:36 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>			/* GEOS Standard Applications */
#include <gstring.h>           		/* needed for icon monikers */
@include <Objects/SDK_C/msColCC.goh>	/* MSet Color Controller Class */
@include <Objects/SDK_C/msPrecCC.goh>	/* MSet Precision Controller Class */
@include <Objects/SDK_C/msetC.goh>	/* MSet messages  */

@define __BENOIT_UI_MAIN_GOC		/* Don't over-define  */
@include <benoit.goh>			/* Benoit Application */

@include <Art/mkrApp.goh>		/* app icons */
@include <Art/mkrDoc.goh>		/* document icons */

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */


/*
 *		Application Object
 */

@start	AppResource ;

@object GenApplicationClass BApp = {
    GI_visMoniker = list { 
	@BenoitTextMoniker, 
	@BenoitAppSCMoniker,
	@BenoitAppSMMoniker,
	@BenoitAppYCMoniker,
	@BenoitAppYMMoniker 
	}

    GI_comp = @BPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @BPrimary;
    /*
     * The GenDocumentControl object must be on the "active list" so it can
     * have access to the AppLaunchBlock, passed with MSG_META_ATTACH, that
     * contains the data file the application is supposed to open, if any.
     *
     * The GenDisplayControl object must also be on the "active list" so it
     * will always be on the GCN list to be notified of changes in the
     * ordering of GenDisplays under the GenDisplayGroup even if the menu
     * in which the GenDisplayControl is located has never been brought down
     * (so the GenDisplayControl would otherwise never have been built).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) = 
	@BDocumentControl,
	@BDisplayControl;

    /*
     * The GenDocumentControl object must also be on the "application startup"
     * list so the application can manipulate documents when started as a
     * server for another application (NOTE: it must be on this list even if
     * you don't ever expect your application to act as such a server).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) = @BDocumentControl;
    /*
     * The GenDocumentControl, GenDisplayControl, MSetColorControl and
     * MSetPrecisionControl will load their saved options from the .ini
     * file by themselves, but need 
     * to be told when to save them.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
	@BDocumentControl,
	@BDisplayControl,
	@BColorControl,
	@BPrecisionControl;

    /*
     * Specify the INI file category [Con 6.3] under which to save all options
     * for this application.
     */
    ATTR_GEN_INIT_FILE_CATEGORY = "benoit";
}

@visMoniker BenoitTextMoniker = "C Benoit Sample Application";

@end	AppResource;


/*
 * Define a visMoniker list of the icon for Benoit documents.
 * 
 * This is used in the message handler for MSG_GEN_PROCESS_INSTALL_TOKEN
 * in the file process.goc
 */

@start  BenoitSCMonikerResource, data;

@visMoniker BDatafileMonikerList = list {
	@BenoitAppSCMoniker,  /* use the same monikers as the */
	@BenoitAppSMMoniker,  /* app until we have time to draw */
	@BenoitAppYCMoniker,  /* document type monikers */
	@BenoitAppYMMoniker 
/*    @BenoitDocSCMoniker, */
/*    @BenoitDocSMMoniker  */
}	

@end BenoitSCMonikerResource;

/*
 *		Primary window
 */

@start	Interface;		/* this resource is for misc UI objects */

@object GenPrimaryClass BPrimary  = {
    GI_comp = @ToolArea, @BFileMenu, @BDisplayGroup, @BColorMenu, 
	      @BPrecisionMenu, @BZoomMenu, @BWindowMenu;

    /* 
     * Set this hint to specify that this is the main window for a 
     * "major" application. The system will use its default behavior.
     */
    HINT_PRIMARY_FULL_SCREEN;
}

/* 
 * Tool control area. 
 */

@object GenToolGroupClass ColorTools = {
    GTGI_controller = BColorControl;
    HINT_SAME_ORIENTATION_AS_PARENT;
    HINT_MINIMIZE_CHILD_SPACING;
}

@object GenToolGroupClass PrecisionTools = {
    GTGI_controller = BPrecisionControl;
    HINT_SAME_ORIENTATION_AS_PARENT;
    HINT_MINIMIZE_CHILD_SPACING;
}

@object GenInteractionClass ToolArea = {
    GI_comp = @ColorTools, @PrecisionTools;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

    /*
     * The controlers.
     */

@object GenInteractionClass BColorMenu = {
    GI_visMoniker = 'C', "Color";
    GI_comp = @BColorControl;
    GII_visibility = GIV_POPUP;
}

@object MSetColorControlClass BColorControl = {
}

@object GenInteractionClass BPrecisionMenu = {
    GI_visMoniker = 'P', "Precision";
    GI_comp = @BPrecisionControl;
    GII_visibility = GIV_POPUP;
}

@object MSetPrecisionControlClass BPrecisionControl = {
}


/* 
 * The Zoom Menu.
 * This GenInteraction creates the Zoom menu.
 * It has two children: one to zoom in and one to zoom out.
 */
@object GenInteractionClass BZoomMenu = {
    GI_visMoniker = 'Z', "Zoom";
    GI_comp = @BZoomInTrigger, @BCenterTrigger, @BZoomOutTrigger;
    GII_visibility = GIV_POPUP;
		/* This field defines the functionality of the
		 * GenInteraction; GIV_POPUP indicates it is a
		 * "pop-up" group.  In OSF/Motif, this will be a
		 * standard menu. */
}

/*
 * Triggers for the Zoom menu
 */
@object GenTriggerClass BZoomInTrigger = {
    /* send the zoom message to the selected Mset object */
    GI_visMoniker = 'I', "Zoom In";
    GTI_destination = (TO_APP_TARGET);
    GTI_actionMsg = MSG_MSET_ZOOM;
    /* Pass a BBFixed value -- 0.5 */
    ATTR_GEN_TRIGGER_ACTION_DATA = (word)(0x0080);
}

@object GenTriggerClass BZoomOutTrigger = {
    /* send the zoom message to the selected Mset object */
    GI_visMoniker = 'O', "Zoom Out";
    GTI_destination = (TO_APP_TARGET);
    GTI_actionMsg = MSG_MSET_ZOOM;
    /* Pass a BBFixed value -- 2.0 */
    ATTR_GEN_TRIGGER_ACTION_DATA = (word)(0x0200);
}

@object GenTriggerClass BCenterTrigger = {
    /* send the zoom message to the selected Mset object */
    GI_visMoniker = 'C', "Center on point";
    GTI_destination = (TO_APP_TARGET);
    GTI_actionMsg = MSG_MSET_ZOOM;
    /* Pass a BBFixed value -- 1.0 */
    ATTR_GEN_TRIGGER_ACTION_DATA = (word)(0x0100);
}


/* 
 * The File Menu.
 * This GenInteraction creates the File menu.  Its only child
 * is the GenDocumentControl object, which will update the
 * menu as appropriate.
 */
@object GenInteractionClass BFileMenu = {
    GI_comp = @BDocumentControl;
    GII_visibility = GIV_POPUP;
		/* This field defines the functionality of the
		 * GenInteraction; GIV_POPUP indicates it is a
		 * "pop-up" group.  In OSF/Motif, this will be a
		 * standard menu. */
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
		/* This attribute sets up the GenInteraction as
		 * a File menu.  It is a standard GenInteractionGroup
		 * type, and the UI will create the proper triggers
		 * and lists as its children, as well as giving it the
		 * standard moniker for this type of menu. */
}

/*
 * The Window Menu. Put the BDisplayControl into the Window Menu.
 */
@object GenInteractionClass BWindowMenu = {
    GI_comp = @BDisplayControl;
    GII_visibility = GIV_POPUP;
		/* This GenInteraction is a popup menu. */
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_WINDOW_MENU);
		/* This GenInteraction, like the File menu, has a
		 * standard type that defines its features. */
}


/*
 *	GenDisplayControl
 *
 * This controller uses only its default settings and
 * provides the UI gadgetry to manage the GenDisplayGroup
 * object which, in turn, manages the multiple GenDisplay
 * objects.
 */
@object GenDisplayControlClass BDisplayControl = {
}


/*
 *	GenDocumentControl
 *
 * There are a few things to keep in mind when deciding in what resource to
 * place the GenDocumentControl object:
 *	1) because it must be on the application's MGCNLT_ACTIVE_LIST list,
 *	   the resource that contains it will always be brought in on start-up.
 *	   If that resource is particularly large, it could slow down the
 *	   application's start-up.
 *	2) it is actually used only rarely, when the user wishes to open, close
 *	   or save a document.
 *	3) it creates a number of different objects (triggers for the File
 *	   menu, dialog boxes, etc.) that could make the resource in which
 *	   it sits become somewhat bloated.
 * If there were more elements of the File menu (for example, a
 * SpoolPrintControl object), you might put all the elements into a single
 * FileMenu resource. For this example, however, we're just going to put it
 * in the Interface resource, as there's not much else for this app to do.
 */

@object GenDocumentControlClass BDocumentControl = {
    /*
     * Document file's token
     * All files created by the document control will have these token 
     * characters, and the File Selector object will be set to allow only 
     * such files to be selected.
     */
    GDCI_documentToken = { "BenD", MANUFACTURER_ID_SDK };
    /*
     * Text to display in the header area of the primary when no
     * document is open.
     */
    GDCI_noNameText = "No Document";
    /*
     * Special attributes: allow multiple open files, don't display
     * name on primary (this will be handled via the display control),
     * don't use templates, and don't allow setting the empty document.
     */
    GDCI_attrs = @default | GDCA_MULTIPLE_OPEN_FILES;
    GDCI_features = @default & ~GDCF_NAME_ON_PRIMARY & 
	                       ~GDCF_SUPPORTS_TEMPLATES &
			       ~GDCF_SUPPORTS_USER_SETTABLE_EMPTY_DOCUMENT;
    /*
     * Pointer to the GenDocumentGroup, which manages the GenDocument objects
     * themselves (run by the process thread, usually).
     */
    GDCI_documentGroup = BDocumentGroup;
}


/*
 *	GenDisplayGroup object
 *
 * Manages and actually manipulates all the GenDisplay objects the document
 * control creates for us. The GenDisplay objects are clipped to our bounds,
 * in most specific UI's, so we make them sizeable.
 */

@object GenDisplayGroupClass BDisplayGroup = {
    /*
     * Make sure that we snag the focus and the target [Con 12.5] from the
     * GenPrimary when we come up on-screen, so any GenDisplay we adopt
     * will get the focus and target if it wants it.
     */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
}

@end Interface;
