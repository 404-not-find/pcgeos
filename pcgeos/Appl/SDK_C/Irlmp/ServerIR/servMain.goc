/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		Irlmp test
FILE:		serverirMain.goc

AUTHOR:		Andy Chiu, Mar  7, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	3/ 7/96   	Initial version.

DESCRIPTION:
	Test application for the IrLMP Library.	

	$Id: servMain.goc,v 1.1 97/04/04 16:40:55 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@define __SERVERIR_MAIN_GOC
@include "serverir.goh"

@classdecl ServerirProcessClass, neverSaved;

word hugeLMemHandle = 0;
word clientHandle   = 0;

/* We use this type to help us generate a virtual fptr */

extern IrlmpCallbackType ServerirIrlmpCallback; 
IrlmpCallbackType *serverirCallback = &ServerirIrlmpCallback; 


/***********************************************************************
 *		MSG_GEN_PROCESS_OPEN_APPLICATION for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	Where it all starts.    
 * PARAMETERS:	AppAttachFlags attachFlags = cx
 *       	MemHandle launchBlock = dx
 *		MemHandle extraState = bp
 *
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 7/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
    @callsuper();
    hugeLMemHandle = HugeLMemCreate(0,          /* default value */
				    20,         /* min size      */
				    4000);      /* max size      */
}	/* End of MSG_GEN_PROCESS_OPEN_APPLICATION.	*/


/***********************************************************************
 *		MSG_GEN_PROCESS_CLOSE_APPLICATION for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	  Clean up on app exit.
 * PARAMETERS:	  return  MemHandle - extra state block
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *                
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    Boolean retVal;

    retVal = HugeLMemDestroy(hugeLMemHandle);
    EC_ERROR_IF(retVal, -1);

    return @callsuper();
}	/* End of MSG_GEN_PROCESS_CLOSE_APPLICATION.	*/


/***********************************************************************
 *		MSG_SP_REGISTER for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	Register as a server on a local LSAP-Sel    
 * PARAMETERS:	nothing
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 7/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_REGISTER
{
    IrlmpLsapSel   localLsap;
    IrlmpError     retVal;

    /*  Obtain our process handle to pass to IrlmpRegister */
    /*-----------------------------------------------------*/

    /*  Obtain the local LSAP-Sel value */
    /*----------------------------------*/
    localLsap = SUGetLocalLsap();


    /* Register ourselves with Irlmp.  We pass the geode handle */
    /* of this application because we will want to restore      */
    /* ds as dgroup in our callback when we get back.           */
    /* We need to change dgroup because the callback will be    */
    /* under the irlmp thread.                                  */
    /* It's not necessary to pass it as we can call this routine*/
    /* under any thread.                                        */
    /*----------------------------------------------------------*/
    retVal = IrlmpRegister(&localLsap, GeodeGetCodeProcessHandle(),
			   serverirCallback, &clientHandle);

    EC_ERROR_IF(retVal, -1);

}	/* End of MSG_SP_REGISTER.	*/




/***********************************************************************
 *		MSG_SP_DATA_REQUEST for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Send a LM_data.request
 * PARAMETERS:	    nothing
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 8/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_DATA_REQUEST
{
    IrlmpDataArgs  dataArgs;
    IrlmpError     retVal;

    SUGetSendText(&dataArgs);
    SUClearSendText();

    retVal = IrlmpDataRequest(clientHandle, &dataArgs);
    EC_WARNING_IF(retVal, SERVERIR_DATA_REQUEST_FAILED);

}	/* End of MSG_SP_DATA_REQUEST.	*/


/***********************************************************************
 *		MSG_SP_UDATA_REQUEST for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	    LM_Udata.request
 * PARAMETERS:	    none
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 8/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_UDATA_REQUEST
{
    IrlmpDataArgs dataArgs;
    word          retVal;

    SUGetSendText(&dataArgs);
    SUClearSendText();
    retVal = IrlmpUDataRequest(clientHandle, &dataArgs);
    EC_WARNING_IF(retVal, SERVERIR_DATA_REQUEST_FAILED);

}	/* End of MSG_SP_UDATA_REQUEST.	*/


/***********************************************************************
 *		MSG_SP_STATUS_REQUEST for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	    LM_Status.request
 * PARAMETERS:	    none
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 8/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_STATUS_REQUEST
{
    IrlmpStatusRequest(clientHandle);

}	/* End of MSG_SP_STATUS_REQUEST.	*/


/***********************************************************************
 *		MSG_SP_DISCONNECT_REQUEST for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Send a LM_Disconnect.request
 * PARAMETERS:	    nothing
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/ 8/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_DISCONNECT_REQUEST
{
    IrlmpDataArgs dataArgs;

    SUGetSendText (&dataArgs);
    IrlmpDisconnectRequest(clientHandle, &dataArgs, IDR_USER_REQUEST);
    IrlmpUnregister(clientHandle);

}	/* End of MSG_SP_DISCONNECT_REQUEST.	*/


/***********************************************************************
 *		MSG_SP_UNREGISTER for ServerirProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Unregister from Irlmp
 * PARAMETERS:	    nothing
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
@method ServerirProcessClass, MSG_SP_UNREGISTER
{

    IrlmpUnregister(clientHandle);

}	/* End of MSG_SP_UNREGISTER.	*/

