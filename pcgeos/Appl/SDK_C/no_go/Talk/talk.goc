/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  Talk (Sample PC GEOS application)
 * FILE:	  talk.goc
 *
 * AUTHOR:	  InSik Rhee: November 13, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	11/13/92  insik	    Initial version
 *
 * DESCRIPTION:
 *	This app uses the network library and communication driver.  It is 
 * 	like the unix "talk" program.
 *
 *	$Id: talk.goc,v 1.1 97/04/04 16:38:24 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <net.h>
/* UseDriver Internal/serialDr.def */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	TalkProcessClass, GenProcessClass ; 

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TALK_SET_PORT;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TALK_SET_RATE;
@message void MSG_TALK_OPEN_CONNECTION();
@message void MSG_TALK_SEND_TEXT();

@endc   /* end of class definition */

@classdecl TalkProcessClass, neverSaved;

void ReceiveTextCallback(char *, word, word);

#define SERIAL_COM1     0
#define SERIAL_COM2	2
#define SERIAL_COM3	4
#define SERIAL_COM4	6
#define SERIAL_COM5	8
#define SERIAL_COM6	10
#define SERIAL_COM7	12
#define SERIAL_COM8	14

#define     SB_115200	 	  1
#define     SB_57600	 	  2
#define     SB_38400	 	  3
#define     SB_19200	 	  6
#define     SB_9600	 	  12
#define     SB_7200	 	  16
#define     SB_4800	 	  24
#define     SB_3600	 	  32
#define     SB_2400	 	  48
#define     SB_2000	 	  58
#define     SB_1800	 	  64
#define     SB_1200	 	  96
#define     SB_600	 	  192
#define     SB_300	 	  384


/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass TalkApp = {

    GI_visMoniker = list { @TalkTextMoniker }
    GI_comp = @TalkPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @TalkPrimary;
}

@visMoniker TalkTextMoniker = "C Talk Sample Application";

@end	AppResource


@start	Interface	/* this resource is for misc UI objects */ ;

@object GenPrimaryClass TalkPrimary  = {
    GI_comp = @FileGroup, @OptionsGroup, @SendTextDisplay, @ReceiveTextDisplay,
	@EntryDisplay;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_NO_WIDER_THAN_CHILDREN_REQUIRE;
}

@end    Interface

@start  MenuInterface;

/* File Menu */

@object GenInteractionClass FileGroup = {
    GI_comp = @OpenTrigger;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}
@object GenTriggerClass OpenTrigger = {
    GI_visMoniker = 'O', "Open Connection";
    GTI_destination = process;
    GTI_actionMsg = MSG_TALK_OPEN_CONNECTION;
}

/* Options */

@object GenInteractionClass OptionsGroup = {
    GI_comp = @PortGroup, @BaudGroup;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_OPTIONS_MENU);
}
@object GenInteractionClass PortGroup = {
    GI_visMoniker = 'P', "Set Comm Port";
    GI_comp = @PortList;
    GII_visibility = GIV_POPUP;
}
@object GenItemGroupClass PortList = {
    GI_comp = @Com1, @Com2, @Com3, @Com4;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GIGI_selection = SERIAL_COM1;
    GIGI_numSelections = 1;
    GIGI_destination = process;
    GIGI_applyMsg = MSG_TALK_SET_PORT;
}
@object GenItemClass Com1 = {
    GI_visMoniker = '1', "COM 1";
    GII_identifier = SERIAL_COM1;
}
@object GenItemClass Com2 = {
    GI_visMoniker = '2', "COM 2";
    GII_identifier = SERIAL_COM2;
}
@object GenItemClass Com3 = {
    GI_visMoniker = '3', "COM 3";
    GII_identifier = SERIAL_COM3;
}
@object GenItemClass Com4 = {
    GI_visMoniker = '4', "COM 4";
    GII_identifier = SERIAL_COM4;
}
@object GenInteractionClass BaudGroup = {
    GI_visMoniker = 'B', "Set Baud Rate";
    GI_comp = @BaudList;
    GII_visibility = GIV_POPUP;
}
@object GenItemGroupClass BaudList = {
    GI_comp = @Level0,@Level1,@Level2,@Level3;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GIGI_selection = SB_19200;
    GIGI_numSelections = 1;
    GIGI_destination = process;
    GIGI_applyMsg = MSG_TALK_SET_RATE;
}
@object GenItemClass Level0 = {
    GI_visMoniker = '9',"9600";
    GII_identifier = SB_9600;
}
@object GenItemClass Level1 = {
    GI_visMoniker = '1',"19200";
    GII_identifier = SB_19200;
}
@object GenItemClass Level2 = {
    GI_visMoniker = '3',"38400";
    GII_identifier = SB_38400;
}
@object GenItemClass Level3 = {
    GI_visMoniker = '5',"57600";
    GII_identifier = SB_57600;
}

@end MenuInterface

@start DisplayInterface;

@object GenTextClass SendTextDisplay = {
    GI_visMoniker = "Send Window";
    GI_attrs = GA_READ_ONLY;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_TEXT_WHITE_WASH_COLOR;
    HINT_TEXT_FRAME;
    HINT_FIXED_SIZE = {
	SST_AVG_CHAR_WIDTHS | 80,
	SST_LINES_OF_TEXT | 8 };
}
@object GenTextClass ReceiveTextDisplay = {
    GI_visMoniker = "Receive Window";
    GI_attrs = GA_READ_ONLY;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_TEXT_WHITE_WASH_COLOR;
    HINT_TEXT_FRAME;
    HINT_FIXED_SIZE = {
	SST_AVG_CHAR_WIDTHS | 80,
	SST_LINES_OF_TEXT | 8 };
}
@object GenTextClass EntryDisplay = {
    GI_visMoniker = "Type Message Here";
    GTXI_attrs = GTA_SINGLE_LINE_TEXT;
    GTXI_destination = process;
    GTXI_applyMsg = MSG_TALK_SEND_TEXT;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_TEXT_WHITE_WASH_COLOR;
    HINT_TEXT_FRAME;
    HINT_FIXED_SIZE = {
	SST_AVG_CHAR_WIDTHS | 80,
	SST_LINES_OF_TEXT | 1 };
}
@end   DisplayInterface

/*
 ***************************************************************************
 *		Code for TalkProcessClass
 ***************************************************************************
 */

PortInfoStruct portInfo = {0,6};
word portToken;
word socketToken;


/***********************************************************************
 *		MSG_TALK_SET_PORT for TalkProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set Comm Port
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ISR	1/ 8/93   	Initial Revision
 *
 ***********************************************************************/
@method TalkProcessClass, MSG_TALK_SET_PORT
{
    portInfo.portNum = selection;
}	/* End of MSG_TALK_SET_PORT.	*/


/***********************************************************************
 *		MSG_TALK_SET_RATE for TalkProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Set Baud Rate
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ISR	1/ 8/93   	Initial Revision
 *
 ***********************************************************************/
@method TalkProcessClass, MSG_TALK_SET_RATE
{
    portInfo.baudRate = selection;
}	/* End of MSG_TALK_SET_RATE.	*/


/***********************************************************************
 *		MSG_TALK_OPEN_CONNECTION for TalkProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Open Port/Socket (called by FileMenu option)
 * PARAMETERS:	    none
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *	Open Port
 *	Open Socket
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ISR	1/ 8/93   	Initial Revision
 *
 ***********************************************************************/
@method TalkProcessClass, MSG_TALK_OPEN_CONNECTION
{
    portToken = NetMsgOpenPort(&portInfo);
    socketToken = NetMsgCreateSocket(portToken, SID_TALK, SID_TALK,
				(NetSocketCallback *) &ReceiveTextCallback, 0);
}	/* End of MSG_TALK_OPEN_CONNECTION.	*/


/***********************************************************************
 *		MSG_TALK_SEND_TEXT for TalkProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Send a buffer across (called when CR hit in EntryDisplay)
 * PARAMETERS:	    none
 * SIDE EFFECTS:    none
 *
 * STRATEGY:
 *	Grab text from EntryDisplay
 *	display it in SendTextDisplay
 * 	send buffer to remote computer
 *	erase text in EntryDisplay
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ISR	1/ 8/93   	Initial Revision
 *
 ***********************************************************************/
@method TalkProcessClass, MSG_TALK_SEND_TEXT
{
    char text[82];
    word size;

    size = @call EntryDisplay::MSG_VIS_TEXT_GET_ALL_PTR(text);
    text[size]=13;
    size++;
    @call SendTextDisplay::MSG_VIS_TEXT_APPEND_PTR(text,size);
    NetMsgSendBuffer(portToken,socketToken, 0, size,text);
    @call EntryDisplay::MSG_VIS_TEXT_DELETE_ALL();
}	/* End of MSG_TALK_SEND_TEXT.	*/


/***********************************************************************
 *				ReceiveTextCallback
 ***********************************************************************
 * SYNOPSIS:	    Dispatches messages received from remote computer
 * CALLED BY:	    CommDriver 
 * RETURN:	    nothing
 * SIDE EFFECTS:    none.
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ISR	1/ 8/93   	Initial Revision
 *
 ***********************************************************************/
void
ReceiveTextCallback (char* buffer, word size, word extraData)
{
    /* if size = 0, don't do anything */ 
    if (size != SOCKET_DESTROYED && size != SOCKET_HEARTBEAT)
	@call ReceiveTextDisplay::MSG_VIS_TEXT_APPEND_PTR(buffer, size);
}	/* End of ReceiveTextCallback.	*/
