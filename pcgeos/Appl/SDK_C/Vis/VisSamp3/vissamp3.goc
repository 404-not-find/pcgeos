/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1992 -- All Rights Reserved

PROJECT:	Sample Applications
MODULE:		Vis object test app #3
FILE:		vissamp3.goc

AUTHOR:		Tom Manshreck, Oct 23, 1992

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TM	10/23/92   	Initial version.

DESCRIPTION:

      	This sample app demonstrates how to run objects under
	the content using the geometry management capabilites of the
	visible world. The view sizes itself, the content will use the
	view's size if possible, and full justifies its three vis
	children horizontally, while centering them horizontally.

	For a more thorough treatment of Vis objects in general, see
	the VisSamp sample application.
	
	$Id: vissamp3.goc,v 1.1 97/04/04 16:37:42 newdeal Exp $


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	VisSamp3ProcessClass, GenProcessClass ;

/* define methods for this class here. */

@endc   /* end of class definition */

@classdecl	VisSamp3ProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */
/*
 ***************************************************************************
 *		VisSampNumberClass 
 ***************************************************************************
 */

@class	VisSampNumberClass, VisClass ;

/* State flags. We have some mouse-handling code in this sample app that
 * shows how clicks can be handled by visible objects.  The mouse-handling
 * stuff is superfluous to the geometry stuff we're trying to show in this
 * sample app.
 */
#define VSNS_MOUSE_DOWN 0x80
#define VSNS_SELECTED   0x40

#define NUMBER_TEXT_HEIGHT 36.0

	@instance @visMoniker VSNI_moniker;
	@instance byte VSNI_state = 0;
@endc
@classdecl	VisSampNumberClass ;


@start	AppResource ;

@object GenApplicationClass VisSamp3App = {

    GI_visMoniker = list { @VisSamp3TextMoniker }
    GI_comp = @VisSamp3Primary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @VisSamp3Primary;
}

@visMoniker VisSamp3TextMoniker = "C VisSamp3";

@end	AppResource

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass VisSamp3Primary  = {

    GI_comp = @VisSamp3View;		/* this window has one child: the
					   GenView object (see below) */

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

@object GenViewClass VisSamp3View = {

    /* 
     * Make view scrollable in X and Y.
     *
     * Also, this makes sure the view can be any width, regardless of the 
     * width of the VisContent, since the content will size itself to
     * match the view afterwards (because of it setting
     * VCNA_SAME_WIDTH_AS_VIEW) 
     */
    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;

    /*
     * We'll have the view run a VisContent object, in the UI thread, same as
     * the view.  
     */
    GVI_content = VisSampContent;

    GVI_color = { C_CYAN, 0, 0, 0 };

    /*
     * The user won't be entering any text, so we don't need a
     * floating keyboard on pen-based systems.
     */
    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@object VisContentClass VisSampContent = { 
    /* 
     * We'll let the content choose its width according to the view. 
     * We let the view be any width it wants.  Actually, if the
     * content's child objects don't fit in the area passed, the
     * content will get wider or taller than the view as necessary,
     * and become scrollable. 
     */
    VCNI_attrs = @default | VCNA_SAME_WIDTH_AS_VIEW |
                            VCNA_SAME_HEIGHT_AS_VIEW;

    /* 
     * We'll full justify the children. We'll also expand our
     * width to fill the width of the view, so the objects can be 
     * full justified. (If we didn't set the expand-width-to-fit flag, 
     * the content would stay shrunk around the children.)  We'll
     * also expand the height so we can center the children
     * vertically. 
     */
    VCI_geoDimensionAttrs = VCGDA_EXPAND_WIDTH_TO_FIT_PARENT |
                            WJ_FULL_JUSTIFY_CHILDREN_HORIZONTALLY |

                            VCGDA_EXPAND_HEIGHT_TO_FIT_PARENT |
			    HJ_CENTER_CHILDREN_VERTICALLY;

    /* VCGA_INCLUDE_ENDS_IN_CHILD_SPACING apportions space in front of
     * the first child and after the last child, as well as the spaces
     * between children.
     */
    VCI_geoAttrs = VCGA_INCLUDE_ENDS_IN_CHILD_SPACING;

    /* Define children for the content */
    VCI_comp = 	@MySampNumber1, 
		@MySampNumber2, 
		@MySampNumber3;  
}

@object VisSampNumberClass MySampNumber1 = { 
    VSNI_moniker = "1"; 
    
    /* 
     * Hand size the object. The position will be set by the geometry
     * manager.  If we wanted to custom size the object as a result of
     * geometry calls, we'd subclass MSG_VIS_RECALC_SIZE. 
     */
    VI_bounds = {0, 0, 80, 40};
}

@object VisSampNumberClass MySampNumber2 = { 
    VSNI_moniker = "2"; 
    
    /* 
     * Hand size the object. The position will be set by the geometry
     * manager.  If we wanted to custom size the object as a result of
     * geometry calls, we'd subclass MSG_VIS_RECALC_SIZE. 
     */
    VI_bounds = {0, 0, 80, 40};
}

@object VisSampNumberClass MySampNumber3 = { 
    VSNI_moniker = "3"; 
    
    /* 
     * Hand size the object. The position will be set by the geometry
     * manager.  If we wanted to custom size the object as a result of
     * geometry calls, we'd subclass MSG_VIS_RECALC_SIZE. 
     */
    VI_bounds = {0, 0, 80, 40};
}

@end Interface

/***********************************************************************
 *
 * Handlers for VisSampNumberClass
 *
 ***********************************************************************/



/***********************************************************************
 *		MSG_VIS_DRAW for VisSampNumberClass
 ***********************************************************************
 * SYNOPSIS:	This message draws each VisSampNumber object whenever
 *		that object needs to be redrawn. 
 *
 * PARAMETERS:	
 *	void(word drawFlags, GStateHandle gstate)
 *    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * CAVEATS:	This method does not work in black & white systems.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/22/92		Initial Revision
 *
 ***********************************************************************/
@method VisSampNumberClass, MSG_VIS_DRAW 
{
    byte leftTopColor, rightBottomColor, fillColor;

    /*
     * Set the font and tetx color of the moniker to be drawn inside
     * the Number object.
     */
    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(NUMBER_TEXT_HEIGHT));
    GrSetTextColor (gstate, CF_INDEX, C_BLACK, 0, 0);

    /* 
     * We use a different color scheme to draw the object is it is
     * selected than if it is not.
     */
    if (pself->VSNI_state & VSNS_SELECTED) {
	leftTopColor = C_BLACK;
	rightBottomColor = C_WHITE;
	fillColor = C_DARK_GREY;
    } 
    else {
	leftTopColor = C_WHITE;
	rightBottomColor = C_BLACK;
	fillColor = C_LIGHT_CYAN; 
    }

    /* Fill the object region. */
    GrSetAreaColor (gstate, CF_INDEX, fillColor, 0, 0);
    GrFillRect (gstate, pself->VI_bounds.R_left,
			pself->VI_bounds.R_top,
			pself->VI_bounds.R_right-1,
			pself->VI_bounds.R_bottom-1);

    /* Draw a rectangle, with a cute border around it. */
    GrSetLineColor (gstate, CF_INDEX, leftTopColor, 0, 0);
    GrDrawVLine (gstate, pself->VI_bounds.R_left,
		         pself->VI_bounds.R_top,
		         pself->VI_bounds.R_bottom-1);
    GrDrawHLine (gstate, pself->VI_bounds.R_left,
		         pself->VI_bounds.R_top,
		         pself->VI_bounds.R_right-1);

    GrSetLineColor (gstate, CF_INDEX, rightBottomColor, 0, 0);
    GrDrawVLine (gstate, pself->VI_bounds.R_right,
		         pself->VI_bounds.R_top,
		         pself->VI_bounds.R_bottom-1);
    GrDrawHLine (gstate, pself->VI_bounds.R_left+1,
		         pself->VI_bounds.R_bottom,
		         pself->VI_bounds.R_right-1);
    GrDrawVLine (gstate, pself->VI_bounds.R_right,
		         pself->VI_bounds.R_top+1,
		         pself->VI_bounds.R_bottom);
    GrDrawHLine (gstate, pself->VI_bounds.R_left+1,
		         pself->VI_bounds.R_bottom,
		         pself->VI_bounds.R_right);

    /* 
     * Draw the moniker for this object in the gstate's text
     * styles.
     */
    @call self::MSG_VIS_DRAW_MONIKER(
	   	((J_CENTER << DMF_Y_JUST_OFFSET) | 
		(J_CENTER << DMF_X_JUST_OFFSET)),
	   	pself->VSNI_moniker, 36, gstate, 0, 0, 0, 0);
}


/***********************************************************************
 *				EnsureSelectedState
 ***********************************************************************
 * SYNOPSIS:	This routine checks whether a VisSampNumber object is
 *		still currently selected; (the user has clicked and
 *		held on the object).
 *    
 * CALLED BY:	Various message handlers for VisSampNumberClass
 *		(MSG_META_START_SELECT, MSG_META_PTR, and
 *		MSG_VIS_LOST_GADGET_EXCL)
 *    
 * RETURN:	-1		object is not selected 		
 *		 0		object is selected    
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/23/92		Initial Revision
 *
 ***********************************************************************/
byte EnsureSelectedState(byte newState, byte *oldState) {
    if (newState) {
    	if (!(*oldState & VSNS_SELECTED)) {
      	    *oldState = *oldState | VSNS_SELECTED;
      	    return (-1);
    	} 
	else {
      	    return (0);
    	}
    } 
    else {
    	if (*oldState & VSNS_SELECTED) {
      	    *oldState = *oldState & ~VSNS_SELECTED;
      	    return (-1);
    	} 
	else {
      	    return (0);
    	}
    }
}


/***********************************************************************
 *		MSG_META_START_SELECT for VisSampNumberClass
 ***********************************************************************
 * SYNOPSIS:	This message is sent to the VisSampNumber object
 *		whenever the user initiates a select-click within its
 *		visual bounds.     
 * PARAMETERS:	
 *	void (word xPosition, word yPosition, word inputState,
 *					MouseReturnParams *retVal)
 *    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/23/92		Initial Revision
 *
 ***********************************************************************/
@method VisSampNumberClass, MSG_META_START_SELECT 
{
    pself->VSNI_state = pself->VSNI_state | VSNS_MOUSE_DOWN;

    /* 
     * Grab the mouse, and make sure we get pointer events. Also take
     * the gadget exclusive. 
     */
    @call self::MSG_VIS_GRAB_MOUSE();
    @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);

    /* Redraw the object to reflect its selected state. */
    if (EnsureSelectedState(VSNS_SELECTED, &(pself->VSNI_state))) {
    	@call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
    }

    /* 
     * Say we handled this method, and we want to return to the
     * default cursor in case someone else set a special cursor 
     * previously. 
     */
    retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
}


/***********************************************************************
 *		MSG_META_END_SELECT for VisSampNumberClass
 ***********************************************************************
 * SYNOPSIS:	This message is sent out when the user releases the
 *		mouse from a previously selected VisSampNumberClass
 *		object.     
 * PARAMETERS:
 *	void (word xPosition, word yPosition, word inputState,
 *				MouseReturnParams *retVal)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/23/92		Initial Revision
 *
 ***********************************************************************/
@method VisSampNumberClass, MSG_META_END_SELECT 
{
    /* 
     * Release the gadget exclusive, which will cause a
     * MSG_VIS_LOST_GADGET_EXCL to arrive at our object. 
     */
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);

    /* 
     * Say user has surrendered the mouse, and let some other object
     * use the message if they want it.
     */
    retVal->flags = MRF_REPLAY;
}


/***********************************************************************
 *		MSG_META_PTR for VisSampNumberClass
 ***********************************************************************
 * SYNOPSIS:	This message handles pointer events once the
 *		VisSampNumber object has the mouse grab. This handler
 *		determines if the mouse is still within the visible
 *		bounds of the object or has roamed outside its bounds.
 *     
 * PARAMETERS:	
 *	void (word xPosition, word yPosition, word inputState,
 *					MouseReturnParams *retVal)
 *    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/22/92		Initial Revision
 *
 ***********************************************************************/
@method VisSampNumberClass, MSG_META_PTR 
{
    /* 
     * If the user moves off the button, and it's currently selected,
     * we'll deselect it.  If the user moves over the button, and it's
     * currently not selected, we'll select it. 
     */
    if (!(pself->VSNI_state & VSNS_MOUSE_DOWN)) {
    	retVal->flags = MRF_REPLAY;
    } 
    else {
    	if ((xPosition < pself->VI_bounds.R_left) ||
      	    (xPosition > pself->VI_bounds.R_right) ||
      	    (yPosition < pself->VI_bounds.R_top) ||
      	    (yPosition > pself->VI_bounds.R_bottom)) {

      	    /* The mouse has moved off of the button; deselect it. */
      	    if (EnsureSelectedState(0, &(pself->VSNI_state))) {
        	@call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
      	    }
    
    	} 
	else {

      	    /* The mouse has moved over button; select it. */
      	    if (EnsureSelectedState(VSNS_SELECTED, &(pself->VSNI_state))) {
        	@call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
      	    }
    	}
   
    	/* 
	 * Say we handled this method, and we want to return to the
	 * default cursor in case someone else set a special cursor
	 * previously. 
	 */
    	retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
    }
}


/***********************************************************************
 *		MSG_VIS_LOST_GADGET_EXCL for VisSampNumberClass
 ***********************************************************************
 * SYNOPSIS:	This message handles the case where the gadget
 *		exclusive is removed from the object before its
 *		release. This may be done by the specific UI in some
 *		circumstances, and you should have a message handler
 *		for those cases.
 * 
 * PARAMETERS:
 *	void()	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/22/92		Initial Revision
 *
 ***********************************************************************/
@method VisSampNumberClass, MSG_VIS_LOST_GADGET_EXCL {

    if (pself->VSNI_state & VSNS_MOUSE_DOWN) {

      	pself->VSNI_state = pself->VSNI_state & ~VSNS_MOUSE_DOWN;

      	/* Release the mouse grab */
      	@call self::MSG_VIS_RELEASE_MOUSE();

     	if (EnsureSelectedState(0, &(pself->VSNI_state))) {
	    /*
	     * Yes, the object was selected.  Let's redraw it and do
	     * whatever our desired action should be.
	     */
             @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
	}
    }
}



