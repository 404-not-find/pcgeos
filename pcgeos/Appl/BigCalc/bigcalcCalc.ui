/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	 PCGEOS
 * MODULE:	 bigcalcCalc.ui
 * FILE:	 bigcalcCalc.ui
 *
 * AUTHOR: 	 Christian Puscasiu, Feb 27, 1992
 *
 * REVISION HISTORY:
 *	Date	 Name	 Description
 *	----	 ----	 -----------
 *	2/27/92	 CP	 Initial version
 *	10/29/96 andres	 Modified for DOVE
 *
 * DESCRIPTION:
 *
 *
 *
 * 	$Id: bigcalcCalc.ui,v 1.1 97/04/04 14:38:25 newdeal Exp $
 *

***********************************************************************/


start CalcResource;

Calculator		= GenInteraction {
	children	=
			TopRow,
#if _SCIENTIFIC_REP	
			DegreeItemGroup,
#endif 	/* if _SCIENTIFIC_REP */
			KeyPads;
	hints		= {
			HINT_NO_WIDER_THAN_CHILDREN_REQUIRE,
			HINT_NO_TALLER_THAN_CHILDREN_REQUIRE,
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 2>
				},
			HINT_ORIENT_CHILDREN_VERTICALLY
			}
}

KeyPads			= GenInteraction {
	children 	= 
#if _SCIENTIFIC_REP	
			SciKeyPad,
#endif 	/* if _SCIENTIFIC_REP */
			MemKeyPad,
			NumKeyPad,
			OpsKeyPad,
			BigCalcPaperRoll;

	hints		= {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_CENTER_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_BOTTOM_JUSTIFY_CHILDREN,
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 9>
			},
			HINT_TOOLBOX 
			}
}

TopRow			= GenInteraction {

	children	= NumberDisplayAndMemory;
	hints		= {
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 1>
			},
			HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_CENTER_CHILDREN_VERTICALLY
			}
}

NumberDisplayAndMemory	= GenInteraction {
	children	= 
			BigCalcNumberDisplay,
			DeleteClearInteraction;

	hints		= {
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 2>
			},
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_CENTER_CHILDREN_VERTICALLY
			}
}

DeleteClearInteraction	= GenInteraction {
	children	= 
			ButtonDelete,	ButtonClear;
	hints		= {
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 2>
				},
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_TOOLBOX
			}
}

BigCalcNumberDisplay	= CalcInputField {

	text		= "0";
	genAttributes	= default +targetable;
	maxLength	= NUMBER_NUM_CHARS;
	applyMsg	= MSG_BC_PROCESS_ENTER;
	destination 	= process;
	textDisplayAttributes = default +singleLineText;
	hints		= {
			HINT_DEFAULT_TARGET,
			ATTR_GEN_TEXT_FLOAT_DECIMAL,
			ATTR_GEN_TEXT_MAKE_UPPERCASE,
			HINT_TEXT_CURSOR_AT_END,
			ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {
				word DEF_PARA_ATTR_RIGHT
			},
			ATTR_GEN_TEXT_EXTENDED_FILTER {
				byte	VTEFT_BEFORE_AFTER
			},
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
/*			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS,
						NUMBER_DISPLAY_WIDTH+20>
				SpecHeight <>
				}, */
#ifdef DO_PIZZA
			ATTR_GEN_TEXT_NO_FEP,
#endif
			ATTR_GEN_TEXT_DONT_BEEP_ON_INSERTION_ERROR
	}
}

/****************************************************************************
 	Memory Key Pad (STO, RCL, M-, M+)
 ****************************************************************************/

MemKeyPad = GenInteraction {
	children =
		ButtonStore,
		ButtonRecall,
		MemoryMinusButton,
		MemoryPlusButton;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

MEM_BUTTON(ButtonStore,"STO",MSG_IF_GET_FROM_CALC,QHStoreStr)
MEM_BUTTON(ButtonRecall,"RCL",MSG_IF_SEND_TO_CALC,QHRecallStr)
#include "Art/mkrMemPlus.ui"
MEM_BUTTON(MemoryPlusButton,MemPlusMoniker,MSG_MEM_IF_MEMORY_PLUS,QHMemPlusStr)
#include "Art/mkrMemMinus.ui"
MEM_BUTTON(MemoryMinusButton,MemMinusMoniker,MSG_MEM_IF_MEMORY_MINUS,QHMemMinusStr)


/****************************************************************************
 	Numbers Key Pad (0-9, +/-, .)
 ****************************************************************************/

NumKeyPad = GenInteraction {
	children = 
		NumbersRow1,
		NumbersRow2,
		NumbersRow3,
		NumbersRow4;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

NumbersRow1 = GenInteraction {
	children = 
		ButtonSeven,
		ButtonEight,
		ButtonNine;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

NumbersRow2 = GenInteraction {
	children = 
		ButtonFour,
		ButtonFive,
		ButtonSix;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

NumbersRow3 = GenInteraction {
	children = 
		ButtonOne,
		ButtonTwo,
		ButtonThree;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

NumbersRow4 = GenInteraction {
	children = 
		ButtonZero,
		ButtonPlusMinus,
		ButtonPoint;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

KBD_BUTTON(ButtonOne,  1,'1',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonTwo,  2,'2',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonThree,3,'3',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonFour, 4,'4',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonFive, 5,'5',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonSix,  6,'6',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonSeven,7,'7',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonEight,8,'8',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonNine, 9,'9',NUM_COLOR1,NUM_COLOR2)
KBD_BUTTON(ButtonZero, 0,'0',NUM_COLOR1,NUM_COLOR2)
#include "Art/mkrPlusMinus.ui"
CALC_BUTTON(ButtonPlusMinus,PlusMinusMoniker,MSG_BC_PROCESS_PLUSMINUS,WIDTH_STD, HEIGHT_STD,NUM_COLOR1,NUM_COLOR2,QHPlusMinusStr)
KBD_BUTTON(ButtonPoint,.,'.',NUM_COLOR1,NUM_COLOR2)


/****************************************************************************
 	Operators Key Pad (+, -, *, /, (, ), %, 1/x, X^2, /x, =)
 ****************************************************************************/

OpsKeyPad = GenInteraction {
	children =
		OpsRow1,
		OpsRow2,
		OpsRow3,
		OpsRow4;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

OpsRow1 = GenInteraction {
	children = 
		ButtonDivide,
		ButtonPercent,
		ButtonOneOver;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

OpsRow2 = GenInteraction {
	children = 
		ButtonTimes,
		ButtonSquare,
		ButtonSquareRoot;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

OpsRow3 = GenInteraction {
	children = 
		ButtonMinus,
#if _RPN_CAPABILITY
		ButtonSwap,
		ButtonRollDown,
#endif /* if _RPN_CAPABILITY */
		ButtonLeftParen,
		ButtonRightParen;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

OpsRow4 = GenInteraction {
	children = 
		ButtonPlus,
		ButtonEquals,
		ButtonEnter;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}


KBD_BUTTON_NONSTD(ButtonEE,EE,'e',WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHEEStr)

#include "Art/mkrPlus.ui"
CALC_BUTTON(ButtonPlus,PlusMoniker, MSG_BC_PROCESS_PLUS, WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHPlusStr)

#include "Art/mkrMinus.ui"
CALC_BUTTON(ButtonMinus,MinusMoniker,MSG_BC_PROCESS_MINUS,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHMinusStr)

#include "Art/mkrTimes.ui"
CALC_BUTTON(ButtonTimes,TimesMoniker,MSG_BC_PROCESS_TIMES,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHTimesStr)

#include "Art/mkrDivide.ui"
CALC_BUTTON(ButtonDivide,DivideMoniker,MSG_BC_PROCESS_DIVIDE,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHDivideStr)


CALC_BUTTON(ButtonOneOver,"1/x",MSG_BC_PROCESS_ONE_OVER,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHOneOverStr)
CALC_BUTTON(ButtonSquare,SquareMoniker,MSG_BC_PROCESS_SQUARE,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHSquareStr)
POWER_MONIKER(SquareMoniker,x,2,0)

#if DO_DBCS
CALC_BUTTON(ButtonSquareRoot,ButtonSquareRootMoniker,MSG_BC_PROCESS_SQUARE_ROOT,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHSquareRootStr)
visMoniker ButtonSquareRootMoniker = data {
	byte	-1
	wchar C_SQUARE_ROOT, 'x', 0;
}
#else
CALC_BUTTON(ButtonSquareRoot,"\\xc3x",MSG_BC_PROCESS_SQUARE_ROOT,WIDTH_STD,HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHSquareRootStr)
#endif  /* if DO_DBCS */


CALC_BUTTON(ButtonLeftParen,"(",MSG_BC_PROCESS_LEFT_PAREN,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHLeftParenStr)
CALC_BUTTON(ButtonRightParen,")",MSG_BC_PROCESS_RIGHT_PAREN,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHRightParenStr)
CALC_BUTTON(ButtonPercent,"%",MSG_BC_PROCESS_PERCENT,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHPercentStr)


#if _RPN_CAPABILITY
CALC_BUTTON_NOT_USABLE(ButtonSwap,SwapMoniker,MSG_BC_PROCESS_SWAP,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHSwapStr)

visMoniker	SwapMoniker = {
	size = standard;
	color = color4;
	aspectRatio = normal;
	gstring	{
		GSBeginString	|
		GSSetTextColorIndex	C_WHITE	|
		GSSetFont		FID_BERKELEY, 14 |
		GSDrawTextAtCP		<X> |
		GSSetFont		0, 12 |
		GSRelMoveTo		-2, 0 |
		GSDrawTextAtCP		<<>> |
		GSSetFont		0, 14 |
		GSRelMoveTo		-2, 0 |
		GSDrawTextAtCP		<Y> |
		GSEndString
	}
}

CALC_BUTTON_NOT_USABLE(ButtonRollDown,"Roll",MSG_BC_PROCESS_ROLL_DOWN,WIDTH_STD, HEIGHT_STD,OPS_COLOR1,OPS_COLOR2,QHRollDownStr)

visMoniker	RPNClearButtonMoniker	= "CLx";
#endif /* if _RPN_CAPABILITY */


visMoniker	InfixClearButtonMoniker	= "C/CE";
ButtonClear	 = CalcTrigger vardataReloc {
	moniker		= InfixClearButtonMoniker;
	action		= MSG_BC_PROCESS_CLEAR, process;
	hints		= {
			HINT_CENTER_MONIKER,
			BUTTON_SIZE(WIDTH_SCI,HEIGHT_TITLE,1)
			,
			ATTR_GEN_TRIGGER_CUSTOM_DOUBLE_PRESS {
				word	MSG_BC_PROCESS_CLEAR_ALL
			},
			HINT_GADGET_BACKGROUND_COLORS {
				Color	CLEAR_COLOR1
				Color	CLEAR_COLOR2
				Color	CLEAR_COLOR1
				Color	CLEAR_COLOR2
			},
			ATTR_GEN_FOCUS_HELP {UN_OPTR QHClearStr}
	}
}

#include "Art/mkrBackspace.ui"
#if DO_DBCS
TITLE_BUTTON(ButtonDelete,BackspaceMoniker,C_SYS_BACKSPACE,CLEAR_COLOR1,CLEAR_COLOR2,WIDTH_BACKSPACE,QHDeleteStr)
#else
TITLE_BUTTON(ButtonDelete,BackspaceMoniker,0xff08,CLEAR_COLOR1,CLEAR_COLOR2,WIDTH_BACKSPACE,QHDeleteStr)
#endif

ButtonEnter	= CalcTrigger vardataReloc {
	moniker		= "Enter"; 
	genStates	= default -usable;
	kbdAccelerator	= specificUI ENTER;
	action		= MSG_BC_PROCESS_ENTER, process;
	hints		= {
			HINT_CENTER_MONIKER,
			BUTTON_SIZE(WIDTH_EQU,HEIGHT_EQU,1),
			HINT_DONT_SHOW_SHORTCUT,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
			HINT_GADGET_BACKGROUND_COLORS {
				Color	OPS_COLOR1
				Color	OPS_COLOR2
				Color	OPS_COLOR1
				Color	OPS_COLOR2
			},
			ATTR_GEN_FOCUS_HELP {UN_OPTR QHEnterStr}
	}
}

#include "Art/mkrEquals.ui"

ButtonEquals	= CalcTrigger vardataReloc {
	moniker		= EqualsMoniker;
	kbdAccelerator	= specificUI ENTER;
	action		= MSG_BC_PROCESS_ENTER, process;
	hints		= {
			HINT_CENTER_MONIKER,
			BUTTON_SIZE(WIDTH_EQU,HEIGHT_EQU,1),
			HINT_DONT_SHOW_SHORTCUT,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
			HINT_GADGET_BACKGROUND_COLORS {
				Color	OPS_COLOR1
				Color	OPS_COLOR2
				Color	OPS_COLOR1
				Color	OPS_COLOR2
			},
			ATTR_GEN_FOCUS_HELP {UN_OPTR QHEqualsStr}
	}
}


/****************************************************************************
 	Paper Roll
 ****************************************************************************/

BigCalcPaperRoll	= PaperRoll {
	maxLength	= "(MAX_LENGTH_PAPER_ROLL*5)/4" ;
	textDisplayAttributes = default
			+initScrolling,
			+tailOriented;
	genStates	= default -usable;
	hints		= {
			ATTR_GEN_TEXT_SELECTABLE,
#ifdef DO_PIZZA
			ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
				word DEF_CHAR_ATTR_FONT_SIZE(VTDF_PIZZA_KANJI, VTDS_16)
			},
#endif

			ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
				word DEF_CHAR_ATTR_FONT_SIZE(VTDF_BISON, VTDS_12)
			},
			ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {
				word DEF_PARA_ATTR_RIGHT
			},
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 1>
			},

			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS, 
					NUMBER_DISPLAY_WIDTH+4>
				SpecHeight <>
				word 0
				},
			HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
			HINT_TEXT_CURSOR_AT_END,
			HINT_TEXT_WASH_COLOR {
				ColorQuad <
					C_WHITE,
					CF_INDEX,
					0, 0
						>
					}
			}
	
}

chunk	PaperRollLine	= {------\r}

end CalcResource;


/****************************************************************************
 	Scientific Extensions Keybpad
 ****************************************************************************/

#if     _SCIENTIFIC_REP
start	ExtensionResource;

DegreeItemGroup	= GenItemGroup {
	children =
		DegreeItem,
		RadianItem,
		GradianItem;
	selection = DU_DEGREES;
	numSelections = 1;
	genStates = default -usable;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

DegreeItem = GenItem vardataReloc {
	moniker = "Deg";
	identifier = DU_DEGREES;
	hints = {
		ATTR_GEN_FOCUS_HELP {UN_OPTR QHDegreesStr}
	}
}

RadianItem = GenItem vardataReloc {
	moniker = "Rad";
	identifier = DU_RADIANS;
	hints = {
		ATTR_GEN_FOCUS_HELP {UN_OPTR QHRadiansStr}
	}
}

GradianItem = GenItem vardataReloc {
	moniker = "Grad";
	identifier = DU_GRADIANS;
	hints = {
		ATTR_GEN_FOCUS_HELP {UN_OPTR QHGradiansStr}
	}
}


SciKeyPad = GenInteraction {
	children =
		SciFunRow1,
		SciFunRow2,
		SciFunRow3,
		SciFunRow4;
	genStates = default -usable;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

SciFunRow1 = GenInteraction {
	children =
		InverseBooleanGroup,
		ButtonPi,
		ButtonEE;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

SciFunRow2 = GenInteraction {
	children =
		ButtonSine,
		ButtonArcSine,
		ButtonLn,
		ButtonEToX;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

SciFunRow3 = GenInteraction {
	children =
		ButtonCosine,
		ButtonArcCosine,
		ButtonLog,
		Button10ToX;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

SciFunRow4 = GenInteraction {
	children =
		ButtonTangent,
		ButtonArcTangent,
		ButtonFactorial,
		ButtonYToX;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}


InverseBooleanGroup	= GenBooleanGroup {
	children	= InverseBoolean;
	selectedBooleans = 0;
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_INVERSE;
}

InverseBoolean		= CalcBoolean vardataReloc {
	moniker		= "Inv";
	identifier	= 1;
	hints		= {
			HINT_CENTER_MONIKER,
			BUTTON_SIZE(WIDTH_INV,HEIGHT_INV,1),
			HINT_GADGET_BACKGROUND_COLORS {
				Color	SCI_COLOR1
				Color	SCI_COLOR2
				Color	C_GREEN
				Color	C_DARK_GRAY
			},
			ATTR_GEN_FOCUS_HELP {UN_OPTR QHInverseStr}

	}
}

CALC_BUTTON(ButtonFactorial,"x!",MSG_BC_PROCESS_FACTORIAL,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHFactorialStr)
CALC_BUTTON(ButtonSine,"sin",MSG_BC_PROCESS_SINE,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHSineStr)
CALC_BUTTON_NOT_USABLE(ButtonArcSine,ArcSineMoniker,MSG_BC_PROCESS_ARC_SINE,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHArcSineStr)

POWER_MONIKER(ArcSineMoniker,sin,-1,-4)

CALC_BUTTON(ButtonCosine,"cos",MSG_BC_PROCESS_COSINE,WIDTH_SCI, HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHCosineStr)
CALC_BUTTON_NOT_USABLE(ButtonArcCosine,ArcCosineMoniker,MSG_BC_PROCESS_ARC_COSINE,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHArcCosineStr)

POWER_MONIKER(ArcCosineMoniker,cos,-1,-4)

CALC_BUTTON(ButtonTangent,"tan",MSG_BC_PROCESS_TANGENT,WIDTH_SCI, HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHTangentStr)
CALC_BUTTON_NOT_USABLE(ButtonArcTangent,ArcTanMoniker,MSG_BC_PROCESS_ARC_TANGENT,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHArcTangentStr)

POWER_MONIKER(ArcTanMoniker,tan,-1,-4)

CALC_BUTTON(ButtonYToX,YToXMoniker,MSG_BC_PROCESS_Y_TO_X,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHYToXStr)

POWER_MONIKER(YToXMoniker,y,x,0)

CALC_BUTTON(ButtonLn,"ln",MSG_BC_PROCESS_LN,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHLnStr)
CALC_BUTTON(ButtonLog,"log",MSG_BC_PROCESS_LOG,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHLogStr)
CALC_BUTTON(ButtonEToX,EToXMoniker,MSG_BC_PROCESS_E_TO_X,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHEToXStr)

POWER_MONIKER(EToXMoniker,e,x,0)

CALC_BUTTON(Button10ToX,TenToXMoniker,MSG_BC_PROCESS_TEN_TO_X,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QH10ToXStr)

POWER_MONIKER(TenToXMoniker,10,x,0)

#if DO_DBCS
CALC_BUTTON(ButtonPi,ButtonPiMoniker,MSG_BC_PROCESS_PI,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHPiStr)
visMoniker ButtonPiMoniker = data {
	byte	-1
	wchar C_GREEK_SMALL_LETTER_PI, 0;
}
#else
CALC_BUTTON(ButtonPi,"\\xb9",MSG_BC_PROCESS_PI,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHPiStr)
#endif
CALC_BUTTON(ButtonE,"e",MSG_BC_PROCESS_E,WIDTH_SCI,HEIGHT_SCI,SCI_COLOR1,SCI_COLOR2,QHeStr)

end	ExtensionResource;
#endif /* if _SCIENTIFIC_REP */
