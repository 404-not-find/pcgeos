/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- l Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  bigCalcMain.ui
 * FILE:	  bigCalcMain.ui
 *
 * AUTHOR:  	  Christian Puscasiu, Feb 24, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	2/24/92	  CP	    Initial version
 *     	10/29/96  andres    Modified for DOVE
 *
 * DESCRIPTION:
 *	This file will contain all the main UI faetures, i.e. the basic 
 *	features of the calculator.  It will have the
 *
 *
 * 	$Id: bigcalcMain.ui,v 1.2 98/04/28 17:38:59 joon Exp $
 *
 ***********************************************************************/

/* Some Feature/ Product Constants */

#define _NIKE	(0)

#define _RESPONDER (0)

#define _PENELOPE (0)

#define _DOVE (0)

#define	_RPN_CAPABILITY	(-1)

#define _SCIENTIFIC_REP (-1)


#define _STATISTICAL_FORMS (-1)

#define _NEW_CONVERSIONS_IN_PENELOPE 	(0)



/*	Standard Include Files	*/
#include "generic.uih"
#include "product.uih"

/*	My Include Files	*/

#include "Art/mkrBigCalc.ui"
#include "Art/mkrBigCalcTiny.ui"

#include "bigcalcMain.uih"
#include "bigcalcPCF.uih"
#include "bigcalcExtraMain.ui"
#include "bigcalcCalc.uih"
#include "bigcalcCalc.ui"
#include "bigcalcMath.uih"
#include "bigcalcMath.ui"
#include "bigcalcPCF.ui"
#include "bigcalcData.ui"
#include "bigcalcTemplate.ui"


/*	Interface Objects */

/*	Application Object	*/

start	AppResource;

BigCalculatorAppObj = BigCalcApplication vardataReloc {

	children 	= BigCalcPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) =
			BigCalcPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_STARTUP_LOAD_OPTIONS) =
			ExchangeRateBox;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
			MyEditControl, OptionsMenu;	
	/* OptionsMenu should really be on STARTUP_LOAD_OPTIONS,
	 * but is not because its children maintain state that
	 * can be unique from the .INI file */
	moniker		= list {
			BigCalcLCMoniker,
			BigCalcLMMoniker,
			BigCalcSCMoniker,
			BigCalcSMMoniker,
			BigCalcYCMoniker,
			BigCalcYMMoniker,
			BigCalcSCGAMoniker,
			BigCalcTinyTCMoniker,
			BigCalcTinyTMMoniker,
			BigCalcTinyTCGAMoniker,
			BigCalcTextMoniker
			}
	hints		= {
			HINT_SIZE_WINDOW_AS_DESIRED,
			ATTR_GEN_INIT_FILE_CATEGORY {
				char	"bigcalc",0
			},
			ATTR_GEN_HELP_FILE {
			    char "calc", 0
			}/*,
			ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER {
			    UN_OPTR SaveOptionsTrigger
			},
			ATTR_GEN_APPLICATION_RESET_OPTIONS_TRIGGER {
			    UN_OPTR ResetOptionsTrigger
			} */
	}
}

visMoniker	BigCalcTextMoniker	= "Calculator";

end	AppResource;




start	MainInterface;		/* contains the principle UI obj's */

/** ------------ *** ---------------------------- *** ------------------ **/
/** The followings are new conversion features can be reused by setting  **/
/** the flag _NEW_CONERSIONS_FOR_GENERAL to be true.                     **/
/**									 **/
/** These objects are originally created for Penelope's new general      **/
/** conversions, but we have changed the method of implementation in the **/
/** optimization process. (reduce the number of objects with the use of  **/
/** tables) These objects are kept here becasue of their compatibility   **/
/** with all the existing conversions and ease of reuse.  -Eliz 5/14/96  **/
/** ------------ *** ---------------------------- *** ------------------ **/

#if _NEW_CONVERSIONS_FOR_GENERAL

Ya2MButton = GenTrigger {
	moniker = "yd -> m";		/* Yard to Meter */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_YA_2_M
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

M2YaButton = GenTrigger {
	moniker = "m -> yd";		/* Meter to Yard */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_M_2_YA
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Sin2ScmButton = GenTrigger {
	moniker = "in2 -> cm2";	/* Square Inch to Square cm */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_IN_2_CM
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Scm2SinButton = GenTrigger {
	moniker = "cm2 -> in2";	/* Square cm to Square inch */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_CM_2_IN
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}


Sft2SmButton = GenTrigger {
	moniker = "ft2 -> m2 ";	/* Square feet to Square meter */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_FT_2_M
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Sm2SftButton = GenTrigger {
	moniker = "m2 -> ft2 ";	/* Square meter to Square feet */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_M_2_FT
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Sya2SmButton = GenTrigger {
	moniker = "yd2 -> m2 ";	/* Square yard to Square meter */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_YA_2_M
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}

	}
}

Sm2SyaButton = GenTrigger {
	moniker = "m2 -> yd2 ";	/* Square meter to Square yard */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_M_2_YA
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Sar2SkmButton = GenTrigger {
	moniker = "ac2 -> km2";	/* Square arces to Square kilometers */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_AR_2_KM
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Skm2SarButton = GenTrigger {
	moniker = "km2 -> ac2";	/* Square kilometers to Square arces */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_KM_2_AR
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Smi2SkmButton = GenTrigger {
	moniker = "mil -> km2";	/* Square miles to Square kilometers */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_MI_2_KM
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Skm2SmiButton = GenTrigger {
	moniker = "km2 -> mil";	/* Square kilometers to Square miles */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_S_KM_2_MI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Ou2MliButton = GenTrigger {
	moniker = "oz -> mL";		/* ounces to milliliters */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_OU_2_MLI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Mli2OuButton = GenTrigger {
	moniker = "mL -> oz";		/* milliliters to ounces */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_MLI_2_OU
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

Pi2LiButton = GenTrigger {
	moniker = "pi -> L";		/* pints to liters */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_PI_2_LI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

Li2PiButton = GenTrigger {
	moniker = "L -> pi";		/* liters to pints */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_LI_2_PI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	


UKOu2MliButton = GenTrigger {
	moniker = "oz -> mL";		/* UK ounces to milliliters */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_OU_2_MLI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

UKMli2OuButton = GenTrigger {
	moniker = "mL -> oz";		/* UK milliliters to ounces */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_MLI_2_OU
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}

UKPi2LiButton = GenTrigger {
	moniker = "pi -> L";		/* UK pints to liters */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_PI_2_LI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

UKLi2PiButton = GenTrigger {
	moniker = "L -> pi";		/* UK liters to pints */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_LI_2_PI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

UKGal2LiButton = GenTrigger {
	moniker = "gal -> pi";		/* UK gallons to pints */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_GAL_2_LI
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

UKLi2GalButton = GenTrigger {
	moniker = "pi -> gal";		/* UK pints to gallons */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_UK_LI_2_GAL
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

Ou2GButton = GenTrigger {
	moniker = "oz -> g";		/* ounces to grams */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_OU_2_G
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

G2OuButton = GenTrigger {
	moniker = "g -> oz";		/* grams to ounces */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_G_2_OU
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

St2KgButton = GenTrigger {
	moniker = "st -> kg";		/* stones to kilograms */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_ST_2_KG
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

Kg2StButton = GenTrigger {
	moniker = "kg -> st";		/* kilograms to stones */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_KG_2_ST
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

Ton2TonneButton = GenTrigger {
	moniker = "ton -> tonne";		/* ton to tonnes */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_TON_2_TONNE
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

Tonne2TonButton = GenTrigger {
	moniker = "tonne -> ton";		/* tonnes to ton */
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_TONNE_2_TON
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
			word 0		
		}
	}
}	

#endif /* of _NEW_CONVERSIONS_FOR_GENERAL */


/*	Primary Window -- contains a controller over all the accessible
	item and keeps track of them				*/

BigCalcPrimary	= GenPrimary {
	children	=
			BigCalcPrimaryOrganizational;
	hints		= {
			HINT_TOP_JUSTIFY_CHILDREN,
			HINT_CENTER_CHILDREN_HORIZONTALLY,
			HINT_DISPLAY_NOT_RESIZABLE,
			ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE,
			HINT_SIZE_WINDOW_AS_DESIRED,
			HINT_KEEP_INITIALLY_ONSCREEN,
			ATTR_GEN_HELP_CONTEXT {
				char "TOC", 0
			},			
			ATTR_GEN_WINDOW_KBD_OVERRIDE {
			    KeyboardOverride KO_NO_KEYBOARD
			}
	}
}


BigCalcPrimaryOrganizational = GenInteraction {

  children		= BigCalcPCFHolder,
			  EditMenu, 
			  OptionsMenu,
			  ConversionMenu,
			  Calculator,  
			  BigCalcBottomRowSeparator,
			  BigCalcBottomRowInteraction;
	hints		= { HINT_DRAW_IN_BOX }

}

BigCalcPCFHolder		= PCFHolder {

	attributes	= default +notUserInitiatable;
}


BigCalcBottomRowSeparator = GenGlyph {
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_GLYPH_SEPARATOR
	}
}

BigCalcBottomRowInteraction	= GenInteraction {

 children	= ConsumerChooser,
			ConsumerTrigger,
			SalesChooser,
			SalesTrigger,
#if _STATISTICAL_FORMS
			StatsChooser,
			StatsTrigger,
#endif /* if _STATISTICAL_FORMS */
			SSheetChooser,
			SSheetTrigger;
	hints		= {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_EXPAND_WIDTH_TO_FIT_PARENT,
			HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
			HINT_INCLUDE_ENDS_IN_CHILD_SPACING
			}
}


EditMenu = GenInteraction {

	children = MyEditControl;
	visibility = popup;
	hints = { 
		ATTR_GEN_INTERACTION_GROUP_TYPE { 
			GenInteractionGroupType GIGT_EDIT_MENU 
		}
	}
}

MyEditControl	= GenEditControl {
	
	hints = { 
		HINT_SAME_CATEGORY_AS_PARENT ,
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	mask GECF_UNDO or \
				mask GECF_CHAR_MAP or \
				mask GECF_CLIP_ART
		}
	}	
}

OptionsMenu	= GenInteraction {
	children 	= 
			MemoryBox,
			CustomizeBox,
			ClearPaperRollButton,
			SaveResetOptionsGroup;
	visibility	= popup;
	hints		= {
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INTERACTION_GROUP_TYPE { 
				GenInteractionGroupType GIGT_OPTIONS_MENU 
				}
			}
}


ConversionMenu	= GenInteraction {

	moniker		= 'C', "Convert";
	visibility	= popup;
	children =	
			ConvertAnglePopup,
			ConvertLengthPopup,
			ConvertVolumePopup,
			ConvertWeightPopup,
			ConvertTemperaturePopup,
			CurrencySubGroup;
	hints		= {
			HINT_ORIENT_CHILDREN_VERTICALLY
			}
}

CurrencySubGroup = GenInteraction {
	visibility	= subGroup;
	children	= 
			LtoRCurrencyButton,
			RtoLCurrencyButton,
			ExchangeRateBox;
	hints		= {
			HINT_ORIENT_CHILDREN_VERTICALLY
			}
}


ConvertAnglePopup = GenInteraction {
	moniker = 'A', "Angle";
	visibility	= popup;
	children =	Deg2RadButton,
			Rad2DegButton;
}

ConvertLengthPopup = GenInteraction {
	moniker = 'L', "Length";
	visibility	= popup;
#if DO_PIZZA
	/* the metric entries are first for Pizza */
	children =	Cm2InButton,
			In2CmButton,
			M2FtButton,
			Ft2MButton,
			Km2MiButton,
			Mi2KmButton;
#else
	children =	In2CmButton,
			Cm2InButton,
			Ft2MButton,
			M2FtButton,
			Mi2KmButton,
			Km2MiButton;
#endif
}

ConvertVolumePopup = GenInteraction {
	moniker = 'V', "Volume";
	visibility	= popup;
#if DO_PIZZA
	children =	Li2GalButton,
			Gal2LiButton;
#else
	children =	Gal2LiButton,
			Li2GalButton;
#endif
}

ConvertWeightPopup = GenInteraction {
	moniker = 'W', "Weight";
	visibility	= popup;
#if DO_PIZZA
	children = 	Kg2LbsButton,
			Lbs2KgButton;
#else
	children = 	Lbs2KgButton,
			Kg2LbsButton;
#endif
}

ConvertTemperaturePopup = GenInteraction {
	moniker = 'T', "Temperature";

	visibility	= popup;
#if DO_PIZZA
	children = 	C2FButton,
			F2CButton;
#else
	children = 	F2CButton,
			C2FButton;
#endif
}



In2CmButton = GenTrigger {

	moniker = 'I', "Inches to Centimeters";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_IN_2_CM
		}
	}
}

Cm2InButton = GenTrigger {

	moniker = 'C', "Centimeters to Inches";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_CM_2_IN
		}
	}
}

Ft2MButton = GenTrigger {
	moniker = 'F', "Feet to Meters";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_FT_2_M
		}
	}
}

M2FtButton = GenTrigger {
	moniker = 'M', "Meters to Feet";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_M_2_FT
		}
	}
}

Mi2KmButton = GenTrigger {
	moniker = 'l', "Miles to Kilometers";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_MI_2_KM
		}
	}
}


Km2MiButton = GenTrigger {
	moniker = 'K', "Kilometers to Miles";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_KM_2_MI
		}
	}
}

Gal2LiButton = GenTrigger {

	moniker = 'G', "Gallons to Liters";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_GAL_2_LI
		}
	}
}

Li2GalButton = GenTrigger {

	moniker = 'L', "Liters to Gallons";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_LI_2_GAL
		}
	}
}

Lbs2KgButton = GenTrigger {

	moniker = 'P', "Pounds to Kilograms";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_LBS_2_KG
		}
	}
}

Kg2LbsButton = GenTrigger {
	moniker = 'K', "Kilograms to Pounds";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_KG_2_LBS
		}
	}
}

F2CButton = GenTrigger {

	moniker = 'F', "Fahrenheit to Celsius";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_F_2_C
		}
	}
}

C2FButton = GenTrigger {

	moniker = 'C', "Celsius to Fahrenheit";

	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_C_2_F
		}
	}
}




Deg2RadButton = GenTrigger {
	moniker = 'D', "Degrees to Radians";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_DEG_2_RAD
		}
	}
}

Rad2DegButton = GenTrigger {
	moniker = 'R', "Radians to Degrees";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_RAD_2_DEG
		}
	}
}


ClearPaperRollButton	= GenTrigger {
	moniker		= 'E', "Erase Papertape";
	action		= MSG_PAPER_ROLL_CLEAR_PAPERROLL, BigCalcPaperRoll;
	genStates	= default -usable;
}

SaveResetOptionsGroup 	= GenInteraction {
	children 	= 
			SaveOptionsTrigger,
			ResetOptionsTrigger;
	visibility	= subGroup;
	hints		= {
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
	}
}

SaveOptionsTrigger	= GenTrigger {
	SAVE_OPTIONS_TRIGGER_VALUES
	action		= MSG_META_SAVE_OPTIONS, BigCalculatorAppObj;
}

ResetOptionsTrigger	= GenTrigger {
	/* Too difficult to implement for now, but we need trigger 
	 * or else the entire Save Options mechanism doesn't work */
	genStates = default -usable;
	RESET_OPTIONS_TRIGGER_VALUES
	action		= MSG_META_RESET_OPTIONS, BigCalculatorAppObj;
}


/****************************************************************/
/*		CURRENCY EXCHANGE RATE DIALOG BOX		*/
/****************************************************************/


LtoRCurrencyButton = GenTrigger {
	moniker = '1', "1. ";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_L_R_CURRENCY
		}
	}
}

RtoLCurrencyButton = GenTrigger {
	moniker = '2', "2. ";
	action = MSG_BC_PROCESS_CONVERT, process;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word	CO_R_L_CURRENCY
		}
	}
}

ExchangeRateBox		= SetExchangeRate {
	moniker		= 'x', "Set Exchange Rate";
	children	= LeftCurrencyDescription,
			  RightSideGroup;
	visibility	= dialog;
	type		= properties;
	attributes	= modal;
	hints		= {
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_RIGHT_JUSTIFY_CHILDREN,
			ATTR_GEN_HELP_CONTEXT {
				char "dbCurrency", 0
			}
			}
}

RightSideGroup = GenInteraction {
	moniker 	= "=";
	children 	= ExchangeRateNumber,
		   	  RightCurrencyDescription;
	type		= organizational;
	hints		= {

			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			HINT_CENTER_CHILDREN_VERTICALLY,
			HINT_PLACE_MONIKER_ABOVE,
			HINT_CENTER_MONIKER
			}
}

ExchangeRateNumber	= MemoryInputField {

#if DO_PIZZA 
	text		= "0.0092";
#else
	text		= "108.44";
#endif
	maxLength	= NUMBER_DISPLAY_WIDTH;

	textDisplayAttributes = default +singleLineText;
	hints		= {
			ATTR_GEN_TEXT_MAKE_UPPERCASE,
			ATTR_GEN_INIT_FILE_KEY {
				char	"exchange",0
			},
			ATTR_GEN_TEXT_FLOAT_DECIMAL,
			ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {
				word DEF_PARA_ATTR_RIGHT
			},
			HINT_DEFAULT_TARGET,
			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS,
						NUMBER_DISPLAY_WIDTH+4>|
				SpecHeight <>|
				word 1
				},
			ATTR_GEN_TEXT_EXTENDED_FILTER {
				byte	VTEFT_BEFORE_AFTER
				},
			FEP_HINT
			ATTR_GEN_TEXT_DONT_BEEP_ON_INSERTION_ERROR
			}
}

LeftCurrencyDescription	= GenText {

	moniker		= "1.00 ";
#if DO_PIZZA
	text		= "Yen";
#else
	text		= "Dollars";
#endif
	maxLength	= NUMBER_DISPLAY_WIDTH;
	textDisplayAttributes = default +singleLineText;
	hints		= {
			ATTR_GEN_INIT_FILE_KEY {
				char	"leftCurrency",0
			},
			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS,
						NUMBER_DISPLAY_WIDTH+4>|
				SpecHeight <>|
				word 1
				}
			}
}

RightCurrencyDescription	= GenText {

#if DO_PIZZA
	text		= "Dollars";
#else
	text		= "Yen";
#endif
	maxLength	= NUMBER_DISPLAY_WIDTH;
	textDisplayAttributes = default +singleLineText;
	hints		= {
			ATTR_GEN_INIT_FILE_KEY {
				char	"rightCurrency",0
			},
			HINT_FIXED_SIZE {
				SpecWidth <SST_AVG_CHAR_WIDTHS,
						NUMBER_DISPLAY_WIDTH+4>|
				SpecHeight <>|
				word 1
				}
			}
}


/***********************************************************************/
/*	CUSTOMIZE OPTIONS					       */
/***********************************************************************/

CustomizeBox		= CustBox {
	moniker		= 'C', "Customize";
	children	=  ExtensionsGroup,
			   ModeItemGroup,
			   NotationItemGroup,
			   DecimalPlacesRange,
			   WorksheetsGroup,
			   PaperRollGroup;
	type		= properties;
	visibility 	= dialog;
	hints		= {
			HINT_CENTER_CHILDREN_ON_MONIKERS,
			HINT_ORIENT_CHILDREN_VERTICALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_HELP_CONTEXT {
				char "dbCalcCustom", 0
			}
	}

}


NotationItemGroup	= GenItemGroup {
	moniker		= "Notation:";
	numSelections	= 1;
	selection	= DU_REGULAR;
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_UPDATE_NUMBER;
	children	= 
#if _SCIENTIFIC_REP
			NormalNotationItem,
			SciNotationItem;
#else
			NormalNotationItem;
#endif

	hints		= {
			HINT_ORIENT_CHILDREN_VERTICALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INIT_FILE_KEY {
				char	"NotationItemGroup",0
				}
			}
}


#if _SCIENTIFIC_REP

SciNotationItem	= GenItem {

	moniker		= "Scientific (e.g. 1.2  E+4)";
	identifier	= DU_SCIENTIFIC;
}
#endif

NormalNotationItem = GenItem {

	moniker		= "Regular (e.g. 12000)";
	identifier	= DU_REGULAR;
}


DecimalPlacesRange = GenValue {
	moniker		= "Decimal Places:";
#if DO_PIZZA
	value		= 0;	/* initial value */
#else
	value		= 2;	/* initial value */
#endif
	minimum		= 0;

	maximum		= 12;   /* dictated by fp lib */
	increment	= 1;
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_UPDATE_NUMBER;
	hints		= {
			ATTR_GEN_INIT_FILE_KEY {
				char	"DecimalPlacesRange",0
				}
			}
}


ModeItemGroup	= GenItemGroup {
	moniker		= "Appearance:";	
	children 	= 
#if _RPN_CAPABILITY
			  InfixMode,
			  RPNMode;
#else
			  InfixMode;
#endif /* if _RPN_CAPABILITY */
	numSelections	= 1;
	selection	= CM_INFIX;
	destination	= process;	
	applyMsg	= MSG_BC_PROCESS_CHANGE_MODE;
	hints		= {
			HINT_ORIENT_CHILDREN_VERTICALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INIT_FILE_KEY {
				char	"ModeItemGroup",0
				}
			}
}


#if _RPN_CAPABILITY

RPNMode		= GenItem {
	
	moniker		= "RPN (HP-Style)";
	identifier	= CM_RPN;
}
#endif 

InfixMode	= GenItem {

	moniker		= "Standard (Infix)";
	identifier	= CM_INFIX;
}

ExtensionsGroup	= GenItemGroup {
	moniker		= "Extensions:";
	children	= 
#if _SCIENTIFIC_REP
			ExtensionNone,
			ExtensionMath,
			ExtensionScientific;
#else
			ExtensionNone,
			ExtensionMath;
#endif
	numSelections	= 1;
	selection	= "mask EXT_MATH";
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_CHANGE_EXTENSIONS_STATE;
	hints		= {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INIT_FILE_KEY {
				char	"extensionsGroup",0
				}
			}
}

ExtensionNone	= GenItem {
	moniker		= "None";
	identifier	= 0;
}

ExtensionMath	= GenItem {
	moniker		= "Math";
	identifier	= "mask EXT_MATH";
}

#if _SCIENTIFIC_REP
ExtensionScientific	= GenItem {
	moniker		= "Scientific";
	identifier	= "mask EXT_MATH or mask EXT_SCIENTIFIC";
}
#endif


WorksheetsGroup	= GenItemGroup {
	moniker		= "Worksheets:";
	children	= 
			WorksheetsOn,
			WorksheetsOff;
	numSelections	= 1;
	selection	= TRUE;
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_CHANGE_WORKSHEETS_STATE;
	hints		= {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INIT_FILE_KEY {
				char	"worksheetsState",0
				}
	}
}

WorksheetsOn = GenItem {	
	moniker		= "On";
	identifier	= TRUE;
}

WorksheetsOff = GenItem {	
	moniker		= "Off";
	identifier	= FALSE;
}

PaperRollGroup	= GenItemGroup {
	moniker		= "Paper tape:";
	children	= 
			PaperRollOn,
			PaperRollOff;
	numSelections	= 1;
	selection	= FALSE;
	destination	= process;
	applyMsg	= MSG_BC_PROCESS_CHANGE_PAPER_ROLL_STATE;
/*#if !_NDO2000 
	genStates	= default -usable;
/*#endif     */
	hints		= {
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
			ATTR_GEN_INIT_FILE_KEY {
				char	"paperRollState",0
				}
	}
}

PaperRollOn = GenItem {	
	moniker		= "On";
	identifier	= TRUE;
}

PaperRollOff = GenItem {	
	moniker		= "Off";
	identifier	= FALSE;
}


end	MainInterface;


start	MemoryResource;

#include "Art/mkrGetCalc.ui"
#include "Art/mkrSendCalc.ui"

MemoryBox	= GenInteraction {

	genAttributes	= default +targetable;
	moniker		= 'M', "Memory";
	children	= 	MemoryLine0,
				MemoryLine1,
				MemoryLine2,
				MemoryLine3,
				MemoryLine4,
				MemoryLine5,
				MemoryLine6,
				MemoryLine7,
				MemoryClose;
	visibility	= dialog;
	type 		= command;
	hints		= {
			HINT_ORIENT_CHILDREN_VERTICALLY,
			HINT_RIGHT_JUSTIFY_CHILDREN,
			HINT_CUSTOM_CHILD_SPACING {
				SpecSizeSpec <SST_PIXELS, 1>
			},
			ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN, 
			ATTR_GEN_HELP_CONTEXT {
				char "dbCalcMemory", 0
			}
	}

}

MemoryClose = GenTrigger {
	CLOSE_TRIGGER_VALUES
	action = MSG_MEM_IF_SAVE_OPTIONS_AND_SEND_IC, MemoryNumber0;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word IC_DISMISS
			word offset MemoryBox
		},
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

MEMORY_LINE_READ_ONLY(MemoryLine0,MemoryTex0,Active Memory,MemoryNumber0,Get0,Send0)

MEMORY_LINE(MemoryLine1,MemoryTex1,Register1,MemoryNumber1,Get1,Send1)
MEMORY_LINE(MemoryLine2,MemoryTex2,Register2,MemoryNumber2,Get2,Send2)
MEMORY_LINE(MemoryLine3,MemoryTex3,Register3,MemoryNumber3,Get3,Send3)
MEMORY_LINE(MemoryLine4,MemoryTex4,Register4,MemoryNumber4,Get4,Send4)
MEMORY_LINE(MemoryLine5,MemoryTex5,Register5,MemoryNumber5,Get5,Send5)
MEMORY_LINE(MemoryLine6,MemoryTex6,Register6,MemoryNumber6,Get6,Send6)
MEMORY_LINE(MemoryLine7,MemoryTex7,Register7,MemoryNumber7,Get7,Send7)

end	MemoryResource;



