COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS	
MODULE:		ResEdit
FILE:		localizeConstant.def

AUTHOR:		Cassie Hartzog, Sep 24, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	cassie	9/24/92		Initial revision


DESCRIPTION:
	This file contains all constants and structures used globally.	
		
	$Id: localizeConstant.def,v 1.1 97/04/04 17:13:56 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;                           Constants
;-----------------------------------------------------------------------------

MAX_NAME_LEN = 36

;
; The line used to highlight the current chunk has a width of 2 pixels.
; Need to add 2 select lines to both the height and width of the chunk,
; plus 2 extra pixels so there is a 1 pixel space between the select line
; and the chunk data.
;
SELECT_LINE_WIDTH = 2	
TOTAL_BORDER_SIZE = (2 * SELECT_LINE_WIDTH) + 2
SINGLE_BORDER_SIZE = (SELECT_LINE_WIDTH + 1)

;
; Size of buffer used to hold ascii representation of a keyboard shortcut.
;
if DBCS_PCGEOS
SHORTCUT_BUFFER_SIZE = 80
else
SHORTCUT_BUFFER_SIZE = 40
endif
; 
; Default chunk height sizes for special cases.
;
NOT_EDITABLE_CHUNK_HEIGHT = 10
EMPTY_GSTRING_SIZE	= (size OpNullOp + size OpEndGString)
EMPTY_BITMAP_SIZE	= (size Bitmap)

MONIKER_GSTRING_OFFSET	= (offset VM_data + offset VMGS_gstring)
MONIKER_TEXT_OFFSET	= (offset VM_data + offset VMT_text)

;
; Constants for printing.
;
if PZ_PCGEOS
BODY_TEXT_MODE_FONT	=	FID_BITSTREAM_KANJI_SQUARE_GOTHIC
BODY_GRAPHICS_MODE_FONT	=	FID_BITSTREAM_KANJI_SQUARE_GOTHIC
BODY_PTSIZE		=	12
RESOURCE_NAME_FONT	=	FID_BITSTREAM_KANJI_SQUARE_GOTHIC
RESOURCE_NAME_PTSIZE	=	16
CHUNK_NAME_FONT		=	FID_BITSTREAM_KANJI_SQUARE_GOTHIC
CHUNK_NAME_PTSIZE	=	12
else
BODY_TEXT_MODE_FONT	=	FID_DTC_URW_MONO
BODY_GRAPHICS_MODE_FONT	=	FID_DTC_URW_ROMAN
BODY_PTSIZE		=	12
RESOURCE_NAME_FONT	=	FID_DTC_URW_ROMAN
RESOURCE_NAME_PTSIZE	=	14
CHUNK_NAME_FONT		=	FID_DTC_URW_ROMAN
CHUNK_NAME_PTSIZE	=	12
endif



; Constants for import/export.
;
BUFFER_SIZE_LARGE          = 1024	; All keywords had better be
					; smaller than 1024 bytes!
BUFFER_SIZE_SMALL	   = 64		; I'm not expecting resource
					;  or chunk names to be >64
					;  chars.
BUFFER_INCR		   = 64		; Increase buffer by 64 bytes.
IMPORT_BUFFER_MIN_LEFT     = 40		; If <40 uninspected bytes in
					; buffer, than refill it.

;
; Keyword lengths.
;
KEYWORD_STD_LENGTH	   = 13
KEYWORD_NULL_LENGTH	   = 4
KEYWORD_ESC_LENGTH	   = 3
KEYWORD_HEADER_LENGTH	   = 32
KEYWORD_BODY_LENGTH	   = 32

; If we found a [ while searching for a bracketed keyword but
; the string comparison failed, we can advance our scan position
; by KEYWORD_INCR.  Note that (1) KEYWORD_INCR must be less than
; IMPORT_BUFFER_MIN_LEFT, (2) we can't scan for the keywords
; null/esc with this increment scheme.
KEYWORD_INCR		   = KEYWORD_STD_LENGTH

; Let's put a cap on the size that the UnmappedChars text
; object can get.  If many errors occur, the atf is probably
; not a legal atf.  Also, setting this cap avoids an obscure
; crash I get presumably from calling the text object so many
; times.
MAX_UNMAPPED_CHARS_TEXT_SIZE	= 300

FILE_AND_PATH_LOCALS	equ	<\
.warn -unref_local\
pathName	local	PathName\
fileName	local	DosDotFileName\
.warn @unref_local\
>


;-----------------------------------------------------------------------------
;                           Enumerated Values
;-----------------------------------------------------------------------------

SourceType		etype	byte
    ST_ORIGINAL		enum 	SourceType
    ST_TRANSLATION	enum 	SourceType


HighlightState		etype	byte
    HS_SET		enum	HighlightState
    HS_CLEAR		enum	HighlightState


VisibilityType		etype	byte
    VT_NOT_VISIBLE	enum	VisibilityType
    VT_ALL_VISIBLE	enum	VisibilityType
    VT_PART_VISIBLE	enum	VisibilityType


ChunkStateEnum		etype	byte
    CSE_CHANGED		enum	ChunkStateEnum
    CSE_ADDED		enum	ChunkStateEnum
    CSE_DELETED		enum	ChunkStateEnum

;Keywords used by import/export.
ResEditKeywordType	etype	byte
    REKT_CHUNK		enum	ResEditKeywordType
    REKT_RSRC_BEGIN	enum	ResEditKeywordType
    REKT_RSRC_END	enum	ResEditKeywordType
    REKT_ORIG_TEXT	enum	ResEditKeywordType
    REKT_TRANS_TEXT	enum	ResEditKeywordType
    REKT_LOCALIZE	enum	ResEditKeywordType
    REKT_MNEMONIC	enum	ResEditKeywordType
    REKT_NULL_MNEMONIC	enum	ResEditKeywordType
    REKT_ESC_MNEMONIC	enum	ResEditKeywordType
    REKT_SHORTCUT	enum	ResEditKeywordType
    REKT_BODY		enum	ResEditKeywordType
    REKT_HEADER		enum	ResEditKeywordType
    REKT_SOURCE		enum	ResEditKeywordType
    REKT_PATH		enum	ResEditKeywordType
    REKT_VERSION	enum	ResEditKeywordType
    REKT_DOS_NAME	enum	ResEditKeywordType

; Passed to some routines to specify which buffer we'll be working
; with.
BufferType		etype	byte
    BT_IMPORT		enum	BufferType
    BT_UNFORMAT		enum	BufferType
    BT_RESOURCE		enum	BufferType
    BT_CHUNK		enum	BufferType

;
; The ErrorValue count is incremented by two so that adding the 
; enumerated value to the ErrorArray offset will give the offset 
; to the correct entry which holds the chunk handle of the text string.
;
ErrorValue		etype	word, 0, 2
EV_NO_ERROR			enum	ErrorValue
EV_MEMALLOC			enum	ErrorValue
EV_FILE_READ			enum	ErrorValue	
EV_FILE_READ_HEADERS		enum	ErrorValue	
EV_FILE_WRITE			enum	ErrorValue	
EV_FILE_WRITE_RESOURCE		enum	ErrorValue	
EV_FILE_WRITE_RELOC_TABLE	enum	ErrorValue	
EV_FILE_OPEN			enum	ErrorValue	
EV_FILE_CREATE			enum	ErrorValue	
EV_PATH_GET			enum	ErrorValue	
EV_UPDATE_CHUNK_RESIZE		enum	ErrorValue	
EV_CHUNK_MISMATCH		enum	ErrorValue	
EV_NUM_RESOURCES		enum	ErrorValue	
EV_GET_EXT_ATTRS		enum	ErrorValue
EV_MISSING_STRING_ARG		enum	ErrorValue	
EV_LOAD_RESOURCE		enum	ErrorValue	
EV_NAME_EXISTS			enum	ErrorValue
EV_NAME_ADD			enum	ErrorValue
EV_PASTE_GRAPHICS_WRONG_FORMAT	enum	ErrorValue
EV_PASTE_TEXT_WRONG_FORMAT	enum	ErrorValue
EV_ALLOC_DATABASE		enum	ErrorValue
EV_EXPECTED_LOCALIZATION_FILE	enum	ErrorValue
EV_UPDATE_UNSUCCESSFUL		enum	ErrorValue
EV_NOT_LOCALIZATION_FILE	enum	ErrorValue
EV_LOCALIZATION_PROTOCOL	enum	ErrorValue
EV_NOT_EXECUTABLE		enum	ErrorValue
EV_GEODE_PROTOCOL		enum	ErrorValue
EV_NO_RESOURCES			enum	ErrorValue
EV_NUM_RESOURCES_UPDATE		enum	ErrorValue
EV_SET_USER_NOTES		enum	ErrorValue
EV_SET_LONGNAME			enum	ErrorValue
EV_TEXT_TOO_SHORT		enum	ErrorValue
EV_TEXT_TOO_LONG		enum	ErrorValue
EV_GET_DOS_NAME			enum	ErrorValue
EV_RELOCATION_NOT_FOUND		enum	ErrorValue
EV_NAMES_DIFFER			enum	ErrorValue
EV_NOT_A_FILE			enum	ErrorValue
EV_COPY_SOURCE			enum	ErrorValue
EV_INVALID_PATH			enum	ErrorValue
EV_READ_FROM_INIT_FILE		enum	ErrorValue
EV_WRONG_PATH			enum	ErrorValue
EV_RESOURCE_NOT_FOUND		enum	ErrorValue
EV_PRINT_NO_BODY		enum 	ErrorValue
EV_GSTRING_WRONG_SIZE		enum 	ErrorValue
EV_COULD_NOT_SET_PATH		enum 	ErrorValue

EV_COULD_NOT_CLOSE_FILE		enum 	ErrorValue
EV_PATH_NOT_FOUND		enum 	ErrorValue
EV_COULD_NOT_CREATE_FILE	enum 	ErrorValue
EV_COULD_NOT_FIND_A_CHUNK	enum 	ErrorValue
EV_BLOCK_DISCARDED		enum 	ErrorValue
EV_ERROR_WRITING_TO_FILE	enum 	ErrorValue
EV_ERROR_DELETING_FILE		enum	ErrorValue
EV_ERROR_OPENING_FILE		enum	ErrorValue
EV_ERROR_READING_FILE		enum	ErrorValue
EV_ERROR_PARSING_HEADER		enum	ErrorValue
EV_ERROR_ALLOCATING_MEMORY	enum	ErrorValue
EV_ERROR_READING_VERSION	enum	ErrorValue
EV_ERROR_NO_FILES_TO_BATCH	enum	ErrorValue
EV_PATH_NOT_VALID_FOR_GEODES	enum	ErrorValue	


; Indicate options for CreateExecutable.

CreateExecutableNameEnum	etype	byte
    CEN_ORIGINAL_NAME		enum	CreateExecutableNameEnum
    CEN_TRANSLATED_NAME		enum	CreateExecutableNameEnum

CreateExecutableDestinationEnum	etype	byte
    CED_DESTINATION_DIR		enum	CreateExecutableDestinationEnum
    CED_SP_WASTE_BASKET		enum	CreateExecutableDestinationEnum

CreateExecutableTypeEnum	etype	byte
    CET_TRANSLATED_GEODE	enum	CreateExecutableTypeEnum
    CET_NULL_GEODE		enum	CreateExecutableTypeEnum

CreateExecutableUpdateEnum	etype	byte
    CEU_UPDATE_IF_NECESSARY	enum	CreateExecutableUpdateEnum
    CEU_DO_NOT_ATTEMPT_UPDATE	enum	CreateExecutableUpdateEnum

;-----------------------------------------------------------------------------
;                           Records
;-----------------------------------------------------------------------------

ParseFlags		record
    PF_FIRST_PASS:1,		; first parse pass
    PF_SECOND_PASS:1,		; second parse pass
    PF_UI_LIBRARY:1		; geode being parsed is UI library
ParseFlags		end

ChunkType		record
    CT_TEXT:1,			; the chunk contains text
    CT_GSTRING:1,		; the chunk contains a gstring
    CT_BITMAP:1,		; the chunk contains a bitmap
    CT_OBJECT:1,		; the chunk is an object
    CT_MONIKER:1,		; the chunk contains a VisMoniker
    CT_MONIKER_LIST:1,		; the chunk contains a VisMonikerList
    CT_NOT_EDITABLE:1,		; the chunk is not editable (parsable?)
    :1
ChunkType		end
;
; Some composite types....
;
CT_REAL_TYPES 	= (mask CT_TEXT or mask CT_GSTRING or mask CT_BITMAP \
		   or mask CT_MONIKER)
CT_INSTRUCTION 	= mask CT_NOT_EDITABLE or mask CT_TEXT
CT_TEXT_MONIKER = mask CT_TEXT or mask CT_MONIKER
CT_GRAPHICS 	= mask CT_GSTRING or mask CT_BITMAP

;
; Used in parsing and updating
;
ResourceType		record
    RT_NOT_EDITABLE:1,		; the resource has nothing editable in it
    RT_VISIBLE:1,		; the resource is visible
    RT_CHANGED:1,		; the resource changed since the translation
				;   file was created
    RT_NEW_RESOURCE:1,		; the resource was added in the update
    :4
ResourceType		end

;
; Flags used during translation file updating
;
ChunkState		record
    CS_CHANGED:1,		; the chunk has been updated
    CS_UNCHANGED:1,		; the chunk is unchanged from translation file
    CS_ADDED:1,			; this is a new chunk, not present in old DB
    CS_DELETED:1,		; a chunk in the old DB has no match in update
    :4
ChunkState		end

;
; Printing flags
;
PrintFlags	record
    PF_SKIP_DRAW:1,		; don't draw, just calculate sizes
    PF_CHUNK_NAMES:1,		; print chunk names
    PF_RESOURCE_NAMES:1,	; print resource names
    PF_PAGE_NUMBER:1,		; print page numbers
    PF_INSTRUCTIONS:1,		; print instructions
    PF_TRANSLATION:1,		; print translated items instead of original
    PF_CHUNK_TYPE:1,		; print chunk type information
    PF_GRAPHICS:1,		; print graphics chunks in addition to text
    :8
PrintFlags	end

;
; Batch flags
;
BatchFlags	record
    BF_SAVE_TRANSLATION_FILES:1, ; Save translation files (precludes
				 ; reverting).
    BF_FORCE_UPDATE:1, 		 ; Force update of all translation files.
    :14
BatchFlags	end

;
; Import/Export flags
;

; Used for import/export.
ResEditExportStringFlags	record    
    REESF_NEWLINE:1,		; export CR/LF after string
    REESF_FORMAT:1,		; surround text with {}, and double {}
				; appearing within the string
    :6
ResEditExportStringFlags	end


; Flags used to determine how the import buffer is parsed.
ImportBufferFlags		record
    IBF_CHECK_IN_RSC:1		
    IBF_NO_INTERMEDIATES:1	
    IBF_NOT_IN_TEXT:1
    IBF_SEEN_LEFT_BRACE:1
    IBF_RB_RUN_PARITY:1
    IBF_LB_RUN_PARITY:1
    :2
ImportBufferFlags		end

; Flags indicating how the parse has proceeded.
ImportParseFlags		record
    IPF_importing:1		; Are we importing?
    IPF_itemsMissing:1		; Any chunks/resources not found in db?
    IPF_checkingHeader:1	; Are we parsing header right now?
    :5
ImportParseFlags		end

;-----------------------------------------------------------------------------
;                     Structures
;-----------------------------------------------------------------------------
FilePosition    	struct
    FP_low  		word    (0) 
    FP_high 		word    (0) 
FilePosition    ends

SetStyleParams		struct
    SSP_set		TextStyle
    SSP_clear		TextStyle
    SSP_start		word
    SSP_end		word
SetStyleParams		ends

SetDataParams		struct
    SDP_top		word			;top coordinate of text obj
    SDP_left		word			;left coordinate of text obj
    SDP_width		word			;width of the text object
    SDP_height		word			;height of text object 
    SDP_border		word			;width of highlight border
    SDP_file		hptr.FileHandle		;doc's file handle
    SDP_group	        word			;resource group #
    SDP_item 		word			;chunk item #
    SDP_chunkType	ChunkType
    SDP_state		byte			;clean or dirty
    SDP_mnemonicCount	byte			;# of possible mnemonic chars
    SDP_mnemonicType	byte			;VMT_mnemonicOffset value
    SDP_mnemonicPos	byte			;list position of mnemonic
SBCS< SDP_mnemonicChar	byte			;byte for mnemonic not in text	>
DBCS< SDP_mnemonicChar	word			;word for mnemonic not in text	>
    SDP_sourceType	SourceType
    SDP_maxLength	word			;max length of a text chunk
    even
SetDataParams		ends

VisDrawParams		struct
    VDP_document	optr
    VDP_gstate		hptr.GState
    VDP_sourceType	SourceType
    VDP_drawFlags	DrawFlags
    VDP_curChunk	word		
    VDP_chunkNum	word		; relative element # of chunk
    VDP_data		SetDataParams
align	word
VisDrawParams		ends			

SendMessageFrame	struct
    SMF_message		word		; message to be sent
    SMF_destination	optr		; object to send it to
    SMF_flags		word		; MF flags to pass in di
    SMF_cx		word		; value to pass in cx
    SMF_dx		word		; value to pass in dx
    SMF_stack		label word	; data to put on stack
SendMessageFrame	ends

; Used for import/export.
ResEditKeywordArrayStruct	struct
    REKAS_keyword	nptr		; ptr to chunk with string
    REKAS_length	byte		; num bytes in string
ResEditKeywordArrayStruct	ends

; Used for import.  ImportBuffer in ImportResource holds bytes from the
; ATF (import file).  LocalDosToGeos is applied to this chunk. 
ImportBufferStruct	struct
   IBS_buffStatus	ImportBufferFlags
   IBS_parseStatus	ImportParseFlags

   IBS_keyword		ResEditKeywordType
   IBS_dbFile		hptr.FileHandle	; document's db file
   IBS_atfFile		hptr.FileHandle ; ASCII translation file

   IBS_bytesUnchkd	word		; # bytes read on last file
					;  read = # bytes not yet chkd
					;  in impBuffer
   IBS_impPos		word		; First uninspected byte in
					;  impBuffer.
   IBS_impBuffer	lptr		; Chunk in ImportResource used
					;  to hold stuff being parsed.

   IBS_unfPos		word		; First unused byte in buffer
   IBS_unfBuffer	lptr		; Chunk in ImportResource used
					;  to hold unformatted text
					;  regions as they're created.

   IBS_resource		lptr		; Name of resource we're
					;  parsing
   IBS_resourcePos	word		; First unused byte in buffer.
   IBS_chunk		lptr		; Name of chunk we're parsing.
   IBS_chunkPos		word		; First unused byte in buffer.

   IBS_rscGroup		word		; group # of rsc being parsed
   IBS_rscItem		word		; item # of rsc's chunk array

   IBS_mnemonicType	byte
   IBS_mnemonicChar	byte
;;;IBS_shortcut		word
   align	word
ImportBufferStruct	ends

;-----------------------------------------------------------------------------
;                    Database Structures
;-----------------------------------------------------------------------------

;  PosArray - used to keep track of the position in the display of each 
;  chunk in the current resource.

PosElement        	struct
    PE_top  		word          	;top of text region in document
    PE_height  		word          	;height of text, at width of
					; REDI_viewWidth - 2*SELECT_LINE_WIDTH
PosElement      	ends

PA_NULL_ELEMENT		equ	-1

