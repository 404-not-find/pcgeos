/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari Builder
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include "safbuild.goh"
@include "global.goh"

@classdecl  SBIndicatorClass;



/***********************************************************************
 *	GetDisplayType
 ***********************************************************************
 * SYNOPSIS:	    Get the display class (16 or 256 color)
 * PASS:            none
 * RETURN:          DisplayClass (DC_COLOR_4 or DC_COLOR_8)
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/6/99		Initial Revision
 *
 ***********************************************************************/
DisplayClass
GetDisplayType()
{
    DisplayType dt;
    optr appObj = GeodeGetAppObject(0);
    LMemDeref(appObj);
    dt = (UserGetDisplayType() >> DTAF_DISPLAY_TYPE_OFFSET) & DT_DISP_CLASS;
    if (dt != DC_COLOR_4) {
	dt = DC_COLOR_8;
    }
    return(dt);
}


/***********************************************************************
 *		MSG_META_START_SELECT
 ***********************************************************************
 * SYNOPSIS:	    Handle a click on an Indicator
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBIndicatorClass, MSG_META_START_SELECT
{
    @call oself::MSG_VIS_GRAB_MOUSE();
    retVal->flags = MRF_PROCESSED;
}



/***********************************************************************
 *		MSG_META_PTR
 ***********************************************************************
 * SYNOPSIS:	    Handle a release on an Indicator
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBIndicatorClass, MSG_META_PTR
{
    Rectangle bounds;

    @call oself::MSG_VIS_GET_BOUNDS(&bounds);

    if (xPosition >= bounds.R_left + INDICATOR_LED_LEFT_MARGIN &&
	xPosition <= bounds.R_left + INDICATOR_LED_LEFT_MARGIN + INDICATOR_LED_WIDTH &&
	yPosition >= bounds.R_top + INDICATOR_LED_TOP_MARGIN &&
	yPosition <= bounds.R_top + INDICATOR_LED_TOP_MARGIN + INDICATOR_LED_HEIGHT) {
	retVal->flags = MRF_PROCESSED | MRF_SET_POINTER_IMAGE;
	retVal->ptrImage = @selectPtr;
    } else {
	retVal->flags = MRF_PROCESSED | MRF_CLEAR_POINTER_IMAGE;
    }
}



/***********************************************************************
 *		MSG_META_END_SELECT
 ***********************************************************************
 * SYNOPSIS:	    Handle a release on an Indicator
 * PASS:            xPosition - x pos
 *                  yPosition - y pos
 *                  inputState 
 *                  retVal - ptr to MouseReturnParams
 * RETURN:          retVal.flags - MRF_PROCESSED
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/7/99		Initial Revision
 *
 ***********************************************************************/
@method SBIndicatorClass, MSG_META_END_SELECT
{
    @call oself::MSG_VIS_RELEASE_MOUSE();
    /*
     * update the indicator UI
     */
    @call QuestionDB::MSG_QUESTION_DIALOG_SET_INDICATOR(pself->SBII_number);

    retVal->flags = MRF_PROCESSED;
}



/**************************************************************
 *          
 * FUNCTION:        ReportError()
 * DESCRIPTION:     report an error
 *
 * PASS:            errorMsg - chunk of error message in STRINGS
 *                  optStr - argument #1 string (NULL if none)
 * RETURN:          none
 * DESCRIPTION:
 *         
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      12/4/98     Initial Revision
***************************************************************/

void
ReportError(optr errorMsg, TCHAR *optStr)
{
    MemLock(OptrToHandle(errorMsg));
    @call SafBuildApp::MSG_GEN_APPLICATION_DO_STANDARD_DIALOG(
	0,       /* dialogMethod */
	0,       /* dialogOD */
	NULL,    /* helpContext */
	NULL,    /* customTriggers */
	NULL,    /* arg2 */
	optStr,  /* arg1 */
	LMemDeref(errorMsg), /* string */
	(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
	/* interaction type */
	(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)
	);
    MemUnlock(OptrToHandle(errorMsg));
}
