/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  analogClock.ui
 * FILE:	  analogClock.ui
 *
 * AUTHOR:  	  Adam de Boor: Feb  9, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	2/ 9/92	  ardeb	    Initial version
 *
 * DESCRIPTION:
 *	Definition of a basic analog clock and its options.
 *
 *
 * 	$Id: analogClock.ui,v 1.1 97/04/04 14:50:56 newdeal Exp $
 *
 ***********************************************************************/

class VisAnalogClock = VisClock {
	pattern = nptrComp : null;	/* background pattern */
	hourHand = nptrComp : null;	/* bounded gstring for hour hand */
	minuteHand = nptrComp : null;	/* bounded gstring for minute hand */
	secondHand = nptrComp : null;	/* bounded gstring for second hand */
	colors = typeComp "ColorQuad" : "C_BLACK, CF_INDEX>, <C_WHITE, CF_INDEX>, <C_WHITE, CF_INDEX>, <C_WHITE, CF_INDEX>, <C_WHITE, CF_INDEX>, <C_WHITE, CF_INDEX";

	default selectedPart = "VACC_BACKGROUND";
	default numParts = "VisAnalogClockColor";
	default colorsPtr = "offset VACI_colors";

	static /* xScale */ typeComp "WWFixed" : "";
	static /* yScale */ typeComp "WWFixed" : "";
	static /* aspectRatio */ typeComp "WWFixed" : "1,0";

	static /* lastHourAngle */ wordComp : "-1";
	static /* lastMinuteAngle */ wordComp : "-1";
	static /* lastSecondAngle */ wordComp : "-1";

	diameter = wordComp : "72 * 1 / 2";	/* Diameter (default 1/2") */
}

start AnalogUIResource;

#define AC_SET_COLOR(index)	GSEscape GR_CLOCK_COLOR_ESCAPE, 1 | \
	byte index 

#define	AC_WIDTH	37
#define AC_HEIGHT	37
#define AC_HH_WIDTH	((AC_WIDTH/2)/4)
#define AC_HH_HEIGHT	((AC_WIDTH/2)/2)

#define AC_MH_WIDTH	((AC_WIDTH/2)/4)
#define AC_MH_HEIGHT	((AC_WIDTH/2)-2)

#define AC_SH_WIDTH	1
#define AC_SH_HEIGHT	((AC_WIDTH/2)-2)

AnalogClock	= VisAnalogClock {
	pattern = AnalogPattern;
	hourHand = AnalogHourHand;
	minuteHand = AnalogMinuteHand;
	secondHand = AnalogSecondHand;

	optionTree = AnalogOptions;

	firstPartString = AnalogBackgroundString;

#ifdef DO_DBCS
	category = AnalogCat;
#else
	category = "analog clock";
#endif
}

#ifdef DO_DBCS
chunk AnalogCat = data {
	char	'analog clock',0
}
#endif

chunk AnalogPattern = data {
	Rectangle <0, 0, AC_WIDTH-1, AC_HEIGHT-1>
	GSBeginString
	AC_SET_COLOR(VACC_BACKGROUND)
	GSFillEllipse 0, 0, <AC_WIDTH-1>, <AC_HEIGHT-1>
	AC_SET_COLOR(VACC_TICK_MARKS)
	; this should be AC_WIDTH/2 and AC_HEIGHT/2, but the WWFix macro does
	; not handle that at all well.
	GSApplyTranslation <18>, <18>
	; 12
	GSDrawLine 0,<-(AC_HEIGHT/2-2)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 1
	AC_SET_COLOR(VACC_SECONDARY_TICKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 2
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 3
	AC_SET_COLOR(VACC_TICK_MARKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-2)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 4
	AC_SET_COLOR(VACC_SECONDARY_TICKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 5
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 6
	AC_SET_COLOR(VACC_TICK_MARKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-2)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 7
	AC_SET_COLOR(VACC_SECONDARY_TICKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 8
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 9
	AC_SET_COLOR(VACC_TICK_MARKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-2)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 10
	AC_SET_COLOR(VACC_SECONDARY_TICKS)
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	; 11
	GSDrawLine 0,<-(AC_HEIGHT/2-1)>, 0,<-(AC_HEIGHT/2)>
	GSApplyRotation 30.0
	GSEndString
}

chunk AnalogHourHand = data {
	Rectangle <-AC_HH_WIDTH/2,-AC_HH_HEIGHT,AC_HH_WIDTH/2,0>
	GSBeginString
	AC_SET_COLOR(VACC_HOUR_HAND)
	GSFillPolygon	4, RFR_ODD_EVEN
	Point	<0, 0>, <AC_HH_WIDTH/2,0>, <0,-AC_HH_HEIGHT>, <-AC_HH_WIDTH/2,0>
	GSEndString
}

chunk AnalogMinuteHand = data {
	Rectangle <-AC_MH_WIDTH/2,-AC_MH_HEIGHT,AC_MH_WIDTH/2,0>
	GSBeginString
	AC_SET_COLOR(VACC_MINUTE_HAND)
	GSFillPolygon	4, RFR_ODD_EVEN
	Point	<0, 0>, <AC_MH_WIDTH/2,0>, <0,-AC_MH_HEIGHT>, <-AC_MH_WIDTH/2,0>
	GSEndString
}

chunk AnalogSecondHand = data {
	Rectangle <0,-AC_HH_HEIGHT,0,0>
	GSBeginString
	AC_SET_COLOR(VACC_SECOND_HAND)
	GSDrawLine 0, 0, 0, <-AC_SH_HEIGHT>
	GSEndString
}

AnalogOptions = GenInteraction {
	children = AnalogSizeRange;
	genStates = default -usable;
	hints = {
		ATTR_GEN_INIT_FILE_CATEGORY {
			char	"analog clock", 0
		},
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

chunk	AnalogBackgroundString = "Background";
chunk	AnalogHourHandString = "Hour Hand";
chunk	AnalogMinuteHandString = "Minute Hand";
chunk	AnalogSecondHandString = "Second Hand";
chunk	AnalogTickMarksString = "3, 6, 9 and 12 Ticks";
chunk 	AnalogSecondaryTicksString = "Other Tick Marks";

AnalogSizeRange = GenValue {
	moniker = "Size:";
	applyMsg = MSG_VAC_SET_CLOCK_DIAMETER;
	destination = AnalogClock;
	displayFormat = inchesOrCentimeters;
	increment = "72 / 2";		/* 1/2 inch */
	value = "72 / 2";		/* 1/2 inch */
	minimum = "72 / 4";		/* 1/4 inch */
	maximum = "72 * 6";		/* 6 inches */
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "diameter", 0
		}
	}
}
	

end	AnalogUIResource;
