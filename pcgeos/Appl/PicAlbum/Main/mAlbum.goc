@include "PicAlbum.goh"
#include <Ansi/string.h>
#include <Ansi/stdio.h>

typedef struct {

	PAAlbumAttrs	paAMH_attrs;
	TCHAR			paAMH_indexName[13];

} paAlbumMetaHeader;

typedef struct {

	paAlbumMetaHeader	paAME_header;
	PathName			paAME_path;

} paAlbumMetaEntry;


word paIndexEntrySize(PAAlbumData *data)
{
	word retValue = sizeof(PAAlbumIndexEntry);

	if(!(data->PAAD_attrs.PAAA_flags & PAAF_STORE_NOTES)) {

		retValue -= sizeof(TCHAR) * (PA_PICTURES_NOTES_TEXT_LEN + 1); 
	}

	retValue -= sizeof(byte) * (84*84+6);

	retValue += (6 + data->PAAD_attrs.PAAA_width * data->PAAD_attrs.PAAA_height); 

	return retValue;
}

Boolean strEnds(char *string, char *end) {

	word stringLen = strlen(string);
	word endLen = strlen(end);

	if(stringLen > endLen) {
	
		if(LocalCmpStringsNoCase(&string[stringLen-endLen], end, 0) == 0) {
		
			return TRUE;
		}
	} 

	return FALSE;
}

word paAlbumDeleteItemLow(PAAlbumData *data, word item, Boolean realDelete) {

	word loopCount;

	if(!data->PAAD_tempList) {

		word *p_list;

		data->PAAD_tempList = MemAlloc(sizeof(word) * data->PAAD_itemCount, HF_SWAPABLE, HAF_LOCK);
		p_list = MemDeref(data->PAAD_tempList);

		/* create delete index if not there already */
		loopCount = 0;
		while(loopCount < data->PAAD_itemCount) {
		
			p_list[loopCount] = loopCount;

			loopCount++;
		}
		MemUnlock(data->PAAD_tempList);
	}

	if(data->PAAD_tempList) {

		if(realDelete) {

			FilePushDir();
			if(FileSetCurrentPath(data->PAAD_disk, data->PAAD_path)) {

				FileLongName fileName;
				PAAlbumIndexEntry *itemData;
				int err;

				itemData = MemLock(data->PAAD_bufferBlock);
				PAAlbumGetItem(data, item, itemData);
				strcpy(fileName, itemData->PAAIE_fileName);
				MemUnlock(data->PAAD_bufferBlock);

				err = FileDelete(fileName);

				if(err && (err != ERROR_FILE_NOT_FOUND)) {
				
					FilePopDir();
					return TRUE;
				}

			}
			FilePopDir();
		}

		if(item < data->PAAD_tempItemCount) {

			word *p_list;
			word loopCount2;
			MemHandle oldMH;

			p_list = MemLock(data->PAAD_tempList);

			loopCount2 = item + 1;

			while(loopCount2 < data->PAAD_tempItemCount) {
			
				p_list[loopCount2 - 1] = p_list[loopCount2];

				loopCount2++;
			}

			MemUnlock(data->PAAD_tempList);

			oldMH = data->PAAD_tempList;
			data->PAAD_tempList = MemReAlloc(data->PAAD_tempList, sizeof(word) * data->PAAD_tempItemCount - 1, 0);
		
			if(!data->PAAD_tempList) {
			
				data->PAAD_tempList = oldMH;
			}

			data->PAAD_tempItemCount--;
		}

		return FALSE;
	}

	return TRUE;
}

word paAlbumUpdate(PAAlbumData *data) {

    FileEnumParams params;
	MemHandle listMem = 0;
	word itemsRead, itemsLeft;

	/* file enum the album */
	params.FEP_searchFlags = FESF_NON_GEOS | FESF_GEOS_EXECS | FESF_GEOS_NON_EXECS;
	params.FEP_returnAttrs = (FileExtAttrDesc *) FESRT_DOS_INFO;
	params.FEP_returnSize = sizeof(FEDosInfo);
	params.FEP_matchAttrs = 0;
	params.FEP_bufSize = FE_BUFSIZE_UNLIMITED;
	params.FEP_skipCount = 0;
	params.FEP_callback = (void *) 0;
	params.FEP_callbackAttrs = 0;
	params.FEP_cbData1 = (dword) 0;
	params.FEP_cbData2 = (dword) 0;
	params.FEP_headerSize = 0;

	/* get the file list */
	itemsRead = FileEnum(&params, &listMem, &itemsLeft);

    if(itemsRead && listMem) {

		word fileLoop, indexLoop;
		word indexSize;
		FEDosInfo *p_dosInfo;
		PAAlbumIndexEntry *indexItem;

		/* shrunk the list by not supported file types */
		{
			word outLoop;

			p_dosInfo = MemLock(listMem);
			fileLoop = 0;
			outLoop = 0;
			while(fileLoop < itemsRead) {
			
				if(	strEnds(p_dosInfo[fileLoop].DFIS_name, ".gif") ||
					strEnds(p_dosInfo[fileLoop].DFIS_name, ".jpg") ||
					strEnds(p_dosInfo[fileLoop].DFIS_name, ".jpe") ||
					strEnds(p_dosInfo[fileLoop].DFIS_name, ".jpeg") ) {
				
					p_dosInfo[outLoop] = p_dosInfo[fileLoop];
					outLoop++;
				}

				fileLoop++;
			}			
			MemUnlock(listMem);
			itemsRead = outLoop;
		}

		indexItem = MemLock(data->PAAD_bufferBlock);

		indexSize = data->PAAD_tempItemCount;

		/* search each file in the index */
		indexLoop = indexSize;
		while(indexLoop) {

			indexLoop--;

			/* get the entry */
			FilePos(data->PAAD_indexFile,
				((dword) paIndexEntrySize(data)) * indexLoop, FILE_POS_START);
			FileRead(data->PAAD_indexFile, indexItem, paIndexEntrySize(data), 0);

			/* find in the file list */
			p_dosInfo = MemLock(listMem);
			fileLoop = 0;
			while(fileLoop < itemsRead) {

				/* same name, datetime and size? */
				if(	(LocalCmpStringsNoCase(p_dosInfo[fileLoop].DFIS_name, indexItem->PAAIE_fileName, 0) == 0) &&
					(p_dosInfo[fileLoop].DFIS_fileSize == indexItem->PAAIE_size) &&
					(p_dosInfo[fileLoop].DFIS_modTimeDate == indexItem->PAAIE_date)) {
				
					p_dosInfo[fileLoop].DFIS_name[0] = 0;
					break;
				}
				fileLoop++;
			}
			MemUnlock(listMem);
			if(fileLoop == itemsRead) {
			
				paAlbumDeleteItemLow(data, indexLoop, FALSE);
			}			
		}

		p_dosInfo = MemLock(listMem);
		fileLoop = 0;
		while(fileLoop < itemsRead) {

			if(p_dosInfo[fileLoop].DFIS_name[0]) {

				if(strcmp(p_dosInfo[fileLoop].DFIS_name, "Album Index") && 
						(p_dosInfo[fileLoop].DFIS_name[0] != '@') ) {
			
					memset(indexItem, 32, paIndexEntrySize(data));

					/* put together the index item */
					strcpy(indexItem->PAAIE_fileName, p_dosInfo[fileLoop].DFIS_name);
					indexItem->PAAIE_size = p_dosInfo[fileLoop].DFIS_fileSize;
					indexItem->PAAIE_date = p_dosInfo[fileLoop].DFIS_modTimeDate;
					indexItem->PAAIE_flags = 0;
					indexItem->PAAIE_notes[0] = 0;

					/* if not found add it to the end of the index */
					FilePos(data->PAAD_indexFile, 
						((dword)paIndexEntrySize(data)) * data->PAAD_itemCount, FILE_POS_START);
					FileWrite(data->PAAD_indexFile, indexItem, paIndexEntrySize(data), 0);
					FileCommit(data->PAAD_indexFile, 0);
					
					data->PAAD_tempItemCount++;
					data->PAAD_itemCount++;

					/* XXX add it to temp list if there is any */
					if(data->PAAD_tempList) {
					
						MemHandle newList;

						newList = MemReAlloc(data->PAAD_tempList, data->PAAD_tempItemCount * sizeof(word), 0);

						if(newList) {
						
							word *p_list;

							data->PAAD_tempList = newList;

							p_list = MemLock(data->PAAD_tempList);
							/* create delete index if not there already */
							p_list[data->PAAD_tempItemCount - 1] = data->PAAD_itemCount - 1;
							MemUnlock(data->PAAD_tempList);
						}
					}
				}
			}

			fileLoop++;
		}

		MemUnlock(data->PAAD_bufferBlock);
	
	} else {

		word indexSize, indexLoop;
	
		indexSize = data->PAAD_tempItemCount;

		/* delete all items from the index */
		indexLoop = indexSize;
		while(indexLoop) {

			indexLoop--;
			PAAlbumDeleteItem(data, indexLoop);
		}
	}

	if(listMem) {
	
		MemFree(listMem);
	}

	return FALSE;
}

FileHandle paAlbumGetIndex(PAAlbumData *data, DiskHandle disk, TCHAR *path, PAAlbumAttrs *attrs) {

	FileHandle indexFile = 0;
	PathName thisPath;
	TCHAR *thisPathPtr = thisPath;

	FilePushDir();
	FileSetStandardPath(SP_PRIVATE_DATA);
	FileCreateDir("PA Index");
	if(FileSetCurrentPath(SP_PRIVATE_DATA, "PA Index")) {

		VMFileHandle vmf;

		/* open/create meta index */
		vmf = VMOpen("Meta Index", VMAF_FORCE_READ_WRITE, VMO_CREATE, 0);
		
		if(vmf) {

			VMBlockHandle array;

			array = VMGetMapBlock(vmf);
			if(!array) {
			
				array = HugeArrayCreate(vmf, 0, 0);
				if(array) {

					VMSetMapBlock(vmf, array);
				}
			}

			if(array) {

				word itemCount, loopCount;
			
				FilePushDir();
				if(FileSetCurrentPath(disk, path)) {
					
					FileAttrs fileAttrs;

					thisPath[0] = 0;
					if(FileResolveStandardPath(&thisPathPtr, sizeof(thisPath), ".", FRSPF_ADD_DRIVE_NAME, &fileAttrs)) {

						TCHAR fname[13];

						FilePopDir();
						
						thisPathPtr[0] = 0;

						/* search entry */
						loopCount = 0;
						itemCount = HugeArrayGetCount(vmf, array);
						while(loopCount < itemCount) {

							word elemSize;
							paAlbumMetaEntry *elemPtr;

							HugeArrayLock(vmf, array, loopCount, &elemPtr, &elemSize);				
							if(	(elemPtr->paAME_header.paAMH_attrs.PAAA_width == attrs->PAAA_width) &&
								(elemPtr->paAME_header.paAMH_attrs.PAAA_height == attrs->PAAA_height) &&
								(elemPtr->paAME_header.paAMH_attrs.PAAA_flags == attrs->PAAA_flags) &&
								(LocalCmpStringsNoCase(thisPath, elemPtr->paAME_path, 0) == 0)) {

								strcpy(fname, elemPtr->paAME_header.paAMH_indexName);
							
								HugeArrayUnlock(elemPtr);				
								break;
							}
							HugeArrayUnlock(elemPtr);				

							loopCount++;
						}
						if(itemCount == loopCount) {
			
							word err;
							dword nameNum;
							TimerDateAndTime thisDate;
							paAlbumMetaEntry metaIndexEntry;
	
							TimerGetDateAndTime(&thisDate);

							nameNum = thisDate.TDAT_month;
							nameNum *= 31;
							nameNum += thisDate.TDAT_day;
							nameNum *= 24;
							nameNum += thisDate.TDAT_hours;
							nameNum *= 60;
							nameNum += thisDate.TDAT_minutes;
							nameNum *= 60;
							nameNum += thisDate.TDAT_seconds;

							/* create new index file */
							do {
															
								sprintf(fname, "%lu8", nameNum);
								strcpy(fname + 8, ".IDX");

								indexFile = FileCreate(fname, FILE_CREATE_ONLY | FILE_ACCESS_RW | FILE_DENY_RW | FCF_NATIVE, 0);

								nameNum++;

							} while(!indexFile);

							/* add to index */
							if(indexFile) {

								strcpy(metaIndexEntry.paAME_header.paAMH_indexName, fname);
								metaIndexEntry.paAME_header.paAMH_attrs = (*attrs);
								strcpy(metaIndexEntry.paAME_path, thisPath);

								HugeArrayAppend(vmf, array, 
									sizeof(metaIndexEntry.paAME_header) + strlen(metaIndexEntry.paAME_path) + 1,
								&metaIndexEntry);
							}

						} else {
						
							/* open found index file */
							indexFile = FileCreate(fname, FILE_CREATE_NO_TRUNCATE |FILE_ACCESS_RW | FILE_DENY_RW | FCF_NATIVE, 0);
						}
						FilePushDir();
					}
				}
				FilePopDir();
			}

			VMClose(vmf, FALSE);
		}
	}

	FilePopDir();

	return indexFile;
}

Boolean PAAlbumRename(TCHAR *oldName, TCHAR *newName)
{
    Boolean result = FALSE;
    VMFileHandle vmf;
    VMBlockHandle array;
    word itemCount, loopCount = 0;
    word elemSize;
    paAlbumMetaEntry *elemPtr;
    PathName oldPath, newPath;
    TCHAR *oldPathPtr = oldPath, *newPathPtr = newPath;

    /* build full paths */
    FileConstructFullPath(&oldPathPtr, sizeof(oldPath), 0, oldName, TRUE);
    FileConstructFullPath(&newPathPtr, sizeof(newPath), 0, newName, TRUE);

    FilePushDir();
    FileSetStandardPath(SP_PRIVATE_DATA);
    if(FileSetCurrentPath(SP_PRIVATE_DATA, "PA Index")) {
	/* open meta index */
	vmf = VMOpen("Meta Index", VMAF_FORCE_READ_WRITE, VMO_OPEN, 0);
	if(vmf) {
	    array = VMGetMapBlock(vmf);
	    if(array) {
		/* search all entries */
		itemCount = HugeArrayGetCount(vmf, array);
		while(loopCount < itemCount) {
		    HugeArrayLock(vmf, array, loopCount, &elemPtr, &elemSize);
		    if (LocalCmpStringsNoCase(oldPath, elemPtr->paAME_path, 0) == 0) {
			HugeArrayUnlock(elemPtr);
			HugeArrayResize(vmf, array, loopCount, sizeof(elemPtr->paAME_header) + strlen(newPath)+1);
			HugeArrayLock(vmf, array, loopCount, &elemPtr, &elemSize);
			strcpy(elemPtr->paAME_path, newPath);
			result = TRUE;
		    }
		    HugeArrayUnlock(elemPtr);
		    loopCount++;
		}
	    }
	    VMClose(vmf, FALSE);
	}
    }
    FilePopDir();
    return result;
}

word PAAlbumOpen(PAAlbumData *data, DiskHandle disk, TCHAR *path, PAAlbumAttrs *attrs) {

	Boolean err = FALSE;

	FilePushDir();
	if(FileSetCurrentPath(disk, path)) {

		data->PAAD_attrs = (*attrs);

		data->PAAD_bufferBlock = MemAlloc(paIndexEntrySize(data), HF_SWAPABLE, 0);

		data->PAAD_disk = disk;
		strcpy(data->PAAD_path, path);
		
		/* open/create album index file */
//		data->PAAD_indexFile = FileCreate("Album Index", FILE_CREATE_NO_TRUNCATE | FILE_ACCESS_RW | FILE_DENY_RW, 0);
		data->PAAD_indexFile = paAlbumGetIndex(data, disk, path, attrs);

		if(data->PAAD_indexFile) {
		
			/* size gives us the item count */
			data->PAAD_itemCount = FileSize(data->PAAD_indexFile) / paIndexEntrySize(data);
			data->PAAD_tempItemCount = data->PAAD_itemCount;

			/* temp list only if there are delete operations */
			data->PAAD_tempList = NULL;
		}

		/* update item index file */
		paAlbumUpdate(data);
	}
	FilePopDir();

	return err;
}

word PAAlbumClose(PAAlbumData *data) {
	
	if(data->PAAD_tempList &&
		(data->PAAD_tempItemCount != data->PAAD_itemCount)) {

		word loopCount;
		PAAlbumIndexEntry *itemData;

		/* write the new item index file */
		
		loopCount = 0;
		itemData = MemLock(data->PAAD_bufferBlock);
		while(loopCount < data->PAAD_tempItemCount) {
		
			FilePos(data->PAAD_indexFile, 
				((dword)PAAlbumGetIndex(data, loopCount)) * paIndexEntrySize(data), FILE_POS_START);
			FileRead(data->PAAD_indexFile, itemData, paIndexEntrySize(data), 0);
			FilePos(data->PAAD_indexFile, 
				((dword)loopCount) * paIndexEntrySize(data), FILE_POS_START);
			FileWrite(data->PAAD_indexFile, itemData, paIndexEntrySize(data), 0);

			loopCount++;
		}
		MemUnlock(data->PAAD_bufferBlock);
		FileTruncate(data->PAAD_indexFile, ((dword)loopCount) * paIndexEntrySize(data), 0);
	}

	if(data->PAAD_tempList) {

		MemFree(data->PAAD_tempList);
		data->PAAD_tempList = 0;
	}

	/* closes the index file */
	if(data->PAAD_indexFile) {

		FileClose(data->PAAD_indexFile, 0);
		data->PAAD_indexFile = 0;
	}

	if(data->PAAD_bufferBlock) {

		MemFree(data->PAAD_bufferBlock);
		data->PAAD_bufferBlock = 0;
	}

	return FALSE;
}

word PAAlbumUpdate(PAAlbumData *data) {

	return paAlbumUpdate(data);
}
word PAAlbumDeleteItem(PAAlbumData *data, word item) {

	return paAlbumDeleteItemLow(data, item , TRUE);
}

word PAAlbumSwapItem(PAAlbumData *data, word item1, word item2) {

	PAAlbumIndexEntry *itemData1, *itemData2;
	MemHandle mh;

	mh = MemAlloc(paIndexEntrySize(data), HF_SWAPABLE, 0);

	if(mh) {
	
		itemData1 = MemLock(data->PAAD_bufferBlock);
		itemData2 = MemLock(mh);

		FilePos(data->PAAD_indexFile, 
			((dword)PAAlbumGetIndex(data, item1)) * paIndexEntrySize(data), FILE_POS_START);
		FileRead(data->PAAD_indexFile, itemData1, paIndexEntrySize(data), 0);

		FilePos(data->PAAD_indexFile, 
			((dword)PAAlbumGetIndex(data, item2)) * paIndexEntrySize(data), FILE_POS_START);
		FileRead(data->PAAD_indexFile, itemData2, paIndexEntrySize(data), 0);

		FilePos(data->PAAD_indexFile, 
			((dword)PAAlbumGetIndex(data, item1)) * paIndexEntrySize(data), FILE_POS_START);
		FileWrite(data->PAAD_indexFile, itemData2, paIndexEntrySize(data), 0);

		FilePos(data->PAAD_indexFile, 
			((dword)PAAlbumGetIndex(data, item2)) * paIndexEntrySize(data), FILE_POS_START);
		FileWrite(data->PAAD_indexFile, itemData1, paIndexEntrySize(data), 0);
	
		FileCommit(data->PAAD_indexFile, 0);
		
		MemUnlock(data->PAAD_bufferBlock);
		MemFree(mh);
	}

	return FALSE;
}

word PAAlbumGetItem(PAAlbumData *data, word item, PAAlbumIndexEntry *buffer) {
	
	FilePos(data->PAAD_indexFile, 
		((dword)PAAlbumGetIndex(data, item)) * paIndexEntrySize(data), FILE_POS_START);
	FileRead(data->PAAD_indexFile, buffer, paIndexEntrySize(data), 0);

	return FALSE;
}

word PAAlbumSetItem(PAAlbumData *data, word item, PAAlbumIndexEntry *buffer) {
	
	FilePos(data->PAAD_indexFile, 
		((dword)PAAlbumGetIndex(data, item)) * paIndexEntrySize(data), FILE_POS_START);
	FileWrite(data->PAAD_indexFile, buffer, paIndexEntrySize(data), 0);
	FileCommit(data->PAAD_indexFile, 0);

	return FALSE;
}

word PAAlbumGetItemCount(PAAlbumData *data) {
	
	return data->PAAD_tempItemCount;
}

word PAAlbumGetIndex(PAAlbumData *data, word item) {

	word retValue = item;

	if(data->PAAD_tempList) {
	
		word *p_list;

		p_list = MemLock(data->PAAD_tempList);
		retValue = p_list[item];
		MemUnlock(data->PAAD_tempList);
	}

	return retValue;
}
