@include "PicAlbum.goh"
#include <photopc.h>
#include <Ansi/stdio.h>

@classdecl PACameraProgressClass;

@extern object PACameraProgressDialog;
@extern object PACameraProgressStatus;
@extern object PACameraProgressStop;
@extern object PortSettingsPortGroup;
@extern object PortSettingsSpeedGroup;

Boolean G_cameraStop = FALSE;

 /***********************************************************************
 *
 * FUNCTION:	PACameraRetrieve
 *
 * CALLED BY:	MSG_PA_GET_PICTURES_FROM_CAMERA
 *
 * STRATEGY:	Get the pix from the camera
 *
 *		         Return FALSE on success
 *
 *
 ***********************************************************************/
word PACameraRetrieve(void) {

 Boolean		retValue = FALSE;
 void			*iob;			/* PhotoPC session */
 TCHAR		buf[100];
 Boolean		opened = FALSE;
 PPCFrame	loopCount;
 SerialPortNum		port;
 word					speed;

	/* set up our temp folder to hold the pix */
	FilePushDir();
	FileSetStandardPath(SP_PRIVATE_DATA);
	PADeleteTree("PA Camera Temporary");
	if(!FileSetCurrentPath(0, "PA Camera Temporary"))
		FileCreateDir("PA Camera Temporary");
	FilePopDir();

	/* set the temp folder as our current path */
	FilePushDir();
	FileSetCurrentPath(SP_PRIVATE_DATA, "PA Camera Temporary");

	/* tell the user we're connecting */
	@call PACameraProgressStop::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call PACameraProgressStatus::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("", VUM_NOW);
	@call PACameraProgressDialog::MSG_GEN_INTERACTION_INITIATE();
	@call PACameraProgressStatus::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
																	 ("Connecting...", VUM_NOW);

	/* get the port and speed settings */
	port = @call PortSettingsPortGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	speed = @call PortSettingsSpeedGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	/* connect to the camera */
	G_cameraStop = FALSE;
	if(!PPCOpen(&iob, port, NULL, NULL, speed))	{
		/* OK - we're talking to the camera */
		PPCFrame		picCount;

		opened = TRUE;
		if(!PPCCount(iob, &picCount)) {
			/* and there are pictures on the camera */
			loopCount = 0;
			while(loopCount < picCount) {
				/* so let's get the next pic */
				FileLongName	getname;

				/* tell the user what pic we're getting */
				sprintf(buf, "Downloading picture %lu of %lu...",
																	  loopCount+1, picCount);
				@call PACameraProgressStatus::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
																					 buf, VUM_NOW);

				/* give the pic the next name in sequence */
				sprintf(getname, "%08lu.JPG", loopCount + 1);

				if((!opened && PPCOpen(&iob, port, NULL, NULL, speed))
							  || PPCGetFile(iob, loopCount+1, PPCFT_IMAGE, getname)) {
					/* XXX error getting frame */
					PPCClose(iob, TRUE);
					opened = FALSE;
					/* ask if the user want's to try again */
					if (UserStandardDialog(0, 0, 0, 0,
						loopCount ? "Error getting picture from camera. Please check your connection!\r\rDo you want to try again?\r\rIf you choose \"No\", not all pictures will be shown."
						: "Error getting picture from camera. Please check your connection!\r\rDo you want to try again?",
						(GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) |
						(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET)) == IC_YES) {
						/* let's try again */
						continue;
						}
					/* User says to give up - delete any partial image */
					FileDelete(getname);
					/* keep successful pictures */
					if (!loopCount)
						retValue = TRUE;
					break;
					}
				else {
					/* We got the pic - ensure open state is flagged */
					opened = TRUE;
					}

				/* handle stop */
				if (G_cameraStop) break;

				/* get next frame */
				loopCount++;
				} /* end of get pix while */
			} /* end of pix on the camera if */

		else {
			/* XXX error getting the pic count */
			UserStandardDialog(0, 0, 0, 0,
							"There are no pictures stored on the digital camera!",
							(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)
							| (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			retValue = TRUE;
			}
		/* one way or the other we're done talking to the camera */
		if (opened) PPCClose(iob, TRUE);

		}  /* end good connection to camera if */

	else {
		/* XXX error connecting to the camera */
		if (!G_cameraStop)
		UserStandardDialog(0, 0, 0, 0,
						"Wasn't able to connect to a digital camera. Please check your connection!",
						(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)
						| (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
		retValue = TRUE;
		}

	/* clean things up */
	@call PACameraProgressDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	FilePopDir();
	return retValue;

}

@method PACameraProgressClass, MSG_PA_CAMERA_PROGRESS_STOP
{
    G_cameraStop = TRUE;
    @call PACameraProgressStop::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call PACameraProgressStatus::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Stopping...", VUM_NOW);
}
