COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Calendar - constant definitions
FILE:		calendarConstant.def

AUTHOR:		Don Reeves, July 18, 1989

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Don	7/18/89		Initial Revision
	Don	7/28/89		Split up calendar.def
	Don	8/1/89		Revamped database stuff
	Don	12/4/89		Use new class & method declarations
	Richard	3/15/95		Add declarations for Responder
	sean	4/6/95		To Do list stuff
	Richard 5/30/95		Add event end-time support
	Richard 7/27/95		Responder repeat events

DESCRIPTION:
	Constant definitions for the Calendar application

	$Id: calendarConstant.def,v 1.1 97/04/04 14:49:48 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

include product.def

nil			equ 0


COL_MAJOR_MONTH		equ	FALSE
SMALL_DAY_SUMMARY	equ	FALSE
END_TIMES		equ	FALSE
WEEK_NUMBERING		equ	FALSE
_RESPONDER		equ	FALSE
USE_RTCM		equ	FALSE
CLAIM_UNUSED_MONTH_SPACE equ	FALSE
SUPPORT_ONE_LINE_PRINT	equ	FALSE

if	COL_MAJOR_MONTH
HAS_MIN_WEEK_DAY_WIDTH	equ	FALSE
else
HAS_MIN_WEEK_DAY_WIDTH	equ	FALSE
endif

CALAPI			equ	FALSE

if	CALAPI
SEARCH_EVENT_BY_ID	equ	TRUE
else
SEARCH_EVENT_BY_ID	equ	FALSE
endif   ; CALAPI

if	SEARCH_EVENT_BY_ID
UNIQUE_EVENT_ID		equ	TRUE
else
UNIQUE_EVENT_ID		equ	FALSE
endif   ; SEARCH_EVENT_BY_ID

if _RGB_COLORS
MONTH_BG_COLOR_FLAGS	equ	CF_RGB
MONTH_BG_COLOR_RED	equ	196
MONTH_BG_COLOR_GREEN	equ	196
MONTH_BG_COLOR_BLUE	equ	196

MONTH_DAY_COLOR_FLAGS	equ	CF_RGB
MONTH_DAY_COLOR_RED	equ	235
MONTH_DAY_COLOR_GREEN	equ	235
MONTH_DAY_COLOR_BLUE	equ	235

EVENT_BG_COLOR_FLAGS	equ	CF_RGB
EVENT_BG_COLOR_RED	equ	235
EVENT_BG_COLOR_GREEN	equ	235
EVENT_BG_COLOR_BLUE	equ	235

else ; not _RGB_COLORS

LIGHT_COLOR		equ C_LIGHT_CYAN	; GeoPlanner's light color
BACK_COLOR		equ C_WHITE		; GeoPlanner's event back color
;DARK_COLOR		equ C_BLACK		; GeoPlanner's dark color

MONTH_BG_COLOR_FLAGS	equ	CF_INDEX ; mask CMM_ON_BLACK or CMT_CLOSEST
MONTH_BG_COLOR_RED	equ	LIGHT_COLOR
MONTH_BG_COLOR_GREEN	equ	0
MONTH_BG_COLOR_BLUE	equ	0

MONTH_DAY_COLOR_FLAGS	equ	CF_INDEX ; mask CMM_ON_BLACK or CMT_CLOSEST
MONTH_DAY_COLOR_RED	equ	BACK_COLOR
MONTH_DAY_COLOR_GREEN	equ	0
MONTH_DAY_COLOR_BLUE	equ	0

EVENT_BG_COLOR_FLAGS	equ	CF_INDEX ; mask CMM_ON_BLACK or CMT_CLOSEST
EVENT_BG_COLOR_RED	equ	BACK_COLOR
EVENT_BG_COLOR_GREEN	equ	0
EVENT_BG_COLOR_BLUE	equ	0
endif  ; _RGB_COLORS

TEXT_COLOR		equ	C_BLACK
INK_COLOR		equ	C_BLACK


if PZ_PCGEOS			; ---------------------------------------

;
; Font constants
;
PLANNER_MONTH_FONT		equ	FID_PIZZA_KANJI
PLANNER_PRINT_MONTH_FONT	equ	FID_BITSTREAM_KANJI_SQUARE_GOTHIC
LG_TITLE_FONT_SIZE		equ	16
LG_DATE_FONT_SIZE		equ	16
SM_TITLE_FONT_SIZE		equ	16
SM_DATE_FONT_SIZE		equ	16
;
; View constants
;
VIEW_HEIGHT_INITIAL		equ	150
VIEW_WIDTH_INITIAL		equ	260
VIEW_HEIGHT_MIN			equ	135
VIEW_WIDTH_MIN			equ	175

DAYPLAN_TIME_WIDTH_MIN		equ	150

else	; PC			; ---------------------------------------

;
; Font constants
;
PLANNER_MONTH_FONT		equ	FID_UNIVERSITY
PLANNER_PRINT_MONTH_FONT	equ	FID_DTC_URW_SANS
LG_TITLE_FONT_SIZE		equ	14
LG_DATE_FONT_SIZE		equ	12
SM_TITLE_FONT_SIZE		equ	10
SM_DATE_FONT_SIZE		equ	9
;
; View constants
;
VIEW_WIDTH_INITIAL		equ	260
if CLAIM_UNUSED_MONTH_SPACE
VIEW_6_WEEKS_WIDTH		equ	280
endif
VIEW_HEIGHT_INITIAL		equ	200
VIEW_HEIGHT_MIN			equ	156
VIEW_WIDTH_MIN			equ	174

DAYPLAN_TIME_WIDTH_MIN		equ	100
CHANGE_ALARM_MESSAGE_SENTINEL	equ	1

endif				; ---------------------------------------


if HANDLE_MAILBOX_MSG
;
; Booking constants
;
CALENDAR_PASSWORD_LENGTH		equ	8
BOOKING_PWD_LENGTH			equ	8
;
; Length of calendar booking password.
;
CONFIRM_DLG_EVENT_TEXT_ARGUMENT_CHAR	equ	C_CTRL_A
CONFIRM_DLG_EVENT_DATE_TIME_ARG_CHAR	equ	C_TRADEMARK

CONFIRM_DLG_EVENT_START_TIME_ARG_CHAR	equ	C_PLUSMINUS
CONFIRM_DLG_EVENT_END_TIME_ARG_CHAR	equ	C_LESSEQUAL
CONFIRM_DLG_EVENT_ALARM_ARG_CHAR	equ	C_GREATEREQUAL
CONFIRM_DLG_EVENT_RESERVE_ARG_CHAR	equ	C_YEN
CONFIRM_DLG_EVENT_REPEAT_ARG_CHAR	equ	C_L_MU
CONFIRM_DLG_EVENT_REPEAT_UNTIL_ARG_CHAR	equ	C_U_OMEGA

CONFIRM_DLG_EVENT_DATE_ARGUMENT_CHAR	equ	C_U_SIGMA
CONFIRM_DLG_EVENT_TIME_ARGUMENT_CHAR	equ	C_U_PI
CONFIRM_DLG_EVENT_DAY_OF_WEEK_ARGUMENT_CHAR equ	C_L_AE
CONFIRM_DLG_RESERVE_DAYS_ARG_CHAR	equ	C_L_PI
CONFIRM_DLG_ALARM_MINUTES_ARG_CHAR	equ	C_INTEGRAL
CONFIRM_DLG_REPETITION_ARG_CHAR		equ	C_ORDFEMININE
CONFIRM_DLG_UPDATE_ACTION_ARG_CHAR	equ	C_ORDMASCULINE


CONFIRM_DLG_SENDER_CHAR			equ	C_CTRL_B
CONFIRM_DLG_REPLY_ARGUMENT_CHAR		equ	C_ORDMASCULINE
;
; Those are the funny characters that represent parameters in a
; string. Localization tool does not handle anything other than CTRL-A
; and CTRL-B.
; All constants are valid for DBCS/SBCS.
;

BOOK_EVENT_RECIPIENT_NAME		equ	C_CTRL_A
BOOK_EVENT_RECIPIENT_NUMBER		equ	C_CTRL_B

CONFIRM_DLG_DESC_TEXT_MAX_LENGTH	equ	140
;
; Max length of the text that appears in the confirmation dialog when
; event appointment comes in.
;
EVENT_DESCRIPTION_SIZE			equ	30
;
; Max size of event description that appears in the confirmation
; dialog.
;

endif

;-----------------------------------------------------------------------------
;                           DataBase Declarations
;-----------------------------------------------------------------------------

; The year map structures (year map = DB map block)
;
YearMapHeader		struct
    YMH_secure1		byte	(?)		; First security byte
    YMH_numYears	word	(?)		; Number of years
    YMH_nextAlarmGr	word	(?)
    YMH_nextAlarmIt	word	(?)		; Group:Item of the next alarm
    YMH_repeatMapGr	word	(?)
    YMH_repeatMapIt	word	(?)		; Group:Item of the RepeatMap
    YMH_undoBufGr	word	(?)
    YMH_undoBufIt	word	(?)		; Group:Item of the undo Buffer
    YMH_undoRmGroup	byte	(?)		; Remove the group after done?
    YMH_secure2		byte	(?)		; Second security byte
if	_TODO
    YMH_toDoListGr	word  	(?)		
    YMH_toDoListIt	word	(?)		; Group:Item of To Do list
endif
if	UNIQUE_EVENT_ID
    YMH_nextEventID	dword	(?)		; the ID of next event
						; that will be allocated
endif
if	SEARCH_EVENT_BY_ID
    YMH_eventIDArray	word	(?)		; unsorted huge array keeping
						; unique ID and event Gr:It
						; pairs. 
endif
YearMapHeader		ends

YearMapStruct		struct
    YMS_year		word	(?)		; the year
    YMS_group		word	(?)		; group for this year
    YMS_yearMap		word	(?)		; item # for year map
YearMapStruct		ends

YearMapSize		equ (12 * 32 * 2)	; twelve months, 32 days
yearMapDayCount 	equ 0			; offset to the day count



if	SEARCH_EVENT_BY_ID
; Array element of event unique ID and corresponding event Gr:Item.
; It is stored in YMH_eventIDArray
;
EventIDArrayElemStruct	struct
	EIDAES_eventID	dword			; unique event ID
	EIDAES_eventGr	word
	EIDAES_eventIt	word			; Gr:It of corresponding event
EventIDArrayElemStruct	ends
endif	; SEARCH_EVENT_BY_ID

; The event map structures
;
EventMapHeader		struct
    EMH_item		word	(?)		; My item number
    EMH_numEvents	word	(?)		; Number of events for this day
    EMH_day		byte	(?)		; Day
    EMH_month		byte	(?)		; Month
EventMapHeader		ends

EventMapStruct		struct
    EMS_time		word	(?)		; Hour/Minute of event
    EMS_event		word	(?)		; Event item # for this time
EventMapStruct		ends


; The DataBase event structures
;
AlarmSound		etype	byte
    AS_NORMAL		enum	AlarmSound	; must be 0 for backwards compat
    AS_SILENT		enum	AlarmSound
    AS_QUIET		enum	AlarmSound
    AS_PANIC		enum	AlarmSound

if	_TODO					; To Do list event record
EventInfoFlags		record
    EIF_ALARM_ON:1				; alarm status (on/off)
    EIF_NORMAL:1				; a "normal" event
    EIF_HEADER:1				; a "header" event
    EIF_REPEAT:1				; a "repeating" event
    EIF_TODO:1					; a "to do list" event
    EIF_INK:1					; an "ink" event
    EIF_ALARM_SOUND	AlarmSound:2		; sound to make for alarm
EventInfoFlags		end

else						; non-To Do list event record
EventInfoFlags		record
    EIF_ALARM_ON:1				; alarm status (on/off)
    EIF_NORMAL:1				; a "normal" event
    EIF_HEADER:1				; a "header" event
    EIF_REPEAT:1				; a "repeating" event
    :1			
    EIF_INK:1					; an "ink" event
    EIF_ALARM_SOUND	AlarmSound:2		; sound to make for alarm
EventInfoFlags		end
endif

if END_TIMES
VariableLengthFlags	record
   VLF_START_TIME:1				; 1 if start time is normal
   VLF_END_TIME:1				; does event have an endtime?
   VLF_START_DIRTY:1				; start time/date dirty?
   VLF_END_DIRTY:1				; end time/date dirty?
   VLF_END_DATE:1				; does event have an enddate?
   VLF_WHOLE_DAY_RES:1				; part of whole day reservation
   VLF_REPEAT_UNTIL:1				; we have a repeat until date
   :1
VariableLengthFlags	end

VL_START_TIME		equ	mask VLF_START_TIME
;
; 1 means that event is normal event with start time
; 0 means that event's start time is always 7:59 and time string will not be
;   displayed in day view -- this is a lizzy feature.
;
VL_END_TIME		equ	mask VLF_END_TIME
VL_START_DIRTY		equ	mask VLF_START_DIRTY
VL_END_DIRTY		equ	mask VLF_END_DIRTY
VL_END_DATE		equ	mask VLF_END_DATE
VL_WHOLE_DAY_RES	equ	mask VLF_WHOLE_DAY_RES
VL_REPEAT_UNTIL		equ	mask VLF_REPEAT_UNTIL
endif	; END_TIMES


EventStruct		struct
    ES_flags		EventInfoFlags		; see above
    ES_parentMap	word	(?)		; Parent EventMap
    ES_timeYear		word	(?)		; Year for this event
    ES_timeDay		byte	(?)		; Day for this event
    ES_timeMonth	byte	(?)		; Month for this event
    ES_timeMinute	byte	(?)		; Minutes for this event
    ES_timeHour		byte	(?)		; Hours for this event
if	END_TIMES
    ES_endTimeMinute	byte	(?)		; minutes for end time
    ES_endTimeHour	byte	(?)		; hour for end time
    ES_varFlags		VariableLengthFlags	; endtime state flags
endif
if	UNIQUE_EVENT_ID
    ES_uniqueID		dword	(?)		; unique id for event
endif
    ES_alarmYear	word	(?)		; Year for this alarm
    ES_alarmDay		byte	(?)		; Day for this alarm
    ES_alarmMonth	byte	(?)		; Month for this alarm
    ES_alarmMinute	byte	(?)		; Minutes for this alarm
    ES_alarmHour	byte	(?)		; Hours for this alarm
    ES_alarmPrevGr	word	(?)		; Group # for prev event
    ES_alarmPrevIt	word	(?)		; Item # for prev event by alrm
    ES_alarmNextGr	word	(?)		; Group # for next event
    ES_alarmNextIt	word	(?)		; Item # for next event by alrm
    ES_repeatID		word	(?)		; Repeat ID (prev repeat event)
if	HANDLE_MAILBOX_MSG
    ES_sentToArrayBlock	word	(?)		; Sent-to info vmblock handle
    ES_sentToArrayChunk	word	(?)		; Sent-to info chunk handle
    ES_nextBookID	word	(?)		; # of event booked on
						; this event
endif
DBCS <	align 2								>
    ES_dataLength	word	(?)		; Length (in bytes) of data
;stores null-terminator
SBCS<ES_data		byte	(?)		; beginning of event data>
DBCS<ES_data		wchar	(?)		; beginning of event data>
EventStruct		ends


INK_DATA_LENGTH		equ	-1		; hack for an ink "event"


; The repeat event table structures (tables hold a single year's reapt ID's)
;
RepeatTableHeader	struct
    RTH_lastSwap	word	(?)		; the last table swapped
RepeatTableHeader	ends

RepeatTableStruct	struct
    RTS_yearYear	word	(?)		; year of this table
    RTS_tableOD		optr			; OD for this table
RepeatTableStruct	ends


; The repeat event map structures (hold pointers to the actual repeat events)
;
RepeatMapHeader		struct
    RMH_item		word	(?)		; my item #
    RMH_size		word	(?)		; the size of the table
    RMH_numItems	word	(?)		; number of Repeating Events
    RMH_nextValue	word	(?)		; next Repeat Index value
RepeatMapHeader		ends

RepeatMapStruct		struct
    RMS_indexValue	word	(?)		; index value for this RS
    RMS_item		word	(?)		; item # of the RepeatStruct
RepeatMapStruct		ends

; Repeat types
;
RepeatEventType		etype byte, 1
    RET_WEEKLY		enum RepeatEventType
    RET_MONTHLY_DATE	enum RepeatEventType
    RET_MONTHLY_DOW	enum RepeatEventType
    RET_YEARLY_DATE	enum RepeatEventType
    RET_YEARLY_DOW	enum RepeatEventType

DOWFlags		record			; matches order in .UI file
    DOWF_Unused:1,
    DOWF_Sunday:1,
    DOWF_Saturday:1,
    DOWF_Friday:1,
    DOWF_Thursday:1,
    DOWF_Wednesday:1,
    DOWF_Tuesday:1,
    DOWF_Monday:1
DOWFlags		end

DOWF_SUNDAY		equ	mask DOWF_Sunday
DOWF_MONDAY		equ	mask DOWF_Monday
DOWF_TUESDAY		equ	mask DOWF_Tuesday
DOWF_WEDNESDAY		equ	mask DOWF_Wednesday
DOWF_THURSDAY		equ	mask DOWF_Thursday
DOWF_FRIDAY		equ	mask DOWF_Friday
DOWF_SATURDAY		equ	mask DOWF_Saturday

LAST_DAY_OF_MONTH 	equ 	0		; last day or occurrence
LAST_DOW_OF_MONTH	equ	5		; value of spin index

; The repeated event structure
;
RepeatStruct		struct
    RES_flags		EventInfoFlags		; see above
    RES_type		RepeatEventType		; see above definitions
    RES_ID		word	(?)		; the ID # for this event
    RES_startYear	word	(?)		; Start year for repeated event
    RES_startDay	byte	(?)		; Start day for same
    RES_startMonth	byte	(?)		; Start month for same
    RES_endYear		word	(?)		; End year for repeated event
    RES_endDay		byte	(?)		; End day for same
    RES_endMonth	byte	(?)		; End month for same
    RES_minute		byte	(?)		; minute for this event
    RES_hour		byte	(?)		; hour for same
if	END_TIMES
    RES_endMinute	byte	(?)		; end time for event
    RES_endHour		byte	(?)
    RES_varFlags	VariableLengthFlags	; endtime state flags
    RES_padding		byte	(?)		; swat doesn't like oddness
endif
if	UNIQUE_EVENT_ID
    RES_uniqueID	dword	(?)		; unique id for event
endif
if	HANDLE_MAILBOX_MSG
    RES_sentToArrayBlock word	(?)		; Sent-to info vmblock handle
    RES_sentToArrayChunk word	(?)		; Sent-to info chunk handle 
    RES_nextBookID	word	(?)		; # of event booked on
						; this event
endif
    RES_DOWFlags	DOWFlags (?)		; the DOW flags
    RES_day		byte	(?)		; which day of month
    RES_month		byte	(?)		; which month
    RES_DOW		byte	(?)		; which Day of Week
    RES_occur		byte	(?)		; which occurrence
DBCS <	align 2								>
    RES_dataLength	word	(?)		; length of data
;used for storing null-terminator
SBCS <RES_data		byte	(?)		; beginning of the repeat data>
DBCS <RES_data		wchar	(?)		; beginning of the repeat data>
RepeatStruct		ends


; Structure for an "exception date" for a repeating event. These structures
; are maintained at the end of a RepeatStruct (after the event text), and
; specify date on which the repeating event will *not* occur. Note that
; the ordering of RDE_day & RDE_month is critical, so don't change it!
;
if	_REPEAT_DATE_EXCEPTIONS
RepeatDateException	struct
   RDE_day		byte			; day for the exception
   RDE_month		byte			; month for the exception
   RDE_year		word			; year for the exception
RepeatDateException	ends
endif


; Structure to pass to RepeatGetNextAlarm()
;


;-----------------------------------------------------------------------------
; 			    	Records
;-----------------------------------------------------------------------------

SystemFlags		record
    PRINT_MONTH_EVENTS:1			; printing events in a month
    DOC_TOO_BIG_ERROR:1				; event "document" is too long
    DISPLAY_ERRORS:1				; display errors to user
    CLEAN_VM_FILE:1				; document is clean
    VALID_FILE:1				; document is loaded
    IN_UNDO:1					; in the middle of an undo
    UNICONIFIED:1				; application is uniconified
    EXITING:1					; application is exiting
SystemFlags		end

SF_EXITING		equ	mask EXITING
SF_VISIBLE		equ	mask UNICONIFIED
SF_IN_UNDO		equ	mask IN_UNDO
SF_CLEAN_VM_FILE	equ	mask CLEAN_VM_FILE
SF_VALID_FILE		equ	mask VALID_FILE
SF_DISPLAY_ERRORS	equ	mask DISPLAY_ERRORS
SF_DOC_TOO_BIG_ERROR	equ	mask DOC_TOO_BIG_ERROR
SF_PRINT_MONTH_EVENTS	equ	mask PRINT_MONTH_EVENTS

if	END_TIMES
DataBaseUpdateFlags	record
	DBUF_New:1
	DBUF_Time:1
	DBUF_Alarm:1
	DBUF_Event:1
	DBUF_Flags:1
	DBUF_If_Necessary:1
	DBUF_VarLen:1
	DBUF_Memo:1
DataBaseUpdateFlags	end

DBUF_NEW		equ	mask DBUF_New	; a new event
DBUF_TIME		equ	mask DBUF_Time	; new time for existing event
DBUF_ALARM		equ	mask DBUF_Alarm	; new alarm for existing event
DBUF_EVENT		equ	mask DBUF_Event	; new text for existing event
DBUF_FLAGS		equ	mask DBUF_Flags	; update the flags
DBUF_IF_NECESSARY	equ	mask DBUF_If_Necessary ; update only if needed
DBUF_VARLEN		equ	mask DBUF_VarLen ; update variable length event
DBUF_MEMO		equ	mask DBUF_Memo	 ; update memo 
DBUF_DATE		equ	mask DBUF_New	; update event date
else
DataBaseUpdateFlags	record	DBUF_New:1, DBUF_Time:1, DBUF_Alarm:1, \
				DBUF_Event:1, DBUF_Flags:1, \
				DBUF_If_Necessary:1, :2
DBUF_NEW		equ	mask DBUF_New	; a new event
DBUF_TIME		equ	mask DBUF_Time	; new time for existing event
DBUF_ALARM		equ	mask DBUF_Alarm	; new alarm for existing event
DBUF_EVENT		equ	mask DBUF_Event	; new text for existing event
DBUF_FLAGS		equ	mask DBUF_Flags	; update the flags
DBUF_IF_NECESSARY	equ	mask DBUF_If_Necessary ; update only if needed
endif


if	0
RoundType		etype word, 0
    RT_CLOSEST		enum	RoundType
    RT_FORWARD		enum	RoundType
    RT_BACKWARD		enum	RoundType
endif

QuickEnum		etype word, 0, 2
    QUICK_TODAY		enum	QuickEnum	; show today
    QUICK_WEEK		enum	QuickEnum	; show this week
    QUICK_WEEKEND	enum	QuickEnum	; show this weekend
    QUICK_MONTH		enum	QuickEnum	; show this month
    QUICK_QUARTER	enum	QuickEnum	; show this quarter
    QUICK_YEAR		enum	QuickEnum	; show this year
    QUICK_GOTO		enum	QuickEnum	; go to selected date
    QUICK_PREVIOUS	enum	QuickEnum	; show previous selection

if PZ_PCGEOS ; Pizza
CalendarFeatures	record
    CF_SELECTION:1			; allow selection of multiple days
    CF_PAGE_SETUP:1
    CF_ALARMS:1
    CF_VIEW_BOTH:1
    CF_VIEW_DATA:1
    CF_PREFERENCES:1
    CF_QUICK_PREVIOUS:1
    CF_REPEAT_EVENTS:1
    CF_SET_HOLIDAY:1
    CF_DO_SEARCH:1
    CF_GEODEX_LOOKUP:1
    :5
CalendarFeatures	end
else
CalendarFeatures	record
    CF_SELECTION:1			; allow selection of multiple days
    CF_PAGE_SETUP:1
    CF_ALARMS:1
    CF_VIEW_BOTH:1
    CF_VIEW_DATA:1
    CF_PREFERENCES:1
    CF_QUICK_PREVIOUS:1
    CF_REPEAT_EVENTS:1
    CF_DO_SEARCH:1
    CF_GEODEX_LOOKUP:1
    :6
CalendarFeatures	end
endif

INTRODUCTORY_FEATURES	equ	mask CF_VIEW_BOTH or \
				mask CF_DO_SEARCH

BEGINNING_FEATURES	equ	INTRODUCTORY_FEATURES or \
				mask CF_PAGE_SETUP or \
				mask CF_ALARMS

if PZ_PCGEOS ; Pizza
INTERMEDIATE_FEATURES	equ	BEGINNING_FEATURES or \
				mask CF_SELECTION or \
				mask CF_VIEW_DATA or \
				mask CF_PREFERENCES or \
				mask CF_QUICK_PREVIOUS or \
				mask CF_REPEAT_EVENTS or \
				mask CF_SET_HOLIDAY or \
				mask CF_GEODEX_LOOKUP
else
INTERMEDIATE_FEATURES	equ	BEGINNING_FEATURES or \
				mask CF_SELECTION or \
				mask CF_VIEW_DATA or \
				mask CF_PREFERENCES or \
				mask CF_QUICK_PREVIOUS or \
				mask CF_REPEAT_EVENTS or \
				mask CF_GEODEX_LOOKUP
endif

DEFAULT_FEATURES	equ	INTERMEDIATE_FEATURES

ShowFlags		record
    SF_SHOWING_CALENDAR_WINDOW:1
    SF_SHOWING_EVENT_WINDOW:1
    SF_SHOW_TODAY_ON_RELAUNCH:1
    SF_SHOW_NEW_DAY_ON_DATE_CHANGE:1
    SF_CHANGE_IMMINENT:1
    :3
ShowFlags		end


SHOWING_BOTH_WINDOWS	equ	(mask SF_SHOWING_CALENDAR_WINDOW or \
				 mask SF_SHOWING_EVENT_WINDOW)

DEFAULT_SHOW_FLAGS	equ	(mask SF_SHOWING_CALENDAR_WINDOW or \
				 mask SF_SHOWING_EVENT_WINDOW or \
				 mask SF_SHOW_TODAY_ON_RELAUNCH or \
				 mask SF_SHOW_NEW_DAY_ON_DATE_CHANGE)

SearchInfo		record
    :4
    SI_RESET:1				; reset search, do to editing (or other)
    SI_WRAPPED:1			; search has wrapped around
    SI_MATCHED:1			; a match has ocurred
    SI_SEARCHING:1			; searching is in progress
SearchInfo		end

BufferUpdateFlags	record	WriteBack:1, BufNotifyDP:1, BufDelete:1, :5
BUF_WRITE_BACK		equ	mask WriteBack
BUF_NOTIFY_DAYPLAN	equ	mask BufNotifyDP
BUF_DELETE		equ	mask BufDelete


ScreenUpdateFlags	record	StealFromTop:1, StealFromBottom:1, \
				NoRedraw:1, NoInvalidate:1, :4
SUF_STEAL_FROM_TOP	equ	mask StealFromTop
SUF_STEAL_FROM_BOTTOM	equ	mask StealFromBottom
SUF_NO_REDRAW		equ	mask NoRedraw
SUF_NO_INVALIDATE	equ	mask NoInvalidate


DateChange		etype word, 0
    DC_BACKWARD		enum	DateChange
    DC_FORWARD		enum	DateChange


VisibilityUIGroups	record
    VUIG_REPEAT_DIALOG_BOX:1			; repeat dialog box
    VUIG_PRINT_DIALOG_BOX:1			; print dialog box
    VUIG_EDIT_MENU:1				; edit menu
    :13
VisibilityUIGroups	end


VisibilityUIData	record
    VUID_DOCUMENT_STATE:1			; is a document open or not
    VUID_REPEAT_EVENTS:1			; number of repeat events
    :14
VisibilityUIData	end

if _TODO					; view types w/To Do list
ViewType		etype	word, 0, 2
    VT_EVENTS		enum	ViewType	; event view
    VT_CALENDAR		enum	ViewType	; calendar view
    VT_TODO		enum	ViewType	; to do list view
    VT_CALENDAR_AND_EVENTS	enum	ViewType	; calendar/events views
    VT_CALENDAR_AND_TODO_LIST	enum 	ViewType	; calendar/to do list 

else						; view types w/o To Do list
ViewType		etype	word, 0, 2
    VT_EVENTS		enum	ViewType	; event view
    VT_CALENDAR		enum	ViewType	; calendar view
endif

if	_TODO					; To Do list need 4 bits
ViewInfo		record			; for VI_TYPE field
    :1
    VI_PEN_MODE:1				; we're in pen mode
    VI_BOTH:1					; show both views at once
    VI_INK:1					; show ink view
    VI_TYPE		ViewType:4		; current ViewType
ViewInfo		end
else
ViewInfo		record
    :3
    VI_PEN_MODE:1				; we're in pen mode
    VI_BOTH:1					; show both views at once
    VI_INK:1					; show ink view
    VI_TYPE		ViewType:2		; current ViewType
ViewInfo		end
endif


;-----------------------------------------------------------------------------
; 			    	Constants
;-----------------------------------------------------------------------------

JAN_1			equ	(1 shl 8) or 1
DEC_31			equ	(12 shl 8) or 31
NULL_MONTH_DAY		equ	(12 shl 8) or 32
HIGH_MONTH_DAY  	equ	(12 shl 8) or 33

MAX_NUM_EVENTS		equ	1000

DGROUP_CHECK_VALUE	equ	1234		; the dgroup check value
NIL			equ	0ffffh		; NIL pointer

BASE_YEAR		equ	1900		; calendar math relies on this
BASE_DAY		equ	1		; day of week of Jan 1, 1900

LOW_YEAR		equ	1904		; The smallest year accessible
						; ...really can be 1900, but
						; TimeDateControl can only go
						; as low as 1904 due to limits
						; of LocalCalcDayOfWeek()
HIGH_YEAR		equ	2099		; The greatest year accessible
						; ...can realistically be up to
						; 9999, but this is as high as
						; the TimeDateControl allows

SECURITY1		equ	10111010b	; First security byte
SECURITY2		equ	01001101b	; Second security byte
LOW_DAY			equ	0
LOW_MONTH		equ	1
HIGH_DAY		equ	32
HIGH_MONTH		equ	12
LOWEST_MH		equ	0

REPEAT_MASK		equ	0001h		; used on DB group numbers

REPEAT_FIRST_ID		equ	2		; first RepeatID value


MINIMUM_PAGE_WIDTH	equ	200
MAXIMUM_PAGE_WIDTH	equ	2000
MINIMUM_PAGE_HEIGHT	equ	200
MAXIMUM_PAGE_HEIGHT	equ	2000

TIME_BUFFER_SIZE	equ	DATE_TIME_BUFFER_SIZE ; largest possible str len

DATE_BUFFER_SIZE	equ	DATE_TIME_BUFFER_SIZE ; largest possible str len


USES_DAY_OF_WEEK 	equ	0x8000		; need to calculate the DOW
CheckHack <DateTimeFormat lt USES_DAY_OF_WEEK>


; Default start hour is 6am, and we'll display events through 11:30pm
; every 30 minutes. Changed per usability testing. -Don 5/14/00
;
DEFAULT_START_HOUR	equ	6
DEFAULT_START_MINUTE	equ	0
DEFAULT_END_HOUR	equ	23
DEFAULT_END_MINUTE	equ	30
DEFAULT_INTERVAL	equ	30
DEFAULT_START_TIME	equ	DEFAULT_START_HOUR shl 8 or DEFAULT_START_MINUTE
DEFAULT_END_TIME	equ	DEFAULT_END_HOUR shl 8 or DEFAULT_END_MINUTE

DEFAULT_PREF_FLAGS	equ	PF_TEMPLATE or PF_ALWAYS_TODAY or PF_DATE_CHANGE

if	_TODO
DEFAULT_VIEW_INFO	equ	VT_CALENDAR_AND_EVENTS shl offset VI_TYPE
else		
DEFAULT_VIEW_INFO	equ	mask VI_BOTH
endif


if	_TODO					; To Do list enum types
TODO_DUMMY_YEAR		equ	1		; event time info for
TODO_DUMMY_MONTH_DAY	equ	259		; To Do list events
TODO_DUMMY_HOUR		equ	1
TODO_HIGH_PRIORITY	equ	1		; priority info is stored
TODO_NORMAL_PRIORITY	equ 	2		; in events timeMinute field

TODO_COMPLETED		equ	3		; completed event ?
TODO_NOT_COMPLETED	equ	4

TODO_NUMBER_WIDTH	equ	33

FIRST_MESSAGE		equ	1		; multiple messages in...
NOT_FIRST_MESSAGE	equ	2		; AlarmTodo
endif

;-----------------------------------------------------------------------------
; 			Year Instance structures
;-----------------------------------------------------------------------------

YearInfoFlags	record	BAD_IMAGE:1, CLOSEST:1, GRAB_MOUSE:1,SELECT:1, \
			PIVOT_LAST:1, SEL_REGION:1, ONE_MONTH_SIZE:1, \
			SMALL_MONTH_SIZE:1, MAN_CHANGE:1, YEAR_NEEDS_INIT:1, \
			PTR_OUT_OF_YEAR:1, YEAR_DRAG_OK:1, :4

YI_IMAGE_INVALID	equ mask BAD_IMAGE	; need to mark image as invalid
YI_CLOSEST		equ mask CLOSEST	; looking for closest date
YI_GRAB_MOUSE		equ mask GRAB_MOUSE	; the mouse is grabbed
YI_SELECT		equ mask SELECT		; some dates are selected
YI_PIVOT_LAST		equ mask PIVOT_LAST	; select pivot on last M/D
YI_SEL_REGION		equ mask SEL_REGION	; a selected region is valid
YI_ONE_MONTH_SIZE	equ mask ONE_MONTH_SIZE
YI_SMALL_MONTH_SIZE	equ mask SMALL_MONTH_SIZE
YI_MANUAL_CHANGE	equ mask MAN_CHANGE
YI_NEEDS_INIT		equ mask YEAR_NEEDS_INIT ; needs to be initialized
YI_OUT_OF_BOUNDS	equ mask PTR_OUT_OF_YEAR
YI_DRAG_OK		equ mask YEAR_DRAG_OK	; can drag select

YearRangeType		etype	word
    YRT_CURRENT		enum	YearRangeType	; current selection
    YRT_PREVIOUS	enum	YearRangeType	; previous selection

;-----------------------------------------------------------------------------
; 			Month Instance structures
;-----------------------------------------------------------------------------

if CLAIM_UNUSED_MONTH_SPACE
MonthInfoFlags	record
	NEW_MONTH:1				; new month to be displayed
	NEW_SIZE:1				; need to resize month object
	GRAY_DATES:1				; should we gray the dates
	PRINT:1					; the print month object
	YEAR_TITLE:1				; use the year in the title
	SPAN_6_WEEKS:1				; month spans across 6 weeks
	:2
MonthInfoFlags	end	

MI_NEW_MONTH	equ	mask NEW_MONTH
MI_NEW_SIZE	equ	mask NEW_SIZE
MI_GRAY_DATES	equ	mask GRAY_DATES
MI_YEAR_TITLE	equ	mask YEAR_TITLE
MI_PRINT	equ	mask PRINT
MI_SPAN_6_WEEKS	equ	mask SPAN_6_WEEKS
MI_DRAW_RESERVED equ	mask DRAW_RESERVED

else

MonthInfoFlags	record
	NEW_MONTH:1,
	NEW_SIZE:1,
	HAS_FOCUS:1
	PRINT:1,
	YEAR_TITLE:1
	:3
MonthInfoFlags	end

MI_NEW_MONTH	equ	mask NEW_MONTH		; new month to be displayed
MI_NEW_SIZE	equ	mask NEW_SIZE		; need to resize month object
MI_HAS_FOCUS	equ	mask HAS_FOCUS		; displayed to show month
						; ...has the focus (title is
						; ...drawn white on black)
MI_YEAR_TITLE	equ	mask YEAR_TITLE		; use the year in the title
MI_PRINT	equ	mask PRINT		; the print month object
endif

MONTH_BORDER_TOP	equ	3		; border for top of month
MONTH_BORDER_HORIZ	equ	3		; default horizontal border

if	HAS_MIN_WEEK_DAY_WIDTH

;
; Arbitrary number for now			-Simon 1/1/97
;
MIN_WEEK_DAY_WIDTH	equ	20		; min width of weekday column
						; in month view

endif	; HAS_MIN_WEEK_DAY_WIDTH

if	COL_MAJOR_MONTH

;
; Right margin of weekday in month view
;
WEEK_DAY_RIGHT_MARGIN	equ	6

endif	; COL_MAJOR_MONTH


MonthMapAlterType	etype	word, 0
    MMAT_NEW		enum	MonthMapAlterType
    MMAT_CLEAR		enum	MonthMapAlterType
    MMAT_ADDITION	enum	MonthMapAlterType
    MMAT_SUBTRACTION	enum	MonthMapAlterType


MonthMapDayStruct	struct
    MMDS_point1		Point	<>		; first coordinate pair
    MMDS_point2		Point	<>		; second coordinate pair
    MMDS_point3		Point	<>		; third coordinate pair
MonthMapDayStruct	ends


;-----------------------------------------------------------------------------
; 			DayPlan Instance structures
;-----------------------------------------------------------------------------

; IF THIS STRUCTURE IS CHANGED, CHANGE THE CORRESPONDING ONE IN THE .UI FILE

EventTableHeader	struct
    ETH_last		word	(?)		; offset to end of last entry
    ETH_screenFirst	word	(?)		; offset to first ETE on screen
    ETH_screenLast	word	(?)		; offset to last ETE on screen
    ETH_temp		word	(?)		; temporary value used often
EventTableHeader	ends

EventTableEntry		struct
    ETE_year		word	(?)		; year of the event
    ETE_day		byte	(?)		; day of the event
    ETE_month		byte	(?)		; month of the event
    ETE_minute		byte	(?)		; minute of the event
    ETE_hour		byte	(?)		; hour of the event
    ETE_group		word	(?)		; group # for the Event
    ETE_item		word	(?)		; item # for the Event
    ETE_repeatID	word	(?)		; the repeat ID, if any
    ETE_size		word	(?)		; size (in pixels) of the Event
    ETE_handle		nptr	(?)		; chunk handle to a DayEvent
EventTableEntry		ends

EVENT_TIME_BLANK	equ	-1
EVENT_TIME_HEADER	equ 	-2
EVENT_TIME_INK		equ	-3

; IF THIS STRUCTURE IS CHANGED, CHANGE THE CORRESPONDING ONE IN THE .UI FILE

BufferTableHeader	struct
    BTH_unused		byte	(?)
    BTH_buffers		byte	(?)		; the number of buffers
    BTH_size		word	(?)		; size in bytes of the table
BufferTableHeader	ends

BufferTableEntry	struct
    BTE_handle		nptr	(?)		; handle to a DayEvent
BufferTableEntry	ends


DayPlanInfoFlags	record  TEMPLATE:1, HEADERS:1, FILE_VALID:1, \
				RELOAD:1, LOADING:1, DPIF_DIRTY:1, \
				NEEDS_REDRAW:1, DELETE_ON_LOAD:1
DP_TEMPLATE	equ	mask TEMPLATE		; use a template
DP_HEADERS	equ	mask HEADERS		; use headers for empty days
DP_FILE_VALID	equ	mask FILE_VALID		; a valid DB file is open
DP_RELOAD	equ	mask RELOAD		; allow range to be reloaded
DP_LOADING	equ	mask LOADING		; loading the events now
DP_DIRTY	equ	mask DPIF_DIRTY		; must reload if switching days
DP_NEEDS_REDRAW	equ	mask NEEDS_REDRAW	; needs to be redrawn
DP_DEL_ON_LOAD	equ	mask DELETE_ON_LOAD	; delete all if event is loaded


; NOTE: DP_TEMPLATE = PF_TEMPLATE
; &	DP_HEADERS  = PF_HEADER
if	_TODO				; To do mode bit
PreferenceFlags		record	TEMPLATE_MODE:1, HEADERS_MODE:1, \
				START_ALWAYS_TODAY:1, DATE_CHANGE:1, \
				AFFECTS_SINGLE:1, AFFECTS_RANGE:1, \
				AFFECTS_GLOBAL:1, TODO_MODE:1

PF_TEMPLATE	equ	mask TEMPLATE_MODE	; wants template mode
PF_HEADERS	equ	mask HEADERS_MODE	; wants headers displayed
PF_ALWAYS_TODAY	equ	mask START_ALWAYS_TODAY	; always start with today
PF_DATE_CHANGE	equ	mask DATE_CHANGE	; go to today on date change
PF_GLOBAL	equ	mask AFFECTS_GLOBAL	; affects global flags
PF_SINGLE	equ	mask AFFECTS_SINGLE	; affects single day
PF_RANGE	equ	mask AFFECTS_RANGE	; affects range of days
PF_TODO		equ	mask TODO_MODE		; To Do List Mode

else						; non-To Do list flags

PreferenceFlags		record	TEMPLATE_MODE:1, HEADERS_MODE:1, \
				START_ALWAYS_TODAY:1, DATE_CHANGE:1, \
				AFFECTS_SINGLE:1, AFFECTS_RANGE:1, \
				AFFECTS_GLOBAL:1, :1

PF_TEMPLATE	equ	mask TEMPLATE_MODE	; wants template mode
PF_HEADERS	equ	mask HEADERS_MODE	; wants headers displayed
PF_ALWAYS_TODAY	equ	mask START_ALWAYS_TODAY	; always start with today
PF_DATE_CHANGE	equ	mask DATE_CHANGE	; go to today on date change
PF_GLOBAL	equ	mask AFFECTS_GLOBAL	; affects global flags
PF_SINGLE	equ	mask AFFECTS_SINGLE	; affects single day
PF_RANGE	equ	mask AFFECTS_RANGE	; affects range of days

endif						; if	_TODO

if SUPPORT_ONE_LINE_PRINT

DayPlanPrintFlags	record 
    :6
    DPPF_ONE_LINE_EVENT:1			; all events are one-line
    DPPF_FORCE_HEADERS:1			; force headers to be displayed
DayPlanPrintFlags	end

else

DayPlanPrintFlags	record
    :7
    DPPF_FORCE_HEADERS:1			; force headers to be displayed
DayPlanPrintFlags	end

endif

DayPlanInkFlags		record
    :7
    DPIF_INK_DIRTY:1				; ink is currently dirty
DayPlanInkFlags		end


;-----------------------------------------------------------------------------
; 			DayEvent Instance structures
;-----------------------------------------------------------------------------

DayEventInfoFlags	record	MOUSE_GRAB:1, DE_select:1, FEATURES:1, \
				VIRGIN:1, TIME_DIRTY:1, TEXT_DIRTY:1, \
				NO_LOST_FOCUS:1, :1
DE_GRAB			equ mask MOUSE_GRAB	; is the mouse grabbed ?
DE_SELECT		equ mask DE_select	; are we the current DayEvent
DE_FEATURES		equ mask FEATURES	; want alarm features ?
DE_VIRGIN		equ mask VIRGIN		; a new DayEvent
DE_TIME_DIRTY		equ mask TIME_DIRTY	; the time is dirty
DE_TEXT_DIRTY		equ mask TEXT_DIRTY	; the text is dirty
DE_IGNORE_LOST_FOCUS	equ mask NO_LOST_FOCUS	; ignore next lost exclusive

MAX_TIME_FIELD_LENGTH	equ	64		; plenty of room
MAX_TEXT_FIELD_LENGTH	equ	8192		; 8K

DayEventStateChange			etype	word, 1
    DESC_NORMAL_TO_VIRGIN		enum	DayEventStateChange
    DESC_NORMAL_TO_REPEAT		enum	DayEventStateChange
    DESC_REPEAT_OR_VIRGIN_TO_NORMAL	enum	DayEventStateChange


if	HANDLE_MAILBOX_MSG
DayEventBookingFlags	record
	; Why a word record? 
	; Because a byte record would have confused swat anyway.
	:13
	DEBF_CANCEL_ALL_BOOKING:1	; event to be deleted soon, so send 
					;  SMS delete notice.
	DEBF_NON_TIME_CHANGE:1		; event text/alarm changed; need to 
					;  send SMS update.
	DEBF_TIME_CHANGED:1		; event time changed.
DayEventBookingFlags	end
endif

;-----------------------------------------------------------------------------
; 			DOWSpinClass Instance structures
;-----------------------------------------------------------------------------


;-----------------------------------------------------------------------------
; 			MyPrintClass Instance structures
;-----------------------------------------------------------------------------

MyPrintOutputType	etype byte, 0
    MPOT_GR_MONTH	enum	MyPrintOutputType
    MPOT_GR_YEAR	enum	MyPrintOutputType
    MPOT_EVENTS		enum	MyPrintOutputType

MyPrintAttrs		record
    :4
    MPA_INITIALIZED:1
    MPA_INCLUDE_EVENTS:1
    MPA_OUTPUT_TYPE	MyPrintOutputType:2
MyPrintAttrs		end


;-----------------------------------------------------------------------------
; 			PreferenceClass Instance structures
;-----------------------------------------------------------------------------

PrefReadWriteStruct	struct
    PRWS_key		nptr.char		; pointer to key string
    PRWS_lower		sword			; lower bounds
    PRWS_upper		sword			; upper bounds
    PRWS_offset		word			; offset into instance data  
PrefReadWriteStruct	ends


;-----------------------------------------------------------------------------
; 			Name equivalence definitions
;-----------------------------------------------------------------------------

Month1			equ	offset Interface:MonthObject1
Month2			equ	offset Interface:MonthObject2
Month3			equ	offset Interface:MonthObject3
Month4			equ	offset Interface:MonthObject4
Month5			equ	offset Interface:MonthObject5
Month6			equ	offset Interface:MonthObject6
Month7			equ	offset Interface:MonthObject7
Month8			equ	offset Interface:MonthObject8
Month9			equ	offset Interface:MonthObject9
Month10			equ	offset Interface:MonthObject10
Month11			equ	offset Interface:MonthObject11
Month12			equ	offset Interface:MonthObject12


;-----------------------------------------------------------------------------
;	   		Local variable structures
;-----------------------------------------------------------------------------

;
; ** WARNING **
;
; There are codes that depend on the order of the fields. So, please do not
; change the order of the fields if possible. If the order needs to be
; modified, please check with every line of code that accesses these fields
;
RangeStruct		struct
    RS_startDay		byte	(?)
    RS_startMonth	byte	(?)
    RS_startYear	word	(?)
    RS_endDay		byte	(?)
    RS_endMonth		byte	(?)
    RS_endYear		word	(?)
    even
RangeStruct		ends

EventRangeStruct	struct
    ERS_startDay	byte	(?)		; starting day/month/year
    ERS_startMonth	byte	(?)
    ERS_startYear	word	(?)
    ERS_endDay		byte	(?)		; ending day/month/year
    ERS_endMonth	byte	(?)
    ERS_endYear		word	(?)
    ERS_object		optr	(?)		; OD to send method to
    ERS_message		word	(?)		; method to send
    ERS_curMonthDay	word	(?)		; contains current month/day
    ERS_nextOffset	word	(?)		; offset to next occuppied day
    even
EventRangeStruct	ends

PrintRangeStruct	struct
    PRS_range		RangeStruct <>		; range of days to print
    PRS_width		word	(?)		; width to print to
    PRS_height		word	(?)		; height to prin to
    PRS_gstate		hptr			; gstate handle to print with
    PRS_pointSize	word	(?)		; size to use for printing
    PRS_oneLineHeight	word	(?)		; height of one line of text
    PRS_specialValue	word	(?)		; 1 -> from the month
						; 2 -> normal event printing
    PRS_currentSizeObj	word	(?)		; handle to current size object
    PRS_sizeTextObj	word	(?)		; handle to original object
    PRS_oneLineText	word	(?)		; original text height
    PRS_timeWidth	word	(?)		; original time width
    PRS_timeOffset	word	(?)		; original time offset
PrintRangeStruct	ends

MonthPrintRangeStruct	struct
    MPRS_struct		PrintRangeStruct <>
    MPRS_dateHeight	word	(?)
    MPRS_dateWidth	word	(?)
    MPRS_newXOffset	word	(?)
    MPRS_newYOffset	word	(?)
MonthPrintRangeStruct	ends


PositionStruct		struct
    PS_totalWidth	word	(?)
    PS_timeHeight	word	(?)
    PS_timeLeft		word	(?)
    PS_flags		EventInfoFlags
    PS_hour		byte	(?)
PositionStruct		ends

PrintPositionStruct	struct
    PPS_posStruct	PositionStruct <>
    PPS_pageHeight	word	(?)
    PPS_numPages	word	(?)
    PPS_nextOffset	word	(?)
    PPS_singlePage	byte	(?)
    even
PrintPositionStruct	ends


ForceSelectArgs		struct
    FSA_message		word	(?)		; method sent to selected event
    FSA_dataCX		word	(?)		; data sent with the method...
    FSA_dataDX		word	(?)
    FSA_dataBP		word	(?)
    FSA_callBack	byte	(?)		; always pass zero initially!!
    even
ForceSelectArgs		ends

if	CALAPI

;
; Specify the date and time range. 
;
; ** WARNING **
;
; There are codes that depend on the order of the fields. So, please do not
; change the order of the fields if possible. If the order needs to be
; modified, please check with every line of code that accesses these fields
;
DateTimeRangeStruct		struct
	DTRS_dateRange		RangeStruct	; start date and end date
	DTRS_startMin		byte		; start time minute
	DTRS_startHour		byte		; start time hour
	DTRS_endMin		byte		; end time minute
	DTRS_endHour		byte		; end time hour
	even
DateTimeRangeStruct		ends

;
; Params to pass for enumerating events over a range of time period. The
; parameters passed to callback and values returned vary. There is no
; restriction on it. 
;
EventEnumParamStruct		struct
	EEPS_callbackObj	optr		; callback object
	EEPS_callbackMsg	word		; callback message
	EEPS_range		DateTimeRangeStruct
						; time range to enumerate
	even
EventEnumParamStruct		ends

endif	; CALAPI

;-----------------------------------------------------------------------------
;			     Bitmap Constants
;-----------------------------------------------------------------------------

ICON_WIDTH		equ	13
ICON_HEIGHT		equ	11

ICON_Y_OFFSET		equ	2

EVENT_TB_MARGIN		equ	1
EVENT_LR_MARGIN		equ	2

EVENT_TIME_OFFSET	equ	ICON_WIDTH + EVENT_LR_MARGIN

;-----------------------------------------------------------------------------
;			     Enumerated Values
;-----------------------------------------------------------------------------

SummonsVal 		etype word, 0
    NO_EVENT_OK		enum SummonsVal
    NO_EVENT_CANCEL	enum SummonsVal
	
CalErrorValue			etype word, 0, 4
CAL_ERROR_BAD_TIME		enum CalErrorValue
CAL_ERROR_BAD_DATE		enum CalErrorValue
CAL_ERROR_REPEAT_WEEKLY		enum CalErrorValue
CAL_ERROR_REPEAT_DATE_Y		enum CalErrorValue
CAL_ERROR_REPEAT_NOTEXT		enum CalErrorValue
CAL_ERROR_END_OF_DB		enum CalErrorValue
CAL_ERROR_SEARCH_DONE		enum CalErrorValue
CAL_ERROR_NO_MATCH		enum CalErrorValue
CAL_ERROR_NO_GEODEX		enum CalErrorValue
CAL_ERROR_NO_FILE		enum CalErrorValue
CAL_ERROR_BAD_YEAR		enum CalErrorValue
CAL_ERROR_START_GTR_END		enum CalErrorValue
CAL_ERROR_GETTING_LARGE		enum CalErrorValue
CAL_ERROR_TOO_LARGE		enum CalErrorValue
CAL_ERROR_DOC_TOO_LARGE		enum CalErrorValue
CAL_ERROR_TIME_REVERTED		enum CalErrorValue
CAL_ERROR_REPEAT_DATES		enum CalErrorValue
CAL_ERROR_ET_TOO_BIG		enum CalErrorValue
CAL_ERROR_EVENTS_WONT_FIT	enum CalErrorValue
CAL_ERROR_YEAR_TOO_SMALL	enum CalErrorValue
if PZ_PCGEOS ; Pizza
CAL_ERROR_H_FILE_OPEN		enum CalErrorValue
CAL_ERROR_H_FILE_READ		enum CalErrorValue
CAL_ERROR_H_DATE_ORDER		enum CalErrorValue
endif
if END_TIMES
CAL_ERROR_BAD_END_TIME		enum CalErrorValue
CAL_ERROR_EARLY_END_TIME	enum CalErrorValue
CAL_ERROR_BAD_START_TIME	enum CalErrorValue
CAL_ERROR_LATE_START_TIME	enum CalErrorValue
endif

DON_NOTIFY	= ((CDT_NOTIFICATION shl offset CDBF_DIALOG_TYPE) or \
		  (GIT_NOTIFICATION shl offset CDBF_INTERACTION_TYPE))

DON_WARNING	= ((CDT_WARNING shl offset CDBF_DIALOG_TYPE) or \
		  (GIT_NOTIFICATION shl offset CDBF_INTERACTION_TYPE))

DON_ERROR	= ((CDT_ERROR shl offset CDBF_DIALOG_TYPE) or \
		  (GIT_NOTIFICATION shl offset CDBF_INTERACTION_TYPE))


UndoActionValue		etype word, 0, 2
    UNDO_DELETE_EVENT	enum UndoActionValue
    UNDO_DELETE_VIRGIN	enum UndoActionValue
    UNDO_INSERT_EVENT	enum UndoActionValue
    UNDO_STATE_CHANGE	enum UndoActionValue
    UNDO_STATE_RESTORE	enum UndoActionValue
    UNDO_REVERT_TEXT	enum UndoActionValue
    UNDO_REVERT_TIME	enum UndoActionValue


if	HANDLE_MAILBOX_MSG

;------------------------------------------------------------------------------
;		Mailbox related structs and consts
;------------------------------------------------------------------------------

;
; Define whether the calendar password is supplied / valid.
;
CalendarApptPasswdBool	etype	byte
    CAPB_PASSWORD_VALID		enum CalendarApptPasswdBool, -1
    CAPB_NO_PASSWORD		enum CalendarApptPasswdBool, 0
    CAPB_PASSWORD_INVALID	enum CalendarApptPasswdBool, 1
    CAPB_REPLY_OR_UPDATE_HAS_PASSWORD enum CalendarApptPasswdBool, 2

;
; To tell whether the user accepts or denies the appointment.
;
CalendarEventReplyStatus etype	byte
    CERS_NO_REPLY_YET		enum CalendarEventReplyStatus, 0
    CERS_EVENT_ACCEPTED		enum CalendarEventReplyStatus, IC_YES
    CERS_EVENT_DENIED		enum CalendarEventReplyStatus, IC_NO

;
; To tell which format of SMS reply we should send.
;
CalendarReplySMSFormat etype	byte
    CRSMSF_PLAIN_READABLE	enum CalendarReplySMSFormat, -1
    CRSMSF_VERSIT		enum CalendarReplySMSFormat, 0

;
; What the status of appointment being received.
;
CalendarApptStatusType		etype word, 0, 2
    CAST_NEED_ACTIONS		enum CalendarApptStatusType
    CAST_ACCEPTED		enum CalendarApptStatusType
    CAST_DECLINED		enum CalendarApptStatusType
    CAST_DELETED		enum CalendarApptStatusType
    CAST_CHANGED		enum CalendarApptStatusType
    CAST_TEXT_CHANGED		enum CalendarApptStatusType

VERSIT_UID_STRING_MAX_LENGTH		equ	50
;
; We write at most 50 chars for versit UID string.
;

CALENDAR_BOOK_SMS_PREFIX_MAX_LENGTH	equ	15
;
; A reasonable max size for SMS prefix  ("//SCK0909 \r")
;

DISPLAYED_SENDER_NAME_MAX_LENGTH	equ	25
;
; Max length of sender name that is displayed on screen. Must be at
; least as long as SMS number. (MAX_ADDRESS_SIZE)
;
CheckHack<DISPLAYED_SENDER_NAME_MAX_LENGTH ge MAX_ADDRESS_SIZE>

SMSPrefixType	TYPE CALENDAR_BOOK_SMS_PREFIX_MAX_LENGTH+1 dup (TCHAR)

SMSNumberType	TYPE MAX_ADDRESS_SIZE+1 dup (TCHAR)

SenderNameType	TYPE DISPLAYED_SENDER_NAME_MAX_LENGTH+1 dup (TCHAR)

;
; Initialize the fields in AllocateAndInitMBAppointment.
;
CalendarApptEscapeType	struct
    CAET_passwdStat	CalendarApptPasswdBool
    CAET_smsReplyPrfx	SMSPrefixType
    CAET_userReply	CalendarEventReplyStatus
    CAET_replyFormat	CalendarReplySMSFormat
    CAET_senderAddress	SMSNumberType
    CAET_senderName	SenderNameType
    CAET_senderEventID	dword			; ID of sender's event in
						;  sender's device
    CAET_senderBookID	word			; Book ID of sender's event
    CAET_createdEventID	dword			; ID of event created on
						;  our device from SMS
    CAET_reserveWholeDay word			; Reserve X days
    CAET_versitVMFile	word			; versit text vm file
    CAET_versitBlock	word			; versit text block handle
    CAET_apptStatus	CalendarApptStatusType	; Status of incoming appt
CalendarApptEscapeType	ends

CALENDAR_REPEAT_INFO_OFFSET		equ	\
	(size MBAppointment + MAX_TEXT_FIELD_LENGTH*size TCHAR)

CALENDAR_ESCAPE_TABLE_OFFSET		equ	\
	(CALENDAR_REPEAT_INFO_OFFSET + size MBRepeatInfo)

CALENDAR_ESCAPE_INFO_OFFSET		equ	\
	(CALENDAR_ESCAPE_TABLE_OFFSET + size MBEscapeTable)

CALENDAR_ESCAPE_DATA_OFFSET		equ	\
	(CALENDAR_ESCAPE_INFO_OFFSET + size MBEscapeInfo)

BookingEventType		etype word
    BET_NORMAL_EVENT		enum BookingEventType
    BET_FORCED_EVENT		enum BookingEventType

;
; The name of recipient may be 100 chars long, but we need the name only
; for UI purpose, so 20 chars are enough.
;
SENT_TO_NAME_FIELD_MAX_LEN		equ	20
SENT_TO_NAME_FIELD_MAX_LEN_WITH_NULL	equ	(SENT_TO_NAME_FIELD_MAX_LEN+1)

SENT_TO_DATE_TIME_STR_MAX_LEN		equ	25

;
; Sent-to view column widths.
;
SENT_TO_VIEW_NUM_OF_COLUMN		equ	3

SENT_TO_NAME_NUMBER_WIDTH		equ	20
SENT_TO_NAME_NUMBER_PIXEL		equ	126
SENT_TO_DATE_TIME_WIDTH			equ	20
SENT_TO_DATE_TIME_PIXEL			equ	252
SENT_TO_STATUS_WIDTH			equ	17
SENT_TO_STATUS_PIXEL			equ	354
SENT_TO_ITEM_HEIGHT			equ	19
NUM_SENT_TO_ITEM_ON_SCREEN		equ	7

SENT_TO_LIST_FONT			equ	VTDF_RESPONDER
SENT_TO_LIST_FONT_SIZE			equ	FOAM_SMALL_FONT_SIZE
SENT_TO_LIST_TITLE_FONT			equ	VTDF_RESPONDER
SENT_TO_LIST_TITLE_FONT_SIZE		equ	FOAM_SMALL_FONT_SIZE
SENT_TO_TITLE_SEPARATION		equ	1	
					; Separation between the end of the
					;  title text and the start of the
					;  corner
SENT_TO_TITLE_CORNER_LEN		equ	3	
					; Length of the horizontal leg of
					;  the corner at the top of the right
					;  edge of each field

EventRecipientStatus		etype	word, 0, 2
    ERS_ILLEGAL			enum	EventRecipientStatus
    ;-------------------------------------------------------
    ; These below are for "request"
    ERS_ACCEPTED		enum	EventRecipientStatus
    ERS_DISCARDED		enum	EventRecipientStatus
    ERS_NO_REPLY		enum	EventRecipientStatus
    ;-------------------------------------------------------
    ; These below are for "reservation"
    ERS_FORCED			enum	EventRecipientStatus
    ERS_FORCED_AND_ACCEPTED	enum	EventRecipientStatus

    ERS_FOR_RESERVATION		equ	ERS_FORCED

;
; The structure as a chunk array header to store the sender
; information.
;
EventSentToHeader	struct
    ESTH_chunkArrayHd	ChunkArrayHeader	; chunk array header
    ESTH_senderSMS	SMSNumberType
						; SMS number of sender
    ESTH_senderEventID	dword			; ID of sender's event in
						;  sender's device
    ESTH_senderBookID	word			; Book ID of sender's event
EventSentToHeader	ends

;
; The structure used to store one "Sent-to" information.
;
EventSentToStruct	struct
    ESTS_bookID		word			; the # that identifies the
						;  current appoint from others 
						;  (for the same event)
    ESTS_yearSent	word			; the date the appt is sent
    ESTS_monthSent	byte
    ESTS_daySent	byte
    ESTS_hourSent	byte			; the time the appt is sent
    ESTS_minuteSent	byte
    ESTS_name		TCHAR SENT_TO_NAME_FIELD_MAX_LEN_WITH_NULL dup (?)
						; name of recipient
    ESTS_smsNum		TCHAR MAX_NUMBER_FIELD_DATA_LEN+1 dup (?)
						; SMS number of recipient
    ESTS_status		EventRecipientStatus	; recipient's status
    ESTS_remoteEventID	dword			; ID of created event in 
						;  recipient's device
EventSentToStruct	ends

endif	; HANDLE_MAILBOX_MSG


if PZ_PCGEOS ; Pizza
;------------------------------------------------------------------------------
;		Set holiday Constants and Structure Definitions
;------------------------------------------------------------------------------
RHFlags		record			; Repeat Holiday Flag
    RHF_Unused:1,			; matches order in .UI file
    RHF_Sunday:1,
    RHF_Monday:1
    RHF_Tuesday:1,
    RHF_Wednesday:1,
    RHF_Thursday:1,
    RHF_Friday:1,
    RHF_Saturday:1,
RHFlags		end

RHF_SUNDAY		equ	mask RHF_Sunday
RHF_MONDAY		equ	mask RHF_Monday
RHF_TUESDAY		equ	mask RHF_Tuesday
RHF_WEDNESDAY		equ	mask RHF_Wednesday
RHF_THURSDAY		equ	mask RHF_Thursday
RHF_FRIDAY		equ	mask RHF_Friday
RHF_SATURDAY		equ	mask RHF_Saturday

SH_DF_NOTCHANGED	equ	0h		; not changed Holiday data
SH_DF_CHANGED		equ	1h		; changed Holiday data
SH_DF_INDETERMINATE	equ	2h		; indeterminate Holiday data
SH_SF_USABLE		equ	1h		; SetHoliday dialog state


; Need for reading / writing holiday file (ASCII)
;
DFF_COMMENT	= '/'			; data file flag  comment
DFF_ZERO	= '0'			; data file flag  0
DFF_9		= '9'			; data file flag  9
DFF_SZ		= 'z'			; data file flag  z
DFF_SPACE	= ' '			; data file flag  space
DFF_TAB		= 09h			; data file flag  tab
DFF_RETURN1	= 0dh			; data file flag  return
DFF_RETURN2	= 0ah

; Structure Definitions
;
HolidayMonthCell	struc
	HMC_month	byte		; number for a month
	HMC_date_low	word		; date mask ( 1-15 )
	HMC_date_high	word		; date mask ( 16-31 )
HolidayMonthCell	ends

HolidayYearCell	struc
	HYC_year	word		; number for a year
	HYC_chunk	word		; ChunkArray for HolidayMonthCell
HolidayYearCell	ends

endif


;-----------------------------------------------------------------------------
;                       Class & Method Declarations
;-----------------------------------------------------------------------------

include	calendar.def				; include the class definitions

GeoPlannerClass	class	CalendarClass

MSG_CALENDAR_KILL_REMINDER message MetaApplicationMessages
;
; Synopsis:	Sent to items on the ActiveList of my application to
;		remove reminders holding soon-to-be-altered EventStructs.
;
; Pass:		CX:DX	= EventStruct group:item
;			- or -
;		CX	= -1 to always destroy reminder
;		DX	= -1 to disable snooze trigger
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_RESET_REMINDER message MetaApplicationMessages
;
; Synopsis:	Sent to items on the ActiveList of my application to
;		force reminders to reset their time & date strings.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_SEARCH_GEODEX					message 
;
; Synopsis:	Search the Rolodex for the currently selected text
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_SET_DATE						message 
;
; Synopsis:	Set the current date & time
;
; Pass:		BP	= Year
;		DH	= Month
;		DL	= Day
;		CH	= Hour
;		CL	= Minute
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_CLOCK_TICK						message 
;
; Synopsis:	Note that another minute has passed, and update all
;		appropriate alarms & screen displays
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_DISPLAY_ERROR					message 
;
; Synopsis:	Display a modal error dialog box to the user
;
; Pass:		BP	= CalErrorValue
;		CX:DX	= Data for string argument #1 (may not be needed)
;		BX:SI	= Data for string argument #2 (may not be needed)
; Returns:	AX	= InteractionCommand from error box
; Destroys:	Nothing
;

MSG_CALENDAR_UNDO						message 
;
; Synopsis:	Undo the last undo-able action performed by the user
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;
	
MSG_CALENDAR_UPDATE_EVENT					message 
;
; Synopsis:	Create or update an EventStruct
;
; Pass:		CL	= DataBaseUpdateFlags
;		SS:BP	= DayEventInstance structure
; Returns:	CX:DX	= New EventStruct group:item, if appropriate
; Destroys:	AX, BP
;

MSG_CALENDAR_DELETE_EVENT					message 
;
; Synopsis:	Delete an EventStruct
;
; Pass:		CX:DX	= EventStruct group:item
;		if CX = 0
;			BP	= Chunk handle of DayEvent object holding data
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_ALARM_DESTROY					message 
;
; Synopsis:	Destroy an alarm reminder
;
; Pass:		CX:DX	= OD of alarm reminder dialog box to destroy
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_ALARM_SNOOZE					message 
;
; Synopsis:	Tell an alarm to snooze
;
; Pass:		CX:DX	= EventStruct group:item
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

if	_TODO
MSG_CALENDAR_EVENT_ALARM					message
;
; Synopsis:	Handles when alarm goes off.
;
; Pass:		bp	= flag (non-zero if alarm time passed)
; Returns:	Nothing
; Destroys:	nothing
;

MSG_CALENDAR_ALARM_TODO						message
;
; Tells the calendar to put the alarmed event into the To Do list
;
; Context:	An alarm event has just gone off and the user is given
;		the choice of putting this event in the To Do list.  
; Source:	Reminder object
; Destination:  Calendar (process thread)
; Interception: no
;
; Pass:		cx:dx	= group:item of alarm event
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,si,di,bp - destroyed
;

MSG_CALENDAR_MONTHLY_WAKE_UP					message 
;
; Synopsis:	Wake up at the beginning of each month in order
; 		make sure we register alarms for repeat events.
; 		We must do this because when we search for 
; 		repeat event alarms, we only search until the
;		end of the month.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_CALENDAR_WRITE_BACK_FILE					message
;
; Synopsis:	Call VMUpdate when the DayView or To-do list are
; 		in order to make sure the data is saved.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	ax
;

endif	; if _TODO

MSG_CALENDAR_QUICK						message
;
; Synopsis:	Quickly switch to a new time display
;
; Pass:		CX	= QuickEnum
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DB_GET_MONTH_MAP						message 
;
; Synopsis:	Get the bitfield corresponding to the days that have
;		events for the passed month
;
; Pass:		BP	= Year
;		DH	= Month
;		CX	= Chunk handle of MonthClass object to repond to
; Returns:	CX:DX	= MonthMap (CX[15] = day 31, DX[0] = day 0)
; Destroys:	Nothing
;

MSG_CALENDAR_TIME_CHANGE					message 
;
; Synopsis:	The system time has changed, so reset the next alarm pointer
;		and then update as one would for any clock tick.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_GET_EVENT_MONIKER					message 
;
; Return a moniker for the requested dynamic list repeat event entry
;
; Pass:		CX:DX	= Dynamic list OD
;		BP	= Position of the item requested
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_SELECT_EVENT						message 
;
; Select a new repeating event from the dynamic list
;
; Pass:		CX	= Position of selected item
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_NEW_EVENT						message 
;
; Create a new repeating event, by allowing the user to select the frequency,
; message, time, etc. attributes for the event.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_CHANGE_EVENT						message 
;
; Alter the definition of a current repeating event, by allowing the user to
; re-select the attributes of a repeating event.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_DELETE_EVENT						message 
;
; Delete the current repeating event
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_SET_FREQUENCY					message 
;
; Set the frequency for a repeating event
;
; Pass:		CX	= RepeatEventType
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_SET_SPECIFY						message 
;
; Specify some more information about the frequency of a repeating event,
; either defined by day of week, or by specific date.
;
; Pass		CX	= 0 (date) or 1 (DOW)
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_SET_DATE_EXCL					message 
;
; Set the type of date frquency the user has selected, either by a true
; day in the month (the 13th) or the last day of the month. Disable/enable
; UI gadgetry based upon this choice.
;
; Pass:		CX	= MSG_GEN_SET_[NOT_]ENABLED
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_SET_DURATION_EXCL					message 
;
; Set the duration selection made by the user, either to have a continuous
; repeating event (never ends), or a specific ending date. Disable/enable
; UI gadgetry based upon this choice.
;
; Pass:		CX	= MSG_GEN_SET_[NOT_]ENABLED
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP

MSG_REPEAT_ADD_NOW						message 
;
; Add a new repeating event, as the user has completed his/her definition.
; Verify that all selections made are valid.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP

MSG_REPEAT_CHANGE_NOW						message 
;
; Change the current repeating event to be defined by the new selections made
; by the user. Verify that all selections are valid.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_REPEAT_CANCEL						message 
;
; Cancel the current repeat event editing by bringing the dialog box down.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_CALENDAR_DISPATCH_EVENT					message
;
; Send the event to the process.  This routine can be used to delay events
; that a UserDoDialog would let pass through
;
; Pass:		^hcx	= event
;		  dx	= MessgeFlags ro pass to ObjDispatchMessage
; Returns:	Nothing
; Destroys:	Nothing


if	UNIQUE_EVENT_ID
MSG_CALENDAR_GET_NEXT_EVENT_ID_LOOP_BACK			message
;
; Synopsis:	Same as MSG_CALENDAR_GET_NEXT_EVENT_ID, but this is 
;		force queued to process because the system file is 
;		not valid the first time.
;
; Pass:		^lcx:dx	= recipient object,
;			  pass cx == 0 if none
;		bp	= message which the calendar app would call on
;			  the recipient object with.
;			prototype of reply message:
;			cx:dx	= next event ID
; Return:	cx:dx	= next event ID
; Destroy:	ax, bp
;

MSG_CALENDAR_SET_NEXT_EVENT_ID_LOOP_BACK			message
;
; Synopsis:	Same as MSG_CALENDAR_SET_NEXT_EVENT_ID, but this is 
;		force queued to process because the system file is 
;		not valid the first time.
;
; Pass:		cx:dx	= next event ID
; Return:	nothing
; Destroy:	nothing
;

endif

GeoPlannerClass		endc

YearClass	class	GenGadgetClass, master
	YI_curYear		word	(?)	; year of selected month
	YI_curMonth		byte	(?)	; selected month
	YI_changeYear		word	(?)	; the year to change to
	YI_changeMonth		byte	(?)	; the month to change to

	YI_viewWidth		word	(?)	; width of view
	YI_viewHeight		word	(?)	; height of the view
	YI_minWidth		word	(?)	; minimum width of the year
	YI_minHeight		word	(?)	; minimum height of the year

	YI_minMonthWidth	word	(?)
	YI_minMonthHeight	word	(?)
	YI_maxMonthWidth	word	(?)
	YI_maxMonthHeight	word	(?)
	YI_monthWidth		word	(?)	; width of the month(s)
	YI_monthHeight		word	(?)	; height of the month(s)
	YI_smallFontSize	byte	(?)	; the small font size
	YI_largeFontSize	byte	(?)	; the large font size

	YI_startDay		byte	(?)	; day of 1st date (select)
	YI_startMonth		byte	(?)	; month of same
	YI_startYear		word	(?)	; year of same
	YI_endDay		byte	(?)	; day of last date (select)
	YI_endMonth		byte	(?)	; month of same
	YI_endYear		word	(?)	; year of same

	YI_oldStartDay		byte	(?)	; day of 1st date (old)
	YI_oldStartMonth	byte	(?)	; month of same
	YI_oldStartYear		word	(?)	; year of same
	YI_oldEndDay		byte	(?)	; day of last date (old)
	YI_oldEndMonth		byte	(?)	; month of same
	YI_oldEndYear		word	(?)	; year of same

	YI_printYear		word	(?)	; year to print
	YI_printMonth		byte	(?)	; month to print
	YI_printMonthWidth	word	(?)
	YI_printMonthHeight	word	(?)
	YI_printFontSizes	word	(?)

	YI_flags		YearInfoFlags	; see above definitions

MSG_YEAR_INIT							message
;
; Initalize the year object
;
; Pass:		BP	= Year
;		DH	= Month
;		DL	= Day
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_VIEW_TODAY						message
;
; Force today's date to be seen on on the year view & the event view
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_CHANGE_MONTH_MAP					message
;
; Tell the year object that events have been added or removed from a date,
; so that the event indications drawn on a month may be updated
;
; Pass:		BP	= Year
;		DH	= Month
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_CHANGE_YEAR						message
;
; Request to display a new year to the user.
;
; Pass:		DX	= Year
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_CHANGE_NOW						message
;
; Actually display a new year, or month within a year.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


MSG_YEAR_SET_MONTH_AND_YEAR					message
;
; Set the month & year to display
;
; Pass:		DX	= Year (= 0 to not change it)
;		CH	= Month (= 0 to not change it)
; Returns:	Nothing
; Destroys:	AX, BP
;

MSG_YEAR_GET_MONTH_AND_YEAR					message
;
; Gets the current month & year displayed
;
; Pass:		DX	= Year
;		CH	= Month
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_YEAR_SET_MONTH_SIZE						message
;
; Sets the size of month to be displayed. One month size will cause each
; month to completely fill the year view, while the small month size will
; cause each month to be as small as possible.
;
; Pass:		CX	= YearInfoFlags
;				YI_ONE_MONTH_SIZE
;				YI_SMALL_MONTH_SIZE
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_COMPLETE_SELECTION					message
;
; Complete the selection of a range of dates by first verifing the
; selection and then requesting DayPlan object to display the range.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_SET_SELECTION						message
;
; Set the selection of dates to be highlighted
;
; Pass:		SS:BP	= RangeStruct
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_YEAR_GET_SELECTION						message
;
; Returns the selected range of dates in the year
;
; Pass:		DX:BP	= RangeStruct to fill
;		CX	= YearRangeType
; Returns:	DX:BP	= RangeStruct (filled)
;		CX	= # of days in the range
; Destroys:	AX
;

MSG_YEAR_SWITCH_TO_MONTH					message 
;
; Sent by the month list object, it instructs the year to
; display a new month.
;
; Pass:		DX	= Month (1-based)
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


YearClass	endc


MonthClass	class GenGadgetClass, master
	MI_month	byte	(?)		; displayed month
	MI_year		word	(?)		; displayed year

	MI_fontID	FontID			; font to use
	MI_datesFont	byte	(?)		; size of dates font (points)
	MI_titleFont	byte	(?)		; size of title font (points)

	MI_firstDayPos	byte	(?)		; first day position of month
	MI_numberRows	byte	(?)		; number of rows for this month
	MI_daysThisMonth byte	(?)		; number of days this month
	MI_lastDayGrid	byte	(?)		; used when drawing the dates
	MI_offsetDOW	word	(?)		; Y offset to days of week
	MI_offsetGrid	word	(?)		; Y offset to start of grid
	MI_dateWidth	word	(?)		; width of a single date
	MI_dateHeight	word	(?)		; height of a single date
	MI_leftMargin	word	(?)		; left margin to pos of month
	MI_monthRight	word	(?)		; right pos of actual month
	MI_monthBottom	word	(?)		; bottom pos of actual month
						; (actually, this is an offset
						; from MI_offsetGrid - sorry)
	MI_flags	MonthInfoFlags		; see above definitions
	MI_monthMap	dword	(?)		; 32 bit map of days
if DBCS_PCGEOS
	MI_dateString	wchar	3 dup (?)	; date title string
	MI_titleString	wchar	32 dup (?)	; window title string
else
	MI_dateString	byte	3 dup (?)	; date title string
	MI_titleString	byte	32 dup (?)	; window title string
endif
if PZ_PCGEOS ; Pizza
	MI_holidayWidth	word	(?)		; width of a holiday mark
	MI_holidayHeight word	(?)		; height of a holiday mark
endif
if	HAS_MIN_WEEK_DAY_WIDTH
	MI_weekdayWidth word	(?)		; width of weekday column
endif

MSG_MONTH_SET_MONTH						message	
;
; Set the month, year & font sizes to be displayed
;
; Pass:		BP	= Year
;		DH	= Month
;		CH	= Point size for month title
;		CL	= Point size for month days & dates
; Returns:	Nothing
; Destroys:	AX, DL
;

MSG_MONTH_SET_STATE						message
;
; Set/clear the MonthInfoFlags
;
; Pass:		CL	= MonthInfoFlags to clear
;		CH	= MonthInfoFlags to set
; Returns:	Nothing
; Destroys:	Nothing
;

if CLAIM_UNUSED_MONTH_SPACE
MSG_MONTH_GET_STATE						message
;
; Return the MonthInfoFlags
;
; Pass:		Nothing
; Returns:	CL	= MonthInfoFlags
; Destroys:	Nothing
;
endif

MSG_MONTH_SET_FONT						message
;
; Setr the font to be used when drawing the month
;
; Pass:		CX	= FontID to use
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_MONTH_SET_MONTH_MAP						message
;
; Set the MonthMap bitfield for this month
;
; Pass:		CX:DX	= MonthMap
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


MSG_MONTH_SELECT_DRAW						message
;
; Draw the selected area in a month
;
; Pass:		BP	= GState handle
;		CL	= First day
;		CH	= Last day
; Returns:	Nothing
; Destroys:	AX, CX, DX
;

MSG_MONTH_DRAW_EVENTS						message
;
; Draw the events inside of the month
;
; Pass:		BP	= GState handle
;		CX:DX	= OD of the DayPlanClass object
; Returns:	Nothing
; Destroys:	AX, BP
;

MSG_MONTH_INVALIDATE_TITLE					message
;
; Invalidate the title of a month, so that it will be redrawn. Most
; useful for handling cases where Year view is being selected and
; unselected. Note that the view origin is passed so that any calls
; to WinInvalRegion might actually contain the correct coordinates.
;
; Pass:		(CX,DX)	= View origin
;		BP	= Window handle
; Returns:	Nothing
; Destroys:	AX, DX, BP

MonthClass	endc

;------------------------------------------------------------------------------
;		Week View class structures and definitions
;------------------------------------------------------------------------------


;------------------------------------------------------------------------------
;		Day plan class structure and definitions
;------------------------------------------------------------------------------

		
DayPlanClass	class VisContentClass, master
	DPI_eventTable	nptr			; chunk handle to ETE table
	DPI_bufferTable nptr			; chunk handle to BTE table
	DPI_rangeLength	word	(?)		; # of days in displayed range
	DPI_newRangeOff	word	(?)		; running total of day offsets
	DPI_startDay	byte	(?)		; start day of display
	DPI_startMonth	byte	(?)		; start month of display 
	DPI_startYear	word	(?)		; start year of display
	DPI_endDay	byte	(?)		; end day of display
	DPI_endMonth	byte	(?)		; end month of display
	DPI_endYear	word	(?)		; end year of display

	DPI_flags	DayPlanInfoFlags
	DPI_printFlags	DayPlanPrintFlags
	DPI_textHeight	word	(?)		; height of single text line
	DPI_viewWidth	word	(?)		; width of the view
	DPI_viewHeight	word	(?)		; height of the view
	DPI_docOffset	word	(?)		; visible document offset
	DPI_docHeight	word	(?)		; the document height
	DPI_selectEvent	nptr			; the current select event

	DPI_beginMinute	byte	(?)		;
	DPI_beginHour	byte	(?)		; time to begin template
	DPI_endMinute	byte	(?)		;
	DPI_endHour	byte	(?)		; time to end template
	DPI_interval	byte	(?)		; minutes between events (< 60)
	DPI_prefFlags	PreferenceFlags		; preference state flags
	DPI_startup	ViewInfo		; start-up value

	DPI_inkFlags	DayPlanInkFlags
	DPI_inkGroup	word	(?)		; group holding ink data
	DPI_inkItem	word	(?)		; item holding ink data

MSG_DP_INIT							message
;
; Initialize the DayPlan object (only call once!)
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_QUIT							message
;
; Tell the DayPlan object to prepare to exit
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_FILE_OPEN						message
;
; Note that a file has been opened, and enable all appropriate UI
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_FILE_CLOSE						message
;
; Note that a file will soon be closed, and disable all appropriate UI
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_RESET_UI							message
;
; Reset all UI (events) associated with the DayPlan object
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

if	HANDLE_MAILBOX_MSG
MSG_DP_RESET_UI_IF_DETAILS_NOT_UP				message
;
; Same as DP_RESET_UI, except that we skip the reset if Details dialog 
; is up on screen.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;
endif	; HANDLE_MAILBOX_MSG


MSG_DP_CALC_ONE_LINE_HEIGHT					message
;
; Calculate the height of a one-line text object
;
; Pass:		Nothing
; Returns:	DX	= Height (in points)
;		CX	= Minimum width for time string (in points)
; Destroys:	AX, BP
;

MSG_DP_CLEAN_INK						message
;
; Remove the ink currently displayed on the screen
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_LOAD_INK							message
;
; Load a day's ink to be displayed on the screen
;
; Pass:		SS:BP	= EventTableEntry to use
; Returns:	CX	= Offset to insertion point
; Destroys:	AX
;

MSG_DP_STORE_INK						message
;
; Store a day's ink away in the database
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_INK_DIRTY						message
;
; Note that the ink has been modified
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_DP_SET_RANGE						message
;
; Tell the DayPlan to reset the events it is displaying (if necessary)
; If the DP_RELOAD flag is set, then the events will always be reset.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


if	_TODO
MSG_DP_TODO_VIEW						message
;
; Tell DayPlan object we are showing the To Do list( vs. Event list).
; DayPlan object loads, events and displays them.  
;
; Context:	When changing the view of the GeoPlanner
; Source:	UI (View menu)
; Destination:  DayPlan object
; Interception: no
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,cx,dx - destroyed
;


MSG_DP_EVENT_VIEW						message
;
; Tell DayPlan object we are showing the Event list(vs. To Do list)
; DayPlan object loads To Do list events and displays them.
;
; Context:	When changing the view of the GeoPlanner
; Source:	UI (View menu)
; Destination:  DayPlan object
; Interception: no 
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,dx - destroyed
;

endif		; if	_TODO

MSG_DP_GET_RANGE						message
;
; Get the range of currently displayed events
;
; Pass:		Nothing
; Returns:	AX	= Start day/month
;		CX	= Start year
;		DX	= End day/month
;		BP	= End year
; Destroys:	Nothing
;
MSG_DP_DELETE_RANGE						message
;
; Delete (remove the buffers) for the currently displayed events
;
; Pass:		CL	= BufferUpdateFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_SEARCH_DAY						message
;
; Load the events for a day, so that a search may take place
;
; Pass:		SS:BP	= RangeStruct
;		CX	= EventTable lmem chunk for search
; Returns:	DX	= Offset to next date with any sort of event
; Destroys:	AX, CX
;

MSG_DP_SET_TITLE						message
;
; Set the title to be displayed above the event view
;
; Pass:		CX:DX	= OD of text object to write to
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_SET_SELECT						message
;
; Set the selected DayEvent object
;
; Pass:		BP	= DayEvent chunk handle 
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_GET_SELECT						message
;
; Get the selected DayEvent object
;
; Pass:		Nothing
; Returns:	BP	= DayEvent chunk handle (may be 0)
; Destroys:	Nothing
;

MSG_DP_SELECT_FIRST					message
;
; If no DayEvent is currently selected, select the first DayEvent object.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_SELECT_NEXT						message
;
; Select the next DayEvent object
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_SELECT_PREVIOUS						message
;
; Select the previous DayEvent object
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_FORCE_SELECT						message
;
; Force the passed EventTableEntry to be made visisble
;
; Pass:		CX	= EventTableEntry offset
;		DX	= Size ForceSelectArgs
;		SS:BP	= ForceSelectArgs
;			  (FSA_callBack MUST be zero when called initally)
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_LOAD_EVENT						message
;
; Load an EventStruct from the database into the DayPlan, though it
; might not become visible
;
; Pass:		CX:DX	= EventStruct group:item
;		BP	= 0 to calculate insertion point
;			= anthing else to insert at end
; Returns: 	Carry	= Set if the event couldn't be loaded (too many)
; Destroys:	Nothing
;


MSG_DP_LOAD_REPEAT						message
;
; Load a RepeatStruct from the database into the DayPlan, though it
; might not become visibile
;
; Pass:		CX:DX	= RepeatStruct group:iem
;		SS:BP	= EventRangeStruct
; Returns: 	Carry	= Set if the event couldn't be loaded (too many)
; Destroys:	Nothing
;

MSG_DP_ADD_REPEAT_EVENT						message
;
; A new repeating event has been created, so load that one event
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_DELETE_REPEAT_EVENT					message
;
; A repeat event has been deleted, so unload that one event
;
; Pass:		CX	= RepeatStruct - Group #
;		DX	= RepeatStruct - Item #
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_INSERT_ETE						message
;
; Insert an event into an EventTableEntry
;
; Pass:		SS:BP	= EventTableEntry
;		DX	= 0 to calculate insertion point
;			= anything else to insert at end
; Returns:	CX	= Offset to insertion point
;		DX	= The number of points, visually, from the top of
;			  the EventView to the top of the event
;		Carry	= Set if error (too many events)
; Destroys:	Nothing
;

MSG_DP_RECALC_HEIGHT						message
;
; Recalculate the height of all events
;
; Pass:		Nothing
; Returns:	CX	= EventTableEntry offset to first on-screen event
; Destroys:	AX, DX, BP
;

MSG_DP_SCREEN_UPDATE						message
;
; General "update the screen" after any sort of change involving the
; height or number of events
;
; Pass:		CX	= EventTableEntry offset at which to begin update
;		DL	= ScreenUpdateFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_POSITION_RANGE						message
;
; Position one or more DayEvents inside of the DayPlan
;
; Pass:		CX	= Vertical position of first object
;		DX	= EventTableEntry of first object
;		BP	= ScreenUpdateFlags
; Returns:	Nothing
; Destroys:	AX, CX, BP
;

MSG_DP_UPDATE_ALL_EVENTS					message
;
; Force events to be updated (cached data written to database file)
;
; Pass:		Nothing
; Returns:	AX	= 0 if any changes were written back
;			= anything else if not
; Destroys:	Nothing
;

MSG_DP_SCROLL_INTO_SUBVIEW					message
;
; Force a rectangle in the DayPlan's view to be made visible
;
; Pass:		SS:BP	= MakeRectVisibleParams
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ENSURE_EVENTS_VISIBLE					message
;
; Force the EventWindow to be made visible.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ETE_UPDATE						message
;
; Update information for an EventTableEntry
;
; Pass:		CX:DX	= Group:Item
;		BP	= DayEvent handle
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_DP_ETE_HEIGHT_NOTIFY					message
;
; Update size information for an EventTableEntry
;
; Pass:		CX	= Top
;		DX	= Height
;		BP	= DayEvent handle
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ETE_TIME_NOTIFY						message
;
; Update time information for an EventTableEntry
;
; Pass:		CX	= Hour/Minute
;		BP	= DayEvent handle
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ETE_LOST_BUFFER						message
;
; Notification that a DayEvent buffer is being removed
;
; Pass:		BP	= DayEvent handle
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_ETE_FORCE_UPDATE						message
;
; Force an event to be updated
;
; Pass:		CX:DX	= Group:Item
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ETE_FIND_EVENT						message
;
; Find the EventTableEntry for an EventStruct
;
; Pass:		CX:DX	= Group:Item
; Returns:	BP	= Offset to the EventTableEntry
;		AX	= DayEvent handle (may be NULL)
;		Carry	= Set if found (clear if not)
; Destroys:	Nothing
;

MSG_DP_QUICK_ADD						message
;
; Create a new empty event, using some logic based on the current selection
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

if	_TODO
MSG_DP_NEW_TODO_EVENT	message
;
; Creates an empty event for the To Do list, ensuring the To Do list
; is visible
;
; Context:	When user chooses "New To Do Event" from the Edit menu
;		this message is sent to the DayPlan object
; Source:	New To Do Event trigger in Edit Menu
; Destination:  DayPlanObject
; Interception: no 
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,si,di,bp - destroyed
;
endif

MSG_DP_NEW_EVENT						message
;
; Create a new empty event, at the passed time/date
;
; Pass:		BP	= Year
;		DX	= Month/Day
;		CX	= Hour/Minute
; Returns:	BP	= DayEvent handle (if on-screen)
;		Carry	= Set if error
; Destroys:	AX, CX, DX
;

MSG_DP_DELETE_EVENT						message
;
; Delete the selected event from the DayPlan
;
; Pass:		Nothing
; Returns:	AX	= UndoActionValue, if event deleted (-1 if failed)
; Destroys:	CX, DX, BP
;

if	_TODO
MSG_DP_CHANGE_EVENT_TO_HIGH_PRIORITY				message
;
; Tell DayPlan object that the selected event is being changed to
; a high priority event.
; 
; Context:	To Do list is visible and an event is selected
; Source:	UI(MarkAs--HighPriority trigger in Edit menu)
; Destination:  DayPlan object
; Interception: no
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,si,bp - destroyed
;


MSG_DP_CHANGE_EVENT_TO_NORMAL_PRIORITY				message
;
; Tell DayPlan object that the selected To Do list event is being changed to 
; a normal priority event.
;
; Context:	To Do list is visible and an event is selected
; Source:	UI(MarkAs--Normal Priority trigger in Edit menu)
; Destination:  DayPlan object
; Interception: no
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,si,bp - destroyed
;

MSG_DP_EVENT_COMPLETED						message
;
; Tell DayPlan object that the selected To Do list event is setting
; its completed state.
;
; Context:	To Do list is visible and an event is selected
; Source:	UI(MarkAs--Completed trigger in Edit menu
; Destination:  DayPlan object
; Interception: no
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,si,bp - destroyed
;


MSG_DP_CLEAR_COMPLETE						message
;
; Clear the complete field of an event.  This only makes sense for
; To Do list events.
;
; Context:	A To Do event has been marked high priority or 
;		normal priority	
; Source:	DayPlan object
;		  DPHighPriority (MSG_DP_CHANGE_EVENT_TO_HIGH_PRIORITY)
;                 DPNormalPriority (MSG_DP_CHANGE_EVENT_TO_NORMAL_PRIORITY)
; Destination:  DayPlan object
; Interception: no
;
; Pass:	nothing
;			
; Return:
;
;	- unchanged
;	ax,cx,dx,di,si - destroyed
;

endif

MSG_DP_ALARM_SETTINGS						message
;
; Display the alarm settings for the selected event
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


MSG_DP_ALTER_RANGE						message
;
; Go forward or backward by the selected range amount
;
; Pass:		DX	= DateChange
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_ALTER_RANGE_NOW						message
;
; Callback that really changes the date, to allow multiple button
; presses to acumulate. Not sent by external UI or objects.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_UNDO							message
;
; Perform an undo operation
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_FREE_MEM							message
;
; Free up as much memory as possible
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DP_PRINT_DATES_EVENTS					message
;
; Print (draw) a single day's events inside of a day in the month
;
; Pass:		SS:BP	= MonthPrintRangeStruct
;		CL	= Day of week of 1st day in month
;		CH	= Last day in the month
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DP_PRINT_ENGINE						message
;
; Print a range of events
;
; Pass:		SS:BP	= PrintRangeStruct
;		CL	= DayPlanInfoFlags
;				DP_TEMPLATE (use template mode)
;				DP_HEADERS (show all headers)
;		CH	= DayPlanPrintFlags
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_DP_CHANGE_PREFERENCES					message
;
; Force all of the Preference information to be re-loaded
;
; Pass:		CX	= Start minute:hour
;		DX	= End minute:hour
;		BP(low)	= DayPlanInfoFlags
;		BP(high)= Interval between events
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;


if	HANDLE_MAILBOX_MSG
MSG_DP_CREATE_EVENT_FROM_CLAVIN					message
;
; Create an event based on info passed by mailbox.
; Pass:		cx	= VM block handle containing MBAppointment struct
;		dx	= VM file handle
; Returns:	cx	= VM block handle containing next
;			  MBAppointment struct, 0 if none. 
; Destroys:	Nothing
;

MSG_DP_CREATE_EVENT_FROM_MBAPPOINTMENT				message
;
; Create an event based on info passed by the MBAppointment struct.
; Pass:		cx	= segment containing MBAppointment struct
; Returns:	cxdx	= unique event ID of the created event
; Destroys:	Nothing
;

MSG_DP_MODIFY_EVENT_BY_GR_IT_FROM_MBAPPOINTMENT			message
;
; Change an event (specifed by Gr:It) based on info passed by the 
; MBAppointment struct.
; Pass:		cxdx	= Gr:It of event being changed
;		bp	= segment containing MBAppointment struct
; Returns:	cxdx	= unique event ID of the changed event
; Destroys:	Nothing
;

MSG_DP_PRINT_ONE_DAY_TO_GSTATE					message
;
; Print the event list of the day to a gstate.
; Pass:		cx	= FileDate
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

endif

if	CALAPI

MSG_DP_CREATE_EVENT_FROM_API					message
;
; Create a new event from Calendar API
;
; Pass:		dx:bp	= fptr to CalendarEventParamStruct
; Return:	if there is error,
;			cx = CalendarEventError
;		if there is no error
;			cx	= CEE_NORMAL
;			dx:bp	= unique event ID
; Destroyed:	nothing
;

;
; Parameters to pass to MSG_DP_MODIFY_EVENT_BY_ID_FROM_API
;
DayPlanModifyEventParams	struct
	DPMEP_eventID		dword		; event ID
	DPMEP_param		fptr.CalendarEventParamStruct
DayPlanModifyEventParams	ends

MSG_DP_MODIFY_EVENT_BY_ID_FROM_API				message
;
; Modify a calendar event by unique ID from Calendar API
;
; Pass:		ss:bp	= DayPlanModifyEventParams
;		dx	= size of DayPlanModifyEventParams
; Return:	if there is error,
;			cx	= CalendarEventError
;		if there is no error
;			cx	= CEE_NORMAL
; Destroyed:	nothing
;

MSG_DP_DELETE_EVENT_BY_ID_FROM_API				message
;
; Delete an event by unique event ID from Calendar API
;
; Pass:		cxdx	= event ID
; Return:	if event found and deleted:
;			cx	= CEE_NORMAL
;		otherwise,
;			cx	= CalendarEventError
; Destroyed:	nothing
; Notes:	If the event being deleted gains focus, it will return
;		error 
;

MSG_DP_DELETE_EVENT_BY_EVENT					message
;
; Delete an event by event DB group:item without bringing up additional UI
;
; Pass:		cx:dx	= DB group:item to delete (The event must exist)
; Return:	nothing
; Destroyed:	nothing
;

MSG_DP_GET_EVENT_BY_ID_FROM_API					message
;
; Get an event by unique event ID from Calendar API
;
; Pass:		cxdx	= event ID
;		^hbp	= owner of the returned block
; Return:	if event found
;			cx	= CEE_NORMAL
;			^hdx	= Unlocked block of CalendarReturnedEventStruct
;		Otherwise,
;			cx	= CalendarEventError
; Destroyed:	nothing
;

DayPlanCheckEventExistParams	struct
	DPCEEP_startDateTime	FileDateAndTime	; start date and time
	DPCEEP_endDateTime	FileDateAndTime	; end date and time
DayPlanCheckEventExistParams	ends

MSG_DP_CHECK_IF_EVENT_EXISTS					message
;
; Check there exists any event within a period of time
;
; Pass:		ss:bp	= DayPlanCheckEventExistParams
; Return:	if there is error,
;			cx	= CalendarEventError
;		if there is event overlapping the search range, 
;			cx	= CEE_NORMAL
;		if there is no event overlapping the search range,
;			cx	= CEE_EVENT_NOT_FOUND
; Destroyed:	nothing
;

DayPlanEnumDateTimeRangeParams	struct
	DPEDTRP_dateTimePtr	fptr.DateTimeRangeStruct
	DPEDTRP_eventGr		word		; event DB group
	DPEDTRP_eventIt		word		; event DB item
	DPEDTRP_argCX		word		; cx to pass
	DPEDTRP_argDX		word		; dx to pass
	DPEDTRP_argBP		word		; bp to pass
DayPlanEnumDateTimeRangeParams	ends

MSG_DP_CHECK_IF_MULTIPLE_DAY_EVENT_EXISTS_CALLBACK		message
;
; Callback to see if a multiple day event coincides with a period of time. 
;
; Pass:		ss:bp	= DayPlanEnumDateTimeRangeParams
; Return:	carry set if the event exists over the given period of
;		time, and should abort enumeration of multiple day events 
;			ax	= CEE_NORMAL
;		otherwise,
;			ax	= CEE_EVENT_NOT_FOUND
; Destroyed:	nothing
;

MSG_DP_CHECK_IF_NORMAL_EVENT_EXISTS_CALLBACK			message
;
; Callback to see if a normal event coincides with a period of time. 
;
; Pass:		ss:bp	= DayPlanEnumDateTimeRangeParams
; Return:	carry set if a normal event exists over the given period of
;		time, and should abort enumeration of multiple day events 
;			ax	= CEE_NORMAL
;		otherwise,
;			ax	= CEE_EVENT_NOT_FOUND
; Destroyed:	nothing
;

endif	; CALAPI

MSG_PREF_VERIFY_OPTIONS						message
;
; Verify all of the options the user has selected, and if they all are
; valid, allow the options to be set.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_PREF_RESET_OPTIONS						message
;
; Reset all of the options, re-stuffing the values into the dialog box
; UI gadgets.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_PREF_SET_INTERVAL						message
;
; Set the interval (in minutes) between template events
;
; Pass:		DL	= Minutes
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_PREF_SET_PRECEDE_MINUTE					message
;
; Set the default number of minutes by which an alarm precedes its event
;
; Pass:		DL	= Minutes
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_PREF_SET_PRECEDE_HOUR					message
;
; Set the default number of hours by which an alarm precedes its event
;
; Pass:		DL	= Hours
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_PREF_SET_PRECEDE_DAY					message
;
; Set the default number of days by which an alarm precedes its event
;
; Pass:		DX	= Days
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_PREF_SET_STARTUP_CHOICES					message
;
; Set the default "View" choices for the application on start-up
;
; Pass:		CX	= 0, 1, or 2 (order of entries in View Menu)
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_PREF_UPDATE_EVENT_CHOICES					message
;
; Update UI based upon user selection of event display type
;
; Pass:		CL	= PreferenceFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_PREF_SET_EVENT_CHOICES					message
;
; Set some preferences that are represented by a boolean bit mask
;
; Pass:		CL	= PreferenceFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_PREF_SET_DATE_CHOICES					message
;
; Set some preferences that are represented by a boolean bit mask
;
; Pass:		CX	= PreferenceFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

DayPlanClass	endc

;
; DayEvent Class structures
;

DayEventClass	class VisCompClass, master
	DEI_timeYear	word	(?)		; event year
	DEI_timeDay	byte	(?)		; event day
	DEI_timeMonth	byte	(?)		; event month
	DEI_timeMinute	byte	(?)		; event minute
	DEI_timeHour	byte	(?)		; event hour
if	END_TIMES
	DEI_endMinute	byte	(?)		; event end time
	DEI_endHour	byte	(?)
	DEI_varFlags	VariableLengthFlags	; endtime state flags
	DEI_padding	byte 	(?)		; swat doesn't like odd sizes
endif
if	UNIQUE_EVENT_ID
	DEI_uniqueID	dword	(?)		; unique id for event
endif
	DEI_alarmYear	word	(?)		; alarm year
	DEI_alarmDay	byte	(?)		; alarm day
	DEI_alarmMonth	byte	(?)		; alarm month
	DEI_alarmMinute	byte	(?)		; alarm minute
	DEI_alarmHour	byte	(?)		; alarm hour

	DEI_stateFlags	EventInfoFlags		; see above
	DEI_actFlags	DayEventInfoFlags	; see above
	DEI_repeatID	word	(?)		; the repeat ID (if any)
if	HANDLE_MAILBOX_MSG
	DEI_sentToArrayBlock	word	(?)	; Sent-to info vmblock handle
	DEI_sentToArrayChunk	word	(?)	; Sent-to info chunk handle
	DEI_nextBookID	word	(?)		; next book ID to use, ie. 
						;  # of events booked on 
						;  this event
	DEI_bookingFlags DayEventBookingFlags	; see above
endif
	DEI_DBgroup	word	(?)		; DB group for this event
	DEI_DBitem	word	(?)		; DB item for the event
	DEI_block	hptr			; block containing DayEvent
	DEI_eventHandle	nptr			; handle to DayEvent Object
	DEI_timeHandle	nptr			; handle to time TextEdit Obj
	DEI_textHandle	nptr			; handle to text TextEdit Obj


MSG_DE_SET_HANDLES						message
;
; Initialize a DayEvent by finding the handles of its child text objects
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DE_FREE_MEM							message
;
; Tell a DayEvent to free up as much memory as possible
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DE_INIT							message
;
; Initialize a DayEvent with an EventStruct
;
; Pass:		CX:DX	= EventStruct group:item
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_INIT_REPEAT						message
;
; Initialize a DayEvent with a RepeatStruct
;
; Pass:		CX	= EventTableEntry offset
;		DX	= EventTable chunk handle
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

if	HANDLE_MAILBOX_MSG
MSG_DE_INIT_REPEAT_BY_GR_IT					message
;
; Initialize a DayEvent with a RepeatStruct, specified by event Gr:It.
;
; Pass:		CX:DX	= RepeatStruct Gr:It
; Returns:	carry set if error (not enough memory)
; Destroys:	AX, CX, DX, BP
;
endif	; HANDLE_MAILBOX_MSG

MSG_DE_INIT_VIRGIN						message
;
; Initialize a DayEvent to be an empty "virgin" event
;
; Pass:		BP	= Year
;		DX	= Month/Day
;		CX	= Hour/Minute or
;			(_RESPONDER+CALAPI features only)
;			CAL_NO_TIME if this is a same day to-do event
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

if UNIQUE_EVENT_ID
MSG_DE_INIT_VIRGIN_PRESERVE_UNIQUE_ID			message
;
; Same as MSG_DE_INIT_VIRGIN, except that this method preserves
; unique ID in the dayevent object.
;
; Pass:		BP	= Year
;		DX	= Month/Day
;		CX	= Hour/Minute or
;			(_RESPONDER+CALAPI features only)
;			CAL_NO_TIME if this is a same day to-do event
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;
endif	; UNIQUE_EVENT_ID


if	_TODO
MSG_DE_INIT_TODO						message
;
; Initialize a DayEvent to be an empty "To Do" list event
;
; Context:	A new To Do list event is being created and 
; 		initialized.
; Source:	StuffDayEvent (procedure)
; Destination:  DayEvent object
; Interception: no
;
; Pass:		cl	= priority:
;			TODO_HIGH_PRIORITY
;			TODO_NORMAL_PRIORITY
;
;			(_RESPONDER and CALAPI only:)
;			TODO_COMPLETED
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,di,bp - destroyed
;

MSG_DE_TODO_NUMBER						message
;
; Place the correct number for this To Do list event in the time text
; field
;
; Context:	At the end of a screen update(event deleted,added,
; 		changed priority,etc), the numbers of the To Do list
;		events are corrected.
;
; Source:	DayPlanScreenUpdate
; Destination:  DayEvent objects (Only To Do list events)
; Interception: no
;
; Pass:		cx	= new number
;			
; Return:	nothing
;
;	- unchanged
;	es,si,di,bp - destroyed
;

endif		; if 	_TODO

MSG_DE_INIT_HEADER						message
;
; Initialize a DayEvent to be a "header" (date title) event
;
; Pass:		BP	= Year
;		DX	= Month/Dat
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_HEIGHT_NOTIFY						message
;
; Notification of a change in height of a child object
;
; Pass:		BP	= Handle of text object that changed
;		DX	= New height
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_TEXT_LOST_TARGET						message
;
; Notification that a child text object lost the target
;
; Pass:		BP	= Handle of text object that lost the target
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_TEXT_GAINED_TARGET					message
;
; Notification that a child text object gained the target
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_FORCE_VISIBLE						message
;
; Force an event to be made visible
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_RETRIEVE_TEXT						message
;
; Retrieve text from a DayEvent
;
; Pass:		CX:DX	= Group:Item in which text will be stored
; Returns:	AX	= Length of text stored
; Destroys:	Nothing
;

MSG_DE_REDISPLAY						message
;
; Re-display the time text for an event
;
; Pass:		CX	= New Hour/Minute
; Returns:	CX	= Old Hour/Minute
; Destroys:	AX, DX, BP
;

MSG_DE_SELECT							message
;
; Draw an event as being selected
;
; Pass:		Nothing
; Returns:	AX	= see DayEventSelectCommon()
; Destroys:	nothing
;

MSG_DE_DESELECT							message
;
; Draw an event as not being selected
;
; Pass:		Nothing
; Returns:	AX	= see DayEventSelectCommon()
; Destroys:	nothing
;

MSG_DE_SET_DMY							message
;
; Reset the day/month/year of a virgin event, for speed optimization
;
; Pass:		BP	= Year
;		DX	= Month/Day
; Returns:	Nothing
; Destroys:	AX
;

MSG_DE_SET_TIME							message
;
; Set a new time for an event
;
; Pass:		CX	= New hour/minute
; Returns:	Nothing
; Destroys:	AX, BP
;


MSG_DE_GET_TIME							message
;
; Get the time & date for an event
;
; Pass:		Nothing
; Returns:	BP	= Year
;		DX	= Month/Day
;		CX	= Hour/Minute
;
;		(_RESPONDER and CALAPI only):
;		carry set if no start time
; Destroys:	nothing
;

if 	END_TIMES
MSG_DE_GET_END_TIME						message
;
; Get the end time for an event
;
; Pass:		Nothing
; Returns:	CX	= Hour/Minute
;		carry	= set if no end time, cleared otherwise
; Destroys:	AX
;

if	HANDLE_MAILBOX_MSG
MSG_DE_GET_END_DATE_TIME					message
;
; Get the end date / time for an event.
;
; Pass:		Nothing
; Returns:	if has end date:
;			BP	= Year
;			DX	= Month/Day
;			CX	= Hour/Min, CAL_NO_TIME if no time
;			carry	= cleared
;		if no end date and no end time
;			carry	= set
;			CX, DX, BP = destroyed
; Destroys:	AX
;
endif	; HANDLE_MAILBOX_MSG

MSG_DE_PARSE_END_TIME						message
;
; Parse the end time in the end time text object
;
; Pass:		Nothing
; Returns:	CX	= New hour/minute
;		Carry	= Set if error
; Destroys:	AX, DX, BP
;

MSG_DE_PARSE_START_TIME						message
;
; Parse the start time in the start time text object
;
; Pass:		Nothing
; Returns:	CX	= New hour/minute
;		Carry	= Set if error
; Destroys:	AX, DX, BP
;

MSG_DE_UPDATE_END_TIME						message
;
; Update an event's end time
;
; Pass, return: nothing
; destroy: ax, cx, dx, bp
;

MSG_DE_UPDATE_START_TIME					message
;
; Update an event's start time
;
; Pass, return: Nothing
; Destroys: cx, dx
;

MSG_DE_START_DIRTY						message
;
; Set events start time dirty flag
;
; Pass, return, destroy: nothing
;

MSG_DE_END_DIRTY						message
;
; Set events end time dirty flag
;
; Pass, return, destroy: nothing
;

endif



MSG_DE_PARSE_TIME						message
;
; Parse the time in the event's time text object
;
; Pass:		Nothing
; Returns:	CX	= New hour/minute
;		Carry	= Set if error (& time was reverted)
; Destroys:	AX, DX, BP
;

MSG_DE_UPDATE_TIME						message
;
; Parse & reset an event's time
;
; Pass:		Nothing
; Returns:	Carry	= Set if time was invalid
; Destroys:	AX
;

MSG_DE_SELECT_TIME						message
;
; Set the time in an event
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_SELECT_TEXT						message
;
; Set the text in an event
;
; Pass:		CX	= Start offset
;		DX	= End offset
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_SET_ALARM						message
;
; Set the alarm time for an event
;
; Pass:		BP	= Year
;		DX	= Month/Day
;		CX	= Hour/Minute
; Returns:	Nothing
; Destroys:	AX
;


MSG_DE_GET_DATABASE						message
;
; Get the database group & item for an event
;
; Pass:		Nothing
; Returns:	CX:DX	= Group:Item for EventStruct or RepeatStruct
; Destroys:	Nothing
;

MSG_DE_DRAW_SELECT						message
;
; Draw the selection box for an event, in XOR mode.
;
; Pass:		BP	= GState handle
;		CL	= DrawFlags
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_SET_CLEAN						message
;
; Set the event as clean
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX
;

MSG_DE_UPDATE							message
;
; Update an event, writing cached data to the database file
;
; Pass:		CL	= DataBaseUpdateFlags
; Returns:	AX	= 0 if something was updated
;			= <> 0 if not
; Destroys:	Nothing
;

MSG_DE_CHANGE_STATE						message
;
; Change the "state" of an event, between a virgin & regular event
;
; Pass:		CX:DX	= Group:Item
;		BP	= State change type (see DayEventChangeState)
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_STUFF_ALARM						message
;
; Stuff all the information about an event into the alarm dialog box
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_EXTRACT_ALARM						message
;
; Extract all the information for an event from the alarm dialog box
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_DE_GET_REPEAT_TYPE						message
;
; Get the frequency type for an event. (i.e. one-time, weekly, etc)
;
; Pass:		Nothing
; Returns:	ax	= EventOptionsTypeType (bad type name huh?)
;
;		if repeat until...
;			bp = repeat until year
;			dx = repeat until month/day
;			carry set
;		else
;			dx, bp = CAL_NO_DATE
;			carry cleared
; Destroys:	Nothing
;

if	HANDLE_MAILBOX_MSG
MSG_DE_REPLACE_TEXT						message
;
; Replace the text of the event obj with text referenced by a pointer.
;
; Pass:		dx:bp	= Pointer to the text string
;		cx	= String length, or 0 if null-terminated
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_DE_GET_TEXT_ALL_PTR						message
;
; Get the entire text of the event description into a buffer
; referenced by a pointer.
;
; Pass:		dx:bp	= Pointer to the text string
; Returns:	cx	= String length not counting the NULL
;		dx:bp	= Unchanged
;

MSG_DE_GET_STATE_FLAGS						message
;
; Get the DEI_stateFlags of the event obj.
;
; Pass:		Nothing
; Returns:	al	= EventInfoFlags
; Destroys:	Nothing
;

MSG_DE_SET_STATE_FLAGS						message
;
; Set the DEI_stateFlags of the event obj.
;
; Pass:		cl	= EventInfoFlags
; Returns:	Nothing
; Destroys:	Nothing
;

MSG_DE_GET_ALARM						message
;
; Get the alarm time for an event.
;
; Pass:		Nothing
; Returns:	if event has alarm:
;			bp	= Year
;			dx	= Month/Day
;			cx	= Hour/Minute
;			carry	= set
;		else
;			carry	= cleared
;			cx, dx, bp not changed
; Destroys:	ax
;

MSG_DE_USE_NEXT_BOOK_ID						message
;
; Synopsis:	Mark that the next book ID be used, and return that 
;		value.
;
; Pass:		nothing
; Return:	cx	= book ID to be used
; Destroy:	AX
;

MSG_DE_SET_NEXT_BOOK_ID	message
;
; SYNOPSIS:	Set the next book ID
;
; Pass:		cx	= book ID to set
; Return:	nothing
; Destroyed:	nothing
; Notes:	Only the DayEvent instance data is updated. The datebase is
;		not updated
;

MSG_DE_ADD_SENT_TO_INFO						message
;
; Synopsis:	Add the sent-to information (with the name / 
;		sms number / contact ID etc in instance data of 
;		CalendarAddressCtrlClass object.)
;
; Pass:		nothing
; Return:	nothing
; Destroy:	AX, CX, DX, BP
;

MSG_DE_DISPLAY_SENT_TO_INFO					message
;
; Synopsis:	Display the sent-to information in a list and open
;		SentToDialog.
;
; Pass:		nothing
; Return:	nothing
; Destroy:	AX, CX, DX, BP
;

MSG_DE_QUERY_SENT_TO_ITEM_MONIKER				message
;
; Synopsis:	Create and replace the item moniker of sent-to event.
;
; Pass:		^lcx:dx	= the dynamic list requesting the moniker
;		bp	= the position of the item requested
; Return:	nothing
; Destroy:	AX, CX, DX, BP
;

MSG_DE_ADD_SENDER_INFO						message
;
; Synopsis:	Create the sent-to chunk array, and put sender info into
;		chunk array header.
;
; Pass:		cx	= segment of MBAppointment struct
; Return:	carry	= set if error (not enough disk space)
; Destroy:	AX, CX, DX, BP
;

MSG_DE_GET_SENT_TO_CHUNK_ARRAY					message
;
; Synopsis:	Get the block / chunk handle of sent-to array.
;
; Pass:		nothing
; Return:	cx	= block handle
;		dx	= chunk handle
; Destroy:	nothing
;

MSG_DE_SET_SENT_TO_CHUNK_ARRAY					message
;
; Synopsis:	Set the block / chunk handle of sent-to array.
;
; Pass:		cx	= VM block handle
;		dx	= chunk handle
; Return:	nothing
; Destroy:	nothing
; Notes:	Only the DayEvent instance data is updated. The datebase is
;		not updated
;

MSG_DE_GET_SENT_TO_COUNT					message
;
; Synopsis:	Get the count of sent-to struct in the sent-to array.
;
; Pass:		nothing
; Return:	cx	= count
; Destroy:	nothing
;

endif	; HANDLE_MAILBOX_MSG

if	END_TIMES
MSG_DE_SET_END_TIME						message
;
; Set the end time of the event obj.
;
; Pass:		cx	= end time (Hour/Min)
; Returns:	carry set if error (end time earlier than start time)
; Destroys:	ax, cx, dx, bp
;
endif	; END_TIMES

if	UNIQUE_EVENT_ID
MSG_DE_GET_UNIQUE_ID						message
;
; Get the unique ID of the event obj.
;
; Pass:		nothing
; Returns:	cxdx	= unique ID
; Destroys:	nothing
;

MSG_DE_SET_UNIQUE_ID						message
;
; Set the unique ID of the event obj.
;
; Pass:		cxdx	= unique ID
; Return:	nothing
; Destroyed:	nothing
; Notes:	Only the DayEvent instance data is updated. The datebase is
;		not updated
;

endif	; UNIQUE_EVENT_ID


if	HANDLE_MAILBOX_MSG

MSG_DE_UPDATE_APPOINTMENT_IF_NECESSARY				message
;
; Synopsis:	Update the booking in sent-to list, if the
;		event time/text is changed.
;
; Pass:		Nothing
; Return:	Nothing
; Destroy:	AX, CX, DX, BP
;

MSG_DE_CANCEL_ALL_APPOINTMENT					message
;
; Synopsis:	Cancel all booking in sent-to list, if the user
;		wants to.
;
; Pass:		Nothing
; Return:	Nothing
; Destroy:	AX, CX, DX, BP
;

endif	; HANDLE_MAILBOX_MSG

DayEventClass	endc


PrintEventClass	class DayEventClass

if SUPPORT_ONE_LINE_PRINT

PrintEventInfo	record 
    :14
    PEI_ONE_LINE_PRINT:1		; all events are one-line
    PEI_IN_DATE:1			; drawn inside of a date in a month
PrintEventInfo	end

else

PrintEventInfo	record
    :15
    PEI_IN_DATE:1			; drawn inside of a date in a month
PrintEventInfo	end

endif

	PEI_printInfo	PrintEventInfo    

MSG_PE_SET_FONT_AND_SIZE					message
;
; Sets the font and pointsize to be used for printing, and also initializes
; the PrintEventInfo associated with each PrintEvent object
;
; Pass:		CX	= FontID
;		DX	= Pointsize
;		BP	= PrintEventInfo
; Returns:	Nothing
; Destroys:	CX, DX, BP
;

MSG_PE_PRINT_ENABLE						message
;
; Enable the PrintEvent object to be drawn into the GString
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	Nothing
;

PrintEventClass	endc


MyTextClass	class VisTextClass
MyTextClass	endc


CustomSpinClass	class GenValueClass
	CS_firstMoniker	lptr			; pointer to first moniker
	CS_maxTextLen	byte	100		; max number of chars to type
CustomSpinClass	endc


DateArrowsClass	class GenValueClass
DateArrowsClass	endc


MonthValueClass	class GenValueClass
MonthValueClass	endc


MyPrintClass	class GenInteractionClass
	MPI_attrs	MyPrintAttrs
	MPI_fontID	FontID

MSG_MY_PRINT_UPDATE_DISPLAY_DATA				message
;
; Update the displayed data in the print options
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_MY_PRINT_SET_OUTPUT_TYPE					message
;
; Set the type of output the user desires
;
; Pass:		CL	= MyPrintOutputType
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_MY_PRINT_SET_INCLUDE_EVENTS					message
;
; Set/clear the include events
;
; Pass:		CL	= mask MPA_INCLUDE_EVENTS or 0
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_MY_PRINT_GET_INFO						message
;
; Get information about printing
;
; Pass:		Nothing
; Returns:	CX	= FontID (to use for printing)
;		DL	= MyPrintAttrs
;		DH	= Month
;		BP	= Year
; Destroys:	Nothing
;

MyPrintClass	endc


MySearchClass	class	MetaClass, master
    MSI_searchData	hptr.SearchReplaceStruct
    MSI_eventTable	nptr			; chunk handle of table
    MSI_eventOffset	word			; offset of event in table
    MSI_matchOffset	word			; offset in text to match

    MSI_firstMonthDay	word
    MSI_firstYear	word
    MSI_startMonthDay	word
    MSI_startYear	word
    MSI_lastMonthDay	word
    MSI_lastYear	word

    MSI_currentMonthDay	word
    MSI_currentYear	word
    MSI_nextMonthDay	word
    MSI_nextYear	word
MySearchClass	endc


SizeControlClass	class	GenGadgetClass

MSG_SIZE_CONTROL_INIT						message
;
; Initialize the size control object
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_SIZE_CONTROL_SET_VIEW_TYPE					message
;
; Respond to a user request to change the view from calendar to events.
;
; Pass:		CX	= ViewType
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_SIZE_CONTROL_SET_VIEW_BOTH					message
;
; Respond to a user request to change the view from calendar to events.
;
; Pass:		CX	= ViewInfo
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_SIZE_CONTROL_SET_VIEW_INK					message
;
; Respond to a user request to change the view from calendar to events.
;
; Pass:		CX	= ViewInfo
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

SizeControlClass	endc


ReminderClass	class	GenInteractionClass, master
	RCI_group	word			; EventStruct group
	RCI_item	word			; EventStruct item
	RCI_minute	byte
	RCI_hour	byte
	RCI_day		byte
	RCI_month	byte
	RCI_year	word

	MSG_REMINDER_STORE_EVENT	message
	MSG_REMINDER_STORE_DATE_TIME	message
	MSG_REMINDER_SNOOZE		message
if	_TODO
	MSG_REMINDER_TODO		message
endif
ReminderClass	endc


CalendarPrimaryClass	class	GenPrimaryClass
CalendarPrimaryClass	endc


CalendarAppClass	class	GenApplicationClass

MSG_CALENDAR_APP_SET_VISIBILITY_DATA				message
;
; Sets some visibility-related data, which will be passed on to the
; UI objects dependent upon this data when they become visible.
;
; Pass:		CX, DX	= Data (dependent on type)
;		BP	= VisibilityUIData type
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;	

MSG_CALENDAR_APP_SET_USER_LEVEL					message
;
; Synopsis:	Set the user level.
;
; Pass:		CX	= CalendarFeatures
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_APP_FINE_TUNE_INIT					message
;
; Synopsis:	Initialize the fine tune dialog box, and display it.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_APP_FINE_TUNE					message
;
; Synopsis:	Set the fine-tuned user-level.
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_APP_CHANGE_USER_LEVEL				message
MSG_CALENDAR_APP_CANCEL_USER_LEVEL				message
;
; Synopsis:	Change/Cancel the user level
;
; Pass:		Nothing
; Returns:	Nothing
; Destroys:	AX, CX, DX, BP
;

MSG_CALENDAR_APP_QUERY_RESET_OPTIONS	message
MSG_CALENDAR_APP_USER_LEVEL_STATUS	message



	CAI_visibilityGroups	VisibilityUIGroups
	CAI_documentState	word		; MSG_GEN_SET_[NOT_]ENABLED


CalendarAppClass	endc


CalendarSRCClass	class	SearchReplaceControlClass
CalendarSRCClass	endc

CalendarTimeDateControlClass	class	PrefTimeDateControlClass
CalendarTimeDateControlClass	endc


if PZ_PCGEOS ; Pizza

;;	Set holiday Class
;;
SetHolidayInteractionClass	class	GenInteractionClass

	MSG_JC_SHIC_CONSTRUCT		message	; constructer
	MSG_JC_SHIC_DESTRUCT		message	; destructer

	MSG_JC_SHIC_LOADDATA		message	; load data from file
	MSG_JC_SHIC_SAVEDATA		message	; save data to file

	MSG_JC_SHIC_GETHOLIDAYDATE	message	; get holiday date
	MSG_JC_SHIC_GET_USABLE		message ; get holiday state

	MSG_JC_SHIC_RESET		message	; Reset
	MSG_JC_SHIC_CLOSE		message	; Close

	MSG_JC_SHIC_RHL_APPLY		message	; repeat holiday is changed

	MSG_JC_SHIC_DATA_DUMP		message	; dump holiday data for debug

	MSG_JC_SHIC_SET_RANGE		message	; set holiday date

						; Flags
	SHIC_dataFlag		byte			; holiday data flag
	SHIC_stateFlag		byte			; dialog box state flag
						; Holiday data
	SHIC_RHoliday		word			; repeat holiday
	SHIC_holidayMemHandle	hptr.LMemHeader		; Mem handle
	SHIC_NH_ChunkArray	lptr.HolidayMonthCell	; Chunk handle
	SHIC_PH_ChunkArray	lptr.HolidayYearCell	; Chunk handle
	SHIC_PW_ChunkArray	lptr.HolidayYearCell	; Chunk handle
						; Previous data
	SHIC_prevYstartDay	byte			; YearObj startDay
	SHIC_prevYstartMonth	byte			; YearObj startMonth
	SHIC_prevYstartYear	word			; YearObj startYear
	SHIC_prevYendDay	byte			; YearObj endDay
	SHIC_prevYendMonth	byte			; YearObj endMonth
	SHIC_prevYendYear	word			; YearObj endYear

SetHolidayInteractionClass	endc

endif

if	_TODO

EventOptionsAlarmType		etype word, 0, 2
	EOAT_OFF			enum	EventOptionsAlarmType
	EOAT_ON				enum	EventOptionsAlarmType
	EOAT_USER_DEFINED		enum 	EventOptionsAlarmType

EventOptionsTypeType		etype word, 0, 2
	EOTT_ONE_TIME		enum	EventOptionsTypeType
	EOTT_ANNIVERSARY	enum	EventOptionsTypeType
	EOTT_DAILY		enum	EventOptionsTypeType
	EOTT_WEEKLY		enum	EventOptionsTypeType
	EOTT_MONTHLY		enum	EventOptionsTypeType

RepeatModifyList		etype byte, 0, 2
	RML_SINGLE		enum	RepeatModifyList
	RML_ALL			enum	RepeatModifyList

TodoGenInteractionClass	class	GenInteractionClass
;
MSG_MY_GEN_INTERACTION_INITIATE					message
; 
; Makes sure that the object is usable and enabled and then calls
; MSG_GEN_INTERACTION_INITIATE
; Reconfigure EventView
; Pass: Return: Destroyed: Nothing


MSG_MGI_TODO_LIST						message
;
; Show the To Do list for Responder
;
; Context:	Calendar showing, the To-do list button is pressed
; Source:	UI (Calendar View--To do list trigger)
; Destination:  CalendarRight
; Interception: no
;
; Pass:		nothing
;			
; Return:	nothing
;
;	- unchanged
;	ax,bx,cx,dx,di,si,bp - destroyed
;


MSG_MY_GEN_INTERACTION_DISMISS					message
;
; Reconfigure EventView, remove dialog

MSG_MGI_DISMISS_TODO	message
;
;
; Context:	
; Source:	
; Destination:  
; Interception: 
;
; Pass:
;			
; Return:
;
;	- unchanged
;	- destroyed
;
MSG_MGI_ACCEPT_INPUT	message
TodoGenInteractionClass	endc


;
; Intercept MSG_GEN_DOCUMENT_NEW to get My_Schedule out of DOCUMENT
;

endif


if HANDLE_MAILBOX_MSG

ConfirmDlgFlags		record
   CDF_HAS_GEN_VIEW:1				; any GenView associated
						; with the confirm dialog? 
   :7
ConfirmDlgFlags		end

CalendarConfirmDlgClass	class	GenInteractionClass
	;
	; Subclass MSG_META_FUP_KBD_CHAR to prevent help from coming
	; up, because help would close the dialog in rudy. Also,
	; handle accept/deny/cancel response from user.
	;

	MSG_CALENDAR_CONFIRM_DLG_CANCEL_NEW_EVENT		message
	;
	; Synopsis:	User presses Cancel to a received
	;		event. Confirm and close the dialog.
	;
	; Pass:		Nothing
	; Return:	Nothing
	; Destroy:	ax, cx, dx, bp
	;
	MSG_CALENDAR_CONFIRM_DLG_SET_FLAGS		message
	;
	; Synopsis:	Set / clear CCDI_flags.
	;
	; Pass:		cl	= ConfirmDlgFlags to set
	;		ch	= ConfirmDlgFlags to clear
	; Return:	Nothing
	; Destroy:	cx
	;

	CCDI_flags	ConfirmDlgFlags
CalendarConfirmDlgClass	endc

EventsListContentFlags		record
   ELCF_BOUND_ADJUSTED:1			; Is the lower bound of
						; the content adjusted
						; after the gstring we
						; are drawing?
   :7
EventsListContentFlags		end

CalendarEventsListContentClass	class	VisContentClass
	;
	; This content draws a list of events of a particular day.
	;

	MSG_CALENDAR_EVENTS_LIST_CONTENT_SET_GSTRING		message
	;
	; Synopsis:	Set the gstring associated with the content.
	;
	; Pass:		cx	= handle of gstring block
	;		dx	= gstring chunk handle
	; Return:	Nothing
	; Destroy:	ax
	;

	CELCI_gsBlock	hptr		; block handle that contains
					; our gstate
	CELCI_gsHandle	hptr		; gstring to be printed
CalendarEventsListContentClass	endc

CalendarPasswordTextClass	class	GenTextClass
	;
	; Subclass MSG_META_CLIPBOARD_CUT/COPY and disable cut/copy.
	;
CalendarPasswordTextClass	endc

AutoSaveLoadTextClass	class	UnderlinedGenTextClass
;
; A utility UnderlinedGenText which allows us to tell it to save and
; load it's text from an ini file.
;

MSG_ASLT_VISIBILITY_LOST_GAINED		message
;
; Sent when the visibility is gained or lost
;
AutoSaveLoadTextClass	endc

DefaultAlarmTextClass	class	UnderlinedGenTextClass

MSG_DAT_VISIBILITY_LOST_GAINED		message
;
; Sent when the visibility is gained or lost

MSG_DAT_VALID_CHECK			message
;
; Sent when the settings dialog is closed, used to check the validity of the
; alarm settngs.

DefaultAlarmTextClass	endc

CalendarAddressCtrlClass	class	SMAddressControlClass

CalAddressCtrlFlags	record			
   CACF_HAS_MATCHING_CONTACT:1			; selected number has
						; matching contact
   CACF_MULTIPLE_RECIPIENTS:1			; user is sending SMS
						; to multiple recipients
   :6
CalAddressCtrlFlags	end

	;
	; Do our own sending to mailbox.
	;

	MSG_CALENDAR_ADDRESS_CTRL_GET_SELECTED_SMS_NUM		message
	;
	; Synopsis:	Get the SMS number of selected contact. The buffer
	;		should be at least MAX_NUMBER_FIELD_DATA_LEN+1
	;		chars big. 
	;
	; Pass:		dx:bp	= Pointer to the text buffer
	; Return:	cx	= String length not counting the NULL
	;		dx, bp	= not changed
	; Destroy:	ax
	;

	MSG_CALENDAR_ADDRESS_CTRL_GET_SELECTED_NAME		message
	;
	; Synopsis:	Get the recipient name of selected contact. The 
	;		buffer should be at least MAX_NAME_DATA_LEN+1
	;		chars big. 
	;
	; Pass:		dx:bp	= Pointer to the text buffer
	; Return:	cx	= String length not counting the NULL
	;		dx, bp	= not changed
	; Destroy:	ax
	;

	MSG_CALENDAR_ADDRESS_CTRL_GET_RECIPIENT_PASSWD		message
	;
	; Synopsis:	Get the recipient password of selected
	;		contact. The buffer should be at least
	;		CALENDAR_PASSWORD_LENGTH+1 chars big. 
	;
	; Pass:		dx:bp	= Pointer to the text buffer
	; Return:	cx	= String length not counting the NULL
	;		dx, bp	= not changed
	; Destroy:	ax
	;

	MSG_CALENDAR_ADDRESS_CTRL_SET_BOOK_ID			message
	;
	; Synopsis:	Set the book ID of the current booking for 
	;		the particular event.
	;
	; Pass:		cx	= book ID
	; Return:	nothing
	; Destroy:	ax, cx
	;

	MSG_CALENDAR_ADDRESS_CTRL_GET_BOOK_ID			message
	;
	; Synopsis:	Get the book ID of the current booking for 
	;		the particular event.
	;
	; Pass:		nothing
	; Return:	cx	= book ID
	; Destroy:	ax
	;

	MSG_CALENDAR_ADDRESS_CTRL_MANUAL_DIAL_OK		message
	;
	; Synopsis:	User enters the manual dial number, and
	;		presses OK.
	;
	; Pass:		nothing
	; Return:	nothing
	; Destroy:	ax, cx, dx, bp
	;

	MSG_CALENDAR_ADDRESS_CTRL_GET_MISC_FLAGS		message
	;
	; Synopsis:	Get the CACI_miscFlags.
	;
	; Pass:		nothing
	; Return:	cl	= CalAddressCtrlFlags
	; Destroy:	nothing
	;

	MSG_CALENDAR_ADDRESS_CTRL_COPY_SENT_TO_INFO		message
	;
	; Synopsis:	From instance data, copy info to EventSentToStruct.
	;
	; Pass:		cx:dx	= EventSentToStruct
	; Return:	nothing
	; Destroy:	ax, cx, dx, bp
	;

	MSG_CALENDAR_ADDRESS_CTRL_FETCH_RECIPIENT_INFO		message
	;
	; Synopsis:	Fetch the recipient info from contdb
	;
	; Pass:		cx	= element number in contact selection list or
	;			  recent contact selection list (0 based)
	; Return:	carry set if element number out of bounds
	;		carry cleared otherwise
	; Destroy:	nothing
	;

	MSG_CALENDAR_ADDRESS_CTRL_FREE_SELECTION_BLOCKS		message
	;
	; Synopsis:	Free the multiple selection mem blocks in instance.
	;
	; Pass:		nothing
	; Return:	nothing
	; Destroy:	nothing
	;

	CACI_miscFlags			CalAddressCtrlFlags
	;
	; Next three instance data are for handling multiple selection of
	; contact list or recent contant list.
	;
	CACI_selectedContactsHandle 	word	; handle of mem block that
						;  has list of
						;  ContactListSelectedEntry
	CACI_recentContactsHandle	word	; handle of mem block that
						;  has list of
						;  RecentContactsData
	CACI_numOfSelection		word	; number of selection

	;
	; Next four instance data are for recording info about *ONE*
	; particular selection.
	;
	CACI_bookID		word		; the book ID of the current
						;  booking of the event 
	CACI_selectedSMSNum	TCHAR MAX_NUMBER_FIELD_DATA_LEN+1 dup (?)
						; SMS number
	CACI_selectedName	TCHAR MAX_NAME_DATA_LEN+1 dup (?)
						; recipient name
	CACI_recipientPasswd	TCHAR CALENDAR_PASSWORD_LENGTH+1 dup (?)
						; recipient password
CalendarAddressCtrlClass	endc

ScrollableGenContentClass	class	GenContentClass
	;
	; A GenContent subclass that is scrollable even though none of
	; its children is focusable.
	;
ScrollableGenContentClass	endc

SentToDynamicListClass		class	GenDynamicListClass
SentToDynamicListClass		endc

SentToHeaderGlyphClass		class	GenGlyphClass
SentToHeaderGlyphClass		endc

endif

;-----------------------------------------------------------------------------
;			   Enumerated Fatal Errors
;-----------------------------------------------------------------------------

if	ERROR_CHECK

FAILED_SECURITY_TEST 						enum FatalErrors
FAILED_TO_INITIALIZE_DATABASE					enum FatalErrors
CALENDAR_DS_NOT_DGROUP						enum FatalErrors
CALENDAR_ES_NOT_DGROUP						enum FatalErrors
CAL_SEARCH_ROLODEX_BAD_TARGET_BLOCK				enum FatalErrors
DISPLAY_ERROR_BAD_ERROR_VALUE					enum FatalErrors
UNDO_NOTIFY_ACTION_BAD_UNDO_VALUE				enum FatalErrors
UNDO_ACTION_BAD_UNDO_VALUE					enum FatalErrors
UNDO_NOTIFY_GROUP_FREE_BAD_GROUP				enum FatalErrors

DB_START_UP_FAILED 						enum FatalErrors
DB_UPDATE_BAD_SIZE 						enum FatalErrors
DB_UPDATE_UNKNOWN_UPDATE_FLAG 					enum FatalErrors
DB_DELETE_WRONG_EVENT_COUNT 					enum FatalErrors
DB_DELETE_WRONG_DAY 						enum FatalErrors
DB_DELETE_BAD_DAY 						enum FatalErrors
DB_DELETE_WRONG_YEAR 						enum FatalErrors
DB_DELETE_BAD_YEAR 						enum FatalErrors
DB_DELETE_NON_EMPTY_DAYMAP 					enum FatalErrors
DB_DELETE_INVALID_EVENT_MAP					enum FatalErrors
DB_INSERT_ALARM_BAD_ALARM 					enum FatalErrors
GET_RANGE_OF_EVENTS_BAD_YEARMAP_ITEM				enum FatalErrors
CHECK_VALID_DAY_MONTH_BAD_DATE					enum FatalErrors

DBL_LOAD_FILE_FAILED 						enum FatalErrors
DBDUMP_EVENT_BAD_EVENT_TABLE 					enum FatalErrors

MONTH_BLOCK_COULD_NOT_LOCK 					enum FatalErrors
MONTH_SET_MONTH_MAP_BAD_ALTER_TYPE				enum FatalErrors

DRAW_YEARS_SELECTION_SHOULD_NOT_HAPPEN				enum FatalErrors
YEAR_ILLEGAL_CURRENT_MONTH					enum FatalErrors
YEAR_ILLEGAL_YEAR_RANGE_TYPE					enum FatalErrors

DP_UPDATE_ETE_HANDLE_NOT_FOUND					enum FatalErrors
DP_REUSE_BUFFER_HANDLE_NOT_FOUND				enum FatalErrors
DP_BUFFER_FREE_BAD_HANDLE					enum FatalErrors
DP_SCREEN_NEW_ALLOC_FAILED					enum FatalErrors
DP_SCREEN_NEW_OFFSET_TOO_BIG					enum FatalErrors
DP_POSITION_RANGE_BAD_HANDLE					enum FatalErrors
DP_SCREEN_INSERT_BAD_HANDLE					enum FatalErrors
DP_STUFF_DAY_EVENT_BAD_HANDLE					enum FatalErrors
DP_FORCE_EVENT_BAD_HANDLE_IN_ETE				enum FatalErrors
DP_ADD_HEADER_DATE_OUT_OF_ORDER					enum FatalErrors
DP_SELECT_IF_POSSIBLE_BAD_OFFSET				enum FatalErrors
DP_ETE_HEIGHT_NOTIFY_EVENT_NOT_FOUND				enum FatalErrors
DP_SCROLL_BAD_OFFSET						enum FatalErrors
DP_DELETE_RANGE_DELETE_FLAG_NOT_SET				enum FatalErrors
DP_ALTER_RANGE_INVALID_FLAG					enum FatalErrors
DP_UNDO_COULD_NOT_FIND_SELECT_EVENT				enum FatalErrors
DP_ADD_TEMPLATE_BAD_INTERVAL					enum FatalErrors
DP_CCP_BAD_TARGET_BLOCK						enum FatalErrors
DP_CREATE_PRINT_EVENT_WRONG_RESOURCE				enum FatalErrors
DP_TEST_IN_BOUNDS_TOP_SHOULD_ALWAYS_FIT				enum FatalErrors
DP_QUICK_ADD_SELECT_EVENT_NOT_FOUND				enum FatalErrors
DP_VERIFY_INVALID_EVENT_TABLE					enum FatalErrors

BUFFER_BAD_UPDATE_FLAGS						enum FatalErrors
BUFFER_ALLOC_NO_ERR_BAD_BUFFER					enum FatalErrors
BUFFER_ALLOC_NO_ERR_NO_STEAL_FLAG_SET				enum FatalErrors
BUFFER_VERIFY_BUFFER_NOT_FOUND					enum FatalErrors
BUFFER_VERIFY_NOT_FREE						enum FatalErrors
BUFFER_VERIFY_NOT_USED						enum FatalErrors

DELT_COULD_NOT_LOCK_BLOCK 					enum FatalErrors
DEST_COULD_NOT_LOCK_BLOCK 					enum FatalErrors
DE_FEATURES_BAD_TEXT_BLOCK 					enum FatalErrors
EXTRACT_ALARM_BAD_BLOCK 					enum FatalErrors
DE_SELECT_ALREADY_SELECTED					enum FatalErrors
DE_SELECT_NOT_SELECTED						enum FatalErrors
DE_SELECT_TEXT_COULD_NOT_FIND_VIEW				enum FatalErrors
DE_SET_DMY_NOT_VIRGIN						enum FatalErrors
DE_MY_TEXT_OBJECT_MUST_BE_IN_SAME_BLOCK				enum FatalErrors

REPEAT_NEW_BAD_REPEAT_EVENT_TYPE 				enum FatalErrors
REPEAT_LOAD_EVENT_BAD_ID					enum FatalErrors
REPEAT_GET_EVENTS_DIFFERENT_YEARS				enum FatalErrors
GET_RANGE_OF_REPEATS_BAD_MAP_ITEM				enum FatalErrors
REPEAT_GET_OVERFLOW_BAD_OFFSET					enum FatalErrors
REPEAT_ID_UNKNOWN_FOR_EXCEPTION_DATE				enum FatalErrors
REPEAT_ILLEGAL_EXCEPTION_STRUCTURE				enum FatalErrors
REPEAT_EVENT_ILLEGAL_STRUCTURE					enum FatalErrors
; The RepeatStruct data structure is invalid in some fashion, as the size of
; the chunk does not match the size of the RepeatStrct + the space required
; for the event text and the RepeateDateException structures (if that support
; is present).

WEEKLY_REPEAT_EVENT_MUST_HAVE_DOW_SET				enum FatalErrors
; If a RepeatStruct is weekly, then the day of week it repeats on must
; be set or else we will crash in a strange and mysterious way.  Your
; calendar file is corrupt.

CREATE_TIME_STRING_BAD_TIME					enum FatalErrors
QUICK_VIEW_BAD_ENUM 						enum FatalErrors
MARK_DAY_WRONG_YEAR 						enum FatalErrors
TABLE_POS_TO_DATE_OFFSET_TOO_BIG				enum FatalErrors

GENERATE_BAD_REPEAT_TYPE 					enum FatalErrors
DELETE_REPEAT_ITEM_INVALID_ID					enum FatalErrors
DELETE_REPEAT_ITEM_IS_ZERO					enum FatalErrors
REMOVE_EVENT_REPEAT_ID_NOT_FOUND				enum FatalErrors

ENTER_REPEAT_BAD_YEAR						enum FatalErrors
GET_REPEAT_EVENT_MONIKER_BAD_EVENT_NUM				enum FatalErrors
GET_REPEAT_EVENT_MONIKER_BAD_SIZE				enum FatalErrors
REPEAT_DYNAMIC_CHANGE_BAD_SIZE					enum FatalErrors
REPEAT_DYNAMIC_COMMON_BAD_SIZE					enum FatalErrors
VERIFY_REPEAT_DYNAMIC_WRONG_OD					enum FatalErrors

CUSTOM_SPIN_NEGATIVE_INDEX					enum FatalErrors
CUSTOM_SPIN_INDEX_TOO_BIG					enum FatalErrors

UI_SEARCH_TEXT_DIRTY_WRONG_RESOURCE				enum FatalErrors
UI_SEARCH_GET_FLAG_UNKNOWN_TRIGGER				enum FatalErrors

MY_PRINT_SPC_IN_DIFFERENT_RESOURCE				enum FatalErrors
ALARM_UP_VALUE_TOO_LARGE					enum FatalErrors
ALARM_UP_VALUE_TOO_SMALL					enum FatalErrors

CALENDAR_APP_ILLEGAL_NOTIFY_UI_DATA_TYPE_PASSED			enum FatalErrors
INVALID_EVENT_DATE						enum FatalErrors
INVALID_EVENT_TIME						enum FatalErrors
CALENDAR_CORRUPTED_EVENT_MAP_HEADER				enum FatalErrors

if	_TODO
WRONG_VIEW_FOR_NEW_TO_DO_ITEM					enum FatalErrors
endif


if	HANDLE_MAILBOX_MSG or CALAPI

CALENDAR_END_DATE_EARLIER_THAN_START_DATE		enum Warnings
CALENDAR_REPEAT_UNTIL_DATE_EARLIER_THAN_START_DATE	enum Warnings

CALENDAR_SET_END_DATE_ERROR				enum FatalErrors
CALENDAR_SHOULD_NOT_SET_END_DATE_IF_NO_START_TIME	enum FatalErrors

endif	; HANDLE_MAILBOX_MSG or CALAPI

if	HANDLE_MAILBOX_MSG
ALARM_INTERVAL_TYPE_NOT_SUPPORTED			enum Warnings
ALARM_INTERVAL_TOO_BIG					enum Warnings
END_TIME_EARLIER_THAN_OR_SAME_AS_START			enum Warnings
CLAVIN_EVENT_INVALID_SOME_INFO_DISCARDED		enum Warnings
CALENDAR_BOOK_EVENT_PREFIX_NOT_FOUND			enum Warnings
CALENDAR_BUFFER_TOO_SMALL_TO_WRITE_VERSIT		enum Warnings
CALENDAR_NO_MEMORY_TO_ADD_APPOINTMENT			enum Warnings
CALENDAR_POSSIBLE_PARSING_SMS_ERROR			enum Warnings
CALENDAR_PASSWORD_NOT_SET				enum Warnings
CALENDAR_PASSWORD_INVALID				enum Warnings
CALENDAR_TRANS_ADDR_BUFFER_TOO_SMALL			enum Warnings
CALENDAR_NO_VALID_TRANS_ADDR				enum Warnings
CALENDAR_UNKNOWN_VERSIT_KEYWORD_FOUND			enum Warnings
CALENDAR_START_TIME_NOT_FOUND_BEFORE_ALARM		enum Warnings
CALENDAR_BAD_ALARM_SO_START_TIME_USED			enum Warnings
CALENDAR_APPOINTMENT_REPLY_FAILED			enum Warnings
CALENDAR_SCK_PREFIX_NOT_FOUND_IN_VERSIT_TEXT		enum Warnings
CALENDAR_CONTACT_RECORD_DELETED				enum Warnings
CALENDAR_SMS_FIELD_NOT_FOUND_IN_CONTACT			enum Warnings
CALENDAR_SMS_NUMBER_NOT_FOUND_IN_CONTDB			enum Warnings
CALENDAR_SMS_NUMBER_MULTIPLE_MATCHES_IN_CONTDB		enum Warnings
CALENDAR_BOOKING_RETRY_IN_TEN_SECS			enum Warnings
CALENDAR_SMS_NUMBER_TRUNCATED				enum Warnings
CALENDAR_NO_MEMORY_FOR_SENT_TO_INFO			enum Warnings
CALENDAR_NOT_LIZZY_STYLE_UID				enum Warnings
CALENDAR_EXTRACT_DWORD_FAILED				enum Warnings
CALENDAR_EVENT_DENIED_SO_NO_UPDATE_SENT			enum Warnings
CALENDAR_CANNOT_FIND_ORIGINAL_EVENT_FOR_UPDATE		enum Warnings
CALENDAR_HOW_COME_RESERVATION_IS_DECLINED		enum Warnings
CALENDAR_PASSWORD_INVALID_WHY_CALL_THIS_ROUTINE		enum Warnings
CALENDAR_DB_UNIQUE_ID_SEARCH_FAILED			enum Warnings
CALENDAR_DETAILS_DLG_UP_SO_RESET_UI_SKIPPED		enum Warnings

CALENDAR_SIZE_OF_REPEAT_EXCEPTIONS_TOO_BIG		enum FatalErrors
CALENDAR_MB_APPOINTMENT_CORRUPTED			enum FatalErrors
CALENDAR_TRANSPORT_DRIVER_DOES_NOT_LIKE_SMS		enum FatalErrors
CALENDAR_EVENT_TEXT_TOO_BIG				enum FatalErrors
CALENDAR_REPLY_PREFIX_NOT_IN_ESCAPE_INFO		enum FatalErrors
;
; ReadPrefixAndConstructReplyPrefix should have made a reply prefix in
; escape info field.
;
CALENDAR_DATE_TIME_ILLEGAL_MONTH			enum FatalErrors
CALENDAR_DATE_TIME_ILLEGAL_DAY				enum FatalErrors
CALENDAR_DATE_TIME_ILLEGAL_HOUR				enum FatalErrors
CALENDAR_DATE_TIME_ILLEGAL_MINUTE			enum FatalErrors
CALENDAR_INTERNAL_ERROR					enum FatalErrors
CALENDAR_ENSURED_PASSWORD_FIELD_NOT_FOUND		enum FatalErrors
;
; ContactEnsureField has been called but password field is still not
; found.
;
CALENDAR_NO_SENT_TO_INFO_AVAILABLE			enum FatalErrors
CALENDAR_SENT_TO_ARRAY_OUT_OF_BOUND			enum FatalErrors
CALENDAR_NO_END_PROPERTY_FOUND_IN_VERSIT		enum FatalErrors
endif

if	UNIQUE_EVENT_ID
CALENDAR_PASSED_EVENT_ID_TOO_SMALL			enum Warnings
CALENDAR_FILE_STILL_NOT_VALID_DUMMY_VALUE_RETURNED	enum Warnings
CALENDAR_FILE_STILL_NOT_VALID_EVENT_ID_NOT_SET		enum Warnings

CALENDAR_ILLEGAL_EVENT_ID				enum FatalErrors
CALENDAR_EVENT_ID_OVERFLOW				enum FatalErrors
;
; Unique event ID overflows a dword; must be the end of the world.
;
endif

if	SEARCH_EVENT_BY_ID

CALENDAR_EVENT_ID_ARRAY_ELEMENT_NOT_FOUND		enum FatalErrors
; The event ID is not found in the event ID array.

CALENDAR_EVENT_ID_ARRAY_ID_ALREADY_EXISTS		enum FatalErrors
; There is already an element with the same event ID existing in the event ID
; array.

endif	; SEARCH_EVENT_BY_ID

endif	; UNIQUE_EVENT_ID

if	CALAPI

CALENDAR_MODIFY_EVENT_ERROR				enum FatalErrors
; There is an error during modification of event from calendar API
;

CALENDAR_ENUM_MULTIPLE_DAY_EVENT_ERROR			enum FatalErrors
; An error occurred while enumerating multiple day events
;

CALENDAR_ENUM_NORMAL_EVENT_ERROR			enum FatalErrors
; An error occurred while enumerating normal day events
; 

CALENDAR_EXPECTED_TIME_RANGES_TO_OVERLAP		enum FatalErrors
; It is expected the passed time ranges to overlap, but it is not.
;


endif	; CALAPI

