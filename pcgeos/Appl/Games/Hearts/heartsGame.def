COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		heartsGame.def

AUTHOR:		Peter Weck, Mar  1, 1993

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	PW	3/ 1/93   	Initial revision


DESCRIPTION:
	This file contains the definitions for heartsGame.asm
	
		
	$Id: heartsGame.def,v 1.1 97/04/04 15:19:27 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;------------------------------------------------------------------------------
;			Constants
;------------------------------------------------------------------------------


;;screen positions of decks

MYDECK_X_POSITION = 200			; South Side
MYDECK_Y_POSITION = 253

MYDISCARDDECK_X_POSITION = 200
MYDISCARDDECK_Y_POSITION = 130

; jfh - somehow these posits and the deck objects in hearts.ui got mixed
;       up and the order of play was counter-clockwise.  Reversed the below
;       posits and changed the name posits in hearts.ui and play is now
;       clockwise

;COMPUTERDECK1_X_POSITION = 110		; West Side
COMPUTERDECK1_X_POSITION = 425		; East Side
COMPUTERDECK1_Y_POSITION = 13

COMPUTERDECK2_X_POSITION = 200		; North Side
COMPUTERDECK2_Y_POSITION = 13

;COMPUTERDECK3_X_POSITION = 425		; East Side
COMPUTERDECK3_X_POSITION = 110		; West Side
COMPUTERDECK3_Y_POSITION = 13

DISCARDDECK_X_POSITION   = 278
DISCARDDECK_Y_POSITION   = 130

MYHAND_X_POSITION = 600
MYHAND_Y_POSITION = 400

SHOWLASTTRICKDECK_X_POSITION = 600
SHOWLASTTRICKDECK_Y_POSITION = 400

CHART_NAME_TEXT_X = 20
CHART_NAME_TEXT_Y = 260

CHART_PLAYER_TEXT_X = CHART_NAME_TEXT_X
CHART_PLAYER_TEXT_Y = CHART_NAME_TEXT_Y

CHART_HAND_TEXT_X = 75
CHART_HAND_TEXT_Y = CHART_NAME_TEXT_Y

CHART_GAME_TEXT_X = 130
CHART_GAME_TEXT_Y = CHART_NAME_TEXT_Y

CHART_SEPARATION_Y = 12
											  ; jfh add 3 more
CHART_EAST_NAME_TEXT_Y = CHART_NAME_TEXT_Y + (4*CHART_SEPARATION_Y) + 3 +3
CHART_NORTH_NAME_TEXT_Y = CHART_NAME_TEXT_Y + (3*CHART_SEPARATION_Y)+ 3 +3
CHART_WEST_NAME_TEXT_Y = CHART_NAME_TEXT_Y + (2*CHART_SEPARATION_Y) +3 +3
CHART_YOU_NAME_TEXT_Y = CHART_NAME_TEXT_Y + (1*CHART_SEPARATION_Y)+ 3 +3

;CHART_PLAYING_UNTIL_TEXT_X = 60   jfh
CHART_PLAYING_UNTIL_TEXT_X = 20
CHART_PLAYING_UNTIL_TEXT_Y = CHART_NAME_TEXT_Y + (2*CHART_SEPARATION_Y) + 50

;CHART_PLAYING_UNTIL_X = CHART_PLAYING_UNTIL_TEXT_X + (6*CHART_SEPARATION_Y)
CHART_PLAYING_UNTIL_X = CHART_GAME_TEXT_X  ; jfh
CHART_PLAYING_UNTIL_Y = CHART_NAME_TEXT_Y + (2*CHART_SEPARATION_Y) + 50

INSTRUCTION_TEXT_X = MYDECK_X_POSITION  ; jfh added
INSTRUCTION_TEXT_Y = MYDECK_Y_POSITION - 14
;INSTRUCTION_TEXT_WIDTH = 400
INSTRUCTION_TEXT_WIDTH = 225 ; jfh - so it won't clobber right deck
INSTRUCTION_TEXT_HEIGHT = 12

;;number of positive points needed to be taken to shoot the moon.

SHOOT_MOON_SCORE = 26
NUMBER_PASS_CARDS = 03h

SHOOTING_SET_AS_TAKER = -2
SHOOTING_NOT_POSSIBLE = -1
SHOOTING_NOT_DETERMINED = 0

APPRECIATE_QUEEN_OR_JACK_BEING_PLAYED_TIME = 120
APPRECIATE_QUEEN_OR_JACK_BEING_TAKEN_TIME = 120

SetWhatPartsOfPlayersData	etype	byte
SET_ASSUMPTIONS_FOR_ALL_PLAYERS		enum SetWhatPartsOfPlayersData, 1


;------------------------------------------------------------------------------
;			Definitions
;------------------------------------------------------------------------------


HeartsToggleOptionsSettings record

	:14,
	HTOS_CARD_MOVEMENT_BOOLEAN : 1	;set if you want to show the movement
					;of the cards
	HTOS_PASS_BOOLEAN : 1		;set if you want to pass 3 cards
					;each round
HeartsToggleOptionsSettings end



HeartsGameAttrs record
	:5,
	HGA_END_EARLY : 1		;This bit indicates that the user
					;selected not to end the game
					;even though all the points had
					;been played.
	HGA_PASSING_CARDS : 1		;This bit indicates if the game is in
					;the process of passing cards.
	HGA_DONT_SHOW_MOVEMENT : 1	;This bit indicates if the movement
					;of the cards should be shown.
HeartsGameAttrs end


HeartsSoundAttrs record
	:6,
	HSA_JACK_PLAYED : 1		;This bit indicates that the Jack of
					;Diamonds is in the current trick
	HSA_QUEEN_PLAYED : 1		;This bit indicates that the Queen of
					;Spades is in the current trick
HeartsSoundAttrs end


;------------------------------------------------------------------------------
;			Class & Method Definitions
;------------------------------------------------------------------------------

HeartsGameClass		class	GameClass




MSG_HEARTS_GAME_SET_PASS_CARDS			message

		;Will set the number of cards to pass

MSG_HEARTS_GAME_GAME_OVER			message

		;Puts a dialog box on the screen telling the user that
		;the game is over

MSG_HEARTS_GAME_SHOW_WINNERS			message

		;Will show the winners score on the screen in RED

MSG_HEARTS_GAME_CHECK_SHOOT_MOON		message

		;Will check if someone shot the moon and will adjust the
		;score accordingly.

MSG_HEARTS_GAME_GET_PLAYERS_SCORE		message

		;Will return either the highest or lowest players score
		;(lowest score if cx = 0 , or highest score if cx = 1)

MSG_HEARTS_GAME_CHECK_PLAY_SOUND		message

		;Will check to see if the Jack of Diamonds or the Queen of
		;Spades has just been played, and if so, it will play the
		;appropriate sound.

MSG_HEARTS_GAME_CHECK_TAKEN_SOUND		message

		;Will check if Jack or Queen was taken in this trick
		;and play appropriate sound.
		;

MSG_HEARTS_GAME_CHECK_HEARTS_BROKEN		message

		;Will return the instance data telling whether or not
		;hearts have been broken

MSG_HEARTS_GAME_SET_HEARTS_BROKEN		message

		;Will set the HGI_heartsBroken instance data to 1

MSG_HEARTS_GAME_GET_MAX_SCORE			message

		;returns the maximum score before game should end.

MSG_HEARTS_GAME_SET_MAX_SCORE			message

		;sets the maximum score before the game should end.

MSG_HEARTS_GAME_GET_CARDS_PLAYED		message

		;will get instance data, HGI_cardsPlayed

MSG_HEARTS_GAME_SET_CARDS_PLAYED		message

		;will set instance data, HGI_cardsPlayed

MSG_HEARTS_GAME_GET_TAKE_CARD_ATTR		message

		;will get the instance data HGI_takeCardAttr

MSG_HEARTS_GAME_SET_TAKE_CARD_ATTR		message

		;will set the instance data HGI_takeCardAttr

MSG_HEARTS_GAME_SET_TAKE_POINTER		message

		;will set the instance data HGI_takePointer

MSG_HEARTS_GAME_GET_TAKE_POINTER		message

		;will get the instance data HGI_takePointer

MSG_HEARTS_GAME_SET_LEAD_POINTER		message

		;will set the instance data HGI_leadPointer

MSG_HEARTS_GAME_GET_LEAD_POINTER		message

		;will get the instance data HGI_leadPointer

MSG_HEARTS_GAME_GET_NUMBER_OF_PASS_CARDS	message

		;Returns the instance data telling how many cards to pass

MSG_HEARTS_GAME_GET_GAME_ATTRS			message

		;will get the instance data HGI_gameAttributes

MSG_HEARTS_GAME_SET_GAME_ATTRS			message

		;will set the instance data HGI_gameAttributes

MSG_HEARTS_GAME_GET_ABSOLUTE_POINTS		message

		;Will return the sum of the absolute value of all the cards
		;that have been played so far.  (Will sum up the abs of all
		;the points of all the decks).  If the sum is equal to 
		;the maximum number of points, then activate the dialog
		;box asking if the user wants to trash the rest of the hand.

MSG_HEARTS_GAME_SKIP_TO_END_OF_HAND		message

		;Sent in response to dialog box put up after all the
		;points in the hand have been played. If the user
		;hits Yes to skip to the end of the hand this
		;message gets sent.

MSG_HEARTS_GAME_DONT_SKIP_TO_END_OF_HAND		message

		;Sent in response to dialog box put up after all the
		;points in the hand have been played. If the user
		;hits No to not skip to the end of the hand this
		;message gets sent.

MSG_HEARTS_GAME_TOGGLE_OPTIONS			message

		;Will toggle the bit indicating if the movement of
		;the cards should be shown or the bit indicating if 
		;sound should be on or not..

MSG_HEARTS_GAME_RESET_GAME			message

		;Will reset the scores for each deck and will
		;redeal the game

MSG_HEARTS_GAME_DEAL_ANOTHER_HAND		message
		;Will signal that all the cards have been played and bring
		;up a redeal trigger.

MSG_HEARTS_GAME_RESET_STUFF			message

		;reset the game and redeal

MSG_HEARTS_GAME_SETUP_NEIGHBORS			message

		;sets up the neighbor instance data for the players
		;of the hearts game

MSG_HEARTS_GAME_SETUP_SCORE			message

		;sets up the scores for the decks.  (Draws them on
		;the screen)

MSG_HEARTS_GAME_NEW_GAME			message

		;Deals the cards, sets up the score, does the passing, and
		;then starts the game.

MSG_HEARTS_GAME_SET_TRICK_DATA			message

		;Will add another trick to the chunk array (HI_playedCardPtr)
		;of each player.

MSG_HEARTS_GAME_SET_PLAYERS_DATA		message

		;Will set all the players data pointed to by HI_playerDataPtr 
		;to reflect the knowledge gained by a card being played.

MSG_HEARTS_GAME_SET_SHOOT_DATA			message

		;Will set the shoot data which indicates who, if anyone
		;is possibly trying to shoot.

MSG_HEARTS_GAME_GET_SHOOT_DATA			message

		;Will return who, if anyone, is possibly trying to shoot.

MSG_HEARTS_GAME_CHECK_IF_DECK_PLAYED		message

		;Will return when the deck will play a card (ie. 0 if
		;the deck is leading, and NUM_CARDS-1 if deck is last
		;deck to play)

MSG_HEARTS_GAME_DEAL				message

		;MSG_HEARTS_GAME_DEAL handler for HeartsGameClass
		;Deals out cards for a new Hearts game

MSG_HEARTS_GAME_FLIP_COMPUTER_DECKS		message

		;Will flip all the cards of the computer decks

MSG_HEARTS_GAME_CLOSE_MAX_SCORE			message

		;The Set Max Points dialog box is being closed.
		;reset the points.

MSG_HEARTS_GAME_RESET_GAME_WITH_QUEUE_FLUSH			message

	;Will reset the scores for each deck and will
	;redeal the game. But will go through great pains to make sure
	;that the queues get flushed before doing so. This fixes
	;some nasty synchronization problems caused by the computer 
	;decks queuing messages to each other. NOTE: this is a hack.

MSG_HEARTS_GAME_RESET_GAME_INTERNAL			message

	;Don't use this. It is used by 
	;MSG_HEARTS_GAME_RESET_GAME_WITH_QUEUE_FLUSH.

	;Pass - cx = repeat count

ATTR_HEARTS_GAME_OPEN	vardata	byte
; indicates that the game object is open and has not yet been saved
; to state.


;;instance data

HGI_maxScore		word		;Maximum score to play till
HGI_heartsBroken	byte		;indicates if hearts are broken
HGI_shootData		byte		;indicates who is trying to shoot
HGI_passCards		byte		;number of cards to pass
HGI_cardsPlayed		byte		;number of cards played in this trick
HGI_leadPointer		optr		;pointer to the deck that lead
HGI_takeCardAttr	byte		;Attr of card to take trick
HGI_takePointer		optr		;pointer to deck taking trick
HGI_gameAttributes	HeartsGameAttrs	;indicates if passing or not.
HGI_modalBox		optr		;the dialog box to bring up when 
					;restoring from state
HGI_modalMessage	word		;the message to send after the 
					;the modal box is ended.
HGI_soundAttributes	HeartsSoundAttrs	;indicates stuff about sound



HeartsGameClass		endc

