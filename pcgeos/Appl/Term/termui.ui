/*
 *
 * Project:	PC GEOS
 * Module:	Terminal program
 * File:	termui.ui
 *
 * Author:	Dennis Chow
 *
 *	This file contains the user Interface description for this
 * appilication.
 *
 *	$Id: termui.ui,v 1.5 98/04/28 18:57:06 joon Exp $
 *
 */

#define _NIKE           0
#define _NIKE_EUROPE    0

/*
 * For Telnet appl specific codes
 */
#ifdef	TELNET
	#define	_TELNET		1
#else
	#define	_TELNET		0
#endif

#ifdef	DO_DOVE
	#define _DOVE		1
	#define SCRIPT_VARIABLE	1
#else
	#define _DOVE		0
	#define SCRIPT_VARIABLE	0
#endif

/*
 * Responder features:
 *
 *	_CHAR_SET:	Allow alternate character set/font to be
 *			displayed at the same time with default
 *			font. The data is stored in the scrollback
 *			buffer as well.
 *	_SPECIAL_KEY:	Provide a list of special keys to be inserted
 *			as regular character if not found in
 *			conventional keyboard or there is a special
 *			byte sequence.
 *	_ACCESS_POINT:	Connection parameters are chosen from a list
 *			of predefined connections at startup.  The
 *			user can create and edit the connections.
 *	_MODEM_STATUS:	Display modem connection status dialog and report any
 *			error during connection. The user can terminate the
 *			connection at any time. Currently, it uses the data
 *			supplied by ACCESS_POINT feature. So _ACCESS_POINT
 *			flag has to be enabled. 
 *	Note:
 *
 *	If _SPECIAL_KEY is to be enabled for other products, please
 *	also modify the UI components. The codes is conditionally
 *	compiled for _SPECIAL_KEY condition so as to allow easier
 *	modification to enable this feature.
 */

	#define	_RESPONDER	0
	#define _CHAR_SET	0	
	#define	_SPECIAL_KEY	0
	#define _ACCESS_POINT	0
	#define _MODEM_STATUS	0
	#define _LOGIN_SERVER	0


#if DO_DBCS
/* doesn't work for DBCS because of larger character set */
#define INPUT_OUTPUT_MAPPING 0
#else
#define INPUT_OUTPUT_MAPPING 1
#endif

#if DO_PIZZA
#define CURSOR 1
#else
#define CURSOR 0
#endif

#include "generic.uih"


#if	_ACCESS_POINT
#include "accpnt.uih"
#endif


#include "Art/mkrGeoComm.ui"
#include "Art/mkrGeoCommTiny.ui"
#include "Art/mkrGeoCommDoc.ui"

#define	SINGLE_LINE_DISP_ATTRIBUTES \
	desiredWidthIsMin, desiredWidthIsMax, noWordWrapping, singleLineText
#define	SINGLE_LINE_EDIT_ATTRIBUTES \
	singleLineText, useTabForNavigation
#define	MULTI_LINE_DISP_ATTRIBUTES \
	desiredWidthIsMin, desiredWidthIsMax, noWordWrapping

/* Turning on the BULLET flag will cause GeoComm changes for bullet to be
   compiled. */
#define _BULLET 0


class TermApplication = GenApplication {

}

class ProtocolInteraction = GenInteraction {
	static	wordComp : 0;	/* comList */
	static	wordComp : 0;	/* baudList */
	static	wordComp : 0;	/* dataList */
	static	wordComp : 0;	/* parityList */
	static	wordComp : 0;	/* stopList */
	static	wordComp : 0;	/* flowList */
	static	wordComp : 0;	/* stopRemoteList */
	static	wordComp : 0;	/* stopLocalList */
}


class	TermTimedDialog = GenInteraction {
	minVisibility   = byteComp : MINIMUM_DIALOG_VISIBILITY;
	ttState		= byteComp : 0;
}

start InterfaceAppl;


MyApp = TermApplication {
	moniker = list {
	GeoCommTextMoniker,
	GeoCommLCMoniker,
	GeoCommLMMoniker,
	GeoCommSCMoniker,
	GeoCommSMMoniker,
	GeoCommYCMoniker,
	GeoCommYMMoniker,
	GeoCommSCGAMoniker,
	GeoCommTinyTCMoniker,
	GeoCommTinyTMMoniker,
	GeoCommTinyTCGAMoniker
	}

	children = TermPrimary;
	
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = TermPrimary;

	
	hints = {
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "newcomm", 0
		},

	}
}


#if	_TELNET
	visMoniker GeoCommTextMoniker = "Telnet";
#else
	visMoniker GeoCommTextMoniker =  "GeoComm";
	#endif

end InterfaceAppl;

start PrimaryInterface;

TermPrimary = GenPrimary {

	#if	_TELNET
	moniker = "Telnet";
	#else
	moniker = "GeoComm";
	#endif	/* _TELNET */




		children = TransferMenu, EditMenu, ViewMenu, SettingMenu, \
			DialMenu, TermView, PrimaryBoxes;

	hints = {
		HINT_DEFAULT_FOCUS,
		HINT_SIZE_WINDOW_AS_DESIRED,   	
#if ! _ACCESS_POINT
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
  		    SpecWinSizePair <   mask SWSS_RATIO or PCT_0, \
			   		mask SWSS_RATIO or PCT_0   >
		},
#endif
		ATTR_GEN_HELP_CONTEXT {
			char "TOC", 0
		}
	}
}


PrimaryBoxes = GenInteraction {
	attributes = default +notUserInitiatable;
	type = organizational;
	visibility = dialog;
	children = 
			RecvStatusSummons,
			AsciiRecvSummons,
			SendStatusSummons,
			ScriptSummons,
			CaptureBox,
			RecvAsciiBox,
			RecvXmodemBox,
			QuickDialBox,
			SerialBox,
			CodePageBox,



#if _ACCESS_POINT
			ConnectionSettingsDialog,
#endif
			HangingUpNotice;
}

end PrimaryInterface;





/*-----------------------------------------------------------------------------
	SettingMenu 
-----------------------------------------------------------------------------*/
start PrimaryInterface;

SettingMenu = GenInteraction {
	children = OptionsSubMenu, SerialSubMenu;
	visibility = popup;
	hints = { ATTR_GEN_INTERACTION_GROUP_TYPE { GenInteractionGroupType GIGT_OPTIONS_MENU } }
}

end PrimaryInterface;


start MenuInterface;

OptionsSubMenu = GenInteraction {
#if	_TELNET
	children = TermBox;	
#else
	children = ProtocolBox, TermBox, ModemBox;
#endif	/* _TELNET */
}

end MenuInterface;
	

/*-----------------------------------------------------------------------------
	Setup Box Port Settings
-----------------------------------------------------------------------------*/
#if	!_TELNET


start MenuInterface;

ProtocolBox = ProtocolInteraction {
	moniker = 'P', "Protocol";

	children = ProtocolSubList, HardwareHandshakeGroup,
		ProtocolApplyTrigger,
		ProtocolResetTrigger;
	type = properties;
	visibility = dialog;
	hints = { 
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbProtocol", 0
		}
	}
}

end MenuInterface;


start ProtocolUI;

ProtocolApplyTrigger = GenTrigger {
	/* moniker set by SPUI */
	genAttributes = default +signalInteractionComplete;
	action = MSG_GEN_APPLY, ProtocolBox;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}
ProtocolResetTrigger = GenTrigger {
	/* moniker set by SPUI */
	genAttributes = default +signalInteractionComplete;
	action = MSG_GEN_RESET, ProtocolBox;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_RESET}
	}
}

ProtocolSubList = GenInteraction {
	children = ComList, BaudGroup, DataList, ParityList, StopList, FlowList;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

ComList = GenItemGroup {
	moniker	= 'M', "Modem Port:";
	children = SetCom1, SetCom2, SetCom3, SetCom4;
	applyMsg = MSG_TERM_SET_PORT;
	destination =  process;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED
	}
}

SetCom1 = GenItem {
	moniker = '1', "Com1";			
	identifier	= MY_SERIAL_COM1;
}

SetCom2 = GenItem {
	moniker = '2', "Com2";			
	identifier	= MY_SERIAL_COM2;
}

SetCom3 = GenItem {
	moniker = '3', "Com3";			
	identifier	= MY_SERIAL_COM3;
}

SetCom4 = GenItem {
	moniker = '4', "Com4";			
	identifier	= MY_SERIAL_COM4;
}

/*-----------------------------------------------------------------------------
	Modem List
-----------------------------------------------------------------------------*/
BaudGroup = GenInteraction {
	moniker = 'B', "Baud Rate";
	children =
		BaudList;
}

BaudList = GenItemGroup {
	children =
		Set300,
		Set1200,
		Set2400,
		Set4800,
		Set9600,
		Set14400,
		Set19200,
		Set38400,
		Set57600,
		Set115200;
	applyMsg = MSG_TERM_SET_BAUD;
	destination = process;
	selection = SB_1200;
	numSelections = 1;
	hints	= {
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
}

Set115200 = GenItem {
	moniker = "115200";
	identifier	= SB_115200;
}

Set57600 = GenItem {
	moniker = "57600";
	identifier	= SB_57600;
}

Set38400 = GenItem {
	moniker = "38400";
	identifier	= SB_38400;
}

Set19200 = GenItem {
	moniker = "19200";
	identifier	= SB_19200;
}

Set14400 = GenItem {
	moniker = "14400";
	identifier	= SB_14400;
}

Set9600 = GenItem {
	moniker = "9600";
	identifier	= SB_9600;
}

Set4800 = GenItem {
	moniker = "4800";
	identifier	= SB_4800;
}

Set2400 = GenItem {
	moniker = "2400";
	identifier	= SB_2400;
}

Set1200 = GenItem {
	moniker = "1200";
	identifier	= SB_1200;
}

Set300 = GenItem {
	moniker = "300";
	identifier	= SB_300;
}

/*-----------------------------------------------------------------------------
	Character Data Settings
-----------------------------------------------------------------------------*/
DataList = GenItemGroup {
	moniker	= 'D', "Data Bits:";
	children = FiveBits, SixBits,SevenBits, EightBits;
	applyMsg = MSG_TERM_ADJUST_FORMAT1;
	destination = process;
	selection = "(SL_8BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
	numSelections = 1;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_TERM_ADJUST_USER_FORMAT
		}
	}
}

FiveBits = GenItem {
	moniker = "5";
	identifier="(SL_5BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

SixBits = GenItem {
	moniker = "6";
	identifier="(SL_6BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}


SevenBits = GenItem {
	moniker = "7";
	identifier="(SL_7BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

EightBits = GenItem {
	moniker = "8";
	identifier="(SL_8BITS shl offset SF_LENGTH) or (mask SF_LENGTH shl 8)";
}

/*-----------------------------------------------------------------------------
	Stop Bits
-----------------------------------------------------------------------------*/
StopList = GenItemGroup {
	moniker	= 'S', "Stop Bits:";
	children = OneBits, OneHalfBits, TwoBits;
	applyMsg = MSG_TERM_ADJUST_FORMAT2;
	destination = process;
	selection = SBO_ONE;
	numSelections = 1;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
	}
}

OneBits = GenItem {
	moniker = "1";
	identifier = SBO_ONE;
}

OneHalfBits = GenItem {
	moniker = "1.5";
	identifier = SBO_ONEANDHALF;
	genStates = default -enabled;
}

TwoBits = GenItem {
	moniker = "2";
	identifier = SBO_TWO;
}

/*-----------------------------------------------------------------------------
	Parity Settings
-----------------------------------------------------------------------------*/
ParityList = GenItemGroup {
	moniker	= 'P', "Parity:";
	children = NoParity, OddParity, EvenParity, MarkParity, SpaceParity;
	applyMsg = MSG_TERM_ADJUST_FORMAT3;
	destination = process;
	selection= "(SP_NONE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
	numSelections = 1;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
	}
}


NoParity = GenItem {
	moniker = "None";
	identifier= "(SP_NONE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

OddParity = GenItem {
	moniker = "Odd";
	identifier= "(SP_ODD shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

EvenParity = GenItem {
	moniker = "Even";
	identifier= "(SP_EVEN shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

SpaceParity = GenItem {
	moniker = "Space";
	identifier= "(SP_SPACE shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

MarkParity = GenItem {
	moniker = "Mark";
	identifier= "(SP_MARK shl offset SF_PARITY) or (mask SF_PARITY shl 8)";
}

/*-----------------------------------------------------------------------------
	Handshake Settings
-----------------------------------------------------------------------------*/

FlowList = GenBooleanGroup {
	moniker	= 'H', "Handshake:";
	children = FlowHardware, FlowSoftware, FlowNone;
	applyMsg = MSG_TERM_SET_FLOW;
	destination = process;
	selectedBooleans = "mask SFC_SOFTWARE";
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word	MSG_TERM_SET_USER_FLOW
		}
	}
}

FlowHardware = GenBoolean {
	moniker = "Hardware";
	identifier = "mask SFC_HARDWARE";
}

FlowSoftware = GenBoolean {
	moniker = "Software (XON/XOFF)";
	identifier = "mask SFC_SOFTWARE";
}

FlowNone = GenBoolean {
	moniker = "None";
	identifier = "mask FFB_NONE";
}

/*-----------------------------------------------------------------------------
	Hardware Handshaking options
-----------------------------------------------------------------------------*/

HardwareHandshakeGroup = GenInteraction {
	children = HardwareHandshakeTitle, StopRemoteList, StopLocalList;
	hints = {HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_DO_NOT_USE_MONIKER}
	genStates = default -enabled;
}

HardwareHandshakeTitle = GenText {
	genAttributes = default +readOnly;
	text = "Hardware Handshaking Options:";
	textDisplayAttributes = singleLineText;
}

StopRemoteList = GenBooleanGroup {
	moniker = 'R', "Stop Remote:";
	children = DTREntry, RTSEntry;
	applyMsg = MSG_TERM_STOP_REMOTE_SIGNAL;
	destination = process;
	selectedBooleans = "mask SMC_RTS";
	hints	= {
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word	MSG_TERM_USER_STOP_REMOTE_SIGNAL
		}
	}
}

DTREntry = GenBoolean {
	moniker = "DTR";
	identifier = "mask SMC_DTR";
}

RTSEntry = GenBoolean {
	moniker = "RTS";
	identifier = "mask SMC_RTS";
}

StopLocalList = GenBooleanGroup {
	moniker = 'L', "Stop Local:";
	children = CTSEntry, DCDEntry, DSREntry;
	applyMsg = MSG_TERM_STOP_LOCAL_SIGNAL;
	destination = process;
	selectedBooleans = "mask SMS_CTS";
}

CTSEntry = GenBoolean {
	moniker = "CTS";
	identifier = "mask SMS_CTS";
}

DCDEntry = GenBoolean {
	moniker = "DCD";
	identifier = "mask SMS_DCD";
}

DSREntry = GenBoolean {
	moniker = "DSR";
	identifier = "mask SMS_DSR";
}


end ProtocolUI;



#endif	/* !_TELNET */
/*-----------------------------------------------------------------------------
	ViewMenu 
-----------------------------------------------------------------------------*/


start PrimaryInterface;

ViewMenu = GenInteraction {
#if DO_PIZZA
	children = WindowSubMenu;	
#else
	children = FontSubMenu, WindowSubMenu;	
#endif
	visibility = popup;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_VIEW_MENU
		}
	}
}

end PrimaryInterface;

start MenuInterface;

FontSubMenu = GenInteraction {
	children = FontList;
}

FontList = GenItemGroup {
	children = SetBison9, SetBison12;
	applyMsg = MSG_SCR_BISON_9_OR_12;
	destination = screenObject;
	genAttributes = default +initiatesInputIgnore;
	selection = DEF_POINT_SIZE;
	numSelections = 1;
	hints	= {
		ATTR_GEN_INIT_FILE_KEY {
			char "defaultFont",0
		},
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

SetBison9 = GenItem {
	moniker = 'S', "Small Font";
	identifier = 9;			/* point size = 9 */
}

SetBison12 = GenItem {
	moniker = 'L', "Large Font";
	identifier = 12;		/* point size = 12 */
}

end MenuInterface;


/*-----------------------------------------------------------------------------
	Window Settings
-----------------------------------------------------------------------------*/


start MenuInterface;

WindowSubMenu = GenInteraction {
	children = WindowSize;
}

WindowSize = GenInteraction {
	moniker = 'W', "Window Size";
	children = WinLinesRange, WinColsRange;
	type = properties;
	visibility = dialog;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbWinSize", 0
		}
	}
}

end MenuInterface;


start Interface;

WinLinesRange = GenValue {
	moniker = "Window Lines:";
	minimum = 1;
	value	= 24;
	maximum = 24;  
	increment = 1;
	applyMsg = MSG_SCR_SET_WIN_LINES;
	destination = screenObject;
}

WinColsRange = GenValue {
	moniker = "Window Columns:";
	value	= 80;
	minimum = 1;
	maximum = 80;
	increment = 1;
	applyMsg = MSG_SCR_SET_WIN_COLS;
	destination = screenObject;		
}


end Interface;


/*-----------------------------------------------------------------------------
	Terminal Settings
-----------------------------------------------------------------------------*/

	
start MenuInterface;

TermBox = GenInteraction {
	moniker = 'T', "Terminal";
	children = TermEchoVideoList,
		TermReset;
	type = properties;
	visibility = dialog;
	hints	= {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbTermBox", 0
		}
	}
}

end MenuInterface;

start TermTypeUI;

TermEchoVideoList = GenInteraction {
	children = TermList, EchoVideoList;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}


TermList = GenItemGroup {
	moniker	= "Select Terminal:";
#if DO_PIZZA
	children = SetVt52, SetVt100;
#else
	children = SetTTY, SetVt52, SetVt100,SetWyse, SetAnsi, 
			SetIBM3101, SetTVI950;
#endif
	applyMsg = MSG_TERM_SET_TERMINAL;
	destination = process;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth  <SST_AVG_CHAR_WIDTHS, 15>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word	6
		},
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

#if DO_PIZZA
#else
SetTTY = GenItem {
	moniker = "TTY";
	identifier	= TTY;
}

SetAnsi = GenItem {
	moniker = "ANSI";
	identifier	= ANSI;
}

SetWyse = GenItem {
	moniker = "WYSE 50";
	identifier	= WYSE50;
}
#endif

SetVt52 = GenItem {
	moniker = "VT 52";
	identifier	= VT52;
}

SetVt100 = GenItem {
	moniker = "VT 100";
	identifier	= VT100;
}

#if DO_PIZZA
#else
SetIBM3101 = GenItem {
	moniker = "IBM 3101";
	identifier	= IBM3101;
}

SetTVI950 = GenItem {
	moniker = "TVI 950";
	identifier	= TVI950;
}
#endif

/*-----------------------------------------------------------------------------
	Echo List
-----------------------------------------------------------------------------*/
EchoVideoList = GenInteraction {
	children = EchoList, VideoList, CodePageButton;
	hints	= {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

EchoList = GenItemGroup {
	moniker	= "Duplex:";
	children = HalfDuplex, FullDuplex;
	applyMsg = MSG_TERM_SET_DUPLEX;
	destination = process;
	selection = FALSE;
	numSelections = 1;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

HalfDuplex = GenItem {
	moniker = "Half (local echo)";
	identifier = TRUE;
}

FullDuplex = GenItem {
	moniker = "Full (full echo)";
	identifier = FALSE;
}

/*-----------------------------------------------------------------------------
	Video Settings
-----------------------------------------------------------------------------*/

VideoList = GenBooleanGroup {
	children = AutoWrap, AutoLinefeed;
	applyMsg = MSG_SCR_AUTO_LINEFEED_AND_WRAP;
	destination = screenObject;
	selectedBooleans = "mask LAW_WRAP";
	hints	= {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

AutoLinefeed = GenBoolean {
	moniker = "Auto Linefeed";
	identifier	= "mask LAW_LINEFEED";
}

AutoWrap = GenBoolean {
	moniker = "Wrap Lines at Edge";
	identifier	= "mask LAW_WRAP";
}

/*-----------------------------------------------------------------------------
	Code Page Selection box
-----------------------------------------------------------------------------*/

CodePageButton = GenTrigger {
	moniker = 'C', "Host Code Page";
	action = MSG_TERM_BRING_UP_CODE_PAGE_BOX, process;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

CodePageBox = GenInteraction {
	moniker = "Host Code Page";
	children = CodePageList;
	type = properties;
	visibility = dialog;
	hints = { 
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbCodePage", 0
		}
	}
}

CodePageList = GenItemGroup {
	moniker	= "Select Host Code Page:";
	children = CP437, CP850,
#if DO_PIZZA
		CPJIS, CPSJIS, CPEUC;
#else
		CP860, CP863, CP865;
#endif
	applyMsg = MSG_TERM_SET_CODE_PAGE;
	destination = process;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 25>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		}
	}
}

CP437 = GenItem {
	moniker = "U.S. (437)";
	identifier	= 437;
}

CP850 = GenItem {
	moniker = "Multilingual (850)";
	identifier	= 850;
}

#if DO_PIZZA
CPJIS = GenItem {
	moniker = "JIS";
	identifier = CODE_PAGE_JIS;
}

CPSJIS = GenItem {
	moniker = "SJIS";
	identifier = CODE_PAGE_SJIS;
}

CPEUC  = GenItem {
	moniker = "EUC";
	identifier = CODE_PAGE_EUC;
} 
#else
CP860 = GenItem {
	moniker = "Portuguese (860)";
	identifier	= 860;
}

CP863 = GenItem {
	moniker = "Canadian-French (863)";
	identifier	= 863;
}

CP865 = GenItem {
	moniker = "Nordic (865)";
	identifier	= 865;
}
#endif

TermReset = GenTrigger {
	action = MSG_TERM_TERM_RESET, process;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_RESET}
	}
}

end TermTypeUI;


/*-----------------------------------------------------------------------------
	File Transfer Menu 
-----------------------------------------------------------------------------*/

start PrimaryInterface;

TransferMenu = GenInteraction {
	children = AsciiSubMenu, XModemSubMenu, CaptureSubMenu, ExitSubMenu;
	visibility = popup;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_FILE_MENU
		}
	}
}

end PrimaryInterface;


#if	_MODEM_STATUS

start	ConnectionIndicatorUI;

/*
 *
 * 	Disconnect dialog
 *
 */
DisconnectionIndicatorDialog = TermTimedDialog {
	type = multipleResponse;
	visibility = dialog;
	children = DisconnectDialogGroup;
	attributes = default +modal, +notUserInitiatable;
	hints = {
		HINT_WINDOW_NO_TITLE_BAR,
		HINT_DRAW_IN_BOX,
	}
}

DisconnectDialogGroup = GenInteraction {
	type = organizational;
	children = DisconnectDialogInsideGroup;
	hints = {
                HINT_CENTER_CHILDREN_VERTICALLY,
                HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_FIXED_SIZE {
	                SpecWidth <SST_PIXELS, DISCONNECT_NOTE_WIDTH>
	                SpecHeight <SST_PIXELS, DISCONNECT_NOTE_HEIGHT>
		},
	}
}

DisconnectDialogInsideGroup = GenInteraction {
	type = organizational;
	children = DisconnectDialogText;
	hints = {
                HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
                HINT_FIXED_SIZE {
                        SpecWidth <SST_PIXELS,
			DISCONNECT_NOTE_WIDTH - DISCONNECT_NOTE_X_INDENT>
                        SpecHeight <SST_PIXELS, 
			DISCONNECT_NOTE_HEIGHT - DISCONNECT_NOTE_Y_INDENT>
                }
        }
}	

#if	_TELNET
	
chunk	disconnectText = "Disconnecting from the network";
chunk	disconnectTimeoutText = "Disconnecting from the network due to time-out"; 
	
#else
	
chunk	disconnectText = "Disconnecting...";

#endif	/* _TELNET */
	
DisconnectDialogText = GenText {
#if	_TELNET
	/*
	 * The text must be null initially so that text is copied to a new
	 * chunk when object is built instead of referencing a string chunk.
	 */
	text = "";
#else
	text = disconnectText;
#endif	/* _TELNET */
        genAttributes = default +readOnly;
        hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_MINIMUM_SIZE {
			 SpecWidth  <> 
			 SpecHeight <SST_LINES_OF_TEXT, 2>
		},
                ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
                    VisTextDefaultCharAttr <
                        0, 0, 1,                /* underline, bold, italic */
                        C_BLACK,                /* color */
                        VTDS_FOAM_NORMAL,       /* size */
                        VTDF_RESPONDER          /* font */
                    >
                }
        }
}
	
/*
 *
 * 	StopCapture dialog
 *
 */
StopCaptureIndicatorDialog = TermTimedDialog {
	type = multipleResponse;
	visibility = dialog;
	children = StopCaptureDialogGroup;
	attributes = default +modal, +notUserInitiatable;
	hints = {
		HINT_WINDOW_NO_TITLE_BAR,
		HINT_DRAW_IN_BOX,
	}
}

StopCaptureDialogGroup = GenInteraction {
	type = organizational;
	children = StopCaptureDialogInsideGroup;
	hints = {
                HINT_CENTER_CHILDREN_VERTICALLY,
                HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_FIXED_SIZE {
	                SpecWidth <SST_PIXELS, STOP_CAPTURE_NOTE_WIDTH>
	                SpecHeight <SST_PIXELS, STOP_CAPTURE_NOTE_HEIGHT>
		},
	}
}

StopCaptureDialogInsideGroup = GenInteraction {
	type = organizational;
	children = StopCaptureDialogText;
	hints = {
                HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
                HINT_FIXED_SIZE {
                        SpecWidth <SST_PIXELS,
			STOP_CAPTURE_NOTE_WIDTH - STOP_CAPTURE_NOTE_X_INDENT>
                        SpecHeight <SST_PIXELS, 
			STOP_CAPTURE_NOTE_HEIGHT - STOP_CAPTURE_NOTE_Y_INDENT>
                }
        }
}	

chunk stopCaptureText = "Saving captured text.";

StopCaptureDialogText = GenText {
	text = stopCaptureText;
        genAttributes = default +readOnly;
        hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
                ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
                    VisTextDefaultCharAttr <
                        0, 0, 1,                /* underline, bold, italic */
                        C_BLACK,                /* color */
                        VTDS_FOAM_NORMAL,       /* size */
                        VTDF_RESPONDER          /* font */
                    >
                }
        }
}

/*
 *
 *	Connect dialog
 *
 */
ConnectionIndicatorDialog = FoamProgressDialog {

#if _TELNET
	hints = {
		HINT_MINIMIZE_CHILD_SPACING,
	}
#endif /* _TELNET */

}

/*
 *
 * 	Cancel connection dialog
 *
 */
CancelConnectionDialog = GenInteraction {
	type = multipleResponse;
	visibility = dialog;
	children = CancelConnectionDialogGroup;
	attributes = default +modal, +notUserInitiatable;
	hints = {
		HINT_WINDOW_NO_TITLE_BAR,
		HINT_DRAW_IN_BOX,
	}
}

CancelConnectionDialogGroup = GenInteraction {
	type = organizational;
	children = CancelConnectionDialogInsideGroup;
	hints = {
                HINT_CENTER_CHILDREN_VERTICALLY,
                HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_FIXED_SIZE {
	                SpecWidth <SST_PIXELS, CANCEL_CONNECT_NOTE_WIDTH>
	                SpecHeight <SST_PIXELS, CANCEL_CONNECT_NOTE_HEIGHT>
		},
	}
}
CancelConnectionDialogInsideGroup = GenInteraction {
	type = organizational;
	children = CancelConnectionDialogText;
	hints = {
                HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
                HINT_FIXED_SIZE {
                        SpecWidth <SST_PIXELS,
			CANCEL_CONNECT_NOTE_WIDTH - CANCEL_CONNECT_NOTE_X_INDENT>
                        SpecHeight <SST_PIXELS, 
			CANCEL_CONNECT_NOTE_HEIGHT - CANCEL_CONNECT_NOTE_Y_INDENT>
                }
        }
}	

#if	_TELNET

chunk cancelConnectionText = "Cancelling network operation";

#else 	/* _TELNET */

chunk cancelConnectionText = "Cancelling connection";

#endif	/* _TELNET */
	
CancelConnectionDialogText = GenText {
	text = cancelConnectionText;
        genAttributes = default +readOnly;
        hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
                ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
                    VisTextDefaultCharAttr <
                        0, 0, 1,                /* underline, bold, italic */
                        C_BLACK,                /* color */
                        VTDS_FOAM_NORMAL,       /* size */
                        VTDF_RESPONDER          /* font */
                    >
                }
        }
}
	
#if _TELNET
/*
 *
 *	Medium busy dialog
 *
 */
MediumBusyDialog = GenInteraction {
	children = MediumBusyTextGroup,
		MediumBusyUseActiveTrigger,
		MediumBusyReconnectTrigger,
		MediumBusyCancelTrigger;
	visibility = popup;
	type = command;
	attributes = default +modal, +notUserInitiatable,
			+initiatedViaUserDoDialog;
}

chunk NoteTextMoniker = "Note:";
localize "Title of medium busy note";
MediumBusyTextGroup = ComplexMoniker {
	ComplexMoniker = GenInteraction;
	topText = "offset NoteTextMoniker";
	iconBitmap = CMB_WARNING_TITLE_ICON;
	textStyle = italic;
	fontSize = FOAM_NORMAL_FONT_SIZE;
	children = MediumBusyQuestionText;

	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_PLACE_MONIKER_ABOVE,
		ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT,
		HINT_COMPLEX_MONIKER_DONT_DRAW_SEPARATOR,
		HINT_INDENT_CHILDREN,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_MINIMUM_SIZE {
			SpecWidth<SST_PIXELS, FOAM_DEFAULT_BUBBLE_WIDTH>
			SpecHeight<>
		        },

	}
}

MediumBusyQuestionText = GenText {
	genAttributes = default +readOnly;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FIXED_SIZE {
			SpecWidth<>
			SpecHeight<SST_LINES_OF_TEXT, 7>
			},
		ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
			VisTextDefaultCharAttr <
			0, 0, 1,		/* underline, bold, italic */
			C_BLACK,		/* color */
			VTDS_FOAM_NORMAL,	/* size */
			VTDF_RESPONDER  	/* font */
			>
		},
	}
}

chunk UseActiveText = "Use active";
localize "Title of button for chooing to use the active data call for the connection.";

MediumBusyUseActiveTrigger = ComplexMoniker {
	ComplexMoniker = GenTrigger;
	topText = "offset UseActiveText";
	genAttributes = default +signalInteractionComplete;
	hints = {
                ATTR_GEN_TRIGGER_INTERACTION_COMMAND { 
                        word IC_APPLY
                },	
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_MENU_BAR,
		HINT_SEEK_REPLY_BAR,
		HINT_SEEK_SLOT {
			word 0
		},
	}
}

chunk ReconnectText = "Reconnect";
localize "Title of button for choosing to disconnect current data call and make a new connection.";

MediumBusyReconnectTrigger = ComplexMoniker {
	ComplexMoniker = GenTrigger;
	topText = "offset ReconnectText";
	genAttributes = default +signalInteractionComplete;
	hints = {
                ATTR_GEN_TRIGGER_INTERACTION_COMMAND { 
                        word IC_RESET
                },	
		HINT_SEEK_MENU_BAR,
		HINT_SEEK_REPLY_BAR,
		HINT_SEEK_SLOT {
			word 1
		},
	}
}

MediumBusyCancelTrigger = ComplexMoniker {
	ComplexMoniker = GenTrigger;
	topText = CMT_CANCEL;
	genAttributes = default +signalInteractionComplete;
	hints = {
                ATTR_GEN_TRIGGER_INTERACTION_COMMAND { 
                        word IC_DISMISS
                },	
		HINT_SEEK_MENU_BAR,
		HINT_SEEK_REPLY_BAR,
		HINT_SEEK_SLOT {
			word 3
		},
	}
}

#endif /* _TELNET */

end	ConnectionIndicatorUI;
	
#endif	/* MODEM_STATUS */
/*-----------------------------------------------------------------------------
	DialMenu 
-----------------------------------------------------------------------------*/

	
start PrimaryInterface;

DialMenu = GenInteraction {
	moniker = 'D', "Dial";
    #if _LOGIN_SERVER
   	children = MacroFileBox, QuickDialTrig, HangUpTrig, \
		   ContinueLoginTrigger;
    #else
        children = MacroFileBox, QuickDialTrig, HangUpTrig;
    #endif /* _LOGIN_SERVER */
	visibility = popup;
}
end PrimaryInterface;


start MenuInterface;

HangUpTrig = GenTrigger {
	moniker = 'H', "Hang Up";
	action = MSG_HANG_UP, process;
}

#if _LOGIN_SERVER
ContinueLoginTrigger = GenTrigger {
	moniker = 'C', "Close" ;
	genStates = default -usable;
	action = MSG_TERM_DETACH_FROM_PORT, process;
	hints = {
		HINT_SEEK_MENU_BAR,
		HINT_SEEK_REPLY_BAR,
		HINT_SEEK_SLOT {
			word	3
		},
		ATTR_GEN_TRIGGER_ACTION_DATA {
			LoginResponse <0, LS_CONTINUE>
		},
		/* This doesn't come into play - it's just to keep  */
		/* UI from putting its own cancel trigger in        */
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word IC_DISMISS
		},
	}
}
#endif /* _LOGIN_SERVER */


end MenuInterface;


	
start Interface;

HangingUpNotice = GenInteraction {
	children = HangingUpText;
	attributes = default +modal;
	visibility = dialog;
}
HangingUpText = GenGlyph {
	moniker = "Hanging Up...";
}

end Interface;

/*-----------------------------------------------------------------------------
	MacroFileBox 
-----------------------------------------------------------------------------*/


start MenuInterface;

MacroFileBox = GenInteraction {
	moniker = 'S', "Scripts";
	children = MacroFiles, OpenMacTrigger;
	type = command;
	visibility = dialog;
	hints = {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbMacroBox", 0
		}
	}
}

QuickDialTrig = GenTrigger {
	moniker = 'Q', "Quick Dial";
	genStates = default -enabled;
	action = MSG_QUICK_DIAL_SUMMONS, process;
	hints = { 
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

end MenuInterface;


start Interface;

QuickDialBox = GenInteraction {
	moniker = "Quick Dial";
	children = PhoneNum, DoDial, CancelDial;
	attributes = default +notUserInitiatable;
	type = command;
	visibility = dialog;
	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbQuickDial", 0
		}
	}	
}

PhoneNum = GenText {
	moniker	= "Phone #:";
	textDisplayAttributes = SINGLE_LINE_EDIT_ATTRIBUTES;
	maxLength = MAX_PHONE_NUMBER_CHARS;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT, HINT_DEFAULT_FOCUS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 2*72>
			SpecHeight <>
		}
	}
}

DoDial = GenTrigger {
	moniker = 'D', "Dial";
	action = MSG_TERM_QUICK_DIAL, process;
	genAttributes = default +initiatesInputIgnore,
				+signalInteractionComplete;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

CancelDial = GenTrigger {
	genAttributes = default +signalInteractionComplete;
	action = MSG_TERM_QUICK_ABORT, process;
	hints = { HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS} }
}


end Interface;


/*-----------------------------------------------------------------------------
	EditMenu 
-----------------------------------------------------------------------------*/

start PrimaryInterface;

EditMenu = GenInteraction {
	children = EditSubMenu, MessageSubMenu;
	visibility = popup;
	hints = { ATTR_GEN_INTERACTION_GROUP_TYPE { GenInteractionGroupType GIGT_EDIT_MENU } }
}

end PrimaryInterface;


start MenuInterface;


EditSubMenu = GenInteraction {
	children = CopySelect, PasteSelect;
}


CopySelect = GenTrigger ignoreDirty {
	COPY_TRIGGER_VALUES
	genStates = default -enabled;
	action = MSG_META_CLIPBOARD_COPY, screenObject;
	genAttributes = default +initiatesInputIgnore;
}

PasteSelect = GenTrigger ignoreDirty {
	PASTE_TRIGGER_VALUES
	genStates = default -enabled;
	action = MSG_META_CLIPBOARD_PASTE, screenObject;
	genAttributes = default +initiatesInputIgnore;
}

MessageSubMenu = GenInteraction {
	children = EditBox;
}

EditBox = GenInteraction {
	moniker = 'M', "Message";
	children = ChatText, ChatSend;
	type = command;
	visibility = dialog;
	hints = { 
/*************************************************************************/
/* Being resizable complicates matters; the text doesn't resize when the */
/* DB resizes.  6/14/95 - ptrinh                                         */
/*		HINT_INTERACTION_MAKE_RESIZABLE,                         */
/*************************************************************************/
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbEditBox", 0
		}
	}
}

end MenuInterface;


start Interface;

ChatText = GenText {
	/*genFont = system;*/
	textDisplayAttributes = noWordWrapping, initScrolling;
	hints = { 
		HINT_DEFAULT_FOCUS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 4*72>
			SpecHeight <SST_LINES_OF_TEXT, 5>
		}
	}
}

ChatSend = GenTrigger {
	moniker = 'S', "Send";
	genStates = default -enabled;
	action = MSG_SEND_CHAT, process;
	genAttributes = default +initiatesInputIgnore;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

end Interface;


/*-----------------------------------------------------------------------------
	Body of DISPLAY
-----------------------------------------------------------------------------*/

start PrimaryInterface;


TermView = GenView {
	output = screenObject;		/* all methods to screen object */
	viewAttributes	= dragScrolling, focusable;
	horizIncrement = DEF_FONT_WIDTH;
	vertIncrement = DEF_FONT_HEIGHT;

	horizAttributes = scrollable, sizeAMultipleOfIncrement, 
			  noLargerThanContent;	


	vertAttributes = scrollable, sizeAMultipleOfIncrement,
			 noLargerThanContent;
	
	docRight = MAX_WIDTH;
	docBottom = MAX_HEIGHT;
	hints = { 
		HINT_DEFAULT_FOCUS,
		HINT_INITIAL_SIZE {
			SpecWidth <SST_PIXELS, INIT_WIDTH>
			SpecHeight <SST_PIXELS, INIT_HEIGHT>
		},
	}
}



end PrimaryInterface;

/*-----------------------------------------------------------------------------
	Modem Settings
-----------------------------------------------------------------------------*/
#if	!_TELNET


start MenuInterface;

ModemBox = GenInteraction {
	moniker = 'M', "Modem";
	children = ModemStuff,
		ModemReset;
	genStates = default -enabled;
	type = properties;
	visibility = dialog;
	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY, 
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbModemBox", 0
		}
	}
}

end MenuInterface;


start ModemUI;

ModemStuff = GenInteraction {
	children = ModemDial, 
		ModemSpeaker, 
		ModemVolume;
	hints	= {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

ModemDial = GenItemGroup {
	children = ToneDial, PulseDial;
	moniker = "Phone Type:";
	applyMsg = MSG_TERM_SET_DIAL;
	destination = process;
	selection = TRUE;
	numSelections = 1;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

ToneDial = GenItem {
	moniker = "Touch Tone";
	identifier	= TRUE;
}

PulseDial = GenItem {
	moniker = "Rotary";
	identifier	= FALSE;
}

ModemSpeaker = GenItemGroup {
	moniker = "Modem Speaker:";
	children = OnTilCarrier, OnUnlessDial, AlwaysOn, AlwaysOff;
	applyMsg = MSG_MODEM_SPEAKER;
	destination = process;
	selection = MODEM_SPEAKER_CARRIER;
	numSelections = 1;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

OnTilCarrier = GenItem {
	moniker = "On Until Connect";
	identifier	= MODEM_SPEAKER_CARRIER;
}

AlwaysOn = GenItem {
	moniker = "Always On";
	identifier	= MODEM_SPEAKER_ON;
}

AlwaysOff = GenItem {
	moniker = "Always Off";
	identifier	= MODEM_SPEAKER_OFF;
}

OnUnlessDial = GenItem {
	moniker = "On Unless Dialing";
	identifier	= MODEM_SPEAKER_DIALING;
}

ModemVolume = GenItemGroup {
	moniker = "Speaker Volume:";
	children = HiVol, MedVol, LowVol;
	applyMsg = MSG_MODEM_VOLUME;
	destination = process;
	selection = MODEM_VOLUME_MED;
	numSelections = 1;
	hints	= {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

HiVol = GenItem {
	moniker = "High";
	identifier	= MODEM_VOLUME_HI;
}

MedVol = GenItem {
	moniker = "Medium";
	identifier	= MODEM_VOLUME_MED;
}

LowVol = GenItem {
	moniker = "Low";
	identifier	= MODEM_VOLUME_LO;
}

ModemReset = GenTrigger {
	action = MSG_TERM_MODEM_RESET, process;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_RESET}
	}
}

end ModemUI;


#endif	/* !_TELNET */
/*-----------------------------------------------------------------------------
	Serial Box ( Line status )
-----------------------------------------------------------------------------*/
	
start MenuInterface;

SerialSubMenu = GenInteraction {
	children = SerialTrig;
}

SerialTrig = GenTrigger {
	moniker = 'S', "Show Line Status";
	action = MSG_SERIAL_STATUS, process;
	hints = { 
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

end MenuInterface;


start LineStatUI;

SerialBox = GenInteraction {
	moniker = 'S', "Show Line Status";
	children = ReadWriteErr, FrameParityErr, SerResetTrigger;
	type = command;
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = { 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbSerialBox", 0
		}
	}
}

ReadWriteErr = GenInteraction {
	children = ReadErr, WriteErr;
	hints   = { HINT_ORIENT_CHILDREN_HORIZONTALLY }
}

FrameParityErr = GenInteraction {
	children = FrameErr, ParityErr;
	hints   = { HINT_ORIENT_CHILDREN_HORIZONTALLY }
}

ReadErr = GenText {
	genAttributes = default +readOnly;
	moniker = "Read Errors:";
	text = "0";
	textDisplayAttributes = singleLineText, noWordWrapping, allowTextOffEnd,
				dontScrollToChanges;
	hints = { 
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

WriteErr = GenText {
	genAttributes = default +readOnly;
	moniker = "Write Errors:";
	text = "0";
	textDisplayAttributes = singleLineText, noWordWrapping, allowTextOffEnd,
				dontScrollToChanges;
	hints = { 
	    	HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

FrameErr = GenText {
	genAttributes = default +readOnly;
	moniker = "Frame Errors:";
	text = "0";
	textDisplayAttributes = singleLineText, noWordWrapping, allowTextOffEnd,
				dontScrollToChanges;
	hints = { 
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

ParityErr = GenText {
	genAttributes = default +readOnly;
	moniker = "Parity Errors:";
	text = "0";
	textDisplayAttributes = singleLineText, allowTextOffEnd,
	dontScrollToChanges;
	hints = { 
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

SerResetTrigger = GenTrigger {
	moniker = "Reset Counters";
	action = MSG_SERIAL_RESET, process;
	hints = { HINT_SEEK_REPLY_BAR }
}

end	LineStatUI;
	

/*-----------------------------------------------------------------------------
	File Transfer Menu
-----------------------------------------------------------------------------*/

start MenuInterface;

AsciiSubMenu = GenInteraction {
	children = SendAsciiBox, RecvAsciiTrig;
	genStates = default -enabled;
}

SendAsciiBox = GenInteraction {
	moniker = 'T', "Type From Text File";
	children = TextSendFileSelector, TextSendSettings, \
		TextSendTrigger;
	type = command;
	visibility = dialog;
	hints 	= { 
		HINT_ORIENT_CHILDREN_VERTICALLY, 
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbSendAscii", 0
		}
	} 
}

RecvAsciiTrig = GenTrigger {
	moniker = 'C', "Capture to Text File";
	action = MSG_ASCII_RECV_SUMMONS, process;
	hints = { 
		HINT_TRIGGER_BRINGS_UP_WINDOW,
	}

}
end MenuInterface;


start TransferUI;

RecvAsciiBox = GenInteraction {
	moniker = "Capture to Text File";
	children =
		TextRecvFileGlyph,
		TextRecvFileSelector,
		TextRecvSettings,		
		TextRecvTextEdit,
		TextRecvFileTrigger;
	attributes = default +notUserInitiatable;
	type = command;
	visibility = dialog;
	hints = {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbRevAscii", 0
		}
	}
}


end TransferUI;


start MenuInterface;

XModemSubMenu = GenInteraction {
	children = SendXmodemBox, RecvXmodemTrig;
	genStates = default -enabled;
}

SendXmodemBox = GenInteraction {
	moniker = 'S', "Send XMODEM";
	children = SendFileSelector, SendSettings, SendTrigger;
	type = command;
	visibility = dialog;
	hints 	= { 
		HINT_ORIENT_CHILDREN_VERTICALLY, 
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbSendXmodem", 0
		}
	} 
}

RecvXmodemTrig = GenTrigger {
	moniker = 'R', "Receive XMODEM";
	action = MSG_XMODEM_RECV_SUMMONS, process;
	hints = { 
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
end MenuInterface;



start TransferUI;

RecvXmodemBox = GenInteraction {
	moniker = "Receive XMODEM";
	children =
		RecvFileGlyph,
		RecvFileSelector, 
		XModemRecvSettings,		
		RecvTextEdit,
		RecvFileTrigger;
	attributes = default +notUserInitiatable;
	type = command;
	visibility = dialog;
	hints = {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbRevXmodem", 0
		}
	}
}

/*-----------------------------------------------------------------------------
	Ascii Send UI Objects 
-----------------------------------------------------------------------------*/
TextSendFileSelector = GenFileSelector {
	moniker	= "Select text file to type:";
	fileCriteria = dirs, nonGeosFiles;
	action = MSG_ASCII_SEND_SELECT, process;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION, 
		HINT_PLACE_MONIKER_ABOVE
	}
}

TextSendTrigger = GenTrigger {
	moniker = 'T', "Type";
	action = MSG_ASCII_SEND_START, process;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

TextSendSettings = GenInteraction {
	children = TextSendList;
}

TextSendList = GenBooleanGroup {
	children = StripLineFeed;
	selectedBooleans = "mask TSF_STRIP_LINEFEED";
}

StripLineFeed = GenBoolean {
	moniker = "Strip Linefeeds From Text";
	identifier = "mask TSF_STRIP_LINEFEED";
}

/*-----------------------------------------------------------------------------
	Ascii Receive UI Objects 
-----------------------------------------------------------------------------*/
TextRecvFileGlyph = GenGlyph {
	moniker = "Select folder and enter filename for capture:";
	hints = { HINT_CENTER_CHILDREN_HORIZONTALLY }
}

TextRecvFileSelector = GenFileSelector {
	fileCriteria = dirs;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION
	}
}

TextRecvTextEdit = GenText {
	moniker = "Capture File:";
	text = "capture.txt";
	maxLength = 12;                         
	textDisplayAttributes = SINGLE_LINE_EDIT_ATTRIBUTES;
	hints = {
		ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES, 
		HINT_DEFAULT_FOCUS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 15>
			SpecHeight <>
		}
	}
}

TextRecvSettings = GenInteraction {
	children = TextRecvList;
	hints	= { 
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

TextRecvList = GenBooleanGroup {
	children = ConvertCR;
	selectedBooleans = "mask TRF_CONVERT_CR";
}

ConvertCR = GenBoolean {
	moniker = "End Lines With CR/LF";
	identifier = "mask TRF_CONVERT_CR";
}

TextRecvFileTrigger = GenTrigger {
	moniker = 'C', "Capture";
	action = MSG_ASCII_RECV_START, process;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

/*-----------------------------------------------------------------------------
	Xmodem Send UI Objects 
-----------------------------------------------------------------------------*/

SendFileSelector = GenFileSelector {
	moniker	= "Select file to send:";
	action = MSG_XMODEM_SEND_SELECT, process;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION, 
		HINT_PLACE_MONIKER_ABOVE
	}
}

SendTrigger = GenTrigger {
	moniker = 'S', "Send";
	action = MSG_XMODEM_SEND_START, process;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

SendSettings = GenInteraction {
	children = SendPacketSize;
}

SendPacketSize = GenItemGroup {
	moniker = "Packet Size:";
	children = SendStandard, Send1K;
	selection = 128;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

SendStandard = GenItem {
	moniker = "128 bytes";
	identifier = 128;
}

Send1K = GenItem {
	moniker = "1K blocks";
	identifier = 1024;
}

/*-----------------------------------------------------------------------------
	Xmodem Recv UI Objects 
-----------------------------------------------------------------------------*/


RecvFileGlyph = GenGlyph {
	moniker = "Select folder and enter filename for receive:";
	hints = { HINT_CENTER_CHILDREN_HORIZONTALLY }
}
	

RecvFileSelector = GenFileSelector {
	fileCriteria = dirs;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION
	}
}

RecvTextEdit = GenText {
	moniker = "Receive File:";
	maxLength = 12;                         
	textDisplayAttributes = SINGLE_LINE_EDIT_ATTRIBUTES;
	hints = {
		ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES, 
		HINT_DEFAULT_FOCUS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_WIDE_CHAR_WIDTHS, 12>
			SpecHeight <>
		}
	}
						/* Modified */
}

XModemRecvSettings = GenInteraction {
/*	moniker = "XModem Settings";	*/
	children = RecvFileType, RecvProtocol;
	hints	= { HINT_CENTER_CHILDREN_ON_MONIKERS
		   /* HINT_DRAW_IN_BOX */
	}
}

RecvFileType = GenItemGroup {	
	moniker = "File Type:";
	children = RecvText, RecvBinary;
	selection = RECV_BINARY;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

RecvBinary = GenItem {
	moniker = "Binary";
	identifier = RECV_BINARY;
}

RecvText = GenItem {
	moniker = "Text";
	identifier = RECV_TEXT;
}

RecvProtocol = GenItemGroup {
	moniker = "Xmodem Protocol:";
	children = RecvChecksum, RecvCrc;
	selection = RECV_CHECKSUM;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		}
	}
}

RecvChecksum = GenItem {
	moniker = "Checksum";
	identifier = RECV_CHECKSUM;
}

RecvCrc = GenItem {
	moniker = "CRC";
	identifier = RECV_CRC;
}

RecvFileTrigger = GenTrigger {
	moniker = 'R', "Receive";
	action = MSG_XMODEM_RECV_START, process;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

end TransferUI;


/*---------------------------------------------------------------------------
	Common Send Objects
-----------------------------------------------------------------------------*/


start SendStatusUI;

SendStatusSummons = GenInteraction ignoreDirty {
	moniker = "Send Status";
	children = SendFileDisp, SendStatus, NoSendTrigger;
	type = progress;
	visibility = dialog;
	hints = {
		HINT_CENTER_WINDOW
	}
}

SendFileDisp	= GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Sending: ";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_WIDE_CHAR_WIDTHS, 12>
			SpecHeight <>
		}
	}
}

SendStatus 	= GenInteraction ignoreDirty {	 
	children = SentPackets, SendErrors, SendTimeouts;
	hints	= { 
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_CENTER_CHILDREN_HORIZONTALLY 
	}
}

SentPackets = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Packets Sent:";
	textDisplayAttributes = singleLineText;
	text = "0";
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

SendErrors = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Packet Errors:";
	text = "0";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}
SendTimeouts = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Timeouts:";
	text = "0";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

NoSendTrigger = GenTrigger ignoreDirty {
	moniker = "Abort Transfer";
	/* not signalInteractionComplete, we manually dismiss when abort is
	   completed */
	action = MSG_FILE_SEND_STOP, process;
	hints = { HINT_TRIGGER_DESTRUCTIVE_ACTION,
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_STOP} }
}

end SendStatusUI;


/*-----------------------------------------------------------------------------
	Ascii Receive Status Box
-----------------------------------------------------------------------------*/
start RecvAsciiStatusUI;

AsciiRecvSummons = GenInteraction ignoreDirty {
	moniker = "Capture Status";
	children = AsciiRecvDisp, AsciiRecvDone;
	type = progress;
	visibility = dialog;
	hints = { 
		HINT_CENTER_WINDOW
	}
}

AsciiRecvDisp	= GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Capturing to: ";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_WIDE_CHAR_WIDTHS, 12>
			SpecHeight <>
		}
	}
}

AsciiRecvDone = GenTrigger ignoreDirty {
	moniker = "Stop Capture";
	/* not signalInteractionComplete, we manually dismiss when abort is
	   completed */
	action = MSG_FILE_RECV_STOP, process;
	hints = { HINT_TRIGGER_DESTRUCTIVE_ACTION,
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_STOP} }
}

end RecvAsciiStatusUI;


/*-----------------------------------------------------------------------------
	XModem Receive Status Box
-----------------------------------------------------------------------------*/
	
start RecvXModemStatusUI;

RecvStatusSummons = GenInteraction ignoreDirty {
	moniker = "Receive Status";
	children = RecvFileDisp, RecvStatus, NoRecvTrigger;
	type = progress;
	visibility = dialog;
	hints = { 
		HINT_CENTER_WINDOW
	}
}

RecvFileDisp	= GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Receiving: ";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_WIDE_CHAR_WIDTHS, 12>
			SpecHeight <>
		}
	}
}

RecvStatus = GenInteraction ignoreDirty {
	children = RecvPackets, RecvErrors, RecvTimeouts;
	hints	= {
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

RecvPackets = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Packets Received:";
	text = "0";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

RecvErrors = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Packet Errors:";
	text = "0";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

RecvTimeouts = GenText ignoreDirty {
	genAttributes = default +readOnly;
	moniker = "Timeouts:";
	text = "0";
	textDisplayAttributes = singleLineText;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

NoRecvTrigger = GenTrigger ignoreDirty {
	moniker = "Abort Transfer";
	/* not signalInteractionComplete, we manually dismiss when abort is
	   completed */
	action = MSG_FILE_RECV_STOP, process;
	hints = { HINT_TRIGGER_DESTRUCTIVE_ACTION,
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_STOP} }
}

end RecvXModemStatusUI;


/*-----------------------------------------------------------------------------
	Record Options
-----------------------------------------------------------------------------*/


start MenuInterface;

CaptureSubMenu = GenTrigger {
	moniker = 'B', "Save Buffer";
	action = MSG_SAVE_BUF_SUMMONS, process;
	hints = { 
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

end MenuInterface;


start CaptureUI;

CaptureBox = GenInteraction {
	moniker = "Save Buffer";
	children =
		SaveAsFileGlyph,
		SaveAsSelectorOptions,
		SaveAsTextEdit,
		SaveAsFileTrigger;
	attributes = default +notUserInitiatable;
	type = command;
	visibility = dialog;
	hints = {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbCaptureBox", 0
		}
	}
}

SaveAsSelectorOptions = GenInteraction {
	children = 
		SaveAsFileSelector,
		SaveAsOptions;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

SaveAsFileGlyph = GenGlyph {
	moniker = "Select folder and enter new filename for save:";
}

SaveAsFileSelector = GenFileSelector {
	fileCriteria = dirs;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION,
		HINT_FILE_SELECTOR_FILE_LIST_WIDTH {word 35}
	}
}

SaveAsTextEdit = GenText {
	moniker = "Save File:";
	text = "";
	maxLength = 12;                         
	textDisplayAttributes = SINGLE_LINE_EDIT_ATTRIBUTES;
	hints = { 
		ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES, 
		HINT_DEFAULT_FOCUS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 15>
			SpecHeight <>
		}
	}
}

SaveAsOptions = GenItemGroup {
	moniker = "Save Contents of:";
	children = CapScreen, CapScroll, CapScrollAndScreen;
	selection = CSO_SCREEN;
	numSelections = 1;
	hints	= {
		HINT_PLACE_MONIKER_ABOVE, 
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word 0
		},
	}
}

CapScreen = GenItem {
	moniker = "Screen Only";
	identifier = CSO_SCREEN;
}

CapScroll = GenItem {
	moniker = "Scroll-Back Buffer Only";
	genStates = default -enabled;
	identifier = CSO_SCROLL_BACK;
}

CapScrollAndScreen = GenItem {
	moniker = "Scroll-Back Buffer and Screen";
	genStates = default -enabled;
	identifier = CSO_BOTH;
}

SaveAsFileTrigger = GenTrigger {
	moniker = "OK";
	action  = MSG_SCR_RECORD_ON, screenObject;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

end CaptureUI;


/*-----------------------------------------------------------------------------
	File Exit
-----------------------------------------------------------------------------*/


start MenuInterface;

ExitSubMenu = GenInteraction {
	children = ExitAppl;
}

ExitAppl = GenTrigger {
	action = MSG_TERM_DORKED, process;
	hints = { 
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_EXIT}
	}
}

end MenuInterface;


/*-----------------------------------------------------------------------------
	Options
-----------------------------------------------------------------------------*/

start ScriptUI;

MacroFiles = GenFileSelector {
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION,
		ATTR_GEN_FILE_SELECTOR_NAME_MASK {
#if DO_DBCS
			wchar "*.MAC", 0
#else
			char "*.MAC", 0
#endif
		}
	}
	fileCriteria = dirs, nonGeosFiles, maskCaseInsensitive;
	action = MSG_TERM_SCRIPT_FILE_SELECTED, process;
}

OpenMacTrigger = GenTrigger {
	moniker = 'R', "Run";
	action = MSG_TERM_SCRIPT_RUN, process;
	genAttributes = default +initiatesInputIgnore;
	hints = { HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR }
}

ScriptSummons = GenInteraction {
	moniker = "Script Display";
	children = ScriptDisplay,
			AbortScrTrigger, CloseScrTrigger;
	type = progress;
	visibility = dialog;
	hints = { 
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbScript", 0
		}
	}
}

ScriptDisplay = GenText {
	genAttributes = default +readOnly;
	/*genFont	= system;*/
	textDisplayAttributes = noWordWrapping, tailOriented, initScrolling;
	hints = { 
		HINT_PLACE_MONIKER_ABOVE,
/*		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
			SpecHeight <SST_LINES_OF_TEXT, 5>
		} */
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 25>
			SpecHeight <SST_LINES_OF_TEXT, 5>
		}
	}
}

ScriptTriggers = GenInteraction {
	hints = { HINT_MAKE_REPLY_BAR }
}

AbortScrTrigger = GenTrigger {
	moniker = "Stop Running Script";
	action = MSG_TERM_SCRIPT_ABORTED, process;
	hints = { HINT_TRIGGER_DESTRUCTIVE_ACTION,
			HINT_SEEK_REPLY_BAR,
			ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_STOP} }
}

CloseScrTrigger = GenTrigger {
	CLOSE_TRIGGER_VALUES
	action = MSG_TERM_SCRIPT_DISPLAY_CLOSED, process;
	hints = { HINT_SEEK_REPLY_BAR }
}

end ScriptUI;


/*-----------------------------------------------------------------------------
	Application classes
-----------------------------------------------------------------------------*/

class Screen = meta {
	fontColor 	= byteComp : C_BLACK;	/* default font color 	*/
	gState		= wordComp : BOGUS_VAL;	/* gState ptr 		*/
	winHandle 	= wordComp : 0;		/* window handle	*/
	lineHeight 	= wordComp : DEF_FONT_HEIGHT;		
	leading		= wordComp : DEF_FONT_LEADING;
	charWidth  	= wordComp : DEF_FONT_WIDTH;
	backColor 	= byteComp : C_WHITE;	/* default area color	*/
	cursorDrawn 	= byteComp : FALSE;	/* flag is cursor drawn	*/
	lastCursorX 	= wordComp : 0;		/* cursor X position 	*/
	lastCursorY 	= wordComp : 0;		/* cursor Y position 	*/
	scrollHandle 	= wordComp : 0;		/* scroll buf handle	*/
	scrollLines 	= wordComp : 0;		/* #lines in scroll buf	*/
	scrollTop 	= wordComp : 0;		/* top line in buffer 	*/
	screenBuf 	= wordComp : 0;		/* screen buffer segment*/
	screenHandle 	= wordComp : 0;		/* handle to screen seg	*/
	curLine 	= wordComp : 0;		
	curChar 	= wordComp : 0;		
#if CURSOR
	curPos		= wordComp : 0;
#endif
	winTopLine 	= wordComp : 0;		/* line at top of screen */
	saveCursorX 	= wordComp : 0;		
	saveCursorY 	= wordComp : 0;		/* top of scroll region	*/
	scrollRegTop 	= wordComp : 0;
	scrollRegBot 	= wordComp : "MAX_LINES - 1";
	insertMode 	= byteComp : FALSE;	
	wrap 		= byteComp : FALSE;	/* scroll buffer wraparound */	
	inScroll 	= byteComp : FALSE;	
	attr 		= byteComp : 0;	
	revVideo	= byteComp : FALSE;	
	autoWrap	= byteComp : TRUE;	
	autoLinefeed	= byteComp : FALSE;	
	visBell		= byteComp : FALSE;	
	ignoreNL	= byteComp : FALSE;	/* ignore new lines ? 	      */
	gotFocus	= byteComp : FALSE;	/* TRUE if we have the focus  */
	docWidth       	= wordComp : 0;
	docHeight       = wordComp : 0;
	winWidth       	= wordComp : INIT_WIDTH;
	winHeight       = wordComp : INIT_HEIGHT;
	cacheHandle 	= wordComp : 0;		/* scroll buf overflow cache  */
	cacheSize 	= wordComp : 0;
#if	_MODEM_STATUS
	/*
	 * A little hack to keep winBottom non-zero so that when data are fed
	 * screenObject before TermView is built, it does not scroll
	 * TermView. It works only if the data fed to screenObject does not
	 * exceed one screenful, otherwise, the window bound and addressing
	 * may be wrong as winBottom uses real window bound.
	 */
	winBottom 	= wordComp : INIT_HEIGHT;/* bottom of view (doc coords)*/
#else
	winBottom 	= wordComp : 0;		/* bottom of view (doc coords)*/
#endif
	capHandle 	= wordComp : BOGUS_VAL;	/* Handle of capture file     */
	maxLines 	= byteComp : "MAX_LINES";	/* #lines screen can display  */
	maxCols 	= byteComp : "INIT_LINE_CHARS";	/* cols screen can display    */
	iconified 	= byteComp : FALSE;	/* true if we're iconified    */
	intFlags	= byteComp : 0;
	modeFlags	= wordComp : "SCREEN_VT_MODE_DEFAULT_FLAGS";

#if	_CHAR_SET
	charSetDesignator = byteComp:CSD_G0;	/* G0 or G1 character set designator */
	/* Character set to use if chosen that designator */
	G0CharSet	= byteComp : TCS_USASCII;
	G1CharSet	= byteComp : TCS_USASCII;
#endif	

}

start	TermUI;

screenObject = Screen {		/* instantiate screen object */
}

end	TermUI;

start	Strings, data;

#define NRS(string) string

chunk	diskErr       =
	"Couldn\'t save the file to disk. Check the disk and drive.";

chunk	timeoutErr    =
	"File transfer was unsuccessful. The remote system is not responding and may be busy. Please try again.";

chunk	comPortErr    =
	NRS("No Modem Port is selected in the Protocol dialog box.");


#if DO_DBCS
chunk	termcapErr    = data {
	wchar	"Unable to start the selected terminal emulation mode.  "
	wchar	"GeoComm will emulate a VT100 for this session.",0
}
#else
chunk	termcapErr    = data {
	byte	"Unable to start the selected terminal emulation mode.  "
	byte	"GeoComm will emulate a VT100 for this session.",0
}
#endif  /* DO_DBCS */

chunk	remoteErr    =
	"File transfer was unsuccessful. The remote system is not responding and may be busy.  Please try again.";

chunk	sendAbortErr    =
	"File transfer was unsuccessful. Too many errors occurred during transmission. Check the modem connections and try again.";

chunk	completeErr	=
	"File transfer was unsuccessful. The remote system did not respond on completion of the transfer. Please try again.";

chunk	noFileErr	=
	"Please enter a filename.";

chunk	makeTermDirErr	=
	"Couldn\'t create the folder \\\"\\1\\\".";

chunk	generalFileOpenErr	=
	"Operation was unsuccessful. Couldn\'t open file.";


chunk	scriptFileOpenErr	=
	"Unable to run the script because the file couldn\'t be opened.";

chunk	ftransFileOpenErr	=
	"Unable to transfer file because the file couldn\'t be opened or it is empty.";

chunk	createFileErr		=
	"Operation was unsuccessful.  Couldn\'t create the file \\\"\\1\\\".";

	
chunk	cursorMoveErr	=
	"Illegal terminal control sequence received. Make sure the terminal emulation options are set correctly.";

chunk	undefMacroErr	=
	"Stopped running the script.  \\\"\\1\\\" is an invalid script instruction.";

chunk	undefBaudErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal baud rate for the COMM instruction.";

chunk	undefDataErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal number of data bits for the COMM instruction.";

chunk	undefParityErr	=
	"Stopped running the script.   \\\"\\1\\\" is an illegal parity setting for the COMM instruction.";

chunk	undefStopErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal number of stop bits for the COMM instruction.";

chunk	undefDuplexErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal duplex for the COMM instruction.";

chunk	undefTermErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal terminal type for the TERM instruction.";

chunk	undefPortErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal argument for the PORT instruction.";

chunk	undefStrErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal string argument.";

chunk	undefNumErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal number.";

chunk	undefCharErr	=
	"Stopped running the script.  \\\"\\1\\\" is an illegal character expression.";

chunk	undefLabelErr	=
	"Stopped running the script.  \\\"\\1\\\" is an undefined label.";

chunk	noGotoErr	=
	"Stopped running the script.  The script contains a MATCH command that\'s missing a GOTO command.";


	
	
chunk	noMemAbortErr	=	"There\'s not enough memory to run GeoComm.  Free up some memory by closing windows and applications you\'re not using, then try again.";
	

chunk	abortTransErr	=
	"There\'s not enough memory to perform this operation. Free up some memory by closing windows and applications you\'re not using, then try again.";

chunk	noMemFSMErr	=
	"There\'s not enough memory to do terminal emulation. Free up some memory by closing windows and applications you\'re not using, then try again.";

chunk	noMemFTransErr	=
	"There\'s not enough memory to transfer the file. Free up some memory by closing windows and applications you\'re not using, then try again.";

	
chunk	comOpenErr	=
	"Couldn\'t use COM\\1. It may already be in use.";

chunk	comMissingErr	=
	"Couldn\'t find COM\\1. Select another port.";

chunk	fileTooBigErr	=
	"The script file is too large to run.  The maximum size is 8,192 bytes.";

chunk	noComErr	=
	NRS("Couldn\'t \\1. No Modem Port is selected. Use the Protocol command to select one and try again.");

chunk	noLabelErr	=
	"Stopped running the script. The script contains a GOTO command that's missing a label.";

chunk	pasteErr	=
	"quick copy selected text";

chunk	keyCharErr	=
	"transmit keystroke";

chunk	serialFormErr	=
	"set communications parameters";

chunk	serialLineErr	=
	"set communications parameters";

chunk	serialFlowErr	=
	"set communications parameters";

chunk	sendCharErr	=
	"send character";

chunk	sendBufErr	=
	"send characters";


chunk	useSerialDrErr	=
	"Couldn\'t start GeoComm.  Unable to load serial driver.";



chunk	hangUpVerifyStr	=
	"Are you sure you want to hang up?";

/*
chunk	hangUpQuesStr	=
	"Do you want to hang-up?";
*/

chunk	missingStrErr	=
	"Stopped running the script.  "
	"The script contains a command that\'s missing a string argument.";

chunk	badScriptMacroErr =
	"Stopped running the script.  The script contains an unrecognizable command.";

chunk	matchTableFullErr =
	"Stopped running the script.  The script contains too many MATCH commands before a PROMPT command.";




chunk	connectTimeoutErr =
	"Terminal connectivity problem: No response from host. Please re-try later and make sure the phone number is correct.";

	
	
chunk fileOpenSharingDeniedErr =
	"Could not save \\\"\\1\\\". The document is already in use.";

chunk fileNewWriteProtectedErr =
	"The disk is write protected. You can remove the write protectiontab and click Yes to try to save \\\"\\1\\\" again, or click No to cancel.";

chunk	overwriteText =
	"A file with this name already exists.  Do you wish to overwrite it?";

chunk	scriptAbortString =
	"\\\r SCRIPT ABORTED \\\r";

chunk	textTransferItemString =
	"Unnamed Text";

chunk	ProtocolWarningString = "The protocol you have chosen, 7 data bits, No parity, 1 stop bit is not accecpted by some modems. If you have trouble with modem commands such as dialing or hanging up, you should switch to some other setting. Changing to 2 stop bits is usually a good choice.";



#if	_TELNET
chunk	ipaddrParseErr =
	"Internet application problem: Missing or incorrect destination host. Correct it and retry.";

chunk	noInternetAccessErr =
	"Internet connectivity problem: Missing or incorrect internet access point.  Correct it and retry.";

chunk	noAccpntUsernameErr = 
	"Internet connectivity problem: Missing or incorrect User name.  Correct it and retry.";

chunk	authFailedErr =
	"Internet connectivity problem: Missing or incorrect User name or password.  Correct it and retry.";

#endif	/* _TELNET */

chunk	CaptureNotifyString = "Since software handshaking is not turned on, data may be lost. Do you want to continue?";

visMoniker	Capture_OK = "OK";
visMoniker	CaptureCancel = "VMO_CANCEL", "Cancel";
	
#if INPUT_OUTPUT_MAPPING
chunk	inputOutputMapErr = "Unable to build input/output translation tables.  GeoComm will use the default translation or a partial translation table for this session.";
#endif

chunk	remoteCanErr = "File transfer was unsuccessful. The remote system cancelled the transfer.";

#if _ACCESS_POINT && ! _TELNET
chunk	invalidPhoneErr = 
	"The phone number may not contain an embedded \\\"+\\\" character.";
#endif

#if	_MODEM_STATUS

#if	_TELNET
chunk	indicatorText = "Telnet: connecting to ";
#else
chunk	indicatorText = "Terminal: connecting to ";
#endif	/* _TELNET */

chunk	defaultConnectText = "Captured Text";
#endif	/* _MODEM_STATUS */

#if	_TELNET
chunk	establishText = "Establishing network access via ";
chunk 	resolveText = "Resolving host name ";
chunk	openConnectText = "Opening connection to ";
chunk	dotdotdotText = "...";
#endif	/* _TELNET */


end	Strings;

#if	_SPECIAL_KEY
/*	
 *  Entries to display in Special key list
 *
 *  Note:
 *
 *  Most strings all have the same prefix. It may waste memory, but it
 *  should be easier for localization purpose. Also, combining common
 *  prefix string to specific suffix strings takes longer than this
 *  simple approach as some strings do not require prefix strings. It
 *  may also create difficulty in localization.
 *
 *  CT 3/96 : Made entries be <string, function #> pairs, so that
 *  the list can be easily reordered without changing the order
 *  of the KOMBI enum, which the special key code depends upon.
 */
start	SpecialKeyEntryStrings, data;

chunk	SpecialKeyEntryStringsTable = data {
#if	_TELNET
	word	offset IPString,	KOMBI_TELNET_CMD+0
	word	offset AOString,	KOMBI_TELNET_CMD+1
	word	offset AYTString,	KOMBI_TELNET_CMD+2
#endif	/* _TELNET */
	word	offset PF1String,	KOMBI_PF+0
	word	offset PF2String,	KOMBI_PF+1
	word	offset PF3String,	KOMBI_PF+2
	word	offset PF4String,	KOMBI_PF+3
	word	offset KeypadEnterString, KOMBI_ENTER
	word	offset KeypadCommaString, KOMBI_COMMA
	word	offset KeypadDotString,	KOMBI_DOT
	word	offset Keypad0String,	KOMBI_NUMBER+0
	word	offset Keypad1String,	KOMBI_NUMBER+1
	word	offset Keypad2String,	KOMBI_NUMBER+2
	word	offset Keypad3String,	KOMBI_NUMBER+3
	word	offset Keypad4String,	KOMBI_NUMBER+4
	word	offset Keypad5String,	KOMBI_NUMBER+5
	word	offset Keypad6String,	KOMBI_NUMBER+6
	word	offset Keypad7String,	KOMBI_NUMBER+7
	word	offset Keypad8String,	KOMBI_NUMBER+8
	word	offset Keypad9String,	KOMBI_NUMBER+9
	word	offset KeypadMinusString, KOMBI_MINUS
	word	offset ResetTerminalString, KOMBI_RESET
	word	offset FSString,	KOMBI_CTRL28+0
	word	offset GSString,	KOMBI_CTRL28+1
	word	offset RSString,	KOMBI_CTRL28+2
	word	offset USString,	KOMBI_CTRL28+3
}

#if	_TELNET
chunk	IPString = "Interrupt";
chunk	AOString = "Skip command output";
chunk	AYTString= "Are you there ?";
#endif	/* _TELNET  */

chunk	KeypadEnterString = "Keypad Enter";
chunk	PF1String = "PF1";
chunk	PF2String = "PF2";
chunk	PF3String = "PF3";
chunk	PF4String = "PF4";
chunk	Keypad0String = "Keypad 0";
chunk	Keypad1String = "Keypad 1";
chunk	Keypad2String = "Keypad 2";
chunk	Keypad3String = "Keypad 3";
chunk	Keypad4String = "Keypad 4";
chunk	Keypad5String = "Keypad 5";
chunk	Keypad6String = "Keypad 6";
chunk	Keypad7String = "Keypad 7";
chunk	Keypad8String = "Keypad 8";
chunk	Keypad9String = "Keypad 9";
chunk	KeypadCommaString = "Keypad ,";
chunk	KeypadMinusString = "Keypad -";
chunk	KeypadDotString	  = "Keypad .";
chunk	ResetTerminalString = "Reset terminal";
chunk	FSString = "Ctrl-\\\\"; /* both UIC and ESP process '\' */
chunk	GSString = "Ctrl-]";
chunk	RSString = "Ctrl-~";
chunk	USString = "Ctrl-?";

end	SpecialKeyEntryStrings;
	
#endif	/* if _SPECIAL_KEY */

#if _TELNET

start	WritableStrings, data;

chunk	mediumBusyString = "Data call is active to another Internet Access point: \\1. Your last connection attempt requests now: \\2.";
localize "Text displayed when attempting to make a Telnet connection fails because another data call is in progress.";

end	WritableStrings;

#endif /* _TELNET */
