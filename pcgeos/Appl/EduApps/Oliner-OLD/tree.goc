/***********************************************************************
 *
 *
 * PROJECT: Breadbox Outliner
 * FILE:        tree.goc
 * AUTHOR:  John F. Howard,   05/03
 *
 * DESCRIPTION:
 *  This file has the proc class tree methods
 *
 *    These 4 messages are set in the ExtUITreeClass object's instance
 *    data.  The sequence in NR (with items in the list) on app opening
 *		(these messages sent to the tree list object) is:
 *    	Message								item/index
 *    	ATTACH									0
 *       MSG_EXTUI_TABLE_ADD_LINES
 *       DETACH                          3409
 *       ATTACH									0
 *       MSG_EXTUI_TABLE_ADD_LINES
 *       DRAW										0 - n lines times
 *       ATTACH									0 - n lines times
 *       DRAW										0 - n lines times (twice)
 *       ATTACH									0 - n lines times
 *       DRAW										0 - n lines times
 *
 * 	The sequence in NR when no threads/articles in the list:
 *    	ATTACH									0
 *       DETACH                          3409
 *       ATTACH									0
 *       INFO										0 (twice)
 *    and this is the sequence in OL all the time.  I gotta find out
 *    how to get the ADD_LINES message called.
 *
 *
 *
 ***********************************************************************/


/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/
@include "oliner.goh"

@extern object OLDocumentGroup;
@extern object CardDList;
@extern object CardTitle;
@extern object CardText;
@extern object CreateTopicBox;
@extern object DeleteTrigger;


@start TreeMonikerResource, data ;

@include "Art/topic.goh"
@include "Art/card.goh"

@end TreeMonikerResource ;

/* ----------------------------------------------------------------------------
	tree code
-----------------------------------------------------------------------------*/

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_PROC_CARD_DLIST_DRAW_FIELD for OLProcessClass
 *               (EXTUI_TABLE_DRAW_FIELD_MSG)
 *
 * DESCRIPTION:   draws the line being queried
 *
 * PARAMETERS:		(optr list, word item)
 *
 *
 *
 ***********************************************************************/
@extern method OLProcessClass, MSG_OLINER_PROC_CARD_DLIST_DRAW_FIELD
{
 ExtUITreeCacheElement	lineData, parentLineData;
 word							count;
 Rectangle					bounds;
 optr							moniker;
 MemHandle		mh;
 char			qString[MAX_TITLE_LENGTH];
 word			size, type, delta;
 BasicDBFieldID	fieldID;
 dword				bdbCount;
 VMBlockHandle		indexHan, childDBHan;


	type = 0;
	/* get this line's current state information */
	@call list::MSG_EXTUI_TREE_GET_LINE_ATTRS(item, &lineData) ;

	/* get attached content information */
	if(lineData.EUITCE_parent != 0xFFFFFFFF) {
		/* this is a lower level */
		/* for the second level we need to open the parent (top level)
			and grab the child bdb handle so we can get the info on this
			item in the tree (child of 1st topic in first line):
			_cache = 0 -> ??
			_parent = 1 -> ??
			_index = 0 -> child num in current branch
			_level = 2 -> 0 for top, 1 for primary branches, etc    */

		/* try to get back up the tree using the CacheElement info to get to
			a known dbd handle and come back down */
		if (lineData.EUITCE_level == 3)  {
			/* check out the parent of this one.  to get to parent just back up
				EUITCE_index + 1 to get to the parent folder. */
			delta = (word)lineData.EUITCE_index + 1;
			@call list::MSG_EXTUI_TREE_GET_LINE_ATTRS(item - delta, &parentLineData) ;
			/* now that I have the level 2 poop I can ... */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)(parentLineData.EUITCE_parent - 1), &mh);
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			/* done with the top level item */
			BasicDBDiscardRecord(mh);
			/* now get our parent from the child of the top bdb */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  childDBHan,
									  (word)(parentLineData.EUITCE_index), &mh);
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			BasicDBDiscardRecord(mh);
			/* and finally back to our lrvel 3 line */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  childDBHan,
									  (word)(lineData.EUITCE_index), &mh);
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			count = 0; /* for now */
			}
		else {
/*		if (pself->OLDI_topCurrentIndex)
			BasicDBGetRecordByIndex(g_curDocHan,
									  g_curDBHan,
									  pself->OLDI_topCurrentIndex,
									  item, &mh);
		else
*/			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)(lineData.EUITCE_parent - 1), &mh);
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
		BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
		/* done with the top level item */
		BasicDBDiscardRecord(mh);
		/* now get the record to show from the child bdb */
		BasicDBGetRecordByElemNum(g_curDocHan,
									  childDBHan,
									  (word)(lineData.EUITCE_index), &mh);
		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
		/* if topic then see if any children */
		if (type == T_TOPIC) {
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_ASORTHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &indexHan, sizeof(VMBlockHandle));
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			/* the only bdb routine that gets a count */
			BasicDBIndexGetCount(g_curDocHan, childDBHan, indexHan, &bdbCount);
			count = (word)bdbCount;
			}
		else count = 0;
      }
		}
	else {
		/* we're at the top level */
		/* open the record */
/*		if (pself->OLDI_topCurrentIndex)
			BasicDBGetRecordByIndex(g_curDocHan,
									  g_curDBHan,
									  pself->OLDI_topCurrentIndex,
									  item, &mh);
		else
*/			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)(lineData.EUITCE_index), &mh);
		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
		/* if topic then see if any children */
		if (type == T_TOPIC) {
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_ASORTHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &indexHan, sizeof(VMBlockHandle));
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			/* the only bdb routine that gets a count */
			BasicDBIndexGetCount(g_curDocHan, childDBHan, indexHan, &bdbCount);
			count = (word)bdbCount;
			}
		else count = 0;
		}


	if (!type) {
		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
		}
	/* and the title */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1);
	size = BasicDBGetFieldData(mh, fieldID, qString, MAX_TITLE_LENGTH+1);
	qString[size] = 0;
	BasicDBDiscardRecord(mh);

	@call list::MSG_EXTUI_TREE_INIT_LINE(item, count) ;

	/* put together the line */
	@call list::MSG_EXTUI_TABLE_GET_FIELD_BOUNDS(item, 0, 1, &bounds);
	if (type == T_TOPIC)  moniker = @TopicMoniker;
	else  moniker = @CardMoniker;
	@call list::MSG_EXTUI_TABLE_DRAW_FIELD_BITMAP_TEXT(
											list, item, 0, &bounds,
											moniker, qString, TRUE, 0);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_PROC_CARD_DLIST_INFO_FIELD for OLProcessClass
 *               (EXTUI_TABLE_INFO_FIELD_MSG)
 *
 * DESCRIPTION:   - (re)draws lines being moved ?
 *                - called when no items in dlist also
 *
 *
 * PARAMETERS:		(optr list, word identifier)
 *
 *
 *
 ***********************************************************************/
@extern method OLProcessClass, MSG_OLINER_PROC_CARD_DLIST_INFO_FIELD
{
 ExtUITreeCacheElement	lineData;
 word		count;
 optr		docOptr;

	/* get this line's current state information */
	@call list::MSG_EXTUI_TREE_GET_LINE_ATTRS(identifier, &lineData) ;

	/* get attached content information */
	if(lineData.EUITCE_parent != 0xFFFFFFFF)
		@call list::MSG_EXTUI_TREE_SET_NODE_LINE(identifier, FALSE) ;
	else {
		/* top level */
		if (g_curDocHan) {
			docOptr = @call OLDocumentGroup::
									 MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE(g_curDocHan);
			count = @call docOptr::MSG_OLINER_DOC_GET_NUM_TOP_ITEMS();
			}
		else count = 0;

		/* there are no sub items */
		@call list::MSG_EXTUI_TREE_SET_NODE_LINE(identifier, count) ;
		}


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_PROC_CARD_DLIST_NODE_ATTACH for OLProcessClass
 *               (EXTUI_TREE_ATTACH_NODE_MSG)
 *
 * DESCRIPTION:	Called when the empty object opens up
 *
 *
 *
 *
 *
 *
 * PARAMETERS:		(optr tree, dword cache, word index,
 *						 ExtUITreeAttachFlags flags)
 *
 *
 *
 ***********************************************************************/
@extern method OLProcessClass, MSG_OLINER_PROC_CARD_DLIST_NODE_ATTACH
{
 dword		itemid;
 word		count;
 optr		docOptr;
 MemHandle		mh;
 word					type;
 BasicDBFieldID	fieldID;
 dword				bdbCount;
 VMBlockHandle		indexHan, childDBHan;


	/* here because it was in NR code */
	if(!(flags & EUITAF_ACTIVE_OPEN))  return ;

	if(cache) {
		/* other than top level */
		/* a level 1 folder has cache = ffffffff
      	a level 2 folder of the 0th lev 1 folder has cache = 0000:0001  */
		/* index is the item in this level that we're wondering about. */
		itemid = index + 1 ;
		/* find out how many children (if any) */
		/* open the record */
/*		if (pself->OLDI_topCurrentIndex)
			BasicDBGetRecordByIndex(g_curDocHan,
									  g_curDBHan,
									  pself->OLDI_topCurrentIndex,
									  item, &mh);
		else
*/
		if (cache == 0xffffffff)
			/* just open this level 1 guy */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  index, &mh);
		else /*if (cache == 1) */ {
			/* gotta get to the level2 guy being checked */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)cache - 1, &mh);
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			BasicDBDiscardRecord(mh);
			BasicDBGetRecordByElemNum(g_curDocHan,
									  childDBHan,
									  index, &mh);
			}

		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
		/* if topic then see if any children */
		if (type == T_TOPIC) {
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_ASORTHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &indexHan, sizeof(VMBlockHandle));
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			/* the only bdb routine that gets a count */
			BasicDBIndexGetCount(g_curDocHan, childDBHan, indexHan, &bdbCount);
			count = (word)bdbCount;
			}
		else count = 0;
		BasicDBDiscardRecord(mh);
		}
	else {
		/* attach level 0 means top level */
		itemid = 0xFFFFFFFF ;
		if (g_curDocHan) {
			docOptr = @call OLDocumentGroup::
									 MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE(g_curDocHan);
			count = @call docOptr::MSG_OLINER_DOC_GET_NUM_TOP_ITEMS();
			}
		else count = 0;
		}

	@call tree::MSG_EXTUI_TREE_NODE_ATTACHED(cache, index, itemid, count);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_PROC_CARD_DLIST_NODE_DETACH for OLProcessClass
 *               (EXTUI_TREE_DETACH_NODE_MSG)
 *
 * DESCRIPTION:	???
 *
 * PARAMETERS:		(optr tree, dword cache, word index)
 *
 *
 *
 ***********************************************************************/
@extern method OLProcessClass, MSG_OLINER_PROC_CARD_DLIST_NODE_DETACH
{

	@call tree::MSG_EXTUI_TREE_FINALIZE_DETACH(cache, index);

}

/***********************************************************************
 *
 * MESSAGE: (GEN_ITEM_GROUP_APPLY_MSG) MSG_OLINER_PROC_CARD_DLIST_APPLY
 *								for OLProcessClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION: 
 *
 ***********************************************************************/
@extern method OLProcessClass, MSG_OLINER_PROC_CARD_DLIST_APPLY
{
 MemHandle		mh;
 char			qString[MAX_TITLE_LENGTH];
 word			size, type;
 BasicDBFieldID	fieldID;
 char 		*p_data;
 void			*p_record;
 ExtUITreeCacheElement lineData ;
 VMBlockHandle		childDBHan;


	if ((selection != GIGS_NONE) && (numSelections == 1) && g_curDocHan) {

		/* get this line's current state information */
		@call CardDList::MSG_EXTUI_TREE_GET_LINE_ATTRS(selection, &lineData) ;
		if(lineData.EUITCE_parent != 0xFFFFFFFF) {
			/* this is a child - set its db handle as the current one */
			/* for the second level we need to open the parent (top level)
				and grab the child bdb handle so we can get the info on this
				item in the tree */
/*			if (pself->OLDI_topCurrentIndex)
				BasicDBGetRecordByIndex(g_curDocHan,
									  g_curDBHan,
									  pself->OLDI_topCurrentIndex,
									  item, &mh);
			else
*/				BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)(lineData.EUITCE_parent - 1), &mh);
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
			/* done with the top level item */
			BasicDBDiscardRecord(mh);
			g_selDBHan = childDBHan;
			g_curDBHan = childDBHan;
			selection = lineData.EUITCE_index;
			}
		else {
			/* this is the top level */
			/* for the top level we need to open the bdb
				and grab any child bdb handle so we can get the info on this
				item into the tree if the user adds a card or topic */
/*			if (pself->OLDI_topCurrentIndex)
				BasicDBGetRecordByIndex(g_curDocHan,
									  g_curDBHan,
									  pself->OLDI_topCurrentIndex,
									  item, &mh);
			else
*/				BasicDBGetRecordByElemNum(g_curDocHan,
									  g_topDBHan,
									  (word)(lineData.EUITCE_index), &mh);
			/* get the type */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
			BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
			if (type == T_TOPIC) {
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
				BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
				/* done with the top level item */
				BasicDBDiscardRecord(mh);
				g_selDBHan = childDBHan;
				}
			selection = lineData.EUITCE_index;
			g_curDBHan = g_topDBHan;
			}

		
		/* see if we need to show a card */
/*		if (pself->OLDI_topCurrentIndex)
			BasicDBGetRecordByIndex(pself->GDI_fileHandle,
									  pself->OLDI_topDBHan,
									  pself->OLDI_topCurrentIndex,
									  selection, &mh);
		else */
			BasicDBGetRecordByElemNum(g_curDocHan,
									  g_curDBHan,
									  selection, &mh);

		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(word));
		if(type == T_CARD)  {
			/* show the title */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1);
			size = BasicDBGetFieldData(mh, fieldID, qString, MAX_TITLE_LENGTH+1);
			@call CardTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
			/* and the data */
			MemLock(mh);
			p_record = MemDeref(mh);
			fieldID = BasicDBGetFieldIDPtr(p_record, BDBFHE_CATEGORY, FIELD_CAT_CARD_DATA, 1);
			size = BasicDBGetPtrToFieldData(p_record, fieldID, &p_data);
			if (size) @call CardText::MSG_VIS_TEXT_REPLACE_ALL_PTR(p_data, size);
			MemUnlock(mh);
			}
		else {
			/* its a topic - so we need to set the selDBHan global */
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
			BasicDBGetFieldData(mh, fieldID, &childDBHan, sizeof(VMBlockHandle));
         g_selDBHan = childDBHan;
			}
		BasicDBDiscardRecord(mh);
		}  /* end of valid selection if */
	else g_selDBHan = g_topDBHan;

	if (selection == GIGS_NONE || type == T_TOPIC) {
		/* erase any card info */
		@send CardTitle::MSG_VIS_TEXT_DELETE_ALL();
		@send CardText::MSG_VIS_TEXT_DELETE_ALL();
		@send CreateTopicBox::MSG_GEN_SET_ENABLED(VUM_NOW);
		}
	else  {
		@send CreateTopicBox::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}

	if (selection == GIGS_NONE) {
		@send DeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}
	else {
		@send DeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		}

}


