/***************************************************************************
 *  FILE:			stu_mtds.goc
 *  PROJECT:		Breadbox Teacher's Aide
 *  DESCRIPTION:	This file has methods for student manipulation
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "taide.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/*
 ***************************************************************************
 *		Code for student database Manipulation
 ***************************************************************************
 */

void SetStuDBNavButtons(dword numStudents, dword curStudent)
{
    if ((numStudents < 2) || (!curStudent))
	  @call MSDBPrevButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else
	  @call MSDBPrevButton::MSG_GEN_SET_ENABLED(VUM_NOW);

    if (curStudent < (numStudents - 1))
	  @call MSDBNextButton::MSG_GEN_SET_ENABLED(VUM_NOW);
    else
	  @call MSDBNextButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_STUDENT for TADocumentClass
 *               (GEN_TRIGGER_ACTION)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_STUDENT
{
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;
 char		stuContext[] = "StudentDB";
 char		defContext[] = "StuDefaults";

    /* set them to the general tab */
    if (!@call MSDBGeneralData::MSG_GEN_GET_USABLE()) {
	  @call MSDBGeneralData::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBAddressData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBParentsData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBSaveStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBSaveNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* set up the extra field */
    /* get our VMmap block */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    /* get the extra field name - if any */
    if (strlen(VMmapPtr->VMMS_extraFieldName))  {
	  @call MSDBStuSpare::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBStuSpare::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
						  VMmapPtr->VMMS_extraFieldName,
						  VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else
	  @call MSDBStuSpare::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    VMUnlock(mh);
    
    /* students or defaults? */
    if (trigger == @ManageStudentsMenuItem) {
	  /* manage settings */
	  @call MSDBNameLine::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesTab::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBPrevButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNextButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBSaveStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBCanxButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDefSaveButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDefCanxButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  /* set the DBox title */
	  MemLock (OptrToHandle(@MSDBStuMoniker));
	  @call MainStudentDB::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@MSDBStuMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@MSDBStuMoniker));
	  /* set the help context */
	  @call MainStudentDB::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	  @call MainStudentDB::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_HELP_CONTEXT | VDF_SAVE_TO_STATE),
			10,
			&stuContext);
	  @call MainStudentDB::MSG_GEN_SET_USABLE(VUM_NOW);

	  /* fill in info on selected student */
	  if (pself->TADI_numStudents) {
		/* free up any previous record in memory */
		if (pself->TADI_openStuRecMH) BasicDBDiscardRecord(pself->TADI_openStuRecMH);
		/* show the info */
		pself->TADI_openStuRecMH = ShowStuData (pself->GDI_fileHandle,
						   pself->TADI_stuDBHan,
						   pself->TADI_curStuIndex,
						   FALSE,
						   pself->TADI_curStudent);
		if (!pself->TADI_openStuRecMH) NotifyDBox(0, @BDBGetByIndexError);
		}
	  else @call self::MSG_NEW_STUDENT();


	  /* set the canx moniker to cancel */
	  MemLock (OptrToHandle(@StuDBCanxMoniker));
	  @call MSDBCanxButton::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@StuDBCanxMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@StuDBCanxMoniker));

	  /* reset the prev/next buttons as needed */
	  if (!pself->TADI_isNewStu) {
		SetStuDBNavButtons(pself->TADI_numStudents, pself->TADI_curStudent);
		@call MSDBDeleteStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call MSDBNewStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  else {
		/* disable the new & del buttons */
		@call MSDBNewStuButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call MSDBDeleteStuButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  } /* end of manage students dbox if */
    else {
	  /* defaults settings */
	  @call MSDBNameLine::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesTab::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBPrevButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNextButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBSaveStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBCanxButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDefSaveButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDefCanxButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  /* set the DBox title */
	  MemLock (OptrToHandle(@MSDBDefMoniker));
	  @call MainStudentDB::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@MSDBDefMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@MSDBDefMoniker));
	  /* set the help context */
	  @call MainStudentDB::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	  @call MainStudentDB::MSG_META_ADD_VAR_DATA(
			(ATTR_GEN_HELP_CONTEXT | VDF_SAVE_TO_STATE),
			12,
			&defContext);
	  @call MainStudentDB::MSG_GEN_SET_USABLE(VUM_NOW);


	  /* fill in default info */
	  /* free up any previous record in memory */
	  if (pself->TADI_openStuRecMH) BasicDBDiscardRecord(pself->TADI_openStuRecMH);
	  /* show the info */
	  pself->TADI_openStuRecMH = ShowStuData (pself->GDI_fileHandle,
						pself->TADI_stuDefDBHan,
						pself->TADI_curStuIndex,
						TRUE,
						0);
	  if (!pself->TADI_openStuRecMH) NotifyDBox(0, @BDBGetByIndexError);
	  /* and free the default record */
	  BasicDBDiscardRecord(pself->TADI_openStuRecMH);
	  pself->TADI_openStuRecMH = 0;

	  } /* end of stu defaults settings dbox else */

    /* Open the dialog box */
    @call MainStudentDB::MSG_GEN_INTERACTION_INITIATE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_PREV_NEXT_STUDENT for TADocumentClass
 *               (GEN_TRIGGER_ACTION)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_PREV_NEXT_STUDENT
{


    pself->TADI_isNewStu = FALSE;

    /* next or previous? */
    if (trigger == @MSDBPrevButton) pself->TADI_curStudent--;
    else pself->TADI_curStudent++;

    /* fill in info on selected student */
    /* free up any previous record in memory */
    if (pself->TADI_openStuRecMH) BasicDBDiscardRecord(pself->TADI_openStuRecMH);
    pself->TADI_openStuRecMH = ShowStuData (pself->GDI_fileHandle,
			  pself->TADI_stuDBHan,
			  pself->TADI_curStuIndex,
			  FALSE,
			  pself->TADI_curStudent);

    if (@call MSDBNotesData::MSG_GEN_GET_USABLE()) {
	  pself->TADI_curStuNumNotes = ShowStuNote(pself->TADI_openStuRecMH);
	  }

    /* reset the prev/next buttons as needed */
    SetStuDBNavButtons(pself->TADI_numStudents, pself->TADI_curStudent);

    /* enable the new & del buttons */
    @call MSDBNewStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call MSDBDeleteStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call MSDBNewNoteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call MSDBDeleteNoteButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_STUDENT for TADocumentClass
 *
 *
 * DESCRIPTION:  this clears all the fields, sets the new student flag
 *               and opens a new record
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_NEW_STUDENT
{
 BasicDBError		error = 0;
 BasicDBFieldID	fieldID;
 VMBlockHandle		notesDBHan, notesDIndexHan, notesSIndexHan;


    /* free up any previous record in memory */
    if (pself->TADI_openStuRecMH) BasicDBDiscardRecord(pself->TADI_openStuRecMH);
    pself->TADI_openStuRecMH = 0;

    pself->TADI_isNewStu = TRUE;

    /* fill in default info */
    pself->TADI_openStuRecMH = ShowStuData (pself->GDI_fileHandle,
					pself->TADI_stuDefDBHan,
			          pself->TADI_stuDBHan,
					TRUE,
					0);
    if (!pself->TADI_openStuRecMH) NotifyDBox(0, @BDBGetByIndexError);
    /* and free the default record */
    BasicDBDiscardRecord(pself->TADI_openStuRecMH);
    pself->TADI_openStuRecMH = 0;

    /* create a new record */
    pself->TADI_openStuRecMH = MakeNewStuRec(pself->GDI_fileHandle, pself->TADI_stuDBHan);
    if(!pself->TADI_openStuRecMH) {
	  NotifyDBox(0, @ErrMsgCouldntCreateNewRec);
	  return;
	  }
    /* initialize the notes fields */
    pself->TADI_curStuNumNotes = 0;
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
    error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
							fieldID,
							&pself->TADI_curStuNumNotes,
							sizeof(dword));
    if (error) NotifyDBox(0, @BDBSetFieldDataError);

    /* create the notes db and notes index dbs */
    error = BasicDBCreate(pself->GDI_fileHandle, &notesDBHan, FALSE);
    if (error) NotifyDBox(0, @BDBCreateError);
    else {
	  error = BasicDBIndexCreate(pself->GDI_fileHandle,
					 notesDBHan,
					 BDBILF_AUTO_UPDATE,
					 VFC_DATE,
					 &notesDIndexHan);
	  if (error) NotifyDBox(0, @BDBCreateIndexError);
	  error = BasicDBIndexCreate(pself->GDI_fileHandle,
					 notesDBHan,
/* INDEX */			 BDBILF_AUTO_UPDATE,
					 VFC_SUBJ,
					 &notesSIndexHan);
	  if (error) NotifyDBox(0, @BDBCreateIndexError);
	  }
    /* save the newly created db and index info */
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
    error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
    if (error) NotifyDBox(0, @BDBSetFieldDataError);
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_D_INDX,
							1);
    error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesDIndexHan,
						    sizeof(VMBlockHandle));
    if (error) NotifyDBox(0, @BDBSetFieldDataError);
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_S_INDX,
							1);
    error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesSIndexHan,
						    sizeof(VMBlockHandle));
    if (error) NotifyDBox(0, @BDBSetFieldDataError);



    /* set the prev/next buttons */
    if (pself->TADI_numStudents < 2)
	  @call MSDBPrevButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else
       @call MSDBPrevButton::MSG_GEN_SET_ENABLED(VUM_NOW);
    @call MSDBNextButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* disable the new & del buttons */
    @call MSDBNewStuButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call MSDBDeleteStuButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* set the canx moniker to cancel */
    MemLock (OptrToHandle(@StuDBCanxMoniker));
    @call MSDBCanxButton::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@StuDBCanxMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
    MemUnlock (OptrToHandle(@StuDBCanxMoniker));

    /* and set the focus */
    @call MSDBLastName::MSG_META_GRAB_FOCUS_EXCL();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_SAVE_STUDENT_INFO for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_SAVE_STUDENT_INFO
{
 BasicDBError		error = 0;
 BasicDBRecordID    recordID;
 Boolean			wasProblem = FALSE;
 Boolean			savedOK;
 MemHandle		vmh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 word			valueForCallback, gp, i, days, startDateNum, endDateNum;
 char			attString[ATT_STRING_SIZE];
 BasicDBFieldID    	fieldID;
 byte			grades[MAX_ELEMENTS];
 dword			gradeSum[MAX_GRADE_TYPES];


    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_BUSY();
    /* save the data */
    savedOK = SaveStuData(pself->TADI_openStuRecMH);
    if (savedOK) {
	  if (pself->TADI_isNewStu) {
		/* initialize the attendance data */
		attString[0] = 0;
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
		for (gp = 0; gp < MAX_GRADE_PDS; gp++) {
		   /* get the gp dates */
		   startDateNum = VMmapPtr->VMMS_gpStart[gp];
		   endDateNum = VMmapPtr->VMMS_gpEnd[gp];
		   /* fill in the att string */
		   days = CountDays(startDateNum, endDateNum, pself->TADI_showWeekends);
		   for (i = 0; i < days; i++)  {
			 strcat(attString, " ");
			 }
		   strcat(attString, "*"); /* end of gp marker */
		   }  /* end of gp for loop */
		VMUnlock(vmh);
		/* set the field data */
		fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							   BDBFHE_CATEGORY,
							   STU_ATTENDANCE,
							   1);
		error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
							   fieldID,
							   attString,
							   strlen(attString));

		/* and initialize the grade fields */
		memset(grades, NO_GRADE, MAX_ELEMENTS);
		for (i = 0; i < MAX_GRADE_PDS; i++) {
		   fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							   BDBFHE_CATEGORY,
							   (STU_GRADES_1 + i),
							   1);
		   error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
							   fieldID,
							   grades,
							   MAX_ELEMENTS);
		   }
		/* and initialize the grade summaryfields */
		for (i = 0; i < MAX_GRADE_TYPES; i++) {
		   gradeSum[i] = NO_SUMMARY;
		   }
		for (i = 0; i < MAX_GRADE_PDS; i++) {
		   fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							   BDBFHE_CATEGORY,
							   (STU_GRADE_SUM_1 + i),
							   1);
		   error = BasicDBSetFieldData(pself->TADI_openStuRecMH,
							   fieldID,
							   gradeSum,
							   (MAX_GRADE_TYPES * sizeof(dword)));
		   }


		} /* end of new student init att & grade info if */

	  /* and store the record */
	  error = BasicDBSaveRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_openStuRecMH,
					   StudentsCallback,
					   &recordID);
	  if (error) wasProblem = TRUE;
	  else {
		/* lets re-get the memHan since the user may add more
		 * data to save.  This gets the just saved record's
		 * place in the index array too - so we can set the
		 * prev/next buttons */
		if(pself->TADI_curStuIndex == pself->TADI_stuNameIndex) valueForCallback = VFC_NAME;
		else valueForCallback = VFC_NUMBER;
		error = BasicDBIndexElementFind (pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   recordID,
					   pself->TADI_curStuIndex,
					   valueForCallback,
					   StudentsCallback,
					   &pself->TADI_curStudent);
		if (error) NotifyDBox(0, @BDBIndexElemFindError);
		/* use the index position to get rec back into memory */
		error = BasicDBGetRecordByIndex(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_curStuIndex,
					   pself->TADI_curStudent,
					   &pself->TADI_openStuRecMH);
		if (error) NotifyDBox(0, @BDBGetByIndexError);
		} /* end of no problems storing else */

	  }  /* end of saved ok if */
    else wasProblem = TRUE;

    if (wasProblem) {
	  NotifyDBox(0, @ErrMsgCouldntSaveRec);
    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	  return;
	  }
    else {
	  if (pself->TADI_isNewStu) {
		pself->TADI_numStudents++;
		/* save the new number */
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
		VMmapPtr->VMMS_numStudents = pself->TADI_numStudents;
		VMDirty(vmh);
		VMUnlock(vmh);
		pself->TADI_isNewStu = FALSE;

		/* add a row to the grid */
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@MCANamesGrid))::
				    MSG_VIS_GRID_ADD_ROW(pself->TADI_curStudent, NAME_HEIGHT);
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
				    MSG_VIS_GRID_ADD_ROW(pself->TADI_curStudent, NAME_HEIGHT);
		@call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
				    MSG_VIS_GRID_ADD_ROW(pself->TADI_curStudent, NAME_HEIGHT);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_UNSUSPEND();

		/* Add the new label since this is a new student */
		StudentSeatingLabelDeclare(pself->GDI_fileHandle,
							pself->TADI_stuDBHan,
							pself->TADI_curStuIndex,
							pself->GDI_display,
							pself->TADI_numStudents-1,
							TRUE) ;
		}  /* end of new student if */
	  else {
		StudentSeatingLabelDeclare(pself->GDI_fileHandle,
							pself->TADI_stuDBHan,
							pself->TADI_curStuIndex,
							pself->GDI_display,
							recordID,
							FALSE) ;
		}

	  /* set the canx moniker to done */
	  MemLock (OptrToHandle(@StuDBDoneMoniker));
	  @call MSDBCanxButton::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
				   LMemDeref(@StuDBDoneMoniker),
				   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@StuDBDoneMoniker));
	  }  /* end of no problem else */

    /* reset the prev/next buttons as needed */
    SetStuDBNavButtons(pself->TADI_numStudents, pself->TADI_curStudent);

    /* enable the new & del buttons */
    @call MSDBNewStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call MSDBDeleteStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_STUDENT for TADocumentClass
 *
 * DESCRIPTION:	inactivates the record currently on the screen
 *                  (moves it to the delStu dbase)
 *                  deletes a student - for real!
 ***********************************************************************/
@extern method TADocumentClass, MSG_DELETE_STUDENT
{
 BasicDBError		error;
 MemHandle		vmh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		notesDBHan, notesDIndexHan, notesSIndexHan;
 VMBlockHandle		vmbh, mhDupRec;
 BasicDBRecordID    recordSeatID = 0;
 word			numNotes;
 BasicDBFieldID	fieldID;


    /* show confirmation dialog box */
    if (AckDBox(0, 0, @ConfMsgDeleteStu) == ACK_NO) return;

    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* grab the ID so we can tell the seating module */
    recordSeatID = BasicDBGetRecordID(pself->TADI_openStuRecMH);

    /* see if we need to free the notes db and index */
    fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
    BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &numNotes,
						    sizeof(dword));
    if (numNotes) {
	  /* yes we do need to */
	  /* get the selected student's notes db */
	  fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
	  BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
	  /* and indices */
	  fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_D_INDX,
							1);
	  BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesDIndexHan,
						    sizeof(VMBlockHandle));
	  fieldID = BasicDBGetFieldID(pself->TADI_openStuRecMH,
							BDBFHE_CATEGORY,
							STU_NOTES_S_INDX,
							1);
	  BasicDBGetFieldData(pself->TADI_openStuRecMH,
						    fieldID,
						    &notesSIndexHan,
						    sizeof(VMBlockHandle));
	  /* free them up */
    /*	  BasicDBIndexDestroy(pself->GDI_fileHandle,
					   notesDBHan,
					   notesDIndexHan); crashes :-(  */
	  VMFree(pself->GDI_fileHandle, notesDIndexHan);
    /*	  BasicDBIndexDestroy(pself->GDI_fileHandle,
					   notesDBHan,
					   notesSIndexHan); */
	  VMFree(pself->GDI_fileHandle, notesSIndexHan);
	  VMFree(pself->GDI_fileHandle, notesDBHan); /* no equivalent basicdb routine */
	  } /* end of free notes if */

    /* copy the record to save in the del dbase */
 //   mhDupRec = BasicDBDuplicateRecord(pself->TADI_openStuRecMH);

    /* remove the rec from the active db */
    error = BasicDBDeleteRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   pself->TADI_openStuRecMH,
					   StudentsCallback);
    pself->TADI_openStuRecMH = NullHandle;

    /* and save it to the inactive db */
 /*   BasicDBSaveRecord(pself->GDI_fileHandle,
				  pself->TADI_delStuDBHan,
				  mhDupRec,
				  0,
				  0);
 */
    pself->TADI_numStudents--;
    /* save the new numbers */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
    VMmapPtr->VMMS_numStudents = pself->TADI_numStudents;
 //   VMmapPtr->VMMS_numDelStudents++;
    VMDirty(vmh);
    VMUnlock(vmh);

    if (!pself->TADI_numStudents) @call self::MSG_NEW_STUDENT();
    else {
	  /* set the new current student */
	  if (pself->TADI_curStudent == pself->TADI_numStudents) pself->TADI_curStudent--;
	  /* show the info */
	  pself->TADI_openStuRecMH = ShowStuData (pself->GDI_fileHandle,
				pself->TADI_stuDBHan,
				pself->TADI_curStuIndex,
				FALSE,
				pself->TADI_curStudent);
	  if (@call MSDBNotesData::MSG_GEN_GET_USABLE()) {
		pself->TADI_curStuNumNotes = ShowStuNote(pself->TADI_openStuRecMH);
		}
	  /* reset the prev/next buttons as needed */
	  SetStuDBNavButtons(pself->TADI_numStudents, pself->TADI_curStudent);
	  /* enable the new & del buttons */
	  @call MSDBNewStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteStuButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* delete a row from the grid */
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_SUSPEND();
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCANamesGrid))::
				    MSG_VIS_GRID_DELETE_ROW(pself->TADI_curStudent);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
				    MSG_VIS_GRID_DELETE_ROW(pself->TADI_curStudent);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
				    MSG_VIS_GRID_DELETE_ROW(pself->TADI_curStudent);
    @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
			    MSG_META_UNSUSPEND();

    if (recordSeatID)
	   StudentSeatingLabelDelete(pself->GDI_display, recordSeatID) ;

    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CLOSE_STUDENT_DB for TADocumentClass
 *
 * DESCRIPTION:   cleans up and closes the student dbox
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_CLOSE_STUDENT_DB
{

    pself->TADI_isNewStu = FALSE;

    /* free up any previous record in memory */
    if (pself->TADI_openStuRecMH) {
	  BasicDBDiscardRecord(pself->TADI_openStuRecMH);
	  pself->TADI_openStuRecMH = 0;
	  }

    /* dismiss the dbox */
    @call MainStudentDB::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_STUDENT_TAB for TADocumentClass
 *               (GEN_TRIGGER_ACTION)
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_STUDENT_TAB
{


    if (trigger == @MSDBGeneralTab) {
	  @call MSDBGeneralData::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBAddressData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBParentsData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBStuNum::MSG_META_GRAB_FOCUS_EXCL();
	  }
    else if (trigger == @MSDBAddressTab) {
	  @call MSDBGeneralData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBAddressData::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBParentsData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBStuAddress::MSG_META_GRAB_FOCUS_EXCL();
	  }
    else if (trigger == @MSDBParentsTab) {
	  @call MSDBGeneralData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBAddressData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBParentsData::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBStuMName::MSG_META_GRAB_FOCUS_EXCL();
	  }
    else {
	  @call MSDBGeneralData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBAddressData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBParentsData::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNotesData::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNoteSubj::MSG_META_GRAB_FOCUS_EXCL();
	  /* and set up the note(s) */
	  pself->TADI_curStuNumNotes = ShowStuNote(pself->TADI_openStuRecMH);
	  }  

    if (trigger == @MSDBNotesTab) {
	  @call MSDBSaveStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewStuButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBSaveNoteButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteNoteButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewNoteButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @call MSDBSaveNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBDeleteNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBNewNoteButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  if (!@call MSDBDefSaveButton::MSG_GEN_GET_USABLE()) {
		@call MSDBSaveStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@call MSDBDeleteStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@call MSDBNewStuButton::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
          }
	  }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_SAVE_STU_DEFAULTS for TADocumentClass
 *               
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_SAVE_STU_DEFAULTS
{
 BasicDBError		error;
 BasicDBRecordID    recordID;
 Boolean			wasProblem = FALSE;
 Boolean			savedOK;


    /* get the record into memory */
    error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
					   pself->TADI_stuDefDBHan,
					   0,
					   &pself->TADI_openStuRecMH);

    /* ok - now save the data */
    savedOK = SaveStuData(pself->TADI_openStuRecMH);
    if (savedOK) {
	  /* and store the record */
	  error = BasicDBSaveRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDefDBHan,
					   pself->TADI_openStuRecMH,
						StuDefaultsCallback,
					   &recordID);
	  if (error) wasProblem = TRUE;

	  }
    else wasProblem = TRUE;

    if (wasProblem) {
	  NotifyDBox(0, @ErrMsgCouldntSaveRec);
	  }

    pself->TADI_openStuRecMH = 0;

    /* dismiss the dbox */
    @call MainStudentDB::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_STUDENT_PICK_LIST for TADocumentClass
 *               (word whichPick)
 * DESCRIPTION:  sets up the corresponding pick list of stu
 *               database items when the button is clicked
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_STUDENT_PICK_LIST
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 word		numItems;
 char		titleString[NAME_SIZE];

    /* set the global */
    pself->TADI_curPickList = whichPick;   

	 /* and the title */
	 MemLock(OptrToHandle(@TeamStr));
	 switch (pself->TADI_curPickList) {
	  case (STU_PICK_TEAM): strcpy(titleString, LMemDeref(@TeamStr)); break;
	  case (STU_PICK_MED): strcpy(titleString, LMemDeref(@MedStr)); break;
	  case (STU_PICK_CAT): strcpy(titleString, LMemDeref(@CatStr)); break;
	  case (STU_PICK_CLASS): strcpy(titleString, LMemDeref(@ClassStr)); break;
	  }
	 MemUnlock(OptrToHandle(@TeamStr));
	 @call StuPickListGroup::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
                         titleString, VUM_DELAYED_VIA_APP_QUEUE);

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, pself->TADI_curPickList);
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);

    /* find out how many items in the list */
    numItems = ChunkArrayGetCountHandles(mh,
	  pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM]);
    VMUnlock(mh);

    /* and initialize the list */
    @call StuPickDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numItems);
    @call StuPickDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* disable the delete and use buttons */
    @call StuPickUse::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call StuPickDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* Open the dialog box */
    @call StuPickListGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_STU_PICK_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection in the pick lists.
 *                  Enables use and delete buttons
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_STU_PICK_DLIST_APPLY
{

    @call StuPickUse::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call StuPickDelete::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_STU_PICK_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for stu pick lists.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_STU_PICK_DLIST_MONIKER_QUERY
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 char		*listItem;

 
    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, pself->TADI_curPickList);

    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    listItem = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM],
		   item,
		   0);

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, listItem);
    VMUnlock(mh);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_NEW_PICK_ITEM for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_NEW_PICK_ITEM
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 char		*listItem;
 char		listString[NAME_SIZE];

 
    @call NPIName::MSG_VIS_TEXT_GET_ALL_PTR(listString);

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, pself->TADI_curPickList);

    /* append the new item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    listItem = ChunkArrayAppendHandles(
			 mh,
			 pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM],
			 0);
    strcpy(listItem, listString);
    VMDirty(mh);
    VMUnlock(mh);

    /* and tell the list */
    @call StuPickDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);

    @call NPIName::MSG_VIS_TEXT_DELETE_ALL();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_USE_PICK_ITEM for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_USE_PICK_ITEM
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 char		*listItem;
 word		selection;
 optr		stuDataField;

 
    /* get the selection */
    selection = @call StuPickDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, pself->TADI_curPickList);
    /* and the array handle & field */
    switch (pself->TADI_curPickList) {
	  case (STU_PICK_TEAM): stuDataField = @MSDBStuTeam; break;
	  case (STU_PICK_MED): stuDataField = @MSDBStuMed; break;
	  case (STU_PICK_CAT): stuDataField = @MSDBStuCat; break;
	  case (STU_PICK_CLASS): stuDataField = @MSDBStuClass; break;
	  }
    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    listItem = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM],
		   selection,
		   0);
    /* fill in the field */
    @call stuDataField::MSG_VIS_TEXT_REPLACE_ALL_PTR(listItem, 0);
    VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_PICK_ITEM for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_DELETE_PICK_ITEM
{
 VMBlockHandle	vmbh;
 MemHandle	mh;
 char		*listItem;
 word		selection;

 
    /* put up an are you sure dbox */
    if (AckDBox(0, 0, @ConfMsgDeleteStuPickItem) == ACK_NO) return;

    /* get the selection */
    selection = @call StuPickDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* get the list */
    vmbh = VMFind(pself->GDI_fileHandle, NullHandle, pself->TADI_curPickList);

    /* get the requested item */
    VMLock(pself->GDI_fileHandle, vmbh ,&mh);
    listItem = ChunkArrayElementToPtrHandles(
		   mh,
		   pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM],
		   selection,
		   0);
    /* delete this item */
    ChunkArrayDeleteHandle(pself->TADI_pickListChunkArray[pself->TADI_curPickList - STU_PICK_TEAM],
                           listItem);
    VMDirty(mh);
    VMUnlock(mh);

    /* disable the delete and use buttons */
    @call StuPickUse::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call StuPickDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* and tell the list */
    @call StuPickDList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(selection, 1);
    @call StuPickDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);



}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_STUDENT_DB_EXTRA_FIELD for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_OPEN_STUDENT_SETTINGS
{
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;


    /* get our VMmap block */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    /* get the extra field name - if any */
    if (strlen(VMmapPtr->VMMS_extraFieldName))  {
	  @call SSExtraFieldName::MSG_VIS_TEXT_REPLACE_ALL_PTR(
							    VMmapPtr->VMMS_extraFieldName, 0);
	  @call SSExtraFieldName::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @call SSExtraFieldBGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
						    1, TRUE);
	  }
    else {
	  @call SSExtraFieldName::MSG_VIS_TEXT_DELETE_ALL();
	  @call SSExtraFieldName::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @call SSExtraFieldBGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
						    1, FALSE);
	  }
    VMUnlock(mh);

    /* and the sort field section */
	 @send SSSFNumberNameGroup::
				MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(g_numName, FALSE);
	 if (pself->TADI_curStuIndex == pself->TADI_stuNameIndex) {
		 @send SSSFItemGroup::
				MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(VFC_NAME, FALSE);
		 @send SSSFNumberNameGroup::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		 }
	 else  {
		 @send SSSFItemGroup::
				MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(VFC_NUMBER, FALSE);
		 @send SSSFNumberNameGroup::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		 }

    /* and the notes sort field section */
    @call SNSFItemGroup::
	  MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(pself->TADI_curStuNoteSortPref, FALSE);

    /* Open the dialog box */
    @call StuSettingsDB::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_EF_BOOLEAN_STATUS for TADocumentClass
 *
 * DESCRIPTION:	Handles selection extra field boolean.
 *
 * PARAMETERS:  void (word selectedBooleans)
 *
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_EF_BOOLEAN_STATUS
{


	if (selectedBooleans)
		@send SSExtraFieldName::MSG_GEN_SET_ENABLED(VUM_NOW);

	else @send SSExtraFieldName::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SF_ITEM_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection of the student
 *                  sort field.  Turns num only/name & num selector
 *                  on/off.
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_SF_ITEM_APPLY
{

	 if (selection == VFC_NAME)
			@send SSSFNumberNameGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	 else @send SSSFNumberNameGroup::MSG_GEN_SET_ENABLED(VUM_NOW);



}

/***********************************************************************
 *
 * MESSAGE:	MSG_NOTES_SF_ITEM_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:	Handles an apply of user selection of the student
 *                  notes sort field.
 *
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_NOTES_SF_ITEM_APPLY
{

	 pself->TADI_curStuNoteSortPref = selection;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SET_STUDENT_SETTINGS for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_SET_STUDENT_SETTINGS
{
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;
 char			fieldName[15];
 word			length = 0;
 word 		sort, numName;


    /* see if there is an extra field */
    if(@call SSExtraFieldBGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1))
	  length = @call SSExtraFieldName::MSG_VIS_TEXT_GET_ALL_PTR(fieldName);

    /* get our VMmap block */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    /* save the extra field name - if any */
    if (length) strcpy(VMmapPtr->VMMS_extraFieldName, fieldName);    
    else strcpy(VMmapPtr->VMMS_extraFieldName, "");

    /* now tell the Student dbox about the extra field */
    if (length) {
	  @call MSDBStuSpare::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call MSDBStuSpare::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(fieldName,
										VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else
	  @call MSDBStuSpare::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	 /* see if the student sort order has changed */
	 sort = @call SSSFItemGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 numName = @call SSSFNumberNameGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 if ( ((sort == VFC_NAME) &&
						(pself->TADI_curStuIndex == pself->TADI_stuNumIndex)) ||
		 ((sort == VFC_NUMBER) &&
						(pself->TADI_curStuIndex == pself->TADI_stuNameIndex)) ||
		 (numName != g_numName) ) {
		 /* OK the order was changed... */

		 if (sort == VFC_NAME) pself->TADI_curStuIndex = pself->TADI_stuNameIndex;
		 else pself->TADI_curStuIndex = pself->TADI_stuNumIndex;
		 /* save the sort field */
		 VMmapPtr->VMMS_curStuIndex = pself->TADI_curStuIndex;
		 g_numName = numName;

		 /* redraw the thing to show the new sort... */
		 /* this is really pretty ugly!!!  But it works! */
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
				 MSG_META_SUSPEND();
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCANamesGrid))::
					 MSG_VIS_GRID_ADD_ROW(0, NAME_HEIGHT);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCANamesGrid))::
					 MSG_VIS_GRID_DELETE_ROW(0);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
					 MSG_VIS_GRID_ADD_ROW(0, NAME_HEIGHT);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
					 MSG_VIS_GRID_DELETE_ROW(0);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
					 MSG_VIS_GRID_ADD_ROW(0, NAME_HEIGHT);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
					 MSG_VIS_GRID_DELETE_ROW(0);
		 @call ConstructOptr(pself->GDI_display, OptrToChunk(@TADisplay))::
				 MSG_META_UNSUSPEND();
       } /* end of sort order changed if */

	 /* save the student notes sort order */
	 sort = @call SNSFItemGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 pself->TADI_curStuNoteSortPref = sort;
	 /* save the notes sort field */
	 VMmapPtr->VMMS_curStuNoteSortPref = pself->TADI_curStuNoteSortPref;

	 VMDirty(mh);
	 VMUnlock(mh);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_INACT_STU_DBOX for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_OPEN_INACT_STU_DBOX
{
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;
 word			numDelStu;


    /* how many del students? */
/*    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
    numDelStu = VMmapPtr->VMMS_numDelStudents;
    VMUnlock(mh);

    /* disable the buttons */
/*    @send ISDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send ISDBReActivate::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* and initialize the list */
/*    @call ISDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numDelStu);
    @call ISDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    /* open the dbox */
/*    @call InactStuDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_REACTIVATE_STUDENT for TADocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_REACTIVATE_STUDENT
{

}

/***********************************************************************
 *
 * MESSAGE:	MSG_REALLY_DELETE_STUDENT for TADocumentClass
 *
 * DESCRIPTION:	Deletes the selected student
 *
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_REALLY_DELETE_STUDENT
{
 BasicDBFieldID	fieldID;
 VMBlockHandle		notesDBHan, notesDIndexHan, notesSIndexHan;
 MemHandle		vmh, dbmh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 word			selection, numNotes, numDelStudents;


    /* show confirmation dialog box */
/*    if (AckDBox(0, 0, @ConfMsgDeleteStu) == ACK_NO) return;

    selection = @call ISDBDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* see if we need to free the notes db and index */
/*    BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
				   pself->TADI_delStuDBHan,
				   selection,
				   &dbmh);
    fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
    BasicDBGetFieldData(dbmh,
						    fieldID,
						    &numNotes,
						    sizeof(dword));
    if (numNotes) {
	  /* yes we do need to */
	  /* get the selected student's notes db */
/*	  fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
	  BasicDBGetFieldData(dbmh,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
	  /* and indices */
/*	  fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NOTES_D_INDX,
							1);
	  BasicDBGetFieldData(dbmh,
						    fieldID,
						    &notesDIndexHan,
						    sizeof(VMBlockHandle));
	  fieldID = BasicDBGetFieldID(dbmh,
							BDBFHE_CATEGORY,
							STU_NOTES_S_INDX,
							1);
	  BasicDBGetFieldData(dbmh,
						    fieldID,
						    &notesSIndexHan,
						    sizeof(VMBlockHandle));
	  /* free them up */
/*	  BasicDBIndexDestroy(pself->GDI_fileHandle,
					   notesDBHan,
					   notesDIndexHan);
	  BasicDBIndexDestroy(pself->GDI_fileHandle,
					   notesDBHan,
					   notesSIndexHan);
	  VMFree(pself->GDI_fileHandle, notesDBHan); /* no equivalent basicdb routine */
/*	  } /* end of free notes if */
/*    BasicDBDeleteRecord(pself->GDI_fileHandle,
					   pself->TADI_delStuDBHan,
					   dbmh,
					   0);

    /* save the new number */
/*    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
    VMmapPtr->VMMS_numDelStudents--;
    numDelStudents = VMmapPtr->VMMS_numDelStudents;
    VMDirty(vmh);
    VMUnlock(vmh);

    /* update the list and buttons */
/*    @send ISDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send ISDBReActivate::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @call ISDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numDelStudents);
    @call ISDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_INACT_STU_DLIST_APPLY for TADocumentClass
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * DESCRIPTION:
 *
 *
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_INACT_STU_DLIST_APPLY
{

    /* enable the buttons */
/*    @send ISDBDelete::MSG_GEN_SET_ENABLED(VUM_NOW);
  /*  @send ISDBReActivate::MSG_GEN_SET_ENABLED(VUM_NOW);
  */
/*
}

/***********************************************************************
 *
 * MESSAGE:	MSG_INACT_STU_DLIST_MONIKER_QUERY for TADocumentClass
 *
 * DESCRIPTION:	Queries for monikers for inact stu lists.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
/*@extern method TADocumentClass, MSG_INACT_STU_DLIST_MONIKER_QUERY
{
 MemHandle		mh;
 char			nameString[NAME_SIZE], fullString[NAME_SIZE * 3];
 word			size;
 BasicDBFieldID	fieldID;
 
    /* get the names */
/*    BasicDBGetRecordByIndex(pself->GDI_fileHandle,
				   pself->TADI_delStuDBHan,
				   pself->TADI_curStuIndex,
				   item,
				   &mh);
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_L_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            fullString,
                            NAME_SIZE);
    fullString[size] = 0;
    strcat(fullString, ", ");
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_F_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            nameString,
                            NAME_SIZE);
    nameString[size] = 0;
    strcat(fullString, nameString);
    strcat(fullString, " ");
    fieldID = BasicDBGetFieldID(mh,
                            BDBFHE_CATEGORY,
                            STU_M_NAME,
                            1);
    size = BasicDBGetFieldData(mh,
                            fieldID,
                            nameString,
                            NAME_SIZE);
    nameString[size] = 0;
    strcat(fullString, nameString);
    BasicDBDiscardRecord(mh);

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fullString);

}
*/

