/*
 **************************************************************************
 *  FILE:			imp_mtds.goc
 *  PROJECT:		Teacher's Aide
 *  DESCRIPTION:	This file has methods for the import
 *				functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "taide.goh"
@include "externs.goh"

/*********************************************************************
 *  the globals declared as extern in .goh
 ********************************************************************
*/

Boolean g_importing = FALSE;

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_IMPORT for TADocumentClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *                  is clicked
 *
 *
 *
 ***********************************************************************/

@extern method TADocumentClass, MSG_OPEN_IMPORT
{


    /* start out in Document folder */
    @call ImpFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

    /* Open the dialog box */
    @call ImportDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_IMPORT_TADATA for TADocumentClass
 *
 * DESCRIPTION:	 Opens the selected file and does the import
 *              
 *     
 *              
 *
 ***********************************************************************/
@extern method TADocumentClass, MSG_IMPORT_TADATA
{
char		impName[FILE_LONGNAME_BUFFER_SIZE];
char		impPath[PATH_BUFFER_SIZE];
dword		selFlags, i, impFileSize, fieldNum, numNotes, length;
FileHandle		impFileHandle;
DiskHandle		impDiskhandle;
word		j, charRead, lineCount;
word		fileCloseError, impStudents = 0;
char		impHeaderBuffer[50];
char		charBuffer[2];
char		tagBuffer[13];
char		dataBuffer[NAME_SIZE + 3];
TimerDateAndTime	date;
Boolean		validFile = FALSE;
dword		readStart;
Boolean		newClass = FALSE;
word		readType = RT_TAG;
MemHandle		recMH, noteMH, noteHan;
BasicDBFieldID	fieldID;
 BasicDBFieldID	dateFieldID, textFieldID, subjFieldID;
VMBlockHandle		notesDBHan, notesDIndexHan, notesSIndexHan;
 MemHandle		vmh;
 VMMapStruct		*VMmapPtr;
 VMBlockHandle		vmbh;
 word			gp, days, startDateNum, endDateNum;
 char			attString[ATT_STRING_SIZE];
 byte			grades[MAX_ELEMENTS];
 dword			gradeSum[MAX_GRADE_TYPES];
BasicDBError		error;
 char*			note;


    if (!pself->TADI_numStudents) newClass = TRUE;

    /* first get the flags and file name of the selection */
    selFlags = @call ImpFileSel::
		  MSG_GEN_FILE_SELECTOR_GET_SELECTION(impName);

    /* check to see if it's a file - redundant if dbl clicked */
    if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
       /* if not just return */
       return;
       }

    /* put up are you sure box if there are trans in the account */
    if (!newClass) {
	  if (AckDBox(impName, 0, @ImportMsg) == ACK_NO) return;
	  }
	  
    /* get the file's path and disk handle */
    @call ImpFileSel::MSG_GEN_PATH_GET(impPath, sizeof(impPath));
    impDiskhandle = @call ImpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

    /* save our TA file directory */
    FilePushDir();

    /* and set the imp file dir  - FileSel doesn't do this */
    FileSetCurrentPath(impDiskhandle, impPath);

    /* dismiss the file selector box now */
    @send ImportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* and open the imp file */
    impFileHandle = FileOpen(impName, (FILE_ACCESS_R | FILE_DENY_W));
    /* if impFileHandle is NULL then there was an error */
    if (!impFileHandle)  {
	  NotifyDBox(0, @ImpOpenErrMsg);
	  FilePopDir();
       return;  /* bail out */
       }

    /* put up progress box */
 //   @call ImportProg::MSG_GEN_INTERACTION_INITIATE();
    /* mark app busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* OK let's read the file...
     * FileRead returns -1 if there was an error */
    /* first get the file size */
    impFileSize = FileSize(impFileHandle);
    /* set the file read start */
    readStart = 0;
    /* first check for TAD file header */
    charRead = FileRead(impFileHandle, impHeaderBuffer, 19, FALSE);
    if (charRead == 19)  {  /* good read */
	  readStart = 19;
	  /* add null to end of buffer */
	  impHeaderBuffer[19] = NULL;
	  if (strcmp(impHeaderBuffer, "[TA-DATA-FILE-V1]\r\n") == 0) {
		/* this starts a valid TAD file */
		validFile = TRUE;
		}
	  impHeaderBuffer[0] = 0;  /* re-init the buffer */
	  } /* end of good read if */
    else  {  /* read error */
	  NotifyDBox(0, @ImpReadErrMsg);
	  /* close the file */
	  fileCloseError = FileClose(impFileHandle, FALSE);
	  if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);
	  /* dismiss the progress box */
	 //	@send ImportProg::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  /* mark app not busy */
	  @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	  /* and restore the TA file dir */
	  FilePopDir();
	  return;
	  }  /* end of bad read else */

    if (!validFile) {
	  /* not a valid TA file */
	  NotifyDBox(0, @ImpBadTypeErrMsg);
	  /* close the file */
	  fileCloseError = FileClose(impFileHandle, FALSE);
	  if (fileCloseError) NotifyDBox(0, @ImpCloseErrMsg);
	  /* dismiss the progress box */
    //   @send ImportProg::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  /* mark app not busy */
	  @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	  /* and restore the TA file dir */
	  FilePopDir();
       return;
	  }   /* end of not valid TA if */

    /* start the PROGRESS BOX counting here */
  /*  transImp = 0;
    @call IPExamine::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call IPCount::MSG_GEN_SET_USABLE(VUM_NOW); */

    /* tell the world we're importing */
    g_importing = TRUE;


    /* OK now read file one char at a time ------------------- */
    lineCount = 0;
    /* start the reading loop */
    for (i = readStart; i < impFileSize; i++) {
	  charRead = FileRead(impFileHandle, charBuffer, 1, FALSE);
	  /* make sure it's a good read */
	  if (charRead == 1)  {  /* good read */
		if (readType == RT_TAG)  {
		   if (charBuffer[0] == '\n')  {
			 tagBuffer[lineCount] = 0;
			 /* decipher the tag type */
			 if (!strcmp(tagBuffer, "[START-REC]")) {
			    /* create a new record */
			    recMH = MakeNewStuRec(pself->GDI_fileHandle,
								 pself->TADI_stuDBHan);
			    /* initialize the notes fields */
			    numNotes = 0;
			    fieldID = BasicDBGetFieldID(recMH,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
			    BasicDBSetFieldData(recMH,
							fieldID,
							&numNotes,
							sizeof(dword));
			    /* create the notes db and notes index dbs */
			    BasicDBCreate(pself->GDI_fileHandle, &notesDBHan, FALSE);
			    BasicDBIndexCreate(pself->GDI_fileHandle,
					 notesDBHan,
					 BDBILF_AUTO_UPDATE,
					 VFC_DATE,
					 &notesDIndexHan);
			    BasicDBIndexCreate(pself->GDI_fileHandle,
					 notesDBHan,
					 BDBILF_AUTO_UPDATE,
					 VFC_SUBJ,
					 &notesSIndexHan);
			    /* save the newly created db and index info */
			    fieldID = BasicDBGetFieldID(recMH,
							BDBFHE_CATEGORY,
							STU_NOTES_DB,
							1);
			    BasicDBSetFieldData(recMH,
						    fieldID,
						    &notesDBHan,
						    sizeof(VMBlockHandle));
			    fieldID = BasicDBGetFieldID(recMH,
							BDBFHE_CATEGORY,
							STU_NOTES_D_INDX,
							1);
			    BasicDBSetFieldData(recMH,
						    fieldID,
						    &notesDIndexHan,
						    sizeof(VMBlockHandle));
			    fieldID = BasicDBGetFieldID(recMH,
							BDBFHE_CATEGORY,
							STU_NOTES_S_INDX,
							1);
			    BasicDBSetFieldData(recMH,
						    fieldID,
						    &notesSIndexHan,
						    sizeof(VMBlockHandle));
			    } /* end START-REC if */
			 else if (!strcmp(tagBuffer, "[END-REC]")) {
			    /* update things & save the record */
                   /* notes if any */
			    if (numNotes)  {
				  fieldID = BasicDBGetFieldID(recMH,
							BDBFHE_CATEGORY,
							STU_NUM_NOTES,
							1);
				  BasicDBSetFieldData(recMH,
						    fieldID,
						    &numNotes,
						    sizeof(dword));
				  }
			    /* initialize the attendance data */
			    attString[0] = 0;
			    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
			    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
			    for (gp = 0; gp < MAX_GRADE_PDS; gp++) {
				  /* get the gp dates */
				  startDateNum = VMmapPtr->VMMS_gpStart[gp];
				  endDateNum = VMmapPtr->VMMS_gpEnd[gp];
				  /* fill in the att string */
				  days = CountDays(startDateNum, endDateNum, pself->TADI_showWeekends);
				  for (j = 0; j < days; j++)  strcat(attString, " ");
				  strcat(attString, "*"); /* end of gp marker */
				  }  /* end of gp for loop */
			    VMUnlock(vmh);
			    /* set the field data */
			    fieldID = BasicDBGetFieldID(recMH,
							   BDBFHE_CATEGORY,
							   STU_ATTENDANCE,
							   1);
			    BasicDBSetFieldData(recMH,
							   fieldID,
							   attString,
							   strlen(attString));

			    /* and initialize the grade fields */
			    memset(grades, NO_GRADE, MAX_ELEMENTS);
			    for (j = 0; j < MAX_GRADE_PDS; j++) {
				  fieldID = BasicDBGetFieldID(recMH,
							   BDBFHE_CATEGORY,
							   (STU_GRADES_1 + j),
							   1);
				  BasicDBSetFieldData(recMH,
							   fieldID,
							   grades,
							   MAX_ELEMENTS);
				  }
			    /* and initialize the grade summaryfields */
			    for (j = 0; j < MAX_GRADE_TYPES; j++)  gradeSum[j] = NO_SUMMARY;
			    for (j = 0; j < MAX_GRADE_PDS; j++) {
				  fieldID = BasicDBGetFieldID(recMH,
							   BDBFHE_CATEGORY,
							   (STU_GRADE_SUM_1 + j),
							   1);
				  BasicDBSetFieldData(recMH,
							   fieldID,
							   gradeSum,
							   (MAX_GRADE_TYPES * sizeof(dword)));
				  }
			    /* and store the record */
			    error = BasicDBSaveRecord(pself->GDI_fileHandle,
					   pself->TADI_stuDBHan,
					   recMH,
					   StudentsCallback,
					   0);
                   impStudents++;
			    recMH = 0;
			    }  /* end of END-REC if */
			 else if (!strncmp(tagBuffer, "[FIELD", 6)) {
                   /* get rid of the ] */
			    tagBuffer[strlen(tagBuffer) - 1] = 0;
			    /* get the field number */
			    UtilAsciiToHex32(&tagBuffer[7], &fieldNum);
			    /* set the new read type */
			    readType = RT_DATA;
			    }
/*			 else if (!strcmp(tagBuffer, "[NUM-NOTES]")) {
			    /* set the new read type */
/*			    readType = RT_NUM_NOTES;
			    }
*/			 else if (!strcmp(tagBuffer, "[N-SUBJ]")) {
			    /* create a new notes record */
			    noteMH = BasicDBCreateRecord();
			    /* and its fields */
			    BasicDBAddField(pself->GDI_fileHandle,
					   notesDBHan,
					   noteMH,
					   STU_NOTE_DATE,
					   0,
					   0,
					   &dateFieldID);
			    BasicDBAddField(pself->GDI_fileHandle,
					   notesDBHan,
					   noteMH,
					   STU_NOTE_SUBJ,
					   0,
					   0,
					   &subjFieldID);
			    BasicDBAddField(pself->GDI_fileHandle,
					   notesDBHan,
					   noteMH,
					   STU_NOTE_TEXT,
					   0,
					   0,
					   &textFieldID);
			    /* set the new read type */
			    readType = RT_N_SUBJ;
			    }
			 else if (!strcmp(tagBuffer, "[N-DATE]")) {
			    /* set the new read type */
			    readType = RT_N_DATE;
			    }
			 else if (!strcmp(tagBuffer, "[N-BODY]")) {
			    @call MSDBNote::MSG_VIS_TEXT_DELETE_ALL();
			    /* set the new read type */
			    readType = RT_NOTE;
			    }
			 /* done reading the line so reset the counter */
			 lineCount = 0;
			 }  /* end of newline char if */
		   else if (charBuffer[0] != '\r')  {
			 /* add to the buffer */
			 tagBuffer[lineCount] = charBuffer[0];
			 lineCount++;
			 }
		   } /* end of tag type if */

		else if (readType == RT_DATA)  {
		   if (charBuffer[0] == '\n')  {
			 dataBuffer[lineCount] = 0;
			 /* set the data */
			 fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY, (word)fieldNum, 1);
			 BasicDBSetFieldData(recMH, fieldID, dataBuffer, strlen(dataBuffer));
			 /* set the new read type */
			 readType = RT_TAG;
			 /* done reading the line so reset the counter */
			 lineCount = 0;
			 }  /* end of newline char if */
		   else if (charBuffer[0] != '\r')  {
			 /* add to the buffer */
			 dataBuffer[lineCount] = charBuffer[0];
			 lineCount++;
			 }
		   }  /* end of data type else if */

/*		else if (readType == RT_NUM_NOTES)  {
		   if (charBuffer[0] == '\n')  {
			 dataBuffer[lineCount] = 0;
			 /* save the number of notes */
/*			 UtilAsciiToHex32(dataBuffer, &numNotes);
			 /* set the new read type */
/*			 readType = RT_TAG;
			 /* done reading the line so reset the counter */
/*			 lineCount = 0;
			 }  /* end of newline char if */
/*		   else if (charBuffer[0] != '\r')  {
			 /* add to the buffer */
/*			 dataBuffer[lineCount] = charBuffer[0];
			 lineCount++;
			 }
		   }  /* end of num-notes type else if */

		else if (readType == RT_N_SUBJ)  {
		   if (charBuffer[0] == '\n')  {
			 dataBuffer[lineCount] = 0;
			 /* set the data */
			 BasicDBSetFieldData(noteMH, subjFieldID, dataBuffer, strlen(dataBuffer));
			 /* set the new read type */
			 readType = RT_TAG;
			 /* done reading the line so reset the counter */
			 lineCount = 0;
			 }  /* end of newline char if */
		   else if (charBuffer[0] != '\r')  {
			 /* add to the buffer */
			 dataBuffer[lineCount] = charBuffer[0];
			 lineCount++;
			 }
		   }  /* end of note subj type else if */

		else if (readType == RT_N_DATE)  {
		   if (charBuffer[0] == '\n')  {
			 dataBuffer[lineCount] = 0;
			 /* set the data */
			 LocalParseDateTime(dataBuffer, DTF_SHORT, &date);
			 BasicDBSetFieldData(noteMH, dateFieldID, &date, sizeof(TimerDateAndTime));
			 /* set the new read type */
			 readType = RT_TAG;
			 /* done reading the line so reset the counter */
			 lineCount = 0;
			 }  /* end of newline char if */
		   else if (charBuffer[0] != '\r')  {
			 /* add to the buffer */
			 dataBuffer[lineCount] = charBuffer[0];
			 lineCount++;
			 }
		   }  /* end of note date type else if */

		else if (readType == RT_NOTE)  {
		   if (charBuffer[0] == '\n')  {
			 noteHan = @call MSDBNote::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
			 length = @call MSDBNote::MSG_VIS_TEXT_GET_TEXT_SIZE();
			 note = MemLock(noteHan);
			 /* set the data */
			 BasicDBSetFieldData(noteMH, textFieldID, note, (word)length);
			 MemUnlock(noteHan);
			 MemFree(noteHan);
			 /* and save the note */
			 BasicDBSaveRecord(pself->GDI_fileHandle,
					   notesDBHan,
					   noteMH,
					   StuNotesCallback,
					   0);
			 numNotes++;
			 /* set the new read type */
			 readType = RT_TAG;
			 /* done reading the line so reset the counter */
			 lineCount = 0;
			 }  /* end of newline char if */
		   else /*if (charBuffer[0] != '\r') */ {
			 @call MSDBNote::MSG_VIS_TEXT_APPEND_PTR(charBuffer, 1);
			 lineCount++;
			 }
		   }  /* end of note body type else if */


		} /* end of good read if */
	  else  {  /* read error */
		NotifyDBox(0, @ImpReadErrMsg);
		/* close the file */
		fileCloseError = FileClose(impFileHandle, FALSE);
		if (fileCloseError)  NotifyDBox(0, @ImpCloseErrMsg);
		/* dismiss the progress box */
	    //	@send ImportProg::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		/* mark app not busy */
		@send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		/* and restore the TA file dir */
		FilePopDir();
		g_importing = FALSE;
		return;
		}  /* end of bad read else */

	  } /* end of reading for loop */

    /* mark app not busy */
    @send TAApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    /* close the file */
    fileCloseError = FileClose(impFileHandle, FALSE);
    if (fileCloseError != 0)  {
	  NotifyDBox(0, @ImpCloseErrMsg);
	  }

    /* and restore the TA file dir */
    FilePopDir();

    /* and tell the world we're done importing */
    g_importing = FALSE;

    pself->TADI_numStudents += impStudents;
    /* save the new number */
    vmbh = VMGetMapBlock(pself->GDI_fileHandle);
    VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
    VMmapPtr->VMMS_numStudents = pself->TADI_numStudents;
    VMDirty(vmh);
    VMUnlock(vmh);

    /* add rows to the grids */
    for (i = 0; i < impStudents; i++)  {
	  @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCANamesGrid))::
				    MSG_VIS_GRID_ADD_ROW(VIS_GRID_LOCATION_PAST_END, NAME_HEIGHT);
	  @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCAttendGrid))::
				    MSG_VIS_GRID_ADD_ROW(VIS_GRID_LOCATION_PAST_END, NAME_HEIGHT);
	  @call ConstructOptr(pself->GDI_display, OptrToChunk(@MCGradesGrid))::
				    MSG_VIS_GRID_ADD_ROW(VIS_GRID_LOCATION_PAST_END, NAME_HEIGHT);
	  /* and the new seating labels */
	  StudentSeatingLabelDeclare(pself->GDI_fileHandle,
							pself->TADI_stuDBHan,
							pself->TADI_curStuIndex,
							pself->GDI_display,
							i,
							TRUE) ;
	  }

}
