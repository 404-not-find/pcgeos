/*
 **************************************************************************
 *  FILE:			edt_mtds.goc
 *  PROJECT:		Breadbox Flashcard
 *  DESCRIPTION:	This file has methods
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "flash.goh"
@include "externs.goh"


/***********************************************************************
 *
 * FUNCTION:	SaveNewCard for FlashCardProcessClass
 *
 * CALLED BY:	MSG_ADD_CARD,
 *
 * STRATEGY:   saves the data in the already allocated VMBlock 
 *		
 *
 ***********************************************************************/
void SaveNewCard()
{
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;
char			inputString[QA_DATA_SIZE];



    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* get the VM block handle */
    flashVMBHandle = mapPtr->FDMB_cardArray[g_numCards - 1];
    VMUnlock(mh);

    /* fill in the data */
    QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
    @call EQuestionData::MSG_VIS_TEXT_GET_ALL_PTR(inputString);
    strcpy(QApointer->FCB_front, inputString);
    @call EAnswerData::MSG_VIS_TEXT_GET_ALL_PTR(inputString);
    strcpy(QApointer->FCB_back, inputString);
    VMDirty(mh);
    VMUnlock(mh);

    g_newCard = FALSE;

    return;

}

/***********************************************************************
 *
 * FUNCTION:	CheckDataChange for FlashCardProcessClass
 *
 * CALLED BY:	MSG_ADD_CARD,  MSG_EDIT_SELECT_CARD
 *
 * STRATEGY:   saves the data if there was a change
 *		
 *
 ***********************************************************************/
void CheckDataChange()
{
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;
char			inputString[QA_DATA_SIZE];


    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* get the VM block handle */
    flashVMBHandle = mapPtr->FDMB_cardArray[g_currentCard];
    VMUnlock(mh);

    /* fill in the data */
    QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
    @call EQuestionData::MSG_VIS_TEXT_GET_ALL_PTR(inputString);
    if (strcmp(QApointer->FCB_front, inputString))  {
	  strcpy(QApointer->FCB_front, inputString);
	  VMDirty(mh);
	  }
    @call EAnswerData::MSG_VIS_TEXT_GET_ALL_PTR(inputString);
    if (strcmp(QApointer->FCB_back, inputString))  {
	  strcpy(QApointer->FCB_back, inputString);
	  VMDirty(mh);
	  }
    VMUnlock(mh);

    return;


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_PWORD_TO_EDITOR for FlashCardProcessClass
 *
 * DESCRIPTION:	Checks the password before opening the editor dialog box
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_OPEN_PWORD_TO_EDITOR
{


    /* check for proper password */
    if(!PwdCheckPasswordInINI(
		  "FlashCard",
		  "pword",
		  TRUE,
		  TRUE)) return;

    @send self::MSG_OPEN_EDITOR();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_EDITOR for FlashCardProcessClass
 *
 * DESCRIPTION:	Opens the editor dialog box
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_OPEN_EDITOR
{
word		number = 1;
char		numString[11];
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;


    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
    /* get the map info to fill in dbox */
    @call EQuestion::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   mapPtr->FDMB_questionString, 0);
    @call EAnswer::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   mapPtr->FDMB_answerString, 0);
	 @call EDescription::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						mapPtr->FDMB_descriptString, 0);
	 flashVMBHandle = mapPtr->FDMB_cardArray[0];
    g_currentCard = 0;
    VMUnlock(mh);

    /* get and show the first card */
    if (g_numCards) {
	  QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
	  @call EQuestionData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_front, 0);
	  @call EAnswerData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_back, 0);
	  VMUnlock(mh);
	  @send EQuestionData::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send EAnswerData::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @send EQuestionData::MSG_VIS_TEXT_DELETE_ALL();
	  @send EAnswerData::MSG_VIS_TEXT_DELETE_ALL();
	  @send EQuestionData::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send EAnswerData::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* and enable the buttons and fields */
    @send EAdd::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    if (g_numCards) @send EDelete::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EMainSection::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* update the cards stuff */
    UtilHex32ToAscii(numString, (sdword) g_numCards, UHTAF_NULL_TERMINATE);
    @call ETotalCards::MSG_VIS_TEXT_REPLACE_ALL_PTR(numString, 0);

    /* set the GenValue max & min */
    if (g_numCards == 0) number = 0;
    @send ECardNum::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(g_numCards));
    @send ECardNum::MSG_GEN_VALUE_SET_MINIMUM(MakeWWFixed(number));

    /* set the card number */
    @send ECardNum::MSG_GEN_VALUE_SET_INTEGER_VALUE(number, FALSE);

    /* reset all our global change flags */
    g_newDeck = FALSE;
    g_newCard = FALSE;

    /* put up editor dialog box */
    @send EditDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_ADD_CARD for FlashCardProcessClass
 *
 * DESCRIPTION:	Adds a new blank card to the deck
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_ADD_CARD
{
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
char		numString[11];


    /* is there new card data to be saved? */
    if(g_newCard) SaveNewCard();
    else if (g_numCards) CheckDataChange();

    /* check for full deck */
    if (g_numCards == MAX_CARDS)  {
	  /* no more room message */
	  NotifyDBox (@FullDeckMsg);
	  return;
	  }

    /* alloc/attach a new block */
    mh = MemAlloc(sizeof(FlashCardBlock), HF_SWAPABLE, HAF_ZERO_INIT);
    flashVMBHandle = VMAttach(g_flashFileHan, NullHandle, mh);

    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* update the card info */
    mapPtr->FDMB_numCards++;
    mapPtr->FDMB_cardArray[g_numCards] = flashVMBHandle;
    g_numCards++;
    g_currentCard = g_numCards - 1;
    VMDirty(mh);
    VMUnlock(mh);

    /* set the GenValue max & min */
    @send ECardNum::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(g_numCards));
    @send ECardNum::MSG_GEN_VALUE_SET_MINIMUM(MakeWWFixed(1));

    /* update the card number display and object */
    @send ECardNum::MSG_GEN_VALUE_SET_INTEGER_VALUE(g_numCards, FALSE);

    /* and the number of cards */
    UtilHex32ToAscii(numString, (sdword) g_numCards, UHTAF_NULL_TERMINATE);
    @call ETotalCards::MSG_VIS_TEXT_REPLACE_ALL_PTR(numString, 0);

    /* clear the Q & A data fields */
    @send EQuestionData::MSG_VIS_TEXT_DELETE_ALL();
    @send EAnswerData::MSG_VIS_TEXT_DELETE_ALL();

    @send EDelete::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EQuestionData::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send EAnswerData::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* set the new card flag */
    g_newCard = TRUE;

    /* send the focus to question data field */
    @send EQuestionData::MSG_META_GRAB_FOCUS_EXCL();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_CARD for FlashCardProcessClass
 *
 * DESCRIPTION:	Deletes the shown card from the deck
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_DELETE_CARD
{
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;
char		numString[11];
word			i, card, number;
Boolean		lastCard = FALSE;


    /* is there new card data to be saved? */
    if(g_newCard) SaveNewCard();

    /* which card is showing? */
    card = @call ECardNum::MSG_GEN_VALUE_GET_INTEGER_VALUE();

    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* update the card array */
    for (i = card - 1; i < g_numCards; i++) {
	  if (i != MAX_CARDS - 1)
		mapPtr->FDMB_cardArray[i] = mapPtr->FDMB_cardArray[i + 1];
	  else  mapPtr->FDMB_cardArray[i] = 0;
	  }
    /* and the card to show now */
    if (card != g_numCards)  {
	  flashVMBHandle = mapPtr->FDMB_cardArray[card - 1];
	  }
    else  {
	  flashVMBHandle = mapPtr->FDMB_cardArray[card - 2];
	  lastCard = TRUE;
	  }

    /* and card info */
    mapPtr->FDMB_numCards--;
    g_numCards--;
    VMDirty(mh);
    VMUnlock(mh);

    /* get and show the card */
    if (g_numCards) {
	  QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
	  @call EQuestionData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_front, 0);
	  @call EAnswerData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_back, 0);
	  VMUnlock(mh);
	  }
    else {  /* last card deleted */
	  @send EQuestionData::MSG_VIS_TEXT_DELETE_ALL();
	  @send EAnswerData::MSG_VIS_TEXT_DELETE_ALL();
	  @send EDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send EQuestionData::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send EAnswerData::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* update the cards stuff */
    UtilHex32ToAscii(numString, (sdword) g_numCards, UHTAF_NULL_TERMINATE);
    @call ETotalCards::MSG_VIS_TEXT_REPLACE_ALL_PTR(numString, 0);

    /* set the GenValue max & min */
    number = 1;
    if (g_numCards == 0) number = 0;
    @send ECardNum::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(g_numCards));
    @send ECardNum::MSG_GEN_VALUE_SET_MINIMUM(MakeWWFixed(number));

    /* set the card number */
    if (lastCard) {
	  @send ECardNum::MSG_GEN_VALUE_SET_INTEGER_VALUE(card - 1, FALSE);
	  g_currentCard--;
	  }
    else @send ECardNum::MSG_GEN_VALUE_SET_INTEGER_VALUE(card, FALSE);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_CLOSE_EDITOR for FlashCardProcessClass
 *
 * DESCRIPTION:	Closes the editor dialog box
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_CLOSE_EDITOR
{
char			QTextName[QA_SIZE], ATextName[QA_SIZE], DTextName[DECK_DESCR_SIZE];
Boolean		QChange, AChange, DChange;
VMBlockHandle	vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;


    /* is there new card data to be saved? */
    if(g_newCard) SaveNewCard();
    else if (g_numCards) CheckDataChange();

    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
    /* check for Q change */
    @call EQuestion::MSG_VIS_TEXT_GET_ALL_PTR(QTextName);
    QChange = strcmp(QTextName, mapPtr->FDMB_questionString);
    /* check for A change */
    @call EAnswer::MSG_VIS_TEXT_GET_ALL_PTR(ATextName);
    AChange = strcmp(ATextName, mapPtr->FDMB_answerString);
	 /* check for D change */
	 @call EDescription::MSG_VIS_TEXT_GET_ALL_PTR(DTextName);
	 DChange = strcmp(DTextName, mapPtr->FDMB_descriptString);
	 VMUnlock(mh);

	 if (QChange || AChange || DChange)  {
	  vmbh = VMGetMapBlock(g_flashFileHan);
	  mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
	  if (QChange) strcpy(mapPtr->FDMB_questionString, QTextName);
	  if (AChange) strcpy(mapPtr->FDMB_answerString, ATextName);
	  if (DChange) {
		strcpy(mapPtr->FDMB_descriptString, DTextName);
		@call FlashCardTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(mapPtr->FDMB_descriptString, 0);
		}
	  VMDirty(mh);
	  VMUnlock(mh);
	  }
			 

    /* reset all our global change flags */
    g_newDeck = FALSE;
    g_newCard = FALSE;

    /* and display it */
	 ShowDeck();

    @send EditDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_EDIT_SELECT_CARD for FlashCardProcessClass
 *
 * DESCRIPTION:	responds to spinner clicks
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_EDIT_SELECT_CARD
{
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;


    /* is there new card data to be saved? */
    if(g_newCard) SaveNewCard();
    else CheckDataChange();

    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
    /* get Q & A data */
    flashVMBHandle = mapPtr->FDMB_cardArray[IntegerOf(value) - 1];
    VMUnlock(mh);

    g_currentCard = IntegerOf(value) - 1;

    /* get and show the selected card */
    QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
    @call EQuestionData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_front, 0);
    @call EAnswerData::MSG_VIS_TEXT_REPLACE_ALL_PTR(
					   QApointer->FCB_back, 0);
    VMUnlock(mh);

}

