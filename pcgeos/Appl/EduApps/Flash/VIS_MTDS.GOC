/*
 **************************************************************************
 *  FILE:			vis_mtds.goc
 *  PROJECT:		Breadbox Flashcard
 *  DESCRIPTION:	This file has methods
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "flash.goh"
@include "externs.goh"

  
/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_DRAW for VisFlashContentClass
 *
 * DESCRIPTION:	draw the main screen
 *
 *
 ***********************************************************************/
@extern method VisFlashContentClass, MSG_VIS_DRAW
{
 Rectangle	*p_rect = &pself->VI_bounds;


    GrSaveState(gstate);

    GrSetAreaColor(gstate, CF_INDEX, C_GREEN, 0, 0);
    GrFillRect(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_right-1,
			p_rect->R_bottom-1);

    GrSetAreaMaskSys(gstate, SDM_50);

    GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0, 0);

    GrFillRect(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_right-1,
             p_rect->R_bottom-1);

    GrRestoreState(gstate);

    @callsuper();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_DRAW for VisFCButtonClass
 *
 * DESCRIPTION:	draw the Deck and Exit buttons
 *
 *
 ***********************************************************************/
/*@extern method VisFCButtonClass, MSG_VIS_DRAW
{
 Rectangle	*p_rect = &pself->VI_bounds;
 word		left, width, txtSize;


    GrSaveState(gstate);

    /* Fill the area with light/dark gray */
/*    if (!(pself->VFCBI_pressed)) {
	  if (!g_isSPN) GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GRAY, 0, 0);
	  else GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  }
	 else {
	  GrSetAreaColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0);
	  }

    GrFillRect(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_right-1,
		   p_rect->R_bottom-1);

    GrSetLineWidth(gstate, MakeWWFixed(1));

    /* Draw the white/black line around the top and left edges */
/*    if (!(pself->VFCBI_pressed)) {
	  GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  }
	 else {
	  GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	  }
    GrDrawHLine(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_right-1);
    GrDrawHLine(gstate, p_rect->R_left, p_rect->R_top+1, p_rect->R_right-2);
    GrDrawVLine(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_bottom-1);
    GrDrawVLine(gstate, p_rect->R_left+1, p_rect->R_top, p_rect->R_bottom-2);
    if (g_isSPN) GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrDrawHLine(gstate, p_rect->R_left+2, p_rect->R_top+2, p_rect->R_right-3);
    GrDrawVLine(gstate, p_rect->R_left+2, p_rect->R_top+2, p_rect->R_bottom-3);

    /* Draw the dark gray/white line around the bottom and right edges */
/*    if (!(pself->VFCBI_pressed)) {
	  GrSetLineColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0);
	  }
	 else {
	  GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  }
    GrDrawHLine(gstate, p_rect->R_left, p_rect->R_bottom-1, p_rect->R_right-1);
    GrDrawHLine(gstate, p_rect->R_left+1, p_rect->R_bottom-2, p_rect->R_right-2);
    GrDrawHLine(gstate, p_rect->R_left+2, p_rect->R_bottom-3, p_rect->R_right-3);

    GrDrawVLine(gstate, p_rect->R_right-1, p_rect->R_top, p_rect->R_bottom-1);
    GrDrawVLine(gstate, p_rect->R_right-2, p_rect->R_top+1, p_rect->R_bottom-1);
    GrDrawVLine(gstate, p_rect->R_right-3, p_rect->R_top+2, p_rect->R_bottom-1);


    if (g_isSPN) txtSize = 12;
    else txtSize = 18;

    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(txtSize));
    GrSetTextStyle(gstate, TS_BOLD, 0);
    if (!(pself->VFCBI_pressed))
	  GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    else GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);


    MemLock (OptrToHandle(@FullDeckMsg));
    if (oself == @FlashCardExitButton) { /* Exit button */
/*	  width = GrTextWidth(gstate,
					  LMemDeref(@ExitStr),
					  strlen(LMemDeref(@ExitStr)));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_top + 2),
					 LMemDeref(@ExitStr),
					 strlen(LMemDeref(@ExitStr)));
	  }
	 else {      /* Deck button */
/*	  width = GrTextWidth(gstate,
					  LMemDeref(@DeckStr),
					  strlen(LMemDeref(@DeckStr)));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_top + 2),
					 LMemDeref(@DeckStr),
					 strlen(LMemDeref(@DeckStr)));
	  }
    MemUnlock (OptrToHandle(@FullDeckMsg));
    GrRestoreState(gstate);

}  */

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_DRAW for VisFlashDeckClass
 *
 * DESCRIPTION:	draw the decks
 *
 *
 ***********************************************************************/
@extern method VisFlashDeckClass, MSG_VIS_DRAW
{
 Rectangle	*p_rect = &pself->VI_bounds;
 word		width, left, i, sepLine, secondLineText;
 char		numString[20];


    GrSaveState(gstate);

    if (g_isSPN) {
	  sepLine = 40;
	  secondLineText = 15;
	  }
    else  {
	  sepLine = 50;
	  secondLineText = 20;
	  }

    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrDrawRect(gstate, p_rect->R_left, p_rect->R_top, p_rect->R_right-1, p_rect->R_bottom-1);
    GrDrawHLine(gstate, p_rect->R_left, p_rect->R_bottom-sepLine-1, p_rect->R_right-1);

    if (g_isSPN) GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GREEN, 0, 0);
    else GrSetAreaColor(gstate, CF_INDEX, C_GREEN, 0, 0);
    GrFillRect(gstate, p_rect->R_left+1, p_rect->R_top+1, p_rect->R_right-2,
		   p_rect->R_bottom-sepLine-2);
    GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GREEN, 0, 0);
    GrFillRect(gstate, p_rect->R_left+1, p_rect->R_bottom-sepLine, p_rect->R_right-2,
		   p_rect->R_bottom-1);

    /* draw the stacks */
    if (g_flashFileHan) {
	  if (oself == @FlashCardsLeft) {
		for (i = 0; i < (g_numCards - g_currentCard); i++ )  {
		   GrDrawHLine(gstate,
					p_rect->R_left + 5,
					p_rect->R_bottom - (sepLine + 2 + 2 * i),
					p_rect->R_right - 6);
		   }
		}
       else {
		for (i = 0; i <= (g_currentCard + 1); i++ )  {
		   GrDrawHLine(gstate,
					p_rect->R_left + 5,
					p_rect->R_bottom - (sepLine + 2 + 2 * i),
					p_rect->R_right - 6);
		   }
		}
	  }

    /* draw the text */
    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(18));
    GrSetTextStyle(gstate, TS_BOLD, 0);
    MemLock (OptrToHandle(@FullDeckMsg));
    if (oself == @FlashCardsLeft) {
	  if (!g_flashFileHan) strcpy(numString, "");
	  else UtilHex32ToAscii(numString,
				   ((sdword) g_numCards - (sdword) g_currentCard - 1),
				   UHTAF_NULL_TERMINATE);
	  strcat(numString, LMemDeref(@CardsStr));
	  width = GrTextWidth(gstate, numString, strlen(numString));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_bottom - sepLine),
					 numString,
					 strlen(numString));
	  width = GrTextWidth(gstate,
					  LMemDeref(@LeftStr),
					  strlen(LMemDeref(@LeftStr)));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_bottom - sepLine + secondLineText),
					  LMemDeref(@LeftStr),
					  strlen(LMemDeref(@LeftStr)));
	  }
	 else  {
	  if (!g_flashFileHan) strcpy(numString, "");
	  else UtilHex32ToAscii(numString,
				   ((sdword) g_currentCard + 1),
				   UHTAF_NULL_TERMINATE);
	  strcat(numString, LMemDeref(@CardsStr));
	  width = GrTextWidth(gstate, numString, strlen(numString));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_bottom - sepLine),
					 numString,
					 strlen(numString));
	  width = GrTextWidth(gstate,
					  LMemDeref(@UsedStr),
					  strlen(LMemDeref(@UsedStr)));
	  left = (p_rect->R_right - p_rect->R_left - width) / 2;
	  GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_bottom - sepLine + secondLineText),
					  LMemDeref(@UsedStr),
					  strlen(LMemDeref(@UsedStr)));
	  }
    MemUnlock (OptrToHandle(@FullDeckMsg));
    GrRestoreState(gstate);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_DRAW for VisFlashCardClass
 *
 * DESCRIPTION:	draw the card
 *
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_VIS_DRAW
{
 Rectangle	*p_rect = &pself->VI_bounds;
 word		width, left, card, linePos, qaText, textOffset;
VMBlockHandle	flashVMBHandle, vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
FlashCardBlock	*QApointer;
char			dataStr[QA_DATA_SIZE];


    if (g_isSPN) {
	  linePos = 25;
	  qaText = 20;
	  textOffset = 1;
	  }
    else {
	  linePos = 50;
	  qaText = 36;
	  textOffset = 3;
	  }

    GrSaveState(gstate);

    /* draw the card */
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrDrawRoundRect(gstate,
				p_rect->R_left,
				p_rect->R_top,
				p_rect->R_right-1,
				p_rect->R_bottom-1,
				25);
    GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
    GrFillRoundRect(gstate, p_rect->R_left+1, p_rect->R_top+1, p_rect->R_right-2,
		   p_rect->R_bottom-2, 25);

    /* the separator line */
    GrSetLineWidth(gstate, MakeWWFixed(2));
    GrDrawHLine(gstate, p_rect->R_left, p_rect->R_top + linePos, p_rect->R_right-1);

    /* the phase text */
    if (g_flashFileHan) {
	  /* get our VMmap block */
	  vmbh = VMGetMapBlock(g_flashFileHan);
	  mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
	  if (pself->VFDI_QorA == QUESTION)
		/* get Q or A string */
		strcpy(dataStr, mapPtr->FDMB_questionString);
	    else  strcpy(dataStr, mapPtr->FDMB_answerString);
	  VMUnlock(mh);
	  }
	 else  strcpy(dataStr, " ");


    GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(qaText));
    GrSetTextStyle(gstate, TS_BOLD, 0);
    width = GrTextWidth(gstate, dataStr, strlen(dataStr));
    left = (p_rect->R_right - p_rect->R_left - width) / 2;
    GrDrawText(gstate, (sword) (p_rect->R_left + left),
					 (sword) (p_rect->R_top + textOffset),
					 dataStr,
					 strlen(dataStr));

    /* and the question/ answer data */
    if ((g_flashFileHan) && (g_numCards)) {
	  /* get our VMmap block */
	  vmbh = VMGetMapBlock(g_flashFileHan);
	  mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
	  /* get Q & A data */
	  card = g_shuffled[g_currentCard];
	  /* convert the shuffled card to its pos in the data file */
	  flashVMBHandle = mapPtr->FDMB_cardArray[card];
	  VMUnlock(mh);
	  /* get the selected card */
	  QApointer = VMLock(g_flashFileHan, flashVMBHandle, &mh);
	  if (pself->VFDI_QorA == QUESTION)
		strcpy(dataStr, QApointer->FCB_front);
	  else strcpy(dataStr, QApointer->FCB_back);
	  VMUnlock(mh);
	  }
	 else strcpy(dataStr, " ");

    @call FlashCardText::MSG_VIS_TEXT_REPLACE_ALL_PTR(dataStr, 0);
      
    GrRestoreState(gstate);

    @callsuper();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_MINIMUM_SIZE for VisFlashContentClass
 *
 * DESCRIPTION:  to keep content from being resized smaller
 *
 *
 ***********************************************************************/
@extern method VisFlashContentClass, MSG_VIS_COMP_GET_MINIMUM_SIZE
{
    /*return pself->VFCI_minSize ;*/
    if (g_isSPN) return (MAKE_SIZE_DWORD(600, 170));
    else return (MAKE_SIZE_DWORD(600, 400));
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_MINIMUM_SIZE for VisFCCompClass
 *
 * DESCRIPTION:  to keep top & middle composites from being resized smaller
 *
 *
 ***********************************************************************/
@extern method VisFCCompClass, MSG_VIS_COMP_GET_MINIMUM_SIZE
{

    /*  return pself->VFCCI_minSize ; */
    if (oself == @FlashCardTop) {
	  if (g_isSPN) return (MAKE_SIZE_DWORD(600, 20));
	  else return (MAKE_SIZE_DWORD(600, 30));
	  }
    else {
	  if (g_isSPN) return (MAKE_SIZE_DWORD(600, 150));
	  else return (MAKE_SIZE_DWORD(600, 370));
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_MINIMUM_SIZE for VisFlashCardClass
 *
 * DESCRIPTION:  to keep card composit from being resized smaller
 *
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_VIS_COMP_GET_MINIMUM_SIZE
{
  /*  return pself->VFDI_minSize ;*/
    if (g_isSPN) return (MAKE_SIZE_DWORD(280, 135));
    else return (MAKE_SIZE_DWORD(280, 330));
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_MARGINS for VisFlashCardClass
 *
 * DESCRIPTION:  to push the text up a bit in the card
 *               to get it above the rounded corner
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_VIS_COMP_GET_MARGINS
{

	  retValue->R_top = 0;
	  retValue->R_right = 0;
	  retValue->R_bottom = 20;
	  retValue->R_left = 0;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_MARGINS for VisFCCompClass
 *
 * DESCRIPTION:   to drop the card down a bit on the middle screen
 *
 *
 ***********************************************************************/
@extern method VisFCCompClass, MSG_VIS_COMP_GET_MARGINS
{
 word	mTop;


    if (oself == @FlashCardMiddle)  {
	  if(g_isSPN) mTop = 8;
	  else mTop = 20;

	  retValue->R_top = mTop;
	  retValue->R_right = 0;
	  retValue->R_bottom = 0;
	  retValue->R_left = 0;
	  }
	 else  {
	  retValue->R_top = 0;
	  retValue->R_right = 0;
	  retValue->R_bottom = 0;
	  retValue->R_left = 0;
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_CHILD_SPACING for VisFCCompClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method VisFCCompClass, MSG_VIS_COMP_GET_CHILD_SPACING
{
    return MAKE_SPACING_DWORD(0, 0) ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_COMP_GET_CHILD_SPACING for VisFlashContentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@extern method VisFlashContentClass, MSG_VIS_COMP_GET_CHILD_SPACING
{
    return MAKE_SPACING_DWORD(0, 0) ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for VisFCButtonClass
 *
 * DESCRIPTION:	Deck or Exit button has just been clicked
 *
 *
 ***********************************************************************/
/*@extern method VisFCButtonClass, MSG_META_START_SELECT
{


    /* set our clicked flag */
/*    pself->VFCBI_pressed = TRUE;

    /* Grab the mouse, and gadget exclusive. */
/*    @call self::MSG_VIS_GRAB_MOUSE();
    @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);

    /* Redraw ourself */
/*    @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    retVal->flags = MRF_PROCESSED;

}  */

/***********************************************************************
 *
 * MESSAGE:	MSG_META_END_SELECT for VisFCButtonClass
 *
 * DESCRIPTION:	Deck or Exit button has just been released
 *
 *
 ***********************************************************************/
/*@extern method VisFCButtonClass, MSG_META_END_SELECT
{

    /* reset our clicked flag */
/*    pself->VFCBI_pressed = FALSE;

    /* release the mouse and gadget exclusive. */
/*    @call self::MSG_VIS_RELEASE_MOUSE();
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);

    /* Redraw ourself */
/*    @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    retVal->flags = MRF_PROCESSED;

    if (oself == @FlashCardDeckButton) { /* Deck button */
	  /* put up file selector box */
/*    	  @send DocumentControl::MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC();
	  }
	 else {
	  /* put up the do you wanna dbox */
/*	  if (AckDBox(0, @ExitAppMsg) == ACK_NO) return;
	  @send FlashCardApp::MSG_META_QUIT();
	  }

} */

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for VisFlashCardClass
 *
 * DESCRIPTION:	card has just been clicked
 *
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_META_START_SELECT
{


    /* set our clicked flag */
    pself->VFDI_pressed = TRUE;

    /* Grab the mouse, and gadget exclusive. */
    @call self::MSG_VIS_GRAB_MOUSE();
    @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);

    retVal->flags = MRF_PROCESSED;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_END_SELECT for VisFlashCardClass
 *
 * DESCRIPTION:	card has just been released
 *
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_META_END_SELECT
{

    /* reset our clicked flag */
    pself->VFDI_pressed = FALSE;

    /* only if there is a deck open */
    if (g_flashFileHan) {
	  /* toggle our phase (Q/A) */
	  /* if we're showing Q then just flip over */
	  if (pself->VFDI_QorA == QUESTION) pself->VFDI_QorA = ANSWER;
	  /* if it's A then increment the current card */
	  else {
		pself->VFDI_QorA = QUESTION;
		g_currentCard++;
		if (g_currentCard == g_numCards) {
		   g_currentCard = 0;
		   /* shuffle the deck */
		   Shuffle();
             }
		/* and redraw the decks */
		@send FlashCardsLeft::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		@send FlashCardsUsed::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		}
	  /* Redraw ourself */
	  @call self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
	  }

    /* release the mouse and gadget exclusive. */
    @call self::MSG_VIS_RELEASE_MOUSE();
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);

    retVal->flags = MRF_PROCESSED;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for VisTitleTextClass
 *
 * DESCRIPTION:	title has just been clicked
 *
 *
 ***********************************************************************/
/*@extern method VisTitleTextClass, MSG_META_START_SELECT
{

    if (inputState & BI_DOUBLE_PRESS) {
	  @send DocumentControl::MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC();
	  }
    else {
	  /* Grab the mouse, and gadget exclusive. */
/*	  @call self::MSG_VIS_GRAB_MOUSE();
	  @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);
	  }
    retVal->flags = MRF_PROCESSED;

} */

/***********************************************************************
 *
 * MESSAGE:	MSG_META_END_SELECT for VisTitleTextClass
 *
 * DESCRIPTION:	title has just been released
 *
 *
 ***********************************************************************/
/*@extern method VisTitleTextClass, MSG_META_END_SELECT
{

    /* release the mouse and gadget exclusive. */
/*    @call self::MSG_VIS_RELEASE_MOUSE();
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);
  
    retVal->flags = MRF_PROCESSED;

} */

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for VisFlashDeckClass
 *
 * DESCRIPTION:	deck has just been clicked
 *
 *
 ***********************************************************************/
@extern method VisFlashDeckClass, MSG_META_START_SELECT
{


    /* Grab the mouse, and gadget exclusive. */
    @call self::MSG_VIS_GRAB_MOUSE();
    @call @visParent::MSG_VIS_TAKE_GADGET_EXCL(oself);

    retVal->flags = MRF_PROCESSED;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_END_SELECT for VisFlashDeckClass
 *
 * DESCRIPTION:	deck has just been released
 *
 *
 ***********************************************************************/
@extern method VisFlashDeckClass, MSG_META_END_SELECT
{

    if (g_flashFileHan) {
	  if (oself == @FlashCardsLeft) {
		/* go to Question side of next card */
		@send CurrentFlashCard::MSG_SET_TO_QUESTION();
		g_currentCard++;
		if (g_currentCard == g_numCards) {
		   g_currentCard = 0;
		   /* shuffle the deck */
		   Shuffle();
		   }
		/* and redraw the decks */
		@send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		@send FlashCardsUsed::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		/* and the card */
		@send CurrentFlashCard::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		}
	  else {
		/* go to Question side of first card */
		@send CurrentFlashCard::MSG_SET_TO_QUESTION();
		g_currentCard = 0;
		/* shuffle the deck */
		Shuffle();
		/* and redraw the decks */
		@send FlashCardsLeft::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		@send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		/* and the card */
		@send CurrentFlashCard::MSG_VIS_REDRAW_ENTIRE_OBJECT();
		}
	  }

    /* release the mouse and gadget exclusive. */
    @call self::MSG_VIS_RELEASE_MOUSE();
    @call @visParent::MSG_VIS_RELEASE_GADGET_EXCL(oself);

    retVal->flags = MRF_PROCESSED;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SET_TO_QUESTION for VisFlashCardClass
 *
 * DESCRIPTION:	reset our instance var on opening new deck
 *
 *
 ***********************************************************************/
@extern method VisFlashCardClass, MSG_SET_TO_QUESTION
{

    pself->VFDI_QorA = QUESTION;

}


