
/*
 **************************************************************************
 *  FILE:			fnctns.goc
 *  PROJECT:		Test Taker
 *  DESCRIPTION:	This file has the various functions
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "ttkr.goh"
@include "externs.goh"


/***********************************************************************
 *
 * FUNCTION:	SetTestUIAsCompleted(void)
 *
 * CALLED BY:  ATTACH_UI & TEST_COMPLETED
 *
 *
 * STRATEGY:	Set the name, date and freeform answer text objects to read
 *             only and remove the white wash hint.  Set the MC and TF answer
 *             groups to read only.
 *
 ***********************************************************************/
 void SetTestUIAsCompleted(void)
{

	@send MESNameText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESNameText::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
	@send MESNameText::MSG_META_DELETE_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR);
	@send MESNameText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MESDateText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESDateText::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
	@send MESDateText::MSG_META_DELETE_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR);
	@send MESDateText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQAFillAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQAFillAnswer::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
	@send MEQAFillAnswer::MSG_META_DELETE_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR);
	@send MEQAFillAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQAMCAnswer::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
	@send MEQAMCAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQATFAnswer::MSG_GEN_SET_ATTRS(GA_READ_ONLY, 0);
	@send MEQATFAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	/* change the name of the question enter button */
	@send MEQAEnterButton::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@EnterButtonNextMoniker), VUM_DELAYED_VIA_APP_QUEUE);

	/* change the name of the answer question button & dbox */
	@send MESBAnswerQButton::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@MESBAnswerQButtonViewMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQuestionAnswerGroup::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@MESBAnswerQButtonViewMoniker), VUM_DELAYED_VIA_APP_QUEUE);

	@send MESBCompletedButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * FUNCTION:	SetTestUIAsNotCompleted(void)
 *
 * CALLED BY:  ATTACH_UI
 *
 *
 * STRATEGY:	Reverse the above changes.  Might be necessary if student
 *             is taking 2 tests in succession without shutting down
 *             TestTaker
 *
 ***********************************************************************/
 void SetTestUIAsNotCompleted(void)
{

	@send MESNameText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESNameText::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
	@send MESNameText::MSG_META_ADD_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR, 0 ,0);
	@send MESNameText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MESDateText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESDateText::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
	@send MESDateText::MSG_META_ADD_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR, 0 ,0);
	@send MESDateText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQAFillAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQAFillAnswer::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
	@send MEQAFillAnswer::MSG_META_ADD_VAR_DATA(HINT_TEXT_WHITE_WASH_COLOR, 0 ,0);
	@send MEQAFillAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQAMCAnswer::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
	@send MEQAMCAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQATFAnswer::MSG_GEN_SET_ATTRS(0, GA_READ_ONLY);
	@send MEQATFAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	/* change the name of the question enter button */
	@send MEQAEnterButton::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@EnterButtonSaveMoniker), VUM_DELAYED_VIA_APP_QUEUE);

	/* change the name of the answer question button & dbox */
	@send MESBAnswerQButton::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@MESBAnswerQButtonAnsMoniker), VUM_DELAYED_VIA_APP_QUEUE);
	@send MEQuestionAnswerGroup::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@MESBAnswerQButtonAnsMoniker), VUM_DELAYED_VIA_APP_QUEUE);

	@send MESBCompletedButton::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * FUNCTION:	TypesIndexCallBack
 *
 * CALLED BY:  BasicDBSaveRecord in MSG_TGEN_DOCUMENT_SAVE_ENTRY
 *
 *
 * STRATEGY:   sorts by type of question
 *
 *
 ***********************************************************************/
sword _pascal TypesIndexCallBack (MemHandle m1,
						  MemHandle m2,
						  word valueForCallback )
{
 void			*e1, *e2;
 BasicDBFieldID	fieldID;
 word			size1, size2;
 sword		compare;
 char *		string1;
 char *		string2;
 byte	*		type1;
 byte	*		type2;

	e1 = MemDeref(m1);
	e2 = MemDeref(m2);

	if (valueForCallback == VFC_ALPHA) {
		/* get the first rec name info */
		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1 );
		size1 = BasicDBGetPtrToFieldData( e1, fieldID, &string1 );

		/* and the second rec name info */
		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1 );
		size2 = BasicDBGetPtrToFieldData( e2, fieldID, &string2 );
                    
		compare = LocalCmpStringsNoSpaceCase(string1, string2,
				( size1 < size2) ? size1 : size2 );
		}

	else {
		/* get the first rec number info */
		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1 );
		BasicDBGetPtrToFieldData( e1, fieldID, &type1);

		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1 );
		BasicDBGetPtrToFieldData( e2, fieldID, &type2);

		if (*type1 > *type2) compare = 1;
		else if (*type1 < *type2) compare = -1;
		else compare = 0;
		}
	  
	return (compare);

}

/***********************************************************************
 *
 * FUNCTION:	SetQADBoxType(byte type)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
 void SetQADBoxType(byte type)
{

	if (type == QTYPE_MC){
		@send MEQAMCQuestionChoice::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}
	else if (type == QTYPE_TF){
		@send MEQAMCQuestionChoice::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}
	else {
		@send MEQAMCQuestionChoice::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_USABLE(VUM_NOW);
		}
}

/***********************************************************************
 *
 * FUNCTION:	AckDBox (char* string1, char* string2, optr ackMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    returns user's Yes or No response
 *
 *
 ***********************************************************************/
word AckDBox (char* string1, char* string2, optr ackMsg)
{

    /* put up an Are you sure box */
	 MemLock (OptrToHandle(ackMsg));
	 if ((UserStandardDialog(0, 0, string2, string1,
				 LMemDeref(ackMsg),
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ) != IC_YES))  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_NO);
	  }
	 else  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_YES);
	  }

}


/***********************************************************************
 *
 * FUNCTION:	NotifyDBox  (char* string1, optr notifyMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    Puts up selected notification box
 *
 *
 ***********************************************************************/
void NotifyDBox (char* string1, optr notifyMsg)
{

    /* put up a notification box */
	 MemLock (OptrToHandle(notifyMsg));
	 UserStandardDialog(0, 0, 0, string1,
			  LMemDeref(notifyMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
	 MemUnlock (OptrToHandle(notifyMsg));

}


