/***************************************************************************
 *  FILE:           document.goc
 *  PROJECT:        Breadbox Test Taker
 *  DESCRIPTION:    This file has methods for document manipulation
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *      Include files
 ***************************************************************************
 */

@include "ttkr.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *      Class Declarations
 ***************************************************************************
 */

@classdecl  TTkrDocumentClass;

@classdecl  TTkrGenDynamicListClass;

/*********************************************************************
 *  the globals declared as extern in .goh
 ********************************************************************
*/
 word 	g_numQuestions = 0;
 word 	g_ansQuestions = 0;
 Boolean g_nameAndDateSaved = FALSE;

 /* these are only global to this file */
 word		g_dListWidth = 0;
 Boolean	g_answered = FALSE;

/*
 ***************************************************************************
 *      Code for Document Manipulation
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE: MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for
 *                                    TTkrDocumentClass
 *
 *
 * DESCRIPTION: Called to initialize a newly opened document.
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
 TestMapStruct        *VMmapPtr;
 MemHandle      mh;
 VMBlockHandle      vmbh;
 char				numStr[11];
 char			dateString[DATE_TIME_BUFFER_SIZE + 1];
 TimerDateAndTime	date;
 Boolean		canGrade;


	/* get our VMmap block */
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &mh);
	/* retrieve saved info to get started */
	pself->TTDI_testDBHan = VMmapPtr->TMS_testDBHan;
	g_numQuestions = VMmapPtr->TMS_numQuestions;
	g_ansQuestions = VMmapPtr->TMS_ansQuestions;
	pself->TTDI_finished = VMmapPtr->TMS_finished;
	canGrade = VMmapPtr->TMS_studentGradable;
	if (VMmapPtr->TMS_titleLine1[0])
		@call MESInfo1::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(VMmapPtr->TMS_titleLine1,
								VUM_DELAYED_VIA_APP_QUEUE);
	if (VMmapPtr->TMS_titleLine2[0])
		@call MESInfo2::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(VMmapPtr->TMS_titleLine2,
								VUM_DELAYED_VIA_APP_QUEUE);
	if (VMmapPtr->TMS_titleLine3[0])
		@call MESInfo3::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(VMmapPtr->TMS_titleLine3,
								VUM_DELAYED_VIA_APP_QUEUE);
	if (VMmapPtr->TMS_nameLine[0]) {
		@call MESNameText::MSG_VIS_TEXT_REPLACE_ALL_PTR(VMmapPtr->TMS_nameLine, 0);
		g_nameAndDateSaved = TRUE;
		}
	else g_nameAndDateSaved = FALSE;
	if (VMmapPtr->TMS_dateLine[0])
		@call MESDateText::MSG_VIS_TEXT_REPLACE_ALL_PTR(VMmapPtr->TMS_dateLine, 0);
	else {
		/* fill in the date field */
		TimerGetDateAndTime(&date);
		LocalFormatDateTime(dateString, DTF_SHORT, &date);
		@call MESDateText::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);
		}
	VMUnlock(mh);

	pself->TTDI_selectedQ = GIGS_NONE;

	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
	/* and update the ui */
	UtilHex32ToAscii(numStr, (dword)g_numQuestions, UHTAF_NULL_TERMINATE);
	@call MESBTotNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	UtilHex32ToAscii(numStr, (dword)g_ansQuestions, UHTAF_NULL_TERMINATE);
	@call MESBAnsNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	@send MESBGradeButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESGradeGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	/* and check if this is a completed test just being opened for viewing
		or grading */
	if (pself->TTDI_finished) {
		SetTestUIAsCompleted();
		if (canGrade) @send MESBGradeButton::MSG_GEN_SET_USABLE(VUM_NOW);
		}
	else {
		/* check to see if we need to undo the UI set by a prev done test */
		if (!@call MESBCompletedButton::MSG_GEN_GET_ENABLED())
      	SetTestUIAsNotCompleted();
		}

}

/***********************************************************************
 *
 * MESSAGE: MSG_TTKR_DOCUMENT_OPEN_QA_FORM for TTkrDocumentClass
 *        /*  (GEN_TRIGGER_ACTION)
 *        /*  optr trigger
 * DESCRIPTION: 
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_OPEN_QA_FORM
{
 word		sel, size, i, ans, len, correctAns;
 byte		type;
 MemHandle		mh;
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 char					qString[MAX_QUESTION_LENGTH], ansStr[10];
 TestMapStruct        *VMmapPtr;
 MemHandle		vmh;
 VMBlockHandle		vmbh;
 optr					choice[] = {@MEQAMCQSelectA, @MEQAMCQSelectB, @MEQAMCQSelectC,
										@MEQAMCQSelectD, @MEQAMCQSelectE, @MEQAMCQSelectF};
 optr					item[] = {@MEQMCASelectA, @MEQMCASelectB, @MEQMCASelectC,
									 @MEQMCASelectD, @MEQMCASelectE, @MEQMCASelectF};
 Boolean		showGrade;
 char				choices[] = "(A).(B).(C).(D).(E).(F).";


	showGrade = pself->TTDI_showGrade;

	if (!(pself->TTDI_finished)) {
		/* first let's remind the student to fill in his name and check the date */
		len = @call MESNameText::MSG_VIS_TEXT_GET_ALL_PTR(qString);
		if (!len) {
			NotifyDBox(0, @MsgDoName);
			return;
			}
		else if (!g_nameAndDateSaved) {
			/* save the name & date */
			vmbh = VMGetMapBlock(pself->GDI_fileHandle);
			VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
			strcpy(VMmapPtr->TMS_nameLine, qString);
			if (@call MESDateText::MSG_VIS_TEXT_GET_ALL_PTR(qString))
				strcpy(VMmapPtr->TMS_dateLine, qString);
			VMDirty(vmh);
			VMUnlock(vmh);
			g_nameAndDateSaved = TRUE;
			}
		}

	/* make sure there's a question selected */
	sel = @call MESummaryDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if (sel == GIGS_NONE) return;
	else {
		/* grab the info from the db and show it */
		error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TTDI_testDBHan,
									sel, &mh);
		if (error) {
			NotifyDBox(0, @BDBGetByIndexError);
			return;
			}
		/* get the type */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
		BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
		/* save the type */
		pself->TTDI_openEntryType = type;
		/* set up the db and show the type & number */
		SetQADBoxType(type);
		MemLock(OptrToHandle(@MCLongText));
		switch (type) {
			case QTYPE_MC:
				strcpy(qString, LMemDeref(@MCLongText));
				break;
			case QTYPE_TF:
				strcpy(qString, LMemDeref(@TFLongText));
				break;
			case QTYPE_FILL:
				strcpy(qString, LMemDeref(@FFLongText));
				break;
			}
		MemUnlock(OptrToHandle(@MCLongText));
		@call MEQAQuestionType::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, 0);
		UtilHex32ToAscii(qString, (dword)(sel + 1), UHTAF_NULL_TERMINATE);
		@call MEQAQuestionNum::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, 0);

		/* get the question */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
		size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
		/* show the question */
		@call MEQAQuestionText::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
		if (type == QTYPE_MC)  {
			/* show the choices */
			for (i = 0; i < 6; i++) {
				fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
														 FIELD_CAT_MCCHOICE_A + i, 1);
				size = BasicDBGetFieldData(mh, fieldID,
														qString, MAX_QUESTION_LENGTH);
				if (size) {
					@send choice[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
					@call choice[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
					@send item[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
					}
				else {
					@send choice[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
					@send item[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
               }
				}
			}

		/* and now show any existing student answers */
		g_answered = FALSE;
		@send MEQARightWrong::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_STU_ANS, 1);
		if (type != QTYPE_FILL)  {
			size = BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
			if (type == QTYPE_MC) {
				if (size) {
					@send MEQAMCAnswer::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(ans, FALSE);
					if (ans != GIGS_NONE)  g_answered = TRUE;
					}
				else
					@send MEQAMCAnswer::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
				/* are we showing correct answers? */
				if (showGrade) {
					@send MEQARightWrong::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
					fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
					BasicDBGetFieldData(mh, fieldID, &correctAns, sizeof(word));
					MemLock (OptrToHandle(@MsgRightAnswer));
					if (correctAns == ans)
						@call MEQARightWrong::MSG_VIS_TEXT_REPLACE_ALL_PTR(
															 LMemDeref(@MsgRightAnswer), 0);
					else  {
						@call MEQARightWrong::MSG_VIS_TEXT_REPLACE_ALL_PTR(
															 LMemDeref(@MsgWrongAnswer), 0);
						strncpy(ansStr, &choices[(correctAns-1)*4], 4);
						ansStr[4] = 0;
						@call MEQARightWrong::MSG_VIS_TEXT_APPEND_PTR(ansStr, 0);
						}
					MemUnlock (OptrToHandle(@MsgRightAnswer));
					}
				}
			else  {  /* its a T/F */
				if (size) {
					@send MEQATFAnswer::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(ans, FALSE);
					if (ans != GIGS_NONE)  g_answered = TRUE;
					}
				else
					@send MEQATFAnswer::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
				/* are we showing correct answers? */
				if (showGrade) {
					@send MEQARightWrong::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
					fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
					BasicDBGetFieldData(mh, fieldID, &correctAns, sizeof(word));
					MemLock (OptrToHandle(@MsgRightAnswer));
					if (correctAns == ans)
						@call MEQARightWrong::MSG_VIS_TEXT_REPLACE_ALL_PTR(
															 LMemDeref(@MsgRightAnswer), 0);
					else  {
						@call MEQARightWrong::MSG_VIS_TEXT_REPLACE_ALL_PTR(
															 LMemDeref(@MsgWrongAnswer), 0);
						if (correctAns == TF_TRUE)
							@call MEQARightWrong::MSG_VIS_TEXT_APPEND_PTR(
															 LMemDeref(@TrueText), 0);
						else
							@call MEQARightWrong::MSG_VIS_TEXT_APPEND_PTR(
															 LMemDeref(@FalseText), 0);
						}
					MemUnlock (OptrToHandle(@MsgRightAnswer));
					}
				}
			}
		else {
			size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH);
			if (size) {
				@call MEQAFillAnswer::MSG_VIS_TEXT_REPLACE_ALL_PTR(qString, size);
				g_answered = TRUE;
				}
			else
				@call MEQAFillAnswer::MSG_VIS_TEXT_DELETE_ALL();
			}
		BasicDBDiscardRecord(mh);
		}  /* end of question selected else */

	/* Open the dialog box */
	@send MEQuestionAnswerGroup::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE: MSG_TTKR_DOCUMENT_SAVE_ENTRY for TTkrDocumentClass
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_SAVE_ENTRY
{
 word					sel, ans;
 BasicDBError		error;
 BasicDBFieldID	fieldID;
/* BasicDBRecordID    recordID;  */
 Boolean			wasProblem = FALSE;
 Boolean			/*savedOK, */needUpdate, eraseAnswer = FALSE;
 TestMapStruct        *VMmapPtr;
 MemHandle		vmh;
 VMBlockHandle		vmbh;
 MemHandle		mh;
 byte				type;
 char				string[MAX_QUESTION_LENGTH];


	sel = @call MESummaryDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	if (!(pself->TTDI_finished)) {  /* the Save Answer trigger */
		/* first get the type to do some error trapping...  */
		type = pself->TTDI_openEntryType;

		if (((type == QTYPE_MC) &&
				(@call MEQAMCAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION()== GIGS_NONE))
			|| ((type == QTYPE_TF) &&
				(@call MEQATFAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION()== GIGS_NONE))
			|| ((type == QTYPE_FILL) &&
				(!@call MEQAFillAnswer::MSG_VIS_TEXT_GET_ALL_PTR(string))))  {
			/* user is trying to save but there is no answer... */
			if (!g_answered)  {
				/* this question hasn'r been answered yet so just notify & return */
				NotifyDBox(0, @ErrMsgNoAnswer);
				return;
				}
			else  {
				/* the user is removing an existing answer, make sure that is what
					is really wanted... */
				if(AckDBox(0, 0, @ErrMsgDeleteAnswer) != ACK_YES) return;
				eraseAnswer = TRUE;
				}
			}

		/* open the record to be answered  */
		error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TTDI_testDBHan,
									sel, &mh);
		if (error) {
			NotifyDBox(0, @BDBGetByIndexError);
			return;
			}

		/* save the answer */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_STU_ANS, 1);
		if (type == QTYPE_MC) {
			ans = @call MEQAMCAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION();
			error = BasicDBSetFieldData(mh, fieldID, &ans, sizeof(word));
			}
		else if (type == QTYPE_TF) {
			ans = @call MEQATFAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION();
			error = BasicDBSetFieldData(mh, fieldID, &ans, sizeof(word));
			}
		else  {
			@call MEQAFillAnswer::MSG_VIS_TEXT_GET_ALL_PTR(string);
			error = BasicDBSetFieldData(mh, fieldID, string, strlen(string));
			}

		if (!error) {
			/* store the record */
			error = BasicDBSaveRecord(pself->GDI_fileHandle,
						pself->TTDI_testDBHan,
						mh,
						/*TypesIndexCallBack*/0,
						/*&recordID*/0);
			if (error) wasProblem = TRUE;
			else {
				needUpdate = FALSE;
				if (!g_answered) {
					/* update the num answered stuff */
					g_ansQuestions++;
					UtilHex32ToAscii(string, (dword)g_ansQuestions, UHTAF_NULL_TERMINATE);
					@call MESBAnsNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(string, 0);
					needUpdate = TRUE;
					}
				else  {
					if (eraseAnswer) {
						g_ansQuestions--;
						UtilHex32ToAscii(string, (dword)g_ansQuestions, UHTAF_NULL_TERMINATE);
						@call MESBAnsNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(string, 0);
						needUpdate = TRUE;
						}
					}
				if (needUpdate) {
					/* update our VMmap block */
					vmbh = VMGetMapBlock(pself->GDI_fileHandle);
					VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
					VMmapPtr->TMS_ansQuestions = g_ansQuestions;
					VMDirty(vmh);
					VMUnlock(vmh);
					}
				}
			}  /* end of saved ok if */
		else wasProblem = TRUE;

		if (wasProblem) {
			if (mh) {
				BasicDBDiscardRecord(mh);
				MemFree(mh);
				}
			NotifyDBox(0, @ErrMsgCouldntSaveRec);
			return;
			}
		} /* end of Save Answer trigger if */

	if (sel == g_numQuestions - 1)  {
		/* it was the last question so close the dbox */
		@call MESummaryDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(TRUE);
		@call MESummaryDList::MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(TRUE);
		@send MEQuestionAnswerGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		}
	else {
		/* show the next question */
		@call MESummaryDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sel+1, FALSE);
		@call MESummaryDList::MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(TRUE);
		@send oself::MSG_TTKR_DOCUMENT_OPEN_QA_FORM();
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY for TTkrDocumentClass
 *
 * DESCRIPTION:	Queries for monikers for summary list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY
{
 MemHandle		mh;
 char			qString[MAX_QUESTION_LENGTH], typeString[13], fontName[20];
 word			size, sysPointSize, height, eWidth, width, vSep1, vSep2, numChars;
 word			fudge, data, ans, stuAns;
 byte			type;
 BasicDBFieldID	fieldID;
 ChunkHandle		chunk ;
 MemHandle		mem ;
 GStateHandle		gstate ;
 Boolean			initError, answered, showGrade, correct;
 FontID			fontID;


//   if (item == GIGS_NONE) return;

	showGrade = pself->TTDI_showGrade;

	/* open the record */
	BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									  pself->TTDI_testDBHan,
									  item, &mh);

	/* see if it has been answered */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_STU_ANS, 1);
	size = BasicDBGetFieldData(mh, fieldID, &data, sizeof(word));
	if (size && (data != GIGS_NONE)) answered = TRUE;
	else answered = FALSE;

 	/* get the type */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY,
										 FIELD_CAT_Q_TYPE, 1);
	BasicDBGetFieldData(mh, fieldID, &type, sizeof(byte));
	MemLock (OptrToHandle(@MCShortText));
	if(type == QTYPE_MC)
		strcpy(typeString, LMemDeref(@MCShortText));
	else if(type == QTYPE_TF)
		strcpy(typeString, LMemDeref(@TFLongText));
	else
		strcpy(typeString, LMemDeref(@FFLongText));
	MemUnlock (OptrToHandle(@MCShortText));

	/* get the question */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
	size = BasicDBGetFieldData(mh, fieldID, qString, MAX_QUESTION_LENGTH+1);
	qString[size] = 0;
	if (showGrade) {
		/* get the answer */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
		size = BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
		if (!size) ans = 0;
		/* and the student's answer */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_STU_ANS, 1);
		size = BasicDBGetFieldData(mh, fieldID, &stuAns, sizeof(word));
		if (!size) stuAns = 0;
		/* and see if it is correct */
		if (ans == stuAns) correct = TRUE;
		else correct = FALSE;
		}
	BasicDBDiscardRecord(mh);

	/* OK - let's get some color onto this thing!!! */

	/* get the font info */
	initError = InitFileReadInteger("ui", "fontsize", &sysPointSize);
	if (initError) sysPointSize = 12;
	initError = InitFileReadStringBuffer("ui", "fontid", fontName, 20, &size);
	if (initError) fontID = FID_BERKELEY;
	else if (!strcmp(fontName, "Esquire")) fontID = FID_ESQUIRE;
	else fontID = FID_BERKELEY;
	height = sysPointSize + 8;
	/* set the ellipsis width based on font size */
	switch (sysPointSize) {
		case 9: eWidth = 7; break;
		case 10: eWidth = 8; break;
		case 12: eWidth = 10; break;
		case 14: eWidth = 12; break;
		case 18: eWidth = 16; break;
		default: eWidth = 10;
		}

	/* set up the mem and gstate */
	mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
	gstate = GrCreateGString(mem, GST_CHUNK, &chunk);
	/* tell the list the size of the gstring */
	GrSetGStringBounds(gstate, 0, 0, g_dListWidth, height);  /* L, T, R, B */

	/* NOTE - the right edge isn't exact because I think g_dListWidth is
	 * the entire width including any scroll bar.  But we'll need a fudge
	 * factor for questions that are too long to fit.
	 */
	fudge = 20;

	/* it looks like I need to set the font & pointsize to make GrTextWidth
	 * work properly */
	GrSetFont(gstate, fontID, MakeWWFixed(sysPointSize));

	/* set the colors based on whether answered */
	if (item == pself->TTDI_selectedQ) {   /* selected fill color */
		GrSetAreaColor(gstate, CF_INDEX, C_BLUE, 0, 0);
		GrFillRect(gstate, 1, 1, g_dListWidth-4, height-4);
		/* set the text color */
		GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);
		}
	else  {    /* non-selected fill color */
		if (showGrade) {
			if (correct)
				GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GREEN, 0, 0);
			else
				GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_RED, 0, 0);
			}
		else  {
			if (answered)
				GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_GREEN, 0, 0);
			else
				GrSetAreaColor(gstate, CF_INDEX, C_LIGHT_CYAN, 0, 0);
			}
		GrFillRect(gstate, 1, 1, g_dListWidth-4, height-4);
		/* set the text color */
		GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
		}
	/* do a border */
	GrSetLineWidth(gstate, MakeWWFixed(2));
	GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	GrDrawRect(gstate, 0, 0, g_dListWidth-3, height-3);
	/* draw vertical separators */
	GrSetLineWidth(gstate, MakeWWFixed(1));
	if (fontID == FID_ESQUIRE)  {
		vSep1 = sysPointSize * 3;
		vSep2 = sysPointSize * 7 + vSep1;
		}
	else  {
		vSep1 = sysPointSize * 4;
		vSep2 = sysPointSize * 8 + vSep1;
		}
	GrDrawVLine(gstate, vSep1, 1, height-3);
	GrDrawVLine(gstate, vSep2, 1, height-3);

	/* show the type */
	GrDrawText(gstate, vSep1+5, 1, typeString, 0);
	/* show the number */
	UtilHex32ToAscii(typeString, (dword)(item + 1), UHTAF_NULL_TERMINATE);
   strcat(typeString, ".");
	GrDrawText(gstate, 5, 1, typeString, 0);

	/* show the question */
	width = GrTextWidth(gstate, qString, strlen(qString));
	if(width > g_dListWidth - vSep2 - fudge)  {
		/* truncate text and add ellipsis */
		numChars = strlen(qString);
		while (width > (g_dListWidth - vSep2 - fudge - eWidth)) {
			qString[numChars - 1] = 0;
         numChars--;
			width = GrTextWidth(gstate, qString, strlen(qString));
			}
		strcat(qString, "...");
		}
	GrDrawText(gstate, vSep2+5, 1, qString, 0) ;

	/* terminate the gstring */
	GrEndGString(gstate) ;
	/* and tell the DList */
	@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  height,
				  g_dListWidth,
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

	/* and 86 the gstate and mem */
	GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
	MemFree(mem) ;


}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_SUMMARY_DLIST_STATUS for TTkrDocumentClass
 *               (GEN_ITEM_GROUP_STATUS_MSG)
 *
 * DESCRIPTION:	the selection has changed
 *
 * PARAMETERS:  void (word numSelections, word selection, byte stateFlags)
 *
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_SUMMARY_DLIST_STATUS
{
 word		oldSelection;


	oldSelection = pself->TTDI_selectedQ;
	pself->TTDI_selectedQ = selection;

	/* redraw selected q's moniker to show selected */
	if (selection != GIGS_NONE)
		@call self::MSG_TTKR_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY(
							 @MESummaryDList,
							 selection);
	/* redraw the old moniker to show not selected */
	if (oldSelection != GIGS_NONE)
		@call self::MSG_TTKR_DOCUMENT_SUMMARY_DLIST_MONIKER_QUERY(
						    @MESummaryDList,
							 oldSelection);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_SUMMARY_DLIST_DBL_CLICK() for TTkrDocumentClass
 *
 * DESCRIPTION:	Handles question double click.
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
/*@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_SUMMARY_DLIST_DBL_CLICK
{

	@call MESBAnswerQButton::MSG_GEN_ACTIVATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_RECALC_SIZE() for TTkrGenDynamicListClass
 *
 * DESCRIPTION:	gets the width of the dlist window and re-inits the dlist
 *                if the width is changed
 *
 * PARAMETERS:    SizeAsDWord
 *						(RecalcSizeArgs width,
 *						RecalcSizeArgs height)
 * (Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value)
 *
 ***********************************************************************/
@method TTkrGenDynamicListClass, MSG_VIS_RECALC_SIZE
{
 SizeAsDWord		size;
 word					returnWidth;
 Boolean				change = FALSE;


	size = @callsuper();
	returnWidth = DWORD_WIDTH(size);

	/* See if we want to re-init the dlist to truncate any long lines
	 * if necessary.  If any are 0 we're in a start-up situation and
	 * don't want to get involved. */
	if (returnWidth && width && g_dListWidth) {
		/* ok - none are 0 so we may have a redraw situation */
		/* The first pass through, after a width change, g_dL is still
		 * the old width and rW is the new width.  But we don't want to re-init
		 * yet since there'll be another pass through here.  On that second
		 * pass they'll be the same and now's when we need to re-init, however
		 * counter-intuitive that may be. */
		if (returnWidth == g_dListWidth)
			change = TRUE;
		}
	/* extract the superclass computed width so the moniker
	 * query routine will know */
	g_dListWidth = returnWidth;

	if (change) {
		@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
		}

	return(size);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_TEST_COMPLETED() for TTkrDocumentClass
 *
 * DESCRIPTION:	Marks the test completed so that nothing can be changed
 *                before or after it gets graded.
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_TEST_COMPLETED
{
 word			len, openQuestions;
 TestMapStruct        *VMmapPtr;
 MemHandle		vmh;
 VMBlockHandle		vmbh;
 char				string[MAX_TITLE_LENGTH];
 Boolean			canGrade;


	/* first make sure that's what to do */
	if(AckDBox(0, 0, @MsgMarkCompleted) != ACK_YES) return;

	/* then make sure that there is a name and date */
	len = @call MESNameText::MSG_VIS_TEXT_GET_ALL_PTR(string);
	if (!len) {
		NotifyDBox(0, @MsgDoName);
		return;
		}
	else {
		/* save the name & date */
		vmbh = VMGetMapBlock(pself->GDI_fileHandle);
		VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
		strcpy(VMmapPtr->TMS_nameLine, string);
		if (@call MESDateText::MSG_VIS_TEXT_GET_ALL_PTR(string))
			strcpy(VMmapPtr->TMS_dateLine, string);
		VMDirty(vmh);
		VMUnlock(vmh);
		g_nameAndDateSaved = TRUE;
		}

	/* if there are unanswered questions ask again... */
	if (g_numQuestions != g_ansQuestions)  {
		openQuestions = g_numQuestions - g_ansQuestions;
		if (openQuestions == 1) {
			if(AckDBox(0, 0, @Msg1UnansMarkCompleted) != ACK_YES) return;
         }
		else {
			UtilHex32ToAscii(string, (dword)openQuestions, UHTAF_NULL_TERMINATE);
			if(AckDBox(string, 0, @MsgUnansMarkCompleted) != ACK_YES) return;
			}
		}

	/* OK - set the flag in the map block and set the UI so that name,
		date and answers cannot be changed. */
	SetTestUIAsCompleted();
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
	VMmapPtr->TMS_finished = TRUE;
	/* while it's open lets grab the grade flag */
	canGrade = VMmapPtr->TMS_studentGradable;
	VMDirty(vmh);
	VMUnlock(vmh);

	pself->TTDI_finished = TRUE;

	/* if the student is allowed to grade the test show the grade button now */
	if (canGrade) @send MESBGradeButton::MSG_GEN_SET_USABLE(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_TEST_NOT_COMPLETED() for TTkrDocumentClass
 *
 * DESCRIPTION:	Undoes the COMPLETED stuff
 *
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_TEST_NOT_COMPLETED
{
 TestMapStruct        *VMmapPtr;
 MemHandle		vmh;
 VMBlockHandle		vmbh;


	/* As a safety measure, we'll only allow an unfinish if there is a
		copy of TGen running on this setup.  Not likely on a student's PC. */
	if (!GeodeFind("tgen", 4, GA_APPLICATION, 0)) {
      NotifyDBox(0, @MsgNoUnfinish);
   	return;
		}

	if (pself->TTDI_showGrade) {
		pself->TTDI_showGrade = FALSE;
		@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
      }

	SetTestUIAsNotCompleted();
	@send MESBGradeButton::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESBGradeButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESGradeGroup::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
	VMmapPtr->TMS_finished = FALSE;
	VMDirty(vmh);
	VMUnlock(vmh);

   pself->TTDI_finished = FALSE;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_TTKR_DOCUMENT_GRADE_TEST() for TTkrDocumentClass
 *
 * DESCRIPTION:
 *
 *
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method TTkrDocumentClass, MSG_TTKR_DOCUMENT_GRADE_TEST
{
 word			i, size, ans, stuAns, numCorrect, score;
 MemHandle		mh;
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 char					numStr[11];


	/* Go thru the questions to compare stu and correct answers */
	numCorrect = 0;
	for (i = 0; i < g_numQuestions; i++) {
		/* grab the question record */
		error = BasicDBGetRecordByElemNum(pself->GDI_fileHandle,
									pself->TTDI_testDBHan,
									i, &mh);
		if (error) {
			NotifyDBox(0, @BDBGetByIndexError);
			return;
			}
		/* get the answer */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
		size = BasicDBGetFieldData(mh, fieldID, &ans, sizeof(word));
		if (!size) ans = 0;
		/* and the student's answer */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_STU_ANS, 1);
		size = BasicDBGetFieldData(mh, fieldID, &stuAns, sizeof(word));
		if (!size) stuAns = 0;
		/* and see if it is correct */
		if (ans == stuAns) numCorrect++;
		BasicDBDiscardRecord(mh);
		}

	/* show the num correct and score */
	UtilHex32ToAscii(numStr, (dword)numCorrect, UHTAF_NULL_TERMINATE);
	@call MESBCorrect::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);
	score = (100 * numCorrect) / g_numQuestions;
	UtilHex32ToAscii(numStr, (dword)score, UHTAF_NULL_TERMINATE);
	@call MESBScore::MSG_VIS_TEXT_REPLACE_ALL_PTR(numStr, 0);

	@send MESBGradeButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send MESGradeGroup::MSG_GEN_SET_USABLE(VUM_NOW);

	/* redraw the questions list to show right & wrong */
	pself->TTDI_showGrade = TRUE;
	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);

}


