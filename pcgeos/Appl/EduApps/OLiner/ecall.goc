/***********************************************************************
 *
 *
 * PROJECT: Breadbox Outliner
 * FILE:        ecall.goc
 * AUTHOR:  John F. Howard,   05/03
 *
 * DESCRIPTION:
 *		This file has the document class code for the expand/contract all
 *		functionality.
 *
 ***********************************************************************/


/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/
@include "oliner.goh"

@extern object CardDList;
/* file globals */


/****************************************************************************
 *		Code for OLDocumentClass Expand/Contract All
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_DOC_EXPAND_ALL_TOPICS for OLDocumentClass
 *
 * DESCRIPTION:
 *
 * Date		By
 * 11/12/03	jfh		fixed a bug reported by Steve in the UK - see comment
 *                   in the code
 *
 ***********************************************************************/
@extern method OLDocumentClass, MSG_OLINER_DOC_EXPAND_ALL_TOPICS
{
 MemHandle		mh;
 VMBlockHandle		vmbh;
 IndexStruct	*indexElement;
 word		total, i, j;

 MemHandle			vmh, cmh;
 VMBlockHandle    myDBHan, cvmbh;
 VMMapStruct		*VMmapPtr;
 word					numAdds, numClosed, numRecs, move;
 IndexStruct		*closedElement, *insertElement;
 Boolean				keepGoing, appendFlag;

	/* mark app busy */
	@send application::MSG_GEN_APPLICATION_MARK_BUSY();

	/* set up the search loop */
	total = pself->OLDI_indexItems;
	i = 0;
	vmbh = VMFind(g_curDocHan, NullHandle, INDEX_LIST);
	VMLock(g_curDocHan, vmbh ,&mh);

	while (i < total) {
		/* get the info on the ith item */
		indexElement = ChunkArrayElementToPtrHandles(mh, g_indexCArray, i, 0);
		if (indexElement->ISS_type == T_CLOSED_TOPIC) {
			/* open up the closed topic */
//			@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(i, FALSE);
//			@send oself::MSG_OLINER_DOC_CARD_DLIST_DOUBLE_CLICK();
			/* If there are more than 15 expansions to do just calling the
				above bombs out on using up all the handles.  Let's try copying
				in the appropriate parts of the DOUBLE_CLICK routine.  Don't need
				to redraw and reset things until the end of the process. */
			keepGoing = TRUE;
			appendFlag = FALSE;
			numAdds = 0;
			numRecs = indexElement->ISS_numRecs;
			myDBHan = indexElement->ISS_myDBHan;
			/* lock the closed array */
			cvmbh = VMFind(g_curDocHan, NullHandle, CLOSED_LIST);
			VMLock(g_curDocHan, cvmbh ,&cmh);
			numClosed = ChunkArrayGetCountHandles(cmh, pself->OLDI_closedCArray);
			/* and check the exceptional case of the selected topic being the
				last item in the list */
			if (i == (pself->OLDI_indexItems - 1))  appendFlag = TRUE;
			/* The idea here is to add the children of the selected topic by going
				through the closed until finding an item which has our topic
				as its parent.  Then we move numRecs items from the closed array
				to the index, adding to numRecs when we encounter an open subtopic
				so we get those extra lines. */
			for (j = 0; j < numClosed; j++) {
				closedElement = ChunkArrayElementToPtrHandles(
						cmh, pself->OLDI_closedCArray, j, 0);
				if (closedElement->ISS_dbHan == myDBHan) {
					move = j;
					break;
					}
				}
			/* OK we found our first item... start moving em. */
			while (keepGoing) {
				closedElement = ChunkArrayElementToPtrHandles(
						cmh, pself->OLDI_closedCArray, move, 0);
				/* insert or append to index */
				if (appendFlag) {
					/* append it to the index array */
					insertElement = ChunkArrayAppendHandles(
								mh, g_indexCArray, 0);
					}
				else  {
					/* insert it into the index array */
					indexElement = ChunkArrayElementToPtrHandles(
								mh, g_indexCArray, i + 1 + numAdds, 0);
					insertElement = ChunkArrayInsertAtHandle(
								g_indexCArray, indexElement, 0);
					}
				insertElement->ISS_type = closedElement->ISS_type;
				insertElement->ISS_level = closedElement->ISS_level;
				insertElement->ISS_dbHan = closedElement->ISS_dbHan;
				insertElement->ISS_recNum = closedElement->ISS_recNum;
				insertElement->ISS_numRecs = closedElement->ISS_numRecs;
				insertElement->ISS_myDBHan = closedElement->ISS_myDBHan;
				numAdds++;
				/* ok we've added it to the index - add to our number of passes thru
					this while loop if this is an open topic */
				if (closedElement->ISS_type == T_OPEN_TOPIC)
					numRecs += closedElement->ISS_numRecs;
				/* remove the item from the closed array */
				ChunkArrayDeleteHandle(pself->OLDI_closedCArray, closedElement);
				/* are we done? */
				if (numAdds == numRecs)
					keepGoing = FALSE;
				}  /* end of keepGoing while */
			VMDirty(cmh);
			VMUnlock(cmh);

			pself->OLDI_indexItems += numAdds;

			/* now reset our type */
			indexElement = ChunkArrayElementToPtrHandles(mh, g_indexCArray, i, 0);
			indexElement->ISS_type = T_OPEN_TOPIC;

			/* back to original code */
			total = pself->OLDI_indexItems;
			}
		i++;
		} /* end of search transactions while */

	VMDirty(mh);
	VMUnlock(mh);

	/* save the new number of items */
	vmbh = VMGetMapBlock(g_curDocHan);
	VMmapPtr = VMLock(g_curDocHan, vmbh, &vmh);
	VMmapPtr->VMMS_indexItems = pself->OLDI_indexItems;
	VMDirty(vmh);
	VMUnlock(vmh);

	/* and redraw the list */
	@send CardDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->OLDI_indexItems);

	@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

	@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
	@send CardDList::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send CardDList::MSG_GEN_APPLY();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_OLINER_DOC_CONTRACT_ALL_TOPICS for OLDocumentClass
 *
 * DESCRIPTION:
 *              	
 * Date		By
 * 11/12/03	jfh		fixed a bug reported by Steve in the UK - see comment
 *                   in the code
 *
 *
 ***********************************************************************/
@extern method OLDocumentClass, MSG_OLINER_DOC_CONTRACT_ALL_TOPICS
{
 MemHandle		mh;
 VMBlockHandle		vmbh;
 IndexStruct	*indexElement;
 word		total, i;

 MemHandle			vmh, cmh;
 VMBlockHandle    cvmbh;
 VMMapStruct		*VMmapPtr;
 word					level, numDels;
 IndexStruct		*closedElement;
 Boolean				keepGoing;


	/* mark app busy */
	@send application::MSG_GEN_APPLICATION_MARK_BUSY();

	/* set up the search loop */
	total = pself->OLDI_indexItems;
	i = 0;
	vmbh = VMFind(g_curDocHan, NullHandle, INDEX_LIST);
	VMLock(g_curDocHan, vmbh ,&mh);

	while (i < total) {
		/* get the info on the ith item */
		indexElement = ChunkArrayElementToPtrHandles(mh, g_indexCArray, i, 0);
		if (indexElement->ISS_type == T_OPEN_TOPIC) {
			/* close up the open topic */
//			@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(i, FALSE);
//			@send oself::MSG_OLINER_DOC_CARD_DLIST_DOUBLE_CLICK();
			/* If there are more than 15 expansions to do just calling the
				above bombs out on using up all the handles.  Let's try copying
				in the appropriate parts of the DOUBLE_CLICK routine.  Don't need
				to redraw and reset things until the end of the process. */
			numDels = 0;
			level = indexElement->ISS_level;
			keepGoing = TRUE;
			/* lock the closed array */
			cvmbh = VMFind(g_curDocHan, NullHandle, CLOSED_LIST);
			VMLock(g_curDocHan, cvmbh ,&cmh);
			/* Go down the list and move each item to the closed array until
				we come across an item at or above our level */
			while (keepGoing) {
				indexElement = ChunkArrayElementToPtrHandles(
						mh, g_indexCArray, i + 1, 0);
				if (indexElement->ISS_level > level) {
					/* add it to the closed array */
					closedElement = ChunkArrayAppendHandles(
							cmh, pself->OLDI_closedCArray, 0);
					closedElement->ISS_type = indexElement->ISS_type;
					closedElement->ISS_level = indexElement->ISS_level;
					closedElement->ISS_dbHan = indexElement->ISS_dbHan;
					closedElement->ISS_recNum = indexElement->ISS_recNum;
					closedElement->ISS_numRecs = indexElement->ISS_numRecs;
					closedElement->ISS_myDBHan = indexElement->ISS_myDBHan;
					/* remove it from the index array */
					ChunkArrayDeleteHandle(g_indexCArray, indexElement);
					numDels++;
					}
				else keepGoing = FALSE;
				}  /* end of keepGoing while */

			VMDirty(cmh);
			VMUnlock(cmh);

			pself->OLDI_indexItems -= numDels;

			/* now reset our type */
			indexElement = ChunkArrayElementToPtrHandles(mh, g_indexCArray, i, 0);
			indexElement->ISS_type = T_CLOSED_TOPIC;

			/* back to original code */
			total = pself->OLDI_indexItems;
			}
		i++;
		} /* end of search transactions while */

	VMDirty(mh);
	VMUnlock(mh);

	/* save the new number of items */
	vmbh = VMGetMapBlock(g_curDocHan);
	VMmapPtr = VMLock(g_curDocHan, vmbh, &vmh);
	VMmapPtr->VMMS_indexItems = pself->OLDI_indexItems;
	VMDirty(vmh);
	VMUnlock(vmh);

	/* and redraw the list */
	@send CardDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(pself->OLDI_indexItems);
	@send application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

	@send CardDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
	@send CardDList::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send CardDList::MSG_GEN_APPLY();



}

