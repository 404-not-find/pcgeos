/***********************************************************************
 *
 *
 * PROJECT: Breadbox Outliner
 * FILE:        functs.goc
 * AUTHOR:  John F. Howard,   05/03
 *
 * DESCRIPTION:
 *  This file has various functions for the application.
 *
 *
 ***********************************************************************/


/* ----------------------------------------------------------------------------
	Include files
-----------------------------------------------------------------------------*/
@include "oliner.goh"

@extern object MTopicText;
@extern object STopicText;
@extern object ETopicText;
@extern object MTopicTrigger;
@extern object STopicTrigger;
@extern object ETopicTrigger;
@extern object CardTitle;
@extern object CardText;
@extern object CardApply;
@extern object SaveCardButton;
@extern object SaveCardTool;
@extern chunk BDBAddFieldError;
@extern chunk BDBGetRecordError;
@extern chunk AlertCardTitleMsg;

/***********************************************************************
 *
 * FUNCTION:	MakeNewRecord (VMBlockHandle whichDB)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    returns the mh of the record created or 0 if a problem
 *
 *
 ***********************************************************************/
MemHandle MakeNewRecord (VMBlockHandle whichDB)
{
 MemHandle		mh;
 BasicDBError		error;
 BasicDBFieldID	fieldID;
 word			i;


	/* OK create the record */
	mh = BasicDBCreateRecord();
	/* and the fields - the category constants are sequential
	 * so we can do this in a loop */
	for (i = FIELD_CAT_TITLE; i < FIELD_CAT_LAST; i++) {
		error = BasicDBAddField(g_curDocHan,
						whichDB,
					   mh,
					   i,
					   0,
					   0,
					   &fieldID);
		if(error) {
			mh = 0;
			i = FIELD_CAT_LAST;
			NotifyDBox(0, @BDBAddFieldError);
			}
		}

	return (mh);

}

/***********************************************************************
 *
 * FUNCTION:	GetItemTitle (VMBlockHandle whichDB,
 *                           word recNum,
 *                           char* tString)
 *
 * CALLED BY:   various
 *
 *
 * STRATEGY:    returns the item's title string
 *
 *
 ***********************************************************************/
void GetItemTitle(VMBlockHandle whichDB, word recNum, char* tString)
{
 MemHandle			mh;
 BasicDBFieldID	fieldID;
 word					size;


	if (BasicDBGetRecordByElemNum(g_curDocHan, whichDB, recNum, &mh)) {
		NotifyDBox(0, @BDBGetRecordError);
		return;
		}
	/* get the title */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1);
	size = BasicDBGetFieldData(mh, fieldID, tString, MAX_TITLE_LENGTH+1);
	tString[size] = 0;
	BasicDBDiscardRecord(mh);
   return;


}

/***********************************************************************
 *
 * FUNCTION:	SaveData (MemHandle openRecMH, word type)
 *								VMBlockHandle dbHan, optr trigger)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:   returns TRUE if everything went OK
 *             (our title fields have been checked)
 *
 ***********************************************************************/
Boolean SaveData (MemHandle mh, word type,
						VMBlockHandle dbHan, optr trigger)
{
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 char					string[MAX_TITLE_LENGTH+1];
 MemHandle			dataBlock;
 char					*p_data;
 dword				len;
 TimerDateAndTime	date;


	/* save the type */
	fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1);
	error = BasicDBSetFieldData(mh, fieldID, &type, sizeof(word));
	if(error) return (FALSE);
	/* and the date (create/mod)*/
	TimerGetDateAndTime(&date);
	if (trigger == @MTopicTrigger || trigger == @STopicTrigger
				|| trigger == @SaveCardButton || trigger == @SaveCardTool
				|| trigger == @CardApply)
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_CREATE_DATE, 1);
	else
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_MOD_DATE, 1);
	error = BasicDBSetFieldData(mh, fieldID, &date, sizeof(TimerDateAndTime));
	if(error) return (FALSE);


	if (type != T_CARD) {
		/* now the topic title */
		if (trigger == @MTopicTrigger)
			@call MTopicText::MSG_VIS_TEXT_GET_ALL_PTR(string);
		else if (trigger == @STopicTrigger)
			@call STopicText::MSG_VIS_TEXT_GET_ALL_PTR(string);
		else
			@call ETopicText::MSG_VIS_TEXT_GET_ALL_PTR(string);
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1);
		error = BasicDBSetFieldData(mh, fieldID, string, strlen(string));
		if(error) return (FALSE);
		/* and the child database handle */
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TOPIC_DBHAN, 1);
		error = BasicDBSetFieldData(mh, fieldID, &dbHan, sizeof(VMBlockHandle));
		if(error) return (FALSE);
		}
	else  {
		/* now the card title */
		@call CardTitle::MSG_VIS_TEXT_GET_ALL_PTR(string);
		fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1);
		error = BasicDBSetFieldData(mh, fieldID, string, strlen(string));
		if(error) return (FALSE);
		/* and the card data - we'll even save if no data since the
			user may have deleted it all - 11/12/03 jfh */
		len = @call CardText::MSG_VIS_TEXT_GET_TEXT_SIZE();
  //		if (len) {
			dataBlock = @call CardText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
			p_data = MemLock(dataBlock) ;
			fieldID = BasicDBGetFieldID(mh, BDBFHE_CATEGORY, FIELD_CAT_CARD_DATA, 1);
			error = BasicDBSetFieldData(mh, fieldID, p_data, (word)len);
			if(error) return (FALSE);
			MemUnlock(dataBlock) ;
			MemFree(dataBlock) ;
 //			}
		}

	return(TRUE);

}

/***********************************************************************
 *
 * FUNCTION:	AckDBox (char* string1, char* string2, optr ackMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    returns user's Yes or No response
 *
 *
 ***********************************************************************/
word AckDBox (char* string1, char* string2, optr ackMsg)
{

    /* put up an Are you sure box */
	 MemLock (OptrToHandle(ackMsg));
	 if ((UserStandardDialog(0, 0, string2, string1,
				 LMemDeref(ackMsg),
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ) != IC_YES))  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_NO);
	  }
	 else  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_YES);
	  }

}


/***********************************************************************
 *
 * FUNCTION:	NotifyDBox  (char* string1, optr notifyMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    Puts up selected notification box
 *
 *
 ***********************************************************************/
void NotifyDBox (char* string1, optr notifyMsg)
{

	 /* put up a notification box */
	 MemLock (OptrToHandle(notifyMsg));
	 UserStandardDialog(0, 0, 0, string1,
			  LMemDeref(notifyMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
	 MemUnlock (OptrToHandle(notifyMsg));

}

/***********************************************************************
 *
 * FUNCTION:	TypesIndexCallBack
 *
 * CALLED BY:  
 *
 *
 * STRATEGY:   sorts by type of data
 *
 *
 ***********************************************************************/
/*sword _pascal TypesIndexCallBack (MemHandle m1,
						  MemHandle m2,
						  word valueForCallback )
{
 void			*e1, *e2;
 BasicDBFieldID	fieldID;
 word			size1, size2;
 sword		compare;
 char *		string1;
 char *		string2;
 byte	*		type1;
 byte	*		type2;

	e1 = MemDeref(m1);
	e2 = MemDeref(m2);

	if (valueForCallback == VFC_ALPHA) {
		/* get the first rec name info */
/*		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1 );
		size1 = BasicDBGetPtrToFieldData( e1, fieldID, &string1 );

		/* and the second rec name info */
/*		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_TITLE, 1 );
		size2 = BasicDBGetPtrToFieldData( e2, fieldID, &string2 );
                    
		compare = LocalCmpStringsNoSpaceCase(string1, string2,
				( size1 < size2) ? size1 : size2 );
		}

	else {
		/* get the first rec number info */
/*		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1 );
		BasicDBGetPtrToFieldData( e1, fieldID, &type1);

		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_TYPE, 1 );
		BasicDBGetPtrToFieldData( e2, fieldID, &type2);

		if (*type1 > *type2) compare = 1;
		else if (*type1 < *type2) compare = -1;
		else compare = 0;
		}
	  
	return (compare);

}
*/

/***********************************************************************
 *
 * FUNCTION:	CheckForChanges  ()
 *
 * CALLED BY:
 *
 *
 * STRATEGY:	Returns true if no probs, false if a problem
 *
 *
 ***********************************************************************/
Boolean CheckForChanges (word sel, optr doc)
{
 MemHandle		mh;
 word				type;
 VMBlockHandle		vmbh;
 IndexStruct	*indexElement;


	/* see if we need to save any changes to a card */
	if (sel != GIGS_NONE) {
		vmbh = VMFind(g_curDocHan, NullHandle, INDEX_LIST);
		VMLock(g_curDocHan, vmbh ,&mh);
		indexElement = ChunkArrayElementToPtrHandles(
				mh, g_indexCArray, sel, 0);
		type = indexElement->ISS_type;
		VMUnlock(mh);
		if (type == T_CARD)  {
			if (g_cardMayHaveChanged) {
				if (!@call CardTitle::MSG_VIS_TEXT_GET_TEXT_SIZE()) {
					NotifyDBox (0, @AlertCardTitleMsg);
					return (FALSE);
					}
				@call doc::MSG_OLINER_DOC_CHANGE_ITEM(0);
				g_cardMayHaveChanged = FALSE;
				}
			}
		}
	return (TRUE);

}
