
/*
 **************************************************************************
 *  FILE:			fnctns.goc
 *  PROJECT:		Test Generator
 *  DESCRIPTION:	This file has the various functions
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"


/***********************************************************************
 *
 * FUNCTION:	MakeNewRecord (VMBlockHandle whichDB)
 *
 * CALLED BY:  MSG_TGEN_DOCUMENT_OPEN_QA_FORM 
 *
 *
 * STRATEGY:    returns the mh of the record created or 0 if a problem
 *
 *
 ***********************************************************************/
MemHandle MakeNewRecord (FileHandle docFile, VMBlockHandle whichDB)
{
 MemHandle		mh;
 BasicDBError		error;
 BasicDBFieldID	fieldID;
 word			i;


	/* OK create the record */
	mh = BasicDBCreateRecord();
	/* and the fields - the category constants are sequential
	 * so we can do this in a loop */
	for (i = FIELD_CAT_Q_TYPE; i < FIELD_CAT_LAST; i++) {
		error = BasicDBAddField(docFile,
					   whichDB,
					   mh,
					   i,
					   0,
					   0,
					   &fieldID);
		if(error) {
			mh = 0;
			i = FIELD_CAT_LAST;
			NotifyDBox(0, @BDBAddFieldError);
			}
		}

	return (mh);

}

/***********************************************************************
 *
 * FUNCTION:	SaveQandAData (MemHandle openRecMH)
 *
 * CALLED BY:  MSG_TGEN_DOCUMENT_SAVE_ENTRY,
 *
 *
 * STRATEGY:   returns TRUE if everything went OK
 *             (our text fields have been checked)
 *
 ***********************************************************************/
Boolean SaveQandAData (MemHandle openRecMH)
{
 word			i, len, ans;
 byte			type;
 BasicDBFieldID	fieldID;
 BasicDBError		error;
 char					string[MAX_QUESTION_LENGTH+1];
 optr					choice[] = {@MEQAMCQSelectA, @MEQAMCQSelectB, @MEQAMCQSelectC,
										@MEQAMCQSelectD, @MEQAMCQSelectE, @MEQAMCQSelectF};


	/* first get the Q&A type */
	type = @call MEQAQuestionTypeGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	/* and save it */
	fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1);
	error = BasicDBSetFieldData(openRecMH, fieldID, &type, sizeof(byte));
	if(error) return (FALSE);

	/* now the question part */
	@call MEQAQuestionText::MSG_VIS_TEXT_GET_ALL_PTR(string);
	fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1);
	error = BasicDBSetFieldData(openRecMH, fieldID, string, strlen(string));
	if(error) return (FALSE);
	if (type == QTYPE_MC) {
		/* grab and save the choices */
		for (i = 0; i < 6; i++) {
			len = @call choice[i]::MSG_VIS_TEXT_GET_ALL_PTR(string);
			if (len) {
				fieldID = BasicDBGetFieldID(openRecMH,
														 BDBFHE_CATEGORY,
														 FIELD_CAT_MCCHOICE_A + i,
														 1);
				error = BasicDBSetFieldData(openRecMH, fieldID,
														 string, strlen(string));
				if(error) return (FALSE);
				}  /* end of choice text if */
			else break;
			}  /* end of choices for */
		} /* end of MC type if */


	/* now the answer part */
	if (type == QTYPE_MC) {
		ans = @call MEQAMCAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		/* and save it */
		fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
		error = BasicDBSetFieldData(openRecMH, fieldID, &ans, sizeof(word));
		if(error) return (FALSE);
		}
	else if (type == QTYPE_TF) {
		ans = @call MEQATFAnswer::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		/* and save it */
		fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
		error = BasicDBSetFieldData(openRecMH, fieldID, &ans, sizeof(word));
		if(error) return (FALSE);
		}
	else  {
		@call MEQAFillAnswer::MSG_VIS_TEXT_GET_ALL_PTR(string);
		/* and save it */
		fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY, FIELD_CAT_ANSWER, 1);
		error = BasicDBSetFieldData(openRecMH, fieldID, string, strlen(string));
		if(error) return (FALSE);
		/* and any blank lines needed */
		ans = @call MEQAFillLines::MSG_GEN_VALUE_GET_INTEGER_VALUE();
		fieldID = BasicDBGetFieldID(openRecMH, BDBFHE_CATEGORY,
			                                      FIELD_CAT_FREE_ANS_LINES, 1);
		error = BasicDBSetFieldData(openRecMH, fieldID, &ans, sizeof(word));
		if(error) return (FALSE);
		}

	return(TRUE);

}

/***********************************************************************
 *
 * FUNCTION:	TypesIndexCallBack
 *
 * CALLED BY:  BasicDBSaveRecord in MSG_TGEN_DOCUMENT_SAVE_ENTRY
 *
 *
 * STRATEGY:   sorts by type of question
 *
 *
 ***********************************************************************/
sword _pascal TypesIndexCallBack (MemHandle m1,
						  MemHandle m2,
						  word valueForCallback )
{
 void			*e1, *e2;
 BasicDBFieldID	fieldID;
 word			size1, size2;
 sword		compare;
 char *		string1;
 char *		string2;
 byte	*		type1;
 byte	*		type2;

	e1 = MemDeref(m1);
	e2 = MemDeref(m2);

	if (valueForCallback == VFC_ALPHA) {
		/* get the first rec name info */
		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1 );
		size1 = BasicDBGetPtrToFieldData( e1, fieldID, &string1 );

		/* and the second rec name info */
		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_QUESTION, 1 );
		size2 = BasicDBGetPtrToFieldData( e2, fieldID, &string2 );
                    
		compare = LocalCmpStringsNoSpaceCase(string1, string2,
				( size1 < size2) ? size1 : size2 );
		}

	else {
		/* get the first rec number info */
		fieldID = BasicDBGetFieldIDPtr( e1, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1 );
		BasicDBGetPtrToFieldData( e1, fieldID, &type1);

		fieldID = BasicDBGetFieldIDPtr( e2, BDBFHE_CATEGORY, FIELD_CAT_Q_TYPE, 1 );
		BasicDBGetPtrToFieldData( e2, fieldID, &type2);

		if (*type1 > *type2) compare = 1;
		else if (*type1 < *type2) compare = -1;
		else compare = 0;
		}
	  
	return (compare);

}

/***********************************************************************
 *
 * FUNCTION:	SetQADBoxType(byte type)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
 void SetQADBoxType(byte type)
{

	if (type == QTYPE_MC){
		@send MEQAMCQuestionChoice::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}
	else if (type == QTYPE_TF){
		@send MEQAMCQuestionChoice::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}
	else {
		@send MEQAMCQuestionChoice::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAMCAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQATFAnswer::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		@send MEQAFillAnswerGroup::MSG_GEN_SET_USABLE(VUM_NOW);
		}
}

/***********************************************************************
 *
 * FUNCTION:	AckDBox (char* string1, char* string2, optr ackMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    returns user's Yes or No response
 *
 *
 ***********************************************************************/
word AckDBox (char* string1, char* string2, optr ackMsg)
{

    /* put up an Are you sure box */
	 MemLock (OptrToHandle(ackMsg));
	 if ((UserStandardDialog(0, 0, string2, string1,
				 LMemDeref(ackMsg),
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ) != IC_YES))  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_NO);
	  }
	 else  {
	  MemUnlock (OptrToHandle(ackMsg));
	  return(ACK_YES);
	  }

}


/***********************************************************************
 *
 * FUNCTION:	NotifyDBox  (char* string1, optr notifyMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    Puts up selected notification box
 *
 *
 ***********************************************************************/
void NotifyDBox (char* string1, optr notifyMsg)
{

    /* put up a notification box */
	 MemLock (OptrToHandle(notifyMsg));
	 UserStandardDialog(0, 0, 0, string1,
			  LMemDeref(notifyMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
	 MemUnlock (OptrToHandle(notifyMsg));

}


