/*
 **************************************************************************
 *  FILE:			import.goc
 *  PROJECT:		Test Generator
 *  DESCRIPTION:	This file has methods for the import
 *				functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "tgen.goh"
@include "externs.goh"

/*********************************************************************
 *  the globals declared as extern in .goh
 ********************************************************************
*/

//Boolean g_importing = FALSE;

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_IMPORT for TGenDocumentClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *                  is clicked
 *
 *
 *
 ***********************************************************************/

@extern method TGenDocumentClass, MSG_OPEN_IMPORT
{


    /* start out in Document folder */
    @call ImpFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

    /* Open the dialog box */
    @call ImportDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_IMPORT_TEST_DATA for TGenDocumentClass
 *
 * DESCRIPTION:	 Opens the selected file and does the import
 *              
 *     
 *              
 *
 ***********************************************************************/
@extern method TGenDocumentClass, MSG_IMPORT_TEST_DATA
{
char		impName[FILE_LONGNAME_BUFFER_SIZE];
char		impPath[PATH_BUFFER_SIZE];
dword		selFlags, i, impFileSize, numLines, readStart;
FileHandle		impFileHandle;
DiskHandle		impDiskhandle;
word		charRead, lineCount, impRecords, ans, numMC, numTF, numFF;
byte		type;
char		impHeaderBuffer[25], charBuffer[2], tagBuffer[20], countBuffer[13];
char		dataBuffer[MAX_QUESTION_LENGTH+5];
byte		lineID;
Boolean		validFile = FALSE;
Boolean		newTestBank = FALSE;
Boolean		newQuestion = TRUE;
//word		readType = RT_TAG;
MemHandle		recMH;
BasicDBFieldID	fieldID;
MemHandle		vmh;
VMMapStruct		*VMmapPtr;
VMBlockHandle		vmbh;


	if (!g_numQuestions) newTestBank = TRUE;

	/* first get the flags and file name of the selection */
	selFlags = @call ImpFileSel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(impName);

	/* check to see if it's a file - redundant if dbl clicked */
	if (GFS_GET_ENTRY_TYPE(selFlags) != GFSET_FILE)  {
		return;
		}

	/* put up are you sure box if there are questions in the bank */
	if (!newTestBank) {
		if (AckDBox(impName, 0, @ImportMsg) == ACK_NO) return;
		}
	  
	/* get the file's path and disk handle */
	@call ImpFileSel::MSG_GEN_PATH_GET(impPath, sizeof(impPath));
	impDiskhandle = @call ImpFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();

	/* save our TGen file directory */
	FilePushDir();

	/* and set the imp file dir  - FileSel doesn't do this */
	FileSetCurrentPath(impDiskhandle, impPath);

	/* dismiss the file selector box now */
	@send ImportDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

	/* and open the imp file */
	impFileHandle = FileOpen(impName, (FILE_ACCESS_R | FILE_DENY_W));
	/* if impFileHandle is NULL then there was an error */
	if (!impFileHandle)  {
		NotifyDBox(0, @ImpOpenErrMsg);
		FilePopDir();
		return;  /* bail out */
		}

	/* put up progress box */
	@call ImportProg::MSG_GEN_INTERACTION_INITIATE();
	@send TGenApp::MSG_GEN_APPLICATION_MARK_BUSY();

	/* OK let's read the file...
	 * FileRead returns -1 if there was an error */
	/* first get the file size */
	impFileSize = FileSize(impFileHandle);
	/* set the file read start */
	readStart = 0;
	/* first check for BTG file header */
	charRead = FileRead(impFileHandle, impHeaderBuffer, 21, FALSE);
	if (charRead == 21)  {  /* good read */
		readStart = 21;
		/* add null to end of buffer */
		impHeaderBuffer[21] = 0;
		if (strcmp(impHeaderBuffer, "[TGEN-DATA-FILE-V1]\r\n") == 0) {
			/* this starts a valid BTG file */
			validFile = TRUE;
			}
		impHeaderBuffer[0] = 0;  /* re-init the buffer */
		} /* end of good read if */
	else  {  /* read error */
		NotifyDBox(0, @ImpReadErrMsg);
		/* close the file */
		if (FileClose(impFileHandle, FALSE))  NotifyDBox(0, @ImpCloseErrMsg);
		/* mark app not busy */
		@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		/* and restore the TG file dir */
		FilePopDir();
		return;
		}  /* end of bad read else */

	if (!validFile) {
		/* not a valid TG file */
		NotifyDBox(0, @ImpBadTypeErrMsg);
		/* close the file */
		if (FileClose(impFileHandle, FALSE)) NotifyDBox(0, @ImpCloseErrMsg);
		/* mark app not busy */
		@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		/* and restore the TG file dir */
		FilePopDir();
		return;
		}   /* end of not valid TGen if */

	/* start the PROGRESS BOX counting here */
	impRecords = 0;
	numMC = 0;
	numTF = 0;
	numFF = 0;
	@call IPExamine::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	@call IPCount::MSG_GEN_SET_USABLE(VUM_NOW);

	/* OK now read file one char at a time ------------------- */
	lineCount = 0;
	/* start the reading loop */
	for (i = readStart; i < impFileSize; i++) {
		charRead = FileRead(impFileHandle, charBuffer, 1, FALSE);
		/* make sure it's a good read */
		if (charRead == 1)  {  /* good read */
			if ((charBuffer[0] != '\r') && (charBuffer[0] != '\n'))  {
				/* not CR/LF so add to buffer */
				dataBuffer[lineCount] = charBuffer[0];
				lineCount++;
				}
			else if (charBuffer[0] == '\r')  {
				/* We're at the end of the line - do something with the info */
				/* grab the identifier & clean up line */
				lineID = dataBuffer[0];
				dataBuffer[lineCount] = 0;
				lineCount = 0;
				/* and see if we need to create a new record */
				if (newQuestion) {
					/* create a new record */
					recMH = MakeNewRecord(pself->GDI_fileHandle,
													 pself->TGDI_bankDBHan);
					newQuestion = FALSE;
					}
				/* take action based on lineID */
				switch (lineID) {
					case 'T': /* question type */
						fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY,
																	FIELD_CAT_Q_TYPE, 1);
						/* check for type - we'll not check the whole string
						 * just the first letter will be enough */
						if ((dataBuffer[2] == 'm') || (dataBuffer[2] == 'M')) {
							type = QTYPE_MC;
							numMC++;
							}
						else if ((dataBuffer[2] == 't') || (dataBuffer[2] == 'T')) {
							type = QTYPE_TF;
							numTF++;
							}
						else  {
							type = QTYPE_FILL;
							numFF++;
							}
						BasicDBSetFieldData(recMH, fieldID, &type, sizeof(byte));
						break;
					case 'Q': /* question field */
						fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY,
																	FIELD_CAT_QUESTION, 1);
						BasicDBSetFieldData(recMH, fieldID, &dataBuffer[2],
																		strlen(dataBuffer)-2);
						break;
					case 'A': /* multiple choices */
					case 'B':
					case 'C':
					case 'D':
					case 'E':
					case 'F':
						/* do the choices */
						ans = lineID - 'A';
						fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY,
														FIELD_CAT_MCCHOICE_A + ans, 1);
						BasicDBSetFieldData(recMH, fieldID, &dataBuffer[2],
																		strlen(dataBuffer)-2);
						break;
					case 'W': /* answer field */
						fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY,
																	FIELD_CAT_ANSWER, 1);
						if (type != QTYPE_FILL)  {
							switch (dataBuffer[2]) {
								case 'A': ans = MC_SELECT_A; break;
								case 'a': ans = MC_SELECT_A; break;
								case 'B': ans = MC_SELECT_B; break;
								case 'b': ans = MC_SELECT_B; break;
								case 'C': ans = MC_SELECT_C; break;
								case 'c': ans = MC_SELECT_C; break;
								case 'D': ans = MC_SELECT_D; break;
								case 'd': ans = MC_SELECT_D; break;
								case 'E': ans = MC_SELECT_E; break;
								case 'e': ans = MC_SELECT_E; break;
								case 'T': ans = TF_TRUE; break;
								case 't': ans = TF_TRUE; break;
								case 'F':
									if (type == QTYPE_MC) ans = MC_SELECT_F;
									else ans = TF_FALSE;
									break;
								case 'f':
									if (type == QTYPE_MC) ans = MC_SELECT_F;
									else ans = TF_FALSE;
									break;
								}
							BasicDBSetFieldData(recMH, fieldID, &ans, sizeof(word));
							}
						else  BasicDBSetFieldData(recMH, fieldID, &dataBuffer[2],
																		strlen(dataBuffer)-2);
						break;
					case 'L': /* extra lines field */
						fieldID = BasicDBGetFieldID(recMH, BDBFHE_CATEGORY,
															FIELD_CAT_FREE_ANS_LINES, 1);
						UtilAsciiToHex32(&dataBuffer[2], &numLines);
						ans = (word)numLines;
						BasicDBSetFieldData(recMH, fieldID, &ans, sizeof(word));
						break;
					case 'X': /* end of record tag */
						/* store the record */
						BasicDBSaveRecord(pself->GDI_fileHandle,
														  pself->TGDI_bankDBHan,
														  recMH,
														  TypesIndexCallBack,
														  0);
						impRecords++;
						/* see if we're maxed out */
						if ((impRecords + g_numQuestions) == MAX_NUM_QUESTIONS) {
							NotifyDBox(0, @ErrMsgImpMaxRecords);
							/* bail out */
							i = impFileSize+1;
							}
						newQuestion = TRUE;
						/* tell the user our progress */
						UtilHex32ToAscii(countBuffer,
												(sdword) impRecords,
												UHTAF_NULL_TERMINATE);
						@call IPCount::MSG_VIS_TEXT_REPLACE_ALL_PTR(countBuffer, 0);
						break;
					} /* end of lineID switch */
				}  /* end of end of line else */
			} /* end of good read if */

		else  {  /* read error */
			NotifyDBox(0, @ImpReadErrMsg);
			/* close the file */
			if (FileClose(impFileHandle, FALSE))  NotifyDBox(0, @ImpCloseErrMsg);
			/* mark app not busy */
			@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
			/* and restore the TG file dir */
			FilePopDir();
			return;
			}  /* end of bad read else */

		} /* end of reading for loop */

	/* mark app not busy */
	@send TGenApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

	/* close the file */
	if (FileClose(impFileHandle, FALSE)) NotifyDBox(0, @ImpCloseErrMsg);

	/* and restore the TG file dir */
	FilePopDir();

	g_numQuestions += impRecords;
	pself->TGDI_numMCQuestions += numMC;
	pself->TGDI_numTFQuestions += numTF;
	pself->TGDI_numFreeQuestions += numFF;
	/* and update the ui */
	@send MESummaryDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(g_numQuestions);
	UtilHex32ToAscii(tagBuffer, (dword)pself->TGDI_numMCQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBMCNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(tagBuffer, 0);
	UtilHex32ToAscii(tagBuffer, (dword)pself->TGDI_numTFQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBTFNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(tagBuffer, 0);
	UtilHex32ToAscii(tagBuffer, (dword)pself->TGDI_numFreeQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBFINumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(tagBuffer, 0);
	UtilHex32ToAscii(tagBuffer, (dword)g_numQuestions,
							  UHTAF_NULL_TERMINATE);
	@call MESBTotNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(tagBuffer, 0);
	/* save the new numbers */
	vmbh = VMGetMapBlock(pself->GDI_fileHandle);
	VMmapPtr = VMLock(pself->GDI_fileHandle, vmbh, &vmh);
	VMmapPtr->VMMS_numQuestions = g_numQuestions;
	VMmapPtr->VMMS_numMCQuestions = pself->TGDI_numMCQuestions;
	VMmapPtr->VMMS_numTFQuestions = pself->TGDI_numTFQuestions;
	VMmapPtr->VMMS_numFreeQuestions = pself->TGDI_numFreeQuestions;
	VMDirty(vmh);
	VMUnlock(vmh);

}

