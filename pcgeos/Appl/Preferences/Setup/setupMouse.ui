/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1990 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  Graphical Setup -- Mouse Selection and  Testing
 * FILE:	  setupMouse.ui
 *
 * AUTHOR:  	  Adam de Boor: Oct  5, 1990
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	10/5/90	  ardeb	    Initial version
 *
 * DESCRIPTION:
 *	Definitions for selecting/testing the mouse driver
 *
 *
 * 	$Id: setupMouse.ui,v 1.2 98/05/02 22:32:56 gene Exp $
 *
 ***********************************************************************/

#if DO_DBCS
#define CHARS wchar
#define OPENDBLQ C_DOUBLE_TURNED_COMMA_QUOTATION_MARK
#define CLOSEDBLQ C_DOUBLE_COMMA_QUOTATION_MARK
#else
#define CHAR char
#define OPENDBLQ C_QUOTEDBLLEFT
#define CLOSEDBLQ C_QUOTEDBLRIGHT
#endif

start	Strings, notDetachable;

chunk	mouseNotTested = "Please test your mouse before proceeding.";
chunk 	noMouseGEO = "Unable to load the mouse driver: cannot locate file.";
chunk	loadMouseFailed = "Unable to load the mouse driver: reason unknown.";
chunk	noSuchSerialMouse = "Unable to load the mouse driver. Perhaps the mouse is on a different port?";
chunk	noSuchMouse = "Unable to load the mouse driver: No such device exists.";
chunk	noSuchGenericMouse = "Unable to load the mouse driver. Perhaps the mouse software isn't fully installed?";
chunk	portExistethNot = "The serial port you've chosen does not seem to exist. Please choose a different port.";

end	Strings;

start	Interface;
/*******************************************************************************

	MouseSelectScreen

*******************************************************************************/

MouseSelectScreen = SetupScreen {
	visibility = dialog;
	children = MouseSelectText, MouseSelectList;
	enterAction = MSG_SETUP_MOUSE_SELECTED, process;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, MouseSelectScreen;
	instructions = ENTERToContinue, ESCToReturnToPrev, F3ToExitToDOS;
	hints = { SETUP_FULL_SCREEN_HINTS }
}

MouseSelectText = SetupTextDisplay {
	text = data {
		CHARS 	"What kind of mouse do you have? Choose one from the following list.\r"
		CHARS	"\r"
		CHARS	"If you're not sure, check the box the mouse came in, or look at the label on its bottom. If you have no idea, choose ", OPENDBLQ, "No idea.", CLOSEDBLQ, "\r"
		CHARS	"\r"
		CHARS	"Press the UP and DOWN arrows to scroll through the list one item at a time. Press PgUp and PgDn to scroll more items at once.  Typing the first few letters of a mouse name will position the list at the first mouse whose name begins with those letters."
		CHARS	0
	}
}

MouseSelectList = SetupDeviceList {
	tocFlags = default +extendedDeviceDrivers;
	tokenChars = "'MOUS'";
	selection = 0;
	hints = {
		ATTR_GEN_PATH_DATA {
			GenFilePath <SP_MOUSE_DRIVERS,0>
		},
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_DEFAULT_FOCUS,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "mouse",0
		},
		/* Driver key is hard-coded */
		ATTR_GEN_INIT_FILE_KEY {
			char "device",0
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_WIDE_CHAR_WIDTHS, 25>
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word	6
		},

	/* ASSUMPTION:  If user picks first entry, (selection 0),
	they've selected NO MOUSE.  If this changes, change the .asm
	file*/

		ATTR_PREF_TOC_LIST_EXTRA_ENTRY_1 {
			PrefTocExtraEntry <MouseNoDevice,
					MouseNoDriver>
		},
		ATTR_PREF_TOC_LIST_EXTRA_ENTRY_1 {
			PrefTocExtraEntry <MouseGenericDevice,
				MouseGenericDriver,
				mask MEI_GENERIC	>
		},
		ATTR_PREF_TOC_LIST_EXTRA_ENTRY_1 {
			PrefTocExtraEntry <MouseDOSMouse,
				MouseGenericDriver,
				mask MEI_GENERIC >
		},
		ATTR_PREF_TOC_LIST_EXTRA_ENTRY_1 {
			PrefTocExtraEntry <MouseWin95Mouse,
				MouseGenericDriver,
				mask MEI_GENERIC >
		},
		ATTR_PREF_TOC_LIST_INFO_KEY {
			char "info",0
		}
	}
}

chunk MouseGenericDevice = "No idea";
chunk MouseGenericDriver = "GENMOUSE.GEO";
chunk MouseNoDevice = "None, or add later";
chunk MouseNoDriver = "None";
chunk MouseWin95Mouse = "Windows mouse support already installed";
chunk MouseDOSMouse = "DOS mouse driver already installed";

/******************************************************************************

	MouseSerialPortScreen

******************************************************************************/

MouseSerialPortScreen = SetupScreen {
	visibility = dialog;
	children = MouseSerialPortText, MouseSerialPortList;
	hints = {
	  HINT_KEEP_ENTIRELY_ONSCREEN,
	  HINT_EXTEND_WINDOW_TO_BOTTOM_RIGHT,
	  HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
	    word mask SWSS_RATIO or PCT_0 ; x = 0
	    word mask SWSS_RATIO or PCT_0  ; y = 0
	  },
	  HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	  HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
	  HINT_CENTER_CHILDREN_HORIZONTALLY,
	  HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY
	}
	enterAction = MSG_SETUP_MOUSE_PORT_SELECTED, process;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, MouseSerialPortScreen;
	f10Action = MSG_GEN_INTERACTION_INITIATE, MouseSelectScreen;
	instructions = ENTERToContinue, ESCToReturnToPrev, F10ToChangeMouse;
}

MouseSerialPortText = SetupTextDisplay {
	text = data {
		CHARS	"You have indicated that you have a serial mouse.  Which communication port have you plugged it into?\r"
		CHARS	"\r"
		CHARS	"If you don't know, just press ENTER.  You'll have an opportunity to test this choice in a moment."
		CHARS	0
	}
}

MouseSerialPortList = GenItemGroup {
	moniker = "Serial port:";
/*	attributes = type exclusive, listMethod, listMethodIsData;
	action = MSG_SETUP_SET_MOUSE_PORT, process;*/
	destination = process;
	children = SerialPort1, SerialPort2, SerialPort3, SerialPort4;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_SETUP_SET_MOUSE_PORT
		},
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_DEFAULT_FOCUS
	}
}

SerialPort1 = GenItem {
	moniker = "COM1";
/*	curState = isOn, userIsOn;*/
	identifier = SERIAL_COM1;
}

SerialPort2 = GenItem {
	moniker = "COM2";
	identifier = SERIAL_COM2;
}

SerialPort3 = GenItem {
	moniker = "COM3";
	identifier = SERIAL_COM3;
}

SerialPort4 = GenItem {
	moniker = "COM4";
	identifier = SERIAL_COM4;
}


/*******************************************************************************

	MouseIntScreen

*******************************************************************************/

MouseIntScreen = SetupScreen {
	visibility = dialog;
	children = MouseIntText, MouseIntRange;
	hints = { SETUP_FULL_SCREEN_HINTS }
	enterAction = MSG_SETUP_MOUSE_INT_SELECTED, process;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, MouseIntScreen;
	f10Action = MSG_GEN_INTERACTION_INITIATE, MouseSelectScreen;
	instructions = ENTERToContinue, F10ToChangeMouse, ESCToReturnToPrev,
		F3ToExitToDOS;
}

MouseIntText = SetupTextDisplay {
	text = data {
		CHARS	"You must now specify the interrupt level of your mouse or of the COM port it is plugged into. The number below is most likely correct.\r"
		CHARS	"\r"
		CHARS	"If you don't know the interrupt level, just press ENTER.  You'll have an opportunity to test this choice in a moment.\r"
		CHARS	"\r"
		CHARS	"Note: the interrupt level of your mouse should not conflict with any of your other devices, such as COM1 (level 4) or COM2 (level 3).  Refer to the manual that came with your mouse if you have further questions.\r"
		CHARS	"\r"
		CHARS	"Use the UP and DOWN arrows to change the interrupt level shown in the box below."
		CHARS	0
	}
	hints = {
		  HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 500>
			/*SpecHeight <SST_LINES_OF_TEXT, 2>*/
		  }
	}
}

MouseIntRange = GenValue {
	value = 5;
	minimum = 2;
	maximum = 7;
	increment = 1;
	hints = {HINT_VALUE_NAVIGATE_TO_NEXT_FIELD_ON_RETURN_PRESS}
}

/*******************************************************************************

	GenMouseScreen

*******************************************************************************/

GenMouseScreen = SetupScreen {
	visibility = dialog;
	children = GenMouseText;
	hints = { SETUP_FULL_SCREEN_HINTS }
	enterAction = MSG_GEN_INTERACTION_INITIATE, MouseTestScreen;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, GenMouseScreen;
	f10Action = MSG_GEN_INTERACTION_INITIATE, MouseSelectScreen;
	instructions = ENTERToContinue, ESCToReturnToPrev, F10ToChangeMouse,
		F3ToExitToDOS;
}

GenMouseText = SetupTextDisplay vardataReloc {
	hints = {
		INIT_FILE_CATEGORY(ui),
		INIT_FILE_KEY(productName),
		ATTR_SETUP_TEXT_DEFAULT_PARAM {
			I_OPTR	DefaultProductName
		}
	}
	text = data {
		CHARS	"\x01 will work with any mouse that came with a Microsoft-compatible driver. You must make sure that you have fully installed the mouse, as it won't work if you haven't loaded the mouse driver software (usually called MOUSE.COM or MOUSE.SYS).\r"
		CHARS	"\r"
		CHARS	"The installation manual that came with the mouse will tell you how to install the driver software.  If this software isn't correctly installed, the pointer (a small arrow that moves on the screen when you move the mouse) will not appear when you press ENTER to continue."
		CHARS	0
	}
}

/*******************************************************************************

	MouseTestScreen

*******************************************************************************/

MouseTestScreen = SetupScreen {
	visibility = dialog;
	children = MouseTestText, MouseTestTrigger;
	hints = { SETUP_FULL_SCREEN_HINTS }
	initiateAction = MSG_SETUP_MOUSE_TEST_ON_SCREEN, process;
	enterAction = MSG_SETUP_MOUSE_TEST_COMPLETE, process;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, MouseTestScreen;
	f10Action = MSG_GEN_INTERACTION_INITIATE, MouseSelectScreen;
	instructions = ENTERToContinue, ESCToReturnToPrev, F10ToChangeMouse,
		F3ToExitToDOS;
}

/* without storage set to large, gets
OFFSET_TOO_LARGE_FOR_SMALL_OBJECT.  with, gets VM_BAD_BLK_HAN
*/

/*********
MouseTestText = SetupTextDisplay {
	text = data {
		CHARS 	"Move the mouse until the pointer is over the box that reads Click Here To Test.  Then click the left mouse button.\r"
		CHARS	"\r"
		CHARS	"Possible problems:  If your mouse is hooked up, but there is no pointer on the screen, or the pointer does not move, you may have ....\r"
		CHARS	0
	}
}
*********/

MouseTestText = SetupTextDisplay vardataReloc {
	text = data {
mtestStart	label	CHARS
		CHARS 	"Move the mouse until the pointer (the small arrow) is over the box that reads ",
			OPENDBLQ, "Click here to test", CLOSEDBLQ,
			" and press and release the left mouse button.  The box will flash and the computer will beep.\r"
		CHARS	"\r"
		CHARS	"Possible problems:    If your mouse is hooked up, but there is no pointer on the screen, or the pointer does not move, you may have:\r"
mtestTable	label	CHARS
		CHARS	"1.\tSelected the wrong type of mouse. Press F10 to make another choice. If you have installed the mouse driver software supplied with your mouse, try choosing ", OPENDBLQ, "MOUSE.COM or MOUSE.SYS.", CLOSEDBLQ, "\r"
		CHARS	"2.\tChosen the wrong COM port or interrupt level for your mouse. Press ESC to go back and change your selections.\r"
		CHARS	"3.\tSelected ",
			OPENDBLQ, "No idea", CLOSEDBLQ,
			" but have not yet installed the driver software. Press F3 and install the software. When you are done, type ",
			OPENDBLQ, 01,  CLOSEDBLQ,
			" to proceed with this setup."
		CHARS	0
	}
	hints = {
		ATTR_GEN_TEXT_MULTIPLE_PARA_ATTR_RUNS {
			word MouseTestParaAttrRuns
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, 588>
			SpecHeight <SST_LINES_OF_TEXT, 8>
		},
		INIT_FILE_CATEGORY(setup),
		INIT_FILE_KEY(batchFileName),
		ATTR_SETUP_TEXT_DEFAULT_PARAM {
			UN_OPTR batchFileName
		}
	}
}


chunk MouseTestParaAttrRuns = data {
    RUN_ARRAY_HEADER(3, MouseTestResultsParaAttrs)
    TextRunArrayElement \
	TRAE(mtestStart, mtestStart, TR_REGULAR_RULER),
	TRAE(mtestTable, mtestStart, TR_OUTDENTED_RULER),
	TRAE_END
}

MouseTestTrigger = GenTrigger {
	moniker = "Click here to test";
	action = MSG_SETUP_MOUSE_TEST, process;
	/* Please don't give it the focus... */
	hints = { HINT_TRIGGER_DESTRUCTIVE_ACTION }
}

chunk MouseTestResultsParaAttrs = data {
aDRE_base	label	byte
    PARA_ATTR_ELEMENT_ARRAY_HEADER(2)
aDRE_element0   word (_aDRE_element0 - aDRE_base)
aDRE_element1   word (_aDRE_element1 - aDRE_base)
; Regular paragraph w/no tabs & left-justified paragraph
_aDRE_element0 PARA_ATTR_JUST_LEFT_RIGHT_PARA_TABS(2, J_LEFT, 0, 0, 0, 0)
; Out-dented ruler for numbered paragraphs.
_aDRE_element1 PARA_ATTR_JUST_LEFT_RIGHT_PARA_TABS(2, J_LEFT, 8/2, 0, 0, 0)
}

/******************************************************************************

	NoMouseScreen

******************************************************************************/

NoMouseScreen = SetupScreen {
	visibility = dialog;
	children = NoMouseText;
	hints = { SETUP_FULL_SCREEN_HINTS }
	enterAction = MSG_SETUP_MOUSE_TEST_COMPLETE, process;
	escapeAction = MSG_SETUP_SCREEN_DISMISS, NoMouseScreen;
	f10Action = MSG_GEN_INTERACTION_INITIATE, MouseSelectScreen;
	instructions = ENTERToContinue, ESCToReturnToPrev, F10ToChangeMouse,
		F3ToExitToDOS;
}

/* jfh 12/2/03 - this text doesn't localize but all the rest in this file does.
	It seems that ResEdit doesn't like text with more than one substitution
	(\x01 or ,01,) in it. */
NoMouseText = SetupTextDisplay vardataReloc {
	text = data {

/*		CHARS	"\x01 was designed to work best with a mouse and "
*/		CHARS	"Breadbox Ensemble was designed to work best with a mouse and "
		CHARS	"we strongly recommend that you use one.\r"
		CHARS	"\rThis option has been provided for you to view the environment "
		CHARS	"without insisting that you install a mouse. However, certain features of \x01 will be unavailable to you until you install one.\r"
		CHARS	0
	}
	hints = {
		INIT_FILE_CATEGORY(ui),
		INIT_FILE_KEY(productName),
		ATTR_SETUP_TEXT_DEFAULT_PARAM {
			I_OPTR	DefaultProductName
		}
	}
}

end	Interface;
