/**********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:	Mail
 * MODULE:		
 * FILE:	class.goh
 * 
 * AUTHOR:	Gene Anderson
 * 
 ****************************************************************************/

@class MailProcessClass, GenProcessClass;

@message MailError MSG_MAIL_PROCESS_SEND_MESSAGES();
/*
 * Send Messages
 * Pass:   none
 * Return: none
 */

@message MailError MSG_MAIL_PROCESS_RECEIVE_MESSAGES();
/*
 * Receive Messages
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_PROCESS_SEND_RECEIVE_SETUP();
/*
 * Common setup for send and/or receive
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_PROCESS_DO_MAIL(MemHandle iabh);
/*
 * Handle an InternetAppBlock
 * Pass:   iabh - handle of InternetAppBlock (0 if none)
 * Return: none
 */

@message MailError MSG_MAIL_PROCESS_SEND_MESSAGE_RANGE(word start, word count);
/*
 * Send a range of messages
 * Pass:   start - first message (0 for all)
 *         count - # of messages (0xffff for all)
 * Return: none
 */

@message void MSG_MAIL_PROCESS_SEND_MESSAGE_NOW(word messageNum);
/*
 * Send specified outbox message, or send all in outbox.
 * Pass:   messageNum - message number in outbox
 * Return: none
 */

@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG)
							MSG_EMAIL_PROC_ADDR_BOOK_SEL_NOTIFICATION;

@message void MSG_EMAIL_PROC_SAVE_SELECTED_ADDR_BOOK();

@message (GEN_BOOLEAN_GROUP_STATUS_MSG)
							MSG_MAIL_PROCESS_DEFAULT_ACCT_BOOLEAN_STATUS;


@endc

@class MailAppClass, GenApplicationClass;

@message void MSG_MAIL_APP_LAUNCH_ADDRESS_BOOK();
/*
 * Launch the Address Book application
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_APP_LAUNCH_BROWSER(MemHandle iab);
/*
 * Launch the browser
 * Pass:   iab - InternetAppBlock with IADT_URL
 * Return: none
 */

@message void MSG_MAIL_APP_LAUNCH_APPLICATION(GeodeToken geodeToken, MemHandle launchHan, EventHandle msg, optr errMessage);
/*
 * Launch the application for an attachment.
 * Pass:   geodeToken - geode token
 *         launchHan - handle of AppLaunchBlock
 *         msg - handle of recorded message (0 for none)
 *         errMessage - optr of error message if failure
 * Return: none
 */

@message void MSG_MAIL_APP_ADD_ADDRESS_ENTRY(MemHandle addrBlock);
/*
 * Launch the address book to add or update an address entry
 * Pass:   addrBlock - handle of block with RolodexUpdateEntryField
 * Return: none
 */

@message void MSG_MAIL_APP_DEFAULT_ACCOUNT_ERROR();
/*
 * Special handling for error creating or accessing the default account
 * Pass:   none
 * Return: none (exits app)
 */

    @instance byte MAI_launchedAddr;

@endc

@class MailPrimary2Class, GenPrimaryClass;

@message void MSG_MAIL_PRIMARY_OPEN();
/*
 * Open a mail primary and bring it to the front
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_PRIMARY_UPDATE_LONG_TERM_MONIKER(MemHandle subjHan);
/*
 * Update the long term moniker of the primary
 * Pass:   subjHan - handle of header block
 * Return: subjHan - free'd
 */

@endc

/**
 ** FolderListClass: list of mail folders
 **/

@class FolderListClass, GenDynamicListClass;

@message word MSG_FOLDER_LIST_GET_NUM_FOLDERS();
/*
 * Get the number of folders 
 * Pass:   none
 * Return: # of folders
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FOLDER_LIST_QUERY_MONIKER;
/*
 * Get the moniker for the specified list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

@message word MSG_FOLDER_LIST_GET_NUM_MESSAGES(word folderNum);
/*
 * Get the number of messages in the specified folder
 * Pass:   none
 * Return: # of messages
 */

@message MemHandle MSG_FOLDER_LIST_GET_FOLDER_NAME(word folderNum);
/*
 * Get the number of messages in the specified folder
 * Pass:   folderNum - # of folder
 * Return: handle of buffer with folder name
 */

@message word MSG_FOLDER_LIST_GET_FOLDER_NUM(TCHAR *folderName);
/*
 * Get the number of the folder with the name passed in folderName
 * Pass:   folderName = the name of the folder
 * Return: the number of the folder or -1 for none
 */


@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FOLDER_LIST_FOLDER_SELECTED;
/*
 * A folder has been selected
 * Pass:   selection - item #
 *         numSelections - # of selections
 *         stateFlags - GenItemGroupStateFlags
 * Return: none
 */

@message void MSG_FOLDER_LIST_CREATE_NEW_FOLDER();
/*
 * Create a new folder from the "New Folder" dialog
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_DELETE_CURRENT_FOLDER();
/*
 * Delete the currently selected folder
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_EMPTY_TRASH();
/*
 * Empty the trash
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_RENAME_CURRENT_FOLDER();
/*
 * Rename the currently selected folder
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_CLEAN_FOLDERS();
/*
 * Delete msglist files and 0 length messages
 * from all of the folders.
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_INIT_MSGLIST();
/* 
 * Make sure that the msg list is built out in 
 * all of the folder on startup.
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_INIT_NAME_ARRAY();
/*
 * Build the folder array of names
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_LIST_FREE();
/*
 * clean up the folder array, etc.
 * Pass:   none
 * Return: none
 */

@message word MSG_FOLDER_LIST_GET_NUM_UNREAD_MESSAGES(word folderNum);
/*
 * Get the number of unread messages in the specified folder
 * Pass:   none
 * Return: # of messages
 */

    @instance optr FLI_folderArray;


@endc

/**
 ** FolderRenameClass: dialog for renaming folders
 **/

@class FolderRenameDialogClass, GenInteractionClass;

@endc

/**
 ** MailComposerClass: dialog for composing, editing and sending mail
 **/

@class MailComposerClass, MailPrimary2Class;

typedef word MailComposerFlags;
#define MCF_HAVE_FORWARDED_ATTACHMENTS 1

@message Boolean MSG_MAIL_COMPOSER_RESET();
/*
 * Reset the UI, etc. for the composer
 * Pass:   none
 * Return: FALSE it not ready for reset
 */

@message void MSG_MAIL_COMPOSER_NEW_MESSAGE();
/*
 * Init for a new message
 * Pass:   none
 * Return: none
 */

@message Boolean MSG_MAIL_COMPOSER_SEND_MESSAGE(word *messageNum);
/*
 * Create a message from the UI and send it
 * Pass:   messageNum - ptr to storage for message number in outbox
 *                      (can be null to not return info)
 * Return: TRUE if error
 */

@message void MSG_MAIL_COMPOSER_SAVE_MESSAGE();
/*
 * Save a message draft into the Drafts folder
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_THROW_AWAY_MESSAGE();
/*
 * Throw away a message draft into the Trash folder
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_SIGN();
/*
 * Add the signature to the end of the message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_EDIT_MESSAGE(MemHandle fileName);
/*
 * Edit the specified message file
 * Pass:   fileName - block w/name of file
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_REPLY_MESSAGE(MemHandle fileName, MailComposeType type);
/*
 * Reply to the currently selected message
 * Pass:   fileName - block w/name of file
 *         type - MailComposeType (reply, reply all)
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_FORWARD_MESSAGE(MemHandle fileName);
/*
 * Forward the currently selected message
 * Pass:   fileName - block w/name of file
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_DONE_WITH_FILE(FileHandle fileHan);
/*
 * Finished with message file
 * Pass:   fileHan - file handle
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_SEND_BUG_MAIL();
/*
 * Send a bug report to Global PC
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_MAIL_TO(MemHandle mth);
/*
 * Start a new message with the specified address
 * Pass:   mth - handle of InternetAppBlock with address
 * Return: none
 */

@message Boolean MSG_MAIL_COMPOSER_CHECK_FOR_SAVE();
/*
 * See if we need to save any existing message
 * Pass:   none
 * Return: TRUE if OK to proceed with new message
 */

@message void MSG_MAIL_COMPOSER_AUTO_SIGN();
/*
 * Automatically insert the signature if appropriate
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_SEND_MESSAGE_NOW();
/*
 * Create a message from the UI and send it now
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_COMPOSER_SEND_MESSAGE_LATER();
/*
 * Create a message from the UI and send it later
 * Pass:   none
 * Return: none
 */

    @vardata FileLongName ATTR_MAIL_COMPOSER_FILE_NAME;
    @vardata FileLongName ATTR_MAIL_COMPOSER_DIR_NAME;

    @instance MailComposerFlags MCI_flags;

@endc

/**
 ** MailFieldTextClass: text object for To: Subject:, etc. fields
 **/
@class MailFieldTextClass, GenTextClass;

@message void MSG_MAIL_FIELD_TEXT_SET_NEXT_FIELD(optr nextField);
/*
 * (re)set the next field for navigation
 * Pass:   nextField - optr of next object
 * Return: none
 */

    @instance optr MFTI_nextField = 0;
    @instance MailFieldTextFlags MFTI_flags = 0;

@endc

/**
 ** MailListClass: list of mail messages in a folder
 **/

@class MailListClass, GenDynamicListClass;

@message void MSG_MAIL_LIST_SET_FOLDER(word folderNum);
/*
 * Set the current folder for the mail list
 * Pass:   folderNum - # of the folder
 * Return: none
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_MAIL_LIST_QUERY_MONIKER;
/*
 * Get the moniker for the specified message list entry
 * Pass:   list - optr ot list
 *         item - item #
 * Return: none
 */

@message word MSG_MAIL_LIST_GET_FILE_NAME(word msgNum);
/*
 * Get the file name for the specified message number
 * Pass:   msgNum - message #
 * Return: handle of buffer with file name
 */

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_MAIL_LIST_MESSAGE_SELECTED;
/*
 * A message has been selected
 * Pass:   selection - item #
 *         numSelections - # of selection
 *         stateFlags - GenItemGroupStateFlags
 * Return: none
 */

@message void MSG_MAIL_LIST_MARK_MESSAGE(MessageFlags flag, word msgNum);
@message void MSG_MAIL_LIST_UNMARK_MESSAGE(MessageFlags flag, word msgNum);
/*
 * Set or Unset the message flags
 * Pass:   Message Flag, index of message
 * Return: none
 */

@message void MSG_MAIL_LIST_READ_MESSAGE();
/*
 * Read the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_EDIT_MESSAGE();
/*
 * Edit the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_OPEN_MESSAGE();
/*
 * Read or edit the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_REPLY_MESSAGE(MailComposeType type);
/*
 * Reply to the currently selected message
 * Pass:   type - MailComposeType (reply, reply all)
 * Return: none
 */

@message FileHandle MSG_MAIL_LIST_OPEN_FILE(word msgNum);
/*
 * Open the specified file
 * Pass:   msgNum - message #
 * Return: file handle (0 for error)
 */

@message void MSG_MAIL_LIST_DELETE_MESSAGE();
/*
 * Throw away the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_RECOVER_MESSAGE();
/*
 * Recover the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_PREVIOUS();
/*
 * Select and read the previous message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_NEXT();
/*
 * Select and read the next message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_READ_MESSAGE_NUM(word msgNum);
/*
 * Select and read the specfied message
 * Pass:   msgNum - message #
 * Return: none
 */

@message word MSG_MAIL_LIST_GET_NUM_MESSAGES();
/*
 * Get the number of messages in the list
 * Pass:   none
 * Return: # of messages
 */

@message void MSG_MAIL_LIST_FORWARD_MESSAGE();
/*
 * forward the currently selected message
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_RESCAN();
/*
 * rescan the message files
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_SORT();
/*
 * sort the message files
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_RESORT();
/*
 * resort the message files and redisplay them
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_RESHOW();
/*
 * reshow the list, either all messages or only unread
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LIST_MOVE_MESSAGE(word destFolder);
/*
 * move the currently selected message to the specified folder
 * Pass:   destFolder - destination folder #
 * Return: none
 */

@message void MSG_MAIL_LIST_ADD_ADDRESS_ENTRY();
/*
 * Add or update an address book entry for the current address
 * Pass:   none
 * Return: none
 */

@message VMFileHandle MSG_MAIL_LIST_GET_VMF();
/*
 * Pass:   none
 * Return: MLI_vmf
 */

@message VMBlockHandle MSG_MAIL_LIST_GET_MESSAGE_ARRAY();
/*
 * Pass:   none
 * Return: MLI_messageArray
 */

@message void MSG_MAIL_LIST_CLOSE_MESSAGE_ARRAY();
/*
 * If one exists 
 * Pass:   none
 * Return: MLI_messageArray
 */

@message word MSG_MAIL_LIST_GET_FOLDER_NUM();
/*
 * If one exists 
 * Pass:   none
 * Return: MLI_messageArray
 */

@message optr MSG_MAIL_LIST_GET_INDEX_ARRAY();
/*
 * Return the index array optr
 * Pass:   none
 * Return: locked chunk array optr
 */

@message word MSG_MAIL_LIST_GET_LAST_SELECTION();
/*
 * get the last selected message
 * Pass:   none
 * Return: last selected message or GIGS_NONE
 */

@message void MSG_MAIL_LIST_SET_SORT_ORDER(SortMessageByType order);
/*
 * set the message sort order
 * Pass:   order - SortMessageByType
 * Return: none
 */

@message void MSG_MAIL_LIST_RESET_SELECTION(word sel);
/*
 * set or reset the message list selection
 * Pass:   sel - selection to set
 * Return: none
 */

@message void MSG_MAIL_LIST_SEND_SELECTED_MESSAGE();
/*
 * Send the last selected message
 * Pass:   none
 * Return: none
 */

    @instance word MLI_folderNum = GIGS_NONE;
/* 
 * MLI_messageArray is a huge array of all the message list 
 * entries for the current directory
 */
    @instance VMBlockHandle MLI_messageArray = NULL;
/*
 * MLI_vmf is the vmf file handle to the vm file containing
 * the MLI_messageArray
 */
    @instance VMFileHandle MLI_vmf = NULL;

/*
 * MLI_indexHandle is the VMBlockHandle to the chunk array that 
 * contains the index into the MLI_messageArray. 
 */
    @instance VMBlockHandle MLI_indexHandle = NULL;  
    @instance VMBlockHandle MLI_indexChunk = NULL;  

@endc

/**
 ** AccountListClass: list of accounts
 **/

@class AccountListClass, GenDynamicListClass;

@message word MSG_ACCOUNT_LIST_GET_NUM_ACCOUNTS();
/*
 * Get the number of accounts
 * Pass:   none
 * Return: # of accounts
 */

@message MemHandle MSG_ACCOUNT_LIST_GET_ACCOUNT_NAME(word accountNum);

/*
 * Get the name of the Nth account
 * Pass:   accountNum - # of the account
 * Return: handle of buffer with name
 */

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_ACCOUNT_LIST_ACCOUNT_SELECTED;
/*
 * An account has been selected
 * Pass:   selection - item #
 *         numSelections - # of selections
 *         stateFlags - GenItemGroupStateFlags
 * Return: none
 */

@message MemHandle MSG_ACCOUNT_LIST_GET_DIR();
/*
 * Get the top-level directory for the current account
 * NOTE: sizeof(buffer) = sizeof(PathName)
 * Pass:   none
 * Return: handle of account directory
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ACCOUNT_LIST_QUERY_MONIKER;
/*
 * Get the moniker for the specified list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_NEW_ACCOUNT();
/*
 * Create a new account
 * Pass:   none
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_RENAME_ACCOUNT();
/*
 * Rename an account
 * Pass:   none
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_DELETE_ACCOUNT();
/*
 * Delete the currently selected account
 * Pass:   none
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_SAVE_ACCOUNT();
/*
 * Save the currently selected account
 * Pass:   none
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_DONE();
/*
 * Save the currently selected account and close the dialog
 * Pass:   none
 * Return: none
 */

@message sword MSG_ACCOUNT_LIST_GET_ACCOUNT_INDEX(TCHAR *account);
/*
 * Get the list index of the specified account
 * Pass:   account - ptr to account name
 * Return: index # of account (GIGS_NONE if not found)
 */

@message MemHandle MSG_ACCOUNT_LIST_GET_SMTP();
@message MemHandle MSG_ACCOUNT_LIST_GET_POP3();
@message MemHandle MSG_ACCOUNT_LIST_GET_USER_ACCOUNT();
@message MemHandle MSG_ACCOUNT_LIST_GET_USER_PASSWORD();
/*
 * Get the associated field from the current account
 * Pass: nothing
 * Return: MemHandle with field inside
 */

@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_ACCOUNT_LIST_INTERVAL_OPTIONS_CHANGED;
/*
 * the check mail on intervals options have changed
 * Pass:   selectedBooleans
 *         indeterminateBooleans
 *         modifiedBooleans
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_INIT_NAME_ARRAY();
/*
 * Build the account array of names
 * Pass:   none
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_REBUILD(sword selection);
/*
 * Rebuild the accounts list
 * Pass:   selection - account to select (-1 for default)
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_UPDATE_TABS(word which);
/*
 * update the main account tabs
 * Pass:   UT_BUILD, UT_DELETE, UT_ADD
 * Return: none
 */

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ACCOUNT_LIST_TAB_APPLY;
/*
 * account tab clicked
 * Pass:   (word selection, numSelections, flags)
 * Return: none
 */

@message void MSG_ACCOUNT_LIST_FREE();
/*
 * clean up the account array, etc.
 * Pass:   none
 * Return: none
 */

    @instance optr ALI_accountArray;

@endc

/**
 ** MailReaderClass: dialog for reading and respond to mail
 **/

@class MailReaderClass, MailPrimary2Class;

@message void MSG_MAIL_READER_READ_MESSAGE(MemHandle fileName);
/*
 * Read the specified message file
 * Pass:   fileName - handle of block w/ file name
 * Return: none
 */

@message void MSG_MAIL_READER_DELETE_MESSAGE();
/*
 * Throw away the current message
 * Pass:   none
 * Return: none
 */


@message void MSG_MAIL_READER_RECOVER_MESSAGE();
/*
 * Recover the current message from the trash
 * Pass:   none
 * Return: none
 */

@endc

/**
 ** MailSendReceiveClass
 **/
@class MailSendReceiveClass, GenInteractionClass;

@message void MSG_MSR_SEND_MESSAGES();
/*
 * Send all messges in the Outbox
 * Pass:   none
 * Return: none
 */

@message void MSG_MSR_RECEIVE_MESSAGES();
/*
 * Check for new mail
 * Pass:   none
 * Return: none
 */

@message void MSG_MSR_SEND_AND_RECEIVE_MESSAGES_IF_CONNECTED();
/*
 * Send messages in Outbox and check for new mail if connected
 * Pass:   none
 * Return: none
 */

@message Boolean  MSG_MSR_SHOULD_STOP();
/* 
 * returns true if send and receive should stop
 * Pass:   none
 * Return: none
 */

@message void  MSG_MSR_SET_DISMISS_MODE(Boolean dismissable);
/* 
 * tell the dialog box it is ok or not to dismiss when the your
 * clicks the button
 * Pass:   dismissable - TRUE if dismissable
 * Return: none
 */

@message void MSG_MSR_SET_REF_COUNT(word refCount);
/*
 * Set the reference count for the dialog; will go off screen when zero
 * Pass:   refCount - reference count
 * Return: none
 */

@message void MSG_MSR_DEC_REF_COUNT();
/*
 * Decrement the reference count for the dialog; will go off screen when zero
 * Pass:   none
 * Return: none
 */

@message void MSG_MSR_INIT(word refCount);
/*
 * Initialize the send receive dialog
 * Pass:   refCount - initial reference count
 * Return: none
 */

@message Boolean MSG_MSR_CHECK_SERVER_SETUP(Boolean reportError);
/*
 * See if the server info, etc. is set up before we send or receive
 * Pass:   reportError - TRUE to report error
 * Return: TRUE - server is setup
 */

@message void MSG_MSR_REPORT_ERROR(MailError mailError);
/*
 * Report an error
 * Pass:   mailError - MailError
 * Return: none
 */

@message void MSG_MSR_UPDATE_STATUS(TCHAR *status);
/*
 * Update the status line
 * Pass:   status - ptr to status text
 * Return: none
 */

@message void MSG_MSR_SET_TIMER(byte interval, MailCheckOptions opts);
/*
 * Start a timer to check for mail
 * Pass:   interval - timer interval (0 for none)
 *         opts - MailCheckOptions
 * Return: none
 */

@message void MSG_MSR_COUNTDOWN_FOR_CHECK();
/*
 * countdown one minute for checking mail
 * Pass:   none
 * Return: none
 */

@message void MSG_MSR_SEND_MESSAGE_RANGE(word start, word count);
/*
 * Send the specified message(s)
 * Pass:   start - first message (0 for all)
 *         count - # of messages (0xffff for all)
 * Return: none
 */

@message void MSG_MSR_SEND_MESSAGE_NOW(word messageNum);
/*
 * Send specified outbox message, or send all in outbox.
 * Pass:   messageNum - message number in outbox
 * Return: none
 */


@instance Boolean MSR_stop = FALSE;
@instance Boolean MSR_okToDismiss = TRUE;
@instance word    MSR_refCount = 0;
@instance byte    MSR_interval = 0;
@instance MailCheckOptions MSR_options;
@instance TimerHandle MSR_timer = 0;
@instance word    MSR_timerID = 0;
@instance Boolean MSR_connected = FALSE;
@instance byte    MSR_countdown = 0;

@endc

/**
 ** MailWarningClass
 **/
@class MailWarningClass, GenInteractionClass;
@endc

/**
 ** ShowToolbarClass: for hide/show toolbar
 **/
@class ShowToolbarClass, GenTriggerClass;

@message void MSG_SHOW_TOOLBAR_SHOW_TOOLBAR();
@message void MSG_SHOW_TOOLBAR_HIDE_TOOLBAR();

    @vardata optr ATTR_SHOW_TOOLBAR_SHOW_MONIKER;
    @reloc ATTR_SHOW_TOOLBAR_SHOW_MONIKER, 0, optr;
    @vardata optr ATTR_SHOW_TOOLBAR_HIDE_MONIKER;
    @reloc ATTR_SHOW_TOOLBAR_HIDE_MONIKER, 0, optr;

    @instance optr STI_toolbar;
    @instance ShowToolbarOptions STI_mask;

@endc


/**
 ** AttachListClass: list of email attachments
 **/
@class AttachListClass, GenDynamicListClass;

@message void MSG_ATTACH_LIST_ATTACH_FILE();
/*
 * Attach a file to the current message
 * Pass:   none
 * Return: none
 */

@message (GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_ATTACH_LIST_FILE_SELECTED;
/*
 * A file has been selected in the Attach dialog
 * Pass:   entryNum - entry #
 *         entryFlags - GenFileSelectorEntryFlags
 * Return: none
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ATTACH_LIST_QUERY_MONIKER;
/*
 * Get the moniker for the specified list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

@message word MSG_ATTACH_LIST_GET_NUM_FILES();
/*
 * Get the # of files currently attached
 * Pass:   none
 * Return: # of files
 */

@message void MSG_ATTACH_LIST_UPDATE_LIST();
/*
 * Update the attach file list
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_APPEND_ATTACHMENTS(FileHandle fileHan);
/*
 * Append the attachment files to the message file
 * Pass:   fileHan - handle of file
 * Return: none
 */

@message void MSG_ATTACH_LIST_RESET();
/*
 * Reset the attach list to no attachments
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_READ_ATTACHMENTS(FileHandle fileHan);
/*
 * Read attachment files from the message file
 * Pass:   fileHan - handle of file
 * Return: none
 */

@message void MSG_ATTACH_LIST_ENSURE_ARRAY();
/*
 * Make sure there is an attachment array
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_OPEN_FILE();
/*
 * Open the currently selected attachment file
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_SAVE_FILE();
/*
 * Save the currently selected attachment file
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_ATTACH_FILE_PATH(TCHAR *fileName);
/*
 * Attach a file with full path to the array
 * Pass:   fileName - ptr to fullpath to file
 * Return: none
 */

@message void MSG_ATTACH_LIST_DELETE_FILES();
/*
 * Delete any attachment files
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_DO_SAVE();
/*
 * Save the attachment into the directory and name specified
 * Pass:   none
 * Return: none
 */

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_ATTACH_LIST_ATTACHMENT_SELECTED;
/*
 * An attachment has been selected
 * Pass:   selection - item #
 *         numSelections - # of selections
 *         stateFlags - GenItemGroupStateFlags
 * Return: none
 */

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_ATTACH_LIST_COMPOSE_ATTACHMENT_SELECTED;
/*
 * An attachment has been selected in the mail composer
 * Pass:   selected - item #
 *         numSelections - # of selections
 *         stateFlags = GenItemGroupStateFlags
 */

@message void MSG_ATTACH_LIST_UNATTACH_FILE();
/*
 * Remove the currently selected attachment file from the list
 * Pass:   none
 * Return: none
 */

@message void MSG_ATTACH_LIST_FREE();
/*
 * clean up the attachment array, etc.
 * Pass:   none
 * Return: none
 */


    @instance MemHandle ALI_array;
    @instance word ALI_lastCheckedItem = GIGS_NONE;
    @instance Boolean ALI_lastCheckedResult;
    @instance GeodeToken ALI_lastCheckedToken;
@endc

/**
 ** AddressDialogClass: list of email addresses from NewDex
 **/

@class AddressDialogClass, GenInteractionClass;

@message word MSG_ADDRESS_DIALOG_GET_ITEM_MONIKER(TCHAR *buffer,
						  word bufSize,
						  word identifier);
/*
 * Get the moniker for the specified address list entry
 * Pass:   buffer - dest buffer
 *         bufSize - size of dest buffer
 *         identifier - item #
 * Return: # chars in returned string
 */

@message void MSG_ADDRESS_DIALOG_UPDATE_LIST();
/*
 * Update the address list
 * Pass:   none
 * Return: none
 */

@message void MSG_ADDRESS_DIALOG_INIT(ChunkHandle textObj, ChunkHandle mkr);
/*
 * Initialize: set appropriate moniker and and bring on screen
 * Pass:   textObj - chunk of dest text object (in same block)
 *         mkr - chunk of visMoniker (in same block)
 * Return: none
 */

@message void MSG_ADDRESS_DIALOG_PASTE_ADDRESSES();
/*
 * Paste the selected addresses
 * Pass:   none
 * Return: none
 */

@message void MSG_ADDRESS_DIALOG_EXPAND_ALIASES(optr textObj);
/*
 * Expand any aliases in the the specified text object
 * Pass:   textObj - optr of dest text object
 * Return: none
 */

@message Boolean MSG_ADDRESS_DIALOG_FIND_ITEM(word *itemPtr,
					      const TCHAR *str);
/*
 * Find the item specified by the passed string, else next item
 * Pass:   itemPtr - ptr to return item
 *         str - ptr to string
 * Return: TRUE if found, *itemPtr = item #
 *         FALSE if not, *itemPtr = item after
 */

@message void MSG_ADDRESS_DIALOG_FREE();
/*
 * Clean up the address array, etc.
 * Pass:   none
 * Return: none
 */

    @instance MemHandle ADI_addressArray;
    @instance ChunkHandle ADI_textObj;

@endc


/**
 ** AddressListClass: actual list of email addresses from NewDex,
 ** used to support typing first letter of list entry for navigation
 **/

@class AddressListClass, PrefDynamicListClass;
@endc


/**
 ** MailSearchClass: SearchReplaceControl for searching messages
 **/

@class MailSearchClass, SearchReplaceControlClass;

@message void MSG_MAIL_SEARCH_AGAIN();
/*
 * search using the same pattern again
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_SEARCH_STOP();
/*
 * stop searching
 * Pass:   none
 * Return: none
 */

@message Boolean MSG_MAIL_SEARCH_SHOULD_STOP();
/*
 * should we stop searching?
 * Pass:   none
 * Return: none
 */

    @instance MemHandle MSI_searchInfo;
    @instance Boolean MSI_stop = FALSE;

@endc

/**
 ** MailSearcherClass: object that actually does the searching
 **/

@class MailSearcherClass, MetaClass;

@message Boolean MSG_MAIL_SEARCHER_GET_NEXT_MESSAGE();
/*
 * get the next message for searching
 * Pass:   none
 * Return: FALSE - no next message, i.e., wrapped
 */

@message Boolean MSG_MAIL_SEARCHER_LOAD_TEXT(optr textObj);
/*
 * load the specified text object with the current message
 * Pass:   textObj - text object to use
 * Return: FALSE - unable to load message
 */

@message Boolean MSG_MAIL_SEARCHER_INIT_FOR_SEARCH();
/*
 * initialize for a search
 * Pass:   none
 * Return: FALSE - unable to load message
 */

@message void MSG_MAIL_SEARCHER_RESET_SEARCH_OFFSET();
/*
 * reset the starting search offset
 * Pass:   none
 * Return: none
 */
 

    @instance word      MSI_curFolder;
    @instance word      MSI_curMessage;
    @instance word      MSI_startFolder;
    @instance word      MSI_startMessage;
    @instance dword     MSI_curOffset;

@endc

/**
 ** MailLargeTextClass: VisLargeTextClass object for printing, etc.
 **/

typedef word MailLargeTextFlags;
#define MLTF_DO_NOT_SAVE_OPTIONS  0x0001

@class MailLargeTextClass, VisLargeTextClass;

@message void MSG_MAIL_LARGE_TEXT_OPEN(optr content, VisTextStorageFlags storage);
/*
 * initialize storage, etc.
 * PASS:   content - optr of content, if any
 *         storage - VisTextStorageFlags for storage
 * RETURN: none
 */

@message void MSG_MAIL_LARGE_TEXT_CLOSE(optr content);
/*
 * remove storage, etc.
 * PASS:   content - optr of content, if any
 * RETURN: none
 */

@message void MSG_MAIL_LARGE_TEXT_SET_HEADER(MemHandle header);
/*
 * Set the header for printing
 * PASS:   header - MemHandle of block with text
 * RETURN: none
 */
@message void MSG_MAIL_LARGE_TEXT_RECALC_TAB_WIDTH();
/*
 * Recalculate the tab width based on the font and pointsize
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_LARGE_TEXT_READ_MESSAGE(MemHandle hdrHan, FileHandle fileHan);
/*
 * Read a message file
 * Pass:   hdrHan - handle of block with header data
 *         fileHan - file handle
 * Return: none
 */

    @vardata char[] ATTR_MAIL_LARGE_TEXT_FONT_KEY;
    @vardata char[] ATTR_MAIL_LARGE_TEXT_POINTSIZE_KEY;

    @instance MemHandle MLTI_header;
    @instance word MLTI_tabWidth;
    @instance word MLTI_tabEnd;
    @instance MailLargeTextFlags MLTI_flags;

@endc

/**
 ** MailReadTextClass: MailLargeTextClass with special behavior
 **/
@class MailReadTextClass, MailLargeTextClass;

@message void MSG_MAIL_READ_TEXT_ZOOM_IN();
/*
 * Zoom in (i.e., set a larger pointsize)
 * Pass:   none
 * Return: none
 */

@message void MSG_MAIL_READ_TEXT_ZOOM_OUT();
/*
 * Zoom out (i.e., set a smaller pointsize)
 * Pass:   none
 * Return: none
 */

@endc


/**
 ** MailComposeTextClass: MailLargeTextClass with special behavior
 **/

@class MailComposeTextClass, MailLargeTextClass;
@endc


/**
 ** PasswordTextClass: text that can't be quick copied
 **/

@class PasswordTextClass, GenTextClass;
@endc

/**
 ** FolderMoveClass: move message dialog
 **/
@class FolderMoveClass, GenInteractionClass;

@message void MSG_FOLDER_MOVE_DIALOG_INIT();
/*
 * Initialize the move message dialog and bring it on screen
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_MOVE_MESSAGE();
/*
 * Move the currently selected message to another folder
 * Pass:   none
 * Return: none
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FOLDER_MOVE_QUERY_MONIKER;
/*
 * Get the moniker for the specified list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

@endc

/**
 ** FolderRecoverClass: recover message dialog
 **/
@class FolderRecoverClass, GenInteractionClass;

@message void MSG_FOLDER_RECOVER_DIALOG_INIT();
/*
 * Initialize the recover message dialog and bring it on screen
 * Pass:   none
 * Return: none
 */

@message void MSG_FOLDER_RECOVER_MESSAGE();
/*
 * Recover the currently selected message to another folder
 * Pass:   none
 * Return: none
 */

@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FOLDER_RECOVER_QUERY_MONIKER;
/*
 * Get the moniker for the specified list entry
 * Pass:   list - optr of list
 *         item - item #
 * Return: none
 */

@endc

/**
 ** EnableTextClass: text object that enables/disables an object
 ** based on whether there is text or not
 **/

@class EnableTextClass, GenTextClass;
    @instance optr ETI_object;
@endc



/**
 ** MailContentClass: content for VisLargeText objects
 **/

@class MailContentClass, GenContentClass;
@endc

/**
 ** AccountDialogClass: dialog box with AccountListClass
 **/

@class AccountDialogClass, GenInteractionClass;

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_ACCOUNT_DIALOG_OPTION_GROUP_SELECTED;
/*
 * An option group has been selected
 * Pass:     selection - item #
 *           numSelections - # of selections
 *           stateFlags - GenItemGroupStateFlags
 * Return:   none
 */

@endc

/**
 ** MailListHeaderClass: header above message list
 **/

@class MailListHeaderClass, GenInteractionClass;
@endc
