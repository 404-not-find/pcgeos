/***********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:	  Mail
 * MODULE:	  Mail
 * FILE:	  mailStyles.goc
 *
 * DESCRIPTION:
 *	Handle mail styles
 *
 * 	$Id$
 *
 ***********************************************************************/

@include "mail.goh"
@include "class.goh"
@include "global.goh"
#include <resource.h>


/**************************************************************
 *          
 * FUNCTION:        ReloadBuffer
 * DESCRIPTION:     Reload the buffer and shift any remainders
 *
 * PASS:            buf - ptr to buffer (MESSAGE_BUF_LEN + sizeof(TCHAR))
 *                  textObj - object to place text into
 *                  startOff - ptr to starting offset
 *                  endOff - ptr to ending offset
 *                  state - FilterState
 * RETURN:          # of bytes read
 *                  buf - contents updated as needed
 ***************************************************************/
word
ReloadBuffer(FileHandle fh, optr textObj, TCHAR *buf,
	     word *startOff, word *endOff, FilterState state, FilterMode mode)
{
    word numBytes = *endOff-*startOff, nb;

    switch (state) {
    case FS_IN_BODY:
	/*
	 * if we're in the body at the end of the buffer, flush it
	 */
	if (numBytes > 0 && !(mode & FM_IN_STYLE_SHEET)) {
	    @call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+*startOff, numBytes);
	}
	*endOff = 0;
	numBytes = 0;
	break;
    default:
	/*
	 * else we're in a URL or tag, move things around for next time
	 */
	memcpy(buf, buf+*startOff, numBytes);
	*endOff = numBytes;
	break;
    }
    nb = FileRead(fh, buf+*endOff, MESSAGE_BUF_LEN-numBytes, FALSE);
    *startOff = 0;
    *endOff += nb;
    buf[*endOff] = 0;
    return(nb);
}


/**************************************************************
 *          
 * FUNCTION:        FilterMailStyles
 * DESCRIPTION:     read the message body from the file and parse styles
 *
 * PASS:            textObj - text object to append to
 *                  buf - ptr to buffer
 *                  startOff - offset to start
 *                  endOff - offset of end (NULL)
 *                  state - ptr to return value
 *                  type - MailStyleType (rich or HTML)
 *                  
 * RETURN:          buf - contents updated as needed
 *                  startOff - updated as needed
 *                  endOff - updated as needed
 ***************************************************************/

#define IN_TEXT(mde) ((mde & FM_FOUND_HTML) && !(mde & FM_IN_STYLE_SHEET))

TCHAR fmsSpace[] = " ";

void
FilterMailStyles(optr textObj, TCHAR *buf,
		 word *startOff, word *endOff,
		 FilterState *state, MailStyleType type, FilterMode *mode)
{
    word i = *startOff, so = *startOff, numBytes;

    numBytes = *endOff - *startOff;
    while (numBytes) {
	switch (*state) {
@ifdef MAIL_STYLES_SUPPORT
	case FS_ADDED_CR:
            *state = FS_IN_BODY;
	    if (buf[i] == '\r') {
		/*
		 * if we just added a CR, don't add another
		 */
		so = i+1;
		break;
	    }
        /* fall through into FS_IN_BODY */
@endif
	case FS_IN_BODY:
	    if (buf[i] == '<') {
		*state = FS_TAG_START;
	    } else if (type == MST_HTML && IN_TEXT(*mode)) {
		if (buf[i] == '&') {
		    *state = FS_CHAR_START;
		} else if (buf[i] == '\r') {
		    /*
		     * hit a CR; flush any body text before it and 
		     * replace it with a space
		     */
		    if (i-so>1 && IN_TEXT(*mode)) {
			@call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+so, i-so);
		    }
		    @call textObj::MSG_VIS_TEXT_APPEND_PTR(fmsSpace, 0);
		    so = i+1;
		}
	    }
	    break;
	case FS_IN_TAG:
	    if (buf[i] == '>') {
		/*
		 * not the end of a tag if a space before it
		 */
		if (i > 0 && buf[i-1] == ' ') {
		    break;
		}
@ifdef MAIL_STYLES_SUPPORT
                buf[i] = 0; /* NULL-terminate the tag */
		if (type == MST_HTML) {
		    *state = ProcessHTMLTag(textObj, buf+so, i-so);
		    /*
		     * don't start recording things until <html>
		     */
		    if (*state == FS_FOUND_HTML) {
			*mode |= FM_FOUND_HTML;
			*state = FS_IN_BODY;
		    } else if (*state == FS_IN_STYLE_SHEET) {
			*mode ^= FM_IN_STYLE_SHEET;
			*state = FS_IN_BODY;
		    }
		} else {
		    *state = ProcessRichTag(textObj, buf+so, i-so);
		}
@else
		*state = FS_IN_BODY;
@endif
		so = i+1;
	    }
	    break;
	case FS_TAG_START:
	    if (buf[i] == '<') {
		/*
		 * double << is not a tag start; ideally skip one of them
		 * but if there are more than two it does odd things
		 */
		*state = FS_IN_BODY;
	    } else if (buf[i] != ' ') {
		/*
		 * we've started a tag. flush any text, not including
		 * the tag start.
		 */
		*state = FS_IN_TAG;
		if (i-so > 1 && IN_TEXT(*mode)) {
		    @call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+so, i-so-1);
		}
		so = i;
	    } else {
		*state = FS_IN_BODY;
	    }
	    break;
@ifdef MAIL_STYLES_SUPPORT
	case FS_CHAR_START:
	    if (buf[i] == ' ') {
		*state = FS_IN_BODY;
	    } else {
		/*
		 * we've started a char. flush any text, not including the
		 * char start.
		 */
		*state = FS_IN_CHAR;
		if (i-so > 1 && IN_TEXT(*mode)) {
		    @call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+so, i-so-1);
		}
		so = i;
	    }
	    break;
	case FS_IN_CHAR:
	    if (buf[i] == ';') {
		*state = ProcessHTMLChar(textObj, buf+so, i-so);
		so = i+1;
	    } else if (LocalIsPunct(buf[i]) || LocalIsSpace(buf[i])) {
		/*
		 * if we hit punctuation (besides ;) or a space,
		 * we're not in a character constant so drop back to the body
		 */
		*state = FS_IN_BODY;
	    }
	    break;
@endif
	}
	i++;
	numBytes--;
    }
    *startOff = so;
    *endOff = i;
}



/**************************************************************
 *          
 * FUNCTION:        FilterURLs
 * DESCRIPTION:     read the message body from the file and
 *                  check for URLs
 *
 * PASS:            textObj - text object to append to
 *                  buf - ptr to buffer
 *                  startOff - offset to start
 *                  endOff - offset of end (NULL)
 *                  state - ptr to FilterState
 *                  
 * RETURN:          buf - contents updated as needed
 *                  off - number of bytes still in buffer
 *
 ***************************************************************/

@ifdef PARSE_URLS

static const TCHAR furlTag[] = "http://";
/*added plain www.  jfh 9/9/02  */
static const TCHAR furlShortTag[] = "www.";
static const TCHAR fmailtoTag[] = "mailto:";

#define URL_TAG_LENGTH   7
#define URL_SHORT_TAG_LENGTH   4
#define MAILTO_TAG_LENGTH 7

void
FilterURLs(optr textObj, TCHAR *buf,
	   word *startOff, word *endOff,
	   FilterState *state)
{
    word i = *startOff, so = *startOff, numBytes;
    register TCHAR oc;
    sword noSuccess;

    numBytes = *endOff - *startOff;
    while (numBytes) {
	switch (*state) {
	case FS_IN_BODY:
	    /*
	     * check for a URL
	     */
	    oc = buf[i];
		 if (oc == 'h' || oc == 'H') {
		noSuccess = LocalCmpStringsNoCase(buf+i, furlTag, URL_TAG_LENGTH);
		 }
		 else if (oc == 'w' || oc == 'W') {
		noSuccess = LocalCmpStringsNoCase(buf+i, furlShortTag, URL_SHORT_TAG_LENGTH);
		 }
		 else if(oc == 'm' || oc == 'M') {
		noSuccess = LocalCmpStringsNoCase(buf+i, fmailtoTag, MAILTO_TAG_LENGTH);
	    }
	    else
		noSuccess = 1;
	    if (!noSuccess) {
		/*
		 * flush the buffer
		 */
		if (i-so > 0) {
		    @call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+so, i-so);
		}
		/*
		 * mark the start of the URL
		 */
		*state = FS_IN_URL;
		so = i;
	    }
	    break;
	case FS_IN_URL:
	    /*
	     * check for end of a URL
	     */
	    if (LocalIsSpace(buf[i]) || buf[i] == '"' || buf[i] == '>' || buf[i] == ')' || buf[i] == ']') {
		/*
		 * mark the start of the URL
		 */
		oc = buf[i];
		buf[i] = 0;
		ProcessURLStart(textObj, buf+so, i-so);
		/*
		 * flush the URL
		 */
		@call textObj::MSG_VIS_TEXT_APPEND_PTR(buf+so, i-so);
		/*
		 * mark the end of the URL
		 */
		buf[i] = oc;
		ProcessURLEnd(textObj, buf+i, 1);
		*state = FS_IN_BODY;
		so = i;
	    }
	    break;
	}
	i++;
	numBytes--;
    }
    *startOff = so;
    *endOff = i;
}

@else

void
FilterURLs(optr textObj, TCHAR *buf,
	   word *startOff, word *endOff,
	   FilterState *state)
{
    @call textObj::MSG_VIS_TEXT_APPEND_PTR(buf + *startOff, *endOff - *startOff);
    *startOff = 0;
}
@endif
