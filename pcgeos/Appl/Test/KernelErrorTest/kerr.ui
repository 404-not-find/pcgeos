/*
 *
 * Project:	PC GEOS
 * Module:	Test program
 * File:	kerr.ui
 *
 * Author:	Tony Requist
 *
 *	This file contains the user Interface description for this
 * appilication.
 *
 *	$Id: kerr.ui,v 1.1 97/04/04 16:58:21 newdeal Exp $
 *
 */

#include "generic.uih"

start Interface;

MyApp = GenApplication {
	moniker = list {
		"Kernel Error Test";
	}
	children = MyPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = MyPrimary;
}

MyPrimary = GenPrimary {
	children =
		ExceptionMenu, ErrorMenu, NotifyGroup;
	hints = {
		ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE,
		HINT_SIZE_WINDOW_AS_DESIRED
	}
}

/***********************************************************/

/*
 *	Misc exceptions
 */

ErrorMenu = GenInteraction {
	moniker = "Errors";
	visibility = popup;
	children =
		HandleTableFullTrigger,
		IllegalHandleTrigger,
		FatalErrorTrigger,
		UnrecoverableTrigger,
		LowOnHandlesTrigger,
		MemoryFullTrigger;
}

HandleTableFullTrigger = GenTrigger {
	moniker = "handle table is full";
	action = MSG_KERR_HANDLE_TABLE_FULL, process;
}

IllegalHandleTrigger = GenTrigger {
	moniker = "bad handle passed to system";
	action = MSG_KERR_ILLEGAL_HANDLE, process;
}

/***/

FatalErrorTrigger = GenTrigger {
	moniker = "Fatal error in";
	action = MSG_KERR_FATAL_ERROR, process;
}

UnrecoverableTrigger = GenTrigger {
	moniker = "Unrecoverable error in FileRead";
	action = MSG_KERR_UNRECOVERABLE_ERROR, process;
}

LowOnHandlesTrigger = GenTrigger {
	moniker = "Low On Handles";
	action = MSG_KERR_LOW_ON_HANDLES, process;
}

MemoryFullTrigger = GenTrigger {
	moniker = "Memory Full (allow 40 seconds)";
	action = MSG_KERR_MEMORY_FULL, process;
}

/***********************************************************/

/*
 *	Processor exceptions
 */

ExceptionMenu = GenInteraction {
	moniker = "Exceptions";
	visibility = popup;
	children = ExceptionEmulatedMenu, ExceptionRealMenu;
}

ExceptionEmulatedMenu = GenInteraction {
	moniker = "Emulated";
	visibility = popup;
	children =
		Divide0Trigger, OverflowTrigger, BoundTrigger, FPUTrigger,
		SingleStepTrigger, IllegalInstTrigger,
	        ProtectionFaultTrigger, StackExceptionTrigger;
}

Divide0Trigger = GenTrigger {
	moniker = "Divide by zero";
	action = MSG_KERR_DIVIDE_0, process;
}

OverflowTrigger = GenTrigger {
	moniker = "Arithmetic overflow";
	action = MSG_KERR_OVERFLOW, process;
}

BoundTrigger = GenTrigger {
	moniker = "Array index out of bounds";
	action = MSG_KERR_BOUND, process;
}

FPUTrigger = GenTrigger {
	moniker = "Coprocessor/memory parity error";
	action = MSG_KERR_FPU, process;
}

SingleStepTrigger = GenTrigger {
	moniker = "Single-step complete";
	action = MSG_KERR_SINGLE_STEP, process;
}

IllegalInstTrigger = GenTrigger {
	moniker = "Illegal instruction executed";
	action = MSG_KERR_ILLEGAL_INSTRUNCTION, process;
}

ProtectionFaultTrigger = GenTrigger {
	moniker = "Protection fault";
	action = MSG_KERR_PROTECTION_FAULT, process;
}

StackExceptionTrigger = GenTrigger {
	moniker = "Stack exception";
	action = MSG_KERR_STACK_EXCEPTION, process;
}

ExceptionRealMenu = GenInteraction {
	moniker = "Real";
	visibility = popup;
	children = Divide0RealTrigger, OverflowRealTrigger, BoundRealTrigger,
		   SingleStepRealTrigger, BreakpointRealTrigger,
		   IllegalInstRealTrigger, ProtectionFaultRealTrigger,
		   StackExceptionRealTrigger;
}

Divide0RealTrigger = GenTrigger {
	moniker = "Divide by zero";
	action = MSG_KERR_DIVIDE_0_REAL, process;
}

OverflowRealTrigger = GenTrigger {
	moniker = "Arithmetic overflow";
	action = MSG_KERR_OVERFLOW_REAL, process;
}

BoundRealTrigger = GenTrigger {
	moniker = "Array index out of bounds";
	action = MSG_KERR_BOUND_REAL, process;
}

SingleStepRealTrigger = GenTrigger {
	moniker = "Single-step complete";
	action = MSG_KERR_SINGLE_STEP_REAL, process;
}

BreakpointRealTrigger = GenTrigger {
	moniker = "Breakpoint hit";
	action = MSG_KERR_BREAKPOINT_REAL, process;
}

IllegalInstRealTrigger = GenTrigger {
	moniker = "Illegal instruction executed";
	action = MSG_KERR_ILLEGAL_INSTRUCTION_REAL, process;
}

ProtectionFaultRealTrigger = GenTrigger {
	moniker = "Protection fault";
	action = MSG_KERR_PROTECTION_FAULT_REAL, process;
}

StackExceptionRealTrigger = GenTrigger {
	moniker = "Stack exception";
	action = MSG_KERR_STACK_EXCEPTION_REAL, process;
}

/************************************************************/

/*
 * General SysNotify testing
 */
NotifyGroup = GenInteraction {
	moniker = "SysNotify";
	visibility = popup;
	children = NotifyFlags, Notify1Trigger, Notify2Trigger;
}

NotifyFlags = GenBooleanGroup {
	moniker = "SysNotify flags:";
	children = RetryFlag, ExitFlag, AbortFlag, ContinueFlag, RebootFlag,
		BizarreFlag;
	applyMsg = MSG_KERR_SET_NOTIFY_FLAGS;
	destination = process;
}

RetryFlag = GenBoolean {
	moniker = "Retry";
	identifier = "mask SNF_RETRY";
}

AbortFlag = GenBoolean {
	moniker = "Abort";
	identifier = "mask SNF_ABORT";
}

ExitFlag = GenBoolean {
	moniker = "Exit";
	identifier = "mask SNF_EXIT";
}

ContinueFlag = GenBoolean {
	moniker = "Continue";
	identifier = "mask SNF_CONTINUE";
}

RebootFlag = GenBoolean {
	moniker = "Reboot";
	identifier = "mask SNF_REBOOT";
}

BizarreFlag = GenBoolean {
	moniker = "Bizarre";
	identifier = "mask SNF_BIZARRE";
}

Notify1Trigger = GenTrigger {
	moniker = "SysNotify w/1 Message";
	action = MSG_KERR_SYS_NOTIFY_1, process;
}

Notify2Trigger = GenTrigger {
	moniker = "SysNotify w/2 Messages";
	action = MSG_KERR_SYS_NOTIFY_2, process;
}

end Interface;
