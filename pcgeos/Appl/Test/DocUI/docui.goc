/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	  Sample Applications
 * MODULE:	  UI-Object Document Sample
 * FILE:	  docui.goc
 *
 * AUTHOR:  	  Tony Requist: December 6, 1991
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	12/6/91	  tony	    Initial version
 *
 * DESCRIPTION:
 *	This is one of the sample applications that demonstrate the use
 *	of the GenDocumentControl object. This particular one shows that
 *	one need not use a GenView to display the contents of a document;
 *	you can use other types of objects sitting on their own (much as
 *	GeoDex does). As an important side effect, it also demonstrates
 *	how UI objects can send messages to the current document via the
 *	"model hierarchy" [Con 12.5.5].
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	All the sample applications in the Document subdirectory except
 *      DosFile share a common document format: a VM file whose map block
 *      stores the X and Y position, in document coordinates, of a small
 *      blue square. Most of the applications actually display such a
 *      square; when you click the mouse in the view, the coordinates of
 *	the square change to be where you clicked. 
 *
 *	Note that, in this application, rather than displaying a blue square
 *	inside a GenView, we have two GenValue objects that both display
 *	and manipulate the coordinates.
 *
 *	You should understand about VM files [Con 19] and how to manipulate
 *	them before reading on.
 *
 *		      Document Control Overview [Obj 13]
 *
 *	The document-control system of GEOS is made from three object
 *	classes that work together to produce an harmonious whole (sorry,
 *	got carried away there). The responsibilities are divide as follows:
 *
 *	GenDocumentControl  	is responsible for providing what you might
 *				consider the UI of the document control. It
 *				produces menus, submenus, and dialog boxes
 *				with which the user interacts when s/he wishes
 *				to open, close, create, or save a document.
 *				It usually is run by the UI thread of an
 *				application, to provide fast feedback to
 *				the user.
 *
 *	GenDocument 	    	is the low-level object that deals with a
 *				single document file. It does all the work
 *				of interacting with the file and VM systems
 *	    	    	    	to save/revert/auto-save/revert the document
 *				itself.
 *
 *	GenDocumentGroup    	is a conduit between the GenDocumentControl
 *				and the GenDocument objects. It is responsible
 *				for creating, managing, and destroying the
 *				GenDocument objects, selecting a single object
 *				as the current document, etc. GenDocumentGroup
 *	    	    	    	instantiates a separate GenDocument object
 *				for each document it's told by the
 *				GenDocumentControl to manage.
 *
 *	$Id: docui.goc,v 1.1 97/04/04 16:36:31 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

/*
 * The major and minor protocol number for the document file is an abstract
 * thing, given meaning only with respect to other protocol numbers, as
 * described in [Con 6.1.7] and [Obj 13.5.1]. In our case, we've never changed
 * the format of our document, so our protocol number remains 1.0
 */
#define DOCUMENT_PROTOCOL_MAJOR	1
#define DOCUMENT_PROTOCOL_MINOR	0

/*
 * Define the extent of the coordinate space on our document. It's specified
 * in terms of points, so our document is 20 inches by 20 inches.
 */
#define DOCUMENT_WIDTH		(20*72)
#define DOCUMENT_HEIGHT		(20*72)

#define VIEW_BACKGROUND_COLOR	C_WHITE

/*
 * Initial position (in document coordinates) of our mystical blue square.
 */
#define INITIAL_X_POS		20
#define INITIAL_Y_POS		20

/*
 * This is the structure of a datafile.  It is incredibly simple, storing just
 * a x,y position of the center of the square in the VM file's map block.
 */

typedef	struct {
    word	DUIMB_xPos;
    word	DUIMB_yPos;
} DUIMapBlock;

/*
 ***************************************************************************
 *		Global variables
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	DUIProcessClass, GenProcessClass ;
@endc   /* end of class definition */

/*
 * DUIDocument class is our subclass of GenDocument that we use to add
 * behavior to the GenDocument
 */

@class	DUIDocumentClass, GenDocumentClass ;

/*
 * These are the messages sent out when the user fiddles with the GenValue
 * objects. Their parameters are taken from the GEN_VALUE_APPLY_MSG prototype
 * defined in gValueC.goh, but the message number is all our own.
 */
@message(GEN_VALUE_APPLY_MSG) MSG_DUI_DOCUMENT_X_CHANGE;
@message(GEN_VALUE_APPLY_MSG) MSG_DUI_DOCUMENT_Y_CHANGE;

@endc

@classdecl	DUIProcessClass, neverSaved ;
@classdecl	DUIDocumentClass ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 *		Application Object
 */

@start	AppResource ;

@object GenApplicationClass DUIApp = {
    GI_visMoniker = list { @DUITextMoniker }
    GI_comp = @DUIPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @DUIPrimary;
    /*
     * The GenDocumentControl object must be on the "active list" so it can
     * have access to the AppLaunchBlock, passed with MSG_META_ATTACH, that
     * contains the data file the application is supposed to open.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) = @DUIDocumentControl;
    /*
     * The GenDocumentControl object must also be on the "application startup"
     * list so the application can manipulate documents when started as a
     * server for another application (NOTE: it must be on this list even if
     * you don't ever expect your application to act as such a server).
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) = @DUIDocumentControl;
    /*
     * The GenDocumentControl will load its saved options from the .ini file
     * itself, but needs to be told when to save them.
     */
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
	@DUIDocumentControl;
    /*
     * Specify the INI file category [Con 6.3] under which to save all options
     * for this application.
     */
    ATTR_GEN_INIT_FILE_CATEGORY = "docui";
}

@visMoniker DUITextMoniker = "C DocUI Sample Application";

@end	AppResource

/*
 *		Primary window
 */

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass DUIPrimary  = {
    GI_comp = @DUIFileMenu, @DUIValuesGroup;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;

    /*
     * Let's say we want a floating keyboard to come up on pen-based
     * systems to allow keyboard input to the GenValue children of this
     * primary. As of Dec. 1993, GenValues cause keyboards to come up
     * automatically, but to get this behavior on the original Zoomer
     * release, we must tell the parent of a GenValue to override the
     * old default no-keyboard behavior.
     */
    ATTR_GEN_WINDOW_KBD_OVERRIDE = (KO_KEYBOARD_REQUIRED);
}

@object GenInteractionClass DUIFileMenu = {
    /*
     * Turn this thing into the File menu for the application. In an ideal
     * world, we could just turn the GenDocumentControl object into the
     * File menu and be done with it (it is a subclass of GenInteraction,
     * after all). Sadly, due to implementation details, GenDocumentControl
     * can only be a GIV_ORGANIZATIONAL interaction, so we have a separate
     * GIV_POPUP interaction to contain it.
     */
    GI_comp = @DUIDocumentControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

/*
 *	GenDocumentControl
 *
 * There are a few things to keep in mind when deciding in what resource to
 * place the GenDocumentControl object:
 *	1) because it must be on the application's MGCNLT_ACTIVE_LIST list,
 *	   the resource that contains it will always be brought in on start-up.
 *	   If that resource is particularly large, it could slow down the
 *	   application's start-up.
 *	2) it is actually used only rarely, when the user wishes to open, close
 *	   or save a document.
 *	3) it creates a number of different objects (triggers for the File
 *	   menu, dialog boxes, etc.) that could make the resource in which
 *	   it sits become somewhat bloated.
 * If there were more elements of the File menu (for example, a
 * SpoolPrintControl object), you might put all the elements into a single
 * FileMenu resource. For this example, however, we're just going to put it
 * in the Interface resource, as there's not much else for this app to do.
 */

@object GenDocumentControlClass DUIDocumentControl = {
    /*
     * Document file's token
     */
    GDCI_documentToken = { "SAMP", MANUFACTURER_ID_GEOWORKS };
    /*
     * Text to display in the header area of the primary when no
     * document is open.
     */
    GDCI_noNameText = "No Document";
    /*
     * Specify subdirectory of SP_TEMPLATE in which Use Template... should look.
     */
    GDCI_templateDir = "Sample";
    /*
     * Pointer to the GenDocumentGroup, which manages the GenDocument objects
     * themselves (run by the process thread, usually).
     */
    GDCI_documentGroup = DUIDocumentGroup;
    /*
     * List of objects to enable/disable based on whether or not a
     * document exists. For us, this is the two GenValues that show the
     * coordinates.
     */
	 GDCI_enableDisableList = DUIUIEnableList;
    	 GDCI_features = @default & ~GDCF_SUPPORTS_TEMPLATES;
	 GDCI_dialogNewText = "";  /* ChunkHandle */
	 GDCI_dialogNewMoniker = ""; /* VisMoniker */

}

@chunk optr DUIUIEnableList[] = {
    @DUIValueX, @DUIValueY
};

@end Interface

/*
 *	Document Group
 *
 * The GenDocumentGroup should be put in a resource of its own run by
 * the application thread. It is responsible for creating and administering
 * the various GenDocument objects (one per document), coordinating its actions
 * with the GenDocumentControl object.
 *
 * Because we do not give a value for the GDGI_genView instance variable,
 * the GenDocumentGroup will not attempt to hook the GenDocument (actually
 * DUIDocument) objects it creates to a GenView; it assumes the document
 * has some other means of displaying its data rather than acting as a
 * VisContent for a GenView.
 */

@start DocumentUI ;

@object GenDocumentGroupClass DUIDocumentGroup = {
    /*
     * Name for untitled documents
     */
    GDGI_untitledName = "DUI Untitled";
    /*
     * Class for document objects. We specify our own subclass of GenDocument
     * as we wish to add behaviour to the document object.
     */
    GDGI_documentClass = &DUIDocumentClass;
    /*
     * Document protocol for current document version.
     */
    GDGI_protocolMajor = DOCUMENT_PROTOCOL_MAJOR;
    GDGI_protocolMinor = DOCUMENT_PROTOCOL_MINOR;
    /*
     * Pointer to the GenDocumentControl
     */
	 GDGI_documentControl = DUIDocumentControl;

}

@end DocumentUI;

/*
 *		UI objects used to display the document
 *
 * Both objects specify their destination as TO_APP_MODEL, with a destination
 * class of GenDocumentClass. The objects themselves end up recording their
 * normal output and sending the handle of that recorded message as an
 * argument in a MSG_META_SEND_CLASSED_EVENT message to the application object,
 * which is the root of the three input hierarchies [Con 12.5]. From there
 * it travels down the "model" hierarchy, checking at each level to see if
 * the object is a subclass of GenDocumentClass. The first object that is
 * a subclass of GenDocument has the recorded message sent to it. The
 * usual path will be GenValue -> GenApplication -> GenDocumentControl ->
 * GenDocumentGroup -> DUIDocument.
 */

@start Interface ;

@object GenInteractionClass DUIValuesGroup = {
    GI_comp = @DUIValueX, @DUIValueY;
    HINT_CENTER_CHILDREN_ON_MONIKERS;
    HINT_LEFT_JUSTIFY_MONIKERS;
};
@object GenValueClass DUIValueX = {
    GI_visMoniker = 'X', "X Coordinate (no pen input):";
    /*
     * All objects in the enableDisable list of the GenDocumentControl
     * must start life disabled.
     */
    GI_states = @default & ~GS_ENABLED;

    GVLI_minimum = MakeWWFixed(0);
    GVLI_maximum = MakeWWFixed(DOCUMENT_WIDTH-1);

    GVLI_applyMsg = MSG_DUI_DOCUMENT_X_CHANGE;
    GVLI_destination =  (TO_APP_MODEL);
    ATTR_GEN_DESTINATION_CLASS = { (ClassStruct *)&GenDocumentClass };   
    HINT_DEFAULT_FOCUS;
    /*
     * Let's not expand this GenValue to accept pen input.
     */
    HINT_VALUE_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;
}

@object GenValueClass DUIValueY = {
    GI_visMoniker = 'Y', "Y Coordinate (pen input allowed):";
    /*
     * All objects in the enableDisable list of the GenDocumentControl
     * must start life disabled.
     */
    GI_states = @default & ~GS_ENABLED;

    GVLI_minimum = MakeWWFixed(0);
    GVLI_maximum = MakeWWFixed(DOCUMENT_HEIGHT-1);

    GVLI_applyMsg = MSG_DUI_DOCUMENT_Y_CHANGE;
    GVLI_destination =  (TO_APP_MODEL);
    ATTR_GEN_DESTINATION_CLASS = { (ClassStruct *)&GenDocumentClass };   
}

@end Interface

/*
 ***************************************************************************
 *		Code for DUIDocumentClass
 ***************************************************************************
 */



/***********************************************************************
 *	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for DUIDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize a newly-created document file.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    The map block is allocated, initialized and set for
 *		    the file.
 *
 * STRATEGY: 	    Handle this message by creating our version of an empty
 *		    document, which is a map block with the DUIMapBlock
 *		    structure in it and initialized to default values.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/91		Initial Revision
 *
 ***********************************************************************/
@method DUIDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
    VMBlockHandle mapBlock; /* VM block handle of the file's map block,
			     * which holds the coordinates of the mystic
			     * square. */
    DUIMapBlock *mapPtr;    /* The locked map block */
    MemHandle mem;  	    /* Memory handle of the locked map block,
			     * for marking the block dirty */

    /*
     * Allocate a block, make it the map block and initialize it
     */
    mapBlock = VMAlloc(pself->GDI_fileHandle, sizeof(DUIMapBlock), 0);
    VMSetMapBlock(pself->GDI_fileHandle, mapBlock);

    /*
     * Lock the newly created block so that we can use it.  Since we
     * are modifying the contents of the block it is essential that we
     * call VMDirty to let the VM code know that the block is modified,
     * and do it *before* we call VMUnlock (else the block might be
     * thrown out before we can mark it dirty).
     */
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
    mapPtr->DUIMB_xPos = INITIAL_X_POS;
    mapPtr->DUIMB_yPos = INITIAL_Y_POS;
    VMDirty(mem);
    VMUnlock(mem);
    return(FALSE);		/* Return no error */
}


/***********************************************************************
 *		MSG_DUI_DOCUMENT_X_CHANGE and
 *		MSG_DUI_DOCUMENT_Y_CHANGE for DUIDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Note a change in one of the coordinates stored in
 *		    the document.
 * PARAMETERS:	    void (WWFixedAsDWord value, word stateFlags)
 * SIDE EFFECTS:    The appropriate coordinate is updated and the
 *		    document marked dirty.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/31/91		Initial Revision
 *
 ***********************************************************************/
@method DUIDocumentClass, MSG_DUI_DOCUMENT_X_CHANGE,
    	    	    	  MSG_DUI_DOCUMENT_Y_CHANGE
{
    VMBlockHandle mapBlock;
    DUIMapBlock *mapPtr;
    MemHandle mem;

    /*
     * Find the handle for the document's map block and lock the thing down.
     */
    mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);

    /*
     * Adjust the appropriate coordinate, based on which message we're
     * handling. We just ignore the fractional portion of the value, since
     * we can't store it anywhere.
     */
    if (message == MSG_DUI_DOCUMENT_X_CHANGE) {
	mapPtr->DUIMB_xPos = IntegerOf(value);
    } else {
	mapPtr->DUIMB_yPos = IntegerOf(value);
    }
    /*
     * Mark the map block dirty before we unlock it, then unlock it.
     */
    VMDirty(mem);
    VMUnlock(mem);
}


/***********************************************************************
 *	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for DUIDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    The document has been opened, and any UI required
 *		    has been created, so initialize the UI itself.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    the coordinates are stuffed into the GenValue objects.
 *
 * STRATEGY:	    Fetch the coordinates from the map block and set
 *		    them as the values for the two GenValue objects.
 *
 *	    	    If we dealt with multiple documents all displaying
 *		    through the same set of UI objects, we would likely
 *	    	    do this on MSG_META_GAINED_MODEL_EXCL instead.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	8/31/91		Initial Revision
 *
 ***********************************************************************/
@method DUIDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
    VMBlockHandle mapBlock;
    DUIMapBlock *mapPtr;
    MemHandle mem;

	 /*
     * Get position from data file
	  */
    mapBlock = VMGetMapBlock(pself->GDI_fileHandle);
    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);

    /*
     * Set the positions as the value for their respective GenValue objects.
     */
	 @send DUIValueX::MSG_GEN_VALUE_SET_INTEGER_VALUE(
				    mapPtr->DUIMB_xPos, FALSE);
	 @send DUIValueY::MSG_GEN_VALUE_SET_INTEGER_VALUE(
				    mapPtr->DUIMB_yPos, FALSE);
    VMUnlock(mem);
}
