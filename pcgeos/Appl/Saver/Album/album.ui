/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	PC/GEOS
 * MODULE:	Album
 * FILE:	album.ui
 *
 * AUTHOR:  	Gene Anderson: Mar 31, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	3/31/92	  gene	    Initial version
 *
 * DESCRIPTION:
 *	Options for Album saver
 *
 * 	$Id: album.ui,v 1.1 97/04/04 16:44:10 newdeal Exp $
 *
 ***********************************************************************/
#include	"generic.uih"
#include	"saver.uih"
#include	"options.uih"

#define CALL_ALBUM(routine) METHOD_SAVER_CALL_SPECIFIC, "enum " #routine

start	AlbumOptions;

AlbumRoot = OptInteraction {
	category = "album";
	children =
		AlbumDrawOptions,
		AlbumPauseRange,
		AlbumDurationRange,
		AlbumColor;
	genStates = default -usable;
	hints = {HINT_CENTER_BY_MONIKERS}
}

AlbumDrawOptions = OptList {
	key = "mode";
	moniker = "Draw:";
	children =
		ADOUpperLeft,
		ADOCenter,
		ADOTile,
		ADOAppropriate;
	action = CALL_ALBUM(AlbumSetDrawMode);
	hints = {
		HINT_ORIENT_VERTICALLY
	}
}

ADOUpperLeft = GenListEntry {
	moniker = "Upper Left";
	method = SAVER_BITMAP_UPPER_LEFT;
}

ADOCenter = GenListEntry {
	moniker = "Centered";
	method = SAVER_BITMAP_CENTER;
}

ADOTile = GenListEntry {
	moniker = "Tiled";
	method = SAVER_BITMAP_TILE;
}

ADOAppropriate = GenListEntry {
	moniker = "As Appropriate";
	method = SAVER_BITMAP_APPROPRIATE;
	curState = isOn, isDefault, userIsOn;
}


AlbumPauseRange = OptRange {
	key = "pause";
	moniker = "Pause:";
	action = CALL_ALBUM(AlbumSetPause);
	value = ALBUM_PAUSE_DEFAULT;
	minimum = ALBUM_PAUSE_MIN;
	maximum = ALBUM_PAUSE_MAX;
	increment = ALBUM_PAUSE_STEP;
}

AlbumDurationRange = OptRange {
	key = "duration";
	moniker = "Duration:";
	action = CALL_ALBUM(AlbumSetDuration);
	value = ALBUM_DURATION_DEFAULT;
	minimum = ALBUM_DURATION_MIN;
	maximum = ALBUM_DURATION_MAX;
	increment = ALBUM_DURATION_STEP;
}

/******************************************************************************
*
*		Color options
*
******************************************************************************/


AlbumColor = OptList {
	key = "color";
	moniker = "Color:";
	action = CALL_ALBUM(AlbumSetColor);
	children =
		DarkBlueEntry, DarkGreenEntry, DarkCyanEntry,
		DarkRedEntry, DarkVioletEntry, BrownEntry, LightGrayEntry,
		DarkGrayEntry, LightBlueEntry, LightGreenEntry, LightCyanEntry,
		LightRedEntry, LightVioletEntry, YellowEntry, WhiteEntry,
		RandomColorEntry;
	hints = {
		HINT_IS_TOOLBOX,
		HINT_ORIENT_HORIZONTALLY
	}
}

#define COLOR_WIDTH 14
#define COLOR_HEIGHT 14

#define COLOR_ENTRY(name, color) \
name = GenListEntry { \
	moniker = { \
	    cachedSize = COLOR_WIDTH, COLOR_HEIGHT; \
	    gstring { \
		GSBeginString | \
		GSSetAreaColorMap COLOR_MAP_DITHER | \
		GSSetAreaColorIndex	color | \
		GSFillRect	0, 0, <COLOR_WIDTH>, <COLOR_HEIGHT> | \
		GSEndString \
	    } \
	} \
	method = #color; \
}

COLOR_ENTRY(DarkBlueEntry, DK_BLUE)
COLOR_ENTRY(DarkGreenEntry, DK_GREEN)
COLOR_ENTRY(DarkCyanEntry, DK_CYAN)
COLOR_ENTRY(DarkRedEntry, DK_RED)
COLOR_ENTRY(DarkVioletEntry, DK_VIOLET)
COLOR_ENTRY(BrownEntry, BROWN)
COLOR_ENTRY(LightGrayEntry, LT_GRAY)
COLOR_ENTRY(DarkGrayEntry, DK_GRAY)
COLOR_ENTRY(LightBlueEntry, LT_BLUE)
COLOR_ENTRY(LightGreenEntry, LT_GREEN)
COLOR_ENTRY(LightCyanEntry, LT_CYAN)
COLOR_ENTRY(LightRedEntry, LT_RED)
COLOR_ENTRY(LightVioletEntry, LT_VIOLET)
COLOR_ENTRY(YellowEntry, YELLOW)
COLOR_ENTRY(WhiteEntry, WHITE)

RandomColorEntry = GenListEntry {
	moniker = "Random";
	curState = isOn, userIsOn, isDefault;
	method = "-1";
}

end	AlbumOptions;


/******************************************************************************
 *
 *				HELP TREE
 *
 ******************************************************************************/

start	AlbumHelp;

HelpBox = GenInteraction {
	moniker = 'H', "Album Help";
	attributes = default +independentlyDisplayable;
	children = HelpText, HelpReplyBar;
	genStates = default -usable;
	hints = {
            HINT_SET_WIN_POS_SIZE_ATTR {
            PosSizeAttrInfo <
                ; Change indicated fields
                <
                    FALSE,          ; WPSF_PERSIST (dont care)
                    FALSE,          ; WPSF_HINT_FOR_ICON (dont care)
                    FALSE,          ; WPSF_NEVER_SAVE_STATE (dont care)
                    TRUE,           ; WPSF_SHRINK_DESIRED_SIZE_TO_FIT_IN_PARENT
                    TRUE,           ; WPSF_CONSTRAIN_TYPE
                    FALSE,          ; WPSF_POSITION_TYPE (dont care)
                    TRUE            ; WPSF_SIZE_TYPE
                >,
                ; to indicated values
                <
                    0,              ; WPSF_PERSIST (dont care)
                    0,              ; WPSF_HINT_FOR_ICON (dont care)
                    0,              ; WPSF_NEVER_SAVE_STATE (dont care)
                    TRUE,           ; WPSF_SHRINK_DESIRED_SIZE_TO_FIT_IN_PARENT
                    WCT_KEEP_VISIBLE,; WPSF_CONSTRAIN_TYPE
                    0,              ; WPSF_POSITION_TYPE (dont care)
                    WST_AS_RATIO_OF_FIELD  ; WPSF_SIZE_TYPE
                >,
		; no position being specified
                <>,
		; make help text 3/4 of the screen length-wise, 3/4 the screen
		; height-wise
		<
		    mask SWSS_RATIO or SS_PERCENT75,
		    mask SWSS_RATIO or SS_PERCENT75
		>
	    >
	    }
	}
}

HelpText = GenTextDisplay {
	desiredHeight = 9;		/* 7 */
	desiredWidth = "6*72";
	genFont = noGenMapping;
	textDisplayAttributes = default +desiredHeightIsViewMin, +initScrolling,
				-dontScrollToChanges, +selectable;
	type = default -defaultStyle, +multipleStyles,
		-defaultRuler, +multipleRulers;
	styleRuns = TextStyleRuns;
	rulerRuns = TextRulerRuns;
	text = TextChunk;
	hints = {
		HINT_WASH_COLOR {
		    SetColorParams <
			SCP_index <		;SCP_index.
			    WHITE,		;    SCPI_index
			    <			;    SCPI_info.
				0,		;	VTCMM_COLOR_FLAG
				VTGS_100,	;	VTCMM_GRAY_SCREEN
				0,		;	VTCMM_TRANSPARENT
				0,		;	VTCMM_ON_BLACK
				COLOR_MAP_SOLID	;	VTCMM_COLOR_MAP_MODE
			    >,
			    0			;    SCPI_unused
			>
		    >
    	    	}
	}
}

#include "albumHelp.ui"

HelpReplyBar = GenInteraction {
	attributes = default +notIndependentlyDisplayable;
	hints = {
		 HINT_MAKE_REPLY_BAR
		}
	children = HelpPageUp, HelpPageDown, HelpClose;
}
HelpClose = GenTrigger {
	CLOSE_TRIGGER_VALUES
	genAttributes = default + completesInteraction;
}
HelpPageUp = GenTrigger {
	moniker = 'U',"Page Up";
	action = METHOD_TEXT_SCROLL_PAGE_UP, HelpText;
}
HelpPageDown = GenTrigger {
	moniker = 'D',"Page Down";
	action = METHOD_TEXT_SCROLL_PAGE_DOWN, HelpText;
}

end	AlbumHelp;
