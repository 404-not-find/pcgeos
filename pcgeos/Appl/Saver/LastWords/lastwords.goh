/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  lastwords.goh
 * FILE:	  lastwords.goh
 *
 * AUTHOR:  	  Jeremy Dashe: Apr 23, 1993
 *
 * REVISION HISTORY:
 *	Date	 Name	Description
 *	----	 ----	-----------
 *	4/23/93	 jeremy	Initial version
 *
 * DESCRIPTION:
 *	This is where we define some lastwords classes and types.
 *
 *
 * 	$Id: lastwords.goh,v 1.1 97/04/04 16:49:33 newdeal Exp $
 *
 ***********************************************************************/

#include <graphics.h>
#include <fontID.h>

/***********************************************************************
  	    	    	Type Definitions and #defines
 ***********************************************************************/

#define LW_INI_CATEGORY	    	"lastwords"
#define LW_INI_KEY_TYPE	    	"type"
#define LW_INI_KEY_RANDOM_COLOR "randomcolor"
#define LW_INI_KEY_COLOR    	"color"
#define LW_INI_KEY_MOTION	"motion"
#define LW_INI_KEY_SPEED    	"speed"
#define LW_INI_KEY_SIZE  	"size"
#define LW_INI_KEY_RANDOM_ANGLE "randomangle"
#define LW_INI_KEY_ANGLE   	"angle"
#define LW_INI_KEY_FONT	    	"lwfont"
#define LW_INI_KEY_MESSAGE    	"message"

typedef enum /* word */ {
    LWFT_TEXT,
    LWFT_GRAPHIC,
    LWFT_TIME,
    LWFT_DATE,
    LWFT_BOGUS
} LWFormatType;

typedef word LWSpeedType;
#define LW_SLUG_SPEED       120
#define LW_SLOW_SPEED       60
#define LW_MEDIUM_SPEED     30
#define LW_FAST_SPEED       10

#define	LW_DELTA_BASE	    5  	    	/* Move at least 5 pixels each time */
#define LW_DELTA_MAX	    16 	    	/* but at most 21...	    	    */

#define	LW_MAX_LENGTH	    64	    	/* The max text message length. */


/*
 * Definitions for VM/GString use.
 */
#define	LW_VM_FILE_NAME	    "LastWords Graphics File"
#define LW_FEARLESS_TOKEN   "LWDS"

typedef struct {
    word    LWGS_width;
    word    LWGS_height;
    word    LWGS_data;
} LWGStringHeader;

/***********************************************************************
  	    	    	Class Definitions
 ***********************************************************************/

@class	LWApplicationClass, SaverApplicationClass;

/*
 * This is the message called by a one-shot timer to draw the next frame of
 * the saver.
 */
@message void MSG_LW_APP_DRAW();


/*
 * Instance data galore...
 */

@instance FontID LWCI_fontID = FID_DTC_URW_ROMAN; /* Font to use in message */
@instance word LWCI_size     = 24;           	  /* Pointsize of same */

@instance Boolean LWCI_randomAngle = FALSE;	  /* Flag: use a random angle */
@instance sword LWCI_angle   = 0;                 /* Angle at which to draw it.
                                                     -1 => random */
@instance Boolean LWCI_randomColor = TRUE;	  /* Flag: use a random color */
@instance byte LWCI_color = C_WHITE;    	  /* Color in which to draw */

@instance SaverVectorReflectType LWCI_motion = SVRT_BOUNCE;
@instance LWSpeedType LWCI_speed = LW_MEDIUM_SPEED;
@instance LWFormatType LWCI_format = LWFT_TEXT;

/*
 * The random number generator token used to generate new random numbers.
 */
@instance RandomToken LWCI_randomToken = 0;

/*
 * The vector structures used by SaverVector*.
 */
@instance SaverVector LWCI_vectorX =
 	{0, 	        /* Current point */
 	 0, 	        /* Minimum point value */
 	 100, 	        /* Maximum point value */
 	 SVRT_BOUNCE,   /* Maximum point value */
	 LW_DELTA_BASE, /* Current delta */
	 LW_DELTA_BASE, /* Base value for delta */
	 LW_DELTA_MAX   /* Max value for delta (above base) */
	};

@instance SaverVector LWCI_vectorY =
 	{0, 	        /* Current point */
 	 0, 	        /* Minimum point value */
 	 100, 	        /* Maximum point value */
 	 SVRT_BOUNCE,   /* Maximum point value */
	 LW_DELTA_BASE, /* Current delta */
	 LW_DELTA_BASE, /* Base value for delta */
	 LW_DELTA_MAX   /* Max value for delta (above base) */
	};

/*
 * We keep the last angle drawn so we can erase it before drawing
 * the next one.
 */
@instance sword LWCI_lastAngle = 0;

/*
 * A flag: have we drawn anything yet?
 */
@instance Boolean LWCI_drawn = FALSE;

/*
 * Information for the one-shot timer we use.
 */
@instance TimerHandle LWCI_timerHandle = NullHandle;
@instance word LWCI_timerID = 0;

/*
 * Information for the gstring code.
 */
@instance GStateHandle LWCI_gstring = 0;
@instance VMFileHandle LWCI_file = 0;
@instance word LWCI_width = 0;
@instance word LWCI_height = 0;
@instance sword LWCI_xOffset = 0;
@instance sword LWCI_yOffset = 0;

/*
 * A buffer for the text message.
 */
@instance char	LWCI_msgText[LW_MAX_LENGTH + 1];

@endc;


@class	LWProcessClass, GenProcessClass;
@endc;
