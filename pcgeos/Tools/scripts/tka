#!/usr/public/wish -f
##############################################################################
#
# 	Copyright (c) Geoworks 1994 -- All Rights Reserved
#
# PROJECT:	anarchy
# MODULE:	tka
# FILE: 	tka
# AUTHOR: 	David Loftesness, Aug 26, 1994
#
# COMMANDS:
# 	Name			Description
#	----			-----------
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	dloft	8/26/94   	Initial Revision
#
# DESCRIPTION:
#	Graphical "whosin" and "aliases".  List entries are double-clickable.
#
#	$Id: tka,v 1.2 95/12/14 19:17:42 ron Exp $
#
###############################################################################

proc    GetListMembers {listname} {

    return [lsort [split [lindex \
		   [exec ypcat -k aliases | egrep "^$listname  "] 1] ,]]
}

proc	GetAliases {name} {

    set aliases [lsort [exec ypcat -k aliases | egrep "\[ ,\]$name\(,|\$\)" | egrep -v # | awk {BEGIN { FS = "  "; ORS = " " } {print $1}}]]
    return $aliases
}

proc FillList {lbox list} {
    #
    # Sticks a bunch of list entries into a list
    #
    $lbox delete 0 [$lbox size]
    foreach i $list {
	$lbox insert end $i
    }
}


proc NewWhosin {} {
    #
    # Routine bound to double-clicking on group list
    #
    .entrys.groupEntry delete 0 1000
    .entrys.groupEntry insert 0 [.l2.lst get [.l2.lst curselection]]
    FillMembers
}

proc NewAliases {} {
    #
    # This routine is bound to double-clicking on people list.
    # 
    # If the clicked-upon entry is a user, then do Aliases, otherwise do Whosin.  This
    # lets clicking on subgroups of a group do the right thing.
    #
    set selection [.l.lst get [.l.lst curselection]]
    if [isUser $selection] {
	.entrys.nameEntry delete 0 1000
	.entrys.nameEntry insert 0 $selection
	FillAliases
    } else {
	#
	# simulate a NewWhosin
	#
	.entrys.groupEntry delete 0 1000
	.entrys.groupEntry insert 0 $selection
	FillMembers
    }
}

proc isUser {username} {
    return [expr 1-[catch {exec ypmatch -k $username passwd}]]
}

proc FillAliases {} {
    if {[.entrys.nameEntry get] != ""} [FillList .l2.lst [GetAliases [.entrys.nameEntry get]]]
	.l2.title configure -text "Groups of: [.entrys.nameEntry get]"
}

proc FillMembers {} {
    if {[.entrys.groupEntry get] != ""} [FillList .l.lst [GetListMembers [.entrys.groupEntry get]]]
	.l.title configure -text "Members of: [.entrys.groupEntry get]"

}

########################################################################


######################################################################
#		mkListBox
######################################################################
#
# SYNOPSIS:	makes a list box of items passed in from a list
#
# PASS:		l	- the path for the created list box
#		x	- width of list
#		y	- height of list
#		title	- title to display on top of list
#		boarder	- boarder width
#
# RETURN:	Void.
#
# SIDE EFFECTS:
#	Requires:	????
#
#	Asserts:	????
#
# CHECKS:		????
#
# PSEUDO CODE/STRATEGY:	????
#
# KNOWN BUGS/CAVEATS/IDEAS:	????
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	dlitwin	4/30/93	Initial version.
#
######################################################################
proc mkListBox {l list x y title border} {
    frame $l -relief raised -bd $border

    label $l.title -text $title
    pack append $l $l.title {top fillx filly expand}

    listbox $l.lst -relief sunken -geometry ${x}x$y -yscroll "$l.scroll set"
    bind $l <B2-Motion>

    scrollbar $l.scroll -relief sunken \
	-command "listBoxScroll $l.lst $y"
    pack append $l $l.scroll {right expand filly} $l.lst {left expand fillx}

    eval "$l.lst insert 0 $list"
#    puts stdout "$x $y"

}




######################################################################
#		listBoxScroll
######################################################################
#
# SYNOPSIS:	make the scrolling of the list box a little less
#		retarded, such that you can't scroll into a situation
#		where the last item is the top of the list.  Whenever
#		the list needs to scroll the last item will always
#		remain on the bottom.
#
# PASS:		l	- path of the listbox
#		length	- length of the list
#		height	- height of list (viewable portion)
#		item	- list item to be on top
#
# RETURN:	Void.
#
# SIDE EFFECTS:
#	Requires:	????
#
#	Asserts:	????
#
# CHECKS:		????
#
# PSEUDO CODE/STRATEGY:	????
#
# KNOWN BUGS/CAVEATS/IDEAS:	????
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	dlitwin	5/ 6/93	Initial version.
#
######################################################################
proc listBoxScroll {l height item} {
    set length [$l size]
    if {$item >= $height} {
	if {[expr $length-$item] < $height} {
	    $l yview [expr $length-$height]
	} else {
	    $l yview $item
	}
    } else {
	$l yview $item
    }
}

proc listBoxScrollX {l length height item} {
    if {$item >= $height} {
	if {[expr $length-$item] < $height} {
	    $l xview [expr $length-$height]
	} else {
	    $l xview $item
	}
    } else {
	$l xview $item
    }
}
#####################################################################

frame .entrys

entry .entrys.groupEntry -relief sunken -borderwidth 3
entry .entrys.nameEntry -relief sunken -borderwidth 3
mkListBox .l "hi" 20 25 "Members of" 3
mkListBox .l2 "mike" 20 25 "Groups in" 3
#listbox .l -relief raised -borderwidth 3 -font 7x13
#listbox .l2 -relief raised -borderwidth 3 -font 7x13

pack append .entrys .entrys.groupEntry {left frame w fillx expand }
pack append .entrys .entrys.nameEntry {right frame e fillx expand}
pack append . .entrys {bottom frame w fillx expand } 

pack append . .l {left frame nw expand fillx }
pack append . .l2 {right frame ne expand fillx}
bind .entrys.groupEntry <Return> {FillMembers}
bind .entrys.nameEntry <Return> {FillAliases}
bind .l.lst <Double-Button-1> {NewAliases}
bind .l2.lst <Double-Button-1> {NewWhosin}
bind .entrys <Triple-Button-1> {exit}
.entrys.groupEntry insert 0 berkeley
.entrys.nameEntry insert 0 [exec whoami]

FillAliases
FillMembers
#.l.lst configure -geometry 20x20
#.l2.lst configure -geometry 20x20
focus .entrys.groupEntry
wm minsize . 100 200

