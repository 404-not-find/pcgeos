#!/bin/sh
##############################################################################
#
# 	Copyright (c) Geoworks 1995 -- All Rights Reserved
#
# PROJECT:	Tools
# FILE: 	jobSearch, a SH script
# AUTHOR: 	Jim Guggemos, Sep 28, 1995
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	JimG	9/28/95   	Initial Revision
#
# DESCRIPTION:
#	A tool which look at all machines running customs (via reginfo)
#	and attempts to look for certain jobs running on them.  The jobs
#	that it currently looks for are:
#
#		pmake		loc		esp
#		uic		glue		goc
#		hcdx86 (highc)	mergetags	tcc
#
#	This is typically used to look for straggling (or hung) processes
#	during the nightly make.
#
#	It runs 9 jobs in parallel so it is fairly efficient without
#	killing the performance of your local machine.
#		
#
#	$Id: jobSearch,v 1.2 95/09/28 14:16:30 guggemos Exp $
#
###############################################################################

hosts=`reginfo | grep '[ 	]:' | grep -v 'host down' | awk '{print $1}'`

if [ ! "$hosts" ]; then
    echo "No hosts."
    exit 0
fi

set - $hosts

echo "$# hosts"
echo "PID: $$"
echo "Output: /tmp/jobs.out.$$"

trap 'echo "Caught abort.. cleaning up"; rm -f /tmp/jobs.$$.*; if [ -f /tmp/jobs.out.$$ ]; then echo "/tmp/jobs.out.$$ contains partial results"; fi; exit' 1 2 3 15

trap 'echo "Execution complete"; trap 0; exit' 0

while [ $# != 0 ]; do

    echo
    echo "Starting new group:"

    files=

    for i in $1 $2 $3 $4 $5 $6 $7 $8 $9; do
	echo Starting: $i
	touch /tmp/jobs.$$.$i
	files="$files /tmp/jobs.$$.$i"
	(rsh $i -l pcgeos ps -axg | egrep '( |/)(pmake|loc|esp|uic|glue|goc|hcdx86|mergetags|tcc)( |$)'; echo "COMPLETED") > /tmp/jobs.$$.$i 2>&1 &
    done

    # Wait for output

    echo "Waiting for output:"

    notFirst=

    while : true; do

	stillThere=
	for i in $files; do
	    if [ -f $i ]; then
		stillThere="$stillThere $i"
	    fi
	done

	if [ ! "$stillThere" ]; then
	    echo This batch completed
	    break
	fi

	if [ "$notFirst" ]; then
	    sleep 2
	else
	    notFirst=1
	fi

	for i in $stillThere; do
	    if grep -s "COMPLETED" $i; then
		echo >> /tmp/jobs.out.$$
		host=`expr $i : '/tmp/jobs\.'$$'\.\(.*\)$'`
		echo $host -------------------------------------------- >> /tmp/jobs.out.$$
		echo Completed: $host
		grep -v "COMPLETED" $i >> /tmp/jobs.out.$$
		rm $i
	    fi
	done

    done

    if [ $# -le 9 ]; then
	break
    else
	shift 9
    fi
done
