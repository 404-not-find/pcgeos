#!/bin/sh 
############################################################################
#
#	Copyright (C) GeoWorks 1991, 1992 -- All Rights Reserved
#
#	PROJECT:	PC/GEOS
#	FILE:		ship (transmits files to PC or Novell server for
#				disk mastering)
#
#	AUTHOR:		Jim DeFrisco 1/90
#			Eric E. Del Sesto 9/91
#			Tony Requist, 6/92
#
#	REVISION HISTORY:
#		Name	Date		Description
#		----	----		-----------
#		Jim	1/90		Initial Revision of "pcsendDemo"
#		Eric	9/91		Major restructuring, new command line
#					args, renamed "ship".
#		Tony	6/92		Restructured for 2.0
#		Eric	7-12/92		Wizard/Baseball changes
#		dlitwin	9/17/93		Added Whiffleball, removed Baseball
#		clee	8/3/95.		Made the international Jedi version
#
#	$Id: shipGerman,v 1.2 95/09/22 17:27:44 cthomas Exp $
#
#
# DESCRIPTION:
#	This is a heinous shell script that will transmit an entire
#	GeoWorks product (executables, sample files, config files, etc.)
#	to a PC (or nfs-mounted partition) for disk mastering.
#
#	If you want to add a new product to this script, and you
#	have never done it before, see Installed/new-demos.txt for details.
#
# USAGE EXAMPLES: (see below for full details on some of these)
#
#	In general, you want to run this script from the
#	/staff/pcgeos/Installed tree. If you want to use a branch as the
#	source directory, just run the script from that branch's Installed
#	directory. (You may need to make a symbolic link to the Installed
#	ship and send scripts first.)
#
#	ship ensemble server /n/nevada/geosdemo.jun
#
#	ship JEDI_DEMO_TOSERVER		; PC emulator
#	ship JEDI_DEMO_TOSERVER_EC	; EC PC emulator
#	ship JEDI_GFS			; for lp3, g-boards & the Real Thing
#	ship JEDI_GFS_EC
#	ship JEDI_DISKSET_TOSERVER
#	ship JEDI_DISKSET_TOSERVER_EC
#	ship XIP_DEMO	; ship xip'd geodes (desktop version) for translation
#	ship XIP_JEDI	; ship xip'd geodes (prototype) for translation
#
# USAGE:
#	ship [list|test] [<product>] [<media>] [<ec-state>] [<machine>]
#			[<modifiers>*] <destination>
#
# If "list" or "test" is given as the first argument, then "ship" won't 
# actually ship anything.  These MUST be the first argument if given.
#
# Specifying "list" will just list the names of the containing
# directories of the executables that are shipped. WARNING: some 
# directories may be printed twice, and feeding this output to other 
# scripts may have undesirable results.  For best results, either make 
# sure that each directory is only printed once (by editing the "ship" 
# and "send" scripts), or else pipe the output through "sort -u".
# 
# Specifying test will print out, in detail, what ship will do when
# run with the given options.  It will tell you the source and
# destination directories of all files copied.
#
# [<product>]:
#	You should specify only ONE of these.
#
#	jedi		- Jedi
#	jedipc		- Jedi PC demo
#	jedigfs		- Jedi GFS directory heirarchy
#
#
# [<media>]:
#	You should specify only ONE of these.
#
#	diskset		- Destined for a disk-set (DEFAULT)
#
#	server		- Destined for the network server
#
#	rom		- Destined for ROM.  Creates a RAM directory to be
#			  copied to ram, puts the .ini file there
#
#	ram		- Destined for RAM (like an SRAM card).
#
#	gfs		- Destined to be put into a GEOS filesystem in
#			  ROM. Will not include the kernel, loader,
#			  primary IFS or zoomfs drivers, user directory
#			  or geos.ini.
#
# [<ec-state>]:
#	You should specify only ONE of these.
#
#	ec		- Error-checking
#
#	nonec		- Non-error checking (the default)
#
# [<machine>]:
#	You should specify only ONE of these.
#
#	desktop		- desktop machine (DEFAULT)
#
#	poqet		- Poqet (keyboard or pen)
#
#	grid		- Grid (pen computer)
#
#	c_and_t		- C & T demo machine
#
#	gateway		- Gateway Handbook (keyboard)
#
# [<modifiers>]
#	*** Machine modifiers
#
#	penOnly		- set the pen-only flag
#
#	keyboardOnly	- set the pen-only flag
#
#	*** Size modifiers
#
#	hwr		- send handwriting recognition files
#
#	minimalApplications - only send required applications
#
#	minimalLibraries - only send required libraries
#
#	minimalDrivers	- only send required drivers
#
#	minmalFonts	- only send Roman and Sans
#
#	subminimalFonts	- only send Berkeley, Bison, University, LED.
#
#	presentationFonts - send *all* fonts
#
#	noFonts		- don't send fonts
#
#	noBitmaps	- don't send background bitmaps
#
#	noPrinting	- don't send printing related files
#
#	noDictionary	- don't send dictionaries
#
#	noHelpFiles	- don't send help files
#
#	*** Setup modifiers
#
#	noSetup		- have continueSetup FALSE so that stuff comes up
#			  immediately
#
#	*** Other modifiers
#
#	compress	- send all files compressed
#
#	debugTools	- send debugging tools
#
#	demo		- is a demo disk (sometimes affects contents
#				of GEOS.INI file which is built.)
#
#	noNuke		- do not nuke previous copy of software
#
# <destination>
#	This is the destination directory to copy files to.  This *must*
#	be a full pathname.
#
###############################################################################
#
# Specifics on each disk set:
#
#	WIZARD_DISK			;the real thing
#
#		Sends things to GOBEARS/NEVADA:DISKMAKR\WIZARD[.EC]
#	
#	WIZARD_DEMO_TOSERVER	;demo on ICLAS2 server
#
#		Sends all files into:
#			ICLAS2/SYS:
#
#			(Which is /n according to prefix, since all of the
#			subdirectories below are known to prefix.
#
#	All of the read-only PC/GEOS files are written into
#	SYS:\LOGIN\GEOS_SRC. The GFS utility then packs them
#	all into the humungous SYS:\LOGIN\GEOS_FS\GEOS_FS.GEO file.
#	Several other read-write files (including the .INI files)
#	and the bootstrap-related .GEO files are written into
#	SYS:\LOGIN\GEOWORKS.
#
#	NOTE: these directories must have already been created by the
#	sysop on the server.
#
###############################################################################
# Set up some global defaults
#
# ($g_rootdir is the top-level directory for the shipment. In most cases,
# this is also the root level for the PC/GEOS tree which is shipped,
# so $g_dir = $g_rootdir.)

g_rootdir=x

#
# By default, the Installed tree to send from is the CWD, which will
# either be /staff/pcgeos/Installed, or a branch/Installed dir.
#

g_branch=.

#
# Making some directories appear only once in the script,
# to make things easier to customize by site.
#
g_nevada="/n/company"
g_diskmakr="/n/diskmakr"
g_eng="/n/engeng"

#
# Product
#
g_product="ensemble"

#
# Media
#
g_media="diskset"

#
# Site.  Currently not used, but might be soon, to have site-specific
# ensemble versions, for example...
# 
g_site=`cat /staff/pcgeos/.GINSTALL_SITE_NAME`

#
# EC
#
g_ec="-n"
g_vm=""
g_ecChars=""
g_ecSuffix=""
m_listdirs=0
g_list=
m_test=0
m_debug=0

#
# Product directory to look for geodes, if any
#
g_productDir=""

#
# Machine
#
g_machine="desktop"

# Current directory shme.   Since "ship" may have been called from a
# bourne shell script which might have changed directories since it
# was first executed, the PWD variable may be incorrect.  We need to
# fix it so that "send" will work.

export PWD
PWD=`pwd`

# sparc machine - used as destination for bullet GFS ship -- parent
# directory of user's home dir

cd /staff/$USER/..
g_sparcDir=`pwd`
cd $PWD
#
# Modifiers
#
m_xip=0
m_penOnly=0
m_keyboardOnly=0

m_hwr=0
m_minimalApplications=0
m_minimalLibraries=0
m_minimalDrivers=0
m_minimalFonts=0
m_subminimalFonts=0
m_presentationFonts=0
m_noBitmaps=0
m_noPrinting=0
m_noDictionary=0
m_noHelpFiles=0
m_noFonts=0

m_noSetup=0
m_debugTools=0
m_demo=0
m_beta=0
m_comp=""
m_nuke=1
m_other_sdk_stuff=0
m_other_zoomer_sdk_stuff=0

mkdir=mkdir
cp=cp
pcsend=${pcsend-pcsend}
send=${send-send}

# Create a unique tmp directory so that this send won't interfere with other
# sends that may be happening.  PLEASE use this for temporary files.
tmpdir="/tmp/shipTmpDir.$$"
if [ ! -d $tmpdir ]; then
    mkdir $tmpdir
fi

# This will erase the temporary directory and its files upon script's normal
# completion or abnormal termination.
trap "rm -rf $tmpdir ; trap 0 1 2 3 15; exit 0" 0 1 2 3 15

###############################################################################
# Scan command line args 
###############################################################################
if [ $1 != list -a $1 != test ]; then
    set -x
fi

while [ $# -ne 0 ]; do
    case $1 in

	JEDI_DEMO_TOSERVER)\
			set - "$@" jedipc server nonec debugTools \
				   $g_nevada/jgerman.net 
			g_local=$g_nevada/local/jgerman.net ;;
	JEDI_DEMO_TOSERVER_EC)\
			set - "$@" jedipc server ec debugTools \
				   $g_nevada/jgerman.ec
			g_local=$g_nevada/local/jgerman.ec ;;
	JEDI_DEMO_TOSERVER_SAVED)\
			set - "$@" jedipc server debugTools \
				   $g_nevada/jgerman.sav ;;
	JEDI_DISKSET_TOSERVER)\
			set - "$@" jedipc server nonec debugTools \
				   $g_nevada/jgerman.net
			g_local=$g_nevada/local/jgerman.net ;;
	JEDI_DISKSET_TOSERVER_EC)\
			set - "$@" jedipc server ec debugTools \
				   $g_nevada/jgerman.ec
			g_local=$g_nevada/local/jgerman.ec ;;
	JEDI_GFS)\
			set - "$@" jedigfs gfs \
				   $g_sparcDir/jedigr;;
	JEDI_GFS_EC)\
			set - "$@" jedigfs gfs ec \
				   $g_sparcDir/jedigr;;
	JEDI_PC_GFS)\
			set - "$@" jedipcgfs gfs \
				   $g_sparcDir/jedigr;;
	JEDI_PC_GFS_EC)\
			set - "$@" jedipcgfs gfs ec \
				   $g_sparcDir/jedigr;;
	XIP_DEMO)\
			../Tools/scripts/shipXIP "XIP_DEMO"
			exit $? ;;
	XIP_JEDI)\
			../Tools/scripts/shipXIP "XIP_JEDI"
			exit $? ;;

	#
	# Check for path specification
	#

	/*)		g_rootdir="$1";;

	#
	# Check for product name
	#
	jedi)		g_product=jedi
			g_productDir=JEDI
			f_specdirtail=ProductFiles/Jedi;;

	jedipc)		g_product=jedipc
			g_productDir=JEDI
			f_specdirtail=ProductFiles/JediPC;;

	jedidist)	g_product=jedidist
			g_productDir=JEDI
			f_specdirtail=ProductFiles/JediPC;;

	jedigfs)	g_product=jedigfs
			g_productDir=JEDI
			f_specdirtail=ProductFiles/Jedi;;

	jedipcgfs)	g_product=jedipcgfs
			g_productDir=JEDI
			f_specdirtail=ProductFiles/Jedi;;

	#
	# Check for media type
	#

	diskset)	g_media=diskset;;
	server)		g_media=server;;
	rom)		g_media=rom;;
	ram)		g_media=ram;;
	gfs)		g_media=gfs;;

	#
	# Check for ec state
	#
	ec)		g_ec=""
			g_ecChars="ec"
			g_ecSuffix=".ec";;
	nonec)		g_ec="-n"
			g_ecChars=""
			g_ecSuffix="";;
	sendvm)		g_vm="-v";;
	list)		m_debug=1
			m_listdirs=1;;
	test)		m_debug=1
			m_test=1;;
	#
	# Check for machine type
	#
	desktop)	g_machine=desktop;;
	prototype)	g_machine=prototype;;
	grid)		g_machine=grid;;
	c_and_t)	g_machine=c_and_t;;
	gateway)	g_machine=gateway;;
	zeos)		g_machine=zeos;;

	#
	# Check for modifiers
	#
	xip)			m_xip=1;;
	penOnly)		m_penOnly=1;;
	keyboardOnly)		m_keyboardOnly=1;;

	hwr)			m_hwr=1;;
	minimalApplications)	m_minimalApplications=1;;
	minimalLibraries)	m_minimalLibraries=1;;
	minimalDrivers)		m_minimalDrivers=1;;
	minimalFonts)		m_minimalFonts=1;;
	subminimalFonts)	m_subminimalFonts=1;;
	presentationFonts) 	m_presentationFonts=1;;
	noBitmaps)		m_noBitmaps=1;;
	noPrinting)		m_noPrinting=1;;
	noDictionary)		m_noDictionary=1;;
	noHelpFiles)		m_noHelpFiles=1;;
	noFonts)		m_noFonts=1;;
	noSetup)		m_noSetup=1;;

	debugTools)		m_debugTools=1;;
	demo)			m_demo=1;;
	beta)			m_beta=1;;
	compress)		m_comp="-c";;
	noNuke)			m_nuke=0;;
	other_sdk_stuff)	m_other_sdk_stuff=1;;
	other_zoomer_sdk_stuff) m_other_zoomer_sdk_stuff=1;;
	
	*)		echo "invalid argument: $1"
			exit
			;;
    esac
    shift
done
if [ $m_debug = 0 ]; then
    set -x
fi
#
# Error check the command line
#

if [ $g_rootdir = "x" ]; then
	echo "No destination specified"
	exit
fi

############################################################################
#			Set up more variables
############################################################################
#
# Default: send PC/GEOS and all files to the root directory that was
# specified above as $g_rootdir.
#

g_dir=$g_rootdir

#
# Set up $g_general for later use:
#

g_general=$g_branch/ProductFiles/General


#
# Set up $f_specdir for later use:
#

f_specdir=$g_branch/$f_specdirtail

if [ $m_debug = 1 ]; then
    echo --- This is only a test. ---
    m_noFonts=1
    m_nuke=0
fi

if [ $m_listdirs = 1 ]; then
    cp=nop
    mkdir=nop
    pcsend=nop
    g_list="-l"
fi

if [ $m_test = 1 ]; then
    cp="echo cp"    
    mkdir="echo mkdir"
    pcsend="echo pcsend"
    g_list="-L"
fi

# Copy a loader file.  If listing directories, then just echo the
# first argument.  Otherwise, copy the appropriate (EC or non-EC) file
cpLoader() {
    if [ $m_listdirs = 1 ]; then
        echo $1
    else
	$cp $1/loader${g_ecChars}.exe $2
    fi
}

nop() {
    # do nothing
    echo -n
}

#
# Set a variable that indicates whether this product will run from
# or connected to a server.
#

f_server=0

if [ $g_media = "server" ]; then
    f_server=1
fi

if [ $g_media = "diskset" ]; then
    if [ $m_demo -eq 0 ]; then
	f_server=1
    fi
fi

send=$send" -u $g_list $g_ec $g_vm -d$g_dir"

# pass the -p flag for product-specific versions of geodes

sendp=$send" -p $g_productDir"

#
# Always send down the hardware versions of stuff to the GFS!
#
if [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then
	send=$sendp
fi

############################################################################
#			Clean the old directory
############################################################################
#
# Special case for Wizard, because we may want to delete more than just
# the PC/GEOS tree.
#

if  [ $m_nuke -eq 1 ]; then
    if [ \( $g_product = "jedigfs" -o $g_product = "jedipcgfs" \) \
		-a $g_media = "gfs" ]; then
	#
	# Don't nuke the dest dir, as it may be a link.
	#
	\rm -fr $g_dir/*
    else

	#
	# Std. Case (PC/GEOS tree = root of ship tree)
	# Nuke the PC/GEOS tree.
	#

    	\rm -fr $g_dir
	$mkdir -p $g_dir
    fi
fi

############################################################################
#		Send ISV software
############################################################################

#if [	$g_product = "jedipc" -o \
#	$g_product = "jedidist" -o \
#	$g_product = "jedi" -o \
#	$g_product = "jedigfs" -o \
#	$g_product = "jedipcgfs" ]; then
    #
    #  Standard case:  Copy all of the ISV software.
    #
#   $cp -r $f_specdir/isv${g_ecChars}/* $g_dir
#
#fi

############################################################################
#			Prepare the GEOS tree
############################################################################

$mkdir -p $g_dir/system

if [ $g_product = "jedi" ]; then

    #
    # Recursively copy the world, userdata, and system directories.
    # This copies any DIRNAME files, templates, help files, etc.
    #

    $cp -r $f_specdir/world $g_dir
    $cp -r $f_specdir/userdata $g_dir
    $cp -r $f_specdir/system $g_dir

    #
    #  Normal case -- copy world, userdata, system, etc.
    #
    if [ $g_media = "server" ]; then
	$cp -r $f_specdir/DEMO/world $g_dir
	$cp -r $f_specdir/DEMO/userdata $g_dir
	$cp -r $f_specdir/DEMO/system $g_dir
    fi

elif [ $g_product = "jedipc" -o $g_product = "jedidist" ]; then

    #
    #  Please do not add your product to this section.  If
    #  I change this for Jedi, it will dork your product.
    #
    $cp -r $f_specdir/DEMO/document $g_dir
    $cp -r $f_specdir/DEMO/privdata $g_dir

    $mkdir -p $g_dir/userdata/help
    $mkdir -p $g_dir/userdata/books
    $cp $f_specdir/DEMO/userdata/help/help.000 $g_dir/userdata/help
    $cp $f_specdir/DEMO/userdata/books/tutorial.000 $g_dir/userdata/books

    #
    # Local copies
    #
    $cp -r $f_specdir/DEMO/document $g_local
    $cp -r $f_specdir/DEMO/privdata $g_local

    $mkdir -p $g_local/userdata/help
    $mkdir -p $g_local/userdata/books
    $cp $f_specdir/DEMO/userdata/help/help.000 $g_local/userdata/help
    $cp $f_specdir/DEMO/userdata/books/tutorial.000 $g_local/userdata/books

elif [	$g_product = "jedipcgfs" -o \
	$g_product = "jedigfs" ]; then

    $cp -r $f_specdir/world $g_dir     

    #
    # For th' Jedi GFS, we want to copy certain default documents
    # down to th' GFS.
    #
    if [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then
	$mkdir -p $g_dir/document
	$cp $f_specdir/document/expense_.000 $g_dir/document
	$cp $f_specdir/document/book_rea.000 $g_dir/document
	$cp $f_specdir/document/wtromdb.000 $g_dir/document
	$mkdir -p $g_dir/userdata/help
	$mkdir -p $g_dir/userdata/books
	$cp $f_specdir/userdata/help/help.000 $g_dir/userdata/help/help.000
	$cp $f_specdir/userdata/books/tutorial.000 $g_dir/userdata/books
    fi		
fi

############################################################################
#			Create local PC/GEOS user tree if needed
############################################################################

f_usertree=0

#
# If required, now build the appropriate local directory structure
#
#

if [ $g_media != "gfs" ]; then
    #
    # Standard case
    #

    if [ $g_media = "diskset" -o $g_media = "ram" ]; then
	#
	# "diskset" or "ram" cases: (no user tree necessary)
	#

	g_userdir=$g_dir

    else
	#
	# "server" or "rom" cases:
	#

	f_usertree=1
	case $g_product in
	    jedi)	g_userdir=$g_dir/ramdisk;;
	    jedipc)	g_userdir=$g_nevada/local/jedi$g_ecChars ;;
	    jedidist)	g_userdir=$g_dir ;;
	esac

	#
	#  Create some standard directories.
	#

	if [ $m_debug = 0 ]; then
	    \rm -fr $g_userdir
	    $mkdir -p $g_userdir
	fi

    fi

    #
    # Recursively copy PRIVDATA, DOCUMENT, and DOSROOM files to the
    # user's local tree.  This copies the token database,
    # GEOS_DEV.000, document files, default launhcer, etc.
    #

    $cp -r $f_specdir/privdata $g_userdir
    $cp -r $f_specdir/document $g_userdir
    $cp -r $f_specdir/dosroom $g_userdir

    # For the in-house network demo, download other stuff as well

    if [ $g_media = "server" ]; then

        $cp -r $f_specdir/DEMO/privdata $g_userdir
        $cp -r $f_specdir/DEMO/document $g_userdir

    fi

    #
    # Copy the TOOLS (batch files, geohelp stuff, etc)
    #
    $cp $f_specdir/tools/* $g_userdir
    if [ $m_debugTools = 1 ]; then
	$cp $f_specdir/debug${g_ecChars}/* $g_userdir
    fi
fi

############################################################################
#			GEOS.INI
############################################################################

#
# Just copy the appropriate files from ProductFiles.  The network demo
# .ini files should be placed in the DEMO subdirectory under the
# specific ProductFiles directory.  There are separate copies for EC,
# non-EC, local, and net.
#
if [ $g_product = "jedi" -o \
     $g_product = "jedipc" -o \
     $g_product = "jedidist" ]; then

	if [ $g_media = "server" ]; then
	    $pcsend -n -d$g_userdir $f_specdir/DEMO/geos$g_ecChars.ini
	    $pcsend -n -d$g_dir $f_specdir/DEMO/net$g_ecChars.ini
	else
	    $pcsend -n -d$g_userdir  $f_specdir/geos$g_ecChars.ini
	    $pcsend -n -d$g_dir $f_specdir/net$g_ecChars.ini
	fi
fi

############################################################################
#			send FONT files
############################################################################
#
# fonts
#

if [ $m_noFonts = 0 ]; then

        if [ $m_minimalFonts -eq 1 ]; then

		$send $m_comp requiredFonts

	elif [ $m_subminimalFonts -eq 1 ]; then
	    $send $m_comp candtFonts
	elif [	$g_product = "jedi" -o \
		$g_product = "jedipc" -o \
		$g_product = "jedidist" -o \
		$g_product = "jedipcgfs" -o \
		$g_product = "jedigfs" ]; then
	    $send $m_comp jediFonts

       else
	    $send $m_comp fonts
       fi

    if [ $m_presentationFonts -eq 1 ]; then
        $send $m_comp funfonts newsfonts
    fi
fi



############################################################################
#			send APPLICATION files
############################################################################

#
# applications
#
# (Note that Wizard applications are handled at the end of this script.)
#

if [ $g_product = "jedi" -o \
	$g_product = "jedipc" -o \
	$g_product = "jedipcgfs" ]; then

     #export d_utilities
     #d_utilities = "world"

     #
     #  Main apps
     #
     $send jedistart jpref alarm homescreen transfer jdemo \
	japp jdm japptbk hpcalc jfinance jnotepad scrndmp jphone \
	jworld

     $sendp geocalcOnly reader solitaire

elif [ $g_product = "jedigfs" ]; then

     #
     # This clause is a hack.  We want to send down exactly the
     # Same geodes that are being used in the XIP image.  The product
     # directory is different for every geode, so we have to tell
     # send what product to use for each geode.  Sendp will only 
     # ship JEDI versions.  I honestly can't think of a better
     # way to do this right now.
     #
     # this hack assumes $send is bound to 'send', and that
     # -p flags that come later in the command line will override
     # earlier -p flags, which it does currently.
     #
     #
     #  Main apps
     #

     $send -p Borland jworld
     $send -p JediXIP jedistart homescreen jpref geocalcOnly transfer
     $send -p XIP alarm scrndmp
     $send -p JEDI reader
     $send solitaire japptbk jdm jphone jfinance hpcalc japp jnotepad jdemo

elif [ $g_product = "jedidist" ]; then

	#
	#  Need to send different apps for the distribution,
	#  for various reasons.
	#

     $send jedistart jpref alarm homescreen transfer jdemo \
	 scrndmp jworld

     $sendp geocalcOnly reader

fi


############################################################################
#			send LIBRARY files
############################################################################
 #
 # libraries
 #
if [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then

	#
	# These are the libraries that have to go into the GFS 'cuz
	# they're not XIP'd.
	#

	$send	cardid compresslib zdeck
	if [ $g_product = "jedipcgfs" ]; then
		$send jedidemo
	fi

elif [ $g_product = "jedi" -o $g_product = "jedipc" ]; then
	$send 	ansic borlandc cell mathOnly int8087 jmotif  \
		compresslib pen ruler sound parse \
		styles color ssmeta \
		cardid gadgets jlib jutils table pccomlib \
		rtcm p3 jnotes jotter jdb hpmlib jerr jedit \
		mtable jtable jwtime

	$sendp ssheet text ui key conview spool zcards pcmcia
    #
    #  For PC demo, need a few extra libraries.
    #
	    if [ $g_product = "jedipc" ]; then
	    	$send jedidemo parallel swap
	    fi

elif [ $g_product = "jedidist" ]; then
	$send \
		ansic borlandc cell mathOnly int8087 jmotif  \
		compresslib pen ruler sound parse \
		styles color ssmeta \
		cardid gadgets jlib jutils table pccomlib \
		rtcm p3 jotter jedit jwtime \
		mtable jtable jedidemo parallel swap

	$sendp ssheet text ui key conview spool zcards pcmcia

fi


############################################################################
#			send DRIVER files
############################################################################
#
# drivers
#
if [	$g_product = "jedi" -o \
	$g_product = "jedipc" -o \
	$g_product = "jedidist" -o \
	$g_product = "jedipcgfs" -o \
	$g_product = "jedigfs" ]; then
    #
    # (Mostly) Common drivers 
    #
	if [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then

	        $send	filestr vidmem \
			cidfs cidser
	else
	        $send \
		        nimbus kbd stream serialOnly \
			filestr vidmem nonts standard \
			cidfs cidser
	fi

    #
    # Printer drivers
    #
	$send 	jepson24 jpropx24 jcanon48 jpcl4 jdeskjet

    if [ $g_product = "jedipc" -o $g_product = "jedidist" ]; then

	#
	# Drivers for the jedi PC demo *only*
	#
	$send \
	    fs_drivers \
	    mouse_drivers \
	    mcga nopower nppcm swap_drivers

    elif [ $g_product = "jedi" ]; then   

       	$send \
	    bemm \
	    logiser msser msys bpen \
	    dscga bpower

    elif [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then

        #
	#  Drivers for the real jedi
	#

       	$send \
	    streamc game

	if [ $g_product = "jedigfs" ]; then
	    $send \
	    	jvideo 
	else 
	    $send \
	    	mcga
	fi

    fi
      
fi


############################################################################
#			send SETUP files
############################################################################
#
#

if [ $g_product = "jedigfs" -o $g_product = "jedipcgfs" ]; then
    #
    # Sadly, the PC Demo sticks the token_da.000 in privdata, but we
    # want the GFS to have it in the top level.
    ${pcsend-pcsend} -n $m_comp -d$g_dir $f_specdir/privdata/token_da.000

fi

############################################################################
#			send DEBUGGING-related files
############################################################################

#
# debugging tools
#
if [ $m_debugTools -eq 1 ]; then

	${pcsend-pcsend} -n -d$g_dir /staff/pcgeos/Tools/swat/Stub/LowMem/swat.exe
	${pcsend-pcsend} -n -d$g_dir /staff/pcgeos/Tools/com43/com43.com
	${pcsend-pcsend} -n -d$g_dir /staff/pcgeos/Tools/com43/pccom.com

fi

############################################################################
#			send INTERNAL TOOLS files
############################################################################
#
# unreleased tools
#
if [ 0 -eq 1 ]; then
    echo "sending unreleased tools"

    # Send resedit and setup.txt, for foreign partners
    # (Cheng: don't we need a different version of setup.exe?)

    $send $m_comp $g_nfs $g_ec $g_dir resedit

    ${pcsend-pcsend} -n -d$g_dir DOSAppl/Install/setup.txt
fi



############################################################################
#			send KERNEL and LOADER files
############################################################################
# This is done last, so that people won't try to log on to network
# demos in the middle of a ship
#
if [ $g_product = "jedipc" -o $g_product = "jedidist" ]; then

    $send lstrings
    $sendp kernel

    #
    # If we're sending something for PC consumption, use the
    # snazzy Jedi loader with a VGA splash screen
    #

    $send -p JediVGA loader


elif [ $g_media != gfs ]; then

    $send $m_comp lstrings kernel

    $send -p Text loader

fi


if [ $m_debug = 0 ]; then
	echo "Shipment completed."
else
	echo "--- Test completed. ---"
fi

