#! /bin/sh -

#
# This script provides a easy way to create the Installed tree of 
# international version of Jedi.
#
# Syntax:
#	jmakeIntlTreeFr (ALL | LOCALIZED) <version>
#
# Example:
#	jmakeIntlTreeFr ALL PC_DEMO
#
# ALL	-- copy every data files and geodes to the international Installed
#	   directory.
# LOCALIZED	-- copy only localized geodes to the international Installed
#		   directory.
#
# <version>	-- it is one of the following version:
#			PC_DEMO
#			PC_DEMO_EC
#			PC_XIP
#			PC_XIP_EC
#			PROTOTYPE
#

#
# IMPORTANT: When you use this script as the template to create another 
#            international version of the Installed tree, there is ONLY
#            several places you should change.
#		1) destDir
#		2) fileList, and
#		3) the variables used in fileList
#		4) scriptDir
#
# $Id: jmakeIntlTreeFr,v 1.5 95/09/22 13:44:18 cthomas Exp $
#

#
# Check for valid input parameter.
#
case $# in
0)	echo "usage: $0 (ALL | LOCALIZED) <version>. Please read the header of this script for details."
	exit 1 ;;
1)	echo "usage: $0 -- Not enough arguments."
	exit 1 ;;
2)	if [ $1 != "ALL" -a $1 != "LOCALIZED" ]; then
		echo "$0 -- The 1st argument is invalid."
		exit 1
	fi

	if [ $2 != "PC_DEMO" -a $2 != "PC_DEMO_EC" -a $2 != "PC_XIP" -a \
	     $2 != "PC_XIP_EC" -a $2 != "PROTOTYPE" ]; then
		echo "$0 -- The 2nd argument is invalid."
		exit 1
	fi

	if [ $2 = "PC_DEMO" -o $2 = "PC_XIP" ]; then
		ec=""
	elif [ $2 = "PC_DEMO_EC" -o $2 = "PC_XIP_EC" ]; then
		ec=ec
	fi;;

*)	echo "$0 -- Too many arguments."
	exit 1 ;;
esac

option=$1
version=$2

#
# Some of the geodes in this list are unnecessary, but they are there
# to make the "send" script happy.
# 
pcOnlyList="Library/Swap/swap${ec}.geo \
		Library/Jedi/JediDemo/jedidemo${ec}.geo \
		Library/CoProcessor/Int8087/int8087${ec}.geo \
		Driver/IFS/GEOS/ZoomFS/zoomfs${ec}.geo \
		Driver/Stream/Parallel/parallel${ec}.geo \
		Driver/IFS/DOS/CDROM/cdrom${ec}.geo \
		Driver/IFS/DOS/DRI/dri${ec}.geo \
		Driver/IFS/DOS/MS3/ms3${ec}.geo \
		Driver/IFS/DOS/MSNet/msnet${ec}.geo \
		Driver/IFS/DOS/OS2/os2${ec}.geo \
		Driver/IFS/RFSD/rfsd${ec}.geo \
		Driver/Mouse/AbsGen/absgen${ec}.geo \
		Driver/Mouse/GenMouse/genmouse${ec}.geo \
		Driver/Mouse/KBMouse/kbmouse${ec}.geo \
		Driver/Mouse/LogiSer/logiser${ec}.geo \
		Driver/Mouse/MSBus/msbus${ec}.geo \
		Driver/Mouse/MSSer/msser${ec}.geo \
		Driver/Mouse/MSys/msys${ec}.geo \
		Driver/Mouse/PS2/ps2${ec}.geo \
		Driver/Power/NoPower/nopower${ec}.geo \
		Driver/Swap/Disk/disk${ec}.geo \
		Driver/Swap/EMS/EMM/emm${ec}.geo \
		Driver/Swap/ExtMem/extmem${ec}.geo \
		Driver/Swap/XMS/xms${ec}.geo \
		Driver/Video/Dumb/MCGA/mcga${ec}.geo"

#
# Set the appropriate flags for the file path.
#
case $version in
PC_DEMO)
	ec=""
	xip=""
	jxip=JEDI/
	jedif=""
	srcBranch=pc

	worldtime=Appl/Jedi/WorldTime/worldtime${ec}.geo

	mtable=Library/Extensions/MTable/mtable${ec}.geo
	math=Library/Math/math${ec}.geo

	serial=Driver/Stream/Serial/serial${ec}.geo
	netware=Driver/IFS/DOS/NetWare/${xip}netware${ec}.geo
	gfs=Driver/IFS/GEOS/MegaFile/${xip}megafile${ec}.geo
	jpen=Driver/Mouse/LogiBus/logibus${ec}.geo
	jpower=Driver/Power/NoPowerPCMCIA/nppcm${ec}.geo
	jkbd=Driver/Keyboard/kbd.geo
	soundD=Driver/Sound/Standard/standard${ec}.geo
	ucD=""

	loader=Loader/JediVGA/loader${ec}.exe ;;
PC_DEMO_EC)
	ec=ec
	xip=""
	jxip=JEDI/
	jedif=""
	srcBranch=pc.ec

	worldtime=Appl/Jedi/WorldTime/worldtime${ec}.geo

	mtable=Library/Extensions/MTable/mtable${ec}.geo
	math=Library/Math/math${ec}.geo

	serial=Driver/Stream/Serial/serial${ec}.geo
	netware=Driver/IFS/DOS/NetWare/${xip}netware${ec}.geo
	gfs=Driver/IFS/GEOS/MegaFile/${xip}megafile${ec}.geo
	jpen=Driver/Mouse/LogiBus/logibus${ec}.geo
	jpower=Driver/Power/NoPowerPCMCIA/nppcm${ec}.geo
	jkbd=Driver/Keyboard/kbd.geo
	soundD=Driver/Sound/Standard/standard${ec}.geo
	ucD=""

	loader=Loader/JediVGA/loader${ec}.exe ;;
PC_XIP)
	ec=""
	xip=XIP/
	jxip=JediXIP/
	jedif=XIP/
	srcBranch=pcxip

	worldtime=Appl/Jedi/WorldTime/worldtime${ec}.geo

	mtable=Library/Extensions/MTable/mtable${ec}.geo
	math=Library/Math/${XIP}math${ec}.geo

	serial=Driver/Stream/Serial/${xip}serial${ec}.geo
	netware=Driver/IFS/DOS/NetWare/${xip}netware${ec}.geo
	gfs=Driver/IFS/GEOS/MegaFile/${xip}megafile${ec}.geo
	jpen=Driver/Mouse/LogiBus/logibus${ec}.geo
	jpower=Driver/Power/NoPowerPCMCIA/nppcm${ec}.geo
	jkbd=Driver/Keyboard/kbd.geo
	soundD=Driver/Sound/Standard/standard${ec}.geo
	ucD=""

	loader=Loader/EMMXIP/loader${ec}.exe ;;
PC_XIP_EC)
	ec=ec
	xip=XIP/
	jxip=JediXIP/
	jedif=XIP/
	srcBranch=pcxip.ec

	worldtime=Appl/Jedi/WorldTime/worldtime${ec}.geo

	mtable=Library/Extensions/MTable/mtable${ec}.geo
	math=Library/Math/${XIP}math${ec}.geo

	serial=Driver/Stream/Serial/${xip}serial${ec}.geo
	netware=Driver/IFS/DOS/NetWare/${xip}netware${ec}.geo
	gfs=Driver/IFS/GEOS/MegaFile/${xip}megafile${ec}.geo
	jpen=Driver/Mouse/LogiBus/logibus${ec}.geo
	jpower=Driver/Power/NoPowerPCMCIA/nppcm${ec}.geo
	jkbd=Driver/Keyboard/kbd.geo
	soundD=Driver/Sound/Standard/standard${ec}.geo
	ucD=""

	loader=Loader/EMMXIP/loader${ec}.exe ;;
PROTOTYPE)
	ec=""
	xip=XIP/
	jxip=JediXIP/
	jedif=JediXIP/
	srcBranch=jedixip

	pcOnlyList=""

	worldtime=Appl/Jedi/WorldTime/Borland/worldtime${ec}.geo

	mtable=Library/Extensions/MTable/JEDI/mtable${ec}.geo
	math=Library/Math/JediXIP/math${ec}.geo

	serial=Driver/Stream/Serial/JediXIP/serial${ec}.geo
	netware=""
	gfs=Driver/IFS/GEOS/VGFS/JediXIP/vgfs${ec}.geo
	jpen=Driver/Mouse/JediPen/jpen${ec}.geo
	jpower=Driver/Power/Jedi/jpwr${ec}.geo
	jkbd=Driver/Keyboard/Jedi/jkbd.geo
	soundD=Driver/Sound/Standard/JEDI/standard${ec}.geo
	ucD=Driver/uC/uc${ec}.geo

	loader=Loader/JediXIP/loader${ec}.exe ;;
esac

prefixDir=/staff/pcgeos/JediFrench
srcBaseDir=/n/company/jedi/dest/fr
srcDir=$srcBaseDir/$srcBranch
engDir=/staff/pcgeos/ReleaseJedi

tempDir="tmp.$$"
destDir=$prefixDir/Installed
scriptDir=$prefixDir/Tools/scripts
fileList="Library/Kernel/${jedif}geos${ec}.geo \
		Library/AnsiC/${xip}ansic${ec}.geo \
		Library/Math/Compiler/BorlandC/${xip}borlandc${ec}.geo \
		Library/Cards/${jxip}cards${ec}.geo \
		Library/Cell/${xip}cell${ec}.geo \
		Library/Color/color${ec}.geo \
		Library/ConView/${jxip}conview${ec}.geo \
		Library/Jedi/DB/db${ec}.geo \
		Library/Extensions/Gadgets/${xip}gadgets${ec}.geo \
		Library/Jedi/HPMLib/hpmlib${ec}.geo \
		Library/Jedi/JEdit/jedit${ec}.geo \
		Library/Jedi/JError/jerror${ec}.geo \
		Library/Jedi/JLib/jlib${ec}.geo \
		Library/Jedi/JediUI/Jotter/jotter${ec}.geo \
		Library/Jedi/JTable/${xip}jtable${ec}.geo \
		Library/Jedi/JUtils/${xip}jutils${ec}.geo \
		Library/Jedi/JWTime/${jedif}jwtime${ec}.geo \
		Library/HWR/Key/${jxip}key${ec}.geo \
		Library/HWR/PalmP3/${xip}palm${ec}.geo \
		Library/PCMCIA/${jxip}pcmcia${ec}.geo \
		Library/Pen/${xip}pen${ec}.geo \
		Library/RTCM/${xip}rtcm${ec}.geo \
		Library/Ruler/${xip}ruler${ec}.geo \
		Library/Sound/${xip}sound${ec}.geo \
		Library/SpecUI/JMotif/${xip}jmotif${ec}.geo \
		Library/Spool/${jxip}spool${ec}.geo \
		Library/Spreadsheet/${jxip}ssheet${ec}.geo \
		Library/Styles/${xip}styles${ec}.geo \
		Library/Text/${jxip}text${ec}.geo \
		Library/Extensions/Table/${xip}table${ec}.geo \
		Library/Jedi/Notes/notes${ec}.geo \
		Library/Parse/${xip}parse${ec}.geo \
		Library/PCCom/${xip}pccom${ec}.geo \
		Library/SSMeta/${xip}ssmeta${ec}.geo \
		Library/User/${jxip}ui${ec}.geo \
		Driver/IFS/DOS/MS4/${xip}ms4${ec}.geo \
		Driver/Font/Nimbus/nimbus${ec}.geo \
		Driver/Stream/stream${ec}.geo \
		Driver/Task/NonTS/nonts${ec}.geo \
		Appl/Jedi/Alarm/${xip}alarm${ec}.geo \
		Appl/GeoCalc/${jxip}geocalc${ec}.geo \
		Appl/Jedi/HomeScreen/${jedif}homescreen${ec}.geo \
		Appl/Reader/JEDI/reader${ec}.geo \
		Appl/Jedi/Transfer/${jedif}trans${ec}.geo \
		Appl/Jedi/JPref/${jedif}jpref${ec}.geo \
		Appl/Jedi/ScreenDump/${xip}screendump${ec}.geo \
		Appl/Jedi/JDemo/jdemo${ec}.geo \
		Appl/Startup/JStartup/${jxip}jstartup${ec}.geo \
		Appl/Games/Solitaire/${jxip}soli${ec}.geo \
		Appl/Jedi/ApptBk/apptbk${ec}.geo \
		Appl/Jedi/DM/dm${ec}.geo \
		Appl/Jedi/Phone/phone${ec}.geo \
		Appl/Jedi/Finance/finance${ec}.geo \
		Appl/Jedi/HPCalc/hpcalc${ec}.geo \
		Appl/Jedi/JApp/japp${ec}.geo \
		Appl/Jedi/Notepad/notepad${ec}.geo \
		Library/CardID/cardid${ec}.geo \
		Library/Compress/compress${ec}.geo \
		Driver/PCMCIA/CID/CIDFS/cidfs${ec}.geo \
		Driver/PCMCIA/CID/CIDSer/cidser${ec}.geo \
		Driver/Stream/Filestr/filestr${ec}.geo \
		Driver/Video/Dumb/VidMem/vidmem${ec}.geo \
		Driver/Video/Dumb/Jedi/jvideo${ec}.geo \
		Driver/Printer/DotMatrix/Canon48/JEDI/canon48j${ec}.geo \
		Driver/Printer/DotMatrix/Epson24/JEDI/epson24j${ec}.geo \
		Driver/Printer/DotMatrix/Propx24/JEDI/propx24j${ec}.geo \
		Driver/Printer/HP/Deskjet/JEDI/deskjetj${ec}.geo \
		Driver/Printer/HP/Pcl4/JEDI/pcl4j${ec}.geo \
		Library/Game/game${ec}.geo \
		Library/StreamC/streamc${ec}.geo \
		${worldtime} \
		${mtable} \
		${math} \
		${serial} \
		${gfs} \
		${netware} \
		${loader} \
		${jpen} \
		${jpower} \
		${jkbd} \
		${soundD} \
		${ucD} \
		${pcOnlyList} \
		ProductFiles/Jedi/privdata/token_da.000"

#		Appl/Art/Decks/ZoomDeck/zoomdeck.vm
#		Loader/geos.str
#		ProductFiles/Jedi/userdata/help/help.000
#		ProductFiles/Jedi/userdata/books/tutorial.000

#		ProductFiles/Jedi/document/appt.adb
#		ProductFiles/Jedi/document/book_rea.000
#		ProductFiles/Jedi/document/compact_.gdb
#		ProductFiles/Jedi/document/expense_.000
#		ProductFiles/Jedi/document/finance.fdb
#		ProductFiles/Jedi/document/jotter.000
#		ProductFiles/Jedi/document/jwtime.wdb
#		ProductFiles/Jedi/document/master.mdb
#		ProductFiles/Jedi/document/notepad.ndb
#		ProductFiles/Jedi/document/phone.pdb
#		ProductFiles/Jedi/document/wtromdb.000

PWD=`pwd`
export PWD

echo "Go to ${srcDir}."
cd $srcDir

#
# Copy all the all files to document directory.
#
if [ -d document ]; then
echo "Copy files from document/* to ${destDir}/ProductFiles/Jedi/document ..."
\rm document/wtromdb.000
\rm document/jwtime.wdb
cp document/* ${destDir}/ProductFiles/Jedi/document
fi

#
# Copy all the files to userdata directory.
#
if [ -d userdata ]; then
echo "Copy files from userdata/* to ${destDir}/ProductFiles/Jedi/document ..."
cp -r userdata/* ${destDir}/ProductFiles/Jedi/userdata/*
fi

#
# Move the localized geodes to a big whole directory.
#
echo "Go to the parent directory; create the temporary directory ${tempDir}. "
cd ..
mkdir $tempDir

echo "Start copying files from ${srcDir} to ${tempDir}."
if ${scriptDir}/copyToOneDir $srcDir $tempDir
then
    echo "Restore Unix file names..."
    (cd $tempDir; ${scriptDir}/fixDOSnames $ec)

    #
    # Copy some specific files first before we start the massive copy.
    #
    if [ -f ${tempDir}/zoomdeck.vm ]; then
	echo "Copy zoomdeck.vm to ${destDir}/Appl/Art/Decks/ZoomDeck..."
	cp ${tempDir}/zoomdeck.vm ${destDir}/Appl/Art/Decks/ZoomDeck/.
    fi

    if [ -f ${tempDir}/geos.str ]; then
	echo "Copy geos.str to ${destDir}/Loader ... "
	cp ${tempDir}/geos.str ${destDir}/Loader/.
    fi

    echo "Start moving files to the corresponding directories in ${destDir}..."
    ${scriptDir}/makeIntlTree $option $tempDir $destDir "$fileList"
    if [ $? -eq 0 ]; then
	echo "Moving files done, cleaning up..."
	\rm -fr $tempDir
	#
	# Special case:  We need the (untranslated) language-specific
	# keyboard driver from the ReleaseJedi tree in the destination
	# tree.
	#
	\cp $engDir/Installed/Driver/Keyboard/Jedi/French/jkbd_fr.geo \
	    $destDir/Driver/Keyboard/Jedi/jkbd.geo
	if [ $? -ne 0 ]; then
	    echo "Could not fetch localized keyboard driver"
	    exit 1
        fi

	cd $PWD
	exit 0
    fi
    \rm -fr $tempDir
    exit 1
else
    \rm -fr $tempDir
    exit 1
fi
