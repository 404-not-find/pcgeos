#!/usr/public/perl
# -*- perl -*-
##############################################################################
#
# 	Copyright (c) Geoworks 1996 -- All Rights Reserved
#       GEOWORKS CONFIDENTIAL
#
# PROJECT:	PCGEOS
# MODULE:	IR
# FILE: 	irparse
# AUTHOR: 	Paul Canavese, Apr  2, 1996
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	pjc	4/ 2/96   	Initial Revision
#
# DESCRIPTION:
#	Parses DATA TRANSFER frames from a SIR-Probe analyzer capture.
#
#	$Id: irparse,v 1.3 96/04/03 11:39:43 canavese Exp $
#
###############################################################################

if ( !"@ARGV" ) {

	print "Usage: irparse <filename>\n\n";
	print "       Parses DATA TRANSFER frames from an SIR-Probe\n";
	print "       analyzer capture.\n\n";
	exit;
}

open(DATAFILE, "@ARGV");
while (<DATAFILE>) {

    #print "+ $_";
    chop($_);

    if ( /PARSED FRAME/i ) {

	$framenum="$_";
	$framenum =~ s/[\s]+([\d]+)[\s]+.*/\1/;
	$display="false";
	next;
    }

    if ( /C\/R BIT/ ) {

	$crbit="$_";
	$crbit =~ s/[^:]*: ([\d]+)/\1/;
	next;
    }

    if ( /Frame type/ ) {

	if ( /DATA TRANSFER/ ) {
	    $display="true";
	} else {
	    $display="false";
	}
	next;
    }

    if ( /User data length/ ) {

	if ( $display eq "true" ) {
	    $datalength="$_";
	    $datalength =~ s/[^:]*: ([\d]+)/\1/;

	    print "\n_________________________________________________________________\n";
	    print "Frame: $framenum\n";
	    print "C/R bit: $crbit\n";
	    print "Data length: $datalength\n";
	    &ParseDataLines();
	    next;
	} else {
	    next;
	}
    }
}

#
# Slap all the hex values into one array, then pass it on to ParseData().
#
sub ParseDataLines {

    local($data)="";

    while (<DATAFILE>) {

	chop($_);

	if ( /Bytes with transparency/ ) {
	    &ParseData("$data");
	    return;
	} else {
	    $data="$data $_";
	}

    }
}

#
# 
#
sub ParseData {

    @values = reverse(split(" ", "@_"));

    $ttpcredit=pop(@values);
    print "TTP Credit: $ttpcredit\n";
    
    $cdatalength=hex(pop(@values));
    #print "Control data length: $cdatalength\n";
    
    if ( $cdatalength > 0 ) {
	print "Control data:\n";
	&DisplayBytes("$cdatalength");
    }
    
    $rdatalength = $datalength - $cdatalength - 2;
    if ( $rdatalength > 0 ) {
	print "Regular data:\n";
	&DisplayBytes("$rdatalength");
    }

    if ( pop(@values) ) {
	print "Warning: extra data\n";
    }
}

sub DisplayBytes {

    local(@values2)=@values;

    $byteCount="@_";
    #print "Displaying $byteCount bytes\n";

    while ( $byteCount ) {

	if ( $byteCount > 16 ) {
	    $lineCount=16;
	    $byteCount-=16;
	} else {
	    $lineCount="$byteCount";
	    $byteCount=0;
	}

	for ( 1..$lineCount ) {
	    $value = pop(@values);
	    $value =~ s/^0x//;
	    print "${value}h ";
	}
	print "\n";
	for ( 1..$lineCount ) {
	    $ascii=hex(pop(@values2));
	    if ( $ascii >= 32 && $ascii <= 126 ) {
		printf " %c  ", $ascii;
	    } else {
		print "    ";
	    }
	}
	print "\n\n";
    }
}

