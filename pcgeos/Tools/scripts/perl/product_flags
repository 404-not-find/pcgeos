#!/usr/public/perl
##############################################################################
#
# 	Copyright (c) GeoWorks 1995 -- All Rights Reserved
#
# PROJECT:	GEOS Tools
# MODULE:	System Makefiles
# FILE: 	product_flags
# AUTHOR: 	Adam de Boor, Feb 23, 1995
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	ardeb	2/23/95		Initial Revision
#       jacob   9/28/96		Ported to Perl
#
# DESCRIPTION:
#	A simple script to produce additional flags for a tool based on the
#	product being made. This is normally invoked by things in geos.mk.
#
#   	The additional flags needed for using the tool to create something
#   	for the product are echoed to standard output, there to be captured
#   	by the shell's command substitution mechanism and fed to the tool
#   	in question.
#
# USAGE:
#	product_flags <tool> <product> [<tool-specific args>]
#
#	$Id: product_flags,v 1.16 97/11/24 17:30:41 kho Exp $
#
###############################################################################

#
# Set some defaults for the variables we use at the end of the case:
#   ht	    = hardware type; will be defined as the value for the HARDWARE_TYPE
#	      variable (or concatenated to HARDWARE_TYPE_ if the tool doesn't
#	      do string comparisons of constants in its conditionals)
#   flags   = flags to pass; in Esp/C syntax
#   product = name of the product; defaults to passed name, but some things
#	      override (e.g. to go back to non-xip name)
#   xip	    = if product is full execute-in-place; set to "yes" if so, but
#	      initially empty
#
$ht="PC";
$flags="";
$product=$ARGV[1];
$xip="";
$lobj="";

# "preprocess" the product directory name to detect and strip features
# out of the product name that could be applied to any product.  The variable
# postFlags contains flags for this feature that should be tacked on
# after we figure out the normal product's flags
#

$postFlags='';

while (1) {
    if ($product =~ s/_?SSPROFILE$//) {

	$postFlags .= ' -DSINGLE_STEP_PROFILING=TRUE';

    } elsif ($product =~ s/_?WIN32$//) {

	$postFlags .= ' -DWIN32';

    } elsif ($product =~ s/_?ATS$//) {

	$postFlags .= ' -DAUTOMATIC_TESTING_ENABLED=TRUE';
 
    }else {

	last;

    }
}


#
# Now the specific additional flags go into the $flags variable.
#
# The case at the end will take care of removing any flags that aren't
# appropriate for a tool, or transforming them into ones the tool can use. So
# don't be afraid to put -2 in $flags if it's a DBCS product, or
# -DSOMETHING=STRING (where STRING is non-numeric) if you need to. The -2 will
# be removed, and the = converted to _ as appropriate.
#
# You can, of course, look at $1 to determine what tool you're producing flags
# for and base your setting of $flags on that. As you wish...
#
if ($product eq "XIP") {
    $xip="yes";
    $flags="-DEMM_XIP";
} elsif ($product eq "BBX2001") {
    $product="BBX2001";
} elsif ($product eq "NDO2000") {
    $product="NDO2000";
#    the following flag is now auto-generated via $product
#    for goc, asm, uic, and glue
#    $flags="-DPRODUCT_NDO2000";    
} elsif ($product eq "GPC1999") {
    $product="GPC1999";
#    the following flag is now auto-generated via $product
#    for goc, asm, uic, and glue
#    $flags="-DPRODUCT_GPC1999";
} elsif ($product eq "Bullet") {
    $product="Bullet";
    $ht="BULLET";
} elsif ($product eq "BulletXIP") {
    $product="Bullet";
    $ht="BULLET";
    $xip="yes";
    $flags="-DBULLET_XIP";
} elsif ($product eq "JediXIP") {
    $product="JEDI";
    $ht="JEDI";
    $xip="yes";
    $flags="-DJEDI_XIP";
} elsif ($product eq "JediXIPDbg") {
    $product="JEDI";
    $ht="JEDI";
    $xip="yes";
    $flags="-DJEDI_XIP -DXIP_DEBUGGING_VERSION=TRUE";
} elsif ($product eq "Jedi") {
    $product="JEDI";
    $ht="JEDI";
} elsif ($product eq "JEDI") {
    $ht="JEDI";
} elsif ($product eq "DWP") {
} elsif ($product eq "MULTILANG") {
    $product="MULTILANG";
} elsif ($product eq "NIKE") {
    $ht="NIKE";
} elsif ($product eq "NIKE_XIP") {
    $ht="NIKE_XIP";
    $xip="yes";
} elsif ($product eq "YAGO") {
    $ht="YAGO";
} elsif ($product eq "YAGO_XIP") {
    $ht="YAGO_XIP";
    $xip="yes";
} elsif ($product eq "NIKE_EUROPE") {
    $product="NIKE";
    $flags="-DNIKE_EUROPE";
} elsif ($product eq "NIKE_UK") {
    $product="NIKE";
    $flags="-DNIKE_EUROPE -DNIKE_UK";
} elsif ($product eq "NIKE_GERMAN") {
    $product="NIKE";
    $flags="-DNIKE_EUROPE -DNIKE_GERMAN";
} elsif ($product eq "NIKE_DUTCH") {
    $product="NIKE";
    $flags="-DNIKE_EUROPE -DNIKE_DUTCH";
} elsif ($product eq "NIKE_GERMAN_XIP") {
    $ht="NIKE_XIP";
    $product="NIKE_XIP";
    $flags="-DNIKE_EUROPE -DNIKE_GERMAN";
    $xip="yes";
} elsif ($product eq "NIKE_DUTCH_XIP") {
    $ht="NIKE_XIP";
    $product="NIKE_XIP";
    $flags="-DNIKE_EUROPE -DNIKE_DUTCH";
    $xip="yes";
} elsif ($product eq "NIKE_GERMAN_DUTCH") {
    $product="NIKE";
    $flags="-DNIKE_EUROPE -DNIKE_GERMAN_DUTCH -DNIKE_GERMAN -DNIKE_DUTCH";
} elsif ($product eq "DBCS") {
    $flags="-2 -DDO_DBCS";
    $lobj="DBCS";
} elsif ($product eq "DBCSXIP") {
    $flags="-2 -DDO_DBCS -DEMM_XIP";
    $xip="yes";
    $lobj="DBCS";
} elsif ($product eq "PIZZA") {
    $flags="-2 -DDO_DBCS -DDO_PIZZA";
    $lobj="PIZZA DBCS";
} elsif ($product eq "DOVE") {
    $flags="-2 -DDO_DBCS -DDO_DOVE";
    $lobj="DBCS";
    $ht="DOVE";
} elsif ($product eq "DOVEDEMO") {
    $product="DOVE";
    $flags="-2 -DDO_DBCS -DDO_DOVE";
    $lobj="DBCS";
} elsif ($product eq "DOVEXIP") {
    $product="DOVE";
    $flags="-2 -DDO_DBCS -DDO_DOVE -DDOVE_XIP";
    $xip="yes";
    $lobj="DBCS";
    $ht="DOVE";
} elsif ($product eq "DOVEDEMOXIP") {
    $product="DOVE";
    $flags="-2 -DDO_DBCS -DDO_DOVE -DEMM_XIP";
    $xip="yes";
    $lobj="DBCS";
} elsif ($product eq "PCV") {
    $flags="-2 -DDO_DBCS -DDO_PIZZA";
    $lobj="PIZZA DBCS";
} elsif ($product eq "Profile") {
} elsif ($product eq "ZoomerXIP") {
    $product="Zoomer";
    $ht="ZOOMER";
    $xip="yes";
    $flags="-DZOOMER_XIP";
} elsif ($product eq "Zoomer") {
    $ht="ZOOMER";
} elsif ($product eq "RESPG2") {
    $lobj="RESPONDER";
    $product="RESPONDER";
    $ht="RESPG2";
} elsif ($product eq "RESPG2XIP") {
    $xip="yes";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $ht="RESPG2";
} elsif ($product eq "RESPONDER") {
    $lobj="RESPONDER";
    $ht="RESPONDER";
} elsif ($product eq "RESPXIP_SF") {
    # for ease in creating a "send-forever" version of the mailbox library
    # for responder testing
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP -DPERPETUAL_SEND";
    $xip="yes";
} elsif ($product eq "RESPONDER_SF") {
    # for ease in creating a "send-forever" version of the mailbox library
    # for responder testing
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP -DPERPETUAL_SEND";
} elsif ($product eq "RESPDEMO") {
    $lobj="RESPONDER";
    $product="RESPONDER";
} elsif ($product eq "RESPDEMOXIP") {
    $xip="yes";
    $flags="-DEMM_XIP";
    $lobj="RESPONDER";
    $product="RESPONDER";
} elsif ($product eq "RESPXIP") {
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP";
    $xip="yes";
} elsif ($product eq "RESPXIPDBG") {
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP -DXIP_DEBUGGING_VERSION=TRUE";
    $xip="yes";
} elsif ($product eq "THAI") {
    $flags="-DDO_THAI";
} elsif ($product eq "THAIXIP") {
    $xip="yes";
    $flags="-DEMM_XIP -DDO_THAI";
} elsif ($product eq "RESPONDERTHAI") {
    $lobj="RESPONDER";
    $ht="RESPONDER";
    $flags="-DDO_THAI";
    $product="RESPONDER";
} elsif ($product eq "RESPDEMOTHAI") {
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DDO_THAI";
} elsif ($product eq "RESPDEMOTHAIXIP") {
    $xip="yes";
    $flags="-DEMM_XIP -DDO_THAI";
    $lobj="RESPONDER";
    $product="RESPONDER";
} elsif ($product eq "RESPTHAIXIP") {
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP -DDO_THAI";
    $xip="yes";
} elsif ($product eq "RESPTHAIXIPDBG") {
    $ht="RESPONDER";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DRESP_XIP -DXIP_DEBUGGING_VERSION=TRUE -DDO_THAI";
    $xip="yes";
} elsif ($product eq "SPOCK") {
    $ht="SC450";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DSC400_COMMON=TRUE";
} elsif ($product eq "SPOCKXIP") {
    $ht="SC450";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $flags="-DSC400_COMMON=TRUE";
    $xip="yes";
} elsif ($product eq "SC400") {
    $ht="SC400";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $xip="yes";
    $flags="-DVOLATILE_XIP_IMAGE=TRUE -DSC400_COMMON=TRUE";
} elsif ($product eq "SC450") {
    $ht="SC450";
    $lobj="RESPONDER";
    $product="RESPONDER";
    $xip="yes";
    $flags="-DVOLATILE_XIP_IMAGE=TRUE -DSC400_COMMON=TRUE";
} elsif ($product eq "Gulliver") {
    $ht="GULLIVER";
} elsif ($product eq "GulliverXIP") {
    $xip="yes";
    $ht="GULLIVER";
    $flags="-DGULLIVER_XIP";
    $product="Gulliver";
} elsif ($product =~ /^PENE/) {
    if ( $product =~ /_OP1$/ ) {
    	$flags .= " -DPENELOPE_OP1";
    }
    if ( $product =~ /DEMO/ ) {
	$ht="PC";
	if ( $product =~ /XIP/ ) {
	    $flags .= " -DEMM_XIP";
	    $xip="yes";
	}
    } else {
	$ht="PENELOPE";
	if ( $product =~ /XIP/ ) {
	    $flags .= " -DPENE_XIP -DPENELOPE_XIP";
	    $xip="yes";
	    if ( $product =~ /DBG/ ) {
		$flags .= " -DXIP_DEBUGGING_VERSION=TRUE";
	    }
	}
    }
    $lobj="PENELOPE";
    $product="PENELOPE";
} elsif ($product eq "BOR1") {
    $ht="BOR1";
    $lobj="BOR1";
} elsif ($product eq "FULL_SCREEN" || $product eq "" ) {
    # default non-product...
} elsif ($product =~ /XIP$/) {
    # If we have a miscellaneous XIP target, try to use some default
    # rules to get the right behavior.

    # Create rootname which contains everything but the XIP or _XIP,
    # all in lower case.  This is used to create the other variables.
    $rootname = $product;
    $rootname =~ s/[_]{0,1}XIP$//;
    $ht=$rootname;
    $ht =~ tr/a-z/A-Z/;
    $rootname =~ tr/A-Z/a-z/;
    $xip="yes";
    $flags="-D" . $ht . "_XIP";
    # Capitalized version of $ht
    $product=substr($ht,0,1) . substr($rootname,1);
} elsif ($product =~ /DBCS$/) {
    # If we have a miscellaneous DBCS target, try to use some default
    # rules to get the right behavior.

    # Create rootname which contains everything but the DBCS or _DBCS,
    # all in lower case.  This is used to create the other variables.
    $flags="-2 -DDO_DBCS";
    $rootname = $product;
    $rootname =~ s/[_]{0,1}DBCS$//;
    $ht=$rootname;
    $ht =~ tr/a-z/A-Z/;
    $rootname =~ tr/A-Z/a-z/;
    $xip="yes";
    $flags="-2 -DDO_DBCS";
    $lobj="DBCS";
    # Capitalized version of $ht
    $product=substr($ht,0,1) . substr($rootname,1);
}

$flags .= $postFlags;

#
# Now put out the flags in the proper format for the tool:
#
#   esp:    can handle string comparison in conditionals, so we
#	    define PRODUCT and HARDWARE_TYPE to contain the strings
#	    in our $product and $ht variables. FULL_EXECUTE_IN_PLACE
#	    we set to TRUE if $xip is non-empty
#
#   glue, uic:
#   	    can only check for things being defined, so append $product
#	    to PRODUCT_ and $ht to HARDWARE_TYPE_. FULL_EXECUTE_IN_PLACE
#	    just gets defined, if $xip is non-empty.
#
#   highc, goc:
#   	    like glue and uic, but also doesn't know what to do with the -2
#	    flag, so strip that out
#
#   loc:
#   	    only understands about the -2 flag, no -D flags
#
$tool = $ARGV[0];
if ($tool eq "esp" ) {
    if ($xip) {
	$flags="$flags -DPRODUCT_$product -DFULL_EXECUTE_IN_PLACE=TRUE -D_FXIP=TRUE";
    } else {
	$flags="$flags -DPRODUCT_$product -D_FXIP=FALSE";
    }
    $allflags = "-DPRODUCT=$product $flags -DHARDWARE_TYPE=$ht";
    $allflags =~ s/\s+/ /g;
    print $allflags, "\n";
} elsif ($tool =~ /highc|goc|bcc/) {
    if ($xip) {
	$flags="$flags -DFULL_EXECUTE_IN_PLACE";
    }
    foreach $i (split(" ", "-DPRODUCT_$product $flags -DHARDWARE_TYPE_$ht")) {
	if ($i eq "-2" ) {
	    if ($tool eq "goc") {
		print "$i ";
	    } else {
		; # do nothing
	    }
	} elsif ($i =~ /-D.*=[A-Za-z].*/) {
	    $i =~ tr/=/_/; 
	    print "$i ";
	} else {
	    print "$i ";
	}
    }
    print "\n";
} elsif ($tool eq "glue") {
    if ($xip) {
	$flags="$flags -DFULL_EXECUTE_IN_PLACE";
    }
    $allflags = "-DPRODUCT_$product $flags -DHARDWARE_TYPE_$ht";
    $allflags =~ s/\s+/ /g;
    print $allflags, "\n";
    #
    # Put out the -L flag for product-specific .ldf files.
    # $3 is the development include directory, $4 is the installed
    # ldf directory. $lobj is the set of product names to use...
    #
    if ($lobj) {
	foreach $l (split(" ", $lobj)) {
	    print "-L$ARGV[2]/$l -L$ARGV[3]/$l\n";
	}

	#
	# Tell Glue where to put the .ldf file, if subdir exists. (Some
	# geodes are entirely product-specific and so we'll have the
	# product name, but no subdir for ldf or rsc files...)
	#
	if ( $product && -d $product ) {
	    print "-F$product\n";
	}
    }
} elsif ($tool eq "uic" ) {
    if ($xip) {
	$flags="$flags -DFULL_EXECUTE_IN_PLACE";
    }
    $allflags = "-DPRODUCT_$product $flags -DHARDWARE_TYPE_$ht";
    $allflags =~ s/\s+/ /g;
    print $allflags, "\n";
} elsif ($tool eq "loc") {
    foreach $i (split(" ", $flags)) {
	if ($i =~ /^-D.*/) {
	    ; # do nothing
	} else {
	    print "$i ";
	}
    }
    print "\n";
}
exit 0;
