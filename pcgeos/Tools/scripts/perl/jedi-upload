#!/usr/public/perl
# -*- perl -*-
##############################################################################
#
#       Copyright (c) Geoworks 1995 -- All Rights Reserved
#	GEOWORKS CONFIDENTIAL
#
# PROJECT:      Jedi
# MODULE:       Tools/scripts/perl -- auto-uploader
# FILE:         jedi-upload
# AUTHOR:       Jacob Gabrielson
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       JAG     1/19/95         Initial Revision
#
# DESCRIPTION:
#       Uploads certain libraries to isv ftp site.
#
# USAGE:
#	Run "jedi-upload" with no arguments for help.
#
#       $Id: jedi-upload,v 1.14 95/05/23 18:25:23 jacob Exp $
#
###############################################################################

require("newgetopt.pl");

$0 =~ s,.*/([^/]+),\1,;		# munge argv[0]

&NGetOpt("h=s", "m=s", "d=s", "todd") || &usage;

$login =  getlogin || (getpwuid($<))[0]  || "Somebody";
$opt_todd = 1 if ($login eq "todd");

@pwent = getpwuid($<);
$fullname = $pwent[6] || "Somebody";
$fullname =~ s/,*$//;

## If they don't have a .netrc, we won't be able to do the ftp correctly.
unless ($opt_todd) {
    -e "$ENV{HOME}/.netrc" || 
	die <<EOM;
You must have a ~/.netrc unless you use the -todd flag.\nSee Jacob for details.
EOM
}

$LAST_UPLOAD    = "jedi-last-upload";
$PREFIX		= "/staff/pcgeos/Release20X";
$INCLUDE	= "$PREFIX/Include";
$CINCLUDE	= "$PREFIX/CInclude";
$IIJEDI		= "$INCLUDE/Internal/Jedi";
$CIIJEDI	= "$CINCLUDE/Internal/Jedi";
$INSTALLED	= "$PREFIX/Installed";
$EXT		= $INSTALLED . "/Library/Extensions";
$JEDI		= $INSTALLED . "/Library/Jedi";
$TMPTOP		= "/tmp/jedi.$$";
$LISTING	= "$TMPTOP/ll.$$";
$FTP_DIR	= "more/auto-uploads";
$DEF_MAILTO	= $login;
$DEF_FTP_HOST	= "tech-ftp";

$ftp_host = $opt_h || $DEF_FTP_HOST;
$mailto = $opt_m || $DEF_MAILTO;

%libs = (
	 "gadgets", "$EXT/Gadgets|$INCLUDE/Objects/gadgets.def|$INCLUDE/Objects/gadgets.uih|$CINCLUDE/Objects/gadgets.goh",
	 "jlib", "$JEDI/JLib|$IIJEDI/jlib.def|$CIIJEDI/jlib.goh",
	 "jpref", "$INSTALLED/Appl/Jedi/JPref",
	 "jtable", "$JEDI/JTable|$IIJEDI/jtable.def|$CIIJEDI/jtable.goh",
	 "table", "$EXT/Table|$INCLUDE/Objects/table.def|$INCLUDE/Objects/table.uih|$CINCLUDE/Objects/table.goh",
	 "jedit", "$JEDI/JEdit|$CIIJEDI/jedit.goh",
	 "notes", "$JEDI/Notes|$IIJEDI/notes.def|$CIIJEDI/notes.goh",
	 "geos", "$INSTALLED/Library/Kernel",
	 "jmotif", "$INSTALLED/Library/SpecUI/JMotif",
	 "ui", "$INSTALLED/Library/User",
	 "jotter", "$JEDI/JediUI/Jotter|$IIJEDI/jCntlC.uih|$IIJEDI/jCntlC.def|$CIIJEDI/jCntlC.goh",
	 "homescreen", "$INSTALLED/Appl/Jedi/HomeScreen",
	 "mtable", "$EXT/MTable|$CIIJEDI/mtable.goh",
	 "trans", "$INSTALLED/Appl/Jedi/Transfer",
	 "text", "$INSTALLED/Library/Text",
	 "pccom", "$INSTALLED/Library/PCCom",
	 "key", "$INSTALLED/Library/HWR/Key"
);

($#ARGV == 0) || &usage;
$lib = $ARGV[0];

## Make sure we're dealing with a library we know about.
$libs{$lib} || die "Don't know what to do for $lib.\nSee Jacob for details.\n";

$TMPDIR		= "$TMPTOP/$lib";
$INF		= "$TMPTOP/$lib.inf";

## Get list of files to upload.
@files = split(/\|/, $libs{$lib});

## First item in list is installed directory.
$installed = shift(@files);
chdir($installed) || die "$0: can't cd to $installed\n";

## Read last-upload file so we can generate bug report.
if (!$opt_d && -r $LAST_UPLOAD) {
    open(LAST, "<$LAST_UPLOAD") || die "$0: can't open $LAST_UPLOAD\n";
    $opt_d = <LAST>;
    close LAST;
}

## Copy files over to temp directory.
&system("mkdir -p $TMPDIR");
$SIG{'INT'} = 'cleandie';	# after this point, need to nuke dir on error
&system("cp *.geo *.sym $TMPDIR");
## Only copy over .LDF files if it's a library wot's being uploaded.
&system("cp *.ldf $TMPDIR") if ($libs{$lib} =~ /Library/ && $lib ne "jmotif");
&system("(echo '======================================================================'; echo '                         $lib Release Note'; echo; echo 'Owner: $fullname'; echo -n 'Date:  '; date; echo; echo '1.  Output from DUMPGEO'; echo; dumpgeo *.geo) > $INF", 1);

## Copy other files associated with this library.
foreach $file (@files) {
    &system("cp $file $TMPDIR");
}

## Convert all files to 8.3.
chdir("$TMPTOP/$lib") || &cleandie("can't cd to $TMPTOP/$lib");
&system("dosify", 1);

## Make the .zip file
chdir("$TMPTOP") || &cleandie("can't cd to $TMPTOP");
&system("zip -kr $lib $lib", 1);
&cleandie("couldn't create .zip file\n") unless -s "$lib.zip";

## Now upload everything.
open(FTP, "|-") || exec "ftp -i $ftp_host";
#&cleandie("couldn't start ftp") unless defined($pid);
if ($opt_todd) {
    &ftp("jedi");
}
&ftp("binary");
&ftp("hash");
&ftp("cd $FTP_DIR");
&ftp("put $lib.zip");
&ftp("put $lib.inf");
&ftp("bye");
print "Please wait for ftp to finish...\n";
close FTP;

## Add some useful info to the .inf file before we mail it off.
if (open(INF, ">>$INF")) {

    ## Try to get a file listing.  Don't care if it doesn't work.
    if (chdir($TMPDIR)) {
	&system("ls -lC > $LISTING");
    }

    print INF <<EOM;

2. Feature/Function Updated/Changed/Missing

>>> FILL THIS IN <<<

EOM

    if (!$opt_d) {
	print INF <<EOM;
3. Unit Test Status

>>> FILL THIS IN  With a list of bugs fixed since the last release <<<
>>>	          and bugs still in existence                      <<<

EOM
    } else {
	print INF <<EOM;
3. Unit Test Status

   Bugs marked "OPEN" are not fixed yet.
   Bugs marked "FIXED" have been fixed since the last upload.
EOM
	    open(FIXED, "-|") || exec "showbugs -g $lib -d DF gt $opt_d";
	    while (<FIXED>) {print INF};
	    close(FIXED);
	    open(OPEN, "-|") || exec "showbugs -c OPEN -g $lib";
	    while (<OPEN>) {print INF};
	    close(OPEN);
	}

    print INF <<EOM;
4. Reference Document

>>>FILL THIS IN<<<

5. Distribution Information

   The new version of $lib is now on $ftp_host in the directory 
   $FTP_DIR.  The new files are:

   $lib.zip: PKZIP file containing all needed files
   $lib.inf: text file with expected protocol numbers and date of upload

6. File Listing

EOM

    if (open (LISTING, "<$LISTING")) {
	while(<LISTING>) {
	    print INF;
	}
	close LISTING;
    }

    print INF <<EOM;

7. Others (optional)

>>> FILL THIS IN (IF YOU WANT) <<<

==========================================================================

Regards,


$fullname
EOM
    close INF;

    $editor = $ENV{"EDITOR"} || $ENV{"VISUAL"} || "vi";
    print <<EOM;

Invoking \'$editor\' on mail message.  Please replace all lines beginning 
with ">>>" with meaningful information.  

Hit <RETURN> to start editing.
EOM
    <STDIN>;

    system("$editor $INF");
    
    while (!&edited($INF)) {
	print <<EOM;
You didn\'t replace all the lines that began with ">>>"!  Try again.

Hit <RETURN> to start editing.
EOM
	<STDIN>;
	system("$editor $INF");
    }
}

## Mail pleasant notification to everybody.
print("Upload successful.  Sending mail...\n");
system("mail -s 'New version of $lib uploaded to $ftp_host in $FTP_DIR' '$mailto' < $INF");

#&cleanup;

## Update up last-upload file with today's date.
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
@installed = split(/\|/, $libs{$lib});
chdir(shift(@installed)) || die "$0: can't cd to installed dir\n";
open(LAST, ">$LAST_UPLOAD") || die "$0: can't open $LAST_UPLOAD\n";
print LAST "$mday/$mon/$year";
close LAST;

exit 0;

## Special version that prints what it's about to do.
sub system {
    local($command,$noerror) = @_;

    print $command, "\n";
    system($command) && (!$noerror) && 
	&cleandie("$0: preceding command failed");
}

## Send command to ftp process.
sub ftp {
    local($command) = @_;

    $command =~ s/([^\n])$/\1\n/; # tack newline on end, if one isn't there

    print "ftp> $command";
    print FTP $command;
}

## Do normal die + clean up stuff;
sub cleandie {
    local($msg) = @_;

    $SIG{'INT'} = 'IGNORE';	# don't allow ^C
    $msg = "interrupt" unless $msg; # if no msg, we must be in INT handler
    $msg =~ s/([^\n])$/\1\n/;	# tack newline on end, if one isn't there
    print STDERR "$0: $msg\n";

    &cleanup;
    exit -1;
}

## Clean up temporary files.
sub cleanup {
    $SIG{'INT'} = 'IGNORE';	# don't allow ^C
    chdir("/tmp");
    &system("rm -rf $TMPTOP") &&
	die "$0: couldn't remove temp dir '$TMPTOP'\n";
}

sub edited {
    local($file) = @_;
    local($okay) = 1;

    open(DUH, "<$file") || die "$0: can't open $file\n";
    while (<DUH>) {
	$okay = 0 if /^\>\>\>/;
	last if !$okay;
    }
    close DUH;
    return $okay;
}

sub usage {
    print STDERR <<EOM;
usage: $0 [-h hostname] [-m address] [-d date] library-keyword

            -h host	- host to ftp to instead of $DEF_FTP_HOST
	    -m address  - mail to address instead of $DEF_MAILTO
	    -d mm/dd/yy - force bug report from mm/dd/yy
	    -todd	- Todd mode (super-secure)

	    library-keyword must be one of:
EOM
    foreach $key (sort keys(%libs)) {
	print STDERR "\t" x 2, $key, "\n";
    }

    exit -1;
}

