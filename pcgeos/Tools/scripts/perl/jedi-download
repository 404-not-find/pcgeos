#!/usr/public/perl
# -*- perl -*-
##############################################################################
#
#       Copyright (c) Geoworks 1995 -- All Rights Reserved
#	GEOWORKS CONFIDENTIAL
#
# PROJECT:      Jedi
# MODULE:       Tools/scripts/perl -- auto-downloader
# FILE:         jedi-download
# AUTHOR:       Jacob Gabrielson
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       JAG     2/24/95         Initial Revision
#
# DESCRIPTION:
#       Downloads stuff from isv ftp site.
#
# USAGE:
#	Run "jedi-download" with no arguments for help.
#
#       $Id: jedi-download,v 1.17 95/09/27 18:55:22 jacob Exp $
#
###############################################################################

require("newgetopt.pl");

$0 =~ s,.*/([^/]+),\1,;		# munge argv[0]

$TMP		= "/tmp";
$ROOTDIR	= "/staff/pcgeos/ReleaseJedi";
$TMPTOP		= "$TMP/jedi.$$";
$DEF_FTP_DIR	= "jedibin2";
$DEF_FTP_HOST	= "tech-ftp";
$DEFAULT_DIR	= "DEFAULT";
$UNZIP		= "/usr/local/bin/unzip";
$BACKUP_DIR	= "Old" . `date +'%m%d'`;

@pwent = getpwuid($<);
$fullname = $pwent[6] || "Somebody";
$fullname =~ s/,*$//;

&NGetOpt("h=s", "d=s", "send", "all", "todd", "backup", "noremote", "test") 
    || &usage;
&usage if ($opt_h && $opt_send);
$ftp_host = $opt_h || $DEF_FTP_HOST;
$ftp_dir = $opt_d || $DEF_FTP_DIR;

$login = getlogin || (getpwuid($<))[0]  || "Somebody";
$opt_todd = 1 if ($login eq "todd");

print STDERR "\n#### This script is downloading from $ftp_dir\n";

## Read in all the info from the DATA area.
while (<DATA>) {

    next if /^\s*$/;		# ignore blank lines

    if (/^([^\s]+)\s+([^\s]+)$/) {
	$geode = $1;
	$geodeName = $2;
	$geodeName{$geode} = $geodeName;
	push(@all, $geode);
	next;
    } 
    
    elsif (/^([^\s]+)$/) {
	$geode = $1;
	$geodeName{$geode} = $geode;
	push(@all, $geode);
	next;
    } 
    
    elsif (($file, $dest) = /^\s+([^\s]+)\s*\-\>\s*([^\s]+)/) {
	$geode{$geode, $file} .= $dest;
	$filelist{$geode} .= " $file";
    } 

    elsif (($dest) = /^\s+([^\s]+)\s*$/) {
	$geode{$geode, $DEFAULT_DIR} .= $dest; 
    }
}

## Get list of things to operate on.
if ($opt_all) {

    @libs = @all;

} else {

    &usage() unless ($#ARGV >= 0);
    @libs = @ARGV;

    foreach $lib (@libs) {
	&usage unless $geode{$lib, $DEFAULT_DIR};
    }

}

## Send or FTP/distribute the files.
if ($opt_send) {

    &send(@libs);

} else {

    ## If they don't have a .netrc, we won't be able to do the ftp correctly.
    unless ($opt_todd) {
	-e "$ENV{HOME}/.netrc" || die "You must have a ~/.netrc file to use this.\nSee Jacob for details.\n";
    }

    &system("mkdir $TMPTOP");

    ## Get all requested .zip files.
    &chdir($TMPTOP);
    &ftpgrab(@libs);

    foreach $lib (@libs) {

	## To get the real short name...
	$geodeName = $geodeName{$lib};

	&chdir($TMPTOP);

	&system("mkdir $lib");
	&chdir($lib);

	## Unzip the files.
	&system("$UNZIP -j -L ../$lib.zip");
	&system("rm ../$lib.zip");

	opendir(DIR, '.') || die;
	@files = readdir(DIR);
	closedir(DIR);

	## Do some checks to make sure all the files are there.
	$errors .= "$lib: .vm file missing\n" unless &checkvm("$geodeName.vm");
	$errors .= "$lib: .sym file missing\n" unless (-e "$geodeName.sym");
	$errors .= "$lib: .geo file missing\n" unless (-e "$geodeName.geo");
	if (length($geodeName) > 6) {
	    $ecsuffix = "e";
	} else {
	    $ecsuffix = "ec";
	}
	$errors .= "$lib: EC .sym file missing\n" 
	    unless (-e $geodeName . $ecsuffix . ".sym");
	$errors .= "$lib: EC .geo file missing\n" 
	    unless (-e $geodeName . $ecsuffix . ".geo");

	undef $checkfiles;
	if ($checkfiles = $filelist{$lib}) {
	    $checkfiles =~ s/^ //;	# remove leading space
	    foreach $file (split(/ /, $checkfiles)) {
		$errors .= "$lib: file '$file' missing\n" unless (-e $file);
	    }
	}

	## Copy special case files.
	foreach $file (@files) {

	    next if -d $file;

	    ## Convert text files from DOS to Unix.
	    if (-T $file) {
		&system("chmod a+w $file");
		&system("dos2unix -ascii $file $file");
	    }

	    &copy($file, $dest) if ($dest = $geode{$lib, $file});
	}

	## Copy over the rejects.
	&copy("*", $geode{$lib, $DEFAULT_DIR});

	&chdir("..");
	&system("rm -rf $lib");
    }
    
    &cleanup;
}

exit 0;

## Grab a list of files off of the ftp site.
sub ftpgrab {
    local(@files) = @_;

    open(FTP, "|-") || exec "ftp -i $ftp_host";
    if ($opt_todd) {
	&ftp("jedi");
    }
    &ftp("binary");
    &ftp("hash");
    &ftp("cd $ftp_dir");
    foreach $file (@files) {
	&ftp("get $file.zip");
    }
    &ftp("bye");
    print "Please wait for ftp to finish...\n";
    close FTP;
}

## Change directories.
sub chdir {
    local($dir) = @_;
    
    print "cd $dir\n";
    chdir($dir) || &cleandie("could not cd to $dir");
}

## Insure a valid .VM file
sub checkvm {
    local($vm) = @_;
    local($stat);

    #
    # .VM file should exist, or else we're hosed.
    #
    if (!(-e $vm)) {
	print "******* VM file Missing: *****************\n";
	return &makevm($vm);

    } else {

	#
	# .VM file is there.  Is it good?
	#
	$stat = system("checkvm $vm");
	
	#
	# No.  rename it, so that no-one tries to use it, and try
	# to create one from any supplied .RSC files
	#
	if ($stat) {
	    print "******* VM file bad: Moving to $vm.bad *********\n";
	    &system("mv $vm $vm.bad");
	    return &makevm($vm);
	}
    }
    return 1;
}

## Create .vm file from loc files.
sub makevm {
    local($vm) = @_;

    print "*******        Trying to create from .rsc files\n";
    &system("loc -o $vm *.rsc", 1);
    return (-e $vm);
}

## Copy files to all sites.
sub copy {
    local($file, $dest) = @_;

    $dest = "$ROOTDIR/$dest";
    if (!$opt_noremote) {
	&backup("fusion:" . $dest);
	&system("rcp $file fusion:$dest", 0, $opt_test);
	&system("rcp $file quark:$dest", 0, $opt_test);
    }
    &backup($dest);
    &system("mv -f $file $dest", 0, $opt_test);
}

## Back up any existing geo, sym, or vm files in a directory.
sub backup {
    local($dest) = @_;
    local(@files);
    local($file);

    if ($opt_backup) {

	## Transform paths for remote sites.
	$dest =~ s!^fusion:/staff!/n/fusion!;

	## Get list of files in this directory.
	opendir(DEST_DIR, $dest) || die;
	@files = readdir(DEST_DIR);
	closedir(DEST_DIR);

	## If there are any .geo, .sym or .vm files, then we need to do the
	## backup shme.
	foreach $file (@files) {
	    if ($file =~ /\.(sym|geo|vm)$/) {
		&system("mkdir -p $dest/$BACKUP_DIR", 0, $opt_test)
		    if (!(-d "$dest/$BACKUP_DIR"));
		&system("mv -f $dest/*.geo $dest/*.sym $dest/*.vm $dest/$BACKUP_DIR", 0, $opt_test);
		last;
	    }
	}
    }
}


## Special version that prints what it's about to do.
sub system {
    local($command, $noerror, $nodo) = @_;

    print $command, "\n";
    !$nodo && system($command) && (!$noerror) && 
	&cleandie("$0: preceding command failed");
}

## Send command to ftp process.
sub ftp {
    local($command) = @_;

    $command =~ s/([^\n])$/\1\n/; # tack newline on end, if one isn't there

    print "ftp> $command";
    print FTP $command;
}

## Do normal die + clean up stuff;
sub cleandie {
    local($msg) = @_;

    $SIG{'INT'} = 'IGNORE';	# don't allow ^C
    $msg = "interrupt" unless $msg; # if no msg, we must be in INT handler
    $msg =~ s/([^\n])$/\1\n/;	# tack newline on end, if one isn't there

    &cleanup;
    die("$0: $msg\n");
}

## Clean up temporary files.
sub cleanup {
    $SIG{'INT'} = 'IGNORE';	# don't allow ^C
    chdir("/tmp");
    &system("rm -rf $TMPTOP") &&
	die "$0: couldn't remove temp dir '$TMPTOP'\n";
    print "\nWARNING!  ERRORS OCCURRED:\n$errors" if $errors;
}

sub usage {
    local($all) = join("\n\t", @all);

    print STDERR <<EOM;

To automatically FTP and distribute files:

    $0 [-h hostname] [-d ftp-dir] [all] {library-keyword}

To send files to your demo:

    $0 [-send] [-d dir] [-all]
    $0 [-send] [-d dir] {library-keyword}

Options:

            -h host	- host to ftp to instead of $DEF_FTP_HOST
	    -d dir      - for ftp to get from <dir>, for send, send to <dir>
	    -send	- send files to your novell drive (won't ftp)
            -all        - send or ftp all files
            -backup     - move installed .geo/.sym/.vm files to Old<date>
            -noremote   - don't rcp files to remote sites
            -test       - echo, don't execute destructive commands
	    -todd	- Todd mode (super-secure)

Valid library keywords:

\t$all

EOM
    exit -1;
}

## "pcs" the list of things.
sub send {
    local(@libs) = @_;
    local($dest);

    foreach $lib (@libs) {
	$dest = $geode{$lib, $DEFAULT_DIR};
	chdir("$ROOTDIR/$dest") || die;
	local($dir) = "-d$opt_d" if ($opt_d);
	&system("pcs -D -u $dir", 1, $opt_test);
    }
}

## Everything following this can be got at via the nifty DATA filehandle.
## It won't be parsed by Perl.
__END__
db
    db.h -> CInclude/Internal/Jedi
    db.ldf -> Installed/Include
    Installed/Library/Jedi/DB

hpmlib
    hpmlib.h -> CInclude/Internal/Jedi
    hpmlib.ldf -> Installed/Include
    Installed/Library/Jedi/HPMLib

jerror
    jerror.goh -> CInclude/Internal/Jedi
    jerror.ldf -> Installed/Include
    Installed/Library/Jedi/JError

notes
    notes.def -> Include/Internal/Jedi
    notes.uih -> Include/Internal/Jedi
    notes.goh -> CInclude/Internal/Jedi
    notes.ldf -> Installed/Include
    Installed/Library/Jedi/Notes

apptbk
    Installed/Appl/Jedi/ApptBk

dm
    master.mdb -> Installed/ProductFiles/JediPC/DEMO/document
    compact_.gdb -> Installed/ProductFiles/JediPC/DEMO/document
    Installed/Appl/Jedi/DM

finance
    finance.fdb -> Installed/ProductFiles/JediPC/DEMO/document
    Installed/Appl/Jedi/Finance

fin-f finance
    Installed/Appl/Jedi/Finance/FRENCH

fin-g finance
    Installed/Appl/Jedi/Finance/GERMAN

hpcalc
    Installed/Appl/Jedi/HPCalc

hpcalc-f hpcalc
    Installed/Appl/Jedi/HPCalc/FRENCH

hpcalc-g hpcalc
    Installed/Appl/Jedi/HPCalc/GERMAN

japp
    jotter.000 -> Installed/ProductFiles/JediPC/DEMO/document
    Installed/Appl/Jedi/JApp

notepad
    notepad.ndb -> Installed/ProductFiles/JediPC/DEMO/document
    Installed/Appl/Jedi/Notepad

phone
    phone.pdb -> Installed/ProductFiles/JediPC/DEMO/document
    Installed/Appl/Jedi/Phone
