#!/usr/public/perl
# -*- Mode: perl -*-
##############################################################################
#
#       Copyright (c) Geoworks 1994 -- All Rights Reserved
#
# PROJECT:      PC GEOS
# MODULE:       Tools/scripts -- CALLED BY: generator
# FILE:         gcalled
# AUTHOR:       Jacob Gabrielson
#
# REVISION HISTORY:
#       Name    Date            Description
#       ----    ----            -----------
#       jag     3/28/94         Initial Revision
#
# DESCRIPTION:
#       Generates cross-referencing information.
#
# USAGE:
#	Run "gxref", then run "gcalled FunctionName".
#
#       $Id: gcalled,v 1.1 94/05/24 16:38:48 jacob Exp $
#
###############################################################################

sub find {
    chop($cwd = `pwd`);
    foreach $topdir (@_) {
	(($topdev,$topino,$topmode,$topnlink) = stat($topdir))
	  || (warn("Can't stat $topdir: $!\n"), next);
	if (-d _) {
	    if (chdir($topdir)) {
		($dir,$_) = ($topdir,'.');
		$name = $topdir;
		&wanted;
		$topdir =~ s,/$,, ;
		&finddir($topdir,$topnlink);
	    }
	    else {
		warn "Can't cd to $topdir: $!\n";
	    }
	}
	else {
	    unless (($dir,$_) = $topdir =~ m#^(.*/)(.*)$#) {
		($dir,$_) = ('.', $topdir);
	    }
	    $name = $topdir;
	    chdir $dir && &wanted;
	}
	chdir $cwd;
    }
}

sub finddir {
    local($dir,$nlink) = @_;
    local($dev,$ino,$mode,$subcount);
    local($name);

    # Get the list of files in the current directory.

    opendir(DIR,'.') || (warn "Can't open $dir: $!\n", return);
    local(@filenames) = readdir(DIR);
    closedir(DIR);

    if ($nlink == 2) {        # This dir has no subdirectories.
	for (@filenames) {
	    next if $_ eq '.';
	    next if $_ eq '..';
	    $name = "$dir/$_";
	    $nlink = 0;
	    &wanted;
	}
    }
    else {                    # This dir has subdirectories.
	$subcount = $nlink - 2;
	for (@filenames) {
	    next if $_ eq '.';
	    next if $_ eq '..';
	    $nlink = $prune = 0;
	    $name = "$dir/$_";
	    &wanted;
	    if ($subcount > 0) {    # Seen all the subdirs?

		# Get link count and check for directoriness.

		($dev,$ino,$mode,$nlink) = lstat($_) unless $nlink;
		
		if (-d _) {

		    # It really is a directory, so do it recursively.

		    if (!$prune && chdir $_) {
			&finddir($name,$nlink);
			chdir '..';
		    }
		    --$subcount;
		}
	    }
	}
    }
}

$proc = $ARGV[0];
chop($foo = `pwd`);
&find($foo);

sub wanted {
    $foo = `pwd` if $debug;
    print $foo  if $debug;;
    print $_, "\n"  if $debug;;
    if (/\.xref$/) {
	open(XREF, "<$_") || die "Can't open '$_': $!\n";
	while (<XREF>) {
	    if (/^BEGIN\s+([^\s]+)/) {
		$function = $1;
		next;
	    } elsif (/^END\s+$function/) {
		next;
	    } elsif (/^$proc$/) {
		$functions{$function} = 1;
	    }
	}
	close XREF;
	$foo = `pwd` if $debug;;
	print $foo if $debug;;
    }
}

@funclist = (sort keys %functions);
$funcl = join(", ", @funclist);
write;

format STDOUT =
CALLED BY:	^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                $funcl
~~		^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
		$funcl
. 
