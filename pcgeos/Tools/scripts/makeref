#!/usr/public/tsh
##############################################################################
#
# 	Copyright (c) GeoWorks 1992 -- All Rights Reserved
#
# PROJECT:	PC GEOS
# MODULE:	Scripts
# FILE: 	makeref
# AUTHOR: 	Adam de Boor, June  14, 1992
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	ardeb	6/14/92		Initial Revision
#
# DESCRIPTION:
#   	The functions in this file create a shadow source tree containing only
#   	the procedure headers, minus pseudo code and other precious/worthless
#   	information. The intent is to provide third parties the ability to
#   	use the ref command in Swat without providing them full source code.
#
#
# USAGE:
#   	makeref <gpfile> <symfile> [<refdir>]
#
#   	Both <gpfile> and <symfile> must be absolute paths, and <symfile>
#   	must reside in /staff/pcgeos/Installed (this thing doesn't deal with
#   	having relative paths bound into the .sym file, as happens when one
#   	remakes something in one's development tree).
#	
#
#	$Id: makeref,v 1.4 92/11/03 20:39:00 adam Exp $
#
###############################################################################
[proc extract-header {target file}
{
    #
    # Now for the fun part: look through the file with SED, dealing with the
    # two different types of procedure headers in the system. The result will
    # be the procedure header with the following things deleted:
    #	- blank lines
    #	- revision history
    #	- callers/function type (CALLED BY field)
    #	- pseudo code
    #
    return [exec sed -n -e [format {
/^COMMENT/,/^[-%%][-%%]*[@\}]$/\{
    /^COMMENT.*%%%%/,/^[^ 	]/\{
    	/^COMMENT/h
	s/$/ /
    	/%s[ \t,]/bfound
    \}
    /^COMMENT.*-----/,/^FUNCTION:/\{
    	/^COMMENT/h
	s/$/ /
    	/^FUNCTION.*%s[ \t,]/bfound
    \}
    /^COMMENT.*-----/,/^METHOD:/\{
    	/^COMMENT/h
	s/$/ /
    	/^METHOD.*%s[ \t,]/bfound
    \}
    /^COMMENT.*-----/,/^ROUTINE:/\{
    	/^COMMENT/h
	s/$/ /
    	/^ROUTINE.*%s[ \t,]/\{
	    s/ROUTINE/FUNCTION/
	    bfound
	\}
    \}
    d
    :found
    x
    p
    x
    p
    :ploop
    n
    /^CALLED BY/,/^[A-Z]/\{
	/^CALLED/bploop
	/^[ 	]/bploop
	/^$/bploop
    \}
    /^PSEUDO/,/^[A-Z]/\{
	/^PSEUDO/bploop
	/^[ 	]/bploop
	/^$/bploop
    \}
    /^REVISION/,/^[-A-Z%%]/\{
	/^REVISION/bploop
	/^[ 	]/bploop
	/^$/bploop
    \}
    /^[-%%][-%%]*[@\}]$/!\{
	p
	bploop
    \}
    /^[-%%][-%%]*[@\}]$/\{
	p
	q
    \}
\}} $target $target $target $target] $file]
}]
    
[proc ref {target dir file}
{
    echo -n $target...

    if {![string match $file /*]} {
	#
	# File not absolute -- tack on the path to the patient's executable
	#
 	if {[string c $file {}]} {
    	    error [format {cannot deal with relative path %s} $file]
	} else {
	    error {source file not determined}
	}
    } else {
    	var outputfile ${dir}/[range $file [expr [string first [file tail $dir] $file]+[length [file tail $dir] char]+1] end char]
    }
    var header [extract-header $target $file]
    if {![string c $header {}]} {
    	error [format {Error: "%s" not in %s as expected} $target $file]
    } else {
    	var outputdir [file dirname $outputfile]
       	if {![file isdirectory $outputdir]} {
	    exec mkdir -p $outputdir
       	}
	var str [stream open $outputfile a]
	if {![string c $str {}]} then {error [format {Could not open %s.} $outputfile]}
	stream write $header $str
	stream write [format {%s proc far\n%s endp\n} $target $target] $str
	stream close $str
	echo
    }
}]

[proc makeref {gpfile symfile {dir /staff/pcgeos/refs}}
{
    [case $gpfile in
    */Appl/* {
    	var s [string first Appl $gpfile]
    }
    */Library/* {
    	var s [string first Library $gpfile]
    }
    */Driver/* {
    	var s [string first Driver $gpfile]
    }]
    var subdir [range [file dirname $gpfile] $s end char]
    
    echo creating reference files from $gpfile under $dir/$subdir
    exec rm -fr $dir/$subdir

    echo Locating all exported functions...
    # XXX: NEED TO DO SOMETHING ABOUT FUNCTIONS EXPORTED AS ALIASES (e.g.
    # find the exported function and substitute the alias for the function
    # in the header...)
    var funcs [exec awk {
    	/^export/ && (NF == 2 || $3 != "as") {
    	    if ($2 !~ /^[A-Z_][_A-Z0-9]*$/) {
		printf "%s ", $2
    	    }
	}
    	/^export/ && (NF >= 4 && $3 == "as") {
	    # alias export. Assume we can use the non-aliased form
    	    if ($4 !~ /^[A-Z_][_A-Z0-9]*$/) {
		printf "%s ", $4
    	    }
	}
    	END {
	    printf "\n"
	}
    } $gpfile]

    var missing {}

    echo Locating source file info for all [length $funcs] procedures...
    var funcdata [eval [concat exec /staff/pcgeos/Tools/misc/findfiles/sparc.md/findfiles $symfile $funcs]]

    foreach fd $funcdata {
    	var i [index $fd 0]
	if {[string match $i *Far]} {
	    var i [range $i 0 [expr [string last Far $i]-1] char]
	}
    	if {[catch {ref $i ${dir}/${subdir} [index $fd 1]} err] != 0} {
	    var missing [concat $missing $i]
	    echo $err
	}
    }

    echo
    if {[string c $missing {}]} {
	echo missing functions: $missing
    }
}]

eval [format {makeref %s} $args]
