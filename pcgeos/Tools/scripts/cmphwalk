#!/usr/public/perl
# -*- perl -*-
##############################################################################
#
# 	Copyright (c) Geoworks 1996 -- All Rights Reserved
#       GEOWORKS CONFIDENTIAL
#
# PROJECT:	pc geos
# MODULE:	
# FILE: 	cmphwalk
# AUTHOR: 	Chris Thomas, May 14, 1996
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#	CT	5/14/96   	Initial Revision
#
# DESCRIPTION:
#	Compares the output of 2 or more hwalks for possible problems
#	See Usage() for interface
#
#	The philosophy of this tool is to be as conservative as
#	possible about flagging down problems.  If the user
#	has to resort to inspecting hwalk output by hand
#	all the time because this script isn't catching a
#	particular case, then it is useless, and shouldn't
#	be depended on.
#	So if you add or modify the tests contained within,
#	don't get too clever.  It's better not to even attempt
#	to detect a problem if it could miss something.
#
# TODO LIST:
#
#	Add a check for blocks that are too large.  The tough part
#	is deciding which blocks shouldn't be too large.
#	Blocks in the XIP image and fixed ROM can be as large as they
#	want.  DGroup & pseudo-fixed blocks - maybe, maybe not.
#	(but see the discussion above about getting too clever).
#
#	$Id: cmphwalk,v 1.4 96/11/19 13:57:18 jacob Exp $
#
###############################################################################

require 'getopts.pl';

######################################################################
#
#			CONSTANTS
#
######################################################################

# Useful regular expressions

$HEX = "[0-9A-Fa-f]+h";
$DEC = "-?[0-9]+";
$ID  = "[a-zA-Z_0-9]+";

# Value at which the analysis of a handle indicates a
# potentially serious problem

$SERIOUS = 100;

######################################################################
#
#			GLOBALS
#
######################################################################

if (!&Getopts("l")) {
    &Usage();
}

@files = @ARGV;			# all files on command line
@allHwalks = ();		# file:line of every hwalk to be analyzed

######################################################################
#
#			MAIN
#
######################################################################

&Usage if ($#files < $[);


#
# Gather info about handles from all hwalks
#
foreach $file (@ARGV) {
    push(@allHwalks, &GatherHeapInfo($file, $opt_l));
}

#
# Check for MemHandle leaks
#

&PrintHeader('Handle Leaks');
foreach $handle (@handles) {
    #
    # possible problem (more of a curiosity, really) if:
    #    A new block is allocated from one hwalk to the next
    # possible Serious problem if:
    #    Blocks exist in the last hwalk that don't exist in the first
    #

    &CheckHandleValues($handle, 
		       '$hinfo{$h,$n,"OWNER"}', 
		       0,
		       '!defined($hinfo{$h,$if,"OWNER"}) && defined($hinfo{$h,$jf,"OWNER"})',
		       '$SERIOUS*(!defined($hinfo{$h,$ff,"OWNER"}) && defined($hinfo{$h,$lf,"OWNER"}))',);
}

#
# Check for lock counts
#

&PrintHeader('Runaway Lock Counts');
foreach $handle (@handles) {
    #
    # possible lock count problem if:
    #    A block is locked at the time of any hwalk
    # serious problem if:
    #    lock count at last hwalk is greater than at first
    
    &CheckHandleValues($handle, 
		       '$hinfo{$h,$n,"LOCK"}', 
		       '$hinfo{$h,$n,"LOCK"} > 0',
		       0,
		       '$SERIOUS*($hinfo{$h,$lf,"LOCK"} > $hinfo{$h,$ff,"LOCK"})');
}

#
# Check for core leaks
#

&PrintHeader('Core Leaks');
foreach $handle (@handles) {
    #
    # Possible core leak if:
    #    size of block at last hwalk is larger than in first

    &CheckHandleValues($handle, 
		       '$hinfo{$h,$n,"SIZE"}', 
		       0,
		       0,
		       '($hinfo{$h,$ff,"SIZE"} && ($hinfo{$h,$lf,"SIZE"} > $hinfo{$h,$ff,"SIZE"}))'
		       );
}

#
# Check for big blocks (not implemented: see todo-list above)
#

# &PrintHeader('Overly Large Blocks');
# foreach $handle (@handles) {
#    
#    &CheckHandleValues($handle, 
#		       '$hinfo{$h,$n,\"SIZE\"}', 
#		       '&BlockShouldBeSmall() && $hinfo{$h,$n,\"SIZE\"} > 10240',
#		       0,
#		       0);
#}


##############################################################################
#	PrintHeader
##############################################################################
#
# SYNOPSIS:	Prints out the header of a table in a structure used by
#		a lot of the diagnostic output routines
# PASS:		$title = title of table
# CALLED BY:	internal
# RETURN:	nothing
# SIDE EFFECTS:	none
#
# STRATEGY:
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#       CT 	5/14/96   	Initial Revision
#
##############################################################################
sub PrintHeader {
    local($title) = @_;
    local($f, $n, $l, $lastfile, $repeat);
    print "\n\t\t$title\n";
    print "HANDLE\t";
    foreach $f (@allHwalks) {
	($n, $l) = split(/:/, $f);
	$repeat |= ($n eq $lastfile);
	$lastfile = $n;
	$n =~ s/.*\/([^\/]*$)/\1/;
	printf STDOUT "%8s", $n;
    }
    
    if ($repeat) {
	#
	# some file contained more than one hwalk command, we should
	# list the line number the hwalks came from, so the user can
	# distinguish between them
	#
	print "\n\t";
	foreach $f (@allHwalks) {
	    ($n, $l) = split(/:/, $f);
	    printf STDOUT "%8s", $l;
	}
    }
    print "\n----------------------------------------------------------------------------\n";
}

##############################################################################
#	GatherHeapInfo
##############################################################################
#
# SYNOPSIS:	Processes the output of 1 hwalk command for later comparisons
# PASS:		$filename = filename to process
#		$lastonly = TRUE to collect data from only the last
#			    hwalk command output in the file
# CALLED BY:	main
# RETURN:	A list of "$filename:$line" strings, one for each
#		hwalk command that was processed.  The line number's
#		actual value is unimportant, and just used to distinguish
#		separate hwalk's in one file.
#
# SIDE EFFECTS:	updates global tables used for comparisons
#
# STRATEGY:
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#       CT 	5/14/96   	Initial Revision
#
##############################################################################

sub GatherHeapInfo {
    local ($filename, $lastonly) = @_;
    local ($thishwalk) = '';
    local ($handlesStyle) = 0;
    local (@hwalks) = ();
    local (@seen, $h, $s, $l, $o) = ();

    if (! -e $filename) {
	printf STDERR ("$filename can't be opened\n");
	exit(1);
    }
    open(INPUT, "$filename") || (&error ("Can't open '$filename'\n"), exit(1));

    while (<INPUT>) {
	if (/^HANDLE\s+ADDR\s+SIZE\s+(PREV\s+NEXT\s+)?FLAGS\s+LOCK\s+OWNER\s+IDLE\s+OINFO\s+TYPE/) {
	    #
	    # Begin analyzing output
	    #

	    $handlesStyle = $1;	# output of 'handles' is slightly different

	    $thishwalk = $filename . ":$.";
	    if ($lastonly) {
		@hwalks = ();
		@seen = ();
	    }
	    push(@hwalks, $thishwalk);

	} elsif (/^Total bytes allocated:\s*$DEC/o) {
	    #
	    # End analyzing output
	    #

	    $thishwalk = '';

	} elsif ($thishwalk) {
	    $h = '';
	    if ($handlesStyle) {
		if (/^($HEX)\s+$ID\s+($DEC)\s+$ID\s+$ID.{10}($DEC|n\/a)\s+($ID)/o) {
		    #
		    # MemHandle format
		    #
		    ($h, $s, $l, $o) = ($1, $2, $3, $4);

		} elsif (/^($HEX)\s+FILE\s+.*\(($ID)\)/o ||
			 /^($HEX)\s+VM file\s+.*\(($ID)\)/o ||
			 /^($HEX)\s+SEMAPHORE\s+.*\(($ID)\)/o ||
			 /^($HEX)\s+EVENT QUEUE\s+($ID)/o) {
		    #
		    # Handles that don't have sizes & locks.
		    # (queues & threads tend to be very stable,
		    #  so don't bother checking them)
		    #
		    ($h, $s, $l, $o) = ($1, 0, 0, $2);

		} elsif (/^($HEX)\s+EVENT/o ||
			 /^($HEX)\s+TIMER/o) {
		    #
		    # Handles that don't have recognizable owners
		    #
		    ($h, $s, $l, $o) = ($1, 0, 0, 'exist');
		}
	    } else { # !$handlesStyle

		if (/^($HEX)\s+$ID\s+($DEC).{10}($DEC|n\/a)\s+($ID)/o) {
		    #
		    # hwalk style output - only memory handles are listed
		    # here.
		    #
		    ($h, $s, $l, $o) = ($1, $2, $3, $4);
		}
	    }

	    if ($h) {
		if ($l eq 'n/a') {
		    $l = -1; # -1 lock count means fixed or pseudo-fixed
		}
		push(@seen, $h);
		$hinfo{$h, $thishwalk, 'SIZE'} = $s;
		$hinfo{$h, $thishwalk, 'LOCK'} = $l;
		$hinfo{$h, $thishwalk, 'OWNER'} = $o;
	    }
	}
    }

    #
    # Record as being seen, only the handles in the hwalks we care
    # about.
    #
    foreach $h (@seen) {
	if ($hcount{$h}++ == 0) {
	    #
	    # First time we've seen this handle.  Add it to the
	    # master list of handles.
	    #
	    push(@handles, $h);
	}
    }
    close(INPUT);

    return @hwalks;
}

##############################################################################
#	CheckHandleValues
##############################################################################
#
# SYNOPSIS:	Performs a test on the given handle in successive
#		hwalks
#
# PASS:		$h	= handle to test
#		$val	= value to print in the column of output
#		$st	= expression evaluated once for each
#			  hwalk
#		$bt	= expression to evaluate to indicate
#			  a possible problem between successive
#			  hwalks.
#		$et	= expression evaluated after $bt has been
#			  run on every pair of hwalks
#
# CALLED BY:	main
# RETURN:	nothing
# SIDE EFFECTS:	none
#
# STRATEGY:
#
#  for each hwalk in the input, $st is evaluated, and it's
#  return value added to the variable $prob.
#  For each successive pair of hwalks, $bt is evaluated, and it's
#  return value added to the variable $prob.  After every pair has
#  been compared, the expression in $et is evaluated, and its value
#  added to $prob.
#
#  If $prob ends up non-zero, then an information line is printed
#  out about the handle, displaying the values of the expression $val
#  in each successive hwalk.  Additionally, if $prob >= $SERIOUS, then
#  a star is printed next to the handle, indicating that there
#  might be a serious problem with the handle.
#
#  The following local variable are available for use in the expressions
#  passed in $val, $st, $bt, and $et:
#
#   $i, $j	= The numeric indexes of the two hwalk's being compared
#   $if, $jf	= the filenames of the two hwalks being compared.
#		  (for use in the $bt expression)
#   $n		= the filename of the value being printed to the output
#		  column (for use in evaluating $val)
#   $f, $l	= the indexes of the first & last hwalk's
#   $fn, $ln	= the filenames of the first & last hwalk's
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#       CT 	5/14/96   	Initial Revision
#
##############################################################################
sub CheckHandleValues {
    local($h, $val, $st, $bt, $et) = @_;
    local($i, $j, $if, $jf, $f, $l, $ff, $lf, $prob, $out);

    $prob = 0;
    $f = $[;
    $l = $#allHwalks;
    $ff = $allHwalks[$f];
    $lf = $allHwalks[$l];
    $n = $allHwalks[$[];

    $out = "\t" . sprintf("%8s", ((eval $val)));
    &CatchError($@, $val);

    $prob = eval $st;
    &CatchError($@,$st);

    for ($i = $[, $j=$[+1; $j <= $l; $i++, $j++) {
	$if = $allHwalks[$i];
	$jf = $allHwalks[$j];
	$n = $jf;
	$out .= sprintf("%8s", ((eval($val))));
	&CatchError($@,$val);
	$prob += eval $st;
	&CatchError($@,$st);
	$prob += eval($bt);
	&CatchError($@,$bt);
    }
#    print "$et\n";
    $prob += eval($et);
    &CatchError($@,$et);


    if ($prob >= $SERIOUS) {
	$out = $h . '*' . $out;
    } elsif ($prob > 0) {
	$out = $h . $out;
    }

    if ($prob > 0) {
	print "$out\n";
    }
}

sub CatchError {
    local ($err, $expr) = @_;
    if ($err) {
	printf STDERR "Error in expression '$expr' : $err\n";
	exit (1);
    }
}

##############################################################################
#	Usage
##############################################################################
#
# SYNOPSIS:	Prints help for the command, and exits.
# PASS:		nothing
# CALLED BY:	INTERNAL
# RETURN:	nothing
# SIDE EFFECTS:	none
#
# STRATEGY:
#
# REVISION HISTORY:
#	Name	Date		Description
#	----	----		-----------
#       CT 	5/14/96   	Initial Revision
#
##############################################################################

sub Usage {
    print STDERR <<EOM;
Usage:

    cmphwalk [-l] <file>+

Synopsis:

    Compares the swat output of 2 or more hwalk/handle commands
    for possible problems.  The problem areas checked for are:

	Handle leaks : handles allocated without being freed,

	Core leaks: Mem blocks growing without bound

	Runaway lock counts: blocks which are always locked,
	    or have ever-increasing lock counts.

    Each problem area checked will generate a table of possible
    problem handles, and display each handle's attribute-in-question
    (lock count, size, existence, etc) in each of the input hwalks.
    A blank spot in a column usually means that the handle didn't
    appear in that particular hwalk.

    Comparing more than 2 hwalks can be useful for tracking
    pathological behavior over repeated operations in an app.

    Note: files listed on command line should appear in same order
    as the hwalk measurements were taken.

    Flags:

	-l    If a single file contains the output of more than
	      one hwalk command, ignore all but the last one in the
	      file.  Useful when each hwalk is being logged to a 
	      separate file, but swat's "save" command saves 
	      portions of earlier hwalks.

Examples:

    cmphwalk -l /tmp/hwalk1.log /tmp/hwalk2.log

    cmphwalk /tmp/manyhwalks.log

EOM
    exit(1);
}
