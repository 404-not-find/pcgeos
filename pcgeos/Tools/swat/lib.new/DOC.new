brk.{top.breakpoint swat_prog.breakpoint}
7788:Usage:
    brk <addr> [<command>]
    brk pset <addr> [<command>]
    brk aset <addr> [<command>]
    brk tset <addr> [<command>]
    brk clear <break>*
    brk delete <break>*
    brk enable <break>*
    brk disable <break>*
    brk address <break>
    brk isenabled <break>
    brk list [<addr>]
    brk debug [<flag>]
    brk isset <addr>
    brk cond <break> <condition>*
    brk cmd <break> [<command>]
    brk delcmd <break> [<command>]

Examples:
    "brk WinOpen"	    	Sets the machine to stop unconditionally
				when any thread calls WinOpen.
    "brk pset WinOpen"	    	Sets the machine to stop when any thread for
				the current patient calls WinOpen.
    "brk tset WinOpen"	    	Sets the machine to stop when any thread for
				the current patient calls WinOpen, and deletes
				the breakpoint when the machine next stops.
    "brk enable 1 3-5"	    	Re-enables breakpoints 1, 3, 4, and 5
    "brk clear 2-"  	    	Clears all breakpoints from number 2 onward.
    "brk cond 3 cx=42"	    	Sets breakpoint 3 to be conditional, stopping
				when the machine reaches the breakpoint's
				address with CX being 42.
    "brk cond 2 (ss:0)!=1b80h"	Sets breakpoint 2 to be conditional, stopping
				when the machine reaches the breakpoint's
				address with the word at ss:0 not being
				1b80h. Note that the "ss" is the value of ss
				when the "brk cond" command is executed, not
				when the breakpoint is reached.

Synopsis:
    Allows you to specify that execution should stop when it reaches a
    particular point. These breakpoints can be conditional, and can execute
    an arbitrary Tcl command, which can say whether the machine is to remain
    stopped, or continue on its way.

Notes:
    * Once you've set a breakpoint, "brk" will return to you a token for that
      breakpoint that begins with "brk" and ends with a number. When you refer
      to the breakpoint, you can use either the full name (as you'll usually
      do from a Tcl procedure), or just the number (if you're lazy like me).

    * Breakpoints have four attributes: the address at which they are set,
      the condition set on their being recognized, the Tcl command string
      to execute when they are recognized, and the Tcl command string to
      execute when they are deleted.

    * The condition is set either when the breakpoint is set, using the "cbrk"
      command, or after you've set the breakpoint, by invoking the "brk cond"
      command.

    * A breakpoint's condition is evaluated (very quickly) on the PC and can
      check only word registers (the 8 general registers, the three segment
      registers other than CS, and the current thread; each register may be
      checked only once in a condition) and a single word of memory. Each
      <condition> argument is of the form "<reg><op><value>". <reg> is one
      of the 16-bit machine registers, "thread" (for the current thread), or
      the address of a word of memory to check, enclosed in parentheses.
      <op> is a relational operator taken from the following set:
	=   	    	equal-to
	!=  	    	not-equal-to
	> < >= <=  	unsigned greater-than, less-than, greater-or-equal,
			and less-or-equal
	+> +< +>= +<=	signed greater-than, less-than, greater-or-equal,
			and less-or-equal
      <value> is a regular Swat address expression. If it is handle-relative,
      and the <reg> is one of the three non-CS segment registers, the condition
      will be for the segment of that handle and will change automatically
      as the handle's memory shifts about on the heap. Similar things will
      happen if you specify a number as the <value> for a segment register and
      the number is the current segment of a block on the heap.

    * If you give no <condition> argument to the "brk cond" command, you
      will remove any condition the breakpoint might have, making it,
      therefore, unconditional.

    * If a breakpoint is given an associated <command> string, it will be
      evaluated before the breakpoint is taken. If the result of the
      evaluation is an error, a non-numeric string, or a numeric string that's
      non-zero, the breakpoint will be taken. Else the machine will be allowed
      to continue (so long as no other breakpoint command or other part of
      Swat insists that it remain stopped). You can use this to simply
      print out information when execution reaches the breakpoint address
      without interrupting the machine's execution.

    * The global variable "breakpoint" contains the name of the breakpoint
      whose command is being evaluated while that command is being evaluated.

    * You can change the command associated with a breakpoint with the "brk
      cmd" command. If you give no <command> argument, then no command
      will be executed and the breakpoint will always be taken, so long as
      any associated condition is also met.

    * If a breakpoint has both a condition and a command, the command will
      not be executed until the condition has been met, unless there's another
      breakpoint at the same address with a different, or no, condition.

    * You can set a breakpoint to last only during the next continuation of the
      machine by calling "brk tset". The breakpoint thus set will be removed
      when next the machine comes to a full stop, regardless of why it stopped
      (i.e. if it hits a different breakpoint, the temporary breakpoint will
      still be removed). The breakpoint will only be taken if the thread
      executing when it is hit is owned by the patient that was current when
      the breakpoint was set.

    * Each <break> argument to the "brk clear", "brk enable" and "brk
      disable" commands can be either a single breakpoint token (or number), or
      a range of the form <start>-<end>, where either <start> or <end> may
      be absent. If <start> is missing, the command affects all breakpoints
      from number 1 to <end>. If <end> is missing, the command affects all
      breakpoints from <start> to the last one in existence.

    * If you give no <break> argument to "brk clear", "brk enable" or
      "brk disable", the command will apply to all breakpoints that are
      specific to the current patient, i.e. that were set with the "brk pset"
      command, unless the current patient is the kernel, in which case they
      will apply to all breakpoints that are specific to no patient (i.e.
      those set with the "brk aset" or "brk <addr>" commands).

    * "brk address" returns the address expression for where the breakpoint
      is set. This will usually be of the form ^h<handle-id>:<offset>, with
      both <handle-id> and <offset> in hex (followed by an "h", of course).
      If the breakpoint is set at an absolute address, you will get back only
      a single hex number, being the linear address at which the breakpoint
      is set.

    * If you type "brk list" with no argument, Swat will print out a listing
      of the currently-active breakpoints. If you give an <addr> (address
      expression) argument, however, you'll be returned a list of the
      breakpoints set at the given address. If there are no breakpoints
      there, the list will be empty.

    * As a shortcut, you can invoke "brk isset" to see if any breakpoints
      are set at the given address, if you're not interested in which
      ones they are.

    * For Tcl commands that make use of breakpoints, but maintain additional
      data elsewhere, you can specify a Tcl command to execute when the break-
      point is deleted, to allow you to clean up the extra data. As for the
      regular command, the global variable "breakpoint" is set to the name of
      the breakpoint being deleted while the command is being evaluated.

See also:
    cbrk, tbrk, objbrk

cbrk.{top.breakpoint swat_prog.breakpoint}
1229:Usage:
    cbrk <addr> <condition>*
    cbrk aset <addr> <condition>*
    cbrk tset <addr> <condition>*
    cbrk clear <break>*
    cbrk delete <break>*
    cbrk enable <break>*
    cbrk disable <break>*
    cbrk address <break>
    cbrk list [<addr>]
    cbrk debug [<flag>]
    cbrk isset <addr>
    cbrk cond <break> <condition>*
    cbrk cmd <break> [<command>]
    cbrk delcmd <break> [<command>]

Examples:
    "cbrk WinOpen di=1b80h"	Stops the machine when execution reaches
				WinOpen with DI set to 1b80h

Synopsis:
    Allows you to set fast conditional breakpoints in the PC.

Notes:
    * All these subcommands function the same as for the "brk" command,
      with the exception of the "aset" and "tset" commands, which expect
      the condition for the breakpoint, rather than an associated command.

    * There are a limited number of these sorts of breakpoints that can
      be set in the PC (currently 8), so they should be used mostly for
      heavily-travelled areas of code (e.g. inner loops, or functions like
      ObjCallMethodTable in the kernel).

    * For more information on the subcommands and the format of arguments,
      see the documentation for the "brk" command.

See also:
    brk, tbrk

get-max-bpt-number.{swat_prog.breakpoint}
0:
cache.{swat_prog}
2986:Usage:
    cache create (lru|fifo) <maxSize> [<flushProc>]
    cache destroy <cache> [flush|noflush]
    cache lookup <cache> <key>
    cache enter <cache> <key>
    cache invalone <cache> <entry>
    cache invalall <cache> [flush|noflush]
    cache key <cache> <entry>
    cache size <cache>
    cache maxsize <cache>
    cache setmaxsize <cache> <maxSize>
    cache getval <cache> <entry>
    cache setval <cache> <entry> <value>

Examples:
    "var cache [cache create lru 10]"	    Creates a cache of 10 items that are
					    flushed on a least-recently-used
					    basis. The returned token is saved
					    for later use.
    "var entry [cache lookup $cache mom]"   Sees if an entry with the key "mom"
					    is in the cache and saves its entry
					    token if so.
    "echo mom=[cache getval $cache $entry]" Retrieves the value stored in the
					    entry for "mom" and echoes it.
    "cache invalone $cache $entry"  	    Flushes the entry just found from
					    the cache.
    "cache destroy $cache"  	    	    Destroys the cache.

Synopsis:
    The cache command, as the name implies, maintains a cache of data that
    is keyed by strings. When a new entry is added to an already-full cache,
    an existing entry is automatically flushed based on the usage method
    with which the cache was created: lru or fifo. If lru, the least-recently-
    used entry is flushed; if fifo, the oldest entry is flushed.

Notes:
    * Unlike the "table" command, the "cache" command returns tokens for
      entries, not their values, to allow entries to be individually flushed
      or their values altered.

    * If a <flushProc> is specified when the cache is created, the procedure
      will be called each time an entry is flushed from the cache. It
      will be called "<flushProc> <cache> <entry>" where <cache> is the token
      for the cache, and <entry> is the token for the entry being flushed.

    * If the maximum size of a full cache is reduced, entries will be flushed
      from the cache to bring it down to the new maximum size. The <flushProc>
      will be called for each of them.

    * If the values stored in the cache entries should not be freed when the
      cache is destroyed, pass "noflush" to "cache destroy". The default
      is to flush (and hence call the <flushProc>) all entries from the cache
      before it is destroyed.

    * If the values stored in the cache entries should not be freed when the
      cache is flushed, pass "noflush" to "cache invalall". The default
      is to call the <flushProc> for each entry in the cache before it is
      actually flushed.

    * If an entry is not found in the cache, "cache lookup" will return an
      empty string.

    * When an entry is created, "cache enter" returns a 2-list containing
      the entry token as its first element, and an integer, as its second
      element, that is either non-zero or 0, to tell if the entry is new or
      was already present, respectively.

dbg-me.{obscure}
367:Usage:
    dbg-me

Examples:
    "dbg-me"		Causes Swat to dump core.

Synopsis:
    This command is only for debugging Swat and serves no useful purpose to
    anyone but me.

Notes:
    * This obviously has no effect on DOS systems, and is unnecessary for Sun
      systems where the debugger can attach to a running process.

See also:
    alloc, dbg, pid, rpc-dbg

alias.{support.binding}
2053:Usage:
    alias [<name> [<body>]]

Examples:
    "alias p print"	    	    Execute "print" when the user types the
				    command "p". Any arguments to "p" get
				    passed to "print" in the order they were
				    given.
    "alias while {for {} $1 {} $2}" Executes an appropriate "for" loop when
				    the "while" command is executed with its
				    two arguments: a test expression and a
				    body of commands to execute.
    "alias" 	    	    	    Prints all the defined aliases.
    "alias while"		    Prints what the "while" command is aliased
				    to.

Synopsis:
    This is a short-cut to allow you to make commands you commonly type easier
    to use, and to quickly define simple new commands.

Notes:
    * If you give no arguments the current aliases are all displayed.

    * If you give a single argument, the name of an existing alias, the
      command that will be executed when you use the alias is printed.

    * The <body> string is usually in braces, as it usually involves whitespace
      and can contain newlines for the longer aliases.

    * You can use the pseudo-variables $1, $2, etc. in the <body> to represent
      the 1st, 2nd, etc. argument given when the alias is invoked. They are
      pseudo-variables as the "var" command will not operate on them, nor are
      they available to any procedure invoked by the alias.

    * You can also interpolate a range of the arguments using $<start>-<end>.
      If you do not give an <end>, then the arguments from <start> to the last
      one will be interpolated. 

    * $* will interpolate all the arguments.

    * $# will interpolate the actual number of arguments.

    * If you do not use any of these pseudo-variables, all the arguments given
      to the alias will be appended to the <body>.

    * Interpolation of the values for these pseudo-variables occurs regardless
      of braces in the <body>.

    * It is an error to specify an argument number when there are fewer than
      that many arguments given to the alias.

See also:
    unalias

alloc.{obscure}
794:Usage:
    alloc <file>

Examples:
    "alloc foo.stats"	Dumps the current memory usage information to the file
			"foo.stats" in the current directory (as dictated by
			the current stack frame).

Synopsis:
    Produces a raw dump of all the memory Swat is currently using, giving
    the type of data in each block and the address from which the allocation
    routine was called.

Notes:
    * The dump by itself isn't particularly useful, but a shell script exists
      to process the dump into useful information. It lives in Tools/swat/stats
      (as do previous raw and processed statistics) and is called "pa".

    * If Swat is compiled with caller-tracing not enabled in the malloc package,
      use "panc" to process the output, not "pa".

See also:
    dbg-me, dbg, pid, rpc-dbg

autoload.{swat_prog.load swat_prog.file}
1785:Usage:
    autoload <function> <flags> <file> [<class> <docstring>]

Examples:
    "autoload ewatch 0 emacs"	    load the file "emacs.tcl" when the
				    ewatch command is first executed. The
				    user may abbreviate the command.
    "autoload cycles 1 timing"      load the file "timing.tcl" when the
				    cycles command is first executed. The
				    user must type the command completely.
    "autoload print 2 print"	    load the file "print.tcl" when the
				    print command is first executed. The
				    user may abbreviate the command and
				    the Tcl interpreter will not evaluate
				    its arguments.

Synopsis:
    This command allows the first invocation of a command to automatically
    force the transparent reading of a file of Tcl commands.

Notes:
    * autoload takes 3 or 5 arguments: the command, an integer with bit
      flags telling how the interpreter should invoke the command, the file
      that should be read to define the command (this may be absolute or on
      load-path) and an optional help class and string for the command.

    * The help class and string need only be given if the file to be loaded
      isn't part of the system library (doesn't have its help strings ex-
      tracted when Swat is built).

    * The <flags> argument has the following bit-flags:
	Bit	Meaning if Set
	----------------------
	 0	User must type the command's name exactly. The command will
		be defined by "defsubr" or "defcommand" when <file> is
		loaded.
	 1	The interpreter will not evaluate arguments passed to the
		command. All arguments will be merged into a single string
		and passed to the command as one argument. The command will
		use the special "noeval" argument when it is defined.

See also:
    defsubr, defcmd, defcommand, proc

break-taken.{swat_prog.breakpoint}
784:Usage:
    break-taken [<flag>]

Examples:
    "break-taken"   	Returns 1 if the machine stopped because of a
			breakpoint.
    "break-taken 0"	Specify that no breakpoint was actually taken to
			stop the machine.

Synopsis:
    This is used to determine if the machine stopped because a breakpoint
    was hit and taken.

Notes:
    * Setting the break-taken flag is a rather obscure operation. It is
      useful primarily in complex commands that single-step the machine
      until a particular address is reached, or a breakpoint is taken when
      a breakpoint must be used to skip over a procedure call, or condense
      multiple iterations of an instruction with a REP prefix into 1. For
      an example of this use, refer to the "cycles" command.

See also:
    brk, irq

dbg.{obscure}
540:Usage:
    dbg [<flag>]

Examples:
    "dbg 1"	Set Swat's internal debug flag.

Synopsis:
    This is useful only when debugging Swat itself.

Notes:
    * When the debug flag is set, Swat will print out a number of bits of
      debugging information, including changes in handle state, and errors not
      normally deemed important enough to notify the user. In addition, if the
      user chooses to abort when asked, Swat will generate a core dump,
      rather than cleaning up and exiting.

See also:
    dbg-me, alloc, pid, rpc-dbg

defcmd.{swat_prog.def swat_prog.proc swat_prog.tcl.proc}
897:Usage:
    defcmd <name> <args> <help-class> <help-string> <body>

Examples:
    look in almost any .tcl file in the system library for an example, as
    one is too large to give here.

Synopsis:
    This creates a new Tcl procedure with on-line help whose name may be
    uniquely abbreviated when the user wishes to invoke it.

Notes:
    * <help-class> is a Tcl list of places in which to store the <help-string>,
      with the levels in the help tree separated by periods. The leaf node
      for each path is added by this command and is <name>, so a command
      "foo" with <help-class> "swat_prog.tcl" would have its <help-string>
      stored as "swat_prog.tcl.foo".

    * Because the name you choose for a procedure defined this way can have
      an impact on the unique abbreviation for some other command, you should
      use this sparingly.

See also:
    defcommand, proc, help

defcommand.{swat_prog.def swat_prog.proc swat_prog.tcl.proc}
710:Usage:
    defcommand <name> <args> <help-class> <help-string> <body>

Examples:
    look in almost any .tcl file in the system library for an example, as
    one is too large to give here.

Synopsis:
    This creates a new Tcl procedure with on-line help whose name must be
    given exactly when the user wishes to invoke it.

Notes:
    * <help-class> is a Tcl list of places in which to store the <help-string>,
      with the levels in the help tree separated by periods. The leaf node
      for each path is added by this command and is <name>, so a command
      "foo" with <help-class> "swat_prog.tcl" would have its <help-string>
      stored as "swat_prog.tcl.foo".

See also:
    defcmd, proc, help

defhelp.{swat_prog.def swat_prog.help}
1047:Usage:
    defhelp <topic> <help-class> <help-string>

Examples:
    "defhelp breakpoint top {Commands relating to the setting of breakpoints}"
	    	    	Sets the help for "breakpoint" in the "top" category
			to the given string.

Synopsis:
    This is used to define the help string for an internal node of the help
    tree (a node that is used in the path for some other real topic, such
    as a command or a variable).

Notes:
    * This cannot be used to override a string that resides in the DOC file.

    * You only really need this if you have defined your own help-topic
      category.

    * <help-class> is a list of places in which to store the <help-string>,
      with the levels in the help tree separated by periods, and the different
      paths where the string should be stored separated by vertical bars.
      The leaf node for each path is added by this command and is <name>,
      so a topic "foo" with <help-class> "swat_prog.tcl" would have its
      <help-string> stored as "swat_prog.tcl.foo".

See also:
    help

defvar.{swat_prog.def swat_prog.var}
1018:Usage:
    defvar <name> <value> [<help-class> <help-string>]

Examples:
    "defvar printRegions 0"	Defines "printRegions" as a global variable and
				gives it the value 0, if it didn't have one
				already.

Synopsis:
    This command is used in .tcl files to define a global variable and give
    it an initial value, should the variable not have been defined before.

Notes:
    * If the variable is one the user may want to change, as opposed to one
      that is used to hold data internal to a command across invocations of
      the command, you will want to give it on-line help using the
      <help-class> and <help-string> arguments.

    * <help-class> is a Tcl list of places in which to store the <help-string>,
      with the levels in the help tree separated by periods. The leaf node
      for each path is added by this command and is <name>, so a variable
      "foo" with <help-class> "variable.output" would have its <help-string>
      stored as "variable.output.foo".

See also:
    var, help

explode.{swat_prog.proc swat_prog}
610:Usage:
    explode <string> [<sep-set>]

Examples:
    "explode $args"	Breaks the string stored in the variable "args"
			into a list of its individual letters.
    "explode $file /"	Breaks the string stored in the variable "file"
			into a list of its components, using "/" as the
			boundary between components when performing the split.

Synopsis:
    Breaks a string into a list of its component letters, allowing them to
    be handled quickly via a foreach loop, or the map or mapconcat commands.

Notes:
    * This is especially useful for parsing command switches.

See also:
    foreach, index, range

frame.{top.stack swat_prog.stack}
4298:Usage:
    frame top
    frame cur
    frame get <ss> <sp> <cs> <ip>
    frame next <frame>
    frame prev <frame>
    frame function [<frame>]
    frame funcsym [<frame>]
    frame scope [<frame>]
    frame info [<frame>]
    frame retaddr [<frame>]
    frame patient [<frame>]
    frame register <regName> [<frame>]
    frame set <frame> [<notify>]
    frame setreg <regName> <value> [<frame>]
    frame +<number>
    frame -<number>
    frame <number>

Examples:
    "var f [frame top]"		Fetches the token for the frame at the top
				of the current thread's stack and stores it
				in the variable "f"
    "var f [frame next $f]"	Fetches the token for the next frame up the
				stack (away from the top) from that whose token
				is in $f
    "frame register ax $f"  	Returns the value of the AX register in the
				given frame.
    "frame 1"	    	    	Sets the current frame for the current thread
				to be the top-most one.

Synopsis:
    This command provides access to the stack-decoding functions of Swat. Most
    of the subcommands deal with frame tokens, but a few also handle frame
    numbers, for the convenience of the user.

Notes:
    * Subcommands may be abbreviated uniquely.

    * Stack decoding works by heuristic, rather than relying on the presence
      of a created stack frame pointed to by BP in each function. Because
      of this, it can occasionally get confused.

    * Frame tokens are valid only while the target machine is stopped and are
      invalidated when it is continued.

    * Each frame records the address on the stack where each register was
      most-recently pushed (i.e. by the frame closest to it on the way toward
      the top of the stack). Register pushes are looked for only at the
      start of a function in what can be considered the function prologue.

    * "frame register" and "frame setreg" allow you to get or set the value
      held in a register in the given frame. For "setreg", <value> is a
      standard address expression, only the offset of which is used to set
      the register.

    * "frame register" returns all registers but "pc" as a decimal number.
      "pc" is formatted as two hex numbers (each preceded by "0x") separated
      by a colon.

    * "frame info" prints out information on where the register values for
      "frame register" and "frame setreg" are coming from/going to for the
      given or currently-selected frame. Because of the speed that can be
      gained by only pushing registers when you absolutely have to, there
      are many functions in GEOS that do not push the registers they
      save at their start, so Swat does not notice that they are actually
      saved. It is good to make sure a register value is coming from a reliable
      source before deciding your program has a bug simply because the value
      returned by "frame register" is invalid.

    * For any subcommand where the <frame> token is optional, the currently-
      selected frame will be used if you give no token.

    * "frame cur" returns the token for the currently-selected stack frame.

    * "frame set" is what sets the current frame, when set by a Tcl procedure.

    * "frame +<number>" selects the frame <number> frames up the stack (away
      from the top) from the current frame. "frame -<number>" goes the other
      way.

    * "frame <number>" selects the frame with the given number, where the
      top-most frame is considered frame number 1 and numbers count up from
      there.

    * "frame funcsym" returns the symbol token for the function active in the
      given (or current) frame. If no known function is active, you get "nil".

    * "frame scope" returns the full name of the scope that is active in the
      given (or current) frame. This will be different from the function if,
      for example, one is in the middle of an "if" that contains variables
      that are local to it only.

    * "frame function" returns the name of the function active in the given
      (or current) frame. If no known function is active, you get the cs:ip
      for the frame, formatted as two hex numbers separated by a colon.

    * "frame patient" returns the token for the patient that owns the function
      in which the frame is executing.

See also:
    addr-parse, switch

getenv.{swat_prog}
288:Usage:
    getenv <name>

Examples:
    "getenv PTTY"	Fetches the value of the PTTY environment variable.

Synopsis:
    Returns the value for a variable defined in Swat's environment.

Notes:
    * If the variable isn't defined, this returns the empty string.

See also:
    var, string

map.{swat_prog.list}
963:Usage:
    map <var-list> <data-list>+ <body>

Examples:
    "map {i j} {a b} {c d} {list $i $j}"
	    	    	    Executes the command "list $i $j" with i and j
			    assigned to successive elements of the lists
			    {a b} and {c d}, respectively, merging the
			    results into the list {{a c} {b d}}

Synopsis:
    This applies a command string to the successive elements of one or more
    lists, binding each element in turn to a variable and evaluating the
    command string. The results of all the evaluations are merged into a
    result list.

Notes:
    * The number of variables given in <var-list> must match the number of
      <data-list> arguments you give.

    * All the <data-list> arguments must have the same number of elements.

    * You do not specify the result of the <body> with the "return" command.
      Rather, the result of <body> is the result of the last command executed
      within <body>.

See also:
    mapconcat, foreach

mapconcat.{swat_prog.list}
305:Usage:
    mapconcat <var-list> <data-list>+ <body>

Examples:
    "mapconcat {i j} {a b} {c d} {list $i $j}"
	    	    	    Executes the command "list $i $j" with i and j
			    assigned to successive elements of the lists
			    {a b} and {c d}, respectively, merging the
			    results into the string 
null.{swat_prog swat_prog.list swat_prog.lisp}
436:Usage:
    null <val>

Examples:
    "null $sym"		Sees if the symbol token stored in $sym is the empty
			string or "nil".

Synopsis:
    Checks to see if a string is either empty or "nil", special values returned
    by many commands when something isn't found or doesn't apply. Returns non-
    zero if <val> is either of these special values.

Notes:
    * The notion of "nil" as a value comes from lisp.

See also:
    index, range

pid.{obscure}
308:Usage:
    pid

Examples:
    "pid"	    	Return Swat's process ID.

Synopsis:
    This is useful only for debugging Swat when one wants to attach to it
    using another debugger.

Notes:
    * This does nothing on DOS systems, where process IDs don't really exist.

See also:
    abort, alloc, dbg, rpc-dbg

require.{swat_prog swat_prog.load}
485:Usage:
    require <name> [<file>]

Examples:
    "require fmtval print"	Makes sure the procedure "fmtval" is defined,
				loading the file "print.tcl" if it is not.

Synopsis:
    This is used to ensure that a particular function, not normally invoked
    by the user but present in some file in the system library, is actually
    loaded.

Notes:
    * If no <file> is given, a file with the same name (possibly plus ".tcl")
      as the function is assumed.

See also:
    autoload

scope.{obscure}
692:Usage:
    scope [<scope-name>]

Examples:
    "scope"	    	    Returns the name of the current auxiliary
			    scope.

Synopsis:
    This changes the auxiliary scope in which Swat looks first when trying
    to resolve a symbol name in an address expression.

Notes:
    * This command isn't usually typed by users, but it is the reason you
      can reference local labels after you've listed a function unrelated to
      the current one.

    * You most likely want to use the set-address Tcl procedure, rather than
      this command.

    * If <scope-name> is "..", the auxiliary scope will change to be the
      lexical parent of the current scope.

See also:
    whatis, addr-parse

sleep.{swat_prog}
592:Usage:
    sleep <seconds>

Examples:
    "sleep 5"	    	Pauses Swat for 5 seconds.

Synopsis:
    This pauses Tcl execution for the given number of seconds, or until the
    user types Ctrl+C.

Notes:
    * Messages from the PC continue to be processed, so a FULLSTOP event will
      be dispatched if the PC stops, but this command won't return until the
      given length of time has elapsed.

    * <seconds> is a real number, so "1.5" is a valid argument.

    * Returns non-zero if it slept for the entire time, or 0 if the sleep
      was interrupted by the user.

See also:
    time

sort.{swat_prog.list}
575:Usage:
    sort [-r] [-n] [-u] <list>

Examples:
    "sort -n $ids"	Sorts the list in $ids into ascending numeric order.

Synopsis:
    This sorts a list into ascending or descending order, lexicographically
    or numerically.

Notes:
    * If "-r" is given, the sort will be in descending order.

    * If "-u" is given, duplicate elements will be elimiated.

    * If "-n" is given, the elements are taken to be numbers (with the usual
      radix specifiers possible) and are sorted accordingly.

    * The sorted list is returned.

See also:
    map, foreach, mapconcat

stream.{swat_prog.load swat_prog.file}
6509:Usage:
    stream open <file> (r|w|a|r+|w+)
    stream read (line|list|char) <stream>
    stream print <list> <stream>
    stream write <string> <stream>
    stream rewind <stream>
    stream seek (<posn>|+<incr>|-<decr>|end) <stream>
    stream state <stream>
    stream eof <stream>
    stream close <stream>
    stream flush <stream>
    stream watch <stream> <what> <procName>
    stream ignore <stream>

Examples:
    "var s [stream open kmap.def w]"	Open the file "kmap.def" for writing,
					creating it if it wasn't there before,
					and truncating any existing file.
    "stream write $line $s" 	    	Write the string in $line to the
					open stream.
    "while {![stream eof $s]} {
	var line [stream read line $s]
	echo $line
    }"	    	    	    	    	Read and echo the contents of the
					stream whose token is in $s.

Synopsis:
    This allows you to read, write, create and otherwise manipulate files
    from Tcl.

Notes:
    * Subcommands may be abbreviated uniquely.

    * Streams are a precious resource, so you should be sure to always
      close them when you are done. This means stream access should usually
      be performed under the wings of a "protect" command so the stream
      gets closed even if the user types Ctrl+C.

    * Swat's current directory changes as you change stack frames, with the
      directory always being the one that holds the executable file for the
      patient to which the function in the current frame belongs. If the <file>
      given to "stream open" isn't absolute, it will be affected by this.

    * The global variable file-init-dir contains the absolute path of the
      directory in which Swat was started. It can be quite useful when forming
      the <file> argument to "stream open".

    * The second argument to "stream open" is the access mode of the file.
      The meanings of the 5 possible values are:
	r   read-only access. The <file> must already exist.
	w   write-only access. If <file> doesn't already exist, it will be
	    created. If it does exist, it will be truncated.
	a   append mode. The file is opened for writing only. If <file>
	    doesn't already exist, it will be created. If it does exist,
	    writing will commence at its end.
	r+  read/write. The <file> must already exist. A single read/write
	    position is maintained, and it starts out at the start of the file.
	w+  read/write. If <file> doesn't already exist, it will be created.
	    If it does exist, it will be truncated. A single read/write
	    position is maintained, and it starts out at the start of the file.

    * "stream read" can read data from the stream in one of three formats:
	line	Returns all the characters from the current position up to
		the first newline or the end of the file, whichever comes
		first. The newline, if seen, is placed at the end of the string
		as \n. Any other non-printable characters or backslashes
		are similarly escaped.
	list	Reads a single list from the stream, following all the usual
		rules of Tcl list construction. If the character at the current
		read position is a left brace, this will read to the matching
		right brace, bringing in newlines and other whitespace. If
		there is whitespace at the inital read position, it is
		skipped. Standard Tcl comments before the start of the list
		are also skipped over (so if the first non-whitespace char-
		acter encountered is #, the characters up to the following
		newline or end-of-file will also be skipped).
	char	This reads a single character from the stream. If the character
		isn't printable ASCII, it will be returned as one of the
		regular Tcl backslash escapes.
      If there's nothing left to read, you will get an empty string back.

    * "stream write" writes the string exactly as given, without interpreting
      backslash escapes. If you want to include a newline or something of the
      sort in the string, you'll need to use the "format" command to generate
      the string, or place the whole thing in braces and have the newlines
      in there literally.

    * While the syntax for "stream print" is the same as for "stream write",
      there is a subtle difference between the two. "stream write" will
      write the string as it's given, while "stream print" is intended to
      write out data to be read back in by "stream read list". Thus the
      command
	stream write {foo biff} $s
      would write the string "foo biff" to the stream. In contrast,
	stream print {foo biff} $s
      would write "{foo biff}" followed by a newline.

    * To ensure that all data you have written has made it to disk, use the
      "stream flush" command. Nothing is returned.

    * "stream rewind" repositions the read/write position at the start of
      the stream. "stream seek" gives you finer control over the position.
      You can set the stream to an absolute position (obtained from a previous
      call to "stream seek") by passing the byte number as a decimal number.
      You can also move forward or backward in the file a relative amount by
      specifying the number of bytes to move, preceded by a "+", for forward,
      or a "-", for backward. Finally, you can position the pointer at the
      end of the file by specifying a position of "end".

    * "stream seek" returns the new read/write position, so a call of
      "stream seek +0 $s" will get you the current position without changing 
      anything. If the seek couldn't be performed, -1 is returned.

    * "stream state" returns one of three strings: "error", if there's been
      some error accessing the file, "eof" if the read/write position is at
      the end of the file, or "ok" if everything's fine. "stream eof" is a
      shortcut for figuring if you've reached the end of the file.

    * "stream close" shuts down the stream. The stream token should never
      again be used.

    * "stream watch" and "stream ignore" are valid only on UNIX and only make
      sense if the stream is open to a device or a socket. "stream watch" causes
      the procedure <procName> to be called whenever the stream is ready for
      the access indicated by <what>, which is a list of conditions chosen
      from the following set:
	read	the stream has data that may be read.
	write	the stream has room for data to be written to it.
      When the stream is ready, the procedure is called:
	<procName> <stream> <what>
      where <what> is the list of operations for which the stream is ready.

See also:
    protect, source, file

unalias.{support.binding}
434:Usage:
    unalias <name>+

Examples:
    "unalias p"		Removes "p" as an alias for "print"

    "purge p" 		Removes "p" as an alias for "print"

Synopsis:
    This removes any alias for the given command(s).

Notes:
    * In fact, this actually can be used to delete any command at all,
      including Tcl procedures and Swat built-in commands. Once they're
      gone, however, there's no way to get them back.

See also:
    alias

unassemble.{swat_prog.memory}
1062:Usage:
    unassemble [<addr> [<decode-args>]]

Examples:
    "unassemble cs:ip 1"	Disassemble the instruction at cs:ip and
				return a string that shows the values of
				the arguments involved.

Synopsis:
    This decodes data as machine instructions and returns them to you for
    you to display as you like. It is not usually typed from the command
    line.

Notes:
    * The return value is always a four-element list:
	{<symbolic-addr> <instruction> <size> <args>}
      where <symbolic-addr> is the address expressed as an offset from some
      named symbol, <instruction> is the decoded instruction (without any
      leading whitespace), <size> is the size of the instruction (in bytes)
      and <args> is a string displaying the values of the instruction
      operands, if <decode-args> was given and non-zero (it is the empty string
      if <decode-args> is missing or 0).

    * If <addr> is missing or "nil", the instruction at the current frame's
      cs:ip is what you'll get back.

See also:
    listi, format-instruction, mangle-softint

wait.{swat_prog.patient}
539:Usage:
    wait

Examples:
    "wait"	    	Wait for the target PC to halt.

Synopsis:
    This is used after the machine has been continued with "continue-patient"
    to wait for the machine to stop again. Its use is usually hidden by
    calling "cont" or "next".

Notes:
    * This returns 0 if the patient halted naturally (because it hit a
      breakpoint), and 1 if it was interrupted (by the user typing Ctrl+C to
      Swat).

    * Most procedures won't need to use this function.

See also:
    continue-patient, waitForPatient

insert-highlighted-text.{swat_prog.mouse}
0:
clear-highlightinfo.{swat_prog.mouse}
137:Usage:
    clear-highlightinfo

Synopsis:
    clears out the C data structure for highlightinfo (INTERNAL USE ONLY)

See also:
    none.

update-scrolled-highlight.{swat_prog.mouse}
108:Usage:
    update-scrolled-highlight

Synopsis:
    updates the highlightinfo from TCL

See also:
    none.

invert-screen-region.{swat_prog.mouse}
381:INTERNAL
Usage:
    invert-screen-region <start> <end>

Examples:
    "invert-screen-region 3 10"	Inverts region from from 3 to 10.

Synopsis:
    Inverts a set of characters on the screen

Notes:
    * <start> and <end> are offsets within the character frame buffer. This
      implies that only "lines" of characters may be inverted, not rect-
      angles.

See also:
    none.

beep.{swat_prog.output}
284:Usage:
    beep

Examples:
    "beep"	Honk at the user.

Synopsis:
    Alerts the user to something. If the terminal supports a visible bell,
    that's how the alert is issued, else it uses an audible bell.

Notes:
    * This is not supported under DOS for now.

See also:
    none.

bind-key.{support.binding}
274:Usage:
    bind-key <ascii_value> <function>

Examples:
    "bind-key \321 scroll_srcwin_down" binds scroll-down key 
                                    to the scroll_srcwin_down tcl routine
Synopsis:
    binds the ascii value to a function
See also:
    alias, unbind-key

unbind-key.{support.binding}
171:Usage:
    unbind-key <ascii_value>

Examples:
    "unbind-key \321" unbinds scroll-down key 

Synopsis:
    unbinds the passed ascii value 
See also:
    alias, bind-key

get-key-binding.{support.binding}
253:Usage:
    get-key-binding <char>

Synopsis:
    gets key binding for given key
Example:
    "get-key-binding c"  	gets key binding for the characeter c
    "get-key-binding \045"	gets key binding for the % key
See also:
    alias, bind-key, unbind-key

read-line.{swat_prog.input}
1673:Usage:
    read-line [<isTcl> [<initial input> [<special chars>]]]

Examples:
    "read-line"			reads a single line of text.
    "read-line 1"		reads a TCL command.
    "read-line 1 {go }"		reads a TCL command that starts with "go "
    "read-line 1 {} {\e\4}"	reads a TCL command, considering escape
				and control-d cause for immediate return,
				regardless of whether braces and brackets
				are balanced

Synopsis:
    Reads a line of input from the user, optionally handling multi-line
    Tcl commands, initial editable input, and special immediate-return
    characters.

Notes:
    * If <isTcl> is non-zero, the input may span multiple lines, as
      read-line will not return until all braces and brackets are
      properly balanced, according to the rules of TCL. This behaviour
      may be overridden by the <special chars> argument.

    * If <initial input> is given and non-empty, it is taken to be the
      initial contents of the input line and may be edited by the user
      just as if s/he had typed it in. The string is *not* automatically
      displayed, however; that is up to the caller.

    * <special chars> is an optional string of characters that will cause
      this routine to return immediately. The character that caused the
      immediate return is left as the last character of the string returned.
      You may use standard backslash escapes to specify the characters. This
      will return even if the user is entering a multi-line Tcl command whose
      braces and brackets are not yet balanced.

    * The user's input is returned as a single string with the final newline
      stripped off.

See also:
    top-level-read

read-char.{swat_prog.input}
273:Usage:
    read-char [<echo>]

Examples:
    "read-char 0"	Read a single character from the user and don't echo it.

Synopsis:
    Reads a character from the user.

Notes:
    * If <echo> is non-zero or absent, the character typed will be echoed.

See also:
    read-line.

save.{top.support}
862:Usage:
    save (<#lines> | <filename>)

Examples:
    "save 1000"	    	    Save the last 1000 lines that scroll off the screen.
    "save puffball" 	    Save the contents of the entire scroll buffer to
			    the file "puffball".

Synopsis:
    Controls the scrollback buffer Swat maintains for its main command window.

Notes:
    * If the argument is numeric, it sets the number of lines to save (the
      default is 1,000).

    * If the argument is anything else, it's taken to be the name of a file
      in which the current buffer contents (including the command window)
      should be saved. If the <filename> is relative, it is taken relative
      to the directory in which the executable for the patient to which the
      current stack frame's function belongs is located. If the file already
      exists, it is overwritten.

See also:
    none.

slog.{top.support}
422:Usage:
     slog <filestream>

Examples:
    "slog $stream1" 	    Save the contents of the scroll buffer and contents in 
                            current window to stream1. 

Synopsis:
    Saves the contents in scroll buffer up to the number of lines set by "save",
    to the screen provided by the user. The contents in the current window will be 
    saved up to the current position. 

See also:
    save, stream 

sbclr.{swat_prog.output}
151:Usage: 
    sbclr 

Synposis: 
      Frees all the lines saved in the scroll buffer. 

Notes: 
      Use "wclear" in conjun 

See also: 
      wclear 

echo.{swat_prog.output}
329:Usage:
    echo [-n] <string>+

Examples:
    "echo -n yes?"	Prints "yes?" without a newline.
    "echo hi mom"   	Prints "hi mom" followed by a newline.

Synopsis:
    Prints its arguments, separated by spaces.

Notes:
    * If the first argument is "-n", no newline is printed after the arguments.

See also:
    flush-output.

system.{swat_prog.external}
805:Usage:
    system <command>

Examples:
    "system {chkdsk d:}"	Runs the chkdsk command on your D drive
    "system {vi /tmp/whuffle}"	Runs vi to edit /tmp/whuffle

Synopsis:
    Causes Swat to execute another program, giving it complete control of the
    screen.

Notes:
    * A shell is always used to execute the command. Under UNIX, this is the
      Bourne shell, so tildes in file names aren't expanded. Under DOS, this
      is what your COMSPEC environment variable says to use.

    * This command doesn't return until the command it runs is done. The output
      of the command goes straight to the screen and isn't saved anywhere.

    * Returns the numeric code with which the command executed. This is usually
      0 if the command was happy, or non-zero if it wasn't.

See also:
    exec

wcreate.{swat_prog.window}
715:Usage:
    wcreate <num-lines>

Examples:
    "wcreate 3"	    Creates a 3-line window just below the command window.

Synopsis:
    Creates a window into which output may be placed without disturbing or
    being disturbed by the main command window.

Notes:
    * Whether the window appears immediately below or above the main command
      window is determined by the "wtop" command. By default, windows appear
      below the main window.

    * The window is always the full width of the screen.

    * If there aren't <num-lines> available on the screen, this generates an
      error.

    * Returns a window token to be used for later references to the window.

See also:
    wdelete, wpush, wrefresh, wpop.

wfind.{swat_prog.window}
293:Usage:
    wfind <x> <y>

Examples:
    "wfind $mousex $mousey"	Return the token for the window under the mouse

Synopsis:
    Locates the window that contains a given screen coordinate and returns
    its token.

Notes:
    * Returns {} if no window under the given point

See also:
    wdim

wdim.{swat_prog.window}
371:Usage:
    wdim <window>

Examples:
    "wdim $window"	Returns the origin & dimensions of the given window

Synopsis:
    Extracts the origin and dimensions of a window, for use in calculating
    the layout of echoed things, for example.

Notes:
    * The value returned is a 4-list: {width height origin-x origin-y}

    * Coordinates are 0-origin

See also:
    wfind

wdelete.{swat_prog.window}
404:Usage:
    wdelete <window>

Examples:
    "wdelete [index $disp 2]"	Deletes the window whose token is stored as
				the 3rd element of $disp

Synopsis:
    Deletes a window and enlarges the command window accordingly.

Notes:
    * If "wtop 1" has been executed, all windows below the one being deleted
      shuffle up, else all windows above the one being deleted shuffle down.

See also:
    wcreate

wpush.{swat_prog.window}
443:Usage:
    wpush <window>

Examples:
    "wpush $disp"	Makes all I/O to pass through the window whose token
			is in $disp

Synopsis:
    Redirects all input and output to pass through the indicated window.

Notes:
    * The previous I/O window may be recovered by means of the wpop command.

    * No output will appear in the window until either wrefresh is invoked,
      or you echo a newline to the window.

See also:
    wpop, wrefresh.

wpop.{swat_prog.window}
202:Usage:
    wpop

Examples:
    "wpop"	Return to the previous window for I/O

Synopsis:
    Restores the window that was overridden by the most recent "wpush" to
    I/O supremacy.

See also:
    wpush.

winverse.{swat_prog.window swat_prog.output}
307:Usage:
    winverse ( 1 | 0 )

Examples:
    "winverse 1"	Set the current window to invert future characters
			echoed to it.

Synopsis:
    Allows you to highlight characters echoed to the current window.

Notes:
    * The state of the inverse flag for the window remains past a wpop.

See also:
    echo.

wmove.{swat_prog.window}
707:Usage:
    wmove [+|-]<x> [+|-]<y>

Examples:
    "wmove +0 +3"	Move the cursor down three lines
    "wmove 0 0"		Move to the current window's upper-left corner

Synopsis:
    Moves the cursor for the current window, thereby adjust where input is
    echoed and where output goes.

Notes:
    * The <x> and <y> values may be either absolute or relative. If an argument
      begins with a + or a -, it is relative (thus "+0" means no change). If
      it begins with just a digit, it is absolute.

    * <x> and <y> are decimal numbers, only.

    * If the move would take the cursor outside the window, an error will
      be generated.

    * Returns the new cursor position as {x y}

See also:
    wdim.

wclear.{swat_prog.window}
443:Usage:
    wclear

Examples:
    "wclear"	Erase the current window

Synopsis:
    Clears all the characters in the current window to spaces.

Notes:
    * This does not actually update the screen, on the assumption that you're
      clearing the window in order to write new stuff into it, so changing the
      screen would be wasted work. Use wrefresh if you want the window to
      appear clear on-screen as well.

See also:
    wrefresh.

wrefresh.{swat_prog.window}
396:Usage:
    wrefresh

Examples:
    "wrefresh"	    Make the screen reflect the window's current contents

Synopsis:
    Synchronizes the current window with the screen, so the are of the screen
    covered by the window looks like what's in the window.

Notes:
    * You need only use this if you don't echo a newline, as echoing a newline
      refreshes the current window.

See also:
    none.

wtop.{window}
526:Usage:
    wtop ( 1 | 0 )

Examples:
    "wtop 1"	    Places windows created with "wcreate" above the command
		    window

Synopsis:
    Allows you to have all the displays, regwins, etc., placed above the main,
    scrolling input window, if you so desire.

Notes:
    * Any window already existing when you invoke this command will move to
      the appropriate side of the command window.

    * By default, windows are created below the command window, i.e. "wtop 0"
      is the default setting.

See also:
    wcreate.

cmdwin.{swat_prog.window}
381:Usage:
    cmdwin

Examples:
    "cmdwin"	    	Returns the token for the main input window

Synopsis:
    Fetches the token for the main input/output window in which the text
    cursor normally resides.

Notes:
    * This command exists primarily to make finding the dimensions of the
      command window easier, but you may find it useful for other reasons.

See also:
    wdim

dss_low.{swat_prog.patient}
0:
event.{swat_prog.event}
3077:Much of swat's function is driven by events that it dispatches internally
from various places. As some of these events signal happenings that could
be of interest to a swat programmer, they are made available via this
command. Options for this command are:
    handle <eventName> <handler> [<data>]
 	    The <handler> procedure is invoked each time an event of type
	    <eventName> is dispatched. The handler receives two arguments:
	    an event-specific piece of data, and the <data> given in this
	    command. A handler procedure should be declared:
	    	  proc <handler> {arg data} {<body>}
	    Returns an <event-name> for later use in deleting it.
	    The <handler> should return one of "EVENT_HANDLED",
	    "EVENT_NOT_HANDLED" or "EVENT_STOP_HANDLING". If it
	    returns "EVENT_STOP_HANDLING", the event will not be
	    dispatched to any other handlers of that event.
    delete <event>
	    Deletes the event handler with the given name, as returned by
	    an "event handle" command.
    dispatch <eventName> <arg>
	    Dispatches an the given event with the piece of data to all
	    handlers of that event. If <eventName> is a pre-defined event
	    type, <arg> will be converted to the appropriate type before
	    being dispatched, else it is passed as a string.
    create
    	    Returns a number that represents a new event type. Handlers may
	    then be defined for and events dispatched of the new type.
    list
    	    Lists all tcl-registered events by their event-names and the
	    handler function

Events currently defined are:
    FULLSTOP	Generated when patient stops for a while. Argument is
		string telling why the patient stopped.
    CONTINUE	Generated just before the patient is continued. The
		argument is non-zero if going to single-step.
    TRACE   	Generated when the execution of a source line completes
    	    	and the patient is in line-trace mode.
    START	Generated when a new patient/thread is created. Argument
		is patient token of patient involved.
    EXIT	Generated when a patient exits. Argument is patient token of
		patient involved.
    STACK	Current stack frame has changed. The argument is non-zero
		if the stack change comes from a change in patients/threads
		or zero if the change comes from actually going up or down
		the stack in the current patient.
    DETACH	Detaching from the PC. arg is always 0x0.
    RESET   	Returning to top level. arg is always 0x0.
    ATTACH  	Attached to the PC. arg is always 0x0.
    RELOAD	Kernel was reloaded. Arg is always 0x0
    CHANGE	Current patient has changed. Argument is the token for the
		previous patient.
    STEP    	Machine has stepped a single instruction. Arg is value to
		pass to "patient stop" if you wish the machine to stay
		stopped.
    STOP    	Machine has hit a breakpoint. Arg is value to pass to 
		"patient stop" if you wish the machine to stay stopped.
    INT	    	Machine has hit some other interrupt that's being caught.
		Arg is the interrupt number. The machine will remain stopped
		unless it is continued with "continue-patient".
expr-debug.{obscure}
252:Usage:
    expr-debug (on|off)

Examples:
    "expr-debug on"	Turn on debugging output for parsing of address
			expressions.

Synopsis:
    Enables or disables debugging output during the parsing of address
    expressions.

See also:
    addr-parse.

addr-parse.{swat_prog}
3136:Usage:
    addr-parse <addr> [<addr-only> [<frame>]]

Examples:
    "addr-parse *ds:si"		Parse the address "*ds:si" into its handle,
    				offset and data-type components. In this
				case, the data-type will be "nil".
    "addr-parse ILLEGAL_HANDLE 0"	Figures the value for the enumerated constant
				"ILLEGAL_HANDLE". The handle for this 'address'
				will be "value".

Synopsis:
    This command parses the address expression into its components, returning
    a list {<handle> <offset> <type>} as its value.

Notes:
    * This will generate an error if there's an error parsing the <addr>

    * <handle> is the token for the handle in which the address resides, or
      "nil" if the address is absolute. This token can be given to the "handle"
      command for further processing.

    * <offset> is a decimal number and is the offset of the address within
      the block indicated by the <handle> token. If <handle> is "nil", this
      can be a 32-bit linear address.

    * <type> is a type token for the data at the given address, if any could
      be determined. For example the address "ds:bx" has no type, as it's
      just a memory reference, but "ds:bx.VDE_extraData" will have whatever
      type the structure field "VDE_extraData" possesses. This token can be
      passed to the "type" or "value" commands for further processing.

    * If the expression doesn't refer to data that can be fetched from the
      patient (e.g. "foo*3") <handle> will be returned as the string
      "value" instead of a normal handle token. <offset> is then a value-
      list for the resulting value, and <type> is the type description by
      means of which the value list can be interpreted.

    * The optional <addr-only> argument is 0 or non-zero to indicate the
      willingness or unwillingness, respectively, of the caller to receive
      a value list in return. If <addr-only> is absent or non-zero, any
      expression that can only be expressed as a value will generate an error.
      the single exception to this is if the expression involves pointer
      arithmetic. For example "pself+1" normally would be returned as a
      value list for a far pointer, as the result cannot be fetched from the
      PC. When <addr-only> is absent or non-zero, "addr-parse" pretends the
      expression was "*(pself+1)", allowing simple specification of an
      address by the user for those commands that just address memory.

    * The <offset> element of the returned list is very useful when you want
      to allow the user to give you anything, be it a register or a number or
      an enumerated constant or whatever. You can pass the argument you were
      given to [index [addr-parse $arg] 1] and end up with an appropriate
      decimal number. Be sure to pass <addr-only> as 0, however, or else
      you'll generate an error.

    * The optional <frame> argument is the token for a frame (as returned by
      the "frame" command) in whose context the expression should be
      evaluated. All registers, XIP mappings, local variables, etc., come
      from that frame.

See also:
    value, handle, type

expr-debug.{obscure}
252:Usage:
    expr-debug (on|off)

Examples:
    "expr-debug on"	Turn on debugging output for parsing of address
			expressions.

Synopsis:
    Enables or disables debugging output during the parsing of address
    expressions.

See also:
    addr-parse.

addr-parse.{swat_prog}
3136:Usage:
    addr-parse <addr> [<addr-only> [<frame>]]

Examples:
    "addr-parse *ds:si"		Parse the address "*ds:si" into its handle,
    				offset and data-type components. In this
				case, the data-type will be "nil".
    "addr-parse ILLEGAL_HANDLE 0"	Figures the value for the enumerated constant
				"ILLEGAL_HANDLE". The handle for this 'address'
				will be "value".

Synopsis:
    This command parses the address expression into its components, returning
    a list {<handle> <offset> <type>} as its value.

Notes:
    * This will generate an error if there's an error parsing the <addr>

    * <handle> is the token for the handle in which the address resides, or
      "nil" if the address is absolute. This token can be given to the "handle"
      command for further processing.

    * <offset> is a decimal number and is the offset of the address within
      the block indicated by the <handle> token. If <handle> is "nil", this
      can be a 32-bit linear address.

    * <type> is a type token for the data at the given address, if any could
      be determined. For example the address "ds:bx" has no type, as it's
      just a memory reference, but "ds:bx.VDE_extraData" will have whatever
      type the structure field "VDE_extraData" possesses. This token can be
      passed to the "type" or "value" commands for further processing.

    * If the expression doesn't refer to data that can be fetched from the
      patient (e.g. "foo*3") <handle> will be returned as the string
      "value" instead of a normal handle token. <offset> is then a value-
      list for the resulting value, and <type> is the type description by
      means of which the value list can be interpreted.

    * The optional <addr-only> argument is 0 or non-zero to indicate the
      willingness or unwillingness, respectively, of the caller to receive
      a value list in return. If <addr-only> is absent or non-zero, any
      expression that can only be expressed as a value will generate an error.
      the single exception to this is if the expression involves pointer
      arithmetic. For example "pself+1" normally would be returned as a
      value list for a far pointer, as the result cannot be fetched from the
      PC. When <addr-only> is absent or non-zero, "addr-parse" pretends the
      expression was "*(pself+1)", allowing simple specification of an
      address by the user for those commands that just address memory.

    * The <offset> element of the returned list is very useful when you want
      to allow the user to give you anything, be it a register or a number or
      an enumerated constant or whatever. You can pass the argument you were
      given to [index [addr-parse $arg] 1] and end up with an appropriate
      decimal number. Be sure to pass <addr-only> as 0, however, or else
      you'll generate an error.

    * The optional <frame> argument is the token for a frame (as returned by
      the "frame" command) in whose context the expression should be
      evaluated. All registers, XIP mappings, local variables, etc., come
      from that frame.

See also:
    value, handle, type

find-geode.{obscure}
207:Usage:
    find-geode [-n] <geode_name>

Examples:
    "find-geode write"		Find path of EC GeoWrite
    "find-geode -n write"		Find path of non-EC GeoWrite

Synopsis:
    Find path of geode on host machine.

gc.{support}
216:Implements a simple garbage collector to scavenge unreferenced symbols and
types. If given an argument, turns on extensive heap checking, which
slows things down enormously, but does ensure the heap is in good shape.
handle.{swat_prog}
5258:Usage:
    handle lookup <id>
    handle find <address> [<frame>]
    handle all
    handle nointerest <interest-record>
    handle interest <handle> <proc> [<data>+]
    handle segment <handle>
    handle size <handle>
    handle state <handle>
    handle owner <handle>
    handle patient <handle>
    handle other <handle>
    handle id <handle>
    handle isthread <handle>
    handle iskernel <handle>
    handle isfile <handle>
    handle isvm <handle>
    handle ismem <handle>
    handle isxip <handle>

Examples:
    "handle lookup [read-reg bx]"   get the handle token for the handle whose
				    ID is in the bx register.
    "handle interest $h ob-interest-proc [concat si=$chunk $method]"
    	    	    	    	    call ob-interest-proc, passing the
				    list {si=$chunk $method}, whenever the
				    state of the handle whose token is in $h
				    changes.
    "handle patient $h"	    	    get the token for the patient that owns
				    the handle whose token is in $h
    "handle all"    	    	    get the list of the ID's of all handles
				    currently in Swat's handle table.

Synopsis:
    The "handle" command provides access to the structures Swat uses to track
    memory and thread allocation on the PC.

Notes:
    * As with most other commands that deal with Swat structures, you use
      this one by calling a lookup function (the "lookup" and "find"
      subcommands) to obtain a token that you use for further manipulations.
      A handle token is also returned by a few other commands, such as
      addr-parse.

    * Handle tokens are valid only until the machine is continued. If you
      need to keep the token for a while, you will need to register interest
      in the handle using the "interest" subcommand. Most handles tokens
      will simply be cached while the machine is stopped and flushed from
      the cache when the machine continues. Only those handles for which all
      state changes must be known remain in Swat's handle table. For
      example, when a conditional breakpoint has been registered with the
      stub using the segment of a handle, the condition for that breakpoint
      must be updated immediately should the memory referred to by the
      handle be moved, swapped or discarded. Keeping the number of tracked
      handles low reduces the number of calls the stub must make to tell
      Swat about handle-state changes.

    * The <id> passed to the "lookup" subcommand is an integer. Its default
      radix is decimal, but you can specify the radix to use in all the
      usual ways. The value returned is the token to use to obtain further
      information about the handle.

    * "handle size" returns the number of bytes allocated to the handle.

    * "handle segment" returns the handle's segment (if it's resident) in
      decimal, as it's intended for use by TCL programs, not people.

    * "handle owner" returns the token of the handle that owns the given
      handle, not its ID.

    * "handle all" returns a list of *handle ID numbers* NOT a list of
      handle tokens. The list is only those handles currently known to Swat.

    * "handle interest" tells Swat you wish to be informed when the handle
      you pass changes state in some way. The procedure <proc> will be
      called with two or more arguments. The first is the token of the
      handle whose state has changed, and the second is the state change the
      handle has undergone, taken from the following set of strings:
	    swapin  	Block swapped in from disk/memory
	    load	Resource freshly loaded from disk
	    swapout 	Block swapped to disk/memory
	    discard 	Block discarded
	    resize	Block changed size and maybe moved
	    move	Block moved on heap
	    free	Block has been freed
	    fchange	Block's HeapFlags changed
      Any further arguments are taken from the <data>+ arguments provided
      when you expressed interest in the handle.

      This command returns a token for an interest record that you pass to
      "handle nointerest" when you no longer care about the handle.  When
      the block is freed (the state change is "free"), there is no need to
      call "handle nointerest" as the interest record is automatically
      deleted.

    * "handle state" returns an integer indicating the state of the handle.
      The integer is a mask of bits that mean different things:
	    0xf8000 Type        0x00800 LMem        0x00400 Kernel
	    0x00200 Attached    0x00100 Process     0x00080 Resource
	    0x00040 Discarded   0x00020 Swapped     0x00010 Shared
	    0x00008 Fixed   	0x00004 Discardable 0x00002 Swapable
 	    0x00001 Resident

      When the integer is anded with the mask for Type (0xf8000), the
      following values indicate the following types of handles:
	    0xe0000 Thread  	0xd0000 File	    0xc0000 VM File
	    0xb0000 Semaphore	0xa0000 Saved block 0x90000 Event
	    0x80000 Event with stack data chain	    0x60000 Timer
	    0x70000 Stack data chain element	    0x40000 Event queue
	    	    	    	0x08000 Memory

    * "handle other" returns the handle's otherInfo field. NOTE: This isn't
      necessarily the otherInfo field from the PC. For resource
      handles, e.g., it's the symbol token of the module for the handle.

help-get.{swat_prog.help}
591:Usage:
    help-get <topic-path>

Examples:
    "help-get top.stack"	Retrieves the strings for all nodes at the "top.stack"
			level of the help tree.

Synopsis:
    Fetches a list of help strings for all nodes at the given level of the
    help tree.

Notes:
    * This is usually only used when <topic-path> is a terminal node, but
      occasionally there are two things with the same topic path (since there
      isn't a central registration for such things to avoid conflicts...).

    * This is different from "help-fetch", which can return only one string.

See also:
    help-fetch

help-fetch.{swat_prog.help}
407:Usage:
    help-fetch <topic-path>

Examples:
    "help-fetch top.patient"	Retrieves the help string for the "patient"
				node in the "top" level of the help tree.

Synopsis:
    Fetches the help string for a given topic path in the help tree.

Notes:
    * If there is more than one node with the given path in the tree, only
      the string for the first node will be returned.

See also:
    help-get.

help-fetch-level.{swat_prog.help}
389:Usage:
    help-fetch-level <topic-path>

Examples:
    "help-fetch-level top.advanced.stack"    Returns the topics within the
					    "top.advanced.stack" level of the
					    help tree.

Synopsis:
    Returns a list of the topics available at a given level in the help tree.

Notes:
    * The result is a list of node names, without leading path components.

See also:
    help-fetch.

help-scan.{swat_prog.help}
498:Usage:
    help-scan <pattern>

Examples:
    "help-scan break"	    Looks for all nodes at any level of the help tree
			    whose documentation matches *break*

Synopsis:
    Scans all nodes in the help tree for those whose documentation matches a
    given pattern.

Notes:
    * <pattern> is expanded to *<pattern>* before the search is performed.

    * The result is a list of topic-paths for those nodes whose documentation
      string contains the given pattern.

See also:
    help-fetch.

help-is-leaf.{swat_prog.help}
383:Usage:
    help-is-leaf <topic-path>

Examples:
    "help-is-leaf top.running" See if top.running is a leaf node in the 
				help tree (i.e. it has no children).

Synopsis:
    Determines if a given topic path refers to a help topic or a help
    category.

Notes:
    * Returns 1 if the given path refers to a leaf node, 0 if it is not.

See also:
    help-fetch, help-fetch-level.

attach-low.{swat_prog.input}
69:Usage:
    attach-low	arg

Synopsis:
    reconnect to the remote PC


invalidate-frames.{swat_prog}
0:
find-opcode.{swat_prog}
1473:Locates the mnemonic for and decodes an opcode. Accepts the address from which
the opcode bytes were fetched, and one or more opcode bytes as arguments.
Returns a list of data from the opcode descriptor:
	{name length branch-type args modrm bRead bWritten inst}
length is the length of the instruction.
branch-type is one of:

	1	none (flow passes to next instruction)
	j	absolute jump
	b   	pc-relative jump (branch)
	r	near return
	R	far return
	i	interrupt return
	I	interrupt instruction

args is a list of two-character argument descriptors. The first character
indicates the type of argument. The second indicates the argument size.
The first is taken from the following list:

	c	code address -- indicates a flow change
	d	data -- an immediate value
	e	effective address -- contents of register or memory
	m	memory
	r	register
	x	simple memory (used for short Ax MOV's)
	N	next instruction. arg size ignored
	o	string instruction source operand only if override

Any argument descriptor that doesn't match is to be taken as a literal. E.g.
AX as a descriptor means AX is that operand.
modrm is the modrm byte for the opcode.
bRead is the number of bytes that may be read by the instruction, if one of
its operands is in memory. bWritten is the number of bytes that may be written
by the instruction, if one of its operands is in memory.
inst is the decoded form of the instruction. If not enough bytes were given
to decode the instruction, inst is returned as empty.
dcache.{swat_prog}
1805:Usage:
    dcache bsize <blockSize>
    dcache length <numBlocks>
    dcache stats
    dcache params
    dcache (on|off)

Examples:
    "dcache bsize 16"	    Set the number of bytes fetched at a time to 16.
    "dcache length 1024"    Allow 1024 blocks of the current block size to
			    be in the cache at a time.
    "dcache off"    	    Disables the Swat data cache.

Synopsis:
    Controls the cache Swat uses to hold data read from the PC while the
    machine is stopped.

Notes:
    * Data written while the machine is stopped actually get written to the
      cache, not the PC, and the modified blocks are written when the
      machine is continued.

    * The default cache block size is 32 bytes, with a default cache length
      of 64 blocks.

    * It is a very rare thing to have to turn the data cache off. You might
      need to do it while examining the changing registers of a
      memory-mapped I/O device, but other than that...

    * The <blockSize> must be a power of 2 and no more than 128. 

    * Changing the block size causes all cached blocks to be flushed (any
      modified cache blocks are written to the PC).

    * Changing the cache length will only flush blocks if there are more
      blocks currently in the cache than are allowed by the new length.

    * The "dcache stats" command prints statistics giving some indication of
      the efficacy of the data cache. It does not return anything.

    * The "dcache params" command returns a list {<blockSize> <numBlocks>}
      giving the current parameters of the data cache. There are some
      operations where you might want to adjust the size of the cache either
      up or down, but need to reset the parameters when the operation
      completes. This is what you need to do this. 

See also:
    cache

stop-catch.{swat_prog.event}
690:Usage:
    stop-catch <body>

Examples:
    "stop-catch {go ProcCallModuleRoutine}"
	    	    	    Let the machine run until it reaches
			    ProcCallModuleRoutine, but do not issue a FULLSTOP
			    event when it gets there.

Synopsis:
    Allows a string of commands to be executed without a FULLSTOP event being
    generated while they are executing.

Notes:
    * Why is this useful? A number of things happen when a FULLSTOP event
      is dispatched, including notifying the user where the machine stopped.
      This is inappropriate in something like "istep" or "cycles" that is
      single-stepping the machine, for example.

See also:
    event, continue-patient, step-patient

quit.{top.running}
592:Usage:
    quit [<options>]

Examples:
    "quit cont"   continue PCGEOS and quit swat
    "quit det"    detach from the PC and quit swat.

Synopsis:
    Stop the debugger and exit.

Notes:
    * The option argument may be one of the following (and may be abbreviated):
          continue  	continue GEOS and exit Swat 
          leave	    	keep GEOS stopped and exit Swat

      Anything else causes Swat to detach and exit.

    * You can use these options if you want to pass debugging control off to
      another person remotely logged into your UNIX workstation.

See also:
    detach.

set-masks.{swat_prog.obscure}
668:Usage:
    set-masks <mask1> <mask2>

Examples:
    "set-masks 0xff 0xff"	Allow no hardware interrupts to be handled
				while the machine is stopped.

Synopsis:
    Sets the interrupt masks used while the Swat stub is active. Users should
    use the "int" command.

Notes:
    * <mask1> is the mask for the first interrupt controller, with a 1 bit
      indicating the interrupt should be held until the stub returns the
      machine to GEOS. <mask2> is the mask for the second interrupt
      controller.

    * These masks are active only while the machine is executing in the stub,
      which usually means only while the machine is stopped.

See also:
    int

patient.{swat_prog}
3757:Usage:
    patient find <name>
    patient name [<patient>]
    patient fullname [<patient>]
    patient data [<patient>]
    patient threads [<patient>]
    patient resources [<patient>]
    patient libs [<patient>]
    patient path [<patient>]
    patient all
    patient stop [<addr>]

Examples:
    "patient find geos"	    Returns the patient token for the kernel, if it's
			    been loaded yet.
    "patient fullname $p"   Returns the permanent name for the patient whose
			    token is stored in the variable p.
    "patient stop $data"    Tells the dispatcher of the STEP event that it
			    should keep the machine stopped when the STEP
			    event has been handled by everyone.

Synopsis:
    This command provides access to the various pieces of information that are
    maintained for each patient (geode) loaded by GEOS.

Notes:
    * Subcommands may be abbreviated uniquely.

    * Swat always has the notion of a "current patient", whose name is displayed
      in the prompt. It is this patient that is used if you do not provide
      a token to one of the subcommands that accepts a patient token.

    * "patient name" returns the name of a patient. The name is the non-
      extension portion of the geode's permanent name. It will have a number
      added to it if more than one instance of the geode is active on the
      PC. Thus, if two GeoWrites are active, there will be two patients in Swat:
      "write" and "write2".

    * "patient fullname" returns the full permanent name of the patient. It is
      padded with spaces to make up a full 12-character string. This doesn't
      mean you can obtain the non-extension part by extracting the 0th
      element of the result with the "index" command, however; you'll have
      to use the "range" command to get the first 8 characters, then use
      "index" to trim the trailing spaces off, if you want to.

    * "patient data" returns a three-element list: {<name> <fullname>
      <thread-number>} <name> and <fullname> are the same as returned by
      the "name" and "fullname" subcommands. <thread-number> is the number
      of the current thread for the patient. Each patient has a single thread
      that is the one the user looked at most recently, and that is its current
      thread. The current thread of the current patient is, of course, the
      current thread for the whole debugger.

    * "patient threads" returns a list of tokens, one for each of the patient's
      threads, whose elements can be passed to the "thread" command to obtain
      more information about the patient's threads (such as their numbers,
      handle IDs, and the contents of their registers).

    * "patient resources" returns a list of tokens, one for each of the
      patient's resources, whose elements can be passed to the "handle" command
      to obtain more information about the patient's resources (for example,
      their names and handle IDs).

    * "patient libs" returns a list of patient tokens, one for each of the
      patient's imported libraries. The kernel has all the loaded device
      drivers as its "imported" libraries.

    * "patient path" returns the absolute path of the patient's executable.

    * "patient all" returns a list of the tokens of all the patients known
      to Swat.

    * "patient stop" is used only in STEP, STOP and START event handlers to
      indicate you want the machine to remain stopped once the event has
      been dispatched to all interested parties. <addr> is the argument
      passed in the STEP and STOP events. A START event handler should pass
      nothing.

    * A number of other commands provide patient tokens. "patient find" isn't
      the only way to get one.

See also:
    thread, handle

thread.{swat_prog swat_prog.thread}
2123:Usage:
    thread id <thread>
    thread register <thread> <regName>
    thread handle <thread>
    thread endstack <thread>
    thread number <thread>
    thread all

Examples:
    "thread register $t cx"	Fetches the value for the CX register for the
				given thread.
    "thread number $t"	    	Fetches the number Swat assigned to the thread
				when it was first encountered.

Synopsis:
    Returns information about a thread, given its thread token. Thread tokens
    can be obtained via the "patient threads" command, or the "handle other"
    command applied to a thread handle's token.

Notes:
    * Subcommands may be abbreviated uniquely.

    * <thread> arguments can also be the handle token for a thread handle.

    * "thread id" returns the handle ID, in decimal, of the thread's handle.
      This is simply a convenience.

    * "thread register" returns the contents of the given register in the
      thread when it was suspended. All registers except "pc" are returned
      as a single decimal number. "pc" is returned as two hexadecimal numbers
      separated by a colon, being the cs:ip for the thread. Note that GEOS
      doesn't actually save the AX and BX registers when it suspends a thread,
      at least not where Swat can consistently locate them. These registers will
      always hold 0xadeb unless the thread is the current thread for the
      machine (as opposed to the current thread for Swat).

    * "thread handle" returns the token for the thread's handle.

    * "thread endstack" returns the maximum value SP can hold for the thread,
      when it is operating off its own stack. Swat maintains this value so it
      knows when to give up trying to decode the stack.

    * "thread number" returns the decimal number Swat assigned the thread when
      it first encountered it. The first thread for each patient is given 
      the number 0 with successive threads being given the highest thread number
      known for the patient plus one.

    * "thread all" returns a list of tokens for all the threads known to
      Swat (for all patients).

See also:
    patient, handle

switch.{top.stack patient thread swat_prog.thread}
1808:Usage:
    switch <thread-id>
    switch [<patient>][:<thread-num>]

Examples:
    "switch 3730h"	    Switches Swat's current thread to be the one whose
			    handle ID is 3730h.
    "switch :1"	    	    Switches Swat's current thread to be thread number
			    1 for the current patient.
    ":1"	    	    Switches Swat's current thread to be thread number
			    1 for the current patient.
    "switch parallel:2"	    Switches Swat's current thread to be thread number
			    2 for the patient "parallel"
    "switch write"  	    Switches Swat's current thread to be thread number
			    0 (the process thread) for the patient "write"
    "switch"	    	    Switches Swat's current thread to be the current
			    thread on the PC.

    ":"	    	    Switches Swat's current thread to be the current
			    thread on the PC.

Synopsis:
    This allows you to see what any thread in the system was doing, when the
    machine stopped, by changing Swat's current thread, from which registers
    and backtraces are fetched.

Notes:
    * The switching between threads in Swat has absolutely no effect on the
      current thread as far as GEOS is concerned.

    * If Swat's current thread and the PC's current thread are not the same,
      the command prompt changes to show the patient and thread number in
      brackets, rather than the parentheses they're normally in.

    * The "istep" command will wait for Swat's current thread to become the
      PC's current thread if it is invoked when the two aren't the same.

    * Aliases exist that allow you to switch to any thread of the current
      patient whose number is a single digit. For example ":1" switches to
      thread number 1 of the current patient.

    * ":" is a shortcut to get back to the PC's current thread.

See also:
    patient

link.{obscure}
1051:Usage:
    link <library> [<patient>]

Examples:
    "link motif"	    Makes the library "motif" be a library of
			    the current patient, so far as Swat is concerned.

Synopsis:
    Allows you to link a patient as an imported library of another patient,
    even though the other patient doesn't actually import the patient. This
    is useful only for symbol searches.

Notes:
    * sym-default is a much better way to have Swat locate symbols for
      libraries that are loaded by GeodeUseLibrary.

    * Cycles are not allowed. I.e. don't link your application as a library
      of the UI, as it won't work...or if it does, it will make Swat die.

    * The link persists across detach/attach sequences so long as the <patient>
      isn't recompiled and downloaded.

    * If you don't give <patient>, then the current patient will be the one
      made to import <library>

    * Both <library> and <patient> are patient *names*, not tokens.

    * This command is really, really obscure and will probably go away.

See also:
    sym-default

detach.{top.running}
536:Usage:
    detach [<options>]

Examples:
    "detach cont"   continue GEOS and quit Swat

Synopsis:
    Detach swat from the PC.

Notes:
    * The option argument may be one of the following:
          continue  	continue GEOS and detach Swat 
          leave	    	keep GEOS stopped and detach Swat

      Anything else causes Swat to just detach and GEOS to exit.

    * You can use these options if you want to pass debugging control off to
      another person remotely logged into your UNIX workstation.

See also:
    attach, quit

connect.{top.running}
811:Usage:
    connect [<boot>]

Examples:
    "connect"   attach to the PC and stop; PC must already be running GEOS.

Synopsis:
    Connects Swat to the PC, which must already be running GEOS.

Notes:
    * The <boot> argument should be "-b" to bootstrap and "+b" to 
      not, where bootstrapping means to locate and read the symbols for
      a geode only when the geode is encountered, usually as the owner of
      some memory or thread handle you've made Swat look up.

    * If you give no <boot> argument, Swat will use the most-recent one.

    * By default, Swat will locate the symbols for all the geodes and threads
      active on the PC when it attaches.

    * If any geode has changed since you detached from the PC, the symbols
      for it are re-read.

See also:
    attach (att), detach, quit

sym-default.{top.print}
1004:Usage:
    sym-default [<name>]

Examples:
    "sym-default motif"	    Make Swat look for any unknown symbols in the
			    patient named "motif" once all other usual places
			    have been searched.

    "sd motif"	    Make Swat look for any unknown symbols in the
			    patient named "motif" once all other usual places
			    have been searched.
Synopsis:
    Specifies an additional place to search for symbols when all the usual
    places have been searched to no avail.

Notes:
    * The named patient need not have been loaded yet when you execute this
      command.

    * A typical use of this is to make whatever program you're working on be
      the sym-default in your .swat file so you don't need to worry about
      whether it's the current one, or reachable from the current one, when
      the machine stops and you want to examine the patient's state.

    * If you don't give a name, you'll be returned the name of the current
      sym-default.

See also:
    symbol, addr-parse

save-state.{swat_prog.patient swat_prog.thread}
507:Usage:
    save-state

Examples:
    "save-state"	    Push the current register state onto the thread's
			    state stack.

Synopsis:
    Records the state of the current thread (all its registers) for later
    restoration by "restore-state".

Notes:
    * Swat maintains an internal state stack for each thread it knows, so
      calling this has no effect on the PC.

    * This won't save any memory contents, just the state of the thread's
      registers.

See also:
    restore-state, discard-state

restore-state.{swat_prog.patient swat_prog.thread}
394:Usage:
    restore-state

Examples:
    "restore-state"	    	Set all registers for the current thread to
				the values saved by the most recent save-state.

Synopsis:
    Pops all the registers for a thread from the internal state stack.

Notes:
    * This is the companion to the "save-state" command.

    * All the thread's registers are affected by this command.

See also:
    save-state

discard-state.{swat_prog.thread swat_prog.patient}
431:Usage:
    discard-state

Examples:
    "discard-state"	    	Throw away the values for all the thread's
				registers saved by the most-recent save-state

Synopsis:
    Throw away the state saved by the most-recent save-state command.

Notes:
    * This is usually only used in response to some error that makes it
      pointless to return to the point where the save-state was performed.

See also:
    save-state, restore-state

continue-patient.{swat_prog.patient}
452:Usage:
    continue-patient

Examples:
    "continue-patient"	    	Allow the machine to continue executing
				GEOS.

Synopsis:
    Tell the stub to let the machine continue where it left off.

Notes:
    * This command does not wait for the machine to stop again before it
      returns; once the machine is running, you're free to do whatever you
      want, whether it's calling "wait", or examining memory periodically.

See also:
    step-patient

step-patient.{swat_prog.patient}
508:Usage:
    step-patient

Examples:
    "step-patient"	    	Execute a single instruction on the PC.

Synopsis:
    Causes the PC to execute a single instruction, returning only when the
    instruction has been executed.

Notes:
    * Unlike the continue-patient command, this command will not return
      until the machine has stopped again.

    * No other thread will be allowed to run, as timer interrupts will be
      turned off while the instruction is being executed.

See also:
    continue-patient

current-registers.{swat_prog.thread swat_prog.patient}
759:Usage:
    current-registers

Examples:
    "current-registers"		Returns a list of the current registers for
				the current thread.

Synopsis:
    Returns all the registers for the current thread as a list of decimal
    numbers.

Notes:
    * The mapping from element number to register name is contained in the
      global variable "regnums", which is an assoc-list whose elements
      contain the name of the register, then the element number.

    * For your own consumption, the list is ordered ax, cx, dx, bx, sp, bp,
      si, di, es, cs, ss, ds, ip, flags. You should use the "regnums" variable
      when programming, however, as this may change at some point (e.g. to
      accommodate the additional registers in the 386)

See also:
    regnums

stop-patient.{swat_prog.patient}
291:Usage:
    stop-patient

Examples:
    "stop-patient"	    	Stops the PC.

Synopsis:
    Stops the PC, in case you continued it and didn't wait for it to
    stop on its own.

Notes:
    * This is different from the "stop" subcommand of the "patient" command.

See also:
    continue-patient

io.{system lib_app_driver.net}
705:Usage:
    io [w] <port> [<value>]

Examples:
    "io 21h"	    	    	    Reads byte-sized I/O port 21h
    "io 20h 10"	    	    	    Writes decimal 10 to byte-sized I/O port 20h

Synopsis:
    Provides access to any I/O port on the PC.

Notes:
    * If you give the optional first argument "w", Swat will perform a
      16-bit I/O read or write, rather than the default 8-bit access. Be aware
      that most devices don't handle this too well.

    * <port> must be a number (in whatever radix); it cannot be a register
      or other complex expression.

    * If you don't give a <value>, you will be returned the contents of the
      I/O port (it will not be printed to the screen).

See also:
    

fill.{top.memory}
656:Usage:
    fill (byte|word) <addr> <length> <value>

Examples:
    "fill b ds:20 10 0"	    	Fills 10 bytes starting at ds:20 with 0

Synopsis:
    Allows you to quickly fill an area of memory with a particular value.

Notes:
    * This doesn't seem to work quite yet.

    * <addr>, <length> and <value> are standard address expressions, so they
      can be whatever you like. Only the offset portion of the <length> and
      <value> expressions are used, however.

    * If <addr> falls inside a block on the heap, <length> may not take the
      fill outside the bounds of the block.

    * "byte" and "word" may be abbreviated if you like.

See also:

dossym.{obscure}
533:Usage:
    dossym <patient-name> <symfile> <exefile> <baseseg>

Examples:
    "dossym cserv cs.sym cs.exe 0x467"	Creates a patient called "cserv"
					for a DOS TSR or driver located
					at 0x467:0, using the symbolic
					info in cs.sym. The driver was
					loaded from cs.exe

Synopsis:
    Allows one to more easily debug TSRs and device drivers, assuming you
    have their .map file converted to a .sym file via map2sym

Notes:
    * If a patient named <patient-name> already exists, it will be destroyed.

See also:
    none.

xmsread.{swat_prog}
127:Usage:
    xmsread <xms handle>, <xms nextHandle>, <xms offset>, <sizeOfXmsPage, 
            <xmsAddr offset>, <type>, <size>

get-mouse-event.{swat_prog.input}
98:Usage:
    get-mouse-event

Synopsis:
    Gets the next mouse event

See also:
    top-level-read

mouse-call-driver.{swat_prog.input}
118:Usage:
    get-call-driver <function number> [<arg1> [<arg2> [<arg3>]]]

Synopsis:
    calls a mouse driver function


mouse-word-select.{swat_prog.input}
73:Usage:
    mouse-word-select <click>

Synopsis:
    do a word selection


send-file.{ obscure}
0:
rpc-read-geode.{obscure}
0:
rpc-find-geode.{obscure}
221:Usage:
    rpc-find-geode [-n] <geode_name>

Examples:
    "rpc-find-geode write"		Find path of EC GeoWrite
    "rpc-find-geode -n write"		Find path of non-EC GeoWrite

Synopsis:
    Find path of geode on target machine.

rpc-dbg.{obscure}
905:Usage:
    rpc-dbg <flag>+

Examples:
    "rpc-dbg +stream"	Turn on debugging output for stream-related RPC
 	    	    	functions
    "rpc-dbg -packet"	Turn off debugging of packet-level functions.

Synopsis:
    Adjusts or returns the state of Swat's internal RPC debug flags.

Notes:
    * <flag> is a '+' (to activate) or '-' (to deactivate) followed by a
      string from the following set:
	Flag		Printed info pertains to...
	------------------------------------------------------------------	
	stream	    	watching/handling of streams.
	eventQueue	manipulation of the timer-event queue.
	eventTaken  	tells when a timer-event is activated.
	call	    	calls from Swat to the PC.
	serve	    	calls from the PC to Swat.
	packet	    	packet-level protocol.
	noTimeout   	refuses to allow any call to time out.
 	cache	    	cache into

    * Returns the list of enabled debug flags.

See also:
    rpc.

rpc.{swat_prog.obscure}
4417:Usage:
    rpc call <proc> <argType> <args> <repType>
    rpc serve <proc> <argType> <repType> <procName> [<data>]
    rpc delete (<server>|<event>)
    rpc event <time> <procName> [<data>]
    rpc debug (+<flag>|-<flag>)*
    rpc timeout [(on|off|1|0)]
    rpc wait 

Examples:
    "var e [rpc event 1.5 puffball]"	Registers a timed event to call
					the procedure "puffball" every 1.5
					seconds (starting 1.5 seconds from now).
    "rpc wait"				Allows input etc. to be handled while
					in a Tcl procedure.
    "rpc delete $e" 	    	    	Nuke the event registered before.

Synopsis:
    This command provides access to the RPC system by which Swat communicates
    with the stub running on the PC. IT IS INTENDED ONLY FOR SYSTEMS TCL
    PROGRAMMERS WHO KNOW WHAT THEY ARE DOING. While screwing up will cause no
    permanent damage, it can make your debugging session rather unhappy.

Notes:
    * "rpc call" calls a procedure in the stub.	<proc> is the procedure number
      or name to call in the stub. <argType> is a type token describing the
      arguments being passed. <args> is a value string such as would be
      returned from "value fetch" of <argType>. <repType> is the type of data
      expected in return. This may be oversized if a variable amount of
      response data is expected, but it must reflect the actual type of data
      being returned so the values can be properly byte-swapped. It is not an
      error to get too little data back from the stub. Too much data, however,
      is an error. The data returned by the stub comes back to you as a value
      list.

      If the call cannot be completed, this will generate an error, the
      message for which will describe the problem.

    * "rpc serve" registers a Tcl procedure to serve remote calls from the
      stub. <proc> is the procedure number to serve. <argType> is a type token
      describing the arguments expected for the procedure, while <repType>
      describes the data returned by the server. <procName> is the name of the
      server procedure. It will be called:
	<procName> <length> <args> <data>
      <length> is the number of bytes of data received. <args> is a value
      list of the passed data, while <data> is the same as the <data> argument
      to this call. This argument will always be passed, even if <data> is
      omitted when the server is registered.

      Returns a token for the server. The server can be unregistered via the
      "rpc delete" command.

    * "rpc event" registers an event to be called at a regular interval. <time>
      is the number of seconds between calls (as a real number). <procName> is
      the name of the procedure to call and <data> an optional piece of data
      to pass it. The procedure is called:
	<procName> <data> <event>
      <event> is the event token returned by this call. All three arguments
      are passed, regardless of the presence of a <data> parameter to this
      call. The procedure should return a non-zero number if the RPC system
      should return immediately, rather than going to sleep to wait for
      something on one of its input streams.

    * "rpc delete" deletes an event, or unregisters a server. If argument is
      a server token, as returned by "rpc serve", the server is unregistered.
      If it's an event token, as returned by "rpc event", the event is
      deleted.

    * "rpc debug" takes the same arguments and performs the same actions as
      the "rpc-dbg" command, which see.

    * "rpc timeout" allows you to insist that calls made from Swat to the PC
      never time out, but instead continue being resent until they are answered
      or aborted in some fashion. When timeout errors are enabled, if the PC
      hasn't responded in 2 seconds (a 1 second interval between the two calls),
      the returns an error. TURNING OFF TIMEOUTS AFFECTS ALL CALLS, NOT JUST
      THOSE ISSUED WITH THE "rpc call" COMMAND.

    * "rpc wait" waits for something to happen. The "something" can be the
      firing of a timed event, or the readiness of a stream to be messed with.
      It returns once whatever happened has been processed. This is usually
      called in a loop until a particular condition has been met. Without
      this, all timed-events, keyboard input, and RPC service is suspended
      until control returns to the top-level interpreter loop.

See also:
    rpc-dbg, value.

read-line.{swat_prog.input}
217:Reads a single line of input from the user. If optional argument CMD is
non-zero, the line is interpreted as a TCL command and will not be returned
until all braces/brackets are balanced. The final newline is stripped
read-char.{swat_prog.input}
117:Reads a single character from the user. This will actually read an entire
line and return just the first character...
echo.{swat_prog.output}
141:Prints its arguments, separated by spaces. If the first argument is -n, no
newline is printed. The arguments are printed separated by spaces.
system.{swat_prog.external}
188:Cause a shell to execute the first argument. The shell used is the bourne
shell, so tilde's aren't expanded. Doesn't return until the command completes
and the output isn't saved anywhere.
src.{swat_prog}
2694:Usage:
    src line <addr> [<frame>]
    src read <file> <line>
    src cache [<max>]
    src addr <file> <line> [<patient>]
    src flush
    src size <file>

Examples:
    "src line cs:ip"		Returns a two-list holding the source-line
	    	    	    	number, and the absolute path of the file in
	    	    	    	which it lies (not in this order), that
				encompasses cs:ip.
    "src read /staff/pcgeos/Library/Kernel/Thread/threadThread.asm 64"
	    	    	    	Reads the single given source line from the
				given file.
    "src addr icdecode.c 279"	Returns an address-list for the start of the
	    	    	    	code produced for the given line.
    "src cache 10"		Allow 10 source files to be open at a time.
				This is the default
    "src flush"			Close all source files Swat has open.
    "src size blorg.goc"  	returns number of lines of source code in
 	    	    	    	the source file blorg.goc

Synopsis:
    The "src" command allows the Tcl programmer to manipulate the source-
    line maps contained in all the geodes' symbol files.

Notes:
    * The "src line" commands returns its list as {<file> <line>}, with
      the <file> being absolute. If no source line can be found, the empty
      list is returned. The optional <frame> argument is the frame from which
      the address comes, providing the necessary XIP context for mapping the
      address to the proper source line.

    * The <file> given to the "src read" command must be absolute, as the
      procedure using this command may well be wrong as to Swat's current
      directory. Typically this name will come from the return value of
      a "src line" command, so you needn't worry.

    * The line returned by "src read" contains no tabs and does not include
      the line terminator for the line (the <lf> for UNIX, or the <cr><lf>
      pair for MS-DOS).

    * "src addr" returns an address-list, as returned from "addr-parse",
      not an address expression, as you would *pass* to "addr-parse". If
      the <file> and <line> cannot be mapped to an address, the result will
      be the empty list.

    * The <file> given to "src addr" must be the name that was given
      to the assembler/compiler. This includes any leading path if the file
      wasn't in the current directory when the assembler/compiler was run.

    * "src cache" returns the current (or new) number of open files that
       are cached.

    * Swat flushes its cache of open source files when you detach from the
      target machine, but if you need to get to or modify a source file while
      still attached, use the "src flush" command to force Swat to close,
      and thereby release, all the source files it has open.

symbol-kernel-internal.{swat_prog}
176:Usage: symbol-kernel-internal <address> 

Synopsis: returns the name of an internal kernel routine that contain the 
          address if there is one, otherwise it returns {}

kernel-has-table.{swat_prog}
93:Usage: kernel-has-table

Synopsis: returns 1 if the kernel has its own internal symbol table

address-kernel-internal.{swat_prog}
176:Usage: symbol-kernel-internal <address> 

Synopsis: returns the name of an internal kernel routine that contain the 
          address if there is one, otherwise it returns {}

symbol-types.{swat_prog}
5588:There are 30 symbol types that can be manipulated by the "symbol" command.
They are divided into 12 groups for purposes of searching for them and
manipulating them. The types and their groups are as follows:

    Type (groups)		Description
    -------------		-----------
    binding (none)  	    	Defines the name of a procedure that will
				handle the receipt of a particular message by
				an object class.

    bitfield (field)	    	A member of a record.

    blockstart (scope)	    	The beginning of a lexical block within a
				procedure that has symbols local to it. For
				example, when you declare a variable in the
				body of an "if", a symbol of this type will be
				created for the start of the "if" body. The
				symbol has an address, and can be searched for
				symbols within it, and that is all.

    blockend (none) 	    	This is placeholder that you will probably
				never encounter, but it holds the address of
				the end of a lexical block, so Swat can
				determine when a variable local to the block
				is no longer valid.

    chunk (var)	    	    	A statically-defined variable stored in a
				local memory chunk, as defined by the CHUNK
				directive in Esp. There is no equivalent in C.

    class (var)	    	    	An object class that is neither a master
				class, nor a variant class.

    const (abs)			A constant, as defined by the EQU directive in
				Esp. There is no equivalent in most versions
				of C.

    enum (enum)	    	    	A member of an enumerated type.

    etype (type, scope)		An enumerated type, as defined by the ETYPE
				directive in Esp, or enum in C. The members of
				the enumerated type can be looked up by name
				("symbol lookup") or enumerated ("symbol
				foreach") by passing this etype symbol as the
				scope in which to search. Symbols of this type
				may also be manipulated by the "type" command.

    exttype (type)  	    	This exists only for historical reasons. It
				used to describe a type that was defined
				external to the geode (e.g. in a library the
				geode used), but is no longer needed.

    field (field)   	    	A member of a structure or union.

    label (label)		A label that is external to any procedure, as
				defined by the LABEL directive in Esp.

    loclabel (label)	    	A label that is local to a procedure, as
				defined by the : directive in Esp. C doesn't
				usually have local labels, except for the
				??START label created by Glue to mark the end
				of the function prologue, and hence the start
				of the actual procedure,  created by the C
				compiler.

    locstatic (locvar)	    	A variable local to a procedure, but not stored
				on the stack. This is (so far) the only type
				of symbol whose lexical scope does not match
				its physical scope.

    locvar (locvar) 	    	A variable local to a procedure, as defined by
				the LOCAL directive in Esp, or in the usual
				manner in C. Procedure arguments are also
				considered to be locvars, as are static
				variables declared within a procedure.

    masterclass (var)	    	An object class that is a master class, but
				not a variant class.

    method (enum)   	    	A member of the enumerated type holding the
				messages that may be sent to an object of a
				particular class.

    module (scope, module)  	A segment, as defined by the SEGMENT directive
				in Esp, or implicitly by the C compiler (or
				via various pragmas that vary from compiler to
				compiler).

    onstack (onstack)		A stack-layout descriptor for use by Swat, as
				defined by the ON_STACK directive in Esp.

    proc (scope, func, label)	A procedure, as defined by the PROC directive
				in Esp, or the usual manner in C. As a scope,
				a procedure contains its local variables,
				arguments, and top-level lexical blocks (for
				C). These symbols can be looked up by giving
				the procedure symbol as the scope in which to
				search.

    profile (profile)  	    	The location of code used for profiling.

    record (type, scope)	A collection of bitfields defined by the
				RECORD directive in Esp. There is no
				equivalent in C. The fields in the record are
				of type "bitfield" and can be looked up by
				name ("symbol lookup") or enumerated ("symbol
				foreach") by passing this record symbol as the
				scope in which to search. Symbols of this type
				may also be manipulated by the "type" command.

    regvar (locvar) 	    	A variable local to a procedure that is stored
				in a register, rather than on the stack.
				Created only for C.

    rettype (none)  	    	A "local variable" that contains the return
				type for a procedure. Accessible only with the
				"symbol get" command when applied to a
				procedure symbol.
    struct (type, scope)	A structure, as defined by the STRUC directive
				in Esp, or struct in C. The fields of the
				structure are of type "field" or "bitfield"
				and can be looked up by name ("symbol lookup")
				or enumerated ("symbol foreach") by passing this
				struct symbol as the scope in which to search.
				Symbols of this type may also be manipulated
				by the "type" command.

    typedef (type)		Any named type built up from other types, e.g.
				using the TYPE directive in Esp, or typedef in
				C.

    union (type, scope)	    	Like a struct symbol, but defined by the UNION
				directive in both Esp and C.

    var (var)			A statically-defined variable.

    vardata (enum)  	    	A member of the enumerated type holding the
				ObjVarData tags for an object class.

    variantclass (var)	    	An object class that is a variant master
				class.


symbol.{swat_prog}
8527:Usage:
    symbol find <class> <name> [<scope>]
    symbol faddr <class> <addr>
    symbol match <class> <pattern>
    symbol scope <symbol> [<lexical>]
    symbol name <symbol>
    symbol fullname <symbol> [<with-patient>]
    symbol class <symbol>
    symbol type <symbol>
    symbol get <symbol>
    symbol patient <symbol>
    symbol tget <symbol>
    symbol addr <symbol>
    symbol foreach <scope> <class> <callback> [<data>]

Examples:
    "symbol find type LMemType"	Locate a type definition named
					LMemType
    "symbol faddr proc cs:ip"		Locate the procedure in which cs:ip
					lies.
    "symbol faddr {proc label} cs:ip"	Locate the procedure or label just
					before cs:ip
    "symbol fullname $sym"		Fetch the full name of the symbol
					whose token is in the $sym variable.
    "symbol scope $sym"			Fetch the token of the scope containing
					the passed symbol. This will give the
					structure containing a structure field,
					or the procedure containing a local
					variable, for example.

Synopsis:
    Provides information on the symbols for all currently-loaded patients.
    Like many of Swat's commands, this operates by using a lookup function
    (the "find", "faddr", "match", or "foreach" subcommands) to obtain a
    token for a piece of data that's internal to Swat. Given this token, you
    then use the other subcommands (such as "name" or "get") to obtain
    information about the symbol you looked up.

Notes:
    * There are 30 types of symbols that have been grouped into 12 classes
      that may be manipulated with this command. For a list of the symbol
      types and their meaning, type "help symbol-types". The type of a symbol
      can be obtained with the "symbol type" command.

    * The 12 symbol classes are as follows:
	type    describes any structured type: typedef, struct, record, etype,
		union. Symbols of this class may also be used in place of type
		tokens (see the "type" command).
	field   describes a field in a structured type: field, bitfield.
	enum    describes a member of an enumerated type: enum, method,
		vardata.
	const   a constant defined with EQU: const.
	var     describes any non-local variable symbol: var, chunk, class,
		masterclass, variantclass.
	locvar	describes any local variable symbol: locvar, locstatic.
	scope   describes any symbol that holds other symbols within it: module,
		proc, blockstart, struct, union, record, etype.
	proc    describes only proc symbols.
	label   describes any code-related symbol: label, proc, loclabel.
	onstack describes only symbols created by the ON_STACK directive.
	module	describes only segment/group symbols.
	profile	describes a symbol that marks where profiling code was
		inserted by a compiler or assembler.

    * The <class> argument for the "find", "faddr" and "match" subcommands may
      be a single class, or a space-separated list of classes. For example,
      "symbol faddr {proc label} cs:ip" would find the symbol closest to cs:ip
      (but whose address is still below or equal to cs:ip) that is either a
      procedure or a label.

    * The "symbol find" command locates a symbol given its name (which may be
      a symbol path).

    * The "symbol faddr" command locates a symbol that is closest to the
      passed address.

    * A symbol's "fullname" is the symbol path, from the current patient, that
      uniquely identifies the symbol. Thus if a procedure-local variable 
      belongs to the current patient, the fullname would be
	<segment>::<procedure>::<name>
      where <segment> is the segment holding the <procedure>, which is the
      procedure for which the local variable named <name> is defined.

    * You can force the prepending of the owning patient to the fullname by
      passing <with-patient> as a non-empty argument ("yes" or "1" are
      both fine arguments, as is "with-patient").

    * The "symbol get" command provides different data for each symbol class,
      as follows:
	var, locvar, chunk:  {<addr> <sclass> <type>}
	    <addr> is the symbol's address as for the "addr"
	    subcommand, <sclass> is the storage class of the variable
	    and is one of static (a statically allocated variable),
	    lmem (an lmem chunk), local (a local variable below the
	    frame pointer), param (a local variable above the frame
	    pointer), or reg (a register variable; address is the
	    machine register number -- and index into the list
	    returned by the "current-registers" command).
	object class: {<addr> <sclass> <type> <flag> <super>}
	    first three elements same as for other variables. <flag>
	    is "variant" if the class is a variant class, "master"
	    if the class is a master class, or empty if the class is
	    nothing special. <super> is the symbol token of the
	    class's superclass.
	proc: {<addr> (near|far) <return-type>}
	    <addr> is the symbol's address as for the "addr"
	    subcommand. The second element is "near" or "far"
	    depending on the type of procedure involved. <return-type> is the
	    token for the type of data returned by the procedure.
	label-class: {<addr> (near|far)}
	    <addr> is the symbol's address as for the "addr"
	    subcommand. The second element is "near" or "far"
	    depending on the type of label involved.
	field-class: {<bit-offset> <bit-width> <field-type> <struct-type>}
	    <bit-offset> is the offset of the field from the
	    structure/union/record's base expressed in bits.
	    <bit-width> is the width of the field, in bits.
	    <field-type> is the type for the field itself, while
	    <struct-type> is the token for the containing structured
	    type.
	const: {<value>}
	    <value> is just the symbol's value.
	vardata: {<value> <etype> <type>}
	    <value> is the symbol's value. <etype> is the containing enumerated
	    type's symbol. <type> is the type of data stored with the vardata
	    tag.
	enum-class: {<value> <etype>}
	    <value> is the symbol's value. <etype> is the containing enumerated
	    type's symbol.
	blockstart, blockend: {<addr>}
	    <addr> is the address bound to the symbol.
	onstack: {<addr> <data>}
	    <addr> is the address at which the ON_STACK was declared.
	    <data> is the arguments given to the ON_STACK directive.
	module: {<patient>}
	    <patient> is the token for the patient owning the module.
	profile: {<addr> <ptype>}
	    <addr> is the address of the marker, while <ptype> indicates the
	    type of profiling code present. 1 is for basic-block start put
	    in by Esp. If the byte at <addr> is 0xc9, the basic block has been
	    executed. 2 is for routine execution counting. Its format is not
	    yet defined.

    * A related command, "symbol tget" will fetch the type token for symbols
      that have data types (var-, field- and enum-class symbols). For vardata
      symbols, the type returned will be that of the data stored with the
      vardata tag, not the containing enumerated type, for all that vardata
      falls in the enum class.

    * "symbol addr" can be used to obtain the address of symbols that actually
      have one (var-, locvar- and label-class symbols). For locvar symbols,
      the address is an offset from the frame pointer (positive or negative).
      For var- and label-class symbols (remember that a procedure is a
      label-class symbols), the returned integer is the offset of the symbol
      within its segment.

    * "symbol patient" returns the token of the patient to which the symbol
      belongs.

    * "symbol foreach" will call the <callback> procedure for each symbol in
      <scope> (a symbol token) that is in one of the classes given in the list
      <class>. The first argument will be the symbol token itself, while the
      second argument will be <data>, if given. If <data> wasn't provided,
      <callback> will receive only 1 argument. <callback> should return 0
      to continue iterating, or non-zero to stop. A non-integer return is
      assumed to mean stop. "symbol foreach" returns whatever the last call
      to <callback> returned.

    * By default, "symbol scope" will return the physical scope of the symbol.
      The physical scope of a symbol is the symbol for the segment in which
      the symbol lies, in contrast to the lexical scope of a symbol, which is
      where the name of the symbol lies. The two scopes correspond for all
      symbols but static variables local to a procedure. To obtain the lexical
      scope of a symbol, pass <lexical> as a non-zero number.

See also:
    symbol-types, type

table.{swat_prog}
2627:Usage:
    table create [<initBuckets>]
    table destroy <table>
    table enter <table> <key> <value>
    table lookup <table> <key>
    table remove <table> <key>
    table foreach <table> <proc> [<data>]

Examples:
    "table create 32"	    	    Create a new table with 32 hash buckets
				    initially.
    "table enter $t tbrk3 {1 2 3}"  Enter the value "1 2 3" under the key
				    "tbrk3" in the table whose token is
				    stored in the variable t.
    "table lookup $t tbrk4" 	    Fetch the value, if any, stored under the
				    key "tbrk4" in the table whose token is
				    stored in the variable t.
    "table remove $t tbrk3" 	    Remove the data stored in the table, whose
				    token is stored in the variable t, under
				    the key "tbrk3"
    "table destroy $t"	    	    Destroy the table $t and all the data
				    stored in it.
    "table foreach $t print-it $s"  Invoke procedure print-it on each element
				    currently in table $t, passing it the
				    element, the element's key, and $s as the
				    procedure's three arguments.

Synopsis:
    The "table" command is used to create, manipulate and destroy hash tables.
    The entries in the table are keyed on strings and contain strings, as
    you'd expect from Tcl.

Notes:
    * The <initBuckets> parameter to "table create" is set based on the number
      of keys you expect the table to have at any given time. The number of
      buckets will automatically increase to maintain hashing efficiency,
      should the need arise, so <initBuckets> isn't a number that need be
      carefully chosen. It's best to start with the default (16) or perhaps a
      slightly larger number.

    * If no data are stored in the table under <key>, "table lookup" will
      return the string "nil", for which you can test with the "null" command.

    * The callback procedure for "table foreach" should be declared with 2 or 3
      arguments, depending on whether you pass the <data> argument:
      	    callback <table> <key> [<data>]
      is the syntax for the callback, where <table> is the table being enumer-
      ated, <key> is the key for that entry, and <data> is the same as the
      <data> passed to "table foreach", and is absent if you passed none.
      If the callback returns a non-zero or non-numeric result, enumeration
      will stop; "table foreach" will then return whatever the callback
      returned. The callback must return 0 for it to continue to the next
      entry in the table. If the callback never returns anything but 0, "table
      foreach" will return the empty string.

See also:
    null, cache

debug.{swat_prog.debug}
764:Usage:
    debug
    debug <proc-name>+

Examples:
    "debug"	    Enter the Tcl debugger immediately
    "debug fooproc" Enter the Tcl debugger when the interpreter is about
		    to execute the command "fooproc".

Synopsis:
    Sets a breakpoint at the start of any Tcl command. Also serves as a
    breakpoint in the middle of a Tcl procedure, if executed with no argument.

Notes:
    * The breakpoint for <proc-name> can be removed using the "undebug" command.

    * <proc-name> need not be a Tcl procedure. Setting a breakpoint on a
      built-in command is not for the faint-of-heart, however, as there are
      some commands used by the Tcl debugger itself. Setting a breakpoint
      on such a command will cause instant death.

See also:
    undebug.

undebug.{swat_prog.debug}
227:Usage:
    undebug <proc-name>+

Examples:
    "undebug fooproc"	Cease halting execution each time "fooproc" is
			executing.

Synopsis:
    Removes a breakpoint set by a previous "debug" command.

Notes:

See also:
    debug.

tcl-debug.{swat_prog.debug}
842:Usage:
    tcl-debug top 
    tcl-debug next <tcl-frame>
    tcl-debug prev <tcl-frame>
    tcl-debug args <tcl-frame>
    tcl-debug getf <tcl-frame>
    tcl-debug setf <tcl-frame> <flags>
    tcl-debug eval <tcl-frame> <expr>
    tcl-debug complete <tcl-frame>
    tcl-debug next-call 
    tcl-debug tbrk <proc>+

Examples:
    "var f [tcl-debug top]" 	Sets $f to be the frame at which the debugger
				was entered.
    "var f [tcl-debug next $f]"	Retrieves the next frame down (away from the
				top) the Tcl call stack from $f.
			   

Synopsis:
    This provides access to the internals of the Tcl interpreter for the Tcl
    debugger (which is written in Tcl, not C). It will not function except
    after the debugger has been entered.

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    debug.

type.{swat_prog}
9299:Usage:
    type <basic-type-name>
    type make array <length> <base-type>
    type make pstruct (<field> <type>)+
    type make struct (<field> <type> <bit-offset> <bit-length>)+
    type make union (<field> <type>)+
    type make <ptr-type> <base-type>
    type delete <type>
    type size <type>
    type class <type>
    type name <type> <var-name> <expand>
    type aget <array-type>
    type fields <struct-type>
    type members <enum-type>
    type pget <ptr-type>
    type emap <num> <enum-type>
    type signed <type>
    type field <struct-type> <offset>
    type bfget <bitfield-type>

Examples:
    "type word"	    	    	Returns a type token for a word (2-byte
				unsigned quantity).
    "type make array 10 [type char]"
    	    	    	    	Returns a type token for a 10-character array.
    "type make optr [symbol find type GenBase]"
    	    	    	    	Returns a type token for an optr (4-byte
				global/local handle pair) to a "GenBase"
				structure.

Synopsis:
    Provides access to the type descriptions by which all PC-based data are
    manipulated in Swat, and allows a Tcl procedure to obtain information
    about a type for display to the user, or for its own purposes. As with
    other Swat commands, this works by calling one subcommand to obtain an
    opaque "type token", which you then pass to other commands.

Notes:
    * Type tokens and symbol tokens for type-class symbols may be freely
      interchanged anywhere in Swat.

    * There are 11 predefined basic types that can be given as the
      <basic-type-name> argument in "type <basic-type-name>". They are:
	byte	    single-byte unsigned integer
	char	    single-byte character
	double	    eight-byte floating-point
	dword	    four-byte unsigned integer
	float	    four-byte floating-point
	int 	    two-byte signed integer
	long	    four-byte signed integer
	sbyte	    single-byte signed integer
	short	    two-byte signed integer
	void	    nothing. useful as the base type for a pointer type
	word	    two-byte unsigned integer

    * Most type tokens are obtained, via the "symbol get" and "symbol tget"
      commands, from symbols that are defined for a loaded patient. These are
      known as "external" type descriptions. "Internal" type descriptions are
      created with the "type make" command and should be deleted, with "type
      delete" when they are no longer needed.

    * An internal structure type description can be created using either the
      "pstruct" (packed structure) or "struct" subcommands. Using "pstruct" is
      simpler, but you have no say in where each field is placed (they are
      placed at sequential offsets with no padding between fields), and all
      fields must be a multiple of 8 bits long. The "struct" subcommand is
      more complex, but does allow you to specify bitfields.

    * "type make pstruct" takes 1 or more pairs of arguments of the form
      "<field> <type>", where <field> is the name for the field and <type> is
      a type token giving the data type for the field. All fields must be
      specified for the structure in this call; fields cannot be appended to
      an existing type description.

    * "type make struct" takes 1 or more 4-tuples of arguments of the form
      "<field> <type> <bit-offset> <bit-length>". <field> is the name of the
      field, and <type> is its data type. <bit-offset> is the offset, in bits,
      from the start of the structure (starting with 0, as you'd expect).
      <bit-length> is the length of the field, in bits (starting with 1, as
      you'd expect).  For a bitfield, <type> should be the field within which
      the bitfield is defined. For example, the C declaration:
    	struct {
    	    word    a:6;
	    word    b:10;
	    word    c;
    	}
      would result in the command "type make struct a [type word] 0 6 b [type
      word] 6 10 c [type word] 16 16", because a and b are defined within a
      word type, and c is itself a word.

    * "type make union" is similar to "type make pstruct", except all fields
      start at offset 0. Like "pstruct", this cannot be used to hold
      bitfields, except by specifying a type created via "type make struct"
      command as the <type> for one of the fields.

    * "type make array <length> <base-type>" returns a token for an array of
      <length> elements of the given <base-type>, which may be any valid type
      token, including another array type.

    * "type make <ptr-type> <base-type>" returns a token for a pointer to the
      given <base-type>. There are 6 different classes of pointers in GEOS:
    	nptr	a near pointer. 16-bits. points to something in the same
	    	segment as the pointer itself.
    	fptr	a far pointer. 32-bits. segment in high word, offset in the
      	    	low.
    	sptr	a segment pointer. 16-bits. contains a segment only.
    	lptr	an lmem pointer. 16-bits. contains a local-memory "chunk
      	    	handle". data pointed to is assumed to be in the same segment
      	    	as the lptr itself, but requires two indirections to get to it.
    	hptr	a handle pointer. 16-bits. a GEOS handle.
    	optr	an object pointer. 32-bits. contains a GEOS memory handle
      	    	in the high word, and a GEOS local-memory chunk handle in
      	    	the low.
	vptr	a VM pointer. 32-bits. contains a GEOS file handle in the high
		word, and a GEOS VM block handle in the low.
	vfptr	a virtual far pointer. 32-bits. contains a virtual segment in
		the high word, and an offset in the low.
    * "type delete" is used to delete a type description created by "type
      make". You should do this whenever possible to avoid wasting memory.

    * NOTE: any type created by the "type make" command is subject to garbage
      collection unless it is registered with the garbage collector. If you need
      to keep a type description beyond the end of the command being executed,
      you must register it. See the "gc" command for details.

    * "type size" returns the size of the passed type, in bytes.

    * "type class" returns the class of a type, a string in the following set:
    	char	    for the basic "char" type only.
	int 	    any integer, signed or unsigned.
	struct	    a structure, record, or union.
	enum	    an enumerated type.
	array	    an array, of course,
	pointer	    a pointer to another type.
	void	    nothingness. Often a base for a pointer.
	function    a function, used solely as a base for a pointer.
	float	    a floating-point number.
      Each type class has certain data associated with it that can only be
      obtained by using the proper subcommand.

    * "type aget" applies only to an array-class type token. It returns a
      four-element list: {<base-type> <low> <high> <index-type>} <base-type>
      is the type token describing elements of the array. <low> is the lower
      bound for an index into the array (currently always 0), <high> is the
      inclusive upper bound for an index into the array, and <index-type> is a
      token for the data type that indexes the array (currently always [type
      int]).

    * "type fields" applies only to a struct-class type token. It returns a
      list of four-tuples {<name> <offset> <length> <type>}, one for each
      field in the structure. <offset> is the *bit* offset from the start of
      the structure, while <length> is the length of the field, again in
      *bits*. <type> is the token for the data type of the field, and <name>
      is, of course, the field's name.

    * "type members" applies only to an enum-class type token. It returns a
      list of {<name> <value>} pairs for the members of the enumerated type.

    * "type pget" applies only to a pointer-class type token. It returns the
      type of pointer ("near", "far", "seg", "lmem", "handle", 
      "object", "virtual", or "vm") and the token for the type to which
      it points.

    * "type bfget" returns a three-list for the given bitfield type:
	{<offset> <width> <is-signed>}

    * "type signed" returns non-zero if the type is signed. If the <type> is
      not an int-class type, it is considered unsigned.

    * "type emap" can be used to map an integer to its corresponding
      enumerated constant. If no member of the enumerated type described by
      <type> has the value indicated, "nil" is returned, else the name of the
      matching constant is returned.

    * "type field" maps an offset into the passed struct-class type into a
      triple of the form {<name> <length> <ftype>}, where <name> can be either
      a straight field name, or a string of the form <field>.<field>... with
      as many .<field> clauses as necessary to get to the smallest field in
      the nested structure <type> that covers the given byte <offset> bytes
      from the start of the structure. <length> is the *bit* length of the
      field, and <ftype> is its type.

    * "type name" produces a printable description of the given type, using C
      syntax. <varname> is the name of the variable to which the type belongs.
      It will be placed at the proper point in the resulting string. If
      <expand> is non-zero, structured types (including enumerated types) are
      expanded to display their fields (or members, as the case may be).

See also:
    gc, symbol, symbol-types, value

irq.{swat_prog}
1257:Usage:
    irq
    irq (no|yes)
    irq (set|clear)

Examples:
    "irq"	    	    Returns non-zero if an interrupt is pending
    "irq no"	    	    Disable recognition and acting on a break request
			    from the keyboard.
    "irq set"	    	    Pretend user typed Ctrl+C

Synopsis:
    Controls Swat's behaviour with respect to interrupt requests from the
    keyboard.

Notes:
    * Swat maintains an interrupt-pending flag that is set when you type
      Ctrl+C (it can also be set or cleared by this command). It delays acting
      on the interrupt until the start of the next or the completion of the
      current Tcl command, whichever comes first.

    * When given no arguments, it returns the current state of the
      interrupt-pending flag. This will only ever be non-zero if Swat is
      ignoring the flag (since the command wouldn't actually return if the
      flag were set and being paid attention to, as the interpreter would
      act on the flag to vault straight back to the command prompt).

    * If given "no" or "yes" as an argument, it causes Swat to ignore or
      pay attention to the interrupt-pending flag, respectively.

    * You can set or clear the flag by giving "set" or "clear" as an argument.

See also:
    none.

prompt.{swat_prog.input}
420:Usage:
    prompt

Examples:
    "prompt"	    Print a command prompt based on the value in the
		    $prompt variable.

Synopsis:
    Prints a command prompt. Usually overridden by a Tcl procedure of the
    same name.

Notes:
    * The format string is stored in the global "prompt" variable. It may
      have a single %s, which will be replaced by the name of the current
      patient.

See also:
    top-level-read

flush-output.{swat_prog.output}
207:Usage:
    flush-output

Examples:
    "flush-output"	Forces pending output to be displayed

Synopsis:
    Flushes any pending output (e.g. waiting for a newline) to the screen.

Notes:

See also:
    echo.

completion.{swat_prog}
330:Usage:
    completion <list-of-names>

Examples:
    "completion $matches"	Returns the common prefix for the elements
				of the list stored in $matches

Synopsis:
    Figures the common prefix from a set of strings. Used for the various
    forms of completion supported by top-level-read.

Notes:

See also:
    top-level-read.

columns.{swat_prog.output}
269:Usage:
    columns

Examples:
    "columns"	    	Return the number of columns on the screen.

Synopsis:
    Retrieves the width of the screen, if known, to allow various commands
    (most notably "print") to size their output accordingly.

Notes:

See also:
    none.

return-to-top-level.{swat_prog}
349:Usage:
    return-to-top-level

Examples:
    "return-to-top-level"	Returns to the top-level interpreter

Synopsis:
    Forces execution to return to the top-level interpreter loop, unwinding
    intermediate calls (protected commands still have their protected
    clauses executed, but nothing else is).

Notes:

See also:
    top-level, protect.

top-level.{swat_prog.input}
430:Usage:
    top-level

Examples:
    "top-level"	    Begin reading and interpreting Tcl commands in a nested
		    interpreter.

Synopsis:
    This is the top-most read-eval-print loop of the Swat Tcl interpreter.

Notes:
    * This command will only return if the user issues the "break" command.
      Else it loops infinitely, reading and executing and printing the results
      of Tcl commands.

See also:
    top-level-read.

current-level.{swat_prog.input}
435:Usage:
    current-level

Examples:
    "var l [current-level]"	Store the current interpreter nesting level
				in $l.

Synopsis:
    Returns the number of invocations of "top-level" (i.e. the main
    command input loop) currently active.

Notes:
    * This is currently used only to modify the command prompt to indicate
      the current nesting level.

    * The top-most command loop is level 1.

See also:
    prompt, top-level.

value.{swat_prog.patient swat_prog.memory}
3607:Usage:
    value fetch <addr> [<type>]
    value store <addr> <value> [<type>]
    value hfetch <num>
    value hstore <addr-list>
    value hset <number-saved>
    value log <addr> <stream> <type>]

Examples:
    "value fetch ds:si [type word]"	Fetch a word from ds:si
    "value store ds:si 0 [type word]"	Store 0 to the word at ds:si
    "value hfetch 36"	    	    	Fetch the 36th address list stored
					in the value history.
    "value hstore $a"	    	    	Store the address list in $a into
					the value history.
    "value hset 50" 	    	    	Keep track of up to 50 address lists
					in the value history.
    "value log ds:si $s [type word]"  Fetch a word from ds:si and dump the binary 
                                        data to stream $s 

Synopsis:
    This command allows you to fetch and alter values in the target PC. It is
    also the maintainer of the value history, which you normally access via
    @<number> terms in address expressions.

Notes:
    * "value fetch" returns a value list that contains the data at the
      given address. If the address has an implied data type (it involves
      a named variable or a structure field), then you do not need to give the
      <type> argument.

      All integers and enumerated types are returned in decimal. 32-bit
      pointers are returned as a single decimal integer whose high 16 bits are
      the high 16 bits (segment or handle) of the pointer. 16-bit pointers
      are likewise returned as a single decimal integer.

      Characters are returned as characters, with non-printable characters
      converted to the appropriate backslash escapes (for example, newline
      is returned as \n).

      Arrays are returned as a list of value lists, one element per element
      of the array.

      Structures, unions and records are returned as a list of elements,
      each of which is a 3-element list: {<field-name> <type> <value>}
      <field-name> is the name of the field, <type> is the type token for
      the type of data stored in the field, and <value> is the value list
      for the data in the field, appropriate to its data type.

    * You will note that the description of value lists is recursive.
      For example, if a structure has a field that is an array, the <value>
      element in the list that describes that particular field will be itself
      a list whose elements are the elements of the array. If that array were
      an array of structures, each element of that list would again be a list
      of {<field-name> <type> <value>} lists.

    * The "field" command is very useful when you want to extract the value
      for a structure field from a value list.

    * As for "value fetch", you do not need to give the <type> argument to
      "value store" if the <addr> has an implied data type. The <value>
      argument is a value list appropriate to the type of data being stored,
      as described above.

    * "value hstore" returns the number assigned to the stored address list.
      These numbers always increase, starting from 1.

    * If no address list is stored for a given number, "value hfetch" will
      generate an error.

    * "value hset" controls the maximum number of address lists the value
      history will hold. The value history is a FIFO queue; if it holds
      50 entries, and the 51st entry is added to it, the 1st entry will be
      thrown out.

    * "value log" has the same functionality as value fetch except that data fetched 
        from the PC are dumped into the stream as raw binary data. 

See also:
    addr-parse, assign, field

pfloat.lib_app_driver.float
244:Usage:
    pfloat [<address ds:si>]

Examples:
    "pfloat"	    	print the floating point number at ds:si
    "pfloat es:di"  	print the floating point number at es:di

Synopsis:
    Print a floating point number

Notes:

See also:
    fpstack

fpustate.lib_app_driver.float
332:Usage:
    fpustate <mode>

Examples:
    "fpustate"	    	Print out the state of the coprocessor
    "fpustate w"    	dumps out actual words of the numbers
    "fpustate s"    	just dumps out stack, no state info
Synopsis:
    Prints out the current state of the coprocessor. 

Notes:
    * See above

See also:
    fpstack, pfloat

fpstack.lib_app_driver.float
310:Usage:
    fpstack [-s] [<patient current-patient>]

Examples:
    "fpstack"	    	Print out the fp stacks
    "fpstack -s"    	Print out just the stack registers, no state info
Synopsis:
    Prints out both the hardware and software stacks of the patient

Notes:
    * See above

See also:
    fpstack, pfloat

fpdumpstack.lib_app_driver.float
307:Usage:
    fpdumpstack

Examples:
    "fpdumpstack"	    	Print out the fp stackss

Synopsis:
    Prints out both the hardware and sfotware stacks of the patient
    . NOTE: YOU MUST ACTUALLY HAVE A COPROCESSOR OR YOUR DEBUGGING 
    SESSION WILL HANG.

Notes:
    * See above

See also:
    fpstack, pfloat

objwatch.{object.message patient.message profile}
2198:Usage:
    objwatch <object> [<message>]
    objwatch <special object flags> [<message>]
    objwatch <object block> [<message>]
    objwatch <patient>

Examples:
    "objwatch ^l4c30h:002eh"watch messages that reach object at ^l4c30h:002eh
    "objwatch oself"	    watch messages reaching current object (C)
    "objwatch *ds:si"	    watch messages reaching current object (asm)
    "objwatch FooObject"    watch messages that reach FooObject
    "objwatch ^h4c30h"	    watch messages that reach objects in ^h4c30h
    "objwatch -f MSG_META_KBD_CHAR"    watch for kbd char reaching cur focus obj
    "objwatch FooResource"  watch messages that reach objects in FooResource
    "objwatch myapp"	    watch messages that reach patient myapp
    "brk list"		    see list of breakpoints, (includes these)
    "del 5"		    delete breakpoint 5 (useful on an objwatch as well
				as a plain breakpoint)

Synopsis:
    Display message calls to a particular object, or group of objects.  This
    command is analogous to "objbrk", but instead of stopping stop execution,
    just prints out the message occurrence. 

Notes:
    * The address argument is the address of the object to watch.

    * This returns the token of the breakpoint being used to watch message
      deliveries to the object. Use the "brk" command to enable, disable or
      delete the watching of the object.

    * Special object flags:  These may be used as a substitute for an
      actual object address:

    	Value	Returns in watch on:
	-----	-----------------------------------------------------------
    	-a  	the current patient's application object
	-p	the current patient's process
    	-i  	the current "implied grab": the windowed object over which
		the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is currently
		located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

See also:
    mwatch, objbrk, brk, objmessagebrk, procmessagebrk, gentree, vistree,
    classtree, methods, gup, vup, cup, pobject, pinst

mwatch.{object.message profile}
995:Usage:
    mwatch <msg>+
    mwatch add <msg>+
    mwatch list
    mwatch clear

Examples:
    "mwatch MSG_FOO_ZIP MSG_FOO_ZAP"	watch only these messages
    "mwatch add MSG_VIS_DRAW"		watch this message also
    "mwatch"	        	    	clear all message watches

Synopsis:
    Display all deliveries of a particular message.

Notes:
    * The <msg>+ argument is which messages to watch; those specified will
      replace any messages watched before.  If none are specified then
      any messages watched will be cleared, to conserve conditional
      breakpoints.

    * You may specify up to eight messages to be watched (less if you
      have other conditional breakpoints active).  See cbrk.

    * "mwatch clear" will clear all message watches.

    * "mwatch add" will add the specified messages to the watch list.

    * "mwatch list" will return a list of breakpoints that have been set
      by previous calls to mwatch.

See also:
    objwatch, objbrk, objmessagebrk, procmessagebrk

objmessagebrk.{object.message profile}
660:Usage:
    objmessagebrk [<address>]

Examples:
    "objmessagebrk MyObj"   break whenever a method is sent to MyObj
    "objmessagebrk" 	    stop intercepting methods

Synopsis:
    Break whenever a method is SENT to a particular object via ObjMessage.

Notes:
    * The address argument is the address to an object to watch for
      methods being sent to it.  If no argument is specified then the
      watching is stopped.

    * This breaks whenever a method is sent (before they get on the method
      queue.  This enables one to track identical methods to an object
      which can be removed.

See also:
    objwatch, mwatch, procmessagebrk, pobject.

procmessagebrk.profile
794:Usage:
    procmessagebrk [<handle>]

Examples:
    "procmessagebrk 3160h"   break whenever a message is sent to the process
			     whose handle is 3160h
    "procmessagebrk" 	     stop intercepting messages

Synopsis:
    Break whenever a method is SENT to a particular process via ObjMessage.

Notes:
    * The handle argument is the handle of the process to watch.
      If no argument is specified then the watching is stopped.  The process's
      handle may be found by typing 'ps -p'.  The process's handle is the
      number before the process's name.

    * This breaks whenever a method is sent (before they get on the method
      queue.  This enables one to track identical methods to a process
      which can be removed.

See also:
    objwatch, mwatch, objmessagebrk, pobject.

pod.print
207:Usage:
    pod	<address>

Examples:
    "pod ds:si"

Synopsis:
    Print in output descriptor format (^l<handle>:<chunk>) the address passed.

Notes:
    * The address argument is the address of an object.


geowatch.profile
583:Usage:
    geowatch [<object>]

Examples:
    "geowatch *MyObj"		display geometry calls that have reached
				    the object MyObj
    "geowatch"			display geometry calls that have reached
				    *ds:si (asm) or oself (goc)

Synopsis:
    Display geometry calls that have reached a particular object.

Notes:
    * Two conditional breakpoints are used by this function (see cbrk).
      The tokens for these breakpoints are returned.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

See also:
    objwatch, mwatch, cbrk.

hbrk.breakpoint
1212:Usage:	
    hbrk <address> (byte|word) (match|mismatch) <value>

Examples:
    "hbrk scrollTab+10 byte match 0"	print method handlers until a zero 
    	    	    	    	    	is written at scrollTab+10.
    "hbrk OLScrollButton+3 word mismatch 0x654f"
    	    	    	    	    	Break when the word at OLScrollButton+3 
    	    	    	    	    	is destroyed.

Synopsis:
    Break when a value in a memory location changes.

Notes:
    * The address argument is the address to watch for a change.

    * The (byte|word) argument indicates whether to watch a byte or a
      word for a change.

    * The (match|mismatch) argument indicates whether to break if the 
      value at the address matches or mismatches the value hbrk is
      called with.

    * hbrk emulates a hardware breakpoint by checking at every method
      call to see if a location in memory has been written to.  If so,
      swat breaks and tells between which two methods the write
      occurred.  The information and the return stack will hopefully
      guide you to the offending line of code.

    * The command creates two breakpoints.  Remove these to get rid of
      the hardware breakpoint.  

See also:
    brk, mwatch, showcalls.

printNamesInObjTrees.swat_variable.output
546:Usage:
    var printNamesInObjTrees (0|1)

Examples:
    "var printNamesInObjTrees 1"    Sets "gentree", "vistree", etc. commands
    	    	    	    	    to print object names (where available)

Synopsis:
    Determines whether object names are printed (where available) rather
    than class names when using the following commands:
    	vistree
    	gentree
    	focus
    	target
    	model
    	mouse
    	keyboard

Notes:
    * The default value for this variable is 0.

See also:
    gentree, vistree, focus, target, model, mouse, keyboard

objtreeDepth.swat_variable.output
385:Usage:
    var objtreeDepth (0-9+)

Examples:
    "var printNamesInObjTrees 10"    Sets "gentree", "vistree", etc. commands
    	    	    	    	     to print to a depth of 10

Synopsis:
    Controls how deep to print an object tree when using the
    following commands:
    	vistree
    	gentree

Notes:
    * The default value for this variable is 4.

See also:
    gentree, vistree

gentree.{top.object object.gen}
1217:Usage:
    gentree [<address>] [<instance field>]

Examples:
    "gentree"	    	    	print the generic tree starting at *ds:si
    "gentree -i"        	print the generic tree under the mouse
    "gentree [systemobj]"       print the generic tree starting at the 
    	    	    	    	system's root
    "gentree @23 GI_states"	print the generic tree with generic states
    "gentree *uiSystemObj"	start the generic tree at the root of the system

Synopsis:
    Print a generic tree.

Notes:
    * The address argument is the address to an object in the generic
      tree.  This defaults to *ds:si.

    * The special object flags may be used to specify <address>.  For a
      list of these flags, see pobj.

    * The instance field argument is the offset to any instance data
      within the GenInstance which should be printed out.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

    * The variable "objtreeDepth" is the maximum depth to which a tree
      will be printed.
      This variable defaults to 4.

See also:
    gup, vistree, impliedgrab, systemobj.

vistree.{top.object object.vis}
1092:Usage:
    vistree [<address>] [<instance field>]

Examples:
    "vistree"	    	    	print the visual tree starting at *ds:si
    "vistree -i"		print the visual tree under the mouse
    "vistree @23 VI_optFlags"   print the visual tree with opt flags
    "vistree *uiSystemObj"	starts the visual tree at the root of the system

Synopsis:
    Print out a visual tree.

Notes:
    * The address argument is the address to an object in the generic
      tree.  This defaults to *ds:si.

    * The special object flags may be used to specify <address>.  For a
      list of these flags, see pobj.

    * The instance field argument is the offset to any instance data
      within the VisInstance which should be printed out.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

    * The variable "objtreeDepth" is the maximum depth to which a tree
      will be printed.
      This variable defaults to 4.

See also:
    vup, gentree, impliedgrab.

gup.{top.object object.gen}
794:Usage:
    gup [<address>] [<instance field>]

Examples:
    "gup"	    	    print the generic object at *ds:si and its ancestors
    "gup @23 GI_states"     print the states of object @23 and its ancestors
    "gup -i	    	    print the generic object under the mouse
    	    	    	    and the object's ancestors

Synopsis:
    Print a list of the object and all of its generic ancestors.

Notes:
    * The address argument is the address to an object in the generic
      tree.  This defaults to *ds:si.

    * The instance field argument is the offset to any instance data
      within the GenInstance which should be printed out.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

See also:
    gentree, vup, vistree, impliedgrab.

vup.{top.object object.vis}
794:Usage:
    vup [<address>] [<instance field>]

Examples:
    "vup"	    	    print the visual object at *ds:si and its ancestors
    "vup @23 VI_optFlags"   print the states of object @23 and its ancestors
    "vup -i	    	    print the visual object under the mouse
    	    	            and the object's ancestors

Synopsis:
    Print a list of the object and all of its visual ancestors.

Notes:
    * The address argument is the address to an object in the visual
      tree.  This defaults to *ds:si.

    * The instance field argument is the offset to any instance data
      within the GenInstance which should be printed out.

    * The special object flags may be used to specify <address>.  For a
      list of these flags, see pobj.

See also:
    vistree, gup, gentree, impliedgrab.

pclass.object.print
321:Usage:
    pclass [-h] [<address>]

Examples:
    "pclass"   	    	prints the class of *ds:si
    "pclass -h *Foo"	prints out complete class hierarchy of object *Foo

Synopsis:
    Print the object's class.

Notes:
    * The address argument is the address of the object to find class
      of.  This defaults to *ds:si.

objbrk.{top.breakpoint object.message patient.message}
2519:Usage:
    objbrk <object> [<message>]
    objbrk <special object flags> [<message>]
    objbrk <object block> [<message>]
    objbrk <patient> [<message>]
    objbrk list
    objbrk del <objbrk>

Examples:
    "oj ^l4c30h:001eh	    	break whenever object at ^l4c30h:001eh is called
    "objbrk ^l4c30h:001eh	break whenever object at ^l4c30h:001eh is called
    "objbrk oself MSG_FOO"	break when MSG_FOO arrives at cur object (C)
    "objbrk *ds:si MSG_FOO"	break when MSG_FOO arrives at cur object (asm)
    "objbrk FooObject"		break whenever a message arrives at object
    "objbrk FooResource"	break on any message arriving at resource
    "objbrk ^h4c30h	"	break on any messages arriving in block ^h4c30h
    "objbrk -p"			break on any message arriving at current process
    "objbrk -f" MSG_META_KBD_CHAR	
    	    	    	    	break on kbd char arriving at cur focus
    "objbrk myapp"		break on any message going to patient myapp
    "objbrk list"   	    	lists all active object breakpoints
    "objbrk del 4"   	    	deletes object breakpoint 4

Synopsis:
    Break when a particular object, or group of objects, gets messaged.  You
    can break on a certain message, or leave the message unspecified.  This
    command is good for discriminating between messages sent to one object of
    many in its class, or where you aren't sure what the incoming message
    will be.

Notes:
    * If you do not give a <message> argument after the <obj> argument, the
      machine will stop when any message is delivered to the object.

    * <obj> is the address of the object to watch. 
    
    * The <objbrk> argument to "objbrk del" is the token/number returned when
      you set the breakpoint.

    * Special object flags:  These may be used as a substitute for an
      actual object address:

    	Value	Returns in watch on:
	-----	-----------------------------------------------------------
    	-a  	the current patient's application object
	-p	the current patient's process
    	-i  	the current "implied grab": the windowed object over which
		the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is currently
		located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

See also:
    objwatch, mwatch, brk, objmessagebrk, procmessagebrk, gentree, vistree,
    classtree, methods, gup, vup, cup, pobject

xipwalk.{}
136:Usage:
    xipwalk	    	print out info on all XIP resources
    xipwalk -p <num>  	print out info on all XIP resource in XIP page <num>

xipwatch.profile
755:Usage:
    xipwatch <patient>
    xipwatch none [<patient>]

Examples:
    "xipwatch geos"	    Sets breakpoints to watch for code resources in the
			    kernel being read into RAM
    "xipwatch none" 	    Turn off all xipwatch breakpoints.
    "xipwatch none geos"    Turn off xipwatch breakpoints for just the kernel.

Synopsis:
    This command allows you to discover whether any of your code resources
    are being inadvertently brought into memory from the XIP image.

Notes:
    * The patient must be loaded for you to be able to set the breakpoint.

    * To catch all cases of a code resource being loaded, you will want to
      spawn the patient in question, run xipwatch for the patient, then
      continue the machine.

See also:
    spawn.

print-xip-geodes.{}
75:Usage:
	print-xip-geodes - prints the names of all geodes in the XIP image

patient-default.top.support
403:Usage:
    patient-default [<patient>]

Examples:
    "patient-default motif"	- makes "motif" the patient-default
    "patient-default"		- print the name of current patient-default

Synopsis:
    Specifies the default patient.

Notes:
    * Some commands which need a patient argument may use the patient-default
      if no patient is specified.  (e.g. send, run)

See also:
    send, run, sym-default

slist.source
772:Usage:
    slist [<args>]

Examples:
    "slist" 	    	    	list the current point of execution
    "slist foo.asm::15"	    	list foo.asm at line 15
    "slist foo.asm::15,45"  	list foo.asm from lines 15 to 45

Synopsis:
    List source file lines in swat.

Notes:
    * The <args> argument can be any of the following:
        <address>   	    Lists the 10 lines around the given address
    	<line>		    Lists the given line in the current file
    	<file>::<line>	    Lists the line in the given file
    	<line1>,<line2>	    Lists the lines between line1 and line2,
			    	inclusive, in the current file
    	<file>::<line1>,<line2>  Lists the range from <file>

      The default is to list the source lines around cs:ip.

See also:
    emacs, listi, istep, regs. 

view-default.top.source
721:Usage:
    view-default [patient]

Examples:
    "view-default spool"    Make spool the default patient for use by
    	    	    	    	the view command
    "view-default"    	    Print the name of the current view-default patient
    "view-default off"      Turn off the view default

Synopsis:
    Specify the patient from which the view command will automatically
    look for source files.

Notes:
    * The view command searches for source files in the patient
      specified by the view-default command; if none has been
      specified, the view command searches first in the current
      patient and then in the sym-default patient, if any.

See also:
    view, srcwin, find, tag, doc, sym-default, resize, line

view.top.source
1498:Usage:
    view [<file>] [<startLine>]

Examples:
    "view c:\pcgeos\include\pen.goh"
    	    	    	Brings up c:\pcgeos\include\pen.goh in a 25 line
                            window.
    "view foo.asm"    	Brings up foo.asm in the source window if foo.asm
    	    	    	    belongs either to the current patient or to a
    	    	    	    loaded view-default or sym-default patient.
    "view foo.asm 80"  	Brings up foo.asm with the code around line 80
    	    	    	    centered in the source window.
    "view"  	    	Brings up the source file for the current point
    	    	    	    of execution if it's available.
    "resize view 15"    Resizes the source window to 15 lines.
    "view off"    	Turns off the source window.

Synopsis:
    View a file in the source window.

Notes:
    * The optional <file> argument is the name of the file to view.
      The default file is the one containing the code for the current
      point of execution. If the file name, but not the full path,
      is specified, the view command searches for the file first in
      the view-default patient, if any, then in the current patient,
      and finally in the sym-default patient, if any.

    * The optional <startline> argument is the line which should be
      centered in the source window when the file comes up.

    * The default size of the source window is 25 lines. To resize it,
    use the resize command.

See also:
    view-default, sym-default, resize, srcwin, line, tag, find, doc

tag.top.source
503:Usage:
    tag <routine>

Examples:
    "tag Foo"  	view source code for routine Foo, which belongs to
    	    	    	 the current patient
    "tag Foo"	  	same as "vroutine Foo"

    "view-default hello" make "hello" the view-default patient and
    "tag HelloDraw"  	  then look at its routine, HelloDraw

Synopsis:
    View the source code for a routine belonging to the current
    patient or the view-default patient.

See also:
    view, view-default, sym-default, srcwin, resize, line, find, doc

pharray.{print lib_app_driver.text}
2241:Usage:
    pharray [<flags>] [<vmfile> <dirblk>]

Examples:
    "pharray"	    	    Print the huge array at ^vbx:di (header only)
    "pharray  dx cx"   	    Print the huge array at ^vdx:cx (header only)
    "pharray -e"    	    Print the huge array at ^vbx:di and print the
    	    	    	    elements in the array
    "pharray -tMyStruct"    Print the huge array at ^vbx:di and print the
    	    	    	    elements where the elements are of type MyStruct
    "pharray -e3"    	    Print the huge array at ^vbx:di and print the
    	    	    	    third element
    "pharray -h"    	    Print the header of the HugeArray at ^vbx:di, using
    	    	    	    the default header type (HugeArrayDirectory).
    "pharray -hMyHeader"    Print the huge array at ^vbx:di (header only)
    	    	    	    where the header is of type MyHeader
    "pharray -d"    	    Print the directory elements of a HugeArray
    "pharray -e5 -l8"	    Print 8 HugeArray elements starting with number 5

Synopsis:
    Print information about a huge array.

Notes:
    * The flags argument can be any combination of the flags 'e', 't',
      and 'h'. The 'e' flag prints all elements. If followed by a 
      number "-e3", then only the third element is printed.

      The 't' flag specifies the elements' type. It should be followed
      immediately by the element type.  You can also use "gstring", in 
      which case the elements will be interpreted as GString Elements.

      The 'h' flag specifies the header type. It should be followed
      immediately by the element type.  If no options are specified, then
      "-hHugeArrayDirectory" is used.  If any other options are specified,
      then the printing of the header is disabled.  So, for example, if you 
      want both the header and the third element, use "-h -e3".

      The 'd' flag specifies that the HugeArray directory entries should
      be printed out.

      The 's' flag prints out a summary of the HugeArray block usage.

      The 'l' flag specified how many elements to print.

      All flags are optional and may be combined.

    * The address arguments are the VM file handle and the VM block handle
      for the directory block.  If nothing is specified, then bx:di is used.

phastats.{}
75:Usage:
    phastats 	    	- needs a special kernel.  See vmemHugeArray.asm

clrhastats.{}
77:Usage:
    clrhastats 	    	- needs a special kernel.  See vmemHugeArray.asm

psize.print
146:Usage:
    psize <structure>

Examples:
    "psize FontsInUseEntry"

Synopsis:
    Print the size of the passed structure.

See also:
    prsize.

pncbitmap.lib_app_driver.bitmap
564:Usage:
    pncbitmap <address> <width> <height> [<no space flag>]

Examples:
    "pncbitmap *ds:si 64 64 t"	print the bitmap without spaces

Synopsis:
    Print out a one bit-deep noncompacted bitmap.

Notes:
    * The address argument is the address to the bitmap data.

    * The width argument is the width of the bitmap in pixels.

    * The height argument is the height of teh bitmap in pixels.

    * The space flag argument removes the space normally printed 
      between the pixels.  Anything (like 't') will activate the flag.

See also:
    pcbitmap.

pcbitmap.lib_app_driver.bitmap
569:Usage:
    pcbitmap <address> <width> <height> [<no space flag>]

Examples:
    "pcbitmap *ds:si 64 64 t"	print the bitmap without spaces

Synopsis:
    Print out a one bit-deep packbits-compacted bitmap.

Notes:
    * The address argument is the address to the bitmap data.

    * The width argument is the width of the bitmap in pixels.

    * The height argument is the height of the bitmap in pixels.

    * The space flag argument removes the space normally printed 
      between the pixels.  Anything (like 't') will activate the flag.

See also:
    pncbitmap.

timebrk.{breakpoint profile swat_prog.breakpoint}
1738:Usage:
    timebrk <start-addr> <end-addr>+
    timebrk del <timebrk>+
    timebrk list
    timebrk time <timebrk>
    timebrk reset <timebrk>

Examples:
    "timebrk LoadResourceData -f"   	    	Calculate the time required to
						process a call to 
						LoadResourceData
    "timebrk time 2"  	    	    	    	Find the amount of time
    						accumulated for timing
						breakpoint number 2.
    "timebrk reset 2"  	    	    	    	Reset the counter for timebrk
						number 2 to 0.
    "timebrk list"	    	    	    	Print a list of the set
						timing breakpoints and their
						current counts & time.

Synopsis:
    This command manipulates breakpoints that calculate the amount of time
    executing between their starting point and a specified ending point. The
    breakpoints also record the number of times their start is hit, so you can
    figure the average amount of time per hit.
    
Notes:
    * You can specify a place at which timing should end either as an address
      or as "-f". If you use "-f", timing will continue until the finish of
      the routine at whose start you've placed the breakpoint. Such a breakpoint
      may only be set at the start of a routine, as the stub hasn't the
      wherewithal to determine what the return address is at an arbitrary
      point within the function.

    * You may specify more than one ending point. Timing will stop when
      execution reaches any of those points.

    * When you've set a timing breakpoint, you will be returned a token of the
      form "timebrk<n>", where <n> is some number. You use this token, or just
      the <n>, if you're not a program, wherever <timebrk> appears in the
      Usage description, above.

See also:
    brk, cbrk, tbrk

showMethodNames.swat_prog.variable
108:If non-zero, prints out the names of the method in ax when unassembling a
"CALL ObjMessage" or equivalent.  
pobjgcnlist.{object.gcnlist}
595:
Usage:
    pobjgcnlist <list> [<address> [<manuf>]]

Examples:
    "pobjgcnlist GCNSLT_EXPRESS_MENU_CHANGE"	Print out all objects on the
					list via which changes to express menus
					changes are broadcast.

    "pobjgcnlist GAGCNLT_APP_TARGET_NOTIFY_DISPLAY_CHANGE *Desktop"
					Print out all objects on GeoManager's
					GenApplication object's display control
					list.

Synopsis:
    Prints out the list of objects registered for an object's GCN list, as well
    as any status message stored for that list.

Notes:
    * <address> defaults to *ds:si.

See also:
    pcarray, pgcnlist

pgcnlist.{object.gcnlist system.gcnlist}
851:
Usage:
    pgcnlist <list> [<list-of-lists> [<manuf>]]

Examples:
    "pgcnlist GCNSLT_EXPRESS_MENU_CHANGE"	Print out all objects on the
					list via which changes to express menus
					changes are broadcast.

Synopsis:
    Prints out the list of objects registered for a GCN list, as well as
    any status message stored for that list.

Notes:
    * If all you give is <list>, you will get the contents of the GeoWorks-
      defined list in the system list block.

    * If you've defined your own lists within the system list block (i.e.
      the manufacturer ID you specified to GCNListAdd was not
      MANUFACTURER_ID_GEOWORKS), you can give <list-of-lists> as {} and give
      <manuf> as the appropriate manufacturer's ID and "pgcnlist" will look
      for the list within the block containing the system GCN lists.

See also:
    pcarray

pgcnblock.{object.gcnlist system.gcnlist}
799:Usage:
    pgcnblock [<list-of-lists> | <object>]

Examples:
    "pgcnblock"	    	    Prints out all the system-maintained GCN lists
    "pgcnblock *TaskApp"    Prints out the GCN lists maintained by the
			    TaskApp object.

Synopsis:
    "pgcnblock" prints out all the GCN lists either associated with an
    object, or defined for the system as a whole.

Notes:
    * If you give no argument, the lists defined for the system as a whole
      will be printed.

    * An object must have a TEMP_META_GCN vardata entry for this command to
      print out its GCN lists.
     
    * You can also give the address of a list-of-lists, as created by 
      GCNListCreateBlock, but the list types will be numeric, rather than
      mapped to an enumerated constant.

See also:
    pgcnlist, pvardata.

pnormal.lib_app_driver.clipboard
438:Usage:
    pnormal [-v]

Examples:
    "pnormal -v"    Print out verbose info about the current normal transfer 
		    item.

Synopsis:
    Prints out information about the current "normal" transfer item on the
    clipboard.

Notes:
    * If you give the "-v" flag, this will print out the contents of the
      different transfer formats, rather than just an indication of their
      types.

See also:
    pquick, print-clipboard-item

pquick.lib_app_driver.clipboard
436:Usage:
    pquick [-v]

Examples:
    "pquick -v"     Print out verbose info about the current quick transfer 
		    item.

Synopsis:
    Prints out information about the current "quick" transfer item on the
    clipboard.

Notes:
    * If you give the "-v" flag, this will print out the contents of the
      different transfer formats, rather than just an indication of their
      types.

See also:
    pnormal, print-clipboard-item

print-clipboard-item.lib_app_driver.clipboard
601:Usage:
    print-clipboard-item [-v] <vmfile> <vmblock>
    print-clipboard-item [-v] <memhandle>
    print-clipboard-item [-v] <addr>

Examples:
    "print-clipboard-item bx"	Print out info about the transfer item whose
    	    	    	    	memory handle is in BX.

Synopsis:
    Prints out information about a transfer item.

Notes:
    * If you give the "-v" flag, this will print out the contents of the
      different transfer formats, rather than just an indication of their
      types.

    * The -v flag will not work unless the transfer item is in a VM file.

See also:
    pnormal, pquick.

send.top.support
794:Usage:
    send [[-enp] [-r] <geode>]

Examples:
    "send write"			- send EC GeoWrite if running EC code
					- send GeoWrite if running non-EC code
    "send -r write" 	    	    	- do "send write" and then "run write"
    "send -e write"			- send EC GeoWrite
    "send -n write"			- send GeoWrite
    "send -p c:/pcgeos/appl/write.geo"	- send c:/pcgeos/appl/write.geo
    "send"				- send 'patient-default'

Synopsis:
    send a geode from host to target machine

Notes:
    * <geode>	either the geode's permanent name (specified in the .gp file),
		or the full path of the geode to send

      -e	send EC version of <geode>
      -n	send non-EC version of <geode>
      -p	<geode> argument is the path of geode
      -r    	run the geode after sending it

See also:
    run, patient-default

send-file-old.swat_prog
82:Usage:
    send-file <filename>
Synopsis:
    	sends a file to the target machine

pttrans.lib_app_driver.text
61:pttrans [-args] FILE BLOCK - Prints out a text transfer item

ptext.lib_app_driver.text
900:Usage:
    ptext [<options>] [<addr>]

Examples:
    "ptext"	    	    	Prints the text in the object for the method
				being executed in the current stack frame

Synopsis:
    prints out the text and related structures for a text object.

Notes:
    * Possible options (more than one may be given):
	-e: print out elements in addition to runs
	-l: print out line and field structures
	-c: print out char attr structures
	-p: print out para attr structures
	-g: print out graphics structures
	-t: print out type structures
	-s: print out style structures
	-r: print out region structures
    	-N: print out associated names
    	-E: limit printout to just the elements of whatever arrays are
	    requested. Do not attempt to print out associated text.
    	-f<field> print out given field of each element (default is meta part)
    	-R: print full region descriptions

See also:
    plines, ptrange

plines.lib_app_driver.text
332:Usage:
    plines start [obj]

Examples:
    "plines 12"	    	    Print lines starting at line 12
    "plines 12 ^lcx:dx"	    Print lines starting at line 12 of object ^lcx:dx

Synopsis:
    Print information about the lines in a text object.
    
Notes:
    WARNING: The line-starts printed are *not* correct.

See also:
    ptext

ptrange.lib_app_driver.text
286:Usage:
    ptrange start end [obj]

Examples:
    "ptrange 12 15"	    	    Print the character range 12-15 in *ds:si
    "ptrange 12 15 ^lcx:dx"	    Print the character range 12-15 in ^lcx:dx

Synopsis:
    Print a range of characters in a text object.
    
Notes:

See also:
    ptext

rwatch.{lib_app_driver.text profile}
329:Usage:
    rwatch [on|off]

Examples:
    "rwatch on"	  	Watch text-recalculation as it happens
    "rwatch off"  	Turn output off
    "rwatch"	    	See what the status is

Synopsis:
    Displays information about text recalculation. Specifically designed
    for tracking bugs in the rippling code.

Notes:

See also:
    ptext

tundocalls.lib_app_driver.text
506:Usage:
	tundocalls [-acPCrR]

Examples:
	"tundocalls -a" 	Print out all text undo calls
	"tundocalls -r"		Print run undo calls
	"tundocalls -R"		Print replace undo calls
	"tundocalls -c"	    	Print info when undo information is created
	"tundocalls -cP"	Print info about para attrs only
	"tundocalls -cC"	Print info about char attrs only   
	"tundocalls"		Stop printing out text undo stuff

Synopsis:
	This prints out information about each undo call made to the
	text object.

See also:
	ptext, showcalls

text-fixup.{lib_app_driver.text lib_app_driver.geowrite}
997:Usage:
    Use it like this:
	
	- Run geos under swat, run swat on the development system
	
    	- Run GeoWrite
	
	- Open the GeoWrite file that needs fixing
	
    	- Set the breakpoint in swat:
    	    	patch text::CalculateRegions
	    	=> text-fixup
    	  This will set a breakpoint at the right spot
	
    	- Turn on the error-checking code in swat:
    	    	ec +text

    	- Enter a <space> into the document, this forces recalculation
	  which will cause CalculateRegions to be called which will cause
	  text-fixup to be called.

    	If the world is good, this code should patch together the file.
	If it's not, you'll get a FatalError right now.
	
	- Turn off the ec code and disable the fixup breakpoint.
	    	ec none
    	    	dis <breakpoint number>
		continue

    	- Delete the space and save the file.
	
	To do another file, you can just enable the breakpoint once the new
	file is open and turn on the ec code.

Synopsis:
    Help fix up trashed documents.

Notes:

See also:


ptreg.lib_app_driver.text
256:Usage:
    ptreg start [obj]

Examples:
    "ptreg 12"	    	    Print lines for region 12
    "ptreg 12 ^lcx:dx"	    Print lines for region 12 of object ^lcx:dx

Synopsis:
    Print information about the lines in a region.
    
Notes:

See also:
    ptext

display.window
1066:Usage:
    display <lines> <command>
    display list
    display del <num>

Examples:
    "display list"  	list all the commands displayed
    "display 1 {pobj VCNI_viewHeight}"     always display the view height
    "display del 2" 	delete the second display command

Synopsis:
    Manipulate the display at the bottom of Swat's screen.

Notes:
    * If you give a numeric <lines> argument, the next argument, <command>, is
      a standard TCL command you would like to have executed each time the
      machine halts. The output of the command goes into a window <lines> lines
      high, usually located at the bottom of the screen.
    
    * You can list all the active displays by giving "list" instead of a number
      as the first argument.
    
    * If the first argument is "del", you can give the number of a display to
      delete as the <num> argument. <num> comes either from the value this
      command returned when the display was created, or from the list of
      active displays shown by typing "display list".

See also:
    wtop, wcreate

regwin.top.window
404:Usage:
    regwin [off]

Examples:
    "regwin"
    "regwin off"

Synopsis:
    Turn on or off the continuous display of registers.

Notes:
    * If you give the optional argument "off", you will turn off any
      active register display.

    * If you give no argument, the display will be turned on.

    * Only one register display may be active at a time.

See also:
    display, localwin, srcwin.


localwin.top.window
538:Usage:
    localwin [<number>]

Examples:
    "localwin"	    	    Display local variables in a 10-line window
    "localwin 15"   	    Display local variables in a 15-line window
    "localwin off"  	    Turn off the local variable display

Synopsis:
    Turn on or off the continuous display of local variables.

Notes:
    * Passing an optional numerical argument turns on display of that
      size. The default size is 10 lines.

    * Only one local variable display may be active at a time.

See also:
    display, regwin, srcwin.


srcwin.top.window
992:Usage:
    srcwin [<numLines>] [view]

Examples:
    "srcwin"	    	Bring up a 25-line display of the source
    	    	    	    code around cs:ip
    "srcwin 6"	    	Bring up a 6-line display of the source
    	    	    	    code around cs:ip
    "resize s 15"	Resize the source window to 15 lines.
    "srcwin off"	Turn the display off
    "srcwin 0"	    	Turn the display off

Synopsis:
     Turn on or off the continuous display of source code.

Notes:
    * The optional <numLines> argument specifies the size of the
      display. The default is 25 lines.

    * The optional <view> argument suppresses the error message which
      is otherwise printed if the source code is not available.

    * There can be no more than one source window. Entering a second
      srcwin command when a source window or a window created by the
      view command is already up will replace that window with a new
      one.

See also:
    sym-default, view-default, view, resize, find, tag, line, doc


bindings.support.binding
120:Usage:
    bindings

Synopsis:
    Shows all current key bindings

See also:
    bind-key, unbind-key, get-key-bindings

resize.{top.window top.source}
725:Usage:
    resize <window> <numLines>

Example:
    "resize varwin 5"	Resizes the varwin to 5 lines.
    "resize va 5"       Ditto.

Synopsis:
    Resizes the source window or a varwin or localwin.

Notes:
    * The <window> argument is the name of the window to be resized, or
      a unique abbreviation of that name. Possible names are: "varwin",
      "localwin", "view", "doc", and "srcwin"; the last three all refer
      to the source window.

    * The <numLines> argument is the desired window size.

    * This command will not resize a flagwin, regwin, or framewin,
      as the optimal size of those windows does not vary.

See also:
    varwin, localwin, view, view-default, sym-default, doc, srcwin, tag, find.

varwin.top.window
1155:Usage:
    varwin [<flags>] <variables>

Examples:
    "varwin bing ping"	Turns on a 2-line display showing the values of
    	    	    	    the local or global variables, bing and ping,
                            or adds them to an existing varwin display
    "varwin -gs 5 hi" 	Turns on a 5-line display showing the value of a
                            global variable, hi (rather than of any local
                            variable by the same name).
    "varwin -s 7"    	Resizes an existing varwin to 7 lines.
    "resize va 7"       Also resizes an existing varwin to 7 lines.
    "varwin off"    	Turns off the varwin.

Synopsis:
    Turn on a continuous display of the specified variables.

Notes:
    * The optional <flags> arguments are:
      -g    Specifies that the variable is global. This flag need not be
            used unless a local variable by the same name exists.
      -s    Must be followed by a number. Specifies the size of the varwin.

    * The <variables> argument specifies the variables to examine.

    * If no size is specified, the display contains one line per variable.

See also:
    display, localwin, resize.

framewin.top.window
396:Usage:
    framewin [off]

Examples:
    "framewin"	    	Creates a single-line window to display info about the
			current stack frame.
    "framewin off"  	Deletes the window created by a previous "framewin"

Synopsis:
    Creates a window in which the current stack frame is always displayed.

Notes:
    * Only one frame window can be active at a time.

See also:
    display, regwin, srcwin


find.top.source
947:Usage:
    find <string> [<file>]

Examples:
    "find FileRead"  	    find next occurrence of string "FileRead"
    	    	    	    	in currently viewed file

    "find FI_foo poof.goc"
    	    	    	    find first occurrence of string "FI_foo"
    	    	    	    	in file poof.goc

    "find -ir myobject"     case-insensitive reverse search for most
    	    	    	    	recent occurrence of string "myobject"
    	    	    	    	in currently viewed file
Synopsis:
    Finds a string in a file. 

Notes:
    * If no file is specified, find will find the next instance of the string
      in the already viewed file starting from the current file position

    * There must already be a source window displayed for find to work.

    * Possible options to find are:
      -------------------------------
      -r    reverse search
      -i    case insensitive search

See also:
    srcwin, view, doc. tag. resize, line, sym-default, view-default

tbrk.{top.breakpoint profile swat_prog.breakpoint}
1767:Usage:
    tbrk <addr> <condition>*
    tbrk del <tbrk>+
    tbrk list
    tbrk cond <tbrk> <condition>*
    tbrk count <tbrk>
    tbrk reset <tbrk>
    tbrk address <tbrk>

Examples:
    "tbrk ObjCallMethodTable ax=MSG_VIS_DRAW"	Count the number of times
						ObjCallMethodTable is called
						with ax being MSG_VIS_DRAW
    "tbrk count 2"  	    	    	    	Find the number of times tally
						breakpoint number 2 was hit.
    "tbrk reset 2"  	    	    	    	Reset the counter for tbrk
						number 2 to 0.
    "tbrk cond 2 ax=MSG_VIS_DRAW"    	    	Change it to count when ax
						holds MSG_VIS_DRAW
    "tbrk list"	    	    	    	    	Print a list of the set
						tally breakpoints and their
						current counts.

Synopsis:
    This command manipulates breakpoints that tally the number of times they
    are hit without stopping execution of the machine -- the breakpoint is
    noted and the machine is immediately continued. Such a breakpoint allows
    for real-time performance analysis, which is nice.

Notes:
    * If you specify one or more <condition> arguments when setting the tally
      breakpoint, only those stops that meet the conditions will be counted.

    * <condition> is exactly as defined by the "brk" command, which see.

    * When you've set a tally breakpoint, you will be returned a token of the
      form "tbrk<n>", where <n> is some number. You use this token, or just
      the <n>, if you're not a program, wherever <tbrk> appears in the
      Usage description, above.

    * There are a limited number of tally breakpoints supported by the stub.
      You'll know when you've set too many.

    * "tbrk address" returns the address at which the tbrk was set, as a
      symbolic address expression.

See also:
    brk, cbrk

bits.top.memory
842:Usage:
    bits [<address>] [<length>] [<type>]

Examples:
    "bits"              lists 16 bytes worth of bits at ds:si
    "bits ds:di 8"      lists 8 bytes worth of bits at ds:di
    "bits ds:di 24 w"   lists 24 words worth of bits at ds:di

Synopsis:
    Examine memory as a dump of bits in sets of 8, 16, or 32 (byte,word,dword)

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then ds:si is used for
      the address.

    * The length argument is the number of units to examine.  It 
      defaults to 16.

    * They type argument is bytes, words or dwords.  It defaults to bytes.

    * Pressing return after this command continues the list.

See also:
    bytes, words, dwords, imem, assign.


hex-to-bin.top.print
213:Usage:
    hex-to-bin <hex-digits>

Examples:
    "hex-to-bin 45"  returns "0100 0101"
    "hex-to-bin 45X" returns "0100 0101 ****"

Synopsis:
    Converts hex digits to binary.

See also:
    hex-to-bin-reverse

hex-to-bin-reverse.top.print
337:Usage:
    hex-to-bin-reverse <hex-digits>

Examples:
    "hex-to-bin-reverse 45"   returns "1010 0010"
    "hex-to-bin-reverse 456F" returns "1010 0010 1111 0110"
    "hex-to-bin-reverse 456"  returns "1010 0010 **** 0110"
Synopsis:
    Converts hex digits to binary, and reverses the bits in each byte worth.

See also:
    hex-to-bin

bin.top.print
395:Usage:
    bin <expression> [<field width>]

Examples:
    "bin 5"	returns "0101"
    "bin 10h"	returns "0001 0000"
    "bin 10h 3" returns "0000 0001 0000"
    "bin ax"	returns ax in binary

Synopsis:
    Prints expressions in binary.

Notes:
    * The field width is in nibbles.

    * The default field width is the minium number of nibbles to
      display the number.

See also:
    bits.


print-row.lib_app_driver.cell
323:Usage:
    print-row [<address *ds:si>]

Examples:
    "print-row"	    	print the row at *ds:si
    "print-row ds:si"  	print the row at ds:si

Synopsis:
    Print a single row in the cell file given a pointer to the row.

Notes:

See also:
    print-column-element
    print-cell-params
    print-row-block
    print-cell

print-column-element.lib_app_driver.cell
362:Usage:
    print-column-element [<address ds:si>]

Examples:
    "print-column-element"	    	print the ColumnArrayElement at ds:si
    "print-column-element ds:bx"  	print the ColumnArrayElement at ds:bx

Synopsis:
    Print a single ColumnArrayElement at a given address

Notes:

See also:
    print-row
    print-cell-params
    print-row-block
    print-cell

print-cell-params.lib_app_driver.cell
348:Usage:
    print-cell-params [<address ds:si>]

Examples:
    "print-cell-params"	    	print the CellFunctionParameters at ds:si
    "print-cell-params ds:bx"  	print the CellFunctionParameters at ds:bx

Synopsis:
    Print a CellFunctionParameters block

Notes:

See also:
    print-row
    print-column-element
    print-row-block
    print-cell

print-row-block.lib_app_driver.cell
291:Usage:
    print-row-block [<address ds>]

Examples:
    "print-row-block"	    	print the row-block at ds:0
    "print-row-block es"  	print the row-block at es:0

Synopsis:
    Print a row-block

Notes:

See also:
    print-row
    print-cell-params
    print-column-element
    print-cell

print-cell.lib_app_driver.cell
322:Usage:
    print-cell [row column <cfp ds:si>]

Examples:
    "print-cell 1 1"	    	print the cell <1,1>
    "print-cell 1 2 *ds:si"  	print the cell <1,2> given cfp of *ds:si

Synopsis:
    Print information about a cell

Notes:

See also:
    print-row
    print-row-block
    print-cell-params
    print-column-element

patch.top.breakpoint
2002:Usage:
    patch [<addr>]
    patch del <addr>*

Examples:
    "patch cs:ip"	    Set a patch at the current execution point
    "patch del"	    	    Deletes all patches

Synopsis:
    Patch assists in creating breakpoints that invisibly make small changes
    to code.  This can help the programmer find several bugs without
    remaking and redownloading.

Notes:
    * If you give no <addr> when creating a patch, the patch will be placed
      at the most-recently accessed address, as set by the command that
      most-recently accessed memory (bytes, words, listi, imem, etc.)

    * When creating a patch, you are prompted for its contents, each line of
      which comes from the following command set:

	Form			Meaning			Examples
	----			-------			--------
	<reg> = <value>		assign value to reg	ax = bx
							dl = 5
	push (<reg>|<value>)	push value		push ax
							push 45
	pop (<reg>|<value>)	pop value		pop ax
							pop 45
	pop			pop nothing (sp=sp+2)	pop
	jmp <address>		change ip		jmp UI_Attach+45
	scall <address> <regs>	call routine (save)	call MemLock ax=3
	mcall <address> <regs>	call routine (modify)	call MemLock ax=3
	xchg <reg> <reg>	swap two registers	xchg ax bx
	set <flag>		set condition flag	set CF
							set ZF
	reset <flag>		reset condition flag	reset CF
							reset ZF
	if <flag>		if flag set then ...	if CF
	if !<flag>		if flag reset then ...	if !ZF
	if <expr>		if expr then...		if foo == 4
	else
	endif
	ret			make function return	ret
	$			Terminate input
	a			Abort
	<other>		    	Tcl command		echo $foo

      <flag> is taken from the set TF, IF, DF, OF, SF, ZF, PF, AF, CF
      and *must* be in upper-case.

      The "scall" command has no effect on the current registers (not even
      for purposes of return values), while the "mcall" command changes whatever
      registers the function called modifies. See the "call" documentation for
      the format of <regs>.

    * You finish entering a patch by typing $ on a line by itself.

See also:
    brk, cbrk

patchout.breakpoint
64:
	patchout causes a RET to be placed at the start of a routine.

patchin.breakpoint
38:
	patchin undoes the work of patchout

pobject.{top.object top.print object.print}
2436:Usage:
    pobject [<address>] [<detail>]

Examples:
    "pobj"  	    	print the object at *ds:si from Gen down if Gen
    	    	    	    is one of its master levels; else, print
    	    	    	    all	levels
    "pobj *MyGenObject" print MyGenObject from Gen down
    "pobj Gen"    	print the Gen level for the object at *ds:si
    "pobj last"	    	print the last master level for the object
    	    	    	    at *ds:si
    "pobj *MyObject all"
    	    	    	print all levels of MyObject
    "pobj -i sketch"   	print the master level headings of the windowed
    	    	    	    object at the mouse pointer
    "pobj *MyObject FI_foo"
    	    	    	print the FI_foo instance variable for MyObject
    "pobj HINT_FOO" 	print the HINT_FOO variable data entry for the
    	    	    	    object at *ds:si
    "pobj v"	    	print the variable data for the object at *ds:si

Synopsis:
    Print all or part of an object's instance and variable data.

Notes:
    * The address argument is the address of the object to examine. If
      none is specified, *ds:si is assumed to be an object unless the
      current function is a method written in C, in which case the
      variable "oself" is consulted.

    * Special values accepted for <address>:
      --------------------------------------------------------------------
    	-a  	the current patient's application object
    	-i  	the current "implied grab": the windowed object over
		which the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is
		currently located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

    * The detail argument specifies what information should be printed
      out about the object. If none is specified, all levels of the
      object from the Gen level down will be printed if Gen is one of
      the object's master levels; else, the whole object will be printed.

    * Values accepted for <detail>:
      ----------------------------
    	all (or a) 	    	- all master levels
    	last (or l) 	    	- last master level only
    	sketch (or s)	    	- master level headings only
    	vardata (or v)	    	- vardata only
    	a master level name
    	an instance variable name
    	a variable data entry name

See also:
    pinst, piv, pvardata

pinst.object.print.fast
1312:Usage:
    pinst [<address>]

Examples:
    "pinst" 	    	    print the last master level of the object at *ds:si
    "pinst *MyObject"	    print the last master level of MyObject
    "pinst -i"		    print the last master level of the windowed
			    object at the mouse pointer.

Synopsis:
    Print out all the instance and variable data in the last level of
    the object.

Notes:
    * The address argument is the address of the object to examine. If
      none is specified, *ds:si is assumed to be an object unless the
      current function is a method written in C, in which case the
      variable "oself" is consulted.

    * Special values accepted for <address>:
      --------------------------------------------------------------------
    	-a  	the current patient's application object
    	-i  	the current "implied grab": the windowed object over
		which the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is
		currently located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

    * "pinst" prints out the same information as "pobj l", but slightly faster.

See also:
    pobject, piv.

piv.object.print.fast
1120:Usage:
    piv <iv> [<address>]

Examples:
    "piv VCNI_viewHeight"   print Vis.VCNI_viewHeight at *ds:si

Synopsis:
    This prints out the value of the instance variable specified.  

Notes:
    * The iv argument expects the name of the instance variable to print.

    * The address argument is the address of the object to examine.
      If it's not specified then *ds:si assumed to be an object.

    * Special values accepted for <address>:
      --------------------------------------------------------------------
    	-a  	the current patient's application object
    	-i  	the current "implied grab": the windowed object over
		which the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is
		currently located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

    * "piv VCNI_viewHeight" prints out the same information as
      "pobj VCNI_viewHeight", but slightly faster.

See also:
    pobject, pinst.

smatch.top
313:Look for symbols of a given class by pattern. First argument PATTERN is the
pattern for which to search (it's a standard SWAT pattern using shell wildcard
characters). Optional second argument CLASS is the class of symbol for which
to search and is given directly to the "symbol match" command. Defaults to
"any".
verbose.profile
2762:Usage:
    verbose                    display status (currently set keys)
    verbose classes            display all valid classes
    verbose keys [<class>]     display all valid keys for class
    verbose set|on <class> [<key>...]   
                               sets the report points for keys in class
    verbose unset|off [<class>] [<key>...]   
                               unsets the report points for keys in class
    verbose points [<class>]   display all report points set for class

Examples:
    "verbose keys"             display all valid keys
    "verbose k patch"          display valid keys for class "patch"
    "verbose on patch"         sets all report points for class "patch"
    "verbose on patch h"       sets the report points for key "high" in 
                               class "patch"
    "verbose off"              unsets all report points
    "verbose off patch"        unsets all report points for class "patch"
    "verbose off patch h"      unsets report point for key "high" in 
                               class "patch"
 
Synopsis:
    Allows you to easily enable keys, which tell swat to display useful 
    information during execution.

Notes:
    * Commands can be abbreviated by their first letters.

    * A report-point is a breakpoint with code associated with it to display
      useful information.  Available report points are defined in 
      "verbkeys.tcl", in variables named {patient}ReportPoints (i.e. 
      "reseditReportPoints").  Report points are referenced by geode variable,
      and then by name.

    * A verbose key is a group of report points, grouped by function.  A
      verbose key has a name, description, and list of its report points.

    * A verbose class is a group of verbose keys, grouped by function.
      verbose classes usually refer to a major GEOS "function" or geode.

    * All verbose classes and their levels are listed in the variable
      verboseKeys in "verbkeys.tcl".  Report points can be turned on by 
      multiple keys.  It is very easy to add keys and report points to this
      file.  Very easy.  That's the idea.  Did I mention how easy it is?

    * Classes and keys can be abbreviated, as long as the abbreviation
      contains enough characters to determine it from the other classes and
      keys.

    Lower-level concerns:

    * A reference count is maintained for report points, to better support
      keys with overlapping report points.  If a report point is set twice,
      it will not be deleted until it is unset twice.

    * Report points can be set and unset regardless of whether the patient
      for the breakpoint has been spawned yet.  Verbose automagically turns
      on the report points for a patient when it is spawned.

ppdiff.lib_app_driver.graphics
385:Usage:
    ppdiff <address>

Examples:
    "ppdiff"	    	List the point deltas at ds:si
    "ppdiff ^hdi"    	List the point deltas at the start of the block whose
    	    	    	handle is in di
    "ppdiff -p"	        List the point deltas along with the points at ds:si
    "ppdiff -c10"       List 10 deltas at ds:si

Synopsis:
    Calculate the distance between successive points


pgs.lib_app_driver.graphics
1606:Usage:
    pgs <address>

Examples:
    "pgs"	    	List the graphics string at ds:si
    "pgs ^hdi"	    	List the graphics string whose handle is in di,
    	    	    	starting at the current position.
    "pgs -s ^hdi"	List the graphics string whose handle is in di, 
    	    	        starting at the beginning of the graphics string
    "pgs -l3 ^hdi"  	List three elements of the graphics string whose handle
    	    	    	is in di, starting at the current position.
    "pgs -c"	        List the graphics string at ds:si, including all the
    	    	        coordinate values for objects with lists.

Synopsis:
    List the contents of a graphics string.

Notes:
    * The address argument is the address of a graphics string.  If
      none is specified then ds:si is used as a pointer to a graphics
      string.

    * The passed address may also be the base of a gstate (e.g. "^hdi").
      In this case, the gstring that is associated with the gstate will
      be printed.

    * The -s option can be used to specify that the gstring should be listed
      from the beginning of the string.  By default, gstrings will be listed
      starting at the current position.

    * The -g option can be used to specify that the passed addres is the
      address of a GrObj (GStringClass) object -- the gstring for that object
      will be listed.

    * The -c option is used to expand out coordinate lists for those objects
      that have them (Polylines, Polygons, etc).  The default behaviour is 
      to simply list the number of points in the object.

See also:
    pbitmap, pvismon, pobjmon

pvismon.{object.vis}
707:Usage:
    pvismon [<address>] [<textonly>]

Examples:
    "pvismon"	    	print the moniker at *ds:si
    "pvismon -i 1"	print a short description of the implied grab object.

Synopsis:
    Print a visual moniker structure at an absolute address.

Notes:
    * The address argument is the address to an object in the visual
      tree.  This defaults to *ds:si.

    * The textonly argument returns a shortened description of the
      structure.  To set it use something other than '0' for the
      second argument.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

See also:
    pobjmon, pobject, vistree, gup, gentree, impliedgrab, systemobj.

pobjmon.{object.gen}
600:Usage:
    pobjmon [<object>] [<textonly>]

Examples:
    "pobjmon"	print the VisMoniker from the gentree object at *ds:si

Notes:
    * The <object> argument is the address of an object with a
      VisMoniker.  If none is specified then *ds:si is used.

    * The textonly argument returns a shortened description of the
      structure.  To set it use something other than '0' for the
      second argument.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

See also:
    pvismon, pobject, vistree, gup, gentree, impliedgrab, systemobj.

ppath.lib_app_driver.graphics
403:Usage:
    ppath [<current, docClip, winClip>] [<gstate>] 

Examples:
    "ppath"			print the current path of the GState in ^hdi
    "ppath docClip ^hdi"	print the doc clip path of the GState in ^hdi
    "ppath winClip ds"		print the window clip path of the GState in ds

Synopsis:
    Print the structure of a path.

Notes:
    * Unique abbreviations for the path to be printed are allowed.

See also:

preg.lib_app_driver.graphics
956:Usage:
    preg [-g] <addr>

Examples:
    "preg *es:W_appReg"	    Prints the application-defined clipping region
			    for the window pointed to by es.
    "preg -g ds:si" 	    Prints a "graphical" representation of the
			    region beginning at ds:si
    "preg -d ds:si" 	    Prints a region based on document coordinates

Synopsis:
    Decodes a GEOS region and prints it out, either numerically, or as
    a series of x's and spaces.

Notes:
    * This command can deal with parameterized regions. When printing a
      parameterized region with the -g flag, the region is printed as if
      it were unparameterized, with the offsets from the various PARAM
      constants used as the coordinates.

    * If no address is given, this will use the last-accessed address (as
      the "bytes" and "words" commands do). It sets the last-accessed
      address, for other commands to use, to the first byte after the region
      definition.

See also:

useful_aliases.swat_prog
475:Note the following handy aliases, which are already set up for use:

    alias while {for {} ARG1 {} ARG2}
    alias do {if {[string c ARG2 while] == 0} {
      	    	eval [format {for {} {1} {if {!(%s)} break} {%s}} ARG3 ARG1]
	  } else {
	    eval [format {for {} {1} {if {!(%s)} break} {%s}} ARG2 ARG1]
	  }}
    alias repeat {if {[string c ARG2 until] == 0} {
      	    	for {} {1} {if ARG3 break} ARG1
	      } else {
	        for {} {1} {if ARG2 break} ARG1
	      }}

getvalue.swat_prog
611:Usage:
    getvalue <expr>

Example:
    "getvalue MSG_META_DETACH"		Returns the integer value of
					the symbol MSG_META_DETACH

Synopsis:
    This is a front-end to the "addr-parse" command that allows you to
    easily obtain the integer value of any expression. It's most useful
    for converting something the user might have given you to a decimal
    integer for further processing.

Notes:
    * If the expression you give does not evaluate to an address (whose
      offset will be returned) or an integer, the results of this function
      are undefined.

See Also:
    addr-parse, addr-preprocess

addr-preprocess.swat_prog
880:Usage:
    addr-preprocess <addr> <seg-var> <off-var> [<frame>]

Examples:
    "addr-preprocess $args s o"	    Parse the address expression in $args,
    	    	    	    	    storing the segment portion in $s and
				    the offset portion in $o in the current
				    scope.

Synopsis:
    Preprocesses an address expression into a form that is easier to manipulate
    and faster to reparse.

Notes:
    * <seg-var> is the name of a variable in the caller's scope in which the
      segment of the address is stored. It should be treated as opaque, as it
      may or may not be numeric.

    * <off-var> is the name of a variable in the caller's scope in which the
      offset of the address is stored. This will always be numeric.

    * Returns the 3-list returned by addr-parse, in case you have a use for
      the type token stored in the list.

See also:
    addr-parse.

field.{swat_prog.list swat_prog.memory}
438:Usage:
    field <list> <field name>

Examples:
    "field [value fetch ds:si MyBox] topLeft"	return the offset of 
    	    	    	    	    	    	the topLeft field in MyBox

Synopsis:
    Return the value for the field's offset in the structure.

Notes:
    * The list argument is a structure-value list from the "value"
      command.

    * The field name argument is the the field in the structure.

See also:
    value, pobject, piv.

useful_aliases.top.breakpoint
263:Note the following handy aliases, which are already set up for use:

    alias del {brk clear}
    alias delete {brk clear}
    alias dis {brk disable}
    alias disable {brk disable}
    alias en {brk enable}
    alias enable {brk enable}
    alias j {brk list}

go.top.running
454:Usage:
    go [<address expressions>]

Examples:
    "go"
    "go drawLeftLine"

Synopsis:
    Go until an address is reached.

Notes:
    * The address expressions argument is as many address expressions
      as desired for breakpoints.  Execution is continued until a 
      breakpoint is reached.  These breakpoints are then removed when
      the machine stops AND ARE ONLY ACTIVE FOR THE CURRENT PATIENT.

See also:
    break, continue, det, quit.

printStop.swat_variable.misc
582:Controls how the current machine state is printed each time the machine comes
to a complete stop. Possible values:
    asm	    Print the current assembly-language instruction, complete with
    	    the values for the instruction operands.
    src	    Print the current source line, if it's available. If the source
    	    line is not available, the current assembly-language instruction
	    is displayed as above.
    why     Print only the reason for the stopping, not the current machine
    	    state. "asm" and "src" modes also print this.
    nil	    Don't print anything.
waitForPatient.swat_variable.obscure
827:Usage:
    var waitForPatient (1|0)

Examples:
    "var waitForPatient 0"	Tells Swat to return to the command prompt
    	    	    	    	after continuing the machine.

Synopsis:
    Determines whether the command-level patient-continuation commands (step,
    next, and cont, for example) will wait for the machine to stop before
    returning.

Notes:
    * The effect of this is to return to the command prompt immediately
      after having issued the command. This allows you to periodically
      examine the state of the machine without actually halting it.

    * The output when the machine does stop (e.g. when it hits a breakpoint)
      can be somewhat confusing. Furthermore, this isn't fully tested, so it
      should probably be set to 0 only in somewhat odd circumstances.

See also:
    step, next, cont, int.

step.top.step
444:Usage:
    step

Examples:
    "step"  	    	execute the next instruction, where ever it is
    "s"

Synopsis:
    Execute the patient by a single machine instruction.

Notes:
    * If waitForPatient is non-zero, step waits for the machine to stop
      again. BEWARE: This doesn't do any of the checks for special things
      (XchgTopStack, software interrupts, etc.)  performed by the 's'
      command in istep.

See also:
    istep, next.

next.top.step
430:Usage:
    next

Examples:
    "next"  	    	execute the next instruction without entering it
    "n"

Synopsis:
    Execute the patient by a single instruction, skipping over any
    calls, repeated instructions, or software interrupts.

Notes:
    * Next does not protect against recursion, so when the breakpoint
      for the next instruction is hit, the frame of execution may be
      one lower.

See also:
    step, istep.

cont.top.running
365:Usage:
    cont    [-f]
Examples:
    "cont"  	    	continue execution
    "c"	    	    	continue execution
    "cont    -f"    	continues even if at FatalError

Synopsis:
    Continue GEOS.

Notes:
    * If global variable waitForPatient is non-zero, waits for the machine to
      stop again before it returns.

See also:
    go, istep, step, next, detach, quit.

useful_alias.swat_prog.patient
186:Note the following handy alias, used to stop a backgrounded machine.
This alias is already set up for use:

alias halt {[stop-patient] [event dispatch FULLSTOP {PC Halted}] [format {}]}

rs.running
147:Usage:
    rs

Example:
    "rs"    	    restart GEOS without attaching

Synopsis:
    Restart GEOS without attaching.

See also:
    att, attach.

$attach_command.top.running
586:Usage:
    att [<args>]

Examples:
    "att"   	    attach Swat to GEOS.

Synopsis:
    Attach Swat to GEOS.

Notes:
    * The args argument can be one of the following:
    	-s  	reboot GEOS with error checking, attach, and stop
    	-sn 	reboot GEOS without error checking, attach, and stop
    	-f  	restart GEOS with error checking and attach after a pause
    	-r  	restart GEOS with error checking and attach
    	-rn 	restart GEOS without error checking and attach
    	-n  	same as -rn
    	-c  	attach to the PC, which must already be running GEOS

See also:
    detach, quit.

ensure-swat-attached.swat_prog
418:Usage:
    ensure-swat-attached

Examples:
    "ensure-swat-attached"   	    stop if Swat isn't attached to GEOS.

Synopsis:
    If Swat is not attached to GEOS display an error and stop a command.

Notes:
    * Use this command at the start of any other command that accesses the PC.
      Doing so protects the user from the numerous warnings that can result
      from an attempt to read memory when not attached.


not-1x-branch.swat_prog
580:Usage:
    not-1x-branch

Examples:
    "if {[not-1x-branch]} {do_something}"   Returns non-zero if attached to
					    a version of GEOS that isn't
					    1.X

Synopsis:
    Of limited use outside GeoWorks, this allows a command to determine
    easily if it is dealing with a 1.X GEOS system and should examine
    system data structures accordingly.

Notes:
    * The decision is based on the global "geos-release" variable, which is
      set by Swat when it first attaches. The variable contains the major
      number of the version of GEOS running on the PC.

See also:

read-reg.{swat_prog.patient swat_prog.thread patient thread breakpoint}
370:Usage:
    read-reg <register>

Examples:
    "read-reg ax"   	return the value of ax
    "read-reg CC"   	return the value of the conditional flags

Synopsis:
    Return the value of a register in decimal.

Notes:
    * The register argument is the two letter name of a register in
      either upper or lower case.

See also:
    frame register, assign, setcc, clrcc.

regs.top.print
132:Usage:
    regs

Examples:
    Print the current registers, flags, and instruction.

See also:
    assign, setcc, clrcc, read-reg.


kpc.support.unix
141:
Usage:
    kpc

Synopsis:
    Attempts to knock some sense into a confused target pc. 

Notes:
    * This command is not supported for DOS.

debugger.swat_prog.debug
631:Name of the command when things go wrong. The function is passed two
arguments: a condition and the current result string from the interpreter.
The condition is "enter" if entering a command whose debug flag is set, "exit"
if returning from a frame whose debug flag is set, "error" if an error occurred
and the "debugOnError" variable is non-zero, "quit" if quit (^\) is typed and
the "debugOnReset" variable is non-zero, or "other" for some other cause
(e.g. "debug" being invoked from within a function).

Execution continues when the function returns. The result of the function
replaces the previous result for the interpreter.
debugOnError.swat_prog.debug
408:Usage:
    var debugOnError (0|1)

Examples:
    "var debugOnError 1" 	turn on debugging when there's an error

Synopsis:
    Enter debug mode when Swat encounters a Tcl error.

Notes:
    * The 0|1 simply is a false|true to stop and debug upon encountering
      an error in a Tcl command.

    * If an error is caught with the catch command, Swat will not 
      enter debug mode.

See also:
    debugger.

debugOnReset.swat_prog.debug
155:If non-zero and ^\ is typed or you answer 'n' to the 'Do you want to abort?'
prompt, causes the function indicated by the "debugger" variable to be
invoked
pcarray.print
2457:Usage:
    pcarray [<flags>] [<address>]

Examples:
    "pcarray"	    	    Print the chunk array at *ds:si (header only)
    "pcarray es:di"    	    Print the chunk array at es:di (header only)
    "pcarray -e"    	    Print the chunk array at *ds:si and print the
    	    	    	    elements in the array
    "pcarray -tMyStruct"	    Print the chunk array at *ds:si and print the
    	    	    	    elements where the elements are of type MyStruct
    "pcarray -tMyStruct -TMyExtraStruct"	    Like above, but data after MyStruct
    	    	    	    	    	    is printed as an array of
    	    	    	    	    	    MyExtraStruct structures
    "pcarray -e3"    	    Print the chunk array at *ds:si and print the
    	    	    	    third element
    "pcarray -e3 -l8"       Print the chunk array at *ds:si and print eight 
    	    	    	    elements starting with the third element
    "pcarray -hMyHeader"    Print the chunk array at *ds:si (header only)  where
    	    	    	    the header is of type MyHeader
    "pcarray -fVTCA_size"   Print only the field VTCA_size from each element
    "pcarray -E"    	    This is an element array.  Don't print empty
    	    	    	    elements
    "pcarray -N"    	    This is a name array.  Print the names.

Synopsis:
    Print information about a chunk array.

Notes:
    * The flags argument can be any combination of the flags 'e', 't',
      and 'h'. The 'e' flag prints all elements. If followed by a 
      number "-e3", then only the third element is printed.

      The 't' flag specifies the elements' type. It should be followed
      immediately by the element type.  You can also use "-tgstring" if
      the elements are GString Elements.

      The 'h' flag specifies the header type. It should be followed
      immediately by the element type.

      The 'l' flag specifies how many elements to print.  It can be used in
      conjunction with the 'e' flag to print a range of element numbers.

      The 'H' flag supresses printing of the header.

      The 'L' flag indicates that the elements in the array are actually
      lptrs to chunks in the same block as the array and should be 
      dereferenced before printing the elements.

      All flags are optional and may be combined.

    * The address argument is the address of the chunk array. If not 
      specified then *ds:si is used.

    * The 'Y' flag is a special flag for debugging nested calls -- use at
      your own peril.


help-verbose.swat_variable
76:If non-zero, performs verbose prompting, which can be annoying after a while
help-minAspect.swat_variable
265:If non-zero, contains the minimum aspect ratio to be maintained when
displaying tables in the help browser. The ratio is expressed as the fraction
    entries_per_column*10/number_of_columns
E.g. a minimum ratio of 1.5 would be 15 (since we don't do floating-point)
help-help.obscure
1572:Available commands:
    show <topic>    Print the help for the given topic. If it has subtopics,
    	    	    provides a menu of those subtopics for you to examine.
    find <pattern>  Locate all help topics matching a pattern.
    up	    	    Go back up one level in the help tree.
    ..		    Same as "up"
    goto <level>    Go to a specific level in the help tree.
    menu    	    Show the menu for the current level.
    <topic> 	    Any topic that's not one of the above commands. Performs
    	    	    an implicit "show <topic>"
Just as symbols may be completed by typing escape, control-] or control-D,
topics may be completed in the same ways with the same characters (escape
finishes out the topic, if possible, or finishes as much as is common among
the possibilities and beeps when it becomes helpless; control-] cycles through
the possible choices; control-D prints out a table of the possibilities).

In this documentation and in usage messages, the following conventions have
been more-or-less followed:
    ()'s enclose a set of alternatives. The alternatives are separated by |'s
    []'s usually enclose optional elements, except in fairly obvious cases
	 where they imply a character class (e.g. for the "frame" command).
    <>'s enclose "non-terminals", i.e. a type of argument, rather than a
	 string that's to be typed as shown (e.g. "<addr>" means an address
	 expression, whereas "(addr|biff)" means either the string "addr" or
	 the string "biff").
'*' following one of these constructs means 0 or more of the thing, while '+'
means 1 or more.
help.support.reference
417:This is the user-level access to the on-line help facilities for Swat. If
given a topic (e.g. "brk") as its argument, it will print all help strings
defined for the given topic (there could be more than one if the same name is
used for both a variable and a procedure, for instance). If invoked without
arguments, it will enter a browsing mode, allowing the user to work his/her
way up and down the documentation tree
breakpoint.{top top.advanced}
47:Commands relating to the setting of breakpoints
crash.{top}
29:Commands useful after a crash
ec.{top.advanced}
35:Commands relating to error-checking
file.{top}
26:Commands relating to files
flag.top.advanced
51:Commands for examining/changing the condition codes
heap.{top system}
31:Commands for examining the heap
interrupt.top.advanced
31:Commands relating to interrupts
lib_app_driver.top.advanced
51:Commands specific to particular areas of the system
memory.{top}
45:Commands for accessing memory in various ways
obscure.{top.advanced}
51:Commands that you probably don't want to know about
object.{top top.advanced}
28:Commands relating to objects
path.top.advanced
26:Commands relating to paths
patient.{top.advanced}
60:Commands for accessing and altering the state of the patient
print.{top top.advanced}
30:Commands for printing out data
profile.{top.advanced}
57:Commands for tracing/profiling the execution of a patient
running.{top top.advanced}
40:Commands relating to running the program
source.{top top.advanced}
34:Commands for examining source code
stack.{top top.advanced}
61:Commands for examining and manipulating the stack of a thread
step.top
34:Commands for stepping through code
support.{top top.advanced}
31:Commands for making life easier
swat_prog.{top.advanced}
29:Commands for programming swat
swat_variable.{top.advanced}
39:Variables for altering swat's behaviour
system.top.advanced
44:Commands for examining the system as a whole
tcl.{top.advanced}
24:A few basic tcl commands
thread.{top.advanced}
53:Commands for accessing/altering the state of a thread
window.{top top.advanced}
38:Commands for altering swat's windowing
bitmap.lib_app_driver
28:Commands relating to bitmaps
cell.lib_app_driver
37:Commands relating to the cell library
clipboard.lib_app_driver
34:Commands relating to the clipboard
dbase.lib_app_driver
38:Commands relating to the dbase library
file_system.lib_app_driver
36:Commands relating to the file system
float.lib_app_driver
38:Commands relating to the float library
font.{lib_app_driver}
26:Commands relating to fonts
geowrite.lib_app_driver
29:Commands relating to GeoWrite
graphics.lib_app_driver
29:Commands relating to graphics
grobj.lib_app_driver
38:Commands relating to the grobj library
ifs.lib_app_driver
35:Commands relating to the ifs driver
net.lib_app_driver
36:Commands relating to the net drivers
spreadsheet.lib_app_driver
44:Commands relating to the spreadsheet library
text.lib_app_driver
37:Commands relating to the text library
vm.{lib_app_driver}
31:Commands for examining VM files
address.{object}
42:Commands for printing out object addresses
event.{object}
29:Commands for examining events
gcnlist.{object}
29:Commands relating to gcnlists
gen.{object}
36:Commands specific to generic objects
hierarchies.{object}
44:Commands for printing out object hierarchies
message.{object}
29:Commands relating to messages
print.{object}
30:Commands for printing out data
fast.{object.print}
35:Commands for printing out data fast
obscure.{object.print}
51:Commands that you probably don't want to know about
vis.{object}
36:Commands specific to visible objects
event.{patient}
47:Commands for examining the events for a patient
handle.{patient}
53:Commands for examining the handles owned by a patient
message.{patient}
49:Commands relating to messages bound for a patient
running.{patient}
30:Commands for running a patient
utils.{print}
22:Utilities for printing
binding.support
39:Commands for setting/unsetting bindings
makedisk.support
33:Commands relating to making disks
unix.{support}
24:Commands for use on UNIX
editor.{support.unix}
38:Commands relating to UNIX text editors
reference.{support.unix}
41:Commands for accessing reference material
dos.{system}
39:Commands for examining the state of DOS
event.{system}
46:Commands for examining any event in the system
file_system.system
36:Commands relating to the file system
font.{system}
45:Commands for examining any font in the system
gcnlist.{system}
48:Commands for examining any gcnlist in the system
heap.{system}
31:Commands for examining the heap
ifs.{system}
35:Commands relating to the ifs driver
misc.{system}
38:Commands that fit in no other category
obscure.{system.misc}
51:Commands that you probably don't want to know about
thread.{system}
60:Commands for accessing the state of any thread in the system
timer.{system}
54:Commands for finding out about any timer in the system
vm.{system}
31:Commands for examining VM files
breakpoint.swat_prog
37:Functions to set breakpoints from TCL
def.swat_prog
37:Functions for defining various things
external.swat_prog
64:Functions to execute things in the UNIX world (i.e. not in swat)
file.swat_prog
29:Functions for accessing files
help.swat_prog
50:Functions for manipulating/accessing the help tree
input.swat_prog
42:Functions for fetching input from the user
list.swat_prog
32:Functions for manipulating lists
load.swat_prog
30:Functions for loading TCL code
memory.swat_prog
39:Functions for accessing memory from TCL
obscure.swat_prog
56:Really obscure functions that I don't want to know about
output.swat_prog
30:Functions for producing output
patient.swat_prog
55:Functions for accessing/altering the state of a patient
stack.swat_prog
44:Functions for manipulating/accessing a stack
string.swat_prog
34:Functions for manipulating strings
tcl.swat_prog
73:General category for tcl-internal (as opposed to swat-internal) functions
window.swat_prog
34:Functions for manipulating windows
conditional.swat_prog.tcl
53:Functions for conditional execution/control decisions
error.swat_prog.tcl
38:Functions relating to error processing
list.swat_prog.tcl
32:Functions for manipulating lists
loop.swat_prog.tcl
18:Looping constructs
synopsis.{support.unix.reference support.unix.editor}
251:Usage:
    synopsis

Examples:
    "synopsis"	    load an emacs buffer with the synopsis

Synopsis:
    List all commands with a brief synopsis each.  The list appears in emacs.

Notes:
    * This command is not supported for DOS.

See also
    help.

apropos.top.support
558:Usage:
    apropos <string>

Examples:
    "apropos vis"    	Find all commands related to vis
    "apropos text"  	Find all commands related to text

Synopsis:
    Search the list of commands and command help for all entries containing
    <string>. Lists each command and its synopsis.

Notes:
    * <string> may actually be a pattern, as described in the help for the
    "string" command (under "string match"). It automatically has a leading
    and following * tacked onto it to cause it to match anywhere within
    a help string.

See also:
    help.

print-db-item.lib_app_driver.dbase
214:Usage:
    print-db-item <file> <group> <item>

Examples:
    "print-db-item bx ax di"   	print the item at bx/ax/di

Synopsis:
    Print information about a single dbase item

Notes:

See also:
    print-db-group

print-db-group.lib_app_driver.dbase
196:Usage:
    print-group file group

Examples:
    "print-db-group bx ax"   	print the group at bx/ax

Synopsis:
    Print information about a dbase group block

Notes:

See also:
    print-db-item

ats.top
329:Usage:
     ats 
     Automated Testing System. This program enables user to record a session of inputs from the PC,
     and to playback the entire session for testing purpose. User can also enter swat commands or 
     screen-dump in the middle of the recording session, and have those commands verified during
     playback. 

cons.{swat_prog.list swat_prog.lisp}
485:Usage:
    cons <element> <list>

Examples:
    "var alist [cons {a b} $alist]"	Adds {a b} to the front of $alist

Synopsis:
    Returns the list consisting of <element> added to the front of <list>.

Notes:
    * For technical reasons, it is difficult to cons a list of one element
      onto another list. If you want to do this, you must do:
        concat {{a}} $letters
      If you want a variable in place of a, use:
	concat [format {{%s}} $a] $letters

See also:
    car, cdr.

assoc.{swat_prog.list swat_prog.lisp}
774:Usage:
    assoc <list> <key>

Examples:
    "assoc $classes GenPrimaryClass"	Examines the sublists of $classes
    	    	    	    	    	and returns the first one whose first
					element is the string GenPrimaryClass

Synopsis:
    Searches an associative list to find an element with a particular key.
    The list is made of sublists, each of whose first element is the key
    for accessing the value that is the rest of each sublist.

Notes:
    * A typical associative list is made of key/value pairs, like this:
    	{{<key> <value>} {<key> <value>} ...}

    * If an element is found whose <key> matches the passed <key>, the
      entire element is returned as the result. If no <key> matches, nil
      is returned.

See also:
    car, cdr, range, list, delassoc.

car.{swat_prog.list swat_prog.lisp}
311:Usage:
    car <list>

Examples:
    "car $args"	    Returns the first element of $args

Synopsis:
    Returns the first element of a list.

Notes:
    * This is a lisp-ism for those most comfortable with that language. It
      can be more-efficiently implemented by saying [index <list> 0]

See also:
    cdr

cdr.{swat_prog.list swat_prog.lisp}
344:Usage:
    cdr <list>

Examples:
    "cdr $args"	    Returns the remaining arguments yet to be processed

Synopsis:
    Returns all but the the first element of a list.

Notes:
    * This is a lisp-ism for those most comfortable with that language. It
      can be more-efficiently implemented by saying [range <list> 1 end]

See also:
    car

aset.swat_prog.lisp
634:Usage:
    aset <array-name> <index> <value>

Examples:
    "aset foo $i $n"	Sets the $i'th element (counting from 0) of the value
    	    	    	stored in the variable foo to $n.

Synopsis:
    Allows you to treat a list stored in a variable as an array, setting
    arbitrary elements of that array to arbitrary values.

Notes:
    * <array-name> is the *name* of the variable, not the value of the variable
      to be altered.

    * This command returns nothing.
    
    * The index must be within the bounds of the current value for the variable.
      If it is out of bounds, aset will generate an error.

See also:
    index

delassoc.{swat_prog.list swat_prog.lisp}
741:Usage:
    delassoc <list> <key> [<foundvar> [<elvar>]]

Examples:
    "delassoc $val murphy"	Returns $val without the sublist whose first
				element is the string "murphy"

Synopsis:
    Deletes an entry from an associative list.

Notes:
    * <foundvar>, if given, is the name of a variable in the caller's scope
      that is to be set non-zero if an element in <list> was found whose
      <key> matched the given one. If no such element was found (and therefore
      deleted), the variable is set zero.
      
    * <elvar>, if given, is the name of a variable in the caller's scope
      that receives the element that was deleted from the list. If no
      element was deleted, the variable remains untouched.

See also:
    assoc.

classes.{top.object patient}
680:Usage:
    classes [<patient>]

Examples:
    "classes"			Print list of classes in current patient
    "classes myapp"		Print list of classes in myapp

Synopsis:
    Prints list of classes defined by the given patient.  Useful
    as a starting place, along with "gentree -a" & "vistree -c", to get
    your bearings as to what's in an application.

Notes:
    * Remember that "brk" will take address arguments of the form
      <class>::<message>, so you use this function, & then set a brkpnt using
      "brk MyTextClass::MSG_MY_TEXT_MESSAGE".   If you need a breakpoint
      that's limited to one object, use objbrk instead.

See also:
    gentree, methods, objbrk, brk, cup

methods.{top.object}
1306:Usage:
    methods <class>
    methods <object>
    methods <special object flags>

Examples:
    "methods -p"			Print out methods defined for process
    "methods ui::GenDocumentClass"	Print out GenDocumentClass methods
    "methods 3ffch:072fh"		Print out methods for class at addr
    "methods -a"			Print methods of top class of app obj

Synopsis:
    Prints out the method table for the class specified, or if an object is
    passed, for the overall class of the object.  Useful for getting a list of
    candidate locations to breakpoint.

Notes:
    * The special object flags, which are interpreted by this command to
      mean the class of the specified object:

    	Value	Prints methods of...
	-----	-----------------------------------------------------------
    	-a  	the current patient's application object class
	-p	the current patient's process class
    	-i  	the current "implied grab" object class
    	-f  	the leaf of the keyboard-focus hierarchy's class
	-t  	the leaf of the target hierarchy's class
	-m  	the leaf of the model hierarchy's class
	-c  	the content for the view over which the mouse is currently
		located's class
    	-kg  	the leaf of the keyboard-grab hierarchy's class
	-mg 	the leaf of the mouse-grab hierarchy's class

See also:
    cup, classes, objbrk, brk

cup.{top.object}
1551:Usage:
    cup <class>
    cup <object>
    cup <special object flags>

Examples:
    "cup ui::GenDocumentControlClass"	Print class hierarchy of named class
    "cup ^l2850h:0034h"			Print class hierarchy of object
    "cup -f"				Print class hierarchy of focus object
    "cup -p"				Print class hierarchy of process

Synopsis:
    Walks up the class hierarchy, starting at a given class, printing each
    class encountered.  May be passed an object, in which case the class of
    the object will be used as a starting place.

Notes:
    * The special object flags, which are interpreted by this command to
      mean the class of the specified object:

    	Value	Prints class hierarchy for...
	-----	-----------------------------------------------------------
    	-a  	the current patient's application object class
	-p	the current patient's process class
    	-i  	the current "implied grab" object class
    	-f  	the leaf of the keyboard-focus hierarchy's class
	-t  	the leaf of the target hierarchy's class
	-m  	the leaf of the model hierarchy's class
	-c  	the content for the view over which the mouse is currently
		located's class
    	-kg  	the leaf of the keyboard-grab hierarchy's class
	-mg 	the leaf of the mouse-grab hierarchy's class

    * As this command operates on object classes, & not objects (though they
      may be used to indicate a class), it will stop at any variant master
      class, for the superclass is defined by individual objects, & not
      the class itself.

See also:
    classes, methods, objbrk, brk

class-addr-with-obj-flag.swat_prog.object
811:Usage:
    class-addr-with-obj-flag <address>

Examples:
    "var addr [class-addr-with-obj-flag $addr]" If $addr is "-i", returns
                                                the address of the class of
						the current implied grab.

Synopsis:
    This is a utility routine that can be used by any command that operates
    on object classes.  It is basically a level layer above
    addr-with-obj-flag <address>, to either accept direct class addresses,
    or object references, in which case the class of the object is returned.
    See addr-with-obj-flag for all the special flags that may be passed
    (-a, -p, -i, etc.)

    * If <address> is empty, this will return the class of the local
      variable "oself" within the current frame, if it has one, or *ds:si

See also:
    addr-with-obj-flag

pini.{system.misc}
744:Usage:
    pini [-f <file>] [<category>]

Examples:
    "pini Lights Out"	    Print out the contents of the Lights Out category
    	    	    	    in each .ini file
    "pini"  	    	    Print out each currently loaded .ini file.
    "pini -f 0 Lights Out"  Print out the contents of the Lights Out category
    	    	    	    in the first (local) .ini file
    "pini -f 1"		    Print out the second .ini file.

Synopsis:
    Provides you with the contents of one or all of the .ini files being
    used by the current GEOS session.

Notes:
    * <category> may contain spaces and other such fun things. In fact, if you
      attempt to quote the argument (e.g. "pini {Lights Out}"), this will not
      find the category.

See also:
    none.

iniwatch.system.misc
349:Usage:
    iniwatch <flags>

 Examples:
    iniwatch -r:  show init file reads
    iniwatch -w:  show init file writes
    iniwatch -rw: show both reads and writes
    iniwatch  (no arguments)  stop init file watching

 Synopsis:

    iniwatch is used to monitor reading and writing using the InitFile
    routines. 

 Notes:
 

 See Also:
    pini

resolver.top.socket 
40:commands to display resolver information
p-rescache.top.socket.resolver
301:Usage:
    p-rescache <options>+
Examples:
    p-rescache
    p-rescache addr
    p-rescache rr
    p-rescache addr rr
Synopsis:
    Print out contents of resolver cache in tree representation.
Notes:
    Options:
	addr	print out optrs for each node as resource records
	rr	print out resource records

display-request.top.socket.resolver
213:
Usage:
    display-request <options>+
Examples:
    display-request
    display_request addr
Synopsis:
    displays the request hierarchy in ResolverRequestBlock
Options:
    addr displays addresses of the nodes

replace-packet.{top.socket.resolver}
359:Usage:
    replace-packet <rtype> <segreg> <offsetreg>
Examples:
    replace-packet delegation es di
    replace-packet cname es di
    replace-packet error es di
Synopsys:
    Overrides the response from DNS with a predefined packet.
Note:
  RTypes:
    delegation - this response contains other name servers to query rather than
                 the answer

lhwalk.{top.heap system.heap}
304:Usage:
    lhwalk [<address>]

Examples:
    "lhwalk 1581h"  	list the lm heap at 1581h:0

Synopsis:
    Prints out information about a local-memory heap.

Notes:
    * The address argument is the address of the block to print. The 
      default is block pointed to by ds.

See also:
    hwalk, objwalk

objwalk.{top.object object.print}
893:Usage:
    objwalk [<address>]

Examples:
    "objwalk"

Synopsis:
    Prints out information about an object block.

Notes:
    * The address argument is the address of the block to print. The
      default is the block pointed at by ds.

    * Since the block is an object block, each chunk has a set of
    ObjChunkFlags associated with it.  These flags are displayed in
    the FLAGS column, and have the following meanings:

       I - OCF_IGNORE_DIRTY.  The chunk won't be saved to state (or to
       its VM file, even it the chunk is dirty.

       D - OCF_DIRTY - the chunk is dirty, and will be saved to state
       (unless OCF_IGNORE_DIRTY is set).

       R - OCF_IN_RESOURCE - the chunk is defined in a resource, and thus
       it will be resized to zero, rather than freed, if it's not dirty.

       O - OCF_IS_OBJECT - the chunk is an object.


See also:
    lhwalk, pobject

doc.top.support
211:Usage:
    doc [<keyword>]

Examples:
    "doc MSG_VIS_OPEN"	- brings up technical documentation for MSG_VIS_OPEN

Synopsis:
    Find technical documentation for <keyword>.

See also:
    doc-next, doc-previous

doc-next.top.support
287:Usage:
    doc-next

Examples:
    "doc MSG_VIS_OPEN"	- brings up technical documentation for MSG_VIS_OPEN
    "doc-next"		- brings up more info on MSG_VIS_DRAW if available

Synopsis:
    Bring up next instance of documentation for the current keyword.

See also:
    doc, doc-previous

doc-previous.top.support
352:Usage:
    doc-previous

Examples:
    "doc MSG_VIS_OPEN"	- brings up technical documentation for MSG_VIS_OPEN
    "doc-next"		- brings up more info on MSG_VIS_DRAW if available
    "doc-previous"	- brings up previous info on MSG_VIS_OPEN

Synopsis:
    Bring up previous instance of documentation for the current keyword.

See also:
    doc, doc-next

ignerr.top.crash
500:Usage:
    ignerr [<address>]

Examples:
    "ignerr"	    	    ignore error and continue
    "ignerr MyFunc::done"   ignore error and continue at MyFunc::done

Synopsis:
    Ignore a fatal error and continue.

Notes:
    * The address argument is the address of where to continue
      execution.  If not specified then cs:ip is taken from the frame.

    * The stack is patched so that execution can continue in the frame
      above the fatal error handling routine.

See also:
    why, backtrace.

prgfloat.lib_app_driver.rgfloat
327:Usage:
    prgfloat [<reg-pair dxcx>]
            or
    prgfloat [<address ds:si>]

Examples:
    "prgfloat"	       print the RegFloat number dxcx
    "prgfloat axbp"    print the RegFloat number axbp
    "prgfloat ds:si"   print the RegFloat number at address ds:si

Synopsis:
    Print a RegFloat number

Notes:

See also:


pargfl.lib_app_driver.pargfl
351:Usage:
    pargfl [<reg-pair dxcx>]
            or
    pargfl [<address ds:si>]

Examples:
    "pargfl"         print the AdjustedRegFloat number dxcx
    "pargfl axbp"    print the AdjustedRegFloat number axbp
    "pargfl ds:si"   print the AdjustedRegFloat number at address ds:si

Synopsis:
    Print an AdjustedRegFloat number

Notes:

See also:


pscope.print
711:Usage:
    pscope [<scope-name> [<sym-class>]]

Examples:
    "pscope WinOpen"	Prints out all the local labels, variables, and
			arguments within the WinOpen procedure

Synopsis:
    This prints out all the symbols contained in a particular scope.

Notes:
    * This can be useful when you want to know just the fields in a structure,
      and not the fields within those fields, or if you know the segment in
      which a variable lies, but not its name. Admittedly, this could be
      overkill.

    * <sym-class> can be a list of symbol classes to restrict the output. For
      example, "pscope Filemisc proc" will print out all the procedures within
      the Filemisc resource.

See also:
    whatis.

whatis.top.print
902:Usage:
    whatis (<symbol-name>|<addr>)

Examples:
    "whatis WinColorFlags"	Print a complete description of the record
				WinColorFlags

Synopsis:
    This produces a human-readable description of a symbol, giving whatever
    information is pertinent to its type.

Notes:
    * For type symbols (e.g. structures and enumerated types), the description
      of the type is fully displayed, so if a structure has a field with an
      enumerated type, all the members of the enumerated type will be
      printed as well. Also all fields of nested structures will be printed.
      If this level of detail isn't what you need, use the "pscope" command
      instead.

    * It isn't clear why you'd need the ability to find the type of
      an address-expression, since those types always come from some symbol
      or other, but if you want to type more, you certainly may.

See also:
    pscope

load.{swat_prog.load swat_prog.file}
1007:Usage:
    load <file>

Examples:
    "load print"    	Searches for a file called "print" or "print.tcl"
			and loads it.

Synopsis:
    This loads a file of Tcl commands, evaluating each command in turn until
    the last is evaluated, or an error is detected.

Notes:
    * The directories in which this command searches are the elements of the
      list returned by the "get-load-path" command. Unless you've redefined
      this command, this list is taken from the global "load-path" variable.

    * The load-path variable is initialized from the SWATPATH environment
      variable, which is in the form <dir1>:<dir2>:...:<dirn>. The Swat
      system library directory (both in your development tree and in the
      installed source tree) is automatically appended to this path, so you
      needn't include it yourself.

    * Directories may contain ~ or ~<user-name> at their start. (UNIX only)

    * When searching, both <file> and <file>.tcl are checked for.

See also:
    autoload, source

unignore.{swat_prog.file}
199:
Usage:	unignore    <patient name>

Example:
    	unignore    hello   	; unignores hello

Synopsis:
    	unignores patients whether they were ignore with 'i' or 'I'

See also:
    	nuke-symdir-entry

add-symdir-ignore-entry.{swat_prog.load swat_prog.file}
632:
Usage:	add-symdir-ignore-entry <geode> <type>

Example:
    	add-symdir-ignore-entry hello app ; adds an ignore entry for hello
    	    	    	    	    	  ; to the symdir cache
    	add-symdir-ignore-entry text lib  ; adds an ignore entry for hello
    	    	    	    	    	  ; to the symdir cache

Synopsis:
    	if you want to ignore a patient everytime you run swat, you
    	can add an ignore entry to the cache that tells swat it ignore
        the patient everytime it goes to look for it. This is the same
        as ignoring a patient with "Ignore" or "I" rather than
    	"ignore" or "i"

See also:
    	nuke-symdir-entry

nuke-symdir-entry.{swat_prog.load swat_prog.file}
979:
Usage:	nuke-symdir-entry <geode>

Example:
    	nuke-symdir-entry text	    ; nukes the text entries

Note:	to "unignore" the patient, just switch to that patient, so
    	doing this:

    	nuke-symdir-entry <patient>
    	switch <patient>

    	will unignore a permanently ignored patient

Synopsis:
    	the symdir cache allows swat to remember where it finds symbol files
    	so it can quickly find it the next time it is run, geodes have entries
    	in the cache of places where it was found. By running nuke-symdir-entry
    	it will remove the entries for a given geode from the cache. This can
    	be useful if there is an entry for a gym file that is being found
    	before it gets a chance to find the right symfile somewhere else in the
    	tree. This is also useful if you have Ignored (capital I) a patient and
    	added an Ignore entry to the cache, and now you want it to search for
    	the symbol file for that geode

See also:
    	add-symdir-ignore-entry

rtcm-print-events.top.rtcm 
376:Usage:
    rtcm-print-events

Examples:
    "rtcm-print-events" Prints the events in RTCM's event list

Synopsis:
    Prints out the event list of RTCM in a readable way.

    -h will print the header of the chunk array before the events
       themselves.

Notes:
    * Swat may have to continue the machine to ensure the list is
      in memory

See also:
    showcalls -R


assign.{top.memory swat_prog.memory}
846:Usage:
    assign <addr> <value>

Examples:
    "assign ip ip+2"	 	Add 2 to the value of IP in the current frame.
    "assign {word ds:si} 63h"	Store 63h in the word at ds:si

Synopsis:
    Use this command to alter simple data stored in memory, or the value of
    a register. The data can be no larger than a dword.

Notes:
    * When assigning to an sptr, the value assigned will be the segment of
      the block indicated by the <value>, unless <value> is an absolute
      address (or just a number), in which case the low 16 bits of the
      offset will be used instead.
    
    * Similar behaviour occurs when assigning to an fptr, except if the <value>
      is an absolute address, in which case the linear address in the offset
      portion of the <value> will be decomposed into a segment and an offset.

See also:
    imem, value

iacp.lib_app_driver
431:Usage:
    iacp -ac 	    prints all connections
    iacp -l 	    prints all lists w/o connections
    iacp -d 	    prints all open documents
    iacp <obj>      prints all connections to which <obj> is party

Examples:
    "usage"	Explanation

Synopsis:
    short description of command's purpose

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

swat_navigation.top
45:Information useful for getting around in Swat
address_expressions.top.swat_navigation
4028:
Address expressions are used as arguments to any Swat command that 
accesses memory. For example, the pobject command takes an address 
expression as an argument and prints out information about the object at 
that address. An address expression can be a symbol name, which is just the 
name of a pointer, or a symbol path. A symbol path looks like one of the 
following:

<patient>::<name>
<module>::<name>
<patient>::<module>::<name>

The symbol path is used when there is more than one symbol of a given name 
or if a symbol of a different application is needed. A symbol can be 
represented in a variety of ways: the name of an object, a field of a 
structure, a register/number combination, a number from the address history, 
an element of an array, nested Tcl commands, or a Tcl variable.  Array 
indexing is used as follows:

<addr> [<n>]

which will return the zero-based element n from the given addr, even if addr 
is not an array.

Another important way of representing the symbol is as a segment:offset pair. 
Here, the segment is a constant, a register, a module, or a handle ID given 
as ^h<id> where id is a constant or register.

There are several operators which are used to make memory examination 
and manipulation easier in Swat. These operators are shown below (in order 
of highest precedence to lowest):

^h
 The carat-h is used to dereference a memory handle when representing 
 an address as a handle:offset pair (this is also known as a "heap pointer" 
 representation) or when accessing a particular block of memory. It is 
 often used in the situation when a memory handle is in one register (such 
 as BX) and the offset is in another register (such as SI). This is similar 
 to the ^l operator (below), but it requires an offset into the block rather 
 than  a chunk handle. The ^h operator is used thus (the two commands will 
 give the same information if the specified registers contain the specified 
 values):

 [hello3:0] 6 => pobj ^h43d0h:0022h
 [hello3:0] 7 => pobj ^hBX:SI


.
 The period is used to access a field in a structure. For example, if a 
 visible object is located at ^hBX:SI, you could retrieve its top bound with 
 the following command:

 [hello3:0] 8 => print ^h43d0h:0022h.VI_bounds.R_top


+ -
 The addition and subtraction operators are used to add and subtract 
 symbols to and from other symbols and constants. If two symbols in the 
 same segment are subtracted, a constant will be the result.


^l
 The carat-l is used to dereference an optr, a pointer in the form 
 handle:chunk-handle (this is also known as a "local memory pointer"). 
 This is similar to the ^h operator, but ^l requires a chunk handle rather 
 than an offset. If an optr is stored in CX:DX, for example, the ^l operator 
 could be used to dereference it as follows:

 [hello3:0] 11 => pobj ^lCX:DX
 [hello3:0] 12 => pobj ^l0x43d0:0x022


:
 The colon is the segment/offset operator, used to separate the segment 
 and offset in a segment:offset pair.

 [hello3:0] 13 => pobj ^lCX:DX
 [hello3:0] 14 => pobj ^l0x43d0:0x022
 [hello3:0] 15 => pobj INTERFACE:HelloView


*
 The asterisk is a pointer-dereferencing operator, as in the C programming 
 language:

 [hello3:0] 16 => print SubliminalTone
 @5: SubliminalTone = 7246h

 [hello3:0] 17 => print *(&SubliminalTone)

 @6: *(&SubliminalTone) = 7246h


^v
 The carat-v is the virtual memory operator, used to get to the base of a 
 block that is in a Virtual Memory file given the file handle and VM block 
 handle. The correct usage of the ^v operator is:

 ^v<file>:<VM_block>

Much of the time the type of data stored at the address given by the address 
expression is implicit in the expression. Sometimes in ambiguous situations 
(using code as data), however, the type of data must be explicitly stated in
the address expression. This is done by indicating the type of the data 
followed by a space and then a normal address expression. For example, in 
the expression

 dword ds:14h

the data at ds:14h will be treated as a double word.

main_buffer.top.swat_navigation
325:
The main buffer is the area of Swat in which the swat prompt
(e.g. "(geos:0) 5 =>"), your typed commands, and the output
of where most of those commands appear.

To scroll the main buffer, use Ctrl-u (up), Ctrl-d (down), 
Ctrl-y (back one line), Ctrl-e (forward one line), 
Ctrl-b (backward page) and Ctrl-f (forward page).

mouse_usage.top.swat_navigation
261:
You can use the mouse to capture and paste text.  To capture text in
any buffer, click and drag with the left mouse button.  To capture a
word, double click the left mouse button.  To paste captured text to 
the Swat prompt line, press the right mouse button.

command_history.top.swat_navigation
718:
By pressing Ctrl-p several times, you can call previous commands up to 
the Swat prompt. If you go past the command that you want, use Ctrl-n 
to go forward in the history.

The `!' character followed by a number repeats that command in the 
command history. (The standard Swat prompt includes a command 
number which may be used for this.) e.g. !184 will execute the 184th 
command of this session.
The `!' character followed by a string will repeat the most recent 
command whose beginning is the same as the passed string. That is !b 
might invoke brk list if that was the most recent command that began 
with "b".

Typing "!!" will repeat the previous command; "!$" is the last argument of 
the previous command.

command_correction.top.swat_navigation 
569:
To repeat the previous command, but changing a piece of it, use the ^ 
command. This comes in handy when you've made a typo trying to enter 
the previous command.

 (geos:0) 185 => wurds
 Error: invoked "wurds", which isn't a valid command name

 (geos:0) 186 => ^u^o
 words
 Addr:	 	 +0   +2   +4   +6   +8   +a   +c   +e
 4b4bh: e800 01b1 0e00 60f6 0016 9800 6e02 a900

 (geos:0) 187 => ddwords
 Error: invoked "ddwords", which isn't a valid command name

 (geos:0) 188 => ^d
 dwords
 Addr:  +0       +4       +8       +c
 4b59h: 1d0aa900 001c400d 294bd000 6c0a8000

address_history.top.swat_navigation
896:
Swat has an address history which is composed of tokens for address 
expressions previously used by commands such as print or pobj. The 
elements in the history can be accessed by typing @<number> where the 
number argument is the number of the item in the history. These 
elements can replace a full address expression (except constants) and are 
often used when traversing through fields of a previously printed 
structure. The default history keeps track of the last 50 items. 

  (geos:0) 8 => gentree -i

  GenPrimaryClass (@1, ^l44a0h:001eh) "MESS #1"
   GenViewClass (@2, ^l44a0h:0020h)
   GenValueClass (@3, ^l44a0h:0026h)
   GenValueClass (@4, ^l44a0h:0028h)

  (geos:0) 9 => pinst @3
  class = ui::dgroup::GenValueClass
  master part: Gen_offset(53) -- ui::GenValueInstance
  @5: {ui::GenValueInstance (^h17568:1170)+53} = {
	...rest of object's instance data...
  } 
  (geos:0) 10 =>

command_abbreviation.top.swat_navigation
653:
Swat's command abbreviation feature provides a powerful shortcut. Many 
commands can be specified by their first few characters up to and 
including the letter that makes them distinct from all other commands. 
For example, the pobject command can be specified pobj, pob, or even 
po, but not by just p because there are other commands (such as print) 
beginning with the letter p. To get a list of all commands with a given 
prefix, type the prefix at the Swat prompt, then type Ctrl-D. To 
automatically complete a command name use the Escape key (if the 
prefix is unambiguous) or Ctrl-] to scroll through the list of possible 
command completions.

rc_file.top.swat_navigation
849:
If there are certain Swat commands that need to always be executed 
when Swat is run, then they can be placed in an initialization file.  

An initialization file contains a list of commands that 
will be executed just before the first prompt in Swat.
The initialization file should be called SWAT.RC. Swat will look in the 
directory from which it was invoked for such a file. If it doesn't find one 
there, it will look for a file named SWAT.RC in a directory named in the 
HOME environment variable

  srcwin 15
  regwin
  save 500
  spawn mess1

This example shows a sample initialization file which sets up windows to 
display the source code and current register values, set the length of the 
save buffer to 500 lines, and continue running swat until the mess1 
application has been loaded, at which point execution will automatically stop.

pbody.lib_app_driver.grobj 
444:Usage:
    pbody [<address>]


Examples:
    "pbody"	    	prints the GrObjBody given a GrObj block
		    	at ds

    "pbody ^hbx"	Prints the GrObjBody given a GrObj block
		    	whose handle is bx

Synopsis:
    Finds the GrObjBody via the BodyKeeper -- prints its OD and its
    instance data.

Notes:
    * If no arguments are given, then DS is assumed to point to an
      object block containing GrObjects.

See also:
    ptrans, grobjtree

ptrans.lib_app_driver.grobj
510:Usage:
    ptrans [<flags>] [<address>]

Examples:
    "ptrans"	    	print the normal transform for the object
		    	at *ds:si

    "ptrans -s"	    	print the sprite transform for the GrObj
		    	object at *ds:si

    "ptrans ^lbx:cx"  	print the normal transorm for the
		      	object whose OD is ^lbx:cx

Synopsis:
    Prints the ObjectTransform data structure as specified.

Notes:
    * The -s flag can be used to print the 'sprite' transform

    * <address> defaults to *ds:si

See also:
    pobject.

grobjtree.lib_app_driver.grobj
379:Usage:
    grobjtree [<address>] [<instance field>]

Examples:
    "grobjtree"	    	    	print the grobj tree starting at *ds:si

Synopsis:
    Print out a grobj tree.

Notes:
    * The address argument is the address of a GrObj Body
      This defaults to *ds:si.  

    * To get the address of the grobj body, use the "pbody" or
      "target" commands. 


See also:
    pbody

pobjarray.lib_app_driver.grobj
172:Usage:
    pobjarray [<address>]

Examples:
    "pobjarray"	    print the array of ODs at *ds:si

Synopsis:
    Print out an array of objects.

Notes:

See also:
    pbody

set-startup-ec.ec
312:Usage:
    set-startup-ec [<args>]

Examples:
    set-startup-ec +vm		turn on VM error checking when starting up
    set-startup-ec none		turn off all ec code when starting up

Synopsis:
    Executes the "ec" command upon startup, to allow one to override the
    default error checking flags.

See also:
    ec

ec.{top.running ec}
2779:Usage:
    ec [<args>]

Examples:
    "ec"	    	list the error checking turned on
    "ec +vm"    	add vmem file structure checking
    "ec all"  	 	turn on all error checking (slow)
    "ec save none"	save the current error checking and then use none
    "ec restore"	use the saved error checking flags

Synopsis:
    Get or set the error checking level active in the kernel.

Notes:
    * The following arguments may occur in any combination:

	<flag>		turn on <flag>
	+<flag>	    	turn on <flag>
	-<flag>	    	turn off <flag>
	all		turn on all error checking flags
    	ALL	    	turn on *ALL* error checking flags
	none		turn off all error checking flags
	sum <handle>	turn on checksum checking for the memory block with the
			the given handle ("ec sum bx"). The current contents
			of the block will be summed and that sum regenerated
			and checked for changes at strategic points in the
			system (e.g. when a call between modules occurs).
    	    	    	NOTE: when checksum checking is turned on for a
    	    	    	resource, breakpoints in that resource may not be
    	    	    	set or unset, as that will cause the checksum to fail
    	    	    	To get around this, turn off checksum checking, set
    	    	    	or unset any breakpoints you want in that resource
    	    	    	and then re-set/unset checksum checking
	-sum		turn off checksum checking
    	save	    	save the current error checking
    	restore  	restore the saved error checking flags 

      where <flag> may be one of the following:

    COMMON FLAGS
	analVM		perform anal-retentive checking of vmem files
	graphics    	graphics checking
	normal	    	normal error checking
	segment	    	extensive segment register checking
    	lmemMove    	force lmem blocks to move whenever possible
    	unlockMove  	force unlocked blocks to move whenever possible
    	vm  	    	vmem file structure checking
    	vmemDiscard 	force vmem blocks to be discarded if possible
    	app 	    	perform application-specific error-checking
    	text	    	preform intensive text object error-checking

    NEW FLAGS
    	free    	heap free and lmem free block checking
	lmem	    	lmem error checking
    	high	    	various more-intesive error checking

    OLD FLAGS: (only available on Upgrade, Zoomer and Wizard)
	region	    	region checking
	lmemFree    	lmem free area checking
	lmemInternal	internal lmem error checking
	lmemObject  	lmem object checking

    * If there isn't an argument, 'ec' reports the current error
      checking flags.

    * Each time GEOS is run the ec flags are cleared.  The saved flags
      are preserved between sessions.  The ec flags may be saved and
      then restored after restarting GEOS so that the flag settings are not
      lost when restarting GEOS.

See also:
    why.

stepSoftInts.swat_variable.step
221:If non-zero, stepping into one of the special GEOS software interrupts
will land you in the kernel, not the destination of the interrupt. For normal
people (i.e. not kernel maintainers), this should be (and defaults to) 0
istep.top.step
2996:Usage:
    istep [<default command>]

Examples:
    "is"	enter instruction step mode
    "istep n"  	enter instruction step mode, <ret> does a next command

Synopsis:
    Step through the execution of the current patient.
    This is THE command for stepping through code.

Notes:
    * The default command argument determines what pressing the return
      key does.  By default, return executes a step command.  Any
      other command listed below may be substituted by passing the
      letter of the command.

    * Istep steps through the patient instruction by instruction,
      printing where the ip is, what instruction will be executed, and
      what the instruction arguments contain or reference.  Istep
      waits for the user to type a command which it performs and then
      prints out again where istep is executing.

    * This is a list of istep commands:

        q, ESC, ' ' Stops istep and returns to command level.
        c           Continues execution. (Quits istep as well)

        s, RET      Steps one instruction.
        n	    Continues to the next instruction, skipping procedure
    	    	    calls, repeated string instructions, and software
    	    	    interrupts.  Next only stops when the machine returns 
    	    	    to the right context (i.e. the stack pointer and 
    	    	    current thread are the same as they are when the 'n' 
    	    	    command was given).  Routines which change the stack
    	    	    pointer should use 'N' instead.
        l   	    Goes to the next library routine.
        M   	    Goes to the next method called.

        b           Toggles a breakpoint at the current location.

        f	    Finishes out the current stack frame.
        F	    Finishes the current method.

    	N	    Like 'n', but stops whenever the breakpoint is hit,
    	    	    whether you're in the same frame or not.
    	o   	    Like 'n' but steps over macros as well.
    	O   	    Like 'N' but steps of macros as well.

	A	    Aborts the current stack frame.
	B	    Backs up an instruction (opposite of "S").
        J	    Jump on a conditional jump, even when "Will not jump" 
		    appears.  This does not change the condition codes.
        S	    Skips the current instruction (opposite of "B").

        h, ?	    This help message.
        r 	    list the registers (uses the regs command)
	R	    References either the function to be called or the 
		    function currently executing

        e 	    Executes a tcl command and returns to the prompt.
        g	    Executes the 'go' command with the rest of the line as
    	    	    arguments.

    * Emacs will load in the correct file executing and following the
      lines where istep is executing if its server is started and if
      ewatch is on in swat.  If ewatch is off emacs will not be updated.

    * If the current patient isn't the actual current thread, istep
      waits for the patient to wake up before single-stepping it.

See also:
    sstep, listi, ewatch.

sstep.top.step
2489:Usage:
    sstep [<default command>]

Examples:
    "ss"    	enter source step mode
    "sstep n"  	enter source step mode, <ret> does a next command

Synopsis:
    Step through the execution of the current patient by source lines.
    This is THE command for stepping through high level code.

Notes:
    * The default command argument determines what pressing the return
      key does.  By default, return executes a step command.  Any
      other command listed below may be substituted by passing the
      letter of the command.

    * Sstep steps through the patient line by line, printing where the
      ip is and what line is to be executed Sstep waits for the user
      to type a command which it performs and then prints out again
      where sstep is executing.

    * This is a list of sstep commands:
	q, ESC, ' ' Stops sstep and returns to command level.
	b           Toggles a breakpoint at the current location.
	c           Stops sstep and continues execution.
	n	    Continues to the next source line, skipping procedure
		    calls, repeated string instructions, and software
		    interrupts. Only stops when the machine returns to
		    the right context (i.e. the stack pointer and
		    current thread are the same as they are when the
		    'n' command was given).
	l	    Goes to the next library routine.
	N	    Like n, but stops whenever the breakpoint is hit, whether
		    you're in the same frame or not.
	M   	    Goes to the next method called.  Doesn't work when the
		    method is not handled anywhere (sorry, I forgot).
        F	    Finishes the current method.
	f	    Finishes out the current stack frame.
	s, RET      Steps one source line
	S	    Skips the current source line.
	J	    Jump on a conditional jump, even when "Will not jump" 
		    appears.  This does not change the condition codes.
	g	    Executes the 'go' command with the rest of the line as
		    arguments.
	e 	    Executes a Tcl command and returns to the prompt.
	R	    References either the function to be called or the 
		    function currently executing
	h, ?        This help message.

    * Emacs will load in the correct file executing and following the
      lines where sstep is executing if its server is started and if
      ewatch is on in swat.  If ewatch is off emacs will not be updated.

    * If the current patient isn't the actual current thread, sstep
      waits for the patient to wake up before single-stepping it.

See also:
    istep, srclist, ewatch.

skip.top.step
310:Usage:
    skip [<number of instructions>]

Examples:
    "skip"  	skip the current instruction
    "skip 6"	skip the next six instructions

Synopsis:
    Skip the one or more instructions.

Notes:
    * The number of instructions argument defaults to one if not specified.

See also:
    istep, sstep, patch.

backup.top.step
334:Usage:
    backup [<number of instructions>]

Examples:
    "backup"  	backs up one instruction
    "backup 6"	backup six instructions

Synopsis:
    Backs up the instruction pointer one or more instructions.

Notes:
    * The number of instructions argument defaults to one if not specified.

See also:
    istep, sstep, patch, skip

step-until.top.step
744:Usage:
    step-until <expression> [<byteOrWord>]

Examples:
    step-until ax=0 	    	Single-step until ax is zero
    step-until ds:20h!=0 byte	Single-step until byte at ds:20h is non-zero
    step-until ds:20h!=0 word	Single-step until word at ds:20h is non-zero
    step-until c=0  	    	Single-step until the carry is clear
    step-until ax!=ax	    	Step forever :-)

Synopsis:
    Step until a condition is met

Notes:
    * <expression> is the expression to evaluate.

    * "byte" or "word" may be passed as an optional second argument to
      indicate the type of data to check against. They may be abbreviated
      as "b" and "w".

    * step-until is useful for tracking memory or register trashing bugs

See also:
    step-while

func.stack
574:Usage:
    func [<func name>]

Examples:
    "func"  	    	return the current function
    "func ObjMessage"	set the frame to the first frame for ObjMessage

Synopsis:
    Get the current function or set the frame to the given function.

Notes:
    * The func name argument is the name of a function in the stack
      frame of the current patient.  The frame is set to the first 
      occurence of the function from the top of the stack.

      If no func name argument is given then 'func' returns the 
      current function.

See also:
    where, up, down, finish.    

up.top.stack
450:Usage:
    up [<frame offset>]

Examples:
    "up"    	    move the frame one frame up the stack
    "up 4"  	    move the frame four frames up the stack

Synopsis:
    Move the frame up the stack.

Notes:
    * The frame offset argument is the number of frame to move up the
      stack.  If none is specified then the current frame is moved up
      one frame.

    * This command may be repeated by pressing <return>.

See also: 
    where, down.

down.top.stack
466:Usage:
    down [<frame offset>]

Examples:
    "down"    	    move the frame one frame down the stack
    "down 4"  	    move the frame four frames down the stack

Synopsis:
    Move the frame down the stack.

Notes:
    * The frame offset argument is the number of frame to move down the
      stack.  If none is specified then the current frame is moved down
      one frame.

    * This command may be repeated by pressing <return>.

See also: 
    where, down.

backtrace.top.stack
1354:Usage:
    backtrace -r<reg>* [-sp] [<frames to list>]

Examples:
    "backtrace"	    	print all the frames in the patient
    "backtrace -rax"	print all the frames and the contents of AX in
			each one.
    "backtrace 5"    	print the last five frames
    "bt 5"	    	same as "backtrace 5"

Synopsis:
    Print all the active stack frames for the patient.

Notes:
    * The <frames to list> argument is the number of frames to print. If not
      specified, then all are printed.

    * If a numeric argument is not passed to backtrace then it attempts to
      display method calls in the form:
    	MSG_NAME(cx, dx, bp) => className (^l####h:####h)
      Here <cx>, <dx>, and <bp> are the values passed in these registers.
      <className> is the name of the class which handled the message.
      ^l####h:####h is the address of the object (block, chunk handle)

    * If a numeric argument is passed to backtrace then the attempt to
      decode the message is not done and the single line above expands
      into:
            far ProcCallModuleRoutine(), geodesResource.asm:476
           near ObjCallMethodTable(), objectClass.asm:1224
      This is generally less useful, but sometimes it's what you need.
    
    * The -sp flag will cause Swat to print the number of bytes used by
      each stack frame.

See also:
    up, down, func, where

where.top.stack
609:Usage:
    where

Examples:
    "where"	    	prints out current thread's stack & messages pending
			in the queue that it is attached to, if any
    "w"		    	same as "where"

Synopsis:
    Prints out the state of the current thread by printing out all active stack
    frames & a list of any messages pending in its queue.

Notes:
    * This is typically the first command typed after a crash, or to get a
      better feel for "where" a thread is in the code.

    * This command is the equivalent of "backtrace" followed by "elist", with
      no arguments.

See also:
    up, down, func, backtrace, elist

finishframe.swat_prog.stack
706:Usage:
    finishframe <frame-token>

Examples:
    "finishframe $cur"	Run the machine until it returns from the frame whose
			token is in $cur

Synopsis:
    Allows the machine to continue until it has returned from a particular
    stack frame.

Notes:
    * No FULLSTOP event is dispatched when the machine actually finishes 
      executing in the given frame. The caller must dispatch it itself,
      using the "event" command.
      
    * The command returns zero if the machine finished executing in the
      given frame; non-zero if it was interrupted before that could happen.
      
    * The argument is a frame token, as returned by the "frame" command.

See also:
    event, frame, finish

finish.top.stack
501:Usage:
    finish [<frame num>]

Examples:
    "finish"	    	finish executing the current frame
    "finish 3"	    	finish executing up to the third frame

Synopsis:
    Finish the execution of a frame.

Notes:
    * The frame num argument is the number of the frame to finish.  If
      none is specified then the current frame is finished up.  The
      number to use is the number which appears in a where.

    * The machine contiues to run until the frame above is reached.

See also:
    where.

ret.stack
610:Usage:
    ret [<function name>]

Examples:
    "ret"
    "ret ObjMessage"

Synopsis:
    Return from a function and stop.

Notes:
    * The function name argument is the name of a function in the
      patient's stack after which we should stop. If none is specified 
      then Swat returns from the current function.

      The function returned from is the first frame from the top of
      the stack which calls the function (like the "finish" command).

    * This command does not force a return.  The machine continues
      until it reaches the frame above the function.

See also:
    finish, where.

abortframe.swat_prog.stack
751:Usage:
    abortframe <frame-token>

Examples:
    "abortframe $cur"	Abort all code execection through the frame whose 
			token is in $cur

Synopsis:
    Aborts code execution up through a particular stack frame.  As no code is
    executed, the registers may be in a garbaged state.

Notes:
    * No FULLSTOP event is dispatched when the machine actually aborts
      executing in the given frame. The caller must dispatch it itself,
      using the "event" command.
      
    * The command returns zero if the machine aborted executing in the
      given frame; non-zero if it was interrupted before that could happen.
      
    * The argument is a frame token, as returned by the "frame" command.

See also:
    abort, event, frame, finishframe

abort.stack
955:Usage:
    abort [<frame num>]
    abort [<function>]

Examples:
    "abort"	    	abort executing the current frame
    "abort 3"	    	abort executing up through the third frame
    "abort ObjMessage"	abort executing up through first ObjMessage

Synopsis:
    Abort code execution up through a given frame or routine.  By "abort",
    we me "do not execute".  This can be quite dangerous, as semaphores may
    not be ungrabbed, blocks not unlocked, flags not cleared, etc., leaving
    the state of objects, & if executing system code, possibly the system
    itself screwed up.  This command should only be used when the only
    alternative is to to detach (i.e. in a fatalerror) as a way to possibly
    prolong the usefullness of the debugging session.

Notes:
    * If no argument is given, code through the current frame is aborted.

    * <frame num> are the numbers that appear at the left of the backtrace.

See also:
    finish, backtrace, zap

dumpstack.stack
705:Usage:
    dumpstack [<address>] [<length>]

Examples:
    "dumpstack"	    	dump the stack at ss:sp
    "ds ds:si 10"   	dump ten words starting at ds:si
    "ds -r"		dump from the top down (in reverse order)
    "ds ss:sp+500 -50"	dump 50 works in reverse order, starting at ss:sp+500

Synopsis:
    Dump the stack and try to make some sense of it.

Notes:
    * The address argument is the address of the list of words to
      dump.  This defaults to ss:sp.

    * The length argument argument is the number of words to dump.
      This defaults to 50.

    * This dumps the stack and tries to make symbolic sense of the
      values, in terms of handles, segments, and routines.

See also:
    where.

locals.{top.print top.stack}
402:Usage:
    locals [<func>]

Examples:
    "locals"	    	Print the values of all local variables and
			arguments for the current frame.
    "locals WinOpen"	Print the names of all local variables for the
			given function. No values are printed.

Synopsis:
    Allows you to quickly find the values or names of all the local
    variables of a function or stack frame.

See also:
    print, frame info

btall.top.stack
332:Usage:
    btall

Examples:
    "btall"	Runs the backtrace command for all threads

Synopsis:
    Produces a backtrace for all existing threads, one after the other.

Notes:
    * Any argument valid for the backtrace command may be passed to btall; it
      will be passed to each invocation of "backtrace"

See also:
    backtrace

wintree.object.hierarchies
417:Usage:
    wintree <window handle> [<data field>]

Examples:
    "wintree ^hd060h"	    print a window tree starting at the handle d060h

Synopsis:
    Print a window tree starting with the root specified.

Notes:
    * The window address argument is the address to a window.

    * The data field argument is the offsest to any instance data 
      within a window (like W_ptrFlags).

See also:
    vistree, gentree.

zap.obscure
600:Usage:
    FEATURE IN PROGRESS -- Not yet ready for prime time
    zap [<patient>]

Examples:
    "zap"			zaps last zapped or run patient
    "zap uki"			zaps Uki

Synopsis:
    "Zaps" an application as best possible.

Notes:

    * If no argument is given, zaps the last patient passed to this command or
      started up using "run"

    * If the machine stops for any other reason other than the call's
      completion, you are left wherever the machine stopped.

    * This function is only "reasonably" robust at this time.  Performs well
      at Idle or after a Ctrl-C.

See also:
	send, run

test.obscure
1:

ptimer.system.timer
369:Usage:
    ptimer <handle>

Examples:
    "ptimer bx"	    	Print out information about the timer whose handle
    	    	    	is in BX

Synopsis:
    Prints out information about a timer registered with the system: when it
    will fire, what it will do when it fires, etc.

Notes:
    * <handle> may be a variable, register, or constant.

See also:
    twalk, phandle.

twalk.system.timer
355:Usage:
    twalk [flags]

Examples:
    "twalk" 	    	print all the timers in the system.
    "twalk -o ui" 	print all the timers in the system for the ui thread.
    "twalk -a"	 	print all the timers with the "real" data for the
			time for time remaining rather than maintaining a
			total.

Synopsis:
    List all the timers currently active in GEOS.


call-patient.swat_prog.call
1080:Usage:
    call-patient <function> ((<reg>|push) <value>)*

Examples:
    "call-patient MemLock bx $h"        Locks down the block whose handle ID 
					is in $h.

Synopsis:
    This is a utility routine, not intended for use from the command line,
    that will call a routine in the PC after setting registers to or pushing
    certain values.

Notes:
    * Returns non-zero if the call completed successfully.
    
    * If the call is successful, the registers reflect the state of the machine
      upon return from the called routine. The previous machine state is
      preserved and can be retrieved, by invoking restore-state, or thrown
      away, by invoking discard-state. The caller *must* invoke one of these
      to clean up.

    * Arguments after <function> are as for "call".

    * If the called routine is in movable memory, this will lock the containing
      block down before issuing the call, as you'd expect.

    * Calling anything that makes message calls while on the geos:0 thread
      is a hazardous undertaking at best.
      
See also:
    call.

call.top.running
1386:Usage:
    call <function> [<function args>]

Examples:
    "call MyFunc"
    "call MyDraw ax 1 bx 1 cx 10h dx 10h"
    "call FindArea box.bottom 5 box.right 5 push box"'

Synopsis:
    Call a function in the current thread.

Notes:
    * The function argument is the function to call. If it is a NEAR
      function, the thread must already be executing in the function's
      segment.

    * The function arguments are in pairs <variable/register> <value>.
      These pairs are passed to the "assign" command.  As a special
      case, if the variable is "push", the value (a word) is pushed
      onto the stack and is popped when the call finishes (if it
      completes successfully).

    * All current registers are preserved and restored when the call
      is complete.  Variables are not.

    * Once the call has completed, you are left in a sub-interpreter
      to examine the state of the machine. Type "break" to get back to
      the top level.

    * If the machine stops for any reason other than the call's
      completion, the saved register state is discarded and you are
      left wherever the machine stopped. You will not be able to get a
      stack trace above the called function, but if the call
      eventually completes, and no registers have actually been
      modified, things will get back on track ok.

See also:
    assign, call-patient, patch.

exit-thread.thread
491:Usage:
    exit-thread [<exit code>]

Examples:
    "exit-thread"           exit the current thread, returning 0 to its parent
    "exit-thread 1"         exit the current thread, returning 1 to its parent

Synopsis:
    Exit the current thread.

Notes:
    * The exit code argument is the status to return to the current thread's
      parent, which defaults to 0.

    * Do not invoke this function for an event-driven thread; send it a
      MSG_META_DETACH instead.

See also:
    quit.

run.top.running
1417:Usage:
    run [[-enp] <app>]

Examples:
    "run uki"                   run EC Uki if running EC code
				run non-EC Uki if running non-EC code
    "run -e uki"                run EC Uki
    "run -n uki"                run non-EC Uki
    "run -p games\ukiec.geo"	run games\ukiec.geo
    "run"                       run 'patient-default'

Synopsis:
    "Runs" an application by loading it via a call to UserLoadApplication &
    stopping when the app reaches the GenProcess handler for MSG_META_ATTACH.
    Return patient created, if any (in the example cases above, this would
    be "uki").

Notes:
    * <app>     either the app's permanent name or the path of the app relative
		to SP_APPLICATION

      -e        run EC version of <app>
      -n        run non-EC version of <app>
      -p        <app> argument is the path of app relative to SP_APPLICATION

    * If no argument is given, runs the 'patient-default'.

    * May be used even if stopped inside the loader, in which case GEOS will
      be allowed to continue starting up and the specified app will run
      after GEOS is Idle.

    * If the machine stops for any reason other than the call's completion,
      you are left wherever the machine stopped.

    * This function is only "reasonably" robust at this time.  Performs well
      at Idle or after a Ctrl-C.

    * For 2.X versions only

See also:
    spawn, switch, send, patient-default

exit.top.running
421:Usage:
    exit <patient>

Examples:
    "exit faxmon"	Causes the faxmon application to exit

Synopsis:
    Sends messages required to make an application quit.

Notes:
    * You cannot do this when you're stopped at FatalError, as this command
      will wait until the machine is idle before attempting to send the
      MSG_META_QUIT; continuing from FatalError will cause the system to
      exit.

See also:
    run

showcalls.profile
2149:Usage:
    showcalls [-<flags> [<args>]]

Examples:
    "showcalls -o"  	show all calls using ObjMessage and ObjCall*
    "showcalls -ml" 	show all calls changing global and local memory
    "showcalls"	    	stop showing any calls

Synopsis:
    Display calls to various parts of PC/GEOS.

Notes:
    * The flags argument determines the types of calls displayed.
      Multiple flags must all be specified in the first argument ("showcalls
      -vl", not "showcalls -v -l"). If no flags are passed then showcalls stops
      watching whatever it was watching before.  The flags may be any of the
      following:

        p  Modify all other flags to work for the current patient only

	a  Show attach/detach/state-save/restore/lazarus, etc.
	b  Monitors vis builds
	d  Show dispatching of threads
	e  Show all exclusive grabs & releases
	f  Show certain file operations (open, read, write, and position)
	F  Show file-change notifications produced by the system.
	g  Show geometry manager resizing things (all sizes in hex)
	G  Show GrCreateState and GrDestroyState
	h  Show all hierarchical exclusive grabs & releases
        H  Show heap space allocation (using gp heapspace values, not actual
	   allocation values)
	i  Show call far calls made to movable routines.
	I  Show invalidation mechanism at work
	L  Show Library loading calls
	l  Show local memory create, destroy, rellocate
	m  Show global memory alloc, free, realloc
	N  Show navigation calls (between fields, and between windows)
	o  Show ObjMessage and ObjCallXXX
	r  Show calls between resources (args: <resource handle>)
	R  Show RTCM activity (args: <verbose>)
	s  Monitors shutdown: MSG_META_DETACH, MSG_META_DETACH_COMPLETE,
	   MSG_META_ACK, MSG_META_DETACH_ABORT
	S  Show stack borrowing activity
	t  Shows clipboard activity
	T  Show text-object related information (currently cursor changes)
	w  Show WinOpen, WinClose, WinMoveResize, WinChangePriority
	v  Show video driver calls
	V  Show loading and unloading of resources to and from state files 
		during shutdown

    * The args argument is used to pass values for some of options.

See also:
    mwatch, objwatch.

pias.{top.print}
109:Usage:
	pias [<flags>]

	  -a print out attribute info

Synopsis:
	Prints out contents of the IAS database.


x11-get-def-selection.swat_prog.window
56:Returns the PRIMARY or CUT_BUFFER0 selection as a string
ps.{system.thread thread patient}
606:Usage:
    ps [<flags>]

Examples:
    "ps -t" 	    list all threads in GEOS.

Synopsis:
    Print out GEOS's system status.

Notes:
    * The flags argument may be one of the following:
    	-t  Prints out info on all threads. May be followed by a list of
    	    patients whose threads are to be displayed.
    	-p  Prints out info on all patients. May be followed by a list of
    	    patients to be displayed.
        -h  Prints out info on all handles. May be followed by a list of
    	    patients whose handles are to be displayed.

      The default is '-p'.

See also:
    switch, sym-default.

print-rows.lib_app_driver.spreadsheet
84:Usage:
    print-rows <addr>
Synopsis:
    Prints out a spreadsheet row array list.

pssheet.lib_app_driver.spreadsheet
1199:Usage:
    pssheet [-isSfrcvd] ADDR
    	-i: address is a pointer to the instance data
	-s: print out style attribute structures
    	-f: print out information about associated file
    	-r: print out row heights
    	-c: print out column widths
    	-v: print out visual and selection information
    	-d: print out document information
    	-R: print out recalculation information
    	-N: print out spreadsheet name information

Examples:
    pssheet -s ^l3ce0h:001eh	- print style attributes
    pssheet -f -i 94e5h:0057h	- print file info from instance data

Synopsis:
    Prints out information about a spreadsheet object

Notes:
    If you are in the middle of debugging a spreadsheet routine and have
    a pointer to the Spreadsheet instance, the "-i" flag can be used to
    specify the object using that pointer.

    If you simply have the OD of the spreadsheet object, use that.

    To find the OD of a spreadsheet object in GeoCalc, you can move the
    mouse over the view it is in, and type "vistree [content]", and one
    of the objects in the tree should be a spreadsheet object.

    Alternatively, you can do:
    	pssheet <flags> [targetobj]

See also:
    content, targetobj

pcelldeps.lib_app_driver.spreadsheet
485:Usage:
    pcelldeps <filehan> [<addr>]

Examples:
    pcelldeps	4be0h *es:di	- print dependencies of cell in file 4be0h

Synopsis:
    Prints dependencies for a cell in the spreadsheet

Notes:
    To find the OD of a spreadsheet object in GeoCalc, you can move the
    mouse over the view it is in, and type "vistree [content]", and one
    of the objects in the tree should be a spreadsheet object.

    If no address is given, *es:di is used.

See also:
    (mal)content, pcelldata

pcelldata.lib_app_driver.spreadsheet
443:Usage:
    pcelldata [<addr>]

Examples:
    pcelldata	*es:di	- print cell data for cell at *es:di

Synopsis:
    Prints data for a spreadsheet data

Notes:
    To find the OD of a spreadsheet object in GeoCalc, you can move the
    mouse over the view it is in, and type "vistree [content]", and one
    of the objects in the tree should be a spreadsheet object.

    If no address is given, *es:di is used.

See also:
    content, pcelldeps

print-eval-dep-list.lib_app_driver.spreadsheet
207:Usage:
    print-eval-dep-list [<addr>]

Examples:
    print-eval-dep-list	es:0	- print dependency list at es:0

Synopsis:
    Prints a dependency list used for evalulation

See also:
    content, pcelldeps

ibrkPageLen.{swat_variable}
72:Number of instructions to skip when using the ^D and ^U commands of ibrk
ibrk.breakpoint
891:Set a breakpoint interactively. At each instruction, you have several options:
    q	Quit back to the command level.
    n	Go to next instruction (this also happens if you just hit
	return).
    p   Go to previous instruction.
    P	Look for a different previous instruction.
    ^D	Go down a "page" of instructions. The size of the page is controlled
    	by the global variable ibrkPageLen. It defaults to 10.
    ^U	Go up a "page" of instructions.
    b	Set an unconditional breakpoint at the current instruction and
	go back to command level.
    a  	Like 'b', but the breakpoint is set for all patients.
    t  	Like 'b', except the breakpoint is temporary and will be
    	removed the next time the machine stops.
    B	Like 'b', but can be followed by a command to execute when the
	breakpoint is hit.
    A	Like 'B', but for all patients.
    T	Like 'B', but breakpoint is temporary.
stop.{top.breakpoint}
1409:Usage:
    stop in <class>::<message> [if <expr>]
    stop in <procedure> [if <expr>]
    stop in <address-history token> [if <expr>]
    stop at [<file>:]<line> [if <expr>]
    stop <address> [if <expr>]

Examples:
    "stop in main"
    "stop in @3"
    "stop at /staff/pcgeos/Loader/main.asm:36 if {joe_local==22}"
    "stop at 25"
    "stop MemAlloc+3 if {ax==3}"

Synopsis:
    Specify a place and condition at which the machine should stop executing.
    This command is intended primarily for setting breakpoints when debugging
    a geode created in C or another high-level language, but may also be used
    when debugging assembly-language geodes.

Notes:
    * "stop in" will set a breakpoint at the beginning of a procedure, immed-
       iately after the procedure's stack frame has been set up.

    * For convenience, "stop in" also allows address-history tokens.  This is
      useful when used in conjunction with the "methods" command.

    * "stop at" will set a breakpoint at the first instruction of the given
      source line. If no <file> is specified, the source file for the current
      stack frame is used.

    * If a condition is specified, by means of an "if <expr>" clause,
      you should enclose the expression in {}'s to prevent any nested commands,
      such as a "value fetch" command, from being evaluated until the break-
      point is hit.

See also:
    brk, ibrk

elist.{patient.event object.event}
612:Usage:
    elist [<patient>]

Examples:
    "elist" 	    list the events for the current thread and patient 
    "elist ui"	    list the events for the last thread of the ui patient
    "elist :1"	    list the events for the first thread of the current patient
    "elist geos:2"  list the events for the second thread of the geos patient

Synopsis:
    Display all events pending for a patient.

Notes:
    * The patient argument is of the form 'patient:thread'.  Each part of 
      the patient name is optional, and if nothing is specified then the 
      current patient is listed.

See also:
    showcalls.

eqlist.{patient.event object.event}
294:Usage:
    eqlist <queue handle> <name>

Examples:
    "eqlist 8320 geos:2"   show the event list for geos:2

Synopsis:
    Display all events in a queue.

Notes:
    * The queue handle argument is the handle to a queue.

    * The name argument is the name of the queue.

See also:
    elist.

pevent.{system.event patient.event object.event}
189:Usage:
    pevent <handle>

Examples:
    "pevent 39a0h"  print event with handle 39a0h

Synopsis:
    Print an event given its handle

Notes:

See also:
    elist, eqlist, eqfind, erfind


eqfind.system.event
249:Usage:
    eqfind

Examples:
    "eqfind" 	    list all event queues in the system
    "eqfind -p"	    list and print all event queues in the system

Synopsis:
    Display all event queues in the system

Notes:

See also:
    elist, eqlist, erfind


erfind.system.event
415:Usage:
    erfind

Examples:
    "erfind" 	    list all recorded event handles in the system
    "erfind -p"	    list and print all recorded event handles in the system

Synopsis:
    Display all record event handles in the system.  These are events that
    have been recorded but not necessarily sent anywhere, so they will not
    appear in the queue of any thread.

Notes:

See also:
    elist, eqlist, eqfind


printObjLongClassName.swat_variable.output
205:Usage:
    var printObjLongClassName (0|1)

Examples:
    "var printObjLongClassName 1"    Enables long class name printing

Notes:
    * The default value for this variable is 0.

See:
    See long-class

obj-foreach-class.swat_prog.ui
882:Usage:
    obj-foreach-class <function> <object> [<args>]

Examples:
    "obj-foreach-class foo-callback ^lbx:si"	calls foo-callback with each
						class in turn to which the
						object ^lbx:si belongs.

Synopsis:
    Processes all the classes to which an object belongs, calling a callback
    procedure for each class symbol in turn.

Notes:
    * <function> is called with the symbol for the current class as its first
      argument, <object> as its second, and the arguments that follow <object> 
      as its third and subsequent arguments.

    * <function> should return an empty string to continue up the class tree.
    
    * obj-foreach-class returns whatever <function> returned, if it halted
      processing before the root of the class tree was reached. It returns
      the empty string if <function> never returned a non-empty result.

See also:
    obj-class.

map-method.object.message
1229:Usage:
    map-method <number> <object>
    map-method <number> <class-name> [<object>]

Examples:
    "map-method ax ^lbx:si" 	Prints the name of the message in ax, from
    	    	    	    	the object at ^lbx:si's perspective.
    "map-method 293 GenClass"	Prints the name of message number 293 from
    	    	    	    	GenClass's perspective.

Synopsis:
    Maps a message number to a human-readable message name, returning that
    name. This command is useful both for the user and for a Tcl procedure.

Notes:
    * When called from a Tcl procedure, the <class-name> argument should be the
      fullname of the class symbol (usually obtained with the obj-class
      function), and <object> should be the address of the object for which
      the mapping is to take place. If no <object> argument is provided,
      map-method will be unable to resolve messages defined by one of the
      object's superclasses that lies beyond a variant superclass.

    * If no name can be found, the message number, in decimal, is returned.
    
    * The result is simply returned, not echoed. You will need to echo the
      result yourself if you call this function from anywhere but the command
      line.

See also:
    obj-class

print-obj-and-method.swat_prog.ui
1263:Usage:
    print-obj-and-method <handle> <chunk> [<flags> [<message> [<cx> [<dx> [<bp> [<class> ]]]]]]

Examples:
    "print-obj-and-method [read-reg bx] [read-reg si]"
    	    	    	    	Prints a description of the object ^lbx:si,
				vith value stored and a hex representation.
    "print-obj-and-method $h $c -nhl $m [read-reg cx] [read-reg dx] [read-reg bp]"
    	    	    	    	Prints a description of the object ^l$h:$c,
				the name of the message whose number is in $m,
				three words of data, a label, hex
				representation, but no CR.

Synopsis:
    Prints a nice looking representation of an object, with option message,
    register data, label, hex address, & carriage return.  The class indication
    may also be overriden.

Notes:
    * You may specify anywhere from 0 to 5 arguments after the flags.
      These are interpreted as the value of the message, the registers CX, DX
      and BP, and the symbol token of the class to print, respectively.

    * All arguments must be integers, as this is expected to be called by
      another procedure, not by the user, so the extra time required to
      call getvalue would normally be wasted.  (The user should call pobj/gup/
      etc. to see this type of printout)

See also:
    map-method

long-class.swat_prog.ui
788:Usage:
    long-class [on|off]
     
Synopsis:
    Turns on or off printing out all class names for an object in
    print-obj-and-method (used in pobject, vup, vistree, etc...).
    
Examples:
    "long-class"         Show if long class name printint is currently enabled
    "long-class on"      Enables long class name printing
    "long-class off"     Disables long class name printing

Notes:
    When enabled, print-obj-and-method displays a string containing the class
    names for the furthest subclass for each master class.  For example, on
    a GenPrimary object, the resulting string is
    "GenPrimaryClass/OLBaseWinClass".  This is most useful for debugging or
    trying to understand what Gen objects build out to in the Specific UI.

See also:
    print-obj-and-method

fetch-optr.swat_prog.ui
1047:Usage:
    fetch-optr <handle> <offset>

Examples:
    "fetch-optr $h $o.GI_comp.CP_firstChild"
    	    	    	    Fetch the optr from the GI_comp.CP_firstChild
			    field of the object at ^h$h:$o.
    	    	    	    	

Synopsis:
    Extracts an optr from memory, coping with the data in the block that
    holds the optr not having been relocated yet.

Notes:
    * <offset> is an actual offset, not a chunk handle, while <handle> is
      a handle ID, not a handle token.

    * Returns a two-list {<handle> <chunk>}, where <handle> is the handle
      ID from the optr, and <chunk> is the chunk handle (low word) from the
      optr.

    * We decide whether to relocate the optr ourselves based on
      the LMF_RELOCATED bit in the LMBH_flags field of the block's
      header. There are times, e.g. during the call to MSG_META_RELOCATE for
      an object, when this bit doesn't accurately reflect the state of the
      class pointer and we will return an error when we should not.

See also:
    comma-separated list of related commands

obj-class.swat_prog.ui
846:Usage:
    obj-class <object>

Examples:
    "var cs [obj-class ^lbx:si]"	Store the symbol token for the class
					of the object ^lbx:si in the variable
					$cs.

Synopsis:
    Figures out the class of an object, coping with unrelocated object
    blocks and the like.

Notes:
    * The value return is a symbol token, as one would pass to the "symbol"
      command. Using "symbol name" or "symbol fullname" you can obtain the
      actual class name.

    * We decide whether to relocate the class pointer ourselves based on
      the LMF_RELOCATED bit in the LMBH_flags field of the object block's
      header. There are times, e.g. during the call to MSG_META_RELOCATE for
      an object, when this bit doesn't accurately reflect the state of the
      class pointer and we will return an error when we should not.

See also:
    symbol.

print-method-table.object.message
714:Usage:
    print-method-table <class> [method_number_or_name_pattern]

Examples:
    "print-method-table ui::VisClass"	Print out the messages handled by
					VisClass and the methods that handle
					them.
    print-method-table GenApplicationClass MSG_META_ICAP_*
    	    	    	    	    	Prints out all methods for messages
    	    	    	    	    	whose name starts out MSG_META_ICAP_
    print-method-table GenApplicatoinClass 987
    	    	    	    	    	Prints out the methods handler for
    	    	    	    	    	message 987 for GenApplicationClass
    	    	    	    	    	if there is one
Synopsis:
    Prints out the table for a class that maps messages to methods.

Notes:

See also:
    obj-find-method

omfq.object.message
927:Usage:
    omfq <message> <object> <args>*

Examples:
    "omfq MSG_META_QUIT *HelloApp"	Sends MSG_META_QUIT to the *HelloApp
					object.

Synopsis:
    Forces a message for an object onto its event queue.

Notes:
    * This command calls ObjMessage, passing it di=mask MF_FORCE_QUEUE.
    
    * <args> is the set of additional parameters to pass to ObjMessage. It
      consists of <variable/register> <value> pairs, which are passed to the
      "assign" command. As a special case, if the variable is "push", the
      value (a word) is pushed onto the stack and is popped when the message
      has been queued.

    * The registers active before you issued this command are always restored,
      regardless of whether the call to ObjMessage completes successfully.
      This is in contrast to the "call" command, which leaves you where ever
      the machine stopped with the previous state lost.

See also:
    call.

obj-find-method.{object.message swat_prog.ui}
876:Usage:
    obj-find-method <message> <object/class> [<wantsym>]

Examples:
    "obj-find-method MSG_META_DETACH ^lbx:si"
    	    	    	    Locates the method that would be executed if you
			    were to send MSG_META_DETACH to the object at
			    ^lbx:si
    "obj-find-method 4 VisCompClass 1"
    	    	    	    Returns the symbol token of the method that fields
			    message number 4 for VisCompClass.

Synopsis:
    Finds the method that will be executed if a particular message is sent
    to a particular object or class.

Notes:
    * If this encounters a variant class on its way up the class tree, and
      you've given only an object class, or an object that's not been built
      past that variant, it will indicate there's no method for the message,
      even if there's a default method for the message in MetaClass.

See also:
    obj-foreach-class, stop.

pappcache.system.misc
486:Usage:
    pappcache

Examples:
    "pappcache"	    print out current state of the app-cache

Synopsis:
    Prints out the current state of the system application cache, for systems
    operating in transparent launch mode.  Specifically, prints out:

	Applications in the cache (First choice for detaching)
	Top full-screen App (Not detached except by another full screen app)
	Desk accessories (detached only as last resort)
	Application geodes in the process of detaching

See also:

pflags.{flag print}
86:Usage:
   pflags

Synopsis:
   Prints the current flags.

See Also:
    setcc, getcc.

flagwin.{top.window flag}
122:Usage:
    flagwin
    flagwin off

Synopsis:
    Turns on or off the continuous display of flags.

See Also:
    pflags.

int.interrupt
1754:Usage:
    int [<int level> <state>]

Examples:
    "int"   	    	report the interrupt statuses
    "int 1:1 on"    	allow keyboard interrupt while in swat

Synopsis:
    Set or print the state of the two interrupt controllers for when
    then machine is stopped in Swat.

Notes:
    * If no arguments are given, the current state is printed.

    * The int level argument is specified by their names or their
      numbers with the form <controller>:<number> - <controller> is
      either 1 or 2, and <number> ranges from 0 to 7. The interrupts
      and their numbers are:

    	Timer  	 1:0	System timer. Probably dangerous to enable.
    	Keybd	 1:1 	Keyboard input.
    	Slave  	 1:2 	This is how devices on controller 2 interrupt.
    	    	    	Disabling this disables them all.
    	Com2   	 1:3 	This is the port usually used by Swat, so it 
    	    	    	can't be disabled.
        Com1   	 1:4 	The other serial port -- usually the mouse.
        LPT2   	 1:5 	The second parallel port
        Floppy 	 1:6 	Floppy-disk drive
        LPT1   	 1:7 	First parallel port
        Clock  	 2:0 	Real-time clock
        Net	 2:1 	Network interfaces (?)
        FPA	 2:5 	Coprocessor
        HardDisk 2:6 	Hard-disk drive

    * For the Zoomer, the interrupt names are different:
    	Timer0 	 1:0 	Pen debounce timer
	Timer1	 1:1	Interval timer
	Timer2	 1:2	Spare timer
	Button	 1:3	Fire/directional buttons
	Serial	 1:4	Serial port
	Alarm	 1:5	Real-time Clock alarm
	RTC 	 1:6	Real-time Clock timer
	Pen 	 1:7	Digitizer
	PCMCIA	 2:0	PCMCIA device
	Sound	 2:1	Sound DAC
	Power	 2:2	Power switch changed
	Locked	 2:3	PCMCIA lock switch on
	Battery	 2:4	Battery low
	Protect	 2:5	Special protect

    * The state argument is either 'on' or 'off'.


intr.interrupt
351:Catch, ignore or deliver an interrupt on the PC. First argument is the
interrupt number. Optional second argument is "catch" to catch delivery of the
interrupt, "ignore" to ignore the delivery, or "send" to send the interrupt
(the machine will keep going once the interrupt has been handled). If no second
argument is given, the interrupt is delivered
systemobj.object.address
470:Usage:
    systemobj

Examples:
    "gentree [systemobj]"   	print the generic tree starting at the 
    	    	    	    	system's root
    "pobject [systemobj]"   	print the system object

Synopsis:
    Prints out the address of the uiSystemObj, which is the top level of the 
    generic tree.

Notes:
    * This command is normally used with gentree as shown above to print out 
      the whole generic tree starting from the top.

See also:
    gentree, impliedgrab.

flowobj.object.address
266:Usage:
    flowobj

Examples:
    "pobject [flowobj]"	    print out the flow object

Synopsis:
    Prints out address of the uiFlowObj, which is the object which 
    grabs the mouse.

Notes:
    * This command is normally used with pobject to print out the object.

impliedwin.object.address
411:Usage:
    impliedwin

Examples:
    "wintree [impliedwin]"  	print the window tree of the window under
    	    	    	    	the mouse
Synopsis:
    Print the address of the current implied window (the window under the
    mouse).

Notes:
    * Note that the handle is returned as ^h<handle>.

    * This command is normally used with "wintree".  One may also use
      "print" if one properly casts the handle.

impliedgrab.object.address
458:Usage:
    impliedgrab

Examples:
    "gentree [impliedgrab]" 	print the generic tree under the mouse

Synopsis:
    Print the address of the current implied grab, which is the windowed screen
    object under the mouse.

Notes:
    * This command is normally used with gentree to get the generic tree of
      an application by placing the mouse on application's window and
      issuing the command in the above example.

See also:
    systemobj, gentree.

content.{top.object object.address}
605:Usage:
    content

Examples:
    "vistree [content]" 	print the visual tree of the content of the
				view under the mouse.

Synopsis:
    Print the address of the content under the view with the current implied 
    grab.   Only works for V2.0 or higher.

Notes:
    * This command is normally used with vistree to get the visual tree of
      a content by placing the mouse on the content's view window and
      issuing the command in the example.

    * If the pointer is not over a GenView object, this is the same as the
      "impliedgrab" command.

See also:
    systemobj, gentree, impliedgrab.

appobj.object.address
279:Usage:
    appobj [<patient>]

Examples:
    "pobj [appobj draw]" 	prints the GenApplication object for draw

Synopsis:
    Returns the address of the GenApplication object for the given patient,
    or the current one if you give no patient.

Notes:

See also:
    impliedgrab.

procobj.object.address
281:Usage:
    procobj [<patient>]

Examples:
    "methods [procobj grobj]" 	Look at the methods defined in draw's process

Synopsis:
    Returns the address of GenProcess object for the given patient, or the
    current one if you give no patient.

Notes:

See also:
    impliedgrab.

addr-with-obj-flag.swat_prog.object
1490:Usage:
    addr-with-obj-flag <address>

Examples:
    "var addr [addr-with-obj-flag $addr]"	If $addr is "-i", returns
						the address of the current
						implied grab.

Synopsis:
    This is a utility routine that can be used by any command that
    deals with objects where the user may reasonably want to operate on the
    leaf object of one of the hierarchies, or the windowed object under the
    mouse. It can be given one of a set of flags that indicate where to find
    the address of the object on which to operate.

Notes:
    * Special values accepted for <address>:
    	Value	Returns address expresion for...
	-----	-----------------------------------------------------------
    	-a  	the current patient's application object
	-p	the current patient's process
    	-i  	the current "implied grab": the windowed object over which
		the mouse is currently located.
    	-f  	the leaf of the keyboard-focus hierarchy
	-t  	the leaf of the target hierarchy
	-m  	the leaf of the model hierarchy
	-c  	the content for the view over which the mouse is currently
		located
    	-kg  	the leaf of the keyboard-grab hierarchy
	-mg 	the leaf of the mouse-grab hierarchy

    * If <address> is empty, this will return the contents of the local
      variable "oself" within the current frame, if it has one, or *ds:si

    * If <address> isn't one of the above, this just returns <address>.

See also:
    impliedgrab, content, focusobj, targetobj, modelobj, keyboardobj, mouseobj.

screenwin.object.address
94:Usage:
    screenwin

Synopsis:
    Print the address of the current top-most screen window.


fieldwin.object.address
92:Usage:
    fieldwin

Synopsis:
    Print the address of the current top-most field window.


pgen.object.print.fast
611:Usage:
    pgen <element> [<object>]

Examples:
    "pgen GI_states @65"	print the states of object 65
    "pgen GI_visMoniker"	print the object at *ds:si
    "pgen GI_states -i"   	print the states of the object at the 
    	    	    	    	implied grab

Synopsis:
    Print an element of the generic instance data.

Notes:
    * The element argument specifies which element in the object to print

    * The object argument is the address to the object to print out.
      It defaults to *ds:si and is optional.  The '-i' flag for an
      implied grab may be used.

See also:
    gentree, gup, pobject, pvis.

pvis.{object.print.fast object.vis}
632:Usage:
    pvis <element> [<object>]

Examples:
    "pvis VI_bounds @65"    print the bounds of object 65
    "pvis VI_optFlags"	    print the flags of the object at *ds:si
    "pvis VI_attrs -i" 	    print the attributes of the object at the 
    	    	    	    implied grab

Synopsis:
    Print an element of the visual instance data.

Notes:
    * The element argument specifies which element in the object to print

    * The object argument is the address to the object to print out.
      It defaults to *ds:si and is optional.  The '-i' flag for an
      implied grab may be used.

See also:
    vistree, vup, pobject, pgen.

pvsize.object.vis
403:Usage:
    pvsize [<object>]

Examples:
    "pvsize"   	    print the dimensions of the visual object at *ds:si

Synopsis:
    Print out the dimensions of a visual object.

Notes:
    * The object argument is the address to the object to print out.
      It defaults to *ds:si and is optional.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

sbwalk.{patient.handle system.misc}
343:Usage:
    sbwalk [<patient>]

Examples:
    "sbwalk"	    	list the saved blocks of the current patient.
    "sbwalk geos"   	list the saved blocks of the geos patient.

Synopsis:
    List all the saved blocks in a patient.

Notes:
    * The patient argument is any GEOS patient.  If none is specified
      then the current patient is used. 

dbrk.top.breakpoint
2745:Usage:
    dbrk <addr> <num> [<command>|default]
    dbrk set <break> <num> [<command>|default]
    dbrk list [<break>]
    dbrk {clear,delete} <break>
    dbrk cur <break> <num>
    dbrk max <break> <num>
    dbrk cmd <break> [<command>]
    dbrk reset <break>
    dbrk enable <break>
    dbrk disable <break>

Examples:
    "dbrk ObjMessage 30"		Break at the 30th call to ObjMessage
    "dbrk set 5 30"			Break after hitting brk5 30 times.
    "dbrk set brk3 10 default"		Break after hitting brk3 10 times;
					Each time brk3 is hit, perform the
					default command.
    "dbrk cmd brk2 {echo foo}"		Echo a string whenever brk2 is hit.
    "dbrk cmd brk2 default"		Use the default command for brk2.
    "dbrk disable 2"			Stop counting brk2; it will now always
					be taken.

Synopsis:
    Front-end command to "brk cmd".  Delay taking a breakpoint until it has
    been hit a specified number of times.

Notes:
    * <break> may be a number, or a full breakpoint token (brk<n>)
      <num> is a number; and <command> is a string that will be evaluated.
      If <command> may also be the string "default", in which case a default
      command will be used.  The first argument to dbrk may be abbreviated;
      only the first 3 chars are significant.

    * Deleting a breakpoint with "brk del" removes the dbrk also.

    * With the exception of brk, all the commands that take <break> must be
      given a breakpoint that has been delayed.  The "dbrk list" command
      will show these.

    * "dbrk list" will show how many times a breakpoint has been hit,
      the maximum number of times to skip the breakpoint, and the command to
      evaluate whenever the breakpoint is hit.  If no breakpoint is passed,
      the status of all dbrks will be shown.

    * "dbrk clear" and "dbrk delete" are synonyms.  These commands will
      cause the delayed breakpoint to become normal again, and clear out
      the global variables used to store the dbrk's state:
          brkNcur, brkNmax, brkNcmd
      where N is a number.

    * "dbrk cur", "dbrk max", and "dbrk cmd" set the current count, the
      maximum count, and the command of the specified breakpoint
      repsectively.

    * "dbrk reset <break>" is a quick way of saying "dbrk cur <break> 0"

    * "dbrk enable" and "dbrk disable" are used to enable and disable a
      dbrk.  Disabled dbrks will always be taken, and their counter will
      not be incremented.

    * Since this command is just a front-end to brk cmd, you can use
      dbrk and brk cond to create more complex breakpoints; for instance,
      you can "mwatch MSG_VIS_DRAW", then "dbrk set <brk> 30 print-method"
      to break after MSG_VIS_DRAW has been received 30 times.

See also:
    brk, cbrk.

focus.{top.object object.hierarchies}
991:Usage:
    focus [<object>]

Examples:
    "focus" 	    	print focus hierarchy from the system object down
    "focus -i"	    	print focus hierarchy from implied grab down
    "focus ^l4e10h:20h"	print focus hierarchy from ^l4e10h:20h down
    "focus [content]"	print focus hierarchy from content under mouse

Synopsis:
    Prints the focus hierarchy below an object.

Notes:
    * If no argument is specified, the system object is used.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

    * Remember that the object you start from may have the focus
      within its part of the hierarchy, but still not have the focus
      because something in a different part of the tree has it.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    target, model, mouse, keyboard

target.{top.object object.hierarchies}
987:Usage:
    target [<object>]

Examples:
    "target"		print target hierarchy from the system object down
    "target -i"		print target hierarchy from implied grab down
    "target -c"		print target hierarchy from content under mouse
    "target ^l4e10h:20h" print target hierarchy from ^l4e10h:20h down

Synopsis:
    Prints the target hierarchy below an object.

Notes:
    * If no argument is specified, the system object is used.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

    * Remember that the object you start from may have the target
      within its part of the hierarchy, but still not have the target
      because something in a different part of the tree has it.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    focus, model, mouse, keyboard

model.object.hierarchies
930:Usage:
    model [<object>]

Examples:
    "model" 	    	print model hierarchy from system object down
    "model -i"	    	print model hierarchy from implied grab down
    "model ^l4e10h:20h" print model hierarchy from ^l4e10h:20h down

Synopsis:
    Prints the model hierarchy below an object.

Notes:
    * If no object is specified, the system object is used.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

    * Remember that the object you start from may have the model exclusive
      within its part of the hierarchy, but still not have the exclusive
      because something in a different part of the tree has it.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    target, focus, mouse, keyboard

fullscreen.object.hierarchies
789:Usage:
    fullscreen [<object>]

Examples:
    "fullscreen" 	print full screen  hierarchy from system object down
    "fullscreen ^l4e10h:20h" print full screen  hierarchy from ^l4e10h:20h down

Synopsis:
    Prints the full screen below an object.

Notes:
    * If no object is specified, the system object is used.

    * Remember that the object you start from may have the full screen exclusive
      within its part of the hierarchy, but still not have the exclusive
      because something in a different part of the tree has it.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    target, focus, model, mouse, keyboard

mouse.object.hierarchies
742:Usage:
    mouse [<object>]

Examples:
    "mouse" 	    	print mouse hierarchy from flow object down
    "mouse ^l4e10h:20h" print mouse hierarchy from ^l4e10h:20h down

Synopsis:
    Prints the mouse hierarchy below an object.

Notes:
    * The mouse button must be down, otherwise the hierarchy stops at the
      flow object.

    * If no object is specified, the flow object is used.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    focus, target, model, keyboard

keyboard.object.hierarchies
673:Usage:
    keyboard [<object>]

Examples:
    "keyboard" 	    	    print keyboard hierarchy from flow object down
    "keyboard ^l4e10h:20h"  print keyboard hierarchy from ^l4e10h:20h down

Synopsis:
    Prints the keyboard grab hierarchy below an object.

Notes:
    * If no object is specified, the flow object is used.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

    * The variable "printNamesInObjTrees" can be used to print out the actual
      app-defined labels for the objects, instead of the class, where available.
      This variable defaults to false.

See also:
    focus, target, model, mouse

is-obj-in-class.swat_prog.object
460:Usage:
    is-obj-in-class <object> <class>

Examples:
    "is-obj-in-class ^l4e10h:1eh GenPrimaryClass" see if ^l4e10h:1eh is in
    	    	    	    	    	    	    	GenPrimaryClass

Synopsis:
    Returns whether a given object in in the specified class

Notes:
    * Returns 1 if the object is in the specified class, 0 otherwise.

    * The special object flags may be used to specify <object>.  For a
      list of these flags, see pobj.

See also:
    psup

psup.object.print
357:Usage:
    psup [<object>]

Examples:
    "psup"  	    	print superclasses of object at *ds:si
    "psup -i"	    	print superclasses of object under mouse
    "psup ^l4e10h:1eh"	print superclasses of object at ^l4e10h:1eh

Synopsis:
    Print superclasses of an object

Notes:
    * If no object is specified, *ds:si is used.

See also:
    is-obj-in-class

focusobj.object.address
274:Usage:
    focusobj

Examples:
    "focusobj" 	    	return object with focus
    "pobj [focusobj]"   do a pobj on the focus object
			(equivalent to "pobj -f")

Synopsis:
    Returns the object with the focus

Notes:

See also:
    focus, target, model, targetobj, modelobj

targetobj.object.address
271:Usage:
    focusobj

Examples:
    "targetobj" 	return object with target
    "pobj [targetobj]"	do a pobj on the target object
			(equivalent to "pobj -t")

Synopsis:
    Returns the object with the target

Notes:

See also:
    focus, target, model, focusobj, modelobj

modelobj.object.address
297:Usage:
    focusobj

Examples:
    "modelobj" 	    	return object with model grab
    "pobj [targetobj]"	do a pobj on the object with the model grab
			(equivalent to "pobj -t")

Synopsis:
    Returns the object with the model grab

Notes:

See also:
    focus, target, model, focusobj, targetobj

fullscreenobj.object.address
267:Usage:
    fullscreenobj

Examples:
    "fullscreenobj"    	return object with full screen grab
    "pobj [fullscreenobj]" do a pobj on the object with the full screen grab

Synopsis:
    Returns the object with the full screen grab

Notes:

See also:
    fullscreen

mouseobj.object.address
390:Usage:
    mouseobj

Examples:
    "mouseobj" 	    	return object with mouse grab
    "pobj [mouseobj]"	do a pobj on the object with the mouse grab
			(equivalent to "pobj -mg")

Synopsis:
    Returns the object with the mouse grab

Notes:
    * The mouse button must be down, otherwise the hierarchy stops at the
    flow object.

See also:
    mouse, keyboard, focus, target, keyboardobj

keyboardobj.object.address
320:Usage:
    keyboardobj

Examples:
    "keyboardobj" 	    return object with keyboard grab
    "pobj [keyboardobj]"    do a pobj on the object with the keyboard grab
			    (equivalent to "pobj -kg")

Synopsis:
    Returns the object with the keyboard grab

Notes:

See also:
    keyboard, mouse, focus, target, mouseobj

lastCommand.{swat_prog.input swat_variable.input}
433:Usage:
    none

Examples:
    "var repeatCommand $lastCommand"	Set the current command as the one
					to execute next time.

Synopsis:
    $lastCommand stores the text of the command currently being executed.

Notes:
    * This variable is set by top-level-read. Setting it yourself will
      have no effect, unless you call set-address or some similar routine
      that looks at it.

See also:
    repeatCommand, top-level-read

repeatCommand.{swat_prog.input swat_variable.input}
861:Usage:
    var repeatCommand <string>

Examples:
    "var repeatCommand [list foo nil]"	    Execute the command "foo nil" if
					    the user just hits <Enter> at the
					    next command prompt.

Synopsis:
    This variable holds the command Swat should execute if the user enters
    an empty command. It is used by all the memory-referencing commands to
    display the next chunk of memory, and can be used for other purposes as
    well.

Notes:
    * repeatCommand is emptied just before top-level-read returns the command
      the interpreter should execute and must be reset by the repeated command
      if it wishes to continue to be executed when the user just hits <Enter>.

    * The text of the current command is stored in lastCommand, should you
      wish to use it when setting up repeatCommand.

See also:
    lastCommand, top-level-read.

symbolCompletion.swat_variable.input
1185:Usage:
    var symbolCompletion (0|1)
    syntax diagram

Examples:
    "var symbolCompletion 1"	Enable symbol completion in the top-level
				command reader.

Synopsis:
    This variable controls whether you can ask Swat to complete a symbol
    for you while you're typing a command. Completion is currently very
    slow and resource-intensive, so you probably don't want to enable it.

Notes:
    * Even when symbolCompletion is 0, file-name, variable-name, and command-
      name completion are always enabled, using the keys described below.

    * When completion is enabled, three keys cause the interpreter to take
      the text immediately before the cursor and look for all symbols that begin
      with those characters. The keys are:
      	Ctrl+D	Produces a list of all possible matches to the prefix.
	Escape	Takes the list of all matches and inserts the remaining 
	    	characters of their common prefix, effectively typing as
		many characters as Swat can unambiguously determine are part
		of any symbol that begins with the characters already typed.
    	Ctrl+]	Cycles through the list of possible symbols, in alphabetical
		order.

See also:
    top-level-read.

set-repeat.swat_prog.input
266:Sets the command to be repeated using a template string and the lastCommand
variable. The variables $0...$n substitute the fields 0...n from the
lastCommand variable, with the final result being placed in repeatCommand
to be executed should the user type just return
tcsh.{swat_navigation}
2752:Usage:
    tcsh [<command line editing specification>]
    tcsh off
    tcsh cle [<command line editing specification>]
    tcsh cle off
    tcsh hist [on]
    tcsh hist off

Examples:
    "tcsh"		Enables tcsh-style history searching and
			command line editing, using the default bindings.

    "tcsh aebfrvdtkyu"	Turns on tcsh-style history searching and
			command line editing, using the following bindings:

			ctrl-a: beginning of line
			ctrl-e: end of line
			ctrl-b: backward character
			ctrl-f: forward character
			ctrl-r: backward word
			ctrl-v: forward word
			ctrl-d: delete char
			ctrl-t: forward delete word
			ctrl-k: kill region
			ctrl-y: yank
			ctrl-u: kill line

    "tcsh off"		Disables tcsh-style history searching and
			command line editing.

    "tcsh cle"		Enables tcsh-style command line editing, leaving
			history searching unchanged.

    "tcsh cle off"	Disables tcsh-style command line editing, leaving
			history searching unchanged.

    "tcsh hist"		Enables tcsh-style history searching. leaving
			command line editing  unchanged.

    "tcsh hist off"	Disables tcsh-style history searching. leaving
			command line editing  unchanged.

Synopsis:
    This command implements enhanced command line editing, similar to that
    found in the tcsh shell. It also enables an enhancement to the history
    mechanism that searches the command history for elements whose beginnings
    match the current command line (similar to history-search-forward and
    -backward from tcsh).

Notes:

    * The default bindings are "aebfrvdtkyu", as above.

    * The variable wordDelineatingChars can be used to define characters
      that mark the beginning and end of words, according to the word
      related function. For example, typing:

var wordDelineatingChars {\040\t._\\/@}

      ... would designate spaces, tabs, periods, underscores, both kinds of
      slashes, and the "at" sign as places to "stop" during word-type
      operations such as "delete word" (which is always bound to ctrl-w,
      by the way).

    * With the exception of the "yank" command, other command line
      editing keystrokes are *not* intercepted if the command line is
      currently empty (since they'd have no effect anyways). This is
      to allow secondary uses of those keystrokes to take effect
      (eg., ctrl-b = backward page if blank line, backward char otherwise)

    * ctrl-d is still a completion character when the cursor is at the
      end of the current command line, so you probably don't want to
      map ctrl-d to one of the "backward" commands.
      
    * ctrl-space sets the mark, for use with the kill region command.
      *This isn't working for the DOS version.*

See Also:
    top-level-read, history

bwatch.{profile thread}
181:Usage:
    bwatch [on|off]

Examples:
    "bwatch on"	    	    Watch stack borrowing
    "bwatch"	    	    Check the status of bwatch

Synopsis:
    Watch stack borrowing in action

objcount.{system.heap profile}
1266:Usage:
    objcount [-q] [-X] [-Y] [-b #] [-o #] [-p #]

Examples:
    "objcount"				count all objects
    "objcount -p welcome"		count all objects owned by welcome
    "objcount -o *desktop::DiskDrives"	count this one object
    "objcount -b 0x3270"		count all objects in this block

Synopsis:
    Count up instances of various objects on the heap.

Notes:
    * The first argument specifies the options:
        q	quiet operation - no progress output (not applicable with X, Y)
        o #	check only object #
        b #	check ONLY block #
        p #	check only blocks for patient #
        c #	check only objects of class #
        C #	check only objects of top-level class #
        X	show general verbose info
        Y	show search verbose info

    * Output fields:
       direct - number of direct instances of this class
       indirect - number if indirect instance of this class (i.e object's
	          superclass is this class)
       size - total size of instance data for this class (excludes instance
	      data inherited from superclass)

    * Status output:
       . - processing heap block
       , - processing matching object's top-level class
       ; - processing matching object's non-top-level class

See also:
    hwalk, objwalk, lhwalk

fatalerr_auto_explain.{swat_variable.preference}
639:Usage:
    var fatalerr_auto_explain (1|0)

Examples:
    "var fatalerr_auto_explain 0"	Turn off automatic generation of
					the explanation for any fatal-error
					hit.

Synopsis:
    Determines if the "why" command will automatically provide you with an
    explanation of any fatal error you encounter. If non-zero, they will
    be provided whenever FatalError is hit.

Notes:
    * Explanations are loaded from <patient>.fei files stored in the system
      Tcl library directory when an error in <patient> is encountered.

    * You can also obtain an explanation of an error via the "explain" command.

See also:
    why, explain

why.top.crash
1022:Usage:
    why

Example:
    "why"

Synopsis:
    Print a description of why the system crashed.

Notes:
    * This must be run from within the frame of the FatalError
      function.  Sometimes GEOS is not quite there.  In this case,
      step an instruction or two and then try the 'why' command
      again.

    * This simply looks up the enumerated constant for the error code
      in AX in the "FatalErrors" enumerated type defined by the geode that
      called FatalError. For example, if a function in the kernel called
      FatalError, AX would be looked up in geos::FatalErrors, while if a
      function in your application called FatalError, this function would
      look it up in the FatalErrors type defined by your application.  Each
      application defines this enumerated type by virtue of having included
      ec.def

    * For certain fatal errors, additional information is provided by invoking
      the command <patient>::<error code name>, if it exists.

See also:
    regs, where, explain.

explain.top.crash
1119:Usage:
    explain

Example:
    "explain"

Synopsis:
    Print a more detailed description of why the system crashed, if possible.

Notes:
    * This must be run from within the frame of the FatalError
      function.  Sometimes GEOS is not quite there.  In this case,
      step an instruction or two and then try the 'why' command
      again.

    * This simply looks up the enumerated constant for the error code
      in AX in the "FatalErrors" enumerated type defined by the geode that
      called FatalError. For example, if a function in the kernel called
      FatalError, AX would be looked up in geos::FatalErrors, while if a
      function in your application called FatalError, this function would
      look it up in the FatalErrors type defined by your application.  Each
      application defines this enumerated type by virtue of having included
      ec.def

    * This command also relies on programmers having explained their
      FatalErrors when defining them.  If you come across a FatalError that
      isn't documented, do so.  It will help the next person.

See also:
    regs, where, why.

hwalk.{top.heap system.heap patient.handle}
2671:Usage:
    hwalk [<flags>] [<patient>]

Examples:
    "hwalk" 	    	display the heap
    "hwalk -e"	    	display the heap and perform error checking
    "hwalk -r ui"   	display the heap owned by the ui in reverse order
    "hwalk -L 1000h" 	display all blocks 4K or larger.
Synopsis:
    Print the status of all blocks on the global heap.

Notes:
    * The flags argument is a collection of flags, beginning with '-',
      from the following set:

        r	print heap in reverse order (decreasing order of addresses)
    	p	print prevPtr and nextPtr as well.
        e	do error-checking on the heap.
        l	just print out locked blocks
        f	fast print-out - this doesn't try to figure out the block type
	F	just print out fixed blocks
	c	just print out code resources
        s <num> start at block <num>
    	L <num>	print blocks larger than <num> bytes large
	d	print out non-discardable blocks
    	x   	just print out xip blocks

    * The patient argument is a patient whose blocks are to be selectively
      printed (either a name or a core-block's handle ID). The default is to
      print all the blocks on the heap.

    * The following columns can appear in a listing:
    	HANDLE	The handle of the block
    	ADDR	The segment address of the block
    	SIZE	Size of the block in bytes
    	PREV	The previous block handle (appears with the -p flag)
    	NEXT	The next block handle (appears with the -p flag)
    	FLAGS	The following letters appear in the FLAGS column:
        	    s	  sharable
        	    S	  swapable
        	    D	  discardable
        	    L	  contains local memory heap
        	    d	  discarded (by LMem module: discarded blocks 
        	    	  don't appear here)
        	    a	  attached (notice given to Swat whenever state changes)
    	LOCK	Number of times the block is locked or n/a if FIXED.
    	OWNER	The process which owns the block
    	IDLE	The time since the block has been accessed in minutes:seconds
    	OINFO	The otherInfo field of the handle (block type dependent)
    	TYPE	Type of the block, for example:
    	    	R#1 (dgroup)        Resource number one, named "dgroup"
    	    	Geode   	    Internal control block for a geode
    	    	WINDOW, GSTATE,	    Internal structures of the given type
    	    	GSTRING, FID_BLK,
    	    	FONT
    	    	OBJ(write:0)	    Object block run by thread write:0
    	    	VM(3ef0h)...	    VM block from VM file 3ef0h

    * This only prints those handles in memory while 'handles' prints
      all handles used.

    * Information about a particular block may be obtained with the lhwalk or
      phandle command.

See also:
    lhwalk, phandle, handles, hgwalk.

phandle.{top.print system.heap patient.handle}
306:Usage:
    phandle <handle ID>

Examples:
    "phandle 1a80h" 	print the handle 1a80h

Synopsis
    Print out a handle.

Notes:
    * The handle ID argument is just the handle number.  Make sure that
      the proper radix is used.

    * The size is in paragraphs.

See also:
    hwalk, lhwalk, psegment.

tmem.{system.misc profile}
250:Usage:
    tmem

Examples:
    "tmem"  	turn on memory tracing.

Synopsis:
    Trace memory usage.

Notes:
    * Tmem catches calls to FarDebugMemory, printing out the parameters
      passed (move, free, realloc, discard, swapout, swapin, modify).


handles.{system.heap patient.handle}
1945:Usage:
    handles [<flags>] [<patient>]

Examples:
    "handles"
    "handles -f"
    "handles ui"
    "handles -mL 1000"	shows all memory handles for resources > 1000 bytes
Synopsis:
    Print all handles in-use.

Notes:
    * The flags argument is a collection of flags, beginning with '-',
      from the following set:

    	s  	print summary only
    	e   	events only
    	p	don't print prevPtr and nextPtr.
        f	fast print-out - this doesn't try to figure out the block type
    	r   	reverse, i.e. starts at the end of the handle table.
    	u   	print only those handles that are in-use.
    	m   	print mem handles only
    	L <num> print only those handles that are greater than num bytes large
    * The patient argument is a patient whose blocks are to be selectively
      printed (either a name or a core-block's handle ID). The default is to
      print all the blocks on the heap.

    * The following columns can appear in a listing:
    	HANDLE	The handle of the block
    	ADDR	The segment address of the block
    	SIZE	Size of the block in bytes
    	PREV	The previous block handle (appears with the p flag)
    	NEXT	The next block handle (appears with the p flag)
    	FLAGS	The following letters appears in the FLAGS column:
        	    s	  sharable
        	    S	  swapable
        	    D	  discardable
        	    L	  contains local memory heap
        	    d	  discarded (by LMem module: discarded blocks 
        	    	  don't appear here)
        	    a	  attached (notice given to swat whenever state changes)
    	LOCK	Number of times the block is locked or n/a if FIXED.
    	OWNER	The process which owns the block
    	IDLE	The time since the block has been accessed in minutes:seconds
    	OINFO	The otherInfo field of the handle (block type dependent)
    	TYPE	Type of the block, for example:
    	    	    R#1 (dgroup)    resource number one

See also:
    lhwalk, phandle, hwalk, hgwalk, handsum.

handsum.system.heap
1305:Usage:
    handsum

Examples:
    "handsum"	Summarize the use to which the handle table is being put.

Synopsis:
    This command analyzes the handle table and prints out a list of the
    number of handles being used by each geode, and for what purpose.

Notes:
    * The columns of the output are labeled somewhat obscurely, owing to
      horizontal-space constraints. The headings, and their meanings are:
      	Res 	Resource handles (i.e. handles for data stored
		in the geode's executable)
    	Mem 	Non-resource memory handles
    	File	Open files
    	Thds	Threads
	Evs 	Recorded events
	Qs  	Event queues
	Sems	Semaphores
	EDat	Data for recorded events
	Tim 	Timers
	SB  	Saved blocks (handles tracking memory/resource handles whose
		contents will go to an application's state file)
	VMF 	VM files

    * The "handles" command is good at printing out all the handles for a
      particular geode, but it's generally too verbose to use for the entire
      handle table. That's why this command exists.

    * It's a good idea to issue the command "dcache length 4096" before
      executing this command, as it ensures the entire handle table will end
      up in Swat's data cache, for quick access if you want to use the
      "handles" command immediately afterward.

See also:
    handles

old_handles.obscure
23:1.2 version of handles

hgwalk.system.heap
146:Usage:
    hgwalk

Examples:
    "hgwalk"	    print statistics on all geodes

Synopsis:
    Print out all geodes and their memory usage.

Notes:


heapspace.system.heap
1202:Usage:
    heapspace <geode>		   print out "heapspace" being used by app
    heapspace total		   print out total heapspace being used
    heapspace syslib		   print out total of heapspace being used by
					system libraries

Examples:
    "heapspace geomanager"	    print out "heapspace" value for geomanager
    "heapspace total"	  	    print out total space being used
    "heapspace syslib"	  	    print out space being used by system libs

Synopsis:
    Print out "heapspace" value for application, as calculated from current
    heap usage.  Run "heapspace" on your application at different times, after
    accessing all menus & dialogs, & generally "stressing" it, to see what
    value for "heapspace" should be put in its .gp file.  The value printed
    is roughly the non-discardable heap usage by the app & any transient
    libraries that it depends on.

Notes:
    '*' in the Tabulating data stream represent XIP'd blocks detected.  
    '*' before a Geode name mean the Geode is XIP'd.

    XIP'd blocks are any blocks:
           KLV_mapPageAddr <= addr < KLV_mapPageAddr+800h
               or
           KLV_heapEnd <= addr < 0xf000
    This may not catch everything on every device.

memsize.system.heap
463:Usage:
    memsize [<memory size>]

Examples:
    "memsize"
    "memsize 512"

Synopsis:
    Change the amount of memory that GEOS thinks that it has.

Notes:
    * The memory size argument is the size to make the heap.  If none
      is specified then the current memory size is returned.

    * Memsize can only be run at startup, before the heap has been
      initialized.  Use this right after an 'att -s'.

    * Memsize accounts for the size of the stub.


psegment.{top.print system.heap patient.handle}
439:Usage:
    psegment <segment ID>

Examples:
    psegment 2f3ah    - show the handle for 2f3ah
    psegment ax       - show the handle for the segment in ax
    psegment ds:si    - show the handle for the segment at ds:si

Synopsis:
    Print out a segment's handle.

Notes:
    The segment ID can be an immediate segment value, or the address
    of a segment value in a register or memory location.

See Also:
    phandle, hwalk, lhwalk.

alloclog.{system.heap} 
446:Usage:
    alloclog <command>

Examples:
    alloclog on    - turn on log
    alloclog off   - turn off log
    alloclog print - print all global allocations that have not yet
                     been freed

Synopsis:
    Manage a log of global allocations that have not yet been freed.

Notes:
    Simply keeps adds a handle to our list each time MemAllocLow is 
    called, and deletes a handle from our list each time MemFree is 
    called.

heaprequest.system.heap
215:Usage:
    heaprequest <geode>		   print out "heapspace" reserved by an app

Synopsis:
    Print out the amont of heap space this geode has reserved.  This the
    sum of all GeodeRequestSpace calls for this geode.

timingProcessor.swat_variable
79:The processor for which to generate cycle counts. One of i86, i88, i286, or
V20
cycles.profile
2212:Usage:
    cycles [-r] [-i] [-I] [-f] [-n] (-x <routine>[=<cycles>])* [<end-address>]

Examples:
    "cycles -r"	    	    	Count cycles for each routine, rather than
				showing every instruction and its cycle count.
    "cycles -f"	    	    	Count machine cycles until the current routine
				finishes.
    "cycles -x FSDInt21=2"  	Count cycles normally, but let FSDInt21 run
				full-speed, assuming a cycle-count of 2 for
				the entire routine.
    "cycles endLoop"	    	Count cycles until execution reaches the
				label "endLoop"

Synopsis:
    A low-level optimization tool that counts the number of machine cycles
    a given set of instructions takes to execute on a particular processor.

Notes:
    * In normal operation, this prints out each instruction and its cycle
      count before executing it. If you give the -r, -i, or -I flags, it
      will only print cycle totals for routines, along with a running total.
      -i is like -r, except it indents the display of routines to indicate
      the level of nested routines. -I is like -i, except it indicates the
      call nesting by a number in parentheses, rather than a number of spaces.

    * The -f flag causes cycles to count until the current routine returns
      to its caller.
      
    * In normal operation, cycles tracks the number of cycles the interrupt
      flag remains off, generating a warning when it has been off for more
      than 2,000 cycles (the threshold, on an 8088, above which characters are
      lost when sent over a fast serial line). Pass the -n flag to shut off
      this check (it forces you to hit return to continue counting, which
      may not be ideal if you've left cycles to count something overnight).

    * Counting cycles can take a while. If you don't care about particular
      routines that the code you're profiling calls, or already know a
      typical value for the routine, you can use the -x flag. "-x <routine>"
      causes the routine to be ignored (have a count of 0), while
      "-x <routine>=<count>" tells cycles to assume the routine took <count>
      cycles. In either case, the routine is run at full speed, rather than
      being single-stepped.

See also:
    trace.

pdex-dbr.print
624:Usage:
    pdex-dbr [<flags>] [<address>]

Examples:
    "pdex-dbr"	    	    Print the database record at es:si
    "pdex-dbr es:di"        Print the database record at es:di

Synopsis:
    Print formatted info contained in the rolodex DB_Record

    Example:
    --------

    Index:   Smith, Joe
    Address: Joe Smith\r123 Park St.\rAlameda, CA
    Phone #s:    Type       Number
                 ----       ------
                   1        "(510) 555-1212"
                   7        "(510) 814-5700"
                   3    
                   4        "(510) 814-4250"
                   8        "(310) 555-1028"


pdex-plist.print
461:Usage:
    pdex-plist [<flags>] [<address>] [<phonesToPrint>]

Examples:
    "pdex-plist es:di"      Print the phone name string as es:di
    "pdex-plist es:di 10"   Print the first 10 phone name strings

Synopsis:
    Print the rolodex phone name strings from the index table

    Example:
    --------
    0     "SOMETHING"
    1     
    2     "HOME"
    3     "OFFICE"
    4     "CAR"
    5     "FAX"
    6     "OTHER"
    7     "BATH"
    8     "OFFICE 2"

wakeup-thread.swat_prog.thread
186:Subroutine to actually wake up a thread. Argument WHO is as for the "switch"
command. Returns non-zero if the wakeup was successful and zero if the machine
stopped for some other reason.
wakeup.{thread patient.running}
328:Wait for a given patient/thread to wake up. WHO is of the same form as the
argument to the "switch" command, ("help switch" to find out more). Leaves
you stopped in the kernel in the desired thread's context unless something
else causes the machine to stop before the patient/thread wakes up. WHO
defaults to the current thread.
spawn.{top.running thread patient.running}
1244:Usage:
    spawn <patient> [<address>]

Examples:
    spawn hello	    Set a temporary breakpoint which the machine will
    	    	    	hit when the hello patient is created.
    sp hello	    Set a temporary breakpoint which the machine will
    	    	    	hit when the hello patient is created.
    sp hello HelloDraw
    	    	    Set a temporary breakpoint which the machine will
    	    	    	hit when the hello patient is created and reaches
    	    	    	HelloDraw.
    sp impex:1	    Set a temporary breakpoint which the machine will
    	    	    	hit when thread number 1 for the patient impex
    	    	    	is created.
Synopsis:
    Set a temporary breakpoint in a not-yet-existent patient/thread,
    waiting for a new one to be created.

Notes:
    * The <process> argument is the permanent name of the patient to
      watch for.

    * The optional <address> argument is an address expression saying
      where to place the breakpoint.  If none is specified, the
      the machine stops when the patient is created.

    * This can also be used to catch the spawning of a new thread.

    * If the machine stops before the breakpoint can be set, you'll
      have to call spawn again.

See also:
    run, freeze, thaw, wakeup.

whatat.top.print
456:Usage:
    whatat [<address>]

Examples:
    "whatat"    	    	name of variable at *ds:si
    "whatat ^l2ef0h:002ah"	name of variable at the specified address

Synopsis:
    Print the name of the variable at the address.

Notes:
    * The address argument specifies where to find a variable name
      for.  The address defaults to *ds:si.

    * If no appropiate variable is found for the address, '*nil*' is returned.

See also:
    pobj, hwalk, lhwalk.

pvardentry.swat_prog.object
402:Usage:
    pvardentry <address> <object>

Examples:
    pvardentry ds:bx *ds:si

Notes:
    * The address argument is the address of a variable data entry in
      an object's variable data storage area.  The default is ds:bx.

    * The <object> argument is required to determine the name of the
      tag for the entry, as well as the type of data stored with it.

See also:
    pvardrange, fvardata

pvardrange.swat_prog.object
1:

pvardata.object.print.fast
385:Usage:
    pvardata [<address>]

Examples:
    pvardata ds:si		Prints vardata of object at *ds:si
    pvardata -i			Prints vardata of object with implied grab.

Notes:
    * The address argument is the address of an object with variable data.
      The default is *ds:si.

    * "pvardata" prints out the same information as "pobj v", but
      slightly faster.

See also:
    pobject

fvardata.object.print.obscure
574:Usage:
    fvardata <token> [<address>]

Examples:
    fvardata ATTR_VIS_TEXT_STYLE_ARRAY *ds:si

Synopsis:
    Locates and returns the value list for the data stored under the given
    token in the vardata of the given object.

Notes:
    * If the data are found, returns a list {<token> <data>}, where <data>
      is a standard value list for the type of data associated with the
      specified token.

    * Returns an empty list if the object has no vardata entry of the given
      type.

    * If no <address> is given, the default is *ds:si

See also:
    pobject

log.{profile profile.utils}
3750:Usage:
     log init                              (Re)Initialize variables for examining 
                                           the profile. This must be done each 
                                           time swat attaches to the patient.

     log reset                             Reset the profile log.  This will 
                                           erase all of the log entries.  It 
                                           will also turn of logging for all of 
                                           the profiling modes.

     log start <mode>                      Start logging for one of the 
                                           profiling modes :
                                           PMF_MESSAGE
                                           PMF_GENERIC

     log end <mode>                        End logging for one of the 
                                           profiling modes :
                                           PMF_MESSAGE
                                           PMF_GENERIC
     
     log (format-messages|fm) <patient> <thread number> [<start address>]
                                           Print the messages out for a
                                           given thread, formatted in a 
                                           readble manner.

         format of the messages is:
         <field1>:<field2> @<field3> L:<field4>
         field1 = method used to send message
         field2 = message 
         field3 = address of entry. This address can be passed to log print 
         field4 = address of entry where message was finally proccessed 
                  in ObjCallMethodTable. This address can be passed to log print. 

     log (format-procedures|fp) [<start address>] [<patient> <thread number>]
                                           Print out the procedure calls.  
                                           If no patient is specified, then 
                                           for all patients. If no address is
                                           specified, then starts at address 0

     log print <address>                   Print the entry at address

     log flush                             Flush the profiling cache
     
     log Summary <msg|proc>                Generate a summary of the time spent in 
                                           each procedure and a count of 
                                           how many times each procedure was 
                                           called.
 Synopsis:
     
     Various commands to access the profiling log, and to print out the 
     profiling log.

 Examples:
     
     log fm geos 0            Print out message tree for patient geos thread 0.
     
     log fm geos 0 128        Print out message tree for patient geos thread 0
                              starting at address 128 in the log.

     log print 128            Print out the log entry at address 128 in the profiling
                              log.

     log fp                   print out all of the procedure calls for all of the threads 
                              in the log.

     log summary proc         print out a summary of time spent in each procedure and 
                              how many times each procedure was called.

 Notes:

     The summary printed out by "log summary (proc|msg)" is created when the 
     log is printed out during "log fm ..." or "log fp ...".  Therefore one of these
     commands must be executed before a log summary command.

     Also the symmary printed out by "log summary (proc|msg)" is cummulative, so you
     will want to do a log init between each "log fp.." or "log fm..." command if 
     you plan to use log summary.

 
inst.support.unix.reference
1947:Usage:
    inst [<arg>]

Examples:
    "inst"   	    	list all assembly instructions
    "inst lodsb"    	describe the lodsb instruction
    "inst ea"	    	describe effective address timings 
    "inst cond"	    	describe jumps on condition codes

Synopsis:
    Print information on an assembler instruction.

Notes:
    * This command is not supported for DOS.

    * The argument is optional and may either be an assembly
      instruction or one of the following:

	ea		display effective address (EA) timings for 8086/88
	ref	    	list all assembly instructions with a description
	cond	    	display table of conditional jump instructions

      If no argument is given inst lists all the instructions with a 
      short, one-line description.

    * Each instruction reference has three basic output fields: Flags,
      Description, Notes, and Timing.

    * The Flags field illustrates how the instruction affects
      processor's condition flags. Each of the nine flags is
      abbreviated by a single letter.

	Abbrv.	Flag
	------	---------------
	O	Overflow
	D	Direction
	I	Interrupt
	T	Trap
	S	Sign
	Z	Zero
	A	Auxiliary Carry
	P	Parity
	C	Carry

      The flags are displayed horizontally with a code below each.

	Flags:	O D I T S Z A P C
		1 - - ? ? x ? x 0

      The flag codes have the following meanings:

	Code	Meaning
	------	-----------------------------------------------------
	-	unchanged by instruction
	x	changed predictably by instruction
	1	forced to 1 by instruction
	0	forced to 0 by instruction	
 	?	undefined or unpredictably altered by instruction

    * The Description field follows the Flags field and describes the
      purpose and usage of the instruction. Sometimes optional
      fields, such as Notes and See also, provide additional
      information and cross references.

    * The Timing field provides processor clock cycle data for the
      instruction. The timings assume a full prefetch queue.


ascii.support.unix.reference
201:Usage:
    ascii

Example:
    "ascii"		show the ascii table

Synopsis:
    Display an ascii table in both decimal and hex.

Notes:
    * This command is only supported for UNIX.

See also:
    print.

gloss.support.unix.reference
215:
Usage:
    gloss <regexp>

Synopsis:
    Print out the glossary definition of 'regexp', which is a
    regular expression (or just a word) that is given to SED.

Notes:
    * This command is not supported for DOS.

ref.support.unix.reference
513:Usage:
    ref <routine name>

Examples:
    "ref GrCreateState"		display the header for GrCreateState

Synopsis:
    Print the header for a function.

Notes:
    * This command is not supported for DOS.

    * The routine name argument is the name of a function to print the
      header of.  If no function is given, the function active in the
      current stack frame is used.

    * This command locates the function using a tags file, so that
      tags file should be kept up-to-date

See also:
    emacs.

xref.support.unix.reference
241:
Usage:
    xref <routineName>

Synopsis:
     Print out a cross reference for the given kernel function.

Notes:
    * This command is not supported for DOS.

    * If no function is given, the function active in the current frame is used.

loop.swat_prog
340:Simple integer loop procedure. Usage is:

	loop <loop-variable> <start>,<end> [step <step>] <body>

<start>, <end>, and <step> are integers. <body> is a string for
TCL to evaluate. If no <step> is given, 1 or -1 (depending as <start>
is less than or greater than <end>, respectively) is used. <loop-variable>
is any legal TCL variable name.
setcc.flag
603:Usage:
    setcc <flag> [<value>]

Examples:
    "setcc c"   	set the carry flag
    "setcc z 0" 	clear the zero flag

Synopsis:
    Set a flag in the computer.

Notes:
    * The first argument is the first letter of the flag to set.  The
      following is a list of the flags:

        t	trap
        i	interrupt enable
        d	direction
        o	overflow
        s	sign
        z	zero
        a	auxiliary carry
        p	parity
        c	carry

    * The second argument is the value to assign the flag.  It
      defaults to 1 but may be 0 to clear the flag.

See also:
    getcc, clrcc, compcc.

clrcc.flag
458:Usage:
    clrcc <flag> [<value>]

Examples:
    "clrcc c"       clear the carry flag

Synopsis:
    Clear a flag in the computer.

Notes:
    * The first argument is the first letter of the flag to clear.
      The following is a list of the flags:

        t	trap
        i	interrupt enable
        d	direction
        o	overflow
        s	sign
        z	zero
        a	auxiliary carry
        p	parity
        c	carry

See also:
    setcc, compcc, getcc.

compcc.flag
532:Usage:
    compcc <flag>

Examples:
    "compcc c"   	complement the carry flag

Synopsis:
    Complement a flag in the computer.

Notes:
    * The first argument is the first letter of the flag to
      complement.  The following is a list of the flags:

        t	trap
        i	interrupt enable
        d	direction
        o	overflow
        s	sign
        z	zero
        a	auxiliary carry
        p	parity
        c	carry

    * This command is handy to insert in a patch to flip a flag bit.

See also:
    setcc, clrcc, getcc.

clrcc.flag
458:Usage:
    clrcc <flag> [<value>]

Examples:
    "clrcc c"       clear the carry flag

Synopsis:
    Clear a flag in the computer.

Notes:
    * The first argument is the first letter of the flag to clear.
      The following is a list of the flags:

        t	trap
        i	interrupt enable
        d	direction
        o	overflow
        s	sign
        z	zero
        a	auxiliary carry
        p	parity
        c	carry

See also:
    setcc, getcc, compcc.

getcc.flag
526:Usage:
    getcc <flag>

Examples:
    "getcc c"   	get the carry flag

Synopsis:
    Get a flag in the computer.

Notes:
    * The first argument is the first letter of the flag to
      get.  The following is a list of the flags:

        t	trap
        i	interrupt enable
        d	direction
        o	overflow
        s	sign
        z	zero
        a	auxiliary carry
        p	parity
        c	carry

    * This command is handy to run with a breakpoint to stop if a flag is set.
      
See also:
    setcc, clrcc, compcc.

print-pre-passive.object.vis 
203:Usage:
    print-pre-passive <obj>

Examples:
    print-pre-passive		Prints out pre-passive grab list of
				VisContent object at *ds:si

Synopsis:
    Prints out pre-passive grab list

Notes:
See also:

print-post-passive.object.vis
207:Usage:
    print-post-passive <obj>

Examples:
    print-post-passive		Prints out post-passive grab list of
				VisContent object at *ds:si

Synopsis:
    Prints out post-passive grab list

Notes:
See also:

hwbrk-list.top.breakpoint 
1064:Usage:
    hwbrk-list

Synopsis:
    Displays a summary of the Intel 386 debug registers.

Output:
    per-breakpoint output
	num: breakpoint number (0..3)
	state
	    1st letter: "d" disabled, "e" enabled
	    2nd letter: "i" instruction, "w" data write, "r" data read/write
	    3rd letter: " " instruction, "b" byte, "w" word, "d" dword
	address
            0000h:0000h  segment and offset of the breakpoint
            00000000h    linear address, if unable to determine the segment

    status line: reason(s) why the machine stopped
	BT - T bit set in a task descriptor
	BS - TF bit set in flags (single-step)
	BD - write-protect violation on debug registers
	B3 - breakpoint 3 taken
	B2 - breakpoint 2 taken
	B1 - breakpoint 1 taken
	B0 - breakpoint 0 taken

Notes:
    * BT and BD are unlikely to appear, as nothing in GEOS will trigger them
    * linear address = segment*16 + offset
    * all instruction breakpoints have a size of byte, so that information
      is not printed

See also:
    hwbrk, hwbrk-set, hwbrk-enable, hwbrk-disable, hwbrk-delete

hwbrk-set.top.breakpoint 
1337:Usage:
    hwbrk-set <address> [<type> [<size>]]

    type is "i" (instruction), "w" (data write), or "rw" (data read/write)
    size is "b" (byte), "w" (word), or "d" (dword)

Examples:
    "hwbrk-set myvar rw b"			break on read/write of byte
    "hwbrk-set mybigvar"			break on write of word
    "hwbrk-set mybiggervar w d"		break on write of dword
    "hwbrk-set MyProc i"			break on execution

Synopsis:
    Sets the Intel 386 debug registers so that the machine will stop if
    the instruction is executed or the data accessed.

Notes:
    * these commands do not work if GEOS is running under NT
    * Intel breakpoints can only be set in fixed data or code
    * there are no commands or conditions associated with Intel breakpoints
    * for data breakpoints, the machine will stop if any part of the
      data is accessed in the specified manner (read or read/write)
    * for instruction breakpoints, the size is ignored and the machine
      will stop when that instruction is executed
    * if more than one of a hardware instruction breakpoint, a hardware
      data breakpoint, and a conventional breakpoint occur on the same
      instruction, which and how many of them actually get taken is
      undefinedm, but at least one of them will be

See also:
    hwbrk, hwbrk-list, hwbrk-enable, hwbrk-disable, hwbrk-delete

hwbrk-disable.top.breakpoint 
214:Usage:
    hwbrk-disable <n>

Examples:
    "hwbrk-disable 1"		Disable breakpoint number 1

Synopsis:
    Disable a previously set breakpoint

See also:
    hwbrk, hwbrk-list, hwbrk-set, hwbrk-enable, hwbrk-delete

hwbrk-delete.top.breakpoint 
227:Usage:
    hwbrk-delete <n>

Examples:
    "hwbrk-delete 1"		Clear breakpoint number 1

Synopsis:
    Disable a breakpoint and clear the address register

See also:
    hwbrk, hwbrk-list, hwbrk-set, hwbrk-enable, hwbrk-disable

hwbrk-enable.top.breakpoint 
213:Usage:
    hwbrk-enable <n>

Examples:
    "hwbrk-enable 1"		Enable breakpoint number one

Synopsis:
    Enable a previously set breakpoint

See also:
    hwbrk, hwbrk-list, hwbrk-set, hwbrk-disable, hwbrk-delete

hwbrk.top.breakpoint 
269:Usage:
    hwbrk list
    hwbrk set <addr> [i|w|rw [b|w|d]]
    hwbrk enable <n>
    hwbrk disable <n>
    hwbrk delete  <n>

Synopsis:
    Command to manage Intel 386 hardware breakpoints

See also:
    hwbrk-list, hwbrk-set, hwbrk-enable, hwbrk-disable, hwbrk-delete

pdrive.{system.file_system lib_app_driver.file_system}
614:Usage:
    pdrive <drive-handle>
    pdrive <drive-name>
    pdrive <drive-number>

Examples:
    "pdrive si"	    Print a description of the drive whose handle is in SI
    "pdrive al"	    Print a description of the drive whose number is in AL
    "pdrive C"	    Print a description of drive C

Synopsis:
    Provides the same information as "drivewalk," but for a single drive,
    given the offset to its DriveStatusEntry structure in the FSInfoResource. 

Notes:
    * This is intended for use by implementors of IFS drivers, as no one else is
      likely to ever see a drive handle.

See also:
    drivewalk.

drivewalk.{system.file_system lib_app_driver.file_system}
1148:Usage:
    drivewalk

Examples:
    "drivewalk"	    Prints the table of drives known to the system.

Synopsis:
    Prints out all disk drives known to the system, along with their current
    status.

Notes:
    * The Flags column is a string of single-character flags with the
      following meanings:
      	L   	The drive is accessible to the local machine only, i.e.
		it's not visible over a network.
    	R   	The drive is read-only.
	F   	Disks may be formatted in the drive.
	A   	The drive is actually an alias for a path on another drive.
	B   	The drive is busy, performing some extended operation, such
		as formatting or copying a disk.
    	r   	The drive uses disks that may be removed by the user.
    	n   	The drive is accessed over the network.

    * The Locks column can reflect one of three states:
    	none	The drive isn't being accessed by any thread.
	Excl	The drive is locked for exclusive access by a single thread.
	<num>	The drive is locked for shared access for a particular disk,
		whose handle is the number. This is followed by the volume
		name of the disk, in square brackets.

See also:
    diskwalk, fsdwalk.

pdisk.{system.file_system lib_app_driver.file_system}
570:Usage:
    pdisk <disk-handle>

Examples:
    "pdisk bp"	    Prints information about the disk whose handle is in bp

Synopsis:
    Prints out information about a registered disk, given its handle.

Notes:
    * The Flags column is a string of single-character flags with the
      following meanings:
    	w   	The disk is writable.
	V   	The disk is always valid, i.e. it's not removable.
	S   	The disk is stale. This is set if the drive for the disk
		has been deleted.
    	u   	The disk is unnamed, so the system has made up a name for it.

See also:
    diskwalk

diskwalk.{system.file_system lib_app_driver.file_system}
615:Usage:
    diskwalk <drive>

Examples:
    "diskwalk F"	    Prints the disks registered in drive F.
    "diskwalk"	    	    Prints all the disks registered with the system.

Synopsis:
    Prints out information on registered disks.

Notes:
    * The Flags column is a string of single-character flags with the
      following meanings:
    	w   	The disk is writable.
	V   	The disk is always valid, i.e. it's not removable.
	S   	The disk is stale. This is set if the drive for the disk
		has been deleted.
    	u   	The disk is unnamed, so the system has made up a name for it.

See also:
    drivewalk, fsdwalk.

fwalk.{top.file system.file_system lib_app_driver.file_system patient.handle}
1046:Usage:
    fwalk [<patient>]

Examples:
    "fwalk"	    	list all open files.
    "fwalk geos"	list all open files owned by the geos patient.

Synopsis:
    Print the list of files open anywhere in the system.

Notes:
    * The patient argument may be used to restrict the list to a
      particular patient.  The patient may be specified either as the
      patient name or as the patient's handle.

    * fwalk differs from sysfiles and geosfiles in that it deals primarily
      with GEOS data structures.

    * The 'Other' column shows if there is a VM handle bound to the file.

    * The letters in the 'Flags' column mean the following:
        RW		deny RW
        R		deny R
        W		deny W
        N		deny none
        rw		access RW
        r		access R
        w		access RW
        O	    	override, used to override normal exclusion
    	        	normally used by FileEnum to check out file headers.
        E	    	exclusive, used to prevent override.  
    	    		this is used by disk.geo

See also:
    fhandle, geosfiles, sysfiles.

fsir-stat.{system.ifs lib_app_driver.ifs}
21:Usage:
    fsir-stat

fhandle.{top.file system.file_system lib_app_driver.file_system patient.handle}
312:Usage:
    fhandle <handle id>

Examples:
    "fhandle 3290h" 	    Prints info about the file whose handle is 3290h

Synopsis:
    Print out a file handle.

Notes:
    * The handle id argument is the handle number.  File handles are
      listed in the first column of the 'fwalk' command.

See also:
    fwalk.

history.support
988:Usage:
    history <n>
    history set <queue-size>
    history subst <string>
    history cur
    history fetch <n>
    history save <file>
    history load <file>

Examples:
    "history 10"    	    	Prints the last 10 commands entered via the
				"history subst" command.
    "history subst $line"	Performs history substitution on
				the string in $line, enters the result 
				in the history queue and returns the
				result.
    "var n [history cur]"   	Stores the number of the next string to be
				entered via "history subst" in the variable n.
    "history set 50"	    	Limit the number of entries in the queue to
				50.
    "history fetch 36"	    	Returns the string entered as command number
				36 in the history queue.

Synopsis:
    This command implements command-history, with its attendant substitution.
    The history is a queue of a fixed size, with each entry in the queue
    having a unique number by which it is referenced.

Notes:

See Also:
    top-level-read

intFormat.swat_variable.output
389:Usage:
    var intFormat <format-string>

Examples:
    "var intFormat %d"	Sets the default format for printing unsigned integers
			to decimal

Synopsis:
    $intFormat contains the string passed to the "format" command to print
    an integer.

Notes:
    * The default value is {%xh}, which prints the integer in hexadecimal,
      followed by an "h".

See also:
    print, byteAsChar.

byteAsChar.swat_variable.output
509:Usage:
    var byteAsChar (0|1)

Examples:
    "var byteAsChar 1"	Print byte variables as characters.

Synopsis:
    Determines how unsigned character variables are printed: if set non-zero,
    they are displayed as characters, else they are treated as unsigned
    integers.

Notes:
    * If $byteAsChar is 0, $intFormat is used

    * The default value for this variable is 0. It is mostly a hold-over from
      when we used MASM to develop and it had no "char" data type.

See also:
    intFormat, print

alignFields.swat_variable.output
679:Usage:
    var alignFields (0|1)

Examples:
    "var alignFields 1"	    Sets the "print" command to align the values for
    	    	    	    all the fields of a given structure.

Synopsis:
    Determines whether structure-field values follow immediately after the
    field name or if all values are indented to the same level.

Notes:
    * Having all values indented to the same level makes it easier for
      some people to locate a particular field in a structure. It is not
      without cost, however, in that Swat must determine the length of the
      longest field name before it can print anything.

    * The default value for this variable is 0.

See also:
    print

dwordIsPtr.swat_variable.output
499:Usage:
    var dwordIsPtr (1|0)

Examples:
    "var dwordIsPtr 1"	Tells "print" to print all double-word variables as
			if they were far pointers (segment:offset)

Synopsis:
    Controls whether dword (aka. long) variables are printed as 32-bit
    unsigned integers or untyped far pointers.

Notes:
    * For debugging C code, a value of 0 is more appropriate, while 1 is best
      for debugging assembly language.

    * The default value for this variable is 1.

See also:
    intFormat, print

noStructEnum.swat_variable.output
496:Usage:
    var noStructEnum (0|1)

Examples:
    "var noStructEnum 1"	Don't put "struct" or "enum" before the
				data type for variables that are structures
				or enums.

Synopsis:
    Structure fields that are structures or enumerated types normally have
    "struct" or "enum" as part of their type description. This usually
    just clutters up the display, however, so this variable shuts off this
    prepending.

Notes:
    * The default value of this variable is 1.

See also:
    print

printRegions.swat_variable.output
392:Usage:
    var printRegions (1|0)

Examples:
    "var printRegions 1"	If a structure contains a pointer to a region,
    	    	    	    	"print" will attempt to determine its
				bounding box.

Synopsis:
    Controls whether "print" parses regions to find their bounding rectangle.

Notes:
    * The default value for this variable is 1.

See also:
    print, condenseSpecial, condenseSmall.

condenseSpecial.swat_variable.output
591:Usage:
    var condenseSpecial (1|0)

Examples:
    "var condenseSpecial 0"	Turns off the special formatting of various
				types of structures by "print"

Synopsis:
    Controls the formatting of certain structures in more-intuitive ways
    than the bare structure fields.

Notes:
    * The default value of this variable is 1.

    * The current list of structures treated specially are:
    	Semaphore, Rectangle, OutputDescriptor, TMatrix, BBFixed,
	WBFixed, WWFixed, DWFixed, DFixed, WDFixed, DDFixed, FileDate,
	FileTime, FloatNum, SpecWinSizeSpec

See also:
    print, condenseSmall

condenseSmall.swat_variable.output
513:Usage:
    var condenseSmall (1|0)

Examples:
    "var condenseSmall 0"	Force even small structures to be printed
    	    	    	    	one field per line.

Synopsis:
    Controls whether "print" attempts to condense the output by printing
    small (< 4 bytes) structures (which are usually records in assembly
    language) as a list of <name> = <int>, where <name> is the field
    name and <int> is a signed integer.

Notes:
    * The default value for this variable is 1.

See also:
    print, condenseSpecial

threadname.{thread print.utils}
370:Usage:
    threadname <id>

Examples:
    "threadname 21c0h"	Returns the name of the thread whose handle id is 21c0h

Synopsis:
    Given a thread handle, produces the name of the thread, in the form
    <patient>:<n>

Notes:
    * If the handle is not one of those Swat knows to be for a thread, this
      returns the string "unknown".

See also:
    thread, patient.

fmtoptr.print.utils
1160:Usage:
    fmtoptr <handle-id> <chunk>

Examples:
    "fmtoptr 3160h 0"	Prints a description of the object whose address is
    	    	    	^l3160h:0 (likely a thread/process).

Synopsis:
    Takes a global and a local handle and prints a description of the
    object described by that optr.

Notes:
    * No newline follows the optr description. You must perform an additional
      "echo" if that's all you want on the current output line.

    * If the global handle is a thread or a process, the thread's name (process
      thread for a process handle) and the chunk handle (as an additional word
      of data for the message) are printed.

    * If the global handle is a queue handle, the queue handle and the chunk
      handle are printed, with a note that the thing's a queue.
      
    * If the optr is for an object whose class can be gotten, the optr,
      full classname, and current far pointer are printed. In addition, if the
      chunk has its low bit set, the word "parent" is placed before the
      output, to denote that the optr likely came from a link and is the
      parent of the object containing the optr.

See also:
    print

fmtval.print.utils
1620:Usage:
    fmtval <value-list> <type-token> <indent> [<tail> [<one-line> [<block-han>]]]

Examples:
    "fmtval [value fetch foo] [symbol find type FooStruct] 0"
    	    	    	Prints the value of the variable foo, which is
			assumed to be of type FooStruct.

Synopsis:
    This is the primary means of producing nicely-formatted output of
    data in Swat. It is used by both the "print" and "_print" commands and
    is helpful if you want to print the value of a variable without
    entering anything into the value history.

Notes:
    * <value-list> is the return value from "value fetch". You can, of course,
      glom together one of these if you feel so inclined.

    * <type-token> is the token for the type-description used when fetching
      the value.

    * <indent> is the base indentation for all output. When "fmtval" calls
      itself recursively, it increases this by 4 for each recursive call.
      "fmtval" assumes the cursor is already at this position on the current
      line for the first line of output.

    * <tail> is an optional parameter that exists solely for use in formatting
      nested arrays. It is a string to print after the entire value has been
      formatted. You will almost always omit it or pass the empty string.

    * <one-line> is another optional parameter used almost exclusively for 
      recursive calls. It indicates if the value being formatted is expected to
      fit on a single line, and so "fmtval" should not force a newline to be 
      output at the end of the value. The value should be 0 or 1.

See also:
    print, _print, fmtoptr, threadname.

print.top.print
2600:Usage:
    print <expression>

Examples:
    "p 56h"	    	    print the constant 56h in various formats
    "print 56h"	    	    print the constant 56h in various formats
    "print ax - 10"	    print ax less 10 decimal
    "print ^l31a0h:001eh"   print the absolute address of the pointer
    "print MyStruct es:di #4"
                            print 4 elements of MyStruct array
                            starting at address es:di 

Synopsis:
    Print the value of an expression.

Notes:
    * The expression argument is usually an address that has a type or
      that is given a type by casting and may span multiple arguments.
      The contents of memory of the given type at that address is
      what's printed. If the expression has no type, its offset part
      is printed in both hex and decimal. This is used for printing
      registers, eg.

      The first argument may contain the following flags (which start
      with '-' infront):
    	   x	integers (bytes, words, dwords if dwordIsPtr false)
    	    	printed in hex
    	   d	integers printed in decimal
    	   o	integers printed in octal
    	   c	bytes printed as characters (byte arrays printed as
    	    	strings, byte variables/fields printed as character
    	    	followed by integer equivalent)
    	   C	bytes treated as integers
    	   a	align structure fields
    	   A	Don't align structure fields
    	   p	dwords are far pointers
    	   P	dwords aren't far pointers
    	   r	parse regions
    	   R	don't try and parse regions

      These flags operate on the following TCL variables:
    	   intFormat	 A printf format string for integers
    	   byteAsChar	 Treat bytes as characters if non-zero
    	   alignFields	 Align structure fields if non-zero
    	   dwordIsPtr	 DWord's are far pointers if non-zero
    	   noStructEnum  If non-zero, doesn't print the "struct", "enum" or
    	    	    	 "record" before the name of a structured/enumerated
			 type -- just gives the type name.
    	   printRegions  If non-zero, prints what a Region * points to
    	    	    	 (bounds and so on).			
    	   condenseSpecial If non-zero, condense special structures (Rectangles,
			 OutputDescriptors, ObjectDescriptors, TMatrixes and all
			 fixed-point numbers) to one line.

    * This does not print enumerations. Use penum for that.

    * To print an array of fixed size elements, specify the number of
      elements by "#<num>" as the last argument. For example, "print
      MyStruct *ds:si #10" prints out 10 elements of MyStruct starting
      at address *ds:si.

See also:
    precord, penum.

_print.print.utils
810:Usage:
    _print <expression>

Examples:
    "_print ax-10"	print ax less 10 decimal.

Synopsis:
    Print the value of an expression.

Notes:
    * The difference between this command and the "print" command is a subtle
      one: if one of the arguments contains square-brackets, the Tcl interpreter
      will attempt to evaluate the text between the brackets as a command before
      _print is given the argument. If the text between the brackets is
      intended to be an array index, the interpreter will generate an error
      before the Swat expression evaluator has a chance to decide whether the
      text is a nested Tcl command or an array index.
      
      For this reason, this function is intended primarily for use by Tcl
      procedures, not by users.

See also:
    print, addr-parse

penum.print
362:Usage:
    penum <type> <value>

Examples:
    "penum FatalErrors 0"	print the first FatalErrors enumeration

Synopsis:
    Print an enumeration constant given a numerical value.

Notes:
    * The type argument is the type of the enumeration.

    * The value argument is the value of the enumeration in a 
      numerical format.

See also:
    print, precord.

precord.print
565:Usage:
    precord <type> <value> [<silent>]

Examples:
    "precord WelcomeProcessFlags c0h"	print the WelcomeProcessFlags
					record with the top two bits set

Synopsis:
    Print a record using a certain value.

Notes:
    * The type argument is the type of the record.

    * The value argument is the value of the record.

    * The silent argument will suppress the text indicating the record
      type and value.  This is done by passing a non zero value like
      '1'.  This is useful when precord is used by other functions.

See als:
    print, penum.

cvtrecord.swat_prog.util
736:Usage:
    cvtrecord <type> <number>

Examples:
    "cvtrecord [symbol find type HeapFlags] 36"	Return a value list for the
						number 36 cast to a HeapFlags
						record.

Synopsis:
    Creates a value list for a record from a number, for use in printing out
    the number as a particular record using fmtval.

Notes:
    * <type> is a type token for a record (or a structure made up exclusively
      of bitfields).

    * <number> must be an actual number suitable for the "expr" command. It
      cannot be a register or variable or some such. Use "getvalue" to obtain
      an integer from such an expression.

    * Returns a value list suitable for "value store" or for "fmtval".

See also:
    value, fmtval, expr, getvalue.

pbitmap.lib_app_driver.bitmap
448:Usage:
    pbitmap <address>

Examples:
    "pbitmap ^h3060h:163h"   	Print the bitmap from a gstring (the
				address comes from the output of the "pgs"
				command).

Synopsis:
    Print a bitmap graphically.

Notes:
    * The address argument is the address of the Bitmap or CBitmap
      structure.

    * Color bitmaps are printed with a letter representing the color
      as well.  The letters are index from the string (kbgcrvnAaBGCRVYW).


pdw.top.print
366:Usage:
    pdw	<register pair>

Examples:
    "pdw dxax"			
    "pdw dx.ax"			
    "pdw dx:ax"                 prints the dword value of register
                                pair dx:ax

Synopsis:
    Prints the dword value of a register pair

Notes:
    * The first register is the high register while the second is the
      low register.

See also:
    print.

pdgroup.top.print
769:Usage:
    pdgroup [<flags>] [<patient>]
	 
Examples:
    "pdgroup"		Prints out all dgroup variables of the current
			patient 
    "pdgroup -e *lock*" Prints out all dgroup variables matching expression
			"*lock*" of the current patient
    "pdgroup term"	Prints out all dgroup variables of the
			patient "term"
    "pdgroup -e *lock* term"
			Prints out all dgroup variables matching expression
			"*lock*" of the patient "term"

Synopsis:
    Prints out the variables defined in dgroup 

Notes:
    * Flags:
	-e <expression>
			Only prints out the variables matching <expression>.
			When -e flag is used, <expression> argument must be
			supplied. The expression syntax is the same as the
			one specified in "string match" command.

See also:
    print, pscope.

pwd.{path thread}
143:Usage:
    pwd

Examples:
    "pwd"

Synopsis:
    Prints the current working directory for the current thread.

See also:
    dirs, stdpaths.

dirs.{path thread}
133:Usage:
    dirs

Examples:
    "dirs"

Synopsis:
    Print the directory stack for the current thread.

See also:
    pwd, stdpaths.

stdpaths.{system.misc path}
141:Usage:
    stdpaths

Examples:
    "stdpaths"	    

Synopsis:
    Print out all paths set for standard directories

See also:
    pwd, dirs.

sysfiles.{system.file_system lib_app_driver.file_system}
366:Usage:
    sysfiles [all]

Examples:
    "sysfiles"

Synopsis:
    Print out all open files from dos's system file table.

Notes:
    * Normally SFT entries that aren't in-use aren't printed. If you give the
      optional argument "all", however, all SFT entries, including those that
      aren't in-use, will be printed.

See also:
    geosfiles, sftwalk, fwalk.

geosfiles.{system.file_system lib_app_driver.file_system}
312:Usage:
    geosfiles

Examples:
    "geosfiles"

Synopsis:
    Print out all the files for which I/O is currently pending in GEOS.

Notes:
    * This looks at the same dos structure as sysfiles but this prints
      only those files also listed in geos's job file table.

See also:
    sysfiles, sftwalk, fwalk.

dosState.system.dos
440:Usage:
    dosState

Examples:
    "dosState"

Synopsis:
    Print out the state of the caller of the current DOS function.

Notes:
    * This must be called during the time when dos is called.  This is
      used to determine what called dos.  This can be trickly since dos
      switches stacks.  This command is probably quite dos 3.3 specific.  If
      the machine is stopped in a BIOS routine, use dumpstack to find the
      caller.

dosMem.system.dos
124:Usage:
    dosMem

Examples:
    "dosMem"

Synopsis:
    Traverse DOS's chain of memory blocks, providing info about each.


sftwalk.{system.file_system lib_app_driver.file_system}
303:Usage:
    sftwalk

Examples:
    "sftwalk"

Synopsis:
    Print the SFT out by blocks.

Notes:
    * This is different than sysfiles in that it shows less details of
      the files and instead shows where the SFT blocks are and what
      files are in them.

See also:
    sysfiles, geosfiles, fwalk.

waitpostinfo.system.misc.obscure
196:Usage:
    waitpostinfo

Examples:
    "waitpostinfo"

Synopsis:
    Print wait/info test info.  This is an internal command.

Notes:
    * This is turned on in Library/Kernel/kernelConstant.def.

get-address.swat_prog.memory
564:Used by the various memory-access commands. Takes one argument, ADDR, being
the address argument for the command. Typically, the command is declared as
    [defcmd cmd {{addr nil}} ... ]
allowing the address to be unspecified. This function will return the given
address if it was, else it will return the last-accessed address (stored in
the global lastAddr variable as a 3-tuple from addr-parse) in the form of
an address expression. If no address is recorded (lastAddr is nil), the
default-addr argument is used.  If it is not specified then cs:ip will
be used.
set-address.swat_prog.memory
174:Set the last-accessed address recorded for memory-access commands. Single
argument is an address expression to be used by the next memory-access
command (except via <return>)
listi.top.memory
832:Usage:
    listi [<address>] [<length>]

Examples:
    "l"     	    	    disassemble at the current point of execution
    "listi geos::Dispatch"  disassemble at the kernel's dispatch routine
    "listi DocClip:IsOut"   disassemble at the local label
    "listi cs:ip 20"	    disassemble 20 instructions from the current
    	    	    	    point of execution

Synopsis:
    Disassemble at a memory address.

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then cs:ip is used for
      the address.

    * The length argument is the number of instructions to list.  It
      defaults to 16.

    * Pressing return after this command continues the list.

See also:
    istep, sstep, skip, where.

bytes.top.memory
713:Usage:
    bytes [<address>] [<length>]

Examples:
    "bytes" 	    	lists 16 bytes at ds:si
    "bytes ds:di 32"	lists 32 bytes at ds:di

Synopsis:
    Examine memory as a dump of bytes and characters.

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then ds:si is used for the
      address.

    * The length argument is the number of bytes to examine.  It 
      defaults to 16.

    * Pressing return after this command continues the list.

    * Characters which are not typical ascii values are displayed as a
      period.

See also:
    words, dwords, imem, assign.

words.top.memory
619:Usage:
    words [<address>] [<length>]

Examples:
    "words" 	    	lists 8 words at ds:si
    "words ds:di 16"	lists 16 words starting at ds:di

Synopsis:
    Examine memory as a dump of words.

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then ds:si is used for
      the address.

    * The length argument is the number of bytes to examine.  It 
      defaults to 8.

    * Pressing return after this command continues the list.

See also:
    bytes, dwords, imem, assign.

dwords.top.memory
651:Usage:
    dwords [<address>] [<length>]

Examples:
    "dwords"	    	lists 4 double words at ds:si
    "dwords ds:di 8"	lists 8 double words at ds:di

Synopsis:
    Examine memory as a dump of double words (32 bit hex numbers).

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then ds:si is used for
      the address.

    * The length argument is the number of bytes to examine.  It 
      defaults to 4.

    * Pressing return after this command continues the list.

See also:
    bytes, words, imem, assign.

imemPageLen.swat_variable.memory
82:Contains the number of elements to display when imem is given the ^D or ^U
command
imem.top.memory
3295:Usage:
    imem [<address>] [<mode>]

Examples:
    "imem"  	    enter imem mode at the address after the last one
                        examined, or at ds:si if none has been examined
    "imem ds:di"    enter imem mode at ds:di

Synopsis:
    Examine memory and modify memory interactively.

Notes:
    * The address argument is the address to examine.  If not
      specified, the address after the last examined memory location
      is used.  If no address has been examined then ds:si is used for
      the address.

    * The mode argument determines how the memory is displayed and
      modified.  The four modes display the memory in various
      appropiate formats. The modes are:

      Mode  Size   1st column	  2nd column	  3rd column
      ============================================================
      b	    byte   hex byte	  signed decimal  ASCII character
      w	    word   hex word	  unsigned dec.   signed decimal
      d	    dword  segment:offset signed decimal  symbol
      i	    ???    hex bytes	  assembler instr.

    * The default mode is swat's best guess of what type of object is
      at the address.

    * Imem lets you conveniently examine memory at different locations
      and assign it different values.  Imem displays the memory at the
      current address according to the mode.  From there you can move
      to another memory address or you can assign the memory a value.

    * You may choose from the the following single-character commands:

    	b, w, d, i  Sets the mode to the given one and redisplays
    	            the data.

    	n, j, <return>  Advances to the next data item.  The memory
    	       	    	address advances by the size of the mode.

        p, k   	    Returns to the preceding data item. The memory
    	    	    address decreases by the size of the mode.  When
    	    	    displaying instructions, a heuristic is applied to
    	    	    locate the preceding instruction. If it chooses
    	    	    the wrong one, use the 'P' command to make it
    	    	    search again.

        <space>	    Clears the data display and allows you to enter a new
    	    	    value appropriate to the current display mode.
    	    	    The "assign" command is used to perform the
    	    	    assignment, so the same rules apply as for it,
    	    	    with the exception of '- and "-quoted strings. A
    	    	    string with 's around it ('hi mom') has its 
    	    	    characters poked into memory starting at the current
    	    	    address. A string with "s around it ("swat.exe") likewise
    	    	    has its characters poked into memory, with the addition
    	    	    of a null byte at the end.

    	    	    THIS COMMAND IS NOT VALID IN 'i' MODE. 

    	  q	    quit imem and return to command level. The last
    	    	    address accessed is recorded for use by the other
    	    	    memory-access commands. 

    	  ^D	    Display a "page" of successive memory elements in the
    	    	    current mode.

    	  ^U  	    Display a "page" of preceeding memory elements in the
    	    	    current mode.

    	   h, ?  	    This help list.

    	For ^D and ^U, the size of a "page" is kept in the global
    	variable imemPageLen, which defaults to 10.

See also:
    bytes, words, dwords, assign.

print-huge-lmem.print 
477:Usage:
    print-huge-lmem [<flags>] handle

Examples:
    "print-huge-lmem 5ac0h"		print basic info about HugeLMem
					rooted at ^h5ac0h

    "print-huge-lmem -b ^h5ac0h"	print basic info and block info

    "print-huge-lmem -bc ^h5ac0h"	print basic info, block info
					


Synopsis:

    Prints information about a HugeLMem heap

Notes:

    Flags:

      -b      Prints info on each block in the HugeLMem heap

      -c      Prints info on each chunk in the HugeLMem heap

brkload.breakpoint
684:Usage:
    brkload [<handle>]

Examples:
    "brkload Interface"	    Stop the machine when the Interface resource is
			    loaded or swapped in.
    "brkload bx"    	    Stop the machine when the resource whose handle ID
			    is in BX is loaded or swapped in.
    "brkload"	    	    Stop watching for the previously-specified resource
			    to be loaded.

Synopsis:
    Stop the machine when a particular resource is loaded into memory.

Notes:
    * Only one brkload may be active at a time; registering a second one
      automatically unregisters the first.

    * If you give no <handle> argument, the previously-set brkload will be
      unregistered.

See also:
    handle.

threadstat.{system.thread thread}
202:Usage:
    threadstat

Examples:
    "threadstat"

Synopsis:
    Provides information about all threads and various thread queues and
    synchronization points in the system.

Notes:

See also:
    ps

pthread.{system.thread thread}
415:Usage:
    pthread <id>

Examples:
    "pthread 16c0h" 	Prints information about the thread whose handle is
    	    	    	16c0h

Synopsis:
    Provides various useful pieces of information about a particular thread,
    including its current priority and its current registers.

Notes:
    * <id> is the thread's handle ID, as obtained with the "ps -t" or
      "threadstat" command.

See also:
    ps, threadstat

freeze.{thread patient.running}
1376:Usage:
    freeze [ <patient> | :<n> | <patient>:<n> | <id> ]

Examples:
    "freeze term"   	Freezes the application thread for "term"
    "freeze :1"	    	Freezes thread #1 of the current patient
    "freeze 16c0h"  	Freezes the thread whose handle is 16c0h
    "freeze"		Freezes the current thread

Synopsis:
    Freezing a thread prevents a thread from running unless it's the only thread
    that's runnable in the entire system.

Notes:
    * A frozen thread is not dead in the water, as it will still run if nothing
      else is runnable.

    * Freezing a thread is most useful when debugging multi-threaded applica-
      tions where a bug appears to be caused by a timing problem or race
      condition between the two threads. Freezing one of the threads ensures
      a consistent timing relationship between the two threads and allows the
      bug to be reproduced much more easily.

    * The freezing of a thread is accomplished by setting its base and current
      priorities to as high a number as possible (255) thereby making the
      thread the least-favored thread in the system. The previous priority
      can be restored using the "thaw" command.

    * If you give no argument, Swat will freeze the current thread, which
      may or may not be the thread the target system thinks is the
      current thread.

See also:
    thaw, block, unblock

thaw.{thread patient.running}
661:Usage:
    thaw [ <patient> | :<n> | <patient>:<n> | <id> ]

Examples:
    "thaw term"   	Allows the application thread for "term" to run normally
    "thaw :1"	    	Allows thread #1 of the current patient to run normally
    "thaw 16c0h"  	Allows the thread whose handle is 16c0h to run normally
    "thaw"		Allows the current thread to run normally

Synopsis:
    Thawing a thread restores its priority to what it was before the thread
    was frozen.

Notes:
    * If you give no argument, Swat will thaw the current thread, which
      may or may not be the thread the target system thinks is the
      current thread.

See also:
    freeze, block, unblock

antifreeze.thread
978:Usage:
    antifreeze <patient>
    antifreeze :<n>
    antifreeze <patient>:<n>
    antifreeze <id>

Examples:
    "antifreeze term"   	Promotes the application thread for "term"
				to be the "most-runnable"
    "antifreeze :1"	    	Does likewise for thread #1 of the current
				patient
    "antifreeze 16c0h"  	Does likewise the thread whose handle is 16c0h
    "antifreeze"    	    	Promotes the current thread to be the
				"most-runnable."

Synopsis:
    Antifreezing a thread makes a thread the most-favored thread in the entire
    system. Should it ever be runnable, it will be the thread the system
    runs, possibly to the detriment of other threads...

Notes:
    * The antifreezing of a thread is accomplished by setting its base and
      current priorities to as low a number as possible (0) thereby making the
      thread the most-favored thread in the system. The previous priority
      can be restored using the "antithaw" command.

See also:
    antithaw

antithaw.thread
484:Usage:
    antithaw <patient>
    antithaw :<n>
    antithaw <patient>:<n>
    antithaw <id>

Examples:
    "antithaw term"   	Allows the application thread for "term" to run normally
    "antithaw :1"	Allows thread #1 of the current patient to run normally
    "antithaw 16c0h"  	Allows the thread whose handle is 16c0h to run normally

Synopsis:
    Thawing a thread restores its priority to what it was before the thread
    was given antifreeze.

Notes:

See also:
    antifreeze

block.{thread patient.running}
654:Usage:
     block  [ <patient> | :<n> | <patient>:<n> | <id> ]

Examples:
     "block term"   	Stops the application thread for "term" 
     "block :1"	        Stops thread #1 of the current patient 
     "block 16c0h"  	Stops the thread whose handle is 16c0h 
     "block"		Stops the current thread 

Synopsis:
     Make the current thread unrunnable, as if it had blocked on a semaphore.
     It will not execute again until it is explicitly unblocked.

Notes:
     * Argument syntax is the same as for switch
     * You can't block geos:0
     * Don't block in interrupts or while context switching is disabled.

See also:
     unblock, freeze, thaw
 
unblock.{thread patient.running}
706:Usage:
     unblock  [ <patient> | :<n> | <patient>:<n> | <id> ]

Examples:
    "unblock term"   	Allows the application thread for "term" to run
    "unblock :1"	Allows thread #1 of the current patient to run
    "unblock 16c0h"  	Allows the thread whose handle is 16c0h to run
    "unblock"		Allows the current thread to run

Synopsis:
     Undo the effects of the block command.  Make a thread runnable.

Notes:
     * The argument syntax is the same as for "switch".
     * This will not force a context switch, even if the unblocked thread
       has a higher priority then the current thread.
     * You can only "unblock" a thread which was stopped with "block"

See also:
     block, freeze, thaw
 
pvmt.{system.vm lib_app_driver.vm}
2522:Usage:
    pvmt [-p] [-a] [-s] [-c] (<handle> | <segment>)

Examples:
    "pvmt bx"	    	    	Print out all used blocks for the open
				VM file whose file handle is in BX
    "pvmt -as ds"   	    	Print out all blocks for the open VM file
				the segment of whose header block is in DS.

Synopsis:
    Prints out a map of the VM block handles for a VM file.

Notes:
    * The -p flag will only print out blocks that have the Preserve
      flag set.  Useful for examining object blocks in GeoCalc files,
      for example

    * The -a flag causes pvmt to print out all block handles, not just those
      that have been allocated. The other two types of block handles are
      "assigned" (meaning they're available for use, but currently are tracking
      unused space in the file) and "unassigned" (they're available for use).

    * The -s indicates the final argument is a segment, not a file handle. This
      is used only if you're inside the VM subsystem of the kernel, where DS
      always holds the segment of the header block for the file.

    * The -c flag requests a count of the different types of blocks at the end
      of the printout.
      
    * The blocks are printed in a table with the following columns:
	han	    	VM block handle (in hex)
	flags    	D if the block is dirty, C if the block is clean, - if
			the block is non-resident, L if the block is LMem, B if
			the block has a backup, P if the preserve handle bit is
			set for the block, ! if the block is locked, U if the
			block is a member of the set of "ungrouped" DB group
			blocks and can accept more DB items, Z if the block is
    			compressed.
	memhan  	Associated memory handle. Followed by "(d)" if the
			memory for the block was discarded but the handle
			retained. Followed by (s) if the memory has been swapped
			out.
	block type	The type of block:
			VMBT_USED	a normal in-use block,
			VMBT_DUP 	an in-use block that has been backed up
					or allocated since the last call to
					VMSave
			VMBT_BACKUP	a place-holder to keep track of the
					previous version of a VMBT_DUP block.
					The uid is the VM block handle to which
					the file space used to belong.
			VMBT_ZOMBIE	a block that has been freed since the
					last VMSave. The handle is preserved in
					case of a VMRevert (a VMBT_BACKUP block
					retains the file space).
	uid	    	The "used ID" bound to the block.
	size    	Number of bytes allocated for the block in the file.
	pos	   	The position of those bytes in the file.

See also:
    pgs.

pvmb.{system.vm lib_app_driver.vm}
93:Prints out the VMBlockHandle for a VM block given the file handle H and the
VM block handle B
pdb.{lib_app_driver.dbase}
238:Produces useful information about a DBase block. For now, only info about the
map block of the DBase file is produced. First arg H is the SIG_FILE or SIG_VM
handle's ID. Second arg B is the VM block handle for which information is
desired
wproc.swat_prog
228:Writes a command procedure NAME out to the file FILE. If optional third
arg APPEND is non-zero, the procedure will be appended to the file. Otherwise
it will overwrite the file. This does not know if a procedure is a subroutine.
pswap.{}
122:Usage:
    pswap 	    	- needs a special swap library.  see swap.asm
    	    	    	  Prints out useful swap information.

coverage.profile
1580:Usage:
    coverage [-sp | -x] (<patient> | <resource> | <function>)

Examples:
    "coverage geos"	    	    	Prints out the ranges of source lines
					in all loaded resources of the patient
					"geos", saying whether they've been
					executed or not.
    
    "coverage dump::Resident"	    	Prints out the ranges of source lines
					for the Resident module of the "dump"
					application, saying whether they've 
					been executed.
    
    "coverage -s FileSetCurrentPath"	Prints out the source of the
					"FileSetCurrentPath" function, placing
					a > beside every line that has *not*
					been executed.
    
    "coverage -p geos"	    	    	Prints out the percentage of the "geos"
    	    	    	    	    	patient which has been executed. This
					is the percentage of bytes, not the
					percentage of lines.
    
    "coverage -x geos"	    	    	Prints out a reduced summary of
	    	    	    	    	the percentage coverage for a geode.
    	    	    	    	    	
					This option can't be used with -s or
					-p. It generates overall statistics
					along with statistics about which
					functions were hit/not-hit.

Synopsis:
    Prints out information on the basic block execution coverage of a
    test suite.

Notes:
    * The patient in question must have been assembled with Esp's -pb flag
      turned on to insert the requisite code to remember when a basic block
      of code (a sequence of instructions that are always executed together)
      has been executed.

    * This is functional only for assembly language, currently.

See also:
    restally.

tcov.profile
923:Usage:
    tcov set <proc>
    tcov reset <proc>
    tcov print [-s] <proc>
    tcov clear <proc>

Examples:
    "tcov set AllocateHandleAndBytes"	Begin coverage analysis of
					AllocateHandleAndBytes
    "tcov reset InnerLoop"  	    	Reset the coverage counters for
					InnerLoop
    "tcov print -s InnerLoop"	    	Print the coverage counts for
					all the source lines of InnerLoop

Synopsis:
    Uses the "tbrk" command to perform basic-block profiling of one or
    more procedures.

Notes:
    * The "-s" flag to "tcov print" says to print out the source code of the
      function. Each line will be hold the number of times the source line was
      executed, followed by as much of the source line as will fit.

    * You can use the "reset" subcommand to reset the counts for the various
      breakpoints, allowing you to determine coverage for various sets
      of operations.

See also:
    coverage, tbrk.

psstack.lib_app_driver.postscript
390:Usage:
    psstack [<length>] [<address>]

Examples:
    "psstack"		lists all the elements on the stack
    "psstack 10"	lists the top 10 elements on the stack
    "psstack 1 es:0"	lists the top element on the stack, PSState at es:0

Synopsis:
    Dump the PostScript interpreters' execution stack

Notes:
    * This is only really useful inside the PostScript interpreter code

See also:


pspath.lib_app_driver.postscript
312:Usage:
    pspath [<address>]

Examples:
    "pspath"		lists all the elements of the current path
    "psstack es:0"	lists the path elements, PSState at es:0

Synopsis:
    Dump the PostScript interpreters' current path

Notes:
    * This is only really useful inside the PostScript interpreter code

See also:


iclas.lib_app_driver
38:Commands relating to the iclas library
useful_aliases.lib_app_driver.iclas
150:Note the following handy aliases, which are already set up for use:

    alias	ilstat	{display 2 {pitemname}}
    alias	pwot	{print WShellObjectType}

phfile.lib_app_driver.iclas
268:Usage:
    phfile [<address>]

Examples:
    "phfile"	    	    	print the HugeFileInfoStruct at es:0

Synopsis:
    Print out a HugeFile read buffer.

Notes:
    * The address argument is the address of the HugeFileInfoStruct
      This defaults to es:0.  

See also:

monitorIclas.lib_app_driver.iclas
541:Usage:
    monitorIclas <flags>

Examples:
    "monitorIclas"	   	monitor class operations
    "monitorIclas -f"		monitor file traffic
    "monitorIclas -Vl"		monitor link verification in *every* way.

Synopsis:
	Print messages at various points in the execution of the iclas
	library code.

Notes:
	Flags are as follows:
		-c	class operations
		-l	link verification code
		-f	file traffic
		-b	bookmarks (not supported yet)
		-i	item line code
	
		-V	Verbose (give me all you've got)
		-M	Minimize (only super-critical messages)

See also:

monitor-iclas-class-operations.lib_app_driver.iclas
204:Usage:
    monitor-iclas-class-operations

Examples:
    "monitor-iclas-class-operations"	   	

Synopsis:
	Print messages at various points in the execution of the iclas
	library code.

Notes:

See also:

fileTraffic.lib_app_driver.iclas
20:Usage:
	fileTraffic

kbdperf.{lib_app_driver.text profile}
44:Print out timing information for VisTextKbd

snap.{top.crash}
548:Usage:
    snap [<subject>]

Examples:
    "snap"    		Comment on your mother.
    "snap fat"  	Comment on your mother's weight.
    "snap stupid"  	Comment on your mother's IQ.
    "snap old"  	Comment on your mother's age.
    "snap ugly"  	Comment on your mother's beauty.
    "snap nasty"  	Comment on your mother's je ne sais quoi.
    "snap poor"  	Comment on your mother's economic status.

Synopsis:
    Echoes a comment about your mother to the screen.

Notes:
    * Yes, this program personally knows yo' mama.

See also:
    Yo' sister.

print-folder-buffer.lib_app_driver.gmgr
1328:Usage:
    print-folder-buffer [<flags> <address>]

Examples:
    "pfb"   	    			print the display list of the
					folder at ds:si 
    "print-folder-buffer"		print the display list of the
					folder at ds:si 
    "print-folder-buffer -Anap"		prints the names, attributes,
					and positions of *all* FolderRecords,
    "print-folder-buffer -nwS ds:bx"	prints the names and
					WShellObjectTypes of all files
					in the selected list of 
					the folder at ds:bx 
	
Synopsis:
    Print out all the FolderRecords in the folder buffer of the given folder.

Notes:
    * The address argument is a pointer to FolderClass instance data.
      This defaults to ds:si.  

    * The flags are assigned as follows:
		-D	print file on the display list
		-S	print files on the selected list
		-A	all FolderRecords

		-n	print filenames
		-s	print sizes
		-p	print position of each file
		-t 	print GeosFileType of each file
		-w 	print WShellObjectType of each file
		-i 	print each file's icon token characters
    	    	-I  	print each file's 32-bit file ID
    	    	-o  	print each record's offset
    	    	-b  	print bounding box
		-a 	print FileAttrs & GeosFileHeaderFlags:

				A = archive
				D = directory
				V = volume
				S = DOS system file
				H = DOS hidden
				R = read-only

				L = link
				T = template

See also:

print-positions.lib_app_driver.gmgr
576:Usage:
    print-positions [-D | -S | -A] [<folder>]

Examples:
    "pp"    		    	    print the positions of all files in 
                                    the display list of the folder at *ds:si 
    "print-positions"	    	    print the positions of all files in 
                                    the display list of the folder at *ds:si 

Synopsis:
    Print out a all the bounding boxes of files in the given folder.

Notes:
    * The address argument is the address of FolderClass instance data.
      This defaults to *ds:si.  

See also:
    print-folder-buffer

pfileids.lib_app_driver.gmgr
431:Usage:
    pfileids [-D | -S | -A] [<folder>]

Examples:
    "pfileids"	    	    print the ID of all files in the display
			    list of the folder at *ds:si

Synopsis:
    Print out the file id (32-bit ID, and disk handle) for all files in the
    display list of the given folder.

Notes:
    * The address argument is the address of FolderClass instance data.
      This defaults to *ds:si.  

See also:
    print-folder-buffer

gloss.support.reference
131:'gloss regexp' prints out the glossary definition of 'regexp', which is a
regular expression (or just a word) that is given to SED.
ref.support.reference
241:'ref routineName' prints out the routine header for a function. If no function
is given, the function active in the current stack frame is used. This command
locates the function using a tags file, so that tags file should be kept
up-to-date
xref.support.reference
153:'xref routineName' prints out a cross reference for the given kernel function.
If no function is given, the function active in the current frame is used.
wshell.lib_app_driver
27:Commands relating to WShell
opentree.lib_app_driver.wshell
103:Usage:

    opentree

Examples:

			
Synopsis:

    Prints out all the "open" files
Notes:

See also:


ptcp.top.socket.tcp
246:Usage: 
    ptcp

Synopsis:
    Prints out information about all TCP  connections.  
    Information printed includes connection handle, local port,
    remote port, remote IP address, local IP address and TCP state.

See also:
    ptcpcon, ptcb

ptcpcon.top.socket.tcp
591:Usage:
    ptcpcon <connection handle>
    
Examples:
    "ptcpcon 12h"   	    	print info for connection whose handle is 12h

Synopsis:
    Prints out detailed information about a Tcp connection.  Information 
    printed includes domain handle of link used for the connection, max
    size of the output queue, optr of the output queue, amount of data 
    waiting to be added to the output queue, optr of input queue, 
    whether a thread is waiting for an operation to complete for that 
    connection, destruct timeout, and error associated with connection.

See also:
    ptcp, ptcb

ptcb.top.socket.tcp
437:
Usage:
    ptcb <connection handle>

Examples:
    "ptcb 12h"   	    print TCB info for connection whose handle is 12h

Synopsis:
    Prints transmission control info about a Tcp connection.  Information
    printed includes Tcp state, send unacknowledged, send next, send urgent
    pointer, receive next, receive urgent pointer, send max, last ack sent,
    max segment size, max window size and timers.

See also:
    ptcp, ptcpcon


plink.top.socket.tcp
441:Usage:
    plink [<flag> | <link domain handle>]

Examples:
    "plink" 	       	    Print the complete link table
    "plink 0"	       	    Print info about link whose domain handle is 0
    "plink -l"	    	    Print info about the loopback link
    "plink -m"	    	    Print info about the main link used by Tcp
    "plink -c"	    	    Print the number of links Tcp knows about

Synopsis:
    Prints information about link(s) used by Tcp.

tcplog.top.socket.tcp
881:Usage:
    tcplog {args}

Examples:
    "tcplog"	    	report on Tcp's logging status
    "tcplog on"	    	turn on Tcp packet header logging
    "tcplog off"    	turn off Tcp packet header logging

Synopsis:
    Allow automatic Tcp packet header logging.  Log output will be 
    written to the file "tcplog" in the users home directory.

Notes:
    * The argument can be one of the following:
    	on  	    header of every packet sent and received will be logged
    	off 	    disables packet header logging
    	
    * If no argument is passed, tcplog displays the current logging state.

    * Not needed if Tcp has been compiled with logging enabled.  This command
      will duplicates Tcp logging, except packets sent on the loopback link
      will only be logged during receipt.

    * Log file will be created if it does not already exist.  Else it will
      be created.


ref.support.reference
241:'ref routineName' prints out the routine header for a function. If no function
is given, the function active in the current stack frame is used. This command
locates the function using a tags file, so that tags file should be kept
up-to-date
makeref.support.reference
463:'makeref ' calls ref on ALL functions for a geode. First argument PATIENT is
the patient for which to generate the reference tree. Second optional argument
DIR is the reference directory below which to create the reference tree and
defaults to /staff/pcgeos/refs. E.g. "makeref kernel" would cause files to be
created in the tree /staff/pcgeos/refs/Kernel. All functions exported by the
patient have their headers extracted in the proper form in right shadow file
pfoamrec.{}
27:Usage:
	pfoamrec <address>

fref.support.reference
242:`fref routineName' prints out the routine header for a function. If no function
is given, the function active in the current stack frame is used. This command
locates the function using a tags file, so that tags file should be kept
up-to-date
makefref.support.reference
465:'makefref ' calls fref on ALL functions for a geode. First argument PATIENT is
the patient for which to generate the reference tree. Second optional argument
DIR is the reference directory below which to create the reference tree and
defaults to /staff/pcgeos/refs. E.g. "makeref kernel" would cause files to be
created in the tree /staff/pcgeos/refs/Kernel. All functions exported by the
patient have their headers extracted in the proper form in right shadow file
pchart.lib_app_driver.chart
304:Usage:
    pchart [<address>]

Examples:
    "pchart"	    	print the chart object at *ds:TemplateChartGroup
    "pchart es:0"	print the chart object at *es:TemplateChartGroup

Synopsis:
    Print information about a chart

Notes:
    * The default <address> is ds:0

See also:
    pparea, paxis, pparams

paxis.lib_app_driver.chart
246:Usage:
    paxis [<address>]

Examples:
    "paxis"			print the axis at *ds:si
    "paxis ds:di"		print the axis at ds:di

Synopsis:
    Print information about an axis

Notes:
    * The default <address> is *ds:si

See also:
    pchart, pparams

pparea.lib_app_driver.chart
288:Usage:
    pparea [<address>]

Examples:
    "pparea"		print plot area at *ds:TemplatePlotArea
    "pparea es:0"	print plot area at *es:TemplatePlotArea

Synopsis:
    Print information about the plot area

Notes:
    * The default <address> is ds:0

See also:
    pchart, paxis, pparams

ptitle.lib_app_driver.chart
279:Usage:
    ptitle <address>

Examples:
    "ptitle"	    	print the title at *ds:si
    "ptitle ds:di"	print the title at ds:di

Synopsis:
    Print information about a chart title object

Notes:
    * The default <address> is *ds:si

See also:
    pparea, paxis, pparams, pchart

charttree.lib_app_driver.chart
130:Usage:
    charttree [<address> [<extra-field>]]

Examples:

Synopsis:
    Some day chris might fill this in.

Notes:

See also:


domains.top.socket
859:Usage:
    domains [-l]

Examples:
    "usage"	Explanation

Synopsis:
    short description of command's purpose

Notes:
    * The output of domains -l differs for data and link drivers. For data
      drivers, each "link" is shown as
    	h=xxxxh socket=yyyyh
      h= gives the CI_handle field (whatever that is), while socket= gives
      the handle of the connected socket.

      For a link driver, the link shows
    	nn  h=xxxxh i=yyyyh s=state r=mm
      and is followed by a hex/ascii dump of the address for the link. h= is
      the handle supplied by the driver for the link. i= is the ID assigned the
      link by the Socket library. state is the connection state. r= is the
      reference count. nn is the value history number for looking at the 
      LinkInfo structure yourself.
    	
See also:
    comma-separated list of related commands

ports.top.socket
269:Usage:
    ports [-s] [-l] [-q] [-d <domain>]

Examples:
    "usage"	Explanation

Synopsis:
    short description of command's purpose

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

sockets.top.socket
242:Usage:
    sockets

Examples:
    "usage"	Explanation

Synopsis:
    short description of command's purpose

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

tcpconn.top.socket
268:Usage:
    syntax diagram
    syntax diagram

Examples:
    "usage"	Explanation

Synopsis:
    short description of command's purpose

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

trackResourceCall.{interrupt system.misc}
61:Usage:
         trackResourceCall [print {lowBound} | reset]

pdbevent.lib_app_driver.geoplanner
423:Usage:
    pdbevent <group> <item>
     
Examples:
    "pdbevent ax di"	Print the event in database at Group:Item AX:DI
    "pdbevent d4h 18h"	Print the event in database at Group:Item D4h:18h

Synopsis:
    Print information about an event in a dbase item of GeoPlanner 
    (Calendar) database. 

Notes:
    * dgroup:[vmFile] has to be open and contains valid VM file handle.

See also:
    print-db-item, print-db-group

pidarray.lib_app_driver.geoplanner
401:Usage:
    pidarray <event ID array handle>
     
Examples:
    "pidarray 74h"		Print out the event ID array elements in VM
				Block handle 74h 

Synopsis:
    Print out the elements of event ID array of GeoPlanner (Calendar) appl.

Notes:
    It sometimes prints nothing where there are ID array entries
    because some huge array directory or data blocks are not residents.

See also:
    pharray

phelp.lib_app_driver.help
335:Usage:
    phelp [<flags>] [<address>]

Examples:
    "phelp ^l20c0h:20h"	    print help text for object at ^l20c0h:20h
    "phelp -h"	    	    print history for help object at *ds:si

Synopsis:
    Print information about a help object.

Notes:
    * The default address is *ds:si

See also:
    
    fonts, pfont, pusage, pfontinfo.

pq.lib_app_driver.spool
52:Prints out the contents of the current print queues.
show-int13-calls.profile
322:Usage:
	show-int13-calls

Synopsis:
	When assembling a DOS driver with DEBUG_BOOT_SECTOR_CALLS = TRUE,
	allows shadowing of all int 13h calls, except for read and write
	sector calls to drives other than drive B.  Also shows some Int 21h
	calls.   Modify DebugBootSectorCalls in IFS/DOS/Common et al for other 
	behavior.

pwritedoc.lib_app_driver.geowrite
103:ptext [-lsrt] ADDR - Prints out a GeoWrite document object
	-c: print out the characters (the default)

videolog.lib_app_driver.video
30:Prints video logging test info
oldvideolog.lib_app_driver.video
30:Prints video logging test info
pparams.lib_app_driver.chart
299:Usage:
    pparams [<address {}>]

Examples:
    "pparams"	    	print the chart parameters for the chart block
    	    	    	    whose segment is in ds.
    "pparams ^hax"    	print the chart parameters at ^hax

Synopsis:
    Print a chart parameter block in human readable form

Notes:

See also:

pdup.lib_app_driver.chart 
154:
Usage:
    pdup [<address>]
Synopsis:
    Print the duplicates for a chart parameters block.
Notes:
    * If you give no address argument, ds:0 is used.

vi.support.unix.editor
481:Usage:
    vi [<args>]

Examples:
    "vi"    	    	start vi with the source file the patient is using
    "vi -t MyFunc"  	start vi at the function MyFunc

Synopsis:
    Invoke "vi" with the specified arguments.

Notes:
    * The args arguments are all passed to vi.  If none are given then
      vi starts with the source file that the patient is executing.
      If the source file is unknown, then a tags is tried on the
      function currently executing.

See also:
    vif.

ls.support.unix
364:Usage:
    ls [<args>]

Examples:
    "ls"    	    list the current directory.
    "ls -l" 	    list the current directory in the long format.

Synopsis:
    List the current Unix directory.

Notes:
    * The args arguments are all passed as is to the 'ls' command.

    * The '-C' flag is automatically passed (otherwise the output
      wouldn't be in columns).

pmake.support.unix
335:Usage:
    pmake [<args>]

Examples:
    "pmake" 	    recompile the current patient.

Synopsis:
    Recompile the current patient.

Notes:
    * The args arguments are all passed to pmake as is.

    * This works by changing the directory to where the patient's file
      is kept.

    * This doesn't download the recompiled patient.

vif.support.unix.editor
388:Usage:
    vif [<function name>]

Examples:
    vif"    	    start vi with the current function.
    "vif MyFunc"    start vi with the function 'MyFunc'.

Synopsis:
    Start vi with a function loaded.

Notes:
    * The function name argument is the name of a function which is 
      kept in a tags file.  If none is specified then the current
      function is used.

See also:
    vi.

which.support.unix
457:Usage:
    which [-d] [<gname>]

Examples:
    "which" 	    	    display version of current geode
    "which geocalc" 	    display version of geocalc
    "which -d geos" 	    display version and date/time of kernel

Synopsis:
    Display which version of a geode is in use.

Notes:
    * If no geode name is specified, the current geode is used.

    * The '-d' flag displays the UNIX date/time stampe of the geode in
    addition to the path of the geode.

cwatch.lib_app_driver.chart
345:Usage:
    cwatch [on]

Examples:

    "cwatch -g"     Watch Chart Geometry
    "cwatch -s"     Watch Chart Body suspends/unsuspends
    "cwatch -S"	    Watch ChartObjectState changes
    "cwatch -p"	    Watch positioning
    "cwatch"        Turn off chart watching

Synopsis:
    Lets you watch chart geometry as it happens.

Notes:

See also:

ptelnetinfo.top.socket.telnet
330:Usage:
    ptelnetinfo [<expression>]

Examples:
    "ptelnetinfo es:di"         print the TelnetInfo at address specified in
                                ES:DI
    "ptelnetinfo"               Use default DS:SI as pointer to TelnetInfo 

Synopsis:
    Print TelnetInfo structure 

Notes:
    None

See also:
    ptelnetoptdesc

ptelnetoptdesc.top.socket.telnet 
407:Usage:
    ptelnetoptdesc [<expression>]

Examples:
    "ptelnetoptdesc es:di"         print the TelnetOptionDescArray at
                                   address specified in ES:DI
    "ptelnetoptdesc"               Use default DS:SI as pointer to 
                                   TelnetOptionDescArray

Synopsis:
    Print TelnetOptionDescArray structure 

Notes:
    None

See also:
    ptelnetinfo

telnetcmdwatch.top.socket.telnet
785:Usage
    telnetcmdwatch sent
    telnetcmdwatch recv
    telnetcmdwatch all
    telnetcmdwatch clear
    telnetcmdwatch

Examples:
    "telnetcmdwatch sent"	Set watch points for any TelnetCommand sent
    "telnetcmdwatch recv"	Set watch points for any TelnetCommand
				received 
    "telnetcmdwatch all"	Set watch points for both TelnetCommand sent
				and received
    "telnetcmdwatch clear"	Remove all watch points of TelnetCommand

Synopsis:
    Set watch points of TelnetCommand send and/or received.

Notes:
    All option and suboption negotiation commands will not be displayed. To
    watch those negotation, you can use "telnetoptwatch" command.

    In summary the following commands will NOT be displayed:

	SE, SB, WILL, WONT, DO, DONT, IAC

See also:
    telnetoptwatch

telnetoptwatch.top.socket.telnet
697:Usage:
    telnetoptwatch sent
    telnetoptwatch recv
    telnetoptwatch all
    telnetoptwatch clear
    telnetoptwatch

Examples:
    "telnetoptwatch sent"	Set watch points for any Telnet options sent
    "telnetoptwatch recv"       Set watch points for any Telnet options
                                received 
    "telnetoptwatch all"        Set watch points for both Telnet options sent
                                and received
    "telnetoptwatch clear"      Remove all watch points of Telnet options
    "telnetoptwatch"            Same as "telnetoptwatch clear"

Synopsis:
    Set watch points on Telnet options sent and/or received.

Notes:
    None

See also:
    telnetcmdwatch

tswalk.lib_app_driver.spool
191:Usage:
    tswalk <address>

Examples:
    tswalk ds:di

Synopsis:
    Print a TextStrings block for ascii printing.

Notes:
    * The address argument is the address of a TextStrings block.

mdwatch.support.makedisk
127:Usage:
    mdwatch

Examples:
    "mdwatch"	   	

Synopsis:
	Print messages at various points in execution.

Notes:

See also:

chart.lib_app_driver
38:Commands relating to the chart library
nimbus.lib_app_driver.font
33:Commands relating to nimbus fonts
gmgr.lib_app_driver
31:Commands relating to GeoManager
help.lib_app_driver
37:Commands relating to the help library
keyboard.lib_app_driver
33:Commands relating to the keyboard
postscript.lib_app_driver
42:Commands relating to the postscript driver
spline.lib_app_driver
39:Commands relating to the spline library
spool.lib_app_driver
38:Commands relating to the spool library
video.lib_app_driver
38:Commands relating to the video drivers
points.lib_app_driver.spline 
753:Usage:
    points [<address>] [<args>]

Examples:
    "points"	    	Print the spline points for the spline
    	    	    	whose instance data is at es:bp

    "points es:bp -n"	Print only the coordinates for the points
    	    	    	of the spline at es:bp.

    "points *ds:si -a"  Print the spline points at address *ds:si
Synopsis:
    Print the points of a spline

Notes:
    If no arguments are passed, or if es:bp is passed, then es:bp
    is assumed to be the Vis-level instance data of the spline 
    object.  Otherwise, the passed address is assumed to be a
    pointer to the Object, and the instance data is dereferenced
    accordingly.

    If passing the "-n" flag, you MUST pass an address for the spline.
    (So Sorry!)

See also:
   

pundo.lib_app_driver.spline
759:Usage:
    pundo [<address>]

Examples:
    "pundo"	    	Print the undo points for the spline
    	    	    	whose instance data is at es:bp

    "points es:bp -n"	Print only the coordinates for the points
    	    	    	of the spline at es:bp.

    "points *ds:si -a"  Print the undo array at address *ds:si
Synopsis:
    Print the points of a spline

Notes:
    If no arguments are passed, or if es:bp is passed, then es:bp
    is assumed to be the Vis-level instance data of the spline 
    object.  Otherwise, the passed address is assumed to be a
    pointer to the Object, and the instance data is dereferenced
    accordingly.

    If passing the "-n" flag, you MUST pass an address for the spline.
    (So Sorry!)

See also:

    Print the undo array

pnew.lib_app_driver.spline 
653:Usage:
    pnew [<address>]

Examples:
    "pnew"	    	Print the new points for the spline
    	    	    	whose instance data is at es:bp

    "pnew *ds:si -a"  Print the undo array at address *ds:si

Synopsis:
    Print the list of "new" points

Notes:
    If no arguments are passed, or if es:bp is passed, then es:bp
    is assumed to be the Vis-level instance data of the spline 
    object.  Otherwise, the passed address is assumed to be a
    pointer to the Object, and the instance data is dereferenced
    accordingly.

    If passing the "-n" flag, you MUST pass an address for the spline.
    (So Sorry!)

See also:

    Print the undo array

psel.lib_app_driver.spline 
478:Usage:
    psel [<address>]

Examples:
    "psel"	    	Print the new points for the spline
    	    	    	whose instance data is at es:bp

Synopsis:
    Print the list of "new" points

Notes:
    If no arguments are passed, or if es:bp is passed, then es:bp
    is assumed to be the Vis-level instance data of the spline 
    object.  Otherwise, the passed address is assumed to be a
    pointer to the Object, and the instance data is dereferenced
    accordingly.

See also:


psc.lib_app_driver.spline
0:
netlib.lib_app_driver.net
418:Usage:
    netlib [<args>]

Examples:
    "netlib -p"	    print list of ports open by the Comm driver
    "netlib -s"	    print list of sockets open by the Comm driver

Synopsis:
    Print various bits of net library shme.

Notes:
    * The args argument may be chosen from the following:
    	-d  	domain information
    	-p  	ports open by Comm driver
    	-s  	socket information for Comm driver

See also:
    pcp

pcp.lib_app_driver.net
166:Usage:
    pcp [address]

Examples:
    pcp	es:di	    - print the packet at es:di

Synopsis:
    Print out a packet for the Comm driver

Notes:

See also:
    netlib

emacsIgnore.swat_variable.output
61:If non-zero, ewatch ignores all routines in emacs-ignore-list
ewatch.support.unix.editor
1865:Usage:
    ewatch [<args>]

Examples:
    "ewatch"        report on ewatch's status
    "ewatch on"     turn on ewatch

Synopsis:
    Allow automatic emacs updating of the point of execution.

Notes:
    * The argument can be one of the following:
    	on 	every time the machine stops or you change stack
    	    	frames, EMACS will display the file and line for the
    	    	current cs:ip, placing a little "=>" at the start of
    	    	the line so you know where it is.
    	off	disables the above.
    	show	causes EMACS to display the current frame's cs:ip, but
    	    	only does it once -- it won't follow the execution on
    	    	the PC.

    * If no argument is passed, ewatch returns its current state.

    * For emacs to be updated, ewatch must be turned on in swat, and
      the server must be started in emacs ('M-x start-server' or have
      the command (start-server nil) in you .emacs file).

    * Emacs may also be updated by typing 'emacs'.

    * The variable emacs-ignore-list contains a list of the functions that
      are not displayed when swat is stopped in them. This means that you
      can't use istep/ewatch to step through these routines. It also means
      that you won't be annoyed by having some routine you're not interested
      in displayed when you hit ctrl-C in swat.

      You can add your own routines to this list by putting the command:
		var emacs-ignore-list [concat [var emacs-ignore-list] {
				<routine1>
				<routine2>
				}]
      in your .swat file or in some other file which you can load.

    * The variable emacsIgnore is non-zero if emacs should not display
      the routines in the emacs-ignore-list. If you wish to debug a routine
      in this list, set this variable to zero with:
    	    	var emacsIgnore 0
      The default value for emacsIgnore is 1.

See also:
    emacs, frame, istep.

emacs.support.unix.editor
481:Usage:
    emacs [<address>]

Examples:
    "emacs"	        show the point of execution (cs:ip)
    "emacs Dispatch"    show the routine 'Dispatch' in emacs

Synopsis:
    Display the source code for an address.

Notes:
    * The address argument specifies what code to show in emacs.

    * For emacs to be updated the server must be started in emacs
      ('M-x start-server' or have the command (start-server nil) in
      you .emacs file).

See also:
    ewatch, frame, istep.

msgq.top.clavin
466:Usage:
    msgq <head>

Examples:
    "msgq di"	Print the contents of the message queue whose handle is in di
    "msgq -i"	Print the contents of the inbox
    "msgq -o" 	Print the contents of the outbox
    "msgq -t:1"	Print the queue for the outbox transmit thread mailbox:1

Synopsis:
    

Notes:
    * The numbers under the "@" heading are value history references to the
      MailboxMessageDesc structures for the individual messages.

See also:
    othread.

cmsg.top.clavin
559:Usage:
    cmsg <group> <item>
    cmsg <variable>

Examples:
    "cmsg dx ax"	Prints a short description of the message whose 
			MailboxMessage token resides in dxax
    "cmsg curMsg"   	Prints a short description of the message whose
			MailboxMessage token is in the "curMsg" variable.

Synopsis:
    Prints a short description of a particular message

Notes:
    * To look at the individual fields of the message descriptor, use @n in
      subsequent commands, where n is the number in the @ column of this 
      command's output.

See also:
    msgq.

cmsgaddr.top.clavin
533:Usage:
    cmsgaddr <MailboxMessageDesc>
    cmsgaddr <MailboxMessage>
    cmsgaddr <group> <item>

Examples:
    "cmsgaddr @16"	Prints out the addresses for the message that was 
			printed by msgq with an @-column entry of 16
    "cmsgaddr dx ax"	Prints out the addresses for the message whose
			MailboxMessage token is in dxax

Synopsis:
    Displays the address(es) for a registered Clavin message. If the message
    is in the inbox, the address(es) displayed is(are) the source address(es).

Notes:

See also:
    cmsg, msgq.

track-refs.top.clavin
525:Usage:
    track-refs (on|off)

Examples:
    "track-refs on"	Turns on debugging info showing each reference being
			added or removed to any Clavin message
    "track-refs off"   	Turns off debugging info

Synopsis:
    Provides the information needed to find what is leaving around references to
    Clavin messages. It prints out what routine (outside the DBQ module) is
    causing each reference to be added or removed. You can pair them up to
    find which is missing the required DBQDelRef call.

See also:
    msgq.

cpanels.top.clavin
410:Usage:
    cpanels <which>

Examples:
    "cpanels -o"	Print the list of control panels up for the outbox
    "cpanels -i"	Print the list of control panels up for the inbox

Synopsis:
    Prints a description of the control panels currently on-screen for one of
    the boxes

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

cprog.top.clavin
278:Usage:
    cprog <which>

Examples:
    "cprog -o"	    	Print the list of progress boxes for transmission
    "cprog -i"	    	Print the list of progress boxes for reception

Synopsis:
    Prints the array of progress boxes for transmission or reception.

See also:
    cpanels.

cmedia.{top.clavin}
568:Usage:
    cmedia -s [<manuf> <id>]
    cmedia -t [<manuf> <id>]
    cmedia -o

Examples:
    "cmedia -s"	Shows the currently available/connected media units.
    "cmedia -t"	Shows the media -> transport driver mapping
    "cmedia -o" Lists all the media/transport/transOption tuples for messages
		in the outbox

Synopsis:
    Prints out information about transport media, as stored in the Mailbox
    library's administrative file.

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

dmap.top.clavin
252:Usage:
    dmap (-t | -d)

Examples:
    "dmap -t"	Print out the transport driver map
    "dmap -d" 	Print out the data driver map

Synopsis:
    Displays the contents of the driver maps for the transport and data drivers

Notes:

See also:
    cmedia

vms.top.clavin
264:Usage:
    vms -a
    vms -o

Examples:
    "vms -a"	Print a description of all the files in the VM store
    "vms -o"	Print a description of all open files in the VM store

Synopsis:
    Prints info about the VM store

Notes:

See also:
    msgq, cmedia, cpanels

cthread.top.clavin
588:Usage:
    cthread [-i | -o] [<thread-handle> | :<thread-num>]

Examples:
    "cthread"	    Prints info for all transmit threads
    "cthread -i"    Prints info for all registered receive threads
    "cthread bx"    Prints info for the transmit/receive thread whose handle is
		    in bx
    "cthread :2"    Prints info for the transmit/receive thread known as 
		    mailbox:2

Synopsis:
    Prints a summary of what each transmit or receive thread is 

Notes:
    * Note on subcommand

    * Another note on a subcommand or usage

See also:
    comma-separated list of related commands

capps.top.clavin
401:Usage:
    capps

Examples:
    "capps"	Prints out the table of applications about which Clavin knows.

Synopsis:
    Displays the mapping from token to name that Clavin maintains for
    applications.

Notes:
    * The token -> name mapping doubles as the thing that knows whether there
      are any messages for a particular token. This info is also printed out
      for you.

See also:
    msgq.

pkmap.lib_app_driver.keyboard
162:Usage:
    pkmap <addr> <filename>

Examples:
    "pkmap ds:si /tmp/kmap"

Synopsis:
    Prints a keyboard map in assembly-language format.

See also:
    <none>

pnimbit.lib_app_driver.font.nimbus
231:Usage:
    pnimbit <address>

Synopsis:
    Print a Nimbus bitmap.

Notes:
    * This is an internal command.

    * The address argument is the address of the bitmap in a nimbus font.

See also:
    pnimdata, pnimcommand, tnimbus

tnimbus.lib_app_driver.font.nimbus
188:Usage:
    tnimbus

Synopsis:
    Trace Nimbus character data commands while building characters.

Notes:
    * This is an internal command.

See also:
    pnimbit, pnimcommand, pnimdata.

pnimchar.lib_app_driver.font.nimbus
471:Usage:
    pnimchar <character> <font> [<styles>]

Synopsis:
    Print the Nimbus data for a character in a given font.

Notes:
    * This is an internal command.

    * The character argument may either be a character or the ASCII
      code for a character.

    * The font argument requires a PC/GEOS font ID.

    * The styles argument requires a list of styles.  If not specified 
      plain text is assumed.

See also:
    pnimdata, pnimbit, pnimcommand, tnimbus.

pnimdata.lib_app_driver.font.nimbus
246:Usage:
    pnimdata <address>

Synopsis:
    Print the Nimbus data for a character.

Notes:
    * This is an internal command.

    * The address argument is the address of an outline font.

See also:
    pnimbit, pnimchar, pnimcommand, tnimbus.

pnimcommand.lib_app_driver.font.nimbus
262:Usage:
    pnimcommand <address>

Synopsis:
    Print Nimbus data from memory, and advance a ptr appropriately.

Notes:
    * This is in internal command.

    * The address argument is the address to a Nimbus command.

See also:
    tnimbus, pnimdata, pnimbit.

profile.profile
407:Profile a section of code producing output that shows what calls were made
and how long they took.
    -x <routine>        Step over calls to <routine>
    -x <routine>=<val>  Step over calls to <routine> and assume that the call
                        takes <val> cycles for timing purposes

Timing information will be accumulated starting at the current address and
continuing until a breakpoint is hit.

loadgeode.obscure
503:Load a geode from Swat. Mandatory first argument is the name of the file to
load (with path from top-level PC/GEOS directory, using / instead of \ as the
path separator).

Second and third arguments are the data words to pass to the geode. The second
argument is passed to the geode in cx, while the third argument is passed in dx.

Both the second and third arguments are optional and default to 0. They likely
are unnecessary.

NOTE: THIS MAY NOT BE USED TO LAUNCH AN APPLICATION. USE loadapp FOR THAT
loadapp.obscure
408:Load an application from Swat. Single argument is the file name of the
application to launch (application must reside in the appl subdirectory of
the PC/GEOS tree).

The application is opened in normal application mode. Some day this may allow
opening in engine mode...

Note that the application will not be loaded until you continue the machine, as
the loading is accomplished by sending a method to the UI
loadsyms.obscure
152:Force swat to read symbols for all geodes, and locate all existing threads.
To be used after invoking swat with the -b flag or performing an "attach -b"
unignore_all.obscure
246:A simple command to force swat to re-read symbols for a patient you ignored
when you first attached. It will find all ignored patients and offer you the
option to unignore each in turn. If you answer yes, the symbols for that
patient will be read
str-last-write.{stream}
1142:Usage:
    str-last-write <stream> [<num-to-print>]

Examples:
    "str-last-write ds:0"	Prints the last 64 bytes written to the
				stream whose StreamData structure resides at
				ds:0
    "str-last-write lpt3"   	Prints the last 64 bytes written to LPT3
    "str-last-write com3 20"	Prints the last 20 bytes written to COM3
    "str-last-write bx 20"  	Prints the last 20 bytes written to the stream
				whose token is in BX.

Synopsis:
    Allows you to see the most-recent bytes written to a stream, with hooks
    to easily examine streams created by the serial and parallel drivers.

Notes:
    * The <stream> argument may be a stream token, one of the serial or
      parallel driver's internal port variables (named after the various
      ports, but in lower-case, not upper-case), or the full address of
      a StreamData structure.

    * If you ask for more bytes than are actually in the stream, you
      will just get all the bytes that are in the stream, so giving a second
      argument like 1,000,000 (without commas, of course), will show you
      everything, should you want it.

See also:
    str-last-read, str-info

str-last-read.{stream}
1122:Usage:
    str-last-read <stream> [<num-to-print>]

Examples:
    "str-last-read ds:0"	Prints the last 64 bytes read to the
				stream whose StreamData structure resides at
				ds:0
    "str-last-read lpt3"   	Prints the last 64 bytes read to LPT3
    "str-last-read com3 20"	Prints the last 20 bytes read to COM3
    "str-last-read bx 20"  	Prints the last 20 bytes read to the stream
				whose token is in BX.

Synopsis:
    Allows you to see the most-recent bytes read to a stream, with hooks
    to easily examine streams created by the serial and parallel drivers.

Notes:
    * The <stream> argument may be a stream token, one of the serial or
      parallel driver's internal port variables (named after the various
      ports, but in lower-case, not upper-case), or the full address of
      a StreamData structure.

    * If you ask for more bytes than are actually in the stream, you
      will just get all the bytes that are in the stream, so giving a second
      argument like 1,000,000 (without commas, of course), will show you
      everything, should you want it.

See also:
    str-last-read, str-info

stream.{top.advanced}
28:Commands relating to streams
plist.print
276:Usage:
    plist <structure> <address of lmem handle> [<field>] [<value>]

Synopsis:
Prints out a list of structures stored in an lmem chunk.  It takes two
arguments, the structure type that makes up the list, and the lmem handle
of the chunk. eg. plist FontsInUseEntry ds:di

fonts.{system.font lib_app_driver.font}
954:Usage:
    fonts [<args>]

Examples:
    "fonts"	    summarize general font usage
    "fonts -u" 	    list fonts currently in use

Synopsis:
    Print various font info.

Notes:
    * The args argument may be chosen from the following:

	-a         list of fonts available
	-d         list of font drivers available
	-u [<ID>]  list of fonts currently in use. Optional font ID to match.
    	-c  	   list of font files currently cached
	-s         summary of above information
    	-f  	   list of available fonts, giving the face name & the file name

      If no argument is specified the default is to show the summary.

    * When using other commands you probably need to pass them the 
      handle in FIUE_dataHandle.  When you don't have the font's handle
      ready, the best way is to use "fonts -u" to find the font at the
      right point size and then grab the handle from there.

See also:
    pfont, pfontinfo, pusage, pchar, pfontinfo.

pchar.lib_app_driver.font
971:Usage:
    pchar [<compact flag>] [<character>] [<font address>]

Examples:
    "pchar" 	    	    
    "pchar A ^h20c0h"	    print the bitmap of the character 'A'
    "pchar 65 ^h20c0h"	    print the bitmap of ascii characer 65
    "pchar -C *"    	    print bare info on what the character is and it's
    	    	    	    status

Synopsis:
    Print the bitmap of a character in a font.

Notes:
    * The compact flag '-c' indicates to not print the structure info of 
      the character.  The super compact flag '-C' indicates just to
      print the character number, what it is (C_ASTERISK), and mentions
      anything special (NOT BUILT).

    * The character argument specifies which character to print.  The 
      argument may either be an actual character or the ascii value.

    * The font address argument is the address of the font which has
      the character you want to print out.  This defaults to ^hbx.

See also:
    fonts, pfont, pusage, pfontinfo.

pfont.lib_app_driver.font
637:Usage:
    pfont [<compact flag>] [<address>]

Examples:
    "pfont" 	    	print bitmaps and widths of characters in font at ^hbx
    "pfont -b ^h1fd0h"	print bitmaps only of characters in font at ^h1fd0h
    "pfont -c ^h1fd0h"	list the characters in the font at ^h1fd0h

Synopsis:
    Print all the bitmaps of the characters in a font.

Notes:
    * The compact flag argument '-c' causes just pfont to list which 
      characters are in the font and any special status (NOT BUILT)..

    * The address argument is the address of the font.  If none is 
      specified then ^hbx is used.

See also:
    fonts, pusage, pchar, pfontinfo.

pusage.lib_app_driver.font
333:Usage:
    pusage [<address>]

Examples:
    "pusage"	    print the usage of characters in the font

Synopsis:
    List the characters in a font and when they were last used.

Notes:
    * The address argument is the address of a font.  If none is given
      then ^hbx is used.

See also:
    fonts, pfong, pfontinfo, pchar, plist.

pfontinfo.{system.font lib_app_driver.font}
315:Usage:
    pfontinfo <font ID>

Examples:
    "pfontinfo FID_BERKELEY"

Synopsis:
    Prints font header information for a font.  Also lists all sizes built.

Notes:
    * The font ID argument must be supplied.  If not known, use 
      'fonts -u' to list all the fonts with their IDs.

See also:
    fonts, pfont.

showfonts.{system.font lib_app_driver.font}
464:Usage:
    showfonts [<args>]

Examples:
    "showfonts -b"	    show bitmap font loading
    "showfonts -o"  	    show outline font building
    "showfonts"	    	    stop showing font 

Synopsis:
    Show when fonts are loaded and/or built.

Notes:
    * The args argument may be chosen from the following:

    	-b  	   Show loading of bitmap fonts
    	-o  	   Show building of outline fonts
    	-c  	   Show building of outline characters

See also:
    pfont

timer-profile.profile
1941:Usage:
    timer-profile new [<geode>]	resets timer profile buffer to start collecting
    	    	    	    	a new set of data.
    timer-profile routine   	summarizes profile data by routine
    timer-profile resource  	summarizes profile data by resource

Examples:
    "timer-profile new desktop"	collects data for the geode named "desktop"
				only.
    "timer-profile new pcgeos"	collects data for all routines within PC/GEOS,
    	    	    	    	but not for anything in DOS, BIOS, etc.
    "timer-profile new"	    	collects data for routines everywhere.
    "timer-profile routine" 	prints the collected information sorted by
    	    	    	    	individual routines

Synopsis:
    Manages & prints analysis of the Kernel's Timer Profile Buffer.

Notes:
    * You must have downloaded a "TIMER_PROFILE" version of the kernel
      in order to be able to use this TCL function.  The "TIMER_PROFILE"
      version may be created by changing the TIMER_PROFILE constant in
      kernelConstant.def to TRUE, & recompiling.

    * "new" option clears out the contents of the kernel's timerProfileBuffer,
       and clears the timerProfileOffset, which indicates where the next
       timer interrupt's worth of data should be stored.  Any "geode" handle
       passed is stored in timerProfileGeode.  Once timer interrupts flow
       again (when "continue" is activated), the buffer will be added to
       at each interrupt, if the specified criteria is met.

    * "result", "resource" options use TCL funtions to tally the information
       present in the timerProfileBuffer, for printing out.  The buffer is
       not modified in any way.  Only those routines/resorces which were
       detected running more than .2% of the time are printed out.

    * PC-SDK: To use this command, you must run the non-error-checking
      version of Geos (GEOSNC) and select "GEOS Profiling Kernel - Timer"
      via the Debug application.

See also:

dcall.profile
724:Usage:
    dcall [<args>]

Examples:
    "dcall Dispatch"	Display when the routine Dispatch is called
    "dcall none"    	stop displaying all routines

Synopsis:
    Display calls to a routine and the thread calling it.

Notes:
    * The args argument normally is the name of the routine to monitor.
      Whenever a call is made to the routine it's name is displayed.

      If 'none' or no argument is passed, then all the routines will
      stop displaying.

    * Dcall uses breakpoints to display routine names.  By looking at 
      the list of breakpoints you can see which routines display their
      names and you can stop them individually by disabling or deleting
      them.

See also:
    showcalls, mwatch.

analbrk.profile
578:Usage:
    analbrk [-hmlif] 	    Set one or more groups of tally breakpoints
    analbrk clear   	    Delete all breakpoints set with this command
    analbrk reset   	    Reset the counters for all breakpoints set
			    with this command.

Examples:
    "usage"	Explanation

Synopsis:
    Sets groups of tally breakpoints for various areas in the system.

Notes:
    * The various flags you can give mean:
	-h : heap
	-m : message and resource calls
	-l : local memory
	-i : .ini file
	-f : file system
    	-g : graphics
    	-r : relocation

See also:
    restally, workset

workset.profile
3223:Usage:
    workset start <geode> [flags]   Start working set analysis on <geode>
    workset end	    	    	    End working set analysis
    workset time <num>	    	    Define a working set to be <num> seconds
    	    	    	    	    (0 means forever, default is 5)
    workset summary    	    	    Print working set information -- summary
    workset info [sort fields] 	    Print working set information -- full

Examples:
    "workset start desktop" Begins collecting working set information for
			    the patient named "desktop"

Synopsis:
    This uses hooks in the EC kernel to provided working-set information for
    a particular geode. The working-set of a geode is the set of blocks
    that have been used in the recent past (the exact amount of time is
    configurable).

Notes:
    * The working set for all geodes can be tracked by using "workset start all"

    * The optional parameter to "workset start" specifies the type(s) of
      resources to be analyzed.  The default is "code".  The options
      are:
    	* code -- analyze code resources
    	* object -- analyze object resources
    	* fixed -- include fixed resources

    * The optional parameter(s) to "workset info" changes how the output is
      sorted.  The default is "inws".  The options are:
    	* inws -- sort by time in the working set (the default)
    	* inuse -- sort by in use time
    	* patient -- sort by patient
    	* ws -- sort by whether the resource is currently in the working set
    	* uses -- sort by the number of times the resource has been used
    	* loads -- sort by the number of times the resource has been loaded
    	* size -- sort by resource size

    * "workset summary" gives a brief description of the parameters of the
      current working set.

    * All time values are in seconds, in the format <seconds>:<ticks>. Each
      tick is 1/60th of a second.

    * "workset info" gives a complete breakdown of the working-set by resource.
      The table produced is divided into the following columns:
      
      	Resource Name	    The name of the resource whose info is on that
			    line.
    	W Set	    	    "Yes"/"No" tell whether it is/isn't currently in
			    the working-set. A '*' indicates the resource was
			    a part of the maximum working-set (the largest
			    working-set seen so far), regardless of whether
			    it's currently in.
    	% In WS	    	    The percent of the time the resource has been in
			    the working-set.
    	Uses	    	    The number of calls to routines in the resource
    	    	    	    from outside the resource.
    	Loads	    	    The number of times the resource was loaded. The
			    number in parentheses indicates the number of those
			    times that the resource was already in the working-
			    set when it was loaded (this is a measure of the
			    thrashing of the system)
    	Last Use    	    Time (in seconds) since last use.
    	Status	    	    The resource's current status: "Loaded", "Swapped",
			    or "Discarded"
			    
    * PC-SDK: To use this command, you must run the non-error-checking
      version of Geos (GEOSNC) and select "GEOS Profiling Kernel - Workset"
      via the Debug application.

See also:
    restally

restally.profile
965:Usage:
    restally start <resource>	Start analysis on the given resource.
    restally -n start <resource> Includes near routines in analysis 
    restally end    	    	End analysis
    restally info [args]    	Print analysis data


Examples:
    restally start CommonCode
    restally start CommonCode ObscureCode

Synopsis:
    Sets tally break points at routines in resources
    You may pass multiple resources

Notes:
    * "restally info" can take the following arguments:
    	nonzero (or nz) - print only routines that are actually called
    	zero - print only routines with zero calls
    	min N - print only routines called N or more times
        max N - print only routines called N or less times

    * tally break points require 24 bytes each. You will probably need
      to up the size of swat's break point heap. To do this pass the
      /h:xxxx flag to swat, where xxxx is the size in bytes of the
      heap you desire.

See also:
    workset

rmsg.profile
2238:Usage:
    rmsg
    rmsg (on|off)
    rmsg print <group-by> <sort-by> <lower-bound>
    rmsg header
    rmsg reset

Examples:
    "rmsg on"				Turn message recording on. This does
					*not* reset the recording buffer.

    "rmsg off"				Turn message recording off. This does
					*not* reset the recording buffer.

    "rmsg"				Print listing of all recorded messages,
					sorting by mesage/class count.

    "rmsg print class count 5"		Print listing of all recorded messages
					invoked 5 or more times

    "rmsg print message time"		Print listing of all recorded messages,
					grouped by message number & sorted by
					time spent in the method handlers
					across all classes

    "rmsg reset"			Reset the recorded message counts

    "rmsg debug"			Print debugging information for
					recorded messages

Synopsis:
    Print a report of all recorded messages, in decreasing order of use.

Notes:
    * Messages can be grouped by either the message sent, or the class of object
      to which the message was sent. This is controlled by the <group-by>
      argument to "rmsg print". <group-by> can be either "message" or "class".

    * Message groups can be sorted either by the number of times they were
      sent, or the amount of time spent processing the message. The
      <sort-by> parameter determines which, and can be either "count" or "time".
    
    * The <sort-by> argument also determines the meaning of the <lower-bound>
      argument. If <sort-by> is "count", this will not print out a message
      unless it was sent at least <lower-bound> times. If <sort-by> is "time",
      this will not print out a message unless it took longer than
      <lower-bound> (a real number) seconds.

    * The number of unrecorded messages, if non-zero, indicates the number of
      times ObjCallMethodTable was invoked with a message & class that couldn't
      be stored due to insufficient space in the table. If you need room for
      additional messages, increase the constant NUM_RECORDED_MESSAGE_ENTRIES

    * PC-SDK: To use this command, you must run the non-error-checking
      version of Geos (GEOSNC) and select "GEOS Profiling Kernel - Messages"
      via the Debug application.

See also:
    prmsg, int21

prmsg.profile
1616:Usage:
    prmsg <group-by> <sort-by> <lower-bound>

Examples:
    "prmsg"				Print listing of all recorded messages

    "prmsg class count 5"		Print listing of all recorded messages
					invoked 5 or more times

    "prmsg message time"		Print listing of all recorded messages,
					grouped by message number & sorted by
					time in total invocations across all
					classes

Synopsis:
    Print a listing of all the recorded messages, in decreasing order of use

Notes:
    * The number of unrecorded messages, if non-zero, indicates the number of
      times ObjCallMethodTable was invoked with a message & class that couldn't
      be stored due to insufficient space in the table. If you need room for
      additional messages, increase the constant NUM_RECORDED_MESSAGE_ENTRIES

    * Messages can be grouped by either the message sent, or the class of object
      to which the message was sent. This is controlled by the <group-by>
      argument to "rmsg print". <group-by> can be either "message" or "class".

    * Message groups can be sorted either by the number of times they were
      sent, or the amount of time spent processing the message. The
      <sort-by> parameter determines which, and can be either "count" or "time".
    
    * The <sort-by> argument also determines the meaning of the <lower-bound>
      argument. If <sort-by> is "count", this will not print out a message
      unless it was sent at least <lower-bound> times. If <sort-by> is "time",
      this will not print out a message unless it took longer than
      <lower-bound> (a real number) seconds.

See also:
    rmsg

int21.{interrupt system.misc}
832:Usage:
    int21
    int21 print [(count|time|name|number)]
    int21 reset

Synopsis:
    Print the table of interrupt 21 function calls

Examples:
    "int21"			Print data on calls made to Int21h

    "int21 print time"		Default operation, printing summary of calls
				to Int21h, sorted by total time/function call.

    "int21 print count"		Same as above, but sort by the # of calls made
				to a specific function, not by the time spent.

    "int21 print function"	Same as above, but sorted by function #

    "int21 reset"		Reset all the call totals

Notes:
    Unique abbreviations for the "command" & "sortBy" arguments are allowed.

    * PC-SDK: To use this command, you must run the non-error-checking
      version of Geos (GEOSNC) and select "GEOS Profiling Kernel - Int21"
      via the Debug application.

See also:

sint21.{interrupt system.misc}
561:Usage:
    sint21
    sint21 print [(count|name|number)]
    sint21 reset

Synopsis:
    Print the table of interrupt 21 function calls as tracked by the Swat stub

Examples:
    "sint21"			Print data on calls made to Int21h

    "sint21 print count"	Same as above, but sort by the # of calls made
				to a specific function, not by the time spent.

    "sint21 print function"	Same as above, but sorted by function #

    "sint21 reset"		Reset all the call totals

Notes:
    Unique abbreviations for the "command" & "sortBy" arguments are allowed.

See also:

rmod.profile
565:Usage:
    rmod
    rmod print
    rmod reset
    rmod debug

Examples:
    "rmod print"			Print a call report summary

    "rmod reset"			Reset the current call counts

    "rmod debug"			Print debugging information

Synopsis:
    Displays a report of the routines called between modules.

Notes:
    * The command "reset" & "debug" are not yet implemented.

    * PC-SDK: To use this command, you must run the non-error-checking
      version of Geos (GEOSNC) and select "GEOS Profiling Kernel - Calls"
      via the Debug application.

See also:
    int21, rmsg

db-to-addr.lib_app_driver.dbase
524:Usage:
    db-to-addr <file> <group> <item>
    db-to-addr <file> <db-item-ref>

Examples:
    "db-to-addr bx cx dx"	Return an address expression for the base of
				the DB item dx in group cx in file bx.

Synopsis:
    Provides a simple way to map from a file handle and a 32-bit DB item
    reference to an address in memory.

Notes:
    * If you've got a DBItemRef variable, you can pass it as the second
      argument, rather than having to break it into its group and item parts
      yourself.

See also:
    dbwatch

break.{swat_prog.tcl.loop tcl}
469:Usage:
    break

Examples:
    "break"	    Break out of the current loop.

Synopsis:
    Breaks out of the current loop or the current nested interpreter.

Notes:
    * Only the closest-enclosing loop can be exited via this command.

    * If you've entered a nested interpreter, e.g. by calling a function
      in the patient, use this to exit the interpreter and restore the
      registers to what they were before you made the call.

See also:
    continue, for.

case.{swat_prog.tcl.conditional}
1112:Usage:
    case <string> [in] [<pat> <body>]+

Examples:
    "[case $c in
      {[0-9]} {
         # do something with digit
      }
      default {
	 # do something with non-digit
      }
     ]"	    	    	Do one of two things depending on whether the character
			in $c is a digit.

Synopsis:
    Perform one of a set of actions based on whether a string matches one or
    more patterns.

Notes:
    * Each <pat> argument is a list of patterns of the form described for
      the "string match" command.

    * Each <pat> argument must be accompanied by a <body> to execute.

    * If a <pat> contains the special pattern "default," the associated <body>
      will be executed if no other pattern matches. The difference between
      "default" and "*" is a pattern of "*" causes the <body> to be executed
      regardless of the patterns in the remaining <pat> arguments, while
      "default" postpones the decision until all the remaining patterns have
      been checked.

    * You can give the literal "in" argument if you wish to enhance the
      readability of your code.

See also:
    string, if.

catch.{swat_prog.tcl.error}
854:Usage:
    catch <command> [<varName>]

Examples:
    "if {[catch {error-prone-command} result] == 0} {
         # command was ok; use $result
     }"	    	    	    	Executes "error-prone-command," placing the
				result in $result, if the command completes
				successfully.

Synopsis:
    Executes a command, retaining control even if the command generates an
    error (which would otherwise cause execution to unwind completely).

Notes:
    * This returns an integer that indicates how <command> completed:
	0   Completed successfully; $<varName> contains the result of the
	    command.
	1   Generated an error; $<varName> contains the error message.
	2   Executed "return"; $<varName> contains the argument passed
	    to "return."
	3   Executed "break"; $<varName> is empty.
	4   Executed "continue"; $<varName> is empty.

See also:
    protect.

concat.{swat_prog.tcl.list swat_prog.list swat_prog.string}
658:Usage:
    concat <arg>+

Examples:
    "concat $list1 $list2"	Merges the lists in $list1 and $list2 into a
				single list whose elements are the elements of
				the two lists.

Synopsis:
    Concatenates multiple list arguments into a single list.

Notes:
    * There is a sometimes-subtle difference between this in the "list" command:
      Given two lists, "concat" will form a list whose n elements are the
      combined elements of the two component lists, while "list" will form a
      list whose 2 elements are the two lists. For example,
    	    concat a b {c d e} {f {g h}}
      yields the list
    	    a b c d e f {g h}

See also:
    list.

continue.{swat_prog.tcl.loop}
470:Usage:
    continue

Examples:
    "continue"	    Return to the top of the enclosing loop.

Synopsis:
    Skips the rest of the commands in the current loop iteration, continuing
    at the top of the loop again.

Notes:
    * Only the closest-enclosing loop can be continued via this command.

    * The <next> clause of the "for" command is not part of the current
      iteration, i.e. it will be executed even if you execute this command.

See also:
    break, for.

error.{swat_prog.tcl.error}
712:Usage:
    error <message>

Examples:
    "error {invalid argument}"	    Generates an error, giving the not-so-
				    helpful message "invalid argument" to
				    the caller's caller.

Synopsis:
    Generates an error that forces execution to unwind all the way out of
    the interpreter, or to the closest "catch" command, whichever comes
    first.

Notes:
    * Unless one of the procedures in the call stack has executed a "catch"
      command, all procedures on the stack will be terminated with <message>
      (and an indication of an error) being the result of the final one so
      terminated.

    * Any commands protected by the "protect" command will be executed.

See also:
    return, catch.

eval.{swat_prog.tcl}
908:Usage:
    eval <body>

Examples:
    "eval $mangled_command"	Evaluate the command contained in
				$mangled_command and return its result.

Synopsis:
    Evaluates the passed string as a command and returns the result of
    that evaluation.

Notes:
    * This command is useful when one needs to cobble together a command
      from arguments or what have you. For example, if one of your
      arguments is a list of arguments to pass to another command, the
      only way to accomplish that is to say something like "eval [concat
      random-command $args]", which will form a list whose first element
      is the command to be executed, and whose remaining elements are the
      arguments for the command. "eval" will then execute that list properly.

    * If the executed command generates an error, "eval" will propagate that
      error just like any other command.

See also:
    concat, list.

exec.{swat_prog.tcl}
1085:Usage:
    exec <command> <args>*

Examples:
    "echo [exec ls -CF]"	    Invoke the "ls" command in the current
				    directory, passing it "-CF" as arguments.
				    Echo the output when the command completes.
    "exec /bin/cat < {hi mom}"	    Invoke "/bin/cat", passing it the string
				    "hi mom" as its input.
			    

Synopsis:
    Executes an external command, passing it arguments and input. All output
    from the command is returned as a string.

Notes:
    * This is not supported under DOS yet.

    * If one of the arguments is "<", neither it nor the following argument is
      given to the command directly. Rather, the following argument is given to
      the command as its standard input.

    * The command returns the exit code for the program, if it's one of the
      five known to Tcl (see the "catch" command for details). If the exit
      code is non-zero and not one of the five, "exec" will generate an error.

    * All output (both standard output and standard error) is returned as
      the string result of this command.

See also:
    catch.

expr.{tcl swat_prog.tcl}
1084:Usage:
    expr <expr> [float]

Examples:
    "expr 36*25"	    Multiplies 36 by 25 and returns the result.
    "expr $i/6 float"	    Divides the number in $i by 6 using floating-
			    point arithmetic; the result is a real number.

Synopsis:
    Evaluates an arithmetic expression and returns its value.

Notes:
    * Most C operators are supported with the standard operator precedence.

    * If you use a Tcl variable in the expression, the variable may only contain
      a number; it may not contain an expression.

    * The result of any Tcl command, in []'s of course, must be a number; it
      may not be an expression.

    * All the C and Esp radix specifiers are allowed.

    * Bitwise and boolean operators (!, &, ^, |, &&, ||, >>, <<, ~) are not
      permitted when the expression is being evaluated using floating-point
      arithmetic.

    * Integers that are greater than 2^32-1 that are passed to expr with the
      float argument must end with a .0 to force them into floating point 
      form if the code is going to be byte-compiled

See also:
    none.

file.{swat_prog.tcl}
2348:Usage:
    file dirname <name>
    file executable <name>
    file exists <name>
    file expand <name>
    file extension <name>
    file isdirectory <name>
    file isfile <name>
    file owned <name>
    file readable <name>
    file rootname <name>
    file tail <name>
    file writable <name>
    file match <pattern>
    file newer <name1> <name2>

Examples:
    "file match /staff/pcgeos/a*"	Looks for all files/directories in
					/staff/pcgeos whose name begins with
					a (or A in the DOS world...)
    "file isdir $path"	    	    	See if the path stored in $path refers
					to a directory.
    "file tail $path"	    	    	Return the final component of the path
					stored in $path
    "file owned $path"	    	    	Return non-zero if the file/directory
					with the given path is owned by the
					current user.

Synopsis:
    Performs various checks and manipulations of file and directory names. NOTE:
    even in the DOS world, the forward slash is the path separator for this
    command.

Notes:
    * Some subcommands are inappropriate for the DOS version: executable,
      expand, and owned are not implemented.

    * The predicate subcommands (executable, exists, isdirectory, isfile,
      owned, readable, and writable) all return 1 if the path meets the
      requirements, or 0 if it doesn't.

    * "file match" takes a <pattern> made from the same components as are
      described for "string match". It is *not* the same as the standard DOS
      wildcarding, where '.' serves to separate the root pattern from the
      extension pattern. For this command "*.*" would match only files that
      actually have an extension.

    * "file dirname" returns the directory portion of <name>. If <name> has
      no directory portion, this returns "."

    * "file expand" expands any home-directory specification in <name> and
      returns the result as an absolute path.

    * "file rootname" returns all leading directory components of <name>, plus
      the text before its extension, without the "." that separates the name
      from the extension.

    * "file tail" returns all of the characters in <name> after the final
      forward slash, or <name> if it contains no forward slashes.

    * "file newer" returns 1 if <name1> was modified after <name2>. It
      returns 0 otherwise.

See also:
    string.

for.{swat_prog.tcl.loop}
1283:Usage:
    for <start> <test> <next> <body>

Examples:
    "for {var i 0} {$i < 10} {var i [expr $i+1]} {echo $i}"
	    	    	    	    Prints the numbers from 0 to 9.

Synopsis:
    This is Tcl's main looping construct. It functions similarly to the "for"
    in C.

Notes:
    * <start> is a Tcl command string (which may involve multiple commands
      over multiple lines, if desired) that is executed once at the very
      start of the loop. It is always executed. If it returns an error, or
      contains a "break" command, no part of the loop will execute.

    * <test> is an arithmetic expression that is passed to the "expr" command.
      If the result is non-zero, the <body> is executed.

    * <next> is a Tcl command string (which may involve multiple commands
      over multiple lines, if desired) that is executed at the end of each
      iteration before <test> is evaluated again. If it returns an error, or
      contains a "break" command, no part of the loop will execute.

    * You can exit the loop prematurely by executing the "break" command in
      any of the three Tcl command strings (<start>, <next>, or <body>).

    * So long as there's no error, "for" always returns the empty string as
      its result.

See also:
    foreach, break, continue.

foreach.{swat_prog.tcl.loop}
626:Usage:
    foreach <varName> <list> <body>

Examples:
    "foreach el $list {echo poof = $el}"	Prints each element of the
						list $list preceded by the
						profound words "poof = "

Synopsis:
    This is a looping construct to easily iterate over all the elements of
    a list.

Notes:
    * <body> is evaluated once for each element in <list>. Before each
      evaluation, the next element is placed in the variable <varName>.

    * You can exit the loop prematurely by executing the "break" command.

    * As long as there's no error, "foreach" always returns the empty string.

See also:
    for, break, continue.

format.{swat_prog.tcl tcl}
381:Much like the C function sprintf(3) (type "man 3 sprintf" from the shell for
more information). The only difference is that %c takes a decimal number that
is the ASCII code for a character and produces the proper character. Other
arguments are converted into the proper C data type before being passed to
sprintf for formatting. This can be used to convert numbers to hex or octal.
elispSend.{swat_prog.tcl}
15:Great help here
if.{swat_prog.tcl.conditional}
1250:Usage:
    if <expr> [then] <truebody> (elif <expr> <truebody>)* [[else] <falsebody>]

Examples:
    "if {$v > 3} {echo yes} {echo no}"	Prints "yes" if $v is greater than
					3, else it prints "no".
    "if {$v > 3} then {echo yes} else {echo no}"    Ditto.
    "if {$v > 3} then {echo yes} elif {$v == 3} {echo maybe} else {echo no}"

Synopsis:
    This is Tcl's conditional, as you'd expect from its name.

Notes:
    * The "then" and "else" keywords are optional, intended to delineate the
      different sections of the command and make the whole easier to read.

    * The "elif" keyword is *mandatory*, however, if you want to perform
      additional tests.

    * The <expr> arguments are normal Tcl expressions. If the result is
      non-zero, the appropriate <truebody> is executed. If none of the <expr>
      arguments evaluates non-zero, <falsebody> is executed.

    * If a <truebody> is empty and the test evaluated non-zero, "if" will
      return the result of the test. Otherwise "if" returns the result from
      last command executed in whichever <truebody> or <falsebody> argument
      was finally executed. It returns an empty string if no <expr> evaluated
      non-zero and no <falsebody> was given.

See also:
    expr.

index.{swat_prog.list swat_prog.tcl swat_prog.string}
521:Usage:
    index <list> <index>
    index <string> <index> char

Examples:
    "index {a b c} 1"	    	Extracts "b" from the list.
    "index {hi mom} 3 char" 	Extracts "m" from the string.

Synopsis:
    "index" is used to retrieve a single element or character from a list
    or string.

Notes:
    * Elements and characters are numbered from 0.

    * If you request an element or character from beyond the end of the <list>
      or <string>, you'll receive an empty list or string as a result.

See also:
    range.

info.{swat_prog.tcl}
2780:Usage:
    info args <procname> [<pattern>]
    info arglist <procname>
    info body <procname>
    info cmdcount 
    info commands [<pattern>]
    info default <procname> <arg> <varname>
    info globals [<pattern>]
    info locals [<pattern>]
    info procs [<pattern>]
    info vars [<pattern>]

Examples:
    "info args fmtval"	    Retrieves the names of the arguments for the
			    "fmtval" command so you know in what order to
			    pass things.
    "info body print-frame" Retrieves the string that is the body of the
			    "print-frame" Tcl procedure.
    "info commands *reg*"   Retrieves a list of commands whose names contain
			    the string "reg"

Synopsis:
    This command provides information about a number of data structures
    maintained by the Tcl interpreter.

Notes:
    * All the <pattern> arguments are standard wildcard patterns as are used
      for the "string match" and "case" commands. See "string" for a description
      of these patterns.

    * "info args" returns the complete list of arguments for a Tcl procedure,
      or only those matching the <pattern>, if one is given. The arguments
      are returned in the order in which they must be passed to the procedure.

    * "info arglist" returns the complete list of arguments, and their default
      values, for a Tcl procedure.

    * "info body" returns the command string that is the body of the given
      Tcl procedure.

    * "info cmdcount" returns the total number of commands the Tcl interpreter
      has executed in its lifetime.

    * "info commands" returns the list of all known commands, either built-in
      or as Tcl procedures, known to the interpreter. You may also specify a
      pattern to restrict the commands to those whose names match the pattern.

    * "info default" returns non-zero if the argument named <arg> for the
      given Tcl procedure has a default value. If it does, that default value
      is stored in the variable whose name is <varname>.

    * "info globals" returns the list of all global variables accessible within
      the current variable scope (i.e. only those that have been declared global
      with the "global" command, unless you issue this command from the command-
      line, which is at the global scope), or those that match the given
      pattern.

    * "info locals" returns the list of all local variables, or those that match
      the given pattern.

    * "info procs" returns the list of all known Tcl procedures, or those that
      match the given pattern.

    * "info vars" returns the list of all known Tcl variables in the current
      scope, either local or global. You may also give a pattern to restrict the
      list to only those that match.

See also:
    proc, defcmd, defcommand, defsubr.

length.{swat_prog.list swat_prog.string swat_prog.tcl.list}
320:Usage:
    length <list>
    length <string> char

Examples:
    "length $args"	Returns the number of elements in the list $args
    "length $str char"	Returns the number of characters in the string $str

Synopsis:
    Determines the number of characters in a string, or elements in a list.

See also:
    index, range.

list.{swat_prog.list swat_prog.tcl.list}
650:Usage:
    list <arg>+

Examples:
    "list a b {c d e} {f {g h}}"	Returns the list
					"a b {c d e} {f {g h}}"

Synopsis:
    Joins any number of arguments into a single list, applying quoting
    braces and backslashes as necessary to form a valid Tcl list.

Notes:
    * If you use the "index" command on the result, the 0th element will be
      the first argument that was passed, the 1st element will be the second
      argument that was passed, etc.

    * The difference between this command and the "concat" command is subtle.
      Given the above arguments, "concat" would return "a b c d e f {g h}"

See also:
    concat, index, range.

protect.{swat_prog.tcl.error}
823:Usage:
    protect <body> <cleanup>

Examples:
    "protect {
	var s [stream open $file w]
	# do stuff with the stream
     } {
	catch {stream close $s}
     }"	    	    	    	Perform some random operations on a file
				making sure the stream gets closed, even if
				the user types control-C.

Synopsis:
    Allows one to ensure that clean-up for a sequence of commands will always
    happen, even if the user types control-C to interrupt the command.

Notes:
    * Since the interrupt can come at any time during the <body>, the <cleanup>
      command string should not rely on any particular variables being set.
      Hence the "catch" command used in the <cleanup> clause of the example.

    * The <cleanup> clause will also be executed if any command in the <body>
      generates an error.

See also:
    catch.

range.{swat_prog.list swat_prog.string swat_prog.tcl.list}
983:Usage:
    range <list> <start> <end>
    range <string> <start> <end> char

Examples:
    "range {a b c} 1 end"	Returns {b c} (element 1 to the end)
    "range {hi mom} 3 end chars"  	Returns "mom"

Synopsis:
    Extracts a range of characters from a string, or elements from a list.

Notes:
    * If you give an ending index that is greater than the number of elements in
      the list (characters in the string), it will be adjusted to be the index
      of the last element (character).

    * If you give a starting index that is greater than the number of elements
      in the list (characters in the string), the result will be the empty list
      (string).

    * You can give <end> as "end" (without the quotation marks, of course) to
      indicate the extraction should go to the end of the list (string).

    * The range is inclusive, so "range {a b c} 0 0" returns "a".

    * Neither index may be less than 0 or "range" will generate an error.

See also:
    index

return.{swat_prog.proc}
855:Usage:
    return [<string>]

Examples:
    "return $val"	Returns the string in $val as the value for the current
			Tcl procedure.

Synopsis:
    Causes an immediate return from the current Tcl procedure, with or without
    a value.

Notes:
    * Every Tcl procedure returns a string for a value. If the procedure was
      called via command substitution (having been placed between square
      brackets as the argument to another command), the return value takes
      the place of the command invocation.

    * Execution of the current procedure terminates immediately, though any
      <cleanup> clause for a containing "protect" command will still be
      executed.

    * If no "return" command is invoked within a Tcl procedure, the procedure
      returns the empty string by default.

See also:
    error, proc, defsubr, defcommand, defcmd.

scan.{swat_prog.string}
2344:Usage:
    scan <string> <format> <varName>*

Examples:
    "scan $input {my name is %s} name"	Trims the leading string "my name is "
					from the string in $input and stores
					the rest of the string within the
					variable $name

Synopsis:
    "scan" parses fields from an input string, given the string and a format
    string that defines the various types of fields. The fields are assigned
    to variables within the caller's scope.

Notes:
    * The <format> string consists of literal text, which must be matched
      explicitly, and field definitions. The <varName> arguments are names
      of variables to which each successive field value is assigned.

    * A single whitespace character (space or tab) will match any number
      of whitespace characters in the input string.

    * Fields are specified as for the standard C library routine "sscanf":
	%c  	A single character. The field value stored is the decimal
		number of the ASCII code for the character scanned. So if
		the character were a space, the variable would receive the
		string "32".
	%d	A signed decimal integer is parsed and stored.
	%o	An octal integer is parsed and stored, as a decimal number.
	%x	A hexadecimal integer is parsed and stored, as a decimal number.
	%i	A signed integer, following the standard C radix-specification
		standard, is parsed and stored as a decimal number.
	%f  	A floating-point number is parsed as a "float" and stored
		without exponent, unless the exponent is less than -4.
	%s  	A whitespace-terminated string is parsed and stored.
	%[<char-class>]
		A string consisting only of the characters in the given
		character class (see "string match" for details on character
		classes) is parsed and stored. The normal leading-whitespace
		skipping is suppressed.
	%%  	Matches a single percent sign in the input.

    * If the % of a field specifier is followed by an *, the field is parsed
      as usual, consuming characters from the string, but the result is not
      stored anywhere and you should not specify a variable to receive the
      value.

    * The maximum length of a field may be specified by giving a decimal number
      between the % and the field-type character. So "%10s" will extract out
      a string of at most 10 characters.

    * There is currently a limit of 5 fields.

See also:
    format

source.{
       swat_prog.load swat_prog.file}
360:Usage:
    source <file>

Examples:
    "source coolness"	    Evaluates all commands within the file
			    "coolness.tcl" in the current directory.

Synopsis:
    Reads and evaluates commands from a file.

Notes:
    * If <file> has no extension and doesn't exist, "source" will append ".tcl"
      to the end and try and read that file.

See also:
    none.

string.{swat_prog.string}
2506:Usage:
    string compare <string1> <string2> [no_case]
    string first <substring> <string> [no_case]
    string last <substring> <string> [no_case]
    string match <string> <pattern>
    string subst <string> <search> <replace> [global]

Examples:
    "if {[string c [index $args 1] all] == 0}"	Do something if the 2nd element
						of the list in $args is the
						string "all".
    "while {[string m [index $args 0] -*]}" 	Loop while the first element
						of the list in $args begins with
						a hyphen.

Synopsis:
    Examine strings in various ways.

Notes:
    * "string subst" searches <string> for occurrences of <search> and
      replaces them with <replace>. If 5th argument is given as "global"
      (it may be abbreviated), then all (non-overlapping) occurrences of
      <search> will be replaced. If 5th argument is absent, only the first
      occurrence will be replaced.

    * "string compare" compares the two strings character-by-character. It
      returns -1, 0, or 1 depending on whether <string1> is lexicographically
      less than, equal to, or greater than <string2>. If the no_case parameter
      is passed than it does a case insensitive compare.

    * "string first" searches <string> for the given <substring>. If it finds
      it, it returns the index of the first character in the first such match.
      If <substring> isn't part of <string>, it returns -1. If the no_case paramaeter is passed is does the search ignoring case

    * "string last" is much like "string first", except it returns the index
      of the first character of the last match for the <substring> within
      <string>. If there is no match, it returns -1.

    * "string match" compares <string> against <pattern> and returns 1 if
      the two match, or 0 if they do not. For the strings to match, their
      contents must be identical, except that the following special sequences
      may appear in <pattern> with the following results:
	*   		Matches any sequence of characters, including none.
	?   		Matches any single character
	[<char-class>]	Matches a single character within the given set. The
			elements of the set are specified as single characters,
			or as ranges of the form <start>-<end>. Thus [0-9x]
			matches a single character that is a numeric digit or
			the letter x.
	[^<char-class>]	Matches a single character *not* within the given set.
	\*	    	Matches an asterisk.
	\?	    	Matches a question mark.
	\[	    	Matches an open-bracket.

See also:
    case

time.{swat_prog.obscure}
472:Usage:
    time <body> <count>

Examples:
    time {time-critical-proc 3} 1000	Executes "time-critical-proc" 1000
					times.

Synopsis:
    This command is used to measure the time needed to execute a command.

Notes:
    * Any command or sequence of commands may be timed.

    * The number of microseconds spent in each iteration is returned with
      the number, as a real number, first, followed by the text "microseconds
      per iteration" for human consumption.

uplevel.{swat_prog}
1567:Usage:
    uplevel <level> <body>
    uplevel <function> <body>

Examples:
    "uplevel print-frame {var found 1}"	    Sets $found to 1 within the
					    variables belonging to the
					    nearest invocation of print-frame
					    on the call stack.
    "uplevel 0 {var foo-table}"		    Retrieves the value of the
					    global variable foo-table.
    "uplevel 1 {var found 1}"		    Sets $found to 1 within the
					    scope of the procedure that
					    called the one executing the
					    "uplevel" command.

Synopsis:
    Provides access to the variables of another procedure for fairly specialized
    purposes.

Notes:
    * <level> is a signed integer with the following meaning:
	> 0	Indicates the number of scopes to go up. For example, if you
		say "uplevel 1 {var foo 36}", you would modify (or create) the
		variable "foo" in your caller's scope.
	<= 0	Indicates the number of scopes to go down from the global one.
		"uplevel 0 <body>" will execute <body> in the top-most scope,
		which means that no local variables are involved, and any
		variables created by the commands in <body> persist as global
		variables.

    * <function> is the name of a function known to be somewhere on the call
      stack. If the named function isn't on the call stack anywhere, "uplevel"
      generates an error.

    * <body> may be spread over multiple arguments, allowing the command to
      be executed to use variables local to the current procedure as arguments
      without having to use the "list" command to form the <body>.

See also:
    global.

defsubr.{swat_prog.proc swat_prog.tcl.proc swat_prog.def}
466:Usage:
    defsubr <procname> <args> <body>

Examples:
    "defsubr poof {arg1 args} {return [list $arg1 $args]}"
	    	    	    	Defines a procedure poof that takes 1 or more
				arguments and merges them into a list of two
				elements.

Synopsis:
    This is the same as the "proc" command, except the new procedure's name
    may not be abbreviated when it is invoked.

Notes:
    * See the documentation for "proc" for further information.

See also:
    proc.

proc.{swat_prog.proc swat_prog.tcl.proc swat_prog.def}
1951:Usage:
    proc <procname> <args> <body>

Examples:
    "proc poof {{arg1 one} args} {return [list $arg1 $args]}"
	    	    	    	Defines a procedure poof that takes 0 or more
				arguments and merges them into a list of two
				elements. If no argument is given, the result
				will be the list {one {}}

Synopsis:
    Defines a new Tcl procedure that can be invoked by typing a unique
    abbreviation of the procedure name.

Notes:
    * Any existing procedure or built-in command is overridden.

    * <procname> is the name of the new procedure and can consist of pretty much
      any character (even a space or tab, if you enclose the argument in
      braces).

    * <args> is the, possibly empty, list of formal parameters the procedure
      accepts. Each element of the list can be either the name of local
      variable, to which the corresponding actual parameter is assigned before
      the first command of the procedure is executed, or a two-element list,
      the first element of which is the local variable name, as above, and the
      second element of which is the value to assign the variable if no actual
      parameter is given.

    * If the final formal parameter is named "args", the remaining actual
      parameters from that position on are cobbled into a list and assigned
      to the local variable $args. This allows a procedure to receive a
      variable number of arguments (even 0, in which case $args will be
      the empty list).

    * If the only formal parameter is "noeval", all the actual parameters are
      merged into a list and assigned to $noeval. Moreover, neither command-
      nor variable-substitution is performed on the actual parameters.

    * The return value for the procedure is specified by executing the "return"
      command within the procedure. If no "return" command is executed, the
      return value for the procedure is the empty string.

See also:
    defsubr, return.

var.{swat_prog.tcl.var tcl}
1292:Usage:
    var <name>
    var (<name> <value>)+

Examples:
    "echo [var poof]"	    Prints the value stored in the variable "poof"
    "var a b c d"   	    Assigns the string "b" to the variable "a", and
			    the string "d" to the variable "c".
    "var yes $no no $yes"   Exchanges the values of the "yes" and "no" variables

Synopsis:
    This is the means by which variables are defined in Tcl. Less often, it is
    also used to retrieve the value of a variable (usually that's done via
    variable substitution).

Notes:
    * If you give only one argument, the value of that variable will be
      returned. If the variable has never been given a value, the variable
      will be created and assigned the empty string, then the empty string
      will be returned.

    * You can set value of a variable by giving the value as the second
      argument, after the variable name. No value is returned by the "var"
      command in this case.

    * You can assign values to multiple variables "in parallel" by giving
      successive name/value pairs. 

    * If invoked in a procedure on a variable that has not been declared global
      (using the "global" command), this applies to the local variable of the
      given name, even if it has no value yet.

See also:
    global.

global.{swat_prog.tcl.var}
607:Usage:
    global <varName>+

Examples:
    "global attached"	When next the "attached" variable is fetched or
			set, get it from the global scope, not the local one.

Synopsis:
    Declares the given variables to be from the global scope.

Notes:
    * For the duration of the procedure in which this command is executed (but
      not in any procedure it invokes), the global variable of the given name
      will be used when the variable is fetched or set.

    * If no global variable of the given name exists, the setting of that
      variable will define it in the global scope.

See also:
    var.

