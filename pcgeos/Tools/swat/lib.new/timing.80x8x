# *****************************************************************************
#
# 	Copyright (c) Berkeley Softworks 1989 -- All Rights Reserved
# 
# PROJECT:	PC GEOS
# MODULE:	Swat System Library -- Timing Support
# FILE:		timing.80x8x - online 80x8x instruction timing file
# 
# AUTHOR:	Matt Loveless, Adam de Boor
# 
# REVISION HISTORY:
# 	Name	Date		Description
# 	----	-------		-----------
# 	Matt	4/17/89		Initial version
#	Adam	4/89		TCL extraction/formatting working
# 
# DESCRIPTION:
#
# This file contains information on the timing of all the instructions
# in the 8088/8086/80286 series of processors.
#
# Entries are organized into lists for fast reading by Swat. Each list
# begins with the mnemonic (all upper case) of the instruction the list
# describes followed by the class of instruction. Succeeding elements are
# lists organized as:
#
#	{<mode> <8086/8088-byte time> <8088-word time> <80286 time> <V20-byte> <V20-word>}
#
# <mode> is the addressing mode used by the instruction being examined.
# It is one of the following:
#	implied		the operand is implied by the instruction and need
#			not be checked. Swat may also just note the existance
#			of a single addressing mode for the instruction, if
#			it desires.
#	reg,reg		two register operands
#	reg,mem		register is destination, memory is source
#	mem,reg		memory is destination, register is source
#	seg,reg		segment register is destination, register is source
#	seg,mem		segment register is destination, memory is source
#	reg		single operand is a register
#	mem		single operand is in memory
#	seg		single operand is a segment register
#	label		generic label (direct transfer)
#	label_s		short label
#	label_n		near label
#	label_f		far label
#	branch_yes	if branch taken
#	branch_no	if branch not taken
#
#
# Instruction classes tell swat which of the possible addressing modes it
# can expect to find (e.g. for a CALL instruction, it will look for mem16
# and mem32 modes, rather than just mem). This provides for a certain amount
# of extensibility without having to hardwire the choices into swat itself.
# Possible classes are:
#	control		control transfer (call, jmp, jnb, etc.)
#	muldiv		multiply/divide
#	ea		generic effective-address (can have reg,mem or 
#			mem,reg or reg,reg -- doesn't distinguish timing
#			on operand size (except for 8088/word).
#	implied		instruction's operand is implied
#	enter		enter instruction...
#	esc		escape (floating-point)
#	int		software interrupt (handle 1 extra cycle for INT 3).
#			Also implies that entry 1 is for the 8086 and entry
#			2 for the 8088 w/o regard to the 'word' bit.
#	branch		conditional branch
#	prefix		instruction is a prefix whose instruction follows.
#			sum the timings.
#	move		like ea, but handle special accumulator modes and
#			segment registers.
#	stack		push/pop/pushf/popf (no arg => implied, else ea/seg)
#	shift		variable/constant/1-bit shifts
#	repeat 		repeat prefix
#	xchg		xchg (handle AX specially)
#	return		handle retn/retf/iret, including size of dest
#			instruction...
#	io		IN/OUT instructions
#
#	$Id: timing.80x8x,v 1.7.9.1 97/03/29 11:26:58 canavese Exp $
#
# ******************************************************************************


#inst	class
#	{mode		88b/86		88w		286	V20b	V20w}
#
{AAA 	implied
	{default	8		8		3	3	3}}
{AAD 	implied
	{default	60		60		14	7	7}}
{AAM 	implied
	{default	83		83		16	15	15}}
{AAS 	implied
	{default	8		8		3	7	7}}
{ADC	ea
	{reg,reg	3		3		2	2	2}
	{mem,reg	16		24		7	16	24}
	{reg,mem	9		13		7	11	15}
	{reg,immed	4		4		3	4	4}
	{mem,immed	17		23		7	18	26}}
{ADD	ea
	{reg,reg	3		3		2	2	2}
	{mem,reg	16		24		7	16	24}
	{reg,mem	9		13		7	11	15}
	{reg,immed	4		4		3	4	4}
	{mem,immed	17		23		7	18	26}}
{AND	ea
	{reg,reg	3		3		2	2	2}
	{mem,reg	16		24		7	16	24}
	{reg,mem	9		13		7	11	15}
	{reg,immed	4		4		3	4	4}
	{mem,immed	17		23		7	18	26}}
{ARPL	implied
	{default	-		-		10	-	-}}
{BOUND	cint
	{branch_no	-		-		13	18	26}
	{branch_yes	-		-		23+m	73	76}}
{CALL	control
	{label_n	19		23		7+m	16	20}
	{label_f	28		36		13+m	21	29}
	{reg		16		20		7+m	14	18}
	{mem16		21		29		11+m	23	31}
	{mem32		37		53		16+m	31	47}}
{CBW	implied
	{default	2		2		2	2	2}}
{CLC	implied
	{default	2		2		2	2	2}}
{CLD	implied
	{default	2		2		2	2	2}}
{CLI	implied
	{default	2		2		3	2	2}}
{CLTS	implied
	{default	-		-		2	-	-}}
{CMC	implied
	{default	2		2		2	2	2}}
{CMP	ea
	{reg,reg	3		3		2	2	2}
	{mem,reg	9		13		7	11	15}
	{reg,mem	9		13		6	11	15}
	{reg,immed	4		4		3	4	4}
	{mem,immed	10		14		6	13	17}}
{CMPSB	implied
	{default	22		22		8	13	13}
	{repeat		9+22n		9+22n		5+9n	7+14n	7+14n}}
{CMPSW	implied
	{default	22		30		8	13	21}
	{repeat		9+22n		9+30n		5+9n	7+14n	7+22n}}
{CWD	implied
	{default	5		5		2	4:5	4:5}}
{DAA	implied
	{default	4		4		3	3	3}}
{DAS	implied
	{default	4		4		3	7	7}}
{DEC	ea
	{reg		3		3		2	2	2}
	{mem		15		23		7	16	24}}
{DIV	muldiv
	{reg8		80:90		80:90		14	19:25	19:25}
	{mem8		86:96		86:96		17	25:35	25:35}
	{reg16		144:162		144:162		22	19:25	19:25}
	{mem16		150:168		158:176		25	25:35	25:35}}
{ENTER	enter
	{immed,immed	-		-		12+4n-4 16	23+16n-16}}
{ESC	esc
	{immed,reg	2		2		9:20	2	2}
	{immed,mem	8		12		9:20	11	15}}
{HLT	implied
	{default	2		2		2	2	2}}
{IDIV	muldiv
	{reg8		101:112		101:112		17	29:43	29:43}
	{mem8		108:118		107:118		20	35:53	35:53}
	{reg16		165:184		165:184		25	29:43	29:43}
	{mem16		171:190		175:194		28	35:53	35:53}}
{IMUL	muldiv
	{reg8		80:98		80:98		13	33:47	33:47}
	{reg16		128:154		128:154		21	33:47	33:47}
	{mem8		86:104		86:104		16	39:57	39:57}
	{mem16		134:160		138:164		24	39:57	39:57}
	{reg16,reg16,immed -		-		21	28:34	36:42}
	{reg16,mem16,immed -		-		24	34:44	46:52}}
{IN	io
	{reg,immed	10		14		5	9	13}
	{reg,reg	8		12		5	8	12}}
{INC	ea
	{reg		3		2		2	2	2}
	{mem		15		23		7	16	24}}
{INSB	implied
	{default	-		-		5	10	10}
	{repeat		-		-		5+4n	9+8n	9+8n}}
{INSW	implied
	{default	-		-		5	10	18}
	{repeat		-		-		5+4n	9+8n	9+16n}}
{INT	int
	{default	51		71		23+m	38:50	38:50}}
{INTO	cint
	{branch_yes	53		73		24+m	52	52}
	{branch_no	4		4		3	3	3}}
{IRET	return
	{default	32		44		17+m	39	39}}
#
# These are selected based on the opcodes swat prints out
#
{JO	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JNO	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JC	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JNC	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JZ	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JNZ	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JBE	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JA	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JS	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JNS	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JP	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JNP	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JL	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JGE	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JLE	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JG	branch
	{branch_yes	16		16		7+m	14	14}
	{branch_no	4		4		3	4	4}}
{JCXZ	branch
	{branch_yes	18		18		8+m	13	13}
	{branch_no	6		6		4	5	5}}
{JMP	control
	{label_s	15		15		7+m	12	12}
	{label_n	15		15		7+m	13	13}
	{label_f	15		15		11+m	15	15}
	{reg		11		11		7+m	11	11}
	{mem16		18		18		11+m	20	24}
	{mem32		24		24		15+m	27	35}}
{LAHF	implied
	{default	4		4		2	2	2}}
{LAR	ea
	{reg,reg	-		-		14	-	-}
	{reg,mem	-		-		16	-	-}}
{LDS	implied
	{default	16		24		7	18	26}}
{LES	implied
	{default	16		24		7	18	26}}
{LEA	implied
	{default	2		2		3	4	4}}
{LEAVE	implied
	{default	-		-		5	6	10}}
{LGDT	implied
	{default	-		-		11	-	-}}
{LIDT	implied
	{default	-		-		12	-	-}}
{LLDT	ea
	{reg		-		-		17	-	-}
	{mem		-		-		19	-	-}}
{LMSW	ea
	{reg		-		-		3	-	-}
	{mem		-		-		6	-	-}}
{LOCK	prefix
	{default	2		2		0	2	2}}
{LODSB	implied
	{default	12		16		5	7	7}}
{LODSW	implied
	{default	12		16		5	7	11}}
{LOOP	branch
	{branch_yes	17		17		8+m	13	13}
	{branch_no	5		5		4	5	5}}
{LOOPE	branch
	{branch_yes	18		18		8+m	14	14}
	{branch_no	4		4		6	5	5}}
{LOOPNE	branch
	{branch_yes	19		19		8+m	14	14}
	{branch_no	5		5		4	5	5}}
{LSL	ea
	{reg,reg	-		-		14	-	-}
	{reg,mem	-		-		16	-	-}}
{LTR	ea
	{reg		-		-		17	-	-}
	{mem		-		-		19	-	-}}
{MOV	move
	{reg,reg	2		2		2	2	2}
	{mem,reg	9		13		3	9	13}
	{reg,mem	8		12		5	11	15}
	{mem,immed	10		14		3	11	15}
	{reg,immed	4		4		2	4	4}
	{mem,ax		10		14		3	9	13}
	{ax,mem		10		14		3	10	14}
	{seg,reg	2		2		2	2	2}
	{seg,mem	8		12		5	11	15}
	{reg,seg	2		2		2	2	2}
	{mem,seg	9		13		3	10	14}}
{MOVSB	implied
	{default	18		18		5	11	11}
	{repeat		9+17n		9+17n		5+4n	11+8n	11+8n}}
{MOVSW	implied
	{default	18		26		5	19	19}
	{repeat		9+17n		9+25n		5+4n	11+8n	11+16n}}
{MUL	muldiv
	{reg8		70:77		70:77		13	21:30	21:30}
	{reg16		118:113		118:113		21	21:30	21:30}
	{mem8		76:83		76:83		16	27:36	27:36}
	{mem16		124:139		128:143		24	27:36	27:36}}
{NEG	ea
	{reg		3		3		2	2	2}
	{mem		16		24		7	16	24}}
{NOP	implied
	{default	3		3		3	3	3}}
{NOT	ea
	{reg		3		3		2	2	2}
	{mem		16		24		7	16	24}}
{OR	ea
	{reg,reg	3		3		2	2	2}
	{mem,reg	16		24		7	16	24}
	{reg,mem	9		13		7	11	15}
	{reg,immed	4		4		3	4	4}
	{mem,immed	17		25		7	18	26}}
{OUT	io
	{immed,reg	10		14		3	8	12}
	{reg,reg	8		12		3	8	12}}
{OUTSB	implied
	{default	-		-		5	10	10}
	{repeat		-		-		5+4n	9+8n	9+8n}}
{OUTSW	implied
	{default	-		-		5	18	18}
	{repeat		-		-		5+4n	9+8n	9+16n}}
{POP	stack
	{reg		8		12		5	8	12}
	{mem		17		25		5	17	25}
	{seg		8		12		5	8	12}}
{POPA	implied
	{default	-		-		19	43	75}}
{POPF	stack
	{default	8		12		5	8	12}}
{PUSH	stack
	{reg		11		15		3	8	12}
	{mem		16		24		5	18	26}
	{seg		10		14		3	8	12}
	{immed		-		-		3	7	12}}
{PUSHA	implied
	{default	-		-		17	35	67}}
{PUSHF	stack
	{default	10		14		3	8	12}}
{ROL	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{ROR	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{RCL	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{RCR	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{REP	repeat}
{REPE	repeat}
{REPNE	repeat}
{RETN	return
	{immed		20		24		11+m	20	24}
	{default	16		20		11+m	15	19}}
{RETF	return
	{immed		25		33		15+m	24	32}
	{default	26		34		15+m	21	29}}
{SAHF	implied
	{default	4		4		2	3	3}}
{SAL	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{SAR	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{SHR	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{SHL	shift
	{reg,1		2		2		2	2	2}
	{mem,1		15		23		7	16	24}
	{reg,cl		8+4n		8+4n		5+n	7+n	7+n}
	{mem,cl		20+4n		28+4n		8+n	19+n	27+n}
	{reg,immed	-		-		5+n	7+n	7+n}
	{mem,immed	-		-		8+n	19+n	27+n}}
{SBB	ea
	{reg,reg	3		3		2       2       2}
	{mem,reg	16		24		7       16      24}
	{reg,mem	9		13		7       11      15}
	{reg,immed	4		4		3       4       4}
	{mem,immed	17		25		7       18      26}}
{SCASB	implied
	{default	15		15		7	7	7}
	{repeat		9+15n		9+19n		5+8n	7+10n	7+10n}}
{SCASW	implied
	{default	15		19		7	7	11}
	{repeat		9+15n		9+19n		5+8n	7+10n	7+14n}}
{SGDT	implied
	{default	-		-		11	-	-}}
{SIDT	implied
	{default	-		-		12	-	-}}
{SLDT	ea
	{reg		-		-		2	-	-}
	{mem		-		-		3	-	-}}
{SMSW	ea
	{reg		-		-		2	-	-}
	{mem		-		-		3	-	-}}
{STC	implied
	{default	2		2		2	2	2}}
{STD	implied
	{default	2		2		2	2	2}}
{STI	implied
	{default	2		2		2	2	2}}
{STOSB	implied
	{default	11		11		3	7	7}
	{repeat		9+10n		9+10n		4+3n	7+4n	7+4n}}
{STOSW	implied
	{default	11		15		3	7	11}
	{repeat		9+10n		9+14n		4+3n	7+4n	7+8n}}
{STR	ea
	{reg		-		-		2	-	-}
	{mem		-		-		3	-	-}}
{SUB	ea
	{reg,reg	3		3		2       2       2}
	{mem,reg	16		24		7       16      24}
	{reg,mem	9		13		7       11      15}
	{reg,immed	4		4		3       4       4}
	{mem,immed	17		25		7       18      26}}
{TEST	move
	{reg,reg	3		3		2	2	2}
	{reg,mem	9		13		6	10	14}
	{reg,immed	5		5		3	4	4}
	{mem,immed	11		15		6	11	15}
	{ax,immed	4		4		3	4	4}}
{VERR	ea
	{reg		-		-		14	-	-}
	{mem		-		-		16	-	-}}
{VERW	ea
	{reg		-		-		14	-	-}
	{mem		-		-		16	-	-}}
{WAIT	implied
	{default	4		4		3	2+5n	2+5n}}
{XCHG	xchg
	{reg,reg	4		4		3	3	3}
	{reg,mem	17		25		5	16	24}
	{mem,reg	17		25		5	16	24}
	{ax,reg		3		3		3	2	2}}
{XLATB	implied
	{default	11		11		5	9	9}}
{XOR	ea
	{reg,reg	3		3		2       2       2}
	{mem,reg	16		24		7       16      24}
	{reg,mem	9		13		7       11      15}
	{reg,immed	4		4		3       4       4}
	{mem,immed	17		25		7       18      26}}
