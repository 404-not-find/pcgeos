table enter $fatalerr_info_table ssheet::RULER_ORIGIN_TOO_LARGE { The ruler origin specified was > 16K, which was unexpected.}
table enter $fatalerr_info_table ssheet::CONTROLLER_UTILITY_ROUTINE_MUST_BE_CALLED_FROM_SAME_SEGMENT { A utility routine was called from a different segment, but it relies on cs
 being useful data and hence can only be called from the same segment.}
table enter $fatalerr_info_table ssheet::CONTROLLER_NO_UI_FOR_CONTROLLER { A controller was called for UPDATE_UI but had no UI to update.}
table enter $fatalerr_info_table ssheet::ILLEGAL_CELL_TYPE { A routine got a cell type it wasn't expecting (ie. something outside
 the CellType enum or something it couldn't / shouldn't handle}
table enter $fatalerr_info_table ssheet::ROW_ARRAY_CORRUPTED { The row or column array has become corrupted.}
table enter $fatalerr_info_table ssheet::BAD_CALLBACK_FOR_EMPTY_CELL { A callback routine was called with an empty cell, which it was not
 expecting.  Calls to RangeEnum() can either callback for every cell,
 or only for cells with data, and some callbacks specifically handle
 only data cells.}
table enter $fatalerr_info_table ssheet::NAME_PARAMS_MUST_BE_ON_STACK { This error occurs when dx!=ss, to make sure that parameters
 are being passed on the stack in the correct manner.}
table enter $fatalerr_info_table ssheet::CANNOT_DELETE_CELL_WITH_NON_DEFAULT_STYLES { A cell with non-default styles was being deleted.  If this is to happen,
 reference count of the style must be decremented first.}
table enter $fatalerr_info_table ssheet::CELL_DATA_TOO_LARGE { AllocCellCommon() was called with data larger than CELL_TEXT_MAX.}
table enter $fatalerr_info_table ssheet::ILLEGAL_CELL_TYPE_FOR_ALLOC { AllocCellCommon() was called with a value outside the CellType enum.}
table enter $fatalerr_info_table ssheet::BAD_CELL_ATTRS { Bad cell attributes were passed to GetCellAttrs().  Either 0 must be
 passed, indicating use the current value or default, or they must be
 passed with:
	ss:bx - ptr to CellAttrs}
table enter $fatalerr_info_table ssheet::BAD_CELL_ATTR_DATA { A CellAttrs structure that was stored (or about to be stored) in the
 style array has bad data.  Either bad data was passed, or the style
 array has become corrupted, perhaps by memory-trashing.}
table enter $fatalerr_info_table ssheet::EMPTY_CELL_ATTR_DATA { The CellAttrs structure being referred to is empty.  The EC kernel
 fills empty ElementArray entries with 0xcc.  The spreadsheet shouldn't
 ever be pointing to one of these.  It may be the caller has an out-of-date
 style token, or a style token from a different file.}
table enter $fatalerr_info_table ssheet::CELL_ATTR_REF_COUNT_ABOVE_10000 { The reference count for a cell attribute is above 10000.  While this
 is entirely possible, it is not very common, so there may be a problem.}
table enter $fatalerr_info_table ssheet::MESSAGE_NOT_HANDLED_IN_ENGINE_MODE { If the spreadsheet is in engine mode, the application or subclass is
 expected to handle mouse and keyboard events.}
table enter $fatalerr_info_table ssheet::ACTIVE_CELL_OUTSIDE_SELECTION { The active cell specified was outside the selection specified.  It must
 be within the bounds of the selection, as it is part of the selection.}
table enter $fatalerr_info_table ssheet::TOO_MANY_SSHEET_ROWS { More rows than the Cell library can handle were passed to
 SpreadsheetInitFile().  It can currently handle up to 16384 rows.}
table enter $fatalerr_info_table ssheet::TOO_MANY_SSHEET_COLUMNS { More columns than the Cell library can handle were passed to
 SpreadsheetInitFile().  It can currently handle up to 256 columns.}
table enter $fatalerr_info_table ssheet::NAME_SHOULD_BE_UNDEFINED {
 The spreadsheet code expected a name to be undefined and it wasn't.
 This usually indicates an error in the spreadsheet logic, but it could
 also be the result of the name-list being trashed.
}
table enter $fatalerr_info_table ssheet::NAME_SHOULD_BE_DEFINED {
 The spreadsheet code expected a name to be defined. Instead it
 was in the name-list but was marked as not having a definition.
 This almost always indicates an error in the spreadsheet code
 or a scribbling bug that has trashed the name-list. Regardless
 it is a bad thing.
}
table enter $fatalerr_info_table ssheet::BAD_CELL_TYPE { A routine was expecting a specific type of cell, and didn't get it.
 Legal cell types are:
	CT_TEXT - text string
	CT_CONSTANT - numeric constant
	CT_FORMULA - formula
	CT_NAME - name definition
	CT_CHART - chart definition
	CT_EMPTY - dependencies/format only
	CT_DISPLAY_FORMULA - formula for display only}
table enter $fatalerr_info_table ssheet::SPREADSHEET_ALREADY_HAS_MOUSE_GRAB { The spreadsheet object attempted to grab the mouse, but it already has it}
table enter $fatalerr_info_table ssheet::SPREADSHEET_DOESNT_HAVE_MOUSE_GRAB { The spreadsheet attempted to release the mouse, but it doesn't have it grabbed}
table enter $fatalerr_info_table ssheet::SPREADSHEET_ILLEGAL_RECALC_FLAGS_IN_CELL { While recalculating a cell, bad flags were found in the cell data.  The
 most likely cause is that the cell was not initialized correctly.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_BAD_PARAMS_TO_FILL_SERIES { Bad parameters were passed to MSG_SPREADSHEET_FILL_SERIES.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_CHART_TOO_LARGE { The spreadsheet tries to make the chart about 1/4 the screen size.
 Current calculations suggest it should be larger than 65536 points,
 which seems a bad thing.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_SCROLL_OFFSET_OFF_DOCUMENT { The scroll offset for the document has been calculated and is now off
 the document.  This is probably a problem in the track scrolling handler.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_NO_CHART_BODY { MSG_SPREADSHEET_CHART_RANGE was called, but the spreadsheet had never been
 setup up to have a chart body, which is required for charting.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_TOO_MANY_CHARS_FOR_TEXT_SCRAP { The number of characters passed to a routine for generating text transfer
 items from the spreadsheet was passed a value that was too large.}
table enter $fatalerr_info_table ssheet::NAME_MUST_EXIST {
 The spreadsheet code expected a name to exist, but it was not found
 in the name-list. This almost always indicates a flaw in the logic
 of the spreadsheet code, but it might also indicate that the name-list
 has been trashed unexpectedly.
}
table enter $fatalerr_info_table ssheet::SSHEET_PASTE_ENTRY_TOO_LARGE {
 The spreadsheet was retrieving an entry from the clipboard and found
 that the entry was larger than its internal buffer. This means that
 data would be lost from this entry, and that clearly isn't acceptable.

 At this point:
	ds:si	= Pointer to the entry
	cx	= Size of the entry
	ss:bp	= SSMetaStruc
}
table enter $fatalerr_info_table ssheet::CELL_NAME_BUFFER_ODDSIZED { The DBCS buffer size for a cell format is an odd size.  Although this
 isn't harmful, it does mean the caller allocated the buffer incorrectly.}
table enter $fatalerr_info_table ssheet::CELL_DATA_STRING_ODDSIZE { RV_TEXT for a cell is odd-sized.  Either the cell is corrupt, or
 a previous string write to the cell didn't store the string/size
 correctly. (DBCS only)}
table enter $fatalerr_info_table ssheet::NAME_STRING_ODDSIZE { While processing MSG_SPREADSHEET_GET_NAME_INFO, a DBCS string turned
 out to be odd-sized, which is bad.  The formula (CF_formulaSize)
 may be at fault.}
table enter $fatalerr_info_table ssheet::BAD_WEEKDAY_IN_FILL_BY_WEEKDAY { A bad weekday was encountered when filling by weekday, ie. a valid date
 let to an invalid weekday.}
table enter $fatalerr_info_table ssheet::SPREADSHEET_ORIGIN_NOT_FOUND { The TEMP_SPREADSHEET_DOC_ORIGIN variable data isn't available, even
 though the flag is set that says it should be.}
