table enter $fatalerr_info_table mailbox::ADDRESS_CONTROL_SUBCLASS_NOT_OWNED_BY_ANYONE { MailboxAddressControl is attempting to find the driver that defined its
 subclass but MemSegmentToHandle returned no owner for the class segment.
 I very much doubt this will ever, ever happen, as control couldn't have
 gotten to the superclass method if the class pointer was bogus (unless the
 thing is very, very lucky).}
table enter $fatalerr_info_table mailbox::ADDRESSES_USE_DIFFERENT_MEDIUM { two addresses are being compared that use different transport media. this
 should have been checked before OUCompareAddresses was called}
table enter $fatalerr_info_table mailbox::ADMIN_FILE_NOT_OPEN_YET { AdminGetFile was called before the administrative file was opened by AdminInit}
table enter $fatalerr_info_table mailbox::ADMIN_MAP_BLOCK_NOT_VALID { The map block for the administrative file either doesn't exist or has
 the incorrect user ID. The admin file has been corrupted somehow.}
table enter $fatalerr_info_table mailbox::ALL_ADDRESSES_MUST_BE_FOR_SAME_TRANSPORT_AND_MEDIUM { OutboxTransmitMessage was called for a message, specifying more than one
 address for transmission. This is fine. What's not fine is that the multiple
 addresses use multiple transport media (as determined by their MITA_medium
 fields). Since transmit threads are spawned based on transport/medium pairs,
 and OutboxTransmitMessage has only been written to cope with one such pair,
 whoever is calling the routine is SOL.

 This can be caused by a left-over talID from a previous incarnation of the
 system, perhaps. I hope not, though.}
table enter $fatalerr_info_table mailbox::ALL_DUPLICATES_NOT_MARKED_THE_SAME { A message has duplicate addresses but they are not all marked with the same
 talID. The UI provided to the user should not allow this condition to arise.}
table enter $fatalerr_info_table mailbox::ALREADY_HAVE_A_SYSTEM_PANEL { MACreateNewPanel was called to create a panel with MCP_IS_SYSTEM set, but
 there's already a system panel for recorded in the MailboxPanelBoxData
 structure in the application object.}
table enter $fatalerr_info_table mailbox::ASKED_FOR_NAME_OF_VM_FILE_NOT_OPENED_BY_US { Someone has called MailboxGetVMFileName passing a handle that was not returned
 by MailboxGetVMFile.}
table enter $fatalerr_info_table mailbox::CANNOT_MANGLE_MONIKER_OF_REALIZED_OBJECT { UtilMangleMoniker has been called for an object that is already on-screen.
 This function contains no code to force a visual update & geometry
 recalculation after mangling the moniker, so such an operation is not allowed.}
table enter $fatalerr_info_table mailbox::CANNOT_V_LOCKED_OUTBOX_THREADS_BLOCK { Someone is calling OTV when they should be calling OTUnlock.}
table enter $fatalerr_info_table mailbox::COMPARISON_OFFSET_BEYOND_BOUNDS_OF_ITEM { The caller of DBQMatch has specified an offset of bytes to compare that is
 beyond the end of the current item. Likely the AX passed to DBQMatch was
 garbage.}
table enter $fatalerr_info_table mailbox::CONNECTED_FLAG_MAY_NOT_BE_SET_UNLESS_AVAILABLE_FLAG_IS_ALSO_SET { Something is attempted to mark a nonexistent unit of a transport medium as
 being connected. This cannot be.}
table enter $fatalerr_info_table mailbox::CUR_ID_DOESNT_MATCH_SELECTED_ADDRESS { ODAddrEnum was called with a TalID that isn't the address-index TalID for
 the selected address, whose index was also passed in. Basically, the thing
 was passed bogus data.}
table enter $fatalerr_info_table mailbox::CURRENT_THREAD_HAS_NO_THREAD_DATA { Someone is calling a function that must be called on a transmit thread (e.g.
 from a transport driver function involved in transmitting messages), but
 is doing so not on a transmit thread.}
table enter $fatalerr_info_table mailbox::DBQ_REF_COUNT_OVERFLOW { An element of a DBQ has been referenced > 65535 times. In all likelihood,
 something is referencing the item (e.g. via DBQGetItem) but never calling
 DBQDelRef.}
table enter $fatalerr_info_table mailbox::DBQ_REF_COUNT_UNDERFLOW { Someone has called DBQDelRef on a DBQ item for which it did not have a
 reference. It's also possible, of course, that the caller is correct, but
 someone else is at fault. I leave that to you to figure out.}
table enter $fatalerr_info_table mailbox::DIALOG_NOT_FOUND { There is no child of the MailboxApp that is in the block whose handle was
 passed to MSG_MA_DESTROY_DIALOG in cx.}
table enter $fatalerr_info_table mailbox::DMAP_ALLOCATED_ARRAY_NOT_FIRST_CHUNK { The chunk array that holds Driver Map info is not the first chunk in the
 VM LMem block, which is odd, since nothing else should have been allocated.}
table enter $fatalerr_info_table mailbox::DONE_WITH_VM_FILE_NOT_OPENED_BY_US { Someone has called MailboxDoneWithVMFile passing a handle that we did not
 return from MailboxGetVMFile, or is calling MailboxDoneWithVMFile one too
 many times.}
table enter $fatalerr_info_table mailbox::DS_DI_NOT_DATA_FOR_CURRENT_THREAD { At this point in our life, we are expecting ds:di to be the OutboxThreadData
 for the currently-executing thread, and it's not.}
table enter $fatalerr_info_table mailbox::DS_NOT_OUTBOX_THREADS { DS is supposed to point to the PLocked OutboxThreads resource. It doesn't}
table enter $fatalerr_info_table mailbox::DUP_ADDRESS_SENT_BEFORE_ORIGINAL { An address marked with MTF_DUP has just been sent to. Given that (1) when
 an address with a duplicate has been sent to, it clears the MTF_DUP flag of
 its duplicate and disassociates itself from the duplicate, and (2) addresses
 are always sent to from the start of the array to the end, and (3) if
 transmission to an address fails, no further attempt is made to send to any
 duplicate address for that message, there should never arise a case where
 an address with MTF_DUP set is sent to. If it is, one of the above 3
 invariants has varied somehow.}
table enter $fatalerr_info_table mailbox::DUPLICATE_MESSAGE_LOCK_DURING_SORT { While sorting the array of messages for a message list, the element-lock
 callback was called while there was already a cached locked element.}
table enter $fatalerr_info_table mailbox::DUPLICATE_SET_MESSAGE { A confirmation box has been told more than once what message it's to
 display. It has no code to cope with changing messages...}
table enter $fatalerr_info_table mailbox::FILE_HAS_NO_NAME_ATTRIBUTE { Attempting to see if a driver has already been seen, when performing a
 FileEnum, and the IFS driver has not been able to find the name of the file.
 I don't expect to ever, ever see this error come up unless ES is no longer
 pointing to the FileEnumCallbackData segment.}
table enter $fatalerr_info_table mailbox::FILTERED_TRANSPORT_LIST_MISSING_FILTER { An OutboxTransportList has a type of OTLT_FILTERED, but you've forgotten
 to initialize its OTLI_filter instance variable, leaving it with no idea
 which transports you actually want to keep.}
table enter $fatalerr_info_table mailbox::FIRST_MESSAGE_HAS_NO_XMIT_ADDR { When attempting to connect, after having prepared a batch of messages, the
 first message in the batch no longer has any address marked with the thread's
 xmit talID. Perhaps the message could not be prepared and it was not properly
 removed from the batch?}
table enter $fatalerr_info_table mailbox::HOW_CAN_MEDIA_TRANSPORT_BE_INVALID? { Attempted to find the number of significant address bytes for a message
 address and was told that the transport/medium pair is not valid. Since this
 message still exists, and should be referencing the OutboxMedia entry,
 something must have screwed up the reference count for the entry, or has
 biffed the MITA_medium entry in the address.

 Also comes up if you attempt to display a list for an invalid combination.
 Again, this should never happen, because a BY_TRANSPORT panel is only put up
 in response to a transport driver saying it can use a connection over a
 particular medium, so the combination of transport & medium should be valid.}
table enter $fatalerr_info_table mailbox::HOW_CAN_TRANSPORT_DRIVER_BE_INVALID? { The transport driver token was probably got trashed.}
table enter $fatalerr_info_table mailbox::INBOX_APP_NAME_ARRAY_NOT_SECOND_CHUNK { The chunk array that holds application name info is not the second chunk in
 the VM LMem block, which is odd, since only the token array has been allocated
 in the block.}
table enter $fatalerr_info_table mailbox::INBOX_APP_TOKEN_MAP_NOT_FIRST_CHUNK { The chunk array that holds app token info is not the first chunk in the
 VM LMem block, which is odd, since nothing else should have been allocated.}
table enter $fatalerr_info_table mailbox::INBOX_FILE_ID_TREE_NOT_THIRD_CHUNK { The chunk that holds the root of the FileID tree is not the third chunk in
 the VM LMem block, which is odd, since nothing else should have been
 allocated.}
table enter $fatalerr_info_table mailbox::INCONSISTENT_UNIT_SIZES_FOR_MEDIUM { Something has generated notification for a unit of a particular medium using
 a different number of bytes to indicate the unit than was used before. This
 is not allowed.}
table enter $fatalerr_info_table mailbox::INCONSISTENT_UNIT_TYPES_FOR_MEDIUM { Something has generated notification for a unit of a particular medium using
 a different style of expressing the unit than was used before. This is not
 allowed.}
table enter $fatalerr_info_table mailbox::INVALID_ADDRESS_NUMBER { The passed address number is for an address that doesn't exist in the
 message.}
table enter $fatalerr_info_table mailbox::INVALID_CONTENTS_INDEX_SET { MSG_MAILBOX_SEND_CONTROL_SET_CONTENTS was sent with an index in cx that is
 beyond the range of the MSCI_dataTypes array}
table enter $fatalerr_info_table mailbox::INVALID_DBQ_HANDLE { A DBQ routine has received a handle in DI that is not for a DBQ}
table enter $fatalerr_info_table mailbox::INVALID_DELIVERY_VERB { MailboxRegisterMessage was called with an invalid MMF_VERB field}
table enter $fatalerr_info_table mailbox::INVALID_DMAP_HANDLE { A DMap routine has received a handle in AX that is not for a DMap}
table enter $fatalerr_info_table mailbox::INVALID_DUPLICATE_ADDR_LIST { The MITA_next field of an address has been corrupted so the list of
 duplicates of an address wanders off into nowhere.}
table enter $fatalerr_info_table mailbox::INVALID_MCP_SPECIFIC_FLAG { MSG_MCP_SET_SPECIFIC was called on a MessageControlPanel with CX not set
 to one of the valid values.}
table enter $fatalerr_info_table mailbox::INVALID_MEDIUM_TRANSPORT_ARRAY { The array of transports that use a particular medium has gotten corrupted,
 as evidenced by it ending with a partial MediaTransportMediaRef at the end}
table enter $fatalerr_info_table mailbox::INVALID_MESSAGE_FLAGS { The flags passed to MailboxRegisterMessage contain set bits that must be
 zero.}
table enter $fatalerr_info_table mailbox::INVALID_MESSAGE_NUMBER { MessageListClass was asked for the MailboxMessage for a message it's not
 actually displaying (i.e. the number is > the number of entries in the list)}
table enter $fatalerr_info_table mailbox::INVALID_MESSAGE_PRIORITY { The message priority passed to MailboxRegisterMessage is beyond the pale}
table enter $fatalerr_info_table mailbox::INVALID_MONIKER_FLAG_COMBINATION { The MMF_ALL_VIEW, MMF_CONNECTING, and MMF_PREPARING flags are mutually
 exclusive. In addition, neither MMF_PREPARING nor MMF_CONNECTING allows
 MMF_INCLUDE_DUPS to be set, the one because no addresses are involved in
 the moniker, and the other because only one address is involved.}
table enter $fatalerr_info_table mailbox::INVALID_MONIKER_LIST { The moniker list returned by DR_MBTD_GET_MEDIUM_PARAMS ends with a
 partial VisMonikerListEntry, and is thus invalid.}
table enter $fatalerr_info_table mailbox::INVALID_MTMR_OFFSET { The offset passed to MTGetMediaTransportWord in BP is larger than the
 size of a MediaTransportMediaRef structure, and thus the request for the
 data cannot be satisfied.}
table enter $fatalerr_info_table mailbox::INVALID_OUTBOX_MEDIUM_TOKEN { OMUnregister was called with a media token that is not actually a valid
 entry in the outbox media array. Perhaps OMUnregister was called more than
 once for the message.}
table enter $fatalerr_info_table mailbox::INVALID_START_TIME { The MRA_startBound you passed is not valid. If you want to say "Now", both
 FDAT_date and FDAT_time must be MAILBOX_NOW. The simplest and
 most self-documenting way to do this is to say

 	movdw	ss:[bp].MRA_startBound, MAILBOX_NOW}
table enter $fatalerr_info_table mailbox::INVALID_END_TIME { The MRA_endBound you passed is not valid. If you want to say "Eternity",
 both FDAT_date and FDAT_time must be MAILBOX_ETERNITY. The simplest and
 most self-documenting way to do this is to say

 	movdw	ss:[bp].MRA_startBound, MAILBOX_ETERNITY}
table enter $fatalerr_info_table mailbox::INVALID_TRANSACTION_HANDLE { You called a method of the MailboxSendControl passing a transaction handle
 that is invalid. The transaction handle is what you received in the
 MSG_META_MAILBOX_CREATE_MESSAGE message and must be passed to the various
 methods used to create and register the message.}
table enter $fatalerr_info_table mailbox::INVALID_TRANSPORT_INDEX { MSG_OTMS_REBUILD was called with a transport index that's beyond the
 bounds of the list of transports from the previous rebuild. No idea how
 this could come about...}
table enter $fatalerr_info_table mailbox::INVALID_TRANSPORT_SELECTED { Someone has passed a transport index to the MailboxSendControl that is beyond
 the range of possible items in the controller's OutboxTransportMenu}
table enter $fatalerr_info_table mailbox::ITEM_TOO_SMALL_FOR_COMPLETE_COMPARISON { The current item does not contain all the bytes needed to determine if
 the item should be included in the result queue returned by DBQMatch. Either
 the starting offset or the number of bytes to compare were passed
 incorrectly to DBQMatch.}
table enter $fatalerr_info_table mailbox::MEDIA_STATUS_MAP_INVALID { The VM block that holds the status of media units in the machine either
 doesn't exist or has the wrong user ID. The admin file has been corrupted.}
table enter $fatalerr_info_table mailbox::MEDIA_STATUS_MAP_NOT_FIRST_CHUNK { The chunk array that holds the media unit status info is not the first chunk
 in the VM LMem block, which is odd, since nothing else should have been
 allocated.}
table enter $fatalerr_info_table mailbox::MEDIA_STATUS_RECORD_ONLY_FOR_AVAILABLE_AND_CONNECTED_BITS { MSRecord was called to set some MediaStatusFlags bit other than
 MSF_AVAILABLE or MSF_CONNECTED. You'll have to write your own routine to set
 the bit(s) or modify MSRecord to deal with it.}
table enter $fatalerr_info_table mailbox::MEDIA_TRANSPORT_MAP_INVALID { The VM block that holds the media -> transport map either doesn't exist or
 has the wrong user ID. The admin file has been corrupted.}
table enter $fatalerr_info_table mailbox::MEDIA_TRANSPORT_MAP_NOT_SECOND_CHUNK { The chunk array that holds the transport driver tokens is not the second chunk
 in the VM LMem block, which is odd, since only the media -> transport array
 should have been allocated.}
table enter $fatalerr_info_table mailbox::MEDIA_TRANSPORT_MEDIA_MAP_NOT_FIRST_CHUNK { The chunk array that holds the media -> transport info is not the first chunk
 in the VM LMem block, which is odd, since nothing else should have been
 allocated.}
table enter $fatalerr_info_table mailbox::MEDIUM_AND_TRANSPORT_NOT_IN_OMTP_ARRAY { OMUnregister was called for a transport/medium combination that is not
 recorded in}
table enter $fatalerr_info_table mailbox::MESSAGE_BODY_ERR_TOO_LONG { The bodyErrMsg parameter to MailboxRegisterMessage refers to a string that is
 longer than MAILBOX_MAX_BODY_ERR bytes long.}
table enter $fatalerr_info_table mailbox::MESSAGE_BODY_FILENAME_CHUNK_DOESNT_CONTAIN_NUMBER_PLACEHOLDER { The uiMessagesNameTemplate chunk has had the \1 character removed from it
 and so VMSCreateFilename cannot figure where to put the counter value to
 generate the file name.}
table enter $fatalerr_info_table mailbox::MESSAGE_BODY_FILENAME_CHUNK_HAS_DUPLICATE_PLACEHOLDER { The uiMessagesNameTemplate chunk has more than one \1 character in it. This
 character marks the place for the element number to go when creating the
 file name.}
table enter $fatalerr_info_table mailbox::MESSAGE_BODY_FILENAME_CHUNK_NOT_NULL_TERMINATED { The uiMessagesNameTemplate chunk is not null-terminated}
table enter $fatalerr_info_table mailbox::MESSAGE_BODY_FILENAME_CHUNK_TOO_LARGE { The uiMessagesNameTemplate chunk is larger than a FileLongName, which means
 the generated filename cannot possibly fit within the required buffer.}
table enter $fatalerr_info_table mailbox::MESSAGE_FILENAME_TOO_LONG { The generated filename fits in a FileLongName buffer, but is still too
 long for an actual filename. The uiMessagesNameTemplate has too many
 characters in it.}
table enter $fatalerr_info_table mailbox::MESSAGE_LIST_SUBCLASS_MUST_INTERCEPT_THIS { A method in MessageListClass was called when it has been explicitly defined
 as something the subclass must intercept and handle on its own.}
table enter $fatalerr_info_table mailbox::MESSAGE_SUBJECT_TOO_LONG { The null-terminated subject string is longer than MAILBOX_MAX_SUBJECT bytes.}
table enter $fatalerr_info_table mailbox::METHOD_MUST_BE_SUBCLASSED { A message that must be intercepted by a subclass has made it to the class
 that defines the message.}
table enter $fatalerr_info_table mailbox::MUT_ANY_NOT_ALLOWED_WHEN_NOTIFYING_ABOUT_MEDIA_STATUS { Someone has generated a medium-unit notification with a unit type of MUT_ANY.
 You should use MUT_NONE if the medium does not have units.}
table enter $fatalerr_info_table mailbox::MONIKER_FIELD_TOO_WIDE { The system font is sooooo wide that a field of a message moniker
 is > 64K pixels wide. Something tells me this will never happen}
table enter $fatalerr_info_table mailbox::MONIKER_MISSING_STRING_PLACEHOLDER { The moniker for an object passed to UtilMangleMoniker is missing the \1 char-
 acter that marks where the auxilliary string is supposed to be inserted.
 *ds:si is the object in question}
table enter $fatalerr_info_table mailbox::MONIKER_MUST_BE_TEXT { The moniker for an object passed to UtilMangleMoniker is not a text moniker,
 which means it is unable to manufacture the proper moniker. *ds:si is the
 object in question.}
table enter $fatalerr_info_table mailbox::MONIKERS_RETURNED_BY_TRANSPORT_DRIVER_NOT_A_LIST { The moniker list returned by the transport driver's DR_MBTD_GET_MEDIUM_PARAMS
 function is not actually a moniker list.}
table enter $fatalerr_info_table mailbox::MONIKER_TOO_LONG { A moniker being abused by UtilMangleMoniker is about to be longer than 255
 characters, which is giving the code that's attempting to adjust the
 mnemonic offset fits.}
table enter $fatalerr_info_table mailbox::MSC_ILLEGAL_TRANSPORT_COUNT { MailboxSendControl: An invalid transport number has been passed (it
 is greater than the number of transports currently available).}
table enter $fatalerr_info_table mailbox::MSC_ILLEGAL_MEDIA_COUNT { MailboxSendControl: An invalid media number has been passed (it is
 greater than the number of media types available for the current
 transport).}
table enter $fatalerr_info_table mailbox::MSC_ILLEGAL_TRANSPORT_OR_MEDIA_NAME_SEGMENT { MailboxSendControl: The segment in question does not point to an
 lmem block containing the names of transport or media names.}
table enter $fatalerr_info_table mailbox::MUST_HAVE_AT_LEAST_ONE_MARKED_ADDRESS { OutboxTransmitMessage was called for a message that has none of its addresses
 marked with the given talID}
table enter $fatalerr_info_table mailbox::NAME_ATTRIBUTE_NOT_GIVEN_TO_ENUM_CALLBACK { FileEnum has failed to place FEA_NAME in the array of attributes the
 IFS driver must return to the callback. I do not expect this to ever happen.}
table enter $fatalerr_info_table mailbox::NEW_ADDRESS_IS_ALREADY_MARKED { Somehow, an address for a medium that we thought we just encountered is
 already marked. Perhaps addresses aren't being initialized properly?}
table enter $fatalerr_info_table mailbox::NOTIFICATION_OF_MEDIA_REMOVAL_FOR_UNIT_WE_DIDNT_THINK_EXISTED { Notification has arrived that a particular unit of a particular medium has
 been removed when we never received notification that the unit existed.
 Either something is failing to generate the proper notification, or things
 are happening out of order. Probably the former.}
table enter $fatalerr_info_table mailbox::NOT_A_DBQ { A DBQ routine was given a handle that is for a HugeArray, but is not
 actually a DBQ}
table enter $fatalerr_info_table mailbox::NO_MESSAGES_LEFT_TO_SEND { OTrConnect has been called with an empty queue. OTrPrepareBatch should have
 detected this and control should not have reached OTrConnect}
table enter $fatalerr_info_table mailbox::NO_MESSAGE_ADDRESS_MARKED_WITH_GIVEN_ID { OutboxTransmitMessage was given a message none of whose addresses was
 marked with the talID it was told to transmit. Since other EC code checked
 this just a moment ago, something must have been messing with addresses
 that were just valid, which is bad.}
table enter $fatalerr_info_table mailbox::NO_MESSAGE_LOCKED { While sorting the array of messages for a message list, the element-unlock
 callback was called when there was no element locked.}
table enter $fatalerr_info_table mailbox::OPEN_VM_FILE_NOT_OPENED_BY_US { Someone called MailboxOpenVMFile passing a filename that was not 
 returned from MailboxGetVMFileName.}
table enter $fatalerr_info_table mailbox::OUTBOX_CRITERIA_REFERS_TO_UNAVAILABLE_TRANSPORT { The OutboxTransportList indicated that it was unable to set the passed
 medium/transport/transOption tuple as the current selection, which means
 the criteria stored for the panel are bogus, or the array of possible
 MediaTransport structures has been trashed.}
table enter $fatalerr_info_table mailbox::OUTBOX_INVALID_REASON_TOKEN { OutboxGetReason was called with a token for a reason that's not on record.}
table enter $fatalerr_info_table mailbox::OUTBOX_MEDIA_MAP_INVALID { The VM block that holds the media units for all the existing addresses either
 doesn't exist or has the wrong user ID. The admin file has been corrupted.}
table enter $fatalerr_info_table mailbox::OUTBOX_MEDIUM_TRANSPORT_MAP_NOT_FIRST_CHUNK { The element array that holds the MailboxTransport/MediumType pairs, by
 means of which the Outbox Control Panel knows what transports to display, is
 not the first chunk in the outbox media block, which is odd since nothing
 else should have been allocated.}
table enter $fatalerr_info_table mailbox::OUTBOX_MEDIUM_UNIT_ARRAY_NOT_SECOND_CHUNK { The element array that holds the MailboxMediumDesc things, by
 means of which the outbox code knows which medium an address uses, is
 not the second chunk in the outbox media block, which is odd since only the
 transport/medium array should have been allocated.}
table enter $fatalerr_info_table mailbox::OUTBOX_REASON_MAP_INVALID { The VM block that holds the strings of reasons for transmission failure either
 doesn't exist or has the wrong user ID. The admin file has been corrupted.}
table enter $fatalerr_info_table mailbox::OUTBOX_REASON_MAP_NOT_FIRST_CHUNK { The name array that holds the reason strings is not the first chunk in the
 VM LMem block, which is odd since nothing else should have been allocated.}
table enter $fatalerr_info_table mailbox::PROGRESS_BOX_NOT_RUN_BY_MAILBOX_THREAD { An OutboxProgress object has been duplicated but its burden thread is not
 the mailbox application thread, as it must be for the progress box to be
 attached below the mailbox application object.}
table enter $fatalerr_info_table mailbox::PROGRESS_SETUP_FOR_INVALID_TRANSPORT_MEDIUM_COMBO { MSG_OP_SETUP was invoked on a progress box, passing an OPSetupArgs with
 a MailboxTransport and MediumType whose combination is not recognized
 by the Media module. Most likely, the OPSetupArgs have gotten trashed
 along the way.}
table enter $fatalerr_info_table mailbox::REQUEST_FOR_INVALID_CONTENTS_MONIKER { The MSCContentList for a send dialog has asked for a moniker (BP) that
 is beyond the bounds of the dataTypes array}
table enter $fatalerr_info_table mailbox::REQUEST_FOR_INVALID_ITEM_MONIKER { One of the dynamic lists was asked for a moniker it cannot provide. All
 requests and stuff for these lists are synchronous (i.e. the list subclass
 takes care of the moniker provision), so unless weird queue delays are
 going on in the spui, there should be no reason for being asked for a
 moniker the subclass is unable to provide.}
table enter $fatalerr_info_table mailbox::SEARCH_FLAGS_CORRUPTED { The VisMonikerSearchFlags used by MediaGetAllMonikers have been corrupted
 during the callback to copy the monikers out.}
table enter $fatalerr_info_table mailbox::SECONDARY_CRITERIA_NOT_BY_MEDIUM { At the start of a rescan for an OutboxMessageList, neither the primary
 nor the secondary search criteria is MDPT_BY_MEDIUM. This causes problems,
 as we need that to decide whether a SEND_WITHOUT_QUERY message can be sent
 during the scan. Perhaps the SET_CRITERIA call was wrong?}
table enter $fatalerr_info_table mailbox::SECONDARY_CRITERIA_SHOULD_NOT_EXIST { The primary criteria for a MessageList is non-existent, so the secondary
 should also be non-existent, implying that all messages from the source
 queue should be displayed.}
table enter $fatalerr_info_table mailbox::TEXT_MONIKER_MISSING_FOR_DATA_TYPE { You've placed an entry in the MSCI_dataTypes array whose moniker list
 does not include a text moniker. Without a text moniker, the send dialog
 is unable to set its own moniker properly, as it combines the string for
 the transport driver with the string for the message body.}
table enter $fatalerr_info_table mailbox::TEXT_TEMPLATE_MISSING_PLACEHOLDER { Someone has modified the text in a template text object that's been given to
 UtilReplaceMarkerInTextChunk so the \1 needed to store the string in the
 text is no longer present.}
table enter $fatalerr_info_table mailbox::TITLE_MONIKER_MISSING_SECOND_PLACEHOLDER { The template for the title of a send dialog is missing the \2 needed to
 place the contents string.}
table enter $fatalerr_info_table mailbox::TITLE_STRING_MUST_BE_PROVIDED_BY_SUBCLASS { MessageControlPanel has called MSG_MCP_GET_TITLE_STRING on itself and the
 subclass has not properly fielded the message. See the definition of this
 message for details.}
table enter $fatalerr_info_table mailbox::TRANSMIT_THREAD_DATA_HAS_VANISHED { The transmit thread attempted to locate its OutboxThreadData but it is
 not around. Either the array has been corrupted, so the OTD_thread field
 is wrong making it impossible to find the data, or something has actually
 deleted the data for the thread.}
table enter $fatalerr_info_table mailbox::TRANSMIT_THREAD_MAY_NOT_BORROW_STACK_SPACE { The Stop button of a progress box has been hit while the affected transmit
 thread has an active ThreadBorrowStackSpace in progress. This means the
 cancel flag is now in some random block on the heap, not where it's supposed
 to be in the thread's stack, so we cannot actually set the cancel flag.}
table enter $fatalerr_info_table mailbox::TRANSMIT_THREAD_STARTED_WITH_NOTHING_TO_DO { Something has changed the addresses marked as queued for transmission for
 all the messages queued for the thread, so the thread finds itself with
 absolutely nothing to do. Something has not been following the protocol
 for finding addresses that have been queued for transmission...}
table enter $fatalerr_info_table mailbox::UNABLE_TO_CREATE_MAILBOX_DIRECTORY { Look at the error code in AX to figure out why we were both unable to
 change to or create SP_SPOOL:\MAILBOX}
table enter $fatalerr_info_table mailbox::UNABLE_TO_SET_ADMIN_FILE_PROTOCOL { Attempted to set the protocol number for the admin file, but the filesystem
 refused. Reason is in AX}
table enter $fatalerr_info_table mailbox::UNKNOWN_CONTROL_PANEL_SUBCLASS { Criteria changed on a MessageControlPanel object that is neither of class
 OutboxControlPanelClass nor InboxControlPanelClass, so the code has no clue
 what to tell the application object.}
table enter $fatalerr_info_table mailbox::UNKNOWN_MEDIUM_UNIT_TYPE { Media notification/search was received with an unknown MediumUnitType
 in AL}
table enter $fatalerr_info_table mailbox::UNKNOWN_SOURCE_FOR_TRANSPORT_SELECTED { Someone has called a MailboxSendControl saying a transport has been selected
 but the control has no transport menu created, so it's unable to map the
 transport index to a MediaTransport}
table enter $fatalerr_info_table mailbox::VALID_STATE_FLAG_NEITHER_TRUE_NOR_FALSE { A subclass of MailboxAddressControl called MSG_MAILBOX_ADDRESS_CONTROL_SET_-
 VALID_STATE with an invalid value in CX. The only permitted values are
 TRUE or FALSE}
table enter $fatalerr_info_table mailbox::VM_STORE_HANDLE_INVALID { The VM block that holds the list of VM files used for storing message bodies
 either doesn't exist or has the wrong user ID. The admin file has been
 corrupted.}
table enter $fatalerr_info_table mailbox::VM_STORE_MAP_NOT_FIRST_CHUNK { The name array that holds the VM file names and data is not the first chunk
 in the VM LMem block, which is odd since nothing else should have been
 allocated.}
table enter $fatalerr_info_table mailbox::WAS_NOT_SUPPOSED_TO_FIND_THE_DRIVER { We were scanning the driver map only to force a scan of the driver
 directory, but somehow we found this bogus driver.}
table enter $fatalerr_info_table mailbox::WHERE_OH_WHERE_COULD_MY_LITTLE_CHILD_BE? { MSG_OTM_TRANSPORT_SELECTED sent to OutboxTransportMenu for a trigger that
 doesn't appear to be a child of the menu. How could this happen?}
table enter $fatalerr_info_table mailbox::WHY_IS_ADDR_LIST_NON_ZERO_WHEN_ADDRESS_HAS_BEEN_SENT { An address marked as sent has not had its MITA_addrList field set to 0. Since
 not everything checks for MTF_SENT before using an address marked with
 a particular talID, this can cause problems.}
table enter $fatalerr_info_table mailbox::YOUR_ADDRESS_CONTROL_SUBCLASS_MUST_INTERCEPT_THIS { You've subclassed MailboxAddressControl but not provided your own method
 for MSG_MAILBOX_ADDRESS_CONTROL_GET_ADDRESSES. There is no default for this
 method. You must implement it on your own without help from your superclass.}
