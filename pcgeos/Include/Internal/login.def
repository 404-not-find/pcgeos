COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved
	GEOWORKS CONFIDENTIAL

PROJECT:	PCGEOS
MODULE:		PPP External login
FILE:		login.def

AUTHOR:		Chris Thomas, Jul 24, 1996


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CT	7/24/96   	Initial revision


DESCRIPTION:

	Contains external API definitions for use of a manual login
	application by a communications protocol.

	See geoworks.def for notification types used.



	$Id: login.def,v 1.1 97/04/04 14:13:58 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;;;
;;; The protocol number of the current external login design & API
;;;

LOGIN_PROTOCOL		equ	1

LoginStatus	etype	word,	0, 2
	;
	; These are status codes returned from the initialization
	; and login phases of an external login app to the protocol
	; driver, informing the protocol driver of the outcome of
	; the particular phase.
	;

	LS_CONTINUE		enum	LoginStatus
		;
		; Everything OK.  Protocol should continue with
		; the connection
		;

	LS_ABORT		enum	LoginStatus
		;
		; Protocol driver should abort connection.
		; Should be used in response to user-initiated abort.
		;

	LS_ERROR		enum	LoginStatus
		;
		; Some kind of error was detected by the external
		; login application.  Will result in protocol driver
		; aborting connection, just like LS_ABORT, but
		; indicates an unexpected processing error, rather
		; than a normal condition which would cause an abort.
		;

LoginResponse	record
	LR_NO_NOTIFY:1			; If set on LS_ERROR, user
					; should not be notified
					; of the error by the client.
					; Use when login app performs
					; its own user notification.
	LR_STATUS LoginStatus:15
LoginResponse	end

;;;
;;; Structure passed in data block of MSG_META_NOTIFY(GWNT_LOGIN_INITIALIZE)
;;;

LoginInitInfo struct

	LII_protocol	word		; Protocol # for login/driver
					;  interaction.  The login app
					; should check to make sure it
					; is using this protocol.

	LII_connection	word		; Connection token assigned to
					;   this connection.

	LII_accessPoint	word		; access point id used for connection
					;   Login app can read from this
					;   more info about the login
					;   procedure, if needed

	LII_responseOptr optr		; response to send when initialization
	LII_responseMsg  word		; is complete/aborted
		; Message parameters:
		;	Pass:		cx = token passed in LII_connection
		;			dx = LoginResponse
		;	Return:		nothing
		;	Destroys:	ax, cx, dx, bp

LoginInitInfo ends

;;;
;;; Structure passed in data block of MSG_META_NOTIFY(GWNT_LOGIN_ATTACH)
;;;

LoginAttachInfo	struct

	LAI_connection	word		; Connection token, which should be
					; the same as that passed in
					; LII_connection

	LAI_responseOptr optr		; response to send when login
	LAI_responseMsg  word		; is complete/aborted
		; Message parameters:
		;	Pass:		cx = token passed in LAI_connection
		;			dx = LoginResponse
		;	Return:		nothing
		;	Destroys:	ax, cx, dx, bp

	LAI_strategy	fptr.far	; Strategy routine for serial driver
	LAI_port	word		; serial driver port to use
					;   for read/writes
	LAI_callback	vfptr.far
		;
		; Callback routine login app uses use to filter protocol
		; data out of incoming data stream, as well as send/receive
		; status about the login interaction.
		;
		;	cx = # bytes of data in buffer
		;	bx = LAI_connection token
		;	dx:bp = input data to check for PPP data
		;
		; Return:
		;	carry set if PPP data confirmed (login done)
		;	   app must not read/write port after getting this.
		;	cx = bytes of non-protocol data in buffer
		;	buffer contents unchanged.
		;
		; Destroyed: none
		;

LoginAttachInfo	ends

;;;
;;; Standard INI strings
;;;

LOGIN_APP_CAT_STRING		equ	<"login applications">
	;
	; Category under which info about installed login apps reside
	;

INSTALLED_LOGIN_APPS_KEY_STRING	equ	<"installed apps">
	;
	; Key (type: String section) under LOGIN_APP_CAT_STRING which
	; lists the installed login applications
	;

USE_LOGIN_APP_KEY_STRING	equ	<"useLoginApp">
	;
	; Key (type: int) in accessPointXXX categories specifying 
	; whether a login app should be used for that connection
	; (whether specified in the access point, or by a default
	;  login app)
	; Zero = don't use login app.
	;

LOGIN_APP_KEY_STRING		equ	<"loginApp">
	;
	; String entry under accessPointXXX or ppp specifying which
	; login app should be used.  String should be one of those
	; specified in INSTALLED_LOGIN_APP_KEY_STRING.
	;
