COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

			GEOWORKS CONFIDENTIAL

PROJECT:	Socket
MODULE:		Modem Driver
FILE:		modemDr.def

AUTHOR:		Jennifer Wu, Mar 14, 1995

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jwu	3/14/95		Initial revision


DESCRIPTION:
	Interface to modem driver.
		
	$Id: modemDr.def,v 1.1 97/04/04 14:16:51 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef __MODEMDR

include driver.def

StartDriver modem

UseDriver Internal/strDrInt.def
UseDriver Internal/serialDr.def

;
; Protocol number for this interface
; 
; NOTE: The MODEM_PROTO_MINOR that shipped on the original Nokia 9000
; is DRIVER_EXT_PROTO_MINOR+0.  If your software is supposed to run
; on the 9000, use DRIVER_EXT_PROTO_MINOR+0, not the protocol du jour.
;
; DRIVER_EXT_PROTO_MINOR+2 for DR_MODEM_CHECK_DIAL_TONE
; DRIVER_EXT_PROTO_MINOR+3 for DR_MODEM_ABORT_DIAL
; 
MODEM_PROTO_MAJOR	equ	DRIVER_EXT_PROTO_MAJOR+1
MODEM_PROTO_MINOR	equ	DRIVER_EXT_PROTO_MINOR+3


COMMENT |---------------------------------------------------------------

A client is any geode which is using the modem driver.  The modem driver
can only have one client at a time to prevent multiple clients from 
sending conflicting commands to the modem during a single communications
session. 

Clients open the serial port by calling DR_MODEM_OPEN, which also serves
to inform the modem driver that it has a client.  If the modem driver
already has a client, it will return an error.  Clients "unregister" by 
calling DR_MODEM_CLOSE which will also close the serial port.

Clients are responsible for configuring the serial port.  Clients read 
and write data directly to the port.  The modem driver receives all 
serial data notifications.  Clients may register for data notification
through the modem driver, but only data arriving during data mode
will be passed to the client.

Data mode can only occur after a CONNECT has been received.  The modem
driver's default mode is command mode.  Once a connection has been 
established, the modem stays in data mode until the client has issued
a hangup command.  A modem driver cannot detect a NO CARRIER arriving
in the middle of data, so it does not know when to switch back to command
mode.  

If clients may use direct serial connections or the modem driver, the 
code must handle both cases and set up data notitifications correctly.

Normally, clients will not see any of the modem commands or response 
strings.  If the client has registered to be notified of modem responses, 
then each response will be passed to the client.

Each modem driver function will not return until the command has been
completed.  The result of the command will be returned.  If no response
from the modem is received after a given amount of time, the driver will
return with a timeout error to avoid blocking the client forever.

-----------------------------------------------------------------------|

;
; Code depends on order of these ModemResultCode definitions.  If 
; new connect codes are defined, change ModemCheckConnect.
;
ModemResultCode		etype	word, 1
MRC_NOT_SUPPORTED	enum	ModemResultCode		; unsupported function
MRC_DRIVER_IN_USE	enum	ModemResultCode		; too many clients
MRC_TIMEOUT		enum	ModemResultCode
MRC_UNKNOWN_RESPONSE	enum	ModemResultCode
MRC_OK			enum	ModemResultCode
MRC_ERROR		enum	ModemResultCode
MRC_BUSY		enum	ModemResultCode
MRC_NO_DIALTONE		enum	ModemResultCode
MRC_NO_ANSWER		enum	ModemResultCode
MRC_NO_CARRIER		enum	ModemResultCode
MRC_CONNECT		enum	ModemResultCode
MRC_CONNECT_1200	enum	ModemResultCode
MRC_CONNECT_2400	enum	ModemResultCode
MRC_CONNECT_4800	enum	ModemResultCode		
MRC_CONNECT_9600	enum	ModemResultCode
MRC_BLACKLISTED		enum	ModemResultCode		; used in GSM network
MRC_DELAYED		enum	ModemResultCode		; used in GSM network
MRC_DIAL_ABORTED	enum	ModemResultCode
	; Returned when a DIAL command is aborted by DR_MODEM_ABORT_DIAL.

ModemFunction		etype	word, DriverExtendedFunction, 2


;------------------------------------------------------------------------
; DR_INIT		enum	DriverFunction
;	DESCRIPTION:  Initialize driver
;	PASS:	cx	= di passed to GeodeLoad.  Garbage if loaded via
;			  GeodeUseDriver
;		dx	= bp passed to GeodeLoad.  Garbage if loaded via
;			  GeodeUseDriver
;	RETURN:	carry set if driver initialization failed.  Driver will
;			be unloaded by the system
;		carry clear if initialization successful
;
;	DESTROYS:	ax, cx, dx, bp, di, si, ds, es
;
;
; DR_EXIT		enum	DriverFunction
;	DESCRIPTION:  Exit driver
;	PASS:	nothing
;	RETURN: nothing
;
; 	DESTROYS:	ax, bx, cx, dx, di, si, ds, es
;
;
; DR_SUSPEND		enum	DriverFunction
;	DESCRIPTION:  Prepare the device for going into stasis
;	PASS:	cx:dx	= buffer in which to place reason for refusal, if
;			  suspension refused (DRIVER_SUSPEND_ERROR_BUFFER_SIZE
;			  bytes long)
; 	RETURN:	carry set if suspension refused:
;			cx:dx = buffer filled with null terminated reason,
;				standard PC/GEOS character set
;		carry clear if suspension approved
;
;	DESTROYS:	ax, di
;
;
; DR_UNSUSPEND		enum	DriverFunction
;	DESCRIPTION:  Reconnect to the device when PC/GEOS is task-switched
;		      back in
;	PASS:	nothing
;	RETURN:	nothing
;
; 	DESTROYS:	ax, di
;
;
; DRE_TEST_DEVICE	enum	DriverExtendedFunction
;	DESCRIPTION:  Test the existence of a particular device that the 
;		      driver supports
;	PASS:	dx:si	= pointer to null-terminated device name string
;	RETURN:	ax	= DevicePresent
;	
;	DESTROYS:	di
;
;
; DRE_SET_DEVICE	enum	DriverExtendedFunction
;	DESCRIPTION:  Set which device the driver is to support
;	PASS:	dx:si	= pointer to null-terminated device name string
;	RETURN:	nothing
;	
; 	DESTROYS:	di
;
;-------------------------------------------------------------------------

DR_MODEM_OPEN			enum	ModemFunction
;
;	SYNOPSIS:  Open the serial port to be used for a modem connection.
;
;	PASS:	ax	= StreamOpenFlags.  SOF_NOBLOCK and SOF_TIMEOUT
;			  are mutually exclusive...
;		bx	= port number to open
;		cx	= input buffer size
;		dx	= output buffer size
;		bp	= timeout value if SOF_TIMEOUT
;		si	= handle of serial driver
;	RETURN: carry set if port couldn't be opened
;			(in-use/timed-out/non-existent)
;

DR_MODEM_CLOSE			enum	ModemFunction
;
;	SYNOPSIS:  Close the serial port being used for the modem connection.
;
;	PASS:	ax	= STREAM_LINGER if should wait for all data to
;			  make it out the port, or STREAM_DISCARD if any
;			  pending data should be discarded.  Any waiting
;			  incoming data are automatically discarded.
;		bx	= port number
;	RETURN:	nothing
;

DR_MODEM_SET_NOTIFY		enum	ModemFunction
;
; 	SYNOPSIS:  Registers a notifier for incoming data
;
; 	PASS:	ax	= StreamNotifyType (only SNT_READER,
;						 SNE_DATA,
;						 SNE_MODEM_SIGNAL, and
;						 SNE_RESPONSE supported)
; 		bx	= port number
;		cx:dx	= address of handling routine, if SNM_ROUTINE
;			  destination of output if SNM_MESSAGE
;		bp	= AX to pass if SNM_ROUTINE
;			  method to send if SNM_MESSAGE
; 	RETURN: nothing
;
;	NOTES:	Additional StreamNotifyEvent of SNE_RESPONSE supported by 
;		modem driver for client to receive modem responses:
;		Routine notification:
;		PASS:  	cx 	= size of response
;		  	dx:bp	= buffer holding response (not null-terminated)
;		Message notification:
;		PASS:	cx	= size of message
;			^dx	= block containing text of response 
;					(not null-terminated)
;				  Block must be freed by recipient
;
;		Additional StreamNotifyEvent of SNE_MODEM_SIGNAL supported
;		by modem driver so that the client can receive modem
;		hardware signals, such as carrier detect (DCD) and ring
;		indicator (RI).  This is similar to the serial driver's
;		SNE_MODEM notification, but only DCD and RI lines are
;		passed to the client in this notification.
;		Routine and Message notification:
;		PASS:	cx	= ModemLineStatus
;

SNE_RESPONSE	enum	StreamNotifyEvent
SNE_MODEM_SIGNAL	enum	StreamNotifyEvent

; Note that these bits correspond to the bits in SerialModemStatus.
;
ModemLineStatus	record
    ; Current state of modem signals
    ;
    MLS_DCD:1		; Carrier Detect
    MLS_RING:1		; Ring Detect
    :2

    ; Signal-change indicator.  Correspond to what signal has changed
    ; since last notification.
    ;
    MLS_DCD_CHANGED:1	; Carrier detect changed
    MLS_RING_CHANGED:1	; Activated only when the MLS_RING indicator changes
    			;  from active to inactive (signals the end of a
			;  RING signal on the incoming phone line)
    :2
ModemLineStatus end

DR_MODEM_DIAL			enum	ModemFunction
;
; 	SYNOPSIS:  Have the modem dial the given dial string, which 
;		   may contain dial modifiers
;
;	PASS:	bx	= port number
;		cx:dx	= dial string (not null terminated)
;		ax	= size of dial string
;	RETURN:	ax	= ModemResultCode 
;		carry clear if connection established
;

DR_MODEM_ANSWER_CALL		enum	ModemFunction
;
; 	SYNOPSIS:  Have the modem answer an incoming call
;
; 	PASS:	bx	= port number
;	RETURN:	ax	= ModemResultCode
;		carry clear if connection established
;

DR_MODEM_HANGUP			enum	ModemFunction
;
;	SYNOPSIS:  Have the modem go on-hook to terminate the
;		   current connection
;
;	PASS:	bx	= port number
;	RETURN:	ax	= ModemResultCode
;		carry set if error
;

DR_MODEM_RESET			enum	ModemFunction
;
; 	SYNOPSIS:  Reset the modem, terminating any existing connection
;
;	PASS:	bx	= port number
;	RETURN:	ax	= ModemResultCode
;		carry set if error
;

DR_MODEM_FACTORY_RESET		enum	ModemFunction
;
;	SYNOPSIS: Reset the modem to its factory configuration
;
;	PASS:	bx	= port number
;	RETURN:	ax	= ModemResultCode
;		carry set if error
;

DR_MODEM_INIT_MODEM		enum	ModemFunction
;
; 	SYNOPSIS:  Initialize the modem's user profile with the given
;		   initialization string.  Modem init string MUST 
;		   include the AT command prefix. 
;
;	PASS:	bx	= port number
;		cx:dx	= initialization string (not null-terminated)
;		ax	= size of initialization string
;	RETURN:	ax	= ModemResultCode
;		carry set if error
;

DR_MODEM_AUTO_ANSWER		enum	ModemFunction
;
;	SYNOPSIS:  Set the number of rings before the modem answers
;		   an incoming call
;
;	PASS:	bx	= port number
;		al	= number of rings 
;				(0 disables auto answer function)
;	RETURN:	ax	= ModemResultCode
;		carry set if error
;

;------------------------------------
; PROTOCOL DRIVER_EXT_PROTO_MINOR+1
;

DR_MODEM_GRAB_SERIAL_PORT	enum	ModemFunction
;
;	SYNOPSIS:  Sets up the serial port to notify modem driver
;		   when data is available for reading.  This is done
;		   automatically in DR_MODEM_OPEN.
;		   To be used to gain access to serial port after someone
;		   else has been using it.
;
;	PASS:	bx	= port number
;
;	RETURN:	carry set if modem driver couldn't gain control of serial
;		port
;

DR_MODEM_GET_BAUD_RATE		enum	ModemFunction
;
;	SYNOPSIS:  Get the baud rate.
;
;	PASS:	nothing
;
;	RETURN:	ax	= baud rate
;

DR_MODEM_CHECK_DIAL_TONE	enum	ModemFunction
;
;	SYNOPSIS:  Get the baud rate.
;
;	PASS:	bx	= port number
;		cx	= timeout in ticks
;	RETURN:	ax	= ModemResultCode 
;		carry clear if connection established
;

DR_MODEM_ABORT_DIAL		enum	ModemFunction
;
;	SYNOPSIS:  Forceably abort any dial in progress.  This function
;		   is an exception to the rule that only one client may
;		   use the modem driver at a time.  This can be called
;		   by anyone.  This function may block the calling thread,
;		   but only momentarily.  The thread waiting on
;		   the pending dial command will become unblocked when the
;		   result from the modem is returned.  If the timing is such
;		   that the abort was too late, a hangup command shall be
;		   issued to the modem.  The thread waiting for the dial
;		   to complete will wait until the hangup is complete.  Either
;		   way, that thread will receive an MRC_DIAL_ABORTED result
;		   code.
;
;		   DR_MODEM_OPEN must be called before this function.
;
;		   If a DR_MODEM_DIAL has already been completed, this
;		   function will return carry set if there is a connection,
;		   but no action will be taken.
;
;		   If a DR_MODEM_DIAL has not yet been sent, the next one
;		   will be aborted.
;
;
;	PASS:	nothing
;	RETURN:	carry: set if command too late -- already connected.
;		       clear otherwise.
;

;---------------------------------------------------------------------------
;		Global definitions for exported routines
;---------------------------------------------------------------------------
global 	ModemStrategy:far




EndDriver	modem



