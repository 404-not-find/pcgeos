COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1990 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Include -- Swap Library Definitions
FILE:		swap.def

AUTHOR:		Adam de Boor, Jun 17, 1990

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	6/17/90		Initial revision


DESCRIPTION:
	Definitions for users of the Swap library -- a set of routines
	that make writing swap drivers much easier.
		
	$Id: swap.def,v 1.1 97/04/04 14:15:52 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__SWAP

StartLibrary	swap

;------------------------------------------------------------------------------
;			 INTERFACE DEFINITION
;------------------------------------------------------------------------------

global	SwapInit:far
;	Desc:	Initialize a swap map for the caller.
;	Pass:	ax	= number of pages handled by the driver
;		bx	= owner for swap map
;		cx	= size of a page
;		si:di	= address of page write routine
;		dx:bp	= address of page read routine
;	Return:	ax	= segment of swap map
;		bx	= handle of swap map
;		carry set on error
;
;	The page read routine is called:
;		Pass:	ds:dx	= Address to which to read the page(s)
;			ax	= starting page number
;			cx	= number of bytes to read (may be more than
;				  one page, but cx is always even).
;			es	= segment of SwapMap
;		Return:	carry set if all bytes could not be read.
;		Destroyed:	ax, bx
;
;	The page write routine is called:
;		Pass:	ds:dx	= address from which to write the page(s)
;			ax	= starting page number
;			cx	= number of bytes to write (may be more than
;				  one page, but cx is always even).
;			es	= segment of SwapMap
;               Return: carry set if all bytes could not be written:
;                               cx      = bytes actually written
;		Destroyed:	ax, bx

global	SwapWrite:far
;	Desc:	Write a block of memory out to the swap device.
;	Pass:	dx	= segment of block to write
;		cx	= size of block to write
;		ax	= segment of allocated swap map
;	Return:	carry set if block could not be written
;		ax	= initial page

global	SwapRead:far
;	Desc:	Read a block of memory from the swap device.
;	Pass:	dx	= segment of destination
;		cx	= size of block to read
;		bx	= initial page of block
;		ax	= segment of swap map
;	Return:	carry set if block could not be read

global	SwapCompact:far
;	Desc:	Reduce the memory usage of the swap driver to the desired
;		target.
;	Pass:	ax	= segment of SwapMap
;		bx	= handle of the calling swap driver.
;		dx	= in Kbytes, the desired maximum space to be 
;			  taken up in Extended Memory.
;		
;	Return:	carry set if couldn't meet the target. 

global	SwapFree:far
;	Desc:	Free a list of pages allocated to a block
;	Pass:	bx	= initial page to be freed.
;		ax	= segment of swap map
;	Return:	carry set if list could not be freed.
;

global	SwapLockDOS:far
;	Desc:	Grab the DOS/BIOS lock. This should be called by a swap
;		driver before calling on some DOS-level driver to avoid
;		conflicts with TSRs like disk caches.
;	Pass:	nothing
;	Return:	nothing
;	Nuked:	flags

global	SwapUnlockDOS:far
;	Desc: 	Release the DOS/BIOS lock.
;	Pass:	nothing
;	Return:	nothing
;	Nuked:	nothing (flags intact)

global	SwapIsKernelInMemory?:far
;	Desc: 	Checks to see if the kernel is in memory
;	Pass:	nothing
;	Return:	carry set if kernel can be used

global	SwapSetKernelFlag:far
;	Desc: 	Sets internal flag
;	Pass:	nothing
;	Return:	nothing
;	Nuked:	nothing (flags intact)

global	SwapClearKernelFlag:far
;	Desc: 	sets internal flag
;	Pass:	nothing
;	Return:	nothing
;	Nuked:	nothing (flags intact)

;------------------------------------------------------------------------------
;		       STRUCTURES AND CONSTANTS
;------------------------------------------------------------------------------
SwapMap	struct
    SM_numFree	sword		; Number of free pages in the map
    SM_freeList	nptr		; Head of the free list
    SM_total	sword		; Total number of pages in the map
    SM_page	sword		; Size of a page
    SM_read	fptr.far	; Routine to read a page or pages
    SM_write	fptr.far	; Routine to write a page or pages
    SM_pages	label	nptr	; Start of map
SwapMap	ends

SWAPNIL		equ	-2	; NULL pointer in page lists.

EndLibrary	swap
