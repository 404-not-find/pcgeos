COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		GState.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines GState structures and routines.

	$Id: gstate.def,v 1.1 97/04/04 14:15:03 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__GSTATE

include lmem.def				;LMemBlockHeader
include graphics.def
include Internal/tmatrix.def
UseDriver Internal/fontDr.def
include font.def

StartKernel

; Attribute structure

AttrOpts	record
    AO_MASK_1:1					; True if mask all 1's
    AO_MASK_1_COPY:1				; True if mask all 1's and 
						;    draw mode is GR_COPY
    AO_MASK_1_INVERT:1				; True if mask all 1's and
						;    draw mode is GR_INVERT
    AO_USE_INDEX:1				; driver: use color index as is
	:4
AttrOpts	end

; Common graphic attributes

CommonAttr	struct
    CA_mapMode 	ColorMapMode	<0,CMT_CLOSEST>
    CA_colorIndex	Color		C_BLACK	; text color, index
    CA_colorRGB	RGBValue	<0,0,0>	; text color, RGB
						
    CA_maskType	SysDrawMask	<0,SDM_100> ; text drawing mask, index
    CA_mask	DrawMask <0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff>
    CA_flags		AttrOpts	<1,1,0,0>
CommonAttr	ends

; Structure for Dashed line information.  

DashStruct	struct
    DS_nPairs	byte				; number of dash-array pairs
    DS_offset	byte				; offset into dash array
    DS_pairs	DashPairArray			; dash info
DashStruct	ends

; Hatch pattern common attributes

GrCommonHatch		struct
    GCH_hatch		SystemHatch		; system pattern, or custom
    GCH_custom		lptr.HatchPattern	; custom pattern in GState block
GrCommonHatch		ends

; Bitmap pattern common attributes

GrCommonBitmap		struct
    GCB_bitmap		SystemBitmap		; system bitmap, or custom
    GCB_custom		lptr.Bitmap		; custom Bitmap in GState block
GrCommonBitmap		ends

; Common pattern attributes structure stored in the GState

GrCommonPatternUnion	union
    GCPU_hatch		GrCommonHatch
    GCPU_bitmap		GrCommonBitmap
GrCommonPatternUnion	ends

GrCommonPattern		struct
    GCP_pattern		PatternType		; pattern to use for fills
    GCP_systemCommon	GrCommonPatternUnion	; hatch/bitmap attributes
GrCommonPattern		ends

CheckHack 		<(offset GCH_hatch)  eq (offset GCB_bitmap)>
CheckHack 		<(offset GCH_custom) eq (offset GCB_custom)>
GCP_system		equ GCP_systemCommon.GCPU_hatch.GCH_hatch
GCP_custom		equ GCP_systemCommon.GCPU_hatch.GCH_custom

; Values for GState optimization variables. These are opcodes that get
; stuffed into the video driver code at the proper place....

if DBCS_PCGEOS
GOpt 			etype	byte
GO_SPECIAL_CASE 	enum	GOpt, 0ebh	; jmp short
GO_FALL_THRU 		enum	GOpt, 0a8h	; test al,IMMEDIATE
GO_JNE			enum	GOpt, 075h	; jne
else
GOpt 			etype	byte
GO_SPECIAL_CASE 	enum	GOpt, 0ebh	; jmp short
GO_FALL_THRU 		enum	GOpt, 0b6h	; mov dh,IMMEDIATE
endif

; Structure of private data

GrPrivateData		struct
    GPD_ax		word	0
    GPD_bx		word	0
    GPD_cx		word	0
    GPD_dx		word	0
GrPrivateData		ends

; PathFlags record

PathFlags		record
    PF_DEFINING_PATH:1				; currently defining a path
    PF_DEF_PATH_WIN_LOCKED:1			; usually the window is not
						;  locked if a path is being 
						;  defined. TextCallDriver
						;  locks it down, and we need
						;  to know this at a lower 
						;  level, so set a bit.
    :4						; unused bits
    PF_FILL:1					; indicates filling a Path
    PF_STROKE:1					; indicates stroking a Path
PathFlags		end



;	initial values denote default state

GState	struct

	;*** Administration stuff

    GS_header		LMemBlockHeader <>

    GS_window		hptr.Window	0	;handle of associated window
    GS_gstring		hptr.GString	0	;handle of associated gstring

	;*** Link to next saved gstate

    GS_saveStateLink	hptr.GState	0

	;*** Coordinate Transformation Info

;***************
; DO NOT CHANGE THIS. FindFont() assumes that the
; transform in the default GState will be simple.
;***************
; application-defined transformation matrix
    GS_TMatrix		TMatrix		<>	; GState spec transform
    GS_defTMatrix	lptr.TMatrix	0	; chunk ptr to default TMatrix
						;  if one is defined.
    GS_savedMatrix	lptr.TMatrix	0	; chunk ptr to saved TMatrix

	;*** State Info
    ;
    ; The current path defined. A Path is defined by a GrBeginPath, a number
    ; of graphic operations, and a GrEndPath. Paths that are currently open
    ; are temporarily stored in the GS_gstring field
    ;
    GS_currentPath	lptr.Path
    ;
    ; The current clipping path defined. It is transformed by the GState
    ; matrix (the TMatrix in the GState at the time it is defined) and
    ; the Window matrix.
    ;
    GS_clipPath		lptr.Path
    ;
    ; The document clipping path. It is transformed by the Window matrix only.
    ;
    GS_winClipPath	lptr.Path

	;*** Private data

    GS_privData		GrPrivateData	<>

;	Current Pen Position, stored in PAGE coordinates (that is, transformed
;	by the GState TMatrix, but not any Window transforms)

    GS_penPos		PointDWFixed	<>

    GS_xShift		byte	0	; # bits masks are rotated, in x
    GS_yShift		byte	0	; # bits masks are rotated, in y

;*** Word aligned here

;	line attributes
    GS_lineAttr		CommonAttr <>

    GS_lineStyle	LineStyle	LS_SOLID	; line style, enum

;*** Word aligned here
;***************
;   NOTE:
;	DON'T SEPARATE lineStyle and lineJoin !!!  They are pushed together as
;	a word by code in graphicsOutput.asm
;***************

    GS_lineJoin		LineJoin	LJ_MITERED	; line join type, enum
    GS_lineEnd		LineEnd		LE_BUTTCAP	; line end type, enum
    GS_lineWidth	WWFixed	<0,1>			; line width, points
    GS_scaledLineWid	word				; line width, pixels
    GS_inverseMiterLimit word		0199ah

;*** Word aligned here

; 	drawing modes
    GS_mixMode		MixMode		MM_COPY		; drawing mode, enum

    GS_numOfDashPairs		db	0 ;number of pairs in dash array
    GS_dashSkipDistance		db	0 ;number of points to skip in 1st pair
    GS_dashPairArray		DashPairArray <>

;*** Word aligned here

;	area attributes
    GS_areaAttr		CommonAttr <<0,CMT_DITHER>,,,,>
				db	0	; padding to align words...

;	text attributes
;*** Word aligned here
    GS_textAttr		CommonAttr <>

;*** Word aligned here

    GS_trackKernDegree	sword	0		;value passed to kernel
    GS_trackKernValue	BBFixed <0, 0>		;scaled based on pointsize

;	Driver optimization variables
;	opcode variables are: "jmp short" if optimization not true
;			      "mov dh,IMMEDIATE" if optimization true
;	DO NOT MOVE THESE! The video drivers assume the current order!

;*** Word aligned here

    GS_pixelHeightM1 	word	15		;FB_height - 1
if not DBCS_PCGEOS
    GS_fontFirstChar	char	32		;FB_firstChar for current font
    GS_fontLastChar	char	252		;FB_lastChar for current font
endif

;*** Word aligned here

    GS_complexOpcode	GOpt	GO_FALL_THRU	;"jmp" if complex transform
    GS_kernOp		GOpt	GO_FALL_THRU	;"jmp" if:
						;pairwise kerning
						;or track kerning

    GS_optSpacePad	GOpt	GO_FALL_THRU	;"jmp" if space padding
    GS_textSpacePad	WBFixed	<0, 0>		; # of points to pad spaces by
						;(used in full-justified text)

;*** Word aligned here

    GS_fontHandle	hptr.FontBuf	; handle to current font (initialized
					;	to default font)
    GS_minLSB		sword	0		;minimum left side bearing
						;  (pixels) (signed integer)
    GS_minTSB		sword	0		;minimum top side bearing
						;  (pixels) (signed integer)

    GS_optDrawMask	BooleanByte	FALSE	;zero if (draw mask all 1's)
;*** Word aligned here

    GS_hyphenOpcode	GOpt	GO_FALL_THRU	;
    GS_fontFlags	byte		 	;font optimization flags
    GS_fontIndex	word	0		;index of in use entry

    GS_textDrawOffset	word	0		;# of characters at end of
						; string to be drawn.
    GS_drawOffsetOpcode GOpt	GO_FALL_THRU

    GS_textMode		TextMode	<>

;*** Word aligned here

    GS_fontAttr		FontCommonAttrs	<>

    GS_drawCtrlOpcode	GOpt	GO_FALL_THRU
    GS_pathFlags	PathFlags		;special path flags
    GS_pathData		hptr			;if GS_pathFlags = PF_DEFINING
						;   GS_pathData = old GString
						;if GS_pathFlags = PF_FILL
						;   GS_pathData = RegionPath

    GS_areaPattern	GrCommonPattern <>	;area pattern attributes
    GS_textPattern	GrCommonPattern <>	;text pattern attributes

if DBCS_PCGEOS
    GS_textMiscMode	TextMiscModeFlags
    GS_optFullJust	GOpt	GO_JNE
endif
ifdef SIMPLE_RTL_SUPPORT
if SIMPLE_RTL_SUPPORT
    GS_textDirection	TextDirection
endif
endif

    align	word
GState	ends

EndKernel
