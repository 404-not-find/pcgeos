COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1990 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		printDriver.def

DECLARER:	Print drivers

DESCRIPTION:
	This file defines structures and routines intended for printer drivers.

	$Id: printDr.def,v 1.1 97/04/04 14:15:10 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__PRINTDR

include driver.def
include graphics.def
include font.def
include print.def
UseLib  Internal/spoolInt.def

; IMPORTANT * IMPORTANT * IMPORTANT * IMPORTANT *IMPORTANT * IMPORTANT
;
; The following assumptions are made regarding the tokens for printer
; drivers. These MUST be followed, else PrefMgr will not function correctly.
;
; Printer Driver:	PRDR
; Plotter Driver:	PLDR
; Fax Driver:		FXDR
; Camera Driver:	CADR
; Other Driver:		OTDR
;
; IMPORTANT * IMPORTANT * IMPORTANT * IMPORTANT *IMPORTANT * IMPORTANT


;---------------------------------------------------------------------------
;		Print Driver Function Calls
;---------------------------------------------------------------------------

StartDriver	print

;
; Protocol number for this interface. Adjust the final numbers, below, if the
; interface is changed.
;
PRINT_PROTO_MAJOR equ DRIVER_EXT_PROTO_MAJOR+2
PRINT_PROTO_MINOR equ DRIVER_EXT_PROTO_MINOR+0

PrintFunction 		etype word, DriverExtendedFunction, 2

;	These are the first four functions to be supported
; DR_INIT		0
; DR_EXIT		2
; DRE_TEST_DEVICE	4
; DRE_SET_DEVICE	6

		; functions that are resident in the Entry module

DR_PRINT_DRIVER_INFO	enum PrintFunction	; return ptr to info blk
;	PASS: 		nothing
;	RETURN:		dx:si	= handle:offset to driver info structure
;			  	  (structure type DriverExtendedInfoTable)
;			          the structure PrintDriverInfo is located
;			          immediately after DriverExtendedInfoTable
;	DESTROYS: 	nothing

DR_PRINT_DEVICE_INFO	enum PrintFunction	; return ptr to info blk
;	PASS: 		bx	= handle to PState
;	RETURN:		dx:si	= handle:offset to device info structure
;			  	  (structure type PrinterInfo)
;	DESTROYS: 	nothing
;
;	This function assumes that a specific device type has already been
;	setup in the PState via a DR_PRINT_SET_DEVICE call

DR_PRINT_SET_MODE	enum PrintFunction	; set printing mode
;	PASS: 		bx	= handle to PState
;			cl	= mode to print in
;			ax	= width of paper size (points)
;			si	= height of paper size (points)
;	RETURN:		nothing
;	DESTROYS: 	nothing
;
;	This function is used to set the device printing mode and some
;	paper options

DR_PRINT_SET_STREAM	enum PrintFunction	; set final destination
;	PASS: 		bx	= handle to PState
;			cx	= stream token
;			dx	= stream device driver handle
;			si	= stream device type (PrinterPortType)
;	RETURN:		nothing
;	DESTROYS: 	nothing
;
;	This function is used to set the final destination (some I/O driver)
;	of the data that passes through the printer driver 


DR_PRINT_HOME_CURSOR	enum PrintFunction	; reset current position
;	PASS: 		bx	= handle to PState
;	RETURN:		nothing
;	DESTROYS: 	nothing
;
;	Sets the cursor back to 0,0

;---------------------------------------------------------------------------
;		Functions normally resident in other modules
;	see the definition of DR_PRINT_LAST_RESIDENT
;---------------------------------------------------------------------------

DR_PRINT_GET_CURSOR	enum PrintFunction	; get current position
;	PASS: 		bx	= handle to PState
;	RETURN:		WWFixed:
;			cx.bx	= current x position of cursor
;			dx.ax	= current y position of cursor
;	DESTROYS: 	nothing


DR_PRINT_SET_CURSOR	enum PrintFunction	; set current position
;	PASS: 		bx	= handle to PState
;			WWFixed:
;			cx.si	= new x position of cursor
;			dx.ax	= new y position of cursor
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;			

DR_PRINT_GET_LINE_SPACING enum PrintFunction	; reset current position
;	PASS: 		bx	= handle to PState
;	RETURN:		dx.ax	= line spacing, WWFixed, in points
;	DESTROYS: 	nothing
;

DR_PRINT_SET_LINE_SPACING enum PrintFunction	; reset current position
;	PASS: 		bx	= handle to PState
;			dx.ax	= line spacing, WWFixed, in points
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_SET_FONT	enum PrintFunction	; set a new font to use
;	PASS: 		bx	= handle to PState
;			cx	= desired FontID
;			dx	= desired point size
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;
;	This function will choose a default font (printer dependent) if the
;	desired font is not available.

DR_PRINT_GET_COLOR_FORMAT	enum PrintFunction ; return the color format
;	PASS: 		bx	= handle to PState
;	RETURN:		al	= BitMap Format enum
;	DESTROYS: 	nothing
;
;	Used for getting the format to send the bitmap to the print driver.
;

DR_PRINT_SET_COLOR	enum PrintFunction	; set new color for output
;	PASS: 		bx	= handle to PState
;			al	= R byte
;			dl	= G byte
;			dh	= B byte
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_GET_STYLES 	enum PrintFunction	; get current mode settings
;	PASS: 		bx	= handle to PState
;	RETURN:		cx	= current text mode style bit settings
;	DESTROYS: 	nothing
;

DR_PRINT_SET_STYLES 	enum PrintFunction	; set current mode settings
;	PASS: 		bx	= handle to PState
;			dx	= style word to set (PrinterTextStyles record)
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_TEST_STYLES 	enum PrintFunction	; test for legal mode
;	PASS: 		bx	= handle to PState
;			dx	= style word to check (PrinterTextStyle record)
;	RETURN:		dx	= style word as it would be set
;	DESTROYS: 	nothing
;

DR_PRINT_TEXT		enum PrintFunction	; print an ascii string
;	PASS: 		bx	= handle to PState
;			dx:si	= pointer to string
;			cx	= character count, or 0 for NULL-terminated
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_RAW	 	enum PrintFunction	; send unadulterated bytes
;	PASS: 		bx	= handle to PState
;			dx:si	= pointer to buffer
;			cx	= byte count
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_STYLE_RUN	enum PrintFunction	; print a style run
;	PASS: 		bx	= handle to PState
;			ax	= X offset into the PAPER area to start this
;					tile. for most one tile pages ax will be
;					the left printer margin value.
;			cx	= Y offset into the PAPER area to start this
;					tile. for most one tile pages cx will be
;					the top printer margin value.
;			dx:si	= pointer to style run info structure
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_SWATH		enum PrintFunction	; print a page wide swath 
;	PASS: 		bx	= handle to PState
;			dx	= VM file handle containing bitmap
;			cx	= VM block handle of bitmap
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_START_PAGE	enum PrintFunction	;start page stuff
;	PASS: 		bx	= handle to PState
;			cl	= flag to signal suppressformfeed mode
;					C_FF = normal form-feed at end of page;
;					else no form-feed, and cursor left at
;					next line down against the left margin.
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;
;	Sets the cursor back to 0,0

DR_PRINT_END_PAGE	enum PrintFunction	;END page stuff
;	PASS: 		bx	= handle to PState
;			cl	= flag to signal suppressformfeed mode
;					C_FF = normal form-feed at end of page;
;					else no form-feed, and cursor left at
;					next line down against the left margin.
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;
;	Does form-feed

DR_PRINT_GET_PRINT_AREA	enum PrintFunction	; get imageable area
;	PASS: 		bx	= handle to PState
;	RETURN:		ax	= left side coordinate   (points)
;			si	= top side coordinate    (points)
;			cx	= right side coordinate  (points)
;			dx	= bottom side coordinate (points)
;	DESTROYS: 	nothing
;
;	This function is used to set the size of the bitmap needed to
;	render the page.

DR_PRINT_GET_MARGINS	enum PrintFunction	; get the margin info.
;	PASS: 		bx	= handle to PState
;	RETURN:		ax	= Left Margin 
;			si	= Top Margin
;			cx	= Right Margin
;			dx	= Bottom Margin
;	DESTROYS: 	nothing
;

DR_PRINT_GET_PAPER_PATH enum PrintFunction	; get the paper path options.
;	PASS: 		bx	= handle to PState
;	RETURN:		al	= PaperInputOptions record
;			ah	= PaperOutputOptions record
;	DESTROYS: 	nothing
;

DR_PRINT_SET_PAPER_PATH enum PrintFunction	; get the paper path options.
;	PASS: 		bx	= handle to PState
;			al	= PaperInputOptions record
;			ah	= PaperOutputOptions record
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;

DR_PRINT_START_JOB	enum PrintFunction	; do init for print job
;	PASS: 		bx	= handle to PState
;
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;
;	This function should be called when starting a print job.  It handles
;	any initialization required, and should be matched with a corresponding
;	DR_PRINT_END_JOB when the job is completed.  A job can span multiple
;	pages or documents (up to the caller to decide).

DR_PRINT_END_JOB	enum PrintFunction	; deal w/death for print job
;	PASS: 		bx	= handle to PState
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;
;	This function should be called when ending a print job.  It handles
;	any shutting down required, and should be matched with a corresponding
;	DR_PRINT_START_JOB when the job is started.  


DR_PRINT_GET_MAIN_UI	enum PrintFunction	; return OD for print DB
;	PASS: 		bx	= handle to PState
;	RETURN:		cx:dx	= OD of generic UI tree to place in print DB
;	DESTROYS: 	nothing
;
;	Return the OD of a generic tree to be duplicated and placed into
;	the main print dialog box.
;

DR_PRINT_GET_OPTIONS_UI	enum PrintFunction	; return OD for options
;	PASS: 		bx	= handle to PState
;	RETURN:		cx:dx	= OD of generic UI tree to place in options DB
;	DESTROYS: 	nothing
;
;	Return the OD of a generic tree to be duplicated and placed into
;	the options print dialog box.
;

DR_PRINT_EVAL_UI	enum PrintFunction	; evaluate main print UI
;	PASS:		bx	= PState handle
;			cx	= Handle of the duplicated generic tree
;				  displayed in the main print dialog box.
;				  (= 0 to indicate do nothing)
;			dx	= Handle of the duplicated generic tree
;				  displayed in the options dialog box
;				  (= 0 to indicate do nothing)
;			es:si	= JobParameters structure
;			ax	= Handle of JobParameters block
;	RETURN: 	carry	= clear (success)
;				- or -
;			cx	= memory handle holding error message
;			carry	= set (failure)
;	DESTROYS:	nothing
;
;	Evaluate the contents of the generic tree(s) holding print UI objects,
;	and write directly into the JobParameters storing any needed state.
;
;	NOTE:		Data returned is internal to the print driver, and
;			is not read by the spooler or anyone else
;

DR_PRINT_STUFF_UI	enum PrintFunction	; evaluate main print UI
;	PASS:		bx	= PState handle
;			cx	= Handle of the duplicated generic tree
;				  displayed in the main print dialog box.
;				  (= 0 to indicate do nothing)
;			dx	= Handle of the duplicated generic tree
;				  displayed in the options dialog box
;				  (= 0 to indicate do nothing)
;			es:si	= JobParameters structure
;			ax	= Handle of JobParameters block
;	RETURN: 	nothing
;	DESTROYS:	nothing
;
;	Take the data written into JobParameters from a prior all to
;	DR_PRINT_EVAL_UI, and stuff it back into the UI object found
;	in the duplicated tree. 
;

DR_PRINT_FIRST_PSTATE_NEEDED  =	DRE_SET_DEVICE

;declared in each printer - specific constants file. DJD 9-11-90
;DR_PRINT_LAST_RESIDENT  =	DR_PRINT_HOME_CURSOR

DR_PRINT_FIRST_MOD	  =	DR_PRINT_LAST_RESIDENT + 2
DR_PRINT_LAST_GRAPHICS  =	DR_PRINT_SWATH
DR_PRINT_LAST_TEXT 	=	DR_PRINT_TEST_MODES
DR_PRINT_LAST_FUNCTION  =	DR_PRINT_TEST_MODES

;---------------------------------------------------------------------------
;		Printer driver standard escapes
;---------------------------------------------------------------------------

	; codes from 0x8000-0x80ff are standard escape codes common
	; to all drivers (see geode.def)

	;     standard printer escapes range from 0x8100 to 0xbfff
	; user-defined printer escapes range from 0xc000 to 0xffff

PrintEscCode 		etype word, 8100h, 1

DR_PRINT_ESC_PRINT_BITMAP	enum PrintEscCode	; print bitmap(LaserJet)
;	PASS:
;		bx	=	Handle to PState
;		dx:si	=	pointer to bitmap to print
;	RETURN:
;	DESTROYS:
;
;	This call prints a bitmap out at the current cursor location. It is
;	used for printing a less than full page of graphics. The bitmap is 
;	printed in the previously set resolution.


DR_PRINT_ESC_SET_PAGE_TRANSFORM	enum PrintEscCode	; for PDL printers
;     PASS:           bx      = handle to PState
;                     dx:si   = pointer to TransMatrix
;     RETURN:         nothing
;     DESTROYS:       nothing
;
;     This call establishes the transformation matrix that should be
;     applied to all elements drawn on the current page.  This is used
;     by the spooler to do rotation, thumbnails...


DR_PRINT_ESC_PRINT_GSTRING	enum PrintEscCode	; for PDL printers
;     PASS:           bx      = handle to PState
;                     cx      = GString flags (record, type GSControl)
;                     si      = GString handle
;     RETURN:         ax      = GString return flags (enum GSRetType)
;                     bx      = data returned with GSRetType	
;     DESTROYS:       nothing
;
;     This is the main drawing call for PDL printers.  The passed graphics
;     string should be read and translated into the specific page
;     description and passed onto the printer.  The GSControl flags
;     that are passed are compatible with the flags expected by
;     GrDrawGString and indicate when to stop drawing from the passed
;     graphics string.  This may be called more than once per page.


DR_PRINT_ESC_GET_COLOR_TRANSFER enum PrintEscCode	; color transfer func
;     PASS:           bx      = handle to PState
;     RETURN:         ax      = handle of block containing transfer tables
;     DESTROYS:       nothing
;
;     This function allows the printer drivers to adjust the color mapping 
;     from RGB to RGB or to CMYK or to Gray.  A transfer function table is
;     just an array of 256 bytes.  The mapping is done by a simple table
;     lookup, using the raw component value.  The value in the array at that
;     index is used in its place.  Thus there is one table for the grey
;     mapping function (useful for monochrome printers), three tables for
;     an RGB device (useful for film recorders), and four tables for a
;     CMYK device (most color printers).

DR_PRINT_ESC_SET_COPIES	enum	PrintEscCode	;set the number of copies
;	PASS:		bx	= handle of PState
;			ax	= number of copies desired
;	RETURN:		ax	= number of copies successfully set
;				(there may be a limit on the number of copies
;				available at the printer, and if the caller
;				tries to exceed that number, then ax will
;				reflect the max number available)
;			carry set by communication error.
;	DESTROYS:	nothing
;

DR_PRINT_ESC_PREPEND_PAGE enum	PrintEscCode	;prepend a page (or pages)
;	PASS:		bx	= handle of PState
;			ax	= handle of GState to draw to
;			cx	= handle of duplicated "Main" tree
;			dx	= handle of duplicated "Options" tree
;	RETURN:		nothing
;	DESTROYS:	nothing
;

DR_PRINT_ESC_APPEND_PAGE enum	PrintEscCode	;append a page (or pages)
;	PASS:		bx	= handle of PState
;			ax	= handle of GState to draw to
;			cx	= handle of duplicated "Main" tree
;			dx	= handle of duplicated "Options" tree
;	RETURN:		nothing
;	DESTROYS:	nothing
;

;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;	following are Print Escapes that may only be applicable for
;	dedicated word processors
;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DR_PRINT_ESC_INIT_PRINT_ENGINE	enum	PrintEscCode ;initialize mechanism
;	PASS		bx	=  handle of PState
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;       This function initializes the printer mechanism without starting a
;	print job. Called at boot time for captive printer devices.

DR_PRINT_ESC_SET_TOD	enum	PrintEscCode ;Set printer TOD.
;	PASS:		bx      = handle of PState
;	RETURN:		nothing
;	DESTROYS:	nothing
;
;	This function sets the time and date in the printer using the DOS
;	(and GEOS) TOD values.

DR_PRINT_ESC_CAP_HEAD	enum   PrintEscCode	;cap the printhead.
;       PASS:           bx      = handle of PState
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;       This function caps the printhead immediately.

DR_PRINT_ESC_CLEAN_HEAD	enum   PrintEscCode     ;clean the printhead.
;       PASS:           bx      = handle of PState
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;       This function cleans the printhead immediately.

DR_PRINT_ESC_GET_ERRORS	enum	PrintEscCode	;get any printer specific error
;	PASS		bx      = handle of PState
;	RETURNS:	(Printer specific)
;	DESTROYS:	(Printer specific)
;
;	This escape returns any printer-specific error codes.

DR_PRINT_ESC_WAIT_FOR_MECH enum	PrintEscCode	;wait for the printer
;						  mechanicals to stop
;	PASS		bx      = handle of PState
;	RETURNS:	nothing
;	DESTROYS:	nothing
;

DR_PRINT_ESC_PARK_HEAD	enum	PrintEscCode	;park the printhead off the 
;						  printable area
;	PASS            bx      = handle of PState
;       RETURNS:        nothing
;       DESTROYS:       nothing
;

DR_PRINT_ESC_MOVE_IN_X_ONLY	enum PrintEscCode	; set current position
;	PASS: 		bx	= handle to PState
;			WWFixed:
;			cx.si	= new x position of cursor
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_MOVE_IN_Y_ONLY	enum PrintEscCode	; set current position
;	PASS: 		bx	= handle to PState
;			WWFixed:
;			dx.ax	= new y position of cursor (in points)
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_INSERT_PAPER	enum PrintEscCode	; Load paper
;	PASS: 		bx	= handle to PState
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_EJECT_PAPER	enum PrintEscCode	; Eject paper
;	PASS: 		bx	= handle to PState
;	RETURN:		carry set by communication error.
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_GET_JOB_STATUS	enum PrintEscCode	; return PrintJobLock
;	PASS: 		bx	= handle to PState
;	RETURN:		(Printer Specific)
;	DESTROYS: 	nothing
;			
;	This escape returns the state of a job (whether it is interruptable
;		or not)

DR_PRINT_ESC_SET_JOB_STATUS	enum PrintEscCode	; return PrintJobLock
;	PASS: 		bx	= handle to PState
;			al	- TRUE - job is in progress
;				- FALSE - job is not in progress
;	RETURN:		nothing
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_PROCESS_ERRORS	enum PrintEscCode       ; Callback to handle
;							  print errors at the 
;							  driver level.
;	PASS: 		bx	= handle to PState
;			dx:si	- pointer to SpoolJobInfo structure
;	RETURN:		carry set - catastrophic quit,
;				no endpage call : AX = GSRT_FAULT on exit
;			carry clear - check ax
;			ax      - flag to quit or keep going after carry clr.
;                               GSRT_COMPLETE = OK do another swath
;                               GSRT_FAULT = quit, ejecting the paper.
;
;	DESTROYS: 	nothing
;			

DR_PRINT_ESC_CHANGE_INK_CARTRIDGE	enum PrintEscCode
;	PASS:		bx	= handle to PState
;	RETURN:		carry set by communication error.
;	DESTROYS:	nothing
;

;---------------------------------------------------------------------------
;		Enums, Records and Structure Definitions
;---------------------------------------------------------------------------

	; PrintDevice enum
	; This enum is filled out by each driver in its DriverInfo.asm file.
	; It advances by two so that it can be used as an index into the 
	; various info tables maintained in the DriverInfo resource.
PrintDevice	etype	word, 0, 2
PD_INVALID_DEVICE	enum	PrintDevice, 0xfffe	; invalid enum


;___________________________________________________________________________
;
;	The following enums and structures are used in the specific device
;	info resources.
;___________________________________________________________________________

PrinterTech	etype	byte, 0, 1
PT_RASTER	enum	PrinterTech		; raster technology
PT_VECTOR	enum	PrinterTech		; vector technology

PrinterType	record
    :4,
    PT_TECH PrinterTech:1,
    PT_COLOR BMFormat:3		;in graphics.def
PrinterType	end

	;Printer port information
	;These bits define how the PC/GEOS can communicate with
	;a device. The enums are defined to make things easier to 
	;read in source code, and SWAT.

	;IEEE-488 bus devices.
IEEE488Connection	etype	byte, 0, 1
	IC_NO_IEEE488	enum	IEEE488Connection
	IC_IEEE488	enum	IEEE488Connection

	;The print driver includes the port driver. This is useful for the 
	;FAX drivers, and anything that has its own custom interface.
CustomConnection	etype	byte, 0, 1
	CC_NO_CUSTOM	enum	CustomConnection
	CC_CUSTOM	enum	CustomConnection

	;SCSI bus devices
SCSIConnection		etype	byte, 0, 1
	SC_NO_SCSI	enum	SCSIConnection
	SC_SCSI		enum	SCSIConnection

	;Most common serial devices
RS232CConnection	etype	byte, 0, 1
	RC_NO_RS232C	enum	RS232CConnection
	RC_RS232C	enum	RS232CConnection

	;Most common parallel devices
CentronicsConnection	etype	byte, 0, 1
	CC_NO_CENTRONICS	enum	CentronicsConnection
	CC_CENTRONICS	enum	CentronicsConnection

	;Output to a file. Most drivers will let you print to a file of
	;raw printer data, but the filesize for the high resolution bit-mapped
	;devices may be too large for some media.
FileConnection		etype	byte, 0, 1
	FC_NO_FILE	enum	FileConnection
	FC_FILE		enum	FileConnection

	;Appletalk/flashtalk network devices.
AppletalkConnection	etype	byte, 0, 1
	AC_NO_APPLETALK	enum	AppletalkConnection
	AC_APPLETALK	enum	AppletalkConnection

	; Printer Connection
	; This record specifies the interfaces available for the device
PrinterConnections record
	:1,					; future bits
	PC_IEEE488 IEEE488Connection:1,		; IEEE-488 device
	PC_CUSTOM CustomConnection:1,		; printdriver custom port driver
	PC_SCSI SCSIConnection:1,		; SCSI device
	PC_RS232C RS232CConnection:1,		; RS-232C serial device
	PC_CENTRONICS CentronicsConnection:1,	; Centronics parallel device
	PC_FILE FileConnection:1,		; raw output to a file
	PC_APPLETALK AppletalkConnection:1	; apple/flashtalk device
PrinterConnections end


	; Printer Smarts
	; determines whether driver takes gstrings or a built out bitmap
PrinterSmart	etype	byte, 0, 1
PS_DUMB_RASTER	enum	PrinterSmart	; do everything for me
PS_DOES_FONTS	enum	PrinterSmart	; has scalable and downloadable fonts
PS_PDL		enum	PrinterSmart	; can deal with raw graphics strings

	

PrinterMargins	struct
	PM_left		word	?	; Left margin, in points
	PM_top		word	?	; Top margin, in points
	PM_right	word	?	; Right margin, in points
	PM_bottom	word	?	; Bottom margin, in points
PrinterMargins	ends


	; Paper Input
	; This record specifies the type of paper path for the device.
	; When used in the printer info structure, the 
	; fields of the record indicate the quantity of 
	; a given feature (for example, a "2" in the PIO_TRACTOR field 
	; would indicate the device has two tractor feed units).
	; However, when being passed to the printer driver to set the 
	; desired paper path options for the current print job (see
	; DR_PRINT_SET_MODE), the field indicates which one to select.  (for
	; example, a "2" in the PIO_TRACTOR field would indicate that the
	; driver should use tractor unit #2).

ManualFeed	etype	byte, 0, 1
	MF_NO_MANUAL	enum	ManualFeed	;No Manual paper input.
	MF_MANUAL1	enum	ManualFeed	;manual feed path #1
	MF_MANUAL2	enum	ManualFeed	;manual feed path #2
	MF_MANUAL3	enum	ManualFeed	;manual feed path #3

TractorFeed	etype	byte, 0, 1
	TF_NO_TRACTOR	enum	TractorFeed	;No Tractor Feed.
	TF_TRACTOR1	enum	TractorFeed	;tractor feeder #1
	TF_TRACTOR2	enum	TractorFeed	;tractor feeder #2
	TF_TRACTOR3	enum	TractorFeed	;tractor feeder #3

AutoSheetFeed	etype	byte, 0, 1
	ASF_NO_TRAY	enum	AutoSheetFeed	;No ASF trays
	ASF_TRAY1	enum	AutoSheetFeed	;ASF tray #1
	ASF_TRAY2	enum	AutoSheetFeed	;ASF tray #2
	ASF_TRAY3	enum	AutoSheetFeed	;ASF tray #3
	ASF_TRAY4	enum	AutoSheetFeed	;ASF tray #4
	ASF_TRAY5	enum	AutoSheetFeed	;ASF tray #5
	ASF_TRAY6	enum	AutoSheetFeed	;ASF tray #6
	ASF_TRAY7	enum	AutoSheetFeed	;ASF tray #7

PaperInputOptions	record
	:1,					; future bits
	PIO_MANUAL ManualFeed:2,		; # of manual feed paths
	PIO_ASF AutoSheetFeed:3,		; # of cut-sheet feed bins
	PIO_TRACTOR TractorFeed:2		; # of tractor feed paths
PaperInputOptions	end

	; Paper Output
	; This record specifies the type of output path for the device
	; It is very similar to the PaperInputOptions record in that the 
	; number of output bins works the same way. Additional information
	; is included for duplex modes, and the normal way that paper is
	; outputted from the printer (only relevant for printers with ASF
	; or manual paper inputs)

	;Output Copies specifies that the printer can produce multiple copies
	;of the page by itself. Used by the spooler to see if a page needs to
	;be sent to the printer multiple times or not.
OutputCopies	etype	byte, 0, 1
	OC_NO_COPIES	enum	OutputCopies	;no multiple copies 
	OC_COPIES	enum	OutputCopies	;multiple copies 

	; Paper Sort Order
	; This enum specifies how the paper is normally received in the
	; output tray. 

PaperSorted	etype	byte, 0, 1
	PS_NORMAL	enum	PaperSorted	; face down on output
	PS_REVERSE	enum	PaperSorted	; face up on output

OutputDuplex	etype	byte, 0, 1
	OD_SIMPLEX	enum	OutputDuplex	; no duplex printing
	OD_DUPLEXLO	enum	OutputDuplex	; duplex printing, long edge bd
	OD_DUPLEXSO	enum	OutputDuplex	; duplex printing, short edge bd

StapledOutput	etype	byte, 0, 1
	SO_NO_STAPLER	enum	StapledOutput	;no stapling the output.
	SO_STAPLER	enum	StapledOutput	;Stapler #1

OutputSorter	etype	byte, 0, 1
	OS_NO_SORTER	enum	OutputSorter	;no sorting the output.
	OS_SORTER	enum	OutputSorter	;sorter #1

OutputBin	etype	byte, 0, 1
	OB_NO_OUTPUTBIN	enum	OutputBin	;no bin (only for tractor only)
	OB_OUTPUTBIN1	enum	OutputBin	;Output Bin #1
	OB_OUTPUTBIN2	enum	OutputBin	;Output Bin #2
	OB_OUTPUTBIN3	enum	OutputBin	;Output Bin #3


PaperOutputOptions	record
	POO_COPIES OutputCopies:1,
	POO_SORTED PaperSorted:1,		; which way cut-sheets come out
	POO_DUPLEX OutputDuplex:2,		; duplex printing features.
	POO_STAPLER StapledOutput:1,		; Stapled?
	POO_SORTER OutputSorter:1,		; # of sorters
	POO_CATCHER OutputBin:2		; # of output bins
PaperOutputOptions	end

	;DO NOT CHANGE THE ORDER OF THESE!
PrinterCountryCode	etype	byte, 0, 1
	PCC_FRANCE	enum	PrinterCountryCode
	PCC_GERMANY	enum	PrinterCountryCode
	PCC_UK		enum	PrinterCountryCode
	PCC_DENMARK1	enum	PrinterCountryCode
	PCC_SWEDEN	enum	PrinterCountryCode
	PCC_ITALY	enum	PrinterCountryCode
	PCC_SPAIN1	enum	PrinterCountryCode
	PCC_JAPAN	enum	PrinterCountryCode
	PCC_NORWAY	enum	PrinterCountryCode
	PCC_DENMARK2	enum	PrinterCountryCode
	PCC_SPAIN2	enum	PrinterCountryCode
	PCC_LAT_AMERICA	enum	PrinterCountryCode
	PCC_LEGAL	enum	PrinterCountryCode
	PCC_USA		enum	PrinterCountryCode,0ffh


;---------------------------------------------------------------------------
;		Printer driver info block
;---------------------------------------------------------------------------

;	The printer device info table is a pretty gnarled beast.  We want to
;	be able to store the device info for as many actual devices as the
;	driver supports, allowing for the situation where a single driver 
;	could support multiple devices that have slightly different device
;	info tables.  So the overall structure of the device info table is
;	a list of devices the driver supports, and an array of device info
;	structures that specify the info about each device.  Two devices can
;	use the same device info structure if they have the same attributes.
;
;	The device info structures contain all the info about the device, 
;	and includes info like what kind of paper is used, is it a color 
;	device, and the like.  This structure also describes which of the
;	PrinterMode (see above) the device supports, and the particular
;	attributes of those modes for that device.


	; DEVICE INFO BLOCK
	; This structure contains the info about a specific device.

PrinterInfo	struct

	; device capabilities.

    PI_type		PrinterType
    PI_connect		PrinterConnections
    PI_smarts		PrinterSmart 	 

    PI_customEntry	nptr			;custom start job routine.
    PI_customExit	nptr			;custom end job routine.

	; Offsets to mode property tables.  
	; O means the mode is not supported GraphicsProperties is a 
	; fixed structure, while TextProperties is an array of the 
	; TextProperties structure with a variable number of elements 
	; (depends on how many pitches are supported in that mode).

;	NO_SCALE and TEXT_PROOF removed by Dave 4/3/90

    PI_lowRes		nptr.GraphicsProperties	; PM_GRAPHICS_LOW_RES
    PI_medRes		nptr.GraphicsProperties	; PM_GRAPHICS_MED_RES
    PI_hiRes		nptr.GraphicsProperties	; PM_GRAPHICS_HI_RES
    PI_draft		word 	?		; PM_TEXT_DRAFT
    PI_nlq		word 	?		; PM_TEXT_NLQ

	; offset to the table of the font characteristics (geometries)
    PI_fontGeometries	nptr			; offset of the list of font
						; geometry information

	; offset to the table of the font Symbol Sets (code pages)
    PI_fontSymbolSets	nptr			; offset of the list of font
						; Symbol set setting codes
						; there MUST be at least as 
						; many entries here in each
						; device info as in the UI rtn.

	; margins (defines extent of printable area)

    PI_marginTractor 	PrinterMargins		; Tractor (continuous) margins
    PI_marginASF  	PrinterMargins		; ASF Margins.

	; paper path support

    PI_paperInput 	PaperInputOptions 	;paper input selections
    PI_paperOutput 	PaperOutputOptions 	;paper Output selections
    PI_paperWidth 	word	?		; width of largest paper size
						;  accepted by the printer.
						; (in points)

	; user interface components to be displayed in the print dialog box

    PI_mainUI		optr	NULL		; OD of gentree for main DB
    PI_optionsUI	optr	NULL		; OD of gentree for options DB


    PI_evalRoutine	nptr	NULL		; offset of the eval routine to
						; call to get the data from
						; the generic tree.

PrinterInfo	ends

PI_firstMode	equ	PI_lowRes	;offset to mode table.

;---------------------------------------------------------------------------
	; GRAPHICS MODE INFO STRUCTURE
;---------------------------------------------------------------------------
	; attributes stored for each graphics mode

GraphicsProperties	struct
    GP_xres		word	?		; x resolution, dpi
    GP_yres		word	?		; y resolution, dpi
    GP_bandHeight 	byte	?		; height of each band
    GP_buffHeight 	byte	?		; height of each buffer
    GP_interleaveFactor	byte	?		; interleave factor.
						; offset in scanlines to next
						; scanline for buffer.
    GP_colorFormat	BMFormat 		; 1,4,8 or 24 bits/pixel
    GP_colorCorrection	hptr			; pointer to color correction
						; table.
GraphicsProperties	ends


;---------------------------------------------------------------------------
; 	FONT INFO STRUCTURE
;---------------------------------------------------------------------------

	; enum for the more normal pitch modes.  The value stored is actually
	; 10 times the pitch number
TextPitch	etype	byte
TP_PROPORTIONAL		enum	TextPitch, 0		; flag for prop font
TP_5_PITCH		enum	TextPitch, 5*10		; 5 cpi
TP_6_PITCH		enum	TextPitch, 6*10		; 6 cpi
TP_10_PITCH		enum	TextPitch, 10*10	; 10 cpi
TP_10_6_PITCH		enum	TextPitch, 106		; 10.6 cpi
TP_12_PITCH		enum	TextPitch, 12*10	; 12 cpi
TP_15_PITCH		enum	TextPitch, 15*10	; 15 cpi
TP_16_PITCH		enum	TextPitch, 16*10	; 16 cpi
TP_16_6_PITCH		enum	TextPitch, 166		; 16.6 cpi
TP_17_PITCH		enum	TextPitch, 17*10	; 17 cpi
TP_19_2_PITCH		enum	TextPitch, 192		; 19.2 cpi
TP_20_PITCH		enum	TextPitch, 20*10	; 20 cpi
TP_21_3_PITCH		enum	TextPitch, 213		; 21.3 cpi
TP_24_PITCH		enum	TextPitch, 24*10	; 24 cpi

	; PrinterSymbolSet
	; This enum is stored with each font entry in the printer's device
	; info table to indicate how the upper 128 characters of 8-bit ascii
	; codes should be translated from the GEOS set to the printer's set.
	;
	; NOTE: If you add another enumerated type to this table, you MUST
	;	create a translation table and add it to the spool library.
	;	See the routine UpdateTranslationTable in the file 
	;	Spool/Lib/libDriver.asm to see how this enum is used,
	;	and one of the existing resources 
	;	(e.g. Spool/Lib/libIBM8bitTab.asm) for an example of how to
	;	format the table.  thanks.
	;
PrinterSymbolSet	etype	word, 0, 2		; 
PSS_ASCII7	enum	PrinterSymbolSet, 0	; 7-bit ascii (no 8 bit codes)
PSS_IBM437	enum	PrinterSymbolSet	; IBM Code Page 437 set
PSS_IBM850	enum	PrinterSymbolSet	; IBM Code Page 850 set
PSS_IBM860	enum	PrinterSymbolSet	; IBM Code Page 860 set
PSS_IBM863	enum	PrinterSymbolSet	; IBM Code Page 863 set
PSS_IBM865	enum	PrinterSymbolSet	; IBM Code Page 865 set
PSS_ROMAN8	enum	PrinterSymbolSet	; Roman-8 (HP LaserJet)
PSS_WINDOWS	enum	PrinterSymbolSet	; MS Windows 
PSS_VENTURA	enum	PrinterSymbolSet	; Ventura (HP LaserJet)
PSS_LATIN1	enum	PrinterSymbolSet	; Latin set (HP LaserJet)
PSS_PCGEOS	enum	PrinterSymbolSet	; PCGEOS encoding

	; bits for each type of settable attribute 

PrintTextStyle	record
    PTS_CONDENSED:1,				; bit for condensed mode
    PTS_SUBSCRIPT:1,				; bit for subscript
    PTS_SUPERSCRIPT:1,				; bit for superscript
    PTS_NLQ:1,					; bit for NLQ mode
    PTS_BOLD:1,					; bit for bold
    PTS_ITALIC:1,				; bit for italic
    PTS_UNDERLINE:1,				; bit for underline
    PTS_STRIKETHRU:1,				; bit for strike-thru
    PTS_SHADOW:1,				; bit for shadowed
    PTS_OUTLINE:1,				; bit for outlined
    PTS_REVERSE:1,				; bit for reversed
    PTS_DBLWIDTH:1,				; bit for extra wide
    PTS_DBLHEIGHT:1,				; bit for extra high
    PTS_QUADHEIGHT:1,				; bit for extra-extra high
    PTS_OVERLINE:1,				; bit for over score (above)
    PTS_FUTURE:1				; bit for future features
PrintTextStyle	end

	; Internal Fonts
	; This structure is used to build a table of the fonts that are 
	; available on the device.  

FontEntry	struct
    FE_fontID	FontID		?		; value to pass to select font
    FE_size	word		?		; size in points, 0 for any size
    FE_pitch	TextPitch			; pitch (for non-prop fonts)
    FE_symbolSet PrinterSymbolSet		; enum to specify char set
    FE_command	nptr				; offset of the control code
    FE_styles	PrintTextStyle	 		; legal style bits
    FE_stylesSet	PrintTextStyle 		; mandatory style bits
FontEntry	ends

	; Optional font data used by special print drivers to do *special*
	; things.......
	; NOTE: not present in the device specific structures.

OptFontEntry	struc
	OFE_color		RGBValue <>	;RGB values
	OFE_spacePad		word	?	;integer space padding.
	OFE_trackKern		sword	?	;trackKerning.
	OFE_fontWeight		byte	?	;custom weight....
	OFE_fontWidth		byte	?	;custom weight....
OptFontEntry	ends

	; This structure has a FontID, its size, and a pointer to a table
	; of pitch values. There is one of these structures for each size
	; of each available font.

FontGeometry	struc
	FG_fontID	FontID	?		;font enum.
	FG_pointSize	word	?		;size for this set of pitches
	FG_pitchTab	nptr			;pointer to table of pitches
FontGeometry	ends

;___________________________________________________________________________
;
; Enummerated types, and structures used in the general driver info file.
;___________________________________________________________________________

PrinterResend	etype	word, 0, 1
PR_DONT_RESEND	enum	PrinterResend		; dont resend char. after error.
PR_RESEND	enum	PrinterResend		; do resend char. after error.

	; OVERALL DRIVER INFO HEADER
PrintDriverInfo		struct
    PDI_timeoutValue	word	?		; # seconds to set for timeout
    PDI_resendOrNot	PrinterResend
    PDI_subISOTable	lptr.word		; ISO substitution char table
    PDI_asciiTransChars	lptr.char		; lower ascii translation table
    PDI_driverType	PrinterDriverType	; what type of printer driver
    PDI_uiFeatures      BooleanWord		; what UI should be displayed
PrintDriverInfo		ends

;___________________________________________________________________________
;
;		PState Structure
;___________________________________________________________________________

PState	struct

	; device variables
    PS_mode		PrinterMode		; current printing mode
    PS_device		PrintDevice		; device enum (defined in each
						;  drivers DriverInfo.asm)
    PS_printerType	PrinterType		; technology used by printer.
    PS_printerSmart	PrinterSmart		; printers capabilities.
    PS_deviceInfo	hptr.PrinterInfo	; handle ptr to info block
    PS_expansionInfo	hptr			; handle ptr to info block
    PS_fontInfo		hptr			; handle to the resource con-
						; taining the printer fonts.
    PS_paperInput	PaperInputOptions <>	; input selections
    PS_paperOutput	PaperOutputOptions <>	; output selections
    PS_customWidth	word			; custom paper width
    PS_customHeight	word			; custom paper height
    PS_currentMargins 	PrinterMargins		; margins for this mode.

	; current state variables
    PS_cursorPos	Point <>		; cursor position, points

	; buffer variables
    PS_bufHan		hptr			; handle of working block
    PS_bufSeg		sptr			; segment of locked working blk
    PS_bufSize		word			; size of allocated buffer

	; stream variables
    PS_streamToken	word			; stream interface token
    PS_streamType	word			; PrinterPortType enum
    PS_streamStrategy	fptr.far		; far address of i/o driver 

	; graphics mode variables
    PS_error		byte			; error flag (0=no error)
    PS_bandHeight	word			; height of band (scan lines)
    PS_buffHeight	word			; height of band buffer (scan
						; lines)
    PS_bandWidth	word			; pixel width of swath 
    PS_bandBWidth	word			; byte width of swath 
    PS_intWidth		word			; width of internal buffer
	; Huge Bitmap variables
    PS_swath		Bitmap <>		; bitmap header for swath
    PS_bitmap		dword			; VM file and block handle
    PS_interleaveFactor	word			; number of interleaves.
    PS_curScanOffset	word			; offset to current scan line
    PS_curColorNumber	word			; number of current color in
						; this scanline (from 0-3)
    PS_newScanNumber	word			; new scan line number to
						; be used by the HA stuff
    PS_curScanNumber	word			; current scan line number
    PS_firstBlockScanNumber	word		; starting scanline number in 
						; current block
    PS_lastBlockScanNumber	word		; last scanline number in 
						; current block

	; text mode variables
    PS_asciiStyle	PrintTextStyle		; text style bits
    PS_asciiSpacing	word			; line spacing 

	; legal style/pitch combination table.  copied from dev info table
    PS_curFont		FontEntry		; room for a font description
    PS_curOptFont	OptFontEntry		; rest of TextAttrs copied from
						; GState.
    PS_previousAttribute word			; number of the previous attr.

	; translation table for foreign ascii printing (normal 7-bit ascii)
    PS_asciiTrans	byte 	256 dup (?)	; room for all of ascii 

	;copy of the Job Parameters block....
    PS_jobParams	label	JobParameters	; job parameters block.

	; WARNING! - because JobParameters is a variable-sized structure,
	; using (size PState) is a potentially dangerous thing to do.
	; You'll want to consult the size field JP_size when determining
	; the overall size of JobParameters, and hence the PSTate

PState	ends

;------------------------------------------------------------------------------
;       Internal structure used by the Print Driver UI code.
;------------------------------------------------------------------------------
;this is stuck in the JobParamemters block at offset JP_printerData

PrintDriverUIData      struc
        PUID_paperInput         PaperInputOptions       ;from options
        PUID_paperOutput        PaperOutputOptions      ;from main
        PUID_amountMemory       word    ?               ;from options
        PUID_initMemory         byte    ?               ;from options
        PUID_compressionMode    byte    ?               ;from options
        PUID_symbolSet	        PrinterSymbolSet	;from options
        PUID_countryCode        PrinterCountryCode      ;from options
PrintDriverUIData      ends

;___________________________________________________________________________
;
;	Error and status codes
;___________________________________________________________________________
;---------------------------------------------------------------------------
;		Possible Fatal Error Codes
;---------------------------------------------------------------------------

if 	ERROR_CHECK

FEATURE_NOT_SUPPORTED			enum	FatalErrors
INVALID_MODE				enum	FatalErrors
INVALID_PITCH_VALUE			enum	FatalErrors

endif


;---------------------------------------------------------------------------
;		Possible Returned Error Codes 
;---------------------------------------------------------------------------

; moved to Internal/spoolInt.def

;---------------------------------------------------------------------------
;		Possible Returned Status Codes 
;---------------------------------------------------------------------------

PrinterStatus	etype	word, 0, 2
PS_IDLE		enum	PrinterStatus		; printer not in use
PS_BUSY		enum	PrinterStatus		; printer in use
PS_WAITING	enum	PrinterStatus		; printer waiting for input
PS_PRINTING	enum	PrinterStatus		; printer printing a page
PS_WARMING_UP	enum	PrinterStatus		; printer in warmup stage

EndDriver	print
