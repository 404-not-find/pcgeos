COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		irlapDr.def

AUTHOR:		Cody Kwok, Mar 25, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CK	3/25/94   	Initial revision


DESCRIPTION:
	Socket library driver definitions.
		
	$Id: socketDr.def,v 1.1 97/04/04 14:13:41 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__SOCKETDR

include driver.def

StartDriver socket
; include serialDr.def

include	sockmisc.def

SOCKET_PROTO_MAJOR 	equ DRIVER_PROTO_MAJOR+5
SOCKET_PROTO_MINOR	equ DRIVER_PROTO_MINOR+2

;
; [ SocketDriverPrefOptions ]
;
; Each bit corresponds to a group of UI in the socket preference module.
; :	This flag specifies which gadget in preference module for this driver
; 	is to be turned on.  Init file category for each socket driver is the
;	permanent name specified in .gp of the driver.  Here is the list of
;	gadgets a driver pref controller can use:
;
;	SDPO_TYPE	= "type":0 or 1  (datalink or transport layer)
;	SDPO_ADDRESS	= "address": string
;	SDPO_SUBLAYER	= "sublayer": file name of the sublayer
;	SDPO_MAX_PKT	= "frameSize": integer
;	SDPO_UNIT	= "port": if parallel port -> ParallelPortNum + 100
;				  	ex> for LPT2, 
;					    value PARALLEL_LPT2 + 100 is stored
;				  if serial port -> SerialPortNum
;	SDPO_BAUDRATE	= "baudrate": SerialBaud value for specified baudrate
;	SDPO_MEDIA	= "media": GeoworksMediumID is stored in a list
;	SDPO_SERIAL_PORT_OPTIONS
;		"parity": SerialParity shl offset SF_PARITY
;		"wordLength": SerialLength
;		"stopBits": 1=1;1.5=15;2=2
;		"handshake": SerialFlowControl or none
;		<relevant for h/w handshake mode>
;		   "stopRemote": "dtr" and/or "rts"
;		   "stopLocal": "cts" and/or "dcd" and/or "dsr"
;
;	SDPO_CUSTOM_UI is used when the driver needs to put some custom UI
;	in its preference module.  In order to do that, one should set this
;	bit and provide a preference controller(see DR_SOCKET_GET_INFO w/
;	SGIT_PREF_CTRL), which contains UI objects that instantiate pref
;	class objects.  The controller itself should be a subclass of
;	PrefControlClass, instead of GenControlClass.
;
SocketDriverPrefOptions	record
	SDPO_TYPE:1			; set if Transport layer 
	SDPO_ADDRESS:1			; Address string
	SDPO_SUBLAYER:1			; sublayer
	SDPO_MAX_PKT:1			; Maximum packet size
	SDPO_UNIT:1			; Physical port
	SDPO_BAUDRATE:1			; baudrate
	SDPO_SERIAL_PORT_OPTIONS:1	; serial port options(parity, etc...)
	SDPO_MEDIA:1			; Media support
	SDPO_CUSTOM_UI:1		; Driver requires custom UI
	:7
SocketDriverPrefOptions	end

SocketDriverInfoStruct	struct
    SDIS_common		DriverInfoStruct <>
    SDIS_clientStrat	fptr.far		; client strategy routine
						;  (0 if none) 
    SDIS_prefInfo	SocketDriverPrefOptions	; info for socket preferences
    SDIS_minDgramHdr	byte			; extra space needed in 
						;  datagram buffers (0 if none)
	    align	word
SocketDriverInfoStruct	ends

SocketFunction	etype	word, DriverFunction, 2
;
; DR_INIT 		enum DriverFunction	;Initialize driver
;	PASS:	cx	= di passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;		dx	= bp passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;	RETURN:	carry set if driver initialization failed. Driver will be
;			unloaded by the system.
;		carry clear if initialization successful.
;
;	DESTROYS:	bp, ds, es, ax, di, si, cx, dx
;
; DR_EXIT 		enum DriverFunction	;Exit driver
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	ax, bx, cx, dx, si, di, ds, es
;
;	NOTES:	If the driver has GA_SYSTEM set, the handler for this function
;		*must* be in fixed memory and may not use anything in movable
;		memory.
;
; DR_SUSPEND		enum DriverFunction
;	SYNOPSIS:	Prepare the device for going into stasis while PC/GEOS
;			is task-switched out. Typical actions include disabling
;			interrupts or returning to text-display mode.
;
;	PASS:	cx:dx	= buffer in which to place reason for refusal, if
;			  suspension refused (DRIVER_SUSPEND_ERROR_BUFFER_SIZE
;			  bytes long)
;	RETURN:	carry set if suspension refused:
;			cx:dx	= buffer filled with null-terminated reason,
;				  standard PC/GEOS character set.
;		carry clear if suspension approved
;	DESTROYS:	ax, di
;
; DR_UNSUSPEND		enum DriverFunction
;	SYNOPSIS:	Reconnect to the device when PC/GEOS is task-switched
;			back in.
;
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	ax, di
;

;
; All socket drivers must define the following functions:
; Some of the following functions are for link level drivers and some
; are for data level drivers.  
;
DR_SOCKET_REGISTER enum	SocketFunction
;	SYNOPSIS: Function for socket library to register with the driver.
;		  
;	PASS:	bx    = domain handle of the driver
; 		ds:si = domain name (null terminated)
;         	dx:bp = client entry point for SCO functions (virtual fptr)
;		cl    = SocketDriverType
;
;	RETURN:	carry set if error
; 		ax      = SocketDrError (SDE_ALREADY_REGISTERED)
;					(SDE_MEDIUM_BUSY)
;		bx	= client handle
;		ch	= min header size for outgoing sequenced packets
;		cl	= min header size for outgoing datagram packets
; 				(min header sizes include space for 
;			 	 Sequenced/DatagramPacketHeaders)
;	DESTROYS:  nothing
;

DR_SOCKET_UNREGISTER enum	SocketFunction
;	SYNOPSIS: Function for socket library to unregister with the driver.
;		  
;	PASS:	bx = client handle
;	RETURN:	carry clear if unregistered
;		bx = domain handle
;
;	DESTROYS: bx if unregister refused
; 

DR_SOCKET_ALLOC_CONNECTION	enum	SocketFunction
;	SYNOPSIS: assign a connection id for use with CONNECT_REQUEST
;
;	PASS:	bx	= client handle
;	RETURN: carry set if unable to allocate
;		ax	= SocketDrError (SDE_MEDIUM_BUSY
;					 SDE_INSUFFICIENT_MEMORY)
;		carry clear otherwise
;		ax	= connection handle
;	DESTROYS: nothing
;


DR_SOCKET_LINK_CONNECT_REQUEST	enum	SocketFunction
;	SYNOPSIS: lib requested a connection of the link.
;
;	PASS:	cx    = timeout value (in ticks)
; 		bx    = connection handle 
; 		ds:si = non-null terminated string for addr to connect to
; 		ax    = addr string size
;	RETURN:	carry set if connection failed immediately
;		ax = SocketDrError (SDE_CONNECTION_REFUSED
;		                    SDE_CONNECTION_EXISTS
;				    SDE_CONNECTION_TIMEOUT
;				    SDE_INSUFFICIENT_MEMORY
;				    SDE_CONNECTION_EXISTS
;				    SDE_LINK_OPEN_FAILED
;				    SDE_DRIVER_NOT_FOUND
;				    SDE_INVALID_ADDR_FOR_LINK)	
;		otherwise carry clear
;		
;	DESTROYS: nothing
;
;       NOTE:  Carry clear means that the connection is in progress,
;              and the driver must call SCO_CONNECT_CONFIRM or
;	       SCO_CONNECTION_CLOSED when the connection succeeds or
;	       fails, respectively.
;

DR_SOCKET_DATA_CONNECT_REQUEST	enum	SocketFunction
;	SYNOPSIS: lib requested a connection of the transport data layer
;	
;	PASS:	cx	= timeout value (in ticks)
;		bx	= connection handle
;		ds:si	= non-null terminated string for addr to connect to
;		ax	= addr string size
;		dx	= remote port number 
;		bp	= local port number (0 is not valid)
;	RETURN:	carry set if connection failed immediately
;		ax = SocketDrError (same as for DR_SOCKET_LINK_CONNECT_REQUEST)
;		otherwise carry clear
;	DESTROYS: nothing
;
;       NOTE:  Carry clear means that the connection is in progress,
;              and the driver must call SCO_CONNECT_CONFIRM or
;	       SCO_CONNECTION_CLOSED when the connection succeeds or
;	       fails, respectively.
;

DR_SOCKET_STOP_DATA_CONNECT	enum	SocketFunction
DR_SOCKET_STOP_LINK_CONNECT	equ	DR_SOCKET_STOP_DATA_CONNECT
;	SYNOPSIS: cancel a DATA_CONNECT_REQUEST or LINK_CONNECT_REQUEST
;	
;	PASS:	bx	= connection handle
;       RETURN: carry set if no such connection
;		ax	= SocketDrError
;				(SDE_INVALID_CONNECTION_HANDLE)
;

DR_SOCKET_DISCONNECT_REQUEST		enum	SocketFunction
;	SYNOPSIS: lib requested a connection to be closed
;
;	PASS:	bx = connection handle
;		ax = SocketCloseType  
;	RETURN:	carry set if not connected
; 		ax = SocketDrError (SDE_UNSUPPORTED_FUNCION if half close
;					is unsupported by driver)
;	DESTROYS: nothing
;


DR_SOCKET_SEND_DATA		enum	SocketFunction
;	SYNOPSIS: socket lib sends some data over a connection
;
;	PASS:	dx:bp = optr of buffer to send
; 		cx    = size of data in buffer
; 		bx    = connection handle
; 		ax    = timeout value (in ticks), 0 if no block
;		si    = SocketSendMode     
;	RETURN:	carry set if error
;		ax    = SocketDrError
;			SDE_CONNECTION_TIMEOUT
;			SDE_INTERRUPTED
;			SDE_CONNECTION_RESET_BY_PEER
;
;	DESTROYS: nothing
;
;	NOTE:	The connection handle will be passed in SPH_link in
;		the SequencedPacketHeader for TCP/IP driver and relatives.
;
;		SocketSendMode parameter only applies to drivers which
;		support different modes of data transfer.
;

SocketSendMode	etype	word
SSM_NORMAL		enum	SocketSendMode
SSM_URGENT		enum	SocketSendMode

DR_SOCKET_STOP_SEND_DATA	enum	SocketFunction
;	SYNOPSIS: Interrupt a send request which is blocked waiting
;		  for space in the output queue.
;	PASS:	  bx	= connection handle
;	RETURN:	  carry set if no such connection
;		  ax 	= SocketDrError
;				(SDE_INVALID_CONNECTION_HANDLE)
;	DESTROYS: nothing
;

DR_SOCKET_SEND_DATAGRAM		enum	SocketFunction
;	SYNOPSIS: socket lib sends some unreliable data
;
;	PASS:	dx:bp = optr of buffer send
; 		cx    = size of data in buffer
; 		bx    = client handle 
; 		ax    = size of address
; 		ds:si = non-null term. string of address to send to
;	RETURN:	carry set if error
;		ax = SocketDrError (SDE_DESTINATION_UNREACHABLE
;				    SDE_DRIVER_NOT_FOUND
;				    SDE_LINK_OPEN_FAILED)
;	DESTROYS: nothing
;

DR_SOCKET_RESET_REQUEST		enum 	SocketFunction
;	SYNOPSIS: socket lib wants to reset the link
;
;	PASS:	ax	= connection handle
;	RETURN:	nothing
;
;	DESTROYS: nothing
;

DR_SOCKET_ATTACH		enum	SocketFunction
;	SYNOPSIS: accept a remote connection request
;	
;	PASS:	ax	= connection handle
;		cx	= timeout value (in ticks)		
;	RETURN:	carry set if error
;		ax = SocketDrError (SDE_CONNECTION_REFUSED
;				    SDE_CONNECTION_TIMEOUT
;				    SDE_INSUFFICIENT_MEMORY)
;	DESTROYS: nothing
;

DR_SOCKET_REJECT		enum	SocketFunction
;	SYNOPSIS: reject a remote connection request
;
;	PASS:	ax	= connection handle
;	RETURN:	nothing
;		
;	DESTROYS: nothing
;

DR_SOCKET_GET_INFO		enum	SocketFunction
;	SYNOPSIS: get info from the driver.  Not all info types are
;		  available from all drivers.
;	
;	PASS:	ax	= SocketGetInfoType 
;	RETURN: carry set if info not available
;
;	Other parameters for each SocketGetInfoType 
;	  SGIT_MEDIA_LIST:
;		Pass: 	*ds:si	= chunk array to be filled with MediumType
;				  (chunk array MUST be empty)
;		Return: *ds:si 	= chunk array of MediumType
;
;	  SGIT_MEDIUM_AND_UNIT:
;		Pass: 	ds:si	= non-null terminated address string 
;			dx	= address size 
;		Return:	cxdx	= MediumType
;			bl	= MediumUnitType
;			bp	= MediumUnit
;
;	  SGIT_LOCAL_ADDR: 
;	  SGIT_REMOTE_ADDR:
;		Pass:	cx	= connection handle (or 0 if connectionless)
;				  MUST be non-zero for SGIT_REMOTE_ADDR
;			ds:bx	= buffer for address
;			dx	= buffer size
;		Return: ds:bx	= buffer filled w/non-null terminated addr string
;					if buffer is big enough
;			ax	= address size
;		NOTE:  Caller is responsible for checking if the address size
;			returned exceeds the buffer size before assuming the 
;			buffer contains an address.
;
;	  SGIT_ADDR_SIZE:
;	  SGIT_MTU:
;		Pass: no other paramters
;		Return: ax	= value
;
;	  SGIT_ADDR_CTRL:
;		Pass:	nothing
;		Return:	carry set if error
;			else
;			cx:dx	= pointer to class
;	  SGIT_PREF_CTRL:
;		Pass:	nothing
;		Return: carry set if error
;			else
;			cx:dx = pointer to class
;	  SGIT_MEDIUM_CONNECTION:
;	  SGIT_MEDIUM_LOCAL_ADDR:
;		Pass:	dx:bx	= MediumAndUnit
;			ds:si	= address buffer
;			cx	= buffer size in bytes
;		Return: carry set if no connection is established over the
;			unit of the medium.
;			else
;			ds:si	= filled in with address, up to value passed
;				  in as buffer size.
;				remote address if S_M_CONNECTION
;				local address if S_M_ADDRESS
;			cx	= actual size of address in ds:si.  If cx
;				  is greater than the buffer size that was
;				  passed in, then address in ds:si is 
;				  incomplete.
;			
;	DESTROYS: ax if not holding a value
;

SocketGetInfoType	etype	word, 0, 2
SGIT_MEDIA_LIST		enum	SocketGetInfoType  ; list of media supported by
						   ;  driver
SGIT_MEDIUM_AND_UNIT	enum	SocketGetInfoType  ; medium and unit for a given
						   ;  address
SGIT_ADDR_CTRL		enum	SocketGetInfoType  ; address controller 
SGIT_ADDR_SIZE		enum	SocketGetInfoType  ; # significant bytes in 
						   ;   an address
SGIT_LOCAL_ADDR		enum	SocketGetInfoType  ; local end of a link
SGIT_REMOTE_ADDR	enum	SocketGetInfoType  ; remote end of a link
SGIT_MTU		enum	SocketGetInfoType  ; maximum transmission unit
						   ;  Most drivers will not 
						   ;  provide MTU information.
SGIT_PREF_CTRL		enum	SocketGetInfoType  ; Custom ui for preference
						   ; module
SGIT_MEDIUM_CONNECTION	enum	SocketGetInfoType  ; Check if connection exists
						   ; over medium.
SGIT_MEDIUM_LOCAL_ADDR	enum	SocketGetInfoType  ; get local address of
					           ; medium

; Note:  Update definition in socketDr.h if SocketOptionType is changed.
SocketOptionType	etype	word
SOT_RECV_BUF		enum	SocketOptionType
SOT_SEND_BUF		enum	SocketOptionType	
SOT_INLINE		enum	SocketOptionType
SOT_NODELAY		enum	SocketOptionType

DR_SOCKET_SET_OPTION		enum	SocketFunction
;	PASS:	ax	= SocketOptionType	
;		bx	= connection
;		other params vary by option type:
;			SOT_RECV_BUF:
;			SOT_SEND_BUF:
;				cx = size of receive buffer (-1 for no limit)
;			SOT_INLINE: 
;			SOT_NODELAY:
;				cx = TRUE/FALSE
;	RETURN:	nothing
;	DESTROYS: nothing
;	

DR_SOCKET_GET_OPTION		enum	SocketFunction
;	PASS:	ax	= SocketOptionType
;		bx	= connection
;	RETURN:	varies by option type:
;			SOT_RECV_BUF:
;			SOT_SEND_BUF:
;				Error!  Socket library already knows this!
;			SOT_INLINE:
;			SOT_NODELAY:
;				cx	= non-zero if TRUE
;
;	DESTROYS: nothing
;

DR_SOCKET_RESOLVE_ADDR		enum	SocketFunction
; 	SYNOPSIS:  Resolve the address into a form used by the socket driver.
; 	PASS:	ds:si 	= addr to resolve (non-null terminated)
;		cx	= size of addr 
;		dx:bp	= buffer for resolved address
;		ax	= size of buffer
;	RETURN:
;		carry set if error
;		  ax = SocketDrError
;		  	SDE_DESTINATION_UNREACHABLE
;		  	SDE_TEMPORARY_ERROR: address unreachable temporarily
;		  	SDE_INVALID_ADDR
;			SDE_DRIVER_NOT_FOUND: unable to load TCP link driver
;						or resolver
;		else carry clear 		  
;		  dx:bp = buffer filled w/non-null terminated addr if buffer
;			  is big enough
;		  cx	= size of resolved address
;		  (ax unchanged)
;
;	NOTE:	Caller is responsible for checking if the address size returned
;		exceeds the buffer size before assuming the buffer contains
;		an address.
;

DR_SOCKET_STOP_RESOLVE		enum	SocketFunction
; 	PASS:	ds:si 	= addr to resolve (non-null terminated)
;		cx	= size of addr 
;	RETURN: carry set if error
;		ax	= SocketDrError
;

DR_SOCKET_CLOSE_MEDIUM		enum	SocketFunction
;	SYNOPSIS:  Explicit link close function to disconnect the medium.
;
;	PASS:	ax	= non-zero to force close
;		dx:bx	= MediumAndUnit
;
;	RETURN: carry clear if medium closed
;


DR_SOCKET_MEDIUM_CONNECT_REQUEST	enum	SocketFunction
;	SYNOPSIS:  Activate a low level connection over the medium required
;                  for the specified address.   The exact level of connection
;		   to be established is up to the driver; this function
;                  could be a no-op in some drivers.
;	
;	PASS:	cx	= timeout value (in ticks)
;		bx	= client handle
;		ds:si	= non-null terminated string for addr to connect to
;		ax	= addr string size
;
;	RETURN:	carry set if connection failed
;		ax = SocketDrError (same as for DR_SOCKET_LINK_CONNECT_REQUEST)
;		otherwise
;		ax = SDE_NO_ERROR
;	DESTROYS: nothing
;

DR_SOCKET_MEDIUM_ACTIVATED	enum	SocketFunction
;	SYNOPSIS: Driver is requested to handle an incoming connection
;                 on the specified medium.
;	PASS:	  dx:bx	= MediumAndUnit
;	 	  (Responder PPP: cl	= call ID)
;
;	RETURN:	  carry set if error
;       DESTROY:  nothing
;

	
; Note:	 Update definition in socketDr.h if MediumOptionType is changed.
MediumOptionType	etype	word
	MOT_ALWAYS_BUSY	enum MediumOptionType

	
DR_SOCKET_SET_MEDIUM_OPTION	enum	SocketFunction
;	SYNOPSIS: Set an option for the link over the given medium.
;
;	PASS:	dx:bx	= MediumAndUnit
;		ax	= MediumOptionType
;		other parameters vary depending on MediumOptionType
;			MOT_ALWAYS_BUSY
;				cx = TRUE/FALSE
;
;	RETURN:	carry set if error 
;
;	DESTROY: nothing
;

DR_SOCKET_RESOLVE_LINK_LEVEL_ADDRESS	enum	SocketFunction
;	SYNOPSIS: Converts an address used by the socket library
;		  into the address used by the link driver for
;		  delivery. Intended mainly for doing ARP lookups
;		  over ethernet.
;
;	PASS:	 ds:si	= SocketAddress
;		 cx:dx	= pointer to buffer to store link level address or null
;		 bx	= buffer size
;
;	RETURN:	 ax	= SocketError
;		 bx	= Address size
;
;	Added by edigeronimo 6/1/00

;
;
; Socket drivers which have their own specific functions in addition
; to the SocketFunctions must have their driver functions start at or above
; the following value (decreed by Eric Weber).
;
SOCKET_DR_FIRST_SPEC_FUNC	equ	4000h

EndDriver	socket


;---------------------------------------------------------------------------
;			 SocketDrError
;
; If SocketDrError is changed, must also change C file (socketDr.h).
;---------------------------------------------------------------------------

SocketDrError	etype	word, 0
SDE_NO_ERROR		       enum SocketDrError  ; must be zero!
SDE_CONNECTION_REFUSED         enum SocketDrError  ; remote refuse to connect
SDE_CONNECTION_TIMEOUT         enum SocketDrError  ; generic failure
SDE_MEDIUM_BUSY                enum SocketDrError  ; active connection outside
SDE_INSUFFICIENT_MEMORY        enum SocketDrError  ; ditto
SDE_NOT_REGISTERED	       enum SocketDrError  ; client has not reg with dr
SDE_ALREADY_REGISTERED         enum SocketDrError  ;same client registering 2x 
SDE_CONNECTION_EXISTS	       enum SocketDrError  ; opening duplicate conn.
SDE_LINK_OPEN_FAILED	       enum SocketDrError  ; couldn't open any links
SDE_DRIVER_NOT_FOUND           enum SocketDrError  ; ditto
SDE_DESTINATION_UNREACHABLE    enum SocketDrError  ; ditto
SDE_CONNECTION_RESET_BY_PEER   enum SocketDrError  ; remote initiated reset
SDE_CONNECTION_RESET	       enum SocketDrError  ; we initiated reset
SDE_UNSUPPORTED_FUNCTION       enum SocketDrError  ; ditto
SDE_INVALID_CONNECTION_HANDLE  enum SocketDrError  ; ditto
SDE_INVALID_ADDR_FOR_LINK   	enum SocketDrError ; loopback illegal for link
SDE_INVALID_ADDR		enum SocketDrError ; bad address entered
SDE_TEMPORARY_ERROR		enum SocketDrError
SDE_INTERRUPTED			enum SocketDrError 

;---------------------------------------------------------------------------
;			Fatal Errors
;---------------------------------------------------------------------------

ERROR_INVALID_SOCKET_DRIVER_FUNCTION		enum	FatalErrors
