COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Include
FILE:		fileStDr.def

DECLARER:	File Stream Driver
INTENDED USERS:	Print spooler
OVERRIDE CONST:	-

AUTHOR:		Jim DeFrisco, Jan 12, 1993

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Jim	1/12/93		Initial revision


DESCRIPTION:
	Header for users of the file type stream driver. Most of the function
	and type definitions are found in strDriver.def. Only the added
	functions and types are defined here.
		
	$Id: fileStDr.def,v 1.1 97/04/04 14:15:57 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__FILESTDR

StartDriver	filestr

UseDriver Internal/streamDr.def

;
; Protocol number for this interface. 
;
FILESTR_PROTO_MAJOR	equ STREAM_PROTO_MAJOR+1
FILESTR_PROTO_MINOR	equ STREAM_PROTO_MINOR+0

;------------------------------------------------------------------------------
;		     ADDITIONAL DRIVER FUNCTIONS
;
; NOTE: All stream driver functions are valid for the filestr driver except
; DR_STREAM_READ, DR_STREAM_READ_BYTE
;
; Any deviation of the parameters from those described in streamDr.def are
; provided below.
;------------------------------------------------------------------------------

;DR_STREAM_OPEN
;	PASS:	bx	= file handle of created/opened file
;		dx	= total size of output buffer
;	RETURN:	carry set if port couldn't be opened
;		 (in-use/timed-out/non-existent)
;		if carry clear:
;			bx	= unit number to be used with READ/WRITE/CLOSE
;				  (this is actually a file handle)

;DR_STREAM_CLOSE
;	PASS:	bx	= unit number
;	RETURN:	nothing
;

;DR_STREAM_GET_ERROR 
;	PASS:	nothing
;	RETURN:	ax	= FileError enum
;

;DR_STREAM_READ	
;	PASS:	ax	= STREAM_BLOCK/STREAM_NO_BLOCK to tell whether to
;			  block waiting for the full request to be filled or
;			  to return as many bytes as are currently available.
;		bx	= stream token
;		cx	= number of bytes to read
;		ds:si	= buffer to which to read
;	RETURN:	cx	= number of bytes read

;DR_STREAM_READ_BYTE	enum	StreamFunction
;	PASS:	ax	= STREAM_BLOCK/STREAM_NO_BLOCK to tell whether to
;			  block waiting for the byte to arrive.
;		bx	= stream token
;	RETURN:	al	= byte read, unless ax was STREAM_NO_BLOCK and
;			  carry is set, in which case no byte was available.
;	
;DR_STREAM_WRITE		enum	StreamFunction
;	PASS:	ax	= STREAM_BLOCK/STREAM_NO_BLOCK to tell whether to
;			  block waiting for the full request to be processed or
;			  to return as many bytes as could be written
;			  immediately.
;		bx	= stream token
;		cx	= number of bytes to write
;		ds:si	= buffer from which to write
;	RETURN:	cx	= number of bytes written

;DR_STREAM_WRITE_BYTE	enum	StreamFunction
;	PASS:	ax	= STREAM_BLOCK/STREAM_NO_BLOCK to tell whether to
;			  block if there is no space in the stream.
;		bx	= stream token
;		cl	= byte to write
;	RETURN:	carry set if byte could not be written and STREAM_NO_BLOCK
;		was specified.

;------------------------------------------------------------------------------
;		     VARIOUS AND SUNDRY CONSTANTS
;------------------------------------------------------------------------------
;

StreamError	= STREAM_FIRST_DEV_ERROR

STREAM_FILE_WRITE_FAILED enum	StreamError	; cannot commit data to file

EndDriver	filestr
