COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		loopbackDr.def

AUTHOR:		Steve Jang, Sep  7, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	9/ 7/94   	Initial revision


DESCRIPTION:
	Driver that re-routes packets back to socket library.
		
	$Id: loopbackDr.def,v 1.1 97/04/04 14:16:52 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
include Internal/socketDr.def

StartDriver loopback

LOOPBACK_PROTO_MAJOR 	equ SOCKET_PROTO_MAJOR+0
LOOPBACK_PROTO_MINOR	equ SOCKET_PROTO_MINOR+0

;SocketFunction	etype	word, DriverFunction, 2
;NOTE: THE FOLLOWING FOUR ENTRY POINTS ARE INHERITED FROM DriverFunction:
;
;DR_INIT 		enum DriverFunction	;Initialize driver
;	PASS:	cx	= di passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;		dx	= bp passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;	RETURN:	carry set if driver initialization failed. Driver will be
;			unloaded by the system.
;		carry clear if initialization successful.
;
;	DESTROYS:	bp, ds, es, nothing, si, cx, dx
;
;
;DR_EXIT 		enum DriverFunction	;Exit driver
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	ax, bx, cx, dx, si, di, ds, es
;
;	NOTES:	If the driver has GA_SYSTEM set, the handler for this function
;		*must* be in fixed memory and may not use anything in movable
;		memory.
;
;DR_SUSPEND		enum DriverFunction
;	SYNOPSIS:	Prepare the device for going into stasis while PC/GEOS
;			is task-switched out. Typical actions include disabling
;			interrupts or returning to text-display mode.
;
;	PASS:	cx:dx	= buffer in which to place reason for refusal, if
;			  suspension refused (DRIVER_SUSPEND_ERROR_BUFFER_SIZE
;			  bytes long)
;	RETURN:	carry set if suspension refused:
;			cx:dx	= buffer filled with null-terminated reason,
;				  standard PC/GEOS character set.
;		carry clear if suspension approved
;	DESTROYS:	nothing
;
;
;DR_UNSUSPEND		enum DriverFunction
;	SYNOPSIS:	Reconnect to the device when PC/GEOS is task-switched
;			back in.
;
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	nothing
;

; ===========================================================================
;
; Interface to loopback driver is identical to socketDr.def.
;
; ===========================================================================
;
;DR_SOCKET_REGISTER enum	SocketFunction
;	SYNOPSIS: Function for socket library to register with the driver.
;		  
;	PASS:	bx    = domain handle of the driver
; 		ds:si = domain name (null terminated)
;         	dx:bp = client entry point for SCO functions (virtual fptr)
;		cl    = SocketDriverType
;	RETURN:	carry set if error
; 		ax      = SocketDrError (SDE_ALREADY_REGISTERED)
;		bx	= client handle
;		ch	= min header size for outgoing sequenced packets
;		cl	= min header size for outgoing datagram packets
;
;
;DR_SOCKET_UNREGISTER enum	SocketFunction
;	SYNOPSIS: Function for socket library to unregister with the driver.
;		  
;	PASS:	bx = client handle
;	RETURN:	bx = domain handle
; 
;
;DR_SOCKET_LINK_CONNECT_REQUEST	enum	SocketFunction
;	SYNOPSIS: lib requested a connection of the link.
;
;	PASS:	cx    = timeout value (in ticks)
; 		bx    = client handle 
;	RETURN:	carry set if connection failed
;		ax = SocketDrError
; 		otherwise
; 		ax = connection handle
;	DESTROYS:	nothing
;
;
;DR_SOCKET_DATA_CONNECT_REQUEST	enum	SocketFunction
;	SYNOPSIS: lib requested a connection of the transport data layer
;	
;	PASS:	cx	= timeout value (in ticks)
;		bx	= client handle
;		dx	= remote port number 
;		bp	= local port number (0 is not valid)
;	RETURN:	carry set if connection failed
;		ax = SocketDrError
;		otherwise
;		ax = connection handle
;
;
;DR_SOCKET_DISCONNECT_REQUEST		enum	SocketFunction
;	SYNOPSIS: lib requested a connection to be closed
;
;	PASS:	bx = connection handle
;		ax = SocketCloseType  
;	RETURN:	carry set if not connected
; 		ax = SocketDrError (SDE_NOT_UNCONNECTED)
;	DESTROYS:nothing
;
;DR_SOCKET_SEND_DATA		enum	SocketFunction
;	SYNOPSIS: socket lib sends some data over a connection
;
;	PASS:	dx:bp = optr of buffer to send
; 		cx    = size of data in buffer
; 		bx    = connection handle
; 		ax    = offset of real data 
;	RETURN:	carry set if error
;		ax = SocketDrError
;	DESTROYS:nothing
;
;	NOTE:	The connection handle will be passed in SPH_link in
;		the SequencedPacketHeader for TCP/IP driver and relatives.
;
;
;DR_SOCKET_SEND_DATAGRAM		enum	SocketFunction
;	SYNOPSIS: socket lib sends some unreliable data
;
;	PASS:	dx:bp = optr of buffer send
; 		cx    = size of data in buffer
; 		bx    = client handle 
; 		ax    = offset of real data
; 		ds:si = null term. string of address to send to
;	RETURN:	carry set if error
;		ax = SocketDrError
;	DESTROYS:nothing
;
;
;DR_SOCKET_RESET_REQUEST		enum 	SocketFunction
;	SYNOPSIS: socket lib wants to reset the link
;
;	PASS:	ax	= connection handle
;	RETURN:	carry set if connection does not exist
;		ax = SocketDrError
;	DESTROYS:nothing
;
;
;DR_SOCKET_ATTACH		enum	SocketFunction
;	SYNOPSIS: accept a remote connection request
;	
;	PASS:	ax	= connection handle
;		cx	= timeout value (in ticks)		
;	RETURN:	carry set if error
;		ax = SocketDrError
;	DESTROYS: nothing
;
;
;DR_SOCKET_REJECT		enum	SocketFunction
;	SYNOPSIS: reject a remote connection request
;
;	PASS:	ax	= connection handle
;	RETURN:	carry set if invalid connection handle
;		ax = SocketDrError
;	DESTROYS: nothing
;

;; Misc interface constants.  If SocketDrError is changed, must also
;; change C file (socketDr.h).
;
;SocketDrError	etype	word, 1
;SDE_CONNECTION_REFUSED         enum SocketDrError  ; remote refuse to connect
;SDE_CONNECTION_TIMEOUT         enum SocketDrError  ; remote does not respond
;SDE_MEDIA_BUSY                 enum SocketDrError  ; active connection outside
;SDE_UNDEFINED_FUNCTION         enum SocketDrError  ; calling weird Dr functions
;SDE_INVALID_DOMAIN_HANDLE      enum SocketDrError
;SDE_INVALID_CONNECTION_HANDLE  enum SocketDrError
;SDE_INVALID_ADDRESS_HANDLE     enum SocketDrError
;SDE_INSUFFICIENT_MEMORY        enum SocketDrError
;SDE_LINK_FAILED                enum SocketDrError  ; the whole thing crashed..?
;SDE_SERIAL_PORT_IN_USE         enum SocketDrError  ; port used by some other geodes 
;SDE_INVALID_SERIAL_PORT        enum SocketDrError  ; 
;SDE_SEND_FAILED                enum SocketDrError  ; IRLAP don't use this
;SDE_NOT_CONNECTED              enum SocketDrError  ; not ready for delivery
;SDE_LIB_NOT_REGISTERED         enum SocketDrError  ; lib has not reg with dr
;SDE_ALREADY_REGISTERED         enum SocketDrError  ; registering twice
;SDE_DESTINATION_UNREACHABLE    enum SocketDrError	
;SDE_CONNECTION_RESET_BY_PEER   enum SocketDrError  ; remote initiated reset
;SDE_CONNECTION_RESET	        enum SocketDrError  ; we initiated reset
;SDE_UNSUPPORTED_FUNCTION       enum SocketDrError   

EndDriver	loopback

;---------------------------------------------------------------------------
;			Fatal Errors
;---------------------------------------------------------------------------
;
;ERROR_INVALID_SOCKET_DRIVER_FUNCTION		enum	FatalErrors

