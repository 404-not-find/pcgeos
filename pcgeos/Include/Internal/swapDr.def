COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		swapDr.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines structures and routines intended for swap drivers.

	$Id: swapDr.def,v 1.1 97/04/04 14:14:33 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__SWAPDR

include driver.def

StartKernel

;
; Speed rating of a swap driver.
;

SwapSpeed		etype	byte
    SS_REALLY_FAST	enum	SwapSpeed
    SS_PRETTY_FAST	enum	SwapSpeed
    SS_KINDA_SLOW	enum	SwapSpeed
    SS_REALLY_SLOW	enum	SwapSpeed

SwapDriverFlags		record
    :5
    SDF_VOLATILE:1	; Non-zero if contents of swap-device may be wiped
			;  out if PC/GEOS is task-switched out.
    SDF_ENDANGERED:1	; INTERNAL: Non-zero if SDF_VOLATILE and system is being
			;  suspended. System will not attempt to swap to the
			;  device if this is set.
    SDF_FULL:1,		; INTERNAL: non-zero if swap device is full, as
			;  evidenced by DR_SWAP_SWAP_OUT having failed
SwapDriverFlags		end

global MemAddSwapDriver:far
;	Pass:	cx:dx	= driver strategy routine
;		al	= SwapSpeed giving the speed of the swap device
;		ah	= SwapDriverFlags
;	Return:	carry set if driver couldn't be added (driver should return
;			carry set from its DR_INIT function so it gets
;			unloaded)

global MemExtendHeap:far
;	Pass:	ax	= starting segment of heap extension
;		cx	= length of the extension (paragraphs)
;	Return:	nothing
;

global MemGetSwapDriverInfo:far
;	Pass:	cl	= zero-based index into swap table
;	Return:	bx:dx	= driver strategy routine
;		al	= SwapSpeed for the driver's device
;		ah	= SwapDriverFlags
;		di	= swap driver id

global MemMigrateSwapData:far
;	Pass:	bx	= handle of block to migrate
;		di	= id of destination swap driver (as returned by
;			MemGetSwapDriverInfo)
;	Return:	carry set on error


EndKernel

StartDriver	swap_dr

;
; Protocol number for this interface. Adjust the final numbers, below, if the
; interface is changed.
;
SWAP_PROTO_MAJOR equ DRIVER_PROTO_MAJOR+1
SWAP_PROTO_MINOR equ DRIVER_PROTO_MINOR+0

;	Swap Driver calls
;
SwapFunction 	etype word, DriverFunction, 2

DR_SWAP_SWAP_OUT	enum SwapFunction
;
;	Desc:	Swap a block out, if possible
;	Pass:	dx	= segment of data block
;		cx	= size of data block (bytes)
;	Return:	carry clear if no error
;		ax	= id of swapped data (for swap-in or discard)
;	Destroy:cx, di
;

DR_SWAP_SWAP_IN		enum SwapFunction
;
;	Desc:	Swap a block back in
;	Pass:	bx	= id of swapped data (as returned by DR_SWAP_SWAP_OUT)
;		dx	= segment of destination block
;		cx	= size of data block (bytes)
;	Return:	carry clear if no error
;	Destroy:ax, cx, di
;

DR_SWAP_DISCARD 	enum SwapFunction
;
;	Desc:	Discard swapped data -- the block's been freed or discarded
;	Pass:	bx 	= id of swapped data (as returned by DR_SWAP_SWAP_OUT)
;	Return:	carry clear if no error
;	Destroy:ax, bx
;

DR_SWAP_GET_MAP		enum SwapFunction
;
;	Desc:	Returns the segment of the swap map being used by the
;		driver (defined in swap.def).
;	Pass:	nothing
;	Return:	ax	= segment of swap map (or 0 if driver doesn't use
;			  swap library)
;	Destroy:nothing
;

DR_SWAP_COMPACT		enum	SwapFunction
;
;	Desc:	Relocate the data within the swap driver so that there is
;		at least a certain amount of free space left in the device.
;
;	Pass:	bx	= in Kbytes, the amount of free space 
;		dx	= swap driver ID. (i.e., what's stored in 
;			  HSM_swapDriver for blocks swapped to this device.)
;		
;	Return: if success:
;			carry clear
;			ax	= Kbytes used by swap driver (to be passed
;				  to DR_SWAP_DEALLOC).
;		else:
;			carry set
;
;	Destroy: nothing

DR_SWAP_DEALLOC		enum	SwapFunction
;
;	Desc:	Free unused swap memory.
;
;	Pass:	bx	= Kbytes used by swap driver after compaction, 
;			  returned by DR_SWAP_COMPACT.
;		
;	Return: If success:
;			carry clear
;		else:
;			carry set
;
;	Destroy: nothing

DR_SWAP_REALLOC		enum	SwapFunction
;
;	Desc:	Free unused swap memory.
;
;	Pass:	nothing
;		
;	Return: If success:
;			carry clear
;		else:
;			carry set
;
;	Destroy: nothing

;-----------------------------------------------------------------------------
;		Constants
;-----------------------------------------------------------------------------

;
; DEVICE error values
;
ERR_UNKNOWN_COMMAND		=	1
ERR_NESTED_INIT_EXIT		=	2

EndDriver	swap_dr
