COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	(c) Copyright Geoworks 1994.  All rights reserved.
			GEOWORKS CONFIDENTIAL

PROJECT:	
MODULE:		
FILE:		faxInDr.def

AUTHOR:		Steve Kertes, Sep  6, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SK	9/ 6/94   	Initial revision


DESCRIPTION:

	class2 input driver stuff
		
	$Id: faxInDr.def,v 1.1 97/04/04 14:13:25 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SetDef __FAXINDR

include driver.def
include	Internal/faxDriver.def

; This PASTA variable exists in order to get the Geos 2.0 PASTA fax
; solution to compile under 3.0
ifndef	PASTA
	PASTA	equ	0
endif

;------------------------------------------------------------------------------
;		       Fax Input Driver Function Calls
;------------------------------------------------------------------------------

;StartDriver faxin

;
; Protocol number for this interface.  Adjust the final numbers, below,
; if the interface is changed.
;
FAXIN_PROTO_MAJOR equ DRIVER_EXT_PROTO_MAJOR+0
FAXIN_PROTO_MINOR equ DRIVER_EXT_PROTO_MINOR+0

FaxInFunction		etype	word, DriverExtendedFunction, 2

;
; Remember that the first 6 functions to be supported are:
;
; DR_INIT		0
; DR_EXIT		2
; DR_SUSPEND		4
; DR_UNSUSPEND		6
; DRE_TEST_DEVICE	8
; DRE_SET_DEVICE	10
;

DR_FAXIN_REGISTER			enum	FaxInFunction
;
; PASS:		ax	= timer message (handler calls DR_FAXIN_HANDLE_TIMER)
;		bx	= notify message (handler calls DR_FAXIN stuff)
;		bp	= status message (handler can display status to user)
;		cx:dx	= od of thing to send messages to
;		ds	= dgroup
;
; RETURN:	carry set if unable to do it
; DESTROYED:	nothing
;
; set timer msg, status msg, notification msg, and the od of handler
; must be called before DR_FAXIN_INIT_DEVICE
; you must call DR_FAXIN_UNREGISTER when done!  And you should unregister
; if you close an active connection to the serial port, so that someone
; else (the fax receive app) can open the port and register.
;

DR_FAXIN_UNREGISTER			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; Must be done before exiting the driver, turns off the timer, quits sending
; notify and status messages.  Do not call unless a successful
; DR_FAXIN_REGISTER has been acheived.
;

DR_FAXIN_HANDLE_DATA_NOTIFICATION	enum	FaxInFunction
;
; PASS:		bx:dx	= buffer of data from modem (or someplace...)
; 		cx	= number of bytes in the data
; RETURN:	nothing
; DESTROYED:	nothing
;
; must be called by handler of data notify msg before trashing cx, dx, bp
;

DR_FAXIN_HANDLE_TIMER			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; must be called by handler of timer msg before trashing cx, dx, bp
;

DR_FAXIN_HANDLE_TIMEOUT			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; must be called when the FRFN_TIMEOUT notification has been sent
;

DR_FAXIN_SET_PORT			enum	FaxInFunction
;
; PASS:		bx = SerialPortNum (active version)
; RETURN:	nothing
; DESTROYED:	nothing
;
; set com port to use (must be open for anything to work)
; must be called before DR_FAXIN_INIT_DEVICE.  [the com port can be closed
; while the receiver is waiting for a call, just open it again before asking
; the faxin driver to do anything]
;

DR_FAXIN_SET_T30			enum	FaxInFunction
;
; PASS:		cx:dx = T30Response to set
;		bl    = T30ResponseFlags (which entries are being set
; RETURN:	fill in T30Response with actual values used
;		bl = T30ResponseFlags actually used
; DESTROYED:	nothing
;
; can receiver handle 1d, 2d, uncompressed data?  fine mode allowed?
; must be called before DR_FAXIN_INIT_DEVICE
; (or else the old ini settings will be used)
;

DR_FAXIN_GET_T30			enum	FaxInFunction
;
; PASS:		bx:dx	= pointer to T30 struct to fill in with current
;			  paramaters
; RETURN:	struct filled in
; DESTROYED:	nothing
;
; fills in the T30Response struct with the current connection paramaters
; this should be called in response to the FRFN_GET_CONNECTION_PARAMATERS
; notification
;

DR_FAXIN_SET_STATION_ID			enum	FaxInFunction
;
; PASS:		bx:dx	= pointer to station id string to use (null terminated)
; RETURN:	nothing
; DESTROYED:	nothing
;
; pass id string to use.  this id is written to the .ini file.
; optional, but must be called before DR_FAXIN_INIT_DEVICE for it to be used
; (or else the old ini settings will be used)
;

DR_FAXIN_GET_CALLER_ID			enum	FaxInFunction
;
; PASS:		bx:dx is ptr to buffer to put callers id
;		(size >= FAXFILE_MAX_FAX_ID_FIELD_LENGTH)
; RETURN:	buffer filled in with id (might be null)
; DESTROYED:	nothing
;
; should be called after getting a FRFN_GET_CALLER_ID notification.
;

DR_FAXIN_RESET_DEVICE			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; takes modem out of fax mode (sends atz)
;

DR_FAXIN_INIT_DEVICE			enum	FaxInFunction
;
; PASS:		ds = dgroup
; 		cl = BB_TRUE if the modem already has some initilization done
; 			(i.e. do not send an ATZ)
; 		ch = BB_TRUE if the modem should be set to detect data connects
; RETURN:	nothing
; DESTROYED:	nothing
;
; puts modem in fax mode, waiting for the phone to ring
; DR_FAXIN_REGISTER, DR_FAXIN_SET_PORT, DR_FAXIN_SET_T30
; all need to be called before this!!!
;

DR_FAXIN_CONNECT			enum	FaxInFunction
;
; PASS:		bl = BB_TRUE if phone is off hook already (ATA has been done)
; 		bh = BB_TRUE if the +FCON has already been parsed and phone is
; 			off hook
; RETURN:	nothing
; DESTROYED:	nothing
;
; after the ring count >= the number of rings that the receive app wants
; to wait for, it call this.  the phone is answered and a connection is
; attempted.  pass flags in to tell if the ATA needs to be sent, and if the
; first line of data has been parsed (+FCON, CONNECT)
;

DR_FAXIN_GET_DOCUMENT			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; when a fax document is ready to be received the driver tells the app to
; get ready for it (open a file).  after the app is ready to receive the
; document it calls this.  The driver will then start prompting the app to
; create the pages of the document.  This must be called after a
; FRFN_OPEN_NEW_DOCUMENT notification has been sent. [time critical]
;

DR_FAXIN_GET_PAGE			enum	FaxInFunction
;
; PASS:		ds = dgroup
; 		bp:cx = lineBuffer offset to use with first line
;		bp:ax = FAXIN_AUX_BUFFER_SIZE byte buffer
; 		bx:dx is fptr to callback routine that adds scanlines to page
; RETURN:	nothing
; DESTROYED:	nothing
;
; starts the transmission of a new page.  pass the buffer to start filling
; and a fprt of a routine to be called when the buffer has a complete scanline
; in it.  this routine will be passed the length of the buffer and must
; return a buffer to put the next scanline into (can be the same buffer)
; This must be called after a FRFN_START_NEW_PAGE notification has been sent.
; [time critical]
;

DR_FAXIN_USER_STOP			enum	FaxInFunction
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
;
; at any time after DR_FAXIN_INIT_DEVICE this can be sent, it will stop any
; fax receive in progress.  a FRFN_RECEIVER_STOPPED notificaton will be
; sent after stopping has been completed.
;

DR_FAXIN_CHECK_FOR_MODEM		enum	FaxInFunction
;
; PASS:		ax	- SerialPortNum of port to check
; RETURN:	carry	- clear if a viable faxmodem is there
;			- set if no modem/not a faxmodem
; DESTROYED:	nothing
;
; This is to be used before DR_FAXIN_REGISTER to determine if a viable faxmodem
; of the appropriate class is attached to the passed serial port number.
;

DR_FAXIN_POLL_DOCUMENT			enum	FaxInFunction
;
; PASS:	
;	cx:dx	= phone number to dial
;	bx	= max timeout value in secs (modem may give up early)
;	ah	= FaxPollDialFlags
;	al	= length of number to dial
;
; RETURN:	carry set if not ready to place call (ec version dies)
;		or if polling not supported
;		
; DESTROYED:	nothing
;
; This is what you call if you want to poll a remote machine for a document.
; If the remote does not answer or does not have a document ready to send
; then an error will occur.
;
; DR_FAXIN_INIT_DEVICE must be called before this. (which implies a bunch
; more stuff that has to be called before INIT)
;
; If a connection is made then everything should look exactly like calling
; DR_FAXIN_CONNECT.
;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;--------------------------------
;	FaxReceiveStatusType
;--------------------------------

;
; NOTE:	callers probably use this as table indexes and rely on the order and
;	content of this	enumerated type.  [So you must change them too if you 
;	want stuff to work]
;
FaxReceiveStatusType		etype	word, 0, 2

FRST_USE_VALUE_FROM_STATE_TABLE		enum	FaxReceiveStatusType
;
;	Never returned to caller, used to tell the driver to lookup the
;	status value of the current state and send that to the caller.
;
FRST_NO_CHANGE				enum	FaxReceiveStatusType, 1
;
;	Never returned to caller, tells the driver to not send a new
;	status value for this state.
;

FRST_INITIALIZING_MODEM			enum	FaxReceiveStatusType, 2
;
;	Initializing the modem.
;
FRST_WAITING_FOR_CALL			enum	FaxReceiveStatusType
;
;	Modem is ready to receive, all we need now is for the phone to ring.
;
FRST_PHONE_IS_RINGING			enum	FaxReceiveStatusType
;
;	Well, the phone is ringing.
;
FRST_ANSWERING_PHONE			enum	FaxReceiveStatusType
;
;	We are answering the phone.
;
FRST_CONNECTING				enum	FaxReceiveStatusType
;
;	The phone has been answered and we are connecting to the remote fax.
;
FRST_REQUESTING_FAX			enum	FaxReceiveStatusType
;
;	beginning new fax file.
;
FRST_REQUESTING_PAGE			enum	FaxReceiveStatusType
;
;	beginning new page.
;
FRST_RECEIVING_PAGE			enum	FaxReceiveStatusType
;
;	receiving page data.
;
FRST_PAGE_RECEIVED			enum	FaxReceiveStatusType
;
;	done receving page, doing post page stuff.
;
FRST_DISCONNECTING			enum	FaxReceiveStatusType
;
;	no more pages or faxes, or an error occured, so disconnecting.
;
FRST_ABORTING_RECEIVE			enum	FaxReceiveStatusType
;
;	for some reason we are aborting the receive... (user cancel)
;
FRST_DONE_RECEIVING			enum	FaxReceiveStatusType
;
;	finished with receive cycle
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; a status message does not require any action by the calling geode,
; but the notifications usually do
;
FaxReceiveFaxNotification		etype	word, 0, 2
FRFN_WAITING_FOR_CALL			enum	FaxReceiveFaxNotification
;
;	The modem is ready, and we are waiting for a call.  The calling geode
;	may want to close the active connection if it has a passive one.
;
FRFN_PHONE_IS_RINGING			enum	FaxReceiveFaxNotification
;
;	A ring has occured!  The ring count is passed.  The calling geode
;	must call DR_FAXIN_CONNECT to tell the driver to begin a connection.
;
FRFN_GET_CONNECTION_PARAMATERS		enum	FaxReceiveFaxNotification
;
;	A new set of connection paramaters has been received.  They may
;	not actually be any different than the old ones, but then again
;	they might.  This will be sent after a connection has been made
;	and may be sent after each page has been requested. (but before
;	any image data arrives).  Should respond by calling DR_FAXIN_GET_T30.
;
FRFN_GET_CALLER_ID			enum	FaxReceiveFaxNotification
;
;	A new caller id has been received.  It may not actually be any
;	different than the old one, but then again it might.  This will
;	be sent after a connection has been made if the caller sends it,
;	and may be sent after a page has been requested (but before
;	any image data arrives) Should respond by calling
;	DR_FAXIN_GET_CALLER_ID.
;
FRFN_OPEN_NEW_DOCUMENT			enum	FaxReceiveFaxNotification
;
;	A new document is ready to be received.  The calling geode should
;	create a new file or whatever it needs to do.  When it is ready
;	it must call DR_FAXIN_GET_DOCUMENT.
;
FRFN_CLOSE_DOCUMENT			enum	FaxReceiveFaxNotification
;
;	A document has been finished.
;
FRFN_START_NEW_PAGE			enum	FaxReceiveFaxNotification
;
;	A new page is ready to be received.  The calling geode should
;	allocate space for it.  When it is ready it must call DR_FAXIN_GET_PAGE
;
FRFN_END_GOOD_PAGE			enum	FaxReceiveFaxNotification
;
;	The current page has been finished, and no errors were detected.
;
FRFN_END_BAD_PAGE			enum	FaxReceiveFaxNotification
;
;	The current page has been finished, and errors were detected.
;
FRFN_TIMEOUT				enum	FaxReceiveFaxNotification
;
;	The state machine has timed out.  The calling geode must call
;	DR_FAXIN_HANDLE_TIMEOUT.
;
FRFN_RECEIVER_STOPPED			enum	FaxReceiveFaxNotification
;
;	The driver has stopped for some reason, a FaxReceiveDoneErrorCode
;	is sent.
;
FRFN_DOCUMENT_COMPLETE			enum	FaxReceiveFaxNotification
;
;	The driver has received the last page in the current document,
;	if the page is good then the document is complete.  if the page
; 	is bad the the last page will get resent.  (currently pages are
;	always good).
;
FRFN_BEGINNING_TO_POLL			enum	FaxReceiveFaxNotification
;
;	The driver has detected that the remote has a document to poll
;	and will attempt to fetch it.  (If the session fails at least
;	you know that there was something to get.)
;

;
; this struct is passed on the stack by the status message
;
FaxReceiveStatusInfo	struct
	FRSI_status		FaxReceiveStatusType	FRST_NONE
	FRSI_state		word	0
	FRSI_currentPage	word	0
	FRSI_extraCode		word	0
FaxReceiveStatusInfo	ends

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

if PASTA
;--------------------------------
;	T30Response
;--------------------------------

;
; all the following etypes are for the parts of the T30Response struct
;

;
; vertical resolution
;
FaxVerticalRes			etype byte, 0, 1
	FVR_NORMAL		enum	FaxVerticalRes
	FVR_FINE		enum	FaxVerticalRes

;
; Data transfer speed
;
FaxBitsPerSec			etype byte, 0, 1
	FBPS_2400		enum	FaxBitsPerSec
	FBPS_4800		enum	FaxBitsPerSec
	FBPS_7200		enum	FaxBitsPerSec
	FBPS_9600		enum	FaxBitsPerSec
	FBPS_12000		enum	FaxBitsPerSec
	FBPS_14400		enum	FaxBitsPerSec

;
;Page width in millimeters.
;
FaxPageWidth			etype byte, 0
	FPW_215			enum FaxPageWidth
	FPW_255			enum FaxPageWidth
	FPW_303			enum FaxPageWidth
	FPW_151			enum FaxPageWidth
	FPW_107			enum FaxPageWidth

;
; Page length is in millimeters.
;
FaxPageLength			etype byte, 0
	FPL_297			enum FaxPageLength
	FPL_364			enum FaxPageLength
	FPL_UNLIMITED		enum FaxPageLength

;
; compression formats
;
FaxDataCompressionFormat	etype byte, 0
	FDCF_1D_MODIFIED_HUFFMAN	enum FaxDataCompressionFormat
	FDCF_2D_MODIFIED_READ		enum FaxDataCompressionFormat
	FDCF_2D_UNCOMPRESSED		enum FaxDataCompressionFormat
	FDCF_2D_MODIFIED_MODIFIED_READ	enum FaxDataCompressionFormat

;
; error correction
;
FaxErrorCorrection		etype byte, 0
	FEC_DISABLE_ECM		enum FaxErrorCorrection
	FEC_ENABLE_ECM64	enum FaxErrorCorrection
	FEC_ENABLE_ECM256	enum FaxErrorCorrection

;
; BinaryFileTransfer stuff
;
FaxBinaryFileTransfer		etype byte, 0
	FBFT_DISABLE_XFER	enum FaxBinaryFileTransfer
	FBFT_ENABLE_XFER	enum FaxBinaryFileTransfer

;
; minimum time for scanlines, first number is for normal, second is for fine
; (times are in ms)
;
FaxScanTimePerLine		etype byte, 0
	FSTPL_ZERO		enum FaxScanTimePerLine
	FSTPL_FIVE		enum FaxScanTimePerLine
	FSTPL_TEN_FIVE		enum FaxScanTimePerLine
	FSTPL_TEN		enum FaxScanTimePerLine
	FSTPL_TWENTY_TEN	enum FaxScanTimePerLine
	FSTPL_TWENTY		enum FaxScanTimePerLine
	FSTPL_FORTY_TWENTY	enum FaxScanTimePerLine
	FSTPL_FORTY		enum FaxScanTimePerLine
	
;
; This structure contains info about a given fax device's capabilities.
; It is based on the Class 2 spec
;
T30Response		struct
	T30R_VR		FaxVerticalRes		; vertical resolution (0-1)
	T30R_BR		FaxBitsPerSec		; bit rate (0-5)
	T30R_WD		FaxPageWidth		; page width (0-4)
	T30R_LN		FaxPageLength		; page length (0-2)
	T30R_DF		FaxDataCompressionFormat; data compression fmt (0-3)
	T30R_EC		FaxErrorCorrection	; error correction (0-2)
	T30R_BF		FaxBinaryFileTransfer	; binary file trans (0-1)
	T30R_ST		FaxScanTimePerLine	; scan time/line (0-7)
T30Response		ends

;
; this record can be used to show which entries in the T30Response are vaild
; (so you can leave defaults alone when setting the connect paramaters)
;
T30ResponseFlags	record
	T30RF_ST:1	; scan time
	T30RF_BF:1	; binary file transfer
	T30RF_EC:1	; error correction
	T30RF_DF:1	; data compression format
	T30RF_LN:1	; page length
	T30RF_WD:1	; page width
	T30RF_BR:1	; bit rate
	T30RF_VR:1	; vertical resolution
T30ResponseFlags	end

.assert (offset T30RF_VR) eq (offset T30R_VR)
.assert (offset T30RF_BR) eq (offset T30R_BR)
.assert (offset T30RF_WD) eq (offset T30R_WD)
.assert (offset T30RF_LN) eq (offset T30R_LN)
.assert (offset T30RF_DF) eq (offset T30R_DF)
.assert (offset T30RF_EC) eq (offset T30R_EC)
.assert (offset T30RF_BF) eq (offset T30R_BF)
.assert (offset T30RF_ST) eq (offset T30R_ST)


;
; the T30_DO_NOT_CARE_VALUE can be used in a T30Response structure whenever
; the corasponding T30ResponseFlags are clear.
;
T30_DO_NOT_CARE_VALUE	equ	0xFF

endif ; PASTA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;
; reasons why receive is done:

FaxReceiveDoneErrorCode		etype	word, 0, 2

FRDEC_NONE				enum	FaxReceiveDoneErrorCode
;
;	No error occurred -- successful reception.
;
FRDEC_REMOTE_NOT_FAX_DEVICE		enum	FaxReceiveDoneErrorCode
;
;	The thing that called us doesn't appear to be a fax device.
;
FRDEC_RECEIVED_ERROR_RESPONSE		enum	FaxReceiveDoneErrorCode
;
;	The driver got some kind of known error response from the device,
;	during transmission.
;
FRDEC_RECEIVED_UNEXPECTED_RESPONSE	enum	FaxReceiveDoneErrorCode
;
;	The driver got some kind of unexpected response during transmission.
;
FRDEC_TIMEOUT				enum	FaxReceiveDoneErrorCode
;
;	The driver got some kind of timeout when dealing with its fax device.
;
FRDEC_USER_STOP				enum	FaxReceiveDoneErrorCode
;
;	The user stopped the receiving process explicitly.
;
FRDEC_CALL_CANCLED			enum	FaxReceiveDoneErrorCode
;
;	AT+FK or <CAN> cancled the call
;
FRDEC_INCOMPATIBLE_MODEM			enum	FaxReceiveDoneErrorCode
;
;	We discover that the modem that we are supposed to use for
;	sending is not in fact compatible with us.  For example, if the
;	user tries to use a Class 1-only modem with the Class 2 driver,
;	they should get this message back.
;
FRDEC_MODEM_UNABLE_TO_RECEIVE_FAXES	enum	FaxReceiveDoneErrorCode
;
;	A send only modem can't receive a fax, and this loser user is using one
;
FRDEC_RECEIVED_FHNG			enum	FaxReceiveDoneErrorCode
;
;	The fax session got hung.  (some fhng values are returned as other
;	status values, like FRDEC_REMOTE_NOT_FAX_DEVICE for fhng 2.)
;
FRDEC_ERROR_WITH_USER_INIT_STRING	enum	FaxReceiveDoneErrorCode
;
;	The users init string did not return "OK"
;
FRDEC_UNABLE_TO_INIT_MODEM		enum	FaxReceiveDoneErrorCode
;
;	A timeout occured while initing the modem, or something not covered
;	in the special case errors occured. "check settings and connection"
;
FRDEC_MODEM_UNABLE_TO_POLL		enum	FaxReceiveDoneErrorCode
;
;	Polling: The modem retured an error when we tried to poll.
;
FRDEC_REMOTE_HAS_NO_DOCUMENT_TO_POLL	enum	FaxReceiveDoneErrorCode
;
;	Polling: We connected to remote but they did not have a document 
;	for us to poll.
;
FRDEC_RECEIVED_BUSY			enum	FaxReceiveDoneErrorCode
;
;	Polling: Tried to call, but no carrier detected
;
FRDEC_RECEIVED_NODIALTONE		enum	FaxReceiveDoneErrorCode
;
;	Polling: Tried to call, but no dialtone detected
;


FAXRECEIVE_ERROR_LOG_OPEN				enum	FatalErrors
FAXRECEIVE_ERROR_LOG_CLOSE				enum	FatalErrors
FAXRECEIVE_ERROR_LOG_WRITE				enum	FatalErrors
CLASS2_RECEIVE_ERROR_INVALID_DRIVER_FUNCTION		enum	FatalErrors
CLASS1_RECEIVE_ERROR_INVALID_DRIVER_FUNCTION		enum	FatalErrors

FAXRECEIVE_WARNING_NO_PARSER				enum	Warnings
FAXRECEIVE_WARNING_GOT_2_REGISTERS			enum	Warnings

FAXIN_AUX_BUFFER_SIZE		equ	256		; bytes

FaxPollDialFlags		record
	:6
	FPDF_USE_TONE_DIAL:1
	FPDF_USE_PULSE_DIAL:1
FaxPollDialFlags		end

BeginFaxConnectionType	etype	word, 0, 2
	BFCT_POLL_NUMBER	enum	BeginFaxConnectionType

BeginFaxConnectionBlockHeader	struct
	BFCBH_connectionType	BeginFaxConnectionType
BeginFaxConnectionBlockHeader	ends

BeginFaxConnectionPolling	struct
	BFCP_header	BeginFaxConnectionBlockHeader
	BFCP_contID	dword			; contact ID
	BFCP_number	char FAX_PHONE_NUMBER_SIZE dup (?)	; NOT DBCS!
BeginFaxConnectionPolling	ends
	

;EndDriver	faxin


