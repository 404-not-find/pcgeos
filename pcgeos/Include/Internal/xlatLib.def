COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC/GEOS
MODULE:		Translation Libraries
FILE:		xlatLib.def

AUTHOR:		Jim DeFrisco, 12 February 1991

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Jim	02/91		Initial version
		Jenny	11/91		Added entry points and documentation

DESCRIPTION:
	This file contains the definition of the interface between
	a geode and a translation library.
		
	$Id: xlatLib.def,v 1.1 97/04/04 14:14:20 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef		__XLATLIB

StartLibrary	xlatlib

UseLib		impex.def			; Impex library definitions


;----------------------------------------------------------------------------
;		Translation library protocol
;----------------------------------------------------------------------------

; All translation libraries will need to have the following line in their
; local.mk file:
;	PROTOCONST	= XLATLIB
;
XLATLIB_PROTO_MAJOR	equ	4
XLATLIB_PROTO_MINOR	equ	0


;----------------------------------------------------------------------------
;               Structures and Constants
;----------------------------------------------------------------------------

; Be certain to update the file mainStrings.ui in Impex/Main if any
; errors are added or removed. Add common error strings ONLY for errors
; that could occur in multiple translation libraries
;
TransError						etype	word, 0, 1

TE_NO_ERROR						enum	TransError
	; No error

TE_ERROR						enum	TransError
	; General error

TE_INVALID_FORMAT					enum	TransError
	; Format is invalid

TE_IMPORT_NOT_SUPPORTED					enum	TransError
	; Format is not supported for export

TE_EXPORT_NOT_SUPPORTED					enum	TransError
	; Format is not supported for export

TE_IMPORT_ERROR						enum	TransError
	; General error during import

TE_EXPORT_ERROR	 					enum	TransError
	; General error during export

TE_FILE_ERROR						enum	TransError
	; Generic file error

TE_DISK_FULL						enum	TransError
	; The disk is full

TE_FILE_OPEN						enum	TransError
	; Error in opening a file

TE_FILE_READ						enum	TransError
	; Error in reading from a file

TE_FILE_WRITE						enum	TransError
	; Error in writing to a file

TE_FILE_TOO_LARGE					enum	TransError
	; File is too large to process

TE_OUT_OF_MEMORY					enum	TransError
	; Insufficient memory to complete import/export

TE_METAFILE_CREATION_ERROR				enum	TransError
	; Error in creating the metafile

TE_EXPORT_FILE_EMPTY					enum	TransError
	; Metafile is empty

TE_EXPORT_INVALID_CLIPBOARD_FORMAT			enum	TransError
	; Application passed bogus, or unsupported clipboard
	; format to the translation library

TE_CUSTOM						enum	TransError
	; Custom error (requires passing of memory block that holds message)

TE_NOTHING_TO_EXPORT					enum 	TransError  
	; Error exporting an empty document or unselected object(s)

; An ImportFrame is passed to a translation library's TransImport routine.
;
ImportFrame			struct
    IF_formatNumber		word		; number of format to be used
    IF_importOptions		hptr		; block handle of import
						;  options for translation
						;  library (= 0 for default)
    IF_sourceFile		hptr		; handle of source file
    IF_sourceFileName		FileLongName	; source file name
    IF_sourcePathName		PathName	; source file path
    IF_sourcePathDisk		hptr		; disk handle for source path
    IF_transferVMFile		word		; handle of VM file in which
						; to allocate transfer format
ImportFrame			ends

; An ExportFrame is passed to a translation library's TransExport routine.
;
ExportFrame			struct
    EF_formatNumber		word		; number of format to be used
    EF_exportOptions		hptr		; block handle of export
						;  options for translation
						;  library (= 0 for default)
    EF_outputFile		hptr		; handle of output file
    EF_outputFileName		FileLongName	; output file name
    EF_outputPathName		PathName	; output file path
    EF_outputPathDisk		hptr		; disk handle for output path
    EF_transferVMFile		word		; handle of VM file containing
						;  transfer format
    EF_transferVMChain		dword		;VM chain containing transfer
    EF_manufacturerID		ManufacturerID	; word MANUFACTURER_ID_GEOWORKS
    EF_clipboardFormat		ClipboardItemFormat
						; word: can be:
						;	CIF_TEXT
						;	CIF_GRAPHICS_STRING
						;	CIF_BITMAP
						;	 and ???
						;  format to export
ExportFrame			ends


; If TransGetFormat cannot determine the file format, it returns
; NO_IDEA_FORMAT to Impex.
;
NO_IDEA_FORMAT			equ	-1

; TLH_VALID is placed in a TranslationLibraryHeader to show that
; the header is really that of a translation library.
;
TLH_VALID			equ	"OK"

; Specific information for each format
;
ImpexFormatInfo			record
    IFI_IMPORT_CAPABLE:1			; format can be imported
    IFI_EXPORT_CAPABLE:1			; format can be exported
    :14
ImpexFormatInfo			end


;-----------------------------------------------------------------------------
;		Structures found in a translation library
;-----------------------------------------------------------------------------

; To create a translation library, see the macros in xlatlib.def:
;	DefTransLib, DefTransFormat, EndTransLib
;
; Note that the first thing in the ResidentCode resource for a translation
; library *MUST* be its TranslationLibraryHeader. This means you
; must include the file containing this header before including any
; other files that put things in the ResidentCode resource.

ImpexFormatGeodeInfo		struct
	IFGI_headerString	nptr.char	; name of format
	IFGI_fileSpecString	nptr.char	; file specification for format
	IFGI_importUI		optr		; OD of UI to display on import
	IFGI_exportUI		optr		; OD of UI to display on export
	IFGI_formatInfo		ImpexFormatInfo
ImpexFormatGeodeInfo		ends

TLHeaderMarker	type 2 dup (char)

TranslationLibraryHeader        struct
	TLH_validHeaderMarker	TLHeaderMarker	; validity guarantee
	TLH_stringsResource	hptr		; resource holding the
        					; ImpexFormatGeodeInfo structs
	TLH_numberOfFormats	word		; number of formats supported
	TLH_dataClass		ImpexDataClasses ;data classes supported
	TLH_validHeaderMarker2	TLHeaderMarker	; validity guarantee repeated
TranslationLibraryHeader        ends

TranslationLMemBlockHeader	struct
	TLMBH_lMemBlockHeader	LMemBlockHeader <>
	TLMBH_stringHandleTable	label	word
TranslationLMemBlockHeader	ends

;----------------------------------------------------------------------------
;               Translation Library Routines
;----------------------------------------------------------------------------

; A translation library routine is referred to by an enumeration of
; TransRoutine by the Impex library. For consistency, the global declarations
; for the routines are made below for all translation libraries.

TransRoutine						etype	word, 0, 1

TR_GET_IMPORT_UI					enum    TransRoutine
global	TransGetImportUI:far
;
; Get the generic UI tree to be displayed to the user when importing.
; This tree will be duplicated the caller, and the duplicated block
; handle will be passed when calling TransGetImportOptions.
;
; The ClassStruct returned here will usually be NULL. For those translation
; libraries that need to alter the options made available to the user based
; upon selections made by the user in the Import dialog box, return a pointer
; to a GenControl sub-class, and intercept desired ImportExportClass messages.
;
; Pass:		CX	= Format number (TransFormat enumeration)
;
; Return:	^lCX:DX	= Root of UI tree (CX = 0 if no UI)
;		BX:AX	= ClassStruct (sub-class of GenControlClass)
;			  (may be null)
;
; May Destroy:	Nothing
;

TR_GET_EXPORT_UI					enum    TransRoutine
global	TransGetExportUI:far
;
; Get the generic UI tree to be displayed to the user when exporting.
; This tree will be duplicated the caller, and the duplicated block
; handle will be passed when calling TransGetExportOptions.
;
; The ClassStruct returned here will usually be NULL. For those translation
; libraries that need to alter the options made available to the user based
; upon selections made by the user in the Export dialog box, return a pointer
; to a GenControl sub-class, and intercept desired ImportExportClass messages.
;
; Pass:		CX	= Format number (TransFormat enumeration)
;
; Return:	^lCX:DX	= Root of UI tree (CX = 0 if no UI)
;		BX:AX	= ClassStruct (sub-class of GenControlClass)
;			  (may be null)
;
; May Destroy:	Nothing
;

TR_INIT_IMPORT_UI					enum    TransRoutine
global	TransInitImportUI:far
;
; Initialize the UI tree that was duplicated based upon the returned
; value of TR_GET_IMPORT_UI. If NULL was returned then, this routine
; will not be called.
;
; Pass:		^lCX:DX	= Root of duplicated UI tree
;
; Return:	Nothing
;
; May Destroy:	AX, BX, CX, DX
;

TR_INIT_EXPORT_UI					enum    TransRoutine
global	TransInitExportUI:far
;
; Initialize the UI tree that was duplicated based upon the returned
; value of TR_GET_EXPORT_UI. If NULL was returned then, this routine
; will not be called.
;
; Pass:		^lCX:DX	= Root of duplicated UI tree
;
; Return:	Nothing
;
; May Destroy:	AX, BX, CX, DX
;

TR_GET_IMPORT_OPTIONS					enum	TransRoutine
global	TransGetImportOptions:far
;
; Evaluate the UI displayed to the user for import, and return a handle to
; a block holding the selected options. The format for this block is
; completely up to the translation library
;
; Pass:		CX	= Format number (TransFormat enumeration)
;		DX	= Handle of duplicated options UI (= 0 if none)
;
; Return:	DX	= Handle of options block (= 0 if none)
;			  (will later be passed to TransImport
;			  in IF_importOptions)
;
; May Destroy:	AX, BX
;

TR_GET_EXPORT_OPTIONS					enum	TransRoutine
global	TransGetExportOptions:far
;
; Evaluate the UI displayed to the user for export, and return a handle to
; a block holding the selected options. The format for this block is
; completely up to the translation library
;
; Pass:		CX	= Format number (TransFormat enumeration)
;		DX	= Handle of duplicated options UI (= 0 if none)
;
; Return:	DX	= Handle of options block (= 0 if none)
;			  (will later be passed to TransExport
;			  in EF_exportOptions)
;
; May Destroy:	AX, BX
;

TR_IMPORT						enum	TransRoutine
global	TransImport:far
;
; Import the passed file by converting it to the native GEOS transfer format
;
; Pass:		DS:SI	= ImportFrame
;
; Returns:	DX:CX	= VM Chain containing transfer format
;		AX	= TE_NO_ERROR or  TransError
;		BX	= ClipboardItemFormat  OR Handle of custom 
;			   error string if AX = TE_CUSTOM
;
; May Destroy:	Nothing
;

TR_EXPORT						enum	TransRoutine
global	TransExport:far
;
; Export the passed transfer format by converting it to the requested
; format.
;
; Pass:		DS:SI	= ExportFrame
;
; Returns: 	AX	= TE_NO_ERROR
;			- or -
;		AX	= TransError
;		BX	= Handle of custom error string if AX = TE_CUSTOM
;
; May Destroy:	Nothing
;

TR_GET_FORMAT						enum	TransRoutine
global	TransGetFormat:far
;
; Determine if specified file is of a format supported by the library
;
; Pass:		SI	= File handle (positioned at beginning of file)
;			
; Returns: 	AX	= TransError (TE_NO_ERROR = success)
;		CX	= Format number, or NO_IDEA_FORMAT if unrecognized
;
; May Destroy:	BX, DX
;



;----------------------------------------------------------------------------
;               Translation Library Macros
;----------------------------------------------------------------------------

TransFormat	etype	word, 0, 1		; the format enumeration


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DefTransLib
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Define a translation library

PASS:		Nothing

PSEUDO CODE/STRATEGY:
		* Initialize the format count to zero
		* Declare the segment "FormatStrings" which will hold all
		  the strings and other Impex-needed information

		This macro *must* be used first, followed by one or more
		calls to DefTransFormat, followed by a call to EndTransLib

KNOWN BUGS/SIDE EFFECTS/IDEAS:

 Note that the first thing in the ResidentCode resource for a
 translation library after the library entry point  *MUST*  be its
 TranslationLibraryHeader. This means you must include the file where
 you use the DefTransLib, DefTransFormat, and EndTransLib macros
 before you include any other files that put things in the
 ResidentCode resource.

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Don	11/13/91	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

DefTransLib	macro	arg1

ifnb <arg1>
	ErrMessage	"Error: Arguments were passed to DefTransLib macro."
else


	; A little initialization work
	;
	FORMAT_COUNT	= 0			; no formats

	; Declare the resource, etc.
	;
	FormatStrings	segment lmem LMEM_TYPE_GENERAL, mask LMF_IN_RESOURCE
	TranslationLMemBlockHeader <{}>
endif

endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DefTransFormat
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Define another format supported by this translation library

PASS:		const	 = The name of the TransFormat constant for the format.
		format	 = The name of the format (a string)
		file	 = The file search string (e.g. "*.WK1")
		importUI = Optr of generic tree displaying import options
		exportUI = Optr of generic tree displaying export options
		info 	 = ImpexFormatInfo

		Note:	importUI & exportUI may each be zero

PSEUDO CODE/STRATEGY:
		* Enumerate the constant
		* Allocate a chunk for both strings
		* Write out the ImpexFormatGeodeInfo

KNOWN BUGS/SIDE EFFECTS/IDEAS:
		We may end up with many strings all holding the same
		file specification. Oh well.

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Don	11/13/91	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

DefTransFormat	macro	const, format, file, importUI, exportUI, info

	; Add the constant to the enumerated type
	;
	const		enum	TransFormat

	; Define the chunk holding the string
	;
SBCS <	const&String		chunk.char format, 0			>
DBCS <	const&String		chunk.wchar format, 0			>

	; Define the chunk holding the file specification
	;
SBCS <	const&File		chunk.char file, 0			>
DBCS <	const&File		chunk.wchar file, 0			>

	; Now define the ImpexFormatGeodeInfo
	;
SBCS <	nptr.char		const&String				>
DBCS <	nptr.wchar		const&String				>
SBCS <	nptr.char		const&File				>
DBCS <	nptr.wchar		const&File				>
	optr			importUI
	optr			exportUI
	word			info
	FORMAT_COUNT	= FORMAT_COUNT+1	; update counter
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		EndTransLib
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	End a translation library declaration

PASS:		classes	= The one or more ImpexDataClasses this translation
			  library supports

PSEUDO CODE/STRATEGY:
		* End the FormatStrings segment
		* Define the TranslationLibraryHeader

KNOWN BUGS/SIDE EFFECTS/IDEAS:
		Impex depends on the fact that this structure is found
		first in the ResidentCode resource.

REVISION HISTORY:
		Name	Date		Description
		----	----		-----------
		Don	11/13/91	Initial version
		Jenny	12/91		Added TLH_VALID field to lib header

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

EndTransLib	macro	classes

ifnb <classes>

	; End the strings resource
	;
	FormatStrings	ends

	; Clean up with the TranslationLibraryHeader
	;
	ResidentCode	segment	resource
	TranslationLibraryHeader \
		<TLH_VALID, FormatStrings, FORMAT_COUNT, classes, TLH_VALID>
	ResidentCode	ends
else
	ErrMessage	"Error: no class passed to EndTransLib macro."
endif

endm

EndLibrary	xlatlib
