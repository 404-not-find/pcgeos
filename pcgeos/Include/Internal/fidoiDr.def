COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Legos
MODULE:		Fido Library
FILE:		fidoIDr.def

AUTHOR:		Paul DuBois, Nov 29, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	11/29/94   	Initial revision


DESCRIPTION:
	This contains all the defines necessary to use and/or create
	a fido input driver.
		
	$Revision:   1.7  $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef __FIDOIDR

include driver.def

StartDriver	fidoi

; grok -m1004 for explanation of this
FIDOI_PROTO_MAJOR	equ	DRIVER_PROTO_MAJOR+1
FIDOI_PROTO_MINOR	equ	DRIVER_PROTO_MINOR+0

;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;%		Records, structs, enums
;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

ModuleType	etype	word

MT_ASCII	enum	ModuleType	;unimpl
MT_VM_FILE	enum	ModuleType
MT_REMOTE	enum	ModuleType	;unimpl

FidoiDriverInfoStruct	struct
    FDIS_common	DriverInfoStruct	<>
    FDIS_type	ModuleType
    FDIS_name	lptr.TCHAR
FidoiDriverInfoStruct	ends

FidoInDriverFunction	etype word, DriverFunction, 2
;	These are the first four functions that must be supported
; DR_INIT		0
; DR_EXIT		2
; DR_SUSPEND		4
; DR_UNSUSPEND		6

; Generally, all the following driver functions will trash ax, bx, and di
; unless they explicitly return a value.

DR_FIDOI_OPEN			enum	FidoInDriverFunction
; Description:	Open a module, enabling further operations on it
; Pass:		ds:si	- asciiz string
; Return:	carry	- set on failure
;   		ax	- token to pass to other routines
; Destroy:	bx, di

DR_FIDOI_CLOSE			enum	FidoInDriverFunction
; Description:	Close a module, once one is done operating on it
; Pass:		cx	- token received from FIDOI_OPEN
; Return:	carry	- set on failure
; Destroy:	ax, bx, di

DR_FIDOI_GET_HEADER		enum	FidoInDriverFunction
; Description:	Extract the module header
; Pass:		cx	- token received from FIDOI_OPEN
; Return:	bx	- MemHandle with header page
;   		carry	- set on failure (and bx trashed)
; Destroy:	ax, di

DR_FIDOI_GET_PAGE		enum	FidoInDriverFunction
; Description:	Extract a page from the module
; Pass:		cx	- token received from FIDOI_OPEN
;   		dx	- page number
; Return:	carry	- set on failure
;   		bx	- MemHandle with page in it
; Destroy:	ax, di

DR_FIDOI_GET_COMPLEX_DATA	enum	FidoInDriverFunction
; Description:	Extract a VMTree of complex data
;
; Pass:		bx	- destination VM file
;		cx	- token received from FIDOI_OPEN
;   		dx	- data element
; Return:	carry	- set on failure
;   		^vbx:ax	- VMTree (bx - same file)
;   		cx:dx	- ClipboardItemFormatID
; Destroy:	di

EndDriver	fidoi

