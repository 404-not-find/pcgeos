COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC/GEOS
MODULE:		Network Driver
FILE:		Include/Internal/netDr.def

REVISION HISTORY
	Name	Date		Description
	----	----		-----------
	Eric	2/92		Initial version
	Eric	7/92		Ported to 2.0

ROUTINES
	Name			Description
	----			-----------

DESCRIPTION

	$Id: netDr.def,v 1.1 97/04/04 14:15:49 newdeal Exp $
-------------------------------------------------------------------------------@

SetDef	__NETDRIVER

include	driver.def

StartDriver net

include	driver.def
include Internal/serialDr.def	; for SerialPortNum and SerialBaud
include Internal/socketID.def	; for SerialPortNum and SerialBaud

NET_PROTO_MAJOR		equ DRIVER_PROTO_MAJOR+1
NET_PROTO_MINOR		equ DRIVER_PROTO_MINOR+1

NetDriverFunction	etype	word, DriverFunction, 2
				;start the NetDriverFunction enum wherever
				;the DriverFunction leaves off.

;*************************************************************************
;
; NOTE:  All NetDriver functions are allowed to destroy ES and DI
;
; Furthermore, all netdriver functions will be passed in SS:BP the domain
; string, which specifies information about the path that the user is
; trying to use  e.g. "/BERK_ENGR_NET:/GOBEARS/BIGDRIVE"
;
; DO NOT USE SS:BP FOR ANY OTHER PURPOSE UNLESS THE ROUTINE IS DOMAIN-
; INDEPENDENT !
;
; Also, al - subfunction index, for those functions with subfunctions
; (e.g. NetPrint, NetMessaging)
;
;*************************************************************************


;NOTE: THE FOLLOWING FOUR ENTRY POINTS ARE INHERITED FROM DriverFunction:
;
;DR_INIT 		enum DriverFunction	;Initialize driver
;	PASS:	cx	= di passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;		dx	= bp passed to GeodeLoad. Garbage if loaded via
;			  GeodeUseDriver
;	RETURN:	carry set if driver initialization failed. Driver will be
;			unloaded by the system.
;		carry clear if initialization successful.
;
;	DESTROYS:	bp, ds, es, ax, di, si, cx, dx
;
;
;DR_EXIT 		enum DriverFunction	;Exit driver
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	ax, bx, cx, dx, si, di, ds, es
;
;	NOTES:	If the driver has GA_SYSTEM set, the handler for this function
;		*must* be in fixed memory and may not use anything in movable
;		memory.
;
;DR_SUSPEND		enum DriverFunction
;	SYNOPSIS:	Prepare the device for going into stasis while PC/GEOS
;			is task-switched out. Typical actions include disabling
;			interrupts or returning to text-display mode.
;
;	PASS:	cx:dx	= buffer in which to place reason for refusal, if
;			  suspension refused (DRIVER_SUSPEND_ERROR_BUFFER_SIZE
;			  bytes long)
;	RETURN:	carry set if suspension refused:
;			cx:dx	= buffer filled with null-terminated reason,
;				  standard PC/GEOS character set.
;		carry clear if suspension approved
;	DESTROYS:	ax, di
;
;
;DR_UNSUSPEND		enum DriverFunction
;	SYNOPSIS:	Reconnect to the device when PC/GEOS is task-switched
;			back in.
;
;	PASS:	nothing
;	RETURN:	nothing
;	DESTROYS:	ax, di
;

;Functions specific to this driver type start here. Add new definitions
;to the end of this list.

;------------------------------------------------------------------------------
;			Connection Related Calls
;------------------------------------------------------------------------------

DR_NET_USER_FUNCTION		enum NetDriverFunction

NetUserFunction	etype	byte, 0, 2

    NUF_GET_LOGIN_NAME	enum NetUserFunction
    ;Return the login name of the current user
    ;PASS:  ds:si - fptr to buffer to fill in name
    ;RETURN: buffer filled in
    ;

    NUF_GET_FULL_NAME enum NetUserFunction
    ;Return the full name of a user
    ;
    ;PASS:	ds:si - user's login name
    ;		cx:dx - fptr to buffer to fill in
    ;RETURN:	cx:dx - buffer filled in
    ;

    NUF_ENUM_CONNECTED_USERS enum NetUserFunction
    ; Enumerate over the set of users connected to the network.  The net
    ; driver must fill in ds:NECD_curElement with a far pointer to each
    ; user's name and then call NetEnumCallback.
    ;
    ; PASS:		ds - segment of NetEnumCallbackData
    ; RETURN:	nothing
    ;

    NUF_VERIFY_PASSWORD enum NetUserFunction
    ;Check if the password for the user is correct.
    ;
    ;PASS:	dl - length of name string
    ;		dh - length of password string
    ;		ss:bp - NetVerifyPasswordParams
    ;		
    ;RETURN:	al - NetWareReturnCode
    ;
    ;DESTROYED:	 none
    ;
    ;
NetVerifyPasswordParams	struct
    NVPP_loginName	fptr.char
    NVPP_password	fptr.char
NetVerifyPasswordParams	ends

    NUF_GET_CONNECTION_NUMBER	enum NetUserFunction
    ;Return the connection number that the requesting
    ;workstation uses to communicate with the default file server.
    ;
    ;PASS:	nothing
    ;
    ;RETURN:	cx	= connection number (1-250)
    ;
    ;

    NUF_CHECK_IF_IN_GROUP enum NetUserFunction
    ;Return the full name of a user
    ;
    ;PASS:	ds:si - fptr to asciiz user's login name
    ;		cx:dx - fptr to asciiz group name to check
    ;RETURN:	if user is in group:
    ;			carry clear
    ;		if user is not in group, or error:
    ;			carry set
    ;			ax = 0 if no error, or NetWareReturnCode.
    ;

    NUF_ENUM_USERS enum NetUserFunction
    ; Enumerate over the set of all users.  The net
    ; driver must fill in ds:NECD_curElement with a far pointer to each
    ; user's name and then call NetEnumCallback.
    ;
    ; PASS:		ds - segment of NetEnumCallbackData
    ; RETURN:	nothing
    ;



;------------------------------------------------------------------------------
;			Packet Messaging Calls
;------------------------------------------------------------------------------
DR_NET_INITIALIZE_HECB	enum NetDriverFunction
;	SYNOPSIS:	Initialize the passed HugeECB structure according
;			to this specific network driver. (For now, this just
;			means fill in the FPTRs to our callback routines.
;			Eventually, this will be our opportunity to
;			encapsulate the data block that is passed to us
;			into our specific data block that we give the
;			specific network.
;
;	PASS:		ds	= segment of HugeECB on heap (locked)
;			ax	= NLMessageFlags
;
;	RETURN:		ds, ax	= same

DR_NET_SEND_HECB	enum NetDriverFunction
;	SYNOPSIS:	Send the specified HugeECB structure out over the
;			network. See the HugeECB definition for details.
;
;	PASS:		^hbx	= HugeECB on heap (unlocked)
;	RETURN:		nothing (HugeECB freed)
;	DESTROYS:	ax, di

;------------------------------------------------------------------------------
;			Semaphore Related Calls
;------------------------------------------------------------------------------

DR_NET_SEMAPHORE_FUNCTION		enum	NetDriverFunction

NetSemaphoreFunction	etype	byte, 0, 2

    NSF_OPEN	enum	NetSemaphoreFunction

	;DESCRIPTION:	Open a network-based semaphore (creating it first if
	;		necessary), such that the calling application can then
	;		P() and V() on the semaphore.
	;
	;PASS:		ds:si	= name for semaphore (null terminated, and up
	;			to NET_SEMAPHORE_NAME_LENGTH (=124) chars max,
	;			including null term.)
	;
	;		cx	= initial value (1 means one P() permitted, 
	;			etc.)
	;				Maximum initial value: 127
	;
	;		dx	= poll interval (# of ticks between attempts
	;			to grab the semaphore over the network).
	;			If you set this to 0, it means that no
	;			process will EVER wait for the semaphore.
	;			All PSem operations will ignore the
	;			timeout value passed, and return immediately
	;			if the semaphore cannot be grabbed.
	;
	;		bx	= PSP under which to open the semaphore, or
	;			0 to just use our own PSP.
	;
	;	FUTURE:
	;		bp	= scope: (4 is the only value permitted for now)
	;				0	pc/geos-wide (redundant?)
	;				2	workstation-wide
	;				4	server-wide
	;				8	LAN-wide (possible?)
	;				12	WAN-wide (possible?)
	;
	;RETURN:	ds, es	= same
	;		carry flag set if error (ax = error code)
	;		cx	= handle for semaphore (actually a PC/GEOS LMem
	;			 handle)
	;
	;DESTROYED:	dx, si, di, bp

    NSF_P	enum 	NetSemaphoreFunction

	;DESCRIPTION:	Wait on a network-based semaphore, for a specified amt
	;		of time. Must have already opened the semaphore using
	;		NetOpenSem.
	;
	;PASS:		cx	= handle for semaphore (the value returned from
	;			NetOpenSem, which is actually a PC/GEOS LMem 
	;			handle)
	;
	;		dx	= timeout value (# of ticks before we will give
	;			up waiting on this semaphore). Note that if
	;			the semaphore was created with a poll interval
	;			of 0, then this timeout value is ignored
	;			(assumed to be 0).
	;
	;RETURN:	carry flag set if timeout
	;		cx	= same
	;
	;DESTROYED:	?

    NSF_V	enum	NetSemaphoreFunction

	;DESCRIPTION:	Release (signal) a network-based semaphore.
	;		Must have already opened the semaphore using NetOpenSem.
	;
	;PASS:		cx	= handle for semaphore (the value returned from
	;		NetOpenSem, which is actually a PC/GEOS LMem handle)
	;
	;RETURN:	cx	= same
	;
	;DESTROYED:	?

    NSF_CLOSE	enum	NetSemaphoreFunction

	;DESCRIPTION:	Close a network-based semaphore. Actually, all that we
	;		are doing is decrementing the in-use count for the spe-
	;		cified semaphore. If it reaches 0, it means that no 
	;		threads in this instance of PC/GEOS are using the 
	;		semaphore anymore, and we can tell NetWare to "close" 
	;		the semaphore. If no other workstations have the 
	;		semaphore open, NetWare will free the semaphore from 
	;		the server's memory.
	;
	;PASS:		cx	= handle for semaphore (the value returned from
	;			NetOpenSem, which is actually a PC/GEOS LMem 
	;			handle)
	;
	;RETURN:	ds, es, cx = same
	;
	;DESTROYED:	?
		
DR_NET_GET_DEFAULT_CONNECTION_ID enum NetDriverFunction

;DESCRIPTION:	Return connection ID of the file server to which request
;		packets are currently being sent
;
;PASS:		nothing
;
;RETURN		al	= connection ID 
;				

DR_NET_GET_SERVER_NAME_TABLE enum NetDriverFunction

;DESCRIPTION:	This call returns a fptr to the shell's File Server
;		Name Table.
;
;
;PASS:		nothing
;
;RETURN:	ds:si = pointer to shell's Server Name Table
;
;DESTROYED:	nothing
;
;NOTES:
;	The File Server Name Table consists of eight entries (1 to 8)
;	that are NW_USER_NAME_LENGTH bytes in length.  
;	Each entry in the FSNT can contain a null-terminated server name.  
;
;	To find out which entries in the name table are valid, look at
;	the Connection ID Table.  I don't know what to look at yet,
;	but when I'll do I'll come back and put it here.
;		

DR_NET_GET_CONNECTION_ID_TABLE enum NetDriverFunction

;DESCRIPTION:	This call returns a pointer to the shell's Connection 
;		ID Table.
;
;	The Connection ID Table consists of eight entries (1 to 8) that
;	are 32 bytes in length.  
;	Each entry is a NetWareConnectionIDTableItem.
;
;
;PASS:		nothing
;
;RETURN:	ds:si = Connection ID Table
;
;DESTROYED:	nothing
;

DR_NET_SCAN_FOR_SERVER enum NetDriverFunction

;DESCRIPTION:	Scan bindery to look for a server.  Returns one server name
;		at a time. To get a list of all servers available, call 
;		this sequentially, until return code is NRC_NO_SUCH_OBJECT.
;
;PASS:		cx:dx	= NetWareBinderyObjectID of server returned in
;			previous call.  On the first call to this procedure,
;			set cx = dx = 0xffff.
;		ds:si	= buffer into which the name of the server is
;			copied and returned.
;
;RETURN:	ds:si 	= buffer is stuffed with the null terminated name
;			of a server.
;		cx:dx	= NetWareBinderyObjectID for server returned.
;		al	= NetWareReturnCode (0 = successful)
;

;-----------------------------------------------------------------------------
;	XXX: Someone should combine all these "Server" functions into a
;	single category
;-----------------------------------------------------------------------------
 

DR_NET_SERVER_ATTACH 	enum NetDriverFunction	
;			
;DESCRIPTION:	Attach to the given server.
;
;PASS:		ds:si 	- zero terminated server name string
;RETURN:		al	- return code 
;				0 - success
;				1 - too many connections already (8 max.)
;				2 - name too long
;				(change these to a enum)
; DESTROYED:	nothing
;

NetServerLoginFrame			struct
	NSLF_serverName		fptr
	NSLF_userName		fptr
	NSLF_password		fptr
	NSLF_reopenFiles	byte
	align word
NetServerLoginFrame			ends

DR_NET_SERVER_LOGIN	enum NetDriverFunction
;DESCRIPTION:	Login to named server
;PASS:		ss:bx	= NetServerLoginFrame
;RETURN:	al - return code
;DESTROY:	nothing
;

DR_NET_SERVER_LOGOUT	enum NetDriverFunction
;DESCRIPTION:	Logout from file server
;PASS:		ds:si - asciiz server name
;RETURN:	al    - return code
;DESTROY:	nothing	
;

NetServerChangeUserPasswordFrame	struct
	NSCUPF_serverName	fptr
	NSCUPF_userName		fptr
	NSCUPF_oldPassword	fptr
	NSCUPF_newPassword	fptr
NetServerChangeUserPasswordFrame	ends
	
DR_NET_SERVER_CHANGE_USER_PASSWORD	enum NetDriverFunction
;SYNOPSIS:	Change the user's password
;PASS:		ss:bx 	- fptr to NetServerChangeUserPasswordFrame
;RETURN:	al	- return code
;DESTROY:	nothing
;

DR_NET_SERVER_VERIFY_USER_PASSWORD	enum NetDriverFunction
;SYNOPSIS:	Check with the server if the password for the user is correct.
;PASS:		ds:si	- asciiz server name
;		ax:bx	- asciiz login name
;		cx:dx	- asciiz 
;RETURN:	al	- return code
;DESTROY:	nothing
;

DR_NET_SERVER_GET_NET_ADDR	enum NetDriverFunction
;SYNOPSIS:	Return an address that uniquely identifies the server.
;
;PASS:		ds:si	- asciiz server name
;		cx:dx	- fptr to NovellNodeSocketAddrStruct to be filled
;			  in with the net address.
;RETURN:	cx:dx 	- unchanged, but filled in.
;DESTROY:	nothing
;
;NOTES:		This is yet another call that's NetWare specific. 

DR_NET_SERVER_GET_WS_NET_ADDR	enum NetDriverFunction
;SYNOPSIS:	Return an address that uniquely identifies the calling
;		workstation with respect to the server.
;PASS:		ds:si	- asciiz server name
;		cx:dx	- fptr to NovellNodeSocketAddrStruct to be filled
;			  in with the net address.
;RETURN:	cx:dx 	- unchanged, but filled in.
;DESTROY:	nothing
;
;NOTES:		This is yet another call that's NetWare specific. 


DR_NET_MAP_DRIVE	enum NetDriverFunction
;DESCRIPTION:	Permanently assign a workstation drive to a network 
;		directory
;
;PASS:		ds:si	- asciiz directory path (full or partial) on 
;			  file server
;		cx:dx	- asciiz name for drive		
;		dl	- drive letter (an ascii character)
;
;RETURN:	al	- completion code
;
;DESTROYED:	nothing
;

;-----------------------------------------------------------------------------
;	MESSAGING RELATED CALLS		
;-----------------------------------------------------------------------------

DR_NET_MESSAGING		enum	NetDriverFunction

; al - NetMessagingFunction
;
; These functions relate to 2-way communication (messaging) ...  

NetMessagingFunction	etype	byte, 0, 2

    NMF_OPEN_PORT	enum	NetMessagingFunction
	;
	; Description:
	; Given a buffer of port info, it opens the port for communication 
	; (i.e. creates	a server thread for the port, initializes the stream,
	; etc) or adds 1 to the port reference count.  Returns a token 
	; representing the open port 
	; Pass:
	;	ds:si	- buffer
	;	cx	- size of buffer
	; Return:
	;	carry set if error, ax becomes error code.	
	;	bx 	- port token
	; Destroy:

    NMF_CLOSE_PORT	enum	NetMessagingFunction
	;
	; Description:
	; Given a port token, decrements the ref count and shuts down the 
	; server thread if ref count goes to 0
	; Pass:
	;	bx 	- port token
	; Return:
	;	carry set if error, ax becomes error code.	
	; Destroy:

    NMF_CREATE_SOCKET	enum	NetMessagingFunction
	;
	; Description:
	; Creates a socket for the port.  Callback routine is called when a
	; packet is received for the socket.  A socket token to be used by
	; the app on both sides of the communication is necessary here.
	;
	; In general, a single-threaded app will rely on the callback method
	; (*important* the callback routine must be very fast and return 
	; quickly, otherwise other packets coming into the port may be lost!)
	; and multi-threaded apps are encouraged to use the message queue 
	; (a dedicated dispatch thread should be routinely P'ing the semaphore
	; and processing messages as they come in)  Also note: it is not a 
	; good idea to let messages 'sit around' in the queue, as it's limited
	; in size, and will overflow if too many messages are waiting in it.
	; One queue exists for each socket that requests it.
	;
	; Pass:
	;	bx 	- port token
	;	cx	- socket ID (unique number chosen by caller)
	;	bp	- dest ID (socket ID of the destination socket)
	;	ds:dx 	- callback routine
	;	si	- data to pass to callback (OD or dgroup, etc)
	; Return:
	;	carry set if error, ax - error code.	
	;	ax	- socket token
	; Destroy:
	; 
	; Callback routine:
	;
	;	Pass:
	;		ds:si - buffer	
	;		di    - data passed from COMM_CREATE (si)
	;		cx    - size
	;			cx = 0 when socket is being destroyed.
	;
	;	Return: nothing
	;	Destroy: ax,bx,cx,dx,di,si

    NMF_DESTROY_SOCKET	enum	NetMessagingFunction
	;
	; Description:
	; Destroys specified socket.  also calls callback with carry set to
	; notify destruction.  
	; Pass:
	;	bx 	- port token
	;	dx	- socket token
	; Return:
	;	carry set if error, ax - error code
	; Destroy:

    NMF_CALL_SERVICE	enum	NetMessagingFunction
	;
	; Description:
	; Sends buffer across the specified port/socket 
	; Pass:
	;	bx 	- port token
	;	dx	- socket token
	;	cx	- size of buffer
	;	ds:si	- buffer
	; Return:
	;	carry set if error, ax - error code
	; Destroy:

    NMF_SET_TIMEOUT	enum	NetMessagingFunction
	;
	; Description:
	; Sets the timeout value (in 1/60 second ticks) for a socket
	; Pass:
	;	bx  	- port token
	;	dx	- socket token
	; 	cx	- timeout value
	; Return:
	;	carry set if error, ax - error code
	; Destroy:

;-----------------------------------------------------------------------------
;	PRINTING RELATED CALLS		
;-----------------------------------------------------------------------------

DR_NET_PRINT_FUNCTION		enum	NetDriverFunction
; 

NetPrintFunction	etype	byte, 0, 2

    NPF_ENUM_PRINT_QUEUES	enum	NetPrintFunction
    ;
    ; Find all the print queues on this network.  This function should call
    ; NetEnumCallback for each queue it finds, with ds:NECD_curElement
    ; containing a far pointer to the next queue name (null-terminated
    ; string). 
    ;
    ;PASS:	ds - segment of NetEnumCallbackData
    ;
    ;RETURN:	nothing 
    ;
    ;DESTROYED:	nothing 


    NPF_START_CAPTURE	enum	NetPrintFunction
    ;
    ; Begin a "capture" of one of the LPT ports to the specified
    ; network print queue.
    ;
    ;PASS:	bx - ParallelPortNum
    ;		cx:dx - name of queue
    ;
    ;RETURN:	if error:
    ;			carry set
    ;			ax = ERROR_PRINT_QUEUE_NOT_FOUND
    ;		else:
    ;			carry clear
    ;

    NPF_CANCEL_CAPTURE	enum	NetPrintFunction
    ;
    ;Cancel LPT capture, destroying any captured data
    ;
    ;PASS:	bx - ParallelPortNum
    ;
    ;RETURN:	nothing 
    ;DESTROYED:	nothing 


    NPF_END_CAPTURE	enum	NetPrintFunction
    ;
    ;End capture.  Tell server to begin processing print job. 
    ;
    ;PASS:	bx - ParallelPortNum
    ;RETURN:	nothing 
    ;DESTROYED:	nothing 


    NPF_FLUSH_CAPTURE	enum	NetPrintFunction
    ;Flush existing capture data, but keep capture active.
    ;Existing data will be sent to the server for printing.
    ;
    ;PASS:		bx - ParallelPortNum
    ;RETURN:	nothing 
    ;DESTROYED:	nothing 

    NPF_GET_CAPTURE_QUEUE enum NetPrintFunction
    ;Return the name of the queue to which the specified port is being
    ;captured. 
    ;PASS:		bx - ParallelPortNum
    ; 			ds:si - buffer for queue name
    ; 
    ;RETURN:	ds:si - buffer filled in (null string if no capture)
    ;DESTROYED:	nothing 

    NPF_SET_BANNER enum NetPrintFunction
    ; Set the banner text for subsequent print jobs
    ;PASS:		ds:si - banner text
    ;RETURN:		nothing 
    ;DESTROYED:		nothing 

    NPF_GET_BANNER enum NetPrintFunction
    ; Get the banner text 
    ;PASS:		ds:si - buffer at least as large as a 
    ;			NetBannerText structure
    ;
    ;RETURN:		nothing 
    ;DESTROYED:		nothing 

    NPF_SET_BANNER_STATUS enum NetPrintFunction
    ; Turn the banner page ON or OFF 
    ;
    ;PASS: 	bx - TRUE or FALSE
    ;RETURN:	nothing 
    ;DESTROYED: nothing 

    NPF_GET_BANNER_STATUS enum NetPrintFunction
    ; Get the default banner status
    ;
    ;PASS: 	nothing 
    ;RETURN:	bx - TRUE or FALSE
    ;DESTROYED: nothing 

    NPF_SET_TIMEOUT enum NetPrintFunction
    ; Set the capture timeout value.
    ;
    ;PASS: 	ax - timeout value
    ;RETURN:	nothing 
    ;DESTROYED: nothing 

    NPF_GET_TIMEOUT enum NetPrintFunction
    ; Get the capture timeout value.
    ;
    ;PASS: 	nothing 
    ;RETURN:	bx - timeout value.
    ;DESTROYED: nothing 

;-----------------------------------------------------------------------------
; This category is for getting/setting information about network
; objects, such as users, print queues, etc.
;-----------------------------------------------------------------------------
DR_NET_OBJECT_FUNCTION	enum	NetDriverFunction

 
NetObjectFunction etype byte, 0, 2

    NOF_READ_PROPERTY_VALUE enum NetObjectFunction
    ; Return a property about an object
    ;PASS:	ss:bx - fptr to NetObjectGetPropertyData

    NOF_ENUM_PROPERTIES enum NetObjectFunction
    ; Return a list of the names of all the properties 
    ; defined for this object. Property values can be fetched using
    ; NOF_READ_PROPERTY_VALUE.


;-----------------------------------------------------------------------------
; This category is used for sending/receiving text messages -- a
; simpler API than the socket-based one above		
;-----------------------------------------------------------------------------
 
DR_NET_TEXT_MESSAGE_FUNCTION	enum	NetDriverFunction

NetTextMessageFunction	etype	byte, 0, 2


    NTMF_SEND_MESSAGE enum NetTextMessageFunction
    ; Send a message to a user
    ;
    ; PASS:		ds:si - user's LOGIN name
    ;			cx:dx - fptr to message to send
    ;
    ; RETURN: 	carry set if error
    ;			ax - NetError
    ;

    NTMF_POLL_FOR_MESSAGE	enum	NetTextMessageFunction
    ; See if there are any incoming messages.
    ; PASS:
    ;			ds:si - buffer of size NET_TEXT_MESSAGE_BUFFER_SIZE
    ; RETURN:
    ;		carry SET if message available, carry clear otherwise
    ;


DR_NET_GET_VOLUME_NAME	enum NetDriverFunction
;DESCRIPTION:	Return the volume name for a volume
;
;PASS:		ds:si	- buffer large enough to fit the volume length.
;                         (For netware, it should be at least 
;			  NW_VOLUME_NAME_SIZE bytes long.)
;		cx:dx	- asciiz name for drive		
;		dl	- drive letter (an ascii character)
;
;RETURN:	al	- completion code
;		ds:si   - filled in with volume name		
;
;DESTROYED:	nothing
;

DR_NET_GET_DRIVE_CURRENT_PATH	enum NetDriverFunction
;DESCRIPTION:	Returns the current directory (full path) for a given drive.
;
;PASS:		ds:si	- buffer large enough to fit the path.
;                        (At least DOS_STD_PATH_LENGTH long.)
;		dl	- drive letter (an ascii character)
;
;RETURN:	al	- completion code (0 = successful)
;		ds:si   - filled in with path name		
;
;DESTROYED:	nothing
;

DR_NET_GET_STATION_ADDRESS	enum NetDriverFunction
;DESCRIPTION:	Returns the workstation address.
;
;PASS:		nothing
;
;RETURN:	cx,bx,ax = NetStationAddress (NovellStationAddress)
;
;DESTROYED:	nothing
;

DR_NET_UNMAP_DRIVE	enum NetDriverFunction
;DESCRIPTION:	Undo a drive mapping 
;
;PASS:		bl	= ascii upper case drive letter
;
;RETURN:	al 	= completion code
;
;DESTROYED:	nothing
;


;-----------------------------------------------------------------------------
;	Data structure for internal use by network drivers		
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;	NETWORK RESOURCE ENUMERATION		
;-----------------------------------------------------------------------------
; IMPORTANT NOTE FOR CALLERS OF NET ENUMERATION ROUTINES:  If the
; caller wants to have the net library create a chunk array, then it
; must pass DS - segment of chunk array.  DS will be fixed up properly
; on return.

NetEnumBufferType	etype	word, 0, 2
NEBT_MEM	enum	NetEnumBufferType

NEBT_CHUNK_ARRAY	enum	NetEnumBufferType

NEBT_CHUNK_ARRAY_VAR_SIZED	enum	NetEnumBufferType
; variable-sized chunk array of null-terminated strings

NetEnumParams	struct
	NEP_bufferType	NetEnumBufferType

	even
NetEnumParams	ends


NetEnumCallbackData	struct
	NECD_handle	hptr.NetEnumCallbackData

	NECD_params	NetEnumParams
	; Copied here from stack to free up BP

	NECD_buffer	fptr
	; Pointer to buffer.

	NECD_curElement	fptr
	; pointer to next element to add.  This field is filled in by
	; the driver before it calls NetEnumCallback
	
	NECD_netDriverFunction	NetDriverFunction
	; Network driver function to call for enumeration

	NECD_netDriverSubFunc	byte

NetEnumCallbackData	ends

EndDriver net
