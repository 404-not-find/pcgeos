COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Include
FILE:		taskDr.def

AUTHOR:		Adam de Boor, Feb 19, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	2/19/91		Initial revision


DESCRIPTION:
	Interface definition for task-switching drivers.
		
	$Id: taskDr.def,v 1.1 97/04/04 14:13:36 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__TASKDRIVER

StartKernel

global	DosExecLocateLoader:far
;
;	Fetch the absolute path of the PC/GEOS loader, so the driver can
;	reload the loader once the task is finished (used only by the
;	non-task-switching task-switching driver...)
;
;	Pass:	es:di	= address of DosExecLoaderInfo into which to place the
;			  dirt we've got on the PC/GEOS loader.
;	Return:	carry set if loader couldn't be found
;		carry clear if loader info returned.
;
;
DosExecLoaderInfo	struct
    DELI_path		char	3 + DOS_STD_PATH_LENGTH + 1 dup(?)
					; absolute path, with drive, of the
					;  PC/GEOS loader
    DELI_csip		fptr		; initial cs:ip, from base of loader
    DELI_sssp		fptr		; initial ss:sp, from base of loader
DosExecLoaderInfo	ends

global	DosExecSuspend:far
;
;	Suspend the system, calling the DR_SUSPEND entry of all drivers.
;	If any returns carry set, indicating it couldn't suspend, this
;	function will call the DR_UNSUSPEND function of all drivers that
;	have already returned carry clear before returning carry set.
;
;	Pass:	es:di	= buffer in which to place the reason for the refusal
;	Return:	carry set if suspend denied:
;			es:di	= filled in. message is null-terminated and
;				  in the PC/GEOS character set
;	Destroyed:	ax, bx, cx, dx, si, di
;
;	NOTE:	Once this routine returns, all further file-system or
;		heap activity is strictly forbidden. Any memory that must
;		be accessible should be locked down before calling this
;		routine.
;

global	DosExecUnsuspend:far
;
;	Resume system execution by calling the DR_UNSUSPEND function of all
;	drivers.
;
;	Pass:	nothing
;	Return:	nothing
;	Destroyed:	ax, bx, cx, dx, si, di
;

global	DosExecInsertMovableVector:far
;
;	Insert our own software interrupt vectors to handle calls to movable
;	routines.
;
;	Pass:	 nothing
;	Return:  nothing
;	Destroyed:	nothing
;
global	DosExecRestoreMovableVector:far
;
;	Restore the software interrupt vectors to their state before
;	DosExecInsertMovableVector was called.
;
;	Pass:	 nothing
;	Return:  nothing
;	Destroyed:	nothing
;

;
; Structures passed to DR_TASK_START
; 
DosExecDiskAndPath	struct
    DEDAP_disk		word		; Handle of disk on which the path
					;  resides.
    DEDAP_path		char DOS_STD_PATH_LENGTH dup(?)	; The path itself:
							;  DOS character set,
							;  absolute, with
							;  drive specifier
DosExecDiskAndPath	ends

DOS_EXEC_MAX_ARG_LENGTH	equ	127	; Largest argument string allowed.

DosExecArgs	struct
    DEA_handle		hptr.DosExecArgs
    DEA_cwd		DosExecDiskAndPath	; Working directory for the
						;  program
    DEA_prog		DosExecDiskAndPath	; Program to invoke
    DEA_flags		DosExecFlags		; Flags passed to DosExec
    DEA_argLen		byte			; Number of characters in the
						;  argument string
    DEA_args		char DOS_EXEC_MAX_ARG_LENGTH dup(?)
						; The argument string
						;  itself: DOS character
						;  set, with \r and \0
						;  DEF_argLen bytes into
						;  the array...
    DEA_psp		sptr.ProgramSegmentPrefix; The system's PSP
    DEA_heapStart 	sptr 			; The segment of the start of
						;  the heap (i.e. the first byte
						;  managed by PC/GEOS)
    DEA_memReq		DosExecMemReqsStruct
DosExecArgs	ends


EndKernel

StartDriver	task

TASK_PROTO_MAJOR	equ DRIVER_PROTO_MAJOR+1
TASK_PROTO_MINOR	equ DRIVER_PROTO_MINOR+1

TASK_NAME_LENGTH	equ 32	; longest name for a task.

TaskDriverFlags	record
    :7
    TDF_SUPPORTS_TASK_LIST:1=0	; non-zero if driver can fill a list of tasks,
				;  switch to a particular task, and delete
				;  an existing task. The driver should still
				;  field these calls, in case some bozo calls
				;  them, but it can just return an error.
TaskDriverFlags	end

TaskDriverInfoStruct	struct
    TDIS_common	DriverExtendedInfoStruct	<>
    TDIS_flags	TaskDriverFlags		; Additional info about the driver.
TaskDriverInfoStruct	ends

TaskFunction	etype	word, DriverExtendedFunction, 2

DR_TASK_BUILD_LIST		enum	TaskFunction
;
;	Create and add list entries, one per active task, to the end of
;	the passed GenItemGroup. All list entries are created ignore-dirty, so
;	the list itself should likely be ignore-dirty.
;
;	Pass:		^lcx:dx	= GenItemGroup to which to append the entries
;	Return:		nothing
;	Destroy:	ax, di
;			ds *not* fixed up if pointing to ^hcx
;

DR_TASK_SWITCH			enum	TaskFunction
;
;	Switch to the task whose item (previously created by a call to
;	DR_TASK_BUILD_LIST) identifier is passed. May return before the system
;	has been suspended
;
;	Pass:		cx	= identifier from selected item
;	Return:		nothing
;	Destroy:	ax, di
;

DR_TASK_DELETE			enum	TaskFunction
;
;	Delete the task whose item group entry (previously created by a call
;	to DR_TASK_BUILD_LIST) is passed. User is asked for confirmation
;	if appropriate. The item group entry will be sent a MSG_GEN_DESTROY
;	with immediate update if the task is actually deleted.
;
;	Pass:		^lcx:dx	= item group entry of task to delete
;	Return:		nothing
;	Destroy:	ax, di
;

DR_TASK_START			enum	TaskFunction
;
;	Begin a new task. This may shut down the system, if no task switcher
;	is loaded.
;
;	Pass:	ds	= segment of locked DosExecArgs block. Ownership of,
;			  and responsibility for, this block passes to the
;			  driver with this call. It may keep it around
;			  indefinitely (the block is owned by the kernel,
;			  so it won't go away if an app exits), or free it
;			  immediately. Most importantly, the kernel will not
;			  itself free it, so the driver should eventually
;			  free it somehow.
;		cx:dx	= absolute path of directory from which PC/GEOS was
;			  started (and to which we must return on exit)
;	Return:	carry set if couldn't start:
;			ax	= FileError
;		carry clear if task is on its way:
;			ax	= destroyed
;	Destroy:	bx, cx, dx, si, di, es, ds
;

DR_TASK_APPS_SHUTDOWN		enum	TaskFunction
;
;	The shutdown of all applications is now complete. If the task-switch
;	driver needs to ensure certain disks are in their respective drives,
;	now is the time to do it.
;
;	Pass:	nothing
;	Return:	nothing
;

DR_TASK_SHUTDOWN_COMPLETE	enum	TaskFunction
;
;	The shutdown requested by the driver has completed. It can do what
;	it needs to now to start the task. This will be called by the kernel
;	when an SST_CLEAN shutdown as been completed and EF_RUN_DOS was set
;	in the exit flags (via SysSetExitFlags), or by the UI when all
;	applications have responded to the disconnect broadcast.
;
;	Pass:	cx	= non-zero if switch has been confirmed by all
;			  active applications. zero if some active application
;			  has refused permission to switch.
;	Return:	nothing
;

EndDriver	task
