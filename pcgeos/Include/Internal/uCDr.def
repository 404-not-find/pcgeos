COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Jedi	
MODULE:		uC Driver
FILE:		uCDr.def

AUTHOR:		Todd Stumpf, Dec  6, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	12/ 6/94   	Initial revision


DESCRIPTION:
	
		
	$Id: uCDr.def,v 1.1 97/04/04 14:14:18 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


SetDef	__UCDR

include driver.def

;---

StartDriver	uc

;
; Protocol number for this interface. Adjust the final numbers, below, if the
; interface is changed.
;
UC_PROTO_MAJOR equ DRIVER_PROTO_MAJOR+1
UC_PROTO_MINOR equ DRIVER_PROTO_MINOR+0


uCFunction			etype protominor word, DriverFunction, 2


DR_UC_SEND_PACKET		enum	uCFunction
	; PASS :	dx:si	-> buffer of bits to send
	;		cx	-> # of bits to send
	;		ax	-> # of times to retry
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

DR_UC_REGISTER_MOUSE_CALLBACK		enum	uCFunction
	; PASS :	dx:si	-> ptr to callback
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;
	;	CALLBACK SPECIFICATION
	;		PASS :	ax	-> X coord
	;			bx	-> Y coord
	;			cx	-> uCMousePointData
	;		RETURN : nothing
	;		DESTROY: si, di allowed
	;			 must preserve ax, bx, cx
	;			
	;		If all coords are DEFAULT_COORD, pen is
	;		up.  Otherwise, pen is down.
	;

	uCMousePointData	record
		:13
		uCMPD_RAW	:1
		uCMPD_ROTATED	:1
		uCMPD_RELEASE	:1
	uCMousePointData	end

DR_UC_UNREGISTER_MOUSE_CALLBACK		enum	uCFunction
	; PASS :	dx:si	-> ptr to callback
	; RETURN :	carry set on error
	; DESTROY : 	nothing
	;

DR_UC_SET_SCAN_RATE			enum	uCFunction
	; PASS : 	al	-> scan rate (4 msec + al*2 msec) (max 130)
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

DR_UC_CALIBRATE_DIGITIZER		enum	uCFunction
	; PASS :	dx:si	-> uCCalibrateParams to use
	; RETURN:	carry set on error
	; DESTROY:	nothing
	;
	uCCalibrateParams		struct
		uCCP_A		word
		uCCP_B		dword
		uCCP_C		word
		uCCP_D		dword
	uCCalibrateParams		ends

DR_UC_SET_RAW_MODE			enum	uCFunction
	; PASS :	ax	-> RawModeChange
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

	RawModeChange			etype	protominor	word, 0, 1
		RMC_TOGGLE_MODE		enum	RawModeChange
		RMC_RAW_MODE		enum	RawModeChange
		RMC_COOKED_MODE		enum	RawModeChange

DR_UC_REGISTER_BATTERY_CALLBACK		enum	uCFunction
	; PASS :	dx:si	-> ptr to callback
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;
	;	CALLBACK SPECIFICATION
	;		PASS :	al	-> main battery level
	;			ah	-> backup battery level
	;			INT_OFF
	;		RETURN : nothing
	;		DESTROY: si, di allowed
	;			 must preserve ax, bx, cx
	;
DR_UC_UNREGISTER_BATTERY_CALLBACK	enum	uCFunction
	; PASS :	dx:si	-> ptr to callback
	; RETURN :	carry set on error
	; DESTROY : 	nothing
	;

DR_UC_UPDATE_BATTERY_LEVELS		enum	uCFunction
	; PASS :	ax	-> PeriodicBatteryPollFrequency
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;
	PeriodicBatteryPollFrequency	etype	byte, 0, 1
		PBPF_ONE_TIME		enum	PeriodicBatteryPollFrequency, -1
		PBPF_DISABLE		enum	PeriodicBatteryPollFrequency, 0
		PBPF_4Hz		enum	PeriodicBatteryPollFrequency
		PBPF_3Hz		enum	PeriodicBatteryPollFrequency
		PBPF_2Hz		enum	PeriodicBatteryPollFrequency
		PBPF_1Hz		enum	PeriodicBatteryPollFrequency

DR_UC_PERFORM_SELF_TEST			enum	uCFunction
	; PASS :	nothing
	; RETURN :	carry set on error
	;			- or -
	;		carry clear
	;		cx = 0 if failed,
	;		cx non Zero if success
	; DESTROY :	nothing
	;

DR_UC_SLEEP_MODE			enum	uCFunction
	; PASS :	ax	-> DigitizerSleepMode
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

DR_UC_ROTATE_SCREEN			enum	uCFunction
	; PASS :	ax	-> ScreenOrientationMode
	; RETURN :	carry set on error
	; DESTROY :	nothing
	; NOTES:  Can only be called with Power to LCD disabled
	;

DR_UC_SET_ACTIVE_SCREEN_SIZE		enum	uCFunction
	; PASS :	ax	-> min X
	;		bx	-> max X
	;		dx	-> max Y (min always 0)
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

DR_UC_GET_SCREEN_STATE			enum	uCFunction
	; PASS :	nothing
	; RETURN :	ax	<- ScreenState
	;		bx	<- min X
	;		cx	<- max X
	;		dx	<- max Y (min always 0)
	; DESTROY :	nothing
	;

DR_UC_RESET_UC				enum	uCFunction
	; PASS :	nothing
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;

DR_UC_ADJUST_CONTRAST			enum	uCFunction
	; PASS :	ax	-> uCContrastAdjustment
	; RETURN :	carry set on error
	; DESTROY :	nothing
	;
	uCContrastAdjustment	etype	protominor	word, 0, 2
	UCCA_RESET_TO_DEFAULT	enum	uCContrastAdjustment
	UCCA_INCREMENT_CONTRAST	enum	uCContrastAdjustment
	UCCA_DECREMENT_CONTRAST	enum	uCContrastAdjustment

DR_UC_LOAD_DEFAULTS			enum	uCFunction
	; PASS :	nothing
	; RETURN :	carry set on error
	; DESTROY :	nothing
	; NOTES:  Should only be called with Power to LCD disabled
	;

;-----------------------------------------------------------------------------
;		Enumerations, constants and such...
;-----------------------------------------------------------------------------

DigitizerSleepMode		etype	word, 0, 2
	DSM_SLEEP_LIGHTLY	enum	DigitizerSleepMode
	DSM_SLEEP_SOUNDLY	enum	DigitizerSleepMode

ScreenOrientationMode		etype	word, 0, 1
	SOM_PORTRAIT		enum	ScreenOrientationMode
	SOM_LANDSCAPE		enum	ScreenOrientationMode
	SOM_JUST_FLIP_IT	equ	ScreenOrientationMode
	;  'equ' rather than 'enum' allows the "size" of the mode
	;  to be 1 bit, rather than 2, while still giving FLIP
	;  the right value

ScreenState		record
	:15
	SS_ORIENTATION	ScreenOrientationMode:1
ScreenState		end



DEFAULT_COORD		equ	08000h

EndDriver	uc



