COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		kbdDr.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines keyboard driver structures and routines.

	$Id: kbdDr.def,v 1.1 97/04/04 14:15:47 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__KBDDR

StartDriver	kbd

include	driver.def

ContinueLibrary kbd
include Internal/kbdMap.def

;
; Protocol number for this interface description.
;
KEYBOARD_PROTO_MAJOR	equ DRIVER_PROTO_MAJOR+2
KEYBOARD_PROTO_MINOR	equ DRIVER_PROTO_MINOR+1

;--------------------------------------------------------------------------
;		Keyboard Driver Constants & Structures
;--------------------------------------------------------------------------

;
; Modifiers used to index into KeyMapStruct
;
KeyModifiers		record
    :5
    KMS_ALT:1					;bit2:TRUE = <alt> used
    KMS_CTRL:1					;bit1:TRUE = <ctrl> used
    KMS_SHIFT:1					;bit0:TRUE = <shift> used
KeyModifiers		end

CharTypeFlags		record
    :7
    CTF_VIRTUAL:1				;TRUE if char passed is virtual
CharTypeFlags		end

;
; Key map as returned by DR_KBD_MAP_KEY
;
if DBCS_PCGEOS

KeyMapStruct		struct
    KMS_keyType		KeyDataFlags		;type of key
    KMS_char		Chars			;unshifted key
    KMS_shift		Chars			;<shift>-key
    KMS_ctrl		Chars			;<ctrl>-key
    KMS_shiftCtrl	Chars			;<shift><ctrl>-key
    KMS_alt		Chars			;<alt>-key
    KMS_shiftAlt	Chars			;<shift><alt>-key
    KMS_ctrlAlt		Chars			;<ctrl><alt>-key
    KMS_shiftCtrlAlt	Chars			;<shift><ctrl><alt>-key
KeyMapStruct		ends

else

KeyMapStruct		struct
    KMS_virtual		ExtVirtualBits		;which chars are virtual
    KMS_keyType		KeyDataFlags		;type of key
    KMS_char		Character		;unshifted key
    KMS_shift		Character		;<shift>-key
    KMS_ctrl		Character		;<ctrl>-key
    KMS_shiftCtrl	Character		;<shift><ctrl>-key
    KMS_alt		Character		;<alt>-key
    KMS_shiftAlt	Character		;<shift><alt>-key
    KMS_ctrlAlt		Character		;<ctrl><alt>-key
    KMS_shiftCtrlAlt	Character		;<shift><ctrl><alt>-key
KeyMapStruct		ends

endif

;
; Constants for keyboard typematic rate
;
KbdDelay		etype	byte
KBD_DELAY_SHORT		enum KbdDelay, 0
KBD_DELAY_MEDIUM	enum KbdDelay, 0x20
KBD_DELAY_LONG		enum KbdDelay, 0x40

KbdRepeat		etype	byte
KBD_REPEAT_FAST		enum KbdRepeat, 0
KBD_REPEAT_MEDIUM	enum KbdRepeat, 0x8
KBD_REPEAT_SLOW		enum KbdRepeat, 0x1f

;
; use the following to set state values in the driver
; NOTE: these must be bits 7,6 and 5
;
KbdStateFunctions	record
    KSF_NEW_PROCESS:1				;set new process to receive data
    KSF_NEW_INDICATOR:1				;set kbd LED's to new state
    KSF_NEW_TYPEMATIC:1				;set kbd delay and repeat rates
    :5
KbdStateFunctions	end

;
; keyboard delay and typematic rate
;
KbdTypematics		record
    :1
    KT_DELAY:2				;delay = 1s + [6:5]*250ms
    KT_TYPEMATIC_EXP:2
    KT_TYPEMATIC_MAN:3 			;rate = 1/((8+[2:0])*(2^[4:3])*.00417s)
KbdTypematics		end


;--------------------------------------------------------------------------
;		Keyboard Driver Functions
;--------------------------------------------------------------------------

KbdFunction 	etype word, DriverFunction, 2

;--------------------------------------------------------------------------
; The following require exclusive access to the keyboard driver:
;--------------------------------------------------------------------------

DR_KBD_GET_KBD_STATE 					enum KbdFunction
;
;	Desc:	Get the current state of the keyboard
;
;	Pass:	none
;	Return:	al	= ShiftState
;		ah	= ToggleState
;		bx	= process handle receiving MGS_IM_KBD_SCAN
;		cl	= xState1
;		ch	= xState2
;		dl	= ToggleState
;		dh	= KbdTypematics
;		es:si	= current DownList element
;			  (es = 0 if no last element)
;

DR_KBD_SET_KBD_STATE 					enum KbdFunction
;
;	Desc:	Set some of the current keyboard state variabbles
;
;	Pass:	ah	= KbdStateFunctions
;		bx	= process handle to receive MSG_IM_KBD_SCAN
;		cl	= ToggleState
;		ch	= KbdTypematics
;	Return:	carry clear if no error
;		ax = destroyed
;

DR_KBD_XLATE_SCAN 					enum KbdFunction
;
;	Desc:	Map a scan code to a PC/GEOS character
;
;	Pass:	cx	= scan code
;	Return:	di	= MSG_IM_KBD_CHAR
;		cx, dx, bp, si = kbd char data
;		al	= flags: bit 0 set if data being returned
;			         bit 1 set if more to come
;		carry set if error
;

DR_KBD_ADD_HOTKEY					enum KbdFunction
;
;	Desc:	Registers a hotkey for something outside of PC/GEOS, e.g.
;		a task-switcher. When the hotkey is detected, a message
;		is sent to an object and the keyboard interface is disabled,
;		keeping the character in keyboard controller's latches.
;
;		The recipient of the message must eventually call either
;		DR_KBD_PASS_HOTKEY or DR_KBD_CANCEL_HOTKEY.
;
;	Pass:	ah	= ShiftState that must be matched
;		ch	= CharacterSet in which character is located
;		cl	= character to be typed (Chars or VChars enumerated
;			  type). this is matched first against the unmodified
;			  char produced for each possible scan code, then
;			  against the character produced by that scan code with
;			  the indicated modifiers set. If either matches,
;			  receipt of that scan code with the indicated
;			  modifiers down will trigger the message defined by
;			  bx:si and bp to be sent.
;		^lbx:si	= object to notify when conditions are met.
;		bp	= message to send it.
;	Return:	carry set if hotkey couldn't be registered.
;

DR_KBD_REMOVE_HOTKEY					enum KbdFunction
;
;	Desc:	Removes a registered hotkey.
;
;	Pass:	ah	= ShiftState
;		cx	= character (ch = CharacterSet, cl = Chars/VChars)
;	Return:	nothing
;

;--------------------------------------------------------------------------
; The following do not require exlusive access:
;--------------------------------------------------------------------------

MIN_NON_EXCLUSIVE 	= KbdFunction

DR_KBD_CHANGE_OUTPUT					enum KbdFunction
;
;	Desc:	changes where the keyboard driver sends its raw events
;
;	Pass:	bx	= handle of thread/process/queue to receive
;			  MSG_IM_KBD_SCAN events
;	Return:	bx	= previous handle
;

DR_KBD_MAP_KEY						enum KbdFunction
;
;	Desc:	return all possible characters from a given key
;
;	Pass:	es:si	= KeyMapStruct buffer to fill
;		al	= scan code of key to map
;	Return:	es:si	= KeyMapStruct buffer filled
;

DR_KBD_CHECK_SHORTCUT					enum KbdFunction
;
;	Desc:	see if the keypress is a shortcut
;
;	Pass:	cx, dx, bp = same as MSG_IM_KBD_CHAR
;		es:si	= KeyboardShortcut table
;		ax	= # of entries in table above
;	Return:	si	= index of shortcut
;		carry set if a shortcut was found
;

DR_KBD_PASS_HOTKEY					enum KbdFunction
;
;	Desc: 	pass control to the previous keyboard-interrupt handler,
;		allowing it to see the keystroke. The keyboard interface
;		is re-enabled once the key has been passed on.
;
;	Pass:	nothing
;	Return:	nothing
;

DR_KBD_CANCEL_HOTKEY					enum KbdFunction
;
;	Desc:	cancels the pending hotkey, re-enabling the keyboard
;		interface without letting the previous keyboard-
;		interrupt handler see it.
;
;	Pass:	nothing
;	Return:	nothing
;

EndDriver	kbd
