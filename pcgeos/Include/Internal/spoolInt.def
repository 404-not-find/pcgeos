COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Spool Library -- Internal definitions
FILE:		spoolInt.def

AUTHOR:		Don Reeves, May  6, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Don	5/ 6/92		Initial revision

DESCRIPTION:
	Contains internal spool library definitions
		
	$Id: spoolInt.def,v 1.1 97/04/04 14:14:36 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

SetDef	__SPOOL_INT

StartLibrary	spool

include		driver.def
include		print.def
UseDriver	Internal/serialDr.def
UseDriver	Internal/parallDr.def

PrinterError	etype	word, 0, 2
PERROR_TIMEOUT		enum	PrinterError	; printer timeout error
PERROR_WARMUP		enum	PrinterError	; printer warming up
PERROR_SERVICE		enum	PrinterError	; printer needs servicing
PERROR_PAPER_MISFEED 	enum	PrinterError	; paper entry misfeed
PERROR_NO_PRINTER	enum	PrinterError	; no printer found
PERROR_NO_TONER		enum	PrinterError	; printer out of toner
PERROR_NO_PAPER		enum	PrinterError	; printer out of paper
PERROR_OFF_LINE		enum	PrinterError	; printer off line
PERROR_SERIAL_ERR	enum	PrinterError	; some serial port error
PERROR_PARALLEL_ERR	enum	PrinterError	; some parallel port error
PERROR_NETWORK_ERR	enum	PrinterError	; some network error
PERROR_SOME_PROBLEM	enum	PrinterError	; bogus BUSY condition
PERROR_FATAL		enum	PrinterError	; some port error that says
						;  job must be canceled.
PERROR_FILE_SYSTEM_FULL enum	PrinterError	; file system full
PERROR_FILE_SYSTEM_ERROR enum	PrinterError	; file system error
	
PERROR_NO_ERROR		equ	08000h		; no error detected

		; Spooler Error codes.  these are additions to the PrinterError

SpoolError	etype	word, PrinterError, 2
SERROR_NO_SPOOL_FILE		enum SpoolError ; can't find spool file
SERROR_NO_PRINT_DRIVER		enum SpoolError ; can't find print driver
SERROR_NO_PORT_DRIVER		enum SpoolError ; can't find port driver
SERROR_NO_PRINTERS		enum SpoolError ; no printers are available
SERROR_NO_MODE_AVAIL		enum SpoolError ; no possible print mode
SERROR_CANT_ALLOC_BITMAP 	enum SpoolError ; cant allocate a bitmap
SERROR_NO_VIDMEM_DRIVER 	enum SpoolError ; cant find vidmem driver
SERROR_MANUAL_PAPER_FEED 	enum SpoolError ; ask user for next piece
SERROR_CANT_LOAD_PORT_DRIVER 	enum SpoolError ; no port driver, verify test
SERROR_PORT_BUSY		enum SpoolError ; port is busy doing something
SERROR_TEST_NO_PAPER		enum SpoolError ; testing, but no paper
SERROR_TEST_OFFLINE		enum SpoolError ; testing, but offline
SERROR_TEST_PARALLEL_ERROR 	enum SpoolError ; testing, but some error
SERROR_MISSING_COM_PORT		enum SpoolError ; com port not available
SERROR_PRINT_ON_STARTUP		enum SpoolError ; continue suspended printing
SERROR_CANNOT_OPEN_FILE		enum SpoolError ; Cannot open output file
SERROR_CANNOT_CONVERT_PAGE	enum SpoolError	; Intelligent driver reported
						;  error from converting
						;  a page.
SERROR_RESERVATION_ERROR	enum SpoolError ; Cannot reserve
						; enough heapspace

;
; Make sure MAXIMUM_PRINTER_NAME_LENGTH is defined. We define it with equ
; so if it gets redefined later as a different value, it'll get flagged.
;
; Note that we can't always include spool.def here, as it defines object classes
; that depend on other things having been included, but which frequently aren't
; included by printer drivers and the like.
;
ifndef MAXIMUM_PRINTER_NAME_LENGTH

MAXIMUM_PRINTER_NAME_LENGTH	equ	64	; MAX_INITFILE_CATEGORY_LENGTH

endif

;-----------------------------------------------------------------------------
;		Port-dependent structures
;-----------------------------------------------------------------------------

		; maximum # of characters for device in a printer driver
MAX_DEVICE_NAME_SIZE	equ	40				

		; what type of port is the printer hooked to
PrinterPortType		etype	word, 0, 2
    PPT_SERIAL		enum PrinterPortType
    PPT_PARALLEL	enum PrinterPortType
    PPT_FILE		enum PrinterPortType
    PPT_NOTHING		enum PrinterPortType
    PPT_CUSTOM		enum PrinterPortType

		; serial port parameters
SerialPortParams struct
    SPP_portNum	SerialPortNum		; which port number
    SPP_format	SerialFormat		; #stop bits, parity, word length...
    SPP_mode	SerialMode		; XON/XOFF, ...
    SPP_baud	SerialBaud		; baud rate enum
    SPP_flow	SerialFlowControl	; hardware, software
    SPP_stopRem	SerialModem		; signal received that indicates STOP
    SPP_stopLoc	SerialModemStatus	; signal to send that indicates STOP
SerialPortParams ends
		
		; parallel port parameters
ParallelPortParams struct
    PPP_portNum	ParallelPortNum	; which port number
ParallelPortParams ends
		
		; print to file parameters
if DBCS_PCGEOS
FilePortParams	struct
    FPP_fileName wchar FILE_LONGNAME_BUFFER_SIZE/2 dup (?)
    FPP_path	wchar PATH_BUFFER_SIZE dup (?) ; allow complete path
    FPP_diskHandle word				; disk handle
    FPP_file	word				; file handle to close it
    FPP_unit	word				; unit number w/filestr driver
FilePortParams	ends
else
FilePortParams	struct
    FPP_fileName char FILE_LONGNAME_BUFFER_SIZE dup (?)
    FPP_path	char PATH_BUFFER_SIZE dup (?) ; allow complete path
    FPP_diskHandle word				; disk handle
    FPP_file	word				; file handle to close it
    FPP_unit	word				; unit number w/filestr driver
FilePortParams	ends
endif

SPOOL_MAX_CUSTOM_PARAMS	equ	128	; number of bytes allowed to hold
					;  parameters for a custom port
					;  driver.

CustomPortParams	struct
    CPP_unit	word			; junk. when port is opened, it holds
					;  the return from DR_STREAM_OPEN
    CPP_info	byte	SPOOL_MAX_CUSTOM_PARAMS dup(?)
CustomPortParams	ends

		
		; union of port parameters
PortParams	union
    PP_serial	SerialPortParams	; if serial port is used
    PP_parallel	ParallelPortParams	; if parallel port is used
    PP_file	FilePortParams		; if file is used
    PP_custom	CustomPortParams	; if custom is used
PortParams	end

		; Printer port info.
		; This structure is used to specify the attributes of the
		; port the printer is hooked up to.  To add more types,
		; add an enum to PrinterPortType, create a structure for
		; the parameters required for the port (like SerialPortParams)
		; and add this structure into the union PortParams.  Of course,
		; there also needs to be some code in the spooler to init
		; the right device...
PrintPortInfo	struct
    PPI_type	PrinterPortType			; serial, parallel...
    PPI_params	PortParams			; initializing info
PrintPortInfo	ends

		; this enum is stored in the JobParameters block by the
		; caller of SpoolAddJob and determines what the spooler
		; should do with the file when its finished
SpoolFileType	etype	byte, 0, 1
SFT_SAVE_FILE	enum	SpoolFileType	; save the spool file when done
SFT_DELETE_FILE	enum	SpoolFileType	; delete the spool file when done

		; this enum is stored in the JobParameters block by the
		; caller of SpoolAddJob and determines how the spooler
		; should order multiple copies.  It is ignored if there 
		; is only one copy to produce
SpoolCollate	etype	byte, 0, 1
SC_DONT_COLLATE	enum	SpoolCollate	; save the spool file when done
SC_COLLATE	enum	SpoolCollate	; delete the spool file when done

		; this enum is stored in the JobParameters block by the
		; caller of SpoolAddJob and forces the output to be 
		; rotated if set.  The spooler normally determines if the
		; output should be rotated by seeing if the document is in
		; landscape mode.  This flag can be used to force the output
		; to be printed (and perhaps tiled) in landscape fashion, and
		; might be used by a spreadsheet program to do sideways 
		; printing, for example.
SpoolRotate	etype	byte, 0, 1
SC_DONT_ROTATE	enum	SpoolRotate	; leave the output as is
SC_ROTATE	enum	SpoolRotate	; force rotation of output

		; this enum indicates whether the normal order of printing
		; should be followed (0->n), or whether a custom page ordering
		; should take place
SpoolOrder	etype	byte, 0, 1
SO_NORMAL_ORDER	enum	SpoolOrder
SO_CUSTOM_ORDER	enum	SpoolOrder

		; this enum indicated whether or not the document should
		; be "scaled-to-fit"
SpoolScale	etype	byte, 0, 1
SS_TILE		enum	SpoolScale
SS_SCALE_TO_FIT	enum	SpoolScale

		; this enum controls what the spooler does with the job when
		; the user shuts the system down while the job is queued. the
		; job can either be saved and restarted when the system is
		; restarted, or it can be canceled.
		;
		; the setting indirectly affects whether the spooler will
		; warn the user about the job when the shutdown is requested.
		; if the job is to be canceled, the user will *not* be warned.
		; the presumption is that the job was submitted by something
		; that is monitoring it and will be able to resubmit it itself
		; on restart. moreover that entity is expected to ask the user
		; whether s/he really wants to shut down; if the spooler were
		; to ask as well, it would be annoying.
SpoolShutdownJobAction	etype	byte, 0, 1
SSJA_SAVE_JOB		enum SpoolShutdownJobAction
SSJA_CANCEL_JOB		enum SpoolShutdownJobAction

		; this record is stored in the job parameters block and hold
		; various pieces of info about the job.
SpoolOptions		record
    SO_DELETE		SpoolFileType:1	; what to do with the file when done
    SO_COLLATE		SpoolCollate:1	; how to organize multiple copies
    SO_FORCE_ROT	SpoolRotate:1	; force rotation of output
    SO_REVERSE_ORDER	SpoolOrder:1	; print pages in reverse order
    SO_ODD_EVEN		SpoolOrder:1	; print odd, then even pages
    SO_SCALE		SpoolScale:1	; scale to fit or not
    SO_SHUTDOWN_ACTION	SpoolShutdownJobAction:1	; cancel or don't
    :1
SpoolOptions	end

		; this is the info passed to SpoolAddJob
if DBCS_PCGEOS
JobParameters	struct
		; DO NOT CHANGE THE ORDER OF THESE FIRST FOUR ITEMS
    JP_fname		wchar 13 dup (?) 	; std DOS (8.3) spool file name
    JP_parent		wchar FILE_LONGNAME_LENGTH+1 dup (?) ; name of par. app
    JP_documentName	wchar FILE_LONGNAME_LENGTH+1 dup (?) ; name of document
    JP_numPages		word			; # pages in document
    JP_printerName	wchar MAXIMUM_PRINTER_NAME_LENGTH dup (?) 
				; INI file category holding the printer name
			wchar (16 + 1) dup(?)	; unused space from when
						;  JP_printerName was too big
    JP_deviceName	wchar MAX_DEVICE_NAME_SIZE dup (?)   ; name of device
    JP_portInfo		PrintPortInfo <>	; union for type of port info
    JP_printMode	PrinterMode		; what mode we're printing in
    JP_paperSizeInfo	PageSizeReport		; paper size information
    JP_docSizeInfo	PageSizeReport		; document size information
    JP_spoolOpts	SpoolOptions <>		; delete file or not 
    JP_numCopies	byte			; how many to print
    JP_timeout		word			; timeout value to use
    JP_retries		byte			; maximum number of retries
    JP_size		word			; size of the JobParameters
    JP_printerData	word 10 dup (?)		; printer-specific data
JobParameters	ends
else
JobParameters	struct
		; DO NOT CHANGE THE ORDER OF THESE FIRST FOUR ITEMS
    JP_fname		char 13 dup (?) 	; std DOS (8.3) spool file name
    JP_parent		char FILE_LONGNAME_LENGTH+1 dup (?) ; name of par. app
    JP_documentName	char FILE_LONGNAME_LENGTH+1 dup (?) ; name of document
    JP_numPages		word			; # pages in document
    JP_printerName	char MAXIMUM_PRINTER_NAME_LENGTH dup (?) 
				; INI file category holding the printer name
			char (16 + 1) dup(?)	; unused space from when
						;  JP_printerName was too big
    JP_deviceName	char MAX_DEVICE_NAME_SIZE dup (?)   ; name of device
    JP_portInfo		PrintPortInfo <>	; union for type of port info
    JP_printMode	PrinterMode		; what mode we're printing in
    JP_paperSizeInfo	PageSizeReport		; paper size information
    JP_docSizeInfo	PageSizeReport		; document size information
    JP_spoolOpts	SpoolOptions <>		; delete file or not 
    JP_numCopies	byte			; how many to print
    JP_timeout		word			; timeout value to use
    JP_retries		byte			; maximum number of retries
    JP_size		word			; size of the JobParameters
    JP_printerData	word 10 dup (?)		; printer-specific data
JobParameters	ends
endif
;-----------------------------------------------------------------------------
        ; Text printing structures.  The text printing code builds
        ; out a list of strings that it needs to send to the driver,
        ; sorted in y order.  An LMem block is allocated to hold
        ; the strings, and the whole page is scanned (using DrawString
        ; before any text is sent.  This allows the text strings to
        ; be placed anywhere on the page at any point in the gstring.
;
;
;       New style run info structure. The text is accumulated in ordered
;       chunks along with the position, and a pointer to the TextAttributes
;       elememt that matches it. The structure is called the StyleRunInfo
;       structure, and it follows:

StyleRunInfo    struc
        SRI_yPosition   word            ;Yposition of this text.
        SRI_xPosition   word            ;Xposition of this text.
        SRI_numChars    word            ;number of characters in this run
        SRI_stringWidth WBFixed         ;width of characters in this run
        SRI_attributes  word            ;element number of this text's
					;attibute.
SBCS <  SRI_text        char >          ;text follows (DO NOT USE SIZE OF THIS
DBCS <  SRI_text        wchar >         ;text follows (DO NOT USE SIZE OF THIS
StyleRunInfo    ends                    ;STUCTURE IN ANYTHING!)

;       The Attributes structure includes anything that the printer can use for
;       setting fonts and styles at the printer. It is an element array pointed
;       into from the StyleRunInfo array. Most of these are out of the TextAttr
;       structure defined in the kernal graphics.def. The important difference
;       is the ommision of the clearing fields for style and text mode.
;
TextAttrInfo    struc
    TAI_meta		 RefElementHeader	 ; doo for the element array
    TAI_color            RGBValue <0,0,0>        ; RGB values or index
    TAI_mask             SystemDrawMask          ; draw mask
    TAI_style            word                    ; text style bits to set
                                                 ; (printer format)
    TAI_mode             TextMode                ; text mode bits to set
    TAI_spacePad         WBFixed                 ; space padding
    TAI_font             FontID                  ; typeface
    TAI_size             WBFixed                 ; point size
    TAI_trackKern        sword                   ; track kerning
    TAI_fontWeight       FontWeight              ; weight of font
    TAI_fontWidth        FontWidth               ; width of font
TextAttrInfo    ends

;       These two structures , built out in the same lmem segment are all that
;       are needed to format the page from the spooler point of view. The
;       print driver now has the responsibility of positioning them, and
;       setting the font info in the printer.

                ; structure for entire block
TextStrings     struc
	TS_header   LMemBlockHeader <>		; required header part
	TS_testAttribute    TextAttrInfo	; text attribute element to add
	TS_textOffset	word			; offset past gstring struc
	TS_gsBuffer lptr			; handle of gstring buffer
	TS_styleRunInfo     lptr.StyleRunInfo	; handle of Text strings buffer
	TS_textAttributeInfo lptr.TextAttrInfo	; handle of attributes buffer
TextStrings     ends
;-----------------------------------------------------------------------------

;
; Tiramisu printing:  Print faxes in a user-storage-efficient manner.
; If the first non-GR_COMMENT element in the spooled gstring is a
; GR_ESCAPE with the GR_SPOOL_SWATH_LIBRARY_ESCAPE opcode, we use the
; SpoolSwathEscapeData to fetch the swath to print instead of the standard
; GrDrawGString.
;

GR_SPOOL_SWATH_LIBRARY_ESCAPE	equ	GR_FIRST_GEOWORKS_ESCAPE

SpoolSwathEscapeData	struct
	SSE_startJob	word		; StartJob entry point number
	SSE_fetchSwath	word		; FetchSwath entry point number
	SSE_endJob	word		; EndJob entry point number
	SSE_libDisk	word		; StandardPath in which to find library
	SSE_libPath	PathName	; null-terminated path to the library
	SSE_data	label	byte	; data to pass to StartJob routine
SpoolSwathEscapeData	ends

EndLibrary	spool
