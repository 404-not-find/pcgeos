/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996.  All rights reserved.
	GEOWORKS CONFIDENTIAL

PROJECT:	Dove
MODULE:		Memo Library
FILE:		memoLib.goh

AUTHOR:		Peter Trinh, Oct 10, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ptrinh	10/10/96   	Initial version.

DESCRIPTION:

	Defines the following new classes: MemoDocumentClass, MemoInkClass, 
	and MemoTextClass.

	$Id: memoLib.goh,v 1.1 97/04/04 15:59:41 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@deflib memolib

#include <geos.h>
#include <lmem.h> 
#include <ec.h>
#include <geoworks.h>
#include <localize.h>
@include <stdapp.goh>
@include <pen.goh>
@include <Objects/vLTextC.goh>
@include <Objects/gDocC.goh>
@include <Objects/vCntC.goh>
@include <Objects/gItemGC.goh>
@include <Objects/gValueC.goh>
@include <gcnlist.goh>


/********************************************************************
 *              Constants
 *******************************************************************/

/* Default character width of document. */
#define DEFAULT_DOC_WIDTH_CHAR 76
  /* 76 characters (half-width chars for DOVE ) */

/* Document dimension in terms of characters */
#define MAX_DOC_WIDTH_CHAR 80
  /* 80 characters (half-width chars for DOVE) */

/* 
 * DOVE character dimension:
 *   half-width chars: 6pts x 12pts  (6 pts wide)
 *   full-width chars: 12pts x 12pts
 */

/* Size of Dove screen. */
#define DEFAULT_DOC_WIDTH (6 * DEFAULT_DOC_WIDTH_CHAR + 1)
  /* Calculate using half-width dimensions. */
#define DEFAULT_DOC_HEIGHT (12 * 20)
  /* 20 lines visible on screen. */
  

/********************************************************************
 *              Data Types
 *******************************************************************/
typedef struct {
  LMemBlockHeader MMBH_reserved;
  optr            MMBH_ink;       /* VMHandle:lptr */
  optr            MMBH_text;      /* VMHandle::lptr */
  word            MMBH_extraInfo; /* Application use */
} MemoMapBlockHeader;

typedef enum {
  /* 
   * The enumeration can not start at 0, because the value 0 is used to
   * disable the TextInkController via GCN notification.
   */
  TIM_INK = 0x0001,
  TIM_TEXT
} TextInkMode;

typedef enum {
  ASSERTION_FAILED,
  /*
   * Check the code for comments as to why the assertion failed.
   */
} FatalErrors;
extern FatalErrors fatalErrors;  /* For swat to use. */

typedef enum {
  MEMO_DOCUMENT_OBJECT_NOT_INITIALIZED,
  /*
   * Basically, certain messages are sent to the object before its instance
   * instance data is initialized.
   */
} Warnings;

/*
 * TextInkControl feature flags.
 */
typedef WordFlags TICFeatures;
#define TICF_PRESENT 0x0001

typedef WordFlags TICToolboxFeatures;
#define TICTF_PRESENT 0x0001


/********************************************************************
 *              Exported Routines
 *******************************************************************/
extern optr
MemoDocumentGetTextObj( VMFileHandle fileHandle );
/*
 * Retrieves the text object from the given Memo document.
 * Has the side-effect of bringing the object into memory if it's not
 * already in memory.
 */

extern optr
MemoDocumentGetInkObj( VMFileHandle fileHandle );
/*
 * Retrieves the ink object from the given Memo document.
 * Has the side-effect of bringing the object into memory if it's not
 * already in memory.
 */

extern Boolean
MemoDocumentImportText( VMFileHandle docFile, FileHandle textFile,
		           DosCodePage codePage );
/*
 * Given a MemoDocument file and a text file, this routine will append 
 * the raw text to the end of the MemoDocument file.
 * If *codePage == CODE_PAGE_CURRENT, then no conversion will be done,
 * else the text will undergo a LocalDosToGeos conversion before being
 * appended.
 * Returns: TRUE on success.
 */

extern word
MemoDocumentCreateDoc( TCHAR *docName, VMFileHandle *docHandle );
/*
 * Create an empty Memo document with the given docName in the working
 * directory.  The new document will overwrite existing document.
 *
 * The new document has these attributes set:
 *	Document Token		- {MEMO, MANUFACURER_ID_GEOWORKS}
 *	Document Protocol	- 1.0
 *	Document Release	- Release of application geode.
 *	Document Creator	- GeodeToken of application.
 *
 * Returns: VM_CREATE_OK on success
 *          *fileHandle - new file handle on success
 */

/********************************************************************
 *              Class Definitions
 *******************************************************************/

/*
 * We're subclassing the InkClass to psuedo-support 32-bit coordinates
 * and to add new ink data handling.  For Dove 2, we will move all of
 * this code and create a new InkLargeClass that fully supports 32-bit
 * coordinates.
 *
 * Psuedo-support means that we are currently handling 32-bit mouse
 * pointer messages by clipping them to 16-bit and we still have a 
 * 16-bit bound restriction.  This restriction implies that we will
 * have a limit of about 20 11" pages of text.
 *
 */
@class MemoInkClass, InkClass;
/*
 * Get the bounds of the ink data.  Will move this functionality to the
 * InkClass object.
 */
@message Boolean MSG_MEMO_INK_GET_INK_BOUNDS( Rectangle *bounds );
/*
 * InkObject.VI_bound.R_right = InkData.bound.R_right;
 * InkObject.VI_bound.R_bottom = InkData.bound.R_bottom;
 */
@message void MSG_MEMO_INK_COMPRESS_VIS_BOUNDS();
/*
 * Deletes all the ink data.
 */
@message void MSG_MEMO_INK_CLEAR_ALL_INK();

@endc


/*
 * We subclass the VisLargeText object to add additional functionalities
 * like inserting date and time.  Also, the subclass will allow support
 * of the overlaying of text and ink.
 */
@class MemoTextClass, VisLargeTextClass;
/*
 * Returns the height and width of the text object.  These are 32-bit
 * values to reflect the "large" characteristics.
 */
@message void MSG_MEMO_TEXT_GET_SIZE( dword *width, 
				      dword *height );
/*
 * Message to insert the date and time at the cursor location.
 */
@message void MSG_MEMO_TEXT_INSERT_DATE_TIME();

@endc


@class MemoDocumentClass, GenDocumentClass;

@uses VisContentClass;
/*
 * Message to retrieve instance data MDI_text and MDI_ink respectively.
 * Note: these two values will be set only after the MemoDocumentClass object
 * has handled MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT, and will be cleared
 * after MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT is handled.
 */
@message optr MSG_MEMO_DOCUMENT_GET_TEXT_OBJ();
@message optr MSG_MEMO_DOCUMENT_GET_INK_OBJ();
/*
 * Retrieves the instance data MDI_mode.
 */
@message TextInkMode MSG_MEMO_DOCUMENT_GET_INPUT_MODE();

/*
 * Message sent out to tell the document which object should get the 
 * input currently.
 */
@message void MSG_MEMO_DOCUMENT_SET_INPUT_MODE( TextInkMode mode = cx);
/*
 * Message to clear out all of the text or ink data depending on the passed
 * mode.
 */
@message void MSG_MEMO_DOCUMENT_CLEAR_DATA( TextInkMode mode );
/*
 * Message to set the width of the document.  The width is given in terms
 * of number of characters.  This message is only meaningful if the font
 * is fixed-width, else the MemoDocumentClass object will use the median
 * font-width for its caculation.
 */
@message void MSG_MEMO_DOCUMENT_SET_WIDTH( word width );

/*
 * Message sent when either of the children object changes size.  The
 * MemoDocumentClass object's dimensions will always be the max width and
 * max height of both children.
 */
@message void MSG_MEMO_DOCUMENT_RESIZE();

/*
 * Display the setup-dialog box.  Will handle the changed setting values.
 */
@message void MSG_MEMO_DOCUMENT_INITIATE_SETUP_DIALOG();

/*
 * Imports the specified file in DocumentCommonParams (important fields are
 * DCP_name, DCP_diskHandle, DCP_path).
 */
@message void MSG_MEMO_DOCUMENT_IMPORT_TEXT( DocumentCommonParams *dcp, 
					     DosCodePage codePage );


/*************************************************************************
 * INTERNAL_MESSAGES
 * -----------------
 * These messages are not meant to be used by developers, thus there will
 * be no support given to them.
 *************************************************************************/

/*
 * This message is sent by the GenValue object in the setup-dialog box to
 * indicate a change in the document width.
 */
@message (GEN_VALUE_APPLY_MSG) MSG_MEMO_DOCUMENT_WIDTH_CHANGED;

/*************************************************************************
 * MemoDocumentClass Instance Data
 *************************************************************************/
@instance optr MDI_text = NullOptr;  	/* text object in memory */
@instance optr MDI_ink = NullOptr;   	/* ink object in memory */
@instance TextInkMode MDI_mode = TIM_TEXT;	/* current mode */

@endc


/*
 * For the text ink toggling buttons.
 */
@class TextInkControlClass, GenControlClass;
/*
 * Internal:  This apply message is sent to ourself when the user triggers 
 * a status change in the controller, ie. the user selects a new mode.
 * "selection" is of type TextInkMode.  The default handler sends a
 * MSG_MEMO_DOCUMENT_SET_INPUT_MODE TO_APP_TARGET.
 */
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_TIC_SET_INPUT_MODE;

@endc

/*
 * TextToolsClass: will become visible if in text-mode.  The class
 * provides a handler for NECGACNLT_TEXT_INK_MODE_CHANGE notifications.
 * The handler will set the object USABLE if in text-mode, and set
 * NOT_USABLE otherwise.
 *
 * NOTE: The object must be added to the gcnlist:
 *	MANUFACTURER_ID_NEC, NECGACNLT_TEXT_INK_MODE_CHANGE
 */
@class TextToolsClass, GenInteractionClass;
@endc

/*
 * InkToolsClass: will become visible if in ink-mode.  The class
 * provides a handler for NECGACNLT_TEXT_INK_MODE_CHANGE notifications.
 * The handler will set the object USABLE if in ink-mode, and set
 * NOT_USABLE otherwise.
 *
 * NOTE: The object must be added to the gcnlist:
 *	MANUFACTURER_ID_NEC, NECGACNLT_TEXT_INK_MODE_CHANGE
 */
@class InkToolsClass, GenInteractionClass;
@endc

/*
 * TextInkToolBoxClass: will become visible only if a MemoDocumentClass
 * object has the focus excl.  It provides a handler for the 
 * NECGACNLT_TEXT_INK_MODE_CHANGE notifications which will set itself
 * USABLE if in either text or ink mode, and NOT_USABLE otherwise.
 *
 * NOTE: The object must be added to the gcnlist:
 *	MANUFACTURER_ID_NEC, NECGACNLT_TEXT_INK_MODE_CHANGE
 */
@class TextInkToolBoxClass, GenInteractionClass;
@endc

@endlib
