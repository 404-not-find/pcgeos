/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996.  All rights reserved.
	GEOWORKS CONFIDENTIAL

PROJECT:	
MODULE:		
FILE:		datax.goh

AUTHOR:		Robert Greenwalt, Dec 11, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	robertg	12/11/96   	Initial version.

DESCRIPTION:

	

	$Id: datax.goh,v 1.1 97/04/04 15:59:29 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <Objects/gAppC.goh>

@ifndef __DATAX_GOH
@define __DATAX_GOH

@deflib datax

/********************************************************************
		Class definitions
********************************************************************/

@class	DataXApplicationClass, GenApplicationClass;
@instance optr DXA_iacpInitParameters;
@endc


/********************************************************************
		Enumerated types
********************************************************************/

/* DataXReturnType Definitions */
typedef word				DataXReturnType;
#define DXRT_NO_ERROR			0x0001
#define DXRT_BAD_PIPE_DESC		0x0002
#define DXRT_MEM_ERROR			0x0003
#define DXRT_NON_REENTRANT_ELEMENTALREADY_IN_USE	0x0004
#define DXRT_GEODE_TABLE_FULL		0x0005
#define DXRT_IACP_ERROR			0x0006

/* DXInfoWord Definitions */
typedef word				DXInfoWord;
#define DXIW_NULL			0x0000
#define DXIW_INITIALIZE			0x0001
#define DXIW_POST_THREAD_INITIALIZE	0x0002
#define DXIW_CLEAN_SHUTDOWN		0x0003
#define DXIW_ERROR			0x0004
#define DXIW_NON_SYSTEM_INFO_WORDS	0x0040
#define DXIW_DEFAULT_BEHAVIOR		0x0041
#define DXIW_OPEN			0x0042
#define DXIW_CLOSE			0x0043
#define DXIW_DONE			0x0044
#define DXIW_IMPORT 			0x0045
#define DXIW_EXPORT			0x0046
#define DXIW_SINGLE_RECORD_EXPORT	0x0047
#define DXIW_ALL_RECORDS		0x0048
#define DXIW_PARTIAL_RECORDS		0x0049
#define DXIW_DEVICE_ID			0x004A
#define DXIW_USER_DEFINED		0x8000

/* DXErrorType Definitions */
typedef word				DXErrorType;
#define DXET_NO_ERROR			0x0000
#define DXET_REENTRANT			0x0001
#define DXET_NOT_REENTRANT		0x0002
#define	DXET_INVALID_DXIW		0x0003
#define DXET_INVALID_DATA		0x0004
#define DXET_USE_INHERITED_BEHAVIOR	0x0005
#define	DXET_MEM_ALLOC_ERROR		0x0006
#define DXET_RECOVERABLE_ERROR		0x0007
#define DXET_FATAL_ERROR		0x0008
#define DXET_INVALID_DEVICE_SIGNATURE	0x0009
#define DXET_NON_SYSTEM_ERRORS		0x0080
#define	DXET_DATABASE_ERROR		0x0081

/* DXFlags */
typedef DXFlags;
#define DXF_FINAL			0x8000

/* DataXStartupFlags */
typedef word 				DataXStartupFlags;
#define	DXSF_PROTOCOL_ERROR		0x8000
#define	DXSF_REENTRANT			0x4000
#define	DXSF_MEMORY_ERROR		0x2000


/* DXPipeDirection */
typedef byte				DXPipeDirection;
#define DXD_LEFT			0x01
#define DXD_RIGHT			0x02


#define DATA_EXCHANGE_NEW_RECORD	-1

/********************************************************************
		DataStructures	
********************************************************************/

typedef struct {
	MemHandle		DXPD_dataBuffer;
	word			DXPD_elementCount;
} DataXPipeDescriptor;


/* DXPD_firstElement
 *
 * This macro returns the first element of the DataXPipe which resides at 
 * the end of a DataXPipeDescriptor
 *
 */
#define DXPD_firstElement(p) 	((char *)p + sizeof(DataXPipeDescriptor));


typedef struct {
	GeodeToken		DXED_geodeToken;
	DXInfoWord		DXED_initialInfoWord;
	dword			DXED_initialMiscInfo;
} DataXElementDescriptor;


typedef struct {
	Handle			DXI_dataBuffer;
	word			DXI_dataSegment;
	word			DXI_bufferSize;
	word			DXI_dataSize;
	DXFlags			DXI_flags;
	DXInfoWord		DXI_infoWord;
	dword			DXI_miscInfo;
	word			DXI_protoMajor;
	word			DXI_protoMinor;
	Handle			DXI_intSemaphoreLeft;
	Handle			DXI_extSemaphoreLeft;
	Handle			DXI_intSemaphoreRight;
	Handle			DXI_extSemaphoreRight;
} DataXInfo;


typedef struct {
	word			PEH_customRoutines;
	dword			PEH_defaultRoutine;
	DataXInfo *		PEH_dataXInfo;
	word			PEH_dgroup;
	DXPipeDirection		PEH_pipeDirection;
	DXPipeDirection		PEH_pipeToggle;
	Handle			PEH_intSemaphoreLeft;
	Handle			PEH_extSemaphoreLeft;
	Handle			PEH_intSemaphoreRight;
	Handle			PEH_extSemaphoreRight;
} PipeElementHeader;

typedef	struct {
	PipeElementHeader *	DXBA_elementHeader;
	void *			DXBA_customData;
	DataXInfo *		DXBA_dataXInfo;
} DataXBehaviorArguments;


/* PEH_customData(p)
 *
 * pass: p = PipeElementHeader *
 *
 * Returns a pointer to the customData.  The custom data resides at the end
 * of the PipeElementHeader.  This macro provides an easy way of getting
 * the custom data pointer from the PipeElementHeader pointer by passing in 
 * a pointer to the PipeElementHeader.
 * 
 */
#define PEH_customData(p)	((char *)p + sizeof(PipeElementHeader))


/* 
 * PEH_routineOffset(size)
 * 
 * pass: size = size of custom data
 *
 * Returns the offset from the PEH.  The routines follow the PipeElementHeader
 * and the custom data.  This macro provides a way of calculating the offset
 * to the routine table
 *
 */
#define PEH_routineOffset(size) (sizeof(PipeElementHeader) + size)


/********************************************************************
		Exported functions
********************************************************************/

extern DataXReturnType _pascal DXOpenPipe(hptr pipeDescription);
/*
 *	Desc:	Caller wants to open a particular data pipe.
 *	Pass:	pipeDescription - a buffer containing a DataXPipeDescriptor 
 *			followed by a set of DataXElementDescriptors 
 *			establishing startup parameters and pipe order
 *			from left to right.
 *	Return:	DataXReturnType
 *	Note:	You must not mess with the contents of pipDescription 
 *			after opening the pipe.  This buffer is used by
 *			the data exchange library.
 */


extern DataXReturnType _pascal DXClosePipe(hptr pipeDescription);
/*
 *	Desc:	Caller wants to close a particular data pipe.
 *	Pass:	pipeDescription - same handle used to open the pipe
 *	Return:	DataXReturnType
 */


extern void _pascal DXInternalClosePipe(DataXBehaviorArguments *toArgs);
/*
 *	Desc:	Called from inside a pipe.  Kills the pipe.  Does not return.
 *		Frees PipeElementHeader.
 *	Pass:	ptr to the DataXBehaviorArguments
 *	Return:	Doesn't.
 */

extern void _pascal DXManualPipeCycle(DataXBehaviorArguments *toArgs);
/*
 *	Desc:	Called from inside the pipe, it causes the pipe to
 *		cycle (we sleep and the next element takes over) from
 *		within a behavior.  Very useful for behaviors that
 *		must do enumerating callbacks.
 *	Pass:	ptr to the DataXBehaviorArguments
 *	Returns:nothing, but you must resample everything: data buffer
 *			segment, DXI_infoWord, etc may have changed
 */

extern DataXReturnType _pascal DXManualBehaviorCall(DataXBehaviorArguments *toArgs);
/*
 *	Desc:	Called from inside the pipe, it calls a behavior from
 *		within another.  Useful for dealing with a pipe state
 *		change while doing an enumerating callback.  For example:
 *			Exporting records.  Enumerate
 *				have record, write it to buffer and
 *					cycle
 *				check incoming infoWord, continue
 *					exporting - have next record,
 *					write to buffer and cycle
 *				check incoming infoWord - indicates
 *					state change (error, done,
 *					something) so stop exporting.
 *				Deal with new word (DXMANUALBEHAVIORCALL)
 *					and return its return value
 *	Pass:	DXI_infoWord filled in
 *		fptr to DataXBehaviorArguments
 *	Returns:DXET value
 */

extern void _pascal DXSetDXIDataBufferSize(DataXInfo *info, word size);
/*
 *
 */

extern void _pascal ECDXCheckPEH(PipeElementHeader *peh);
/*
 *	Desc:	Called to verify a PipeElementHeader structure
 * 	Pass:   A PipeElementHeader structure reference
 *	Return: Ok if success, FatalError else
 */

extern void _pascal ECDXCheckDataXInfo(DataXInfo *info);
/*
 * 	Desc:	Called to verify a DataXInfo structure
 *	Pass:	A DataXInfo structure reference
 *	Return: Ok if success, FatalError else
 */

extern void _pascal ECDXCheckDataXBehaviorArguments(DataXBehaviorArguments *toArgs);
/*
 * 	Desc:	Called to verify you DataXBehaviorArguments structure
 *	Pass:	A DataXBehaviorArguments structure reference
 *	Return: Ok if success, FatalError else
 */


/*************************************************************************
 		Behavior form
**************************************************************************/

typedef	DXErrorType _cdecl (*BehaviorCallback) (DataXBehaviorArguments args);


/********************************************************************
		DataStructures, cont'd 
********************************************************************/

typedef struct {
	DXInfoWord		RTE_infoWord;
	BehaviorCallback	RTE_routine;	/* low word (offset) used to store
						 * custom data size in the null
                                                 * termination element */
} RoutineTableEntry;

@ifdef __HIGHC__
pragma Alias(DXOpenPipe, "DXOPENPIPE");
pragma Alias(DXClosePipe, "DXCLOSEPIPE");
pragma Alias(DXInternalClosePipe, "DXINTERNALCLOSEPIPE");
pragma Alias(DXManualPipeCycle, "DXMANUALPIPECYCLE");
pragma Alias(DXManualBehaviorCall, "DXMANUALBEHAVIORCALL");
pragma Alias(DXSetDXIDataBufferSize, "DXSETDXIDATABUFFERSIZE");

#if ERROR_CHECK
pragma Alias(ECDXCheckPEH, "ECDXCHECKPEH");
pragma Alias(ECDXCheckDataXInfo, "ECDXCHECKDATAXINFO");
#endif

@endif

@endlib

