/**********************************************************************
 *
 *	Copyright (c) Designs in Light 2002 -- All Rights Reserved
 *
 * PROJECT:        Mail	
 * MODULE:	   Mail
 * FILE:	   mime.goc
 * 
 * DESCRIPTION:
 *      Definitions for BBXMail library
 * 
 ****************************************************************************/

@ifndef __BBXMLIB__
@define __BBXMLIB__

@deflib bbxmlib

@include <socket.goh>
@include <sockmisc.h>

#define CR  0xd
#define CR_SIZE 1
#define LF  0xa
#define CRLF_WORD ((CR)|(LF << 8))
#define CRLF_SIZE 2


#define MAX_DOMAIN_LEN MAX_IP_ADDR_STRING_LENGTH_ZT

/* ERRORS depend on no socket specific errors being as high as 0xea */
typedef enum {
    ME_NONE = 0,
    ME_DELAYED_RESPONSE = 0xea01,
    ME_HOST_NOT_RESOLVED,
    ME_LOGIN_FAILED,
    ME_SERVER_CLOSED,
    ME_HOST_NOT_ACTIVE,
    ME_OUT_OF_MEMORY,
    ME_NETWORK_ERROR,
    ME_MESSAGE_TOO_LARGE,
    ME_ALL_BAD_RECIPIENTS,
    ME_SOME_BAD_RECIPIENTS,
    ME_NO_RECIPIENTS,
    ME_FILE_ERROR,
    ME_PROTOCOL_NOT_SUPPORTED,
    ME_POP3_HEADER_TOO_LARGE,
    ME_UNEXPECTED_VALUE,
    ME_COULD_NOT_OPEN_FILE,
    ME_SMTP_SERVER_FAILED_TO_RESPOND,
    ME_FAILED_TO_CONNECT_TO_SMTP,
    ME_USER_INTERRUPTED,
    ME_UIDL_NOT_SUPPORTED
} MailError;

typedef struct {
    TcpAccPntExtendedAddress MAPA_address;
    char MAPA_addressBuffer[MAX_IP_ADDR_STRING_LENGTH_ZT];
} MailAccPntAddress;

/*
 * Encoding type.
 */
typedef enum {
    ENCODE_QUOTED_PRINTABLE,        /* RFC1521 and RFC1522 */
    ENCODE_BASE64,                  /* RFC1521 */
    ENCODE_US_ASCII,                /* US-ASCII encoding */
    ENCODE_NONE                     /* No encoding was done */
} SMTPEncodingType;

/*
 * A content-type is in MIME format. You should use these constants
 * whenever possible. Any type begining with "xgw" is type that
 * has been converted to fit Geoworks clients. So, normally you would
 * register a content-handler in your director to handle "text/xgw-html"
 * rather than "text/html" because you want parsed tokens rather than
 * raw html text.
 *
 *  HT_CONTENT_TYPE_TEXT_XGW_HTML
 *    This is parsed HTML tags from SGML, may have illegal nested tags.
 *    
 *  HT_CONTENT_TYPE_TEXT_XGWP_HTML
 *    This is parsed HTML tags from HTMLP, sticks to HTML DTD 3.2 
 *    context free grammar 
 *
 *  HT_CONTENT_TYPE_STAR_STAR
 *    This is a sink content type. The library will stop building
 *    stream handlers when a stream that outputs STAR_STAR is encountered.
 *    This is also a content type that can take anything. Becareful! 
 *    If you register a content-type take STAR_START, you must handle
 *    all the raw data.
 *
 *  HT_CONTENT_TYPE_UNKNOWN
 *    This is not the same application/octet-stream. TYPE_UNKNOWN means
 *    that we have not parsed any headers/data to determine its content
 *    type.
 *
 *  HT_WWW_MIME
 *    This is a Geoworks (indicated by xgw) MIME converter. 
 *
 *  HT_WWW_DEBUG
 *    This is a Geoworks (indicated by xgw) Debugging stream.
 *
 *  HT_WWW_GUESS
 *    This is a Geoworks (indicated by xgw) Guess stream.
 *
 *  HT_WWW_FILE_CACHE
 *    This is a Geoworks (indicated by xgw) File Cache stream.
 *
 */

typedef enum {
    CONTENT_TYPE_APPLICATION_OCTET_STREAM,
    CONTENT_TYPE_MULTIPART_MIXED,
    CONTENT_TYPE_MULTIPART_ALT,
    CONTENT_TYPE_MULTIPART_RELATED,
    CONTENT_TYPE_MULTIPART_RPT,
    CONTENT_TYPE_TEXT_PLAIN,
    CONTENT_TYPE_TEXT_HTML,
    CONTENT_TYPE_TEXT_ENRICHED,
    CONTENT_TYPE_TEXT,
    CONTENT_TYPE_IMAGE_GIF,
    CONTENT_TYPE_IMAGE_JPEG,
    CONTENT_TYPE_MESSAGE,
    CONTENT_TYPE_UNKNOWN,
} ContentType;

typedef enum {
    CHARSET_TYPE_ISO_8859_1,
    CHARSET_TYPE_US_ASCII,
    CHARSET_TYPE_OTHER,
} CharsetType;

#define NUM_CHARSET_TYPES 2
#define MAX_CHARSET_TYPE_LEN 11

typedef struct {
    ContentType         CTR_type;
    CharsetType         CTR_charset;
    optr                CTR_typeString;
    optr                CTR_parameters;
} ContentTypeRecord;

/* Universal Buffer sizes and limits
 */
#define CONTENT_TYPE_NAME_BUFFER 40

#define QP_ENCODING_CHUNK 512
#define QP_BUFFER_SIZE    QP_ENCODING_CHUNK*3+1

#define BASE64_ENCODING_CHUNK 57*9    /* 57 bytes encoded in 76 bytes */
#define BASE64_ENCODED_SIZE   57*12+1 /* 4/3*BASE64_ENCODING_CHUNK+1 */

/* This is the max client name length for the client passed to Mailout_Open 
 * or Mailout_In
 */
#define MAX_CLIENT_NAME_LENGTH 50
#define MAX_HEADER_SIZE 8192

/* Buffer size used to retrieve fields from a message header
 */
#define FIELD_BUFFER_BLOCK_SIZE 4096

/* Buffer size to retrieve field names from a message header
 */
#define MAX_FIELD_NAME_LENGTH 30

/*
 * Maxmimum length of a single line in a mail message
 */
#define MAX_LINE_LEN 1000

/* 
 * Length of SMTPMI_to, SMTPMI_cc, and SMTPMI_bcc lists. Used to interate
 * through the three lists in MSG_SMTPM_PUT_RECEIVER.
 *
 * word            MM_toCount;
 * word            MM_ccCount;
 * nword            MM_bccCount;
 */
typedef struct {
    MemHandle      MM_senderEmail;
    SMTPEncodingType MM_senderEnc;
    MemHandle      MM_storageBlock;
    ChunkHandle    MM_to;
    ChunkHandle    MM_cc;
    ChunkHandle    MM_bcc;
    ChunkHandle    MM_from;
    ChunkHandle    MM_subject;
    ChunkHandle    MM_attachment;
    ChunkHandle    MM_fileName;
    ChunkHandle    MM_path;
    SMTPEncodingType MM_subjectEnc;
    FileHandle     MM_bodyFile;   /* If sending from a file */
    int            MM_bodyOffset; /* offset to the end of the header
				   * and the start of the body */
    Boolean        MM_gotBody;
    MemHandle      MM_boundary;
    MemHandle      MM_header;
    word           MM_parseState;
    dword          MM_size;       /* size of the message body */
    dword          MM_remainingSize;
    int            MM_msgNumber;
    void          *MM_progressRoutine;
} MailMessage;

/*
 * Macros to use Libary dgroup.
 */
#ifdef __HIGHC__

#ifndef PUSHDS
#define PUSHDS	_inline(0x1e)	/* push	ds */
#endif

#ifndef POPDS
#define POPDS	_inline(0x1f)	/* pop	ds */
#endif

#endif

#ifdef __BORLANDC__

#ifndef PUSHDS
#define PUSHDS  asm{push ds}
#endif

#ifndef POPDS
#define POPDS   asm{pop  ds}
#endif

#endif

#ifndef SET_DS_LIB_DGROUP
#define SET_DS_LIB_DGROUP GeodeLoadDGroup (GeodeGetCodeProcessHandle())
                                /* destroys ds! */
#endif


/*
 * Use the macros since they are LOT faster than the system versions. 
 */
#define ISWHITE(c) \
	(((c==' ') || (c>=9 && c<=13)) ? TRUE : FALSE)

#define ISDIGIT(c) \
	((c>='0' && c<='9') ? TRUE : FALSE)

#define ISALPHA(c)  \
	(((c>='a' && c<='z') || (c>='A' && c<='Z')) ? TRUE : FALSE)

#define ISALNUM(c) \
	((ISALPHA(c) || ISDIGIT(c)) ? TRUE : FALSE)

#define TOLOWER(c) \
        (((c>='A') && (c<='Z')) ? c+32 : c)

#define TOUPPER(c) \
        (((c>='a') && (c<='z')) ? c-32 : c)

#define ISTSPECIAL(c) \
    (((c == '(') || (c == ')') || (c == '<') || (c == '>') || (c == '@') \
      || (c == ',') || (c == ';') || (c == ':') || (c == '\\') \
      || (c == '"') || (c == '/') || (c == '[') || (c == ']') \
      || (c == '?') || (c == '=')) ? TRUE : FALSE)
      

typedef WordFlags MailParseAddressFlags;
#define MPAR_HAS_AT        0x0001  /* has @ */
#define MPAR_HAS_DOT       0x0002  /* has . following @ */
#define MPAR_HAS_USER      0x0004  /* has user before @ */
#define MPAR_HAS_DOMAIN    0x0008  /* has domain after @ */
#define MPAR_HAS_EXT       0x0010  /* has extension after . after @ */

#define MPAR_OK (MPAR_HAS_AT|MPAR_HAS_DOT|MPAR_HAS_USER|MPAR_HAS_DOMAIN|MPAR_HAS_EXT)


#define MPARC_ADDRESSES(mh)  ConstructOptr(mh, sizeof(LMemBlockHeader))
#define MPARC_NAMES(mh)      ConstructOptr(mh, sizeof(LMemBlockHeader)+2)
#define MPARC_RESULTS(mh)    ConstructOptr(mh, sizeof(LMemBlockHeader)+4)

extern MemHandle _pascal
MailParseAddressString(TCHAR *data);

typedef WordFlags MailMessageOptions;
#define MMO_AUTO_SIGN       0x0001
#define MMO_LEAVE_ON_SERVER 0x0002
#define MMO_QUOTE_SELECTED  0x0800
#define MMO_QUOTE_ORIGINAL  0x1000
#define MMO_LOG_OUTGOING    0x2000
#define MMO_SHOW_BCC        0x4000
#define MMO_WRAP_OUTGOING   0x8000

#define MAIL_DEFAULT_MESSAGE_OPTIONS (MMO_LOG_OUTGOING|MMO_QUOTE_ORIGINAL)

typedef WordFlags MailStartExitOptions;
#define MSEO_APP_START        0x0003
#define MSEO_CHECK_ON_STARTUP 0x2000
#define MSEO_EMPTY_TRASH      0x1000

typedef word MailAppStartOptions;
#define MASO_NOTHING          0
#define MASO_MINIMIZE         1
#define MASO_QUIT             2

@ifdef CHECK_MAIL_ON_STARTUP
#define MAIL_DEFAULT_START_EXIT_OPTIONS (MSEO_EMPTY_TRASH|MSEO_CHECK_ON_STARTUP)
@else
#define MAIL_DEFAULT_START_EXIT_OPTIONS (MSEO_EMPTY_TRASH)
@endif

typedef word MailDefaultOptions;
#define MDO_IS_DEFAULT        1

typedef word MailAppOptions;
#define MAO_NOTIFY_WITH_DIALOG   0x0001
#define MAO_NOTIFY_WITH_SOUND    0x0002
#define MAO_NOTIFY_BRING_TO_TOP  0x0004
#define MAO_NOTIFY_SELECT_INBOX  0x0008
#define MAO_PORTAL_ACCOUNT       0x0010

#define MAIL_DEFAULT_APP_OPTIONS (MAO_NOTIFY_SELECT_INBOX)

typedef byte MailCheckOptions;
#define MCO_CHECK_INTERVALS  0x01
#define MCO_IF_CONNECTED     0x02
#define MCO_CHECK_ON_STARTUP 0x04
#define MCO_BACKGROUND_CHECK 0x08
#define MCO_LEAVE_ON_SERVER  0x10
#define MCO_SEPARATE_SEND    0x20

#define MAIL_DEFAULT_CHECK_OPTIONS (0)

#define MAIL_CHECK_INTERVAL_MIN     5
#define MAIL_CHECK_INTERVAL_MAX     120
#define MAIL_DEFAULT_CHECK_INTERVAL 30

#define MAIL_MAX_SIGNATURE_LEN   512

#define MAIL_NAME_MAX       128

typedef TCHAR MailName[MAIL_NAME_MAX];

#define MAIL_MAX_UIDL_LEN   70

typedef TCHAR MailUIDL[MAIL_MAX_UIDL_LEN+1];

typedef struct {
    MailName MAS_account;
    MailName MAS_password;
    MailName MAS_returnAddr;
    MailName MAS_realName;
	 MailName MAS_smtp;
	 MailName MAS_pop3;
    TCHAR    MAS_signature[MAIL_MAX_SIGNATURE_LEN];
    MailMessageOptions   MAS_messageOptions;
    MailStartExitOptions MAS_startExitOptions;
    MailAppOptions       MAS_appOptions;
    MailCheckOptions     MAS_checkOptions;
    byte                 MAS_checkInterval;
	 PathName MAS_notifySound;
    Boolean  MAS_smtpAuth;
} MailAccountStruct;

typedef enum {
    MAE_NO_ERROR,
    MAE_ACCOUNT_EXISTS,
    MAE_FILE_ERROR,
    MAE_MEMORY_ERROR,
    MAE_NO_SUCH_ACCOUNT,
    MAE_BAD_PASSWORD
} MailAccountError;

/*
 * sent to GCNSLT_EMAIL_DATABASE_CHANGE/GWNT_EMAIL_DATABASE_CHANGE
 */

typedef enum {
    MDBCT_ACCOUNT_ADDED,
    MDBCT_ACCOUNT_DELETED,
    MDBCT_ACCOUNT_SELECTED
} MailDatabaseChangeType;

typedef struct {
    MailDatabaseChangeType NMDBC_change;
    FileLongName           NMDBC_account;
} NotifyMailDatabaseChange;

extern MailAccountError _pascal
MailAddAccount(TCHAR *acctName, TCHAR *login, TCHAR *password, TCHAR *mailaddr, TCHAR *realname, TCHAR *smtpServer, TCHAR *pop3Server, MailAppOptions appOptions);

extern MailAccountError _pascal
MailDeleteAccount(TCHAR *name);

extern MailAccountError _pascal
MailDeleteAccountWithPassword(TCHAR *name, TCHAR *password);

/* pass null or null-string for newPassword to do password verification */
extern MailAccountError _pascal
MailChangeAccountPassword(TCHAR *name, TCHAR *password, TCHAR *newPassword);

extern MailAccountError _pascal
MailVerifyAccountPassword(TCHAR *name, TCHAR *password);

extern MailAccountError _pascal
MailChangeAccountInfo(TCHAR *name, TCHAR *password, TCHAR *newPassword, TCHAR *smtp, TCHAR *pop, TCHAR *realname);

extern void _pascal
MailSendNotification(MailDatabaseChangeType notifType, TCHAR *acctName);

typedef enum {
    MSS_MAIL_DIR = 0,
    MSS_ACCT_INFO_FILE = 2,
    MSS_ATTACH_DIR = 4,
    MSS_DRAFTS_FOLDER = 6,
    MSS_INBOX_FOLDER = 8,
    MSS_OUTBOX_FOLDER = 10,
    MSS_SENT_FOLDER = 12,
    MSS_TRASH_FOLDER = 14,
    MSS_ATTACH_FIELD_NAME = 16,
    MSS_ATTACH_FIELD_OUT = 18,
    MSS_XUIDL_FIELD_NAME = 20,
    MSS_XUIDL_FIELD_OUT = 22
} MailStdString;

extern TCHAR * _pascal
MailLockStdString(MailStdString stdString);

extern void _pascal
MailUnlockStdString(MailStdString stdString);
typedef struct {
    Socket        IB_socket;
    MemHandle     IB_storageBlock;
    ChunkHandle   IB_userName;
    ChunkHandle   IB_userPasswd;
    FileHandle    IB_path;
} InboxStruct;

typedef MemHandle INBOX;

typedef enum  {
    IB_PROTOCOL_POP3
} InboxProtocol;

/* 
 * MPOP3 states. 
 */
typedef enum {
    MPOP3_OPEN,
    MPOP3_AUTHORIZATION,
    MPOP3_PASSWORD,
    MPOP3_ERROR
} MPOP3State;


/*
 * Boundary for multipart messages.
 *
 * MemHandle MM_boundary;
 */
/*
 * Encoding streams.
 *
 * HTStreamHandle SMTPMI_quotedPrintable;
 * HTStreamHandle SMTPMI_base64;
 */

typedef enum /*word*/ {
    OUTB_PROTOCOL_ESMTP
} OutboxProtocol;

typedef struct {
    Socket    OB_socket;
    char      OB_clientName[MAX_CLIENT_NAME_LENGTH];
    char      OB_password[MAX_CLIENT_NAME_LENGTH];
	 MemHandle OB_errorData;
    word      OB_wrapLength;
} OutboxStruct;

typedef MemHandle OUTBOX;

/* 
 * MSMTP states. 
 */
typedef enum {
    MAILSMTP_BEGIN,
    MAILSMTP_CONNECT,
    MAILSMTP_HELO,                      /* HELO/EHLO command */
	 MAILSMTP_MAIL,                      /* MAIL command */
	 MAILSMTP_AUTH,                      /* AUTH command */
	 MAILSMTP_AUTH_REPLY,                /* AUTH reply from client */
	 MAILSMTP_RCPT,                      /* RCPT command */
    MAILSMTP_DATA,                      /* DATA command */
    MAILSMTP_DATAI,                     /* Pushing data to server */
    MAILSMTP_QUIT,                      /* QUIT command */
    MAILSMTP_CHECK_COMMAND_RESPONSE,
    MAILSMTP_PUSH_RESP,                 /* Push response to HTSMTP */
    MAILSMTP_CONNECTION_CLOSED,         /* 421 */
    MAILSMTP_SERVER_OUT_OF_SPACE,       /* 452 */
    MAILSMTP_MAILBOX_NOT_FOUND,
    MAILSMTP_COMMAND_ERROR,             /* My fault */
    MAILSMTP_ERROR,
    MAILSMTP_INVALID_STATE
} MSMTPState;

extern char CRLF[];
extern char BRCRLF[];
extern char ENDDATA[];
extern char ENDDATAESCAPE[];
extern char EQCRLF[];

#define       CRLFFOLD_LEN 6
extern char   CRLFFOLD[];

#define       QTEQCRLFFOLD_LEN 8
extern char   QTEQCRLFFOLD[];

#define       QUOTECRLF_LEN 3
extern char   QUOTECRLF[];

#define       CMSP_LEN 2
extern char   CMSP[];

/****************************************************************************
 * 			       routines
 ***************************************************************************/

extern MailError _pascal 
MailinOpen(char *serverName, InboxProtocol proto, char *clientName, char *passwd, char *path, INBOX *box, word accPntID);

extern MailError _pascal 
MailinGetMessageCount (INBOX boxHandle, word *mcount);

extern MailError _pascal
MailinGetMessage (INBOX boxHandle, int messageNumber, MailMessage *msg);

extern MailError _pascal
MailinGetMessageSize (INBOX boxHandle, int messageNumber, dword *messageSize);

extern void _pascal
MailinMessageDelete (INBOX boxHandle, int messageNumber);

extern void _pascal
MailinClose (INBOX boxHandle);

extern void _pascal
MailinCloseFast (INBOX boxHandle);

extern MailError _pascal
MailinGetUIDL(INBOX boxHandle, int messageNumber, TCHAR *uidl);

extern SocketError 
_pascal MailoutOpen(char *serverName, OutboxProtocol proto, char *clientName,
              char *password, OUTBOX *boxHandle, word accPntID);

extern SocketError 
_pascal MailoutSendMail(OUTBOX boxHandle, MailMessage *msg, FileHandle logHan,
              Boolean auth);

extern MailError 
_pascal MailoutLoadHeader(MailMessage *msg, char *msg_ptr);

extern void _pascal
MailoutClose (OUTBOX boxHandle);        

extern void _pascal
MailoutCloseFast (OUTBOX boxHandle);
extern SocketError _pascal 
MailSocketConnect (char *serverName, Socket *sock, SocketPort port, word accPntID);

extern int _far _pascal
MailQPEncodePtr (const byte *bufToCode, int nbytes, byte *bufCoded);

extern int _far _pascal
MailQPDecodePtr (const byte *bufferCoded, int nbytes, byte *bufferPlain);

extern SocketError _pascal
MailPutBase64Encoded( Socket sock, FileHandle file, void *callback, TCHAR *attachName);


extern int _far _pascal
MailB64DecodePtr (byte *bufferCoded, int inbufsize, byte *bufferPlain, 
		 int outbufsize);

extern int _far _pascal
MailB64EncodePtr (byte *bufToCode, int nbytes, byte *bufCoded);

extern int _far _pascal
MailUUDecodePtr (byte *bufferCoded, int inbufsize, byte *bufferPlain, 
		 int outbufsize);

extern MemHandle _pascal
MailGetReturnData(Socket sock, int *count);

extern void _pascal 
MailMessageInit(MailMessage *msg);

extern void _pascal 
MailMessageClose(MailMessage *msg);

extern void _pascal
MailGetHdrValue(char *fieldName, char *fieldBuf, int len, char *data );

extern void _pascal
MailGetHdrValue822(char *fieldName, char *fieldBuf, int len, char *data );

extern void _pascal
MessageGetHdrValue (MailMessage *msg, char *fieldName, char *fieldBuf, int len);

@endlib

@endif /* __BBXMLIB__ */
