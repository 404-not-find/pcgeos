/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

PROJECT:	Responder
MODULE:		Responder library
FILE:		respondr.goh

AUTHOR:		Steve Jang, Aug  4, 1995

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	8/ 4/95   	Initial version.

DESCRIPTION:
	CApi for responder library

	$Id: respondr.goh,v 1.1 97/04/04 15:54:13 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@deflib respondr

/* 
  typedef WordEnum ResponderNotificationType;
  the values must correspond to the values of ResponderNotificationType
*/
#define RNT_LID_OPEN            0
#define RNT_LID_CLOSED          1 
#define RNT_PHONE_ON		2
#define RNT_PHONE_OFF		3
#define RNT_BATT_LO		4
#define RNT_BATT_OK		5
#define RNT_SAVE_DATA		6
#define RNT_WAKEUP		7
#define RNT_SUSP_DISABLED   	8
#define RNT_SUSP_ENABLED   	9    

typedef void _pascal RespNmiNotifyRoutine( word notif );
/*
  The callback routine to be called by responder library when NMI happens
  Pass:   notif = ResponderNotificationType
*/

extern _pascal int RespRegisterForNmi( RespNmiNotifyRoutine *callback );
/*
  Register a callback to recieve NMI notifications
  pass:   callback = client callback
  return: registration ID
          return value = 0 if error occured
*/

extern _pascal void RespUnregisterForNmi( word client );
/*
  Unregister a client callback from NMI notification list
  pass:   client = registration ID for the client
*/

extern _pascal void RespDisableSusp(void);
/*
  Disables machine suspend
*/

extern _pascal void RespEnableSusp(void);
/*
  Enables machine suspend
*/

/* typedef WordEnum ResponderBatteryEvent; */
#define RBE_BATTERY_LOW      0x00
#define RBE_BATTERY_OK       0x02
#define RBE_RECHARGE_START   0x04
#define RBE_RECHARGE_END     0x06

extern _pascal void RespNotifyBatteryStatus( word battStat );
/*
  Notify power driver of battery event
  battStat: ResponderBatteryEvent
*/

extern _pascal int RespGetPhoneModuleStatus(void);
/*
  Get current status of phone module
  returns -1 if phone is on
  returns 0 if phone is off
*/

extern _pascal void RespSetPhoneModuleStatus(void);
/*
  Turns phone module on
*/

extern _pascal int RespGetLidStatus(void);
/*
  Get current status of lid
  returns -1 if lid is open
  returns 0 if lid is closed
*/

extern _pascal void RespReloadSuspTimer(void);
/*
  Reload suspend timer to initial value
*/

extern _pascal Boolean RespGetCMOSBatteryStatus(void);
/*
 * Returns non-zero if CMOS values (RTC clock) are not valid, because the
 * battery was/is dead.
 */

extern _pascal int RespReadRTCCMOS(int address);
/*
 * Reads the value in RTC CMOS RAM
 */

extern _pascal int RespWriteRTCCMOS(int address, int data);
/*
 * Writes the value in RTC CMOS RAM
 */

extern _pascal void RespDriveRBUS();
/*
 * Activate the RBUS TxD line (the line now gets driven by the chip)
 */

extern _pascal void RespSetBacklightState(Boolean state);
/*
 * Turn on or off the backlight. True to turn it on, False for off.
 */

typedef ByteEnum PDAType;
#define PDAT_PC_EMULATOR	0x0
#define PDAT_N9000		0x1
#define PDAT_N9000i		0x2

typedef ByteFlags PDAHardwareInfo;
/* 5 bits unused */
#define PDAHI_BACKLIGHT_AVAILABLE	(0x04)
#define PDAHI_PDA_TYPE			(0x02 | 0x01)	; = PDAType

extern _far _pascal PDAHardwareInfo RespGetPDAHardwareInfo(void);
/*
 * Gets the PDA Hardware info.
 */

#ifdef __HIGHC__
pragma Alias(RespRegisterForNmi, "RESPREGISTERFORNMI");
pragma Alias(RespUnregisterForNmi, "RESPUNREGISTERFORNMI");
pragma Alias(RespDisableSusp, "RESPDISABLESUSP");
pragma Alias(RespEnableSusp, "RESPENABLESUSP");
pragma Alias(RespNotifyBatteryStatus, "RESPNOTIFYBATTERYSTATUS");
pragma Alias(RespGetPhoneModuleStatus, "RESPGETPHONEMODULESTATUS");
pragma Alias(RespSetPhoneModuleStatus, "RESPSETPHONEMODULESTATUS");
pragma Alias(RespGetLidStatus, "RESPGETLIDSTATUS");
pragma Alias(RespReloadSuspTimer, "RESPRELOADSUSPTIMER");
pragma Alias(RespGetCMOSBatteryStatus, "RESPGETCMOSBATTERYSTATUS");
pragma Alias(RespReadRTCCMOS, "RESPREADRTCCMOS");
pragma Alias(RespWriteRTCCMOS, "RESPWRITERTCCMOS");
pragma Alias(RespDriveRBUS, "RESPDRIVERBUS");
pragma Alias(RespSetBacklightState, "RESPSETBACKLIGHTSTATE");
pragma Alias(RespGetPDAHardwareInfo, "RESPGETPDAHARDWAREINFO");
#endif

@endlib
