/****************************************************************************

	Copyright (c) Geoworks 1996 -- All Rights Reserved
	GEOWORKS CONFIDENTIAL

PROJECT:	PCGEOS
MODULE:		PPP External login
FILE:		login.goh

AUTHOR:		Chris Thomas, Jul 24, 1996


REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CT	7/24/96   	Initial revision


DESCRIPTION:

	Contains external API definitions for use of a manual login
	application by a communications protocol.

	See geoworks.def for notification types used.

	$Id: login.goh,v 1.1 97/04/04 15:54:12 newdeal Exp $

****************************************************************************/

#define LOGIN_PROTOCOL		(1)

/*
 *  These are status codes returned from the initialization
 *  and login phases of an external login app to the protocol
 *  driver, informing the protocol driver of the outcome of
 *  the particular phase.
 */

typedef enum /* word */ {

    LS_CONTINUE = 0x0,
    /*
     *  Everything OK.  Protocol should continue with
     *  the connection
     */

    LS_ABORT = 0x2,
    /*
     *  Protocol driver should abort connection.
     *  Should be used in response to user-initiated abort.
     */

    LS_ERROR = 0x4,
    /*
     *  Some kind of error was detected by the external
     *  login application.  Will result in protocol driver
     *  aborting connection, just like LS_ABORT, but
     *  indicates an unexpected processing error, rather
     *  than a normal condition which would cause an abort.
     */

} LoginStatus;

typedef WordFlags LoginResponse;
#define LR_NO_NOTIFY	(0x8000)
/*
 *  If set on LS_ERROR, user
 *  should not be notified
 *  of the error by the client.
 *  Use when login app performs
 *  its own user notification.
 */

#define LR_STATUS	(0x7fff)	/* Mask of LoginResponse containing
					 * LoginStatus value */
#define LR_STATUS_OFFSET	0

/*
 *  Structure passed in data block of MSG_META_NOTIFY(GWNT_LOGIN_INITIALIZE)
 */

typedef struct {		/* CHECKME */

    /*
     *  Protocol # for login/driver
     *   interaction.  The login app
     *  should check to make sure it
     *  is using this protocol.
     */
    word	LII_protocol;

    /*
     *  Connection token assigned to
     *    this connection.
     */
    word	LII_connection;

    /*
     *  access point id used for connection
     *    Login app can read from this
     *    more info about the login
     *    procedure, if needed
     */
    word	LII_accessPoint;

    /*
     *  response to send when initialization
     *  is complete/aborted.
     *  Message parameters:
     * 	Pass:		token: the connection token passed in LII_connection
     * 			response: LoginResponse
     * 	Return:		nothing
     */
    optr	LII_responseOptr;
    Message	LII_responseMsg;
    @prototype  void LOGIN_INIT_RESPONSE_MESSAGE(word token = cx,
						 LoginResponse response = dx);

} LoginInitInfo;

/*
 *  Structure passed in data block of MSG_META_NOTIFY(GWNT_LOGIN_ATTACH)
 */

typedef struct {

    /*
     *  Connection token, which should be
     *  the same as that passed in
     *  LII_connection
     */
    word	LAI_connection;

    /*
     *  response to send when login
     *  is complete/aborted
     *  Message parameters:
     * 	Pass:		token: token passed in LAI_connection
     * 			response: LoginResponse
     * 	Return:		nothing
     */
    optr	LAI_responseOptr;
    Message	LAI_responseMsg;
    @prototype	void LOGIN_RESPONSE_MESSAGE(word token = cx,
					    LoginResponse response = dx);

    /*
     * Strategy routine for serial driver
     */
    dword	LAI_strategy;

    /*
     *  serial driver port to use
     *    for read/writes
     */
    word	LAI_port;

    /*
     *  Callback routine login app uses use to filter protocol
     *  data out of incoming data stream, as well as send/receive
     *  status about the login interaction.  This is intended
     *  to be called from assembly.
     * 
     *  Pass:
     * 	  cx = # bytes of data in buffer
     * 	  bx = LAI_connection token
     * 	  dx:bp = input data to check for PPP data
     * 
     *  Return:
     * 	  carry set if PPP data confirmed (login done)
     * 	     app must not read/write port after getting this.
     * 	  cx = bytes of non-protocol data in buffer
     * 	  buffer contents unchanged.
     * 
     *  Destroyed: none
     */
    dword	LAI_callback;

} LoginAttachInfo;

/*
 *  Standard INI strings
 */

#define LOGIN_APP_CAT_STRING	"login applications"
/*
 *  Category under which info about installed login apps reside
 */

#define INSTALLED_LOGIN_APPS_KEY_STRING	"installed apps"
/*
 *  Key (type: String section) under LOGIN_APP_CAT_STRING which
 *  lists the installed login applications
 */

#define USE_LOGIN_APP_KEY_STRING	"useLoginApp"
/*
 *  Key (type: int) in accessPointXXX categories specifying 
 *  whether a login app should be used for that connection
 *  (whether specified in the access point, or by a default
 *   login app)
 *  Zero = don't use login app.
 */

#define LOGIN_APP_KEY_STRING	"loginApp"
/*
 *  String entry under accessPointXXX or ppp specifying which
 *  login app should be used.  String should be one of those
 *  specified in INSTALLED_LOGIN_APP_KEY_STRING.
 */
