/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	PC/GEOS
MODULE:		Sprite Library
FILE:		sprite.goh

AUTHOR:		Martin Turon, Dec 19, 1994

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	martin	12/19/94   	Initial version.

DESCRIPTION:
	

	$Id: sprite.goh,v 1.1 98/06/24 21:16:21 martin Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@deflib	sprite

@include <game.goh>

/*---------------------------------------------------------------------------*
 *			Structures 					     *
 *---------------------------------------------------------------------------*/

typedef WordFlags SpriteFlags;
#define	MF_DETECT_COLLISIONS	0x8000
#define	MF_LIMITED_LIFE		0x4000
#define	MF_WRAPPING		0x2000


/*---------------------------------------------------------------------------*
 *			SpriteClass 					     *
 *---------------------------------------------------------------------------*/

@class	SpriteClass, VisClass;
       /*
	* This message is sent to each sprite object on every timer tick.
	* The default handler simply sends an erase, move, and draw message
	* to the handling object.  Optimization ideas for time-critical
	* sprite objects implemented by handling this message:
	* 	- call the three routines directly rather than using the
	* 	  messaging system. 
	*	- have the erase routine routine return the current position
	*	  in a pair of registers, and have the move and draw
	*	  routines update and use those values.
	*
	* Pass:		^hbp = GState
	* Return:	nothing
	*/
	@message  void  MSG_SPRITE_UPDATE_POSITION (GStateHandle gstate = bp);

       /*
	* This message simply draws the sprite object in the given gstate.
	*
	* Pass:		^hbp 	= GState
	* Return:	return
	*/
	@message  void  MSG_SPRITE_DRAW (GStateHandle gstate = bp);

       /*
	* This message simply erases the sprite object in the given gstate.
	*
	* Pass:		^hbp 	= GState
	* Return:	return
	*/
	@message  void  MSG_SPRITE_ERASE (GStateHandle gstate = bp);

       /*
	* This message calculates the new position for the sprite object
	* based on its previous position and velocity.  It is also the place
	* to hook into the collision detection mechanism if the object wants
	* to handle collisions.
	*
	* Pass:		cx,dx	= position
	* Return:	nothing
	*/
	@message  void  MSG_SPRITE_MOVE (int xPos = cx, int yPos = dx);

       /*
	* This message is sent to the sprite object whenever a collision is 
	* detected. 
	*
	* Pass:		^lcx:dx	= object crashed into
	* Return:	nothing
	*/
	@message  void  MSG_SPRITE_COLLISION (optr otherObj);

/*---------------------------------------------------------------------------*
 *			SpriteClass Instance data			     *
 *---------------------------------------------------------------------------*/
 /*
  * Movement related instance data
  */
@instance	int	SI_XVelocity;	/* New position = 		     */
@instance	int	SI_YVelocity;   /* 	Old Position + Velocity      */

@instance	int	SI_angle;	/* current angle		     */
@instance	int	SI_rotation;	/* add this to angle each timer tick */

 /*
  * Collision related instance data
  */
@instance	int	SI_groupID;	/* Unique identifier of the group
					 * this sprite object belongs to.
					 * This value is used by the
					 * collision handler - collisions
					 * between objects in the same group
					 * don't create MSG_SPRITE_COLLISION
					 * messages.  MSG_SPRITE_COLLISION
					 * messages are sent to the object
					 * with the highest SI_groupID.
					 */
@instance	SpriteFlags    	SI_flags;

@instance	int	SI_uniqueID;	/* Supplied by the collision
					 * detection mechanism to speed up
					 * updating its table of positions.
                                         */
@instance	int	SI_life;	/* Used for objects that last a
					 * limited amount of time (bullets) 
					 * or to store the "hit points" of an
					 * object.
                                         */
@instance	int	SI_detectRadius;/* The radius squared (used by the
					 * collision detection mechanism to
					 * verify that a collision has occured
                                         */
 /*
  * Animation related properties
  */

@instance	int		SI_color;
@instance	int		SI_imageCount;   /* offset into array */
@instance	int		SI_currentImage;   /* offset into array */
@instance	ChunkHandle	SI_gstringArray;		

@endc


/*--------------------------------------------------------------------------
 *			SpriteContentClass
 *--------------------------------------------------------------------------
 * 
 * The SpriteContentClass deals with collision detection between all the
 * SpriteClass children it maintains.  Some assumptions used to keep things 
 * speedy:
 *
 *	- All children of a given SpriteContentClass need to be in the same 
 * 	  object block.  Have sprites point other larger objects in seperate 
 *	  blocks if you need more sprite-related data space.
 *
 */
@class	SpriteContentClass, GameContentClass;
       /*
	* This message is sent by each sprite whenever their position has
	* changed.  It logs the new position in the collision detection
	* tables within the SpriteContentClass object.
	*
	* Pass:		bp	 = detect id of object to update
	*		(cl, ch) = top-left table entry
	*		(dl, dh) = bottom-right table entry
	* Return:	nothing
	*/
	@message  void  MSG_SPRITE_CONTENT_UPDATE_POSITION_TABLE 
                                                     (int detectID = bp,
						      int topLeft  = cx,
						      int botRight = dx);
       /*
	* Goes through the entire position table and checks for any
	* collisions that can be found.  A MSG_SPRITE_COLLISION is sent to
	* the objects that request to be informed of collisions. 
	*
	* Pass:		nothing
	* Return:	nothing
	*/
	@message  void  MSG_SPRITE_CONTENT_DETECT_COLLISIONS();

/*-------------------------------------------------------------------------*
 *		SpriteContentClass Instance data			   *
 *-------------------------------------------------------------------------*/

@default 	VCI_geoAttrs = ((@default)|VCGA_CUSTOM_MANAGE_CHILDREN);

@instance	int		SCI_tableSize;
@instance	ChunkHandle	SCI_leftColTable;
@instance	ChunkHandle	SCI_rightColTable;
@instance	ChunkHandle	SCI_topRowTable;
@instance	ChunkHandle	SCI_bottomRowTable;
@instance	ChunkHandle	SCI_handleTable;

@endc


/*--------------------------------------------------------------------------*
 *			Exported routines				    *
 *--------------------------------------------------------------------------*/


@endlib
