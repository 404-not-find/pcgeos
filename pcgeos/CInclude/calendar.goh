/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		Calendar application
FILE:		calendar.goh

AUTHOR:		Sean Sullivan, Mar 19, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	sean	3/19/96   	Initial version.

DESCRIPTION:
	Defines the external methods (and internal private methods) that
	can be used by other applications to access the calendar's data.

	$Id: calendar.goh,v 1.1 97/04/04 16:00:23 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@ifndef __CALENDAR_GOH
@define __CALENDAR_GOH

@class  CalendarClass, GenProcessClass;
	
/*
 *  Synopis:	Used by the rolodex to request a search through the
 * 	        Calendar's events for the passed string
 * 
 *  Pass:	textLength	= Length of text
 * 		txtBlockHandle	= Block handle containing text
 *  Returns:	Nothing
 */
@message void MSG_CALENDAR_REQUEST_SEARCH(
					word textLength = cx,
					hptr textBlockHandle = dx);

/*
 *  Synopsis:	Delete all normal calendar events before the passed date
 * 
 *  Pass:       cutYear	= cutoff year
 * 		cutMonth= cutoff month
 * 		cutDay	= cutoff day
 * 
 *  Returns:	Nothing
 */
@message void MSG_CALENDAR_DELETE_EVENTS_BEFORE_DATE(
					word cutOffYear = dx,
					byte cutOffMonth = ch,
					byte cutOffDay = cl);

/*
 *  Errors Calendar APIs return
 */
typedef enum {
    CEE_NORMAL = 0x0,
    CEE_GENERAL_ERROR,
    CEE_INTERNAL_ERROR,
    CEE_NOT_ENOUGH_MEMORY,
    CEE_NOT_ENOUGH_DISKSPACE,
    CEE_EVENT_NOT_FOUND,
    CEE_EVENT_TEXT_TOO_LONG,
    CEE_INVALID_DATE,
    CEE_INVALID_TIME,
    CEE_INVALID_TODO_ITEM_STATUS,
    CEE_INVALID_RESERVE_WHOLE_DAY,
    CEE_INVALID_ALARM,
    CEE_INVALID_EVENT_TYPE,
    CEE_START_DATE_LATER_THAN_END_DATE,
    CEE_START_TIME_LATER_THAN_END_TIME,
    CEE_MISSING_END_TIME_WHEN_START_TIME_AND_END_DATE_ARE_SET,
    CEE_EVENT_NOT_SUPPORTED,
    CEE_INVALID_TIME_RANGE,	        /*  The time range specified
					 *  is invalid: end date/time
					 *  is earlier than start date/time.*/
    CEE_ACCESS_DENIED			/*  The requested event is in use and
					 *  your access is denied. */ 
} CalendarEventError;

/* --------------------------------------------------------------------------
 * 			Pre-event Alarm Information
 * --------------------------------------------------------------------------
 */

/*
 *  This says how long before the event the user should be notified of its
 *  impending arrival.
 */
typedef ByteEnum CalendarAlarmIntervalType;
#define CAIT_MINUTES	(0x0)
#define CAIT_HOURS	(0x1)
#define CAIT_DAYS	(0x2)

/*
 *  Description of alarm
 */
typedef WordFlags CalendarAlarmStruct;
/* CalendarAlarmIntervalType */
#define CAS_TYPE            (0x8000 | 0x4000)
#define CAS_TYPE_OFFSET     (14)

/*  set if there is alarm */
#define CAS_HAS_ALARM       (0x2000)

/*  data according to CAS_TYPE */
#define CAS_INTERVAL        (0x1fff)
#define CAS_INTERVAL_OFFSET (0)

/* ---------------------------------------------------------------------------
 * 			Calendar Repeat Events
 * ---------------------------------------------------------------------------
 */

/*
 *  These things tell the recipient how the event is supposed to be repeated.
 *  It should cover all the bases. 
 */
typedef ByteEnum CalendarEventRepeatDuration;
#define CERD_FOREVER	(0x0)		/*  no additional data */
#define CERD_UNTIL	(0x1)	        /*  Repeat end date */
#define CERD_LENGTH	(0x2)	        /*  CalendarEventRepeatLength */

/*
 *  Unit of event repeat frequency
 */
typedef ByteEnum CalendarEventRepeatLengthUnitType;
#define CERLUT_DAY	(0x0)
#define CERLUT_WEEK	(0x1)
#define CERLUT_MONTH	(0x2)
#define CERLUT_YEAR	(0x3)

/*
 *  How long to repeat. How many years, months, weeks and days...
 */
typedef WordFlags CalendarEventRepeatLength;

/*
 * number of those units, *including* the initial event day. thus an
 * event repeating every day for 3 days set for 12/15 would have the
 * event 12/15, 12/16, and 12/17 
 */
#define CERL_COUNT	  (0xfffc)
#define CERL_COUNT_OFFSET (2)

/* CalendarEventRepeatLengthUnitType */
#define CERL_UNIT	  (0x0002 | 0x0001)
#define CERL_UNIT_OFFSET  (0)

/*
 *  Either the event lasts for a period of time and repeats
 */
typedef union {
    FileDate	              CERDD_until;   /* Repeat until when */
    CalendarEventRepeatLength CERDD_length;  /* Repeat for how long */
} CalendarEventRepeatDurationData;

/*
 *  Which day of the week to repeat the event
 */
typedef ByteEnum CalendarEventRepeatWeekday;
#define CERW_SUNDAY	(0x0)
#define CERW_MONDAY	(0x1)
#define CERW_TUESDAY	(0x2)
#define CERW_WEDNESDAY	(0x3)
#define CERW_THURSDAY	(0x4)
#define CERW_FRIDAY	(0x5)
#define CERW_SATURDAY	(0x6)

/*
 *  How frequent the event should be repeated
 */
typedef ByteEnum CalendarEventRepeatIntervalType;
#define CERIT_DAILY           (0x0)
#define CERIT_WEEKLY          (0x1)
#define CERIT_MONTHLY_WEEKDAY (0x2)
#define CERIT_MONTHLY_DATE    (0x3)
#define CERIT_YEARLY_WEEKDAY  (0x4)
#define CERIT_YEARLY_DATE     (0x5)

/*
 *  Detailed description of event repetition
 */
typedef WordFlags CalendarEventRepeatInterval;

/* which week */
#define CERI_WEEK	  (0x8000 | 0x4000 | 0x2000)
#define CERI_WEEK_OFFSET  (13)

/*  number of units between events. */
#define CERI_COUNT	  (0x1000 | 0x0800 | 0x0400 | 0x0200 | 0x0100 | 0x0080 | 0x0040)
#define CERI_COUNT_OFFSET (6)        

/*
 *  CalendarEventRepeatWeekday
 *
 *  for CERIT_MONTHLY_WEEKDAY or CERIT_MONTHLY_DATE or
 *  CERIT_YEARLY_WEEKDAY  (month for that last is the same as the
 *  event; data indicates which weekday of which week within the
 *  month the event should repeat) 
 */
#define CERI_DAY          (0x0020 | 0x0010 | 0x0008)
#define CERI_DAY_OFFSET   (3)
    
/* CalendarEventRepeatIntervalType */
#define CERI_TYPE         (0x0004 | 0x0002 | 0x0001)
#define CERI_TYPE_OFFSET  (0)

/*
 *  Guidelines to specify repeat event info
 *  ========================================
 * 
 *  For DAILY:
 *        CERI_WEEK = unused
 *        CERI_DAY = unused
 *        CERI_COUNT = number of days between repeats (usually 1)
 *  
 *  For WEEKLY:
 *        CERI_WEEK = unused
 *        CERI_DAY = which day of week to repeat
 *        CERI_COUNT = number of weeks between repeats (usually 1)
 * 
 *  For BI-WEEKLY:
 *        CERI_WEEK = unused
 *        CERI_DAY = which day of week to repeat
 *        CERI_COUNT = number of weeks between repeats (2 in this case)
 * 
 *  For MONTHLY_WEEKDAY event (like the first Thursday of each month):
 *        CERI_WEEK = which week in month 
 *        CERI_DAY = which day of week
 *        CERI_COUNT = number of months between repeats (usually 1)
 *  
 *  For MONTH_DATE event (like the 15th of each month is pay day!):
 *        CERI_WEEK = unused
 *        CERI_DAY = unused
 *        CERI_COUNT = number of months between repeats (the date is
 *                taken from the appointment info itself, not the repeat info)
 *  
 *  For YEARLY_WEEKDAY event (like the first Thursday of November):
 *        CERI_WEEK = which week in month
 *        CERI_DAY = which day of week
 *        CERI_COUNT = number of years between repeats (month is taken from
 *                the appointment info itself, not the repeat info)
 *  
 *  For YEARLY_DATE event (like birthdays):
 *        CERI_WEEK = unused
 *        CERI_DAY = unused
 *        CERI_COUNT = number of years between repeats (month and day are
 *                taken from the appointment info itself, not the repeat info)
 */

/*
 *  The final thing: more fine details of repeat events
 */
typedef struct {	
    CalendarEventRepeatInterval	CERI_interval;
    /*  how long between events? */

    CalendarEventRepeatDuration	CERI_duration;
    /*  how long shall we keep this up? */

    CalendarEventRepeatDurationData CERI_durationData;
    /*  more details of duration */

    word	CERI_numExceptions;
    /*  number of exception dates */

/*  label	FileDate	CERI_exceptions;*/
    /*  array of dates on which event is *not* to take place */
} CalendarEventRepeatInfo;

/* ---------------------------------------------------------------------------
 * 			Calendar Events
 * ---------------------------------------------------------------------------
 */

/* Max event text length */
#define CALENDAR_MAX_EVENT_TEXT_LENGTH  (255) 

#define CALENDAR_MAX_RESERVE_WHOLE_DAYS (999)

/*  
 *  value in FDAT_date if the event is a to-do list item
 * 
 *  When creating to-do item, pass CEPS_start.FDAT_date = CAL_NO_DATE, and
 *  CEPS_start.FDAT_time to be CalendarToDoItemStatus.
 */
#define CAL_NO_DATE                     (0xffff)    

/*  
 *  value in FDAT_time if the event is not for a specific time of the day
 * 
 *  When creating to-do item for a day, pass CEPS_start.FDAT_time =
 *  CAL_NO_TIME.
 */
#define CAL_NO_TIME                     (0xffff)    

/*
 *  When creating to-do item, pass CEPS_start.FDAT_date = CAL_NO_DATE, and
 *  CEPS_start.FDAT_time to be one of the following:
 * 
 *  This is the status describing the status of the to-do item.
 */
typedef enum {
    CTDIS_HIGH_PRIORITY = 0x101,
    CTDIS_NORMAL_PRIORITY,
    CTDIS_COMPLETED,
} CalendarToDoItemStatus;

/*
 *  Event description formats
 * 
 *  It is used to describe what type of information is the event data. Note
 *  that only CEDT_GEOS_TEXT is currently supported.
 */
typedef ByteEnum CalendarEventDescType;
#define CEDT_GEOS_TEXT	(0x0)		/* Description is a null-terminated,
					 * single-byte text string in the
					 * GEOS character set */
#define CEDT_UNICODE	(0x1)		/* Description is a null-terminated,
					 * double-byte text string in the
					 * Unicode character set. */ 
#define CEDT_INK	(0x2)		/* Description is digital ink. Number
					 * of points can be determined from
					 * the dataLength field. */

/*
 *  Calendar event used to pass to the API
 */
typedef struct {
    FileDateAndTime	CEPS_startDateTime;
    /*  Event start date and time */
 
    FileDateAndTime	CEPS_endDateTime;
    /*  Event end date and time */

    word		CEPS_reserveWholeDay;
    /*  Number of whole day to reserve the event. The max is
     *  MAX_RESERVE_WHOLE_DAYs. 0 if not applicable. 
     * 
     *    If this field is non-zero, the end date specified in
     *    CEPS_reserveWholeDay is ignored.
     * 
     *    If CEPS_startDateTime does not have time specified, it is assumed
     *    the start time is 00:00.
     * 
     *    If CEPS_endDateTime does not have time specified, it is assumed
     *    the end time is 23:59
     */

    CalendarAlarmStruct	CEPS_alarm;
    /*  Alarm associated with the event */

    CalendarEventDescType CEPS_eventType;
    /*  Type of data of the event */

    CalendarEventRepeatInfo *CEPS_repeatInfo;
    /* Repeat event info. 0 if the event is not repeating */

    word		CEPS_dataLength;
    /*  The number of bytes of the data in CEPS_data. If
     *  CEPS_eventType is CEDT_GEOS_TEXT, CEPS_dataLength does not include
     *  NULL.
     */ 

    char*		CEPS_data;
    /*  The event data. If the CEPS_eventType is CEDT_GEOS_TEXT, the
     *  text passed in from this field must be null-terminated. 
     */ 
} CalendarEventParamStruct;

/*
 *  Structure of calendar event data that is returned from Calendar API
 */
typedef struct {
    dword               CRES_eventID;
    /*  Unique event ID */

    FileDateAndTime	CRES_startDateTime;
    /*  Event start date and time */
 
    FileDateAndTime	CRES_endDateTime;
    /*  Event end date and time */

    word		CRES_reserveWholeDay;
    /*  Number of whole day to reserve the event. The max is
     *  MAX_RESERVE_WHOLE_DAYs. 0 if not applicable. 
     * 
     *    If this field is non-zero, the end date specified in
     *    CRES_reserveWholeDay is ignored.
     * 
     *    If CRES_startDateTime does not have time specified, it is assumed
     *    the start time is 00:00.
     * 
     *    If CRES_endDateTime does not have time specified, it is assumed
     *    the end time is 23:59
     */

    CalendarAlarmStruct	CRES_alarm;
    /*  Alarm associated with the event */

    CalendarEventDescType CRES_eventType;
    /*  Type of data of the event */

    word		CRES_repeatInfo;
    /* Offset in this block that points to CalendarEventRepeatInfo repeat
     * event info. 0 if the event is not repeating. */ 

    word		CRES_dataLength;
    /*  The number of bytes of the data in CRES_data. If
     *  CRES_eventType is CEDT_GEOS_TEXT, CRES_dataLength does not include
     *  NULL.
     */ 

/*    label	char		CRES_data;*/
    /*  The event data. If the CRES_eventType is CEDT_GEOS_TEXT, the
     *  text passed in from this field must be null-terminated. 
     */ 
} CalendarReturnedEventStruct;

/*
 *  SYNOPSIS:	Add a calendar event
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 *
 *  Pass:	CalendarEventParamStruct* params
 *			= Pointer to CalendarEventParamStruct
 *
 *		optr completionOptr
 *			= callback object to return result OR
 *			  0 if no callback
 *
 *		Message completionMsg
 *			= callback message to return result
 *
 *  Return:     void from this message
 *
 *		The results of the operation are returned via the callback
 *		message which should be in form of: prototype
 *		CALENDAR_ADD_EVENT_CALLBACK_MSG (See below) 
 */
@message void MSG_CALENDAR_ADD_EVENT(@stack CalendarEventParamStruct *params,
				     optr completionOptr,
				     Message completionMsg);

/*
 *  Synopsis:   Prototype of the callback message for
 *              MSG_CALENDAR_ADD_EVENT 
 *
 *  Pass:	CalendarEventError error
 *			= Error on adding event to calendar. CEE_NORMAL if no
 *			  error 
 *              dword eventID
 *			= Unique event ID of the added event if there is no
 *			  error.  
 *
 *  Return:	void
 * 
 */
@prototype void CALENDAR_ADD_EVENT_CALLBACK_MSG(
                                     CalendarEventError error = cx, 
				     dword eventID = dx:bp);

/*
 *  SYNOPSIS:	Modify a calendar event by event ID
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 *
 *  Pass:	CalendarEventParamStruct* params
 *			= Pointer to CalendarEventParamStruct
 *
 *              dword eventID
 *                      = unique event ID of event to modify
 *
 *		optr completionOptr
 *			= callback object to return result OR
 *			  0 if no callback
 *
 *		Message completionMsg
 *			= callback message to return result
 *
 *  Return:     void from this message
 *
 *		The results of the operation are returned via the callback
 *		message which should be in form of: prototype
 *		CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG (See below) 
 */
@message void MSG_CALENDAR_MODIFY_EVENT_BY_ID(@stack
				CalendarEventParamStruct *params,
				dword eventID,
				optr completionOptr,
				Message completionMsg);

/*
 *  Synopsis:   Prototype of the callback message for
 *              MSG_CALENDAR_MODIFY_EVENT_BY_ID,
 *              MSG_CALENDAR_DELETE_EVENT_BY_ID,
 *              MSG_CALENDAR_CHECK_IF_EVENT_EXISTS
 *
 *  Pass:	CalendarEventError error
 *			= Error on calendar access operation. CEE_NORMAL if
 *                        no error  
 *
 *  Return:	void
 * 
 */
@prototype void CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG(
                                     CalendarEventError error = cx);

/*
 *  SYNOPSIS:	Get a calendar event by event ID
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 *
 *  Pass:	dword eventID
 *			= unique event ID of event to get
 *
 *              GeodeHandle owner
 *                      = owner of the block returned 
 *
 *		optr completionOptr
 *			= callback object to return result
 *
 *		Message completionMsg
 *			= callback message to return result
 *
 *  Return:     void from this message
 *
 *		The results of the operation are returned via the callback
 *		message which should be in form of: prototype
 *		CALENDAR_GET_EVENT_CALLBACK_MSG (See below) 
 */
@message void MSG_CALENDAR_GET_EVENT_BY_ID(@stack 
                                     dword eventID,
                                     GeodeHandle owner,
				     optr completionOptr,
				     Message completionMsg);

/*
 *  Synopsis:   Prototype of the callback message for
 *              MSG_CALENDAR_GET_EVENT_BY_ID
 *
 *  Pass:	CalendarEventError error
 *			= Error on adding event to calendar. CEE_NORMAL if no
 *			  error 
 *              MemHandle eventBlock
 *                      = Unlocked block of CalendarReturnedEventStruct
 *
 *  Return:	void
 * 
 */
@prototype void CALENDAR_GET_EVENT_CALLBACK_MSG(
                                     CalendarEventError error = cx,
				     MemHandle eventBlock = dx);

/*
 *  SYNOPSIS:	Delete a calendar event by event ID
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 *
 *  Pass:	dword eventID
 *			= unique event ID of event to delete
 *
 *		optr completionOptr
 *			= callback object to return result OR
 *			  0 if no callback
 *
 *		Message completionMsg
 *			= callback message to return result
 *
 *  Return:     void from this message
 *
 *		The results of the operation are returned via the callback
 *		message which should be in form of: prototype
 *		CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG (See below) 
 */
@message void MSG_CALENDAR_DELETE_EVENT_BY_ID(@stack
				     dword eventID,
				     optr completionOptr,
				     Message completionMsg);

/*
 *  SYNOPSIS:	check if there is any event exists within a period of time
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 *
 *  Pass:	FileDateAndTime startDateTime
 *			= Start date and time to search
 *
 *              FileDateAndTime endDateTime
 *			= End date and time to search
 *
 *		optr completionOptr
 *			= callback object to return result 
 *
 *		Message completionMsg
 *			= callback message to return result
 *
 *  Return:     void from this message
 *
 *		The results of the operation are returned via the callback
 *		message which should be in form of: prototype
 *		CALENDAR_ACCESS_EVENT_COMMON_CALLBACK_MSG.
 *
 *              If there is event overlapping the search range, 
 *                      it returns CEE_NORMAL.
 *
 *              If there is no event overlapping the search range,
 *                      it returns CEE_EVENT_NOT_FOUND
 */
@message void MSG_CALENDAR_CHECK_IF_EVENT_EXISTS(@stack
				     FileDateAndTime startDateTime,
                                     FileDateAndTime endDateTime,
				     optr completionOptr,
				     Message completionMsg);

/*
 *  Synopsis:	Get the unique event ID that is to be assigned to the
 * 		next new event.
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 * 
 *  Pass:	dest	= recipient object,
 * 			  pass dest == 0 if none
 * 		destMessage = message which the calendar app would call on
 * 			  the recipient object with.
 * 			prototype of reply message:
 *                      @message void MSG_XXX_CALLBACK(dword nextID = cx:dx);
 *  Returns:	next event ID
 */
@message dword MSG_CALENDAR_GET_NEXT_EVENT_ID(
					optr dest = cx:dx,
					word destMessage = bp) = cx:dx;

/*
 *  Synopsis:	Set the unique event ID that is to be assigned to the
 * 		next new event. If the argument is smaller than the
 * 		current value, the value will NOT be changed.
 * 
 * 		The minimum value is FIRST_EVENT_ID (00020001h).
 * 
 * 		** Message supported in Communicator products after
 *              Feb 1997 **
 * 
 *  Pass:	nextEventID	= next event ID
 *  Returns:	Nothing
 */
@message void MSG_CALENDAR_SET_NEXT_EVENT_ID(
					dword nextEventID = cx:dx);

@endc	/* CalendarClass */


#define		CALENDAR_DEFAULT_DIR	"CALENDAR"
#define		CALENDAR_DEFAULT_FILE	"CALENDAR\\Calendar"

#define		CALENDAR_TOKEN	{{'P','L','N','R'}, MANUFACTURER_ID_GEOWORKS}

#define		CALENDAR_PASSWD_INIT_CATEGORY	"Calendar"
#define		CALENDAR_PASSWD_INIT_KEY	"password"

/*
 * First unique id to be used.
 */
#define		FIRST_EVENT_ID		(0x00020001)

/*
 * Invalid unique id
 */
#define         INVALID_EVENT_ID        (FIRST_EVENT_ID-1)

@endif /* __CALENDAR_GOH */
