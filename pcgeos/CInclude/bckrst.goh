/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GlobalPC 1998.  All rights reserved.
	GLOBALPC CONFIDENTIAL

PROJECT:	Backup Restore Library
MODULE:		
FILE:		backrest.goh

AUTHOR:		Edwin Yu, Nov 27, 1998

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	edwin    	11/27/98   	Initial version.
	jfh		02/24/00		added email

DESCRIPTION:

	$Id: $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@ifndef __BACKREST_GOH__
@define __BACKREST_GOH__

@deflib backrest

@include <stdapp.goh>
#include <ec.h>

/* Identifier for invalid backup groups */
#define GROUPID_INVALID     0xffff

#define LEN_ID              4   /* 4 bytes, max group ID is 9999 */
#define LEN_DATE            14  /* MMDDYYYYHHMMSS */
#define LEN_DESCRIPTION     40  /* 40 chars, max length of backup memo */

/*
 *  GroupID is a unique integer assigned to each backup groups.
 */
typedef word GroupID;

/*
 *  BackupDrive defines the destination of the backup.
 */
typedef enum {
    BD_HARDISK,          /* backup to the hard disk */
    BD_FLOPPYDISK        /* backup to a floppy drive */
} BackupDrive;


/*
 *  Backup group(folder) type.
 */
typedef char BackupType;
#define BT_SINGLE_FILE  's' /* single file */
#define BT_DOCUMENT_DIR 'd' /* all files under document directory */
#define BT_DOC_W_EMAIL  'e' /* all files under document directory + email */
#define BT_EMAIL_ACCT   'm' /* an email account folder */
#define BT_SYS_CONFIG   'c' /* system configuration files */
#define BT_FULL_SYS     'f' /* complete system configuration */
#define BT_ALL_TYPE     'a' /* used to display all types of backup */


/*
 *  Frequency of the backup.
 */
typedef enum {
    AB_NEVER,          /* No automatic backup */
    AB_WEEK,           /* Once a week. */
    AB_MONTH           /* Once a month. */
} AutoBackup;


/*
 *  IndexEntry defines the entry format in the root/BACKUP/index file.
 */
typedef struct {
    word       IE_groupID;
    BackupType IE_type;
    char       IE_date[LEN_DATE]; /* This feild is always fully filled */
    char       IE_description[LEN_DESCRIPTION];
} IndexEntry;


/*
 *  ContentEntry defines the entry format in the
 *  root/BACKUP/groupID/content file.
 */
typedef struct {
    word       CE_groupID;
    word       CE_pathToken;
    dword      CE_fileSize;
    char       CE_relativePath[PATH_LENGTH];
    char       CE_uniqName[FILE_LONGNAME_LENGTH+1];/*file name in backup dir*/
} ContentEntry;


/*
 *  IndexEntryInMem defines the structure that stores the info read from 
 *  the index file.  The actual data immediately follows the structure.
 *  The First data is 14 bytes of date: MMDDYYYYHHMMSS 
 *                                     (month/day/year/hr/min/sec)
 *  The second data is memo description of the backup.
 *  The Third data is the relative path name of the file, including 
 *  the file name.
 *  
 */
typedef struct 
{
    word IEIM_groupID;
    BackupType IEIM_type;
                              /* HERE there is a field of LEN_DATE */
    word IEIM_descriptionLen; /* strlen of description */
    word IEIM_pathToken;
    word IEIM_fileLen;        /* strlen of file path */
} IndexEntryInMem;


/********************************************************************
 * APIs for the Backup and Restore Library.
 *******************************************************************/
GroupID _far _pascal BRCreateBackupGroup
  (const char *description, BackupType backupType);

Boolean _far _pascal BRBackupSingleFile
  (GroupID id, word diskHandleOrPathToken, const char *relativePath);

Boolean _far _pascal BRBackupSystemConfig(const char *description);
Boolean _far _pascal BRBackupSystemConfigWithID(GroupID id);

Boolean _far _pascal BRBackupUserDoc(const char *description, 
				     BackupDrive destination, 
					Boolean BUEmail,
					Boolean andFax,
					void (*callback)(void));

Boolean _far _pascal BRRecursiveBackupDir(const char *description,
					  word pathTokenOfTopDir, 
					  const char *relativePathOfTopDir,
					  const char *destPath,
					  void (*callback)(void));

Boolean _far _pascal BRRestoreBackupGroup(GroupID id, 
					  word diskHandleOrPathToken,
					  const char *relativePath, 
					  void (*callback)(void));

optr _far _pascal BRListBackupGroups(word *num, word *maxFileLen,
				     BackupType type);

Boolean _far _pascal BRGetInfoOnBackupGroup(GroupID id,
                                            word *numFiles,
					    dword *totalSize,
					    const char *relativePath,
					    word diskHandleOrPathToken);

optr _far _pascal BRViewBackupGroup(GroupID id, 
				    word *max, 
				    word *maxFileLength);

Boolean _far _pascal BRGetInfoOnUserDocDir(word *numFiles, dword *totalSize);
Boolean _far _pascal BRGetInfoOnUserMailDir(word *numFiles, dword *totalSize);
Boolean _far _pascal BRGetInfoOnUserFaxDir(word *numFiles, dword *totalSize);

Boolean _far _pascal BRDeleteBackupGroup
(GroupID id, word diskHandleOrPathToken, const char *relativePath, void (*statusCallback)(void));

dword _far _pascal BRGetBackupDiskFreeSpace();

@endlib


@endif /* __BACKREST_GOH__ */
