/*----------------------------------------------------------------------------

	Copyright (c) GeoWorks 1989-1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Include - Pen Library Definitions
FILE:		pen.goh

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Schoon  6/18/92		Initial Version

DESCRIPTION:
	Definitions for users of the pen library, and the various object
	exported by the library.


	$Id: pen.goh,v 1.1 97/04/04 15:57:00 newdeal Exp $

----------------------------------------------------------------------------*/

@optimize
@deflib pen

#include <print.h>
@include <Objects/visC.goh>
@include <Objects/gCtrlC.goh>

@class InkClass, VisClass;

/*-----------------------------------------------------------------------------
 *	Constants and structures
 *---------------------------------------------------------------------------*/

typedef struct {
    	Rectangle    IDBF_bounds;
	/*
	 * The bounds of the data to save out/the coords at which to load 
	 * the data.
	 */
	VMFileHandle IDBF_VMFile;
	/* VM File to write to/read from */

	DBGroupAndItem IDBF_DBGroupAndItem;
	/* DB Item to save to/load from (or 0 to create a new one) */

	word IDBF_DBExtra;
	/* Extra space to skip at the start of the block */
} InkDBFrame;

typedef WordFlags InkFlags;
#define IF_MOUSE_FLAGS	0x8000
/* Set if this object has grabbed the mouse */
#define IF_SELECTING	0x4000
/* Set if this object is doing a selection */
#define IF_HAS_TARGET	0x2000
/* Set if this object has the target. */
#define IF_HAS_SYS_TARGET	0x1000
/* Set if this object has the sys target. */
#define IF_DIRTY	0x0800
/* Set when we are dirty */
#define IF_ONLY_CHILD_OF_CONTENT	0x0400
/* Set if this is the only child of a VisContent, in which case it
 * should use some optimizations to reply to ink at the view level. */
#define IF_CONTROLLED	0x0200
/* Set if this object is to be used in conjunction with an InkControl
 * object.*/
#define IF_INVALIDATE_ERASURES	0x0100
/* Set if we should invalidate the bounds of all erasures, in case
 * there is a subclass that needs to redraw the background. */
#define IF_HAS_UNDO	0x0080
/*  Set if this object should be undoable. */

typedef struct {
	word 	DBR_group;
	word	DBR_item;
	word	unused1;
	word 	unused2;
} DBReturn;

/*-----------------------------------------------------------------------------
 *		Methods
 *---------------------------------------------------------------------------*/

@message void MSG_INK_SAVE_TO_DB_ITEM(DBReturn *RetValue = axbpcxdx, \
					InkDBFrame _far *ptr = ss:bp);
/* XXX */
/*
 *	Saves the data from the ink into the passed DB item (or creates a new
 *	one if none passed). This also marks the object as clean.
 *
 *	Pass: 	ptr 		- pointer to InkDBFrame structure
 *		RetValue	- pointer to DBReturn structure (empty)
 *	
 *	Return: RetValue  	- pointer to DBReturn structure (filled),
 *	    			which contains DB group/item written to 
 *				(VM Chain)
 */

@message void MSG_INK_LOAD_FROM_DB_ITEM(InkDBFrame _far *ptr = ss:bp);
/*
 *	Loads the data into the ink from the passed DB item.
 *	NOTE: This marks the object as clean.
 *
 *	Pass: ptr	- pointer to InkDBFrame structure
 */

@reserveMessages 1;

@message void MSG_INK_SET_TOOL(InkTool tool = cx);
/*
 *	Sets the current tool to be used when the user clicks on the ink obj.
 *
 *	Pass: cx - InkTool
 */

@message InkTool MSG_INK_GET_TOOL() = cx;
/*
 *	Gets the current tool to be used when the user clicks on the ink obj.
 *
 *	Return: InkTool
 */

@message void MSG_INK_SET_PEN_COLOR(Color clr = cl);
/*
 *	Sets the current pen color.
 *
 *	Pass: clr	- Color
 */

@message void MSG_INK_SET_DIRTY_AD(Message msg = bp, optr object = cx:dx);
/*
 *	Sets the AD to be activated when the user dirties the object
 *
 *	Pass: msg   	- message
 *	      object	- optr of object
 *
 */

@message void MSG_INK_SET_FLAGS(InkFlags setflags = cx, InkFlags clearflags = dx);
/*
 *	Sets the ink flags.
 *
 *	Pass: setflags 		- flags to set
 *	      clearflags	- flags to clear
 *
 *	Return: nothing
 */

@message InkFlags MSG_INK_GET_FLAGS() = cx;
/*
 * 	Gets the current ink flags
 *
 *	Pass: nothing
 *	Return: current InkFlags
 */

typedef enum /* word */ {
	IT_PENCIL = 0,
	IT_ERASER = 2,
	IT_SELECTOR = 4
} InkTool;

@message void MSG_INK_ADVANCE_SELECTION_ANTS();
/*
 * Private message used internally by the ink object to update the selection
 * area.
 */

@message void MSG_INK_SET_STROKE_SIZE(byte width = cl, byte height = ch);
@message void MSG_INK_SET_MAX_POINTS(word maxPoints = cx);

@protominor	BackspaceInk
@message int MSG_INK_DELETE_LAST_GESTURE() = ax;
@protoreset

typedef struct {
    byte    ISS_width;
    byte    ISS_height;
} InkStrokeSize;


/*-----------------------------------------------------------------------------
 *		Instance Data
 *---------------------------------------------------------------------------*/


@instance InkFlags 		II_flags = IF_HAS_UNDO;
@instance InkTool		II_tool = 0;
@instance Color			II_penColor = 0;
@instance ChunkHandle 		II_segments = NullHandle;
@instance optr		 	II_dirtyOutput = NullOptr;
@instance Message	 	II_dirtyMsg;
@instance Rectangle	    	II_selectBounds;
@instance GStateHandle 	    	II_cachedGState;
@instance TimerHandle	    	II_antTimer;
@instance word		    	II_antTimerID;
@instance byte	    	    	II_antMask;

@vardata    InkStrokeSize   ATTR_INK_STROKE_SIZE;
@vardata    word    	    ATTR_INK_MAX_POINTS;
@endc

@class InkMPClass, InkClass;

@message void MSG_INKMP_CREATE_PASTE_BITMAP();
/*
 *	Creates a bitmap to represent the paste while the user
 *	is dragging the thing around. The bitmap is allocated in
 *	the clipboard file, the block handle of which gets stored
 *	in IMPI_pasteBitmap, while a GState to the bitmap is stored
 *	to IMPI_pasteBitmapGState.
 *
 *	PASS:		nothing
 *
 *	RETURN:		nothing
 */

@message void MSG_INKMP_DRAW_PASTE_BITMAP(GStateHandle gstate = bp);
/*
 *	Draws the draggable paste bitmap (if any) to the passed GState.
 *
 *	PASS:		gstate - GStateHandle to draw the bitmap to
 *
 *	RETURN:		nothing
 */


@message void MSG_INKMP_FINISH_PASTE();
/*
 *	Erases the paste bitmap drawn at IMPI_lastPos, frees the bitmap,
 *	and arranges the pasted points properly.
 *
 *	PASS:		nothing
 *
 *	RETURN:		nothing
 */

@protominor InkNewForDrag

@message void MSG_INKMP_ABORT_PASTE();
/*
 * 	Erases the paste bitmap drawn at IMPI_lastPosition, frees
 * 	the bitmap, and gets rid of the pasted points.
 * 
 * 	PASS:		nothing
 * 	RETURN:		nothing
 */

@message void MSG_INKMP_DRAG_BITMAP();
/*
 * 	moves the paste bitmap to the passed position.
 * 
 * 	PASS:		same as MSG_META_PTR
 * 
 * 	RETURN:		nothing
 */

@protoreset

@instance	word	IMPI_pastedStart; /* First point of pasted region */
@instance	word	IMPI_pastedEnd;   /* Last point of pasted region  */
@instance	Rectangle	IMPI_pastedBounds;   /* Bounding box of */
						     /* dragged region  */
@instance	Point	IMPI_lastPos;   	  /* last pen position */
@instance	Point	IMPI_bitmapMouseOffset;   /*offset from the point at */
						  /* which the user clicked  */
						  /* to the upper left       */
						  /* of the paste bitmap.    */
@instance	byte		IMPI_flags;	/* internal state flags */
@instance	InkTool		IMPI_oldTool;	/* stores the old tool while */
						/* dragging */
@instance	VMBlockHandle	IMPI_pasteBitmap; /* VMBlockHandle of bitmap */
@instance	GStateHandle	IMPI_pasteBitmapGState; /* GState to bitmap */

@endc




@class InkControlClass, GenControlClass;

/*-----------------------------------------------------------------------------
 *		Hints
 *---------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
 *		Constants & Structures
 *---------------------------------------------------------------------------*/

typedef WordFlags InkControlFeatures;
#define ICF_PENCIL_TOOL		0x04
#define ICF_ERASER_TOOL		0x02
#define ICF_SELECTION_TOOL	0x01

/* Toolbox features flags (used with ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI)
 */

typedef WordFlags InkControlToolboxFeatures;
#define ICTF_PENCIL_TOOL	0x04
#define ICTF_ERASER_TOOL	0x02
#define ICTF_SELECTION_TOOL	0x01



#define IC_DEFAULT_FEATURES  (ICF_PENCIL_TOOL | ICF_ERASER_TOOL | ICF_SELECTION_TOOL)
#define IC_DEFAULT_TOOLBOX_FEATURES (ICTF_PENCIL_TOOL | ICTF_ERASER_TOOL | ICTF_SELECTION_TOOL)

/*
 *	Structure sent with GWNT_INK_HAS_TARGET notification
 */

typedef struct {
	optr	NIHT_optr;
} NotifyInkHasTarget;

/*-----------------------------------------------------------------------------
 *		Messages
 *---------------------------------------------------------------------------*/

@message void MSG_IC_SET_TOOL_FROM_LIST(InkTool tool = cx);

@protominor InkNewForBullet
    
@vardata    InkTool TEMP_INK_CONTROL_SELECTED_TOOL;
    
@protoreset
/*-----------------------------------------------------------------------------
 *		Defaults
 *---------------------------------------------------------------------------*/

@default GCI_output = TO_APP_TARGET;

@endc

/*-----------------------------------------------------------------------------
 *	FILE ACCESS ROUTINES
 *---------------------------------------------------------------------------*/
#define INK_DB_PROTOCOL_MAJOR 	1
#define INK_DB_PROTOCOL_MINOR 	1

extern DBGroupAndItem _pascal InkCompress (MemHandle inkData, VMFileHandle file, DBGroupAndItem destItem);

extern MemHandle _pascal InkDecompress (VMFileHandle file, DBGroupAndItem srcItem);

extern void _pascal InkDBInit(VMFileHandle fh);
/* XXX */
/*
 * Takes a new Ink database file, and initializes it for use (creates all
 * needed map  and creates a top-level folder).
 *
 * Pass: 	fh = handle of file
 * Returns: 	nothing
 */

extern dword _pascal InkDBGetHeadFolder(VMFileHandle fh);
/* XXX */
/*
 * Gets the head folder for the DB file.
 *
 * Pass:	fh = file handle 
 * Returns: 	opaque folder handle
 */

typedef struct {
	dword	IDBDI_dword1;	/* opaque folder handle */
    	dword	IDBDI_dword2;	/* dword tag of note */
	word	IDBDI_word1; 	/* page number */
} InkDBDisplayInfo;

/* 
 * More mnemonically named ways to get to the fields of the
 * InkDBDisplayInfo structure.
*/
#define IDBDI_folder	0	    	    	 /* offset to IDBDI_dword1 */
#define IDBDI_note  	(sizeof(dword))  	 /* offset to IDBDI_dword2 */
#define IDBDI_page  	(2*(sizeof(dword)))  	 /* offset to IDBDI_word1  */
    	    	        	
extern void _pascal InkDBGetDisplayInfo(InkDBDisplayInfo *RetValue, VMFileHandle fh);
/* XXX */
/*
 * Gets the current display info for the file
 *
 * Pass:	RetValue = ptr to InkDBDisplayInfo structure (empty)
 *		fh = file handle 
 *
 * Returns: 	RetValue = ptr to InkDBDisplayInfo structure (filled)
 */

extern void _pascal InkDBSetDisplayInfo(VMFileHandle fh, dword ofh, dword note, \
				 word page);
/* XXX */
/*
 * Sets the current display info for the file
 *
 * Pass:	fh = file handle 
 *       	ofh = opaque folder handle
 *		note = note
 *		page = page
 */

extern void _pascal InkSetDocPageInfo(PageSizeReport *psr, VMFileHandle fh);
/* XXX */
/*
 * Sets the current page info for the file
 *
 * Pass: 	psr =  pointer to PageSizeReport struct (empty)
 *		fh = database file handle
 *
 * Return: 	psr = pointer to PageSizeReport struct (filled)
 */

extern void _pascal InkGetDocPageInfo(PageSizeReport *psr, VMFileHandle fh);
/* XXX */
/*
 * Gets the current page info for the file
 *
 * Pass: 	psr = pointer to PageSizeReport struct (empty)
 *		fh = database file handle
 *
 * Return: 	psr = pointer to PageSizeReport struct (filled)
 */

typedef enum {
	IBT_NO_BACKGROUND = 0,			
	IBT_NARROW_LINED_PAPER = 2,			
	IBT_MEDIUM_LINED_PAPER = 4,			
	IBT_WIDE_LINED_PAPER = 6,			
	IBT_NARROW_STENO_PAPER = 8,			
	IBT_MEDIUM_STENO_PAPER = 10,			
	IBT_WIDE_STENO_PAPER = 12,			
	IBT_SMALL_GRID = 14,				
	IBT_MEDIUM_GRID = 16,				
	IBT_LARGE_GRID = 18,				
	IBT_SMALL_CROSS_SECTION = 20,			
	IBT_MEDIUM_CROSS_SECTION = 22,		
	IBT_LARGE_CROSS_SECTION = 24,			
	IBT_TO_DO_LIST = 26,				
	IBT_PHONE_MESSAGE = 28,			
	IBT_CUSTOM_BACKGROUND = 30
} InkBackgroundType;

extern void _pascal InkSetDocGString(VMFileHandle dbfh, word type);
/* XXX */
/*
 * Sets the GString info for the file
 *
 * Pass: 	dbfh =  database file handle
 *		type = background type
 *
 * Return: 	nothing
 */

extern word _pascal InkGetDocGString(VMFileHandle dbfh);
/* XXX */
/*
 * Gets the GString for the file
 *
 * Pass: 	dbfh = database file handle
 *
 * Return: 	background type
 */

extern void _pascal InkSetDocCustomGString(VMFileHandle dbfh, Handle gh);
/* XXX */
/*
 * Sets the GString info for the file
 *
 * Pass: 	dbfh =  database file handle
 *	 	gh = custom Gstring handle
 *
 * Return: 	nothing
 */

extern Handle _pascal InkGetDocCustomGString(VMFileHandle dbfh);
/* XXX */
/*
 * Gets the custom GString for the file
 *
 * Pass: 	dbfh - database file handle
 *
 * Return: 	custom Gstring handle
 */

#define INK_DB_MAX_TITLE_SIZE 	128

extern void _pascal InkSendTitleToTextObject(dword tag, VMFileHandle fh, optr to);
/* XXX */
/*
 * Sets the passed text object with the name from the passed folder or note
 *
 * Pass: 	tag = dword tag of folder or note
 *		fh =  file handle 
 *		to = optr of text object to set
 *
 * Returns: 	nothing
 */

extern word _pascal InkGetTitle(dword tag, VMFileHandle fh, char *dest);
/* XXX */
/*
 * Gets the name for the passed folder or note
 *
 * Pass: 	tag = dword tag of folder or note
 *		fh = file handle 
 *		dest = destination to store null-terminated name
 *			(should be INK_DB_MAX_TITLE_SIZE + 1)
 * Return: 	size of name (including null terminator)
 */

extern dword _pascal InkGetParentFolder(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Gets the parent of the passed folder or note
 *
 * Pass: 	tag = dword tag of folder/note
 *		fh = file handle 
 *
 * Return: 	parent folder
 */

extern void
    _pascal InkFolderSetTitleFromTextObject(dword fldr, VMFileHandle fh,
				    optr text);
extern void
    _pascal InkNoteSetTitleFromTextObject(dword note, VMFileHandle fh, 
				  optr text);
/* XXX */
/*
 * Sets the name for the passed folder or note
 *
 * Pass: 	fldr = dword handle of folder or note
 *		fh = file handle 
 *		text = text object to get title from
 */

extern void
    _pascal InkFolderSetTitle(dword fldr, VMFileHandle fh, const char *name);
extern void
    _pascal InkNoteSetTitle(dword note, VMFileHandle fh, const char *name);
/* XXX */
/*
 * Sets the name for the passed folder or note
 *
 * Pass: 	fldr = dword handle of folder or note
 *		fh = file handle 
 *		name = new null-terminated name
 *			(should be INK_DB_MAX_TITLE_SIZE + 1)
 */

extern dword _pascal InkFolderGetContents(dword tag, VMFileHandle fh,
				  DBGroupAndItem *subFolders);
/* XXX */
/*
 * Returns the group/item of a chunk array of subfolders (DB items) for the
 * passed folder.    
 *
 * Pass: 	tag = dword tag of FolderInfo (empty)
 *		fh = file handle 
 *		subFolders = pointer to DBGroupAndItem

 * Return: 	DBGroupAndItem of chunk array of notes
 *	  	AND
 *		*subFolders = DBGroupAndItem of chunk array of subfolders
 *
 * Note:	 Call DBLock to access chunk array
 */

extern dword
    _pascal InkFolderGetNumChildren(dword fldr, VMFileHandle fh);
/* XXX */
/*
 * Gets the # children of the folder.
 *
 * Pass: 	fldr = folder
 *		fh = file handle 
 *
 * Return: 	high word = # sub folders
 *	  	low word  = # notes
 */

extern void
    _pascal InkFolderDisplayChildInList(dword fldr, VMFileHandle fh, optr list,\
					word entry, Boolean displayFolders);
/* XXX */
/*
 * Routine to be called from the applications 
 *	MSG_META_GEN_LIST_REQUEST_ENTRY_MONIKER handler.	
 *
 * Pass: 	fldr = folder
 *		fh = file handle 
 *		list = OD of GenDynamicList object
 *		entry = entry # of child we want to display
 *	    	displayFolders = TRUE if we want to display folders
 *
 * Return: nothing
 */

extern Boolean
    _pascal InkFolderGetChildInfo(dword fldr,
			  VMFileHandle fh,
			  word child,
			  dword *childID);
/* XXX */
/*
 * Gets information for a numbered child.
 * 
 * Pass: 	fldr = folder
 *		fh = file handle 
 *		child = child number
 *		childID = pointer to dword
 *
 * Return: 	(Boolean) = set if folder / clear if item
 *	  	*childID = child's ID number
 */

extern word _pascal InkFolderGetChildNumber(dword fldr, VMFileHandle fh, dword note);
/* XXX */
/*
 * Gets the number of a child given its ID
 *
 * Pass: 	fldr = folder
 *		fh = file handle 
 *		note = note or folder
 *
 * Return: 	(word) = number
 */

extern dword _pascal InkFolderCreateSubFolder(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Creates a subfolder in the current folder. This automatically adds this
 * folder to the chunk array of children of the passed parent.	
 *
 * Pass: 	tag = dword tag of parent Folder (0:0 if no parent)
 *		fh = file handle 
 *
 * Return: 	(dword) = new child folder
 */

extern void _pascal InkFolderMove(dword fldr, dword pfldr);
/* XXX */
/*
 * Moves the passed folder.
 *
 * Pass: 	fldr = folder to move
 *		pfldr = new parent folder
 *
 * Return: nothing
 */

extern void _pascal InkFolderDelete(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Deletes the passed folder. If there are children, it does a recursive
 * deletion.	
 *
 * Pass: 	tag = dword tag of folder
 *		fh = file handle 
 *
 * Return: nothing
 */

extern word _pascal InkFolderDepthFirstTraverse(dword rfldr, VMFileHandle fh, \
					PCB(Boolean, callback,/* TRUE to stop */
						     (dword fldr,
						      VMFileHandle fh,
						      word *info)),
					word *info);
/* XXX */
/*
 * Does a depth-first traversal of the folder tree.
 *
 * Pass: rfldr = folder at "root" of tree
 *	 fh = file handle 
 *	 callback = far ptr to callback routine
 *	 info = ptr to extra data to pass to callback routine
 *
 * Return: (word) = data returned from callback routine
 *
 * Callback:
 *	Boolean callback(dword fldr, VMFileHandle fh, word *info);
 *
 *	Pass:	fldr = folder
 *		fh = file handle passed in
 *		info = ptr to data passed
 *		
 *	Return: (Boolean) = TRUE to end traversal
 *		info = ptr to data to pass on
 *
 */

extern dword _pascal InkNoteCreate(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Creates a new empty note.
 *
 * Pass: 	tag = dword tag of parent folder
 *		fh = file handle 
 *
 * Return: 	dword tag of new note
 */

extern void _pascal InkNoteCopyMoniker(dword title, optr list, word type, word entry);
/* XXX */
/*
 * Copy the icon and folder/note name into the vis moniker
 *
 * Pass: 	title = title of the note or folder
 *		list = optr of output list
 *		type  = 1 if text note, 0 if ink note, -1 if folder
 *		entry = entry index
 *
 * Return: 	nothing
 */

extern dword _pascal InkNoteGetPages(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Gets the page chunk array from the current note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle 
 *
 * Return: 	group/item of DB item containing chunk array of page info
 */

extern word _pascal InkNoteGetNumPages(dword item);
/* XXX */
/*
 * Gets the page chunk array from the current note
 *
 * Pass: 	item - group/item of DB item containing chunk array of page info
 *
 * Return: 	total number of pages in a note
 */

extern word _pascal InkNoteCreatePage(dword tag, VMFileHandle fh, word page);
/* XXX */
/*
 * Create a new page in a note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle 
 *		page = page number insert before (CA_NULL_ELEMENT to append)
 *
 * Return: 	(word) new page number
 */

extern void
    _pascal InkNoteLoadPage(dword tag, VMFileHandle fh, word page, optr obj, 
		    word type);
/* XXX */
/*
 * Load the ink object or the text object from a page of a note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle 
 *		page = page number
 *		obj = ink object or text object optr
 *		type = note type (0:ink, 1:text)
 *
 * Return: 	none
 */

extern void
    _pascal InkNoteSavePage(dword tag, VMFileHandle fh, word page, optr obj,
		    word type);
/* XXX */
/*
 * Save the ink from a page of a note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle 
 *		page = page number
 *		obj = ink object or text object optr
 *		type = note type (0:ink, 1:text)
 *
 * Return: 	none
 */

#define INK_DB_MAX_NOTE_KEYWORDS_SIZE 	128

extern void
    _pascal InkNoteSetKeywordsFromTextObject(dword tag, VMFileHandle fh, 
				     optr text);
/* XXX */
/*
 * Sets the keyword text for the note with text from the text object
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle
 *		text = optr of text object
 *
 * Return: 	nothing
 */

extern void _pascal InkNoteSetKeywords(dword tag, VMFileHandle fh, const char *text);
/* XXX */
/*
 * Sets the keyword text for the note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle
 *		text = new keyword text, null-terminated
 *		(should be < INK_DB_MAX_NOTE_KEYWORDS_SIZE chars)
 *
 * Return: 	nothing	
 */

extern word _pascal InkNoteGetKeywords(dword tag, VMFileHandle fh, char *text);
/* XXX */
/*
 * Gets the keyword text for the passed note
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle 
 *		text = destination to store null-terminated text
 *			(should be INK_DB_MAX_NOTE_KEYWORDS_SIZE + 1)
 *
 * Return: 	size of name (excluding null terminator)
 */

extern void
    _pascal InkNoteSendKeywordsToTextObject(dword tag, VMFileHandle fh, \
					optr text);
/* XXX */
/*
 * Puts the keyword text into a text object
 *
 * Pass: 	tag = dword tag of note
 *		fh = file handle
 *		text = optr of text object
 *
 * Return: nothing
 */

extern void
    _pascal InkNoteDelete(dword tag, VMFileHandle fh);
/* XXX */
/*
 * Deletes the note and all of the associated pages/information, and all
 * internal references to it.
 *
 * Pass: 	tag = dword tag of note
 *  		fh = file handle
 *
 * Return: nothing
 */

extern void
    _pascal InkNoteMove(dword tag, dword pfoldr, VMFileHandle fh);
/* XXX */
/*
 * Moves the passed note.
 *
 * Pass: 	tag = note to move
 *  		pfoldr = new parent folder
 *		fh = file handle
 *
 * Return: 	nothing
 */

extern void _pascal InkNoteSetModificationDate(word tdft1, word tdft2, dword note, \
				VMFileHandle fh);
/* XXX */
/*
 * Sets the modification date
 *
 * Pass:	tdft1 = 1st return value returned from TimerGetDateAndTime
 *		tdft2 = 2nd return value returned from TimerGetDateAndTime
 *		note = note
 *		fh = file handle
 *
 * Return: nothing
 */

extern dword
    _pascal InkNoteGetModificationDate(dword note, VMFileHandle fh);
extern dword
    _pascal InkNoteGetCreationDate(dword note, VMFileHandle fh);
/* XXX */
/*
 * Gets the modification/creation date
 *
 * Pass: 	note = note
 *  		fh = file handle
 *
 * Return: 	(dword) 
 *		= high word = year
 *		= low word  = low byte is month (1-12), high byte is day (1-31)
 */

typedef ByteEnum NoteType;
#define	NT_INK 	0
#define	NT_TEXT 1

extern NoteType
    _pascal InkNoteGetNoteType(dword note, VMFileHandle fh);
/* XXX */
/*
 * Gets the note type = text or ink
 *
 * Pass: 	note = note
 *  		fh = file handle
 *
 * Return: 	(word) NoteType
 */


extern void _pascal InkNoteSetNoteType(dword note, VMFileHandle fh, NoteType nt);
/* XXX */
/*
 * Sets the note type = text or ink
 *
 * Pass: 	note = note
 *  		fh = file handle
 *		nt = NoteType
 *
 * Return: 	nothing
 */

extern MemHandle _pascal InkNoteFindByTitle(	/* XXX */
    	    	    char *string, byte opt, Boolean body, VMFileHandle fh);
/*
 * Finds notes by searching for the title
 *
 * Pass: 	string = string to match (can contain C_WILDCARD 
 *					or C_SINGLE_WILDCARD)
 *		opt = SearchOptions
 *		body = TRUE if you want to look in the body of text notes
 *		fh = file handle
 *
 * Return: 	(MemHandle) = 
 *			handle of block containing dword tags of matching notes
 *			in this format (or 0 if no match found).
 *			- OR -
 *			= 0 if none found
 *
 *		FindNoteHeader;
 * 		     -dword tag-
 *		     -dword tag-
 *		     -dword tag-
 *			etc...
 *
 * NOTE: Only returns first 20000 or so notes that match
 */

typedef struct {
    word	FNH_count;  	    /* the # of matching notes we've found. */
} FindNoteHeader;
#define FNH_data (sizeof(FindNoteHeader))   /* start of series of dword tags */

extern MemHandle _pascal InkNoteFindByKeywords(     /* XXX */
    	    	    VMFileHandle fh, const char *strings, word opt);
/*
 * Finds notes that contain the passed keywords
 *
 * Pass: 	fh = file handle
 *		strings = ptr to keyword strings (separated by whitespace 
 *			  or commas)
 *		opt = TRUE if you only want notes that contain *all* passed 
 *		      	keywords
 *	     	      FALSE if you want all notes that matched at least one 
 *	       		keyword
 *
 * Return: 	(MemHandle) =
 *			handle of block containing dword tags of matching notes
 *			(same as InkNoteFindByTitle)
 *				- OR -
 *			= 0 if none found
 *
 *		FindNoteHeader:
 *  	    	     -number of tags-
 *		     -dword tag-
 * 		     -dword tag-
 *		     -dword tag-
 *			etc...
 *
 * NOTE: Only returns first 20000 or so notes that match
 */

/* Absolute digitizer bounds */
typedef struct {
    word	DB_left;
    word	DB_top;
    word	DB_right;
    word	DB_bottom;
} DigitizerBounds;

extern Boolean _pascal InkGetBoundsInDigitizerCoords(optr visObject,
					     DigitizerBounds _far *bounds);
/*
 * Returns the bounds of a vis object in absolute digitizer coordinates.
 *
 * Pass: 	visObject = optr of vis object
 *		bounds = pointer to DigitizerBounds structure to fill in
 * Return: 	(Boolean) = FALSE if unable to convert bounds to digitizer
 *		coordinates.
 *              If TRUE, the DigitizerBounds structure is filled with the 
 *              vis object bounds in absolute digitizer coordinates.
 */

extern Boolean _pascal InkClipDigitizerCoordsInk(MemHandle inkData,
						 DigitizerBounds _far *bounds);
/*
 * Clip the digitizer ink to the passed absolute digitizer bounds by
 * discarding points that lie outside the bounds.   
 *
 * If an ink stroke is completely outside the clip bounds, it
 * is discarded. This routine assumes the Y digitizer values
 * increase from bottom to top and the X digitizer values
 * increase from left to right.
 *
 * Pass: 	inkData = handle of InkDigitizerCoordsHeader data block
 *		bounds = pointer to DigitizerBounds structure
 * Return: 	(Boolean) = FALSE if clipping failed
 *                          - or - 
 *                          TRUE if the ink was successfully clipped.
 */



#ifdef __HIGHC__

pragma Alias(InkDBInit, "INKDBINIT");
pragma Alias(InkDBGetHeadFolder, "INKDBGETHEADFOLDER");
pragma Alias(InkDBGetDisplayInfo, "INKDBGETDISPLAYINFO");
pragma Alias(InkDBSetDisplayInfo, "INKDBSETDISPLAYINFO");
pragma Alias(InkSetDocPageInfo, "INKSETDOCPAGEINFO");
pragma Alias(InkGetDocPageInfo, "INKGETDOCPAGEINFO");
pragma Alias(InkSetDocGString, "INKSETDOCGSTRING");
pragma Alias(InkGetDocGString, "INKGETDOCGSTRING");
pragma Alias(InkSetDocCustomGString, "INKSETDOCCUSTOMGSTRING");
pragma Alias(InkGetDocCustomGString, "INKGETDOCCUSTOMGSTRING");
pragma Alias(InkSendTitleToTextObject, "INKSENDTITLETOTEXTOBJECT");
pragma Alias(InkGetTitle, "INKGETTITLE");
pragma Alias(InkGetParentFolder, "INKGETPARENTFOLDER");
pragma Alias(InkFolderSetTitleFromTextObject, "INKFOLDERSETTITLEFROMTEXTOBJECT");
pragma Alias(InkNoteSetTitleFromTextObject, "INKNOTESETTITLEFROMTEXTOBJECT");
pragma Alias(InkFolderSetTitle, "INKFOLDERSETTITLE");
pragma Alias(InkNoteSetTitle, "INKNOTESETTITLE");
pragma Alias(InkFolderGetContents, "INKFOLDERGETCONTENTS");
pragma Alias(InkFolderGetNumChildren, "INKFOLDERGETNUMCHILDREN");
pragma Alias(InkFolderDisplayChildInList, "INKFOLDERDISPLAYCHILDINLIST");
pragma Alias(InkFolderGetChildInfo, "INKFOLDERGETCHILDINFO");
pragma Alias(InkFolderGetChildNumber, "INKFOLDERGETCHILDNUMBER");
pragma Alias(InkFolderCreateSubFolder, "INKFOLDERCREATESUBFOLDER");
pragma Alias(InkFolderMove, "INKFOLDERMOVE");
pragma Alias(InkFolderDelete, "INKFOLDERDELETE");
pragma Alias(InkFolderDepthFirstTraverse, "INKFOLDERDEPTHFIRSTTRAVERSE");
pragma Alias(InkNoteCreate, "INKNOTECREATE");
pragma Alias(InkNoteCopyMoniker, "INKNOTECOPYMONIKER");
pragma Alias(InkNoteGetPages, "INKNOTEGETPAGES");
pragma Alias(InkNoteGetNumPages, "INKNOTEGETNUMPAGES");
pragma Alias(InkNoteCreatePage, "INKNOTECREATEPAGE");
pragma Alias(InkNoteLoadPage, "INKNOTELOADPAGE");
pragma Alias(InkNoteSavePage, "INKNOTESAVEPAGE");
pragma Alias(InkNoteSetKeywordsFromTextObject, "INKNOTESETKEYWORDSFROMTEXTOBJECT");
pragma Alias(InkNoteSetKeywords, "INKNOTESETKEYWORDS");
pragma Alias(InkNoteGetKeywords, "INKNOTEGETKEYWORDS");
pragma Alias(InkNoteSendKeywordsToTextObject, "INKNOTESENDKEYWORDSTOTEXTOBJECT");
pragma Alias(InkNoteDelete, "INKNOTEDELETE");
pragma Alias(InkNoteMove, "INKNOTEMOVE");
pragma Alias(InkNoteSetModificationDate, "INKNOTESETMODIFICATIONDATE");
pragma Alias(InkNoteGetCreationDate, "INKNOTEGETCREATIONDATE");
pragma Alias(InkNoteGetModificationDate, "INKNOTEGETMODIFICATIONDATE");
pragma Alias(InkNoteGetNoteType, "INKNOTEGETNOTETYPE");
pragma Alias(InkNoteSetNoteType, "INKNOTESETNOTETYPE");
pragma Alias(InkNoteFindByTitle, "INKNOTEFINDBYTITLE");
pragma Alias(InkNoteFindByKeywords, "INKNOTEFINDBYKEYWORDS");
pragma Alias(InkCompress, "INKCOMPRESS");
pragma Alias(InkDecompress, "INKDECOMPRESS");
pragma Alias(InkGetBoundsInDigitizerCoords, "INKGETBOUNDSINDIGITIZERCOORDS");
pragma Alias(InkClipDigitizerCoordsInk, "INKCLIPDIGITIZERCOORDSINK");

#endif

@endlib
