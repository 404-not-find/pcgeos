/*****************************************************************************
 *
 *	Copyright (c) GeoWorks 1990 -- All Rights Reserved
 *
 * PROJECT:	GEOS
 * MODULE:	CInclude -- PCCom Library Definitions
 * FILE:	pccom.goh
 *
 * AUTHOR:		Cassie Hartzog, Nov 15, 1993
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 * 	Cassie	11/15/93	Initial revision
 *
 * DESCRIPTION:
 *	Description of the PCCom library interface.
 *		
 *	$Id: pccom.goh,v 1.1 97/04/04 15:57:52 newdeal Exp $
 ***************************************************************************/

@deflib	pccom

#include <serialDr.h>
#include <fileEnum.h>

/* --------------------------------------------------------------------------
 * 		PCCOM FILE TRANSFER PROTOCOL
 * --------------------------------------------------------------------------*/

/****************************************************************************

  The PCCom Library utilizes a simple file transfer protocol.
	
  If you have a Windows or DOS program which you would like to add the
  ability to transfer files to or from a GEOS application on another device,
  (and that application uses the PCCom Library), you will use this protocol 
  to implement the send and receive commands.

  For a more complete explanation, see the Tools documention section 10.8.3.

  These constants will be used in the explanation below.

  ACK		equ	0		; everything OK
  NAK		equ	1		; not OK, try again
  NAK_QUIT	equ	2		; not OK, give up
  SYNC		equ	0ffh

  BLOCK_START		equ	01h
  BLOCK_END		equ	02h
  BLOCK_QUOTE		equ	03h

  There can be at most 1K of data per block, and since BLOCK_START,
  BLOCK_END, and BLOCK_QUOTE are reserved values, any data with one of 
  these values must be "quoted".  

  The CRC value for a block of data is a word calculated using the
  algorithm described below, in CalcCRC().

  ------------------------------------------------------------------------
  SENDING A FILE
  ------------------------------------------------------------------------

  Sending a file to the remote machine involves the steps below. A file 
  may be sent by any program that can access the serial port.

  Note that if the block is not received correctly the first time,
  the receiver will give up after 3 more attempts to receive it.

  If you want to make the sending of the filename more robust, you can
  send it in the first data block, which contains this data:

  	!PCCom File Transfer Filename Block! <null-terminated file name>
	<optional: file size, expressed as a dword, low byte first>

  Calculate the CRC for this block in the usual manner, but send CRC+1.
  This special block should only be resent 1 time if it is not successfully
  received, instead of the normal 3 times.
  

send <Esc>XF<0x1>				(alert PCCom a file is coming )
send <null-terminated file name>     	    	(destination file name)
read byte
wait for SYNC
send <filesize dword, low byte first>
while (not EOF) {
  resend:
    if (first block) {	    	    	    	(this part is optional)
    	send BLOCK_START
	send the special block 
    	send BLOCK_END
	send CRC + 1
    } else {
    	send BLOCK_START 
	while (more bytes in block) {
    	    get next byte in block
	    if (byte == BLOCK_START, BLOCK_END, or BLOCK_QUOTE) {
	    	send BLOCK_QUOTE
		send (byte + BLOCK_QUOTE)
	    }
	    else
	    	send byte
	    endif
	}
	send BLOCK_END 
	send CRC (word value, send low byte first)
	read byte
	if (byte == NAK) 
	    goto resend
	elif (byte != SYNC) 
	    quit
	endif
	read next block from file
    }	
send byte 0
send byte 0
wait for ACK

  ------------------------------------------------------------------------
  RETRIEVING A FILE
  ------------------------------------------------------------------------

  Retrieving a file from a machine running PCCom is straightforward
  and uses the same file transfer protocol shown above for sending a
  file. The sequence of commands is different, however, and is listed
  below.  There is no special first block for file retrieval analagous
  to that for file send.

  Note that if the PCCom library does not get a SYNC after sending a
  block of data, it will resend it 3 more times before giving up.

send <Esc>XF<0x4>			    (alert PCCom you want a file)
send <null-terminated file name>     	    (source file name, can contain
                                                  wildcard characters)
wait for SYNC 	    	    	    	    (PCCom must acknowledge receipt
                                                  of the file name)
while (read byte == SYNC)    	    	    (wait for PCCom to find next file)
  read <null-terminated file name>	    (the destination file name)
  send SYNC
  read filesize (dword)
  while (filesize > 0) {
    read byte
    if (byte = BLOCK_START) {
    	while (read byte != BLOCK_END) {
	    if (byte == BLOCK_QUOTE) {
	    	read byte
	    	byte = byte - BLOCK_QUOTE
	    }
	    write byte to output buffer
	    filesize = filesize - 1
	}
	read CRC
	if (CRC = CalcCRC(buffer))
	    send SYNC
	    write buffer to destination file
	else
	    send NAK
	endif
    else 
        send NAK
    endif
    }
  read checksum (word)
  if (checksum == 0) 
    send ACK
  else
    send NAK
  }  

	    

 *---------------------------------------------------------------------*
 		CalcCRC						
 *---------------------------------------------------------------------*
  SUMMARY:	Calculate the CRC on a block of data.
  PASS:		char *buf		Pointer to the data buffer
 		short size		Size of the data buffer
 		short checksum		Previous checksum (0 at first)
  RETURN:	CRC value (2 bytes)
 *---------------------------------------------------------------------*

short	crcTable[] = { 
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
    0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
    0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
    0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
    0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
    0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};

unsigned short		IncCRC(unsigned short crc, char c){
    return ((crc << 8) ^ crcTable[((crc >> 8) ^ c) & 0xff]);
}

short		CalcCRC(char *buf, short size, short checksum){
    for (;size >= 0; size--){
 	checksum = IncCRC(checksum, *buf++);
    }
    return checksum;
}

****************************************************************************/


/* --------------------------------------------------------------------------
 * 			 CONSTANTS
 * --------------------------------------------------------------------------*/

/* 
 * Flags to pass to PCComInit specifying what type of feedback should
 * be sent.
 */
typedef WordFlags PCComInitFlags;

#define PCCIF_NOTIFY_OUTPUT	0x8000
/* send notifications when text is available for display */

#define PCCIF_NOTIFY_EXIT	0x4000
/* send notification when the remote machine shuts down the serial line */

#define PCCIF_IR_STREAM		0x0001
/* use ircomm rather than the serial driver */

typedef ByteEnum PCComDirDetailLevel;

#define PCCDDL_LOW_DETAIL			'S'

#define PCCDDL_MID_DETAIL			'M'

#define PCCDDL_FULL_DETAIL			'L'

/* 
 * Return values for PCComInit, PCComExit and the active commands
 */
typedef ByteEnum PCComReturnType;

#define	PCCRT_NO_ERROR	    	    	    	0

#define	PCCRT_CANNOT_LOAD_SERIAL_DRIVER  	1

#define	PCCRT_CANNOT_CREATE_THREAD	    	2

#define	PCCRT_CANNOT_ALLOC_STREAM   	    	3

#define PCCRT_ALREADY_INITIALIZED   	    	4
/*
 * A connection has already been established. 
 */

#define PCCRT_IN_USE	    	    	    	5
/*
 * A different application has already initialized a connection,
 * and no other connections may be made until it exits PCCom.
 */

#define PCCRT_BUSY				6
/*
 * The connection is busy, perhaps by a received command
 */

#define PCCRT_NOT_INITIALIZED			7
/*
 * You tried to issue a command before the connection was initialized.
 */

#define PCCRT_MEMORY_ALLOC_ERROR		8
/*
 * The library couldn't allocate a needed block
 */

#define PCCRT_BAD_DEST_PATH			9
/*
 * The destination given didn't work..  it couldn't be found or was just 
 * plain wacky!
 */

#define PCCRT_FILE_STARTING			10
/*
 * A new file is starting its transfer.
 */

#define PCCRT_TRANSFER_CONTINUES		11
/*
 * The transfer continues - you probably received a byte count with this one.
 */

#define PCCRT_FILE_COMPLETE			12
/*
 * The file has completed.
 */

#define PCCRT_TRANSFER_COMPLETE			13
/*
 * This unlucky number means everything worked..
 */

#define PCCRT_COMMAND_ABORTED			14
/*
 * Either you aborted or something went wrong and the library gave up on it.
 */

#define PCCRT_TOO_MUCH_OUTPUT			15
/*
 * We received more stuff than would fit in a 64K block
 */


typedef ByteEnum PCComAbortType;
#define PCCAT_DEFAULT_ABORT			0
/* Default value.  People shouldn't be using these abort
 * types unless they received a PCCRT_COMMAND_ABORTED return
 * type.
 */

#define PCCAT_CONNECTION_LOST			1
/* We've lost connection after many time-outs and retries.
 */

#define PCCAT_FILE_NOT_FOUND			2
/* Reasons: mispelling or the file just doesn't exist.
 */

#define PCCAT_PATH_NOT_FOUND			3
/* Reasons: mispelling or the path just doesn't exist.
 */

#define PCCAT_INVALID_PATH_NAME			4
/* Reasons: pathname doesn't conform to given standard.
 */

#define PCCAT_ACCESS_DENIED			5
/* Reasons: couldn't access the volume/file, but the specific reason has 
 * not been identified.
 */

#define PCCAT_INVALID_FILE_NAME			6
/* Reasons: filename doesn't conform to given standard.
 */

#define PCCAT_FILE_IN_USE			7
/* Reasons: file is currently opened by another application.
 */

#define PCCAT_VOLUME_OUT_OF_SPACE		8
/* Reasons: no more space available on the volume.
 */

#define PCCAT_VOLUME_UNAVAILABLE		9
/* Reasons: couldn't locate the target volume/disk has been
 * temporarily disabled; eg. the disk was removed from the disk
 * drive.
 */

#define PCCAT_FILE_READ_ONLY			10
/* Reasons: file has read-only status, and an attempt has been
 * made to write to it.
 */

#define	PCCAT_SHORT_READ_WRITE			11
/* Reasons: a FileRead or FileWrite has failed to read/write
 * the given number of bytes.
 */

#define PCCAT_INVALID_DRIVE			15
/* Reasons: target drive letter doesn't match with any
 * available active drives.
 */

#define PCCAT_VOLUME_WRITE_PROTECTED		19
/* Reasons: the volume medium has been write-protected, and an
 * attempt to write to the medium failed.
 */

#define PCCAT_EXTERNAL_ABORT			20
/* An abort was initiated due to external causes, eg. user
 * intervention.  It's not an internal abort as might be the
 * case of file system errors.
 */

#define PCCAT_INTERNAL_RESERVED_ABORT_TYPE	21
/* The reserved abort is because we don't want to have to quote
 * abort type data (and 95h is the quote char).  This is a 
 * placeholder to maintain symmetry.
 */
#define PCCAT_FILE_IS_VOLUME			22
/* The filename is actually the label of the volume.
 */
#define PCCAT_FILE_IS_DIRECTORY			23
/* The filename is actually the name of a directory.
 */
#define PCCAT_DIRECTORY_NAME_EXISTS		24
/* An attempt to create a directory failed because the given
 * name is currently used: another file or directory with the
 * same name exists. 
 */
#define PCCAT_TOO_MANY_DIRECTORIES		25
/* An attemp to create a directory failed because there are
 * currently more directories in the root directory then DOS
 * can handle.
 */

/*
 * The following abort code are returned by the remote system.  They
 * are analogous to the above code.
 */

#define PCCAT_REMOTE_ABORT			0x80
/* We couldn't get informative abort code from the remote.
 */

#define PCCAT_REMOTE_CONNECTION_LOST		0x81
/* Yes, you're right.  We wouldn't actually receive this code, but we want
 * to be symmetric to simplify implementation - just mark the MSB for 
 * abort code coming from the remote.
 */

#define PCCAT_REMOTE_FILE_NOT_FOUND		0x82
#define PCCAT_REMOTE_PATH_NOT_FOUND		0x83
#define PCCAT_REMOTE_INVALID_PATH_NAME		0x84
#define PCCAT_REMOTE_ACCESS_DENIED		0x85
#define PCCAT_REMOTE_INVALID_FILE_NAME		0x86
#define PCCAT_REMOTE_FILE_IN_USE		0x87
#define PCCAT_REMOTE_VOLUME_OUT_OF_SPACE	0x88
#define PCCAT_REMOTE_VOLUME_UNAVAILABLE		0x89
#define PCCAT_REMOTE_FILE_READ_ONLY		0x8a
#define PCCAT_REMOTE_SHORT_READ_WRITE		0x8b
#define PCCAT_REMOTE_INVALID_DRIVE		0x8f
#define PCCAT_REMOTE_VOLUME_WRITE_PROTECTED	0x93
#define PCCAT_REMOTE_EXTERNAL_ABORT		0x94
#define PCCAT_REMOTE_RESERVED_ABORT_TYPE	0x95
/* The reserved abort is because we don't want to have to quote
 * abort type data (and 95h is the quote char)
 */
#define PCCAT_REMOTE_FILE_IS_VOLUME		0x96
#define PCCAT_REMOTE_FILE_IS_DIRECTORY		0x97
#define PCCAT_REMOTE_DIRECTORY_NAME_EXISTS	0x98
#define PCCAT_REMOTE_TOO_MANY_DIRECTORIES	0x99

/*
 * PCComFullReturnType has two components, the low and high byte.
 * Low Byte: PCComReturnType - return value of an issued PCCom command.
 * High Byte: PCComAbortType - if return type == PCCRT_COMMAND_ABORTED, 
 *            then this field will contain the reason for the abortion.
 *            The default value is PCCAT_DEFAULT_ABORT.
 */
typedef word PCComFullReturnType;

#define PCCOM_RETURN_TYPE( fullRT ) ( ((fullRT) & 0x00ff) )
#define PCCOM_ABORT_TYPE( fullRT ) ( (((fullRT) >> 8) & 0x00ff) )



/*
 * If PCCom library is being loaded dynamically, with a call to 
 * GeodeUseLibrary, you must use ProcCallFixedOrMovable(), passing
 * it the result of ProcGetLibraryEntry(), to call one of the library
 * routines defined below.  These entry point numbers are passed to
 * ProcGetLibraryEntry to find the offset of the desired routine.
 *
 * If you call PCCom in this manner, you *must* pass PCCIF_NOTIFY_EXIT
 * to PCComInit, and the object whose optr is passed to PCComInit 
 * must handle MSG_META_NOTIFY and MSG_PROCESS_NOTIFY_THREAD_EXIT.  
 * See the documentation for these messages below.  The PCCom2 sample 
 * application shows how to dynamically load the PCCom library and use 
 * these entry points.
 *
 */
typedef ByteEnum PCComEntryPoint;
#define PCCEP_INIT  	    	0
#define PCCEP_EXIT  	    	1
#define PCCEP_ABORT  	    	2

@class	PCComFileSelectorClass, GenFileSelectorClass;

@instance	PathName	PCFSI_currentRemotePath;
@instance	hptr		PCFSI_driveListing;
@instance	FileLongName	PCFSI_currentVolume;

@endc

/* --------------------------------------------------------------------------
 * 			 INTERFACE DEFINITION
 * --------------------------------------------------------------------------*/

extern PCComReturnType _pascal PCComInit(SerialPortNum port,
				 SerialBaud baud,
				 word	timeout,
				 optr	callbackOptr,
				 PCComInitFlags	flags);
/*
 * 	Desc:	Initialize the serial port for communication with remote site.
 * 	Pass:	port - com port to use (-1 to use default, Com2)
 * 		baud - baud rate of serial port (-1 to use default, 9600)
 * 		timeout - amout of time to wait for port to initialize
 * 		callbackOptr - optr of object to send output notification 
 * 	    	    	    	messages to, 0 if no ouput is desired.
 *
 * 	Return:	PCComReturnType
 *	Note: It is up to the caller to ensure that PCCOMEXIT is called
 *	      before exiting, so that the serial driver will be freed and
 *	      the extra thread destroyed.
 */

extern PCComReturnType _pascal PCComExit(void);
/*
 * 	Desc:	Close the stream and restore serial port to its previous state
 * 	Pass:	nothing
 * 	Return:	PCComReturnType
 */

extern void _pascal PCComAbort(void);
/*
 * 	Desc:	Abort the current file transfer operation.
 * 	Pass:	nothing
 * 	Return:	nothing
 */

extern PCComFullReturnType _pascal PCComGet(hptr	dataBlock,
					    word	bytesPerStatus,
					    optr	statusDest,
					    word	statusMSG,
					    char	*destPathname);
/*
 * 	Desc:	Get the requested file/s from the remote.
 * 	Pass:	dataBlock - the handle of a block containing the dos-char 
 *			source DOS pathname.  It contains null terminated filename 
 *			(which may contain wildcard chars) to get.  This 
 *			must contain a filename.  It may also contain
 *			a path.  If the path is absolute, it must
 *			start with a drive letter.  If the path is
 *			relative it is relative to the server's current
 *			working directory.  This directory may be
 *			changed via the PCComCD routine.  Examples:
 *			"*.*" - get everything from the server's cwd.
 *			"a:\temp\foo" - get the file foo from a:\temp
 *			"..\enstrunk\bar*" - get all files satisfing
 *				"bar*" from the cwd's parent's
 *				enstrunk directory.
 *			"\command.com" - this is undefined.  It may be
 *				relative, absolute, or it may result
 *				in an error.  Don't try it. 
 *			After the transfer is complete, this block
 *			will contain a null terminated list of
 *			geos-char DOS filenames received.
 *
 *			The filename may include wildcard chars.
 *		bytesPerStatus - The number bytes between status reports, or 0
 *			for no reports.
 *		statusOptr - The object to send status reports to.
 *		statusMSG - See PCCOM_STATUS_MSG
 *		destPathname - fptr to a buffer containing the null terminated
 *			destination geos-char dos path/file name.  This is mainly 
 *			a path	specifier.  The path must end with a slash
 *			char '\\'.  If the path is absolute, it must
 *			start with a drive letter.  If the path is
 *			relative it is relative to the cwd path of
 *			the newly-spawned pccom thread.  This is
 *			inherited from whatever thread called
 *			PCComInit.  If a filename is included 
 *			only the first file in a multi-file transfer
 *			will be renamed.  Wildcard characters are not
 *			allowed.  Examples:
 *			"" - put all files in the cwd with their normal
 *				names
 *			"a:\temp\" - put all files in a:\temp with
 *				their normal names
 *			"..\buddy" - put all files in the parent
 *				directory of the cwd, and rename the
 *				first file to "buddy"
 *			If a bad path is specified you will get a
 *			PCCRT_NO_ERROR back from this call, but you
 *			will get a PCCRT_COMMAND_ABORTED in your first
 *			status message.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *		Note that when the operation comletes (indicated by a status message)
 *		the dataBlock will be filled in with the filenames of files recieved
 *		separated by 
 */

extern PCComFullReturnType _pascal PCComSend(char	*sourcePathname,
										     word	bytesPerStatus,
										     optr	statusOptr,
										     word	statusMSG,
										     char	*destPathname);
/*
 * 	Desc:	Send the requested file/s to the remote.
 * 	Pass:	sourcePathname - fptr to a buffer containing the null
 *			terminated geos-char dos filename (which may contain
 *			wildcard chars) to send.  This must contain
 *			a filename.  It may also contain a path.
 *			If the path is absolute, it must start with
 *			a drive letter.  If the path is relative
 *			it is relative to the CWD of the newly-
 *			spawned pccom thread.  This is inherited
 *			from whatever thread called PCComInit.
 *			Examples:
 *			"*.*" - send everything from pccom's cwd.
 *			"a:\temp\foo" - send the file foo from a:\temp
 *			"..\enstrunk\bar*" - send all files satisfing
 *				"bar*" from the cwd's parent's
 *				enstrunk directory.
 *			"\command.com" - this is undefined.  It may be
 *				relative, absolute, or it may result
 *				in an error.  Don't try it. 
 *		bytesPerStatus - The number bytes between status reports, 
 *			or 0 for 
 *			no reports.
 *		statusOptr - The object to send status reports to.
 *		statusMSG - See PCCOM_STATUS_MSG
 *		destPathname - fptr to a buffer containing the null terminated
 *			dest geos-char dos path/file name.  This is primarily a 
 *			path specifier.  The path must end with a slash
 *			char '\\'.  If the path is absolute, it must
 *			start with a drive letter.  If the path is
 *			relative it is relative to the server's cwd.
 *			This directory may be changed by using the
 *			PCComCD routine If a filename is included 
 *			only the first file in a multi-file transfer
 *			will be renamed.  Wildcard characters are not
 *			allowed.  Examples:
 *			"" - put all files in the cwd with their normal
 *				names
 *			"a:\temp\" - put all files in a:\temp with
 *				their normal names
 *			"..\buddy" - put all files in the parent
 *				directory of the cwd, and rename the
 *				first file to "buddy"
 *
 *			destination pathname.  Note that the path must 
 *			conclude with a '\' character and that any filename 
 *			given will only be used with the first file of the 
 *			transfer.
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_BAD_DEST_PATH
 */

extern PCComFullReturnType _pascal PCComStatus(struct StatusReply *statusBuffer,
										       char *currentFilename);
/*
 * 	Desc:	Request information about the current transfer.
 * 	Pass:	statusBuffer - fptr to a buffer containing:
 *			dword 	- SR_fileSize
 *			dword	- SR_bytesXfrd
 *		currentFilename - fptr to a buffer at least PATH_BUFFER_SIZE 
 *				  long
 * 	Return:	PCComReturnType
 *			PCCRT_FILE_STARTING
 *			PCCRT_TRANSFER_CONTINUES
 *			PCCRT_FILE_COMPLETE
 *			PCCRT_TRANSFER_COMPLETE
 *			PCCRT_COMMAND_ABORTED
 *
 */
struct StatusReply {
	dword	SR_fileSize;
	dword	SR_bytesXfrd;
};

@prototype void PCCOM_STATUS_MSG(PCComFullReturnType	fullReturnType = cx,
				 				 dword					bytesThisFile = dx:bp);
/* abortCode is only important if returnType = PCCRT_COMMAND_ABORTED.
 * bytesThisFile = number of bytes of this file that was transferred
 */

extern PCComFullReturnType _pascal PCComPWD(char *buffer);
/*
 *	Desc:	Retrieves the current path name on the remote
 *              machine.
 *	Pass:	on stack
 *		fptr - 	buffer (PATH_BUFFER_SIZE) for the null
 *		terminated upper-cased geos-char pathname.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED
 *			PCCRT_BAD_DEST_PATH
 *
 */

extern PCComFullReturnType _pascal PCComCD(const char *dirPathname);
/*
 * 	Desc:	Change the working directory on the remote machine.
 * 	Pass:	dirPathname - fptr to a buffer (PATH_BUFFER_SIZE) containing 
 *			the null terminated geos-char pathname.  (A null 
 *			string takes you to the server's startup directory.)
 *			It can be absolute or relative.  If it is
 * 			absolute it must begin with a drive
 *			specification.  If it is relative it is
 *			relative to the server's cwd. Examples:
 *			"c:\" - goes to the root dir of the C drive
 *			"" - goes to the server's startup directory
 *			"a:" - goes to the root dir of the A drive
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED
 *			PCCRT_BAD_DEST_PATH
 *
 */

extern PCComFullReturnType _pascal PCComMkdir(char *dirPathname);
/*
 * 	Desc:	Make a new directory on the remote machine.
 * 	Pass:	dirPathname - fptr to a buffer which contains a null terminated
 *			geos-char pathname.  This must contain a dirname.  It
 *			may also contain a path.  If the path is
 *			absolute, it must start with a drive letter.
 *			If the path is relative it is relative to the
 *			server's current working directory.  This
 *			directory may be changed via the PCComCD
 *			routine.  Examples:
 *			"a:\temp\foo" - creates a directory "foo" in
 *				a:\temp
 *			"..\enstrunk\bar" - creates a directory "bar"
 *				in the cwd's parent's enstrunk
 *				directory.
 *			"\command.com" - this is undefined.  It may be
 *				relative, absolute, or it may result
 *				in an error.  Don't try it. 
 *			If the directory already exists you will get a
 *			PCCRT_BAD_DEST_PATH
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_BAD_DEST_PATH
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComListDrives(hptr dataBlock);
/*
 * 	Desc:	Fetch the list of availible drives from the Remote computer
 * 	Pass:	dataBlock - hptr of block to realloc and stuff the geos-char 
			data into
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *			PCCRT_MEMORY_ALLOC_ERROR
 *
 */

extern PCComFullReturnType _pascal PCComGetFreeSpace(dword	*driveSpace,
													 word	driveLetter);
/*
 * 	Desc:	Get the space free on a given drive (or current drive)
 * 	Pass:	driveSpace - fptr to dword buffer to hold the requested 
 *			drive space.
 *		driveLetter - a word whose low byte is the drive letter to you're
 *			interested in.  The high byte is ignored.  If the low byte
 *			is null, the current drive will be checked.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_BAD_DEST_PATH
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComRemark(char *remark);
/*
 * 	Desc:	Log a remark on the remote machine.
 * 	Pass:	remark - fptr to a buffer which contains a null terminated
 *			 geos-char remark, up to PATH_BUFFER_SIZE long.
 *	                 Use the '\r' escape code to get a carriage return.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComData(word size, char *remark);
/*
 * 	Desc:	Send general data to the remote machine.
 * 	Pass:	size - word containing the number of bytes to send.
 *		data - fptr to a buffer which contains the data.  Will be
 *			 sent "as is", so make sure it's what you want.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComSetDataNotification(dword bufsize,
					word notificationMSG, optr myobj);
/*
 * 	Desc:	Set up to receive PCComData
 * 	Pass:	bufsize - amount of data to allow to buffer before it's processed.
 *			A bufsize of zero means no buffering.
 *		notificationMSG - msg to send when we've received some data. 
 *			Should follow the PCCOM_DATA_NOTIFICATION_MSG prototype.
 *			Will get a null datablock notification on timer event.
 *		myobj	- object to send the notification to.
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *
 */

/*
 * Message prototype for notification of incoming data or typeout.
 * On timeout the hptr will be null
 */
@prototype void PCCOM_DATA_NOTIFICATION_MSG(hptr dataBlock);

extern PCComFullReturnType _pascal PCComWait(word timeout);
/*
 * 	Desc:	Start waiting for incoming PCComData.  If we don't receive any in
 *			timeout, notify us with a NULL dataBlock.
 * 	Pass:	timeout	- time to wait for data (in ticks: 60/s)
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComAckData(hptr dataBlock);
/*
 * 	Desc:	Acknowledge a PCComData buffer.  Turns off any wait timers, and
 *			allows more incoming data to be buffered.
 * 	Pass:	dataBlock - a hptr given out via PCCOM_DATA_NOTIFICATION_MSG.
 *			We need the size to remain the same - no resizing!
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED			
 *
 */

extern PCComFullReturnType _pascal PCComGetFileSize(dword	*fileSize,
													char	*filename);
/*
 * 	Desc:	Get the size of a specified file.
 * 	Pass:	fileSize - fptr to a dword buffer to hold the requested file
 *			size.
 *		filename - fptr to a buffer which contains a null terminated
 *			geos-char DOS pathname.  This must contain a filename.
 *			It may also contain a path.  If the path is
 *			absolute, it must start with a drive letter.
 *			If the path is relative it is relative to the
 *			server's current working directory.  This
 *			directory may be changed via the PCComCD
 *			routine.  Examples:
 *			"a:\temp\foo" - get the size of file foo from
 *				a:\temp
 *			"..\enstrunk\bar" - get the size of "bar"
 *				from the cwd's parent's enstrunk
 *				directory.
 *			"\command.com" - this is undefined.  It may be
 *				relative, absolute, or it may result
 *				in an error.  Don't try it.  
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED
 *			PCCRT_NO_ERROR
 *
 */

extern PCComFullReturnType _pascal PCComDir(hptr dataBlock,
					PCComDirDetailLevel detailLevel,
					char *fileSpec);
/*
 * 	Desc:	List a directory on the remote machine.
 * 	Pass:	dataBlock - hptr to a block we can stuff the dos-char 
 *			listing into
 *		detailLevel - specifies the level of verbosity
 *		fileSpec - geos-char DOS filespec
 *
 * 	Return:	PCComReturnType
 *			PCCRT_NO_ERROR
 *			PCCRT_BUSY
 *			PCCRT_NOT_INITIALIZED
 *			PCCRT_COMMAND_ABORTED
 *			PCCRT_MEMORY_ALLOC_ERROR
 *			PCCRT_TOO_MUCH_OUTPUT
 *
 */

extern word _pascal PCComFileEnum(FileEnumParams *params,
				     MemHandle *bufCreated,
				     word *numNoFit);
/*
 * 	Desc:	Act like a limited FileEnum, but fetch the data over
 *		the serial line.
 *
 * 	Pass:	params - FileEnumParams
 *		bufCreated - repository for created block
 *		numNoFit - number of files that couldn't fit in the block.
 *
 * 	Return:	number of files that *did* fit in the block
 *			else
 *		-1 if error - use ThreadGetError to retrieve FileError
 */

/* --------------------------------------------------------------------------
 * 			 Methods sent by PCCom
 * --------------------------------------------------------------------------*/

/* 
 *  See the PCCom sample applications for examples of how to handle
 *  the following messages.
 */

/*****************************************************************************
 *	Methods sent if PCCIF_NOTIFY_OUTPUT is passed to PCComInit
 *
 *	When PCCom starts or completes a file operation, it outputs 
 *	textual information about that operation.  If you want your 
 *	application to display that information, pass the PCCIF_NOTIFY_OUTPUT 
 * 	flag to PCComInit, along with the optr of the object which should
 *	receive the notification.
 *
 * 	If the passed optr is non-zero, PCCom will send the following 
 *	two methods to that object.  The data sent with the messages
 *	can be passed directly to a GenText or VisText object.  It
 *	consists of ASCII characters plus the carriage return control
 *	characters.
 *
 * 	Note that if the app is receiving output, it *MUST* intercept
 * 	MSG_META_NOTIFY_WITH_DATA_BLOCK and free the passed data block,
 *	even if it does nothing with the data block.
 *
 ****************************************************************************/
/*
 * @message void MSG_META_NOTIFY(ManufacturerID manufID = cx,
 *				word notificationType = dx,
 *				word data = bp);
 *
 *	notificationType = GWNT_PCCOM_DISPLAY_CHAR
 *	data = character to be displayed 
 */

/*
 * @message void MSG_META_NOTIFY_WITH_DATA_BLOCK(ManufacturerID manufID = cx,
 *				word notificationType = dx,
 *				MemHandle data = bp);
 *
 *	notificationType = GWNT_PCCOM_DISPLAY_STRING
 * 	data = handle of block containing NULL-terminated string
 *
 * 		NOTE: The app must free this block, whether it uses it or not.
 *	    	Apps which have requested to receive output must handle this
 *	    	message, if only to free the block.
 */


/***************************************************************************
 *	Methods sent if PCCIF_NOTIFY_EXIT is passed to PCComInit
 *
 *	The serial connection may be closed and PCCom exited by sending
 *	a special escape sequence from the remote machine.  If you want
 *	to be notified of that event, pass the PCCIF_NOTIFY_EXIT flag
 *	to PCComInit.  Then MSG_META_NOTIFY will be sent to object whose
 *	optr was passed to PCComInit, with the handle of the thread that
 *	is about to be destroyed as data.
 *
 *	If you loaded the PCCom library dynamically, you must pass the
 *	PCCIF_NOTIFY_EXIT_FLAG and intercept the following two messages:
 *
 *	MSG_META_NOTIFY will be sent when PCCom is about to destroy the
 *	thread which was running the serial port.  The handle of that 
 *	thread is passed as data.  You cannot free the PCCom library until
 *	you know that the thread has been destroyed. When the thread has
 *	been destroyed, MSG_PROCESS_NOTIFY_THREAD_EXIT is sent to your
 * 	process object. You must intercept this message, and if the thread
 * 	handle passed in dx is the same handle as was passed in bp for
 *	MSG_META_NOTIFY, you can now be certain that the thread has been
 *	destroyed and free the PCCom Library. If the library was not
 *	loaded dynamically, you need not intercept MSG_PROCESS_NOTIFY_
 *	THREAD_EXIT. 
 *
 *	It is not necessary to pass MSG_PROCESS_NOTIFY_THREAD_EXIT to the
 *	superclass, as it is provided as a notification only, and there is
 *	no default handling of it. Note that it may also be sent in other
 *	situations, and in those cases exitProcess != data.
 *
 *
 **************************************************************************/
/*
 * @message void MSG_META_NOTIFY(ManufacturerID manufID = cx,
 *								 word			notificationType = dx,
 *								 word			data = bp);
 *
 *	notificationType = GWNT_PCCOM_EXIT_PCCOM
 *	data = handle of thread to be destroyed
 */

/*
 * @message void MSG_PROCESS_NOTIFY_THREAD_EXIT(ThreadHandle exitProcess = cx, 
 *	    	    	    	    	    		word		 exitCode = dx);
 *
 */


@ifdef __HIGHC__
pragma Alias(PCComInit, "PCCOMINIT");
pragma Alias(PCComExit, "PCCOMEXIT");
pragma Alias(PCComAbort, "PCCOMABORT");
pragma Alias(PCComSend, "PCCOMSEND");
pragma Alias(PCComGet, "PCCOMGET");
pragma Alias(PCComPWD, "PCCOMPWD");
pragma Alias(PCComCD, "PCCOMCD");
pragma Alias(PCComStatus, "PCCOMSTATUS");
pragma Alias(PCComMkdir, "PCCOMMKDIR");
pragma Alias(PCComGetFileSize, "PCCOMGETFILESIZE");
pragma Alias(PCComDir, "PCCOMDIR");
pragma Alias(PCComFileEnum, "PCCOMFILEENUM");
pragma Alias(PCComRemark, "PCCOMREMARK");
pragma Alias(PCComData, "PCCOMDATA");
pragma Alias(PCComSetDataNotification, "PCCOMSETDATANOTIFICATION");
pragma Alias(PCComAckData, "PCCOMACKDATA");
pragma Alias(PCComWait, "PCCOMWAIT");
pragma Alias(PCComGetFreeSpace, "PCCOMGETFREESPACE");
pragma Alias(PCComListDrives, "PCCOMLISTDRIVES");
@endif

@endlib
