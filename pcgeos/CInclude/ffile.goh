/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PC/GEOS
 * MODULE:	  ffile.goh
 * FILE:	  ffile.goh
 *
 * AUTHOR:  	  Jeremy Dashe: Jan 28, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/28/92	  jeremy    Initial version
 *	92.08.12  JDM	    Name changes.
 *
 * DESCRIPTION:
 *	Structures and definitions for the flat file database library.
 *
 * 	$Id: ffile.goh,v 1.1 97/04/04 15:57:16 newdeal Exp $
 *
 ***********************************************************************/
@optimize
@include <gcnlist.goh>
#include <math.h>
#include <parse.h>
@include <ssheet.goh>

typedef ByteEnum FieldDataType;
#define	FDT_GENERAL_TEXT 0	/* alphanumeric string */
#define	FDT_COMPUTED	 1	/* field computed by formula */
#define	FDT_INTEGER	 2	/* number (integers only)*/
#define	FDT_REAL	 3	/* number (non-integers OK) */
#define	FDT_DATE	 4	/* number (representing date) */
#define	FDT_TIME	 5	/* number (representing time) */

/* Non-data holding FieldDataTypes: */
#define FDT_PAGE_NUMBER	 6  	/* page number (DOES NOT HOLD DATA!  ONLY
				 * USED AS A PLACEMARKER SO THE GROBJ
 	    	    	    	 * FIELD KNOWS TO DRAW THE CURRENT NUMBER!
				 */

/* Maximum number of records in the database.	*/
#define	MAX_NUM_RECORDS	(LARGEST_VISIBLE_ROW+1)

/*
 * Maximum number of fields in a record.
 *
 * NOTE: This value is one less than the number of cell columns in the
 *	 spreadsheet because the last cell is used to hold all of the
 *	 per record information.
 *	 
 */
#define	MAX_NUM_FIELDS			(LARGEST_COLUMN)

/* maximum number of characters allowed in a cell */
#define	MAX_NUM_CHARS_IN_CELL		511

/* maximum number of characters allowed in a text field */
#define	MAX_TEXT_FIELD_LENGTH		511

/* maximum number of bytes in a token stream. */
#define	MAX_TOKEN_STREAM_SIZE		511

/* maximum number of bytes in an individual, non-formula cell */
#define MAX_CELL_DATA_SIZE  (MAX_TOKEN_STREAM_SIZE + \
			     MAX_TEXT_FIELD_LENGTH*sizeof(TCHAR) + \
			     sizeof(CellFormula) + 1)

/* maximum number of characters in an expression string. */
#define	MAX_EXPRESSION_STRING_LENGTH	511

/* maximum number of characters allowed in a function name */
#define	MAX_FUNCTION_STRING_LENGTH	25

/* maximum number of functions to be shown in expression builders. */
#define	MAX_NUMBER_OF_FUNCTIONS		255

/* maximum number of characters in a field's name. */
#define	MAX_FIELD_NAME_LENGTH	    	40

/* maximum number of chars in an automatically generated field name. */
#define MAX_AUTOMATIC_FIELD_NAME_SIZE	15  /* "Field_65535\0" plus a few. */

/* maximum number of characters in a notes field. */
#define MAX_NOTES_TEXT_LENGTH	    	255

/*
 * Number of bytes for the expression evaluator's scratch and result
 * buffers.
 */
#define EVAL_BUFFER_SIZE    	    	1024

/* Maximum number of sort keys and sub-total fields.	*/
#define	MAX_SORT_KEYS_AND_SUB_TOTAL_FIELDS	6

/* 
 * In converting a FloatNum to ascii, this is the default number of
 * digits 
 */
#define	NUM_ASCII_DIGITS	    	10

/* 
 * In converting a FloatNum to ascii, this is the default number of
 * fractional digits 
 */
#define	NUM_ASCII_FRACTIONAL_DIGITS	5

/*
 * This is the structure sent to and from field properties UI
 * controllers.
 */
typedef struct {
    byte	    colNum;
    TCHAR    	    fieldName[MAX_FIELD_NAME_LENGTH+1];
    FieldDataType   dataType;
    byte    	    computedDefaultTokenStream[MAX_TOKEN_STREAM_SIZE];
    word    	    numTokensInTokenStream;
    word    	    maxNumCharsAllowedInThisTextField;
    FloatNum	    minValue;
    FloatNum	    maxValue;
    TCHAR    	    notes[MAX_NOTES_TEXT_LENGTH];
} FFFieldPropertiesMessageBlock;

/*
 * This is the structure written out to and from DAS_FIELD chain
 * of ssmeta file.
 */
typedef	struct {
    byte	    fieldNum;
    TCHAR    	    fieldName[MAX_FIELD_NAME_LENGTH+1];
    FieldDataType   fieldType;
    word	    fieldSize;
    FloatNum	    minValue;
    FloatNum	    maxValue;
} FieldInfoBlock;

/*
 * The FFFieldAppearanceStatusChangeMessageBlock structure is passed
 * to and from field appearence UI controllers.
 */
typedef struct {
    word    	 FFESCM_setEdges;
    word    	 FFESCM_indeterminateEdges;
    FormatIdType FFESCM_formatIdType;
} FFFieldAppearanceChangeMessageBlock;

typedef byte FieldID;		/* The column of a spreadsheet, really.	*/
typedef byte FieldListID;	/* Index into a list of fieldIDs.	*/

/*
 * The FieldCreateRequest is passed to MSG_FFD_STORE_FIELD_INFO to tell
 * which sorted list to add the field into.  Note that these lists are
 * not the database proper, but handy lists sorted alphabetically by field
 * name.
 */
typedef	ByteEnum FieldCreateRequest;
#define	FCR_ADD_TO_LAYOUT	  0	/* Add field to the current	*/
					/* layout list.			*/
#define	FCR_ADD_TO_DATABASE	  1	/* Add field to the current	*/
					/* database list.		*/

typedef	ByteEnum FieldChangeType;
#define	FCT_CREATED	    	  1	/* The field was just created &	*/
					/* added to the database list.	*/
#define	FCT_CREATED_AND_ADDED_TO_LAYOUT	2
					/* The field was just created &	*/
					/* and immediately added to the	*/
					/* layout list.			*/
#define	FCT_ADDED_TO_LAYOUT	  3	/* The field was moved from the	*/
					/* database list to the current	*/
					/* layout list.			*/
#define FCT_DELETED_FROM_LAYOUT	  4	/* The field was moved from the	*/
					/* current layout list back to	*/
					/* the database list.		*/
#define	FCT_DELETED_FROM_DATABASE 5 	/* The field was really deleted	*/
					/* from the database (and was	*/
					/* removed from both lists).	*/

/*
 * This enum is used to tell UIC internal functions if a field
 * is being added or deleted from a field list.
 */
typedef	ByteEnum FFFieldListChangeStatus;
#define	ADDED	0
#define	DELETED	1
#define	RESET	2
#define	CHANGED	3
#define SHOW_NOTES 4

/*
 * This enum is used to determine the results from validating a
 * field.  They should be pretty self-explanitary...
 */
typedef ByteEnum FFFieldValidationType;
#define FFFV_FIELD_OK    	    	0
#define FFFV_FIELD_SMALLER_THAN_MIN	1
#define FFFV_FIELD_LARGER_THAN_MAX	2
#define FFFV_FIELD_NOT_LEGAL	    	3
#define FFFV_NOT_IN_DESIGN_MODE	    	4
#define FFFV_FIELD_NOT_DIRTY	    	5
#define FFFV_SYSTEM_ERROR   	    	6

#define	NO_ITEM_HIGHLIGHT   	    	(0xff)

/*
 * Here's the different list requests from the treasure chest: are we
 * asking about the whole database, the layout list or the whole database
 * minus the fields in the layout list?
 */
typedef	ByteEnum FieldListQuery;
#define	DATABASE_NAME_LIST	 0  /* Every defined field in database.	*/
#define LAYOUT_NAME_LIST	 1  /* All fields in current layout.	*/
#define	NOT_IN_LAYOUT_NAME_LIST	 2  /* All fields not in current layout.*/
#define ABSOLUTE_COLUMN_NUMBER	 3  /* The number is a column number already. */
#define	INVALID_FIELD_LIST_QUERY 4  /*
				     * Marks non-list status change
				     * messages.
				     */
/*
 * This is the structure sent to anyone who needs to know that a field
 * has been added, deleted, or layout-ized from the current database or if
 * the current database has been changed.
 *	whichList	- Updated list.
 * 	changeType	- ADDED or DELETED, etc.
 *	fieldIndex	- This is an index into the updated list.
 *	numFields	- Number of fields in this list.
 *	nonce		- Silly counter to make sure that each notificaton
 *			  is actually sent.
 *	disableImmediately - TRUE if want the treasure chest disabled
 *				immediately after updating it
 */
typedef struct {
    FieldListQuery		whichList;
    FFFieldListChangeStatus	changeType;
    FieldListID			fieldIndex;
    word			numFields;
    optr			databaseOptr;
    word			nonce;
    Boolean			disableImmediately;
} FFDListStatusChangeMessageBlock;

#define	COLUMNS_TAKEN_ARRAY_SIZE	((MAX_NUM_FIELDS + 1) / 8)

/* FieldDataTypesFlags record */
typedef	ByteFlags FieldDataTypesFlags;

#define	FDTF_MANDATORY		(0x80)	/* TRUE: field must be filled
					   in before insert allowed.	*/
#define	FDTF_HAS_MIN		(0x40)	/* TRUE: VFDA_min attr contains
					   value for quicker lookups.	*/
#define	FDTF_HAS_MAX		(0x20)	/* TRUE: VFDA_max attr contains
					   value for quicker lookups.	*/
#define	FDTF_HAS_DEFAULT	(0x10)	/* TRUE: default attr contains
					   expression for quick lookup.	*/
#define	FDTF_HAS_NOTES		(0x08)	/* TRUE: field has associated
					   notes for quicker lookups.	*/
/*
 * Field redraw flags
 */
typedef ByteEnum RedrawFlag;
#define NO_REDRAW   0
#define REDRAW	    1

/*
 * Field creation errors
 */
typedef	ByteEnum FFFieldCreationResult;
#define	FFD_NAME_OK			0
#define	FFD_DUPLICATE_FIELD_NAME	1
#define	FFD_TOO_MANY_FIELDS		2
#define FFD_CIRCULAR_EXPRESSION	    	3
#define FFD_ABORT_TYPE_CHANGE	    	4

/*
 * Delete Layout results
 */
typedef	ByteEnum FFDeleteLayoutResult;
#define	FFD_ATTEMPTED_TO_DELETE_LAST_LAYOUT	0
#define	FFD_DELETE_LAYOUT_OK			1
#define	FFD_NO_DELETE_LAYOUT_DONE		2 /* no error; just not done */
/*
 * Externally defined functions
 */
extern VMBlockHandle
	_pascal FlatFileInitFile(VMFileHandle vmFileHandle,
		         word spreadsheetFlags);

#if defined(__HIGHC__)
pragma Alias(FlatFileInitFile, "FLATFILEINITFILE");
#endif 

/*
 * The EvalErrorItem struct is used to match spreadsheet or parser eval
 * errors with specific error message chunks.
 */
typedef struct {
    word    error;
    optr    errorChunk;
} EvalErrorItem;

/*
 * A ceiling function.  No big whoop.
 */
#define FFD_div_ceil(a, b) (((a) / (b)) + (((a) % (b)) ? 1 : 0))


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Record Control Panel UI Controller Stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Record Control Panel General Change Notification Stuff
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/* Psuedo-index indicating that 'new'/empty record.	*/
#define	FFRCP_INVALID_RECORD	(~0)
#define	FFRCP_NEW_RECORD	(FFRCP_INVALID_RECORD)

/*
 * FFRecordControlStatusFlags --
 *
 *	This structure has flags for each of the possible conditions that
 *	the database is in at any given time.
 */
typedef struct
{
    unsigned int	disableRCP:1;	/* Disable the controller?	*/
    unsigned int	new:1;		/* New (never entered) record?	*/
    unsigned int	modified:1;	/* Dirty/changed record?	*/
    unsigned int	failedOp:1;	/* Last operation failed?	*/
    unsigned int	marked:1;	/* Is this record marked?	*/
    unsigned int	showOnlyMarked:1;    /* Display marked only?	*/
    unsigned int	autoMarkingChange:1; /* Changing auto marking?	*/
    unsigned int	autoMarking:1;	     /* Auto marking fields?	*/
} FFRecordControlStatusFlags;

/*
 * FFRecordControlStatusMessageBlock --
 *
 * 	This structure is filled out by the FlatFile database and is sent
 *	out to notify the Record Control Panel (through the GCN lists) that
 *	the database's status has changed and how it has changed.
 */
typedef	struct
{
    word	curRecord;	/* Current database record.	*/
    word	numRecords;	/* Total number of records in database.	*/
    FFRecordControlStatusFlags	statusFlags;	/* Current status.	*/
} FFRecordControlStatusMessageBlock;

/*
 * The following macros fill in the given FFRecordControlStatusMessageBlock
 * in the canonical manner to indicate the state of the database to the
 * Record Control Panel UI Controller.
 *
 * FFRCPSMB_SET_DATA --
 *
 *	This is a convenience macro which sets the given status message
 *	block to specify that the Record Control Panel should update
 *	itself with the given data.
 *
 * FFRCPSMB_CLEAR --
 *
 *	Set the given status message block to the neutral, un-informative,
 *	pristine state. 
 *
 * FFRCPSMB_DISABLE_RCP --
 *
 *	Set the given status message block to indicate that the Record
 *	Control Panel should be disabled.
 *
 * FFRCPSMB_NEW_RECORD --
 *
 *	This macro sets the given status message block to specify that the
 *	Record Control Panel should indicate that the user is editing a
 *	'new' (empty) record.
 *
 * FFRCPSMB_IS_CLEAR --
 *
 *	Is the given status message block cleared?
 *
 * FFRCPSMB_IS_DISABLE_RCP --
 *
 *	Does the given status message block specify the disabliing of the
 *	Record Control Panel?
 *
 * FFRCPSMB_IS_NEW_RECORD --
 *
 *	Does the given status message block specify that the current being
 *	edited record in the database has never been saved/committed to the
 *	database proper.
 *
 * FFRCPSMB_IS_MODIFIED --
 *
 *	Does the given status message block specify that the current record
 *	in the database has been modified?
 *
 * FFRCPSMB_IS_FAILED_OP --
 *
 *	Does the given status message block specify that last operation
 *	attempted on the database failed miserably.
 *
 * FFRCPSMB_IS_MARKED --
 *
 *	Does the given status message block specify that the current record
 *	in the database has been marked as being in the currently defined
 *	subset?
 *
 * FFRCPSMB_IS_DISPLAY_ONLY_MARKED --
 *
 *	Are only records marked as being in the currently defined subset
 *	being displayed?
 *
 * FFRCPSMB_IS_CHANGING_AUTO_MARKING --
 *
 *	Is the marking trigger to be enabled or disabled?
 *
 * FFRCPSMB_IS_AUTO_MARKED --
 *
 *	Are records being marked automatically (that is, not by hand)?
 *
 * Note:	Obviously, these are all doable by the programmer in-line
 *	but this makes things really (painfully?) obvious in the code.  The
 *	set data macro is is mostly provided for consistency (but use it
 *	anyways :-).
 *
 * NOTE:	These are macros so treat the arguments that you feed them
 *	with, with respect.  Do things in a nice straight forward manner
 *	and they'll treat you well, otherwise...
 *	Each macro accesses the struct pointer multiple times and the other
 *	arguments exactly once.
 *	
 */
#define	FFRCPSMB_SET_DATA(ffrcpsmb, curRec, numRecs,	\
			  newRec, dirtyRec, opError,	\
			  disRCP, markedRec, showMarked,\
			  aMarkChange, autoMark)	\
		(((ffrcpsmb).curRecord = (curRec)),			\
		 ((ffrcpsmb).numRecords = (numRecs)),			\
		 ((ffrcpsmb).statusFlags.new = (newRec)),		\
		 ((ffrcpsmb).statusFlags.modified = (dirtyRec)),	\
		 ((ffrcpsmb).statusFlags.failedOp = (opError)),		\
		 ((ffrcpsmb).statusFlags.disableRCP = (disRCP)),	\
		 ((ffrcpsmb).statusFlags.marked = (markedRec)),		\
		 ((ffrcpsmb).statusFlags.showOnlyMarked = (showMarked)),\
		 ((ffrcpsmb).statusFlags.autoMarkingChange = (aMarkChange)),\
		 ((ffrcpsmb).statusFlags.autoMarking = (autoMark)))

#define	FFRCPSMB_CLEAR(ffrcpsmb)	\
		(FFRCPSMB_SET_DATA (ffrcpsmb,			\
				    FFRCP_INVALID_RECORD,	\
				    FFRCP_INVALID_RECORD,	\
				    FALSE, FALSE, FALSE,	\
				    FALSE, FALSE, FALSE,    	\
				    FALSE, FALSE))

#define	FFRCPSMB_DISABLE_RCP(ffrcpsmb)	    	    	    	    	\
		((FFRCPSMB_CLEAR (ffrcpsmb)),	    	    	    	\
		 ((ffrcpsmb).statusFlags.disableRCP = TRUE))

#define FFRCPSMB_INDICATE_AUTO_MARKING_CHANGE(ffrcpsmb, aMarking)	\
		((FFRCPSMB_CLEAR (ffrcpsmb)),	    	    	    	\
		 ((ffrcpsmb).statusFlags.autoMarkingChange = TRUE), 	\
		 ((ffrcpsmb).statusFlags.autoMarking = aMarking))
    
    
#define	FFRCPSMB_NEW_RECORD(ffrcpsmb, numRecs,	\
			    dirtyRec, opError,	\
			    marked, showMarked)		\
		(FFRCPSMB_SET_DATA ((ffrcpsmb), FFRCP_NEW_RECORD,	\
				    (numRecs), TRUE, (dirtyRec),	\
				    (opError), FALSE, marked,		\
				    (showMarked), FALSE, FALSE))

#define	FFRCPSMB_IS_CLEAR(ffrcpsmb)	\
		((FFRCP_INVALID_RECORD == (ffrcpsmb).curRecord) &&	\
		 (FFRCP_INVALID_RECORD == (ffrcpsmb).numRecords) &&	\
		 (!(ffrcpsmb).statusFlags.new) &&			\
		 (!(ffrcpsmb).statusFlags.modified) &&			\
		 (!(ffrcpsmb).statusFlags.failedOp) &&			\
		 (!(ffrcpsmb).statusFlags.disableRCP) &&		\
		 (!(ffrcpsmb).statusFlags.marked) &&			\
		 (!(ffrcpsmb).statusFlags.showOnlyMarked))

#define	FFRCPSMB_IS_DISABLE_RCP(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.disableRCP)

#define	FFRCPSMB_IS_NEW_RECORD(ffrcpsmb)	\
		(((ffrcpsmb).statusFlags.new) &&			\
		 (FFRCP_NEW_RECORD == (ffrcpsmb).curRecord) &&		\
		 (FFRCP_INVALID_RECORD != (ffrcpsmb).numRecords) &&	\
		 (!(ffrcpsmb).statusFlags.marked))

#define	FFRCPSMB_IS_NEW_RECORD_IGNORE_MARKING(ffrcpsmb)	\
		(((ffrcpsmb).statusFlags.new) &&			\
		 (FFRCP_NEW_RECORD == (ffrcpsmb).curRecord) &&		\
		 (FFRCP_INVALID_RECORD != (ffrcpsmb).numRecords))

#define	FFRCPSMB_IS_MODIFIED(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.modified)

#define	FFRCPSMB_IS_FAILED_OP(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.failedOp)

#define	FFRCPSMB_IS_MARKED(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.marked)

#define	FFRCPSMB_IS_DISPLAY_ONLY_MARKED(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.showOnlyMarked)

#define	FFRCPSMB_IS_CHANGING_AUTO_MARKING(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.autoMarkingChange)

#define	FFRCPSMB_IS_AUTO_MARKED(ffrcpsmb)	\
		((ffrcpsmb).statusFlags.autoMarking)



/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Record Control Requests
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

typedef	enum
{
    FFRCR_NULL_REQUEST,			/* Why ask for nothing?		*/
    FFRCR_REFRESH,			/*
					 * Refresh the RCP state based on
					 * the current database state.
					 */
    FFRCR_CREATE_NEW_RECORD,		/* Create a new record.		*/
    FFRCR_COMMIT_CURRENT_RECORD,	/* Insert the current record.	*/
    FFRCR_REVERT_CURRENT_RECORD,	/* Be as in the beginning.	*/
    FFRCR_DELETE_CURRENT_RECORD,	/* Delete the current record.	*/

/*  The following two are not yet supported -- JDM.	*/
#if 0
    FFRCR_DELETE_RECORD,		/* Delete a specified record.	*/
    FFRCR_DELETE_ALL_RECORDS,		/* Delete every record.		*/
#endif

    FFRCR_GOTO_FIRST_RECORD,		/* Move to first record.	*/
    FFRCR_GOTO_PREVIOUS_RECORD,		/* Move to preceding record.	*/
    FFRCR_GOTO_NEXT_RECORD,		/* Move to following record.	*/
    FFRCR_GOTO_LAST_RECORD,		/* Move to last record.		*/
    FFRCR_GOTO_RECORD,			/* Move to specified record.	*/
    FFRCR_DIRTY_CURRENT_RECORD,		/* Record has been modified.	*/
    FFRCR_CLEAN_CURRENT_RECORD,		/* Record is pristine.		*/
    FFRCR_MARK_CURRENT_RECORD,	    	/* Set the record marked.   	*/
    FFRCR_UNMARK_CURRENT_RECORD,	/* Set the record unmarked.   	*/

    FFRCR_INVALID_REQUEST		/* Naughty caller!		*/
} FFRecordControlRequest;
