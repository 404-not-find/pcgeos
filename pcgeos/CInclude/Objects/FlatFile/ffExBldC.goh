/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * FILE:	  CInclude/Objects/FlatFile/ffExprBuilderC.goh
 *
 * AUTHOR:  	  Jeremy Dashe: Jan 24, 1992
 *
 * REVISION HISTORY:
 *	Date	 Name	Description
 *	----	 ----	-----------
 *	1/24/92	 jeremy	Initial version
 *
 * DESCRIPTION:
 *	This file defines the flat file database expression builder class
 *
 * 	$Id: ffExBldC.goh,v 1.1 97/04/04 15:51:04 newdeal Exp $
 *
 ***********************************************************************/
@optimize

@include <Objects/gCtrlC.goh>
@include <ffile.goh>

@class FFExpressionBuilderClass, GenControlClass;

/*
 * Instance data
 */

#ifndef FFEBFunctionContext
typedef	word FFEBFunctionContext;
#endif

@instance FFEBFunctionContext FFEB_context = FFEBFC_NONE;

/*
 * These are used to keep information about where an expression builder's
 * string is supposed to be returned.
 * This should be vardata.
 */
@instance dword resultDestination; 
@instance Message resultMessage;

/*
 * These define the functions to display in an expression builder.
 * Which functions to display is determined by the FFEB_context,
 * and the list is built out during the controller's
 * MSG_GEN_CONTROL_GENERATE_UI.
 */
@instance byte numberOfFunctions = 0;
@instance byte availableFunctions[MAX_NUMBER_OF_FUNCTIONS];

/**************************************************************
 * 	    	    	    VARDATA	    	    	      *
 **************************************************************/

/*
 * The FFEB_RESET_TEXT vardata is used to keep the original text
 * of the expression around in case the user hits the RESET button.
 */

@vardata MemHandle FFEB_RESET_TEXT;

/*********************  External messages *********************/

/*
 * MSG_FFEB_EDIT_EXPRESSION --
 *	This message is sent when someone wants an expression edited.
 *	Given a string to parse, the expression builder will allow
 *	the string to be edited and send a "done" message when the
 *	user hits Apply.
 *
 *	There are quite a few arguments for your general use pleasure:
 *
 *	    textHandle - handle to a string to be edited.  THIS WILL
 *	    	    	BE FREED WITHIN THE EXPRESSION BUILDER!
 *	    highlightStart, highlightEnd - offsets into the string to
 *	    	    	select when the text is first displayed.
 *	    	    	Very handy for highlighting problem areas in the
 *	    	    	string.
 *	    resultDestination - optr to whomever should be notified
 *	    	    	that the user hit the "Apply" trigger.
 *	    resultMessage - Message to be sent to the resultDestination.
 *	    	    	The argument to the resultMessage is as follows:
 *	    	    	       (MemHandle resultTextHandle);
 *	    	    	The resultTextHandle is to be freed by the result-
 *	    	    	Destination.  The expressionBuilderOptr is an optr to
 *	    	    	the expression builder.
 */
@message void	MSG_FFEB_EDIT_EXPRESSION(MemHandle textHandle,
					 dword highlightStart,
					 dword highlightEnd,
					 optr resultDestination,
					 Message resultMessage);

/*
 * MSG_FFEB_CLOSE_DOWN --
 *	This message is sent to an expression builder when it should shut
 *	itself down.  For example, if the string was successfully
 *	parsed, the expression builder ought to "go away."
 */
@message void MSG_FFEB_CLOSE_DOWN();


/*********************  Internal messages *********************/

/*
 * MSG_FFEB_APPLY_CHANGE --
 *
 *	This message is sent when the "Apply" button is pressed.
 */
@message void MSG_FFEB_APPLY_CHANGE();

/*
 * MSG_FFEB_RESET_CHANGE --
 *
 *	This message is sent when the "Reset" button is pressed.
 */
@message void MSG_FFEB_RESET_CHANGE();

/*
 * MSG_FFEB_CANCEL_CHANGE --
 *
 *	This message is sent when the "Cancel" button is pressed.
 */
@message void MSG_FFEB_CANCEL_CHANGE();

/*
 * MSG_FFEB_FIELD_LIST_MONIKER_QUERY --
 *	This message is sent by the field list when it wants a field's moniker.
 *
 * Parameters: void (optr list, word item)
 */
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FFEB_FIELD_LIST_MONIKER_QUERY;

/*
 * MSG_FFEB_FUNCTION_LIST_MONIKER_QUERY --
 *	This message is sent by the function list when it wants a
 *	function's moniker.
 *
 * Parameters: void (optr list, word item)
 */
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FFEB_FUNCTION_LIST_MONIKER_QUERY;

/*
 * MSG_FFEB_ADD_FUNCTION_STRING--
 *	This message is sent by the field list when a user changes
 *	the list.
 *
 * Parameters: void (word selection, word numSelections, word stateFlags)
 */
@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FFEB_ADD_FIELD_STRING;

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FFEB_ADD_FUNCTION_STRING;

@message (GEN_ITEM_GROUP_STATUS_MSG) MSG_FFEB_ADD_OP_STRING;

/*
 * MSG_RETURN_MSG_TEMPLATE --
 *	This is used to cast the expression builder's return message.
 */
@message void MSG_FFEB_RETURN_MSG_TEMPLATE(MemHandle stringHandle);
				      
@default GCI_output = (TO_APP_TARGET);

/*
 * Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI)
 */

/* FFEBFeatures */
#define FFEB_TEXTEDIT_BOX	0x01

/*
 * Toolbox features flags (used with ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI)
 */

/* (NONE) */

/*
 * Feature flags for different UI levels
 */


#define FFEB_DEFAULT_FEATURES		(FFEB_TEXTEDIT_BOX)
#define FFEB_DEFAULT_TOOLBOX_FEATURES 	0

@endc


