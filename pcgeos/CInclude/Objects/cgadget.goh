/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		UI Gadgets
FILE:		gadgets.goh

AUTHOR:		Andy Chiu, Jul 14, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	7/14/94   	Initial version.
	jfh	7/15/04	morphed to cgadget.goh

DESCRIPTION:
	This file contains the definition of the gadgets library.	

	$Id: gadgets.goh,v 1.1 97/04/04 15:52:50 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@include <stdapp.goh>
#include <Ansi\string.h>

@deflib	cgadget

/*----------------------------------------------------------------------------
; 	Constants
;---------------------------------------------------------------------------*/

/* Many routines in the kernel don't deal well with years above 2099
	or below 1980. */
#define MAX_YEAR	2099
#define MIN_YEAR	1905

/* increment/decrement by m,d,y,h,m */
#define ID_MONTH 1
#define ID_DAY 2
#define ID_YEAR 3
#define ID_HOUR 4
#define ID_MINUTE 5
#define ID_AMPM 6
#define ID_INC 7

/* Constants for repeat trigger  */
#define INITIAL_REPEAT_DELAY	30
#define MINIMUM_REPEAT_DELAY	10

/********************************
	Structures
********************************/

typedef char	DateTimeBuffer[DATE_TIME_BUFFER_SIZE];

typedef struct {
	word	DT_year;
	byte	DT_month;
	byte	DT_day;		/* day of month (1 .. 31) */
	byte	DT_weekday;	/* day of week (0 .. 6) */
	byte	DT_week;
} DateStruct;

typedef	struct {
	byte	T_hours;
	byte	T_minutes;
	byte	T_seconds;
} TimeStruct;


/************************************************************************/
/*			Prototypes
/************************************************************************/
void NotifyDBox (char* string1, optr notifyMsg);


/************************************************************************/
/*			DateInputClass					*/
/************************************************************************/

@class	DateInputClass, GenControlClass;

/********************************
	Messages
********************************/

@message void	MSG_DATE_INPUT_GET_DATE(DateStruct *retValue);
/* Get the current date from the DateInput. */

@message void	MSG_DATE_INPUT_SET_DATE(byte day, byte month, word year);
/* Set the current date of the DateInput.  This will result in the action
; message be sent out after the new date is set.  The day of the week will
; be calculated. */

@message void	MSG_DATE_INPUT_SET_CURRENT_DATE();
/* Set the date of the DateInput to the current system date.  This will result
; in the action message be sent out after the new date is set. */

@message void   MSG_DATE_INPUT_REDISPLAY_DATE();
/* Forces the date to be redisplayed in the current format. */

/********************************
	INTERNAL Messages
********************************/

@message void	MSG_DI_DATE_INC();
/* Tells the controller that the date has been incremented. */

@message void	MSG_DI_DATE_DEC();
/* Tells the controller that the date has been decremented. */

@message Boolean	MSG_DI_PARSE_DATE_STRING();
/* Parses the date string in the GenText and stores the values in DII_date. */

@message void	MSG_DI_TEXT_APPLY();
/* Handle apply msg from interal text object. */

/********************************
	Constants & Structures 
********************************/

/*
 * Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI)
 */

typedef	WordFlags	DIFeatures;
#define	DIF_DATE	0x01

#define	DI_DEFAULT_FEATURES	(DIF_DATE)

/********************************
	Instance Data
********************************/

	@instance	DateStruct	DII_date = {0xffff,1,1,0,0};
                /*  Holds the current date of the DateSelector               */

	@instance       Message         DII_actionMsg;
                /*  The message to be sent out (to GCI_output) when the date */
                /*  has changed.  This happens if the users presses the      */
                /*  increment/decrement triggers or a                        */
                /*  MSG_DATE_INPUT_SET_DATE is received.                     */

	@prototype void DATE_INPUT_ACTION(byte day, byte month, word year);
    		/* Standard prototype for action messages */

	@default GI_states = (@default | GS_ENABLED);

/********************************
	Hints
********************************/

@vardata void ATTR_DATE_INPUT_TARGETABLE;
/* Make the text part of the object targetable. */


@endc  /* DateInputClass */

/*****************************************************************************\
 *			TimeInputClass					     *
\*****************************************************************************/

@class	TimeInputClass, GenControlClass;

/********************************
	Messages
********************************/

@message void	MSG_TIME_INPUT_GET_TIME(TimeStruct *retVal);
/* Get the current time from the TimeInput.  All fields will contain
; TIME_INPUT_NONE if ATTR_TIME_INPUT_DISPLAY_STRING_WHEN_EMPTY is set
; and the object is empty. */

@message void	MSG_TIME_INPUT_SET_TIME(sbyte hours, sbyte minutes, sbyte seconds);
/* Set the current time of the TimeInput.  This will result in the action
; message be sent out after the new time is set. */

@message void	MSG_TIME_INPUT_SET_CURRENT_TIME();
/* Set the time of the TimeInput to the current system time.  This will result
; in the action message be sent out after the new time is set. */

@message word	MSG_TIME_INPUT_GET_INCREMENT_VALUE();
/* Returns the TII_incrementValue used when incrementing or decrementing the
; time. */

@message void	MSG_TIME_INPUT_SET_INCREMENT_VALUE(word increment);
/* Sets the TII_incrementValue used when incrementing or decrementing the
; time. */

@message void	MSG_TIME_INPUT_REDISPLAY_TIME();
/* Forces the time to be redisplayed in the current format. */

/********************************
	INTERNAL Messages
********************************/

@message void	MSG_TI_TIME_INC();
/* Tells the controller that the time has been incremented.  Uses
   TII_incrementValue. */

@message void	MSG_TI_TIME_DEC();
/* Tells the controller that the time has been decremented. Uses
   TII_incrementValue. */

@message Boolean MSG_TI_PARSE_TIME_STRING();
/* Parses the time string in TIText and stores the time in TII_time. */

@message void MSG_TI_TEXT_APPLY();
/* Respond to internal text object's apply message. */

/********************************
	Constants & Structures
********************************/

/*
 * Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI)
 */

typedef	WordFlags	TIFeatures;
#define	TIF_DATE	0x01

#define TI_DEFAULT_FEATURES	(TIF_DATE)

/********************************
	Instance Data
********************************/
	@instance TimeStruct	TII_time = {0xff, 0xff, 0xff};
               /*  Holds the current time of the TimeInput                   */

		  @instance word          TII_incrementValue = 5;
               /*  Holds the number of minutes to increment or decrement     */
	       /*  when using MSG_TI_TIME_DEC/INC.			     */

		  @instance Message       TII_actionMsg = 0;
               /*  The message to be sent out (to GCI_output) when the time  */
               /*  has changed.  This happens if the users presses the       */
               /*  increment/decrement triggers a MSG_TIME_INPUT_SET_TIME    */
               /*  is received or the user inputed a new time using keyboard */
               /*  or ink.                                                   */

	@prototype void TIME_INPUT_ACTION(byte hours,
					  byte minutes,
					  byte seconds);
    		/* Standard prototype for action messages */
				
	@default GI_states = (@default | GS_ENABLED);

/********************************
	Hints
********************************/

@vardata void ATTR_TIME_INPUT_TARGETABLE;
/* Make the text part of the object targetable. */

@vardata void ATTR_DONT_SEND_APPLY_MSG_ON_TEXT_LOST_FOCUS;
/*
 * The default behavior in TimeInputClass is to send TII_actionMsg when it
 * receives MSG_META_TEXT_LOST_FOCUS (ie. when the text object in the child
 * block loses focus).  With this hint, the action message is not sent on
 * losing focus.  This hint is useful when we want the apply message to be
 * sent only when we receive MSG_GEN_APPLY, e.g. when the controller appears
 * as a dialog with an OK button.
 */

@endc	 /* TimeInputClass */


@class DateInputTextClass, GenTextClass;
@endc;


@class TimeInputTextClass, GenTextClass;
@endc;


/******************************************************************************
		RepeatTriggerClass
******************************************************************************/

@class  RepeatTriggerClass, GenTriggerClass;

/********************************
	Messages
********************************/

@message word MSG_REPEAT_TRIGGER_GET_REPEAT_RATE(word repeats) = cx;
/* The repeat trigger sends this to itself to get the repeat rate to use when
; the user holds down the increment/decrement button.  You can subclass this
; to get the repeat rate you want for your trigger. Faster rates are desireable
; for large ranges.  The number of repeats is passed and may be useful. */

/********************************
	INTERNAL messages
********************************/

@message void MSG_RT_REPEAT_ACTION();
/*
 *  Send a MSG_GEN_TRIGGER_SEND_ACTION on a timer click.
 */

/********************************
	Instance Data
********************************/

		  @instance TimerHandle  RTI_timerHandle = NullHandle;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the handle of the trigger timer.              */
                /*                                                      */

		  @instance word  RTI_timerID = 0;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the ID of the trigger timer.                  */
                /*                                                       */
		  @instance word  RTI_repeatCount = 0;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the repeat count                              */
                /*                                                      */
        
		  @instance word  RTI_repeatRate = INITIAL_REPEAT_DELAY;
                /*  Holds the time interval the trigger is repeated by. */

		  @instance Boolean  RTI_accelerate = TRUE;
                /*                                                      */
                /*  If TRUE then the repeat rate will accelerate as the */
                /*  trigger is held down.  This is the default.         */
                /*                                                      */

	@default GI_states = (@default | GS_ENABLED);
/********************************
	Vardata
********************************/

	@vardata void HINT_REPEAT_TRIGGER_NOT_FOCUSABLE;
	/*
	 * Don't allow keyboard focus to reach this object.
	 */

@endc	/* RepeatTriggerClass */



@endlib

