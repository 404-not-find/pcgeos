/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		eMenuC.goh

AUTHOR:		Ian Porteous, Jun  6, 1994

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	IP	6/ 6/94   	Initial version.

DESCRIPTION:
	

	$Id: eMenuC.goh,v 1.2 98/07/07 11:16:06 joon Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@optimize

@ifndef	__EMENUC
@define __EMENUC

@include <Objects/gCtrlC.goh>

@deflib ui

@class	ExpressMenuControlClass, GenControlClass;


/*
 * parameters for MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM
 */

typedef enum {
    CEMCIF_GEOS_TASKS_LIST,
    CEMCIF_DOS_TASKS_LIST,
    CEMCIF_CONTROL_PANEL,
    CEMCIF_UTILITIES_PANEL,
    CEMCIF_SYSTEM_TRAY
    } CreateExpressMenuControlItemFeature;

typedef enum {
    CEMCIP_SPOOL_CONTROL_PANEL=0x100,
    CEMCIP_NETMSG_SEND_MESSAGE=0x200,
    CEMCIP_SAVER_SCREEN_SAVER=0x300,
    CEMCIP_SAVER_SCREEN_LOCK0x400,
    CEMCIP_STANDARD_PRIORITY=CCO_LAST
    } CreateExpressMenuControlItemPriority;


typedef struct
{
	CreateExpressMenuControlItemFeature	CEMCIP_feature;
	/*
	 * feature to which item is to be created.  Only EMCF_GEOS_TASKS_LIST,
	 * EMCF_DOS_TASKS_LIST, ECMF_CONTROL_PANEL, and ECMF_UTILITIES_PANEL
	 * allowed
	 */
	const ClassStruct *		 	CEMCIP_class;
	/* class of object to create.  Must be a subclass of GenItemClass
	 * for CEMCIF_GEOS_TASKS_LIST or a subclass of GenTrigger for
	 * CEMCIF_DOS_TASKS_LIST or a subclass of GenClass for
	 * CEMCIF_CONTROL_PANEL and CEMCIF_UTILITIES_PANEL.
	 */	
	CreateExpressMenuControlItemPriority	CEMCIP_itemPriority;
	/* Specifies the relative position for the newly created item.
	 * Lower numbers will be added in front (above) higher numbers.
	 * Use CEMCIP_STANDARD_PRIORITY for default position.
	 */
	word					CEMCIP_responseMessage;
	/* message to send with newly created object's optr.
	 */
	optr					CEMCIP_responseDestination;
	/* opaque word of data copied to CEMCIRP_data field to help destination
	 * figure out what it should do with the new item.
	 */
	word					CEMCIP_responseData;
	/* opaque word of data copied to CEMCIRP_data field to help destination
	 * figure out what it should do with the new item.
	 */
	optr					CEMCIP_field;
	/* Only Express Menu Control objects associated with this GenField
	 * object will be affected.  Pass 0 if the GenField the Express Menu
	 * Control is associated with doesn't matter.
	 */
    } CreateExpressMenuControlItemParams;



typedef struct
{
	optr	CEMCIRP_newItem;
	/*  optr of newly created item
	 */
	word	CEMCIRP_data;
	/* data passed when the object was created
	 */
	optr	CEMCIRP_expressMenuControl;
	/* Express Menu Control object that created the new item
	 */
} CreateExpressMenuControlItemResponseParams;

/*
 * Adds object to one of the features in Express Menu Control.  The allowed
 * features are DOS Tasks List, GEOS Tasks List, Control Panel, and Utilities
 * Panel.
 *
 * The object is left not-usable with no moniker.  The optr of the object is
 * not returned directly by this message, but via a caller-defined message sent
 * back to a caller-defined destination.  This allows sending this message to
 * all Express Menu Control objects in the system with GCNListSend and the
 * GCNSLT_EXPRESS_MENU_OBJECTS_LIST.  The handler of the caller-defined response
 * message should set a moniker for the created item and set it usable.  Use
 * MSG_EXPRESS_MENU_CONTROL_DESTROY_CREATED_ITEM to destroy this object when you
 * are done with it.  If the Express Menu Control object doesn't support the
 * requested feature, no item will be created and no response message will be
 * sent.  If only Express Menu Control objects associated with a certain
 * GenField object should be affected, pass the optr of the field, otherwise
 * pass 0.
 *
 * NOTE:  the identifier of the created item is used internally and
 * should not be altered.
 *
 * Pass:
 *	CreateExpressMenuControlItemParams, 
 *      int size CreateExpressMenuControlItemParams
 * Return:
 *	nothing - optr of newly-created object is returned via passed message
 *		and destination
 *
 *	Passed with response-message to response-destination:
 *		ss:bp = CreateExpressMenuControlItemResponseParams
 *
 */
@message void MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM(
              @stack CreateExpressMenuControlItemParams createParams);
@alias	(MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM) void \
	MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM_PARAMS (@stack optr field,\
	word responseData, optr responseDestination, word responseMessage, \
	CreateExpressMenuControlItemPriority priority, const ClassStruct *class, \
	CreateExpressMenuControlItemFeature feature);
/*
 * Destroy a created item.  Use with objects created with
 * MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM
 * 
 *  Pass:
 *      optr object of object to destroy,
 * 	mode VisUpdateMode (in low byte, high byte clear)
 *  Return:
 * 	nothing
 * 
 */
@message void MSG_EXPRESS_MENU_CONTROL_DESTROY_CREATED_ITEM(optr object = cx:dx, 
						       VisUpdateMode mode = bp);


@message void MSG_EMC_LAUNCH_APPLICATION();               /*INTERNAL*/
@message void MSG_EMC_EXIT_TO_DOS();		          /*INTERNAL*/
@message void MSG_EMC_SELECT_GEOS_TASKS_LIST_ITEM();      /*INTERNAL*/
@message void MSG_EMC_OPEN_FLOATING_KBD();                /*INTERNAL*/
@message void MSG_EMC_RETURN_TO_DEFAULT_LAUNCHER();       /*INTERNAL*/
@message void MSG_EMC_REALLY_LAUNCH_APPLICATION();        /*INTERNAL*/
@message void MSG_EMC_OPEN_DOCUMENT();			  /*INTERNAL*/

@vardata void ATTR_EMC_SET_NOT_USABLE_ON_DETACH;
/*
 * Used for GenField Express Menu Control instances.  These are sent a
 * MSG_META_DETACH when the field is exited and not necessarily when the
 * system is detaching.  We want to allow these to be removed from memory
 * cleanly.
 */

@vardata char TEMP_EMC_HAS_RETURN_TO_DEFAULT_LAUNCHER;
/*
 * Used internally for GenField Express Menu Control instances to indicate
 * that this Express Menu Control should add a "Return to <default launcher>"
 * button.  Data is name (or path) of default launcher.
 */

@vardata void ATTR_EMC_TRIGGERS_SIGNAL_INTERACTION_COMPLETE;
/*
 * Used to cause triggers added to the express menu to signal interaction
 * complete when they are activated.  (GA_SIGNAL_INTERACTION_COMPLETE)
 */

typedef WordFlags EMCFeatures;
#define    EMCF_DOCUMENTS_LIST       0x0100
#define    EMCF_GEOS_TASKS_LIST      0x0080
#define    EMCF_DESK_ACCESSORY_LIST  0x0040
#define    EMCF_MAIN_APPS_LIST       0x0020
#define    EMCF_OTHER_APPS_LIST      0x0010
#define    EMCF_CONTROL_PANEL        0x0008
#define    EMCF_DOS_TASKS_LIST       0x0004
#define    EMCF_UTILITIES_PANEL      0x0002
#define    EMCF_EXIT_TO_DOS          0x0001

#define EMC_DEFAULT_FEATURES (  EMCF_GEOS_TASKS_LIST | \
				EMCF_DESK_ACCESSORY_LIST | \
				EMCF_MAIN_APPS_LIST | \
				EMCF_OTHER_APPS_LIST | \
				EMCF_CONTROL_PANEL | \
				EMCF_DOS_TASKS_LIST | \
				EMCF_UTILITIES_PANEL | \
				EMCF_EXIT_TO_DOS )

#define EMC_SUGGESTED_INTRODUCTORY_FEATURES (EMCF_DESK_ACCESSORY_LIST | \
					     EMCF_CONTROL_PANEL | \
					     EMCF_DOS_TASKS_LIST | \
					     EMCF_UTILITIES_PANEL )

#define EMC_SUGGESTED_BEGINNING_FEATURES EMC_SUGGESTED_INTRODUCTORY_FEATURES

#define EMC_SUGGESTED_INTERMEDIATE_FEATURES (EMC_SUGGESTED_BEGINNING_FEATURES | \
					     EMCF_GEOS_TASKS_LIST | \
					     EMCF_MAIN_APPS_LIST | \
					     EMCF_OTHER_APPS_LIST | \
					     EMCF_EXIT_TO_DOS )

#define EMC_SUGGESTED_ADVANCED_FEATURES EMC_SUGGESTED_INTERMEDIATE_FEATURES

typedef struct {
    MemHandle    EMCDD_ackEvent;
	/* recorded MSG_META_ACK that will be
	 * sent back by everyone on the
	 * EXPRESS_MENU_CHANGE list
	 */
    MemHandle    EMCDD_childBlock;
	/* handle of child block to be freed when
	 * MSG_META_DETACH_COMPLETE comes in,
	 * saying that everyone who could
	 * possibly care has acknowledged the
	 * detach, so it's safe to actually
	 * free the child block, which the
	 * GenControl object won't do when it
	 * receives a MSG_META_DETACH
	 */
    } EMCDetachData;

@vardata EMCDetachData TEMP_EXPRESS_MENU_CONTROL_DETACH_DATA;

@vardata void ATTR_EMC_SYSTEM_TRAY;

@endc

@endlib

@endif











