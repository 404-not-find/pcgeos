/***************************************************************************
 *  FILE:  FileList.goh
 ***************************************************************************/

/*
       FileListClass:

       The FileListClass object is used display a list of files either
       locally or remotely in an organized fashion.  The files are shown
       as a list of items in a dynamic list.

       The files are kept internally as a list of items ordered by the
       append order.  There is a separate sort index that is used for
       displaying the list.

       Selection of files is simple:  Single or Multiple files can be
       selected.  There is no filtering of directory or file selection
       automatically.

       The path is also tracked, but little support is in place to
       control the parsing of the path.

       Most users of this object will want to subclass it to modify
       its functionality.  This particular object keeps track of a
       simple list of files, but does not interact with the GEOS file
       system directly (see GenGEOSFileListClass for that).

       Because of the amount of data this object keeps in memory at one
       time, there is a limit on the number of files it can handle (and
       the amount of memory it will tolerate).  This is roughly 500
       files or 8k of data.

       Displaying of the files are simply the name given (maybe clipped
       for viewing purposes), the date (localized for the language), and
       the size (converted to Gigabyte, Megabyte, or Kilobyte sizes).
*/
@ifndef _FILE_LIST_GOH_
@define _FILE_LIST_GOH_

@include <DirPath.goh>

/*---------------------------------------------------------------------*/
@class GenFileListClass, GenInteractionClass ;

        /* ----------------------------------------------------- */
        /* Internal messages not called by users of this object. */
        /* ----------------------------------------------------- */
        @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_GEN_FILE_LIST_DRAW_ITEM ;
        @message void MSG_GEN_FILE_LIST_PATH_CHANGED() ;
        @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GEN_FILE_LIST_VOLUME_SELECTED_INTERNAL ;
        @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_GEN_FILE_LIST_QUERY_VOLUME ;
        @message void MSG_GEN_FILE_LIST_UPDATE_UI() ;
        @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GEN_FILE_LIST_ENTRY_SELECTED_INTERNAL ;
        @message void MSG_GEN_FILE_LIST_SET_LAST_FOCUS(optr lastFocus) ;
        @reserveMessages 25 ;


        /* ----------------------------------------------------- */
        /* Public messages:                                      */
        /* ----------------------------------------------------- */
#define FILE_LIST_MAX_FILES   500
#define FILE_LIST_MAX_DATA   8000  /* 8k worth of text and info */

/* Type defines go here */
        typedef word T_fileListID ;
        #define FILE_LIST_ID_BAD  0xFFFF

        typedef byte T_fileListField ;
        #define FILE_LIST_FIELD_FILENAME   0
        #define FILE_LIST_FIELD_SIZE       1
        #define FILE_LIST_FIELD_DATE       2
        #define FILE_LIST_FIELD_UNKNOWN    3

        #define FILE_LIST_MAXIMUM_PATH_SIZE   400

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SET_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Declare the path to make the UI object to show.  This will cause
 |     the list to clear out and display the new location.
 | Inputs:
 |     TCHAR *p_path              -- Full path specifier.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SET_PATH(TCHAR *p_path) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Get the current path being used.
 | Inputs:
 |     TCHAR *p_path              -- Place to store path, pass NULL for
 |                                   no retrieval
 |     word maxPathSize           -- Maximum path to find something
 | Outputs:
 |     DiskHandle                 -- Returned disk handle
 *-----------------------------------------------------------------------*/
        @message T_volumeID MSG_GEN_FILE_LIST_GET_PATH(
                          TCHAR *p_path,
                          word maxPathSize) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_TRAVEL
 *-------------------------------------------------------------------------
 | Description:
 |     Travel into a directory that is on the list.
 |     Requests the new directory path after clearing the current list.
 | Inputs:
 |     T_fileListID index         -- Which file to travel into.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_TRAVEL(T_fileListID index) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_ACTIVATE_FILE
 *-------------------------------------------------------------------------
 | Description:
 |     User has executed a file (double clicked on it).  Do whatever
 |     needs to be done (or ignore).
 | Inputs:
 |     T_fileListID index         -- Which file to travel into.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_ACTIVATE_FILE(T_fileListID index) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_UP_DIRECTORY
 *-------------------------------------------------------------------------
 | Description:
 |     Travel up one directory level.
 |     Clears the list and then requests a path up one level.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_UP_DIRECTORY() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_REMOVE
 *-------------------------------------------------------------------------
 | Description:
 |     Remove a file from the listing.  Note that all file indexes past
 |     this file is decremented and one less will be in the list.
 | Inputs:
 |     T_fileListID index         -- file to delete
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_REMOVE(T_fileListID index) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_APPEND
 *-------------------------------------------------------------------------
 | Description:
 |     Add another file to the listing.  Internally, one more index will
 |     be created (at the end).
 | Inputs:
 |     TCHAR *p_filename          -- Name of file (zero terminated)
 |     dword size                 -- Size of file
 |     FileDateAndTime modified   -- Date and time of last modification
 |     Boolean isDir              -- TRUE if directory, else FALSE
 | Outputs:
 |     T_fileListID               -- ID assigned to this entry, or returns
 |                                   FILE_LIST_ID_BAD if failed.
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_APPEND(
                          TCHAR *p_filename,
                          dword size,
                          FileDateAndTime modified,
                          Boolean isDir) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CHANGE_NAME
 *-------------------------------------------------------------------------
 | Description:
 |     Change the name of a file (and resort as necessary).
 | Inputs:
 |     T_fileListID file          -- File to change
 |     TCHAR *p_newFilename       -- New filename to use
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CHANGE_NAME(
                          T_fileListID file,
                          TCHAR *p_newFilename) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CHANGE_SIZE
 *-------------------------------------------------------------------------
 | Description:
 |     Change the size of a file (and resort as necessary).
 | Inputs:
 |     T_fileListID file          -- File to change size
 |     dword newSize              -- byte size of file
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CHANGE_SIZE(
                          T_fileListID file,
                          dword newSize) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CHANGE_MODIFIED
 *-------------------------------------------------------------------------
 | Description:
 |     Change the modification date and time of a file (and resort as
 |     necessary).
 | Inputs:
 |     T_fileListID file          -- file to change modification date
 |     FileDateAndTime modified   -- New date and time
 | Outputs:
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CHANGE_MODIFIED(
                          T_fileListID file,
                          FileDateAndTime modified) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_QUERY_IS_DIR
 *-------------------------------------------------------------------------
 | Description:
 |     Determine if a file in the list is a directory.
 | Inputs:
 |     T_fileListID file          -- Entry to check
 | Outputs:
 |     Boolean                    -- TRUE if a directory
 *-----------------------------------------------------------------------*/
        @message Boolean MSG_GEN_FILE_LIST_QUERY_IS_DIR(T_fileListID file) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_COUNT
 *-------------------------------------------------------------------------
 | Description:
 |     Get the number of items in the directory list.
 | Outputs:
 |     word                       -- Number entries
 *-----------------------------------------------------------------------*/
        @message word MSG_GEN_FILE_LIST_GET_COUNT() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SET_SORT_ORDER
 *-------------------------------------------------------------------------
 | Description:
 |     Change the sorting method in use.  If this is different then
 |     currently used, a complete resort will occur.
 | Inputs:
 |     T_fileListField sortField  -- Which field to sort by
 |     Boolean isDescending       -- TRUE is descend, else ascend.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SET_SORT_ORDER(
                          T_fileListField sortField,
                          Boolean isDescending) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_SORT_ORDER
 *-------------------------------------------------------------------------
 | Description:
 |     Get the current sort order being used.
 | Inputs:
 |     T_fileListField *p_sortField -- Return field being used to sort by
 | Outputs:
 |     Boolean                    -- TRUE if descent, else ascend.
 *-----------------------------------------------------------------------*/
        @message Boolean MSG_GEN_FILE_LIST_GET_SORT_ORDER(
                          T_fileListField *p_sortField) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CHOOSE_SORT_TAB
 *-------------------------------------------------------------------------
 | Description:
 |     Choose the sort order as if you are selecting that tab.  Mainly
 |     changes the UI.  It will toggle the sort order if the sort is
 |     the same.
 | Inputs:
 |     T_fileListField sortField  -- Which field to sort by
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CHOOSE_SORT_TAB(
                          T_fileListField sortField) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_FIRST
 *-------------------------------------------------------------------------
 | Description:
 |     Get the first sorted entry.
 | Outputs:
 |     T_fileListID               -- First entry
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_GET_FIRST() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_LAST
 *-------------------------------------------------------------------------
 | Description:
 |     Get the last sorted entry.
 | Outputs:
 |     T_fileListID               -- Last entry in sorted list
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_GET_LAST() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_NEXT
 *-------------------------------------------------------------------------
 | Description:
 |     Given a file in the list, determine the next sorted entry
 | Outputs:
 |     T_fileListID               -- Next sorted entry, or
 |                                   FILE_LIST_ID_BAD
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_GET_NEXT(
                          T_fileListID id) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_PREVIOUS
 *-------------------------------------------------------------------------
 | Description:
 |     Given a file in the list, determine the previous sorted entry.
 | Outputs:
 |     T_fileListID               -- Previous sorted entry, or
 |                                   FILE_LIST_ID_BAD
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_GET_PREVIOUS(
                          T_fileListID id) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_FIND_NTH
 *-------------------------------------------------------------------------
 | Description:
 |     Determine the nth position in the sorted array.
 | Inputs:
 |     word index                 -- Index position to find
 | Outputs:
 |     T_fileListID               -- id of file found, else
 |                                   FILE_LIST_ID_BAD
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_FIND_NTH(
                          word index) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_POSITION
 *-------------------------------------------------------------------------
 | Description:
 |     Determine the sorted position of a file.
 | Inputs:
 |     T_fileListID               -- id of file to find
 | Outputs:
 |     word                       -- Position of file, or 0xFFFF for none.
 *-----------------------------------------------------------------------*/
        @message word MSG_GEN_FILE_LIST_GET_POSITION(
                          T_fileListID id) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CLEAR
 *-------------------------------------------------------------------------
 | Description:
 |     Completely clear the list of all entries.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CLEAR() ;

        typedef byte T_fileListSelectionType ;
        #define FILE_LIST_SELECT_SINGLE    0
        #define FILE_LIST_SELECT_MULTIPLE  1
        #define FILE_LIST_SELECT_UNKNOWN   2

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SET_SELECTION_TYPE
 *-------------------------------------------------------------------------
 | Description:
 |     Declare the type of selecting the user is allowed to do:
 |     single file or multiple.
 | Inputs:
 |     T_fileListSelectionType selectType -- set the selection type.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SET_SELECTION_TYPE(
                          T_fileListSelectionType selectType) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_SELECTION_TYPE
 *-------------------------------------------------------------------------
 | Description:
 |     Return the type of selections being executed.
 | Outputs:
 |     T_fileListSelectionType
 *-----------------------------------------------------------------------*/
        @message T_fileListSelectionType
                     MSG_GEN_FILE_LIST_GET_SELECTION_TYPE() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SELECT_FILE
 *-------------------------------------------------------------------------
 | Description:
 |     Declare a single file as selected.  If single selection mode is
 |     used, only this file will now be selected.  If in multiple selection
 |     mode, this file is now selected.
 | Inputs:
 |     T_fileListID file          -- File to select
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SELECT_FILE(T_fileListID file) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_UNSELECT_FILE
 *-------------------------------------------------------------------------
 | Description:
 |     Declare a single file as unselected.  If in multiple selection
 |     mode, all other selections are unaffected.
 | Inputs:
 |     T_fileListID file          -- file to select
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_UNSELECT_FILE(T_fileListID file) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_QUERY_SELECTED
 *-------------------------------------------------------------------------
 | Description:
 |     Determine if the given file has been selected.  Multiple selection
 |     mode users will make calls to this routine.
 | Inputs:
 |     T_fileListID file          -- File to check
 | Outputs:
 |     Boolean                    -- TRUE if selected, else FALSE
 *-----------------------------------------------------------------------*/
        @message Boolean MSG_GEN_FILE_LIST_QUERY_SELECTED(T_fileListID file) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_QUERY_SINGLE_SELECTION
 *-------------------------------------------------------------------------
 | Description:
 |     Determine the last selected file (and still selected).  Single
 |     selection mode users will use this call to determine which file
 |     has been called.  Multiple selection mode will always return
 |     FILE_LIST_ID_BAD ;
 | Outputs:
 |     T_fileListID               -- file id of only file selected, else
 |                                   FILE_LIST_ID_BAD
 *-----------------------------------------------------------------------*/
        @message T_fileListID MSG_GEN_FILE_LIST_QUERY_SINGLE_SELECTION() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_INFO
 *-------------------------------------------------------------------------
 | Description:
 |     Pull information about a file out of the list.  Pass NULL to any
 |     of the parameters that you don't want to have returned.
 | Inputs:
 |     T_fileListID               -- File to find
 |     TCHAR *p_filename          -- Place to return filename if not NULL
 |     word maxFilename           -- Size of buffer holding name (including
 |                                   NULL character)
 |     dword *p_size              -- Place to store file size if not NULL
 |     FileDateAndTime *p_modified -- Place to store modification date if not
 |                                   NULL.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_GET_INFO(
                          T_fileListID file,
                          TCHAR *p_filename,
                          word maxFilename,
                          dword *p_size,
                          FileDateAndTime *p_modified) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_RELOAD
 *-------------------------------------------------------------------------
 | Description:
 |     Method called to clear the list and load a new group of list items.
 |     Use this method also to reread the directory.
 |
 |     Caveat:  Make sure you mark the reload flag if in suspend mode as
 |              follows:
 |
 |     if (pself->GFLI_suspendCount)  {
 |       pself->GFLI_suspendFlags |= GEN_FILE_LIST_SUSPEND_RELOAD_PENDING ;
 |     } else {
 |       // Your reload method
 |     }
 |
 |     Also, be sure to call MSG_GEN_FILE_LIST_MARK_RELOAD_ENDED when
 |     the reload is complete.
 |
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_RELOAD() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SETUP
 *-------------------------------------------------------------------------
 | Description:
 |     Called to do any initializiation necessary before the object
 |     loads its first directory.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SETUP() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_DRAW_ICON
 *-------------------------------------------------------------------------
 | Description:
 |     Icons can be drawn by the user here.  For now, the only thing drawn
 |     is a folder for folders.  All else have no icons.
 | Inputs:
 |     GStateHandle gstate        -- Where to draw the icon
 |     sword x, y                 -- coordinate location of top left
 |     word width, height         -- Area reserved
 |     T_fileListID file          -- identifier of file with icon
 |     Boolean isDir              -- TRUE if a folder/directory, else
 |                                   FALSE
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_DRAW_ICON(
                          GStateHandle gstate,
                          sword x,
                          sword y,
                          word width,
                          word height,
                          T_fileListID file,
                          Boolean isDir) ;

        typedef word T_volumeIndex ;
        #define VOLUME_INDEX_BAD 0xFFFF

        typedef word T_volumeID ;
        #define VOLUME_ID_BAD    0xFFFF

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CREATE_VOLUMES
 *-------------------------------------------------------------------------
 | Description:
 |     Sets up a structure to hold the volume names and identifiers.
 |     Usually this method is handled in the subclass to create all the
 |     volume names at this point (via calls to 
 |     MSG_GEN_FILE_LIST_APPEND_VOLUME)
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CREATE_VOLUMES() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_APPEND_VOLUME
 *-------------------------------------------------------------------------
 | Description:
 |     Adds one volume entry to the volume list and gives it a user
 |     defined numeric identifier.
 | Inputs:
 |     word volumeID              -- ID for this new volume
 |     char *p_name               -- Name of volume (null terminated)
 |     char *p_displayedName      -- Name used for showing on drop list.
 | Outputs:
 |     word                       -- Index in list
 *-----------------------------------------------------------------------*/
        @message T_volumeIndex MSG_GEN_FILE_LIST_APPEND_VOLUME(
                          T_volumeID volumeID,
                          char *p_name,
                          char *p_displayedName) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_VOLUME_SELECTED
 *-------------------------------------------------------------------------
 | Description:
 |     The user has clicked on a volume.  Typically intercepted and
 |     handled by the subclass.
 | Inputs:
 |     T_volumeIndex index        -- index in list of selection
 |     T_volumeID volumeID        -- Corresponding ID passed to APPEND_VOL
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_VOLUME_SELECTED(
                               T_volumeIndex index,
                               T_volumeID volumeID) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_VOLUME_NAME
 *-------------------------------------------------------------------------
 | Description:
 |     Get the name of a volume and put into a buffer given the index
 |     into the list.  Use MSG_GEN_FILE_LIST_FIND_VOLUME if you only have
 |     an ID.
 | Inputs:
 |     T_volumeIndex index        -- index in list of volume
 |     char *p_name               -- Pointer to name
 |     word nameLimit             -- size of name buffer (including \0)
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_GET_VOLUME_NAME(
                          T_volumeIndex index,
                          char *p_name,
                          word nameLimit) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_GET_DISPLAYED_VOLUME_NAME
 *-------------------------------------------------------------------------
 | Description:
 |     Get the name of a volume and put into a buffer given the index
 |     into the list.  Use MSG_GEN_FILE_LIST_FIND_VOLUME if you only have
 |     an ID.
 | Inputs:
 |     T_volumeIndex index        -- index in list of volume
 |     char *p_name               -- Pointer to name
 |     word nameLimit             -- size of name buffer (including \0)
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_GET_DISPLAYED_VOLUME_NAME(
                          T_volumeIndex index,
                          char *p_name,
                          word nameLimit) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_FIND_VOLUME
 *-------------------------------------------------------------------------
 | Description:
 |     Convert a volume's id to its index position.
 | Inputs:
 |     word volumeID              -- ID to a volume
 | Outputs:
 |     T_volumeIndex              -- matching index, or VOLUME_INDEX_BAD
 *-----------------------------------------------------------------------*/
        @message T_volumeIndex MSG_GEN_FILE_LIST_FIND_VOLUME(
                          T_volumeID volumeID) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SELECT_VOLUME
 *-------------------------------------------------------------------------
 | Description:
 |     Outside routines that wish to change the volume currently shown/
 |     selected, call here.  Updates UI and triggers change of drives.
 | Inputs:
 |     word volumeID              -- Volume ID to find
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SELECT_VOLUME(T_volumeID volumeID) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_MAP_VOLUME_NAME
 *-------------------------------------------------------------------------
 | Description:
 |     Determine a volume's name from a string to its id.
 | Inputs:
 |     TCHAR *p_volume            -- Name of volume
 | Outputs:
 |     T_volumeID volumeID        -- Volume ID to found
 *-----------------------------------------------------------------------*/
        @message T_volumeID MSG_GEN_FILE_LIST_MAP_VOLUME_NAME(TCHAR *p_volume) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_FILTER
 *-------------------------------------------------------------------------
 | Description:
 |     As items are added to the file list, each item can be checked by
 |     intercepting this message.  *p_keep is used instead of passing
 |     back a value.
 | Inputs:
 |     TCHAR *p_filename          -- Name of file
 |     dword size                 -- size of file
 |     FileDateAndTime modified   -- Last date on file
 |     Boolean isDir              -- TRUE if a folder, else FALSE
 |     Boolean *p_keep            -- Set *p_keep to FALSE if you want to
 |                                   reject, else it should be TRUE.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_FILTER(
                          TCHAR *p_filename,
                          dword size,
                          FileDateAndTime modified,
                          Boolean isDir,
                          Boolean *p_keep) ;

        typedef word T_genFileListParts ;
        #define GEN_FILE_LIST_PART_LIST         0x8000
        #define GEN_FILE_LIST_PART_COLUMN_TABS  0X4000
        #define GEN_FILE_LIST_PART_UP_TRIGGER   0x2000
        #define GEN_FILE_LIST_PART_PATH_ENTRY   0x1000
        #define GEN_FILE_LIST_PART_VOLUME_LIST  0x0800
        #define GEN_FILE_LIST_PART_SIZE_TAB     0x0400
        #define GEN_FILE_LIST_PART_MODIFIED_TAB 0x0200
        #define GEN_FILE_LIST_PART_FILTER_LIST  0x0100
        #define GEN_FILE_LIST_PARTS_DEFAULT  \
                   (GEN_FILE_LIST_PART_LIST | \
                    GEN_FILE_LIST_PART_COLUMN_TABS | \
                    GEN_FILE_LIST_PART_UP_TRIGGER | \
                    GEN_FILE_LIST_PART_PATH_ENTRY | \
                    GEN_FILE_LIST_PART_VOLUME_LIST | \
                    GEN_FILE_LIST_PART_SIZE_TAB | \
                    GEN_FILE_LIST_PART_MODIFIED_TAB)

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SET_USABLE_PARTS
 *-------------------------------------------------------------------------
 | Description:
 |     Change the flags by setting and clearing the given parts and then
 |     update the UI.
 | Inputs:
 |     T_genFileListParts partsOn -- UI parts to turn on
 |     T_genFileListParts partsOff -- UI parts to turn off
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SET_USABLE_PARTS(
                          T_genFileListParts partsOn,
                          T_genFileListParts partsOff) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SET_ENABLED_PARTS
 *-------------------------------------------------------------------------
 | Description:
 |     Activate or disactive the parts of the UI and handle immediately.
 | Inputs:
 |     T_genFileListParts partsOn -- UI parts to enable
 |     T_genFileListParts partsOff -- UI parts to disable
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_SET_ENABLED_PARTS(
                          T_genFileListParts partsOn,
                          T_genFileListParts partsOff) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_PARSE_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Given a string, parse it down and return a path handle for this
 |     type of file list.
 | Inputs:
 |     char *p_path               -- Path to parse
 | Outputs:
 |     DirPathHandle           -- Path that was parsed.
 *-----------------------------------------------------------------------*/
        @message DirPathHandle MSG_GEN_FILE_LIST_PARSE_PATH(
                                      char *p_path) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_APPLY_PARSED_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Given a parsed path, apply it to the current path in the file
 |     list.  
 |     This method is the common way to traverse paths.
 | Inputs:
 |     DirPathHandle path      -- Path to apply
 |     Boolean overrideFilter     -- TRUE if given path should be the
 |                                   filter that is used, else FALSE
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_APPLY_PARSED_PATH(
                          DirPathHandle path,
                          Boolean overrideFilter) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CONSTRUCT_PATH_STRING
 *-------------------------------------------------------------------------
 | Description:
 |     Create a string out of the parsed path stored in the file list.
 |     (in the format expected for the file list)
 | Inputs:
 |     char *p_path               -- Place to store constructed string
 |     word maxPathSize           -- Limit on given p_path.
 |     Boolean addVolume          -- TRUE if volume should be included
 |     Boolean addFilter          -- TRUE if filter should be appended
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CONSTRUCT_PATH_STRING(
                          TCHAR *p_path,
                          word maxPathSize,
                          Boolean addVolume,
                          Boolean addFilter) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_IS_STRING_FILTER
 *-------------------------------------------------------------------------
 | Description:
 |     Checks a string to see if it is a filter for this file list.
 |     Usually intercepted in sub-classes with new filter types.
 | Inputs:
 |     optr string                -- String to check.
 *-----------------------------------------------------------------------*/
        @message Boolean MSG_GEN_FILE_LIST_IS_STRING_FILTER(optr string) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CONDENSE_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Go through the path in the file list and get rid of all 'up' path
 |     references to 'condense' the path.  
 |     Also gets rid of any references to the self (like a '.' directory reference).
 |     Usually subclassed by file lists with different file path setups.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_CONDENSE_PATH(
                          DirPathHandle path) ;
 
/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_VALIDATE_PATH
 *-------------------------------------------------------------------------
 | Description:
 |    This method is given a parsed path.  The method's job is to check
 |    that the path is correct and if so, call ACCEPT_DENY or DENY_PATH.
 |    Either one MUST be called.
 |    This method is usally handled by the sub-class.
 |    The current default is always to accept.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_VALIDATE_PATH(
                          DirPathHandle path) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_ACCEPT_PATH
 *-------------------------------------------------------------------------
 | Description:
 |    A parsed path has been created, applied, validated, and now
 |    accepted.  We are now ready to destroy the old path, keep this path,
 |    and reload to the new file list.
 | Inputs:
 |    DirPathHandle path       -- Path being accepted
 |    T_volumeID volume           -- Volume to use
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_ACCEPT_PATH(
                          DirPathHandle path, 
                          T_volumeID volume) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_DENY_PATH
 *-------------------------------------------------------------------------
 | Description:
 |    The path has been declared 'bad' and needs to be denied.
 |    Destroy the path as the default action.
 | Inputs:
 |    DirPathHandle path       -- Path being denyed
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_DENY_PATH(DirPathHandle path) ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_UPDATE_FOCUS
 *-------------------------------------------------------------------------
 | Description:
 |    Return the focus to the last focused item.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_UPDATE_FOCUS() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_MARK_RELOAD_STARTED
 *-------------------------------------------------------------------------
 | Description:
 |    Message to mark the GenFileList as reloading.
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_MARK_RELOAD_STARTED() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_MARK_RELOAD_ENDED
 *-------------------------------------------------------------------------
 | Description:
 |    Message to mark the GenFileList as done reloading
 *-----------------------------------------------------------------------*/
        @message void MSG_GEN_FILE_LIST_MARK_RELOAD_ENDED() ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_IS_RELOADING
 *-------------------------------------------------------------------------
 | Description:
 |    Message to determine if reloading
 *-----------------------------------------------------------------------*/
        @message Boolean MSG_GEN_FILE_LIST_IS_RELOADING() ;

        typedef word GenFileListError ;
        #define GEN_FILE_LIST_ERROR_NONE               0
        #define GEN_FILE_LIST_ERROR_BAD_PATH           1
        #define GEN_FILE_LIST_ERROR_BAD_VOLUME         2
        #define GEN_FILE_LIST_ERROR_DRIVE_NOT_READY    3
        #define GEN_FILE_LIST_ERROR_UNKNOWN            4

        @message void MSG_GEN_FILE_LIST_REPORT_STANDARD_ERROR(
                          GenFileListError error, 
                          optr string) ;
                
        /* ----------------------------------------------------- */
        /* Vardata elements                                      */
        /* ----------------------------------------------------- */
        @vardata void HINT_GEN_FILE_LIST_MULTIPLE_SELECTION ;
        @vardata void HINT_GEN_FILE_LIST_ALWAYS_SHOW_FULL_PATH ;

        @instance T_volumeID GFLI_volume = VOLUME_ID_BAD ;
        @instance T_fileListField GFLI_sortField = FILE_LIST_FIELD_FILENAME ;
        @instance Boolean GFLI_sortOrder = FALSE ;
        @instance MemHandle GFLI_uiBlock = NullHandle ;
        @instance MemHandle GFLI_dataBlock = NullHandle ;
        @instance ChunkHandle GFLI_orderList = NullHandle ;
        @instance ChunkHandle GFLI_list = NullHandle ;
        @instance optr GFLI_volumeList = NullHandle ;

        @instance T_genFileListParts GFLI_usableParts = 
                                        GEN_FILE_LIST_PARTS_DEFAULT ;
        @instance T_genFileListParts GFLI_enabledParts = 
                                        GEN_FILE_LIST_PARTS_DEFAULT ;
        @instance T_genFileListSuspendFlags GFLI_suspendFlags = 0 ;
        @instance char GFLI_parseDivider = '\\' ;
        @instance char GFLI_parseVolume = ':' ;
        @instance char GFLI_parseRoot = '\\' ;
        @instance optr GFLI_parsedPath = NullHandle ;
        @instance optr GFLI_lastFocus = NullHandle ;

        typedef word T_genFileListSuspendFlags ;
        #define GEN_FILE_LIST_SUSPEND_FLAG_CHANGED_COUNT 0x8000
        #define GEN_FILE_LIST_SUSPEND_RELOAD_PENDING     0x4000
        #define GEN_FILE_LIST_RELOAD_STARTED             0x2000

        @instance word GFLI_suspendCount = 0 ;


        /* ----------------------------------------------------- */
        /* Intercepted messages (for support and reference)      */
        /* ----------------------------------------------------- */

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_META_UNSUSPEND
 *-------------------------------------------------------------------------
 | Description:
 |     Allow all the changes to the file list to be updated.  In 
 |     particular, we now change the number of items in the dynamic list.
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_META_SUSPEND
 *-------------------------------------------------------------------------
 | Description:
 |     Mark the object as suspended to keep changes from occuring on the
 |     UI object.
 *-----------------------------------------------------------------------*/
    @endc
    /*---------------------------------------------------------------------*/


    /*---------------------------------------------------------------------*/
    @class GenLocalFileListClass, GenFileListClass ;
        @reserveMessages 16 ;
        @message DiskHandle MSG_GEN_LOCAL_FILE_LIST_GET_DISK_HANDLE() ;
    @endc
    /*---------------------------------------------------------------------*/

@endif /* _FILE_LIST_GOH_ */

/***************************************************************************
 *  END OF FILE:  FileList.goh
 ***************************************************************************/

