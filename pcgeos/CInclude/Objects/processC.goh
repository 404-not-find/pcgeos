/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	processC.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	Kernel
 *
 * DESCRIPTION:
 *	This file defines ProcessClass
 *
 *      $Id: processC.goh,v 1.1 97/04/04 15:52:18 newdeal Exp $
 *
 ***********************************************************************/
@optimize
@deflib ui

@include <Objects/metaC.goh>

@class	ProcessClass, MetaClass;

@message void MSG_PROCESS_NOTIFY_PROCESS_EXIT(GeodeHandle exitProcess = cx,
				      word exitCode = dx);

@message void MSG_PROCESS_NOTIFY_THREAD_EXIT(ThreadHandle exitProcess = cx,
				     word exitCode = dx);

@message void MSG_PROCESS_MEM_FULL(word type = cx);

@message Boolean MSG_PROCESS_CREATE_UI_THREAD(
			ThreadHandle*	newThread = multipleax,
			ClassStruct*	class = cx:dx,
			word		stackSize = bp) = carry;

@message Boolean MSG_PROCESS_CREATE_EVENT_THREAD(
			ThreadHandle*	newThread = multipleax,
			ClassStruct*	class = cx:dx,
			word		stackSize = bp) = carry;

/*
 *		INTERNAL methods
 */

@message void MSG_PROCESS_INSTANTIATE();	/* INTERNAL */
@message void MSG_PROCESS_EXIT();		/* INTERNAL */

@message Boolean MSG_PROCESS_STARTUP_UI_THREAD() = carry;	/* XXX */

@message void MSG_PROCESS_COPY_CHUNK_IN();	/* XXX */
	/* do not use above, use one of these aliases: */
    @alias (MSG_PROCESS_COPY_CHUNK_IN) ChunkHandle MSG_PROCESS_COPY_CHUNK_IN_FROM_OPTR(@stack MemHandle destBlock, optr source, CopyChunkFlags copyFlags) = ax;
    @alias (MSG_PROCESS_COPY_CHUNK_IN) ChunkHandle MSG_PROCESS_COPY_CHUNK_IN_FROM_FPTR(@stack MemHandle destBlock, void *source, CopyChunkFlags copyFlags) = ax;
    @alias (MSG_PROCESS_COPY_CHUNK_IN) ChunkHandle MSG_PROCESS_COPY_CHUNK_IN_FROM_HPTR(@stack MemHandle destBlock, word srcBlockOffset, MemHandle srcBlock, CopyChunkFlags copyFlags) = ax;

/* macro to extract ChunkHandle and size from return value of the
   following COPY_CHUNK messages */
#define COPY_CHUNK_DWORD_TO_CHUNK(dw) 	((ChunkHandle) ((dw) & 0xffff))
#define COPY_CHUNK_DWORD_TO_SIZE(dw) 	((word) ((dw) >> 16))

@message void MSG_PROCESS_COPY_CHUNK_OVER();	/* XXX */
	/* do not use above, use one of these aliases: */
    @alias (MSG_PROCESS_COPY_CHUNK_OVER) dword MSG_PROCESS_COPY_CHUNK_OVER_OPTR(@stack optr dest, optr source, CopyChunkFlags copyFlags) = cx:ax;
    @alias (MSG_PROCESS_COPY_CHUNK_OVER) dword MSG_PROCESS_COPY_CHUNK_OVER_FPTR(@stack optr dest, void *source, CopyChunkFlags copyFlags) = cx:ax;
    @alias (MSG_PROCESS_COPY_CHUNK_OVER) dword MSG_PROCESS_COPY_CHUNK_OVER_HPTR(@stack optr dest, word srcBlockOffset, MemHandle srcBlock, CopyChunkFlags copyFlags) = cx:ax;

@message void MSG_PROCESS_COPY_CHUNK_OUT();	/* XXX */
	/* do not use above, use one of these aliases: */
    @alias (MSG_PROCESS_COPY_CHUNK_OUT) dword MSG_PROCESS_COPY_CHUNK_OUT_TO_OPTR(@stack optr dest, optr source, CopyChunkFlags copyFlags) = cx:ax;
    @alias (MSG_PROCESS_COPY_CHUNK_OUT) dword MSG_PROCESS_COPY_CHUNK_OUT_TO_FPTR(@stack void *dest, optr source, CopyChunkFlags copyFlags) = cx:ax;
    @alias (MSG_PROCESS_COPY_CHUNK_OUT) dword MSG_PROCESS_COPY_CHUNK_OUT_TO_HPTR(@stack word destBlockOffset, MemHandle destBlock, optr source, CopyChunkFlags copyFlags) = cx:ax;

@message void MSG_PROCESS_FLUSH_PROCESS_QUEUE(); /* XXX */

@message void MSG_PROCESS_FINAL_BLOCK_FREE(Handle block = cx);	/* XXX */

@message void MSG_PROCESS_CALL_ROUTINE(@stack word dataDI, word dataSI, word dataDX, word dataCX, word dataBX, word dataAX, void (*routine)());

@protominor KernelNewForZoomer

/*
 *	NOTE: You will need to construct an optr with the low word being
 *	      the handle of the owning geode to use this method:
 *
 *	    @send ConstructOptr(GeodeGetProcessHandle(),handleOfOwningGeode),
 *	    	MSG_PROCESS_CREATE_EVENT_THREAD_WITH_OWNER(...); 
 */
@message void MSG_PROCESS_CREATE_EVENT_THREAD_WITH_OWNER(
			ThreadHandle*	newThread = multipleax,
			ClassStruct*	class = cx:dx,
			word		stackSize = bp) = carry;

@protominor DiscardObjBlock
    
@message void MSG_PROCESS_OBJ_BLOCK_DISCARD(MemHandle block = cx);

@protominor InstantiateForThread

@message void MSG_PROCESS_INSTANTIATE_FOR_THREAD();	/* INTERNAL */

@protoreset

@endc

/*
 * Constants and Structures for copy chunk routines
 */

typedef ByteEnum CopyChunkMode;
#define CCM_OPTR 0
#define CCM_HPTR 1
#define CCM_FPTR 2
#define CCM_STRING 3

typedef WordFlags CopyChunkFlags;
#define CCF_DIRTY	0x8000
#define CCF_MODE	0x6000
#define CCF_SIZE	0x1fff
#define CCF_MODE_OFFSET	13

@endlib

