
/******************************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	Include Files
 * MODULE:	IACP Specification
 * FILE:	iacp.goh
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	10/12/92	Initial revision
 *
 *
 * DESCRIPTION:
 *	Definition of IACP structures, constants and routines
 *		
 *	$Id: iacp.goh,v 1.1 97/04/04 15:57:35 newdeal Exp $
 *
 ******************************************************************************/
@optimize

@deflib	ui

/******************************************************************************
 *
 *		       Data Types and Constants
 *
 ******************************************************************************/

/*
 * The data type used to identify an active IACP connection.
 */ 
typedef word IACPConnection;

#define IACP_NO_CONNECTION 	0	/* Returned by IACPConnect if it is
					 *  unable to establish a connection */

/*
 * The mode in which an IACP server is operating. A user-interactible server
 * is expected to cope with messages addressed to a non-user-interactible
 * server, but the reverse is not true.
 */
typedef ByteEnum IACPServerMode;
#define IACPSM_NOT_USER_INTERACTIBLE	0
#define IACPSM_IN_FLUX	    	    	1
#define IACPSM_USER_INTERACTIBLE    	2

typedef ByteFlags IACPServerFlags;
#define    IACPSF_MULTIPLE_INSTANCES 	0x80
    /* Set if application may have multiple instances of itself launched */
#define	   IACPSF_MAILBOX_DONT_NOTIFY_USER 0x40
    /* Set if application should be immediately sent all new messages when it's
     * running in the foreground. */

typedef WordFlags IACPConnectFlags;	/* Flags to pass to IACPConnect */
#define IACPCF_OBEY_LAUNCH_MODEL	0x0020
    /* Set if IACP should obey any launch model for the field that would cause
     * it to ask the user whether an existing server should be used, or a new
     * one started. AppLaunchBlock must be passed w/ALB_appMode set to
     * OPEN_APPLICATION and IACPCF_SERVER_MODE set to IACPSM_USER_INTERACTIBLE.
     */
#define IACPCF_CLIENT_OD_SPECIFIED	0x0010
    /* Set to indicate ^lcx:dx contains client OD for the IACP connection. If
     * not set, the client OD is set to the application object of the process on
     * whose thread the IACPConnect call is made.*/

#define IACPCF_FIRST_ONLY		0x0008
    /* Set to connect only to the first server on the list, else connects to
     * all of them. */

#define IACPCF_SERVER_MODE  	    	0x0007
    /* Mode in which server is expected to be operating (IACPSM_IN_FLUX not
     * allowed). Higher-numbered modes are expected to support requests for
     * lower-numbered modes. */

#define IACPCF_SERVER_MODE_OFFSET	0

typedef enum {				/* Specify which side of an IACP
					 *  connection is sending a message
					 *  via IACPSendMessage */
    IACPS_CLIENT,
    IACPS_SERVER
} IACPSide;

/*
 * Reason an IACPConnect failed. Note that if no server exists, and the
 * caller passed an AppLaunchBlock, and IACP was unable to load the server,
 * it will return a GeodeLoadError (defined in geode.def). IACPConnectError
 * codes purposely start after the highest GeodeLoadError
 */ 
typedef enum {
    IACPCE_CANNOT_FIND_SERVER=GLE_LAST_GEODE_LOAD_ERROR,
    /* asked to start server w/o specifying location of app, and IACP was
     * unable to find an application with the same token as the list. */

    IACPCE_NO_SERVER
    /* didn't ask IACP to start server, and no server is registered for the 
     * list. */
} IACPConnectError;

/******************************************************************************
 * 
 *			Imported MetaMessages
 *
 ******************************************************************************/

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_PROCESS_MESSAGE(EventHandle msgToSend = cx,
						  TravelOption topt = dx,
						  EventHandle completionMsg=bp);
/* Dispatch an IACP message to its rightful destination, sending the
 * passed completion message back when that has finished.
 *
 * Context:	This is sent by the IACP system to get the processing
 *		of the two recorded messages to happen on someone else's
 *		time.
 * Source:	IACPSendMessage
 * Destination: Any object registered as an IACP server, or the GenApplication
 *		object of a geode who is a client of such.
 * Interception:If you have an object other than GenApplication that is an
 *		IACP server, you will need to intercept this message. You
 *		do not need to pass it to the superclass. Usually you will
 *		just want to call IACPProcessMessage.
 *
 * Pass:
 *		msgToSend = handle of recorded message the other side of the
 *			    connection is actually sending.
 *		topt = TravelOption or -1. If -1, msgToSend should be
 *		       dispatched via MessageDispatch, else it should be
 *		       delivered by sending MSG_META_SEND_CLASSED_EVENT to
 *		       yourself.
 *		completionMsg = handle of recorded message to send when the
 *				message in msgToSend has been handled. If 0,
 *				then there's no completion message to send.
 * Return:
 *		nothing
 */

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_NEW_CONNECTION(MemHandle appLaunchBlock=cx,
						 Boolean justLaunched=dx,
						 IACPConnection connection=bp);
/* Take note that another client has connected to you.
 *
 * Context:	Sent by the IACP system to every server to which a client
 *		connects when it calls IACPConnect
 * Source:	IACPConnect
 * Destination: Any object registered as an IACP server.
 * Interception:Must be intercepted if you want to do anything about receiving
 *		a new client, as there is no default handler for this message.
 *		If you don't intercept it, no harm done.
 *
 * Pass:
 *		appLaunchBlock = handle of AppLaunchBlock passed to
 *				 IACPConnect. DO NOT FREE THIS BLOCK.
 *		justLaunched = non-zero if recipient was just launched (i.e.
 *			       it received the AppLaunchBlock in its
 *			       MSG_META_ATTACH call)
 *		connection = IACPConnection that is now open.
 *
 * Return:
 *		nothing
 */

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_LOST_CONNECTION(IACPConnection connection=bp,
						  word serverNum = cx);
						  
/* Take note that one of your clients has shutdown.
 *
 * Context:	Sent by the IACP system to the other side of a connection
 *		when one side shuts down.
 * Source:	IACPShutdown
 * Destination: Any object registered as an IACP server, or the GenApplication
 *		object of a geode who is a client of such.
 * Interception:Must be intercepted if you want to do anything about losing
 *		a client or server, as there is no default handler for this
 *		message. IACPLostConnection is a good routine for servers
 *		to call (and is called by GenApplication, for example) to ensure
 *		that connections don't hang around too long after the client
 *		has shut down its side.
 *
 * Pass:
 *		serverNum = server number that shut down, or 0 if it was
 *			    the client that shut down (and thus it's a server
 *			    object that's receiving this message).
 *		connection = IACPConnection being closed
 * Return:
 *		nothing
 */

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_SHUTDOWN_CONNECTION(IACPConnection connection=bp);
/* Shutdown the appropriate side of the indicated connection.
 *
 * Context:	Sent to server object after all relevant queues have been
 *		flushed following a call to IACPLostConnection.
 * Source:	IACPLostConnection, after a delay
 * Destination: Any IACP server object
 * Interception:Must be intercepted to finish the work of the call to
 *		IACPLostConnection. Call IACPShutdownConnection to
 *		get default handling of this message.
 *
 * Pass:
 *		connection = IACPConnection to shutdown
 * Return:
 *		nothing
 */

typedef struct {
    optr    	    IDOAP_docObj;	/* optr of the document object managing
					 *  the document */
    IACPConnection  IDOAP_connection;	/* connection over which open request
					 *  was received */
    word    	    IDOAP_serverNum;	/* server number the document object's
					 *  GenApplication object is for that
					 *  connection (0 if connection goes
					 *  through some other object) */
} IACPDocOpenAckParams;

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_DOC_OPEN_ACK(IACPDocOpenAckParams *params=ss:bp);
/* The document passed in the AppLaunchBlock when the IACP connection was
 * made has been opened. The optr of the GenDocument object managing the
 * document is passed so messages can be sent to it explicitly, though
 * these messages must always be sent via IACP (with a TravelOption of -1),
 * not using ObjMessage, to deal with the application being able to exit at
 * any time.
 *
 * Context:	Sent to the client of a new IACP connection if a document
 * 		was passed in the AppLaunchBlock.
 * Source:	GenDocumentGroup
 * Destination:	IACP client (usually the GenApplication object of client app)
 * Interception:No default handler defined.
 *
 * Pass:
 * 		params->IDOAP_docObj	= optr of GenDocument object
 * 		params->IDOAP_connection = IACPConnection that requested the
 *					   open
 *		params->IDOAP_serverNum = server number of the GenDocument 
 *					  object's GenApplication object
 *					  for that connection. 0 if the
 *					  GenApplication object isn't actually
 *					  a server for that connection.
 * Return:
 * 		nothing
 */

typedef struct {
    optr	    IDCAP_docObj;	/* optr of the document object that was
					 * managing the document */
    IACPConnection  IDCAP_connection;	/* connection that requested the close
					 */
    word    	    IDCAP_serverNum;	/* server number the document object's
					 * GenApplication object is for that
					 * connection (0 if connection goes
					 * through some other object) */
    word    	    IDCAP_status;   	/* DocQuitStatus (gDocGrpC.goh) for
					 * the close. */
} IACPDocCloseAckParams;

@importMessage MetaIACPMessages,
		void MSG_META_IACP_DOC_CLOSE_ACK(IACPDocCloseAckParams *params=ss:bp);
/* This is the acknowledgement sent by GenDocument after processing
 * MSG_GEN_DOCUMENT_CLOSE telling if the close was successful. Documents opened
 * via IACP always operate in transparent mode, meaning if you close a dirty
 * document, it will be saved. If you don't want the changes saved, you
 * will have to send a message to revert the document.
 *
 * Context:	    Sent by GenDocument after processing MSG_GEN_DOCUMENT_CLOSE
 * Source:	    GenDocumentClass
 * Destination:     IACP client
 * Interception:    No default handler defined.
 *
 * Pass:
 * 		params->IDCAP_docObj	= optr of GenDocument object (for
 *					  identification purposes only, as
 *					  object may already be gone by the
 *					  time you receive this message)
 * 		params->IDCAP_connection = IACPConnection that requested the
 *					   close
 *		params->IDCAP_serverNum = server number of the GenDocument 
 *					  object's GenApplication object
 *					  for that connection. 0 if the
 *					  GenApplication object isn't actually
 *					  a server for that connection.
 *	    	params->IDCAP_status	= result of the close. Usually DQS_OK.
 * Return:
 *		nothing
 */


@importMessage MetaIACPMessages,
	       void MSG_META_IACP_ALLOW_FILE_ACCESS(IACPConnection connection=bp);
/*
 * This message is sent to the server of a file (as registered via
 * IACPRegisterDocument) when a client to a connection established via
 * IACPConnectToDocumentServer needs access to access the file being served
 * (e.g., do a FileOpen on it, denying read/write privilege to others).
 * The recipient of this message should do its best to release its grip on
 * the file in question (the 48-bit unique file identifier can be obtained
 * by passing the IACPConnection to IACPGetDocumentConnectionFileID) until
 * it receives notification that the client is finished with the file via
 * MSG_META_IACP_NOTIFY_FILE_ACCESS_FINISHED.
 *
 * Context:	Sent to server object by client requesting exclusive
 *		access to a file.
 * Source:	IACPSendMessage
 * Destination:  IACP server
 * Interception: The default GenApplicationClass behavior for this message is
 * 		to check for HINT_APPLICATION_QUIT_ON_IACP_ALLOW_FILE_ACCESS,
 *		and send itself a MSG_META_DETACH, if found. If not found,
 *		GenApplicationClass will send a MSG_GEN_DOCUMENT_CLOSE_FILE
 *		to its model exclusive. Applications which register as servers
 *		of files which are not governed by a GenDocument, and which
 *		don't wish to detach when they receive this message, should
 *		intercept this message to close the file in question.
 */

@importMessage MetaIACPMessages,
	       void MSG_META_IACP_NOTIFY_FILE_ACCESS_FINISHED(IACPConnection connection=bp);
/*
 * This message is sent to the server of a file (as registered via
 * IACPRegisterDocument) when a client to a connection established via
 * IACPConnectToDocumentServer has released its hold on the file in question,
 * to inform the server that it may reopen the file. The 48-bit unique file
 * identifier can be obtained by passing the IACPConnection to
 * IACPGetDocumentConnectionFileID, but note that there is no direct way
 * to map the unique identifier to a path and filename, as such that you
 * might pass to FileOpen, VMOpen, et. al., so the server object may need
 * to maintain a record of which file identifiers are associated with which
 * filenames if there's to be any question about which is which.
 *
 * Context:	Sent to server object by client to inform the server that
 *		it may reopen the file in question, if desired.
 * Source:	IACPSendMessage
 * Destination:  IACP server
 * Interception: The default GenApplicationClass behavior for this message is
 * 		to check for HINT_APPLICATION_QUIT_ON_IACP_ALLOW_FILE_ACCESS,
 *		and do nothing, if found. If not found,	GenApplicationClass
 *		will send a MSG_GEN_DOCUMENT_REOPEN_FILE to its model
 *		exclusive. Applications which register as servers
 *		of files which are not governed by a GenDocument, and which
 *		don't wish to detach when they receive this message, should
 *		intercept this message to reopen the file in question.
 */

@importMessage MetaIACPMessages,
		void MSG_META_IACP_DATA_EXCHANGE(IACPConnection connection=bp,
							dword info=cx:dx);
/*
 * This message is sent to an application when they are being requested for a 
 * data pipe.  See the Data Exchange Library or the Hilton tech spec for
 * details.
 *
 */

/******************************************************************************
 *
 *			  Exported Routines
 *
 ******************************************************************************/

extern void
    _pascal IACPRegisterServer(GeodeToken *list, optr server,
			       IACPServerMode mode,
			       IACPServerFlags flags);

extern void
    _pascal IACPUnregisterServer(GeodeToken *list, optr server);

extern void
    _pascal IACPRegisterDocument(optr server, word disk, dword fileID);

extern void
    _pascal IACPUnregisterDocument(optr server, word disk, dword fileID);

extern IACPConnection
    _pascal IACPConnect(GeodeToken *list,
		IACPConnectFlags flags,
		MemHandle appLaunchBlock,
		optr client,
		word *numServersPtr);

extern IACPConnection
    _pascal IACPConnectToDocumentServer(const char _far *pathname,
					const char _far *filename,
					DiskHandle disk,
					IACPConnectFlags flags,
					optr client);


extern void
    _pascal IACPFinishConnect(IACPConnection connection, optr server);

extern word
    _pascal IACPSendMessage(IACPConnection connection,
		    EventHandle msgToSend,
		    TravelOption topt,	
		    EventHandle completionMsg,
		    IACPSide side);

extern word
    _pascal IACPSendMessageAndWait(IACPConnection connection,
		    EventHandle msgToSend,
		    TravelOption topt,	
		    IACPSide side);

extern word
    _pascal IACPSendMessageToServer(IACPConnection connection,
		    EventHandle msgToSend,
		    TravelOption topt,
		    EventHandle completionMsg,
		    word serverNum);
extern void
    _pascal IACPShutdown(IACPConnection connection, optr server);

extern void
    _pascal IACPShutdownAll(optr obj);

extern dword
    _pascal IACPGetDocumentID(const char _far *pathname,
			      const char _far *filename,
			      DiskHandle *disk);

/*
 * Not yet ready for prime-time.
 *
 * extern Boolean
 *    _pascal IACPGetDocumentConnectionFileID(IACPConnection connection,
 *					    DiskHandle *disk,
 *					    dword *fileID);
 */

extern void
    _pascal IACPProcessMessage(optr oself,
			       EventHandle msgToSend,
			       TravelOption topt,
			       EventHandle completionMsg);

extern void
    _pascal IACPLostConnection(optr oself, IACPConnection connection);

extern MemHandle
    _pascal IACPCreateDefaultLaunchBlock(word appMode);

extern word
    _pascal IACPGetServerNumber(IACPConnection connection, optr server);

extern MemHandle
    _pascal IACPLocateServer(const GeodeToken *token);

extern void
    _pascal IACPBindToken(const GeodeToken *token, const char *appPath);

extern void
    _pascal IACPUnbindToken(const GeodeToken *token);

#ifdef __HIGHC__

pragma Alias(IACPRegisterServer,           "IACPREGISTERSERVER");
pragma Alias(IACPUnregisterServer,         "IACPUNREGISTERSERVER");
pragma Alias(IACPConnect,                  "IACPCONNECT");
pragma Alias(IACPConnectToDocumentServer,  "IACPCONNECTTODOCUMENTSERVER");
pragma Alias(IACPSendMessage,              "IACPSENDMESSAGE");
pragma Alias(IACPSendMessageToServer,	   "IACPSENDMESSAGETOSERVER");
pragma Alias(IACPSendMessageAndWait,       "IACPSENDMESSAGEANDWAIT");
pragma Alias(IACPShutdown,                 "IACPSHUTDOWN");
pragma Alias(IACPShutdownAll,              "IACPSHUTDOWNALL");
pragma Alias(IACPGetDocumentID,            "IACPGETDOCUMENTID");
/*
pragma Alias(IACPGetDocumentConnectionFileID, "IACPGETDOCUMENTCONNECTIONFILEID");
*/
pragma Alias(IACPProcessMessage,           "IACPPROCESSMESSAGE");
pragma Alias(IACPLostConnection,           "IACPLOSTCONNECTION");
pragma Alias(IACPCreateDefaultLaunchBlock, "IACPCREATEDEFAULTLAUNCHBLOCK");
pragma Alias(IACPGetServerNumber,	   "IACPGETSERVERNUMBER");
pragma Alias(IACPRegisterDocument,  	   "IACPREGISTERDOCUMENT");
pragma Alias(IACPUnregisterDocument,  	   "IACPUNREGISTERDOCUMENT");
pragma Alias(IACPFinishConnect,		   "IACPFINISHCONNECT");
pragma Alias(IACPLocateServer,		   "IACPLOCATESERVER");
pragma Alias(IACPBindToken,		   "IACPBINDTOKEN");
pragma Alias(IACPUnbindToken,		   "IACPUNBINDTOKEN");
#endif

@endlib


