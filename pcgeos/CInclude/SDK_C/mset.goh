/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		mset.goh

AUTHOR:		Paul DuBois, Aug  3, 1993

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	8/ 3/93   	Initial version

DESCRIPTION:
	Structures and definitions for the Mandelbrot Set library.

	NOTE:
	If any changes are made, make sure they are reflected in the .def
	file used by the assembly calculation routines!
	(pcgeos\Library\SDK_C\MSet\mset.def)

	$Id: mset.goh,v 1.1 97/04/04 16:13:17 newdeal Exp $



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@optimize

#include <geos.h>
#include <thread.h>

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

			MSet Library
		MSetClass
		MSetCalcClass
		MSetColorControlClass
		MSetPrecisionControlClass

Contents
--------
	Contents
	Synopsis
	Terminology
	Limitations
	How to use
	Exported functions
	The rest of this file

Synopsis
--------

	The MSet library was designed to allow users to view and
	interactively explore the Mandelbrot set.  MSet objects are
	controller-aware (two controllers are included in this release) and
	spawn off their own thread to perform their calculations.  The MSet
	object supports zooming in and out, changing color schemes and
	calculation precision, and saving and restoring themselves from
	disk.

	MSetClass is a direct subclass of VisClass.  It subclasses these
	messages:

		    MSG_VIS_DRAW
		    MSG_VIS_SET_SIZE
		    MSG_META_DETACH
		    MSG_META_START_SELECT
		    MSG_META_GAINED_TARGET_EXCL
		    MSG_META_LOST_TARGET_EXCL

	The MSet uses a VM file provided by the user of the object to store
	its data.  Upon receiving the VM file, the MSet spawns off an
	event-driven thread to calculate the points in the Mandelbrot set.
	Clicking the MSet with the Select mouse button will select the point
	that will be used to zoom in on.  Double-clicking the Select button
	will actually zoom on the selected point.

	The MSet library comes with two controllers: one for setting the
	precision which will be used in the calculations, and one for
	changing the color schemes.

Terminology
-----------
	Mandelbrot Set --
		This explanation is not necessary to use the MSet object,
		but it might make things a bit clearer.

		The Mandelbrot set is calculated by taking a point C on the
		complex plane and performing the following iteration:

			Z[0]	:= (0,0)
			Z[i+1]	:= Z[i]^2 + C

		until |Z| (magnitude of Z, or the distance from the origin)
		is greater than the "escape radius" (usually 2).

		The value of i for which Z finally strays beyond the escape
		radius is called the "dwell" of that point, the analogy
		being that the point hangs around ("dwells in") the general
		vicinity of the origin for that many iterations.

		The set of points which always stay within the escape radius
		is called the Mandelbrot set after Benoit Mandelbrot, who
		popularized the famous bug-like image.  These points are
		said to have a dwell of infinity.

		From a practical standpoint, we always implement a cut-off
		point for the number of iterations.  The further one zooms
		in, the higher the cut-off needs to be to generate nice
		images; however, a maximum of 50-200 is usually quite
		sufficient for initial viewing.

		If some of the above escaped you, don't worry.  The main
		thing to remember is that each point has an associated
		dwell.  The higher the dwell, the longer it takes to
		calculate.  Because of this, we impose an arbitrary cut-off
		point which we use to stop calculations on points with very
		large (or infinite) dwells.

	Count --
		A synonym for dwell

	Color Scheme --
		This is the term used for a mapping between a point's dwell
		and a color.  By convention, points with dwells greater than
		or equal to the cut-off are assigned the color black.

	Calculation Thread --
		This is the event-driven thread which performs the
		iterations.  Usually, its existence can be ignored by the
		client of the MSet.  Its default priority is low so as not
		to impair the performance of other applications.  However,
		the MSet object defines the message MSG_MSET_SET_PRIORITY,
		should you ever wish to change it.

	Resolution --
		Each pixel on the screen represents a point on the
		complex plane.  The distance between the two points
		represented by two adjacent pixels is the resolution.  The
		MSet has both a horizontal and vertical resolution, although
		in practice the two are almost always equal.

	Precision --
		By default, the calculations use 16-bit fixed point
		arithmetic -- 4 bits of integer, and 12 bits of fraction.
		Once you start zooming in further, 12 bits won't be enough.
		Therefore, the MSet also supports 48-bit fixed-point
		arithmetic (4 bits integer, 44 bits fraction).

	Parameters Block --
		The MSet has very little instance data; most of the fields
		the MSet uses are stored in a struct MSetParameters, which
		resides in its own block.  This block is usually referred to
		as the parameters block.  Following this struct in the
		parameters block is an array of VMBlockHandles; these are
		the blocks which actually contain the calculated dwell
		values.

Limitations
-----------
	There is no provision for the MSet allocating a VM file for its own
	use; it must be provided by the application.
	
	The precision does not change automatically from 16 to 48 bits.  If
	you find that after a zoom the screen is filled with just one color,
	try switching to 48 bit precision.
	
	Resizing is clunky -- the MSet will always resize itself back to the
	default (100x100) when initialized.  This behavior will probably be
	changed in the future.

	Many MSG_MSET_SET... messages pause the calculation thread, and
	re-start it when they are done modifying the affected parameters.
	However, they re-start the thread regardless of whether or not it
	was already paused.  This will most likely change in the future;
	paused threads will remain paused.

How to use the MSet
-------------------
	Where to put the object --
		To use an MSet object, find a place for it in your Vis
		hierarchy; treat it like any other Vis object.  If you
		specify bounds for it, note that they will be altered upon
		initialization.  You should send MSet a MSG_MSET_INITIALIZE
		as soon as possible; an uninitialized MSet is pretty
		useless.

	Initializing a new MSet --
		If you're not opening up an old data file, pass
		MSG_MSET_INITIALIZE a valid VMFileHandle and a NULL
		VMBlockHandle.  The message handler will allocate an
		MSetParameters block and return its VMBlockHandle.  You will
		probably want to save this handle somewhere in the VM file
		for later use, if you wish to be able to re-use the MSet's
		stored data.

		Initializing the MSet spawns off a calculation thread.
		However, the thread will not actually begin calculating
		until you send the MSet a MSG_MSET_CONTINUE_CALCULATION.
		This is a convenient point to send a MSG_VIS_SET_SIZE.

	Initializing an MSet with a saved MSet file --
		Open up the VM file and extract the VMBlockHandle of the
		parameters block.  Pass MSG_MSET_INITIALIZE both of these
		values.

	Re-initializing an MSet --
		If you wish to re-initialize an MSet object, first send it a
		MSG_MSET_STOP_CALCULATION, which effectively
		"un-initializes" the MSet.

	Pausing/Continuing the thread --
		Many VM File functions (VMSave being a notable one) will not
		work if a block in that file is being locked by another
		thread.  Since the calculation thread will almost always
		have a block locked, you should use the
		MSG_MSET_PAUSE_CALCULATION message before calling any of
		these routines.  This is probably the only time you'll need
		to explicitly pause or continue the thread.

	Setting parameters --
		May MSG_MSET_SET... methods cause the calculation thread to
		start over from scratch; if they do, they will say so in the
		@message comment headers (in msetC.goh).

	Using the provided controllers --
		The controllers operate on the designated target.  All you
		need to do is drop the controllers into your UI, and have
		some mechanism for giving your MSets the target exclusive.
	
Exported functions
------------------

[see bottom of this file for function prototypes.
 FixNums are defined later in this file]

extern void _far _pascal
    FixNumUMult(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumUMultTimes2(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumAdd(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumSub(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumToAscii(FixNum _far* num, char _far* buffer, word bufSiz);

FixNumUMult		-- Multiply two FixNums
FixNumUMultTimes2	-- Multiply two FixNums, then double the result
FixNumAdd		-- Add two FixNums
FixNumSub		-- Subtract two FixNums
FixNumToAscii		-- Convert a FixNum to an ascii string.

The rest of this file
---------------------

    To use the MSet library, you do not need to be familiar with the
    contents of the rest of this file.  However, it would be useful if you
    wish to subclass any of the classes in the library.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  		Enumerated types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * Floating-point is not currently supported
 */
typedef enum
{
    MSP_16BIT		= 0x04,	/* 16-bit fixed-point */
    MSP_48BIT		= 0x02,	/* 48-bit fixed-point */
    MSP_FLOATING	= 0x01,	/* FPU-supported floating-point */
} MSetPrecision;

typedef enum
{
    MSC_COUNT		= 0x10,	/* Use low 4 bits of dwell */
    MSC_BRIGHT		= 0x08,	/* Use bright colors */
    MSC_GREY		= 0x04,	/* Use pseudo-greyscale */
    MSC_CONTRAST	= 0x02,	/* Use contrasting colors */
    MSC_DOUG		= 0x01,	/* Use doug-chosen colors */
} MSetColor;

typedef ByteFlags MSetCalcReturnFlags;
#define MSCRF_MESSAGE_WAITING		0x80
#define MSCRF_BLOCK_DIRTIED		0x40

/*
 * This is the return value for the routine which calculates the points
 * of the MSet.
 */
typedef enum
{
    MSCR_nominal = 0,		/* Call completed normally */
    MSCR_messageWaiting,	/* Call stopped prematurely because a */
				/* message was waiting in the queue */
} MSetCalcReturn;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Structures
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * The following three structure declarations are here mostly for the C
 * compiler's benefit.  For more information on their usage, please see
 * mset.def.
 */

/*
 * 4 bits of integer, 44 bits of fraction.
 */
typedef struct
{
    word	FN_high;
    word	FN_middle;
    word	FN_low;
} FixNum;

typedef union
{
    word	MSN_16bit;
    FixNum	MSN_48bit;
/*    qword	MSN_Float;*/
} MSetNum;

typedef struct
{
    MSetNum	MN_A;
    MSetNum	MN_B;
    MSetNum	MN_X;
    MSetNum	MN_Y;
    MSetNum	MN_x2;
    MSetNum	MN_y2;
    MSetNum	MN_prod;
} MSetNumState; 

/*
 * There is one MSetParameters struct associated with every MSet object.  It
 * is stored in its own VM block.
 *
 * MSP_calcBlock	VMHandle of a block which holds an MSetCalcParameters
 * MSP_dataMapBlock	VMHandle of a block which holds an array of
 * 			MSetDataHandles.  The MSetCalcParameters struct also
 *			has a copy of this handle.
 * MSP_colorScheme	Designates a map from scaled dwells to colors
 * MSP_precision	Precision with which calculations are performed
 * 
 *** The following 3 fields are duplicated in the MSetCalcParameters struct
 * 
 * MSP_maxDwell		Maximum # of iterations to perform per point**
 * MSP_pixelWidth	Width of the image in pixels**
 * MSP_pixelHeight	Height of the image in pixels**
 * 
 ***
 * 
 * MSP_threadPriority	Reflects the current priority of the calculation
 *			thread.  Placed here so the controllers can reflect
 *			the current setting.
 * MSP_selected[XY]	The coordinates of the last place the user clicked;
 *			stored as offsets from the top-left corner.
 * MSP_lastZoom		The last value of zoomVal passed to MSG_MSET_ZOOM;
 *			when the user double-clicks on the MSet, this value
 *			is passed to MSG_MSET_ZOOM.
 * MSP_lastLine		Last line that has been calculated, used for drawing
 *			purposes.  It is usually only increased, by sending
 *			a MSG_MSET_NEW_LINE; the handler then draws all
 *			points between the old and new value.  -1 implies no
 *			lines have been drawn yet.
 */
typedef struct
{
    VMBlockHandle	MSP_calcBlock;
    VMBlockHandle	MSP_dataMapBlock;

    MSetColor		MSP_colorScheme;
    MSetPrecision	MSP_precision;
    word		MSP_maxDwell;
    word		MSP_pixelWidth;
    word		MSP_pixelHeight;
    word		MSP_threadPriority;
    sword		MSP_selectedX;
    sword		MSP_selectedY;
    BBFixedAsWord	MSP_lastZoom;
    sword		MSP_lastLine;
} MSetParameters;

/*
 * There is one MSetInfoStruct associated with every MSet object.  It is
 * stored in a VM block, along with all the MSetDataHandles needed to store
 * the fully calculated MSet.  The block is shared with the calculation
 * thread, which will periodically check to see if it's been altered.
 *
 * MSP_pixelWidth	Width of the image in pixels
 * MSP_pixelHeight	Height of the image in pixels
 * MSCP_dataMapBlock
 * MSP_left		X (real) coordinate of the top-left corner
 * MSP_top		Y (imaginary) coordinate of the top-left corner
 * MSP_hRes		Distance between two X pixels
 * MSP_vRes		Distance between two Y pixels
 * MSP_maxDwell		Maximum # of iterations to perform per point
 * 
 * MSP_count		Dwell value of the current point being calculated
 * MSP_vars		Temporary storage for variables during calculation
 * 
 * MSP_calcPointVec	Local vector to a point calculation routine
 * MSP_copyVec		Local vector to a number copying routine
 * MSP_addVec		Local vector to a routine to add two numbers
 * MSP_subVec		Local vector to a routine to subtract two numbers
 * 
 */
typedef struct
{
    VMBlockHandle	MSCP_dataMapBlock;
    word		MSCP_pixelWidth;
    word		MSCP_pixelHeight;
    FixNum		MSCP_left;
    FixNum		MSCP_top;
    FixNum		MSCP_hRes;
    FixNum		MSCP_vRes;
    word		MSCP_maxDwell;

    word		MSCP_count;
    MSetNumState	MSCP_vars;

    void _near 		(*MSCP_calcPointVec)();
    void _near 		(*MSCP_copyVec)();
    void _near		(*MSCP_addVec)();
    void _near		(*MSCP_subVec)();
} MSetCalcParameters;

/*
 * Any data which it might be convenient to store with the VMHandle goes
 * here.
 */
typedef struct
{
    VMBlockHandle	MSDH_blockHandle;
} MSetDataHandle;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Externally defined functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

extern void _far _pascal
    MSSetupCalcVectors(MSetCalcParameters _far* mscpP,
		       MSetPrecision		precision);

extern MSetCalcReturn _far _pascal
    MSLineBasedDoLine(word lineNum,
		      MSetCalcParameters _far* mscpP,
		      word _far* dataP);

/*
 * For the following math routines, it is OK for a source and destination
 * pointer to be the same.
 * 
 * FixNumUMult:		c = a * b		(unsigned)
 * FixNumUMultTimes2:	c = 2 * a * b		(unsigned)
 * FixNumAdd:		c = a + b
 * FixNumSub:		c = a - b
 *
 * FixNumToAscii:
 *	Convert a FixNum to a null-terminated, ascii string of the form
 *	-n.mmmm.  The buffer should be 18 characters long, but may be
 *	shorter.  bufSiz should be the size of the buffer - 1 (1 for the
 *	null byte).
 */

extern void _far _pascal
    FixNumUMult(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumUMultTimes2(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumAdd(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumSub(FixNum _far* c, FixNum _far* a, FixNum _far* b);

extern void _far _pascal
    FixNumToAscii(FixNum _far* num, char _far* buffer, word bufSiz);

#ifdef __HIGHC__
pragma Alias(MSSetupCalcVectors, "MSSETUPCALCVECTORS");
pragma Alias(MSLineBasedDoLine, "MSLINEBASEDDOLINE");
pragma Alias(FixNumUMult, "FIXNUMUMULT");
pragma Alias(FixNumUMultTimes2, "FIXNUMUMULTTIMES2");
pragma Alias(FixNumAdd, "FIXNUMADD");
pragma Alias(FixNumSub, "FIXNUMSUB");
pragma Alias(FixNumToAscii, "FIXNUMTOASCII");
#endif
