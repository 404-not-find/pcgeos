@ifndef _IBMS_GOH_
@define _IBMS_GOH_

typedef MemHandle IBMSHandle ;
typedef dword IBMSIndex ;

#define IBMS_BAD  0

/* Create a new IBMS block group */
VMBlockHandle IBMSCreate(VMFileHandle file) ;

/* Open a previously created IBMS block group */
IBMSHandle IBMSOpen(VMFileHandle file, VMBlockHandle mainBlock) ;

/* Close out a previously opened IBMS block group */
void IBMSClose(IBMSHandle group) ;

/* Ensure all data is saved */
void IBMSSave(IBMSHandle group) ;

/* Get rid of an old IBMS block group -- MUST BE CLOSED! */
void IBMSDestroy(VMFileHandle file, VMBlockHandle mainBlock) ;

/* Allocate a block (referenced by a IBMSIndex) in the group */
IBMSIndex IBMSAlloc(IBMSHandle group, word size) ;

/* Free a previously allocated block.  Can't be already freed or locked */
void IBMSFree(IBMSHandle group, IBMSIndex blockIndex) ;

/* Lock a particular block in the group */
void *IBMSLock(IBMSHandle group, IBMSIndex blockIndex) ;

/* Unlock a block previously locked by IBMSLock */
void IBMSUnlock(IBMSHandle group, void *p_lockedBlock) ;

/* Mark a previously locked block dirty */
void IBMSDirty(void *p_lockedBlock) ;

/* Routines to set and get the map index */
IBMSIndex IBMSGetMap(IBMSHandle group) ;
void IBMSSetMap(IBMSHandle group, IBMSIndex mapIndex) ;

/* Resize a block index.  */
/* NOTE:  All other locked blocks in the group are invalid! */
void IBMSResize(IBMSHandle group, IBMSIndex blockIndex, word newSize) ;
@endif
