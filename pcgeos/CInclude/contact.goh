/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1994 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	contact.goh
 * AUTHOR:	Chris Hawley-Ruppel: 7/13/94
 *
 * DECLARER:	contact
 *
 * DESCRIPTION:
 *	This file defines contact library stuff
 *
 *	$Id: contact.goh,v 1.1 97/04/04 15:56:42 newdeal Exp $
 *
 ***********************************************************************/

@optimize
@deflib contact

@include <Objects/gInterC.goh>
@include <Objects/gTextC.goh>
@include <Objects/gViewC.goh>

#define HINT_INTERACTION_NOT_FULL_SCREEN    HINT_UNUSED_G

typedef word RecordIndex;

typedef enum {
	KDT_SM,
	KDT_FAX,		
	KDT_TEXT	
} KDocumentType;

typedef enum {
	KAT_SM,
	KAT_FAX,
	KAT_PHONE,	
	KAT_TERMINAL,	
	KAT_TELNET,	
	KAT_GOPHER,
	KAT_DTMF
} KActionType;

typedef enum {
    	ST_FAX,
	ST_SMS,
	ST_EMAIL,
	ST_CALL,
	ST_FILE,
	ST_PRINT
} SendType;

typedef struct {
    FileLongName    FNI_fname;
    GenFilePath	    FNI_path;
} FileNameInfo;

/****************************************************************************/

@class ContactClass, GenControlClass;

typedef WordFlags CFeatures;
#define CF_SEARCH		0x02
#define CF_CHOOSE_CARD_PHONE	0x01

#define	C_DEFAULT_FEATURES  CF_SEARCH


#define MAX_NUM_NAME_RECORD_CHARS		39
#define MAX_NUM_ADDR_RECORD_CHARS		59
#define MAX_NUM_PHONE_RECORD_CHARS		19
#define MAX_NUM_NOTES_RECORD_CHARS		200
#define MAX_NUM_SMS_RECORD_CHARS		39
#define MAX_NUM_EMAIL_RECORD_CHARS		39
#define MAX_NUM_DTMF_RECORD_CHARS		39

typedef char ContactNameString[MAX_NUM_NAME_RECORD_CHARS+1];
typedef char ContactAddrString[MAX_NUM_ADDR_RECORD_CHARS+1];
typedef char ContactPhoneString[MAX_NUM_ADDR_RECORD_CHARS+1];
typedef char ContactNotesString[MAX_NUM_NOTES_RECORD_CHARS+1];

typedef struct {
	ContactNameString CE_name;
	ContactNameString CE_company;
} CardEntry;

@message Boolean MSG_CONTACT_GET_CUR_CARD(CardEntry *card = cx:dx) = carry;
@message Boolean MSG_CONTACT_FIND_CARD(CardEntry *card = cx:dx) = carry;

typedef struct {
	ContactNameString NPP_name;
	ContactNameString NPP_company;
	ContactPhoneString NPP_phone;
} NamePhoneParams;

@prototype void GET_CALL_INFO(MemHandle	namePhoneParams=bp);

@message Boolean MSG_CONTACT_CHOOSE_CARD_PHONE(Message message = cx,
					     SendType sendType = bp);
@message void MSG_CONTACT_CARD_PHONE_SELECTED(word selection=cx);
@message void MSG_CONTACT_DIAL_BY_HAND(Message message = cx,
					     SendType sendType = bp);
@message void MSG_CONTACT_DIAL_BY_HAND_CANCEL();
@message void MSG_CONTACT_DIAL_BY_HAND_CALL();
@message void MSG_CONTACT_GET_RECENT_CALL(Message message = cx,
					     SendType sendType = bp);
@message void MSG_CONTACT_RECENT_CALL_SELECTED(word selection=cx);
@message void MSG_CONTACT_RECENT_CALL_CLEAR_ALL_LISTS();
@message void MSG_CONTACT_RECENT_CALL_CLEAR_THIS_LIST();
@message Boolean MSG_CONTACT_GET_VOICE_MAIL_NUMBER(
		NamePhoneParams *retParams = cx:dx, 
		KActionType action = bp) = carry;
@message void MSG_CONTACT_QUERY_NAME(optr list = cx:dx, word entry = bp);
@message void MSG_CONTACT_SEARCH_TEXT_TIMEOUT_MSG();
@message RecordIndex MSG_CONTACT_GET_CUR_SELECTION() = ax;
@message void MSG_CONTACT_STATUS_MSG();
@message void MSG_CONTACT_CHOOSE_CARD_PHONE_QUERY_NUMBER(optr list = cx:dx, word entry = bp);
@message void MSG_CONTACT_SEARCH_TEXT_LOST_FOCUS();
typedef struct {
    	optr 	    CDI_dialog;
	SendType    CDI_type;
	Message	    CDI_msg;
	RecordIndex CDI_record;
} CallDialogInfo;
@vardata CallDialogInfo TEMP_RECENT_CALL_DIALOG_INFO;
@vardata CallDialogInfo TEMP_CHOOSE_CARD_PHONE_DIALOG_INFO;
@vardata CallDialogInfo TEMP_DIAL_BY_HAND_DIALOG_INFO;
@vardata ChunkHandle	ATTR_CONTACT_LIST_MONIKER;
@vardata Message	ATTR_CONTACT_LIST_STATUS_MSG;
@vardata SendType	ATTR_CONTACT_LIST_CALL_TYPE;
@vardata Message	ATTR_CONTACT_LIST_CALL_MSG;

@instance ChunkHandle CI_searchResult;
@instance word CI_timerID = 0;
@instance TimerHandle CI_timerHandle = 0;
@instance word CI_curItem = 0;
@default GI_states = (@default | GS_ENABLED);

@endc

@class ContactRecordManagerClass, GenControlClass;

@message void MSG_CONTACT_RECORD_MANAGER_CREATE_NEW_RECORD();
@message void MSG_CONTACT_RECORD_MANAGER_DELETE_SELECTED_RECORD();
@message void MSG_CONTACT_RECORD_MANAGER_EDIT_SELECTED_RECORD();
@message void MSG_CONTACT_RECORD_MANAGER_OPEN_RECORD(RecordIndex recordIndex = cx);
@message void MSG_CONTACT_RECORD_MANAGER_CLOSE_FORM();
@message void MSG_CONTACT_RECORD_MANAGER_INITIATE_ADD_FIELD();
@message void MSG_CONTACT_RECORD_MANAGER_DELETE_FIELD();
@message void MSG_CONTACT_RECORD_MANAGER_UPDATE_FIELDS(ContactRecordManagerState fieldsToUpdate = cx);
@message void MSG_CONTACT_RECORD_MANAGER_UPDATE_CONTACT_FILE(RecordIndex modifiedItem = cx, Message msgToSend = dx);
@message void MSG_CONTACT_RECORD_MANAGER_ENTER_EDIT_FIELD_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_EXIT_EDIT_FIELD_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_ENTER_CONTACT_INFO_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_EXIT_CONTACT_INFO_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_CLOSE_RECORD();
@message void MSG_CONTACT_RECORD_MANAGER_LIST_ITEM_SELECTED(word selection = cx, word numSelections = bp, word flags = dx);

typedef enum {
    CSS_NOT_SECRET,
    CSS_SECRET
} ContactSecretStatus;
@message void MSG_CONTACT_RECORD_MANAGER_SET_SECRET_STATUS(ContactSecretStatus status = cx);
@message void MSG_CONTACT_RECORD_MANAGER_SET_SPEED_DIAL_LOCATION(word location = cx);
@message void MSG_CONTACT_RECORD_MANAGER_OPEN_SELECTED_RECORD_CONTACTS();
@message void MSG_CONTACT_RECORD_MANAGER_OPEN_GENERAL_LOG();
typedef WordFlags ContactRecordManagerState;
#define	CRMS_COMPANY	    	0x8000
#define    CRMS_NAME	    	0x4000
#define    CRMS_ADDRESS	    	0x2000
#define    CRMS_CITYSTATE   	0x1000
#define    CRMS_PHONE	    	0x0800
#define    CRMS_FAX 	    	0x0400
#define    CRMS_CELLPHONE   	0x0200
#define    CRMS_SMS 	    	0x0100
#define    CRMS_EMAIL	    	0x0080
#define    CRMS_DTMF	    	0x0040
#define    CRMS_SECRET	    	0x0020

#define    CRMS_CREATING_RECORD	0x0002
#define    CRMS_DELETING_FIELD	0x0001

typedef WordFlags ContactRecordManagerFeatures;
#define	CRMF_EDIT   	0x0004
#define	CRMF_DELETE   	0x0002
#define	CRMF_CREATE_NEW	0x0001

@instance ContactRecordManagerState CRMI_state;	
@instance RecordIndex	CRMI_recordNum;

@endc
/****************************************************************************/

@class KFileSelectorClass, GenFileSelectorClass;

typedef enum {
    	KDD_NONE,
	KDD_WRITTEN_NOTES,
	KDD_RECEIVED_FAXES,
	KDD_RECEIVED_SM,
	KDD_FETCHED_INTERNET_FILES,
	KDD_SENT_MESSAGES	
} KDocumentDir;

@message void MSG_KFS_SET_PATH(KDocumentDir dir = cx);
@message KDocumentDir MSG_KFS_GET_PATH() = cx;
@message FileHandle MSG_KFS_OPEN_CUR_FILE(char *fname = cx:dx) = ax;
@message Boolean MSG_KFS_DELETE_FILE(FileHandle fhan = cx) = carry;
@vardata KDocumentDir ATTR_KFS_DOCUMENT_DIR;

@endc

/****************************************************************************/

@class SMSEditClass, GenControlClass;

#define MAX_SMS_TEXT_SIZE	160

@default GI_states = (@default | GS_ENABLED);

@message Boolean MSG_SMS_EDIT_CREATE_NEW() = carry;
@message void MSG_SMS_EDIT_OPEN(FileNameInfo *ptr = cx:dx);
@message Boolean MSG_SMS_EDIT_CLOSE() = carry;
@message void MSG_SMS_EDIT_SEND_OPTIONS(word sendType = cx);
@message Boolean MSG_SMS_EDIT_SAVE() = carry;
@message void MSG_SMS_EDIT_DELETE();
@message FileHandle MSG_SMS_EDIT_GET_FILE_HANDLE() = ax;
@message word MSG_SMS_EDIT_GET_TEXT(char *text = dx:bp) = cx;
@message void MSG_SMS_EDIT_SET_TEXT(char *textBuf = dx:bp, word lenBuff = cx);
@message void MSG_SMS_EDIT_SET_ADDRESS(NamePhoneParams *params = cx:dx);
@message void MSG_SMS_EDIT_GET_ADDRESS(NamePhoneParams *params = cx:dx);
typedef ByteFlags SMSEditFlags;
#define SMSEF_READ_ONLY		0x16	/* Whether text is readOnly */
#define SMSEF_STAMP		0x08	/* Whether envelope is stamped */
#define SMSEF_POSTMARK		0x04    /* Whether postmarked */
#define SMEEF_SENT		0x02	/* Whether Sent */
#define SMSEF_RECEIVED		0x01    /* Whether receieved.   "From" will
					 * be displayed, rather than "To."
					 */

@message void MSG_SMS_EDIT_SET_FLAGS(SMSEditFlags flagsToSet = cl, 
				     SMSEditFlags flagsToClear = ch);
@message void MSG_SMS_EDIT_SET_TITLE_TEXT(char *title = dx:bp);
@vardata FileLongName ATTR_SMS_EDIT_FILE_NAME;
@vardata GenFilePath ATTR_SMS_EDIT_PATH;

@instance SMSEditFlags SMSEI_flags;		/* Flags */
@instance NamePhoneParams SMSEI_address;	/* Address, for display */
@instance FileHandle SMSEI_fhan;		/* File han of edited file */
@instance ChunkHandle SMSEI_text;		/* Text body, to preserve
						 * state on shutdown. */

@endc

/****************************************************************************/

@class NotesEditClass, GenControlClass;

@default GI_states = (@default | GS_ENABLED);

@message void MSG_NOTES_EDIT_CREATE_NEW();
@message void MSG_NOTES_EDIT_OPEN(FileNameInfo *ptr = cx:dx);
@message void MSG_NOTES_EDIT_SET_FONT(FontID id = cx);
@message void MSG_NOTES_EDIT_SET_SIZE(word pointSize = cx);
@message void MSG_NOTES_EDIT_SEND_OPTIONS(word sendType = cx);
@message void MSG_NOTES_EDIT_SAVE();
@message void MSG_NOTES_EDIT_SET_TEXT_STYLE(word data=cx);
@message void MSG_NOTES_EDIT_DELETE();

@vardata FileLongName ATTR_NOTES_EDIT_FILE_NAME;
@vardata GenFilePath ATTR_NOTES_EDIT_PATH;
@vardata ChunkHandle ATTR_NOTES_EDIT_NOTE_TITLE;
@endc
    
/****************************************************************************/

@class FaxViewerClass, GenViewClass;

@message void MSG_FAX_VIEWER_OPEN(FileNameInfo *ptr = cx:dx);
@message void MSG_FAX_VIEWER_SEND_OPTIONS();
@message void MSG_FAX_VIEWER_DELETE();
@message void MSG_FAX_VIEWER_CHANGE_TRIGGER_SET();
@default GI_states = (@default | GS_ENABLED);

@endc

@class TabCompClass, GenGadgetClass;

@default GGI_attrs = @default | GGA_COMPOSITE;

@message void MSG_TAB_COMP_ITEM_SELECTED(word curOpenTab = cx, 
					 word numTabItems = dx,
					 word curItem = bp);

@instance word TCI_numTabs;
@instance word TCI_curItem;
@instance word TCI_curOpenSection;
@instance word TCI_curNumFiles;

@vardata void TEMP_TAB_COMP_NEEDS_FULL_REDRAW;

@endc

@class TabClass, GenGlyphClass;

@endc

@class TabCompParentClass, GenInteractionClass;

@endc



@class ResponderFileOpenClass, GenControlClass;
typedef WordFlags ResponderFileOpenFeatures;
#define	RFOF_OPEN   	    0x0008
#define	RFOF_CREATE_NEW	    0x0004
#define	RFOF_DELETE 	    0x0002
#define	RFOF_RENAME 	    0x0001

@message void MSG_FILE_OPEN_CONTROL_OPEN();
@message void MSG_FILE_OPEN_CONTROL_CREATE_NEW();
@message void MSG_FILE_OPEN_CONTROL_DELETE();
@message void MSG_FILE_OPEN_CONTROL_RENAME();
@message void MSG_FILE_OPEN_CONTROL_ITEM_SELECTED();
@message void MSG_FILE_OPEN_CONTROL_SET_DIRECTORY(KDocumentDir directory = cx);

@instance   KDocumentType RFOI_type = KDT_TEXT;
@default GI_states = (@default | GS_ENABLED);

@vardata KDocumentDir ATTR_FILE_OPEN_DEFAULT_DIRECTORY;

@endc

@endlib


