COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Berkeley Softworks 1990 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		cellMacros.def

AUTHOR:		John Wedgwood, Apr 23, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	 4/23/91	Initial revision


DESCRIPTION:
	Macros used in the cell library
		
	$Id: cellMacros.def,v 1.1 97/04/04 17:44:53 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
; Computes the offset into the array of row-blocks.
;
; PASS:		source	= Row
; RETURN:	dest	= Offset into row-block array
;		If <dest> is not supplied, then
;		    source = Offset into row-block array
;
ComputeRowBlockOffset	macro	source, dest
ifnb	<dest>
	;;
	;; Multiple arguments. 
	;;
	mov	dest, source
	ComputeRowBlockOffset	dest
else
	;;
	;; This is the case of a single register argument.
	;;
ifdif	<source>, <ax>
	xchg	ax, source		;; Save ax, ax <- row
endif
EC <	cmp	ax, LARGEST_ROW		>
EC <	ERROR_A ROW_IS_OUT_OF_BOUNDS	>

rept	(ROW_TO_ROW_BLOCK_SHIFT_COUNT)
	shr	ax, 1			;; Shift down to get index
endm

	shl	ax, 1			;; Make index into an offset

ifdif	<source>, <ax>
	xchg	ax, source		;; Restore ax, reg <- offset
endif
endif
endm

;
; Computes the chunk index of a given row
;
ComputeRowChunkIndex	macro	reg
EC <	cmp	reg, LARGEST_ROW	>
EC <	ERROR_A ROW_IS_OUT_OF_BOUNDS	>
	andnf	reg, ROW_TO_ROW_CHUNK_MASK
endm

;
; Computes the chunk handle of a given row
; PASS:
;	source	= Register containing the row
; RETURN:
;	if <dest> wasn't supplied then
;	    source	= Chunk handle for that row
;	if <dest> was supplied then
;	    dest	= Chunk handle for that row
;
ComputeRowChunkHandle	macro	source, dest
EC <	cmp	source, LARGEST_ROW	>
EC <	ERROR_A ROW_IS_OUT_OF_BOUNDS	>
ifnb	<dest>
	mov	dest, source			;; dest <- row to compute for
	ComputeRowChunkHandle	dest		;; Compute chunk handle
else
	ComputeRowChunkIndex	source		;; Compute index
	shl	source, 1			;; Into table of words
	add	source, size LMemBlockHeader	;; Add on header to get chunk
endif
endm

;
; Figure out the offset to the start of the next row-block
;
ComputeNextRowBlockStart	macro	row
EC <	cmp	row, LARGEST_ROW	>
EC <	ERROR_A ROW_IS_OUT_OF_BOUNDS	>
	add	row, N_ROWS_PER_ROW_BLOCK	;; reg <- some row in next block
	andnf	row, not ROW_TO_ROW_CHUNK_MASK	;; Clear out the low bits
endm
