Overview file for the Cell library.

	Last Change
	-------------------
	12/ 5/90	jcw

	$Id: README,v 1.1.36.1 97/03/29 03:32:26 canavese Exp $

******************************************************************************
			OVERVIEW
******************************************************************************

The cell library is designed to be the lowest level data manipulation for
programs like a spreadsheet or database.

It is useful to view the data as a large spreadsheet. All data cells are
referred to by their row number and column number.

		Columns
	1	2	3	4	5
    +-------+-------+-------+-------+-------+
  1 |       |       |       |       |       |
R   +-------+-------+-------+-------+-------+
o 2 |   a   |       |   q   |       |   b   |
w   +-------+-------+-------+-------+-------+
s 3 |       |       |       |       |       |
    +-------+-------+-------+-------+-------+
  4 |       |       |       |   c   |   d   |
    +-------+-------+-------+-------+-------+

For instance 'q' would be referred to by (row = 2, column = 3).

'q' is a "cell". Any single item of data is termed a cell.

A row is a collection of data. The cells 'a', 'b', and 'q' are all in the
same row.

A collection of rows is called a 'sheet'. The cells (a,b,c,d,q) are all in
the same sheet.

This file contains a description of the data structures and routines
contained in this library. It also contains a description of how these
routines are supposed to ease the process of writing a spreadsheet or flat
file database.

******************************************************************************
				DATA STRUCTURES
******************************************************************************


Cells:
------
Cells are stored in dbase-items. There is no upper limit on the number of
cells a sheet can contain. There is no data structure associated with cell
data. That structure is determined by the application. To the cell library,
cells are just opaque data structures.


Rows:
-----
Cells are grouped into rows using a sparse array representation.
An array of references to cell data is kept, but empty references for
non-existent cells are not kept. To do this, the column # that the cell
resides in is stored with the cell data reference.

	Row 2	<- This is the array of cell references for row 2
	+-----+
	|  1  |	<- The next reference is to the cell in column 1
	+-----+
	| AAA |	<- Reference to the cell data for cell 'a'
	+-----+
	|  3  |	<- The next reference is to the cell in column 3
	+-----+
	| QQQ |	<- Reference to the cell data for cell 'q'
	+-----+
	|  5  |	<- The next reference is to the cell in column 5
	+-----+
	| BBB |	<- Reference to the cell data for cell 'b'
	+-----+

The column number is a word, and the cell data reference is the dbase items
group and item (both words).

As a result, the size of each structure is 6 bytes. This places a limit on
the number of cells in a row which can contain data of approximately 10,922.

The information for a row is contained in a single DB item.


Row Groups:
-----------
Rows are grouped together in another array, also represented using a sparse
matrix. Each row group contains information for 1024 rows.

	Row Group
	+-----+
	|  2  |	<- The next reference is to information for row #2
	+-----+
	| XXX |	<- Reference to information for row #2
	+-----+
	|  4  |	<- The next reference is to information for row #4
	+-----+
	| YYY |	<- Reference to information for row #4
	+-----+

The row number is a word and the reference is to the dbase-item containing
the information for the row (4 bytes). The total size of the structure is six
bytes. As a result, the largest a row-group will grow to is ~6K. A good size
for the heap.

A row group is stored in another DB item.


Row Group Lists:
----------------
A separate data structure keeps track of the different row groups.
Since there are at most 65,536 rows (since the row number is a word) and
since there are 1,024 rows in each row group, this list needs only 64
entries.

An array of 64 references to row-groups is kept. Since a row group is a VM
block, only one word is needed for each reference. As a result, the total
size of the array is 128 bytes. If all the rows in a row group contain no
data, then the rows and row-group are free'd and the entry in the row group
list is set to zero.

The row-group list is kept in the map item of the database file. It must be
the first thing in the map item.

******************************************************************************
			STATS
******************************************************************************

Maximum number of cells in a single sheet:
	Unknown. Limited by the number of db-items a single file can
	contain. This is a very very large number.

Maximum number of cells containing data in a single row:
	10,922

Maximum number of rows in a single sheet:
	65,536

Maximum amount of data in a single cell:
	< 65,536 bytes

******************************************************************************
			ROUTINES
******************************************************************************

CellFileInit:	Initialize a file for holding cell information.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		cx	= Space needed by the application in the map item.
			  This should include the RowGroupList as the first
			  part of the structure.

CellReplace:	Replace a cells data with new data.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		ax	= Row #
		cx	= Column #
		ds:si	= Pointer to the data to replace the cell with
		dx	= Size of the data to replace with

CellLock:	Lock a cells data to examine/modify it.
	Pass:	bx	= File (Not used if TPD_vmFile is set)
		ax	= Row #
		cx	= Column #
	Return:	*es:di	= Pointer to cell data

CellUnlock:	Unlock a cells data.
	Pass:	es	= segment of block containing the cell

CellDirty:	Mark a cell as dirty.
	Pass:	es	= segment of block containing the cell.

--------------------------------------------------------------

RangeExists:	Check for the existence of cells in a range.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		ax,cx	= Row/Column of first cell in range
		dx,bp	= Row/Column of last cell in range
	Return:	carry set if one or more cells in the range contain data

RangeInsert:	Insert a block of empty cells.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		bp	= Pointer to RangeInsertFrame.

RangeSwap:	Swap two ranges of cells.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		ax,cx	= Row/Column of first cell in first range
		dx,bp	= Row/Column of first cell in second range
		di	= Height (in rows) of the ranges
		si	= Width (in columns) of the ranges

RangeFree:	Free a range of cells.
	Pass:	bx	= File handle (Not used if TPD_vmFile is set)
		ax,cx	= Row/Column of first cell in first range
		dx,bp	= Row/Column of first cell in second range

******************************************************************************
			CONCEPTS
******************************************************************************

First we will look at what a spreadsheet does and how this library helps,
then we'll cover databases.

Clearly the layout is a good one for a spreadsheet. All data structures are
referred to using row and column numbers which are the references a
spreadsheet would naturally use.

Since the cell data itself is an opaque data type, the spreadsheet can put
any information it wishes in there.

The limits on the number of rows and columns is large enough that spreadsheet
users will not feel confined.

The design provides for small data files. Very little is actually allocated
or kept around unless it is needed.

Certain typical spreadsheet operations have some support in the library:

Insert/Delete row/columns:
	RangeInsert is designed to handle the low level manipulations
	that might be required by such operations.

Sorting:
	RangeSwap is designed to ease things like sorting. Once the ordering
	of the rows/columns is determined cell data can be swapped to
	re-order the information.

Scratch space:
	Often spreadsheet scratch space is useful for the application to
	have. Scratch space is space for spreadsheet data which is not
	visible to the user.

	The spreadsheet programmer can use these cells for evaluating
	formulas (like formulas used in graphing).

	For debugging purposes, the spreadsheet can be modified to allow
	programmer to scroll to those locations and view the data, but it
	will be unaffected by the insert/delete changes.
	
	Row and Column numbers greater than 32,768 are unaffected by the
	insert/delete operations. These cells, once allocated will never
	move.

In a database, the spreadsheet model for data holds up quite well. Columns
correspond to fields, rows to records.

The scratch space becomes very useful for things like summaries and totals.

Sorting can best be accomplished by using RowSwap() to get rows (records)
into sorted order.

******************************************************************************
			SAVING CELL DATA
******************************************************************************

Adding and removing cell data is built around the CellReplace() function. As
a result it is expected that the data for a cell will be built in some
separate buffer by the application and then stored using CellReplace().

Manipulations of the cell data within the cells db-item are possible, but
only changes which do not affect the size of the cells data should be done.


******************************************************************************
			SPARSE ARRAYS
******************************************************************************

Sparse arrays are used to keep lists of cells (rows) and to keep lists of rows
(row-groups). There is a whole set of routines to manipulate these arrays.
This data structure would normally be implemented as ChunkArrays, except
that the arrays are in DB items, which means the ChunkArray code won't work.

Having the SparseArray code separate means that the programming of the
code that depends on it doesn't have to deal with the dbase library. While
the dbase stuff is very useful, and is extremeley important to us, it can
be a pain to use, especially if you do a lot of DBReAlloc() calls, which
we need to do here. This is a nice way to insulate most of the cell library
from those headaches.

******************************************************************************
			COMMENTS
******************************************************************************

Originally we planned on having some of these data structures in VM blocks
rather than DB items because we felt it would speed up locking and unlocking
of cells. Unfortunately to maintain the flexibility we wanted, and to ease
coding, we ended up with everything in DB items.

It is very likely that profiling will be done to determine how much time
is spent locking and unlocking cell data. If data structure changes need
to be made in order to speed that up, we'll do it, but if we don't have to
then we won't.

Because all the DB-items that are used are allocated as 'ungrouped' there is
no easy way to tell when two items are allocated in the same group. As a
result, if you have one item locked, and you re-alloc another item (through
CellReplace) then you will not know if the segment address of the first
cell has changed. The cell code will not update segment registers.

So, here is the warning: Don't have any cells locked down when you do a
CellReplace(). You might get away with it, but when you don't, it will be
very hard to track down. Just don't do it.

The application isn't the only one with this problem, the cell library has
the same problem. It handles the problem the same way, no two data structures
are ever locked down at the same time. (By data-structure I mean cell, row,
row-group, and row-group list).


******************************************************************************
			       SEGMENTS
******************************************************************************

The dbase code fixes up segment registers when dbase-item blocks move around
on the heap. This means that if you have ds pointing at an item-block and
you do a call to DBReAlloc(), if the block ds pointed at moves, ds will be
updated to point at the new location of that block.

This means that you don't want to push and pop segment registers around
calls to dbase routines if those registers point to item blocks.

Since the cell library doesn't have a clue what the segment registers point
at when the application calls a library routine it must be very careful with
these segment registers.

As a result certain rules apply in the cell library:
	- Routines which allocate space in the dbase file all fix up the
	  segment registers before they return. (In all cases currently
	  they just take care that the dbase code can do it's job of fixing
	  up the registers).

	- Routine which can cause blocks to move around on the heap are all
	  clearly marked as returning ds and es pointing at the same blocks
	  that they were before, but that these blocks may have moved.

	- Code in the cell library can push and pop segment registers, but
	  never around a routine which fixes up segments. This includes
	  dbase allocation routines and many routines in the cell library.

When you add code to the cell library you need to observe these rules
carefully or you may introduce a very obscure bug.

As an application calling the cell library, it is very uncool to do
something like:
	;
	; We already have one cell locked... Let's create another
	;
	push	es		; Save segment register of locked cell
	... Set up arguments ...
	call	CellReplace	; Uh oh... this may cause es to change
	...
	pop	es		; Get back a segment register which may be bogus


This can be very hard to spot, especially in sub-routines which may have a
segment register in the "uses" line of the routine. It can also be hard to
see when there is a lot of code between the pushes and pops.

A good rule is to never have anything locked when you do a re-alloc. This
may be overkill for most people, but it certainly means that you won't ever
experience this problem.
