/***********************************************************************
 *
 *   Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 *  PROJECT:        GEOS
 *  MODULE:         HotSpot Library
 *  FILE:           hstextHS.goc
 *
 *  AUTHOR:         Cassie Hartzog, Apr 13, 1994
 *
 *  REVISION HISTORY:
 *  	Name    Date            Description
 *  	----    ----            -----------
 *  	Cassie  4/13/94         Initial version.
 *
 *  DESCRIPTION:            
 *	Routines for creating, deleting, manipulating hotspots.
 *
 *	$Id: hstextHS.goc,v 1.1 97/04/04 18:09:10 newdeal Exp $
 *
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *              Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <hotspot.goh>  

#include <gstring.h>
#include "hserrors.h"

/*
 ***************************************************************************
 *              Internal Function Declarations
 ***************************************************************************
 */
 
void    CreateHotSpot(optr oself, VisTextGraphic graphic, word token);
VMChain CreateHotSpotGString(optr oself, MemHandle data);
VMChain UpdateHotSpotGString(optr oself, MemHandle data);
void    ConvertTextRange(optr oself, VisTextRange *range);
dword 	GetLineHeight(optr oself, dword position);
void	CalcHotSpotOffset(optr oself, PointDWFixed point, dword pos, 
			  VisTextGraphic *graphic, XYOffset *offset);

word    AddTokenAtPosition(optr oself, dword position);
GraphicType ConvertGraphicType(VisTextGraphic *graphic);
void 	AddUndoAction(optr oself, word count);
Boolean HotSpotTextUpdateHotSpotArray(optr oself, word protoMajor,
				      word protoMinor);
void 	SendVariableGraphicNotification(optr oself, dword pos, 
					GraphicType type,
				    	VariableGraphicActionType action);

/*
 ***************************************************************************
 *              Message Handlers
 ***************************************************************************
 */

/***************************************************************************
 *                      MSG_HSTEXT_CREATE_HOT_SPOT
 ***************************************************************************
 *
 *  SYNOPSIS:   A new HotSpot object has been created.
 *
 *  PARAMETERS: word token - token of HotSpot's embedded graphic
 *              MemHandle data - buffer containing its instance data,
 *                  the first word of which contains the size of the buffer
 *              PointDWFixed *point - upper left coord of HotSpot
 *
 *  RETURN:     token of HotSpot, or NULL_HOT_SPOT_TOKEN if 
 *              the passed token for the embedded graphic is invalid.
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  04/14/94        Initial Revision
 *
 **************************************************************************/
@extern method HotSpotTextClass, MSG_HSTEXT_CREATE_HOT_SPOT
{
    HotSpotArrayElement *elemPtr;
    XYOffset        	offset;
    VisTextGraphic  	graphic;
    dword   	    	pos;

    /* get the embedded graphic which this hot spot is to overlay */
    HotSpotArrayLock(oself, &elemPtr);
    pos = HotSpotArrayGetPosition(&elemPtr, token);

    if (pos == TEXT_ADDRESS_PAST_END)
	return(NULL_HOT_SPOT_TOKEN);
    else {
	@call self::MSG_VIS_TEXT_GET_GRAPHIC_AT_POSITION(&graphic, pos);

	CalcHotSpotOffset(oself, point, pos, &graphic, &offset);
	((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[0] = 
	    offset.XYO_x;
	((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[1] = 
	    offset.XYO_y;

	graphic.VTG_meta.REH_refCount.WAAH_high = 0;
	graphic.VTG_meta.REH_refCount.WAAH_low = 0;
	graphic.VTG_type = VTGT_VARIABLE;
	graphic.VTG_data.VTGD_variable.VTGV_type = VTVT_HOTSPOT;
	graphic.VTG_data.VTGD_variable.VTGV_manufacturerID = 
		MANUFACTURER_ID_GEOWORKS;

	/* 
	 * hotspot graphics are not visible in the text layer - so 
	 * give them the minimum size possible.  (Size of 0, 0 will
	 * cause a FatalError in the Text library)
	 */
	graphic.VTG_size.XYS_width = 0;
	graphic.VTG_size.XYS_height = 1;
	
	/* stuff the hotspot instance data into a gstring */
	graphic.VTG_vmChain = CreateHotSpotGString(oself, data);

	/*
	 * Get the position of the last hotspot graphic for the
	 * embedded graphic, which is where we want to add the hotspot.
	 */
	while (HotSpotArrayGetToken(oself, &elemPtr, ++pos) != 
		NULL_HOT_SPOT_TOKEN)
	{
	    /* if graphic is not a hotspot graphic, stop looking */
	    if (elemPtr->HSAE_type != (GT_VARIABLE | GT_HOTSPOT)) 
		break;
	}
	
	HotSpotArrayUnlock(elemPtr);

	/*
	 * add this so that when the replace happens, we don't needlessly
	 * notify HotSpotManager to move the following HotSpot objects 
	 */
	ObjVarAddData(oself, ATTR_HOT_SPOT_TEXT_ADD_OR_DELETE_HOT_SPOT, 0);
	/*
	 * set this flag so don't try to move hotspots when redrawing 
	 */
	ObjVarAddData(oself, ATTR_NO_MOVE_HOTSPOTS_WHEN_DRAWING, 0);

	@call process::MSG_GEN_PROCESS_UNDO_IGNORE_ACTIONS(FALSE);

	@call self::MSG_META_SUSPEND();
	@call self::MSG_VIS_TEXT_REPLACE_WITH_GRAPHIC(graphic,
		    GetVMFile(oself), 0, pos, pos);
	/*
	 * Clear hyperlink on new graphic, so that if previous hotspot
	 * has a hyperlink, its type run does not expand to cover this
  	 * hotspot as well.
	 */
	@call self::MSG_VIS_TEXT_SET_HYPERLINK(0, GIGS_NONE, GIGS_NONE, 
					       pos+1, pos);
	@call self::MSG_META_UNSUSPEND();

	ObjVarDeleteData(oself, ATTR_HOT_SPOT_TEXT_ADD_OR_DELETE_HOT_SPOT);

	@call process::MSG_GEN_PROCESS_UNDO_ACCEPT_ACTIONS();

	/* return the new hotspot's token */
	pself = ObjDerefVis(oself);
	return(pself->HSTI_tokenCount - 1);
    }       
}

/***************************************************************************
 *                      MSG_HSTEXT_DELETE_HOT_SPOT
 ***************************************************************************
 *
 *  SYNOPSIS:   A HotSpot object has been deleted.      
 *
 *  PARAMETERS: word token - token of deleted HotSpot
 *
 *  RETURN:     nothing
 *      
 *  SIDE EFFECTS: adds vardata to signal that there is no need to send
 *                a deletion message to HotSpotManager.
 *
 *  STRATEGY:   Just delete the associated C_GRAPHIC char in the text,
 *              that will take care of everything else.
 *
 *  REVISION HISTORY:
 *       Name    Date            Description
 *       ----    ----            -----------
 *       cassie  04/14/94        Initial Revision
 *
 **************************************************************************/
@extern method HotSpotTextClass, MSG_HSTEXT_DELETE_HOT_SPOT
{
    VisTextReplaceParameters params;
    HotSpotArrayElement *elemPtr;
    dword pos;
	
    HotSpotArrayLock(oself, &elemPtr);
    pos = HotSpotArrayGetPosition(&elemPtr, token);
    HotSpotArrayUnlock(elemPtr);                             
	
    params.VTRP_range.VTR_start = pos;
    params.VTRP_range.VTR_end = pos+1;
    params.VTRP_insCount = 0;                   /* this is a deletion */
    params.VTRP_flags = VTRF_DO_NOT_SEND_CONTEXT_UPDATE | VTRF_UNDO; 
	
    /*
     * add this so that when the delete happens, we don't needlessly
     * tell HotSpotManager to remove this hotspot
     */ 
    ObjVarAddData(oself, ATTR_HOT_SPOT_TEXT_ADD_OR_DELETE_HOT_SPOT, 0);

    /* set this flag so don't try to move hotspots when redrawing */
    ObjVarAddData(oself, ATTR_NO_MOVE_HOTSPOTS_WHEN_DRAWING, 0);

    @call self::MSG_VIS_TEXT_REPLACE_TEXT(&params);
    ObjVarDeleteData(oself, ATTR_HOT_SPOT_TEXT_ADD_OR_DELETE_HOT_SPOT);
}

/***************************************************************************
 *                      MSG_HSTEXT_UPDATE_HOT_SPOT              
 ***************************************************************************
 *
 *  SYNOPSIS:   A HotSpot object has been moved or resized, so its
 *              instance data has changed and must be updated in
 *              the VisTextGraphic gstring.
 *
 *  PARAMETERS: word token - HotSpot token
 *              MemHandle data - buffer containing its instance data,
 *                  the first word of which contains the size of the buffer
 *              PointDWFixed point - new position for hotspot
 *
 *  RETURN:     nothing
 *
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  04/14/94        Initial Revision
 *
 **************************************************************************/
@extern method HotSpotTextClass, MSG_HSTEXT_UPDATE_HOT_SPOT
{
    HotSpotArrayElement *elemPtr;
    dword   pos;
    XYOffset offset;
    VisTextGraphic graphic;
    VMChain oldChain = NULL;

    GetEmbeddedGraphicForHotSpot(oself, token, &pos, &graphic);

    /* calculate the hotspot's position relative to its graphic */
    CalcHotSpotOffset(oself, point, pos, &graphic, &offset);
	 
    /* get the graphic for the hotspot which needs updating */
    HotSpotArrayLock(oself, &elemPtr);
    pos = HotSpotArrayGetPosition(&elemPtr, token);
    HotSpotArrayUnlock(elemPtr);                             
    @call self::MSG_VIS_TEXT_GET_GRAPHIC_AT_POSITION(&graphic, pos);

    /* update the graphic element with the new offset */
    ((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[0] = 
    	offset.XYO_x;
    ((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[1] = 
    	offset.XYO_y;

    /* If data is non-null, the hotspot's instance data has changed */
    if (data) {
	/* save the old chain so we can free it later */
	oldChain = graphic.VTG_vmChain;

	/* get the new, updated gstring VMChain */
	graphic.VTG_vmChain = UpdateHotSpotGString(oself, data);
	MemFree(data);  
    }   

    /*
     * If the original graphic was modified instead of creating a new
     * graphic (because only 1 graphic run uses it), and there was an 
     * old VMChain, free the old chain now.
     */
    if (@call self::MSG_VIS_TEXT_UPDATE_GRAPHIC_ELEMENT(
	VTUGF_NEW_ELEMENT, graphic, pos) == UGRV_MODIFIED_ELEMENT) {
	if (oldChain)                   
	    VMFreeVMChain(GetVMFile(oself), oldChain);
    }

    /* set this flag so don't try to move hotspots when redraw */
    ObjVarAddData(oself, ATTR_NO_MOVE_HOTSPOTS_WHEN_DRAWING, 0);
    
}

/***************************************************************************
 *                  MSG_HSTEXT_CHECK_FOR_PASTED_HOT_SPOTS
 ***************************************************************************
 *
 *  SYNOPSIS:   Some text has been pasted.  If that text contains
 *              hot spots, tell HotSpotManager to instantiate objects
 *              for them.
 *
 *  PARAMETERS: VisTextReplaceParameters params
 *
 *  RETURN:     nothing
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *          Name        Date            Description
 *          ----        ----            -----------
 *          cassie      05/13/94        Initial Revision
 *
 **************************************************************************/
@extern method HotSpotTextClass, MSG_HSTEXT_CHECK_FOR_PASTED_HOT_SPOTS
{
    TextReference   ref;
    VisTextGraphic  graphic;
    char    	    *cp;
    dword   	    count, 
    	    	    insCount = params.VTRP_insCount,
    	    	    pos = params.VTRP_range.VTR_start;
    GraphicType     type;
    word    	    token, blockSize;

    /* 
     *  Get the text that was pasted.  Alloc a block to hold it.
     */
    EC_ERROR_IF(!params.VTRP_insCount, 
	HSTEXT_HOT_SPOT_TEXT_BAD_REPLACE_RANGE);

    while (insCount) {
	/* read in no more than fffh (4K - 1) bytes at a time. */
	blockSize = (insCount < 0xfff ? insCount : 0xfff); 
    	ref.TR_type = TRT_BLOCK;

	/* allocate one extra byte, as text is null-terminated */
	ref.TR_ref.TRU_block.TRB_handle = MemAlloc(blockSize + 1, 
						   HF_DYNAMIC, HAF_STANDARD);
	if (!ref.TR_ref.TRU_block.TRB_handle)
	    FatalError(ERROR_MEMALLOC_FAILED);

	count = @call self::MSG_VIS_TEXT_GET_TEXT_RANGE(0, ref,
	    	    	    	    	    	    	pos+blockSize, pos);
	EC_ERROR_IF(count != blockSize, 
		    HSTEXT_HOT_SPOT_TEXT_BAD_REPLACE_RANGE);
	cp = (char *) MemLock(ref.TR_ref.TRU_block.TRB_handle);
	
	/* go through the pasted text, looking for hot spot graphics */
	while (count--) {
	    if (*cp == C_GRAPHIC) {
		/* add an element at this position, and set type correctly */
		token = AddTokenAtPosition(oself, pos); 
		@call self::MSG_VIS_TEXT_GET_GRAPHIC_AT_POSITION(&graphic, 
								 pos);
		type = ConvertGraphicType(&graphic);
		HotSpotArraySetType(oself, pos, type);
		/*
		 * If this hotspot was just created by user, the vardata will
		 * be set, and we don't want to tell HotSpotManager to create
		 * another one.
		 */
		if ((type == (GT_VARIABLE | GT_HOTSPOT)) &&
		    !(ObjVarFindData(oself, 
				 ATTR_HOT_SPOT_TEXT_ADD_OR_DELETE_HOT_SPOT)))
		    CreateHotSpot(oself, graphic, token);
		/*
		 * Bindery needs to know when page name characters have
		 * been pasted, so send ourselfs a notification
		 */
		else if (type & GT_VARIABLE)
		    SendVariableGraphicNotification(oself, pos, 
						    type & ~GT_VARIABLE,
				    	    	    VGAT_INSERT);

	    }               
	    pos++;                  /* go to next char position */
	    cp++;                   /* point to next char */
	}
	MemFree(ref.TR_ref.TRU_block.TRB_handle); 
	insCount -= blockSize;
    }                   

 #if ERROR_CHECK    
    ECCheckHotSpotArray(oself);
#endif
    
}



/*
 ***************************************************************************
 *              Internal Routines
 ***************************************************************************
 */

/***************************************************************************
 *                  HotSpotTextUpdateHotSpotArray
 ***************************************************************************
 *
 *  SYNOPSIS:   An earlier, incompatible document has been opened.
 *              Update the HotSpotArray to use the newer format.
 *
 *  PARAMETERS: Boolean (word protoMajor, word protoMinor)
 *
 *  RETURN:     nothing
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *          Name        Date            Description
 *          ----        ----            -----------
 *          cassie      05/13/94        Initial Revision
 *
 **************************************************************************/
Boolean HotSpotTextUpdateHotSpotArray(optr oself, word protoMajor,
				      word protoMinor)
{
    VMBlockHandle   	    oldBlock, newBlock;
    OldHotSpotArrayElement  *oldPtr;
    HotSpotArrayElement     element;
    dword    	    	    count = 0;
    VisTextGraphic  	    graphic;

    /* get the VMBlock of the old HotSpotArray */
    oldBlock = *((VMBlockHandle *) ObjVarFindData(oself,
				  ATTR_HOT_SPOT_TEXT_HOT_SPOT_ARRAY));

    /* lock the old HotSpotArray */
    HotSpotArrayLock(oself, (HotSpotArrayElement **)&oldPtr);

    /* Create  new HotSpotArray */
    CreateHotSpotArray(oself);
    newBlock = *((VMBlockHandle *) ObjVarFindData(oself,
				  ATTR_HOT_SPOT_TEXT_HOT_SPOT_ARRAY));

    while (oldPtr->OHSAE_position != TEXT_ADDRESS_PAST_END) {
	element.HSAE_position = oldPtr->OHSAE_position;
	element.HSAE_token = oldPtr->OHSAE_token;
	@call self::MSG_VIS_TEXT_GET_GRAPHIC_AT_POSITION(&graphic, 
                                                        element.HSAE_position);
	element.HSAE_type = ConvertGraphicType(&graphic);

	HugeArrayInsert(GetVMFile(oself), newBlock, 1, count++, &element);
    	HotSpotArrayNext((HotSpotArrayElement **)&oldPtr);
    }

    /* unlock and free the old block */
    HotSpotArrayUnlock((HotSpotArrayElement *)oldPtr);  
    VMFree(GetVMFile(oself), oldBlock);	
#if ERROR_CHECK    
    ECCheckHotSpotArray(oself);
#endif
    return(TRUE);
}


/***************************************************************************
 *                  ConvertGraphicType
 ***************************************************************************
 *
 *  SYNOPSIS:   Convert the type of a VisTextGraphic to GraphicType.
 *
 *  PARAMETERS: GraphicType (VisTextGraphic *graphic)
 *
 *  RETURN:     nothing
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *          Name        Date            Description
 *          ----        ----            -----------
 *          cassie      05/13/94        Initial Revision
 *
 **************************************************************************/
GraphicType ConvertGraphicType(VisTextGraphic *graphic)
{
    GraphicType type;

    if (graphic->VTG_type == VTGT_GSTRING) 
	type = GT_GSTRING;
    else if (graphic->VTG_type == VTGT_VARIABLE) {
	type = GT_VARIABLE;
	type |= (GraphicType) graphic->VTG_data.VTGD_variable.VTGV_type;
    }
    return(type);
}

/***************************************************************************
 *              CalcHotSpotOffset
 ***************************************************************************
 *
 *  SYNOPSIS:   Calculate hotspot's offset relative to its embedded graphic
 *
 *  PARAMETERS: pos - offset of embedded graphic in text
 *              point - top left corner of HotSpot object
 *              oself - HotSpotText optr
 *
 *  RETURN:     nothing
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  05/15/94        Initial Revision
 *
 **************************************************************************/
void CalcHotSpotOffset(optr oself, PointDWFixed point, dword pos, 
		       VisTextGraphic *graphic, XYOffset *offset)
{
    VisTextConvertOffsetParams params;          
		
    /* get the (top,left) draw offset of the embedded graphic */
    params.VTCOP_offset = pos;
    @call self::MSG_VIS_TEXT_CONVERT_OFFSET_TO_COORDINATE(&params);         
    /*
     * the y offset of the graphic top is:
     * 	    line.yPos + line.height - graphic.height
     */
    params.VTCOP_yPos += GetLineHeight(oself, pos) - 
	graphic->VTG_size.XYS_height;
    
    offset->XYO_x = point.PDF_x.DWF_int - params.VTCOP_xPos;
    offset->XYO_y = point.PDF_y.DWF_int - params.VTCOP_yPos;
				
}

/***************************************************************************
 *                      CreateHotSpot
 ***************************************************************************
 *
 *  SYNOPSIS:   A graphic was pasted into the text.  If it defines a 
 *              hot spot, tell HotSpotManager to create a HotSpot object
 *              for it. 
 *
 *  PARAMETERS: optr oself - HotSpotText object
 *              VisTextGraphic graphic - hot spot graphic
 *              word token - hotspot's token
 *
 *  RETURN: 	nothing
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  05/03/94        Initial Revision
 *
 **************************************************************************/
void CreateHotSpot(optr oself, VisTextGraphic graphic, word token)
{
    EventHandle event;
    MemHandle dataHandle;
    ChunkHandle dataChunk;
    word size, *dataPtr = NULL;
    PointDWFixed point, offset;
    GStateHandle gstring;
	
    /* load the HotSpot's gstring */
    gstring = GrLoadGString(GetVMFile(oself), GST_VMEM, 
			    (graphic.VTG_vmChain >> 16) );
    /*                        
     * get the size of the first element, 
     * which should be the escape element
     */
    if (GrGetGStringElement(NullHandle, gstring, 0, dataPtr, &size) 
	!= GR_ESCAPE)
	FatalError(HSTEXT_ESCAPE_ELEMENT_NOT_FOUND);
    /*
     * Allocate a block big enough to hold the element, plus some
     * extra bytes.  Also, alloc chunk to hold the data. 
     */
    dataHandle = MemAlloc(STD_INIT_HEAP, HF_DYNAMIC, HAF_LOCK);  
    if (!dataHandle)
	FatalError(ERROR_MEMALLOC_FAILED);

    LMemInitHeap(dataHandle, LMEM_TYPE_GENERAL, 0, sizeof(LMemBlockHeader), 
		 1, size+2);
    dataChunk = LMemAlloc(dataHandle, size);
    dataPtr = LMemDerefHandles(dataHandle, dataChunk);

    /* now get the element and data */
    GrGetGStringElement(NullHandle, gstring, size, dataPtr, &size);
	
    /* we're done with the gstring, so destroy it, but leave its data */
    GrDestroyGString(gstring, NullHandle, GSKT_LEAVE_DATA);

    /*
     * We need to remove the escape element data (5 bytes) from the block,
     * as we don't want to pass that to HotSpotManager.
     */
    LMemDeleteAtHandles(dataHandle, dataChunk, 0, 5);
    MemUnlock(dataHandle);

    point.PDF_x.DWF_int = 
	((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[0];
    point.PDF_y.DWF_int = 
	((sword *)graphic.VTG_data.VTGD_variable.VTGV_privateData)[1];
		
    /*
     * Get the coordinate of the embedded graphic, and add it to
     * the hotspot's offset 
     */
    GetEmbeddedGraphicOffset(oself, token, &offset);
    point.PDF_x.DWF_int += offset.PDF_x.DWF_int;
    point.PDF_y.DWF_int += offset.PDF_y.DWF_int;
    point.PDF_x.DWF_frac = 0;
    point.PDF_y.DWF_frac = 0;

    /* tell HotSpotManager to instantiate an object */
    event = @record 
	HotSpotManagerClass::MSG_HOT_SPOT_MANAGER_CREATE_HOT_SPOT(
	    token, dataHandle, dataChunk, point);
    @send @visParent::MSG_META_SEND_CLASSED_EVENT(event, TO_SELF);
    ObjMarkDirty(oself);                        
	
}

/***************************************************************************
 *                       CreateHotSpotGString
 ***************************************************************************
 *
 *  SYNOPSIS:   Create a gstring for a new hotspot
 *
 *  PARAMETERS: optr oself - HotSpotText object
 *              MemHandle data - block containing data, the first word
 *                               of which is the size of the data
 *
 *  RETURN:     VMChain - VMChain containing the gstring
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  04/20/94        Initial Revision
 *
 **************************************************************************/
VMChain CreateHotSpotGString(optr oself, MemHandle data)
{
    word han;
    GStateHandle gstate;
    word *dataPtr;

    ECCheckMemHandle(data);
    dataPtr = MemLock(data);
    EC_WARNING_IF(*dataPtr == 0, HOTSPOT_DATA_SIZE_ZERO);

    gstate = GrCreateGString(GetVMFile(oself), GST_VMEM, &han);
    GrEscape(gstate, GGSEC_HOTSPOT, dataPtr, *dataPtr);
    if (GrEndGString(gstate) == GSET_NO_ERROR) 
	GrDestroyGString(gstate, NullHandle, GSKT_LEAVE_DATA);
    else {
	GrDestroyGString(gstate, NullHandle, GSKT_KILL_DATA);
	han = 0;
    }
    MemFree(data);
    return( ((VMChain) han) << 16 );
}


/***************************************************************************
 *                       UpdateHotSpotGString
 ***************************************************************************
 *
 *  SYNOPSIS:   Modify the gstring for a HotSpot.
 *
 *  PARAMETERS: optr oself - HotSpotText object
 *              MemHandle data - block containing data
 *
 *  RETURN:     VMChain - VMChain containing the gstring
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  04/20/94        Initial Revision
 *
 **************************************************************************/
VMChain UpdateHotSpotGString(optr oself, MemHandle data)
{
    word han;
    GStateHandle gstate;
	word *dataPtr;

    ECCheckMemHandle(data);
	dataPtr = MemLock(data);
    EC_WARNING_IF(*dataPtr == 0, HOTSPOT_DATA_SIZE_ZERO);

    gstate = GrCreateGString(GetVMFile(oself), GST_VMEM, &han);
    GrEscape(gstate, GGSEC_HOTSPOT, dataPtr, *dataPtr);
    if (GrEndGString(gstate) == GSET_NO_ERROR) 
	GrDestroyGString(gstate, NullHandle, GSKT_LEAVE_DATA);
    else {
	GrDestroyGString(gstate, NullHandle, GSKT_KILL_DATA);
	han = 0;
    }
    return( ((VMChain) han) << 16 );
}

/***************************************************************************
 *                     ConvertTextRange
 ***************************************************************************
 *
 *  SYNOPSIS:   Convert a virtual range to a physical range
 *
 *  PARAMETERS: optr oself - HotSpotText object
 *              VisTextRange *range - virtual range
 *
 *  RETURN:     nothing,
 *              range is updated to contain phsyical bounds of range
 *      
 *  SIDE EFFECTS:
 *
 *  REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      cassie  04/22/94        Initial Revision
 *
 **************************************************************************/
void ConvertTextRange(optr oself, VisTextRange *range)
{
    if (HW(range->VTR_start) == VIS_TEXT_RANGE_SELECTION) 
	@call oself::MSG_VIS_TEXT_GET_RANGE(range, 0);
		
    EC_ERROR_IF(HW(range->VTR_start) == VIS_TEXT_RANGE_PARAGRAPH_SELECTION,
		HSTEXT_HOT_SPOT_TEXT_BAD_REPLACE_RANGE);
    EC_ERROR_IF(range->VTR_start == TEXT_ADDRESS_PAST_END,
		HSTEXT_HOT_SPOT_TEXT_BAD_REPLACE_RANGE);
    EC_ERROR_IF(range->VTR_end == TEXT_ADDRESS_PAST_END,
		HSTEXT_HOT_SPOT_TEXT_BAD_REPLACE_RANGE);
}
