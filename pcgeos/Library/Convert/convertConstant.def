COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		convertConstant.def

AUTHOR:		Adam de Boor, Aug 26, 1992

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	8/26/92		Initial revision


DESCRIPTION:
	Whadyathink?
		
	$Id: convertConstant.def,v 1.1 97/04/04 17:52:31 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

if 	ERROR_CHECK
CONVERT_GSTRING_ELEMENT_NOT_SUPPORTED	enum	FatalErrors
CONVERT_GSTRING_BAD_LINKAGE		enum	FatalErrors
CONVERT_ERROR				enum	FatalErrors
endif

ConvertCancelTriggerClass class GenTriggerClass
ConvertCancelTriggerClass endc

;------------------------------------------------------------------------------
;
;			1.X VM File Structures
;
;------------------------------------------------------------------------------

VM_FILE_SIG	=	0adebh

VM_HDR_SIG	=	0fbh		; VM_headerSig

VMBlockType	etype	byte, -1, -2	; Values for VMBH_sig for in-use blocks.
					;  Starts at -1 to avoid valid block
					;  range. Skips by -2 to make sure low
					;  bit is set.
    VMBT_USED	enum	VMBlockType	; Block in-use and ordinary
    VMBT_DUP	enum	VMBlockType	; A duplicated handle. A VMBT_USED block
					;  is transformed into this when it is
					;  first written back to the file in
					;  BACKUP mode. A VMBT_BACKUP handle is
					;  allocated to hold the original file
					;  space while new space is allocated to
					;  this block.
    VMBT_BACKUP	enum	VMBlockType	; Part of the file's backup copy. The
					;  VMBH_uid field contains the duplicate
					;  handle.
    VMBT_ZOMBIE	enum	VMBlockType	; This is a USED/DUP block that has been
					;  freed while the file is operating in
					;  BACKUP mode. The handle can't go
					;  away until VMSave has been called,
					;  as VMRevert will need it if called.
VM_IN_USE_BIT	equ	1

VMBlockFlags	record
    :5
    VMBF_PRESERVE_HANDLE:1		; Preserve block's handle throughout
					; the life of the file (2.0 only)
    VMBF_HAS_BACKUP:1			; Set if a block is transformed from
					;  VMBT_USED to VMBT_DUP and a
					;  VMBT_BACKUP block was created for the
					;  previous file space.
    VMBF_LMEM:1				; Non-zero if block run by LMem module
					;  Used in EC version to call
					;  ECLMemInitHeap to initialize the
					;  ends of all the chunks and the free
					;  space.
VMBlockFlags	end

VM_NUM_EXTRA             =      3	;Number of extra unassigned to add
					;before calling VMAllocAndAttach

VMSizeAndPos	struc
    VMSAP_size	word
    VMSAP_pos	dword
VMSizeAndPos	ends
;
;A VM file begins with a VMFileHeader that is read when the file is opened.
;

VMFileHeaderOld	struc
    VMFHO_gfh		GeosFileHeaderOld;data common to all geos data files
    VMFHO_signature	dw	?	;signature
    VMFHO_headerSize	dw	?	;size of header block
    VMFHO_headerPos	dd	?	;position in file of the header block
VMFileHeaderOld	ends

VMFileHeader	struct
    VMFH_signature	dw	?	;signature
    VMFH_headerSize	dw	?	;size of header block
    VMFH_headerPos	dd	?	;position in file of the header block
    VMFH_updateCounter	dw	?	;counter incremented on changes
    VMFH_updateType	VMOperation	;operation being performed
    VMFH_reserved	dw	6 dup (?)	;reserved for future use
VMFileHeader	ends

;
;The VM_blockTable is an array of VMBlockHandles that store information about
;each block.  The first entry is for the VMHeader itself.
;

;VM block handle structure for used blocks

VMBlockHandle	struc
    VMBH_memHandle	hptr		;memory handle (0 if not in memory)
    VMBH_sig		VMBlockType	;Type of used block (low bit is set)
    VMBH_flags		VMBlockFlags	;Flags for the block
    VMBH_uid		dw		;user associated id
    VMBH_fileSize	sword		;size of block on disk
    VMBH_filePos	sdword		;position on block on disk
VMBlockHandle	ends

;VM block handle structure for free blocks (assigned and unassigned)

VMFreeBlockHandle	struc
    VMFBH_nextPtr	nptr.VMFreeBlockHandle	;handle of next block in the
					    ; free list
    VMFBH_prevPtr	nptr.VMFreeBlockHandle	;handle of prev block in the
					    ; free list
    VMFBH_fileSize	sdword	?	;unassigned if size = 0, else assigned
    VMFBH_filePos	sdword	?	;position on block on disk
VMFreeBlockHandle	ends

VMAttributesOld	record
    VMAO_SYNC_UPDATE:1
    VMAO_OBJECT_RELOC:1
    VMAO_PRESERVE_HANDLES:1
    VMAO_NOTIFY_DIRTY:1
    VMAO_NO_DISCARD_IF_IN_USE:1
    VMAO_COMPACT_OBJ_BLOCK:1
    :1
VMAttributesOld	end
;
;The VMH_headerHandle in the VMHandle is the handle of the VM header block.
;The VM header block stores all the administration data about the Vm file.
;The VM header is stored as the first VM block of the file.
;

VMHeaderOld	struc
    VMHO_headerSig	dw	VM_HDR_SIG
    VMHO_assignedPtr	nptr.VMFreeBlockHandle 	;first blk on assigned list
    VMHO_lastAssigned	nptr.VMFreeBlockHandle 	;last blk on assigned list
    VMHO_unassignedPtr	nptr.VMFreeBlockHandle 	;first blk on unassigned list
    VMHO_lastHandle	dw	?		;non-inclusive end of range
					    	;of valid block handles (i.e.
					    	;the size of the header block)

    VMHO_numAssigned	dw	?		;number of assigned handles
    VMHO_numUnassigned	dw	?		;number of unassigned handles
    VMHO_numUsed	dw	?		;number of used handles incl hdr
    VMHO_numResident		dw	?	;number of resident handles
    VMHO_numExtraUnassigned	dw	?	;number of extra unassigned
					    	; handles required by the user
					    	; of the VM file

    VMHO_mapBlock	nptr.VMBlockHandle	;handle of map block
    VMHO_compactionThreshold	sword	?	;percentage of file dedicated
					    	; to used blocks below which
					    	; compaction is triggered
    VMHO_usedSize	sdword	?		;total size of all used blks
    VMHO_attributes	VMAttributes	0	; Various file attributes
    VMHO_noCompress	BooleanByte	BB_FALSE;T/F flag to tell VMDoCompress
					    	; whether it should do anything.
					    	; Normally this is F, but it is
					    	; set T before writing a block
					    	; in VMUpdateAndRidBlk, when
					    	; the memory required for the
					    	; compression is not to be had.
    VMHO_mapExtra	word	?		; if non-zero then VMHO_mapBlock
						; is a VM block handle and
						; this is the chunk handle of
						; the "map object"
			    align	4
    VMHO_blockTable	label	VMBlockHandle ;block table
VMHeaderOld	ends

;
;The VMH_headerHandle in the VMHandle is the handle of the VM header block.
;The VM header block stores all the administration data about the Vm file.
;The VM header is stored as the first VM block of the file.
;

VMHeader	struct
    VMH_headerSig	dw	VM_HDR_SIG
    VMH_assignedPtr	nptr.VMFreeBlockHandle 	;first blk on assigned list
    VMH_lastAssigned	nptr.VMFreeBlockHandle 	;last blk on assigned list
    VMH_unassignedPtr	nptr.VMFreeBlockHandle 	;first blk on unassigned list
    VMH_lastHandle	dw	?		;non-inclusive end of range
					    	;of valid block handles (i.e.
					    	;the size of the header block)

    VMH_numAssigned	dw	?		;number of assigned handles
    VMH_numUnassigned	dw	?		;number of unassigned handles
    VMH_numUsed		dw	?		;number of used handles incl hdr
    VMH_numResident		dw	?	;number of resident handles
    VMH_numExtraUnassigned	dw	?	;number of extra unassigned
					    	; handles required by the user
					    	; of the VM file

    VMH_mapBlock	nptr.VMBlockHandle	;handle of map block
    VMH_compactionThreshold	sword	?	;percentage of file dedicated
					    	; to used blocks below which
					    	; compaction is triggered
    VMH_usedSize	sdword	?		;total size of all used blks
    VMH_attributes	VMAttributes	0	; Various file attributes
    VMH_noCompress	BooleanByte	BB_FALSE;T/F flag to tell VMDoCompress
					    	; whether it should do anything.
					    	; Normally this is F, but it is
					    	; set T before writing a block
					    	; in VMUpdateAndRidBlk, when
					    	; the memory required for the
					    	; compression is not to be had.
    VMH_dbMapBlock	word	?		; map block for db code
			    align	4
    VMH_blockTable		label	VMBlockHandle ;block table
VMHeader	ends

;
; Various and sundry constants.
;
DB_OLD_MAP_ID	=	01111h		; id passed to VMAlloc when creating
					;  the map block.
DB_OLD_GROUP_ID	=	02222h		; id passed to VMAlloc when creating
					;  a new group.
DB_OLD_ITEM_BLOCK_ID =	03333h		; id passed to VMAlloc when creating
					;  a new item block.

;
; Amount by which to adjust all file positions.
;
CVM_POS_ADJUST	equ size VMFileHeaderOld - size VMFileHeader

CVM_FILE_BUF_SIZE	= 8192

