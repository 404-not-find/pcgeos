COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		mailboxMacro.def

AUTHOR:		Adam de Boor, Apr 19, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	4/19/94		Initial revision


DESCRIPTION:
	
		
	$Id: mailboxMacro.def,v 1.1 97/04/05 01:19:58 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CmpTok
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Compare one of our ubiquitous 32-bit tokens against a
		given manufacturer ID and id number

PASS:		expr	= where the token is stored. may be an address of
			  a dword or a register pair (may not include a
			  segment register, however)
		manuf	= manufacturer ID sought
		id	= id number sought
		[faildest] = if given, it's the label to which control will
			     branch if the token doesn't match. control will
			     continue after the macro only if the expr
			     matches the given 32-bit token

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	4/19/94		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
CmpTok		macro	expr, manuf, id, faildest
		local	rl, rh, regargs, done
regargs		= 0
	_ParseDWordArg <(expr)>, rl, rh, regargs, <CmpToken>

		cmp	rh, manuf
ifb <faildest>
		jne	done
else
		jne	faildest
endif
		cmp	rl, id
ifb <faildest>
done:
else
		jne	faildest
endif
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MovMsg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Move cxdx to dxax or vice versa, trashing whichever register
		is not in the destination

PASS:		dest	= destination register pair
		src	= src register pair

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	5/26/94		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
MovMsg		macro	dest, src
ifidn <dest>, <dxax>
 ifidn <src>, <cxdx>
		mov_tr	ax, cx
		xchg	ax, dx
 elifidn <src>, <axdi>
		mov_tr	dx, ax
		mov_tr	ax, di
 else
		movdw	<dest>, <src>
 endif
elifidn <dest>, <cxdx>
 ifidn <src>, <dxax>
 		xchg	ax, dx
		mov_tr	cx, ax
 else
		movdw	<dest>, <src>
 endif
elifidn <dest>, <axdi>
 ifidn <src>, <dxax>
		mov_tr	di, ax		; di <- item
		mov_tr	ax, dx		; ax <- group
 else
		movdw	<dest>, <src>
 endif
else
		movdw	<dest>, <src>
endif
		endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DerefDI
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Efficiently dereferences ds:si to ds:di for the given class

PASS:		class	= rootname of the class whose instance data are
			  desired (e.g. "Gen" is the rootname of "GenClass")

PSEUDO CODE/STRATEGY:
		This relies on each segment where this macro is used having
		a <segname>DerefGen routine defined
		
		If the class isn't in Gen's master group, the standard two-
		instruction sequence is assembled instead.

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	9/28/94		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
DerefDI		macro	class
		local	rout
	if class&_offset eq Gen_offset
		rout catstr @CurSeg, <DerefGen>
		call	rout
	else
		mov	di, ds:[si]
		add	di, ds:[di].class&_offset
	endif
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CheckNextField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

PASS:		

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	4/24/95		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
CheckNextField macro	f1, f2
	.assert offset f1 eq offset f2 + size f2, <f1 doesn't follow f2>
		endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		StructPushBegin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Begins a section of code that pushes the fields of a 
		structure

PASS:		str	= name of the structure being pushed

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/14/95	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
StructPushBegin	macro	str
	_sp_loc	= size (str)
		endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		StructPushField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Push another field of the structure.

PASS:		field	= name of the field being pushed
		vals	= comma-separated list of values to push (they are
			  pushed left to right). Entire list must be a single
			  argument, so use <>'s around the whole thing when
			  more than one value is passed.

PSEUDO CODE/STRATEGY:
		uses irp to break vals into its individual components and
		tracks the number of bytes thus pushed. Subtracting that
		size from the current _sp_loc should yield the offset of
		the field.

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/14/95	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
StructPushField	macro	field, vals
		local	n
	n	= 0
	irp	x, <vals>
		push	x
		n = n + 2
	endm
	_sp_loc = _sp_loc - n
	.assert _sp_loc eq offset (field), <Not pushing field at the right offset>
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		StructPushSkip
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Skip pushing fields of the structure.

PASS:		fields	= comma-separated list of field names to skip (they
			  are skipped left to right).  Entire list must be a
			  single argument, so use <>'s around the whole thing
			  when more than one field is passed.

PSEUDO CODE/STRATEGY:
		uses irp to break fields into its individual components and
		tracks the number of bytes thus skipped. Subtracting that
		size from the current _sp_loc should yield the offset of
		the field.

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AY	4/23/96   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
StructPushSkip		macro	fields
		local	y
	y	= 0
	irp	x, <fields>
		y = y + size x
	_sp_loc = _sp_loc - size x
	.assert _sp_loc eq offset (x), <Not skipping field x at the right offset>
	endm
if	y eq 1
		dec	sp
elif	y eq 2
		dec	sp
		dec	sp
else
		sub	sp, y
endif
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		StructPushEnd
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	All the fields have been pushed. Make sure they all have.

PASS:		nothing

PSEUDO CODE/STRATEGY:
		_sp_loc should have been reduced to 0 by the last 
		StructPushField

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	11/14/95	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
StructPushEnd	macro
	.assert _sp_loc eq 0, <didn't push enough fields>
		endm
	
