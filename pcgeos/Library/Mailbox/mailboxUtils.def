COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		mailboxUtils.def

AUTHOR:		Adam de Boor, Apr  6, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	4/ 6/94		Initial revision


DESCRIPTION:
	Utility functions used by the other parts of the Mailbox library
		
GLOBAL FUNCTIONS:
	MailboxLoadDataDriver
	MailboxLoadTransportDriver
	
	MailboxCreateStreamGString
	MailboxCheckStorageTypeSupported

	$Id: mailboxUtils.def,v 1.1 97/04/05 01:20:07 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

Resident	segment	resource

global	UtilUnlockDS:far
;	Desc:	Unlock the block pointed to by DS. The block must have its
;		handle as its first word.
;
;	Pass:	ds	= segment of block whose first word is its handle.
;	Return:	nothing (flags preserved)
;

global	UtilVMDirtyDS:far
;	Desc:	Dirty the block pointed to by DS. The block must have its
;		handle as its first word.
;
;	Pass:	ds	= segment of block whose first word is its handle.
;	Return:	nothing (flags preserved)
;

global	UtilVMUnlockDS:far
;	Desc:	Dirty the block pointed to by DS. The block must have its
;		handle as its first word.
;
;	Pass:	ds	= segment of block whose first word is its handle.
;	Return:	nothing (flags preserved)
;

Resident	ends

UtilCode	segment	resource

global	UtilFormatDateTime:far
;	Desc:	Format a FileDate + FileTime into a newly-allocated lmem
;		chunk.
;
;	Pass:	bx	= FileTime
;		ax	= FileDate
;		cx	= UtilFormatDateTimeFormat
;		ds	= lmem block in which to place the result
;	Return:	*ds:ax	= resulting string.
;
UtilFormatDateTimeFormat	etype	word
    UFDTF_SHORT_FORM		enum UtilFormatDateTimeFormat
    ; mm/dd hh:mm pm
    
    UFDTF_LONG_FORM		enum UtilFormatDateTimeFormat
    ; Month day, year at hh:mm pm

    UFDTF_RETRY			enum UtilFormatDateTimeFormat
    ; Retry hh:mm

    UFDTF_SEND			enum UtilFormatDateTimeFormat
    ; Send hh:mm

global	UtilAddToMailboxGCNList:far
;	Desc:	Add the given object to the given GCN list in the mailbox
;		application object
;
;	Pass:	*ds:si	= object to add
;		ax	= MailboxGCNListType
;	Return:	nothing
;

global	UtilAddToMailboxGCNListSync:far
;	Desc:	Add the given object to the given GCN list in the mailbox
;		application object, returning only once the addition is
;		accomplished.
;
;	Pass:	*ds:si	= object to add
;		ax	= MailboxGCNListType
;	Return:	nothing
;

global	UtilRemoveFromMailboxGCNList:far
;	Desc:	Remove the given object from the given GCN list in the mailbox
;		application object
;
;	Pass:	*ds:si	= object to remove
;		ax	= MailboxGCNListType
;	Return:	nothing
;

global	UtilRemoveFromMailboxGCNListSync:far
;	Desc:	Remove the given object synchronously from the given GCN list
;		in the mailbox application object. Upon return from this
;		function, the object will have been removed.
;
;	Pass:	*ds:si	= object to remove
;		ax	= MailboxGCNListType
;	Return:	nothing
;

global	UtilRegisterFileChangeCallback:far
;	Desc:	Arrange for a callback routine to be called whenever there's
;		a change in the filesystem.
;
;	Pass:	ax	= callback data
;		cx:dx	= vfptr of routine to call:
;			  Pass:
;				ax	= callback data
;				dx	= FileChangeNotificationType (never
;					  FCNT_BATCH)
;				es:di	= FileChangeNotificationData
;			  Return:
;			  	nothing
;	Return:	nothing
;

global	UtilSendToMailboxApp:far
;	Desc:	Send a message to the mailbox application object
;
;	Pass:	ax	= message
;		cx, dx, bp = message data
;	Return:	nothing
;

global	UtilCallMailboxApp:far
;	Desc:	Call the mailbox application object
;
;	Pass:	ax	= message
;		cx, dx, bp = message data
;		di	= MessageFlags (MF_CALL added by routine)
;	Return:	ax, cx, dx, bp = as returned
;

global	UtilForceQueueMailboxApp:far
;	Desc:	Force-queue a message to the  mailbox application object
;
;	Pass:	ax	= message
;		cx, dx, bp = message data
;		di	= MessageFlags (MF_FORCE_QUEUE added by routine)
;	Return:	ax, cx, dx, bp = as returned
;

global	UtilMangleMoniker:far
;	Desc:	Replace the \1 in the object's current moniker with the text
;		in the passed chunk.
;
;	Pass:	*ds:si	= Generic object whose moniker is to be mangled
;		*ds:ax	= text with which to replace \1 in the current moniker
;	Return:	ds	= fixed up
;

global	UtilMangleCopyOfMoniker:far
;	Desc:	Duplicate the object's current moniker and replace the \1 in
;		the duplicate with the text in the passed chunk.
;
;	Pass:	*ds:si	= Generic object whose moniker is to be mangled
;		*ds:ax	= text with which to replace \1
;	Return:	GI_visMoniker replaced with handle of copy
;		ds	= fixed up
;

global	UtilSetMonikerFromTemplate:far
;	Desc:	Replace the object's current moniker with a mangled copy
;		of the passed template.
;
;	Pass:	*ds:si	= Generic object whose moniker is to be replaced
;			  (may *NOT* be realized)
;		*ds:ax	= template moniker
;		*ds:bx	= text with which to replace \1
;	Return:	ds	= fixed up
;		GI_visMoniker replaced with the mangled copy
;

global	UtilReplaceFirstMarkerInTextChunk:far
;	Desc:	Replace the first \1 in the text chunk of a text object with
;		the null-terminated text in a chunk pointed to by an optr.
;
;	Pass:	*ds:si	= GenText object
;		^lcx:dx	= string to store
;	Return:	ds	= fixed up
;

global	UtilReplaceMarkerInTextChunk:far
;	Desc:	Replace the first instance of the passed marker in the text
;		chunk of a text object with the null-terminated text in a chunk
;		pointed to by an optr.
;
;	Pass:	*ds:si	= GenText object
;		^lcx:dx	= string to store
;		ax	= marker to look for ('\1', '\2', '\3', etc.)
;	Return:	ds	= fixed up
;

global	UtilCheckIfMarkerExists:far
;	Desc:	Utility routine to check if a marker exists in the text chunk
;		of a text object
;
;	Pass:	*ds:si	= GenText object
;		ax	= marker to look for ('\1', '\2', '\3' etc)
;	Return:	ZF set if marker exists
;

global	UtilReplaceFirstMarkerInStringChunk:far
;	Desc:	Utility routine to replace a \1 marker in the string chunk
;		with the null-terminated string in a chunk pointed to by an
;		optr.
;
;	Pass:	*ds:si	= GenText object
;		^lcx:dx	= string to store
;	Return:	ds	= fixed up
;

global	UtilLoadTransportDriverWithError:far
;	Desc:	Attempt to load a transport driver, putting up an error box
;		if it can't be loaded.
;
;	Pass:	cxdx	= MailboxTransport
;	Return:	carry set on error:
;			ax	= GeodeLoadError
;		carry clear if ok:
;			bx	= driver handle
;

global	UtilGetFutureFileDateTime:far
;	Desc:	Get a FileDate & FileTime for a time some hours + minutes
;		from now.
;
;	Pass:	cl	= # minutes extension (0-59)
;		ch	= # hours extension (0-231)
;	Return:	dx	= FileTime
;		ax	= FileDate
;	Destroyed:	cx
;

if ERROR_CHECK
global	ECUtilAssertNotRealized:far
;	Desc:	Make sure a generic object is not actually "realized", so we
;		can mess with its moniker or other attributes without fear.
;
;	Pass:	*ds:si	= generic object
;	Return:	nothing
;
endif

global	UtilLocateFilenameInPathname:far
;	Desc:	Locate the filename component within the pathname of a file.
;
;	Pass:	es:di	= pathname to scan
;	Return:	es:di	= filename component (es unchanged)
;		cx	= offset (# of chars) of last backslash within pathname
;	Destroyed:	nothing
;

global	UtilInteractionComplete:far
;	Desc:	Tell the passed GenInteraction that it's complete
;
;	Pass:	*ds:si	= GenInteraction
;	Return:	nothing
;	Destroyed:	ax, cx, dx
;

global	MailboxLoadDataDriver:far
global	MailboxLoadTransportDriver:far
global	MailboxLoadDataDriverWithError:far
global	MailboxFreeDriver:far
global	MAILBOXPUSHTOMAILBOXDIR:far
global	MAILBOXCHANGETOMAILBOXDIR:far

global	UtilCreateDialogFixupDS:far
;	Desc:	Use UserCreateDialog to duplicate a dialog and link it below
;		the current application object, then make sure DS points to
;		what it pointed to on entry
;
;	Pass:	ds	= segment to be fixed up
;		^lbx:si	= root of not-usable dialog, in its own discarded,
;			  sharable, read-only resource, to be duplicated
;	Return:	^lbx:si	= duplicated, usable, child-of-current-thread's-app-obj
;			  dialog
;		ds	= fixed up
;	Destroyed:	nothing
;

global	UtilCopyChunk:far
;	Desc:	Copy a chunk directly from one lmem block to another.
;
;	Pass:	ds	= destination block
;		^lbx:si	= chunk to copy
;	Return:	*ds:si	= duplicate
;		es	= fixed up, if same as DS on entry
;	Destroyed:	nothing
;

global	UtilCopyChunkWithHeader:far
;	Desc:	Copy a chunk from one lmem block to another, leaving room
;		for a header in the destination chunk.
;
;	Pass:	ds	= destination block
;		^lbx:si	= chunk to copy
;		cx	= number of bytes to leave at the start of the
;			  destination chunk
;	Return:	*ds:si	= duplicate
;		es	= fixed up, if same as DS on entry
;	Destroyed:	nothing
;

global	UtilNewDataDriver:far
;	Desc:	Callback function for the data driver DMap when a data driver
;		is added to the map. It's responsible for asking the driver
;		for its custom error string, if it has one.
;
;	Pass:	ds:si	= driver name
;		cxdx	= driver token
;	Return:	nothing
;	Destroyed:	ax, bx, cx, dx, si, di, es, ds all allowed
;

global	UtilChangeClass:far
;	Desc:	Change the class of an object to the indicated one. This is
;		necessary if the current class of the object might be about
;		to go away because the caller is about to free a driver or
;		remove a reference to a library.
;
;	Pass:	*ds:si	= object to change
;		es:di	= new class
;	Return:	ds	= fixed up
;

global	UtilDoConfirmation:far
;	Desc:	Put up a confirmation box via UserStandardDialogOptr
;
;	Pass:	si	= chunk handle of string to use (in ROStrings)
;	Return:	ax	= InteractionCommand
;	Destroyed:	ds/es if pointing to object block
;

global	UtilDoError:far
;	Desc:	Put up an error box via UserStandardDialogOptr
;
;	Pass:	si	= chunk handle of string to use (in ROStrings)
;	Return:	ax	= InteractionCommand
;	Destroyed:	ds/es if pointing to object block
;


global	UtilDoMultiResponse:far
;	Desc:	Put up a confirmation box via UserStandardDialogOptr
;
;	Pass:	si	= chunk handle of string to use (in ROStrings)
;		bx:cx	= fptr(not vfptr) to StandardDialogResponseTriggerTable
;	Return:	ax	= InteractionCommand
;	Destroyed:	ds/es if pointing to object block
;

global	UtilUpdateAdminFile:far
;	Desc:	Update the admin file onto the disk.
;
;	Pass:	nothing
;	Return:	nothing
;


UtilCode	ends

Init	segment	resource

global	UtilFixHugeArray:near
;	Desc:	Set the CAH_curOffset field in all chunk arrays in a huge
;		array back to zero.
;
;	Pass:	^vbx:di	= huge array
;	Return:	nothing
;

global	UtilFixChunkArray:near
global	UtilFixChunkArrayFar:far
;	Desc:	Set the CAH_curOffset field in the chunk array back to zero.
;
;	Pass:	*ds:si	= chunk array
;	Return:	nothing
;

global	UtilFixOneChunkArrayInBlock:near
;	Desc:	Fix the chunk array at the first chunk in an lmem block.
;
;	Pass:	^vbx:ax	= lmem block whose first chunk is the array
;	Return:	nothing
;

global	UtilFixTwoChunkArraysInBlock:near
;	Desc:	Fix the chunk arrays at the first and second chunks in an
;		lmem block.
;
;	Pass:	^vbx:ax	= lmem block whose first and second chunks are the
;			  arrays
;	Return:	nothing
;

Init	ends
