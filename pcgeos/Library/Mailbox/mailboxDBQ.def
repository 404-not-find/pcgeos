COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	Clavin
MODULE:		DB Item Queue Management
FILE:		mailboxDBQ.def

AUTHOR:		Adam de Boor, Mar 31, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	3/31/94		Initial revision


DESCRIPTION:
	Interface to DBQ module.
	
	Each DBQ maintains a list of DB items, parcelled among multiple
	groups by means of the UNGROUPED support of the DB code.
	
	$Id: mailboxDBQ.def,v 1.1 97/04/05 01:19:53 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

DBQ		segment	resource

global	DBQCreate:far
;	Desc:	Creates a DB-item queue.
;
;	Pass:	bx	= VM file to use
;		ax	= number of bytes in each item (for DBQAlloc)
;		cx	= entry-point number of routine to call to clean up a
;			  queue entry, when appropriate. DBQ_NO_CLEANUP means
;			  the item should just be freed. When the callback
;			  returns, DBFree will be called for the item.
;
;			  Pass:	bx	= VM file handle
;				dxax	= DBGroupAndItem
;			  Return:	nothing
;
;		dx	= entry-point number of routine to call when a new
;			  item is added to the queue (DBQ_NO_ADD_ROUTINE if
;			  none)
;
;			  Pass:	bx	= VM file handle
;				di	= queue handle
;				dxax	= DBGroupAndItem
;			  Return:	nothing
;
;	Return:	carry set if couldn't allocate
;		carry clear if queue allocated:
;			ax	= queue handle for later calls
;

DBQ_NO_CLEANUP		equ	-1

DBQ_NO_ADD_ROUTINE	equ	-1

global	DBQAlloc:far
;	Desc:	Allocate an item for the queue.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;	Return:	carry set if couldn't allocate:
;			dxax	= 0_0
;		carry clear if item allocated:
;			dxax	= DBGroupAndItem. item's DBQData is properly
;				  initialized
;

global	DBQAdd:far
;	Desc:	Add a DBGroupAndItem to the end of a DBQ
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		dxax	= DBGroupAndItem to add
;	Return:	carry set if couldn't append item
;		carry clear if item appended
;

global	DBQRemove:far
;	Desc:	Remove a DBGroupAndItem from a DBQ.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		dxax	= DBGroupAndItem to remove
;	Return:	carry set if couldn't remove (item not in queue)
;		carry clear if item removed
;

global	DBQFree:far
;	Desc:	Free an item from a queue. The item will not actually be freed
;		until everyone that's using it is done using it.
;
;	Pass:	bx	= VM file containing the queue & item
;		dxax	= DBGroupAndItem to free
;	Return:	nothing
;

global	DBQGetItem:far
;	Desc:	Locate a DBGroupAndItem given its index in the queue. Must be
;		matched by a call to DBQDelRef when done using the item.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		cx	= index #
;	Return:	carry set if not that many entries in the queue:
;			dxax	= 0_0
;		carry clear if entry returned:
;			dxax	= DBGroupAndItem
;

global	DBQGetItemNoRef:far
;	Desc:	Locate a DBGroupAndItem given its index in the queue.
;		Caller must ensure the item remains in the queue so long as
;		the caller is using the DBGroupAndItem, as no additional
;		reference is placed on the item.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		cx	= index #
;	Return:	carry set if not that many entries in the queue:
;			dxax	= 0_0
;		carry clear if entry returned:
;			dxax	= DBGroupAndItem
;

global	DBQEnum:far
;	Desc:	Enumerate through the entries in a queue, calling a callback
;		for each entry.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		cx:dx	= callback routine:
;			  Pass:	bx	= VM file containing the queue
;				sidi	= DBGroupAndItem
;				cx, dx, bp, es = as returned by previous call
;						 (bp for first callback as
;						 passed to DBQEnum, while
;						 cx = dx = 0)
;			  Return: carry set to stop enumerating:
;			  		ax, cx, dx, bp, es = to return to
;							     caller of DBQEnum
;				  carry clear to keep enumerating:
;					cx, dx, bp, es = to pass to next
;							 callback
;					ax = destroyed
;			  Destroy: si, di, bx
;
;	Return:	carry set if callback stopped iteration.
;		carry clear if callback didn't stop iteration.
;		ax, cx, dx, bp, es = as returned by callback (ax, cx, dx all 0
;				 if queue was empty)
;

global	DBQMatch:far
;	Desc:	Match bytes in each entry against the passed buffer and
;		store the DBGroupAndItem for each match in the DBQ
;		whose handle is returned.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;		dx:si	= buffer containing comparison bytes
;		cx	= number of bytes to compare
;		ax	= offset within each entry of data to compare
;	Return:	carry set on error:
;			ax	= 0
;		carry clear on success:
;			ax	= handle of DBQ containing the
;				  DBGroupAndItem refs of those elements
;				  that matched (may be empty)
;

global	DBQDestroy:far
;	Desc:	Destroy a queue. The items within the queue will be
;		freed when their reference counts drop to 0.
;
;		Note: it is the responsibility of the caller to make
;		sure the queue is not used during or after the destruction.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;	Return:	nothing
;

global	DBQAddRef:far
;	Desc:	Add another reference to a DB item from a DBQ. To be used
;		only by DBQEnum callback routines that wish to store the
;		DBGroupAndItem away someplace.
;
;	Pass:	bx	= VM file containing the item
;		dxax	= DBGroupAndItem
;	Return:	nothing (flags preserved)
;

global	DBQDelRef:far
;	Desc:	Remove a reference to a DB item from a DBQ. To be used
;		by things that use a DBGroupAndItem that was stored by a
;		DBQEnum callback routine, when they will no longer reference
;		the item in question, and by callers of DBQGetItem.
;
;	Pass:	bx	= VM file containing the item
;		dxax	= DBGroupAndItem
;	Return:	nothing (flags preserved)
;	Destroyed:	dx, ax
;

EC <global DBQGetCount:far>
NEC <DBQGetCount equ <HugeArrayGetCount>>
;	Desc:	Get the number of entries in the queue.
;
;	Pass:	bx	= VM file containing the queue
;		di	= queue handle
;	Return:	dxax	= number of elements in the queue.
;

global	DBQCheckMember:far
;	Desc:	See if the passed item is a member of the passed queue.
;
;	Pass:	bx	= VM file containing the item & queue
;		di	= queue handle
;		dxax	= DBGroupAndItem
;	Return:	carry set if the item is in the queue
;		carry clear if it's not
;

global	DBQGetIndex:far
;	Desc:	If the passed item is a member of the passed queue, return
;		its index within the queue. The caller is responsible for
;		making sure the index won't change (by having items removed
;		from the queue) so long as it needs to use the index.
;
;	Pass:	bx	= VM file containing the item & queue
;		di	= queue handle
;		dxax	= DBGroupAndItem
;	Return:	carry set if item is not in the queue
;			cx	= destroyed
;		carry clear if item is in the queue:
;			cx	= index of the item
;

DBQ	ends

Init	segment	resource

global	DBQCheckIsDBQ:near
;	Desc:	See if the passed thing is actually a DBQ. Used when opening
;		the admin file after a crash, to get rid of unwanted references
;		to messages from queues that are no longer in-use.
;
;	Pass:	^vbx:di	= potential DBQ
;	Return:	carry set if it is a DBQ
;		carry clear if it ain't
;

Init	ends
