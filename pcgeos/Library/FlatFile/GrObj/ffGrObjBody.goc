/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  ffGrObjBody.goc
 * FILE:	  ffGrObjBody.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Oct  6, 1992
 *
 * DESCRIPTION:
 *	This file contains the definitions and handlers for the GrObj
 *	body subclass in the flat file library.
 *	
 *
 * RCS STAMP:
 *	$Id: ffGrObjBody.goc,v 1.1 97/04/04 18:03:36 newdeal Exp $
 *
 ***********************************************************************/

/***********************************************************************
		Include Files
 ***********************************************************************/

#include <geoworks.h>		/* PC/GEOS Standard Application.	*/
@include <stdapp.goh>

#include <Ansi/string.h>	/* Standard C.	*/

@include <gcnlist.goh>
@include <ffile.goh>		/* FlatFile Libraries.	*/
@include <grobj.goh>
@include <math.goh>
@include <Objects/FlatFile/ffileC.goh>
@include <Objects/FlatFile/ffDbase.goh>
@include <Objects/FlatFile/ffGrObjC.goh>
@include <Objects/gDocC.goh>


/***********************************************************************
	    	FFGrObjBodyClass Declaration
 ***********************************************************************/
@classdecl	FFGrObjBodyClass;

/***********************************************************************
	    	Forward Delcarations
 ***********************************************************************/
Boolean FFGrObjInDesignMode(optr oself);

/***********************************************************************
 *
 * MESSAGE:	MSG_META_CLIPBOARD_PASTE for FFGrObjBodyClass
 *
 * DESCRIPTION:	This message is sent out when objects have been pasted
 *	    	or duplicated into this body.  The flat file library needs
 *	    	to know when this happens to attach pasted fields into the
 *	    	database.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	9/22/92		Initial version
 *	jeremy	12/21/92    	Added duplicate/clone message handling
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_META_CLIPBOARD_PASTE,
    	    	    	  MSG_GB_CLONE_SELECTED_GROBJS,
    	    	    	  MSG_GB_DUPLICATE_SELECTED_GROBJS
{
    EventHandle event;
    
    /*
     * If we're in data entry mode, don't allow the paste/clone/duplicate.
     */
    if (!FFGrObjInDesignMode(oself)) {
	return;
    }
    
    /*
     * We're adding functionality to the paste/duplicate, so call the
     * superclass first.
     */
    @callsuper();

    /*
     * Tell the flat file database that we just had something pasted/duplicated
     * in.
     */
    event = @record FlatFileDatabaseClass::
	MSG_FFD_NOTIFY_CLIPBOARD_PASTE(oself);

    @send oself::MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS(event);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GB_CUSTOM_DUPLICATE_SELECTED_GROBJS for FFGrObjBodyClass
 *
 * DESCRIPTION:	This message is sent out when a custom duplicate is requested.
 *	    	The flat file library needs to know when this happens to
 *	    	attach pasted fields into the database.
 *
 * PARAMETERS:
 *	void (GrObjBodyCustomDuplicateParams *cdParams)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	9/22/92		Initial version
 *	jeremy	12/21/92    	Added duplicate/clone message handling
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_GB_CUSTOM_DUPLICATE_SELECTED_GROBJS
{
    EventHandle event;
    
    /*
     * If we're in data entry mode, don't allow the duplicate.
     */
    if (!FFGrObjInDesignMode(oself)) {
	return;
    }

    /*
     * We're adding functionality to the paste/duplicate, so call the
     * superclass first.
     */
    @callsuper();

    /*
     * Tell the flat file database that we just had something pasted/duplicated
     * in.
     */
    event = @record FlatFileDatabaseClass::
	MSG_FFD_NOTIFY_CLIPBOARD_PASTE(oself);

    @send oself::MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS(event);
}


/***********************************************************************
 *
 * MESSAGE:	MSG_GB_QUICK_PASTE for FFGrObjBodyClass
 *
 * DESCRIPTION:	We intercept this message when a quick-copy is done
 *	    	to re-attach fields into the database.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	12/29/92	Initial version
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_GB_QUICK_PASTE
{
    EventHandle event;
    
    /*
     * If we're in data entry mode, don't allow the quick-copy.
     */
    if (!FFGrObjInDesignMode(oself)) {
	return;
    }

    /*
     * We're adding functionality to the quick copy, so call the
     * superclass first.
     */
    @callsuper();

    /*
     * Tell the flat file database that we just had something qiuck-copied
     * in.
     */
    event = @record FlatFileDatabaseClass::
	MSG_FFD_NOTIFY_CLIPBOARD_PASTE(oself);

    @send oself::MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS(event);
}


/***********************************************************************
 *
 * FUNCTION:	FFGrObjInDesignMode
 *
 * DESCRIPTION:	This function calls the database to ask if we're in
 *	    	design mode or not.  Returns TRUE if in design mode,
 *	    	FALSE otherwise.
 *
 * PARAMETERS:	oself - pointer to the current FFGrObjBody.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	12/31/92	Initial version
 *
 ***********************************************************************/
Boolean
FFGrObjInDesignMode(optr oself)
{
    EventHandle event;
    
    /*
     * Ask the flat file database what mode we're in.
     */
    event = @record FlatFileDatabaseClass::MSG_FFD_GET_CURRENT_MODE();
    return((@call {MSG_FFD_GET_CURRENT_MODE}
	    	oself::MSG_VIS_VUP_CALL_OBJECT_OF_CLASS(event)) == MT_DESIGN);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFGB_SET_FIELD_APPEARENCE_FLAGS for FFGrObjBodyClass
 *
 * DESCRIPTION:	This message is called whenever a field becomes selected.
 *	    	It sets a flag in instance data to indicate that
 *	    	MSG_FFGB_UPDATE_FIELD_APPEARENCE_UI should be called when
 *	    	the body becomes unsuspended.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	10/7/92		Initial version
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_FFGB_SET_FIELD_APPEARENCES_FLAG
{
    if (pself->GBI_suspendCount) {
	/*
	 * We're in the middle of doing something to more than one field.
	 * Set the appearence update flag and leave.
	 */
	pself->FFGBI_updateFieldAppearences |= FFGBUF_UPDATE_APPEARENCES;
    } else {
	/*
	 * We're not suspended for some reason.  Call the update field
	 * appearences code.
	 */
	@call oself::MSG_FFGB_UPDATE_FIELD_APPEARENCE_UI();
    }
}


/***********************************************************************
 *
 * MESSAGE:	MSG_META_UNSUSPEND for FFGrObjBodyClass
 *
 * DESCRIPTION:	This message is called whenever the body becomes unsuspended.
 *	    	Here we call the superclass, then check to see if any
 *	    	field appearence UI controllers need to be updated.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	10/ 7/92	Initial version
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_META_UNSUSPEND
{
    @callsuper();

    /*
     * If we're not still suspended and we need to update our appearence,
     * do it.
     */
    pself = ObjDerefGrObj(oself);
    if (!pself->GBI_suspendCount &&pself->FFGBI_updateFieldAppearences) {
	/*
	 * We need to update appearence UI controllers.  Clear the
	 * flag that tells us to do this, then go deal with it.
	 */
	pself->FFGBI_updateFieldAppearences = FFGBUF_NOTHING;
	@send oself::MSG_FFGB_UPDATE_FIELD_APPEARENCE_UI();
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFGB_UPDATE_FIELD_APPEARENCE_UI for FFGrObjBodyClass
 *
 * DESCRIPTION:	This message is called when the body becomes unsuspended and
 *	    	a field's appearence UI controllers needs to be
 *	    	updated.
 *
 *	    	Currently, we update the following UI controllers:
 *	    	    FFEdgeController
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	10/ 6/92		Initial version
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_FFGB_UPDATE_FIELD_APPEARENCE_UI
{
    MemHandle appearenceChangeDataBlock, floatFormatDataBlock;
    FFFieldAppearanceChangeMessageBlock *appearenceChange;
    FormatIdType fieldFormat;
    word empty;
    EventHandle msg;
    optr app;
    
    /*
     * Create a notification block for field appearence, and send it off
     * to all selected fields to update.
     */
    appearenceChangeDataBlock =
	MemAlloc(sizeof(FFFieldAppearanceChangeMessageBlock),
		 HF_DYNAMIC | HF_SHARABLE, HAF_STANDARD | HAF_ZERO_INIT
					| HAF_NO_ERR);
    if (!appearenceChangeDataBlock) {
	/* No more memory!  Oh nooooo.... */
	return;
    }

    /*
     * Set an initializing flag in the data block.
     */
    appearenceChange = MemLock(appearenceChangeDataBlock);
    appearenceChange->FFESCM_setEdges = FEF_FIRST_FIELD_FLAG;
    appearenceChange->FFESCM_formatIdType = FORMAT_ID_GENERAL;
    MemUnlock(appearenceChangeDataBlock);
    
    /*
     * Ask all selected fields to update the appearence block.
     */
    GrObjBodyProcessSelectedGrObjsCommon(
	    oself, MSG_FFTFG_UPDATE_UI_BLOCK, appearenceChangeDataBlock,
	    0, 0, &empty, &empty, &empty, &empty);

    /*
     * Snag the field format type.
     */
    appearenceChange = MemLock(appearenceChangeDataBlock);
    fieldFormat = appearenceChange->FFESCM_formatIdType;
    MemUnlock(appearenceChangeDataBlock);

    /*
     * The fields have updated the appearence data block.  Send it off
     * to any controllers who care.
     */
    MemInitRefCount(appearenceChangeDataBlock, (word) 1);

    app = GeodeGetAppObject(0);
    msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
                      MANUFACTURER_ID_GEOWORKS,
					      /* Manufacturer's ID */
                      GWNT_FLAT_FILE_FIELD_APPEARANCE_CHANGE,
                                              /* Manufacturer's list type*/
                      appearenceChangeDataBlock);
    	    	    	    	    	      /* Handle of data block */

    @call app::MSG_META_GCN_LIST_SEND(
                      (word) GCNLSF_SET_STATUS,
                                              /* GCNListSendFlags */
                      (EventHandle) msg,      /* Handle to classed event */
                      (MemHandle) appearenceChangeDataBlock,
                                              /* Handle of extra data block */
      	     (word) GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_APPEARANCE_CHANGE,
                                              /* Manufacturer's list type */
                      (word) MANUFACTURER_ID_GEOWORKS);
                                              /* Manufacturer's ID */


    /*
     * We don't keep the crucial data the format controller needs here.
     * Ask the database to fill out the file and VM block of the notification
     * block.
     */
    floatFormatDataBlock =
	MemAlloc(sizeof(NotifyFloatFormatChange),
		 HF_DYNAMIC | HF_SHARABLE, HAF_STANDARD | HAF_ZERO_INIT);
    if (!floatFormatDataBlock) {
	/* No more memory!  Oh nooooo.... */
	return;
    }

    msg = @record FlatFileDatabaseClass::
	MSG_FFD_LOAD_FLOAT_FORMAT_BLOCK(floatFormatDataBlock, fieldFormat);
    @call oself::MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS(msg);

    /*
     * The doc file handle and VM block has been filled out.  Send
     * the notification!
     */
    MemInitRefCount(floatFormatDataBlock, (word) 1);
    
    msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
                      MANUFACTURER_ID_GEOWORKS, /* Manufacturer's ID */
                      GWNT_FLOAT_FORMAT_CHANGE, /* Manufacturer's list type*/
                      floatFormatDataBlock);	/* Handle of data block */

    @call app::MSG_META_GCN_LIST_SEND(
                      (word) GCNLSF_SET_STATUS,
                                              /* GCNListSendFlags */
                      (EventHandle) msg,      /* Handle to classed event */
                      (MemHandle) floatFormatDataBlock,
                                              /* Handle of extra data block */
		      (word) GAGCNLT_FLOAT_FORMAT_CHANGE,
                                              /* Manufacturer's list type */
                      (word) MANUFACTURER_ID_GEOWORKS);
                                              /* Manufacturer's ID */

    /*
     * Done!
     */
}


/***********************************************************************
 *
 * MESSAGE:	MSG_FLOAT_CTRL_UPDATE_UI, etc.
 *
 * DESCRIPTION:	We pass these messages up the visual tree until someone
 *	    	deals with them.
 *
 * PARAMETERS:
 *	void (?)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/24/92		Initial version
 *
 ***********************************************************************/
@method FFGrObjBodyClass, MSG_FLOAT_CTRL_REQUEST_MONIKER
{
    @call @visParent::MSG_FLOAT_CTRL_REQUEST_MONIKER(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_UPDATE_UI
{
    @call @visParent::MSG_FLOAT_CTRL_UPDATE_UI(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_FORMAT_SELECTED
{
    @call @visParent::MSG_FLOAT_CTRL_FORMAT_SELECTED(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_USER_DEF_INVOKE
{
    @call @visParent::MSG_FLOAT_CTRL_USER_DEF_INVOKE(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_USER_DEF_OK
{
    @call @visParent::MSG_FLOAT_CTRL_USER_DEF_OK(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_FORMAT_DELETE
{
    @call @visParent::MSG_FLOAT_CTRL_FORMAT_DELETE(formatInfoStrucHan);
}

@method FFGrObjBodyClass, MSG_FLOAT_CTRL_FORMAT_APPLY
{
    @call @visParent::MSG_FLOAT_CTRL_FORMAT_APPLY(formatInfoStrucHan);
}
