/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		FlatFile Database Library
FILE:		ResourceLayouts.txt

AUTHOR:		John D. Mitchell

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.09.08	Initial version.

DESCRIPTION:
	This file explains the resources used in the FlatFile Database
	Library.

	$Id$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Introduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

	The GEOS FlatFile Database Library is more or less *logically*
separated into numerous source files across multiple directories.  In a
similar way the library code is also *functionally* separated into multiple
resources in the various source files.

	Picture this as a two dimensional sparse matrix... For example,
each 'column' is one of the source files and each 'row' is one of library's
resources.  Each method/function goes into one of the matrix elements (i.e.
a resource in a file).

	The purpose of all of this malarky is to create a set of
complementary resources such that for each area of library functionality
only the necessary and sufficient library code is loaded.  This translates
into the minimal memory footprint that is needed to perform the given
functionality without thrashing.  Which, of course, means better
performance.

	The remainder of this file contains a brief discussion of some of
the various resource 'categories' (for lack of a better term :-) and a list
of all of the FlatFile Database Library's resources and gives a brief
explanation of their purpose/function and what should (and should not) be
put in them.


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Resource Categories
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

	There are a few broad categories that the resources seem to fall
into...  The top level categories are user interface, code, and system
resources.

	The system resource category contains all of the resources
automatically generated by the system or libraries that the FlatFile
library uses (e.g. CoreBlock, dgroup, InitCode, Math, etc.).  These will be
ignored for the remainder of this discussion.

	The code resource category contains the code and constant code data
resource categories.  Code resources contain the actual executable code.
Constant data resources contain all of the static (non-localizable) data
(e.g UI controller system information table templates, non-localizable data
strings, etc.).  The code resources are usually delineated by user
functionality (e.g. record insertion, layout display, etc.).  Though there
are also some core resources that contain code that is useful for broader
areas of functionality (e.g. code that is needed whenever there is any
layout work being done).  The constant (static) data resources parallel the
code resource that uses it.

	The UI resource category contains the UI object and UI data
resource categories.  UI object resources contain all of the user interface
class instances (objects).  UI data resources contain miscellaneous
constant (but usually localizable) data (e.g. user prompts, error messages,
etc.).  The UI resources are pretty easy to delineate.  In general, the top
level application object gets a resource all by itself (this allows
speedier application token processing).  The top level menu bar (and any
other triggers, etc. at that level) gets a resource (for snappy response).
Below that just follow the basic guideline that resources should be between
about 2-4 KBytes in size and should be delineated by user functionality.
For a small library/application there might only be one UI data resource
but for larger projects a couple might be a good idea.  The UI controller's
have a regular UI 'feature' objects resource and (if supported) an
equivalent toolbox UI objects resource.  Both will usually share a single
UI data resource.

	All of these are, of course, just some fairly general guidelines.
As with most things, don't go overboard by creating resources for every
little thing.  Remember, the key here is that the resources are built
around areas of user functionality.

