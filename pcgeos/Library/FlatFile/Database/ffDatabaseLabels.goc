/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PC/GEOS
 * MODULE:	  ffDatabaseLabels.goc
 * FILE:	  ffDatabaseLabels.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Jun 10, 1992
 *		  This file broken out from ffDatabaseFields.goc on
 *			2/1/93 by Anna Lijphart
 *
 * DESCRIPTION:
 *	This file contains methods and functions for the flat file
 *	field classes.
 *
 * RCS STAMP:
 *	$Id: ffDatabaseLabels.goc,v 1.1 97/04/04 18:02:58 newdeal Exp $
 *
 ***********************************************************************/

@include <stdapp.goh>
#include <geoworks.h>
#include <system.h>

#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include <Ansi/ctype.h>

#include <char.h>
#include <input.h>
#include <chunkarr.h>
#include <ec.h>
#include <math.h>

@include <Objects/FlatFile/ffileC.goh>
@include <Objects/FlatFile/ffGrObjC.goh>
#include <Objects/FlatFile/ffDPaste.h>
@include <Objects/uiInputC.goh>
@include <Objects/Text/tCtrlC.goh>
#include <Objects/Text/tCommon.h>
@include <ffile.goh>
@include <grobj.goh>
#include <graphics.h>
#include <extern.h>
#include <ffFatal.h>

/*************************************************************************
  	    	Class Declarations
 *************************************************************************/

@classdecl	FFLabelGuardianClass;


/*************************************************************************
  	    	External Declarations
 *************************************************************************/

/*************************************************************************
  	    	Forward Declarations
 *************************************************************************/


/***********************************************************************
 *
 * MESSAGE:	MSG_META_INITIALIZE for FFLabelGuardianClass
 *
 * DESCRIPTION:	This message resets the ward class for this guardian to
 *	    	FFTextClass.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	7/6/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_META_INITIALIZE
{
    @callsuper();

    pself = ObjDerefGrObj(oself);
    pself->GOVGI_class = (word *)&FFTextClass;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GOVG_CREATE_VIS_WARD for FFLabelGuardianClass
 *
 * DESCRIPTION:	Set the inDesignMode flag when a label is created.
 *
 * PARAMETERS:
 *	optr (MemHandle wardBlock)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	anna	1/29/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_GOVG_CREATE_VIS_WARD
{
    optr wardOptr;

    wardOptr = @callsuper();

    /*
     * Tell our ward it's in design mode
     */
    @send wardOptr::MSG_FFT_SIMPLE_SET_FOR_DESIGN_MODE();

    return(wardOptr);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFLG_INITIALIZE for FFLabelGuardianClass
 *
 * DESCRIPTION:	This method sets the instance data for this guardian to point
 *	    	to the guardian of its associated field, and to keep an
 *	    	ID of itself so if it's ever pasted, its field can find
 *	    	it again.
 *
 * PARAMETERS:
 *	void (VMBlockHandle vmBlockHandle,
 *	      ChunkHandle chunkHandle,
 *	      VMFileHandle *file)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	6/10/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_FFLG_INITIALIZE
{
    pself->FFLG_field.GOEOP_grObjectVMBlock = vmBlockHandle;
    pself->FFLG_field.GOEOP_grObjectChunk = chunkHandle;
    pself->FFLG_self.GOEOP_grObjectVMBlock =
	VMMemBlockToVMBlock(OptrToHandle(oself), file);
    pself->FFLG_self.GOEOP_grObjectChunk = OptrToChunk(oself);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFLG_RELEASE_FIELD for FFLabelGuardianClass
 *
 * DESCRIPTION:	This message is sent by a label's field when the field
 *	is being nuked.  We remove our links to it here.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	6/29/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_FFLG_RELEASE_FIELD
{    
    pself->FFLG_field.GOEOP_grObjectVMBlock = NullHandle;
    pself->FFLG_field.GOEOP_grObjectChunk = NullHandle;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GO_CLEAR for FFLabelGuardianClass
 *
 * DESCRIPTION:	This message is intercepted so we can tell the associated
 *	    	field guardian that we're being nuked.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	6/29/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_GO_CLEAR
{
    MemHandle grObjectMemBlock;
    word grObjVMBlock, grObjChunk;
    VMFileHandle documentHandle;
    optr fieldOptr;
    optr ward = pself->GOVGI_ward;

    if (pself->FFLG_field.GOEOP_grObjectVMBlock != NullHandle) {
	grObjVMBlock = pself->FFLG_field.GOEOP_grObjectVMBlock;
	grObjChunk = pself->FFLG_field.GOEOP_grObjectChunk;

	/*
	 * We have an associated field.  We need our document handle to
	 * tell the field we're going away.
	 */
	documentHandle = @call ward::MSG_FFT_GET_DOCUMENT_HANDLE();

	grObjectMemBlock = VMVMBlockToMemBlock(documentHandle, grObjVMBlock);
       	fieldOptr = ConstructOptr(grObjectMemBlock, grObjChunk);

	/*
	 * We have our field optr.  Tell it goodbye.
	 */
    	@send fieldOptr::MSG_FFTFG_RELEASE_LABEL();
    }

    @callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_FFLG_PASTE_ALERT for FFLabelGuardianClass
 *
 * DESCRIPTION:	This message is sent by the database to labels that 
 *	    	have just been pasted into the layout.  Individual
 *	    	labels need to add themselves to a list that is
 *	    	created by the database so that matching fields can
 *	    	re-attach with their labels.
 *
 * PARAMETERS:
 *	void (LabelIDArray *labels)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	8/14/92		Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_FFLG_PASTE_ALERT
{
    int i;
    /*
     * Add ourselves to the current label index, and increment the
     * index.
     */
    i = labels->numLabels;

    /*
     * In case we don't get added, or our field didn't get pasted,
     * clear out our old field's VMBlock and Chunk.
     */
    pself->FFLG_field.GOEOP_grObjectVMBlock = NullHandle;
    pself->FFLG_field.GOEOP_grObjectChunk = NullHandle;

    if (i >= MAX_NUMBER_OF_PASTED_LABELS) {
	/*
	 * There are too many labels!  Leave without saving this label.
	 */
	return;
    }
    labels->numLabels++;
    labels->labelSet[i].VMBlock = pself->FFLG_self.GOEOP_grObjectVMBlock;
    labels->labelSet[i].chunk = pself->FFLG_self.GOEOP_grObjectChunk;
    labels->labelSet[i].labelOptr = oself;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GO_WRITE_INSTANCE_TO_TRANSFER for
 *	    	    	    	    	    	FFLabelGuardianClass
 *
 * DESCRIPTION:	This message is sent out when a label is copied or cut
 *	    	to the clipboard.  This is where we save off our own
 *	    	instance data and that of our ward to the passed VMFile
 *	    	block.
 *
 * PARAMETERS:
 *	void (GrObjTransferParams *params)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/16/92    	Initial version
 *	jeremy	1/20/93	    	Fixed lack of wardness.
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_GO_WRITE_INSTANCE_TO_TRANSFER
{
    MemHandle transferBlockHandle;
    FFLabelGuardianAndWardInstanceDataStruct *transferBlock;
    char *p;
    optr ward = pself->GOVGI_ward;

    /*
     * Call superclass, updating params->GTP_curPos.
     */
    @callsuper();

    /*
     * Add the size of our instance data to the saved structure, and to
     * save time, the size of our ward's as well.
     */
    params->GTP_curSize += sizeof(FFLabelGuardianAndWardInstanceDataStruct);

    /*
     * Lock down the VM block so we can add to it.
     */
    p = VMLock(params->GTP_vmFile,
	       SegmentOf(params->GTP_id),
	       &transferBlockHandle);

    /*
     * Allocate more space for our instance data, and get deref
     * pointers for the big transfer.
     */
    (void) MemReAlloc(transferBlockHandle, params->GTP_curSize, HAF_NO_ERR);

    pself = ObjDerefGrObj(oself);
    p = MemDeref(transferBlockHandle);

    /*
     * Copy our instance data to the new area of the resized block.
     */
    transferBlock =
	(FFLabelGuardianAndWardInstanceDataStruct *)(p + params->GTP_curPos);
    transferBlock->g_indata.FFLG_field = pself->FFLG_field;
    transferBlock->g_indata.FFLG_self = pself->FFLG_self;

    /*
     * Now tell our ward to copy its special instance data to the
     * structure.
     */
    @call ward::MSG_FFT_WRITE_INSTANCE_TO_TRANSFER(&transferBlock->t_indata);

    /*
     * All done!  Unlock the block.
     */
    VMUnlock(transferBlockHandle);

    /*
     * Indicate that we wrote the class, then leave.
     */
    params->GTP_curPos += sizeof(FFLabelGuardianAndWardInstanceDataStruct);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GO_READ_INSTANCE_FROM_TRANSFER for
 *	    	    	    	    	    	FFLabelGuardianClass
 *
 * DESCRIPTION:	This message is sent out when a label is pasted from
 *	    	the clipboard.  This is where we reset off our own
 *	    	instance data and that of our ward from the passed
 *	    	VMFile block.
 *
 * PARAMETERS:
 *	void (GrObjTransferParams *params)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	11/16/92	Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_GO_READ_INSTANCE_FROM_TRANSFER
{
    MemHandle transferBlockHandle;
    FFLabelGuardianAndWardInstanceDataStruct *transferBlock;
    char *p;
    FFTInstanceData *wardData;

    /*
     * Call superclass, updating params->GTP_curPos.
     */
    @callsuper();

    /*
     * Lock down the VM block so we can read from it.
     */
    p = VMLock(params->GTP_vmFile,
	       SegmentOf(params->GTP_id),
	       &transferBlockHandle);

    /*
     * Deref ourself.
     */
    pself = ObjDerefGrObj(oself);

    /*
     * Read our instance data from the block.
     */
    transferBlock = 
	(FFLabelGuardianAndWardInstanceDataStruct *)(p + params->GTP_curPos);
    pself->FFLG_field = transferBlock->g_indata.FFLG_field;
    pself->FFLG_self = transferBlock->g_indata.FFLG_self;

    /*
     * Now copy our ward's data from the transfer block to  our own vardata,
     * because the ward doesn't exist at this point.
     */
    wardData = (FFTInstanceData *)ObjVarAddData(oself,
			     FFLG_TEMPORARY_WARD_INSTANCE_DATA,
			     sizeof(FFTInstanceData));
    memcpy(wardData, &(transferBlock->t_indata), sizeof(FFTInstanceData));

    /*
     * All done!  Unlock the block.
     */
    VMUnlock(transferBlockHandle);

    /*
     * Indicate that we read the class, then leave.
     */
    params->GTP_curPos += sizeof(FFLabelGuardianAndWardInstanceDataStruct);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GO_REPLACE_WITH_TRANSFER for FFLabelGuardianClass
 *
 * DESCRIPTION:	We intercept this to load our ward with instance data
 *	    	we saved off into our own vardata in READ_INSTANCE_FROM_
 *	    	TRANSFER.
 *
 * PARAMETERS:
 *	void (GrObjTransferParams *params)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	1/20/93	    	Initial version
 *
 ***********************************************************************/
@method FFLabelGuardianClass, MSG_GO_REPLACE_WITH_TRANSFER
{
    FFTInstanceData *wardData;

    /*
     * Read the transfer, create the vardata, and create our ward.
     */
    @callsuper();
    
    /*
     * Grab the vardata that holds our ward's instance data.
     */
    wardData = ObjVarFindData(oself, FFLG_TEMPORARY_WARD_INSTANCE_DATA);

    /*
     * Tell our ward to load its instance data with this stuff.
     */
    pself = ObjDerefGrObj(oself);
    @call pself->GOVGI_ward::MSG_FFT_READ_INSTANCE_FROM_TRANSFER(wardData);

    /*
     * Done.  Nuke the vardata.
     */
    ObjVarDeleteData(oself, FFLG_TEMPORARY_WARD_INSTANCE_DATA);
}

