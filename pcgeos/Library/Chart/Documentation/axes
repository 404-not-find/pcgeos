******************************************************************************
$Id: axes,v 1.3.26.1 97/03/29 04:49:31 canavese Exp $
******************************************************************************
			       Overview
******************************************************************************
Axes are really special beasts. Their positions and size are related to many
things including the text of the axis labels, other related axes, and other
unrelated axes.


******************************************************************************
			 Problems with labels
******************************************************************************
An axis needs to keep track of the "plottable" area inside it. This is the
area that is actually spanned by the axis itself, not counting the axis
labels.

Here's an example:
	+-----------+-----------+-----------+
		 Label 1     Label 2	 Label 3

Notice that "Label 3" extends beyond the plottable area.

So... Part of the task of computing the size of the axis is to compute how
much of the axis is plottable and how much isn't.

If we know the largest width of the plottable area then we can easily compute
the final plottable area because it depends only on our labels.
	????


******************************************************************************
			     Related Axis
******************************************************************************
An axis is also affected by its related axis. Here is a picture of two axes.
  1,000 +
	|
	|
    750	+
	|
	|
    500	+
	|
	|
    250	+
	|
	|
	+------------+------------+------------+
	  Category 1   Category 2   Category 3

As you can see here the size of the plottable area on the category axis
depends on the width of the labels on the value axis. You can also see that
the height of the plottable area on the value axis depends on the height
of the labels on the category axis.


******************************************************************************
			    Unrelated Axes
******************************************************************************
As if that weren't enough an axis also depends on axes for overlay charts
as well. It isn't enough to just lay one chart over another, the series
area (where the plotting takes place) must be the same. As a result the
plottable area for one vertical axis must be the same as for the other.
The same is true for horizontal axes.


******************************************************************************
			     How It Works
******************************************************************************
Geometry for an axis works in a somewhat mysterious way. We make some
assumptions, generate results, then check to see if our assumptions were
correct. If they weren't, we try to make better assumptions based on what
happened last time and we try again.

The first thing to realize is that we have 4 axes. Some of them might not
be usable, but the geometry code for each axis is designed to return
something meaningful in that case so the plot area can just work as though
all were present.

The plot area assumes 4 axes; 2 vertical and 2 horizontal. A pair of axes,
one vertical and one horizontal, make up a related axis pair. They are
related because each crosses the other at a user specified point. If one
axis changes size/range/etc the other may need to move in order to maintain
the position the user set.

Each axis has a set of information associated with it:
	Bounds	- This is the bounds of the entire axis with labels.
		  
		  For a horizontal axis the left/right are the same
		  as the left/right for the PlotArea object
		  
		  For a vertical axis the top/bottom are the same
		  as the top/bottom for the PlotArea object.

	PBounds	- This is the plottable bounds. It is actually a line
		  stored in the form of a rectangle. It specifies the
		  line which falls along an axis of the plottable area.

Given this information we can easily compute the series area. The vertical
component of the series area is found in the PBounds of the vertical axes.
The horizontal component is found in the PBounds of the horizontal axes.


******************************************************************************
			  Computing the Sizes
******************************************************************************

1) When a value axis is built, it chooses MIN and MAX values for
   itself based on the series data.  Based on these values, it chooses
   a rough approximation of its maximum label width.  This
   approximation doesn't have to be accurate -- it should err on the
   side of generosity.

2) Geometry calculation is done in a 2-pass approach.
   In the first pass, each axis figures out as much about itself as it
   can.  During this pass, the axis doesn't ask its related axis for
   any informatin.

   In the second pass, each axis adjusts its dimensions to take the
   related axis info into  account.

	Vertical Value & Horizontal Category  (column,line,area)
	Vertical Category & Horizontal Value  (bar)
	Both value axes (scatter)

PART 1:

   Value axes are less complicated than category axes, so we
   calculate them first.  I will assume that labels are always
   single-line pieces of text.  Given the approximate max label width
   calculated during build, the axis can then figure out:

	(vertical):  distance to left and right of axis
			(rough:  distance above and below)

	(horizontal):  distance above and below axis.
			(rough: left and right distances)

PART 2: 
   Part 2 is
   
	(vertical):  Max label width. 
		vertical plot bounds (from related axis)
		left and right distances

	(horizontal):  
		horizontal plot bounds (from related axis), 
		above and below distances

STEP 3:  VALUE AXIS
	
	(vertical):
		vertical plot bounds (from related axis)
		tick increments

	(horizontal):
		horizontal plot bounds
		tick increments

******************************************************************************
			     Intersection
******************************************************************************
An axis contains the position at which its related axis intersects it. This
position is some floating point number which falls between the minimum and
maximum values for that axis. For example:
	100 +
	    |
	 75 +
	    |
	 50 +----------+----------+----------+
	    |  Cat 1      Cat 2      Cat 3
	 25 +
	    |
	  0 +

The value axis will contain the "50" in its AI_intersect field. This means
that the category axis intersects the value axis at 50.

Converting this to a position requires a bit of math. First we convert
the value to some percentage and then we use that percentage to compute
our absolute position:
	percentage = (intersect - min)/(max-min)
	distance   = percentage * (plotBounds.bottom-plotBounds.top)

This distance is the distance from the "base" of the axis. For a vertical
axis this base is at the bottom of the plot bounds so we need to do:
	position = plotBounds.bottom - distance

in order to get the final position.

There is similar math involved in getting the intersection position of
a vertical axis on a horizontal axis. For more information see
MSG_AXIS_GET_INTERSECTION_POSITION in axisMisc.asm.


******************************************************************************
			    Default Values
******************************************************************************
When a user has not specified ranges for a value axis the value axis
must choose those values itself. The choice of values isn't all that
easy because it involves choosing a reasonable axis maximum, minimum,
and tick increment.

Please keep in mind that in all of this discussion we are only concerned
with value axes. Category axes don't have this sort of problem.

There is a set of heuristics that I've chosen to follow. They are:
        - Where possible, the distance between the mininum value and 
	  the base of the axis should be as close to 1/3 of the height
	  of the axis as possible.

        - When all data values are very close the range of the axis
	  should be chosen such that the differences are clearly 
	  visible.

        - The increment should be some power of 10 times:
			.1 .2 .25 .5 .75
	  because people likes these sorts of numbers.

        - The value axis labels should not be crowded.

        - When all values are positive the position of the category
	  axis should be at the base (bottom) of the value axis.

        - When all values are negative the position of the category
	  axis should be at the top of the value axis.

        - When values are both negative and positive the position of
	  the category axis should be at zero.

        - If all values are positive then the range should include only
	  positive numbers.
	  
        - If all values are negative then the range should include only
	  negative numbers.

These heuristics are in somewhat random order. They will be repeated where
appropriate.

Turning these rules into code turns out to require a lot of math. There
are several steps:
	1) Compute a reasonable axis maximum and minimum
	2) Compute a reasonable major tick unit
	3) Compute a reasonable minor tick unit
	4) Figure the best position for the related axis to cross this one


******************************************************************************
		   Computing a Maximum and Minimum
******************************************************************************
The heuristics used in computing the minimum and maximum are:
       1- Where possible, the distance between the mininum value and 
	  the base of the axis should be as close to 1/3 of the height
	  of the axis as possible.

       2- When all data values are very close the range of the axis
	  should be chosen such that the differences are clearly 
	  visible.

       3- If all values are positive then the range should include only
	  positive numbers.
	  
       4- If all values are negative then the range should include only
	  negative numbers.

Here is the algorithm I settled on for computing the maximum and minimum.
I'm just going to lay it out, then I'll document what's going on.

-----------------------------------------------------------------------------
** minVal, maxVal are the minimum and maximum values of all the series data.
** firstMin/Max are the first guesses for minimum and maximum values.
** max/min are the final choices for minimum and maximum.

(a)	if (Sign(minVal) == Sign(maxVal)) {
	    if (Sign(minVal) == Sign(-1)) {
	        ** Both negative
(b)		firstMax = maxVal + (maxVal-minVal)/2
		if (Sign(maxVal) != Sign(firstMax)) {
(c)		    firstMax = 0
		}
		firstMin = minVal
	    } else {
	        ** Both postive
	        firstMax = maxVal
(d)		firstMin = minVal - (maxVal-minVal)/2
		if (Sign(minVal) != Sign(firstMin)) {
(e)		    firstMin = 0
		}
	    }
	} else {
	    ** Different signs
(f)	    firstMax = maxVal
	    firstMin = minVal
	}
(g)	diffO	 = Int(Log10(firstMax-firstMin))
	
(h)	max	 = Ceiling(firstMax/10^diffO)*10^diffO
(i)	min	 = Floor(firstMin/10^diffO)*10^diffO
-----------------------------------------------------------------------------
(a) The first step is to see if the series data is either all positive,
    all negative, or mixed.

(b) If both are negative then the data will be extending down from the
    category axis and we therefore want to make sure there is some space
    above the value closest to the axis. In this case that is the maximum
    value. We attempt to provide about 1/3 of the total plottable space
    to fill this area between the maximum and the axis.
    
    This is an attempt to follow heuristic (1).

(c) If as a result of adding in this extra space we choose a maximum value
    that is larger than zero we want to forget our task of ensuring that
    there is some space between the maximum and the axis and just go
    with zero.
    
    This is an attempt to follow heuristic (4).

(d) If both are postive we try to follow similar logic to that in (b). We
    want to make sure there is some space between the minimum value and
    the axis below it.

(e) If we have all positive numbers we don't want to choose a base for
    the axis that is negative so we force it to be zero if our calculation
    resulted in a negative number.

    This is an attempt to follow heuristic (3).

(f) If the numbers are different signs we just hope that things will work out
    and we start with the series values.

(g) Here we get the order of the difference. The hope is that by using the
    order of the difference rather than the order of the minimum or maximum
    we can ensure a small enough range that values which are close together
    will be called out well.
    
    This is an attempt to follow heuristic (2).

(h) Here we choose the maximum by rounding up to the next multiple of
    10^(order of max-min). This gives us a top value that is in some
    reasonable unit given how close max and min are.

(i) The same logic applies to the minimum but we round down.


******************************************************************************
		      Computing Major Tick Unit
******************************************************************************
Computing a reasonable major tick unit is the next difficult task. The
heuristics which apply are:
       1- The increment should be some power of 10 times one of
	  {.1 .2 .25 .5 .75} because people likes these sorts of 
	  numbers.

       2- The value axis labels should not be crowded.

The algorithm for this relies on knowing the maximum number of labels
which can fit on the axis. This is somewhat difficult because the text
of the labels may depend on the major tick unit. As a result we fudge
it a bit.

There are two cases we need to consider when computing the maximum
number of labels which can fit on an axis:
	1) The text lies parallel to the axis, eg:
		+--------+--------+--------+
		   text     text     text

	2) The text lies across the axis, eg:
		+
	   text	|
		|
		+
	   text	|
		|
		+
	   text	|
		|
		+

All other cases are variations on these two (eg: rotating the text on the
horizontal axis yields the same situation as text across a vertical axis).

The first case gives the most problem. Since we don't know the width
of the labels we can't make an accurate calculation. Instead we hokey
it and choose a label width of (5 * average character width). We may
want to change this later. I couldn't come up with anything better though.
This produces the formula:
	maxLabels = plottableSpace / (5*avgCharWidth)

The second case is somewhat simpler. We make the assumption that the labels
will be a single line high. Using that assumption we can compute the
maximum number of labels as:
	maxLabels = plottableSpace / fontHeight

Given the maximum number of labels we now attempt to choose a major
tick unit that will satisfy heuristic (2) (don't crowd the axis) and
heuristic (1) (use pleasing tick increments).

The algorithm I use for figuring the major tick unit can best be expressed
like this:
	Try a tick unit
	if that tick unit results in too many labels
	    try another (larger) tick unit
	endif

I make the assumption that it won't be appropriate to have 100 labels
on an axis and then get to work:
-----------------------------------------------------------------------------
** max, min	- Maximum and minimum values of the axis range
** diffO	- Order of the difference between max and min
** tickO	- Current order of the tick unit
** multIdx	- Index into the tickMultTable
** maxLabels	- The maximum number of labels that will fit

(a)	tickO   = diffO-2
	multIdx = 0

	do {
	    multIdx -= 1
	    if (multIdx < 0) {
(b)	    	tickO += 1
		multIdx = length(tickMultTable)-1
	    }
(c)	    curTick = tickMultTable[multIdx]*(10^tickO)
(d)	} while ((max-min)/curTick > maxLabels)

	** The tick multiplier table
	tickMultTable	FloatNum	1  .75  .5  .25  .2
-----------------------------------------------------------------------------

(a) This is where we start by guessing that 100 labels would be the largets
    number we would reasonably place on the axis.

(b) If we arrive here then we haven't found a good tick unit at our current
    order of magnitude. We increase the size of our basic tick unit by
    a factor of 10 and continue checking.

(c) We compute the current tick increment. It involves computing 10 to the
    power of the current order of magnitude we are checking. We then
    multiply by the current multiplier in the table.

(d) Check to see if the current tick increment will yield a reasonable
    result. If it won't we continue to try more multipliers and when
    we run out of multipliers we try a different power of 10.


There are disadvantages to this algorithm:
	- It requires looping and so may be slower than we want.
	- It will generate the most crowded axis possible that
	  complies with heuristic (2).

I think that experience will tell us if this algorithm does not produce
pleasing results. If it doesn't it should be easy to modify the nature
of the algorithm so that it produces something better.


******************************************************************************
		       Compute Minor Tick Unit
******************************************************************************
Computing the minor tick unit for a value axis is something that I was
unwilling to spend too much time on. The formula I chose is:
	minorUnit = majorUnit / 2

This is pretty weak. I think a better algorithm would make the minor unit
depend on the multiplier used for the major unit. It would look something
like this:
	Major Unit	Minor
	Multiplier	Unit
	----------	-----
	1		major / 5
	.75		major / 3
	.5		major / 2
	.25		major / 5
	.20		major / 2

This has been implemented.


******************************************************************************
		     Positioning the Related Axis
******************************************************************************
The last step is positioning the related axis. This is fairly simple. The
heuristics appropriate to this are:
       1- When all values are positive the position of the category
	  axis should be at the base (bottom) of the value axis.

       2- When all values are negative the position of the category
	  axis should be at the top of the value axis.

       3- When values are both negative and positive the position of
	  the category axis should be at zero.

-----------------------------------------------------------------------------
** max,min	- Maximum and minimum values of the axis range
	if (Sign(max) != Sign(min)) {
	    ** The minimum is negative and the maximum is positive
	    intersectPos = 0
	} else if (Sign(max) == Sign(-1)) {
	    ** Both are negative
	    intersectPos = max
	} else {
	    ** Both are positive
	    intersectPos = min
	}
-----------------------------------------------------------------------------

I think that it is fairly obvious that this piece of pseudo-code will
accomplish the intent of the heuristics.

The one thing that isn't currently done which we may want to do is to
change the position of the labels for an axis if it crosses its related
axis at the maximum position. For example this looks good:
			     + val
			     | 
			     |
			     + val
			     |
			     |
			     + val
			     |
			     |
	+------+------+------+ val
	  cat    cat    cat

This doesn't:
	+ val
	| 
	|
	+ val
	|
	|
	+ val
	|
	|
	+-val--+------+------+
	  cat    cat    cat

There currently is no way to make the text for a vertical axis appear
anywhere but to the left of the axis. There is also no way to make text
for a horizontal axis appear anywhere but below the axis. Making this
work would probably not be more than a few days work. It involves adding
a flag to the axis instance data and modifying the geometry method
handlers (MSG_CHART_OBJECT_RECALC_SIZE) for the AxisClass.
