******************************************************************************
$Id: organization,v 1.1.27.1 97/03/29 04:49:32 canavese Exp $
******************************************************************************
			       Overview
******************************************************************************
This file contains a description of the directory structure of the chart
library.

The directories in the chart library break into two areas:
	1 - Utilities, Global routines, UI
		eg: Main, UI, Utils
	2 - Implementation of a chart object class
		eg: Axis, CGroup, CObject, Legend

All the code in a given module is contained in a single segment. The segment
name usually corresponds to the name of the module, eg:
	AxisCode, ChartGroupCode, PlotAreaCode


******************************************************************************
	      Modules That are not Class Implementations
******************************************************************************
Main:
	The main module contains all routines which are defined
	as exported from the chart library. These currently include
	ChartCreateChart(), ChartUpdateChart(), and ChartDeleteChart().

	The library entry point is also contained in this module.

UI:
	This contains the .uih definitions of all the chart object
	classes, the .ui file which defines a chart object block,
	and a string resource block.


Utils:
	This contains frequently called routines. Many of these are
	just send messages to objects without the side effects of
	having many registers nuked.

	There are also routines for copying string resources and routines
	for setting up the TemplateTextObject so that it can be used
	for calculation.


******************************************************************************
			Class Implementations
******************************************************************************
The modules which implement the chart object classes all have a fairly
similar structure. The files have a common naming structure:

<module>Manager.asm
	The standard manager file. This includes all the other .asm files
	in the directory.

<module>Build.asm
	Implements the build related methods. Currently this only includes
	a method handler for MSG_CHART_OBJECT_BUILD.

<module>Geometry.asm
	Implements geometry related methods. For most classes this consists
	of handlers for MSG_CHART_OBJECT_RECALC_SIZE.

<module>Position.asm
	Implements positioning methods. Currently this only includes a
	method handler for MSG_CHART_OBJECT_BOUNDS_SET.

<module>Realize.asm
	Implements MSG_CHART_OBJECT_REALIZE and MSG_CHART_OBJECT_UNREALIZE.
	Currently most of these files include only a template for the
	realize method and nothing for the unrealize method.

<module>Attrs.asm
	Implements the attribute setting methods including area, line, border,
	and text attributes. Some modules don't require handlers for these
	because the default method handler is all that is required.

<module>Pass.asm
	Method handler which passes a method on to some other object. Used
	to redirect methods to their appropriate destination.

The CObject directory contains default handlers for all methods.

There are additional files in most directories. Currently these include:

Axis:
    axisFloat.asm
	Contains routines which may get kicked into the float library
	but which haven't migrated there yet.

    axisLabels.asm
	Utility routines for accessing labels associated with axes.
	The core of this file consists of three routines:
		AxisForeachLabel
			- Call a callback for each label on the axis.
		AxisCallForLabel
			- Call a callback for a given label.
		AxisGetLabel
			- Get the text of a given label

    axisMisc.asm
	Contains method handlers for many axis methods.
		MSG_AXIS_GET_INTERSECTION_POSITION
			- Get the position where the related axis intersects
			  this axis.
		MSG_AXIS_GET_OUTSIDE_TOP
		MSG_AXIS_GET_OUTSIDE_BOTTOM
		MSG_AXIS_GET_OUTSIDE_LEFT
		MSG_AXIS_GET_OUTSIDE_RIGHT
			- Get the amount of space in this axis that is 
			  outside the plottable area.
		MSG_AXIS_SET_RELATED_AND_OTHER
			- Set the AI_related and AI_other fields of the
			  axis instance.
		MSG_AXIS_GET_PLOTTABLE_HEIGHT
		MSG_AXIS_GET_PLOTTABLE_WIDTH
			- Get the amount of plottable space on an axis

    axisRange.asm
	Range related method handlers.
		MSG_AXIS_SET_RANGE
			- Set the minimum/maximum values on the axis
		MSG_AXIS_GET_RANGE
			- Get the minimum/maximum values on the axis
		MSG_AXIS_CHOOSE_DEFAULT_VALUES
			- Choose reasonable min/max/intersect/tick-unit
			  values for an axis.

    axisTicks.asm
	Utility routines for getting information about tick marks on an
	axis. Currently contains only:
		AxisGetTickPosition
			- Get the position of a given tick mark on the
			  axis.

Legend:
    legendOrientation.asm
	Method handler for changing the orientation of the legend from
	horizontal to vertical (or vice-versa).

PArea:
    pareaAxes.asm
	Method handler for hiding or showing some or all of the axes.
	This is not implemented yet.

PGroup:
    pgroupChartType.asm
	Method handler for setting the chart type.

    pgroupMisc.asm
	Misc method handlers for getting information about the parameter
	block (which is stored with the Plot Group). Includes:
		MSG_PLOT_GROUP_GET_SERIES_COUNT
		MSG_PLOT_GROUP_GET_CATEGORY_COUNT
			- Get the number of series/categories
		MSG_PLOT_GROUP_GET_NUMBER
			- Get a data value for a series & category
		MSG_PLOT_GROUP_GET_SERIES_TITLE
		MSG_PLOT_GROUP_GET_CATEGORY_TITLE
			- Get a title for a series/category
		MSG_PLOT_GROUP_GET_SERIES_MAX_MIN
			- Get the max and min for a given series
		MSG_PLOT_GROUP_GET_ALL_SERIES_MAX_MIN
			- Get the max and min for all series

    pgroupSeries.asm
	Method handlers for modifying what constitutes a series.
		MSG_CHART_OBJECT_SERIES_ARE_ROWS
		MSG_CHART_OBJECT_SERIES_ARE_COLUMNS

    pgroupUtils.asm
	Utilities used by the Plot Group module. This is a set of routines
	to allow easy access to the parameter block:
		LockParameterBlock
		UnlockParameterBlock
			- Lock/unlock the parameter block
		ForeachCategory
		ForeachSeries
			- Call a callback for each series/category
		GetParameterEntry
			- Get an entry from the parameter block

Series:
    seriesUtils.asm
	A single routine that passes a message along to each series.


The root directory contains a .def file which defines in esp all of
the classes and contains associated data structures and constants.
