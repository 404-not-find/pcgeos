COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		series.def

AUTHOR:		John Wedgwood, Oct  8, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	10/ 8/91	Initial revision


DESCRIPTION:
	Definition of the Series Class.
		
	$Id: series.def,v 1.1 97/04/04 17:46:08 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;-----------------------------------------------------------------------------
;			       Constants 
;-----------------------------------------------------------------------------
COLUMN_VALUE_LABEL_MARGIN = 2
BAR_VALUE_LABEL_MARGIN 	= 	5	; margin between bars and
					; values (when printed)

MARKER_STD_SIZE	=	12

DEFAULT_COLUMN_MARGIN	=	5	; 5 percent on each side.
DEFAULT_COLUMN_OVERLAP  = 	25	; percent

;-----------------------------------------------------------------------------
; The following constants are the fractional parts of WWFixed
; constants.  They are multiplied by the pie chart's radius to explode
; the various pie wedges.  
;-----------------------------------------------------------------------------
 
PIE_ONE_EXPLODED_REDUCE_RADIUS	=	13100	; = 20%
PIE_ALL_EXPLODED_REDUCE_RADIUS	=	13100	; = 20%
PIE_ONE_EXPLODED_MOVE_WEDGE	= 	13100	; = 20%
PIE_ALL_EXPLODED_MOVE_WEDGE	=	6554	; = 10%
PIE_DEFAULT_MARGIN		=	6554

DEFAULT_VALUE_LABEL_WIDTH	=	20
DEFAULT_VALUE_LABEL_HEIGHT	=	15
DEFAULT_SERIES_TITLE_WIDTH	=	60
DEFAULT_SERIES_TITLE_HEIGHT	=	15
PIE_MIN_DIAMETER		= 	10

;-----------------------------------------------------------------------------
;				Structures		
;-----------------------------------------------------------------------------


SeriesBuildVars	struct
	SBV_type	ChartType		<>
	SBV_variation	ChartVariation		<>
	SBV_flags	ChartFlags		<>
	SBV_categoryCount	word
	SBV_seriesCount		byte
SeriesBuildVars	ends

SeriesDrawFlags	record
	SDF_CENTER_TEXT:1

SeriesDrawFlags	end


ColumnVars	struct
	CV_curElement	word
	CV_width	FloatNum
	CV_seriesWidth	FloatNum
	CV_overlap	FloatNum
ColumnVars	ends

PieVars	struct
	PV_radius	word		; size of pie
	PV_explode	word		; amount to move out explode
					; wedges. 
	PV_center	Point		<>
	PV_midAngle	word	
	PV_arcParams	ArcParams	<>
	PV_max		FloatNum	<>
PieVars	ends

GroupVars	struct
	GV_curElement	word
GroupVars	ends

TypeSpecificVars	union
	TSV_column	ColumnVars	<>
	TSV_pie		PieVars		<>
	TSV_group	GroupVars	<>
TypeSpecificVars	end

; Some equates to save the old fingers

PieLocals equ	<locals.SDLV_typeSpecific.TSV_pie>
ColumnLocals equ <locals.SDLV_typeSpecific.TSV_column>
GroupLocals equ <locals.SDLV_typeSpecific.TSV_group>

;-----------------------------------------------------------------------------
;	This oversized beast contains all the data stored during
;REALIZE of the various series objects.  It's passed everywhere -- to
;methods, procedures, etc.  A real monster! The variables are initialized
;by SeriesGroupRealize.		
;-----------------------------------------------------------------------------
 

SeriesDrawLocalVars	struct
	SDLV_drawFlags	SeriesDrawFlags		<>
	SDLV_gstate	hptr.GState
	SDLV_gstringBlock	word
	SDLV_valueAxis		lptr
	SDLV_categoryAxis	lptr
	SDLV_seriesNum	byte		; Number of the current series
	SDLV_categoryNum word		; category number
	SDLV_seriesCount byte		; total number of series
	SDLV_categoryCount 	word	; total number of categories
	SDLV_type	ChartType		<>
	SDLV_flags	ChartFlags		<>
	SDLV_variation	ChartVariation		<>
	SDLV_intersect	word		; where the category axis
					; intersects the value axis
					; (if applicable)

	SDLV_callback	nptr		; routine to call for each
					; category. 
	
	SDLV_maxValueWidth	word	; maximum width of value labels
	SDLV_points	hptr
	SDLV_pointer	nptr
	SDLV_numPoints	word
	SDLV_typeSpecific 	TypeSpecificVars	<>
	SDLV_categoryIncrement	word	; going up or down?

	SDLV_text	char 	CHART_TEXT_BUFFER_SIZE dup (?)
	SDLV_drawOrder	word
	; position to place series in the grand scheme of things

SeriesDrawLocalVars	ends


;-----------------------------------------------------------------------------
;	SERIES CLASSES		
;-----------------------------------------------------------------------------
 
ColumnClass	class	ChartObjectMultipleClass
ColumnClass	endc

BarClass	class	ColumnClass
BarClass	endc
 

SeriesDualClass	class	ChartObjectDualClass


COMMENT @--------------------------------------------------------------------
	INHERITANCE		
-----------------------------------------------------------------------------


MSG_CHART_OBJECT_FIND_GROBJ	- returns the PICTURE grobj

MSG_CHART_OBJECT_SELECT - set the UPDATING bit, select the FIRST
	grobj, then reset the bit.

MSG_CHART_OBJECT_GROBJ_SELECTED - if not updating, send message to
	LEGEND to have it select the appropriate part.

----------------------------------------------------------------------------@


SeriesDualClass	endc


LineSeriesClass	class	SeriesDualClass

; I would have called it LineClass, but that's already a class in the
; GrObj! 
; Note that this class only has one grobj -- but it's functionally
; very similar to other SeriesDualClass classes, so I chose to waste a
; word of instance data (aww).  Same goes for ScatterClass.

LineSeriesClass	endc

AreaClass	class	SeriesDualClass

AreaClass	endc

ScatterClass	class	SeriesDualClass
ScatterClass	endc

PieClass	class	SeriesDualClass
PieClass	endc

HighLowClass	class	SeriesDualClass
HighLowClass	endc

ifdef	SPIDER_CHART
SpiderClass	class	SeriesDualClass
SpiderClass	endc
endif

 


