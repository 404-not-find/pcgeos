COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		chartMacros.def

AUTHOR:		John Wedgwood, Oct  7, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	10/ 7/91	Initial revision


DESCRIPTION:
	Macros for use by all chart modules.
		
	$Id: chartMacros.def,v 1.1 97/04/04 17:45:57 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
;******************************************************************************
; SmartShift - macro to optimize shifts for size.  Op can either be
; "shl" or "shr".
;******************************************************************************

SmartShift	macro	op, reg, amt
    if (amt) gt 0
	if (amt) gt 3
		push	cx		;; 1 / 15
		mov	cl, (amt)	;; 2 / 
		op	reg, cl		;; 2
		pop	cx		;; 1 / 12
	else
		rept	(amt)
			op reg, 1	;; 2 bytes per inst.
		endm
	endif
    endif
endm


;******************************************************************************
; SHIFT - shift a register by a constant value.  Positive values
; indicate shift left, Negative values indicate shift right.
;******************************************************************************
SHIFT	macro	reg, amt

    if (amt) gt 0
	SmartShift	shl, reg, <amt>
    else
	SmartShift	shr, reg, <-(amt)>
    endif
endm

SortRegs	macro	low, high
local done
	cmp	low, high
	jl	done
	xchg	low, high
done:
endm


;******************************************************************************
; ECMakeSureZero	- make sure the passed quantity is zero
;******************************************************************************
ECMakeSureZero	macro	value
if ERROR_CHECK
	tst	value
	ERROR_NZ EXPECTED_ZERO_VALUE
endif
endm

;******************************************************************************
;memmov	- move a byte/word of memory
;******************************************************************************
 
memmov	macro	dest, source, useReg
segmov	dest, source, useReg
endm

ECMakeSureNonZero	macro	value
if ERROR_CHECK
	tst	value
	ERROR_Z EXPECTED_NONZERO_VALUE
endif
endm

;******************************************************************************
; Optimized form of MOVSB -- will move words if possible.  Only works
; with constant data size.
;******************************************************************************
 
MovMem	macro	amount

if ERROR_CHECK
ife FULL_EXECUTE_IN_PLACE		
	mov	cx, (amount)
	call	ECCheckSrcDestBounds
endif
endif
	mov	cx, (amount)/2
	rep	movsw
	if (((amount) AND 1) eq 1)
		movsb
	endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		_ParsePointArg

DESCRIPTION:	Parse an argument to a dword math macro

PASS:
	arg - argument passed to macro
	regcount - # of register-pair arguments
	op - string to emit for error-identification
RETURN:
	rx - x value
	ry - y value
	regcount - # of register-pair or constant arguments

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

_ParsePointArg	macro	arg, rx, ry, regcount, op

alen	sizestr	<&arg>

ifnb <arg>

if (4 AND .TYPE (arg))
    rx catstr <((arg) SHR 16)>
    ry catstr <((arg) AND 0xffff)>
    regcount=regcount+1
else
    if (alen eq 4)
	rx substr <arg>, 1, 2
	ry substr <arg>, 3, 2
	regcount=regcount+1
    else
        rx catstr <arg>, <.P_x>
        ry catstr <arg>, <.P_y>
    endif
endif

else
    ErrMessage <op : missing argument>
endif

endm


;******************************************************************************
;	MovP	- move Point.  Takes 2-register arguments similar to
;	movdw, except registers are specified X first, ie
;	movP ds:[di].point, cxdx  (cx is X, dx is Y)
;******************************************************************************
 
movP	macro	dest, source, trashreg
	local	drx, dry, srx, sry, regargs

regargs = 0
_CheckDWordTwoArg	<dest>, <source>, <movP>
_ParsePointArg	<dest>, drx, dry, regargs, <movP>
_ParsePointArg	<source>, srx, sry, regargs, <movP>

if (regargs gt 0)
	mov	dry, sry
	mov	drx, srx
elseifnb <trashreg>
	mov	trashreg, sry
	mov	dry, trashreg
	mov	trashreg, srx
	mov	drx, trashreg
else
	ErrMessage <movP : need trash register to move mem, mem>
endif

endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		addP

DESCRIPTION:	Add 2 points.  Just like adddw, but no carry
		propagation.


ARGUMENTS:
	dest - memory or register pair for destination
	source - memory or register pair for source
	[trashreg] - re'qd if adding memory to memory

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
addP	macro	dest, source, trashreg
	local	drl, drh, srl, srh, regargs

regargs = 0
_CheckDWordTwoArg	<dest>, <source>, <addP>
_ParsePointArg	<dest>, drx, dry, regargs, <addP>
_ParsePointArg	<source>, srx, sry, regargs, <addP>

if (regargs gt 0)
	add	drx, srx
	add	dry, sry
elseifnb <trashreg>
	mov	trashreg, srx
	add	drx, trashreg
	mov	trashreg, sry
	add	dry, trashreg
else
	ErrMessage <addP : need trash register to add mem, mem>
endif

endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		subP

DESCRIPTION:	Subtract 2 points.  Just like subdw, but no borrow
		propagation.


ARGUMENTS:
	dest - memory or register pair for destination
	source - memory or register pair for source
	[trashreg] - re'qd if subing memory to memory

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
subP	macro	dest, source, trashreg
	local	drl, drh, srl, srh, regargs

regargs = 0
_CheckDWordTwoArg	<dest>, <source>, <subP>
_ParsePointArg	<dest>, drx, dry, regargs, <subP>
_ParsePointArg	<source>, srx, sry, regargs, <subP>

if (regargs gt 0)
	sub	drx, srx
	sub	dry, sry
elseifnb <trashreg>
	mov	trashreg, srx
	sub	drx, trashreg
	mov	trashreg, sry
	sub	dry, trashreg
else
	ErrMessage <subP : need trash register to sub mem, mem>
endif

endm



;***************************************************************************
; FixRange - update the range so that min <= current <= max
; PASS: current - the current value to check
; 	MIN and MAX - the current range (not necessarily min < max!)
;***************************************************************************
FixRange	macro current, min, max
local fixMax, end
	cmp 	current, min	; compare current and min
	jge  	fixMax		; greater? see if greater than max
	mov 	min, current    ;  fixup MIN
fixMax:
	cmp	current, max    ; compare current and max
	jle	end		; less or equal? DONE
	mov	max, current	; fixup MAX
end:
endm

;******************************************************************************
; Max - make DEST the maximum of DEST and SOURCE
;******************************************************************************
Max	macro	dest, source
local	done
	cmp	dest, source
	jge	done
	mov	dest, source
done:
endm 

;******************************************************************************
; Min - make DEST the maximum of DEST and SOURCE
;******************************************************************************
Min	macro	dest, source
local	done
	cmp	dest, source
	jle	done
	mov	dest, source
done:
endm 




COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		_ParseODArg

DESCRIPTION:	Parse an argument to a dword math macro

PASS:
	arg - argument passed to macro
	regcount - # of register-pair arguments
	op - string to emit for error-identification
RETURN:
	rchunk - low part of arg
	rhandle - high part of arg
	regcount - # of register-pair or constant arguments

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

_ParseODArg	macro	arg, rchunk, rhandle, regcount, op

alen	sizestr	<&arg>

ifnb <arg>

if (4 AND .TYPE (arg))
    rhandle catstr <(handle (arg)>
    rchunk catstr <(offset (arg))>
    regcount=regcount+1
else
    if (alen eq 4)
	rhandle substr <arg>, 1, 2
	rchunk substr <arg>, 3, 2
	ifidn rchunk, rhandle
	    ErrMessage <op : register used twice in dword>
	endif
	regcount=regcount+1
    else
        rhandle catstr <arg>, <.handle>
        rchunk catstr <arg>, <.chunk>
    endif
endif

else
    ErrMessage <op : missing argument>
endif

endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

MACRO:		movOD

DESCRIPTION:	Move an OD

ARGUMENTS:
	dest - memory or register pair for destination
	source - memory or register pair for source
	[trashreg] - re'qd if moving memory to memory

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
movOD	macro	dest, source, trashreg
	local	drchunk, drhandle, srchunk, srhandle, regargs

regargs = 0
_CheckDWordTwoArg	<dest>, <source>, <movOD>
_ParseODArg	<dest>, drchunk, drhandle, regargs, <movOD>
_ParseODArg	<source>, srchunk, srhandle, regargs, <movOD>

if (regargs gt 0)
	mov	drhandle, srhandle
	mov	drchunk, srchunk
elseifnb <trashreg>
	mov	trashreg, srhandle
	mov	drhandle, trashreg
	mov	trashreg, srchunk
	mov	drchunk, trashreg
else
	ErrMessage <movOD : need trash register to move mem, mem>
endif

endm

;-----------------------------------------------------------------------------
;	diff - absolute value of the difference between 2 registers	
;-----------------------------------------------------------------------------

diff	macro	dest, source
local	done
	sub	dest, source
	jns	done
	neg	dest
done:
endm


ECCheckChartType	macro	value
if ERROR_CHECK
	cmp	value, ChartType
	ERROR_AE	ILLEGAL_CHART_TYPE
endif
endm

;-----------------------------------------------------------------------------
;	Checking chart variation.  Can't actually compare against
;"ChartVariation" because this is a union, so I assume that the max
;legal value must be less than 2 * column variation		
;-----------------------------------------------------------------------------
 
ECCheckChartVariation	macro	value
if ERROR_CHECK
	cmp	value, ChartColumnVariation * 2
	ERROR_AE	ILLEGAL_CHART_VARIATION
endif
endm

ECCheckFlags	macro	value, flagtype
if ERROR_CHECK
	pushf
	test	value, not mask flagtype
	ERROR_NZ	ILLEGAL_FLAGS
	popf
endif
endm	


;-----------------------------------------------------------------------------
;	sort - ensure that "low" <= "high" (signed compare)		
;-----------------------------------------------------------------------------
 
sort	macro	low, high
local	done
	cmp	low, high
	jle	done
	xchg	low, high
done:
endm


;-----------------------------------------------------------------------------
;	abs - absolute value		
;-----------------------------------------------------------------------------
 
abs	macro	reg
local	done
	tst	reg
	jns	done
	neg	reg
done:
endm


;-----------------------------------------------------------------------------
;	fitU - unsigned "fit" command -- make sure that
;	dest is between "low" and "high", inclusive		
;-----------------------------------------------------------------------------
 
fitU	macro	dest, low, high
local	checkHigh, done
	cmp	dest, low
	jae	checkHigh
	mov	dest, low
	jmp	done

checkHigh:
	cmp	dest, high
	jbe	done
	mov	dest, high
done:
endm


;-----------------------------------------------------------------------------
;	Stolen from grobjMacro, with all due apologies		
;-----------------------------------------------------------------------------
 

movnf	macro	reg, constant
if (constant ne 0)
	mov	reg, constant
else
	clr	reg
endif
endm

addnf	macro	reg, constant
if (constant ne 0)
   if (constant eq 1)
	inc	reg
   else
	add	reg, constant
   endif
endif
endm

subnf	macro	reg, constant
if (constant ne 0)
   if (constant eq 1)
	dec	reg
   else
	sub	reg, constant
   endif
endif
endm

;-----------------------------------------------------------------------------
;	DerefChartObject -- dereference the chart object whose chunk
;handle is *ds:si into ds:di.  It's a macro in case we decide to go to
;master classes later on.
;-----------------------------------------------------------------------------
 
DerefChartObject	macro	seg, source, dest
if ERROR_CHECK
	ifdif <seg>, <ds>
		push	ds
		segmov	ds, seg
	endif
	ifdif <source>, <si>
		push	si
		mov	si, source
	endif
	call	ECCheckChartObjectDSSI
	ifdif <source>, <si>
		pop	si
	endif
	ifdif <seg>, <ds>
		pop	ds
	endif
endif	
	mov	dest, seg:[source]
endm


; Call a routine and make sure that the named register wasn't trashed.
; Can not be used when called routine returns a value in DI

CallCheckTrash	macro	dest, reg
if ERROR_CHECK
	push	di
	push	reg
	call	dest
	mov	di, sp
	cmp	reg, ss:[di]
	ERROR_NE	REGISTER_WAS_TRASHED
	pop	reg
	pop	di
else
	call	dest
endif
endm

ECCheckEtype	macro	source, type
if ERROR_CHECK 
	cmp	source, type
	ERROR_AE	ILLEGAL_VALUE
endif
endm
	
