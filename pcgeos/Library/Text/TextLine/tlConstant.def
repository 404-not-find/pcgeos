COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		tlConstant.def

AUTHOR:		John Wedgwood, Nov 19, 1991

	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jcw	11/19/91	Initial revision


DESCRIPTION:
	Exported routines and structures from the TextLine module
		
	$Id: tlConstant.def,v 1.1 97/04/07 11:20:23 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;-----------------------------------------------------------------------------
;			      Constants
;-----------------------------------------------------------------------------

;
; The number of FieldInfo structures to add when new ones are needed.
;
FIELD_ARRAY_INCREMENT	= 10

;
; This is a 'default' tab attributes record.
;
DEFAULT_TAB_ATTRIBUTES	= TabAttributes <0, 0, TL_NONE, TT_LEFT>

;-----------------------------------------------------------------------------
; TextLineVariants define the various line related functions which are
; handled differently for the different types of text object (large/small).
;
TextLineVariant		etype	word, 0, 6

TLV_LINE_INSERT	enum	TextLineVariant
;
; Insert some number of lines.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Current line (-1 to append lines)
;		dx.ax	= Number of lines to insert
;

TLV_LINE_DELETE	enum	TextLineVariant
;
; Delete some number of lines.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Current line
;		dx.ax	= Number of lines to delete
;

TLV_LINE_ADJUST_FOR_REPLACEMENT	enum	TextLineVariant
;
; Adjust the line and field offsets after a change in the text.
;	PASS:	*ds:si	= Instance ptr
;		ss:bp	= VisTextReplaceParameters
;

TLV_LINE_CALCULATE	enum	TextLineVariant
;
; Calculate some lines after a change.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;		dx	= LineFlags for line
;		ss:bp	= LICL_vars
;

TLV_LINE_GET_LEFT_EDGE	enum	TextLineVariant
;
; Get the left edge of a line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	ax	= Left edge of line as offset from region left edge
;

;----------------------------------------------------------------------------

TLV_STORAGE_CREATE	enum	TextLineVariant
;
; Create line and field storage for a text object.
;	PASS:	*ds:si	= Instance ptr
;

TLV_STORAGE_DESTROY	enum	TextLineVariant
;
; Destroy line and field storage for a text object.
;	PASS:	*ds:si	= Instance ptr
;

TLV_LINE_GET_COUNT	enum	TextLineVariant
;
; Get the number of lines in a text object.
;	PASS:	*ds:si	= Instance ptr
;	RETURN:	dx.ax	= Number of lines in the objectn
;

TLV_LINE_TEXT_POSITION	enum	TextLineVariant
;
; Given a text offset into a line and a pixel offset, compute the nearest
; possible valid position where the event at that pixel offset could have
; occurred.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;		dx.ax	= Offset to calculate up to
;		bp	= Pixel offset from the left edge of the line
;	RETURN:	dx.ax	= Nearest character offset
;		bx	= Pixel offset from the left edge of the line
;

TLV_LINE_TO_POSITION	enum	TextLineVariant
;
; Get the position of the left edge of a line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	cx.bx	= 32 bit left edge of the line
;		dx.ax	= 32 bit top edge of the line
;

TLV_LINE_FROM_POSITION	enum	TextLineVariant
;
; Given a position, find the line it is closest to.
;	PASS:	*ds:si	= Instance ptr
;		ax	= 16 bit X event position
;		dx	= 16 bit Y event position
;		cx	= Region
;	RETURN:	bx.di	= Line
;		carry set if the position is below the last line
;

TLV_LINE_INVERT_RANGE	enum	TextLineVariant
;
; Invert a range of text on a line.
;	PASS:	*ds:si	= Instance ptr
;		ss:bp	= LICL_vars with:
;			    LICL_line = line to invert on
;			    LICL_range holds the range to invert
;			    VTR_start = 0 for line start
;			    VTR_end   = TEXT_ADDRESS_PAST_END for line end
;

TLV_LINE_TO_OFFSET_START	enum	TextLineVariant
;
; Get the offset of the start of a line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	dx.ax	= Offset to the start of the line
;

TLV_LINE_TEST_FLAGS	enum	TextLineVariant
;
; Test for flags being set in the LineFlags for a given line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;		ax	= LineFlags to test
;	RETURN:	Zero flag clear (non-zero) if any bits in ax are set in the
;			LineFlags for the line.
;

TLV_LINE_GET_BLO	enum	TextLineVariant
;
; Get the baseline-offset of a line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	dx.bl	= Baseline-offset (WBFixed)
;

TLV_LINE_ALTER_FLAGS	enum	TextLineVariant
;
; Alter the LineFlags associated with a given line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;		ax	= Bits to set
;		dx	= Bits to clear
;		if ax == dx then the bits set in ax are toggled.
;

TLV_LINE_CLEAR_BEHIND	enum	TextLineVariant
;
; Clear the area behind a line of text
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;		al	= TextClearBehindFlags
;		ss:bp	= LICL_vars structure with these set:
;				LICL_theParaAttr
;				LICL_paraAttrStart
;				LICL_paraAttrEnd
;			    if paraAttr invalid
;				LICL_paraAttrStart = -1
;

TLV_LINE_DRAW	enum	TextLineVariant
;
; Draw a line of text
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line to draw
;

TLV_LINE_DRAW_LAST_N_CHARS	enum	TextLineVariant
;
; Draw the last <dx> characters of a line.
;	PASS:	*ds:si	= Instance ptr
;		ss:bx	= LICL_vars w/ LICL_firstLine* set
;		cx	= Number of characters at the end to draw
;

TLV_LINE_CLEAR_FROM_END	enum	TextLineVariant
;
; Clear from the end of the line to the right edge of the region.
;	PASS:	*ds:si	= Instance ptr
;		ss:bx	= LICL_vars w/ LICL_firstLine* set
;

TLV_LINE_GET_FLAGS	enum	TextLineVariant
;
; Get the flags for a given line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	ax	= LineFlags for the line
;

TLV_LINE_GET_HEIGHT	enum	TextLineVariant
;
; Get the height of a line.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	dx.bl	= Line height (WBFixed)
;

TLV_LINE_GET_TOP	enum	TextLineVariant
;
; Get the top of a line as an offset from the top of the region.
;	PASS:	*ds:si	= Instance ptr
;		bx.cx	= Line
;	RETURN:	dx.bl	= Top of line (WBFixed)
;

;-----------------------------------------------------------------------------
;			      Structures
;-----------------------------------------------------------------------------
CommonDrawParameters	struct
    CDP_drawPos		PointWBFixed	; X/Y position to draw at

    CDP_nChars		word		; Number of chars in current field
    CDP_totalChars	word		; Number of chars at end of line to draw
    CDP_tOffset		dword		; Text offset of start of text to draw
    CDP_lineStart	dword		; Offset to start of line
    CDP_region		word		; Region containing line
    CDP_gdfVars		GDF_vars	; GrDrawTextField() stack frame
    
    CDP_liclVars	word		; Pointer to LICL_vars on stack
    CDP_flip		word		; Flip width for RTL (calculated)
CommonDrawParameters	ends


CommonReplaceParameters	struct
    CRP_lineStart	dword		; Offset to line start
CommonReplaceParameters	ends
