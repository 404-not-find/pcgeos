Names as seen from the parser/evaluator library.
		-jw,  2/26/91

$Id: NAMES,v 1.1.35.1 97/03/29 03:48:30 canavese Exp $
------------------------------------------------------------------------------

The parser/evaluator library has a somewhat generic view of names. During
parsing when it finds identifiers which it cannot identify it calls back to
the application asking for a token for the identifier. This token is what
the parser library considers to be a name.

The parser/evaluator library has a few needs for names:
	- It needs to be able to convert a name-string into a token number
	- It needs to be able to get the definition associated with the name
	- It needs to be able to add/remove dependencies for a name

These needs are fulfilled by the application by means of callback
routines.

One callback converts the identifier to a token number. This callback is
invoked by the parser after it has decided that the text it is parsing has
parsed correctly. This is done so that the application doesn't generate
data-structures for names in a string that doesn't parse correctly.

Two callbacks are used for locking and unlocking the definitions associated
with a name. This might have been done with a single callback which would
be passed some sort of indicator telling it which operation to do, but I felt
that the code looked cleaner done with multiple callbacks.

The evaluator, when it is generating dependencies requires two callbacks
which lock and unlock name definition, but also generate dependencies for
the cells in question.
