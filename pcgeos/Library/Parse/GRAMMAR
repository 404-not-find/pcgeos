
Description of the grammar understood by the parse library.
		John Wedgwood,  February 1st, 1991

$Id: GRAMMAR,v 1.1.35.1 97/03/29 03:48:29 canavese Exp $
******************************************************************************

**
** An expression is what the parser expects to find when it starts parsing.
**
expr:
	"(" expr ")"
	"-" expr
	IDENTIFIER "(" function_args ")"
	base_item
	base_item more_expr

more_expr:
	<empty>
	"%" more_expr		<- Percent operator
	BINARY_OP expression
	
function_args:
	empty
	arg_list

arg_list:
	expression
	expression "," arg_list

base_item:
	NUMBER
	STRING
	CELL_REF
	IDENTIFIER
	

**
** These are the operators
**
Unary operators:
	-	(negation)
	%	(percent)

Binary operators:
	%	(modulo)
	-	(subtraction)

	*	(multiplication)
	/	(division)
	+	(addition)
	^	(exponentiation)

	<	(less than)
	>	(greater than)
	=	(equality)
	<=	(less than or equal)
	>=	(greater than or equal)
	<>	(not equal)
	:	(range separator)
	...	(range separator)


**
** Some notes on tokens returned from the scanner.
**
constant:
	All constants are floating point numbers.

string:
	Strings are defined as a sequence of characters between double
	quotes ("). The backslash character (\) can be used to escape
	a quote. A string containing a single double quote would be
	defined by:
		"\""
	In addition the following can also be used in a string:
		\n	- Newline (Ctrl-J)
		\t	- Tab (Ctrl-I)
		\f	- Form-feed (Ctrl-L)
		\b	- Backspace (Ctrl-H)
		\\	- Backslash
		\ddd	- Octal character value, always three digits

cell reference:
	Cell references are returned by the scanner and are a row/column
	reference to a cell of data. Flags tell whether or not the
	references are absolute or relative.
