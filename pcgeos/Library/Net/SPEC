
			   PC/GEOS Net Library
			Architectural Specification
			---------------------------

Revision History:
		EDS	8/26/92		Initial Revision
		EDS	9/18/92		Updated for new architecture.

Revision:	$Id: SPEC,v 1.4.28.1 97/03/29 04:57:52 canavese Exp $
-------------------------------------------------------------------------------

Table of Contents
-----------------
	Overview
	Definitions
	Architecture
	How Network-Specific Drivers are Loaded
	Comparison to OS/2 V2.0's "Network-Independent Worker" API
	Future Work
	Relation to the Network-Specific PC/GEOS Filesystem Drivers
	How to add a new call to the Net Library

-------------------------------------------------------------------------------
				Overview
-------------------------------------------------------------------------------

The PC/GEOS Net library provides a network-independent API to PC/GEOS
applications which access network resources. Example resources include:

	- network-based drives, modems, printers, etc.

	- user information databases (such as the Novell Bindery)

	- network communication, to and from the various servers and clients

	- server-based semaphores

All of the lower level network-specific work is handler by a layer of drivers.
For example:

	- NetWare driver

	- Lantastic driver

	- Comm driver (for serial & parallel cable and infrared networks)

	- CEBUS driver (The EIA's home automation standard that uses AC power
	lines, twisted pair, COAX, infrared, and even fiber optic mediums.)

The Net library is also useful on a workstation that is not connected
to any networks. It will permit some applications that depend upon a network
connection to run in standalone mode. For example, the following resources
would still be provided:

	- returning the user's name (get it from the geos.ini file)

	- accessing a server-based semaphore (create a PC/GEOS-based
		semaphore instead)

	- listing the available network printers (return an empty list)

This is also useful in cases where a network-dependent application is
demonstrated on a standalone workstation. For example, when the user
brings up a list of network printers, one or two fictitious network
printer names could be returned from the Net library. A flag in the geos.ini
file indicates whether the library is running in this "demo" mode.

Note that the API for a specific network driver will be defined such that
each network provider can write their own specific driver.

-------------------------------------------------------------------------------
				Definitions
-------------------------------------------------------------------------------

netpath:	An ascii string which can define any level of depth in
		pinpointing a specific resource on a specific server,
		in a specific domain. This is a further generalized version
		of the OS/2 UNC (Universal Naming Convention). Sample netpaths:

		    /BERK_ENGR_NET:
		    /BERK_ENGR_NET:/GOBEARS
		    /BERK_ENGR_NET:/GOBEARS/JOE/FULL_NAME
		    /BERK_ENGR_NET:/GOBEARS/BIGDRIVE
		    /BERK_ENGR_NET/TONYS_OFFICE_LAN:/TINYSERVER/FAST_MODEM
		    /INFRARED_WITHIN_THIS_ROOM:/CHAT_SOCKET
		    /INFRARED_WITHIN_THIS_ROOM:/BILLS_CASIO/ChessGame
		    /HOME_TP_BUS/HOME_AC_BUS:/DADS_TV/VOLUME_CONTEXT/GET_VALUE

		For efficiency and coding simplicity, there is a compact way
		to represent a netpath. Essentially, all of the Net library
		entry points which expect a netpath are passed the handle of
		the global memory block which contains that path. Typically,
		this block is created by the caller, and passed by reference
		into the Net library. The caller can use NetCompactNetpath()
		to shrink a path as much as possible. For example, the
		Net Library would shrink:

			/BERK_ENGR_NET:/GOBEARS/BIGDRIVE

		to:

			/BERK_ENGR_NET::<netware handle for the drive>

		Therefore, the nw3.geo driver does not have to parse
		the server name and driver name for each call which
		relates to this specific drive, and, the netpath is shorter.
		This becomes important when you consider that each component
		of the path could be 256 characters. (OR SOME BIG NUMBER)

object:		Anything that is described by any component of a netpath.
		Sample objects:

			domain
			server (any node on the network)
			filesystem
			printer
			modem
			user
			usergroup
			device
			semaphore
			database
			service
			action/command

domain:		A domain is a single network that contains any number of
		servers, clients, and other domains. Using this term instead
		of the the term "network" allows us to discuss cases where
		a specific network is part of a building-wide network, which
		is part of a wide-area network.

network:

server:

client

resource

-------------------------------------------------------------------------------
			Architecture
-------------------------------------------------------------------------------

Here are the highlights of the Net Library & driver architecture:

	- PC/GEOS will have one Net Library, which serves as a manager
	and router for all of the specific network drivers that lie
	below it.

	- All of the Net Library library entry points are assembly calls.
	All will have C equivalents. There is a one-to-one correspondence
	between the Net library entry points and the specific network driver
	functions. In some cases, a single call into the Net library
	will invoke a specific driver function in more than one specific
	network driver.

	- The Net Library will read the list of drivers to initially load
	from the geos.ini file. In some OEM versions of PC/GEOS, this list
	will be very specific. For a generalized desktop or server-based
	version of PC/GEOS, there will a Preferences module which allows
	the user to select which drivers are preloaded.

	- Specific network drivers can be loaded and unloaded on the fly.
	Each will register and unregister itself with the Net Library,
	so that the driver can be accessed to browse and use resources
	that are available through the networks provided by that driver.

	- The principal Net library calls are very generic in nature, to permit
	an application (such as a LAN-Aware PC/GEOS Workplace Shell) to
	browse the available networks, servers, and resources.

	- The main Net library calls are (each is described in more detail
	below):

		NetEnumNetpath
		NetGetObjectType
		NetUseNetpath
		NetCompactNetpath

	These calls are deceivingly simple. When you consider all of the
	cases, they provide many of the standard functions you would
	expect:

		get list of domains
		attach to a domain
		authenticate to server (verify password)
		detach from domain

		get list of servers
		attach to server
		authenticate to server (verify password)
		detach from server

		get list of resources
		connect to resource
		authenticate to resource (verify password)
		disconnect from resource

		get data field from resource
		set data field in resource

	These calls are great in terms of providing the caller the ability
	to browse all of the available resources on the various servers
	and networks connected (however losely) to this client.

	However, there are many common cases in which these highly generic
	calls become burdensome, so a set of auxiliary calls are provided:

		NetChoosePrinter

		NetOpenSem
		NetPSem
		NetVSem
		NetCloseSem
		NetExamineSem

		NetSendMessage

	(Expand on this last as we look at each specific API category.)

	- The Net Library provides a set of utility calls, to simplify
	the task of writing a specific network driver. For example,

		NetUtilCreateList
		NetUtilAddItemToList
		NetUtilCloseList

	are used by any driver which is in the process of building a list
	of data items to return to the caller. Therefore, many of
	the Net Library API calls can offer the flexibility of returning
	the list as a single memory block or as a HugeArray, while also
	allowing the caller to provide a fixed callback routine to be
	invoked for each item added to the list.

	- The Net library, and the specific network drivers, will all handle
	the exit, shutdown and task switch cases correctly. The Net Library
	will be responsible for calling the correct function within each
	loaded driver in these cases.

Net Library Calls
-----------------
Here's a brief summary of the Net Library calls. See net.def for specific
pass/return conventions.

NetRegisterDomain(domainName, driverStrategyRoutine)

	This is called by a specific network driver when it loads
	and wants to indicate the domain(s) that it has access to.
	The Net Library will keep track of this domain name, and strategy
	routine address, so that it can call the driver when routing
	calls from applications. A driver can add domains to they become
	available using this call.

NetUnregisterDomain(domainName)

	The driver will call this when a domain is no longer accessible.
	Before a driver exits, it will make this call for all of the domains
	that it had previously registered. Any future calls to the Net Library
	which request this domain will be refused.

NetEnumNetpath(netpath)

	Applications call this to learn more about the objects which lie
	at the tail end of this path. Some examples:

	    NetEnumNetpath("")
		->	    BERK_ENGR_NET
			    INFRARED_WITHIN_THIS_ROOM

	    NetEnumNetpath("/BERK_ENGR_NET")
		->			  TONYS_OFFICE_LAN
					  GOBEARS
					  ARNOLD

	    NetEnumNetpath("/BERK_ENGR_NET:/GOBEARS")
		->				   PRINT_QUEUES
						   MESSAGING
						   SEMAPHORES
						   USERS
						   DRIVES

	    NetEnumNetpath("/BERK_ENGR_NET:/GOBEARS/DRIVES")
		->					  LEGAL
							  FINANCE
							  COMPANY
							  PUBLIC

	In addition to the name of the object, the type of the object
	is also returned. This is how the caller knows that a specific
	path should not be investigated any further.

	Would be nice: an any-depth wildcard search for a specific type of
	object: would enum as deep as defined by some criteria, looking for a
	specific object type. This would, for example, allow you to easily
	locate ALL of the printers which are accessible in all domains.

NetGetObjectType(objectname)

	For any of the object names which are returned by NetEnumNetpath
	in the list, you can call this function to determine the type
	of object it represents. See the "Definitions" section of this
	document for a full list of object types.

NetUseNetpath(netpath)

	This is the generic way to open/activate/trigger/start a specific
	resource. For example:

	    NetUseNetpath("/BERK_ENGR_NET:/GOBEARS/NW_BINDERY/BINDERY_CLOSE")

	The NetWare specific driver will interpret this to mean that the
	NetWare Bindery (database) should be closed to future updates.
	The object names "NW_BINDERY" and "BINDERY_CLOSE" are network-specific
	names which were previously returned to the caller during a
	NetEnumNetpath call. In some cases, the object types can be used
	to attempt to find the correct object names like these; in other
	cases, the user will assist in the choosing an object name from
	a list on the screen.

	In general, return arguments should be expected, and will be
	network-specific data structures.

Calls for Specific Functions
----------------------------
The general NetUseNetpath call shown above is not ideal for the common
calls which are supported by most networks. In many of these cases,
a specific network-independent data structure should be passed,
and a similar structure returned from the call.

The Net library provides the following "function specific" calls:

	NetEnumPrinters(netpath)
	NetChoosePrinter(netpath,printerSettings)

	NetOpenSem(netpath,maxValue)
	NetPSem(netpath,timeout)
	NetVSem(netpath)
	NetCloseSem(netpath)
	NetExamineSem(netpath)

	NetSendMessage(netpath,message)

	(Expand on this last as we look at each specific API category.)


Shortcuts
---------
The various aspects of this architecture are scheduled according to their
importance to the currently committed PC/GEOS products:

	- The APIs will be defined as much as possible. Some will be left
	for future refinement.

	- A small subset of the Printer-specific functions will be supported.

	- No login/logout functions will be supported.

	- No drive mapping functions will be supported.

	- Browsing using NetEnumNetpath may be limited.

	- no LAN-aware Workplace Shell or GeoManager is currently scheduled.


-------------------------------------------------------------------------------
		How Network-Specific Drivers are Loaded
-------------------------------------------------------------------------------

The approach for how the network-specific drivers are to be loaded by
the Net Library takes the following goals into account:

	- Should be able to specify which drivers are to be loaded in the
	GEOS.INI file. Preferences allows the user to add and remove
	the names of network drivers from the list.

	- In parsing the list of drivers from the GEOS.INI file, some special
	cases should be taken into account:

		"null" (or no category or keyword in geos.ini file)
			- the Net library should not load any drivers, and
			should return null values to callers. This is the
			typical standalone workstation case.

		"nulldemo"
			- same as above, but certain "dummy resources"
			appear to be provided, such as returning the list
			of printers, etc.

		"all"
			- The Net Library should load ALL of the network
			specific drivers that are in the SYSTEM\NET
			directory. (Many will quickly exit when they find
			that the necessary DOS-level driver or hardware
			is missing.)

	- An application should be able to load a specific network driver
	on the fly, and have it registered with the Net Library.

	- Similarly, a driver should be able to exit at any time,
	after unregistering itself with the Net library.

How this works:
	- As the Net Library starts up, it may attempt to load one or more
	drivers, based upon the settings in the GEOS.INI file. It will NOT
	keep track of these drivers IN ANY WAY.

	- A driver will therefore be loaded either by the Net Library,
	or at a later time by an application which insists upon it. In any
	case, once the driver has determined that it can perform its
	duties, it will call NetRegisterDomain to indicate to the Net Library
	that the driver is ready for business.

	- The Net Library will keep track of this domain name, and strategy
	routine address, so that it can call the driver when routing
	calls from applications.

	- At any point, the driver can decide to unload itself. It calls
	NetUnregisterDomain to indicate to the Net Library that this driver
	is no longer available. Any future calls to the Net Library which
	request this domain will be refused.

	- Note that a driver could register itself as any number of separate
	domains: A typical session where the Net library loads the nw3.geo
	and comm.geo drivers could result in the following domains being
	registered:

		/BERK_ENGR_NET:
		/SEATTLE_ENGR_NET:
		/BERK_ENGR_NET/TONYS_OFFICE_LAN:
		/DIRECT_SERIAL_CABLE_TO_JOE:
		/INFRARED_WITHIN_THIS_ROOM:

-------------------------------------------------------------------------------
Comparison to OS/2 V2.0's "Network-Independent Worker" API
-------------------------------------------------------------------------------

The PC/GEOS Net Library shares a common architecture with the OS/2 V2.0
"Network-Independent Worker" library.

Both approaches involve:
	- One common library, which provides the API to all applications
	which need access to network resources. This library serves
	as a router of sorts, directing each API call to the appropriate
	network driver, or set of drivers.

	- A similar API between the applications and the common library,
	in which an ascii string path is supplied to identify a resource,
	and specific calls are available for some functions.

	- Network-specific drivers (they use DLLs under OS/2) can start
	and exit on the fly, as long as they register and unregister
	themselves from the common library.

There are some differences between the implementations:

	- The Net Library works with network-specific drivers, rather than
	DLLs (libraries), as in OS/2.

	- The specific network drivers only supply support for the calls
	which we require for our current projects. For example, the
	NetWare driver does not support login/logout to servers yet.

	- Under OS/2, the specific network library must hang around after
	it has unregistered itself with the common library, because one or
	more applications may still be directly using that specific library.
	(It's unclear from the OS/2 docs how the specific library eventually
	unloads itself.) Under PC/GEOS, the driver is permitted to exit at
	any point. All Net Library API calls include the network name as an
	argument, so the Net Library can verify that a driver still exists
	before attempting to call it.


-------------------------------------------------------------------------------
			Future Work
-------------------------------------------------------------------------------

Future work to be done:
	Complete APIs for:
		printing
		drive mapping
		login/logout
		connection-based messaging
		full bindery access
		etc.

	Full C stubs for all assembly entry points

	Notify the PC/GEOS Filesystem Drivers when a new drive becomes
	available on a server. Update file selectors and Workplace Shell.

	Have the Workplace Shell browse recursively, building a hidden
	directory tree representing the structure which is found. Display
	this structure using new "Network", "Server", and "Device" objects.

	Think about avoiding loops while browsing multiply-connected nets.

	Work with network providers to create lots of network-specific drivers.

	Create a Preferences module which lets the user specify which drivers
	should be pre-loaded.

	Anarchists only: Write the CEBUS driver, especially a
		CEBUS infrared driver which will work on the Casio.

-------------------------------------------------------------------------------
	Relation to the Network-Specific PC/GEOS Filesystem Drivers
-------------------------------------------------------------------------------

PC/GEOS has a NetWare Filesystem driver, called "netware.geo". It presently
asks DOS which drives are available, and makes an occasional call into
the NetWare API (NETx.COM) to learn more about a drive. We will need to
notify this FS driver as drives come and go.

-------------------------------------------------------------------------------
	How to add a new call to the Net Library
-------------------------------------------------------------------------------

update this section from the old SPEC

