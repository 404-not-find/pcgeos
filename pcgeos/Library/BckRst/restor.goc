/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GlobalPC 1998.  All rights reserved.
	GLOBALPC CONFIDENTIAL

PROJECT:	Backup and Restore library
MODULE:		Restore moduel
FILE:		restore.goc

AUTHOR:		Edwin Yu, Nov 27, 1998

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name		Date		Description
	----		----		-----------
	edwin    	11/27/98   	Initial version.

DESCRIPTION:

	$Id: $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@include "bckrst.goh"
#include <Ansi/string.h>

extern const char backup_dir[];
extern FileHandle GetIndexOfBackups(FileAccessFlags flags);
extern optr FileIndexReadBackupGroups
(word *num, FileHandle index, word *maxFileLen, BackupType type);
extern FileHandle GetContentOfBackup(GroupID id, char *absPath);
extern Boolean FileContentRestore
(FileHandle content, word diskHandleOrPathToken, 
 const char *relativePath, char *absPath, void (*statusCallback)(void));
extern optr FileContentReadBackupGroup
(word *num, FileHandle content, word *maxFileLen);
Boolean FileContentGetInfo
(FileHandle content, word *numFiles, dword *totalSize,
 const char *relativePath, word diskHandleOrPathToken);
Boolean FileIndexDeleteBackupGroup
(FileHandle index, GroupID id, word i, void (*statusCallback)(void));
word FileIndexGetEntry
(FileHandle index, GroupID id, BackupType *type);

/***********************************************************************
 *	BRListBackupGroups
 ***********************************************************************
 *
 * SYNOPSIS:	    List all the single file backups.
 *                  
 * PARAMETERS:	    *num - to be returned, number of items in the list.
 *                  *maxFileLen - to be returned, the len of longest
 *                                file.
 *                  type - type of backup groups we're getting.
 *                  Returen optr(MemHandle,ChunkHandle) of the list.
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    Allocate the memory for the array.  The caller 
 *                  needs to free the array.
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/09/98   	Initial Revision
 *	
 ***********************************************************************/
optr _far _pascal BRListBackupGroups
(word *num, word *maxFileLen, BackupType type)
{
    optr chunkArray = NULL;
    FileHandle index;
    *num = 0;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Get the root BACKUP/index file.
     */
    index = GetIndexOfBackups(FILE_ACCESS_R | FILE_DENY_W);
    if (index) {
	/*
	 *  Generate a list of single file backup.
	 *  Make sure to FileClose the index file.
	 */
	chunkArray = FileIndexReadBackupGroups
	    (num, index, maxFileLen, type);
    }
    FilePopDir();
    asm{pop ds};

    return chunkArray;
} /* End of BRListBackupGroups */


/***********************************************************************
 *	BRRestoreBackupGroup
 ***********************************************************************
 *
 * SYNOPSIS:	    Restore a backup group or a file in that backup group.
 *                  If the file token or relativePath is NOT given,
 *                  restore the backup group.
 * PARAMETERS:	    GroupID  - id of the backup group
 *
 *                  (Two optional args. Pass NULL if restore backup group)
 *
 *                  pathToken - path token of the dir where the file
 *                              was backed up.
 *                  relativePath - of backup file. I.g. "\Newsletter"
 *                                 The path is where the file was in
 *                                 Geos tree, NOT in the backup dir.
 *                      
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/10/98   	Initial Revision
 *	
 ***********************************************************************/
Boolean _far _pascal BRRestoreBackupGroup
(GroupID id, word diskHandleOrPathToken, const char *relativePath, 
 void (*statusCallback)(void))
{
    Boolean ok = FALSE;
    FileHandle content = NULL;
    char absPath[PATH_LENGTH];

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Get the root/BACKUP/groupID/content file.
     */
    content = GetContentOfBackup(id, absPath);
    if (content) {
	ok = FileContentRestore(content, diskHandleOrPathToken, 
				relativePath, absPath, statusCallback);
    }

    FilePopDir();
    asm{pop ds};

    return ok;
}


/***********************************************************************
 *	BRGetInfoOnBackupGroup
 ***********************************************************************
 *
 * SYNOPSIS:	    Get file info about a particular backup group.
 * PARAMETERS:	    GroupID  - id of the backup group
 *                  numFiles - to be returned, number of files in the
 *                             backup group.
 *                  totalSize - to be returned, total size of the all 
 *                              files in the group.
 *
 *                optional parameters:
 *                  relativePath - file name
 *                  token        - path token of the file

 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/17/98   	Initial Revision
 *	
 ***********************************************************************/
Boolean _far _pascal BRGetInfoOnBackupGroup
(GroupID id, word *numFiles, dword *totalSize,
 const char *relativePath, word diskHandleOrPathToken)
{
    Boolean ok = FALSE;
    FileHandle content = NULL;
    char absPath[PATH_LENGTH];

    *numFiles = 0;
    *totalSize = 0;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Get the root/BACKUP/groupID/content file.
     */
    content = GetContentOfBackup(id, absPath);
    if (content) {
	ok = FileContentGetInfo(content, numFiles, totalSize,
				relativePath, diskHandleOrPathToken);
    }

    FilePopDir();
    asm{pop ds};

    return ok;
}

/***********************************************************************
 *	BRViewBackupGroup
 ***********************************************************************
 *
 * SYNOPSIS:	    return a list of all files in a backup group.
 * PARAMETERS:	    GroupID  - id of the backup group
 *                  numFiles - to be returned, number of files in the
 *                             backup group.
 *                  maxFileLen - to be returned, max. len of all file
 *                             names.
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	1/25/99   	Initial Revision
 *	
 ***********************************************************************/
optr _far _pascal BRViewBackupGroup
(GroupID id, word *num, word *maxFileLen)
{
    FileHandle content = NULL;
    char absPath[PATH_LENGTH];
    optr chunkArray = NULL;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Get the root/BACKUP/groupID/content file.
     */
    content = GetContentOfBackup(id, absPath);
    if (content) {
	chunkArray = FileContentReadBackupGroup
	    (num, content,maxFileLen);
    }

    FilePopDir();
    asm{pop ds};

    return chunkArray;
}


/***********************************************************************
 *	GetInfoOnUserDocDir
 ***********************************************************************
 *
 * SYNOPSIS:	    Get directory info about the user document dir.
 * PARAMETERS:	    numFiles - to be returned, number of files in the
 *                             user directory.
 *                  totalSize - to be returned, total size of the all 
 *                              files in the group.
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/28/98   	Initial Revision
 *   jfh		01/25/00		added test for AUI/CUI
 *                            ignore @nd_dire.000 files
 *   jfh		04/11/00       changed name length so that certain folders
 *						with long names would be recursed
 ***********************************************************************/
typedef struct 
{
 /*   char name[DOS_DOT_FILE_NAME_LENGTH_ZT];     /* file name */
    char name[FILE_LONGNAME_BUFFER_SIZE];     /* jfh - changed thruout routine */
    FileAttrs attr;                             /* file attr */
    dword size;                                 /* file size */
} RetVal;   /* return structure from FileEnum */
Boolean GetInfoOnUserDocDir(StandardPath token, char *relativePath, 
			    word *numFiles, dword *totalSize)
{
    FileEnumParams FE_params;   /* FileEnum parameters. */
    MemHandle      mem=0, memRet=0, FE_buffer=0;
    word           FE_numExtra=0; /* The number of files found beyond
                                   * what we asked for.               */
    char             *subdir;
    FileExtAttrDesc  *FE_returnAttrs;
    RetVal *ptr;


    /*
     *  Set current dir, alloc memory.  Error if return.
     */
    if (FileSetCurrentPath(token, relativePath) == NULL)
	return FALSE;
    if ((memRet = MemAlloc(sizeof(FileExtAttrDesc)*4,
			   HF_DYNAMIC, HAF_STANDARD_NO_ERR)) == NULL)
	return FALSE;

    FE_returnAttrs = MemLock(memRet);
    /*
     *  Desired infomation from FileEnum
     */
    FE_returnAttrs[0].FEAD_attr  = FEA_DOS_NAME;
    FE_returnAttrs[0].FEAD_value = 0;
    FE_returnAttrs[0].FEAD_size  = FILE_LONGNAME_BUFFER_SIZE;
    FE_returnAttrs[0].FEAD_name  = 0;

    FE_returnAttrs[1].FEAD_attr  = FEA_FILE_ATTR;
    FE_returnAttrs[1].FEAD_value = FILE_LONGNAME_BUFFER_SIZE;
    FE_returnAttrs[1].FEAD_size  = sizeof(FileAttrs);
    FE_returnAttrs[1].FEAD_name  = 0;

    FE_returnAttrs[2].FEAD_attr  = FEA_SIZE;
    FE_returnAttrs[2].FEAD_value = FILE_LONGNAME_BUFFER_SIZE +
	                           sizeof(FileAttrs);
    FE_returnAttrs[2].FEAD_size  = sizeof(dword);
    FE_returnAttrs[2].FEAD_name  = 0;

    FE_returnAttrs[3].FEAD_attr  = FEA_END_OF_LIST;
    FE_returnAttrs[3].FEAD_value = 0;
    FE_returnAttrs[3].FEAD_size  = 0;
    FE_returnAttrs[3].FEAD_name  = 0;
    /*
     * Enumerate all types of files in the current directory.
     */
    /* see which mode were in - jfh */
    if (UserGetDefaultUILevel() == UIIL_INTRODUCTORY)
	  FE_params.FEP_searchFlags   = FILE_ENUM_ALL_FILE_TYPES;
    else
       FE_params.FEP_searchFlags   = FILE_ENUM_ALL_FILE_TYPES | FESF_DIRS;
    FE_params.FEP_matchAttrs    = 0;
    FE_params.FEP_returnAttrs   = &FE_returnAttrs[0];
    FE_params.FEP_returnSize    = FILE_LONGNAME_BUFFER_SIZE +
	                          sizeof(FileAttrs) + sizeof(dword);
    FE_params.FEP_bufSize       = 1;
    FE_params.FEP_skipCount     = 0;
    FE_params.FEP_callback      = 0;
    FE_params.FEP_callbackAttrs = 0;
    FE_params.FEP_cbData1       = 0;
    FE_params.FEP_cbData2       = 0;
    FE_params.FEP_headerSize    = 0;
    FE_buffer                   = 0;
    FE_numExtra                 = 0;
    while (1) {
	if ( FileEnum( &FE_params, &FE_buffer, &FE_numExtra ) ) {
	    /*
	     *  Store and print the file/directory name.
	     */
	    EC( ECCheckMemHandle( FE_buffer ); )
	    ptr = (RetVal *)MemLock(FE_buffer);

	    if (ptr->attr & FA_SUBDIR) {
		/*
		 *  It's a sub directory.  Recursively search down.
		 */
		if ((mem = MemAlloc(PATH_LENGTH+1,
				    HF_DYNAMIC, HAF_STANDARD_NO_ERR)) != NULL) {
		    subdir = (char *)MemLock(mem);
		    strcpy(subdir, relativePath);
		    strcat(subdir, "\\");
		    strcat(subdir, ptr->name);

		    GetInfoOnUserDocDir(token, subdir, numFiles, totalSize);
		    MemFree(mem);
		    mem = 0;
		    /*
		     *  Set back to the current directory.
		     */
		    FileSetCurrentPath(token, relativePath);
		}
	    }
	    else { /* it's a file */
		 if (LocalCmpStringsNoCase(ptr, "@ND_Dire.000", 0)) {
		   /* don't count the link file */

		   (*numFiles)++;
		   (*totalSize) +=  ptr->size;
		   }
	    }
	    FE_params.FEP_skipCount++;
	    MemFree( FE_buffer );
	} else {
	    break; /*  No more files. */
	}
    }
    MemFree(memRet);
    return TRUE;
}

Boolean _far _pascal BRGetInfoOnUserDocDir(word *numFiles, dword *totalSize)
{
Boolean ok = FALSE;
*numFiles = 0;
*totalSize = 0;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
	*  Get # of files and total size of files to be copied.
	*/
    ok = GetInfoOnUserDocDir(SP_DOCUMENT, ".", numFiles, totalSize);

    FilePopDir();
    asm{pop ds};

    return ok;
}

Boolean _far _pascal BRGetInfoOnUserMailDir(word *numFiles, dword *totalSize)
{
Boolean ok = FALSE;
*numFiles = 0;
*totalSize = 0;
                              

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
	*  Get # of files and total size of files to be copied.
	*/
    ok = GetInfoOnUserDocDir(SP_PRIVATE_DATA, "mail", numFiles, totalSize);

    FilePopDir();
    asm{pop ds};

    return ok;

}

Boolean _far _pascal BRGetInfoOnUserFaxDir(word *numFiles, dword *totalSize)
{
Boolean ok = FALSE;
*numFiles = 0;
*totalSize = 0;


    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
	*  Get # of files and total size of files to be copied.
	*/
    ok = GetInfoOnUserDocDir(SP_PRIVATE_DATA, "efax", numFiles, totalSize);

    FilePopDir();
    asm{pop ds};

    return ok;

}
/***********************************************************************
 *	BRDeleteBackupGroup
 ***********************************************************************
 *
 * SYNOPSIS:	    Delete a backup group or a file in that backup group.
 *                  If the file token or relativePath is NOT given,
 *                  delete the backup group.
 * PARAMETERS:	    GroupID  - id of the backup group
 *
 *                  (Two optional args. Pass NULL if delete backup group)
 *
 *                  pathToken - path token of the dir where the file
 *                              was backed up.
 *                  relativePath - of backup file. I.g. "\Newsletter"
 *                                 The path is where the file was in
 *                                 Geos tree, NOT in the backup dir.
 *                      
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/21/98   	Initial Revision
 *	
 ***********************************************************************/
Boolean _far _pascal BRDeleteBackupGroup
(GroupID id, word diskHandleOrPathToken, const char *relativePath, 
 void (*statusCallback)(void))
{
    Boolean ok = FALSE;
    FileHandle index;
    BackupType type;
    word i;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Get the index file and the root/BACKUP/groupID/content file.
     */
    index = GetIndexOfBackups(FILE_ACCESS_RW | FILE_DENY_NONE);
    if (index) {
	/*
	 *  To delete:
	 *    (1) Search in the index file for the GroupID group.
	 */
	i = FileIndexGetEntry(index, id, &type);
	if (i != (word)-1) {
	    /*
	     *(2) Delete the backup group if it's a single file backup or
	     *    the user specifies to delete the backup group.
	     * or
	     *(2) Delete an entry in the content file and the file inside
	     *    the backup group.
	     */
	    if ( !relativePath || type == BT_SINGLE_FILE ) {
		/*
		 *  It's a single file backup or user wants to delete the
		 *  complete backup group.
		 */
		ok = FileIndexDeleteBackupGroup(index, id, i,
						(void (*)(void))statusCallback);
	    }
	    else {
		/*
		 *  Simply delete an entry in the root/backup/groupID/content 
		 *  file.
		 */
/*	    ok = FileContentDeleteEntry(); */
	    }
	}
	/*
	 *  Close file.
	 */
	FileClose(index, FALSE);
    }
    FilePopDir();
    asm{pop ds};

    return ok;
} /* End of BRDeleteBackupGroup */


/***********************************************************************
 *	BRGetBackupDiskFreeSpace
 ***********************************************************************
 *
 * SYNOPSIS:	    Get the free backup disk space.
 * PARAMETERS:	    void
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	1/05/98   	Initial Revision
 *	
 ***********************************************************************/
dword _far _pascal BRGetBackupDiskFreeSpace()
{
    DiskHandle dhand;
    dword spaceFree;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Check to see if the hard disk has enough space for the backup
     */
 //   dhand = FileSetCurrentPath(0, backup_dir);
    dhand = DiskRegisterDiskSilently(2);
    spaceFree = DiskGetVolumeFreeSpace(dhand);

    FilePopDir();
    asm{pop ds};

    return spaceFree;
}
