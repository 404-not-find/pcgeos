/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GlobalPC 1998 -- All Rights Reserved

PROJECT:	Backup Restore Library
MODULE:		Backup
FILE:		backup.goc

AUTHOR:		Edwin Yu, Nov 23, 1998

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Edwin	11/27/98   	Initial version.

DESCRIPTION:

	$Id: $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include "bckrst.goh"
@include <geoMisc.h>        /* itoa */
#include <ANSI/string.h>
#include <ANSI/stdlib.h>
#include <initfile.h>

typedef struct {
    StandardPath CF_pathToken;
    char CF_relativePath[PATH_LENGTH];
} ConfigFile;

ConfigFile backupConfig[] = {
    { SP_NOT_STANDARD_PATH, "c:\\autoexec.bat" },
    { SP_NOT_STANDARD_PATH, "c:\\config.sys" },
    { SP_TOP, "\\geosec.ini" },
    { SP_TOP, "\\geos.ini" },
    { SP_PRIVATE_DATA, "\\token_da.000" },
    { SP_PRIVATE_DATA, "dicts\\user_dic.000" }
};

extern const char backup_dir[];
extern const char backup_parentDir[];
extern Boolean CheckBackupDirectory(FileHandle *index);
extern GroupID CreateBackupFolder
(const char *description, BackupType bt, FileHandle index);
extern Boolean BackupGroupAddFile
(GroupID id, char *dest, word diskHandleOrPathToken, 
 const char *relativePath, const char *fileName);
Boolean RecursiveBackupDir
    (GroupID id, word pathToken,
     const char *relativePath, void (*callback)(void));

@start TextStrings, data;
@chunk char CannotCopyMsg[] = "\"\x01\" cannot be copied!";
@end TextStrings;

/***********************************************************************
 *	BRCreateBackupGroup
 ***********************************************************************
 *
 * SYNOPSIS:	    Create a backup group in the backup directory.
 *                  Update the root BACKUP/index file.
 * PARAMETERS:	    description - memo for the backup.
 *                  backupType  - type of the backup.
 *
 *                  If a new backup group folder is successfully created, 
 *                  return the group ID, else return the GROUPID_INVALID.
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	11/23/98   	Initial Revision
 *
 ***********************************************************************/
GroupID _far _pascal BRCreateBackupGroup
(const char *description, BackupType backupType)
{
    GroupID groupId = GROUPID_INVALID;
    FileHandle index;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Make sure the root BACKUP directory is valid.
     */
    if (CheckBackupDirectory(&index) == TRUE) {
	/*
	 *  Root BACKUP is fine. Let's create the backup group folder.
	 *  Update the BACKUP/index file.
	 */
	groupId = CreateBackupFolder(description, backupType, index);
    }
    FilePopDir();
    asm{pop ds};
    /*
     *  If a new backup group is successfully created, groupId contains
     *  a valid group id, else it contains GROUPID_INVALID value.
     */
    return groupId;
}


/***********************************************************************
 *	BRBackupSingleFile
 ***********************************************************************
 *
 * SYNOPSIS:	    Backup a single file into a backup group folder.
 * PARAMETERS:	    id - id of the backup group.
 *                  diskHandleOrPathToken - disk handle of source file,
 *                                          I.g. SP_DOCUMENT
 *                  relativePath - of the source file, including file name
 *                                 I.g.  "\Newsletter"
 *
 *                  If file copy operation is successful, 
 *                  return TRUE, else FALSE.
 * SIDE EFFECTS:    
 *
 * STRATEGY:        (1) Tell the backup group folder that a new file
 *                      is added to it.
 *                  (2) do the actual file copy.
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	11/23/98   	Initial Revision
 *
 ***********************************************************************/
Boolean _far _pascal BRBackupSingleFile
(GroupID id, word diskHandleOrPathToken, const char *relativePath)
{
    char dest[PATH_BUFFER_SIZE], *fileName;
    Boolean ok = FALSE;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Acknowledge the folder group about the new file
     */
    fileName = strrchr(relativePath, '\\');
    ok = BackupGroupAddFile(id, dest, diskHandleOrPathToken, relativePath,
			    fileName);
    if (ok) {
	/*
	 *  Copy the source file to the /BACKUP/GroupId directory.
	 */
	if (FileCopy(relativePath,dest,diskHandleOrPathToken,0)) {
	    ok = FALSE;
	    MemLock (OptrToHandle(@CannotCopyMsg));
	    UserStandardDialog((char *)0, (char *)0, (char *)0,
				  relativePath,
				  LMemDeref(@CannotCopyMsg),
				  (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
				  (GIT_NOTIFICATION <<
				CDBF_INTERACTION_TYPE_OFFSET));
	    MemUnlock (OptrToHandle(@CannotCopyMsg));
	}
    }
    else {
	/*
	 *  I need to handle this.......
	 */
	EC_ERROR(-1);
    }

    FileSetCurrentPath(0, backup_parentDir); /* ??? needed??? */
    FilePopDir();
    asm{pop ds};

    return ok;
} /* End of BRBackupSingleFile */


/***********************************************************************
 *	BRBackupUserDoc
 ***********************************************************************
 *
 * SYNOPSIS:	    Backup recursively all files under the USER DOCUMENT
 *                  directory into a backup group folder.
 * PARAMETERS:	    description - memo for the backup.
 *                  destination - the place to place the backup, either
 *                                on hard disk or on the floppy drive.
 *                  callback - callback routine for notification of each
 *                             file that has been backed up.
 *
 *                  If file copy operation is successful, 
 *                  return TRUE, else FALSE.
 * SIDE EFFECTS:    
 *
 * STRATEGY:        For each file in sub-directories, do
 *                  (1) add a new entry in CONTENT file of the backup 
 *                      group folder about a new file is being added
 *                  (2) do the actual file copy.
 *                  The proecess is done recursively.
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/04/98   	Initial Revision
 *
 ***********************************************************************/
Boolean _far _pascal BRBackupUserDoc
		  (const char *description,
		   BackupDrive destination,
		   Boolean BUEmail,
		   Boolean andFax,
		   void (*callback)(void))
{
GroupID id;
Boolean ok = FALSE, mailOK = TRUE, faxOK = TRUE;
DiskHandle	dh;


    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    /*
     *  Create a backup folder in the root BACKUP directory.
     *  Modified the root BACKUP/index file.
     */
    if (BUEmail)
	  id = BRCreateBackupGroup(description, BT_DOC_W_EMAIL);
    else
	  id = BRCreateBackupGroup(description, BT_DOCUMENT_DIR);
    if (id != GROUPID_INVALID) {
	/*
	 *  Recursivly add the files under SP_DOCUMENT 
	 *  into the backup folder.
	 */
	ok = RecursiveBackupDir(id, SP_DOCUMENT, "", callback);
	/* and the mail directory if selected */
	if (BUEmail) {
	   mailOK = RecursiveBackupDir(id, SP_PRIVATE_DATA, "\\mail", callback);
	   /* make sure there is an efax directory before we try to back it up */
	   FilePushDir();
	   dh = FileSetCurrentPath(SP_PRIVATE_DATA, "efax");
	   FilePopDir();
	   if (andFax && dh)
		 faxOK = RecursiveBackupDir(id, SP_PRIVATE_DATA, "\\efax", callback);
	   }
    }
    /*
     *  As a safeguard, we also backup additional system configuration
     *  files, so that our technical support people can look at it.
     *  User will not see these files, nor these will be restored 
     *  back to the system.
     */
    BRBackupSystemConfigWithID(id);

    FilePopDir();
    asm{pop ds};

    if (mailOK && faxOK && ok) return TRUE;
    else return FALSE;

} /* End of BRBackupUserDoc */


/***********************************************************************
 *	BRBackupSystemConfigWithID
 ***********************************************************************
 *
 * SYNOPSIS:	    Backup some system files into a backup group.
 *                  These system files are pre-defined in the 
 *                  backupConfig[] array.
 *
 * PARAMETERS:	    GroupID id - the backup group into which the system
 *                               files will be stored.
 *                  
 *
 *                  If file copy operation is successful, 
 *                  return TRUE, else FALSE.
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/04/98   	Initial Revision
 *
 ***********************************************************************/
Boolean _pascal bkupcallback 
(const char *stringSection, word sectionNum, void *id)
{
    char groupId[10], dest[PATH_LENGTH], *fileName, *comma;
    word pathToken;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());

    itoa(*((word *)id), groupId);
    strcpy(dest, backup_dir);
    strcat(dest, "\\");
    strcat(dest, groupId);

    if (!FileSetCurrentPath(0, dest)) {
	asm{pop ds};
	return TRUE;  /* Can't find the backup group dir. TRUE to stop */
    }
    /*
     *  Copy the source file to the /BACKUP/GroupId directory.
     */
    fileName = strrchr(stringSection, '\\');
    comma = strrchr(stringSection, ',');
    pathToken = atoi(stringSection);
    if (!fileName || !comma || pathToken > 60) {
	asm{pop ds};
	return TRUE;
    }
    strcat(dest, fileName);
    FileCopy(comma+1, dest, pathToken, 0);
    asm{pop ds};

    return FALSE; /* TRUE to stop */
}

Boolean _far _pascal BRBackupSystemConfigWithID(GroupID id)
{
    InitFileEnumStringSection("backupRestore", "configFiles",
			      /*IFRF_FIRST_ONLY*/ 0,
			      &bkupcallback,
			      (void *)&id);
    return TRUE;
}
/* 			      (Boolean (*)(const char *,word, void *))bkupcallback,
 */

Boolean _far _pascal BRBackupSystemConfig(const char *description)
{
    return TRUE;
}


Boolean _far _pascal BRRecursiveBackupDir(const char *description, 
					  word pathTokenOfTopDir, 
					  const char *relativePathOfTopDir,
					  const char *destPath,
					  void (*callback)(void))
{
    GroupID id;
    Boolean ok = FALSE;
    char *topDir;

    asm{push ds};
    GeodeLoadDGroup(GeodeGetCodeProcessHandle());
    FilePushDir();
    if (destPath) {
	strcpy(backup_dir, destPath);
	strcpy(backup_parentDir, destPath);
	topDir = strrchr(backup_parentDir, '\\');
	topDir[1] = '\0';
    }
    /*
     *  Create a backup folder in the root BACKUP directory.
     *  Modified the root BACKUP/index file.
     */
    id = BRCreateBackupGroup(description, BT_FULL_SYS);
    if (id != GROUPID_INVALID) {
	/*
	 *  Recursivly add the files under SP_DOCUMENT 
	 *  into the backup folder.
	 */
	ok = RecursiveBackupDir(id, pathTokenOfTopDir, 
				relativePathOfTopDir, callback);
    }
    /*
     *  As a safeguard, we also backup additional system configuration
     *  files, so that our technical support people can look at it.
     *  User will not see these files, nor these will be restored 
     *  back to the system.
     */
    BRBackupSystemConfigWithID(id);

    FilePopDir();
    asm{pop ds};

    return ok;
}


/***********************************************************************
 *	RecursiveBackupDir
 ***********************************************************************
 *
 * SYNOPSIS:	    Recursively copy the files into the backup directory
 *                  and update the the CONTENT file of the backup group
 *                  folder.
 * PARAMETERS:	    description - memo for the backup.
 *                  destination - the place to place the backup, either
 *                                on hard disk or on the floppy drive.
 *
 *                  If file copy operation is successful, 
 *                  return TRUE, else FALSE.
 * SIDE EFFECTS:    
 *
 * STRATEGY:        For each file in sub-directories, do
 *                  (1) add a new entry in CONTENT file of the backup 
 *                      group folder about a new file is being added
 *                  (2) do the actual file copy.
 *                  The proecess is done recursively.
 *
 * REVISION HISTORY:
 *	Name		Date		Description
 *	----		----		-----------
 *	edwin   	12/06/98   	Initial Revision
 *   jfh		01/26/00		check for AUI vs CUI
 *                            and ignore @ND... link files
 *   jfh		02/26/00		added email backup
 *
 ***********************************************************************/
Boolean RecursiveBackupDir
(GroupID id, word pathToken, const char *relativePath, void (*callback)(void))
{
FileEnumParams   *FE_params;   /* FileEnum parameters. */
MemHandle        mem, mem2, FE_buffer; /* The return block of enum results.*/
word             FE_numExtra; /* The number of files found beyond
                                   * what we asked for.               */
char             *ptr, *subdir;
Boolean          ok = FALSE;


    /*
     *  Allocate memory.
     */
    if ((mem = MemAlloc(PATH_LENGTH+1,
			HF_DYNAMIC, HAF_STANDARD_NO_ERR)) == NULL)
	return FALSE;
    if ((mem2 = MemAlloc(sizeof(FileEnumParams),
			 HF_DYNAMIC, HAF_STANDARD_NO_ERR)) == NULL) {
	MemFree(mem);
	return FALSE;
    }
    /*
	*  Set current dir.  return if error.
     */
    if (FileSetCurrentPath(pathToken, relativePath) == NULL) {
	MemFree(mem2);
	MemFree(mem);
	return FALSE;
    }
    /*
     * Enumerate all types of files in the current directory.
     */
    FE_params = MemLock(mem2);
    /* see which mode were in - jfh */
    if ((UserGetDefaultUILevel() == UIIL_INTRODUCTORY) &&
	    (pathToken == SP_DOCUMENT))
	  FE_params->FEP_searchFlags   = FILE_ENUM_ALL_FILE_TYPES;
    else /* in AUI or doing email folder */
	  FE_params->FEP_searchFlags   = FILE_ENUM_ALL_FILE_TYPES | FESF_DIRS;
    FE_params->FEP_matchAttrs    = 0;
    FE_params->FEP_returnAttrs   = (void *)FESRT_NAME_AND_ATTR;
    FE_params->FEP_returnSize    = PATH_LENGTH;
    FE_params->FEP_bufSize       = 1;
    FE_params->FEP_skipCount     = 0;   /* counter in FileEnum */
    FE_params->FEP_callback      = 0;
    FE_params->FEP_callbackAttrs = 0;
    FE_params->FEP_cbData1       = 0;
    FE_params->FEP_cbData2       = 0;
    FE_params->FEP_headerSize    = 0;
    FE_buffer                   = 0;
    FE_numExtra                 = 0;
    subdir = (char *)MemLock(mem);
    while (1) {
	if ( FileEnum( FE_params, &FE_buffer, &FE_numExtra ) ) {
	    /*
	     *  Store and print the file/directory name.
	     */
	    EC( ECCheckMemHandle( FE_buffer ); )
	    ptr = MemLock(FE_buffer);
	    /*
	     *  It's a sub directory.  Recursively search down.
	     */
	    strcpy(subdir, relativePath);
	    strcat(subdir, "\\");
	    strcat(subdir, ptr+1);

	    if (ptr[0] & FA_SUBDIR) {
		ok = RecursiveBackupDir(id, pathToken, subdir, callback);
		if (ok == FALSE) {
		    /*
		     *  Can't be copied..
		     */
		    MemLock (OptrToHandle(@CannotCopyMsg));
		    UserStandardDialog((char *)0, (char *)0, (char *)0,
				  relativePath,
				  LMemDeref(@CannotCopyMsg),
				  (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
				  (GIT_NOTIFICATION <<
				CDBF_INTERACTION_TYPE_OFFSET));
	         MemUnlock (OptrToHandle(@CannotCopyMsg));
		    ok = TRUE;
		}  /* end of can't be copied if */
		/*
		 *  Set back to the current directory.
		 */
		FileSetCurrentPath(pathToken, relativePath);
	    }  /* end of it's a subdir if */
	    else { /* it is a file */
		/*
		 *  backup the file.
		 */
		 if (LocalCmpStringsNoCase(ptr+1, "@ND Directory Information", 0)) {
		   /* don't backup the link file */

		   ok = BRBackupSingleFile(id, pathToken, subdir);
		   if (ok && callback) {
		      ProcCallFixedOrMovable_pascal(callback);
                }
		   }
	    }  /* end of it's a file else */
	    FE_params->FEP_skipCount++;
	    MemFree( FE_buffer );
	} /* end of fileenum if */
	else {
	    ok = TRUE;
	    break; /*  No more files. */
	}
    }  /* end of while */
    EC_ERROR_IF(ok == FALSE, -1);
    MemFree(mem2);
    MemFree(mem);

    return ok;
} /* End of RecursiveBackupDir */

