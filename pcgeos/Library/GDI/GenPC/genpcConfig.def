COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		genpcConfig.def

AUTHOR:		Todd Stumpf, Apr 30, 1996

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	4/30/96   	Initial revision


DESCRIPTION:
	
		
	$Id: genpcConfig.def,v 1.1 97/04/04 18:04:07 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

HAS_POINTER_HARDWARE	equ	TRUE
HAS_KEYBOARD_HARDWARE	equ	TRUE
HAS_POWER_HARDWARE	equ	TRUE



InfoResource		segment	resource
	;
	;  Pointer interface requires two tables:
	;	1) HardIconRegions
	;	2) HardIconActions
	hirTable	HardIconRegion	\
				<0,800, 0,600>,	; Digitizer tablet bounds
				<0,800, 0,600>	; LCD bounds
	hiaTable	label	byte
	HARD_ICON_REGION_COUNT	equ	2

	;
	;  Keyboard interface requires three tables:
	;	1) KeyDefs
	;	2) ExtendedKeyDefs
	;	3) AccentDefs
	;	4) ExtendedExtendedDefs (if DO_EXTENDED_CHARACTER_SET)
	;	5) Scan codes for other processing

	
if DO_EXTENDED_CHARACTER_SET
	keyTableList	KeyTableList <keyDefs        , length keyDefs, 
				      extendedKeyDefs, length \
					extendedKeyDefs,
			    	      accentDefs, length accentDefs, 
				      accentChars, 0, 0,
				      kbdExtendedExtendedTable,
				      length kbdExtendedExtendedTable,
		     		      SCANCODE_CAPS_LOCK,
				      SCANCODE_LEFT_CTRL,
				      SCANCODE_RIGHT_ALT>
	
else
	keyTableList	KeyTableList <keyDefs        , length keyDefs, 
				      extendedKeyDefs, length \
					extendedKeyDefs,
			    	      accentDefs, length accentDefs, 
				      accentChars, 0, 0,
				      0, 0,		
		     		      SCANCODE_CAPS_LOCK,
				      SCANCODE_LEFT_CTRL,
				      SCANCODE_RIGHT_ALT>
endif
	;
	;  The power driver requires nothing
InfoResource		ends


InfoResource		segment	resource

if RESP_NT_DRIVER
keyDefs		label	KeyDefs
	byte	KEY_SOLO,VC_ESCAPE,0ffh,0		; SCAN CODE   1
	byte	KD_EXTENDED or KEY_NONALPHA,'1','!',6	; SCAN CODE   2
	byte	KD_EXTENDED or KEY_NONALPHA,'2','"',7	; SCAN CODE   3
	byte	KD_EXTENDED or KEY_NONALPHA,'3',0a3h,8	; SCAN CODE   4
	byte	KD_EXTENDED or KEY_NONALPHA,'4','$',9	; SCAN CODE   5
	byte	KD_EXTENDED or KEY_NONALPHA,'5','%',10	; SCAN CODE   6
	byte	KEY_NONALPHA,'6','#',0			; SCAN CODE   7
	byte	KEY_NONALPHA,'7','&',0			; SCAN CODE   8
	byte	KD_EXTENDED or KEY_NONALPHA,'8','*',13	; SCAN CODE   9
	byte	KD_EXTENDED or KEY_NONALPHA,'9','(',14	; SCAN CODE   a
	byte	KD_EXTENDED or KEY_NONALPHA,'0',')',15	; SCAN CODE   b
	byte	KEY_NONALPHA,'-','''',0			; SCAN CODE   c
	byte	KD_EXTENDED or KEY_NONALPHA,'=','+',16	; SCAN CODE   d
	byte	KEY_SOLO,VC_BACKSPACE,0ffh,0		; SCAN CODE   e
	byte	KEY_SOLO,VC_TAB,0ffh,0			; SCAN CODE   f
	byte	KEY_ALPHA,'q','Q',0			; SCAN CODE  10
	byte	KEY_ALPHA,'w','W',0			; SCAN CODE  11
	byte	KD_ACCENTABLE or KEY_ALPHA,'e','E',0	; SCAN CODE  12
	byte	KEY_ALPHA,'r','R',0			; SCAN CODE  13
	byte	KEY_ALPHA,'t','T',0			; SCAN CODE  14
	byte	KD_ACCENTABLE or KEY_ALPHA,'y','Y',0	; SCAN CODE  15
	byte	KD_ACCENTABLE or KEY_ALPHA,'u','U',0	; SCAN CODE  16
	byte	KD_ACCENTABLE or KEY_ALPHA,'i','I',0	; SCAN CODE  17
	byte	KD_ACCENTABLE or KEY_ALPHA,'o','O',0	; SCAN CODE  18
	byte	KEY_ALPHA,'p','P',0			; SCAN CODE  19
	byte	0,0,0,0					; SCAN CODE  1a
	byte	0,0,0,0					; SCAN CODE  1b
	byte	KEY_SOLO,VC_ENTER,0ffh,0		; SCAN CODE  1c
	byte	KD_STATE_KEY or KEY_SHIFT,VC_LCTRL
	byte		LCTRL,0				; SCAN CODE  1d
	byte	KD_ACCENTABLE or KEY_ALPHA,'a','A',0	; SCAN CODE  1e
	byte	KEY_ALPHA,'s','S',0			; SCAN CODE  1f
	byte	KEY_ALPHA,'d','D',0			; SCAN CODE  20
	byte	KEY_ALPHA,'f','F',0			; SCAN CODE  21
	byte	KEY_ALPHA,'g','G',0			; SCAN CODE  22
	byte	KEY_ALPHA,'h','H',0			; SCAN CODE  23
	byte	KEY_ALPHA,'j','J',0			; SCAN CODE  24
	byte	KEY_ALPHA,'k','K',0			; SCAN CODE  25
	byte	KEY_ALPHA,'l','L',0			; SCAN CODE  26
	byte	KEY_NONALPHA,';',':',0			; SCAN CODE  27
	byte	0,0,0,0					; SCAN CODE  28
	byte	0,0,0,0					; SCAN CODE  29
	byte	KD_STATE_KEY or KEY_SHIFT,VC_LSHIFT
	byte		LSHIFT,0			; SCAN CODE  2a
	byte	0,0,0,0					; SCAN CODE  2b
	byte	KEY_ALPHA,'z','Z',0			; SCAN CODE  2c
	byte	KEY_ALPHA,'x','X',0			; SCAN CODE  2d
	byte	KEY_ALPHA,'c','C',0			; SCAN CODE  2e
	byte	KEY_ALPHA,'v','V',0			; SCAN CODE  2f
	byte	KEY_ALPHA,'b','B',0			; SCAN CODE  30
	byte	KD_ACCENTABLE or KEY_ALPHA,'n','N',0	; SCAN CODE  31
	byte	KD_EXTENDED or KEY_ALPHA,'m','M',57	; SCAN CODE  32
	byte	KEY_NONALPHA,',','<',0			; SCAN CODE  33
	byte	KEY_NONALPHA,'.','>',0			; SCAN CODE  34
	byte	KEY_NONALPHA,'/','?',0			; SCAN CODE  35
	byte	0,0,0,0					; SCAN CODE  36
	byte	0,0,0,0					; SCAN CODE  37
	byte	KD_STATE_KEY or KEY_SHIFT,VC_ALT_GR
	byte		LALT or RCTRL,0			; SCAN CODE  38
	;
	; NOTE: the below turns out to be a bad idea for several
	; reasons, such as shortcuts with the spacebar not working
	; and the spacebar appearing to be a virtual key.
	; So I've changed this back to KEY_NONALPHA and I'll find
	; a different approach to allow the list object to get
	; the behavior from <Shift>+space that it needs.
	; 
	; >NOTE: the spacebar is a special case -- it is marked as
	; >KEY_SOLO so that the <Shift> modifer comes through.
	; >The high byte is then the character set.
	;
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_NONALPHA,' '
	byte		' ',5				; SCAN CODE  39

	byte	KD_STATE_KEY or KD_SET_LED or KEY_TOGGLE,VC_CAPSLOCK
	byte		TOGGLE_CAPSLOCK,0		; SCAN CODE  3a
	byte	KEY_SOLO,VC_F1,0ffh,0			; SCAN CODE  3b
	byte	KEY_SOLO,VC_F2,0ffh,0			; SCAN CODE  3c
	byte	KEY_SOLO,VC_F3,0ffh,0			; SCAN CODE  3d
	byte	KEY_SOLO,VC_F4,0ffh,0			; SCAN CODE  3e
	byte	KEY_SOLO,VC_F5,0ffh,0			; SCAN CODE  3f
	byte	KEY_SOLO,VC_F6,0ffh,0			; SCAN CODE  40
	byte	KEY_SOLO,VC_F7,0ffh,0			; SCAN CODE  41
	byte	KEY_SOLO,VC_F8,0ffh,0			; SCAN CODE  42
	byte	KEY_SOLO,VC_F9,0ffh,0			; SCAN CODE  43
	byte	KEY_SOLO,VC_F10,0ffh,0			; SCAN CODE  44
	byte	KEY_SOLO,VC_SYSTEMRESET,0ffh,0		; SCAN CODE  45
	byte	0,0,0,0					; SCAN CODE  46
	byte	0,0,0,0					; SCAN CODE  47
	byte	KEY_SOLO,VC_UP,0ffh,0			; SCAN CODE  48
	byte	KEY_SOLO,VC_PREVIOUS,0ffh,0		; SCAN CODE  49
	byte	0,0,0,0					; SCAN CODE  4a
	byte	KD_EXTENDED or KEY_SOLO,VC_LEFT,0ffh,55	; SCAN CODE  4b
	byte	0,0,0,0					; SCAN CODE  4c
	byte	KD_EXTENDED or KEY_SOLO,VC_RIGHT,0ffh,56; SCAN CODE  4d
	byte	0,0,0,0					; SCAN CODE  4e
	byte	0,0,0,0					; SCAN CODE  4f
	byte	KEY_SOLO,VC_DOWN,0ffh,0			; SCAN CODE  50
	byte	KEY_SOLO,VC_NEXT,0ffh,0			; SCAN CODE  51
	byte	KEY_SOLO,VC_INS,0ffh,0			; SCAN CODE  52
	byte	KD_EXTENDED or KEY_PAD, VC_DEL
	byte		VC_NUMPAD_PERIOD, 2		; SCAN CODE  53
	byte	KD_STATE_KEY or KEY_SHIFT
	byte		VC_SYSREQ,0,0			; SCAN CODE  54
	byte	0,0,0,0					; SCAN CODE  55
	byte	KD_EXTENDED,0,0,54			; SCAN CODE  56
	byte	KEY_SOLO,VC_F11,0ffh,0			; SCAN CODE  57
	byte	KEY_SOLO,VC_F12,0ffh,0			; SCAN CODE  58
	byte	0,0,0,0					; SCAN CODE  59
	byte	0,0,0,0					; SCAN CODE  5a
	byte	0,0,0,0					; SCAN CODE  5b
	byte	0,0,0,0					; SCAN CODE  5c
	byte	0,0,0,0					; SCAN CODE  5d
	byte	0,0,0,0					; SCAN CODE  5e
	byte	0,0,0,0					; SCAN CODE  5f
; NEVER USED (conflicts w/PS/2 E0 codes)
	byte	0,0,0,0					; SCAN CODE  60
; NEVER USED (conflicts w/PS/2 E1 codes)
	byte	0,0,0,0					; SCAN CODE  61
	byte	KEY_SOLO,VC_JOYSTICK_0,  0ffh,0		; SCAN CODE  62
	byte	KEY_SOLO,VC_JOYSTICK_45, 0ffh,0		; SCAN CODE  63
	byte	KEY_SOLO,VC_JOYSTICK_90, 0ffh,0		; SCAN CODE  64
	byte	KEY_SOLO,VC_JOYSTICK_135,0ffh,0		; SCAN CODE  65
	byte	KEY_SOLO,VC_JOYSTICK_180,0ffh,0		; SCAN CODE  66
	byte	KEY_SOLO,VC_JOYSTICK_225,0ffh,0		; SCAN CODE  67
	byte	KEY_SOLO,VC_JOYSTICK_270,0ffh,0		; SCAN CODE  68
	byte	KEY_SOLO,VC_JOYSTICK_315,0ffh,0		; SCAN CODE  69
	byte	KD_STATE_KEY or KEY_SHIFT, VC_FIRE_BUTTON_1
	byte		FIREBUTTON1, 0			; SCAN CODE  6a
	byte	KD_STATE_KEY or KEY_SHIFT, VC_FIRE_BUTTON_2
	byte		FIREBUTTON2, 0			; SCAN CODE  6b
	byte	0,0,0,0					; SCAN CODE  6c
	byte	0,0,0,0					; SCAN CODE  6d
; DON'T USE (conflict with controller response)
	byte	0,0,0,0					; SCAN CODE  6e
	byte	0,0,0,0					; SCAN CODE  6f
	byte	0,0,0,0					; SCAN CODE  70
	byte	0,0,0,0					; SCAN CODE  71
	byte	0,0,0,0					; SCAN CODE  72
	byte	0,0,0,0					; SCAN CODE  73
	byte	0,0,0,0					; SCAN CODE  74
	byte	0,0,0,0					; SCAN CODE  75
	byte	KD_STATE_KEY or KEY_SHIFT,VC_RALT
	byte		RALT,0				; SCAN CODE  76
	byte	KD_STATE_KEY or KEY_SHIFT,VC_RCTRL
	byte		RCTRL,0				; SCAN CODE  77
	byte	KEY_SOLO,VC_NUMPAD_DIV,0ffh,0		; SCAN CODE  78
	byte	KEY_SOLO,VC_NUMPAD_ENTER,0ffh,0		; SCAN CODE
							; 79
; Below are extended scan code!
	byte	KEY_PAD, VC_HOME, VC_HOME,0			; 7a
	byte	KEY_PAD, VC_UP, VC_UP, 0			; 7b
	byte	KEY_PAD, VC_PREVIOUS, VC_PREVIOUS, 0		; 7c
	byte	0,0,0,0						; 7d
	byte	KEY_PAD, VC_LEFT, VC_LEFT, 0			; 7e
	byte	0,0, 0,0					; 7f
	byte	KEY_PAD,  VC_RIGHT, VC_RIGHT,0			; 80
	byte	0,0,0,0						; 81
	byte	KEY_PAD, VC_END, VC_END, 0			; 82
	byte	KEY_PAD, VC_DOWN, VC_DOWN, 0			; 83
	byte	KEY_PAD, VC_NEXT, VC_NEXT, 0			; 84
	byte	KEY_PAD, VC_INS, VC_INS, 0			; 85
	byte	KD_EXTENDED or \
			KEY_PAD, VC_DEL, VC_DEL, 2		; 86
else	; RESP_NT_DRIVER
keyDefs		label	KeyDefs 
	byte	KEY_SOLO,VC_ESCAPE,0ffh,0		; SCAN CODE   1
	byte	KD_EXTENDED or KEY_NONALPHA,'1','!',6	; SCAN CODE   2
	byte	KD_EXTENDED or KEY_NONALPHA,'2','@',7	; SCAN CODE   3
	byte	KD_EXTENDED or KEY_NONALPHA,'3','#',8	; SCAN CODE   4
	byte	KD_EXTENDED or KEY_NONALPHA,'4','$',9	; SCAN CODE   5
	byte	KD_EXTENDED or KEY_NONALPHA,'5','%',10	; SCAN CODE   6
	byte	KD_EXTENDED or KEY_NONALPHA,'6','^',11	; SCAN CODE   7
	byte	KD_EXTENDED or KEY_NONALPHA,'7','&',12	; SCAN CODE   8
	byte	KD_EXTENDED or KEY_NONALPHA,'8','*',13	; SCAN CODE   9
	byte	KD_EXTENDED or KEY_NONALPHA,'9','(',14	; SCAN CODE   a
	byte	KD_EXTENDED or KEY_NONALPHA,'0',')',15	; SCAN CODE   b
	byte	KD_EXTENDED or KEY_NONALPHA,'-','_',4	; SCAN CODE   c
	byte	KD_EXTENDED or KEY_NONALPHA,'=','+',16	; SCAN CODE   d
	byte	KEY_SOLO,VC_BACKSPACE,0ffh,0		; SCAN CODE   e
	byte	KEY_SOLO,VC_TAB,0ffh,0			; SCAN CODE   f
	byte	KD_EXTENDED or KEY_ALPHA,'q','Q',17	; SCAN CODE  10
	byte	KD_EXTENDED or KEY_ALPHA,'w','W',18	; SCAN CODE  11
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'e','E',19
							; SCAN CODE  12
	byte	KD_EXTENDED or KEY_ALPHA,'r','R',20	; SCAN CODE  13
	byte	KD_EXTENDED or KEY_ALPHA,'t','T',21	; SCAN CODE  14
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'y','Y',22
							; SCAN CODE  15
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'u','U',23
							; SCAN CODE  16
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'i','I',24
							; SCAN CODE  17
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'o','O',25
							; SCAN CODE  18
	byte	KD_EXTENDED or KEY_ALPHA,'p','P',26	; SCAN CODE  19
	byte	KD_EXTENDED or KEY_NONALPHA,'[','{',27	; SCAN CODE  1a
	byte	KD_EXTENDED or KEY_NONALPHA,']','}',28	; SCAN CODE  1b
	byte	KEY_SOLO,VC_ENTER,0ffh,0		; SCAN CODE  1c
	byte	KD_STATE_KEY or KEY_SHIFT,VC_LCTRL
	byte		LCTRL,0				; SCAN CODE  1d
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'a','A',29
	byte	KD_EXTENDED or KEY_ALPHA,'s','S',30	; SCAN CODE  1f
	byte	KD_EXTENDED or KEY_ALPHA,'d','D',31	; SCAN CODE  20
	byte	KD_EXTENDED or KEY_ALPHA,'f','F',32	; SCAN CODE  21
	byte	KD_EXTENDED or KEY_ALPHA,'g','G',33	; SCAN CODE  22
	byte	KD_EXTENDED or KEY_ALPHA,'h','H',52	; SCAN CODE  23
	byte	KD_EXTENDED or KEY_ALPHA,'j','J',35	; SCAN CODE  24
	byte	KD_EXTENDED or KEY_ALPHA,'k','K',53	; SCAN CODE  25
	byte	KD_EXTENDED or KEY_ALPHA,'l','L',37	; SCAN CODE  26
	byte	KD_EXTENDED or KEY_NONALPHA,';',':',38	; SCAN CODE  27
	byte	KD_EXTENDED or KEY_NONALPHA,'''','"',39	; SCAN CODE  28
	byte	KD_EXTENDED or KEY_NONALPHA,'`','~',40	; SCAN CODE  29
	byte	KD_STATE_KEY or KEY_SHIFT,VC_LSHIFT
	byte		LSHIFT,0			; SCAN CODE  2a
	byte	KD_EXTENDED or KEY_NONALPHA,'\\','|',41	; SCAN CODE  2b
	byte	KD_EXTENDED or KEY_ALPHA,'z','Z',42	; SCAN CODE  2c
	byte	KD_EXTENDED or KEY_ALPHA,'x','X',43	; SCAN CODE  2d
	byte	KD_EXTENDED or KEY_ALPHA,'c','C',44	; SCAN CODE  2e
	byte	KD_EXTENDED or KEY_ALPHA,'v','V',45	; SCAN CODE  2f
	byte	KD_EXTENDED or KEY_ALPHA,'b','B',46	; SCAN CODE  30
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_ALPHA,'n','N',47
							; SCAN CODE  31
	byte	KD_EXTENDED or KEY_ALPHA,'m','M',48	; SCAN CODE  32
	byte	KD_EXTENDED or KEY_NONALPHA,',','<',49	; SCAN CODE  33
	byte	KD_EXTENDED or KEY_NONALPHA,'.','>',50	; SCAN CODE  34
	byte	KD_EXTENDED or KEY_NONALPHA,'/','?',51	; SCAN CODE  35
	byte	KD_STATE_KEY or KEY_SHIFT,VC_RSHIFT
	byte		RSHIFT,0			; SCAN CODE  36
	byte	KD_EXTENDED or KEY_MISC,VC_NUMPAD_MULT
	byte		VC_PRINTSCREEN,3		; SCAN CODE  37
	byte	KD_STATE_KEY or KEY_SHIFT,VC_LALT
	byte		LALT,0				; SCAN CODE  38
	;
	; NOTE: the below turns out to be a bad idea for several
	; reasons, such as shortcuts with the spacebar not working
	; and the spacebar appearing to be a virtual key.
	; So I've changed this back to KEY_NONALPHA and I'll find
	; a different approach to allow the list object to get
	; the behavior from <Shift>+space that it needs.
	; 
	; >NOTE: the spacebar is a special case -- it is marked as
	; >KEY_SOLO so that the <Shift> modifer comes through.
	; >The high byte is then the character set.
	;
	byte	KD_EXTENDED or KD_ACCENTABLE or KEY_NONALPHA,' '
	byte		' ',5				; SCAN CODE  39

	byte	KD_STATE_KEY or KD_SET_LED or KEY_TOGGLE,VC_CAPSLOCK
	byte		TOGGLE_CAPSLOCK,0		; SCAN CODE  3a
	byte	KEY_SOLO,VC_F1,0ffh,0			; SCAN CODE  3b
	byte	KEY_SOLO,VC_F2,0ffh,0			; SCAN CODE  3c
	byte	KEY_SOLO,VC_F3,0ffh,0			; SCAN CODE  3d
	byte	KEY_SOLO,VC_F4,0ffh,0			; SCAN CODE  3e
	byte	KEY_SOLO,VC_F5,0ffh,0			; SCAN CODE  3f
	byte	KEY_SOLO,VC_F6,0ffh,0			; SCAN CODE  40
	byte	KEY_SOLO,VC_F7,0ffh,0			; SCAN CODE  41
	byte	KEY_SOLO,VC_F8,0ffh,0			; SCAN CODE  42
	byte	KEY_SOLO,VC_F9,0ffh,0			; SCAN CODE  43
	byte	KEY_SOLO,VC_F10,0ffh,0			; SCAN CODE  44
	byte	KD_STATE_KEY or KD_EXTENDED or KD_SET_LED or KEY_TOGGLE
	byte		VC_NUMLOCK, TOGGLE_NUMLOCK,0	; SCAN CODE  45
	byte	KD_STATE_KEY or KD_EXTENDED or KD_SET_LED or KEY_TOGGLE
	byte		VC_SCROLLLOCK, TOGGLE_SCROLLLOCK,1 ; SCAN CODE  46
	byte	KEY_PAD,VC_HOME,VC_NUMPAD_7,0		; SCAN CODE  47
	byte	KEY_PAD,VC_UP,VC_NUMPAD_8,0		; SCAN CODE  48
	byte	KEY_PAD,VC_PREVIOUS,VC_NUMPAD_9,0	; SCAN CODE  49
	byte	KEY_SOLO,VC_NUMPAD_MINUS,0ffh,0		; SCAN CODE  4a
	byte	KEY_PAD,VC_LEFT,VC_NUMPAD_4,0		; SCAN CODE  4b
	byte	KEY_PAD,VC_INVALID_KEY,VC_NUMPAD_5,0	; SCAN CODE  4c
	byte	KEY_PAD,VC_RIGHT,VC_NUMPAD_6,0		; SCAN CODE  4d
	byte	KEY_SOLO,VC_NUMPAD_PLUS,0ffh,0		; SCAN CODE  4e
	byte	KEY_PAD,VC_END,VC_NUMPAD_1,0		; SCAN CODE  4f
	byte	KEY_PAD,VC_DOWN,VC_NUMPAD_2,0		; SCAN CODE  50
	byte	KEY_PAD,VC_NEXT,VC_NUMPAD_3,0		; SCAN CODE  51
	byte	KEY_PAD,VC_INS,VC_NUMPAD_0,0		; SCAN CODE  52
	byte	KD_EXTENDED or KEY_PAD, VC_DEL
	byte		VC_NUMPAD_PERIOD, 2		; SCAN CODE  53
	byte	KD_STATE_KEY or KEY_SHIFT
	byte		VC_SYSREQ,0,0			; SCAN CODE  54
	byte	0,0,0,0					; SCAN CODE  55
	byte	KD_EXTENDED,0,0,54			; SCAN CODE  56
	byte	KEY_SOLO,VC_F11,0ffh,0			; SCAN CODE  57
	byte	KEY_SOLO,VC_F12,0ffh,0			; SCAN CODE  58
	byte	0,0,0,0					; SCAN CODE  59
	byte	0,0,0,0					; SCAN CODE  5a
	byte	0,0,0,0					; SCAN CODE  5b
	byte	0,0,0,0					; SCAN CODE  5c
	byte	0,0,0,0					; SCAN CODE  5d
	byte	0,0,0,0					; SCAN CODE  5e
	byte	0,0,0,0					; SCAN CODE  5f
; NEVER USED (conflicts w/PS/2 E0 codes)
	byte	0,0,0,0					; SCAN CODE  60
; NEVER USED (conflicts w/PS/2 E1 codes)
	byte	0,0,0,0					; SCAN CODE  61
	byte	KEY_SOLO,VC_JOYSTICK_0,  0ffh,0		; SCAN CODE  62
	byte	KEY_SOLO,VC_JOYSTICK_45, 0ffh,0		; SCAN CODE  63
	byte	KEY_SOLO,VC_JOYSTICK_90, 0ffh,0		; SCAN CODE  64
	byte	KEY_SOLO,VC_JOYSTICK_135,0ffh,0		; SCAN CODE  65
	byte	KEY_SOLO,VC_JOYSTICK_180,0ffh,0		; SCAN CODE  66
	byte	KEY_SOLO,VC_JOYSTICK_225,0ffh,0		; SCAN CODE  67
	byte	KEY_SOLO,VC_JOYSTICK_270,0ffh,0		; SCAN CODE  68
	byte	KEY_SOLO,VC_JOYSTICK_315,0ffh,0		; SCAN CODE  69
	byte	KD_STATE_KEY or KEY_SHIFT, VC_FIRE_BUTTON_1
	byte		FIREBUTTON1, 0			; SCAN CODE  6a
	byte	KD_STATE_KEY or KEY_SHIFT, VC_FIRE_BUTTON_2
	byte		FIREBUTTON2, 0			; SCAN CODE  6b
	byte	0,0,0,0					; SCAN CODE  6c
	byte	0,0,0,0					; SCAN CODE  6d
; DON'T USE (conflict with controller response)
	byte	0,0,0,0					; SCAN CODE  6e
	byte	0,0,0,0					; SCAN CODE  6f
	byte	0,0,0,0					; SCAN CODE  70
	byte	0,0,0,0					; SCAN CODE  71
	byte	0,0,0,0					; SCAN CODE  72
	byte	0,0,0,0					; SCAN CODE  73
	byte	0,0,0,0					; SCAN CODE  74
	byte	0,0,0,0					; SCAN CODE  75
	byte	KD_STATE_KEY or KEY_SHIFT,VC_RALT
	byte		RALT,0				; SCAN CODE  76
	byte	KD_STATE_KEY or KEY_SHIFT,VC_RCTRL
	byte		RCTRL,0				; SCAN CODE  77
	byte	KEY_SOLO,VC_NUMPAD_DIV,0ffh,0		; SCAN CODE  78
	byte	KEY_SOLO,VC_NUMPAD_ENTER,0ffh,0		; SCAN CODE
							; 79
; Below are extended scan code!
	byte	KEY_PAD, VC_HOME, VC_HOME,0			; 7a
	byte	KEY_PAD, VC_UP, VC_UP, 0			; 7b
	byte	KEY_PAD, VC_PREVIOUS, VC_PREVIOUS, 0		; 7c
	byte	0,0,0,0						; 7d
	byte	KEY_PAD, VC_LEFT, VC_LEFT, 0			; 7e
	byte	0,0, 0,0					; 7f
	byte	KEY_PAD,  VC_RIGHT, VC_RIGHT,0			; 80
	byte	0,0,0,0						; 81
	byte	KEY_PAD, VC_END, VC_END, 0			; 82
	byte	KEY_PAD, VC_DOWN, VC_DOWN, 0			; 83
	byte	KEY_PAD, VC_NEXT, VC_NEXT, 0			; 84
	byte	KEY_PAD, VC_INS, VC_INS, 0			; 85
	byte	KD_EXTENDED or \
			KEY_PAD, VC_DEL, VC_DEL, 2		; 86
endif	; else NT_RESP_DRIVER

EXT_CODE_OFFSET		equ	33h

extendedKeyDefs \
	ExtendedDef <					; EXT 0: NUM LOCK
	EV_KEY or EV_SHIFT or EV_CTRL or EV_SHIFT_CTRL,
	0,
	<C_CTRL VC_BREAK>, <C_CTRL VC_BREAK>,
	<>, <>,
	<>, <>
>,<							; EXT 1: SCROLL LOCK
	EV_KEY or EV_SHIFT or EV_CTRL or EV_SHIFT_CTRL,
	0,
	<C_CTRL VC_BREAK>, <C_CTRL VC_BREAK>,
	<>, <>,
	<>, <>
>,<							; EXT 2: DEL / .
	EV_KEY or EV_SHIFT or EV_CTRL_ALT or EV_SHIFT_CTRL_ALT,
	0,
	<>, <>,
	<>, <>,
	<C_CTRL VC_SYSTEMRESET>, <C_CTRL VC_SYSTEMRESET>
>,<							; EXT 3: PrtSc / *
	EV_KEY or EV_SHIFT,
	0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 4: -_
	0,0,
	<C_BSW C_OPTHYPHEN>, <>,
	<>, <>,
	<C_BSW C_ENDASH>, <C_BSW C_EMDASH>
>,<							; EXT 5: space
	0,0,
	<>, <>,
	<C_BSW C_NONBRKSPACE>, <C_BSW C_EMSPACE>,
	<C_BSW C_ENSPACE>, <C_BSW C_THINSPACE>
>,
if not RESP_NT_DRIVER
<							; EXT 6: 1!
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_EXCLAMDOWN>, <>
>,<							; EXT 7: 2@
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_TRADEMARK>, <>
>,<							; EXT 8: 3#
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_STERLING>, <C_BSW C_FRACTION>
>,<							; EXT 9: 4$
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_CENT>, <C_BSW C_CURRENCY>
>,<							; EXT 10: 5%
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_INFINITY>, <C_BSW C_PERTHOUSAND>
>,<							; EXT 11: 6^
	0,
	EV_SHIFT_CTRL_ALT,				;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_SECTION>, <C_BSW C_CIRCUMFLEX>
>,<							; EXT 12: 7&
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_PARAGRAPH>, <>
>,<							; EXT 13: 8*
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_BULLET>, <C_BSW C_DEGREE>
>,<							; EXT 14: 9(
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_ORDFEMININE>, <>
>,<							; EXT 15: 0)
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_ORDMASCULINE>, <C_BSW C_CNTR_DOT>
>,<							; EXT 16: =+
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_NOTEQUAL>, <C_BSW C_PLUSMINUS>
>,
else	; not RESP_NT_DRIVER
	; RESP_NT_DRIVER below
<							; EXT 6: 1_
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_UNDERSCORE>, <>
>,<							; EXT 7: 2@
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_AT_SIGN>, <>
>,<							; EXT 8: 3|
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_VERTICAL_BAR>, <>
>,<							; EXT 9: 4\
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_BACKSLASH>, <>
>,<							; EXT 10: 5^
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_ASCII_CIRCUMFLEX>, <>
>,<							; EXT 11: FREE
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 12: FREE
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 13: 8[
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LEFT_BRACKET>, <>
>,<							; EXT 14: 9]
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_RIGHT_BRACKET>, <>
>,<							; EXT 15: 0{
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LEFT_BRACE>, <>
>,<							; EXT 16: =}
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_RIGHT_BRACE>, <>
>,
endif
<							; EXT 17: qQ
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_L_OE>, <C_BSW C_U_OE>
>,<							; EXT 18: wW
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_U_SIGMA>, <C_BSW C_MACRON>
>,<							; EXT 19: eE
	0,
	EV_CTRL_ALT,					;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_ACUTE>, <C_BSW C_CEDILLA>
>,<							; EXT 20: rR
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_REGISTERED>, <C_BSW C_RING>
>,<							; EXT 21: tT
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_DAGGER>, <C_BSW C_DBLDAGGER>
>,<							; EXT 22: yY
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_YEN>, <C_BSW C_OGONEK>
>,<							; EXT 23: uU
	0,
	EV_CTRL_ALT,					;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_DIERESIS>, <C_BSW C_HUNGARUMLAT>
>,<							; EXT 24: iI
	0,
	EV_CTRL_ALT,					;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_CIRCUMFLEX>, <C_BSW C_LI_DOTLESS>
>,<							; EXT 25: oO
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LO_SLASH>, <C_BSW C_UO_SLASH>
>,<							; EXT 26: pP
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_L_PI>, <C_BSW C_U_PI>
>,<							; EXT 27: [{
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_QUOTEDBLLEFT>, <C_BSW C_QUOTEDBLRIGHT>
>,<							; EXT 28: }]
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_QUOTESNGLEFT>, <C_BSW C_QUOTESNGRIGHT>
>,<							; EXT 29: aA
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LA_RING>, <C_BSW C_UA_RING>
>,<							; EXT 30: sS
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_GERMANDBLS>, <C_BSW C_CARON>
>,<							; EXT 31: dD
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_PARTIAL_DIFF>, <C_BSW C_DOTACCENT>
>,<							; EXT 32: fF
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_FLORIN>, <>
>,<							; EXT 33: gG
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_COPYRIGHT>, <>
>,<							; EXT 34: FREE
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 35: jJ
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_U_DELTA>, <>
>,<							; EXT 36:FREE
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 37: lL
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LOGICAL_NOT>, <C_BSW C_SNGQUOTELOW>
>,<							; EXT 38: ;:
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_ELLIPSIS>, <C_BSW C_DBLQUOTELOW>
>,<							; EXT 39: 
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_L_AE>, <C_BSW C_U_AE>
>,<							; EXT 40: `~
	0,
	EV_CTRL_ALT or EV_SHIFT_CTRL_ALT,		;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_GRAVE>, <C_BSW C_TILDE>
>,<							; EXT 41: \|
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_GUILLEDBLLEFT>, <C_BSW C_GUILLEDBLRIGHT>
>,<							; EXT 42: zZ
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_U_OMEGA>, <C_BSW C_BREVE>
>,<							; EXT 43: xX
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_APPROX_EQUAL>, <>
>,<							; EXT 44: cC
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LC_CEDILLA>, <C_BSW C_UC_CEDILLA>
>,<							; EXT 45: vV
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_RADICAL>, <C_BSW C_LOZENGE>
>,<							; EXT 46: bB
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_INTEGRAL>, <>
>,<							; EXT 47: nN
	0,EV_CTRL_ALT or EV_SHIFT_CTRL_ALT,		;accent?
	<>, <>,
	<>, <>,
	<C_BSW C_TILDE>, <C_BSW C_TILDE>
>,<							; EXT 48: mM
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_L_MU>, <>
>,<							; EXT 49:
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_LESSEQUAL>, <C_BSW C_GUILSNGLEFT>
>,<							; EXT 50:
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_GREATEREQUAL>, <C_BSW C_GUILSNGRIGHT>
>,<							; EXT 51: /?
	0,0,
	<>, <>,
	<>, <>,
	<C_BSW C_DIVISION>, <C_BSW C_QUESTIONDOWN>
>,<							; EXT 52: Hh
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 53: Kk
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,<							; EXT 54: <>/ (scan 56h)
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>,
if not RESP_NT_DRIVER
<							; EXT 55: **UNUSED**
	0,0,
	<>, <>,
	<>, <>,
	<>, <>
>
else
<							; EXT 55: HOME
	EV_CTRL_ALT, 0,
	<>, <>,
	<>, <>,
	<C_CTRL VC_HOME>, <>
>,<							; EXT 56: END
	EV_CTRL_ALT, 0,
	<>, <>,
	<>, <>,
	<C_CTRL VC_END>, <>
>,<							; EXT 57: MENU
	EV_SHIFT_CTRL, 0,
	<>, <C_UI UC_MENU>,
	<>, <>,
	<>, <>	
>
endif

if RESP_NT_DRIVER
;
; Used for ExtendedExtended table.
;
MENU_OFFSET	equ	57 * size ExtendedDef
MENU_INDEX	equ	(EXT_CTRL_MASK or EXT_SHIFT_MASK)


kbdExtendedExtendedTable  ExtendedExtendedDef \
	< MENU_OFFSET, MENU_INDEX, VC_ISUI>

endif


if DBCS_PCGEOS

accentChars	label	Chars
	word	' ','a','A','e','E','i','I','o','O','u','U','n','N','y','Y',0

else
accentChars	label	Chars
	byte	' ','a','A','e','E','i','I','o','O','u','U','n','N','y','Y',0
endif

accentDefs	\
AccentDef <<
	C_DIERESIS,
	C_ACUTE,
	C_TILDE,
	C_GRAVE,
	C_CIRCUMFLEX
>>,<<						;accents for 'a'
	C_LA_DIERESIS,
	C_LA_ACUTE,
	C_LA_TILDE,
	C_LA_GRAVE,
	C_LA_CIRCUMFLEX
>>,<<						;accents for 'A'
	C_UA_DIERESIS,
	C_UA_ACUTE,
	C_UA_TILDE,
	C_UA_GRAVE,
	C_UA_CIRCUMFLEX
>>,<<						; accents for 'e'
	C_LE_DIERESIS,
	C_LE_ACUTE,
	0,
	C_LE_GRAVE,
	C_LE_CIRCUMFLEX
>>,<<						; accents for 'E'
	C_UE_DIERESIS,
	C_UE_ACUTE,
	0,
	C_UE_GRAVE,
	C_UE_CIRCUMFLEX
>>,<<						; accents for 'i'
	C_LI_DIERESIS,
	C_LI_ACUTE,
	0,
	C_LI_GRAVE,
	C_LI_CIRCUMFLEX
>>,<<						; accents for 'I'
	C_UI_DIERESIS,
	C_UI_ACUTE,
	0,
	C_UI_GRAVE,
	C_UI_CIRCUMFLEX
>>,<<						; accents for 'o'
	C_LO_DIERESIS,
	C_LO_ACUTE,
	C_LO_TILDE,
	C_LO_GRAVE,
	C_LO_CIRCUMFLEX
>>,<<						; accents for 'O'
	C_UO_DIERESIS,
	C_UO_ACUTE,
	C_UO_TILDE,
	C_UO_GRAVE,
	C_UO_CIRCUMFLEX
>>,<<						; accents for 'u'
	C_LU_DIERESIS,
	C_LU_ACUTE,
	0,
	C_LU_GRAVE,
	C_LU_CIRCUMFLEX
>>,<<						; accents for 'U'
	C_UU_DIERESIS,
	C_UU_ACUTE,
	0,
	C_UU_GRAVE,
	C_UU_CIRCUMFLEX
>>,<<						; accents for 'n'
	0,0,
	C_LN_TILDE
>>,<<						; accents for 'N'
	0,0,
	C_UN_TILDE
>>,<<						; accents for 'y'
	C_LY_DIERESIS,
	C_LY_ACUTE
>>,<<						; accents for 'Y'
	C_UY_DIERESIS,
	C_UY_ACUTE
>>,<<						; unused
>>


InfoResource		ends






























