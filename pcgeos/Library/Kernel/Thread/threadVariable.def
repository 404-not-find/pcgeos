COMMENT }-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Thread
FILE:		threadVariable.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains the variables for the Thread module.

	$Id: threadVariable.def,v 1.1 97/04/05 01:15:18 newdeal Exp $

-------------------------------------------------------------------------------}

idata	segment
threadSem	Semaphore		; Semaphore governing access to
threadTimer	byte	-1		;time slice counter
					;  the thread list.
initFlag	byte	-1		;non-zero if never been to Dispatch,
					; i.e. system still initializing

idata	ends

udata	segment

currentThread	hptr	0		;stack segment of current thread
					; Whenever you stop the PC, no thread
					; is running, so this variable will
					; be null. To look at the real value,
					; print "@curThread"
threadListPtr	hptr	0		;first thread on chain
threadStackPtr	hptr	0		;first block that is a thread stack
runQueue	hptr	0		;queue of runnable threads

initWaitFlag	byte
initStack	fptr	0		;SS:SP saved during block in init code

interruptCount	byte	0		;Number of nested interrupts

intWakeUpAborted byte	0		;Flag for wakeup aborted during
					;interrupt code

idleCalled	byte	0		;Flag for power management
powerStrategy	fptr.far	0	;Power management strategy

idleRoutineTable	fptr.far	MAX_IDLE_ROUTINES dup (0)

EC <stackBorrowCount	word	0					>


if	SINGLE_STEP_PROFILING
;-----------------------------------------------------------------------------
startOfAccountInfo	equ	pageStart
;-----------------------------------------------------------------------------
	;
	;  A table of page #'s to page ptrs
	pageStart	word	CACHE_SIZE_PAGES		dup (0)

	;
	;  The page cache - a buffer of counter values that
	;  are used to accumulate instruction counts to reduce
	;  the # of times we must use EMS mapping.
	cachePage	CachePage	CACHE_SIZE_PAGES	dup (<>)
	oldestCachePage	nptr	0

	;
	;  The "page table" - three arrays of values that map
	;  each page to an EMS block, and offset within that block
	pageBlock	word	CACHE_SIZE_PAGES		dup (0)
	pageOffset	word	CACHE_SIZE_PAGES		dup (0)

	;
	;  Handle to EMM blob
	blobHandle	word	0

;-----------------------------------------------------------------------------
endOfAccountInfo	equ	oldSingleStepVector
;-----------------------------------------------------------------------------

oldSingleStepVector		fptr.far	0
oldVideoBiosHandler		fptr.far	0
instructionCount		sdword		0
instructionCountHigh		sdword		0

; If "singleStepping" is non-zero, then we are single-stepping
singleStepping			byte		0

; Where we preserve the single stepping flag when calling into swat
savedSingleStepping		byte		0

; If "inSingleStep", we are single stepping, so die if we have an interrupt
inSingleStep			byte		0

; If "singleStepHooked" is non-zero, then we've hooked the single-step
; vector
singleStepHooked		byte		0

; The # instructions since the last time SysEnterInterrupt was called
instructionsSinceLastInterrupt	sdword		0

endif
udata	ends

;-----

idata	segment

Exception struct
    E_handler	word		; Offset of handler in kcode
    E_save	word		; Offset of saved vector in idata
    E_intr	word		; Interrupt number to catch
Exception ends

; TIE_ILLEGAL_INST and TIE_PROTECTION_FAULT must be last two for InitThread
; and ThreadRestoreExceptions to work...

if	STANDARD_EXCEPTION_HANDLING

ifndef	CATCH_STACK_EXCEPTION

ifndef	CATCH_PROTECTION_FAULT
exceptions	Exception	\
	<ThreadDIVIDE_BY_ZEROHandler, oldDBZ, 0>,
	<ThreadOVERFLOWHandler, oldOverflow, 4>,
	<ThreadBOUNDHandler, oldBound, 5>,
	<NMIFrontEnd, oldFPU, 2>,
ife SINGLE_STEP_PROFILING
	<ThreadSINGLE_STEPHandler, oldStep, 1>,
endif
	<ThreadBREAKPOINTHandler, oldBPT, 3>,
	<ThreadTIE_ILLEGAL_INSTDefault, oldIllInst, 6>
else
exceptions	Exception	\
	<ThreadDIVIDE_BY_ZEROHandler, oldDBZ, 0>,
	<ThreadOVERFLOWHandler, oldOverflow, 4>,
	<ThreadBOUNDHandler, oldBound, 5>,
	<NMIFrontEnd, oldFPU, 2>,
ife SINGLE_STEP_PROFILING
	<ThreadSINGLE_STEPHandler, oldStep, 1>,
endif
	<ThreadBREAKPOINTHandler, oldBPT, 3>,
	<ThreadTIE_ILLEGAL_INSTDefault, oldIllInst, 6>,
	<ThreadTIE_PROTECTION_FAULTPassOnIrqDefault, oldProtFlt, 13>
endif

else	; CATCH_STACK_EXCEPTION

exceptions	Exception	\
	<ThreadDIVIDE_BY_ZEROHandler, oldDBZ, 0>,
	<ThreadOVERFLOWHandler, oldOverflow, 4>,
	<ThreadBOUNDHandler, oldBound, 5>,
	<NMIFrontEnd, oldFPU, 2>,
ife SINGLE_STEP_PROFILING
	<ThreadSINGLE_STEPHandler, oldStep, 1>,
endif
	<ThreadBREAKPOINTHandler, oldBPT, 3>,
	<ThreadTIE_ILLEGAL_INSTDefault, oldIllInst, 6>,
ifdef	CATCH_PROTECTION_FAULT
	<ThreadTIE_PROTECTION_FAULTPassOnIrqDefault, oldProtFlt, 13>,
endif
	<ThreadTIE_STACK_EXCEPTIONPassOnIrqDefault, oldStackExpt, 12>

endif	; !CATCH_STACK_EXCEPTION

endif


numExceptionsCaught	word	length exceptions

idata	ends

;---

udata	segment

oldDBZ		fptr
oldOverflow	fptr
oldBound	fptr
oldFPU		fptr
NOSSP <oldStep		fptr				>
oldBPT		fptr
oldIllInst	fptr

ifdef CATCH_PROTECTION_FAULT
oldProtFlt	fptr
endif

ifdef CATCH_STACK_EXCEPTION
oldStackExpt	fptr
endif

udata	ends
