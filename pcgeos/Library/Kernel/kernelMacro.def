COMMENT @-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		kernel
FILE:		kernelMacro.def

AUTHOR:		Tony Requist, Jim DeFrisco

macroS:
	Name		Description
	----		-----------
	LoadVarSeg	Load the segment of the kernel's variables
	FastLock1	First part of in-line block locking macro
	FastLock2	Second part of same
	FastLock2FG	Second part of same if labels must be outside a
			procedure.
	FastUnLock	In-line block unlock macro
	FastMemP	In-line block own macro
	FastMemV1	First part of in-line block release macro
	FastMemV2	Second part of same
	StartLibrary	
	DefLibraryRoutine
	EndLibrary

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains macros used in the kernel.

	$Id: kernelMacro.def,v 1.1 97/04/05 01:15:42 newdeal Exp $

-------------------------------------------------------------------------------@


COMMENT @----------------------------------------------------------------------

	LoadVarSeg	segreg <, trashReg>

	FUNCTION:
		Load the segment of the kernel's variables
		Faster if trashReg is given as a register that can be trashed
	ARGUMENTS:
		segreg -- segment register to load into
		<trashReg> -- optional register that can be trashed

-------------------------------------------------------------------------------@
LoadVarSeg	macro	segreg, trashReg

ifnb	<trashReg>
	mov	trashReg, idata
	mov	segreg, trashReg
else
 if @CurSeg ne kcode
	push	ax
	mov	ax, segment idata
	mov	segreg, ax
	pop	ax
 else
	if <segreg> eq <ds>
		call	LoadVarSegDS
	elseif <segreg> eq <es>
		call	LoadVarSegES
	else
		mov	segreg,cs:[kernelData]
	endif
 endif
endif

endm

FastLoadVarSeg	macro	segreg
	mov	segreg,cs:[kernelData]
endm


COMMENT @----------------------------------------------------------------------

	FAST_CHECK_HANDLE_LEGAL

	FUNCTION:
		Check a handle for validity
	ARGUMENTS:
		ds - must be idata

-------------------------------------------------------------------------------@
FAST_CHECK_HANDLE_LEGAL	macro	segreg
	local	illegalHandle, legalHandle

	test	bl,00001111b		;make sure it's is on a 16 byte boundry
	jnz	illegalHandle
ifb	<segreg>
	cmp	bx, ds:[loaderVars].KLV_handleTableStart
else
	cmp	bx, segreg:[loaderVars].KLV_handleTableStart
endif
	jb	illegalHandle
ifb	<segreg>
	cmp	bx,ds:[loaderVars].KLV_lastHandle ;make sure it's not too large
else
	cmp	bx,segreg:[loaderVars].KLV_lastHandle	;make sure it's not
							;too large
endif
	jb	legalHandle
illegalHandle:
	ERROR	ILLEGAL_HANDLE
legalHandle:

endm



COMMENT @----------------------------------------------------------------------

	FastLock1	idataReg, handleReg, destReg, myLabel1, myLabel2, fileGlobal

	FUNCTION:
		Lock the given block (fast).  This is the first part of a macro
		to lock a block inline.

	ARGUMENTS:
		idataReg - segment register containing idata
		handleReg - register containing handle to lock
		destReg - register to receive segment address (may *not* be
				a segment register
		myLabel1, myLabel2 -- unique labels
		fileGlobal - non-blank if myLabel1 and myLabel2 should be
				made file-global, else they're made
				procedure-local
	RETURN:
		destReg - data address
		carry - set if block discarded

	test for discarded or swapped -- note that the instructions used
	take 3 byte more than the smallest version, but are 6 clocks faster

	assumes that if the HM_addr is non-zero then the block is in a
	consistent state and can be locked.

	Total 52 cycles (fast case, using ds)

-------------------------------------------------------------------------------@
FastLock1	macro	idataReg, handleReg, destReg, myLabel1, myLabel2, fileGlobal, sigToCheck, sigLabel

if	ERROR_CHECK
ifdif	<handleReg>, <bx>
	xchg	bx, handleReg
endif
	call	CheckToLockNS
ifdif	<handleReg>, <bx>
	xchg	bx, handleReg
endif
endif

	INT_OFF					;2
	mov	destReg,idataReg:[handleReg][HM_addr]	;17 - get address
ifnb <sigToCheck>
destHead	substr	<&destReg>, 1, 1
destHigh	catstr	destHead, <h>
	cmp	destHigh,sigToCheck
	jz	sigLabel
endif
	tst	destReg				;3 - test for not in memory
	jz	???_&myLabel2			;4
	inc	idataReg:[handleReg][HM_lockCount]	;24 - lock block
	INT_ON					;2

	; at this point the carry is 0 since "or" sets it that way and none
	; of the following instructions affect it

???_&myLabel1	label	near
endm


COMMENT @----------------------------------------------------------------------

	FastLock2	idataReg, handleReg, destReg, myLabel1, myLabel2,
			callBackRoutine, callBackCode

	FUNCTION:
		Lock the given block (fast).  This is the second part of a macro
		to lock a block inline. FastLock2FG makes the labels
		be file-global, rather than procedure-local

	ARGUMENTS:
		idataReg - segment register containing idata
		handleReg - register containing handle to lock
		destReg - register to receive segment address
		myLabel1, myLabel2 -- unique labels
		callBackRoutine (optional) - address of call back routine to
					     pass to DoReAlloc to reload the
					     block if it is discarded
		callBackCode (optional) - code line to load argument to pass
					  to DoReAlloc
	RETURN:
		destReg - data address
		carry - set if block discarded

-------------------------------------------------------------------------------@

FastLock2	macro	idataReg, handleReg, destReg, myLabel1, myLabel2, callBackRoutine, callBackCode, fileGlobal
???_&myLabel2	label	near
	INT_ON

ifdif	<destReg>,<ax>
	mov	destReg,ax
endif
ifdif	<idataReg>,<ds>
	push	ds
	LoadVarSeg	ds, ax
endif
ifdif	<handleReg>,<bx>
	xchg	bx,handleReg
endif
ifb	<callBackRoutine>
    if @CurSeg eq kcode
	call	FullLockNoReload
    else
	call	FarFullLockNoReload
    endif
else
	push	dx
	mov	dx,offset callBackRoutine
ifnb	<callBackCode>
	push	di
	callBackCode
endif
	call	FullLockReload
ifnb	<callBackCode>
	pop	di
endif
	pop	dx
endif
ifdif	<handleReg>,<bx>
	xchg	bx,handleReg
endif
ifdif	<idataReg>,<ds>
	pop	ds
endif
ifdif	<destReg>,<ax>
	xchg	ax,destReg
endif

	jmp	???_&myLabel1
endm

FastLock2FG	macro	idataReg, handleReg, destReg, myLabel1, myLabel2, callBackRoutine, callBackCode
???_&myLabel2	label near
	INT_ON
ifdif	<destReg>,<ax>
	mov	destReg,ax
endif
ifdif	<idataReg>,<ds>
	push	ds
	LoadVarSeg	ds, ax
endif
ifdif	<handleReg>,<bx>
	xchg	bx,handleReg
endif
ifb	<callBackRoutine>
    if @CurSeg eq kcode
	call	FullLockNoReload
    else
	call	FarFullLockNoReload
    endif
else
	push	dx
	mov	dx,offset callBackRoutine
ifnb	<callBackCode>
	push	di
	callBackCode
endif
	call	FullLockReload
ifnb	<callBackCode>
	pop	di
endif
	pop	dx
endif
ifdif	<handleReg>,<bx>
	xchg	bx,handleReg
endif
ifdif	<idataReg>,<ds>
	pop	ds
endif
ifdif	<destReg>,<ax>
	xchg	ax,destReg
endif
	jmp	???_&myLabel1
endm

COMMENT @----------------------------------------------------------------------

	FastUnLock	idataReg, handleReg, trashReg, nullSeg?

	FUNCTION:
		Unlock the given block
	ARGUMENTS:
		idataReg -- segment register containing idata
		handleReg -- register containing handle
		trashReg -- register that can be trashed
		nullSeg? -- if = NO_NULL_SEG then doesn't call
			   NullSegmentRegisters. Just to allow
			   some bytes savings. 
	62 cycles (using ds)
-------------------------------------------------------------------------------@
FastUnLock	macro	idataReg, handleReg, trashReg, nullSeg?

if	ERROR_CHECK
ifdif	<handleReg>, <bx>
	xchg	bx, handleReg
endif
	call	CheckToUnlockNS
ifdif	<handleReg>, <bx>
	xchg	bx, handleReg
endif
endif

	mov	trashReg,idataReg:[systemCounter.low]	;14
	mov	idataReg:[handleReg][HM_usageValue],trashReg	;24
	dec	idataReg:[handleReg][HM_lockCount]	;24 - unlock block

if <nullSeg?> ne <NO_NULL_SEG>
EC <	call	NullSegmentRegisters				>
endif

endm

COMMENT @----------------------------------------------------------------------

	FastMemP	idataReg, handleReg

	FUNCTION:
		Do a P on the given block
	ARGUMENTS:
		idataReg -- segment register containing idata
		handleReg -- register containing handle
		ioff -- INT_OFF if interrupts already off and should
			be left off
	NOTE:
		The carry is preserved and passed to BlockOnLongQueue
		if blocking occurs.

-------------------------------------------------------------------------------@
FastMemP	macro	idataReg, handleReg, ioff
	local	continue

ifdif	<handleReg>,<bx>
EC <	xchg	bx, handleReg						>
endif
EC <	call	CheckToP						>
ifdif	<handleReg>,<bx>
EC <	xchg	bx, handleReg						>
endif

if <ioff> ne <INT_OFF>
	INT_OFF				;must ensure consistancy of the
					;data structure
endif
					;assume not owned, change
	dec	idataReg:[handleReg][HM_otherInfo]
					; status to owned
	jz	continue		;if assumption is correct then semaphore
					;is now 0 and we're done
					;otherwise restore semaphore
	inc	idataReg:[handleReg][HM_otherInfo]
					;to its original value
	push	ax
	push	bx
	mov	ax,idataReg
	;
	; NOTE: do not use add if handleReg is bx to calculate the
	; address, as the carry is significant.
	;
	lea	bx,[handleReg][HM_otherInfo]
if @CurSeg ne kcode
   	call	ThreadBlockOnQueue
else
	call	BlockOnLongQueue	;put current thread on waiting queue
endif
	pop	bx
	pop	ax
continue:
if <ioff> ne <INT_OFF>
	INT_ON
endif

endm

COMMENT @----------------------------------------------------------------------

	FastMemV1	idataReg, handleReg, myLabel1, myLabel2[, useLabel]

	FUNCTION:
		Do a V on the given block
	ARGUMENTS:
		idataReg -- segment register containing idata
		handleReg -- register containing handle
		myLabel1, myLabel2 - labels to use that are unique to the 
				     procedure, or, if useLabel non-blank, to
				     the segment and file.
		useLabel -- if not blank, makes myLabel1 and myLabel2 be
				file-global. Else they are local to the
				current procedure.
		ioff -- INT_OFF if interrupts already off

-------------------------------------------------------------------------------@
FastMemV1	macro	idataReg, handleReg, myLabel1, myLabel2, useLabel, ioff
	local	continue

ifdif	<handleReg>,<bx>
EC <	xchg	bx, handleReg						>
endif
EC <	call	CheckToV						>
ifdif	<handleReg>,<bx>
EC <	xchg	bx, handleReg						>
endif
if <ioff> ne <INT_OFF>
	INT_OFF				;must ensure consistancy of the
					;data structure
endif
					;test for no threads
					;waiting on the semaphore
	cmp	idataReg:[handleReg][HM_otherInfo],0
	jnz	???_&myLabel2		; => threads waiting
	mov	idataReg:[handleReg][HM_otherInfo],1	;mark block not owned
ifnb <useLabel>
???_&myLabel1	label near
else
???_&myLabel1:
endif
if <ioff> ne <INT_OFF>
	INT_ON
endif
endm

FastMemV2	macro	idataReg, handleReg, myLabel1, myLabel2, useLabel
ifnb <useLabel>
???_&myLabel2	label near
else
???_&myLabel2:
endif
	push	ax
	push	bx
	mov	ax,idataReg
ifidn	<handleReg>,<bx>
	add	bx,HM_otherInfo		;pass offset of semaphore
else
	lea	bx,[handleReg][HM_otherInfo]
endif
if @CurSeg ne kcode
   	call	ThreadWakeUpQueue
else
	call	WakeUpLongQueue		;wake up a waiting thread
endif
	pop	bx
	pop	ax
	jmp	???_&myLabel1

endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LockModule
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	This is a special form of PSem used for mutual-exclusion
		semaphores that track the thread that owns the lock.

PASS:		own	= the handle against which to compare the thread
			  lock's owner to determine if this is a nested
			  lock. Note that this is normally a thread handle,
			  but the Drive code uses a disk handle instead.
		mlseg	= segment register pointing to the module lock (idata)
		mladdr	= name of the module lock
		trash	= TRASH_AX_BX if they may be biffed.
		onstack	= string of registers already on the stack, if
			  on_stack symbols are to be generated
		

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	12/21/89	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
LockModule	macro	own, mlseg, mladdr, trash, onstack
		local	upNesting,takeLock
	if <trash> ne <TRASH_AX_BX>
		push	ax
		push	bx
	endif
	ifnb <onstack>
		on_stack bx ax onstack
	endif
		INT_OFF
		;
		; If current thread already owns the lock, don't mess with
		; the semaphore.
		;		
	if (.TYPE own) AND 0x10
		; own is a register...
		cmp	own, mlseg:mladdr.TL_owner
	else
		mov	ax, mlseg:mladdr.TL_owner
		cmp	ax, own
	endif
		je	upNesting
		;
		; Go for the semaphore as usual
		;
		dec	mlseg:mladdr.TL_sem.Sem_value
		jns	takeLock
		mov	ax, mlseg
		local	oog1, oog2
	oog1 instr <mladdr>, <bx>
	oog2 instr <mladdr>, <BX>
	if oog1 OR oog2
		push	bx
	    ifnb <onstack>
		if <trash> eq <TRASH_AX_BX>
			on_stack bx onstack
		else
	    		on_stack bx bx ax onstack
		endif
	    endif
	endif
		lea	bx, mladdr.TL_sem.Sem_queue
		if @CurSeg eq kcode
			call	BlockOnLongQueue
		else
			call	ThreadBlockOnQueue
		endif
	if oog1 OR oog2
		pop	bx
	    ifnb <onstack>
	    	if <trash> eq <TRASH_AX_BX>
			on_stack onstack
		else
	    		on_stack bx ax onstack
		endif
	    endif
	endif
	takeLock:
		;
		; Take possession of the lock.
		;
	if (.TYPE own) AND 0x10
		; own's a register, so just move it in
		mov	mlseg:mladdr.TL_owner, own
	else
		mov	ax, own
		mov	mlseg:mladdr.TL_owner, ax
	endif
	upNesting:
		inc	mlseg:mladdr.TL_nesting
		INT_ON
	;;; Do not even *think* of commenting this back in or you'll
	;;; break SysLockCommon and LockDOS -- ardeb/tony 11/15/90
	;;;if <trash> eq <TRASH_AX_BX> and ERROR_CHECK
	;;;	not	ax
	;;;	not	bx
	;;;endif
	ifdif <trash>,<TRASH_AX_BX>
		pop	bx
		pop	ax
	    ifnb <onstack>
		on_stack onstack
	    endif
	endif
		endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		UnlockModule
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Release a module lock.


PASS:		own	= handle that should own the lock currently
		mlseg	= segment register pointing to the module lock (idata)
		mladdr	= address of module lock (not indirect)
		trash	= TRASH_AX_BX if ax and bx may be biffed
		onstack	= things already on the stack, if on_stack symbols
			  are to be generated at the proper places

		carry flag preserved. all other flags biffed.

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	The error checking code below causes problems because when a
	process is exiting the final unlock is done by the kernel 
	because the process no longer exists.sigh.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	12/21/89	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
UnlockModule	macro	own, mlseg, mladdr, trash, onstack
		local	continue

EC <		pushf						>
ifnb <onstack>
EC <		on_stack cc onstack				>
endif
if (.TYPE own) AND 0x10
EC <		cmp	own, mlseg:mladdr.TL_owner		>
else
EC <		push	ax					>
 ifnb <onstack>
EC <		on_stack ax cc onstack				>
 endif
EC <		mov	ax,mlseg:mladdr.TL_owner		>
EC <		cmp	ax,own					>
EC <		pop	ax					>
 ifnb <onstack>
EC <		on_stack cc onstack				>
 endif
endif
EC <		ERROR_NE UNLOCK_MODULE_BY_WRONG_THREAD		>
EC <		popf						>
ifnb <onstack>
EC <		on_stack onstack				>
endif

		dec	mlseg:mladdr.TL_nesting
		jg	continue
		mov	mlseg:mladdr.TL_owner, -1	; no longer own it
		lock inc mlseg:mladdr.TL_sem.Sem_value
		jg	continue
	ifdif <trash>,<TRASH_AX_BX>
		push	ax
		push	bx
	    ifnb <onstack>
	    	on_stack bx ax onstack
	    endif
	endif
		mov	ax, mlseg
		lea	bx, mladdr.TL_sem.Sem_queue
		if @CurSeg eq kcode
			call	WakeUpLongQueue
		else
			call	ThreadWakeUpQueue
		endif
	ifdif <trash>,<TRASH_AX_BX>
		pop	bx
		pop	ax
	    ifnb <onstack>
	      	on_stack onstack
	    endif
	endif
	continue:
	;;;if <trash> eq <TRASH_AX_BX> and ERROR_CHECK
	;;;	not	ax
	;;;	not	bx
	;;;endif
		endm

;--------------
;	FOR TESTING

HackVideo	macro	lab, goof

if	HACK_STUFF_VIDEO

idata	segment
lab	char	goof, 0
idata	ends

	push	si
	mov	si, offset lab
	call	HackVideoOut
	pop	si
endif

endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a PC_COMPATIBLE-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	don	11/11/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
PC		macro	line
ifidn		HARDWARE_TYPE, <PC>
		line
endif
endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NOPC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Prefer a not PC_COMPATIBLE-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NOPC		macro	line
ifdif		HARDWARE_TYPE, <PC>
		line
endif
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ZOOM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Zoomer-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	don	11/11/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ZOOM		macro	line
endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NOZOOM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a not Zoomer-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 3/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NOZOOM		macro	line
		line
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		BULLET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Bullet-specific instruction

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
BULLET		macro	line
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NOBULL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a not-Bullet-specific instruction.

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	stevey	9/23/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NOBULL		macro	line
		line
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		REDWOOD, NORED
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Redwood-specific instruction (REDWOOD).  NORED
		performs a non-Redwood instruction.

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
REDWOOD		macro	line
		endm
NORED		macro	line
		line
		endm

RED		macro	line
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GULL, NOGULL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Gulliver-specific instruction (GULL).
		NOGULL performs a non-Gulliver-specific instruction.

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	3/ 7/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
GULL		macro	line
ifidn		HARDWARE_TYPE, <GULLIVER>
		line
endif
endm

NOGULL		macro	line
ifdif		HARDWARE_TYPE, <GULLIVER>
		line
endif
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RESP, NORESP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Responder-specific instruction (RESP).
		NORESP performs an instruction on all platforms but Responder

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	3/ 7/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RESP		macro	line
endm

NORESP		macro	line
		line
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		JEDI, NOJEDI
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Jedi-specific instruction (JEDI).
		NOJEDI performs a non-Jedi instruction.

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
JEDI		macro	line
		endm
NOJEDI		macro	line
		line
		endm




COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		PENE, NOPENE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Penelope-specific instruction (PENE).
		NOPENE performs an instruction on all platforms but Penelope

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JimG	3/ 7/95   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
PENE		macro	line
endm

NOPENE		macro	line
		line
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SSP, NOSSP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a single-step-profiling-specific instruction (SSP).
		NOSSP performs a non-single-step-profiling-specific instruction

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
SSP	macro line
if	SINGLE_STEP_PROFILING
	line
endif
	endm

NOSSP	macro line
ife	SINGLE_STEP_PROFILING
	line
endif
	endm

SSP_DEBUG	macro	theChar
if	SINGLE_STEP_PROFILING 
	pushf
	push	ax
	mov	ax, theChar
	call	PrintSSPDebugChar
	pop	ax
	popf
endif
	endm
TRAP_ON macro trashReg
ifb	<trashReg>
	push	ax
	TRAP_ON_common	ax
	pop	ax
else
	TRAP_ON_common	trashReg
endif
	endm

TRAP_ON_common	macro	trashReg
	local	exit
	pushf
	push	ds
	LoadVarSeg	ds, trashReg
	tst	ds:[singleStepping]
	pop	ds
	jz	exit
	pop	trashReg
	ornf	trashReg, mask CPU_TRAP
	push	trashReg	
exit:
	popf
	endm
	
TRAP_OFF macro trashReg
ifnb	<trashReg>
	pushf
	pop	trashReg
	andnf	trashReg, not mask CPU_TRAP
	push	trashReg
	popf
else
	push	ax
	pushf
	pop	ax
	andnf	ax, not mask CPU_TRAP
	push	ax
	popf	
	pop	ax
endif
	endm

EnsureTrapSet	macro
	local noErr
	push	ax							
	pushf								
	pushf								
	pop	ax

	test	ax, mask CPU_TRAP					
	jnz	noErr

;	The trap flag is not set - give an error if we are singleStepping

	push	ds
	LoadVarSeg	ds, ax
	tst	ds:[singleStepping]
	pop	ds
	jz	noErr

	popf								
	pop	ax							
	ERROR	TRAP_NOT_SET

noErr:								
	popf
	pop	ax
	endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		VG230, NOVG230
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a VG230-specific instruction (VG230).
		NOVG230 performs a non-VG230 instruction.

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
VG230		macro	line
if		VG230_COMMON
		line
endif
		endm
NOVG230		macro	line
ife		VG230_COMMON
		line
endif
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		HMA, NOHMA
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform an instruction based on KERNEL_IN_HMA flag. Used in
		places where a virtual segment is checked for being a 
		non-segment or a handle is checked for being non-memory

PASS:		line = line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ardeb	5/13/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
HMA		macro	line
if		KERNEL_IN_HMA
		line
endif
		endm

NOHMA		macro	line
ife		KERNEL_IN_HMA
		line
endif
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		POQET
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a Poqet-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	don	11/11/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
POQET		macro	line
if		POQET_SUPPORT
		line
endif
endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		KXIP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform an KERNEL-XIP-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	don	11/11/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
KXIP		macro	line
if		KERNEL_EXECUTE_IN_PLACE
		line
endif
endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NOKXIP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform an KERNEL-XIP-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	don	11/11/92	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NOKXIP		macro	line
if		not KERNEL_EXECUTE_IN_PLACE
		line
endif
endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		AXIP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform an XIP specific instruction for all types of XIP

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	2/ 3/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
AXIP		macro	line
if		FULL_EXECUTE_IN_PLACE or KERNEL_EXECUTE_IN_PLACE
		line
endif
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NOAXIP
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	

PASS:		

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	2/ 3/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NOAXIP		macro	line
if		not FULL_EXECUTE_IN_PLACE and (not KERNEL_EXECUTE_IN_PLACE)
		line
endif
		endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		RTC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform an HARDWARE_RTC_SUPPORT-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
RTC		macro	line
if		HARDWARE_RTC_SUPPORT
		line
endif
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NORTC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a not HARDWARE_RTC_SUPPORT-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NORTC		macro	line
if		not HARDWARE_RTC_SUPPORT
		line
endif
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		DOS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a not NO_DOS-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
DOS		macro	line
if	not NO_DOS
		line
endif
		endm

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		NODOS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Perform a NO_DOS-specific instruction

PASS:		line	= line of code

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	6/ 2/93   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
NODOS		macro	line
if	NO_DOS
	line
endif
		endm








COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ConvertHandleToImageOffset
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Converts a handle to an offset into the handle addresses table

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	atw	3/21/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
ConvertHandleToImageOffset	macro	reg,destreghi, destreglo, opt
ifdif	<opt>, <TRASH_DS>
	push	ds
endif
EC <	cmp	reg, LAST_XIP_RESOURCE_HANDLE				>
EC <	ERROR_A	MAPPING_HANDLE_OUTSIDE_OF_XIP_IMAGE			>
	sub	reg, ds:[loaderVars].KLV_handleTableStart
EC <	ERROR_C	MAPPING_HANDLE_OUTSIDE_OF_XIP_IMAGE			>
	mov	ds, ds:[loaderVars].KLV_xipHeader
	shr	reg
	shr	reg		;Convert handle to offset into handleAddresses
				; table
	add	reg, ds:[FXIPH_handleAddresses]
ifdif	<destreghi>, <reg>
	mov	destreghi, ds:[reg].high
	mov	destreglo, ds:[reg].low
else
	mov	destreglo, ds:[reg].low
	mov	destreghi, ds:[reg].high
endif

ifdif	<opt>, <TRASH_DS>
	pop	ds
endif
endm


COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CallEMMDriver
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Calls the EMM driver

CALLED BY:	GLOBAL
PASS:		nada
RETURN:		nada
DESTROYED:	nada
 
PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	atw	3/21/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
if	EMM_XIP
CallEMMDriver	macro	opt
ifnb	<opt>
	mov	ax, opt
endif
	int	EMM_INT
if	ERROR_CHECK
	tst	ah
	ERROR_NZ	EMMXIP_EMM_ERROR
endif

endm
endif



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MapXIPPageInline
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Maps in an XIP page (done inline for speed reasons)

CALLED BY:	GLOBAL
PASS:		pagereg	= page of XIP image to bank in
RETURN:		nada
DESTROYED:	nada
 
PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	atw	4/ 5/94   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
MapXIPPageInline	macro	pagereg, opt
if	ERROR_CHECK
	call	AssertDSKdata					

	; If we're using compressed XIP, then make sure we're not trying to
	; map in a compressed resource.

if	COMPRESSED_XIP
	test	pagereg, 0x8000
	ERROR_NZ ERROR_ATTEMPTED_TO_MAP_IN_A_COMPRESSED_XIP_RESOURCE
endif	;COMPRESSED_XIP

    	; If the support is there in ECCheckXIPPageNumber for this device,
	; then call ECCheckXIPPageNumber to ensure that the page passed to
	; us was indeed valid.

if	GULLIVER_XIP
    ifdif <pagereg>, <ax>
    	push	ax
    	mov	ax, pagereg
    endif
    
	call	ECCheckXIPPageNumber
    
    ifdif <pagereg>, <ax>
    	pop	ax
    endif
endif	;GULLIVER_XIP or PENELOPE_XIP or DOVE_XIP
    

endif

	pushf	
	INT_OFF
SSP <	TRAP_OFF							>
EC <	call	ECCheckPageChecksum					>

	cmp	ds:[curXIPPage], pagereg
	jz	done
if	TRACK_INTER_RESOURCE_CALLS
	; one more mapping occurs
	inc	ds:[mapPageCount]
endif
	mov	ds:[curXIPPage], pagereg

if	<opt> ne <TRASH_AX> and <opt> ne <TRASH_AX_BX_DX> and <opt> ne <TRASH_AX_BX>
	push	ax
endif

if	<opt> ne <TRASH_DX> and <opt> ne <TRASH_AX_BX_DX>
	push	dx
endif

if	<opt> ne <TRASH_BX> and <opt> ne <TRASH_AX_BX_DX> and <opt> ne <TRASH_AX_BX> and <pagereg> ne <bx>
	push	bx
endif

if	EMM_XIP

	;;==================================================================

ifdif	<pagereg>, <bx>
	mov	bx, pagereg
endif

if	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE * 2
	shl	bx, 1
elseif	MAPPING_PAGE_SIZE ne PHYSICAL_PAGE_SIZE
	ErrMessage <Write code to deal with big mapping page>
endif

	mov	dx, ds:[loaderVars].KLV_emmHandle
	mov	ah, high EMF_MAP_BANK
	mov	al, ds:[loaderVars].KLV_mapPage
	CallEMMDriver

if	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE * 2
	inc	bx
	mov	ah, high EMF_MAP_BANK
	mov	al, ds:[loaderVars].KLV_mapPage
	inc	al
	CallEMMDriver
endif
	;;==================================================================

elseif	GULLIVER_XIP

	;;==================================================================
	
	local	A21_22_MASK, restoreIndex
	
ifdif	<pagereg>, <bx>
	mov	bx, pagereg
endif

if	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE * 2
	shl	bx, 1
elseif	MAPPING_PAGE_SIZE ne PHYSICAL_PAGE_SIZE
	ErrMessage <Write code to deal with big mapping page>
endif

;	Save the current ELAN register index just in case someone in DOS is
;	messing with it.

	in	al, ELAN_INDEX
	mov	dh, al

;	Save the current MMSA/MMSB select bit for the same reason.
	mov	al, ELAN_MMSB_CONTROL
	out	ELAN_INDEX, al
	in	al, ELAN_DATA
	mov	dl, al

;	Select MMSB memory
	and	al, not ELAN_MMSABSEL
	out	ELAN_DATA, al
	
	; Store in bh the value to set 8th bit of the page number
	; (A21 and A22) for both windows.
	clr	bh
	shl	bx, 1
	shr	bl, 1

if MOVABLE_XIP_BASE_A_21_22_OFFSET ne 0
    	shl	bh, MOVABLE_XIP_BASE_A_21_22_OFFSET
endif
	
;	Set the lower page's lower 7 bits
	mov	al, bl
	or	al, ELAN_PAGEEN
	ELAN_SET_PAGE_REGISTER	MOVABLE_XIP_BASE_WINDOW, al
	
if	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE

A21_22_MASK = MOVABLE_XIP_BASE_A_21_22_MASK

elseif	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE * 2

	;
	; Map the second of the two mapping pages
	;
	
	; Put the second page's A21 and A22 bits into bh
	inc	bl
	clr	ax
	mov	al, bl
	shl	ax, 1
	shr	al, 1
	shl	ah, MOVABLE_XIP_NEXT_A_21_22_OFFSET
	or	bh, ah
	
	; Set the lower 7 bits
	or	al, ELAN_PAGEEN
	ELAN_SET_PAGE_REGISTER	MOVABLE_XIP_NEXT_WINDOW, al

A21_22_MASK = MOVABLE_XIP_BASE_A_21_22_MASK or MOVABLE_XIP_NEXT_A_21_22_MASK

endif

;	Set 8th bit of one or both pages
	mov	al, MOVABLE_XIP_A_21_22_REG
	out	ELAN_INDEX, al
	in	al, ELAN_DATA
	and	al, not A21_22_MASK
	or	al, bh
	out	ELAN_DATA, al

;	Restore the MMSA/MMSB select bit.
	test	dl, ELAN_MMSABSEL
	jz	restoreIndex		; was set to MMSB.. leave it alone
	
	mov	al, ELAN_MMSB_CONTROL
	out	ELAN_INDEX, al
	in	al, ELAN_DATA
	or	al, ELAN_MMSABSEL
	out	ELAN_DATA, al		; restore to MMSA
	
restoreIndex:
;	Restore the ELAN register index
	mov	al, dh
	out	ELAN_INDEX, al
	
	;;==================================================================
	
elseif	VG230_FULL_XIP
	
	;;==================================================================
	
ifdif	<pagereg>, <bx>
	mov	bx, pagereg
endif

;	Save the current setting of the vg230 address register, in case
;	someone in DOS is messing with it.

	in	al, VG230_ADDR_REGISTER
	mov_tr	dx, ax

	mov	al, high VG230_XIP_MAP_PAGE_SEGMENT
	out	VG230_ADDR_REGISTER, al
	mov	ax, bx
	out	VG230_DATA_REGISTER, ax

if	MAPPING_PAGE_SIZE eq PHYSICAL_PAGE_SIZE * 2

	;
	; Map the second of the two mapping pages
	;
	mov	al, high (VG230_XIP_MAP_PAGE_SEGMENT + PHYSICAL_PAGE_SIZE/16)
	out	VG230_ADDR_REGISTER, al
	inc	bx
	mov	ax, bx
	out	VG230_DATA_REGISTER, ax

endif

;	Restore the current setting of the address register

	mov_tr	ax, dx
	out	VG230_ADDR_REGISTER, al
	
	;;==================================================================

else

	ErrMessage	<Write code to map in resource data>

	;;==================================================================
endif	; THE BIG IF

EC <	call	ECCheckPageChecksum					>
if	<opt> ne <TRASH_BX> and <opt> ne <TRASH_AX_BX_DX> and <opt> ne <TRASH_AX_BX> and <pagereg> ne <bx>
	pop	bx
endif

if	<opt> ne <TRASH_DX> and <opt> ne <TRASH_AX_BX_DX>
	pop	dx
endif
if	<opt> ne <TRASH_AX> and <opt> ne <TRASH_AX_BX_DX> and <opt> ne <TRASH_AX_BX>
	pop	ax
endif

ifdef	XIP_DEBUGGING_VERSION
	PrintMessage <WARNING - making slower XIP_DEBUGGING_VERSION kernel>
	; dx = page number, tell stub about it
	push	ax
	mov	al, DEBUG_BANK_PAGE
	call	FarDebugMemory
	pop	ax
endif

done:
EC <	call	ECCheckPageChecksum					>
	popf
endm

if	FULL_EXECUTE_IN_PLACE
xipfar	equ	<far>
else
xipfar	equ	<near>
endif
