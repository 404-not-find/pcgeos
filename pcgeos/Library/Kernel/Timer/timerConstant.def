COMMENT }----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Timer
FILE:		timerConstant.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains constants local to the timer module.

	$Id: timerConstant.def,v 1.1 97/04/05 01:15:34 newdeal Exp $

------------------------------------------------------------------------------}


;--------------------------------------------------------------------------
;			Structures for timer related calls
;--------------------------------------------------------------------------

;	Values for TA_type

TIMER_SLEEP 		enum TimerType
TIMER_SEMAPHORE 	enum TimerType


;--------------------------------------------------------------------------
;			MS-DOS calls
;--------------------------------------------------------------------------

MSDOS_GET_DATE		equ	2ah
MSDOS_SET_DATE		equ	2bh
MSDOS_GET_TIME		equ	2ch
MSDOS_SET_TIME		equ	2dh


;--------------------------------------------------------------------------
;			Timer Test Constants
;--------------------------------------------------------------------------

;
; Save the current value of TimerType so we can check the number of
; handlers against it (before we dork the value with the definition
; of additional TimerType's in the test code below.
;
LAST_TIMER_TYPE		equ	TimerType

if TEST_TIMER_CODE

TIMER_MS_INTERRUPT	enum	TimerType, 0xff
	; fake TimerType used in TimerLog to represent the receipt of a
	;       msec timer interrupt.
	; TL_DATA: units lost on last tick

TIMER_TB_INTERRUPT	enum	TimerType, 0xfe
	; time-base interrupt received
	; TL_DATA: units lost last interrupt

TIMER_RESET_TB		enum	TimerType, 0xfd
	; fake TimerType used when ReprogramTimer is resetting the time-base.
	; TL_DATA: value reprogrammed into timer

TIMER_MS_CALL		enum	TimerType, 0xfc
	; fake TimerType used to indicate a call to a msec routine
	; TL_DATA: handle of timer

TIMER_MS_RETURN 	enum	TimerType, 0xfb
	; fake TimerType used to indicate a return for a call
	; TL_DATA: handle of timer

TIMER_MS_CREATE 	enum	TimerType, 0xfa
	; fake TimerType used to indicate the creation of a msec timer
	; TL_DATA: handle of timer

TIMER_RT_CALL		enum	TimerType, 0xf9
	; fake TimerType used to indicate a call to a routine routine
	; TL_DATA: handle of timer

TIMER_RT_RETURN 	enum	TimerType, 0xf8
	; fake TimerType used to indicate a return for a call
	; TL_DATA: handle of timer

TIMER_MSG_CALL		enum	TimerType, 0xf7
	; fake TimerType used to indicate a call to a msg routine
	; TL_DATA: handle of timer

TIMER_MSG_RETURN	enum	TimerType, 0xf6
	; fake TimerType used to indicate a return for a call
	; TL_DATA: handle of timer

TIMER_OTHER_CREATE	enum	TimerType, 0xf5
	; fake TimerType used to indicate the creation of a non-msec timer
	; TL_DATA: handle of timer

TIMER_ENTER		enum	TimerType, 0xf4
	; fake TimerType to indicate that an interrupt occured
	; TL_DATA: undefined

TIMER_LEAVE		enum	TimerType, 0xf3
	; fake TimerType to indicate the exiting of the interrupt routine
	; TL_DATA: undefined

TIMER_HAND_OFF		enum	TimerType, 0xf2
	; fake TimerType to indicate the passing off of the interrupt
	; routine to the previous routine for those "%^&*ing foreign
	; PC's

TimerLog	struct
    TL_type	byte	; type of entry. This is TimerType.low, being
			; the type of timer for which the thing
			; is being reprogrammed, or one of the endearing
			; constants given above
    TL_count	word	; unit counter, either value programmed into
			; the timer, or unitsSinceLastTick.
    TL_data	word	;
    TL_flag	byte	; msFlag at the time of the entry
    TL_level	byte	; interruptCount at time of log entry
TimerLog	ends

TIMER_LOG_LENGTH	equ 1000	; number of entries to hold in the timer
					; log.
endif


;--------------------------------------------------------------------------
;			PC hardware values
;--------------------------------------------------------------------------


if	HARDWARE_TIMER_8253

; Address of handler for timer interrupt

TIMER_INTERRUPT_VECTOR	equ	8 * 4

; I/O ports for the timer

TIMER_IO_0_LATCH	equ	40h
TIMER_IO_COMMAND	equ	43h

TimerReadLoadCommand	etype	byte
    TRLC_LATCH		enum	TimerReadLoadCommand	; latch current count
    TRLC_MSB_ONLY	enum	TimerReadLoadCommand	; read/load MSB only
    TRLC_LSB_ONLY	enum	TimerReadLoadCommand	; read/load LSB only
    TRLC_WORD		enum	TimerReadLoadCommand	; read/load full word,
							;  LSB first

TimerMode		etype	byte
    TM_IRQ_ON_TC	enum	TimerMode
    ; interrupts when terminal count is reached. counter continues to
    ; count, but IRQ must be acked by setting timer to mode 0
    ; again (no count reload nec'y)

    TM_ONE_SHOT		enum	TimerMode
    ; one-shot whose start is controlled by the gate input.
    ; since the gate is tied high on the PC, this is useless
    ; to us.

    TM_RATE_GENERATOR	enum	TimerMode
    ; a divide-by-N counter that keeps the IRQ line high for
    ; the whole time, only dropping it for a single clock, making
    ;  it useless for our purposes

    TM_SQUARE_WAVE	enum	TimerMode
    ; the mode BIOS uses. It's effectively a divide-by-N counter, but it
    ; subtracts 2 from its counter for each clock pulse, keeping its
    ; output high for one count-to-0, and low for the next count-to-0. Fine
    ; for a periodic timer, but hell for accurate timing of things, as
    ; there's no way to determine in which half of the square wave one is
    ; currently counting.

    TM_SOFTWARE_STROBE	enum	TimerMode
    ; another retriggerable one-shot, but the output is the wrong polarity.

    TM_HARDWARE_STROBE	enum	TimerMode
    ; similar to TM_SOFTWARE_STROBE, but the counting is triggered by the gate
    ; input, which is tied high. So even if the polarity of the output were
    ; ok, it would still be useless.

TimerControlWord	record
    TCW_COUNTER:2			; to which counter the command applies:
					;  0, 1, or 2
    TCW_READ_LOAD TimerReadLoadCommand:2; count format/latch-counter command
    TCW_MODE TimerMode:3		; how to count
    TCW_USE_BCD:1			; set if should treat counter as a
					;  four-digit packed BCD number, not
					;  a 16-bit binary number
TimerControlWord	end

TIMER_COMMAND_0_WRITE		=	TimerControlWord <
		0,
		TRLC_WORD,
		TM_RATE_GENERATOR,
		0
	>

TIMER_COMMAND_0_READ_COUNTER	=	TimerControlWord <
		0,
		TRLC_LATCH,
		0,
		0
	>

;	Default value for timer

ifdef	GPC
; The AMD SC410 User's Manual recommends FF23h, but from my measurements
; the correct value seems to be FF21h.
DEFAULT_TIMER_VALUE	equ	0ff21h
else
DEFAULT_TIMER_VALUE	equ	0ffffh
endif	; GPC

;	Value to load in PC timer register


; TIMER_UNITS_PER_SECOND is used to calculate how the PC timer is related to
; real time.  This may vary for different products because the hardware may
; supply a different clock to the timer chip than the standard PC, which is
; 1.19318 MHz.
;

if	GULLIVER_COMMON

    ; Elan clocks the 8254 at 1.1892 MHz
    ;
TIMER_UNITS_PER_SECOND	equ	1189200

elifdef	GPC

    ; Elan clocks the 8254 at 1.1892 MHz.  However, for some reason this value
    ; still gives a 2 sec lag every 24 hrs even with the 3-tick boost every
    ; hour in IncrementTime.  We'll live with that.
    ;
TIMER_UNITS_PER_SECOND	equ	1189200

else

    ; Standard PC: 1.19318 MHz
    ;
TIMER_UNITS_PER_SECOND	equ	1193180

endif

GEOS_TIMER_VALUE 	equ	TIMER_UNITS_PER_SECOND / INTERRUPT_RATE	;19886

if	VG230_COMMON
	;
	;  Some VG230-specific hardware constants (mainly
	;	to deal with BIOS and its RTC)
	TRTCF_RESET_RTC_ALARM	equ	17h
	TRTCF_SET_RTC_ALARM	equ	16h

	TIMER_RTC_BIOS_INT	equ	1ah

endif	; VG230_COMMON

else

;--------------------------------------------------------------------------
;			Zoomer hardware values
;--------------------------------------------------------------------------


endif

if	GULLIVER_COMMON

	; Gulliver RTC constants
	
	TRTCF_RESET_RTC_ALARM	equ	07h
	TRTCF_SET_RTC_ALARM	equ	06h

	TIMER_RTC_BIOS_INT	equ	1ah

    	; To read the RTC directly.  Note all these are in BCD, sigh.
	
	TIMER_RTC_INDEX_REGISTER	equ	070h
	TIMER_RTC_DATA_REGISTER		equ	071h
	
	TIMER_RTC_REG_SECONDS	equ	0h
	TIMER_RTC_REG_MINUTES	equ	2h
	TIMER_RTC_REG_HOURS	equ	4h
	TIMER_RTC_REG_DTW	equ	6h
	TIMER_RTC_REG_DAY	equ	7h
	TIMER_RTC_REG_MONTH	equ	8h
	TIMER_RTC_REG_YEAR	equ	9h
	TIMER_RTC_REG_CENT	equ	32h
	
	TIMER_RTC_REG_A		equ	0ah
	TIMER_RTC_REGA_UPDATE	equ	80h	; update-in-progress!
	

endif	;GULLIVER_COMMON


if	VG230_COMMON

	; The RTC clock interface is through the
	; INDEXed register mechanism.  The registers
	; of note are as follows:

	RTC_MODE_REG_INDEX	equ	079h

	RTCModeRegister		record
		RTCMR_RTC_INDEX_ENABLE:1	; index registers 070h-078h on?
		RTCMR_RTC_CMOS_ENABLE:1		; RTC CMOS entries on?
		RTCMR_RTC_CLOCK_DISABLE:1	; Pause RTC clock?
		:3
		RTCMR_RTC_ALARM_ENABLE:1	; RTC alarms enabled?
		RTCMR_RTC_1HZ_ENABLE:1		; 1Hz alarm enabled?
	RTCModeRegister		end


	RTC_STATUS_REG_INDEX	equ	07ah

	RTCStatusRegister	record
		RTCSR_CMOS_VALID:1		; is CMOS valid at all?
		:5
		RTCSR_ALARM_PENDING:1		; RTC alarm pending?
		RTCSR_1HZ_PENDING:1		; 1Hz interrupt pending?
	RTCStatusRegister	end

		;
		;  Note : To ACK a RTC alarm, or 1Hz int, just
		;	write to 07ah, and it will be done...

endif
;--------------------------------------------------------------------------
;			Derived constants
;--------------------------------------------------------------------------

;
; Smallest interval we're willing to program into the timer, to avoid massive
; recursion once interrupt has been acknowledged. This is based on the
; assumed latency in dealing with timer interrupts on most systems...
; 
MINIMUM_TIMER_VALUE	equ	TIMER_UNITS_PER_SECOND / 4000	;0.25 ms

TIMER_UNITS_PER_MS	equ	TIMER_UNITS_PER_SECOND / 1000

;
; Ratio of normal divisor to our divisor used to provide (nearly)
; the same interrupt rate to things outside of GEOS (eg. %$^#!
; foreign DOS mouse drivers)
;

PASS_COUNT_TIMES_10000	equ	32954
