COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		VM manager
FILE:		vmemConstant.def

AUTHOR:		Adam de Boor, Dec  8, 1989

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	12/ 8/89	Initial revision


DESCRIPTION:
	Constants for VM module
		
	$Id: vmemConstant.def,v 1.1 97/04/05 01:15:52 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

EC <VM_VERIFY_NUM_BYTES	=	100				>

;	initial number of block handles created for a VM file. 1 for header, 3
;	to satisfy extraUnassigned requirements

VM_INIT_NUM_BLKS	=	4

;	number of block handles by which the VM header will be exteneded
;	when necessary

VM_EXTEND_NUM_BLKS	=	4

VM_INIT_HDR_SIZE = size VMHeader + (VM_INIT_NUM_BLKS * size VMBlockHandle)

VM_EXTEND_BLK_TBL_SIZE	=	VM_EXTEND_NUM_BLKS * size VMBlockHandle

VM_FILE_SIG	=	0adebh

VM_HDR_SIG	=	0fbh		; VM_headerSig

VM_CHECK_WRITABLE	= FALSE		; Set TRUE to enable making sure file
					;  can be written... WILL NOT WORK.
					;  WORK NEEDED IN VMCheckWritable,
					;  AMONG OTHER PLACES

VMBlockType	etype	byte, -1, -2	; Values for VMBH_sig for in-use blocks.
					;  Starts at -1 to avoid valid block
					;  range. Skips by -2 to make sure low
					;  bit is set.
    VMBT_USED	enum	VMBlockType	; Block in-use and ordinary
    VMBT_DUP	enum	VMBlockType	; A duplicated handle. A VMBT_USED block
					;  is transformed into this when it is
					;  first written back to the file in
					;  BACKUP mode. A VMBT_BACKUP handle is
					;  allocated to hold the original file
					;  space while new space is allocated to
					;  this block.
    VMBT_BACKUP	enum	VMBlockType	; Part of the file's backup copy. The
					;  VMBH_uid field contains the duplicate
					;  handle.
    VMBT_ZOMBIE	enum	VMBlockType	; This is a USED/DUP block that has been
					;  freed while the file is operating in
					;  BACKUP mode. The handle can't go
					;  away until VMSave has been called,
					;  as VMRevert will need it if called.
VM_IN_USE_BIT	equ	1

VMBlockFlags	record
    :3
    VMBF_COMPRESSED:1			; Set if the block is compressed
    VMBF_UNGROUPED_AVAIL:1		; Set if the block is a member of the
					;  "ungrouped" set of DB groups and
					;  now has enough free space to hold
					;  more items
    VMBF_PRESERVE_HANDLE:1		; Preserve block's handle throughout
					; the life of the file
    VMBF_HAS_BACKUP:1			; Set if a block is transformed from
					;  VMBT_USED to VMBT_DUP and a
					;  VMBT_BACKUP block was created for the
					;  previous file space.
    VMBF_LMEM:1				; Non-zero if block run by LMem module
					;  Used in EC version to call
					;  ECLMemInitHeap to initialize the
					;  ends of all the chunks and the free
					;  space.
VMBlockFlags	end

VMCompressFlags	record
    :6
    VMCF_NO_COMPRESS:1			; Flag to tell VMDoCompress
					;  whether it should do anything.
					;  Normally this is F, but it is
					;  set T before writing a block
					;  in VMUpdateAndRidBlk, when
					;  the memory required for the
					;  compression is not to be had.
    VMCF_COMPRESSING:1			; Flag set when VMDoCompress is in
					;  progress. Prevents recursion
					;  into VMDoCompress and ensures
					;  VMUseBlk doesn't touch the first
					;  assigned block.
VMCompressFlags	end

VM_NUM_EXTRA             =      3	;Number of extra unassigned to add
					;before calling VMAllocAndAttach

VMSizeAndPos	struct
    VMSAP_size	word
    VMSAP_pos	dword
VMSizeAndPos	ends
;
;A VM file begins with a VMFileHeader that is read when the file is opened.
;

VMFileHeader	struct
    VMFH_signature	dw	?	;signature
    VMFH_headerSize	dw	?	;size of header block
    VMFH_headerPos	dd	?	;position in file of the header block
    VMFH_updateCounter	dw	?	;counter incremented on changes
    VMFH_updateType	VMOperation	;openeration being performed
    VMFH_reserved	dw	6 dup (?)	;reserved for future use
VMFileHeader	ends

; Constants for positions to place byte range locks for syncronizatiom

;
;	NOTE: This changed since the upgrade release.  This unfortunate
;	(and not exactly compatible) change was necessary to avoid reading
;	a range of the file that was locked (which causes critical errors)
;
;	NOTE: Changed again because Netware locks byte ranges in 512 byte
;	blocks.
;
;;;VM_BYTE_LOCK_POSITION	= offset VMFH_updateCounter	;UPGRADE
;;;VM_BYTE_LOCK_POSITION	= (size VMFileHeader) - 1
VM_BYTE_LOCK_POSITION	= 100000000

;
;The VM_blockTable is an array of VMBlockHandles that store information about
;each block.  The first entry is for the VMHeader itself.
;

;VM block handle structure for used blocks

VMBlockHandle	struct
	VMBH_memHandle	hptr		;memory handle (0 if not in memory)
	VMBH_sig	VMBlockType	;Type of used block (low bit is set)
	VMBH_flags	VMBlockFlags	;Flags for the block
	VMBH_uid	dw		;user associated id
	VMBH_fileSize	sword		;size of block on disk
	VMBH_filePos	sdword		;position on block on disk
VMBlockHandle	ends

;VM block handle structure for free blocks (assigned and unassigned)

VMFreeBlockHandle	struct
	VMFBH_nextPtr	nptr.VMFreeBlockHandle	;handle of next block in the
						; free list
	VMFBH_prevPtr	nptr.VMFreeBlockHandle	;handle of prev block in the
						; free list
	VMFBH_fileSize	sdword	?	;unassigned if size = 0, else assigned
	VMFBH_filePos	sdword	?	;position on block on disk
VMFreeBlockHandle	ends

;
;The VMH_headerHandle in the VMHandle is the handle of the VM header block.
;The VM header block stores all the administration data about the Vm file.
;The VM header is stored as the first VM block of the file.
;

VMHeader	struct
    VMH_headerSig	dw	VM_HDR_SIG
    VMH_assignedPtr	nptr.VMFreeBlockHandle 	;first blk on assigned list
    VMH_lastAssigned	nptr.VMFreeBlockHandle 	;last blk on assigned list
    VMH_unassignedPtr	nptr.VMFreeBlockHandle 	;first blk on unassigned list
    VMH_lastHandle	dw	?		;non-inclusive end of range
					    	;of valid block handles (i.e.
					    	;the size of the header block)

    VMH_numAssigned	dw	?		;number of assigned handles
    VMH_numUnassigned	dw	?		;number of unassigned handles
    VMH_numUsed		dw	?		;number of used handles incl hdr
    VMH_numResident		dw	?	;number of resident handles
    VMH_numExtraUnassigned	dw	?	;number of extra unassigned
					    	; handles required by the user
					    	; of the VM file

    VMH_mapBlock	nptr.VMBlockHandle	;handle of map block
    VMH_compactionThreshold	sword	?	;percentage of file dedicated
					    	; to used blocks below which
					    	; compaction is triggered
    VMH_usedSize	sdword	?		;total size of all used blks
    VMH_attributes	VMAttributes	0	; Various file attributes
    VMH_compressFlags	VMCompressFlags	0	; Various compression flags
    VMH_dbMapBlock	word	?		; map block for db code
			    align	4
    VMH_blockTable		label	VMBlockHandle ;block table
VMHeader	ends

;
; Header pieces that must be transfered between files when performing a
; Save As
; 
VMSaveAsHeader	struct
    VMSAH_flags		GeosFileHeaderFlags
    VMSAH_release 	ReleaseNumber
    VMSAH_protocol 	ProtocolNumber
    VMSAH_token		GeodeToken
    VMSAH_creator	GeodeToken
    VMSAH_notes		FileUserNotes
VMSaveAsHeader	ends

VMSAH_NUM_ATTRS	equ	6

VMPOEStack	struct	; Structure describing frame created by
			; VMPush_OverRide_EnterVMFile
    VMPOES_es	word
    VMPOES_ds	word
    VMPOES_bp	word
    VMPOES_di	word
    VMPOES_dx	word
    VMPOES_cx	word
    VMPOES_bx	word
    VMPOES_si	word
    VMPOESF_ret	label	fptr.far	; return address for
					;  VMPush_OverRide_EnterVMFileFar
VMPOEStack	ends


;---------------------------------------------------------------------
;		Huge Array Stuff
;---------------------------------------------------------------------

;	This is the structure of the elements of the chunk array in
;	the directory block
;
HugeArrayDirEntry	struct
    HADE_last	dword			; elem # of last element in block
    HADE_size	word			; size of block
    HADE_handle	word			; VM block handle
HugeArrayDirEntry	ends

HA_DESIRED_BLOCK_SIZE	equ	4000
HA_LOWER_LIMIT		equ	HA_DESIRED_BLOCK_SIZE/4
HA_UPPER_LIMIT		equ	(3*HA_DESIRED_BLOCK_SIZE)/2

MEASURE_HUGE_ARRAY_COMPACTION	equ	FALSE

;---------------------------------------------------------------------
;		Temp Async Stuff
;---------------------------------------------------------------------

VM_DIRTY_LIMIT_NOT_SET	equ	0x8000
VM_DIRTY_LIMIT_DISABLED	equ	0xFFFF

;---------------------------------------------------------------------
;		Compressed VM Stuff
;---------------------------------------------------------------------

if COMPRESSED_VM

VM_COMPRESS_MINIMUM_BLOCK_SIZE	equ	80h

if not VM_COMPACT_ON_UPDATE
%out *****************************************************************
%out * Since you've turned on COMPRESSED_VM, you should also turn on *
%out * VM_COMPACT_ON_UPDATE.  Otherwise some VM files may contain    *
%out * excessive amounts of unused space.                            *
%out *****************************************************************
endif

endif ; COMPRESSED_VM
