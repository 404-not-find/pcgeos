COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Kernel Input Manager
FILE:		imConstant.def

AUTHOR:		Adam de Boor, Jan 28, 1991

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Adam	1/28/91		Initial revision


DESCRIPTION:
	Constants and data structures internal to the Input Manager
		
	$Id: imConstant.def,v 1.1 97/04/05 01:17:19 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

IM_STACK_SIZE	equ	500	; 500 bytes for this beastie's stack.
IM_PEN_MODE_STACK_SIZE	equ	800	;We need more stack on pen systems,
					; as we might have to call the HWR
					; code in a gesture callback.	

QUIET_PTR_SUPPORT	= FALSE	; True to include code for "quiet" rectangle
				; areas

INPUT_MESSAGE_RECEIPT	= FALSE	; True if message receipt code should be
				; included (turned off for 2.0 for now, as 
				; nothing uses it & may not prove useful given
				; new input model)

REPEAT_PRESS_HANDLE_THRESHHOLD	= 400

;-----

if	(INPUT_MESSAGE_RECEIPT)
ButtonPressStatus	struct
    BPS_pressTime		dword		; time of previous press
    BPS_pressXPos		sword		; location of previous
    BPS_pressYPos		sword		;	press
    BPS_unprocessed		word		; # of unprocessed events
						; in UI queue relating to this
						; button.
ButtonPressStatus	ends
else
ButtonPressStatus	struct
    BPS_pressTime		dword		; time of previous press
    BPS_pressXPos		sword		; location of previous
    BPS_pressYPos		sword		;	press
ButtonPressStatus	ends
endif

if	(QUIET_PTR_SUPPORT)
;
; Flags for ptrOptFlags variable
;
PtrOptFlags	record
    POF_UNSENT:1,	; set if last ptr event through was not sent on to
			;  output.
    POF_INSIDE_RECT:1,	; set if ptr is currently inside of quietRect
    POF_SEND_NEXT:1,	; set if next ptr event should be sent regardless of
			;  above flag's effects

    :5
PtrOptFlags	end
endif

;
; State of ImStartMoveResize XOR region
;
ScreenXorState	record
    SXS_IN_MOVE_RESIZE:1
ScreenXorState	end


PtrStatus	record
	PS_HIDING_PTR:1
	; Set if in the middle of a hide/show pair

	:7
PtrStatus	end


;------------------------------------------------------------------------------
; Constants and structures used for screen saver support
;------------------------------------------------------------------------------



; Structure for screen saver state variables.
; The count is a count of minutes from the time of the last user input to
; the time the screen is blanked.  The OD and method fields can be set
; by an application to provide an alternate screen blanking feature.  The
; default action is to disable the video output on all active screens, but
; if an OD and method are provided, the method will be sent to the OD
; instead.  Ther timerHan field holds the timer handle returned by TimerStart.

;
; Changed SS_maxCount and SS_curCount to be in terms of 15 seconds, to improve
; the granularity of the screen saving (now, if you want the screen saver to
; save after 1 minute of idle time, it will blank the screen in *at most*
; 1 minute and 15 seconds of idle time, instead of the up-to-two-minutes value
; from before). 9/20/93 - atw
;

INTERVAL_BETWEEN_SCREEN_SAVER_COUNTDOWN_EVENTS	equ	15*60
ScreenSaver     struct
    SS_state		ScrSaverState
    SS_timerHan         hptr
    SS_timerID          word
    SS_maxCount         word
    SS_curCount         word
    SS_OD               optr
    SS_beginMethod      word
    SS_endMethod        word
ScreenSaver     ends


;------------------------------------------------------------------------------
; Ptr Image
;------------------------------------------------------------------------------

; Info necessary to store a reference to a mouse ptr image.  Holds:
; 	handle:chunk 	- pointer to PointerDef, or
;			   0:xx  to indicate no pointer requested, or
;			  -1:xx to indicate default pointer should be used.
;
PtrImage	struct
	PI_ptr		optr.PointerDef	; optr to PointerDef
PtrImage	ends


;------------------------------------------------------------------------------
; Pen/Ink stuff
;------------------------------------------------------------------------------

;
;	States used by the simple Ink-collection finite-state-machine.
;

InkCollectionState	etype	word, 0, 2
	ICS_SKIP_UNTIL_START_SELECT			enum InkCollectionState
	; Monitor does nothing until START_SELECT is received. When one
	; comes in, it stores it, then it goes to the COLLECT_UNTIL_END_SELECT
	; state.

	ICS_COLLECT_UNTIL_END_SELECT			enum InkCollectionState
	; Monitor stores all input events until an END_SELECT is received.
	; Then it returns to the SKIP_UNTIL_START_SELECT state. 

	ICS_COLLECT_AND_DRAW_UNTIL_END_SELECT		enum InkCollectionState
	; This state is reached after the UI has confirmed that we are
	; collecting ink. We collect points and draw them until we receive
	; an END_SELECT. When an END_SELECT is received, we store it, start
	; a timeout timer, and go to the COLLECT_AFTER_START_SELECT state.

	ICS_COLLECT_AND_DRAW_AFTER_START_SELECT		enum InkCollectionState
	; When a START_SELECT comes in in this state, we store it,
	; kill the timeout, and go to the COLLECT_AND_DRAW_UNTIL_END_SELECT
	; state

	ICS_EAT_EVENTS_UNTIL_END_SELECT			enum InkCollectionState
	; We enter this mode when we have filled up our point buffer on a
	; start select, and we want to eat incoming events while we wait for
	; the UI to respond to some of our ink.

	ICS_SEND_INK_ON_END_SELECT			enum InkCollectionState
	; We enter this mode when we have filled up our point buffer while 
	; drawing ink. We stop drawing ink, and wait until the end select to
	; send the ink off.
	;

	ICS_JUST_SEND_INK				enum InkCollectionState
if INK_DIGITIZER_COORDS
	; Just sends the ink screen points notification off to the UI. 
	; This state is used ICS_SEND_INK_COORDS state to send the screen
	; points notification after it sends the digitizer coordinates
	; notification.
else
	; Just sends the ink off to the UI. This is used by the
	; ICS_SEND_INK_ON_END_SELECT state to allow the end select to continue
	; through before sending the ink off
endif

	ICS_SEND_CACHED_START_SELECT			enum InkCollectionState
	; This just sends the cached start select off.

	ICS_SEND_CLEAR					enum InkCollectionState
	; a stroke has been recognized as a gesture, so we want to
	; send a message to the flow object to clear it's state.

if INK_DIGITIZER_COORDS
	ICS_SEND_INK_COORDS				enum InkCollectionState
	; Sends the ink digitizer coordinates notification off to the UI
	; and then switches to the ICS_JUST_SEND_INK state to send 
	; the ink screen points notification.
	; This state is used by the ICS_SEND_INK_ON_END_SELECT state to 
	; allow the the end select to continue through before sending the
	; ink off.

	ICS_SEND_INK_AND_THEN_SEND_CACHED_START_SELECT	enum InkCollectionState
	; Sends the ink screen points notification off to the UI and
	; then switches to the ICS_SEND_CACHED_START_SELECT state to 
	; send the cached start select.
endif

CircularBufferStruct	struct
	CBS_count	word
	; The # items in the circular buffer

	CBS_start	word
	; The first item in the circular buffer

	CBS_last	word
	; Where to store the next item

	CBS_data	label	Point

CircularBufferStruct	ends

MAX_INK_POINTS	equ	500
TOTAL_MAX_INK_POINTS	equ	7000
INK_DATA_BUFFER_SIZE	equ	(MAX_INK_POINTS*4) + size CircularBufferStruct

if INK_DIGITIZER_COORDS
; Total number of ink coords that can be stored in an ink digitizer
; coordinates notification block
; It should be something that we can reasonably expect to allocate.
; block size = (TOTAL_MAX_INK_COORDS * size InkPoint) + 
;	       size InkDigitizerCoordsHeader
TOTAL_MAX_INK_COORDS	equ	7000
endif
