COMMENT }-----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Heap
FILE:		heapConstant.def

AUTHOR:		Tony Requist

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	4/88		Initial version

DESCRIPTION:
	This file contains constants local to the heap module.

	$Id: heapConstant.def,v 1.1 97/04/05 01:14:01 newdeal Exp $

-------------------------------------------------------------------------------}
;------------------------------------------------------------------------------
;		Structure of ThrowOutBlocks' data structure
;------------------------------------------------------------------------------

ThrowOutBlock	struct
    TOB_handle	hptr
    TOB_score	word
ThrowOutBlock	ends

;------------------------------------------------------------------------------
;		Swap Driver constants
;------------------------------------------------------------------------------
SwapDriver	struct
    SD_speed	SwapSpeed		; Speed of the swap device
    SD_flags	SwapDriverFlags		; Status of the device
    SD_strategy	fptr.far		; Strategy routine for the driver
SwapDriver	ends

MAX_SWAP_DRIVERS	= 4

;------------------------------------------------------------------------------
;		Other constants
;------------------------------------------------------------------------------
if 	IDLE_UPDATE_ASYNC_VM

SCRUB_STACK_SIZE	= 1024		; need a bunch of room for VMUpdate,
					;  which can require more than 300
					;  bytes just to do a VMVerifyFileHeader
					;  (ec) when it needs to swap stuff
					;  out...

else

SCRUB_STACK_SIZE	= 400		; was 200, but int 13h BIOS on poqet
					;  uses enough stack space to overflow
					;  that, with dire results.

endif	; IDLE_UPDATE_ASYNC_VM

SCRUB_TIMEOUT		= 60 * INTERRUPT_RATE	; Wake up every minute to
						;  incrementally compact the
						;  heap.
HEAP_EXTRA_LOCKED_SIZE	= (8*1024) shr 4; Extra stuff to throw out if
					;  there's a block locked above
					;  the fixed heap.

HEAP_LOW_MEM_SIZE	= 384 * 1024	; If the initial free space on the
					;  heap is less than this, we up the
					;  priority of the scrub thread.

	; minimum interval between notifying the user that there aren't
	; many handles left. For now, this is 30 seconds
LOW_HANDLE_NOTIFICATION_INTERVAL = 30 * INTERRUPT_RATE

	; minimum interval between notifying the user that s/he's out of
	; swap space. 30 seconds, for now. 
SWAP_FULL_NOTIFICATION_INTERVAL = 30 * INTERRUPT_RATE

NORMAL_SWAP_PENALTY	= 60		; Amount to penalize blocks that have
					; to be swapped (cannot be discarded).
					; This is added to the score of
					; discardable blocks to compensate for
					; this penalty being applied by Father
					; Time when swapping blocks to disk.

MIN_SPACE_FOR_INITIAL_COMPACTION = 40000/16	;Minimum heap free space to
						;bother compacting for

MIN_SPACE_TO_THROW_OUT = 40000/16	; Minimum paragraphs to throw out of
					; memory at a time

AGE_TO_ALWAYS_LMEM_COMPACT = 10*60	; If an lmem block is over this age
					; then *always* compact it

AGE_TO_LMEM_COMPACT_IF_12_FREE = 6*60	; If an lmem block is over this age
					; then compact if more then 12% free

AGE_TO_LMEM_COMPACT_IF_25_FREE = 2*60	; If an lmem block is over this age
					; then compact if more then 25% free
		; If the block is younger than this then it is only compacted
		; if it is more than 50% free

MIN_FREE_HANDLES =	10	;number of handles that must be around to handle
				; an error condition.

NUMBER_OF_ALLOCATION_RETRIES =	100	;Number of time to retry calling
					;FindFree before returning/reporting
					;an error
ALLOCATION_RETRY_WAIT_TIME =	20	;Time (in ticks) to wait between
					;retries

TOB_ARRAY_SIZE	=	15	;number of blocks to find each time we scan
				;the heap looking for oldest blocks

RESPONDER_DISPLAY_SYS_NOTIFY_HANDLE_THRESHOLD equ 25
; Number of handles at which time responder starts complaining to the user
; about low handles.  Basicly at this point the only thing the user can do
; is reboot.

