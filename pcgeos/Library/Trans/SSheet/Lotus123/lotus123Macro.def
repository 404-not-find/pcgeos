COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Translation/Lotus123
FILE:		importMacro.def

AUTHOR:		Cassie Hartzong, Mar 20, 1993

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Cassie	3/20/93		Initial revision


DESCRIPTION:
	Macros used in importing Lotus 123 files.
		
	$Id: lotus123Macro.def,v 1.1 97/04/07 11:42:00 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		ImportStos
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Macros that check whether the store will write past
		the end of the buffer, and if so, store the error
		function instead.

PASS:		ax  for ImportStosw
		al, for ImportStosb

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	The buffer in es is allocated to hold a CellFormula structure
	and up to CELL_MAX_FORMULA bytes of data.  Since the offsets are 
	numbered from 0, the last byte can be stored at offset 
	CELL_FORMULA_BUFFER_SIZE-1, and the last word at -2.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	cassie	3/22/93		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

ImportStosb	macro 
	local	okay
	local	done

	cmp	di, CELL_FORMULA_BUFFER_SIZE - 1
	jbe	okay

	call	ImportStoreErrFunction
	stc
	jmp	done

okay:
	stosb
	clc	
done:
endm	



ImportStosw	macro	reg
	local	okay

	cmp	di, CELL_FORMULA_BUFFER_SIZE - 2
	jbe	okay
	call	ImportStoreErrFunction
	stc
	jmp	done

okay:
	stosw	
	clc
done:
endm	

ImportRepMovsb	macro	len
	local	done
	local	okay

	push	ax, cx
	mov	ax, di
	add	ax, len
	cmp	ax, CELL_FORMULA_BUFFER_SIZE
	jb	okay
	call	ImportStoreErrFunction
	jmp	done
okay:
	mov	cx, len
	rep	movsb
done:
	pop	ax, cx
endm



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		CheckSize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Check if there is enough room in the buffer at es:di
		to store size bytes.

PASS:		size	- number of bytes to be stored
		reg	- trash register

PSEUDO CODE/STRATEGY:

KNOWN BUGS/SIDE EFFECTS/IDEAS:

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	cassie	3/29/93		Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

CheckSize	macro	size, reg
	local	okay
	local	done

EC <	cmp	size, EXPORT_STACK_FRAME_BUF_SIZE >
EC <	ERROR_A	IMPEX_BUFFER_OVERFLOW		     >

	; 
	; get the starting offset of the buffer
	;
	lea	reg, locals.ESF_data

	; 
	; calculate the ending offset, saving room for the 1-byte
	; Lotus function return token.
	;
	add	reg, EXPORT_STACK_FRAME_BUF_SIZE-1	

	; 
	; subtract the desired size from the end offset, to get
	; the maximum offset at which 'size' bytes can be copied
	; into the buffer without overflowing it.
	;
	sub	reg, size

	; 
	; is the current offset below the maximum allowable?
	;
	cmp	di, reg		; carry clear if di >= ax
	cmc			; carry set if overflow
endm
