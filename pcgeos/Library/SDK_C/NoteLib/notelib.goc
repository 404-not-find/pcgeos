/***********************************************************************
 *
 *      Copyright (c) Geoworks 1996 -- All Rights Reserved
 *
 * PROJECT:       GEOS
 * MODULE:        NoteLib (Sample Goc library)
 * FILE:          goclib.goc
 *
 * AUTHOR:        EBallot: July 1996
 *
 * REVISION HISTORY:
 *      Date      Name      Description
 *      ----      ----      -----------
 *      7/3/96    ED       Initial version
 *
 * DESCRIPTION:
 * This library illustrates the basics of creating a "note" object (contains
 * both text and ink input and storage abilities).  The library does this by
 * providing a NotepadClass object, which is a subclass of a GenViewClass.
 * An object of NotepadClass must subscribe to the MGCNLT_APP_STARTUP gcn
 * list.  This will allow the notepad object to get "initialization"
 * notification via MSG_META_APP_STARTUP so it can automatically build out
 * its vis linkages (VisContent with VisText and Ink children).
 *
 * To implement the NotepadClass, this library contains a template resource
 * which contains a VisContent with a VisText and Ink object as children.
 * Since the NotepadClass is a subclass of GenView, objects of NotepadClass
 * can simply duplicate the templant and attach the duplicated resource. This
 * is done in MSG_META_APP_STARTUP.
 *
 * To compile this, or any Goc library, do the following:
 *     1/ mkmf
 *          Makes the makefile, of course.
 *     2/ pmake depend
 *     3/ pmake lib
 *          Creates the *.ldf file (library definition file),
 *          and copies it to Include\LDF , so that it can
 *          be linked in when other geodes use the library.
 *
 *  $Id: notelib.goc,v 1.1 97/04/07 10:44:00 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *              Include files
 ***************************************************************************
 */
@include <stdapp.goh>
#include <object.h>     /* for _ClassStruct, used in geos.h */
@include <SDK_C/notelib.goh> /* This library's class and structure defs */

/*
 * Classdecl notepad so we can declare messages for it.
 */
@classdecl	NotepadClass;

/*
 ***************************************************************************
 *              Internal class definitions
 ***************************************************************************
 */
/* none for now */

/*
 ***************************************************************************
 *              Template resource
 *    This resource contains a template of the content, text and ink
 *    objects that the NotepadClass object will use.  It will copy them
 *    with ObjDuplicateResource() and attach the copy to the NotepadClass
 *    object that resides in the application.
 *    Note that the resource must be marked notDetachable because we don't
 *    want the template resource getting saved to state.
 ***************************************************************************
 */
@start NotepadTemplate, notDetachable;

/* For simplicity, I am forcing all the objects to be 240 by 240. */
@object VisContentClass NotepadContent = {
	 VI_bounds = {0,0, 240, 240};
	 VCI_comp = @NotepadInk, @NotepadText;
	 /*
	  * Custom manage because we need the ink and text layers to overlap.
	  * If Geometry manager had it's way, one child would be at 0,0 - 240,240
	  * and the other would be at 0,240 - 480,240
	  */
	 VCI_geoAttrs = (@default) | VCGA_CUSTOM_MANAGE_CHILDREN;
}

@object VisTextClass NotepadText = {
	 VI_bounds = {0,0, 240, 240};
	 VTI_text = "";
	 /*
	  * Make sure the text object is editable and selectable so that the
	  * user can interact with the text.  Targetable is necessary so
	  * future controllers can work on the text object (controllers send
	  * messages TO_TARGET unless a specific object is designated).
	  */
	 VTI_state = (@default) | VTS_EDITABLE | VTS_SELECTABLE | VTS_TARGETABLE;

	 /*
	  * The optFlags determine what parts of the object need
	  * to be updated. Because this object isn't managed by the
	  * geometry manager, we must clear VOF_GEOMETRY_INVALID.
	  */
	 VI_optFlags = (@default) & ~VOF_GEOMETRY_INVALID;
}

@object InkClass NotepadInk = {
	 VI_bounds = {0,0, 240, 240};
}

@end NotepadTemplate;



/*
 ***************************************************************************
 *              NotepadClass methods
 ***************************************************************************
 */
/***********************************************************************
 *		MSG_META_APP_STARTUP for NotepadClass
 ***********************************************************************
 * SYNOPSIS:       Duplicate the resource and attach it to the NotepadClass
 *                 object
 * PARAMETERS:     void (MemHandle appLaunchBlock)
 * SIDE EFFECTS:   builds out the content, text, and ink objects
 *
 * STRATEGY:       This message can be used to perform initialization
 *                 because it is received before the notepad object is
 *                 vis_opened.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ed 	7/96		Initial Version
 *
 ***********************************************************************/
@method NotepadClass, MSG_META_APP_STARTUP
{
	 MemHandle newBlock;

	 @callsuper();

	 /*
	  * copy the template of library objects so that the application
	  * can use the copy.
	  */
	 newBlock = ObjDuplicateResource(OptrToHandle(@NotepadContent),0,0);

	 /*
	  * Connect the vis stuff to the app's NotepadClass object's vis linkage.
	  * Since the chunk part of the optr doesn't change (because the objects
	  * are still in the same relative order within the resource), we can
	  * construct optrs to the objects by using the MemHandle of the new
	  * block and the original ChunkHandles.
	  */
	 @call self::MSG_GEN_VIEW_SET_CONTENT(ConstructOptr(newBlock,
														  OptrToChunk(@NotepadContent)));

	 /*
	  * Make sure that the notepad's text object gets the focus so keyboard
	  * events will be sent to it.  Since the NotepadClass has GVI_inkType
	  * set to GVIT_PRESSES_ARE_INK, mouse/pen messages will be sent to the
	  * ink object.
	  */
	 @send, forceQueue ConstructOptr(newBlock, OptrToChunk(@NotepadText))::
										 MSG_META_GRAB_FOCUS_EXCL();

	 /*
	  * Set up the undo system which the ink object uses.  It doesn't
	  * really matter what number you use for the context, so I use '1'.
	  */
	 @send process::MSG_GEN_PROCESS_UNDO_SET_CONTEXT(1);
}



/***********************************************************************
 *		MSG_META_APP_SHUTDOWN for NotepadClass
 ***********************************************************************
 * SYNOPSIS:       just @callsuper to let system do its thing
 * PARAMETERS:     void (word callerID, optr caller)
 * SIDE EFFECTS:
 *
 * STRATEGY:       This message could be used to grab any current data
 *                 in the text and ink and save it to a temporary file.
 *                 The MSG_META_APP_STARTUP would have to be in on this
 *                 since it would have to load the data whenever the app
 *                 restarted.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ed 	7/96		Initial Version
 *
 ***********************************************************************/
@method NotepadClass, MSG_META_APP_SHUTDOWN
{
	 @callsuper();
}

/* These messages would be sent if the notepad class object were put
 * on the GAGCNLT_STARTUP_LOAD_OPTIONS gcnlist.
@extern method NotepadClass, MSG_META_LOAD_OPTIONS
{
}
@extern method NotepadClass, MSG_META_SAVE_OPTIONS
{
}*/




