/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		thread.goc

AUTHOR:		Paul DuBois, Aug 10, 1993

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dubois	8/10/93   	Initial version.

DESCRIPTION:
	This file contains the C code for the calculation thread

	$Id: thread.goc,v 1.1 97/04/07 12:04:27 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>
#include <sem.h>
#include <geoworks.h>
#include <string.h>

@include <SDK_C/mset.goh>
@include <Objects/SDK_C/msetC.goh>

#include <msFatErr.h>
#include <ec.h>


/***********************************************************************
 *				MSCalcThread
 ***********************************************************************
 * SYNOPSIS:	    Main function for calculation thread
 * CALLED BY:	    MSG_MSET_SPAWN
 * RETURN:	    No
 * SIDE EFFECTS:
 *	Frees the block of memory that was passed in
 *	Calculates points in the Mandelbrot set into the VM file.
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/10/93   	Initial Revision
 *
 ***********************************************************************/
word
MSCalcThread (MemHandle threadInfoH)
{
    MSetThreadInfo	threadInfo;
    MSetThreadInfo*	threadInfoP;

    MemHandle		msetParamsH;
    MSetParameters*	msetParamsP;

    SemaphoreHandle	commandSemaphore;
    MSetThreadCommand	theCommand;
    

/*
 *	Extract info from the passed block, so we don't have to deal with
 *	locking and unlocking it whenever we want something.  Note that we
 *	don't have to unlock the block before freeing it.
 */
    threadInfoP = MemLock(threadInfoH);
    memcpy(&threadInfo, threadInfoP, (sizeof threadInfo));
    MemFree(threadInfoH);

/*
 *	Main "message" loop.
 */
    while (1) {

	msetParamsP = VMLock(threadInfo.MSTI_vmFile,
			     threadInfo.MSTI_vmBlock,
			     &msetParamsH);
	theCommand = msetParamsP->MSP_threadCommand;

	if (theCommand == MSTC_noChange) {	/* Handle common case first */
	    VMUnlock(msetParamsH);
	    continue;
	}

	msetParamsP->MSP_threadCommand = MSTC_noChange;
	ThreadVSem(msetParamsP->MSP_commandSem);
	VMDirty(msetParamsH);
	VMUnlock(msetParamsH);

	switch (theCommand)
	{
	case MSTC_restart:
	    @send threadInfo.MSTI_spawningObject::MSG_MSET_TEST(C_BLUE);
	    /*	FIXME: fill in restart code	*/
	    continue;

	case MSTC_exit:
	    /*
	     * Exit, but don't send out a MSG_META_ACK because the MSet
	     * isn't expecting one.
	     */

	    @send threadInfo.MSTI_spawningObject::MSG_MSET_TEST(C_RED);
	    ThreadDestroy(0, 0, 0);
	    break;

	case MSTC_detach:
	    /*
	     * Exit, sending a MSG_META_ACK to the MSet because we're in the
	     * middle of a detach
	     */

	    ThreadDestroy(0, threadInfo.MSTI_spawningObject, 0);
	    continue;

	default:
	case MSTC_noChange:
	    EC_ERROR(ERROR_MESSAGE_FALL_THROUGH);
	    continue;
	}
	break;
    }

    return	0;
}	/* End of MSCalcThread.	*/


/***********************************************************************
 *		MSThreadCommand
 ***********************************************************************
 * SYNOPSIS:	"Send" a command to the thread
 * CALLED BY:	Method handler of MSet which "owns" the thread.
 *		Note that the optr is assumed to be in a locked block!
 * RETURN:	    void
 * SIDE EFFECTS:
 *	Might block if the thread already has a message in its "queue".
 *
 * STRATEGY:
 *	The invariant is:
 *	  The thread's semaphore is grabbed if there is a message waiting.
 *	
 *	Note that we grab the semaphore but do not release it -- the thread
 *	will release it once it has acknowledged the message.  FIXME: add
 *	some EC code to make sure that MSP_threadCommand is always
 *	MSTC_noChange right before we set it.  If it isn't MSTC_noChange, we
 *	should not have been able to grab the semaphore.
 *	
 *	The naming of the object and instance pointer might not be standard
 *	-- check this out.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	dubois	8/16/93   	Initial Revision
 *
 ***********************************************************************/
void
MSThreadCommand (optr oself, MSetThreadCommand theCommand)
{
    MSetInstance*	pself;
    MemHandle		msetParamsH;
    MSetParameters*	msetParamsP;
    SemaphoreHandle	commandSem;

    pself = ObjDerefGen(oself);
    msetParamsP = (MSetParameters*) VMLock(pself->MSI_vmFile, 
					   pself->MSI_msetVMBlock,
					   &msetParamsH);
    commandSem = msetParamsP->MSP_commandSem;
    ThreadVSem(commandSem);
    ThreadPSem(commandSem);
    VMUnlock(msetParamsH);

    /*
     *	Try not to leave anything locked around a call that might block
     */
    ThreadPSem(commandSem);
    
    /*
     *	"Send" the command to the thread by placing it into the block of
     *	memory that they share.  We know that since we were able to grab the
     *	semaphore, a command isn't already there.
     */
    msetParamsP = (MSetParameters*) VMLock(pself->MSI_vmFile, 
					   pself->MSI_msetVMBlock,
					   &msetParamsH);
    msetParamsP->MSP_threadCommand = theCommand;
    VMDirty(msetParamsH);
    VMUnlock(msetParamsH);

}	/* End of MSThreadCommand.	*/
