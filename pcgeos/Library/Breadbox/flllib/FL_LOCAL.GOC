/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 */

/***************************************************************************
 *  FILE:  FL_LOCAL.GOC
 ***************************************************************************/

@include <stdapp.goh>
@include <Ansi\string.h>
@include <Ansi\stdio.h>
@include <geoMisc.h>
@include <Objects\filelist.goh>

@include "internal.goh"

@extern object FileListUIList ;

/**************************************************************************
 * Class Definition:  GenLocalFileListClass
 **************************************************************************/

@classdecl GenLocalFileListClass ;

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_SETUP
 *-------------------------------------------------------------------------
 | Description:
 |     Set the default directory to be the document directory.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  ??/??/99  Created
 |
 | Last tested:  10/13/99
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_FILE_LIST_SETUP
{
    @callsuper() ;

    /* Setting the default location */
    @call oself::MSG_GEN_FILE_LIST_SET_PATH("Document:\\") ;
}

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_RELOAD
 *-------------------------------------------------------------------------
 | Description:
 |     Intercept to do the actual dirty work of finding and adding all
 |     the files in the list.  The currently stored path is used here.
 |
 |     Caveat:  Make sure you mark the reload flag if in suspend mode.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  ??/??/99  Created
 |
 | Last tested:  10/13/99
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_FILE_LIST_RELOAD
{
    FileEnumParams  FF;
    MemHandle fileBuffer = NullHandle;
    T_volumeID volume ;
    char path[500] ;
    typedef struct {
        FileLongName name ;
        dword size ;
        FileDateAndTime modified ;
        FileAttrs type ;
    } T_localFileEntry ;
    static FileExtAttrDesc filterList[] = {
        { FEA_NAME, (void *)offsetof(T_localFileEntry, name), sizeof(FileLongName), NULL },
        { FEA_SIZE, (void *)offsetof(T_localFileEntry, size), sizeof(dword), NULL },
        { FEA_MODIFICATION, (void *)offsetof(T_localFileEntry, modified), sizeof(FileDateAndTime), NULL },
        { FEA_FILE_ATTR, (void *)offsetof(T_localFileEntry, type), sizeof(FileAttrs), NULL },
        { FEA_END_OF_LIST, 0, 0, NULL}
    };
    word numFilesProcessed = 0 ;
    word numFilesNotHandled = 0 ;
    word numFilesReturned ;
    T_localFileEntry *p_file ;
    DiskHandle disk ;

    @call oself::MSG_GEN_FILE_LIST_MARK_RELOAD_STARTED() ;

    /* Don't do if we are suspended */
    if (pself->GFLI_suspendCount)  {
        pself->GFLI_suspendFlags |= GEN_FILE_LIST_SUSPEND_RELOAD_PENDING ;
    } else {
        FilePushDir() ;
        volume = @call oself::MSG_GEN_FILE_LIST_GET_PATH(path, sizeof(path)) ;
        if (volume & 0x8000)  {
            disk = volume & 0x7FFF ;
        } else {
            disk = DiskRegisterDisk(volume) ;
        }
        FileSetCurrentPath(disk, path) ;

        @callsuper() ;

        @call oself::MSG_META_SUSPEND() ;

        do {
            FF.FEP_searchFlags = FESF_NON_GEOS |
                                 FESF_GEOS_EXECS |
                                 FESF_GEOS_NON_EXECS |
                                 FESF_DIRS ;
            FF.FEP_returnAttrs = &(filterList[0]) ;
            FF.FEP_returnSize = sizeof(T_localFileEntry);
            FF.FEP_matchAttrs = NullHandle;
            FF.FEP_bufSize = 50 ;
            FF.FEP_skipCount = numFilesProcessed;
            FF.FEP_callback = NULL ;
            FF.FEP_callbackAttrs = NullHandle ;
            FF.FEP_headerSize = 0 ;
            FF.FEP_cbData1 = 0 ;
            FF.FEP_cbData2 = 0 ;

            /* Search the current directory based on the above input
               parameters. */
            numFilesProcessed += 
                FileEnum(
                   &FF, 
                   &fileBuffer, 
                   &numFilesNotHandled) ;

            /* If we have a block returned, figure out how many entries are
               in that block.  If the block was not returned, then we must
               have zero entries. */
            if (fileBuffer != NullHandle)  {
                numFilesReturned = (MemGetInfo(fileBuffer, MGIT_SIZE)/
                                      FF.FEP_returnSize) ;
            } else {
                numFilesReturned = 0 ;
            }

            if (numFilesReturned)  {
                p_file = MemLock(fileBuffer) ;
                while (numFilesReturned--)  {
                    @call oself::MSG_GEN_FILE_LIST_APPEND(
                        p_file->name,
                        p_file->size,
                        p_file->modified,
                        (p_file->type&FA_SUBDIR)?TRUE:FALSE) ;
                    p_file++ ;
//                    numFilesProcessed++ ; 
                }
                MemUnlock(fileBuffer) ;

                /* Done with the block */
                MemFree(fileBuffer) ;
            }
        } while (numFilesNotHandled) ;

        FilePopDir() ;
        @call oself::MSG_META_UNSUSPEND() ;
        @call oself::MSG_GEN_FILE_LIST_MARK_RELOAD_ENDED() ;
        @send ,forceQueue oself::MSG_GEN_FILE_LIST_UPDATE_FOCUS() ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_CREATE_VOLUMES
 *-------------------------------------------------------------------------
 | Description:
 |     Creates all the volume structures with Document first and the rest
 |     as the letters of the available drives.  If the volume has a name,
 |     it is put in bracket's next to it.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/05/99  Created
 |
 | Last tested:  10/13/99
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_FILE_LIST_CREATE_VOLUMES
{
    char name[4] ;
    char nameD[80] ;
    word i ;
    DiskHandle disk ;
    word flags ;

    @callsuper() ;
    @call oself::MSG_GEN_FILE_LIST_APPEND_VOLUME(
              0x8000 | SP_DOCUMENT, 
              "Document", 
              "Document") ;
    pself = ObjDerefGen(oself) ;
    for (i=0; i<26; i++)  {
        if ((flags = DriveGetStatus(i)) & DS_PRESENT)  {
            name[0] = i+'A' ;
            name[1] = '\0' ;

            nameD[0] = i+'A' ;
            nameD[1] = ':' ;
            disk = NullHandle ;
            if (!(flags & DS_MEDIA_REMOVABLE))
                 disk = DiskRegisterDiskSilently(i) ;
                 
            if (disk)  {
                nameD[2] = ' ' ;
                nameD[3] = '[' ;
                DiskGetVolumeName(disk, nameD+4) ;
                strcat(nameD, "]") ;
            } else {
                nameD[2] = '\0' ;
            }
            @call oself::MSG_GEN_FILE_LIST_APPEND_VOLUME(i, name, nameD) ;
            pself = ObjDerefGen(oself) ;
        }
    }
    @call oself::MSG_GEN_FILE_LIST_SELECT_VOLUME(0x8000 | SP_DOCUMENT) ;
}

/*-------------------------------------------------------------------------
 | Method:  GenFileListClass::MSG_GEN_FILE_LIST_PARSE_PATH
 *-------------------------------------------------------------------------
 | Description:
 |     Intercept this message to ensure that any parsed paths that contain
 |     a volume also force a root access.
 |
 | Inputs:
 |     char *p_path               -- Path to parse
 |
 | Outputs:
 |     DirPathHandle           -- Path that was parsed.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/13/99  Created
 |
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_FILE_LIST_PARSE_PATH
{
    DirPathHandle path ;

    /* If the user enters a volume name, ensure that we force the user */
    /* to go to root.  This avoids a crashing problem with FileSetCurrentPath */
    /* plus, we don't remember the other drive's current path */
    path = @callsuper() ;
    if (DirPathGetVolume(path))  {
        DirPathMakeRoot(path) ;
    }
    
    return path ;
}

/*-------------------------------------------------------------------------
 | Method:  GenLocalFileListClass::MSG_GEN_FILE_LIST_VALIDATE_PATH
 *-------------------------------------------------------------------------
 | Description:
 |    This method is given a parsed path.  The method's job is to check
 |    that the path is correct and if so, call ACCEPT_DENY or DENY_PATH.
 |    Either one MUST be called.
 |    This method is usally handled by the sub-class.
 |    The current default is always to accept.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  10/08/99  Created
 |
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_FILE_LIST_VALIDATE_PATH
{
    T_volumeID volume ;
    optr volumeName ;
    Boolean accepted = FALSE ;
    char constructedPath[500] ;
    DiskHandle disk ;
    Boolean reportedError = FALSE ;

    /* Determine the volume id */
    volumeName = DirPathGetVolume(path) ;
    MemLock(OptrToHandle(volumeName)) ;
    volume = @call oself::MSG_GEN_FILE_LIST_MAP_VOLUME_NAME(
                    LMemDerefHandles(OptrToHandle(volumeName), volumeName)) ;
    MemUnlock(OptrToHandle(volumeName)) ;

    /* First, we must recognize the volume */
    if (volume != VOLUME_ID_BAD)  {
        /* Second, we need to actually try out the parsed path.  This is */
        /* best done (for files) by contructing the path and attempting */
        /* to actually go there */
        FilePushDir() ;
        DirPathConstructString(
            path,
            constructedPath, 
            sizeof(constructedPath)-1,
            pself->GFLI_parseVolume,
            pself->GFLI_parseDivider,
            pself->GFLI_parseRoot,
            FALSE,
            FALSE) ;

        if (volume & 0x8000)  {
            disk = volume & 0x7FFF ;
        } else {
            disk = DiskRegisterDiskSilently(volume) ;
        }
        if (disk == NullHandle)  {
            if (!reportedError)  {
                @call oself::MSG_GEN_FILE_LIST_REPORT_STANDARD_ERROR(
                          GEN_FILE_LIST_ERROR_DRIVE_NOT_READY,
                          volumeName) ;
                reportedError = TRUE ;
            }
        } else {
            if (FileSetCurrentPath(disk, constructedPath))
                accepted = TRUE ;
        }
        FilePopDir() ;
    } else {
        if (!reportedError)  {
            @call oself::MSG_GEN_FILE_LIST_REPORT_STANDARD_ERROR(
                      GEN_FILE_LIST_ERROR_BAD_VOLUME,
                      volumeName) ;
            reportedError = TRUE ;
        }
    }

    if (accepted)  {
        @send ,forceQueue oself::MSG_GEN_FILE_LIST_ACCEPT_PATH(path, volume) ;
    } else {
        if (!reportedError)  {
            @call oself::MSG_GEN_FILE_LIST_REPORT_STANDARD_ERROR(
                      GEN_FILE_LIST_ERROR_BAD_PATH,
                      NullHandle) ;
        }
        @send ,forceQueue oself::MSG_GEN_FILE_LIST_DENY_PATH(path) ;
    }
}

/*-------------------------------------------------------------------------
 | Method:  GenLocalFileListClass::MSG_GEN_FILE_LIST_GET_DISK_HANDLE
 *-------------------------------------------------------------------------
 | Description:
 |    Constructs a disk handle for the current directory being viewed.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/01/99  Created
 |
 *-----------------------------------------------------------------------*/
@method GenLocalFileListClass, MSG_GEN_LOCAL_FILE_LIST_GET_DISK_HANDLE
{
    DiskHandle disk ;
    word volume ;

    volume = pself->GFLI_volume ;
    if (volume & 0x8000)  {
        disk = volume & 0x7FFF ;
    } else {
        disk = DiskRegisterDisk(volume) ;
    }

    return disk ;
}

/***************************************************************************
 *  END OF FILE:  FL_LOCAL.GOC
 ***************************************************************************/

