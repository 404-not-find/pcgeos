@include <ibdll.goh>

/* The header to the whole linked list */
typedef struct {
    IBDLLItem ILH_first ;
    IBDLLItem ILH_last ;
    dword ILH_count ;
    IBDLLHeaderData ILH_headerData ;
} IBDLLListHeader ;

/* A single item in the linked list: */
typedef struct {
    IBDLLItem ILN_prev ;
    IBDLLItem ILN_next ;
    IBDLLData ILN_data ;
    IBDLLUserFlags ILN_flags ;
} IBDLLListNode ;

/* Special macros to repeat code with out doing function calls */
#define IBDLL_LIST_START     IBDLLListHeader *p_header = NULL ;       \
                             if (list)  {                             \
                                 p_header = IBMSLock(memory, list) ;  \
                                 if (p_header)  {

#define IBDLL_LIST_END               IBMSUnlock(memory, p_header) ;   \
                                 }                                    \
                             }

#define IBDLL_ITEM_START     IBDLLListNode *p_item   = NULL ;       \
                             if (item)  {                             \
                                 p_item   = IBMSLock(memory, item) ;  \
                                 if (p_item  )  {

#define IBDLL_ITEM_END               IBMSUnlock(memory, p_item  ) ;   \
                                 }                                    \
                             }

/*-------------------------------------------------------------------------*/
/* Function to create a new list in an existing Index Based Memory System */
IBDLLList IBDLLCreate(IBMSHandle memory, IBDLLHeaderData data)
{
    IBDLLList list = IBDLL_LIST_BAD ;
    IBDLLListHeader *p_header ;

    /* Allocate the header block for the linked list */
    list = IBMSAlloc(memory, sizeof(IBDLLListHeader)) ;
    if (list)  {
        /* Initialize the data to that of an empty list */
        p_header = IBMSLock(memory, list) ;
        p_header->ILH_first = IBDLL_ITEM_BAD ;
        p_header->ILH_last = IBDLL_ITEM_BAD ;
        p_header->ILH_count = 0 ;
        p_header->ILH_headerData = data ;
        IBMSDirty(p_header) ;
        IBMSUnlock(memory, p_header) ;
    }

    return list ;
}

/*-------------------------------------------------------------------------*/
/* Destroy a previously created list */
void IBDLLDestroy(IBMSHandle memory, IBDLLList list)
{
    IBDLLItem item ;

    /* Delete all the items in the list */
    item = IBDLLGetItem(memory, list, IBDLL_LOCATION_FIRST) ;
    while (item != IBDLL_ITEM_BAD)  {
        IBDLLItemDelete(memory, list, item) ;
        item = IBDLLGetItem(memory, list, IBDLL_LOCATION_FIRST) ;
    }

    /* Now delete the list item itself */
    IBMSFree(memory, list) ;
}

/*-------------------------------------------------------------------------*/
/* Insert an item before the given item in the list */
/* Pass IBDLL_ITEM_BAD if you want to append the item */
IBDLLItem IBDLLInsert(
              IBMSHandle memory,
              IBDLLList list,
              IBDLLData data,
              word userFlags,
              IBDLLItem insertBeforeThisItem)
{
    IBDLLItem newItem = IBDLL_ITEM_BAD ;
    IBDLLItem previousNode ;
    IBDLLItem nextNode ;
    IBDLLListNode *p_newNode ;
    IBDLLListNode *p_node ;
    IBDLLListHeader header ;
    Boolean locked = FALSE ;

    IBDLL_LIST_START ;
    header = *p_header ;
    locked = TRUE ;
    IBDLL_LIST_END ;

    if (locked)  {
        /* Create a new item and lock it in */
        newItem = IBMSAlloc(memory, sizeof(IBDLLListNode)) ;
        if (newItem)  {
            /* If no item declared, we are appending this item */
            p_newNode = IBMSLock(memory, newItem) ;
            if (p_newNode)  {
                /* Ok, the new node is here and locked */
                /* Let's determine our previous node */
                if (insertBeforeThisItem)  {
                    /* Being put before an item */
                    previousNode = IBDLLItemGetPrevious(
                                       memory,
                                       insertBeforeThisItem) ;
                    nextNode = insertBeforeThisItem ;
                } else {
                    /* Being put at the end */
                    previousNode = header.ILH_last ;
                    nextNode = IBDLL_ITEM_BAD ;
                }

                /* Now that we have identified who are partners are, let's */
                /* set out our node's data and link up everyone */
                p_newNode->ILN_prev = previousNode ;
                p_newNode->ILN_next = nextNode ;
                p_newNode->ILN_data = data ;
                p_newNode->ILN_flags = userFlags ;
                IBMSDirty(p_newNode) ;

                /* Fix up the previous link */
                if (previousNode)  {
                    p_node = IBMSLock(memory, previousNode) ;
                    p_node->ILN_next = newItem ;
                    IBMSDirty(p_node) ;
                    IBMSUnlock(memory, p_node) ;
                } else {
                    header.ILH_first = newItem ;
                }

                /* Fix up the next link */
                if (nextNode)  {
                    p_node = IBMSLock(memory, nextNode) ;
                    p_node->ILN_prev = newItem ;
                    IBMSDirty(p_node) ;
                    IBMSUnlock(memory, p_node) ;
                } else {
                    header.ILH_last = newItem ;
                }

                IBMSUnlock(memory, p_newNode) ;

                /* Note that we have added another item */
                header.ILH_count++ ;
                p_header = IBMSLock(memory, list) ;
                *p_header = header ;
                IBMSDirty(p_header) ;
                IBMSUnlock(memory, p_header) ;
            }
        }
    }

    return newItem ;
}

/*-------------------------------------------------------------------------*/
/* Delete an item out of the list */
void IBDLLItemDelete(IBMSHandle memory, IBDLLList list, IBDLLItem item)
{
    IBDLLListNode *p_item ;
    IBDLLListNode *p_node ;
    Boolean got = FALSE ;
    IBDLLListHeader header ;

    IBDLL_LIST_START ;
    got = TRUE ;
    header = *p_header ;
    IBDLL_LIST_END ;

    p_item = IBMSLock(memory, item) ;
    if (got)  {
        if (p_item)  {
            /* Fix up the previous links */
            if (p_item->ILN_prev)  {
                /* Previous item's next is our next now */
                p_node = IBMSLock(memory, p_item->ILN_prev) ;
                if (p_node)  {
                    p_node->ILN_next = p_item->ILN_next ;
                    IBMSDirty(p_node) ;
                    IBMSUnlock(memory, p_node) ;
                }
            } else {
                /* No previous item.  So make the first be our next */
                header.ILH_first = p_item->ILN_next ;
            }

            /* Fixup the next links */
            if (p_item->ILN_next)  {
                /* Next item's previous is our previous now */
                p_node = IBMSLock(memory, p_item->ILN_next) ;
                if (p_node)  {
                    p_node->ILN_prev = p_item->ILN_prev ;
                    IBMSDirty(p_node) ;
                    IBMSUnlock(memory, p_node) ;
                }
            } else {
                /* Next item doesn't exist.  Change the last item in list */
                header.ILH_last = p_item->ILN_prev ;
            }

            IBMSUnlock(memory, p_item) ;
            IBMSFree(memory, item) ;

            header.ILH_count-- ;

            /* Copy back the header */
            p_header = IBMSLock(memory, list) ;
            *p_header = header ;
            IBMSDirty(p_header) ;
            IBMSUnlock(memory, p_header) ;
        }
    }
}

/*-------------------------------------------------------------------------*/
/* Find a location in the list or use the above constants */
/* The last item is always returned unless the list is empty */
/* a value of IBDLL_ITEM_BAD means the list is empty */
IBDLLItem IBDLLGetItem(
              IBMSHandle memory,
              IBDLLList list,
              IBDLLLocation location)
{
    IBDLLItem item = IBDLL_ITEM_BAD ;
    IBDLLItem prevItem = IBDLL_ITEM_BAD ;

    /* Unfortunately, the only way to find the Nth position in a linked */
    /* list is to walk it. */
    IBDLL_LIST_START ;

    /* However, if the caller passed a special constant, fill in the data */
    /* quicker */
    if (location == IBDLL_LOCATION_FIRST)  {
        item = p_header->ILH_first ;
    } else if (location == IBDLL_LOCATION_LAST)  {
        item = p_header->ILH_last ;
    } else  {
        item = p_header->ILH_first ;
        while ((item != IBDLL_ITEM_BAD) && (location-- > 0))  {
            /* walk to the next one, recording the current one */
            prevItem = item ;
            item = IBDLLItemGetNext(memory, item) ;
        }

        /* Don't use the last item if its bad, back up one */
        if (item == IBDLL_ITEM_BAD)
            item = prevItem ;
    }

    IBDLL_LIST_END ;

    return item ;
}

/*-------------------------------------------------------------------------*/
/* Returns the number of items in the list */
dword IBDLLGetCount(IBMSHandle memory, IBDLLList list)
{
    dword count ;

    IBDLL_LIST_START ;

    count = p_header->ILH_count ;

    IBDLL_LIST_END ;

    return count ;
}

/*-------------------------------------------------------------------------*/
IBDLLHeaderData IBDLLGetHeaderData(IBMSHandle memory, IBDLLList list)
{
    IBDLLHeaderData data ;

    IBDLL_LIST_START ;
    data = p_header->ILH_headerData ;
    IBDLL_LIST_END ;

    return data ;
}

/*-------------------------------------------------------------------------*/
void IBDLLSetHeaderData(
         IBMSHandle memory,
         IBDLLList list,
         IBDLLHeaderData data)
{
    IBDLL_LIST_START ;
    p_header->ILH_headerData = data ;
    IBMSDirty(p_header) ;
    IBDLL_LIST_END ;
}

/*-------------------------------------------------------------------------*/
/* Routines to set and get the data attached to the list item */
IBDLLData IBDLLItemGetData(IBMSHandle memory, IBDLLItem item)
{
    IBDLLData data ;

    IBDLL_ITEM_START ;
    data = p_item->ILN_data ;
    IBDLL_ITEM_END ;

    return data ;
}

/*-------------------------------------------------------------------------*/
void IBDLLItemSetData(IBMSHandle memory, IBDLLItem item, IBDLLData data)
{
    IBDLL_ITEM_START ;
    p_item->ILN_data = data ;
    IBMSDirty(p_item) ;
    IBDLL_ITEM_END ;
}

/*-------------------------------------------------------------------------*/
/* Routines to set and get the user flags attached to the list item */
IBDLLUserFlags IBDLLItemGetFlags(IBMSHandle memory, IBDLLItem item)
{
    IBDLLUserFlags flags ;

    IBDLL_ITEM_START ;
    flags = p_item->ILN_flags ;
    IBDLL_ITEM_END ;

    return flags ;
}

/*-------------------------------------------------------------------------*/
void IBDLLItemSetFlags(
         IBMSHandle memory,
         IBDLLItem item,
         IBDLLUserFlags flags)
{
    IBDLL_ITEM_START ;
    p_item->ILN_flags = flags;
    IBMSDirty(p_item) ;
    IBDLL_ITEM_END ;
}


/*-------------------------------------------------------------------------*/
IBDLLItem IBDLLItemGetPrevious(IBMSHandle memory, IBDLLItem item)
{
    IBDLLItem previous = IBDLL_ITEM_BAD ;

    IBDLL_ITEM_START ;
    previous = p_item->ILN_prev ;
    IBDLL_ITEM_END ;

    return previous ;
}

/*-------------------------------------------------------------------------*/
IBDLLItem IBDLLItemGetNext(IBMSHandle memory, IBDLLItem item)
{
    IBDLLItem next = IBDLL_ITEM_BAD ;

    IBDLL_ITEM_START ;
    next = p_item->ILN_next ;
    IBDLL_ITEM_END ;

    return next ;
}

