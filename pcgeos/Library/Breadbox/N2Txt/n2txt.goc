@include "n2txt.goh"

@extern chunk NumberOne;
@extern chunk NumberTwo;
@extern chunk NumberThree;
@extern chunk NumberFour;
@extern chunk NumberFive;
@extern chunk NumberSix;
@extern chunk NumberSeven;
@extern chunk NumberEight;
@extern chunk NumberNine;
@extern chunk NumberZero;
@extern chunk NumberEleven;
@extern chunk NumberTwelve;
@extern chunk NumberThirteen;
@extern chunk NumberFourteen;
@extern chunk NumberFifteen;
@extern chunk NumberSixteen;
@extern chunk NumberSeventeen;
@extern chunk NumberEightteen;
@extern chunk NumberNineteen;
@extern chunk NumberTen;
@extern chunk NumberTwenty;
@extern chunk NumberThirty;
@extern chunk NumberForty;
@extern chunk NumberFifty;
@extern chunk NumberSixty;
@extern chunk NumberSeventy;
@extern chunk NumberEighty;
@extern chunk NumberNinety;
@extern chunk NumberHundred;
@extern chunk NumberThousand;
@extern chunk NumberAnd;
@extern chunk NumberHundredths;


/*
 ***************************************************************************
 *		Functions for BBn2tx
 ***************************************************************************
 */


/***********************************************************************
 *
 * FUNCTION:	parse1
 *
 * CALLED BY:  Num2Text
 *
 * STRATEGY:   convert single digit # to text
 *
 *
 ***********************************************************************/
 void parse1 (char *inString, char *outString) {

    MemLock (OptrToHandle(@NumberOne));
    switch (inString[0])  {
	  case '1':
		strcpy (outString, LMemDeref(@NumberOne));
		break;
	  case '2':
		strcpy (outString, LMemDeref(@NumberTwo));
		break;
	  case '3':
		strcpy (outString, LMemDeref(@NumberThree));
		break;
	  case '4':
		strcpy (outString, LMemDeref(@NumberFour));
		break;
	  case '5':
		strcpy (outString, LMemDeref(@NumberFive));
		break;
	  case '6':
		strcpy (outString, LMemDeref(@NumberSix));
		break;
	  case '7':
		strcpy (outString, LMemDeref(@NumberSeven));
		break;
	  case '8':
		strcpy (outString, LMemDeref(@NumberEight));
		break;
	  case '9':
		strcpy (outString, LMemDeref(@NumberNine));
		break;
	  case '0':
		strcpy (outString, LMemDeref(@NumberZero));
		break;
	  } /* end of switch */
    MemUnlock (OptrToHandle(@NumberOne));

    return;

 }

/***********************************************************************
 *
 * FUNCTION:	parse2
 *
 * CALLED BY:  Num2Text
 *
 * STRATEGY:   convert double digit # to text
 *
 *
 ***********************************************************************/
 void parse2 (char* inString, char *outString) {
 Boolean		teens = FALSE;


    outString[0] = NULL;
    MemLock (OptrToHandle(@NumberOne));
    if (inString[0] != '0')  {
	  /* double digits */
	  switch (inString[0])  {
		case '1':
		   switch (inString[1])  {
			 case '1':
			    strcpy (outString, LMemDeref(@NumberEleven));
			    break;
			 case '2':
			    strcpy (outString, LMemDeref(@NumberTwelve));
			    break;
			 case '3':
			    strcpy (outString, LMemDeref(@NumberThirteen));
			    break;
			 case '4':
			    strcpy (outString, LMemDeref(@NumberFourteen));
			    break;
			 case '5':
			    strcpy (outString, LMemDeref(@NumberFifteen));
			    break;
			 case '6':
			    strcpy (outString, LMemDeref(@NumberSixteen));
			    break;
			 case '7':
			    strcpy (outString, LMemDeref(@NumberSeventeen));
			    break;
			 case '8':
			    strcpy (outString, LMemDeref(@NumberEightteen));
			    break;
			 case '9':
			    strcpy (outString, LMemDeref(@NumberNineteen));
			    break;
			 case '0':
			    strcpy (outString, LMemDeref(@NumberTen));
			    break;
			 } /* end of teens switch */
			 teens = TRUE;
		   break;
		case '2':
		   strcpy (outString, LMemDeref(@NumberTwenty));
		   break;
		case '3':
		   strcpy (outString, LMemDeref(@NumberThirty));
		   break;
		case '4':
		   strcpy (outString, LMemDeref(@NumberForty));
		   break;
		case '5':
		   strcpy (outString, LMemDeref(@NumberFifty));
		   break;
		case '6':
		   strcpy (outString, LMemDeref(@NumberSixty));
		   break;
		case '7':
		   strcpy (outString, LMemDeref(@NumberSeventy));
		   break;
		case '8':
		   strcpy (outString, LMemDeref(@NumberEighty));
		   break;
		case '9':
		   strcpy (outString, LMemDeref(@NumberNinety));
		   break;
		case '0':
		   ;
		   break;
		} /* end of first digit switch */
	  }  /* end of first digit if */

    if (!teens)  {
	  /* add second digit */
	  switch (inString[1])  {
		case '1':
		   strcat (outString, LMemDeref(@NumberOne));
		   break;
		case '2':
		   strcat (outString, LMemDeref(@NumberTwo));
		   break;
		case '3':
		   strcat (outString, LMemDeref(@NumberThree));
		   break;
		case '4':
		   strcat (outString, LMemDeref(@NumberFour));
		   break;
		case '5':
		   strcat (outString, LMemDeref(@NumberFive));
		   break;
		case '6':
		   strcat (outString, LMemDeref(@NumberSix));
		   break;
		case '7':
		   strcat (outString, LMemDeref(@NumberSeven));
		   break;
		case '8':
		   strcat (outString, LMemDeref(@NumberEight));
		   break;
		case '9':
		   strcat (outString, LMemDeref(@NumberNine));
		   break;
		case '0':
		   ;
		   break;
		} /* end of switch */
	  }  /* end of !teens if */
    MemUnlock (OptrToHandle(@NumberOne));

 }

/***********************************************************************
 *
 * FUNCTION:	NumToText
 *
 * CALLED BY:  
 *
 * STRATEGY:   convert a float number to a text string of written
 *		     out numbers
 *
 ***********************************************************************/
 void _pascal NumToText(FloatNum number, char *numberText) {

 char		numberASCII[FLOAT_TO_ASCII_HUGE_BUF_LEN + 1];
 char		parsedString[20];
 char		centsString[3];
 char		tempString[7];
 word		length;



    /* convert the float to ASCII string */
    FloatFormatNumber(FORMAT_ID_FIXED,
				  NullHandle,
				  NullHandle,
				  &number,
				  numberASCII);

    length = strlen(numberASCII);
  /*  if (length > 9 )  {  /* too big */
  /*	  strcpy (numberText, "Too big!");
	  return;
	  }
  */
    /* START PARSING THE STRING */
    numberText[0] = NULL;
    /* grab the cents */
    strcpy (centsString, &numberASCII[length - 2]);
    /* axe the cents */
    numberASCII[length - 3] = NULL;
    /* update the length */
    length -= 3;

    MemLock (OptrToHandle(@NumberOne));
    if (length == 6)  {   /* hundred thousands */
	  strcpy (tempString, numberASCII);
	  tempString[1] = NULL;
	  parse1(tempString, parsedString);
	  strcat (numberText, parsedString);
	  strcat (numberText, LMemDeref(@NumberHundred));
	  /* ax the just parsed numeral */
	  strcpy (tempString, numberASCII);
	  strcpy (numberASCII, &tempString[1]);
	  length--;
	  }
    if (length == 5)  {   /* ten thousands */
	  strcpy (tempString, numberASCII);
	  tempString[2] = NULL;
	  parse2(tempString, parsedString);
	  strcat (numberText, parsedString);
	  strcat (numberText, LMemDeref(@NumberThousand));
	  /* ax the just parsed numerals */
	  strcpy (tempString, numberASCII);
	  strcpy (numberASCII, &tempString[2]);
	  length -= 2;
	  }
    if (length == 4)  {   /* thousands */
	  strcpy (tempString, numberASCII);
	  tempString[1] = NULL;
	  parse1(tempString, parsedString);
	  strcat (numberText, parsedString);
	  strcat (numberText, LMemDeref(@NumberThousand));
	  /* ax the just parsed numeral */
	  strcpy (tempString, numberASCII);
	  strcpy (numberASCII, &tempString[1]);
	  length --;
	  }
    if (length == 3)  {   /* hundreds */
	  strcpy (tempString, numberASCII);
	  tempString[1] = NULL;
	  if (tempString[0] != '0') {
		parse1(tempString, parsedString);
		strcat (numberText, parsedString);
		strcat (numberText, LMemDeref(@NumberHundred));
		}
	  /* ax the just parsed numeral */
	  strcpy (tempString, numberASCII);
	  strcpy (numberASCII, &tempString[1]);
	  length --;
	  }
    if (length == 2)  {   /* teens */
	  parse2(numberASCII, parsedString);
	  strcat (numberText, parsedString);
	  /* ax the just parsed numerals */
	  strcpy (tempString, numberASCII);
	  strcpy (numberASCII, &tempString[2]);
	  length -= 2;
	  }
    if (length == 1)  {   /* ones */
	  parse1(numberASCII, parsedString);
	  strcat (numberText, parsedString); 
	  }

    /* now add the cents */
    strcat (numberText, LMemDeref(@NumberAnd));
    strcat (numberText, centsString);
    strcat (numberText, LMemDeref(@NumberHundredths));
    MemUnlock (OptrToHandle(@NumberOne));

    return;

 }


 
