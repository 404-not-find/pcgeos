/*
        GSOL.GOC

        <G>raphics <S>tring <O>wner <L>ink specification
*/

@include <stdapp.goh>
#include <graphics.h>
#include <gstring.h>

#include <ansi\string.h>

#include "gsol.h"       /* GSOL definitions */

void _far _pascal My_GrParseGString(GStateHandle gstate,GStateHandle gstring,
                                    word flags,MemHandle h_global);

word _pascal _export GSOLMarkGStringStart(
  GStateHandle gs, GeodeToken *token, word PN_major, word PN_minor)
{
        GSOLComment gsolc;
        ProtocolNumber prot;

        gsolc.GSOLC_magic=GSOL_START;   /* mark comment as "ours" / "start" */
        gsolc.GSOLC_creatorToken=*token;/* insert passed token */
        gsolc.GSOLC_creatorProtocol.PN_major=PN_major;
        gsolc.GSOLC_creatorProtocol.PN_minor=PN_minor;
                                        /* insert creator protocol */
        GrComment(gs,&gsolc,sizeof(GSOLComment));
                                        /* insert comment into GString */
        return 0;                       /* no error */
}

word _pascal _export GSOLMarkGStringEnd(
  GStateHandle gs, GeodeToken *token, word PN_major, word PN_minor)
{
        GSOLComment gsolc;
        ProtocolNumber prot;

        gsolc.GSOLC_magic=GSOL_END;     /* mark comment as "ours" / "end" */
        gsolc.GSOLC_creatorToken=*token;/* insert passed token */
        gsolc.GSOLC_creatorProtocol.PN_major=PN_major;
        gsolc.GSOLC_creatorProtocol.PN_minor=PN_minor;
                                        /* insert creator protocol */
        GrComment(gs,&gsolc,sizeof(GSOLComment));
                                        /* insert comment into GString */
        return 0;                       /* no error */
}


/*
 *  This structure defines the data required by GSOLOneGStringElement
 *  enumeration callback. It is kept in a global memory block whose handle
 *  is passed to the callback routine to avoid the use of global variables
 *  (which could cause problems when two or more geodes are calling functions
 *  from this library at the same time).
 */
struct GSOLParseData
{
  Boolean               identify;
  GeodeToken            *tok;
  ProtocolNumber        *prot;
  word                  ret;
  GStateHandle          gs;
  void                  *retbuf;
  word                  bufsize;
};

Boolean _pascal _export GSOLOneGStringElement(
  byte *elm, GStateHandle gstate, MemHandle h_global)
{
    if(*elm==GR_COMMENT)
    {
      struct GSOLParseData *global;
      struct _cmdbuf {
        byte        cmd;                /* should be GR_COMMENT */
        word        dsize;              /* should be sizeof GSOLComment */
        GSOLComment data;               /* data if GSOL comment */
      } cmdbuf;
      word size;

      global=MemLock(h_global);         /* lock down data block */

      GrGetGStringElement(gstate, global->gs, sizeof(cmdbuf), &cmdbuf, &size);
      if( size==sizeof(cmdbuf) &&
          cmdbuf.dsize==sizeof(GSOLComment) &&
          cmdbuf.data.GSOLC_magic==GSOL_START &&
          (global->identify ||
            !memcmp(global->tok,&cmdbuf.data.GSOLC_creatorToken,
              sizeof(*global->tok)))
        )
      {
        *global->prot=cmdbuf.data.GSOLC_creatorProtocol;
                                        /* return protocol */
        if(global->identify)            /* "Identify"? Pass back token */
          *global->tok=cmdbuf.data.GSOLC_creatorToken;

        global->ret=0;                   /* found GSOL tag */

        if(global->retbuf && global->bufsize)
        {                               /* return data requested? */
          GrSetGStringPos(global->gs,GSSPT_SKIP_1,1);
                                        /* advance by one command */
          GrGetGStringElement(gstate, global->gs,
            global->bufsize, global->retbuf, &size);
          if( ((struct _cmdbuf *)global->retbuf)->cmd!=GR_COMMENT )
            global->ret=GSOL_ERROR_NO_DATA;
        }

        MemUnlock(h_global);            /* release data block */
        return TRUE;                    /* abort gstring scanning */
      }

      MemUnlock(h_global);              /* release data block */
    }
    return FALSE;                       /* always continue if not comment */
}


word _pascal _export GSOLCheckGString(
  GStateHandle gs, GeodeToken *token, ProtocolNumber *prot,
  void *retbuf, word bufsize)
{
    word ret,elm,elmsize;
    struct GSOLParseData *global;
    MemHandle h_global;

    h_global=MemAlloc(sizeof(*global),HF_DYNAMIC,HAF_NO_ERR);
    global=MemLock(h_global);

    global->identify=FALSE;
    global->tok=token;
    global->prot=prot;
    global->gs=gs;                      /* make gstring available globally */
    global->retbuf=retbuf;
    global->bufsize=bufsize;
    global->ret=GSOL_ERROR_NO_OWNER;
    My_GrParseGString(0, gs, GSC_ONE, h_global);
    ret=global->ret;

    MemUnlock(h_global);
    MemFree(h_global);
    return ret;                         /* found anything? */
}

word _pascal _export GSOLIdentifyGString(
  GStateHandle gs, GeodeToken *token, ProtocolNumber *prot)
{
    word ret,elm,elmsize;
    struct GSOLParseData *global;
    MemHandle h_global;

    h_global=MemAlloc(sizeof(*global),HF_DYNAMIC,HAF_NO_ERR);
    global=MemLock(h_global);

    global->identify=TRUE;
    global->tok=token;
    global->prot=prot;
    global->gs=gs;                      /* make gstring available globally */
    global->retbuf=NULL;
    global->bufsize=0;
    global->ret=GSOL_ERROR_NO_OWNER;
    My_GrParseGString(0, gs, GSC_ONE, h_global);
    ret=global->ret;

    MemUnlock(h_global);
    MemFree(h_global);
    return ret;                         /* found anything? */
}
