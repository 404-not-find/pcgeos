@include <stdapp.goh>
#include <Ansi/string.h>
#include <Ansi/ctype.h>
#include <xlatlib.h>
#include "rtf.h"
#include "import.h"
#include "groups.h"
#include "rtfinput.h"
#include "text.h"
#include "control.h"
#include "warnings.h"
#include "charset.h"
#include "global.h"

#if _DO_HELP
extern optr oHyperlinkList;
extern optr Text;
extern boolHyperLinksEnabled;
extern TCHAR cLastAddedChar;
extern TextBufferStruct TextBuffer;
extern Boolean contextReferenceStarted;
extern Boolean contextIDStarted;

Boolean _pascal SetRTFHyperlinksCallback(void* element, void* enumData);
void HandleReservedHelpTokens(void);
#endif

ReaderStruct ReaderState;

static void ReaderInit(void)
    {
    ReaderState.RS_destMode = DM_NORMAL;
    ReaderState.RS_readMode = RM_NORMAL;
    ReaderState.RS_hexNibble = '\0';
    ReaderState.RS_binCount = 0;
    ReaderState.RS_depth = 0;
    ReaderState.RS_destType = DT_NONE;
    ReaderState.RS_groupType = GT_NONE;
    ReaderState.RS_groups = 0;
    }

void IncGroupDepth(void)
    {
    ReaderState.RS_depth ++;
    }

void DecGroupDepth(void)
    {
    ReaderState.RS_depth --;
    /* Error if < 0 */
    }

void SetDestination(DestinationType newType)
    {
/*
    DestinationType oldType = ReaderState.RS_destType;
    if (newType != oldType)
        switch (oldType)
            {
            case DT_RTF: 
*/
    ReaderState.RS_destType = newType;
    }

void SetGroup(GroupType newType)
    {
    GroupType oldType = ReaderState.RS_groupType;

    if (newType != oldType)
        {
/*      TextBufferDump();               // IMPORTANT!!! */
        CloseGroup(oldType);
        ReaderState.RS_groupType = newType;
        OpenGroup(newType);
        }
    }

void SetGroupFlag(GroupFlags newFlag)
    {
    if (ReaderState.RS_groups & newFlag)
        SetDestMode(DM_SKIP);
    ReaderState.RS_groups |= newFlag;
    }

/*****************************************************************************/

void FillImportDataBlock(RTFTransferData* data)
    {
    memcpy(&data->RTFTD_pageInfo, &DefaultDocAttrs.RTFDA_pageInfo, sizeof(PageSetupInfo));
    }

/*****************************************************************************/

void ReadNormal(char c)
    {
    if (c == '{')
        GroupStackPush();
    else if (c == '}')
        GroupStackPop();
    else if (c == '\\')	
        ControlParse();
    else if (GetDestMode() != DM_SKIP && 
#if _DO_HELP
	     GetDestMode() != DM_CONTEXT_ID &&
#endif
	     isprint((unsigned char)c))
        TextBufferAddChar(RTFCodePageToGeos(c));
#if _DO_HELP
    else {
	if(GetDestMode() == DM_CONTEXT_ID
	   && isprint((unsigned char)c)) {
	    /* redirect text to context ID buffer */
	    ContextIDBufferAddChar(RTFCodePageToGeos(c));
	}
	if (contextReferenceStarted && isprint((unsigned char)c)) {
	    /* direct text to hyperlink reference buffer */
	    HyperlinkContextBufferAddChar(RTFCodePageToGeos(c));
	}
    }
#endif
    }

#define HEX2DEC(x) ( (x >= 'A') ? (x - 'A' + 10) : (x - '0') )

void ReadHex(char c)
    {
    if (isxdigit((unsigned char)c))
        {
        c = toupper(c);
        if (ReaderState.RS_hexNibble != '\0')
            {
            TextBufferAddChar (RTFCodePageToGeos(
              (HEX2DEC(ReaderState.RS_hexNibble) << 4) + HEX2DEC(c)));
            ReaderState.RS_hexNibble = '\0';
            SetReadMode(RM_NORMAL);
            }
        else
            ReaderState.RS_hexNibble = c;
        }
    else
        {
        ReaderState.RS_hexNibble = '\0';
        SetReadMode(RM_NORMAL);
        InputUnGet(c);
        }
    }

void ReadBin(char c)
    {
    /* Very simple, indeed. */
    if (GetDestMode() != DM_SKIP)
        TextBufferAddChar (c);
    if (--ReaderState.RS_binCount == 0)
        SetReadMode(RM_NORMAL);
    }


/***********************************************************************
 * Import
 *
 * Read an RTF file into a VisText object.
 *
 * Pass: source - file handle of RTF file
 *       dest - optr of large VisText to receive text
 *       data - pointer to data block to be filled in
 *
 * Returns: TransError
 ***********************************************************************/

TransError RTFImport (FileHandle source, optr dest, RTFTransferData* data)
    {
    int c;
#if _DO_HELP
     register int c1;
#endif
    
    RTFSetCodePage(DEFAULT_CODEPAGE);
    SetError(TE_NO_ERROR);
    TextBufferInit();
    DefaultAttrsInit();    
    if (GroupsInit() && GroupStackInit())
        {
        InputInit(source);
        TextInit(dest);
        ReaderInit();

        c = InputGet();
        while (c != EOF && GetError() == TE_NO_ERROR)
            {
#if _DO_HELP
     /* check to see if we got the special GEOS help tag */     
     if(GetReadMode() == RM_HEX) {
	 if(c == 'A' || c == 'a') {
	     c1 = InputGet();
	     if(c1 == 'B' || c1 == 'b') {
		 /* got the special GEOS Help tag */
		 HandleReservedHelpTokens();
		 
		 /* get the next char for processing */
		 c = InputGet();
		 
		 /* out of hex mode */
		 ReaderState.RS_hexNibble = '\0';
		 SetReadMode(RM_NORMAL);
		 
	     }
	     else
		 InputUnGet(c1);
	 }
     }
#endif
            switch (GetReadMode())
                {
                case RM_NORMAL: ReadNormal(c); break;
                case RM_HEX:    ReadHex(c); break;
                case RM_BIN:    ReadBin(c); break;
                }
            c = InputGet();
            }
        if (GetError() == TE_NO_ERROR) {
	    if(GetGroupDepth() != 0)
        	{
		    EC_WARNING(RTF_WARNING_IMPORT_MISMATCHED_BRACES);
		    SetError(TE_IMPORT_ERROR);
        	}
#if _DO_HELP
	    else {
		/* set hyperlinks if necessary, and then free the hyperlink
		   list */
		if(oHyperlinkList) {
		    MemLock(OptrToHandle(oHyperlinkList));
		    ChunkArrayEnum(oHyperlinkList, NULL, SetRTFHyperlinksCallback);
		    MemFree(OptrToHandle(oHyperlinkList));
		}

		/* if there is a saved '#' that hasn't been written, then write it. 
   		   (This was saved by TextBufferAddChar to see if a footnote group 
		   followed) */
/*		if(cLastAddedChar == '#') {
		    if (TextBuffer.TBS_nCount == TEXT_BUFFER_LEN - 1)
			TextBufferDump();
		    TextBuffer.TBS_cData[TextBuffer.TBS_nCount++] = '#';
		    if (GetDestMode() == DM_NO_BUFFER)
			TextBufferDump();
		}*/
	    }
#endif
	}
        GroupStackFree();
        GroupsFree();
        FillImportDataBlock(data);
        }
    TextBufferFree();
	RTFSetCodePage(SHUTDOWN_CODEPAGE);

	return GetError();
    }

#if _DO_HELP

void EatTerminatingChar(void);

void HandleReservedHelpTokens(void)
{
    TCHAR* p;
    long int param;
    Boolean bEntryHasParam;
    ControlTableEntry controlEntry;
    TCHAR control[CONTROL_MAX_LENGTH + 1];
    int c;

    /* Get the control word. */
    /* since these "special" control words appear as plain text,
       we need to make sure there are no non-alphanumeric characters
       preceding it.  (such as \r) */
    while (!isalpha(c = InputGet())) {
	if(c == EOF)
	    return;
    };
    InputUnGet(c); /* last char WAS an alpha, so unget it */
 
    if (!ControlGet(control, &param, &bEntryHasParam))
	return;    

    /* Check to see if the control is a reserved
       keyword */
    if(ControlLookup(control, &controlEntry) == TRUE &&
       (controlEntry.CTE_extra & CONTROL_GEOS_HELP)) {
	
	/* it is!  go ahead and take care of it */
	HandleControls(controlEntry, param,
		       bEntryHasParam);	
	    
	/* eat up the terminating char */
	EatTerminatingChar();
    }
    else {
	/* not a special GEOS Help control word, 
	   so write out the read in
	   token */
	if (GetDestMode() != DM_SKIP) {	
	    TextBufferAddChar(LocalCodePageToGeosChar(171,
						      CODE_PAGE_LATIN_1, 
						      '.'));
	    for(p = control; *p; p++)
		TextBufferAddChar(*p);
	    return;
	}
    }
       
    return;
}

void EatTerminatingChar(void) 
{
    register int c;

    do {       /* eats up any other chars, like \r's */
	c = InputGet(); 
    } while(!isprint(c)); 
    InputGet(); 
    InputGet(); 
    InputGet();    
}

Boolean _pascal SetRTFHyperlinksCallback(void* element, void* enumData)
{
    HyperlinkItem* item = element;
    @call Text::MSG_VIS_TEXT_SET_HYPERLINK(VTCF_TOKEN, item->HI_nameFileToken, 
					   item->HI_nameToken,
					   item->HI_rangeEnd,
					   item->HI_rangeStart);
    return FALSE;
}
#endif







