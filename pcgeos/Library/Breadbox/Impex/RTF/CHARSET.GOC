#include <geos.h>
#include <heap.h>
#include <lmem.h>
#include <char.h>
#include <ec.h>
#include <localize.h>
#include "rtfdefs.h"
#include "warnings.h"
#include "codepage.h"


/* Code pages start with CP_MIN_MAP_CHAR and end at MAX_MAP_CHAR */
#define CP_MIN_MAP_CHAR 128
#define CP_MAX_MAP_CHAR 255
#define CPNM '.'

@start CodePages, data;

@chunk wchar Ansi1252ToGeos[] = {
  /* Extensions based on Windows/ANSI characters set */
  CPNM, CPNM, 0xE2, 0xC4, 0xE3, 0xC9, 0xA0, 0xE0,  0xF6, 0xE4, CPNM, 0xDC, 0xCE, CPNM, CPNM, CPNM,
  CPNM, 0xD4, 0xD5, 0xD2, 0xD3, 0xA5, 0xD0, 0xD1,  0xF7, 0xAA, CPNM, 0xDD, 0xCF, CPNM, CPNM, 0xD9,
  /* Regular ISO Latin character set */
  0xCA, 0xC1, 0xA2, 0xA3, 0xDB, 0xB4, 0x7C, 0xA4,  0xFD, 0xA9, 0xBB, 0xC7, 0xC2, 0x1F, 0xA8, 0xF8,
  0xA1, 0xB1, CPNM, CPNM, 0xAB, 0xB5, 0xA6, 0xE1,  0xFC, CPNM, 0xBC, 0xC8, CPNM, CPNM, CPNM, 0xC0,
  0xCB, 0xE7, 0xE5, 0xCC, 0x80, 0x81, 0xAE, 0x82,  0xE9, 0x83, 0xE6, 0xE8, 0xED, 0xEA, 0xEB, 0xEC,
  CPNM, 0x84, 0xF1, 0xEE, 0xEF, 0xCD, 0x85, 0x78,  0xAF, 0xF4, 0xF2, 0xF3, 0x86, 0xDF, CPNM, 0xA7,
  0x88, 0x87, 0x89, 0x8B, 0x8A, 0x8C, 0xBE, 0x8D,  0x8F, 0x8E, 0x90, 0x91, 0x93, 0x92, 0x94, 0x95,
  CPNM, 0x96, 0x98, 0x97, 0x99, 0x9B, 0x9A, 0xD6,  0xBF, 0x9D, 0x9C, 0x9E, 0x9F, 0xDE, CPNM, 0xD8};
@localize not;

@chunk wchar GeosToAnsi1252[] = {
  0xC4, 0xC5, 0xC7, 0xC9, 0xD1, 0xD6, 0xDC, 0xE1,  0xE0, 0xE2, 0xE4, 0xE3, 0xE5, 0xE7, 0xE9, 0xE8,
  0xEA, 0xEB, 0xED, 0xEC, 0xEE, 0xEF, 0xF1, 0xF3,  0xF2, 0xF4, 0xF6, 0xF5, 0xFA, 0xF9, 0xFB, 0xFC,
  0x86, 0xB0, 0xA2, 0xA3, 0xA7, 0x95, 0xB6, 0xDF,  0xAE, 0xA9, 0x99, 0xB4, 0xA8, CPNM, 0xC6, 0xD8,
  CPNM, 0xB1, CPNM, CPNM, 0xA5, 0xB5, CPNM, CPNM,  CPNM, CPNM, CPNM, 0xAA, 0xBA, CPNM, 0xE6, 0xF8,
  0xBF, 0xA1, 0xAC, CPNM, 0x83, CPNM, CPNM, 0xAB,  0xBB, 0x85, 0xA0, 0xC0, 0xC3, 0xD5, 0x8C, 0x9C,
  0x96, 0x97, 0x93, 0x94, 0x91, 0x92, 0xF7, CPNM,  0xFF, 0x9F, CPNM, 0xA4, 0x8B, 0x9B, 0xFD, 0xDD,
  0x87, 0xB7, 0x82, 0x84, 0x89, 0xC2, 0xCA, 0xC1,  0xCB, 0xC8, 0xCD, 0xCE, 0xCF, 0xCC, 0xD3, 0xD4,
  CPNM, 0xD2, 0xDA, 0xDB, 0xD9, CPNM, 0x88, 0x98,  0xAF, CPNM, CPNM, CPNM, 0xB8, 0xA8, CPNM, CPNM};
@localize not;

@end CodePages;


DosCodePage nCodePage = CP_NIL;
MemHandle mhCodePage = NullHandle;
wchar* pGeosToCodePage = NULL;
wchar* pCodePageToGeos = NULL;


void RTFUnloadCodePage(void)
	{
	if (mhCodePage != NullHandle)
		{
		MemUnlock(mhCodePage);
		mhCodePage = NullHandle;
		}
	pGeosToCodePage = pCodePageToGeos = NULL;
	nCodePage = CP_NIL;
	}

void RTFLoadCodePage(DosCodePage nCP, optr chCPToGeos, optr chGeosToCP)
	{
	/* Make sure our codepage resource is locked. */
	if (mhCodePage == NullHandle)
		{
		if (MemLock(HandleOf(chCPToGeos)) == NULL)
			{
			EC_WARNING (RTF_WARNING_CODEPAGE_LOCK_FAILED);
			RTFUnloadCodePage();
			return;
			}
		mhCodePage = HandleOf(chCPToGeos);
		}
	/* Retrieve pointers to the codepages. */
	pGeosToCodePage = LMemDeref(chGeosToCP);
	pCodePageToGeos = LMemDeref(chCPToGeos);
	if (pGeosToCodePage == NULL || pCodePageToGeos == NULL)
		{
		EC_WARNING (RTF_WARNING_CODEPAGE_DEREF_FAILED);
		RTFUnloadCodePage();
		return;
		}
	nCodePage = nCP;
	}

wchar RTFCodePageToGeos(wchar ch)
	{
	if (nCodePage == CP_NIL)
		return ch;
	if (!mhCodePage)
		return LocalCodePageToGeosChar(ch, nCodePage, CPNM);
	if (!pCodePageToGeos)
		return CPNM;
	if (ch >= CP_MIN_MAP_CHAR && ch <= CP_MAX_MAP_CHAR)
		ch = pCodePageToGeos[ch - CP_MIN_MAP_CHAR];
	return ch;
	}			
		
wchar RTFGeosToCodePage(wchar ch)
	{
	if (nCodePage == CP_NIL)
		return ch;
	if (!mhCodePage)
		return LocalGeosToCodePageChar(ch, nCodePage, CPNM);
	if (!pGeosToCodePage)
		return CPNM;
	if (ch >= CP_MIN_MAP_CHAR && ch <= CP_MAX_MAP_CHAR)
		ch = pGeosToCodePage[ch - CP_MIN_MAP_CHAR];
	return ch;
	}

void RTFSetCodePage(DosCodePage nCP)
	{
	/* If this codepage is already set, return. */
	if (nCodePage == nCP)
		return;

	/* If this codepage is supported by us, load it. */
	/* Otherwise, unload ours, and see if GEOS supports it. */
	switch (nCP)
		{
		case CP_WESTEUROPE:
		/* Other codepages go here. */
			RTFLoadCodePage(nCP, @Ansi1252ToGeos, @GeosToAnsi1252);
			break;
		default:
			RTFUnloadCodePage();
			if (LocalIsCodePageSupported(nCP))
				nCodePage = nCP;
			break;
		}
	}

