/****************************************************************************
 *
 * ==CONFIDENTIAL INFORMATION== 
 * COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 * ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 * NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 * Project: Word For Windows Translator Library
 * File:    imptproc.goc
 *
 ***************************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>
@include <Objects/clipbrd.goh>
@include <impex.goh>
#include <vm.h>
#include <xlatlib.h>
#include <localize.h>
#include <Ansi/string.h>
#include <Ansi/ctype.h>
#include <sstor.h>

#include "libFmt.h"
#include <wfwlib.h>

#define PAGE_WIDTH 8.5*72
#define PAGE_HEIGHT 11*72
#define PAGE_LEFT_MARGIN 1*72
#define PAGE_RIGHT_MARGIN 1*72
#define PAGE_TOP_MARGIN 1*72
#define PAGE_BOTTOM_MARGIN 1*72

typedef unsigned short ushort;

/* Portion of File Information Block used to identify the file's format.
   The struct starts at byte 0 of the document stream. */
typedef struct {
    ushort  wIdent;                 // magic number
    ushort  nFib;                   // FIB version written. This will be >= 101
                                    // for all Word 6.0 for Windows and after
                                    // documents.
} FIB_HEADER_VERSION;

/*
 * Add page layout structure to import format.
 */
void AddPageLayout(VMFileHandle vmf,VMBlockHandle bh,PageSetupInfo *pInfo)
{
    VMBlockHandle h;
    MemHandle mh;
    TextTransferBlockHeader *ttbh;
    PageSetupInfo *psi;

    h = VMAlloc(vmf,sizeof(PageSetupInfo),0);
    psi = VMLock(vmf,h,&mh);
    VMDirty(mh);
    memcpy(psi,pInfo,sizeof(PageSetupInfo));
    VMUnlock(mh);

    ttbh = VMLock(vmf,bh,&mh);
    ttbh->TTBH_pageSetup = VMCHAIN_MAKE_FROM_VM_BLOCK(h);
    VMDirty(mh);
    VMUnlock(mh);
}

dword _pascal GetFormat(FileHandle fh)
{
    word format = NO_IDEA_FORMAT;
    TransError retval = TE_NO_ERROR;
    StgError error = STGERR_NONE;
    StgDocfile doc;
    StgStorage root;
    StgStream stream = NullHandle;
    FIB_HEADER_VERSION fib;
    
    if (!(error = StgOpenDocfile(fh, &doc, &root)))
    {
        if (!(error = StgStreamOpen(root, "WordDocument", &stream)))
        {
            if (StgStreamRead(stream, &fib, sizeof(fib)) == sizeof(fib))
            {
                if (fib.nFib >= 105)        /* Word 8.0 */
                {
                    /* Flag the Word 8.0 file format. */
                    format = TF_MSWORD_8_0;
                }
#if 0
                else if (fib.nFib >= 101)   /* Word 6.0/7.0 */
                {
                    /* Flag the Word 6.0/7.0 file format. */
                    format = TF_MSWORD_6_0;
                }
#endif
            }
            else
                error = StgStreamGetLastError(stream);

            StgStreamClose(stream);
        }
        StgCloseDocfile(doc);
    }

    /* These are critical errors that should result in an error
       being returned to the client. */
    if (error == STGERR_FILE_ERROR)
        retval = TE_FILE_ERROR;
    else if (error == STGERR_MEMORY_ERROR)
        retval = TE_OUT_OF_MEMORY;
    else if (error == STGERR_FORMAT_ERROR)
        retval = TE_INVALID_FORMAT;

    /* Return format enum in high word and error in low word. */
    return ((dword)format << 16) | retval;
}

#ifdef DO_GRAPHICS
void ProcessGraphics(optr obj, VMFileHandle vmf, char *current,
  MemHandle mh, ChunkHandle imageArray)
{
    GStateHandle gstate;
    VMBlockHandle dataVMBlock;
    VisTextGraphic vtg;

    gstate = GrCreateGString(vmf, GST_VMEM, &dataVMBlock);
    GrSetLineColor(gstate,C_BLACK,CF_INDEX,0,0);
    GrDrawRect(gstate,0,0,19,9);
    GrEndGString(gstate);
    GrDestroyGString(gstate, 0, GSKT_LEAVE_DATA);

    memset(&vtg,0,sizeof(VisTextGraphic));
    vtg.VTG_type = VTGT_GSTRING;
    vtg.VTG_flags = 0;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e11.WWF_int = 1;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e22.WWF_int = 1;
    vtg.VTG_vmChain = VMCHAIN_MAKE_FROM_VM_BLOCK(dataVMBlock);
    vtg.VTG_size.XYS_width = 20;
    vtg.VTG_size.XYS_height = 10;

    @call obj::MSG_VIS_TEXT_REPLACE_WITH_GRAPHIC(vtg, vmf, 0, 0, 0);
}
#endif

dword _pascal _export ImportProcedure(ImportFrame *ieb,VMChain *vmc)
{
    optr textObj;
    VMBlockHandle transferItem;
    int cif,ret;
    MemHandle mh;
    WFWTransferData dataBlock;
#ifdef DO_GRAPHICS
    word *p;
    char fullname[PATH_BUFFER_SIZE];
#endif

    /* Perform initial format verification. */
//	if ((word)GetFormat(ieb->IF_sourceFile) == NO_IDEA_FORMAT)
//		return TE_IMPORT_ERROR;
		
    textObj = TextAllocClipboardObject(ieb->IF_transferVMFile,
      VTSF_MULTIPLE_CHAR_ATTRS | VTSF_MULTIPLE_PARA_ATTRS |
#ifdef DO_GRAPHICS
        VTSF_GRAPHICS |
#endif
        VTSF_TYPES,
      0);

    if(!textObj) return TE_ERROR;       /* return error if alloc fails */

    mh = MemAllocLMem(LMEM_TYPE_GENERAL,0);
                                        /* allocate block for more data */
    MemLock(mh);                        /* lock block for additional data */

    /* call parser to process file and import it into the text object */
    ret = WFWImport (ieb->IF_sourceFile, textObj, &dataBlock);

    if(ret)                             /* error returned by parser */
    {
      MemFree(mh);                      /* release additional data block */
      TextFinishWithClipboardObject(
        textObj,
        TCO_RETURN_NOTHING,
        HandleToOptr(GeodeGetProcessHandle()),
        "");
      return ret;                       /* general error... */
    }

#ifdef DO_GRAPHICS
    p=fullname;                         /* make double indirection clean */
    FileConstructFullPath( &p, PATH_BUFFER_SIZE,
      ieb->IF_sourcePathDisk, ieb->IF_sourcePathName, TRUE );

    /* process additional HTML features */
    ProcessGraphics( textObj, ieb->IF_transferVMFile, fullname,
      mh, ext.HE_imageArray );          /* process images in array */
#endif

    MemFree(mh);                        /* release additional data block */

    transferItem = TextFinishWithClipboardObject(
      textObj,
      TCO_RETURN_TRANSFER_FORMAT,
      HandleToOptr(GeodeGetProcessHandle()),
      "");

    AddPageLayout( ieb->IF_transferVMFile, transferItem, &dataBlock.WFWTD_pageInfo );
                                        /* add simple page layout to the file */

    *vmc = VMCHAIN_MAKE_FROM_VM_BLOCK( transferItem );

    cif = CIF_TEXT;                     /* we have created a text item */
    return TE_NO_ERROR+(((dword)cif)<<16);
}

