/*****************************************************************************
 * DEFINITIONS
 ****************************************************************************/

StgDocfile is a memblock that contains StgDocfileStruct:
    SDFS_file   The file handle of the storage
    SDFS_header The full StructuredStorageHeader, including contained FAT SECT array
    SDFS_root   The StgStorage of the root storage

StgStorage is a memblock that contains StgStorageStruct:
    SSTGS_file  The handle of the StgDocfile
    SSTGS_sid   The SID of this storage
    SSTGS_dir   The full StructuredStorageDirectoryEntry of this storage

StgStream is a memblock that contains StgStreamStruct:
    SSTRS_file      The handle of the StgDocfile
    SSTRS_parent    The handle of the parent StgStorage
    SSTRS_sid       The SID of this stream (valid only if parent is valid)
    SSTRS_sectStart The starting SECT of the stream
    SSTRS_sectSize  The log to the base 2 of the SECT size (left-shift count)
    SSTRS_sectMask  AND an offset by this to obtain the SECT-relative offset
    SSTRS_size      The total byte length of the stream (only for main,
                      ministreams, the Ministream, and the MiniFat)
                    The SECT count of the stream (only for FAT and DIF streams)
    SSTRS_curpos    Current stream pointer (only for main and ministreams)
                    Current relative SECT in stream (only for FAT and DIF)
    SSTRS_curSect   Absolute SECT of current stream pointer
    SSTRS_base      The handle of the base StgStream (only for streams in the Ministream)
    SSTRS_fat       The handle of the stream used to iterate sectors (FAT, MiniFat, DIF)
    SSTRS_fpReadFat Function pointer to the method used to read a FAT stream
                      (only for MiniFat, FAT and DIF streams)
BF (SSTRS_buffer    The handle of a buffer of the last sector accessed)

/*****************************************************************************
 * HIGH-LEVEL INTERFACE
 ****************************************************************************/

StgError StgOpenDocfile(char *path, StgDocfile *sdf, StgStorage *root,
                        StgAccessFlags access)
{
    if (!FileOpen(path, access))
        return STGERR_FILE_NOT_FOUND, STGERR_ACCESS_DENIED or STGERR_FILE_ERROR
    MemAlloc StgDocfile
    Store handle in *sdf
    Initialize it:
        Store file handle
        Read and store the file header
        Verify the signature
            If invalid, free and return STGERR_FILE_NOT_STORAGE
    Create StgStorage for SID 0 (root directory)
        Free doc+storage and return on error
    Store handle in *root
    return STGERR_NONE;
}

StgError StgStorageOpen(StgStorage parent, char *name, StgStorage *child)
{
    Get SID for name under storage parent
        If not found, return STGERR_NAME_NOT_FOUND
    If STGTY != STGTY_STORAGE
        return STGERR_NOT_STORAGE
    Create StgStorage for located SID
    Store handle in child
    return STGERR_NONE;
}

StgError StgStreamOpen(StgStorage stg, char *name, StgStream *stream)
{
    Get SID for name under storage stg
        If not found, return STGERR_NAME_NOT_FOUND
    If STGTY != STGTY_STREAM
        return STGERR_NOT_STREAM
    Create StgStream for located SID
    Store handle in stream
    return STGERR_NONE;
}

/*****************************************************************************
 * BASIC STUFF
 ****************************************************************************/

To create a directory-referenced StgStream:
Given: file = handle of the StgDocfile
Given: SID
Given: parent = handle of parent StgStorage
    Read the SID header into a temporary buffer
    if (sid.SSDE_mse != STGTY_STREAM)
        Return STGERR_NOT_SUPPORTED
    if (sid.SSDE_mse == STGTY_STREAM && sid.SSDE_ulSize < SSH_ulMiniSectorCutoff)
    {
        ss = SSH_uMiniSectorShift
        stream = Create Ministream stream object
        fat = Create MiniFat stream object
    }
    else
    {
        ss = 0
        stream = NullHandle
        fat = Create FAT StgStream
    }
    Alloc StgStream(file = file, SID = SID, parent = parent,
        start = sid.SSDE_sectStart, size = sid.SSDE_ulSize, ss = ss,
        stream = stream, fat = fat, fpReadFat = 0)
Output: stream object handle

To create a FAT StgStream:
    If (SSH_csectDif)
        dif = Alloc StgStream(file = file, SID = 0, parent = 0,
            start = SSH_sectDifStart, size = SSH_csectDIF,
            ss = 0, stream = 0, fat = 0, fpReadFat = read_fat_DIF)
    else
        dif = 0
    fat = Alloc StgStream(file = file, SID = 0, parent = 0,
        start = SSH_sectFat[0], size = SSH_csectFat, ss = 0,
        stream = 0, fat = dif, fpReadFat = read_fat_FAT)
Output: fat

To create a MiniFat StgStream:
    fat = Create FAT StgStream
    Alloc StgStream(file = file, SID = 0, parent = 0,
        start = SSH_sectMiniFatStart, size = SH_csectMiniFat * sizeof(SECT),
        ss = 0, stream = 0, fat = fat, fpReadFat = read_fat_MiniFat)

To create a Ministream StgStream:
    fat = Create FAT StgStream
    Alloc StgStream(file = file, SID = 0, parent = 0,
        start = SID(0).SSDE_sectStart, size = SID(0).SSDE_ulSize,
        ss = 0, stream = 0, fat = fat, fpReadFat = 0)

To create a temp directory StgStream:
    fat = Create FAT StgStream
    Alloc StgStream(file = file, SID = 0, parent = 0,
        start = SSH_sectDirStart, size = 0, ss = 0, stream = 0,
        fat = fat, fpReadFat = 0)

To alloc a StgStream:
Given: file = handle of the StgDocfile
Given: SID
Given: parent = handle of parent StgStorage
Given: start = starting SECT
Given: size = stream byte length (0 for unknown)
Given: ss = SECT size (0 for file default)
Given: stream = parent stream handle
Given: fat = handle of the stream used to iterate sectors
Given: fpReadFat = Function pointer to the method used to iterate sectors
    Alloc stream object
    SSTRS_file = file
    SSTRS_parent = parent
    SSTRS_sid = SID
    SSTRS_size = size
    SSTRS_curpos = 0
    SSTRS_curSect = SSTRS_sectStart = start
    SSTRS_sectSize = (ss) ? ss : SSH_uSectorShift
    SSTRS_sectMask = ((1 << SSTRS_sectSize) - 1)
    SSTRS_stream = stream
    SSTRS_fat = fat
    SSTRS_fpReadFat = fpReadFat
Output: stream object handle

To read the DIF (read_fat_DIF):
Given: aSECT = the absolute SECT for which to retrieve the next SECT in the chain
    Compute the byte offset into the DIF stream as
        oDIF = aSECT * sizeof(SECT)
    Compute the number of bytes for FAT SECTs in a DIF (also the offset of the
     next DIF SECT) as
        d = (SSTRS_sectMask + 1) - sizeof(SECT)
    Compute the relative DIF SECT containing the offset as
        rSECT = oDIF / d
    Compute the offset of the FAT SECT in the target DIF SECT as
        o = rDIF % d
BF  (if rSECT == #bufDIF, goto Output)
    Compute the distance in SECTs from current SECT to rSECT as
        n = rSECT - SSTRS_curpos
    if n == 0
        goto seek               // don't need to change sectors
    else if n < 0
        SSTRS_curSect = SSTRS_sectStart,
        n = rSECT               // can't backtrack, start at beginning of chain
BF  (bufferValid = TRUE)
    while (n -- && SSTRS_curSect <= LASTVALIDSECT && !error)
        // Seek to and read the next DIF SECT as SSTRS_curSect
BF      (if (bufferValid))
BF          (bufferValid = FALSE)   // value is buffered on first time thru
BF      (else)                      // afterwards, perform the physical seek
            Seek the offset d in the SECT at SSTRS_curSect
            SSTRS_curSect = Read the SECT value at offset d
seek:
BF  (Seek and buffer as #bufDIF the SECT at SSTRS_curSect)
NBF (Seek the offset o in the SECT at SSTRS_curSect)
    SSTRS_curpos = rSECT
Output: Read the SECT value at offset o

To read the FAT (read_fat_FAT):
Given: aSECT = the absolute SECT for which to retrieve the next SECT in the chain
    Compute the offset in the FAT to the SECT value as
        oFAT = aSECT * sizeof(SECT)
    Compute the relative SECT of the FAT chain containing said offset as
        rFAT = oFAT >> SSTRS_sectSize
    if (rFAT > SSTRS_size)
        return STGERR_FORMAT_ERROR
    Get aFAT as the appropriate SECT of the FAT
        if (rFAT == SSTRS_curpos)
            aFAT = SSTRS_curSect
            goto seek
        If rFAT < 109, the SECT value is
            aFAT = SSH_sectFat[rFAT]
        else
            // aFAT = read the DIF stream at index (rFAT - 109)
            aFAT = SSTRS_fat->SSTRS_fpReadFat(rFAT - 109)
        SSTRS_curpos = rFAT
        SSTRS_curSect = aFAT

    Compute the offset of the absolute SECT in the target FAT SECT as
        o = oFAT & SSTRS_sectMask
seek:
BF  (if aFAT == #bufFAT, goto read)
BF  (Seek and buffer as #bufFAT the FAT SECT at aFAT)
NBF (Seek the offset in the SECT at aFAT)
    rFAT = 
Output: Read the value from the FAT SECT at offset o

To read the MiniFat (read_fat_MiniFat):
Given: aSECT = the absolute SECT for which to retrieve the next SECT in the chain
    Seek to (aSECT * sizeof(SECT))
Output: Read a SECT

To seek to a particular offset in a stream
(The stream may be a Data stream, the Directory, the Ministream, or the MiniFat)
Given: O = the desired offset into the stream
    If SSTRS_size && O >= SSTRS_size
        return error, attempt to seek beyond EOS
    Compute the relative SECT containing the offset as
        rSECT = O & SSTRS_sectMask
    Compute the starting offset in a SECT as
        o = O & SSTRS_sectMask
BF  (if rSECT == #bufStream, goto set)
    Compute the distance in SECTs from current SECT to rSECT as
        n = rSECT - SSTRS_curpos & SSTRS_sectMask
    if n == 0
        goto seek               // don't need to change sectors
    else if n < 0
        SSTRS_curSect = SSTRS_sectStart,
        n = rSECT               // can't backtrack, start at beginning of chain
    while (n -- && SSTRS_curSect <= LASTVALIDSECT)
        // Read the FAT/MiniFat at index SSTRS_curSect
        SSTRS_curSect = SSTRS_fat->SSTRS_fpReadFat(SSTRS_curSect)
seek:
    if (SSTRS_stream)
        SSTRS_stream->seek(SSTRS_curSect << SSTRS_sectSize + o)
    else
BF      (Seek and buffer as #bufStream the SECT at SSTRS_curSect)
NBF     (Seek the offset o in the SECT at SSTRS_curSect)
set:
    Set SSTRS_curpos to O

To read data in a stream:
(The stream may be a main/mini stream, the Directory, the Ministream, or the MiniFat)
Given: N = the number of bytes to read
    n = 0
    if (SSTRS_size)
        Limit the number of bytes to read:
            N = min(N, SSTRS_size - SSTRS_curpos)
    if (N == 0)
        goto output
    Compute the starting offset into the absolute SECT as
        o = SSTRS_curpos & SSTRS_sectMask
    While n < N && !error
        Compute the number of bytes we can read from this sector as
            c = min(SSTRS_sectMask + 1 - o, (N - n))
        Seek P
        if (SSTRS_stream)
            SSTRS_stream->read(c)
        else
            Read c bytes from the SECT at current offset
        n += c, SSTRS_curpos += c, o = 0
Output: n = the number of bytes actually read

/*****************************************************************************
 * DIRECTORY STUFF
 ****************************************************************************/

To read a directory entry at SID n:
Given: n = SID of entry
Given: A StgStream pointing to the Directory stream
    Compute the offset into the Directory stream as
        O = n * SSDE_PADDED_SIZE
    Seek the stream to O
    Read the stream (n = sizeof(StructuredStorageDirectoryEntry))

To find a directory entry by name:
Given: name
Given: sid = The SID of the storage under which to perform the search
Given: optSSDE = A pointer to an optional StructuredStorageDirectoryEntry to fill
Given: optSTGTY = A pointer to an optional STGTY to fill
    dir = Create a temp directory StgStream
    while (sid != NULL_SID)
        dirEntry = Read directory entry from dir at SID
        diff = strlen(name) - dirEntry.SSDE_cb / sizeof(wchar)
        if (diff == 0)
            diff = strcmp(name, dirEntry.SSDE_ab) **watch Unicode/Ascii**
        if (diff < 0)
            sid = dirEntry.SSDE_sidLeftSib
        else
            sid = dirEntry.SSDE_sidRightSib
        else
            break   // found it
    dir.close
    if (sid != NULL_SID)
        if optSSDE
            *optSSDE = dirEntry
        if optSTGTY
            *optSTGTY = dirEntry.SSDE_mse
Output: sid

