/***********************************************************************
 *
 * Copyright (C) 1998 Breadbox Computer Company
 *
 * PROJECT:       WebMagick (HTTP URL Driver)
 * FILE:          wmg3con.goc
 *
 * AUTHOR:        Lysle Shields
 *
 * Module used to track the number of connections used by this driver.
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <wmg3con.goh>

#define MAX_CONNECTIONS    20
MemHandle G_connections[MAX_CONNECTIONS] ;

SemaphoreHandle G_syncAllocs = NullHandle ;

/*---------------------------------------------------------------------*/
HTTPConnectionHandle ConnectionAllocate(dword token)
{
    T_HTTPConnection *p_conn ;
    word i ;

    /* Make sure multiple threads don't mess with each other */
    /* Only one thread at a time can do a connection allocation */
    ThreadPSem(G_syncAllocs);

    /* Find a socket that has a free handle block */
    for (i=0; i<MAX_CONNECTIONS; i++)  {
        if (G_connections[i] == NullHandle)
            break ;
    }

    /* If we didn't find a connection available, return NULL */
    if (i >= MAX_CONNECTIONS)  {
        i = HTTP_CON_NONE ;
    } else  {
        /* Create a new connection block */
        G_connections[i] = MemAlloc(sizeof(T_HTTPConnection), HF_DYNAMIC | HF_SHARABLE, HAF_ZERO_INIT) ;
        HandleModifyOwner(G_connections[i], GeodeGetCodeProcessHandle()) ;

        /* Initialize the structure */
        p_conn = ConnectionLock(i) ;
        p_conn->token = token ;
        p_conn->socketState = STATE_UNCONNECTED ;
        ConnectionUnlock(i) ;
    }

    ThreadVSem(G_syncAllocs);

    return i ;
}

/*---------------------------------------------------------------------*/
T_HTTPConnection *ConnectionLock(HTTPConnectionHandle conn)
{
    T_HTTPConnection *ret;

    if (conn != HTTP_CON_NONE)  {
        if (G_connections[conn]) {
            ret = MemLockExcl(G_connections[conn]) ;
	    /* fixup path, if needed */
	    if (ret->path && (PtrToOffset(ret->path) == offsetof(T_HTTPConnection, pathbuf))) {
		ret->path = (((dword)(ret->path)) & 0x0000ffffL) |
		            (((dword)(ret)) & 0xffff0000L);
	    }
	    return ret;
	}
    } else {
#if 0
EC(     FatalError(-1 /* CANNOT LOCK UNKNOWN CONNECTION */) ; )
#endif
    }

    return NULL ;
}

/*---------------------------------------------------------------------*/
void ConnectionUnlock(HTTPConnectionHandle conn)
{
    if (conn != HTTP_CON_NONE)  {
        MemUnlockExcl(G_connections[conn]) ;
    } else {
EC(     FatalError(-1 /* CANNOT LOCK UNKNOWN CONNECTION */) ; )
    }
}

/*---------------------------------------------------------------------*/ 
HTTPConnectionHandle ConnectionFind(dword token, T_HTTPConnection **pp_conn)
{
    T_HTTPConnection *p_conn ;
    MemHandle mem ;
    word found = HTTP_CON_NONE ;
    word i ;

    /* Don't go searching while allocations are occuring.  Messy.
       Skip any connections with STATE_FREE.
       If the connection is found, return it locked to prevent it from
       being freed while our caller is toying with it. */
    ThreadPSem(G_syncAllocs);
    for (i=0; i<MAX_CONNECTIONS; i++)  {
        if ((mem = G_connections[i]) != NullHandle)  {
            p_conn = MemLockShared(mem) ;
            if ((p_conn->socketState != STATE_FREE) && 
	      (p_conn->token == token))  {
		found = i ;
		*pp_conn = p_conn ;
                break ;
            }
	    MemUnlockShared(mem) ;
        }
    }
    ThreadVSem(G_syncAllocs);

    return found ;
}

/*---------------------------------------------------------------------*/
void ConnectionFree(HTTPConnectionHandle conn)
{
    ThreadPSem(G_syncAllocs);
    if (conn < MAX_CONNECTIONS)  {
        if (G_connections[conn])  {
	    /*
	     * Lock the connection to ensure no one else has it locked
	     * when we free it.  The syncAlloc semaphore above will prevent
	     * ConnectionFind from finding it until long after it's gone.
	     */
	    MemLockExcl(G_connections[conn]) ;
            MemFree(G_connections[conn]) ;
            G_connections[conn] = NullHandle ;
        } else {
            EC( FatalError(-1  /* FREEING CONNECTION WHEN ALREADY FREED! */) ; )
        }
    } else {
        EC( FatalError(-1 /* ILLEGAL CONNECTION HANDLE */) ; )
    }
    ThreadVSem(G_syncAllocs);
}


/*---------------------------------------------------------------------*/
void ConnectionsInit(void)
{
    word i ;

    G_syncAllocs = ThreadAllocSem(1) ;
    HandleModifyOwner(G_syncAllocs, GeodeGetCodeProcessHandle()) ;

    /* Mark all socket connections as free to be used */
    for (i=0; i<MAX_CONNECTIONS; i++)  {
        /* No connections defined */
        G_connections[i] = NullHandle ;
    }
}

/*---------------------------------------------------------------------*/
void ConnectionsDeinit(void)
{
    word i ;
    ThreadPSem(G_syncAllocs) ;
    for (i=0; i<MAX_CONNECTIONS; i++)  {
        if (G_connections[i])  {
           MemFree(G_connections[i]) ;
           G_connections[i] = NullHandle ;
        }
    }
    ThreadVSem(G_syncAllocs) ;

    ThreadFreeSem(G_syncAllocs) ;
}
