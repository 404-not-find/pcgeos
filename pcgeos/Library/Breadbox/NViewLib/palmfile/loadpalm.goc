/*
 *      LOADDOC.GOC - view files in PalmOS "Doc" format
 *
 *      by Marcus Groeber, mgroeber@compuserve.com
 *
 */

@include <stdapp.goh>
@include <foam.goh>
#include <ansi\stdio.h>
#include <ansi\string.h>

@include <nview.goh>

#include "palmfile.h"

/*
 *      Structure describing the first recorder of a Doc file.
 *      Taken from makedoc7.cpp.
 */
struct tDocRecord0 {
        word wVersion;          // 1=plain text, 2=compressed
          #define PALM_DOC_PLAIN        1
          #define PALM_DOC_COMPRESSED   2
        word wSpare;
        dword dwStoryLen;       // in bytes, when decompressed
        word wNumRecs;          // text records only; equals tDocHeader.wNumRecs-1
        word wRecSize;          // usually 0x1000
        dword dwSpare2;
};


/*
 *      Decompress a record in Doc format from/to a static buffer.
 *      Almost unchanged from makedoc7.cpp (added strict checking against
 *      buffer overruns).
 *
 *      *in_buf         Compressed data
 *      len             Size of data at *in_buf
 *      *out_buf        Buffer for decompressed data
 *      limit           Maximum space available at *out_buf
 *
 *      Return:         Amount of data written to *dst.
 *
 */
word DocDecompress(byte *in_buf, word len, byte *out_buf, word limit)
{
    #define DISP_BITS 11
    #define COUNT_BITS 3

    word i,j,m,n;
    word c;

    for (j=i=0; j<len && i<limit; )
    {
      // take a char from the input buffer
      c = in_buf[j++];

      // separate the char into zones: 0, 1..8, 9..0x7F, 0x80..0xBF, 0xC0..0xFF

      // codes 1...8 mean copy that many bytes; for accented chars & binary
      if (c>0 && c<9)
              while(c-- && i<limit) out_buf[i++] = in_buf[j++];

      // codes 0, 9...0x7F represent themselves
      else if (c<0x80)
              out_buf[i++] = c;

      // codes 0xC0...0xFF represent "space + ascii char"
      else if (c>=0xC0)
      {
              out_buf[i++] = ' ';
              if (i<limit) out_buf[i++] = c ^ 0x80;
      }

      // codes 0x80...0xBf represent sequences
      else
      {
              c <<= 8;
              c += in_buf[j++];
              m = (c & 0x3FFF) >> COUNT_BITS;
              n = c & ((1<<COUNT_BITS) - 1);
              n += 3;
              while (n-- && i<limit)
              {
                      out_buf[i] = out_buf[i-m];
                      i++;
              }
      }
    }

    return i;                           // return amount of decompressed data
}

void DocConvert(byte *buf, word len)
{
    word i;

    for(i=0; i<len; i++)                // Convert LF to CR (for text object)
      if(buf[i]=='\n')
        buf[i] = '\r';

    // Convert "Windows" character set to Geos
    LocalCodePageToGeos((char *)buf, len, CODE_PAGE_LATIN_1, '.');
}

NViewStatus LoadPalmDoc(FDocumentDir dir, char *file, optr text)
{
    PalmDBHandle db;
    MemHandle headmem, datamem, bufmem;
    struct tDocRecord0 *head;
    byte *data, *buf;
    word size, rec;
    word recSize,compress,numRecs;
    dword creator, type;
    NViewStatus ret = NVS_NO_ERROR;

    FilePushDir();
    FoamSetDocumentDir(dir);
    db = PalmDBOpenDOS(file);
    FilePopDir();

    if(db)
    {
      // Check Palm file type info for correctness
      creator = PalmDBGetInfo(db, PALM_INFO_CREATOR);
      type = PalmDBGetInfo(db, PALM_INFO_TYPE);

      if(memcmp(&creator,"REAd",4)==0 && memcmp(&type,"TEXt",4)==0)
      {
        // Access header record of document file
        headmem = PalmDBReadRec(db, 0, &size);

        // Get interesting fields and convert endian-ness...
        head = MemLock(headmem);
        compress = PalmWORD(head->wVersion);
        numRecs = PalmWORD(head->wNumRecs);
        recSize = PalmWORD(head->wRecSize);
        MemFree(headmem);

        if(compress == PALM_DOC_COMPRESSED)
        {
          bufmem = MemAlloc(recSize, HF_DYNAMIC, HAF_STANDARD_NO_ERR);
        }

        for(rec=0; rec<numRecs; rec++)
        {
          datamem = PalmDBReadRec(db, 1+rec, &size);
          if(compress == PALM_DOC_COMPRESSED)
          {                             // decompress compressed record
            data = MemLock(datamem);
            buf = MemLock(bufmem);
            size = DocDecompress(data, size, buf, recSize);
            MemFree(datamem);           // compressed data no longer needed
            data = buf;                 // work on decompressed copy
          }

          DocConvert(data, size);       // Geos-ize data stream
          @call text::MSG_VIS_TEXT_APPEND_PTR((char *)data, size);

          if(compress == PALM_DOC_COMPRESSED)
            MemUnlock(bufmem);          // free buffer for decompressed data
          else
            MemFree(datamem);           // free raw data
        }

        if(compress == PALM_DOC_COMPRESSED)
        {
          MemFree(bufmem);              // release buffer
        }
      }
      else
        ret = NVS_UNHANDLED_FORMAT;     // unsupported file format

      PalmDBClose(db);                  // done
    }
    else
      ret = NVS_CANNOT_OPEN_FILE;       // cannot open file

    return ret;
}
