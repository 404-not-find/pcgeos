COMMENT `-----------------------------------------------------------------------


				GenDynamicListClass

$Id: GenDynamicList.doc,v 1.1.34.1 97/03/29 03:37:43 canavese Exp $

Synopsis
--------
	The GenDynamicListClass is a scrolling list version of the 
	GenItemGroup object that allows an application to pass monikers to 
	the object as needed, rather than specifying a GenItem object for
	each item in the list.  This allows:

		a) Very long lists that can be stored by the application in 
		   any way it wants, and as efficiently as the application 
		   wants;

		b) Applications to easily create a scrolling list from arbi-
		   trarily organized data.
		   
	An application specifies the number of items in the list.  If the 
	dynamic list is to be scrollable, and the dynamic list monikers will
	not be simple text, the application will also wnat to set up a 
	HINT_FIXED_SIZE for the scrolling list.  When the dynamic list
	object becomes realized on screen, it will query its output each
	visual moniker it needs to display as an item in the list.  At any
	time, the application can remove or add items from the dynamic list,
	or change the total number of items and start with all new items.
	
	All the same messages that are passed to the GenItemGroupClass can be
	passed to GenDynamicList objects, with the exception of MSG_GEN_ITEM_
	LIST_GET_ITEM, which has no meaning for dynamic lists.

Limitations
-----------
	A GenDynamic list, when querying a destination in a different 
	thread (i.e. the application thread, when the list is in the UI thread,
	will be slightly less responsive when being realized and when scrolling,
	although performance of both is still acceptable.

Alternatives
------------
	For normal exclusive item groups, where the items are implemented as
	generic objects, use GenItemGroupClass rather than GenDynamicListClass.

	For normal non-exclusive groups, where items are implemented as
	generic objects, use GenBooleanGroupClass for checkbox-style items,
	or GenItemGroupClass for a scrolling list of non-exclusives.


Implementation Status
---------------------
	Final preliminary specification.  - 2/20/92

See Also
--------
	GenItemGroupClass, documented in Library/User/Gen/genItemGroup.asm
	GenBooleanGroupClass, documented in Library/User/Gen/genBooleanGroup.asm
		

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------
	See GenItemGroupClass documentation for terminology.

Relationships/Context
---------------------
	Same as GenItemGroupClass; see GenItemGroupClass documentation for 
	context.


Conceptual Overview
-------------------
	Programmers should first study the GenItemGroupClass documentation to
	understand how a non-dynamic list works before continuing on.

	
Initial setup of a dynamic list
-------------------------------
	
	A dynamic list is set up much like a GenItemGroup object, with a
	a little additional information.   First, the number of items must
	be set by the application.  If an application won't know the number
	of items until after the list is realized, it can initially set
	the number of items to zero (the default), then call MSG_GEN_
	DYNAMIC_LIST_INITIALIZE when the number is known. 
	Another piece of instance data is the message for the dynamic list to
	send to the destination when querying for an item's moniker.  

	For example, to set up a list of four colors, with the third item
	(MS_BLUE) selected, you could do the following:

		typedef enum /* word */
			MC_RED, MC_YELLOW, MC_BLUE, MC_GREEN
		} MyColors;
		#define NUM_COLORS 	MC_GREEN+1


		@object GenDynamicListClass MyList = {
			GILI_selection = MC_BLUE;
			GILI_notifyMsg = MSG_NOTIFY_COLOR_CHANGED;

			GDLI_numSelections = NUM_COLORS;
			GDLI_queryMsg = MSG_QUERY_COLOR_MONIKER;
		}

	The query message should be defined as follows:

		@message (GEN_DYNAMIC_LIST_QUERY) MSG_QUERY_COLOR_MONIKER;

	The parameters for this message are "void (optr list, word item),"
	where list refers to the object sending out the query, and "item"
	refers to the position (i.e. the identifier) of the item that needs a 
	moniker to be set.   The message will be sent to the destination for
	the list.  You can also subclass the list's MSG_GEN_DYNAMIC_LIST_QUERY_-
	ITEM_MONIKER to set up your subclassed object to get monikers for 
	itself, or to redirect the message to location other than the 
	destination.

	As the dynamic list becomes visible, it will start querying the dest-
	ination for the monikers (in our example, sending a MSG_QUERY_COLOR_-
	MONIKER).  The handler is expected to send a MSG_GEN_DYNAMIC_LIST_-
	REPLACE_ITEM_MONIKER back to the list.   MSG_GEN_DYNAMIC_LIST_REPLACE_-
	ITEM_MONIKER is similar to MSG_GEN_REPLACE_VIS_MONIKER in the ways that
	the moniker can be passed.  You can set an item's moniker from many
	different sources (visual moniker, moniker list, text string, graphics 
	string, or token.db token).

	Simpler messages are provided for the usual cases:
	MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR for passing a VisMoniker
	in ^lcx:dx, and MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT for passing an 
	fptr to null-terminated text.

	For our example, we'll pass a simple pointer to a null-terminated string
	that should be the moniker:

	    char *listMonikers[NUM_ITEMS] = {
				"Red", "Yellow", "Blue", "Green"
	    };

	    @method DynamicProcessClass, MSG_QUERY_COLOR_MONIKER {
	        @send caller::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
				       item, listMonikers[item]);
	     }

	If you want the moniker requested to be disabled, you will need to use
	the more flexible MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER, setting 
	RMIF_NOT_ENABLED in the itemFlags.

	        @send caller::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
			item, RMIF_NOT_ENABLED, VUM_NOW, 0, 0, 0, VMDT_STRING, 
			VMST_FPTR,  (dword) listMonikers[item]);


	The other common case besides null-terminated text is to pass an optr
	to a VisMoniker.  Again there is a simplified message for this, 
	MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR.

	Often an application will want to create a list of objects for a 
	dynamic list on the fly and of variable size, i.e. files in a directory.
	Typically what an application will do in this situation is create a 
	memory block of the needed size, copy the text strings to use for 
	monikers into the block, and unlock the block.  Then for each time
	the query message is called, it can lock the block, point at the 
	desired item, do a @call MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER,
	and unlock the block.  (The handler should not use @send to set the 
	moniker, because if the block is unlocked when the message is handled
	by the GenDynamicList, the block may move, thus leaving the pointer to
	the moniker dangling.)


	Actions and queries from a dynamic list
	---------------------------------------

	Getting and getting the selection from the list is the same as for
	GenItemGroupClass, remembering that the implied identifier for each 
	item is its position in the list.  Likewise with notifications.  See
	GenItemGroupClass for more info.
				

				
	Setting a new number of items
	--------------------------------

	Sometimes an application will want to set a new number of items for
	the dynamic list, to reflect new data.  This can be done as follows:

		@call list::MSG_GEN_DYNAMIC_LIST_INITIALIZE(NUM_COLORS);

	where the argument is a word value for the new number of items.
	The list will re-request monikers for all visible items, and scroll 
	back to show the top item.

	If you just want to redraw all the monikers, but keep the current number
	of items, you can do a:
		
		@call list::MSG_GEN_DYNAMIC_LIST_INITIALIZE(GDLI_NO_CHANGE);

	The list by default will deselect all items and will not scroll to the
	top of the list.  You should call MSG_GEN_ITEM_GROUP_SET_-
	SINGLE_SELECTION and/or MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE to set 
	a selection or to scroll elsewhere.

	You can get the current number of items by calling MSG_GEN_DYNAMIC_-
	LIST_GET_NUM_ITEMS, which returns a word value corresponding
	to the number of items.


	Adding or removing an item in a dynamic list
	---------------------------------------------
	One has to handle adding and removing entries in a dynamic list
	specially.  To add one or more dynamic list items, do the following:
	
	     @call list::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(position, numItems);

	where position is the place to insert the first new item, and numItems
	is the number of items to insert.  Entries after itemPosition will be 
	moved down as needed.  If needed, a moniker query will be sent out to 
	get the moniker for the new item.  The current selection will be updated
	as necessary (i.e. selections after the added item will have their 
	position updated).
	
	To add an entry to the end, you can do the following:

	     @call list::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(GDLP_LAST, 1);

	To remove one or more items, do the following:
	
	     @call list::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(position, numItems);
		
	where position is the position of the first item to remove, and numItems
	is the number of items to remove.  Subsquent entries will be moved up.
	If the item was previously selected, its selection will be removed.
	Other selections after the deleted ones will have their positions 
	updated.
	
	To remove the last entry, you can do the following:

	     @call list::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(GDLP_LAST, 1);
	     

Setting the top item
Display-only lists
Delayed mode
Indeterminate mode
Generic attributes
Custom double-press behavior
Miscellanious
	These all apply to the dynamic list the same way as they do to the
	GenItemGroup.  See corresponding section in GenItemGroupClass for more 
	info.


------------------------------------------------------------------------------`
