COMMENT @MECHANISM DESCRIPTION-------------------------------------------------


		   Large (32-bit) Visible Tree Support


	$Id: LargeVisTree.doc,v 1.5.34.1 97/03/29 03:36:52 canavese Exp $

Synopsis
--------

The PC/GEOS visible object library supports 16-bit coordinate bounds, or about
112 inches at 72 dots per inch using the full legal graphics space of -4096 to
+4096.  While this is sufficient for many & indeed most needs, there is
always the exception, such as the need to support a spreadsheet 8,000 cells
high with an overlapping draw object layer.  It is the purpose of this document
to describe how to meet such needs by adding behavior to existing visible
object classes, and making use of some built-in GenView & VisContent
support to bridge the 16/32 bit gap.  With this approach, it is possible to:

	* Create documents spanning up to 940 miles on each side in
	  a visible object tree.

	* Utilize 16-bit visual objects (Such as VisText) anywhere within
	  a 32-bit space, transparently to those objects

	* Support Visual Layers (Text layer, Draw Object layer, spreadsheet
	  layer, etc.) in 32-bit space

Limitations
-----------
	* Individual graphics calls can only draw to one 16-bit space at a
	  time

	* Doesn't just "work all by itself."  The techniques are
	  discussed here, but there are not built-in visible object
	  classes to do this stuff, outside of limited VisContent
 	  support.

Alternatives
------------
	* GenView may also be set up to communicate directly to a
	  process, which is then responsible for drawing, handling
	  mouse events, etc.  & could use the 32-bit translation
	  capability of the graphics system to draw to a 32-bit
	  space.  This approach is not compatible with existing
	  visible library objects, such as VisText & the graphics
	  object library.

Implementation Status
---------------------
	NOT YET FUNCTIONAL.
	WAITING FOR JIM TO FINISH SOME GRAPHICS WORK...

See  Also
---------
	Object definitions:
		Library/User/Gen/genView.asm object header, particularly the
			section on "Large Documents"


;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------

[Visible] Layer	- 	A Visible tree (or one object), which covers the
			entire document space.  In simple documents, there
			will only be one of these.  If the document may
			be large, i.e. in 32-bit space, then the visible
			bounds stored in VisClass are ignored, & the object
			must provide special handling for drawing & mouse
			events (i.e. can't rely on default vis behavior for
			these messages). Visible layers are generally placed
			immediately below the VisContent object.

Single Object [Visible] Layer	-
			A Visible Layer consisting of a single object,
			such as GeoCalc's spreadsheet object.

			Legal parents:	VisContent
			Legal children:	none

Large Composite [Visible] Layer -
			A Visible Layer consisting of a Vis object having
			Large Composites for children  (Future GeoWrite model,
			in which each page is a Large Composite, in a linear
			32-bit document)

			Legal parents:	VisContent
			Legal children:	Large Visible Composites

Large Object [Visible] Layer	-
			A Visble layer consisting of a Vis object having
			Large Objects for children  (Graphics object library
			model)

			Legal parents:	VisContent
			Legal children:	Large Visible Objects

Large [Visible] Composite	-
			A VisCompClass object which has been subclassed to add
			a 32-bit document offset to it.  The 16 bit visible
			bounds are still valid, but are considered to be
			positioned at the 32-bit offset within document space.
			Children are legal VisClass & VisComp objects, whose
			bounds are also valid.

			Legal parents:	VisContent or Large Composite Layer
			Legal children:	Large Visible Composites,
					Large Visible Objects,
					Visible Objects

Large [Visible] Object		-
			A visible object having at least a 32-bit offset
			added to it, & possibly full 32 or 48 bit (including
			fractional) bounds.

			Legal parents:	VisContent or Large Composite Layer
			Legal children:	none


Relationships/Context
---------------------
	A GenView may be a generic child of either a GenPrimary or GenDisplay,
	or a GenInteraction which is placed below one of the above.

	The GenView "content" field, when using a Large Visible Tree,
	references a VisContent, which may be, & often is, run by a 
	different thread that the GenView is.  This is the boundary between
	the Generic UI & Visual Object worlds.

	The Visible Object library, including the VisContent, is implemented
	as a portion of the PC/GEOS User Interface.  Applications may subclass
	these objects, adding instance data & behavior in their own code.

	The Visible tree hierarchy starting at the VisContent is desribed
	above in "Visual Object Hierarchy".

	Since visible objects are capable of presenting data, they may be used
	alone or in trees to represent a document to the user.
	
	Visible objects, as all other objects, reside in memory blocks on the
	heap.  While not necessary, it is possible to place visible objects
	in VM blocks, thereby allowing documents consisting of visible trees
	to be saved out to disk as a file.


Conceptual Overview
-------------------

	Visual Object Hierarchy
	-----------------------
	The top visual object in a any tree residing in a GenView must
	be one of GenContent, VisContent, or VisContent.  The use of
	Large Visible Trees is limited to VisContent, the object most
	commonly used for 16-bit visible object documents.

	The VisContent should be looked upon as a conduit for input &
	control messages from the GenView to your document;  it should be
	subclassed only for the purpose of control; it should not be saved
	out as part of the document, & hence should not be extended to
	include permanent document information.  Anything which is considered
	to be part of the document should be stored in objects BELOW the
	VisContent in the visible tree.

	In oder to keep information BELOW the VisContent organized, the
	next object down from the VisContent should be a "Layer" object,
	that is, a VisCompClass, or a subclass thereof, which represents the
	document, or a layer of the document.  This is a good place to store
	extra info pertaining to the layer as a whole.  Example layers:
	
	* Spreadsheet Object -- A single object which implements
				visually & interactively a spreadsheet

	* Graphics Object Body --  Top object of a visible tree 
				   consisting of objects from the
				   Graphics Object Library.

	* Write Document -- An object having as children Large
			    Composites, which each represent
			    one page of a larger word processing
			    write document.
		
	The user of layers also opens up the possibility of using multiple
	layers, in order to have graphic overlays, or compound documents,
	which are made up of multiple document sub-types.

	Note that each of the layers above have quite different needs, &
	are implemented quite differently.  This makes supporting them in
	32-bit document space all the more interesting.


	Supporting 32-bit coordinates using the Visible Object Library
	--------------------------------------------------------------
	The visible object library was designed with a 16-bit integer 
	coordinate system in mind; all instance data, pass & return
	parameters are limited to a word.  A 32-bit visible object library
	is not provided, mostly because there is not a single model that
	works well for all applications, nor a model that works efficiently
	in all situations.  Thus, application writers must understand the
	issues involved, & the techniques available for dealing with them,
	in order to solve the problem.

	To get a visible object tree to comfortably live on a 32-bit
	document space, under GenView, which does support 32-bit coordinates,
	it is necessary to overcome the following problems:

		* 16-bit drawing commands supported by PC/GEOS Graphics System
		* 16-bit visual bounds stored in VisClass
		* Default MSG_VIS_DRAW handling, which looks at visual bounds
		* 16-bit geometry manager
		* 16-bit data size in standard mouse events
		* Default mouse event handling, which looks at visual bounds

	Let's look at each of these:

		16-bit drawing commands supported by PC/GEOS Graphics System
		------------------------------------------------------------
		Though the graphics system only supports 16-bit drawing
		commmands, it does provide 32-bit translation capability
		in transformation matrices.  Thus, to draw to a 32-bit space,
		the graphics space just has to be first translated somewhere
		onto the 32-bit document.  The trick is how to map this
		translation cleanly into the visible object library.  None
		of the built-in classes addresses this question directly, but
		these classes may be subclassed so as to either:

			a) Store 32-bit translation with each visible object
			   (Large Visible Object solution)

			b) Store 32-bit translation in visible composites, so
			   as to shift an entire visible branch into 32-bit
			   space (Large Visible Composite solution)

		Objects using solution (a) simply apply their translation,
		draw, then unapply anytime they wish to draw.  Large
		Composites (solution b) have to make sure that any GState being
		used by themselves or their children has first had its 32-bit
		translation applied to it.  The visible object library passes
		GStates around in MSG_VIS_DRAW, & MSG_VIS_VUP_CREATE_GSTATE, so
		these are the places that a Large Composite needs to intercept
		a message in order to make the translation.  As long as
		translations are always made relative to the current
		transformation state, using GrApplyDWordTranslation, & undone
		before a GState is returned to a parent caller, a visible tree
		can have any number of LargeComposites along any one branch, &
		still generate the correct results.

		16-bit visual bounds stored in VisClass
		---------------------------------------
		A single VisText object is limited to a 16 bit space.  Likewise
		is true for Graphics objects from the Graphics Object Library.
		No attempt is made to stretch these so that they can have
		width or height of 32-bits.  Instead, the technique listed
		in the previous section is used to shift these 16-bit sized
		objects into 32-bit space.  Thus, 16-bit visual bounds is
		not a problem in invidual visual objects, nor in Large
		Composites, which themselves have 16-bit bounds.  16-bit bounds
		ARE a problem, however, in the VisContent itself, & in
		Layer objects.  The solutions to these are:

		VisContent    -- Bounds are left null, & not used.  The
				 responsibility for setting the document size
				 in the GenView is shifted to the application.
		
		Layer	      -- Bounds are left null, & not used.  The bounds
				 of this object may or may not be important
				 to the application.  If they are, the
				 application can simply add new 32-bit bounds
				 to the instance data of its layer object
				 (which is not supplied by the system, but
				 instead has to be created by the application
				 by subclassing VisCompClass.)

		Default MSG_VIS_DRAW handling, which looks at visual bounds
		----------------------------------------------------------
		Not a problem for Large Composites, which have children having
		normal 16-bit visual bounds.  This is a problem, however, for
		the VisContent & Visual Layer objects.  The solutions to
		this are:

		VisContent -- In large document model, sends
				MSG_VIS_DRAWs to all children.

		Visual Layer -- Implementation of MSG_VIS_DRAW becomes a
				responsibility of this object, which
				presumably has been designed to match the
				type of objects that will be its children.
				If layer itself has no translation, then
				MSG_VIS_DRAW could be sent to ALL children,
				& thus get the job done, but this will be
				quite inefficient in many cases; a winning
				code strategy here should limit the message
				transmittal to only those objects visible
				in the view.

		16-bit geometry manager
		-----------------------
		Will still work as designed within individual Large Composites.
		Will NOT work above that level, so any geometry (positioning,
		sizing of large composites or layers) will have to be done
		by the application.

		16-bit data size in standard mouse events
		-----------------------------------------
		LARGE mouse events are defined to solve this problem.  LARGE
		mouse events pass coordinates in 32-bit integer, 16-bit 
		fraction quantities. In order to keep efficiency high, more
		primitive mouse info is passed between GenView & VisContent,
		& then reconstructed into full LARGE mouse events within
		the VisContent.  This is transparent to Large Vis Tree
		implementations, but more info can be found in the GenView
		docs, in the "Large Document" section, for those interested.

		Objects within the tree are provided the option when grabbing
		the mouse of whether small or large mouse events are desired.
		Objects having 32-bit translations may intercept 
		MSG_VIS_VUP_GRAB_WITHIN_VIEW so as to specify a 32-bit offset
		to be made to all mouse data until the grab ends.  This, as
		in the 16-bit drawing space solution, makes it possible for
		a composite to make a 32-bit document shift transparent to
		children.

	 	Default mouse event handling, which looks at visual bounds
		----------------------------------------------------------
		Mouse processing within a LargeComposite is not a problem;
		the default behavior in VisCompClass continues to do the 
		right thing with the 16-bit children.  Mouse behavior at 
		the VisConten & Layer levels, however, must be altered:

		When no object within the vis tree has the mouse grabbed,
		LARGE mouse events are sent to the VisContent itself.  By
		default these are sent to the first visible child (the first
		Layer object)  Apps having more than one layer will have to
		subclass the VisContent & decide how to process LARGE
		implied mouse events.  Depending on the nature of the Layer,
		it may use the events directly, pass them to one or more
		Large Composites or Large Vis Objects, or if the events fall
		within their 16-bit bounds, convert them to 16-bit mouse
		events & send on to VisCompClass for default processing
		(that of sending the event to the child visible object under
		the point).


Warnings
--------
	Prepare to roll up your sleeves.  This in not a "Just set XXX in
	the .ui for magical, instantaneous results" subject.


Usage:  Setting up a Large Visible Tree within a GenView
--------------------------------------------------------

	GenView/VisContent setup
	---------------------------
	In the GenView, set:
		GVA_WINDOW_COORDINATE_MOUSE_EVENTS

	Set the content to be a VisContent (32-bit support is not available
	using just a VisContent, nor in GenContent).

	In the VisContent, Set:
		VCNA_WINDOW_COORDINATE_MOUSE_EVENTS
		VCNA_LARGE_DOCUMENT_MODEL.

	VCNA_WINDOW_COORDINATE_MOUSE_EVENTS means that the private
	communication of mouse events between the GenView &
	VisContent is in window coordinates instead of doc
	coordinates. All mouse events sent on from the VisContent
	are in doc coordinates.

	VCNA_LARGE_DOCUMENT_MODEL means that the VisContent
	contains a large (32-bit) document, and that its Vis children
	are "layers" on this document.  As a result, whenever the
	VisContent receives any of the following messages, it will
	forward them to all of its children:

		MSG_META_CONTENT_VIEW_ORIGIN_CHANGED
		MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED
		MSG_META_CONTENT_VIEW_SIZE_CHANGED
		MSG_VIS_DRAW

	In addition, when this flag is set, the VisContent becomes
	capable of handling the message
	MSG_VIS_ISO_CONTENT_SET_DOC_BOUNDS.

	The handler sends a MSG_GEN_VIEW_SET_DOC_BOUNDS to the
	GenView, and sends MSG_VIS_LAYER_SET_DOC_BOUNDS to all of its
	visible children.  In this way, all layers can be kept
	up-to-date on the current document bounds. 

	New Object Class Definitions
	----------------------------
	The visible object library does not provide Visible Layer nor
	Visible Composite objects.  These you'll have to create yourself,
	by subclassing off of VisCompClass, & adding the instance data &
	behavior described below  (See sample application "LargeVisTree"
	for one implementation).   The Graphics Object Library
	does export a Layer object for containing Graphics objects, which
	themselves are large 32-bit visible objects.  See the Graphics
	Object Library docs for info.

	Single -vs- multiple Visual Layers
	----------------------------------
	If you will have more than one "layer", or visible child of the 
	VisContent, you will need to subclass the VisContent in order
	to direct a number of messages to whichevery layer(s) you wish them
	to go to.  For instance, a Publish type program may or may not wish
	all layers to redraw, depending on the mode, & likely to only want
	input data going to one layer, or at the very least will employ
	some type of algorithm to try & figure out which object in which
	layer the user wishes to interact with.  The messages that will need
	to be redirected are:

		MSG_VIS_DRAW

		MSG_META_LARGE_PTR
		MSG_META_LARGE_START_SELECT
		MSG_META_LARGE_END_SELECT
		MSG_META_LARGE_START_MOVE_COPY
		MSG_META_LARGE_END_MOVE_COPY
		MSG_META_LARGE_START_FEATURES
		MSG_META_LARGE_END_FEATURES
		MSG_META_LARGE_START_OTHER
		MSG_META_LARGE_END_OTHER
		MSG_META_LARGE_DRAG_SELECT
		MSG_META_LARGE_DRAG_MOVE_COPY
		MSG_META_LARGE_DRAG_FEATURES
		MSG_META_LARGE_DRAG_OTHER

	The VisContent provides default behavior for all of above,
	if VCNA_LARGE_DOCUMENT_MODEL is set, of sending the message on
	to the first visible child.  This eliminates the need to
	subclass & redirect the messages in the Single Visual Layer case.

		MSG_META_CONTENT_TRACK_SCROLLING (if using track scrolling)

	This message is sent, by default, to the TARGET child of the
	VisContent.  Be sure to subclass this behavior so that the
	message goes to the right object (in the case of GeoCalc, the
	message always has to go to the spreadsheet layer, even if the
	graphic body layer is the current target).

	The messages you may want to send on to one or more layers are:

		MSG_META_CONTENT_VIEW_WIN_OPENED:

		    This message MUST be sent on to the
		    VisContentClass for default handling.  Send
		    to superclass BEFORE sending on to layer.

	Requirements of Layers, Large Composites
	----------------------------------------

	Layers will need to handle MSG_VIS_LAYER_SET_DOC_BOUNDS which
	will be sent out to all Vis children of a large VisContent
	object. 

	The job of Layers and Large Composites is to fool their children into
	not realizing that they are offset in 32-bit space.  To do this:

		* Store in the object's instance data the 32-bit
		  offset, if any, that the Composite/Layer as a
		  whole resides at in 32-bit space.  This will be
		  referred to as the "32-bit translation".

		* Intercept MSG_VIS_DRAW, & make any 32-bit translation
		  adjustment necessary to the GState (Using
		  GrApplyDWordTranslation). Be sure to undo this action before
		  returning, so that the translation matrix is returned as
		  it was upon entry.  In between, you need to get
		  MSG_VIS_DRAW on down to the children.  If children
		  are 16-bit entities, the superclass may be called to
		  continue handling.  for 32-bit children, custom handling
		  must be provided.

		* Intercept MSG_VIS_VUP_CREATE_STATE, call the superclass so
		  as to fetch a GState, & then make any 32-bit translation
		  adjustment necessary to that GState before returning.

		* Intercept MSG_VIS_VUP_GRAB_WITHIN_VIEW, & for the mouse
		  grab case (VCGF_MOUSE & VCGF_GRAB set) add in the 32-bit
		  translation adjustment necessary to VGWVD_translation in
		  the VupGrabWithinViewData structure before passing
		  the message onto the superclass.

		* A custom handler for LARGE mouse events must be provided,
		  to handle implied mouse events (mouse events occuring while
		  nothing has the mouse grabbed).

		  If children are 16-bit entities:
			The LARGE mouse events should be converted to small
		  	ones & then sent on to the superclass for default
			handling (Sends event to first visible child found
			under location of mouse).  See note on how to perform
			the conversion in the "Programming Tips" section below.
			
		  If children are 32-bit entities:
			No default behavior exists.  First, you'll have to
			subtract off your 32-bit translation from each of the
			X & Y mouse positions.  Then, as children generally
			will want LARGE mouse data, your main task becomes
			deciding which of the children to send the data on to.

	Requirements of 32-bit Visible Objects
	--------------------------------------
	Be careful NOT to reset/override the translation matrix in any gstate
	passed or attained via MSG_VIS_VUP_CREATE_GSTATE;  all additional
	effects should be accumulative, & the gstate returned as it was.
	
	Depending on the nature of the parent Large Composite, implied mouse
	data may arrive as either small or LARGE mouse events.  For instance,
	a Large Composite designed explicitly for holding 32-bit Visible 
	Objects would always send mouse data on in LARGE format.  A Large
	Composite designed to hold either 16-bit or 32-bit visible objects
	would have to send all mouse data on in small format, so as not to
	screw up 16-bit objects, which don't know about the LARGE messages.
	If you wish for your visible object to be compatible with the latter
	model, be sure to handling 16-bit (small) mouse event.s
	
	When grabbing the mouse, you have a choice between small & LARGE mouse
	events.  Use VisGrabMouse/VisForceGrabMouse to receive small events,
	VisGrabLargeMouse/VisForceGrabLargeMouse to receive LARGE events.

	Requirements of 16-bit Visible Objects
	--------------------------------------
	Be careful NOT to reset/override the translation matrix in any gstate
	passed or attained via MSG_VIS_VUP_CREATE_GSTATE;  all additional
	effects should be accumulative, & the gstate returned as it was.

	16-bit Visible objects will always receive small mouse events.
	
	In order to keep the user from pressing the mouse button down on
	an object, & then auto-scrolling until the 16-bit coordinates
	wrap, the object should send MSG_VIS_VUP_SET_MOUSE_INTERACTION_BOUNDS,
	to keep the view from scrolling too far.  If drag scrolling DOES
	need to work over a 32-bit area, then either 32-bit data will have
	to be used, or a mechanism added to detect when selection should be
	picked up by the next object.
	

In-Depth: <Topic #1>
--------------------
	<First in-depth topic goes here>

See Also
--------
	Documentation:
		Management/UserInterface/Documentation/ContentUsageOfWinRoutines

	Sample applications:
		Appl/SDK_Asm/LargeVisTree

	Object definitions:
		Library/User/Gen/genView.asm object header
		Library/User/Vis/visContent.asm object header
		Library/User/Vis/visContent.asm object header

	Vis messages, defined in Library/User/Vis/visClass.asm:
		MSG_VIS_DRAW
		MSG_VIS_VUP_CREATE_STATE
		MSG_VIS_VUP_GRAB_WITHIN_VIEW
		MSG_VIS_VUP_SET_MOUSE_INTERACTION_BOUNDS
		MSG_VIS_LAYER_SET_DOC_BOUNDS
		
	Graphics routines:
		GrApplyDWordTranslation	; For drawing to 32-bit space

		GrGetMaskBoundsDWord	; Routines that Large Layers might use
		GrGetWinBoundsDWord
		GrInvalRectDWord

	Large mouse events, defined in Library/User/User/userFlow.asm:
		MSG_META_LARGE_PTR
		MSG_META_LARGE_START_SELECT
		MSG_META_LARGE_END_SELECT
		MSG_META_LARGE_START_MOVE
		MSG_META_LARGE_MOVE_COPY
		MSG_META_LARGE_START_FEATURES
		MSG_META_LARGE_END_FEATURES
		MSG_META_LARGE_START_OTHER
		MSG_META_LARGE_END_OTHER
		MSG_META_LARGE_DRAG_SELECT
		MSG_META_LARGE_DRAG_MOVE_COPY
		MSG_META_LARGE_DRAG_FEATURES
		MSG_META_LARGE_DRAG_OTHER


;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------

Sample Code/Programming Tips
----------------------------

	See the sample application in Appl/SDK_Asm/LargeVisTree

	Object instance data requirements
	---------------------------------
	GenView:	GVA_ISOLATED_CONTENTS			- TRUE
			GVA_GENERIC_CONTENTS			- FALSE
			GVA_WINDOW_COORDINATE_MOUSE_EVENTS	- TRUE
			GVA_GRAB_WHILE_PRESSED_IN_VIEW		- generally set

			GVDA_SCROLLABLE				- TRUE
			

	VisContent:	VCNA_LARGE_DOCUMENT_MODEL		- TRUE
			VCNA_WINDOW_COORDINATE_MOUSE_EVENTS	- TRUE

	Converting between LARGE & SMALL mouse messages
	----------------------------------------------
	The following code snippet will convert any of the LARGE mouse messages
	to its small equivalent:

		; Special case for MSG_META_PTR, defined in mouse.def
		cmp	ax, MSG_META_LARGE_PTR
		jne	notPtr
		mov	ax, MSG_META_PTR
		jmp	short haveMethod
   	notPtr:
		; This is guaranteed to work for all other messages
		add	ax, MSG_META_START_SELECT - MSG_META_LARGE_START_SELECT
   	haveMethod:

	To convert large mouse positions to small, subtact off any 32-bit
	translation associated with the composite making the translation,
	from the X & Y large mouse positions.  If the results are within
	+/- 4096 in each X & Y, you have valid small mouse positions (the
	fractional data must be tossed out, as small mouse events only hold
	integer data).  If the results are outside of the 16-bit graphics
	space, then a small version of the event cannot be generated 
	(Generally indicating that it would be rejected as out of bounds,
	 were any 16-bit child be able to receive it anyway)


Include Files Needed
--------------------
	ui.def

Assembly Tips
-------------

Debugging Tools & Tips
----------------------
	Useful TCL functions:	vistree [-i], vup, pobj [-i]

	How to "find" your visible tree in swat
	---------------------------------------
	Move the mouse over the view, stop swat, then type "vistree -i".
	You'll see your GenView listed, as the windowed object
	under the mouse.  Pobj it, look for the "content" field, then
	"vistree <content object here>" to see the visible tree inside of
	the view.

See Also
--------


;------------------------------------------------------------------------------
;	Implementation Notes
;------------------------------------------------------------------------------
	
	The portions of Large Visible Tree support implemented by the system
	are within the VisIsoContenClass object of the PC/GEOS Visible Object
	Library (a component of ui.geo), & primarily consist of LARGE mouse
	event support and some forwarding of messages to the visible
	children of the VisContent.  The rest is up to the
	applications developer.

;------------------------------------------------------------------------------
;       Most frequently asked questions
;------------------------------------------------------------------------------


------------------------------------------------------------------------------@

