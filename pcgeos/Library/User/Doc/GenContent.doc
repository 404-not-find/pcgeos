COMMENT `CLASS DESCRIPTION-----------------------------------------------------

				GenContentClass

$Id: GenContent.doc,v 1.1.34.1 97/03/29 03:37:41 canavese Exp $

Synopsis
--------

GenContentClass implements a content object (as defined above).  It is very
much like a GenInteraction object, but is used specially for placing UI objects
inside a GenView object.  It communicates with the GenView object so that
things like mouse clicks, expose methods, etc.  get passed down to the objects
in the view correctly.  It will also eventually handle split panes and have
methods to return the handles of these panes.   It can have multiple children
like a GenInteraction and all of the geometry hints can be passed to it. 
	
	
Limitations
-----------
	
There are several limitations in running generic objects under a GenContent.
The view cannot be scaled, and GenGadgets are limited to the normal 
graphics space (coordinates +/-4000).  The GenContent and its children must
be run in the same thread as the view.  Only the following generic gadgets
are currently supported under the generic content:
    
	GenFileSelector
	GenInteraction 
	GenGadget
	GenGlyph
	GenRange
	GenList
	GenListEntry
	GenSpinGadget
	GenText
    	GenTrigger
	
Things that are definitely not supported as children of the GenContent:
       
       	GenContent
       	GenView
       	GenDisplayControl
	GenPrimary
	GenDisplay
	GenDocument
	GenUIDocumentControl
	

The GenContent does not respond to generic geometry hints.  If you want to
apply certain hints to objects under the content, create a GenInteraction
as a child of the GenContent and add hints to the interaction.
    
    
    
Alternatives
------------
	
Use a VisContent, or figure out how to make your generic objects fit on the
screen without being scrollable.


Implementation Status
---------------------
	Hopefully completed as of Dec 1991.

See Also
--------
	GenClass (documentation in genClass.asm)
		Contains many of the generic hints and messages for generic
		objects.
		
	GenViewClass (documentation in genView.asm)
		Contains documentation for the view, which runs a GenContent's 
		window.
	
	VisContentClass (documentation in genContent.asm)
		The visual representation of the content object. 
		
		

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------
	
view --
     	The object who creates a window for the content object and runs it,
	sending and receiving messages as needed.  This is usually a GenView,
	but another object *could* be set up to run the content instead,
	provided it handled all the right messages.
	

Relationships/Context
---------------------
	
Although it will appear to the GenContent and the tree underneath it that
it is connected to the larger visible tree under the Screen object, it is
not a generic child of any object in the application's generic tree.  The view 
keeps a link to the object, and will communicate with it as necessary.  The 
GenContent keeps a generic upward-only visual link to the view.
    

Conceptual Overview
-------------------
	
GenContents are exactly like any other GenInteraction object from the
point of view of the children.  They have the default behavior necessary
to receive messages from the view, do updates at the appropriate times, resize
themselves according to the view if desired by the programmer, and tell the view
the bounds of its scrollable area.  
    

Warnings
--------

A GenContent object should not be attached to any visible object using
MSG_GEN_ADD_CHILD.  It can only exist as a private link from some other object.
  
A GenContent should not be set usable or not usable while attached to the view.
Use MSG_GEN_VIEW_SET_CONTENT to switch between one or more contents if you
need to do so.
  
  
Usage:
-----
	
The basic usage for a GenContent under a GenView is as follows:
    
	@object GenViewClass MyView = {
	    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
	    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
	    GVI_content = MyContent;
	}

	@object GenContentClass MyContent = { 
	    GI_comp = MyTrigger, MyList, MyText;
	}

This will cause the content to be drawn with several generic objects underneath
it.
     

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------

Sample Code/Programming Tips
----------------------------
	<useful code snippets, references to sample applications & a short
	 description of them>

Assembly Tips
-------------

Debugging Tools & Tips
----------------------
	
Finding your content's GenView in the gentree and saying
"pgen addr GVI_content" will give you the address of your content
object, if you're looking for it.  Better yet, remember its label so
you can type  "pobj *myapp::MyContent".

See Also
--------
	
Appl/SDK_C/View/GenContent:
 	A general sample of generic objects running in a GenContent under a 
	GenView.

;------------------------------------------------------------------------------
;	Implementation Notes
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Inheritance
;------------------------------------------------------------------------------
< Add entries for every superclass, including instance data, methods & hints,
  & then document how they are used within this object.   Example: >

<List hints here, explain how, if at all they pertain to this object>

------------------------------------------------------------------------------`
