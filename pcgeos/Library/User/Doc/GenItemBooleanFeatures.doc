COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		User Interface
FILE:		GenItemBooleanFeatures

DESCRIPTION:

	$Id: GenItemBooleanFeatures.doc,v 1.2.34.1 97/03/29 03:36:44 canavese Exp $

------------------------------------------------------------------------------@


GenItemGroupClass, GenBooleanGroupClass, GenItemClass, GenBooleanClass, and
GenDynamicListClass are installed and ready to use.   These objects are pretty
different from the old GenList, and changeover to these objects are probably 
more significant to app writers than anything else in V2.0, hopefully in terms
of quantity of changes rather than the difficulty of them.  Ultimately the 
changes to the GenList will make using lists much easier than it used to be.

Unlike most of the other system installs we've done, the sheer quantity of 
changes that need to be made prevents me from doing it all myself.  The only
things currently converted over are Library/Motif, the controllers in 
Library/Text, and Appl/GenTest.

I will not be removing the GenList object right away.  There will probably be
a 1 to 2 month grace period where app writers can convert to the new list at 
their leisure.  You will not want to get left out in the cold, so the sooner you
learn the new objects and convert to them, the better.

To aid learning the new object, I will give here a brief overview of the new
features and changes from the old list (the overview will also be in 
/staff/pcgeos/Management/UserInterface/Documentation/GenItemBooleanFeatures).

For a tutorial on the new objects (examples are in C, but is probably the best
place to start), see:

	/n/hg/pcgeos/chris/Library/User/Gen/genItemGroup.asm
	/n/hg/pcgeos/chris/Library/User/Gen/genBooleanGroup.asm
	/n/hg/pcgeos/chris/Library/User/Gen/genDynamicList.asm

For a detailed explanation of converting from the old GenList to the new object:

	/n/hg/pcgeos/Management/UserInterface/Documentation/GenListChanges

The SDK_C apps GenItemGroup, GenDList, and TwoDLists have C examples of
the objects.  I will see about making these available in assembly as well,
but they should be helpful nonetheless.

And of course, see me email if you have questions, comments, etc.  I'd 
appreciate it if people would try to make a pass over this stuff before sending
me lots of questions.  Thanks!


An overview of the changes:

	* In place of the GenList and GenListEntry, there are now five new 
	  objects:

		GenItemGroup -- The most flexible of the objects.  Will usually
			be used for exclusive settings and non-dynamic scrolling
			lists, although it can be non-exclusive as well.  Keeps
			a single selection, or if non-exclusive, a list of
			selections.  In all of these objects, selections are
			referred to by their "identifier" stored with each
			setting, much like LET_ENTRY_DATA did in GenLists.

		GenItem -- Replaces the list entry for GenItemGroups.  Only
			keeps an identifier as instance data.

		GenDynamicList -- A subclass of GenItemGroup, implements the
			dynamic list.  Functions using identical messages as
			the GenItemGroup, with additional messages and instance
			data for querying for monikers, setting the number of
			items, and adding or removing items.  The identifier
			passed refers to the position of the item in the
			dynamic list, as in the current GenList.

		GenBooleanGroup -- Similar to the GenItemGroup, but optimized
			for non-exclusive settings.   Identifiers for the 
			possible selections should be bitfields, which will be
			or'ed together to keep the state of the object.
			Setting and getting the state of the boolean group can
			still be done for individual selections, but will more
			often be done as a group, much like MSG_GEN_LIST_GET_-
			NON_EXCL_VIA_DATA and MSG_GEN_LIST_SET_NON_EXCL_VIA_DATA
			do now for non-exclusive GenLists.

		GenBoolean -- Replaces the list entry for GenBooleanGroups.
			Is actually functionally identical to the GenItem,
			but is added for clarity.

	* There are no longer separate actual and user exclusives.  An 
	  application merely sets the the value in the GenItem/BooleanGroup, 
	  and the group will be marked as modified when the user changes the
	  value.  Reset must now be provided by the application if desired,
	  which shouldn't be a big problem in most cases (resetting can happen
	  very simply in controllers, for instance.)

	* There are no more list flags.  There is only one way to reference
	  items, via the identifier.   With no actual or user exclusives,
	  the LF_REFERENCE_ACTUAL/USER_EXCL's are gone.  The selection is set
	  regardless of the enabled state of the items, so LF_OVERRIDE_DISABLED
	  is done.   Messages are only sent out from the list on a user change,
	  never from a SET_SELECTION message from an application, so LF_-
	  SUPPRESS_APPLY is also not needed.   Selecting an exclusive item in
	  a scrolling list always makes it visible, so LF_FORCE_VISIBLE is not
	  needed either.  Other internal flags are now out of this message.

	* The presence or absense of items has no affect on a GenItem/Boolean-
	  Groups internal state.  If the selected item is not usable (or not
	  even there), no item will be selected, but the generically the 
	  selection is still available.  Setting selected items not usable or
	  not enabled has no affect on the internal state of the list (except
	  to move the focus if needed).

	* All of the list messages work on non-usable lists.


	Delayed/indeterminate state

	* Indeterminate state is fully supported by the new list, although
	  motif doesn't specially the indeterminate state of a list (an 
	  indeterminate list shows no selection, an indeterminate boolean is
	  shown not selected.

	* GadgetAttrs are gone.   Delayed mode is no longer set in individual 
	  objects.  Delayed mode follows the state of the windowed Gen-
	  Interaction the list in.   

	Actions

	* If you don't a double-clicks to activate the default button in the
	  window, set up an ATTR_GEN_CUSTOM_DOUBLE_PRESS with a message to 
	  send on user double-clicks (or zero if the you want nothing to
	  happen.)

	* If your list is in delayed mode, and you want to get user changes
	  to the list, you now set up an ATTR_GEN_ITEM_GROUP_STATUS_MSG with
	  a separate message to send for user changes.   With these changes,
	  LUF_ flags no longer need to be passed to action handlers.

	Scrolling lists

	* Scrolling lists are now implemented inside a view, which has few 
	  API affects, except to allow a few interesting geometry affects like
	  horizontal scrolling lists and wrapping scroll lists.  Scrolling lists
	  can be now be non-exclusive as well.  

	* Extended-selection GenItemGroups will be implemented in a few days.
	  In these, clicking on an item will deselect other items like an 
	  exclusive list, but dragging will cause several items to be selected,
	  and shift-clicks will turn items on or off without affecting other 
	  items.
	  
	Dynamic lists

	* Dynamic lists no longer query the application for the number of items.
	  It can be set in instance data, or set via a MSG_GEN_DYNAMIC_LIST_SET-
	  NUM_ITEMS message when the application knows how many items to set.
	
	* The moniker query message is now specified in instance data, so 
	  there's no need to check which list is being used (unless, of course,
	  you want to do things that way).

	* Dynamic list entries can now be disabled.  The disabled state of an
	  item is passed in with the item's moniker.

	* Everything can be done in a dynamic list that can be done in a non-
	  dynamic list, including non-exclusives, wrapping, non-scrollable
	  lists, and horizontal lists.
			
	* Similar to the new GenClass REPLACE_VIS_MONIKER messages, messages 
	  for passing an fptr to text or an optr of a moniker are now
	  available for setting monikers in a dynamic list as well.
