COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		User Interface
FILE:		DebugTips

DESCRIPTION:	UI Debugging Tips

	$Id: DebugTips.doc,v 1.3.34.1 97/03/29 03:37:09 canavese Exp $

------------------------------------------------------------------------------@


==============================================================================
Assembly Language Coding Practices
==============================================================================

Access to object instance data
------------------------------
>> The above error can be avoided by declaring your VisContent Object as
>> a master.

Semantics note:  We generally use the term "object" to refer to individual
object instances, as opposed to object classes.  The concept of "master class"
is unique to PC/GEOS, and applies only to an object class.

Some tip when acessing instance data:

To write a handler for any given object class, you need to know what master
part it belongs to.  The master part of a given class is determined by the
first master class up the class hierarchy.  For example, all of the classes
starting with "Vis" come off of VisClass, which is a master class.  Same thing
with the "Gen" classes.  Whenever you define a new master class, you are
defining a new master group.  To acess the instance data within any master
part, you need code which looks like:

	mov	di, ds:[si]
	add	di, ds:[di].Vis_offset		; For VisClass
	mov	ds:[di].<offset to vis instance data here>, ax

	mov	di, ds:[si]
	add	di, ds:[di].Gen_offset		; For GenClass
	mov	ds:[di].<offset to gen instance data here>, ax

	mov	di, ds:[si]
	add	di, ds:[di].My_offset		; For MyClass
	mov	ds:[di].<offset to my instance data here>, ax


The sole exception is non-master subclasses of MetaClass, which do not require
the addition to the master part, & thus can be accessed like:

	mov	di, ds:[si]
	mov	ds:[di].<offset to meta instance data here>, ax

Failure to follow these rules will result in data being written to the wrong
location, i.e. you will trash instance data elsewhere in your object, resulting
in bizarre deaths.


LMem Segments
-------------
Objects are stored in non-shared local memory blocks.  Local memory blocks
can be resized, at any time, EVEN IF LOCKED, by the thread that runs the 
objects.  Because of this, care must be taken to ensure that segments are
not used following any code which possibly could cause the block to be
resized.

DS is passed to method handlers as the locked segment of the block that
holds its object.  Since method handlers may legally resize a block (to
add a new chunk for instance), you must assume that your object block might
move during any call which can end up invoking a method on an object in the
same block as your own object.

FORTUNATELY, PC/GEOS Obj* calls generally take care of this problem, by
returning "fixed up" segments in ds or es which are specifically documented
in the "PASS" parameters as being that of an object block.

WATCH OUT, however, for routines which don't have segments of object or lmem
blocks passed to them.  Even though these routines may not "DESTROY" ds or es,
they are as good as destroyed if the block could potentially move by their
execution (The documentation should say whether or not this can happen)
The chief routine which brings this to mind is ObjMessage, which
is often used inside of method handlers, & does not normally take any
value in DS.  ObjMessage provides a special flag, MF_FIXUP_DS, which may be
passed in di, to cause it to take ds as the segment of an lmem block on
entry, & to fix it up on return.  There is a similar MF_FIXUP_ES flag.  This
feature is unique to ObjMessage, however.

We strongly recommend the following conventions to avoid crashing code:

	* If a procedure accepts ds (or es) as a segment of locked lmem or
	  object block, this fact should be documented in the "PASS"
	  parameters:

		*ds:si	- object
		- OR -
		ds	- segment of LMem block, or block in which ds:[0]=handle

	* If ds (or es) is not documented as destroyed, then your routine
	  should make sure that the segment is valid on exit.  This fact
	  should be documented in the "RETURN" field of the header.

		ds	- fixed up to point at segment of same block as on entry

	* If your routine CAN possibly resize an lmem block, whose segment
	  is not passed & fixed up, this fact should be documented in
	  the "DESTROYED" field.

		NOTE:	  This routine potentially moves locked lmem/object
			  blocks.  Stored segments to such blocks may be
			  invalid after this call.

	* If you have an lmem or object segment in ds (or es), and call
	  a routine which potentially moves locked lmem/object blocks, you
	  must "fix up" these segments yourself.  The easiest way to do this
	  is:

		push	ds:[LMBH_handle]	; Save handle of block on stack

		call	<Block moving routine here>

		pop	bx			; Fetch handle
		call	MemDerefDS		; Get segment of block in DS

	  - OR -

	  If the routine in question is ObjMessage, pass MF_FIXUP_DS/ES as
	  needeed.


All PC/GEOS routines adhere to these conventions (Or will by V2.0 :)


LMem Chunk Pointers
-------------------
For the same reasons outlined in "LMem segments" above, local memory pointers
are invalid after ANY call which potentially moves lmem/object blocks.

NO ROUTINES IN PC/GEOS, NOR ANY GLOBAL UI ROUTINES, make any attempt to
fixup such local memory pointers  (This mostly because none are ever passed
into routines).

So, our recommendations:

	* Assume that local memory pointers are trashed after:
		a) any method call
		b) any calls to routines which call methods
		c) any routines documented as moving locked lmem/object blocks

	* Therefore, you'll want to reconstruct local memory pointers after
	  such routines, if you need them again.  Example:

		mov	di, ds:[si]		; Deref chunk handle
		add	di, ds:[di].Vis_offset	; Get ptr to Vis master part

		<access instance data via ds:[di] here>

		mov	ax, METHOD_DO_SOMETHING
		call	ObjCallInstanceNoLock	; Preserves bx, di registers..
						; BUT possibly moves object
						; block, so we must consider
						; di, a local memory pointer,
						; destroyed
		; Dereference again:
		;
		mov	di, ds:[si]		; Deref chunk handle
		add	di, ds:[di].Vis_offset	; Get ptr to Vis master part

		<access instance data via ds:[di] here>


==============================================================================
UI Object blocks exploding past 64K
==============================================================================

Be careful to break up resources holding Generic objects into reasonably
sized blocks.  Reasonably sized is 1-3K or so.  The reason for this is
two-fold:

	1) Generic UI objects grow, sometimes by a factor of 2 to 5 times or
	   more, when running in memory.  This is because the specific UI
	   "superclasses" the generic objects on the fly, adding specific
	   & visual instance data needed to get the objects running up on
	   screen.  Hence, a 20 or 30K UI object resource can grow larger than
	   64K, causing a fatal error.

	2) The PC/GEOS heap works best when blocks are around 2-8K in size
	   (Preferably around 4K).   Blocks less than a 1/2K or so are somewhat
	   inefficient, from the standpoint of overhead required for the
	   small amout of data.  "Out of memory" errors can result when a
	   large block is attempted to be swapped back into the heap, & 
	   a large enough free area cannot be found on the heap to fit it.

It's easy to break up UI resources.  Just move existing UI objects out of
existing resources, & into new ones.  A new UI resource can be created by
just going into the file where your UI objects are defined, & adding:

start	NewResource;

	< move object definitions here>

end	newResource;


& the the .gp file, adding:

resource NewResource ui-object


Glue will print out the size of each of your resources when it links your
geode together.  So watch out for fat resources!


==============================================================================
SWAT tips & tricks
==============================================================================



==============================================================================
Common problems by Object
==============================================================================

The purpose of this section is to supply answers to common problems encountered
when developing applications under the PC/GEOS User Interface.  Please add
anything you've run into & have solved...


GenView
-------

"My content/process never gets a METHOD_EXPOSED"

	The pane area of a GenView will never get exposed if you have the
	"trackScrolling" bit set in the GenView, but neglect to provide
	a METHOD_NORMALIZE handler in your process/content object.  The
	view is basically sitting there patiently waiting for a
	METHOD_NORMALIZE_COMPLETE to come back, after which it will enable
	exposure within the pane.  Exposure is temporarily disabled in this
	case to avoid the "double-redraw" effect which would otherwise happen
	if your app changes the document offset immediately after being
	launched.  -- doug

	Another reason this might happen is if you are not handling MSG_META_EXPOSED
	properly.  If you just do a GrCreateState/GrDestroyState in your
	handler rather than doing the proper GrBeginUpdate/GrEndUpdate,
	you will never get another MSG_META_EXPOSED again after the initial time,
	as the window goes on forever thinking that the update is imminent
	(as told by the EXPOSE_PENDING flag in the window structure).  -chris


"My VisContent gets a MSG_META_EXPOSED, but doesn't draw anyway."

	If your using a VisContent, this may be because you didn't specify
	bounds for your VisContent in the .ui file, or didn't want geometry
	management but forgot to set the VCGA_CUSTOM_MANAGE_CHILDREN, so the
	geometry manager came along and shrunk the content to zero (if you
	had no children, or children with no size specified).  This can also
	have the side affect of having the view shrink to zero size after 
	starting out large, if you have GVDA_NO_LARGER_THAN_CONTENT set in the 
	view.  -chris


"I can't scroll around my document"

	First, make sure the view is set as "scrollable" in each direction
	that you want to be able to scroll.  If this is set, the problem is
	that the View thinks your entire document fits in the open space:
	
	If you've set the output to be your process, then make sure that
	"horizDocSize" & "vertDocSize" have been set correctly (in 1/72nd's
	of an inch)

	There's no point in initializing horizDocSize & vertDocSize if the
	output is set to a Content (Any type:  GenContent, VisContent, or
	VisIsoContent).  The reason is that the document size is defined by
	the visible bounds of the Content object itself; when first notified
	that the View has come up on screen, the Content sends its size to
	the View, which then overwrites horizDocSize & vertDocSize with the
	new information.  If the content is pre-instantiated, that is part
	of your .ui file, then you should initial its left, top,
	right & bottom instance data with the bounds of your document.
	If you don't know the bounds at compile time, then you will have to
	adjust it at run-time.  This can be done by following these steps:

	1) Use METHOD_MOVE & METHOD_RESIZE to adjust the bounds of the content
	2) Use METHOD_MARK_INVALID (see docs) to invalidate the geometry on
	   the content.

	-- doug


"My view starts out too big/small, than resizes to correctly match the content"
	
	This ugly window flashing problem will happen if you:
		a) Have a VisContent with some size, running in the app's thread
		b) Have GVDA_NO_LARGER_THAN_CONTENT or GVDA_NO_SMALLER_THAN-
		   CONTENT set in the view.

	The problem is the view doesn't initially know how big the content
	is until the view and content are fully realized, thanks to the view
	and content being in different threads.  The solution is to set the
	document bounds in the view to match the initial size you expect the
	VisContent to be.  After the view comes up initially, the view will
	correctly reflect any subsequent changes in the content's size.  -chris


GenList
-------

"Where do I set 'initiatesInputIgnore' to make this work in a list?"

	You'll need to set

		genAttributes = default +initiatesInputIgnore;

	in the GenList.  Setting it in the GenListEntry only will not work.
	(Should be in doc somewhere)

==============================================================================
Geometry problems
==============================================================================

If you are subclassing an object in order to modify its geometry properties,
& get a death due to "BAD_GEO_UPDATE_PATH", you might have a similar problem
to one which was track down for America Online:

The problem lies in the METHOD_CALC_NEW_SIZE handler for your XLinkIconClass
object. What it should be doing is calling its superclass to handle the
geometry of its kid (rather than sending CALC_NEW_SIZE and RESIZE to the kid
directly), then add whatever additional stuff it needs to add for its text
string to the value returned by the superclass.

What is happening is the IconTriggerClass object is being created with the
VOF_GEO_UPDATE_PATH and VOF_GEOMETRY_INVALID bits set (this happens
automatically). Were the normal geometry management functions of VisComp and
Vis to be called, these bits would be cleared automatically when the final
geometry is decided on. Since your subclass of METHOD_CALC_NEW_SIZE is doing
all the work, however, the bits aren't being cleared.


