
	File: DocumentControl.doc
	Description: This document describes the document control mechanism.
	Author: Tony Requist
	Date: 8/22/91

	$Id: DocumentControl.doc,v 1.5.34.1 97/03/29 03:36:40 canavese Exp $

Synopsis
--------
The document control implements the file menu, opening and closing of
documents, auto-save and other document related features.  In
addition, the document control is built to easily interface with other
high level objects (GenDisplayControl, VisIsoContent, GenApplication)
to provide commonly needed functionality.

Limitations
-----------
The document control is designed to implement the functionality
commonly needed for documents (file menu, auto-save, ...).  There are
many attributes available to control the functionality, but there are
undoubtedly usages that are not covered.

Alternatives
------------
If behavior is required that the standard document control cannot
provide, there are three options:

	- modify the requirements to fir the document control

	- subclass messages of the various classes that implement the
	  document control

	- implement the document control functionality from scratch (using the
	  low level generic objects)

Implementation Status
---------------------
Implemented as documented with these caveats:

	- Dynamically creating, destroying, setting usable and setting
	  not usable any of the document control objects is not
	  currently supported.

	- File system related stuff will change as part of the 2.0
	  file system changes.

Things left to do:
	- Better handling of SHARED_SINGLE
	- Test and document saving objects in VM files

See Also
--------
	Classes: GenDisplayControlClass, VisIsoContentClass
	Sample apps: ProcView, DocView, ...

------------------------------------------------------------------------------
	Description
------------------------------------------------------------------------------

Terminology
-----------
document:
	- A non-visual representation of data stored in a file
	- A object of GenDocumentClass
document control:
	- The combined behavior of GenUIDocumentControlClass,
	  GenAppDocumentControlClass and GenDocumentClass

Relationships/Context
---------------------
An application that uses the document control will have:

- one GenUIDocumentControl object which is:
  - defined in the .ui file
  - a child of the GenPrimary
  - on the GenPrimary's active list
  - in the same block as the GenPrimary (by convention)
  The GenUIDocumentControl should not have any children.  It doeshave
  a pointer to the GenAppDocumentControl object described below.

- one GenAppDocumentControl object which is:
  - defined in the .ui file
  - a child of nothing having no children in the .ui file (children
    are dynamically added at run-time)
  - in a block by itsself.  In the two threaded application model the
    block must be run by the application thread

- one GenDocument object for each open document (file) which is:
  - automatically created when the document is opened
  - a child of the GenAppDocumentControl object

Conceptual Overview
-------------------
The document control does many different things and can work in
many different ways.  Each of these is discussed as a separate
topic.

In general, the GenUIDocumentControl handles the user interface for
the file menu and the dialog boxes that flow from the file menu.  It:
- Forces a file menu to exist
- Updates the enabled status of items in the file menu
- brings up and down file dialog boxes
- sets the file name as the moniker of the primary (if applicaable)

The GenAppDocumentControl manages the creating and destroying of
GenDocument objects and acts as a manager of the GenDocument objects.

Each GenDocument manages a single open document (file).  It keeps
track of the volume, path, and filename for the document, the dirty
state of the document and other document related information.  It:
- opens and closes files
- presents the dialog boxes for "save changes?" and for errors that
  occur while saving the document

Applications can visual display documents in many ways.  The document
control is designed to make the common ways of displaying documents as
simple as possible.  The "documentModels" file describes the common
models that applications use to visually display documents.  This file
is a good place to go to help figure out how to use the document
control.

Topic: Scalable UI and the document control
-------------------------------------------
The file "Faces.doc" describes the interface settings that the
document control implements.  Following are a couple of example menu
structures:

Transparent Mode:

Switch Document...
Quick Backup
Recover from Quick Backup

Power User Mode:

New
Open
Close
Save
Quick Backup
Recover from Quick Backup
Features -> Save As
	    Copy
	    Export
	    Revert From Last Save
	    ----
	    Make Template
	    Rename
	    Edit User Notes
	    Access
	    Set Empty Document
	    Set Default Document

Topic: An example of document control behavior
----------------------------------------------
As an example of how the document control works, take the case of
"Open".  When the user selects "Open" from the file menu, a
MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_OPEN_DOC is sent to the
GenUIDocumentControl.  The GenUIDocumentControl will then display a
dialog box with a file selector from which the user will select a
file.  Additional UI objects from the application may be displayed
here as well (see the "Adding user interface to ..." topic).

After the user selects a file to open and clicks OK, a
MSG_GEN_APP_DOCUMENT_CONTROL_OPEN_DOC is sent to the
GenAppDocumentControl, passing the name of the file to open.  The
GenAppDocumentControl instantiates a new GenDocument object (of the
class specified in GADCI_documentClass) and sends a
MSG_GEN_DOCUMENT_OPEN to this new document.

The GenDocument opens the file passed, handles errors appropriately
(see the "Error Handling" topic) and protocol checking if the file
is a VM or DB file (see the "Document Protocol" topic).  If the file
is opened successfully, the GenDocument sends a
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT messge to itsself and then a
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT message to itsself.

The GenDocument handles MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT by
sending a MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT message via the optr stored in
the GenAppDocumentControl.  The GenDocument handles
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT by sending a
MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT message via the optr stored in the
GenAppDocumentControl.

The application either handles MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT and
MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT messages or sub-classes
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT and
MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT. (see the "Adding behavior for documents"
topic).

Topic: Adding behavior for documents
--------------------------------------
Documents, being non-visual objects, are incomplete by themselves.
The application must provide the code to display and manipulate the
document.  To do this, the application must know when the user opens,
closes and otherwise manipulates documents.  This can be done in
two ways:

Procedural model:

The GenAppDocumentControl stores an optr that it uses to send out
notification of important things, such as a file being opened.  In the
procedural model this optr is usually set to point at the process.
Message handlers for the process class then implement the behavior of
the document.  For instance, when a file is opened, the document
control sends out a MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT to the process,
passing the file handle and an optr to the document object.

Applications written in the procedural model normally only allow a
single document to be open at once.

The "Messages sent out by the document control" section later in this
document describes the various messages sent out by the document
control.

Object model:

Applications can also subclass the GenDocument object to implement the
behavior of the document.  In this model the application stores the
class for documents as instance data in the GenAppDocumentControl
object.  This class must be a subclass of GenDocumentClass.  The
application then subclasses messages such as
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT.  The object model makes
support for multiple open documents much easier since it provides a
convenient place to store data about each open document.

The "Messages to subclass in GenDocumentClass" section later in this
document describes the various messages that are normally subclassed.

Topic: Multiple open documents
------------------------------
The document control can be configured to allow multiple documents to
be open.  This is controlled by the GUDCA_MULTIPLE_OPEN_FILE bit in
the GUDCI_docAttrs instance data of the GenUIDocumentControl.

Single open document:
attribute: GUDCA_MULTIPLE_OPEN_FILES set to 0
.ui file: nothing needed (this is the default)

In this mode the document control disables the "New" and "Open"
triggers when a file is open with one exception.  If the
GUDCA_SINGLE_FILE_CLEAN_CAN_NEW_OPEN attribute is set ("attributes =
default +singleFileCleanCanNewOpen;") in the .ui file, and a
"clean" document (non-modified) is open, then "New" and "Open" are
enabled.  If the user chooses New or Open, the open file is closed and
then the new file is opened.

Multiple open documents:
attribute: GUDCA_MULTIPLE_OPEN_FILES set to 1
.ui file: attributes = multipleOpenFiles;

In this mode the "New" and "Open" triggers are always enabled,
allowing the user to open any number of files.  In this mode the
"target document" becomes important, as it is the document that the
user is acting on (see "Target document" topic).

Topic: Target document
----------------------
The GenAppDocumentControl keeps track of which document is the target
document.  The target document is the document that the user is
working with, and thus the document that should be acted upon when the
user selects items in the File menu (such as Save, Revert, Save As,
Close).

Since the document control is set into interact with the display
control (see the "Interaction with the display control (window menu)"
topic), then the target document will be maintained automatically.  If
not, the application must do this by sending
MSG_GEN_APP_DOCUMENT_CONTROL_SET_TARGET to the GenAppDocumentControl.
An application can find find current target document using
MSG_GEN_APP_DOCUMENT_CONTROL_GET_TARGET.

A GenDocument object receives notification when it has gained or lost
the target via MSG_GEN_DOCUMENT_GAINED_DOC_EXCL and
MSG_GEN_DOCUMENT_LOST_DOC_EXCL (which applications can subclass if
needed).

Topic: Interaction with the long term moniker of the GenPrimary
---------------------------------------------------------------
The document control and be set up to automatically display the name
of any open file in the long term moniker of the GenPrimary.  This
SHOULD NOT be used if a display control is used, since the display
control has its own mechanism for doing this that.

This interaction is set via the GUDCA_NAME_ON_PRIMARY bit in
GUDCI_attrs of the GenUIDocumentControl.  This interaction is on by
default in the .ui file.

If no file is open the document control displays the string stored in
the GUDCI_noNameText field in the GenUIDocumentControl.  This is set
in the .ui file like this:
	noNameText = "No documents open";

Topic: Interaction with the GenView
-----------------------------------
The GenDocument object has the behavior of a VisIsoContent and thus
can be used as the output of a GenView object.  This allows the
GenDocument to be encapsulate all the behavior for an object.  When
the GenDocument object is set up in this way, it can either subclass
visual messages (such as MSG_VIS_DRAW and MSG_META_START_SELECT) or it can
have a tree of objects beneath it (as a content object can).

If a single document model is used and a single GenView is used, the
document control will automatically connect the GenDocument object to
the GenView appropriately if told to do so.  This is done in the .ui
file by setting the "genView" field in the GenAppDocumentControl:
	genView = MyView;

Topic: Interaction with the display control (window menu)
---------------------------------------------------------
The document control can be set up to interact with the display
control.  This is very useful when multiple documents can be open at
once and when a GenDisplay is created for each document.

When this functionality is enabled, the document control will
automatically duplicate a UI block when a document is created, add the
GenDisplay within that block to the display control and set the header
for the GenDisplay to the name of the document.  When the document is
closed the UI block will be destroyed.

This interaction with the display control is set up by setting fields
in the GenAppDocumentControl instance.  For example:
	genView = MyView;
	genDisplay = MyDisplay;
	genDisplayControl = MyDisplayControl;

*** ADD: Auto DuplicateBlock, name handling, detach, target update, ...

Topic: Automatic enabling and disabling of UI objects
-----------------------------------------------------
The document control can be set up to automatically enable and
disbale a list of UI objects based on whether or not a document is
open.  Typically this is used to enable/disable the UI components that
operate on the document.

The enable/disable list is part of the GenUIDocumentControl object and
is set up in the .ui file like this:
    This line is aprt of the definition of the GenUIDocumentControl object:
	enableDisableList = PVUIEnableList;
    The list itsself is a chunk that holds a series of optrs:
	chunk PVUIEnableList = data {
		optr	PVView, PVRange
	}

Normally the UI objects on the enable/disbale list are set not usable
in the .ui file.  This is done by adding this line in the definition
on the object:
	genStates = default -enabled;

Topic: Dirty state (marking a document as modified)
---------------------------------------------------
For each open document the document control keeps track of whether the
document has been modified.  This is necessary to be able to have the
correct behavior in several cases (such at "Close", where a "save
changes?" dialog box is displayed if the document has been modified).

If the document is a VM file or a DB file and if the VMA_NOTIFY_DIRTY
attribute is set in the file, the document control works with the VM
code to automatically mark the document as dirty when the file is
marked dirty (via VMDirty or DBDirty).

If the VMA_NOTIFY_DIRTY dirty mechanism is not used, the application
must mark the document as dirty by sending
MSG_GEN_APP_DOCUMENT_CONTROL_MARK_DIRTY to the GenAppDocumentControl
or MSG_GEN_DOCUMENT_MARK_DIRTY to the GenDocument.

Topic: Initial state (when an application is started)
-----------------------------------------------------
The behavior of the document control when an application is started
is:
- If a document is passed in to be opened, the document is opened
- If no document is passed in then the GUDCA_CURRENT_TASK field of
  GUDCI_attrs determines what to do:
  - if GUDCI_attrs = GUIDCT_NEW then a new (untitled) document is
    created.  The .ui file for this is:
	attributes = default currentTask new;
  - if GUDCI_attrs = GUIDCT_NONE and a default document filename
    exists, then the default document is opened.  The .ui file for
    this is (GUIDCT_NONE is the default):
	defaultFile = "My Schedule";
  - if GUDCI_attrs = GUIDCT_NONE and no default document filename
    exists, then no documents are opened.

Topic: Auto-save
----------------
The document control automatically implements auto-save if the
GADCA_AUTO_SAVE bit is set in the GADCI_attrs field of the
GenAppDocumentControl.  This is the default in the .ui file.

Auto-save works by periodically sending a MSG_GEN_DOCUMENT_AUTO_SAVE
to the GenDocument object (at intervals set by the user in
Preferences).  If the document is in a state where auto-save is
allowed (the document is not being closed and is not marked "prevent
auto-save"), then the GenDocument sends a
MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE to itsself to do the real work of
auto-save.

The MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE works by calling VMUpdate and thus
only works with VM abd DB files.  Auto-save can be implemented on
non-VM files, but the application must sub-class
MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE and implement this functionality.

The application can temporarily prevent auto-save by setting the
GDA_PREVENT_AUTO_SAVE bit in the GenDocument (either directly or by
calling MSG_GEN_DOCUMENT_SET_ATTRS

Topic: File types: VM, DB, DOS
------------------------------
The GenDocument supports three file types: VM files, DB files and DOS
files.  The file type is set in the GenAppDocumentControl (in the
GADCA_VM_OR_DB_FILE and GADCA_DB_FILE bits in GADCI_attrs).  In the .ui
file:
	VM: attributes = default -dbFile;
	DB: <this is the default>
	DOS: attributes = default -vmOrDbFile -dbFile;

The GenDocument will call the appropriate open and close routines
based on the type of file.

Topic: Backup mode (save as/revert)
-----------------------------------
The document control has an attribute for whether "Save As" and
"Revert" are supported (GUDCA_SUPPORTS_SAVE_AS_REVERT in GUDCI_common
of the GenUIDocumentControl).  This is set by default in the .ui file.
It can be removed by:
	attributes = default -supportsSaveAs;	** Name will change

The document control uses the SaveAs and Revert functionality of the
VM code.  The document control automatically sets the VMA_BACKUP
attribute of the VM or DB file so that this mechanism will work.

Applications can implement SaveAs and Revert for DOS files by
sub-classing MSG_GEN_DOCUMENT_CONTINUE_SAVE_AS and
MSG_GEN_DOCUMENT_CONTINUE_REVERT, but this is not recommended.

Topic: File system issues, file selectors
-----------------------------------------
The GenUIDocumentControl stores the current volume, path and filename
and communicates these to the various file selectors that it uses.

All volume names, path names and file names stored by the document
control are stored in the GEOS character set.

The document control configures the file selectors that it uses based
on the GenUIFileSelectorType set in GUDCI_selectorAttrs.  The default
is to show documents with the document token given in
GUDCI_documentToken.  The application can modify this by subclassing
MSG_GEN_UI_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR.

*** Remove GUDCA_LONGNAME

*** Change token stuff to work with DOS files

*** Change everything to be in the GEOS character set

Topic: Templates
----------------
*** FILL THIS IN

Topic: Document modes and multi-user support
--------------------------------------------
The document control can deal with documents in one of three access
modes: viewer mode, shared single mode and shared multiple mode.
These modes correspond to modes of the VM code normally used to store
document files.

Viewer mode:
In viewer mode all files are opened read-only.  The "New", "Save",
"Save As" and "Revert" functions are permanently disabled.
Viewer mode is set in the GenUIDocumentControl instance data with:
	attributes = default mode viewer;

Shared single mode:
Shared single mode is designed for documents that can only be modified
by one person at a time (word processing and spreadsheet documents
normally fall in this category).  Documents opened for writing and
opened "deny write" so that other users can only open the file
read-only.  The user can mark this type of document as a "public"
document, in which case the default is to open the file read-only.
Shared single mode is the default.

Shared multiple mode:
Shared multiple mode is designed for documents that can have multiple
writers, such as multi-user databases.  Documents of this type start
out as single-user documents (as in the shared single mode described
above).  The user can mark the document as a "multi-user" document,
which causes the document to be thereafter to be opened by multiple
writers.  Shared multiple mode is set in the GenUIDocumentControl
instance data with:
	attributes = default mode sharedMultiple;

For more information about the use of shared single and shared
multiple files, see the VM documentation.

DOS files:
DOS files are opened with FileAccessFlags based on the document mode
and the GUDCA_DOS_FILE_DENY_WRITE attribute.

                    DOS_FILE_
    Document mode   DENY_WRITE   Read-only access   Read-write access
    -------------   ----------   ----------------   -----------------
    Viewer          0            deny none          -
    Viewer          1            deny write         -
    Shared single   0            deny none          deny write
    Shared single   1            deny write         deny write
    Shared multiple 0            deny none          deny none
    Shared multiple 1            deny none          deny none

Topic: Document tokens, associating document types with applications
--------------------------------------------------------------------
All GEOS document files have a token that identifies the type of file
and a token that identifies the creator (application) of the file.
The GenUIDocumentControl uses these tokens to display only the
appropriate files in the "Open" dialog box.  Also, newly created
documents are automatically given this document token.

*** Changes for DOS files having tokens

Topic: Document protocols
-------------------------
All GEOS documents have a protocol that identifies the version of the
document (this protocol is of the same form used in other areas of
GEOS).  The protocol is of the form "MAJOR.MINOR" where both the major
and the minor numbers are words (see "???" for a discussion of
protocols).

The GenAppDocumentControl stores the protocol for documents in its
instance data.  This protocol is "1.0" by default and can be set in
the .ui file:
	protoMajor = 2;		/* Sets the protocol to 2.1 */
	protoMinor = 1;

Newly created documents are given this protocol automatically.  When a
document is opened its protocol is checked against the stored protocol
like this:
	If the major numbers are different then the documents are
	always incompatible.  If the minor number of the document is
	less than the minor number stored in the
	GenAppDocumentControl, the documents are compatible since
	changes to the minor number indicate backward compatible
	changes.

If the protocol set in the document control object is 0.0, the
document control does no protocol checking.

There are four possible results:

1: The protocols are the same:
In this case the document is opened.

2: The document is has an earlier but compatible protocol:
In this case the GenDocument sends a
MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT message to itsself
(that the application can sub-classs) and sends out a
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT notification message that and
application can handle.  If the application does not handle either
message the file is opened (since it is compatible).

3: The document is has an earlier and incompatible protocol:
In this case the GenDocument sends a
MSG_GEN_DOCUMENT_UPDATE_EARLIER_NON_COMPATIBLE_DOCUMENT message to itsself
(that the application can sub-classs) and sends out a
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_NON_COMPATIBLE_DOCUMENT notification message that and
application can handle.  If the application does not handle either
message then an error message is displayed and the file is not opened.

4. The document  is has a more recent protocol than the application:
In this case an error dialog box is put up and the file is not opened.

*** Changes for DOS files having protocols

Topic: Untitled documents
-------------------------
The document control generates names for newly created documents from
a base name stored in the GenAppDocumentControl (in
GADCI_untitledName).  This is set in the .ui file with:
	defaultName = "Write Untitled";

The default algorithm for generating names for untitled documents is
to first try GADCI_untitledName.  If that file already exists, a
numbered suffix is added to the GADCI_untitledName starting at one and
going upwards until a file name is found that does not already exist.

Applications can modify this behavior by sub-classing
MSG_GEN_DOCUMENT_GENERATE_NAME_FOR_NEW in the GenDocument to change
the algorithm for generating names.

Topic: Modifying behavior for "New"
-----------------------------------
The document provides two possible default behaviors for "New", either
an untitled document can be opened immediately (the default in the .ui
file), or a dialog box can be displayed.  The dialog box option is
invoked by adding this to the GenUIDocumentControl definition in the
.ui file:
	attributes = default +dialogBoxForNew;

The dialog box displayed has only "OK" and "Cancel" by default, but
the application can add its own UI objects as described below.

Topic: Adding user interface to "Open", "New" or "Save As"
----------------------------------------------------------
The applciation can add UI objects to any of the "Open", "New" and
"Save As" dialog boxes put having a tree of UI obejcts in the .ui file
a setting the appropriate field in the GenUIDocumentControl to point
to them.

The fields to set in the GenUIDocumentControl are:
	To add functionality to		.ui file
	-----------------------		--------
	New dialog box			newGroup
	Open dialog box			openGroup
	Save As dialog box		saveAsGroup

The object at the head of the group must be "not usable".

For example, to add an "Invert" setting to the "Open" dialog box, the
.ui file would look like:

In the GenUIDocumentControl:
	openGroup = InvertList;

InvertList = GenList {
	genStates = default -usable;
	attributes = type nonExclusive;
	children = InvertListEntry;
}

InvertListEntry = GenListEntry {
	moniker = "Invert";
}

In the applciation's code to generate a new document it queries the
obejcts (InvertListEntry in this example) to see what the user selected.

Topic: Modifying File menu behavior
-----------------------------------
The document control implements the standard GEOS behavior for the
File menu and this behavior is sufficient in most circumstances.
Applications can modify this behavior, however, by sub-classing
messages of the document control objects.  Care must be taken not to
unnecessarily alter the GEOS File menu model.

The messages listed below are described in more detail in the
apopropriate object.

These messages are sent to the GenUIDocumentControl when the user
selects items in the file menu:
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_NEW_DOC
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_OPEN_DOC
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_SAVE_DOC
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_SAVE_AS_DOC
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_CLOSE_DOC
	MSG_GEN_UI_DOCUMENT_CONTROL_INITIATE_REVERT_DOC

These messages are sent to the GenAppDocumentControl when an action is
about to be performed on the target document:
	MSG_GEN_APP_DOCUMENT_CONTROL_NEW_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_OPEN_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_USER_CLOSE_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_CLOSE_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_SAVE_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_SAVE_AS_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_USER_REVERT_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_REVERT_DOC
	MSG_GEN_APP_DOCUMENT_CONTROL_OPEN_DEFAULT_DOC

Topic: Error handling
---------------------
The document control handles errors returned by file operations by
displaying dialog boxes and, if appropriate, allowing the user to
correct the problem and try again.

Topic: Storing objects in VM files
----------------------------------
*** Later

Topic: Localization and character sets
--------------------------------------
*** WILL BE CHANGED AS PART OF THE FILE SYSTEM CHANGES ***
All file names, paths and volume names are stored in the DOS character
set and all such names passed to the document control are assumed to
be in the DOS character set.  The document control will convert these
strings to the GEOS character set before display (such as in error
messages).

------------------------------------------------------------------------------
	Messages sent out by the document control
------------------------------------------------------------------------------

The document control sends out messages that applications can handle
to implement the behavior of documents.

The messages that the document control sends out correspond to actions
that the application must perform, such as INITIALIZE_DOCUMENT_FILE,
as opposed to user actions (such as NEW).

The messages sent to the output of the document control (set in the
GenAppDocumentControl object) are listed below.  See the
GenDocumentClass documentation for pass and return parameters.

The handlers for these messages can call
MSG_GEN_DOCUMENT_GET_OPERATION to find the context that they were
called in.

The "Messages sent for common user actions" section lists which of
these messages are send for all the common user actions.

MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE
Description:
	Sent when the application should set the document file to the
	empty document state.
Context:
	Called when a new document file has just been created.
VM/DB file based apps will commonly:
	Allocate map block and set up data structures in the file.
DOS file base apps will commonly:
	Initialize data structures in memory for a default file.

MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT
Description:
	Notification that a file has been opened.  Sent when the
	application should construct (or enable) the UI components
	used to	display the document.
Context:
	Called when the user opens a file (File->Open, File->New).
	This is not called when the application is started from state.
Apps that use static objects for display will commonly:
	Enable the UI objects used for display
Apps that use dynamic objects for display will commonly:
	Create UI objects used to display the newly opened document

MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT
Description:
	Notification that a file is about to be closed.  Sent when the
	application should destroy (or disable) the UI components used
	to display the document.
Context:
	1) Called when the user closes a file (File->Close, File->Exit)
	   after changes have been saved.
	2) Called when, while starting from a state file, the document
	   file could not be re-opened.
Apps that use static objects for display will commonly:
	Disable the UI objects used for display
Apps that use dynamic objects for display will commonly:
	Destroy UI objects used to display the document to be closed

MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT
Description:
	Notification that a document has been opened and UI has been
	created for it and that it needs to be displayed.
Context:
	1) Called when a user opens a file (File->Open, File->New)
	   after calling MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT
	2) Called when re-opening a document as part of restoring from a
	   state file
Apps that use static objects for display will commonly:
	Do nothing
Apps that use dynamic objects for display will commonly:
	Attach the dynamic objects to the file (if needed)

MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT
Description:
	Notification that a document is about to be closed and that
	the UI used to display the file must be detached from the file.
Context:
	1) Called when a user closes a file (File->Close, File->Exit)
	   before calling MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT
	2) Called when closing a document as part of exiting PC/GEOS
	   and saving state
Apps that use static objects for display will commonly:
	Do nothing
Apps that use dynamic objects for display will commonly:
	Detach the dynamic objects from the file (if needed)

The following messages are sent out by the document control but
generally only need to be handled by applications that use a VM or DB
file but cache some document information outside of the file itsself.

MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE
Description:
	Notification that the application must update its cached
	information from the file.
Context:
	1) Called when the user opens a file (File->New, File->Open)
	   after the file has been opened.
	2) Called when a file is re-opened as part of starting from state.
VM/DB based apps will commonly:
	Load any information in the file that might be cached
	someplace outside the file

MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE
Description:
	Notification that the document file needs to be up to date for
	an action that is about to take place.  This message is not
	sent to documents that are not modified (clean).
Context:
	1) Called when the user saves a file (File->Save,
	   File->SaveAs) before the file is actually saved
	2) Called before the file is closed as part of exiting to DOS
	   (if the file is dirty)
VM/DB based apps will commonly:
	Store any information in the file that might be cached
	someplace outside the file

The following message is only applicable to files that can be opened
in "shared multiple" mode.

MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED
Description:
	Notification that the document has changed.
Context:
	1) Sent from a timer that periodically polls the document for changes
VM/DB based apps will commonly:
	Re-read cached data and re-display file.

The following messages are sent out by the document control but
generally only need to be handled when using a DOS file (as oppsosed
to a VM or DB file).

MSG_META_DOC_OUTPUT_PHYSICAL_SAVE
Description:
	Really save the file.

MSG_META_DOC_OUTPUT_PHYSICAL_AUTO_SAVE
Description:
	Really auto-save the file.  This is called on auto-save (if
	the document control is set up to support auto-save) and on
	detach to save changes to the file.

MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE
Description:
	This message is sent by the default MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS
	handler after opening the new DOS file.  This allows
	applications that use DOS files to implement save as without
	having to intercept MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS and deal with
	creating the file.

MSG_META_DOC_OUTPUT_PHYSICAL_REVERT
Description:
	Really revert the file.

The following messages are sent out by the document control but are
only needed when handling documents of different protocols.

MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT
Description:
	Handle updating of an earlier protocol file that is compatible with
	the protocol of the document control (since the file is compatible
	applications will often not handle this)

MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT	method
Description:
	Handle updating of an earlier protocol file that is not compatible with
	the protocol of the document control.

The following messages are sent out by the document control but are
only needed in special cases.

MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED
Description:
	Notification that a "Save As" has been completed for the
	document.
Context:
	Sent at the end of the "Save As" operation

MSG_META_DOC_OUTPUT_ATTACH_FAILED
Description:
	Notification that upon restarting from a state file the
	document file could not be re-opened.

------------------------------------------------------------------------------
	Messages to subclass in GenDocumentClass
------------------------------------------------------------------------------

GenDocumentClass has several messages that the application can
subclass to add behavior.   These messsages correspond to actions
that the application must perform, such as INITIALIZE_DOCUMENT_FILE,
as opposed to user actions (such as NEW).

The messages that are intended for application subclassing are listed
below.  See the GenDocumentClass documentation for pass and return
parameters.

The handlers for these messages can call
MSG_GEN_DOCUMENT_GET_OPERATION to find the context that they were
called in.

The "Messages sent for common user actions" section lists which of
these messages are send for all the common user actions.

MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
Description:
	Sent when the application should set the document file to the
	empty document state.
Context:
	Called when a new document file has just been created.
VM/DB file based apps will commonly:
	Allocate map block and set up data structures in the file.
DOS file base apps will commonly:
	Initialize data structures in memory for a default file.

MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
Description:
	Notification that a file has been opened.  Sent when the
	application should construct (or enable) the UI components
	used to	display the document.
Context:
	Called when the user opens a file (File->Open, File->New).
	This is not called when the application is started from state.
Apps that use static objects for display will commonly:
	Enable the UI objects used for display
Apps that use dynamic objects for display will commonly:
	Create UI objects used to display the newly opened document

MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
Description:
	Notification that a file is about to be closed.  Sent when the
	application should destroy (or disable) the UI components used
	to display the document.
Context:
	1) Called when the user closes a file (File->Close, File->Exit)
	   after changes have been saved.
	2) Called when, while starting from a state file, the document
	   file could not be re-opened.
Apps that use static objects for display will commonly:
	Disable the UI objects used for display
Apps that use dynamic objects for display will commonly:
	Destroy UI objects used to display the document to be closed

MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
Description:
	Notification that a document has been opened and UI has been
	created for it and that it needs to be displayed.
Context:
	1) Called when a user opens a file (File->Open, File->New)
	   after calling MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
	2) Called when re-opening a document as part of restoring from a
	   state file
Apps that use static objects for display will commonly:
	Do nothing
Apps that use dynamic objects for display will commonly:
	Attach the dynamic objects to the file (if needed)

MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
Description:
	Notification that a document is about to be closed and that
	the UI used to display the file must be detached from the file.
Context:
	1) Called when a user closes a file (File->Close, File->Exit)
	   before calling MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
	2) Called when closing a document as part of exiting PC/GEOS
	   and saving state
Apps that use static objects for display will commonly:
	Do nothing
Apps that use dynamic objects for display will commonly:
	Detach the dynamic objects from the file (if needed)

The following messages are sent out by the document control but
generally only need to be handled by applications that use a VM or DB
file but cache some document information outside of the file itsself.

MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE
Description:
	Notification that the application must update its cached
	information from the file.
Context:
	1) Called when the user opens a file (File->New, File->Open)
	   after the file has been opened.
	2) Called when a file is re-opened as part of starting from state.
VM/DB based apps will commonly:
	Load any information in the file that might be cached
	someplace outside the file

MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE
Description:
	Notification that the document file needs to be up to date for
	an action that is about to take place.  This message is not
	sent to documents that are not modified (clean).
Context:
	1) Called when the user saves a file (File->Save,
	   File->SaveAs) before the file is actually saved
	2) Called before the file is closed as part of exiting to DOS
	   (if the file is dirty)
VM/DB based apps will commonly:
	Store any information in the file that might be cached
	someplace outside the file

The following message is only applicable to files that can be opened
in "shared multiple" mode.

MSG_GEN_DOCUMENT_DOCUMENT_HAS_CHANGED
Description:
	Notification that the document has changed.
Context:
	1) Sent from a timer that periodically polls the document for changes
VM/DB based apps will commonly:
	Re-read cached data and re-display file.

The following messages are sent out by the document control but
generally only need to be handled when using a DOS file (as oppsosed
to a VM or DB file).

MSG_GEN_DOCUMENT_PHYSICAL_SAVE
Description:
	Really save the file.

MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE
Description:
	Really auto-save the file.  This is called on autt-save (if
	the document control is set up to support auto-save) and on
	detach to save changes to the file.

MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS
Description:
	Really "save as" the file.  This is called passing the file
	name to do the "save as" to.

MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE
Description:
	This message is sent by the default MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS
	handler after opening the new DOS file.  This allows
	applications that use DOS files to implement save as without
	having to intercept MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS and deal with
	creating the file.

MSG_GEN_DOCUMENT_PHYSICAL_REVERT
Description:
	Really revert the file.

The following messages are sent out by the document control but are
only needed when handling documents of different protocols.

MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT
Description:
	Handle updating of an earlier protocol file that is compatible with
	the protocol of the document control (since the file is compatible
	applications will often not handle this)

MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT
Description:
	Handle updating of an earlier protocol file that is not compatible with
	the protocol of the document control.

The following messages are sent out by the document control but are
only needed in special cases.

MSG_GEN_DOCUMENT_PHYSICAL_CREATE
Description:
	Really create the file.

MSG_GEN_DOCUMENT_PHYSICAL_OPEN
Description:
	Really open the file.

MSG_GEN_DOCUMENT_PHYSICAL_CLOSE
Description:
	Really close the file.

MSG_GEN_DOCUMENT_PHYSICAL_DELETE
Description:
	Really delete the file.

MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED
Description:
	Notification that a "Save As" has been completed for the
	document.
Context:
	Sent at the end of the "Save As" operation

MSG_GEN_DOCUMENT_ATTACH_FAILED
Description:
	Notification that upon restarting from a state file the
	document file could not be re-opened.

------------------------------------------------------------------------------
	Messages sent for common user actions
------------------------------------------------------------------------------

For common user actions, this is the order in which the above messages
are sent.  Things in angle brackets (<>) indicate actions that the
document control takes.  Things in brackets ([]) indicate messages
that normally are ignored by the application.  Note that this does not
cover all the error cases.

New:
	[MSG_GEN_DOCUMENT_PHYSICAL_CREATE]
	<create new file>
	<vm/db files: initialize vm attibutes, token, protocol>
	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
	<support saveas/revert: save the file so that revert will
	 return to this state>
	[MSG_GEN_DOCUMENT_PHYSICAL_SAVE]
	MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
	[MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE]
	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT

Open:
	[MSG_GEN_DOCUMENT_PHYSICAL_OPEN]
	MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT
	[MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE]
	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT

Save:
	[MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE]
	[MSG_GEN_DOCUMENT_PHYSICAL_SAVE]
	<vm/db: VMSave/VMSave called>

Auto Save:
	[MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE]
	[MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE]
	<vm/db: VMUpdate/VMUpdate called>

Save As:
	[MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE]
	[MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS]
	<vm/db: VMSaveAs/DBSaveAs called>
	[MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED]

Revert:
	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
	[MSG_GEN_DOCUMENT_PHYSICAL_REVERT]
	<vm/db: VMRevert/DBRevert called>
	[MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE]
	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT

Close:
	If document modified and user wants to save changes:
		[MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE]
		[MSG_GEN_DOCUMENT_PHYSICAL_SAVE]
		<vm/db: VMSave/VMSave called>
		MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
		MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
		[MSG_GEN_DOCUMENT_PHYSICAL_CLOSE]
	If document modified and user does not want to save changes:
		MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
		[MSG_GEN_DOCUMENT_PHYSICAL_REVERT]
		<vm/db: VMRevert/DBRevert called>
		MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
		[MSG_GEN_DOCUMENT_PHYSICAL_CLOSE]
	If document not modified
		MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
		MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
		[MSG_GEN_DOCUMENT_PHYSICAL_CLOSE]
	If document not modified and untitled
		MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
		MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT
		[MSG_GEN_DOCUMENT_PHYSICAL_CLOSE]
		[MSG_GEN_DOCUMENT_PHYSICAL_DELETE]

Attach:
	[MSG_GEN_DOCUMENT_PHYSICAL_OPEN]
	[MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE]
	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT

Detach:
	[MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE]
	[MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE]
	<vm/db: VMUpdate/VMUpdate called>
	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
	[MSG_GEN_DOCUMENT_PHYSICAL_CLOSE]

Attach Failed:
	MSG_GEN_DOCUMENT_ATTACH_FAILED
	MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT

------------------------------------------------------------------------------
	Most frequently asked questions
------------------------------------------------------------------------------
