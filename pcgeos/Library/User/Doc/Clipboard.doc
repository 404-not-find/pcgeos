COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		User Interface
FILE:		Clipboard

DESCRIPTION:

	$Id: Clipboard.doc,v 1.2.34.1 97/03/29 03:37:16 canavese Exp $

------------------------------------------------------------------------------@

			Clipboard mechanism
			-------------------

About the Clipboard
-------------------
The clipboard is a set of functions that allow applications to exchange data.
In particular, the clipboard provides support for the generalized cut, copy,
and paste operations in many applications.  The quick-transfer move or copy
operations are also supported by the clipboard (see Quick Transfer
documentation).  Text and graphics strings are two standard data formats
supported by the clipboard.  Other, application-defined formats can also be
used.


Using the Clipboard
-------------------
Typically, applications that deal with user-editable data will have an "Edit"
menu with "Cut", "Copy", and "Paste" items (see UIC/.ui-file documentation for
standard ways to create these menu items).

When a data item that can be cut or copied is selected, the "Cut" and "Copy"
menu items will be enabled.  The application may also determine that the data
item is read-only and disable the "Cut" menu item.  When enabled, the "Cut"
menu item will "cut" or move the selected data item to the clipboard and the
"Copy" menu item will copy the data item to clipboard.  The only difference is
that the "Cut" operation removes the data item from the source while the "Copy"
does not.  Both replace the current clipboard item with the selected data item.

The "Paste" menu item is enabled when the application determines that an
appropriate destination has been made as the target (see focus/target
documentation?).  The "Paste" item copies the current clipboard item to the
application destination.  The "Paste" item is enabled only if the type of data
in the clipboard item is supported by the destination.  For example, the
NotePad's "Paste" item is not enabled when a GeoDraw rectangle is the current
clipboard item because the NotePad doesn't support graphics.  After the "Paste"
operation, the clipboard item remains and can be pasted elsewhere.

In general, applications should limit their use of the clipboard to these
cut/copy/paste menu items, as the user expects the clipboard contents to
change only when these menu items are used.  (Fix graphics importer? -- it
currently changes the clipboard item on an import.)


Clipboard Data Format
---------------------
The clipboard accepts data in several formats.  Two standard formats are
defined:  TIF_TEXT (text) and TIF_GSTRING (graphics strings).  Applications
can also define their own custom formats.  Different formats can be used
to represent the same data in different ways.  For example, a clipboard item
from GeoWrite might represent some text both in the text format and in the
gstring format.  This allows the item to be pasted into both the NotePad which
accepts text formats and GeoDraw which accepts graphics string formats.

A format is identified by two words, one specifies a manufacturer and the other
specifies a manufacturer-specific format (TransferFormatID).  So, the currently
defined formats are actually MANUFACTURER_ID_GEOWORKS:TIF_TEXT and
MANUFACTURER_ID_GEOWORKS:TIF_GRAPHICS_STRING.  New formats can be defined by
assigning new manufacturer IDs and format types and by specifying the format
of the data blocks and the meaning of the TFI_extra{1,2} fields.

The clipboard is implemented as a VM file (see VM documentation) that is called
the "Transfer VM File" (naming?).  The Transfer VM File actually stores several
things -- the item used for the cut/copy/paste operations, the item used for
quick-transfer -move and -copy operations, and a cut/copy/paste undo item (see
below).  Each item is stored as a group of VM blocks.  One block is the header
(TransferItemHeader) and contains general information about the item.  The
header block points to one or more of the formats described above.  Each format
is a chain (or tree) of VM blocks using the standard VMChain mechanism (see
tony's VMChain document).

first two bytes of each preceding block (see TransferItemDataHeader).

Putting Data in the Clipboard
-----------------------------
Preparing an item to be the placed in the clipboard requires allocating the
appropriate data blocks and the header block in the Transfer VM File.  The
blocks can either be allocated from scratch with VMAlloc or they can be
existing memory blocks that are attached to the VM file with VMAttach.  If
using existing memory blocks, they should have been allocated specifically for
the purpose of creating a clipboard item, as the clipboard takes ownership
of the blocks (this is not accurate in precise terms).  The handle of the
Transfer VM File for these VM operations can be obtained with the
UIGetTransferFile routine.  Once the data blocks are allocated, the appropriate
information can be filled in.  The TIF_TEXT format is stored in a block with a
TextTransferBlockHeader.  The TIF_GSTRING format is stored as a gstring over
one or more VM blocks (see GString documentation).  The first two bytes of each
block holds the VM block handle of the next block in the chain or 0 if it is
the last block in the chain or the only block.  The header block stores
information about each format in the TIH_formats array.  There can be up to
MAX_CLIP_FORMATS (10) formats in a clipboard item.  The TIF_formatCount holds
the actualy number of available formats in the item.  The TIC_owner field is
the OD of the source of tranfser item.  This can be used in source-specific
ways such as determining if the source is the same as the destination.  The
TIC_sourceID is an additional four bytes of source-specific information.  The
TIF_flags field indicates whether this is a normal cut/copy/paste item or a
quick-transfer item.  The TIC_name field can hold an optional 32-character
name.  It appears in the Scrapbook application when a named clipboard item is
pasted in.  To actually put the allocated item on the clipboard, call
UserRegisterTransfer passing the VM file handle and VM block handle of the
header block and a flag indicating whether this is a normal cut/copy/paste
item or a quick-transfer item.  The current clipboard item is replaced and the
new item is now available to for pasting.  The application should then "forget"
any information about the allocated VM blocks as they are now managed by the
clipboard.


Getting Data from the Clipboard
-------------------------------
Before attempting to get data from the clipboard, an application should check
if that data has formats that the application supports.  This is done with the
UserQueryTransfer routine.  It takes a flag indicating whether the normal
cut/copy/paste item or the quick-tranfser item is being queried.  If the item
exists, it returns the VM file handle and VM block of the header block and the
owner of the item.  With the VM file handle and VM block of the header,
UserTestTransferFormat can be called to check if a specific format is supported
by the item.  If so, the application can go ahead and get that format with the
UserRequestTranfer routine.  (UserRequestTransfer can be called to request a
format without first calling UserTestTransferFormat -- UserRequestTransfer will
correctly indicate that the requested format doesn't exist.)  It takes the
format desired and the VM file handle and VM block of the header block
returned by UserQueryTransfer.  It returns the VM file handle and VM block of
the header block of the data blocks for that format.  The data should then by
copied out of the VM blocks into the application's own storage.  This needs to
be done because as soon as the application is finished with the item, it could
potential be removed by the clipboard (i.e. if some other application puts
something else on the clipboard).  The application calls UserDoneWithTransfer
to indicate that it has finished with the item.  This should be called after
UserQueryTransfer, whether or not UserRequestTransfer was called.


Keeping an Eye on the Clipboard
-------------------------------
In order for an application to correctly enable and disable it's "Paste" menu,
it needs to know when the clipboard item changes.  Applications can get
notification when this happens by registering with the clipboard.  The
UserAddTransferNotify routine takes an OD to which notification will be sent.
Whenever the clipboard item changes, METHOD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED
will be sent all the registered ODs.  The OD can then call the
UserQueryTransfer/UserTestTransferFormat/UserDoneWithTransfer routines to
determine if the new clipboard item contains formats that the application
supports.  If so, the "Paste" item can be enabled.  Whenever an item is freed,
NOTIFY_TRANSFER_ITEM_FREED is sent to all registered ODs.  This is generally
not needed.  When the OD is about to go away, UserRemoveTransferNotify is
called to remove the OD from the notification list.


Miscellaneous
-------------
undo item - As mentioned above, the Transfer VM File stores an undo item.
This can be used to provide a limited "undo" capability to applications.  A
cut or copy operation that uses UserRegisterTransfer to replace the current
clipboard item with a new item can be undone by calling UserUnregisterTransfer.
This has the effect of restoring the original clipboard item.  This only works
if there have been no interim clipboard operations from other applications.
(The useful of this is questionable can we remove it?)

listing all formats - UserEnumTransferFormats can be used to enumerate all
available formats in a clipboard item.  A specified number of formats
(format manufacturer and format type) are returned in a passed buffer.


Routines
--------

(see Library/User/userTransfer.asm for up-to-date information)


Methods
-------

METHOD_CUT message MetaUIMessages
METHOD_COPY message MetaUIMessages
METHOD_PASTE message MetaUIMessages
;
;	Sent to an obejct which is supposed to be the destination of a
;	clipboard operation.  METHOD_COPY should be handled by registering
;	the current selection with UI as the new clipboard item.
;	METHOD_CUT should do the same, but also delete the current
;	selection.  METHOD_PASTE should replace the current selection with
;	the current clipboard item, which can be obtained from the UI.
;
;	pass:	nothing
;	return:	nothing

METHOD_NOTIFY_TRANSFER_ITEM_FREED message MetaUIMessages
;
;	Sent to all ODs in TransferNotifyList to help maintain integrity
;	of transfer items from VM files other than the UI's transfer VM file.
;	Only sent if VM file handle of transfer item that is being freed
;	is different from UI's tranfser VM file handle.  If a transfer item
;	from a VM file other than the UI's transfer VM file is registered,
;	the VM blocks in that transfer item cannot be freed and the VM
;	file cannot be closed until notification is sent saying that the
;	transfer item has been freed.  Register'ers of such transfer items
;	should keep track of the VM file handle and VM block handle of the
;	item to check against the info sent by this method.
;
;	pass:	cx:dx - (VM file handle):(VM block handle) of transfer
;				item freed
;	return:	nothing

METHOD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED message MetaUIMessages
;
;	Sent to all ODs in TransferNotifyList to help with updating of
;	Cut/Copy/Paste button states.  Recipients can UserQueryTransfer
;	to check if the new normal transfer item contains formats that
;	the recipient supports.  If not, Paste button can be disabled.
;
;	Pass:	cx:dx - object to enable/disable based on transfer state (0
;			for none)
;	Return:	cx - non-zero if paste possible


Structures
----------

;-----------------------------------------------------------------------------
;	Structures used for transfers
;-----------------------------------------------------------------------------

(see Library/User/userTransfer for up-to-date information)
