COMMENT `CLASS DESCRIPTION-----------------------------------------------------

				VisCompClass

$Id: VisComp.doc,v 1.1.34.1 97/03/29 03:37:55 canavese Exp $

Synopsis
--------

	VisCompClass is the composite version of a visible object.  It may
have any number of visible children.  In addition, it may have a graphics
window associated with it, through which it & its non-window children appear.
VisCompClass can use the geometry manager which can enforce various layout
strategies for its children.

Limitations
-----------
	Some of the default VisCompClass behavior will not be useful for an
overlapping tree of visual objects -- you will want to write special routines
for mouse handling (choosing which of a group of overlapping objects to send
the click to), and possibly drawing.  VisClass objects are also set up to work
in the legal graphics coordinate ranges, which can be limiting.  The graphic 
object library subclasses VisClass and VisCompClass objects and deals with all 
of these problems fairly well -- it might be a good place to start if you need 
such things.  

Alternatives
------------
	Replace VisCompClass to create your own composite visual object, 
subclassed off of VisClass.  Of course, you are then required to handle
all sorts of composite methods yourself.  You're almost always better off
inheriting VisCompClass and subclassing messages as needed.
	   

Implementation Status
---------------------
	Finished Oct 1991, hopefully.

See Also
--------
	VisClass (documentation in visClass.asm)
		Superclass of VisCompClass; the base class for all 
		objects in the visual world.
		
	VisContentClass (documentation in visContent.asm)
		Subclass of VisCompClass for handling visual objects inside
		a GenView.
		
	SpecClass (Documentation in visSpec.asm)
		Conceptually the common specific UI object, although
	        not really a subclass of VisClass.   Handles various tasks
		needed for implementing generic objects in the visual world.

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------

Conceptual Overview
-------------------
	The job of the VisCompClass object (other than those inherited from
VisClass) is keep visual children.  Hence all of the nodes in a conventional
visual tree will of class VisCompClass or some subclass thereof.  VisComp
objects are often in charge of relaying messages down to the appropriate 
children, or will receive messages (e.g. queries) from children and pass them 
upwards in the tree.  It may also be expected to arrange the children in a
certain way, using the geometry manager.
       
	A VisComp object may or may not have children and may or may not have
a window associated with it.  It may also be the win group object, heading
a tree entity.

Warnings
--------

Usage:
------
	Quite often you will want to use a VisCompClass object just to group
several children together.  In these cases you may often be able to use a 
plain VisCompClass object without any subclassing, so long as you set the 
appropriate flags for managing the children.  If the children have preset 
bounds and you do not wish to use the geometry manager to size and position 
the children, you will want to set VCGA_CUSTOM_MANAGE_CHILDREN in its geoFlags.  
If you do want to use the geometry manager, several of the various geometry 
options can be set in the .goc or .asm file without subclassing VisCompClass. 
Children can be added initially in the .goc or .asm file, or added on the 
fly.  See the examples, sample programs, and in-depth topics listed in 
visClass.asm for more info.
	
See Also
--------
	geometry manager documentation
	flow object documentation (userFlow.asm?)
	GrObj library

;------------------------------------------------------------------------------
;	Implementation Notes
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Inheritance
;------------------------------------------------------------------------------

MetaClass
---------
	
    MI_base	MetaBase	<>	; Public instance data
    
    
MSG_META_NULL			- per VisClass
MSG_META_DUMMY			- per VisClass
MSG_META_INITIALIZE		- Sets up various default instance vars.
				  Will often be subclassed.
MSG_META_ATTACH			- per VisClass
MSG_META_DETACH			- per VisClass
MSG_META_DETACH_COMPLETE	- per VisClass
MSG_META_FORCED_DETACH		- per VisClass
MSG_META_DETACH_ABORT		- per VisClass
MSG_META_ACK			- per VisClass
MSG_META_GET_CLASS		- per VisClass
MSG_META_IS_OBJECT_IN_CLASS	- per VisClass
MSG_META_BLOCK_FREE		- per VisClass
MSG_META_OBJ_FREE		- per VisClass
MSG_META_FINAL_OBJ_FREE		- per VisClass
MSG_META_SET_FLAGS		- per VisClass
MSG_META_GET_FLAGS		- per VisClass
MSG_META_VM_FILE_DIRTY		- per VisClass
MSG_META_QUIT			- per VisClass
MSG_META_QUIT_ACK		- per VisClass
MSG_META_DISPATCH_EVENT		- per VisClass
MSG_META SEND_CLASSED_EVENT	- per VisClass
MSG_META_GET_OPTR		- per VisClass
MSG_GET_TARGET_AT_TARGET_LEVEL	- per VisClass
MSG_ADD_VAR_DATA_TYPE		- per VisClass
MSG_ADD_VAR_DATA_ENTRY		- per VisClass
MSG_META_DELETE_VAR_DATA	- per VisClass

				
VisClass
--------
	
    @instance Rectangle	VI_bounds = {0, 0, 0, 0};
    	;The bounds of all the children should stay within this object's
	;bounds.
	
    @instance byte VI_typeFlags = 0;
    	;VTF_IS_COMPOSITE must always be set for this object.
	
    @instance byte VI_attrs =
		(VA_MANAGED|VA_DRAWABLE|VA_DETECTABLE|VA_FULLY_ENABLED);
		
    	;If VA_MANAGED, VA_DRAWABLE, or VA_DETECTABLE are cleared for this
	;object, it affects all its children as well, even if the same
	;flag(s) are set in the children.  VA_FULLY_ENABLED doesn't affect
	;the children by nature, but if things are working correctly, when
	;the flag is cleared here, it ought to be clear in the children as well.

    @instance byte VI_optFlags = (VOF_GEOMETRY_INVALID|VOF_GEO_UPDATE_PATH|\
				  VOF_IMAGE_INVALID|VOF_IMAGE_UPDATE_PATH);
    	;Treated just like a VisClass object.
	
    @instance byte VI_geoAttrs = 0;
    	;Treated just like a VisClass object.
	
    @instance byte VI_specAttrs = 0;
    	;Treated just like a VisClass object.
    
    @instance @link VI_link;
    	;Treated just like a VisClass object.
	

All VisClass messages are either handled by VisClass or VisCompClass, but
none are handled by both and treated differently by VisCompClass, so they
are not enumerated here.
	
	
	
Imported meta messages handled
------------------------------
MSG_META_RAW_UNIV_ENTER		- per VisClass
MSG_META_RAW_UNIV_LEAVE		- per VisClass
MSG_META_UNIV_ENTER			- per VisClass
MSG_META_UNIV_LEAVE			- per VisClass
MSG_META_EXPOSED			- creates a gstate and sends a MSG_VIS_DRAW
				  to itself
MSG_META_EXPOSED_FOR_PRINT		- creates a gstate and sends a MSG_VIS_DRAW
				  to itself, sending a MSG_PRINTING_COMPLETED
				  when done.
MSG_META_INVAL_TREE			- invalidates window, and all its children
	
MSG_META_PTR				- calls child whose bounds lie under passed pos
MSG_META_START_SELECT		- calls child whose bounds lie under passed pos
MSG_META_END_SELECT			- calls child whose bounds lie under passed pos
MSG_META_DRAG_SELECT			- calls child whose bounds lie under passed pos
MSG_META_START_MOVE_COPY		- calls child whose bounds lie under passed pos
MSG_META_END_MOVE_COPY		- calls child whose bounds lie under passed pos
MSG_META_DRAG_MOVE_COPY		- calls child whose bounds lie under passed pos
MSG_META_START_FEATURES		- calls child whose bounds lie under passed pos
MSG_META_END_FEATURES		- calls child whose bounds lie under passed pos
MSG_META_DRAG_FEATURES		- calls child whose bounds lie under passed pos
MSG_META_START_OTHER			- calls child whose bounds lie under passed pos
MSG_META_END_OTHER			- calls child whose bounds lie under passed pos
MSG_META_DRAG_OTHER			- calls child whose bounds lie under passed pos

MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING -
				- per VisClass
				

------------------------------------------------------------------------------`
