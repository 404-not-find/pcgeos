COMMENT `CLASS DESCRIPTION-----------------------------------------------------

				VisClass

$Id: VisClass.doc,v 1.1.34.1 97/03/29 03:37:33 canavese Exp $

Synopsis
--------
	VisClass is the parent class of all Visible UI objects and provides
useful functions common to all vis objects.  VisClass objects by themselves
will do nothing, and must be placed inside of a VisCompClass composite
before they can appear on screen.  VisClass and VisCompClass provide lots of
default behavior for creating a hierarchy of non-overlapping visible objects,
providing simple ways for objects to draw themselves with a certain position
and bounds with respect to their window, handling of mouse events in the
visible tree, easy adding and removing of objects, and geometrical layout
of groups of objects.   Applications can subclass this behavior to change
it for their own uses.  The specific user interface is implemented entirely
as objects subclassed off of VisClass.
  
Limitations
-----------
	Some of the default VisCompClass behavior will not be useful for an
overlapping tree of visual objects -- you will want to write special routines
for mouse handling (choosing which of a group of overlapping objects to send
the click to), and possibly drawing.  VisClass objects are also set up to work
in the legal graphics coordinate ranges, which can be limiting.  The Graphic 
Object Library subclasses VisClass and VisCompClass objects and deals with all 
of these problems fairly well -- it might be a good place to start if you need 
such things.  

Implementation Status
---------------------
	Hopefully completed as of Oct 1991.

See Also
--------
	VisCompClass (documentation in visComp.asm)
		Subclass of visClass for handling visual children and
		opening/closing windows.
		
	VisContentClass (documentation in visContent.asm)
		Subclass of VisCompClass for handling visual objects inside
		a GenView.
		
	SpecClass (Documentation in visSpec.asm)
		Conceptually the common specific UI object, although
	        not really a subclass of VisClass.   Handles various tasks
		needed for implementing generic objects in the visual world.
		
	Graphic Object Library (Library/GrObj)
		A library of graphic objects suitable for overlapping or
		large visual trees, especially for graphics.

;------------------------------------------------------------------------------
;	Description
;------------------------------------------------------------------------------

Terminology
-----------	

Bounds --
       	The rectangle that contains a visual objects.  Visual objects are not
       	allowed to draw outside their bounds.  
       
Geometry Manager --
 	The geometry manager is a term for the mechanism provided by the
	visual object library for positioning and sizing a hierarchy of 
	objects in some logical manner.   While the heart of the geometry
	manager is in VisCompClass'es default handlers for MSG_VIS_RECALC_SIZEE
	and MSG_VIS_POSITION_BRANCH, it really also includes the sizing
	behavior of all the gadgets as well.  (See the geometry manager 
	documentation for more info.)
	
Marking an object invalid --
	Indicating that an objects image or geometry has changed in some way,
	so that the User Interface can get itself up to date with the changes,
	by invalidating areas of the screen, moving/resizing windows, or 
	moving/resizing visual objects.
	
Realized -- 
	An attribute of a VISUAL tree which indicates that it has been placed 
	on screen, by virtue of having graphics windows created for its 
	windowed objects.  A visible tree becomes this way when its top 
	WIN_GROUP object is marked as VA_VISIBLE, & a visual update is done on 
	it, using MSG_VIS_VUP_UPDATE_WIN_GROUP.

Update mechanism -- 
       The mechanism by which objects are brought up or down on the screen,
       or incrementally changed in some way, to keep the onscreen image
       up-to-date.
       
Win Group --
	A term used for windowed objects which represent whole window groups 
	that are manipulated together.  Used for whole dialog boxes and 
	application windows, as well as menu windows.  Many visual operations,
	such as vis updates, affect an entire win group at a time.   An
	entire visual tree under a win group will be placed onscreen or removed
	at a time.
	
Visible Tree --
	A visible tree describes a hierarchy of visual objects made up of
	nodes (subclassed off of VisCompClass) and leaves (subclasses off of
	VisClass.  The nodes can contain any number of visual children, 
	including other nodes.  All of the objects have a position and size
	associated with them, known as bounds, and the bounds of visual 
	children of an object will be a subset of the parent's bounds.
	
Visual Moniker --
       Text or a graphics string associated with an object.  Utility messages/
       routines are available to draw a vis moniker in a variety of ways.
       
VUP --
    	Prefix added to those Vis methods which travel upwards in the tree until
	someone can handle the message (typically a win-group or field object).
	
	

Relationships/Context
---------------------
	Everything that appears onscreen will be in the visible tree somewhere,
starting from the OLScreen object (the specific UI's visible incarnation of
the GenScreen generic object, the root window). The UI has a visual hierarchy 
which is quite complete, extending from the Screen down to the smallest gadgets
in each base window or popup.  All of these objects are subclassed from 
VisClass.  Those which have children are subclassed from VisCompClass.  A 
sample tree might look like:

	       UI VISIBLE LINKAGE		WINDOW SYSTEM MAPPING
	       ------------------		---------------------

   OLScreen (VTF_IS_WINDOW & VTF_IS_WIN GROUP)      graphics window (screen)
		   |					|
   OLField (VTF_IS_WINDOW & VTF_IS_WIN GROUP)	      graphics window (field)
		   |					|    
  OLBaseWin (VTF_IS_WINDOW & VTF_IS_WIN_GROUP)     graphics window (base window)
	     /          \				  \
	  OLCtrl     OLPane (VTF_IS_PORTAL)        graphics window (view window)
           / \	 	  \				    
    OLButton OLButton   OLScrollbar			     


    	As far as the User Interface is concerned, these objects may or may
not correspond to a generic object defined by the UI or application.  Other
non-visible objects may lie outside this visible tree and communicate with 
the visual objects as needed.
    
    
Conceptual Overview
-------------------
	
	VisClass represents a childless visible object in a visible tree.
In the User Interface, it generally corresponds to a single gadget on the 
screen.  It generally has bounds, a link to its visible tree, some flags
indicating if it is somehow invalid, and some type flags to indicate whether
it has a window associated with it, among other things.  A default vis object
doesn't know how to do much, it is more a library of messages to make its
life simpler.

Visual objects may be specified statically in a .ui or .goc file, or created by 
instantiating an object, initializing its instance data, & adding it to
an existing visual tree.  Visible trees are also created by a specific UI to 
implement Generic objects onscreen.

	
Usage
-----
	
	A VisClass object will almost never be used by itself, as it doesn't
handle a MSG_VIS_DRAW, or handle various mouse messages (MSG_META_START_SELECT, 
MSG_META_PTR).  Your visual object will always want to have a MSG_VIS_DRAW handler,
and if it's interactive will probably need mouse method handlers as well.  Once
that is done, VisClass will provide default functionality for various things
such as invalidating and validating itself, setting its bounds instance data
or type flags.    If you set a size for it initially, it can even run under
the geometry manager without a special MSG_VIS_RECALC_SIZE handler, provided
it is sufficient for it to keep a fixed size in all situations.
	
	
In Depth: VisTypeFlags
----------------------
	
	Visible objects come in a variety of forms.  There are essentially just
VisClass & VisCompClass, + more complex objects which subclass from these
(VisTextClass).  We will limit our discussion to the lower forms.  The
following bits may be set in the VisClass instance data to provide a wide
variety of visible characteristics for visible objects:

	VTF_IS_COMPOSITE- set if visible object has VisCompInstance data,
			  & therefore may have visible children

	VTF_IS_WIN_GROUP- set for VA_IS_WINDOW objects which represent whole
			  window groups that are manipulated together.  
			  Used for whole dialog boxes and application windows.
			  Many visual operations affect an entire WIN_GROUP
			  at a time.
	VTF_IS_WINDOW	- set if object uses a graphics window for its
			  entire visual space, whose
			  handle is kept in VCI_window  (must have
			  VisCompInstance data)
	VTF_IS_CONTENT	- is a content object, i.e. a window that is expected
			  to be set up by some other object (typically a
			  GenView object in the UI, but could be any object
			  that creates a window.)  
	VTF_IS_PORTAL	- set if object has its own window, which is stored
			  elsewhere.  Any visible children appear in that 
			  window.  Object still may have portions which
			  appear in its parents window.  An example is
		 	  the display control object, which manages several
	 		  child windows inside its own window area.  Its border
			  is drawn in the parent window, and its own window is
			  then inset one pixel from its bounds.
	VTF_CHILDREN_OUTSIDE_PORTAL_WIN -
			  Set for objects that are portals, but want to have
			  their children outside of the object's window.
			  An example is the view, which can have various
			  children (scrollbars, other gadgets) around the
			  outside of the view window, rather than inside it.

These flags can be declared in a .ui or .goc definition of an object or class.
For objects created on the fly rather than defined in a source file, they are 
set in the MSG_VIS_INITIALIZE. (This is true for instance data of any object.
Objects created on the fly using ObjInstantiate do not have any default values 
set for them.)

	
	
In Depth: Visible Bounds
------------------------

Visible bounds are used in vis objects to describe where they appear
on screen.  The data stored for the visible bounds depends on the
type of visible object:

	The bounds of Non-window or portal objects are stored in document
	coordinates, relative to the window on which they appear.  A GrFillRect
	using an object's bounds will define the area available to the object
	for drawing.

	The left and top bounds constitute a POSITION for an object.   The
	different between the right and left bounds is the width of the object;
	the difference between the bottom and top bounds is the height of
	the object.  Together, the width and height consistute the SIZE of the
	object.  There are separate messages for setting and setting the size 
	or the position of the object, although there is also a message for 
	getting the entire bounds at once.
	
	The bounds of windowed objects (VTF_IS_WINDOW) represent the location of
	the window, in document coordinates, on the parent window on which it
	lies.  Since the object utilizes a new graphics window, there is
	a new frame of reference for drawing -- the upper left hand corner
	is found at (0, 0), not at the left, top value.

	An object's bounds are initialized to zero, indicating a 0-sized point
	object.  In order for the object to appear, the bounds must be set to
	give the object some size and position, either in the ".ui" file, or
	by code which hand-sets the position (MSG_VIS_SET_POSITION and MSG_VIS_-
	SET_SIZE), or by the geometry manager, if it is being used.

	Unless you are willing to subclass and change the drawing and mouse-
	handling behavior of VisClass and VisCompClass, it doesn't make much
	sense to a) allow part of a child's bounds to be outside that of its
	parent, or b) allow siblings bounds to overlap.   The default vis class
	handlers will behave unpredictably in these situations.
	
	
In Depth: Visual Updating
-------------------------

	Much of the visual world is driven using an "update" mechanism, 
whereby objects can be marked as visually "invalid" in either image, window
positioning, or geometry, & then "updated" whereby all the right stuff is
done to validate the visual tree & get it into the correct state.  The
actual validation is done by MSG_VIS_UPDATE_WIN_GROUP, but this should not
be called directly.  Instead, the most direct call you should make to update
the visual tree is MSG_VIS_VUP_UPDATE_WIN_GROUP, which implements a number
of "update modes", which may be passed in dl as any of the enumerated type
VisUpdateMode.  VisUpdateMode is already required by a number of other
visible MSGs.

	VUM_MANUAL			- don't update.  I promise
					  to update at a later point.
					  (Not available for use
					  w/MSG_GEN_SET_NOT_USABLE)

	VUM_NOW				- update NOW.

	VUM_DELAYED_VIA_UI_QUEUE	- "auto" update, delayed until
					  everything in UI queue is
					  processed.
	VUM_DELAYED_VIA_APP_QUEUE	- "auto" update, delayed until
					  everything in APP queue is
					  processed.

	Most actions of visible actions are done by setting aspects (images,
windows, or geometry) of various objects invalid, by calling 
VisMarkInvalid or MSG_VIS_MARK_INVALID on the objects.  
	 
VisMarkInvalid will modify what visual aspects need updating for an object:

	Geometrically organized  (GEOMETRY_INVALID)
			- set if the geometry manager needs to go to
			  work & generated the visible size & position
			  for the object.  CAN only be done if visually built.

	Window position valid  (WINDOW_INVALID)
			- set if the visible object uses a window which 
			  needs repositioning, or an object that needs to
			  be VIS_OPEN'd or VIS_CLOSE'd

	Drawn  (IMAGE_INVALID)
			- set if the screen is not drawn correctly.

VisMarkInvalid also accepts a VisUpdateMode, and after marking the appropriate 
things in the object invalid, sends a MSG_VIS_VUP_UPDATE_WIN_GROUP 
automatically (unless VUM_MANUAL is passed).  Hence it is rare that MSG_VIS_-
VUP_UPDATE_WIN_GROUP needs to be called directly.
		     
		     

In Depth: Making visual branches appear on screen, taking them down
-------------------------------------------------------------------

Typically, a window with a visible tree headed by a visible object marked as 
a WIN_GROUP will be brought on-screen or off screen (known as realizing, 
unrealizing). To realize, or make visual, a WIN_GROUP, the VA_VISIBLE bit must 
be set, & then a visual update must be performed on the branch.  To bring
a visible tree off screen, the VA_VISIBLE bit is cleared, & the tree
is visually updated. Both may be done with the MSG_VIS_SET_ATTRS.   The 
WIN_GROUP object and the entire visible tree below it will be made visible and
not visible in this manner.

	As the WIN_GROUP becomes visible, objects become realized by getting
a MSG_VIS_OPEN.   The default MSG_VIS_OPEN will set VA_REALIZED in the object,
indicating that it has been made visible.  Objects are unrealized by the 
MSG_VIS_CLOSE, which clears VA_REALIZED.  Objects may subclass these messages 
to perform any interesting things they may want to do when the window comes up 
or goes down.

NOTES:
	1) Visible branches may contain nested WIN_GROUP's, but realizing
	one WIN_GROUP will not realize any below it.  All lower WIN_GROUP
	must be unrealized before those above it may be unrealized.  CONTENT
	objects are considered, & must be marked as, WIN_GROUP's, and realized
	manually.


In Depth: To create a visible tree which will appear in a view:
---------------------------------------------------------------

	You can specify a VisContent object to run under a GenView, have
	hang visible children off of it.  The children can even be run by
	the geometry manager.  Here is an example of a three Vis objects
	running under a VisContent, their positions in the content preset
	in their .goc definitions:	

	@object GenViewClass VisSamp2View = {
	    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
	    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
	    GVI_content = VisSampContent;
	}

	@object VisContentClass VisSampContent = { 
	    VCI_comp = MySampNumber1, MySampNumber2;  
	    VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
	    VI_bounds = {0, 0, 400, 800};
	}

	@object VisClass MySampNumber1 = { 
	    VI_bounds = {20, 20, 100, 60};
	}
	
	@object VisClass MySampNumber2 = { 
	    VI_bounds = {70, 70, 150, 110};
	}
	
	Obviously VisClass objects wouldn't draw or do anything; you'd want
	to subclass them.  This and other examples of visible trees under
	a content object can be seen in Appl/SDK_C/VisSamp[1,2,3,4].
	You can use the geometry manager to manage the children, you can
	instantiate and add the children as the content is opened using 
	MSG_VIS_ADD_CHILD.
	
	You can also attach a VisContent and its children to a view after
	the view has come up, using MSG_GEN_VIEW_SET_CONTENT.

	
In Depth: Manipulating objects in the tree
------------------------------------------
	
	Use MSG_VIS_ADD_CHILD to add the new visible object into the
	tree.  You then need to send the object a MSG_VIS_MARK_INVALID,
	passing VOF_WINDOW_INVALID, to ensure that it will be sent a
	MSG_VIS_OPEN, and hence be opened, at the next update.  

	Here we add a child at the end of the tree (after the other children),
	and delay the update a little bit (something you especially want 
	to do if you add several children at the same time, so that they all
	get combined into one update):

		@call parentObj::MSG_VIS_ADD_CHILD(@childObj, CCO_LAST);
  
		@call childObj::MSG_VIS_MARK_INVALID
			(VOF_WINDOW_INVALID, VUM_DELAYED_VIA_APP_QUEUE);

	If our parent is using the geometry manager to manage the children,
	you will also want to mark the parent's geometry invalid so that the
	bounds of the parent and all the old siblings gets recalculated:
	
		@call parentObj::MSG_VIS_MARK_INVALID(
			 VOF_GEOMETRY_INVALID, VUM_DELAYED_VIA_APP_QUEUE);

			 

	MSG_VIS_REMOVE_CHILD may be used to remove a child
	from a visual branch.  If the branch is not realized when
	this is done, nothing further need be done.  If the branch IS
	realized, then a MSG_VIS_CLOSE must be sent to the branch to
	visually close it down, before removing the child.

	An example of removing a child from a visual tree that is currently
	onscreen:
	
		@call childObj::MSG_VIS_CLOSE();
		@call parentObj::MSG_VIS_REMOVE_CHILD(@childObj, 0);
		
	If the visual parent is managing its children, and is affected by
	the removal of the child, you will want to update the geometry of
	the parent and its children:
	
		@call parentObj::MSG_VIS_MARK_INVALID(
			 VOF_GEOMETRY_INVALID, VUM_DELAYED_VIA_APP_QUEUE);

			 
			 
	MSG_VIS_MOVE_CHILD will move a child to a different location
	in the tree (a remove, followed by an add).  MSG_VIS_COUNT_CHILDREN
	will tell an object how many children it has, MSG_VIS_SEND_TO_CHILDREN
	will send a message to each of the children, MSG_VIS_FIND_CHILD
	will return the position of a child, and MSG_VIS_FIND_CHILD_AT_POSITION
	will return the children at a certain position.
			 
			 
In Depth: Creating a new window (Visible only, not a UI window)
--------------------------------------------------------------

(Creating non-UI WIN_GROUPS is generally a bad idea, since it will usually
violate a specific UI's standard.  Applications usually will want to create
a GenPrimary, GenDisplay, GenInteraction or GenSummons, and put visual children
in a composite GenGadget below the window, or in a VisContent run by a GenView.)

	1) Instantiate a VisCompClass object, & or in the attribute bits
	VTF_IS_WIN_GROUP & VTF_IS_WINDOW, to indicate that it is a new window, &
	top of a visual tree.

	2) Add any visible children desired, using MSG_VIS_ADD_CHILD.
	If the children have been previously added & removed from a tree,
	you may need to call VisMarkInvalid on it, to mark it as 
	VOF_WINDOW_INVALID.  This will ensure that it will be sent a
	MSG_VIS_OPEN later.

	3) Query the system object, or otherwise determine the
	field window you wish to place the window on.  Add your window to that
	object, using MSG_VIS_ADD_CHILD.

	4) Set the top object in your WIN_GROUP visible (VA_VISIBLE), using
	MSG_VIS_SET_ATTR.  The window should appear.


In Depth: Visual state messages you can use
-------------------------------------------

MSG_VIS_SET_ATTR - Allows you to change the visible attributes
of an object, including visibility of a WIN_GROUP, whether it is
geometrically managed, DRAWABLE, & DETECTABLE.
The visual update mode to use must be passed.

MSG_VIS_MARK_INVALID - Allows setting of an object's invalid flags
so that it can be updated correctly later. The object is marked as being
invalid, & the routine ensures that a path is marked from this object
up to the window group, showing that when a MSG_VIS_VUP_UPDATE_WIN_GROUP
is done, it may trace a path back to this object & get it updated.
The visual update mode to use must be passed

MSG_VIS_VUP_UPDATE_WIN_GROUP - Travels up the Visible tree until it finds
the head object which is marked as being a WIN_GROUP.  The window is then
marked as needing update, & then, based on the update mode passed, updates
the window now, via UI queue, via application process queue, or not at all,
waiting for MANUAL update.  This MSG, may, of course, be sent directly
to a WIN_GROUP to force an update. The visual update mode to use must be passed.
Usually you'll be using MSG_VIS_MARK_INVALID (or the library routine
VisMarkInvalid) to mark part of the object invalid, which then in turn
will call MSG_VIS_VUP_UPDATE_WIN_GROUP.


In Depth: Messages sent to visible objects during visual updates
----------------------------------------------------------------

MSG_VIS_UPDATE_GEOMETRY	- Sent by VUP_UPDATE_WIN_GROUP to update invalid
geometry in a visible tree.  Follows VOF_GEOMETRY_UPDATE_PATH.
See geometry manager documentation for more info.

MSG_VIS_OPEN		- Sent by VUP_UPDATE_WIN_GROUP to visibly open any
window group whose VA_VISIBLE bit has been set but is not yet on screen,
after geometry has been done.  Is also called by
MSG_VIS_UPDATE_WINDOWS_AND_IMAGE (below) to open objects later added into
an already open tree).  Follows VOF_WINDOW_UPDATE_PATH, setting the
VA_REALIZABLE bit in each object, and calling MSG_VIS_OPEN_WIN on widowed
objects.  Recurses down the visual tree, but does NOT cross to WIN_GROUP
objects.

MSG_VIS_UPDATE_WINDOWS_AND_IMAGE	- Sent by VUP_UPDATE_WIN_GROUP for
win groups already on screen, but having areas whose window size needs to be
updated or whose image is out of date, after geometry has been done.
Follows both VOF_WINDOW_UPATE_PATH and VOF_IMAGE_UPDATE_PATH to find
objects needing to be updated.  Will call MSG_VIS_OPEN on any object it
runs into that hasn't yet been opened.  Calls MSG_VIS_DRAW, passing
DF_EXPOSED, on any object whose image is invalid.  The MSG_VIS_DRAW will
clear all invalid bits found in its path & invoke a new
MSG_VIS_UPDATE_WINDOWS_AND_IMAGES should it encounter a window'ed composite
in the path which is marked with an IMAGE_UPDATE_PATH bit (But will not
cross to WIN_GROUP's).

MSG_VIS_CLOSE	- Sent by VUP_UPDATE_WIN_GROUP to visibly close any window group
that is on screen but whose VA_VISIBLE bit has been cleared.  Is also called
by MSG_VIS_REMOVE, before a visible branch is physically removed from the 
tree that it is in, if the branch is realized (open).  Follows
VOF_WINDOW_UPDATE_PATH, clearing the VA_REALIZABLE bit in each object, and
calling MSG_VIS_CLOSE_WIN on windowed objects.  Recurses down the visual tree,
but does NOT cross to WIN_GROUP objects.  (Will nonetheless fatal error if
it finds a lower WIN_GROUP which is realized, as this is an illegal state)


In Depth: How to DRAW
---------------------

	Objects are caused to be redrawn when their window first appears
on screen because the window system sends out a MSG_META_EXPOSED to the visual
tree associated with the window.  The default handler in VisCompClass for this
MSGs generates MSG_VIS_DRAW's which travel down the tree.  This same sequence
occurs whenever the window is uncovered, or invalidated.

Any object, if it desires to, can cause itself to be redrawn completely by 
sending a MSG_VIS_REDRAW_ENTIRE_OBJECT to itself.
The default handler for this message creates a gstate, using 
MSG_VIS_VUP_CREATE_GSTATE, & sends a MSG_VIS_DRAW to itself.

An object can also redraw itself by sending a MSG_VIS_INVALIDATE to itself,
which invalidates the area of the window the object is in, and causes the
window system to generate a MSG_META_EXPOSED for the window, ultimately resulting
in a MSG_VIS_DRAW to the object.  The advantage to the first way over the
second is that the draw happens immediately (the MSG_META_EXPOSED will always 
travel through the queue first).
       

In Depth: MSG_META_EXPOSED
---------------------

	MSG_META_EXPOSED's are generated by the window system when a window
is uncovered, or invalidated.  The message is sent to the visual object
marked w/VTF_IS_WINDOW which created the graphics window.
That visual object handles the MSG_META_EXPOSED by first creating a gstate
for the window, using a MSG_VIS_VUP_CREATE_DRAW_GSTATE.  The visible window 
object takes this gstate, and with it calls GrBeginUpdate, sends itself a 
MSG_VIS_DRAW, and then does a GrEndUpdate to complete the redraw.  
VisContent objects and other windowed Vis objects handle this message
automatically, and rarely needs to be subclassed.


In Depth: MSG_VIS_DRAW
----------------------

The default MSG_VIS_DRAW message for composites sends the message on down
to any children whose bounds overlap the window's final mask area.  Any
draw message for a visible composite object should call the superclass after
drawing, to make sure that all children are sent the MSG_VIS_DRAW.

	In processing a MSG_VIS_DRAW, you should remember that the gstate passed
will be used for the drawing of later objects, & therefore you should not
destroy any of the state stored in it, with the exception of the pen position
& colors, which you MAY destroy, & as a result, you should not expect these
to be set to anything on entry to the MSG_VIS_DRAW handler.  Specific UI
Objects, or MSG_VIS_DRAW handlers for GenGadgets additionally receive
the DisplayScheme to use stored in the private data of the gstate.  PLEASE
NOTE that in drawing, you should assume the background is garbaged & must
be redrawn.  Do NOT assume that the window system has washed this out for
you. (Also note the one exception to this in the "efficient drawing section").
See the "Visual Bounds" section above for the use of visual object
coordinates.

An example of a simple draw handler for a non-composite Vis object:
   
	@method MyVisClass, MSG_VIS_DRAW {
	        GrSetLineColor (gstate, CF_INDEX, C_BLACK, 0, 0);
		GrFrameRect (gstate, pself->VI_bounds.R_left,
			   pself->VI_bounds.R_top,
			   pself->VI_bounds.R_right-1,
			   pself->VI_bounds.R_bottom-1);
	}

An object MUST NOT draw outside its own bounds.  
   
The default behavior for VisComp objects is to send a MSG_VIS_DRAW to all
its children whose bounds are in the exposed region.  If you need your object
that is subclassed off of VisCompClass to do some special drawing, you should 
let it call its superclass first to draw any children, then do the special
drawing.  It is somewhat purposeless for a VisComp to draw inside the bounds 
of one of its children, since the child will subsequently be drawn there.
    
    
In Depth: Efficient drawing/updating of object images
-----------------------------------------------------

	Many objects perform slight visual modifications of themselves.  A
button is a good example;  The depressed appearance is slightly different
than the non-depressed appearance.  Rather than just redraw the whole object
every time it gets a MSG_VIS_DRAW, Individual objects should keep
both desired state & current state flags, so that they can optimally
redraw themselves.  Here is how to handle the MSG_VIS_DRAW given these
optimization flags:

	If updating (DF_EXPOSED is set), then draw the entire
object based on the desired state.  Even thought the window system
will fill in the background color, you SHOULD NOT assume this, as this
background filling can sometimes happen under a different thread at the
same time as the object may be drawing itself, leaving a partially drawn
image instead of a bacground fill.  In general, you should ALWAYS redo the
background wash when drawing an DF_EXPOSED, unless your draw message can
tolerate the existance of a partial image of the object already on the 
screen (If you use XOR draw mode, then your message is NOT tolerant).  To
be safe, just redraw the background.

 	If you are not updating (DF_EXPOSED is not set) it is
presumably because the desired state is different than the drawn state,
and someone has send you a MSG_VIS_DRAW so that you will update the visual
image to be correct.  In this case, you may be able to take shortcuts to
get the correct image on the screen, since your "drawn" state will tell
you what it currently looks like.  For instance, in a simple button which
just inverts when pressed, you might be able to simply invert the rectangle,
instead of redrawing the whole thing.
	
	
In Depth: Mouse messages
------------------------
	
	The visible world has some default behavior for passing on various
mouse messages such as MSG_META_START_SELECT, MSG_META_END_SELECT, and MSG_META_PTR.  VisComp
objects will automatically pass the message on to the child under the point.
Non-composite objects have no special behavior.  Typically you will subclass
MSG_META_START_SELECT to grab the mouse (using MSG_VIS_GRAB_MOUSE or VisGrabMouse),
and have some or all MSG_META_PTR events arrive at your object (using MSG_VIS_SEND_
ALL_PTR_EVENTS or MSG_VIS_SEND_ENTER_LEAVE_PTR_EVENTS).  If your object has
grabbed the mouse, it will receive a MSG_META_END_SELECT, at which time you'll
probably know whether the mouse is over the button and will perform some
action if so.  There are messages for grabbing the focus and target (MSG_VIS_-
MAKE_FOCUS and MSG_VIS_MAKE_TARGET) and for taking the gadget exclusive
(MSG_VIS_TAKE_GADGET_EXCL).  And of course, messages for releasing each of them.
See Doug's fine future documentation on the flow object, for more
information on writing mouse and keyboard handlers.  

	    
In Depth:  Vis Monikers
-----------------------
	
	Visual moniker support is built into Vis class to make it easier to
display text or graphics strings in an object.   A vis moniker resides by
itself in a chunk (usually the same chunk as the object), and can take on
one of several forms (as described in C):
    
    	1.  A VisMonikerText structure, followed by a zero terminated ascii
	    string to display;
	    
	2.  A VisMonikerGString structure, followed by a graphics string.
	
	
To display a moniker, you call MSG_VIS_DRAW_MONIKER (or VisDrawMoniker for
assembly), passing flags for justifying the moniker within the object, margins
around the moniker, whether to clip its width, and so on.  There are also 
messages for getting the moniker's size (MSG_VIS_GET_MONIKER_SIZE), or the 
moniker's position if it were drawn (MSG_VIS_GET_MONIKER_POS).  To use
a moniker you'll want to create a chunk to keep it in, and save the chunk 
handle in your instance data for use when drawing.  An example of a moniker
saved in a Vis object, and drawn centered in the object:
       
	@class	VisSampTextClass, VisClass
		@instance @visMoniker VSTI_moniker;
	@endc

	@object VisSampTextClass MySampText = { 
	    VSTI_moniker = "One winning season in 10 years."; 
	}
       
	@method VisSampNumberClass, MSG_VIS_DRAW 
	{
		MonikerMessageParams mkrParams;
	
	        GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(12.0));
		GrSetTextColor (gstate, CF_INDEX, C_BLACK, 0, 0);

		mkrParams.MMP_visMoniker = pself->VSTI_moniker;
		mkrParams.MMP_textHeight = 12;
		mkrParams.MMP_monikerFlags = (J_CENTER << DMF_Y_JUST_OFFSET) |
				     	     (J_CENTER << DMF_X_JUST_OFFSET);
		mkrParams.MMP_gState = gstate;
		@call self::MSG_VIS_DRAW_MONIKER(&mkrParams);
	}
       
You can also keep a list of monikers, and display one depending on the color
selection and pixel size of your monitor.  A moniker list is a chunk that
holds one or more VisMonikerListEntries, each of which consist of the type of
VisMoniker it is (whether normal, squished, color requirements, size, etc)
and a chunk handle of the actual moniker.  MSG_VIS_FIND_MONIKER will look
through this list and return the chunkHandle of the VisMoniker you should
use.
	

See Also
--------
	geometry manager documentation
	flow object documentation (userFlow.asm?)

;------------------------------------------------------------------------------
;	Assembling & Debugging
;------------------------------------------------------------------------------

Sample Code/Programming Tips
----------------------------
	
Sample applications that might be useful in doing things with the
visible world:
	
Appl/SDK_C/VisSamp:
 	A general sample of vis objects running in a VisContent under a GenView.
        It includes examples of:  geometry management in a visible tree,
        a simple MSG_VIS_DRAW handler, basic mouse handling in a visible
        object, setting an object visible/not visible, adding/removal of
        objects, usage of VisMonikers, a simple MSG_VIS_RECALC_SIZE handler, 
        custom positioning of objects, and marking an object invalid.

Appl/SDK_C/VisSamp2:
        This sample app has a VisContent running in the application thread
	attached to a GenView, and shows how the size of the VisContent object 
	and the bounds of its visible children can be set in the object 
	definitions without any geometry management or messages being sent to 
	the objects whatsoever.

Appl/SDK_C/VisSamp3:
        This sample app demonstrates how to run a few objects under the
        content using the geometry manager.  The view sizes itself, the
        content will use the view's size if possible, and full justifies
        its three vis children horizontally, while centering horizontally.
	
Appl/SDK_C/VisSamp4:
        This sample app gives an example of an entire vis tree being created 
        and added to a GenView on the fly.  It also shows objects being
        wrapped horizontally in a content.
	
Appl/SDK_C/VisWinSamp:
	This (currently non-working) sample shows a visible object creating
	a temporary windowed object that pops up when you click on a button.

	
Include Files Needed
--------------------
	None

Assembly Tips
-------------
	Don't write data into random memory.

Debugging Tools & Tips
----------------------
Here are some common swat commands useful for visible objects:
	
vistree --
	Prints a visible tree of objects, along with their bounds, under an
	object.  It will print an instance variable for each object rather
	than the bounds, if desired.  
	
pvis --
     	Prints out a single variable in an object's Vis part.  
	
psize -- 
      	Prints out the size of an object.
	
pvismon -- 
	Prints out a visual moniker, given the address of the moniker (for
	visual objects that have monikers).
	
pvsize -- 
        Prints out the size of an object.

;------------------------------------------------------------------------------
;	Implementation Notes
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Most frequently asked questions
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
;	Inheritance
;------------------------------------------------------------------------------

MetaClass
---------
	
	@instance MetaBase	MI_base;
    
    
MSG_META_NULL			- per MetaClass
MSG_META_DUMMY			- per MetaClass
MSG_META_INITIALIZE		- Sets up various default instance vars.
				  Will often be subclassed.
MSG_META_ATTACH			- per MetaClass
MSG_META_DETACH			- per MetaClass
MSG_META_DETACH_COMPLETE	- per MetaClass
MSG_META_FORCED_DETACH		- per MetaClass
MSG_META_DETACH_ABORT		- per MetaClass
MSG_META_ACK			- per MetaClass
MSG_META_GET_CLASS		- per MetaClass
MSG_META_IS_OBJECT_IN_CLASS	- per MetaClass
MSG_META_BLOCK_FREE		- does some EC checking
MSG_META_OBJ_FREE		- per MetaClass
MSG_META_FINAL_OBJ_FREE		- per MetaClass
MSG_META_SET_FLAGS		- per MetaClass
MSG_META_GET_FLAGS		- per MetaClass
MSG_META_VM_FILE_DIRTY		- per MetaClass
MSG_META_QUIT			- per MetaClass
MSG_META_QUIT_ACK		- per MetaClass
MSG_META_DISPATCH_EVENT		- per MetaClass
MSG_META_SEND_CLASSED_EVENT	- Converts TO_VIS_PARENT request to a
				  MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS, which
				  is sent to the visible parent (if no visible
				  parent, ClassedEvent is destroyed.)  Converts
				  all "TO_APP_* requests to plain "TO_*" 
				  requests & redirects to GenApplication object.
				  Converts all "TO_SYS_*" requests to plain
				  "TO_*" requests & redirects to GenSystem
				  object.  All other requests sent on to
				  MetaClass.
MSG_META_GET_OPTR		- per MetaClass
MSG_GET_TARGET_AT_TARGET_LEVEL	- per MetaClass
MSG_ADD_VAR_DATA_TYPE		- per MetaClass
MSG_ADD_VAR_DATA_ENTRY		- per MetaClass
MSG_META_DELETE_VAR_DATA	- per MetaClass

				
Imported Messages Handled
-------------------------
MSG_META_RAW_UNIV_ENTER		- sends a MSG_GEN_SYSTEM_WIN_ON_FIELD_RAW_-
MSG_META_RAW_UNIV_LEAVE		- sends a MSG_GEN_SYSTEM_WIN_ON_FIELD_RAW_-
 				  LEAVE_NOTIFICATION to the system object
MSG_META_UNIV_ENTER		- sends a MSG_GEN_SYSTEM_WIN_ON_FIELD_RAW_-
				  ENTER_NOTIFICATION to the system object
MSG_META_UNIV_LEAVE		- sends a MSG_GEN_SYSTEM_WIN_ON_FIELD_RAW_-
				  LEAVE_NOTIFICATION to the system object
MSG_META_GRAB_FOCUS_EXCL
MSG_META_RELEASE_FOCUS_EXCL
MSG_META_GRAB_TARGET_EXCL
MSG_META_RELEASE_TARGET_EXCL
MSG_META_GRAB_MODEL_EXCL
MSG_META_RELEASE_MODEL_EXCL
MSG_META_RELEASE_FTVMC_EXCL	- calls MSG_META_MUP_ALTER_FTVMC_EXCL on self
				  with apropriate flags set for each of these
				  messages
MSG_META_MUP_ALTER_FTVMC_EXCL	- clears MAEF_NOT_HERE flag, then sends on
				  to visible parent.

MSG_META_END_MOVE_COPY		- clears the current quick-transfer item

MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING -
				- releases gadget exclusive for itself.
------------------------------------------------------------------------------`
