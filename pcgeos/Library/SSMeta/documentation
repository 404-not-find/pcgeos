
COMMENT @-----------------------------------------------------------------------

	Copyright (c) Geoworks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		documentation

AUTHOR:		Cheng, 8/92

ROUTINES:
	Name			Description
	----			-----------
	
REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Cheng	8/92		Initial revision

DESCRIPTION:
		
	$Id: documentation,v 1.7.29.1 97/03/29 05:13:13 canavese Exp $

-------------------------------------------------------------------------------@

;*******************************************************************************
;
;	SPREADSHEET META FORMAT
;
;*******************************************************************************

The Spreadsheet Meta Format is as follows:

	An SSMETA HEADER BLOCK will be used to track several SSMETA DATA ARRAYS.

	If the clipboard is used, the transfer item header will have a handle
	to the SSMETA HEADER BLOCK.

	The ssmeta header block is a VM blk containing the size of the scrap
	(number of rows and columns) and six SSMETA DATA ARRAY RECORDS.
	
	Each ssmeta data array record describes a DATA ARRAY.

	One data array is used to store the cell data, one for the styles, one
	for the formats, and another for the names. The fifth data array is for
	use by the database and the sixth is for GeoDex. Any data array can be
	empty.

	A data array is an array of SSMETA ENTRIES.

	Each ssmeta entry will have an ENTRY HEADER which is followed by the
	ENTRY DATA. The entry header will contain a field for a token, and
	fields for the coordinate (row, column) that the cell data processing
	code needs. Entry tokens and coordinates are optional. You may use them
	if you intend to use them to search for entries.
	Note however that the spreadsheet's data array entries have defined
	formats that you should not violate. For example, the Name data array
	is referenced by tokens and the Cell data array by coordinates.

The ssmeta library allows you to work on the data arrays. Access usually
requires that you provide a flag specifying the data array that you want to
work on. This flag will be referred to as the DATA ARRAY SPECIFIER.

Overview:
	The routines take information that is stored in the
	SSMetaStruc structure. This structure is initialized
	by calling one of two sets of routines, depending on whether you plan
	to use the system's clipboard.

	There is some support for interfacing with the system's clipboard.
	Please see SSMetaInitForCutCopy and SSMetaDoneWithCutCopy.

	If you DO NOT use the clipboard, call SSMetaInitForStorage or
	SSMetaInitForRetrieval.

	If you DO use the clipboard, look at SSMetaInitForCutCopy and
	SSMetaDoneWithCutCopy.

Routines (for specifics as to what these are passed and what they return, please
look at the routine headers):

;*******************************************************************************
;
;	INITIALIZATION AND EXIT ROUTINES
;
;*******************************************************************************

	SSMetaInitForStorage
		If you DO NOT plan to use the clipboard, call this to
		initialize the SSMetaStruc (in preparation for
		calls to SSMetaDataAddEntry and other storage routines).

		If you do plan to use the clipboard, call SSMetaInitForCutCopy
		instead. It lessens your work by dealing with the clipboard.

	SSMetaInitForRetrieval
		If you DO NOT plan to use the clipboard, call this to
		initialize the SSMetaStruc (in preparation for
		calls to SSMetaDataGetFirstEntry and other retrieval routines).

		If you do plan to use the clipboard, call SSMetaInitForPaste
		instead. It lessens your work by dealing with the clipboard.

	SSMetaInitForCutCopy
		If you plan to use the clipboard, call this to initialize the
		SSMetaStruc (in preparation for calls to
		SSMetaDataAddEntry). When done, you will need to call
		SSMetaDoneWithCutCopy.

		If you do not plan to use the clipboard, use SSMetaInitForSSMeta
		instead.

	SSMetaDoneWithCutCopy
		Clean up after a copy operation.
		Allocate and initialize the TransferItemHeader and make the call
		to UserRegisterTransfer.
	
	SSMetaInitForPaste
		Retrieve the spreadsheet clipboard item and initialize the
		SSMetaStruc.
	
	SSMetaDoneWithPaste
		Call this routine when done using the clipboard item.
	
	SSMetaDataArrayUnlock
		Unlocks a data array given its data array specifier.

;*******************************************************************************
;
;	STORAGE ROUTINES
;
;*******************************************************************************

	SSMetaSetScrapSize
		Set the dimensions of the scrap (num rows, num columns).

	SSMetaDataArrayLocateOrAddEntry
		Check to see if an entry exists for the token in the data
		array. If it does not, an entry will be added.
		(This routine only applies to data arrays that are maintained in
		token order).

	SSMetaDataArrayAddEntry
		Given a data array specifier and an entry, add the entry to
		the data array.
		NOTE: The entries will be inserted in ROW ORDER.
	
;*******************************************************************************
;
;	RETRIEVAL ROUTINES
;
;*******************************************************************************

	SSMetaGetScrapSize
		Return the dimensions of the scrap (num rows, num columns).

	SSMetaDataArrayGetNumEntries
		Given a data array specifier, get the number of entries in the
		data array.
	
	SSMetaDataArrayGetFirstEntry
		Given a data array specifier, get the first entry. Entries
		will always be returned as a pointer into a locked block. The
		library user is responsible for calling SSMetaDataArrayUnlock
		when processing is complete.

	SSMetaDataArrayGetNextEntry
		Given a data array specifier, get the next entry.

	SSMetaDataArrayGetEntryByToken
		Given a data array specifier and an entry token, locate the
		entry.

	SSMetaDataArrayGetEntryByCoord
		Given a data array specifier and a coordinate, locate the
		entry.

	SSMetaDataArrayGetNthEntry
		Given a data array specifier and N, locate the Nth entry.

;*******************************************************************************
;
;	REGISTER USAGE
;
;*******************************************************************************

Externally. What you pass to the global routines when applicable:
	ax - token
	cx:dx - row, column
	dx:bp - SSMetaStruc

Internally:
	ds:si - SSMetaDataArrayRecord
	es:bp - SSMetaStruc
