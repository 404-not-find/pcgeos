@@@	$Id: README,v 1.5.25.1 97/03/29 04:04:14 canavese Exp $

******************************************************************************
				 INTRODUCTION
******************************************************************************

This file describes the operation of the Generic Screen Saver process-library,
also known as "GW After Hours".

The purpose of this process-library is to make the writing of cool little
screen savers as easy as possible, handling all interfacing with the Flow
object, putting up a window on which to draw, and other functions common to
screen savers.

******************************************************************************
		       WHAT A SCREEN SAVER MUST PROVIDE
******************************************************************************

A screen saver is a library whose token is SSAV. It is stored in the
SYSTEM\SAVERS directory and provides 6 predefined entry points, whose order is
defined by the SaverFunctions enumerated type defined in saver.def:

SF_START                enum    SaverFunctions
;       Begin saving the screen.  Screen savers must draw *everything*
;	they want for the initial screen at this point.  If you wish to
;	implement a saver that modifies the screen, your start routine
;	needs do nothing extra to the screen.  If not, you must blank
;	the screen.  SaverInitBlank() is provided to simplify this.
;
;       Pass:   cx      = window handle on which to draw
;		dx	= width of the window
;		si	= height of the window
;               di      = gstate handle to use in the drawing
;		bp.low	= DisplayType
;       Return: nothing

SF_STOP                 enum    SaverFunctions
;       Stop saving the screen. When this function returns, the window
;       used for the screen saver will be made unavailable.
;
;       Pass:   nothing
;       Return: nothing

SF_FETCH_UI           	enum    SaverFunctions
;       Fetch any UI gadgets for the setting of specific screen-saver
;       parameters into the GenInteraction passed. 
;
;       Pass:   nothing
;       Return: ^lcx:dx	= root of tree holding the UI for the library. All the
;			  gadgetry should be in this block.  cx == 0 if no
;			  gadgetry installed.
;			  The root should be marked not usable.
;			  The returned block must be a duplicated block
;			  with 'saver' as the owner.
;		ax	= first entry point number used in output descriptors
;			  in tree. 0 if no entry points used.
;		bx	= last entry point number used.

SF_FETCH_HELP		enum SaverFunctions
;	Fetch any saver specific help for the saver.
;	Pass:	nothing
;	Return:	^lcx:dx = root of tree holding help for the saver.  All the
;			  help should be in this block.  cx == 0 if no help.
;			  The root should be marked not usable.
;			  The returned block must be a duplicated block
;			  with 'saver' as the owner.

SF_SAVE_STATE		enum	SaverFunctions
;	Return any extra state the library wants to save across shutdowns.
;
;	Pass:	cx	= handle of block to which to append the state
;			  information
;		dx	= offset at which to store the information.
;	Return:	nothing
;

SF_RESTORE_STATE	enum	SaverFunctions
;	Restore any extra state the library saved before shutdown.
;
;	Pass:	cx	= handle of block with extra saved state
;		dx	= offset from which to restore the information
;	Return:	nothing
;

SF_SAVE_OPTIONS		enum	SaverFunctions
;	If the specific saver has any options besides those dictated by
;	its UI tree, or if the saver has chosen not to use the classes
;	provided by the generic saver library, those options should be
;	saved during this call.
;
;	Pass:	nothing
;	Return:	nothing

These routines are not allowed to destroy any registers other than AX and BX,
which are used to call them (via ProcCallLibraryRoutine).

A screen saver *may not* use any gstate other than that provided to it in the
SF_START call, nor may it change the default transformation or the application
clipping region. This is to allow future versions of the generic library to
have multiple specific savers operating at once, if so desired.

A typical screen saver will wish to provide user-settable options to control
its actions. This is accomplished with the SF_FETCH_UI function. The tree
returned should meet the following criteria:

	* It must reside entirely within a single, duplicated block run by the
	  UI thread.
	* It should contain a single SaverInteractionClass object that holds
	  the ini file category in which the user-settable options are stored.
	* The root of the tree must be a SaverInteraction object.
	* Where you would normally use a GenRange object, use a OptRange
	  object instead, setting the key under which the range's value is
	  to be stored (and from which it is to be fetched when the option
	  tree is brought up on screen).
	* Where you would normally use a GenList object, use an OptList
	  object instead. The list must use the listMethod and 
	  listMethodIsData attributes (these are the defaults set in
	  saver.uih), and should store a unique value in the method field
	  of each GenListEntry object within the list.
	  
	  If the list is exclusive, the "method" for the current exclusive
	  will be stored in the .ini file when the list's option value is
	  saved and will be sought to set the current exclusive when the
	  option is restored.
	  
	  If the list is non-exclusive, the "method" values for the entries
	  should consist of bitmasks. When the option is saved, the method
	  values for all set entries will be bitwise-or'ed to form the value
	  stored in the .ini file. When the option is restored, each method
	  value is and'ed with the value stored in the .ini file, and all
	  entries for which the resulting value is non-zero will be turned on.

	  Again you must provide the key under which this value is to be stored.
	* If you want to use a GenTextEdit object to hold an editable
	  string option, use a OptTextEdit object instead.
	* Where you would normally send a method to your process (from an
	  action descriptor in one of your objects), use something like the
	  following macro:

		#define CALL_QIX(routine) METHOD_SAVER_CALL_SPECIFIC, \
					  "enum " #routine

	  This will cause the entry-point number of the given routine to be
	  placed in the optr field of the action descriptor. This optr will
	  eventually be fixed-up by the generic library so the routine you
	  give will be called when the action descriptor is activated, passing
	  all the usual data that come with that action. The example is
	  taken from the Qix screen saver, which is a very good place to look
	  if you get confused.

******************************************************************************
				 WHAT YOU GET
******************************************************************************

"GW After Hours" provides a few routines, classes and methods for use by a
screen saver:

global  SaverStartTimer:far
;
;       Sets up a timer to call a routine in the specific screen-saver
;       library on the screen saver's own thread.
;
;       Pass:   al      = TIMER_EVENT_CONTINUAL or TIMER_EVENT_ONE_SHOT
;               cx      = count until first timeout
;               di      = interval, for continual timer
;               dx      = library entry point in specific screen-saver
;                         library to call when event comes in.
;       Return: ax      = timer ID
;               bx      = timer handle
;

You are responsible for shutting off any timer you start, as well as dealing
with receiving queued timer events after your SF_STOP entry point has been
called.  Qix and other savers deal with this by storing the GState handle
they receive on start, zeroing it on stop, and checking for a non-zero
GState handle before doing anything in their timed routine.

global	SaverRandom:far
;
;	Return a random number in the passed range.
;
;	Pass:	dl	= max for returned number
;	Return:	dx	= random number between 0 and DL-1
;	

This is a very simple random-number generator for use in all kinds of
situations. Note that the number returned does *not* include that passed in DL.

global	SaverFindOptions:far
;
;	Locate the root of the specific options tree.
;
;	Pass:	nothing
;	Return:	carry clear if found:
;			^lcx:dx	= optr of tree root
;		carry set if not found
;

A specific saver can call this from SF_RESTORE_STATE to locate the options
tree that it returned in its previous incarnation. This is useful if the saver
needs the handle of the duplicated option block for whatever reason.

global	SaverSetSpecProcClass:far
;
;	Set a class as an auxiliary process class. Any method not already
;	fielded by the generic saver's own process class will be sent to the
;	auxiliary class. The class should have SaverClass as its superclass.
;
;	Pass:	cx:dx	= far pointer of auxiliary class.
;	Return:	nothing.
;

This allows the specific saver to receive methods from other parts of the
system without having to instantiate some object or other each time it is
loaded. In fact, one can use this instead of special constants and
METHOD_SAVER_CALL_SPECIFIC in one's options UI tree if one so desires. The
class so passed is placed between the generic saver's own private process
class and the published global SaverClass. All the SaverClass methods that the
generic saver fields are actually bound at the SaverClass level, not the
private saver class's level, allowing the specific saver to receive these
methods before the generic saver does. This can be useful if one wishes to
call SaverSetWinType just before the window is opened, for example.

;==============================================================================
;
; SaverVector abstraction
;
;==============================================================================

A number of specific savers have needed to bounce things around the screen in
a nice fashion, with different things when the point(s) being bounced
encounter the edge of the drawing area. These actions are encapsulated in the
SaverVector data type provided by the generic saver library. The vector is
one-dimensional, meaning it has only half a coordinate, not the normal ordered
pair, that it maintains. Two vectors will normally make up a point being moved
around the screen.

SaverVectorReflectTypes etype word
    SVRT_BOUNCE		enum	SaverVectorReflectTypes	; Elastic bounce (delta
							;  becomes -delta)
    SVRT_RANDOM		enum	SaverVectorReflectTypes	; Reflect in a random
							; direction opposite the
							; current one.

This enumerated type tells the generic library what action is to be taken when
the point crosses over one of the endpoints of its axis. It can reflect
elasticly simply by negating the initial delta chosen for it, or it can
reflect at a random velocity.

SaverVector	struc
    ; Data for current location
    SV_point	word			; Current point
    SV_min	word			; Minimum value for SV_point
    SV_max	word			; Maximum value for SV_point
    SV_reflect	SaverVectorReflectTypes	; Type of reflection to happen when
					;  SV_point reaches a boundary
    ; Data for delta value
    SV_delta	sword			; Current delta
    SV_deltaBase byte			; Base value for delta.
    SV_deltaMax	byte			; Maximum value for delta (above base)
SaverVector	ends

This is the data structure to be stored in the specific saver's own data
structure for each half of the ordered pair that makes up a single point.


global	SaverVectorInit:far
;
;	Initialize a SaverVector structure
;
;	Pass:	es:di	= SaverVector to initialize
;		ax	= SaverVectorReflectType
;		cx	= minimum value
;		dx	= maximum value
;		bl	= delta max
;		bh	= delta base
;	Return:	nothing
;

global	SaverVectorUpdate:far
;
;	Update a SaverVector according to its delta, etc.
;
;	Pass:	ds:si	= SaverVector to advance one step.
;	Return:	ax	= the new coordinate.
;

;==============================================================================
;
; Document Control
;
;==============================================================================

If a specific saver has documents it wishes to manipulate, it can do so using
the SaverUIDocumentControl and SaverAppDocumentControl classes. As the names
imply, the former is run by the UI thread and the latter by Saver's own
thread, so the two objects must reside in separate blocks that the specific
saver duplicates. The ugly work of supporting document control objects that
can come and go is taken care of by the generic saver library, but a number of
non-obvious actions must be performed by the specific saver. To wit:

	* In the SF_FETCH_UI procedure:
	    * You must call ProcInfo with the handle of the generic library to
	      obtain the handle of the saver's process thread.
	    * Duplicate the application-run block as you duplicate the UI-run
	      block. Note that the application-run block should be marked as
	      ui-object in the .gp file to avoid confusing GeodeLoad. You will
	      need to save this block handle for later.
	    * Call MemModify on the resulting block, passing the saver's
	      process thread in SI and MODIFY_OTHER in AH (NOTE: this is
	      different for 2.0)
	    * Invoke METHOD_APP_DOC_CONTROL_SET_OUTPUT on the app DC to point
	      its output to the saver process.
	    * Duplicate the UI-run block so you can get the OD of the ui DC.
	    * Queue a METHOD_SADC_SET_UI_DC method for the app DC passing it
	      the OD of the ui DC in ^lcx:dx. Note that this *must* be queued
	      so the attaching of the ui DC, and subsequent opening of the
	      default document, etc., will happen after the saver's UI is
	      visibly built.
	    * Invoke METHOD_UI_DOC_CONTROL_SET_PATH on the ui DC if the path
	      wasn't set in the .ui file.
	* In the SF_SAVE_STATE procedure, flag that the application-run block
	  must remain in existence. Message does this by setting the variable
	  holding the block handle to 0.
	* In the library entry routine, when di==LCT_DETACH, if the
	  SF_SAVE_STATE entry wasn't called, invoke METHOD_FREE_DUPLICATE on
	  the app DC in the application-run block.
	* When restoring from state, you will need to call
	  METHOD_SUIDC_GET_APP_DC on the ui DC to locate the application-run
	  block.

You will probably need to use the next mechanism, the specific saver process
class, to properly interact with the document control, as far as updating the
document at the right time, etc., so read on, MacDuff...

For a real-life example of how this is used, consult Saver/Message/message.asm.

;==============================================================================
;
; Specific Saver Process Class
;
;==============================================================================

The generic library allows a specific saver to have a process class via which
it can receive messages from other parts of the system (such as clipboard-
change notification) without a lot of messing around with application-run
object blocks and the like (though this is sometimes necessary, as for using a
document control object).

To do this, declare your specific process class as a subclass of SaverClass,
like so:

    MessageClass    class   SaverClass
    ;
    ; The state we save to our parent's state file on shutdown.
    ;
	MCI_fontID	FontIDs FONT_URW_ROMAN	; Font to use
	MCI_size	word	24*8		; Pointsize of same
	MCI_angle	sword	0		; Angle at which to draw it.
						; -1 => random
	MCI_color	Colors	-1		; Color in which to draw it.
						; -1 => random
	MCI_motion	MessageMotionType MMT_BOUNCE
	MCI_speed	word	MESSAGE_MEDIUM_SPEED
	MCI_format	MessageFormatType MFT_TEXT
    MessageClass    endc

Then call the function SaverSetSpecProcClass, passing the segment and offset
of the class in cx:dx. That's all there is to it. You can then subclass any
method available to SaverClass in your specific saver, including
METHOD_SAVER_START and METHOD_SAVER_STOP. Message uses it to implement such
document-control methods as METHOD_DC_FILE_OPEN, METHOD_DC_FILE_ATTACH_FAILED
and others.

;==============================================================================
;
; Saver fades and other fun stuff
;
;==============================================================================

SaverInitBlank() is provided to simplify things slightly for savers that
wish to simply blank the screen to start with.  The parameters match
those of SF_START, so this routine can be called at the startof that.

global	SaverInitBlank:far
;
;	Clear the window for initial blank.  Designed to be called
;	from SF_START for savers that want to start with a blank screen.
;
;	Pass:	di - GState handle
;		si - window width
;		dx - window height
;	Return:	none
;

There are some utility routines provided for certain special effects.
There a variety of fades and wipes (the Fades & Wipes saver uses
these), as well as a routine to draw a background bitmap (Slide Show
uses this).

;
; The different speeds supported for fades
;
SaverFadeSpeeds		etype	word
SAVER_FADE_SLOW_SPEED		enum SaverFadeSpeeds
SAVER_FADE_MEDIUM_SPEED		enum SaverFadeSpeeds
SAVER_FADE_FAST_SPEED		enum SaverFadeSpeeds

SaverWipeTypes	record
    :12
    SWT_LEFT:1			;TRUE: wipe from left
    SWT_TOP:1			;TRUE: wipe from top
    SWT_RIGHT:1			;TRUE: wipe from right
    SWT_BOTTOM:1		;TRUE: wipe from bottom
SaverWipeTypes	end

global	SaverFadePatternFade:far
;
;	Fade a rectangle to a color, 0% -> 100% patterns
;
;	Pass:	(ax,bx,cx,dx) - rectangle to fade
;		di - handle of GState
;		si - SaverFadeSpeeds (very slow, slow, medium, fast)
;	Return:	none
;

global	SaverFadeWipe:far
;
;	Fade a rectangle to a color by wiping from one or more directions
;
;	Pass:	(ax,bx,cx,dx) - rectangle to fade
;		di - handle of GState
;		si - SaverFadeSpeeds (very slow, slow, medium, fast)
;		bp - SaverWipeTypes for sides to use
;	Return:	none
;

SaverBitmapMode		etype word
SAVER_BITMAP_CENTER		enum SaverBitmapMode
SAVER_BITMAP_TILE		enum SaverBitmapMode
SAVER_BITMAP_UPPER_LEFT		enum SaverBitmapMode
SAVER_BITMAP_APPROPRIATE	enum SaverBitmapMode

global	SaverDrawBGBitmap:far
;
;	Draw a background bitmap to the window
;
;	Pass:	di - handle of GState
;		(cx,dx) - width, height of window
;		ax - SaverBitmapMode
;		ds:si - ptr to NULL-terminated filename
;	Return:	carry - set if error
;

******************************************************************************
				 RANDOM NOTES
******************************************************************************

It is a good idea to save some sort of magic/protocol number before the state
block you write out in SF_SAVE_STATE that you can check in SF_RESTORE_STATE,
especially during development. Since you cannot use the normal geode protocol
method of detecting old state files, this is the only way to safely change the
format/size of the state block without wreaking havoc on unsuspecting people
who are using your screen saver.

Remember that a screen saver is intended to save the screen from wear, not
just to be cool. This means the majority of the screen should be dark or
should rapidly become so.
