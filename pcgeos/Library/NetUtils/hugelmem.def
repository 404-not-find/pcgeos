COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Socket library	
MODULE:		buffer manager
FILE:		hugeLMem.def( internal use only )

AUTHOR:		Steve Jang, Mar 10, 1994

MACROS:
	Name			Description
	----			-----------
	MultByBlockEntrySize	Multiply a register by block entry size(6)

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	3/10/94   	Initial revision


DESCRIPTION:
	HugeLMem is a utility for Net library to use in order to allocate many
	variable sized buffers without wasting too many memory handles.
		
	$Id: hugelmem.def,v 1.1 97/04/05 01:25:20 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

; =============================================================================
;                               STRUCTURES
; =============================================================================

;
; Status flag
;
HugeLMemStatus	record
 HLMS_DESTROYED:1		; hugelmem was destroyed
 :15
HugeLMemStatus	end

;
; Block table entry
;
HugeLMemBlockEntry		struc
	HLMBE_block		hptr.HugeLMemDataBlockHeader
						; handle of the block
	HLMBE_numChunks		word		; number of buffers allocated
						;  in it
	HLMBE_blockSize		word		; size of the block
						; (we cannot use MemGetInfo
						;  since it doesn't tell us
						;  how much of the block is
						;  actually used. A large
						;  portion of LMemBlock can
						;  be free)
HugeLMemBlockEntry		ends

;
; callback entry
;
FreeSpaceCallbackStruct	struct
 FSCS_callback	vfptr
 FSCS_arg1	word		; arg passed by client
FreeSpaceCallbackStruct	ends

;
; Map block structure
;
HugeLMemMap			struc

	HLMM_handle		hptr		; handle of this block itself
	HLMM_chunkCount		word		; number of chunks allocated
	HLMM_status		HugeLMemStatus	; status flag
	HLMM_maxNumBlock	word		; Max. # of blocks it can use;
						; this is also block table size
	HLMM_minOptimalSize	word		; 
	HLMM_maxOptimalSize	word		; (optimal block size range)
	HLMM_numAllocatedBlock	word		; number of allocated LMem
						; heaps
	HLMM_numEmptyBlock	word		; number of allocated but
						; empty LMem heaps
						;
	HLMM_blockSem		hptr		; used for blocking when no
						; more memory is available.
	HLMM_waiters		word		; number of threads waiting for
						;  more memory
	HLMM_dynamicStorage	hptr		; dynamic storage for hugelmem
	HLMM_callbackArray	nptr		; callback chunk array

EC <	HLMM_locks		hptr.HugeLMemLockRecordHeader		>
	HLMM_blockTable		label	HugeLMemBlockEntry
						; this table keeps track of
						; information about mem blocks
HugeLMemMap			ends

HugeLMemLockRecord	struct
    HLMLR_block		hptr.HugeLMemDataBlockHeader
    HLMLR_thread	hptr
HugeLMemLockRecord	ends

HugeLMemLockRecordHeader	struct
    HLMLRH_free			nptr.HugeLMemLockRecord
    HLMLRH_max			word
    HLMLRH_locks		label	HugeLMemLockRecord
HugeLMemLockRecordHeader	ends
;
; Data block structure
;
HugeLMemDataBlockHeader		struc
	HLMDBH_lmemHeader	LMemBlockHeader	; just for the size
	HLMDBH_hugelmem		hptr.HugeLMemMap; which hugelmem this data
						; belongs to
EC <	HLMDBH_overhead		word					>
EC <	HLMDBH_locks		hptr.HugeLMemLockRecordHeader		>
HugeLMemDataBlockHeader		ends

;
; Destroy flag
;
HugeLMemDestroyFlag		record
	HLMDF_CHECK_CHUNK_COUNT:1
	:7
HugeLMemDestroyFlag		end



COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MultByBlockEntrySize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	FUNCTION:
		Multiplies a register by the size of block table entry(4).

	ARGUMENTS:
		reg	= contains the number of elements in the table
			  after this macro, it contains size of block table
			  in bytes.
		trash	= must be a register
	DESTROYS:
		nothing

	EXPANDS TO:
		4 cycles

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
MultByBlockEntrySize macro reg, trash
.assert ( size HugeLMemBlockEntry eq 6 ), <Rewrite this macro!>
		mov	trash, reg
		sal	reg, 1
		sal	reg, 1
		sal	trash, 1
		add	reg, trash
		endm




COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		LMemChunkOverhead
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	find overhead for each lmem chunk given chunk size

PASS:		reg	= first contains chunk size, and overhead size
			  is returned in the same register

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	SJ	1/ 9/96   	Initial version

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
LMemChunkOverhead	macro	reg
		local	addsize
		tst	reg
		jz	addsize			; size 0 is a special case
		add	reg, size word		; chunk size is added
		and	reg, 0011b
		jz	addsize
		sub	reg, size dword		; chunks are aligned by dword
		neg	reg			; get alignment overhead
addsize:
		add	reg, size word		; chunk size overhead
endm

