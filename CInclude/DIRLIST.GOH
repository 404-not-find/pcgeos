/*
	Header-File fÅr Index-Array-Routinen und Strukturen
*/

@deflib dirlist

/* bugfixes */

#ifndef FEP_BUFSIZE_UNLIMITED
#define FEP_BUFSIZE_UNLIMITED	FE_BUFSIZE_UNLIMITED
#endif


/*---------------------------------------------------------------------------
 Klassendefinition DClickGenDynamicListClass
		Aussenden einer Msg bei Double-Click auf ein Item
 ---------------------------------------------------------------------------*/
/* doubleKlickMultipleSelectionReaction (DCDLI_dcmsr): wie reagieren, wenn bei
	dounbleClick mehr als ein Item selektiert ist */
#define DCMSR_NONE	0
#define DCMSR_SEND_MSG	1
#define DCMSR_BEEP	2
/* Kombination DCMSR_BEEP | DCMSR_SEND_MSG ist zulÑssig */

@class DClickGenDynamicListClass, GenDynamicListClass;
	@instance Message DCDLI_doublePressMsg=0;
	@instance Message DCDLI_rightDoublePressMsg=0;
	@instance optr DCDLI_destination;
	@instance int DCDLI_dcmsr = DCMSR_NONE;
	@message void MSG_DCDL_SET_DCLICK_DESTINATION(optr dest);
@endc


@prototype void DCDL_CUSTOM_DOUBLE_PRESS_MSG( optr list, int selection, int selCount);
/* selCount enthÑlt die Anzahl der Selectionen der Liste
	Ist selCount != 0, enthÑlt selection EINE DER Selektionen,
	sonst DIE Selektion (Nummer des selektierten Eintrages) */
/* DCDLI_doublePressMsg wird gesendet bei DoubleClick auf linke Maustaste
   DCDLI_rightDoublePressMsg bei DoubleClick auf rechte Maustaste */


/*---------------------------------------------------------------------------
 Klassendefinitionen BargrafClass, BargrafViewClass, BargrafContentClass
	Vis-Objekt um eine Fortschrittsbalken darzustellen
	Zur Vereinfachung werden auch noch ein Content und ein View definiert,
	die einige Attribute defaultmÑssig so gesetzt haben, dass ein einfacher
	Tree aufgebaut werden kann:

	@object BargrafViewClass TestView = {
		GVI_content = @TestContent;
		GVI_docBounds = {0, 0, 200, 40};
		ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
		}
	@object BargrafContentClass TestContent = {
		VCI_comp = @TestBar1,@TestBar2;
		}
	@object BargrafClass TestBar1 = {
		VI_bounds = {1,1,120,19};
		BGI_appText = "%";
		... mehr Initialisierungen hier ...
		}
	@object BargrafClass TestBar2 = {
		VI_bounds = {0,20,180,40};
		BGI_options = BGO_DISPLAY_VALUE;
		... mehr Initialisierungen hier ...
		}

 ---------------------------------------------------------------------------*/

#define	BGO_DISPLAY_PREV_TEXT			0x001
#define BGO_DISPLAY_APP_TEXT			0x002


#define BGO_DISPLAY_VALUE_KBYTE			0x004
#define BGO_DISPLAY_VALUE				0x008
#define BGO_DISPLAY_VALUE_AS_PERCENT	0x010
#define BGO_DISPLAY_REMAINING			0x020

#define BGO_DRAW_XOR_MODE				0x040
#define BGO_DRAW_BAR_IF_ZERO			0x080
#define BGO_DO_NOT_DRAW_BAR				0x100


#define BGO_DEFAULT_DRAW_BAR_ONLY 		0
#define BGO_DEFAULT_DRAW_BAR_PERCENT		BGO_DISPLAY_VALUE_AS_PERCENT
#define BGO_DEFAULT_DRAW_BAR_VALUE              BGO_DISPLAY_VALUE
#define BGO_DEFAULT_DRAW_BAR_PERCENT_TEXT	BGO_DISPLAY_VALUE_AS_PERCENT | \
						BGO_DISPLAY_PREV_TEXT | \
						BGO_DISPLAY_APP_TEXT
#define BGO_DEFAULT_DRAW_BAR_VALUE_TEXT		BGO_DISPLAY_VALUE | \
						BGO_DISPLAY_PREV_TEXT | \
						BGO_DISPLAY_APP_TEXT

#define BGO_DEFAULT_XOR_BAR_PERCENT		BGO_DEFAULT_DRAW_BAR_PERCENT | \
						BGO_DRAW_XOR_MODE
#define BGO_DEFAULT_XOR_BAR_VALUE               BGO_DEFAULT_DRAW_BAR_VALUE | \
						BGO_DRAW_XOR_MODE
#define BGO_DEFAULT_XOR_BAR_PERCENT_TEXT        BGO_DEFAULT_DRAW_BAR_PERCENT_TEXT | \
						BGO_DRAW_XOR_MODE
#define BGO_DEFAULT_XOR_BAR_VALUE_TEXT	        BGO_DEFAULT_DRAW_BAR_VALUE_TEXT | \
						BGO_DRAW_XOR_MODE

@class BargrafClass, GenGadgetClass;
	@instance word BGI_textColor = C_BLUE;
	@instance word BGI_barColor = C_BLUE;
	@instance word BGI_backColor = C_LIGHT_GREY;
	@instance int BGI_width = 0;
	@instance dword	BGI_valToDisp = MakeWWFixed(0.0);
	@instance word BGI_options = BGO_DEFAULT_DRAW_BAR_PERCENT;

	@instance dword	BGI_value = 0;
	@instance dword	BGI_maximum = 100;
	@instance int 		BGI_fracDigits = 0;
	@instance int 		BGI_textOffsX = 20;
	@instance int 		BGI_textOffsY = 4;
	@instance FileLongName 	BGI_prevText="";
	@instance FileLongName 	BGI_appText="";

	@instance VMBlockHandle BGI_bitmapHandle = 0;
	@instance GStateHandle BGI_bitmapGState = 0;

	@message void MSG_BARGRAF_UPDATE_VISUAL();
	@message void MSG_BARGRAF_SET_MAXIMUM(dword max);
	@message void MSG_BARGRAF_SET_VALUE(dword val);
	@message void MSG_BARGRAF_INCREMENT_VALUE(dword val);

	@message void MSG_BARGRAF_SET_TEXT(char * prevText, char * appText);
	@message void MSG_BARGRAF_SET_TEXT_OFFSET( int x, int y);

	@message void MSG_BARGRAF_SET_COLOR(int barColor, int textColor);
					/* pass -1 for no change */

	@message void MSG_BARGRAF_SET_OPTIONS(word optToSet, word optToClear);
	@message void MSG_BARGRAF_SET_FRAC_DIGITS(int frac);

	@message void MSG_BARGRAF_GET_MAXIMUM(dword *max);
	@message void MSG_BARGRAF_GET_VALUE(dword *val);
	@message void MSG_BARGRAF_GET_INFO(int *barColor, int *textColor,
		int * fracDigits, int * options,
		int *textXoffs, int *textYoffs,
		char * prevText, char * appText);
				/* pass NULL for no return a info */
@endc

@if 0
@class BargrafViewClass, GenViewClass;
    @default GVI_horizAttrs = @default /*|GVDA_NO_LARGER_THAN_CONTENT*/
				       | GVDA_NO_SMALLER_THAN_CONTENT;
    @default GVI_vertAttrs  = @default |GVDA_NO_LARGER_THAN_CONTENT
				       | GVDA_NO_SMALLER_THAN_CONTENT;
/* folgendes Attribut sollte immer gesetzt werden, damit
   kein floating Keyboard erscheint:
    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
  Falls wieder erwarten Scrollers erscheinen:
    HINT_VIEW_REMOVE_SCROLLERS_WHEN_NOT_SCROLLABLE;
    */
@endc

@class BargrafContentClass, VisContentClass;
	@default VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
	@default VCNI_attrs = @default | VCNA_VIEW_DOC_BOUNDS_SET_MANUALLY
		| VCNA_SAME_WIDTH_AS_VIEW | VCNA_SAME_HEIGHT_AS_VIEW;
@endc
@endif


/*---------------------------------------------------------------------------
	Index-Array: Verwaltung von Baumstrukturen
 ---------------------------------------------------------------------------*/


#define	IA_NO_PARENT	((dword) -1)
#define	IA_MAX_INDEX_PATH_LEN	200
#define	IA_INITIAL_INDEX_COUNT	32
#define	IA_ADDITIONAL_INDEX_COUNT 16

#define IA_ET_PARENT	1
#define IA_ET_FILE	2
#define IA_ET_DIR	3


typedef struct {
	dword	
		parentLink,
		fileSizeAtLevel;	// Grî·e d. Dateien incl. Subdirs
	word    
		filesAtLevel,		// Anzahl d. Dateien incl. Subdirs
		fileCount,		// Anzahl Dateien im current Dir
		fileMaxCount,		// Grî·e Datei-Array
		dirCount,		// Anzahl d. Subdirs im CurrentDir
		dirMaxCount,            // Grî·e Subdir-Array
		pathLen,
		fileArrayOffset,	// Start Datei-Array, in dword!
		dirArrayOffset;         // Start Subdir-Array, in dword!
	dword	extraBlock,		// frei nutzbar, z.B. fÅr ein VM-Handle
					// mit Zusatz-Infos
		reserved1,		// Reserviert. Nie benutzen!
		reserved2;		// Reserviert. Nie benutzen!
	word fileHiddenCount;
	Boolean treeExpanded;		// Reserviert. Nie benutzen!
	char	pathName[IA_MAX_INDEX_PATH_LEN];

	} IndexArrayBlockHeader;
/* Achtung! An die Struktur schlie·t sich bei Nutzung mit den Index-Array-
   Routinen ein Feld mit VM-Block-Handles variabler LÑnge an.
   Daher bei Verwendung in einer anderen Struktur nur als letztes Feld
   benutzen! Besser ist die Nutzung von extraBlock als Link. */

#define IAEXPORT _export _pascal

/* Anlegen eines Pfad-Eintrags ins IndexArray. Stellt sicher da· der
   Eintrag und alle Parents existieren.
   Existiert er schon, wird er nicht nochmal angelegt.
   ruft: IndexArrayExistPath und IndexArrayCreateNewPath
   Return: Index des Eintrages (gefunden oder neu) */
extern dword IAEXPORT IndexArrayCreatePath(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path);

/* Anlegen eines leeren Pfadeintrages ohne Parent-Link und irgentwelche
   File- oder Subdir-Links. Keine Tests ob Parents existieren.
   Return: Index des neu angelegten Eintrages im IndexArray */
extern dword IAEXPORT IndexArrayCreateNewPath(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path);

/* Testen ob ein Pfadeintrag schon existiert.
   Return: TRUE, wenn er schon existiert, FALSE wenn nicht
   index enthÑlt ggf. den Index des existierenden Pfades */
extern Boolean IAEXPORT IndexArrayExistPath(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path, dword * index);

/* Suchen des Indexes des Parent-Pfades im IndexArray.
   Routine stellt sicher, da· die Parentpfade existieren. */
extern dword IAEXPORT IndexArrayFindParentIndex(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path);

/* Anlegen eines Eintrages fÅr eine Datei in ein IndexArray.
   Routine stellt sicher, da· der Pfad existiert, trÑgt den Index ein
   und updatet die Dateigrî·en im Pfad (incl. Parents) */
extern void IAEXPORT IndexArrayCreateFileEntry(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path, dword entryIndex, dword fileSize);
extern void IAEXPORT IndexArrayCreateFileEntryEx(VMFileHandle vmFile, VMBlockHandle indexArray,
		char * path, dword entryIndex, dword fileSize, Boolean hidden);

/* AnhÑngen eines Datei-Eintrages an einen gefundenen Eintrag im Index-Array */
extern void IAEXPORT IndexArrayAppendFile(VMFileHandle vmFile, VMBlockHandle indexArray,
		dword pathIndex, dword entryIndex);
extern void IAEXPORT IndexArrayAppendFileEx(VMFileHandle vmFile, VMBlockHandle indexArray,
		dword pathIndex, dword entryIndex, Boolean hidden);

/* AnhÑngen eines Subdir-Eintrages an einen gefundenen Eintrag im Index-Array */
extern void IAEXPORT IndexArrayAppendSubdir(VMFileHandle vmFile, VMBlockHandle indexArray,
		dword pathIndex, dword dirIndex);

/* Updaten der Dateigrî·en eines Eintrages im Index-Array.
   Routine ruft sich rekursiv um auch die Parents anzugleichen */
extern void IAEXPORT IndexArrayIncrementSize(VMFileHandle vmFile, VMBlockHandle indexArray,
		dword pathIndex, dword fileSize);



/* Indizierter Zugriff auf einen Eintrag in einen AndexArrayBlock
   Bei Aufruf: kein Array gelockt
   Rotine Lockt das IndexArray(curentIndex) , sucht den Eintrag entryNr
   (unlockt bei Bedarf das indexArray) und lockt das Element im richtigen
   Array, auf das der Eintrag im Block verweist.
   Liefert in ptr einen void-Zeiger auf das Element und in lockedIndex
		die Index-Nr des Elements
   Return: IA_ET_PARENT | IA_ET_FILE | IA_ET_DIR
	bei IA_ET_PARENT und IA_ET_DIR ist das Index-Array gelockt,
	bei IA_ET_FILE ist das Entry-Array gelockt

   Achtung! in jedem Fall mu· das nunmehr gelockte Array mit
	HugeArrayUnlock(ptr) freigegeben werden! */
extern int IAEXPORT IndexArrayLockEntry( VMFileHandle vmFile, VMBlockHandle indexArray,
	VMBlockHandle entryArray, dword currentIndex, dword entryNr,
	void ** ptr, dword * lockedIndex);



/* ####################################################################-
	DirList-Tool-Routinen, die typische Aufgaben erleichtern sollen,
	wenn mit Verzeichnissen gearbeitet wird
	- Durchsuchen von Verzeichnissen nach Dateien, Links und Subdirs
	- Verwaltung der Icon-Bildchen
/* ####################################################################- */

/* ---------------------------------------------------------------------------
	Durchsuchen von Verzeichnissen
	- DirListEnumSubdir: liefert einen Memory-Block mit einem Array von
		DLStandardEnumType. Dateien, Verzeichnisse oder Links kînnen
		gefunden werden. Das Array wird sortiert.
	- DirListExtendedEnumSubdir: Erweiterte (und komplexere) Version.
		Die Infos im zurÅckgelieferten Array kînnen frei bestimmt werden.
		Das Array bleibt dafÅr unsortiert.
	- DirListEnumDirsAndFiles: spezialisierte Version: sucht immer nach
		Dateien und Verzeichnissen. Links kînnen gefunden werden,
		Liefert zusÑtzlich die Anzahl der Verzeichnisse.
		Das Array wird sortiert.
	- DirListSortFileEnumResult: Sortierroutine fÅr das gefundene Array.
		wird von DirListEnumSubdir und DirListEnumDirsAndFiles
		bereits verwendet, nicht aber von DirListExtendedEnumSubdir
	- DirListSortEnumSubdirResult: Macro, das DirListEnumSubdir und
		DirListEnumDirsAndFiles verwenden, um DirListSortFileEnumResult
		zu rufen. Vereinfacht die Arbeit.
	- DirListToolAdjustLinkDirs: BugFix, weil FileEnum das Attribut LINK
		bei Verzeichnissen ignoriert und FESF_DIRS immer sowohl
		reale als auch Link-Verzeichnisse liefert. Verwndet von
		DirListEnumSubdir und DirListEnumDirsAndFiles, um die Flags
		DL_EF_LINKS und DL_EF_LINKS_ONLY auch fÅr verzeichnisse
		anwenden zu kînnen.
 ---------------------------------------------------------------------------*/

/*
DirListEnumSubdir und DirListEnumDirsAndFiles liefern einen Speicherblock,
der ein Array mit folgender Struktur enhÑlt (fÅr jede gefunden Datei eine)
*/

typedef struct {
	FileLongName	DL_SET_fileName;
	GeosFileType    DL_SET_fileType; /* GFT_xxx */
	byte		DL_SET_attrs;	/* FileAttrs FA_xxx */
	} DLStandardEnumType;

/* die Offsets werden in DirListEnumSubdir gebraucht, um die Datenstruktur der
   Returnwerte zu beschreiben */
#define DL_SET_NAME_OFFSET	0
#define DL_SET_TYPE_OFFSET	(DL_SET_NAME_OFFSET+sizeof(FileLongName))
#define DL_SET_ATTR_OFFSET 	(DL_SET_TYPE_OFFSET+sizeof(GeosFileType))

/* die folgenden Werte kînnen als Parameter 'flags' an die
	DirListEnum~ -Routinen Åbergeben werden
	DL_EF_DIRS und DL_EF_FILES finden Links nur, wenn auch DL_EF_LINKS
	Åbergeben wurde.
	Es mu· mindestens DL_EF_DIRS oder DL_EF_FILES Åbergeben werden.
*/

/* DirListEnumFlags */
#define	DL_EF_DIRS	1
#define DL_EF_FILES	2
#define DL_EF_LINKS	4
#define DL_EF_LINKS_ONLY	8
/* Beispiele: 	Alle Dateien und Subdirs, incl Links:
			DL_EF_DIRS | DL_EF_FILES | DL_EF_LINKS
		Nur Datei-Links:
			DL_EF_FILES | DL_EF_LINKS_ONLY
		Nur Verzeichnise, keine Verzeichnis-Links
			DL_EF_DIRS
		*/


/*--------------------- DirListEnumSubdir ---------------------
	Durchsuchen eines Verzeichnisses. FÅr jede Datei, die auf 'flags'
	passt wird eine Struktur DLStandardEnumType im alloziierten
	Speicher mh zurÅckgegeben
	- flags bestimmt ob Verzeichnisse (DL_EF_DIRS), Dateien (DL_EF_FILES)
	  und Links (DL_EF_LINKS, DL_EF_LINKS_ONLY) gefunden werden sollen
	  Kombination mit | ( z.B. DL_EF_FILES | DL_EF_DIRS) ist zulÑssig
	  : DL_EF_LINKS | DL_EF_LINKS_ONLY == DL_EF_LINKS_ONLY
	Return: Anzahl der gefunden Dateien
		wenn der Returnwert <= 0 ist, so ist mh UNGöLTIG!
 ---------------------------------------------------------------------------*/
extern int IAEXPORT DirListEnumSubdir (MemHandle * mh, word flags);

/*--------------------- DirListExtendedEnumSubdir ---------------------
	Durchsuchen eines Verzeichnisses. FÅr jede Datei, die auf 'flags'
	passt wird eine Struktur im alloziierten Speicher mh zurÅckgegeben,
	die durch returnDesc und returnSize beschrieben wird.
	- returnDesc wird direkt Åber das Feld FEP_returnAttrs
	  und returnSize Åber FEP_returnSize an FileEnum() weitergeleitet
	- Beschreibung der Belegung von returnDesc: Concepts, File System, S.656
	- flags bestimmt ob Verzeichnisse (DL_EF_DIRS), Dateien (DL_EF_FILES)
	  und Links (DL_EF_LINKS, DL_EF_LINKS_ONLY) gefunden werden sollen
	  Kombination mit | ( z.B. DL_EF_FILES | DL_EF_DIRS) ist zulÑssig
	  : DL_EF_LINKS | DL_EF_LINKS_ONLY == DL_EF_LINKS_ONLY
	Return: Anzahl der gefunden Dateien
		wenn der Returnwert <= 0 ist, so ist mh UNGöLTIG!
 ---------------------------------------------------------------------------*/
extern int IAEXPORT DirListExtendedEnumSubdir(MemHandle * mh, word flags,
		FileExtAttrDesc * returnAttrs, word returnSize);

/*--------------------- DirListEnumDirsAndFiles ---------------------
	Durchsuchen eines Verzeichnisses.
	ZunÑchst wird das Verzeicnis mit DirListEnumSubdir durchsucht, dann
	werden die gefundenen EintrÑge vom Typ DLStandardEnumType
	sortiert (Verzeichnisse zuerst)	in einem Speciherblock abgelegt
	und das dazugehÑrige Handle wird zurÅckgeliefert.
	- FÅr flags ist nur DL_EF_LINKS oder DL_EF_LINKS_ONLY gÅltig, andere
	  Flags werden ignoriert

	Return: Anzahl der insgesamt gefunden EintrÑge (Dateien+Dirs)
		dirCount enthÑlt die Anzahl der Subdirs (ohne Dateien)
		wenn der Returnwert <= 0 ist, so ist mh UNGöLTIG!
 ---------------------------------------------------------------------------*/
extern int IAEXPORT DirListEnumDirsAndFiles( MemHandle * mh, int * dirCount, word flags);

/*--------------------- DirListSortFileEnumResult ---------------------
	Sortieren eines Suchergebnisses von FileEnum().
	Ziel: alphabetische Darstellung in einer Dateiliste
	- Verzeichnisse vor Dateien anordnen (falls typeOffs != (-1) )
	- Sortierung in alphabetischer Reihenfolge
	mh: von FileEnum gelieferter Block
	structSize, structCount		Grî·e und Anzahl der Strukturen im Block
	nameOffs, typeOffs		Offset der Felder fÅr FileName und
					GeosFileType, fÅr den eigentlichen
					Vergleich
	Ist typeOffs == (-1)	-> Typ wird ignoriert (bzw ist nicht vorhanden)
 ---------------------------------------------------------------------------*/
extern void IAEXPORT DirListSortFileEnumResult( MemHandle mh,
				int structSize, int structCount,
				int nameOffs, int attrOffs);

#define DirListSortEnumSubdirResult(mh, count) 	DirListSortFileEnumResult( mh, \
				sizeof(DLStandardEnumType), count, \
				DL_SET_NAME_OFFSET, DL_SET_ATTR_OFFSET)

/*--------------------- DirListToolAdjustLinkDirs ---------------------
	AusbÅglen eines Bugs im System: FileEnum liefert, falls Verzeichnisse
	gefordert werden IMMER ALLE Verzeichnisse, egal ob sie Links sind oder
	nicht.
	-> die nicht benîtigten Verzeichnisse mÅssen ausgeblendet werden.

	mh: von FileEnum gelieferter Block
	structSize, structCount		Grî·e und Anzahl der Strukturen im Block
	flags				flags, wie sie an die DirListEnumXXXX
					Routinen Åbergeben wurden
	attrOffs			Offset des Feldes FileAttrs (FA_xxx),
					fÅr den eigentlichen Vergleich
 ---------------------------------------------------------------------------*/
extern int IAEXPORT DirListToolAdjustLinkDirs( MemHandle *mh,
				int structSize, int structCount,
				int flags, int attrOffset);

/* ---------------------------------------------------------------------------
	Verwalten der Icons-Bildchen
 ---------------------------------------------------------------------------*/
/*
	Die Library stellt 15x10 Pixel gro·e Icons (16 Farben) zur VerfÅgung,  die
	zur Kennzeichnung von Dateien in ListeneintrÑgen verwendet werden kînnen.
	jede DL_ICON_TYPE_xx-Konstane entspricht einem Icon.

	DirListGetDosIconType() und DirListGetIconType() ermitteln den
			passenden Typ. Dabei steuern die
			DirListExtensionSearchFlags (DLESF_xxx) nach welchen
			Extensions in DOS-Dateien gesucht werden soll
	DirListGetIconOptr() liefert den Optr des Icon-Bilchens.
	DirListWriteIconizedString() schreibt ein Icon-Bildchen und einen
			String in ein gstate.
	DirListParseNameFromPath() liefert das letzte Element eines Pfad-Strings,
			d.h. i.a. den Datei- oder Current-Dir-Namen.
*/

/* Header-Struktur der Icon-Bildchen */
typedef struct {
	Bitmap bitmapHeader;
	unsigned char bitmapData[200];
} SymbolBmp;


/* Icon Typen */
typedef enum {
	DL_ICON_TYPE_PARENT = 1,
	DL_ICON_TYPE_DIR,          	/* Verzeichnis */
	DL_ICON_TYPE_DOS_DOC,		/* einfache DOS-Datei */
	DL_ICON_TYPE_DOS_PICTURE,	/* Grafik-Datei */
	DL_ICON_TYPE_DOS_ARCHIVE,	/* Archiv-Datei */
	DL_ICON_TYPE_DOS_ARCHIVE_FOLDER,	/* Archiv als Verzeichnis dargestelt */
	DL_ICON_TYPE_DOS_EXEC,		/* DOS ausfÅhrbar */
	DL_ICON_TYPE_GEOS_DOC,		/* Geos-Datendatei */
	DL_ICON_TYPE_GEOS_EXEC		/* Geos Executable */
	} DirListIconType;

typedef enum {
/* Suche nach Executablen: COM, EXE, BAT */
	DLESF_EXEC = 1,
/* suche nach Bildern: PCX, BMP, JPG, IMG, TIF, GIF, FLI, FLC, DIB, PIC, PIX */
	DLESF_PICTURE = 2,
/* Suche nach Archiven ZIP, ARJ, LZH, RAR, ZOO, ARC, PAC, DWC */
	DLESF_ARCHIVE = 4,
/* Suche nach Geos-Dateien GEO (->EXEC) 0xx .. 9xx (->DOC) */
	DLESF_GEOS = 8,
/* Bestimmung welche Archive als Archiv-Folder dargestellt werden sollen */
	DLESF_ZIP2FOLDER = 0x100,
	DLESF_ARJ2FOLDER = 0x200,
	DLESF_LZH2FOLDER = 0x400,
	DLESF_RAR2FOLDER = 0x800,
	DLESF_ZOO2FOLDER = 0x1000,
	DLESF_ARC2FOLDER = 0x2000,
	DLESF_PAC2FOLDER = 0x4000,
	DLESF_DWC2FOLDER = 0x8000
	} DirListExtensionSearchFlags;

#define DLESF_ALL (DLESF_EXEC | DLESF_PICTURE | DLESF_ARCHIVE | DLESF_GEOS)

/*--------------------- DirListGetDosIconType ---------------------
	Versucht aus der Extension des Åbergebenen DOS-Names einen
	passenden IconTyp zu ermitteln
 ---------------------------------------------------------------------------*/
extern DirListIconType IAEXPORT DirListGetDosIconType( char * name,
		  DirListExtensionSearchFlags flags);

/*--------------------- DirListGetIconType ---------------------
	Liefert den zum Dateityp (gft) passenden IconTyp. Ist
	gft == GFT_NOT_GEOS_FILE wird der Name mit DirListGetDosIconType()
	entsprechend den Åbergeben flags ausgewertet.
	Ist gft != GFT_NOT_GEOS_FILE, wird name und Flags ignoriert.
 ---------------------------------------------------------------------------*/
extern DirListIconType IAEXPORT DirListGetIconType( GeosFileType gft,
		char * name, DirListExtensionSearchFlags flags);

/*--------------------- DirListGetIconOptr ---------------------
	Liefert den optr des Icon-Bildchens,das zum Åbergebenen IconType
	passt. Ist IconType ungÅltig, wird der optr fÅr "DOS-Datei" geliefert
	Um die Bitmap mit GrDrawBitmap...() zu verwenden, mu· sie gelockt und
	dereferenziert werden.
	öbergeben: DL_ICON_TYPE_xx -Konstante
 ---------------------------------------------------------------------------*/
extern optr IAEXPORT  DirListGetIconOptr(DirListIconType iconType);

/*--------------------- DirListWriteIconizedString ---------------------
	Vereinfacht die Verwendung von Icons in Listen, indem die DrawRoutinen
	(und damit die geeignete Anordnung der Elemente) zudsammengafasst werden.
	Bitmap und String werden in das Åbergebene gstate geschrieben.
	Wird fontID==0 Åbergeben, wird der Font nicht geÑndert.
		Ansonsten wird der Font mit der Gî·e 12 pt eingestellt
	yPos ist die Verschiebung des Textes in Pixeln nach unten. Der Wert ist an
		den verwendeten Font und die Zeilengrî·e anzupassen,
	Ist endGS == TRUE, wird der GString mit GrEndGString() abgeschlossen
 ---------------------------------------------------------------------------*/
extern void IAEXPORT DirListWriteIconizedString( GStateHandle gsh,
	optr iconOptr, char * string, word fontID,word yPos, Boolean endGS);


/*--------------------- DirListGetCurrentDirName ---------------------
	Liefert den Namen des CurrentDir. Ist das CurrentDir ein
	Root-Verzeichnis ist der Namensstring leer und der
	Returnwert ist TRUE.
	Der Returnwert ist FALSE, wenn das CurrentDir kein Root-Verzeichnis ist.
 ---------------------------------------------------------------------------*/
extern Boolean IAEXPORT DirListGetCurrentDirName(char * name);

/*--------------------- DirListParseNameFromPath ---------------------
	éndert den Åbergebenen Zeiger so ab, da· er auf das letzte Element
	des Pfad-Strings (exakt: nach das letzte '\' oder '//', dh. i.a.
	auf den Datei- oder Current-Dir-Namem) zeigt.
 ---------------------------------------------------------------------------*/
extern word IAEXPORT DirListParseNameFromPath ( char ** path);

@endlib



