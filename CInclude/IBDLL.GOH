@ifndef _IBDLL_GOH_
@define _IBDLL_GOH_

@include <ibms.goh>

typedef IBMSIndex IBDLLList ;
typedef IBMSIndex IBDLLItem ;
typedef dword     IBDLLData ;
typedef word      IBDLLUserFlags ;
typedef dword     IBDLLHeaderData ;
#define IBDLL_ITEM_BAD   IBMS_BAD
#define IBDLL_LIST_BAD   IBMS_BAD

/* Function to create a new list in an existing Index Based Memory System */
IBDLLList IBDLLCreate(IBMSHandle memory, IBDLLHeaderData headerData) ;

/* Destroy a previously created list */
void IBDLLDestroy(IBMSHandle memory, IBDLLList list) ;

/* Insert an item before the given item in the list */
/* Pass IBDLL_ITEM_BAD if you want to append the item */
IBDLLItem IBDLLInsert(
              IBMSHandle memory,
              IBDLLList list,
              IBDLLData data,
              word userFlags,
              IBDLLItem insertBeforeThisItem) ;

/* Delete an item out of the list */
void IBDLLItemDelete(IBMSHandle memory, IBDLLList list, IBDLLItem item) ;

typedef IBDLLData IBDLLLocation ;
#define IBDLL_LOCATION_FIRST    0
#define IBDLL_LOCATION_LAST     0xFFFFFFFF

/* Find a location in the list or use the above constants */
/* The last item is always returned unless the list is empty */
/* a value of IBDLL_ITEM_BAD means the list is empty */
IBDLLItem IBDLLGetItem(
              IBMSHandle memory,
              IBDLLList list,
              IBDLLLocation location) ;

/* Returns the number of items in the list */
dword IBDLLGetCount(IBMSHandle memory, IBDLLList list) ;

/* Routines to set and get the data attached to the list item */
IBDLLData IBDLLItemGetData(IBMSHandle memory, IBDLLItem item) ;
void IBDLLItemSetData(IBMSHandle memory, IBDLLItem item, IBDLLData data) ;

/* Routines to set and get the user flags attached to the list item */
IBDLLUserFlags IBDLLItemGetFlags(IBMSHandle memory, IBDLLItem item) ;
void IBDLLItemSetFlags(
         IBMSHandle memory,
         IBDLLItem item,
         IBDLLUserFlags flags) ;

IBDLLHeaderData IBDLLGetHeaderData(IBMSHandle memory, IBDLLList list) ;
void IBDLLSetHeaderData(
         IBMSHandle memory,
         IBDLLList list,
         IBDLLHeaderData data) ;

IBDLLItem IBDLLItemGetPrevious(IBMSHandle memory, IBDLLItem item) ;

IBDLLItem IBDLLItemGetNext(IBMSHandle memory, IBDLLItem item) ;

@endif

