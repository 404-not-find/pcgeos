/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994,1995 -- All Rights Reserved
 *			GEOWORKS CONFIDENTIAL
 *
 * PROJECT:	Foam
 * FILE:	contdb.h
 *
 *
 * REVISION HISTORY:
 *	
 *	Name	Date		Description
 *	----	----		-----------
 *	atw	11/10/94	Initial revision
 *	kho	3/2/95		ContactGetUserDataID added
 *	ss	7/11/95		added messages/vardata to 
 *				ContactEditClass
 *
 *
 * DESCRIPTION:
 *	Contains equates, etc for the contdb library
 *		
 *	$Id: contdb.goh,v 1.1 97/04/04 15:56:31 newdeal Exp $
 *
 ***********************************************************************/

#ifndef	__CONTDB_H
#define __CONTDB_H
@deflib	contdb

@include <foam.goh>
@include <foamdb.h>
@include <Objects/vTextC.goh>

typedef ByteEnum ContdbFieldType;
/*
 * The standard field types in the contact database
 *
 * 	Note: CFT_TEL_FAX & CFT_TEL_DATA types work just like Tel
 * 	fields. You can set speed dials, phone numbers will match to
 * 	these fields, phone directory will allow contacts to be
 * 	selectable based on these fields too.
 */
#define	CFT_NAME    	0
#define	CFT_COMPANY 	1
#define	CFT_TITLE 	2
#define	CFT_ADDRESS 	3
#define	CFT_PHONE   	4
#define	CFT_FAX	    	5
#define	CFT_EMAIL   	6
#define	CFT_DTMF    	7
#define	CFT_NOTES   	8
/* Only available in Communicator products after Feb 1997: */
#define CFT_URL         9
#define CFT_PASSWORD    10
#define CFT_TEL_FAX	11
#define CFT_TEL_DATA	12

typedef ByteFlags ContdbRecordFlags;
#define CRF_SPECIAL_RINGING_TONE    0x01
/* If set on a record, specifies that it has a special ringing tone */

#define MAX_NAME_DATA_LEN	100
#define MAX_COMPANY_DATA_LEN	100
#define MAX_JOB_TITLE_DATA_LEN	150
#define MAX_ADDRESS_DATA_LEN	150
#define MAX_NUMBER_FIELD_DATA_LEN	30
#define MAX_EMAIL_DATA_LEN	1024
#define MAX_NOTE_DATA_LEN		400
#define MAX_URL_DATA_LEN        400
#define BOOKING_PWD_LENGTH      8

#define MAX_FIELD_LABEL_LEN_NO_NULL	31
#define MAX_FIELD_LABEL_LEN	(MAX_FIELD_LABEL_LEN_NO_NULL+1)

/*
 * Use this constant to export all records in
 * ContactExportDBToTextFile.
 */
#define CONTACT_EXPORT_ALL_RECORDS	-1

typedef enum {
    CES_NO_ERROR,
    CES_FILE_ERROR
} ContactExportStatus;

extern VMFileHandle
    _pascal ContactGetDBHandle(void);
/*
 * Returns the handle of the database that contains all the contact entries,
 * or blocks if it is currently closed.
 */
extern VMFileHandle
    _pascal ContactGetDBHandleNoBlock(void);
/*
 * Returns the handle of the database that contains all the contact entries,
 * or 0 if it is currently closed. If a non-zero handle is returned, the
 * caller needs to call ContactReleaseDBHandle().
 */

extern void
    _pascal ContactReleaseDBHandle(void);
/*
 * Releases the database handle, so the file can be closed
 */

extern word			/* Returns value is same as VMClose */
    _pascal ContactCloseDBFile(void);

extern VMFileHandle
    _pascal ContactReOpenDBFile(void);
/*
 * Routines called to close/reopen the file so data backup/restore can occur
 * If ContactReOpenFile returns 0, then the file is not opened, and
 * ThreadGetError can be called to get the error
 */

extern MemHandle
    _pascal ContactCreateRecordFromTemplate(void);
/*
 * Creates a new record with all the fields that are in the template record,
 * and returns the handle of the record. This new record will have no data
 * stored in the fields.
 */

extern FieldID
    _pascal ContactEnsureField(MemHandle record, optr fieldName, 
			       ContdbFieldType fieldType);
/*
 * Ensures a field exists in the given record. If not, it adds the
 * field with the given fieldName (or if NULL, uses the default name),
 * of the type fieldType.
 */

extern FieldID
    _pascal ContactEnsureEmptyField(MemHandle record, optr fieldName, 
			       ContdbFieldType fieldType);
/*
 * Ensures an *empty* field exists in the given record, with the passed name
 * and type. If not, it adds the field with the given fieldName (or if NULL,
 * uses the default name), of the type fieldType.
 */

extern void
    _pascal ContactSetTemplateRecord(MemHandle record);
/*
 * Replaces the existing template record with the passed record. The passed
 * record can not have any data in it (all fields must be empty)
 */

extern dword
    _pascal ContactSaveRecord(MemHandle record);
/*
 * Saves the passed record in the database, inserting it in the correct sort
 * order.
 */

extern dword
    _pascal  ContactGetUserDataID(void);
/*
 * Returns the record ID of the user data card. The secret record
 * contains the user info.
 */

extern word
    _pascal ContactGetUserDataName(TCHAR *username, word bufSize);
/*
 * Copies the name field from the user data card into the passed buffer 
 * which must be at least (MAX_NAME_DATA_LEN * size TCHAR) bytes.  
 * Returns the size of the name.
 */


typedef	ByteEnum ContdbCallType;
#define	CCT_PHONE	 0
#define	CCT_SMS		 1	/* implies Tel(GSM) and Tel(PCN) */
#define	CCT_FAX		 2
#define	CCT_EMAIL	 3
#define	CCT_GSM_FAX	 4	/* implies Fax(GSM) and Fax(PCN) */
#define CCT_SMS_ONLY	 5	/* Tel(GSM) only */
#define	CCT_PCN_SMS_ONLY 6	/* Tel(PCN) only */
#define	CCT_GSM_FAX_ONLY 7	/* Fax(GSM) only */
#define	CCT_PCN_FAX_ONLY 8	/* Fax(PCN) only */
#define	CCT_ANY	    255

extern RecordID _pascal 
    ContactMatchNumber(TCHAR *number, ContdbCallType type, FieldID *field,
		       word *numMatches);
/*
 * Given a phone number, searches all the fields of the specified type in the
 * contact database, and returns the RecordID/FieldID of the matching one
 * If no match, returns a RecordID of -1
 */

extern RecordID _pascal 
    ContactMatchName(TCHAR *name, ContdbFieldType type, Boolean stopEarly,
		     FieldID *field, word *numMatches);
/*
 * Given a string, searches all the fields of the specified type in the
 * contact database, and returns the RecordID/FieldID of the matching one
 * (must be an *exact* case-insensitive match).
 *
 * Note that ContactMatchName takes a ContdbFieldType, while ContactMatchNumber
 * takes a ContdbCallType. These are *NOT* the same thing!
 *
 * If no match, returns a RecordID of -1
 *
 * If stopEarly is true the search will stop on the first match.
 *
 * LocalCmpStringsNoCase is used to match the fields
 */

extern Boolean
    _pascal ContactGetName(MemHandle record, TCHAR *dest);
/*
 * Given a record handle, gets the name associated with the record
 * dest = buffer to hold null-terminated name
 * (should hold MAX_NAME_DATA_LEN+1 TCHARs).
 *
 * Returns non-zero if the record was unnamed.
 */


extern Boolean
    _pascal ContactGetTruncatedName(MemHandle record, TCHAR *dest, word destSize);
/*
 * Given a record handle, gets the name associated with the record
 * dest = buffer to hold null-terminated name
 * destSize = size of destination buffer
 *   (e.g. if destSize = 10, routine can return at most 9 chars + 1 null)
 *
 * Returns non-zero if the record was unnamed.
 */

extern int
    _pascal SpeedDialGetSlot(RecordID rid, FieldID fid);
/*
 * Gets the slot # for the passed record/field ID.
 * If not found, returns BW_TRUE (-1).
 */

extern int
    _pascal SpeedDialGetRecord(int slot, RecordID *rid, FieldID *fid);
/*
 * Gets the record & field ID, given a slot #.
 * If error, returns BW_TRUE (-1).
 */


extern int
    _pascal SpeedDialSetRecord(int slot, RecordID rid, FieldID fid);
/*
 * Saves a record/field ID combo in a slot.
 * If slot wasn't previously empty, returns BW_TRUE (-1).
 */

extern int
    _pascal SpeedDialGetNumber(int slot, TCHAR *buf);
/*
 * Gets the phone number, given the slot #.
 * If slot is empty, returns BW_TRUE (-1).
 */

extern void
    _pascal ContactImportDBFromTextFile(hptr fileImport); 
/*
 * Imports information from a text file to the contact database.
 */

extern ContactExportStatus
    _pascal ContactExportDBToTextFile(hptr fileExport,
				      dword startElement,
				      dword numOfRecords); 
/*
 * This exports a range of records in the contact database into 
 * a text file, starting with record (startElement). (numOfRecords)
 * records will be processed.
 * If you want to export all records, use
 *	startElement = 0,
 *	numOfRecords = CONTACT_EXPORT_ALL_RECORDS
 */

extern void
    _pascal ContdbRecreateFieldLabel(TCHAR *subLabel,
				     TCHAR *destination,
				     int fieldType);
/*
 * Creates a valid field label given a sub-label, and a field
 * type. This routine will also handle clipping the final string 
 * so it will not be any more than MAX_FIELD_LABEL_PIXEL_WIDTH 
 * pixels wide.
 */

extern void
    _pascal ContdbTranslateSubFieldLabelToEnglish(TCHAR *subLabel, 
						  TCHAR *destination);
/*
 * Translates the sub-label of a field name into english, if
 * the sublabel isn't translatable, return the sublabel.
 */

extern Boolean
    _pascal ContactCompareNumbers(TCHAR *number1, TCHAR *number2);
/*
 * Compares two phone numbers (after stripping non-numeric characters, etc)
 * Returns non-zero if they did *not* match
 */

typedef ByteEnum ContactNetworkVersionType;
#define CNVT_GSM	0x0
#define CNVT_PCN	0x1

extern void
    _pascal ContactChangeNetworkVersion(ContactNetworkVersionType cnvt);
/*
 *  The cellular network version has been determined and we should
 *  change the default Tel & Fax GSM-like field labels to the appropiate
 *  type. This will affect the default template and user data card.
 * 
 */

#ifdef	__HIGHC__
pragma Alias(ContactGetDBHandle, "CONTACTGETDBHANDLE");
pragma Alias(ContactGetDBHandleNoBlock, "CONTACTGETDBHANDLENOBLOCK");
pragma Alias(ContactReleaseDBHandle, "CONTACTRELEASEDBHANDLE");
pragma Alias(ContactCloseDBFile, "CONTACTCLOSEDBFILE");
pragma Alias(ContactReOpenDBFile, "CONTACTREOPENDBFILE");
pragma Alias(ContactCreateRecordFromTemplate, "CONTACTCREATERECORDFROMTEMPLATE");
pragma Alias(ContactEnsureField, "CONTACTENSUREFIELD");
pragma Alias(ContactMatchNumber, "CONTACTMATCHNUMBER");
pragma Alias(ContactMatchName, "CONTACTMATCHNAME");
pragma Alias(ContactSetTemplateRecord, "CONTACTSETTEMPLATERECORD");
pragma Alias(ContactSaveRecord, "CONTACTSAVERECORD");
pragma Alias(ContactGetName, "CONTACTGETNAME");
pragma Alias(ContactGetTruncatedName, "CONTACTGETTRUNCATEDNAME");
pragma Alias(ContactGetUserDataID, "CONTACTGETUSERDATAID");
pragma Alias(ContactGetUserDataName, "CONTACTGETUSERDATANAME");
pragma Alias(SpeedDialGetSlot,"SPEEDDIALGETSLOT");
pragma Alias(SpeedDialGetRecord,"SPEEDDIALGETRECORD");
pragma Alias(SpeedDialSetRecord,"SPEEDDIALSETRECORD");
pragma Alias(SpeedDialGetNumber,"SPEEDDIALGETNUMBER");
pragma Alias(ContactImportDBFromTextFile,"CONTACTIMPORTDBFROMTEXTFILE");
pragma Alias(ContactExportDBToTextFile,"CONTACTEXPORTDBTOTEXTFILE");
pragma Alias(ContdbRecreateFieldLabel,"CONTDBRECREATEFIELDLABEL");
pragma Alias(ContdbTranslateSubFieldLabelToEnglish,"CONTDBTRANSLATESUBFIELDLABELTOENGLISH");
pragma Alias(ContactCompareNumbers, "CONTACTCOMPARENUMBERS");
pragma Alias(ContactChangeNetworkVersion, "CONTACTCHANGENETWORKVERSION");
#endif

@class	ContactListClass, GenControlClass;

typedef WordFlags ContactListFeatures;
#define CLF_SELECT_CONTACT_NUMBER	0x02
#define CLF_SEARCH		    	0x01
#define	CL_DEFAULT_FEATURES  CLF_SEARCH

@message void MSG_CONTACT_LIST_QUERY_ENTRY_MONIKER(optr list = cx:dx, word entry = bp);
/*
 * Message sent to the list to get a moniker for an item in the list
 */

@message void MSG_CONTACT_LIST_SELECTION_CHANGED();
/*
 * Notification sent to the controller when the selection in the list has
 * changed
 */

@message void MSG_CONTACT_LIST_SEARCH_TEXT_LOST_FOCUS();
/*
 * Internal message sent to the controller when the search text has lost the
 * focus
 */

@message dword MSG_CONTACT_LIST_GET_ID_OF_SELECTED_RECORD();
/*
 * Returns the record ID of the currently selected record
 */

@message void MSG_CONTACT_LIST_SEARCH_TEXT_TIMEOUT_MSG();
/*
 * Message sent out when it is time to perform a search
 */

@message void MSG_CONTACT_LIST_QUERY_NUMBER_LIST_MONIKER();
/*
 * Internal message sent out to get a moniker for the contact number list
 */

@message void MSG_CONTACT_LIST_SELECT_CURRENT_CONTACT();
/*
 * Internal - Sends a notification message callback when user has
 * selected a contact, either in alternate or regular select mode.
 */

@message void MSG_CONTACT_LIST_SELECT_CONTACT_NUMBER();
/*
 * Internal message sent out when the user clicks the "Select" trigger in
 * the dialog box listing all the contact numbers for a person.
 */

@message void MSG_CONTACT_LIST_CLOSE_CONTACT_NUMBER_POPUP();
/*
 * Internal message which closes the dialog box listing all the
 * contact numbers for a person, and sets the list selection to what
 * it should be.
 */

@message void MSG_CONTACT_LIST_HANDLE_SELECTION_CHANGE_NOTIFICATION(word selection = bp);
/*
 * Internal message used to delay setting the selection until after the GCN
 * list has been unlocked.
 */

@message void MSG_CONTACT_LIST_COMPLETE_SEARCH();
/*
 * Internal message sent to the list object when the user hits enter, to
 * perform a search immediately instead of waiting for the normal timeout
 */

/* --------------------------------------------------------------------------
 *  Messages available only in Communicator products after Feb 1997:
 * -------------------------------------------------------------------------*/

@message void MSG_CONTACT_LIST_PRESERVE_SEARCH_ON_NEXT_LOST_FOCUS();
/*
 *  Tells the contact list not to reset the search list when the focus
 *  is lost the very next time.
 */
 
@message ContactListSelectedRecordsData \
	MSG_CONTACT_LIST_GET_IDS_OF_SELECTED_RECORDS() = cx:ax; 
/*
 *  Returns the current list of contact selections. The caller must
 *  allocate a buffer for the entries and pass the size of the buffer.
 *  If there is insufficient space in the passed buffer for the
 *  selections, the buffer will not be filled in. Use this message if
 *  you've set the list to be non-exclusive.
 */

typedef struct {
    MemHandle CLSRD_dataBlock; 		/* block containing contact IDs */
					/* should be freed by caller */
    word      CLSRD_numSelections;      /* # of contact IDs returned */
} ContactListSelectedRecordsData;

@message void MSG_CONTACT_LIST_NOTIFY_CONTACT_SELECTED();
/*
 *  Internal - sent out when the user selects the "Select" trigger
 * 
 */

@message void MSG_CONTACT_LIST_ALTERNATE_NOTIFY_CONTACT_SELECTED();
/*
 *  Internal - Asks us to send out the callback message when the user
 *  has selected a contact and pressed F1 long enough to select that
 *  contact in alternate select mode.
 */

@message void MSG_CONTACT_LIST_CANCEL_CONTACT_NUMBER_POPUP();
/*
 *  Internal - sent out when the user chooses "cancel" in the dialog box
 *  listing all the contact numbers for a person.
 */

@message void MSG_CONTACT_LIST_SET_EMERGENCY_NUMBERS(
			const TCHAR *numbers = cx:dx, word num = bp);
/*
 *  Sets the special emergency numbers for which we will never find a
 *  match in our database. Usually used by type CCT_PHONE.
 * 
 *  "numbers" contain "num" contigously stored null-terminated numbers.
 */

@prototype void CONTACT_LIST_NOTIFY_CONTACT_SELECTED_MSG(
	   			dword recordID = cx:dx,
				word fieldID = bp);
@prototype void CONTACT_LIST_STATUS_MSG();
@prototype void CONTACT_LIST_NOTIFY_NUMBER_ENTERED_MSG(
				MemHandle block = cx);
/*
 * Block contains null-terminated number.
 * Block MUST be freed by recepient
 */
@prototype void CONTACT_LIST_ALTERNATE_NOTIFY_CONTACT_SELECTED_MSG(
	   			dword recordID = cx:dx,
				word fieldID = bp);
@prototype void CONTACT_LIST_ALTERNATE_NOTIFY_NUMBER_ENTERED_MSG(
				MemHandle block = cx);
/*
 * Block contains null-terminated number.
 * Block MUST be freed by recepient
 */

typedef struct {
    MemHandle	CLSD_contactsBlock;	/* ptr to block containing
					   GenItemGroup id's of
					   selected contacts */
    word	CLSD_contactsTotal;	/* # of selected contacts */
    word	CLSD_contactsIndex;	/* index to contact being
 					 * processed in CLSD_contactsBlock */
    MemHandle	CLSD_selectedBlock;	/* block containing sets of
					 * ContactListSelectedEntry */
    word	CLSD_selectedTotal;	/* total # ContactListSelectedEntry
					 * in CLSD_selectedBlock */
} ContactListSelectionData;

typedef struct {
    dword	CLSE_recordID;
    word	CLSE_fieldID;
} ContactListSelectedEntry;

@prototype void CONTACT_LIST_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG(
				MemHandle block = cx, word num = dx);
/*
 * Block contains "num" ContactListSelectedEntry items.
 */
@prototype void CONTACT_LIST_ALTERNATE_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG(
				MemHandle block = cx, word num = dx);
/*
 * Block contains "num" ContactListSelectedEntry items.
 */

@vardata ChunkHandle	ATTR_CONTACT_LIST_MONIKER;
@vardata Message	ATTR_CONTACT_LIST_STATUS_MSG;
@vardata Rectangle	TEMP_CONTACT_LIST_TAB_BOUNDS;
@vardata void		TEMP_CONTACT_LIST_DO_NOT_SEND_NOTIFICATIONS;
@vardata ContdbCallType	ATTR_CONTACT_LIST_CALL_TYPE;
@vardata Message    	ATTR_CONTACT_LIST_NOTIFY_CONTACT_SELECTED_MSG;
@vardata RecordID  	TEMP_CONTACT_LIST_SELECTED_CONTACT;

/* --------------------------------------------------------------------
 *  Vardata available only in Communicator products after Feb 1997:
 * --------------------------------------------------------------------*/

@vardata void		TEMP_CONTACT_LIST_PRESERVE_SEARCH;
/*
 *  If present, then the search list won't be reset the next time the
 *  focus is lost.
 */

@vardata word           ATTR_CONTACT_LIST_NUM_ITEMS;
/*  Keeps track of # of currently selected items */

@vardata void           HINT_CONTACT_LIST_NON_EXCLUSIVE_LIST;
/*
 *  User can select more than one contact (or none) at any time.
 *  Default is exclusive list.
 */

@vardata Message        ATTR_CONTACT_LIST_NOTIFY_NUMBER_ENTERED_MSG;
/*
 * The message sent out when there are no matches in the
 * Contact List AND the user has entered a valid phone number
 * in the search field. Only useful if CLF_SELECT_CONTACT set.
 * Use callback message of the type CONTACT_LIST_NOTIFY_NUMBER_ENTERED_MSG.
 */

@vardata ChunkHandle    ATTR_CONTACT_LIST_EMERGENCY_NUMBERS;
/*
 *  A list of special numbers which will never be matched to contact
 *  cards, in the search box. Contains 1 or more ChunkHandles to 
 *  null-terminated numbers.
 *  The numbers can either be set dynamically using
 *  MSG_CONTACT_LIST_SET_EMERGENCY_NUMBERS, or be used statically like: 
 * 
 *  ...
 *  @chunk TCHAR Number1[] = "911";
 *  ...
 *  	ATTR_CONTACT_LIST_EMERGENCY_NUMBERS = @Number1;
 *
 *  NOTE: In GOC you can set only one emergency number statically,
 *        wtih ESP, you can set more.
 */

@vardata word 		ATTR_CONTACT_LIST_ALTERNATE_NOTIFY_CONTACT_SELECTED_MSG;
/*
 *  The message sent out when the user selects a contact from the
 *  list. AND user has cause us to send out an alternate
 *  notification message. If more than one selection was
 *  selected, then it returns the first selection. Works when we
 *  are of type CCT_PHONE. Use callback message of the type
 *  CONTACT_LIST_ALTERNATE_NOTIFY_CONTACT_SELECTED_MSG.
 */

@vardata Message 	ATTR_CONTACT_LIST_ALTERNATE_NOTIFY_NUMBER_ENTERED_MSG;
/*
 *  The message sent out when there are no matches in the
 *  Contact List AND the user has entered a valid phone number
 *  in the search field. And user has cause us to send out an
 *  alternate notification message. Only useful if
 *  CLF_SELECT_CONTACT set. Wrks when we are of type CCT_PHONE.
 *  Use callback message of the type
 *  CONTACT_LIST_ALTERNATE_NOTIFY_NUMBER_ENTERED_MSG. 
 */

@vardata void 		TEMP_CONTACT_LIST_ALTERNATE_SELECTION_MODE;
/*
 *  If present, we should send out an alternate notify contact
 *  selected message. Works when we are of type CCT_PHONE.
 */

@vardata ContactListSelectedData 	TEMP_CONTACT_LIST_SELECTED_INFO;
/*
 *  The contacts that have been selected in a non-exclusive list
 *  and have to be displayed in the number bubble popup.
 */

@vardata Message ATTR_CONTACT_LIST_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG;
/*
 *  The message sent out when the user selects 1 or more
 *  contacts from the list (REQUIRED IF CLF_SELECT_CONTACT SET
 *  and HINT_NON_EXCLUSIVE_LIST is present). 
 * 
 *  More than one contact and more than one field per contact
 *  can be selected.
 * 
 *  Use callback message of the type
 *  CONTACT_LIST_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG.
 */
	
@vardata Message ATTR_CONTACT_LIST_ALTERNATE_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG;
/*
 *  The message sent out when the user selects 1 or more
 *  contacts from the list (REQUIRED IF CLF_SELECT_CONTACT SET
 *  and HINT_NON_EXCLUSIVE_LIST is present). Works when we are
 *  of type CCT_PHONE.
 * 
 *  More than one contact and more than one field per contact
 *  can be selected.
 * 
 *  Use callback message of the type
 *  CONTACT_LIST_ALTERNATE_NOTIFY_MULTIPLE_CONTACTS_SELECTED_MSG.
 */

@instance VMBlockHandle CLI_searchResult;
@instance word CLI_timerID = 0;
@instance TimerHandle CLI_timerHandle = 0;
@instance word CLI_curItem = 0;
@default GI_states = (@default | GS_ENABLED);
@endc

    
@class	ContactEditClass, GenControlClass;

typedef WordFlags ContactEditFeatures;
#define CEF_MENU  	    	    0x20
#define CEF_SAVE    	    	    0x10
#define CEF_FIELDS  	    	    0x08
#define CEF_MARK_SECRET	    	    0x04
#define CEF_SPECIAL_RINGING_TONE    0x02
#define CEF_SPEED_DIAL	    	    0x01
#define	CE_DEFAULT_FEATURES  (CEF_SPEED_DIAL | CEF_SPECIAL_RINGING_TONE | CEF_MARK_SECRET | CEF_FIELDS | CEF_SAVE | CEF_MENU)

@message void MSG_CONTACT_EDIT_DISPLAY_RECORD(MemHandle record = cx);
/*
 * Displays the passed record for editing
 */

@message void MSG_CONTACT_EDIT_DELETE_RECORD();
/*
 * Deletes the currently displayed record
 */

@message void MSG_CONTACT_EDIT_SAVE_RECORD_DATA();
/*
 * Saves the record being viewed, but displays warnings if the record will
 * be deleted because it is empty, not enough disk space to save, etc. If
 * the record is empty, it will be deleted. If the record is saved or deleted,
 * CEI_record is cleared.
 */
@message void MSG_CONTACT_EDIT_SAVE_RECORD_DATA_SILENTLY(MemHandle record = cx);
/*
 * Subclassable messages to save the edited record someplace other than in
 * the contact db (e.g. as a template, as user data, whatever)
 */


/*
 * Saves the currently displayed record, even if there is not sufficient disk
 * space. This routine does no checking - it saves the record regardless.
 */

typedef enum {
    CESS_NOT_SECRET,
    CESS_SECRET
} ContactEditSecretStatus;

@message void MSG_CONTACT_EDIT_SET_SECRET_STATUS(ContactEditSecretStatus secretStatus = cx);

typedef enum {
    CERT_NONE,
    CERT_SPECIAL_TONE
} ContactEditRingingTone;

@message void MSG_CONTACT_EDIT_SET_RINGING_TONE(ContactEditRingingTone tone = cx);

@message void MSG_CONTACT_EDIT_ADD_FIELD(ContdbFieldType type = cx);
@message void MSG_CONTACT_EDIT_ADD_FIELD_TYPE_SELECTED(ContdbFieldType type = cx);
@message void MSG_CONTACT_EDIT_DELETE_FIELD();
@message void MSG_CONTACT_EDIT_CHANGE_FIELD_LABEL();

@message void MSG_CONTACT_EDIT_FIELD_HAS_FOCUS(FieldID id = cx);
@message void MSG_CONTACT_EDIT_INITIATE_ADD_FIELD_DIALOG();

@message void MSG_CONTACT_EDIT_GET_CHANGE_FIELD_LABEL_MONIKER(optr list = cx:dx, word entry = bp);
@message void MSG_CONTACT_EDIT_CHANGE_LABEL_OF_FOCUSED_FIELD();
@message void MSG_CONTACT_EDIT_FIELD_LABEL_SELECTED(ContdbFieldType type = cx);

@message void MSG_CONTACT_EDIT_INITIATE_OPTIONS_DIALOG();
@message void MSG_CONTACT_EDIT_MARK_MODIFIED();

@message void MSG_CONTACT_EDIT_CORRECT_TEL_HALF_LINES();
@message void MSG_CONTACT_EDIT_CORRECT_FAX_HALF_LINES();
@message void MSG_CONTACT_EDIT_ADD_FIELD_SPEED_DIAL();
@message void MSG_CONTACT_EDIT_SAVE_AND_CLOSE();
@message MemHandle MSG_CONTACT_EDIT_GET_RECORD_HANDLE()=cx;

/*
 * Marks the current record as modified, so it will get saved out
 */

@message void MSG_CONTACT_EDIT_SET_FOCUS_TO_TOP_FIELD();
/*
 * Set the editor's focus to top field.
 */

/* --------------------------------------------------------------------------
 *  Messages available only in Communicator products after Feb 1997:
 * -------------------------------------------------------------------------*/

@message void MSG_CONTACT_EDIT_INITIATE_MENU_DIALOG();
/*
 * Internal: Sent to us by the Menu trigger
 */

@message void MSG_CONTACT_EDIT_DISPLAY_NEXT_RECORD();
/*
 * Load the next record, relative to the one being displayed
 */

@message void MSG_CONTACT_EDIT_DISPLAY_PREVIOUS_RECORD();
/*
 * Load the previous record, relative to the one being displayed
 */

@message void MSG_CONTACT_EDIT_COPY_RECORD();
/*
 * Internal: Sent to us by the copy card trigger
 */

@message void MSG_CONTACT_EDIT_COPY_FIELDS_TO_CLIPBOARD();
/*
 * Internal: Sent to us by the Copy To Clipboard trigger in the menu
 */

@message void MSG_CONTACT_EDIT_CORRECT_TEL_FAX_HALF_LINES();
@message void MSG_CONTACT_EDIT_CORRECT_TEL_DATA_HALF_LINES();
/*
 *  Fixes half-line inconsistencies among tel/fax & tel/data
 *  fields.
 */

@message void MSG_CONTACT_EDIT_COPY_FIELD_TO_HOTLIST();
/*
 *  Internal: The "Copy to hotlist" trigger sends this to us.
 */

@message void MSG_CONTACT_EDIT_SET_SELECTION_TO_TOP_FIELD();
/*
 *  Sets focus to the top field and select its contents. 
 */

@vardata void	ATTR_CONTACT_EDIT_NO_FIELD_DATA_ALLOWED;

@vardata void	ATTR_CONTACT_EDIT_RECORD_WAS_EMPTY;
@vardata VMFileHandle	TEMP_CONTACT_EDIT_DB_HANDLE;


typedef struct {
    word           CERD_fieldId;  /* cont DB Id of the last record on screen */
    VisTextRange   CERD_selection;/* selection in saved field object */
} ContactEditRecoverData;
@vardata ContactEditRecoverData ATTR_CONTACT_EDIT_RECOVER_FROM_STATE

@vardata void	ATTR_CONTACT_EDIT_CTRLNP_SAVE_ALLOWED;
@vardata void	TEMP_CONTACT_EDIT_RECORD_MODIFIED;
@vardata word   TEMP_CONTACT_EDIT_ORIGINAL_BLOCK_SIZE;
/* 
 * Used to store the original size of the data block pointed by
 * CEI_record. So we know how much extra diskspace is required when
 * saving/auto-saving. 
 */

@instance MemHandle CEI_record;
@instance RecordID CEI_recordID;
@default GI_states = (@default | GS_ENABLED);
@endc


@class 	SpeedDialControlClass, GenControlClass;

typedef WordFlags SpeedDialControlFeatures;
#define SDCF_UI	    	    	0x01
#define	SD_DEFAULT_FEATURES 	(SDCF_UI)

@message void MSG_SPEED_DIAL_QUERY_LIST_ENTRY();
/*
 *  Internal: message sent by our dynamic list to query for items.
 */

@message void MSG_SPEED_DIAL_OPEN_LIST();
/*
 *  Internal: message sent by the speed dial item trigger to open the
 *  list in wedge dialog.
 */

@message void MSG_SPEED_DIAL_REPLACE_ENTRY();
/*
 *  Internal: message applied by the list, when user selects a speed
 *  dial entry to replace.
 */

@message void MSG_SPEED_DIAL_DISPLAY_CONTACT(RecordID recordID = cx:dx);
/*
 *  This message is to initalize the controller to display the speed
 *  dial records for a particular contact.
 */

@vardata VMFileHandle	TEMP_SPEED_DIAL_DB_HANDLE;
/*
 *  Internal: This is kept cached so we can tell when the contact DB is
 *  being closed.
 */

@instance dword 	SDCI_recordID;
/*  record ID of the contact we are displaying */

@instance word 		SDCI_fieldID;
/*
 *  the field ID associated with the record ID, that brought up
 *  the speed dial entry list
 */

@instance optr 		SDCI_triggerObject;
/*  the trigger which initiated the speed dial entry list */

@default GI_states = (@default | GS_ENABLED);
@endc

@endlib
    
#endif
