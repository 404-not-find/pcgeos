/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1994 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	contact.goh
 * AUTHOR:	Chris Hawley-Ruppel: 7/13/94
 *
 * DECLARER:	contact
 *
 * DESCRIPTION:
 *	This file defines contact library stuff
 *
 *	$Id: contact.goh,v 1.1 97/04/04 15:53:44 newdeal Exp $
 *
 ***********************************************************************/
@optimize
@deflib contact

@include <Objects/gInterC.goh>
@include <Objects/gTextC.goh>
@include <Objects/gViewC.goh>

#define HINT_INTERACTION_NOT_FULL_SCREEN    HINT_UNUSED_G

typedef word RecordIndex;

/* Document types.   Not yet used for anything. */
typedef enum {
	KDT_SM,
	KDT_FAX,		
	KDT_TEXT	
} KDocumentType;


/* Action types.   These are currently only used when getting phone numbers. */
typedef enum {
	KAT_SM,
	KAT_FAX,
	KAT_PHONE,	
	KAT_TERMINAL,	
	KAT_TELNET,	
	KAT_GOPHER,
	KAT_DTMF
} KActionType;

typedef enum {
    	ST_FAX,
	ST_SMS,
	ST_EMAIL,
	ST_CALL,
	ST_FILE,
	ST_PRINT
} SendType;

typedef struct {
    FileLongName    FNI_fname;
    GenFilePath	    FNI_path;
} FileNameInfo;

/****************************************************************************/

@class ContactClass, GenControlClass;


/* Controller flags for ContactClass */
typedef WordFlags CFeatures;
#define CF_SEARCH		0x02
#define CF_CHOOSE_CARD_PHONE	0x01

#define	C_DEFAULT_FEATURES  CF_SEARCH



#define MAX_NUM_NAME_RECORD_CHARS		39
#define MAX_NUM_ADDR_RECORD_CHARS		59
#define MAX_NUM_PHONE_RECORD_CHARS		19
#define MAX_NUM_NOTES_RECORD_CHARS		200
#define MAX_NUM_SMS_RECORD_CHARS		39
#define MAX_NUM_EMAIL_RECORD_CHARS		39
#define MAX_NUM_DTMF_RECORD_CHARS		39

typedef char ContactNameString[MAX_NUM_NAME_RECORD_CHARS+1];
typedef char ContactAddrString[MAX_NUM_ADDR_RECORD_CHARS+1];
typedef char ContactPhoneString[MAX_NUM_ADDR_RECORD_CHARS+1];
typedef char ContactNotesString[MAX_NUM_NOTES_RECORD_CHARS+1];

/* Structure of a card, not yet decided. */
typedef struct {
	ContactNameString CE_name;
	ContactNameString CE_company;
} CardEntry;


@message Boolean MSG_CONTACT_GET_CUR_CARD(CardEntry *card = cx:dx) = carry;
@message Boolean MSG_CONTACT_FIND_CARD(CardEntry *card = cx:dx) = carry;

typedef struct {
	ContactNameString NPP_name;
	ContactNameString NPP_company;
	ContactPhoneString NPP_phone;
} NamePhoneParams;

@prototype void GET_CALL_INFO(MemHandle	namePhoneParams=bp);

@message Boolean MSG_CONTACT_CHOOSE_CARD_PHONE(Message message = cx,
					     SendType sendType = bp);
/*
 * Prompts the user to select a phone number from the available numbers for
 * the selected card
 *
 * Pass:	Message message -- message to send out if user selects "send"
 *	    	    	(message of type GET_CALL_INFO)
 * 		SendType sendType - type of call to display
 * Return:	nothing
 */


@message void MSG_CONTACT_CARD_PHONE_SELECTED(word selection=cx);
/*
 * Internal message sent to contact object when the user selects "send" or
 * "close" in the "Choose card phone" dialog
 *
 * Pass:    	word selection - index of selected item in the list
 */

@message void MSG_CONTACT_DIAL_BY_HAND(Message message = cx,
					     SendType sendType = bp);
/*
 * Chooses a phone number by letting the user dial by hand.
 *
 * Pass:	Message message -- message to send out if user selects "send"
 *	    	    	(message of type GET_CALL_INFO)
 * 		SendType sendType - type of call to display
 * Return:	nothing
 */
@message void MSG_CONTACT_DIAL_BY_HAND_CANCEL();
@message void MSG_CONTACT_DIAL_BY_HAND_CALL();
/*
 * Internal messages sent to the contact object when the user selects "call" or
 * "cancel" in the "Dial by hand" dialog
 */

@message void MSG_CONTACT_GET_RECENT_CALL(Message message = cx,
					     SendType sendType = bp);
/*
 * Chooses a phone number from the recent calls list, after prompting the user
 * for the appropriate things.
 *
 * Pass:	Message message -- message to send out if user selects "send"
 *	    	    	(message of type GET_CALL_INFO)
 * 		SendType sendType - type of call to display
 * Return:	nothing
 */

@message void MSG_CONTACT_RECENT_CALL_SELECTED(word selection=cx);
/*
 * Internal message sent to contact object when the user selects "send" or
 * "close" in the recent calls dialog.
 *
 * Pass:    	word selection - index of selected item in the list
 */

@message void MSG_CONTACT_RECENT_CALL_CLEAR_ALL_LISTS();
/*
 * Internal message sent to contact object when the user selects 
 * "clear all call lists" in the recent calls dialog.
 *
 * Pass:    	nothing
 */

@message void MSG_CONTACT_RECENT_CALL_CLEAR_THIS_LIST();
/*
 * Internal message sent to contact object when the user selects 
 * "clear this call list" in the recent calls dialog.
 *
 * Pass:    	nothing
 */

@message Boolean MSG_CONTACT_GET_VOICE_MAIL_NUMBER(
		NamePhoneParams *retParams = cx:dx, 
		KActionType action = bp) = carry;
/*
 * Returns the voice mail number.
 *
 * Pass:	NamePhoneParams *cardInfo -- place to put name and phone
 *				(name filled in with "Voice Mail")
 * 		KActionType action -- planned action, for use in choosing phone
 * Return:	Boolean -- FALSE if successful, TRUE if error or user cancel
 */

@message void MSG_CONTACT_QUERY_NAME(optr list = cx:dx, word entry = bp);
@message void MSG_CONTACT_SEARCH_TEXT_TIMEOUT_MSG();
@message RecordIndex MSG_CONTACT_GET_CUR_SELECTION() = ax;
/* Returns the index of the selected record, or GIGS_NONE if no selection */
   
@message void MSG_CONTACT_STATUS_MSG();
@message void MSG_CONTACT_CHOOSE_CARD_PHONE_QUERY_NUMBER(optr list = cx:dx, word entry = bp);
@message void MSG_CONTACT_SEARCH_TEXT_LOST_FOCUS();
/*
 * Internal message sent to the controller when the search text has lost the
 * focus
 */

typedef struct {
    	optr 	    CDI_dialog;
	SendType    CDI_type;
	Message	    CDI_msg;
	RecordIndex CDI_record;
} CallDialogInfo;
@vardata CallDialogInfo TEMP_RECENT_CALL_DIALOG_INFO;
@vardata CallDialogInfo TEMP_CHOOSE_CARD_PHONE_DIALOG_INFO;
@vardata CallDialogInfo TEMP_DIAL_BY_HAND_DIALOG_INFO;
@vardata ChunkHandle	ATTR_CONTACT_LIST_MONIKER;
@vardata Message	ATTR_CONTACT_LIST_STATUS_MSG;
@vardata SendType	ATTR_CONTACT_LIST_CALL_TYPE;
@vardata Message	ATTR_CONTACT_LIST_CALL_MSG;

@instance ChunkHandle CI_searchResult;
@instance word CI_timerID = 0;
@instance TimerHandle CI_timerHandle = 0;
@instance word CI_curItem = 0;
@default GI_states = (@default | GS_ENABLED);

@endc

@class ContactRecordManagerClass, GenControlClass;

@message void MSG_CONTACT_RECORD_MANAGER_CREATE_NEW_RECORD();
/* Starts the creation of a new record in the database */

@message void MSG_CONTACT_RECORD_MANAGER_DELETE_SELECTED_RECORD();
/* Deletes the selected record, after confirming with the user */

@message void MSG_CONTACT_RECORD_MANAGER_EDIT_SELECTED_RECORD();
/* Brings up the data from the currently selected record for editing */

@message void MSG_CONTACT_RECORD_MANAGER_OPEN_RECORD(RecordIndex recordIndex = cx);
/* Internal message - brings up the passed record for editing */

@message void MSG_CONTACT_RECORD_MANAGER_CLOSE_FORM();
/* Internal message that closes the dialog box */

@message void MSG_CONTACT_RECORD_MANAGER_INITIATE_ADD_FIELD();
/* Brings up a list of fields which can be added */

@message void MSG_CONTACT_RECORD_MANAGER_DELETE_FIELD();
/* Deletes the currently selected field */

@message void MSG_CONTACT_RECORD_MANAGER_UPDATE_FIELDS(ContactRecordManagerState fieldsToUpdate = cx);
/* Internal message - updates the usable/not-usable state of the fields */

@message void MSG_CONTACT_RECORD_MANAGER_UPDATE_CONTACT_FILE(RecordIndex modifiedItem = cx, Message msgToSend = dx);
/* Internal message - writes data to the contact file and sends a notification
 * to the contact lists */

@message void MSG_CONTACT_RECORD_MANAGER_ENTER_EDIT_FIELD_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_EXIT_EDIT_FIELD_MODE();
/* Internal messages - used to put the dialog box into/out of
 * "edit field mode" */

@message void MSG_CONTACT_RECORD_MANAGER_ENTER_CONTACT_INFO_MODE();
@message void MSG_CONTACT_RECORD_MANAGER_EXIT_CONTACT_INFO_MODE();
/* Internal messages - used to put the dialog box into/out of
 * "get contact info mode" */

@message void MSG_CONTACT_RECORD_MANAGER_CLOSE_RECORD();
/* Saves all the changes for the current record, possibly prompting the user
 * if the record is marked "secret" */

@message void MSG_CONTACT_RECORD_MANAGER_LIST_ITEM_SELECTED(word selection = cx, word numSelections = bp, word flags = dx);
/* Internal message sent to the record manager when the selection in the
 * contact list changes */

typedef enum {
    CSS_NOT_SECRET,
    CSS_SECRET
} ContactSecretStatus;
@message void MSG_CONTACT_RECORD_MANAGER_SET_SECRET_STATUS(ContactSecretStatus status = cx);
/* Internal message - Sets the secret status for the current record */

@message void MSG_CONTACT_RECORD_MANAGER_SET_SPEED_DIAL_LOCATION(word location = cx);
/* Internal message - Sets the speed dial location of the current record */

@message void MSG_CONTACT_RECORD_MANAGER_OPEN_SELECTED_RECORD_CONTACTS();
/* Internal message - displays contacts for the selected person */

@message void MSG_CONTACT_RECORD_MANAGER_OPEN_GENERAL_LOG();
/* Internal message - displays all contacts */

typedef WordFlags ContactRecordManagerState;
#define	CRMS_COMPANY	    	0x8000
#define    CRMS_NAME	    	0x4000
#define    CRMS_ADDRESS	    	0x2000
#define    CRMS_CITYSTATE   	0x1000
#define    CRMS_PHONE	    	0x0800
#define    CRMS_FAX 	    	0x0400
#define    CRMS_CELLPHONE   	0x0200
#define    CRMS_SMS 	    	0x0100
#define    CRMS_EMAIL	    	0x0080
#define    CRMS_DTMF	    	0x0040
#define    CRMS_SECRET	    	0x0020

#define    CRMS_CREATING_RECORD	0x0002
#define    CRMS_DELETING_FIELD	0x0001

typedef WordFlags ContactRecordManagerFeatures;
#define	CRMF_EDIT   	0x0004
#define	CRMF_DELETE   	0x0002
#define	CRMF_CREATE_NEW	0x0001

@instance ContactRecordManagerState CRMI_state;	
@instance RecordIndex	CRMI_recordNum;

@endc
/****************************************************************************/

@class KFileSelectorClass, GenFileSelectorClass;

/* Nokia document dirs.   These can be used with KFileSelector class to
 * help hide the actual directory paths from the applications.  */

typedef enum {
    	KDD_NONE,
	KDD_WRITTEN_NOTES,
	KDD_RECEIVED_FAXES,
	KDD_RECEIVED_SM,
	KDD_FETCHED_INTERNET_FILES,
	KDD_SENT_MESSAGES	
} KDocumentDir;

@message void MSG_KFS_SET_PATH(KDocumentDir dir = cx);
/*
 * Set the currently opened document directory, closing the current one.
 *
 * Pass:	KDocumentDir dir -- directory to open.
 * Return:	nothing
 */

@message KDocumentDir MSG_KFS_GET_PATH() = cx;
/*
 * Get the currently opened document directory.
 *
 * Pass:	nothing
 * Return:	KDocumentDir -- currently opened directory
 */

@message FileHandle MSG_KFS_OPEN_CUR_FILE(char *fname = cx:dx) = ax;
/*
 * Use this to open the currently selected file or directory.   If it's a
 * file, fname is filled in with its name, and the file handle of the opened
 * file is returned.   
 *
 * Pass:	char *fname -- buffer to hold opened file name
 * Return:	FileHandle -- file handle of newly opened file, if any
 *			      zero if directory, or no selection, or error	
 */

@message Boolean MSG_KFS_DELETE_FILE(FileHandle fhan = cx) = carry;
/*
 * Use this to delete a file.  Must already have been closed.
 *
 * Pass:	FileHandle fhan -- opened file
 * Return:	Boolean -- TRUE if error occurred deleting the file
 *			   (Error from ThreadGetError?)
 */

@vardata KDocumentDir ATTR_KFS_DOCUMENT_DIR;

@endc

/****************************************************************************/

@class SMSEditClass, GenControlClass;

#define MAX_SMS_TEXT_SIZE	160

@default GI_states = (@default | GS_ENABLED);

@message Boolean MSG_SMS_EDIT_CREATE_NEW() = carry;
/*
 * Create a fresh SMS file, presumably assigning a suitable name based
 * on the current date and time.
 *
 * Pass:	nothing
 * Return:	Boolean -- TRUE if problem creating the file
 *			   (Error from ThreadGetError?)
 */

/* @message Boolean MSG_SMS_EDIT_OPEN_FILE(char *fname = cx:dx, 
					FileHandle fhan = bp) = carry; */

@message void MSG_SMS_EDIT_OPEN(FileNameInfo *ptr = cx:dx);
/*
 * Take the file opened in fhan, and use it to start editing the SMS message.
 * The file may be an SMS or written note.
 *
 * Pass:	char *fname -- filename, used for display purposes
 *		FileHandle fhan -- file handle
 * Return:	Boolean -- TRUE if problem opening the file
 *			   (Error from ThreadGetError?)
 */

@message Boolean MSG_SMS_EDIT_CLOSE() = carry;
/*
 * Close the currently opened file.
 *
 * Pass:	nothing
 * Return:	Boolean -- TRUE if problem saving the file
 *			   (Error from ThreadGetError?)
 */

@message void MSG_SMS_EDIT_SEND_OPTIONS(word sendType = cx);

@message Boolean MSG_SMS_EDIT_SAVE() = carry;
/*
 * Save the currently opened file.
 *
 * Pass:	nothing
 * Return:	Boolean -- TRUE if problem saving the file
 *			   (Error from ThreadGetError?)
 */

@message void MSG_SMS_EDIT_DELETE();

@message FileHandle MSG_SMS_EDIT_GET_FILE_HANDLE() = ax;
/*
 * Return file handle of the currently opened file.
 *
 * Pass:	nothing
 * Return:	FileHandle -- file handle of currently opened file
 *			      (zero if somehow no file is being edited)
 */

@message word MSG_SMS_EDIT_GET_TEXT(char *text = dx:bp) = cx;
/*
 * Gets the SMS text.
 *
 * Pass: 	char *text -- text buffer to fill in, length MAX_SMS_TEXT_SIZE
 * Return:	word -- string length not including null
 */

@message void MSG_SMS_EDIT_SET_TEXT(char *textBuf = dx.bp, 
					 word length = cx);
/*
 * Set the SMS text at once.   Don't know how useful this will be.
 *
 * Pass:	char *textBuf -- buffer for text
 *		word length -- length of text, not including null
 * Return:	nothing
 */

@message void MSG_SMS_EDIT_SET_ADDRESS(NamePhoneParams *params = cx:dx);
/*
 * Set the name and address info, for display on the right side of the 
 * envelope.
 *
 * Pass: 	NamePhoneParams *params -- name and phone info
 * Return:	nothing
 */

@message void MSG_SMS_EDIT_GET_ADDRESS(NamePhoneParams *params = cx:dx);
/* 
 * Get name and phone params.
 *
 * Pass:	NamePhoneParams *params -- pointer to structure to set data
 * Return:	nothing
 */

typedef ByteFlags SMSEditFlags;
#define SMSEF_READ_ONLY		0x16	/* Whether text is readOnly */
#define SMSEF_STAMP		0x08	/* Whether envelope is stamped */
#define SMSEF_POSTMARK		0x04    /* Whether postmarked */
#define SMEEF_SENT		0x02	/* Whether Sent */
#define SMSEF_RECEIVED		0x01    /* Whether receieved.   "From" will
					 * be displayed, rather than "To."
					 */

@message void MSG_SMS_EDIT_SET_FLAGS(SMSEditFlags flagsToSet = cl, 
				     SMSEditFlags flagsToClear = ch);
/* 
 * Set SMS flags.
 *
 * Pass:	SMSEditFlags flagsToSet -- flags to set
 *		SMSEditFlags flagsToClear -- flags to clear
 * Return:	nothing
 */

@message void MSG_SMS_EDIT_SET_TITLE_TEXT(char *title = dx:bp);
/*
 * Sets the title text of the editor w/o affecting the filename
 *
 * Pass:    	char *title - title string
 * Return:  	nothing
 */

@vardata FileLongName ATTR_SMS_EDIT_FILE_NAME;
@vardata GenFilePath ATTR_SMS_EDIT_PATH;

@instance SMSEditFlags SMSEI_flags;		/* Flags */
@instance NamePhoneParams SMSEI_address;	/* Address, for display */
@instance FileHandle SMSEI_fhan;		/* File han of edited file */
@instance ChunkHandle SMSEI_text;		/* Text body, to preserve
						 * state on shutdown. */

@endc

/****************************************************************************/

@class NotesEditClass, GenControlClass;

@default GI_states = (@default | GS_ENABLED);

@message void MSG_NOTES_EDIT_CREATE_NEW();
@message void MSG_NOTES_EDIT_OPEN(FileNameInfo *ptr = cx:dx);
@message void MSG_NOTES_EDIT_SET_FONT(FontID id = cx);
@message void MSG_NOTES_EDIT_SET_SIZE(word pointSize = cx);
@message void MSG_NOTES_EDIT_SEND_OPTIONS(word sendType = cx);
@message void MSG_NOTES_EDIT_SAVE();
@message void MSG_NOTES_EDIT_SET_TEXT_STYLE(word data=cx);
@message void MSG_NOTES_EDIT_DELETE();

@vardata FileLongName ATTR_NOTES_EDIT_FILE_NAME;
@vardata GenFilePath ATTR_NOTES_EDIT_PATH;
@vardata ChunkHandle ATTR_NOTES_EDIT_NOTE_TITLE;
@endc
    
/****************************************************************************/

@class FaxViewerClass, GenViewClass;

/*
 * The following messages are all private to the FaxViewer
 */
@message void MSG_FAX_VIEWER_OPEN(FileNameInfo *ptr = cx:dx);
@message void MSG_FAX_VIEWER_SEND_OPTIONS();
@message void MSG_FAX_VIEWER_DELETE();
@message void MSG_FAX_VIEWER_CHANGE_TRIGGER_SET();
@default GI_states = (@default | GS_ENABLED);

@endc

/****************************************************************************/
/*
@class GreyFrameClass, GenInteractionClass;
*/
/* Grey frame class, used primarily for putting around fancy Responder
 * text objects.
 */
/*
@endc 
*/
/****************************************************************************/

@class TabCompClass, GenGadgetClass;

@default GGI_attrs = @default | GGA_COMPOSITE;

/* TabCompClass, used internally by Rudy and the Contact library to implement
 * tabbed lists.
 */

@message void MSG_TAB_COMP_ITEM_SELECTED(word curOpenTab = cx, 
					 word numTabItems = dx,
					 word curItem = bp);

@instance word TCI_numTabs;
@instance word TCI_curItem;
@instance word TCI_curOpenSection;
@instance word TCI_curNumFiles;

@vardata void TEMP_TAB_COMP_NEEDS_FULL_REDRAW;

@endc

@class TabClass, GenGlyphClass;

/* TabClass, used internally by Rudy and the Contact library to implement
 * tabbed lists.
 */

@endc

@class TabCompParentClass, GenInteractionClass;

/* TabCompParentClass, used internally by Rudy and the Contact library to 
 * implement tabbed lists.
 */

@endc



@class ResponderFileOpenClass, GenControlClass;
typedef WordFlags ResponderFileOpenFeatures;
#define	RFOF_OPEN   	    0x0008
#define	RFOF_CREATE_NEW	    0x0004
#define	RFOF_DELETE 	    0x0002
#define	RFOF_RENAME 	    0x0001

@message void MSG_FILE_OPEN_CONTROL_OPEN();
@message void MSG_FILE_OPEN_CONTROL_CREATE_NEW();
@message void MSG_FILE_OPEN_CONTROL_DELETE();
@message void MSG_FILE_OPEN_CONTROL_RENAME();
@message void MSG_FILE_OPEN_CONTROL_ITEM_SELECTED();
@message void MSG_FILE_OPEN_CONTROL_SET_DIRECTORY(KDocumentDir directory = cx);

@instance   KDocumentType RFOI_type = KDT_TEXT;
/* The type of document we'll create when the user selects "create new" */
@default GI_states = (@default | GS_ENABLED);

@vardata KDocumentDir ATTR_FILE_OPEN_DEFAULT_DIRECTORY;

@endc

@endlib


