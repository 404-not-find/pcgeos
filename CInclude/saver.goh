/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  saver.goh
 * FILE:	  saver.goh
 *
 * AUTHOR:  	  Jeremy Dashe: Apr  7, 1993
 *
 * REVISION HISTORY:
 *	Date	 Name	Description
 *	----	 ----	-----------
 *	4/ 7/93	 jeremy	Initial version
 *
 * DESCRIPTION:
 *	Definitions for the generic screen-saver library.
 *
 *
 * 	$Id: saver.goh,v 1.1 97/04/04 15:59:36 newdeal Exp $
 *
 ***********************************************************************/
#ifndef __SAVER_GOH
#define __SAVER_GOH

#include <graphics.h>

@deflib    saver


/***********************************************************************
 
  Library functions provided by the generic saver library
 
 ***********************************************************************/

extern MemHandle
    _pascal SaverCreateLaunchBlock(DiskHandle disk, char *saverPath);

extern MemHandle
    _pascal SaverDuplicateALB(MemHandle blockToDuplicate);


/***********************************************************************

  Random number generator

 ***********************************************************************/

typedef word RandomToken;

extern RandomToken
    _pascal SaverSeedRandom(dword seed, RandomToken rng);

extern word
    _pascal SaverRandom(word maxValue,
			RandomToken rng);

extern void
    _pascal SaverEndRandom(RandomToken rng);


/***********************************************************************

  Password encryption

 ***********************************************************************/

typedef word EncryptionMachineToken;

extern EncryptionMachineToken
    _pascal SaverCryptInit(char *key);

extern void
    _pascal SaverCryptEncrypt(char *textToEncrypt,
			      word numChars,
			      EncryptionMachineToken emt);

extern void
    _pascal SaverCryptDecrypt(char *textToDecrypt,
			      word numChars,
			      EncryptionMachineToken emt);

extern void
    _pascal SaverCryptEnd(EncryptionMachineToken emt);


/***********************************************************************

  SaverVector abstraction

 ***********************************************************************/

typedef enum  {
    SVRT_BOUNCE,	/* Elastic bounce (delta becomes -delta) */
    SVRT_RANDOM,	/* Reflect in a random direction opposite the
			 * current one. */
    SVRT_STOCHASTIC 	/* Choose a random spot within the bounds. */
} SaverVectorReflectType;

typedef struct {
    /* Data for current location */
    word    	SV_point;   	    	/* Current point */
    word	SV_min;	    	    	/* Minimum value for SV_point */
    word	SV_max;	    	    	/* Maximum value for SV_point */
    SaverVectorReflectType SV_reflect; 	/* Type of reflection to happen when
					   SV_point reaches a boundary */
    /* Data for delta value */
    sword	SV_delta;   	    	/* Current delta */
    byte    	SV_deltaBase; 	    	/* Base value for delta. */
    byte	SV_deltaMax; 	    	/* Maximum value for delta (above
					   base) */
} SaverVector;

extern void
    _pascal SaverVectorInit(SaverVector *saverVector,
			    SaverVectorReflectType svrt,
			    word minVal,
			    word maxVal,
			    word deltaMax,
			    word deltaBase,
			    RandomToken rng);

extern Boolean
    _pascal SaverVectorUpdate(SaverVector *saverVector,
			      RandomToken rng,
			      word *newPoint);

/***********************************************************************

  Saver fades and other fun stuff

 ***********************************************************************/

typedef enum {
    SAVER_FADE_SLOW_SPEED,
    SAVER_FADE_MEDIUM_SPEED,
    SAVER_FADE_FAST_SPEED
} SaverFadeSpeed;

typedef WordFlags SaverWipeTypes;
#define SWT_LEFT   0x8	    /* 00000000 00001000  	TRUE: wipe from left  */
#define SWT_TOP    0x4	    /* 00000000 00000100  	TRUE: wipe from top   */
#define SWT_RIGHT  0x2	    /* 00000000 00000010  	TRUE: wipe from right */
#define SWT_BOTTOM 0x1	    /* 00000000 00000001  	TRUE: wipe from bottom*/


extern void
    _pascal SaverFadePatternFade(sword top,
				 sword left,
				 sword right,
				 sword bottom,
				 MemHandle gstate,
				 SaverFadeSpeed fadeSpeed);

extern void
    _pascal SaverFadeWipe(sword top,
			  sword left,
			  sword right,
			  sword bottom,
			  MemHandle gstate,
			  SaverFadeSpeed fadeSpeed,
			  SaverWipeTypes fadeWipe);

typedef enum {
    SAVER_BITMAP_CENTER,
    SAVER_BITMAP_TILE,
    SAVER_BITMAP_UPPER_LEFT,
    SAVER_BITMAP_APPROPRIATE
} SaverBitmapMode;

extern Boolean
    _pascal SaverDrawBGBitmap(MemHandle gstate,
			      word width,
			      word height,
			      SaverBitmapMode saverBitmapMode,
			      FileHandle fileHandle);

/***********************************************************************

  SuperClass of the generic saver thread.

 ***********************************************************************/
@class SaverClass, GenProcessClass;

@endc;

/***********************************************************************

  Other object classes that can be of use.

 ***********************************************************************/

@class SaverApplicationClass, GenApplicationClass;

typedef enum {
    SLM_AUTOMATIC,	/* Lock screen on save whenever
			 * password is valid */
    SLM_MANUAL		/* Lock screen only when Lock
			 * Screen trigger is clicked. */
} SaverLockMode;

typedef ByteFlags SaverInputOptions;
#define SIO_REDUCE_PRIORITY 	0x80 /* 10000000 reduce priority when running */
#define SIO_NEVER_ON	    	0x40 /* 01000000 prevent blanking when in lower
					    	 right */
#define SIO_CONSUME_KEYPRESSES	0x20 /* 00100000 keypresses are consumed when
					    	 unblanking */

typedef ByteFlags SaverWakeupOptions;
#define SWO_MOUSE_MOVE		0x80 /* 10000000 wake on mouse moves */
#define SWO_MOUSE_PRESS		0x40 /* 01000000 wake on mouse presses */
#define SWO_KEY_PRESS		0x20 /* 00100000 wake on keypresses */


typedef ByteFlags SaverModeFlags;
#define SMF_USE_NETWORK	    	0x80 /* 10000000 use network for passwords */
#define SMF_CANT_LOCK		0x40 /* 01000000  no password available, so keep
					    	  Lock Screen triggers
						  unusable*/


typedef WordFlags SaverExtraData;    /* value passed in ALB_extraData */
#define SED_NOT_JUST_TESTING  0x8000 /* if set, saver was started from
				        Preferences and should replace any
				        running one if SED_SAVER_ID is 0. */
#define SED_SAVER_ID	      0x7fff /* ID number for this saver */


@message void MSG_SAVER_APP_START();
@message void MSG_SAVER_APP_STOP();
@message void MSG_SAVER_APP_SET_PARENT_WIN(WindowHandle windowHandle = bp);
@message void MSG_SAVER_APP_SET_BOUNDS(Rectangle *rectangle = ss:bp);
@message void MSG_SAVER_APP_SET_WIN(WindowHandle windowHandle = dx,
				    GStateHandle gstateHandle = bp);
@message void MSG_SAVER_APP_DISPATCH_EVENT_IF_MINE(EventHandle event = cx,
						   word saverID = dx);
@message WinColorFlags MSG_SAVER_APP_GET_WIN_COLOR();


typedef struct {
    optr SWOExposureObject;
    optr SWOInputObject;
} SaverWinOptrs;

@message void MSG_SAVER_APP_GET_WIN_ODS(
				       SaverWinOptrs *saverWinOptrs = axbpcxdx);

typedef struct {
    word SURDiscardAX;	    /* <- just leave blank. */
    word SURDiscardCX;	    /* <- just leave blank. */
    WindowHandle SUROldWindowHandle;
    GStateHandle SUROldGStateHandle;
} SaverUnsetRetVal;

@message Boolean MSG_SAVER_APP_UNSET_WIN(SaverUnsetRetVal *retVal = axcxdxbp,
					 WindowHandle winHandle = dx) = carry;

/* Private messages: */
@message void MSG_SAVER_APP_SAVE_SCREEN_TRIGGER_CREATED(
	 CreateExpressMenuControlItemResponseParams *cemcirp = ss:bp);
@message void MSG_SAVER_APP_LOCK_SCREEN_TRIGGER_CREATED(
	 CreateExpressMenuControlItemResponseParams *cemcirp = ss:bp);

@message void MSG_SAVER_APP_FORCE_SAVE();

@message void MSG_SAVER_APP_FORCE_LOCK();

@message void MSG_SAVER_APP_CHANGE_SAVER_IF_NOT_ME(
					      MemHandle appLaunchBlockHandle);

@message void MSG_SAVER_APP_CHANGE_SAVERS(MemHandle appLaunchBlockHandle);

@message void MSG_SAVER_APP_CHECK_PASSWORD();

@message void MSG_SAVER_APP_LOCK_SCREEN();

@message void MSG_SAVER_APP_UNLOCK_SCREEN();

@vardata dword TEMP_TESTER_OBJECT;

typedef WordFlags SaverStateFlags;
#define SSF_LOCK_SCREEN   0x8000 /* 10000000 00000000 non-zero if user has
				    chosen to lock the screen */
#define SSF_JUST_TESTING  0x4000 /* 01000000 00000000 non-zero if just testing
				    the saver and should exit when done. */
#define SSF_SCREEN_LOCKED 0x2000 /* 00100000 00000000 non-zero if lock-screen
				    dialog is up and must be taken down after
				    screen is saved. */

@instance SaverLockMode	SAI_lockMode = SLM_MANUAL;
@instance SaverInputOptions	SAI_inputOptions = 0;
@instance SaverWakeupOptions	SAI_wakeupOptions = (SWO_MOUSE_MOVE  |
						     SWO_MOUSE_PRESS |
						     SWO_KEY_PRESS);

#define SAVER_MAX_PASSWORD	20   /* Max length of password. */
@instance byte	SAI_password[SAVER_MAX_PASSWORD] =
 	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

@instance word	SAI_passwordLen = 0;		/* # bytes in there. */
@instance WindowHandle SAI_parentWin = NullHandle;
 	    	    	    	    	    	/* handle of window on
						   which to open our main
						   saver window. */
@instance WindowHandle SAI_curWindow = NullHandle;
 	    	    	    	    	    	/* Window in which we're
						   displaying things */
@instance GStateHandle SAI_curGState = NullHandle;
 	    	    	    	    	    	/* Cached graphics state for
						   displaying things */
@instance Rectangle SAI_bounds = {0, 0, 0, 0};

@instance word	SAI_saverID = 0;	    	/* Value passed in
						   ALB_extraData, for use in
						   MSG_SAVER_APP_DISPATCH_-
						   EVENT_IF_MINE */

#define SID_MASTER_SAVER	0		/* if SAI_saverID is 0,
						   this is the master saver.
						   if SAI_saverID is non-zero,
						   we abdicate much of our
						   responsibility. */

#define SID_DYING_SAVER		-1		/* ID used when a master saver
						   gets told to change to
 						   a different master saver.
						   This prevents having two
						   master savers registered
						   at once.. */

typedef struct {
    optr SAEM_emc;		/* the controller itself */
    optr SAEM_saveTrigger;	/* The Save Screen trigger */
    optr SAEM_lockTrigger;	/* The Lock Screen trigger */
} SAExpressMenu;

@instance ChunkHandle	SAI_expressMenus;	/* Array to keep track of
						   express menus so we can
						   set the lock screen
						   trigger usable or not
						   depending on what the
						   user does in Preferences */
@instance SaverStateFlags   SAI_state = 0;
@instance SaverModeFlags    SAI_mode = 0;	/* on the network? */

@instance MemHandle 	    SAI_passwordBlock = NullHandle;
    	    	    	    	    	    	/* password dialog resource */

typedef struct {
    char _near *SAOD_key;		/* pointer to the key to use */
    byte SAOD_size; 	    	        /* size of integer to fetch */
    word SAOD_offset;			/* offset in instance data into which
					   to place the result */
} SAOptionDesc;

typedef struct {
    char _near *SAOT_category;	    	/* category for options */
    word SAOT_numOptions;		/* number of integer options to fetch */
    /*
     * A table of SAOptionDesc[] must follow this declaration.
     * The SAOptionTable is word-aligned for this purpose.
     */
} SAOptionTable;

extern void
    _pascal SaverApplicationGetOptions(SAOptionTable *saoTable,
				       optr saverApplicationObject);

@default GAI_states = @default | AS_NOT_USER_INTERACTABLE | AS_AVOID_TRANSPARENT_DETACH & ~AS_FOCUSABLE & ~AS_MODELABLE;
@default GI_attrs = @default & ~GA_TARGETABLE;
@endc;

#ifdef __HIGHC__

pragma Alias(SaverCreateLaunchBlock, "SAVERCREATELAUNCHBLOCK");
pragma Alias(SaverDuplicateALB, "SAVERDUPLICATEALB");
pragma Alias(SaverSeedRandom, "SAVERSEEDRANDOM");
pragma Alias(SaverRandom, "SAVERRANDOM");
pragma Alias(SaverEndRandom, "SAVERENDRANDOM");
pragma Alias(SaverCryptInit, "SAVERCRYPTINIT");
pragma Alias(SaverCryptEncrypt, "SAVERCRYPTENCRYPT");
pragma Alias(SaverCryptDecrypt, "SAVERCRYPTDECRYPT");
pragma Alias(SaverCryptEnd, "SAVERCRYPTEND");
pragma Alias(SaverVectorInit, "SAVERVECTORINIT");
pragma Alias(SaverVectorUpdate, "SAVERVECTORUPDATE");
pragma Alias(SaverFadePatternFade, "SAVERFADEPATTERNFADE");
pragma Alias(SaverFadeWipe, "SAVERFADEWIPE");
pragma Alias(SaverDrawBGBitmap, "SAVERDRAWBGBITMAP");
pragma Alias(SaverApplicationGetOptions, "SAVERAPPLICATIONGETOPTIONS");

#endif /* __HIGHC__ */

@endlib


#endif /* __SAVER_GOH */
