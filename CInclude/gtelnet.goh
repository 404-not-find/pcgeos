/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	(c) Copyright Geoworks 1996 -- All Rights Reserved
	GEOWORKS CONFIDENTIAL

PROJECT:	PC GEOS
MODULE:		GTelnet application
FILE:		gtelnet.goh

AUTHOR:		Simon Auyeung, Oct 28, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	simon	10/28/96   	Initial version.

DESCRIPTION:
	Defines the external methods (and internal private methods) that
	can be used by other applications to talk to gtelnet application.

	$Id: gtelnet.goh,v 1.1 97/04/04 16:00:18 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@ifndef _GTELNET_GOH_
@define _GTELNET_GOH_

/*****************************************************************************
 *			Constants
 ****************************************************************************/

#define TELNET_DEFAULT_PORT	        (23)

#define GTELNET_GEODE_TOKEN             { {'T', 'E', 'L', 'T'}, \
                                          MANUFACTURER_ID_GEOWORKS }

/*****************************************************************************
 *			Class definition
 ****************************************************************************/

@class	GTelnetClass, GenProcessClass;

/*
 * The result of opening the telnet connection via
 * MSG_GTELNET_OPEN_CONNECTION 
 */ 
typedef enum {
    GTOCS_NORMAL = 0x0,
    /* The connection is successfully established */

    GTOCS_CONNECTION_IN_USE,
    /* The connection fails because there is already a telnet
     * connection going on. */

    GTOCS_OUT_OF_MEMORY,
    /* The connection fails because of no more memory */
    
    GTOCS_OUT_OF_DISKSPACE,
    /* The connection fails because of no more diskspace */

    GTOCS_INTERNAL_ERROR
    /* The connection fails because of internal setup error */
} GTelnetOpenConnectionStatus;

/*
 * Parameter block passed to MSG_GTELNET_OPEN_CONNECTION
 */
typedef struct {
    optr	GTOCP_callbackObject;
    /* The object to send the callback message GTOCP_callbackMessag to
     * and receive the result of the requested connection. Pass
     * NullOptr if no object to notify
     * 
     * The callback message will be in form of 
     * @message void <my message>(GTelnetOpenConnectionStatus 
     *                            status = cx);
     */

    Message     GTOCP_callbackMessage;
    /* The callback message sent to callback object specified in
     * GTOCP_callbackObject. 
     */

    word        GTOCP_accpnt;
    /* The access point to use when opening telnet connection. If PPP
     * is connected, the access point must be the same as the one used
     * by the current connection. 
     */

    word        GTOCP_portNum;
    /* The telnet port to connect to. To use default telnet port, set it
     * to TELNET_DEFAULT_PORT.*/

    TCHAR       *GTOCP_ipAddr;
    /* Null-terminated ASCII resolved or unresolved IP address. The
     * solved IP address is in numeric format like "123.123.11.22"
     * with ASCII characters or like "hello.world.com".
     */

    TCHAR       *GTOCP_connectionName;
    /* Null-terminated connection name to describe the telnet
     * connection host.
     */

} GTelnetOpenConnectionParams;

@message void 
    MSG_GTELNET_OPEN_CONNECTION(@stack GTelnetOpenConnectionParams params);
/*
 * Desc:	Ask GTelnet application to open a telnet connection
 *
 * Pass:
 *	GTelnetOpenConnectionParams params 
 *              Parameters to pass to GTelnet appl to specify the connection
 * Return:
 *	void
 *
 *      The result of the connection is returned in the callback
 *      message specified in GTOCP_callbackObject and
 *      GTOCP_callbackMessage in form of:
 * 
 *      @message void <my message>(GTelnetOpenConnectionStatus 
 *                            status = cx);
 */

@endc	/* GTelnetClass */

@endif  /* _GTELNET_GOH_ */


