/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	Spell Library
 * FILE:	spell.goh
 *
 *
 * REVISION HISTORY:
 *	
 *	Name	Date		Description
 *	----	----		-----------
 *	atw	9/27/92		Initial revision
 *
 *
 * DESCRIPTION:
 *	Contains controllers for the spell library
 *		
 *	$Id: spell.goh,v 1.1 97/04/04 15:58:36 newdeal Exp $
 *
 ***********************************************************************/
@optimize

@deflib	spell

@include <Objects/gCtrlC.goh>
@include <Objects/vTextC.goh>
    
#define SPELL_MAX_WORD_LENGTH	65 	/* 64 chars + 1 null */
    
@class	SpellControlClass, GenControlClass;

typedef ByteEnum SpellCheckStartOption;
#define SCSO_BEGINNING_OF_DOCUMENT 0
#define SCSO_BEGINNING_OF_SELECTION 1
#define SCSO_WORD_BOUNDARY_BEFORE_SELECTION 2
#define SCSO_END_OF_SELECTION 3

typedef WordFlags SpellCheckOptions;

#define SCO_CHECK_SELECTION 0x08
#define SCO_CHECK_NUM_CHARS 0x04
    
@importMessage MetaSearchSpellMessages, void MSG_SPELL_CHECK(@stack
					      optr replyObj,
					      dword numCharsToCheck,
					      SpellCheckOptions options,
					      MemHandle ICbuff);

    	    	    	
typedef struct {
    dword   UWI_numChars;
    word    UWI_charOffset;
    char    UWI_unknownWord[SPELL_MAX_WORD_LENGTH];
} UnknownWordInfo;

@message void MSG_SC_UNKNOWN_WORD_FOUND(UnknownWordInfo *infoPtr = ss:bp);

typedef enum {	/* word */
    SCR_ONE_WORD_CHECKED,
    SCR_SELECTION_CHECKED,
    SCR_DOCUMENT_CHECKED
} SpellCheckResult;

@message void MSG_SC_SPELL_CHECK_COMPLETED(SpellCheckResult result = cx);

/* Internal messages that should not be sent by external objects */    

@message void MSG_SC_UPDATE_REPLACEMENT_WORD();
@message void MSG_SC_SUGGEST_SPELLING();
/*
 * @message void MSG_SC_SUGGEST_SPELLING_FROM_USER_DICT_VIA_QUEUE();
 * @message void MSG_SC_SUGGEST_SPELLING_FROM_USER_DICT();
 */
@message void MSG_SC_CHECK_ENTIRE_DOCUMENT();
@message void MSG_SC_CHECK_TO_END();
@message void MSG_SC_CHECK_SELECTION();

@message void MSG_SC_REPLACE_WORD();
@message void MSG_SC_REPLACE_ALL();

@message void MSG_SC_IGNORE_WORD();
@message void MSG_SC_SKIP_WORD();
@message void MSG_SC_ADD_UNKNOWN_WORD_TO_USER_DICTIONARY();
@message void MSG_SC_SPELL_CHECK_ABORTED();

@message void MSG_SC_GET_IC_BUFF();

@message void MSG_SC_FINISHED_CHECK_SELECTION();

/*
 *	Structure sent out with GWNT_SPELL_ENABLE_CHANGE
 */

typedef struct {
	Boolean	NSEC_spellEnabled;
	/* Non-zero if spell should be enabled */
} NotifySpellEnableChange;

typedef WordFlags SpellFeatures;
#define	SF_CLOSE  	 	    	0x2000
#define	SF_CONTEXT  	 	    	0x1000
#define	SF_SIMPLE_MODAL_BOX 	    	0x0800
#define	SF_SUGGESTIONS		    	0x0400
#define	SF_CHECK_ALL	    	    	0x0200
#define	SF_CHECK_TO_END	    	    	0x0100
#define	SF_CHECK_SELECTION  	    	0x0080
#define	SF_SKIP	    	    	    	0x0040
#define	SF_SKIP_ALL 	    	    	0x0020
#define	SF_REPLACE_CURRENT  	    	0x0010
#define	SF_REPLACE_ALL	    	    	0x0008
#define	SF_ADD_TO_USER_DICTIONARY   	0x0004
#define	SF_EDIT_USER_DICTIONARY	    	0x0002
#define	SF_STATUS   	    	    	0x0001

typedef WordFlags SpellToolboxFeatures;
#define STF_SPELL    0x01

#define SC_DEFAULT_FEATURES   (SF_STATUS | SF_EDIT_USER_DICTIONARY | SF_ADD_TO_USER_DICTIONARY | SF_REPLACE_ALL | SF_REPLACE_CURRENT | SF_SKIP_ALL | SF_SKIP | SF_CHECK_SELECTION | SF_CHECK_TO_END | SF_CHECK_ALL | SF_SUGGESTIONS | SF_CLOSE | SF_CONTEXT)

#define SC_SUGGESTED_INTRODUCTORY_FEATURES (SF_SIMPLE_MODAL_BOX | SF_CONTEXT | SF_SUGGESTIONS | SF_SKIP | SF_REPLACE_CURRENT | SF_STATUS)

#define SC_DEFAULT_TOOLBOX_FEATURES   STF_SPELL

typedef ByteEnum SpellBoxState;
#define     SBS_NO_SPELL_ACTIVE 0
#define     SBS_CHECKING_DOCUMENT 1
#define     SBS_CHECKING_SELECTION 2

@vardata void ATTR_SPELL_CONTROL_INTERACT_ONLY_WITH_TARGETED_TEXT_OBJECTS;
@vardata void ATTR_SPELL_CONTROL_HAS_USER_DICT;  /* Currently Redwood only */
@vardata void ATTR_SPELL_CONTROL_NEVER_PROMPT_FOR_USER_DICT;

    @instance MemHandle	    	    	    SCI_ICBuffHan;
    @instance SpellBoxState    	    SCI_spellState;
    @instance byte	    	    	    SCI_haveSelection;
    @instance dword	    	    	    SCI_charsLeft;
    @instance word  	            SCI_enableFlags;
    @default GII_visibility = GIV_DIALOG;
    @default GCI_output = (TO_APP_TARGET);
    
@endc

@class	EditUserDictionaryControlClass, GenControlClass;

@message void MSG_EUDC_GET_USER_DICTIONARY_LIST_MONIKER();
@message void MSG_EUDC_DELETE_SELECTED_WORD_FROM_USER_DICTIONARY();
@message void MSG_EUDC_ADD_NEW_WORD_TO_USER_DICTIONARY();
@message void MSG_EUDC_UPDATE_SELECTED_WORD();
@message void MSG_EUDC_CLOSE_EDIT_BOX();
@importMessage MetaSearchSpellMessages, void MSG_META_EDIT_USER_DICTIONARY_COMPLETED();
@message void MSG_EUDC_LOAD_DICTIONARY();

typedef WordFlags EditUserDictionaryFeatures;
#define	EUDF_EDIT_USER_DICTIONARY 0x01

typedef WordFlags EditUserDictionaryToolboxFeatures;
#define	EUDTF_EDIT_USER_DICTIONARY 0x01

#define	EUDC_DEFAULT_FEATURES	    	EUDF_EDIT_USER_DICTIONARY
#define	EUDC_DEFAULT_TOOLBOX_FEATURES	EUDTF_EDIT_USER_DICTIONARY

    @instance MemHandle	    EUDCI_userDictList;
    @instance MemHandle	    EUDCI_icBuff;

    @default GII_attrs = (@default | GIA_MODAL);
    @default GII_type = GIT_COMMAND;
    @default GII_visibility = GIV_DIALOG;

@endc;

@class ThesControlClass, GenControlClass;


@importMessage MetaSearchSpellMessages, void MSG_THES_REPLACE_SELECTED_WORDS (@stack
						MemHandle RSWP_string,
						word 	RSWP_numChars);
typedef struct {
	word		RSWP_numChars;
	MemHandle	RSWP_string;
} ReplaceSelectedWordParameters;

@importMessage MetaSearchSpellMessages, void MSG_THES_SELECT_WORD (@stack
						optr	output,
						Message message,
						word	numChars,
						word	type);
typedef struct {
	word	SWP_type;
	word 	SWP_numChars;
	word	SWP_message;
	optr	SWP_output;
} SelectWordParameters;


/* Internal messages that should not be sent by external objects */

@message void MSG_TC_LOOKUP();
@message void MSG_TC_GET_TEXT();
@message void MSG_TC_REPLACE();
@message void MSG_TC_GET_BACKUP_MONIKER();
@message void MSG_TC_GET_SYNONYM_MONIKER();
@message void MSG_TC_GET_MEANING_MONIKER();
@message void MSG_TC_BACKUP_SELECTED();
@message void MSG_TC_MEANING_SELECTED();
@message void MSG_TC_MEANING_DOUBLE_CLICK();
@message void MSG_TC_SYNONYM_SELECTED();
@message void MSG_TC_SYNONYM_DOUBLE_CLICK();
@message void MSG_TC_REPLACE_DONE();
@message void MSG_TC_COPY_DONE();
@message void MSG_TC_SELECT_DONE();

#define MAX_BACKUP_LIST_SIZE 30
#define MAX_ENTRY_LENGTH 26 	/* 25 chars + null */
#define MAX_GRAMMAR_STRING 7

#define MAX_DEFINITIONS 30
#define MAX_DEFINITION_SIZE 200
#define MAX_MEANINGS_ARRAY_SIZE 3000
#define MAX_SYNONYM_SIZE 26
#define MAX_SYNONYMS 80
#define MAX_SYNONYMS_ARRAY_SIZE 500

typedef WordFlags ThesDictFeatures;
#define TDF_THESDICT 0x01
#define TC_GCM_FEATURES TDF_THESDICT

typedef WordFlags ThesDictToolboxFeatures;
#define TDTF_THESDICT 0x01
#define TD_GCM_TOOLBOX_FEATURES TDTF_THESDICT

@vardata void ATTR_THES_CONTROL_INTERACT_ONLY_WITH_TARGETED_TEXT_OBJECTS;

	@instance void *TCI_meanings;
	@instance void *TCI_synonyms;
	@instance void *TCI_grammars;
	@instance void *TCI_backups;
	@instance word	TCI_status;
	@instance TCHAR TCI_lastWord[MAX_ENTRY_LENGTH];
     	@default GCI_output = (TO_APP_TARGET);
	@default GII_visibility = GIV_DIALOG;
	@default GI_states = (@default | GS_ENABLED);

@endc

@endlib
    




