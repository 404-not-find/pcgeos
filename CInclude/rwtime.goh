/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved
	Geoworks Confidential

PROJECT:	Responder
MODULE:		World Time Database Library
FILE:		RWTime.goh

AUTHOR:		Andy Chiu, Nov 23, 1994

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ACJ	11/23/94   	Initial version.
	ACW      3/ 1/95        Revised for Responder.

DESCRIPTION:
	

	$Id: rwtime.goh,v 1.1 97/04/04 15:59:32 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@deflib	rwtime 

#define	RWTIME_RECORD_NOT_FOUND	-1	/* Value when a record was not found */
#define RWTIME_WRITE_FAILED	-1	/* Value when a write failed */

/* These constants do not include the null that is needed to 	*/
/* store the strings as a null terminated.			*/
#define	RWTIME_DB_CITY_MAX_FIELD_LENGTH			32
#define	RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH		32
#define	RWTIME_DB_AREA_CODE_MAX_FIELD_LENGTH		5
#define	RWTIME_DB_GMT_OFFSET_MAX_FIELD_LENGTH		6
#define	RWTIME_DB_LATITUDE_MAX_FIELD_LENGTH		8
#define	RWTIME_DB_LONGITUDE_MAX_FIELD_LENGTH		8
#define	RWTIME_DB_RECORD_MAX_SIZE RWTIME_DB_CITY_MAX_FIELD_LENGTH       + \
                                RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH      + \
                                RWTIME_DB_AREA_CODE_MAX_FIELD_LENGTH 	+ \
				RWTIME_DB_GMT_OFFSET_MAX_FIELD_LENGTH	+ \
				RWTIME_DB_LATITUDE_MAX_FIELD_LENGTH	+ \
				RWTIME_DB_LONGITUDE_MAX_FIELD_LENGTH

#define	RWTIME_DB_MAX_FIELD_LENGTH			64

/* country specific info  */
#define	RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH2		32
#define RWTIME_DB_CAPITAL_MAX_FIELD_LENGTH              32
#define RWTIME_DB_NATIONAL_CODE_MAX_FIELD_LENGTH        5
#define RWTIME_DB_NATIONAL_PREFIX_MAX_FIELD_LENGTH      5
#define RWTIME_DB_COUNTRY_RECORD_MAX_SIZE RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH2 + \
                               RWTIME_DB_CAPITAL_MAX_FIELD_LENGTH             + \
                               RWTIME_DB_NATIONAL_CODE_MAX_FIELD_LENGTH       + \
                               RWTIME_DB_NATIONAL_PREFIX_MAX_FIELD_LENGTH

typedef	struct	{
	char	RWTDR_city[RWTIME_DB_CITY_MAX_FIELD_LENGTH+1];
	char	RWTDR_country[RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH+1];
	char	RWTDR_areaCode[RWTIME_DB_AREA_CODE_MAX_FIELD_LENGTH+1];
/*	char	RWTDR_gmtOffset[RWTIME_DB_GMT_OFFSET_MAX_FIELD_LENGTH+1];*/
	sword   RWTDR_gmtOffset;
	char	RWTDR_latitude[RWTIME_DB_LATITUDE_MAX_FIELD_LENGTH+1];
	char	RWTDR_longitude[RWTIME_DB_LONGITUDE_MAX_FIELD_LENGTH+1];
}RWTDatabaseRecord;


typedef	struct RWTDatabaseCountryRecord	{
	char	RWTDCR_country[RWTIME_DB_COUNTRY_MAX_FIELD_LENGTH2+1];
	char	RWTDCR_capital[RWTIME_DB_CAPITAL_MAX_FIELD_LENGTH+1];
	char	RWTDCR_nationalCode[RWTIME_DB_NATIONAL_CODE_MAX_FIELD_LENGTH+1];
	char	RWTDCR_nationalPrefix[RWTIME_DB_NATIONAL_PREFIX_MAX_FIELD_LENGTH+1];
} RWTDatabaseCountryRecord;
 


#define	RWT_DATABASE_RECORD_SIZE	 sizeof(RWTDatabaseRecord)
#define RWT_DATABASE_COUNTRY_RECORD_SIZE sizeof(RWTDatabaseCountryRecord)
#define FCLOCK_CITY_SPACE_SIZE 		19226
#define FCLOCK_COUNTRY_SPACE_SIZE	10612

/********************************************************/
/* Field Numbers for items in Database Record 		*/
/********************************************************/
#define	RWTIME_CITY_FIELD_NUMBER	        0
#define	RWTIME_COUNTRY_FIELD_NUMBER		1
#define	RWTIME_AREA_CODE_FIELD_NUMBER		2
#define	RWTIME_GMT_OFFSET_FIELD_NUMBER		3
#define	RWTIME_LATITUDE_FIELD_NUMBER		4
#define	RWTIME_LONGITUDE_FIELD_NUMBER		5

/********************************************************/
/* Field Numbers for items in Database Record 		*/
/********************************************************/
#define	RWTIME_COUNTRY_FIELD_NUMBER2		0
#define	RWTIME_CAPITAL_FIELD_NUMBER		1
#define	RWTIME_NATIONAL_CODE_FIELD_NUMBER	2
#define	RWTIME_NATIONAL_PREFIX_FIELD_NUMBER	3
/********************************************************/
/* Search flags for the database			*/
/********************************************************/
typedef WordFlags	RwtimeSearchFlags;
#define RSF_FIND_CASE			0x8000		
#define	RSF_FIND_NOTES			0x4000
#define RSF_ALL_FLAGS 	(RSF_FIND_CASE | RSF_FIND_NOTES)

/********************************************************/
/* Find Flags.  This is different from search flags.    */
/* Search involves looking throughout the whole database*/
/* A find is just looking for a city of a certain name  */
/********************************************************/
typedef WordFlags	RwtimeFindFlags;
#define RFF_CLOSEST_MATCH		0x8000		

#define RFF_ALL_FLAGS 	(RFF_CLOSEST_MATCH)

typedef ByteFlags RWTimePassInitFlags;
#define RPIF_CITY    0x80
#define RPIF_COUNTRY 0x40

typedef WordFlags RWTimeInitFlags;
#define RIF_COUNTRY_CORRUPTED 0x8000
#define RIF_CITY_CORRUPTED    0x4000
#define RIF_COUNTRY_DB_IN_USE 0x2000
#define RIF_CITY_DB_IN_USE    0x1000
#define RIF_OK                0

/********************************************************/
/*	Responder World Time Database API		*/
/********************************************************/

/********************************************************/
/* RWTDatabaseInit					*/
/* Each application that uses the database should       */
/* Initialize it.	 				*/
/*							*/
/*	PASS:	RWTimePassInitFlags	       		*/
/*	RETURN:	RWTimeInitFlags                         */
/********************************************************/
extern RWTimeInitFlags
_pascal RWTDatabaseInit(RWTimePassInitFlags passedFlags);

/********************************************************/
/* RWTDatabaseRestore	         			*/
/* Each application that uses the database should       */
/* Initialize it.	 				*/
/*							*/
/*	PASS:	RWTimeInitFlags                         */
/*	RETURN:	RWTimeInitFlags                         */
/********************************************************/
extern RWTimeInitFlags
_pascal RWTDatabaseRestore(RWTimeInitFlags passedFlags);

/********************************************************/
/* RWTDatabaseCopyBackupFiles	      			*/
/* Each application that uses the database should       */
/* Initialize it.	 				*/
/*							*/
/*	PASS:	RWTimeInitFlags                         */
/*	RETURN:	RWTimeInitFlags                         */
/********************************************************/
extern RWTimeInitFlags
_pascal RWTDatabaseCopyBackupFiles(RWTimeInitFlags passedFlags);

/********************************************************/
/* RWTDatabaseClose					*/
/* Each application that uses the database should be    */
/* closed.                                              */
/*							*/
/*	PASS:	nothing					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern Boolean
_pascal RWTDatabaseClose(RWTimeInitFlags passedFlags);

/********************************************************/
/* RWTDatabaseCreateDB					*/
/* Each application that uses the database should be    */
/* closed.                                              */
/*							*/
/*	PASS:	nothing					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern Boolean
_pascal RWTDatabaseCreateDB();

/********************************************************/
/* RWTDatabaseCountryCreateDB					*/
/* Each application that uses the database should be    */
/* closed.                                              */
/*							*/
/*	PASS:	nothing					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern Boolean
_pascal RWTDatabaseCountryCreateDB();

/********************************************************/
/* RWTDatabaseGetCity     				*/
/*	Gets the City text for the record               */
/*							*/
/*	PASS:	entry number for record in current 	*/
/*		viewpt					*/
/*	RETURN:	TRUE if access failed			*/
/*		cityCountry is filled			*/
/********************************************************/
extern	Boolean	
_pascal	RWTDatabaseGetCity(
			sword	entryNumber,
			char 	*city);

/********************************************************/
/* RWTDatabaseGetGMTOffset				*/
/*	Finds the GMT offset (as a string) for the 	*/
/*	required record					*/
/*							*/
/*	PASS:	entry number for record in current 	*/
/*		viewpt					*/
/*	RETURN:	TRUE if access failed			*/
/*		gmtOffset is filled			*/
/********************************************************/
extern	Boolean	
_pascal	RWTDatabaseGetGMTOffset(
			sword	entryNumber ,
			char	*gmtOffset);

/********************************************************/
/* RWTDatabaseWriteRecord				*/
/*	Writes a record to the database			*/
/*							*/
/*	PASS:	Absoulute entry number for record  	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean	
_pascal	RWTDatabaseWriteRecord(
			sword			entryNumber,
		const	RWTDatabaseRecord	*rwtdbRec);

/********************************************************/
/* RWTDatabaseCountryWriteRecord		       	*/
/*	Writes a record to the database			*/
/*							*/
/*	PASS:	Absoulute entry number for record  	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean	
_pascal	RWTDatabaseCountryWriteRecord(
				      sword		entryNumber,
		const	RWTDatabaseCountryRecord	*rwtdbRec);

/********************************************************/
/* RWTDatabaseReadRecord				*/
/*	Reads a record from the database using		*/
/*	the current viewpt as for entry numbers		*/
/*							*/
/*	PASS:	entry number for record in current 	*/
/*		viewpt					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseReadRecord(
			sword 			entryNumber,
			RWTDatabaseRecord  	*rwtdbRecord);

/********************************************************/
/* RWTDatabaseCountryReadRecord				*/
/*	Reads a record from the database using		*/
/*	the current viewpt as for entry numbers		*/
/*							*/
/*	PASS:	entry number for record in current 	*/
/*		viewpt					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseCountryReadRecord(
			sword 			  entryNumber,
			RWTDatabaseCountryRecord  *rwtdbRecord);

/********************************************************/
/* RWTDatabaseDeleteRecord				*/
/*	Deletes a record using the absolute entry number*/
/*							*/
/*	PASS:	entry number for record 	 	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseDeleteRecord(sword entryNumber);

/********************************************************/
/* RWTDatabaseCountryDeleteRecord	       		*/
/*	Deletes a record using the absolute entry number*/
/*							*/
/*	PASS:	entry number for record 	 	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseCountryDeleteRecord(sword entryNumber);
/********************************************************/
/* RWTDatabaseAddRecord					*/
/*	Append a record to the database.		*/
/*							*/
/*	PASS:	entry number for record 		*/
/*	RETURN:	RWTIME_WRITE_FAILED if write failed	*/
/*		else, record number of item		*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseAddRecord(RWTDatabaseRecord *rwtdbRecord);

/********************************************************/
/* RWTDatabaseCountryAddRecord				*/
/*	Append a record to the database.		*/
/*							*/
/*	PASS:	entry number for record 		*/
/*	RETURN:	RWTIME_WRITE_FAILED if write failed	*/
/*		else, record number of item		*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseCountryAddRecord(RWTDatabaseCountryRecord *rwtdbRecord);

/********************************************************/
/* RWTDatabaseGetAbsoluteRecordNumber			*/
/*	Returns the absolute number for a record	*/
/*	in the database from the viewpt number		*/
/*							*/
/*	PASS:	viewpt entry number for record 		*/
/*	RETURN: absoulute entry number			*/
/*		RWTIME_RECORD_NOT_FOUND if it 		*/
/*		it doesn't exist			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseGetAbsoluteRecordNumber(sword entryNumber);

/********************************************************/
/* RWTDatabaseCountryGetAbsoluteRecordNumber	      	*/
/*	Returns the absolute number for a record	*/
/*	in the database from the viewpt number		*/
/*							*/
/*	PASS:	viewpt entry number for record 		*/
/*	RETURN: absoulute entry number			*/
/*		RWTIME_RECORD_NOT_FOUND if it 		*/
/*		it doesn't exist			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseCountryGetAbsoluteRecordNumber(sword entryNumber);
/********************************************************/
/* RWTDatabaseSetAllViewpt				*/
/*	Sets the current viewpt to include all cities	*/
/* 	and sorts them according to city names		*/
/*							*/
/*	PASS:	nothing					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseSetAllViewpt();

/********************************************************/
/* RWTDatabaseCountrySetAllViewpt			*/
/*	Sets the current viewpt to include all cities	*/
/* 	and sorts them according to city names		*/
/*							*/
/*	PASS:	nothing					*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	Boolean
_pascal	RWTDatabaseCountrySetAllViewpt();

/********************************************************/
/* RWTDatabaseGetViewptRecordCount			*/
/*	Returns the number of cities currently in the 	*/
/*	Viewpt.						*/
/*							*/
/*	PASS:	nothing				 	*/
/*	RETURN:	number of cities			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseGetViewptRecordCount();

/********************************************************/
/* RWTDatabaseCountryGetViewptRecordCount		*/
/*	Returns the number of cities currently in the 	*/
/*	Viewpt.						*/
/*							*/
/*	PASS:	nothing				 	*/
/*	RETURN:	number of cities			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseCountryGetViewptRecordCount();

/********************************************************/
/* RWTDatabaseFindRecord				*/
/*	Returns the entry number in the current viewpt	*/
/*	for the city string you're looking for		*/
/*							*/
/*	PASS:	nothing				 	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseFindRecord(char *citySearchString);
/********************************************************/
/* RWTDatabaseCountryFindRecord				*/
/*	Returns the entry number in the current viewpt	*/
/*	for the city string you're looking for		*/
/*							*/
/*	PASS:	country name   			 	*/
/*	RETURN:	TRUE if access failed			*/
/********************************************************/
extern	sword
_pascal	RWTDatabaseCountryFindRecord(char *countrySearchString);

extern	Boolean
_pascal	RWTDatabaseSetDestinationCity(sword	entryNumber);

extern	sword
_pascal	RWTDatabaseGetDestinationCity();

extern	Boolean
_pascal	RWTDatabaseSetHomeCity(sword	entryNumber);
				
extern	sword
_pascal	RWTDatabaseGetHomeCity();

extern	int
_pascal RWTDatabaseCreateDBRecord (const RWTDatabaseRecord 	*rwtdbRec,
				 char			*dbRecord);
extern	int
_pascal RWTDatabaseCountryCreateDBRecord (const RWTDatabaseCountryRecord   *rwtdbRec,
				 char			*dbRecord);

#if __HIGHC__ 
pragma  Alias(RWTDatabaseCountryCreateDBRecord, "RWTDATABASECOUNTRYCREATEDBRECORD");
pragma  Alias(RWTDatabaseCreateDBRecord, "RWTDATABASECREATEDBRECORD");
pragma	Alias(RWTDatabaseInit, "RWTDATABASEINIT");
pragma	Alias(RWTDatabaseRestore, "RWTDATABASERESTORE");
pragma  Alias(RWTDatabaseClose, "RWTDATABASECLOSE");
pragma  Alias(RWTDatabaseCreateDB, "RWTDATABASECREATEDB");
pragma	Alias(RWTDatabaseGetCity, "RWTDATABASEGETCITY");
pragma	Alias(RWTDatabaseGetGMTOffset, "RWTDATABASEGETGMTOFFSET");
pragma	Alias(RWTDatabaseReadRecord, "RWTDATABASEREADRECORD");
pragma	Alias(RWTDatabaseWriteRecord, "RWTDATABASEWRITERECORD");
pragma	Alias(RWTDatabaseDeleteRecord, "RWTDATABASEDELETERECORD");
pragma	Alias(RWTDatabaseAddRecord, "RWTDATABASEADDRECORD");
pragma	Alias(RWTDatabaseGetViewptRecordCount, "RWTDATABASEGETVIEWPTRECORDCOUNT");
pragma	Alias(RWTDatabaseGetAbsoluteRecordNumber, "RWTDATABASEGETABSOLUTERECORDNUMBER");
/*pragma	Alias(RWTDatabaseSetAllViewpt, "RWTDATABASESETALLVIEWPT");*/
pragma	Alias(RWTDatabaseGetViewptRecordCount, "RWTDATABASEGETVIEWPTRECORDCOUNT");

pragma  Alias(RWTDatabaseCountryCreateDB, "RWTDATABASECOUNTRYCREATEDB");
pragma	Alias(RWTDatabaseCountryReadRecord, "RWTDATABASECOUNTRYREADRECORD");
pragma	Alias(RWTDatabaseCountryWriteRecord, "RWTDATABASECOUNTRYWRITERECORD");
pragma	Alias(RWTDatabaseCountryDeleteRecord, "RWTDATABASECOUNTRYDELETERECORD");
pragma	Alias(RWTDatabaseCountryAddRecord, "RWTDATABASECOUNTRYADDRECORD");
pragma	Alias(RWTDatabaseCountryGetViewptRecordCount, "RWTDATABASECOUNTRYGETVIEWPTRECORDCOUNT");
pragma	Alias(RWTDatabaseCountryGetAbsoluteRecordNumber, "RWTDATABASECOUNTRYGETABSOLUTERECORDNUMBER");
/*pragma	Alias(RWTDatabaseCountrySetAllViewpt, "RWTDATABASECOUNTRYSETALLVIEWPT");*/
pragma	Alias(RWTDatabaseCountryGetViewptRecordCount, "RWTDATABASECOUNTRYGETVIEWPTRECORDCOUNT");
pragma	Alias(RWTDatabaseCountryFindRecord, "RWTDATABASECOUNTRYFINDRECORD");


pragma	Alias(RWTDatabaseFindRecord, "RWTDATABASEFINDRECORD");
pragma	Alias(RWTDatabaseSetDestinationCity, "RWTDATABASESETDESTINATIONCITY");
pragma	Alias(RWTDatabaseGetDestinationCity, "RWTDATABASEGETDESTINATIONCITY");
pragma	Alias(RWTDatabaseSetHomeCity, "RWTDATABASESETHOMECITY");
pragma	Alias(RWTDatabaseGetHomeCity, "RWTDATABASEGETHOMECITY");
pragma	Alias(RWTDatabaseCopyBackupFiles, "RWTDATABASECOPYBACKUPFILES");

#endif 

@endlib


