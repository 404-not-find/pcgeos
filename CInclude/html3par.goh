/***********************************************************************
 *
 * PROJECT:       HTML3Par
 * FILE:          html3par.goh
 *
 * AUTHOR:	  Marcus Gr”ber
 *
 ***********************************************************************/

@include <Objects/vLTextC.goh>    /* VisLargeText definitions */
#include <htmlfstr.h>
#include <awatcher.h>

#define HTML_MAXBUF    256
#define MIME_MAXBUF    32

#define URL_MAX_TYPE            9
#define URL_MAX_SERVER          256
#define URL_MAX_PATH            256
#define URL_MAX_USERNAME        64
#define URL_MAX_PASSWORD        64


/***************************************************************************
 *              Name Pool and Name Association support
 ***************************************************************************/

typedef word NameToken;

#define NAME_POOL_NONE  0

optr _pascal NamePoolCreate(void);
void _pascal NamePoolFree(optr pool);

NameToken _pascal NamePoolTokenizeLen(optr pool, char *name, word len, Boolean required);
/* shorthand form for ASCIIZ strings: */
#define NamePoolTokenize(pool, name, required) NamePoolTokenizeLen(pool, name, 0, required)

NameToken _pascal NamePoolFind(optr pool, char *name);
void _pascal NamePoolUseToken(optr pool, NameToken token);
void _pascal NamePoolReleaseToken(optr pool, NameToken token);
Boolean _pascal NamePoolTestEqual(optr pool, NameToken token, char *str);
Boolean _pascal NamePoolTestEqualI(optr pool, NameToken token, char *str);
void _pascal NamePoolCopy(optr pool, char *buf, word buflen, NameToken token,
  char **ptr);
Boolean _pascal NamePoolIsTokenValid(optr pool, NameToken token, Boolean doCrash) ;

void _pascal NamePoolRenameLen(optr pool, NameToken token, char *name, word len) ;
#define NamePoolRename(pool, token, name) \
            NamePoolRenameLen(pool, token, name, 0)

/*
 * The following function should be applied to every pointer returned by
 * NamePoolCopy() or similar functions after it is no longer needed.
 * It frees the associated memory if the buffer was allocated on the global
 * heap (rather than using the static buffer passed to the function).
 */
void _pascal NamePoolDestroyIfDynamic(void *p);

VMChain _pascal NamePoolVMSave(optr pool, VMFileHandle vmf);
NameToken _pascal NamePoolTokenizeFromVM(optr pool,
  VMFileHandle vmf, VMChain vmc, NameToken vmtok, Boolean required);

optr CopyArrayWithTokens(MemHandle srcMem, ChunkHandle srcArray,
  VMFileHandle vmf, VMChain vmc, optr pool, ...);
void FreeArrayNameTokens(optr array, optr pool, ...);

optr _pascal NameAssocCreate(MemHandle mem, optr namePool);
void _pascal NameAssocFree(optr assoc);
void _pascal NameAssocAssociate(optr assoc, char *str1, char *str2);

/* The pointer returned by this function also has to be passed to
   NamePoolDestroyIfDynaic() when done with. */
Boolean _pascal NameAssocFindAssociation(optr assoc,
  char *key, char *ret, word bufsize, Boolean firstToSecond, char **ptr);


/***************************************************************************
 *              Hypertext Transfer Item
 ***************************************************************************/

/* Data type for length specifications, also allowing for non-pixel values */

typedef word HTMLmultiLength;
    #define HTML_LEN_VALUE_MASK 0x3FFF  /* value of length */
    #define HTML_LEN_UNIT_MASK  0xC000  /* unit of length */
    #define HTML_LEN_PIXEL      0x0000  /*   pixel (...="100") */
    #define HTML_LEN_PERCENT    0x8000  /*   percentage (...="75%") */
    #define HTML_LEN_PROPORTION 0x4000  /*   HTML 4: proportion (...="5*") */
    #define HTML_LEN_VARIABLE   0xC000  /* value: undefined size */

#define HTML_LEN_GET_UNIT(len) ((len) & HTML_LEN_UNIT_MASK)
#define HTML_LEN_GET_VALUE(len) ((len) & HTML_LEN_VALUE_MASK)


/* Manufacturer ID and types to identify variable graphics: */

#define HTML_VARGRAPH_MFGID        16431
#define HTML_VARGRAPH_TYPE_FORM    0x5700       /* form element placeholder */
#define HTML_VARGRAPH_TYPE_IMAGE   0x5701       /* unresolved image */


/*
   Main header block of transfer item, joining a standard text transfer
   item with some additional data.

   Note that all NameTokens used here, as well as those in the arrays
   referenced from the header, refer to the item's local name pool, i.e. they
   have to be transfered into an in-memory pool using NamePoolTokenizeFromVM()
   when needed.
 */

typedef struct {
  VMChainTree HTBH_meta;

  struct {
    WordFlags   HTBHO_fileInfo;
      #define HTML_FI_BACK_COLOR 0x0001 /* set if background color specified */
    NameToken   HTBHO_documentTitle;    /* <TITLE>...</TITLE> */
    NameToken   HTBHO_baseURI;          /* <BASE href=...> */
    ColorQuad   HTBHO_backColor;
  } HTBH_other;

  VMChain       HTBH_transferItem;      /* chain of TIF_TEXT transfer item */
  VMChain       HTBH_arrayBlock;        /* block with additional arrays */
  VMChain       HTBH_namePool;          /* local name pool for this item */
} HypertextTransferBlockHeader;


/*
   Header of array block carrying additional data structures for
   the transfer item. This block may eventually be split up into
   multiple blocks in future versions if size constraints require it.
 */

typedef struct {
  LMemBlockHeader HABH_meta;

  /* used by HTMLTextClass */
  ChunkHandle     HABH_imageArray;
  ChunkHandle     HABH_anchorArray;
  ChunkHandle     HABH_formArray;       /* form element description, if any */
  ChunkHandle     HABH_tableArray;      /* table description, if any */
  ChunkHandle     HABH_cellArray;       /* cell description, if any */
  ChunkHandle     HABH_mapArray;        /* map description, if any */
  ChunkHandle     HABH_metaArray;       /* meta data, if any */

  /* for use by higher level components */
  ChunkHandle     HABH_frameArray;      /* frame set to use, if any */
} HypertextArrayBlockHeader;


/* Element of image array: */

typedef struct {
  dword pos;                            /* starting position of image */
  word len;                             /* length of image placeholder */
  WordFlags flags;                      /* additional flags describing image */
    #define HTML_IDF_RESOLVED   0x0001  /*  - image already loaded */
    #define HTML_IDF_ISMAP      0x0002  /*  - image is a server side map */
    #define HTML_IDF_SUBMIT     0x0004  /*  - image is graphical submit btn */
    #define HTML_IDF_RESOLVING  0x0008  /*  - image has been requested */
    #define HTML_IDF_BROKEN     0x8000  /*  - image could not be resolved */
  XYSize size;                          /* target size, or 0 if not spec'd */
  word formElementIndex;                /* array member index of associated
                                           form element if IDF_SUBMIT is set */
  NameToken imageURL;                   /* name token of image URL */
  NameToken imageALT;                   /* alternative text of image (only if
                                           image has var graphic placeholder) */
  NameToken usemap;                     /* URL of associated map */
  sdword x, y ;                         /* XY position on the document */
} HTMLimageData;

#define TOKEN_FIELDS_IMAGE_DATA \
  word_offsetof(HTMLimageData, imageURL), \
  word_offsetof(HTMLimageData, imageALT), \
  word_offsetof(HTMLimageData, usemap), 0xFFFF

/*
   Overlay for VisTextGraphicVariable.VTGV_privateData[] field of
   a variable graphic serving as placeholder for an unresolved image
   in text transfer item.
 */
typedef struct {
  word HIGV_imageIndex;                 /* index of associated image element */
} HTMLimageGraphicVariable;


/* Element of anchor array: */

typedef struct {
  dword pos;                            /* starting position of anchor */
  word len;                             /* length if HTML_ADF_NAME not set */
  WordFlags flags;
    #define HTML_ADF_NAME 0x0001        /*  - this is a name, not a link */
    #define HTML_ADF_MAP  0x0002        /*  - associated with a map area */
  NameToken linkOrName;                 /* name token of HREF or NAME param */
  NameToken target;                     /* if link: value of TARGET param */
} HTMLanchorData;

#define TOKEN_FIELDS_ANCHOR_DATA \
  word_offsetof(HTMLanchorData, linkOrName), \
  word_offsetof(HTMLanchorData, target), 0xFFFF


/* Element of form element array: */

typedef byte HTMLformType ;

typedef struct {
  dword         HFD_pos;                /* text position */
  HTMLformType  HFD_itemType;           /* type of form element */

    #define HTML_FORM_NONE      0       /* used to convey bad HTML */

    /* The following form elements are stored as variable graphics: */

    #define HTML_FORM_SELECT    1       /* header of selection menu */
    #define HTML_FORM_TEXT      2       /* text entry */
    #define HTML_FORM_TEXTAREA  3       /* multiline text entry */
    #define HTML_FORM_PASSWORD  4       /* password entry (=hidden text) */
    #define HTML_FORM_RADIO     5       /* radio button */
    #define HTML_FORM_CHECKBOX  6       /* checkbox */
    #define HTML_FORM_SUBMIT    7       /* submit button */
    #define HTML_FORM_RESET     8       /* reset button */
    #define HTML_FORM_FILE      9       /* file upload placeholder */

    /* Ordinal number of highest record type which is stored a var graphic: */
    #define HTML_FORM_LAST_EMBED  HTML_FORM_FILE

    /* The following form elements are not embededded as variable graphics,
       but as ISMAP graphics (IMAGE) or not at all (HEADER, HIDDEN, OPTION).
       They have to be processed specially, of course: */

    #define HTML_FORM_HEADER    100       /* global data for entire form */
    #define HTML_FORM_IMAGE     101       /* graphical submit field */
    #define HTML_FORM_HIDDEN    102       /* un-rendered, un-editable text */
    #define HTML_FORM_OPTION    103       /* A single selection in a SELECT
                                             menu. Selections will always
                                             follow the FORM_SELECT record */

  byte          HFD_formNumber;         /* Token to identify elements belonging
                                           to the same form. Elements of one
                                           form are always consecutive. */

  NameToken     HFD_name;               /* Name of element in form, if any */
                                        /*  HEADER: action=... */
                                        /*  OPTION: displayed string */
  NameToken     HFD_value;              /* Initial value or text of element */
                                        /*  FILE: accept=... */
                                        /*  TEXTAREA: contents of token */

  dword         HFD_runtimeState;       /* may be used to hold current
                                           contents at runtime */

  union {                               /* some variable fields */

    struct {
      WordFlags   options;              
        /* method for submitting form */
        #define HTML_OPT_METHOD_MASK       0x000F
        /* default for Action URL: */
        #define HTML_OPT_METHOD_DEFAULT    0x0000
        #define HTML_OPT_METHOD_GET        0x0001
        #define HTML_OPT_METHOD_POST       0x0002

        /* encoding scheme to use */
        #define HTML_OPT_ENCODING_MASK     0x00F0
        /* default for specified method: */
        #define HTML_OPT_ENCODING_DEFAULT  0x0000
        /* application/x-www-form-urlencoded: */
        #define HTML_OPT_ENCODING_URL      0x0010
        /* multipart/form-data: */
        #define HTML_OPT_ENCODING_MULTI    0x0020
    } header;

    struct {                            /* HTML_FORM_SELECT */
      word        size;
      WordFlags   flags;
        #define HTML_SELECT_MULTI 0x0001        /* set: multiple selection */
      word        maxWidth ;            /* Cached width of longest line */
    } select;

    struct {                            /* HTML_FORM_OPTION */
      word        menuElement;          /* Element number of associated menu. */
      WordFlags   flags;
        #define HTML_OPTION_SELECTED 0x0001     /* set: selected by default */
    } option;

    struct {                            /* HTML_FORM_CHECKBOX or ..._RADIO */
      WordFlags   flags;
        #define HTML_BOOLEAN_SELECTED 0x0001    /* set: selected by default */
    } checkbox_radio;

    struct {                            /* HTML_FORM_TEXT and PASSWORD */
      word        size, maxlen;
    } text_password;

    struct {                            /* HTML_FORM_TEXTAREA */
      word        rows, cols;
    } textarea;

    struct {                            /* HTML_FORM_SUBMIT, HTML_FORM_IMAGE */
      Point       rel;                  /* press location */
        #define HTML_SUBMIT_PRESSED 0x0001
      word        flags;
    } submit;

  } HFD_var;

  sword x, y ;                           /* X & Y position in region */
} HTMLformData;

#define TOKEN_FIELDS_FORM_DATA \
  word_offsetof(HTMLformData, HFD_name), \
  word_offsetof(HTMLformData, HFD_value), 0xFFFF

/*
   Overlay for VisTextGraphicVariable.VTGV_privateData[] field of
   form element variable graphics in text transfer item.
 */
typedef struct {
  word HFGV_formElementIndex;           /* array member index of form element */
                                        /* This is the index of an element of
                                           type HTMLformData in the array
                                           pointed to by HABH_formArray. */
} HTMLformGraphicVariable;


/* Element of frame array: */

typedef struct {

  WordFlags       HF_flags;
    #define HTML_FRF_COLS       0x0001  /*  - set if FRAMESET with COLS */
    #define HTML_FRF_SIZE_WIDTH 0x0002  /*  - set if size specifies width */
    #define HTML_FRF_NOBORDER   0x0010  /*  - if frame: has no visible border */
    #define HTML_FRF_SCROLLING  0x0020  /*  - use scrollbars if required */
    #define HTML_FRF_FRAMESET   0x8000  /*  - is start of new frame set */
  HTMLmultiLength HF_size;
  word            HF_level;             /* level of current frame/frame set */
  NameToken       HF_name;              /* name to use for this window */
  NameToken       HF_url;               /* if frame: URL to show */

  /* The following fields are only filled when the structure is used
     for saving the state of a frame set. In this case, the title and
     base URI of the page containing the <FRAMESET> elements must be
     preserved because they cannot be retrieved from the contents of the
     individual frames' HTML files.
     In this case the HF_url field is also valid for a frame set. */

  NameToken       HF_title;             /* title of page */
  NameToken       HF_base;              /* URI base of page */

} HTMLframeRec;

#define TOKEN_FIELDS_FRAME_REC \
  word_offsetof(HTMLframeRec, HF_name), \
  word_offsetof(HTMLframeRec, HF_url), \
  word_offsetof(HTMLframeRec, HF_title), \
  word_offsetof(HTMLframeRec, HF_base), 0xFFFF


/* Elements of table/cell descriptor arrays: */

typedef struct {

  WordFlags HTD_flags;
    #define HTML_TABLE_JUSTIFY_MASK  0x0060  /* Justification (J_LEFT etc.) */
    #define HTML_TABLE_JUSTIFY_OFFSET     5
    #define TABLE_GET_JUSTIFY(flags) \
      (((flags) & HTML_TABLE_JUSTIFY_MASK) >> HTML_TABLE_JUSTIFY_OFFSET)

    #define HTML_TABLE_BACK_COLOR    0x0080  /* table has colored background */

    #define HTML_TABLE_BORDER_MASK   0x0F00  /* border in pixels (0 = none) */
    #define HTML_TABLE_BORDER_OFFSET      8
    #define TABLE_GET_BORDER(flags) \
      (((flags) & HTML_TABLE_BORDER_MASK) >> HTML_TABLE_BORDER_OFFSET)
    #define HTML_TABLE_MAX_BORDER    15      /* maximum border width */

    #define HTML_TABLE_LEVEL_MASK    0xF000  /* table level (0 = outside) */
    #define HTML_TABLE_LEVEL_OFFSET      12
    #define TABLE_GET_LEVEL(flags) \
      (((flags) & HTML_TABLE_LEVEL_MASK) >> HTML_TABLE_LEVEL_OFFSET)
    #define HTML_TABLE_MAX_LEVEL     15      /* maximum table nesting depth */

  HTMLmultiLength HTD_width;            /* table width */
  HTMLmultiLength HTD_cellspacing;      /* spacing around border */
  HTMLmultiLength HTD_cellpadding;      /* spacing within border */

  ColorQuad HTD_backColor;              /* background color of cell, if any */

  byte HTD_rows;                        /* number of rows, columns in table */
  byte HTD_cols;

  word HTD_firstCell;                   /* element index of first cell */

  word HTD_wantedWidth ;
} HTMLtableData;


typedef struct {

  word HCD_table;                       /* element index of associated table */
  ByteFlags HCD_flags;
    #define HTML_CELL_VALIGN_MASK    0x03 /* vertical alignment */
    #define HTML_CELL_VALIGN_TOP     0x00
    #define HTML_CELL_VALIGN_CENTER  0x01
    #define HTML_CELL_VALIGN_BOTTOM  0x02

    #define HTML_CELL_NOWRAP         0x04 /* don't break lines */
    #define HTML_CELL_BACK_COLOR     0x08 /* cell has colored background */

    #define HTML_CELL_PRE_TABLE      0x20 /* Cell is before table and empty */
    #define HTML_CELL_CONTINUE       0x40 /* continues after embedded table */
    #define HTML_CELL_NOT_EMPTY      0x80 /* associated with line break */

  byte HCD_row;                         /* row containing top edge  */
  byte HCD_col;                         /* column containing left edge */
  byte HCD_colspan;                     /* number of rows spanned by cell */
  byte HCD_rowspan;                     /* number of columns spanned */

  HTMLmultiLength HCD_width;            /* width of cell if fixed */
  HTMLmultiLength HCD_height;           /* height of cell if fixed */

  ColorQuad HCD_backColor;              /* background color of cell, if any */

  word HCD_minWidth;                    /* minimum required width based on
                                           actual content (pixels) */
  dword HCD_minHeight;                  /* minimum required height based on
                                           actual content (pixels) */
  word HCD_longestLine ;                /* Maximum line (pixels && <0x3FFF) */
    #define HTML_CELL_LONGEST_LINE_LIMIT  0x3FFF

  word HCD_x ;                         /* Current layout of this particular cell */
  dword HCD_y ;
  dword HCD_calcHeight ;
  word HCD_calcWidth ;
  word HCD_nextCellInTable ;
  word HCD_slackHeight ;               /* Amount of height not used in cell */
  word HCD_hardMinWidth ;              /* Width to use if squeezed */
} HTMLcellData;

#define CELL_NEXT_IN_TABLE_UNKNOWN  0xFFFF


/* Element of map array (this is a variable sized array): */

typedef struct {

  NameToken HMD_name;                   /* name of map this item belongs to */
  word HMD_shape;
    #define HTML_MAP_SHAPE_DEFAULT 0
    #define HTML_MAP_SHAPE_RECT    1
    #define HTML_MAP_SHAPE_CIRCLE  2
    #define HTML_MAP_SHAPE_POLY    3

  word HMD_anchor;                      /* element # of associated anchor */

  HTMLmultiLength HMD_coord[1];         /* first coordinate value goes here */

} HTMLmapData;

#define TOKEN_FIELDS_MAP_DATA \
  word_offsetof(HTMLmapData, HMD_name), 0xFFFF


/* Element of meta data array */

typedef struct {

  ByteFlags HMD_flags;
    #define HTML_META_FLAGS_HTTP_EQUIV  0x01    /* name is http-equiv */

  NameToken HMD_name;
  NameToken HMD_content;

} HTMLmetaData;

#define TOKEN_FIELDS_META_DATA \
  word_offsetof(HTMLmetaData, HMD_name), \
  word_offsetof(HTMLmetaData, HMD_content), 0xFFFF


/***************************************************************************
 *              HTML Import
 ***************************************************************************/

typedef int ReadHTML_getc(dword data);  /* callback routine to get one char */

typedef struct {
  VMFileHandle   HE_vmFile;             /* pass: VM file to use */
  WWFixedAsDWord HE_pointSize;
  FontID         HE_plainFont;
  FontID         HE_exampleFont;
  WordFlags      HE_options;
    #include "htmlopt.h"
  optr           HE_namePool;           /* pass: optr to name pool object */
} HTMLextra;

int _pascal ParseHTMLFile(ReadHTML_getc *,dword,HTMLextra *, VMBlockHandle *);
int _pascal ParsePlainFile(ReadHTML_getc *,dword,HTMLextra *, VMBlockHandle *);

#define HFTT_ASSUME_HTML      0
#define HFTT_ASSUME_PLAIN     1

#define HFTT_SOURCE_FILENAME  0
#define HFTT_SOURCE_OPTR      1

int _pascal ParseAnyFile(word fileType, word fileSource, dword data,
  HTMLextra *ext, VMBlockHandle *item, AllocWatcherHandle watcher, dword *p_memUsed);


/***************************************************************************
 *              HTML Export
 ***************************************************************************/

int _pascal CreateHTMLFile(optr, FileHandle out);


/***************************************************************************
 *              URL resolution
 ***************************************************************************/

Boolean _pascal ToolsParseURL(char *url, char *type, char *server, char *path);
char * _pascal ToolsMakeURL(char *type, char *server, char *path, char *url);
char * _pascal ToolsResolvePathname(char *cur, char *new);
int _pascal ToolsResolveRelativeURL(char *cur, char *url);
Boolean _pascal ToolsMakeURLAbsolute(char *cur, char *url, char *urldst);
void _pascal ToolsNormalizeURL(char *url);


/***************************************************************************
 *              Various utility functions
 ***************************************************************************/

void _pascal SysNotifyWithData(void *Ptr, word size, word notificationType,
  word listType);

void _pascal SysNotifyWithData(void *Ptr, word size, word notificationType,
  word listType);

dword _pascal VMChainGetSize(VMFileHandle vmf, VMChain vmc);

/* Two routines to work around the incompatibility between the VMChain
   and LMem mechanisms: VMLockChainifiedLMemBlock() modifies a block which
   was part of a VMChain before to act as a proper LMem block again, while
   VMUnlock() reverts the change and makes the block chainable again. */
void * _pascal VMLockChainifiedLMemBlock(VMFileHandle vmf, VMBlockHandle vmb,
  MemHandle *mh);
void _pascal VMUnlockChainifiedLMemBlock(MemHandle mh);

DiskHandle _pascal ToolsParseDiskOrStandardPath(char **p);
word _pascal ToolsStringSectionFindKey(char *section, char *key,
  char *subKey, char *value, word bufSize, Boolean mapLeftToRight);
optr _pascal ToolsFormatMessage(optr msg,char *res);
char * _pascal ToolsFindExtension(char *p);
char * _pascal xstrncpy(char *dst, char *src, word size);
void _pascal DebugDialogPrintf(char *fmt, ...);
char * _pascal GetNthFromList(char *list, word n, Boolean whiteDel, word *size);


/***************************************************************************
 *              HTML-aware Text Object class
 ***************************************************************************/

/* Margin (in 1/72") to be left above and below the page in printouts */
#define HTML_TEXT_ORNAMENT_MARGIN 30


@class HTMLTextClass, VisLargeTextClass;

  @default VTI_features = @default | VTF_TRANSPARENT;
  @default VTI_state = @default | VTS_SELECTABLE | VTS_TARGETABLE;
  @default VLTI_displayMode = VLTDM_PAGE;
  @default VLTI_attrs = VLTA_EXACT_HEIGHT;

  @instance WordFlags      HTI_state = HTS_VIEW_NOT_OPENED;

    /* a change to the wash color was made, but not yet rendered: */
    #define HTS_WASH_COLOR_SUSPENDED    0x0001

    /* set whenever something may have caused a change to the table layout
       without fully redrawing / reformatting: */
    #define HTS_LAYOUT_DIRTY            0x0002

    /* required to delay init reformatting until view size known: */
    #define HTS_VIEW_SUSPENDED_FOR_OPEN 0x2000
    #define HTS_VIEW_NOT_OPENED         0x4000

    /* part of section-delete workaround: */
    #define HTS_DELETING                0x8000

  @instance optr           HTI_pageSizeControlOD;

  @instance optr           HTI_imageArray;
  @instance optr           HTI_anchorArray;
  @instance optr           HTI_formArray;
  @instance optr           HTI_tableArray;
  @instance optr           HTI_cellArray;
  @instance optr           HTI_mapArray;

  @instance VMChain        HTI_backgroundGString = 0;
  @instance optr           HTI_myView = NullOptr;
  @instance XYSize         HTI_backgroundSize = {0,0};
  @instance optr           HTI_namePool = NullOptr;
  @instance sword          HTI_drawingOn = 0    ;  /* >=0 is on, <0 is off */

  @message void MSG_HTML_TEXT_INIT_STORAGE(VMFileHandle fileHan);
  @message void MSG_HTML_TEXT_DEINIT_STORAGE();
  @message void MSG_HTML_TEXT_DEINIT_EXTRA();

  @message word MSG_HTML_TEXT_LINK_FROM_POS(dword pos, word mode);
    #define HTML_CHP_EXACT        0
    #define HTML_CHP_PREVIOUS     1
    #define HTML_CHP_NEXT         2
  @message void MSG_HTML_TEXT_HIT_FROM_COORD(LargeMouseData *lmd,
    dword *posret, Point *relret, word *link, word *formElement, word *image);
  @message word MSG_HTML_TEXT_LINK_FROM_MAP(HTMLimageData *img, Point *rel);
  @message void MSG_HTML_TEXT_SELECT_LINK(word link);

  @message void MSG_HTML_TEXT_NEXT_HOTSPOT();
  @message void MSG_HTML_TEXT_PREV_HOTSPOT();
  @message Boolean MSG_HTML_TEXT_EXEC_HOTSPOT();
  @message void MSG_HTML_TEXT_EXEC_NTH_HOTSPOT(word nth);

  /*
   * Messages sent to self when hotspots are touched or executed.
   * Note that these messages have to call the superclass *after* performing
   * their actions to free the name token passed for the link parameters.
   */
  @message void MSG_HTML_TEXT_HOTSPOT_PTR(NameToken link, NameToken target);
  @message void MSG_HTML_TEXT_HOTSPOT_SELECT(
               NameToken link, NameToken target, HTMLFormDataHandle postData);

  @message void MSG_HTML_TEXT_HOTSPOT_NOTIFY(word number, Message msg,
    char *data);
  @message int MSG_HTML_TEXT_GOTO_ANCHOR(NameToken anchor);
  @message word MSG_HTML_TEXT_GET_IMAGE_COUNT();
  @message Boolean MSG_HTML_TEXT_GET_IMAGE(word nImage, HTMLimageData *data);
  @message Boolean MSG_HTML_TEXT_REPLACE_IMAGE(word nImage,
    VisTextGraphic *graphic, VMFileHandle vmf);
  @message Boolean MSG_HTML_TEXT_MARK_IMAGE_RESOLVED(word nImage);
  @message Boolean MSG_HTML_TEXT_MARK_IMAGE_BROKEN(word nImage);
  @message Boolean MSG_HTML_TEXT_TEST_UNRESOLVED_IMAGES();
  @message void MSG_HTML_TEXT_TRACK_REPLACE(dword pos, sword len);

  @message void MSG_HTML_TEXT_RESTORE_CONTENTS(VMFileHandle vmf, VMChain vmc);

  @message void MSG_HTML_TEXT_SET_BACKGROUND(
    VMChain block, VMFileHandle vmf, sword width, sword height);

  @message void MSG_HTML_TEXT_SET_VIEW_OBJ(optr viewObject);
  @message void MSG_HTML_TEXT_SET_NAME_POOL(optr namePool);

  @message word MSG_HTML_TEXT_FORM_ELEMENT_FROM_POS(dword pos) ;
  @message void MSG_HTML_TEXT_FORM_ELEMENT_START(word formElement, Point rel) ;
  @message void MSG_HTML_TEXT_INITIALIZE_FORM_ELEMENTS() ;
  @message void MSG_HTML_TEXT_FORM_RESET(word formNumber) ;
  @message void MSG_HTML_TEXT_FORM_RESET_ELEMENT(word formElement) ;
  @message void MSG_HTML_TEXT_FORM_SUBMIT(word formNumber) ;
  @message char MSG_HTML_TEXT_FORM_APPEND_ELEMENT(
                       MemHandle formString,
                       word formElement,
                       char prefix) ;
  @message Boolean MSG_HTML_TEXT_MARK_IMAGE_RESOLVING(word nImage);
  @message void MSG_HTML_TEXT_RECALC_PAGE();
  @message void MSG_HTML_TEXT_RECALC_COLUMNS();
  @message void MSG_HTML_TEXT_INITIALIZE_LAYOUT() ;
  @message void MSG_HTML_TEXT_DEINITIALIZE_FORM_ELEMENTS() ;   /* Internal */
  @message void MSG_HTML_TEXT_DRAW_TABLE_FRAME(GStateHandle gstate);

  @message void MSG_HTML_TEXT_PRINT_PAGE_ORNAMENTS(GStateHandle gstate,
    word curPage, word numPages, Rectangle *page);
  @message void MSG_HTML_TEXT_DRAWING_ON_OFF(Boolean isOn) ;
  @message void MSG_HTML_TEXT_CALCULATE_TABLE_LAYOUT_INIT() ;
  @message void MSG_HTML_TEXT_CALCULATE_TABLE_LAYOUT_FINISH() ;
  @message word MSG_HTML_TEXT_RESOLVE_LAYOUT() ;
  @message void MSG_HTML_TEXT_ADJUST_REGION_WIDTHS() ;

  @message void MSG_HTML_TEXT_SET_PAGE_SIZE_CONTROLLER(optr controller) ;
@endc;
