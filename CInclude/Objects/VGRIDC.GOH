/***************************************************************************
 *  FILE:  VGridC.goh
 ***************************************************************************/

/*
       VisGridClass:

       The VisGridClass object is used when the programmer wants a grid
       of visible squares to appear on the screen and be selectable.
       The main feature that makes the grid object so useful is that it
       is,
           1) Easy to configure
           2) Easy to change the size of a column or row
           3) Easy to add new columns or rows
           4) Interfaces nicely to the calling routines to draw the cells
           5) A small object that takes up very little memory.

       With this in mind, the grid object capitalizes on making sure
       it uses as little memory as possible and lets the user of the object
       makes all the major decisions about data to show.

       To setup the object, just put the VisGrid in any VisTree.
       For static setups, the easiest method is to initialize
       ATTR_VIS_GRID_INITIAL_WIDTHS to point to a zero terminated
       list of words specifying the column widths.  This can be done
       with rows too with ATTR_VIS_GRID_INITIAL_HEIGHTS.  However, the
       VisGrid object can exist with now rows and columns if necessary.
       Rows are and columns are usually added by MSG_VIS_GRID_ADD_COLUMN
       and MSG_VIS_GRID_ADD_ROW.  The VisGrid object always resizes
       appropriately as necessary.

       Cells are referenced by index.  Index go from 0 to N-1
       columns/rows.  In many cases the constant VIS_GRID_LOCATION_PAST_END
       can be used to specify ranges of cells that go off the end.

       When drawing is required, first the default grid is drawn.  A rim
       is drawn around the whole grid, but its width and color can be
       changed as desired (see VGI_rimColor and VGI_rimWidth).  The
       dividers between cells can have any desired width, but are solid
       with this current implementation.  (see VGI_dividerColor and
       VGI_dividerWidth).  The background color is provided in
       VGI_backgroundColor.  The programmer that uses class will specify
       a destination object (VGI_destination) and a message of type
       VIS_GRID_DRAW_CELL.  When drawing a cell, the method will receive
       a gstate that has been nicely setup for easy drawing.  A clipping
       rectangle has been put in place around the cell and the top left
       coordinate of the cell is set to (0,0).

       The Grid also contains a currently selected cell (usually drawn
       in a different color, but is up to the user).  If a
       VIS_GRID_DRAW_CELL message receives the flag
       GRID_DRAW_FLAG_SELECTED, the current cell is the selected cell
       and has already been drawn differently with the background
       color in VGI_selectionBackgroundColor.  It is up to the method
       to determine if different colors will be used.

       The selected cell will be moved around automatically if keyboard
       events are received.  Supported are:  up, down, left, right,
       home, end, tab, shift-tab.  Messages
       MSG_VIS_GRID_SELECT_CELL_MOVE_... can be used to manually
       move the selection cell around.  You can jump directly to cell
       by calling MSG_VIS_GRID_SELECT_CELL.

       One of the not so easy to notice features of the VisGridClass is
       the way it can be suspended and unsuspended.  Calling
       MSG_META_SUSPEND before doing a large number of changing can
       be very useful in keeping the grid object from overly flashing.
       All drawing is delayed until an appropriate MSG_META_UNSUSPEND
       occurs.  Calls to MSG_META_SUSPEND is cumulative, so make sure
       you pair them off.  In some of the methods of VisGridClass, SUSPEND
       is already called to optimize the Grid's actions.

       Note that this version of the VisGrid class object does not allow
       editing of the cells (unless you get creative).  The subclass
       VisTextGridClass is most likely used for that case.
*/

/*---------------------------------------------------------------------*/
@class VisGridClass, VisCompClass ;
        typedef word VisGridIndex ;
        #define VIS_GRID_LOCATION_PAST_END    0xFFFF

        #define VIS_GRID_SELECTION_NONE       0xFFFF

        typedef word VisGridPendingActions ;
        #define VIS_GRID_PENDING_RESIZE       0x8000
        #define VIS_GRID_PENDING_INVAL        0x4000
        #define VIS_GRID_PENDING_INVAL_RECT   0x2000

        #define VIS_GRID_DEFAULT_CELL_WIDTH   20
        #define VIS_GRID_DEFAULT_CELL_HEIGHT  12

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_INITIAL_CELLS
 *-------------------------------------------------------------------------
 | Description:
 |    This method resets all the column and row widths to zero or to
 |    those defined in ATTR_VIS_GRID_INITIAL_WIDTHS and ..._HEIGHTS.
 |    All past column and row widths are destroyed.
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_INITIAL_CELLS() ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_ADD_COLUMN
 *-------------------------------------------------------------------------
 | Description:
 |    Like it says, add a new column to the grid.  The new column can be
 |    placed before any of the previously existing columns, or pass
 |    VIS_GRID_LOCATION_PAST_END if you want it appended on the right.
 |
 |    NOTE:  The VisGrid object does no association of columns with any
 |           of the callers data.  Therefore, adding a new column at the
 |           start just shifts the size information down and does not
 |           remember that the second column originally had the first
 |           columns data.  This is managed by the caller.
 | Inputs:
 |    VisGridIndex columnBefore   -- Where to place new column
 |                                   or VIS_GRID_LOCATION_PAST_END to
 |                                   append a new one.
 |    word width                  -- Pixel width of new column.
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_ADD_COLUMN(
                          VisGridIndex columnBefore,
                          word width) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_ADD_ROW
 *-------------------------------------------------------------------------
 | Description:
 |    Creates a new row anywhere in the grid.  Pass
 |    VIS_GRID_LOCATION_PAST_END to append a new row.
 |
 |    NOTE:  The VisGrid object does no association of rows with any
 |           of the callers data.  Therefore, adding a new row at the
 |           start just shifts the size information down and does not
 |           remember that the second row originally had the first
 |           row's data.  This is managed by the caller.
 | Inputs:
 |    VisGridIndex rowBefore      -- Where to place new row
 |                                   or VIS_GRID_LOCATION_PAST_END to
 |                                   append a new one.
 |    word height                 -- Pixel height of new row.
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_ADD_ROW(
                          VisGridIndex rowBefore,
                          word height) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_COLUMN
 *-------------------------------------------------------------------------
 | Description:
 |    Utility method to convert a X coordinate (relative to the top left
 |    of the grid) to a column index (0 to number columns-1).
 | Inputs:
 |    word x                      -- X coordinate relative to left edge
 |                                   of grid.
 | Outputs:
 |    word column                 -- Column index found.  If past right,
 |                                   will return right most column.
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_FIND_COLUMN(word x) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_ROW
 *-------------------------------------------------------------------------
 | Description:
 |    Utility method to convert a Y coordinate (relative to the top
 |    of the grid) to a row index (0 to number rows-1).
 | Inputs:
 |    word y                      -- Y coordinate relative to top edge
 |                                   of grid.
 | Outputs:
 |    word                        -- Row index found.  If past bottom,
 |                                   will return bottom most row.
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_FIND_ROW(word y) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_DELETE_COLUMN
 *-------------------------------------------------------------------------
 | Description:
 |    Delete column from the grid.  This action will shift all the column
 |    widths down and make the grid one less (while correctly updating
 |    the screen).  Incorrect columns are ignored.
 | Inputs:
 |    word column                 -- Column index to delete
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_DELETE_COLUMN(word column) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_DELETE_ROW
 *-------------------------------------------------------------------------
 | Description:
 |    Delete row from the grid.  This action will shift all the row
 |    heights up and make the grid one less (while correctly updating
 |    the screen).  Incorrect rows are ignored.
 | Inputs:
 |    word row                    -- Row index to delete
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_DELETE_ROW(word row) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_COLUMN_X
 *-------------------------------------------------------------------------
 | Description:
 |    Find the pixel X position of the start of the given column.  If
 |    VIS_GRID_LOCATION_PAST_END is given, the pixel position past the last
 |    column is found.
 | Inputs:
 |    word column                 -- Beginning pixel of column to find
 | Outputs:
 |    word                        -- Pixel position found
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_FIND_COLUMN_X(word column) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_FIND_ROW_Y
 *-------------------------------------------------------------------------
 | Description:
 |    Find the pixel Y position of the start of the given row.  If
 |    VIS_GRID_LOCATION_PAST_END is given, the pixel position past the last
 |    row is found.
 | Inputs:
 |    word row                    -- Beginning pixel of row to find
 | Outputs:
 |    word                        -- Pixel position found
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_FIND_ROW_Y(word row) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_COLUMN_WIDTH
 *-------------------------------------------------------------------------
 | Description:
 |    Determine the width of a current column.
 | Inputs:
 |    word column                 -- Column to get width
 | Outputs:
 |    word                        -- Pixel width of column, or 0 if
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_GET_COLUMN_WIDTH(word column) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_ROW_HEIGHT
 *-------------------------------------------------------------------------
 | Description:
 |    Determine the width of a current row.
 | Inputs:
 |    word row                    -- Row to get height
 | Outputs:
 |    word                        -- Pixel hieght of row, or 0 if
 |                                   illegal row
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_GET_ROW_HEIGHT(word row) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_INVALIDATE_CELL_RANGE
 *-------------------------------------------------------------------------
 | Description:
 |    Redraws a whole range of cells.
 | Inputs:
 |    word startColumn, startRow  -- Top left location
 |    word endColumn, endRow      -- Bottom right location
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_INVALIDATE_CELL_RANGE(
                          word startColumn,
                          word startRow,
                          word endColumn,
                          word endRow) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_INVALIDATE_RECTANGLE
 *-------------------------------------------------------------------------
 | Description:
 |    Redraws a rectangular region of the grid using the grid's
 |    coordinates.  If the grid is suspended, all INVALIDATE_RECTANGLE
 |    calls are combined into a bigger invalidation rectangle but does
 |    not occur until unsuspended.
 | Inputs:
 |    Rectangle *p_rect           -- Pointer to rectangle to invalidate
 |                                   (in grid based coordinates)
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_INVALIDATE_RECTANGLE(
                          Rectangle *p_rect) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL
 *-------------------------------------------------------------------------
 | Description:
 |    Changes which cell is selected, correctly undrawing the old location
 |    and redrawing the new location.  If already the current cell,
 |    no action happens.
 |    Pass VIS_GRID_SELECTION_NONE for both row and column to make the
 |    selection disappear.
 | Inputs:
 |    word column, row            -- Cell column and row to select
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_SELECT_CELL(word column, word row) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SELECT_CELL_MOVE_RIGHT ... and
 *-------------------------------------------------------------------------
 | Description:
 |    Select cell to right/left/up/down/home/end of selection.
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_RIGHT() ;
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_LEFT() ;
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_UP() ;
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_DOWN() ;
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_HOME() ;
        @message void MSG_VIS_GRID_SELECT_CELL_MOVE_END() ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_RESIZE_COLUMN
 *-------------------------------------------------------------------------
 | Description:
 |    Changes the pixel width of a given column.
 |
 |    NOTE:  As of 4/16/1999, this does not affect the placement of the
 |           selection.  Unselect and then reselect for now.  LES
 | Inputs:
 |    word column                 -- Column to resize
 |    word size                   -- new pixel width
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_RESIZE_COLUMN(word column, word size) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_RESIZE_ROW
 *-------------------------------------------------------------------------
 | Description:
 |    Changes the pixel height of a given row.
 |
 |    NOTE:  As of 4/16/1999, this does not affect the placement of the
 |           selection.  Unselect and then reselect for now.  LES
 | Inputs:
 |    word row                    -- Row to resize
 |    word size                   -- new pixel height
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_RESIZE_ROW(word row, word size) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SET_DESTINATION
 *-------------------------------------------------------------------------
 | Description:
 |    Declare where messages are go for this grid.
 | Inputs:
 |    optr destination            -- object to receive messages
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_SET_DESTINATION(optr destination) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_SELECTED_CELL
 *-------------------------------------------------------------------------
 | Description:
 |    Get the selected column and row (if any)
 | Inputs:
 |    word *p_column              -- Pointer to place column
 |    word *p_row                 -- Pointer to place row
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_GET_SELECTED_CELL(
                          word *p_column,
                          word *p_row) ;

        typedef word VisGridColorItem ;
        #define VIS_GRID_COLOR_ITEM_BACKGROUND       0
        #define VIS_GRID_COLOR_ITEM_RIM              1
        #define VIS_GRID_COLOR_ITEM_DIVIDERS         2
        #define VIS_GRID_COLOR_ITEM_SELECTION_BACK   3

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_COLOR
 *-------------------------------------------------------------------------
 | Description:
 |    Return a color set being used for the given attribute.
 | Inputs:
 |    VisGridColorItem item       -- Item color type to get
 |    ColorQuad *p_color          -- Color to use
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_GET_COLOR(
                          VisGridColorItem item,
                          ColorQuad *p_color) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SET_COLOR
 *-------------------------------------------------------------------------
 | Description:
 |    Change a color set.
 | Inputs:
 |    VisGridColorItem item       -- Item color type to set
 |    ColorQuad *p_color          -- Color to use
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_SET_COLOR(
                          VisGridColorItem item,
                          ColorQuad *p_color) ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_DESTINATION
 *-------------------------------------------------------------------------
 | Description:
 |    Get who we are talking to
 | Outputs:
 |    optr                        -- Yep, the destination object
 *-----------------------------------------------------------------------*/
        @message optr MSG_VIS_GRID_GET_DESTINATION() ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_DRAW_MESSAGE
 *-------------------------------------------------------------------------
 | Description:
 |    Get what message is sent to the destination to draw one cell.
 | Outputs:
 |    Message                     -- Message to be sent
 *-----------------------------------------------------------------------*/
        @message Message MSG_VIS_GRID_GET_DRAW_MESSAGE() ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_SET_DRAW_MESSAGE
 *-------------------------------------------------------------------------
 | Description:
 |    Set what message is sent to the destination to draw one cell.
 | Inputs:
 |    Message mess                -- Message to be sent
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_GRID_SET_DRAW_MESSAGE(Message mess);

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_NUM_COLUMNS
 *-------------------------------------------------------------------------
 | Description:
 |    Return the number of columns
 | Outputs:
 |    word                        -- Number of columns
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_GET_NUM_COLUMNS() ;

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_GRID_GET_NUM_ROWS
 *-------------------------------------------------------------------------
 | Description:
 |    Return the number of rows
 | Outputs:
 |    word                        -- Number of rows
 *-----------------------------------------------------------------------*/
        @message word MSG_VIS_GRID_GET_NUM_ROWS() ;

        typedef word GridDrawFlags ;
        #define GRID_DRAW_FLAG_SELECTED  0x8000

        typedef word VisGridFlags ;
        #define VIS_GRID_FLAG_INITIAL_CELLS_MADE    0x8000

        @prototype void VIS_GRID_DRAW_CELL(
                            GStateHandle gstate,
                            word column,
                            word row,
                            word width,
                            word height,
                            optr grid,
                            GridDrawFlags flags) ;
        @prototype void VIS_GRID_DRAW_CELL_GROUP(
                            optr visGridObj,
                            word startColumn,
                            word startRow,
                            word endColumn,
                            word endRow) ;
        @default VI_typeFlags = @default | VTF_IS_INPUT_NODE ;
        @default VCI_geoAttrs = @default | VCGA_CUSTOM_MANAGE_CHILDREN ;
        @instance ColorQuad VGI_backgroundColor = { C_YELLOW, CF_INDEX, 0, 0 };
        @instance ColorQuad VGI_rimColor = { C_BLACK, CF_INDEX, 0, 0 } ;
        @instance ColorQuad VGI_innerDividersColor = { C_BLACK, CF_INDEX, 0, 0};
        @instance ColorQuad VGI_selectionBackgroundColor = { C_BLACK, CF_INDEX, 0, 0} ;
        @instance word VGI_dividerWidth = 3 ;
        @instance word VGI_rimWidth = 5 ;
        @instance word VGI_selectionX = VIS_GRID_SELECTION_NONE ;
        @instance word VGI_selectionY = VIS_GRID_SELECTION_NONE ;
        @instance Message VGI_drawMsg = NullHandle ;
        @instance Message VGI_drawGroupMsg = NullHandle ;
        @instance optr VGI_destination = NullHandle ;
        @instance Rectangle VGI_invalRect ;
        @instance VisGridFlags VGI_flags = 0 ;

        /* Internal variables */
        @instance byte VGI_suspendCount = 0 ;
        @instance VisGridPendingActions VGI_pending = 0;

        /* Chunk array of cell widths */
        @instance ChunkHandle VGI_cellWidths = NullHandle ;

        /* Chunk array of cell heights */
        @instance ChunkHandle VGI_cellHeights = NullHandle ;

        /* Enter can be mapped to another key (VC_UP, VC_DOWN, VC_TAB, etc.) */
        /* Use the value of VC_ENTER for no remapping */
        @instance byte VGI_remapEnterKey = VC_ENTER ;

        /* Chunk handle goes to array of words of widths.  Last width
           MUST be zero to termination list */
        @vardata ChunkHandle ATTR_VIS_GRID_INITIAL_WIDTHS ;

        /* Chunk handle goes to array of words of heights.  Last height
           MUST be zero to termination list */
        @vardata ChunkHandle ATTR_VIS_GRID_INITIAL_HEIGHTS ;

    /* Intercepted messages (for support and reference) */

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_KBD_CHAR
 *-------------------------------------------------------------------------
 | Description:
 |    Process one key stroke for the grid (most likely an arrow key)
 |    but call the superclass if it wasn't an arrow/movement key.
 | Inputs:
 |    word character              -- Extended character
 |    word flags                  -- control flags (SHIFT?)
 |    word state                  -- press/release?
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_FUP_KBD_CHAR
 *-------------------------------------------------------------------------
 | Description:
 |    This method is called when a child object (usually a
 |    VisTextGridText object) passes up a keystroke action.
 | Inputs:
 |    word character              -- Extended character
 |    word flags                  -- control flags (SHIFT?)
 |    word state                  -- press/release?
 | Outputs:
 |    Boolean                     -- TRUE if keystroke used.
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_OPEN
 *-------------------------------------------------------------------------
 | Description:
 |    When an object is started up for visibility, the VisGrid will
 |    initialize the chunk arrays that store the column and row sizes.
 |    A call to MSG_VIS_GRID_INITIAL_CELLS will immediately follow.
 | Inputs:
 |    WindowHandle window         -- Passed to superclass, but ignored
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_SUSPEND
 *-------------------------------------------------------------------------
 | Description:
 |    All drawing, updating, and recalculations are put on hold when
 |    suspended.  This makes doing multiple adding/deleting of rows/
 |    columns occur as one action instead of confusing the user.
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_UNSUSPEND
 *-------------------------------------------------------------------------
 | Description:
 |    All pending actions waiting to occur from being suspended are done
 |    immediately when unsuspended.
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_VIS_INVALIDATE
 *-------------------------------------------------------------------------
 | Description:
 |    Invalidates the rectangle around the complete VisGrid object.
 |    If the object is suspended, no action occurs until the object
 |    is unsuspended.
 *-----------------------------------------------------------------------*/

/*-------------------------------------------------------------------------
 | Method:  VisGridClass::MSG_META_START_SELECT
 *-------------------------------------------------------------------------
 | Description:
 |    Message intercepted to handle mouse events that select a cell.
 | Inputs:
 |    MouseReturnParams *retVal   -- Possible flags to return.
 |    sword xPosition             -- x coordinate of mouse click
 |    sowrd yPosition             -- y coordinate of mouse click
 |    word inputState             -- Press/release info
 *-----------------------------------------------------------------------*/

    @endc
    /*---------------------------------------------------------------------*/



/*-------------------------------------------------------------------------
 | Routine:  VisGridUtilityDrawGroup
 *-------------------------------------------------------------------------
 | Description:
 |    A routine that you use to go through all the cells of a given
 |    area in a VisGridClass object and draw the necessary items.
 |    Typically this is called from a VIS_GRID_DRAW_CELL_GROUP routine.
 | Inputs:
 |    optr visGridObj             -- Grid object wanting to be drawn
 |    word startColumn, startRow  -- Upper left corner
 |    word endColumn, endRow      -- Ending lower right corner
 *-----------------------------------------------------------------------*/
void VisGridUtilityDrawGroup(
         optr visGridObj,
         word startColumn,
         word startRow,
         word endColumn,
         word endRow) ;


/***************************************************************************
 *  END OF FILE:  VGridC.goh
 ***************************************************************************/
