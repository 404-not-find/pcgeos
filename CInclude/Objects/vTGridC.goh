/***************************************************************************
 *  FILE:  VTGridC.goh
 ***************************************************************************/

@include <Objects/vGridc.goh>

/*
       VisTextGridClass:

       The VisTextGridClass object provides the true editing features
       of a grid.  It assumes that either a cell has text input, or its
       read only (although you can cheat if you need to).

       A VisTextGridClass is just a VisGridClass that uses a
       VisTextGridTextClass as its editor object.  In short the text object
       attached to the VisTextGridClass is moved over each of the cells
       in the grid to provide input without having to duplicate many
       text objects.

       This is how it works.  By using MSG_VIS_TEXT_GRID_SET_TEXT_OBJECT
       you declare the VisTextGridTextClass (or subclass) to use in
       the vistree.  When you do this, think of the object as a slave
       to the grid object.

       Two types of messages occur Query (load) and Save.  You must use
       MSG_VIS_TEXT_GRID_SET_QUERY_DATA_MSG and
       MSG_VIS_TEXT_GRID_SET_SAVE_DATA_MSG to tell what two messages to
       send to the VGI_destination object (from VisGridClass).

       When a query message occurs, the grid object passes to the user
       method the text object along with cell location (column and row).
       The method that receives this message must either fill the text
       object with the text that is to be viewed.  This method makes
       the system so flexible, you can even change text color/size/style
       and other attributes on the fly.  If you don't want the text object
       to show up there, just return FALSE and the text object will just
       disappear (and the GridClass takes over).

       The user may then make changes to the text object (if it is
       editable) [marking the text as dirty] and the user moves to
       a new location, the save message is called.  The save works in
       reverse as the query message.  It also is passed the text object
       as input and it is through MSG_VIS_TEXT_... calls that you retrieve
       your data and do whatever you wish.

       Arrows keys are handled automatically, but you might want to know
       a few details.  If the text object is allowed to use tabs, then
       tabs will not traverse the grid's cells.  VisTextGridTextClass
       has been optimized with these rules:
           * If any text is selected in the text object, arrow keys
             move the selected cell and don't affect the cursor.
           * If the cell is empty, the arrows keys move the selected
             cell.
           * When a new cell is selected, the new text is ALWAYS fully
             selected.  This makes the user move from cell to cell
             from the first rule until new text is type.
           * If no text is selected, the arrow keys work fine.  However,
             because of how the VisTextClass works, if the user presses
             up and the cursor is on the top line of the text, it will
             go up a cell.  Also happens with down.  Doesn't happen with
             left and right.
           * Text lines can be multiple or single lines.
           * Enter key does nothing

       Remember, all data storing is up to you.  The VisTextGridClass is
       just a front end to help organize it.  Also, if you add and remove
       columns, the columns are only referenced by index.  What this means
       is that if you insert a column at the beginning of a grid, then
       all the column sizes are shifted down and their index change by
       one.  It is up to the calling programmer to keep track of which
       column corresponds to which data.  This is not a spreadsheet object.
*/

    /*---------------------------------------------------------------------*/
    @class VisTextGridClass, VisGridClass ;
/*-------------------------------------------------------------------------
 | Method:  VisTextGridClass::MSG_VIS_TEXT_GRID_SET_TEXT_OBJECT
 *-------------------------------------------------------------------------
 | Description:
 |    Declare which object to use as the text object (must be class or
 |    subclass of VisTextGridTextClass).
 | Inputs:
 |    optr textObj                -- Declared text object
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_TEXT_GRID_SET_TEXT_OBJECT(optr textObj) ;

/*-------------------------------------------------------------------------
 | Method:  VisTextGridClass::MSG_VIS_TEXT_GRID_GET_TEXT_OBJECT
 *-------------------------------------------------------------------------
 | Description:
 |    Tell what is the current text object.
 | Outputs:
 |    optr textObj                -- Declared text object
 *-----------------------------------------------------------------------*/
        @message optr MSG_VIS_TEXT_GRID_GET_TEXT_OBJECT() ;

/*-------------------------------------------------------------------------
 | Method:  VisTextGridClass::MSG_VIS_TEXT_GRID_SET_QUERY_DATA_MSG
 *-------------------------------------------------------------------------
 | Description:
 |    Declare what message to be used when asking for data to be placed
 |    in the text object.
 | Inputs:
 |    Message msg                 -- Message to be called
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_TEXT_GRID_SET_QUERY_DATA_MSG(Message msg) ;

/*-------------------------------------------------------------------------
 | Method:  VisTextGridClass::MSG_VIS_TEXT_GRID_SET_SAVE_DATA_MSG
 *-------------------------------------------------------------------------
 | Description:
 |    Declare what message to be used when asking to save out changed
 |    data from the text object
 | Inputs:
 |    Message msg                 -- Message to be called
 *-----------------------------------------------------------------------*/
        @message void MSG_VIS_TEXT_GRID_SET_SAVE_DATA_MSG(Message msg) ;

        @message void MSG_VIS_TEXT_GRID_SAVE_CELL_IF_DIRTY() ;

        @message void MSG_VIS_TEXT_GRID_HIDE_TEXT() ;

        @message void MSG_VIS_TEXT_GRID_SHOW_TEXT_AT(word column, word row) ;

        @prototype void VIS_TEXT_GRID_QUERY_DATA(
                                 word column,
                                 word row,
                                 optr gridObject,
                                 optr textObject) ;
        @prototype void VIS_TEXT_GRID_SAVE_DATA(
                            word column,
                            word row,
                            optr gridObject,
                            optr textObject) ;

        @instance optr VTGI_textObj = NullHandle ;
        @instance Message VTGI_queryDataMessage = NullHandle ;
        @instance Message VTGI_saveDataMessage = NullHandle ;
    @endc
    /*---------------------------------------------------------------------*/

    /*---------------------------------------------------------------------*/
    @class VisTextGridTextClass, VisTextClass ;
        /* Enter can be mapped to another key (VC_UP, VC_DOWN, VC_TAB, etc.) */
        /* Use the value of VC_ENTER for no remapping */
        @instance byte VTGTI_remapEnterKey = VC_ENTER ;

        @message void MSG_VIS_TEXT_GRID_TEXT_SET_ENTER_REMAP_KEY(byte key) ;

    /* Intercepted methods for reference: */
/*-------------------------------------------------------------------------
 | Method:  VisTextGridTextClass::MSG_META_KBD_CHAR
 *-------------------------------------------------------------------------
 | Description:
 |    Intercepted keyboard command to check first to see if a keyboard
 |    control is occuring or its a something for the text object to use.
 |    If a keyboard control (and text is selected or empty), it passed
 |    on to the parent for processing (via MSG_META_FUP_KBD_CHAR) or
 |    else processed by the text object.
 | Inputs:
 |    word character              -- Extended character
 |    word flags                  -- control flags (SHIFT?)
 |    word state                  -- press/release?
 *-----------------------------------------------------------------------*/
    @endc ;
    /*---------------------------------------------------------------------*/

/***************************************************************************
 *  END OF FILE:  VTGridC.goh
 ***************************************************************************/

