/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		UI Gadgets
FILE:		gadgets.goh

AUTHOR:		Andy Chiu, Jul 14, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	7/14/94   	Initial version.

DESCRIPTION:
	This file contains the definition of the gadgets library.	

	$Id: gadgets.goh,v 1.1 97/04/04 15:52:50 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@deflib	gadgets

#include <localize.h>		/* for various constants */

/********************************
	Structures
********************************/

typedef char	DateTimeBuffer[DATE_TIME_BUFFER_SIZE];

typedef struct _DateStruct {
	word	DT_year;
	byte	DT_month;
	byte	DT_day;		/* day of month (1 .. 31) */
	byte	DT_weekday;	/* day of week (0 .. 6) */
	byte	DT_week;
} DateStruct;

typedef	struct _TimeStruct {
	sbyte	T_hours;
	sbyte	T_minutes;
	sbyte	T_seconds;
} TimeStruct;

typedef struct _StopwatchStruct {
	byte	SW_hours;
	byte	SW_minutes;
	byte	SW_seconds;
	byte	SW_tenths;
} StopwatchStruct;

typedef enum /* word */ {
	DSYTF_APPEND,
	DSYTF_PREPEND
} DSYearTextFormat;

/********************************
	C-only Structures
********************************/

typedef struct _DateParamsStruct {		
        word    _DP_unused;	/* =ax */
        word    DP_year;	/* =cx */
        byte    DP_month;	/* =dl */
        byte    DP_day;		/* =dh */
        word    DP_weekday;	/* =bp */
} DateParamsStruct;

typedef struct _DateActionStruct {
    word DA_year;
    byte DA_month;
    byte DA_day;
} DateActionStruct;

typedef	struct _TimeParamsStruct {
        word    _TP_unused1;	/* = ax */
        byte    _TP_unused2;	/* = cl */
        sbyte   TP_hours;	/* = ch */
        sbyte   TP_minutes;	/* = dl */
        sbyte   TP_seconds;	/* = dh */
        sword   TP_tenths;	/* tenths of a second = bp */
} TimeParamsStruct;

/************************************************************************\
 *			DateSelectorClass				*
\************************************************************************/

@class	DateSelectorClass, GenControlClass;

/********************************
	Messages
********************************/

@message void	MSG_DATE_SELECTOR_GET_DATE \
		(DateParamsStruct *retValue=axcxdxbp); 
/*
; Get the current date form the DateSelector.  The date you get back depends
; on what type (DSI_dateType) the DateSelector is.
;
; PASS:		nothing
; RETURN:	cx	= year
;       	dl	= month
;       	dh	= day of month
;       	bp	= day of week
*/	

@message void	MSG_DATE_SELECTOR_SET_DATE \
		(byte day = dh, byte month = dl, word year = cx);
/*
; Set the current date of the DateSelector.  The day of week is calculated from
; the given date. Sending this message will result in the action
; message being sent out after the new date is set.
;
; PASS:		cx	= year
;		dl	= month
;		dh	= day of month
; RETURN:	nothing
*/

@message void MSG_DATE_SELECTOR_SET_WEEKDAY(byte weekday = cl);
/*
; Sets the day of week of the selector.  Only valid in DST_WEEK or
; DST_SHORT_WEEK mode.
;
; PASS:		cl	= day of week (0 = Sunday .. 6 = Saturday)
; RETURN:	nothing
*/

@message byte MSG_DATE_SELECTOR_GET_WEEKDAY() = cl;
/*
; Gets the day of week of the selector.  Only valid in DST_WEEKDAY or
; DST_SHORT_WEEKDAY mode.
;
; PASS:		nothing
; RETURN:	cl	= day of week (0 = Sunday .. 6 = Saturday)
*/

@message void	MSG_DATE_SELECTOR_SET_YEAR_TEXT \
		(DSYearTextFormat format = cx,
		 const char _far *text = dx:bp);
/*
; This message is sent as a response to MSG_DATE_SELECTOR_REPLACE_YEAR_TEXT.
; Using this message you can format a text string to be included with the
; year when DSI_dateType is DST_YEAR_TEXT.
;
; The DSYearTextFormat indicates if the text should be appended or prepended
; to the year.  Remember you can set the width of the text field with
; GSI_textWidth.  The text is centered in the text field.
;	
; For example:
;		1994 - The Year of the Dragon	(appended)
;		Calendar for 1994		(prepended)
;
; PASS:		cx	= DSYearTextFormat
;		dx:bp	= fptr to a null-terminated string containing the text
;		          to append or prepend to the year.
;		  	  (size of dx:bp plus year (1994, 94) should not exceed
;		  	  size DateTimeBuffer.)
; RETURN:	nothing
*/

@message void	MSG_DATE_SELECTOR_SET_DATE_TYPE(DateSelectorType type = cx);
/*
; Changes the format of the displayed date.  Forces object to redraw itself.
;
; PASS:		cx	= new DateSelectorType
; RETURN:	nothing
*/

/********************************
 	INTERNAL Messages
********************************/ 

@message void MSG_DS_DATE_INC();
/*
 * Tells the controller that the date has been incremented.
 */

@message void MSG_DS_DATE_DEC();
/*
 * Tells the controller that the date has been decremented.
 */

/********************************
 	Messages sent out
********************************/

@importMessage MetaApplicationMessages, \
	void MSG_DATE_SELECTOR_REPLACE_YEAR_TEXT(optr dateSelector = cx:dx, \
						 word year = bp);
/*
; Sent out by the date selector (to GCI_output) if the DateSelectorType is 
; DST_YEAR_TEXT.  The response to the this message is to send a
; MSG_DATE_SELECTOR_SET_YEAR_TEXT to the DateSelector.
;
; PASS:		^lcx:dx	= DateSelectorClass object
;		bp	= year
; RETURN:	nothing
*/

/********************************
	Hints
********************************/

	@vardata void HINT_DATE_SELECTOR_DRAW_FRAME;
	/*
	 * Draw a frame around the text, if possible.
	 * This is done by setting HINT_TEXT_FRAME on the GenText object.
	 */

@protominor NewFocusProtocol

	@vardata void HINT_DATE_SELECTOR_NOT_FOCUSABLE;
	/*
	 *  If present, then hotkeys and keyboard navigation will never
	 *  put the focus on this object
	 */

	@vardata void TEMP_DATE_SELECTOR_HAS_FOCUS;
	/*
	 *  This is put on the object when it has the system
	 *  focus.  It prevents having to query for the system focus
	 *  and compare it against itself.
	 */

@protoreset

/********************************
	Constants & Structures
********************************/

/* Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and	*/
/*	 ATTR_GEN_CONTROL_PROHIBIT_UI)				*/

typedef WordFlags DSFeatures;
#define DSF_DATE	1

#define DS_DEFAULT_FEATURES	(DSF_DATE)

/********************************
     	Instance Data Structures
********************************/

typedef	enum /* word */ {

        DST_LONG_CONDENSED_DATE,              /* Fri, 22 Apr, 1994    */
        DST_LONG_DATE,                        /* Friday, 22 April, 19 */
        DST_SHORT_DATE,                       /* 4/22/94              */
        DST_ZPADDED_SHORT_DATE,               /* 04/06/94             */
        DST_WEEK,                             /* Week 16              */
        DST_WEEK_YEAR,                        /* Week 16, 1994        */
        DST_MONTH,                            /* April                */
        DST_SHORT_MONTH,                      /* Apr                  */
        DST_MONTH_YEAR,                       /* April 1994           */
        DST_SHORT_MONTH_YEAR,                 /* Apr 1994             */
        DST_SHORT_MONTH_SHORT_YEAR,           /* Apr 94               */
        DST_YEAR,                             /* 1994                 */
        DST_YEAR_TEXT,                        /* 1994 Your_text_here  */
	DST_WEEKDAY,		              /* Saturday             */
	DST_SHORT_WEEKDAY,		      /* Sat  (First 3 chars) */

} DateSelectorType;

/********************************
	Instance Data
********************************/

        @instance DateStruct            DSI_date = {1995,1,1,0,0};
                /*  Holds the current date of the DateSelector               */
                
        @instance DateSelectorType      DSI_dateType = DST_LONG_CONDENSED_DATE;
                /*  Allows you to specify what type of date to display.      */
                /*  See DateSelectorType for the various options.            */

        @instance word                  DSI_textWidth = 0;
                /*  The width of the GenText containing the date.  This is   */
                /*  measured in standard character widths.  Default is 0 in  */
                /*  which case the size is predefined.                       */

        @instance Message               DSI_actionMsg;
                /*  The message to be sent out (to GCI_output) when the date */
                /*  has changed.  This happens if the users presses the      */
                /*  increment/decrement triggers or a                        */
                /*  MSG_DATE_SELECTOR_SET_DATE is received.                  */
                /*                                                           */
                /*  Pass:       cx - year      		                     */
                /*              dl - month                                   */
                /*              dh - day                                     */
                /*              bp - day of week                             */
                /*  Return:     nothing                                      */
                /*              ax, cx, dx, bp -- destroyed                  */

    		/* Standard prototype for action messages */
	@prototype void DATE_SELECTOR_ACTION(
				DateActionStruct date = dx.cx,
				word dayOfWeek = bp);

	@default GI_states = (@default | GS_ENABLED);

@endc	/* DateSelectorClass */

/************************************************************************/
/*			DateInputClass					*/
/************************************************************************/

@class	DateInputClass, GenControlClass ;

/********************************
	Messages
********************************/

@message void	MSG_DATE_INPUT_GET_DATE(DateParamsStruct *retValue=axcxdxbp);
/*
; Get the current date from the DateInput.
;
; PASS:		nothing
; RETURN:	cx	= year
;       	dl	= month
;       	dh	= day of month
;       	bp	= day of week
*/

@message void	MSG_DATE_INPUT_SET_DATE \
		(byte day = dh, byte month = dl, word year = cx);
/*
; Set the current date of the DateInput.  This will result in the action
; message be sent out after the new date is set.  The day of the week will
; be calculated.
;
; PASS:		cx	= year
;       	dl	= month
;		dh	= day of month
; RETURN:	nothing
*/

@message void	MSG_DATE_INPUT_SET_CURRENT_DATE();
/*
; Set the date of the DateInput to the current system date.  This will result 
; in the action message be sent out after the new date is set.
;
; PASS:		nothing
; RETURN:	nothing
*/

@message void   MSG_DATE_INPUT_REDISPLAY_DATE();
/*
; Forces the date to be redisplayed in the current format.
;
; PASS:		nothing
; RETURN:	nothing
*/

/********************************
	INTERNAL Messages
********************************/

@message void	MSG_DI_DATE_INC();
/* Tells the controller that the date has been incremented. */

@message void	MSG_DI_DATE_DEC();
/* Tells the controller that the date has been decremented. */

@message Boolean	MSG_DI_PARSE_DATE_STRING() = carry;
/* Parses the date string in the GenText and stores the values in DII_date. */

@message void	MSG_DI_TEXT_APPLY();
/* Handle apply msg from interal text object. */

/********************************
	Constants & Structures 
********************************/

/*
 * Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI)
 */

typedef	WordFlags	DIFeatures;
#define	DIF_DATE	0x01

#define	DI_DEFAULT_FEATURES	(DIF_DATE)

/********************************
	Instance Data
********************************/

	@instance	DateStruct	DII_date = {1995,1,1,0,0};
                /*  Holds the current date of the DateSelector               */

        @instance       Message         DII_actionMsg;
                /*  The message to be sent out (to GCI_output) when the date */
                /*  has changed.  This happens if the users presses the      */
                /*  increment/decrement triggers or a                        */
                /*  MSG_DATE_INPUT_SET_DATE is received.                     */
                /*                                                           */
                /*  Pass:       cx - year                                    */
                /*              dl - month                                   */
                /*              dh - day                                     */
                /*              bp - day of week                             */
                /*  Return:     nothing                                      */
                /*              ax, cx, dx, bp -- destroyed                  */

	@prototype void DATE_INPUT_ACTION(
				DateActionStruct date = dx.cx,
				word dayOfWeek = bp);
    		/* Standard prototype for action messages */

	@default GI_states = (@default | GS_ENABLED);

/********************************
	Hints
********************************/

@vardata void ATTR_DATE_INPUT_TARGETABLE;
/* Make the text part of the object targetable. */


@endc  /* DateInputClass */

/*****************************************************************************\
 *			TimeInputClass					     *
\*****************************************************************************/

@class	TimeInputClass, GenControlClass;

/********************************
	Messages
********************************/

@message void	MSG_TIME_INPUT_GET_TIME(TimeParamsStruct *retVal = axcxdxbp);
/*
; Get the current time from the TimeInput.  All fields will contain
; TIME_INPUT_NONE if ATTR_TIME_INPUT_DISPLAY_STRING_WHEN_EMPTY is set
; and the object is empty.
;
; PASS:		nothing
; RETURN:	ch	= hours (0 .. 23)
;       	dl	= minutes (0 .. 59)
;       	dh	= seconds (0 .. 59)
*/

@message void	MSG_TIME_INPUT_SET_TIME \
	(sbyte hours = ch, sbyte minutes = dl, sbyte seconds = dh);
/*
; Set the current time of the TimeInput.  This will result in the action
; message be sent out after the new time is set.
;
; PASS:		ch	= hours (0 through 23)
;		dl	= minutes (0 through 59)
;		dh	= seconds (0 through 59)
; RETURN:	nothing
*/

@message void	MSG_TIME_INPUT_SET_CURRENT_TIME();
/*
; Set the time of the TimeInput to the current system time.  This will result 
; in the action message be sent out after the new time is set.
;
; PASS:		nothing
; RETURN:	nothing
*/

@message word	MSG_TIME_INPUT_GET_INCREMENT_VALUE() = cx;
/*
; Returns the TII_incrementValue used when incrementing or decrementing the
; time.
;
; PASS:		NOTHING
; RETURN:	cx	= increment value
*/

@message void	MSG_TIME_INPUT_SET_INCREMENT_VALUE(word increment = cx);
/*
; Sets the TII_incrementValue used when incrementing or decrementing the
; time.
;
; PASS:		cx	= increment value
; RETURN:	nothing
*/

@message void	MSG_TIME_INPUT_REDISPLAY_TIME();
/*
; Forces the time to be redisplayed in the current format.
;
; PASS:		nothing
; RETURN:	nothing
*/

/********************************
	INTERNAL Messages
********************************/

@message void	MSG_TI_TIME_INC();
/* Tells the controller that the time has been incremented.  Uses
   TII_incrementValue. */

@message void	MSG_TI_TIME_DEC();
/* Tells the controller that the time has been decremented. Uses
   TII_incrementValue. */

@message void	MSG_TI_TIME_ALT_INC();
/* Tells the controller that the time has been incremented.  Uses
   TII_incrementAltValue. */

@message void	MSG_TI_TIME_ALT_DEC();
/* Tells the controller that the time has been decremented. Uses
   TII_incrementAltValue. */

@message Boolean MSG_TI_PARSE_TIME_STRING() = carry;
/* Parses the time string in TIText and stores the time in TII_time. */

@message void MSG_TI_TEXT_APPLY();
/* Respond to internal text object's apply message. */

/********************************
	Constants & Structures
********************************/

/*
 * Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI)
 */

typedef	WordFlags	TIFeatures;
#define	TIF_DATE	0x01

#define TI_DEFAULT_FEATURES	(TIF_DATE)

/********************************
	Instance Data Structures
********************************/

typedef enum /* word */ {

	TIT_TIME_OF_DAY,	/* To input time of day (0-9,.:;ampAMP) */
	TIT_TIME_INTERVAL, 	/* To input time intervals (0-9,.:;)    */
	TIT_TIME_OFFSET,        /* To input time offsets (-,0-9,.:;)    */

} TimeInputType;

/********************************
	Instance Data
********************************/
	@instance TimeStruct	TII_time = {0,0,0};
               /*  Holds the current time of the TimeInput                   */

        @instance word          TII_incrementValue = 5;
               /*  Holds the number of minutes to increment or decrement     */
	       /*  when using MSG_TI_TIME_DEC/INC.			     */

        @instance word          TII_incrementAltValue = 1;
               /*  Holds the number of minutes to increment or decrement     */
	       /*  when using MSG_TI_TIME_ALT_DEC/INC.			     */
        
        @instance TimeInputType TII_timeType = TIT_TIME_OF_DAY;
               /*  What type of input gadget is this.  The default is        */
               /*  TIT_timeOfDay which allows AM/PM.                         */
               /*                                                            */

        @instance Message       TII_actionMsg = 0;
               /*  The message to be sent out (to GCI_output) when the time  */
               /*  has changed.  This happens if the users presses the       */
               /*  increment/decrement triggers a MSG_TIME_INPUT_SET_TIME    */
               /*  is received or the user inputed a new time using keyboard */
               /*  or ink.                                                   */
               /*                                                            */
               /*  Pass:       ch - hours   	                             */
               /*              dl - minutes                                  */
               /*              dh - seconds                                  */
               /*  Return:     nothing                                       */
               /*              ax, cx, dx, bp -- destroyed                   */

	@instance Boolean	TII_ampmMode = FALSE;
		/* INTERNAL: set to non-zero if we're in AM/PM mode. */

	@prototype void TIME_INPUT_ACTION(byte hours = ch, 
					  byte minutes = dl,
					  byte seconds = dh);

    		/* Standard prototype for action messages */
				
	@default GI_states = (@default | GS_ENABLED);

/********************************
	Hints
********************************/

@vardata optr ATTR_TIME_INPUT_DISPLAY_STRING_WHEN_EMPTY;
@reloc ATTR_TIME_INPUT_DISPLAY_STRING_WHEN_EMPTY, 0, optr;
/* Draws string whenever the text part of the object becomes empty. */

@vardata void ATTR_TIME_INPUT_TARGETABLE;
/* Make the text part of the object targetable. */

@vardata void ATTR_DONT_SEND_APPLY_MSG_ON_TEXT_LOST_FOCUS;
/*
 * The default behavior in TimeInputClass is to send TII_actionMsg when it
 * receives MSG_META_TEXT_LOST_FOCUS (ie. when the text object in the child
 * block loses focus).  With this hint, the action message is not sent on
 * losing focus.  This hint is useful when we want the apply message to be
 * sent only when we receive MSG_GEN_APPLY, e.g. when the controller appears
 * as a dialog with an OK button.
 */

@endc;	 /* TimeInputClass */

/****************************************************************************\
 *				TimerClass				    *
\****************************************************************************/

@class	TimerClass, GenControlClass;

/********************************
	Messages
********************************/

@message void	MSG_TIMER_GET_TIME(TimeParamsStruct *retValue = axcxdxbp);
/*
; Get the current time from the TimerClass object.
;
; PASS:		nothing
; RETURN:	ch	= hours (0 through 23)
;		dl	= minutes (0 through 59)
;		dh	= seconds (0 through 59)
;		bp	= 1/10 sec.
*/

@message void	MSG_TIMER_SET_TIME(byte hours = ch, 
				   byte minutes = dl,
				   byte seconds = dh);
/*
; Set the time that the object currently displays.  If the timer is
; running when the message is received, the timer will start
; counting from the passed value.  1/10 seconds are always set to
; zero by this method.
;
; PASS:		ch	= hours (0 .. 23)
;		dl	= minutes (0 .. 59)
;		dh	= seconds (0 .. 59)
; RETURN:	nothing
*/

@message void	MSG_TIMER_SET_COUNTDOWN_TIME(byte hours = ch, 
					     byte minutes = dl,
					     byte seconds = dh);
/*
; Set the countdown time of the timer.
; 
; PASS:		ch	= hours (0 through 23)
;		dl	= minutes (0 through 59)
;		dh	= seconds (0 through 59)
; RETURN:	nothing
*/

@message void	MSG_TIMER_GET_COUNTDOWN_TIME \
		(TimeParamsStruct *retVal = axcxdxbp);
/*
; Get the countdown time of the timer.
; 
; PASS:		nothing
; RETURN:	ch	= hours (0 through 23)
;		dl	= minutes (0 through 59)
;		dh	= seconds (0 through 59)
*/

@message void MSG_TIMER_RESET();
/*
; Tells the controller to reset the timer to 0.
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
*/

@message void MSG_TIMER_START_STOP();
/*
; Tells the controller to toggle the timer on/off.
;
; PASS:		nothing
; RETURN:	nothing
; DESTROYED:	nothing
*/

/********************************
	INTERNAL messages
********************************/

@message void MSG_TIMER_UPDATE();
/* Sent every 1/10 sec. to update the timer. */

/********************************
	Constants & Structures
********************************/

/*
 *  Features flags (used with ATTR_GEN_CONTROL_REQUIRE_UI and
 *  ATTR_GEN_CONTROL_PROHIBIT_UI).
 */

typedef WordFlags 		TMFeatures;
/* 7 bits unused */
#define TMF_TIME		(0x01)

#define TM_DEFAULT_FEATURES	(TMFeatures)

/********************************
	Instance Data Structures
********************************/

typedef enum /* word */ {	
    TAT_START = 0,		/*  When timer started          */
    TAT_STOP,			/*  When timer stopped          */
    TAT_RESET,			/*  When timer reset            */
    TAT_ZERO,			/*  When timer reaches zero     */
    TAT_NO_TIME,		/*  Timer started w/countdown=0 */
} TimerActionType;

typedef enum /* word */ {
    TS_COUNTDOWN = 0,		/* count down from TI_countdownTime */
    TS_STOPWATCH,		/* count upwards from displayed time */
} TimerStyle;

/********************************
	Instance Data
********************************/

	@instance TimerHandle		TI_timerHandle = NullHandle;
                /*                                                           */
                /*  INTERNAL                                                 */
                /*  Holds the handle of the stopwatch timer.                 */
                /*                                                           */

        @instance StopwatchStruct       TI_time = {0,0,0,0};
                /*  Holds the current time of the                            */

        @instance StopwatchStruct       TI_countdownTime = {0,0,0,0};
                /*  Holds the countdown value of the timer.                  */

        @instance Message		TI_actionMsg;
                /*                                                           */
                /* The message to be sent out (to GCI_output) when the watch */
                /* started/stopped, reset or reaches zero.                   */
                /*                                                           */
                /* Pass:        cx - TimerActionType                         */
                /* Return:      nothing                                      */
                /*              ax, cx, dx, bp -- destroyed                  */
                /*                                                           */

	@instance TimerStyle		TI_style = TS_COUNTDOWN;

	@instance long			TI_startCount;

	@instance word			TI_remainder;
				
	@prototype void TIMER_ACTION(TimerActionType actionType=cx);

	@default GI_states = (@default | GS_ENABLED);
				
@endc	/* TimerClass */

/******************************************************************************
		RepeatTriggerClass
******************************************************************************/

@class  RepeatTriggerClass, GenTriggerClass;

/********************************
	Messages
********************************/

@message word MSG_REPEAT_TRIGGER_GET_REPEAT_RATE() = cx;
/*
; The repeat trigger sends this to itself to get the repeat rate to use when
; the user holds down the increment/decrement button.  You can subclass this
; to get the repeat rate you want for your trigger. Faster rates are desireable
; for large ranges.  The number of repeats is passed and may be useful.
;
; PASS:		cx	= number of repeats so far
; RETURN:	cx	= repeat rate
*/

/********************************
	INTERNAL messages
********************************/

@message void MSG_RT_REPEAT_ACTION();
/*
 *  Send a MSG_GEN_TRIGGER_SEND_ACTION on a timer click.
 */

/********************************
	Instance Data
********************************/

        @instance TimerHandle  RTI_timerHandle = NullHandle;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the handle of the trigger timer.              */
                /*                                                      */

        @instance word  RTI_timerID = 0;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the ID of the trigger timer.                  */
                /*                                                       */
        @instance word  RTI_repeatCount = 0;
                /*                                                      */
                /*  INTERNAL                                            */
                /*  Holds the repeat count                              */
                /*                                                      */
        
        @instance word  RTI_repeatRate = 10;
                /*  Holds the time interval the trigger is repeated by. */

        @instance byte  RTI_accelerate = 1;
                /*                                                      */
                /*  If TRUE then the repeat rate will accelerate as the */
                /*  trigger is held down.  This is the default.         */
                /*                                                      */

	@default GI_states = (@default | GS_ENABLED);				
/********************************
	Vardata
********************************/

	@vardata void HINT_REPEAT_TRIGGER_NOT_FOCUSABLE;
	/*
	 * Don't allow keyboard focus to reach this object.
	 */

@endc	/* RepeatTriggerClass */


/***********************************************************************
 * 		BatteryIndicatorClass
 ***********************************************************************/

@class  BatteryIndicatorClass, GenGlyphClass;

/********************************
	INTERNAL Messages
********************************/

@message	void MSG_BATTERY_SET_LIFE(word life = cx);
/* 
 * Set a new value for the battery life.  Do a visual update of the
 * battery indicator moniker if the new value is different from the old
 * one.
 */

@message	void MSG_BATTERY_FIND_SET_LIFE();
/*
 * Find the battery life from the power driver and do a visual update
 * of the battery indicator moniker.
 */

/********************************
	Exported Types
********************************/

typedef	WordFlags	BatteryOrientationType;
#define	BOT_VERTICAL		0
#define BOT_HORIZONTAL		2
#define BOT_LONG_HORIZONTAL	4

/********************************
	Instance Data
********************************/

@instance BatteryOrientationType BII_orientation = BOT_HORIZONTAL;
/* Battery indicator style */

@instance word			BII_life = -1;
/* Percentage of battery life left (0 - 100) */

/* The following are for INTERNAL USE ONLY */

@instance TimerHandle		BII_timerHan = NullHandle;
@instance word			BII_timerID = 0;
@instance MixMode		BII_mixModeClear = MM_CLEAR;

@endc	/* BatteryIndicatorClass */

@endlib
