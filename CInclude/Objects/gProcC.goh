/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	gProcC.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines GenProcessClass
 *
 	$Id: gProcC.goh,v 1.1 97/04/04 16:19:19 newdeal Exp $
 *
 ***********************************************************************/


@optimize
@deflib ui

#include <file.h>
#include <vm.h>
@include <ui.goh>
@include <alb.goh>
@include <Objects/processC.goh>

@class	GenProcessClass, ProcessClass;

@message void MSG_GEN_PROCESS_RESTORE_FROM_STATE(
				AppAttachFlags attachFlags = cx,
				MemHandle launchBlock = dx,
				MemHandle extraState = bp);	/* XXX */

typedef WordFlags AppAttachFlags;
#define AAF_RESTORING_FROM_STATE	0x8000
#define AAF_STATE_FILE_PASSED		0x4000
#define AAF_DATA_FILE_PASSED		0x2000
#define AAF_RESTORING_FROM_QUIT		0x1000

@message void MSG_GEN_PROCESS_OPEN_APPLICATION(
				AppAttachFlags attachFlags = cx,
				MemHandle launchBlock = dx,
				MemHandle extraState = bp);

@message void MSG_GEN_PROCESS_OPEN_ENGINE(
				AppAttachFlags attachFlags = cx,
				 MemHandle launchBlock = dx);

@message MemHandle MSG_GEN_PROCESS_CLOSE_APPLICATION() = cx;

@message void MSG_GEN_PROCESS_CLOSE_ENGINE();	/* XXX */
@message MemHandle MSG_GEN_PROCESS_CLOSE_CUSTOM();	/* XXX */
@message MemHandle MSG_GEN_PROCESS_ATTACH_TO_PASSED_STATE_FILE(
				AppAttachFlags attachFlags = cx,
				 MemHandle launchBlock = dx) = ax; /* XXX */
@message VMFileHandle MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE(
			MemHandle appInstanceReference = dx) = ax; /* XXX */
@message void MSG_GEN_PROCESS_INSTALL_TOKEN();	/* XXX */
@reserveMessages    	1;
@message optr MSG_GEN_PROCESS_GET_PARENT_FIELD() = cx:dx;	/* XXX */
@message void MSG_GEN_PROCESS_SEND_TO_APP_GCN_LIST(@stack
    	    	    	    	GCNListSendFlags sendFlags,
				EventHandle event,
				MemHandle block,
    	    	    	    	/* 
    	    	    	    	 * The exact type of manufListType depends
    	    	    	       	 * on the manufacturer. It will always
    	    	    	    	 * be a word.
    	    	    	    	 */
				word	manufListType,
				ManufacturerID manufID);
@message void MSG_GEN_PROCESS_REAL_DETACH();	/* INTERNAL */
@message void MSG_GEN_PROCESS_FINAL_DETACH();	/* INTERNAL */


/************************************************************************/
/*		    	    Undo messages	    	    	    	*/
/************************************************************************/
@message void MSG_GEN_PROCESS_UNDO_START_CHAIN(@stack optr title,
					       optr owner);
@message void MSG_GEN_PROCESS_UNDO_END_CHAIN(Boolean flushChainIfEmpty = cx);

typedef enum /* word */ {
	UADT_FLAGS=0, 
	UADT_PTR=2,
	UADT_VM_CHAIN=4
} UndoActionDataType;

typedef struct {
    dword   UADF_flags;
    word    UADF_extraflags;
} UndoActionDataFlags;

typedef struct {
    void    *UADP_ptr;
    word    UADP_size;
} UndoActionDataPtr;

typedef struct {
    VMChain UADVMC_vmChain;
    VMFileHandle UADVMC_file;
} UndoActionDataVMChain;

typedef union {
    UndoActionDataFlags	    UADU_flags;
    UndoActionDataPtr	    UADU_ptr;
    UndoActionDataVMChain   UADU_vmChain;
} UndoActionDataUnion;
#define NULL_UNDO_CONTEXT   0

typedef WordFlags AddUndoActionFlags;
#define AUAF_NOTIFY_BEFORE_FREEING 0x8000
#define AUAF_NOTIFY_IF_FREED_WITHOUT_BEING_PLAYED_BACK 0x4000

typedef struct {
    UndoActionDataType	UAS_dataType;
    UndoActionDataUnion	UAS_data;
    dword   	    	UAS_appType;
} UndoActionStruct;

typedef struct {
    UndoActionStruct	AUAS_data;
    optr    	    	AUAS_output;
    AddUndoActionFlags	AUAS_flags;
} AddUndoActionStruct;

extern VMFileHandle _pascal GenProcessUndoGetFile(void);
extern Boolean _pascal GenProcessUndoCheckIfIgnoring(void);
#ifdef __HIGHC__
pragma Alias(GenProcessUndoGetFile, "GENPROCESSUNDOGETFILE");
pragma Alias(GenProcessUndoCheckIfIgnoring, "GENPROCESSUNDOCHECKIFIGNORING");
#endif

@message VMChain MSG_GEN_PROCESS_UNDO_ADD_ACTION(AddUndoActionStruct *data = ss:bp) = ax.bp;
@message VMFileHandle MSG_GEN_PROCESS_UNDO_GET_FILE() = ax;
@message void MSG_GEN_PROCESS_UNDO_FLUSH_ACTIONS();
@message dword MSG_GEN_PROCESS_UNDO_SET_CONTEXT(dword context = cx.dx) = cx.dx;
@message dword MSG_GEN_PROCESS_UNDO_GET_CONTEXT() = cx.dx;
@message void MSG_GEN_PROCESS_UNDO_PLAYBACK_CHAIN();
@message void MSG_GEN_PROCESS_UNDO_IGNORE_ACTIONS(Boolean flushActions = cx);
@message void MSG_GEN_PROCESS_UNDO_ACCEPT_ACTIONS();
@message Boolean MSG_GEN_PROCESS_UNDO_CHECK_IF_IGNORING() = ax;
@message void MSG_GEN_PROCESS_UNDO_ABORT_CHAIN();

@protominor UINewForZoomer

@message void MSG_GEN_PROCESS_TRANSITION_FROM_ENGINE_TO_APPLICATION_MODE(
				AppAttachFlags attachFlags = cx,
				MemHandle launchBlock = dx);

@protoreset

#define	AIRDN_DRIVE	0x80

@endc

@endlib

