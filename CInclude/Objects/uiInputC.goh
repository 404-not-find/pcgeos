/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	Objects/uiInputC.goh
 * AUTHOR:	Doug Fults: April 21, 1992
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines UI input methods, constants
 *	(All MetaUIMessages are in ui.goh)
 *
 *	$Id: uiInputC.goh,v 1.1 97/04/04 15:52:55 newdeal Exp $
 *
 ***********************************************************************/
@optimize

@deflib ui

#include <input.h>

typedef WordFlags MetaAlterFTVMCExclFlags;
#define MAEF_NOT_HERE		0x8000
#define MAEF_SYS_EXCL		0x4000
#define MAEF_APP_EXCL		0x2000
#define MAEF_GRAB		0x1000
#define MAEF_FOCUS		0x0800
#define MAEF_TARGET		0x0400
#define MAEF_MODEL		0x0200
#define MAEF_FULL_SCREEN	0x0100
#define MAEF_MODAL		0x0004
#define MAEF_OD_IS_WINDOW	0x0002
#define MAEF_OD_IS_MENU_RELATED 0x0001

#define MAEF_MASK_OF_ALL_HIERARCHIES    0x0f00

typedef enum /* word */ {
	IRV_NO_REPLY,
	IRV_NO_INK,
	IRV_INK_WITH_STANDARD_OVERRIDE,
	IRV_DESIRES_INK,
	IRV_WAIT
} InkReturnValue;

typedef struct {
    MemHandle	    destInfo;
    InkReturnValue  inkType;
    word    unused1;
    word    unused2;
} InkReturnParams; 


/*
 *  About the InkDestinationInfo structure:
 * 	
 *  This is used by objects to force a destination for the ink
 *  (this forces the ink to go to an object if the initial click was
 *   in the object).
 * 
 *  This is also used by the Ink object to keep from having to redraw
 *  the ink. The ink that is collected is drawn through the returned
 *  gstate to clip it to the bounds of the ink. The gstate that is
 *  returned will be destroyed by the IM thread.
 */


typedef struct {
    optr		IDI_destObj;
/*  This is the object that the ink should be sent to. */


    GStateHandle	IDI_gstate;
/*
 *  A gstate to draw through (this is optional, and can be set to 0 if
 *  ink can go all over the screen)
 */


    word		IDI_brushSize;
/*
 *  The width/height parameter of the ink lines (see GrBrushPolyline).
 *  (use 0 for default)
 */


    dword	IDI_gestureCallback;
/*
 *  The virtual far pointer to the callback routine. The callback
 *  routine params are the following:
 * 
 * 	Passed on the stack (Pascal calling type):
 * 
 * 		fptr	arrayOfInkPoints
 * 		word	numPoints
 * 		word	numStrokes	;The # strokes entered by the
 * 					; user. If you only support
 * 					; single-stroke gestures, you
 * 					; can check this to quickly 
 * 					; exit if the user has entered
 * 					; a bunch of strokes.
 * 
 * 	Returns:
 * 		AX - Non-zero if the ink is a gesture
 */

} InkDestinationInfo;

typedef ByteFlags UIFunctionsActive;
#define UIFA_SELECT	0x80
#define UIFA_MOVE_COPY	0x40
#define UIFA_FEATURES	0x20
#define UIFA_CONSTRAIN	0x10
#define UIFA_PREF_A	0x08
#define UIFA_PREF_B	0x04
#define UIFA_PREF_C	0x02
#define UIFA_IN		0x01

#define UIFA_ADJUST	0x08
#define UIFA_EXTEND	0x04
#define UIFA_MOVE	0x08
#define UIFA_COPY	0x04
#define UIFA_POPUP	0x08
#define UIFA_PAN	0x04

/*
 * These may be used to extract ButtonInfo or UIFunctionsActive information from
 * the "inputState" value passed in the UI input messages.
 */
#define GET_BUTTON_INFO(val) 		((byte) (val))
#define GET_UI_FUNCTIONS_ACTIVE(val) 	((byte) ((val) >> 8))

typedef WordFlags MouseReturnFlags;
#define    MRF_PROCESSED		0x8000
#define    MRF_REPLAY			0x4000
#define    MRF_PREVENT_PASS_THROUGH	0x2000
#define    MRF_SET_POINTER_IMAGE	0x1000
#define    MRF_CLEAR_POINTER_IMAGE	0x0800

/*
 * Structure of data that must be returned by any handler of the following
 * input messages
 */
typedef struct {
	word			unused;
	MouseReturnFlags	flags;
	optr			ptrImage;
	/* Pointer image to use, if MRF_SET_PTR_IMAGE returned */
} MouseReturnParams;

/*
 * This structure is passed to handlers of _LARGE_ mouse messages
 */

typedef struct {
	PointDWFixed	LMD_location;
	byte		LMD_buttonInfo;
	UIFunctionsActive	LMD_uiFunctionsActive;
} LargeMouseData;

/* NOTE:  button, pre & post-passive buttons events declared in ui.goh */

typedef ByteFlags UIButtonFlags;
#define UIBF_NO_KEYBOARD		0x80
#define UIBF_CLICK_TO_TYPE		0x40
#define UIBF_SELECT_ALWAYS_RAISES	0x20
#define UIBF_SELECT_DISPLAYS_MENU	0x10
#define UIBF_KEYBOARD_ONLY		0x08
#define UIBF_CLICK_GOES_THRU		0x04
#define UIBF_SPECIFIC_UI_COMPATIBLE	0x02
#define UIBF_BLINKING_CURSOR		0x01

/*
 * Special CS_UI_FUNCS character set -- these represent the low
 * byte of the character value when the high byte is CS_UI_FUNCS.
 *
 */

typedef	ByteEnum UChar;
#define UC_NULL			0x00
#define UC_QUICK_COPY		0x01
#define UC_BUTTON_EVENT		0x02
#define UC_CUT			0x03
#define UC_COPY			0x04
#define UC_PASTE		0x05
#define UC_DATE			0x06
#define UC_TIME			0x07
#define	UC_EXIT			0x08
#define	UC_ON			0x09
#define	UC_OFF			0x10
#define	UC_LOCK			0x11
#define	UC_JOTTER		0x12
#define	UC_MENU			0x13
#define UC_DELETE   	    	0x14
#define UC_ROTATE               0x15

typedef struct {
    optr    	    	BG_OD;
    word		BG_data;
} BasicGrab;

typedef struct {
    optr    	    	KG_OD;
    word		KG_unused;
} KbdGrab;

typedef struct {
    optr    	    	MG_OD;
    WindowHandle	MG_gWin;
} MouseGrab;

typedef struct {
    optr    	    		FTVMC_OD;
    MetaAlterFTVMCExclFlags	FTVMC_flags;
} FTVMCGrab;

extern word
    _pascal FlowCheckKbdShortcut(KeyboardShortcut *shortcutTable,
				 word numEntriesInTable,
				 word character,
				 word flags,
				 word state);

typedef WordFlags HierarchicalGrabFlags;
#define HGF_SYS_EXCL	0x4000
#define HGF_APP_EXCL	0x2000
#define HGF_GRAB	0x1000
#define HGF_OTHER_INFO	0x0fff

typedef struct {
    optr    	    	HG_OD;
    HierarchicalGrabFlags HG_flags;
} HierarchicalGrab;

extern Segment /* XXX */
    _pascal FlowAlterHierarchicalGrab(optr objectOptr, 
			 Message gainedMessage,
			 word offsetToMasterInstance,
			 word offsetToHierarchicalGrab,
			 optr objectToBeGivenExclusive,
			 HierarchicalGrabFlags flags);

extern Segment /* XXX */
    _pascal FlowUpdateHierarchicalGrab(optr objectOptr,
		   Message gainedMessage,
		   word offsetToMasterInstance,
		   word offsetToHierarchicalGrab,
		   Message updateMessage);

typedef struct {
    word ax_value;
    word bp_value;
    word cx_value;
    word dx_value;
} MessageReturnValues;

extern Boolean /* XXX */
    _pascal FlowDispatchSendOnOrDestroyClassedEvent(
			MessageReturnValues *retvals,
			optr objectOptr,
			Message messageToSend,
			EventHandle classedEvent,
			word otherData,
			optr objectToSendTo,
			MessageFlags flags);


typedef ByteFlags HoldUpInputFlags;
#define HUIF_FLUSHING_QUEUE 0x80
#define HUIF_HOLD_UP_MODE_DISABLED 0x40


#ifdef __HIGHC__
pragma Alias (FlowCheckKbdShortcut, "FLOWCHECKKBDSHORTCUT");
pragma Alias (FlowAlterHierarchicalGrab, "FLOWALTERHIERARCHICALGRAB");
pragma Alias (FlowUpdateHierarchicalGrab, "FLOWUPDATEHIERARCHICALGRAB");
pragma Alias (FlowDispatchSendOnOrDestroyClassedEvent,
		"FLOWDISPATCHSENDONORDESTROYCLASSEDEVENT");
#endif

@endlib

