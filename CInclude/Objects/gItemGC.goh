/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	gItemGC.goh
 * AUTHOR:	Chris Hawley: 1/23/92
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines GenItemGroupClass.
 *
 *	$Id: gItemGC.goh,v 1.1 97/04/04 15:51:48 newdeal Exp $
 *
 ***********************************************************************/


@optimize
@deflib ui

@include <ui.goh>
@include <Objects/genC.goh>

@class	GenItemGroupClass, GenClass;

typedef ByteEnum GenItemGroupBehaviorType;
#define GIGBT_EXCLUSIVE 0
#define GIGBT_EXCLUSIVE_NONE 1
#define GIGBT_EXTENDED_SELECTION 2
#define GIGBT_NON_EXCLUSIVE 3

/* Returned from MSG_GEN_ITEM_GROUP_GET_SELECTION (unsigned value) */
#define  GIGS_NONE	(0xffff)


@message void MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(Boolean indeterminate = dx);
@message void MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(word identifier = cx,
					  Boolean indeterminate = dx);
@message void MSG_GEN_ITEM_GROUP_SET_MULTIPLE_SELECTIONS(
					  word *selectionList = cx:dx,
				 	  word numSelections = bp);

@message word MSG_GEN_ITEM_GROUP_GET_SELECTION() = ax;
@message word MSG_GEN_ITEM_GROUP_GET_NUM_SELECTIONS() = ax;
@message word MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS(
					word *selectionList = cx:dx,
					word maxSelections = bp) = ax;

@message void MSG_GEN_ITEM_GROUP_SET_INDETERMINATE_STATE(
					Boolean indeterminateState = cx);
@message Boolean MSG_GEN_ITEM_GROUP_IS_INDETERMINATE() = carry;

@message void MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(
					Boolean modifiedState = cx);
@message Boolean MSG_GEN_ITEM_GROUP_IS_MODIFIED() = carry;

@message void MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(
					Boolean modifiedState = cx);

@message optr MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(word identifier = cx) = cx:dx;

@message void MSG_GEN_ITEM_GROUP_SET_ITEM_STATE(word identifier = cx,
					        Boolean state = dx);
@message Boolean MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(word identifier = cx) = carry;

@message void MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(word identifier = cx); /*XXX*/

@message optr MSG_GEN_ITEM_GROUP_GET_DESTINATION() = cx:dx;
@message void MSG_GEN_ITEM_GROUP_SET_DESTINATION(optr dest = cx:dx);

@message Message MSG_GEN_ITEM_GROUP_GET_APPLY_MSG() = ax;
@message void MSG_GEN_ITEM_GROUP_SET_APPLY_MSG(Message message = cx);

@message GenItemGroupBehaviorType MSG_GEN_ITEM_GROUP_GET_BEHAVIOR_TYPE() = al;
@message void MSG_GEN_ITEM_GROUP_SET_BEHAVIOR_TYPE(
		GenItemGroupBehaviorType behaviorType = cl);

@message word MSG_GEN_ITEM_GROUP_GET_UNIQUE_IDENTIFIER() = ax;

/* Internal */

typedef ByteFlags GenScanItemsFlags;
#define	GSIF_FROM_START				0x80
#define	GSIF_FORWARD				0x40
#define GSIF_WRAP_AROUND			0x20
#define GSIF_INITIAL_ITEM_FOUND			0x10
#define GSIF_USABLE_AND_ENABLED_ITEM_FOUND	0x08
#define GSIF_EXISTING_ITEMS_ONLY		0x04
#define GSIF_DYNAMIC_LIST			0x02


@message word MSG_GEN_ITEM_GROUP_SCAN_ITEMS(GenScanItemsFlags flags  = cl,
					    word initialItem = dx,
					    word scanAmount = bp) = ax;

@message void MSG_GEN_ITEM_GROUP_REDRAW_ITEMS(word offset = cx);  /*XXX*/

@message void MSG_GEN_ITEM_GROUP_SET_MONIKER_SELECTION(char *text = cx:dx); /*XXX*/

@message void MSG_GEN_ITEM_GROUP_UPDATE_EXTENDED_SELECTION(@stack /* INTERNAL */
		word flags, word setSelMsg, word prevExtentItem,
	        word extentItem, word anchorItem);  /*XXX*/


@protominor userExclAPI

@message word MSG_GEN_ITEM_GROUP_GET_FOCUS_ITEM() = ax;

@message void MSG_GEN_ITEM_GROUP_SET_FOCUS_ITEM(word identifier = cx);

@protoreset

/* GEI_state */

typedef ByteFlags GenItemGroupStateFlags;
#define  GIGSF_INDETERMINATE	0x80
#define  GIGSF_MODIFIED		0x40

/* Output prototypes */

@prototype void GEN_ITEM_GROUP_APPLY_MSG(
    	    	    	    	    word selection = cx,
			    	    word numSelections = bp,
				    GenItemGroupStateFlags stateFlags = dl);

@prototype void GEN_ITEM_GROUP_STATUS_MSG(
    	    	    	    	    word selection = cx,
				    word numSelections = bp,
				    GenItemGroupStateFlags stateFlags = dl);

/* Variable data */

@vardata Message ATTR_GEN_ITEM_GROUP_STATUS_MSG;
@vardata void ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION;
@vardata Message ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS;
@vardata void HINT_ITEM_GROUP_SCROLLABLE;
@vardata void HINT_ITEM_GROUP_MINIMIZE_SIZE;
@vardata void HINT_ITEM_GROUP_RADIO_BUTTON_STYLE;
@vardata void HINT_ITEM_GROUP_TOOLBOX_STYLE;

@vardata void HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION;
@vardata void HINT_ITEM_GROUP_MINIMIZE_SIZE_IF_VERTICAL_SCREEN;
@vardata optr ATTR_GEN_ITEM_GROUP_LINK;
@reloc ATTR_GEN_ITEM_GROUP_LINK, 0, optr;
@vardata void ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN;
@vardata void HINT_ITEM_GROUP_SHOW_SELECTION_EVEN_WHEN_NOT_FOCUS;

@protominor PCVLooks_2
@vardata void HINT_ITEM_GROUP_LOWER_LEFT_STYLE;
@vardata void HINT_ITEM_GROUP_LOWER_RIGHT_STYLE;
	/* Draw in the lower left  or lower right style.  These draw only
	   the top and right,or top and left edges of the button (rounded
	   corner) to look like they are in the lower left or lower right
	   of the screen */

@vardata void HINT_ITEM_GROUP_UPPER_TAB_STYLE;
@vardata void HINT_ITEM_GROUP_LOWER_TAB_STYLE;
	/* The lower and upper tab styles are meant to be used on items
	   that are arranged horizontally.  When one is pressed it looses
	   its top or bottom (according to being upper or lower) so it 
	   looks like it has been pressed. */

@vardata void HINT_ITEM_GROUP_BLANK_STYLE;
	/* As simple as it gets, draws no UI. */
@vardata void HINT_ITEM_GROUP_PCV_RADIO_BUTTON_STYLE;

@protoreset

@protominor	UINewForPenelope

@vardata void HINT_ITEM_GROUP_TAB_STYLE;
	/* Hint to make the items look like tabs.  Can be modified
	   by HINT_ORIENT_CHILDREN_VERTICALLY/HORIZONTALLY, 
	   HINT_RIGHT/LEFT_JUSTIFY_CHILDREN, & 
	   HINT_DRAW_STYLE_3D_RAISED */

typedef WordFlags ScrollListGridState;
#define SLGS_HGRID_LINES	0x8000
#define SLGS_HGRID_SPACING	0x7f00
#define SLGS_VGRID_LINES	0x0080
#define SLGS_VGRID_SPACING	0x007f

#define SLGS_HGRID_SPACING_OFFSET    8
#define SLGS_VGRID_SPACING_OFFSET    0

@vardata ScrollListGridState HINT_ITEM_GROUP_GRID_LINES;

@vardata optr HINT_ITEM_GROUP_PREV_LINK;
@reloc HINT_ITEM_GROUP_PREV_LINK, 0, optr

@vardata optr HINT_ITEM_GROUP_NEXT_LINK;
@reloc HINT_ITEM_GROUP_NEXT_LINK, 0, optr

typedef struct {
    word SOOBM_upMessage;
    word SOOBM_downMessage;
} ScrollOutOfBoundsMsgs;

@vardata ScrollOutOfBoundsMsgs HINT_ITEM_GROUP_SCROLL_OUT_OF_BOUNDS_MSGS;

@protoreset

@vardata void	HINT_ITEM_GROUP_WRAPPING_LIST;
@vardata void	HINT_ITEM_GROUP_NON_WRAPPING_LIST;
	/* Hint allowing programmer to specify wrapping behavior of list.
	   In other words, if the list is wrapping, then the user can
	   navigate to the fist item from the last by specifying the
	   next item, or navigate to the last item from the first by
	   selecting the previous item.  First used in selection boxes 
	   (Item groups with HINT_MINIMIZE_SIZE in Odie Spui).  */

@vardata void   HINT_ITEM_GROUP_DONT_CENTER_TABBED_CHILDREN;
	/* If HINT_ITEM_GROUP_TAB_STYLE is supported, then ignore hints
	   to center children. */

/* Instance data */

    @instance GenItemGroupBehaviorType GIGI_behaviorType = GIGBT_EXCLUSIVE;
    @instance word    GIGI_selection = GIGS_NONE;
    @instance word    GIGI_numSelections = 0;
    @instance GenItemGroupStateFlags    GIGI_stateFlags = 0;
    @instance optr    GIGI_destination;
    @instance Message GIGI_applyMsg = 0;
@endc

@endlib
