/***********************************************************************
 *
 * PROJECT:       HTMLPars
 * FILE:          htmlpars.goh
 *
 * AUTHOR:	  Marcus Gr”ber
 *
 ***********************************************************************/

@include <Objects/vLTextC.goh>    /* VisLargeText definitions */

#include "htmlopt.h"

#define HTML_MAXBUF    256
#define MIME_MAXBUF    32

#define URL_MAX_TYPE            9
#define URL_MAX_SERVER          256
#define URL_MAX_PATH            256
#define URL_MAX_USERNAME        64
#define URL_MAX_PASSWORD        64

/***************************************************************************
 *              HTML Import
 ***************************************************************************/

typedef struct {
  MemHandle      HE_block;               /* pass: block to create arrays in */
  WWFixedAsDWord HE_pointSize;
  FontID         HE_plainFont;
  FontID         HE_exampleFont;
  WordFlags      HE_options;

  ChunkHandle    HE_documentTitle;
  ChunkHandle    HE_imageArray;
} HTMLextra;

typedef struct {
  dword pos;                            /* starting position of image */
  word len;                             /* length of image placeholder */
  WordFlags flags;                      /* additional flags describing image */
    #define HTML_IDF_RESOLVED 0x01      /*  - image was loaded */
  XYSize size;                          /* target size, or 0 if not spec'd */
  char name[1];                         /* URL for image starts here */
} HTMLimageData;


typedef int ReadHTML_getc(dword data);  /* callback routine to get one char */

int _pascal ParseHTMLFile(ReadHTML_getc *, dword, optr, HTMLextra *);
int _pascal ParsePlainFile(ReadHTML_getc *, dword, optr, HTMLextra *);

/***************************************************************************
 *              HTML Export
 ***************************************************************************/

int _pascal CreateHTMLFile(optr, FileHandle out);

/***************************************************************************
 *              URL resolution
 ***************************************************************************/

Boolean _pascal ToolsParseURL(char *url, char *type, char *server, char *path);
char * _pascal ToolsMakeURL(char *type, char *server, char *path, char *url);
char * _pascal ToolsResolvePathname(char *cur, char *new);
int _pascal ToolsResolveRelativeURL(char *cur, char *url);
Boolean _pascal ToolsMakeURLAbsolute(char *cur, char *url, char *urldst);
void _pascal ToolsNormalizeURL(char *url);
VMBlockHandle ChunksToVMChainBlock(VMFileHandle vmf,MemHandle heap,
  ChunkHandle *chunks,word n_chunks);
void VMChainBlockToChunks(VMFileHandle vmf,VMBlockHandle vmb,MemHandle heap,
  ChunkHandle *chunks,word n_chunks);

/***************************************************************************
 *              Various utility functions
 ***************************************************************************/

DiskHandle _pascal ToolsParseDiskOrStandardPath(char **p);
word _pascal ToolsStringSectionFindKey(char *section, char *key,
  char *subKey, char *value, word bufSize, Boolean mapLeftToRight);
optr _pascal ToolsFormatMessage(optr msg,char *res);
char * _pascal ToolsFindExtension(char *p);
char * _pascal xstrncpy(char *dst, char *src, word size);

/***************************************************************************
 *              HTML-aware Text Object class
 ***************************************************************************/

@class     HTMLTextClass, VisLargeTextClass;
  @default VTI_state = @default | VTS_SELECTABLE | VTS_TARGETABLE;
  @default VLTI_displayMode = VLTDM_DRAFT_WITH_STYLES;
  @default VLTI_attrs = VLTA_EXACT_HEIGHT;

  @instance optr           HTI_destination = 0;
  @instance Message        HTI_notificationMessage = 0;
  @instance WordFlags      HTI_attrs = 0;
  @instance optr           HTI_pageSizeControlOD = 0;
  @instance WWFixedAsDWord HTI_pointSize = MakeWWFixed(12);
  @instance FontID         HTI_plainFont = FID_DTC_URW_SANS;
  @instance FontID         HTI_exampleFont = FID_DTC_URW_MONO;
  @instance ChunkHandle    HTI_documentTitle = NULL_HANDLE;
  @instance ChunkHandle    HTI_imageArray = NULL_HANDLE;
  @instance VMChain        HTI_backgroundGString = 0;
  @instance optr           HTI_myView = NullOptr;
  @instance XYSize         HTI_backgroundSize = {0,0};

  @message void MSG_HTML_TEXT_INIT_STORAGE(VMFileHandle fileHan);
  @message void MSG_HTML_TEXT_DEINIT_STORAGE();

  @message void MSG_HTML_TEXT_START_LOAD();
  @message void MSG_HTML_TEXT_END_LOAD();

  @message int MSG_HTML_TEXT_LOAD_BUF_OPTR(optr text);
  @message int MSG_HTML_TEXT_LOAD_FILE(char *filePath);
  @message int MSG_HTML_TEXT_LOAD_PLAIN_BUF_OPTR(optr text);
  @message int MSG_HTML_TEXT_LOAD_PLAIN_FILE(char *filePath);

  @message void MSG_HTML_TEXT_NEXT_HOTSPOT();
  @message void MSG_HTML_TEXT_PREV_HOTSPOT();
  @message Boolean MSG_HTML_TEXT_EXEC_HOTSPOT();

  @message int MSG_HTML_TEXT_GOTO_ANCHOR(char *anchor);
  @message void MSG_HTML_TEXT_GET_HOTSPOT(word number,char *buf);
  @message void MSG_HTML_TEXT_GET_TITLE(char *title,word bufsize);
  @message word MSG_HTML_TEXT_GET_IMAGE_COUNT();
  @message Boolean MSG_HTML_TEXT_GET_IMAGE(word nImage,
    char *title,word bufsize,HTMLimageData *data);
  @message Boolean MSG_HTML_TEXT_REPLACE_IMAGE(word nImage,
    VisTextGraphic *graphic,VMFileHandle vmf);
  @message Boolean MSG_HTML_TEXT_MARK_IMAGE_RESOLVED(word nImage);
  @message Boolean MSG_HTML_TEXT_TEST_UNRESOLVED_IMAGES();
  @message void MSG_HTML_TEXT_TRACK_REPLACE(dword pos,sword len);

  @message WordFlags MSG_HTML_TEXT_GET_ATTRS();
  @message void MSG_HTML_TEXT_SET_ATTRS(WordFlags attrs);

  @prototype void HTML_TEXT_EVENT_MSG(optr sender,word event,word data);

    #define HTML_EV_HOTSPOT_PTR      1
    #define HTML_EV_HOTSPOT_SELECTED 2
    #define HTML_EV_HOTSPOT_LEFT     3

  @message VMChain MSG_HTML_TEXT_SAVE_CONTENTS(VMFileHandle vmf);
  @message void MSG_HTML_TEXT_RESTORE_CONTENTS(VMFileHandle vmf,VMChain vmc);

  @message FontID MSG_HTML_TEXT_GET_FONT_ID();
  @message WWFixedAsDWord MSG_HTML_TEXT_GET_POINT_SIZE();

  @message void MSG_HTML_TEXT_SET_BACKGROUND(
    VMChain block, VMFileHandle vmf, sword width, sword height);

  @message void MSG_HTML_TEXT_SAVE_OPTIONS();

@endc;
